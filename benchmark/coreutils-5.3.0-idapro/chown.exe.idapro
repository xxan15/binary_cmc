.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : BA24F26EE8A126E04477210A58F1CEF503B2794EB92966A59DCD2B3404B6AD60
.text:00401000 ; Input MD5    : D221061C7EE0FCD607A1CEB7C0AE76A5
.text:00401000 ; Input CRC32  : 2D4EB3DA
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/chown.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A23F (Wed Apr 20 18:41:03 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00012BA0 (  76704.)
.text:00401000 ; Section size in file          : 00012C00 (  76800.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401E90+AF↓p
.text:00401040                                         ; .text:00412DD0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412D70
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_414000
.text:004010A2                 mov     edx, dword_4140B0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_414004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4140D0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4140D0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_412D40
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_414000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_414004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401E90
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412D70
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aRecursive      db 'recursive',0        ; DATA XREF: .text:off_401300↓o
.text:0040128A aChanges        db 'changes',0          ; DATA XREF: .text:00401310↓o
.text:00401292 aDereference    db 'dereference',0      ; DATA XREF: .text:00401320↓o
.text:0040129E aFrom           db 'from',0             ; DATA XREF: .text:00401330↓o
.text:004012A3 aNoDereference  db 'no-dereference',0   ; DATA XREF: .text:00401340↓o
.text:004012B2 aNoPreserveRoot_0 db 'no-preserve-root',0
.text:004012B2                                         ; DATA XREF: .text:00401350↓o
.text:004012C3 aPreserveRoot   db 'preserve-root',0
.text:004012D1 aQuiet          db 'quiet',0            ; DATA XREF: .text:00401370↓o
.text:004012D7 aSilent         db 'silent',0           ; DATA XREF: .text:00401380↓o
.text:004012DE aReference      db 'reference',0        ; DATA XREF: .text:00401390↓o
.text:004012E8 aVerbose        db 'verbose',0          ; DATA XREF: .text:004013A0↓o
.text:004012F0 aHelp           db 'help',0             ; DATA XREF: .text:004013B0↓o
.text:004012F5 aVersion        db 'version',0          ; DATA XREF: .text:004013C0↓o
.text:004012FD                 align 10h
.text:00401300 off_401300      dd offset aRecursive    ; DATA XREF: sub_401E90+C8↓o
.text:00401300                                         ; "recursive"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 52h
.text:00401310                 dd offset aChanges      ; "changes"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 63h
.text:00401320                 dd offset aDereference  ; "dereference"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 80h
.text:00401330                 dd offset aFrom         ; "from"
.text:00401334                 dd 1, 0
.text:0040133C                 dd 81h
.text:00401340                 dd offset aNoDereference ; "no-dereference"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 68h
.text:00401350                 dd offset aNoPreserveRoot_0 ; "no-preserve-root"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 82h
.text:00401360 ; ---------------------------------------------------------------------------
.text:00401360                 retn
.text:00401360 ; ---------------------------------------------------------------------------
.text:00401361                 db 12h, 40h, 0
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 83h
.text:00401370                 dd offset aQuiet        ; "quiet"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 66h
.text:00401380                 dd offset aSilent       ; "silent"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 66h
.text:00401390                 dd offset aReference    ; "reference"
.text:00401394                 dd 1, 0
.text:0040139C                 dd 84h
.text:004013A0                 dd offset aVerbose      ; "verbose"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 76h
.text:004013B0                 dd offset aHelp         ; "help"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 0FFFFFF7Eh
.text:004013C0                 dd offset aVersion      ; "version"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013E0 ; const char Locale
.text:004013E0 Locale          db 0                    ; DATA XREF: sub_401E90+72↓o
.text:004013E0                                         ; sub_401E90+6BA↓o
.text:004013E1                 align 20h
.text:00401400 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401400                                         ; DATA XREF: sub_401E90+86↓o
.text:00401423 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401E90+8E↓o
.text:00401423                                         ; sub_401E90+9B↓o
.text:0040142D ; const char aHlprcfhv[]
.text:0040142D aHlprcfhv       db 'HLPRcfhv',0         ; DATA XREF: sub_401E90+D0↓o
.text:00401436                 align 10h
.text:00401440 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401440                                         ; DATA XREF: sub_401E90:loc_401FC3↓o
.text:00401440                                         ; .text:0040265C↓o
.text:00401467 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401E90+180↓o
.text:00401474 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401E90+188↓o
.text:00401484 a530            db '5.3.0',0            ; DATA XREF: sub_401E90+193↓o
.text:0040148A aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401E90+19B↓o
.text:00401498 ; const FILE stru_401498
.text:00401498 stru_401498     FILE <776F6863h, 0F689006Eh, 67617355h, 25203A65h, 4F5B2073h, \
.text:00401498                                         ; DATA XREF: sub_401E90+1A3↓o
.text:00401498                                         ; sub_401E90:loc_40204C↓o ...
.text:00401498                       4F495450h, 2E2E5D4Eh, 4F5B202Eh>
.text:004014B8                 db  57h ; W
.text:004014B9                 db  4Eh ; N
.text:004014BA                 db  45h ; E
.text:004014BB                 db  52h ; R
.text:004014BC                 db  5Dh ; ]
.text:004014BD                 db  5Bh ; [
.text:004014BE                 db  3Ah ; :
.text:004014BF                 db  5Bh ; [
.text:004014C0                 db  47h ; G
.text:004014C1                 db  52h ; R
.text:004014C2                 db  4Fh ; O
.text:004014C3                 db  55h ; U
.text:004014C4                 db  50h ; P
.text:004014C5                 db  5Dh ; ]
.text:004014C6                 db  5Dh ; ]
.text:004014C7                 db  20h
.text:004014C8                 db  46h ; F
.text:004014C9                 db  49h ; I
.text:004014CA                 db  4Ch ; L
.text:004014CB                 db  45h ; E
.text:004014CC                 db  2Eh ; .
.text:004014CD                 db  2Eh ; .
.text:004014CE                 db  2Eh ; .
.text:004014CF                 db  0Ah
.text:004014D0                 db  20h
.text:004014D1                 db  20h
.text:004014D2                 db  6Fh ; o
.text:004014D3                 db  72h ; r
.text:004014D4                 db  3Ah ; :
.text:004014D5                 db  20h
.text:004014D6                 db  20h
.text:004014D7                 db  25h ; %
.text:004014D8                 db  73h ; s
.text:004014D9                 db  20h
.text:004014DA                 db  5Bh ; [
.text:004014DB                 db  4Fh ; O
.text:004014DC                 db  50h ; P
.text:004014DD                 db  54h ; T
.text:004014DE                 db  49h ; I
.text:004014DF                 db  4Fh ; O
.text:004014E0                 db  4Eh ; N
.text:004014E1                 db  5Dh ; ]
.text:004014E2                 db  2Eh ; .
.text:004014E3                 db  2Eh ; .
.text:004014E4                 db  2Eh ; .
.text:004014E5                 db  20h
.text:004014E6                 db  2Dh ; -
.text:004014E7                 db  2Dh ; -
.text:004014E8                 db  72h ; r
.text:004014E9                 db  65h ; e
.text:004014EA                 db  66h ; f
.text:004014EB                 db  65h ; e
.text:004014EC                 db  72h ; r
.text:004014ED                 db  65h ; e
.text:004014EE                 db  6Eh ; n
.text:004014EF                 db  63h ; c
.text:004014F0                 db  65h ; e
.text:004014F1                 db  3Dh ; =
.text:004014F2                 db  52h ; R
.text:004014F3                 db  46h ; F
.text:004014F4                 db  49h ; I
.text:004014F5                 db  4Ch ; L
.text:004014F6                 db  45h ; E
.text:004014F7                 db  20h
.text:004014F8                 db  46h ; F
.text:004014F9                 db  49h ; I
.text:004014FA                 db  4Ch ; L
.text:004014FB                 db  45h ; E
.text:004014FC                 db  2Eh ; .
.text:004014FD                 db  2Eh ; .
.text:004014FE                 db  2Eh ; .
.text:004014FF                 db  0Ah
.text:00401500                 db    0
.text:00401501                 align 20h
.text:00401520 aChangeTheOwner db 'Change the owner and/or group of each FILE to OWNER and/or GROUP.'
.text:00401520                                         ; DATA XREF: sub_401E90+1DF↓o
.text:00401520                                         ; .text:004026B3↓o
.text:00401520                 db 0Ah
.text:00401520                 db 'With --reference, change the owner and group of each FILE to thos'
.text:00401520                 db 'e of RFILE.',0Ah
.text:00401520                 db 0Ah
.text:00401520                 db '  -c, --changes          like verbose but report only when a chan'
.text:00401520                 db 'ge is made',0Ah
.text:00401520                 db '      --dereference      affect the referent of each symbolic lin'
.text:00401520                 db 'k, rather',0Ah
.text:00401520                 db '                         than the symbolic link itself (this is t'
.text:00401520                 db 'he default)',0Ah,0
.text:00401695                 align 10h
.text:004016A0 aHNoDereference db '  -h, --no-dereference   affect each symbolic link instead of any'
.text:004016A0                                         ; DATA XREF: sub_401E90+201↓o
.text:004016A0                                         ; .text:004026D5↓o
.text:004016A0                 db ' referenced',0Ah
.text:004016A0                 db '                         file (useful only on systems that can ch'
.text:004016A0                 db 'ange the',0Ah
.text:004016A0                 db '                         ownership of a symlink)',0Ah,0
.text:00401769                 align 20h
.text:00401780 aFromCurrentOwn db '      --from=CURRENT_OWNER:CURRENT_GROUP',0Ah
.text:00401780                                         ; DATA XREF: sub_401E90+223↓o
.text:00401780                                         ; .text:004026F7↓o
.text:00401780                 db '                         change the owner and/or group of each fi'
.text:00401780                 db 'le only if',0Ah
.text:00401780                 db '                         its current owner and/or group match tho'
.text:00401780                 db 'se specified',0Ah
.text:00401780                 db '                         here.  Either may be omitted, in which c'
.text:00401780                 db 'ase a match',0Ah
.text:00401780                 db '                         is not required for the omitted attribut'
.text:00401780                 db 'e.',0Ah,0
.text:004018D5                 align 10h
.text:004018E0 aNoPreserveRoot db '      --no-preserve-root do not treat `/',27h,' specially (the de'
.text:004018E0                                         ; DATA XREF: sub_401E90+245↓o
.text:004018E0                                         ; .text:00402719↓o
.text:004018E0                 db 'fault)',0Ah
.text:004018E0                 db '      --preserve-root    fail to operate recursively on `/',27h,0Ah
.text:004018E0                 db 0
.text:0040195F                 align 10h
.text:00401960 aFSilentQuietSu db '  -f, --silent, --quiet  suppress most error messages',0Ah
.text:00401960                                         ; DATA XREF: sub_401E90+267↓o
.text:00401960                                         ; .text:0040273B↓o
.text:00401960                 db '      --reference=RFILE  use RFILE',27h,'s owner and group rather'
.text:00401960                 db ' than',0Ah
.text:00401960                 db '                         the specifying OWNER:GROUP values',0Ah
.text:00401960                 db '  -R, --recursive        operate on files and directories recursi'
.text:00401960                 db 'vely',0Ah
.text:00401960                 db '  -v, --verbose          output a diagnostic for every file proce'
.text:00401960                 db 'ssed',0Ah
.text:00401960                 db 0Ah,0
.text:00401AA0 aTheFollowingOp db 'The following options modify how a hierarchy is traversed when th'
.text:00401AA0                                         ; DATA XREF: sub_401E90+289↓o
.text:00401AA0                                         ; .text:0040275D↓o
.text:00401AA0                 db 'e -R',0Ah
.text:00401AA0                 db 'option is also specified.  If more than one is specified, only th'
.text:00401AA0                 db 'e final',0Ah
.text:00401AA0                 db 'one takes effect.',0Ah
.text:00401AA0                 db 0Ah
.text:00401AA0                 db '  -H                     if a command line argument is a symbolic'
.text:00401AA0                 db ' link',0Ah
.text:00401AA0                 db '                         to a directory, traverse it',0Ah
.text:00401AA0                 db '  -L                     traverse every symbolic link to a direct'
.text:00401AA0                 db 'ory',0Ah
.text:00401AA0                 db '                         encountered',0Ah
.text:00401AA0                 db '  -P                     do not traverse any symbolic links (defa'
.text:00401AA0                 db 'ult)',0Ah
.text:00401AA0                 db 0Ah,0
.text:00401C70                 align 20h
.text:00401C80 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401C80                                         ; DATA XREF: sub_401E90+2AB↓o
.text:00401C80                                         ; .text:0040277F↓o
.text:00401CAD                 align 20h
.text:00401CC0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401CC0                                         ; DATA XREF: sub_401E90+2CD↓o
.text:00401CC0                                         ; .text:004027A1↓o
.text:00401CF6                 align 10h
.text:00401D00 aOwnerIsUnchang db 0Ah                  ; DATA XREF: sub_401E90+2EF↓o
.text:00401D00                                         ; .text:004027C3↓o
.text:00401D00                 db 'Owner is unchanged if missing.  Group is unchanged if missing, bu'
.text:00401D00                 db 't changed',0Ah
.text:00401D00                 db 'to login group if implied by a `:',27h,' following a symbolic OWN'
.text:00401D00                 db 'ER.',0Ah
.text:00401D00                 db 'OWNER and GROUP may be numeric as well as symbolic.',0Ah,0
.text:00401DC0 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401E90+311↓o
.text:00401DC0                                         ; .text:004027E5↓o
.text:00401DC0                 db 'Report bugs to <%s>.',0Ah,0
.text:00401DD7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401DD7                                         ; DATA XREF: sub_401E90+31E↓o
.text:00401DD7                                         ; .text:004027F2↓o
.text:00401DED ; const char aSS[]
.text:00401DED aSS             db '%s: %s',0           ; DATA XREF: sub_401E90+468↓o
.text:00401DED                                         ; sub_401E90+690↓o
.text:00401DF4 ; const char asc_401DF4[]
.text:00401DF4 asc_401DF4      db '/',0                ; DATA XREF: sub_401E90+5C0↓o
.text:00401DF6                 align 10h
.text:00401E00 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:00401E00                                         ; DATA XREF: sub_401E90+5CC↓o
.text:00401E00                                         ; sub_401E90+60F↓o
.text:00401E1F aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401E90+6D0↓o
.text:00401E2F aMissingOperand_0 db 'missing operand after %s',0
.text:00401E2F                                         ; DATA XREF: sub_401E90+706↓o
.text:00401E48 aRHRequiresP    db '-R -h requires -P',0
.text:00401E48                                         ; DATA XREF: sub_401E90:loc_4025CF↓o
.text:00401E5A                 align 10h
.text:00401E60 aRDereferenceRe db '-R --dereference requires either -H or -L',0
.text:00401E60                                         ; DATA XREF: sub_401E90:loc_40260B↓o
.text:00401E8A                 align 10h
.text:00401E90
.text:00401E90 ; =============== S U B R O U T I N E =======================================
.text:00401E90
.text:00401E90 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401E90
.text:00401E90 sub_401E90      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401E90
.text:00401E90 Category        = dword ptr -0F8h
.text:00401E90 Locale          = dword ptr -0F4h
.text:00401E90 var_F0          = dword ptr -0F0h
.text:00401E90 var_EC          = byte ptr -0ECh
.text:00401E90 var_E8          = byte ptr -0E8h
.text:00401E90 var_E4          = dword ptr -0E4h
.text:00401E90 var_E0          = dword ptr -0E0h
.text:00401E90 var_CC          = dword ptr -0CCh
.text:00401E90 var_C8          = dword ptr -0C8h
.text:00401E90 var_C1          = byte ptr -0C1h
.text:00401E90 var_C0          = dword ptr -0C0h
.text:00401E90 var_BC          = dword ptr -0BCh
.text:00401E90 var_B8          = dword ptr -0B8h
.text:00401E90 var_B4          = dword ptr -0B4h
.text:00401E90 var_B0          = dword ptr -0B0h
.text:00401E90 var_AC          = dword ptr -0ACh
.text:00401E90 var_A8          = dword ptr -0A8h
.text:00401E90 var_8C          = dword ptr -8Ch
.text:00401E90 var_88          = dword ptr -88h
.text:00401E90 var_38          = dword ptr -38h
.text:00401E90 var_34          = byte ptr -34h
.text:00401E90 var_30          = dword ptr -30h
.text:00401E90 var_2C          = byte ptr -2Ch
.text:00401E90 var_2B          = byte ptr -2Bh
.text:00401E90 var_28          = dword ptr -28h
.text:00401E90 var_24          = dword ptr -24h
.text:00401E90 arg_0           = dword ptr  8
.text:00401E90 arg_4           = dword ptr  0Ch
.text:00401E90
.text:00401E90                 push    ebp
.text:00401E91                 xor     eax, eax
.text:00401E93                 mov     ebp, esp
.text:00401E95                 push    edi
.text:00401E96                 push    esi
.text:00401E97                 push    ebx
.text:00401E98                 sub     esp, 0ECh
.text:00401E9E                 mov     ebx, 0FFFFFFFFh
.text:00401EA3                 mov     edi, [ebp+arg_4]
.text:00401EA6                 and     esp, 0FFFFFFF0h
.text:00401EA9                 mov     esi, [ebp+arg_0]
.text:00401EAC                 call    __alloca
.text:00401EB1                 call    sub_412E10
.text:00401EB6                 mov     [ebp+var_C0], ebx
.text:00401EBC                 mov     edx, 0FFFFFFFFh
.text:00401EC1                 mov     ecx, 0FFFFFFFFh
.text:00401EC6                 mov     [ebp+var_B8], edx
.text:00401ECC                 mov     ebx, 0FFFFFFFFh
.text:00401ED1                 mov     eax, 0FFFFFFFFh
.text:00401ED6                 mov     [ebp+var_BC], ecx
.text:00401EDC                 mov     edx, [edi]
.text:00401EDE                 mov     ecx, 10h
.text:00401EE3                 mov     [ebp+var_C8], ecx
.text:00401EE9                 mov     ds:dword_415E80, edx
.text:00401EEF                 mov     [ebp+var_C1], 0
.text:00401EF6                 mov     [ebp+var_B4], ebx
.text:00401EFC                 mov     [ebp+var_CC], eax
.text:00401F02                 mov     [esp+0F8h+Locale], offset Locale ; Locale
.text:00401F0A                 mov     [esp+0F8h+Category], 0 ; Category
.text:00401F11                 call    setlocale
.text:00401F16                 mov     [esp+0F8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401F1E                 mov     [esp+0F8h+Category], offset aCoreutils ; "coreutils"
.text:00401F25                 call    ds:__imp_libintl_bindtextdomain
.text:00401F2B                 mov     [esp+0F8h+Category], offset aCoreutils ; "coreutils"
.text:00401F32                 call    ds:libintl_textdomain
.text:00401F38                 mov     [esp+0F8h+Category], offset sub_406CF0 ; void (__cdecl *)()
.text:00401F3F                 call    sub_401040
.text:00401F44                 lea     edx, [ebp+var_38]
.text:00401F47                 mov     [esp+0F8h+Category], edx
.text:00401F4A                 call    sub_402820
.text:00401F4F                 nop
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401E90:loc_401FC1↓j
.text:00401F50                                         ; sub_401E90+360↓j ...
.text:00401F50                 mov     dword ptr [esp+0F8h+var_E8], 0 ; int
.text:00401F58                 mov     dword ptr [esp+0F8h+var_EC], offset off_401300 ; char
.text:00401F60                 mov     [esp+0F8h+var_F0], offset aHlprcfhv ; "HLPRcfhv"
.text:00401F68                 mov     [esp+0F8h+Locale], edi ; int
.text:00401F6C                 mov     [esp+0F8h+Category], esi ; int
.text:00401F6F                 call    sub_406B80
.text:00401F74                 cmp     eax, 0FFFFFFFFh
.text:00401F77                 jz      loc_402329
.text:00401F7D                 cmp     eax, 66h ; 'f'
.text:00401F80                 jz      loc_402320
.text:00401F86                 cmp     eax, 66h ; 'f'
.text:00401F89                 jg      loc_402210
.text:00401F8F                 cmp     eax, 4Ch ; 'L'
.text:00401F92                 jz      loc_402200
.text:00401F98                 cmp     eax, 4Ch ; 'L'
.text:00401F9B                 jg      loc_4021C3
.text:00401FA1                 cmp     eax, 0FFFFFF7Eh
.text:00401FA6                 jz      loc_40204C
.text:00401FAC                 cmp     eax, 0FFFFFF7Eh
.text:00401FB1                 jle     short loc_401FFB
.text:00401FB3                 mov     ecx, 11h
.text:00401FB8                 cmp     eax, 48h ; 'H'
.text:00401FBB                 mov     [ebp+var_C8], ecx
.text:00401FC1
.text:00401FC1 loc_401FC1:                             ; CODE XREF: sub_401E90+34B↓j
.text:00401FC1                                         ; sub_401E90+3A7↓j ...
.text:00401FC1                 jz      short loc_401F50
.text:00401FC3
.text:00401FC3 loc_401FC3:                             ; CODE XREF: sub_401E90+170↓j
.text:00401FC3                                         ; sub_401E90+353↓j ...
.text:00401FC3                 mov     [esp+0F8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401FCA                 call    ds:libintl_gettext
.text:00401FD0                 mov     edi, ds:_iob
.text:00401FD6                 mov     ebx, ds:dword_415E80
.text:00401FDC                 add     edi, 40h ; '@'
.text:00401FDF                 mov     [esp+0F8h+var_F0], ebx
.text:00401FE3                 mov     [esp+0F8h+Locale], eax ; Format
.text:00401FE7                 mov     [esp+0F8h+Category], edi ; Stream
.text:00401FEA                 call    fprintf
.text:00401FEF                 mov     [esp+0F8h+Category], 1 ; Code
.text:00401FF6
.text:00401FF6 loc_401FF6:                             ; CODE XREF: sub_401E90+1BA↓j
.text:00401FF6                                         ; sub_401E90+5A8↓j
.text:00401FF6                 call    exit
.text:00401FFB ; ---------------------------------------------------------------------------
.text:00401FFB
.text:00401FFB loc_401FFB:                             ; CODE XREF: sub_401E90+121↑j
.text:00401FFB                 cmp     eax, 0FFFFFF7Dh
.text:00402000                 jnz     short loc_401FC3
.text:00402002                 mov     [esp+0F8h+var_E0], 0
.text:0040200A                 mov     edx, ds:_iob
.text:00402010                 mov     [esp+0F8h+var_E4], offset aJimMeyering ; "Jim Meyering"
.text:00402018                 mov     dword ptr [esp+0F8h+var_E8], offset aDavidMackenzie ; "David MacKenzie"
.text:00402020                 add     edx, 20h ; ' '
.text:00402023                 mov     dword ptr [esp+0F8h+var_EC], offset a530 ; "5.3.0"
.text:0040202B                 mov     [esp+0F8h+var_F0], offset aGnuCoreutils ; "GNU coreutils"
.text:00402033                 mov     [esp+0F8h+Locale], offset stru_401498 ; FILE *
.text:0040203B                 mov     [esp+0F8h+Category], edx ; FILE *
.text:0040203E                 call    sub_406740
.text:00402043
.text:00402043 loc_402043:                             ; CODE XREF: sub_401E90+32E↓j
.text:00402043                 mov     [esp+0F8h+Category], 0
.text:0040204A                 jmp     short loc_401FF6
.text:0040204C ; ---------------------------------------------------------------------------
.text:0040204C
.text:0040204C loc_40204C:                             ; CODE XREF: sub_401E90+116↑j
.text:0040204C                 mov     [esp+0F8h+Category], offset stru_401498._base
.text:00402053                 call    ds:libintl_gettext
.text:00402059                 mov     edi, ds:dword_415E80
.text:0040205F                 mov     [esp+0F8h+Category], eax ; Format
.text:00402062                 mov     [esp+0F8h+var_F0], edi
.text:00402066                 mov     [esp+0F8h+Locale], edi
.text:0040206A                 call    printf
.text:0040206F                 mov     [esp+0F8h+Category], offset aChangeTheOwner ; "Change the owner and/or group of each F"...
.text:00402076                 call    ds:libintl_gettext
.text:0040207C                 mov     esi, ds:_iob
.text:00402082                 add     esi, 20h ; ' '
.text:00402085                 mov     [esp+0F8h+Locale], esi ; Stream
.text:00402089                 mov     [esp+0F8h+Category], eax ; Buffer
.text:0040208C                 call    fputs
.text:00402091                 mov     [esp+0F8h+Category], offset aHNoDereference ; "  -h, --no-dereference   affect each sy"...
.text:00402098                 call    ds:libintl_gettext
.text:0040209E                 mov     ecx, ds:_iob
.text:004020A4                 add     ecx, 20h ; ' '
.text:004020A7                 mov     [esp+0F8h+Locale], ecx ; Stream
.text:004020AB                 mov     [esp+0F8h+Category], eax ; Buffer
.text:004020AE                 call    fputs
.text:004020B3                 mov     [esp+0F8h+Category], offset aFromCurrentOwn ; "      --from=CURRENT_OWNER:CURRENT_GROU"...
.text:004020BA                 call    ds:libintl_gettext
.text:004020C0                 mov     ebx, ds:_iob
.text:004020C6                 add     ebx, 20h ; ' '
.text:004020C9                 mov     [esp+0F8h+Locale], ebx ; Stream
.text:004020CD                 mov     [esp+0F8h+Category], eax ; Buffer
.text:004020D0                 call    fputs
.text:004020D5                 mov     [esp+0F8h+Category], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:004020DC                 call    ds:libintl_gettext
.text:004020E2                 mov     edi, ds:_iob
.text:004020E8                 add     edi, 20h ; ' '
.text:004020EB                 mov     [esp+0F8h+Locale], edi ; Stream
.text:004020EF                 mov     [esp+0F8h+Category], eax ; Buffer
.text:004020F2                 call    fputs
.text:004020F7                 mov     [esp+0F8h+Category], offset aFSilentQuietSu ; "  -f, --silent, --quiet  suppress most "...
.text:004020FE                 call    ds:libintl_gettext
.text:00402104                 mov     esi, ds:_iob
.text:0040210A                 add     esi, 20h ; ' '
.text:0040210D                 mov     [esp+0F8h+Locale], esi ; Stream
.text:00402111                 mov     [esp+0F8h+Category], eax ; Buffer
.text:00402114                 call    fputs
.text:00402119                 mov     [esp+0F8h+Category], offset aTheFollowingOp ; "The following options modify how a hier"...
.text:00402120                 call    ds:libintl_gettext
.text:00402126                 mov     ecx, ds:_iob
.text:0040212C                 add     ecx, 20h ; ' '
.text:0040212F                 mov     [esp+0F8h+Locale], ecx ; Stream
.text:00402133                 mov     [esp+0F8h+Category], eax ; Buffer
.text:00402136                 call    fputs
.text:0040213B                 mov     [esp+0F8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402142                 call    ds:libintl_gettext
.text:00402148                 mov     ebx, ds:_iob
.text:0040214E                 add     ebx, 20h ; ' '
.text:00402151                 mov     [esp+0F8h+Locale], ebx ; Stream
.text:00402155                 mov     [esp+0F8h+Category], eax ; Buffer
.text:00402158                 call    fputs
.text:0040215D                 mov     [esp+0F8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402164                 call    ds:libintl_gettext
.text:0040216A                 mov     edi, ds:_iob
.text:00402170                 add     edi, 20h ; ' '
.text:00402173                 mov     [esp+0F8h+Locale], edi ; Stream
.text:00402177                 mov     [esp+0F8h+Category], eax ; Buffer
.text:0040217A                 call    fputs
.text:0040217F                 mov     [esp+0F8h+Category], offset aOwnerIsUnchang ; "\nOwner is unchanged if missing.  Group"...
.text:00402186                 call    ds:libintl_gettext
.text:0040218C                 mov     esi, ds:_iob
.text:00402192                 add     esi, 20h ; ' '
.text:00402195                 mov     [esp+0F8h+Locale], esi ; Stream
.text:00402199                 mov     [esp+0F8h+Category], eax ; Buffer
.text:0040219C                 call    fputs
.text:004021A1                 mov     [esp+0F8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004021A8                 call    ds:libintl_gettext
.text:004021AE                 mov     [esp+0F8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004021B6                 mov     [esp+0F8h+Category], eax ; Format
.text:004021B9                 call    printf
.text:004021BE                 jmp     loc_402043
.text:004021C3 ; ---------------------------------------------------------------------------
.text:004021C3
.text:004021C3 loc_4021C3:                             ; CODE XREF: sub_401E90+10B↑j
.text:004021C3                 cmp     eax, 52h ; 'R'
.text:004021C6                 jz      short loc_4021F5
.text:004021C8                 cmp     eax, 52h ; 'R'
.text:004021CB                 jg      short loc_4021E0
.text:004021CD                 mov     edx, 10h
.text:004021D2                 cmp     eax, 50h ; 'P'
.text:004021D5                 mov     [ebp+var_C8], edx
.text:004021DB                 jmp     loc_401FC1
.text:004021E0 ; ---------------------------------------------------------------------------
.text:004021E0
.text:004021E0 loc_4021E0:                             ; CODE XREF: sub_401E90+33B↑j
.text:004021E0                 cmp     eax, 63h ; 'c'
.text:004021E3                 jnz     loc_401FC3
.text:004021E9                 mov     [ebp+var_38], 1
.text:004021F0                 jmp     loc_401F50
.text:004021F5 ; ---------------------------------------------------------------------------
.text:004021F5
.text:004021F5 loc_4021F5:                             ; CODE XREF: sub_401E90+336↑j
.text:004021F5                 mov     [ebp+var_34], 1
.text:004021F9                 jmp     loc_401F50
.text:004021F9 ; ---------------------------------------------------------------------------
.text:004021FE                 align 10h
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_401E90+102↑j
.text:00402200                 mov     edx, 2
.text:00402205                 mov     [ebp+var_C8], edx
.text:0040220B                 jmp     loc_401F50
.text:00402210 ; ---------------------------------------------------------------------------
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401E90+F9↑j
.text:00402210                 cmp     eax, 81h
.text:00402215                 jz      loc_4022A2
.text:0040221B                 cmp     eax, 81h
.text:00402220                 jg      short loc_402260
.text:00402222                 cmp     eax, 76h ; 'v'
.text:00402225                 jz      short loc_40224F
.text:00402227                 cmp     eax, 76h ; 'v'
.text:0040222A                 jg      short loc_40223C
.text:0040222C                 xor     ebx, ebx
.text:0040222E                 cmp     eax, 68h ; 'h'
.text:00402231                 mov     [ebp+var_CC], ebx
.text:00402237                 jmp     loc_401FC1
.text:0040223C ; ---------------------------------------------------------------------------
.text:0040223C
.text:0040223C loc_40223C:                             ; CODE XREF: sub_401E90+39A↑j
.text:0040223C                 mov     ecx, 1
.text:00402241                 add     eax, 0FFFFFF80h
.text:00402244                 mov     [ebp+var_CC], ecx
.text:0040224A                 jmp     loc_401FC1
.text:0040224F ; ---------------------------------------------------------------------------
.text:0040224F
.text:0040224F loc_40224F:                             ; CODE XREF: sub_401E90+395↑j
.text:0040224F                 mov     [ebp+var_38], 0
.text:00402256                 jmp     loc_401F50
.text:00402256 ; ---------------------------------------------------------------------------
.text:0040225B                 align 10h
.text:00402260
.text:00402260 loc_402260:                             ; CODE XREF: sub_401E90+390↑j
.text:00402260                 cmp     eax, 83h ; 'ƒ'
.text:00402265                 jz      short loc_402296
.text:00402267                 cmp     eax, 83h ; 'ƒ'
.text:0040226C                 jl      short loc_40228A
.text:0040226E                 cmp     eax, 84h ; '„'
.text:00402273                 jnz     loc_401FC3
.text:00402279                 mov     ebx, ds:dword_415EA0
.text:0040227F                 mov     ds:dword_415010, ebx
.text:00402285                 jmp     loc_401F50
.text:0040228A ; ---------------------------------------------------------------------------
.text:0040228A
.text:0040228A loc_40228A:                             ; CODE XREF: sub_401E90+3DC↑j
.text:0040228A                 mov     [ebp+var_C1], 0
.text:00402291                 jmp     loc_401F50
.text:00402296 ; ---------------------------------------------------------------------------
.text:00402296
.text:00402296 loc_402296:                             ; CODE XREF: sub_401E90+3D5↑j
.text:00402296                 mov     [ebp+var_C1], 1
.text:0040229D                 jmp     loc_401F50
.text:004022A2 ; ---------------------------------------------------------------------------
.text:004022A2
.text:004022A2 loc_4022A2:                             ; CODE XREF: sub_401E90+385↑j
.text:004022A2                 lea     ecx, [ebp+var_B0]
.text:004022A8                 lea     edx, [ebp+var_AC]
.text:004022AE                 mov     dword ptr [esp+0F8h+var_EC], ecx ; int
.text:004022B2                 mov     ecx, ds:dword_415EA0
.text:004022B8                 lea     ebx, [ebp+var_B4]
.text:004022BE                 mov     dword ptr [esp+0F8h+var_E8], edx ; int
.text:004022C2                 lea     edx, [ebp+var_B8]
.text:004022C8                 mov     [esp+0F8h+var_F0], ebx ; int
.text:004022CC                 mov     [esp+0F8h+Locale], edx ; int
.text:004022D0                 mov     [esp+0F8h+Category], ecx ; char *
.text:004022D3                 call    sub_406830
.text:004022D8                 test    eax, eax
.text:004022DA                 mov     ebx, eax
.text:004022DC                 jz      loc_401F50
.text:004022E2                 mov     ecx, ds:dword_415EA0
.text:004022E8                 mov     [esp+0F8h+Category], ecx ; char *
.text:004022EB                 call    sub_4067B0
.text:004022F0                 mov     dword ptr [esp+0F8h+var_EC], eax ; char
.text:004022F4                 mov     dword ptr [esp+0F8h+var_E8], ebx
.text:004022F8                 mov     [esp+0F8h+var_F0], offset aSS ; "%s: %s"
.text:00402300                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:00402308                 mov     [esp+0F8h+Category], 1 ; Code
.text:0040230F                 call    sub_409BA0
.text:00402314                 jmp     loc_401F50
.text:00402314 ; ---------------------------------------------------------------------------
.text:00402319                 align 10h
.text:00402320
.text:00402320 loc_402320:                             ; CODE XREF: sub_401E90+F0↑j
.text:00402320                 mov     [ebp+var_2B], 1
.text:00402324                 jmp     loc_401F50
.text:00402329 ; ---------------------------------------------------------------------------
.text:00402329
.text:00402329 loc_402329:                             ; CODE XREF: sub_401E90+E7↑j
.text:00402329                 cmp     [ebp+var_34], 0
.text:0040232D                 jz      loc_402632
.text:00402333                 cmp     [ebp+var_C8], 10h
.text:0040233A                 jz      loc_4025F9
.text:00402340                 mov     ebx, [ebp+var_CC]
.text:00402346                 test    ebx, ebx
.text:00402348                 jz      loc_4025CF
.text:0040234E
.text:0040234E loc_40234E:                             ; CODE XREF: sub_401E90+764↓j
.text:0040234E                 mov     [ebp+var_2C], 1
.text:00402352
.text:00402352 loc_402352:                             ; CODE XREF: sub_401E90+776↓j
.text:00402352                                         ; sub_401E90+7B9↓j
.text:00402352                 mov     ecx, dword_414010
.text:00402358                 mov     eax, esi
.text:0040235A                 mov     edx, ds:dword_415010
.text:00402360                 sub     eax, ecx
.text:00402362                 test    edx, edx
.text:00402364                 jz      loc_4025C6
.text:0040236A                 test    eax, eax
.text:0040236C                 jle     loc_40255C
.text:00402372
.text:00402372 loc_402372:                             ; CODE XREF: sub_401E90+737↓j
.text:00402372                 test    edx, edx
.text:00402374                 jz      loc_4024D4
.text:0040237A                 mov     [esp+0F8h+Category], edx ; char *
.text:0040237D                 lea     ecx, [ebp+var_A8]
.text:00402383                 mov     [esp+0F8h+Locale], ecx ; int
.text:00402387                 call    sub_40CBC0
.text:0040238C                 test    eax, eax
.text:0040238E                 jnz     loc_402491
.text:00402394
.text:00402394 loc_402394:                             ; CODE XREF: sub_401E90+63F↓j
.text:00402394                 mov     ecx, [ebp+var_8C]
.text:0040239A                 mov     esi, [ebp+var_88]
.text:004023A0                 mov     [ebp+var_C0], ecx
.text:004023A6                 mov     [esp+0F8h+Category], ecx
.text:004023A9                 mov     [ebp+var_BC], esi
.text:004023AF                 call    sub_4028B0
.text:004023B4                 mov     [ebp+var_28], eax
.text:004023B7                 mov     ebx, [ebp+var_88]
.text:004023BD                 mov     [esp+0F8h+Category], ebx
.text:004023C0                 call    sub_402860
.text:004023C5                 mov     [ebp+var_24], eax
.text:004023C8
.text:004023C8 loc_4023C8:                             ; CODE XREF: sub_401E90+6C7↓j
.text:004023C8                 cmp     [ebp+var_C1], 0
.text:004023CF                 jz      short loc_4023D7
.text:004023D1                 cmp     [ebp+var_34], 0
.text:004023D5                 jnz     short loc_40243D
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_401E90+53F↑j
.text:004023D7                                         ; sub_401E90+5BE↓j ...
.text:004023D7                 mov     edx, [ebp+var_B8]
.text:004023DD                 lea     ecx, [ebp+var_38]
.text:004023E0                 mov     ebx, [ebp+var_B4]
.text:004023E6                 mov     [esp+0F8h+var_E0], ecx
.text:004023EA                 mov     esi, [ebp+var_BC]
.text:004023F0                 mov     ecx, [ebp+var_C0]
.text:004023F6                 mov     dword ptr [esp+0F8h+var_E8], edx
.text:004023FA                 mov     edx, dword_414010
.text:00402400                 mov     [esp+0F8h+var_E4], ebx
.text:00402404                 mov     ebx, [ebp+var_C8]
.text:0040240A                 mov     dword ptr [esp+0F8h+var_EC], esi
.text:0040240E                 lea     esi, [edi+edx*4]
.text:00402411                 lea     edi, [ebp+var_38]
.text:00402414                 mov     [esp+0F8h+var_F0], ecx
.text:00402418                 mov     [esp+0F8h+Locale], ebx
.text:0040241C                 mov     [esp+0F8h+Category], esi
.text:0040241F                 call    sub_402910
.text:00402424                 mov     [esp+0F8h+Category], edi
.text:00402427                 mov     bl, al
.text:00402429                 call    nullsub_1
.text:0040242E                 xor     ecx, ecx
.text:00402430                 test    bl, bl
.text:00402432                 setz    cl
.text:00402435                 mov     [esp+0F8h+Category], ecx
.text:00402438                 jmp     loc_401FF6
.text:0040243D ; ---------------------------------------------------------------------------
.text:0040243D
.text:0040243D loc_40243D:                             ; CODE XREF: sub_401E90+545↑j
.text:0040243D                 mov     [esp+0F8h+Category], offset unk_415000
.text:00402444                 call    sub_405010
.text:00402449                 mov     [ebp+var_30], eax
.text:0040244C                 test    eax, eax
.text:0040244E                 jnz     short loc_4023D7
.text:00402450                 mov     [esp+0F8h+Category], offset asc_401DF4 ; "/"
.text:00402457                 call    sub_4067B0
.text:0040245C                 mov     [esp+0F8h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00402463                 mov     esi, eax
.text:00402465                 call    ds:libintl_gettext
.text:0040246B                 mov     ebx, eax
.text:0040246D                 call    _errno
.text:00402472                 mov     dword ptr [esp+0F8h+var_EC], esi ; char
.text:00402476                 mov     [esp+0F8h+var_F0], ebx ; char *
.text:0040247A                 mov     ebx, [eax]
.text:0040247C                 mov     [esp+0F8h+Category], 1 ; Code
.text:00402483                 mov     [esp+0F8h+Locale], ebx ; ErrorMessage
.text:00402487                 call    sub_409BA0
.text:0040248C                 jmp     loc_4023D7
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_401E90+4FE↑j
.text:00402491                 mov     edx, ds:dword_415010
.text:00402497                 mov     [esp+0F8h+Category], edx ; char *
.text:0040249A                 call    sub_4067B0
.text:0040249F                 mov     [esp+0F8h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:004024A6                 mov     esi, eax
.text:004024A8                 call    ds:libintl_gettext
.text:004024AE                 mov     ebx, eax
.text:004024B0                 call    _errno
.text:004024B5                 mov     dword ptr [esp+0F8h+var_EC], esi ; char
.text:004024B9                 mov     [esp+0F8h+var_F0], ebx ; char *
.text:004024BD                 mov     esi, [eax]
.text:004024BF                 mov     [esp+0F8h+Category], 1 ; Code
.text:004024C6                 mov     [esp+0F8h+Locale], esi ; ErrorMessage
.text:004024CA                 call    sub_409BA0
.text:004024CF                 jmp     loc_402394
.text:004024D4 ; ---------------------------------------------------------------------------
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_401E90+4E4↑j
.text:004024D4                 lea     ebx, [ebp+var_24]
.text:004024D7                 lea     edx, [ebp+var_28]
.text:004024DA                 mov     dword ptr [esp+0F8h+var_E8], ebx ; int
.text:004024DE                 lea     esi, [ebp+var_BC]
.text:004024E4                 mov     dword ptr [esp+0F8h+var_EC], edx ; int
.text:004024E8                 lea     ebx, [ebp+var_C0]
.text:004024EE                 mov     [esp+0F8h+Locale], ebx ; int
.text:004024F2                 mov     [esp+0F8h+var_F0], esi ; int
.text:004024F6                 mov     edx, [edi+ecx*4]
.text:004024F9                 mov     [esp+0F8h+Category], edx ; char *
.text:004024FC                 call    sub_406830
.text:00402501                 test    eax, eax
.text:00402503                 mov     ebx, eax
.text:00402505                 jz      short loc_40253C
.text:00402507                 mov     esi, dword_414010
.text:0040250D                 mov     ecx, [edi+esi*4]
.text:00402510                 mov     [esp+0F8h+Category], ecx ; char *
.text:00402513                 call    sub_4067B0
.text:00402518                 mov     dword ptr [esp+0F8h+var_EC], eax ; char
.text:0040251C                 mov     dword ptr [esp+0F8h+var_E8], ebx
.text:00402520                 mov     [esp+0F8h+var_F0], offset aSS ; "%s: %s"
.text:00402528                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:00402530                 mov     [esp+0F8h+Category], 1 ; Code
.text:00402537                 call    sub_409BA0
.text:0040253C
.text:0040253C loc_40253C:                             ; CODE XREF: sub_401E90+675↑j
.text:0040253C                 mov     eax, [ebp+var_28]
.text:0040253F                 test    eax, eax
.text:00402541                 jnz     short loc_402551
.text:00402543                 mov     edx, [ebp+var_24]
.text:00402546                 test    edx, edx
.text:00402548                 jz      short loc_402551
.text:0040254A                 mov     [ebp+var_28], offset Locale
.text:00402551
.text:00402551 loc_402551:                             ; CODE XREF: sub_401E90+6B1↑j
.text:00402551                                         ; sub_401E90+6B8↑j
.text:00402551                 inc     dword_414010
.text:00402557                 jmp     loc_4023C8
.text:0040255C ; ---------------------------------------------------------------------------
.text:0040255C
.text:0040255C loc_40255C:                             ; CODE XREF: sub_401E90+4DC↑j
.text:0040255C                                         ; sub_401E90+73D↓j
.text:0040255C                 cmp     esi, ecx
.text:0040255E                 jg      short loc_40258A
.text:00402560                 mov     [esp+0F8h+Category], offset aMissingOperand ; "missing operand"
.text:00402567                 call    ds:libintl_gettext
.text:0040256D                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:00402575                 mov     [esp+0F8h+Category], 0 ; Code
.text:0040257C                 mov     [esp+0F8h+var_F0], eax ; char *
.text:00402580                 call    sub_409BA0
.text:00402585                 jmp     loc_401FC3
.text:0040258A ; ---------------------------------------------------------------------------
.text:0040258A
.text:0040258A loc_40258A:                             ; CODE XREF: sub_401E90+6CE↑j
.text:0040258A                 mov     edx, [edi+esi*4-4]
.text:0040258E                 mov     [esp+0F8h+Category], edx ; char *
.text:00402591                 call    sub_4067B0
.text:00402596                 mov     [esp+0F8h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:0040259D                 mov     esi, eax
.text:0040259F                 call    ds:libintl_gettext
.text:004025A5                 mov     dword ptr [esp+0F8h+var_EC], esi ; char
.text:004025A9                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:004025B1                 mov     [esp+0F8h+Category], 0 ; Code
.text:004025B8                 mov     [esp+0F8h+var_F0], eax ; char *
.text:004025BC                 call    sub_409BA0
.text:004025C1                 jmp     loc_401FC3
.text:004025C6 ; ---------------------------------------------------------------------------
.text:004025C6
.text:004025C6 loc_4025C6:                             ; CODE XREF: sub_401E90+4D4↑j
.text:004025C6                 dec     eax
.text:004025C7                 jg      loc_402372
.text:004025CD                 jmp     short loc_40255C
.text:004025CF ; ---------------------------------------------------------------------------
.text:004025CF
.text:004025CF loc_4025CF:                             ; CODE XREF: sub_401E90+4B8↑j
.text:004025CF                 mov     [esp+0F8h+Category], offset aRHRequiresP ; "-R -h requires -P"
.text:004025D6                 call    ds:libintl_gettext
.text:004025DC                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:004025E4                 mov     [esp+0F8h+Category], 1 ; Code
.text:004025EB                 mov     [esp+0F8h+var_F0], eax ; char *
.text:004025EF                 call    sub_409BA0
.text:004025F4                 jmp     loc_40234E
.text:004025F9 ; ---------------------------------------------------------------------------
.text:004025F9
.text:004025F9 loc_4025F9:                             ; CODE XREF: sub_401E90+4AA↑j
.text:004025F9                 cmp     [ebp+var_CC], 1
.text:00402600                 jz      short loc_40260B
.text:00402602
.text:00402602 loc_402602:                             ; CODE XREF: sub_401E90+7A0↓j
.text:00402602                 mov     [ebp+var_2C], 0
.text:00402606                 jmp     loc_402352
.text:0040260B ; ---------------------------------------------------------------------------
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_401E90+770↑j
.text:0040260B                 mov     [esp+0F8h+Category], offset aRDereferenceRe ; "-R --dereference requires either -H or "...
.text:00402612                 call    ds:libintl_gettext
.text:00402618                 mov     [esp+0F8h+Locale], 0 ; ErrorMessage
.text:00402620                 mov     [esp+0F8h+Category], 1 ; Code
.text:00402627                 mov     [esp+0F8h+var_F0], eax ; char *
.text:0040262B                 call    sub_409BA0
.text:00402630                 jmp     short loc_402602
.text:00402632 ; ---------------------------------------------------------------------------
.text:00402632
.text:00402632 loc_402632:                             ; CODE XREF: sub_401E90+49D↑j
.text:00402632                 mov     eax, [ebp+var_CC]
.text:00402638                 mov     ecx, 10h
.text:0040263D                 mov     [ebp+var_C8], ecx
.text:00402643                 test    eax, eax
.text:00402645                 setnz   [ebp+var_2C]
.text:00402649                 jmp     loc_402352
.text:00402649 sub_401E90      endp
.text:00402649
.text:00402649 ; ---------------------------------------------------------------------------
.text:0040264E                 align 10h
.text:00402650                 push    ebx
.text:00402651                 sub     esp, 18h
.text:00402654                 mov     ebx, [esp+20h]
.text:00402658                 test    ebx, ebx
.text:0040265A                 jz      short loc_402690
.text:0040265C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402663                 call    ds:libintl_gettext
.text:00402669                 mov     edx, ds:_iob
.text:0040266F                 mov     ecx, ds:dword_415E80
.text:00402675                 add     edx, 40h ; '@'
.text:00402678                 mov     [esp+8], ecx
.text:0040267C                 mov     [esp+4], eax
.text:00402680                 mov     [esp], edx
.text:00402683                 call    fprintf
.text:00402688
.text:00402688 loc_402688:                             ; CODE XREF: .text:00402802↓j
.text:00402688                 mov     [esp], ebx
.text:0040268B                 call    exit
.text:00402690 ; ---------------------------------------------------------------------------
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: .text:0040265A↑j
.text:00402690                 mov     dword ptr [esp], offset stru_401498._base
.text:00402697                 call    ds:libintl_gettext
.text:0040269D                 mov     ecx, ds:dword_415E80
.text:004026A3                 mov     [esp], eax
.text:004026A6                 mov     [esp+8], ecx
.text:004026AA                 mov     [esp+4], ecx
.text:004026AE                 call    printf
.text:004026B3                 mov     dword ptr [esp], offset aChangeTheOwner ; "Change the owner and/or group of each F"...
.text:004026BA                 call    ds:libintl_gettext
.text:004026C0                 mov     ecx, ds:_iob
.text:004026C6                 add     ecx, 20h ; ' '
.text:004026C9                 mov     [esp+4], ecx
.text:004026CD                 mov     [esp], eax
.text:004026D0                 call    fputs
.text:004026D5                 mov     dword ptr [esp], offset aHNoDereference ; "  -h, --no-dereference   affect each sy"...
.text:004026DC                 call    ds:libintl_gettext
.text:004026E2                 mov     ecx, ds:_iob
.text:004026E8                 add     ecx, 20h ; ' '
.text:004026EB                 mov     [esp+4], ecx
.text:004026EF                 mov     [esp], eax
.text:004026F2                 call    fputs
.text:004026F7                 mov     dword ptr [esp], offset aFromCurrentOwn ; "      --from=CURRENT_OWNER:CURRENT_GROU"...
.text:004026FE                 call    ds:libintl_gettext
.text:00402704                 mov     ecx, ds:_iob
.text:0040270A                 add     ecx, 20h ; ' '
.text:0040270D                 mov     [esp+4], ecx
.text:00402711                 mov     [esp], eax
.text:00402714                 call    fputs
.text:00402719                 mov     dword ptr [esp], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:00402720                 call    ds:libintl_gettext
.text:00402726                 mov     ecx, ds:_iob
.text:0040272C                 add     ecx, 20h ; ' '
.text:0040272F                 mov     [esp+4], ecx
.text:00402733                 mov     [esp], eax
.text:00402736                 call    fputs
.text:0040273B                 mov     dword ptr [esp], offset aFSilentQuietSu ; "  -f, --silent, --quiet  suppress most "...
.text:00402742                 call    ds:libintl_gettext
.text:00402748                 mov     ecx, ds:_iob
.text:0040274E                 add     ecx, 20h ; ' '
.text:00402751                 mov     [esp+4], ecx
.text:00402755                 mov     [esp], eax
.text:00402758                 call    fputs
.text:0040275D                 mov     dword ptr [esp], offset aTheFollowingOp ; "The following options modify how a hier"...
.text:00402764                 call    ds:libintl_gettext
.text:0040276A                 mov     ecx, ds:_iob
.text:00402770                 add     ecx, 20h ; ' '
.text:00402773                 mov     [esp+4], ecx
.text:00402777                 mov     [esp], eax
.text:0040277A                 call    fputs
.text:0040277F                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402786                 call    ds:libintl_gettext
.text:0040278C                 mov     ecx, ds:_iob
.text:00402792                 add     ecx, 20h ; ' '
.text:00402795                 mov     [esp+4], ecx
.text:00402799                 mov     [esp], eax
.text:0040279C                 call    fputs
.text:004027A1                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004027A8                 call    ds:libintl_gettext
.text:004027AE                 mov     ecx, ds:_iob
.text:004027B4                 add     ecx, 20h ; ' '
.text:004027B7                 mov     [esp+4], ecx
.text:004027BB                 mov     [esp], eax
.text:004027BE                 call    fputs
.text:004027C3                 mov     dword ptr [esp], offset aOwnerIsUnchang ; "\nOwner is unchanged if missing.  Group"...
.text:004027CA                 call    ds:libintl_gettext
.text:004027D0                 mov     ecx, ds:_iob
.text:004027D6                 add     ecx, 20h ; ' '
.text:004027D9                 mov     [esp+4], ecx
.text:004027DD                 mov     [esp], eax
.text:004027E0                 call    fputs
.text:004027E5                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004027EC                 call    ds:libintl_gettext
.text:004027F2                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004027FA                 mov     [esp], eax
.text:004027FD                 call    printf
.text:00402802                 jmp     loc_402688
.text:00402802 ; ---------------------------------------------------------------------------
.text:00402807                 align 20h
.text:00402820
.text:00402820 ; =============== S U B R O U T I N E =======================================
.text:00402820
.text:00402820
.text:00402820 sub_402820      proc near               ; CODE XREF: sub_401E90+BA↑p
.text:00402820
.text:00402820 arg_0           = dword ptr  4
.text:00402820
.text:00402820                 mov     edx, [esp+arg_0]
.text:00402824                 mov     dword ptr [edx], 2
.text:0040282A                 mov     dword ptr [edx+8], 0
.text:00402831                 mov     byte ptr [edx+0Ch], 1
.text:00402835                 mov     byte ptr [edx+4], 0
.text:00402839                 mov     byte ptr [edx+0Dh], 0
.text:0040283D                 mov     dword ptr [edx+10h], 0
.text:00402844                 mov     dword ptr [edx+14h], 0
.text:0040284B                 retn
.text:0040284B sub_402820      endp
.text:0040284B
.text:0040284B ; ---------------------------------------------------------------------------
.text:0040284C                 align 10h
.text:00402850
.text:00402850 ; =============== S U B R O U T I N E =======================================
.text:00402850
.text:00402850
.text:00402850 nullsub_1       proc near               ; CODE XREF: sub_401E90+599↑p
.text:00402850                 retn
.text:00402850 nullsub_1       endp
.text:00402850
.text:00402851 ; ---------------------------------------------------------------------------
.text:00402851                 jmp     short sub_402860
.text:00402851 ; ---------------------------------------------------------------------------
.text:00402853                 align 10h
.text:00402860
.text:00402860 ; =============== S U B R O U T I N E =======================================
.text:00402860
.text:00402860
.text:00402860 sub_402860      proc near               ; CODE XREF: sub_401E90+530↑p
.text:00402860                                         ; .text:00402851↑j
.text:00402860
.text:00402860 var_3C          = dword ptr -3Ch
.text:00402860 var_38          = dword ptr -38h
.text:00402860 var_34          = dword ptr -34h
.text:00402860 var_2C          = byte ptr -2Ch
.text:00402860 var_4           = dword ptr -4
.text:00402860 arg_0           = dword ptr  4
.text:00402860
.text:00402860                 sub     esp, 3Ch
.text:00402863                 mov     [esp+3Ch+var_4], ebx
.text:00402867                 mov     ebx, [esp+3Ch+arg_0]
.text:0040286B                 mov     [esp+3Ch+var_3C], ebx
.text:0040286E                 call    sub_40D610
.text:00402873                 test    eax, eax
.text:00402875                 jz      short loc_402889
.text:00402877                 mov     eax, [eax]
.text:00402879
.text:00402879 loc_402879:                             ; CODE XREF: sub_402860+41↓j
.text:00402879                 mov     [esp+3Ch+var_3C], eax ; char *
.text:0040287C                 call    sub_406FD0
.text:00402881                 mov     ebx, [esp+3Ch+var_4]
.text:00402885                 add     esp, 3Ch
.text:00402888                 retn
.text:00402889 ; ---------------------------------------------------------------------------
.text:00402889
.text:00402889 loc_402889:                             ; CODE XREF: sub_402860+15↑j
.text:00402889                 mov     [esp+3Ch+var_3C], ebx
.text:0040288C                 lea     edx, [esp+3Ch+var_2C]
.text:00402890                 mov     [esp+3Ch+var_34], edx
.text:00402894                 mov     [esp+3Ch+var_38], 0
.text:0040289C                 call    sub_4070A0
.text:004028A1                 jmp     short loc_402879
.text:004028A1 sub_402860      endp
.text:004028A1
.text:004028A1 ; ---------------------------------------------------------------------------
.text:004028A3                 align 10h
.text:004028B0
.text:004028B0 ; =============== S U B R O U T I N E =======================================
.text:004028B0
.text:004028B0
.text:004028B0 sub_4028B0      proc near               ; CODE XREF: sub_401E90+51F↑p
.text:004028B0
.text:004028B0 var_3C          = dword ptr -3Ch
.text:004028B0 var_38          = dword ptr -38h
.text:004028B0 var_34          = dword ptr -34h
.text:004028B0 var_2C          = byte ptr -2Ch
.text:004028B0 var_4           = dword ptr -4
.text:004028B0 arg_0           = dword ptr  4
.text:004028B0
.text:004028B0                 sub     esp, 3Ch
.text:004028B3                 mov     [esp+3Ch+var_4], ebx
.text:004028B7                 mov     ebx, [esp+3Ch+arg_0]
.text:004028BB                 mov     [esp+3Ch+var_3C], ebx
.text:004028BE                 call    sub_40D5C0
.text:004028C3                 test    eax, eax
.text:004028C5                 jz      short loc_4028D9
.text:004028C7                 mov     eax, [eax]
.text:004028C9
.text:004028C9 loc_4028C9:                             ; CODE XREF: sub_4028B0+41↓j
.text:004028C9                 mov     [esp+3Ch+var_3C], eax ; char *
.text:004028CC                 call    sub_406FD0
.text:004028D1                 mov     ebx, [esp+3Ch+var_4]
.text:004028D5                 add     esp, 3Ch
.text:004028D8                 retn
.text:004028D9 ; ---------------------------------------------------------------------------
.text:004028D9
.text:004028D9 loc_4028D9:                             ; CODE XREF: sub_4028B0+15↑j
.text:004028D9                 mov     [esp+3Ch+var_3C], ebx
.text:004028DC                 lea     edx, [esp+3Ch+var_2C]
.text:004028E0                 mov     [esp+3Ch+var_34], edx
.text:004028E4                 mov     [esp+3Ch+var_38], 0
.text:004028EC                 call    sub_4070A0
.text:004028F1                 jmp     short loc_4028C9
.text:004028F1 sub_4028B0      endp
.text:004028F1
.text:004028F1 ; ---------------------------------------------------------------------------
.text:004028F3 aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: sub_402910:loc_4029C6↓o
.text:00402903                 align 10h
.text:00402910
.text:00402910 ; =============== S U B R O U T I N E =======================================
.text:00402910
.text:00402910
.text:00402910 sub_402910      proc near               ; CODE XREF: sub_401E90+58F↑p
.text:00402910
.text:00402910 Code            = dword ptr -3Ch
.text:00402910 ErrorMessage    = dword ptr -38h
.text:00402910 var_34          = dword ptr -34h
.text:00402910 var_30          = dword ptr -30h
.text:00402910 var_2C          = dword ptr -2Ch
.text:00402910 var_28          = dword ptr -28h
.text:00402910 var_24          = dword ptr -24h
.text:00402910 var_11          = byte ptr -11h
.text:00402910 arg_0           = dword ptr  4
.text:00402910 arg_4           = dword ptr  8
.text:00402910 arg_8           = dword ptr  0Ch
.text:00402910 arg_C           = dword ptr  10h
.text:00402910 arg_10          = dword ptr  14h
.text:00402910 arg_14          = dword ptr  18h
.text:00402910 arg_18          = dword ptr  1Ch
.text:00402910
.text:00402910                 push    ebp
.text:00402911                 push    edi
.text:00402912                 push    esi
.text:00402913                 push    ebx
.text:00402914                 sub     esp, 2Ch
.text:00402917                 mov     ebp, [esp+3Ch+arg_10]
.text:0040291B                 mov     [esp+3Ch+var_11], 1
.text:00402920                 mov     eax, [esp+3Ch+arg_4]
.text:00402924                 mov     edi, [esp+3Ch+arg_18]
.text:00402928                 cmp     ebp, 0FFFFFFFFh
.text:0040292B                 jz      loc_4029F7
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402910+EC↓j
.text:00402931                                         ; sub_402910+F5↓j ...
.text:00402931                 xor     edx, edx
.text:00402933
.text:00402933 loc_402933:                             ; CODE XREF: sub_402910+10B↓j
.text:00402933                 mov     [esp+3Ch+var_34], 0
.text:0040293B                 or      eax, edx
.text:0040293D                 mov     edx, [esp+3Ch+arg_0]
.text:00402941                 mov     [esp+3Ch+ErrorMessage], eax
.text:00402945                 mov     [esp+3Ch+Code], edx
.text:00402948                 call    sub_405090
.text:0040294D                 mov     esi, eax
.text:0040294F                 nop
.text:00402950
.text:00402950 loc_402950:                             ; CODE XREF: sub_402910+94↓j
.text:00402950                 mov     [esp+3Ch+Code], esi ; void *
.text:00402953                 call    sub_403A80
.text:00402958                 test    eax, eax
.text:0040295A                 jz      short loc_4029A6
.text:0040295C                 mov     [esp+3Ch+var_24], edi
.text:00402960                 mov     ecx, [esp+3Ch+arg_14]
.text:00402964                 xor     ebx, ebx
.text:00402966                 mov     [esp+3Ch+var_2C], ebp
.text:0040296A                 mov     [esp+3Ch+ErrorMessage], eax
.text:0040296E                 mov     [esp+3Ch+var_28], ecx
.text:00402972                 mov     ecx, [esp+3Ch+arg_C]
.text:00402976                 mov     [esp+3Ch+Code], esi
.text:00402979                 mov     [esp+3Ch+var_30], ecx
.text:0040297D                 mov     ecx, [esp+3Ch+arg_8]
.text:00402981                 mov     [esp+3Ch+var_34], ecx
.text:00402985                 call    sub_402B60
.text:0040298A                 test    al, al
.text:0040298C                 jz      short loc_4029A0
.text:0040298E                 cmp     [esp+3Ch+var_11], 0
.text:00402993                 jz      short loc_4029A0
.text:00402995                 mov     bl, 1
.text:00402997                 mov     esi, esi
.text:00402999                 lea     edi, [edi+0]
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_402910+7C↑j
.text:004029A0                                         ; sub_402910+83↑j
.text:004029A0                 mov     [esp+3Ch+var_11], bl
.text:004029A4                 jmp     short loc_402950
.text:004029A6 ; ---------------------------------------------------------------------------
.text:004029A6
.text:004029A6 loc_4029A6:                             ; CODE XREF: sub_402910+4A↑j
.text:004029A6                 call    _errno
.text:004029AB                 mov     ecx, [eax]
.text:004029AD                 test    ecx, ecx
.text:004029AF                 jnz     short loc_4029C6
.text:004029B1
.text:004029B1 loc_4029B1:                             ; CODE XREF: sub_402910+E5↓j
.text:004029B1                 mov     [esp+3Ch+Code], esi ; void *
.text:004029B4                 call    sub_403980
.text:004029B9                 movzx   eax, [esp+3Ch+var_11]
.text:004029BE                 add     esp, 2Ch
.text:004029C1                 pop     ebx
.text:004029C2                 pop     esi
.text:004029C3                 pop     edi
.text:004029C4                 pop     ebp
.text:004029C5                 retn
.text:004029C6 ; ---------------------------------------------------------------------------
.text:004029C6
.text:004029C6 loc_4029C6:                             ; CODE XREF: sub_402910+9F↑j
.text:004029C6                 mov     [esp+3Ch+Code], offset aFtsReadFailed ; "fts_read failed"
.text:004029CD                 call    ds:libintl_gettext
.text:004029D3                 mov     edi, eax
.text:004029D5                 call    _errno
.text:004029DA                 mov     [esp+3Ch+var_34], edi ; char *
.text:004029DE                 mov     ebx, [eax]
.text:004029E0                 mov     [esp+3Ch+Code], 0 ; Code
.text:004029E7                 mov     [esp+3Ch+ErrorMessage], ebx ; ErrorMessage
.text:004029EB                 call    sub_409BA0
.text:004029F0                 mov     [esp+3Ch+var_11], 0
.text:004029F5                 jmp     short loc_4029B1
.text:004029F7 ; ---------------------------------------------------------------------------
.text:004029F7
.text:004029F7 loc_4029F7:                             ; CODE XREF: sub_402910+1B↑j
.text:004029F7                 cmp     [esp+3Ch+arg_14], 0FFFFFFFFh
.text:004029FC                 jnz     loc_402931
.text:00402A02                 cmp     dword ptr [edi], 2
.text:00402A05                 jnz     loc_402931
.text:00402A0B                 mov     ecx, [edi+8]
.text:00402A0E                 test    ecx, ecx
.text:00402A10                 jnz     loc_402931
.text:00402A16                 mov     edx, 8
.text:00402A1B                 jmp     loc_402933
.text:00402A1B sub_402910      endp
.text:00402A1B
.text:00402A1B ; ---------------------------------------------------------------------------
.text:00402A20 ; const char dword_402A20[]
.text:00402A20 dword_402A20    dd 9090002Fh, 7 dup(90909090h)
.text:00402A20                                         ; DATA XREF: sub_402B60+14E↓o
.text:00402A20                                         ; sub_402B60:loc_402FF4↓o
.text:00402A40 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s',0
.text:00402A40                                         ; DATA XREF: sub_402B60+16C↓o
.text:00402A6D                 align 20h
.text:00402A80 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.text:00402A80                                         ; DATA XREF: sub_402B60:loc_402CF7↓o
.text:00402AB1 aChangingOwners db 'changing ownership of %s',0
.text:00402AB1                                         ; DATA XREF: sub_402B60+3BD↓o
.text:00402ACA aChangingGroupO db 'changing group of %s',0
.text:00402ACA                                         ; DATA XREF: sub_402B60:loc_402F50↓o
.text:00402ADF                 align 10h
.text:00402AE0 aItIsDangerousT db 'it is dangerous to operate recursively on %s (same as %s)',0
.text:00402AE0                                         ; DATA XREF: sub_402B60+4BE↓o
.text:00402B1A aCannotDerefere db 'cannot dereference %s',0
.text:00402B1A                                         ; DATA XREF: sub_402B60+555↓o
.text:00402B30 aCannotReadDire db 'cannot read directory %s',0
.text:00402B30                                         ; DATA XREF: sub_402B60+5DC↓o
.text:00402B49 aS              db '%s',0               ; DATA XREF: sub_402B60+63F↓o
.text:00402B4C aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_402B60+654↓o
.text:00402B5D                 align 10h
.text:00402B60
.text:00402B60 ; =============== S U B R O U T I N E =======================================
.text:00402B60
.text:00402B60
.text:00402B60 sub_402B60      proc near               ; CODE XREF: sub_402910+75↑p
.text:00402B60
.text:00402B60 Code            = dword ptr -0BCh
.text:00402B60 ErrorMessage    = dword ptr -0B8h
.text:00402B60 var_B4          = dword ptr -0B4h
.text:00402B60 var_B0          = dword ptr -0B0h
.text:00402B60 var_AC          = dword ptr -0ACh
.text:00402B60 var_A8          = dword ptr -0A8h
.text:00402B60 var_9B          = byte ptr -9Bh
.text:00402B60 var_9A          = byte ptr -9Ah
.text:00402B60 var_99          = byte ptr -99h
.text:00402B60 var_98          = dword ptr -98h
.text:00402B60 var_94          = dword ptr -94h
.text:00402B60 var_90          = dword ptr -90h
.text:00402B60 var_8C          = dword ptr -8Ch
.text:00402B60 arg_0           = dword ptr  4
.text:00402B60 arg_4           = dword ptr  8
.text:00402B60 arg_8           = dword ptr  0Ch
.text:00402B60 arg_C           = dword ptr  10h
.text:00402B60 arg_10          = dword ptr  14h
.text:00402B60 arg_14          = dword ptr  18h
.text:00402B60 arg_18          = dword ptr  1Ch
.text:00402B60
.text:00402B60                 push    ebp
.text:00402B61                 push    edi
.text:00402B62                 push    esi
.text:00402B63                 push    ebx
.text:00402B64                 sub     esp, 0ACh
.text:00402B6A                 mov     ebp, [esp+0BCh+arg_4]
.text:00402B71                 mov     [esp+0BCh+var_99], 1
.text:00402B76                 mov     [esp+0BCh+var_9B], 1
.text:00402B7B                 mov     eax, [ebp+14h]
.text:00402B7E                 mov     edx, [ebp+18h]
.text:00402B81                 mov     [esp+0BCh+var_94], eax
.text:00402B85                 movzx   eax, word ptr [ebp+44h]
.text:00402B89                 mov     [esp+0BCh+var_90], edx
.text:00402B8D                 cmp     eax, 0Ah        ; switch 11 cases
.text:00402B90                 ja      short def_402B92 ; jumptable 00402B92 default case, cases 0,2,3,5,8,9
.text:00402B92                 jmp     ds:jpt_402B92[eax*4] ; switch jump
.text:00402B92 ; ---------------------------------------------------------------------------
.text:00402B99                 align 4
.text:00402B9C jpt_402B92      dd offset def_402B92    ; DATA XREF: sub_402B60+32↑r
.text:00402B9C                 dd offset loc_402BC8    ; jump table for switch statement
.text:00402B9C                 dd offset def_402B92
.text:00402B9C                 dd offset def_402B92
.text:00402B9C                 dd offset loc_403130
.text:00402B9C                 dd offset def_402B92
.text:00402B9C                 dd offset loc_40317D
.text:00402B9C                 dd offset loc_403193
.text:00402B9C                 dd offset def_402B92
.text:00402B9C                 dd offset def_402B92
.text:00402B9C                 dd offset loc_4031A8
.text:00402BC8 ; ---------------------------------------------------------------------------
.text:00402BC8
.text:00402BC8 loc_402BC8:                             ; CODE XREF: sub_402B60+32↑j
.text:00402BC8                                         ; DATA XREF: sub_402B60:jpt_402B92↑o
.text:00402BC8                 mov     eax, [esp+0BCh+arg_18] ; jumptable 00402B92 case 1
.text:00402BCF                 cmp     byte ptr [eax+4], 0
.text:00402BD3                 jz      short def_402B92 ; jumptable 00402B92 default case, cases 0,2,3,5,8,9
.text:00402BD5
.text:00402BD5 loc_402BD5:                             ; CODE XREF: sub_402B60+62E↓j
.text:00402BD5                 mov     eax, 1
.text:00402BDA                 lea     esi, [esi+0]
.text:00402BE0
.text:00402BE0 loc_402BE0:                             ; CODE XREF: sub_402B60+327↓j
.text:00402BE0                 add     esp, 0ACh
.text:00402BE6                 pop     ebx
.text:00402BE7                 pop     esi
.text:00402BE8                 pop     edi
.text:00402BE9                 pop     ebp
.text:00402BEA                 retn
.text:00402BEA ; ---------------------------------------------------------------------------
.text:00402BEB                 align 10h
.text:00402BF0
.text:00402BF0 def_402B92:                             ; CODE XREF: sub_402B60+30↑j
.text:00402BF0                                         ; sub_402B60+32↑j ...
.text:00402BF0                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh ; jumptable 00402B92 default case, cases 0,2,3,5,8,9
.text:00402BF8                 jz      loc_4030F0
.text:00402BFE
.text:00402BFE loc_402BFE:                             ; CODE XREF: sub_402B60+598↓j
.text:00402BFE                                         ; sub_402B60+5A8↓j ...
.text:00402BFE                 mov     ecx, [ebp+50h]
.text:00402C01                 lea     esi, [ebp+50h]
.text:00402C04                 mov     [esp+0BCh+var_98], esi
.text:00402C08                 and     ecx, 0F000h
.text:00402C0E                 cmp     ecx, 0A000h
.text:00402C14                 jz      loc_403077
.text:00402C1A
.text:00402C1A loc_402C1A:                             ; CODE XREF: sub_402B60+522↓j
.text:00402C1A                                         ; sub_402B60+544↓j
.text:00402C1A                 xor     eax, eax
.text:00402C1C                 cmp     [esp+0BCh+var_99], 0
.text:00402C21                 jz      short loc_402C50
.text:00402C23                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh
.text:00402C2B                 jz      loc_403052
.text:00402C31                 mov     esi, [esp+0BCh+var_98]
.text:00402C35                 mov     edi, [esp+0BCh+arg_10]
.text:00402C3C                 cmp     edi, [esi+1Ch]
.text:00402C3F                 jz      loc_403052
.text:00402C45                 lea     esi, [esi+0]
.text:00402C49                 lea     edi, [edi+0]
.text:00402C50
.text:00402C50 loc_402C50:                             ; CODE XREF: sub_402B60+C1↑j
.text:00402C50                                         ; sub_402B60+50A↓j ...
.text:00402C50                 mov     [esp+0BCh+var_9A], al
.text:00402C54                 test    al, al
.text:00402C56                 jz      loc_402DC0
.text:00402C5C
.text:00402C5C loc_402C5C:                             ; CODE XREF: sub_402B60+5C5↓j
.text:00402C5C                 mov     ecx, [esp+0BCh+arg_18]
.text:00402C63                 mov     edi, [ecx+8]
.text:00402C66                 test    edi, edi
.text:00402C68                 jz      loc_402D30
.text:00402C6E                 mov     eax, [esp+0BCh+var_98]
.text:00402C72                 mov     edx, [edi+4]
.text:00402C75                 mov     ebx, [eax+0Ch]
.text:00402C78                 mov     ecx, [eax+8]
.text:00402C7B                 mov     eax, [edi]
.text:00402C7D                 mov     esi, ebx
.text:00402C7F                 xor     esi, edx
.text:00402C81                 xor     eax, ecx
.text:00402C83                 or      esi, eax
.text:00402C85                 jnz     loc_402D30
.text:00402C8B                 mov     ebx, [esp+0BCh+var_98]
.text:00402C8F                 mov     eax, [edi+8]
.text:00402C92                 mov     ecx, [edi+0Ch]
.text:00402C95                 mov     edx, [ebx+14h]
.text:00402C98                 mov     esi, [ebx+10h]
.text:00402C9B                 mov     edi, edx
.text:00402C9D                 xor     edi, ecx
.text:00402C9F                 xor     eax, esi
.text:00402CA1                 or      edi, eax
.text:00402CA3                 jnz     loc_402D30
.text:00402CA9                 cld
.text:00402CAA                 mov     esi, [esp+0BCh+var_90]
.text:00402CAE                 mov     edi, offset dword_402A20
.text:00402CB3                 mov     ecx, 2
.text:00402CB8                 repe cmpsb
.text:00402CBA                 jnz     loc_402FF4
.text:00402CC0                 mov     eax, [esp+0BCh+var_90]
.text:00402CC4                 mov     [esp+0BCh+Code], eax ; char *
.text:00402CC7                 call    sub_4067B0
.text:00402CCC                 mov     [esp+0BCh+Code], offset aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00402CD3                 mov     edi, eax
.text:00402CD5                 call    ds:libintl_gettext
.text:00402CDB                 mov     [esp+0BCh+var_B0], edi ; char
.text:00402CDF                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:00402CE7                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402CEE                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402CF2                 call    sub_409BA0
.text:00402CF7
.text:00402CF7 loc_402CF7:                             ; CODE XREF: sub_402B60+4ED↓j
.text:00402CF7                 mov     [esp+0BCh+Code], offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00402CFE                 call    ds:libintl_gettext
.text:00402D04                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:00402D0C                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402D13                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00402D17                 call    sub_409BA0
.text:00402D1C                 mov     [esp+0BCh+var_9A], 0
.text:00402D21                 mov     [esp+0BCh+var_99], 0
.text:00402D26                 lea     esi, [esi+0]
.text:00402D29                 lea     edi, [edi+0]
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402B60+108↑j
.text:00402D30                                         ; sub_402B60+125↑j ...
.text:00402D30                 cmp     [esp+0BCh+var_9A], 0
.text:00402D35                 jz      loc_402DC0
.text:00402D3B                 mov     ecx, [esp+0BCh+arg_18]
.text:00402D42                 cmp     byte ptr [ecx+0Ch], 0
.text:00402D46                 jz      loc_402FA7
.text:00402D4C                 cmp     [esp+0BCh+arg_10], 0FFFFFFFFh
.text:00402D54                 jz      loc_402F60
.text:00402D5A
.text:00402D5A loc_402D5A:                             ; CODE XREF: sub_402B60+408↓j
.text:00402D5A                 mov     ecx, [esp+0BCh+arg_14]
.text:00402D61                 mov     esi, [esp+0BCh+arg_10]
.text:00402D68                 mov     ebx, [esp+0BCh+arg_C]
.text:00402D6F                 mov     [esp+0BCh+var_A8], ecx ; int
.text:00402D73                 mov     edi, [esp+0BCh+arg_8]
.text:00402D7A                 mov     eax, [esp+0BCh+var_98]
.text:00402D7E                 mov     [esp+0BCh+var_AC], esi ; int
.text:00402D82                 mov     edx, [esp+0BCh+var_94]
.text:00402D86                 mov     [esp+0BCh+var_B0], ebx ; int
.text:00402D8A                 mov     [esp+0BCh+var_B4], edi ; int
.text:00402D8E                 mov     [esp+0BCh+ErrorMessage], eax ; int
.text:00402D92                 mov     [esp+0BCh+Code], edx ; char *
.text:00402D95                 call    sub_403500
.text:00402D9A                 cmp     eax, 4
.text:00402D9D                 ja      loc_402EE6
.text:00402DA3                 cmp     eax, 3
.text:00402DA6                 jnb     loc_402ED7
.text:00402DAC                 cmp     eax, 2
.text:00402DAF                 jz      short loc_402DB6
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: sub_402B60+389↓j
.text:00402DB1                 call    abort
.text:00402DB6 ; ---------------------------------------------------------------------------
.text:00402DB6
.text:00402DB6 loc_402DB6:                             ; CODE XREF: sub_402B60+24F↑j
.text:00402DB6                 mov     [esp+0BCh+var_99], 1
.text:00402DBB                 nop
.text:00402DBC                 lea     esi, [esi+0]
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_402B60+F6↑j
.text:00402DC0                                         ; sub_402B60+1D5↑j ...
.text:00402DC0                 mov     ebx, [esp+0BCh+arg_18]
.text:00402DC7                 mov     ecx, [ebx]
.text:00402DC9                 cmp     ecx, 2
.text:00402DCC                 jz      loc_402E75
.text:00402DD2                 xor     ebx, ebx
.text:00402DD4                 xor     edx, edx
.text:00402DD6                 cmp     [esp+0BCh+var_99], 0
.text:00402DDB                 jz      short loc_402DF0
.text:00402DDD                 cmp     [esp+0BCh+var_9A], 0
.text:00402DE2                 jz      short loc_402DF0
.text:00402DE4                 mov     edx, 1
.text:00402DE9                 lea     esi, [esi+0]
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402B60+27B↑j
.text:00402DF0                                         ; sub_402B60+282↑j
.text:00402DF0                 movzx   esi, [esp+0BCh+var_9B]
.text:00402DF5                 test    esi, edx
.text:00402DF7                 jz      short loc_402E1D
.text:00402DF9                 cmp     [esp+0BCh+arg_8], 0FFFFFFFFh
.text:00402E01                 jz      loc_402EB0
.text:00402E07                 mov     edi, [esp+0BCh+var_98]
.text:00402E0B                 mov     edx, [esp+0BCh+arg_8]
.text:00402E12                 cmp     edx, [edi+1Ch]
.text:00402E15                 jz      loc_402EB0
.text:00402E1B
.text:00402E1B loc_402E1B:                             ; CODE XREF: sub_402B60+36C↓j
.text:00402E1B                 mov     bl, 1
.text:00402E1D
.text:00402E1D loc_402E1D:                             ; CODE XREF: sub_402B60+297↑j
.text:00402E1D                                         ; sub_402B60+358↓j ...
.text:00402E1D                 test    bl, bl
.text:00402E1F                 jnz     short loc_402E25
.text:00402E21                 test    ecx, ecx
.text:00402E23                 jnz     short loc_402E75
.text:00402E25
.text:00402E25 loc_402E25:                             ; CODE XREF: sub_402B60+2BF↑j
.text:00402E25                 cmp     [esp+0BCh+var_99], 0
.text:00402E2A                 mov     edx, 3
.text:00402E2F                 jz      short loc_402E50
.text:00402E31                 cmp     [esp+0BCh+var_9B], 0
.text:00402E36                 mov     edx, 1
.text:00402E3B                 jz      short loc_402E50
.text:00402E3D                 xor     bl, 1
.text:00402E40                 movzx   ecx, bl
.text:00402E43                 lea     edx, [ecx+ecx+2]
.text:00402E47                 mov     esi, esi
.text:00402E49                 lea     edi, [edi+0]
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402B60+2CF↑j
.text:00402E50                                         ; sub_402B60+2DB↑j
.text:00402E50                 mov     edi, [esp+0BCh+arg_18]
.text:00402E57                 mov     ebx, [esp+0BCh+var_90]
.text:00402E5B                 mov     ecx, [edi+14h]
.text:00402E5E                 mov     [esp+0BCh+var_B0], ecx ; char *
.text:00402E62                 mov     esi, [edi+10h]
.text:00402E65                 mov     [esp+0BCh+ErrorMessage], edx ; int
.text:00402E69                 mov     [esp+0BCh+Code], ebx ; Block
.text:00402E6C                 mov     [esp+0BCh+var_B4], esi ; char *
.text:00402E70                 call    sub_403380
.text:00402E75
.text:00402E75 loc_402E75:                             ; CODE XREF: sub_402B60+26C↑j
.text:00402E75                                         ; sub_402B60+2C3↑j
.text:00402E75                 mov     eax, [esp+0BCh+arg_18]
.text:00402E7C                 cmp     byte ptr [eax+4], 0
.text:00402E80                 jz      short loc_402E90
.text:00402E82
.text:00402E82 loc_402E82:                             ; CODE XREF: sub_402B60+34B↓j
.text:00402E82                 movzx   eax, [esp+0BCh+var_99]
.text:00402E87                 jmp     loc_402BE0
.text:00402E87 ; ---------------------------------------------------------------------------
.text:00402E8C                 align 10h
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402B60+320↑j
.text:00402E90                 mov     [esp+0BCh+ErrorMessage], ebp
.text:00402E94                 mov     ebp, [esp+0BCh+arg_0]
.text:00402E9B                 mov     [esp+0BCh+var_B4], 4
.text:00402EA3                 mov     [esp+0BCh+Code], ebp
.text:00402EA6                 call    sub_404E30
.text:00402EAB                 jmp     short loc_402E82
.text:00402EAB ; ---------------------------------------------------------------------------
.text:00402EAD                 align 10h
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402B60+2A1↑j
.text:00402EB0                                         ; sub_402B60+2B5↑j
.text:00402EB0                 cmp     [esp+0BCh+arg_C], 0FFFFFFFFh
.text:00402EB8                 jz      loc_402E1D
.text:00402EBE                 mov     esi, [esp+0BCh+var_98]
.text:00402EC2                 mov     edi, [esp+0BCh+arg_C]
.text:00402EC9                 cmp     edi, [esi+20h]
.text:00402ECC                 jnz     loc_402E1B
.text:00402ED2                 jmp     loc_402E1D
.text:00402ED7 ; ---------------------------------------------------------------------------
.text:00402ED7
.text:00402ED7 loc_402ED7:                             ; CODE XREF: sub_402B60+246↑j
.text:00402ED7                 mov     [esp+0BCh+var_9A], 0
.text:00402EDC                 mov     [esp+0BCh+var_99], 0
.text:00402EE1                 jmp     loc_402DC0
.text:00402EE6 ; ---------------------------------------------------------------------------
.text:00402EE6
.text:00402EE6 loc_402EE6:                             ; CODE XREF: sub_402B60+23D↑j
.text:00402EE6                 cmp     eax, 5
.text:00402EE9                 jnz     loc_402DB1
.text:00402EEF                 mov     [esp+0BCh+var_99], 0
.text:00402EF4
.text:00402EF4 loc_402EF4:                             ; CODE XREF: sub_402B60+442↓j
.text:00402EF4                 mov     eax, [esp+0BCh+arg_18]
.text:00402EFB                 cmp     byte ptr [eax+0Dh], 0
.text:00402EFF                 jnz     loc_402DC0
.text:00402F05                 mov     edx, [esp+0BCh+var_90]
.text:00402F09                 mov     [esp+0BCh+Code], edx ; char *
.text:00402F0C                 call    sub_4067B0
.text:00402F11                 cmp     [esp+0BCh+arg_8], 0FFFFFFFFh
.text:00402F19                 mov     esi, eax
.text:00402F1B                 jz      short loc_402F50
.text:00402F1D                 mov     [esp+0BCh+Code], offset aChangingOwners ; "changing ownership of %s"
.text:00402F24
.text:00402F24 loc_402F24:                             ; CODE XREF: sub_402B60+3F7↓j
.text:00402F24                 call    ds:libintl_gettext
.text:00402F2A                 mov     edi, eax
.text:00402F2C                 call    _errno
.text:00402F31                 mov     [esp+0BCh+var_B0], esi ; char
.text:00402F35                 mov     [esp+0BCh+var_B4], edi ; char *
.text:00402F39                 mov     edi, [eax]
.text:00402F3B                 mov     [esp+0BCh+Code], 0 ; Code
.text:00402F42                 mov     [esp+0BCh+ErrorMessage], edi ; ErrorMessage
.text:00402F46                 call    sub_409BA0
.text:00402F4B                 jmp     loc_402DC0
.text:00402F50 ; ---------------------------------------------------------------------------
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_402B60+3BB↑j
.text:00402F50                 mov     [esp+0BCh+Code], offset aChangingGroupO ; "changing group of %s"
.text:00402F57                 jmp     short loc_402F24
.text:00402F57 ; ---------------------------------------------------------------------------
.text:00402F59                 align 10h
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402B60+1F4↑j
.text:00402F60                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:00402F68                 jnz     loc_402D5A
.text:00402F6E                 mov     ecx, [esp+0BCh+arg_C]
.text:00402F75                 mov     esi, [esp+0BCh+arg_8]
.text:00402F7C                 mov     ebx, [esp+0BCh+var_94]
.text:00402F80                 mov     [esp+0BCh+var_B4], ecx ; int
.text:00402F84                 mov     [esp+0BCh+ErrorMessage], esi ; int
.text:00402F88                 mov     [esp+0BCh+Code], ebx ; char *
.text:00402F8B                 call    sub_405140
.text:00402F90                 test    eax, eax
.text:00402F92                 setz    [esp+0BCh+var_99]
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_402B60+483↓j
.text:00402F97                 cmp     [esp+0BCh+var_99], 0
.text:00402F9C                 jnz     loc_402DC0
.text:00402FA2                 jmp     loc_402EF4
.text:00402FA7 ; ---------------------------------------------------------------------------
.text:00402FA7
.text:00402FA7 loc_402FA7:                             ; CODE XREF: sub_402B60+1E6↑j
.text:00402FA7                 mov     edi, [esp+0BCh+arg_C]
.text:00402FAE                 mov     eax, [esp+0BCh+arg_8]
.text:00402FB5                 mov     edx, [esp+0BCh+var_94]
.text:00402FB9                 mov     [esp+0BCh+var_B4], edi
.text:00402FBD                 mov     [esp+0BCh+ErrorMessage], eax
.text:00402FC1                 mov     [esp+0BCh+Code], edx
.text:00402FC4                 call    sub_40D530
.text:00402FC9                 test    eax, eax
.text:00402FCB                 setz    [esp+0BCh+var_99]
.text:00402FD0                 cmp     [esp+0BCh+var_99], 0
.text:00402FD5                 jnz     loc_402DC0
.text:00402FDB                 call    _errno
.text:00402FE0                 cmp     dword ptr [eax], 2Dh ; '-'
.text:00402FE3                 jnz     short loc_402F97
.text:00402FE5                 mov     [esp+0BCh+var_99], 1
.text:00402FEA                 mov     [esp+0BCh+var_9B], 0
.text:00402FEF                 jmp     loc_402DC0
.text:00402FF4 ; ---------------------------------------------------------------------------
.text:00402FF4
.text:00402FF4 loc_402FF4:                             ; CODE XREF: sub_402B60+15A↑j
.text:00402FF4                 mov     [esp+0BCh+ErrorMessage], offset dword_402A20 ; char *
.text:00402FFC                 mov     [esp+0BCh+Code], 1 ; int
.text:00403003                 call    sub_406780
.text:00403008                 mov     [esp+0BCh+Code], 0 ; int
.text:0040300F                 mov     esi, [esp+0BCh+var_90]
.text:00403013                 mov     ebx, eax
.text:00403015                 mov     [esp+0BCh+ErrorMessage], esi ; char *
.text:00403019                 call    sub_406780
.text:0040301E                 mov     [esp+0BCh+Code], offset aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:00403025                 mov     edi, eax
.text:00403027                 call    ds:libintl_gettext
.text:0040302D                 mov     [esp+0BCh+var_AC], ebx
.text:00403031                 mov     [esp+0BCh+var_B0], edi ; char
.text:00403035                 mov     [esp+0BCh+ErrorMessage], 0 ; ErrorMessage
.text:0040303D                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00403041                 mov     [esp+0BCh+Code], 0 ; Code
.text:00403048                 call    sub_409BA0
.text:0040304D                 jmp     loc_402CF7
.text:00403052 ; ---------------------------------------------------------------------------
.text:00403052
.text:00403052 loc_403052:                             ; CODE XREF: sub_402B60+CB↑j
.text:00403052                                         ; sub_402B60+DF↑j
.text:00403052                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:0040305A                 jz      short loc_403070
.text:0040305C                 mov     ebx, [esp+0BCh+var_98]
.text:00403060                 mov     edx, [esp+0BCh+arg_14]
.text:00403067                 cmp     edx, [ebx+20h]
.text:0040306A                 jnz     loc_402C50
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_402B60+4FA↑j
.text:00403070                 mov     al, 1
.text:00403072                 jmp     loc_402C50
.text:00403077 ; ---------------------------------------------------------------------------
.text:00403077
.text:00403077 loc_403077:                             ; CODE XREF: sub_402B60+B4↑j
.text:00403077                 mov     edi, [esp+0BCh+arg_18]
.text:0040307E                 cmp     byte ptr [edi+0Ch], 0
.text:00403082                 jz      loc_402C1A
.text:00403088                 mov     edx, [esp+0BCh+var_94]
.text:0040308C                 lea     edi, [esp+0BCh+var_8C]
.text:00403090                 mov     [esp+0BCh+ErrorMessage], edi ; int
.text:00403094                 mov     [esp+0BCh+Code], edx ; char *
.text:00403097                 call    sub_40CBC0
.text:0040309C                 test    eax, eax
.text:0040309E                 jnz     short loc_4030A9
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402B60+58A↓j
.text:004030A0                 mov     [esp+0BCh+var_98], edi
.text:004030A4                 jmp     loc_402C1A
.text:004030A9 ; ---------------------------------------------------------------------------
.text:004030A9
.text:004030A9 loc_4030A9:                             ; CODE XREF: sub_402B60+53E↑j
.text:004030A9                 mov     ecx, [esp+0BCh+var_90]
.text:004030AD                 mov     [esp+0BCh+Code], ecx ; char *
.text:004030B0                 call    sub_4067B0
.text:004030B5                 mov     [esp+0BCh+Code], offset aCannotDerefere ; "cannot dereference %s"
.text:004030BC                 mov     esi, eax
.text:004030BE                 call    ds:libintl_gettext
.text:004030C4                 mov     ebx, eax
.text:004030C6                 call    _errno
.text:004030CB                 mov     [esp+0BCh+var_B0], esi ; char
.text:004030CF                 mov     [esp+0BCh+var_B4], ebx ; char *
.text:004030D3                 mov     ebx, [eax]
.text:004030D5                 mov     [esp+0BCh+Code], 0 ; Code
.text:004030DC                 mov     [esp+0BCh+ErrorMessage], ebx ; ErrorMessage
.text:004030E0                 call    sub_409BA0
.text:004030E5                 mov     [esp+0BCh+var_99], 0
.text:004030EA                 jmp     short loc_4030A0
.text:004030EA ; ---------------------------------------------------------------------------
.text:004030EC                 align 10h
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_402B60+98↑j
.text:004030F0                 cmp     [esp+0BCh+arg_14], 0FFFFFFFFh
.text:004030F8                 jnz     loc_402BFE
.text:004030FE                 mov     edx, [esp+0BCh+arg_18]
.text:00403105                 cmp     dword ptr [edx], 2
.text:00403108                 jnz     loc_402BFE
.text:0040310E                 mov     eax, [edx+8]
.text:00403111                 test    eax, eax
.text:00403113                 jnz     loc_402BFE
.text:00403119                 mov     [esp+0BCh+var_9A], 1
.text:0040311E                 lea     ebx, [ebp+50h]
.text:00403121                 mov     [esp+0BCh+var_98], ebx
.text:00403125                 jmp     loc_402C5C
.text:00403125 ; ---------------------------------------------------------------------------
.text:0040312A                 align 10h
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402B60+32↑j
.text:00403130                                         ; DATA XREF: sub_402B60:jpt_402B92↑o
.text:00403130                 mov     edi, [esp+0BCh+var_90] ; jumptable 00402B92 case 4
.text:00403134                 mov     [esp+0BCh+Code], edi ; char *
.text:00403137                 call    sub_4067B0
.text:0040313C                 mov     [esp+0BCh+Code], offset aCannotReadDire ; "cannot read directory %s"
.text:00403143
.text:00403143 loc_403143:                             ; CODE XREF: sub_402B60+646↓j
.text:00403143                                         ; sub_402B60+65B↓j
.text:00403143                 mov     ebx, eax
.text:00403145                 call    ds:libintl_gettext
.text:0040314B                 mov     [esp+0BCh+var_B0], ebx ; char
.text:0040314F                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00403153                 mov     edx, [ebp+1Ch]
.text:00403156                 mov     [esp+0BCh+Code], 0 ; Code
.text:0040315D                 mov     [esp+0BCh+ErrorMessage], edx ; ErrorMessage
.text:00403161                 call    sub_409BA0
.text:00403166                 mov     [esp+0BCh+var_99], 0
.text:0040316B                 mov     [esp+0BCh+var_9A], 0
.text:00403170                 mov     [esp+0BCh+var_98], 0
.text:00403178                 jmp     loc_402DC0
.text:0040317D ; ---------------------------------------------------------------------------
.text:0040317D
.text:0040317D loc_40317D:                             ; CODE XREF: sub_402B60+32↑j
.text:0040317D                                         ; DATA XREF: sub_402B60:jpt_402B92↑o
.text:0040317D                 mov     ecx, [esp+0BCh+arg_18] ; jumptable 00402B92 case 6
.text:00403184                 cmp     byte ptr [ecx+4], 0
.text:00403188                 jnz     def_402B92      ; jumptable 00402B92 default case, cases 0,2,3,5,8,9
.text:0040318E                 jmp     loc_402BD5
.text:00403193 ; ---------------------------------------------------------------------------
.text:00403193
.text:00403193 loc_403193:                             ; CODE XREF: sub_402B60+32↑j
.text:00403193                                         ; DATA XREF: sub_402B60:jpt_402B92↑o
.text:00403193                 mov     esi, [esp+0BCh+var_90] ; jumptable 00402B92 case 7
.text:00403197                 mov     [esp+0BCh+Code], esi ; char *
.text:0040319A                 call    sub_4067B0
.text:0040319F                 mov     [esp+0BCh+Code], offset aS ; "%s"
.text:004031A6                 jmp     short loc_403143
.text:004031A8 ; ---------------------------------------------------------------------------
.text:004031A8
.text:004031A8 loc_4031A8:                             ; CODE XREF: sub_402B60+32↑j
.text:004031A8                                         ; DATA XREF: sub_402B60:jpt_402B92↑o
.text:004031A8                 mov     ebx, [esp+0BCh+var_90] ; jumptable 00402B92 case 10
.text:004031AC                 mov     [esp+0BCh+Code], ebx ; char *
.text:004031AF                 call    sub_4067B0
.text:004031B4                 mov     [esp+0BCh+Code], offset aCannotAccessS ; "cannot access %s"
.text:004031BB                 jmp     short loc_403143
.text:004031BB sub_402B60      endp
.text:004031BB
.text:004031BB ; ---------------------------------------------------------------------------
.text:004031BD byte_4031BD     db 3Ah, 0, 90h          ; DATA XREF: sub_403380+69↓o
.text:004031C0 aChangedOwnersh db 'changed ownership of %s to %s',0Ah,0
.text:004031C0                                         ; DATA XREF: sub_403380+A2↓o
.text:004031DF aChangedGroupOf db 'changed group of %s to %s',0Ah,0
.text:004031DF                                         ; DATA XREF: sub_403380+EC↓o
.text:004031FA aNoChangeToOwne db 'no change to ownership of %s',0Ah,0
.text:004031FA                                         ; DATA XREF: sub_403380:loc_403475↓o
.text:00403218                 align 10h
.text:00403220 aOwnershipOfSRe db 'ownership of %s retained as %s',0Ah,0
.text:00403220                                         ; DATA XREF: sub_403380+109↓o
.text:00403240 aGroupOfSRetain db 'group of %s retained as %s',0Ah,0
.text:00403240                                         ; DATA XREF: sub_403380+116↓o
.text:0040325C aOwnershipOfSRe_0 db 'ownership of %s retained',0Ah,0
.text:0040325C                                         ; DATA XREF: sub_403380:loc_40349F↓o
.text:00403276                 align 10h
.text:00403280 aFailedToChange db 'failed to change ownership of %s to %s',0Ah,0
.text:00403280                                         ; DATA XREF: sub_403380+12C↓o
.text:004032A8                 align 20h
.text:004032C0 aFailedToChange_0 db 'failed to change group of %s to %s',0Ah,0
.text:004032C0                                         ; DATA XREF: sub_403380+13C↓o
.text:004032E4                 align 20h
.text:00403300 aFailedToChange_1 db 'failed to change ownership of %s',0Ah,0
.text:00403300                                         ; DATA XREF: sub_403380:loc_4034C8↓o
.text:00403322                 align 20h
.text:00403340 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.text:00403340                                         ; DATA XREF: sub_403380+160↓o
.text:00403378                 align 10h
.text:00403380
.text:00403380 ; =============== S U B R O U T I N E =======================================
.text:00403380
.text:00403380
.text:00403380 ; int __cdecl sub_403380(void *Block, int, char *, char *)
.text:00403380 sub_403380      proc near               ; CODE XREF: sub_402B60+310↑p
.text:00403380
.text:00403380 Str             = dword ptr -2Ch
.text:00403380 var_28          = dword ptr -28h
.text:00403380 var_24          = dword ptr -24h
.text:00403380 var_18          = dword ptr -18h
.text:00403380 var_14          = dword ptr -14h
.text:00403380 Block           = dword ptr  4
.text:00403380 arg_4           = dword ptr  8
.text:00403380 arg_8           = dword ptr  0Ch
.text:00403380 arg_C           = dword ptr  10h
.text:00403380
.text:00403380                 push    ebp
.text:00403381                 push    edi
.text:00403382                 push    esi
.text:00403383                 push    ebx
.text:00403384                 sub     esp, 1Ch
.text:00403387                 mov     esi, [esp+2Ch+arg_4]
.text:0040338B                 mov     [esp+2Ch+var_18], 0
.text:00403393                 mov     eax, [esp+2Ch+Block]
.text:00403397                 mov     ebx, [esp+2Ch+arg_8]
.text:0040339B                 cmp     esi, 1
.text:0040339E                 mov     edi, [esp+2Ch+arg_C]
.text:004033A2                 mov     [esp+2Ch+var_14], eax
.text:004033A6                 jz      loc_4034D4
.text:004033AC                 test    ebx, ebx
.text:004033AE                 mov     ebp, edi
.text:004033B0                 jz      short loc_403406
.text:004033B2                 test    edi, edi
.text:004033B4                 mov     ebp, ebx
.text:004033B6                 jz      short loc_403406
.text:004033B8                 mov     [esp+2Ch+Str], ebx ; Str
.text:004033BB                 call    strlen
.text:004033C0                 mov     [esp+2Ch+Str], edi ; Str
.text:004033C3                 mov     ebp, eax
.text:004033C5                 call    strlen
.text:004033CA                 lea     edx, [eax+ebp+2]
.text:004033CE                 mov     [esp+2Ch+Str], edx ; size_t
.text:004033D1                 call    sub_406E10
.text:004033D6                 mov     [esp+2Ch+var_18], eax
.text:004033DA                 mov     [esp+2Ch+var_28], ebx
.text:004033DE                 mov     [esp+2Ch+Str], eax
.text:004033E1                 call    sub_40D590
.text:004033E6                 mov     [esp+2Ch+Str], eax
.text:004033E9                 mov     [esp+2Ch+var_28], offset byte_4031BD
.text:004033F1                 call    sub_40D590
.text:004033F6                 mov     [esp+2Ch+Str], eax
.text:004033F9                 mov     [esp+2Ch+var_28], edi
.text:004033FD                 call    sub_40D590
.text:00403402                 mov     ebp, [esp+2Ch+var_18]
.text:00403406
.text:00403406 loc_403406:                             ; CODE XREF: sub_403380+30↑j
.text:00403406                                         ; sub_403380+36↑j
.text:00403406                 cmp     esi, 3
.text:00403409                 jz      loc_4034A8
.text:0040340F                 cmp     esi, 3
.text:00403412                 ja      short loc_403480
.text:00403414                 cmp     esi, 2
.text:00403417                 jz      short loc_40341E
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_403380+103↓j
.text:00403419                 call    abort
.text:0040341E ; ---------------------------------------------------------------------------
.text:0040341E
.text:0040341E loc_40341E:                             ; CODE XREF: sub_403380+97↑j
.text:0040341E                 test    ebx, ebx
.text:00403420                 jz      short loc_403468
.text:00403422                 mov     [esp+2Ch+Str], offset aChangedOwnersh ; "changed ownership of %s to %s\n"
.text:00403429                 lea     esi, [esi+0]
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403380+F3↓j
.text:00403430                                         ; sub_403380+FC↓j ...
.text:00403430                 call    ds:libintl_gettext
.text:00403436                 mov     ecx, [esp+2Ch+var_14]
.text:0040343A                 mov     esi, eax
.text:0040343C                 mov     [esp+2Ch+Str], ecx ; char *
.text:0040343F                 call    sub_4067B0
.text:00403444                 mov     [esp+2Ch+var_28], eax
.text:00403448                 mov     [esp+2Ch+var_24], ebp
.text:0040344C                 mov     [esp+2Ch+Str], esi ; Format
.text:0040344F                 call    printf
.text:00403454                 mov     edx, [esp+2Ch+var_18]
.text:00403458                 mov     [esp+2Ch+Block], edx ; Block
.text:0040345C                 add     esp, 1Ch
.text:0040345F                 pop     ebx
.text:00403460                 pop     esi
.text:00403461                 pop     edi
.text:00403462                 pop     ebp
.text:00403463                 jmp     free
.text:00403468 ; ---------------------------------------------------------------------------
.text:00403468
.text:00403468 loc_403468:                             ; CODE XREF: sub_403380+A0↑j
.text:00403468                 test    edi, edi
.text:0040346A                 jz      short loc_403475
.text:0040346C                 mov     [esp+2Ch+Str], offset aChangedGroupOf ; "changed group of %s to %s\n"
.text:00403473                 jmp     short loc_403430
.text:00403475 ; ---------------------------------------------------------------------------
.text:00403475
.text:00403475 loc_403475:                             ; CODE XREF: sub_403380+EA↑j
.text:00403475                 mov     [esp+2Ch+Str], offset aNoChangeToOwne ; "no change to ownership of %s\n"
.text:0040347C                 jmp     short loc_403430
.text:0040347C ; ---------------------------------------------------------------------------
.text:0040347E                 align 10h
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: sub_403380+92↑j
.text:00403480                 cmp     esi, 4
.text:00403483                 jnz     short loc_403419
.text:00403485                 test    ebx, ebx
.text:00403487                 jz      short loc_403492
.text:00403489                 mov     [esp+2Ch+Str], offset aOwnershipOfSRe ; "ownership of %s retained as %s\n"
.text:00403490                 jmp     short loc_403430
.text:00403492 ; ---------------------------------------------------------------------------
.text:00403492
.text:00403492 loc_403492:                             ; CODE XREF: sub_403380+107↑j
.text:00403492                 test    edi, edi
.text:00403494                 jz      short loc_40349F
.text:00403496                 mov     [esp+2Ch+Str], offset aGroupOfSRetain ; "group of %s retained as %s\n"
.text:0040349D                 jmp     short loc_403430
.text:0040349F ; ---------------------------------------------------------------------------
.text:0040349F
.text:0040349F loc_40349F:                             ; CODE XREF: sub_403380+114↑j
.text:0040349F                 mov     [esp+2Ch+Str], offset aOwnershipOfSRe_0 ; "ownership of %s retained\n"
.text:004034A6                 jmp     short loc_403430
.text:004034A8 ; ---------------------------------------------------------------------------
.text:004034A8
.text:004034A8 loc_4034A8:                             ; CODE XREF: sub_403380+89↑j
.text:004034A8                 test    ebx, ebx
.text:004034AA                 jz      short loc_4034B8
.text:004034AC                 mov     [esp+2Ch+Str], offset aFailedToChange ; "failed to change ownership of %s to %s"...
.text:004034B3                 jmp     loc_403430
.text:004034B8 ; ---------------------------------------------------------------------------
.text:004034B8
.text:004034B8 loc_4034B8:                             ; CODE XREF: sub_403380+12A↑j
.text:004034B8                 test    edi, edi
.text:004034BA                 jz      short loc_4034C8
.text:004034BC                 mov     [esp+2Ch+Str], offset aFailedToChange_0 ; "failed to change group of %s to %s\n"
.text:004034C3                 jmp     loc_403430
.text:004034C8 ; ---------------------------------------------------------------------------
.text:004034C8
.text:004034C8 loc_4034C8:                             ; CODE XREF: sub_403380+13A↑j
.text:004034C8                 mov     [esp+2Ch+Str], offset aFailedToChange_1 ; "failed to change ownership of %s\n"
.text:004034CF                 jmp     loc_403430
.text:004034D4 ; ---------------------------------------------------------------------------
.text:004034D4
.text:004034D4 loc_4034D4:                             ; CODE XREF: sub_403380+26↑j
.text:004034D4                 mov     [esp+2Ch+Str], eax ; char *
.text:004034D7                 call    sub_4067B0
.text:004034DC                 mov     [esp+2Ch+arg_4], eax
.text:004034E0                 mov     [esp+2Ch+Str], offset aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:004034E7                 call    ds:libintl_gettext
.text:004034ED                 mov     [esp+2Ch+Block], eax ; Format
.text:004034F1                 add     esp, 1Ch
.text:004034F4                 pop     ebx
.text:004034F5                 pop     esi
.text:004034F6                 pop     edi
.text:004034F7                 pop     ebp
.text:004034F8                 jmp     printf
.text:004034F8 sub_403380      endp
.text:004034F8
.text:004034F8 ; ---------------------------------------------------------------------------
.text:004034FD                 align 10h
.text:00403500
.text:00403500 ; =============== S U B R O U T I N E =======================================
.text:00403500
.text:00403500
.text:00403500 ; int __cdecl sub_403500(char *, int, int, int, int, int)
.text:00403500 sub_403500      proc near               ; CODE XREF: sub_402B60+235↑p
.text:00403500
.text:00403500 FileName        = dword ptr -9Ch
.text:00403500 OpenFlag        = dword ptr -98h
.text:00403500 var_94          = dword ptr -94h
.text:00403500 var_8C          = byte ptr -8Ch
.text:00403500 var_84          = dword ptr -84h
.text:00403500 var_80          = dword ptr -80h
.text:00403500 var_7C          = dword ptr -7Ch
.text:00403500 var_78          = dword ptr -78h
.text:00403500 var_70          = dword ptr -70h
.text:00403500 var_6C          = dword ptr -6Ch
.text:00403500 arg_0           = dword ptr  4
.text:00403500 arg_4           = dword ptr  8
.text:00403500 arg_8           = dword ptr  0Ch
.text:00403500 arg_C           = dword ptr  10h
.text:00403500 arg_10          = dword ptr  14h
.text:00403500 arg_14          = dword ptr  18h
.text:00403500
.text:00403500                 push    ebp
.text:00403501                 mov     ebp, 2
.text:00403506                 push    edi
.text:00403507                 push    esi
.text:00403508                 push    ebx
.text:00403509                 sub     esp, 8Ch
.text:0040350F                 mov     ebx, [esp+9Ch+arg_0]
.text:00403516                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:0040351E                 mov     [esp+9Ch+FileName], ebx ; FileName
.text:00403521                 call    _open
.text:00403526                 test    eax, eax
.text:00403528                 mov     edi, eax
.text:0040352A                 js      loc_403630
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_403500+149↓j
.text:00403530                 mov     [esp+9Ch+FileName], edi
.text:00403533                 lea     edx, [esp+9Ch+var_8C]
.text:00403537                 mov     [esp+9Ch+OpenFlag], edx
.text:0040353B                 call    sub_409E40
.text:00403540                 test    eax, eax
.text:00403542                 jnz     loc_403620
.text:00403548                 mov     edx, [esp+9Ch+arg_4]
.text:0040354F                 mov     eax, [esp+9Ch+var_84]
.text:00403553                 mov     ebx, [edx+0Ch]
.text:00403556                 mov     ecx, [edx+8]
.text:00403559                 mov     edx, [esp+9Ch+var_80]
.text:0040355D                 mov     esi, ebx
.text:0040355F                 xor     eax, ecx
.text:00403561                 xor     esi, edx
.text:00403563                 or      esi, eax
.text:00403565                 jnz     short loc_403586
.text:00403567                 mov     esi, [esp+9Ch+arg_4]
.text:0040356E                 mov     eax, [esp+9Ch+var_7C]
.text:00403572                 mov     edx, [esp+9Ch+var_78]
.text:00403576                 mov     ebx, [esi+14h]
.text:00403579                 mov     ecx, [esi+10h]
.text:0040357C                 mov     esi, ebx
.text:0040357E                 xor     esi, edx
.text:00403580                 xor     eax, ecx
.text:00403582                 or      esi, eax
.text:00403584                 jz      short loc_4035B0
.text:00403586
.text:00403586 loc_403586:                             ; CODE XREF: sub_403500+65↑j
.text:00403586                 mov     ebp, 4
.text:0040358B
.text:0040358B loc_40358B:                             ; CODE XREF: sub_403500+C5↓j
.text:0040358B                                         ; sub_403500+DC↓j ...
.text:0040358B                 call    _errno
.text:00403590                 mov     esi, [eax]
.text:00403592                 mov     [esp+9Ch+FileName], edi ; FileHandle
.text:00403595                 call    _close
.text:0040359A                 call    _errno
.text:0040359F                 mov     [eax], esi
.text:004035A1                 mov     eax, ebp
.text:004035A3
.text:004035A3 loc_4035A3:                             ; CODE XREF: sub_403500+119↓j
.text:004035A3                                         ; sub_403500+14F↓j
.text:004035A3                 add     esp, 8Ch
.text:004035A9                 pop     ebx
.text:004035AA                 pop     esi
.text:004035AB                 pop     edi
.text:004035AC                 pop     ebp
.text:004035AD                 retn
.text:004035AD ; ---------------------------------------------------------------------------
.text:004035AE                 align 10h
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_403500+84↑j
.text:004035B0                 cmp     [esp+9Ch+arg_10], 0FFFFFFFFh
.text:004035B8                 jz      short loc_4035C7
.text:004035BA                 mov     ecx, [esp+9Ch+arg_10]
.text:004035C1                 cmp     ecx, [esp+9Ch+var_70]
.text:004035C5                 jnz     short loc_40358B
.text:004035C7
.text:004035C7 loc_4035C7:                             ; CODE XREF: sub_403500+B8↑j
.text:004035C7                 cmp     [esp+9Ch+arg_14], 0FFFFFFFFh
.text:004035CF                 jz      short loc_4035DE
.text:004035D1                 mov     ebx, [esp+9Ch+arg_14]
.text:004035D8                 cmp     ebx, [esp+9Ch+var_6C]
.text:004035DC                 jnz     short loc_40358B
.text:004035DE
.text:004035DE loc_4035DE:                             ; CODE XREF: sub_403500+CF↑j
.text:004035DE                 mov     [esp+9Ch+FileName], edi
.text:004035E1                 mov     ebp, [esp+9Ch+arg_8]
.text:004035E8                 mov     edx, [esp+9Ch+arg_C]
.text:004035EF                 mov     [esp+9Ch+OpenFlag], ebp
.text:004035F3                 mov     ebp, 5
.text:004035F8                 mov     [esp+9Ch+var_94], edx
.text:004035FC                 call    sub_40D560
.text:00403601                 test    eax, eax
.text:00403603                 jnz     short loc_40358B
.text:00403605                 mov     [esp+9Ch+FileName], edi ; FileHandle
.text:00403608                 call    _close
.text:0040360D                 test    eax, eax
.text:0040360F                 setnz   cl
.text:00403612                 movzx   edi, cl
.text:00403615                 lea     eax, [edi+edi*2+2]
.text:00403619                 jmp     short loc_4035A3
.text:00403619 ; ---------------------------------------------------------------------------
.text:0040361B                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_403500+42↑j
.text:00403620                 mov     ebp, 5
.text:00403625                 jmp     loc_40358B
.text:00403625 ; ---------------------------------------------------------------------------
.text:0040362A                 align 10h
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403500+2A↑j
.text:00403630                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00403638                 mov     [esp+9Ch+FileName], ebx ; FileName
.text:0040363B                 call    _open
.text:00403640                 mov     edi, eax
.text:00403642                 test    edi, edi
.text:00403644                 mov     eax, 5
.text:00403649                 jns     loc_403530
.text:0040364F                 jmp     loc_4035A3
.text:0040364F sub_403500      endp
.text:0040364F
.text:0040364F ; ---------------------------------------------------------------------------
.text:00403654                 align 10h
.text:00403660 byte_403660     db 0                    ; DATA XREF: sub_403670+92↓o
.text:00403660                                         ; sub_403670+E9↓o
.text:00403661 ; const char FileName[2]
.text:00403661 FileName        db '.',0                ; DATA XREF: sub_403670+180↓o
.text:00403661                                         ; sub_403670+1A5↓o ...
.text:00403663                 align 10h
.text:00403670
.text:00403670 ; =============== S U B R O U T I N E =======================================
.text:00403670
.text:00403670
.text:00403670 sub_403670      proc near               ; CODE XREF: sub_405090+22↓p
.text:00403670
.text:00403670 Size            = dword ptr -3Ch
.text:00403670 OpenFlag        = dword ptr -38h
.text:00403670 var_34          = dword ptr -34h
.text:00403670 var_30          = dword ptr -30h
.text:00403670 var_2C          = dword ptr -2Ch
.text:00403670 var_1C          = dword ptr -1Ch
.text:00403670 var_18          = dword ptr -18h
.text:00403670 var_14          = dword ptr -14h
.text:00403670 arg_0           = dword ptr  4
.text:00403670 arg_4           = dword ptr  8
.text:00403670 arg_8           = dword ptr  0Ch
.text:00403670
.text:00403670                 push    ebp
.text:00403671                 push    edi
.text:00403672                 push    esi
.text:00403673                 push    ebx
.text:00403674                 sub     esp, 2Ch
.text:00403677                 mov     ebx, [esp+3Ch+arg_4]
.text:0040367B                 mov     [esp+3Ch+var_1C], 0
.text:00403683                 mov     ebp, [esp+3Ch+arg_0]
.text:00403687                 test    ebx, 0FFFFFE00h
.text:0040368D                 jnz     loc_40396F
.text:00403693                 mov     [esp+3Ch+Size], 38h ; '8' ; Size
.text:0040369A                 call    malloc
.text:0040369F                 mov     esi, eax
.text:004036A1                 xor     eax, eax
.text:004036A3                 test    esi, esi
.text:004036A5                 jz      loc_4037E0
.text:004036AB                 cld
.text:004036AC                 mov     eax, [esp+3Ch+var_1C]
.text:004036B0                 mov     ecx, 0Eh
.text:004036B5                 mov     edi, esi
.text:004036B7                 test    bl, 2
.text:004036BA                 rep stosd
.text:004036BC                 mov     [esi+2Ch], ebx
.text:004036BF                 mov     eax, [esp+3Ch+arg_8]
.text:004036C3                 mov     [esi+28h], eax
.text:004036C6                 jz      short loc_4036CE
.text:004036C8                 or      ebx, 4
.text:004036CB                 mov     [esi+2Ch], ebx
.text:004036CE
.text:004036CE loc_4036CE:                             ; CODE XREF: sub_403670+56↑j
.text:004036CE                 mov     [esp+3Ch+Size], ebp
.text:004036D1                 call    sub_404CB0
.text:004036D6                 cmp     eax, 400h
.text:004036DB                 mov     edx, 400h
.text:004036E0                 ja      loc_403960
.text:004036E6
.text:004036E6 loc_4036E6:                             ; CODE XREF: sub_403670+2FA↓j
.text:004036E6                 mov     [esp+3Ch+OpenFlag], edx
.text:004036EA                 mov     [esp+3Ch+Size], esi
.text:004036ED                 call    sub_404BB0
.text:004036F2                 test    al, al
.text:004036F4                 jz      loc_403842
.text:004036FA                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00403702                 mov     [esp+3Ch+OpenFlag], offset byte_403660 ; void *
.text:0040370A                 mov     [esp+3Ch+Size], esi ; int
.text:0040370D                 call    sub_404AF0
.text:00403712                 test    eax, eax
.text:00403714                 mov     ebx, eax
.text:00403716                 jz      loc_403837
.text:0040371C                 mov     dword ptr [eax+3Ch], 0FFFFFFFFh
.text:00403723                 mov     eax, [ebp+0]
.text:00403726                 mov     [esp+3Ch+var_14], 0
.text:0040372E                 mov     [esp+3Ch+var_18], 0
.text:00403736                 test    eax, eax
.text:00403738                 jnz     loc_403898
.text:0040373E
.text:0040373E loc_40373E:                             ; CODE XREF: sub_403670+2B0↓j
.text:0040373E                 mov     edi, [esp+3Ch+arg_8]
.text:00403742                 test    edi, edi
.text:00403744                 jz      short loc_403751
.text:00403746                 cmp     [esp+3Ch+var_18], 1
.text:0040374B                 ja      loc_403877
.text:00403751
.text:00403751 loc_403751:                             ; CODE XREF: sub_403670+D4↑j
.text:00403751                                         ; sub_403670+223↓j
.text:00403751                 mov     [esp+3Ch+var_34], 0 ; size_t
.text:00403759                 mov     [esp+3Ch+OpenFlag], offset byte_403660 ; void *
.text:00403761                 mov     [esp+3Ch+Size], esi ; int
.text:00403764                 call    sub_404AF0
.text:00403769                 mov     [esi], eax
.text:0040376B                 test    eax, eax
.text:0040376D                 jz      loc_403823
.text:00403773                 test    byte ptr [esi+2Dh], 1
.text:00403777                 mov     edi, [esp+3Ch+var_14]
.text:0040377B                 mov     [eax+8], edi
.text:0040377E                 mov     ecx, [esi]
.text:00403780                 mov     word ptr [ecx+44h], 9
.text:00403786                 jz      loc_403850
.text:0040378C                 mov     [esp+3Ch+var_2C], offset free
.text:00403794                 mov     [esp+3Ch+var_30], offset sub_404E70
.text:0040379C                 mov     [esp+3Ch+var_34], offset sub_404EE0
.text:004037A4                 mov     [esp+3Ch+OpenFlag], 0
.text:004037AC                 mov     [esp+3Ch+Size], 1Fh
.text:004037B3                 call    sub_4072C0
.text:004037B8                 mov     [esi+30h], eax
.text:004037BB                 test    eax, eax
.text:004037BD                 jz      short loc_403823
.text:004037BF                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:004037C6                 call    malloc
.text:004037CB                 mov     [esi+34h], eax
.text:004037CE
.text:004037CE loc_4037CE:                             ; CODE XREF: sub_403670+202↓j
.text:004037CE                 test    byte ptr [esi+2Ch], 4
.text:004037D2                 jz      short loc_4037E8
.text:004037D4
.text:004037D4 loc_4037D4:                             ; CODE XREF: sub_403670+195↓j
.text:004037D4                                         ; sub_403670+19B↓j
.text:004037D4                 mov     eax, esi
.text:004037D6                 lea     esi, [esi+0]
.text:004037D9                 lea     edi, [edi+0]
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_403670+35↑j
.text:004037E0                                         ; sub_403670+1DC↓j
.text:004037E0                 add     esp, 2Ch
.text:004037E3                 pop     ebx
.text:004037E4                 pop     esi
.text:004037E5                 pop     edi
.text:004037E6                 pop     ebp
.text:004037E7                 retn
.text:004037E8 ; ---------------------------------------------------------------------------
.text:004037E8
.text:004037E8 loc_4037E8:                             ; CODE XREF: sub_403670+162↑j
.text:004037E8                 mov     [esp+3Ch+OpenFlag], 0 ; OpenFlag
.text:004037F0                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:004037F7                 call    _open
.text:004037FC                 test    eax, eax
.text:004037FE                 js      short loc_40380D
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_403670+1B1↓j
.text:00403800                 mov     [esi+1Ch], eax
.text:00403803                 test    eax, eax
.text:00403805                 jns     short loc_4037D4
.text:00403807                 or      dword ptr [esi+2Ch], 4
.text:0040380B                 jmp     short loc_4037D4
.text:0040380D ; ---------------------------------------------------------------------------
.text:0040380D
.text:0040380D loc_40380D:                             ; CODE XREF: sub_403670+18E↑j
.text:0040380D                 mov     [esp+3Ch+OpenFlag], 1 ; OpenFlag
.text:00403815                 mov     [esp+3Ch+Size], offset FileName ; "."
.text:0040381C                 call    _open
.text:00403821                 jmp     short loc_403800
.text:00403823 ; ---------------------------------------------------------------------------
.text:00403823
.text:00403823 loc_403823:                             ; CODE XREF: sub_403670+FD↑j
.text:00403823                                         ; sub_403670+14D↑j ...
.text:00403823                 mov     ebp, [esp+3Ch+var_14]
.text:00403827                 mov     [esp+3Ch+Size], ebp ; void *
.text:0040382A                 call    sub_404B80
.text:0040382F                 mov     [esp+3Ch+Size], ebx ; Block
.text:00403832                 call    free
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_403670+A6↑j
.text:00403837                 mov     ebx, [esi+18h]
.text:0040383A                 mov     [esp+3Ch+Size], ebx ; Block
.text:0040383D                 call    free
.text:00403842
.text:00403842 loc_403842:                             ; CODE XREF: sub_403670+84↑j
.text:00403842                 mov     [esp+3Ch+Size], esi ; Block
.text:00403845                 call    free
.text:0040384A
.text:0040384A loc_40384A:                             ; CODE XREF: sub_403670+30A↓j
.text:0040384A                 xor     eax, eax
.text:0040384C                 jmp     short loc_4037E0
.text:0040384C ; ---------------------------------------------------------------------------
.text:0040384E                 align 10h
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403670+116↑j
.text:00403850                 mov     [esp+3Ch+Size], 20h ; ' ' ; Size
.text:00403857                 call    malloc
.text:0040385C                 mov     [esi+34h], eax
.text:0040385F                 test    eax, eax
.text:00403861                 jz      short loc_403823
.text:00403863                 mov     [esp+3Ch+Size], eax
.text:00403866                 call    sub_407130
.text:0040386B                 mov     dword ptr [esi+30h], 0
.text:00403872                 jmp     loc_4037CE
.text:00403877 ; ---------------------------------------------------------------------------
.text:00403877
.text:00403877 loc_403877:                             ; CODE XREF: sub_403670+DB↑j
.text:00403877                 mov     [esp+3Ch+Size], esi ; int
.text:0040387A                 mov     edx, [esp+3Ch+var_18]
.text:0040387E                 mov     ebp, [esp+3Ch+var_14]
.text:00403882                 mov     [esp+3Ch+var_34], edx ; void *
.text:00403886                 mov     [esp+3Ch+OpenFlag], ebp ; int
.text:0040388A                 call    sub_404A10
.text:0040388F                 mov     [esp+3Ch+var_14], eax
.text:00403893                 jmp     loc_403751
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_403670+C8↑j
.text:00403898                                         ; sub_403670+2AA↓j
.text:00403898                 mov     [esp+3Ch+Size], eax ; Str
.text:0040389B                 call    strlen
.text:004038A0                 test    eax, eax
.text:004038A2                 jz      loc_40394F
.text:004038A8                 mov     [esp+3Ch+var_34], eax ; size_t
.text:004038AC                 mov     edx, [ebp+0]
.text:004038AF                 mov     [esp+3Ch+Size], esi ; int
.text:004038B2                 mov     [esp+3Ch+OpenFlag], edx ; void *
.text:004038B6                 call    sub_404AF0
.text:004038BB                 test    eax, eax
.text:004038BD                 mov     edi, eax
.text:004038BF                 jz      loc_403823
.text:004038C5                 mov     dword ptr [eax+3Ch], 0
.text:004038CC                 lea     ecx, [eax+0B8h]
.text:004038D2                 mov     edx, [esi+2Ch]
.text:004038D5                 mov     [eax+14h], ecx
.text:004038D8                 mov     [eax+4], ebx
.text:004038DB                 and     edx, 1
.text:004038DE                 movzx   ecx, dl
.text:004038E1                 mov     [esp+3Ch+var_34], ecx
.text:004038E5                 mov     [esp+3Ch+OpenFlag], eax
.text:004038E9                 mov     [esp+3Ch+Size], esi
.text:004038EC                 call    sub_4048C0
.text:004038F1                 mov     [edi+44h], ax
.text:004038F5                 cmp     ax, 5
.text:004038F9                 jz      short loc_403947
.text:004038FB
.text:004038FB loc_4038FB:                             ; CODE XREF: sub_403670+2DD↓j
.text:004038FB                 mov     eax, [esp+3Ch+arg_8]
.text:004038FF                 test    eax, eax
.text:00403901                 jz      short loc_403925
.text:00403903                 mov     edx, [esp+3Ch+var_14]
.text:00403907                 mov     [esp+3Ch+var_14], edi
.text:0040390B                 mov     [edi+8], edx
.text:0040390E
.text:0040390E loc_40390E:                             ; CODE XREF: sub_403670+2CF↓j
.text:0040390E                 inc     [esp+3Ch+var_18]
.text:00403912                 add     ebp, 4
.text:00403915                 mov     eax, [ebp+0]
.text:00403918                 test    eax, eax
.text:0040391A                 jnz     loc_403898
.text:00403920                 jmp     loc_40373E
.text:00403925 ; ---------------------------------------------------------------------------
.text:00403925
.text:00403925 loc_403925:                             ; CODE XREF: sub_403670+291↑j
.text:00403925                 mov     dword ptr [edi+8], 0
.text:0040392C                 mov     ecx, [esp+3Ch+var_14]
.text:00403930                 test    ecx, ecx
.text:00403932                 jz      short loc_403941
.text:00403934                 mov     eax, [esp+3Ch+var_1C]
.text:00403938                 mov     [eax+8], edi
.text:0040393B
.text:0040393B loc_40393B:                             ; CODE XREF: sub_403670+2D5↓j
.text:0040393B                 mov     [esp+3Ch+var_1C], edi
.text:0040393F                 jmp     short loc_40390E
.text:00403941 ; ---------------------------------------------------------------------------
.text:00403941
.text:00403941 loc_403941:                             ; CODE XREF: sub_403670+2C2↑j
.text:00403941                 mov     [esp+3Ch+var_14], edi
.text:00403945                 jmp     short loc_40393B
.text:00403947 ; ---------------------------------------------------------------------------
.text:00403947
.text:00403947 loc_403947:                             ; CODE XREF: sub_403670+289↑j
.text:00403947                 mov     word ptr [edi+44h], 1
.text:0040394D                 jmp     short loc_4038FB
.text:0040394F ; ---------------------------------------------------------------------------
.text:0040394F
.text:0040394F loc_40394F:                             ; CODE XREF: sub_403670+232↑j
.text:0040394F                 call    _errno
.text:00403954                 mov     dword ptr [eax], 2
.text:0040395A                 jmp     loc_403823
.text:0040395A ; ---------------------------------------------------------------------------
.text:0040395F                 align 10h
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_403670+70↑j
.text:00403960                 mov     [esp+3Ch+Size], ebp
.text:00403963                 call    sub_404CB0
.text:00403968                 mov     edx, eax
.text:0040396A                 jmp     loc_4036E6
.text:0040396F ; ---------------------------------------------------------------------------
.text:0040396F
.text:0040396F loc_40396F:                             ; CODE XREF: sub_403670+1D↑j
.text:0040396F                 call    _errno
.text:00403974                 mov     dword ptr [eax], 16h
.text:0040397A                 jmp     loc_40384A
.text:0040397A sub_403670      endp
.text:0040397A
.text:0040397A ; ---------------------------------------------------------------------------
.text:0040397F                 align 10h
.text:00403980
.text:00403980 ; =============== S U B R O U T I N E =======================================
.text:00403980
.text:00403980
.text:00403980 ; int __cdecl sub_403980(void *)
.text:00403980 sub_403980      proc near               ; CODE XREF: sub_402910+A4↑p
.text:00403980
.text:00403980 Block           = dword ptr -1Ch
.text:00403980 arg_0           = dword ptr  4
.text:00403980
.text:00403980                 push    edi
.text:00403981                 xor     edi, edi
.text:00403983                 push    esi
.text:00403984                 push    ebx
.text:00403985                 sub     esp, 10h
.text:00403988                 mov     esi, [esp+1Ch+arg_0]
.text:0040398C                 mov     eax, [esi]
.text:0040398E                 test    eax, eax
.text:00403990                 jz      short loc_4039C5
.text:00403992                 mov     edx, [eax+3Ch]
.text:00403995                 mov     ebx, eax
.text:00403997                 test    edx, edx
.text:00403999                 js      short loc_4039BD
.text:0040399B                 nop
.text:0040399C                 lea     esi, [esi+0]
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_403980+3B↓j
.text:004039A0                 mov     eax, [ebx+8]
.text:004039A3                 mov     edx, ebx
.text:004039A5                 test    eax, eax
.text:004039A7                 jnz     short loc_4039AC
.text:004039A9                 mov     eax, [ebx+4]
.text:004039AC
.text:004039AC loc_4039AC:                             ; CODE XREF: sub_403980+27↑j
.text:004039AC                 mov     [esp+1Ch+Block], edx ; Block
.text:004039AF                 mov     ebx, eax
.text:004039B1                 call    free
.text:004039B6                 mov     edx, [ebx+3Ch]
.text:004039B9                 test    edx, edx
.text:004039BB                 jns     short loc_4039A0
.text:004039BD
.text:004039BD loc_4039BD:                             ; CODE XREF: sub_403980+19↑j
.text:004039BD                 mov     [esp+1Ch+Block], ebx ; Block
.text:004039C0                 call    free
.text:004039C5
.text:004039C5 loc_4039C5:                             ; CODE XREF: sub_403980+10↑j
.text:004039C5                 mov     eax, [esi+4]
.text:004039C8                 test    eax, eax
.text:004039CA                 jnz     loc_403A66
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: sub_403980+EE↓j
.text:004039D0                 mov     eax, [esi+8]
.text:004039D3                 test    eax, eax
.text:004039D5                 jnz     loc_403A59
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403980+E1↓j
.text:004039DB                 mov     ecx, [esi+18h]
.text:004039DE                 mov     [esp+1Ch+Block], ecx ; Block
.text:004039E1                 call    free
.text:004039E6                 test    byte ptr [esi+2Ch], 4
.text:004039EA                 jz      short loc_403A34
.text:004039EC
.text:004039EC loc_4039EC:                             ; CODE XREF: sub_403980+CE↓j
.text:004039EC                 mov     eax, [esi+30h]
.text:004039EF                 test    eax, eax
.text:004039F1                 jnz     short loc_403A2A
.text:004039F3
.text:004039F3 loc_4039F3:                             ; CODE XREF: sub_403980+B2↓j
.text:004039F3                 mov     eax, [esi+34h]
.text:004039F6                 test    eax, eax
.text:004039F8                 jnz     short loc_403A20
.text:004039FA
.text:004039FA loc_4039FA:                             ; CODE XREF: sub_403980+A8↓j
.text:004039FA                 mov     [esp+1Ch+Block], esi ; Block
.text:004039FD                 call    free
.text:00403A02                 xor     eax, eax
.text:00403A04                 test    edi, edi
.text:00403A06                 jnz     short loc_403A0F
.text:00403A08
.text:00403A08 loc_403A08:                             ; CODE XREF: sub_403980+9B↓j
.text:00403A08                 add     esp, 10h
.text:00403A0B                 pop     ebx
.text:00403A0C                 pop     esi
.text:00403A0D                 pop     edi
.text:00403A0E                 retn
.text:00403A0F ; ---------------------------------------------------------------------------
.text:00403A0F
.text:00403A0F loc_403A0F:                             ; CODE XREF: sub_403980+86↑j
.text:00403A0F                 call    _errno
.text:00403A14                 mov     [eax], edi
.text:00403A16                 mov     eax, 0FFFFFFFFh
.text:00403A1B                 jmp     short loc_403A08
.text:00403A1B ; ---------------------------------------------------------------------------
.text:00403A1D                 align 10h
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403980+78↑j
.text:00403A20                 mov     [esp+1Ch+Block], eax ; Block
.text:00403A23                 call    free
.text:00403A28                 jmp     short loc_4039FA
.text:00403A2A ; ---------------------------------------------------------------------------
.text:00403A2A
.text:00403A2A loc_403A2A:                             ; CODE XREF: sub_403980+71↑j
.text:00403A2A                 mov     [esp+1Ch+Block], eax ; void *
.text:00403A2D                 call    sub_4075A0
.text:00403A32                 jmp     short loc_4039F3
.text:00403A34 ; ---------------------------------------------------------------------------
.text:00403A34
.text:00403A34 loc_403A34:                             ; CODE XREF: sub_403980+6A↑j
.text:00403A34                 mov     ebx, [esi+1Ch]
.text:00403A37                 mov     [esp+1Ch+Block], ebx
.text:00403A3A                 call    sub_407110
.text:00403A3F                 test    eax, eax
.text:00403A41                 jnz     short loc_403A50
.text:00403A43
.text:00403A43 loc_403A43:                             ; CODE XREF: sub_403980+D7↓j
.text:00403A43                 mov     edx, [esi+1Ch]
.text:00403A46                 mov     [esp+1Ch+Block], edx ; FileHandle
.text:00403A49                 call    _close
.text:00403A4E                 jmp     short loc_4039EC
.text:00403A50 ; ---------------------------------------------------------------------------
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_403980+C1↑j
.text:00403A50                 call    _errno
.text:00403A55                 mov     edi, [eax]
.text:00403A57                 jmp     short loc_403A43
.text:00403A59 ; ---------------------------------------------------------------------------
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: sub_403980+55↑j
.text:00403A59                 mov     [esp+1Ch+Block], eax ; Block
.text:00403A5C                 call    free
.text:00403A61                 jmp     loc_4039DB
.text:00403A66 ; ---------------------------------------------------------------------------
.text:00403A66
.text:00403A66 loc_403A66:                             ; CODE XREF: sub_403980+4A↑j
.text:00403A66                 mov     [esp+1Ch+Block], eax ; void *
.text:00403A69                 call    sub_404B80
.text:00403A6E                 jmp     loc_4039D0
.text:00403A6E sub_403980      endp
.text:00403A6E
.text:00403A6E ; ---------------------------------------------------------------------------
.text:00403A73 ; const char byte_403A73
.text:00403A73 byte_403A73     db 2Eh                  ; DATA XREF: sub_403A80+399↓o
.text:00403A73                                         ; sub_404260:loc_404790↓o
.text:00403A74                 dd 768D002Eh, 27BC8D00h, 0
.text:00403A80
.text:00403A80 ; =============== S U B R O U T I N E =======================================
.text:00403A80
.text:00403A80
.text:00403A80 ; int __cdecl sub_403A80(void *)
.text:00403A80 sub_403A80      proc near               ; CODE XREF: sub_402910+43↑p
.text:00403A80
.text:00403A80 Block           = dword ptr -4Ch
.text:00403A80 Src             = dword ptr -48h
.text:00403A80 Size            = dword ptr -44h
.text:00403A80 FileName        = dword ptr -40h
.text:00403A80 var_3C          = dword ptr -3Ch
.text:00403A80 var_38          = dword ptr -38h
.text:00403A80 var_34          = dword ptr -34h
.text:00403A80 var_30          = dword ptr -30h
.text:00403A80 arg_0           = dword ptr  4
.text:00403A80
.text:00403A80                 push    ebp
.text:00403A81                 push    edi
.text:00403A82                 push    esi
.text:00403A83                 push    ebx
.text:00403A84                 sub     esp, 3Ch
.text:00403A87                 mov     eax, [esp+4Ch+arg_0]
.text:00403A8B                 mov     ebp, [eax]
.text:00403A8D                 test    ebp, ebp
.text:00403A8F                 jz      loc_403CD0
.text:00403A95                 mov     edi, [eax+2Ch]
.text:00403A98                 test    edi, 2000h
.text:00403A9E                 jnz     loc_403CD0
.text:00403AA4                 movzx   ecx, word ptr [ebp+48h]
.text:00403AA8                 mov     esi, ebp
.text:00403AAA                 mov     word ptr [ebp+48h], 3
.text:00403AB0                 cmp     cx, 1
.text:00403AB4                 jz      loc_4040E0
.text:00403ABA                 cmp     cx, 2
.text:00403ABE                 jz      loc_40402F
.text:00403AC4                 mov     edx, [ebp+44h]
.text:00403AC7
.text:00403AC7 loc_403AC7:                             ; CODE XREF: sub_403A80+5B9↓j
.text:00403AC7                 dec     dx
.text:00403AC9                 jz      loc_403E80
.text:00403ACF                 nop
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: sub_403A80+78↓j
.text:00403AD0                 mov     eax, esi
.text:00403AD2                 mov     esi, [esi+8]
.text:00403AD5                 test    esi, esi
.text:00403AD7                 jz      loc_403CD7
.text:00403ADD                 mov     [esp+4Ch+Block], eax ; Block
.text:00403AE0                 call    free
.text:00403AE5                 mov     ebx, [esi+3Ch]
.text:00403AE8                 test    ebx, ebx
.text:00403AEA                 jz      loc_403BF6
.text:00403AF0                 movzx   eax, word ptr [esi+48h]
.text:00403AF4                 cmp     ax, 4
.text:00403AF8                 jz      short loc_403AD0
.text:00403AFA                 cmp     ax, 2
.text:00403AFE                 jz      short loc_403B6D
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403A80+113↓j
.text:00403B00                                         ; sub_403A80+527↓j
.text:00403B00                 mov     ebp, [esi+4]
.text:00403B03                 mov     eax, [esp+4Ch+arg_0]
.text:00403B07                 mov     edi, [ebp+24h]
.text:00403B0A                 mov     ecx, [eax+18h]
.text:00403B0D                 mov     edx, [ebp+18h]
.text:00403B10                 add     ecx, edi
.text:00403B12                 cmp     byte ptr [edi+edx-1], 2Fh ; '/'
.text:00403B17                 jz      short loc_403B6A
.text:00403B19
.text:00403B19 loc_403B19:                             ; CODE XREF: sub_403A80+EB↓j
.text:00403B19                 mov     byte ptr [ecx], 2Fh ; '/'
.text:00403B1C                 lea     ebx, [esi+0B8h]
.text:00403B22                 mov     edi, [esi+40h]
.text:00403B25                 mov     [esp+4Ch+Src], ebx ; Src
.text:00403B29                 inc     ecx
.text:00403B2A                 mov     [esp+4Ch+Block], ecx ; void *
.text:00403B2D                 inc     edi
.text:00403B2E                 mov     [esp+4Ch+Size], edi ; Size
.text:00403B32                 call    memmove
.text:00403B37                 cmp     word ptr [esi+44h], 1
.text:00403B3C                 jz      short loc_403B58
.text:00403B3E
.text:00403B3E loc_403B3E:                             ; CODE XREF: sub_403A80+E8↓j
.text:00403B3E                 mov     ebp, [esp+4Ch+arg_0]
.text:00403B42                 mov     [ebp+0], esi
.text:00403B45
.text:00403B45 loc_403B45:                             ; CODE XREF: sub_403A80+21C↓j
.text:00403B45                                         ; sub_403A80+67C↓j
.text:00403B45                 mov     eax, esi
.text:00403B47                 mov     esi, esi
.text:00403B49                 lea     edi, [edi+0]
.text:00403B50
.text:00403B50 loc_403B50:                             ; CODE XREF: sub_403A80+252↓j
.text:00403B50                                         ; sub_403A80+2C1↓j ...
.text:00403B50                 add     esp, 3Ch
.text:00403B53                 pop     ebx
.text:00403B54                 pop     esi
.text:00403B55                 pop     edi
.text:00403B56                 pop     ebp
.text:00403B57                 retn
.text:00403B58 ; ---------------------------------------------------------------------------
.text:00403B58
.text:00403B58 loc_403B58:                             ; CODE XREF: sub_403A80+BC↑j
.text:00403B58                 mov     [esp+4Ch+Src], esi ; int
.text:00403B5C                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B60                 mov     [esp+4Ch+Block], ecx ; Block
.text:00403B63                 call    sub_404F10
.text:00403B68                 jmp     short loc_403B3E
.text:00403B6A ; ---------------------------------------------------------------------------
.text:00403B6A
.text:00403B6A loc_403B6A:                             ; CODE XREF: sub_403A80+97↑j
.text:00403B6A                 dec     ecx
.text:00403B6B                 jmp     short loc_403B19
.text:00403B6D ; ---------------------------------------------------------------------------
.text:00403B6D
.text:00403B6D loc_403B6D:                             ; CODE XREF: sub_403A80+7E↑j
.text:00403B6D                 mov     [esp+4Ch+Size], 1
.text:00403B75                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B79                 mov     [esp+4Ch+Src], esi
.text:00403B7D                 mov     [esp+4Ch+Block], ecx
.text:00403B80                 call    sub_4048C0
.text:00403B85                 mov     [esi+44h], ax
.text:00403B89                 dec     ax
.text:00403B8B                 jz      short loc_403B98
.text:00403B8D
.text:00403B8D loc_403B8D:                             ; CODE XREF: sub_403A80+120↓j
.text:00403B8D                                         ; sub_403A80+14C↓j ...
.text:00403B8D                 mov     word ptr [esi+48h], 3
.text:00403B93                 jmp     loc_403B00
.text:00403B98 ; ---------------------------------------------------------------------------
.text:00403B98
.text:00403B98 loc_403B98:                             ; CODE XREF: sub_403A80+10B↑j
.text:00403B98                 mov     ebx, [esp+4Ch+arg_0]
.text:00403B9C                 test    byte ptr [ebx+2Ch], 4
.text:00403BA0                 jnz     short loc_403B8D
.text:00403BA2                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00403BAA                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403BB1                 call    _open
.text:00403BB6                 test    eax, eax
.text:00403BB8                 js      short loc_403BE0
.text:00403BBA
.text:00403BBA loc_403BBA:                             ; CODE XREF: sub_403A80+174↓j
.text:00403BBA                 mov     [esi+20h], eax
.text:00403BBD                 test    eax, eax
.text:00403BBF                 js      short loc_403BCE
.text:00403BC1                 movzx   ebp, word ptr [esi+46h]
.text:00403BC5                 or      ebp, 2
.text:00403BC8                 mov     [esi+46h], bp
.text:00403BCC                 jmp     short loc_403B8D
.text:00403BCE ; ---------------------------------------------------------------------------
.text:00403BCE
.text:00403BCE loc_403BCE:                             ; CODE XREF: sub_403A80+13F↑j
.text:00403BCE                 call    _errno
.text:00403BD3                 mov     word ptr [esi+44h], 7
.text:00403BD9                 mov     edi, [eax]
.text:00403BDB                 mov     [esi+1Ch], edi
.text:00403BDE                 jmp     short loc_403B8D
.text:00403BE0 ; ---------------------------------------------------------------------------
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: sub_403A80+138↑j
.text:00403BE0                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:00403BE8                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00403BEF                 call    _open
.text:00403BF4                 jmp     short loc_403BBA
.text:00403BF6 ; ---------------------------------------------------------------------------
.text:00403BF6
.text:00403BF6 loc_403BF6:                             ; CODE XREF: sub_403A80+6A↑j
.text:00403BF6                 mov     eax, [esp+4Ch+arg_0]
.text:00403BFA                 test    byte ptr [eax+2Ch], 4
.text:00403BFE                 jnz     short loc_403C13
.text:00403C00                 mov     ecx, [eax+1Ch]
.text:00403C03                 mov     [esp+4Ch+Block], ecx
.text:00403C06                 call    sub_407110
.text:00403C0B                 test    eax, eax
.text:00403C0D                 jnz     loc_403CB7
.text:00403C13
.text:00403C13 loc_403C13:                             ; CODE XREF: sub_403A80+17E↑j
.text:00403C13                 mov     ebp, [esi+40h]
.text:00403C16                 mov     eax, [esp+4Ch+arg_0]
.text:00403C1A                 mov     [esi+24h], ebp
.text:00403C1D                 inc     ebp
.text:00403C1E                 mov     [esp+4Ch+Size], ebp ; Size
.text:00403C22                 lea     ebp, [esi+0B8h]
.text:00403C28                 mov     [esp+4Ch+Src], ebp ; Src
.text:00403C2C                 mov     edx, [eax+18h]
.text:00403C2F                 mov     [esp+4Ch+Block], edx ; void *
.text:00403C32                 call    memmove
.text:00403C37                 mov     [esp+4Ch+Src], 2Fh ; '/' ; Ch
.text:00403C3F                 mov     [esp+4Ch+Block], ebp ; Str
.text:00403C42                 call    strrchr
.text:00403C47                 test    eax, eax
.text:00403C49                 mov     edi, eax
.text:00403C4B                 jz      short loc_403C72
.text:00403C4D                 cmp     eax, ebp
.text:00403C4F                 jz      short loc_403CAF
.text:00403C51
.text:00403C51 loc_403C51:                             ; CODE XREF: sub_403A80+235↓j
.text:00403C51                 inc     edi
.text:00403C52                 mov     [esp+4Ch+Block], edi ; Str
.text:00403C55                 call    strlen
.text:00403C5A                 mov     [esp+4Ch+Src], edi ; Src
.text:00403C5E                 mov     ebx, eax
.text:00403C60                 lea     ecx, [eax+1]
.text:00403C63                 mov     [esp+4Ch+Size], ecx ; Size
.text:00403C67                 mov     [esp+4Ch+Block], ebp ; void *
.text:00403C6A                 call    memmove
.text:00403C6F                 mov     [esi+40h], ebx
.text:00403C72
.text:00403C72 loc_403C72:                             ; CODE XREF: sub_403A80+1CB↑j
.text:00403C72                                         ; sub_403A80+233↓j
.text:00403C72                 cmp     word ptr [esi+44h], 1
.text:00403C77                 mov     eax, [esp+4Ch+arg_0]
.text:00403C7B                 mov     edi, [esi+30h]
.text:00403C7E                 mov     ebx, [esi+34h]
.text:00403C81                 mov     ebp, [eax+18h]
.text:00403C84                 mov     ecx, [esp+4Ch+arg_0]
.text:00403C88                 mov     [esi+18h], ebp
.text:00403C8B                 mov     [esi+14h], ebp
.text:00403C8E                 mov     [ecx+10h], edi
.text:00403C91                 mov     [ecx+14h], ebx
.text:00403C94                 jz      short loc_403CA1
.text:00403C96
.text:00403C96 loc_403C96:                             ; CODE XREF: sub_403A80+22D↓j
.text:00403C96                 mov     edx, [esp+4Ch+arg_0]
.text:00403C9A                 mov     [edx], esi
.text:00403C9C                 jmp     loc_403B45
.text:00403CA1 ; ---------------------------------------------------------------------------
.text:00403CA1
.text:00403CA1 loc_403CA1:                             ; CODE XREF: sub_403A80+214↑j
.text:00403CA1                 mov     [esp+4Ch+Src], esi ; int
.text:00403CA5                 mov     [esp+4Ch+Block], ecx ; Block
.text:00403CA8                 call    sub_404F10
.text:00403CAD                 jmp     short loc_403C96
.text:00403CAF ; ---------------------------------------------------------------------------
.text:00403CAF
.text:00403CAF loc_403CAF:                             ; CODE XREF: sub_403A80+1CF↑j
.text:00403CAF                 cmp     byte ptr [ebp+1], 0
.text:00403CB3                 jz      short loc_403C72
.text:00403CB5                 jmp     short loc_403C51
.text:00403CB7 ; ---------------------------------------------------------------------------
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403A80+18D↑j
.text:00403CB7                 mov     esi, [esp+4Ch+arg_0]
.text:00403CBB                 or      dword ptr [esi+2Ch], 2000h
.text:00403CC2                 lea     esi, [esi+0]
.text:00403CC9                 lea     edi, [edi+0]
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: sub_403A80+F↑j
.text:00403CD0                                         ; sub_403A80+1E↑j ...
.text:00403CD0                 xor     eax, eax
.text:00403CD2                 jmp     loc_403B50
.text:00403CD7 ; ---------------------------------------------------------------------------
.text:00403CD7
.text:00403CD7 loc_403CD7:                             ; CODE XREF: sub_403A80+57↑j
.text:00403CD7                 mov     esi, [eax+4]
.text:00403CDA                 mov     [esp+4Ch+Block], eax ; Block
.text:00403CDD                 call    free
.text:00403CE2                 cmp     dword ptr [esi+3Ch], 0FFFFFFFFh
.text:00403CE6                 jz      loc_403E57
.text:00403CEC                 mov     ebx, [esp+4Ch+arg_0]
.text:00403CF0                 mov     edi, [esi+24h]
.text:00403CF3                 mov     eax, [ebx+18h]
.text:00403CF6                 mov     byte ptr [edi+eax], 0
.text:00403CFA                 mov     edx, [esi+3Ch]
.text:00403CFD                 test    edx, edx
.text:00403CFF                 jnz     loc_403DB0
.text:00403D05                 test    byte ptr [ebx+2Ch], 4
.text:00403D09                 jz      short loc_403D87
.text:00403D0B
.text:00403D0B loc_403D0B:                             ; CODE XREF: sub_403A80+314↓j
.text:00403D0B                                         ; sub_403A80+32B↓j ...
.text:00403D0B                 mov     ebp, [esi+1Ch]
.text:00403D0E                 xor     eax, eax
.text:00403D10                 mov     ebx, 7
.text:00403D15                 test    ebp, ebp
.text:00403D17                 setz    al
.text:00403D1A                 sub     ebx, eax
.text:00403D1C                 test    ebp, ebp
.text:00403D1E                 mov     [esi+44h], bx
.text:00403D22                 jnz     short loc_403D2F
.text:00403D24                 mov     edx, [esp+4Ch+arg_0]
.text:00403D28                 mov     ebx, [edx+30h]
.text:00403D2B                 test    ebx, ebx
.text:00403D2D                 jnz     short loc_403D46
.text:00403D2F
.text:00403D2F loc_403D2F:                             ; CODE XREF: sub_403A80+2A2↑j
.text:00403D2F                                         ; sub_403A80+305↓j
.text:00403D2F                 mov     ebx, [esp+4Ch+arg_0]
.text:00403D33                 xor     eax, eax
.text:00403D35                 test    byte ptr [ebx+2Dh], 20h
.text:00403D39                 mov     [ebx], esi
.text:00403D3B                 setnz   al
.text:00403D3E                 dec     eax
.text:00403D3F                 and     eax, esi
.text:00403D41                 jmp     loc_403B50
.text:00403D46 ; ---------------------------------------------------------------------------
.text:00403D46
.text:00403D46 loc_403D46:                             ; CODE XREF: sub_403A80+2AD↑j
.text:00403D46                 lea     edi, [esi+50h]
.text:00403D49                 mov     ebp, [edi+10h]
.text:00403D4C                 mov     ecx, [edi+14h]
.text:00403D4F                 mov     [esp+4Ch+var_3C], ebp
.text:00403D53                 mov     [esp+4Ch+var_38], ecx
.text:00403D57                 mov     edx, [edi+8]
.text:00403D5A                 mov     ebp, [edi+0Ch]
.text:00403D5D                 mov     [esp+4Ch+Block], ebx
.text:00403D60                 lea     edi, [esp+4Ch+var_3C]
.text:00403D64                 mov     [esp+4Ch+var_34], edx
.text:00403D68                 mov     [esp+4Ch+var_30], ebp
.text:00403D6C                 mov     [esp+4Ch+Src], edi
.text:00403D70                 call    sub_407EE0
.text:00403D75                 test    eax, eax
.text:00403D77                 jz      loc_404101
.text:00403D7D                 mov     [esp+4Ch+Block], eax ; Block
.text:00403D80                 call    free
.text:00403D85                 jmp     short loc_403D2F
.text:00403D87 ; ---------------------------------------------------------------------------
.text:00403D87
.text:00403D87 loc_403D87:                             ; CODE XREF: sub_403A80+289↑j
.text:00403D87                 mov     ecx, [ebx+1Ch]
.text:00403D8A                 mov     [esp+4Ch+Block], ecx
.text:00403D8D                 call    sub_407110
.text:00403D92                 test    eax, eax
.text:00403D94                 jz      loc_403D0B
.text:00403D9A                 call    _errno
.text:00403D9F                 mov     ebp, [eax]
.text:00403DA1                 mov     [esi+1Ch], ebp
.text:00403DA4
.text:00403DA4 loc_403DA4:                             ; CODE XREF: sub_403A80+3D2↓j
.text:00403DA4                 or      dword ptr [ebx+2Ch], 2000h
.text:00403DAB                 jmp     loc_403D0B
.text:00403DB0 ; ---------------------------------------------------------------------------
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403A80+27F↑j
.text:00403DB0                 movzx   eax, word ptr [esi+46h]
.text:00403DB4                 test    al, 2
.text:00403DB6                 jz      short loc_403E11
.text:00403DB8                 mov     ebx, [esp+4Ch+arg_0]
.text:00403DBC                 test    byte ptr [ebx+2Ch], 4
.text:00403DC0                 jz      short loc_403DD2
.text:00403DC2
.text:00403DC2 loc_403DC2:                             ; CODE XREF: sub_403A80+35F↓j
.text:00403DC2                                         ; sub_403A80+38F↓j
.text:00403DC2                 mov     edx, [esi+20h]
.text:00403DC5                 mov     [esp+4Ch+Block], edx ; FileHandle
.text:00403DC8                 call    _close
.text:00403DCD                 jmp     loc_403D0B
.text:00403DD2 ; ---------------------------------------------------------------------------
.text:00403DD2
.text:00403DD2 loc_403DD2:                             ; CODE XREF: sub_403A80+340↑j
.text:00403DD2                 mov     edx, [esi+20h]
.text:00403DD5                 mov     [esp+4Ch+Block], edx
.text:00403DD8                 call    sub_407110
.text:00403DDD                 test    eax, eax
.text:00403DDF                 jz      short loc_403DC2
.text:00403DE1                 call    _errno
.text:00403DE6                 mov     ebx, [esi+20h]
.text:00403DE9                 mov     ebp, [eax]
.text:00403DEB                 mov     [esp+4Ch+Block], ebx ; FileHandle
.text:00403DEE                 call    _close
.text:00403DF3                 call    _errno
.text:00403DF8                 mov     [eax], ebp
.text:00403DFA                 call    _errno
.text:00403DFF                 mov     ecx, [eax]
.text:00403E01                 mov     edi, [esp+4Ch+arg_0]
.text:00403E05                 mov     [esi+1Ch], ecx
.text:00403E08                 or      dword ptr [edi+2Ch], 2000h
.text:00403E0F                 jmp     short loc_403DC2
.text:00403E11 ; ---------------------------------------------------------------------------
.text:00403E11
.text:00403E11 loc_403E11:                             ; CODE XREF: sub_403A80+336↑j
.text:00403E11                 test    al, 1
.text:00403E13                 jnz     loc_403D0B
.text:00403E19                 mov     [esp+4Ch+FileName], offset byte_403A73 ; FileName
.text:00403E21                 mov     eax, [esp+4Ch+arg_0]
.text:00403E25                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:00403E2D                 mov     edi, [esi+4]
.text:00403E30                 mov     [esp+4Ch+Block], eax ; int
.text:00403E33                 mov     [esp+4Ch+Src], edi ; int
.text:00403E37                 call    sub_404CF0
.text:00403E3C                 test    eax, eax
.text:00403E3E                 jz      loc_403D0B
.text:00403E44                 call    _errno
.text:00403E49                 mov     ecx, [eax]
.text:00403E4B                 mov     ebx, [esp+4Ch+arg_0]
.text:00403E4F                 mov     [esi+1Ch], ecx
.text:00403E52                 jmp     loc_403DA4
.text:00403E57 ; ---------------------------------------------------------------------------
.text:00403E57
.text:00403E57 loc_403E57:                             ; CODE XREF: sub_403A80+266↑j
.text:00403E57                 mov     [esp+4Ch+Block], esi ; Block
.text:00403E5A                 call    free
.text:00403E5F                 call    _errno
.text:00403E64                 mov     dword ptr [eax], 0
.text:00403E6A                 mov     esi, [esp+4Ch+arg_0]
.text:00403E6E                 mov     dword ptr [esi], 0
.text:00403E74                 jmp     loc_403CD0
.text:00403E74 ; ---------------------------------------------------------------------------
.text:00403E79                 align 10h
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403A80+49↑j
.text:00403E80                 cmp     cx, 4
.text:00403E84                 jz      short loc_403EB0
.text:00403E86                 test    edi, 40h
.text:00403E8C                 jz      loc_403F3F
.text:00403E92                 mov     esi, [esp+4Ch+arg_0]
.text:00403E96                 mov     ebx, [ebp+34h]
.text:00403E99                 mov     ecx, [ebp+30h]
.text:00403E9C                 mov     eax, [esi+10h]
.text:00403E9F                 mov     edx, [esi+14h]
.text:00403EA2                 mov     esi, ebx
.text:00403EA4                 xor     eax, ecx
.text:00403EA6                 xor     esi, edx
.text:00403EA8                 or      esi, eax
.text:00403EAA                 jz      loc_403F3F
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403A80+404↑j
.text:00403EB0                 test    byte ptr [ebp+46h], 2
.text:00403EB4                 jnz     short loc_403F2F
.text:00403EB6
.text:00403EB6 loc_403EB6:                             ; CODE XREF: sub_403A80+4BA↓j
.text:00403EB6                 mov     ecx, [esp+4Ch+arg_0]
.text:00403EBA                 mov     eax, [ecx+4]
.text:00403EBD                 test    eax, eax
.text:00403EBF                 jnz     short loc_403F1A
.text:00403EC1
.text:00403EC1 loc_403EC1:                             ; CODE XREF: sub_403A80+4AD↓j
.text:00403EC1                 mov     word ptr [ebp+44h], 6
.text:00403EC7                 mov     edx, [esp+4Ch+arg_0]
.text:00403ECB                 mov     ebx, [edx+30h]
.text:00403ECE
.text:00403ECE loc_403ECE:                             ; CODE XREF: sub_403A80+515↓j
.text:00403ECE                 test    ebx, ebx
.text:00403ED0                 jnz     short loc_403ED9
.text:00403ED2
.text:00403ED2 loc_403ED2:                             ; CODE XREF: sub_403A80+498↓j
.text:00403ED2                                         ; sub_403A80+5E4↓j ...
.text:00403ED2                 mov     eax, ebp
.text:00403ED4                 jmp     loc_403B50
.text:00403ED9 ; ---------------------------------------------------------------------------
.text:00403ED9
.text:00403ED9 loc_403ED9:                             ; CODE XREF: sub_403A80+450↑j
.text:00403ED9                 lea     ecx, [ebp+50h]
.text:00403EDC                 mov     edx, [ecx+10h]
.text:00403EDF                 mov     edi, [ecx+14h]
.text:00403EE2                 mov     [esp+4Ch+var_3C], edx
.text:00403EE6                 lea     edx, [esp+4Ch+var_3C]
.text:00403EEA                 mov     [esp+4Ch+var_38], edi
.text:00403EEE                 mov     esi, [ecx+8]
.text:00403EF1                 mov     edi, [ecx+0Ch]
.text:00403EF4                 mov     [esp+4Ch+Src], edx
.text:00403EF8                 mov     [esp+4Ch+var_34], esi
.text:00403EFC                 mov     [esp+4Ch+var_30], edi
.text:00403F00                 mov     [esp+4Ch+Block], ebx
.text:00403F03                 call    sub_407EE0
.text:00403F08                 test    eax, eax
.text:00403F0A                 jz      loc_404101
.text:00403F10                 mov     [esp+4Ch+Block], eax ; Block
.text:00403F13                 call    free
.text:00403F18                 jmp     short loc_403ED2
.text:00403F1A ; ---------------------------------------------------------------------------
.text:00403F1A
.text:00403F1A loc_403F1A:                             ; CODE XREF: sub_403A80+43F↑j
.text:00403F1A                 mov     [esp+4Ch+Block], eax ; void *
.text:00403F1D                 call    sub_404B80
.text:00403F22                 mov     eax, [esp+4Ch+arg_0]
.text:00403F26                 mov     dword ptr [eax+4], 0
.text:00403F2D                 jmp     short loc_403EC1
.text:00403F2F ; ---------------------------------------------------------------------------
.text:00403F2F
.text:00403F2F loc_403F2F:                             ; CODE XREF: sub_403A80+434↑j
.text:00403F2F                 mov     esi, [ebp+20h]
.text:00403F32                 mov     [esp+4Ch+Block], esi ; FileHandle
.text:00403F35                 call    _close
.text:00403F3A                 jmp     loc_403EB6
.text:00403F3F ; ---------------------------------------------------------------------------
.text:00403F3F
.text:00403F3F loc_403F3F:                             ; CODE XREF: sub_403A80+40C↑j
.text:00403F3F                                         ; sub_403A80+42A↑j
.text:00403F3F                 mov     eax, [esp+4Ch+arg_0]
.text:00403F43                 mov     edx, [eax+4]
.text:00403F46                 test    edx, edx
.text:00403F48                 jz      short loc_403F5A
.text:00403F4A                 test    edi, 1000h
.text:00403F50                 jnz     loc_40400C
.text:00403F56
.text:00403F56 loc_403F56:                             ; CODE XREF: sub_403A80+5AA↓j
.text:00403F56                 test    edx, edx
.text:00403F58                 jnz     short loc_403FAC
.text:00403F5A
.text:00403F5A loc_403F5A:                             ; CODE XREF: sub_403A80+4C8↑j
.text:00403F5A                 mov     [esp+4Ch+Src], 3
.text:00403F62                 mov     esi, [esp+4Ch+arg_0]
.text:00403F66                 mov     [esp+4Ch+Block], esi
.text:00403F69                 call    sub_404260
.text:00403F6E                 mov     [esi+4], eax
.text:00403F71                 test    eax, eax
.text:00403F73                 mov     edx, eax
.text:00403F75                 jnz     short loc_403F9A
.text:00403F77                 test    byte ptr [esi+2Dh], 20h
.text:00403F7B                 jnz     loc_403CD0
.text:00403F81                 mov     esi, [ebp+1Ch]
.text:00403F84                 test    esi, esi
.text:00403F86                 jz      short loc_403F8E
.text:00403F88                 mov     word ptr [ebp+44h], 7
.text:00403F8E
.text:00403F8E loc_403F8E:                             ; CODE XREF: sub_403A80+506↑j
.text:00403F8E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F92                 mov     ebx, [ecx+30h]
.text:00403F95                 jmp     loc_403ECE
.text:00403F9A ; ---------------------------------------------------------------------------
.text:00403F9A
.text:00403F9A loc_403F9A:                             ; CODE XREF: sub_403A80+4F5↑j
.text:00403F9A                                         ; sub_403A80+556↓j ...
.text:00403F9A                 mov     ebp, [esp+4Ch+arg_0]
.text:00403F9E                 mov     esi, edx
.text:00403FA0                 mov     dword ptr [ebp+4], 0
.text:00403FA7                 jmp     loc_403B00
.text:00403FAC ; ---------------------------------------------------------------------------
.text:00403FAC
.text:00403FAC loc_403FAC:                             ; CODE XREF: sub_403A80+4D8↑j
.text:00403FAC                 mov     esi, [ebp+14h]
.text:00403FAF                 mov     [esp+4Ch+Src], ebp ; int
.text:00403FB3                 mov     ebx, [esp+4Ch+arg_0]
.text:00403FB7                 mov     [esp+4Ch+Size], 0FFFFFFFFh ; int
.text:00403FBF                 mov     [esp+4Ch+FileName], esi ; FileName
.text:00403FC3                 mov     [esp+4Ch+Block], ebx ; int
.text:00403FC6                 call    sub_404CF0
.text:00403FCB                 test    eax, eax
.text:00403FCD                 jnz     short loc_403FD8
.text:00403FCF                 mov     eax, [esp+4Ch+arg_0]
.text:00403FD3                 mov     edx, [eax+4]
.text:00403FD6                 jmp     short loc_403F9A
.text:00403FD8 ; ---------------------------------------------------------------------------
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403A80+54D↑j
.text:00403FD8                 call    _errno
.text:00403FDD                 movzx   ecx, word ptr [ebp+46h]
.text:00403FE1                 mov     edx, [eax]
.text:00403FE3                 or      ecx, 1
.text:00403FE6                 mov     [ebp+1Ch], edx
.text:00403FE9                 mov     [ebp+46h], cx
.text:00403FED                 mov     ebp, [esp+4Ch+arg_0]
.text:00403FF1                 mov     esi, [ebp+4]
.text:00403FF4                 test    esi, esi
.text:00403FF6                 mov     edx, esi
.text:00403FF8                 jz      short loc_403F9A
.text:00403FFA
.text:00403FFA loc_403FFA:                             ; CODE XREF: sub_403A80+588↓j
.text:00403FFA                 mov     ebx, [esi+4]
.text:00403FFD                 mov     edi, [ebx+14h]
.text:00404000                 mov     [esi+14h], edi
.text:00404003                 mov     esi, [esi+8]
.text:00404006                 test    esi, esi
.text:00404008                 jnz     short loc_403FFA
.text:0040400A                 jmp     short loc_403F9A
.text:0040400C ; ---------------------------------------------------------------------------
.text:0040400C
.text:0040400C loc_40400C:                             ; CODE XREF: sub_403A80+4D0↑j
.text:0040400C                 and     edi, 0FFFFEFFFh
.text:00404012                 mov     [eax+2Ch], edi
.text:00404015                 mov     [esp+4Ch+Block], edx ; void *
.text:00404018                 call    sub_404B80
.text:0040401D                 mov     edi, [esp+4Ch+arg_0]
.text:00404021                 xor     edx, edx
.text:00404023                 mov     dword ptr [edi+4], 0
.text:0040402A                 jmp     loc_403F56
.text:0040402F ; ---------------------------------------------------------------------------
.text:0040402F
.text:0040402F loc_40402F:                             ; CODE XREF: sub_403A80+3E↑j
.text:0040402F                 mov     edx, [ebp+44h]
.text:00404032                 lea     ebx, [edx-0Ch]
.text:00404035                 cmp     bx, 1
.text:00404039                 ja      loc_403AC7
.text:0040403F                 mov     [esp+4Ch+Size], 1
.text:00404047                 mov     eax, [esp+4Ch+arg_0]
.text:0040404B                 mov     [esp+4Ch+Src], ebp
.text:0040404F                 mov     [esp+4Ch+Block], eax
.text:00404052                 call    sub_4048C0
.text:00404057                 mov     [ebp+44h], ax
.text:0040405B                 dec     ax
.text:0040405D                 jz      short loc_40407F
.text:0040405F
.text:0040405F loc_40405F:                             ; CODE XREF: sub_403A80+607↓j
.text:0040405F                                         ; sub_403A80+633↓j ...
.text:0040405F                 cmp     word ptr [ebp+44h], 1
.text:00404064                 jnz     loc_403ED2
.text:0040406A                 mov     [esp+4Ch+Src], ebp ; int
.text:0040406E                 mov     ebx, [esp+4Ch+arg_0]
.text:00404072                 mov     [esp+4Ch+Block], ebx ; Block
.text:00404075                 call    sub_404F10
.text:0040407A                 jmp     loc_403ED2
.text:0040407F ; ---------------------------------------------------------------------------
.text:0040407F
.text:0040407F loc_40407F:                             ; CODE XREF: sub_403A80+5DD↑j
.text:0040407F                 mov     edx, [esp+4Ch+arg_0]
.text:00404083                 test    byte ptr [edx+2Ch], 4
.text:00404087                 jnz     short loc_40405F
.text:00404089                 mov     [esp+4Ch+Src], 0 ; OpenFlag
.text:00404091                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:00404098                 call    _open
.text:0040409D                 test    eax, eax
.text:0040409F                 js      short loc_4040C7
.text:004040A1
.text:004040A1 loc_4040A1:                             ; CODE XREF: sub_403A80+65B↓j
.text:004040A1                 mov     [esi+20h], eax
.text:004040A4                 test    eax, eax
.text:004040A6                 js      short loc_4040B5
.text:004040A8                 movzx   edi, word ptr [esi+46h]
.text:004040AC                 or      edi, 2
.text:004040AF                 mov     [esi+46h], di
.text:004040B3                 jmp     short loc_40405F
.text:004040B5 ; ---------------------------------------------------------------------------
.text:004040B5
.text:004040B5 loc_4040B5:                             ; CODE XREF: sub_403A80+626↑j
.text:004040B5                 call    _errno
.text:004040BA                 mov     word ptr [esi+44h], 7
.text:004040C0                 mov     ecx, [eax]
.text:004040C2                 mov     [esi+1Ch], ecx
.text:004040C5                 jmp     short loc_40405F
.text:004040C7 ; ---------------------------------------------------------------------------
.text:004040C7
.text:004040C7 loc_4040C7:                             ; CODE XREF: sub_403A80+61F↑j
.text:004040C7                 mov     [esp+4Ch+Src], 1 ; OpenFlag
.text:004040CF                 mov     [esp+4Ch+Block], offset FileName ; "."
.text:004040D6                 call    _open
.text:004040DB                 jmp     short loc_4040A1
.text:004040DB ; ---------------------------------------------------------------------------
.text:004040DD                 align 10h
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403A80+34↑j
.text:004040E0                 mov     [esp+4Ch+Size], 0
.text:004040E8                 mov     eax, [esp+4Ch+arg_0]
.text:004040EC                 mov     [esp+4Ch+Src], ebp
.text:004040F0                 mov     [esp+4Ch+Block], eax
.text:004040F3                 call    sub_4048C0
.text:004040F8                 mov     [ebp+44h], ax
.text:004040FC                 jmp     loc_403B45
.text:00404101 ; ---------------------------------------------------------------------------
.text:00404101
.text:00404101 loc_404101:                             ; CODE XREF: sub_403A80+2F7↑j
.text:00404101                                         ; sub_403A80+48A↑j
.text:00404101                 call    abort
.text:00404101 sub_403A80      endp
.text:00404101
.text:00404101 ; ---------------------------------------------------------------------------
.text:00404106                 align 10h
.text:00404110                 sub     esp, 1Ch
.text:00404113                 mov     [esp+10h], ebx
.text:00404117                 mov     ebx, [esp+24h]
.text:0040411B                 mov     [esp+18h], edi
.text:0040411F                 mov     edi, [esp+20h]
.text:00404123                 test    ebx, ebx
.text:00404125                 mov     [esp+14h], esi
.text:00404129                 jz      short loc_404137
.text:0040412B                 cmp     ebx, 1000h
.text:00404131                 jnz     loc_40424D
.text:00404137
.text:00404137 loc_404137:                             ; CODE XREF: .text:00404129↑j
.text:00404137                 mov     esi, [edi]
.text:00404139                 call    _errno
.text:0040413E                 mov     dword ptr [eax], 0
.text:00404144                 test    byte ptr [edi+2Dh], 20h
.text:00404148                 jnz     loc_404200
.text:0040414E                 movzx   edx, word ptr [esi+44h]
.text:00404152                 cmp     dx, 9
.text:00404156                 jz      loc_404245
.text:0040415C                 xor     eax, eax
.text:0040415E                 dec     dx
.text:00404160                 jnz     short loc_4041A2
.text:00404162                 mov     eax, [edi+4]
.text:00404165                 test    eax, eax
.text:00404167                 jnz     loc_404238
.text:0040416D
.text:0040416D loc_40416D:                             ; CODE XREF: .text:00404240↓j
.text:0040416D                 cmp     ebx, 1000h
.text:00404173                 jz      loc_404227
.text:00404179                 mov     ebx, 1
.text:0040417E
.text:0040417E loc_40417E:                             ; CODE XREF: .text:00404233↓j
.text:0040417E                 mov     edx, [esi+3Ch]
.text:00404181                 test    edx, edx
.text:00404183                 jnz     short loc_404193
.text:00404185                 mov     edx, [esi+14h]
.text:00404188                 cmp     byte ptr [edx], 2Fh ; '/'
.text:0040418B                 jz      short loc_404193
.text:0040418D                 test    byte ptr [edi+2Ch], 4
.text:00404191                 jz      short loc_4041B2
.text:00404193
.text:00404193 loc_404193:                             ; CODE XREF: .text:00404183↑j
.text:00404193                                         ; .text:0040418B↑j
.text:00404193                 mov     [esp+4], ebx
.text:00404197                 mov     [esp], edi
.text:0040419A                 call    sub_404260
.text:0040419F                 mov     [edi+4], eax
.text:004041A2
.text:004041A2 loc_4041A2:                             ; CODE XREF: .text:00404160↑j
.text:004041A2                                         ; .text:004041F2↓j ...
.text:004041A2                 mov     ebx, [esp+10h]
.text:004041A6                 mov     esi, [esp+14h]
.text:004041AA                 mov     edi, [esp+18h]
.text:004041AE                 add     esp, 1Ch
.text:004041B1                 retn
.text:004041B2 ; ---------------------------------------------------------------------------
.text:004041B2
.text:004041B2 loc_4041B2:                             ; CODE XREF: .text:00404191↑j
.text:004041B2                 mov     dword ptr [esp+4], 0
.text:004041BA                 mov     dword ptr [esp], offset FileName ; "."
.text:004041C1                 call    _open
.text:004041C6                 test    eax, eax
.text:004041C8                 mov     esi, eax
.text:004041CA                 js      short loc_404204
.text:004041CC
.text:004041CC loc_4041CC:                             ; CODE XREF: .text:0040421C↓j
.text:004041CC                 mov     [esp+4], ebx
.text:004041D0                 mov     [esp], edi
.text:004041D3                 call    sub_404260
.text:004041D8                 mov     [edi+4], eax
.text:004041DB                 mov     [esp], esi
.text:004041DE                 call    sub_407110
.text:004041E3                 test    eax, eax
.text:004041E5                 jnz     short loc_4041F4
.text:004041E7                 mov     [esp], esi
.text:004041EA                 call    _close
.text:004041EF                 mov     eax, [edi+4]
.text:004041F2                 jmp     short loc_4041A2
.text:004041F4 ; ---------------------------------------------------------------------------
.text:004041F4
.text:004041F4 loc_4041F4:                             ; CODE XREF: .text:004041E5↑j
.text:004041F4                 mov     [esp], esi
.text:004041F7                 call    _close
.text:004041FC                 lea     esi, [esi+0]
.text:00404200
.text:00404200 loc_404200:                             ; CODE XREF: .text:00404148↑j
.text:00404200                                         ; .text:00404225↓j ...
.text:00404200                 xor     eax, eax
.text:00404202                 jmp     short loc_4041A2
.text:00404204 ; ---------------------------------------------------------------------------
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: .text:004041CA↑j
.text:00404204                 mov     dword ptr [esp+4], 1
.text:0040420C                 mov     dword ptr [esp], offset FileName ; "."
.text:00404213                 call    _open
.text:00404218                 test    eax, eax
.text:0040421A                 mov     esi, eax
.text:0040421C                 jns     short loc_4041CC
.text:0040421E                 mov     dword ptr [edi+4], 0
.text:00404225                 jmp     short loc_404200
.text:00404227 ; ---------------------------------------------------------------------------
.text:00404227
.text:00404227 loc_404227:                             ; CODE XREF: .text:00404173↑j
.text:00404227                 or      dword ptr [edi+2Ch], 1000h
.text:0040422E                 mov     ebx, 2
.text:00404233                 jmp     loc_40417E
.text:00404238 ; ---------------------------------------------------------------------------
.text:00404238
.text:00404238 loc_404238:                             ; CODE XREF: .text:00404167↑j
.text:00404238                 mov     [esp], eax
.text:0040423B                 call    sub_404B80
.text:00404240                 jmp     loc_40416D
.text:00404245 ; ---------------------------------------------------------------------------
.text:00404245
.text:00404245 loc_404245:                             ; CODE XREF: .text:00404156↑j
.text:00404245                 mov     eax, [esi+8]
.text:00404248                 jmp     loc_4041A2
.text:0040424D ; ---------------------------------------------------------------------------
.text:0040424D
.text:0040424D loc_40424D:                             ; CODE XREF: .text:00404131↑j
.text:0040424D                 call    _errno
.text:00404252                 mov     dword ptr [eax], 16h
.text:00404258                 jmp     short loc_404200
.text:00404258 ; ---------------------------------------------------------------------------
.text:0040425A                 align 10h
.text:00404260
.text:00404260 ; =============== S U B R O U T I N E =======================================
.text:00404260
.text:00404260
.text:00404260 sub_404260      proc near               ; CODE XREF: sub_403A80+4E9↑p
.text:00404260                                         ; .text:0040419A↑p ...
.text:00404260
.text:00404260 Block           = dword ptr -5Ch
.text:00404260 Src             = dword ptr -58h
.text:00404260 Size            = dword ptr -54h
.text:00404260 FileName        = dword ptr -50h
.text:00404260 var_48          = dword ptr -48h
.text:00404260 var_44          = dword ptr -44h
.text:00404260 var_40          = dword ptr -40h
.text:00404260 var_39          = byte ptr -39h
.text:00404260 var_38          = dword ptr -38h
.text:00404260 var_34          = dword ptr -34h
.text:00404260 var_2E          = byte ptr -2Eh
.text:00404260 var_2D          = byte ptr -2Dh
.text:00404260 var_2C          = dword ptr -2Ch
.text:00404260 var_28          = dword ptr -28h
.text:00404260 var_24          = dword ptr -24h
.text:00404260 var_20          = dword ptr -20h
.text:00404260 var_1C          = dword ptr -1Ch
.text:00404260 var_18          = dword ptr -18h
.text:00404260 var_14          = dword ptr -14h
.text:00404260 arg_0           = dword ptr  4
.text:00404260 arg_4           = dword ptr  8
.text:00404260
.text:00404260                 push    ebp
.text:00404261                 push    edi
.text:00404262                 push    esi
.text:00404263                 push    ebx
.text:00404264                 sub     esp, 4Ch
.text:00404267                 mov     ebp, [esp+5Ch+arg_0]
.text:0040426B                 mov     edx, [ebp+0]
.text:0040426E                 mov     ecx, [edx+14h]
.text:00404271                 mov     [esp+5Ch+var_1C], edx
.text:00404275                 mov     [esp+5Ch+Block], ecx ; LPCSTR
.text:00404278                 call    sub_40DA00
.text:0040427D                 mov     [esp+5Ch+var_24], eax
.text:00404281                 test    eax, eax
.text:00404283                 jz      loc_404895
.text:00404289                 cmp     [esp+5Ch+arg_4], 2
.text:0040428E                 jz      loc_404888
.text:00404294                 mov     edx, [ebp+2Ch]
.text:00404297                 mov     ebx, edx
.text:00404299                 and     ebx, 18h
.text:0040429C                 cmp     ebx, 18h
.text:0040429F                 jz      loc_404867
.text:004042A5                 mov     [esp+5Ch+var_38], 0FFFFFFFFh
.text:004042AD
.text:004042AD loc_4042AD:                             ; CODE XREF: sub_404260+630↓j
.text:004042AD                 mov     [esp+5Ch+var_39], 0
.text:004042B2
.text:004042B2 loc_4042B2:                             ; CODE XREF: sub_404260+623↓j
.text:004042B2                 mov     [esp+5Ch+var_2C], 0
.text:004042BA                 mov     eax, [esp+5Ch+var_38]
.text:004042BE                 test    eax, eax
.text:004042C0                 jnz     loc_4047E1
.text:004042C6                 cmp     [esp+5Ch+arg_4], 3
.text:004042CB                 mov     [esp+5Ch+var_2D], 0
.text:004042D0                 jz      loc_4047E1
.text:004042D6
.text:004042D6 loc_4042D6:                             ; CODE XREF: sub_404260+5AA↓j
.text:004042D6                                         ; sub_404260+5F2↓j
.text:004042D6                 mov     ecx, [esp+5Ch+var_1C]
.text:004042DA                 mov     eax, [esp+5Ch+var_1C]
.text:004042DE                 mov     edi, [ecx+24h]
.text:004042E1                 mov     esi, [eax+18h]
.text:004042E4                 mov     [esp+5Ch+var_40], edi
.text:004042E8                 mov     edx, [esp+5Ch+var_40]
.text:004042EC                 cmp     byte ptr [edx+esi-1], 2Fh ; '/'
.text:004042F1                 jz      loc_4047D7
.text:004042F7
.text:004042F7 loc_4042F7:                             ; CODE XREF: sub_404260+57C↓j
.text:004042F7                 test    byte ptr [ebp+2Ch], 4
.text:004042FB                 jz      loc_4047CA
.text:00404301                 mov     edx, [esp+5Ch+var_40]
.text:00404305                 mov     ebx, [ebp+18h]
.text:00404308                 add     edx, ebx
.text:0040430A                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040430D                 inc     edx
.text:0040430E                 mov     [esp+5Ch+var_48], edx
.text:00404312
.text:00404312 loc_404312:                             ; CODE XREF: sub_404260+572↓j
.text:00404312                 inc     [esp+5Ch+var_40]
.text:00404316                 mov     eax, [esp+5Ch+var_1C]
.text:0040431A                 mov     [esp+5Ch+var_2E], 0
.text:0040431F                 mov     edi, [ebp+20h]
.text:00404322                 mov     ecx, [esp+5Ch+var_40]
.text:00404326                 mov     [esp+5Ch+var_20], 0
.text:0040432E                 mov     esi, [eax+3Ch]
.text:00404331                 mov     [esp+5Ch+var_14], 0
.text:00404339                 sub     edi, ecx
.text:0040433B                 inc     esi
.text:0040433C                 mov     [esp+5Ch+var_44], edi
.text:00404340                 mov     [esp+5Ch+var_34], esi
.text:00404344                 mov     [esp+5Ch+var_18], 0
.text:0040434C                 lea     esi, [esi+0]
.text:00404350
.text:00404350 loc_404350:                             ; CODE XREF: sub_404260+2D1↓j
.text:00404350                                         ; sub_404260+430↓j ...
.text:00404350                 mov     esi, [esp+5Ch+var_24]
.text:00404354                 test    esi, esi
.text:00404356                 jz      loc_4046BC
.text:0040435C                 mov     edi, [esp+5Ch+var_24]
.text:00404360                 mov     [esp+5Ch+Block], edi
.text:00404363                 call    sub_40C590
.text:00404368                 test    eax, eax
.text:0040436A                 mov     edi, eax
.text:0040436C                 jz      loc_4046B0
.text:00404372                 test    byte ptr [ebp+2Ch], 20h
.text:00404376                 jnz     short loc_404382
.text:00404378                 cmp     byte ptr [edi+0Ch], 2Eh ; '.'
.text:0040437C                 jz      loc_40468C
.text:00404382
.text:00404382 loc_404382:                             ; CODE XREF: sub_404260+116↑j
.text:00404382                                         ; sub_404260+445↓j
.text:00404382                 lea     ebx, [edi+0Ch]
.text:00404385                 mov     ecx, ebx
.text:00404387                 mov     esi, ebx
.text:00404389                 lea     esi, [esi+0]
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_404260+145↓j
.text:00404390                 mov     eax, [ecx]
.text:00404392                 add     ecx, 4
.text:00404395                 lea     edx, [eax-1010101h]
.text:0040439B                 not     eax
.text:0040439D                 and     edx, eax
.text:0040439F                 and     edx, 80808080h
.text:004043A5                 jz      short loc_404390
.text:004043A7                 test    edx, 8080h
.text:004043AD                 jnz     short loc_4043B5
.text:004043AF                 shr     edx, 10h
.text:004043B2                 add     ecx, 2
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_404260+14D↑j
.text:004043B5                 mov     [esp+5Ch+Src], ebx ; void *
.text:004043B9                 add     dl, dl
.text:004043BB                 sbb     ecx, 3
.text:004043BE                 sub     ecx, esi
.text:004043C0                 mov     [esp+5Ch+Size], ecx ; size_t
.text:004043C4                 mov     [esp+5Ch+Block], ebp ; int
.text:004043C7                 call    sub_404AF0
.text:004043CC                 test    eax, eax
.text:004043CE                 mov     esi, eax
.text:004043D0                 jz      loc_404647
.text:004043D6                 mov     ecx, ebx
.text:004043D8                 nop
.text:004043D9                 lea     esi, [esi+0]
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_404260+195↓j
.text:004043E0                 mov     eax, [ecx]
.text:004043E2                 add     ecx, 4
.text:004043E5                 lea     edx, [eax-1010101h]
.text:004043EB                 not     eax
.text:004043ED                 and     edx, eax
.text:004043EF                 and     edx, 80808080h
.text:004043F5                 jz      short loc_4043E0
.text:004043F7                 test    edx, 8080h
.text:004043FD                 jnz     short loc_404405
.text:004043FF                 shr     edx, 10h
.text:00404402                 add     ecx, 2
.text:00404405
.text:00404405 loc_404405:                             ; CODE XREF: sub_404260+19D↑j
.text:00404405                 add     dl, dl
.text:00404407                 sbb     ecx, 3
.text:0040440A                 sub     ecx, ebx
.text:0040440C                 cmp     ecx, [esp+5Ch+var_44]
.text:00404410                 jb      loc_404493
.text:00404416                 mov     eax, [ebp+18h]
.text:00404419                 mov     ecx, ebx
.text:0040441B                 mov     [esp+5Ch+var_28], eax
.text:0040441F                 nop
.text:00404420
.text:00404420 loc_404420:                             ; CODE XREF: sub_404260+1D5↓j
.text:00404420                 mov     eax, [ecx]
.text:00404422                 add     ecx, 4
.text:00404425                 lea     edx, [eax-1010101h]
.text:0040442B                 not     eax
.text:0040442D                 and     edx, eax
.text:0040442F                 and     edx, 80808080h
.text:00404435                 jz      short loc_404420
.text:00404437                 test    edx, 8080h
.text:0040443D                 jnz     short loc_404445
.text:0040443F                 shr     edx, 10h
.text:00404442                 add     ecx, 2
.text:00404445
.text:00404445 loc_404445:                             ; CODE XREF: sub_404260+1DD↑j
.text:00404445                 mov     [esp+5Ch+Block], ebp
.text:00404448                 add     dl, dl
.text:0040444A                 mov     edx, [esp+5Ch+var_40]
.text:0040444E                 sbb     ecx, 3
.text:00404451                 sub     ecx, ebx
.text:00404453                 lea     eax, [edx+ecx+1]
.text:00404457                 mov     [esp+5Ch+Src], eax
.text:0040445B                 call    sub_404BB0
.text:00404460                 test    al, al
.text:00404462                 jz      loc_404647
.text:00404468                 mov     eax, [ebp+18h]
.text:0040446B                 cmp     [esp+5Ch+var_28], eax
.text:0040446F                 jz      short loc_404486
.text:00404471                 test    byte ptr [ebp+2Ch], 4
.text:00404475                 mov     [esp+5Ch+var_2E], 1
.text:0040447A                 jz      short loc_404486
.text:0040447C                 mov     ecx, [esp+5Ch+var_40]
.text:00404480                 add     eax, ecx
.text:00404482                 mov     [esp+5Ch+var_48], eax
.text:00404486
.text:00404486 loc_404486:                             ; CODE XREF: sub_404260+20F↑j
.text:00404486                                         ; sub_404260+21A↑j
.text:00404486                 mov     ecx, [ebp+20h]
.text:00404489                 mov     edx, [esp+5Ch+var_40]
.text:0040448D                 sub     ecx, edx
.text:0040448F                 mov     [esp+5Ch+var_44], ecx
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_404260+1B0↑j
.text:00404493                 mov     ecx, ebx
.text:00404495                 lea     esi, [esi+0]
.text:00404499                 lea     edi, [edi+0]
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_404260+255↓j
.text:004044A0                 mov     eax, [ecx]
.text:004044A2                 add     ecx, 4
.text:004044A5                 lea     edx, [eax-1010101h]
.text:004044AB                 not     eax
.text:004044AD                 and     edx, eax
.text:004044AF                 and     edx, 80808080h
.text:004044B5                 jz      short loc_4044A0
.text:004044B7                 test    edx, 8080h
.text:004044BD                 jnz     short loc_4044C5
.text:004044BF                 shr     edx, 10h
.text:004044C2                 add     ecx, 2
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_404260+25D↑j
.text:004044C5                 add     dl, dl
.text:004044C7                 mov     edx, [esp+5Ch+var_40]
.text:004044CB                 sbb     ecx, 3
.text:004044CE                 sub     ecx, ebx
.text:004044D0                 add     edx, ecx
.text:004044D2                 cmp     edx, [esp+5Ch+var_40]
.text:004044D6                 jb      loc_404601
.text:004044DC                 mov     [esi+24h], edx
.text:004044DF                 mov     ebx, [esp+5Ch+var_34]
.text:004044E3                 mov     ecx, [ebp+0]
.text:004044E6                 mov     [esi+3Ch], ebx
.text:004044E9                 mov     ebx, [esp+5Ch+var_2C]
.text:004044ED                 mov     [esi+4], ecx
.text:004044F0                 test    ebx, ebx
.text:004044F2                 jz      short loc_404548
.text:004044F4                 mov     edi, [esp+5Ch+var_38]
.text:004044F8                 test    edi, edi
.text:004044FA                 jz      short loc_404540
.text:004044FC                 mov     word ptr [esi+44h], 0Ah
.text:00404502                 mov     eax, [esp+5Ch+var_2C]
.text:00404506                 mov     [esi+1Ch], eax
.text:00404509
.text:00404509 loc_404509:                             ; CODE XREF: sub_404260+2E6↓j
.text:00404509                 mov     ebx, [esp+5Ch+var_1C]
.text:0040450D                 mov     ecx, [ebx+14h]
.text:00404510                 mov     [esi+14h], ecx
.text:00404513
.text:00404513 loc_404513:                             ; CODE XREF: sub_404260+315↓j
.text:00404513                                         ; sub_404260+34E↓j ...
.text:00404513                 mov     dword ptr [esi+8], 0
.text:0040451A                 mov     edx, [esp+5Ch+var_14]
.text:0040451E                 test    edx, edx
.text:00404520                 jz      short loc_404536
.text:00404522                 mov     eax, [esp+5Ch+var_20]
.text:00404526                 mov     [esp+5Ch+var_20], esi
.text:0040452A                 mov     [eax+8], esi
.text:0040452D
.text:0040452D loc_40452D:                             ; CODE XREF: sub_404260+2DE↓j
.text:0040452D                 inc     [esp+5Ch+var_18]
.text:00404531                 jmp     loc_404350
.text:00404536 ; ---------------------------------------------------------------------------
.text:00404536
.text:00404536 loc_404536:                             ; CODE XREF: sub_404260+2C0↑j
.text:00404536                 mov     [esp+5Ch+var_20], esi
.text:0040453A                 mov     [esp+5Ch+var_14], esi
.text:0040453E                 jmp     short loc_40452D
.text:00404540 ; ---------------------------------------------------------------------------
.text:00404540
.text:00404540 loc_404540:                             ; CODE XREF: sub_404260+29A↑j
.text:00404540                 mov     word ptr [esi+44h], 0Bh
.text:00404546                 jmp     short loc_404509
.text:00404548 ; ---------------------------------------------------------------------------
.text:00404548
.text:00404548 loc_404548:                             ; CODE XREF: sub_404260+292↑j
.text:00404548                 mov     edx, [esp+5Ch+var_38]
.text:0040454C                 test    edx, edx
.text:0040454E                 jz      short loc_404563
.text:00404550                 cmp     [esp+5Ch+var_39], 0
.text:00404555                 jz      short loc_40457F
.text:00404557                 movzx   eax, byte ptr [edi+0Ah]
.text:0040455B                 cmp     al, 4
.text:0040455D                 jz      short loc_40457F
.text:0040455F                 test    al, al
.text:00404561                 jz      short loc_40457F
.text:00404563
.text:00404563 loc_404563:                             ; CODE XREF: sub_404260+2EE↑j
.text:00404563                 test    byte ptr [ebp+2Ch], 4
.text:00404567                 jz      short loc_404577
.text:00404569                 mov     eax, [esi+18h]
.text:0040456C
.text:0040456C loc_40456C:                             ; CODE XREF: sub_404260+31D↓j
.text:0040456C                 mov     [esi+14h], eax
.text:0040456F                 mov     word ptr [esi+44h], 0Bh
.text:00404575                 jmp     short loc_404513
.text:00404577 ; ---------------------------------------------------------------------------
.text:00404577
.text:00404577 loc_404577:                             ; CODE XREF: sub_404260+307↑j
.text:00404577                 lea     eax, [esi+0B8h]
.text:0040457D                 jmp     short loc_40456C
.text:0040457F ; ---------------------------------------------------------------------------
.text:0040457F
.text:0040457F loc_40457F:                             ; CODE XREF: sub_404260+2F5↑j
.text:0040457F                                         ; sub_404260+2FD↑j ...
.text:0040457F                 test    byte ptr [ebp+2Ch], 4
.text:00404583                 jnz     short loc_4045DB
.text:00404585                 lea     edi, [esi+0B8h]
.text:0040458B                 mov     [esi+14h], edi
.text:0040458E
.text:0040458E loc_40458E:                             ; CODE XREF: sub_404260+39F↓j
.text:0040458E                 mov     [esp+5Ch+Size], 0
.text:00404596                 mov     [esp+5Ch+Src], esi
.text:0040459A                 mov     [esp+5Ch+Block], ebp
.text:0040459D                 call    sub_4048C0
.text:004045A2                 mov     [esi+44h], ax
.text:004045A6                 mov     ecx, [esp+5Ch+var_38]
.text:004045AA                 mov     edx, eax
.text:004045AC                 test    ecx, ecx
.text:004045AE                 jz      loc_404513
.text:004045B4                 cmp     [esp+5Ch+var_39], 0
.text:004045B9                 jz      loc_404513
.text:004045BF                 lea     ebx, [edx-1]
.text:004045C2                 cmp     bx, 1
.text:004045C6                 jbe     short loc_4045D2
.text:004045C8                 cmp     ax, 5
.text:004045CC                 jnz     loc_404513
.text:004045D2
.text:004045D2 loc_4045D2:                             ; CODE XREF: sub_404260+366↑j
.text:004045D2                 dec     [esp+5Ch+var_38]
.text:004045D6                 jmp     loc_404513
.text:004045DB ; ---------------------------------------------------------------------------
.text:004045DB
.text:004045DB loc_4045DB:                             ; CODE XREF: sub_404260+323↑j
.text:004045DB                 mov     edx, [esi+18h]
.text:004045DE                 lea     ecx, [esi+0B8h]
.text:004045E4                 mov     ebx, [esi+40h]
.text:004045E7                 mov     edi, [esp+5Ch+var_48]
.text:004045EB                 mov     [esi+14h], edx
.text:004045EE                 inc     ebx
.text:004045EF                 mov     [esp+5Ch+Size], ebx ; Size
.text:004045F3                 mov     [esp+5Ch+Src], ecx ; Src
.text:004045F7                 mov     [esp+5Ch+Block], edi ; void *
.text:004045FA                 call    memmove
.text:004045FF                 jmp     short loc_40458E
.text:00404601 ; ---------------------------------------------------------------------------
.text:00404601
.text:00404601 loc_404601:                             ; CODE XREF: sub_404260+276↑j
.text:00404601                 mov     [esp+5Ch+Block], esi ; Block
.text:00404604                 call    free
.text:00404609                 mov     edx, [esp+5Ch+var_14]
.text:0040460D                 mov     [esp+5Ch+Block], edx ; void *
.text:00404610                 call    sub_404B80
.text:00404615                 mov     esi, [esp+5Ch+var_24]
.text:00404619                 mov     [esp+5Ch+Block], esi ; void *
.text:0040461C                 call    sub_40D990
.text:00404621                 or      dword ptr [ebp+2Ch], 2000h
.text:00404628                 mov     ecx, [esp+5Ch+var_1C]
.text:0040462C                 mov     word ptr [ecx+44h], 7
.text:00404632                 call    _errno
.text:00404637                 mov     dword ptr [eax], 26h ; '&'
.text:0040463D
.text:0040463D loc_40463D:                             ; CODE XREF: sub_404260+42A↓j
.text:0040463D                                         ; sub_404260+4F6↓j ...
.text:0040463D                 xor     eax, eax
.text:0040463F
.text:0040463F loc_40463F:                             ; CODE XREF: sub_404260+4CE↓j
.text:0040463F                 add     esp, 4Ch
.text:00404642                 pop     ebx
.text:00404643                 pop     esi
.text:00404644                 pop     edi
.text:00404645                 pop     ebp
.text:00404646                 retn
.text:00404647 ; ---------------------------------------------------------------------------
.text:00404647
.text:00404647 loc_404647:                             ; CODE XREF: sub_404260+170↑j
.text:00404647                                         ; sub_404260+202↑j
.text:00404647                 call    _errno
.text:0040464C                 test    esi, esi
.text:0040464E                 mov     ebx, [eax]
.text:00404650                 jz      short loc_40465A
.text:00404652                 mov     [esp+5Ch+Block], esi ; Block
.text:00404655                 call    free
.text:0040465A
.text:0040465A loc_40465A:                             ; CODE XREF: sub_404260+3F0↑j
.text:0040465A                 mov     ecx, [esp+5Ch+var_14]
.text:0040465E                 mov     [esp+5Ch+Block], ecx ; void *
.text:00404661                 call    sub_404B80
.text:00404666                 mov     edi, [esp+5Ch+var_24]
.text:0040466A                 mov     [esp+5Ch+Block], edi ; void *
.text:0040466D                 call    sub_40D990
.text:00404672                 or      dword ptr [ebp+2Ch], 2000h
.text:00404679                 mov     esi, [esp+5Ch+var_1C]
.text:0040467D                 mov     word ptr [esi+44h], 7
.text:00404683                 call    _errno
.text:00404688                 mov     [eax], ebx
.text:0040468A                 jmp     short loc_40463D
.text:0040468C ; ---------------------------------------------------------------------------
.text:0040468C
.text:0040468C loc_40468C:                             ; CODE XREF: sub_404260+11C↑j
.text:0040468C                 cmp     byte ptr [edi+0Dh], 0
.text:00404690                 jz      loc_404350
.text:00404696                 mov     edx, [edi+0Ch]
.text:00404699                 and     edx, 0FFFF00h
.text:0040469F                 cmp     edx, 2E00h
.text:004046A5                 jnz     loc_404382
.text:004046AB                 jmp     loc_404350
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_404260+10C↑j
.text:004046B0                 mov     ecx, [esp+5Ch+var_24]
.text:004046B4                 mov     [esp+5Ch+Block], ecx ; void *
.text:004046B7                 call    sub_40D990
.text:004046BC
.text:004046BC loc_4046BC:                             ; CODE XREF: sub_404260+F6↑j
.text:004046BC                 cmp     [esp+5Ch+var_2E], 0
.text:004046C1                 jnz     loc_4047B5
.text:004046C7
.text:004046C7 loc_4046C7:                             ; CODE XREF: sub_404260+565↓j
.text:004046C7                 test    byte ptr [ebp+2Ch], 4
.text:004046CB                 jz      short loc_4046E9
.text:004046CD                 mov     eax, [esp+5Ch+var_40]
.text:004046D1                 cmp     eax, [ebp+20h]
.text:004046D4                 jz      short loc_4046DE
.text:004046D6                 mov     edx, [esp+5Ch+var_18]
.text:004046DA                 test    edx, edx
.text:004046DC                 jnz     short loc_4046E2
.text:004046DE
.text:004046DE loc_4046DE:                             ; CODE XREF: sub_404260+474↑j
.text:004046DE                 dec     [esp+5Ch+var_48]
.text:004046E2
.text:004046E2 loc_4046E2:                             ; CODE XREF: sub_404260+47C↑j
.text:004046E2                 mov     esi, [esp+5Ch+var_48]
.text:004046E6                 mov     byte ptr [esi], 0
.text:004046E9
.text:004046E9 loc_4046E9:                             ; CODE XREF: sub_404260+46B↑j
.text:004046E9                 cmp     [esp+5Ch+var_2D], 0
.text:004046EE                 jz      short loc_404714
.text:004046F0                 cmp     [esp+5Ch+arg_4], 1
.text:004046F5                 jz      short loc_4046FF
.text:004046F7                 mov     edi, [esp+5Ch+var_18]
.text:004046FB                 test    edi, edi
.text:004046FD                 jnz     short loc_40471C
.text:004046FF
.text:004046FF loc_4046FF:                             ; CODE XREF: sub_404260+495↑j
.text:004046FF                 mov     ebx, [esp+5Ch+var_1C]
.text:00404703                 mov     ecx, [ebx+3Ch]
.text:00404706                 test    ecx, ecx
.text:00404708                 jnz     loc_404790
.text:0040470E                 test    byte ptr [ebp+2Ch], 4
.text:00404712                 jz      short loc_40476B
.text:00404714
.text:00404714 loc_404714:                             ; CODE XREF: sub_404260+48E↑j
.text:00404714                                         ; sub_404260+518↓j
.text:00404714                 mov     ebx, [esp+5Ch+var_18]
.text:00404718                 test    ebx, ebx
.text:0040471A                 jz      short loc_404751
.text:0040471C
.text:0040471C loc_40471C:                             ; CODE XREF: sub_404260+49D↑j
.text:0040471C                 mov     eax, [ebp+28h]
.text:0040471F                 test    eax, eax
.text:00404721                 jz      short loc_40472A
.text:00404723                 cmp     [esp+5Ch+var_18], 1
.text:00404728                 ja      short loc_404733
.text:0040472A
.text:0040472A loc_40472A:                             ; CODE XREF: sub_404260+4C1↑j
.text:0040472A                                         ; sub_404260+4EF↓j
.text:0040472A                 mov     eax, [esp+5Ch+var_14]
.text:0040472E                 jmp     loc_40463F
.text:00404733 ; ---------------------------------------------------------------------------
.text:00404733
.text:00404733 loc_404733:                             ; CODE XREF: sub_404260+4C8↑j
.text:00404733                 mov     [esp+5Ch+Block], ebp ; int
.text:00404736                 mov     ebx, [esp+5Ch+var_18]
.text:0040473A                 mov     edi, [esp+5Ch+var_14]
.text:0040473E                 mov     [esp+5Ch+Size], ebx ; void *
.text:00404742                 mov     [esp+5Ch+Src], edi ; int
.text:00404746                 call    sub_404A10
.text:0040474B                 mov     [esp+5Ch+var_14], eax
.text:0040474F                 jmp     short loc_40472A
.text:00404751 ; ---------------------------------------------------------------------------
.text:00404751
.text:00404751 loc_404751:                             ; CODE XREF: sub_404260+4BA↑j
.text:00404751                 cmp     [esp+5Ch+arg_4], 3
.text:00404756                 jnz     loc_40463D
.text:0040475C                 mov     ebp, [esp+5Ch+var_1C]
.text:00404760                 mov     word ptr [ebp+44h], 6
.text:00404766                 jmp     loc_40463D
.text:0040476B ; ---------------------------------------------------------------------------
.text:0040476B
.text:0040476B loc_40476B:                             ; CODE XREF: sub_404260+4B2↑j
.text:0040476B                 mov     edx, [ebp+1Ch]
.text:0040476E                 mov     [esp+5Ch+Block], edx
.text:00404771                 call    sub_407110
.text:00404776
.text:00404776 loc_404776:                             ; CODE XREF: sub_404260+553↓j
.text:00404776                 test    eax, eax
.text:00404778                 jz      short loc_404714
.text:0040477A                 or      dword ptr [ebp+2Ch], 2000h
.text:00404781                 mov     edi, [esp+5Ch+var_1C]
.text:00404785                 mov     word ptr [edi+44h], 7
.text:0040478B                 jmp     loc_40463D
.text:00404790 ; ---------------------------------------------------------------------------
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_404260+4A8↑j
.text:00404790                 mov     [esp+5Ch+FileName], offset byte_403A73 ; FileName
.text:00404798                 mov     eax, [esp+5Ch+var_1C]
.text:0040479C                 mov     [esp+5Ch+Size], 0FFFFFFFFh ; int
.text:004047A4                 mov     esi, [eax+4]
.text:004047A7                 mov     [esp+5Ch+Block], ebp ; int
.text:004047AA                 mov     [esp+5Ch+Src], esi ; int
.text:004047AE                 call    sub_404CF0
.text:004047B3                 jmp     short loc_404776
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047B5
.text:004047B5 loc_4047B5:                             ; CODE XREF: sub_404260+461↑j
.text:004047B5                 mov     [esp+5Ch+Block], ebp
.text:004047B8                 mov     ebx, [esp+5Ch+var_14]
.text:004047BC                 mov     [esp+5Ch+Src], ebx
.text:004047C0                 call    sub_404C40
.text:004047C5                 jmp     loc_4046C7
.text:004047CA ; ---------------------------------------------------------------------------
.text:004047CA
.text:004047CA loc_4047CA:                             ; CODE XREF: sub_404260+9B↑j
.text:004047CA                 mov     [esp+5Ch+var_48], 0
.text:004047D2                 jmp     loc_404312
.text:004047D7 ; ---------------------------------------------------------------------------
.text:004047D7
.text:004047D7 loc_4047D7:                             ; CODE XREF: sub_404260+91↑j
.text:004047D7                 dec     edx
.text:004047D8                 mov     [esp+5Ch+var_40], edx
.text:004047DC                 jmp     loc_4042F7
.text:004047E1 ; ---------------------------------------------------------------------------
.text:004047E1
.text:004047E1 loc_4047E1:                             ; CODE XREF: sub_404260+60↑j
.text:004047E1                                         ; sub_404260+70↑j
.text:004047E1                 mov     [esp+5Ch+FileName], 0 ; FileName
.text:004047E9                 mov     edi, [esp+5Ch+var_24]
.text:004047ED                 mov     edx, [esp+5Ch+var_1C]
.text:004047F1                 mov     esi, [edi]
.text:004047F3                 mov     [esp+5Ch+Src], edx ; int
.text:004047F7                 mov     [esp+5Ch+Block], ebp ; int
.text:004047FA                 mov     [esp+5Ch+Size], esi ; int
.text:004047FE                 call    sub_404CF0
.text:00404803                 mov     [esp+5Ch+var_2D], 1
.text:00404808                 test    eax, eax
.text:0040480A                 jz      loc_4042D6
.text:00404810                 mov     ecx, [esp+5Ch+var_38]
.text:00404814                 test    ecx, ecx
.text:00404816                 jz      short loc_40481F
.text:00404818                 cmp     [esp+5Ch+arg_4], 3
.text:0040481D                 jz      short loc_404857
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: sub_404260+5B6↑j
.text:0040481F                                         ; sub_404260+605↓j
.text:0040481F                 mov     [esp+5Ch+var_2D], 0
.text:00404824                 mov     ecx, [esp+5Ch+var_1C]
.text:00404828                 movzx   ebx, word ptr [ecx+46h]
.text:0040482C                 or      ebx, 1
.text:0040482F                 mov     [ecx+46h], bx
.text:00404833                 call    _errno
.text:00404838                 mov     edi, [eax]
.text:0040483A                 mov     esi, [esp+5Ch+var_24]
.text:0040483E                 mov     [esp+5Ch+var_2C], edi
.text:00404842                 mov     [esp+5Ch+Block], esi ; void *
.text:00404845                 call    sub_40D990
.text:0040484A                 mov     [esp+5Ch+var_24], 0
.text:00404852                 jmp     loc_4042D6
.text:00404857 ; ---------------------------------------------------------------------------
.text:00404857
.text:00404857 loc_404857:                             ; CODE XREF: sub_404260+5BD↑j
.text:00404857                 call    _errno
.text:0040485C                 mov     edx, [eax]
.text:0040485E                 mov     ebx, [esp+5Ch+var_1C]
.text:00404862                 mov     [ebx+1Ch], edx
.text:00404865                 jmp     short loc_40481F
.text:00404867 ; ---------------------------------------------------------------------------
.text:00404867
.text:00404867 loc_404867:                             ; CODE XREF: sub_404260+3F↑j
.text:00404867                 mov     ecx, [esp+5Ch+var_1C]
.text:0040486B                 test    dl, 20h
.text:0040486E                 mov     eax, [ecx+38h]
.text:00404871                 mov     [esp+5Ch+var_38], eax
.text:00404875                 jnz     short loc_40487E
.text:00404877                 sub     eax, 2
.text:0040487A                 mov     [esp+5Ch+var_38], eax
.text:0040487E
.text:0040487E loc_40487E:                             ; CODE XREF: sub_404260+615↑j
.text:0040487E                 mov     [esp+5Ch+var_39], 1
.text:00404883                 jmp     loc_4042B2
.text:00404888 ; ---------------------------------------------------------------------------
.text:00404888
.text:00404888 loc_404888:                             ; CODE XREF: sub_404260+2E↑j
.text:00404888                 mov     [esp+5Ch+var_38], 0
.text:00404890                 jmp     loc_4042AD
.text:00404895 ; ---------------------------------------------------------------------------
.text:00404895
.text:00404895 loc_404895:                             ; CODE XREF: sub_404260+23↑j
.text:00404895                 cmp     [esp+5Ch+arg_4], 3
.text:0040489A                 jnz     loc_40463D
.text:004048A0                 mov     edi, [esp+5Ch+var_1C]
.text:004048A4                 mov     word ptr [edi+44h], 4
.text:004048AA                 call    _errno
.text:004048AF                 mov     esi, [eax]
.text:004048B1                 mov     ecx, [esp+5Ch+var_1C]
.text:004048B5                 mov     [ecx+1Ch], esi
.text:004048B8                 jmp     loc_40463D
.text:004048B8 sub_404260      endp
.text:004048B8
.text:004048B8 ; ---------------------------------------------------------------------------
.text:004048BD                 align 10h
.text:004048C0
.text:004048C0 ; =============== S U B R O U T I N E =======================================
.text:004048C0
.text:004048C0
.text:004048C0 sub_4048C0      proc near               ; CODE XREF: sub_403670+27C↑p
.text:004048C0                                         ; sub_403A80+100↑p ...
.text:004048C0
.text:004048C0 var_1C          = dword ptr -1Ch
.text:004048C0 var_18          = dword ptr -18h
.text:004048C0 var_C           = dword ptr -0Ch
.text:004048C0 var_8           = dword ptr -8
.text:004048C0 var_4           = dword ptr -4
.text:004048C0 arg_0           = dword ptr  4
.text:004048C0 arg_4           = dword ptr  8
.text:004048C0 arg_8           = byte ptr  0Ch
.text:004048C0
.text:004048C0                 sub     esp, 1Ch
.text:004048C3                 mov     ecx, [esp+1Ch+arg_0]
.text:004048C7                 mov     [esp+1Ch+var_C], ebx
.text:004048CB                 mov     [esp+1Ch+var_4], edi
.text:004048CF                 mov     edi, [esp+1Ch+arg_4]
.text:004048D3                 mov     [esp+1Ch+var_8], esi
.text:004048D7                 test    byte ptr [ecx+2Ch], 2
.text:004048DB                 lea     ebx, [edi+50h]
.text:004048DE                 movzx   edx, [esp+1Ch+arg_8]
.text:004048E3                 jnz     short loc_4048ED
.text:004048E5                 test    dl, dl
.text:004048E7                 jz      loc_4049E0
.text:004048ED
.text:004048ED loc_4048ED:                             ; CODE XREF: sub_4048C0+23↑j
.text:004048ED                 mov     [esp+1Ch+var_18], ebx ; int
.text:004048F1                 mov     edx, [edi+14h]
.text:004048F4                 mov     [esp+1Ch+var_1C], edx ; char *
.text:004048F7                 call    sub_40CBC0
.text:004048FC                 test    eax, eax
.text:004048FE                 jnz     loc_404992
.text:00404904
.text:00404904 loc_404904:                             ; CODE XREF: sub_4048C0+131↓j
.text:00404904                 mov     edx, [ebx]
.text:00404906                 and     edx, 0F000h
.text:0040490C                 cmp     edx, 4000h
.text:00404912                 jz      short loc_404940
.text:00404914                 cmp     edx, 0A000h
.text:0040491A                 mov     eax, 0Ch
.text:0040491F                 jz      short loc_404930
.text:00404921                 xor     ecx, ecx
.text:00404923                 cmp     edx, 8000h
.text:00404929                 setz    cl
.text:0040492C                 lea     eax, [ecx+ecx*4+3]
.text:00404930
.text:00404930 loc_404930:                             ; CODE XREF: sub_4048C0+5F↑j
.text:00404930                                         ; sub_4048C0+AC↓j ...
.text:00404930                 mov     ebx, [esp+1Ch+var_C]
.text:00404934                 mov     esi, [esp+1Ch+var_8]
.text:00404938                 mov     edi, [esp+1Ch+var_4]
.text:0040493C                 add     esp, 1Ch
.text:0040493F                 retn
.text:00404940 ; ---------------------------------------------------------------------------
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_4048C0+52↑j
.text:00404940                 cmp     byte ptr [edi+0B8h], 2Eh ; '.'
.text:00404947                 mov     esi, [ebx+10h]
.text:0040494A                 mov     ecx, [ebx+14h]
.text:0040494D                 mov     [edi+30h], esi
.text:00404950                 mov     [edi+34h], ecx
.text:00404953                 mov     edx, [ebx+8]
.text:00404956                 mov     esi, [ebx+0Ch]
.text:00404959                 mov     ecx, [ebx+18h]
.text:0040495C                 mov     [edi+28h], edx
.text:0040495F                 mov     [edi+2Ch], esi
.text:00404962                 mov     [edi+38h], ecx
.text:00404965                 jz      short loc_40496E
.text:00404967
.text:00404967 loc_404967:                             ; CODE XREF: sub_4048C0+C9↓j
.text:00404967                 mov     eax, 1
.text:0040496C                 jmp     short loc_404930
.text:0040496E ; ---------------------------------------------------------------------------
.text:0040496E
.text:0040496E loc_40496E:                             ; CODE XREF: sub_4048C0+A5↑j
.text:0040496E                 cmp     byte ptr [edi+0B9h], 0
.text:00404975                 jz      short loc_40498B
.text:00404977                 mov     ebx, [edi+0B8h]
.text:0040497D                 and     ebx, 0FFFF00h
.text:00404983                 cmp     ebx, 2E00h
.text:00404989                 jnz     short loc_404967
.text:0040498B
.text:0040498B loc_40498B:                             ; CODE XREF: sub_4048C0+B5↑j
.text:0040498B                 mov     eax, 5
.text:00404990                 jmp     short loc_404930
.text:00404992 ; ---------------------------------------------------------------------------
.text:00404992
.text:00404992 loc_404992:                             ; CODE XREF: sub_4048C0+3E↑j
.text:00404992                 call    _errno
.text:00404997                 mov     esi, [eax]
.text:00404999                 mov     [esp+1Ch+var_18], ebx
.text:0040499D                 mov     ecx, [edi+14h]
.text:004049A0                 mov     [esp+1Ch+var_1C], ecx
.text:004049A3                 call    sub_40BC90
.text:004049A8                 test    eax, eax
.text:004049AA                 jz      short loc_4049C5
.text:004049AC                 mov     [edi+1Ch], esi
.text:004049AF
.text:004049AF loc_4049AF:                             ; CODE XREF: sub_4048C0+141↓j
.text:004049AF                 cld
.text:004049B0                 xor     eax, eax
.text:004049B2                 mov     ecx, 1Ah
.text:004049B7                 mov     edi, ebx
.text:004049B9                 rep stosd
.text:004049BB                 mov     eax, 0Ah
.text:004049C0                 jmp     loc_404930
.text:004049C5 ; ---------------------------------------------------------------------------
.text:004049C5
.text:004049C5 loc_4049C5:                             ; CODE XREF: sub_4048C0+EA↑j
.text:004049C5                 call    _errno
.text:004049CA                 mov     dword ptr [eax], 0
.text:004049D0                 mov     eax, 0Dh
.text:004049D5                 jmp     loc_404930
.text:004049D5 ; ---------------------------------------------------------------------------
.text:004049DA                 align 10h
.text:004049E0
.text:004049E0 loc_4049E0:                             ; CODE XREF: sub_4048C0+27↑j
.text:004049E0                 mov     [esp+1Ch+var_18], ebx
.text:004049E4                 mov     esi, [edi+14h]
.text:004049E7                 mov     [esp+1Ch+var_1C], esi
.text:004049EA                 call    sub_40BC90
.text:004049EF                 test    eax, eax
.text:004049F1                 jz      loc_404904
.text:004049F7                 call    _errno
.text:004049FC                 mov     edx, [eax]
.text:004049FE                 mov     [edi+1Ch], edx
.text:00404A01                 jmp     short loc_4049AF
.text:00404A01 sub_4048C0      endp
.text:00404A01
.text:00404A01 ; ---------------------------------------------------------------------------
.text:00404A03                 align 10h
.text:00404A10
.text:00404A10 ; =============== S U B R O U T I N E =======================================
.text:00404A10
.text:00404A10
.text:00404A10 ; int __cdecl sub_404A10(int, int, void *)
.text:00404A10 sub_404A10      proc near               ; CODE XREF: sub_403670+21A↑p
.text:00404A10                                         ; sub_404260+4E6↑p
.text:00404A10
.text:00404A10 Block           = dword ptr -1Ch
.text:00404A10 Size            = dword ptr -18h
.text:00404A10 var_14          = dword ptr -14h
.text:00404A10 var_10          = dword ptr -10h
.text:00404A10 arg_0           = dword ptr  4
.text:00404A10 arg_4           = dword ptr  8
.text:00404A10 arg_8           = dword ptr  0Ch
.text:00404A10
.text:00404A10                 push    edi
.text:00404A11                 push    esi
.text:00404A12                 push    ebx
.text:00404A13                 sub     esp, 10h
.text:00404A16                 mov     edi, [esp+1Ch+arg_0]
.text:00404A1A                 mov     ebx, [esp+1Ch+arg_8]
.text:00404A1E                 mov     esi, [esp+1Ch+arg_4]
.text:00404A22                 cmp     ebx, [edi+24h]
.text:00404A25                 jbe     short loc_404A60
.text:00404A27                 lea     eax, [ebx+28h]
.text:00404A2A                 cmp     eax, 3FFFFFFFh
.text:00404A2F                 mov     [edi+24h], eax
.text:00404A32                 ja      loc_404AD2
.text:00404A38                 shl     eax, 2
.text:00404A3B                 mov     [esp+1Ch+Size], eax ; Size
.text:00404A3F                 mov     edx, [edi+8]
.text:00404A42                 mov     [esp+1Ch+Block], edx ; Block
.text:00404A45                 call    realloc
.text:00404A4A                 test    eax, eax
.text:00404A4C                 jz      loc_404AD2
.text:00404A52                 mov     [edi+8], eax
.text:00404A55                 lea     esi, [esi+0]
.text:00404A59                 lea     edi, [edi+0]
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_404A10+15↑j
.text:00404A60                 mov     edx, [edi+8]
.text:00404A63                 test    esi, esi
.text:00404A65                 mov     eax, esi
.text:00404A67                 mov     ecx, edx
.text:00404A69                 jz      short loc_404A7C
.text:00404A6B                 nop
.text:00404A6C                 lea     esi, [esi+0]
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: sub_404A10+6A↓j
.text:00404A70                 mov     [edx], eax
.text:00404A72                 mov     eax, [eax+8]
.text:00404A75                 add     edx, 4
.text:00404A78                 test    eax, eax
.text:00404A7A                 jnz     short loc_404A70
.text:00404A7C
.text:00404A7C loc_404A7C:                             ; CODE XREF: sub_404A10+59↑j
.text:00404A7C                 mov     esi, [edi+28h]
.text:00404A7F                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404A83                 mov     [esp+1Ch+Block], ecx ; Block
.text:00404A86                 mov     [esp+1Ch+var_10], esi ; int
.text:00404A8A                 mov     [esp+1Ch+var_14], 4 ; size_t
.text:00404A92                 call    sub_40D810
.text:00404A97                 mov     edx, [edi+8]
.text:00404A9A                 dec     ebx
.text:00404A9B                 mov     esi, [edx]
.text:00404A9D                 mov     ecx, esi
.text:00404A9F                 jz      short loc_404AC2
.text:00404AA1                 jmp     short loc_404AB0
.text:00404AA1 ; ---------------------------------------------------------------------------
.text:00404AA3                 align 10h
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_404A10+91↑j
.text:00404AB0                                         ; sub_404A10+AE↓j
.text:00404AB0                 mov     edi, [edx+4]
.text:00404AB3                 add     edx, 4
.text:00404AB6                 dec     ebx
.text:00404AB7                 mov     [ecx+8], edi
.text:00404ABA                 jz      short loc_404AC0
.text:00404ABC                 mov     ecx, [edx]
.text:00404ABE                 jmp     short loc_404AB0
.text:00404AC0 ; ---------------------------------------------------------------------------
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_404A10+AA↑j
.text:00404AC0                 mov     ecx, [edx]
.text:00404AC2
.text:00404AC2 loc_404AC2:                             ; CODE XREF: sub_404A10+8F↑j
.text:00404AC2                 mov     dword ptr [ecx+8], 0
.text:00404AC9
.text:00404AC9 loc_404AC9:                             ; CODE XREF: sub_404A10+DB↓j
.text:00404AC9                 add     esp, 10h
.text:00404ACC                 mov     eax, esi
.text:00404ACE                 pop     ebx
.text:00404ACF                 pop     esi
.text:00404AD0                 pop     edi
.text:00404AD1                 retn
.text:00404AD2 ; ---------------------------------------------------------------------------
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_404A10+22↑j
.text:00404AD2                                         ; sub_404A10+3C↑j
.text:00404AD2                 mov     edx, [edi+8]
.text:00404AD5                 mov     [esp+1Ch+Block], edx ; Block
.text:00404AD8                 call    free
.text:00404ADD                 mov     dword ptr [edi+8], 0
.text:00404AE4                 mov     dword ptr [edi+24h], 0
.text:00404AEB                 jmp     short loc_404AC9
.text:00404AEB sub_404A10      endp
.text:00404AEB
.text:00404AEB ; ---------------------------------------------------------------------------
.text:00404AED                 align 10h
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0
.text:00404AF0 ; int __cdecl sub_404AF0(int, void *, size_t)
.text:00404AF0 sub_404AF0      proc near               ; CODE XREF: sub_403670+9D↑p
.text:00404AF0                                         ; sub_403670+F4↑p ...
.text:00404AF0
.text:00404AF0 Size            = dword ptr -1Ch
.text:00404AF0 Src             = dword ptr -18h
.text:00404AF0 var_14          = dword ptr -14h
.text:00404AF0 var_8           = dword ptr -8
.text:00404AF0 var_4           = dword ptr -4
.text:00404AF0 arg_0           = dword ptr  4
.text:00404AF0 arg_4           = dword ptr  8
.text:00404AF0 arg_8           = dword ptr  0Ch
.text:00404AF0
.text:00404AF0                 sub     esp, 1Ch
.text:00404AF3                 mov     [esp+1Ch+var_4], esi
.text:00404AF7                 mov     esi, [esp+1Ch+arg_8]
.text:00404AFB                 mov     [esp+1Ch+var_8], ebx
.text:00404AFF                 lea     edx, [esi+0C0h]
.text:00404B05                 mov     [esp+1Ch+Size], edx ; Size
.text:00404B08                 call    malloc
.text:00404B0D                 mov     ebx, eax
.text:00404B0F                 xor     eax, eax
.text:00404B11                 test    ebx, ebx
.text:00404B13                 jz      short loc_404B68
.text:00404B15                 mov     [esp+1Ch+var_14], esi ; Size
.text:00404B19                 mov     edx, [esp+1Ch+arg_4]
.text:00404B1D                 lea     ecx, [ebx+0B8h]
.text:00404B23                 mov     [esp+1Ch+Size], ecx ; void *
.text:00404B26                 mov     [esp+1Ch+Src], edx ; Src
.text:00404B2A                 call    memmove
.text:00404B2F                 mov     [ebx+40h], esi
.text:00404B32                 mov     ecx, [esp+1Ch+arg_0]
.text:00404B36                 xor     edx, edx
.text:00404B38                 mov     [esi+ebx+0B8h], dl
.text:00404B3F                 mov     eax, ebx
.text:00404B41                 mov     dword ptr [ebx+1Ch], 0
.text:00404B48                 mov     edx, [ecx+18h]
.text:00404B4B                 mov     word ptr [ebx+46h], 0
.text:00404B51                 mov     word ptr [ebx+48h], 3
.text:00404B57                 mov     [ebx+18h], edx
.text:00404B5A                 mov     dword ptr [ebx+0Ch], 0
.text:00404B61                 mov     dword ptr [ebx+10h], 0
.text:00404B68
.text:00404B68 loc_404B68:                             ; CODE XREF: sub_404AF0+23↑j
.text:00404B68                 mov     ebx, [esp+1Ch+var_8]
.text:00404B6C                 mov     esi, [esp+1Ch+var_4]
.text:00404B70                 add     esp, 1Ch
.text:00404B73                 retn
.text:00404B73 sub_404AF0      endp
.text:00404B73
.text:00404B73 ; ---------------------------------------------------------------------------
.text:00404B74                 align 10h
.text:00404B80
.text:00404B80 ; =============== S U B R O U T I N E =======================================
.text:00404B80
.text:00404B80
.text:00404B80 ; int __cdecl sub_404B80(void *)
.text:00404B80 sub_404B80      proc near               ; CODE XREF: sub_403670+1BA↑p
.text:00404B80                                         ; sub_403980+E9↑p ...
.text:00404B80
.text:00404B80 Block           = dword ptr -0Ch
.text:00404B80 arg_0           = dword ptr  4
.text:00404B80
.text:00404B80                 push    ebx
.text:00404B81                 sub     esp, 8
.text:00404B84                 mov     ebx, [esp+0Ch+arg_0]
.text:00404B88                 test    ebx, ebx
.text:00404B8A                 mov     eax, ebx
.text:00404B8C                 jz      short loc_404BA1
.text:00404B8E                 mov     esi, esi
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404B80+1F↓j
.text:00404B90                 mov     ebx, [ebx+8]
.text:00404B93                 mov     [esp+0Ch+Block], eax ; Block
.text:00404B96                 call    free
.text:00404B9B                 test    ebx, ebx
.text:00404B9D                 mov     eax, ebx
.text:00404B9F                 jnz     short loc_404B90
.text:00404BA1
.text:00404BA1 loc_404BA1:                             ; CODE XREF: sub_404B80+C↑j
.text:00404BA1                 add     esp, 8
.text:00404BA4                 pop     ebx
.text:00404BA5                 retn
.text:00404BA5 sub_404B80      endp
.text:00404BA5
.text:00404BA5 ; ---------------------------------------------------------------------------
.text:00404BA6                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0
.text:00404BB0 sub_404BB0      proc near               ; CODE XREF: sub_403670+7D↑p
.text:00404BB0                                         ; sub_404260+1FB↑p
.text:00404BB0
.text:00404BB0 Block           = dword ptr -0Ch
.text:00404BB0 Size            = dword ptr -8
.text:00404BB0 var_4           = dword ptr -4
.text:00404BB0 arg_0           = dword ptr  4
.text:00404BB0 arg_4           = dword ptr  8
.text:00404BB0
.text:00404BB0                 sub     esp, 0Ch
.text:00404BB3                 mov     ecx, [esp+0Ch+arg_4]
.text:00404BB7                 mov     [esp+0Ch+var_4], ebx
.text:00404BBB                 mov     ebx, [esp+0Ch+arg_0]
.text:00404BBF                 mov     edx, [ebx+20h]
.text:00404BC2                 mov     eax, edx
.text:00404BC4                 add     eax, ecx
.text:00404BC6                 add     eax, 100h
.text:00404BCB                 cmp     eax, edx
.text:00404BCD                 jnb     short loc_404C03
.text:00404BCF                 mov     eax, [ebx+18h]
.text:00404BD2                 test    eax, eax
.text:00404BD4                 jnz     short loc_404BF2
.text:00404BD6
.text:00404BD6 loc_404BD6:                             ; CODE XREF: sub_404BB0+51↓j
.text:00404BD6                 mov     dword ptr [ebx+18h], 0
.text:00404BDD                 call    _errno
.text:00404BE2                 mov     dword ptr [eax], 26h ; '&'
.text:00404BE8
.text:00404BE8 loc_404BE8:                             ; CODE XREF: sub_404BB0+85↓j
.text:00404BE8                 xor     eax, eax
.text:00404BEA
.text:00404BEA loc_404BEA:                             ; CODE XREF: sub_404BB0+71↓j
.text:00404BEA                 mov     ebx, [esp+0Ch+var_4]
.text:00404BEE                 add     esp, 0Ch
.text:00404BF1                 retn
.text:00404BF2 ; ---------------------------------------------------------------------------
.text:00404BF2
.text:00404BF2 loc_404BF2:                             ; CODE XREF: sub_404BB0+24↑j
.text:00404BF2                 mov     [esp+0Ch+Block], eax ; Block
.text:00404BF5                 call    free
.text:00404BFA                 mov     dword ptr [ebx+18h], 0
.text:00404C01                 jmp     short loc_404BD6
.text:00404C03 ; ---------------------------------------------------------------------------
.text:00404C03
.text:00404C03 loc_404C03:                             ; CODE XREF: sub_404BB0+1D↑j
.text:00404C03                 mov     [ebx+20h], eax
.text:00404C06                 mov     [esp+0Ch+Size], eax ; Size
.text:00404C0A                 mov     edx, [ebx+18h]
.text:00404C0D                 mov     [esp+0Ch+Block], edx ; Block
.text:00404C10                 call    realloc
.text:00404C15                 test    eax, eax
.text:00404C17                 jz      short loc_404C23
.text:00404C19                 mov     [ebx+18h], eax
.text:00404C1C                 mov     eax, 1
.text:00404C21                 jmp     short loc_404BEA
.text:00404C23 ; ---------------------------------------------------------------------------
.text:00404C23
.text:00404C23 loc_404C23:                             ; CODE XREF: sub_404BB0+67↑j
.text:00404C23                 mov     edx, [ebx+18h]
.text:00404C26                 mov     [esp+0Ch+Block], edx ; Block
.text:00404C29                 call    free
.text:00404C2E                 mov     dword ptr [ebx+18h], 0
.text:00404C35                 jmp     short loc_404BE8
.text:00404C35 sub_404BB0      endp
.text:00404C35
.text:00404C35 ; ---------------------------------------------------------------------------
.text:00404C37                 align 10h
.text:00404C40
.text:00404C40 ; =============== S U B R O U T I N E =======================================
.text:00404C40
.text:00404C40
.text:00404C40 sub_404C40      proc near               ; CODE XREF: sub_404260+560↑p
.text:00404C40
.text:00404C40 arg_0           = dword ptr  4
.text:00404C40 arg_4           = dword ptr  8
.text:00404C40
.text:00404C40                 push    ebx
.text:00404C41                 mov     ecx, [esp+4+arg_0]
.text:00404C45                 mov     edx, [ecx+4]
.text:00404C48                 mov     ebx, [ecx+18h]
.text:00404C4B                 test    edx, edx
.text:00404C4D                 jz      short loc_404C72
.text:00404C4F                 nop
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: sub_404C40+30↓j
.text:00404C50                 mov     ecx, [edx+14h]
.text:00404C53                 lea     eax, [edx+0B8h]
.text:00404C59                 cmp     ecx, eax
.text:00404C5B                 jz      short loc_404C68
.text:00404C5D                 mov     eax, [edx+18h]
.text:00404C60                 sub     ecx, eax
.text:00404C62                 lea     eax, [ecx+ebx]
.text:00404C65                 mov     [edx+14h], eax
.text:00404C68
.text:00404C68 loc_404C68:                             ; CODE XREF: sub_404C40+1B↑j
.text:00404C68                 mov     [edx+18h], ebx
.text:00404C6B                 mov     edx, [edx+8]
.text:00404C6E                 test    edx, edx
.text:00404C70                 jnz     short loc_404C50
.text:00404C72
.text:00404C72 loc_404C72:                             ; CODE XREF: sub_404C40+D↑j
.text:00404C72                 mov     edx, [esp+4+arg_4]
.text:00404C76                 mov     ecx, [edx+3Ch]
.text:00404C79                 test    ecx, ecx
.text:00404C7B                 js      short loc_404CAE
.text:00404C7D                 lea     esi, [esi+0]
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_404C40+6C↓j
.text:00404C80                 mov     ecx, [edx+14h]
.text:00404C83                 lea     eax, [edx+0B8h]
.text:00404C89                 cmp     ecx, eax
.text:00404C8B                 jz      short loc_404C98
.text:00404C8D                 mov     eax, [edx+18h]
.text:00404C90                 sub     ecx, eax
.text:00404C92                 lea     eax, [ecx+ebx]
.text:00404C95                 mov     [edx+14h], eax
.text:00404C98
.text:00404C98 loc_404C98:                             ; CODE XREF: sub_404C40+4B↑j
.text:00404C98                 mov     [edx+18h], ebx
.text:00404C9B                 mov     eax, [edx+8]
.text:00404C9E                 test    eax, eax
.text:00404CA0                 jnz     short loc_404CA5
.text:00404CA2                 mov     eax, [edx+4]
.text:00404CA5
.text:00404CA5 loc_404CA5:                             ; CODE XREF: sub_404C40+60↑j
.text:00404CA5                 mov     ecx, [eax+3Ch]
.text:00404CA8                 mov     edx, eax
.text:00404CAA                 test    ecx, ecx
.text:00404CAC                 jns     short loc_404C80
.text:00404CAE
.text:00404CAE loc_404CAE:                             ; CODE XREF: sub_404C40+3B↑j
.text:00404CAE                 pop     ebx
.text:00404CAF                 retn
.text:00404CAF sub_404C40      endp
.text:00404CAF
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0
.text:00404CB0 sub_404CB0      proc near               ; CODE XREF: sub_403670+61↑p
.text:00404CB0                                         ; sub_403670+2F3↑p
.text:00404CB0
.text:00404CB0 Str             = dword ptr -0Ch
.text:00404CB0 arg_0           = dword ptr  4
.text:00404CB0
.text:00404CB0                 push    esi
.text:00404CB1                 xor     esi, esi
.text:00404CB3                 push    ebx
.text:00404CB4                 sub     esp, 4
.text:00404CB7                 mov     ebx, [esp+0Ch+arg_0]
.text:00404CBB                 mov     eax, [ebx]
.text:00404CBD                 test    eax, eax
.text:00404CBF                 jnz     short loc_404CC8
.text:00404CC1
.text:00404CC1 loc_404CC1:                             ; CODE XREF: sub_404CB0+2F↓j
.text:00404CC1                 pop     edx
.text:00404CC2                 lea     eax, [esi+1]
.text:00404CC5                 pop     ebx
.text:00404CC6                 pop     esi
.text:00404CC7                 retn
.text:00404CC8 ; ---------------------------------------------------------------------------
.text:00404CC8
.text:00404CC8 loc_404CC8:                             ; CODE XREF: sub_404CB0+F↑j
.text:00404CC8                                         ; sub_404CB0+2D↓j
.text:00404CC8                 mov     [esp+0Ch+Str], eax ; Str
.text:00404CCB                 call    strlen
.text:00404CD0                 cmp     eax, esi
.text:00404CD2                 jbe     short loc_404CD6
.text:00404CD4                 mov     esi, eax
.text:00404CD6
.text:00404CD6 loc_404CD6:                             ; CODE XREF: sub_404CB0+22↑j
.text:00404CD6                 add     ebx, 4
.text:00404CD9                 mov     eax, [ebx]
.text:00404CDB                 test    eax, eax
.text:00404CDD                 jnz     short loc_404CC8
.text:00404CDF                 jmp     short loc_404CC1
.text:00404CDF sub_404CB0      endp
.text:00404CDF
.text:00404CE1 ; ---------------------------------------------------------------------------
.text:00404CE1                 jmp     short sub_404CF0
.text:00404CE1 ; ---------------------------------------------------------------------------
.text:00404CE3                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0
.text:00404CF0 ; int __cdecl sub_404CF0(int, int, int, char *FileName)
.text:00404CF0 sub_404CF0      proc near               ; CODE XREF: sub_403A80+3B7↑p
.text:00404CF0                                         ; sub_403A80+546↑p ...
.text:00404CF0
.text:00404CF0 FileHandle      = dword ptr -9Ch
.text:00404CF0 OpenFlag        = dword ptr -98h
.text:00404CF0 var_8C          = byte ptr -8Ch
.text:00404CF0 var_84          = dword ptr -84h
.text:00404CF0 var_80          = dword ptr -80h
.text:00404CF0 var_7C          = dword ptr -7Ch
.text:00404CF0 var_78          = dword ptr -78h
.text:00404CF0 var_10          = dword ptr -10h
.text:00404CF0 var_C           = dword ptr -0Ch
.text:00404CF0 var_8           = dword ptr -8
.text:00404CF0 var_4           = dword ptr -4
.text:00404CF0 arg_0           = dword ptr  4
.text:00404CF0 arg_4           = dword ptr  8
.text:00404CF0 arg_8           = dword ptr  0Ch
.text:00404CF0 FileName        = dword ptr  10h
.text:00404CF0
.text:00404CF0                 sub     esp, 9Ch
.text:00404CF6                 mov     edx, [esp+9Ch+arg_0]
.text:00404CFD                 mov     [esp+9Ch+var_C], esi
.text:00404D04                 mov     esi, [esp+9Ch+FileName]
.text:00404D0B                 mov     [esp+9Ch+var_8], edi
.text:00404D12                 mov     [esp+9Ch+var_4], ebp
.text:00404D19                 mov     ebp, [esp+9Ch+arg_8]
.text:00404D20                 mov     [esp+9Ch+var_10], ebx
.text:00404D27                 test    byte ptr [edx+2Ch], 4
.text:00404D2B                 mov     edi, ebp
.text:00404D2D                 jz      short loc_404D54
.text:00404D2F                 xor     eax, eax
.text:00404D31
.text:00404D31 loc_404D31:                             ; CODE XREF: sub_404CF0+E7↓j
.text:00404D31                                         ; sub_404CF0+125↓j
.text:00404D31                 mov     ebx, [esp+9Ch+var_10]
.text:00404D38                 mov     esi, [esp+9Ch+var_C]
.text:00404D3F                 mov     edi, [esp+9Ch+var_8]
.text:00404D46                 mov     ebp, [esp+9Ch+var_4]
.text:00404D4D                 add     esp, 9Ch
.text:00404D53                 retn
.text:00404D54 ; ---------------------------------------------------------------------------
.text:00404D54
.text:00404D54 loc_404D54:                             ; CODE XREF: sub_404CF0+3D↑j
.text:00404D54                 test    ebp, ebp
.text:00404D56                 js      loc_404DF2
.text:00404D5C
.text:00404D5C loc_404D5C:                             ; CODE XREF: sub_404CF0+11F↓j
.text:00404D5C                 mov     [esp+9Ch+FileHandle], edi
.text:00404D5F                 lea     edx, [esp+9Ch+var_8C]
.text:00404D63                 mov     ebx, 0FFFFFFFFh
.text:00404D68                 mov     [esp+9Ch+OpenFlag], edx
.text:00404D6C                 call    sub_409E40
.text:00404D71                 test    eax, eax
.text:00404D73                 jnz     short loc_404DC3
.text:00404D75                 mov     esi, [esp+9Ch+arg_4]
.text:00404D7C                 mov     eax, [esp+9Ch+var_7C]
.text:00404D80                 mov     edx, [esp+9Ch+var_78]
.text:00404D84                 mov     ebx, [esi+34h]
.text:00404D87                 mov     ecx, [esi+30h]
.text:00404D8A                 mov     esi, ebx
.text:00404D8C                 xor     esi, edx
.text:00404D8E                 xor     eax, ecx
.text:00404D90                 or      esi, eax
.text:00404D92                 jnz     short loc_404DB3
.text:00404D94                 mov     edx, [esp+9Ch+arg_4]
.text:00404D9B                 mov     eax, [esp+9Ch+var_84]
.text:00404D9F                 mov     ebx, [edx+2Ch]
.text:00404DA2                 mov     ecx, [edx+28h]
.text:00404DA5                 mov     edx, [esp+9Ch+var_80]
.text:00404DA9                 mov     esi, ebx
.text:00404DAB                 xor     eax, ecx
.text:00404DAD                 xor     esi, edx
.text:00404DAF                 or      esi, eax
.text:00404DB1                 jz      short loc_404DE6
.text:00404DB3
.text:00404DB3 loc_404DB3:                             ; CODE XREF: sub_404CF0+A2↑j
.text:00404DB3                 call    _errno
.text:00404DB8                 mov     dword ptr [eax], 2
.text:00404DBE                 mov     ebx, 0FFFFFFFFh
.text:00404DC3
.text:00404DC3 loc_404DC3:                             ; CODE XREF: sub_404CF0+83↑j
.text:00404DC3                                         ; sub_404CF0+100↓j
.text:00404DC3                 call    _errno
.text:00404DC8                 test    ebp, ebp
.text:00404DCA                 mov     esi, [eax]
.text:00404DCC                 js      short loc_404DDC
.text:00404DCE
.text:00404DCE loc_404DCE:                             ; CODE XREF: sub_404CF0+F4↓j
.text:00404DCE                 call    _errno
.text:00404DD3                 mov     [eax], esi
.text:00404DD5                 mov     eax, ebx
.text:00404DD7                 jmp     loc_404D31
.text:00404DDC ; ---------------------------------------------------------------------------
.text:00404DDC
.text:00404DDC loc_404DDC:                             ; CODE XREF: sub_404CF0+DC↑j
.text:00404DDC                 mov     [esp+9Ch+FileHandle], edi ; FileHandle
.text:00404DDF                 call    _close
.text:00404DE4                 jmp     short loc_404DCE
.text:00404DE6 ; ---------------------------------------------------------------------------
.text:00404DE6
.text:00404DE6 loc_404DE6:                             ; CODE XREF: sub_404CF0+C1↑j
.text:00404DE6                 mov     [esp+9Ch+FileHandle], edi
.text:00404DE9                 call    sub_407110
.text:00404DEE                 mov     ebx, eax
.text:00404DF0                 jmp     short loc_404DC3
.text:00404DF2 ; ---------------------------------------------------------------------------
.text:00404DF2
.text:00404DF2 loc_404DF2:                             ; CODE XREF: sub_404CF0+66↑j
.text:00404DF2                 mov     [esp+9Ch+OpenFlag], 0 ; OpenFlag
.text:00404DFA                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:00404DFD                 call    _open
.text:00404E02                 test    eax, eax
.text:00404E04                 js      short loc_404E1A
.text:00404E06
.text:00404E06 loc_404E06:                             ; CODE XREF: sub_404CF0+13A↓j
.text:00404E06                 mov     edi, eax
.text:00404E08                 test    edi, edi
.text:00404E0A                 mov     eax, 0FFFFFFFFh
.text:00404E0F                 jns     loc_404D5C
.text:00404E15                 jmp     loc_404D31
.text:00404E1A ; ---------------------------------------------------------------------------
.text:00404E1A
.text:00404E1A loc_404E1A:                             ; CODE XREF: sub_404CF0+114↑j
.text:00404E1A                 mov     [esp+9Ch+OpenFlag], 1 ; OpenFlag
.text:00404E22                 mov     [esp+9Ch+FileHandle], esi ; FileName
.text:00404E25                 call    _open
.text:00404E2A                 jmp     short loc_404E06
.text:00404E2A sub_404CF0      endp
.text:00404E2A
.text:00404E2A ; ---------------------------------------------------------------------------
.text:00404E2C                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30
.text:00404E30 sub_404E30      proc near               ; CODE XREF: sub_402B60+346↑p
.text:00404E30
.text:00404E30 arg_4           = dword ptr  8
.text:00404E30 arg_8           = dword ptr  0Ch
.text:00404E30
.text:00404E30                 sub     esp, 0Ch
.text:00404E33                 mov     edx, [esp+0Ch+arg_8]
.text:00404E37                 cmp     edx, 4
.text:00404E3A                 ja      short loc_404E50
.text:00404E3C                 mov     ecx, [esp+0Ch+arg_4]
.text:00404E40                 xor     eax, eax
.text:00404E42                 mov     [ecx+48h], dx
.text:00404E46
.text:00404E46 loc_404E46:                             ; CODE XREF: sub_404E30+30↓j
.text:00404E46                 add     esp, 0Ch
.text:00404E49                 retn
.text:00404E49 ; ---------------------------------------------------------------------------
.text:00404E4A                 align 10h
.text:00404E50
.text:00404E50 loc_404E50:                             ; CODE XREF: sub_404E30+A↑j
.text:00404E50                 call    _errno
.text:00404E55                 mov     dword ptr [eax], 16h
.text:00404E5B                 mov     eax, 1
.text:00404E60                 jmp     short loc_404E46
.text:00404E60 sub_404E30      endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E62                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70
.text:00404E70 sub_404E70      proc near               ; DATA XREF: sub_403670+124↑o
.text:00404E70
.text:00404E70 var_11          = byte ptr -11h
.text:00404E70 var_10          = dword ptr -10h
.text:00404E70 var_C           = dword ptr -0Ch
.text:00404E70 var_8           = dword ptr -8
.text:00404E70 var_4           = dword ptr -4
.text:00404E70 arg_0           = dword ptr  4
.text:00404E70 arg_4           = dword ptr  8
.text:00404E70
.text:00404E70                 sub     esp, 14h
.text:00404E73                 mov     [esp+14h+var_8], edi
.text:00404E77                 mov     edi, [esp+14h+arg_0]
.text:00404E7B                 mov     [esp+14h+var_4], ebp
.text:00404E7F                 mov     ebp, [esp+14h+arg_4]
.text:00404E83                 mov     [esp+14h+var_C], esi
.text:00404E87                 mov     [esp+14h+var_10], ebx
.text:00404E8B                 mov     ebx, [edi+0Ch]
.text:00404E8E                 mov     [esp+14h+var_11], 0
.text:00404E93                 mov     ecx, [edi+8]
.text:00404E96                 mov     eax, [ebp+8]
.text:00404E99                 mov     edx, [ebp+0Ch]
.text:00404E9C                 mov     esi, ebx
.text:00404E9E                 xor     eax, ecx
.text:00404EA0                 xor     esi, edx
.text:00404EA2                 or      esi, eax
.text:00404EA4                 jnz     short loc_404EC0
.text:00404EA6                 mov     edx, [edi+4]
.text:00404EA9                 mov     esi, [edi]
.text:00404EAB                 mov     ecx, [ebp+4]
.text:00404EAE                 mov     edi, [ebp+0]
.text:00404EB1                 mov     eax, edx
.text:00404EB3                 xor     eax, ecx
.text:00404EB5                 xor     edi, esi
.text:00404EB7                 or      eax, edi
.text:00404EB9                 jnz     short loc_404EC0
.text:00404EBB                 mov     [esp+14h+var_11], 1
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_404E70+34↑j
.text:00404EC0                                         ; sub_404E70+49↑j
.text:00404EC0                 movzx   eax, [esp+14h+var_11]
.text:00404EC5                 mov     ebx, [esp+14h+var_10]
.text:00404EC9                 mov     esi, [esp+14h+var_C]
.text:00404ECD                 mov     edi, [esp+14h+var_8]
.text:00404ED1                 mov     ebp, [esp+14h+var_4]
.text:00404ED5                 add     esp, 14h
.text:00404ED8                 retn
.text:00404ED8 sub_404E70      endp
.text:00404ED8
.text:00404ED8 ; ---------------------------------------------------------------------------
.text:00404ED9                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0
.text:00404EE0 sub_404EE0      proc near               ; DATA XREF: sub_403670+12C↑o
.text:00404EE0
.text:00404EE0 var_1C          = dword ptr -1Ch
.text:00404EE0 var_18          = dword ptr -18h
.text:00404EE0 var_14          = dword ptr -14h
.text:00404EE0 var_10          = dword ptr -10h
.text:00404EE0 arg_0           = dword ptr  4
.text:00404EE0 arg_4           = dword ptr  8
.text:00404EE0
.text:00404EE0                 sub     esp, 1Ch
.text:00404EE3                 mov     ecx, [esp+1Ch+arg_0]
.text:00404EE7                 mov     edx, [ecx+0Ch]
.text:00404EEA                 mov     eax, [ecx+8]
.text:00404EED                 mov     ecx, [esp+1Ch+arg_4]
.text:00404EF1                 mov     [esp+1Ch+var_10], 0
.text:00404EF9                 mov     [esp+1Ch+var_1C], eax
.text:00404EFC                 mov     [esp+1Ch+var_14], ecx
.text:00404F00                 mov     [esp+1Ch+var_18], edx
.text:00404F04                 call    sub_412EB0
.text:00404F09                 add     esp, 1Ch
.text:00404F0C                 retn
.text:00404F0C sub_404EE0      endp
.text:00404F0C
.text:00404F0C ; ---------------------------------------------------------------------------
.text:00404F0D                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10
.text:00404F10 ; int __cdecl sub_404F10(void *Block, int)
.text:00404F10 sub_404F10      proc near               ; CODE XREF: sub_403A80+E3↑p
.text:00404F10                                         ; sub_403A80+228↑p ...
.text:00404F10
.text:00404F10 Size            = dword ptr -1Ch
.text:00404F10 var_18          = dword ptr -18h
.text:00404F10 var_10          = dword ptr -10h
.text:00404F10 var_C           = dword ptr -0Ch
.text:00404F10 var_8           = dword ptr -8
.text:00404F10 var_4           = dword ptr -4
.text:00404F10 Block           = dword ptr  4
.text:00404F10 arg_4           = dword ptr  8
.text:00404F10
.text:00404F10                 sub     esp, 1Ch
.text:00404F13                 mov     [esp+1Ch+var_C], esi
.text:00404F17                 mov     esi, [esp+1Ch+Block]
.text:00404F1B                 mov     [esp+1Ch+var_8], edi
.text:00404F1F                 mov     edi, [esp+1Ch+arg_4]
.text:00404F23                 mov     [esp+1Ch+var_10], ebx
.text:00404F27                 mov     [esp+1Ch+var_4], ebp
.text:00404F2B                 mov     eax, [esi+30h]
.text:00404F2E                 test    eax, eax
.text:00404F30                 jnz     short loc_404F70
.text:00404F32                 mov     edx, [esi+34h]
.text:00404F35                 test    edx, edx
.text:00404F37                 jnz     short loc_404F50
.text:00404F39
.text:00404F39 loc_404F39:                             ; CODE XREF: sub_404F10+51↓j
.text:00404F39                                         ; sub_404F10+5B↓j ...
.text:00404F39                 mov     ebx, [esp+1Ch+var_10]
.text:00404F3D                 mov     esi, [esp+1Ch+var_C]
.text:00404F41                 mov     edi, [esp+1Ch+var_8]
.text:00404F45                 mov     ebp, [esp+1Ch+var_4]
.text:00404F49                 add     esp, 1Ch
.text:00404F4C                 retn
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F4D                 align 10h
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: sub_404F10+27↑j
.text:00404F50                 mov     [esp+1Ch+Size], edx
.text:00404F53                 lea     ebp, [edi+50h]
.text:00404F56                 mov     [esp+1Ch+var_18], ebp
.text:00404F5A                 call    sub_4071A0
.text:00404F5F                 test    al, al
.text:00404F61                 jz      short loc_404F39
.text:00404F63                 mov     [edi], edi
.text:00404F65                 mov     word ptr [edi+44h], 2
.text:00404F6B                 jmp     short loc_404F39
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6D                 align 10h
.text:00404F70
.text:00404F70 loc_404F70:                             ; CODE XREF: sub_404F10+20↑j
.text:00404F70                 mov     [esp+1Ch+Size], 18h ; Size
.text:00404F77                 lea     ebp, [edi+50h]
.text:00404F7A                 call    malloc
.text:00404F7F                 test    eax, eax
.text:00404F81                 mov     ebx, eax
.text:00404F83                 jz      short loc_404FDD
.text:00404F85                 mov     [eax+10h], edi
.text:00404F88                 mov     edx, [ebp+10h]
.text:00404F8B                 mov     ecx, [ebp+14h]
.text:00404F8E                 mov     [eax], edx
.text:00404F90                 mov     [eax+4], ecx
.text:00404F93                 mov     edx, [ebp+8]
.text:00404F96                 mov     ecx, [ebp+0Ch]
.text:00404F99                 mov     [eax+8], edx
.text:00404F9C                 mov     [eax+0Ch], ecx
.text:00404F9F                 mov     [esp+1Ch+var_18], eax
.text:00404FA3                 mov     edx, [esi+30h]
.text:00404FA6                 mov     [esp+1Ch+Size], edx
.text:00404FA9                 call    sub_407810
.text:00404FAE                 test    eax, eax
.text:00404FB0                 jz      short loc_404FDD
.text:00404FB2                 cmp     eax, ebx
.text:00404FB4                 jz      short loc_404F39
.text:00404FB6                 mov     word ptr [edi+44h], 2
.text:00404FBC                 mov     esi, [eax+10h]
.text:00404FBF                 mov     [edi], esi
.text:00404FC1                 mov     esi, [esp+1Ch+var_C]
.text:00404FC5                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404FC9                 mov     edi, [esp+1Ch+var_8]
.text:00404FCD                 mov     ebx, [esp+1Ch+var_10]
.text:00404FD1                 mov     ebp, [esp+1Ch+var_4]
.text:00404FD5                 add     esp, 1Ch
.text:00404FD8                 jmp     free
.text:00404FDD ; ---------------------------------------------------------------------------
.text:00404FDD
.text:00404FDD loc_404FDD:                             ; CODE XREF: sub_404F10+73↑j
.text:00404FDD                                         ; sub_404F10+A0↑j
.text:00404FDD                 mov     ebx, [esi+30h]
.text:00404FE0                 mov     [esp+1Ch+Size], ebx ; void *
.text:00404FE3                 call    sub_4075A0
.text:00404FE8                 mov     dword ptr [esi+30h], 0
.text:00404FEF                 jmp     loc_404F39
.text:00404FEF sub_404F10      endp
.text:00404FEF
.text:00404FEF ; ---------------------------------------------------------------------------
.text:00404FF4                 align 10h
.text:00405000 dword_405000    dd 0B48D002Fh, 26h, 27BC8D00h, 0
.text:00405000                                         ; DATA XREF: sub_405010+1C↓o
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010
.text:00405010 sub_405010      proc near               ; CODE XREF: sub_401E90+5B4↑p
.text:00405010
.text:00405010 var_8C          = dword ptr -8Ch
.text:00405010 var_88          = dword ptr -88h
.text:00405010 var_7C          = byte ptr -7Ch
.text:00405010 var_74          = dword ptr -74h
.text:00405010 var_70          = dword ptr -70h
.text:00405010 var_6C          = dword ptr -6Ch
.text:00405010 var_68          = dword ptr -68h
.text:00405010 var_4           = dword ptr -4
.text:00405010 arg_0           = dword ptr  4
.text:00405010
.text:00405010                 sub     esp, 8Ch
.text:00405016                 lea     edx, [esp+8Ch+var_7C]
.text:0040501A                 mov     [esp+8Ch+var_4], ebx
.text:00405021                 mov     ebx, [esp+8Ch+arg_0]
.text:00405028                 mov     [esp+8Ch+var_88], edx
.text:0040502C                 mov     [esp+8Ch+var_8C], offset dword_405000
.text:00405033                 call    sub_40BC90
.text:00405038                 xor     edx, edx
.text:0040503A                 test    eax, eax
.text:0040503C                 jnz     short loc_40505B
.text:0040503E                 mov     edx, [esp+8Ch+var_74]
.text:00405042                 mov     ecx, [esp+8Ch+var_70]
.text:00405046                 mov     [ebx], edx
.text:00405048                 mov     [ebx+4], ecx
.text:0040504B                 mov     edx, [esp+8Ch+var_6C]
.text:0040504F                 mov     ecx, [esp+8Ch+var_68]
.text:00405053                 mov     [ebx+8], edx
.text:00405056                 mov     edx, ebx
.text:00405058                 mov     [ebx+0Ch], ecx
.text:0040505B
.text:0040505B loc_40505B:                             ; CODE XREF: sub_405010+2C↑j
.text:0040505B                 mov     ebx, [esp+8Ch+var_4]
.text:00405062                 mov     eax, edx
.text:00405064                 add     esp, 8Ch
.text:0040506A                 retn
.text:0040506A sub_405010      endp
.text:0040506A
.text:0040506A ; ---------------------------------------------------------------------------
.text:0040506B                 align 10h
.text:00405070 ; const char byte_405070
.text:00405070 byte_405070     db 0                    ; DATA XREF: sub_405090+64↓o
.text:00405071 aInvalidArgumen db 'invalid argument: %s',0
.text:00405071                                         ; DATA XREF: sub_405090+70↓o
.text:00405086                 align 10h
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090
.text:00405090 sub_405090      proc near               ; CODE XREF: sub_402910+38↑p
.text:00405090
.text:00405090 Code            = dword ptr -1Ch
.text:00405090 ErrorMessage    = dword ptr -18h
.text:00405090 var_14          = dword ptr -14h
.text:00405090 var_10          = byte ptr -10h
.text:00405090 var_8           = dword ptr -8
.text:00405090 var_4           = dword ptr -4
.text:00405090 arg_0           = dword ptr  4
.text:00405090 arg_4           = dword ptr  8
.text:00405090 arg_8           = dword ptr  0Ch
.text:00405090
.text:00405090                 sub     esp, 1Ch
.text:00405093                 mov     edx, [esp+1Ch+arg_8]
.text:00405097                 mov     [esp+1Ch+var_8], ebx
.text:0040509B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040509F                 mov     [esp+1Ch+var_14], edx
.text:004050A3                 mov     edx, [esp+1Ch+arg_4]
.text:004050A7                 mov     [esp+1Ch+var_4], esi
.text:004050AB                 mov     [esp+1Ch+Code], ebx
.text:004050AE                 mov     [esp+1Ch+ErrorMessage], edx
.text:004050B2                 call    sub_403670
.text:004050B7                 test    eax, eax
.text:004050B9                 mov     esi, eax
.text:004050BB                 jz      short loc_4050D0
.text:004050BD
.text:004050BD loc_4050BD:                             ; CODE XREF: sub_405090+9B↓j
.text:004050BD                 mov     eax, esi
.text:004050BF                 mov     ebx, [esp+1Ch+var_8]
.text:004050C3                 mov     esi, [esp+1Ch+var_4]
.text:004050C7                 add     esp, 1Ch
.text:004050CA                 retn
.text:004050CA ; ---------------------------------------------------------------------------
.text:004050CB                 align 10h
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: sub_405090+2B↑j
.text:004050D0                 mov     eax, [ebx]
.text:004050D2                 xor     edx, edx
.text:004050D4                 test    eax, eax
.text:004050D6                 jz      short loc_40512D
.text:004050D8                 nop
.text:004050D9                 lea     esi, [esi+0]
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_405090+5E↓j
.text:004050E0                 cmp     byte ptr [eax], 0
.text:004050E3                 jnz     short loc_4050E7
.text:004050E5                 mov     dl, 1
.text:004050E7
.text:004050E7 loc_4050E7:                             ; CODE XREF: sub_405090+53↑j
.text:004050E7                 add     ebx, 4
.text:004050EA                 mov     eax, [ebx]
.text:004050EC                 test    eax, eax
.text:004050EE                 jnz     short loc_4050E0
.text:004050F0                 test    dl, dl
.text:004050F2                 jz      short loc_40512D
.text:004050F4                 mov     [esp+1Ch+Code], offset byte_405070 ; char *
.text:004050FB                 call    sub_4067B0
.text:00405100                 mov     [esp+1Ch+Code], offset aInvalidArgumen ; "invalid argument: %s"
.text:00405107                 mov     ebx, eax
.text:00405109                 call    ds:libintl_gettext
.text:0040510F                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00405113                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040511B                 mov     [esp+1Ch+Code], 1 ; Code
.text:00405122                 mov     [esp+1Ch+var_14], eax ; char *
.text:00405126                 call    sub_409BA0
.text:0040512B                 jmp     short loc_4050BD
.text:0040512D ; ---------------------------------------------------------------------------
.text:0040512D
.text:0040512D loc_40512D:                             ; CODE XREF: sub_405090+46↑j
.text:0040512D                                         ; sub_405090+62↑j
.text:0040512D                 call    sub_408190
.text:0040512D sub_405090      endp
.text:0040512D
.text:0040512D ; ---------------------------------------------------------------------------
.text:00405132                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140
.text:00405140 ; int __cdecl sub_405140(char *, int, int)
.text:00405140 sub_405140      proc near               ; CODE XREF: sub_402B60+42B↑p
.text:00405140
.text:00405140 FileName        = dword ptr -9Ch
.text:00405140 OpenFlag        = dword ptr -98h
.text:00405140 var_94          = dword ptr -94h
.text:00405140 var_8C          = dword ptr -8Ch
.text:00405140 var_70          = dword ptr -70h
.text:00405140 var_6C          = dword ptr -6Ch
.text:00405140 var_10          = dword ptr -10h
.text:00405140 var_C           = dword ptr -0Ch
.text:00405140 var_8           = dword ptr -8
.text:00405140 var_4           = dword ptr -4
.text:00405140 arg_0           = dword ptr  4
.text:00405140 arg_4           = dword ptr  8
.text:00405140 arg_8           = dword ptr  0Ch
.text:00405140
.text:00405140                 sub     esp, 9Ch
.text:00405146                 mov     [esp+9Ch+var_10], ebx
.text:0040514D                 mov     ebx, [esp+9Ch+arg_8]
.text:00405154                 mov     [esp+9Ch+var_8], edi
.text:0040515B                 mov     edi, [esp+9Ch+arg_4]
.text:00405162                 cmp     ebx, 0FFFFFFFFh
.text:00405165                 mov     [esp+9Ch+var_4], ebp
.text:0040516C                 mov     ebp, [esp+9Ch+arg_0]
.text:00405173                 mov     [esp+9Ch+var_C], esi
.text:0040517A                 jz      loc_405220
.text:00405180                 cmp     edi, 0FFFFFFFFh
.text:00405183                 jz      loc_405220
.text:00405189
.text:00405189 loc_405189:                             ; CODE XREF: sub_405140+101↓j
.text:00405189                                         ; sub_405140+10B↓j
.text:00405189                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:00405191                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00405194                 call    _open
.text:00405199                 test    eax, eax
.text:0040519B                 mov     esi, eax
.text:0040519D                 js      short loc_405200
.text:0040519F
.text:0040519F loc_40519F:                             ; CODE XREF: sub_405140+D9↓j
.text:0040519F                 mov     [esp+9Ch+var_94], ebx
.text:004051A3                 mov     [esp+9Ch+OpenFlag], edi
.text:004051A7                 mov     [esp+9Ch+FileName], esi
.text:004051AA                 call    sub_40D560
.text:004051AF                 test    eax, eax
.text:004051B1                 jnz     short loc_4051E2
.text:004051B3                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:004051B6                 call    _close
.text:004051BB                 mov     edx, eax
.text:004051BD
.text:004051BD loc_4051BD:                             ; CODE XREF: sub_405140+BD↓j
.text:004051BD                                         ; sub_405140+DB↓j ...
.text:004051BD                 mov     ebx, [esp+9Ch+var_10]
.text:004051C4                 mov     eax, edx
.text:004051C6                 mov     esi, [esp+9Ch+var_C]
.text:004051CD                 mov     edi, [esp+9Ch+var_8]
.text:004051D4                 mov     ebp, [esp+9Ch+var_4]
.text:004051DB                 add     esp, 9Ch
.text:004051E1                 retn
.text:004051E2 ; ---------------------------------------------------------------------------
.text:004051E2
.text:004051E2 loc_4051E2:                             ; CODE XREF: sub_405140+71↑j
.text:004051E2                 call    _errno
.text:004051E7                 mov     edi, [eax]
.text:004051E9                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:004051EC                 call    _close
.text:004051F1                 call    _errno
.text:004051F6                 mov     [eax], edi
.text:004051F8                 mov     edx, 0FFFFFFFFh
.text:004051FD                 jmp     short loc_4051BD
.text:004051FD ; ---------------------------------------------------------------------------
.text:004051FF                 align 10h
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_405140+5D↑j
.text:00405200                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00405208                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:0040520B                 call    _open
.text:00405210                 test    eax, eax
.text:00405212                 mov     esi, eax
.text:00405214                 mov     edx, 0FFFFFFFFh
.text:00405219                 jns     short loc_40519F
.text:0040521B                 jmp     short loc_4051BD
.text:0040521B ; ---------------------------------------------------------------------------
.text:0040521D                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_405140+3A↑j
.text:00405220                                         ; sub_405140+43↑j
.text:00405220                 mov     [esp+9Ch+FileName], ebp ; char *
.text:00405223                 lea     edx, [esp+9Ch+var_8C]
.text:00405227                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:0040522B                 call    sub_40CBC0
.text:00405230                 test    eax, eax
.text:00405232                 mov     edx, 1
.text:00405237                 jnz     short loc_4051BD
.text:00405239                 cmp     ebx, 0FFFFFFFFh
.text:0040523C                 jz      short loc_405250
.text:0040523E
.text:0040523E loc_40523E:                             ; CODE XREF: sub_405140+114↓j
.text:0040523E                 cmp     edi, 0FFFFFFFFh
.text:00405241                 jnz     loc_405189
.text:00405247                 mov     edi, [esp+9Ch+var_70]
.text:0040524B                 jmp     loc_405189
.text:00405250 ; ---------------------------------------------------------------------------
.text:00405250
.text:00405250 loc_405250:                             ; CODE XREF: sub_405140+FC↑j
.text:00405250                 mov     ebx, [esp+9Ch+var_6C]
.text:00405254                 jmp     short loc_40523E
.text:00405254 sub_405140      endp
.text:00405254
.text:00405254 ; ---------------------------------------------------------------------------
.text:00405256                 align 10h
.text:00405260 dword_405260    dd 90002D2Dh, 7 dup(90909090h)
.text:00405260                                         ; DATA XREF: sub_4054B0+E4↓o
.text:00405280 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405280                                         ; DATA XREF: sub_4054B0+2FC↓o
.text:004052AD                 align 20h
.text:004052C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004052C0                                         ; DATA XREF: sub_4054B0:loc_405812↓o
.text:004052ED                 align 20h
.text:00405300 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00405300                                         ; DATA XREF: sub_4054B0:loc_4058B0↓o
.text:00405300                                         ; sub_4054B0:loc_405C77↓o
.text:00405326                 align 20h
.text:00405340 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00405340                                         ; DATA XREF: sub_4054B0+48E↓o
.text:00405360 dword_405360    dd 90909000h, 7 dup(90909090h)
.text:00405360                                         ; DATA XREF: sub_4054B0:loc_405981↓o
.text:00405380 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00405380                                         ; DATA XREF: sub_4054B0:loc_40599A↓o
.text:004053A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004053A0                                         ; DATA XREF: sub_4054B0:loc_405A7F↓o
.text:004053A0                                         ; sub_4054B0:loc_405DAC↓o
.text:004053C7                 align 20h
.text:004053E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004053E0                                         ; DATA XREF: sub_4054B0:loc_405BF3↓o
.text:0040540E                 align 20h
.text:00405420 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00405420                                         ; DATA XREF: sub_4054B0:loc_405CDF↓o
.text:00405441 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00405441                                         ; DATA XREF: sub_4054B0+93F↓o
.text:0040545B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040545B                                         ; DATA XREF: sub_4054B0:loc_405E27↓o
.text:00405475 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00405475                                         ; DATA XREF: sub_4054B0:loc_405E4E↓o
.text:00405493 ; const char VarName[]
.text:00405493 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4054B0:loc_406000↓o
.text:004054A3                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0
.text:004054B0 ; int __cdecl sub_4054B0(int, int, char *Str, int, int, int, int, int)
.text:004054B0 sub_4054B0      proc near               ; CODE XREF: sub_406040+5A↓p
.text:004054B0                                         ; .text:0040612A↓p ...
.text:004054B0
.text:004054B0 Str1            = dword ptr -5Ch
.text:004054B0 Str2            = dword ptr -58h
.text:004054B0 MaxCount        = dword ptr -54h
.text:004054B0 var_50          = dword ptr -50h
.text:004054B0 var_4C          = dword ptr -4Ch
.text:004054B0 var_3C          = dword ptr -3Ch
.text:004054B0 var_38          = dword ptr -38h
.text:004054B0 var_34          = dword ptr -34h
.text:004054B0 var_30          = dword ptr -30h
.text:004054B0 var_2C          = dword ptr -2Ch
.text:004054B0 var_28          = dword ptr -28h
.text:004054B0 var_24          = dword ptr -24h
.text:004054B0 var_20          = dword ptr -20h
.text:004054B0 var_1C          = dword ptr -1Ch
.text:004054B0 var_18          = dword ptr -18h
.text:004054B0 var_14          = dword ptr -14h
.text:004054B0 arg_0           = dword ptr  4
.text:004054B0 arg_4           = dword ptr  8
.text:004054B0 Str             = dword ptr  0Ch
.text:004054B0 arg_C           = dword ptr  10h
.text:004054B0 arg_10          = dword ptr  14h
.text:004054B0 arg_14          = dword ptr  18h
.text:004054B0 arg_18          = dword ptr  1Ch
.text:004054B0 arg_1C          = dword ptr  20h
.text:004054B0
.text:004054B0                 push    ebp
.text:004054B1                 mov     eax, 0FFFFFFFFh
.text:004054B6                 push    edi
.text:004054B7                 push    esi
.text:004054B8                 push    ebx
.text:004054B9                 sub     esp, 4Ch
.text:004054BC                 mov     esi, [esp+5Ch+Str]
.text:004054C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004054C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004054C7                 mov     ebx, [ebp+4]
.text:004054CA                 setz    dl
.text:004054CD                 movzx   ecx, dl
.text:004054D0                 dec     ecx
.text:004054D1                 and     ecx, ebx
.text:004054D3                 mov     [esp+5Ch+var_14], ecx
.text:004054D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004054DB                 test    ecx, ecx
.text:004054DD                 jle     loc_405607
.text:004054E3                 mov     dword ptr [ebp+0Ch], 0
.text:004054EA                 mov     ebx, [ebp+0]
.text:004054ED                 test    ebx, ebx
.text:004054EF                 jz      loc_406020
.text:004054F5                 mov     edi, [ebp+10h]
.text:004054F8                 test    edi, edi
.text:004054FA                 jnz     short loc_405553
.text:004054FC                 lea     esi, [esi+0]
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_4054B0+B7C↓j
.text:00405500                 mov     [ebp+24h], ebx
.text:00405503                 mov     esi, [esp+5Ch+Str]
.text:00405507                 mov     [ebp+20h], ebx
.text:0040550A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040550E                 xor     ebx, ebx
.text:00405510                 mov     dword ptr [ebp+14h], 0
.text:00405517                 test    ecx, ecx
.text:00405519                 jz      loc_406000
.text:0040551F
.text:0040551F loc_40551F:                             ; CODE XREF: sub_4054B0+B64↓j
.text:0040551F                 mov     ebx, 1
.text:00405524
.text:00405524 loc_405524:                             ; CODE XREF: sub_4054B0+B5E↓j
.text:00405524                 mov     [ebp+1Ch], ebx
.text:00405527                 mov     ecx, [esp+5Ch+Str]
.text:0040552B                 movzx   eax, byte ptr [ecx]
.text:0040552E                 cmp     al, 2Dh ; '-'
.text:00405530                 jz      loc_405FF0
.text:00405536                 cmp     al, 2Bh ; '+'
.text:00405538                 jz      loc_405FD9
.text:0040553E                 xor     edx, edx
.text:00405540                 test    ebx, ebx
.text:00405542                 setz    dl
.text:00405545                 mov     [ebp+18h], edx
.text:00405548
.text:00405548 loc_405548:                             ; CODE XREF: sub_4054B0+B35↓j
.text:00405548                 mov     [esp+5Ch+Str], esi
.text:0040554C                 mov     dword ptr [ebp+10h], 1
.text:00405553
.text:00405553 loc_405553:                             ; CODE XREF: sub_4054B0+4A↑j
.text:00405553                 mov     eax, [ebp+14h]
.text:00405556                 test    eax, eax
.text:00405558                 jz      short loc_405563
.text:0040555A                 cmp     byte ptr [eax], 0
.text:0040555D                 jnz     loc_405640
.text:00405563
.text:00405563 loc_405563:                             ; CODE XREF: sub_4054B0+A8↑j
.text:00405563                 mov     ebx, [ebp+0]
.text:00405566                 cmp     [ebp+24h], ebx
.text:00405569                 jle     short loc_40556E
.text:0040556B                 mov     [ebp+24h], ebx
.text:0040556E
.text:0040556E loc_40556E:                             ; CODE XREF: sub_4054B0+B9↑j
.text:0040556E                 cmp     [ebp+20h], ebx
.text:00405571                 jle     short loc_405576
.text:00405573                 mov     [ebp+20h], ebx
.text:00405576
.text:00405576 loc_405576:                             ; CODE XREF: sub_4054B0+C1↑j
.text:00405576                 cmp     dword ptr [ebp+18h], 1
.text:0040557A                 jz      loc_405F50
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_4054B0+B13↓j
.text:00405580                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405584                 jz      loc_405F34
.text:0040558A                 cld
.text:0040558B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040558F                 mov     edx, 3
.text:00405594                 mov     edi, offset dword_405260
.text:00405599                 mov     esi, [ecx+ebx*4]
.text:0040559C                 mov     ecx, edx
.text:0040559E                 repe cmpsb
.text:004055A0                 jnz     short loc_4055DC
.text:004055A2                 mov     edx, [ebp+24h]
.text:004055A5                 lea     eax, [ebx+1]
.text:004055A8                 cmp     [ebp+20h], edx
.text:004055AB                 mov     [ebp+0], eax
.text:004055AE                 jz      loc_405F48
.text:004055B4                 cmp     edx, eax
.text:004055B6                 jz      short loc_4055D0
.text:004055B8                 mov     [esp+5Ch+Str2], ebp
.text:004055BC                 mov     ebx, [esp+5Ch+arg_4]
.text:004055C0                 mov     [esp+5Ch+Str1], ebx
.text:004055C3                 call    sub_406160
.text:004055C8                 nop
.text:004055C9                 lea     esi, [esi+0]
.text:004055D0
.text:004055D0 loc_4055D0:                             ; CODE XREF: sub_4054B0+106↑j
.text:004055D0                                         ; sub_4054B0+A9B↓j
.text:004055D0                 mov     eax, [esp+5Ch+arg_0]
.text:004055D4                 mov     ebx, eax
.text:004055D6                 mov     [ebp+24h], eax
.text:004055D9                 mov     [ebp+0], eax
.text:004055DC
.text:004055DC loc_4055DC:                             ; CODE XREF: sub_4054B0+F0↑j
.text:004055DC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004055E0                 jz      loc_405F34
.text:004055E6                 mov     esi, [esp+5Ch+arg_4]
.text:004055EA                 mov     eax, [esi+ebx*4]
.text:004055ED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004055F0                 jz      short loc_405617
.text:004055F2
.text:004055F2 loc_4055F2:                             ; CODE XREF: sub_4054B0+16D↓j
.text:004055F2                 mov     edx, [ebp+18h]
.text:004055F5                 test    edx, edx
.text:004055F7                 jz      short loc_405610
.text:004055F9                 mov     [ebp+0Ch], eax
.text:004055FC                 lea     edi, [ebx+1]
.text:004055FF                 mov     eax, 1
.text:00405604                 mov     [ebp+0], edi
.text:00405607
.text:00405607 loc_405607:                             ; CODE XREF: sub_4054B0+2D↑j
.text:00405607                                         ; sub_4054B0+165↓j ...
.text:00405607                 add     esp, 4Ch
.text:0040560A                 pop     ebx
.text:0040560B                 pop     esi
.text:0040560C                 pop     edi
.text:0040560D                 pop     ebp
.text:0040560E                 retn
.text:0040560E ; ---------------------------------------------------------------------------
.text:0040560F                 align 10h
.text:00405610
.text:00405610 loc_405610:                             ; CODE XREF: sub_4054B0+147↑j
.text:00405610                                         ; sub_4054B0+A8A↓j ...
.text:00405610                 mov     eax, 0FFFFFFFFh
.text:00405615                 jmp     short loc_405607
.text:00405617 ; ---------------------------------------------------------------------------
.text:00405617
.text:00405617 loc_405617:                             ; CODE XREF: sub_4054B0+140↑j
.text:00405617                 movzx   edx, byte ptr [eax+1]
.text:0040561B                 test    dl, dl
.text:0040561D                 jz      short loc_4055F2
.text:0040561F                 mov     ebx, [esp+5Ch+arg_C]
.text:00405623                 xor     ecx, ecx
.text:00405625                 test    ebx, ebx
.text:00405627                 jz      short loc_405632
.text:00405629                 cmp     dl, 2Dh ; '-'
.text:0040562C                 jz      loc_405F2A
.text:00405632
.text:00405632 loc_405632:                             ; CODE XREF: sub_4054B0+177↑j
.text:00405632                                         ; sub_4054B0+A7F↓j
.text:00405632                 lea     esi, [ecx+eax+1]
.text:00405636                 mov     [ebp+14h], esi
.text:00405639                 lea     esi, [esi+0]
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_4054B0+AD↑j
.text:00405640                 mov     ecx, [esp+5Ch+arg_C]
.text:00405644                 test    ecx, ecx
.text:00405646                 jz      loc_4059D0
.text:0040564C                 mov     edx, [ebp+0]
.text:0040564F                 mov     edi, [esp+5Ch+arg_4]
.text:00405653                 mov     eax, [edi+edx*4]
.text:00405656                 movzx   edx, byte ptr [eax+1]
.text:0040565A                 cmp     dl, 2Dh ; '-'
.text:0040565D                 jz      short loc_405675
.text:0040565F                 mov     ebx, [esp+5Ch+arg_14]
.text:00405663                 test    ebx, ebx
.text:00405665                 jz      loc_4059D0
.text:0040566B                 cmp     byte ptr [eax+2], 0
.text:0040566F                 jz      loc_405F0A
.text:00405675
.text:00405675 loc_405675:                             ; CODE XREF: sub_4054B0+1AD↑j
.text:00405675                                         ; sub_4054B0+A75↓j
.text:00405675                 mov     [esp+5Ch+var_18], 0
.text:0040567D                 mov     ecx, [ebp+14h]
.text:00405680                 mov     [esp+5Ch+var_1C], 0
.text:00405688                 mov     [esp+5Ch+var_20], 0
.text:00405690                 mov     edi, ecx
.text:00405692                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040569A                 movzx   eax, byte ptr [ecx]
.text:0040569D                 test    al, al
.text:0040569F                 jz      short loc_4056BC
.text:004056A1                 cmp     al, 3Dh ; '='
.text:004056A3                 jz      short loc_4056BC
.text:004056A5                 lea     esi, [esi+0]
.text:004056A9                 lea     edi, [edi+0]
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_4054B0+20A↓j
.text:004056B0                 inc     edi
.text:004056B1                 movzx   eax, byte ptr [edi]
.text:004056B4                 test    al, al
.text:004056B6                 jz      short loc_4056BC
.text:004056B8                 cmp     al, 3Dh ; '='
.text:004056BA                 jnz     short loc_4056B0
.text:004056BC
.text:004056BC loc_4056BC:                             ; CODE XREF: sub_4054B0+1EF↑j
.text:004056BC                                         ; sub_4054B0+1F3↑j ...
.text:004056BC                 mov     [esp+5Ch+var_28], 0
.text:004056C4                 mov     esi, [esp+5Ch+arg_C]
.text:004056C8                 mov     ebx, [esi]
.text:004056CA                 test    ebx, ebx
.text:004056CC                 mov     edx, ebx
.text:004056CE                 jz      loc_4058F0
.text:004056D4                 lea     esi, [esi+0]
.text:004056DA                 lea     edi, [edi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: sub_4054B0+25E↓j
.text:004056E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004056E4                 mov     ebx, edi
.text:004056E6                 sub     ebx, ecx
.text:004056E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004056EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004056EF                 call    strncmp
.text:004056F4                 test    eax, eax
.text:004056F6                 jz      loc_405E86
.text:004056FC
.text:004056FC loc_4056FC:                             ; CODE XREF: sub_4054B0+A0F↓j
.text:004056FC                                         ; sub_4054B0+A24↓j ...
.text:004056FC                 inc     [esp+5Ch+var_28]
.text:00405700                 add     esi, 10h
.text:00405703                 mov     ecx, [esi]
.text:00405705                 test    ecx, ecx
.text:00405707                 mov     edx, ecx
.text:00405709                 jz      short loc_405710
.text:0040570B                 mov     ecx, [ebp+14h]
.text:0040570E                 jmp     short loc_4056E0
.text:00405710 ; ---------------------------------------------------------------------------
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_4054B0+259↑j
.text:00405710                                         ; sub_4054B0+A55↓j
.text:00405710                 mov     esi, [esp+5Ch+var_20]
.text:00405714                 test    esi, esi
.text:00405716                 jz      short loc_405724
.text:00405718                 mov     edx, [esp+5Ch+var_1C]
.text:0040571C                 test    edx, edx
.text:0040571E                 jz      loc_405E30
.text:00405724
.text:00405724 loc_405724:                             ; CODE XREF: sub_4054B0+266↑j
.text:00405724                 mov     eax, [esp+5Ch+var_18]
.text:00405728                 test    eax, eax
.text:0040572A                 jz      loc_4058F0
.text:00405730                 mov     ecx, [ebp+0]
.text:00405733                 lea     eax, [ecx+1]
.text:00405736                 mov     [ebp+0], eax
.text:00405739                 cmp     byte ptr [edi], 0
.text:0040573C                 jz      loc_405850
.text:00405742                 mov     ecx, [esp+5Ch+var_18]
.text:00405746                 mov     esi, [ecx+4]
.text:00405749                 test    esi, esi
.text:0040574B                 jz      short loc_405796
.text:0040574D                 lea     ebx, [edi+1]
.text:00405750                 mov     [ebp+0Ch], ebx
.text:00405753
.text:00405753 loc_405753:                             ; CODE XREF: sub_4054B0+3A8↓j
.text:00405753                                         ; sub_4054B0+3C4↓j
.text:00405753                 mov     ebx, [ebp+14h]
.text:00405756                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00405759                 call    strlen
.text:0040575E                 add     [ebp+14h], eax
.text:00405761                 mov     esi, [esp+5Ch+arg_10]
.text:00405765                 test    esi, esi
.text:00405767                 jz      short loc_405773
.text:00405769                 mov     ebp, [esp+5Ch+var_24]
.text:0040576D                 mov     ecx, [esp+5Ch+arg_10]
.text:00405771                 mov     [ecx], ebp
.text:00405773
.text:00405773 loc_405773:                             ; CODE XREF: sub_4054B0+2B7↑j
.text:00405773                 mov     eax, [esp+5Ch+var_18]
.text:00405777                 mov     ecx, [eax+8]
.text:0040577A                 test    ecx, ecx
.text:0040577C                 jnz     short loc_40578A
.text:0040577E                 mov     ecx, [esp+5Ch+var_18]
.text:00405782
.text:00405782 loc_405782:                             ; CODE XREF: sub_4054B0+723↓j
.text:00405782                 mov     eax, [ecx+0Ch]
.text:00405785                 jmp     loc_405607
.text:0040578A ; ---------------------------------------------------------------------------
.text:0040578A
.text:0040578A loc_40578A:                             ; CODE XREF: sub_4054B0+2CC↑j
.text:0040578A                                         ; sub_4054B0+719↓j
.text:0040578A                 mov     esi, [eax+0Ch]
.text:0040578D                 xor     eax, eax
.text:0040578F                 mov     [ecx], esi
.text:00405791                 jmp     loc_405607
.text:00405796 ; ---------------------------------------------------------------------------
.text:00405796
.text:00405796 loc_405796:                             ; CODE XREF: sub_4054B0+29B↑j
.text:00405796                 mov     edi, [esp+5Ch+var_14]
.text:0040579A                 test    edi, edi
.text:0040579C                 jz      short loc_4057F0
.text:0040579E                 mov     esi, [esp+5Ch+arg_4]
.text:004057A2                 mov     edx, [esi+eax*4-4]
.text:004057A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004057AA                 jz      short loc_405812
.text:004057AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004057B3                 call    ds:libintl_gettext
.text:004057B9                 mov     edx, [esp+5Ch+var_18]
.text:004057BD                 mov     edi, [edx]
.text:004057BF                 mov     [esp+5Ch+var_4C], edi
.text:004057C3                 mov     ebx, [ebp+0]
.text:004057C6                 mov     edi, [esp+5Ch+arg_4]
.text:004057CA                 mov     ecx, [edi+ebx*4-4]
.text:004057CE                 movsx   esi, byte ptr [ecx]
.text:004057D1                 mov     ecx, ds:_iob
.text:004057D7                 add     ecx, 40h ; '@'
.text:004057DA                 mov     [esp+5Ch+var_50], esi
.text:004057DE                 mov     ebx, [edi]
.text:004057E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004057E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004057E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004057EB                 call    fprintf
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_4054B0+2EC↑j
.text:004057F0                                         ; sub_4054B0+398↓j
.text:004057F0                 mov     ecx, [ebp+14h]
.text:004057F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004057F6                 call    strlen
.text:004057FB                 add     [ebp+14h], eax
.text:004057FE                 mov     eax, [esp+5Ch+var_18]
.text:00405802                 mov     esi, [eax+0Ch]
.text:00405805                 mov     [ebp+8], esi
.text:00405808
.text:00405808 loc_405808:                             ; CODE XREF: sub_4054B0+4E5↓j
.text:00405808                                         ; sub_4054B0+73E↓j ...
.text:00405808                 mov     eax, 3Fh ; '?'
.text:0040580D                 jmp     loc_405607
.text:00405812 ; ---------------------------------------------------------------------------
.text:00405812
.text:00405812 loc_405812:                             ; CODE XREF: sub_4054B0+2FA↑j
.text:00405812                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00405819                 call    ds:libintl_gettext
.text:0040581F                 mov     edx, [esp+5Ch+var_18]
.text:00405823                 mov     edi, [esp+5Ch+arg_4]
.text:00405827                 mov     ecx, ds:_iob
.text:0040582D                 mov     esi, [edx]
.text:0040582F                 add     ecx, 40h ; '@'
.text:00405832                 mov     [esp+5Ch+var_50], esi
.text:00405836                 mov     ebx, [edi]
.text:00405838                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040583C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040583F                 mov     [esp+5Ch+MaxCount], ebx
.text:00405843                 call    fprintf
.text:00405848                 jmp     short loc_4057F0
.text:00405848 ; ---------------------------------------------------------------------------
.text:0040584A                 align 10h
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_4054B0+28C↑j
.text:00405850                 mov     ebx, [esp+5Ch+var_18]
.text:00405854                 cmp     dword ptr [ebx+4], 1
.text:00405858                 jnz     loc_405753
.text:0040585E                 cmp     eax, [esp+5Ch+arg_0]
.text:00405862                 jge     short loc_405879
.text:00405864                 mov     ebx, [esp+5Ch+arg_4]
.text:00405868                 lea     edi, [ecx+2]
.text:0040586B                 mov     [ebp+0], edi
.text:0040586E                 mov     esi, [ebx+eax*4]
.text:00405871                 mov     [ebp+0Ch], esi
.text:00405874                 jmp     loc_405753
.text:00405879 ; ---------------------------------------------------------------------------
.text:00405879
.text:00405879 loc_405879:                             ; CODE XREF: sub_4054B0+3B2↑j
.text:00405879                 mov     edx, [esp+5Ch+var_14]
.text:0040587D                 test    edx, edx
.text:0040587F                 jnz     short loc_4058B0
.text:00405881
.text:00405881 loc_405881:                             ; CODE XREF: sub_4054B0+437↓j
.text:00405881                 mov     edx, [ebp+14h]
.text:00405884                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405887                 call    strlen
.text:0040588C                 add     [ebp+14h], eax
.text:0040588F                 mov     eax, [esp+5Ch+var_18]
.text:00405893                 mov     edi, [eax+0Ch]
.text:00405896                 mov     [ebp+8], edi
.text:00405899
.text:00405899 loc_405899:                             ; CODE XREF: sub_4054B0+7C2↓j
.text:00405899                 mov     ebp, [esp+5Ch+Str]
.text:0040589D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004058A1                 setnz   bl
.text:004058A4                 movzx   esi, bl
.text:004058A7                 lea     eax, [esi+esi*4+3Ah]
.text:004058AB                 jmp     loc_405607
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_4054B0+3CF↑j
.text:004058B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004058B7                 call    ds:libintl_gettext
.text:004058BD                 mov     ecx, [ebp+0]
.text:004058C0                 mov     esi, [esp+5Ch+arg_4]
.text:004058C4                 mov     ebx, [esi+ecx*4-4]
.text:004058C8                 mov     ecx, ds:_iob
.text:004058CE                 mov     [esp+5Ch+var_50], ebx
.text:004058D2                 mov     edi, [esi]
.text:004058D4                 add     ecx, 40h ; '@'
.text:004058D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004058DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004058DE                 mov     [esp+5Ch+MaxCount], edi
.text:004058E2                 call    fprintf
.text:004058E7                 jmp     short loc_405881
.text:004058E7 ; ---------------------------------------------------------------------------
.text:004058E9                 align 10h
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_4054B0+21E↑j
.text:004058F0                                         ; sub_4054B0+27A↑j
.text:004058F0                 mov     eax, [esp+5Ch+arg_14]
.text:004058F4                 test    eax, eax
.text:004058F6                 jz      short loc_405926
.text:004058F8                 mov     ebx, [ebp+0]
.text:004058FB                 mov     esi, [esp+5Ch+arg_4]
.text:004058FF                 mov     edi, [esi+ebx*4]
.text:00405902                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405906                 jz      short loc_405929
.text:00405908                 mov     ecx, [ebp+14h]
.text:0040590B                 mov     edx, [esp+5Ch+Str]
.text:0040590F                 movsx   ebx, byte ptr [ecx]
.text:00405912                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405915                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00405919                 call    strchr
.text:0040591E                 test    eax, eax
.text:00405920                 jnz     loc_4059D0
.text:00405926
.text:00405926 loc_405926:                             ; CODE XREF: sub_4054B0+446↑j
.text:00405926                 mov     ebx, [ebp+0]
.text:00405929
.text:00405929 loc_405929:                             ; CODE XREF: sub_4054B0+456↑j
.text:00405929                 mov     eax, [esp+5Ch+var_14]
.text:0040592D                 test    eax, eax
.text:0040592F                 jz      short loc_405981
.text:00405931                 mov     esi, [esp+5Ch+arg_4]
.text:00405935                 mov     edi, [esi+ebx*4]
.text:00405938                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040593C                 jz      short loc_40599A
.text:0040593E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00405945                 call    ds:libintl_gettext
.text:0040594B                 mov     edi, [ebp+14h]
.text:0040594E                 mov     [esp+5Ch+var_4C], edi
.text:00405952                 mov     ebx, [ebp+0]
.text:00405955                 mov     edi, [esp+5Ch+arg_4]
.text:00405959                 mov     esi, [edi+ebx*4]
.text:0040595C                 movsx   ecx, byte ptr [esi]
.text:0040595F                 mov     esi, ds:_iob
.text:00405965                 add     esi, 40h ; '@'
.text:00405968                 mov     [esp+5Ch+var_50], ecx
.text:0040596C                 mov     ebx, [edi]
.text:0040596E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405972                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00405975                 mov     [esp+5Ch+MaxCount], ebx
.text:00405979                 call    fprintf
.text:0040597E
.text:0040597E loc_40597E:                             ; CODE XREF: sub_4054B0+51D↓j
.text:0040597E                 mov     ebx, [ebp+0]
.text:00405981
.text:00405981 loc_405981:                             ; CODE XREF: sub_4054B0+47F↑j
.text:00405981                 mov     dword ptr [ebp+14h], offset dword_405360
.text:00405988                 lea     edx, [ebx+1]
.text:0040598B                 mov     [ebp+0], edx
.text:0040598E
.text:0040598E loc_40598E:                             ; CODE XREF: sub_4054B0+999↓j
.text:0040598E                 mov     dword ptr [ebp+8], 0
.text:00405995                 jmp     loc_405808
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599A
.text:0040599A loc_40599A:                             ; CODE XREF: sub_4054B0+48C↑j
.text:0040599A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004059A1                 call    ds:libintl_gettext
.text:004059A7                 mov     ecx, [ebp+14h]
.text:004059AA                 mov     edi, [esp+5Ch+arg_4]
.text:004059AE                 mov     edx, ds:_iob
.text:004059B4                 mov     [esp+5Ch+var_50], ecx
.text:004059B8                 mov     ebx, [edi]
.text:004059BA                 add     edx, 40h ; '@'
.text:004059BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004059C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004059C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004059C8                 call    fprintf
.text:004059CD                 jmp     short loc_40597E
.text:004059CD ; ---------------------------------------------------------------------------
.text:004059CF                 align 10h
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_4054B0+196↑j
.text:004059D0                                         ; sub_4054B0+1B5↑j ...
.text:004059D0                 mov     esi, [ebp+14h]
.text:004059D3                 movzx   ebx, byte ptr [esi]
.text:004059D6                 inc     esi
.text:004059D7                 mov     [ebp+14h], esi
.text:004059DA                 mov     ecx, [esp+5Ch+Str]
.text:004059DE                 movsx   esi, bl
.text:004059E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004059E5                 mov     edi, esi
.text:004059E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004059EA                 call    strchr
.text:004059EF                 mov     ecx, [ebp+14h]
.text:004059F2                 cmp     byte ptr [ecx], 0
.text:004059F5                 jnz     short loc_4059FA
.text:004059F7                 inc     dword ptr [ebp+0]
.text:004059FA
.text:004059FA loc_4059FA:                             ; CODE XREF: sub_4054B0+545↑j
.text:004059FA                 test    eax, eax
.text:004059FC                 jz      loc_405DE0
.text:00405A02                 cmp     bl, 3Ah ; ':'
.text:00405A05                 jz      loc_405DE0
.text:00405A0B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00405A0E                 jz      loc_405AC6
.text:00405A14                 movzx   edx, byte ptr [eax+1]
.text:00405A18
.text:00405A18 loc_405A18:                             ; CODE XREF: sub_4054B0+61D↓j
.text:00405A18                 cmp     dl, 3Ah ; ':'
.text:00405A1B                 jz      short loc_405A24
.text:00405A1D
.text:00405A1D loc_405A1D:                             ; CODE XREF: sub_4054B0+590↓j
.text:00405A1D                 mov     eax, esi
.text:00405A1F                 jmp     loc_405607
.text:00405A24 ; ---------------------------------------------------------------------------
.text:00405A24
.text:00405A24 loc_405A24:                             ; CODE XREF: sub_4054B0+56B↑j
.text:00405A24                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405A28                 jz      loc_405AB1
.text:00405A2E                 cmp     byte ptr [ecx], 0
.text:00405A31                 jz      short loc_405A42
.text:00405A33
.text:00405A33 loc_405A33:                             ; CODE XREF: sub_4054B0+604↓j
.text:00405A33                 inc     dword ptr [ebp+0]
.text:00405A36                 mov     [ebp+0Ch], ecx
.text:00405A39
.text:00405A39 loc_405A39:                             ; CODE XREF: sub_4054B0+5AB↓j
.text:00405A39                                         ; sub_4054B0+5C6↓j ...
.text:00405A39                 mov     dword ptr [ebp+14h], 0
.text:00405A40                 jmp     short loc_405A1D
.text:00405A42 ; ---------------------------------------------------------------------------
.text:00405A42
.text:00405A42 loc_405A42:                             ; CODE XREF: sub_4054B0+581↑j
.text:00405A42                 mov     ecx, [ebp+0]
.text:00405A45                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405A49                 jz      short loc_405A5D
.text:00405A4B                 mov     eax, [esp+5Ch+arg_4]
.text:00405A4F                 lea     edx, [ecx+1]
.text:00405A52                 mov     [ebp+0], edx
.text:00405A55                 mov     ebx, [eax+ecx*4]
.text:00405A58                 mov     [ebp+0Ch], ebx
.text:00405A5B                 jmp     short loc_405A39
.text:00405A5D ; ---------------------------------------------------------------------------
.text:00405A5D
.text:00405A5D loc_405A5D:                             ; CODE XREF: sub_4054B0+599↑j
.text:00405A5D                 mov     ecx, [esp+5Ch+var_14]
.text:00405A61                 test    ecx, ecx
.text:00405A63                 jnz     short loc_405A7F
.text:00405A65
.text:00405A65 loc_405A65:                             ; CODE XREF: sub_4054B0+5FF↓j
.text:00405A65                 mov     [ebp+8], edi
.text:00405A68                 mov     edi, [esp+5Ch+Str]
.text:00405A6C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00405A6F                 jz      short loc_405A78
.text:00405A71                 mov     esi, 3Fh ; '?'
.text:00405A76                 jmp     short loc_405A39
.text:00405A78 ; ---------------------------------------------------------------------------
.text:00405A78
.text:00405A78 loc_405A78:                             ; CODE XREF: sub_4054B0+5BF↑j
.text:00405A78                 mov     esi, 3Ah ; ':'
.text:00405A7D                 jmp     short loc_405A39
.text:00405A7F ; ---------------------------------------------------------------------------
.text:00405A7F
.text:00405A7F loc_405A7F:                             ; CODE XREF: sub_4054B0+5B3↑j
.text:00405A7F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405A86                 call    ds:libintl_gettext
.text:00405A8C                 mov     [esp+5Ch+var_50], edi
.text:00405A90                 mov     ebx, [esp+5Ch+arg_4]
.text:00405A94                 mov     edx, ds:_iob
.text:00405A9A                 mov     esi, [ebx]
.text:00405A9C                 add     edx, 40h ; '@'
.text:00405A9F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405AA3                 mov     [esp+5Ch+MaxCount], esi
.text:00405AA7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405AAA                 call    fprintf
.text:00405AAF                 jmp     short loc_405A65
.text:00405AB1 ; ---------------------------------------------------------------------------
.text:00405AB1
.text:00405AB1 loc_405AB1:                             ; CODE XREF: sub_4054B0+578↑j
.text:00405AB1                 cmp     byte ptr [ecx], 0
.text:00405AB4                 jnz     loc_405A33
.text:00405ABA                 mov     dword ptr [ebp+0Ch], 0
.text:00405AC1                 jmp     loc_405A39
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405AC6
.text:00405AC6 loc_405AC6:                             ; CODE XREF: sub_4054B0+55E↑j
.text:00405AC6                 movzx   edx, byte ptr [eax+1]
.text:00405ACA                 cmp     dl, 3Bh ; ';'
.text:00405ACD                 jnz     loc_405A18
.text:00405AD3                 mov     [esp+5Ch+var_2C], 0
.text:00405ADB                 mov     [esp+5Ch+var_30], 0
.text:00405AE3                 mov     [esp+5Ch+var_34], 0
.text:00405AEB                 mov     [esp+5Ch+var_38], 0
.text:00405AF3                 cmp     byte ptr [ecx], 0
.text:00405AF6                 jz      loc_405D6B
.text:00405AFC                 inc     dword ptr [ebp+0]
.text:00405AFF                 mov     [ebp+0Ch], ecx
.text:00405B02
.text:00405B02 loc_405B02:                             ; CODE XREF: sub_4054B0+8D4↓j
.text:00405B02                 mov     edi, [ebp+0Ch]
.text:00405B05                 mov     [ebp+14h], edi
.text:00405B08                 movzx   eax, byte ptr [edi]
.text:00405B0B                 test    al, al
.text:00405B0D                 jz      short loc_405B1F
.text:00405B0F                 cmp     al, 3Dh ; '='
.text:00405B11                 jz      short loc_405B1F
.text:00405B13
.text:00405B13 loc_405B13:                             ; CODE XREF: sub_4054B0+66D↓j
.text:00405B13                 inc     edi
.text:00405B14                 movzx   eax, byte ptr [edi]
.text:00405B17                 test    al, al
.text:00405B19                 jz      short loc_405B1F
.text:00405B1B                 cmp     al, 3Dh ; '='
.text:00405B1D                 jnz     short loc_405B13
.text:00405B1F
.text:00405B1F loc_405B1F:                             ; CODE XREF: sub_4054B0+65D↑j
.text:00405B1F                                         ; sub_4054B0+661↑j ...
.text:00405B1F                 mov     [esp+5Ch+var_3C], 0
.text:00405B27                 mov     esi, [esp+5Ch+arg_C]
.text:00405B2B                 mov     eax, [esi]
.text:00405B2D                 test    eax, eax
.text:00405B2F                 jz      loc_405CB0
.text:00405B35                 mov     ecx, eax
.text:00405B37
.text:00405B37 loc_405B37:                             ; CODE XREF: sub_4054B0+6B3↓j
.text:00405B37                 mov     ebx, [ebp+14h]
.text:00405B3A                 mov     eax, edi
.text:00405B3C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00405B3F                 sub     eax, ebx
.text:00405B41                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405B45                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405B49                 call    strncmp
.text:00405B4E                 test    eax, eax
.text:00405B50                 jz      loc_405D17
.text:00405B56
.text:00405B56 loc_405B56:                             ; CODE XREF: sub_4054B0+88C↓j
.text:00405B56                                         ; sub_4054B0+89D↓j
.text:00405B56                 inc     [esp+5Ch+var_3C]
.text:00405B5A                 add     esi, 10h
.text:00405B5D                 mov     edx, [esi]
.text:00405B5F                 test    edx, edx
.text:00405B61                 mov     ecx, edx
.text:00405B63                 jnz     short loc_405B37
.text:00405B65
.text:00405B65 loc_405B65:                             ; CODE XREF: sub_4054B0+8B6↓j
.text:00405B65                 mov     esi, [esp+5Ch+var_34]
.text:00405B69                 test    esi, esi
.text:00405B6B                 jz      short loc_405B79
.text:00405B6D                 mov     ebx, [esp+5Ch+var_30]
.text:00405B71                 test    ebx, ebx
.text:00405B73                 jz      loc_405CC1
.text:00405B79
.text:00405B79 loc_405B79:                             ; CODE XREF: sub_4054B0+6BB↑j
.text:00405B79                 mov     esi, [esp+5Ch+var_2C]
.text:00405B7D                 test    esi, esi
.text:00405B7F                 jz      loc_405CB0
.text:00405B85                 cmp     byte ptr [edi], 0
.text:00405B88                 jz      loc_405C30
.text:00405B8E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405B92                 mov     ebx, [ecx+4]
.text:00405B95                 test    ebx, ebx
.text:00405B97                 jz      short loc_405BD8
.text:00405B99                 lea     edx, [edi+1]
.text:00405B9C                 mov     [ebp+0Ch], edx
.text:00405B9F
.text:00405B9F loc_405B9F:                             ; CODE XREF: sub_4054B0+788↓j
.text:00405B9F                                         ; sub_4054B0+7A7↓j
.text:00405B9F                 mov     edi, [ebp+14h]
.text:00405BA2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405BA5                 call    strlen
.text:00405BAA                 add     [ebp+14h], eax
.text:00405BAD                 mov     eax, [esp+5Ch+arg_10]
.text:00405BB1                 test    eax, eax
.text:00405BB3                 jz      short loc_405BC0
.text:00405BB5                 mov     edx, [esp+5Ch+var_38]
.text:00405BB9                 mov     ebp, [esp+5Ch+arg_10]
.text:00405BBD                 mov     [ebp+0], edx
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: sub_4054B0+703↑j
.text:00405BC0                 mov     eax, [esp+5Ch+var_2C]
.text:00405BC4                 mov     ecx, [eax+8]
.text:00405BC7                 test    ecx, ecx
.text:00405BC9                 jnz     loc_40578A
.text:00405BCF                 mov     ecx, [esp+5Ch+var_2C]
.text:00405BD3                 jmp     loc_405782
.text:00405BD8 ; ---------------------------------------------------------------------------
.text:00405BD8
.text:00405BD8 loc_405BD8:                             ; CODE XREF: sub_4054B0+6E7↑j
.text:00405BD8                 mov     eax, [esp+5Ch+var_14]
.text:00405BDC                 test    eax, eax
.text:00405BDE                 jnz     short loc_405BF3
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: sub_4054B0+779↓j
.text:00405BE0                 mov     ecx, [ebp+14h]
.text:00405BE3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405BE6                 call    strlen
.text:00405BEB                 add     [ebp+14h], eax
.text:00405BEE                 jmp     loc_405808
.text:00405BF3 ; ---------------------------------------------------------------------------
.text:00405BF3
.text:00405BF3 loc_405BF3:                             ; CODE XREF: sub_4054B0+72E↑j
.text:00405BF3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00405BFA                 call    ds:libintl_gettext
.text:00405C00                 mov     edx, [esp+5Ch+var_2C]
.text:00405C04                 mov     ebx, [esp+5Ch+arg_4]
.text:00405C08                 mov     edi, [edx]
.text:00405C0A                 mov     [esp+5Ch+var_50], edi
.text:00405C0E                 mov     edi, ds:_iob
.text:00405C14                 mov     esi, [ebx]
.text:00405C16                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405C1A                 add     edi, 40h ; '@'
.text:00405C1D                 mov     [esp+5Ch+MaxCount], esi
.text:00405C21                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00405C24                 call    fprintf
.text:00405C29                 jmp     short loc_405BE0
.text:00405C29 ; ---------------------------------------------------------------------------
.text:00405C2B                 align 10h
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_4054B0+6D8↑j
.text:00405C30                 mov     esi, [esp+5Ch+var_2C]
.text:00405C34                 cmp     dword ptr [esi+4], 1
.text:00405C38                 jnz     loc_405B9F
.text:00405C3E                 mov     ecx, [ebp+0]
.text:00405C41                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405C45                 jge     short loc_405C5C
.text:00405C47                 mov     eax, [esp+5Ch+arg_4]
.text:00405C4B                 lea     ebx, [ecx+1]
.text:00405C4E                 mov     [ebp+0], ebx
.text:00405C51                 mov     edi, [eax+ecx*4]
.text:00405C54                 mov     [ebp+0Ch], edi
.text:00405C57                 jmp     loc_405B9F
.text:00405C5C ; ---------------------------------------------------------------------------
.text:00405C5C
.text:00405C5C loc_405C5C:                             ; CODE XREF: sub_4054B0+795↑j
.text:00405C5C                 mov     edx, [esp+5Ch+var_14]
.text:00405C60                 test    edx, edx
.text:00405C62                 jnz     short loc_405C77
.text:00405C64
.text:00405C64 loc_405C64:                             ; CODE XREF: sub_4054B0+7FE↓j
.text:00405C64                 mov     edx, [ebp+14h]
.text:00405C67                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405C6A                 call    strlen
.text:00405C6F                 add     [ebp+14h], eax
.text:00405C72                 jmp     loc_405899
.text:00405C77 ; ---------------------------------------------------------------------------
.text:00405C77
.text:00405C77 loc_405C77:                             ; CODE XREF: sub_4054B0+7B2↑j
.text:00405C77                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405C7E                 call    ds:libintl_gettext
.text:00405C84                 mov     ecx, [ebp+0]
.text:00405C87                 mov     ebx, [esp+5Ch+arg_4]
.text:00405C8B                 mov     edi, [ebx+ecx*4-4]
.text:00405C8F                 mov     ecx, ds:_iob
.text:00405C95                 mov     [esp+5Ch+var_50], edi
.text:00405C99                 mov     esi, [ebx]
.text:00405C9B                 add     ecx, 40h ; '@'
.text:00405C9E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405CA2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405CA5                 mov     [esp+5Ch+MaxCount], esi
.text:00405CA9                 call    fprintf
.text:00405CAE                 jmp     short loc_405C64
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_4054B0+67F↑j
.text:00405CB0                                         ; sub_4054B0+6CF↑j
.text:00405CB0                 mov     dword ptr [ebp+14h], 0
.text:00405CB7                 mov     eax, 57h ; 'W'
.text:00405CBC                 jmp     loc_405607
.text:00405CC1 ; ---------------------------------------------------------------------------
.text:00405CC1
.text:00405CC1 loc_405CC1:                             ; CODE XREF: sub_4054B0+6C3↑j
.text:00405CC1                 mov     edi, [esp+5Ch+var_14]
.text:00405CC5                 test    edi, edi
.text:00405CC7                 jnz     short loc_405CDF
.text:00405CC9
.text:00405CC9 loc_405CC9:                             ; CODE XREF: sub_4054B0+865↓j
.text:00405CC9                 mov     edx, [ebp+14h]
.text:00405CCC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405CCF                 call    strlen
.text:00405CD4                 add     [ebp+14h], eax
.text:00405CD7                 inc     dword ptr [ebp+0]
.text:00405CDA                 jmp     loc_405808
.text:00405CDF ; ---------------------------------------------------------------------------
.text:00405CDF
.text:00405CDF loc_405CDF:                             ; CODE XREF: sub_4054B0+817↑j
.text:00405CDF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00405CE6                 call    ds:libintl_gettext
.text:00405CEC                 mov     ecx, [ebp+0]
.text:00405CEF                 mov     ebx, [esp+5Ch+arg_4]
.text:00405CF3                 mov     edi, [ebx+ecx*4]
.text:00405CF6                 mov     ecx, ds:_iob
.text:00405CFC                 mov     [esp+5Ch+var_50], edi
.text:00405D00                 mov     esi, [ebx]
.text:00405D02                 add     ecx, 40h ; '@'
.text:00405D05                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405D09                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405D0C                 mov     [esp+5Ch+MaxCount], esi
.text:00405D10                 call    fprintf
.text:00405D15                 jmp     short loc_405CC9
.text:00405D17 ; ---------------------------------------------------------------------------
.text:00405D17
.text:00405D17 loc_405D17:                             ; CODE XREF: sub_4054B0+6A0↑j
.text:00405D17                 mov     edx, [ebp+14h]
.text:00405D1A                 mov     ebx, edi
.text:00405D1C                 mov     ecx, [esi]
.text:00405D1E                 sub     ebx, edx
.text:00405D20                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405D23                 call    strlen
.text:00405D28                 cmp     ebx, eax
.text:00405D2A                 jz      short loc_405D52
.text:00405D2C                 mov     ebx, [esp+5Ch+var_2C]
.text:00405D30                 test    ebx, ebx
.text:00405D32                 jz      short loc_405D41
.text:00405D34                 mov     [esp+5Ch+var_34], 1
.text:00405D3C                 jmp     loc_405B56
.text:00405D41 ; ---------------------------------------------------------------------------
.text:00405D41
.text:00405D41 loc_405D41:                             ; CODE XREF: sub_4054B0+882↑j
.text:00405D41                 mov     [esp+5Ch+var_2C], esi
.text:00405D45                 mov     ecx, [esp+5Ch+var_3C]
.text:00405D49                 mov     [esp+5Ch+var_38], ecx
.text:00405D4D                 jmp     loc_405B56
.text:00405D52 ; ---------------------------------------------------------------------------
.text:00405D52
.text:00405D52 loc_405D52:                             ; CODE XREF: sub_4054B0+87A↑j
.text:00405D52                 mov     [esp+5Ch+var_2C], esi
.text:00405D56                 mov     eax, [esp+5Ch+var_3C]
.text:00405D5A                 mov     [esp+5Ch+var_30], 1
.text:00405D62                 mov     [esp+5Ch+var_38], eax
.text:00405D66                 jmp     loc_405B65
.text:00405D6B ; ---------------------------------------------------------------------------
.text:00405D6B
.text:00405D6B loc_405D6B:                             ; CODE XREF: sub_4054B0+646↑j
.text:00405D6B                 mov     edx, [ebp+0]
.text:00405D6E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405D72                 jz      short loc_405D89
.text:00405D74                 mov     ebx, [esp+5Ch+arg_4]
.text:00405D78                 lea     esi, [edx+1]
.text:00405D7B                 mov     [ebp+0], esi
.text:00405D7E                 mov     edi, [ebx+edx*4]
.text:00405D81                 mov     [ebp+0Ch], edi
.text:00405D84                 jmp     loc_405B02
.text:00405D89 ; ---------------------------------------------------------------------------
.text:00405D89
.text:00405D89 loc_405D89:                             ; CODE XREF: sub_4054B0+8C2↑j
.text:00405D89                 mov     edi, [esp+5Ch+var_14]
.text:00405D8D                 test    edi, edi
.text:00405D8F                 jnz     short loc_405DAC
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_4054B0+92C↓j
.text:00405D91                 mov     [ebp+8], esi
.text:00405D94                 mov     ebp, [esp+5Ch+Str]
.text:00405D98                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405D9C                 jz      short loc_405DA8
.text:00405D9E                 mov     bl, 3Fh ; '?'
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_4054B0+8FA↓j
.text:00405DA0                 movsx   eax, bl
.text:00405DA3                 jmp     loc_405607
.text:00405DA8 ; ---------------------------------------------------------------------------
.text:00405DA8
.text:00405DA8 loc_405DA8:                             ; CODE XREF: sub_4054B0+8EC↑j
.text:00405DA8                 mov     bl, 3Ah ; ':'
.text:00405DAA                 jmp     short loc_405DA0
.text:00405DAC ; ---------------------------------------------------------------------------
.text:00405DAC
.text:00405DAC loc_405DAC:                             ; CODE XREF: sub_4054B0+8DF↑j
.text:00405DAC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405DB3                 call    ds:libintl_gettext
.text:00405DB9                 mov     [esp+5Ch+var_50], esi
.text:00405DBD                 mov     edx, [esp+5Ch+arg_4]
.text:00405DC1                 mov     ecx, ds:_iob
.text:00405DC7                 mov     ebx, [edx]
.text:00405DC9                 add     ecx, 40h ; '@'
.text:00405DCC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405DD0                 mov     [esp+5Ch+MaxCount], ebx
.text:00405DD4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405DD7                 call    fprintf
.text:00405DDC                 jmp     short loc_405D91
.text:00405DDC ; ---------------------------------------------------------------------------
.text:00405DDE                 align 10h
.text:00405DE0
.text:00405DE0 loc_405DE0:                             ; CODE XREF: sub_4054B0+54C↑j
.text:00405DE0                                         ; sub_4054B0+555↑j
.text:00405DE0                 mov     eax, [esp+5Ch+var_14]
.text:00405DE4                 test    eax, eax
.text:00405DE6                 jz      short loc_405E1F
.text:00405DE8                 mov     ebx, [ebp+1Ch]
.text:00405DEB                 test    ebx, ebx
.text:00405DED                 jz      short loc_405E27
.text:00405DEF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00405DF6
.text:00405DF6 loc_405DF6:                             ; CODE XREF: sub_4054B0+97E↓j
.text:00405DF6                 call    ds:libintl_gettext
.text:00405DFC                 mov     [esp+5Ch+var_50], esi
.text:00405E00                 mov     ebx, [esp+5Ch+arg_4]
.text:00405E04                 mov     edx, ds:_iob
.text:00405E0A                 mov     esi, [ebx]
.text:00405E0C                 add     edx, 40h ; '@'
.text:00405E0F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405E13                 mov     [esp+5Ch+MaxCount], esi
.text:00405E17                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405E1A                 call    fprintf
.text:00405E1F
.text:00405E1F loc_405E1F:                             ; CODE XREF: sub_4054B0+936↑j
.text:00405E1F                 mov     [ebp+8], edi
.text:00405E22                 jmp     loc_405808
.text:00405E27 ; ---------------------------------------------------------------------------
.text:00405E27
.text:00405E27 loc_405E27:                             ; CODE XREF: sub_4054B0+93D↑j
.text:00405E27                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00405E2E                 jmp     short loc_405DF6
.text:00405E30 ; ---------------------------------------------------------------------------
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_4054B0+26E↑j
.text:00405E30                 mov     edi, [esp+5Ch+var_14]
.text:00405E34                 test    edi, edi
.text:00405E36                 jnz     short loc_405E4E
.text:00405E38
.text:00405E38 loc_405E38:                             ; CODE XREF: sub_4054B0+9D4↓j
.text:00405E38                 mov     edx, [ebp+14h]
.text:00405E3B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405E3E                 call    strlen
.text:00405E43                 add     [ebp+14h], eax
.text:00405E46                 inc     dword ptr [ebp+0]
.text:00405E49                 jmp     loc_40598E
.text:00405E4E ; ---------------------------------------------------------------------------
.text:00405E4E
.text:00405E4E loc_405E4E:                             ; CODE XREF: sub_4054B0+986↑j
.text:00405E4E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405E55                 call    ds:libintl_gettext
.text:00405E5B                 mov     ebx, [ebp+0]
.text:00405E5E                 mov     edi, [esp+5Ch+arg_4]
.text:00405E62                 mov     ecx, [edi+ebx*4]
.text:00405E65                 mov     ebx, ds:_iob
.text:00405E6B                 mov     [esp+5Ch+var_50], ecx
.text:00405E6F                 mov     esi, [edi]
.text:00405E71                 add     ebx, 40h ; '@'
.text:00405E74                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405E78                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00405E7B                 mov     [esp+5Ch+MaxCount], esi
.text:00405E7F                 call    fprintf
.text:00405E84                 jmp     short loc_405E38
.text:00405E86 ; ---------------------------------------------------------------------------
.text:00405E86
.text:00405E86 loc_405E86:                             ; CODE XREF: sub_4054B0+246↑j
.text:00405E86                 mov     ecx, [ebp+14h]
.text:00405E89                 mov     ebx, edi
.text:00405E8B                 mov     edx, [esi]
.text:00405E8D                 sub     ebx, ecx
.text:00405E8F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405E92                 call    strlen
.text:00405E97                 cmp     ebx, eax
.text:00405E99                 jz      short loc_405EF1
.text:00405E9B                 mov     ebx, [esp+5Ch+var_18]
.text:00405E9F                 test    ebx, ebx
.text:00405EA1                 jz      short loc_405EE0
.text:00405EA3                 mov     edx, [esp+5Ch+arg_14]
.text:00405EA7                 test    edx, edx
.text:00405EA9                 jnz     short loc_405EB7
.text:00405EAB                 mov     ecx, [esp+5Ch+var_18]
.text:00405EAF                 mov     ebx, [esi+4]
.text:00405EB2                 cmp     [ecx+4], ebx
.text:00405EB5                 jz      short loc_405EC4
.text:00405EB7
.text:00405EB7 loc_405EB7:                             ; CODE XREF: sub_4054B0+9F9↑j
.text:00405EB7                                         ; sub_4054B0+A1A↓j ...
.text:00405EB7                 mov     [esp+5Ch+var_20], 1
.text:00405EBF                 jmp     loc_4056FC
.text:00405EC4 ; ---------------------------------------------------------------------------
.text:00405EC4
.text:00405EC4 loc_405EC4:                             ; CODE XREF: sub_4054B0+A05↑j
.text:00405EC4                 mov     edx, [esi+8]
.text:00405EC7                 cmp     [ecx+8], edx
.text:00405ECA                 jnz     short loc_405EB7
.text:00405ECC                 mov     ebx, [esi+0Ch]
.text:00405ECF                 cmp     [ecx+0Ch], ebx
.text:00405ED2                 jnz     short loc_405EB7
.text:00405ED4                 jmp     loc_4056FC
.text:00405ED4 ; ---------------------------------------------------------------------------
.text:00405ED9                 align 10h
.text:00405EE0
.text:00405EE0 loc_405EE0:                             ; CODE XREF: sub_4054B0+9F1↑j
.text:00405EE0                 mov     [esp+5Ch+var_18], esi
.text:00405EE4                 mov     eax, [esp+5Ch+var_28]
.text:00405EE8                 mov     [esp+5Ch+var_24], eax
.text:00405EEC                 jmp     loc_4056FC
.text:00405EF1 ; ---------------------------------------------------------------------------
.text:00405EF1
.text:00405EF1 loc_405EF1:                             ; CODE XREF: sub_4054B0+9E9↑j
.text:00405EF1                 mov     [esp+5Ch+var_18], esi
.text:00405EF5                 mov     ecx, [esp+5Ch+var_28]
.text:00405EF9                 mov     [esp+5Ch+var_1C], 1
.text:00405F01                 mov     [esp+5Ch+var_24], ecx
.text:00405F05                 jmp     loc_405710
.text:00405F0A ; ---------------------------------------------------------------------------
.text:00405F0A
.text:00405F0A loc_405F0A:                             ; CODE XREF: sub_4054B0+1BF↑j
.text:00405F0A                 mov     eax, [esp+5Ch+Str]
.text:00405F0E                 movsx   esi, dl
.text:00405F11                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405F15                 mov     [esp+5Ch+Str1], eax ; Str
.text:00405F18                 call    strchr
.text:00405F1D                 test    eax, eax
.text:00405F1F                 jnz     loc_4059D0
.text:00405F25                 jmp     loc_405675
.text:00405F2A ; ---------------------------------------------------------------------------
.text:00405F2A
.text:00405F2A loc_405F2A:                             ; CODE XREF: sub_4054B0+17C↑j
.text:00405F2A                 mov     ecx, 1
.text:00405F2F                 jmp     loc_405632
.text:00405F34 ; ---------------------------------------------------------------------------
.text:00405F34
.text:00405F34 loc_405F34:                             ; CODE XREF: sub_4054B0+D4↑j
.text:00405F34                                         ; sub_4054B0+130↑j
.text:00405F34                 mov     eax, [ebp+20h]
.text:00405F37                 cmp     eax, [ebp+24h]
.text:00405F3A                 jz      loc_405610
.text:00405F40                 mov     [ebp+0], eax
.text:00405F43                 jmp     loc_405610
.text:00405F48 ; ---------------------------------------------------------------------------
.text:00405F48
.text:00405F48 loc_405F48:                             ; CODE XREF: sub_4054B0+FE↑j
.text:00405F48                 mov     [ebp+20h], eax
.text:00405F4B                 jmp     loc_4055D0
.text:00405F50 ; ---------------------------------------------------------------------------
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_4054B0+CA↑j
.text:00405F50                 mov     edx, [ebp+20h]
.text:00405F53                 mov     eax, [ebp+24h]
.text:00405F56                 cmp     edx, eax
.text:00405F58                 jz      short loc_405FD0
.text:00405F5A                 cmp     eax, ebx
.text:00405F5C                 jz      short loc_405F71
.text:00405F5E                 mov     [esp+5Ch+Str2], ebp
.text:00405F62                 mov     ebx, [esp+5Ch+arg_4]
.text:00405F66                 mov     [esp+5Ch+Str1], ebx
.text:00405F69                 call    sub_406160
.text:00405F6E                 mov     ebx, [ebp+0]
.text:00405F71
.text:00405F71 loc_405F71:                             ; CODE XREF: sub_4054B0+AAC↑j
.text:00405F71                                         ; sub_4054B0+B22↓j ...
.text:00405F71                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405F75                 jge     short loc_405FC0
.text:00405F77                 mov     esi, [esp+5Ch+arg_4]
.text:00405F7B                 mov     eax, [esi+ebx*4]
.text:00405F7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405F81                 jz      short loc_405FC8
.text:00405F83                 lea     esi, [esi+0]
.text:00405F89                 lea     edi, [edi+0]
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_4054B0+AFC↓j
.text:00405F90                                         ; sub_4054B0+B1C↓j
.text:00405F90                 lea     eax, [ebx+1]
.text:00405F93                 mov     ebx, eax
.text:00405F95                 mov     [ebp+0], eax
.text:00405F98                 cmp     eax, [esp+5Ch+arg_0]
.text:00405F9C                 jge     short loc_405FC0
.text:00405F9E                 mov     edi, [esp+5Ch+arg_4]
.text:00405FA2                 mov     edx, [edi+eax*4]
.text:00405FA5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405FA8                 jz      short loc_405FB0
.text:00405FAA
.text:00405FAA loc_405FAA:                             ; CODE XREF: sub_4054B0+B04↓j
.text:00405FAA                 mov     ebx, eax
.text:00405FAC                 jmp     short loc_405F90
.text:00405FAC ; ---------------------------------------------------------------------------
.text:00405FAE                 align 10h
.text:00405FB0
.text:00405FB0 loc_405FB0:                             ; CODE XREF: sub_4054B0+AF8↑j
.text:00405FB0                 cmp     byte ptr [edx+1], 0
.text:00405FB4                 jz      short loc_405FAA
.text:00405FB6                 lea     esi, [esi+0]
.text:00405FB9                 lea     edi, [edi+0]
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_4054B0+AC5↑j
.text:00405FC0                                         ; sub_4054B0+AEC↑j ...
.text:00405FC0                 mov     [ebp+24h], ebx
.text:00405FC3                 jmp     loc_405580
.text:00405FC8 ; ---------------------------------------------------------------------------
.text:00405FC8
.text:00405FC8 loc_405FC8:                             ; CODE XREF: sub_4054B0+AD1↑j
.text:00405FC8                 cmp     byte ptr [eax+1], 0
.text:00405FCC                 jz      short loc_405F90
.text:00405FCE                 jmp     short loc_405FC0
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: sub_4054B0+AA8↑j
.text:00405FD0                 cmp     edx, ebx
.text:00405FD2                 jz      short loc_405F71
.text:00405FD4                 mov     [ebp+20h], ebx
.text:00405FD7                 jmp     short loc_405F71
.text:00405FD9 ; ---------------------------------------------------------------------------
.text:00405FD9
.text:00405FD9 loc_405FD9:                             ; CODE XREF: sub_4054B0+88↑j
.text:00405FD9                 mov     dword ptr [ebp+18h], 0
.text:00405FE0                 mov     esi, [esp+5Ch+Str]
.text:00405FE4
.text:00405FE4 loc_405FE4:                             ; CODE XREF: sub_4054B0+B49↓j
.text:00405FE4                 inc     esi
.text:00405FE5                 jmp     loc_405548
.text:00405FE5 ; ---------------------------------------------------------------------------
.text:00405FEA                 align 10h
.text:00405FF0
.text:00405FF0 loc_405FF0:                             ; CODE XREF: sub_4054B0+80↑j
.text:00405FF0                 mov     dword ptr [ebp+18h], 2
.text:00405FF7                 mov     esi, ecx
.text:00405FF9                 jmp     short loc_405FE4
.text:00405FF9 ; ---------------------------------------------------------------------------
.text:00405FFB                 align 10h
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: sub_4054B0+69↑j
.text:00406000                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00406007                 call    getenv
.text:0040600C                 test    eax, eax
.text:0040600E                 jz      loc_405524
.text:00406014                 jmp     loc_40551F
.text:00406014 ; ---------------------------------------------------------------------------
.text:00406019                 align 10h
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_4054B0+3F↑j
.text:00406020                 mov     dword ptr [ebp+0], 1
.text:00406027                 mov     ebx, 1
.text:0040602C                 jmp     loc_405500
.text:0040602C sub_4054B0      endp
.text:0040602C
.text:00406031 ; ---------------------------------------------------------------------------
.text:00406031                 jmp     short sub_406040
.text:00406031 ; ---------------------------------------------------------------------------
.text:00406033                 align 10h
.text:00406040
.text:00406040 ; =============== S U B R O U T I N E =======================================
.text:00406040
.text:00406040
.text:00406040 ; int __cdecl sub_406040(int, int, char *, int, int, int, int)
.text:00406040 sub_406040      proc near               ; CODE XREF: .text:00406031↑j
.text:00406040                                         ; sub_406B80+3A↓p ...
.text:00406040
.text:00406040 var_2C          = dword ptr -2Ch
.text:00406040 var_28          = dword ptr -28h
.text:00406040 Str             = dword ptr -24h
.text:00406040 var_20          = dword ptr -20h
.text:00406040 var_1C          = dword ptr -1Ch
.text:00406040 var_18          = dword ptr -18h
.text:00406040 var_14          = dword ptr -14h
.text:00406040 var_10          = dword ptr -10h
.text:00406040 arg_0           = dword ptr  4
.text:00406040 arg_4           = dword ptr  8
.text:00406040 arg_8           = dword ptr  0Ch
.text:00406040 arg_C           = dword ptr  10h
.text:00406040 arg_10          = dword ptr  14h
.text:00406040 arg_14          = dword ptr  18h
.text:00406040 arg_18          = dword ptr  1Ch
.text:00406040
.text:00406040                 sub     esp, 2Ch
.text:00406043                 mov     edx, dword_414010
.text:00406049                 mov     [esp+2Ch+var_10], offset dword_415020 ; int
.text:00406051                 mov     ecx, dword_414014
.text:00406057                 mov     ds:dword_415020, edx
.text:0040605D                 mov     edx, [esp+2Ch+arg_18]
.text:00406061                 mov     ds:dword_415024, ecx
.text:00406067                 mov     ecx, [esp+2Ch+arg_14]
.text:0040606B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040606F                 mov     edx, [esp+2Ch+arg_10]
.text:00406073                 mov     [esp+2Ch+var_18], ecx ; int
.text:00406077                 mov     ecx, [esp+2Ch+arg_C]
.text:0040607B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040607F                 mov     edx, [esp+2Ch+arg_8]
.text:00406083                 mov     [esp+2Ch+var_20], ecx ; int
.text:00406087                 mov     ecx, [esp+2Ch+arg_4]
.text:0040608B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040608F                 mov     edx, [esp+2Ch+arg_0]
.text:00406093                 mov     [esp+2Ch+var_28], ecx ; int
.text:00406097                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040609A                 call    sub_4054B0
.text:0040609F                 mov     ecx, ds:dword_415020
.text:004060A5                 mov     dword_414010, ecx
.text:004060AB                 mov     ecx, ds:dword_41502C
.text:004060B1                 mov     ds:dword_415EA0, ecx
.text:004060B7                 mov     ecx, ds:dword_415028
.text:004060BD                 mov     dword_414018, ecx
.text:004060C3                 add     esp, 2Ch
.text:004060C6                 retn
.text:004060C6 sub_406040      endp
.text:004060C6
.text:004060C6 ; ---------------------------------------------------------------------------
.text:004060C7                 align 10h
.text:004060D0                 sub     esp, 2Ch
.text:004060D3                 mov     edx, dword_414010
.text:004060D9                 mov     dword ptr [esp+1Ch], offset dword_415020
.text:004060E1                 mov     ecx, dword_414014
.text:004060E7                 mov     dword ptr [esp+18h], 1
.text:004060EF                 mov     ds:dword_415020, edx
.text:004060F5                 mov     edx, [esp+38h]
.text:004060F9                 mov     ds:dword_415024, ecx
.text:004060FF                 mov     ecx, [esp+34h]
.text:00406103                 mov     [esp+8], edx
.text:00406107                 mov     edx, [esp+30h]
.text:0040610B                 mov     [esp+4], ecx
.text:0040610F                 mov     dword ptr [esp+14h], 0
.text:00406117                 mov     dword ptr [esp+10h], 0
.text:0040611F                 mov     dword ptr [esp+0Ch], 0
.text:00406127                 mov     [esp], edx
.text:0040612A                 call    sub_4054B0
.text:0040612F                 mov     ecx, ds:dword_415020
.text:00406135                 mov     dword_414010, ecx
.text:0040613B                 mov     ecx, ds:dword_41502C
.text:00406141                 mov     ds:dword_415EA0, ecx
.text:00406147                 mov     ecx, ds:dword_415028
.text:0040614D                 mov     dword_414018, ecx
.text:00406153                 add     esp, 2Ch
.text:00406156                 retn
.text:00406156 ; ---------------------------------------------------------------------------
.text:00406157                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_4054B0+113↑p
.text:00406160                                         ; sub_4054B0+AB9↑p
.text:00406160
.text:00406160 var_2C          = dword ptr -2Ch
.text:00406160 var_28          = dword ptr -28h
.text:00406160 var_24          = dword ptr -24h
.text:00406160 var_20          = dword ptr -20h
.text:00406160 var_1C          = dword ptr -1Ch
.text:00406160 var_18          = dword ptr -18h
.text:00406160 var_14          = dword ptr -14h
.text:00406160 arg_0           = dword ptr  4
.text:00406160 arg_4           = dword ptr  8
.text:00406160
.text:00406160                 push    ebp
.text:00406161                 push    edi
.text:00406162                 push    esi
.text:00406163                 push    ebx
.text:00406164                 sub     esp, 1Ch
.text:00406167                 mov     ecx, [esp+2Ch+arg_4]
.text:0040616B                 mov     eax, [esp+2Ch+arg_4]
.text:0040616F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406173                 mov     edx, [ecx+20h]
.text:00406176                 mov     edi, [esp+2Ch+arg_0]
.text:0040617A                 mov     ecx, [ebx]
.text:0040617C                 mov     [esp+2Ch+var_2C], edx
.text:0040617F                 mov     [esp+2Ch+var_14], edx
.text:00406183                 mov     edx, [eax+24h]
.text:00406186                 mov     [esp+2Ch+var_28], ecx
.text:0040618A                 mov     [esp+2Ch+var_1C], ecx
.text:0040618E                 cmp     ecx, edx
.text:00406190                 mov     [esp+2Ch+var_18], edx
.text:00406194                 jle     short loc_406210
.text:00406196                 mov     esi, [esp+2Ch+var_2C]
.text:00406199                 cmp     edx, esi
.text:0040619B                 jle     short loc_406210
.text:0040619D                 lea     esi, [esi+0]
.text:004061A0
.text:004061A0 loc_4061A0:                             ; CODE XREF: sub_406160+A1↓j
.text:004061A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004061A4                 mov     edx, [esp+2Ch+var_18]
.text:004061A8                 mov     ebp, [esp+2Ch+var_18]
.text:004061AC                 mov     eax, [esp+2Ch+var_14]
.text:004061B0                 sub     ebx, edx
.text:004061B2                 mov     [esp+2Ch+var_20], ebx
.text:004061B6                 sub     ebp, eax
.text:004061B8                 cmp     ebx, ebp
.text:004061BA                 jle     short loc_406235
.text:004061BC                 xor     esi, esi
.text:004061BE                 cmp     esi, ebp
.text:004061C0                 jge     short loc_4061ED
.text:004061C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004061C6                 sub     ecx, ebp
.text:004061C8                 mov     [esp+2Ch+var_24], ecx
.text:004061CC                 lea     esi, [esi+0]
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_406160+8B↓j
.text:004061D0                 mov     ecx, [esp+2Ch+var_14]
.text:004061D4                 mov     edx, [esp+2Ch+var_24]
.text:004061D8                 add     ecx, esi
.text:004061DA                 add     edx, esi
.text:004061DC                 mov     ebx, [edi+ecx*4]
.text:004061DF                 mov     eax, [edi+edx*4]
.text:004061E2                 inc     esi
.text:004061E3                 cmp     esi, ebp
.text:004061E5                 mov     [edi+ecx*4], eax
.text:004061E8                 mov     [edi+edx*4], ebx
.text:004061EB                 jl      short loc_4061D0
.text:004061ED
.text:004061ED loc_4061ED:                             ; CODE XREF: sub_406160+60↑j
.text:004061ED                 sub     [esp+2Ch+var_1C], ebp
.text:004061F1
.text:004061F1 loc_4061F1:                             ; CODE XREF: sub_406160+107↓j
.text:004061F1                 mov     eax, [esp+2Ch+var_18]
.text:004061F5                 cmp     [esp+2Ch+var_1C], eax
.text:004061F9                 jle     short loc_406210
.text:004061FB                 mov     ebp, [esp+2Ch+var_14]
.text:004061FF                 cmp     eax, ebp
.text:00406201                 jg      short loc_4061A0
.text:00406203                 lea     esi, [esi+0]
.text:00406209                 lea     edi, [edi+0]
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_406160+34↑j
.text:00406210                                         ; sub_406160+3B↑j ...
.text:00406210                 mov     esi, [esp+2Ch+var_28]
.text:00406214                 mov     ecx, [esp+2Ch+var_18]
.text:00406218                 mov     eax, [esp+2Ch+var_2C]
.text:0040621B                 mov     edi, [esp+2Ch+arg_4]
.text:0040621F                 mov     edx, [esp+2Ch+var_28]
.text:00406223                 sub     esi, ecx
.text:00406225                 add     esi, eax
.text:00406227                 mov     [edi+20h], esi
.text:0040622A                 mov     [edi+24h], edx
.text:0040622D                 add     esp, 1Ch
.text:00406230                 pop     ebx
.text:00406231                 pop     esi
.text:00406232                 pop     edi
.text:00406233                 pop     ebp
.text:00406234                 retn
.text:00406235 ; ---------------------------------------------------------------------------
.text:00406235
.text:00406235 loc_406235:                             ; CODE XREF: sub_406160+5A↑j
.text:00406235                 xor     esi, esi
.text:00406237                 cmp     esi, [esp+2Ch+var_20]
.text:0040623B                 jge     short loc_40625F
.text:0040623D                 lea     esi, [esi+0]
.text:00406240
.text:00406240 loc_406240:                             ; CODE XREF: sub_406160+FD↓j
.text:00406240                 mov     ebx, [esp+2Ch+var_14]
.text:00406244                 mov     ebp, [esp+2Ch+var_18]
.text:00406248                 add     ebx, esi
.text:0040624A                 add     ebp, esi
.text:0040624C                 mov     edx, [edi+ebx*4]
.text:0040624F                 inc     esi
.text:00406250                 cmp     esi, [esp+2Ch+var_20]
.text:00406254                 mov     ecx, [edi+ebp*4]
.text:00406257                 mov     [edi+ebx*4], ecx
.text:0040625A                 mov     [edi+ebp*4], edx
.text:0040625D                 jl      short loc_406240
.text:0040625F
.text:0040625F loc_40625F:                             ; CODE XREF: sub_406160+DB↑j
.text:0040625F                 mov     esi, [esp+2Ch+var_20]
.text:00406263                 add     [esp+2Ch+var_14], esi
.text:00406267                 jmp     short loc_4061F1
.text:00406267 sub_406160      endp
.text:00406267
.text:00406267 ; ---------------------------------------------------------------------------
.text:00406269                 align 20h
.text:00406280 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00406280                                         ; DATA XREF: .data:Buffer↓o
.text:004062B2 ; const char Format[]
.text:004062B2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_406570+50↓o
.text:004062BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004062BE                                         ; DATA XREF: sub_406570:loc_406611↓o
.text:004062CE                 align 20h
.text:004062E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004062E0                                         ; DATA XREF: sub_406570+100↓o
.text:004062E0                 db 'ere is NO',0Ah
.text:004062E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004062E0                 db 'R PURPOSE.',0Ah,0
.text:00406378 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00406378                                         ; DATA XREF: sub_406570:loc_4066B1↓o
.text:0040638F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040638F                                         ; DATA XREF: sub_406570:loc_4066BD↓o
.text:004063AB                 align 20h
.text:004063C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004063C0                                         ; DATA XREF: sub_406570:loc_4066C9↓o
.text:004063C0                 db 'and %s.',0Ah,0
.text:004063E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004063E0                                         ; DATA XREF: sub_406570:loc_4066D5↓o
.text:004063E0                 db '%s, and %s.',0Ah,0
.text:00406404                 align 20h
.text:00406420 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00406420                                         ; DATA XREF: sub_406570:loc_4066E1↓o
.text:00406420                 db '%s, %s, and %s.',0Ah,0
.text:00406448                 align 20h
.text:00406460 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00406460                                         ; DATA XREF: sub_406570:loc_4066ED↓o
.text:00406460                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040648C                 align 20h
.text:004064A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004064A0                                         ; DATA XREF: sub_406570:loc_4066F9↓o
.text:004064A0                 db '%s, %s, %s, %s,',0Ah
.text:004064A0                 db 'and %s.',0Ah,0
.text:004064D0                 align 20h
.text:004064E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004064E0                                         ; DATA XREF: sub_406570:loc_406705↓o
.text:004064E0                 db '%s, %s, %s, %s,',0Ah
.text:004064E0                 db '%s, and %s.',0Ah,0
.text:00406514                 align 10h
.text:00406520 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00406520                                         ; DATA XREF: sub_406570:def_4065DD↓o
.text:00406520                 db '%s, %s, %s, %s,',0Ah
.text:00406520                 db '%s, %s, and others.',0Ah,0
.text:0040655C ; const char aSS_0[]
.text:0040655C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_406570+1B5↓o
.text:00406563                 align 10h
.text:00406570
.text:00406570 ; =============== S U B R O U T I N E =======================================
.text:00406570
.text:00406570
.text:00406570 ; int __cdecl sub_406570(FILE *, FILE *, int, int, va_list)
.text:00406570 sub_406570      proc near               ; CODE XREF: sub_406740+2A↓p
.text:00406570
.text:00406570 Stream          = dword ptr -2Ch
.text:00406570 Format          = dword ptr -28h
.text:00406570 ArgList         = dword ptr -24h
.text:00406570 var_20          = dword ptr -20h
.text:00406570 var_1C          = dword ptr -1Ch
.text:00406570 var_14          = dword ptr -14h
.text:00406570 arg_0           = dword ptr  4
.text:00406570 arg_4           = dword ptr  8
.text:00406570 arg_8           = dword ptr  0Ch
.text:00406570 arg_C           = dword ptr  10h
.text:00406570 arg_10          = dword ptr  14h
.text:00406570
.text:00406570                 push    ebp
.text:00406571                 push    edi
.text:00406572                 push    esi
.text:00406573                 push    ebx
.text:00406574                 sub     esp, 1Ch
.text:00406577                 xor     ebx, ebx
.text:00406579                 mov     edi, [esp+2Ch+arg_10]
.text:0040657D                 mov     edx, [esp+2Ch+arg_8]
.text:00406581                 mov     esi, [esp+2Ch+arg_0]
.text:00406585                 mov     eax, [edi]
.text:00406587                 mov     ecx, [esp+2Ch+arg_4]
.text:0040658B                 mov     [esp+2Ch+var_14], edx
.text:0040658F                 mov     ebp, [esp+2Ch+arg_C]
.text:00406593                 lea     edx, [edi+4]
.text:00406596                 test    eax, eax
.text:00406598                 jz      short loc_4065AC
.text:0040659A                 lea     esi, [esi+0]
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406570+3A↓j
.text:004065A0                 mov     eax, edx
.text:004065A2                 inc     ebx
.text:004065A3                 mov     eax, [eax]
.text:004065A5                 add     edx, 4
.text:004065A8                 test    eax, eax
.text:004065AA                 jnz     short loc_4065A0
.text:004065AC
.text:004065AC loc_4065AC:                             ; CODE XREF: sub_406570+28↑j
.text:004065AC                 test    ecx, ecx
.text:004065AE                 jz      loc_40671D
.text:004065B4                 mov     [esp+2Ch+var_1C], ebp
.text:004065B8                 mov     edx, [esp+2Ch+var_14]
.text:004065BC                 mov     [esp+2Ch+ArgList], ecx
.text:004065C0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004065C8                 mov     [esp+2Ch+var_20], edx
.text:004065CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004065CF                 call    fprintf
.text:004065D4
.text:004065D4 loc_4065D4:                             ; CODE XREF: sub_406570+1C9↓j
.text:004065D4                 cmp     ebx, 9          ; switch 10 cases
.text:004065D7                 ja      def_4065DD      ; jumptable 004065DD default case
.text:004065DD                 jmp     ds:jpt_4065DD[ebx*4] ; switch jump
.text:004065DD ; ---------------------------------------------------------------------------
.text:004065E4 jpt_4065DD      dd offset loc_40660C    ; DATA XREF: sub_406570+6D↑r
.text:004065E4                 dd offset loc_406611    ; jump table for switch statement
.text:004065E4                 dd offset loc_4066B1
.text:004065E4                 dd offset loc_4066BD
.text:004065E4                 dd offset loc_4066C9
.text:004065E4                 dd offset loc_4066D5
.text:004065E4                 dd offset loc_4066E1
.text:004065E4                 dd offset loc_4066ED
.text:004065E4                 dd offset loc_4066F9
.text:004065E4                 dd offset loc_406705
.text:0040660C ; ---------------------------------------------------------------------------
.text:0040660C
.text:0040660C loc_40660C:                             ; CODE XREF: sub_406570+6D↑j
.text:0040660C                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:0040660C                 call    abort           ; jumptable 004065DD case 0
.text:00406611 ; ---------------------------------------------------------------------------
.text:00406611
.text:00406611 loc_406611:                             ; CODE XREF: sub_406570+6D↑j
.text:00406611                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:00406611                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004065DD case 1
.text:00406618                 nop
.text:00406619                 lea     esi, [esi+0]
.text:00406620
.text:00406620 loc_406620:                             ; CODE XREF: sub_406570+148↓j
.text:00406620                                         ; sub_406570+154↓j ...
.text:00406620                 call    ds:libintl_gettext
.text:00406626                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040662A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040662D                 mov     [esp+2Ch+Format], eax ; Format
.text:00406631                 call    vfprintf
.text:00406636                 mov     ebx, [esi+4]
.text:00406639                 dec     ebx
.text:0040663A                 test    ebx, ebx
.text:0040663C                 mov     [esi+4], ebx
.text:0040663F                 js      short loc_40669F
.text:00406641                 mov     edi, [esi]
.text:00406643                 mov     byte ptr [edi], 0Ah
.text:00406646                 inc     dword ptr [esi]
.text:00406648
.text:00406648 loc_406648:                             ; CODE XREF: sub_406570+13F↓j
.text:00406648                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040664C                 mov     edx, Buffer
.text:00406652                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00406655                 call    fputs
.text:0040665A                 mov     ebp, [esi+4]
.text:0040665D                 dec     ebp
.text:0040665E                 test    ebp, ebp
.text:00406660                 mov     [esi+4], ebp
.text:00406663                 js      short loc_40668D
.text:00406665                 mov     ecx, [esi]
.text:00406667                 mov     byte ptr [ecx], 0Ah
.text:0040666A                 inc     dword ptr [esi]
.text:0040666C
.text:0040666C loc_40666C:                             ; CODE XREF: sub_406570+12D↓j
.text:0040666C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00406670                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00406677                 call    ds:libintl_gettext
.text:0040667D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00406681                 add     esp, 1Ch
.text:00406684                 pop     ebx
.text:00406685                 pop     esi
.text:00406686                 pop     edi
.text:00406687                 pop     ebp
.text:00406688                 jmp     fputs
.text:0040668D ; ---------------------------------------------------------------------------
.text:0040668D
.text:0040668D loc_40668D:                             ; CODE XREF: sub_406570+F3↑j
.text:0040668D                 mov     [esp+2Ch+Format], esi ; File
.text:00406691                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00406698                 call    _flsbuf
.text:0040669D                 jmp     short loc_40666C
.text:0040669F ; ---------------------------------------------------------------------------
.text:0040669F
.text:0040669F loc_40669F:                             ; CODE XREF: sub_406570+CF↑j
.text:0040669F                 mov     [esp+2Ch+Format], esi ; File
.text:004066A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004066AA                 call    _flsbuf
.text:004066AF                 jmp     short loc_406648
.text:004066B1 ; ---------------------------------------------------------------------------
.text:004066B1
.text:004066B1 loc_4066B1:                             ; CODE XREF: sub_406570+6D↑j
.text:004066B1                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004065DD case 2
.text:004066B8                 jmp     loc_406620
.text:004066BD ; ---------------------------------------------------------------------------
.text:004066BD
.text:004066BD loc_4066BD:                             ; CODE XREF: sub_406570+6D↑j
.text:004066BD                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004065DD case 3
.text:004066C4                 jmp     loc_406620
.text:004066C9 ; ---------------------------------------------------------------------------
.text:004066C9
.text:004066C9 loc_4066C9:                             ; CODE XREF: sub_406570+6D↑j
.text:004066C9                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004065DD case 4
.text:004066D0                 jmp     loc_406620
.text:004066D5 ; ---------------------------------------------------------------------------
.text:004066D5
.text:004066D5 loc_4066D5:                             ; CODE XREF: sub_406570+6D↑j
.text:004066D5                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004065DD case 5
.text:004066DC                 jmp     loc_406620
.text:004066E1 ; ---------------------------------------------------------------------------
.text:004066E1
.text:004066E1 loc_4066E1:                             ; CODE XREF: sub_406570+6D↑j
.text:004066E1                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004065DD case 6
.text:004066E8                 jmp     loc_406620
.text:004066ED ; ---------------------------------------------------------------------------
.text:004066ED
.text:004066ED loc_4066ED:                             ; CODE XREF: sub_406570+6D↑j
.text:004066ED                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004065DD case 7
.text:004066F4                 jmp     loc_406620
.text:004066F9 ; ---------------------------------------------------------------------------
.text:004066F9
.text:004066F9 loc_4066F9:                             ; CODE XREF: sub_406570+6D↑j
.text:004066F9                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004065DD case 8
.text:00406700                 jmp     loc_406620
.text:00406705 ; ---------------------------------------------------------------------------
.text:00406705
.text:00406705 loc_406705:                             ; CODE XREF: sub_406570+6D↑j
.text:00406705                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:00406705                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004065DD case 9
.text:0040670C                 jmp     loc_406620
.text:00406711 ; ---------------------------------------------------------------------------
.text:00406711
.text:00406711 def_4065DD:                             ; CODE XREF: sub_406570+67↑j
.text:00406711                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004065DD default case
.text:00406718                 jmp     loc_406620
.text:0040671D ; ---------------------------------------------------------------------------
.text:0040671D
.text:0040671D loc_40671D:                             ; CODE XREF: sub_406570+3E↑j
.text:0040671D                 mov     [esp+2Ch+var_20], ebp
.text:00406721                 mov     ecx, [esp+2Ch+var_14]
.text:00406725                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:0040672D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406730                 mov     [esp+2Ch+ArgList], ecx
.text:00406734                 call    fprintf
.text:00406739                 jmp     loc_4065D4
.text:00406739 sub_406570      endp
.text:00406739
.text:00406739 ; ---------------------------------------------------------------------------
.text:0040673E                 align 10h
.text:00406740
.text:00406740 ; =============== S U B R O U T I N E =======================================
.text:00406740
.text:00406740
.text:00406740 ; int __cdecl sub_406740(FILE *, FILE *, int, int, char)
.text:00406740 sub_406740      proc near               ; CODE XREF: sub_401E90+1AE↑p
.text:00406740
.text:00406740 var_1C          = dword ptr -1Ch
.text:00406740 var_18          = dword ptr -18h
.text:00406740 var_14          = dword ptr -14h
.text:00406740 var_10          = dword ptr -10h
.text:00406740 var_C           = dword ptr -0Ch
.text:00406740 arg_0           = dword ptr  4
.text:00406740 arg_4           = dword ptr  8
.text:00406740 arg_8           = dword ptr  0Ch
.text:00406740 arg_C           = dword ptr  10h
.text:00406740 arg_10          = byte ptr  14h
.text:00406740
.text:00406740                 sub     esp, 1Ch
.text:00406743                 mov     edx, [esp+1Ch+arg_C]
.text:00406747                 lea     ecx, [esp+1Ch+arg_10]
.text:0040674B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040674F                 mov     ecx, [esp+1Ch+arg_8]
.text:00406753                 mov     [esp+1Ch+var_10], edx ; int
.text:00406757                 mov     edx, [esp+1Ch+arg_4]
.text:0040675B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040675F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00406763                 mov     edx, [esp+1Ch+arg_0]
.text:00406767                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040676A                 call    sub_406570
.text:0040676F                 add     esp, 1Ch
.text:00406772                 retn
.text:00406772 sub_406740      endp
.text:00406772
.text:00406772 ; ---------------------------------------------------------------------------
.text:00406773                 align 10h
.text:00406780
.text:00406780 ; =============== S U B R O U T I N E =======================================
.text:00406780
.text:00406780
.text:00406780 ; int __cdecl sub_406780(int, char *)
.text:00406780 sub_406780      proc near               ; CODE XREF: sub_402B60+4A3↑p
.text:00406780                                         ; sub_402B60+4B9↑p
.text:00406780
.text:00406780 var_C           = dword ptr -0Ch
.text:00406780 var_8           = dword ptr -8
.text:00406780 var_4           = dword ptr -4
.text:00406780 arg_0           = dword ptr  4
.text:00406780 arg_4           = dword ptr  8
.text:00406780
.text:00406780                 sub     esp, 0Ch
.text:00406783                 mov     edx, [esp+0Ch+arg_4]
.text:00406787                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040678F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406793                 mov     edx, [esp+0Ch+arg_0]
.text:00406797                 mov     [esp+0Ch+var_C], edx ; int
.text:0040679A                 call    sub_408F90
.text:0040679F                 add     esp, 0Ch
.text:004067A2                 retn
.text:004067A2 sub_406780      endp
.text:004067A2
.text:004067A2 ; ---------------------------------------------------------------------------
.text:004067A3                 align 10h
.text:004067B0
.text:004067B0 ; =============== S U B R O U T I N E =======================================
.text:004067B0
.text:004067B0
.text:004067B0 ; int __cdecl sub_4067B0(char *)
.text:004067B0 sub_4067B0      proc near               ; CODE XREF: sub_401E90+45B↑p
.text:004067B0                                         ; sub_401E90+5C7↑p ...
.text:004067B0
.text:004067B0 var_C           = dword ptr -0Ch
.text:004067B0 var_8           = dword ptr -8
.text:004067B0 var_4           = dword ptr -4
.text:004067B0 arg_0           = dword ptr  4
.text:004067B0
.text:004067B0                 sub     esp, 0Ch
.text:004067B3                 mov     edx, [esp+0Ch+arg_0]
.text:004067B7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004067BF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004067C6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004067CA                 call    sub_408F90
.text:004067CF                 add     esp, 0Ch
.text:004067D2                 retn
.text:004067D2 sub_4067B0      endp
.text:004067D2
.text:004067D2 ; ---------------------------------------------------------------------------
.text:004067D3                 align 10h
.text:004067E0 aInvalidUser    db 'invalid user',0     ; DATA XREF: .data:off_414030↓o
.text:004067ED aInvalidGroup   db 'invalid group',0    ; DATA XREF: .data:off_414034↓o
.text:004067FB                 align 10h
.text:00406800 aCannotGetTheLo db 'cannot get the login group of a numeric UID',0
.text:00406800                                         ; DATA XREF: .data:off_414038↓o
.text:0040682C                 align 10h
.text:00406830
.text:00406830 ; =============== S U B R O U T I N E =======================================
.text:00406830
.text:00406830
.text:00406830 ; int __cdecl sub_406830(char *, int, int, int, int)
.text:00406830 sub_406830      proc near               ; CODE XREF: sub_401E90+443↑p
.text:00406830                                         ; sub_401E90+66C↑p
.text:00406830
.text:00406830 Str             = dword ptr -2Ch
.text:00406830 Val             = dword ptr -28h
.text:00406830 var_24          = dword ptr -24h
.text:00406830 var_20          = dword ptr -20h
.text:00406830 var_1C          = dword ptr -1Ch
.text:00406830 var_18          = dword ptr -18h
.text:00406830 var_10          = dword ptr -10h
.text:00406830 var_C           = dword ptr -0Ch
.text:00406830 var_8           = dword ptr -8
.text:00406830 var_4           = dword ptr -4
.text:00406830 arg_0           = dword ptr  4
.text:00406830 arg_4           = dword ptr  8
.text:00406830 arg_8           = dword ptr  0Ch
.text:00406830 arg_C           = dword ptr  10h
.text:00406830 arg_10          = dword ptr  14h
.text:00406830
.text:00406830                 sub     esp, 2Ch
.text:00406833                 mov     [esp+2Ch+var_8], edi
.text:00406837                 mov     edi, [esp+2Ch+arg_0]
.text:0040683B                 mov     [esp+2Ch+var_10], ebx
.text:0040683F                 mov     [esp+2Ch+var_C], esi
.text:00406843                 mov     [esp+2Ch+var_4], ebp
.text:00406847                 mov     ebp, [esp+2Ch+arg_10]
.text:0040684B                 mov     [esp+2Ch+Val], 3Ah ; ':' ; Val
.text:00406853                 mov     [esp+2Ch+Str], edi ; Str
.text:00406856                 call    strchr
.text:0040685B                 mov     [esp+2Ch+var_18], ebp ; int
.text:0040685F                 mov     edx, [esp+2Ch+arg_C]
.text:00406863                 mov     ebx, eax
.text:00406865                 mov     [esp+2Ch+Val], ebx ; int
.text:00406869                 mov     eax, [esp+2Ch+arg_8]
.text:0040686D                 mov     [esp+2Ch+Str], edi ; char *
.text:00406870                 mov     [esp+2Ch+var_1C], edx ; int
.text:00406874                 mov     edx, [esp+2Ch+arg_4]
.text:00406878                 mov     [esp+2Ch+var_20], eax ; int
.text:0040687C                 mov     [esp+2Ch+var_24], edx ; int
.text:00406880                 call    sub_406900
.text:00406885                 test    ebx, ebx
.text:00406887                 mov     esi, eax
.text:00406889                 jnz     short loc_4068B0
.text:0040688B                 test    eax, eax
.text:0040688D                 jz      short loc_4068B0
.text:0040688F                 mov     [esp+2Ch+Val], 2Eh ; '.' ; Val
.text:00406897                 mov     [esp+2Ch+Str], edi ; Str
.text:0040689A                 call    strchr
.text:0040689F                 test    eax, eax
.text:004068A1                 jnz     short loc_4068C6
.text:004068A3                 lea     esi, [esi+0]
.text:004068A9                 lea     edi, [edi+0]
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: sub_406830+59↑j
.text:004068B0                                         ; sub_406830+5D↑j ...
.text:004068B0                 mov     eax, esi
.text:004068B2                 mov     ebx, [esp+2Ch+var_10]
.text:004068B6                 mov     esi, [esp+2Ch+var_C]
.text:004068BA                 mov     edi, [esp+2Ch+var_8]
.text:004068BE                 mov     ebp, [esp+2Ch+var_4]
.text:004068C2                 add     esp, 2Ch
.text:004068C5                 retn
.text:004068C6 ; ---------------------------------------------------------------------------
.text:004068C6
.text:004068C6 loc_4068C6:                             ; CODE XREF: sub_406830+71↑j
.text:004068C6                 mov     [esp+2Ch+var_18], ebp ; int
.text:004068CA                 mov     ebx, [esp+2Ch+arg_C]
.text:004068CE                 mov     ecx, [esp+2Ch+arg_8]
.text:004068D2                 mov     [esp+2Ch+Val], eax ; int
.text:004068D6                 mov     ebp, [esp+2Ch+arg_4]
.text:004068DA                 mov     [esp+2Ch+var_1C], ebx ; int
.text:004068DE                 mov     [esp+2Ch+var_20], ecx ; int
.text:004068E2                 mov     [esp+2Ch+var_24], ebp ; int
.text:004068E6                 mov     [esp+2Ch+Str], edi ; char *
.text:004068E9                 call    sub_406900
.text:004068EE                 test    eax, eax
.text:004068F0                 setz    bl
.text:004068F3                 movzx   ecx, bl
.text:004068F6                 dec     ecx
.text:004068F7                 and     esi, ecx
.text:004068F9                 jmp     short loc_4068B0
.text:004068F9 sub_406830      endp
.text:004068F9
.text:004068F9 ; ---------------------------------------------------------------------------
.text:004068FB ; const char byte_4068FB
.text:004068FB byte_4068FB     db 0                    ; DATA XREF: sub_406900:loc_406A39↓o
.text:004068FB                                         ; sub_406900:loc_406AD9↓o
.text:004068FC                 align 10h
.text:00406900
.text:00406900 ; =============== S U B R O U T I N E =======================================
.text:00406900
.text:00406900
.text:00406900 ; int __cdecl sub_406900(char *, int, int, int, int, int)
.text:00406900 sub_406900      proc near               ; CODE XREF: sub_406830+50↑p
.text:00406900                                         ; sub_406830+B9↑p
.text:00406900
.text:00406900 Block           = dword ptr -7Ch
.text:00406900 var_78          = dword ptr -78h
.text:00406900 var_74          = dword ptr -74h
.text:00406900 var_70          = dword ptr -70h
.text:00406900 Str             = dword ptr -6Ch
.text:00406900 var_50          = dword ptr -50h
.text:00406900 var_4C          = dword ptr -4Ch
.text:00406900 var_48          = dword ptr -48h
.text:00406900 var_44          = dword ptr -44h
.text:00406900 var_40          = dword ptr -40h
.text:00406900 var_3C          = byte ptr -3Ch
.text:00406900 arg_0           = dword ptr  4
.text:00406900 arg_4           = dword ptr  8
.text:00406900 arg_8           = dword ptr  0Ch
.text:00406900 arg_C           = dword ptr  10h
.text:00406900 arg_10          = dword ptr  14h
.text:00406900 arg_14          = dword ptr  18h
.text:00406900
.text:00406900                 push    ebp
.text:00406901                 push    edi
.text:00406902                 push    esi
.text:00406903                 push    ebx
.text:00406904                 sub     esp, 6Ch
.text:00406907                 mov     ecx, [esp+7Ch+arg_8]
.text:0040690E                 mov     [esp+7Ch+var_4C], 0
.text:00406916                 mov     edi, [esp+7Ch+arg_C]
.text:0040691D                 mov     esi, [esp+7Ch+arg_4]
.text:00406924                 mov     [esp+7Ch+var_48], 0
.text:0040692C                 mov     ebp, [ecx]
.text:0040692E                 mov     ecx, [esp+7Ch+arg_14]
.text:00406935                 mov     edx, [esp+7Ch+arg_0]
.text:0040693C                 mov     ebx, [edi]
.text:0040693E                 xor     edi, edi
.text:00406940                 mov     dword ptr [ecx], 0
.text:00406946                 test    esi, esi
.text:00406948                 mov     ecx, [esp+7Ch+arg_10]
.text:0040694F                 mov     [esp+7Ch+var_50], ebx
.text:00406953                 mov     dword ptr [ecx], 0
.text:00406959                 jz      loc_406B51
.text:0040695F                 mov     ebx, esi
.text:00406961                 sub     ebx, edx
.text:00406963                 jnz     loc_406B37
.text:00406969
.text:00406969 loc_406969:                             ; CODE XREF: sub_406900+24C↓j
.text:00406969                                         ; sub_406900+254↓j
.text:00406969                 test    esi, esi
.text:0040696B                 jz      loc_406B30
.text:00406971                 cmp     byte ptr [esi+1], 0
.text:00406975                 jz      loc_406B30
.text:0040697B                 lea     ebx, [esi+1]
.text:0040697E
.text:0040697E loc_40697E:                             ; CODE XREF: sub_406900+232↓j
.text:0040697E                 test    edi, edi
.text:00406980                 jz      short loc_4069A2
.text:00406982                 mov     [esp+7Ch+Block], edi ; char *
.text:00406985                 call    sub_40DB90
.text:0040698A                 test    eax, eax
.text:0040698C                 jz      loc_406AD1
.text:00406992                 test    ebx, ebx
.text:00406994                 mov     ebp, [eax+8]
.text:00406997                 jz      loc_406A80
.text:0040699D
.text:0040699D loc_40699D:                             ; CODE XREF: sub_406900+182↓j
.text:0040699D                                         ; sub_406900+1AE↓j ...
.text:0040699D                 call    nullsub_2
.text:004069A2
.text:004069A2 loc_4069A2:                             ; CODE XREF: sub_406900+80↑j
.text:004069A2                 test    ebx, ebx
.text:004069A4                 jz      short loc_406A00
.text:004069A6                 mov     esi, [esp+7Ch+var_48]
.text:004069AA                 test    esi, esi
.text:004069AC                 jz      short loc_4069D7
.text:004069AE
.text:004069AE loc_4069AE:                             ; CODE XREF: sub_406900+106↓j
.text:004069AE                 mov     ebp, [esp+7Ch+var_4C]
.text:004069B2                 mov     [esp+7Ch+Block], ebp ; Block
.text:004069B5                 call    free
.text:004069BA
.text:004069BA loc_4069BA:                             ; CODE XREF: sub_406900+137↓j
.text:004069BA                 mov     [esp+7Ch+Block], edi ; Block
.text:004069BD                 call    free
.text:004069C2                 mov     eax, [esp+7Ch+var_48]
.text:004069C6                 mov     [esp+7Ch+Block], eax
.text:004069C9                 call    ds:libintl_gettext
.text:004069CF                 add     esp, 6Ch
.text:004069D2                 pop     ebx
.text:004069D3                 pop     esi
.text:004069D4                 pop     edi
.text:004069D5                 pop     ebp
.text:004069D6                 retn
.text:004069D7 ; ---------------------------------------------------------------------------
.text:004069D7
.text:004069D7 loc_4069D7:                             ; CODE XREF: sub_406900+AC↑j
.text:004069D7                 mov     [esp+7Ch+Block], ebx
.text:004069DA                 call    sub_40DB60
.text:004069DF                 test    eax, eax
.text:004069E1                 jz      short loc_406A39
.text:004069E3                 mov     eax, [eax+8]
.text:004069E6
.text:004069E6 loc_4069E6:                             ; CODE XREF: sub_406900+169↓j
.text:004069E6                 mov     [esp+7Ch+var_50], eax
.text:004069EA
.text:004069EA loc_4069EA:                             ; CODE XREF: sub_406900+177↓j
.text:004069EA                 call    nullsub_3
.text:004069EF                 mov     [esp+7Ch+Block], ebx ; char *
.text:004069F2                 call    sub_406FD0
.text:004069F7                 mov     [esp+7Ch+var_4C], eax
.text:004069FB                 nop
.text:004069FC                 lea     esi, [esi+0]
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: sub_406900+A4↑j
.text:00406A00                 mov     ebx, [esp+7Ch+var_48]
.text:00406A04                 test    ebx, ebx
.text:00406A06                 jnz     short loc_4069AE
.text:00406A08                 mov     ebx, [esp+7Ch+arg_8]
.text:00406A0F                 mov     esi, [esp+7Ch+arg_10]
.text:00406A16                 mov     edx, [esp+7Ch+var_50]
.text:00406A1A                 mov     [ebx], ebp
.text:00406A1C                 mov     ecx, [esp+7Ch+arg_C]
.text:00406A23                 mov     ebp, [esp+7Ch+arg_14]
.text:00406A2A                 mov     [esi], edi
.text:00406A2C                 mov     edi, [esp+7Ch+var_4C]
.text:00406A30                 mov     [ecx], edx
.text:00406A32                 mov     [ebp+0], edi
.text:00406A35                 xor     edi, edi
.text:00406A37                 jmp     short loc_4069BA
.text:00406A39 ; ---------------------------------------------------------------------------
.text:00406A39
.text:00406A39 loc_406A39:                             ; CODE XREF: sub_406900+E1↑j
.text:00406A39                 mov     [esp+7Ch+Str], offset byte_4068FB ; Str
.text:00406A41                 lea     ecx, [esp+7Ch+var_44]
.text:00406A45                 mov     [esp+7Ch+var_70], ecx ; int
.text:00406A49                 mov     [esp+7Ch+var_74], 0Ah ; int
.text:00406A51                 mov     [esp+7Ch+var_78], 0 ; int
.text:00406A59                 mov     [esp+7Ch+Block], ebx ; int
.text:00406A5C                 call    sub_4095E0
.text:00406A61                 test    eax, eax
.text:00406A63                 jnz     short loc_406A6E
.text:00406A65                 mov     eax, [esp+7Ch+var_44]
.text:00406A69                 jmp     loc_4069E6
.text:00406A6E ; ---------------------------------------------------------------------------
.text:00406A6E
.text:00406A6E loc_406A6E:                             ; CODE XREF: sub_406900+163↑j
.text:00406A6E                 mov     eax, off_414034 ; "invalid group"
.text:00406A73                 mov     [esp+7Ch+var_48], eax
.text:00406A77                 jmp     loc_4069EA
.text:00406A77 ; ---------------------------------------------------------------------------
.text:00406A7C                 align 10h
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: sub_406900+97↑j
.text:00406A80                 test    esi, esi
.text:00406A82                 jz      loc_40699D
.text:00406A88                 mov     ecx, [eax+0Ch]
.text:00406A8B                 mov     [esp+7Ch+var_50], ecx
.text:00406A8F                 mov     [esp+7Ch+Block], ecx
.text:00406A92                 call    sub_40D610
.text:00406A97                 test    eax, eax
.text:00406A99                 jz      short loc_406AB3
.text:00406A9B                 mov     eax, [eax]
.text:00406A9D
.text:00406A9D loc_406A9D:                             ; CODE XREF: sub_406900+1CF↓j
.text:00406A9D                 mov     [esp+7Ch+Block], eax ; char *
.text:00406AA0                 call    sub_406FD0
.text:00406AA5                 mov     [esp+7Ch+var_4C], eax
.text:00406AA9                 call    nullsub_3
.text:00406AAE                 jmp     loc_40699D
.text:00406AB3 ; ---------------------------------------------------------------------------
.text:00406AB3
.text:00406AB3 loc_406AB3:                             ; CODE XREF: sub_406900+199↑j
.text:00406AB3                 mov     [esp+7Ch+var_78], 0
.text:00406ABB                 mov     eax, [esp+7Ch+var_50]
.text:00406ABF                 lea     edx, [esp+7Ch+var_3C]
.text:00406AC3                 mov     [esp+7Ch+var_74], edx
.text:00406AC7                 mov     [esp+7Ch+Block], eax
.text:00406ACA                 call    sub_4070A0
.text:00406ACF                 jmp     short loc_406A9D
.text:00406AD1 ; ---------------------------------------------------------------------------
.text:00406AD1
.text:00406AD1 loc_406AD1:                             ; CODE XREF: sub_406900+8C↑j
.text:00406AD1                 test    esi, esi
.text:00406AD3                 jz      short loc_406AD9
.text:00406AD5                 test    ebx, ebx
.text:00406AD7                 jz      short loc_406B1D
.text:00406AD9
.text:00406AD9 loc_406AD9:                             ; CODE XREF: sub_406900+1D3↑j
.text:00406AD9                 mov     [esp+7Ch+Str], offset byte_4068FB ; Str
.text:00406AE1                 lea     edx, [esp+7Ch+var_40]
.text:00406AE5                 mov     [esp+7Ch+var_70], edx ; int
.text:00406AE9                 mov     [esp+7Ch+var_74], 0Ah ; int
.text:00406AF1                 mov     [esp+7Ch+var_78], 0 ; int
.text:00406AF9                 mov     [esp+7Ch+Block], edi ; int
.text:00406AFC                 call    sub_4095E0
.text:00406B01                 test    eax, eax
.text:00406B03                 jnz     short loc_406B0E
.text:00406B05                 mov     ebp, [esp+7Ch+var_40]
.text:00406B09                 jmp     loc_40699D
.text:00406B0E ; ---------------------------------------------------------------------------
.text:00406B0E
.text:00406B0E loc_406B0E:                             ; CODE XREF: sub_406900+203↑j
.text:00406B0E                 mov     esi, off_414030 ; "invalid user"
.text:00406B14                 mov     [esp+7Ch+var_48], esi
.text:00406B18                 jmp     loc_40699D
.text:00406B1D ; ---------------------------------------------------------------------------
.text:00406B1D
.text:00406B1D loc_406B1D:                             ; CODE XREF: sub_406900+1D7↑j
.text:00406B1D                 mov     eax, off_414038 ; "cannot get the login group of a numeric"...
.text:00406B22                 mov     [esp+7Ch+var_48], eax
.text:00406B26                 jmp     loc_40699D
.text:00406B26 ; ---------------------------------------------------------------------------
.text:00406B2B                 align 10h
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: sub_406900+6B↑j
.text:00406B30                                         ; sub_406900+75↑j
.text:00406B30                 xor     ebx, ebx
.text:00406B32                 jmp     loc_40697E
.text:00406B37 ; ---------------------------------------------------------------------------
.text:00406B37
.text:00406B37 loc_406B37:                             ; CODE XREF: sub_406900+63↑j
.text:00406B37                 mov     [esp+7Ch+Block], edx ; void *
.text:00406B3A                 lea     edi, [ebx+1]
.text:00406B3D                 mov     [esp+7Ch+var_78], edi ; size_t
.text:00406B41                 call    sub_406F90
.text:00406B46                 mov     byte ptr [ebx+eax], 0
.text:00406B4A
.text:00406B4A loc_406B4A:                             ; CODE XREF: sub_406900+262↓j
.text:00406B4A                 mov     edi, eax
.text:00406B4C                 jmp     loc_406969
.text:00406B51 ; ---------------------------------------------------------------------------
.text:00406B51
.text:00406B51 loc_406B51:                             ; CODE XREF: sub_406900+59↑j
.text:00406B51                 cmp     byte ptr [edx], 0
.text:00406B54                 jz      loc_406969
.text:00406B5A                 mov     [esp+7Ch+Block], edx ; char *
.text:00406B5D                 call    sub_406FD0
.text:00406B62                 jmp     short loc_406B4A
.text:00406B62 sub_406900      endp
.text:00406B62
.text:00406B62 ; ---------------------------------------------------------------------------
.text:00406B64                 align 20h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80
.text:00406B80 ; int __cdecl sub_406B80(int, int, char *, int, int)
.text:00406B80 sub_406B80      proc near               ; CODE XREF: sub_401E90+DF↑p
.text:00406B80
.text:00406B80 var_1C          = dword ptr -1Ch
.text:00406B80 var_18          = dword ptr -18h
.text:00406B80 var_14          = dword ptr -14h
.text:00406B80 var_10          = dword ptr -10h
.text:00406B80 var_C           = dword ptr -0Ch
.text:00406B80 var_8           = dword ptr -8
.text:00406B80 var_4           = dword ptr -4
.text:00406B80 arg_0           = dword ptr  4
.text:00406B80 arg_4           = dword ptr  8
.text:00406B80 arg_8           = dword ptr  0Ch
.text:00406B80 arg_C           = dword ptr  10h
.text:00406B80 arg_10          = dword ptr  14h
.text:00406B80
.text:00406B80                 sub     esp, 1Ch
.text:00406B83                 mov     edx, [esp+1Ch+arg_C]
.text:00406B87                 mov     [esp+1Ch+var_4], 0 ; int
.text:00406B8F                 mov     ecx, [esp+1Ch+arg_10]
.text:00406B93                 mov     [esp+1Ch+var_8], 0 ; int
.text:00406B9B                 mov     [esp+1Ch+var_10], edx ; int
.text:00406B9F                 mov     edx, [esp+1Ch+arg_4]
.text:00406BA3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00406BA7                 mov     ecx, [esp+1Ch+arg_8]
.text:00406BAB                 mov     [esp+1Ch+var_18], edx ; int
.text:00406BAF                 mov     edx, [esp+1Ch+arg_0]
.text:00406BB3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00406BB7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00406BBA                 call    sub_406040
.text:00406BBF                 add     esp, 1Ch
.text:00406BC2                 retn
.text:00406BC2 sub_406B80      endp
.text:00406BC2
.text:00406BC2 ; ---------------------------------------------------------------------------
.text:00406BC3                 align 10h
.text:00406BD0                 sub     esp, 2Ch
.text:00406BD3                 mov     edx, [esp+44h]
.text:00406BD7                 mov     dword ptr [esp+18h], 0
.text:00406BDF                 mov     ecx, [esp+40h]
.text:00406BE3                 mov     dword ptr [esp+14h], 0
.text:00406BEB                 mov     [esp+1Ch], edx
.text:00406BEF                 mov     edx, [esp+3Ch]
.text:00406BF3                 mov     [esp+10h], ecx
.text:00406BF7                 mov     ecx, [esp+38h]
.text:00406BFB                 mov     [esp+0Ch], edx
.text:00406BFF                 mov     edx, [esp+34h]
.text:00406C03                 mov     [esp+8], ecx
.text:00406C07                 mov     [esp+4], edx
.text:00406C0B                 mov     edx, [esp+30h]
.text:00406C0F                 mov     [esp], edx
.text:00406C12                 call    sub_4054B0
.text:00406C17                 add     esp, 2Ch
.text:00406C1A                 retn
.text:00406C1A ; ---------------------------------------------------------------------------
.text:00406C1B                 align 10h
.text:00406C20                 sub     esp, 1Ch
.text:00406C23                 mov     edx, [esp+2Ch]
.text:00406C27                 mov     dword ptr [esp+18h], 0
.text:00406C2F                 mov     ecx, [esp+30h]
.text:00406C33                 mov     dword ptr [esp+14h], 1
.text:00406C3B                 mov     [esp+0Ch], edx
.text:00406C3F                 mov     edx, [esp+24h]
.text:00406C43                 mov     [esp+10h], ecx
.text:00406C47                 mov     ecx, [esp+28h]
.text:00406C4B                 mov     [esp+4], edx
.text:00406C4F                 mov     edx, [esp+20h]
.text:00406C53                 mov     [esp+8], ecx
.text:00406C57                 mov     [esp], edx
.text:00406C5A                 call    sub_406040
.text:00406C5F                 add     esp, 1Ch
.text:00406C62                 retn
.text:00406C62 ; ---------------------------------------------------------------------------
.text:00406C63                 align 10h
.text:00406C70                 sub     esp, 2Ch
.text:00406C73                 mov     edx, [esp+44h]
.text:00406C77                 mov     dword ptr [esp+18h], 0
.text:00406C7F                 mov     ecx, [esp+40h]
.text:00406C83                 mov     dword ptr [esp+14h], 1
.text:00406C8B                 mov     [esp+1Ch], edx
.text:00406C8F                 mov     edx, [esp+3Ch]
.text:00406C93                 mov     [esp+10h], ecx
.text:00406C97                 mov     ecx, [esp+38h]
.text:00406C9B                 mov     [esp+0Ch], edx
.text:00406C9F                 mov     edx, [esp+34h]
.text:00406CA3                 mov     [esp+8], ecx
.text:00406CA7                 mov     [esp+4], edx
.text:00406CAB                 mov     edx, [esp+30h]
.text:00406CAF                 mov     [esp], edx
.text:00406CB2                 call    sub_4054B0
.text:00406CB7                 add     esp, 2Ch
.text:00406CBA                 retn
.text:00406CBA ; ---------------------------------------------------------------------------
.text:00406CBB                 align 10h
.text:00406CC0                 mov     edx, [esp+4]
.text:00406CC4                 mov     ds:dword_415050, edx
.text:00406CCA                 retn
.text:00406CCA ; ---------------------------------------------------------------------------
.text:00406CCB aWriteError     db 'write error',0      ; DATA XREF: sub_406CF0:loc_406D39↓o
.text:00406CD7 ; const char aSS_1[]
.text:00406CD7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_406CF0+77↓o
.text:00406CDE ; const char aS_2[]
.text:00406CDE aS_2            db '%s',0               ; DATA XREF: sub_406CF0+A0↓o
.text:00406CE1 ; ---------------------------------------------------------------------------
.text:00406CE1                 jmp     short sub_406CF0
.text:00406CE1 ; ---------------------------------------------------------------------------
.text:00406CE3                 align 10h
.text:00406CF0
.text:00406CF0 ; =============== S U B R O U T I N E =======================================
.text:00406CF0
.text:00406CF0
.text:00406CF0 ; void __cdecl sub_406CF0()
.text:00406CF0 sub_406CF0      proc near               ; CODE XREF: .text:00406CE1↑j
.text:00406CF0                                         ; DATA XREF: sub_401E90+A8↑o
.text:00406CF0
.text:00406CF0 Stream          = dword ptr -2Ch
.text:00406CF0 ErrorMessage    = dword ptr -28h
.text:00406CF0 var_24          = dword ptr -24h
.text:00406CF0 var_20          = byte ptr -20h
.text:00406CF0 var_1C          = dword ptr -1Ch
.text:00406CF0 var_9           = byte ptr -9
.text:00406CF0
.text:00406CF0                 push    esi
.text:00406CF1                 push    ebx
.text:00406CF2                 sub     esp, 24h
.text:00406CF5                 mov     edx, ds:_iob
.text:00406CFB                 mov     ecx, [edx+2Ch]
.text:00406CFE                 lea     esi, [edx+20h]
.text:00406D01                 shr     ecx, 5
.text:00406D04                 mov     bl, cl
.text:00406D06                 mov     ecx, [edx+20h]
.text:00406D09                 and     bl, 1
.text:00406D0C                 cmp     ecx, [esi+8]
.text:00406D0F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406D12                 setz    [esp+2Ch+var_9]
.text:00406D17                 call    fclose
.text:00406D1C                 test    eax, eax
.text:00406D1E                 setnz   al
.text:00406D21                 test    bl, bl
.text:00406D23                 jnz     loc_406DB3
.text:00406D29                 test    al, al
.text:00406D2B                 jz      short loc_406D80
.text:00406D2D
.text:00406D2D loc_406D2D:                             ; CODE XREF: sub_406CF0+CD↓j
.text:00406D2D                 call    _errno
.text:00406D32                 mov     esi, [eax]
.text:00406D34
.text:00406D34 loc_406D34:                             ; CODE XREF: sub_406CF0+C7↓j
.text:00406D34                 cmp     esi, 9
.text:00406D37                 jz      short loc_406DA6
.text:00406D39
.text:00406D39 loc_406D39:                             ; CODE XREF: sub_406CF0+B8↓j
.text:00406D39                                         ; sub_406CF0+C1↓j
.text:00406D39                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406D40                 call    ds:libintl_gettext
.text:00406D46                 mov     ebx, eax
.text:00406D48                 mov     eax, ds:dword_415050
.text:00406D4D                 test    eax, eax
.text:00406D4F                 jz      short loc_406D86
.text:00406D51                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406D54                 call    sub_409300
.text:00406D59                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00406D5D                 mov     edx, Code
.text:00406D63                 mov     [esp+2Ch+var_1C], ebx
.text:00406D67                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:00406D6F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406D73                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406D76                 call    sub_409BA0
.text:00406D7B                 nop
.text:00406D7C                 lea     esi, [esi+0]
.text:00406D80
.text:00406D80 loc_406D80:                             ; CODE XREF: sub_406CF0+3B↑j
.text:00406D80                                         ; sub_406CF0+B4↓j ...
.text:00406D80                 add     esp, 24h
.text:00406D83                 pop     ebx
.text:00406D84                 pop     esi
.text:00406D85                 retn
.text:00406D86 ; ---------------------------------------------------------------------------
.text:00406D86
.text:00406D86 loc_406D86:                             ; CODE XREF: sub_406CF0+5F↑j
.text:00406D86                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00406D8A                 mov     ebx, Code
.text:00406D90                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00406D98                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406D9C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00406D9F                 call    sub_409BA0
.text:00406DA4                 jmp     short loc_406D80
.text:00406DA6 ; ---------------------------------------------------------------------------
.text:00406DA6
.text:00406DA6 loc_406DA6:                             ; CODE XREF: sub_406CF0+47↑j
.text:00406DA6                 test    bl, bl
.text:00406DA8                 jnz     short loc_406D39
.text:00406DAA                 cmp     [esp+2Ch+var_9], 0
.text:00406DAF                 jnz     short loc_406D80
.text:00406DB1                 jmp     short loc_406D39
.text:00406DB3 ; ---------------------------------------------------------------------------
.text:00406DB3
.text:00406DB3 loc_406DB3:                             ; CODE XREF: sub_406CF0+33↑j
.text:00406DB3                 xor     esi, esi
.text:00406DB5                 test    al, al
.text:00406DB7                 jz      loc_406D34
.text:00406DBD                 jmp     loc_406D2D
.text:00406DBD sub_406CF0      endp
.text:00406DBD
.text:00406DBD ; ---------------------------------------------------------------------------
.text:00406DC2                 align 10h
.text:00406DD0                 sub     esp, 0Ch
.text:00406DD3                 xor     edx, edx
.text:00406DD5                 mov     ecx, [esp+14h]
.text:00406DD9                 mov     [esp+8], ebx
.text:00406DDD                 mov     eax, 0FFFFFFFFh
.text:00406DE2                 mov     ebx, [esp+10h]
.text:00406DE6                 div     ecx
.text:00406DE8                 cmp     eax, ebx
.text:00406DEA                 jb      short loc_406E09
.text:00406DEC                 mov     edx, ebx
.text:00406DEE                 imul    edx, ecx
.text:00406DF1                 mov     [esp], edx
.text:00406DF4                 call    malloc
.text:00406DF9                 test    eax, eax
.text:00406DFB                 jz      short loc_406E05
.text:00406DFD
.text:00406DFD loc_406DFD:                             ; CODE XREF: .text:00406E07↓j
.text:00406DFD                 mov     ebx, [esp+8]
.text:00406E01                 add     esp, 0Ch
.text:00406E04                 retn
.text:00406E05 ; ---------------------------------------------------------------------------
.text:00406E05
.text:00406E05 loc_406E05:                             ; CODE XREF: .text:00406DFB↑j
.text:00406E05                 test    ebx, ebx
.text:00406E07                 jz      short loc_406DFD
.text:00406E09
.text:00406E09 loc_406E09:                             ; CODE XREF: .text:00406DEA↑j
.text:00406E09                 call    sub_408190
.text:00406E09 ; ---------------------------------------------------------------------------
.text:00406E0E                 align 10h
.text:00406E10
.text:00406E10 ; =============== S U B R O U T I N E =======================================
.text:00406E10
.text:00406E10
.text:00406E10 ; int __cdecl sub_406E10(size_t)
.text:00406E10 sub_406E10      proc near               ; CODE XREF: sub_403380+51↑p
.text:00406E10                                         ; .text:00408CD9↓p ...
.text:00406E10
.text:00406E10 Size            = dword ptr -0Ch
.text:00406E10 var_4           = dword ptr -4
.text:00406E10 arg_0           = dword ptr  4
.text:00406E10
.text:00406E10                 sub     esp, 0Ch
.text:00406E13                 mov     [esp+0Ch+var_4], ebx
.text:00406E17                 mov     ebx, [esp+0Ch+arg_0]
.text:00406E1B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406E1E                 call    malloc
.text:00406E23                 test    eax, eax
.text:00406E25                 jz      short loc_406E30
.text:00406E27
.text:00406E27 loc_406E27:                             ; CODE XREF: sub_406E10+22↓j
.text:00406E27                 mov     ebx, [esp+0Ch+var_4]
.text:00406E2B                 add     esp, 0Ch
.text:00406E2E                 retn
.text:00406E2E ; ---------------------------------------------------------------------------
.text:00406E2F                 align 10h
.text:00406E30
.text:00406E30 loc_406E30:                             ; CODE XREF: sub_406E10+15↑j
.text:00406E30                 test    ebx, ebx
.text:00406E32                 jz      short loc_406E27
.text:00406E34                 call    sub_408190
.text:00406E34 sub_406E10      endp
.text:00406E34
.text:00406E34 ; ---------------------------------------------------------------------------
.text:00406E39                 align 10h
.text:00406E40                 sub     esp, 1Ch
.text:00406E43                 xor     edx, edx
.text:00406E45                 mov     eax, 0FFFFFFFFh
.text:00406E4A                 mov     [esp+14h], ebx
.text:00406E4E                 mov     ecx, [esp+20h]
.text:00406E52                 mov     ebx, [esp+28h]
.text:00406E56                 mov     [esp+18h], esi
.text:00406E5A                 mov     esi, [esp+24h]
.text:00406E5E                 div     ebx
.text:00406E60                 cmp     eax, esi
.text:00406E62                 jb      short loc_406E94
.text:00406E64                 mov     [esp], ecx
.text:00406E67                 mov     edx, esi
.text:00406E69                 imul    edx, ebx
.text:00406E6C                 mov     [esp+4], edx
.text:00406E70                 call    realloc
.text:00406E75                 test    eax, eax
.text:00406E77                 mov     ecx, eax
.text:00406E79                 jz      short loc_406E90
.text:00406E7B
.text:00406E7B loc_406E7B:                             ; CODE XREF: .text:00406E92↓j
.text:00406E7B                 mov     ebx, [esp+14h]
.text:00406E7F                 mov     eax, ecx
.text:00406E81                 mov     esi, [esp+18h]
.text:00406E85                 add     esp, 1Ch
.text:00406E88                 retn
.text:00406E88 ; ---------------------------------------------------------------------------
.text:00406E89                 align 10h
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: .text:00406E79↑j
.text:00406E90                 test    esi, esi
.text:00406E92                 jz      short loc_406E7B
.text:00406E94
.text:00406E94 loc_406E94:                             ; CODE XREF: .text:00406E62↑j
.text:00406E94                 call    sub_408190
.text:00406E94 ; ---------------------------------------------------------------------------
.text:00406E99                 align 10h
.text:00406EA0
.text:00406EA0 ; =============== S U B R O U T I N E =======================================
.text:00406EA0
.text:00406EA0
.text:00406EA0 ; int __cdecl sub_406EA0(void *, size_t)
.text:00406EA0 sub_406EA0      proc near               ; CODE XREF: sub_4093A0+5B↓p
.text:00406EA0
.text:00406EA0 Block           = dword ptr -0Ch
.text:00406EA0 Size            = dword ptr -8
.text:00406EA0 var_4           = dword ptr -4
.text:00406EA0 arg_0           = dword ptr  4
.text:00406EA0 arg_4           = dword ptr  8
.text:00406EA0
.text:00406EA0                 sub     esp, 0Ch
.text:00406EA3                 mov     edx, [esp+0Ch+arg_0]
.text:00406EA7                 mov     [esp+0Ch+var_4], ebx
.text:00406EAB                 mov     ebx, [esp+0Ch+arg_4]
.text:00406EAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406EB2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406EB6                 call    realloc
.text:00406EBB                 test    eax, eax
.text:00406EBD                 jz      short loc_406EC7
.text:00406EBF
.text:00406EBF loc_406EBF:                             ; CODE XREF: sub_406EA0+29↓j
.text:00406EBF                 mov     ebx, [esp+0Ch+var_4]
.text:00406EC3                 add     esp, 0Ch
.text:00406EC6                 retn
.text:00406EC7 ; ---------------------------------------------------------------------------
.text:00406EC7
.text:00406EC7 loc_406EC7:                             ; CODE XREF: sub_406EA0+1D↑j
.text:00406EC7                 test    ebx, ebx
.text:00406EC9                 jz      short loc_406EBF
.text:00406ECB                 call    sub_408190
.text:00406ECB sub_406EA0      endp
.text:00406ECB
.text:00406ED0 ; ---------------------------------------------------------------------------
.text:00406ED0                 jmp     sub_407020
.text:00406ED0 ; ---------------------------------------------------------------------------
.text:00406ED5                 align 10h
.text:00406EE0                 sub     esp, 0Ch
.text:00406EE3                 mov     edx, [esp+14h]
.text:00406EE7                 mov     dword ptr [esp+8], 1
.text:00406EEF                 mov     [esp+4], edx
.text:00406EF3                 mov     edx, [esp+10h]
.text:00406EF7                 mov     [esp], edx
.text:00406EFA                 call    sub_407020
.text:00406EFF                 add     esp, 0Ch
.text:00406F02                 retn
.text:00406F02 ; ---------------------------------------------------------------------------
.text:00406F03                 align 10h
.text:00406F10                 sub     esp, 1Ch
.text:00406F13                 mov     [esp+18h], ebx
.text:00406F17                 mov     ebx, [esp+20h]
.text:00406F1B                 mov     [esp], ebx
.text:00406F1E                 call    malloc
.text:00406F23                 test    eax, eax
.text:00406F25                 jz      short loc_406F43
.text:00406F27
.text:00406F27 loc_406F27:                             ; CODE XREF: .text:00406F45↓j
.text:00406F27                 mov     [esp+8], ebx
.text:00406F2B                 mov     dword ptr [esp+4], 0
.text:00406F33                 mov     [esp], eax
.text:00406F36                 call    memset
.text:00406F3B                 mov     ebx, [esp+18h]
.text:00406F3F                 add     esp, 1Ch
.text:00406F42                 retn
.text:00406F43 ; ---------------------------------------------------------------------------
.text:00406F43
.text:00406F43 loc_406F43:                             ; CODE XREF: .text:00406F25↑j
.text:00406F43                 test    ebx, ebx
.text:00406F45                 jz      short loc_406F27
.text:00406F47                 call    sub_408190
.text:00406F47 ; ---------------------------------------------------------------------------
.text:00406F4C                 align 10h
.text:00406F50                 sub     esp, 0Ch
.text:00406F53                 xor     edx, edx
.text:00406F55                 mov     ecx, [esp+14h]
.text:00406F59                 mov     [esp+8], ebx
.text:00406F5D                 mov     eax, 0FFFFFFFFh
.text:00406F62                 mov     ebx, [esp+10h]
.text:00406F66                 div     ecx
.text:00406F68                 cmp     eax, ebx
.text:00406F6A                 jb      short loc_406F88
.text:00406F6C                 mov     [esp+4], ecx
.text:00406F70                 mov     [esp], ebx
.text:00406F73                 call    calloc
.text:00406F78                 test    eax, eax
.text:00406F7A                 jz      short loc_406F84
.text:00406F7C
.text:00406F7C loc_406F7C:                             ; CODE XREF: .text:00406F86↓j
.text:00406F7C                 mov     ebx, [esp+8]
.text:00406F80                 add     esp, 0Ch
.text:00406F83                 retn
.text:00406F84 ; ---------------------------------------------------------------------------
.text:00406F84
.text:00406F84 loc_406F84:                             ; CODE XREF: .text:00406F7A↑j
.text:00406F84                 test    ebx, ebx
.text:00406F86                 jz      short loc_406F7C
.text:00406F88
.text:00406F88 loc_406F88:                             ; CODE XREF: .text:00406F6A↑j
.text:00406F88                 call    sub_408190
.text:00406F88 ; ---------------------------------------------------------------------------
.text:00406F8D                 align 10h
.text:00406F90
.text:00406F90 ; =============== S U B R O U T I N E =======================================
.text:00406F90
.text:00406F90
.text:00406F90 ; int __cdecl sub_406F90(void *, size_t)
.text:00406F90 sub_406F90      proc near               ; CODE XREF: sub_406900+241↑p
.text:00406F90
.text:00406F90 Size            = dword ptr -1Ch
.text:00406F90 Src             = dword ptr -18h
.text:00406F90 var_14          = dword ptr -14h
.text:00406F90 var_4           = dword ptr -4
.text:00406F90 arg_0           = dword ptr  4
.text:00406F90 arg_4           = dword ptr  8
.text:00406F90
.text:00406F90                 sub     esp, 1Ch
.text:00406F93                 mov     [esp+1Ch+var_4], ebx
.text:00406F97                 mov     ebx, [esp+1Ch+arg_4]
.text:00406F9B                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406F9E                 call    malloc
.text:00406FA3                 test    eax, eax
.text:00406FA5                 mov     edx, eax
.text:00406FA7                 jz      short loc_406FC5
.text:00406FA9
.text:00406FA9 loc_406FA9:                             ; CODE XREF: sub_406F90+37↓j
.text:00406FA9                 mov     [esp+1Ch+var_14], ebx ; Size
.text:00406FAD                 mov     ecx, [esp+1Ch+arg_0]
.text:00406FB1                 mov     [esp+1Ch+Size], edx ; void *
.text:00406FB4                 mov     [esp+1Ch+Src], ecx ; Src
.text:00406FB8                 call    memcpy
.text:00406FBD                 mov     ebx, [esp+1Ch+var_4]
.text:00406FC1                 add     esp, 1Ch
.text:00406FC4                 retn
.text:00406FC5 ; ---------------------------------------------------------------------------
.text:00406FC5
.text:00406FC5 loc_406FC5:                             ; CODE XREF: sub_406F90+17↑j
.text:00406FC5                 test    ebx, ebx
.text:00406FC7                 jz      short loc_406FA9
.text:00406FC9                 call    sub_408190
.text:00406FC9 sub_406F90      endp
.text:00406FC9
.text:00406FC9 ; ---------------------------------------------------------------------------
.text:00406FCE                 align 10h
.text:00406FD0
.text:00406FD0 ; =============== S U B R O U T I N E =======================================
.text:00406FD0
.text:00406FD0
.text:00406FD0 ; int __cdecl sub_406FD0(char *)
.text:00406FD0 sub_406FD0      proc near               ; CODE XREF: sub_402860+1C↑p
.text:00406FD0                                         ; sub_4028B0+1C↑p ...
.text:00406FD0
.text:00406FD0 Str             = dword ptr -1Ch
.text:00406FD0 Src             = dword ptr -18h
.text:00406FD0 Size            = dword ptr -14h
.text:00406FD0 var_8           = dword ptr -8
.text:00406FD0 var_4           = dword ptr -4
.text:00406FD0 arg_0           = dword ptr  4
.text:00406FD0
.text:00406FD0                 sub     esp, 1Ch
.text:00406FD3                 mov     [esp+1Ch+var_4], esi
.text:00406FD7                 mov     esi, [esp+1Ch+arg_0]
.text:00406FDB                 mov     [esp+1Ch+var_8], ebx
.text:00406FDF                 mov     [esp+1Ch+Str], esi ; Str
.text:00406FE2                 call    strlen
.text:00406FE7                 lea     ebx, [eax+1]
.text:00406FEA                 mov     [esp+1Ch+Str], ebx ; Size
.text:00406FED                 call    malloc
.text:00406FF2                 test    eax, eax
.text:00406FF4                 jz      short loc_407012
.text:00406FF6
.text:00406FF6 loc_406FF6:                             ; CODE XREF: sub_406FD0+44↓j
.text:00406FF6                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406FFA                 mov     [esp+1Ch+Src], esi ; Src
.text:00406FFE                 mov     [esp+1Ch+Str], eax ; void *
.text:00407001                 call    memcpy
.text:00407006                 mov     ebx, [esp+1Ch+var_8]
.text:0040700A                 mov     esi, [esp+1Ch+var_4]
.text:0040700E                 add     esp, 1Ch
.text:00407011                 retn
.text:00407012 ; ---------------------------------------------------------------------------
.text:00407012
.text:00407012 loc_407012:                             ; CODE XREF: sub_406FD0+24↑j
.text:00407012                 test    ebx, ebx
.text:00407014                 jz      short loc_406FF6
.text:00407016                 call    sub_408190
.text:00407016 sub_406FD0      endp
.text:00407016
.text:00407016 ; ---------------------------------------------------------------------------
.text:0040701B                 align 10h
.text:00407020
.text:00407020 ; =============== S U B R O U T I N E =======================================
.text:00407020
.text:00407020
.text:00407020 ; int __cdecl sub_407020(void *, int, int)
.text:00407020 sub_407020      proc near               ; CODE XREF: .text:00406ED0↑j
.text:00407020                                         ; .text:00406EFA↑p
.text:00407020
.text:00407020 Block           = dword ptr -1Ch
.text:00407020 Size            = dword ptr -18h
.text:00407020 var_C           = dword ptr -0Ch
.text:00407020 var_8           = dword ptr -8
.text:00407020 var_4           = dword ptr -4
.text:00407020 arg_0           = dword ptr  4
.text:00407020 arg_4           = dword ptr  8
.text:00407020 arg_8           = dword ptr  0Ch
.text:00407020
.text:00407020                 sub     esp, 1Ch
.text:00407023                 mov     [esp+1Ch+var_8], esi
.text:00407027                 mov     esi, [esp+1Ch+arg_0]
.text:0040702B                 mov     [esp+1Ch+var_4], edi
.text:0040702F                 mov     edi, [esp+1Ch+arg_4]
.text:00407033                 test    esi, esi
.text:00407035                 mov     [esp+1Ch+var_C], ebx
.text:00407039                 mov     ecx, [edi]
.text:0040703B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040703F                 jz      short loc_407080
.text:00407041                 xor     edx, edx
.text:00407043                 mov     eax, 7FFFFFFFh
.text:00407048                 div     ebx
.text:0040704A                 cmp     eax, ecx
.text:0040704C                 jb      short loc_407079
.text:0040704E                 add     ecx, ecx
.text:00407050
.text:00407050 loc_407050:                             ; CODE XREF: sub_407020+62↓j
.text:00407050                                         ; sub_407020+71↓j ...
.text:00407050                 mov     [edi], ecx
.text:00407052                 imul    ebx, ecx
.text:00407055                 mov     [esp+1Ch+Block], esi ; Block
.text:00407058                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040705C                 call    realloc
.text:00407061                 test    eax, eax
.text:00407063                 jz      short loc_407075
.text:00407065
.text:00407065 loc_407065:                             ; CODE XREF: sub_407020+57↓j
.text:00407065                 mov     ebx, [esp+1Ch+var_C]
.text:00407069                 mov     esi, [esp+1Ch+var_8]
.text:0040706D                 mov     edi, [esp+1Ch+var_4]
.text:00407071                 add     esp, 1Ch
.text:00407074                 retn
.text:00407075 ; ---------------------------------------------------------------------------
.text:00407075
.text:00407075 loc_407075:                             ; CODE XREF: sub_407020+43↑j
.text:00407075                 test    ebx, ebx
.text:00407077                 jz      short loc_407065
.text:00407079
.text:00407079 loc_407079:                             ; CODE XREF: sub_407020+2C↑j
.text:00407079                 call    sub_408190
.text:00407079 ; ---------------------------------------------------------------------------
.text:0040707E                 align 10h
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_407020+1F↑j
.text:00407080                 test    ecx, ecx
.text:00407082                 jnz     short loc_407050
.text:00407084                 xor     edx, edx
.text:00407086                 mov     eax, 40h ; '@'
.text:0040708B                 div     ebx
.text:0040708D                 test    eax, eax
.text:0040708F                 mov     ecx, eax
.text:00407091                 jnz     short loc_407050
.text:00407093                 mov     ecx, 1
.text:00407098                 jmp     short loc_407050
.text:00407098 sub_407020      endp
.text:00407098
.text:00407098 ; ---------------------------------------------------------------------------
.text:0040709A                 align 10h
.text:004070A0
.text:004070A0 ; =============== S U B R O U T I N E =======================================
.text:004070A0
.text:004070A0
.text:004070A0 sub_4070A0      proc near               ; CODE XREF: sub_402860+3C↑p
.text:004070A0                                         ; sub_4028B0+3C↑p ...
.text:004070A0
.text:004070A0 var_1C          = dword ptr -1Ch
.text:004070A0 var_18          = dword ptr -18h
.text:004070A0 var_14          = dword ptr -14h
.text:004070A0 var_10          = dword ptr -10h
.text:004070A0 arg_0           = dword ptr  4
.text:004070A0 arg_4           = dword ptr  8
.text:004070A0 arg_8           = dword ptr  0Ch
.text:004070A0
.text:004070A0                 push    edi
.text:004070A1                 push    esi
.text:004070A2                 push    ebx
.text:004070A3                 sub     esp, 10h
.text:004070A6                 mov     edx, [esp+1Ch+arg_8]
.text:004070AA                 mov     ebx, [esp+1Ch+arg_0]
.text:004070AE                 mov     esi, [esp+1Ch+arg_4]
.text:004070B2                 lea     edi, [edx+15h]
.text:004070B5                 mov     byte ptr [edx+15h], 0
.text:004070B9                 lea     esi, [esi+0]
.text:004070C0
.text:004070C0 loc_4070C0:                             ; CODE XREF: sub_4070A0+63↓j
.text:004070C0                 mov     [esp+1Ch+var_1C], ebx
.text:004070C3                 dec     edi
.text:004070C4                 mov     [esp+1Ch+var_18], esi
.text:004070C8                 mov     [esp+1Ch+var_14], 0Ah
.text:004070D0                 mov     [esp+1Ch+var_10], 0
.text:004070D8                 call    sub_412EB0
.text:004070DD                 add     al, 30h ; '0'
.text:004070DF                 mov     [edi], al
.text:004070E1                 mov     [esp+1Ch+var_1C], ebx
.text:004070E4                 mov     [esp+1Ch+var_18], esi
.text:004070E8                 mov     [esp+1Ch+var_14], 0Ah
.text:004070F0                 mov     [esp+1Ch+var_10], 0
.text:004070F8                 call    sub_413030
.text:004070FD                 mov     ebx, eax
.text:004070FF                 mov     esi, edx
.text:00407101                 or      edx, ebx
.text:00407103                 jnz     short loc_4070C0
.text:00407105                 add     esp, 10h
.text:00407108                 mov     eax, edi
.text:0040710A                 pop     ebx
.text:0040710B                 pop     esi
.text:0040710C                 pop     edi
.text:0040710D                 retn
.text:0040710D sub_4070A0      endp
.text:0040710D
.text:0040710D ; ---------------------------------------------------------------------------
.text:0040710E                 align 10h
.text:00407110
.text:00407110 ; =============== S U B R O U T I N E =======================================
.text:00407110
.text:00407110
.text:00407110 sub_407110      proc near               ; CODE XREF: sub_403980+BA↑p
.text:00407110                                         ; sub_403A80+186↑p ...
.text:00407110                 sub     esp, 0Ch
.text:00407113                 call    _errno
.text:00407118                 mov     dword ptr [eax], 28h ; '('
.text:0040711E                 mov     eax, 0FFFFFFFFh
.text:00407123                 add     esp, 0Ch
.text:00407126                 retn
.text:00407126 sub_407110      endp
.text:00407126
.text:00407126 ; ---------------------------------------------------------------------------
.text:00407127                 align 10h
.text:00407130
.text:00407130 ; =============== S U B R O U T I N E =======================================
.text:00407130
.text:00407130
.text:00407130 sub_407130      proc near               ; CODE XREF: sub_403670+1F6↑p
.text:00407130
.text:00407130 arg_0           = dword ptr  4
.text:00407130
.text:00407130                 mov     edx, [esp+arg_0]
.text:00407134                 mov     dword ptr [edx+10h], 0
.text:0040713B                 mov     dword ptr [edx+14h], 0
.text:00407142                 mov     dword ptr [edx+18h], 95F616h
.text:00407149                 retn
.text:00407149 sub_407130      endp
.text:00407149
.text:00407149 ; ---------------------------------------------------------------------------
.text:0040714A                 align 10h
.text:00407150 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:00407150                                         ; DATA XREF: sub_4071A0+CE↓o
.text:0040717C aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:0040717C                                         ; DATA XREF: sub_4071A0+D6↓o
.text:00407195                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0
.text:004071A0 sub_4071A0      proc near               ; CODE XREF: sub_404F10+4A↑p
.text:004071A0
.text:004071A0 var_1C          = dword ptr -1Ch
.text:004071A0 var_18          = dword ptr -18h
.text:004071A0 var_14          = dword ptr -14h
.text:004071A0 arg_0           = dword ptr  4
.text:004071A0 arg_4           = dword ptr  8
.text:004071A0
.text:004071A0                 push    ebp
.text:004071A1                 push    edi
.text:004071A2                 push    esi
.text:004071A3                 push    ebx
.text:004071A4                 sub     esp, 0Ch
.text:004071A7                 mov     edx, [esp+1Ch+arg_0]
.text:004071AB                 cmp     dword ptr [edx+18h], 95F616h
.text:004071B2                 jnz     loc_407266
.text:004071B8                 mov     edx, [esp+1Ch+arg_0]
.text:004071BC                 mov     ebp, [edx+14h]
.text:004071BF                 mov     edi, [edx+10h]
.text:004071C2                 mov     eax, ebp
.text:004071C4                 or      eax, edi
.text:004071C6                 jz      short loc_407210
.text:004071C8                 mov     esi, [esp+1Ch+arg_4]
.text:004071CC                 mov     ecx, [esi+8]
.text:004071CF                 mov     ebx, [esi+0Ch]
.text:004071D2                 mov     esi, [esp+1Ch+arg_0]
.text:004071D6                 mov     eax, [esi]
.text:004071D8                 mov     edx, [esi+4]
.text:004071DB                 mov     esi, ebx
.text:004071DD                 xor     eax, ecx
.text:004071DF                 xor     esi, edx
.text:004071E1                 or      esi, eax
.text:004071E3                 jnz     short loc_407210
.text:004071E5                 mov     edx, [esp+1Ch+arg_4]
.text:004071E9                 mov     esi, [esp+1Ch+arg_0]
.text:004071ED                 mov     ebx, [edx+14h]
.text:004071F0                 mov     ecx, [edx+10h]
.text:004071F3                 mov     eax, [esi+8]
.text:004071F6                 mov     edx, [esi+0Ch]
.text:004071F9                 mov     esi, ebx
.text:004071FB                 xor     eax, ecx
.text:004071FD                 xor     esi, edx
.text:004071FF                 or      esi, eax
.text:00407201                 mov     edx, 1
.text:00407206                 jz      short loc_40725C
.text:00407208                 nop
.text:00407209                 lea     esi, [esi+0]
.text:00407210
.text:00407210 loc_407210:                             ; CODE XREF: sub_4071A0+26↑j
.text:00407210                                         ; sub_4071A0+43↑j
.text:00407210                 mov     ecx, edi
.text:00407212                 mov     ebx, ebp
.text:00407214                 mov     edx, [esp+1Ch+arg_0]
.text:00407218                 add     ecx, 1
.text:0040721B                 mov     esi, ecx
.text:0040721D                 adc     ebx, 0
.text:00407220                 and     esi, edi
.text:00407222                 mov     edi, ebx
.text:00407224                 mov     [edx+10h], ecx
.text:00407227                 and     edi, ebp
.text:00407229                 or      esi, edi
.text:0040722B                 mov     [edx+14h], ebx
.text:0040722E                 jnz     short loc_40725A
.text:00407230                 mov     ebp, ebx
.text:00407232                 mov     edx, 1
.text:00407237                 or      ebp, ecx
.text:00407239                 jz      short loc_40725C
.text:0040723B                 mov     ebp, [esp+1Ch+arg_4]
.text:0040723F                 mov     ebx, [esp+1Ch+arg_0]
.text:00407243                 mov     edx, [ebp+10h]
.text:00407246                 mov     ecx, [ebp+14h]
.text:00407249                 mov     [ebx+8], edx
.text:0040724C                 mov     [ebx+0Ch], ecx
.text:0040724F                 mov     esi, [ebp+8]
.text:00407252                 mov     edi, [ebp+0Ch]
.text:00407255                 mov     [ebx], esi
.text:00407257                 mov     [ebx+4], edi
.text:0040725A
.text:0040725A loc_40725A:                             ; CODE XREF: sub_4071A0+8E↑j
.text:0040725A                 xor     edx, edx
.text:0040725C
.text:0040725C loc_40725C:                             ; CODE XREF: sub_4071A0+66↑j
.text:0040725C                                         ; sub_4071A0+99↑j
.text:0040725C                 add     esp, 0Ch
.text:0040725F                 mov     eax, edx
.text:00407261                 pop     ebx
.text:00407262                 pop     esi
.text:00407263                 pop     edi
.text:00407264                 pop     ebp
.text:00407265                 retn
.text:00407266 ; ---------------------------------------------------------------------------
.text:00407266
.text:00407266 loc_407266:                             ; CODE XREF: sub_4071A0+12↑j
.text:00407266                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:0040726E                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:00407276                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:0040727D                 call    _assert
.text:0040727D sub_4071A0      endp
.text:0040727D
.text:0040727D ; ---------------------------------------------------------------------------
.text:00407282                 align 10h
.text:00407290 dword_407290    dd 0                    ; DATA XREF: sub_4072C0+D2↓o
.text:00407290                                         ; sub_4072C0:loc_4074F0↓o ...
.text:00407294 dword_407294    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:00407294                                         ; DATA XREF: .text:00407EAC↓r
.text:00407294                                         ; .text:00407EB5↓r ...
.text:004072A4 flt_4072A4      dd 0.1                  ; DATA XREF: sub_4072C0:loc_40730F↓r
.text:004072A8 flt_4072A8      dd 4.2949673e9          ; DATA XREF: sub_4072C0+101↓r
.text:004072AC flt_4072AC      dd 0.89999998           ; DATA XREF: sub_4072C0+66↓r
.text:004072B0 flt_4072B0      dd 1.1                  ; DATA XREF: sub_4072C0+7A↓r
.text:004072B4                 align 10h
.text:004072C0
.text:004072C0 ; =============== S U B R O U T I N E =======================================
.text:004072C0
.text:004072C0
.text:004072C0 sub_4072C0      proc near               ; CODE XREF: sub_403670+143↑p
.text:004072C0                                         ; sub_407690+2E↓p
.text:004072C0
.text:004072C0 var_44          = qword ptr -44h
.text:004072C0 Size            = dword ptr -3Ch
.text:004072C0 var_38          = dword ptr -38h
.text:004072C0 var_28          = dword ptr -28h
.text:004072C0 var_24          = qword ptr -24h
.text:004072C0 var_18          = word ptr -18h
.text:004072C0 var_16          = word ptr -16h
.text:004072C0 var_10          = dword ptr -10h
.text:004072C0 var_C           = dword ptr -0Ch
.text:004072C0 var_8           = dword ptr -8
.text:004072C0 var_4           = dword ptr -4
.text:004072C0 arg_0           = dword ptr  4
.text:004072C0 arg_4           = dword ptr  8
.text:004072C0 arg_8           = dword ptr  0Ch
.text:004072C0 arg_C           = dword ptr  10h
.text:004072C0 arg_10          = dword ptr  14h
.text:004072C0
.text:004072C0                 sub     esp, 3Ch
.text:004072C3                 mov     [esp+3Ch+var_4], ebp
.text:004072C7                 mov     ebp, [esp+3Ch+arg_8]
.text:004072CB                 mov     [esp+3Ch+var_10], ebx
.text:004072CF                 mov     ebx, [esp+3Ch+arg_4]
.text:004072D3                 test    ebp, ebp
.text:004072D5                 mov     [esp+3Ch+var_C], esi
.text:004072D9                 mov     [esp+3Ch+var_8], edi
.text:004072DD                 jz      loc_4073A1
.text:004072E3                 mov     edx, [esp+3Ch+arg_C]
.text:004072E7                 test    edx, edx
.text:004072E9                 jz      loc_4073A1
.text:004072EF                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:004072F6                 call    malloc
.text:004072FB                 mov     esi, eax
.text:004072FD                 xor     eax, eax
.text:004072FF                 test    esi, esi
.text:00407301                 jz      loc_4073A3
.text:00407307                 test    ebx, ebx
.text:00407309                 jz      loc_4074F0
.text:0040730F
.text:0040730F loc_40730F:                             ; CODE XREF: sub_4072C0+235↓j
.text:0040730F                 fld     ds:flt_4072A4
.text:00407315                 fld     dword ptr [ebx+8]
.text:00407318                 mov     [esi+14h], ebx
.text:0040731B                 fucom   st(1)
.text:0040731D                 fnstsw  ax
.text:0040731F                 sahf
.text:00407320                 jbe     loc_4074E0
.text:00407326                 fld     ds:flt_4072AC
.text:0040732C                 fucomp  st(1)
.text:0040732E                 fnstsw  ax
.text:00407330                 sahf
.text:00407331                 jbe     loc_4074E0
.text:00407337                 fld     dword ptr [ebx+0Ch]
.text:0040733A                 fld     ds:flt_4072B0
.text:00407340                 fxch    st(1)
.text:00407342                 fucompp
.text:00407344                 fnstsw  ax
.text:00407346                 sahf
.text:00407347                 jbe     loc_4074E0
.text:0040734D                 fld     dword ptr [ebx]
.text:0040734F                 fldz
.text:00407351                 fxch    st(1)
.text:00407353                 fucom   st(1)
.text:00407355                 fnstsw  ax
.text:00407357                 fstp    st(1)
.text:00407359                 sahf
.text:0040735A                 jb      loc_4074E7
.text:00407360                 faddp   st(2), st
.text:00407362                 fld     dword ptr [ebx+4]
.text:00407365                 fucom   st(2)
.text:00407367                 fnstsw  ax
.text:00407369                 sahf
.text:0040736A                 jbe     loc_4074E7
.text:00407370                 fld1
.text:00407372                 fucompp
.text:00407374                 fnstsw  ax
.text:00407376                 sahf
.text:00407377                 jb      loc_4074E0
.text:0040737D                 fucom   st(1)
.text:0040737F                 fnstsw  ax
.text:00407381                 fstp    st(1)
.text:00407383                 sahf
.text:00407384                 ja      short loc_4073B7
.text:00407386                 lea     esi, [esi+0]
.text:00407389                 lea     edi, [edi+0]
.text:00407390
.text:00407390 loc_407390:                             ; CODE XREF: sub_4072C0+222↓j
.text:00407390                 fstp    st
.text:00407392                 mov     dword ptr [esi+14h], offset dword_407290
.text:00407399
.text:00407399 loc_407399:                             ; CODE XREF: sub_4072C0+155↓j
.text:00407399                                         ; sub_4072C0+1BF↓j ...
.text:00407399                 mov     [esp+3Ch+Size], esi ; Block
.text:0040739C                 call    free
.text:004073A1
.text:004073A1 loc_4073A1:                             ; CODE XREF: sub_4072C0+1D↑j
.text:004073A1                                         ; sub_4072C0+29↑j
.text:004073A1                 xor     eax, eax
.text:004073A3
.text:004073A3 loc_4073A3:                             ; CODE XREF: sub_4072C0+41↑j
.text:004073A3                                         ; sub_4072C0+208↓j
.text:004073A3                 mov     ebx, [esp+3Ch+var_10]
.text:004073A7                 mov     esi, [esp+3Ch+var_C]
.text:004073AB                 mov     edi, [esp+3Ch+var_8]
.text:004073AF                 mov     ebp, [esp+3Ch+var_4]
.text:004073B3                 add     esp, 3Ch
.text:004073B6                 retn
.text:004073B7 ; ---------------------------------------------------------------------------
.text:004073B7
.text:004073B7 loc_4073B7:                             ; CODE XREF: sub_4072C0+C4↑j
.text:004073B7                 cmp     byte ptr [ebx+10h], 0
.text:004073BB                 jnz     loc_4074D4
.text:004073C1                 fld     ds:flt_4072A8
.text:004073C7                 xor     eax, eax
.text:004073C9                 mov     ecx, [esp+3Ch+arg_0]
.text:004073CD                 push    eax
.text:004073CE                 push    ecx
.text:004073CF                 fild    [esp+44h+var_44]
.text:004073D2                 add     esp, 8
.text:004073D5                 fdivrp  st(2), st
.text:004073D7                 fxch    st(1)
.text:004073D9                 fucom   st(1)
.text:004073DB                 fnstsw  ax
.text:004073DD                 fstp    st(1)
.text:004073DF                 sahf
.text:004073E0                 jnb     loc_4074CD
.text:004073E6                 fnstcw  [esp+3Ch+var_16]
.text:004073EA                 movzx   ebx, [esp+3Ch+var_16]
.text:004073EF                 or      bx, 0C00h
.text:004073F4                 mov     [esp+3Ch+var_18], bx
.text:004073F9                 fldcw   [esp+3Ch+var_18]
.text:004073FD                 fistp   [esp+3Ch+var_24]
.text:00407401                 fldcw   [esp+3Ch+var_16]
.text:00407405                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00407409                 mov     [esp+3Ch+arg_0], edx
.text:0040740D
.text:0040740D loc_40740D:                             ; CODE XREF: sub_4072C0+216↓j
.text:0040740D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00407415                 ja      short loc_407399
.text:00407417                 mov     ecx, [esp+3Ch+arg_0]
.text:0040741B                 cmp     ecx, 9
.text:0040741E                 ja      short loc_407425
.text:00407420                 mov     ecx, 0Ah
.text:00407425
.text:00407425 loc_407425:                             ; CODE XREF: sub_4072C0+15E↑j
.text:00407425                 or      ecx, 1
.text:00407428
.text:00407428 loc_407428:                             ; CODE XREF: sub_4072C0+1B4↓j
.text:00407428                 mov     [esp+3Ch+var_28], 3
.text:00407430                 mov     edi, 9
.text:00407435                 cmp     edi, ecx
.text:00407437                 jnb     short loc_407465
.text:00407439                 xor     edx, edx
.text:0040743B                 mov     eax, ecx
.text:0040743D                 div     [esp+3Ch+var_28]
.text:00407441                 test    edx, edx
.text:00407443                 jz      short loc_407465
.text:00407445
.text:00407445 loc_407445:                             ; CODE XREF: sub_4072C0+1A3↓j
.text:00407445                 inc     [esp+3Ch+var_28]
.text:00407449                 mov     edx, [esp+3Ch+var_28]
.text:0040744D                 lea     edi, [edi+edx*4]
.text:00407450                 inc     edx
.text:00407451                 cmp     edi, ecx
.text:00407453                 mov     [esp+3Ch+var_28], edx
.text:00407457                 jnb     short loc_407465
.text:00407459                 xor     edx, edx
.text:0040745B                 mov     eax, ecx
.text:0040745D                 div     [esp+3Ch+var_28]
.text:00407461                 test    edx, edx
.text:00407463                 jnz     short loc_407445
.text:00407465
.text:00407465 loc_407465:                             ; CODE XREF: sub_4072C0+177↑j
.text:00407465                                         ; sub_4072C0+183↑j ...
.text:00407465                 xor     edx, edx
.text:00407467                 mov     eax, ecx
.text:00407469                 div     [esp+3Ch+var_28]
.text:0040746D                 test    edx, edx
.text:0040746F                 jnz     short loc_407476
.text:00407471                 add     ecx, 2
.text:00407474                 jmp     short loc_407428
.text:00407476 ; ---------------------------------------------------------------------------
.text:00407476
.text:00407476 loc_407476:                             ; CODE XREF: sub_4072C0+1AF↑j
.text:00407476                 mov     [esi+8], ecx
.text:00407479                 cmp     ecx, 1FFFFFFFh
.text:0040747F                 ja      loc_407399
.text:00407485                 mov     [esp+3Ch+Size], ecx ; Count
.text:00407488                 mov     [esp+3Ch+var_38], 8 ; Size
.text:00407490                 call    calloc
.text:00407495                 mov     [esi+18h], ebp
.text:00407498                 mov     ebx, [esi+8]
.text:0040749B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040749F                 mov     [esi], eax
.text:004074A1                 mov     edi, [esp+3Ch+arg_10]
.text:004074A5                 lea     ecx, [eax+ebx*8]
.text:004074A8                 mov     [esi+4], ecx
.text:004074AB                 mov     eax, esi
.text:004074AD                 mov     dword ptr [esi+0Ch], 0
.text:004074B4                 mov     dword ptr [esi+10h], 0
.text:004074BB                 mov     [esi+1Ch], ebp
.text:004074BE                 mov     [esi+20h], edi
.text:004074C1                 mov     dword ptr [esi+24h], 0
.text:004074C8                 jmp     loc_4073A3
.text:004074CD ; ---------------------------------------------------------------------------
.text:004074CD
.text:004074CD loc_4074CD:                             ; CODE XREF: sub_4072C0+120↑j
.text:004074CD                 fstp    st
.text:004074CF                 jmp     loc_407399
.text:004074D4 ; ---------------------------------------------------------------------------
.text:004074D4
.text:004074D4 loc_4074D4:                             ; CODE XREF: sub_4072C0+FB↑j
.text:004074D4                 fstp    st
.text:004074D6                 jmp     loc_40740D
.text:004074D6 ; ---------------------------------------------------------------------------
.text:004074DB                 align 10h
.text:004074E0
.text:004074E0 loc_4074E0:                             ; CODE XREF: sub_4072C0+60↑j
.text:004074E0                                         ; sub_4072C0+71↑j ...
.text:004074E0                 fstp    st
.text:004074E2                 jmp     loc_407390
.text:004074E7 ; ---------------------------------------------------------------------------
.text:004074E7
.text:004074E7 loc_4074E7:                             ; CODE XREF: sub_4072C0+9A↑j
.text:004074E7                                         ; sub_4072C0+AA↑j
.text:004074E7                 fstp    st
.text:004074E9                 jmp     short loc_4074E0
.text:004074E9 ; ---------------------------------------------------------------------------
.text:004074EB                 align 10h
.text:004074F0
.text:004074F0 loc_4074F0:                             ; CODE XREF: sub_4072C0+49↑j
.text:004074F0                 mov     ebx, offset dword_407290
.text:004074F5                 jmp     loc_40730F
.text:004074F5 sub_4072C0      endp
.text:004074F5
.text:004074F5 ; ---------------------------------------------------------------------------
.text:004074FA                 align 10h
.text:00407500                 push    edi
.text:00407501                 push    esi
.text:00407502                 push    ebx
.text:00407503                 sub     esp, 10h
.text:00407506                 mov     edi, [esp+20h]
.text:0040750A                 mov     esi, [edi]
.text:0040750C                 mov     eax, [edi+4]
.text:0040750F                 cmp     esi, eax
.text:00407511                 jnb     short loc_407567
.text:00407513                 lea     esi, [esi+0]
.text:00407519                 lea     edi, [edi+0]
.text:00407520
.text:00407520 loc_407520:                             ; CODE XREF: .text:00407565↓j
.text:00407520                 mov     ecx, [esi]
.text:00407522                 test    ecx, ecx
.text:00407524                 jz      short loc_407560
.text:00407526                 mov     ebx, [esi+4]
.text:00407529                 test    ebx, ebx
.text:0040752B                 jz      short loc_407591
.text:0040752D                 mov     ecx, [edi+20h]
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: .text:0040754A↓j
.text:00407530                 test    ecx, ecx
.text:00407532                 jnz     short loc_407585
.text:00407534
.text:00407534 loc_407534:                             ; CODE XREF: .text:0040758F↓j
.text:00407534                 mov     dword ptr [ebx], 0
.text:0040753A                 mov     edx, [ebx+4]
.text:0040753D                 mov     eax, [edi+24h]
.text:00407540                 test    edx, edx
.text:00407542                 mov     [ebx+4], eax
.text:00407545                 mov     [edi+24h], ebx
.text:00407548                 mov     ebx, edx
.text:0040754A                 jnz     short loc_407530
.text:0040754C
.text:0040754C loc_40754C:                             ; CODE XREF: .text:00407594↓j
.text:0040754C                 test    ecx, ecx
.text:0040754E                 jnz     short loc_40757C
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: .text:00407583↓j
.text:00407550                 mov     dword ptr [esi+4], 0
.text:00407557                 mov     eax, [edi+4]
.text:0040755A                 mov     dword ptr [esi], 0
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: .text:00407524↑j
.text:00407560                 add     esi, 8
.text:00407563                 cmp     esi, eax
.text:00407565                 jb      short loc_407520
.text:00407567
.text:00407567 loc_407567:                             ; CODE XREF: .text:00407511↑j
.text:00407567                 mov     dword ptr [edi+0Ch], 0
.text:0040756E                 mov     dword ptr [edi+10h], 0
.text:00407575                 add     esp, 10h
.text:00407578                 pop     ebx
.text:00407579                 pop     esi
.text:0040757A                 pop     edi
.text:0040757B                 retn
.text:0040757C ; ---------------------------------------------------------------------------
.text:0040757C
.text:0040757C loc_40757C:                             ; CODE XREF: .text:0040754E↑j
.text:0040757C                 mov     ebx, [esi]
.text:0040757E                 mov     [esp], ebx
.text:00407581                 call    ecx
.text:00407583                 jmp     short loc_407550
.text:00407585 ; ---------------------------------------------------------------------------
.text:00407585
.text:00407585 loc_407585:                             ; CODE XREF: .text:00407532↑j
.text:00407585                 mov     edx, [ebx]
.text:00407587                 mov     [esp], edx
.text:0040758A                 call    ecx
.text:0040758C                 mov     ecx, [edi+20h]
.text:0040758F                 jmp     short loc_407534
.text:00407591 ; ---------------------------------------------------------------------------
.text:00407591
.text:00407591 loc_407591:                             ; CODE XREF: .text:0040752B↑j
.text:00407591                 mov     ecx, [edi+20h]
.text:00407594                 jmp     short loc_40754C
.text:00407594 ; ---------------------------------------------------------------------------
.text:00407596                 align 10h
.text:004075A0
.text:004075A0 ; =============== S U B R O U T I N E =======================================
.text:004075A0
.text:004075A0
.text:004075A0 ; int __cdecl sub_4075A0(void *)
.text:004075A0 sub_4075A0      proc near               ; CODE XREF: sub_403980+AD↑p
.text:004075A0                                         ; sub_404F10+D3↑p
.text:004075A0
.text:004075A0 Block           = dword ptr -1Ch
.text:004075A0 arg_0           = dword ptr  4
.text:004075A0
.text:004075A0                 push    ebp
.text:004075A1                 push    edi
.text:004075A2                 push    esi
.text:004075A3                 push    ebx
.text:004075A4                 sub     esp, 0Ch
.text:004075A7                 mov     ebp, [esp+1Ch+arg_0]
.text:004075AB                 mov     eax, [ebp+20h]
.text:004075AE                 test    eax, eax
.text:004075B0                 jz      loc_40767C
.text:004075B6                 mov     eax, [ebp+10h]
.text:004075B9                 test    eax, eax
.text:004075BB                 jz      loc_40767C
.text:004075C1                 mov     edi, [ebp+0]
.text:004075C4                 mov     eax, [ebp+4]
.text:004075C7                 cmp     edi, eax
.text:004075C9                 jnb     short loc_40763B
.text:004075CB
.text:004075CB loc_4075CB:                             ; CODE XREF: sub_4075A0+57↓j
.text:004075CB                 mov     edx, [edi]
.text:004075CD                 test    edx, edx
.text:004075CF                 jz      short loc_4075F2
.text:004075D1                 test    edi, edi
.text:004075D3                 mov     ebx, edi
.text:004075D5                 jz      short loc_4075F2
.text:004075D7                 mov     esi, esi
.text:004075D9                 lea     edi, [edi+0]
.text:004075E0
.text:004075E0 loc_4075E0:                             ; CODE XREF: sub_4075A0+4D↓j
.text:004075E0                 mov     ecx, [ebx]
.text:004075E2                 mov     [esp+1Ch+Block], ecx
.text:004075E5                 call    dword ptr [ebp+20h]
.text:004075E8                 mov     ebx, [ebx+4]
.text:004075EB                 test    ebx, ebx
.text:004075ED                 jnz     short loc_4075E0
.text:004075EF                 mov     eax, [ebp+4]
.text:004075F2
.text:004075F2 loc_4075F2:                             ; CODE XREF: sub_4075A0+2F↑j
.text:004075F2                                         ; sub_4075A0+35↑j
.text:004075F2                 add     edi, 8
.text:004075F5                 cmp     edi, eax
.text:004075F7                 jb      short loc_4075CB
.text:004075F9                 mov     edx, [ebp+0]
.text:004075FC
.text:004075FC loc_4075FC:                             ; CODE XREF: sub_4075A0+E2↓j
.text:004075FC                 cmp     edx, eax
.text:004075FE                 mov     edi, edx
.text:00407600                 jnb     short loc_40763B
.text:00407602                 lea     esi, [esi+0]
.text:00407609                 lea     edi, [edi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_4075A0+99↓j
.text:00407610                 mov     ebx, [edi+4]
.text:00407613                 test    ebx, ebx
.text:00407615                 jz      short loc_407634
.text:00407617                 mov     esi, esi
.text:00407619                 lea     edi, [edi+0]
.text:00407620
.text:00407620 loc_407620:                             ; CODE XREF: sub_4075A0+8F↓j
.text:00407620                 mov     esi, [ebx+4]
.text:00407623                 mov     [esp+1Ch+Block], ebx ; Block
.text:00407626                 call    free
.text:0040762B                 test    esi, esi
.text:0040762D                 mov     ebx, esi
.text:0040762F                 jnz     short loc_407620
.text:00407631                 mov     eax, [ebp+4]
.text:00407634
.text:00407634 loc_407634:                             ; CODE XREF: sub_4075A0+75↑j
.text:00407634                 add     edi, 8
.text:00407637                 cmp     edi, eax
.text:00407639                 jb      short loc_407610
.text:0040763B
.text:0040763B loc_40763B:                             ; CODE XREF: sub_4075A0+29↑j
.text:0040763B                                         ; sub_4075A0+60↑j
.text:0040763B                 mov     ebx, [ebp+24h]
.text:0040763E                 test    ebx, ebx
.text:00407640                 jz      short loc_407661
.text:00407642                 lea     esi, [esi+0]
.text:00407649                 lea     edi, [edi+0]
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_4075A0+BF↓j
.text:00407650                 mov     edi, [ebx+4]
.text:00407653                 mov     [esp+1Ch+Block], ebx ; Block
.text:00407656                 call    free
.text:0040765B                 test    edi, edi
.text:0040765D                 mov     ebx, edi
.text:0040765F                 jnz     short loc_407650
.text:00407661
.text:00407661 loc_407661:                             ; CODE XREF: sub_4075A0+A0↑j
.text:00407661                 mov     ebx, [ebp+0]
.text:00407664                 mov     [esp+1Ch+Block], ebx ; Block
.text:00407667                 call    free
.text:0040766C                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:00407670                 add     esp, 0Ch
.text:00407673                 pop     ebx
.text:00407674                 pop     esi
.text:00407675                 pop     edi
.text:00407676                 pop     ebp
.text:00407677                 jmp     free
.text:0040767C ; ---------------------------------------------------------------------------
.text:0040767C
.text:0040767C loc_40767C:                             ; CODE XREF: sub_4075A0+10↑j
.text:0040767C                                         ; sub_4075A0+1B↑j
.text:0040767C                 mov     edx, [ebp+0]
.text:0040767F                 mov     eax, [ebp+4]
.text:00407682                 jmp     loc_4075FC
.text:00407682 sub_4075A0      endp
.text:00407682
.text:00407682 ; ---------------------------------------------------------------------------
.text:00407687                 align 10h
.text:00407690
.text:00407690 ; =============== S U B R O U T I N E =======================================
.text:00407690
.text:00407690
.text:00407690 sub_407690      proc near               ; CODE XREF: sub_407810+1B2↓p
.text:00407690                                         ; sub_407EE0+156↓p
.text:00407690
.text:00407690 Block           = dword ptr -2Ch
.text:00407690 var_28          = dword ptr -28h
.text:00407690 var_24          = dword ptr -24h
.text:00407690 var_20          = dword ptr -20h
.text:00407690 var_1C          = dword ptr -1Ch
.text:00407690 var_18          = dword ptr -18h
.text:00407690 var_14          = dword ptr -14h
.text:00407690 arg_0           = dword ptr  4
.text:00407690 arg_4           = dword ptr  8
.text:00407690
.text:00407690                 push    ebp
.text:00407691                 push    edi
.text:00407692                 push    esi
.text:00407693                 push    ebx
.text:00407694                 sub     esp, 1Ch
.text:00407697                 mov     ebx, [esp+2Ch+arg_0]
.text:0040769B                 mov     edi, [ebx+20h]
.text:0040769E                 mov     [esp+2Ch+var_1C], edi
.text:004076A2                 mov     esi, [ebx+1Ch]
.text:004076A5                 mov     [esp+2Ch+var_20], esi
.text:004076A9                 mov     edx, [ebx+18h]
.text:004076AC                 mov     [esp+2Ch+var_24], edx
.text:004076B0                 mov     ecx, [ebx+14h]
.text:004076B3                 mov     edx, [esp+2Ch+arg_4]
.text:004076B7                 mov     [esp+2Ch+var_28], ecx
.text:004076BB                 mov     [esp+2Ch+Block], edx
.text:004076BE                 call    sub_4072C0
.text:004076C3                 mov     edi, eax
.text:004076C5                 xor     eax, eax
.text:004076C7                 test    edi, edi
.text:004076C9                 jz      loc_407792
.text:004076CF                 mov     ebp, [esp+2Ch+arg_0]
.text:004076D3                 mov     edx, [ebp+0]
.text:004076D6                 mov     eax, [ebp+4]
.text:004076D9                 mov     ecx, [ebp+24h]
.text:004076DC                 mov     [esp+2Ch+var_14], edx
.text:004076E0                 cmp     edx, eax
.text:004076E2                 mov     [edi+24h], ecx
.text:004076E5                 jnb     short loc_40775D
.text:004076E7                 mov     esi, esi
.text:004076E9                 lea     edi, [edi+0]
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: sub_407690+C5↓j
.text:004076F0                 mov     edx, [esp+2Ch+var_14]
.text:004076F4                 mov     ebx, [edx]
.text:004076F6                 test    ebx, ebx
.text:004076F8                 jz      short loc_40774C
.text:004076FA                 mov     ebx, edx
.text:004076FC                 lea     esi, [esi+0]
.text:00407700
.text:00407700 loc_407700:                             ; CODE XREF: sub_407690+B3↓j
.text:00407700                 mov     ebp, [ebx]
.text:00407702                 mov     edx, [edi+8]
.text:00407705                 mov     [esp+2Ch+Block], ebp
.text:00407708                 mov     [esp+2Ch+var_28], edx
.text:0040770C                 call    dword ptr [edi+18h]
.text:0040770F                 mov     ecx, [edi]
.text:00407711                 lea     esi, [ecx+eax*8]
.text:00407714                 cmp     esi, [edi+4]
.text:00407717                 jnb     loc_4077F3
.text:0040771D                 mov     ecx, [esi]
.text:0040771F                 mov     eax, [ebx+4]
.text:00407722                 test    ecx, ecx
.text:00407724                 mov     [esp+2Ch+var_18], eax
.text:00407728                 jz      loc_4077D0
.text:0040772E                 cmp     ebx, [esp+2Ch+var_14]
.text:00407732                 jz      short loc_40779A
.text:00407734                 mov     edx, [esi+4]
.text:00407737                 mov     [ebx+4], edx
.text:0040773A                 mov     [esi+4], ebx
.text:0040773D
.text:0040773D loc_40773D:                             ; CODE XREF: sub_407690+12A↓j
.text:0040773D                                         ; sub_407690+149↓j ...
.text:0040773D                 mov     ebx, [esp+2Ch+var_18]
.text:00407741                 test    ebx, ebx
.text:00407743                 jnz     short loc_407700
.text:00407745                 mov     ecx, [esp+2Ch+arg_0]
.text:00407749                 mov     eax, [ecx+4]
.text:0040774C
.text:0040774C loc_40774C:                             ; CODE XREF: sub_407690+68↑j
.text:0040774C                 add     [esp+2Ch+var_14], 8
.text:00407751                 cmp     [esp+2Ch+var_14], eax
.text:00407755                 jb      short loc_4076F0
.text:00407757                 mov     eax, [esp+2Ch+arg_0]
.text:0040775B                 mov     edx, [eax]
.text:0040775D
.text:0040775D loc_40775D:                             ; CODE XREF: sub_407690+55↑j
.text:0040775D                 mov     [esp+2Ch+Block], edx ; Block
.text:00407760                 call    free
.text:00407765                 mov     ebx, [esp+2Ch+arg_0]
.text:00407769                 mov     ebp, [edi]
.text:0040776B                 mov     ecx, [edi+4]
.text:0040776E                 mov     esi, [edi+8]
.text:00407771                 mov     edx, [edi+0Ch]
.text:00407774                 mov     [ebx], ebp
.text:00407776                 mov     ebp, [edi+24h]
.text:00407779                 mov     [ebx+4], ecx
.text:0040777C                 mov     [ebx+8], esi
.text:0040777F                 mov     [ebx+0Ch], edx
.text:00407782                 mov     [ebx+24h], ebp
.text:00407785                 mov     [esp+2Ch+Block], edi ; Block
.text:00407788                 call    free
.text:0040778D                 mov     eax, 1
.text:00407792
.text:00407792 loc_407792:                             ; CODE XREF: sub_407690+39↑j
.text:00407792                                         ; sub_407690+11D↓j
.text:00407792                 add     esp, 1Ch
.text:00407795                 pop     ebx
.text:00407796                 pop     esi
.text:00407797                 pop     edi
.text:00407798                 pop     ebp
.text:00407799                 retn
.text:0040779A ; ---------------------------------------------------------------------------
.text:0040779A
.text:0040779A loc_40779A:                             ; CODE XREF: sub_407690+A2↑j
.text:0040779A                 mov     eax, [edi+24h]
.text:0040779D                 test    eax, eax
.text:0040779F                 jz      short loc_4077BC
.text:004077A1                 mov     ebx, [eax+4]
.text:004077A4                 mov     edx, eax
.text:004077A6                 mov     [edi+24h], ebx
.text:004077A9
.text:004077A9 loc_4077A9:                             ; CODE XREF: sub_407690+13A↓j
.text:004077A9                 xor     eax, eax
.text:004077AB                 test    edx, edx
.text:004077AD                 jz      short loc_407792
.text:004077AF                 mov     [edx], ebp
.text:004077B1                 mov     ebp, [esi+4]
.text:004077B4                 mov     [edx+4], ebp
.text:004077B7                 mov     [esi+4], edx
.text:004077BA                 jmp     short loc_40773D
.text:004077BC ; ---------------------------------------------------------------------------
.text:004077BC
.text:004077BC loc_4077BC:                             ; CODE XREF: sub_407690+10F↑j
.text:004077BC                 mov     [esp+2Ch+Block], 8 ; Size
.text:004077C3                 call    malloc
.text:004077C8                 mov     edx, eax
.text:004077CA                 jmp     short loc_4077A9
.text:004077CA ; ---------------------------------------------------------------------------
.text:004077CC                 align 10h
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: sub_407690+98↑j
.text:004077D0                 inc     dword ptr [edi+0Ch]
.text:004077D3                 cmp     ebx, [esp+2Ch+var_14]
.text:004077D7                 mov     [esi], ebp
.text:004077D9                 jz      loc_40773D
.text:004077DF                 mov     dword ptr [ebx], 0
.text:004077E5                 mov     esi, [edi+24h]
.text:004077E8                 mov     [ebx+4], esi
.text:004077EB                 mov     [edi+24h], ebx
.text:004077EE                 jmp     loc_40773D
.text:004077F3 ; ---------------------------------------------------------------------------
.text:004077F3
.text:004077F3 loc_4077F3:                             ; CODE XREF: sub_407690+87↑j
.text:004077F3                 call    abort
.text:004077F3 sub_407690      endp
.text:004077F3
.text:004077F3 ; ---------------------------------------------------------------------------
.text:004077F8 flt_4077F8      dd 0.1                  ; DATA XREF: sub_407810+C3↓r
.text:004077FC flt_4077FC      dd 4.2949673e9          ; DATA XREF: sub_407810:loc_407987↓r
.text:00407800 flt_407800      dd 0.89999998           ; DATA XREF: sub_407810+D6↓r
.text:00407804 flt_407804      dd 1.1                  ; DATA XREF: sub_407810+EA↓r
.text:00407808                 align 10h
.text:00407810
.text:00407810 ; =============== S U B R O U T I N E =======================================
.text:00407810
.text:00407810
.text:00407810 sub_407810      proc near               ; CODE XREF: sub_404F10+99↑p
.text:00407810
.text:00407810 var_34          = qword ptr -34h
.text:00407810 Size            = dword ptr -2Ch
.text:00407810 var_28          = dword ptr -28h
.text:00407810 var_24          = dword ptr -24h
.text:00407810 var_20          = dword ptr -20h
.text:00407810 var_1C          = qword ptr -1Ch
.text:00407810 var_14          = word ptr -14h
.text:00407810 var_12          = word ptr -12h
.text:00407810 var_10          = dword ptr -10h
.text:00407810 var_8           = dword ptr -8
.text:00407810 var_4           = dword ptr -4
.text:00407810 arg_0           = dword ptr  4
.text:00407810 arg_4           = dword ptr  8
.text:00407810
.text:00407810                 sub     esp, 2Ch
.text:00407813                 mov     [esp+2Ch+var_8], ebx
.text:00407817                 mov     ebx, [esp+2Ch+arg_4]
.text:0040781B                 mov     [esp+2Ch+var_4], esi
.text:0040781F                 mov     esi, [esp+2Ch+arg_0]
.text:00407823                 test    ebx, ebx
.text:00407825                 jz      loc_4079FA
.text:0040782B                 mov     [esp+2Ch+var_20], 0
.text:00407833                 lea     edx, [esp+2Ch+var_10]
.text:00407837                 mov     [esp+2Ch+var_24], edx
.text:0040783B                 mov     [esp+2Ch+var_28], ebx
.text:0040783F                 mov     [esp+2Ch+Size], esi
.text:00407842                 call    sub_408070
.text:00407847                 test    eax, eax
.text:00407849                 jz      short loc_407857
.text:0040784B
.text:0040784B loc_40784B:                             ; CODE XREF: sub_407810+64↓j
.text:0040784B                                         ; sub_407810+7A↓j ...
.text:0040784B                 mov     ebx, [esp+2Ch+var_8]
.text:0040784F                 mov     esi, [esp+2Ch+var_4]
.text:00407853                 add     esp, 2Ch
.text:00407856                 retn
.text:00407857 ; ---------------------------------------------------------------------------
.text:00407857
.text:00407857 loc_407857:                             ; CODE XREF: sub_407810+39↑j
.text:00407857                 mov     eax, [esp+2Ch+var_10]
.text:0040785B                 mov     ecx, [eax]
.text:0040785D                 test    ecx, ecx
.text:0040785F                 jz      short loc_40789C
.text:00407861                 mov     eax, [esi+24h]
.text:00407864                 test    eax, eax
.text:00407866                 jz      short loc_40788C
.text:00407868                 mov     edx, [eax+4]
.text:0040786B                 mov     ecx, eax
.text:0040786D                 mov     [esi+24h], edx
.text:00407870
.text:00407870 loc_407870:                             ; CODE XREF: sub_407810+8A↓j
.text:00407870                 xor     eax, eax
.text:00407872                 test    ecx, ecx
.text:00407874                 jz      short loc_40784B
.text:00407876                 inc     dword ptr [esi+10h]
.text:00407879                 mov     edx, [esp+2Ch+var_10]
.text:0040787D                 mov     [ecx], ebx
.text:0040787F                 mov     eax, [edx+4]
.text:00407882                 mov     [ecx+4], eax
.text:00407885                 mov     [edx+4], ecx
.text:00407888
.text:00407888 loc_407888:                             ; CODE XREF: sub_407810+1C2↓j
.text:00407888                                         ; sub_407810+1D8↓j
.text:00407888                 mov     eax, ebx
.text:0040788A                 jmp     short loc_40784B
.text:0040788C ; ---------------------------------------------------------------------------
.text:0040788C
.text:0040788C loc_40788C:                             ; CODE XREF: sub_407810+56↑j
.text:0040788C                 mov     [esp+2Ch+Size], 8 ; Size
.text:00407893                 call    malloc
.text:00407898                 mov     ecx, eax
.text:0040789A                 jmp     short loc_407870
.text:0040789C ; ---------------------------------------------------------------------------
.text:0040789C
.text:0040789C loc_40789C:                             ; CODE XREF: sub_407810+4F↑j
.text:0040789C                 inc     dword ptr [esi+0Ch]
.text:0040789F                 xor     edx, edx
.text:004078A1                 mov     [eax], ebx
.text:004078A3                 xor     eax, eax
.text:004078A5                 mov     ecx, [esi+0Ch]
.text:004078A8                 inc     dword ptr [esi+10h]
.text:004078AB                 push    eax
.text:004078AC                 push    ecx
.text:004078AD                 mov     eax, [esi+8]
.text:004078B0                 mov     ecx, [esi+14h]
.text:004078B3                 fild    [esp+34h+var_34]
.text:004078B6                 add     esp, 8
.text:004078B9                 push    edx
.text:004078BA                 push    eax
.text:004078BB                 fild    [esp+34h+var_34]
.text:004078BE                 add     esp, 8
.text:004078C1                 fld     dword ptr [ecx+8]
.text:004078C4                 fmul    st(1), st
.text:004078C6                 fxch    st(2)
.text:004078C8                 fucompp
.text:004078CA                 fnstsw  ax
.text:004078CC                 sahf
.text:004078CD                 jbe     loc_4079E6
.text:004078D3                 fld     ds:flt_4077F8
.text:004078D9                 fxch    st(1)
.text:004078DB                 fucom   st(1)
.text:004078DD                 fnstsw  ax
.text:004078DF                 sahf
.text:004078E0                 jbe     loc_4079ED
.text:004078E6                 fld     ds:flt_407800
.text:004078EC                 fucomp  st(1)
.text:004078EE                 fnstsw  ax
.text:004078F0                 sahf
.text:004078F1                 jbe     loc_4079ED
.text:004078F7                 fld     dword ptr [ecx+0Ch]
.text:004078FA                 fld     ds:flt_407804
.text:00407900                 fxch    st(1)
.text:00407902                 fucompp
.text:00407904                 fnstsw  ax
.text:00407906                 sahf
.text:00407907                 jbe     loc_4079ED
.text:0040790D                 fld     dword ptr [ecx]
.text:0040790F                 fldz
.text:00407911                 fxch    st(1)
.text:00407913                 fucom   st(1)
.text:00407915                 fnstsw  ax
.text:00407917                 fstp    st(1)
.text:00407919                 sahf
.text:0040791A                 jb      loc_4079F6
.text:00407920                 faddp   st(2), st
.text:00407922                 fld     dword ptr [ecx+4]
.text:00407925                 fucom   st(2)
.text:00407927                 fnstsw  ax
.text:00407929                 sahf
.text:0040792A                 jbe     loc_4079F6
.text:00407930                 fld1
.text:00407932                 fucompp
.text:00407934                 fnstsw  ax
.text:00407936                 sahf
.text:00407937                 jb      loc_4079ED
.text:0040793D                 fucompp
.text:0040793F                 fnstsw  ax
.text:00407941                 sahf
.text:00407942                 ja      short loc_407950
.text:00407944
.text:00407944 loc_407944:                             ; CODE XREF: sub_407810+1E1↓j
.text:00407944                 mov     dword ptr [esi+14h], offset dword_407290
.text:0040794B                 mov     ecx, offset dword_407290
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: sub_407810+132↑j
.text:00407950                 mov     eax, [esi+0Ch]
.text:00407953                 xor     edx, edx
.text:00407955                 push    edx
.text:00407956                 xor     edx, edx
.text:00407958                 push    eax
.text:00407959                 mov     eax, [esi+8]
.text:0040795C                 fild    [esp+34h+var_34]
.text:0040795F                 add     esp, 8
.text:00407962                 push    edx
.text:00407963                 push    eax
.text:00407964                 fild    [esp+34h+var_34]
.text:00407967                 add     esp, 8
.text:0040796A                 fld     dword ptr [ecx+8]
.text:0040796D                 fld     st
.text:0040796F                 fmul    st, st(2)
.text:00407971                 fxch    st(3)
.text:00407973                 fucomp  st(3)
.text:00407975                 fnstsw  ax
.text:00407977                 fstp    st(2)
.text:00407979                 sahf
.text:0040797A                 jbe     short loc_4079E4
.text:0040797C                 cmp     byte ptr [ecx+10h], 0
.text:00407980                 fmul    dword ptr [ecx+0Ch]
.text:00407983                 jnz     short loc_4079E0
.text:00407985                 fmulp   st(1), st
.text:00407987
.text:00407987 loc_407987:                             ; CODE XREF: sub_407810+1D2↓j
.text:00407987                 fld     ds:flt_4077FC
.text:0040798D                 fxch    st(1)
.text:0040798F                 fucom   st(1)
.text:00407991                 fnstsw  ax
.text:00407993                 fstp    st(1)
.text:00407995                 sahf
.text:00407996                 jnb     short loc_4079D7
.text:00407998                 fnstcw  [esp+2Ch+var_12]
.text:0040799C                 movzx   edx, [esp+2Ch+var_12]
.text:004079A1                 mov     [esp+2Ch+Size], esi
.text:004079A4                 or      dx, 0C00h
.text:004079A9                 mov     [esp+2Ch+var_14], dx
.text:004079AE                 fldcw   [esp+2Ch+var_14]
.text:004079B2                 fistp   [esp+2Ch+var_1C]
.text:004079B6                 fldcw   [esp+2Ch+var_12]
.text:004079BA                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:004079BE                 mov     [esp+2Ch+var_28], ecx
.text:004079C2                 call    sub_407690
.text:004079C7                 test    al, al
.text:004079C9                 setz    dl
.text:004079CC                 movzx   esi, dl
.text:004079CF                 dec     esi
.text:004079D0                 and     ebx, esi
.text:004079D2                 jmp     loc_407888
.text:004079D7 ; ---------------------------------------------------------------------------
.text:004079D7
.text:004079D7 loc_4079D7:                             ; CODE XREF: sub_407810+186↑j
.text:004079D7                 fstp    st
.text:004079D9                 xor     eax, eax
.text:004079DB                 jmp     loc_40784B
.text:004079E0 ; ---------------------------------------------------------------------------
.text:004079E0
.text:004079E0 loc_4079E0:                             ; CODE XREF: sub_407810+173↑j
.text:004079E0                 fstp    st(1)
.text:004079E2                 jmp     short loc_407987
.text:004079E4 ; ---------------------------------------------------------------------------
.text:004079E4
.text:004079E4 loc_4079E4:                             ; CODE XREF: sub_407810+16A↑j
.text:004079E4                 fstp    st
.text:004079E6
.text:004079E6 loc_4079E6:                             ; CODE XREF: sub_407810+BD↑j
.text:004079E6                 fstp    st
.text:004079E8                 jmp     loc_407888
.text:004079ED ; ---------------------------------------------------------------------------
.text:004079ED
.text:004079ED loc_4079ED:                             ; CODE XREF: sub_407810+D0↑j
.text:004079ED                                         ; sub_407810+E1↑j ...
.text:004079ED                 fstp    st
.text:004079EF                 fstp    st
.text:004079F1                 jmp     loc_407944
.text:004079F6 ; ---------------------------------------------------------------------------
.text:004079F6
.text:004079F6 loc_4079F6:                             ; CODE XREF: sub_407810+10A↑j
.text:004079F6                                         ; sub_407810+11A↑j
.text:004079F6                 fstp    st
.text:004079F8                 jmp     short loc_4079ED
.text:004079FA ; ---------------------------------------------------------------------------
.text:004079FA
.text:004079FA loc_4079FA:                             ; CODE XREF: sub_407810+15↑j
.text:004079FA                 call    abort
.text:004079FA sub_407810      endp
.text:004079FA
.text:004079FA ; ---------------------------------------------------------------------------
.text:004079FF                 align 10h
.text:00407A00                 mov     edx, [esp+4]
.text:00407A04                 mov     eax, [edx+8]
.text:00407A07                 retn
.text:00407A07 ; ---------------------------------------------------------------------------
.text:00407A08                 align 10h
.text:00407A10                 mov     edx, [esp+4]
.text:00407A14                 mov     eax, [edx+0Ch]
.text:00407A17                 retn
.text:00407A17 ; ---------------------------------------------------------------------------
.text:00407A18                 align 10h
.text:00407A20                 mov     edx, [esp+4]
.text:00407A24                 mov     eax, [edx+10h]
.text:00407A27                 retn
.text:00407A27 ; ---------------------------------------------------------------------------
.text:00407A28                 align 10h
.text:00407A30                 push    esi
.text:00407A31                 xor     esi, esi
.text:00407A33                 push    ebx
.text:00407A34                 mov     edx, [esp+0Ch]
.text:00407A38                 mov     ecx, [edx]
.text:00407A3A                 mov     ebx, [edx+4]
.text:00407A3D                 cmp     ecx, ebx
.text:00407A3F                 jnb     short loc_407A87
.text:00407A41                 jmp     short loc_407A50
.text:00407A41 ; ---------------------------------------------------------------------------
.text:00407A43                 align 10h
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: .text:00407A41↑j
.text:00407A50                                         ; .text:00407A85↓j
.text:00407A50                 mov     edx, [ecx]
.text:00407A52                 test    edx, edx
.text:00407A54                 jz      short loc_407A80
.text:00407A56                 mov     eax, [ecx+4]
.text:00407A59                 mov     edx, 1
.text:00407A5E                 test    eax, eax
.text:00407A60                 jz      short loc_407A78
.text:00407A62                 lea     esi, [esi+0]
.text:00407A69                 lea     edi, [edi+0]
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: .text:00407A76↓j
.text:00407A70                 mov     eax, [eax+4]
.text:00407A73                 inc     edx
.text:00407A74                 test    eax, eax
.text:00407A76                 jnz     short loc_407A70
.text:00407A78
.text:00407A78 loc_407A78:                             ; CODE XREF: .text:00407A60↑j
.text:00407A78                 cmp     edx, esi
.text:00407A7A                 jbe     short loc_407A80
.text:00407A7C                 mov     esi, edx
.text:00407A7E                 mov     esi, esi
.text:00407A80
.text:00407A80 loc_407A80:                             ; CODE XREF: .text:00407A54↑j
.text:00407A80                                         ; .text:00407A7A↑j
.text:00407A80                 add     ecx, 8
.text:00407A83                 cmp     ecx, ebx
.text:00407A85                 jb      short loc_407A50
.text:00407A87
.text:00407A87 loc_407A87:                             ; CODE XREF: .text:00407A3F↑j
.text:00407A87                 pop     ebx
.text:00407A88                 mov     eax, esi
.text:00407A8A                 pop     esi
.text:00407A8B                 retn
.text:00407A8B ; ---------------------------------------------------------------------------
.text:00407A8C                 align 10h
.text:00407A90                 push    edi
.text:00407A91                 xor     ecx, ecx
.text:00407A93                 push    esi
.text:00407A94                 xor     esi, esi
.text:00407A96                 push    ebx
.text:00407A97                 mov     edi, [esp+10h]
.text:00407A9B                 mov     edx, [edi]
.text:00407A9D                 mov     ebx, [edi+4]
.text:00407AA0                 cmp     edx, ebx
.text:00407AA2                 jnb     short loc_407ACF
.text:00407AA4                 lea     esi, [esi+0]
.text:00407AAA                 lea     edi, [edi+0]
.text:00407AB0
.text:00407AB0 loc_407AB0:                             ; CODE XREF: .text:00407ACD↓j
.text:00407AB0                 mov     eax, [edx]
.text:00407AB2                 test    eax, eax
.text:00407AB4                 jz      short loc_407AC8
.text:00407AB6                 mov     eax, [edx+4]
.text:00407AB9                 inc     esi
.text:00407ABA                 inc     ecx
.text:00407ABB                 test    eax, eax
.text:00407ABD                 jz      short loc_407AC8
.text:00407ABF                 nop
.text:00407AC0
.text:00407AC0 loc_407AC0:                             ; CODE XREF: .text:00407AC6↓j
.text:00407AC0                 mov     eax, [eax+4]
.text:00407AC3                 inc     ecx
.text:00407AC4                 test    eax, eax
.text:00407AC6                 jnz     short loc_407AC0
.text:00407AC8
.text:00407AC8 loc_407AC8:                             ; CODE XREF: .text:00407AB4↑j
.text:00407AC8                                         ; .text:00407ABD↑j
.text:00407AC8                 add     edx, 8
.text:00407ACB                 cmp     edx, ebx
.text:00407ACD                 jb      short loc_407AB0
.text:00407ACF
.text:00407ACF loc_407ACF:                             ; CODE XREF: .text:00407AA2↑j
.text:00407ACF                 cmp     esi, [edi+0Ch]
.text:00407AD2                 jz      short loc_407ADA
.text:00407AD4
.text:00407AD4 loc_407AD4:                             ; CODE XREF: .text:00407ADD↓j
.text:00407AD4                 xor     eax, eax
.text:00407AD6
.text:00407AD6 loc_407AD6:                             ; CODE XREF: .text:00407AE4↓j
.text:00407AD6                 pop     ebx
.text:00407AD7                 pop     esi
.text:00407AD8                 pop     edi
.text:00407AD9                 retn
.text:00407ADA ; ---------------------------------------------------------------------------
.text:00407ADA
.text:00407ADA loc_407ADA:                             ; CODE XREF: .text:00407AD2↑j
.text:00407ADA                 cmp     ecx, [edi+10h]
.text:00407ADD                 jnz     short loc_407AD4
.text:00407ADF                 mov     eax, 1
.text:00407AE4                 jmp     short loc_407AD6
.text:00407AE4 ; ---------------------------------------------------------------------------
.text:00407AE6 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00407AE6                                         ; DATA XREF: .text:00407BDE↓o
.text:00407AFE aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00407AFE                                         ; DATA XREF: .text:00407BF6↓o
.text:00407B16                 db 1Ah dup(90h)
.text:00407B30 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00407B30                                         ; DATA XREF: .text:00407C30↓o
.text:00407B51 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00407B51                                         ; DATA XREF: .text:00407C4A↓o
.text:00407B69                 db 8Dh, 76h, 0
.text:00407B6C flt_407B6C      dd 100.0                ; DATA XREF: .text:00407C23↓r
.text:00407B70 ; ---------------------------------------------------------------------------
.text:00407B70                 push    ebp
.text:00407B71                 push    edi
.text:00407B72                 push    esi
.text:00407B73                 xor     esi, esi
.text:00407B75                 push    ebx
.text:00407B76                 sub     esp, 1Ch
.text:00407B79                 mov     ebx, [esp+30h]
.text:00407B7D                 mov     edi, [esp+34h]
.text:00407B81                 mov     ecx, [ebx+10h]
.text:00407B84                 mov     eax, [ebx+0Ch]
.text:00407B87                 mov     ebp, [ebx+8]
.text:00407B8A                 mov     [esp+18h], ecx
.text:00407B8E                 mov     ecx, [ebx]
.text:00407B90                 mov     [esp+14h], eax
.text:00407B94                 mov     eax, [ebx+4]
.text:00407B97                 cmp     ecx, eax
.text:00407B99                 jnb     short loc_407BD7
.text:00407B9B                 mov     ebx, eax
.text:00407B9D                 lea     esi, [esi+0]
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; CODE XREF: .text:00407BD5↓j
.text:00407BA0                 mov     edx, [ecx]
.text:00407BA2                 test    edx, edx
.text:00407BA4                 jz      short loc_407BD0
.text:00407BA6                 mov     eax, [ecx+4]
.text:00407BA9                 mov     edx, 1
.text:00407BAE                 test    eax, eax
.text:00407BB0                 jz      short loc_407BC8
.text:00407BB2                 lea     esi, [esi+0]
.text:00407BB9                 lea     edi, [edi+0]
.text:00407BC0
.text:00407BC0 loc_407BC0:                             ; CODE XREF: .text:00407BC6↓j
.text:00407BC0                 mov     eax, [eax+4]
.text:00407BC3                 inc     edx
.text:00407BC4                 test    eax, eax
.text:00407BC6                 jnz     short loc_407BC0
.text:00407BC8
.text:00407BC8 loc_407BC8:                             ; CODE XREF: .text:00407BB0↑j
.text:00407BC8                 cmp     edx, esi
.text:00407BCA                 jbe     short loc_407BD0
.text:00407BCC                 mov     esi, edx
.text:00407BCE                 mov     esi, esi
.text:00407BD0
.text:00407BD0 loc_407BD0:                             ; CODE XREF: .text:00407BA4↑j
.text:00407BD0                                         ; .text:00407BCA↑j
.text:00407BD0                 add     ecx, 8
.text:00407BD3                 cmp     ecx, ebx
.text:00407BD5                 jb      short loc_407BA0
.text:00407BD7
.text:00407BD7 loc_407BD7:                             ; CODE XREF: .text:00407B99↑j
.text:00407BD7                 mov     [esp], edi
.text:00407BDA                 mov     edx, [esp+18h]
.text:00407BDE                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00407BE6                 mov     [esp+8], edx
.text:00407BEA                 call    fprintf
.text:00407BEF                 mov     [esp+8], ebp
.text:00407BF3                 mov     [esp], edi
.text:00407BF6                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:00407BFE                 call    fprintf
.text:00407C03                 mov     ebx, [esp+14h]
.text:00407C07                 xor     eax, eax
.text:00407C09                 mov     ecx, ebp
.text:00407C0B                 push    eax
.text:00407C0C                 xor     ebp, ebp
.text:00407C0E                 push    ebx
.text:00407C0F                 fild    qword ptr [esp]
.text:00407C12                 add     esp, 8
.text:00407C15                 push    ebp
.text:00407C16                 push    ecx
.text:00407C17                 fild    qword ptr [esp]
.text:00407C1A                 fxch    st(1)
.text:00407C1C                 add     esp, 8
.text:00407C1F                 mov     ebx, [esp+14h]
.text:00407C23                 fmul    ds:flt_407B6C
.text:00407C29                 mov     [esp], edi
.text:00407C2C                 mov     [esp+8], ebx
.text:00407C30                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00407C38                 fdivrp  st(1), st
.text:00407C3A                 fstp    qword ptr [esp+0Ch]
.text:00407C3E                 call    fprintf
.text:00407C43                 mov     [esp+8], esi
.text:00407C47                 mov     [esp], edi
.text:00407C4A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00407C52                 call    fprintf
.text:00407C57                 add     esp, 1Ch
.text:00407C5A                 pop     ebx
.text:00407C5B                 pop     esi
.text:00407C5C                 pop     edi
.text:00407C5D                 pop     ebp
.text:00407C5E                 retn
.text:00407C5E ; ---------------------------------------------------------------------------
.text:00407C5F                 align 10h
.text:00407C60                 push    edi
.text:00407C61                 push    esi
.text:00407C62                 push    ebx
.text:00407C63                 sub     esp, 10h
.text:00407C66                 mov     esi, [esp+20h]
.text:00407C6A                 mov     edi, [esp+24h]
.text:00407C6E                 mov     edx, [esi+8]
.text:00407C71                 mov     [esp], edi
.text:00407C74                 mov     [esp+4], edx
.text:00407C78                 call    dword ptr [esi+18h]
.text:00407C7B                 mov     ecx, [esi]
.text:00407C7D                 lea     eax, [ecx+eax*8]
.text:00407C80                 cmp     eax, [esi+4]
.text:00407C83                 jnb     short loc_407CC4
.text:00407C85                 mov     ecx, [eax]
.text:00407C87                 test    ecx, ecx
.text:00407C89                 jz      short loc_407CB7
.text:00407C8B                 test    eax, eax
.text:00407C8D                 mov     ebx, eax
.text:00407C8F                 jz      short loc_407CB7
.text:00407C91                 jmp     short loc_407CA0
.text:00407C91 ; ---------------------------------------------------------------------------
.text:00407C93                 align 10h
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: .text:00407C91↑j
.text:00407CA0                                         ; .text:00407CB5↓j
.text:00407CA0                 mov     edx, [ebx]
.text:00407CA2                 mov     [esp], edi
.text:00407CA5                 mov     [esp+4], edx
.text:00407CA9                 call    dword ptr [esi+1Ch]
.text:00407CAC                 test    al, al
.text:00407CAE                 jnz     short loc_407CC0
.text:00407CB0                 mov     ebx, [ebx+4]
.text:00407CB3                 test    ebx, ebx
.text:00407CB5                 jnz     short loc_407CA0
.text:00407CB7
.text:00407CB7 loc_407CB7:                             ; CODE XREF: .text:00407C89↑j
.text:00407CB7                                         ; .text:00407C8F↑j
.text:00407CB7                 xor     eax, eax
.text:00407CB9
.text:00407CB9 loc_407CB9:                             ; CODE XREF: .text:00407CC2↓j
.text:00407CB9                 add     esp, 10h
.text:00407CBC                 pop     ebx
.text:00407CBD                 pop     esi
.text:00407CBE                 pop     edi
.text:00407CBF                 retn
.text:00407CC0 ; ---------------------------------------------------------------------------
.text:00407CC0
.text:00407CC0 loc_407CC0:                             ; CODE XREF: .text:00407CAE↑j
.text:00407CC0                 mov     eax, [ebx]
.text:00407CC2                 jmp     short loc_407CB9
.text:00407CC4 ; ---------------------------------------------------------------------------
.text:00407CC4
.text:00407CC4 loc_407CC4:                             ; CODE XREF: .text:00407C83↑j
.text:00407CC4                 call    abort
.text:00407CC4 ; ---------------------------------------------------------------------------
.text:00407CC9                 align 10h
.text:00407CD0                 sub     esp, 0Ch
.text:00407CD3                 mov     eax, [esp+10h]
.text:00407CD7                 mov     edx, [eax+10h]
.text:00407CDA                 test    edx, edx
.text:00407CDC                 jz      short loc_407D03
.text:00407CDE                 mov     edx, [eax]
.text:00407CE0                 mov     ecx, [eax+4]
.text:00407CE3                 lea     esi, [esi+0]
.text:00407CE9                 lea     edi, [edi+0]
.text:00407CF0
.text:00407CF0 loc_407CF0:                             ; CODE XREF: .text:00407CFD↓j
.text:00407CF0                 cmp     edx, ecx
.text:00407CF2                 jnb     short loc_407D07
.text:00407CF4                 mov     eax, [edx]
.text:00407CF6                 test    eax, eax
.text:00407CF8                 jnz     short loc_407CFF
.text:00407CFA                 add     edx, 8
.text:00407CFD                 jmp     short loc_407CF0
.text:00407CFF ; ---------------------------------------------------------------------------
.text:00407CFF
.text:00407CFF loc_407CFF:                             ; CODE XREF: .text:00407CF8↑j
.text:00407CFF                                         ; .text:00407D05↓j
.text:00407CFF                 add     esp, 0Ch
.text:00407D02                 retn
.text:00407D03 ; ---------------------------------------------------------------------------
.text:00407D03
.text:00407D03 loc_407D03:                             ; CODE XREF: .text:00407CDC↑j
.text:00407D03                 xor     eax, eax
.text:00407D05                 jmp     short loc_407CFF
.text:00407D07 ; ---------------------------------------------------------------------------
.text:00407D07
.text:00407D07 loc_407D07:                             ; CODE XREF: .text:00407CF2↑j
.text:00407D07                 call    abort
.text:00407D07 ; ---------------------------------------------------------------------------
.text:00407D0C                 align 10h
.text:00407D10                 push    esi
.text:00407D11                 push    ebx
.text:00407D12                 sub     esp, 14h
.text:00407D15                 mov     ebx, [esp+20h]
.text:00407D19                 mov     esi, [esp+24h]
.text:00407D1D                 mov     edx, [ebx+8]
.text:00407D20                 mov     [esp], esi
.text:00407D23                 mov     [esp+4], edx
.text:00407D27                 call    dword ptr [ebx+18h]
.text:00407D2A                 mov     ecx, [ebx]
.text:00407D2C                 lea     edx, [ecx+eax*8]
.text:00407D2F                 mov     ecx, [ebx+4]
.text:00407D32                 cmp     edx, ecx
.text:00407D34                 jnb     short loc_407D80
.text:00407D36                 test    edx, edx
.text:00407D38                 mov     eax, edx
.text:00407D3A                 jz      short loc_407D4B
.text:00407D3C                 lea     esi, [esi+0]
.text:00407D40
.text:00407D40 loc_407D40:                             ; CODE XREF: .text:00407D49↓j
.text:00407D40                 cmp     [eax], esi
.text:00407D42                 jz      short loc_407D75
.text:00407D44                 mov     eax, [eax+4]
.text:00407D47
.text:00407D47 loc_407D47:                             ; CODE XREF: .text:00407D7A↓j
.text:00407D47                 test    eax, eax
.text:00407D49                 jnz     short loc_407D40
.text:00407D4B
.text:00407D4B loc_407D4B:                             ; CODE XREF: .text:00407D3A↑j
.text:00407D4B                 add     edx, 8
.text:00407D4E                 cmp     edx, ecx
.text:00407D50                 jnb     short loc_407D6D
.text:00407D52                 lea     esi, [esi+0]
.text:00407D59                 lea     edi, [edi+0]
.text:00407D60
.text:00407D60 loc_407D60:                             ; CODE XREF: .text:00407D6B↓j
.text:00407D60                 mov     eax, [edx]
.text:00407D62                 test    eax, eax
.text:00407D64                 jnz     short loc_407D6F
.text:00407D66                 add     edx, 8
.text:00407D69                 cmp     edx, ecx
.text:00407D6B                 jb      short loc_407D60
.text:00407D6D
.text:00407D6D loc_407D6D:                             ; CODE XREF: .text:00407D50↑j
.text:00407D6D                 xor     eax, eax
.text:00407D6F
.text:00407D6F loc_407D6F:                             ; CODE XREF: .text:00407D64↑j
.text:00407D6F                                         ; .text:00407D7E↓j
.text:00407D6F                 add     esp, 14h
.text:00407D72                 pop     ebx
.text:00407D73                 pop     esi
.text:00407D74                 retn
.text:00407D75 ; ---------------------------------------------------------------------------
.text:00407D75
.text:00407D75 loc_407D75:                             ; CODE XREF: .text:00407D42↑j
.text:00407D75                 mov     eax, [eax+4]
.text:00407D78                 test    eax, eax
.text:00407D7A                 jz      short loc_407D47
.text:00407D7C                 mov     eax, [eax]
.text:00407D7E                 jmp     short loc_407D6F
.text:00407D80 ; ---------------------------------------------------------------------------
.text:00407D80
.text:00407D80 loc_407D80:                             ; CODE XREF: .text:00407D34↑j
.text:00407D80                 call    abort
.text:00407D80 ; ---------------------------------------------------------------------------
.text:00407D85                 align 10h
.text:00407D90                 push    ebp
.text:00407D91                 xor     ecx, ecx
.text:00407D93                 push    edi
.text:00407D94                 push    esi
.text:00407D95                 push    ebx
.text:00407D96                 mov     edx, [esp+14h]
.text:00407D9A                 mov     ebp, [esp+18h]
.text:00407D9E                 mov     edi, [esp+1Ch]
.text:00407DA2                 mov     ebx, [edx]
.text:00407DA4                 mov     esi, [edx+4]
.text:00407DA7                 cmp     ebx, esi
.text:00407DA9                 jnb     short loc_407DE0
.text:00407DAB                 nop
.text:00407DAC                 lea     esi, [esi+0]
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: .text:00407DD7↓j
.text:00407DB0                 mov     edx, [ebx]
.text:00407DB2                 test    edx, edx
.text:00407DB4                 jz      short loc_407DD2
.text:00407DB6                 mov     edx, ebx
.text:00407DB8                 nop
.text:00407DB9                 lea     esi, [esi+0]
.text:00407DC0
.text:00407DC0 loc_407DC0:                             ; CODE XREF: .text:00407DD0↓j
.text:00407DC0                 cmp     ecx, edi
.text:00407DC2                 jnb     short loc_407DE0
.text:00407DC4                 mov     eax, [edx]
.text:00407DC6                 mov     edx, [edx+4]
.text:00407DC9                 mov     [ebp+ecx*4+0], eax
.text:00407DCD                 inc     ecx
.text:00407DCE                 test    edx, edx
.text:00407DD0                 jnz     short loc_407DC0
.text:00407DD2
.text:00407DD2 loc_407DD2:                             ; CODE XREF: .text:00407DB4↑j
.text:00407DD2                 add     ebx, 8
.text:00407DD5                 cmp     ebx, esi
.text:00407DD7                 jb      short loc_407DB0
.text:00407DD9                 lea     esi, [esi+0]
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: .text:00407DA9↑j
.text:00407DE0                                         ; .text:00407DC2↑j
.text:00407DE0                 pop     ebx
.text:00407DE1                 mov     eax, ecx
.text:00407DE3                 pop     esi
.text:00407DE4                 pop     edi
.text:00407DE5                 pop     ebp
.text:00407DE6                 retn
.text:00407DE6 ; ---------------------------------------------------------------------------
.text:00407DE7                 align 10h
.text:00407DF0                 push    ebp
.text:00407DF1                 push    edi
.text:00407DF2                 xor     edi, edi
.text:00407DF4                 push    esi
.text:00407DF5                 push    ebx
.text:00407DF6                 sub     esp, 0Ch
.text:00407DF9                 mov     edx, [esp+20h]
.text:00407DFD                 mov     ebp, [esp+28h]
.text:00407E01                 mov     esi, [edx]
.text:00407E03                 mov     eax, [edx+4]
.text:00407E06                 cmp     esi, eax
.text:00407E08                 jnb     short loc_407E50
.text:00407E0A                 lea     esi, [esi+0]
.text:00407E10
.text:00407E10 loc_407E10:                             ; CODE XREF: .text:00407E45↓j
.text:00407E10                 mov     ecx, [esi]
.text:00407E12                 test    ecx, ecx
.text:00407E14                 jz      short loc_407E40
.text:00407E16                 mov     ebx, esi
.text:00407E18                 nop
.text:00407E19                 lea     esi, [esi+0]
.text:00407E20
.text:00407E20 loc_407E20:                             ; CODE XREF: .text:00407E37↓j
.text:00407E20                 mov     [esp+4], ebp
.text:00407E24                 mov     edx, [ebx]
.text:00407E26                 mov     [esp], edx
.text:00407E29                 call    dword ptr [esp+24h]
.text:00407E2D                 test    al, al
.text:00407E2F                 jz      short loc_407E50
.text:00407E31                 mov     ebx, [ebx+4]
.text:00407E34                 inc     edi
.text:00407E35                 test    ebx, ebx
.text:00407E37                 jnz     short loc_407E20
.text:00407E39                 mov     ebx, [esp+20h]
.text:00407E3D                 mov     eax, [ebx+4]
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: .text:00407E14↑j
.text:00407E40                 add     esi, 8
.text:00407E43                 cmp     esi, eax
.text:00407E45                 jb      short loc_407E10
.text:00407E47                 mov     esi, esi
.text:00407E49                 lea     edi, [edi+0]
.text:00407E50
.text:00407E50 loc_407E50:                             ; CODE XREF: .text:00407E08↑j
.text:00407E50                                         ; .text:00407E2F↑j
.text:00407E50                 add     esp, 0Ch
.text:00407E53                 mov     eax, edi
.text:00407E55                 pop     ebx
.text:00407E56                 pop     esi
.text:00407E57                 pop     edi
.text:00407E58                 pop     ebp
.text:00407E59                 retn
.text:00407E59 ; ---------------------------------------------------------------------------
.text:00407E5A                 align 10h
.text:00407E60                 push    esi
.text:00407E61                 push    ebx
.text:00407E62                 mov     ecx, [esp+0Ch]
.text:00407E66                 xor     ebx, ebx
.text:00407E68                 mov     esi, [esp+10h]
.text:00407E6C                 movzx   edx, byte ptr [ecx]
.text:00407E6F                 test    dl, dl
.text:00407E71                 jz      short loc_407E9A
.text:00407E73                 lea     esi, [esi+0]
.text:00407E79                 lea     edi, [edi+0]
.text:00407E80
.text:00407E80 loc_407E80:                             ; CODE XREF: .text:00407E98↓j
.text:00407E80                 mov     eax, ebx
.text:00407E82                 inc     ecx
.text:00407E83                 shl     eax, 5
.text:00407E86                 sub     eax, ebx
.text:00407E88                 movzx   ebx, dl
.text:00407E8B                 add     eax, ebx
.text:00407E8D                 xor     edx, edx
.text:00407E8F                 div     esi
.text:00407E91                 mov     ebx, edx
.text:00407E93                 movzx   edx, byte ptr [ecx]
.text:00407E96                 test    dl, dl
.text:00407E98                 jnz     short loc_407E80
.text:00407E9A
.text:00407E9A loc_407E9A:                             ; CODE XREF: .text:00407E71↑j
.text:00407E9A                 mov     eax, ebx
.text:00407E9C                 pop     ebx
.text:00407E9D                 pop     esi
.text:00407E9E                 retn
.text:00407E9E ; ---------------------------------------------------------------------------
.text:00407E9F                 align 10h
.text:00407EA0                 mov     ecx, [esp+4]
.text:00407EA4                 mov     edx, ds:dword_407290
.text:00407EAA                 mov     [ecx], edx
.text:00407EAC                 mov     edx, ds:dword_407294
.text:00407EB2                 mov     [ecx+4], edx
.text:00407EB5                 mov     edx, ds:dword_407294+4
.text:00407EBB                 mov     [ecx+8], edx
.text:00407EBE                 mov     edx, ds:dword_407294+8
.text:00407EC4                 mov     [ecx+0Ch], edx
.text:00407EC7                 mov     edx, ds:dword_407294+0Ch
.text:00407ECD                 mov     [ecx+10h], edx
.text:00407ED0                 retn
.text:00407ED0 ; ---------------------------------------------------------------------------
.text:00407ED1                 align 4
.text:00407ED4 flt_407ED4      dd 0.1                  ; DATA XREF: sub_407EE0+79↓r
.text:00407ED8 flt_407ED8      dd 0.89999998           ; DATA XREF: sub_407EE0+8D↓r
.text:00407EDC flt_407EDC      dd 1.1                  ; DATA XREF: sub_407EE0+A1↓r
.text:00407EE0
.text:00407EE0 ; =============== S U B R O U T I N E =======================================
.text:00407EE0
.text:00407EE0
.text:00407EE0 sub_407EE0      proc near               ; CODE XREF: sub_403A80+2F0↑p
.text:00407EE0                                         ; sub_403A80+483↑p
.text:00407EE0
.text:00407EE0 var_34          = qword ptr -34h
.text:00407EE0 var_2C          = dword ptr -2Ch
.text:00407EE0 var_28          = dword ptr -28h
.text:00407EE0 var_24          = dword ptr -24h
.text:00407EE0 var_20          = dword ptr -20h
.text:00407EE0 var_1C          = qword ptr -1Ch
.text:00407EE0 var_14          = word ptr -14h
.text:00407EE0 var_12          = word ptr -12h
.text:00407EE0 var_10          = dword ptr -10h
.text:00407EE0 arg_0           = dword ptr  4
.text:00407EE0 arg_4           = dword ptr  8
.text:00407EE0
.text:00407EE0                 push    esi
.text:00407EE1                 push    ebx
.text:00407EE2                 sub     esp, 24h
.text:00407EE5                 lea     edx, [esp+2Ch+var_10]
.text:00407EE9                 mov     [esp+2Ch+var_24], edx
.text:00407EED                 mov     ebx, [esp+2Ch+arg_0]
.text:00407EF1                 mov     edx, [esp+2Ch+arg_4]
.text:00407EF5                 mov     [esp+2Ch+var_20], 1
.text:00407EFD                 mov     [esp+2Ch+var_2C], ebx
.text:00407F00                 mov     [esp+2Ch+var_28], edx
.text:00407F04                 call    sub_408070
.text:00407F09                 mov     esi, eax
.text:00407F0B                 xor     eax, eax
.text:00407F0D                 test    esi, esi
.text:00407F0F                 jz      loc_408042
.text:00407F15                 dec     dword ptr [ebx+10h]
.text:00407F18                 mov     ecx, [esp+2Ch+var_10]
.text:00407F1C                 mov     edx, [ecx]
.text:00407F1E                 test    edx, edx
.text:00407F20                 jnz     loc_408040
.text:00407F26                 dec     dword ptr [ebx+0Ch]
.text:00407F29                 xor     eax, eax
.text:00407F2B                 xor     edx, edx
.text:00407F2D                 mov     ecx, [ebx+0Ch]
.text:00407F30                 push    eax
.text:00407F31                 push    ecx
.text:00407F32                 mov     eax, [ebx+8]
.text:00407F35                 mov     ecx, [ebx+14h]
.text:00407F38                 fild    [esp+34h+var_34]
.text:00407F3B                 add     esp, 8
.text:00407F3E                 push    edx
.text:00407F3F                 push    eax
.text:00407F40                 fild    [esp+34h+var_34]
.text:00407F43                 add     esp, 8
.text:00407F46                 fld     dword ptr [ecx]
.text:00407F48                 fmul    st(1), st
.text:00407F4A                 fxch    st(1)
.text:00407F4C                 fucomp  st(2)
.text:00407F4E                 fnstsw  ax
.text:00407F50                 fstp    st(1)
.text:00407F52                 sahf
.text:00407F53                 jbe     loc_408050
.text:00407F59                 fld     ds:flt_407ED4
.text:00407F5F                 fld     dword ptr [ecx+8]
.text:00407F62                 fucom   st(1)
.text:00407F64                 fnstsw  ax
.text:00407F66                 sahf
.text:00407F67                 jbe     loc_408060
.text:00407F6D                 fld     ds:flt_407ED8
.text:00407F73                 fucomp  st(1)
.text:00407F75                 fnstsw  ax
.text:00407F77                 sahf
.text:00407F78                 jbe     loc_408060
.text:00407F7E                 fld     dword ptr [ecx+0Ch]
.text:00407F81                 fld     ds:flt_407EDC
.text:00407F87                 fxch    st(1)
.text:00407F89                 fucompp
.text:00407F8B                 fnstsw  ax
.text:00407F8D                 sahf
.text:00407F8E                 jbe     loc_408060
.text:00407F94                 fldz
.text:00407F96                 fxch    st(3)
.text:00407F98                 fucom   st(3)
.text:00407F9A                 fnstsw  ax
.text:00407F9C                 fstp    st(3)
.text:00407F9E                 sahf
.text:00407F9F                 jb      loc_408060
.text:00407FA5                 fxch    st(1)
.text:00407FA7                 faddp   st(2), st
.text:00407FA9                 fld     dword ptr [ecx+4]
.text:00407FAC                 fucom   st(2)
.text:00407FAE                 fnstsw  ax
.text:00407FB0                 sahf
.text:00407FB1                 jbe     loc_408060
.text:00407FB7                 fld1
.text:00407FB9                 fucompp
.text:00407FBB                 fnstsw  ax
.text:00407FBD                 sahf
.text:00407FBE                 jb      loc_408054
.text:00407FC4                 fucompp
.text:00407FC6                 fnstsw  ax
.text:00407FC8                 sahf
.text:00407FC9                 ja      short loc_407FDC
.text:00407FCB                 nop
.text:00407FCC                 lea     esi, [esi+0]
.text:00407FD0
.text:00407FD0 loc_407FD0:                             ; CODE XREF: sub_407EE0+178↓j
.text:00407FD0                 mov     dword ptr [ebx+14h], offset dword_407290
.text:00407FD7                 mov     ecx, offset dword_407290
.text:00407FDC
.text:00407FDC loc_407FDC:                             ; CODE XREF: sub_407EE0+E9↑j
.text:00407FDC                 mov     eax, [ebx+0Ch]
.text:00407FDF                 xor     edx, edx
.text:00407FE1                 push    edx
.text:00407FE2                 xor     edx, edx
.text:00407FE4                 push    eax
.text:00407FE5                 mov     eax, [ebx+8]
.text:00407FE8                 fild    [esp+34h+var_34]
.text:00407FEB                 add     esp, 8
.text:00407FEE                 push    edx
.text:00407FEF                 push    eax
.text:00407FF0                 fild    [esp+34h+var_34]
.text:00407FF3                 add     esp, 8
.text:00407FF6                 fld     dword ptr [ecx]
.text:00407FF8                 fmul    st, st(1)
.text:00407FFA                 fucomp  st(2)
.text:00407FFC                 fnstsw  ax
.text:00407FFE                 fstp    st(1)
.text:00408000                 sahf
.text:00408001                 jbe     short loc_408050
.text:00408003                 cmp     byte ptr [ecx+10h], 0
.text:00408007                 jz      short loc_408048
.text:00408009                 fmul    dword ptr [ecx+4]
.text:0040800C
.text:0040800C loc_40800C:                             ; CODE XREF: sub_407EE0+16E↓j
.text:0040800C                 fnstcw  [esp+2Ch+var_12]
.text:00408010                 movzx   ecx, [esp+2Ch+var_12]
.text:00408015                 mov     [esp+2Ch+var_2C], ebx
.text:00408018                 or      cx, 0C00h
.text:0040801D                 mov     [esp+2Ch+var_14], cx
.text:00408022                 fldcw   [esp+2Ch+var_14]
.text:00408026                 fistp   [esp+2Ch+var_1C]
.text:0040802A                 fldcw   [esp+2Ch+var_12]
.text:0040802E                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:00408032                 mov     [esp+2Ch+var_28], edx
.text:00408036                 call    sub_407690
.text:0040803B                 nop
.text:0040803C                 lea     esi, [esi+0]
.text:00408040
.text:00408040 loc_408040:                             ; CODE XREF: sub_407EE0+40↑j
.text:00408040                                         ; sub_407EE0+172↓j
.text:00408040                 mov     eax, esi
.text:00408042
.text:00408042 loc_408042:                             ; CODE XREF: sub_407EE0+2F↑j
.text:00408042                 add     esp, 24h
.text:00408045                 pop     ebx
.text:00408046                 pop     esi
.text:00408047                 retn
.text:00408048 ; ---------------------------------------------------------------------------
.text:00408048
.text:00408048 loc_408048:                             ; CODE XREF: sub_407EE0+127↑j
.text:00408048                 fmul    dword ptr [ecx+4]
.text:0040804B                 fmul    dword ptr [ecx+8]
.text:0040804E                 jmp     short loc_40800C
.text:00408050 ; ---------------------------------------------------------------------------
.text:00408050
.text:00408050 loc_408050:                             ; CODE XREF: sub_407EE0+73↑j
.text:00408050                                         ; sub_407EE0+121↑j
.text:00408050                 fstp    st
.text:00408052                 jmp     short loc_408040
.text:00408054 ; ---------------------------------------------------------------------------
.text:00408054
.text:00408054 loc_408054:                             ; CODE XREF: sub_407EE0+DE↑j
.text:00408054                                         ; sub_407EE0+182↓j
.text:00408054                 fstp    st
.text:00408056                 fstp    st
.text:00408058                 jmp     loc_407FD0
.text:00408058 ; ---------------------------------------------------------------------------
.text:0040805D                 align 10h
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: sub_407EE0+87↑j
.text:00408060                                         ; sub_407EE0+98↑j ...
.text:00408060                 fstp    st
.text:00408062                 jmp     short loc_408054
.text:00408062 sub_407EE0      endp
.text:00408062
.text:00408062 ; ---------------------------------------------------------------------------
.text:00408064                 align 10h
.text:00408070
.text:00408070 ; =============== S U B R O U T I N E =======================================
.text:00408070
.text:00408070
.text:00408070 sub_408070      proc near               ; CODE XREF: sub_407810+32↑p
.text:00408070                                         ; sub_407EE0+24↑p
.text:00408070
.text:00408070 var_1C          = dword ptr -1Ch
.text:00408070 var_18          = dword ptr -18h
.text:00408070 var_D           = byte ptr -0Dh
.text:00408070 arg_0           = dword ptr  4
.text:00408070 arg_4           = dword ptr  8
.text:00408070 arg_8           = dword ptr  0Ch
.text:00408070 arg_C           = byte ptr  10h
.text:00408070
.text:00408070                 push    edi
.text:00408071                 push    esi
.text:00408072                 push    ebx
.text:00408073                 sub     esp, 10h
.text:00408076                 mov     esi, [esp+1Ch+arg_0]
.text:0040807A                 movzx   ecx, [esp+1Ch+arg_C]
.text:0040807F                 mov     edi, [esp+1Ch+arg_4]
.text:00408083                 mov     edx, [esi+8]
.text:00408086                 mov     [esp+1Ch+var_D], cl
.text:0040808A                 mov     [esp+1Ch+var_18], edx
.text:0040808E                 mov     [esp+1Ch+var_1C], edi
.text:00408091                 call    dword ptr [esi+18h]
.text:00408094                 mov     ecx, [esi]
.text:00408096                 lea     ebx, [ecx+eax*8]
.text:00408099                 cmp     ebx, [esi+4]
.text:0040809C                 jnb     loc_408153
.text:004080A2                 mov     edx, [esp+1Ch+arg_8]
.text:004080A6                 xor     eax, eax
.text:004080A8                 mov     [edx], ebx
.text:004080AA                 mov     edx, [ebx]
.text:004080AC                 test    edx, edx
.text:004080AE                 jz      short loc_4080F2
.text:004080B0                 mov     [esp+1Ch+var_18], edx
.text:004080B4                 mov     [esp+1Ch+var_1C], edi
.text:004080B7                 call    dword ptr [esi+1Ch]
.text:004080BA                 test    al, al
.text:004080BC                 jz      short loc_408101
.text:004080BE                 cmp     [esp+1Ch+var_D], 0
.text:004080C3                 mov     edi, [ebx]
.text:004080C5                 jz      short loc_4080F0
.text:004080C7                 mov     ecx, [ebx+4]
.text:004080CA                 test    ecx, ecx
.text:004080CC                 jz      short loc_4080F9
.text:004080CE                 mov     eax, [ecx]
.text:004080D0                 mov     edx, [ecx+4]
.text:004080D3                 mov     [ebx], eax
.text:004080D5                 mov     [ebx+4], edx
.text:004080D8                 mov     ebx, [esi+24h]
.text:004080DB                 mov     dword ptr [ecx], 0
.text:004080E1                 mov     [ecx+4], ebx
.text:004080E4                 mov     [esi+24h], ecx
.text:004080E7                 mov     esi, esi
.text:004080E9                 lea     edi, [edi+0]
.text:004080F0
.text:004080F0 loc_4080F0:                             ; CODE XREF: sub_408070+55↑j
.text:004080F0                                         ; sub_408070+8F↓j
.text:004080F0                 mov     eax, edi
.text:004080F2
.text:004080F2 loc_4080F2:                             ; CODE XREF: sub_408070+3E↑j
.text:004080F2                                         ; sub_408070+BC↓j ...
.text:004080F2                 add     esp, 10h
.text:004080F5                 pop     ebx
.text:004080F6                 pop     esi
.text:004080F7                 pop     edi
.text:004080F8                 retn
.text:004080F9 ; ---------------------------------------------------------------------------
.text:004080F9
.text:004080F9 loc_4080F9:                             ; CODE XREF: sub_408070+5C↑j
.text:004080F9                 mov     dword ptr [ebx], 0
.text:004080FF                 jmp     short loc_4080F0
.text:00408101 ; ---------------------------------------------------------------------------
.text:00408101
.text:00408101 loc_408101:                             ; CODE XREF: sub_408070+4C↑j
.text:00408101                 mov     eax, [ebx+4]
.text:00408104                 test    eax, eax
.text:00408106                 jz      short loc_40812A
.text:00408108                 nop
.text:00408109                 lea     esi, [esi+0]
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: sub_408070+B8↓j
.text:00408110                 mov     ecx, [eax]
.text:00408112                 mov     [esp+1Ch+var_1C], edi
.text:00408115                 mov     [esp+1Ch+var_18], ecx
.text:00408119                 call    dword ptr [esi+1Ch]
.text:0040811C                 test    al, al
.text:0040811E                 jnz     short loc_40812E
.text:00408120                 mov     ebx, [ebx+4]
.text:00408123                 mov     eax, [ebx+4]
.text:00408126                 test    eax, eax
.text:00408128                 jnz     short loc_408110
.text:0040812A
.text:0040812A loc_40812A:                             ; CODE XREF: sub_408070+96↑j
.text:0040812A                 xor     eax, eax
.text:0040812C                 jmp     short loc_4080F2
.text:0040812E ; ---------------------------------------------------------------------------
.text:0040812E
.text:0040812E loc_40812E:                             ; CODE XREF: sub_408070+AE↑j
.text:0040812E                 cmp     [esp+1Ch+var_D], 0
.text:00408133                 mov     edx, [ebx+4]
.text:00408136                 mov     ecx, [edx]
.text:00408138                 jz      short loc_40814F
.text:0040813A                 mov     dword ptr [edx], 0
.text:00408140                 mov     edi, [edx+4]
.text:00408143                 mov     [ebx+4], edi
.text:00408146                 mov     edi, [esi+24h]
.text:00408149                 mov     [edx+4], edi
.text:0040814C                 mov     [esi+24h], edx
.text:0040814F
.text:0040814F loc_40814F:                             ; CODE XREF: sub_408070+C8↑j
.text:0040814F                 mov     eax, ecx
.text:00408151                 jmp     short loc_4080F2
.text:00408153 ; ---------------------------------------------------------------------------
.text:00408153
.text:00408153 loc_408153:                             ; CODE XREF: sub_408070+2C↑j
.text:00408153                 call    abort
.text:00408153 sub_408070      endp
.text:00408153
.text:00408153 ; ---------------------------------------------------------------------------
.text:00408158                 db 18h dup(90h)
.text:00408170 ; ---------------------------------------------------------------------------
.text:00408170
.text:00408170 loc_408170:                             ; DATA XREF: sub_408190+3↓o
.text:00408170                 insd
.text:00408171                 db      65h
.text:00408171                 insd
.text:00408173                 outsd
.text:00408174                 jb      short loc_4081EF
.text:00408176                 and     [ebp+78h], ah
.text:00408179                 push    74737561h
.text:0040817E
.text:0040817E loc_40817E:                             ; DATA XREF: sub_408190+10↓o
.text:0040817E                 db      65h
.text:0040817E                 add     fs:0B68D0073h, ah
.text:0040817E ; ---------------------------------------------------------------------------
.text:00408186                 dw 0
.text:00408188                 align 10h
.text:00408190
.text:00408190 ; =============== S U B R O U T I N E =======================================
.text:00408190
.text:00408190 ; Attributes: noreturn
.text:00408190
.text:00408190 sub_408190      proc near               ; CODE XREF: sub_405090:loc_40512D↑p
.text:00408190                                         ; .text:loc_406E09↑p ...
.text:00408190
.text:00408190 Code            = dword ptr -1Ch
.text:00408190 ErrorMessage    = dword ptr -18h
.text:00408190 var_14          = dword ptr -14h
.text:00408190 var_10          = byte ptr -10h
.text:00408190
.text:00408190                 sub     esp, 1Ch
.text:00408193                 mov     [esp+1Ch+Code], offset loc_408170
.text:0040819A                 call    ds:libintl_gettext
.text:004081A0                 mov     [esp+1Ch+var_14], (offset loc_40817E+3) ; char *
.text:004081A8                 mov     edx, Code
.text:004081AE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004081B6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004081BA                 mov     [esp+1Ch+Code], edx ; Code
.text:004081BD                 call    sub_409BA0
.text:004081C2                 call    abort
.text:004081C2 sub_408190      endp
.text:004081C2
.text:004081C2 ; ---------------------------------------------------------------------------
.text:004081C7                 align 10h
.text:004081D0 aLiteral        db 'literal',0          ; DATA XREF: .text:00408210↓o
.text:004081D8 aShell_0        db 'shell',0            ; DATA XREF: .text:00408214↓o
.text:004081DE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00408218↓o
.text:004081EB aC_0            db 'c',0                ; DATA XREF: .text:0040821C↓o
.text:004081ED byte_4081ED     db 65h, 73h             ; DATA XREF: .text:00408220↓o
.text:004081EF ; ---------------------------------------------------------------------------
.text:004081EF
.text:004081EF loc_4081EF:                             ; CODE XREF: .text:00408174↑j
.text:004081EF                 arpl    [ecx+70h], sp
.text:004081F2                 add     gs:[edi+ebp*2+63h], ch
.text:004081F7                 popa
.text:004081F8                 insb
.text:004081F9                 add     gs:[ebx+6Ch], ah
.text:004081FD                 outsd
.text:004081FE                 arpl    [ecx+6Ch], sp
.text:00408201                 add     gs:[ebp+0B6h], cl
.text:00408208                 add     [ebp+27BCh], cl
.text:00408208 ; ---------------------------------------------------------------------------
.text:0040820E                 dw 0
.text:00408210                 dd offset aLiteral      ; "literal"
.text:00408214                 dd offset aShell_0      ; "shell"
.text:00408218                 dd offset aShellAlways  ; "shell-always"
.text:0040821C                 dd offset aC_0          ; "c"
.text:00408220                 dd offset byte_4081ED
.text:00408224                 dd 4081F4h, 4081FBh, 2 dup(0)
.text:00408234                 dd 1, 2, 3, 4, 5, 6
.text:0040824C asc_40824C:                             ; DATA XREF: sub_408260+7E↓o
.text:0040824C                                         ; sub_408260+A39↓o ...
.text:0040824C                 text "UTF-16LE", '"',27h,'`'
.text:00408252                 align 10h
.text:00408260
.text:00408260 ; =============== S U B R O U T I N E =======================================
.text:00408260
.text:00408260
.text:00408260 ; int __cdecl sub_408260(int, int, char *Str, int, int, int)
.text:00408260 sub_408260      proc near               ; CODE XREF: sub_408260+43A↓p
.text:00408260                                         ; .text:00408E23↓p ...
.text:00408260
.text:00408260 C               = dword ptr -4Ch
.text:00408260 Type            = dword ptr -48h
.text:00408260 SizeInBytes     = dword ptr -44h
.text:00408260 State           = dword ptr -40h
.text:00408260 var_3C          = dword ptr -3Ch
.text:00408260 var_38          = dword ptr -38h
.text:00408260 var_34          = dword ptr -34h
.text:00408260 var_30          = dword ptr -30h
.text:00408260 var_29          = byte ptr -29h
.text:00408260 var_28          = dword ptr -28h
.text:00408260 var_22          = byte ptr -22h
.text:00408260 var_21          = byte ptr -21h
.text:00408260 var_20          = dword ptr -20h
.text:00408260 var_1C          = dword ptr -1Ch
.text:00408260 var_18          = mbstate_t ptr -18h
.text:00408260 arg_0           = dword ptr  4
.text:00408260 arg_4           = dword ptr  8
.text:00408260 Str             = dword ptr  0Ch
.text:00408260 arg_C           = dword ptr  10h
.text:00408260 arg_10          = dword ptr  14h
.text:00408260 arg_14          = dword ptr  18h
.text:00408260
.text:00408260                 push    ebp
.text:00408261                 push    edi
.text:00408262                 push    esi
.text:00408263                 push    ebx
.text:00408264                 sub     esp, 3Ch
.text:00408267                 mov     edx, ds:__mb_cur_max
.text:0040826D                 mov     [esp+4Ch+var_34], 0
.text:00408275                 mov     [esp+4Ch+var_1C], 0
.text:0040827D                 cmp     dword ptr [edx], 1
.text:00408280                 mov     [esp+4Ch+var_20], 0
.text:00408288                 mov     [esp+4Ch+var_21], 0
.text:0040828D                 setz    [esp+4Ch+var_22]
.text:00408292                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00408297                 ja      short def_40829D ; jumptable 0040829D default case, cases 0,1
.text:00408299                 mov     edx, [esp+4Ch+arg_10]
.text:0040829D                 jmp     ds:jpt_40829D[edx*4] ; switch jump
.text:0040829D ; ---------------------------------------------------------------------------
.text:004082A4 jpt_40829D      dd offset def_40829D    ; DATA XREF: sub_408260+3D↑r
.text:004082A4                 dd offset def_40829D    ; jump table for switch statement
.text:004082A4                 dd offset loc_408BE5
.text:004082A4                 dd offset loc_4082C0
.text:004082A4                 dd offset loc_408C0B
.text:004082A4                 dd offset loc_408C15
.text:004082A4                 dd offset loc_408C15
.text:004082C0 ; ---------------------------------------------------------------------------
.text:004082C0
.text:004082C0 loc_4082C0:                             ; CODE XREF: sub_408260+3D↑j
.text:004082C0                                         ; DATA XREF: sub_408260:jpt_40829D↑o
.text:004082C0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040829D case 3
.text:004082C4                 cmp     [esp+4Ch+var_34], eax
.text:004082C8                 jnb     short loc_4082D1
.text:004082CA                 mov     ebx, [esp+4Ch+arg_0]
.text:004082CE                 mov     byte ptr [ebx], 22h ; '"'
.text:004082D1
.text:004082D1 loc_4082D1:                             ; CODE XREF: sub_408260+68↑j
.text:004082D1                 mov     [esp+4Ch+var_34], 1
.text:004082D9                 mov     [esp+4Ch+var_21], 1
.text:004082DE                 mov     [esp+4Ch+var_1C], offset asc_40824C ; "\"'`"
.text:004082E6
.text:004082E6 loc_4082E6:                             ; CODE XREF: sub_408260+9A6↓j
.text:004082E6                 mov     [esp+4Ch+var_20], 1
.text:004082EE
.text:004082EE def_40829D:                             ; CODE XREF: sub_408260+37↑j
.text:004082EE                                         ; sub_408260+3D↑j ...
.text:004082EE                 xor     ebp, ebp        ; jumptable 0040829D default case, cases 0,1
.text:004082F0
.text:004082F0 loc_4082F0:                             ; CODE XREF: sub_408260+3DB↓j
.text:004082F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004082F5                 jz      loc_408BD7
.text:004082FB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004082FF
.text:004082FF loc_4082FF:                             ; CODE XREF: sub_408260+980↓j
.text:004082FF                 jz      loc_408B6E
.text:00408305                 cmp     [esp+4Ch+var_21], 0
.text:0040830A                 jz      short loc_408350
.text:0040830C                 mov     esi, [esp+4Ch+var_20]
.text:00408310                 test    esi, esi
.text:00408312                 jz      short loc_408350
.text:00408314                 mov     ecx, [esp+4Ch+var_20]
.text:00408318                 lea     edi, [ecx+ebp]
.text:0040831B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040831F                 ja      short loc_408350
.text:00408321                 cld
.text:00408322                 mov     ebx, [esp+4Ch+Str]
.text:00408326                 mov     edi, [esp+4Ch+var_1C]
.text:0040832A                 add     ebx, ebp
.text:0040832C                 mov     esi, ebx
.text:0040832E                 cmp     ecx, ecx
.text:00408330                 repe cmpsb
.text:00408332                 jnz     short loc_408350
.text:00408334                 mov     edx, [esp+4Ch+arg_4]
.text:00408338                 cmp     [esp+4Ch+var_34], edx
.text:0040833C                 jnb     short loc_40834A
.text:0040833E                 mov     ecx, [esp+4Ch+arg_0]
.text:00408342                 mov     eax, [esp+4Ch+var_34]
.text:00408346                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040834A
.text:0040834A loc_40834A:                             ; CODE XREF: sub_408260+DC↑j
.text:0040834A                 inc     [esp+4Ch+var_34]
.text:0040834E                 mov     esi, esi
.text:00408350
.text:00408350 loc_408350:                             ; CODE XREF: sub_408260+AA↑j
.text:00408350                                         ; sub_408260+B2↑j ...
.text:00408350                 mov     edi, [esp+4Ch+Str]
.text:00408354                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00408359                 movzx   eax, bl
.text:0040835C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040835F                 ja      def_408365      ; jumptable 00408365 default case, cases 1-6,14-31,64
.text:00408365                 jmp     ds:jpt_408365[eax*4] ; switch jump
.text:00408365 ; ---------------------------------------------------------------------------
.text:0040836C jpt_408365      dd offset loc_408568, offset def_408365, offset def_408365
.text:0040836C                                         ; DATA XREF: sub_408260+105↑r
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365 ; jump table for switch statement
.text:0040836C                 dd offset def_408365, offset loc_408640, offset loc_40865E
.text:0040836C                 dd offset loc_408662, offset loc_4086A7, offset loc_4086AB
.text:0040836C                 dd offset loc_4086AF, offset loc_4086B3, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset def_408365
.text:0040836C                 dd offset def_408365, offset def_408365, offset loc_408B38
.text:0040836C                 dd offset loc_408B38, offset loc_408B38, offset loc_408B5A
.text:0040836C                 dd offset loc_408B38, offset def_408762, offset loc_408B38
.text:0040836C                 dd offset loc_4086B7, offset loc_408B38, offset loc_408B38
.text:0040836C                 dd offset loc_408B38, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset loc_408B38
.text:0040836C                 dd offset loc_408B38, offset loc_408B38, offset loc_408B38
.text:0040836C                 dd offset loc_40871C, offset def_408365, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset loc_408B38, offset loc_408B31
.text:0040836C                 dd offset def_408762, offset loc_408B38, offset def_408762
.text:0040836C                 dd offset loc_408B38, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset def_408762, offset def_408762, offset def_408762
.text:0040836C                 dd offset loc_408B48, offset loc_408B38, offset loc_408B48
.text:0040836C                 dd offset loc_408B5A
.text:00408568 ; ---------------------------------------------------------------------------
.text:00408568
.text:00408568 loc_408568:                             ; CODE XREF: sub_408260+105↑j
.text:00408568                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408568                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00408365 case 0
.text:0040856D                 lea     eax, [ebp+1]
.text:00408570                 jz      loc_408620
.text:00408576                 mov     esi, [esp+4Ch+arg_4]
.text:0040857A                 cmp     [esp+4Ch+var_34], esi
.text:0040857E                 jnb     short loc_40858C
.text:00408580                 mov     eax, [esp+4Ch+arg_0]
.text:00408584                 mov     ebx, [esp+4Ch+var_34]
.text:00408588                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040858C
.text:0040858C loc_40858C:                             ; CODE XREF: sub_408260+31E↑j
.text:0040858C                 inc     [esp+4Ch+var_34]
.text:00408590                 mov     edx, [esp+4Ch+arg_4]
.text:00408594                 cmp     [esp+4Ch+var_34], edx
.text:00408598                 jnb     short loc_4085A6
.text:0040859A                 mov     edi, [esp+4Ch+arg_0]
.text:0040859E                 mov     ecx, [esp+4Ch+var_34]
.text:004085A2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004085A6
.text:004085A6 loc_4085A6:                             ; CODE XREF: sub_408260+338↑j
.text:004085A6                 inc     [esp+4Ch+var_34]
.text:004085AA                 mov     esi, [esp+4Ch+arg_4]
.text:004085AE                 cmp     [esp+4Ch+var_34], esi
.text:004085B2                 jnb     short loc_4085C0
.text:004085B4                 mov     ebx, [esp+4Ch+arg_0]
.text:004085B8                 mov     eax, [esp+4Ch+var_34]
.text:004085BC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004085C0
.text:004085C0 loc_4085C0:                             ; CODE XREF: sub_408260+352↑j
.text:004085C0                 inc     [esp+4Ch+var_34]
.text:004085C4                 mov     bl, 30h ; '0'
.text:004085C6                 lea     esi, [esi+0]
.text:004085C9                 lea     edi, [edi+0]
.text:004085D0
.text:004085D0 def_408762:                             ; CODE XREF: sub_408260+105↑j
.text:004085D0                                         ; sub_408260+463↓j ...
.text:004085D0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:004085D0                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:004085D5                 lea     eax, [ebp+1]
.text:004085D8                 jz      short loc_408620
.text:004085DA                 mov     cl, bl
.text:004085DC                 mov     edi, [esp+4Ch+arg_14]
.text:004085E0                 mov     esi, 1
.text:004085E5                 shr     cl, 5
.text:004085E8                 movzx   edx, cl
.text:004085EB                 mov     ecx, ebx
.text:004085ED                 and     ecx, 1Fh
.text:004085F0                 shl     esi, cl
.text:004085F2                 test    [edi+edx*4+4], esi
.text:004085F6                 jz      short loc_408612
.text:004085F8
.text:004085F8 loc_4085F8:                             ; CODE XREF: sub_408260+3FC↓j
.text:004085F8                 mov     edx, [esp+4Ch+arg_4]
.text:004085FC                 cmp     [esp+4Ch+var_34], edx
.text:00408600                 jnb     short loc_40860E
.text:00408602                 mov     edi, [esp+4Ch+arg_0]
.text:00408606                 mov     esi, [esp+4Ch+var_34]
.text:0040860A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040860E
.text:0040860E loc_40860E:                             ; CODE XREF: sub_408260+3A0↑j
.text:0040860E                 inc     [esp+4Ch+var_34]
.text:00408612
.text:00408612 loc_408612:                             ; CODE XREF: sub_408260+396↑j
.text:00408612                 lea     eax, [ebp+1]
.text:00408615                 lea     esi, [esi+0]
.text:00408619                 lea     edi, [edi+0]
.text:00408620
.text:00408620 loc_408620:                             ; CODE XREF: sub_408260+310↑j
.text:00408620                                         ; sub_408260+378↑j ...
.text:00408620                 mov     ebp, [esp+4Ch+arg_4]
.text:00408624                 cmp     [esp+4Ch+var_34], ebp
.text:00408628                 jnb     short loc_408635
.text:0040862A                 mov     edx, [esp+4Ch+arg_0]
.text:0040862E                 mov     ecx, [esp+4Ch+var_34]
.text:00408632                 mov     [ecx+edx], bl
.text:00408635
.text:00408635 loc_408635:                             ; CODE XREF: sub_408260+3C8↑j
.text:00408635                 inc     [esp+4Ch+var_34]
.text:00408639                 mov     ebp, eax
.text:0040863B                 jmp     loc_4082F0
.text:00408640 ; ---------------------------------------------------------------------------
.text:00408640
.text:00408640 loc_408640:                             ; CODE XREF: sub_408260+105↑j
.text:00408640                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408640                 mov     dl, 61h ; 'a'   ; jumptable 00408365 case 7
.text:00408642                 lea     esi, [esi+0]
.text:00408649                 lea     edi, [edi+0]
.text:00408650
.text:00408650 loc_408650:                             ; CODE XREF: sub_408260+400↓j
.text:00408650                                         ; sub_408260+409↓j ...
.text:00408650                 cmp     [esp+4Ch+var_21], 0
.text:00408655                 lea     eax, [ebp+1]
.text:00408658                 jz      short loc_408620
.text:0040865A                 mov     bl, dl
.text:0040865C                 jmp     short loc_4085F8
.text:0040865E ; ---------------------------------------------------------------------------
.text:0040865E
.text:0040865E loc_40865E:                             ; CODE XREF: sub_408260+105↑j
.text:0040865E                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:0040865E                 mov     dl, 62h ; 'b'   ; jumptable 00408365 case 8
.text:00408660                 jmp     short loc_408650
.text:00408662 ; ---------------------------------------------------------------------------
.text:00408662
.text:00408662 loc_408662:                             ; CODE XREF: sub_408260+105↑j
.text:00408662                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408662                 mov     dl, 74h ; 't'   ; jumptable 00408365 case 9
.text:00408664
.text:00408664 loc_408664:                             ; CODE XREF: sub_408260+449↓j
.text:00408664                                         ; sub_408260+455↓j ...
.text:00408664                 cmp     [esp+4Ch+arg_10], 1
.text:00408669                 jnz     short loc_408650
.text:0040866B
.text:0040866B loc_40866B:                             ; CODE XREF: sub_408260+45C↓j
.text:0040866B                                         ; sub_408260+4C1↓j ...
.text:0040866B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408A32 cases 91,92,94,96,124
.text:00408673                 mov     eax, [esp+4Ch+arg_14]
.text:00408677                 mov     edx, [esp+4Ch+arg_C]
.text:0040867B                 mov     ecx, [esp+4Ch+Str]
.text:0040867F                 mov     ebx, [esp+4Ch+arg_4]
.text:00408683                 mov     [esp+4Ch+var_38], eax ; int
.text:00408687                 mov     ebp, [esp+4Ch+arg_0]
.text:0040868B                 mov     [esp+4Ch+State], edx ; int
.text:0040868F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00408693                 mov     [esp+4Ch+Type], ebx ; int
.text:00408697                 mov     [esp+4Ch+C], ebp ; int
.text:0040869A                 call    sub_408260
.text:0040869F
.text:0040869F loc_40869F:                             ; CODE XREF: sub_408260+972↓j
.text:0040869F                 add     esp, 3Ch
.text:004086A2                 pop     ebx
.text:004086A3                 pop     esi
.text:004086A4                 pop     edi
.text:004086A5                 pop     ebp
.text:004086A6                 retn
.text:004086A7 ; ---------------------------------------------------------------------------
.text:004086A7
.text:004086A7 loc_4086A7:                             ; CODE XREF: sub_408260+105↑j
.text:004086A7                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:004086A7                 mov     dl, 6Eh ; 'n'   ; jumptable 00408365 case 10
.text:004086A9                 jmp     short loc_408664
.text:004086AB ; ---------------------------------------------------------------------------
.text:004086AB
.text:004086AB loc_4086AB:                             ; CODE XREF: sub_408260+105↑j
.text:004086AB                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:004086AB                 mov     dl, 76h ; 'v'   ; jumptable 00408365 case 11
.text:004086AD                 jmp     short loc_408650
.text:004086AF ; ---------------------------------------------------------------------------
.text:004086AF
.text:004086AF loc_4086AF:                             ; CODE XREF: sub_408260+105↑j
.text:004086AF                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:004086AF                 mov     dl, 66h ; 'f'   ; jumptable 00408365 case 12
.text:004086B1                 jmp     short loc_408650
.text:004086B3 ; ---------------------------------------------------------------------------
.text:004086B3
.text:004086B3 loc_4086B3:                             ; CODE XREF: sub_408260+105↑j
.text:004086B3                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:004086B3                 mov     dl, 72h ; 'r'   ; jumptable 00408365 case 13
.text:004086B5                 jmp     short loc_408664
.text:004086B7 ; ---------------------------------------------------------------------------
.text:004086B7
.text:004086B7 loc_4086B7:                             ; CODE XREF: sub_408260+105↑j
.text:004086B7                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:004086B7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408365 case 39
.text:004086BC                 jz      short loc_40866B ; jumptable 00408A32 cases 91,92,94,96,124
.text:004086BE                 cmp     [esp+4Ch+arg_10], 2
.text:004086C3                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:004086C3                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:004086C9                 mov     edx, [esp+4Ch+arg_4]
.text:004086CD                 cmp     [esp+4Ch+var_34], edx
.text:004086D1                 jnb     short loc_4086DF
.text:004086D3                 mov     ecx, [esp+4Ch+arg_0]
.text:004086D7                 mov     edi, [esp+4Ch+var_34]
.text:004086DB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004086DF
.text:004086DF loc_4086DF:                             ; CODE XREF: sub_408260+471↑j
.text:004086DF                 inc     [esp+4Ch+var_34]
.text:004086E3                 mov     eax, [esp+4Ch+arg_4]
.text:004086E7                 cmp     [esp+4Ch+var_34], eax
.text:004086EB                 jnb     short loc_4086F9
.text:004086ED                 mov     esi, [esp+4Ch+arg_0]
.text:004086F1                 mov     edx, [esp+4Ch+var_34]
.text:004086F5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004086F9
.text:004086F9 loc_4086F9:                             ; CODE XREF: sub_408260+48B↑j
.text:004086F9                 inc     [esp+4Ch+var_34]
.text:004086FD                 mov     edi, [esp+4Ch+arg_4]
.text:00408701                 cmp     [esp+4Ch+var_34], edi
.text:00408705                 jnb     short loc_408713
.text:00408707                 mov     ecx, [esp+4Ch+arg_0]
.text:0040870B                 mov     eax, [esp+4Ch+var_34]
.text:0040870F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00408713
.text:00408713 loc_408713:                             ; CODE XREF: sub_408260+4A5↑j
.text:00408713                                         ; sub_408260+5C4↓j ...
.text:00408713                 inc     [esp+4Ch+var_34]
.text:00408717                 jmp     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408717                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:0040871C ; ---------------------------------------------------------------------------
.text:0040871C
.text:0040871C loc_40871C:                             ; CODE XREF: sub_408260+105↑j
.text:0040871C                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:0040871C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408365 case 63
.text:00408721                 jz      loc_40866B      ; jumptable 00408A32 cases 91,92,94,96,124
.text:00408727                 cmp     [esp+4Ch+arg_10], 3
.text:0040872C                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:0040872C                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408732                 lea     edx, [ebp+2]
.text:00408735                 cmp     edx, [esp+4Ch+arg_C]
.text:00408739                 jnb     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408739                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:0040873F                 mov     esi, [esp+4Ch+Str]
.text:00408743                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00408748                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408748                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:0040874E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00408753                 movsx   eax, cl
.text:00408756                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00408759                 cmp     eax, 1Dh
.text:0040875C                 ja      def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:0040875C                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408762                 jmp     ds:jpt_408762[eax*4] ; switch jump
.text:00408762 ; ---------------------------------------------------------------------------
.text:00408769                 align 4
.text:0040876C jpt_408762      dd offset loc_4087E4    ; DATA XREF: sub_408260+502↑r
.text:0040876C                 dd offset def_408762    ; jump table for switch statement
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset def_408762
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset loc_4087E4
.text:0040876C                 dd offset loc_4087E4
.text:004087E4 ; ---------------------------------------------------------------------------
.text:004087E4
.text:004087E4 loc_4087E4:                             ; CODE XREF: sub_408260+502↑j
.text:004087E4                                         ; DATA XREF: sub_408260:jpt_408762↑o
.text:004087E4                 mov     ebp, edx        ; jumptable 00408762 cases 33,39-41,45,47,60-62
.text:004087E6                 mov     bl, cl
.text:004087E8                 mov     edx, [esp+4Ch+arg_4]
.text:004087EC                 cmp     [esp+4Ch+var_34], edx
.text:004087F0                 jnb     short loc_4087FE
.text:004087F2                 mov     ecx, [esp+4Ch+arg_0]
.text:004087F6                 mov     edi, [esp+4Ch+var_34]
.text:004087FA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004087FE
.text:004087FE loc_4087FE:                             ; CODE XREF: sub_408260+590↑j
.text:004087FE                 inc     [esp+4Ch+var_34]
.text:00408802                 mov     eax, [esp+4Ch+arg_4]
.text:00408806                 cmp     [esp+4Ch+var_34], eax
.text:0040880A                 jnb     short loc_408818
.text:0040880C                 mov     edx, [esp+4Ch+arg_0]
.text:00408810                 mov     esi, [esp+4Ch+var_34]
.text:00408814                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00408818
.text:00408818 loc_408818:                             ; CODE XREF: sub_408260+5AA↑j
.text:00408818                 inc     [esp+4Ch+var_34]
.text:0040881C                 mov     edi, [esp+4Ch+arg_4]
.text:00408820                 cmp     [esp+4Ch+var_34], edi
.text:00408824                 jnb     loc_408713
.text:0040882A                 mov     eax, [esp+4Ch+arg_0]
.text:0040882E                 mov     ecx, [esp+4Ch+var_34]
.text:00408832                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00408836                 jmp     loc_408713
.text:00408836 ; ---------------------------------------------------------------------------
.text:0040883B                 align 10h
.text:00408840
.text:00408840 def_408365:                             ; CODE XREF: sub_408260+FF↑j
.text:00408840                                         ; sub_408260+105↑j
.text:00408840                                         ; DATA XREF: ...
.text:00408840                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00408365 default case, cases 1-6,14-31,64
.text:00408845                 jz      loc_408970
.text:0040884B                 mov     [esp+4Ch+var_28], 1
.text:00408853                 mov     esi, ds:__mb_cur_max
.text:00408859                 movzx   edx, bl
.text:0040885C                 cmp     dword ptr [esi], 1
.text:0040885F                 jz      loc_408954
.text:00408865                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040886D                 mov     [esp+4Ch+C], edx ; C
.text:00408870                 call    _isctype
.text:00408875
.text:00408875 loc_408875:                             ; CODE XREF: sub_408260+705↓j
.text:00408875                 test    eax, eax
.text:00408877                 setnz   [esp+4Ch+var_29]
.text:0040887C
.text:0040887C loc_40887C:                             ; CODE XREF: sub_408260+7A5↓j
.text:0040887C                 cmp     [esp+4Ch+var_21], 0
.text:00408881                 lea     eax, [ebp+1]
.text:00408884                 jz      loc_408620
.text:0040888A                 cmp     [esp+4Ch+var_29], 0
.text:0040888F                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:0040888F                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408895
.text:00408895 loc_408895:                             ; CODE XREF: sub_408260+7AB↓j
.text:00408895                 mov     eax, [esp+4Ch+var_28]
.text:00408899                 lea     edx, [eax+ebp]
.text:0040889C                 lea     esi, [esi+0]
.text:004088A0
.text:004088A0 loc_4088A0:                             ; CODE XREF: sub_408260+6EF↓j
.text:004088A0                 cmp     [esp+4Ch+var_21], 0
.text:004088A5                 jz      short loc_408920
.text:004088A7                 cmp     [esp+4Ch+var_29], 0
.text:004088AC                 jnz     short loc_408920
.text:004088AE                 mov     edi, [esp+4Ch+arg_4]
.text:004088B2                 cmp     [esp+4Ch+var_34], edi
.text:004088B6                 jnb     short loc_4088C4
.text:004088B8                 mov     esi, [esp+4Ch+arg_0]
.text:004088BC                 mov     eax, [esp+4Ch+var_34]
.text:004088C0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004088C4
.text:004088C4 loc_4088C4:                             ; CODE XREF: sub_408260+656↑j
.text:004088C4                 inc     [esp+4Ch+var_34]
.text:004088C8                 mov     ecx, [esp+4Ch+arg_4]
.text:004088CC                 cmp     [esp+4Ch+var_34], ecx
.text:004088D0                 jnb     short loc_4088E5
.text:004088D2                 mov     cl, bl
.text:004088D4                 mov     esi, [esp+4Ch+arg_0]
.text:004088D8                 mov     edi, [esp+4Ch+var_34]
.text:004088DC                 shr     cl, 6
.text:004088DF                 add     cl, 30h ; '0'
.text:004088E2                 mov     [edi+esi], cl
.text:004088E5
.text:004088E5 loc_4088E5:                             ; CODE XREF: sub_408260+670↑j
.text:004088E5                 inc     [esp+4Ch+var_34]
.text:004088E9                 mov     edi, [esp+4Ch+arg_4]
.text:004088ED                 cmp     [esp+4Ch+var_34], edi
.text:004088F1                 jnb     short loc_408909
.text:004088F3                 mov     cl, bl
.text:004088F5                 mov     esi, [esp+4Ch+arg_0]
.text:004088F9                 shr     cl, 3
.text:004088FC                 mov     edi, [esp+4Ch+var_34]
.text:00408900                 and     cl, 7
.text:00408903                 add     cl, 30h ; '0'
.text:00408906                 mov     [edi+esi], cl
.text:00408909
.text:00408909 loc_408909:                             ; CODE XREF: sub_408260+691↑j
.text:00408909                 inc     [esp+4Ch+var_34]
.text:0040890D                 and     bl, 7
.text:00408910                 add     bl, 30h ; '0'
.text:00408913                 lea     esi, [esi+0]
.text:00408919                 lea     edi, [edi+0]
.text:00408920
.text:00408920 loc_408920:                             ; CODE XREF: sub_408260+645↑j
.text:00408920                                         ; sub_408260+64C↑j
.text:00408920                 lea     eax, [ebp+1]
.text:00408923                 cmp     edx, eax
.text:00408925                 jbe     loc_408620
.text:0040892B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040892F                 cmp     [esp+4Ch+var_34], ebp
.text:00408933                 jnb     short loc_408940
.text:00408935                 mov     ecx, [esp+4Ch+arg_0]
.text:00408939                 mov     edi, [esp+4Ch+var_34]
.text:0040893D                 mov     [edi+ecx], bl
.text:00408940
.text:00408940 loc_408940:                             ; CODE XREF: sub_408260+6D3↑j
.text:00408940                 inc     [esp+4Ch+var_34]
.text:00408944                 mov     ebp, eax
.text:00408946                 mov     eax, [esp+4Ch+Str]
.text:0040894A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040894F                 jmp     loc_4088A0
.text:00408954 ; ---------------------------------------------------------------------------
.text:00408954
.text:00408954 loc_408954:                             ; CODE XREF: sub_408260+5FF↑j
.text:00408954                 mov     ecx, ds:_pctype
.text:0040895A                 mov     edi, [ecx]
.text:0040895C                 movzx   eax, word ptr [edi+edx*2]
.text:00408960                 and     eax, 157h
.text:00408965                 jmp     loc_408875
.text:00408965 ; ---------------------------------------------------------------------------
.text:0040896A                 align 10h
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: sub_408260+5E5↑j
.text:00408970                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408975                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040897D                 mov     [esp+4Ch+var_28], 0
.text:00408985                 mov     [esp+4Ch+var_29], 1
.text:0040898A                 jz      loc_408B1C
.text:00408990
.text:00408990 loc_408990:                             ; CODE XREF: sub_408260+8CC↓j
.text:00408990                 mov     ecx, [esp+4Ch+arg_C]
.text:00408994                 lea     edx, [esp+4Ch+var_18]
.text:00408998                 mov     edi, [esp+4Ch+Str]
.text:0040899C                 mov     [esp+4Ch+State], edx ; State
.text:004089A0                 lea     esi, [esp+4Ch+var_18._State]
.text:004089A4                 sub     ecx, ebp
.text:004089A6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004089AA                 add     edi, ebp
.text:004089AC                 mov     [esp+4Ch+var_30], edi
.text:004089B0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004089B4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004089B7                 call    mbrtowc
.text:004089BC                 test    eax, eax
.text:004089BE                 mov     edi, eax
.text:004089C0                 jz      short loc_408A00
.text:004089C2                 cmp     eax, 0FFFFFFFFh
.text:004089C5                 jz      loc_408B12
.text:004089CB                 cmp     eax, 0FFFFFFFEh
.text:004089CE                 jz      loc_408AD2
.text:004089D4                 cmp     [esp+4Ch+arg_10], 1
.text:004089D9                 jz      short loc_408A10
.text:004089DB
.text:004089DB loc_4089DB:                             ; CODE XREF: sub_408260+7B9↓j
.text:004089DB                                         ; sub_408260+86D↓j
.text:004089DB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004089E0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004089E8                 mov     [esp+4Ch+C], ecx ; C
.text:004089EB                 call    iswctype
.text:004089F0                 test    eax, eax
.text:004089F2                 jnz     short loc_4089F9
.text:004089F4                 mov     [esp+4Ch+var_29], 0
.text:004089F9
.text:004089F9 loc_4089F9:                             ; CODE XREF: sub_408260+792↑j
.text:004089F9                 mov     [esp+4Ch+var_28], edi
.text:004089FD                 lea     esi, [esi+0]
.text:00408A00
.text:00408A00 loc_408A00:                             ; CODE XREF: sub_408260+760↑j
.text:00408A00                                         ; sub_408260+87B↓j ...
.text:00408A00                 cmp     [esp+4Ch+var_28], 1
.text:00408A05                 jbe     loc_40887C
.text:00408A0B                 jmp     loc_408895
.text:00408A10 ; ---------------------------------------------------------------------------
.text:00408A10
.text:00408A10 loc_408A10:                             ; CODE XREF: sub_408260+779↑j
.text:00408A10                 cmp     [esp+4Ch+arg_10], eax
.text:00408A14                 mov     edx, 1
.text:00408A19                 jnb     short loc_4089DB
.text:00408A1B
.text:00408A1B loc_408A1B:                             ; CODE XREF: sub_408260+867↓j
.text:00408A1B                 mov     ecx, [esp+4Ch+Str]
.text:00408A1F                 lea     esi, [edx+ebp]
.text:00408A22                 movsx   eax, byte ptr [esi+ecx]
.text:00408A26                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408A29                 cmp     eax, 21h
.text:00408A2C                 ja      def_408A32      ; jumptable 00408A32 default case, cases 93,95,97-123
.text:00408A32                 jmp     ds:jpt_408A32[eax*4] ; switch jump
.text:00408A32 ; ---------------------------------------------------------------------------
.text:00408A39                 align 4
.text:00408A3C jpt_408A32      dd offset loc_40866B    ; DATA XREF: sub_408260+7D2↑r
.text:00408A3C                 dd offset loc_40866B    ; jump table for switch statement
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset loc_40866B
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset loc_40866B
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset def_408A32
.text:00408A3C                 dd offset loc_40866B
.text:00408AC4 ; ---------------------------------------------------------------------------
.text:00408AC4
.text:00408AC4 def_408A32:                             ; CODE XREF: sub_408260+7CC↑j
.text:00408AC4                                         ; sub_408260+7D2↑j
.text:00408AC4                                         ; DATA XREF: ...
.text:00408AC4                 inc     edx             ; jumptable 00408A32 default case, cases 93,95,97-123
.text:00408AC5                 cmp     edx, edi
.text:00408AC7                 jb      loc_408A1B
.text:00408ACD                 jmp     loc_4089DB
.text:00408AD2 ; ---------------------------------------------------------------------------
.text:00408AD2
.text:00408AD2 loc_408AD2:                             ; CODE XREF: sub_408260+76E↑j
.text:00408AD2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00408AD6                 mov     [esp+4Ch+var_29], 0
.text:00408ADB                 jnb     loc_408A00
.text:00408AE1                 mov     eax, [esp+4Ch+var_30]
.text:00408AE5                 cmp     byte ptr [eax], 0
.text:00408AE8                 jz      loc_408A00
.text:00408AEE
.text:00408AEE loc_408AEE:                             ; CODE XREF: sub_408260+8AB↓j
.text:00408AEE                 inc     [esp+4Ch+var_28]
.text:00408AF2                 mov     esi, [esp+4Ch+var_28]
.text:00408AF6                 lea     eax, [esi+ebp]
.text:00408AF9                 cmp     eax, [esp+4Ch+arg_C]
.text:00408AFD                 jnb     loc_408A00
.text:00408B03                 mov     edi, [esp+4Ch+Str]
.text:00408B07                 cmp     byte ptr [eax+edi], 0
.text:00408B0B                 jnz     short loc_408AEE
.text:00408B0D                 jmp     loc_408A00
.text:00408B12 ; ---------------------------------------------------------------------------
.text:00408B12
.text:00408B12 loc_408B12:                             ; CODE XREF: sub_408260+765↑j
.text:00408B12                 mov     [esp+4Ch+var_29], 0
.text:00408B17                 jmp     loc_408A00
.text:00408B1C ; ---------------------------------------------------------------------------
.text:00408B1C
.text:00408B1C loc_408B1C:                             ; CODE XREF: sub_408260+72A↑j
.text:00408B1C                 mov     edx, [esp+4Ch+Str]
.text:00408B20                 mov     [esp+4Ch+C], edx ; Str
.text:00408B23                 call    strlen
.text:00408B28                 mov     [esp+4Ch+arg_C], eax
.text:00408B2C                 jmp     loc_408990
.text:00408B31 ; ---------------------------------------------------------------------------
.text:00408B31
.text:00408B31 loc_408B31:                             ; CODE XREF: sub_408260+105↑j
.text:00408B31                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408B31                 mov     dl, bl          ; jumptable 00408365 case 92
.text:00408B33                 jmp     loc_408664
.text:00408B38 ; ---------------------------------------------------------------------------
.text:00408B38
.text:00408B38 loc_408B38:                             ; CODE XREF: sub_408260+105↑j
.text:00408B38                                         ; sub_408260+902↓j
.text:00408B38                                         ; DATA XREF: ...
.text:00408B38                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408365 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408B3D                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408B3D                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408B43                 jmp     loc_40866B      ; jumptable 00408A32 cases 91,92,94,96,124
.text:00408B48 ; ---------------------------------------------------------------------------
.text:00408B48
.text:00408B48 loc_408B48:                             ; CODE XREF: sub_408260+105↑j
.text:00408B48                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408B48                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00408365 cases 123,125
.text:00408B4D                 jz      short loc_408B64
.text:00408B4F                 cmp     [esp+4Ch+arg_C], 1
.text:00408B54
.text:00408B54 loc_408B54:                             ; CODE XREF: sub_408260+90C↓j
.text:00408B54                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408B54                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408B5A
.text:00408B5A loc_408B5A:                             ; CODE XREF: sub_408260+105↑j
.text:00408B5A                                         ; DATA XREF: sub_408260:jpt_408365↑o
.text:00408B5A                 test    ebp, ebp        ; jumptable 00408365 cases 35,126
.text:00408B5C                 jnz     def_408762      ; jumptable 00408365 cases 37,43-58,65-90,93,95,97-122
.text:00408B5C                                         ; jumptable 00408762 default case, cases 34-38,42-44,46,48-59
.text:00408B62                 jmp     short loc_408B38 ; jumptable 00408365 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408B64 ; ---------------------------------------------------------------------------
.text:00408B64
.text:00408B64 loc_408B64:                             ; CODE XREF: sub_408260+8ED↑j
.text:00408B64                 mov     esi, [esp+4Ch+Str]
.text:00408B68                 cmp     byte ptr [esi+1], 0
.text:00408B6C                 jmp     short loc_408B54
.text:00408B6E ; ---------------------------------------------------------------------------
.text:00408B6E
.text:00408B6E loc_408B6E:                             ; CODE XREF: sub_408260:loc_4082FF↑j
.text:00408B6E                 test    ebp, ebp
.text:00408B70                 jnz     short loc_408B7D
.text:00408B72                 cmp     [esp+4Ch+arg_10], 1
.text:00408B77                 jz      loc_40866B      ; jumptable 00408A32 cases 91,92,94,96,124
.text:00408B7D
.text:00408B7D loc_408B7D:                             ; CODE XREF: sub_408260+910↑j
.text:00408B7D                 mov     esi, [esp+4Ch+var_1C]
.text:00408B81                 test    esi, esi
.text:00408B83                 jz      short loc_408BB8
.text:00408B85                 mov     edi, [esp+4Ch+var_1C]
.text:00408B89                 movzx   eax, byte ptr [edi]
.text:00408B8C                 test    al, al
.text:00408B8E                 jz      short loc_408BB8
.text:00408B90
.text:00408B90 loc_408B90:                             ; CODE XREF: sub_408260+956↓j
.text:00408B90                 mov     ebp, [esp+4Ch+arg_4]
.text:00408B94                 cmp     [esp+4Ch+var_34], ebp
.text:00408B98                 jnb     short loc_408BA5
.text:00408B9A                 mov     ecx, [esp+4Ch+arg_0]
.text:00408B9E                 mov     ebx, [esp+4Ch+var_34]
.text:00408BA2                 mov     [ebx+ecx], al
.text:00408BA5
.text:00408BA5 loc_408BA5:                             ; CODE XREF: sub_408260+938↑j
.text:00408BA5                 inc     [esp+4Ch+var_1C]
.text:00408BA9                 inc     [esp+4Ch+var_34]
.text:00408BAD                 mov     edx, [esp+4Ch+var_1C]
.text:00408BB1                 movzx   eax, byte ptr [edx]
.text:00408BB4                 test    al, al
.text:00408BB6                 jnz     short loc_408B90
.text:00408BB8
.text:00408BB8 loc_408BB8:                             ; CODE XREF: sub_408260+923↑j
.text:00408BB8                                         ; sub_408260+92E↑j
.text:00408BB8                 mov     eax, [esp+4Ch+arg_4]
.text:00408BBC                 cmp     [esp+4Ch+var_34], eax
.text:00408BC0                 jnb     short loc_408BCE
.text:00408BC2                 mov     edi, [esp+4Ch+arg_0]
.text:00408BC6                 mov     esi, [esp+4Ch+var_34]
.text:00408BCA                 mov     byte ptr [esi+edi], 0
.text:00408BCE
.text:00408BCE loc_408BCE:                             ; CODE XREF: sub_408260+960↑j
.text:00408BCE                 mov     eax, [esp+4Ch+var_34]
.text:00408BD2                 jmp     loc_40869F
.text:00408BD7 ; ---------------------------------------------------------------------------
.text:00408BD7
.text:00408BD7 loc_408BD7:                             ; CODE XREF: sub_408260+95↑j
.text:00408BD7                 mov     ebx, [esp+4Ch+Str]
.text:00408BDB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00408BE0                 jmp     loc_4082FF
.text:00408BE5 ; ---------------------------------------------------------------------------
.text:00408BE5
.text:00408BE5 loc_408BE5:                             ; CODE XREF: sub_408260+3D↑j
.text:00408BE5                                         ; DATA XREF: sub_408260:jpt_40829D↑o
.text:00408BE5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040829D case 2
.text:00408BE9                 cmp     [esp+4Ch+var_34], edx
.text:00408BED                 jnb     short loc_408BF6
.text:00408BEF                 mov     ecx, [esp+4Ch+arg_0]
.text:00408BF3                 mov     byte ptr [ecx], 27h ; '''
.text:00408BF6
.text:00408BF6 loc_408BF6:                             ; CODE XREF: sub_408260+98D↑j
.text:00408BF6                 mov     [esp+4Ch+var_34], 1
.text:00408BFE                 mov     [esp+4Ch+var_1C], 40824Eh
.text:00408C06                 jmp     loc_4082E6
.text:00408C0B ; ---------------------------------------------------------------------------
.text:00408C0B
.text:00408C0B loc_408C0B:                             ; CODE XREF: sub_408260+3D↑j
.text:00408C0B                                         ; DATA XREF: sub_408260:jpt_40829D↑o
.text:00408C0B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040829D case 4
.text:00408C10                 jmp     def_40829D      ; jumptable 0040829D default case, cases 0,1
.text:00408C15 ; ---------------------------------------------------------------------------
.text:00408C15
.text:00408C15 loc_408C15:                             ; CODE XREF: sub_408260+3D↑j
.text:00408C15                                         ; DATA XREF: sub_408260:jpt_40829D↑o
.text:00408C15                 mov     [esp+4Ch+C], 408250h ; jumptable 0040829D cases 5,6
.text:00408C1C                 call    ds:libintl_gettext
.text:00408C22                 cmp     eax, 408250h
.text:00408C27                 mov     edi, eax
.text:00408C29                 jz      short loc_408CA0
.text:00408C2B
.text:00408C2B loc_408C2B:                             ; CODE XREF: sub_408260+A45↓j
.text:00408C2B                                         ; sub_408260+A4C↓j
.text:00408C2B                 mov     [esp+4Ch+C], 40824Eh
.text:00408C32                 call    ds:libintl_gettext
.text:00408C38                 cmp     eax, 40824Eh
.text:00408C3D                 mov     edx, eax
.text:00408C3F                 jz      short loc_408C92
.text:00408C41
.text:00408C41 loc_408C41:                             ; CODE XREF: sub_408260+A37↓j
.text:00408C41                                         ; sub_408260+A3E↓j
.text:00408C41                 mov     [esp+4Ch+var_1C], edi
.text:00408C45                 cmp     byte ptr [edi], 0
.text:00408C48                 jz      short loc_408C78
.text:00408C4A
.text:00408C4A loc_408C4A:                             ; CODE XREF: sub_408260+A16↓j
.text:00408C4A                 mov     ecx, [esp+4Ch+arg_4]
.text:00408C4E                 cmp     [esp+4Ch+var_34], ecx
.text:00408C52                 jnb     short loc_408C67
.text:00408C54                 mov     ebp, [esp+4Ch+var_1C]
.text:00408C58                 mov     edi, [esp+4Ch+arg_0]
.text:00408C5C                 mov     esi, [esp+4Ch+var_34]
.text:00408C60                 movzx   ebx, byte ptr [ebp+0]
.text:00408C64                 mov     [esi+edi], bl
.text:00408C67
.text:00408C67 loc_408C67:                             ; CODE XREF: sub_408260+9F2↑j
.text:00408C67                 inc     [esp+4Ch+var_1C]
.text:00408C6B                 inc     [esp+4Ch+var_34]
.text:00408C6F                 mov     eax, [esp+4Ch+var_1C]
.text:00408C73                 cmp     byte ptr [eax], 0
.text:00408C76                 jnz     short loc_408C4A
.text:00408C78
.text:00408C78 loc_408C78:                             ; CODE XREF: sub_408260+9E8↑j
.text:00408C78                 mov     [esp+4Ch+var_21], 1
.text:00408C7D                 mov     [esp+4Ch+var_1C], edx
.text:00408C81                 mov     [esp+4Ch+C], edx ; Str
.text:00408C84                 call    strlen
.text:00408C89                 mov     [esp+4Ch+var_20], eax
.text:00408C8D                 jmp     def_40829D      ; jumptable 0040829D default case, cases 0,1
.text:00408C92 ; ---------------------------------------------------------------------------
.text:00408C92
.text:00408C92 loc_408C92:                             ; CODE XREF: sub_408260+9DF↑j
.text:00408C92                 cmp     [esp+4Ch+arg_10], 6
.text:00408C97                 jnz     short loc_408C41
.text:00408C99                 mov     edx, offset asc_40824C ; "\"'`"
.text:00408C9E                 jmp     short loc_408C41
.text:00408CA0 ; ---------------------------------------------------------------------------
.text:00408CA0
.text:00408CA0 loc_408CA0:                             ; CODE XREF: sub_408260+9C9↑j
.text:00408CA0                 cmp     [esp+4Ch+arg_10], 6
.text:00408CA5                 jnz     short loc_408C2B
.text:00408CA7                 mov     edi, offset asc_40824C ; "\"'`"
.text:00408CAC                 jmp     loc_408C2B
.text:00408CAC sub_408260      endp
.text:00408CAC
.text:00408CB1 ; ---------------------------------------------------------------------------
.text:00408CB1                 jmp     short loc_408CC0
.text:00408CB1 ; ---------------------------------------------------------------------------
.text:00408CB3                 align 10h
.text:00408CC0
.text:00408CC0 loc_408CC0:                             ; CODE XREF: .text:00408CB1↑j
.text:00408CC0                 sub     esp, 0Ch
.text:00408CC3                 mov     [esp+4], ebx
.text:00408CC7                 mov     [esp+8], esi
.text:00408CCB                 call    _errno
.text:00408CD0                 mov     esi, [eax]
.text:00408CD2                 mov     dword ptr [esp], 24h ; '$'
.text:00408CD9                 call    sub_406E10
.text:00408CDE                 mov     edx, [esp+10h]
.text:00408CE2                 mov     ebx, eax
.text:00408CE4                 test    edx, edx
.text:00408CE6                 jz      short loc_408D31
.text:00408CE8
.text:00408CE8 loc_408CE8:                             ; CODE XREF: .text:00408D36↓j
.text:00408CE8                 mov     ecx, [edx]
.text:00408CEA                 mov     [ebx], ecx
.text:00408CEC                 mov     ecx, [edx+4]
.text:00408CEF                 mov     [ebx+4], ecx
.text:00408CF2                 mov     ecx, [edx+8]
.text:00408CF5                 mov     [ebx+8], ecx
.text:00408CF8                 mov     ecx, [edx+0Ch]
.text:00408CFB                 mov     [ebx+0Ch], ecx
.text:00408CFE                 mov     ecx, [edx+10h]
.text:00408D01                 mov     [ebx+10h], ecx
.text:00408D04                 mov     ecx, [edx+14h]
.text:00408D07                 mov     [ebx+14h], ecx
.text:00408D0A                 mov     ecx, [edx+18h]
.text:00408D0D                 mov     [ebx+18h], ecx
.text:00408D10                 mov     ecx, [edx+1Ch]
.text:00408D13                 mov     [ebx+1Ch], ecx
.text:00408D16                 mov     ecx, [edx+20h]
.text:00408D19                 mov     [ebx+20h], ecx
.text:00408D1C                 call    _errno
.text:00408D21                 mov     [eax], esi
.text:00408D23                 mov     esi, [esp+8]
.text:00408D27                 mov     eax, ebx
.text:00408D29                 mov     ebx, [esp+4]
.text:00408D2D                 add     esp, 0Ch
.text:00408D30                 retn
.text:00408D31 ; ---------------------------------------------------------------------------
.text:00408D31
.text:00408D31 loc_408D31:                             ; CODE XREF: .text:00408CE6↑j
.text:00408D31                 mov     edx, offset dword_415160
.text:00408D36                 jmp     short loc_408CE8
.text:00408D36 ; ---------------------------------------------------------------------------
.text:00408D38                 align 10h
.text:00408D40                 mov     eax, [esp+4]
.text:00408D44                 test    eax, eax
.text:00408D46                 jz      short loc_408D50
.text:00408D48
.text:00408D48 loc_408D48:                             ; CODE XREF: .text:00408D55↓j
.text:00408D48                 mov     eax, [eax]
.text:00408D4A                 retn
.text:00408D4A ; ---------------------------------------------------------------------------
.text:00408D4B                 align 10h
.text:00408D50
.text:00408D50 loc_408D50:                             ; CODE XREF: .text:00408D46↑j
.text:00408D50                 mov     eax, offset dword_415160
.text:00408D55                 jmp     short loc_408D48
.text:00408D55 ; ---------------------------------------------------------------------------
.text:00408D57                 align 10h
.text:00408D60                 mov     edx, [esp+4]
.text:00408D64                 test    edx, edx
.text:00408D66                 jz      short loc_408D70
.text:00408D68
.text:00408D68 loc_408D68:                             ; CODE XREF: .text:00408D75↓j
.text:00408D68                 mov     ecx, [esp+8]
.text:00408D6C                 mov     [edx], ecx
.text:00408D6E                 retn
.text:00408D6E ; ---------------------------------------------------------------------------
.text:00408D6F                 align 10h
.text:00408D70
.text:00408D70 loc_408D70:                             ; CODE XREF: .text:00408D66↑j
.text:00408D70                 mov     edx, offset dword_415160
.text:00408D75                 jmp     short loc_408D68
.text:00408D75 ; ---------------------------------------------------------------------------
.text:00408D77                 align 10h
.text:00408D80                 sub     esp, 8
.text:00408D83                 mov     eax, [esp+0Ch]
.text:00408D87                 movzx   ecx, byte ptr [esp+10h]
.text:00408D8C                 mov     [esp], ebx
.text:00408D8F                 mov     ebx, [esp+14h]
.text:00408D93                 mov     [esp+4], esi
.text:00408D97                 mov     dl, cl
.text:00408D99                 shr     dl, 5
.text:00408D9C                 movzx   edx, dl
.text:00408D9F                 shl     edx, 2
.text:00408DA2                 test    eax, eax
.text:00408DA4                 lea     esi, [edx+eax+4]
.text:00408DA8                 jz      short loc_408DD0
.text:00408DAA
.text:00408DAA loc_408DAA:                             ; CODE XREF: .text:00408DD6↓j
.text:00408DAA                 mov     edx, [esi]
.text:00408DAC                 and     ecx, 1Fh
.text:00408DAF                 and     ebx, 1
.text:00408DB2                 mov     eax, edx
.text:00408DB4                 shr     eax, cl
.text:00408DB6                 and     eax, 1
.text:00408DB9                 xor     ebx, eax
.text:00408DBB                 shl     ebx, cl
.text:00408DBD                 xor     edx, ebx
.text:00408DBF                 mov     [esi], edx
.text:00408DC1                 mov     ebx, [esp]
.text:00408DC4                 mov     esi, [esp+4]
.text:00408DC8                 add     esp, 8
.text:00408DCB                 retn
.text:00408DCB ; ---------------------------------------------------------------------------
.text:00408DCC                 align 10h
.text:00408DD0
.text:00408DD0 loc_408DD0:                             ; CODE XREF: .text:00408DA8↑j
.text:00408DD0                 lea     esi, dword_415164[edx]
.text:00408DD6                 jmp     short loc_408DAA
.text:00408DD6 ; ---------------------------------------------------------------------------
.text:00408DD8                 align 10h
.text:00408DE0                 sub     esp, 2Ch
.text:00408DE3                 mov     [esp+24h], ebx
.text:00408DE7                 mov     ebx, [esp+40h]
.text:00408DEB                 mov     [esp+28h], esi
.text:00408DEF                 test    ebx, ebx
.text:00408DF1                 jz      short loc_408E40
.text:00408DF3
.text:00408DF3 loc_408DF3:                             ; CODE XREF: .text:00408E45↓j
.text:00408DF3                 call    _errno
.text:00408DF8                 mov     esi, [eax]
.text:00408DFA                 mov     [esp+14h], ebx
.text:00408DFE                 mov     edx, [ebx]
.text:00408E00                 mov     ecx, [esp+38h]
.text:00408E04                 mov     ebx, [esp+3Ch]
.text:00408E08                 mov     [esp+10h], edx
.text:00408E0C                 mov     edx, [esp+34h]
.text:00408E10                 mov     [esp+0Ch], ebx
.text:00408E14                 mov     [esp+8], ecx
.text:00408E18                 mov     [esp+4], edx
.text:00408E1C                 mov     edx, [esp+30h]
.text:00408E20                 mov     [esp], edx
.text:00408E23                 call    sub_408260
.text:00408E28                 mov     ebx, eax
.text:00408E2A                 call    _errno
.text:00408E2F                 mov     [eax], esi
.text:00408E31                 mov     esi, [esp+28h]
.text:00408E35                 mov     eax, ebx
.text:00408E37                 mov     ebx, [esp+24h]
.text:00408E3B                 add     esp, 2Ch
.text:00408E3E                 retn
.text:00408E3E ; ---------------------------------------------------------------------------
.text:00408E3F                 align 10h
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: .text:00408DF1↑j
.text:00408E40                 mov     ebx, offset dword_415160
.text:00408E45                 jmp     short loc_408DF3
.text:00408E45 ; ---------------------------------------------------------------------------
.text:00408E47                 align 10h
.text:00408E50                 push    ebp
.text:00408E51                 push    edi
.text:00408E52                 push    esi
.text:00408E53                 push    ebx
.text:00408E54                 sub     esp, 2Ch
.text:00408E57                 mov     ebp, [esp+48h]
.text:00408E5B                 call    _errno
.text:00408E60                 mov     edx, [eax]
.text:00408E62                 test    ebp, ebp
.text:00408E64                 mov     ebx, ebp
.text:00408E66                 mov     [esp+28h], edx
.text:00408E6A                 jz      loc_408F20
.text:00408E70
.text:00408E70 loc_408E70:                             ; CODE XREF: .text:00408F25↓j
.text:00408E70                 call    _errno
.text:00408E75                 mov     edi, [eax]
.text:00408E77                 mov     esi, ebp
.text:00408E79                 mov     [esp+14h], ebx
.text:00408E7D                 mov     ecx, [ebx]
.text:00408E7F                 mov     dword ptr [esp], 0
.text:00408E86                 mov     edx, [esp+44h]
.text:00408E8A                 mov     dword ptr [esp+4], 0
.text:00408E92                 mov     eax, [esp+40h]
.text:00408E96                 mov     [esp+10h], ecx
.text:00408E9A                 mov     [esp+0Ch], edx
.text:00408E9E                 mov     [esp+8], eax
.text:00408EA2                 call    sub_408260
.text:00408EA7                 mov     ebx, eax
.text:00408EA9                 call    _errno
.text:00408EAE                 mov     [eax], edi
.text:00408EB0                 lea     edi, [ebx+1]
.text:00408EB3                 mov     [esp], edi
.text:00408EB6                 call    sub_406E10
.text:00408EBB                 mov     [esp+24h], eax
.text:00408EBF                 test    ebp, ebp
.text:00408EC1                 jz      short loc_408F12
.text:00408EC3
.text:00408EC3 loc_408EC3:                             ; CODE XREF: .text:00408F17↓j
.text:00408EC3                 call    _errno
.text:00408EC8                 mov     ebp, [eax]
.text:00408ECA                 mov     [esp+14h], esi
.text:00408ECE                 mov     ecx, [esi]
.text:00408ED0                 mov     [esp+4], edi
.text:00408ED4                 mov     edx, [esp+44h]
.text:00408ED8                 mov     esi, [esp+24h]
.text:00408EDC                 mov     [esp+10h], ecx
.text:00408EE0                 mov     eax, [esp+40h]
.text:00408EE4                 mov     [esp+0Ch], edx
.text:00408EE8                 mov     [esp], esi
.text:00408EEB                 mov     [esp+8], eax
.text:00408EEF                 call    sub_408260
.text:00408EF4                 call    _errno
.text:00408EF9                 mov     [eax], ebp
.text:00408EFB                 call    _errno
.text:00408F00                 mov     ebx, [esp+28h]
.text:00408F04                 mov     [eax], ebx
.text:00408F06                 mov     eax, [esp+24h]
.text:00408F0A                 add     esp, 2Ch
.text:00408F0D                 pop     ebx
.text:00408F0E                 pop     esi
.text:00408F0F                 pop     edi
.text:00408F10                 pop     ebp
.text:00408F11                 retn
.text:00408F12 ; ---------------------------------------------------------------------------
.text:00408F12
.text:00408F12 loc_408F12:                             ; CODE XREF: .text:00408EC1↑j
.text:00408F12                 mov     esi, offset dword_415160
.text:00408F17                 jmp     short loc_408EC3
.text:00408F17 ; ---------------------------------------------------------------------------
.text:00408F19                 align 10h
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: .text:00408E6A↑j
.text:00408F20                 mov     ebx, offset dword_415160
.text:00408F25                 jmp     loc_408E70
.text:00408F25 ; ---------------------------------------------------------------------------
.text:00408F2A                 align 10h
.text:00408F30                 sub     esp, 1Ch
.text:00408F33                 mov     edx, [esp+24h]
.text:00408F37                 mov     dword ptr [esp+0Ch], offset dword_415160
.text:00408F3F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408F47                 mov     [esp+4], edx
.text:00408F4B                 mov     edx, [esp+20h]
.text:00408F4F                 mov     [esp], edx
.text:00408F52                 call    sub_4093A0
.text:00408F57                 add     esp, 1Ch
.text:00408F5A                 retn
.text:00408F5A ; ---------------------------------------------------------------------------
.text:00408F5B                 align 10h
.text:00408F60                 sub     esp, 1Ch
.text:00408F63                 mov     edx, [esp+20h]
.text:00408F67                 mov     dword ptr [esp+0Ch], offset dword_415160
.text:00408F6F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408F77                 mov     [esp+4], edx
.text:00408F7B                 mov     dword ptr [esp], 0
.text:00408F82                 call    sub_4093A0
.text:00408F87                 add     esp, 1Ch
.text:00408F8A                 retn
.text:00408F8A ; ---------------------------------------------------------------------------
.text:00408F8B                 align 10h
.text:00408F90
.text:00408F90 ; =============== S U B R O U T I N E =======================================
.text:00408F90
.text:00408F90
.text:00408F90 ; int __cdecl sub_408F90(int, int, char *)
.text:00408F90 sub_408F90      proc near               ; CODE XREF: sub_406780+1A↑p
.text:00408F90                                         ; sub_4067B0+1A↑p
.text:00408F90
.text:00408F90 var_BC          = dword ptr -0BCh
.text:00408F90 var_B8          = dword ptr -0B8h
.text:00408F90 var_B4          = dword ptr -0B4h
.text:00408F90 var_B0          = dword ptr -0B0h
.text:00408F90 var_AC          = dword ptr -0ACh
.text:00408F90 var_A8          = dword ptr -0A8h
.text:00408F90 var_A4          = dword ptr -0A4h
.text:00408F90 var_A0          = dword ptr -0A0h
.text:00408F90 var_9C          = dword ptr -9Ch
.text:00408F90 var_98          = dword ptr -98h
.text:00408F90 var_94          = dword ptr -94h
.text:00408F90 var_90          = dword ptr -90h
.text:00408F90 var_8C          = dword ptr -8Ch
.text:00408F90 var_7C          = dword ptr -7Ch
.text:00408F90 var_78          = dword ptr -78h
.text:00408F90 var_74          = dword ptr -74h
.text:00408F90 var_70          = dword ptr -70h
.text:00408F90 var_6C          = dword ptr -6Ch
.text:00408F90 var_68          = dword ptr -68h
.text:00408F90 var_64          = dword ptr -64h
.text:00408F90 var_60          = dword ptr -60h
.text:00408F90 var_5C          = dword ptr -5Ch
.text:00408F90 var_4C          = dword ptr -4Ch
.text:00408F90 var_48          = dword ptr -48h
.text:00408F90 var_44          = dword ptr -44h
.text:00408F90 var_40          = dword ptr -40h
.text:00408F90 var_3C          = dword ptr -3Ch
.text:00408F90 var_38          = dword ptr -38h
.text:00408F90 var_34          = dword ptr -34h
.text:00408F90 var_30          = dword ptr -30h
.text:00408F90 var_2C          = dword ptr -2Ch
.text:00408F90 arg_0           = dword ptr  4
.text:00408F90 arg_4           = dword ptr  8
.text:00408F90 arg_8           = dword ptr  0Ch
.text:00408F90
.text:00408F90                 push    ebp
.text:00408F91                 xor     eax, eax
.text:00408F93                 mov     ecx, 8
.text:00408F98                 push    edi
.text:00408F99                 push    esi
.text:00408F9A                 push    ebx
.text:00408F9B                 sub     esp, 0ACh
.text:00408FA1                 mov     ebp, [esp+0BCh+arg_4]
.text:00408FA8                 cld
.text:00408FA9                 lea     edi, [esp+0BCh+var_A8]
.text:00408FAD                 mov     [esp+0BCh+var_AC], ebp
.text:00408FB1                 rep stosd
.text:00408FB3                 mov     eax, [esp+0BCh+var_8C]
.text:00408FB7                 mov     edi, [esp+0BCh+var_AC]
.text:00408FBB                 mov     esi, [esp+0BCh+var_A8]
.text:00408FBF                 mov     [esp+0BCh+var_5C], eax
.text:00408FC3                 mov     ebp, [esp+0BCh+var_A4]
.text:00408FC7                 mov     eax, [esp+0BCh+var_AC]
.text:00408FCB                 mov     [esp+0BCh+var_7C], edi
.text:00408FCF                 mov     ecx, [esp+0BCh+var_94]
.text:00408FD3                 mov     edi, [esp+0BCh+var_A0]
.text:00408FD7                 mov     [esp+0BCh+var_78], esi
.text:00408FDB                 mov     edx, [esp+0BCh+var_90]
.text:00408FDF                 mov     esi, [esp+0BCh+var_9C]
.text:00408FE3                 mov     [esp+0BCh+var_4C], eax
.text:00408FE7                 mov     ebx, [esp+0BCh+var_98]
.text:00408FEB                 mov     eax, [esp+0BCh+var_A8]
.text:00408FEF                 mov     [esp+0BCh+var_74], ebp
.text:00408FF3                 mov     [esp+0BCh+var_70], edi
.text:00408FF7                 mov     [esp+0BCh+var_6C], esi
.text:00408FFB                 mov     [esp+0BCh+var_68], ebx
.text:00408FFF                 mov     [esp+0BCh+var_64], ecx
.text:00409003                 mov     [esp+0BCh+var_60], edx
.text:00409007                 mov     [esp+0BCh+var_48], eax
.text:0040900B                 mov     [esp+0BCh+var_44], ebp
.text:0040900F                 mov     [esp+0BCh+var_40], edi
.text:00409013                 mov     [esp+0BCh+var_3C], esi
.text:0040901A                 mov     [esp+0BCh+var_38], ebx
.text:00409021                 mov     ebx, [esp+0BCh+var_8C]
.text:00409025                 mov     [esp+0BCh+var_30], edx
.text:0040902C                 mov     edx, [esp+0BCh+arg_8]
.text:00409033                 mov     [esp+0BCh+var_34], ecx
.text:0040903A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040903E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00409042                 mov     edx, [esp+0BCh+arg_0]
.text:00409049                 mov     [esp+0BCh+var_2C], ebx
.text:00409050                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00409054                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040905C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040905F                 call    sub_4093A0
.text:00409064                 add     esp, 0ACh
.text:0040906A                 pop     ebx
.text:0040906B                 pop     esi
.text:0040906C                 pop     edi
.text:0040906D                 pop     ebp
.text:0040906E                 retn
.text:0040906E sub_408F90      endp
.text:0040906E
.text:0040906E ; ---------------------------------------------------------------------------
.text:0040906F                 align 10h
.text:00409070                 push    ebp
.text:00409071                 xor     eax, eax
.text:00409073                 mov     ecx, 8
.text:00409078                 push    edi
.text:00409079                 push    esi
.text:0040907A                 push    ebx
.text:0040907B                 sub     esp, 0ACh
.text:00409081                 mov     edx, [esp+0C4h]
.text:00409088                 cld
.text:00409089                 lea     edi, [esp+14h]
.text:0040908D                 mov     [esp+10h], edx
.text:00409091                 rep stosd
.text:00409093                 mov     eax, [esp+30h]
.text:00409097                 mov     ebp, [esp+10h]
.text:0040909B                 mov     edi, [esp+14h]
.text:0040909F                 mov     [esp+60h], eax
.text:004090A3                 mov     esi, [esp+20h]
.text:004090A7                 mov     eax, [esp+10h]
.text:004090AB                 mov     [esp+40h], ebp
.text:004090AF                 mov     ecx, [esp+28h]
.text:004090B3                 mov     ebp, [esp+18h]
.text:004090B7                 mov     [esp+44h], edi
.text:004090BB                 mov     edx, [esp+2Ch]
.text:004090BF                 mov     edi, [esp+1Ch]
.text:004090C3                 mov     [esp+70h], eax
.text:004090C7                 mov     ebx, [esp+24h]
.text:004090CB                 mov     eax, [esp+14h]
.text:004090CF                 mov     [esp+48h], ebp
.text:004090D3                 mov     [esp+4Ch], edi
.text:004090D7                 mov     [esp+50h], esi
.text:004090DB                 mov     [esp+54h], ebx
.text:004090DF                 mov     [esp+58h], ecx
.text:004090E3                 mov     [esp+5Ch], edx
.text:004090E7                 mov     [esp+74h], eax
.text:004090EB                 mov     [esp+78h], ebp
.text:004090EF                 mov     [esp+7Ch], edi
.text:004090F3                 mov     [esp+80h], esi
.text:004090FA                 mov     [esp+84h], ebx
.text:00409101                 mov     esi, [esp+30h]
.text:00409105                 lea     ebx, [esp+70h]
.text:00409109                 mov     [esp+8Ch], edx
.text:00409110                 mov     edx, [esp+0C8h]
.text:00409117                 mov     [esp+88h], ecx
.text:0040911E                 mov     ecx, [esp+0CCh]
.text:00409125                 mov     [esp+4], edx
.text:00409129                 mov     edx, [esp+0C0h]
.text:00409130                 mov     [esp+90h], esi
.text:00409137                 mov     [esp+0Ch], ebx
.text:0040913B                 mov     [esp+8], ecx
.text:0040913F                 mov     [esp], edx
.text:00409142                 call    sub_4093A0
.text:00409147                 add     esp, 0ACh
.text:0040914D                 pop     ebx
.text:0040914E                 pop     esi
.text:0040914F                 pop     edi
.text:00409150                 pop     ebp
.text:00409151                 retn
.text:00409151 ; ---------------------------------------------------------------------------
.text:00409152                 align 10h
.text:00409160                 push    ebp
.text:00409161                 xor     eax, eax
.text:00409163                 mov     ecx, 8
.text:00409168                 push    edi
.text:00409169                 push    esi
.text:0040916A                 push    ebx
.text:0040916B                 sub     esp, 0ACh
.text:00409171                 mov     edi, [esp+0C0h]
.text:00409178                 cld
.text:00409179                 mov     [esp+10h], edi
.text:0040917D                 lea     edi, [esp+14h]
.text:00409181                 rep stosd
.text:00409183                 mov     eax, [esp+30h]
.text:00409187                 mov     esi, [esp+10h]
.text:0040918B                 mov     ebx, [esp+14h]
.text:0040918F                 mov     [esp+60h], eax
.text:00409193                 mov     ebp, [esp+18h]
.text:00409197                 mov     eax, [esp+10h]
.text:0040919B                 mov     [esp+40h], esi
.text:0040919F                 mov     edi, [esp+1Ch]
.text:004091A3                 mov     esi, [esp+20h]
.text:004091A7                 mov     [esp+44h], ebx
.text:004091AB                 mov     ecx, [esp+28h]
.text:004091AF                 mov     edx, [esp+2Ch]
.text:004091B3                 mov     [esp+70h], eax
.text:004091B7                 mov     ebx, [esp+24h]
.text:004091BB                 mov     eax, [esp+14h]
.text:004091BF                 mov     [esp+48h], ebp
.text:004091C3                 mov     [esp+4Ch], edi
.text:004091C7                 mov     [esp+50h], esi
.text:004091CB                 mov     [esp+54h], ebx
.text:004091CF                 mov     [esp+58h], ecx
.text:004091D3                 mov     [esp+5Ch], edx
.text:004091D7                 mov     [esp+74h], eax
.text:004091DB                 mov     [esp+78h], ebp
.text:004091DF                 mov     [esp+7Ch], edi
.text:004091E3                 mov     [esp+80h], esi
.text:004091EA                 mov     [esp+84h], ebx
.text:004091F1                 mov     [esp+8Ch], edx
.text:004091F8                 lea     edx, [esp+70h]
.text:004091FC                 mov     [esp+88h], ecx
.text:00409203                 mov     ecx, [esp+30h]
.text:00409207                 mov     [esp+0Ch], edx
.text:0040920B                 mov     edx, [esp+0C4h]
.text:00409212                 mov     [esp+90h], ecx
.text:00409219                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00409221                 mov     [esp+4], edx
.text:00409225                 mov     dword ptr [esp], 0
.text:0040922C                 call    sub_4093A0
.text:00409231                 add     esp, 0ACh
.text:00409237                 pop     ebx
.text:00409238                 pop     esi
.text:00409239                 pop     edi
.text:0040923A                 pop     ebp
.text:0040923B                 retn
.text:0040923B ; ---------------------------------------------------------------------------
.text:0040923C                 align 10h
.text:00409240                 push    edi
.text:00409241                 push    esi
.text:00409242                 push    ebx
.text:00409243                 sub     esp, 40h
.text:00409246                 mov     edx, ds:dword_41516C
.text:0040924C                 mov     ebx, ds:dword_415160
.text:00409252                 mov     esi, ds:dword_415168
.text:00409258                 mov     edi, ds:dword_415164
.text:0040925E                 mov     [esp+1Ch], edx
.text:00409262                 mov     ecx, ds:dword_415170
.text:00409268                 mov     edx, ds:dword_415180
.text:0040926E                 mov     [esp+10h], ebx
.text:00409272                 mov     ebx, ds:dword_415174
.text:00409278                 mov     [esp+30h], edx
.text:0040927C                 movzx   edx, byte ptr [esp+54h]
.text:00409281                 mov     [esp+18h], esi
.text:00409285                 mov     esi, ds:dword_41517C
.text:0040928B                 mov     [esp+14h], edi
.text:0040928F                 mov     edi, ds:dword_415178
.text:00409295                 mov     [esp+20h], ecx
.text:00409299                 mov     cl, dl
.text:0040929B                 shr     cl, 5
.text:0040929E                 mov     [esp+24h], ebx
.text:004092A2                 movzx   ebx, cl
.text:004092A5                 mov     [esp+2Ch], esi
.text:004092A9                 lea     esi, [esp+10h]
.text:004092AD                 mov     [esp+28h], edi
.text:004092B1                 lea     edi, [esi+ebx*4]
.text:004092B4                 mov     ebx, edx
.text:004092B6                 mov     edx, [edi+4]
.text:004092B9                 and     ebx, 1Fh
.text:004092BC                 mov     cl, bl
.text:004092BE                 mov     eax, edx
.text:004092C0                 shr     eax, cl
.text:004092C2                 and     eax, 1
.text:004092C5                 xor     eax, 1
.text:004092C8                 shl     eax, cl
.text:004092CA                 xor     edx, eax
.text:004092CC                 mov     [edi+4], edx
.text:004092CF                 mov     edx, [esp+50h]
.text:004092D3                 mov     [esp+0Ch], esi
.text:004092D7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004092DF                 mov     [esp+4], edx
.text:004092E3                 mov     dword ptr [esp], 0
.text:004092EA                 call    sub_4093A0
.text:004092EF                 add     esp, 40h
.text:004092F2                 pop     ebx
.text:004092F3                 pop     esi
.text:004092F4                 pop     edi
.text:004092F5                 retn
.text:004092F5 ; ---------------------------------------------------------------------------
.text:004092F6                 align 10h
.text:00409300
.text:00409300 ; =============== S U B R O U T I N E =======================================
.text:00409300
.text:00409300
.text:00409300 ; int __cdecl sub_409300(char *)
.text:00409300 sub_409300      proc near               ; CODE XREF: sub_406CF0+64↑p
.text:00409300
.text:00409300 var_4C          = dword ptr -4Ch
.text:00409300 var_48          = dword ptr -48h
.text:00409300 var_44          = dword ptr -44h
.text:00409300 var_40          = dword ptr -40h
.text:00409300 var_3C          = dword ptr -3Ch
.text:00409300 var_38          = dword ptr -38h
.text:00409300 var_34          = dword ptr -34h
.text:00409300 var_30          = dword ptr -30h
.text:00409300 var_2C          = dword ptr -2Ch
.text:00409300 var_28          = dword ptr -28h
.text:00409300 var_24          = dword ptr -24h
.text:00409300 var_20          = dword ptr -20h
.text:00409300 var_1C          = dword ptr -1Ch
.text:00409300 arg_0           = dword ptr  4
.text:00409300
.text:00409300                 sub     esp, 4Ch
.text:00409303                 mov     ecx, ds:dword_415160
.text:00409309                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00409311                 mov     edx, ds:dword_415164
.text:00409317                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040931E                 mov     [esp+4Ch+var_3C], ecx
.text:00409322                 mov     ecx, ds:dword_41516C
.text:00409328                 mov     [esp+4Ch+var_38], edx
.text:0040932C                 mov     edx, ds:dword_415168
.text:00409332                 mov     [esp+4Ch+var_30], ecx
.text:00409336                 mov     ecx, ds:dword_415170
.text:0040933C                 mov     eax, edx
.text:0040933E                 shr     eax, 1Ah
.text:00409341                 and     eax, 1
.text:00409344                 xor     eax, 1
.text:00409347                 mov     [esp+4Ch+var_2C], ecx
.text:0040934B                 shl     eax, 1Ah
.text:0040934E                 mov     ecx, ds:dword_415174
.text:00409354                 xor     edx, eax
.text:00409356                 mov     [esp+4Ch+var_34], edx
.text:0040935A                 mov     edx, [esp+4Ch+arg_0]
.text:0040935E                 mov     [esp+4Ch+var_28], ecx
.text:00409362                 mov     ecx, ds:dword_415178
.text:00409368                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040936C                 mov     [esp+4Ch+var_24], ecx
.text:00409370                 mov     ecx, ds:dword_41517C
.text:00409376                 mov     [esp+4Ch+var_20], ecx
.text:0040937A                 mov     ecx, ds:dword_415180
.text:00409380                 mov     [esp+4Ch+var_1C], ecx
.text:00409384                 lea     ecx, [esp+4Ch+var_3C]
.text:00409388                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040938C                 call    sub_4093A0
.text:00409391                 add     esp, 4Ch
.text:00409394                 retn
.text:00409394 sub_409300      endp
.text:00409394
.text:00409394 ; ---------------------------------------------------------------------------
.text:00409395                 align 10h
.text:004093A0
.text:004093A0 ; =============== S U B R O U T I N E =======================================
.text:004093A0
.text:004093A0
.text:004093A0 ; int __cdecl sub_4093A0(int, char *, int, int)
.text:004093A0 sub_4093A0      proc near               ; CODE XREF: .text:00408F52↑p
.text:004093A0                                         ; .text:00408F82↑p ...
.text:004093A0
.text:004093A0 Block           = dword ptr -2Ch
.text:004093A0 var_28          = dword ptr -28h
.text:004093A0 Str             = dword ptr -24h
.text:004093A0 var_20          = dword ptr -20h
.text:004093A0 var_1C          = dword ptr -1Ch
.text:004093A0 var_18          = dword ptr -18h
.text:004093A0 var_14          = dword ptr -14h
.text:004093A0 arg_0           = dword ptr  4
.text:004093A0 arg_4           = dword ptr  8
.text:004093A0 arg_8           = dword ptr  0Ch
.text:004093A0 arg_C           = dword ptr  10h
.text:004093A0
.text:004093A0                 push    ebp
.text:004093A1                 push    edi
.text:004093A2                 push    esi
.text:004093A3                 push    ebx
.text:004093A4                 sub     esp, 1Ch
.text:004093A7                 call    _errno
.text:004093AC                 mov     edx, [eax]
.text:004093AE                 mov     eax, [esp+2Ch+arg_0]
.text:004093B2                 mov     [esp+2Ch+var_14], edx
.text:004093B6                 test    eax, eax
.text:004093B8                 js      loc_40955A
.text:004093BE                 mov     eax, [esp+2Ch+arg_0]
.text:004093C2                 cmp     dword_414040, eax
.text:004093C8                 ja      short loc_409440
.text:004093CA                 mov     esi, eax
.text:004093CC                 inc     esi
.text:004093CD                 cmp     esi, 1FFFFFFFh
.text:004093D3                 ja      loc_40955F
.text:004093D9                 mov     ebx, off_41404C
.text:004093DF                 cmp     ebx, offset dword_414044
.text:004093E5                 jz      loc_409531
.text:004093EB
.text:004093EB loc_4093EB:                             ; CODE XREF: sub_4093A0+1B5↓j
.text:004093EB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004093EE                 lea     ecx, ds:0[esi*8]
.text:004093F5                 mov     ebp, esi
.text:004093F7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004093FB                 call    sub_406EA0
.text:00409400                 mov     off_41404C, eax
.text:00409405                 mov     ebx, dword_414040
.text:0040940B                 sub     ebp, ebx
.text:0040940D                 lea     edi, [eax+ebx*8]
.text:00409410                 lea     eax, ds:0[ebp*8]
.text:00409417                 cmp     eax, 7
.text:0040941A                 jbe     short loc_409430
.text:0040941C                 test    edi, 4
.text:00409422                 jz      short loc_409430
.text:00409424                 mov     dword ptr [edi], 0
.text:0040942A                 sub     eax, 4
.text:0040942D                 add     edi, 4
.text:00409430
.text:00409430 loc_409430:                             ; CODE XREF: sub_4093A0+7A↑j
.text:00409430                                         ; sub_4093A0+82↑j
.text:00409430                 cld
.text:00409431                 mov     ecx, eax
.text:00409433                 shr     ecx, 2
.text:00409436                 xor     eax, eax
.text:00409438                 rep stosd
.text:0040943A                 mov     dword_414040, esi
.text:00409440
.text:00409440 loc_409440:                             ; CODE XREF: sub_4093A0+28↑j
.text:00409440                 mov     esi, off_41404C
.text:00409446                 mov     eax, [esp+2Ch+arg_0]
.text:0040944A                 mov     ebp, [esi+eax*8]
.text:0040944D                 mov     edi, [esi+eax*8+4]
.text:00409451                 mov     esi, [esp+2Ch+arg_C]
.text:00409455                 test    esi, esi
.text:00409457                 jz      loc_409527
.text:0040945D
.text:0040945D loc_40945D:                             ; CODE XREF: sub_4093A0+18C↓j
.text:0040945D                 call    _errno
.text:00409462                 mov     ebx, [eax]
.text:00409464                 mov     [esp+2Ch+var_18], esi ; int
.text:00409468                 mov     ecx, [esi]
.text:0040946A                 mov     [esp+2Ch+Block], edi ; int
.text:0040946D                 mov     edx, [esp+2Ch+arg_8]
.text:00409471                 mov     [esp+2Ch+var_28], ebp ; int
.text:00409475                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00409479                 mov     ecx, [esp+2Ch+arg_4]
.text:0040947D                 mov     [esp+2Ch+var_20], edx ; int
.text:00409481                 mov     [esp+2Ch+Str], ecx ; Str
.text:00409485                 call    sub_408260
.text:0040948A                 mov     esi, eax
.text:0040948C                 call    _errno
.text:00409491                 mov     [eax], ebx
.text:00409493                 cmp     ebp, esi
.text:00409495                 ja      short loc_40950B
.text:00409497                 lea     ebp, [esi+1]
.text:0040949A                 mov     ebx, off_41404C
.text:004094A0                 cmp     edi, offset unk_415060
.text:004094A6                 mov     esi, [esp+2Ch+arg_0]
.text:004094AA                 mov     [ebx+esi*8], ebp
.text:004094AD                 jz      short loc_4094BD
.text:004094AF                 mov     [esp+2Ch+Block], edi ; Block
.text:004094B2                 call    free
.text:004094B7                 mov     ebx, off_41404C
.text:004094BD
.text:004094BD loc_4094BD:                             ; CODE XREF: sub_4093A0+10D↑j
.text:004094BD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004094C0                 call    sub_406E10
.text:004094C5                 mov     esi, [esp+2Ch+arg_C]
.text:004094C9                 mov     edi, eax
.text:004094CB                 mov     eax, [esp+2Ch+arg_0]
.text:004094CF                 test    esi, esi
.text:004094D1                 mov     [ebx+eax*8+4], edi
.text:004094D5                 jz      short loc_409520
.text:004094D7
.text:004094D7 loc_4094D7:                             ; CODE XREF: sub_4093A0+185↓j
.text:004094D7                 call    _errno
.text:004094DC                 mov     ebx, [eax]
.text:004094DE                 mov     [esp+2Ch+var_18], esi ; int
.text:004094E2                 mov     ecx, [esi]
.text:004094E4                 mov     [esp+2Ch+Block], edi ; int
.text:004094E7                 mov     edx, [esp+2Ch+arg_8]
.text:004094EB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004094EF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004094F3                 mov     ecx, [esp+2Ch+arg_4]
.text:004094F7                 mov     [esp+2Ch+var_20], edx ; int
.text:004094FB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004094FF                 call    sub_408260
.text:00409504                 call    _errno
.text:00409509                 mov     [eax], ebx
.text:0040950B
.text:0040950B loc_40950B:                             ; CODE XREF: sub_4093A0+F5↑j
.text:0040950B                 call    _errno
.text:00409510                 mov     ebp, [esp+2Ch+var_14]
.text:00409514                 mov     [eax], ebp
.text:00409516                 add     esp, 1Ch
.text:00409519                 mov     eax, edi
.text:0040951B                 pop     ebx
.text:0040951C                 pop     esi
.text:0040951D                 pop     edi
.text:0040951E                 pop     ebp
.text:0040951F                 retn
.text:00409520 ; ---------------------------------------------------------------------------
.text:00409520
.text:00409520 loc_409520:                             ; CODE XREF: sub_4093A0+135↑j
.text:00409520                 mov     esi, offset dword_415160
.text:00409525                 jmp     short loc_4094D7
.text:00409527 ; ---------------------------------------------------------------------------
.text:00409527
.text:00409527 loc_409527:                             ; CODE XREF: sub_4093A0+B7↑j
.text:00409527                 mov     esi, offset dword_415160
.text:0040952C                 jmp     loc_40945D
.text:00409531 ; ---------------------------------------------------------------------------
.text:00409531
.text:00409531 loc_409531:                             ; CODE XREF: sub_4093A0+45↑j
.text:00409531                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00409538                 call    sub_406E10
.text:0040953D                 mov     off_41404C, eax
.text:00409542                 mov     edi, dword_414044
.text:00409548                 mov     ebx, eax
.text:0040954A                 mov     ecx, off_414048
.text:00409550                 mov     [eax], edi
.text:00409552                 mov     [eax+4], ecx
.text:00409555                 jmp     loc_4093EB
.text:0040955A ; ---------------------------------------------------------------------------
.text:0040955A
.text:0040955A loc_40955A:                             ; CODE XREF: sub_4093A0+18↑j
.text:0040955A                 call    abort
.text:0040955F ; ---------------------------------------------------------------------------
.text:0040955F
.text:0040955F loc_40955F:                             ; CODE XREF: sub_4093A0+33↑j
.text:0040955F                 call    sub_408190
.text:0040955F sub_4093A0      endp
.text:0040955F
.text:0040955F ; ---------------------------------------------------------------------------
.text:00409564                 align 10h
.text:00409570
.text:00409570 loc_409570:                             ; DATA XREF: sub_4095E0+544↓o
.text:00409570                 db      2Eh, 2Eh
.text:00409570                 das
.text:00409573                 db      2Eh, 2Eh
.text:00409573                 das
.text:00409576                 arpl    [edi+72h], bp
.text:00409579                 db      65h
.text:00409579                 jnz     short near ptr loc_4095EB+5
.text:0040957C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00409584                 xor     ds:2F637273h, ch
.text:0040958A                 insb
.text:0040958B                 imul    esp, [edx+2Fh], 72747378h
.text:00409592                 jz      short near ptr loc_409600+3
.text:00409594                 insb
.text:00409595                 arpl    cs:[eax], ax
.text:00409598                 nop
.text:00409599                 nop
.text:0040959A                 nop
.text:0040959B                 nop
.text:0040959C                 nop
.text:0040959D                 nop
.text:0040959E                 nop
.text:0040959F                 nop
.text:004095A0                 nop
.text:004095A1                 nop
.text:004095A2                 nop
.text:004095A3                 nop
.text:004095A4                 nop
.text:004095A5                 nop
.text:004095A6                 nop
.text:004095A7                 nop
.text:004095A8                 nop
.text:004095A9                 nop
.text:004095AA                 nop
.text:004095AB                 nop
.text:004095AC                 nop
.text:004095AD                 nop
.text:004095AE                 nop
.text:004095AF                 nop
.text:004095B0
.text:004095B0 loc_4095B0:                             ; DATA XREF: sub_4095E0+54C↓o
.text:004095B0                 xor     [eax], ah
.text:004095B2                 cmp     al, 3Dh ; '='
.text:004095B4                 and     [ebx+74h], dh
.text:004095B7                 jb      short near ptr loc_40962B+2
.text:004095B9                 outsd
.text:004095BA                 insb
.text:004095BB                 pop     edi
.text:004095BC                 bound   esp, [ecx+73h]
.text:004095BF                 and     gs:[esi], ah
.text:004095C2                 and     es:[ebx+74h], dh
.text:004095C6                 jb      short loc_40963C
.text:004095C8                 outsd
.text:004095C9                 insb
.text:004095CA                 pop     edi
.text:004095CB                 bound   esp, [ecx+73h]
.text:004095CE                 and     gs:363320h[edi], bh
.text:004095D6                 lea     esi, [esi+0]
.text:004095D9                 lea     edi, [edi+0]
.text:004095E0
.text:004095E0 ; =============== S U B R O U T I N E =======================================
.text:004095E0
.text:004095E0
.text:004095E0 ; int __cdecl sub_4095E0(int, int, int, int, char *Str)
.text:004095E0 sub_4095E0      proc near               ; CODE XREF: sub_406900+15C↑p
.text:004095E0                                         ; sub_406900+1FC↑p
.text:004095E0
.text:004095E0 C               = dword ptr -3Ch
.text:004095E0 Type            = dword ptr -38h
.text:004095E0 Radix           = dword ptr -34h
.text:004095E0 var_28          = dword ptr -28h
.text:004095E0 var_24          = dword ptr -24h
.text:004095E0 var_1D          = byte ptr -1Dh
.text:004095E0 var_1C          = dword ptr -1Ch
.text:004095E0 var_18          = dword ptr -18h
.text:004095E0 var_14          = byte ptr -14h
.text:004095E0 arg_0           = dword ptr  4
.text:004095E0 arg_4           = dword ptr  8
.text:004095E0 arg_8           = dword ptr  0Ch
.text:004095E0 arg_C           = dword ptr  10h
.text:004095E0 Str             = dword ptr  14h
.text:004095E0
.text:004095E0                 push    ebp
.text:004095E1                 push    edi
.text:004095E2                 push    esi
.text:004095E3                 push    ebx
.text:004095E4                 sub     esp, 2Ch
.text:004095E7                 mov     ebp, [esp+3Ch+arg_8]
.text:004095EB
.text:004095EB loc_4095EB:                             ; CODE XREF: .text:00409579↑j
.text:004095EB                 mov     [esp+3Ch+var_1C], 0
.text:004095F3                 mov     esi, [esp+3Ch+arg_0]
.text:004095F7                 cmp     ebp, 24h ; '$'
.text:004095FA                 ja      loc_409B1C
.text:00409600
.text:00409600 loc_409600:                             ; CODE XREF: .text:00409592↑j
.text:00409600                 mov     edi, [esp+3Ch+arg_4]
.text:00409604                 test    edi, edi
.text:00409606                 jz      loc_409B13
.text:0040960C
.text:0040960C loc_40960C:                             ; CODE XREF: sub_4095E0+537↓j
.text:0040960C                 movzx   edx, byte ptr [esi]
.text:0040960F                 mov     ebx, esi
.text:00409611                 mov     [esp+3Ch+var_1D], dl
.text:00409615                 lea     esi, [esi+0]
.text:00409619                 lea     edi, [edi+0]
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: sub_4095E0+70↓j
.text:00409620                 movzx   edx, [esp+3Ch+var_1D]
.text:00409625                 mov     ecx, ds:__mb_cur_max
.text:0040962B
.text:0040962B loc_40962B:                             ; CODE XREF: .text:004095B7↑j
.text:0040962B                 cmp     dword ptr [ecx], 1
.text:0040962E                 jz      loc_409B00
.text:00409634                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040963C
.text:0040963C loc_40963C:                             ; CODE XREF: .text:004095C6↑j
.text:0040963C                 mov     [esp+3Ch+C], edx ; C
.text:0040963F                 call    _isctype
.text:00409644
.text:00409644 loc_409644:                             ; CODE XREF: sub_4095E0+52E↓j
.text:00409644                 test    eax, eax
.text:00409646                 jz      short loc_409652
.text:00409648                 inc     ebx
.text:00409649                 movzx   eax, byte ptr [ebx]
.text:0040964C                 mov     [esp+3Ch+var_1D], al
.text:00409650                 jmp     short loc_409620
.text:00409652 ; ---------------------------------------------------------------------------
.text:00409652
.text:00409652 loc_409652:                             ; CODE XREF: sub_4095E0+66↑j
.text:00409652                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00409657                 mov     eax, 4
.text:0040965C                 jz      short loc_4096B5
.text:0040965E                 call    _errno
.text:00409663                 mov     dword ptr [eax], 0
.text:00409669                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040966D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00409671                 mov     [esp+3Ch+C], esi ; String
.text:00409674                 call    strtoul
.text:00409679                 mov     [esp+3Ch+var_18], eax
.text:0040967D                 mov     eax, [edi]
.text:0040967F                 cmp     eax, esi
.text:00409681                 jz      loc_409ACC
.text:00409687                 call    _errno
.text:0040968C                 mov     ebp, [eax]
.text:0040968E                 test    ebp, ebp
.text:00409690                 jnz     loc_409AAB
.text:00409696
.text:00409696 loc_409696:                             ; CODE XREF: sub_4095E0+4DD↓j
.text:00409696                                         ; sub_4095E0+51A↓j
.text:00409696                 mov     eax, [esp+3Ch+Str]
.text:0040969A                 test    eax, eax
.text:0040969C                 jz      short loc_4096A7
.text:0040969E                 mov     ecx, [edi]
.text:004096A0                 movzx   eax, byte ptr [ecx]
.text:004096A3                 test    al, al
.text:004096A5                 jnz     short loc_4096BD
.text:004096A7
.text:004096A7 loc_4096A7:                             ; CODE XREF: sub_4095E0+BC↑j
.text:004096A7                                         ; sub_4095E0+26C↓j ...
.text:004096A7                 mov     edx, [esp+3Ch+var_18]
.text:004096AB                 mov     esi, [esp+3Ch+arg_C]
.text:004096AF                 mov     eax, [esp+3Ch+var_1C]
.text:004096B3                 mov     [esi], edx
.text:004096B5
.text:004096B5 loc_4096B5:                             ; CODE XREF: sub_4095E0+7C↑j
.text:004096B5                                         ; sub_4095E0+112↓j ...
.text:004096B5                 add     esp, 2Ch
.text:004096B8                 pop     ebx
.text:004096B9                 pop     esi
.text:004096BA                 pop     edi
.text:004096BB                 pop     ebp
.text:004096BC                 retn
.text:004096BD ; ---------------------------------------------------------------------------
.text:004096BD
.text:004096BD loc_4096BD:                             ; CODE XREF: sub_4095E0+C5↑j
.text:004096BD                 mov     [esp+3Ch+var_24], 1
.text:004096C5                 mov     edx, [esp+3Ch+Str]
.text:004096C9                 movsx   esi, al
.text:004096CC                 mov     [esp+3Ch+Type], esi ; Val
.text:004096D0                 mov     ebx, 400h
.text:004096D5                 mov     [esp+3Ch+C], edx ; Str
.text:004096D8                 call    strchr
.text:004096DD                 test    eax, eax
.text:004096DF                 jnz     short loc_4096F4
.text:004096E1
.text:004096E1 def_409744:                             ; CODE XREF: sub_4095E0+162↓j
.text:004096E1                                         ; sub_4095E0+164↓j
.text:004096E1                                         ; DATA XREF: ...
.text:004096E1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00409744 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004096E5                 mov     ebx, [esp+3Ch+var_18]
.text:004096E9                 mov     edi, [esp+3Ch+arg_C]
.text:004096ED                 or      eax, 2
.text:004096F0                 mov     [edi], ebx
.text:004096F2                 jmp     short loc_4096B5
.text:004096F4 ; ---------------------------------------------------------------------------
.text:004096F4
.text:004096F4 loc_4096F4:                             ; CODE XREF: sub_4095E0+FF↑j
.text:004096F4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004096FC                 mov     ebp, [esp+3Ch+Str]
.text:00409700                 mov     [esp+3Ch+C], ebp ; Str
.text:00409703                 call    strchr
.text:00409708                 test    eax, eax
.text:0040970A                 jz      loc_409AA0
.text:00409710                 mov     ecx, [edi]
.text:00409712                 mov     [esp+3Ch+var_28], ecx
.text:00409716                 movsx   eax, byte ptr [ecx+1]
.text:0040971A                 cmp     eax, 44h ; 'D'
.text:0040971D                 jz      loc_409A69
.text:00409723                 cmp     eax, 44h ; 'D'
.text:00409726                 jg      loc_409A7B
.text:0040972C                 cmp     eax, 42h ; 'B'
.text:0040972F                 jz      loc_409A69
.text:00409735
.text:00409735 loc_409735:                             ; CODE XREF: sub_4095E0+496↓j
.text:00409735                                         ; sub_4095E0+49E↓j ...
.text:00409735                 mov     esi, [esp+3Ch+var_28]
.text:00409739                 movsx   eax, byte ptr [esi]
.text:0040973C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040973F                 cmp     eax, 35h
.text:00409742                 ja      short def_409744 ; jumptable 00409744 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00409744                 jmp     ds:jpt_409744[eax*4] ; switch jump
.text:00409744 ; ---------------------------------------------------------------------------
.text:0040974B                 align 4
.text:0040974C jpt_409744      dd offset loc_40986B, offset def_409744, offset def_409744
.text:0040974C                                         ; DATA XREF: sub_4095E0+164↑r
.text:0040974C                 dd offset loc_40987B, offset def_409744, offset loc_40996C ; jump table for switch statement
.text:0040974C                 dd offset def_409744, offset def_409744, offset def_409744
.text:0040974C                 dd offset loc_4099A9, offset def_409744, offset loc_4099DB
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_4098B5
.text:0040974C                 dd offset def_409744, offset def_409744, offset def_409744
.text:0040974C                 dd offset loc_409A19, offset def_409744, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_4098F2
.text:0040974C                 dd offset loc_40992F, offset def_409744, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_409824
.text:0040974C                 dd offset loc_409836, offset def_409744, offset def_409744
.text:0040974C                 dd offset def_409744, offset loc_40996C, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_4099A9
.text:0040974C                 dd offset def_409744, offset loc_4099DB, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset def_409744
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_409A19
.text:0040974C                 dd offset def_409744, offset def_409744, offset loc_409A56
.text:00409824 ; ---------------------------------------------------------------------------
.text:00409824
.text:00409824 loc_409824:                             ; CODE XREF: sub_4095E0+164↑j
.text:00409824                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:00409824                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409744 case 98
.text:00409828                 cmp     eax, 7FFFFFh
.text:0040982D                 ja      short loc_40985C
.text:0040982F                 shl     eax, 9
.text:00409832
.text:00409832 loc_409832:                             ; CODE XREF: sub_4095E0+299↓j
.text:00409832                                         ; sub_4095E0+484↓j
.text:00409832                 mov     [esp+3Ch+var_18], eax
.text:00409836
.text:00409836 loc_409836:                             ; CODE XREF: sub_4095E0+164↑j
.text:00409836                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:00409836                 xor     eax, eax        ; jumptable 00409744 case 99
.text:00409838
.text:00409838 loc_409838:                             ; CODE XREF: sub_4095E0+289↓j
.text:00409838                                         ; sub_4095E0+2CA↓j ...
.text:00409838                 or      [esp+3Ch+var_1C], eax
.text:0040983C                 mov     ebp, [esp+3Ch+var_28]
.text:00409840                 mov     ecx, [esp+3Ch+var_24]
.text:00409844                 add     ebp, ecx
.text:00409846                 mov     [edi], ebp
.text:00409848                 cmp     byte ptr [ebp+0], 0
.text:0040984C                 jz      loc_4096A7
.text:00409852                 or      [esp+3Ch+var_1C], 2
.text:00409857                 jmp     loc_4096A7
.text:0040985C ; ---------------------------------------------------------------------------
.text:0040985C
.text:0040985C loc_40985C:                             ; CODE XREF: sub_4095E0+24D↑j
.text:0040985C                                         ; sub_4095E0+294↓j ...
.text:0040985C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00409864                 mov     eax, 1
.text:00409869                 jmp     short loc_409838
.text:0040986B ; ---------------------------------------------------------------------------
.text:0040986B
.text:0040986B loc_40986B:                             ; CODE XREF: sub_4095E0+164↑j
.text:0040986B                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:0040986B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409744 case 66
.text:0040986F                 cmp     eax, 3FFFFFh
.text:00409874                 ja      short loc_40985C
.text:00409876                 shl     eax, 0Ah
.text:00409879                 jmp     short loc_409832
.text:0040987B ; ---------------------------------------------------------------------------
.text:0040987B
.text:0040987B loc_40987B:                             ; CODE XREF: sub_4095E0+164↑j
.text:0040987B                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:0040987B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 case 69
.text:0040987F                 xor     ebp, ebp
.text:00409881                 mov     esi, 5
.text:00409886
.text:00409886 loc_409886:                             ; CODE XREF: sub_4095E0+2C8↓j
.text:00409886                 xor     edx, edx
.text:00409888                 mov     eax, 0FFFFFFFFh
.text:0040988D                 div     ebx
.text:0040988F                 mov     edx, [ecx]
.text:00409891                 cmp     eax, edx
.text:00409893                 jnb     short loc_4098AC
.text:00409895                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040989B                 mov     eax, 1
.text:004098A0
.text:004098A0 loc_4098A0:                             ; CODE XREF: sub_4095E0+2D3↓j
.text:004098A0                 dec     esi
.text:004098A1                 or      ebp, eax
.text:004098A3                 cmp     esi, 0FFFFFFFFh
.text:004098A6                 mov     eax, ebp
.text:004098A8                 jnz     short loc_409886
.text:004098AA                 jmp     short loc_409838
.text:004098AC ; ---------------------------------------------------------------------------
.text:004098AC
.text:004098AC loc_4098AC:                             ; CODE XREF: sub_4095E0+2B3↑j
.text:004098AC                 imul    edx, ebx
.text:004098AF                 xor     eax, eax
.text:004098B1                 mov     [ecx], edx
.text:004098B3                 jmp     short loc_4098A0
.text:004098B5 ; ---------------------------------------------------------------------------
.text:004098B5
.text:004098B5 loc_4098B5:                             ; CODE XREF: sub_4095E0+164↑j
.text:004098B5                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:004098B5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 case 80
.text:004098B9                 xor     ebp, ebp
.text:004098BB                 mov     esi, 4
.text:004098C0
.text:004098C0 loc_4098C0:                             ; CODE XREF: sub_4095E0+302↓j
.text:004098C0                 xor     edx, edx
.text:004098C2                 mov     eax, 0FFFFFFFFh
.text:004098C7                 div     ebx
.text:004098C9                 mov     edx, [ecx]
.text:004098CB                 cmp     eax, edx
.text:004098CD                 jnb     short loc_4098E9
.text:004098CF                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004098D5                 mov     eax, 1
.text:004098DA
.text:004098DA loc_4098DA:                             ; CODE XREF: sub_4095E0+310↓j
.text:004098DA                 dec     esi
.text:004098DB                 or      ebp, eax
.text:004098DD                 cmp     esi, 0FFFFFFFFh
.text:004098E0                 mov     eax, ebp
.text:004098E2                 jnz     short loc_4098C0
.text:004098E4                 jmp     loc_409838
.text:004098E9 ; ---------------------------------------------------------------------------
.text:004098E9
.text:004098E9 loc_4098E9:                             ; CODE XREF: sub_4095E0+2ED↑j
.text:004098E9                 imul    edx, ebx
.text:004098EC                 xor     eax, eax
.text:004098EE                 mov     [ecx], edx
.text:004098F0                 jmp     short loc_4098DA
.text:004098F2 ; ---------------------------------------------------------------------------
.text:004098F2
.text:004098F2 loc_4098F2:                             ; CODE XREF: sub_4095E0+164↑j
.text:004098F2                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:004098F2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 case 89
.text:004098F6                 xor     ebp, ebp
.text:004098F8                 mov     esi, 7
.text:004098FD
.text:004098FD loc_4098FD:                             ; CODE XREF: sub_4095E0+33F↓j
.text:004098FD                 xor     edx, edx
.text:004098FF                 mov     eax, 0FFFFFFFFh
.text:00409904                 div     ebx
.text:00409906                 mov     edx, [ecx]
.text:00409908                 cmp     eax, edx
.text:0040990A                 jnb     short loc_409926
.text:0040990C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409912                 mov     eax, 1
.text:00409917
.text:00409917 loc_409917:                             ; CODE XREF: sub_4095E0+34D↓j
.text:00409917                 dec     esi
.text:00409918                 or      ebp, eax
.text:0040991A                 cmp     esi, 0FFFFFFFFh
.text:0040991D                 mov     eax, ebp
.text:0040991F                 jnz     short loc_4098FD
.text:00409921                 jmp     loc_409838
.text:00409926 ; ---------------------------------------------------------------------------
.text:00409926
.text:00409926 loc_409926:                             ; CODE XREF: sub_4095E0+32A↑j
.text:00409926                 imul    edx, ebx
.text:00409929                 xor     eax, eax
.text:0040992B                 mov     [ecx], edx
.text:0040992D                 jmp     short loc_409917
.text:0040992F ; ---------------------------------------------------------------------------
.text:0040992F
.text:0040992F loc_40992F:                             ; CODE XREF: sub_4095E0+164↑j
.text:0040992F                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:0040992F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 case 90
.text:00409933                 xor     ebp, ebp
.text:00409935                 mov     esi, 6
.text:0040993A
.text:0040993A loc_40993A:                             ; CODE XREF: sub_4095E0+37C↓j
.text:0040993A                 xor     edx, edx
.text:0040993C                 mov     eax, 0FFFFFFFFh
.text:00409941                 div     ebx
.text:00409943                 mov     edx, [ecx]
.text:00409945                 cmp     eax, edx
.text:00409947                 jnb     short loc_409963
.text:00409949                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040994F                 mov     eax, 1
.text:00409954
.text:00409954 loc_409954:                             ; CODE XREF: sub_4095E0+38A↓j
.text:00409954                 dec     esi
.text:00409955                 or      ebp, eax
.text:00409957                 cmp     esi, 0FFFFFFFFh
.text:0040995A                 mov     eax, ebp
.text:0040995C                 jnz     short loc_40993A
.text:0040995E                 jmp     loc_409838
.text:00409963 ; ---------------------------------------------------------------------------
.text:00409963
.text:00409963 loc_409963:                             ; CODE XREF: sub_4095E0+367↑j
.text:00409963                 imul    edx, ebx
.text:00409966                 xor     eax, eax
.text:00409968                 mov     [ecx], edx
.text:0040996A                 jmp     short loc_409954
.text:0040996C ; ---------------------------------------------------------------------------
.text:0040996C
.text:0040996C loc_40996C:                             ; CODE XREF: sub_4095E0+164↑j
.text:0040996C                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:0040996C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 cases 71,103
.text:00409970                 xor     ebp, ebp
.text:00409972                 mov     esi, 2
.text:00409977
.text:00409977 loc_409977:                             ; CODE XREF: sub_4095E0+3B9↓j
.text:00409977                 xor     edx, edx
.text:00409979                 mov     eax, 0FFFFFFFFh
.text:0040997E                 div     ebx
.text:00409980                 mov     edx, [ecx]
.text:00409982                 cmp     eax, edx
.text:00409984                 jnb     short loc_4099A0
.text:00409986                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040998C                 mov     eax, 1
.text:00409991
.text:00409991 loc_409991:                             ; CODE XREF: sub_4095E0+3C7↓j
.text:00409991                 dec     esi
.text:00409992                 or      ebp, eax
.text:00409994                 cmp     esi, 0FFFFFFFFh
.text:00409997                 mov     eax, ebp
.text:00409999                 jnz     short loc_409977
.text:0040999B                 jmp     loc_409838
.text:004099A0 ; ---------------------------------------------------------------------------
.text:004099A0
.text:004099A0 loc_4099A0:                             ; CODE XREF: sub_4095E0+3A4↑j
.text:004099A0                 imul    edx, ebx
.text:004099A3                 xor     eax, eax
.text:004099A5                 mov     [ecx], edx
.text:004099A7                 jmp     short loc_409991
.text:004099A9 ; ---------------------------------------------------------------------------
.text:004099A9
.text:004099A9 loc_4099A9:                             ; CODE XREF: sub_4095E0+164↑j
.text:004099A9                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:004099A9                 xor     edx, edx        ; jumptable 00409744 cases 75,107
.text:004099AB                 mov     eax, 0FFFFFFFFh
.text:004099B0                 div     ebx
.text:004099B2                 mov     edx, [esp+3Ch+var_18]
.text:004099B6                 cmp     eax, edx
.text:004099B8                 jnb     short loc_4099D0
.text:004099BA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004099C2                 mov     edx, 1
.text:004099C7
.text:004099C7 loc_4099C7:                             ; CODE XREF: sub_4095E0+3F9↓j
.text:004099C7                 xor     eax, eax
.text:004099C9                 or      eax, edx
.text:004099CB                 jmp     loc_409838
.text:004099D0 ; ---------------------------------------------------------------------------
.text:004099D0
.text:004099D0 loc_4099D0:                             ; CODE XREF: sub_4095E0+3D8↑j
.text:004099D0                 imul    edx, ebx
.text:004099D3                 mov     [esp+3Ch+var_18], edx
.text:004099D7                 xor     edx, edx
.text:004099D9                 jmp     short loc_4099C7
.text:004099DB ; ---------------------------------------------------------------------------
.text:004099DB
.text:004099DB loc_4099DB:                             ; CODE XREF: sub_4095E0+164↑j
.text:004099DB                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:004099DB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 cases 77,109
.text:004099DF                 xor     ebp, ebp
.text:004099E1                 mov     esi, 1
.text:004099E6
.text:004099E6 loc_4099E6:                             ; CODE XREF: sub_4095E0+42E↓j
.text:004099E6                 xor     edx, edx
.text:004099E8                 mov     eax, 0FFFFFFFFh
.text:004099ED                 div     ebx
.text:004099EF                 mov     edx, [ecx]
.text:004099F1                 cmp     eax, edx
.text:004099F3                 jnb     short loc_409A10
.text:004099F5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004099FB                 mov     eax, 1
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: sub_4095E0+437↓j
.text:00409A00                 dec     esi
.text:00409A01                 or      ebp, eax
.text:00409A03                 cmp     esi, 0FFFFFFFFh
.text:00409A06                 mov     eax, ebp
.text:00409A08                 jz      loc_409838
.text:00409A0E                 jmp     short loc_4099E6
.text:00409A10 ; ---------------------------------------------------------------------------
.text:00409A10
.text:00409A10 loc_409A10:                             ; CODE XREF: sub_4095E0+413↑j
.text:00409A10                 imul    edx, ebx
.text:00409A13                 xor     eax, eax
.text:00409A15                 mov     [ecx], edx
.text:00409A17                 jmp     short loc_409A00
.text:00409A19 ; ---------------------------------------------------------------------------
.text:00409A19
.text:00409A19 loc_409A19:                             ; CODE XREF: sub_4095E0+164↑j
.text:00409A19                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:00409A19                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409744 cases 84,116
.text:00409A1D                 xor     ebp, ebp
.text:00409A1F                 mov     esi, 3
.text:00409A24
.text:00409A24 loc_409A24:                             ; CODE XREF: sub_4095E0+466↓j
.text:00409A24                 xor     edx, edx
.text:00409A26                 mov     eax, 0FFFFFFFFh
.text:00409A2B                 div     ebx
.text:00409A2D                 mov     edx, [ecx]
.text:00409A2F                 cmp     eax, edx
.text:00409A31                 jnb     short loc_409A4D
.text:00409A33                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409A39                 mov     eax, 1
.text:00409A3E
.text:00409A3E loc_409A3E:                             ; CODE XREF: sub_4095E0+474↓j
.text:00409A3E                 dec     esi
.text:00409A3F                 or      ebp, eax
.text:00409A41                 cmp     esi, 0FFFFFFFFh
.text:00409A44                 mov     eax, ebp
.text:00409A46                 jnz     short loc_409A24
.text:00409A48                 jmp     loc_409838
.text:00409A4D ; ---------------------------------------------------------------------------
.text:00409A4D
.text:00409A4D loc_409A4D:                             ; CODE XREF: sub_4095E0+451↑j
.text:00409A4D                 imul    edx, ebx
.text:00409A50                 xor     eax, eax
.text:00409A52                 mov     [ecx], edx
.text:00409A54                 jmp     short loc_409A3E
.text:00409A56 ; ---------------------------------------------------------------------------
.text:00409A56
.text:00409A56 loc_409A56:                             ; CODE XREF: sub_4095E0+164↑j
.text:00409A56                                         ; DATA XREF: sub_4095E0:jpt_409744↑o
.text:00409A56                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409744 case 119
.text:00409A5A                 test    eax, eax
.text:00409A5C                 js      loc_40985C
.text:00409A62                 add     eax, eax
.text:00409A64                 jmp     loc_409832
.text:00409A69 ; ---------------------------------------------------------------------------
.text:00409A69
.text:00409A69 loc_409A69:                             ; CODE XREF: sub_4095E0+13D↑j
.text:00409A69                                         ; sub_4095E0+14F↑j
.text:00409A69                 mov     [esp+3Ch+var_24], 2
.text:00409A71                 mov     ebx, 3E8h
.text:00409A76                 jmp     loc_409735
.text:00409A7B ; ---------------------------------------------------------------------------
.text:00409A7B
.text:00409A7B loc_409A7B:                             ; CODE XREF: sub_4095E0+146↑j
.text:00409A7B                 cmp     eax, 69h ; 'i'
.text:00409A7E                 jnz     loc_409735
.text:00409A84                 mov     edx, [esp+3Ch+var_28]
.text:00409A88                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00409A8C                 jnz     loc_409735
.text:00409A92                 mov     [esp+3Ch+var_24], 3
.text:00409A9A                 jmp     loc_409735
.text:00409A9A ; ---------------------------------------------------------------------------
.text:00409A9F                 align 10h
.text:00409AA0
.text:00409AA0 loc_409AA0:                             ; CODE XREF: sub_4095E0+12A↑j
.text:00409AA0                 mov     eax, [edi]
.text:00409AA2                 mov     [esp+3Ch+var_28], eax
.text:00409AA6                 jmp     loc_409735
.text:00409AAB ; ---------------------------------------------------------------------------
.text:00409AAB
.text:00409AAB loc_409AAB:                             ; CODE XREF: sub_4095E0+B0↑j
.text:00409AAB                 call    _errno
.text:00409AB0                 cmp     dword ptr [eax], 22h ; '"'
.text:00409AB3                 jnz     short loc_409AC2
.text:00409AB5                 mov     [esp+3Ch+var_1C], 1
.text:00409ABD                 jmp     loc_409696
.text:00409AC2 ; ---------------------------------------------------------------------------
.text:00409AC2
.text:00409AC2 loc_409AC2:                             ; CODE XREF: sub_4095E0+4D3↑j
.text:00409AC2                                         ; sub_4095E0+4F2↓j ...
.text:00409AC2                 mov     eax, 4
.text:00409AC7                 jmp     loc_4096B5
.text:00409ACC ; ---------------------------------------------------------------------------
.text:00409ACC
.text:00409ACC loc_409ACC:                             ; CODE XREF: sub_4095E0+A1↑j
.text:00409ACC                 mov     edx, [esp+3Ch+Str]
.text:00409AD0                 test    edx, edx
.text:00409AD2                 jz      short loc_409AC2
.text:00409AD4                 movzx   eax, byte ptr [eax]
.text:00409AD7                 test    al, al
.text:00409AD9                 jz      short loc_409AC2
.text:00409ADB                 mov     ebx, [esp+3Ch+Str]
.text:00409ADF                 movsx   esi, al
.text:00409AE2                 mov     [esp+3Ch+Type], esi ; Val
.text:00409AE6                 mov     [esp+3Ch+C], ebx ; Str
.text:00409AE9                 call    strchr
.text:00409AEE                 test    eax, eax
.text:00409AF0                 jz      short loc_409AC2
.text:00409AF2                 mov     [esp+3Ch+var_18], 1
.text:00409AFA                 jmp     loc_409696
.text:00409AFA ; ---------------------------------------------------------------------------
.text:00409AFF                 align 10h
.text:00409B00
.text:00409B00 loc_409B00:                             ; CODE XREF: sub_4095E0+4E↑j
.text:00409B00                 mov     eax, ds:_pctype
.text:00409B05                 mov     ecx, [eax]
.text:00409B07                 movzx   eax, word ptr [ecx+edx*2]
.text:00409B0B                 and     eax, 8
.text:00409B0E                 jmp     loc_409644
.text:00409B13 ; ---------------------------------------------------------------------------
.text:00409B13
.text:00409B13 loc_409B13:                             ; CODE XREF: sub_4095E0+26↑j
.text:00409B13                 lea     edi, [esp+3Ch+var_14]
.text:00409B17                 jmp     loc_40960C
.text:00409B1C ; ---------------------------------------------------------------------------
.text:00409B1C
.text:00409B1C loc_409B1C:                             ; CODE XREF: sub_4095E0+1A↑j
.text:00409B1C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00409B24                 mov     [esp+3Ch+Type], offset loc_409570
.text:00409B2C                 mov     [esp+3Ch+C], offset loc_4095B0
.text:00409B33                 call    _assert
.text:00409B33 sub_4095E0      endp
.text:00409B33
.text:00409B33 ; ---------------------------------------------------------------------------
.text:00409B38                 db 18h dup(90h)
.text:00409B50
.text:00409B50 ; =============== S U B R O U T I N E =======================================
.text:00409B50
.text:00409B50 ; Attributes: thunk
.text:00409B50
.text:00409B50 libintl_bindtextdomain proc near
.text:00409B50                 jmp     ds:__imp_libintl_bindtextdomain
.text:00409B50 libintl_bindtextdomain endp
.text:00409B50
.text:00409B50 ; ---------------------------------------------------------------------------
.text:00409B56                 align 10h
.text:00409B60                 jmp     ds:libintl_textdomain
.text:00409B60 ; ---------------------------------------------------------------------------
.text:00409B66                 align 10h
.text:00409B70                 jmp     ds:libintl_gettext
.text:00409B70 ; ---------------------------------------------------------------------------
.text:00409B76                 align 10h
.text:00409B80 ; const char aS_0[]
.text:00409B80 aS_0            db ': %s',0             ; DATA XREF: sub_409BA0+B8↓o
.text:00409B80                                         ; sub_409CA4+122↓o
.text:00409B85 aUnknownSystemE db 'Unknown system error',0
.text:00409B85                                         ; DATA XREF: sub_409BA0:loc_409C6D↓o
.text:00409B85                                         ; sub_409CA4:loc_409DDE↓o
.text:00409B9A ; const char aS_1[]
.text:00409B9A aS_1            db '%s: ',0             ; DATA XREF: sub_409BA0:loc_409C74↓o
.text:00409B9F                 align 10h
.text:00409BA0
.text:00409BA0 ; =============== S U B R O U T I N E =======================================
.text:00409BA0
.text:00409BA0
.text:00409BA0 ; int __cdecl sub_409BA0(int Code, int ErrorMessage, char *, char)
.text:00409BA0 sub_409BA0      proc near               ; CODE XREF: sub_401E90+47F↑p
.text:00409BA0                                         ; sub_401E90+5F7↑p ...
.text:00409BA0
.text:00409BA0 Stream          = dword ptr -1Ch
.text:00409BA0 Format          = dword ptr -18h
.text:00409BA0 ArgList         = dword ptr -14h
.text:00409BA0 Code            = dword ptr  4
.text:00409BA0 ErrorMessage    = dword ptr  8
.text:00409BA0 arg_8           = dword ptr  0Ch
.text:00409BA0 arg_C           = byte ptr  10h
.text:00409BA0
.text:00409BA0                 push    esi
.text:00409BA1                 push    ebx
.text:00409BA2                 sub     esp, 14h
.text:00409BA5                 mov     edx, ds:_iob
.text:00409BAB                 mov     esi, [esp+1Ch+Code]
.text:00409BAF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00409BB3                 add     edx, 20h ; ' '
.text:00409BB6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409BB9                 call    fflush
.text:00409BBE                 mov     eax, ds:dword_415EB0
.text:00409BC3                 test    eax, eax
.text:00409BC5                 jz      loc_409C74
.text:00409BCB                 call    eax ; dword_415EB0
.text:00409BCD
.text:00409BCD loc_409BCD:                             ; CODE XREF: sub_409BA0+F7↓j
.text:00409BCD                 lea     edx, [esp+1Ch+arg_C]
.text:00409BD1                 mov     ecx, [esp+1Ch+arg_8]
.text:00409BD5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00409BD9                 mov     edx, ds:_iob
.text:00409BDF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00409BE3                 add     edx, 40h ; '@'
.text:00409BE6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409BE9                 call    vfprintf
.text:00409BEE                 inc     ds:dword_415EC0
.text:00409BF4                 test    ebx, ebx
.text:00409BF6                 jnz     short loc_409C42
.text:00409BF8
.text:00409BF8 loc_409BF8:                             ; CODE XREF: sub_409BA0+CB↓j
.text:00409BF8                 mov     edx, ds:_iob
.text:00409BFE                 lea     ecx, [edx+40h]
.text:00409C01                 mov     ebx, [ecx+4]
.text:00409C04                 dec     ebx
.text:00409C05                 test    ebx, ebx
.text:00409C07                 mov     [ecx+4], ebx
.text:00409C0A                 js      short loc_409C30
.text:00409C0C                 mov     ecx, [edx+40h]
.text:00409C0F                 mov     byte ptr [ecx], 0Ah
.text:00409C12                 inc     dword ptr [edx+40h]
.text:00409C15
.text:00409C15 loc_409C15:                             ; CODE XREF: sub_409BA0+A0↓j
.text:00409C15                 mov     edx, ds:_iob
.text:00409C1B                 add     edx, 40h ; '@'
.text:00409C1E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409C21                 call    fflush
.text:00409C26                 test    esi, esi
.text:00409C28                 jnz     short loc_409C9C
.text:00409C2A                 add     esp, 14h
.text:00409C2D                 pop     ebx
.text:00409C2E                 pop     esi
.text:00409C2F                 retn
.text:00409C30 ; ---------------------------------------------------------------------------
.text:00409C30
.text:00409C30 loc_409C30:                             ; CODE XREF: sub_409BA0+6A↑j
.text:00409C30                 mov     [esp+1Ch+Format], ecx ; File
.text:00409C34                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00409C3B                 call    _flsbuf
.text:00409C40                 jmp     short loc_409C15
.text:00409C42 ; ---------------------------------------------------------------------------
.text:00409C42
.text:00409C42 loc_409C42:                             ; CODE XREF: sub_409BA0+56↑j
.text:00409C42                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00409C45                 call    strerror
.text:00409C4A                 test    eax, eax
.text:00409C4C                 jz      short loc_409C6D
.text:00409C4E
.text:00409C4E loc_409C4E:                             ; CODE XREF: sub_409BA0+D2↓j
.text:00409C4E                 mov     [esp+1Ch+ArgList], eax
.text:00409C52                 mov     ebx, ds:_iob
.text:00409C58                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00409C60                 add     ebx, 40h ; '@'
.text:00409C63                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00409C66                 call    fprintf
.text:00409C6B                 jmp     short loc_409BF8
.text:00409C6D ; ---------------------------------------------------------------------------
.text:00409C6D
.text:00409C6D loc_409C6D:                             ; CODE XREF: sub_409BA0+AC↑j
.text:00409C6D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409C72                 jmp     short loc_409C4E
.text:00409C74 ; ---------------------------------------------------------------------------
.text:00409C74
.text:00409C74 loc_409C74:                             ; CODE XREF: sub_409BA0+25↑j
.text:00409C74                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00409C7C                 mov     edx, ds:_iob
.text:00409C82                 mov     ecx, ds:dword_415E80
.text:00409C88                 add     edx, 40h ; '@'
.text:00409C8B                 mov     [esp+1Ch+ArgList], ecx
.text:00409C8F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409C92                 call    fprintf
.text:00409C97                 jmp     loc_409BCD
.text:00409C9C ; ---------------------------------------------------------------------------
.text:00409C9C
.text:00409C9C loc_409C9C:                             ; CODE XREF: sub_409BA0+88↑j
.text:00409C9C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00409C9F                 call    exit
.text:00409C9F sub_409BA0      endp
.text:00409C9F
.text:00409CA4
.text:00409CA4 ; =============== S U B R O U T I N E =======================================
.text:00409CA4
.text:00409CA4
.text:00409CA4 ; int __cdecl sub_409CA4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409CA4 sub_409CA4      proc near               ; DATA XREF: sub_409CA4+77↓o
.text:00409CA4
.text:00409CA4 Stream          = dword ptr -28h
.text:00409CA4 Format          = dword ptr -24h
.text:00409CA4 ArgList         = dword ptr -20h
.text:00409CA4 var_1C          = dword ptr -1Ch
.text:00409CA4 Code            = dword ptr  8
.text:00409CA4 ErrorMessage    = dword ptr  0Ch
.text:00409CA4 Str2            = dword ptr  10h
.text:00409CA4 arg_10          = dword ptr  14h
.text:00409CA4 arg_14          = dword ptr  18h
.text:00409CA4 arg_18          = byte ptr  1Ch
.text:00409CA4
.text:00409CA4                 and     eax, 64253A73h
.text:00409CA9                 cmp     ah, [eax]
.text:00409CAB
.text:00409CAB loc_409CAB:                             ; DATA XREF: sub_409CA4:loc_409DE5↓o
.text:00409CAB                 add     ds:55003A73h, ah
.text:00409CB1                 push    edi
.text:00409CB2                 push    esi
.text:00409CB3                 push    ebx
.text:00409CB4                 sub     esp, 1Ch
.text:00409CB7                 mov     edx, ds:dword_415EF0
.text:00409CBD                 mov     ebp, [esp+28h+Code]
.text:00409CC1                 mov     edi, [esp+28h+ErrorMessage]
.text:00409CC5                 test    edx, edx
.text:00409CC7                 mov     ebx, [esp+28h+Str2]
.text:00409CCB                 mov     esi, [esp+28h+arg_10]
.text:00409CCF                 jz      short loc_409CE9
.text:00409CD1                 cmp     ds:dword_4151A0, esi
.text:00409CD7                 jz      loc_409E10
.text:00409CDD
.text:00409CDD loc_409CDD:                             ; CODE XREF: sub_409CA4+18D↓j
.text:00409CDD                 mov     ds:Str1, ebx
.text:00409CE3                 mov     ds:dword_4151A0, esi
.text:00409CE9
.text:00409CE9 loc_409CE9:                             ; CODE XREF: sub_409CA4+2B↑j
.text:00409CE9                 mov     edx, ds:_iob
.text:00409CEF                 add     edx, 20h ; ' '
.text:00409CF2                 mov     [esp+28h+Stream], edx ; Stream
.text:00409CF5                 call    fflush
.text:00409CFA                 mov     eax, ds:dword_415EB0
.text:00409CFF                 test    eax, eax
.text:00409D01                 jz      loc_409DE5
.text:00409D07                 call    eax ; dword_415EB0
.text:00409D09
.text:00409D09 loc_409D09:                             ; CODE XREF: sub_409CA4+164↓j
.text:00409D09                 test    ebx, ebx
.text:00409D0B                 jz      short loc_409D2E
.text:00409D0D                 mov     [esp+28h+ArgList], ebx
.text:00409D11                 mov     ebx, ds:_iob
.text:00409D17                 mov     [esp+28h+var_1C], esi
.text:00409D1B                 mov     [esp+28h+Format], offset sub_409CA4 ; Format
.text:00409D23                 add     ebx, 40h ; '@'
.text:00409D26                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409D29                 call    fprintf
.text:00409D2E
.text:00409D2E loc_409D2E:                             ; CODE XREF: sub_409CA4+67↑j
.text:00409D2E                 mov     esi, ds:_iob
.text:00409D34                 lea     edx, [esp+28h+arg_18]
.text:00409D38                 mov     ecx, [esp+28h+arg_14]
.text:00409D3C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00409D40                 add     esi, 40h ; '@'
.text:00409D43                 mov     [esp+28h+Format], ecx ; Format
.text:00409D47                 mov     [esp+28h+Stream], esi ; Stream
.text:00409D4A                 call    vfprintf
.text:00409D4F                 inc     ds:dword_415EC0
.text:00409D55                 test    edi, edi
.text:00409D57                 jnz     short loc_409DB0
.text:00409D59
.text:00409D59 loc_409D59:                             ; CODE XREF: sub_409CA4+135↓j
.text:00409D59                 mov     edx, ds:_iob
.text:00409D5F                 lea     ecx, [edx+40h]
.text:00409D62                 mov     ebx, [ecx+4]
.text:00409D65                 dec     ebx
.text:00409D66                 test    ebx, ebx
.text:00409D68                 mov     [ecx+4], ebx
.text:00409D6B                 js      short loc_409D97
.text:00409D6D                 mov     esi, [edx+40h]
.text:00409D70                 mov     byte ptr [esi], 0Ah
.text:00409D73                 inc     dword ptr [edx+40h]
.text:00409D76
.text:00409D76 loc_409D76:                             ; CODE XREF: sub_409CA4+103↓j
.text:00409D76                 mov     ecx, ds:_iob
.text:00409D7C                 add     ecx, 40h ; '@'
.text:00409D7F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409D82                 call    fflush
.text:00409D87                 test    ebp, ebp
.text:00409D89                 jnz     loc_409E36
.text:00409D8F
.text:00409D8F loc_409D8F:                             ; CODE XREF: sub_409CA4+173↓j
.text:00409D8F                                         ; sub_409CA4+187↓j
.text:00409D8F                 add     esp, 1Ch
.text:00409D92                 pop     ebx
.text:00409D93                 pop     esi
.text:00409D94                 pop     edi
.text:00409D95                 pop     ebp
.text:00409D96                 retn
.text:00409D97 ; ---------------------------------------------------------------------------
.text:00409D97
.text:00409D97 loc_409D97:                             ; CODE XREF: sub_409CA4+C7↑j
.text:00409D97                 mov     [esp+28h+Format], ecx ; File
.text:00409D9B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409DA2                 call    _flsbuf
.text:00409DA7                 jmp     short loc_409D76
.text:00409DA7 ; ---------------------------------------------------------------------------
.text:00409DA9                 align 10h
.text:00409DB0
.text:00409DB0 loc_409DB0:                             ; CODE XREF: sub_409CA4+B3↑j
.text:00409DB0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409DB3                 call    strerror
.text:00409DB8                 test    eax, eax
.text:00409DBA                 jz      short loc_409DDE
.text:00409DBC
.text:00409DBC loc_409DBC:                             ; CODE XREF: sub_409CA4+13F↓j
.text:00409DBC                 mov     [esp+28h+ArgList], eax
.text:00409DC0                 mov     edi, ds:_iob
.text:00409DC6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00409DCE                 add     edi, 40h ; '@'
.text:00409DD1                 mov     [esp+28h+Stream], edi ; Stream
.text:00409DD4                 call    fprintf
.text:00409DD9                 jmp     loc_409D59
.text:00409DDE ; ---------------------------------------------------------------------------
.text:00409DDE
.text:00409DDE loc_409DDE:                             ; CODE XREF: sub_409CA4+116↑j
.text:00409DDE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409DE3                 jmp     short loc_409DBC
.text:00409DE5 ; ---------------------------------------------------------------------------
.text:00409DE5
.text:00409DE5 loc_409DE5:                             ; CODE XREF: sub_409CA4+5D↑j
.text:00409DE5                 mov     [esp+28h+Format], (offset loc_409CAB+1) ; Format
.text:00409DED                 mov     ecx, ds:_iob
.text:00409DF3                 mov     edx, ds:dword_415E80
.text:00409DF9                 add     ecx, 40h ; '@'
.text:00409DFC                 mov     [esp+28h+ArgList], edx
.text:00409E00                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409E03                 call    fprintf
.text:00409E08                 jmp     loc_409D09
.text:00409E08 ; ---------------------------------------------------------------------------
.text:00409E0D                 align 10h
.text:00409E10
.text:00409E10 loc_409E10:                             ; CODE XREF: sub_409CA4+33↑j
.text:00409E10                 mov     eax, ds:Str1
.text:00409E15                 cmp     ebx, eax
.text:00409E17                 jz      loc_409D8F
.text:00409E1D                 mov     [esp+28h+Format], ebx ; Str2
.text:00409E21                 mov     [esp+28h+Stream], eax ; Str1
.text:00409E24                 call    strcmp
.text:00409E29                 test    eax, eax
.text:00409E2B                 jz      loc_409D8F
.text:00409E31                 jmp     loc_409CDD
.text:00409E36 ; ---------------------------------------------------------------------------
.text:00409E36
.text:00409E36 loc_409E36:                             ; CODE XREF: sub_409CA4+E5↑j
.text:00409E36                 mov     [esp+28h+Stream], ebp ; Code
.text:00409E39                 call    exit
.text:00409E39 sub_409CA4      endp ; sp-analysis failed
.text:00409E39
.text:00409E39 ; ---------------------------------------------------------------------------
.text:00409E3E                 align 10h
.text:00409E40
.text:00409E40 ; =============== S U B R O U T I N E =======================================
.text:00409E40
.text:00409E40
.text:00409E40 sub_409E40      proc near               ; CODE XREF: sub_403500+3B↑p
.text:00409E40                                         ; sub_404CF0+7C↑p
.text:00409E40
.text:00409E40 hNamedPipe      = dword ptr -0Ch
.text:00409E40 var_8           = dword ptr -8
.text:00409E40 var_4           = dword ptr -4
.text:00409E40 arg_0           = dword ptr  4
.text:00409E40 arg_4           = dword ptr  8
.text:00409E40
.text:00409E40                 sub     esp, 0Ch
.text:00409E43                 mov     edx, [esp+0Ch+arg_4]
.text:00409E47                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:00409E4E                 mov     [esp+0Ch+var_4], edx ; int
.text:00409E52                 mov     edx, [esp+0Ch+arg_0]
.text:00409E56                 mov     [esp+0Ch+var_8], edx ; int
.text:00409E5A                 call    sub_40A0B0
.text:00409E5F                 add     esp, 0Ch
.text:00409E62                 retn
.text:00409E62 sub_409E40      endp
.text:00409E62
.text:00409E62 ; ---------------------------------------------------------------------------
.text:00409E63 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00409E63                                         ; DATA XREF: .text:00409F4E↓o
.text:00409E76 aModeO          db 'mode:      %#o',0Ah,0
.text:00409E76                                         ; DATA XREF: .text:00409F64↓o
.text:00409E86 aUidLd          db 'uid:       %ld',0Ah,0
.text:00409E86                                         ; DATA XREF: .text:00409F77↓o
.text:00409E96 aGidLd          db 'gid:       %ld',0Ah,0
.text:00409E96                                         ; DATA XREF: .text:00409F8A↓o
.text:00409EA6 aDevLu          db 'dev:       %lu',0Ah,0
.text:00409EA6                                         ; DATA XREF: .text:00409F9D↓o
.text:00409EB6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00409EB6                                         ; DATA XREF: .text:00409FB0↓o
.text:00409EC6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00409EC6                                         ; DATA XREF: .text:00409FC6↓o
.text:00409ED8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00409ED8                                         ; DATA XREF: .text:00409FDD↓o
.text:00409EE7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00409EE7                                         ; DATA XREF: .text:00409FF3↓o
.text:00409EF9 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00409EF9                                         ; DATA XREF: .text:0040A019↓o
.text:00409F0C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:00409F0C                                         ; DATA XREF: .text:0040A03B↓o
.text:00409F1F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:00409F1F                                         ; DATA XREF: .text:0040A05D↓o
.text:00409F33                 align 10h
.text:00409F40                 push    ebx
.text:00409F41                 sub     esp, 18h
.text:00409F44                 mov     ebx, [esp+20h]
.text:00409F48                 mov     edx, [ebx+8]
.text:00409F4B                 mov     ecx, [ebx+0Ch]
.text:00409F4E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00409F55                 mov     [esp+4], edx
.text:00409F59                 mov     [esp+8], ecx
.text:00409F5D                 call    printf
.text:00409F62                 mov     ecx, [ebx]
.text:00409F64                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:00409F6B                 mov     [esp+4], ecx
.text:00409F6F                 call    printf
.text:00409F74                 mov     edx, [ebx+1Ch]
.text:00409F77                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:00409F7E                 mov     [esp+4], edx
.text:00409F82                 call    printf
.text:00409F87                 mov     ecx, [ebx+20h]
.text:00409F8A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00409F91                 mov     [esp+4], ecx
.text:00409F95                 call    printf
.text:00409F9A                 mov     edx, [ebx+10h]
.text:00409F9D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00409FA4                 mov     [esp+4], edx
.text:00409FA8                 call    printf
.text:00409FAD                 mov     ecx, [ebx+18h]
.text:00409FB0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00409FB7                 mov     [esp+4], ecx
.text:00409FBB                 call    printf
.text:00409FC0                 mov     edx, [ebx+30h]
.text:00409FC3                 mov     ecx, [ebx+34h]
.text:00409FC6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:00409FCD                 mov     [esp+4], edx
.text:00409FD1                 mov     [esp+8], ecx
.text:00409FD5                 call    printf
.text:00409FDA                 mov     ecx, [ebx+50h]
.text:00409FDD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00409FE4                 mov     [esp+4], ecx
.text:00409FE8                 call    printf
.text:00409FED                 mov     ecx, [ebx+5Ch]
.text:00409FF0                 mov     edx, [ebx+58h]
.text:00409FF3                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:00409FFA                 mov     [esp+8], ecx
.text:00409FFE                 mov     [esp+4], edx
.text:0040A002                 call    printf
.text:0040A007                 lea     edx, [ebx+38h]
.text:0040A00A                 mov     [esp], edx
.text:0040A00D                 call    ctime
.text:0040A012                 mov     [esp+8], eax
.text:0040A016                 mov     ecx, [ebx+38h]
.text:0040A019                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040A020                 mov     [esp+4], ecx
.text:0040A024                 call    printf
.text:0040A029                 lea     edx, [ebx+40h]
.text:0040A02C                 mov     [esp], edx
.text:0040A02F                 call    ctime
.text:0040A034                 mov     [esp+8], eax
.text:0040A038                 mov     ecx, [ebx+40h]
.text:0040A03B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040A042                 mov     [esp+4], ecx
.text:0040A046                 call    printf
.text:0040A04B                 lea     edx, [ebx+48h]
.text:0040A04E                 mov     [esp], edx
.text:0040A051                 call    ctime
.text:0040A056                 mov     [esp+8], eax
.text:0040A05A                 mov     edx, [ebx+48h]
.text:0040A05D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040A064                 mov     [esp+4], edx
.text:0040A068                 call    printf
.text:0040A06D                 add     esp, 18h
.text:0040A070                 xor     eax, eax
.text:0040A072                 pop     ebx
.text:0040A073                 retn
.text:0040A073 ; ---------------------------------------------------------------------------
.text:0040A074                 align 10h
.text:0040A080 ; const char aFxstat64BadFil[]
.text:0040A080 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040A080                                         ; DATA XREF: sub_40A0B0+7B↓o
.text:0040A0A4                 align 10h
.text:0040A0B0
.text:0040A0B0 ; =============== S U B R O U T I N E =======================================
.text:0040A0B0
.text:0040A0B0
.text:0040A0B0 ; int __cdecl sub_40A0B0(HANDLE hNamedPipe, int, int)
.text:0040A0B0 sub_40A0B0      proc near               ; CODE XREF: sub_409E40+1A↑p
.text:0040A0B0                                         ; .text:0040CAB9↓p
.text:0040A0B0
.text:0040A0B0 FileHandle      = dword ptr -1Ch
.text:0040A0B0 var_18          = dword ptr -18h
.text:0040A0B0 var_C           = dword ptr -0Ch
.text:0040A0B0 var_8           = dword ptr -8
.text:0040A0B0 var_4           = dword ptr -4
.text:0040A0B0 hNamedPipe      = dword ptr  4
.text:0040A0B0 arg_4           = dword ptr  8
.text:0040A0B0 arg_8           = dword ptr  0Ch
.text:0040A0B0
.text:0040A0B0                 sub     esp, 1Ch
.text:0040A0B3                 mov     edx, [esp+1Ch+arg_4]
.text:0040A0B7                 mov     [esp+1Ch+var_C], ebx
.text:0040A0BB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040A0BF                 mov     [esp+1Ch+var_8], esi
.text:0040A0C3                 mov     esi, [esp+1Ch+arg_8]
.text:0040A0C7                 test    ebx, ebx
.text:0040A0C9                 mov     [esp+1Ch+var_4], edi
.text:0040A0CD                 jnz     short loc_40A107
.text:0040A0CF                 test    edx, edx
.text:0040A0D1                 js      short loc_40A127
.text:0040A0D3                 test    esi, esi
.text:0040A0D5                 jz      short loc_40A107
.text:0040A0D7                 cld
.text:0040A0D8                 mov     eax, ebx
.text:0040A0DA                 mov     edi, esi
.text:0040A0DC                 mov     ecx, 18h
.text:0040A0E1                 rep stosd
.text:0040A0E3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040A0E7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040A0EA                 call    _get_osfhandle
.text:0040A0EF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040A0F3                 mov     ebx, [esp+1Ch+var_C]
.text:0040A0F7                 mov     esi, [esp+1Ch+var_8]
.text:0040A0FB                 mov     edi, [esp+1Ch+var_4]
.text:0040A0FF                 add     esp, 1Ch
.text:0040A102                 jmp     sub_40A490
.text:0040A107 ; ---------------------------------------------------------------------------
.text:0040A107
.text:0040A107 loc_40A107:                             ; CODE XREF: sub_40A0B0+1D↑j
.text:0040A107                                         ; sub_40A0B0+25↑j
.text:0040A107                 call    _errno
.text:0040A10C                 mov     dword ptr [eax], 16h
.text:0040A112
.text:0040A112 loc_40A112:                             ; CODE XREF: sub_40A0B0+92↓j
.text:0040A112                 mov     ebx, [esp+1Ch+var_C]
.text:0040A116                 mov     eax, 0FFFFFFFFh
.text:0040A11B                 mov     esi, [esp+1Ch+var_8]
.text:0040A11F                 mov     edi, [esp+1Ch+var_4]
.text:0040A123                 add     esp, 1Ch
.text:0040A126                 retn
.text:0040A127 ; ---------------------------------------------------------------------------
.text:0040A127
.text:0040A127 loc_40A127:                             ; CODE XREF: sub_40A0B0+21↑j
.text:0040A127                 mov     [esp+1Ch+var_18], edx
.text:0040A12B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040A132                 call    printf
.text:0040A137                 call    _errno
.text:0040A13C                 mov     dword ptr [eax], 9
.text:0040A142                 jmp     short loc_40A112
.text:0040A142 sub_40A0B0      endp
.text:0040A142
.text:0040A142 ; ---------------------------------------------------------------------------
.text:0040A144                 align 20h
.text:0040A160 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040A160                                         ; DATA XREF: .data:off_414064↓o
.text:0040A174 ; const CHAR LibFileName[]
.text:0040A174 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40A1A0+11↓o
.text:0040A174                                         ; sub_40A310+C↓o ...
.text:0040A181 ; const CHAR ProcName[]
.text:0040A181 ProcName        db 'GetFileAttributesExA',0
.text:0040A181                                         ; DATA XREF: sub_40A1A0+28↓o
.text:0040A196                 align 10h
.text:0040A1A0
.text:0040A1A0 ; =============== S U B R O U T I N E =======================================
.text:0040A1A0
.text:0040A1A0
.text:0040A1A0 ; int __cdecl sub_40A1A0(LPCSTR lpFileName, int)
.text:0040A1A0 sub_40A1A0      proc near               ; CODE XREF: .text:0040B344↓p
.text:0040A1A0                                         ; sub_40B740+37↓p
.text:0040A1A0
.text:0040A1A0 lpModuleName    = dword ptr -18Ch
.text:0040A1A0 lpProcName      = dword ptr -188h
.text:0040A1A0 var_184         = dword ptr -184h
.text:0040A1A0 var_170         = dword ptr -170h
.text:0040A1A0 var_164         = dword ptr -164h
.text:0040A1A0 hModule         = dword ptr -160h
.text:0040A1A0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040A1A0 lpFileName      = dword ptr  4
.text:0040A1A0 arg_4           = dword ptr  8
.text:0040A1A0
.text:0040A1A0                 push    ebp
.text:0040A1A1                 push    edi
.text:0040A1A2                 push    esi
.text:0040A1A3                 push    ebx
.text:0040A1A4                 sub     esp, 17Ch
.text:0040A1AA                 mov     ebx, [esp+18Ch+arg_4]
.text:0040A1B1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040A1B8                 call    GetModuleHandleA
.text:0040A1BD                 sub     esp, 4
.text:0040A1C0                 mov     [esp+18Ch+hModule], eax
.text:0040A1C4                 mov     edx, [esp+18Ch+hModule]
.text:0040A1C8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040A1D0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040A1D3                 call    GetProcAddress
.text:0040A1D8                 sub     esp, 8
.text:0040A1DB                 mov     ebp, eax
.text:0040A1DD                 mov     eax, [esp+18Ch+lpFileName]
.text:0040A1E4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040A1E7                 call    GetFileAttributesA
.text:0040A1EC                 sub     esp, 4
.text:0040A1EF                 mov     [esp+18Ch+var_164], eax
.text:0040A1F3                 xor     eax, eax
.text:0040A1F5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040A1FA                 jz      short loc_40A251
.text:0040A1FC                 cld
.text:0040A1FD                 mov     ecx, 50h ; 'P'
.text:0040A202                 lea     esi, [esp+18Ch+FindFileData]
.text:0040A206                 mov     edi, esi
.text:0040A208                 test    ebp, ebp
.text:0040A20A                 rep stosd
.text:0040A20C                 mov     [esp+18Ch+var_170], 0
.text:0040A214                 jz      short loc_40A235
.text:0040A216                 mov     [esp+18Ch+var_184], ebx
.text:0040A21A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040A221                 mov     [esp+18Ch+lpProcName], 0
.text:0040A229                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040A22C                 call    ebp
.text:0040A22E                 sub     esp, 0Ch
.text:0040A231                 mov     [esp+18Ch+var_170], eax
.text:0040A235
.text:0040A235 loc_40A235:                             ; CODE XREF: sub_40A1A0+74↑j
.text:0040A235                 mov     eax, [esp+18Ch+var_170]
.text:0040A239                 test    eax, eax
.text:0040A23B                 jz      short loc_40A260
.text:0040A23D
.text:0040A23D loc_40A23D:                             ; CODE XREF: sub_40A1A0+131↓j
.text:0040A23D                                         ; sub_40A1A0+14B↓j
.text:0040A23D                 mov     ebx, [esp+18Ch+hModule]
.text:0040A241                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040A244                 call    FreeLibrary
.text:0040A249                 sub     esp, 4
.text:0040A24C                 mov     eax, 1
.text:0040A251
.text:0040A251 loc_40A251:                             ; CODE XREF: sub_40A1A0+5A↑j
.text:0040A251                 add     esp, 17Ch
.text:0040A257                 pop     ebx
.text:0040A258                 pop     esi
.text:0040A259                 pop     edi
.text:0040A25A                 pop     ebp
.text:0040A25B                 retn
.text:0040A25B ; ---------------------------------------------------------------------------
.text:0040A25C                 align 10h
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: sub_40A1A0+9B↑j
.text:0040A260                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040A264                 mov     edx, [esp+18Ch+lpFileName]
.text:0040A26B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040A26E                 call    FindFirstFileA
.text:0040A273                 sub     esp, 8
.text:0040A276                 xor     ecx, ecx
.text:0040A278                 cmp     eax, 0FFFFFFFFh
.text:0040A27B                 setnz   cl
.text:0040A27E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040A282                 mov     [ebx], edi
.text:0040A284                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040A288                 mov     [esp+18Ch+var_170], ecx
.text:0040A28C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040A290                 mov     [ebx+8], esi
.text:0040A293                 mov     [ebx+4], ecx
.text:0040A296                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040A29A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040A29E                 mov     [ebx+0Ch], ebp
.text:0040A2A1                 mov     [ebx+10h], edi
.text:0040A2A4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040A2A8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040A2AC                 mov     [ebx+18h], esi
.text:0040A2AF                 mov     [ebx+14h], ecx
.text:0040A2B2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040A2B6                 mov     [ebx+1Ch], ebp
.text:0040A2B9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040A2BD                 mov     [ebx+20h], edi
.text:0040A2C0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040A2C3                 call    FindClose
.text:0040A2C8                 sub     esp, 4
.text:0040A2CB                 mov     esi, [esp+18Ch+var_170]
.text:0040A2CF                 test    esi, esi
.text:0040A2D1                 jnz     loc_40A23D
.text:0040A2D7                 cld
.text:0040A2D8                 mov     eax, [esp+18Ch+var_170]
.text:0040A2DC                 mov     ecx, 9
.text:0040A2E1                 mov     edi, ebx
.text:0040A2E3                 rep stosd
.text:0040A2E5                 mov     ebp, [esp+18Ch+var_164]
.text:0040A2E9                 mov     [ebx], ebp
.text:0040A2EB                 jmp     loc_40A23D
.text:0040A2EB sub_40A1A0      endp
.text:0040A2EB
.text:0040A2EB ; ---------------------------------------------------------------------------
.text:0040A2F0 ; const CHAR aFindfirstfilee[]
.text:0040A2F0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40A310+23↓o
.text:0040A301 ; const char Source[]
.text:0040A301 Source          db '\*',0               ; DATA XREF: sub_40A310:loc_40A39D↓o
.text:0040A304                 align 10h
.text:0040A310
.text:0040A310 ; =============== S U B R O U T I N E =======================================
.text:0040A310
.text:0040A310
.text:0040A310 ; int __cdecl sub_40A310(char *Str)
.text:0040A310 sub_40A310      proc near               ; CODE XREF: .text:0040B443↓p
.text:0040A310                                         ; sub_40B740+3FA↓p ...
.text:0040A310
.text:0040A310 lpLibFileName   = dword ptr -18Ch
.text:0040A310 lpProcName      = dword ptr -188h
.text:0040A310 var_184         = dword ptr -184h
.text:0040A310 var_180         = dword ptr -180h
.text:0040A310 var_17C         = dword ptr -17Ch
.text:0040A310 var_178         = dword ptr -178h
.text:0040A310 var_164         = dword ptr -164h
.text:0040A310 hModule         = dword ptr -160h
.text:0040A310 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040A310 Str             = dword ptr  4
.text:0040A310
.text:0040A310                 push    ebp
.text:0040A311                 push    edi
.text:0040A312                 xor     edi, edi
.text:0040A314                 push    esi
.text:0040A315                 push    ebx
.text:0040A316                 sub     esp, 17Ch
.text:0040A31C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040A323                 call    LoadLibraryA
.text:0040A328                 sub     esp, 4
.text:0040A32B                 mov     [esp+18Ch+hModule], eax
.text:0040A32F                 mov     ecx, [esp+18Ch+hModule]
.text:0040A333                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040A33B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040A33E                 call    GetProcAddress
.text:0040A343                 sub     esp, 8
.text:0040A346                 mov     edx, [esp+18Ch+Str]
.text:0040A34D                 mov     [esp+18Ch+var_164], eax
.text:0040A351                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040A354                 call    strlen
.text:0040A359                 lea     edx, [eax+5]
.text:0040A35C                 mov     ebx, eax
.text:0040A35E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040A361                 call    malloc
.text:0040A366                 mov     esi, eax
.text:0040A368                 test    esi, esi
.text:0040A36A                 mov     eax, 1
.text:0040A36F                 jz      loc_40A44D
.text:0040A375                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040A378                 mov     ebp, [esp+18Ch+Str]
.text:0040A37F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040A383                 call    strcpy
.text:0040A388                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040A38D                 cmp     al, 2Fh ; '/'
.text:0040A38F                 jz      loc_40A47B
.text:0040A395                 cmp     al, 5Ch ; '\'
.text:0040A397                 jz      loc_40A47B
.text:0040A39D
.text:0040A39D loc_40A39D:                             ; CODE XREF: sub_40A310+170↓j
.text:0040A39D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:0040A3A5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040A3A8                 call    strcat
.text:0040A3AD                 mov     eax, [esp+18Ch+var_164]
.text:0040A3B1                 test    eax, eax
.text:0040A3B3                 jz      loc_40A475
.text:0040A3B9                 mov     [esp+18Ch+var_178], 0
.text:0040A3C1                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040A3C5                 mov     [esp+18Ch+var_17C], 0
.text:0040A3CD                 mov     [esp+18Ch+var_180], 1
.text:0040A3D5                 mov     [esp+18Ch+var_184], ebp
.text:0040A3D9                 mov     [esp+18Ch+lpProcName], 0
.text:0040A3E1                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040A3E4                 call    [esp+18Ch+var_164]
.text:0040A3E8                 sub     esp, 18h
.text:0040A3EB                 mov     ebx, eax
.text:0040A3ED                 cmp     eax, 0FFFFFFFFh
.text:0040A3F0                 jz      short loc_40A458
.text:0040A3F2                 lea     esi, [esi+0]
.text:0040A3F9                 lea     edi, [edi+0]
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: sub_40A310+109↓j
.text:0040A400                                         ; sub_40A310+161↓j
.text:0040A400                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040A405                 jz      short loc_40A408
.text:0040A407                 inc     edi
.text:0040A408
.text:0040A408 loc_40A408:                             ; CODE XREF: sub_40A310+F5↑j
.text:0040A408                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040A40C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040A40F                 call    FindNextFileA
.text:0040A414                 sub     esp, 8
.text:0040A417                 test    eax, eax
.text:0040A419                 jnz     short loc_40A400
.text:0040A41B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040A41E                 call    FindClose
.text:0040A423                 sub     esp, 4
.text:0040A426                 mov     esi, [esp+18Ch+hModule]
.text:0040A42A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040A42D                 call    FreeLibrary
.text:0040A432                 sub     esp, 4
.text:0040A435                 mov     ebx, [esp+18Ch+Str]
.text:0040A43C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040A43F                 call    sub_40CB50
.text:0040A444                 test    eax, eax
.text:0040A446                 jz      short loc_40A44B
.text:0040A448                 add     edi, 2
.text:0040A44B
.text:0040A44B loc_40A44B:                             ; CODE XREF: sub_40A310+136↑j
.text:0040A44B                 mov     eax, edi
.text:0040A44D
.text:0040A44D loc_40A44D:                             ; CODE XREF: sub_40A310+5F↑j
.text:0040A44D                                         ; sub_40A310+163↓j
.text:0040A44D                 add     esp, 17Ch
.text:0040A453                 pop     ebx
.text:0040A454                 pop     esi
.text:0040A455                 pop     edi
.text:0040A456                 pop     ebp
.text:0040A457                 retn
.text:0040A458 ; ---------------------------------------------------------------------------
.text:0040A458
.text:0040A458 loc_40A458:                             ; CODE XREF: sub_40A310+E0↑j
.text:0040A458                                         ; sub_40A310+169↓j
.text:0040A458                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040A45C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040A45F                 call    FindFirstFileA
.text:0040A464                 mov     ebx, eax
.text:0040A466                 sub     esp, 8
.text:0040A469                 cmp     ebx, 0FFFFFFFFh
.text:0040A46C                 mov     eax, 2
.text:0040A471                 jnz     short loc_40A400
.text:0040A473                 jmp     short loc_40A44D
.text:0040A475 ; ---------------------------------------------------------------------------
.text:0040A475
.text:0040A475 loc_40A475:                             ; CODE XREF: sub_40A310+A3↑j
.text:0040A475                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040A479                 jmp     short loc_40A458
.text:0040A47B ; ---------------------------------------------------------------------------
.text:0040A47B
.text:0040A47B loc_40A47B:                             ; CODE XREF: sub_40A310+7F↑j
.text:0040A47B                                         ; sub_40A310+87↑j
.text:0040A47B                 mov     byte ptr [ebx+esi-1], 0
.text:0040A480                 jmp     loc_40A39D
.text:0040A480 sub_40A310      endp
.text:0040A480
.text:0040A480 ; ---------------------------------------------------------------------------
.text:0040A485                 align 10h
.text:0040A490
.text:0040A490 ; =============== S U B R O U T I N E =======================================
.text:0040A490
.text:0040A490
.text:0040A490 ; int __cdecl sub_40A490(HANDLE hNamedPipe, int)
.text:0040A490 sub_40A490      proc near               ; CODE XREF: sub_40A0B0+52↑j
.text:0040A490                                         ; sub_40BCC0-B9↓p
.text:0040A490
.text:0040A490 hFile           = dword ptr -0ECh
.text:0040A490 lpFileInformation= dword ptr -0E8h
.text:0040A490 nBufferSize     = dword ptr -0E4h
.text:0040A490 lpBytesRead     = dword ptr -0E0h
.text:0040A490 lpTotalBytesAvail= dword ptr -0DCh
.text:0040A490 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040A490 var_C4          = dword ptr -0C4h
.text:0040A490 var_C0          = dword ptr -0C0h
.text:0040A490 var_BC          = dword ptr -0BCh
.text:0040A490 var_B8          = dword ptr -0B8h
.text:0040A490 var_B4          = dword ptr -0B4h
.text:0040A490 var_B0          = dword ptr -0B0h
.text:0040A490 var_AC          = dword ptr -0ACh
.text:0040A490 var_A8          = dword ptr -0A8h
.text:0040A490 TotalBytesAvail = dword ptr -0A0h
.text:0040A490 var_9C          = dword ptr -9Ch
.text:0040A490 var_98          = dword ptr -98h
.text:0040A490 var_94          = dword ptr -94h
.text:0040A490 var_90          = dword ptr -90h
.text:0040A490 var_8C          = dword ptr -8Ch
.text:0040A490 var_88          = dword ptr -88h
.text:0040A490 var_84          = dword ptr -84h
.text:0040A490 var_80          = dword ptr -80h
.text:0040A490 var_7C          = dword ptr -7Ch
.text:0040A490 var_78          = dword ptr -78h
.text:0040A490 var_74          = dword ptr -74h
.text:0040A490 var_70          = dword ptr -70h
.text:0040A490 var_6C          = dword ptr -6Ch
.text:0040A490 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040A490 hNamedPipe      = dword ptr  4
.text:0040A490 arg_4           = dword ptr  8
.text:0040A490
.text:0040A490                 push    ebp
.text:0040A491                 mov     eax, 0FFFFFFFFh
.text:0040A496                 push    edi
.text:0040A497                 push    esi
.text:0040A498                 push    ebx
.text:0040A499                 sub     esp, 0DCh
.text:0040A49F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040A4A6                 mov     ebp, [esp+0ECh+arg_4]
.text:0040A4AD                 cmp     esi, 0FFFFFFFFh
.text:0040A4B0                 jz      loc_40A831
.text:0040A4B6                 cld
.text:0040A4B7                 xor     eax, eax
.text:0040A4B9                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040A4C0                 mov     ecx, 0Dh
.text:0040A4C5                 mov     edi, ebx
.text:0040A4C7                 rep stosd
.text:0040A4C9                 mov     dword ptr [ebp+18h], 1
.text:0040A4D0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040A4D3                 call    GetFileType
.text:0040A4D8                 sub     esp, 4
.text:0040A4DB                 xor     edx, edx
.text:0040A4DD                 cmp     eax, 2
.text:0040A4E0                 jz      loc_40A910
.text:0040A4E6                 cmp     eax, 3
.text:0040A4E9                 jz      loc_40A900
.text:0040A4EF
.text:0040A4EF loc_40A4EF:                             ; CODE XREF: sub_40A490+475↓j
.text:0040A4EF                                         ; sub_40A490+485↓j
.text:0040A4EF                 or      [ebp+0], edx
.text:0040A4F2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040A4F6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040A4F9                 call    GetFileInformationByHandle
.text:0040A4FE                 sub     esp, 8
.text:0040A501                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040A508                 test    ecx, ecx
.text:0040A50A                 jnz     short loc_40A540
.text:0040A50C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040A513                 test    edx, edx
.text:0040A515                 jnz     short loc_40A540
.text:0040A517                 mov     edx, [ebp+0]
.text:0040A51A                 and     edx, 0F000h
.text:0040A520                 cmp     edx, 1000h
.text:0040A526                 jz      loc_40A896
.text:0040A52C
.text:0040A52C loc_40A52C:                             ; CODE XREF: sub_40A490+459↓j
.text:0040A52C                                         ; sub_40A490+465↓j
.text:0040A52C                 test    ecx, ecx
.text:0040A52E                 jnz     short loc_40A540
.text:0040A530                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040A537                 test    edx, edx
.text:0040A539                 jz      loc_40A874
.text:0040A53F                 nop
.text:0040A540
.text:0040A540 loc_40A540:                             ; CODE XREF: sub_40A490+7A↑j
.text:0040A540                                         ; sub_40A490+85↑j ...
.text:0040A540                 cld
.text:0040A541                 mov     esi, ebx
.text:0040A543                 mov     dword ptr [ebp+14h], 0
.text:0040A54A                 lea     edi, [esp+0ECh+var_9C]
.text:0040A54E                 mov     ecx, 0Dh
.text:0040A553                 rep movsd
.text:0040A555                 xor     ebx, ebx
.text:0040A557                 xor     edi, edi
.text:0040A559                 mov     edx, [esp+0ECh+var_6C]
.text:0040A560                 mov     esi, [esp+0ECh+var_70]
.text:0040A564                 or      edx, ebx
.text:0040A566                 mov     ebx, [esp+0ECh+var_9C]
.text:0040A56A                 mov     [ebp+8], edx
.text:0040A56D                 or      edi, esi
.text:0040A56F                 xor     edx, edx
.text:0040A571                 mov     [ebp+0Ch], edi
.text:0040A574                 test    bl, 10h
.text:0040A577                 mov     esi, [esp+0ECh+var_80]
.text:0040A57B                 setz    dl
.text:0040A57E                 mov     [ebp+10h], esi
.text:0040A581                 dec     edx
.text:0040A582                 and     edx, 0FFFFC000h
.text:0040A588                 add     edx, 8000h
.text:0040A58E                 or      edx, 124h
.text:0040A594                 test    bl, 1
.text:0040A597                 movzx   eax, dx
.text:0040A59A                 jnz     short loc_40A5A1
.text:0040A59C                 or      eax, 92h
.text:0040A5A1
.text:0040A5A1 loc_40A5A1:                             ; CODE XREF: sub_40A490+10A↑j
.text:0040A5A1                 or      [ebp+0], eax
.text:0040A5A4                 xor     edx, edx
.text:0040A5A6                 mov     ebx, [esp+0ECh+var_7C]
.text:0040A5AA                 mov     ecx, [esp+0ECh+var_78]
.text:0040A5AE                 mov     eax, edx
.text:0040A5B0                 xor     esi, esi
.text:0040A5B2                 mov     edx, [esp+0ECh+var_8C]
.text:0040A5B6                 mov     edi, ebx
.text:0040A5B8                 or      eax, edi
.text:0040A5BA                 mov     [esp+0ECh+var_A8], eax
.text:0040A5BE                 mov     ebx, ecx
.text:0040A5C0                 mov     edi, [esp+0ECh+var_74]
.text:0040A5C4                 or      ebx, esi
.text:0040A5C6                 mov     esi, [esp+0ECh+var_A8]
.text:0040A5CA                 mov     [esp+0ECh+var_AC], ebx
.text:0040A5CE                 xor     ebx, ebx
.text:0040A5D0                 mov     ecx, [esp+0ECh+var_AC]
.text:0040A5D4                 mov     [ebp+34h], esi
.text:0040A5D7                 mov     esi, [esp+0ECh+var_90]
.text:0040A5DB                 mov     [ebp+18h], edi
.text:0040A5DE                 xor     edi, edi
.text:0040A5E0                 or      esi, ebx
.text:0040A5E2                 mov     [ebp+30h], ecx
.text:0040A5E5                 or      edi, edx
.text:0040A5E7                 mov     edx, esi
.text:0040A5E9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A5F1                 sub     edx, 0D53E8000h
.text:0040A5F7                 mov     ebx, edi
.text:0040A5F9                 sbb     ebx, 19DB1DEh
.text:0040A5FF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040A603                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A60B                 mov     [esp+0ECh+hFile], edx
.text:0040A60E                 call    sub_413030
.text:0040A613                 mov     ecx, eax
.text:0040A615                 shr     eax, 1Fh
.text:0040A618                 dec     eax
.text:0040A619                 and     ecx, eax
.text:0040A61B                 mov     [ebp+38h], ecx
.text:0040A61E                 mov     [esp+0ECh+hFile], esi
.text:0040A621                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040A625                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A62D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A635                 call    sub_412EB0
.text:0040A63A                 lea     ebx, [eax+eax*4]
.text:0040A63D                 xor     ecx, ecx
.text:0040A63F                 lea     esi, [ebx+ebx*4]
.text:0040A642                 shl     esi, 2
.text:0040A645                 mov     edi, esi
.text:0040A647                 shr     edi, 1Fh
.text:0040A64A                 dec     edi
.text:0040A64B                 and     edi, esi
.text:0040A64D                 mov     [ebp+3Ch], edi
.text:0040A650                 mov     esi, [esp+0ECh+var_98]
.text:0040A654                 xor     edi, edi
.text:0040A656                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A65E                 mov     edx, [esp+0ECh+var_94]
.text:0040A662                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A66A                 or      esi, ecx
.text:0040A66C                 or      edi, edx
.text:0040A66E                 mov     edx, esi
.text:0040A670                 mov     ecx, edi
.text:0040A672                 sub     edx, 0D53E8000h
.text:0040A678                 sbb     ecx, 19DB1DEh
.text:0040A67E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040A682                 mov     [esp+0ECh+hFile], edx
.text:0040A685                 call    sub_413030
.text:0040A68A                 mov     ebx, eax
.text:0040A68C                 shr     eax, 1Fh
.text:0040A68F                 dec     eax
.text:0040A690                 and     ebx, eax
.text:0040A692                 mov     [ebp+48h], ebx
.text:0040A695                 xor     ebx, ebx
.text:0040A697                 mov     [esp+0ECh+hFile], esi
.text:0040A69A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040A69E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A6A6                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A6AE                 call    sub_412EB0
.text:0040A6B3                 lea     ecx, [eax+eax*4]
.text:0040A6B6                 lea     esi, [ecx+ecx*4]
.text:0040A6B9                 shl     esi, 2
.text:0040A6BC                 mov     edi, esi
.text:0040A6BE                 shr     edi, 1Fh
.text:0040A6C1                 dec     edi
.text:0040A6C2                 and     edi, esi
.text:0040A6C4                 mov     [ebp+4Ch], edi
.text:0040A6C7                 mov     esi, [esp+0ECh+var_88]
.text:0040A6CB                 xor     edi, edi
.text:0040A6CD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A6D5                 mov     edx, [esp+0ECh+var_84]
.text:0040A6D9                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A6E1                 or      esi, ebx
.text:0040A6E3                 or      edi, edx
.text:0040A6E5                 mov     edx, esi
.text:0040A6E7                 mov     ebx, edi
.text:0040A6E9                 sub     edx, 0D53E8000h
.text:0040A6EF                 sbb     ebx, 19DB1DEh
.text:0040A6F5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040A6F9                 mov     [esp+0ECh+hFile], edx
.text:0040A6FC                 call    sub_413030
.text:0040A701                 mov     ecx, eax
.text:0040A703                 shr     eax, 1Fh
.text:0040A706                 dec     eax
.text:0040A707                 and     ecx, eax
.text:0040A709                 mov     [ebp+40h], ecx
.text:0040A70C                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040A710                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040A718                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040A720                 mov     [esp+0ECh+hFile], esi
.text:0040A723                 call    sub_412EB0
.text:0040A728                 mov     dword ptr [ebp+50h], 200h
.text:0040A72F                 lea     ebx, [eax+eax*4]
.text:0040A732                 mov     edi, [esp+0ECh+var_A8]
.text:0040A736                 lea     edx, [ebx+ebx*4]
.text:0040A739                 mov     eax, [esp+0ECh+var_AC]
.text:0040A73D                 shl     edx, 2
.text:0040A740                 mov     ecx, edx
.text:0040A742                 shr     ecx, 1Fh
.text:0040A745                 dec     ecx
.text:0040A746                 and     ecx, edx
.text:0040A748                 test    edi, edi
.text:0040A74A                 mov     edx, [esp+0ECh+var_A8]
.text:0040A74E                 mov     [ebp+44h], ecx
.text:0040A751                 js      loc_40A867
.text:0040A757
.text:0040A757 loc_40A757:                             ; CODE XREF: sub_40A490+3DF↓j
.text:0040A757                 mov     edi, [esp+0ECh+var_AC]
.text:0040A75B                 xor     esi, esi
.text:0040A75D                 mov     ecx, eax
.text:0040A75F                 shrd    ecx, edx, 9
.text:0040A763                 mov     ebx, edx
.text:0040A765                 mov     eax, esi
.text:0040A767                 and     edi, 1FFh
.text:0040A76D                 sar     ebx, 9
.text:0040A770                 or      eax, edi
.text:0040A772                 jz      short loc_40A77A
.text:0040A774                 add     ecx, 1
.text:0040A777                 adc     ebx, 0
.text:0040A77A
.text:0040A77A loc_40A77A:                             ; CODE XREF: sub_40A490+2E2↑j
.text:0040A77A                 mov     [ebp+5Ch], ebx
.text:0040A77D                 mov     esi, dword_414060
.text:0040A783                 xor     edi, edi
.text:0040A785                 mov     [ebp+58h], ecx
.text:0040A788                 mov     ebx, dword_414060
.text:0040A78E                 mov     ecx, [esp+0ECh+var_A8]
.text:0040A792                 mov     edx, [esp+0ECh+var_AC]
.text:0040A796                 mov     [ebp+50h], ebx
.text:0040A799                 shr     ebx, 9
.text:0040A79C                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040A7A0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040A7A4                 mov     [esp+0ECh+nBufferSize], esi
.text:0040A7A8                 mov     [esp+0ECh+hFile], edx
.text:0040A7AB                 call    sub_413030
.text:0040A7B0                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040A7B4                 mov     ecx, [esp+0ECh+var_AC]
.text:0040A7B8                 mov     edi, [esp+0ECh+var_A8]
.text:0040A7BC                 mov     [esp+0ECh+var_BC], ebx
.text:0040A7C0                 mov     [esp+0ECh+var_B4], eax
.text:0040A7C4                 mov     [esp+0ECh+var_B0], edx
.text:0040A7C8                 mov     [esp+0ECh+var_B8], 0
.text:0040A7D0                 mov     [esp+0ECh+nBufferSize], esi
.text:0040A7D4                 mov     [esp+0ECh+hFile], ecx
.text:0040A7D7                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040A7DB                 call    sub_412EB0
.text:0040A7E0                 mov     ebx, edx
.text:0040A7E2                 or      ebx, eax
.text:0040A7E4                 jz      short loc_40A840
.text:0040A7E6                 mov     edi, [esp+0ECh+var_B4]
.text:0040A7EA                 mov     esi, [esp+0ECh+var_B0]
.text:0040A7EE                 mov     eax, [esp+0ECh+var_BC]
.text:0040A7F2                 mov     [esp+0ECh+var_C4], edi
.text:0040A7F6                 mov     ecx, [esp+0ECh+var_B8]
.text:0040A7FA                 add     [esp+0ECh+var_C4], 1
.text:0040A7FF                 mov     [esp+0ECh+var_C0], esi
.text:0040A803                 adc     [esp+0ECh+var_C0], 0
.text:0040A808                 mul     [esp+0ECh+var_C4]
.text:0040A80C                 mov     edi, [esp+0ECh+var_C0]
.text:0040A810                 mov     ebx, edx
.text:0040A812                 mov     edx, [esp+0ECh+var_C4]
.text:0040A816                 mov     esi, eax
.text:0040A818                 mov     eax, ebx
.text:0040A81A                 imul    ecx, edx
.text:0040A81D                 mov     edx, [esp+0ECh+var_BC]
.text:0040A821                 imul    edx, edi
.text:0040A824                 add     eax, ecx
.text:0040A826                 lea     edi, [edx+eax]
.text:0040A829
.text:0040A829 loc_40A829:                             ; CODE XREF: sub_40A490+3D5↓j
.text:0040A829                 mov     [ebp+58h], esi
.text:0040A82C                 xor     eax, eax
.text:0040A82E                 mov     [ebp+5Ch], edi
.text:0040A831
.text:0040A831 loc_40A831:                             ; CODE XREF: sub_40A490+20↑j
.text:0040A831                 add     esp, 0DCh
.text:0040A837                 pop     ebx
.text:0040A838                 pop     esi
.text:0040A839                 pop     edi
.text:0040A83A                 pop     ebp
.text:0040A83B                 retn
.text:0040A83B ; ---------------------------------------------------------------------------
.text:0040A83C                 align 10h
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: sub_40A490+354↑j
.text:0040A840                 mov     eax, [esp+0ECh+var_B4]
.text:0040A844                 mov     edi, [esp+0ECh+var_B8]
.text:0040A848                 mov     ebx, [esp+0ECh+var_B4]
.text:0040A84C                 mul     [esp+0ECh+var_BC]
.text:0040A850                 mov     ecx, [esp+0ECh+var_BC]
.text:0040A854                 imul    ebx, edi
.text:0040A857                 mov     esi, eax
.text:0040A859                 mov     eax, [esp+0ECh+var_B0]
.text:0040A85D                 add     edx, ebx
.text:0040A85F                 imul    ecx, eax
.text:0040A862                 lea     edi, [ecx+edx]
.text:0040A865                 jmp     short loc_40A829
.text:0040A867 ; ---------------------------------------------------------------------------
.text:0040A867
.text:0040A867 loc_40A867:                             ; CODE XREF: sub_40A490+2C1↑j
.text:0040A867                 add     eax, 1FFh
.text:0040A86C                 adc     edx, 0
.text:0040A86F                 jmp     loc_40A757
.text:0040A874 ; ---------------------------------------------------------------------------
.text:0040A874
.text:0040A874 loc_40A874:                             ; CODE XREF: sub_40A490+A9↑j
.text:0040A874                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040A877                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040A87E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040A882                 call    GetFileSize
.text:0040A887                 sub     esp, 8
.text:0040A88A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040A891                 jmp     loc_40A540
.text:0040A896 ; ---------------------------------------------------------------------------
.text:0040A896
.text:0040A896 loc_40A896:                             ; CODE XREF: sub_40A490+96↑j
.text:0040A896                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040A89E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040A8A2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040A8AA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040A8AE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040A8B6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040A8BE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040A8C6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040A8C9                 call    PeekNamedPipe
.text:0040A8CE                 sub     esp, 18h
.text:0040A8D1                 test    eax, eax
.text:0040A8D3                 jz      short loc_40A8EE
.text:0040A8D5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040A8D9                 xor     eax, eax
.text:0040A8DB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040A8E2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040A8E9                 jmp     loc_40A52C
.text:0040A8EE ; ---------------------------------------------------------------------------
.text:0040A8EE
.text:0040A8EE loc_40A8EE:                             ; CODE XREF: sub_40A490+443↑j
.text:0040A8EE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040A8F5                 jmp     loc_40A52C
.text:0040A8F5 ; ---------------------------------------------------------------------------
.text:0040A8FA                 align 10h
.text:0040A900
.text:0040A900 loc_40A900:                             ; CODE XREF: sub_40A490+59↑j
.text:0040A900                 mov     edx, 1000h
.text:0040A905                 jmp     loc_40A4EF
.text:0040A905 ; ---------------------------------------------------------------------------
.text:0040A90A                 align 10h
.text:0040A910
.text:0040A910 loc_40A910:                             ; CODE XREF: sub_40A490+50↑j
.text:0040A910                 mov     edx, 2000h
.text:0040A915                 jmp     loc_40A4EF
.text:0040A915 sub_40A490      endp
.text:0040A915
.text:0040A915 ; ---------------------------------------------------------------------------
.text:0040A91A aLnk            db '.lnk',0             ; DATA XREF: sub_40A960+E0↓o
.text:0040A91A                                         ; .text:0040B00A↓o ...
.text:0040A91F ; const CHAR aKernel32[]
.text:0040A91F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40A960+12D↓o
.text:0040A91F                                         ; .text:0040B6BB↓o
.text:0040A928 ; const CHAR aGetcompressedf[]
.text:0040A928 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040A928                                         ; DATA XREF: sub_40A960+13E↓o
.text:0040A928                                         ; .text:0040B6CC↓o
.text:0040A93F ; const CHAR aGetbinarytypea[]
.text:0040A93F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40A960+333↓o
.text:0040A93F                                         ; .text:0040B066↓o ...
.text:0040A94E ; const char aPathext[]
.text:0040A94E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40A960:loc_40AD47↓o
.text:0040A94E                                         ; .text:loc_40B110↓o ...
.text:0040A956                 align 10h
.text:0040A960
.text:0040A960 ; =============== S U B R O U T I N E =======================================
.text:0040A960
.text:0040A960
.text:0040A960 ; int __cdecl sub_40A960(char *String1, int)
.text:0040A960 sub_40A960      proc near               ; CODE XREF: sub_40B740+3CD↓p
.text:0040A960                                         ; sub_40BCC0-9B↓p
.text:0040A960
.text:0040A960 Str             = dword ptr -6Ch
.text:0040A960 lpProcName      = dword ptr -68h
.text:0040A960 var_64          = dword ptr -64h
.text:0040A960 var_60          = dword ptr -60h
.text:0040A960 var_5C          = dword ptr -5Ch
.text:0040A960 var_4C          = dword ptr -4Ch
.text:0040A960 var_48          = dword ptr -48h
.text:0040A960 var_44          = dword ptr -44h
.text:0040A960 var_40          = dword ptr -40h
.text:0040A960 var_3C          = dword ptr -3Ch
.text:0040A960 var_38          = dword ptr -38h
.text:0040A960 lpRootPathName  = dword ptr -30h
.text:0040A960 var_2C          = byte ptr -2Ch
.text:0040A960 var_28          = dword ptr -28h
.text:0040A960 var_24          = dword ptr -24h
.text:0040A960 var_20          = dword ptr -20h
.text:0040A960 var_1C          = dword ptr -1Ch
.text:0040A960 var_18          = byte ptr -18h
.text:0040A960 String1         = dword ptr  4
.text:0040A960 arg_4           = dword ptr  8
.text:0040A960
.text:0040A960                 push    ebp
.text:0040A961                 push    edi
.text:0040A962                 push    esi
.text:0040A963                 push    ebx
.text:0040A964                 sub     esp, 5Ch
.text:0040A967                 mov     edx, [esp+6Ch+String1]
.text:0040A96B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040A96E                 call    sub_40C780
.text:0040A973                 mov     [esp+6Ch+Str], eax
.text:0040A976                 call    sub_40C160
.text:0040A97B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040A97F                 test    eax, eax
.text:0040A981                 jz      loc_40ABB3
.text:0040A987                 mov     [esp+6Ch+Str], eax ; Str
.text:0040A98A                 call    strlen
.text:0040A98F                 mov     edx, [esp+6Ch+arg_4]
.text:0040A993                 mov     ebx, eax
.text:0040A995                 mov     esi, [edx+0Ch]
.text:0040A998                 mov     edi, [edx+8]
.text:0040A99B                 mov     eax, esi
.text:0040A99D                 or      eax, edi
.text:0040A99F                 jz      loc_40ADC0
.text:0040A9A5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040A9A9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040A9AC                 call    GetDriveTypeA
.text:0040A9B1                 sub     esp, 4
.text:0040A9B4                 cmp     eax, 4
.text:0040A9B7                 jz      loc_40ADC0
.text:0040A9BD
.text:0040A9BD loc_40A9BD:                             ; CODE XREF: sub_40A960+48A↓j
.text:0040A9BD                                         ; sub_40A960+4B2↓j
.text:0040A9BD                 mov     edx, [esp+6Ch+arg_4]
.text:0040A9C1                 mov     esi, [edx+14h]
.text:0040A9C4                 mov     edi, [edx+10h]
.text:0040A9C7                 mov     ecx, esi
.text:0040A9C9                 or      ecx, edi
.text:0040A9CB                 jnz     short loc_40A9F5
.text:0040A9CD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040A9D1                 xor     esi, esi
.text:0040A9D3                 xor     edi, edi
.text:0040A9D5                 test    ebp, ebp
.text:0040A9D7                 jz      short loc_40A9E7
.text:0040A9D9                 movzx   ebx, byte ptr [ebp+0]
.text:0040A9DD                 test    bl, bl
.text:0040A9DF                 mov     cl, bl
.text:0040A9E1                 jnz     loc_40AD71
.text:0040A9E7
.text:0040A9E7 loc_40A9E7:                             ; CODE XREF: sub_40A960+77↑j
.text:0040A9E7                 xor     eax, eax
.text:0040A9E9                 xor     edx, edx
.text:0040A9EB
.text:0040A9EB loc_40A9EB:                             ; CODE XREF: sub_40A960+458↓j
.text:0040A9EB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040A9EF                 mov     [ebp+10h], eax
.text:0040A9F2                 mov     [ebp+14h], edx
.text:0040A9F5
.text:0040A9F5 loc_40A9F5:                             ; CODE XREF: sub_40A960+6B↑j
.text:0040A9F5                 mov     edi, [esp+6Ch+String1]
.text:0040A9F9                 xor     ebx, ebx
.text:0040A9FB                 test    edi, edi
.text:0040A9FD                 jz      loc_40AC73
.text:0040AA03                 mov     esi, [esp+6Ch+String1]
.text:0040AA07                 cmp     byte ptr [esi], 0
.text:0040AA0A                 jnz     loc_40AC80
.text:0040AA10
.text:0040AA10 loc_40AA10:                             ; CODE XREF: sub_40A960+38C↓j
.text:0040AA10                                         ; sub_40A960+397↓j
.text:0040AA10                 mov     ebp, [esp+6Ch+String1]
.text:0040AA14                 test    ebp, ebp
.text:0040AA16                 jz      loc_40AC73
.text:0040AA1C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040AA24                 mov     edi, [esp+6Ch+String1]
.text:0040AA28                 mov     [esp+6Ch+Str], edi ; Str
.text:0040AA2B                 call    strrchr
.text:0040AA30                 test    eax, eax
.text:0040AA32                 jz      loc_40AC73
.text:0040AA38                 cld
.text:0040AA39                 mov     ecx, 5
.text:0040AA3E                 mov     esi, eax
.text:0040AA40                 mov     edi, offset aLnk ; ".lnk"
.text:0040AA45                 repe cmpsb
.text:0040AA47                 setz    cl
.text:0040AA4A                 movzx   eax, cl
.text:0040AA4D                 lea     esi, [esi+0]
.text:0040AA50
.text:0040AA50 loc_40AA50:                             ; CODE XREF: sub_40A960+315↓j
.text:0040AA50                 test    eax, eax
.text:0040AA52                 jz      short loc_40AA5A
.text:0040AA54                 or      ebx, 0A000h
.text:0040AA5A
.text:0040AA5A loc_40AA5A:                             ; CODE XREF: sub_40A960+F2↑j
.text:0040AA5A                 mov     esi, [esp+6Ch+arg_4]
.text:0040AA5E                 xor     ecx, ecx
.text:0040AA60                 mov     edi, ds:dword_4151B0
.text:0040AA66                 or      [esi], ebx
.text:0040AA68                 mov     ebx, [esi+14h]
.text:0040AA6B                 mov     ebp, [esi+10h]
.text:0040AA6E                 mov     eax, ebx
.text:0040AA70                 xor     eax, ecx
.text:0040AA72                 xor     ebp, edi
.text:0040AA74                 or      eax, ebp
.text:0040AA76                 jnz     loc_40AC00
.text:0040AA7C
.text:0040AA7C loc_40AA7C:                             ; CODE XREF: sub_40A960+30E↓j
.text:0040AA7C                 mov     ecx, dword_414060
.text:0040AA82                 xor     esi, esi
.text:0040AA84                 xor     edi, edi
.text:0040AA86                 mov     edx, [esp+6Ch+arg_4]
.text:0040AA8A                 mov     [edx+50h], ecx
.text:0040AA8D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040AA94                 call    LoadLibraryA
.text:0040AA99                 sub     esp, 4
.text:0040AA9C                 mov     ebp, eax
.text:0040AA9E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040AAA6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040AAA9                 call    GetProcAddress
.text:0040AAAE                 sub     esp, 8
.text:0040AAB1                 test    eax, eax
.text:0040AAB3                 jz      short loc_40AAE8
.text:0040AAB5                 mov     ebx, [esp+6Ch+String1]
.text:0040AAB9                 lea     esi, [esp+6Ch+var_2C]
.text:0040AABD                 mov     [esp+6Ch+lpProcName], esi
.text:0040AAC1                 mov     [esp+6Ch+Str], ebx
.text:0040AAC4                 call    eax
.text:0040AAC6                 sub     esp, 8
.text:0040AAC9                 mov     ebx, eax
.text:0040AACB                 cmp     eax, 0FFFFFFFFh
.text:0040AACE                 jz      loc_40ABE9
.text:0040AAD4
.text:0040AAD4 loc_40AAD4:                             ; CODE XREF: sub_40A960+29A↓j
.text:0040AAD4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040AAD8                 mov     ecx, ebx
.text:0040AADA                 xor     edi, edi
.text:0040AADC                 xor     ebx, ebx
.text:0040AADE                 mov     edx, esi
.text:0040AAE0                 mov     esi, ecx
.text:0040AAE2                 or      esi, edi
.text:0040AAE4                 mov     edi, ebx
.text:0040AAE6                 or      edi, edx
.text:0040AAE8
.text:0040AAE8 loc_40AAE8:                             ; CODE XREF: sub_40A960+153↑j
.text:0040AAE8                                         ; sub_40A960+294↓j
.text:0040AAE8                 test    ebp, ebp
.text:0040AAEA                 jz      short loc_40AAF7
.text:0040AAEC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040AAEF                 call    FreeLibrary
.text:0040AAF4                 sub     esp, 4
.text:0040AAF7
.text:0040AAF7 loc_40AAF7:                             ; CODE XREF: sub_40A960+18A↑j
.text:0040AAF7                 mov     ebp, edi
.text:0040AAF9                 mov     edx, ebp
.text:0040AAFB                 mov     edi, esi
.text:0040AAFD                 or      edx, esi
.text:0040AAFF                 jnz     short loc_40AB0B
.text:0040AB01                 mov     eax, [esp+6Ch+arg_4]
.text:0040AB05                 mov     edi, [eax+30h]
.text:0040AB08                 mov     ebp, [eax+34h]
.text:0040AB0B
.text:0040AB0B loc_40AB0B:                             ; CODE XREF: sub_40A960+19F↑j
.text:0040AB0B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040AB0F                 mov     ebx, dword_414060
.text:0040AB15                 xor     esi, esi
.text:0040AB17                 mov     [esp+6Ch+var_60], esi
.text:0040AB1B                 mov     [esp+6Ch+Str], edi
.text:0040AB1E                 mov     [esp+6Ch+var_64], ebx
.text:0040AB22                 call    sub_413030
.text:0040AB27                 mov     [esp+6Ch+var_3C], eax
.text:0040AB2B                 mov     ecx, dword_414060
.text:0040AB31                 mov     [esp+6Ch+lpProcName], ebp
.text:0040AB35                 mov     [esp+6Ch+var_38], edx
.text:0040AB39                 shr     ecx, 9
.text:0040AB3C                 mov     [esp+6Ch+var_44], ecx
.text:0040AB40                 mov     [esp+6Ch+var_40], 0
.text:0040AB48                 mov     [esp+6Ch+var_64], ebx
.text:0040AB4C                 mov     [esp+6Ch+var_60], esi
.text:0040AB50                 mov     [esp+6Ch+Str], edi
.text:0040AB53                 call    sub_412EB0
.text:0040AB58                 mov     ebp, edx
.text:0040AB5A                 or      ebp, eax
.text:0040AB5C                 jz      short loc_40ABC0
.text:0040AB5E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040AB62                 mov     esi, [esp+6Ch+var_38]
.text:0040AB66                 mov     eax, [esp+6Ch+var_44]
.text:0040AB6A                 mov     [esp+6Ch+var_4C], ebp
.text:0040AB6E                 mov     ecx, [esp+6Ch+var_40]
.text:0040AB72                 mov     ebx, [esp+6Ch+var_44]
.text:0040AB76                 add     [esp+6Ch+var_4C], 1
.text:0040AB7B                 mov     [esp+6Ch+var_48], esi
.text:0040AB7F                 mov     edi, [esp+6Ch+var_4C]
.text:0040AB83                 adc     [esp+6Ch+var_48], 0
.text:0040AB88                 mul     [esp+6Ch+var_4C]
.text:0040AB8C                 imul    ecx, edi
.text:0040AB8F                 mov     esi, eax
.text:0040AB91                 mov     eax, [esp+6Ch+var_48]
.text:0040AB95                 add     edx, ecx
.text:0040AB97                 imul    ebx, eax
.text:0040AB9A                 lea     edi, [ebx+edx]
.text:0040AB9D
.text:0040AB9D loc_40AB9D:                             ; CODE XREF: sub_40A960+287↓j
.text:0040AB9D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040ABA1                 mov     [ebx+58h], esi
.text:0040ABA4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040ABA8                 mov     [ebx+5Ch], edi
.text:0040ABAB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040ABAE                 call    free
.text:0040ABB3
.text:0040ABB3 loc_40ABB3:                             ; CODE XREF: sub_40A960+21↑j
.text:0040ABB3                 add     esp, 5Ch
.text:0040ABB6                 xor     eax, eax
.text:0040ABB8                 pop     ebx
.text:0040ABB9                 pop     esi
.text:0040ABBA                 pop     edi
.text:0040ABBB                 pop     ebp
.text:0040ABBC                 retn
.text:0040ABBC ; ---------------------------------------------------------------------------
.text:0040ABBD                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: sub_40A960+1FC↑j
.text:0040ABC0                 mov     eax, [esp+6Ch+var_3C]
.text:0040ABC4                 mov     edi, [esp+6Ch+var_40]
.text:0040ABC8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040ABCC                 mul     [esp+6Ch+var_44]
.text:0040ABD0                 mov     ebx, [esp+6Ch+var_44]
.text:0040ABD4                 imul    ecx, edi
.text:0040ABD7                 mov     ebp, edx
.text:0040ABD9                 mov     esi, eax
.text:0040ABDB                 mov     edx, [esp+6Ch+var_38]
.text:0040ABDF                 add     ebp, ecx
.text:0040ABE1                 imul    ebx, edx
.text:0040ABE4                 lea     edi, [ebx+ebp]
.text:0040ABE7                 jmp     short loc_40AB9D
.text:0040ABE9 ; ---------------------------------------------------------------------------
.text:0040ABE9
.text:0040ABE9 loc_40ABE9:                             ; CODE XREF: sub_40A960+16E↑j
.text:0040ABE9                 call    GetLastError
.text:0040ABEE                 xor     esi, esi
.text:0040ABF0                 xor     edi, edi
.text:0040ABF2                 test    eax, eax
.text:0040ABF4                 jnz     loc_40AAE8
.text:0040ABFA                 jmp     loc_40AAD4
.text:0040ABFA ; ---------------------------------------------------------------------------
.text:0040ABFF                 align 10h
.text:0040AC00
.text:0040AC00 loc_40AC00:                             ; CODE XREF: sub_40A960+116↑j
.text:0040AC00                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040AC04                 lea     ecx, [esp+6Ch+var_20]
.text:0040AC08                 lea     ebx, [esp+6Ch+var_1C]
.text:0040AC0C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040AC10                 lea     edi, [esp+6Ch+var_24]
.text:0040AC14                 lea     ebp, [esp+6Ch+var_28]
.text:0040AC18                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040AC1C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040AC20                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040AC24                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040AC27                 call    sub_40D1D0
.text:0040AC2C                 test    eax, eax
.text:0040AC2E                 jnz     short loc_40AC50
.text:0040AC30                 mov     [esp+6Ch+var_28], 1
.text:0040AC38                 mov     [esp+6Ch+var_24], 200h
.text:0040AC40                 mov     [esp+6Ch+var_20], 0
.text:0040AC48                 mov     [esp+6Ch+var_1C], 0
.text:0040AC50
.text:0040AC50 loc_40AC50:                             ; CODE XREF: sub_40A960+2CE↑j
.text:0040AC50                 mov     ebp, [esp+6Ch+var_24]
.text:0040AC54                 mov     edi, [esp+6Ch+var_28]
.text:0040AC58                 mov     eax, [esp+6Ch+arg_4]
.text:0040AC5C                 imul    ebp, edi
.text:0040AC5F                 mov     esi, [eax+10h]
.text:0040AC62                 mov     dword_414060, ebp
.text:0040AC68                 mov     ds:dword_4151B0, esi
.text:0040AC6E                 jmp     loc_40AA7C
.text:0040AC73 ; ---------------------------------------------------------------------------
.text:0040AC73
.text:0040AC73 loc_40AC73:                             ; CODE XREF: sub_40A960+9D↑j
.text:0040AC73                                         ; sub_40A960+B6↑j ...
.text:0040AC73                 xor     eax, eax
.text:0040AC75                 jmp     loc_40AA50
.text:0040AC75 ; ---------------------------------------------------------------------------
.text:0040AC7A                 align 10h
.text:0040AC80
.text:0040AC80 loc_40AC80:                             ; CODE XREF: sub_40A960+AA↑j
.text:0040AC80                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040AC87                 xor     ebp, ebp
.text:0040AC89                 call    GetModuleHandleA
.text:0040AC8E                 sub     esp, 4
.text:0040AC91                 mov     edi, eax
.text:0040AC93                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040AC9B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040AC9E                 call    GetProcAddress
.text:0040ACA3                 sub     esp, 8
.text:0040ACA6                 mov     edx, eax
.text:0040ACA8                 test    eax, eax
.text:0040ACAA                 jz      short loc_40ACC4
.text:0040ACAC                 mov     eax, [esp+6Ch+String1]
.text:0040ACB0                 lea     ecx, [esp+6Ch+var_18]
.text:0040ACB4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040ACB8                 mov     [esp+6Ch+Str], eax
.text:0040ACBB                 call    edx
.text:0040ACBD                 sub     esp, 8
.text:0040ACC0                 test    eax, eax
.text:0040ACC2                 jnz     short loc_40AD28
.text:0040ACC4
.text:0040ACC4 loc_40ACC4:                             ; CODE XREF: sub_40A960+34A↑j
.text:0040ACC4                 mov     edx, ds:Str
.text:0040ACCA                 test    edx, edx
.text:0040ACCC                 jz      short loc_40AD47
.text:0040ACCE
.text:0040ACCE loc_40ACCE:                             ; CODE XREF: sub_40A960+3FA↓j
.text:0040ACCE                                         ; sub_40A960+40C↓j
.text:0040ACCE                 mov     eax, [esp+6Ch+String1]
.text:0040ACD2                 test    eax, eax
.text:0040ACD4                 jz      short loc_40ACDF
.text:0040ACD6                 mov     esi, [esp+6Ch+String1]
.text:0040ACDA                 cmp     byte ptr [esi], 0
.text:0040ACDD                 jnz     short loc_40ACFC
.text:0040ACDF
.text:0040ACDF loc_40ACDF:                             ; CODE XREF: sub_40A960+374↑j
.text:0040ACDF                                         ; sub_40A960+3B0↓j ...
.text:0040ACDF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040ACE2                 call    FreeLibrary
.text:0040ACE7                 sub     esp, 4
.text:0040ACEA                 test    ebp, ebp
.text:0040ACEC                 jz      loc_40AA10
.text:0040ACF2                 mov     ebx, 49h ; 'I'
.text:0040ACF7                 jmp     loc_40AA10
.text:0040ACFC ; ---------------------------------------------------------------------------
.text:0040ACFC
.text:0040ACFC loc_40ACFC:                             ; CODE XREF: sub_40A960+37D↑j
.text:0040ACFC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040ACFF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040AD07                 call    strrchr
.text:0040AD0C                 test    eax, eax
.text:0040AD0E                 mov     esi, eax
.text:0040AD10                 jz      short loc_40ACDF
.text:0040AD12                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040AD16                 mov     ecx, ds:Str
.text:0040AD1C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040AD1F                 call    strstr
.text:0040AD24                 test    eax, eax
.text:0040AD26                 jz      short loc_40AD2F
.text:0040AD28
.text:0040AD28 loc_40AD28:                             ; CODE XREF: sub_40A960+362↑j
.text:0040AD28                                         ; sub_40A960+3E5↓j
.text:0040AD28                 mov     ebp, 1
.text:0040AD2D                 jmp     short loc_40ACDF
.text:0040AD2F ; ---------------------------------------------------------------------------
.text:0040AD2F
.text:0040AD2F loc_40AD2F:                             ; CODE XREF: sub_40A960+3C6↑j
.text:0040AD2F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040AD33                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040AD39                 mov     [esp+6Ch+Str], edx ; Str
.text:0040AD3C                 call    strstr
.text:0040AD41                 test    eax, eax
.text:0040AD43                 jz      short loc_40ACDF
.text:0040AD45                 jmp     short loc_40AD28
.text:0040AD47 ; ---------------------------------------------------------------------------
.text:0040AD47
.text:0040AD47 loc_40AD47:                             ; CODE XREF: sub_40A960+36C↑j
.text:0040AD47                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040AD4E                 call    getenv
.text:0040AD53                 mov     ds:Str, eax
.text:0040AD58                 test    eax, eax
.text:0040AD5A                 jnz     loc_40ACCE
.text:0040AD60                 mov     esi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040AD66                 mov     ds:Str, esi
.text:0040AD6C                 jmp     loc_40ACCE
.text:0040AD71 ; ---------------------------------------------------------------------------
.text:0040AD71
.text:0040AD71 loc_40AD71:                             ; CODE XREF: sub_40A960+81↑j
.text:0040AD71                                         ; sub_40A960+452↓j
.text:0040AD71                 shld    edi, esi, 8
.text:0040AD75                 movsx   eax, cl
.text:0040AD78                 shl     esi, 8
.text:0040AD7B                 cdq
.text:0040AD7C                 add     esi, eax
.text:0040AD7E                 adc     edi, edx
.text:0040AD80                 mov     edx, edi
.text:0040AD82                 xor     ebx, ebx
.text:0040AD84                 and     edx, 0FF000000h
.text:0040AD8A                 mov     eax, edx
.text:0040AD8C                 or      eax, ebx
.text:0040AD8E                 jz      short loc_40ADA9
.text:0040AD90                 mov     ecx, edx
.text:0040AD92                 xor     eax, eax
.text:0040AD94                 shr     ecx, 10h
.text:0040AD97                 mov     edx, esi
.text:0040AD99                 xor     edx, ecx
.text:0040AD9B                 mov     ecx, edi
.text:0040AD9D                 xor     ecx, eax
.text:0040AD9F                 mov     esi, edx
.text:0040ADA1                 mov     edi, ecx
.text:0040ADA3                 and     edi, 0FFFFFFh
.text:0040ADA9
.text:0040ADA9 loc_40ADA9:                             ; CODE XREF: sub_40A960+42E↑j
.text:0040ADA9                 inc     ebp
.text:0040ADAA                 movzx   ebx, byte ptr [ebp+0]
.text:0040ADAE                 test    bl, bl
.text:0040ADB0                 mov     cl, bl
.text:0040ADB2                 jnz     short loc_40AD71
.text:0040ADB4                 mov     eax, esi
.text:0040ADB6                 mov     edx, edi
.text:0040ADB8                 jmp     loc_40A9EB
.text:0040ADB8 ; ---------------------------------------------------------------------------
.text:0040ADBD                 align 10h
.text:0040ADC0
.text:0040ADC0 loc_40ADC0:                             ; CODE XREF: sub_40A960+3F↑j
.text:0040ADC0                                         ; sub_40A960+57↑j
.text:0040ADC0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040ADC4                 mov     ebp, [esp+6Ch+String1]
.text:0040ADC8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040ADCC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040ADCF                 call    _stricmp
.text:0040ADD4                 test    eax, eax
.text:0040ADD6                 jnz     short loc_40ADF0
.text:0040ADD8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040ADDC                 mov     dword ptr [ebx+8], 5
.text:0040ADE3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040ADEA                 jmp     loc_40A9BD
.text:0040ADEA ; ---------------------------------------------------------------------------
.text:0040ADEF                 align 10h
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: sub_40A960+476↑j
.text:0040ADF0                 mov     ebp, [esp+6Ch+String1]
.text:0040ADF4                 xor     esi, esi
.text:0040ADF6                 xor     edi, edi
.text:0040ADF8                 add     ebp, ebx
.text:0040ADFA                 jz      short loc_40AE04
.text:0040ADFC                 movzx   ecx, byte ptr [ebp+0]
.text:0040AE00                 test    cl, cl
.text:0040AE02                 jnz     short loc_40AE17
.text:0040AE04
.text:0040AE04 loc_40AE04:                             ; CODE XREF: sub_40A960+49A↑j
.text:0040AE04                 xor     eax, eax
.text:0040AE06                 xor     edx, edx
.text:0040AE08
.text:0040AE08 loc_40AE08:                             ; CODE XREF: sub_40A960+4FE↓j
.text:0040AE08                 mov     ebp, [esp+6Ch+arg_4]
.text:0040AE0C                 mov     [ebp+8], eax
.text:0040AE0F                 mov     [ebp+0Ch], edx
.text:0040AE12                 jmp     loc_40A9BD
.text:0040AE17 ; ---------------------------------------------------------------------------
.text:0040AE17
.text:0040AE17 loc_40AE17:                             ; CODE XREF: sub_40A960+4A2↑j
.text:0040AE17                                         ; sub_40A960+4F8↓j
.text:0040AE17                 shld    edi, esi, 8
.text:0040AE1B                 movsx   eax, cl
.text:0040AE1E                 shl     esi, 8
.text:0040AE21                 cdq
.text:0040AE22                 add     esi, eax
.text:0040AE24                 adc     edi, edx
.text:0040AE26                 mov     edx, edi
.text:0040AE28                 xor     ebx, ebx
.text:0040AE2A                 and     edx, 0FF000000h
.text:0040AE30                 mov     eax, edx
.text:0040AE32                 or      eax, ebx
.text:0040AE34                 jz      short loc_40AE4F
.text:0040AE36                 mov     ecx, edx
.text:0040AE38                 xor     eax, eax
.text:0040AE3A                 shr     ecx, 10h
.text:0040AE3D                 mov     edx, esi
.text:0040AE3F                 xor     edx, ecx
.text:0040AE41                 mov     ecx, edi
.text:0040AE43                 xor     ecx, eax
.text:0040AE45                 mov     esi, edx
.text:0040AE47                 mov     edi, ecx
.text:0040AE49                 and     edi, 0FFFFFFh
.text:0040AE4F
.text:0040AE4F loc_40AE4F:                             ; CODE XREF: sub_40A960+4D4↑j
.text:0040AE4F                 inc     ebp
.text:0040AE50                 movzx   ebx, byte ptr [ebp+0]
.text:0040AE54                 test    bl, bl
.text:0040AE56                 mov     cl, bl
.text:0040AE58                 jnz     short loc_40AE17
.text:0040AE5A                 mov     eax, esi
.text:0040AE5C                 mov     edx, edi
.text:0040AE5E                 jmp     short loc_40AE08
.text:0040AE5E sub_40A960      endp
.text:0040AE5E
.text:0040AE60
.text:0040AE60 ; =============== S U B R O U T I N E =======================================
.text:0040AE60
.text:0040AE60
.text:0040AE60 ; int __cdecl sub_40AE60(LPCSTR)
.text:0040AE60 sub_40AE60      proc near               ; CODE XREF: sub_40C8A0+CA↓p
.text:0040AE60
.text:0040AE60 lpRootPathName  = dword ptr -83Ch
.text:0040AE60 lpVolumeNameBuffer= dword ptr -838h
.text:0040AE60 nVolumeNameSize = dword ptr -834h
.text:0040AE60 lpVolumeSerialNumber= dword ptr -830h
.text:0040AE60 lpMaximumComponentLength= dword ptr -82Ch
.text:0040AE60 lpFileSystemFlags= dword ptr -828h
.text:0040AE60 lpFileSystemNameBuffer= dword ptr -824h
.text:0040AE60 nFileSystemNameSize= dword ptr -820h
.text:0040AE60 VolumeSerialNumber= dword ptr -818h
.text:0040AE60 MaximumComponentLength= dword ptr -814h
.text:0040AE60 FileSystemFlags = dword ptr -810h
.text:0040AE60 FileSystemNameBuffer= byte ptr -80Ch
.text:0040AE60 VolumeNameBuffer= byte ptr -40Ch
.text:0040AE60 var_4           = dword ptr -4
.text:0040AE60 arg_0           = dword ptr  4
.text:0040AE60
.text:0040AE60                 sub     esp, 83Ch
.text:0040AE66                 mov     [esp+83Ch+var_4], ebx
.text:0040AE6D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040AE74                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040AE77                 call    sub_40C780
.text:0040AE7C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040AE7F                 call    sub_40C160
.text:0040AE84                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040AE87                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040AE8B                 mov     ebx, eax
.text:0040AE8D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040AE91                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040AE95                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040AE99                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040AE9D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040AEA1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040AEA5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040AEAC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040AEB0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040AEB4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040AEBC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040AEC4                 call    GetVolumeInformationA
.text:0040AEC9                 sub     esp, 20h
.text:0040AECC                 test    eax, eax
.text:0040AECE                 setz    cl
.text:0040AED1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040AED4                 movzx   edx, cl
.text:0040AED7                 dec     edx
.text:0040AED8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040AEDC                 call    free
.text:0040AEE1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040AEE5                 mov     ebx, [esp+83Ch+var_4]
.text:0040AEEC                 add     esp, 83Ch
.text:0040AEF2                 retn
.text:0040AEF2 sub_40AE60      endp
.text:0040AEF2
.text:0040AEF2 ; ---------------------------------------------------------------------------
.text:0040AEF3                 align 10h
.text:0040AF00                 push    ebp
.text:0040AF01                 push    edi
.text:0040AF02                 xor     edi, edi
.text:0040AF04                 push    esi
.text:0040AF05                 xor     esi, esi
.text:0040AF07                 push    ebx
.text:0040AF08                 mov     ebp, [esp+14h]
.text:0040AF0C                 test    ebp, ebp
.text:0040AF0E                 jz      short loc_40AF18
.text:0040AF10                 movzx   ecx, byte ptr [ebp+0]
.text:0040AF14                 test    cl, cl
.text:0040AF16                 jnz     short loc_40AF21
.text:0040AF18
.text:0040AF18 loc_40AF18:                             ; CODE XREF: .text:0040AF0E↑j
.text:0040AF18                 xor     eax, eax
.text:0040AF1A                 xor     edx, edx
.text:0040AF1C
.text:0040AF1C loc_40AF1C:                             ; CODE XREF: .text:0040AF68↓j
.text:0040AF1C                 pop     ebx
.text:0040AF1D                 pop     esi
.text:0040AF1E                 pop     edi
.text:0040AF1F                 pop     ebp
.text:0040AF20                 retn
.text:0040AF21 ; ---------------------------------------------------------------------------
.text:0040AF21
.text:0040AF21 loc_40AF21:                             ; CODE XREF: .text:0040AF16↑j
.text:0040AF21                                         ; .text:0040AF62↓j
.text:0040AF21                 shld    edi, esi, 8
.text:0040AF25                 movsx   eax, cl
.text:0040AF28                 shl     esi, 8
.text:0040AF2B                 cdq
.text:0040AF2C                 add     esi, eax
.text:0040AF2E                 adc     edi, edx
.text:0040AF30                 mov     edx, edi
.text:0040AF32                 xor     ebx, ebx
.text:0040AF34                 and     edx, 0FF000000h
.text:0040AF3A                 mov     eax, edx
.text:0040AF3C                 or      eax, ebx
.text:0040AF3E                 jz      short loc_40AF59
.text:0040AF40                 mov     ecx, edx
.text:0040AF42                 xor     eax, eax
.text:0040AF44                 shr     ecx, 10h
.text:0040AF47                 mov     edx, esi
.text:0040AF49                 xor     edx, ecx
.text:0040AF4B                 mov     ecx, edi
.text:0040AF4D                 xor     ecx, eax
.text:0040AF4F                 mov     esi, edx
.text:0040AF51                 mov     edi, ecx
.text:0040AF53                 and     edi, 0FFFFFFh
.text:0040AF59
.text:0040AF59 loc_40AF59:                             ; CODE XREF: .text:0040AF3E↑j
.text:0040AF59                 inc     ebp
.text:0040AF5A                 movzx   ebx, byte ptr [ebp+0]
.text:0040AF5E                 test    bl, bl
.text:0040AF60                 mov     cl, bl
.text:0040AF62                 jnz     short loc_40AF21
.text:0040AF64                 mov     eax, esi
.text:0040AF66                 mov     edx, edi
.text:0040AF68                 jmp     short loc_40AF1C
.text:0040AF68 ; ---------------------------------------------------------------------------
.text:0040AF6A                 align 10h
.text:0040AF70                 sub     esp, 2Ch
.text:0040AF73                 lea     edx, [esp+24h]
.text:0040AF77                 lea     ecx, [esp+28h]
.text:0040AF7B                 mov     [esp+0Ch], edx
.text:0040AF7F                 lea     edx, [esp+1Ch]
.text:0040AF83                 mov     [esp+4], edx
.text:0040AF87                 mov     edx, [esp+30h]
.text:0040AF8B                 mov     [esp+10h], ecx
.text:0040AF8F                 lea     ecx, [esp+20h]
.text:0040AF93                 mov     [esp+8], ecx
.text:0040AF97                 mov     [esp], edx
.text:0040AF9A                 call    sub_40D1D0
.text:0040AF9F                 test    eax, eax
.text:0040AFA1                 jnz     short loc_40AFC3
.text:0040AFA3                 mov     dword ptr [esp+1Ch], 1
.text:0040AFAB                 mov     dword ptr [esp+20h], 200h
.text:0040AFB3                 mov     dword ptr [esp+24h], 0
.text:0040AFBB                 mov     dword ptr [esp+28h], 0
.text:0040AFC3
.text:0040AFC3 loc_40AFC3:                             ; CODE XREF: .text:0040AFA1↑j
.text:0040AFC3                 mov     eax, [esp+20h]
.text:0040AFC7                 mov     ecx, [esp+1Ch]
.text:0040AFCB                 add     esp, 2Ch
.text:0040AFCE                 imul    eax, ecx
.text:0040AFD1                 retn
.text:0040AFD1 ; ---------------------------------------------------------------------------
.text:0040AFD2                 align 10h
.text:0040AFE0                 sub     esp, 1Ch
.text:0040AFE3                 mov     eax, [esp+20h]
.text:0040AFE7                 mov     [esp+14h], esi
.text:0040AFEB                 mov     [esp+18h], edi
.text:0040AFEF                 test    eax, eax
.text:0040AFF1                 jz      short loc_40B030
.text:0040AFF3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040AFFB                 mov     [esp], eax
.text:0040AFFE                 call    strrchr
.text:0040B003                 test    eax, eax
.text:0040B005                 jz      short loc_40B030
.text:0040B007                 cld
.text:0040B008                 mov     esi, eax
.text:0040B00A                 mov     edi, offset aLnk ; ".lnk"
.text:0040B00F                 mov     ecx, 5
.text:0040B014                 repe cmpsb
.text:0040B016                 setz    dl
.text:0040B019                 movzx   eax, dl
.text:0040B01C                 lea     esi, [esi+0]
.text:0040B020
.text:0040B020 loc_40B020:                             ; CODE XREF: .text:0040B032↓j
.text:0040B020                 mov     esi, [esp+14h]
.text:0040B024                 mov     edi, [esp+18h]
.text:0040B028                 add     esp, 1Ch
.text:0040B02B                 retn
.text:0040B02B ; ---------------------------------------------------------------------------
.text:0040B02C                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: .text:0040AFF1↑j
.text:0040B030                                         ; .text:0040B005↑j
.text:0040B030                 xor     eax, eax
.text:0040B032                 jmp     short loc_40B020
.text:0040B032 ; ---------------------------------------------------------------------------
.text:0040B034                 align 10h
.text:0040B040                 sub     esp, 1Ch
.text:0040B043                 mov     [esp+10h], ebx
.text:0040B047                 mov     ebx, [esp+20h]
.text:0040B04B                 mov     [esp+14h], esi
.text:0040B04F                 mov     [esp+18h], edi
.text:0040B053                 xor     edi, edi
.text:0040B055                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040B05C                 call    GetModuleHandleA
.text:0040B061                 sub     esp, 4
.text:0040B064                 mov     esi, eax
.text:0040B066                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040B06E                 mov     [esp], eax
.text:0040B071                 call    GetProcAddress
.text:0040B076                 sub     esp, 8
.text:0040B079                 test    eax, eax
.text:0040B07B                 jz      short loc_40B091
.text:0040B07D                 mov     [esp], ebx
.text:0040B080                 lea     ecx, [esp+0Ch]
.text:0040B084                 mov     [esp+4], ecx
.text:0040B088                 call    eax
.text:0040B08A                 sub     esp, 8
.text:0040B08D                 test    eax, eax
.text:0040B08F                 jnz     short loc_40B0F0
.text:0040B091
.text:0040B091 loc_40B091:                             ; CODE XREF: .text:0040B07B↑j
.text:0040B091                 mov     eax, ds:Str
.text:0040B096                 test    eax, eax
.text:0040B098                 jz      short loc_40B110
.text:0040B09A
.text:0040B09A loc_40B09A:                             ; CODE XREF: .text:0040B123↓j
.text:0040B09A                                         ; .text:0040B135↓j
.text:0040B09A                 test    ebx, ebx
.text:0040B09C                 jz      short loc_40B0A3
.text:0040B09E                 cmp     byte ptr [ebx], 0
.text:0040B0A1                 jnz     short loc_40B0C0
.text:0040B0A3
.text:0040B0A3 loc_40B0A3:                             ; CODE XREF: .text:0040B09C↑j
.text:0040B0A3                                         ; .text:0040B0D4↓j ...
.text:0040B0A3                 mov     [esp], esi
.text:0040B0A6                 call    FreeLibrary
.text:0040B0AB                 sub     esp, 4
.text:0040B0AE                 mov     eax, edi
.text:0040B0B0                 mov     ebx, [esp+10h]
.text:0040B0B4                 mov     esi, [esp+14h]
.text:0040B0B8                 mov     edi, [esp+18h]
.text:0040B0BC                 add     esp, 1Ch
.text:0040B0BF                 retn
.text:0040B0C0 ; ---------------------------------------------------------------------------
.text:0040B0C0
.text:0040B0C0 loc_40B0C0:                             ; CODE XREF: .text:0040B0A1↑j
.text:0040B0C0                 mov     [esp], ebx
.text:0040B0C3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040B0CB                 call    strrchr
.text:0040B0D0                 test    eax, eax
.text:0040B0D2                 mov     ebx, eax
.text:0040B0D4                 jz      short loc_40B0A3
.text:0040B0D6                 mov     [esp+4], eax
.text:0040B0DA                 mov     ecx, ds:Str
.text:0040B0E0                 mov     [esp], ecx
.text:0040B0E3                 call    strstr
.text:0040B0E8                 test    eax, eax
.text:0040B0EA                 jz      short loc_40B0F7
.text:0040B0EC                 lea     esi, [esi+0]
.text:0040B0F0
.text:0040B0F0 loc_40B0F0:                             ; CODE XREF: .text:0040B08F↑j
.text:0040B0F0                                         ; .text:0040B10D↓j
.text:0040B0F0                 mov     edi, 1
.text:0040B0F5                 jmp     short loc_40B0A3
.text:0040B0F7 ; ---------------------------------------------------------------------------
.text:0040B0F7
.text:0040B0F7 loc_40B0F7:                             ; CODE XREF: .text:0040B0EA↑j
.text:0040B0F7                 mov     [esp+4], ebx
.text:0040B0FB                 mov     ebx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040B101                 mov     [esp], ebx
.text:0040B104                 call    strstr
.text:0040B109                 test    eax, eax
.text:0040B10B                 jz      short loc_40B0A3
.text:0040B10D                 jmp     short loc_40B0F0
.text:0040B10D ; ---------------------------------------------------------------------------
.text:0040B10F                 align 10h
.text:0040B110
.text:0040B110 loc_40B110:                             ; CODE XREF: .text:0040B098↑j
.text:0040B110                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040B117                 call    getenv
.text:0040B11C                 mov     ds:Str, eax
.text:0040B121                 test    eax, eax
.text:0040B123                 jnz     loc_40B09A
.text:0040B129                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040B12F                 mov     ds:Str, edx
.text:0040B135                 jmp     loc_40B09A
.text:0040B135 ; ---------------------------------------------------------------------------
.text:0040B13A                 align 10h
.text:0040B140                 sub     esp, 0Ch
.text:0040B143                 mov     edx, [esp+10h]
.text:0040B147                 mov     [esp], edx
.text:0040B14A                 call    GetFileType
.text:0040B14F                 sub     esp, 4
.text:0040B152                 xor     edx, edx
.text:0040B154                 cmp     eax, 2
.text:0040B157                 jz      short loc_40B170
.text:0040B159                 cmp     eax, 3
.text:0040B15C                 jz      short loc_40B164
.text:0040B15E
.text:0040B15E loc_40B15E:                             ; CODE XREF: .text:0040B169↓j
.text:0040B15E                                         ; .text:0040B175↓j
.text:0040B15E                 mov     eax, edx
.text:0040B160                 add     esp, 0Ch
.text:0040B163                 retn
.text:0040B164 ; ---------------------------------------------------------------------------
.text:0040B164
.text:0040B164 loc_40B164:                             ; CODE XREF: .text:0040B15C↑j
.text:0040B164                 mov     edx, 1000h
.text:0040B169                 jmp     short loc_40B15E
.text:0040B169 ; ---------------------------------------------------------------------------
.text:0040B16B                 align 10h
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: .text:0040B157↑j
.text:0040B170                 mov     edx, 2000h
.text:0040B175                 jmp     short loc_40B15E
.text:0040B175 ; ---------------------------------------------------------------------------
.text:0040B177                 align 10h
.text:0040B180                 mov     ecx, [esp+4]
.text:0040B184                 xor     edx, edx
.text:0040B186                 test    cl, 10h
.text:0040B189                 setz    dl
.text:0040B18C                 dec     edx
.text:0040B18D                 and     edx, 0FFFFC000h
.text:0040B193                 add     edx, 8000h
.text:0040B199                 or      edx, 124h
.text:0040B19F                 test    cl, 1
.text:0040B1A2                 movzx   eax, dx
.text:0040B1A5                 jnz     short locret_40B1AC
.text:0040B1A7                 or      eax, 92h
.text:0040B1AC
.text:0040B1AC locret_40B1AC:                          ; CODE XREF: .text:0040B1A5↑j
.text:0040B1AC                 retn
.text:0040B1AC ; ---------------------------------------------------------------------------
.text:0040B1AD                 align 10h
.text:0040B1B0                 sub     esp, 2Ch
.text:0040B1B3                 mov     [esp+20h], esi
.text:0040B1B7                 mov     esi, [esp+30h]
.text:0040B1BB                 mov     [esp+1Ch], ebx
.text:0040B1BF                 xor     ebx, ebx
.text:0040B1C1                 test    esi, esi
.text:0040B1C3                 mov     [esp+24h], edi
.text:0040B1C7                 mov     [esp+28h], ebp
.text:0040B1CB                 jz      short loc_40B220
.text:0040B1CD                 cmp     byte ptr [esi], 0
.text:0040B1D0                 jnz     short loc_40B224
.text:0040B1D2
.text:0040B1D2 loc_40B1D2:                             ; CODE XREF: .text:0040B28C↓j
.text:0040B1D2                                         ; .text:0040B297↓j
.text:0040B1D2                 test    esi, esi
.text:0040B1D4                 jz      short loc_40B220
.text:0040B1D6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040B1DE                 mov     [esp], esi
.text:0040B1E1                 call    strrchr
.text:0040B1E6                 test    eax, eax
.text:0040B1E8                 jz      short loc_40B220
.text:0040B1EA                 cld
.text:0040B1EB                 mov     ecx, 5
.text:0040B1F0                 mov     esi, eax
.text:0040B1F2                 mov     edi, offset aLnk ; ".lnk"
.text:0040B1F7                 repe cmpsb
.text:0040B1F9                 setz    cl
.text:0040B1FC                 movzx   eax, cl
.text:0040B1FF                 nop
.text:0040B200
.text:0040B200 loc_40B200:                             ; CODE XREF: .text:0040B222↓j
.text:0040B200                 test    eax, eax
.text:0040B202                 jz      short loc_40B20A
.text:0040B204                 or      ebx, 0A000h
.text:0040B20A
.text:0040B20A loc_40B20A:                             ; CODE XREF: .text:0040B202↑j
.text:0040B20A                 mov     eax, ebx
.text:0040B20C                 mov     esi, [esp+20h]
.text:0040B210                 mov     ebx, [esp+1Ch]
.text:0040B214                 mov     edi, [esp+24h]
.text:0040B218                 mov     ebp, [esp+28h]
.text:0040B21C                 add     esp, 2Ch
.text:0040B21F                 retn
.text:0040B220 ; ---------------------------------------------------------------------------
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: .text:0040B1CB↑j
.text:0040B220                                         ; .text:0040B1D4↑j ...
.text:0040B220                 xor     eax, eax
.text:0040B222                 jmp     short loc_40B200
.text:0040B224 ; ---------------------------------------------------------------------------
.text:0040B224
.text:0040B224 loc_40B224:                             ; CODE XREF: .text:0040B1D0↑j
.text:0040B224                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040B22B                 call    GetModuleHandleA
.text:0040B230                 sub     esp, 4
.text:0040B233                 mov     ebp, eax
.text:0040B235                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040B23D                 mov     [esp], eax
.text:0040B240                 call    GetProcAddress
.text:0040B245                 sub     esp, 8
.text:0040B248                 test    eax, eax
.text:0040B24A                 mov     dword ptr [esp+14h], 0
.text:0040B252                 jz      short loc_40B268
.text:0040B254                 mov     [esp], esi
.text:0040B257                 lea     ecx, [esp+18h]
.text:0040B25B                 mov     [esp+4], ecx
.text:0040B25F                 call    eax
.text:0040B261                 sub     esp, 8
.text:0040B264                 test    eax, eax
.text:0040B266                 jnz     short loc_40B2C8
.text:0040B268
.text:0040B268 loc_40B268:                             ; CODE XREF: .text:0040B252↑j
.text:0040B268                 mov     edx, ds:Str
.text:0040B26E                 test    edx, edx
.text:0040B270                 jz      short loc_40B2F0
.text:0040B272
.text:0040B272 loc_40B272:                             ; CODE XREF: .text:0040B303↓j
.text:0040B272                                         ; .text:0040B315↓j
.text:0040B272                 test    esi, esi
.text:0040B274                 jz      short loc_40B27B
.text:0040B276                 cmp     byte ptr [esi], 0
.text:0040B279                 jnz     short loc_40B29C
.text:0040B27B
.text:0040B27B loc_40B27B:                             ; CODE XREF: .text:0040B274↑j
.text:0040B27B                                         ; .text:0040B2B0↓j ...
.text:0040B27B                 mov     [esp], ebp
.text:0040B27E                 call    FreeLibrary
.text:0040B283                 sub     esp, 4
.text:0040B286                 mov     eax, [esp+14h]
.text:0040B28A                 test    eax, eax
.text:0040B28C                 jz      loc_40B1D2
.text:0040B292                 mov     ebx, 49h ; 'I'
.text:0040B297                 jmp     loc_40B1D2
.text:0040B29C ; ---------------------------------------------------------------------------
.text:0040B29C
.text:0040B29C loc_40B29C:                             ; CODE XREF: .text:0040B279↑j
.text:0040B29C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040B2A4                 mov     [esp], esi
.text:0040B2A7                 call    strrchr
.text:0040B2AC                 test    eax, eax
.text:0040B2AE                 mov     edi, eax
.text:0040B2B0                 jz      short loc_40B27B
.text:0040B2B2                 mov     [esp+4], eax
.text:0040B2B6                 mov     edx, ds:Str
.text:0040B2BC                 mov     [esp], edx
.text:0040B2BF                 call    strstr
.text:0040B2C4                 test    eax, eax
.text:0040B2C6                 jz      short loc_40B2D2
.text:0040B2C8
.text:0040B2C8 loc_40B2C8:                             ; CODE XREF: .text:0040B266↑j
.text:0040B2C8                                         ; .text:0040B2E8↓j
.text:0040B2C8                 mov     dword ptr [esp+14h], 1
.text:0040B2D0                 jmp     short loc_40B27B
.text:0040B2D2 ; ---------------------------------------------------------------------------
.text:0040B2D2
.text:0040B2D2 loc_40B2D2:                             ; CODE XREF: .text:0040B2C6↑j
.text:0040B2D2                 mov     [esp+4], edi
.text:0040B2D6                 mov     edi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040B2DC                 mov     [esp], edi
.text:0040B2DF                 call    strstr
.text:0040B2E4                 test    eax, eax
.text:0040B2E6                 jz      short loc_40B27B
.text:0040B2E8                 jmp     short loc_40B2C8
.text:0040B2E8 ; ---------------------------------------------------------------------------
.text:0040B2EA                 align 10h
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: .text:0040B270↑j
.text:0040B2F0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040B2F7                 call    getenv
.text:0040B2FC                 mov     ds:Str, eax
.text:0040B301                 test    eax, eax
.text:0040B303                 jnz     loc_40B272
.text:0040B309                 mov     ecx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040B30F                 mov     ds:Str, ecx
.text:0040B315                 jmp     loc_40B272
.text:0040B315 ; ---------------------------------------------------------------------------
.text:0040B31A                 align 10h
.text:0040B320                 push    esi
.text:0040B321                 push    ebx
.text:0040B322                 sub     esp, 864h
.text:0040B328                 mov     ebx, [esp+870h]
.text:0040B32F                 lea     edx, [esp+830h]
.text:0040B336                 mov     esi, [esp+874h]
.text:0040B33D                 mov     [esp+4], edx
.text:0040B341                 mov     [esp], ebx
.text:0040B344                 call    sub_40A1A0
.text:0040B349                 xor     edx, edx
.text:0040B34B                 test    eax, eax
.text:0040B34D                 jz      loc_40B435
.text:0040B353                 mov     ecx, [esp+830h]
.text:0040B35A                 test    cl, 10h
.text:0040B35D                 mov     [esi], ecx
.text:0040B35F                 mov     eax, [esp+834h]
.text:0040B366                 mov     edx, [esp+838h]
.text:0040B36D                 mov     [esi+4], eax
.text:0040B370                 mov     [esi+8], edx
.text:0040B373                 mov     eax, [esp+83Ch]
.text:0040B37A                 mov     edx, [esp+840h]
.text:0040B381                 mov     [esi+0Ch], eax
.text:0040B384                 mov     [esi+10h], edx
.text:0040B387                 mov     edx, [esp+848h]
.text:0040B38E                 mov     eax, [esp+844h]
.text:0040B395                 mov     [esi+18h], edx
.text:0040B398                 mov     [esi+14h], eax
.text:0040B39B                 mov     edx, [esp+84Ch]
.text:0040B3A2                 mov     [esi+20h], edx
.text:0040B3A5                 mov     edx, [esp+850h]
.text:0040B3AC                 mov     [esi+24h], edx
.text:0040B3AF                 jnz     loc_40B440
.text:0040B3B5                 mov     dword ptr [esi+28h], 1
.text:0040B3BC
.text:0040B3BC loc_40B3BC:                             ; CODE XREF: .text:0040B44B↓j
.text:0040B3BC                 mov     [esp], ebx
.text:0040B3BF                 call    sub_40C780
.text:0040B3C4                 mov     [esp], eax
.text:0040B3C7                 call    sub_40C160
.text:0040B3CC                 mov     [esp], eax
.text:0040B3CF                 lea     edx, [esp+30h]
.text:0040B3D3                 mov     ebx, eax
.text:0040B3D5                 mov     [esp+18h], edx
.text:0040B3D9                 lea     ecx, [esp+2Ch]
.text:0040B3DD                 lea     edx, [esp+28h]
.text:0040B3E1                 mov     [esp+14h], ecx
.text:0040B3E5                 lea     ecx, [esp+24h]
.text:0040B3E9                 mov     [esp+10h], edx
.text:0040B3ED                 lea     edx, [esp+430h]
.text:0040B3F4                 mov     [esp+0Ch], ecx
.text:0040B3F8                 mov     [esp+4], edx
.text:0040B3FC                 mov     dword ptr [esp+1Ch], 400h
.text:0040B404                 mov     dword ptr [esp+8], 400h
.text:0040B40C                 call    GetVolumeInformationA
.text:0040B411                 sub     esp, 20h
.text:0040B414                 test    eax, eax
.text:0040B416                 setz    cl
.text:0040B419                 mov     [esp], ebx
.text:0040B41C                 movzx   edx, cl
.text:0040B41F                 dec     edx
.text:0040B420                 and     [esp+24h], edx
.text:0040B424                 call    free
.text:0040B429                 mov     ecx, [esp+24h]
.text:0040B42D                 mov     edx, 1
.text:0040B432                 mov     [esi+1Ch], ecx
.text:0040B435
.text:0040B435 loc_40B435:                             ; CODE XREF: .text:0040B34D↑j
.text:0040B435                 add     esp, 864h
.text:0040B43B                 mov     eax, edx
.text:0040B43D                 pop     ebx
.text:0040B43E                 pop     esi
.text:0040B43F                 retn
.text:0040B440 ; ---------------------------------------------------------------------------
.text:0040B440
.text:0040B440 loc_40B440:                             ; CODE XREF: .text:0040B3AF↑j
.text:0040B440                 mov     [esp], ebx
.text:0040B443                 call    sub_40A310
.text:0040B448                 mov     [esi+28h], eax
.text:0040B44B                 jmp     loc_40B3BC
.text:0040B450 ; ---------------------------------------------------------------------------
.text:0040B450                 push    ebp
.text:0040B451                 xor     edx, edx
.text:0040B453                 push    edi
.text:0040B454                 push    esi
.text:0040B455                 xor     esi, esi
.text:0040B457                 push    ebx
.text:0040B458                 sub     esp, 1Ch
.text:0040B45B                 mov     ebx, [esp+5Ch]
.text:0040B45F                 mov     ecx, [esp+30h]
.text:0040B463                 mov     edi, [esp+60h]
.text:0040B467                 or      esi, ebx
.text:0040B469                 mov     eax, [esp+4Ch]
.text:0040B46D                 or      edi, edx
.text:0040B46F                 mov     ebx, [esp+64h]
.text:0040B473                 xor     edx, edx
.text:0040B475                 test    cl, 10h
.text:0040B478                 setz    dl
.text:0040B47B                 mov     [ebx+10h], eax
.text:0040B47E                 mov     [ebx+8], edi
.text:0040B481                 mov     [ebx+0Ch], esi
.text:0040B484                 dec     edx
.text:0040B485                 and     edx, 0FFFFC000h
.text:0040B48B                 mov     dword ptr [ebx+14h], 0
.text:0040B492                 add     edx, 8000h
.text:0040B498                 or      edx, 124h
.text:0040B49E                 test    cl, 1
.text:0040B4A1                 movzx   eax, dx
.text:0040B4A4                 jnz     short loc_40B4AB
.text:0040B4A6                 or      eax, 92h
.text:0040B4AB
.text:0040B4AB loc_40B4AB:                             ; CODE XREF: .text:0040B4A4↑j
.text:0040B4AB                 mov     ebx, [esp+54h]
.text:0040B4AF                 xor     edx, edx
.text:0040B4B1                 xor     ebp, ebp
.text:0040B4B3                 mov     edi, [esp+50h]
.text:0040B4B7                 mov     ecx, [esp+64h]
.text:0040B4BB                 mov     esi, edi
.text:0040B4BD                 or      [ecx], eax
.text:0040B4BF                 mov     edi, ebx
.text:0040B4C1                 or      edi, ebp
.text:0040B4C3                 mov     ebp, edx
.text:0040B4C5                 mov     ebx, [esp+64h]
.text:0040B4C9                 or      ebp, esi
.text:0040B4CB                 mov     esi, [esp+58h]
.text:0040B4CF                 mov     edx, [esp+40h]
.text:0040B4D3                 mov     [ebx+30h], edi
.text:0040B4D6                 mov     [ebx+18h], esi
.text:0040B4D9                 mov     ecx, edx
.text:0040B4DB                 xor     esi, esi
.text:0040B4DD                 mov     [ebx+34h], ebp
.text:0040B4E0                 xor     edx, edx
.text:0040B4E2                 or      esi, ecx
.text:0040B4E4                 mov     dword ptr [esp+8], 989680h
.text:0040B4EC                 mov     ebx, [esp+3Ch]
.text:0040B4F0                 mov     ecx, esi
.text:0040B4F2                 mov     dword ptr [esp+0Ch], 0
.text:0040B4FA                 or      ebx, edx
.text:0040B4FC                 mov     edx, ebx
.text:0040B4FE                 sub     edx, 0D53E8000h
.text:0040B504                 sbb     ecx, 19DB1DEh
.text:0040B50A                 mov     [esp+4], ecx
.text:0040B50E                 mov     [esp], edx
.text:0040B511                 call    sub_413030
.text:0040B516                 mov     edx, eax
.text:0040B518                 mov     ecx, [esp+64h]
.text:0040B51C                 shr     eax, 1Fh
.text:0040B51F                 dec     eax
.text:0040B520                 and     edx, eax
.text:0040B522                 mov     [ecx+38h], edx
.text:0040B525                 mov     [esp], ebx
.text:0040B528                 mov     [esp+4], esi
.text:0040B52C                 mov     dword ptr [esp+8], 989680h
.text:0040B534                 mov     dword ptr [esp+0Ch], 0
.text:0040B53C                 call    sub_412EB0
.text:0040B541                 lea     ecx, [eax+eax*4]
.text:0040B544                 lea     esi, [ecx+ecx*4]
.text:0040B547                 mov     eax, [esp+64h]
.text:0040B54B                 shl     esi, 2
.text:0040B54E                 mov     ebx, esi
.text:0040B550                 shr     ebx, 1Fh
.text:0040B553                 dec     ebx
.text:0040B554                 and     ebx, esi
.text:0040B556                 xor     esi, esi
.text:0040B558                 mov     [eax+3Ch], ebx
.text:0040B55B                 mov     edx, [esp+38h]
.text:0040B55F                 mov     dword ptr [esp+8], 989680h
.text:0040B567                 mov     ebx, [esp+34h]
.text:0040B56B                 mov     dword ptr [esp+0Ch], 0
.text:0040B573                 mov     ecx, edx
.text:0040B575                 xor     edx, edx
.text:0040B577                 or      ebx, edx
.text:0040B579                 or      esi, ecx
.text:0040B57B                 mov     edx, ebx
.text:0040B57D                 sub     edx, 0D53E8000h
.text:0040B583                 mov     ecx, esi
.text:0040B585                 sbb     ecx, 19DB1DEh
.text:0040B58B                 mov     [esp+4], ecx
.text:0040B58F                 mov     [esp], edx
.text:0040B592                 call    sub_413030
.text:0040B597                 mov     edx, eax
.text:0040B599                 mov     ecx, [esp+64h]
.text:0040B59D                 shr     eax, 1Fh
.text:0040B5A0                 dec     eax
.text:0040B5A1                 and     edx, eax
.text:0040B5A3                 mov     [ecx+48h], edx
.text:0040B5A6                 mov     [esp], ebx
.text:0040B5A9                 mov     [esp+4], esi
.text:0040B5AD                 mov     dword ptr [esp+8], 989680h
.text:0040B5B5                 mov     dword ptr [esp+0Ch], 0
.text:0040B5BD                 call    sub_412EB0
.text:0040B5C2                 lea     edx, [eax+eax*4]
.text:0040B5C5                 mov     ebx, [esp+64h]
.text:0040B5C9                 lea     ecx, [edx+edx*4]
.text:0040B5CC                 shl     ecx, 2
.text:0040B5CF                 mov     esi, ecx
.text:0040B5D1                 shr     esi, 1Fh
.text:0040B5D4                 dec     esi
.text:0040B5D5                 and     esi, ecx
.text:0040B5D7                 mov     [ebx+4Ch], esi
.text:0040B5DA                 mov     edx, [esp+48h]
.text:0040B5DE                 xor     esi, esi
.text:0040B5E0                 mov     dword ptr [esp+8], 989680h
.text:0040B5E8                 mov     ebx, [esp+44h]
.text:0040B5EC                 mov     dword ptr [esp+0Ch], 0
.text:0040B5F4                 mov     ecx, edx
.text:0040B5F6                 xor     edx, edx
.text:0040B5F8                 or      ebx, edx
.text:0040B5FA                 or      esi, ecx
.text:0040B5FC                 mov     edx, ebx
.text:0040B5FE                 sub     edx, 0D53E8000h
.text:0040B604                 mov     ecx, esi
.text:0040B606                 sbb     ecx, 19DB1DEh
.text:0040B60C                 mov     [esp+4], ecx
.text:0040B610                 mov     [esp], edx
.text:0040B613                 call    sub_413030
.text:0040B618                 mov     edx, eax
.text:0040B61A                 mov     ecx, [esp+64h]
.text:0040B61E                 shr     eax, 1Fh
.text:0040B621                 dec     eax
.text:0040B622                 and     edx, eax
.text:0040B624                 mov     [ecx+40h], edx
.text:0040B627                 mov     [esp+4], esi
.text:0040B62B                 mov     dword ptr [esp+8], 989680h
.text:0040B633                 mov     dword ptr [esp+0Ch], 0
.text:0040B63B                 mov     [esp], ebx
.text:0040B63E                 call    sub_412EB0
.text:0040B643                 lea     edx, [eax+eax*4]
.text:0040B646                 lea     esi, [edx+edx*4]
.text:0040B649                 mov     eax, [esp+64h]
.text:0040B64D                 shl     esi, 2
.text:0040B650                 mov     edx, ebp
.text:0040B652                 mov     ecx, esi
.text:0040B654                 mov     dword ptr [eax+50h], 200h
.text:0040B65B                 shr     ecx, 1Fh
.text:0040B65E                 dec     ecx
.text:0040B65F                 and     ecx, esi
.text:0040B661                 test    ebp, ebp
.text:0040B663                 mov     [eax+44h], ecx
.text:0040B666                 mov     eax, edi
.text:0040B668                 js      short loc_40B6A2
.text:0040B66A
.text:0040B66A loc_40B66A:                             ; CODE XREF: .text:0040B6AA↓j
.text:0040B66A                 xor     esi, esi
.text:0040B66C                 mov     ebp, edi
.text:0040B66E                 mov     ecx, eax
.text:0040B670                 shrd    ecx, edx, 9
.text:0040B674                 mov     ebx, edx
.text:0040B676                 and     ebp, 1FFh
.text:0040B67C                 mov     eax, esi
.text:0040B67E                 sar     ebx, 9
.text:0040B681                 or      eax, ebp
.text:0040B683                 jz      short loc_40B68B
.text:0040B685                 add     ecx, 1
.text:0040B688                 adc     ebx, 0
.text:0040B68B
.text:0040B68B loc_40B68B:                             ; CODE XREF: .text:0040B683↑j
.text:0040B68B                 mov     edx, [esp+64h]
.text:0040B68F                 mov     eax, 1
.text:0040B694                 mov     [edx+58h], ecx
.text:0040B697                 mov     [edx+5Ch], ebx
.text:0040B69A                 add     esp, 1Ch
.text:0040B69D                 pop     ebx
.text:0040B69E                 pop     esi
.text:0040B69F                 pop     edi
.text:0040B6A0                 pop     ebp
.text:0040B6A1                 retn
.text:0040B6A2 ; ---------------------------------------------------------------------------
.text:0040B6A2
.text:0040B6A2 loc_40B6A2:                             ; CODE XREF: .text:0040B668↑j
.text:0040B6A2                 add     eax, 1FFh
.text:0040B6A7                 adc     edx, 0
.text:0040B6AA                 jmp     short loc_40B66A
.text:0040B6AA ; ---------------------------------------------------------------------------
.text:0040B6AC                 align 10h
.text:0040B6B0                 push    ebp
.text:0040B6B1                 push    edi
.text:0040B6B2                 xor     edi, edi
.text:0040B6B4                 push    esi
.text:0040B6B5                 xor     esi, esi
.text:0040B6B7                 push    ebx
.text:0040B6B8                 sub     esp, 0Ch
.text:0040B6BB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040B6C2                 call    LoadLibraryA
.text:0040B6C7                 sub     esp, 4
.text:0040B6CA                 mov     ebp, eax
.text:0040B6CC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040B6D4                 mov     [esp], eax
.text:0040B6D7                 call    GetProcAddress
.text:0040B6DC                 sub     esp, 8
.text:0040B6DF                 test    eax, eax
.text:0040B6E1                 jz      short loc_40B712
.text:0040B6E3                 lea     ecx, [esp+8]
.text:0040B6E7                 mov     [esp+4], ecx
.text:0040B6EB                 mov     ecx, [esp+20h]
.text:0040B6EF                 mov     [esp], ecx
.text:0040B6F2                 call    eax
.text:0040B6F4                 sub     esp, 8
.text:0040B6F7                 mov     ebx, eax
.text:0040B6F9                 cmp     eax, 0FFFFFFFFh
.text:0040B6FC                 jz      short loc_40B72D
.text:0040B6FE
.text:0040B6FE loc_40B6FE:                             ; CODE XREF: .text:0040B736↓j
.text:0040B6FE                 mov     esi, [esp+8]
.text:0040B702                 mov     ecx, ebx
.text:0040B704                 xor     edi, edi
.text:0040B706                 xor     ebx, ebx
.text:0040B708                 mov     edx, esi
.text:0040B70A                 mov     esi, ecx
.text:0040B70C                 or      esi, edi
.text:0040B70E                 mov     edi, ebx
.text:0040B710                 or      edi, edx
.text:0040B712
.text:0040B712 loc_40B712:                             ; CODE XREF: .text:0040B6E1↑j
.text:0040B712                                         ; .text:0040B734↓j
.text:0040B712                 test    ebp, ebp
.text:0040B714                 jz      short loc_40B721
.text:0040B716                 mov     [esp], ebp
.text:0040B719                 call    FreeLibrary
.text:0040B71E                 sub     esp, 4
.text:0040B721
.text:0040B721 loc_40B721:                             ; CODE XREF: .text:0040B714↑j
.text:0040B721                 add     esp, 0Ch
.text:0040B724                 mov     eax, esi
.text:0040B726                 mov     edx, edi
.text:0040B728                 pop     ebx
.text:0040B729                 pop     esi
.text:0040B72A                 pop     edi
.text:0040B72B                 pop     ebp
.text:0040B72C                 retn
.text:0040B72D ; ---------------------------------------------------------------------------
.text:0040B72D
.text:0040B72D loc_40B72D:                             ; CODE XREF: .text:0040B6FC↑j
.text:0040B72D                 call    GetLastError
.text:0040B732                 test    eax, eax
.text:0040B734                 jnz     short loc_40B712
.text:0040B736                 jmp     short loc_40B6FE
.text:0040B736 ; ---------------------------------------------------------------------------
.text:0040B738                 align 10h
.text:0040B740
.text:0040B740 ; =============== S U B R O U T I N E =======================================
.text:0040B740
.text:0040B740
.text:0040B740 ; int __cdecl sub_40B740(LPCSTR lpFileName, int)
.text:0040B740 sub_40B740      proc near               ; CODE XREF: sub_40BCC0-3F↓p
.text:0040B740
.text:0040B740 lpRootPathName  = dword ptr -8FCh
.text:0040B740 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040B740 nVolumeNameSize = dword ptr -8F4h
.text:0040B740 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040B740 lpMaximumComponentLength= dword ptr -8ECh
.text:0040B740 lpFileSystemFlags= dword ptr -8E8h
.text:0040B740 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040B740 nFileSystemNameSize= dword ptr -8E0h
.text:0040B740 VolumeSerialNumber= dword ptr -8D8h
.text:0040B740 MaximumComponentLength= dword ptr -8D4h
.text:0040B740 FileSystemFlags = dword ptr -8D0h
.text:0040B740 var_8CC         = dword ptr -8CCh
.text:0040B740 var_8C8         = dword ptr -8C8h
.text:0040B740 var_8C4         = dword ptr -8C4h
.text:0040B740 var_8C0         = dword ptr -8C0h
.text:0040B740 var_8BC         = dword ptr -8BCh
.text:0040B740 var_8B8         = dword ptr -8B8h
.text:0040B740 var_8B4         = dword ptr -8B4h
.text:0040B740 var_8B0         = dword ptr -8B0h
.text:0040B740 var_8AC         = dword ptr -8ACh
.text:0040B740 var_8A8         = dword ptr -8A8h
.text:0040B740 var_8A4         = dword ptr -8A4h
.text:0040B740 var_8A0         = dword ptr -8A0h
.text:0040B740 var_89C         = dword ptr -89Ch
.text:0040B740 FileSystemNameBuffer= byte ptr -88Ch
.text:0040B740 VolumeNameBuffer= byte ptr -48Ch
.text:0040B740 var_8C          = dword ptr -8Ch
.text:0040B740 var_88          = dword ptr -88h
.text:0040B740 var_84          = dword ptr -84h
.text:0040B740 var_80          = dword ptr -80h
.text:0040B740 var_7C          = dword ptr -7Ch
.text:0040B740 var_78          = dword ptr -78h
.text:0040B740 var_74          = dword ptr -74h
.text:0040B740 var_70          = dword ptr -70h
.text:0040B740 var_6C          = dword ptr -6Ch
.text:0040B740 var_5C          = dword ptr -5Ch
.text:0040B740 var_58          = dword ptr -58h
.text:0040B740 var_54          = dword ptr -54h
.text:0040B740 var_50          = dword ptr -50h
.text:0040B740 var_4C          = dword ptr -4Ch
.text:0040B740 var_48          = dword ptr -48h
.text:0040B740 var_44          = dword ptr -44h
.text:0040B740 var_3C          = dword ptr -3Ch
.text:0040B740 var_38          = dword ptr -38h
.text:0040B740 var_34          = dword ptr -34h
.text:0040B740 lpFileName      = dword ptr  4
.text:0040B740 arg_4           = dword ptr  8
.text:0040B740
.text:0040B740                 push    ebp
.text:0040B741                 xor     eax, eax
.text:0040B743                 mov     ecx, 0Dh
.text:0040B748                 push    edi
.text:0040B749                 push    esi
.text:0040B74A                 push    ebx
.text:0040B74B                 sub     esp, 8ECh
.text:0040B751                 lea     edi, [esp+8FCh+var_5C]
.text:0040B758                 cld
.text:0040B759                 lea     edx, [esp+8FCh+var_8C]
.text:0040B760                 rep stosd
.text:0040B762                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040B766                 lea     esi, [esp+8FCh+var_5C]
.text:0040B76D                 mov     edx, [esp+8FCh+lpFileName]
.text:0040B774                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040B777                 call    sub_40A1A0
.text:0040B77C                 test    eax, eax
.text:0040B77E                 mov     edx, 0FFFFFFFFh
.text:0040B783                 jz      loc_40BB14
.text:0040B789                 mov     edx, [esp+8FCh+var_88]
.text:0040B790                 mov     ebp, [esp+8FCh+var_84]
.text:0040B797                 mov     edi, [esp+8FCh+var_80]
.text:0040B79E                 mov     [esp+8FCh+var_58], edx
.text:0040B7A5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040B7AC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040B7B3                 mov     [esp+8FCh+var_54], ebp
.text:0040B7BA                 mov     edx, [esp+8FCh+var_78]
.text:0040B7C1                 mov     ebp, [esp+8FCh+var_74]
.text:0040B7C8                 mov     [esp+8FCh+var_50], edi
.text:0040B7CF                 test    bl, 10h
.text:0040B7D2                 mov     edi, [esp+8FCh+var_70]
.text:0040B7D9                 mov     [esp+8FCh+var_4C], ecx
.text:0040B7E0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040B7E7                 mov     [esp+8FCh+var_5C], ebx
.text:0040B7EE                 mov     [esp+8FCh+var_48], edx
.text:0040B7F5                 mov     [esp+8FCh+var_44], ebp
.text:0040B7FC                 mov     [esp+8FCh+var_3C], edi
.text:0040B803                 mov     [esp+8FCh+var_38], ecx
.text:0040B80A                 jnz     loc_40BB30
.text:0040B810                 mov     ebx, 1
.text:0040B815                 mov     [esp+8FCh+var_34], ebx
.text:0040B81C
.text:0040B81C loc_40B81C:                             ; CODE XREF: sub_40B740+406↓j
.text:0040B81C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040B823                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040B827                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040B82B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040B82E                 call    sub_40C780
.text:0040B833                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040B836                 call    sub_40C160
.text:0040B83B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040B83F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040B843                 mov     ebp, eax
.text:0040B845                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040B849                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040B84D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040B854                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040B858                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040B85C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040B860                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040B868                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040B870                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040B873                 call    GetVolumeInformationA
.text:0040B878                 sub     esp, 20h
.text:0040B87B                 test    eax, eax
.text:0040B87D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040B881                 setz    bl
.text:0040B884                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040B887                 xor     ebp, ebp
.text:0040B889                 movzx   edx, bl
.text:0040B88C                 dec     edx
.text:0040B88D                 xor     ebx, ebx
.text:0040B88F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040B893                 call    free
.text:0040B898                 cld
.text:0040B899                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040B89D                 mov     [esi+1Ch], ecx
.text:0040B8A0                 mov     ecx, 0Dh
.text:0040B8A5                 rep movsd
.text:0040B8A7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040B8AB                 mov     edx, [esp+8FCh+var_89C]
.text:0040B8AF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040B8B3                 or      ebp, edi
.text:0040B8B5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040B8B9                 mov     edi, [esp+8FCh+arg_4]
.text:0040B8C0                 or      edx, ebx
.text:0040B8C2                 mov     [edi+8], edx
.text:0040B8C5                 xor     edx, edx
.text:0040B8C7                 test    cl, 10h
.text:0040B8CA                 setz    dl
.text:0040B8CD                 mov     [edi+0Ch], ebp
.text:0040B8D0                 mov     [edi+10h], esi
.text:0040B8D3                 mov     dword ptr [edi+14h], 0
.text:0040B8DA                 dec     edx
.text:0040B8DB                 and     edx, 0FFFFC000h
.text:0040B8E1                 add     edx, 8000h
.text:0040B8E7                 or      edx, 124h
.text:0040B8ED                 test    cl, 1
.text:0040B8F0                 movzx   eax, dx
.text:0040B8F3                 jnz     short loc_40B8FA
.text:0040B8F5                 or      eax, 92h
.text:0040B8FA
.text:0040B8FA loc_40B8FA:                             ; CODE XREF: sub_40B740+1B3↑j
.text:0040B8FA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040B8FE                 xor     edx, edx
.text:0040B900                 xor     ebp, ebp
.text:0040B902                 mov     edi, [esp+8FCh+var_8AC]
.text:0040B906                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B90D                 mov     esi, edi
.text:0040B90F                 or      [ecx], eax
.text:0040B911                 mov     edi, ebx
.text:0040B913                 or      edi, ebp
.text:0040B915                 mov     ebp, edx
.text:0040B917                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040B91B                 or      ebp, esi
.text:0040B91D                 mov     esi, [esp+8FCh+arg_4]
.text:0040B924                 mov     edx, [esp+8FCh+var_8BC]
.text:0040B928                 mov     [esi+18h], ebx
.text:0040B92B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040B92F                 mov     ecx, edx
.text:0040B931                 mov     [esi+30h], edi
.text:0040B934                 xor     edx, edx
.text:0040B936                 mov     [esi+34h], ebp
.text:0040B939                 or      ebx, edx
.text:0040B93B                 xor     esi, esi
.text:0040B93D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B945                 or      esi, ecx
.text:0040B947                 mov     edx, ebx
.text:0040B949                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B951                 sub     edx, 0D53E8000h
.text:0040B957                 mov     ecx, esi
.text:0040B959                 sbb     ecx, 19DB1DEh
.text:0040B95F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040B963                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040B966                 call    sub_413030
.text:0040B96B                 mov     edx, eax
.text:0040B96D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B974                 shr     eax, 1Fh
.text:0040B977                 dec     eax
.text:0040B978                 and     edx, eax
.text:0040B97A                 mov     [ecx+38h], edx
.text:0040B97D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040B980                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040B984                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B98C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B994                 call    sub_412EB0
.text:0040B999                 lea     ecx, [eax+eax*4]
.text:0040B99C                 lea     ebx, [ecx+ecx*4]
.text:0040B99F                 mov     eax, [esp+8FCh+arg_4]
.text:0040B9A6                 shl     ebx, 2
.text:0040B9A9                 mov     esi, ebx
.text:0040B9AB                 shr     esi, 1Fh
.text:0040B9AE                 dec     esi
.text:0040B9AF                 and     esi, ebx
.text:0040B9B1                 mov     [eax+3Ch], esi
.text:0040B9B4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040B9B8                 xor     esi, esi
.text:0040B9BA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040B9C2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040B9C6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040B9CE                 mov     ecx, edx
.text:0040B9D0                 xor     edx, edx
.text:0040B9D2                 or      ebx, edx
.text:0040B9D4                 or      esi, ecx
.text:0040B9D6                 mov     edx, ebx
.text:0040B9D8                 sub     edx, 0D53E8000h
.text:0040B9DE                 mov     ecx, esi
.text:0040B9E0                 sbb     ecx, 19DB1DEh
.text:0040B9E6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040B9EA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040B9ED                 call    sub_413030
.text:0040B9F2                 mov     edx, eax
.text:0040B9F4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040B9FB                 shr     eax, 1Fh
.text:0040B9FE                 dec     eax
.text:0040B9FF                 and     edx, eax
.text:0040BA01                 mov     [ecx+48h], edx
.text:0040BA04                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040BA07                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040BA0B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040BA13                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040BA1B                 call    sub_412EB0
.text:0040BA20                 lea     ecx, [eax+eax*4]
.text:0040BA23                 lea     ebx, [ecx+ecx*4]
.text:0040BA26                 mov     eax, [esp+8FCh+arg_4]
.text:0040BA2D                 shl     ebx, 2
.text:0040BA30                 mov     esi, ebx
.text:0040BA32                 shr     esi, 1Fh
.text:0040BA35                 dec     esi
.text:0040BA36                 and     esi, ebx
.text:0040BA38                 mov     [eax+4Ch], esi
.text:0040BA3B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040BA3F                 xor     esi, esi
.text:0040BA41                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040BA49                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040BA4D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040BA55                 mov     ecx, edx
.text:0040BA57                 xor     edx, edx
.text:0040BA59                 or      ebx, edx
.text:0040BA5B                 or      esi, ecx
.text:0040BA5D                 mov     edx, ebx
.text:0040BA5F                 sub     edx, 0D53E8000h
.text:0040BA65                 mov     ecx, esi
.text:0040BA67                 sbb     ecx, 19DB1DEh
.text:0040BA6D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040BA71                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040BA74                 call    sub_413030
.text:0040BA79                 mov     edx, eax
.text:0040BA7B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040BA82                 shr     eax, 1Fh
.text:0040BA85                 dec     eax
.text:0040BA86                 and     edx, eax
.text:0040BA88                 mov     [ecx+40h], edx
.text:0040BA8B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040BA8E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040BA92                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040BA9A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040BAA2                 call    sub_412EB0
.text:0040BAA7                 lea     ebx, [eax+eax*4]
.text:0040BAAA                 mov     esi, [esp+8FCh+arg_4]
.text:0040BAB1                 lea     edx, [ebx+ebx*4]
.text:0040BAB4                 shl     edx, 2
.text:0040BAB7                 mov     eax, edi
.text:0040BAB9                 mov     ecx, edx
.text:0040BABB                 mov     dword ptr [esi+50h], 200h
.text:0040BAC2                 shr     ecx, 1Fh
.text:0040BAC5                 dec     ecx
.text:0040BAC6                 and     ecx, edx
.text:0040BAC8                 test    ebp, ebp
.text:0040BACA                 mov     edx, ebp
.text:0040BACC                 mov     [esi+44h], ecx
.text:0040BACF                 js      short loc_40BB21
.text:0040BAD1
.text:0040BAD1 loc_40BAD1:                             ; CODE XREF: sub_40B740+3E9↓j
.text:0040BAD1                 xor     esi, esi
.text:0040BAD3                 mov     ebp, edi
.text:0040BAD5                 mov     ecx, eax
.text:0040BAD7                 shrd    ecx, edx, 9
.text:0040BADB                 mov     ebx, edx
.text:0040BADD                 and     ebp, 1FFh
.text:0040BAE3                 mov     eax, esi
.text:0040BAE5                 sar     ebx, 9
.text:0040BAE8                 or      eax, ebp
.text:0040BAEA                 jz      short loc_40BAF2
.text:0040BAEC                 add     ecx, 1
.text:0040BAEF                 adc     ebx, 0
.text:0040BAF2
.text:0040BAF2 loc_40BAF2:                             ; CODE XREF: sub_40B740+3AA↑j
.text:0040BAF2                 mov     edx, [esp+8FCh+arg_4]
.text:0040BAF9                 mov     [edx+5Ch], ebx
.text:0040BAFC                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040BB03                 mov     [edx+58h], ecx
.text:0040BB06                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040BB0A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040BB0D                 call    sub_40A960
.text:0040BB12                 xor     edx, edx
.text:0040BB14
.text:0040BB14 loc_40BB14:                             ; CODE XREF: sub_40B740+43↑j
.text:0040BB14                 add     esp, 8ECh
.text:0040BB1A                 mov     eax, edx
.text:0040BB1C                 pop     ebx
.text:0040BB1D                 pop     esi
.text:0040BB1E                 pop     edi
.text:0040BB1F                 pop     ebp
.text:0040BB20                 retn
.text:0040BB21 ; ---------------------------------------------------------------------------
.text:0040BB21
.text:0040BB21 loc_40BB21:                             ; CODE XREF: sub_40B740+38F↑j
.text:0040BB21                 add     eax, 1FFh
.text:0040BB26                 adc     edx, 0
.text:0040BB29                 jmp     short loc_40BAD1
.text:0040BB29 ; ---------------------------------------------------------------------------
.text:0040BB2B                 align 10h
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: sub_40B740+CA↑j
.text:0040BB30                 mov     eax, [esp+8FCh+lpFileName]
.text:0040BB37                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040BB3A                 call    sub_40A310
.text:0040BB3F                 mov     [esp+8FCh+var_34], eax
.text:0040BB46                 jmp     loc_40B81C
.text:0040BB46 sub_40B740      endp
.text:0040BB46
.text:0040BB46 ; ---------------------------------------------------------------------------
.text:0040BB4B                 align 10h
.text:0040BB50 ; START OF FUNCTION CHUNK FOR sub_40BCC0
.text:0040BB50
.text:0040BB50 loc_40BB50:                             ; CODE XREF: sub_40BCC0+26↓j
.text:0040BB50                 cld
.text:0040BB51                 sub     esp, 2Ch
.text:0040BB54                 xor     eax, eax
.text:0040BB56                 mov     [esp+2Ch+var_10], ebx
.text:0040BB5A                 mov     ecx, 18h
.text:0040BB5F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BB63                 mov     [esp+2Ch+var_C], esi
.text:0040BB67                 mov     esi, [esp+2Ch+arg_4]
.text:0040BB6B                 test    ebx, ebx
.text:0040BB6D                 mov     [esp+2Ch+var_8], edi
.text:0040BB71                 mov     edi, esi
.text:0040BB73                 mov     [esp+2Ch+var_4], ebp
.text:0040BB77                 rep stosd
.text:0040BB79                 jz      short loc_40BB80
.text:0040BB7B                 cmp     byte ptr [ebx], 0
.text:0040BB7E                 jnz     short loc_40BB98
.text:0040BB80
.text:0040BB80 loc_40BB80:                             ; CODE XREF: sub_40BCC0-147↑j
.text:0040BB80                 xor     edx, edx
.text:0040BB82
.text:0040BB82 loc_40BB82:                             ; CODE XREF: sub_40BCC0-111↓j
.text:0040BB82                                         ; sub_40BCC0-68↓j
.text:0040BB82                 mov     ebx, [esp+2Ch+var_10]
.text:0040BB86                 mov     eax, edx
.text:0040BB88                 mov     esi, [esp+2Ch+var_C]
.text:0040BB8C                 mov     edi, [esp+2Ch+var_8]
.text:0040BB90                 mov     ebp, [esp+2Ch+var_4]
.text:0040BB94                 add     esp, 2Ch
.text:0040BB97                 retn
.text:0040BB98 ; ---------------------------------------------------------------------------
.text:0040BB98
.text:0040BB98 loc_40BB98:                             ; CODE XREF: sub_40BCC0-142↑j
.text:0040BB98                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040BBA0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040BBA3                 call    sub_40E010
.text:0040BBA8                 test    eax, eax
.text:0040BBAA                 mov     edx, 0FFFFFFFFh
.text:0040BBAF                 jnz     short loc_40BB82
.text:0040BBB1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040BBB4                 call    sub_40DEC0
.text:0040BBB9                 mov     [esp+2Ch+lpFileName], eax
.text:0040BBBC                 call    sub_40C160
.text:0040BBC1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040BBC4                 mov     ebp, eax
.text:0040BBC6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040BBCE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040BBD6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040BBDE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BBE6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040BBEE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040BBF6                 call    CreateFileA
.text:0040BBFB                 sub     esp, 1Ch
.text:0040BBFE                 mov     ebx, eax
.text:0040BC00                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040BC04                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040BC07                 call    sub_40A490
.text:0040BC0C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040BC0F                 mov     edi, eax
.text:0040BC11                 call    CloseHandle
.text:0040BC16                 sub     esp, 4
.text:0040BC19                 cmp     edi, 0FFFFFFFFh
.text:0040BC1C                 jz      short loc_40BC7A
.text:0040BC1E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040BC22                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040BC25                 call    sub_40A960
.text:0040BC2A
.text:0040BC2A loc_40BC2A:                             ; CODE XREF: sub_40BCC0-38↓j
.text:0040BC2A                 mov     edx, [esi]
.text:0040BC2C                 and     edx, 0F000h
.text:0040BC32                 cmp     edx, 4000h
.text:0040BC38                 jz      short loc_40BC6D
.text:0040BC3A
.text:0040BC3A loc_40BC3A:                             ; CODE XREF: sub_40BCC0-48↓j
.text:0040BC3A                 cmp     edi, 0FFFFFFFFh
.text:0040BC3D                 jz      short loc_40BC5D
.text:0040BC3F
.text:0040BC3F loc_40BC3F:                             ; CODE XREF: sub_40BCC0-55↓j
.text:0040BC3F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040BC46                 call    SetErrorMode
.text:0040BC4B                 sub     esp, 4
.text:0040BC4E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040BC51                 call    free
.text:0040BC56                 mov     edx, edi
.text:0040BC58                 jmp     loc_40BB82
.text:0040BC5D ; ---------------------------------------------------------------------------
.text:0040BC5D
.text:0040BC5D loc_40BC5D:                             ; CODE XREF: sub_40BCC0-83↑j
.text:0040BC5D                 call    sub_40DE70
.text:0040BC62                 mov     esi, eax
.text:0040BC64                 call    _errno
.text:0040BC69                 mov     [eax], esi
.text:0040BC6B                 jmp     short loc_40BC3F
.text:0040BC6D ; ---------------------------------------------------------------------------
.text:0040BC6D
.text:0040BC6D loc_40BC6D:                             ; CODE XREF: sub_40BCC0-88↑j
.text:0040BC6D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040BC70                 call    sub_40A310
.text:0040BC75                 mov     [esi+18h], eax
.text:0040BC78                 jmp     short loc_40BC3A
.text:0040BC7A ; ---------------------------------------------------------------------------
.text:0040BC7A
.text:0040BC7A loc_40BC7A:                             ; CODE XREF: sub_40BCC0-A4↑j
.text:0040BC7A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040BC7E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040BC81                 call    sub_40B740
.text:0040BC86                 mov     edi, eax
.text:0040BC88                 jmp     short loc_40BC2A
.text:0040BC88 ; END OF FUNCTION CHUNK FOR sub_40BCC0
.text:0040BC88 ; ---------------------------------------------------------------------------
.text:0040BC8A                 align 10h
.text:0040BC90
.text:0040BC90 ; =============== S U B R O U T I N E =======================================
.text:0040BC90
.text:0040BC90
.text:0040BC90 sub_40BC90      proc near               ; CODE XREF: sub_4048C0+E3↑p
.text:0040BC90                                         ; sub_4048C0+12A↑p ...
.text:0040BC90
.text:0040BC90 var_C           = dword ptr -0Ch
.text:0040BC90 var_8           = dword ptr -8
.text:0040BC90 var_4           = dword ptr -4
.text:0040BC90 arg_0           = dword ptr  4
.text:0040BC90 arg_4           = dword ptr  8
.text:0040BC90
.text:0040BC90                 sub     esp, 0Ch
.text:0040BC93                 mov     edx, [esp+0Ch+arg_4]
.text:0040BC97                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040BC9E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040BCA2                 mov     edx, [esp+0Ch+arg_0]
.text:0040BCA6                 mov     [esp+0Ch+var_8], edx ; int
.text:0040BCAA                 call    sub_40BCC0
.text:0040BCAF                 add     esp, 0Ch
.text:0040BCB2                 retn
.text:0040BCB2 sub_40BC90      endp
.text:0040BCB2
.text:0040BCB2 ; ---------------------------------------------------------------------------
.text:0040BCB3                 align 10h
.text:0040BCC0
.text:0040BCC0 ; =============== S U B R O U T I N E =======================================
.text:0040BCC0
.text:0040BCC0
.text:0040BCC0 ; int __cdecl sub_40BCC0(LPCSTR, int, int)
.text:0040BCC0 sub_40BCC0      proc near               ; CODE XREF: sub_40BC90+1A↑p
.text:0040BCC0                                         ; sub_40C590+90↓p ...
.text:0040BCC0
.text:0040BCC0 lpFileName      = dword ptr -2Ch
.text:0040BCC0 dwDesiredAccess = dword ptr -28h
.text:0040BCC0 dwShareMode     = dword ptr -24h
.text:0040BCC0 lpSecurityAttributes= dword ptr -20h
.text:0040BCC0 dwCreationDisposition= dword ptr -1Ch
.text:0040BCC0 dwFlagsAndAttributes= dword ptr -18h
.text:0040BCC0 hTemplateFile   = dword ptr -14h
.text:0040BCC0 var_10          = dword ptr -10h
.text:0040BCC0 var_C           = dword ptr -0Ch
.text:0040BCC0 var_8           = dword ptr -8
.text:0040BCC0 var_4           = dword ptr -4
.text:0040BCC0 arg_0           = dword ptr  4
.text:0040BCC0 arg_4           = dword ptr  8
.text:0040BCC0 arg_8           = dword ptr  0Ch
.text:0040BCC0
.text:0040BCC0 ; FUNCTION CHUNK AT .text:0040BB50 SIZE 0000013A BYTES
.text:0040BCC0
.text:0040BCC0                 sub     esp, 0Ch
.text:0040BCC3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040BCC7                 mov     edx, [esp+0Ch+arg_4]
.text:0040BCCB                 mov     eax, [esp+0Ch+arg_8]
.text:0040BCCF                 test    ecx, ecx
.text:0040BCD1                 jnz     short loc_40BCF0
.text:0040BCD3                 test    edx, edx
.text:0040BCD5                 jz      short loc_40BCF0
.text:0040BCD7                 test    eax, eax
.text:0040BCD9                 jz      short loc_40BCF0
.text:0040BCDB                 mov     [esp+0Ch+arg_4], eax
.text:0040BCDF                 mov     [esp+0Ch+arg_0], edx
.text:0040BCE3                 add     esp, 0Ch
.text:0040BCE6                 jmp     loc_40BB50
.text:0040BCE6 ; ---------------------------------------------------------------------------
.text:0040BCEB                 align 10h
.text:0040BCF0
.text:0040BCF0 loc_40BCF0:                             ; CODE XREF: sub_40BCC0+11↑j
.text:0040BCF0                                         ; sub_40BCC0+15↑j ...
.text:0040BCF0                 call    _errno
.text:0040BCF5                 mov     dword ptr [eax], 16h
.text:0040BCFB                 mov     eax, 0FFFFFFFFh
.text:0040BD00                 add     esp, 0Ch
.text:0040BD03                 retn
.text:0040BD03 sub_40BCC0      endp
.text:0040BD03
.text:0040BD03 ; ---------------------------------------------------------------------------
.text:0040BD04                 align 10h
.text:0040BD10
.text:0040BD10 ; =============== S U B R O U T I N E =======================================
.text:0040BD10
.text:0040BD10 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040BD10
.text:0040BD10 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040BD10 _win32_longpath proc near               ; CODE XREF: .text:0040C4D4↓p
.text:0040BD10
.text:0040BD10 C               = dword ptr -278h
.text:0040BD10 lpFindFileData  = dword ptr -274h
.text:0040BD10 Destination     = byte ptr -268h
.text:0040BD10 var_267         = byte ptr -267h
.text:0040BD10 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040BD10 lpFileName      = dword ptr  8
.text:0040BD10
.text:0040BD10                 push    ebp
.text:0040BD11                 xor     eax, eax
.text:0040BD13                 push    edi
.text:0040BD14                 push    esi
.text:0040BD15                 push    ebx
.text:0040BD16                 sub     esp, 26Ch
.text:0040BD1C                 mov     esi, [esp+278h+lpFileName]
.text:0040BD23                 lea     ebp, [esp+278h+Destination]
.text:0040BD27                 test    esi, esi
.text:0040BD29                 jz      loc_40BE87
.text:0040BD2F                 movsx   edx, byte ptr [esi]
.text:0040BD32                 mov     [esp+278h+C], edx ; C
.text:0040BD35                 call    isalpha
.text:0040BD3A                 test    eax, eax
.text:0040BD3C                 jz      short loc_40BD4F
.text:0040BD3E                 mov     eax, [esp+278h+lpFileName]
.text:0040BD45                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040BD49                 jz      loc_40C08B
.text:0040BD4F
.text:0040BD4F loc_40BD4F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040BD4F                 mov     edx, [esp+278h+lpFileName]
.text:0040BD56                 movzx   eax, byte ptr [edx]
.text:0040BD59                 cmp     al, 2Fh ; '/'
.text:0040BD5B                 jz      loc_40BF6B
.text:0040BD61                 cmp     al, 5Ch ; '\'
.text:0040BD63                 jz      loc_40BF6B
.text:0040BD69
.text:0040BD69 loc_40BD69:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040BD69                                         ; _win32_longpath+2B1↓j ...
.text:0040BD69                 mov     [ebp+268h+Destination], 0
.text:0040BD6D                 movzx   ebx, byte ptr [esi]
.text:0040BD70                 test    bl, bl
.text:0040BD72                 jz      loc_40BE69
.text:0040BD78                 nop
.text:0040BD79                 lea     esi, [esi+0]
.text:0040BD80
.text:0040BD80 loc_40BD80:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040BD80                 cmp     bl, 2Fh ; '/'
.text:0040BD83                 jz      loc_40BF20
.text:0040BD89                 cmp     bl, 5Ch ; '\'
.text:0040BD8C                 jz      loc_40BF20
.text:0040BD92
.text:0040BD92 loc_40BD92:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040BD92                                         ; _win32_longpath+22C↓j ...
.text:0040BD92                 cmp     bl, 2Eh ; '.'
.text:0040BD95                 jz      loc_40BEC0
.text:0040BD9B
.text:0040BD9B loc_40BD9B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040BD9B                                         ; _win32_longpath+203↓j
.text:0040BD9B                 test    bl, bl
.text:0040BD9D                 jz      loc_40BE69
.text:0040BDA3                 cmp     bl, 2Fh ; '/'
.text:0040BDA6                 jz      short loc_40BDC2
.text:0040BDA8                 cmp     bl, 5Ch ; '\'
.text:0040BDAB                 jz      short loc_40BDC2
.text:0040BDAD                 lea     esi, [esi+0]
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040BDB0                 inc     esi
.text:0040BDB1                 movzx   ebx, byte ptr [esi]
.text:0040BDB4                 test    bl, bl
.text:0040BDB6                 jz      short loc_40BDC2
.text:0040BDB8                 cmp     bl, 2Fh ; '/'
.text:0040BDBB                 jz      short loc_40BDC2
.text:0040BDBD                 cmp     bl, 5Ch ; '\'
.text:0040BDC0                 jnz     short loc_40BDB0
.text:0040BDC2
.text:0040BDC2 loc_40BDC2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040BDC2                                         ; _win32_longpath+9B↑j ...
.text:0040BDC2                 mov     byte ptr [esi], 0
.text:0040BDC5                 lea     edx, [esp+278h+FindFileData]
.text:0040BDCC                 mov     eax, [esp+278h+lpFileName]
.text:0040BDD3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040BDD7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040BDDA                 call    FindFirstFileA
.text:0040BDDF                 mov     [esi], bl
.text:0040BDE1                 sub     esp, 8
.text:0040BDE4                 mov     edi, eax
.text:0040BDE6                 cmp     eax, 0FFFFFFFFh
.text:0040BDE9                 jz      loc_40BEAC
.text:0040BDEF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040BDF6                 mov     ecx, ebx
.text:0040BDF8                 nop
.text:0040BDF9                 lea     esi, [esi+0]
.text:0040BE00
.text:0040BE00 loc_40BE00:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040BE00                 mov     eax, [ebx]
.text:0040BE02                 add     ebx, 4
.text:0040BE05                 lea     edx, [eax-1010101h]
.text:0040BE0B                 not     eax
.text:0040BE0D                 and     edx, eax
.text:0040BE0F                 and     edx, 80808080h
.text:0040BE15                 jz      short loc_40BE00
.text:0040BE17                 test    edx, 8080h
.text:0040BE1D                 jnz     short loc_40BE25
.text:0040BE1F                 shr     edx, 10h
.text:0040BE22                 add     ebx, 2
.text:0040BE25
.text:0040BE25 loc_40BE25:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040BE25                 add     dl, dl
.text:0040BE27                 sbb     ebx, 3
.text:0040BE2A                 sub     ebx, ecx
.text:0040BE2C                 lea     ecx, [esp+278h+Destination]
.text:0040BE30                 sub     ecx, ebp
.text:0040BE32                 add     ecx, 105h
.text:0040BE38                 cmp     ecx, ebx
.text:0040BE3A                 jle     short loc_40BE92
.text:0040BE3C                 mov     [esp+278h+C], ebp ; Destination
.text:0040BE3F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040BE46                 add     ebp, ebx
.text:0040BE48                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040BE4C                 call    strcpy
.text:0040BE51                 mov     [esp+278h+C], edi ; hFindFile
.text:0040BE54                 call    FindClose
.text:0040BE59                 sub     esp, 4
.text:0040BE5C
.text:0040BE5C loc_40BE5C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040BE5C                 movzx   ecx, byte ptr [esi]
.text:0040BE5F                 test    cl, cl
.text:0040BE61                 mov     bl, cl
.text:0040BE63                 jnz     loc_40BD80
.text:0040BE69
.text:0040BE69 loc_40BE69:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040BE69                                         ; _win32_longpath+8D↑j
.text:0040BE69                 mov     esi, [esp+278h+lpFileName]
.text:0040BE70                 lea     ebp, [esp+278h+Destination]
.text:0040BE74                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040BE78                 mov     [esp+278h+C], esi ; Destination
.text:0040BE7B                 call    strcpy
.text:0040BE80                 mov     eax, [esp+278h+lpFileName]
.text:0040BE87
.text:0040BE87 loc_40BE87:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040BE87                                         ; _win32_longpath+19A↓j
.text:0040BE87                 add     esp, 26Ch
.text:0040BE8D                 pop     ebx
.text:0040BE8E                 pop     esi
.text:0040BE8F                 pop     edi
.text:0040BE90                 pop     ebp
.text:0040BE91                 retn
.text:0040BE92 ; ---------------------------------------------------------------------------
.text:0040BE92
.text:0040BE92 loc_40BE92:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040BE92                 mov     [esp+278h+C], edi ; hFindFile
.text:0040BE95                 call    FindClose
.text:0040BE9A                 sub     esp, 4
.text:0040BE9D                 call    _errno
.text:0040BEA2                 mov     dword ptr [eax], 22h ; '"'
.text:0040BEA8
.text:0040BEA8 loc_40BEA8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040BEA8                 xor     eax, eax
.text:0040BEAA                 jmp     short loc_40BE87
.text:0040BEAC ; ---------------------------------------------------------------------------
.text:0040BEAC
.text:0040BEAC loc_40BEAC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040BEAC                 call    _errno
.text:0040BEB1                 mov     dword ptr [eax], 16h
.text:0040BEB7                 jmp     short loc_40BEA8
.text:0040BEB7 ; ---------------------------------------------------------------------------
.text:0040BEB9                 align 10h
.text:0040BEC0
.text:0040BEC0 loc_40BEC0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040BEC0                 movzx   eax, byte ptr [esi+1]
.text:0040BEC4                 test    al, al
.text:0040BEC6                 jnz     short loc_40BEF5
.text:0040BEC8
.text:0040BEC8 loc_40BEC8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040BEC8                                         ; _win32_longpath+1EB↓j ...
.text:0040BEC8                 test    bl, bl
.text:0040BECA                 jz      short loc_40BEEC
.text:0040BECC                 cmp     bl, 2Fh ; '/'
.text:0040BECF                 jz      short loc_40BEEC
.text:0040BED1                 cmp     bl, 5Ch ; '\'
.text:0040BED4                 jz      short loc_40BEEC
.text:0040BED6
.text:0040BED6 loc_40BED6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040BED6                 mov     [ebp+268h+Destination], bl
.text:0040BED9                 inc     esi
.text:0040BEDA                 inc     ebp
.text:0040BEDB                 movzx   ebx, byte ptr [esi]
.text:0040BEDE                 test    bl, bl
.text:0040BEE0                 jz      short loc_40BEEC
.text:0040BEE2                 cmp     bl, 2Fh ; '/'
.text:0040BEE5                 jz      short loc_40BEEC
.text:0040BEE7                 cmp     bl, 5Ch ; '\'
.text:0040BEEA                 jnz     short loc_40BED6
.text:0040BEEC
.text:0040BEEC loc_40BEEC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040BEEC                                         ; _win32_longpath+1BF↑j ...
.text:0040BEEC                 mov     [ebp+268h+Destination], 0
.text:0040BEF0                 jmp     loc_40BE5C
.text:0040BEF5 ; ---------------------------------------------------------------------------
.text:0040BEF5
.text:0040BEF5 loc_40BEF5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040BEF5                 cmp     al, 2Fh ; '/'
.text:0040BEF7                 jz      short loc_40BEC8
.text:0040BEF9                 cmp     al, 5Ch ; '\'
.text:0040BEFB                 jz      short loc_40BEC8
.text:0040BEFD                 cmp     al, 2Eh ; '.'
.text:0040BEFF                 jnz     loc_40BD9B
.text:0040BF05                 movzx   eax, byte ptr [esi+2]
.text:0040BF09                 test    al, al
.text:0040BF0B                 jz      short loc_40BEC8
.text:0040BF0D                 cmp     al, 2Fh ; '/'
.text:0040BF0F                 jz      short loc_40BEC8
.text:0040BF11                 cmp     al, 5Ch ; '\'
.text:0040BF13                 jnz     loc_40BD9B
.text:0040BF19                 jmp     short loc_40BEC8
.text:0040BF19 ; ---------------------------------------------------------------------------
.text:0040BF1B                 align 10h
.text:0040BF20
.text:0040BF20 loc_40BF20:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040BF20                                         ; _win32_longpath+7C↑j
.text:0040BF20                 mov     [ebp+268h+Destination], bl
.text:0040BF23                 inc     esi
.text:0040BF24                 inc     ebp
.text:0040BF25                 mov     [ebp+268h+Destination], 0
.text:0040BF29                 movzx   ebx, byte ptr [esi]
.text:0040BF2C                 test    bl, bl
.text:0040BF2E                 jz      loc_40BD92
.text:0040BF34                 cmp     bl, 2Fh ; '/'
.text:0040BF37                 jz      short loc_40BF50
.text:0040BF39                 cmp     bl, 5Ch ; '\'
.text:0040BF3C                 jnz     loc_40BD92
.text:0040BF42                 lea     esi, [esi+0]
.text:0040BF49                 lea     edi, [edi+0]
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040BF50                                         ; _win32_longpath+24F↓j ...
.text:0040BF50                 inc     esi
.text:0040BF51                 movzx   ebx, byte ptr [esi]
.text:0040BF54                 test    bl, bl
.text:0040BF56                 jz      loc_40BD92
.text:0040BF5C                 cmp     bl, 2Fh ; '/'
.text:0040BF5F                 jz      short loc_40BF50
.text:0040BF61                 cmp     bl, 5Ch ; '\'
.text:0040BF64                 jz      short loc_40BF50
.text:0040BF66                 jmp     loc_40BD92
.text:0040BF6B ; ---------------------------------------------------------------------------
.text:0040BF6B
.text:0040BF6B loc_40BF6B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040BF6B                                         ; _win32_longpath+53↑j
.text:0040BF6B                 mov     edi, [esp+278h+lpFileName]
.text:0040BF72                 movzx   edx, byte ptr [edi+1]
.text:0040BF76                 cmp     dl, 2Fh ; '/'
.text:0040BF79                 jz      short loc_40BF84
.text:0040BF7B                 cmp     dl, 5Ch ; '\'
.text:0040BF7E                 jnz     loc_40BD69
.text:0040BF84
.text:0040BF84 loc_40BF84:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040BF84                 mov     esi, [esp+278h+lpFileName]
.text:0040BF8B                 mov     [ebp+268h+Destination], al
.text:0040BF8E                 mov     ecx, [esp+278h+lpFileName]
.text:0040BF95                 inc     ebp
.text:0040BF96                 add     esi, 2
.text:0040BF99                 movzx   ebx, byte ptr [ecx+1]
.text:0040BF9D                 mov     [ebp+268h+Destination], bl
.text:0040BFA0                 inc     ebp
.text:0040BFA1                 movzx   eax, byte ptr [ecx+2]
.text:0040BFA5                 test    al, al
.text:0040BFA7                 jz      loc_40C083
.text:0040BFAD                 cmp     al, 2Fh ; '/'
.text:0040BFAF                 jz      loc_40C068
.text:0040BFB5                 cmp     al, 5Ch ; '\'
.text:0040BFB7                 mov     bl, al
.text:0040BFB9                 jz      loc_40C068
.text:0040BFBF
.text:0040BFBF loc_40BFBF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040BFBF                                         ; _win32_longpath+376↓j
.text:0040BFBF                 test    bl, bl
.text:0040BFC1                 jz      loc_40BD69
.text:0040BFC7                 cmp     bl, 2Fh ; '/'
.text:0040BFCA                 jz      short loc_40BFEB
.text:0040BFCC                 cmp     bl, 5Ch ; '\'
.text:0040BFCF                 jz      short loc_40BFEB
.text:0040BFD1
.text:0040BFD1 loc_40BFD1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040BFD1                 mov     [ebp+268h+Destination], bl
.text:0040BFD4                 inc     esi
.text:0040BFD5                 inc     ebp
.text:0040BFD6                 movzx   ebx, byte ptr [esi]
.text:0040BFD9                 test    bl, bl
.text:0040BFDB                 jz      loc_40BD69
.text:0040BFE1                 cmp     bl, 2Fh ; '/'
.text:0040BFE4                 jz      short loc_40BFEB
.text:0040BFE6                 cmp     bl, 5Ch ; '\'
.text:0040BFE9                 jnz     short loc_40BFD1
.text:0040BFEB
.text:0040BFEB loc_40BFEB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040BFEB                                         ; _win32_longpath+2BF↑j ...
.text:0040BFEB                 test    bl, bl
.text:0040BFED                 jz      loc_40BD69
.text:0040BFF3                 mov     [ebp+268h+Destination], bl
.text:0040BFF6                 inc     esi
.text:0040BFF7                 inc     ebp
.text:0040BFF8                 movzx   ebx, byte ptr [esi]
.text:0040BFFB                 test    bl, bl
.text:0040BFFD                 jz      loc_40BD69
.text:0040C003                 cmp     bl, 2Fh ; '/'
.text:0040C006                 jz      short loc_40C050
.text:0040C008                 cmp     bl, 5Ch ; '\'
.text:0040C00B                 jz      short loc_40C050
.text:0040C00D
.text:0040C00D loc_40C00D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040C00D                 test    bl, bl
.text:0040C00F                 jz      loc_40BD69
.text:0040C015                 cmp     bl, 2Fh ; '/'
.text:0040C018                 jz      loc_40BD69
.text:0040C01E                 cmp     bl, 5Ch ; '\'
.text:0040C021                 jz      loc_40BD69
.text:0040C027
.text:0040C027 loc_40C027:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040C027                 mov     [ebp+268h+Destination], bl
.text:0040C02A                 inc     esi
.text:0040C02B                 inc     ebp
.text:0040C02C                 movzx   ebx, byte ptr [esi]
.text:0040C02F                 test    bl, bl
.text:0040C031                 jz      loc_40BD69
.text:0040C037                 cmp     bl, 2Fh ; '/'
.text:0040C03A                 jz      loc_40BD69
.text:0040C040                 cmp     bl, 5Ch ; '\'
.text:0040C043                 jnz     short loc_40C027
.text:0040C045                 jmp     loc_40BD69
.text:0040C045 ; ---------------------------------------------------------------------------
.text:0040C04A                 align 10h
.text:0040C050
.text:0040C050 loc_40C050:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040C050                                         ; _win32_longpath+2FB↑j ...
.text:0040C050                 inc     esi
.text:0040C051                 movzx   ebx, byte ptr [esi]
.text:0040C054                 test    bl, bl
.text:0040C056                 jz      loc_40BD69
.text:0040C05C                 cmp     bl, 2Fh ; '/'
.text:0040C05F                 jz      short loc_40C050
.text:0040C061                 cmp     bl, 5Ch ; '\'
.text:0040C064                 jz      short loc_40C050
.text:0040C066                 jmp     short loc_40C00D
.text:0040C068 ; ---------------------------------------------------------------------------
.text:0040C068
.text:0040C068 loc_40C068:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040C068                                         ; _win32_longpath+2A9↑j ...
.text:0040C068                 inc     esi
.text:0040C069                 movzx   ebx, byte ptr [esi]
.text:0040C06C                 test    bl, bl
.text:0040C06E                 jz      loc_40BD69
.text:0040C074                 cmp     bl, 2Fh ; '/'
.text:0040C077                 jz      short loc_40C068
.text:0040C079                 cmp     bl, 5Ch ; '\'
.text:0040C07C                 jz      short loc_40C068
.text:0040C07E                 jmp     loc_40BFBF
.text:0040C083 ; ---------------------------------------------------------------------------
.text:0040C083
.text:0040C083 loc_40C083:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040C083                 movzx   ebx, byte ptr [esi]
.text:0040C086                 jmp     loc_40BFBF
.text:0040C08B ; ---------------------------------------------------------------------------
.text:0040C08B
.text:0040C08B loc_40C08B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040C08B                 movzx   ecx, byte ptr [eax]
.text:0040C08E                 mov     esi, eax
.text:0040C090                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040C095                 add     esi, 2
.text:0040C098                 lea     ebp, [esp+12h]
.text:0040C09C                 mov     [esp+278h+Destination], cl
.text:0040C0A0                 jmp     loc_40BD69
.text:0040C0A0 _win32_longpath endp
.text:0040C0A0
.text:0040C0A0 ; ---------------------------------------------------------------------------
.text:0040C0A5                 align 10h
.text:0040C0B0                 sub     esp, 0Ch
.text:0040C0B3                 mov     edx, [esp+10h]
.text:0040C0B7                 mov     dword ptr [esp+4], 0
.text:0040C0BF                 mov     [esp], edx
.text:0040C0C2                 call    sub_40E010
.text:0040C0C7                 inc     eax
.text:0040C0C8                 setnz   dl
.text:0040C0CB                 add     esp, 0Ch
.text:0040C0CE                 movzx   eax, dl
.text:0040C0D1                 retn
.text:0040C0D1 ; ---------------------------------------------------------------------------
.text:0040C0D2                 align 10h
.text:0040C0E0
.text:0040C0E0 ; =============== S U B R O U T I N E =======================================
.text:0040C0E0
.text:0040C0E0
.text:0040C0E0 sub_40C0E0      proc near               ; CODE XREF: sub_40DEE0+AA↓p
.text:0040C0E0                                         ; sub_40FA90+B4↓p
.text:0040C0E0
.text:0040C0E0 arg_0           = dword ptr  4
.text:0040C0E0
.text:0040C0E0                 mov     ecx, [esp+arg_0]
.text:0040C0E4                 mov     edx, ecx
.text:0040C0E6                 movzx   eax, byte ptr [ecx]
.text:0040C0E9                 test    al, al
.text:0040C0EB                 jz      short loc_40C0FC
.text:0040C0ED                 lea     esi, [esi+0]
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: sub_40C0E0+1A↓j
.text:0040C0F0                 cmp     al, 5Ch ; '\'
.text:0040C0F2                 jz      short loc_40C100
.text:0040C0F4
.text:0040C0F4 loc_40C0F4:                             ; CODE XREF: sub_40C0E0+23↓j
.text:0040C0F4                 inc     edx
.text:0040C0F5                 movzx   eax, byte ptr [edx]
.text:0040C0F8                 test    al, al
.text:0040C0FA                 jnz     short loc_40C0F0
.text:0040C0FC
.text:0040C0FC loc_40C0FC:                             ; CODE XREF: sub_40C0E0+B↑j
.text:0040C0FC                 mov     eax, ecx
.text:0040C0FE                 retn
.text:0040C0FE ; ---------------------------------------------------------------------------
.text:0040C0FF                 align 10h
.text:0040C100
.text:0040C100 loc_40C100:                             ; CODE XREF: sub_40C0E0+12↑j
.text:0040C100                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040C103                 jmp     short loc_40C0F4
.text:0040C103 sub_40C0E0      endp
.text:0040C103
.text:0040C103 ; ---------------------------------------------------------------------------
.text:0040C105                 align 10h
.text:0040C110                 push    ebx
.text:0040C111                 sub     esp, 8
.text:0040C114                 mov     ebx, [esp+14h]
.text:0040C118                 mov     edx, [esp+10h]
.text:0040C11C                 mov     [esp], ebx
.text:0040C11F                 mov     [esp+4], edx
.text:0040C123                 call    strcpy
.text:0040C128                 movzx   eax, byte ptr [ebx]
.text:0040C12B                 mov     edx, ebx
.text:0040C12D                 test    al, al
.text:0040C12F                 jz      short loc_40C14C
.text:0040C131                 jmp     short loc_40C140
.text:0040C131 ; ---------------------------------------------------------------------------
.text:0040C133                 align 10h
.text:0040C140
.text:0040C140 loc_40C140:                             ; CODE XREF: .text:0040C131↑j
.text:0040C140                                         ; .text:0040C14A↓j
.text:0040C140                 cmp     al, 5Ch ; '\'
.text:0040C142                 jz      short loc_40C153
.text:0040C144
.text:0040C144 loc_40C144:                             ; CODE XREF: .text:0040C156↓j
.text:0040C144                 inc     edx
.text:0040C145                 movzx   eax, byte ptr [edx]
.text:0040C148                 test    al, al
.text:0040C14A                 jnz     short loc_40C140
.text:0040C14C
.text:0040C14C loc_40C14C:                             ; CODE XREF: .text:0040C12F↑j
.text:0040C14C                 add     esp, 8
.text:0040C14F                 xor     eax, eax
.text:0040C151                 pop     ebx
.text:0040C152                 retn
.text:0040C153 ; ---------------------------------------------------------------------------
.text:0040C153
.text:0040C153 loc_40C153:                             ; CODE XREF: .text:0040C142↑j
.text:0040C153                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040C156                 jmp     short loc_40C144
.text:0040C156 ; ---------------------------------------------------------------------------
.text:0040C158                 align 10h
.text:0040C160
.text:0040C160 ; =============== S U B R O U T I N E =======================================
.text:0040C160
.text:0040C160
.text:0040C160 sub_40C160      proc near               ; CODE XREF: sub_40A960+16↑p
.text:0040C160                                         ; sub_40AE60+1F↑p ...
.text:0040C160
.text:0040C160 arg_0           = dword ptr  4
.text:0040C160
.text:0040C160                 mov     ecx, [esp+arg_0]
.text:0040C164                 mov     edx, ecx
.text:0040C166                 movzx   eax, byte ptr [ecx]
.text:0040C169                 test    al, al
.text:0040C16B                 jz      short loc_40C17C
.text:0040C16D                 lea     esi, [esi+0]
.text:0040C170
.text:0040C170 loc_40C170:                             ; CODE XREF: sub_40C160+1A↓j
.text:0040C170                 cmp     al, 2Fh ; '/'
.text:0040C172                 jz      short loc_40C180
.text:0040C174
.text:0040C174 loc_40C174:                             ; CODE XREF: sub_40C160+23↓j
.text:0040C174                 inc     edx
.text:0040C175                 movzx   eax, byte ptr [edx]
.text:0040C178                 test    al, al
.text:0040C17A                 jnz     short loc_40C170
.text:0040C17C
.text:0040C17C loc_40C17C:                             ; CODE XREF: sub_40C160+B↑j
.text:0040C17C                 mov     eax, ecx
.text:0040C17E                 retn
.text:0040C17E ; ---------------------------------------------------------------------------
.text:0040C17F                 align 10h
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: sub_40C160+12↑j
.text:0040C180                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C183                 jmp     short loc_40C174
.text:0040C183 sub_40C160      endp
.text:0040C183
.text:0040C183 ; ---------------------------------------------------------------------------
.text:0040C185                 align 10h
.text:0040C190                 push    ebx
.text:0040C191                 sub     esp, 8
.text:0040C194                 mov     ebx, [esp+14h]
.text:0040C198                 mov     edx, [esp+10h]
.text:0040C19C                 mov     [esp], ebx
.text:0040C19F                 mov     [esp+4], edx
.text:0040C1A3                 call    strcpy
.text:0040C1A8                 movzx   eax, byte ptr [ebx]
.text:0040C1AB                 mov     edx, ebx
.text:0040C1AD                 test    al, al
.text:0040C1AF                 jz      short loc_40C1CC
.text:0040C1B1                 jmp     short loc_40C1C0
.text:0040C1B1 ; ---------------------------------------------------------------------------
.text:0040C1B3                 align 10h
.text:0040C1C0
.text:0040C1C0 loc_40C1C0:                             ; CODE XREF: .text:0040C1B1↑j
.text:0040C1C0                                         ; .text:0040C1CA↓j
.text:0040C1C0                 cmp     al, 2Fh ; '/'
.text:0040C1C2                 jz      short loc_40C1D3
.text:0040C1C4
.text:0040C1C4 loc_40C1C4:                             ; CODE XREF: .text:0040C1D6↓j
.text:0040C1C4                 inc     edx
.text:0040C1C5                 movzx   eax, byte ptr [edx]
.text:0040C1C8                 test    al, al
.text:0040C1CA                 jnz     short loc_40C1C0
.text:0040C1CC
.text:0040C1CC loc_40C1CC:                             ; CODE XREF: .text:0040C1AF↑j
.text:0040C1CC                 add     esp, 8
.text:0040C1CF                 xor     eax, eax
.text:0040C1D1                 pop     ebx
.text:0040C1D2                 retn
.text:0040C1D3 ; ---------------------------------------------------------------------------
.text:0040C1D3
.text:0040C1D3 loc_40C1D3:                             ; CODE XREF: .text:0040C1C2↑j
.text:0040C1D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C1D6                 jmp     short loc_40C1C4
.text:0040C1D6 ; ---------------------------------------------------------------------------
.text:0040C1D8                 align 10h
.text:0040C1E0                 push    ebx
.text:0040C1E1                 sub     esp, 8
.text:0040C1E4                 mov     ebx, [esp+14h]
.text:0040C1E8                 mov     edx, [esp+10h]
.text:0040C1EC                 mov     [esp+4], ebx
.text:0040C1F0                 mov     [esp], edx
.text:0040C1F3                 call    sub_40DE90
.text:0040C1F8                 movzx   eax, byte ptr [ebx]
.text:0040C1FB                 mov     edx, ebx
.text:0040C1FD                 test    al, al
.text:0040C1FF                 jz      short loc_40C21C
.text:0040C201                 jmp     short loc_40C210
.text:0040C201 ; ---------------------------------------------------------------------------
.text:0040C203                 align 10h
.text:0040C210
.text:0040C210 loc_40C210:                             ; CODE XREF: .text:0040C201↑j
.text:0040C210                                         ; .text:0040C21A↓j
.text:0040C210                 cmp     al, 2Fh ; '/'
.text:0040C212                 jz      short loc_40C223
.text:0040C214
.text:0040C214 loc_40C214:                             ; CODE XREF: .text:0040C226↓j
.text:0040C214                 inc     edx
.text:0040C215                 movzx   eax, byte ptr [edx]
.text:0040C218                 test    al, al
.text:0040C21A                 jnz     short loc_40C210
.text:0040C21C
.text:0040C21C loc_40C21C:                             ; CODE XREF: .text:0040C1FF↑j
.text:0040C21C                 add     esp, 8
.text:0040C21F                 xor     eax, eax
.text:0040C221                 pop     ebx
.text:0040C222                 retn
.text:0040C223 ; ---------------------------------------------------------------------------
.text:0040C223
.text:0040C223 loc_40C223:                             ; CODE XREF: .text:0040C212↑j
.text:0040C223                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C226                 jmp     short loc_40C214
.text:0040C226 ; ---------------------------------------------------------------------------
.text:0040C228                 align 10h
.text:0040C230                 push    ebx
.text:0040C231                 sub     esp, 8
.text:0040C234                 mov     ebx, [esp+14h]
.text:0040C238                 mov     edx, [esp+10h]
.text:0040C23C                 mov     [esp], ebx
.text:0040C23F                 mov     [esp+4], edx
.text:0040C243                 call    sub_40DE90
.text:0040C248                 movzx   eax, byte ptr [ebx]
.text:0040C24B                 mov     edx, ebx
.text:0040C24D                 test    al, al
.text:0040C24F                 jz      short loc_40C26C
.text:0040C251                 jmp     short loc_40C260
.text:0040C251 ; ---------------------------------------------------------------------------
.text:0040C253                 align 10h
.text:0040C260
.text:0040C260 loc_40C260:                             ; CODE XREF: .text:0040C251↑j
.text:0040C260                                         ; .text:0040C26A↓j
.text:0040C260                 cmp     al, 5Ch ; '\'
.text:0040C262                 jz      short loc_40C271
.text:0040C264
.text:0040C264 loc_40C264:                             ; CODE XREF: .text:0040C274↓j
.text:0040C264                 inc     edx
.text:0040C265                 movzx   eax, byte ptr [edx]
.text:0040C268                 test    al, al
.text:0040C26A                 jnz     short loc_40C260
.text:0040C26C
.text:0040C26C loc_40C26C:                             ; CODE XREF: .text:0040C24F↑j
.text:0040C26C                 add     esp, 8
.text:0040C26F                 pop     ebx
.text:0040C270                 retn
.text:0040C271 ; ---------------------------------------------------------------------------
.text:0040C271
.text:0040C271 loc_40C271:                             ; CODE XREF: .text:0040C262↑j
.text:0040C271                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040C274                 jmp     short loc_40C264
.text:0040C274 ; ---------------------------------------------------------------------------
.text:0040C276                 align 10h
.text:0040C280
.text:0040C280 ; =============== S U B R O U T I N E =======================================
.text:0040C280
.text:0040C280
.text:0040C280 ; int __cdecl sub_40C280(LPSTR)
.text:0040C280 sub_40C280      proc near               ; CODE XREF: .text:0040C30E↓p
.text:0040C280                                         ; .text:0040C34E↓p ...
.text:0040C280
.text:0040C280 hModule         = dword ptr -1Ch
.text:0040C280 lpFilename      = dword ptr -18h
.text:0040C280 nSize           = dword ptr -14h
.text:0040C280 arg_0           = dword ptr  4
.text:0040C280
.text:0040C280                 push    esi
.text:0040C281                 push    ebx
.text:0040C282                 sub     esp, 14h
.text:0040C285                 mov     esi, [esp+1Ch+arg_0]
.text:0040C289                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040C291                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040C298                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040C29C                 call    GetModuleFileNameA
.text:0040C2A1                 sub     esp, 0Ch
.text:0040C2A4                 test    eax, eax
.text:0040C2A6                 jz      short loc_40C2E8
.text:0040C2A8                 cmp     eax, 104h
.text:0040C2AD                 jg      short loc_40C2D9
.text:0040C2AF
.text:0040C2AF loc_40C2AF:                             ; CODE XREF: sub_40C280+66↓j
.text:0040C2AF                                         ; sub_40C280+78↓j
.text:0040C2AF                 movzx   eax, byte ptr [esi]
.text:0040C2B2                 mov     edx, esi
.text:0040C2B4                 test    al, al
.text:0040C2B6                 jz      short loc_40C2CC
.text:0040C2B8                 nop
.text:0040C2B9                 lea     esi, [esi+0]
.text:0040C2C0
.text:0040C2C0 loc_40C2C0:                             ; CODE XREF: sub_40C280+4A↓j
.text:0040C2C0                 cmp     al, 5Ch ; '\'
.text:0040C2C2                 jz      short loc_40C2D4
.text:0040C2C4
.text:0040C2C4 loc_40C2C4:                             ; CODE XREF: sub_40C280+57↓j
.text:0040C2C4                 inc     edx
.text:0040C2C5                 movzx   eax, byte ptr [edx]
.text:0040C2C8                 test    al, al
.text:0040C2CA                 jnz     short loc_40C2C0
.text:0040C2CC
.text:0040C2CC loc_40C2CC:                             ; CODE XREF: sub_40C280+36↑j
.text:0040C2CC                 add     esp, 14h
.text:0040C2CF                 mov     eax, esi
.text:0040C2D1                 pop     ebx
.text:0040C2D2                 pop     esi
.text:0040C2D3                 retn
.text:0040C2D4 ; ---------------------------------------------------------------------------
.text:0040C2D4
.text:0040C2D4 loc_40C2D4:                             ; CODE XREF: sub_40C280+42↑j
.text:0040C2D4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040C2D7                 jmp     short loc_40C2C4
.text:0040C2D9 ; ---------------------------------------------------------------------------
.text:0040C2D9
.text:0040C2D9 loc_40C2D9:                             ; CODE XREF: sub_40C280+2D↑j
.text:0040C2D9                 call    _errno
.text:0040C2DE                 mov     dword ptr [eax], 26h ; '&'
.text:0040C2E4                 xor     esi, esi
.text:0040C2E6                 jmp     short loc_40C2AF
.text:0040C2E8 ; ---------------------------------------------------------------------------
.text:0040C2E8
.text:0040C2E8 loc_40C2E8:                             ; CODE XREF: sub_40C280+26↑j
.text:0040C2E8                 call    sub_40DE70
.text:0040C2ED                 mov     ebx, eax
.text:0040C2EF                 xor     esi, esi
.text:0040C2F1                 call    _errno
.text:0040C2F6                 mov     [eax], ebx
.text:0040C2F8                 jmp     short loc_40C2AF
.text:0040C2F8 sub_40C280      endp
.text:0040C2F8
.text:0040C2F8 ; ---------------------------------------------------------------------------
.text:0040C2FA                 align 10h
.text:0040C300                 sub     esp, 0Ch
.text:0040C303                 mov     [esp+8], ebx
.text:0040C307                 mov     ebx, [esp+10h]
.text:0040C30B                 mov     [esp], ebx
.text:0040C30E                 call    sub_40C280
.text:0040C313                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040C31B                 mov     [esp], ebx
.text:0040C31E                 call    strrchr
.text:0040C323                 test    eax, eax
.text:0040C325                 jz      short loc_40C32A
.text:0040C327                 lea     ebx, [eax+1]
.text:0040C32A
.text:0040C32A loc_40C32A:                             ; CODE XREF: .text:0040C325↑j
.text:0040C32A                 mov     eax, ebx
.text:0040C32C                 mov     ebx, [esp+8]
.text:0040C330                 add     esp, 0Ch
.text:0040C333                 retn
.text:0040C333 ; ---------------------------------------------------------------------------
.text:0040C334                 align 10h
.text:0040C340                 sub     esp, 0Ch
.text:0040C343                 mov     [esp+8], ebx
.text:0040C347                 mov     ebx, [esp+10h]
.text:0040C34B                 mov     [esp], ebx
.text:0040C34E                 call    sub_40C280
.text:0040C353                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040C35B                 mov     [esp], ebx
.text:0040C35E                 call    strrchr
.text:0040C363                 test    eax, eax
.text:0040C365                 jz      short loc_40C36A
.text:0040C367                 mov     byte ptr [eax], 0
.text:0040C36A
.text:0040C36A loc_40C36A:                             ; CODE XREF: .text:0040C365↑j
.text:0040C36A                 mov     eax, ebx
.text:0040C36C                 mov     ebx, [esp+8]
.text:0040C370                 add     esp, 0Ch
.text:0040C373                 retn
.text:0040C373 ; ---------------------------------------------------------------------------
.text:0040C374                 align 10h
.text:0040C380                 sub     esp, 0Ch
.text:0040C383                 mov     [esp+8], ebx
.text:0040C387                 mov     ebx, [esp+10h]
.text:0040C38B                 mov     [esp], ebx
.text:0040C38E                 call    sub_40C280
.text:0040C393                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040C39B                 mov     [esp], ebx
.text:0040C39E                 call    strrchr
.text:0040C3A3                 test    eax, eax
.text:0040C3A5                 jz      short loc_40C3AA
.text:0040C3A7                 mov     byte ptr [eax], 0
.text:0040C3AA
.text:0040C3AA loc_40C3AA:                             ; CODE XREF: .text:0040C3A5↑j
.text:0040C3AA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040C3B2                 mov     [esp], ebx
.text:0040C3B5                 call    strrchr
.text:0040C3BA                 test    eax, eax
.text:0040C3BC                 jz      short loc_40C3C1
.text:0040C3BE                 mov     byte ptr [eax], 0
.text:0040C3C1
.text:0040C3C1 loc_40C3C1:                             ; CODE XREF: .text:0040C3BC↑j
.text:0040C3C1                 mov     eax, ebx
.text:0040C3C3                 mov     ebx, [esp+8]
.text:0040C3C7                 add     esp, 0Ch
.text:0040C3CA                 retn
.text:0040C3CA ; ---------------------------------------------------------------------------
.text:0040C3CB                 align 10h
.text:0040C3D0                 sub     esp, 1Ch
.text:0040C3D3                 mov     edx, [esp+20h]
.text:0040C3D7                 mov     [esp+10h], ebx
.text:0040C3DB                 xor     ebx, ebx
.text:0040C3DD                 mov     [esp+14h], esi
.text:0040C3E1                 mov     [esp+18h], edi
.text:0040C3E5                 mov     [esp], edx
.text:0040C3E8                 call    sub_40DEC0
.text:0040C3ED                 mov     edx, [esp+24h]
.text:0040C3F1                 mov     edi, eax
.text:0040C3F3                 mov     [esp], edx
.text:0040C3F6                 call    sub_40DEC0
.text:0040C3FB                 mov     [esp+4], eax
.text:0040C3FF                 mov     esi, eax
.text:0040C401                 mov     [esp], edi
.text:0040C404                 call    _stricmp_0
.text:0040C409                 mov     [esp], edi
.text:0040C40C                 test    eax, eax
.text:0040C40E                 setz    bl
.text:0040C411                 call    free
.text:0040C416                 mov     [esp], esi
.text:0040C419                 call    free
.text:0040C41E                 mov     eax, ebx
.text:0040C420                 mov     esi, [esp+14h]
.text:0040C424                 mov     ebx, [esp+10h]
.text:0040C428                 mov     edi, [esp+18h]
.text:0040C42C                 add     esp, 1Ch
.text:0040C42F                 retn
.text:0040C430 ; ---------------------------------------------------------------------------
.text:0040C430                 xor     eax, eax
.text:0040C432                 retn
.text:0040C432 ; ---------------------------------------------------------------------------
.text:0040C433 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040C467↓o
.text:0040C440 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040C476↓o
.text:0040C450 ; ---------------------------------------------------------------------------
.text:0040C450                 sub     esp, 1Ch
.text:0040C453                 mov     [esp+10h], ebx
.text:0040C457                 mov     ebx, [esp+20h]
.text:0040C45B                 mov     [esp+18h], edi
.text:0040C45F                 mov     edi, [esp+24h]
.text:0040C463                 mov     [esp+14h], esi
.text:0040C467                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040C46E                 call    GetModuleHandleA
.text:0040C473                 sub     esp, 4
.text:0040C476                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040C47E                 mov     [esp], eax
.text:0040C481                 call    GetProcAddress
.text:0040C486                 sub     esp, 8
.text:0040C489                 test    eax, eax
.text:0040C48B                 jz      short loc_40C4A3
.text:0040C48D                 mov     dword ptr [esp+8], 104h
.text:0040C495                 mov     [esp+4], ebx
.text:0040C499                 mov     [esp], edi
.text:0040C49C                 call    eax
.text:0040C49E                 sub     esp, 0Ch
.text:0040C4A1                 mov     esi, eax
.text:0040C4A3
.text:0040C4A3 loc_40C4A3:                             ; CODE XREF: .text:0040C48B↑j
.text:0040C4A3                 test    esi, esi
.text:0040C4A5                 jz      short loc_40C4C0
.text:0040C4A7
.text:0040C4A7 loc_40C4A7:                             ; CODE XREF: .text:0040C4DB↓j
.text:0040C4A7                 mov     eax, ebx
.text:0040C4A9                 mov     esi, [esp+14h]
.text:0040C4AD                 mov     ebx, [esp+10h]
.text:0040C4B1                 mov     edi, [esp+18h]
.text:0040C4B5                 add     esp, 1Ch
.text:0040C4B8                 retn
.text:0040C4B8 ; ---------------------------------------------------------------------------
.text:0040C4B9                 align 10h
.text:0040C4C0
.text:0040C4C0 loc_40C4C0:                             ; CODE XREF: .text:0040C4A5↑j
.text:0040C4C0                 call    sub_40E950
.text:0040C4C5                 mov     [esp], ebx
.text:0040C4C8                 mov     [esp+4], edi
.text:0040C4CC                 call    strcpy
.text:0040C4D1                 mov     [esp], ebx
.text:0040C4D4                 call    _win32_longpath
.text:0040C4D9                 mov     ebx, eax
.text:0040C4DB                 jmp     short loc_40C4A7
.text:0040C4DB ; ---------------------------------------------------------------------------
.text:0040C4DD                 align 10h
.text:0040C4E0                 sub     esp, 1Ch
.text:0040C4E3                 mov     [esp+18h], edi
.text:0040C4E7                 mov     edi, [esp+20h]
.text:0040C4EB                 mov     [esp+10h], ebx
.text:0040C4EF                 mov     [esp+14h], esi
.text:0040C4F3                 mov     dword ptr [esp+8], 0
.text:0040C4FB                 mov     dword ptr [esp+4], 0
.text:0040C503                 mov     [esp], edi
.text:0040C506                 call    GetShortPathNameA
.text:0040C50B                 sub     esp, 0Ch
.text:0040C50E                 mov     ebx, eax
.text:0040C510                 test    eax, eax
.text:0040C512                 jz      short loc_40C560
.text:0040C514                 lea     edx, [eax+1]
.text:0040C517                 mov     [esp], edx
.text:0040C51A                 call    malloc
.text:0040C51F                 test    eax, eax
.text:0040C521                 mov     esi, eax
.text:0040C523                 jz      short loc_40C560
.text:0040C525                 mov     [esp+8], ebx
.text:0040C529                 mov     [esp+4], eax
.text:0040C52D                 mov     [esp], edi
.text:0040C530                 call    GetShortPathNameA
.text:0040C535                 sub     esp, 0Ch
.text:0040C538                 mov     edx, esi
.text:0040C53A                 test    eax, eax
.text:0040C53C                 jz      short loc_40C552
.text:0040C53E                 mov     esi, esi
.text:0040C540
.text:0040C540 loc_40C540:                             ; CODE XREF: .text:0040C570↓j
.text:0040C540                 mov     ebx, [esp+10h]
.text:0040C544                 mov     eax, edx
.text:0040C546                 mov     esi, [esp+14h]
.text:0040C54A                 mov     edi, [esp+18h]
.text:0040C54E                 add     esp, 1Ch
.text:0040C551                 retn
.text:0040C552 ; ---------------------------------------------------------------------------
.text:0040C552
.text:0040C552 loc_40C552:                             ; CODE XREF: .text:0040C53C↑j
.text:0040C552                 mov     [esp], esi
.text:0040C555                 call    free
.text:0040C55A                 lea     esi, [esi+0]
.text:0040C560
.text:0040C560 loc_40C560:                             ; CODE XREF: .text:0040C512↑j
.text:0040C560                                         ; .text:0040C523↑j
.text:0040C560                 call    sub_40DE70
.text:0040C565                 mov     esi, eax
.text:0040C567                 call    _errno
.text:0040C56C                 mov     [eax], esi
.text:0040C56E                 mov     edx, edi
.text:0040C570                 jmp     short loc_40C540
.text:0040C570 ; ---------------------------------------------------------------------------
.text:0040C572                 align 10h
.text:0040C580
.text:0040C580 ; =============== S U B R O U T I N E =======================================
.text:0040C580
.text:0040C580
.text:0040C580 sub_40C580      proc near               ; DATA XREF: sub_40C590+186↓o
.text:0040C580                 sub     al, [eax]
.text:0040C582                 lea     esi, [esi+0]
.text:0040C589                 lea     edi, [edi+0]
.text:0040C589 sub_40C580      endp
.text:0040C589
.text:0040C590
.text:0040C590 ; =============== S U B R O U T I N E =======================================
.text:0040C590
.text:0040C590
.text:0040C590 sub_40C590      proc near               ; CODE XREF: sub_404260+103↑p
.text:0040C590
.text:0040C590 hFindFile       = dword ptr -2DCh
.text:0040C590 lpFindFileData  = dword ptr -2D8h
.text:0040C590 Count           = dword ptr -2D4h
.text:0040C590 Destination     = byte ptr -2CCh
.text:0040C590 var_1BC         = dword ptr -1BCh
.text:0040C590 var_1B4         = dword ptr -1B4h
.text:0040C590 var_1B0         = dword ptr -1B0h
.text:0040C590 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040C590 arg_0           = dword ptr  4
.text:0040C590
.text:0040C590                 push    ebp
.text:0040C591                 push    edi
.text:0040C592                 push    esi
.text:0040C593                 push    ebx
.text:0040C594                 sub     esp, 2CCh
.text:0040C59A                 mov     ebp, [esp+2DCh+arg_0]
.text:0040C5A1                 test    ebp, ebp
.text:0040C5A3                 mov     ebx, [ebp+4]
.text:0040C5A6                 jz      loc_40C75D
.text:0040C5AC                 mov     edx, [ebp+0]
.text:0040C5AF                 cmp     edx, 0FFFFFFFFh
.text:0040C5B2                 jz      loc_40C6E7
.text:0040C5B8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0040C5BB                 lea     ecx, [esp+2DCh+FindFileData]
.text:0040C5C2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:0040C5C6                 call    FindNextFileA
.text:0040C5CB                 sub     esp, 8
.text:0040C5CE                 test    eax, eax
.text:0040C5D0                 jz      loc_40C6DB
.text:0040C5D6
.text:0040C5D6 loc_40C5D6:                             ; CODE XREF: sub_40C590+1BC↓j
.text:0040C5D6                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040C5DE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:0040C5E5                 mov     esi, [ebx]
.text:0040C5E7                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0040C5EB                 lea     esi, [ebx+14h]
.text:0040C5EE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040C5F1                 call    strncpy
.text:0040C5F6                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040C5FE                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040C602                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040C605                 call    strncat
.text:0040C60A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0040C60E                 lea     edx, [esp+2DCh+var_1BC]
.text:0040C615                 mov     [esp+2DCh+Count], edx ; int
.text:0040C619                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:0040C620                 call    sub_40BCC0
.text:0040C625                 test    eax, eax
.text:0040C627                 jnz     loc_40C6C9
.text:0040C62D                 mov     ecx, [esp+2DCh+var_1BC]
.text:0040C634                 and     ecx, 0F000h
.text:0040C63A                 shr     ecx, 0Ch
.text:0040C63D                 mov     [ebx+12h], cl
.text:0040C640                 mov     ecx, edi
.text:0040C642                 lea     esi, [esi+0]
.text:0040C649                 lea     edi, [edi+0]
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: sub_40C590+D5↓j
.text:0040C650                 mov     eax, [ecx]
.text:0040C652                 add     ecx, 4
.text:0040C655                 lea     edx, [eax-1010101h]
.text:0040C65B                 not     eax
.text:0040C65D                 and     edx, eax
.text:0040C65F                 and     edx, 80808080h
.text:0040C665                 jz      short loc_40C650
.text:0040C667                 test    edx, 8080h
.text:0040C66D                 jnz     short loc_40C675
.text:0040C66F                 shr     edx, 10h
.text:0040C672                 add     ecx, 2
.text:0040C675
.text:0040C675 loc_40C675:                             ; CODE XREF: sub_40C590+DD↑j
.text:0040C675                 mov     word ptr [ebx+10h], 110h
.text:0040C67B                 add     dl, dl
.text:0040C67D                 sbb     ecx, 3
.text:0040C680                 sub     ecx, edi
.text:0040C682                 mov     [ebx+13h], cl
.text:0040C685                 mov     edx, [esp+2DCh+var_1B4]
.text:0040C68C                 mov     ecx, [esp+2DCh+var_1B0]
.text:0040C693                 mov     [ebx+8], edx
.text:0040C696                 mov     [ebx+0Ch], ecx
.text:0040C699                 mov     [esp+2DCh+Count], 104h ; Count
.text:0040C6A1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:0040C6A5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040C6A8                 call    strncpy
.text:0040C6AD                 inc     dword ptr [ebp+14h]
.text:0040C6B0                 call    _errno
.text:0040C6B5                 mov     dword ptr [eax], 0
.text:0040C6BB                 lea     eax, [ebx+8]
.text:0040C6BE
.text:0040C6BE loc_40C6BE:                             ; CODE XREF: sub_40C590+149↓j
.text:0040C6BE                 add     esp, 2CCh
.text:0040C6C4                 pop     ebx
.text:0040C6C5                 pop     esi
.text:0040C6C6                 pop     edi
.text:0040C6C7                 pop     ebp
.text:0040C6C8                 retn
.text:0040C6C9 ; ---------------------------------------------------------------------------
.text:0040C6C9
.text:0040C6C9 loc_40C6C9:                             ; CODE XREF: sub_40C590+97↑j
.text:0040C6C9                                         ; sub_40C590+153↓j ...
.text:0040C6C9                 call    sub_40DE70
.text:0040C6CE                 mov     ebp, eax
.text:0040C6D0                 call    _errno
.text:0040C6D5                 mov     [eax], ebp
.text:0040C6D7
.text:0040C6D7 loc_40C6D7:                             ; CODE XREF: sub_40C590+155↓j
.text:0040C6D7                                         ; sub_40C590+1D8↓j
.text:0040C6D7                 xor     eax, eax
.text:0040C6D9                 jmp     short loc_40C6BE
.text:0040C6DB ; ---------------------------------------------------------------------------
.text:0040C6DB
.text:0040C6DB loc_40C6DB:                             ; CODE XREF: sub_40C590+40↑j
.text:0040C6DB                 call    GetLastError
.text:0040C6E0                 cmp     eax, 12h
.text:0040C6E3                 jnz     short loc_40C6C9
.text:0040C6E5                 jmp     short loc_40C6D7
.text:0040C6E7 ; ---------------------------------------------------------------------------
.text:0040C6E7
.text:0040C6E7 loc_40C6E7:                             ; CODE XREF: sub_40C590+22↑j
.text:0040C6E7                 mov     edx, [ebx]
.text:0040C6E9                 lea     esi, [esp+2DCh+Destination]
.text:0040C6ED                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040C6F0                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:0040C6F4                 call    strcpy
.text:0040C6F9                 mov     ecx, esi
.text:0040C6FB                 nop
.text:0040C6FC                 lea     esi, [esi+0]
.text:0040C700
.text:0040C700 loc_40C700:                             ; CODE XREF: sub_40C590+184↓j
.text:0040C700                 mov     edi, [ecx]
.text:0040C702                 add     ecx, 4
.text:0040C705                 lea     eax, [edi-1010101h]
.text:0040C70B                 not     edi
.text:0040C70D                 and     eax, edi
.text:0040C70F                 test    eax, 80808080h
.text:0040C714                 jz      short loc_40C700
.text:0040C716                 mov     [esp+2DCh+lpFindFileData], offset sub_40C580 ; Source
.text:0040C71E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:0040C721                 call    strcat
.text:0040C726                 mov     [esp+2DCh+hFindFile], esi
.text:0040C729                 call    sub_40C160
.text:0040C72E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:0040C731                 lea     edx, [esp+2DCh+FindFileData]
.text:0040C738                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0040C73C                 call    FindFirstFileA
.text:0040C741                 sub     esp, 8
.text:0040C744                 cmp     eax, 0FFFFFFFFh
.text:0040C747                 jz      short loc_40C751
.text:0040C749                 mov     [ebp+0], eax
.text:0040C74C                 jmp     loc_40C5D6
.text:0040C751 ; ---------------------------------------------------------------------------
.text:0040C751
.text:0040C751 loc_40C751:                             ; CODE XREF: sub_40C590+1B7↑j
.text:0040C751                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:0040C758                 jmp     loc_40C6C9
.text:0040C75D ; ---------------------------------------------------------------------------
.text:0040C75D
.text:0040C75D loc_40C75D:                             ; CODE XREF: sub_40C590+16↑j
.text:0040C75D                 call    _errno
.text:0040C762                 mov     dword ptr [eax], 9
.text:0040C768                 jmp     loc_40C6D7
.text:0040C768 sub_40C590      endp
.text:0040C768
.text:0040C768 ; ---------------------------------------------------------------------------
.text:0040C76D                 align 10h
.text:0040C770 ; const char String[4]
.text:0040C770 String          db ' :/',0              ; DATA XREF: sub_40C780+FA↓o
.text:0040C774                 align 10h
.text:0040C780
.text:0040C780 ; =============== S U B R O U T I N E =======================================
.text:0040C780
.text:0040C780
.text:0040C780 ; int __cdecl sub_40C780(LPCSTR)
.text:0040C780 sub_40C780      proc near               ; CODE XREF: sub_40A960+E↑p
.text:0040C780                                         ; sub_40AE60+17↑p ...
.text:0040C780
.text:0040C780 Str             = dword ptr -1Ch
.text:0040C780 Val             = dword ptr -18h
.text:0040C780 Count           = dword ptr -14h
.text:0040C780 var_10          = dword ptr -10h
.text:0040C780 var_C           = dword ptr -0Ch
.text:0040C780 var_8           = dword ptr -8
.text:0040C780 var_4           = dword ptr -4
.text:0040C780 arg_0           = dword ptr  4
.text:0040C780
.text:0040C780                 sub     esp, 1Ch
.text:0040C783                 mov     edx, [esp+1Ch+arg_0]
.text:0040C787                 mov     [esp+1Ch+var_8], edi
.text:0040C78B                 mov     [esp+1Ch+var_10], ebx
.text:0040C78F                 mov     [esp+1Ch+var_C], esi
.text:0040C793                 mov     [esp+1Ch+var_4], ebp
.text:0040C797                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040C79A                 call    sub_40DEC0
.text:0040C79F                 test    eax, eax
.text:0040C7A1                 mov     edi, eax
.text:0040C7A3                 jz      short loc_40C7E0
.text:0040C7A5                 mov     [esp+1Ch+Str], eax ; Str
.text:0040C7A8                 call    strlen
.text:0040C7AD                 cmp     eax, 2
.text:0040C7B0                 jbe     short loc_40C7BC
.text:0040C7B2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040C7B6                 jz      loc_40C870
.text:0040C7BC
.text:0040C7BC loc_40C7BC:                             ; CODE XREF: sub_40C780+30↑j
.text:0040C7BC                                         ; sub_40C780+F4↓j
.text:0040C7BC                 test    edi, edi
.text:0040C7BE                 jz      short loc_40C7E0
.text:0040C7C0                 mov     [esp+1Ch+Str], edi ; Str
.text:0040C7C3                 call    strlen
.text:0040C7C8                 cmp     eax, 4
.text:0040C7CB                 mov     ebp, eax
.text:0040C7CD                 jle     short loc_40C7E0
.text:0040C7CF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040C7D2                 jz      short loc_40C800
.text:0040C7D4                 lea     esi, [esi+0]
.text:0040C7DA                 lea     edi, [edi+0]
.text:0040C7E0
.text:0040C7E0 loc_40C7E0:                             ; CODE XREF: sub_40C780+23↑j
.text:0040C7E0                                         ; sub_40C780+3E↑j ...
.text:0040C7E0                 xor     esi, esi
.text:0040C7E2
.text:0040C7E2 loc_40C7E2:                             ; CODE XREF: sub_40C780+CD↓j
.text:0040C7E2                                         ; sub_40C780+115↓j
.text:0040C7E2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040C7E5                 call    free
.text:0040C7EA                 mov     eax, esi
.text:0040C7EC                 mov     ebx, [esp+1Ch+var_10]
.text:0040C7F0                 mov     esi, [esp+1Ch+var_C]
.text:0040C7F4                 mov     edi, [esp+1Ch+var_8]
.text:0040C7F8                 mov     ebp, [esp+1Ch+var_4]
.text:0040C7FC                 add     esp, 1Ch
.text:0040C7FF                 retn
.text:0040C800 ; ---------------------------------------------------------------------------
.text:0040C800
.text:0040C800 loc_40C800:                             ; CODE XREF: sub_40C780+52↑j
.text:0040C800                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040C804                 jnz     short loc_40C7E0
.text:0040C806                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040C80E                 lea     ecx, [edi+2]
.text:0040C811                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040C814                 call    strchr
.text:0040C819                 test    eax, eax
.text:0040C81B                 jnz     short loc_40C84F
.text:0040C81D
.text:0040C81D loc_40C81D:                             ; CODE XREF: sub_40C780+E2↓j
.text:0040C81D                 inc     ebp
.text:0040C81E
.text:0040C81E loc_40C81E:                             ; CODE XREF: sub_40C780+E9↓j
.text:0040C81E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040C826                 lea     ebx, [ebp+1]
.text:0040C829                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040C82C                 call    calloc
.text:0040C831                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040C834                 mov     esi, eax
.text:0040C836                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040C83A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040C83E                 call    strncpy
.text:0040C843                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040C848                 mov     byte ptr [ebp+esi+0], 0
.text:0040C84D                 jmp     short loc_40C7E2
.text:0040C84F ; ---------------------------------------------------------------------------
.text:0040C84F
.text:0040C84F loc_40C84F:                             ; CODE XREF: sub_40C780+9B↑j
.text:0040C84F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040C857                 inc     eax
.text:0040C858                 mov     [esp+1Ch+Str], eax ; Str
.text:0040C85B                 call    strchr
.text:0040C860                 test    eax, eax
.text:0040C862                 jz      short loc_40C81D
.text:0040C864                 sub     eax, edi
.text:0040C866                 lea     ebp, [eax+1]
.text:0040C869                 jmp     short loc_40C81E
.text:0040C869 ; ---------------------------------------------------------------------------
.text:0040C86B                 align 10h
.text:0040C870
.text:0040C870 loc_40C870:                             ; CODE XREF: sub_40C780+36↑j
.text:0040C870                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040C874                 jnz     loc_40C7BC
.text:0040C87A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040C881                 call    _strdup
.text:0040C886                 movsx   edx, byte ptr [edi]
.text:0040C889                 mov     esi, eax
.text:0040C88B                 mov     [esp+1Ch+Str], edx ; C
.text:0040C88E                 call    toupper
.text:0040C893                 mov     [esi], al
.text:0040C895                 jmp     loc_40C7E2
.text:0040C895 sub_40C780      endp
.text:0040C895
.text:0040C895 ; ---------------------------------------------------------------------------
.text:0040C89A                 align 10h
.text:0040C8A0
.text:0040C8A0 ; =============== S U B R O U T I N E =======================================
.text:0040C8A0
.text:0040C8A0
.text:0040C8A0 sub_40C8A0      proc near               ; CODE XREF: .text:0040C9F4↓p
.text:0040C8A0                                         ; .text:0040CAD8↓p
.text:0040C8A0
.text:0040C8A0 Str             = dword ptr -2Ch
.text:0040C8A0 Val             = dword ptr -28h
.text:0040C8A0 var_18          = dword ptr -18h
.text:0040C8A0 var_11          = byte ptr -11h
.text:0040C8A0 arg_0           = dword ptr  4
.text:0040C8A0
.text:0040C8A0                 push    ebp
.text:0040C8A1                 push    edi
.text:0040C8A2                 push    esi
.text:0040C8A3                 push    ebx
.text:0040C8A4                 sub     esp, 1Ch
.text:0040C8A7                 mov     edx, [esp+2Ch+arg_0]
.text:0040C8AB                 cmp     edx, ds:dword_4151E0
.text:0040C8B1                 mov     [esp+2Ch+var_11], 0
.text:0040C8B6                 jz      loc_40C9B4
.text:0040C8BC                 mov     ebx, ds:dword_4151D0
.text:0040C8C2                 test    ebx, ebx
.text:0040C8C4                 jz      short loc_40C932
.text:0040C8C6
.text:0040C8C6 loc_40C8C6:                             ; CODE XREF: sub_40C8A0+10F↓j
.text:0040C8C6                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C8CA                 xor     edi, edi
.text:0040C8CC                 xor     esi, esi
.text:0040C8CE                 mov     ebp, offset dword_4151F8
.text:0040C8D3                 lea     esi, [esi+0]
.text:0040C8D9                 lea     edi, [edi+0]
.text:0040C8E0
.text:0040C8E0 loc_40C8E0:                             ; CODE XREF: sub_40C8A0+60↓j
.text:0040C8E0                 mov     edx, [ebp+4]
.text:0040C8E3                 mov     ecx, edi
.text:0040C8E5                 mov     eax, [ebp+0]
.text:0040C8E8                 shl     ecx, 4
.text:0040C8EB                 mov     [esp+2Ch+var_18], ecx
.text:0040C8EF                 mov     ecx, edx
.text:0040C8F1                 xor     eax, ebx
.text:0040C8F3                 xor     ecx, esi
.text:0040C8F5                 or      ecx, eax
.text:0040C8F7                 jz      short loc_40C921
.text:0040C8F9                 inc     edi
.text:0040C8FA                 add     ebp, 10h
.text:0040C8FD                 cmp     edi, 20h ; ' '
.text:0040C900                 jle     short loc_40C8E0
.text:0040C902
.text:0040C902 loc_40C902:                             ; CODE XREF: sub_40C8A0+90↓j
.text:0040C902                 movzx   ebx, [esp+2Ch+var_11]
.text:0040C907                 mov     eax, [esp+2Ch+arg_0]
.text:0040C90B                 mov     byte_414070, bl
.text:0040C911                 mov     ds:dword_4151E0, eax
.text:0040C916                 movsx   eax, bl
.text:0040C919
.text:0040C919 loc_40C919:                             ; CODE XREF: sub_40C8A0+11B↓j
.text:0040C919                 add     esp, 1Ch
.text:0040C91C                 pop     ebx
.text:0040C91D                 pop     esi
.text:0040C91E                 pop     edi
.text:0040C91F                 pop     ebp
.text:0040C920                 retn
.text:0040C921 ; ---------------------------------------------------------------------------
.text:0040C921
.text:0040C921 loc_40C921:                             ; CODE XREF: sub_40C8A0+57↑j
.text:0040C921                 mov     edx, [esp+2Ch+var_18]
.text:0040C925                 movzx   eax, byte ptr ds:dword_4151F0[edx]
.text:0040C92C                 mov     [esp+2Ch+var_11], al
.text:0040C930                 jmp     short loc_40C902
.text:0040C932 ; ---------------------------------------------------------------------------
.text:0040C932
.text:0040C932 loc_40C932:                             ; CODE XREF: sub_40C8A0+24↑j
.text:0040C932                 mov     [esp+2Ch+Str], 0
.text:0040C939                 call    sub_40F730
.text:0040C93E                 test    eax, eax
.text:0040C940                 mov     ebx, eax
.text:0040C942                 jz      short loc_40C99C
.text:0040C944                 movzx   ecx, byte ptr [eax]
.text:0040C947                 mov     esi, 0FFFFFFF0h
.text:0040C94C                 test    cl, cl
.text:0040C94E                 jz      short loc_40C99C
.text:0040C950
.text:0040C950 loc_40C950:                             ; CODE XREF: sub_40C8A0+FA↓j
.text:0040C950                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040C953                 movsx   ebp, cl
.text:0040C956                 add     esi, 10h
.text:0040C959                 mov     ds:dword_4151F0[esi], ebp
.text:0040C95F                 mov     edi, ebp
.text:0040C961                 sar     edi, 1Fh
.text:0040C964                 mov     ds:dword_4151F4[esi], edi
.text:0040C96A                 call    sub_40AE60
.text:0040C96F                 mov     ds:dword_4151F8[esi], eax
.text:0040C975                 xor     ecx, ecx
.text:0040C977                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040C97A                 mov     ds:dword_4151FC[esi], ecx
.text:0040C980                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040C988                 call    strchr
.text:0040C98D                 mov     ebx, eax
.text:0040C98F                 inc     ebx
.text:0040C990                 jz      short loc_40C99C
.text:0040C992                 movzx   edx, byte ptr [eax+1]
.text:0040C996                 test    dl, dl
.text:0040C998                 mov     cl, dl
.text:0040C99A                 jnz     short loc_40C950
.text:0040C99C
.text:0040C99C loc_40C99C:                             ; CODE XREF: sub_40C8A0+A2↑j
.text:0040C99C                                         ; sub_40C8A0+AE↑j ...
.text:0040C99C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040C99F                 mov     esi, 1
.text:0040C9A4                 mov     ds:dword_4151D0, esi
.text:0040C9AA                 call    free
.text:0040C9AF                 jmp     loc_40C8C6
.text:0040C9B4 ; ---------------------------------------------------------------------------
.text:0040C9B4
.text:0040C9B4 loc_40C9B4:                             ; CODE XREF: sub_40C8A0+16↑j
.text:0040C9B4                 movsx   eax, byte_414070
.text:0040C9BB                 jmp     loc_40C919
.text:0040C9BB sub_40C8A0      endp
.text:0040C9BB
.text:0040C9BB ; ---------------------------------------------------------------------------
.text:0040C9C0 dword_40C9C0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040C9C0                                         ; DATA XREF: .text:0040C9E3↓o
.text:0040C9C0                                         ; .text:0040CAC3↓o
.text:0040C9D0 ; ---------------------------------------------------------------------------
.text:0040C9D0                 sub     esp, 1Ch
.text:0040C9D3                 mov     [esp+14h], esi
.text:0040C9D7                 mov     esi, [esp+20h]
.text:0040C9DB                 mov     [esp+18h], edi
.text:0040C9DF                 mov     [esp+10h], ebx
.text:0040C9E3                 mov     dword ptr [esp], offset dword_40C9C0
.text:0040C9EA                 call    _strdup
.text:0040C9EF                 mov     [esp], esi
.text:0040C9F2                 mov     edi, eax
.text:0040C9F4                 call    sub_40C8A0
.text:0040C9F9                 mov     [edi], al
.text:0040C9FB                 test    al, al
.text:0040C9FD                 jz      short loc_40CA11
.text:0040C9FF                 mov     eax, edi
.text:0040CA01                 mov     ebx, [esp+10h]
.text:0040CA05                 mov     esi, [esp+14h]
.text:0040CA09                 mov     edi, [esp+18h]
.text:0040CA0D                 add     esp, 1Ch
.text:0040CA10                 retn
.text:0040CA11 ; ---------------------------------------------------------------------------
.text:0040CA11
.text:0040CA11 loc_40CA11:                             ; CODE XREF: .text:0040C9FD↑j
.text:0040CA11                 mov     [esp], edi
.text:0040CA14                 call    free
.text:0040CA19                 mov     dword ptr [esp+4], 0
.text:0040CA21                 mov     dword ptr [esp], 0
.text:0040CA28                 call    GetCurrentDirectoryA
.text:0040CA2D                 sub     esp, 8
.text:0040CA30                 lea     esi, [eax+1]
.text:0040CA33                 mov     [esp], esi
.text:0040CA36                 call    malloc
.text:0040CA3B                 mov     [esp+4], eax
.text:0040CA3F                 mov     edi, eax
.text:0040CA41                 mov     [esp], esi
.text:0040CA44                 call    GetCurrentDirectoryA
.text:0040CA49                 sub     esp, 8
.text:0040CA4C                 test    eax, eax
.text:0040CA4E                 jnz     short loc_40CA70
.text:0040CA50                 mov     dword ptr [esp+20h], 40C9C4h
.text:0040CA58                 mov     ebx, [esp+10h]
.text:0040CA5C                 mov     esi, [esp+14h]
.text:0040CA60                 mov     edi, [esp+18h]
.text:0040CA64                 add     esp, 1Ch
.text:0040CA67                 jmp     _strdup
.text:0040CA67 ; ---------------------------------------------------------------------------
.text:0040CA6C                 align 10h
.text:0040CA70
.text:0040CA70 loc_40CA70:                             ; CODE XREF: .text:0040CA4E↑j
.text:0040CA70                 mov     [esp+20h], edi
.text:0040CA74                 mov     ebx, [esp+10h]
.text:0040CA78                 mov     esi, [esp+14h]
.text:0040CA7C                 mov     edi, [esp+18h]
.text:0040CA80                 add     esp, 1Ch
.text:0040CA83                 jmp     sub_40C780
.text:0040CA83 ; ---------------------------------------------------------------------------
.text:0040CA88                 align 10h
.text:0040CA90                 sub     esp, 7Ch
.text:0040CA93                 lea     edx, [esp+10h]
.text:0040CA97                 mov     [esp+8], edx
.text:0040CA9B                 mov     edx, [esp+80h]
.text:0040CAA2                 mov     [esp+70h], ebx
.text:0040CAA6                 mov     [esp+74h], esi
.text:0040CAAA                 mov     [esp+4], edx
.text:0040CAAE                 mov     [esp+78h], edi
.text:0040CAB2                 mov     dword ptr [esp], 0
.text:0040CAB9                 call    sub_40A0B0
.text:0040CABE                 xor     edx, edx
.text:0040CAC0                 inc     eax
.text:0040CAC1                 jz      short loc_40CAE5
.text:0040CAC3                 mov     dword ptr [esp], offset dword_40C9C0
.text:0040CACA                 mov     esi, [esp+20h]
.text:0040CACE                 call    _strdup
.text:0040CAD3                 mov     edi, eax
.text:0040CAD5                 mov     [esp], esi
.text:0040CAD8                 call    sub_40C8A0
.text:0040CADD                 mov     [edi], al
.text:0040CADF                 test    al, al
.text:0040CAE1                 mov     edx, edi
.text:0040CAE3                 jz      short loc_40CAF7
.text:0040CAE5
.text:0040CAE5 loc_40CAE5:                             ; CODE XREF: .text:0040CAC1↑j
.text:0040CAE5                                         ; .text:0040CB44↓j
.text:0040CAE5                 mov     ebx, [esp+70h]
.text:0040CAE9                 mov     eax, edx
.text:0040CAEB                 mov     esi, [esp+74h]
.text:0040CAEF                 mov     edi, [esp+78h]
.text:0040CAF3                 add     esp, 7Ch
.text:0040CAF6                 retn
.text:0040CAF7 ; ---------------------------------------------------------------------------
.text:0040CAF7
.text:0040CAF7 loc_40CAF7:                             ; CODE XREF: .text:0040CAE3↑j
.text:0040CAF7                 mov     [esp], edi
.text:0040CAFA                 call    free
.text:0040CAFF                 mov     dword ptr [esp+4], 0
.text:0040CB07                 mov     dword ptr [esp], 0
.text:0040CB0E                 call    GetCurrentDirectoryA
.text:0040CB13                 sub     esp, 8
.text:0040CB16                 lea     esi, [eax+1]
.text:0040CB19                 mov     [esp], esi
.text:0040CB1C                 call    malloc
.text:0040CB21                 mov     [esp+4], eax
.text:0040CB25                 mov     edi, eax
.text:0040CB27                 mov     [esp], esi
.text:0040CB2A                 call    GetCurrentDirectoryA
.text:0040CB2F                 sub     esp, 8
.text:0040CB32                 test    eax, eax
.text:0040CB34                 jnz     short loc_40CB46
.text:0040CB36                 mov     dword ptr [esp], 40C9C4h
.text:0040CB3D                 call    _strdup
.text:0040CB42
.text:0040CB42 loc_40CB42:                             ; CODE XREF: .text:0040CB4E↓j
.text:0040CB42                 mov     edx, eax
.text:0040CB44                 jmp     short loc_40CAE5
.text:0040CB46 ; ---------------------------------------------------------------------------
.text:0040CB46
.text:0040CB46 loc_40CB46:                             ; CODE XREF: .text:0040CB34↑j
.text:0040CB46                 mov     [esp], edi
.text:0040CB49                 call    sub_40C780
.text:0040CB4E                 jmp     short loc_40CB42
.text:0040CB50
.text:0040CB50 ; =============== S U B R O U T I N E =======================================
.text:0040CB50
.text:0040CB50
.text:0040CB50 ; int __cdecl sub_40CB50(LPCSTR)
.text:0040CB50 sub_40CB50      proc near               ; CODE XREF: sub_40A310+12F↑p
.text:0040CB50
.text:0040CB50 String1         = dword ptr -1Ch
.text:0040CB50 String2         = dword ptr -18h
.text:0040CB50 var_C           = dword ptr -0Ch
.text:0040CB50 var_8           = dword ptr -8
.text:0040CB50 var_4           = dword ptr -4
.text:0040CB50 arg_0           = dword ptr  4
.text:0040CB50
.text:0040CB50                 sub     esp, 1Ch
.text:0040CB53                 mov     [esp+1Ch+var_4], edi
.text:0040CB57                 mov     edi, [esp+1Ch+arg_0]
.text:0040CB5B                 mov     [esp+1Ch+var_C], ebx
.text:0040CB5F                 mov     [esp+1Ch+var_8], esi
.text:0040CB63                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040CB66                 call    sub_40DEC0
.text:0040CB6B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040CB6E                 mov     esi, eax
.text:0040CB70                 call    sub_40C780
.text:0040CB75                 mov     [esp+1Ch+String2], eax ; String2
.text:0040CB79                 mov     ebx, eax
.text:0040CB7B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040CB7E                 call    _stricmp
.text:0040CB83                 test    eax, eax
.text:0040CB85                 setz    dl
.text:0040CB88                 test    esi, esi
.text:0040CB8A                 movzx   edi, dl
.text:0040CB8D                 jz      short loc_40CB97
.text:0040CB8F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040CB92                 call    free
.text:0040CB97
.text:0040CB97 loc_40CB97:                             ; CODE XREF: sub_40CB50+3D↑j
.text:0040CB97                 test    ebx, ebx
.text:0040CB99                 jz      short loc_40CBA3
.text:0040CB9B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040CB9E                 call    free
.text:0040CBA3
.text:0040CBA3 loc_40CBA3:                             ; CODE XREF: sub_40CB50+49↑j
.text:0040CBA3                 mov     eax, edi
.text:0040CBA5                 mov     ebx, [esp+1Ch+var_C]
.text:0040CBA9                 mov     esi, [esp+1Ch+var_8]
.text:0040CBAD                 mov     edi, [esp+1Ch+var_4]
.text:0040CBB1                 add     esp, 1Ch
.text:0040CBB4                 retn
.text:0040CBB4 sub_40CB50      endp
.text:0040CBB4
.text:0040CBB4 ; ---------------------------------------------------------------------------
.text:0040CBB5                 align 10h
.text:0040CBC0
.text:0040CBC0 ; =============== S U B R O U T I N E =======================================
.text:0040CBC0
.text:0040CBC0
.text:0040CBC0 ; int __cdecl sub_40CBC0(char *, int)
.text:0040CBC0 sub_40CBC0      proc near               ; CODE XREF: sub_401E90+4F7↑p
.text:0040CBC0                                         ; sub_402B60+537↑p ...
.text:0040CBC0
.text:0040CBC0 var_C           = dword ptr -0Ch
.text:0040CBC0 var_8           = dword ptr -8
.text:0040CBC0 var_4           = dword ptr -4
.text:0040CBC0 arg_0           = dword ptr  4
.text:0040CBC0 arg_4           = dword ptr  8
.text:0040CBC0
.text:0040CBC0                 sub     esp, 0Ch
.text:0040CBC3                 mov     edx, [esp+0Ch+arg_4]
.text:0040CBC7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040CBCE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040CBD2                 mov     edx, [esp+0Ch+arg_0]
.text:0040CBD6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040CBDA                 call    sub_40D470
.text:0040CBDF                 add     esp, 0Ch
.text:0040CBE2                 retn
.text:0040CBE2 sub_40CBC0      endp
.text:0040CBE2
.text:0040CBE2 ; ---------------------------------------------------------------------------
.text:0040CBE3                 align 10h
.text:0040CBF0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040CC41↓o
.text:0040CBF9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040CBF9                                         ; DATA XREF: .text:0040CC52↓o
.text:0040CC0D ; const CHAR aVwin32[]
.text:0040CC0D aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040CD9C↓o
.text:0040CC0D                                         ; sub_40D1D0+17C↓o
.text:0040CC18 ; ---------------------------------------------------------------------------
.text:0040CC18
.text:0040CC18 loc_40CC18:                             ; DATA XREF: .text:0040CEB2↓o
.text:0040CC18                 dec     esi
.text:0040CC19                 push    esp
.text:0040CC1A                 inc     esi
.text:0040CC1B                 push    ebx
.text:0040CC1C                 add     [esi+41h], al
.text:0040CC1F                 push    esp
.text:0040CC20                 xor     esi, [edx]
.text:0040CC22                 add     [esi+41h], al
.text:0040CC25                 push    esp
.text:0040CC26                 add     [ebx+44h], al
.text:0040CC29                 inc     esi
.text:0040CC2A                 push    ebx
.text:0040CC2B
.text:0040CC2B loc_40CC2B:                             ; CODE XREF: sub_40D1D0+101↓p
.text:0040CC2B                 add     [ebp+55002674h], cl
.text:0040CC31                 push    edi
.text:0040CC32                 push    esi
.text:0040CC33                 push    ebx
.text:0040CC34                 sub     esp, 8BCh
.text:0040CC3A                 mov     ebp, [esp+8D0h]
.text:0040CC41                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040CC48                 call    LoadLibraryA
.text:0040CC4D                 sub     esp, 4
.text:0040CC50                 mov     edi, eax
.text:0040CC52                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040CC5A                 mov     [esp], eax
.text:0040CC5D                 call    GetProcAddress
.text:0040CC62                 sub     esp, 8
.text:0040CC65                 mov     esi, eax
.text:0040CC67                 test    ebp, ebp
.text:0040CC69                 mov     dword ptr [esp+20h], 0
.text:0040CC71                 jz      loc_40D1B1
.text:0040CC77                 mov     [esp], ebp
.text:0040CC7A                 call    sub_40C160
.text:0040CC7F                 mov     [esp], eax
.text:0040CC82                 mov     ebp, eax
.text:0040CC84                 call    strlen
.text:0040CC89                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040CC8E                 mov     ebx, eax
.text:0040CC90                 jz      short loc_40CCAC
.text:0040CC92                 mov     [esp], ebp
.text:0040CC95                 lea     edx, [eax+1]
.text:0040CC98                 mov     [esp+4], edx
.text:0040CC9C                 call    realloc
.text:0040CCA1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040CCA5                 mov     ebp, eax
.text:0040CCA7                 mov     byte ptr [ebx+eax+1], 0
.text:0040CCAC
.text:0040CCAC loc_40CCAC:                             ; CODE XREF: .text:0040CC90↑j
.text:0040CCAC                 mov     dword ptr [esp+1Ch], 400h
.text:0040CCB4                 lea     edx, [esp+0B0h]
.text:0040CCBB                 lea     ebx, [esp+5Ch]
.text:0040CCBF                 mov     [esp+18h], edx
.text:0040CCC3                 lea     ecx, [esp+58h]
.text:0040CCC7                 lea     edx, [esp+54h]
.text:0040CCCB                 mov     [esp+14h], ebx
.text:0040CCCF                 lea     eax, [esp+4B0h]
.text:0040CCD6                 mov     [esp+10h], ecx
.text:0040CCDA                 mov     [esp+0Ch], edx
.text:0040CCDE                 mov     dword ptr [esp+8], 400h
.text:0040CCE6                 mov     [esp+4], eax
.text:0040CCEA                 mov     [esp], ebp
.text:0040CCED                 call    GetVolumeInformationA
.text:0040CCF2                 sub     esp, 20h
.text:0040CCF5                 test    eax, eax
.text:0040CCF7                 jz      loc_40D18E
.text:0040CCFD                 test    esi, esi
.text:0040CCFF                 jz      short loc_40CD25
.text:0040CD01                 mov     [esp], ebp
.text:0040CD04                 lea     edx, [esp+48h]
.text:0040CD08                 lea     ebx, [esp+40h]
.text:0040CD0C                 mov     [esp+0Ch], edx
.text:0040CD10                 lea     ecx, [esp+38h]
.text:0040CD14                 mov     [esp+8], ebx
.text:0040CD18                 mov     [esp+4], ecx
.text:0040CD1C                 call    esi
.text:0040CD1E                 sub     esp, 10h
.text:0040CD21                 mov     [esp+20h], eax
.text:0040CD25
.text:0040CD25 loc_40CD25:                             ; CODE XREF: .text:0040CCFF↑j
.text:0040CD25                 test    edi, edi
.text:0040CD27                 jz      short loc_40CD34
.text:0040CD29                 mov     [esp], edi
.text:0040CD2C                 call    FreeLibrary
.text:0040CD31                 sub     esp, 4
.text:0040CD34
.text:0040CD34 loc_40CD34:                             ; CODE XREF: .text:0040CD27↑j
.text:0040CD34                 call    sub_40E950
.text:0040CD39                 test    eax, eax
.text:0040CD3B                 lea     esi, [esp+28h]
.text:0040CD3F                 jz      loc_40D170
.text:0040CD45                 call    sub_40E950
.text:0040CD4A                 test    eax, eax
.text:0040CD4C                 jz      short loc_40CD5C
.text:0040CD4E                 call    sub_40E8A0
.text:0040CD53                 cmp     eax, 0Bh
.text:0040CD56                 jle     loc_40D144
.text:0040CD5C
.text:0040CD5C loc_40CD5C:                             ; CODE XREF: .text:0040CD4C↑j
.text:0040CD5C                 cld
.text:0040CD5D                 xor     eax, eax
.text:0040CD5F                 lea     ebx, [esp+60h]
.text:0040CD63                 mov     ecx, 7
.text:0040CD68                 mov     edi, ebx
.text:0040CD6A                 rep stosd
.text:0040CD6C                 mov     dword ptr [esp+18h], 0
.text:0040CD74                 mov     dword ptr [esp+14h], 4000000h
.text:0040CD7C                 mov     dword ptr [esp+10h], 0
.text:0040CD84                 mov     dword ptr [esp+0Ch], 0
.text:0040CD8C                 mov     dword ptr [esp+8], 0
.text:0040CD94                 mov     dword ptr [esp+4], 0
.text:0040CD9C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040CDA3                 call    CreateFileA
.text:0040CDA8                 sub     esp, 1Ch
.text:0040CDAB                 mov     edi, eax
.text:0040CDAD                 cmp     eax, 0FFFFFFFFh
.text:0040CDB0                 jz      short loc_40CE30
.text:0040CDB2                 mov     [esp+10h], ebx
.text:0040CDB6                 lea     edx, [esp+80h]
.text:0040CDBD                 lea     ecx, [esp+24h]
.text:0040CDC1                 mov     [esp+70h], edx
.text:0040CDC5                 mov     [esp+18h], ecx
.text:0040CDC9                 mov     [esp+8], ebx
.text:0040CDCD                 mov     dword ptr [esp+6Ch], 7303h
.text:0040CDD5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040CDDD                 mov     [esp+64h], ebp
.text:0040CDE1                 mov     dword ptr [esp+78h], 1
.text:0040CDE9                 mov     dword ptr [esp+1Ch], 0
.text:0040CDF1                 mov     dword ptr [esp+14h], 1Ch
.text:0040CDF9                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040CE01                 mov     dword ptr [esp+4], 6
.text:0040CE09                 mov     [esp], eax
.text:0040CE0C                 call    DeviceIoControl
.text:0040CE11                 sub     esp, 20h
.text:0040CE14                 mov     ebx, eax
.text:0040CE16                 mov     [esp], edi
.text:0040CE19                 call    CloseHandle
.text:0040CE1E                 sub     esp, 4
.text:0040CE21                 test    ebx, ebx
.text:0040CE23                 jz      short loc_40CE30
.text:0040CE25                 test    byte ptr [esp+78h], 1
.text:0040CE2A                 jz      loc_40D110
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: .text:0040CDB0↑j
.text:0040CE30                                         ; .text:0040CE23↑j
.text:0040CE30                 call    sub_40DE70
.text:0040CE35                 mov     edi, eax
.text:0040CE37                 call    _errno
.text:0040CE3C                 mov     [eax], edi
.text:0040CE3E                 xor     eax, eax
.text:0040CE40
.text:0040CE40 loc_40CE40:                             ; CODE XREF: .text:0040D13F↓j
.text:0040CE40                                         ; .text:0040D16B↓j
.text:0040CE40                 test    eax, eax
.text:0040CE42                 jnz     short loc_40CE64
.text:0040CE44                 mov     dword ptr [esp+34h], 1
.text:0040CE4C                 mov     dword ptr [esp+30h], 200h
.text:0040CE54                 mov     dword ptr [esp+2Ch], 0
.text:0040CE5C                 mov     dword ptr [esp+28h], 0
.text:0040CE64
.text:0040CE64 loc_40CE64:                             ; CODE XREF: .text:0040CE42↑j
.text:0040CE64                 mov     edx, [esp+30h]
.text:0040CE68                 mov     edi, [esp+34h]
.text:0040CE6C                 mov     ecx, [esp+20h]
.text:0040CE70                 imul    edi, edx
.text:0040CE73                 test    ecx, ecx
.text:0040CE75                 jnz     short loc_40CE9D
.text:0040CE77                 mov     eax, [esp+28h]
.text:0040CE7B                 mul     edi
.text:0040CE7D                 mov     esi, eax
.text:0040CE7F                 mov     eax, [esp+2Ch]
.text:0040CE83                 mov     [esp+44h], edx
.text:0040CE87                 mov     [esp+40h], esi
.text:0040CE8B                 mul     edi
.text:0040CE8D                 mov     [esp+48h], eax
.text:0040CE91                 mov     [esp+4Ch], edx
.text:0040CE95                 mov     [esp+38h], eax
.text:0040CE99                 mov     [esp+3Ch], edx
.text:0040CE9D
.text:0040CE9D loc_40CE9D:                             ; CODE XREF: .text:0040CE75↑j
.text:0040CE9D                 mov     ebx, [esp+5Ch]
.text:0040CEA1                 lea     edx, [esp+0B0h]
.text:0040CEA8                 mov     ecx, [esp+8D4h]
.text:0040CEAF                 mov     [ecx+48h], ebx
.text:0040CEB2                 mov     dword ptr [esp+4], offset loc_40CC18
.text:0040CEBA                 mov     [esp], edx
.text:0040CEBD                 call    _stricmp
.text:0040CEC2                 test    eax, eax
.text:0040CEC4                 jnz     loc_40D080
.text:0040CECA                 mov     esi, [esp+8D4h]
.text:0040CED1                 mov     dword ptr [esi], 5346544Eh
.text:0040CED7
.text:0040CED7 loc_40CED7:                             ; CODE XREF: .text:0040D0A8↓j
.text:0040CED7                                         ; .text:0040D0D5↓j ...
.text:0040CED7                 mov     ebx, [esp+30h]
.text:0040CEDB                 mov     esi, [esp+8D4h]
.text:0040CEE2                 mov     [esi+4], ebx
.text:0040CEE5                 mov     [esi+8], ebx
.text:0040CEE8                 mov     ebx, [esi+8]
.text:0040CEEB                 mov     [esi+0Ch], edi
.text:0040CEEE                 mov     ecx, [esp+44h]
.text:0040CEF2                 xor     esi, esi
.text:0040CEF4                 mov     [esp+8], ebx
.text:0040CEF8                 mov     edx, [esp+40h]
.text:0040CEFC                 mov     [esp+0Ch], esi
.text:0040CF00                 mov     [esp+4], ecx
.text:0040CF04                 mov     [esp], edx
.text:0040CF07                 call    sub_413030
.text:0040CF0C                 mov     ecx, [esp+8D4h]
.text:0040CF13                 mov     [ecx+10h], eax
.text:0040CF16                 mov     [ecx+14h], edx
.text:0040CF19                 mov     ecx, [esp+4Ch]
.text:0040CF1D                 mov     [esp+8], ebx
.text:0040CF21                 mov     edx, [esp+48h]
.text:0040CF25                 mov     [esp+0Ch], esi
.text:0040CF29                 mov     [esp+4], ecx
.text:0040CF2D                 mov     [esp], edx
.text:0040CF30                 call    sub_413030
.text:0040CF35                 mov     ecx, [esp+8D4h]
.text:0040CF3C                 mov     [ecx+18h], eax
.text:0040CF3F                 mov     [ecx+1Ch], edx
.text:0040CF42                 mov     ecx, [esp+38h]
.text:0040CF46                 mov     [esp+8], ebx
.text:0040CF4A                 mov     ebx, [esp+3Ch]
.text:0040CF4E                 mov     [esp+0Ch], esi
.text:0040CF52                 mov     [esp], ecx
.text:0040CF55                 mov     [esp+4], ebx
.text:0040CF59                 call    sub_413030
.text:0040CF5E                 mov     esi, [esp+8D4h]
.text:0040CF65                 mov     [esi+20h], eax
.text:0040CF68                 mov     [esi+24h], edx
.text:0040CF6B                 mov     ecx, [esp+44h]
.text:0040CF6F                 mov     esi, edi
.text:0040CF71                 mov     [esp+8], esi
.text:0040CF75                 mov     edx, [esp+40h]
.text:0040CF79                 xor     edi, edi
.text:0040CF7B                 mov     [esp+0Ch], edi
.text:0040CF7F                 mov     [esp+4], ecx
.text:0040CF83                 mov     [esp], edx
.text:0040CF86                 call    sub_413030
.text:0040CF8B                 mov     ebx, [esp+8D4h]
.text:0040CF92                 mov     [ebx+28h], eax
.text:0040CF95                 mov     [ebx+2Ch], edx
.text:0040CF98                 mov     ecx, [esp+4Ch]
.text:0040CF9C                 mov     [esp+8], esi
.text:0040CFA0                 mov     edx, [esp+48h]
.text:0040CFA4                 mov     [esp+0Ch], edi
.text:0040CFA8                 mov     [esp+4], ecx
.text:0040CFAC                 mov     [esp], edx
.text:0040CFAF                 call    sub_413030
.text:0040CFB4                 mov     ebx, [esp+8D4h]
.text:0040CFBB                 mov     [ebx+30h], eax
.text:0040CFBE                 mov     [ebx+34h], edx
.text:0040CFC1                 mov     ecx, [esp+3Ch]
.text:0040CFC5                 mov     [esp+8], esi
.text:0040CFC9                 mov     edx, [esp+38h]
.text:0040CFCD                 mov     [esp+0Ch], edi
.text:0040CFD1                 mov     [esp+4], ecx
.text:0040CFD5                 mov     [esp], edx
.text:0040CFD8                 call    sub_413030
.text:0040CFDD                 mov     edx, [esp+8D4h]
.text:0040CFE4                 lea     ecx, [esp+0B0h]
.text:0040CFEB                 mov     [edx+38h], eax
.text:0040CFEE                 mov     esi, [esp+58h]
.text:0040CFF2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040CFF9                 mov     [edx+110h], esi
.text:0040CFFF                 mov     esi, edx
.text:0040D001                 add     esi, 4Ch ; 'L'
.text:0040D004                 movzx   ebx, word ptr [esp+56h]
.text:0040D009                 movzx   edi, word ptr [esp+54h]
.text:0040D00E                 mov     [edx+3Ch], ebx
.text:0040D011                 lea     ebx, [esp+4B0h]
.text:0040D018                 mov     [edx+40h], edi
.text:0040D01B                 mov     [esp+4], ecx
.text:0040D01F                 mov     dword ptr [esp+8], 10h
.text:0040D027                 mov     [esp], esi
.text:0040D02A                 call    strncpy
.text:0040D02F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040D037                 mov     edi, [esp+8D4h]
.text:0040D03E                 mov     [esp+4], ebx
.text:0040D042                 add     edi, 5Ch ; '\'
.text:0040D045                 mov     [esp], edi
.text:0040D048                 call    strncpy
.text:0040D04D                 mov     [esp+4], ebp
.text:0040D051                 mov     ebp, [esp+8D4h]
.text:0040D058                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040D060                 add     ebp, 0B6h ; '¶'
.text:0040D066                 mov     [esp], ebp
.text:0040D069                 call    strncpy
.text:0040D06E                 xor     eax, eax
.text:0040D070
.text:0040D070 loc_40D070:                             ; CODE XREF: .text:0040D1AC↓j
.text:0040D070                 add     esp, 8BCh
.text:0040D076                 pop     ebx
.text:0040D077                 pop     esi
.text:0040D078                 pop     edi
.text:0040D079                 pop     ebp
.text:0040D07A                 retn
.text:0040D07A ; ---------------------------------------------------------------------------
.text:0040D07B                 align 10h
.text:0040D080
.text:0040D080 loc_40D080:                             ; CODE XREF: .text:0040CEC4↑j
.text:0040D080                 mov     dword ptr [esp+4], 40CC1Dh
.text:0040D088                 lea     eax, [esp+0B0h]
.text:0040D08F                 mov     [esp], eax
.text:0040D092                 call    _stricmp
.text:0040D097                 test    eax, eax
.text:0040D099                 jnz     short loc_40D0AD
.text:0040D09B                 mov     edx, [esp+8D4h]
.text:0040D0A2                 mov     dword ptr [edx], 4008h
.text:0040D0A8                 jmp     loc_40CED7
.text:0040D0AD ; ---------------------------------------------------------------------------
.text:0040D0AD
.text:0040D0AD loc_40D0AD:                             ; CODE XREF: .text:0040D099↑j
.text:0040D0AD                 mov     dword ptr [esp+4], 40CC23h
.text:0040D0B5                 lea     ecx, [esp+0B0h]
.text:0040D0BC                 mov     [esp], ecx
.text:0040D0BF                 call    _stricmp
.text:0040D0C4                 test    eax, eax
.text:0040D0C6                 jnz     short loc_40D0DA
.text:0040D0C8                 mov     ebx, [esp+8D4h]
.text:0040D0CF                 mov     dword ptr [ebx], 4006h
.text:0040D0D5                 jmp     loc_40CED7
.text:0040D0DA ; ---------------------------------------------------------------------------
.text:0040D0DA
.text:0040D0DA loc_40D0DA:                             ; CODE XREF: .text:0040D0C6↑j
.text:0040D0DA                 mov     dword ptr [esp+4], 40CC27h
.text:0040D0E2                 lea     eax, [esp+0B0h]
.text:0040D0E9                 mov     [esp], eax
.text:0040D0EC                 call    _stricmp
.text:0040D0F1                 test    eax, eax
.text:0040D0F3                 mov     esi, [esp+8D4h]
.text:0040D0FA                 setnz   cl
.text:0040D0FD                 movzx   edx, cl
.text:0040D100                 dec     edx
.text:0040D101                 and     edx, 4000h
.text:0040D107                 mov     [esi], edx
.text:0040D109                 jmp     loc_40CED7
.text:0040D109 ; ---------------------------------------------------------------------------
.text:0040D10E                 align 10h
.text:0040D110
.text:0040D110 loc_40D110:                             ; CODE XREF: .text:0040CE2A↑j
.text:0040D110                 mov     edi, [esp+84h]
.text:0040D117                 mov     eax, 1
.text:0040D11C                 mov     edx, [esp+88h]
.text:0040D123                 mov     ecx, [esp+8Ch]
.text:0040D12A                 mov     ebx, [esp+90h]
.text:0040D131                 mov     [esp+34h], edi
.text:0040D135                 mov     [esp+30h], edx
.text:0040D139                 mov     [esp+2Ch], ecx
.text:0040D13D                 mov     [esi], ebx
.text:0040D13F                 jmp     loc_40CE40
.text:0040D144 ; ---------------------------------------------------------------------------
.text:0040D144
.text:0040D144 loc_40D144:                             ; CODE XREF: .text:0040CD56↑j
.text:0040D144                 mov     [esp+10h], esi
.text:0040D148                 lea     eax, [esp+2Ch]
.text:0040D14C                 lea     esi, [esp+30h]
.text:0040D150                 mov     [esp+0Ch], eax
.text:0040D154                 lea     edi, [esp+34h]
.text:0040D158                 mov     [esp+8], esi
.text:0040D15C                 mov     [esp+4], edi
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: .text:0040D18C↓j
.text:0040D160                 mov     [esp], ebp
.text:0040D163                 call    GetDiskFreeSpaceA
.text:0040D168                 sub     esp, 14h
.text:0040D16B                 jmp     loc_40CE40
.text:0040D170 ; ---------------------------------------------------------------------------
.text:0040D170
.text:0040D170 loc_40D170:                             ; CODE XREF: .text:0040CD3F↑j
.text:0040D170                 mov     [esp+10h], esi
.text:0040D174                 lea     ebx, [esp+2Ch]
.text:0040D178                 lea     eax, [esp+30h]
.text:0040D17C                 mov     [esp+0Ch], ebx
.text:0040D180                 lea     esi, [esp+34h]
.text:0040D184                 mov     [esp+8], eax
.text:0040D188                 mov     [esp+4], esi
.text:0040D18C                 jmp     short loc_40D160
.text:0040D18E ; ---------------------------------------------------------------------------
.text:0040D18E
.text:0040D18E loc_40D18E:                             ; CODE XREF: .text:0040CCF7↑j
.text:0040D18E                 mov     [esp], edi
.text:0040D191                 call    FreeLibrary
.text:0040D196                 sub     esp, 4
.text:0040D199                 call    sub_40DE70
.text:0040D19E                 mov     esi, eax
.text:0040D1A0                 call    _errno
.text:0040D1A5                 mov     [eax], esi
.text:0040D1A7
.text:0040D1A7 loc_40D1A7:                             ; CODE XREF: .text:0040D1C7↓j
.text:0040D1A7                 mov     eax, 0FFFFFFFFh
.text:0040D1AC                 jmp     loc_40D070
.text:0040D1B1 ; ---------------------------------------------------------------------------
.text:0040D1B1
.text:0040D1B1 loc_40D1B1:                             ; CODE XREF: .text:0040CC71↑j
.text:0040D1B1                 mov     [esp], edi
.text:0040D1B4                 call    FreeLibrary
.text:0040D1B9                 sub     esp, 4
.text:0040D1BC                 call    _errno
.text:0040D1C1                 mov     dword ptr [eax], 2
.text:0040D1C7                 jmp     short loc_40D1A7
.text:0040D1C7 ; ---------------------------------------------------------------------------
.text:0040D1C9                 align 10h
.text:0040D1D0
.text:0040D1D0 ; =============== S U B R O U T I N E =======================================
.text:0040D1D0
.text:0040D1D0
.text:0040D1D0 ; int __cdecl sub_40D1D0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040D1D0 sub_40D1D0      proc near               ; CODE XREF: sub_40A960+2C7↑p
.text:0040D1D0                                         ; .text:0040AF9A↑p
.text:0040D1D0
.text:0040D1D0 lpFileName      = dword ptr -9Ch
.text:0040D1D0 dwDesiredAccess = dword ptr -98h
.text:0040D1D0 dwShareMode     = dword ptr -94h
.text:0040D1D0 lpSecurityAttributes= dword ptr -90h
.text:0040D1D0 dwCreationDisposition= dword ptr -8Ch
.text:0040D1D0 dwFlagsAndAttributes= dword ptr -88h
.text:0040D1D0 hTemplateFile   = dword ptr -84h
.text:0040D1D0 lpOverlapped    = dword ptr -80h
.text:0040D1D0 BytesReturned   = dword ptr -70h
.text:0040D1D0 InBuffer        = byte ptr -6Ch
.text:0040D1D0 var_68          = dword ptr -68h
.text:0040D1D0 var_64          = dword ptr -64h
.text:0040D1D0 var_60          = dword ptr -60h
.text:0040D1D0 var_5C          = dword ptr -5Ch
.text:0040D1D0 var_54          = dword ptr -54h
.text:0040D1D0 var_4C          = byte ptr -4Ch
.text:0040D1D0 var_48          = dword ptr -48h
.text:0040D1D0 var_44          = dword ptr -44h
.text:0040D1D0 var_40          = dword ptr -40h
.text:0040D1D0 var_3C          = dword ptr -3Ch
.text:0040D1D0 lpRootPathName  = dword ptr -2Ch
.text:0040D1D0 lpSectorsPerCluster= dword ptr -28h
.text:0040D1D0 lpBytesPerSector= dword ptr -24h
.text:0040D1D0 lpNumberOfFreeClusters= dword ptr -20h
.text:0040D1D0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040D1D0 var_18          = dword ptr -18h
.text:0040D1D0 var_14          = dword ptr -14h
.text:0040D1D0 var_10          = dword ptr -10h
.text:0040D1D0 var_C           = dword ptr -0Ch
.text:0040D1D0 var_8           = dword ptr -8
.text:0040D1D0 var_4           = dword ptr -4
.text:0040D1D0 arg_0           = dword ptr  4
.text:0040D1D0 arg_4           = dword ptr  8
.text:0040D1D0 arg_8           = dword ptr  0Ch
.text:0040D1D0 arg_C           = dword ptr  10h
.text:0040D1D0 arg_10          = dword ptr  14h
.text:0040D1D0
.text:0040D1D0                 sub     esp, 2Ch
.text:0040D1D3                 mov     edx, [esp+2Ch+arg_0]
.text:0040D1D7                 mov     [esp+2Ch+var_10], ebx
.text:0040D1DB                 mov     ebx, [esp+2Ch+arg_10]
.text:0040D1DF                 mov     [esp+2Ch+var_C], esi
.text:0040D1E3                 mov     esi, [esp+2Ch+arg_C]
.text:0040D1E7                 mov     [esp+2Ch+var_8], edi
.text:0040D1EB                 mov     edi, [esp+2Ch+arg_8]
.text:0040D1EF                 mov     [esp+2Ch+var_4], ebp
.text:0040D1F3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040D1F7                 mov     [esp+2Ch+var_14], edx
.text:0040D1FB                 call    sub_40E950
.text:0040D200                 test    eax, eax
.text:0040D202                 jz      short loc_40D234
.text:0040D204                 mov     [esp+2Ch+arg_10], ebx
.text:0040D208                 mov     edx, [esp+2Ch+var_14]
.text:0040D20C                 mov     ebx, [esp+2Ch+var_10]
.text:0040D210                 mov     [esp+2Ch+arg_C], esi
.text:0040D214                 mov     esi, [esp+2Ch+var_C]
.text:0040D218                 mov     [esp+2Ch+arg_8], edi
.text:0040D21C                 mov     edi, [esp+2Ch+var_8]
.text:0040D220                 mov     [esp+2Ch+arg_4], ebp
.text:0040D224                 mov     ebp, [esp+2Ch+var_4]
.text:0040D228                 mov     [esp+2Ch+arg_0], edx
.text:0040D22C                 add     esp, 2Ch
.text:0040D22F                 jmp     loc_40D2E0
.text:0040D234 ; ---------------------------------------------------------------------------
.text:0040D234
.text:0040D234 loc_40D234:                             ; CODE XREF: sub_40D1D0+32↑j
.text:0040D234                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040D238                 mov     ecx, [esp+2Ch+var_14]
.text:0040D23C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040D240                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040D244                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040D248                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040D24B                 call    GetDiskFreeSpaceA
.text:0040D250                 sub     esp, 14h
.text:0040D253                 mov     ebx, [esp+2Ch+var_10]
.text:0040D257                 mov     esi, [esp+2Ch+var_C]
.text:0040D25B                 mov     edi, [esp+2Ch+var_8]
.text:0040D25F                 mov     ebp, [esp+2Ch+var_4]
.text:0040D263                 add     esp, 2Ch
.text:0040D266                 retn
.text:0040D266 ; ---------------------------------------------------------------------------
.text:0040D267                 align 10h
.text:0040D270
.text:0040D270 loc_40D270:                             ; CODE XREF: .text:0040EC6D↓p
.text:0040D270                 sub     esp, 1Ch
.text:0040D273                 mov     [esp+1Ch+var_4], esi
.text:0040D277                 mov     esi, [esp+1Ch+arg_0]
.text:0040D27B                 mov     [esp+1Ch+var_8], ebx
.text:0040D27F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040D282                 call    sub_40C780
.text:0040D287                 test    eax, eax
.text:0040D289                 mov     ebx, eax
.text:0040D28B                 jz      short loc_40D2A0
.text:0040D28D                 cmp     byte ptr [eax], 0
.text:0040D290                 jz      short loc_40D2A0
.text:0040D292                 test    esi, esi
.text:0040D294                 jz      short loc_40D2A0
.text:0040D296                 cmp     byte ptr [esi], 0
.text:0040D299                 jnz     short loc_40D2C6
.text:0040D29B                 nop
.text:0040D29C                 lea     esi, [esi+0]
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40D1D0+BB↑j
.text:0040D2A0                                         ; sub_40D1D0+C0↑j ...
.text:0040D2A0                 call    _errno
.text:0040D2A5                 mov     dword ptr [eax], 2
.text:0040D2AB                 mov     esi, 0FFFFFFFFh
.text:0040D2B0
.text:0040D2B0 loc_40D2B0:                             ; CODE XREF: sub_40D1D0+108↓j
.text:0040D2B0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040D2B3                 call    free
.text:0040D2B8                 mov     eax, esi
.text:0040D2BA                 mov     ebx, [esp+1Ch+var_8]
.text:0040D2BE                 mov     esi, [esp+1Ch+var_4]
.text:0040D2C2                 add     esp, 1Ch
.text:0040D2C5                 retn
.text:0040D2C6 ; ---------------------------------------------------------------------------
.text:0040D2C6
.text:0040D2C6 loc_40D2C6:                             ; CODE XREF: sub_40D1D0+C9↑j
.text:0040D2C6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040D2C9                 mov     edx, [esp+1Ch+arg_4]
.text:0040D2CD                 mov     [esp+1Ch+var_18], edx
.text:0040D2D1                 call    near ptr loc_40CC2B+5
.text:0040D2D6                 mov     esi, eax
.text:0040D2D8                 jmp     short loc_40D2B0
.text:0040D2D8 ; ---------------------------------------------------------------------------
.text:0040D2DA                 align 10h
.text:0040D2E0
.text:0040D2E0 loc_40D2E0:                             ; CODE XREF: sub_40D1D0+5F↑j
.text:0040D2E0                 push    ebp
.text:0040D2E1                 push    edi
.text:0040D2E2                 push    esi
.text:0040D2E3                 push    ebx
.text:0040D2E4                 sub     esp, 8Ch
.text:0040D2EA                 mov     ebp, [esp+9Ch+arg_0]
.text:0040D2F1                 call    sub_40E950
.text:0040D2F6                 test    eax, eax
.text:0040D2F8                 jz      short loc_40D308
.text:0040D2FA                 call    sub_40E8A0
.text:0040D2FF                 cmp     eax, 0Bh
.text:0040D302                 jle     loc_40D430
.text:0040D308
.text:0040D308 loc_40D308:                             ; CODE XREF: sub_40D1D0+128↑j
.text:0040D308                 cld
.text:0040D309                 xor     eax, eax
.text:0040D30B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040D30F                 mov     ecx, 7
.text:0040D314                 mov     edi, ebx
.text:0040D316                 lea     esi, [esp+9Ch+var_4C]
.text:0040D31A                 rep stosd
.text:0040D31C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040D324                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040D32C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040D334                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040D33C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040D344                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040D34C                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040D353                 call    CreateFileA
.text:0040D358                 sub     esp, 1Ch
.text:0040D35B                 mov     edi, eax
.text:0040D35D                 cmp     eax, 0FFFFFFFFh
.text:0040D360                 jz      short loc_40D3D5
.text:0040D362                 mov     [esp+9Ch+var_68], ebp
.text:0040D366                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040D36A                 mov     [esp+9Ch+var_5C], esi
.text:0040D36E                 mov     [esp+9Ch+var_60], 7303h
.text:0040D376                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040D37E                 mov     [esp+9Ch+var_54], 1
.text:0040D386                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040D38E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040D392                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040D39A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040D39E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040D3A6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040D3AA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040D3B2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040D3B5                 call    DeviceIoControl
.text:0040D3BA                 sub     esp, 20h
.text:0040D3BD                 mov     esi, eax
.text:0040D3BF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040D3C2                 call    CloseHandle
.text:0040D3C7                 sub     esp, 4
.text:0040D3CA                 test    esi, esi
.text:0040D3CC                 jz      short loc_40D3D5
.text:0040D3CE                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040D3D3                 jz      short loc_40D3F0
.text:0040D3D5
.text:0040D3D5 loc_40D3D5:                             ; CODE XREF: sub_40D1D0+190↑j
.text:0040D3D5                                         ; sub_40D1D0+1FC↑j
.text:0040D3D5                 call    sub_40DE70
.text:0040D3DA                 mov     edi, eax
.text:0040D3DC                 call    _errno
.text:0040D3E1                 mov     [eax], edi
.text:0040D3E3                 xor     eax, eax
.text:0040D3E5
.text:0040D3E5 loc_40D3E5:                             ; CODE XREF: sub_40D1D0+25A↓j
.text:0040D3E5                                         ; sub_40D1D0+297↓j
.text:0040D3E5                 add     esp, 8Ch
.text:0040D3EB                 pop     ebx
.text:0040D3EC                 pop     esi
.text:0040D3ED                 pop     edi
.text:0040D3EE                 pop     ebp
.text:0040D3EF                 retn
.text:0040D3F0 ; ---------------------------------------------------------------------------
.text:0040D3F0
.text:0040D3F0 loc_40D3F0:                             ; CODE XREF: sub_40D1D0+203↑j
.text:0040D3F0                 mov     edx, [esp+9Ch+var_48]
.text:0040D3F4                 mov     eax, 1
.text:0040D3F9                 mov     ebx, [esp+9Ch+arg_4]
.text:0040D400                 mov     ebp, [esp+9Ch+arg_8]
.text:0040D407                 mov     ecx, [esp+9Ch+arg_C]
.text:0040D40E                 mov     [ebx], edx
.text:0040D410                 mov     edi, [esp+9Ch+var_44]
.text:0040D414                 mov     ebx, [esp+9Ch+arg_10]
.text:0040D41B                 mov     [ebp+0], edi
.text:0040D41E                 mov     esi, [esp+9Ch+var_40]
.text:0040D422                 mov     [ecx], esi
.text:0040D424                 mov     edx, [esp+9Ch+var_3C]
.text:0040D428                 mov     [ebx], edx
.text:0040D42A                 jmp     short loc_40D3E5
.text:0040D42A ; ---------------------------------------------------------------------------
.text:0040D42C                 align 10h
.text:0040D430
.text:0040D430 loc_40D430:                             ; CODE XREF: sub_40D1D0+132↑j
.text:0040D430                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040D433                 mov     eax, [esp+9Ch+arg_C]
.text:0040D43A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040D441                 mov     edx, [esp+9Ch+arg_8]
.text:0040D448                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040D44C                 mov     eax, [esp+9Ch+arg_4]
.text:0040D453                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040D457                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040D45B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040D45F                 call    GetDiskFreeSpaceA
.text:0040D464                 sub     esp, 14h
.text:0040D467                 jmp     loc_40D3E5
.text:0040D467 sub_40D1D0      endp ; sp-analysis failed
.text:0040D467
.text:0040D467 ; ---------------------------------------------------------------------------
.text:0040D46C                 align 10h
.text:0040D470
.text:0040D470 ; =============== S U B R O U T I N E =======================================
.text:0040D470
.text:0040D470
.text:0040D470 ; int __cdecl sub_40D470(LPCSTR, char *, int)
.text:0040D470 sub_40D470      proc near               ; CODE XREF: sub_40CBC0+1A↑p
.text:0040D470                                         ; sub_410E80+104↓p ...
.text:0040D470
.text:0040D470 var_13C         = dword ptr -13Ch
.text:0040D470 lpString1       = dword ptr -138h
.text:0040D470 var_134         = dword ptr -134h
.text:0040D470 String1         = byte ptr -12Ch
.text:0040D470 var_10          = dword ptr -10h
.text:0040D470 var_C           = dword ptr -0Ch
.text:0040D470 var_8           = dword ptr -8
.text:0040D470 var_4           = dword ptr -4
.text:0040D470 arg_0           = dword ptr  4
.text:0040D470 arg_4           = dword ptr  8
.text:0040D470 arg_8           = dword ptr  0Ch
.text:0040D470
.text:0040D470                 sub     esp, 13Ch
.text:0040D476                 mov     [esp+13Ch+var_10], ebx
.text:0040D47D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040D484                 mov     [esp+13Ch+var_C], esi
.text:0040D48B                 mov     esi, [esp+13Ch+arg_4]
.text:0040D492                 mov     [esp+13Ch+var_8], edi
.text:0040D499                 mov     edi, [esp+13Ch+arg_0]
.text:0040D4A0                 mov     [esp+13Ch+var_4], ebp
.text:0040D4A7                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040D4AB                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040D4AF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040D4B2                 call    sub_40BCC0
.text:0040D4B7                 cmp     eax, 0FFFFFFFFh
.text:0040D4BA                 mov     edx, eax
.text:0040D4BC                 jz      short loc_40D4CE
.text:0040D4BE                 mov     ecx, [ebx]
.text:0040D4C0                 and     ecx, 0F000h
.text:0040D4C6                 cmp     ecx, 0A000h
.text:0040D4CC                 jz      short loc_40D4F3
.text:0040D4CE
.text:0040D4CE loc_40D4CE:                             ; CODE XREF: sub_40D470+4C↑j
.text:0040D4CE                                         ; sub_40D470+A1↓j ...
.text:0040D4CE                 mov     ebx, [esp+13Ch+var_10]
.text:0040D4D5                 mov     eax, edx
.text:0040D4D7                 mov     esi, [esp+13Ch+var_C]
.text:0040D4DE                 mov     edi, [esp+13Ch+var_8]
.text:0040D4E5                 mov     ebp, [esp+13Ch+var_4]
.text:0040D4EC                 add     esp, 13Ch
.text:0040D4F2                 retn
.text:0040D4F3 ; ---------------------------------------------------------------------------
.text:0040D4F3
.text:0040D4F3 loc_40D4F3:                             ; CODE XREF: sub_40D470+5C↑j
.text:0040D4F3                 mov     [esp+13Ch+var_134], 104h
.text:0040D4FB                 lea     ebp, [esp+13Ch+String1]
.text:0040D4FF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040D503                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040D506                 call    sub_40FA90
.text:0040D50B                 inc     eax
.text:0040D50C                 mov     edx, 0FFFFFFFFh
.text:0040D511                 jz      short loc_40D4CE
.text:0040D513                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040D517                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040D51B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040D51E                 call    sub_40BCC0
.text:0040D523                 mov     edx, eax
.text:0040D525                 jmp     short loc_40D4CE
.text:0040D525 sub_40D470      endp
.text:0040D525
.text:0040D525 ; ---------------------------------------------------------------------------
.text:0040D527                 align 10h
.text:0040D530
.text:0040D530 ; =============== S U B R O U T I N E =======================================
.text:0040D530
.text:0040D530
.text:0040D530 sub_40D530      proc near               ; CODE XREF: sub_402B60+464↑p
.text:0040D530
.text:0040D530 arg_0           = dword ptr  4
.text:0040D530
.text:0040D530                 sub     esp, 0Ch
.text:0040D533                 mov     edx, [esp+0Ch+arg_0]
.text:0040D537                 test    edx, edx
.text:0040D539                 jz      short loc_40D541
.text:0040D53B                 xor     eax, eax
.text:0040D53D
.text:0040D53D loc_40D53D:                             ; CODE XREF: sub_40D530+21↓j
.text:0040D53D                 add     esp, 0Ch
.text:0040D540                 retn
.text:0040D541 ; ---------------------------------------------------------------------------
.text:0040D541
.text:0040D541 loc_40D541:                             ; CODE XREF: sub_40D530+9↑j
.text:0040D541                 call    _errno
.text:0040D546                 mov     dword ptr [eax], 16h
.text:0040D54C                 mov     eax, 0FFFFFFFFh
.text:0040D551                 jmp     short loc_40D53D
.text:0040D551 sub_40D530      endp
.text:0040D551
.text:0040D551 ; ---------------------------------------------------------------------------
.text:0040D553                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560
.text:0040D560 sub_40D560      proc near               ; CODE XREF: sub_403500+FC↑p
.text:0040D560                                         ; sub_405140+6A↑p
.text:0040D560
.text:0040D560 arg_0           = dword ptr  4
.text:0040D560
.text:0040D560                 sub     esp, 0Ch
.text:0040D563                 mov     edx, [esp+0Ch+arg_0]
.text:0040D567                 test    edx, edx
.text:0040D569                 js      short loc_40D571
.text:0040D56B                 xor     eax, eax
.text:0040D56D
.text:0040D56D loc_40D56D:                             ; CODE XREF: sub_40D560+21↓j
.text:0040D56D                 add     esp, 0Ch
.text:0040D570                 retn
.text:0040D571 ; ---------------------------------------------------------------------------
.text:0040D571
.text:0040D571 loc_40D571:                             ; CODE XREF: sub_40D560+9↑j
.text:0040D571                 call    _errno
.text:0040D576                 mov     dword ptr [eax], 16h
.text:0040D57C                 mov     eax, 0FFFFFFFFh
.text:0040D581                 jmp     short loc_40D56D
.text:0040D581 sub_40D560      endp
.text:0040D581
.text:0040D581 ; ---------------------------------------------------------------------------
.text:0040D583                 align 10h
.text:0040D590
.text:0040D590 ; =============== S U B R O U T I N E =======================================
.text:0040D590
.text:0040D590
.text:0040D590 sub_40D590      proc near               ; CODE XREF: sub_403380+61↑p
.text:0040D590                                         ; sub_403380+71↑p ...
.text:0040D590
.text:0040D590 arg_0           = dword ptr  4
.text:0040D590 arg_4           = dword ptr  8
.text:0040D590
.text:0040D590                 mov     ecx, [esp+arg_0]
.text:0040D594                 mov     edx, [esp+arg_4]
.text:0040D598                 nop
.text:0040D599                 lea     esi, [esi+0]
.text:0040D5A0
.text:0040D5A0 loc_40D5A0:                             ; CODE XREF: sub_40D590+1C↓j
.text:0040D5A0                 movzx   eax, byte ptr [edx]
.text:0040D5A3                 mov     [ecx], al
.text:0040D5A5                 inc     ecx
.text:0040D5A6                 movzx   eax, byte ptr [edx]
.text:0040D5A9                 inc     edx
.text:0040D5AA                 test    al, al
.text:0040D5AC                 jnz     short loc_40D5A0
.text:0040D5AE                 lea     eax, [ecx-1]
.text:0040D5B1                 retn
.text:0040D5B1 sub_40D590      endp
.text:0040D5B1
.text:0040D5B1 ; ---------------------------------------------------------------------------
.text:0040D5B2                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0
.text:0040D5C0 sub_40D5C0      proc near               ; CODE XREF: sub_4028B0+E↑p
.text:0040D5C0
.text:0040D5C0 var_1C          = dword ptr -1Ch
.text:0040D5C0 var_18          = dword ptr -18h
.text:0040D5C0 var_14          = dword ptr -14h
.text:0040D5C0 var_10          = dword ptr -10h
.text:0040D5C0 var_C           = dword ptr -0Ch
.text:0040D5C0 var_4           = dword ptr -4
.text:0040D5C0 arg_0           = dword ptr  4
.text:0040D5C0
.text:0040D5C0                 sub     esp, 1Ch
.text:0040D5C3                 mov     ecx, [esp+1Ch+arg_0]
.text:0040D5C7                 lea     edx, [esp+1Ch+var_4]
.text:0040D5CB                 mov     [esp+1Ch+var_C], edx ; int
.text:0040D5CF                 mov     [esp+1Ch+var_10], 400h ; int
.text:0040D5D7                 mov     [esp+1Ch+var_1C], ecx ; int
.text:0040D5DA                 mov     [esp+1Ch+var_14], offset byte_415410 ; char *
.text:0040D5E2                 mov     [esp+1Ch+var_18], offset unk_4153F0 ; int
.text:0040D5EA                 call    sub_40FB70
.text:0040D5EF                 test    eax, eax
.text:0040D5F1                 mov     ecx, [esp+1Ch+var_4]
.text:0040D5F5                 setnz   dl
.text:0040D5F8                 add     esp, 1Ch
.text:0040D5FB                 movzx   eax, dl
.text:0040D5FE                 dec     eax
.text:0040D5FF                 and     eax, ecx
.text:0040D601                 retn
.text:0040D601 sub_40D5C0      endp
.text:0040D601
.text:0040D601 ; ---------------------------------------------------------------------------
.text:0040D602                 align 10h
.text:0040D610
.text:0040D610 ; =============== S U B R O U T I N E =======================================
.text:0040D610
.text:0040D610
.text:0040D610 sub_40D610      proc near               ; CODE XREF: sub_402860+E↑p
.text:0040D610                                         ; sub_406900+192↑p
.text:0040D610                 xor     eax, eax
.text:0040D612                 retn
.text:0040D612 sub_40D610      endp
.text:0040D612
.text:0040D612 ; ---------------------------------------------------------------------------
.text:0040D613                 align 10h
.text:0040D620
.text:0040D620 ; =============== S U B R O U T I N E =======================================
.text:0040D620
.text:0040D620
.text:0040D620 ; int __cdecl sub_40D620(void *, void *Src, size_t Size, int, int)
.text:0040D620 sub_40D620      proc near               ; CODE XREF: sub_40D620+72↓p
.text:0040D620                                         ; sub_40D620+96↓p ...
.text:0040D620
.text:0040D620 var_3C          = dword ptr -3Ch
.text:0040D620 var_38          = dword ptr -38h
.text:0040D620 var_34          = dword ptr -34h
.text:0040D620 var_30          = dword ptr -30h
.text:0040D620 var_2C          = dword ptr -2Ch
.text:0040D620 var_28          = dword ptr -28h
.text:0040D620 var_24          = dword ptr -24h
.text:0040D620 var_20          = dword ptr -20h
.text:0040D620 var_1C          = dword ptr -1Ch
.text:0040D620 var_18          = dword ptr -18h
.text:0040D620 var_14          = dword ptr -14h
.text:0040D620 arg_0           = dword ptr  4
.text:0040D620 Src             = dword ptr  8
.text:0040D620 Size            = dword ptr  0Ch
.text:0040D620 arg_C           = dword ptr  10h
.text:0040D620 arg_10          = dword ptr  14h
.text:0040D620
.text:0040D620                 push    ebp
.text:0040D621                 push    edi
.text:0040D622                 push    esi
.text:0040D623                 push    ebx
.text:0040D624                 sub     esp, 2Ch
.text:0040D627                 mov     edx, [esp+3Ch+arg_0]
.text:0040D62B                 mov     ebx, [esp+3Ch+Src]
.text:0040D62F                 mov     eax, [esp+3Ch+arg_C]
.text:0040D633                 mov     edi, [esp+3Ch+Size]
.text:0040D637                 mov     [esp+3Ch+var_14], edx
.text:0040D63B                 cmp     ebx, 1
.text:0040D63E                 mov     edx, [esp+3Ch+arg_10]
.text:0040D642                 mov     [esp+3Ch+var_18], eax
.text:0040D646                 mov     [esp+3Ch+var_1C], edx
.text:0040D64A                 ja      short loc_40D654
.text:0040D64C                 add     esp, 2Ch
.text:0040D64F                 pop     ebx
.text:0040D650                 pop     esi
.text:0040D651                 pop     edi
.text:0040D652                 pop     ebp
.text:0040D653                 retn
.text:0040D654 ; ---------------------------------------------------------------------------
.text:0040D654
.text:0040D654 loc_40D654:                             ; CODE XREF: sub_40D620+2A↑j
.text:0040D654                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040D658                 mov     esi, ebx
.text:0040D65A                 mov     ebp, [esp+3Ch+var_14]
.text:0040D65E                 shr     esi, 1
.text:0040D660                 mov     eax, ebx
.text:0040D662                 mov     ecx, [esp+3Ch+var_1C]
.text:0040D666                 mov     [esp+3Ch+var_38], esi ; Src
.text:0040D66A                 mov     edx, esi
.text:0040D66C                 sub     eax, esi
.text:0040D66E                 mov     [esp+3Ch+var_24], ebp
.text:0040D672                 imul    edx, edi
.text:0040D675                 mov     ebp, [esp+3Ch+var_14]
.text:0040D679                 mov     [esp+3Ch+var_28], eax
.text:0040D67D                 mov     eax, [esp+3Ch+var_14]
.text:0040D681                 add     ebp, edx
.text:0040D683                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040D687                 mov     edx, [esp+3Ch+var_18]
.text:0040D68B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040D68E                 mov     [esp+3Ch+var_30], edx ; int
.text:0040D692                 call    sub_40D620
.text:0040D697                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040D69B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040D69F                 mov     eax, [esp+3Ch+var_18]
.text:0040D6A3                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:0040D6A6                 mov     edx, [esp+3Ch+var_28]
.text:0040D6AA                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040D6AE                 mov     [esp+3Ch+var_30], eax ; int
.text:0040D6B2                 mov     [esp+3Ch+var_38], edx ; Src
.text:0040D6B6                 call    sub_40D620
.text:0040D6BB                 mov     ecx, [esp+3Ch+var_1C]
.text:0040D6BF                 cmp     edi, 4
.text:0040D6C2                 mov     [esp+3Ch+var_20], ecx
.text:0040D6C6                 jz      loc_40D792
.text:0040D6CC
.text:0040D6CC loc_40D6CC:                             ; CODE XREF: sub_40D620+177↓j
.text:0040D6CC                 test    esi, esi
.text:0040D6CE                 jnz     short loc_40D700
.text:0040D6D0
.text:0040D6D0 loc_40D6D0:                             ; CODE XREF: sub_40D620+EA↓j
.text:0040D6D0                                         ; sub_40D620+107↓j ...
.text:0040D6D0                 mov     edx, [esp+3Ch+var_28]
.text:0040D6D4                 sub     ebx, edx
.text:0040D6D6                 imul    ebx, edi
.text:0040D6D9                 mov     edi, [esp+3Ch+var_1C]
.text:0040D6DD                 mov     [esp+3Ch+Size], ebx ; Size
.text:0040D6E1                 mov     ebx, [esp+3Ch+var_14]
.text:0040D6E5                 mov     [esp+3Ch+Src], edi ; Src
.text:0040D6E9                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0040D6ED                 add     esp, 2Ch
.text:0040D6F0                 pop     ebx
.text:0040D6F1                 pop     esi
.text:0040D6F2                 pop     edi
.text:0040D6F3                 pop     ebp
.text:0040D6F4                 jmp     memcpy
.text:0040D6F4 ; ---------------------------------------------------------------------------
.text:0040D6F9                 align 10h
.text:0040D700
.text:0040D700 loc_40D700:                             ; CODE XREF: sub_40D620+AE↑j
.text:0040D700                 mov     eax, [esp+3Ch+var_28]
.text:0040D704                 test    eax, eax
.text:0040D706                 jnz     short loc_40D730
.text:0040D708
.text:0040D708 loc_40D708:                             ; CODE XREF: sub_40D620+151↓j
.text:0040D708                                         ; sub_40D620+18B↓j ...
.text:0040D708                 test    esi, esi
.text:0040D70A                 jz      short loc_40D6D0
.text:0040D70C                 imul    esi, edi
.text:0040D70F                 mov     ebp, [esp+3Ch+var_24]
.text:0040D713                 mov     [esp+3Ch+var_38], ebp ; Src
.text:0040D717                 mov     [esp+3Ch+var_34], esi ; Size
.text:0040D71B                 mov     esi, [esp+3Ch+var_20]
.text:0040D71F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0040D722                 call    memcpy
.text:0040D727                 jmp     short loc_40D6D0
.text:0040D727 ; ---------------------------------------------------------------------------
.text:0040D729                 align 10h
.text:0040D730
.text:0040D730 loc_40D730:                             ; CODE XREF: sub_40D620+E6↑j
.text:0040D730                                         ; sub_40D620+14F↓j
.text:0040D730                 mov     [esp+3Ch+var_38], ebp
.text:0040D734                 mov     ecx, [esp+3Ch+var_24]
.text:0040D738                 mov     [esp+3Ch+var_3C], ecx
.text:0040D73B                 call    [esp+3Ch+var_18]
.text:0040D73F                 test    eax, eax
.text:0040D741                 jle     short loc_40D773
.text:0040D743                 mov     [esp+3Ch+var_38], ebp
.text:0040D747                 mov     ecx, [esp+3Ch+var_20]
.text:0040D74B                 add     ebp, edi
.text:0040D74D                 mov     [esp+3Ch+var_34], edi
.text:0040D751                 mov     [esp+3Ch+var_3C], ecx
.text:0040D754                 call    sub_410310
.text:0040D759                 dec     [esp+3Ch+var_28]
.text:0040D75D
.text:0040D75D loc_40D75D:                             ; CODE XREF: sub_40D620+170↓j
.text:0040D75D                 mov     [esp+3Ch+var_20], eax
.text:0040D761                 test    esi, esi
.text:0040D763                 jz      loc_40D6D0
.text:0040D769                 mov     eax, [esp+3Ch+var_28]
.text:0040D76D                 test    eax, eax
.text:0040D76F                 jnz     short loc_40D730
.text:0040D771                 jmp     short loc_40D708
.text:0040D773 ; ---------------------------------------------------------------------------
.text:0040D773
.text:0040D773 loc_40D773:                             ; CODE XREF: sub_40D620+121↑j
.text:0040D773                 mov     [esp+3Ch+var_34], edi
.text:0040D777                 mov     eax, [esp+3Ch+var_24]
.text:0040D77B                 dec     esi
.text:0040D77C                 mov     edx, [esp+3Ch+var_20]
.text:0040D780                 mov     [esp+3Ch+var_38], eax
.text:0040D784                 mov     [esp+3Ch+var_3C], edx
.text:0040D787                 call    sub_410310
.text:0040D78C                 add     [esp+3Ch+var_24], edi
.text:0040D790                 jmp     short loc_40D75D
.text:0040D792 ; ---------------------------------------------------------------------------
.text:0040D792
.text:0040D792 loc_40D792:                             ; CODE XREF: sub_40D620+A6↑j
.text:0040D792                 test    byte ptr [esp+3Ch+var_14], 3
.text:0040D797                 jnz     loc_40D6CC
.text:0040D79D                 test    esi, esi
.text:0040D79F                 jz      loc_40D6D0
.text:0040D7A5                 mov     ecx, [esp+3Ch+var_28]
.text:0040D7A9                 test    ecx, ecx
.text:0040D7AB                 jz      loc_40D708
.text:0040D7B1
.text:0040D7B1 loc_40D7B1:                             ; CODE XREF: sub_40D620+1C9↓j
.text:0040D7B1                 mov     [esp+3Ch+var_38], ebp
.text:0040D7B5                 mov     edx, [esp+3Ch+var_24]
.text:0040D7B9                 mov     [esp+3Ch+var_3C], edx
.text:0040D7BC                 call    [esp+3Ch+var_18]
.text:0040D7C0                 test    eax, eax
.text:0040D7C2                 jle     short loc_40D7F0
.text:0040D7C4                 dec     [esp+3Ch+var_28]
.text:0040D7C8                 mov     ecx, [ebp+0]
.text:0040D7CB                 add     ebp, 4
.text:0040D7CE                 mov     edx, [esp+3Ch+var_20]
.text:0040D7D2
.text:0040D7D2 loc_40D7D2:                             ; CODE XREF: sub_40D620+1E0↓j
.text:0040D7D2                 mov     [edx], ecx
.text:0040D7D4                 add     edx, 4
.text:0040D7D7                 test    esi, esi
.text:0040D7D9                 mov     [esp+3Ch+var_20], edx
.text:0040D7DD                 jz      loc_40D6D0
.text:0040D7E3                 mov     edx, [esp+3Ch+var_28]
.text:0040D7E7                 test    edx, edx
.text:0040D7E9                 jnz     short loc_40D7B1
.text:0040D7EB                 jmp     loc_40D708
.text:0040D7F0 ; ---------------------------------------------------------------------------
.text:0040D7F0
.text:0040D7F0 loc_40D7F0:                             ; CODE XREF: sub_40D620+1A2↑j
.text:0040D7F0                 mov     eax, [esp+3Ch+var_24]
.text:0040D7F4                 dec     esi
.text:0040D7F5                 mov     edx, [esp+3Ch+var_20]
.text:0040D7F9                 add     [esp+3Ch+var_24], 4
.text:0040D7FE                 mov     ecx, [eax]
.text:0040D800                 jmp     short loc_40D7D2
.text:0040D800 sub_40D620      endp
.text:0040D800
.text:0040D800 ; ---------------------------------------------------------------------------
.text:0040D802                 align 10h
.text:0040D810
.text:0040D810 ; =============== S U B R O U T I N E =======================================
.text:0040D810
.text:0040D810
.text:0040D810 ; int __cdecl sub_40D810(void *Block, void *, size_t, int)
.text:0040D810 sub_40D810      proc near               ; CODE XREF: sub_404A10+82↑p
.text:0040D810
.text:0040D810 Size            = dword ptr -2Ch
.text:0040D810 Src             = dword ptr -28h
.text:0040D810 var_24          = dword ptr -24h
.text:0040D810 var_20          = dword ptr -20h
.text:0040D810 var_1C          = dword ptr -1Ch
.text:0040D810 var_18          = dword ptr -18h
.text:0040D810 var_14          = dword ptr -14h
.text:0040D810 var_10          = dword ptr -10h
.text:0040D810 var_C           = dword ptr -0Ch
.text:0040D810 var_8           = dword ptr -8
.text:0040D810 var_4           = dword ptr -4
.text:0040D810 Block           = dword ptr  4
.text:0040D810 arg_4           = dword ptr  8
.text:0040D810 arg_8           = dword ptr  0Ch
.text:0040D810 arg_C           = dword ptr  10h
.text:0040D810
.text:0040D810                 sub     esp, 2Ch
.text:0040D813                 mov     edx, [esp+2Ch+Block]
.text:0040D817                 mov     [esp+2Ch+var_8], edi
.text:0040D81B                 mov     edi, [esp+2Ch+arg_4]
.text:0040D81F                 mov     [esp+2Ch+var_C], esi
.text:0040D823                 mov     esi, [esp+2Ch+arg_8]
.text:0040D827                 mov     [esp+2Ch+var_10], ebx
.text:0040D82B                 mov     ebx, edi
.text:0040D82D                 imul    ebx, esi
.text:0040D830                 mov     [esp+2Ch+var_4], ebp
.text:0040D834                 mov     ebp, [esp+2Ch+arg_C]
.text:0040D838                 mov     [esp+2Ch+var_14], edx
.text:0040D83C                 cmp     ebx, 3FFh
.text:0040D842                 jbe     loc_40D955
.text:0040D848                 mov     ecx, ds:dword_415810
.text:0040D84E                 test    ecx, ecx
.text:0040D850                 jz      loc_40D900
.text:0040D856
.text:0040D856 loc_40D856:                             ; CODE XREF: sub_40D810+12E↓j
.text:0040D856                 xor     edx, edx
.text:0040D858                 mov     eax, ebx
.text:0040D85A                 div     ds:dword_415820
.text:0040D860                 cmp     eax, ecx
.text:0040D862                 jbe     short loc_40D890
.text:0040D864
.text:0040D864 loc_40D864:                             ; CODE XREF: sub_40D810+E7↓j
.text:0040D864                 mov     [esp+2Ch+arg_8], esi
.text:0040D868                 mov     ebx, [esp+2Ch+var_10]
.text:0040D86C                 mov     esi, [esp+2Ch+var_14]
.text:0040D870                 mov     [esp+2Ch+arg_C], ebp
.text:0040D874                 mov     ebp, [esp+2Ch+var_4]
.text:0040D878                 mov     [esp+2Ch+arg_4], edi
.text:0040D87C                 mov     edi, [esp+2Ch+var_8]
.text:0040D880                 mov     [esp+2Ch+Block], esi
.text:0040D884                 mov     esi, [esp+2Ch+var_C]
.text:0040D888                 add     esp, 2Ch
.text:0040D88B                 jmp     __quicksort
.text:0040D890 ; ---------------------------------------------------------------------------
.text:0040D890
.text:0040D890 loc_40D890:                             ; CODE XREF: sub_40D810+52↑j
.text:0040D890                 call    _errno
.text:0040D895                 mov     edx, [eax]
.text:0040D897                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040D89A                 mov     [esp+2Ch+var_18], edx
.text:0040D89E                 call    malloc
.text:0040D8A3                 test    eax, eax
.text:0040D8A5                 mov     ebx, eax
.text:0040D8A7                 jz      short loc_40D8EC
.text:0040D8A9                 call    _errno
.text:0040D8AE                 mov     ecx, [esp+2Ch+var_18]
.text:0040D8B2                 mov     [eax], ecx
.text:0040D8B4                 mov     [esp+2Ch+Src], edi ; Src
.text:0040D8B8                 mov     edi, [esp+2Ch+var_14]
.text:0040D8BC                 mov     [esp+2Ch+var_1C], ebx ; int
.text:0040D8C0                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040D8C4                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040D8C8                 mov     [esp+2Ch+Size], edi ; void *
.text:0040D8CB                 call    sub_40D620
.text:0040D8D0                 mov     [esp+2Ch+Block], ebx ; Block
.text:0040D8D4                 mov     esi, [esp+2Ch+var_C]
.text:0040D8D8                 mov     ebx, [esp+2Ch+var_10]
.text:0040D8DC                 mov     edi, [esp+2Ch+var_8]
.text:0040D8E0                 mov     ebp, [esp+2Ch+var_4]
.text:0040D8E4                 add     esp, 2Ch
.text:0040D8E7                 jmp     free
.text:0040D8EC ; ---------------------------------------------------------------------------
.text:0040D8EC
.text:0040D8EC loc_40D8EC:                             ; CODE XREF: sub_40D810+97↑j
.text:0040D8EC                 call    _errno
.text:0040D8F1                 mov     ebx, [esp+2Ch+var_18]
.text:0040D8F5                 mov     [eax], ebx
.text:0040D8F7                 jmp     loc_40D864
.text:0040D8F7 ; ---------------------------------------------------------------------------
.text:0040D8FC                 align 10h
.text:0040D900
.text:0040D900 loc_40D900:                             ; CODE XREF: sub_40D810+40↑j
.text:0040D900                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:0040D907                 call    _sysconf
.text:0040D90C                 mov     ds:dword_415810, eax
.text:0040D911                 mov     edx, eax
.text:0040D913                 inc     edx
.text:0040D914                 jz      short loc_40D948
.text:0040D916
.text:0040D916 loc_40D916:                             ; CODE XREF: sub_40D810+143↓j
.text:0040D916                 mov     eax, ds:dword_415810
.text:0040D91B                 test    eax, eax
.text:0040D91D                 js      short loc_40D943
.text:0040D91F
.text:0040D91F loc_40D91F:                             ; CODE XREF: sub_40D810+136↓j
.text:0040D91F                 mov     [esp+2Ch+Size], 1Eh
.text:0040D926                 sar     eax, 2
.text:0040D929                 mov     ds:dword_415810, eax
.text:0040D92E                 call    _sysconf
.text:0040D933                 mov     ds:dword_415820, eax
.text:0040D938                 mov     ecx, ds:dword_415810
.text:0040D93E                 jmp     loc_40D856
.text:0040D943 ; ---------------------------------------------------------------------------
.text:0040D943
.text:0040D943 loc_40D943:                             ; CODE XREF: sub_40D810+10D↑j
.text:0040D943                 add     eax, 3
.text:0040D946                 jmp     short loc_40D91F
.text:0040D948 ; ---------------------------------------------------------------------------
.text:0040D948
.text:0040D948 loc_40D948:                             ; CODE XREF: sub_40D810+104↑j
.text:0040D948                 mov     ecx, 7FFFFFFFh
.text:0040D94D                 mov     ds:dword_415810, ecx
.text:0040D953                 jmp     short loc_40D916
.text:0040D955 ; ---------------------------------------------------------------------------
.text:0040D955
.text:0040D955 loc_40D955:                             ; CODE XREF: sub_40D810+32↑j
.text:0040D955                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040D958                 call    malloc
.text:0040D95D                 mov     [esp+2Ch+var_1C], eax ; int
.text:0040D961                 mov     eax, [esp+2Ch+var_14]
.text:0040D965                 mov     [esp+2Ch+var_20], ebp ; int
.text:0040D969                 mov     [esp+2Ch+var_24], esi ; Size
.text:0040D96D                 mov     [esp+2Ch+Src], edi ; Src
.text:0040D971                 mov     [esp+2Ch+Size], eax ; void *
.text:0040D974                 call    sub_40D620
.text:0040D979                 mov     ebx, [esp+2Ch+var_10]
.text:0040D97D                 mov     esi, [esp+2Ch+var_C]
.text:0040D981                 mov     edi, [esp+2Ch+var_8]
.text:0040D985                 mov     ebp, [esp+2Ch+var_4]
.text:0040D989                 add     esp, 2Ch
.text:0040D98C                 retn
.text:0040D98C sub_40D810      endp
.text:0040D98C
.text:0040D98C ; ---------------------------------------------------------------------------
.text:0040D98D                 align 10h
.text:0040D990
.text:0040D990 ; =============== S U B R O U T I N E =======================================
.text:0040D990
.text:0040D990
.text:0040D990 ; int __cdecl sub_40D990(void *)
.text:0040D990 sub_40D990      proc near               ; CODE XREF: sub_404260+3BC↑p
.text:0040D990                                         ; sub_404260+40D↑p ...
.text:0040D990
.text:0040D990 Block           = dword ptr -0Ch
.text:0040D990 var_4           = dword ptr -4
.text:0040D990 arg_0           = dword ptr  4
.text:0040D990
.text:0040D990                 sub     esp, 0Ch
.text:0040D993                 mov     [esp+0Ch+var_4], ebx
.text:0040D997                 mov     ebx, [esp+0Ch+arg_0]
.text:0040D99B                 test    ebx, ebx
.text:0040D99D                 jz      short loc_40D9DB
.text:0040D99F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0040D9A2                 jz      short loc_40D9C9
.text:0040D9A4                 mov     [esp+0Ch+Block], ebx
.text:0040D9A7                 call    sub_4103B0
.text:0040D9AC                 mov     edx, [ebx+4]
.text:0040D9AF                 mov     [esp+0Ch+Block], edx ; Block
.text:0040D9B2                 call    free
.text:0040D9B7                 mov     [esp+0Ch+Block], ebx ; Block
.text:0040D9BA                 call    free
.text:0040D9BF                 xor     eax, eax
.text:0040D9C1
.text:0040D9C1 loc_40D9C1:                             ; CODE XREF: sub_40D990+49↓j
.text:0040D9C1                 mov     ebx, [esp+0Ch+var_4]
.text:0040D9C5                 add     esp, 0Ch
.text:0040D9C8                 retn
.text:0040D9C9 ; ---------------------------------------------------------------------------
.text:0040D9C9
.text:0040D9C9 loc_40D9C9:                             ; CODE XREF: sub_40D990+12↑j
.text:0040D9C9                 call    _errno
.text:0040D9CE                 mov     dword ptr [eax], 9
.text:0040D9D4
.text:0040D9D4 loc_40D9D4:                             ; CODE XREF: sub_40D990+56↓j
.text:0040D9D4                 mov     eax, 0FFFFFFFFh
.text:0040D9D9                 jmp     short loc_40D9C1
.text:0040D9DB ; ---------------------------------------------------------------------------
.text:0040D9DB
.text:0040D9DB loc_40D9DB:                             ; CODE XREF: sub_40D990+D↑j
.text:0040D9DB                 call    _errno
.text:0040D9E0                 mov     dword ptr [eax], 16h
.text:0040D9E6                 jmp     short loc_40D9D4
.text:0040D9E6 sub_40D990      endp
.text:0040D9E6
.text:0040D9E6 ; ---------------------------------------------------------------------------
.text:0040D9E8                 align 10h
.text:0040D9F0 ; const char asc_40D9F0[2]
.text:0040D9F0 asc_40D9F0      db '\',0                ; DATA XREF: sub_40DA00+D2↓o
.text:0040D9F2                 align 10h
.text:0040DA00
.text:0040DA00 ; =============== S U B R O U T I N E =======================================
.text:0040DA00
.text:0040DA00
.text:0040DA00 ; int __cdecl sub_40DA00(LPCSTR)
.text:0040DA00 sub_40DA00      proc near               ; CODE XREF: sub_404260+18↑p
.text:0040DA00
.text:0040DA00 lpFileName      = dword ptr -13Ch
.text:0040DA00 Source          = dword ptr -138h
.text:0040DA00 Destination     = byte ptr -12Ch
.text:0040DA00 var_10          = dword ptr -10h
.text:0040DA00 var_C           = dword ptr -0Ch
.text:0040DA00 var_8           = dword ptr -8
.text:0040DA00 var_4           = dword ptr -4
.text:0040DA00 arg_0           = dword ptr  4
.text:0040DA00
.text:0040DA00                 sub     esp, 13Ch
.text:0040DA06                 mov     [esp+13Ch+var_C], esi
.text:0040DA0D                 mov     esi, [esp+13Ch+arg_0]
.text:0040DA14                 mov     [esp+13Ch+var_10], ebx
.text:0040DA1B                 mov     [esp+13Ch+var_8], edi
.text:0040DA22                 test    esi, esi
.text:0040DA24                 mov     [esp+13Ch+var_4], ebp
.text:0040DA2B                 jz      short loc_40DA32
.text:0040DA2D                 cmp     byte ptr [esi], 0
.text:0040DA30                 jnz     short loc_40DA62
.text:0040DA32
.text:0040DA32 loc_40DA32:                             ; CODE XREF: sub_40DA00+2B↑j
.text:0040DA32                 call    _errno
.text:0040DA37                 mov     dword ptr [eax], 2
.text:0040DA3D
.text:0040DA3D loc_40DA3D:                             ; CODE XREF: sub_40DA00+139↓j
.text:0040DA3D                                         ; sub_40DA00+14C↓j
.text:0040DA3D                 xor     eax, eax
.text:0040DA3F
.text:0040DA3F loc_40DA3F:                             ; CODE XREF: sub_40DA00+90↓j
.text:0040DA3F                                         ; sub_40DA00+A4↓j ...
.text:0040DA3F                 mov     ebx, [esp+13Ch+var_10]
.text:0040DA46                 mov     esi, [esp+13Ch+var_C]
.text:0040DA4D                 mov     edi, [esp+13Ch+var_8]
.text:0040DA54                 mov     ebp, [esp+13Ch+var_4]
.text:0040DA5B                 add     esp, 13Ch
.text:0040DA61                 retn
.text:0040DA62 ; ---------------------------------------------------------------------------
.text:0040DA62
.text:0040DA62 loc_40DA62:                             ; CODE XREF: sub_40DA00+30↑j
.text:0040DA62                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0040DA65                 call    GetFileAttributesA
.text:0040DA6A                 sub     esp, 4
.text:0040DA6D                 cmp     eax, 0FFFFFFFFh
.text:0040DA70                 jz      loc_40DB3E
.text:0040DA76                 test    al, 10h
.text:0040DA78                 jz      loc_40DB2E
.text:0040DA7E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0040DA85                 call    malloc
.text:0040DA8A                 mov     ebx, eax
.text:0040DA8C                 xor     eax, eax
.text:0040DA8E                 test    ebx, ebx
.text:0040DA90                 jz      short loc_40DA3F
.text:0040DA92                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0040DA99                 call    malloc
.text:0040DA9E                 mov     edi, eax
.text:0040DAA0                 xor     eax, eax
.text:0040DAA2                 test    edi, edi
.text:0040DAA4                 jz      short loc_40DA3F
.text:0040DAA6                 mov     [esp+13Ch+Source], esi ; Source
.text:0040DAAA                 lea     ebp, [esp+13Ch+Destination]
.text:0040DAAE                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040DAB1                 call    strcpy
.text:0040DAB6                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040DAB9                 call    strlen
.text:0040DABE                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0040DAC2                 jz      short loc_40DAF0
.text:0040DAC4                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0040DAC7                 call    strlen
.text:0040DACC                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0040DAD0                 jz      short loc_40DAF0
.text:0040DAD2                 mov     [esp+13Ch+Source], offset asc_40D9F0 ; "\\"
.text:0040DADA                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0040DADD                 call    strcat
.text:0040DAE2                 lea     esi, [esi+0]
.text:0040DAE9                 lea     edi, [edi+0]
.text:0040DAF0
.text:0040DAF0 loc_40DAF0:                             ; CODE XREF: sub_40DA00+C2↑j
.text:0040DAF0                                         ; sub_40DA00+D0↑j
.text:0040DAF0                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0040DAF3                 call    sub_40DEC0
.text:0040DAF8                 mov     [esp+13Ch+lpFileName], eax
.text:0040DAFB                 call    sub_40C160
.text:0040DB00                 mov     [edi], eax
.text:0040DB02                 mov     eax, ebx
.text:0040DB04                 mov     [ebx+4], edi
.text:0040DB07                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040DB0D                 mov     dword ptr [ebx+8], 118h
.text:0040DB14                 mov     dword ptr [ebx+0Ch], 118h
.text:0040DB1B                 mov     dword ptr [ebx+10h], 8
.text:0040DB22                 mov     dword ptr [ebx+14h], 1
.text:0040DB29                 jmp     loc_40DA3F
.text:0040DB2E ; ---------------------------------------------------------------------------
.text:0040DB2E
.text:0040DB2E loc_40DB2E:                             ; CODE XREF: sub_40DA00+78↑j
.text:0040DB2E                 call    _errno
.text:0040DB33                 mov     dword ptr [eax], 14h
.text:0040DB39                 jmp     loc_40DA3D
.text:0040DB3E ; ---------------------------------------------------------------------------
.text:0040DB3E
.text:0040DB3E loc_40DB3E:                             ; CODE XREF: sub_40DA00+70↑j
.text:0040DB3E                 call    sub_40DE70
.text:0040DB43                 mov     esi, eax
.text:0040DB45                 call    _errno
.text:0040DB4A                 mov     [eax], esi
.text:0040DB4C                 jmp     loc_40DA3D
.text:0040DB4C sub_40DA00      endp
.text:0040DB4C
.text:0040DB4C ; ---------------------------------------------------------------------------
.text:0040DB51                 align 10h
.text:0040DB60
.text:0040DB60 ; =============== S U B R O U T I N E =======================================
.text:0040DB60
.text:0040DB60
.text:0040DB60 sub_40DB60      proc near               ; CODE XREF: sub_406900+DA↑p
.text:0040DB60                 xor     eax, eax
.text:0040DB62                 retn
.text:0040DB62 sub_40DB60      endp
.text:0040DB62
.text:0040DB62 ; ---------------------------------------------------------------------------
.text:0040DB63                 align 10h
.text:0040DB70
.text:0040DB70 ; =============== S U B R O U T I N E =======================================
.text:0040DB70
.text:0040DB70
.text:0040DB70 nullsub_2       proc near               ; CODE XREF: sub_406900:loc_40699D↑p
.text:0040DB70                 retn
.text:0040DB70 nullsub_2       endp
.text:0040DB70
.text:0040DB70 ; ---------------------------------------------------------------------------
.text:0040DB71                 align 10h
.text:0040DB80
.text:0040DB80 ; =============== S U B R O U T I N E =======================================
.text:0040DB80
.text:0040DB80
.text:0040DB80 nullsub_3       proc near               ; CODE XREF: sub_406900:loc_4069EA↑p
.text:0040DB80                                         ; sub_406900+1A9↑p
.text:0040DB80                 retn
.text:0040DB80 nullsub_3       endp
.text:0040DB80
.text:0040DB80 ; ---------------------------------------------------------------------------
.text:0040DB81                 align 10h
.text:0040DB90
.text:0040DB90 ; =============== S U B R O U T I N E =======================================
.text:0040DB90
.text:0040DB90
.text:0040DB90 ; int __cdecl sub_40DB90(char *)
.text:0040DB90 sub_40DB90      proc near               ; CODE XREF: sub_406900+85↑p
.text:0040DB90
.text:0040DB90 var_1C          = dword ptr -1Ch
.text:0040DB90 var_18          = dword ptr -18h
.text:0040DB90 var_14          = dword ptr -14h
.text:0040DB90 var_10          = dword ptr -10h
.text:0040DB90 var_C           = dword ptr -0Ch
.text:0040DB90 var_4           = dword ptr -4
.text:0040DB90 arg_0           = dword ptr  4
.text:0040DB90
.text:0040DB90                 sub     esp, 1Ch
.text:0040DB93                 mov     ecx, [esp+1Ch+arg_0]
.text:0040DB97                 lea     edx, [esp+1Ch+var_4]
.text:0040DB9B                 mov     [esp+1Ch+var_C], edx ; int
.text:0040DB9F                 mov     [esp+1Ch+var_10], 400h ; int
.text:0040DBA7                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:0040DBAA                 mov     [esp+1Ch+var_14], offset byte_415850 ; char *
.text:0040DBB2                 mov     [esp+1Ch+var_18], offset unk_415830 ; int
.text:0040DBBA                 call    sub_410430
.text:0040DBBF                 test    eax, eax
.text:0040DBC1                 mov     ecx, [esp+1Ch+var_4]
.text:0040DBC5                 setnz   dl
.text:0040DBC8                 add     esp, 1Ch
.text:0040DBCB                 movzx   eax, dl
.text:0040DBCE                 dec     eax
.text:0040DBCF                 and     eax, ecx
.text:0040DBD1                 retn
.text:0040DBD1 sub_40DB90      endp
.text:0040DBD1
.text:0040DBD1 ; ---------------------------------------------------------------------------
.text:0040DBD2                 align 10h
.text:0040DBE0
.text:0040DBE0 ; =============== S U B R O U T I N E =======================================
.text:0040DBE0
.text:0040DBE0 ; Attributes: info_from_lumina
.text:0040DBE0
.text:0040DBE0 ___get_errno    proc near               ; CODE XREF: sub_40DE70+B↓p
.text:0040DBE0
.text:0040DBE0 arg_0           = dword ptr  4
.text:0040DBE0
.text:0040DBE0                 mov     eax, [esp+arg_0]
.text:0040DBE4                 cmp     eax, 53h ; 'S'
.text:0040DBE7                 jg      loc_40DCE0
.text:0040DBED                 cmp     eax, 52h ; 'R'
.text:0040DBF0                 jge     short loc_40DC42
.text:0040DBF2                 cmp     eax, 0Fh
.text:0040DBF5                 jz      short loc_40DC10
.text:0040DBF7                 cmp     eax, 0Fh
.text:0040DBFA                 jg      short loc_40DC70
.text:0040DBFC                 cmp     eax, 9
.text:0040DBFF                 jg      short loc_40DC50
.text:0040DC01                 cmp     eax, 7
.text:0040DC04                 jge     short loc_40DC49
.text:0040DC06                 cmp     eax, 3
.text:0040DC09                 jg      short loc_40DC2A
.text:0040DC0B                 cmp     eax, 2
.text:0040DC0E                 jl      short loc_40DC23
.text:0040DC10
.text:0040DC10 loc_40DC10:                             ; CODE XREF: ___get_errno+15↑j
.text:0040DC10                                         ; ___get_errno+9D↓j ...
.text:0040DC10                 mov     edx, 2
.text:0040DC15                 lea     esi, [esi+0]
.text:0040DC19                 lea     edi, [edi+0]
.text:0040DC20
.text:0040DC20 loc_40DC20:                             ; CODE XREF: ___get_errno+48↓j
.text:0040DC20                                         ; ___get_errno+59↓j ...
.text:0040DC20                 mov     eax, edx
.text:0040DC22                 retn
.text:0040DC23 ; ---------------------------------------------------------------------------
.text:0040DC23
.text:0040DC23 loc_40DC23:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040DC23                                         ; ___get_errno+78↓j ...
.text:0040DC23                 mov     edx, 16h
.text:0040DC28                 jmp     short loc_40DC20
.text:0040DC2A ; ---------------------------------------------------------------------------
.text:0040DC2A
.text:0040DC2A loc_40DC2A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040DC2A                 cmp     eax, 5
.text:0040DC2D                 jz      short loc_40DC42
.text:0040DC2F                 cmp     eax, 5
.text:0040DC32                 jg      short loc_40DC3B
.text:0040DC34                 mov     edx, 18h
.text:0040DC39                 jmp     short loc_40DC20
.text:0040DC3B ; ---------------------------------------------------------------------------
.text:0040DC3B
.text:0040DC3B loc_40DC3B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040DC3B                                         ; ___get_errno+180↓j
.text:0040DC3B                 mov     edx, 9
.text:0040DC40                 jmp     short loc_40DC20
.text:0040DC42 ; ---------------------------------------------------------------------------
.text:0040DC42
.text:0040DC42 loc_40DC42:                             ; CODE XREF: ___get_errno+10↑j
.text:0040DC42                                         ; ___get_errno+4D↑j ...
.text:0040DC42                 mov     edx, 0Dh
.text:0040DC47                 jmp     short loc_40DC20
.text:0040DC49 ; ---------------------------------------------------------------------------
.text:0040DC49
.text:0040DC49 loc_40DC49:                             ; CODE XREF: ___get_errno+24↑j
.text:0040DC49                                         ; ___get_errno+73↓j ...
.text:0040DC49                 mov     edx, 0Ch
.text:0040DC4E                 jmp     short loc_40DC20
.text:0040DC50 ; ---------------------------------------------------------------------------
.text:0040DC50
.text:0040DC50 loc_40DC50:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040DC50                 cmp     eax, 0Dh
.text:0040DC53                 jg      short loc_40DC49
.text:0040DC55                 cmp     eax, 0Ch
.text:0040DC58                 jge     short loc_40DC23
.text:0040DC5A                 cmp     eax, 0Ah
.text:0040DC5D                 mov     edx, 7
.text:0040DC62                 jz      short loc_40DC20
.text:0040DC64                 cmp     eax, 0Bh
.text:0040DC67                 jnz     short loc_40DC23
.text:0040DC69
.text:0040DC69 loc_40DC69:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040DC69                 mov     edx, 8
.text:0040DC6E                 jmp     short loc_40DC20
.text:0040DC70 ; ---------------------------------------------------------------------------
.text:0040DC70
.text:0040DC70 loc_40DC70:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040DC70                 cmp     eax, 22h ; '"'
.text:0040DC73                 jg      short loc_40DCA4
.text:0040DC75                 cmp     eax, 16h
.text:0040DC78                 jge     short loc_40DC42
.text:0040DC7A                 cmp     eax, 12h
.text:0040DC7D                 jz      short loc_40DC10
.text:0040DC7F                 cmp     eax, 12h
.text:0040DC82                 jg      short loc_40DC95
.text:0040DC84                 cmp     eax, 10h
.text:0040DC87                 jz      short loc_40DC42
.text:0040DC89                 mov     edx, 12h
.text:0040DC8E                 cmp     eax, 11h
.text:0040DC91
.text:0040DC91 loc_40DC91:                             ; CODE XREF: ___get_errno+172↓j
.text:0040DC91                                         ; ___get_errno+24C↓j ...
.text:0040DC91                 jnz     short loc_40DC23
.text:0040DC93                 jmp     short loc_40DC20
.text:0040DC95 ; ---------------------------------------------------------------------------
.text:0040DC95
.text:0040DC95 loc_40DC95:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040DC95                 cmp     eax, 14h
.text:0040DC98                 jle     short loc_40DC42
.text:0040DC9A
.text:0040DC9A loc_40DC9A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040DC9A                 mov     edx, 10h
.text:0040DC9F                 jmp     loc_40DC20
.text:0040DCA4 ; ---------------------------------------------------------------------------
.text:0040DCA4
.text:0040DCA4 loc_40DCA4:                             ; CODE XREF: ___get_errno+93↑j
.text:0040DCA4                 cmp     eax, 41h ; 'A'
.text:0040DCA7                 jz      short loc_40DC42
.text:0040DCA9                 cmp     eax, 41h ; 'A'
.text:0040DCAC                 jg      short loc_40DCC1
.text:0040DCAE                 cmp     eax, 24h ; '$'
.text:0040DCB1                 jz      short loc_40DC42
.text:0040DCB3                 cmp     eax, 35h ; '5'
.text:0040DCB6                 jnz     loc_40DC23
.text:0040DCBC                 jmp     loc_40DC10
.text:0040DCC1 ; ---------------------------------------------------------------------------
.text:0040DCC1
.text:0040DCC1 loc_40DCC1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040DCC1                 cmp     eax, 43h ; 'C'
.text:0040DCC4                 jz      loc_40DC10
.text:0040DCCA                 cmp     eax, 50h ; 'P'
.text:0040DCCD                 jnz     loc_40DC23
.text:0040DCD3
.text:0040DCD3 loc_40DCD3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040DCD3                 mov     edx, 11h
.text:0040DCD8                 jmp     loc_40DC20
.text:0040DCD8 ; ---------------------------------------------------------------------------
.text:0040DCDD                 align 10h
.text:0040DCE0
.text:0040DCE0 loc_40DCE0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040DCE0                 cmp     eax, 0A1h ; '¡'
.text:0040DCE5                 jz      loc_40DC10
.text:0040DCEB                 cmp     eax, 0A1h ; '¡'
.text:0040DCF0                 jg      loc_40DDA0
.text:0040DCF6                 cmp     eax, 81h
.text:0040DCFB                 jg      short loc_40DD65
.text:0040DCFD                 cmp     eax, 80h ; '€'
.text:0040DD02                 mov     edx, 0Ah
.text:0040DD07                 jge     loc_40DC20
.text:0040DD0D                 cmp     eax, 6Ch ; 'l'
.text:0040DD10                 jz      loc_40DC42
.text:0040DD16                 cmp     eax, 6Ch ; 'l'
.text:0040DD19                 jg      short loc_40DD37
.text:0040DD1B                 cmp     eax, 57h ; 'W'
.text:0040DD1E                 jz      loc_40DC23
.text:0040DD24                 cmp     eax, 59h ; 'Y'
.text:0040DD27                 jnz     loc_40DC23
.text:0040DD2D
.text:0040DD2D loc_40DD2D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040DD2D                                         ; ___get_errno+23C↓j
.text:0040DD2D                 mov     edx, 0Bh
.text:0040DD32                 jmp     loc_40DC20
.text:0040DD37 ; ---------------------------------------------------------------------------
.text:0040DD37
.text:0040DD37 loc_40DD37:                             ; CODE XREF: ___get_errno+139↑j
.text:0040DD37                 cmp     eax, 70h ; 'p'
.text:0040DD3A                 mov     edx, 1Ch
.text:0040DD3F                 jz      loc_40DC20
.text:0040DD45                 cmp     eax, 70h ; 'p'
.text:0040DD48                 jg      short loc_40DD57
.text:0040DD4A                 mov     edx, 20h ; ' '
.text:0040DD4F                 cmp     eax, 6Dh ; 'm'
.text:0040DD52                 jmp     loc_40DC91
.text:0040DD57 ; ---------------------------------------------------------------------------
.text:0040DD57
.text:0040DD57 loc_40DD57:                             ; CODE XREF: ___get_errno+168↑j
.text:0040DD57                 cmp     eax, 72h ; 'r'
.text:0040DD5A
.text:0040DD5A loc_40DD5A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040DD5A                 jnz     loc_40DC23
.text:0040DD60                 jmp     loc_40DC3B
.text:0040DD65 ; ---------------------------------------------------------------------------
.text:0040DD65
.text:0040DD65 loc_40DD65:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040DD65                 cmp     eax, 84h ; '„'
.text:0040DD6A                 jz      loc_40DC42
.text:0040DD70                 cmp     eax, 84h ; '„'
.text:0040DD75                 jg      short loc_40DD7E
.text:0040DD77                 cmp     eax, 82h ; '‚'
.text:0040DD7C                 jmp     short loc_40DD5A
.text:0040DD7E ; ---------------------------------------------------------------------------
.text:0040DD7E
.text:0040DD7E loc_40DD7E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040DD7E                 cmp     eax, 91h ; '‘'
.text:0040DD83                 mov     edx, 29h ; ')'
.text:0040DD88                 jz      loc_40DC20
.text:0040DD8E                 cmp     eax, 9Eh ; 'ž'
.text:0040DD93
.text:0040DD93 loc_40DD93:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040DD93                 jnz     loc_40DC23
.text:0040DD99                 jmp     loc_40DC42
.text:0040DD99 ; ---------------------------------------------------------------------------
.text:0040DD9E                 align 10h
.text:0040DDA0
.text:0040DDA0 loc_40DDA0:                             ; CODE XREF: ___get_errno+110↑j
.text:0040DDA0                 cmp     eax, 0CEh ; 'Î'
.text:0040DDA5                 jz      loc_40DC10
.text:0040DDAB                 cmp     eax, 0CEh ; 'Î'
.text:0040DDB0                 jg      short loc_40DE00
.text:0040DDB2                 cmp     eax, 0AAh ; 'ª'
.text:0040DDB7                 jz      loc_40DC9A
.text:0040DDBD                 cmp     eax, 0AAh ; 'ª'
.text:0040DDC2                 jg      short loc_40DDD6
.text:0040DDC4                 cmp     eax, 0A4h ; '¤'
.text:0040DDC9                 jz      loc_40DD2D
.text:0040DDCF                 cmp     eax, 0A7h ; '§'
.text:0040DDD4                 jmp     short loc_40DD93
.text:0040DDD6 ; ---------------------------------------------------------------------------
.text:0040DDD6
.text:0040DDD6 loc_40DDD6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040DDD6                 cmp     eax, 0B7h ; '·'
.text:0040DDDB                 jz      loc_40DCD3
.text:0040DDE1                 cmp     eax, 0B7h ; '·'
.text:0040DDE6                 jl      loc_40DC23
.text:0040DDEC                 sub     eax, 0BCh ; '¼'
.text:0040DDF1                 cmp     eax, 0Eh
.text:0040DDF4                 ja      loc_40DC23
.text:0040DDFA                 jmp     loc_40DC69
.text:0040DDFA ; ---------------------------------------------------------------------------
.text:0040DDFF                 align 10h
.text:0040DE00
.text:0040DE00 loc_40DE00:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040DE00                 cmp     eax, 46Bh
.text:0040DE05                 mov     edx, 24h ; '$'
.text:0040DE0A                 jz      loc_40DC20
.text:0040DE10                 cmp     eax, 46Bh
.text:0040DE15                 jg      short loc_40DE31
.text:0040DE17                 cmp     eax, 0D7h ; '×'
.text:0040DE1C                 jz      loc_40DD2D
.text:0040DE22                 mov     edx, 5
.text:0040DE27                 cmp     eax, 45Dh
.text:0040DE2C                 jmp     loc_40DC91
.text:0040DE31 ; ---------------------------------------------------------------------------
.text:0040DE31
.text:0040DE31 loc_40DE31:                             ; CODE XREF: ___get_errno+235↑j
.text:0040DE31                 cmp     eax, 4D5h
.text:0040DE36                 mov     edx, 4
.text:0040DE3B                 jz      loc_40DC20
.text:0040DE41                 cmp     eax, 4D5h
.text:0040DE46                 jg      short loc_40DE57
.text:0040DE48                 mov     edx, 13h
.text:0040DE4D                 cmp     eax, 4B0h
.text:0040DE52                 jmp     loc_40DC91
.text:0040DE57 ; ---------------------------------------------------------------------------
.text:0040DE57
.text:0040DE57 loc_40DE57:                             ; CODE XREF: ___get_errno+266↑j
.text:0040DE57                 cmp     eax, 718h
.text:0040DE5C                 jnz     loc_40DC23
.text:0040DE62                 jmp     loc_40DC49
.text:0040DE62 ___get_errno    endp
.text:0040DE62
.text:0040DE62 ; ---------------------------------------------------------------------------
.text:0040DE67                 align 10h
.text:0040DE70
.text:0040DE70 ; =============== S U B R O U T I N E =======================================
.text:0040DE70
.text:0040DE70
.text:0040DE70 sub_40DE70      proc near               ; CODE XREF: sub_40BCC0:loc_40BC5D↑p
.text:0040DE70                                         ; sub_40C280:loc_40C2E8↑p ...
.text:0040DE70
.text:0040DE70 var_C           = dword ptr -0Ch
.text:0040DE70
.text:0040DE70                 sub     esp, 0Ch
.text:0040DE73                 call    GetLastError
.text:0040DE78                 mov     [esp+0Ch+var_C], eax
.text:0040DE7B                 call    ___get_errno
.text:0040DE80                 add     esp, 0Ch
.text:0040DE83                 retn
.text:0040DE83 sub_40DE70      endp
.text:0040DE83
.text:0040DE83 ; ---------------------------------------------------------------------------
.text:0040DE84                 align 10h
.text:0040DE90
.text:0040DE90 ; =============== S U B R O U T I N E =======================================
.text:0040DE90
.text:0040DE90
.text:0040DE90 sub_40DE90      proc near               ; CODE XREF: .text:0040C1F3↑p
.text:0040DE90                                         ; .text:0040C243↑p
.text:0040DE90
.text:0040DE90 arg_4           = dword ptr  8
.text:0040DE90
.text:0040DE90                 sub     esp, 0Ch
.text:0040DE93                 mov     edx, [esp+0Ch+arg_4]
.text:0040DE97                 test    edx, edx
.text:0040DE99                 jz      short loc_40DEA0
.text:0040DE9B                 add     esp, 0Ch
.text:0040DE9E                 jmp     short sub_40DEE0
.text:0040DEA0 ; ---------------------------------------------------------------------------
.text:0040DEA0
.text:0040DEA0 loc_40DEA0:                             ; CODE XREF: sub_40DE90+9↑j
.text:0040DEA0                 call    _errno
.text:0040DEA5                 mov     dword ptr [eax], 16h
.text:0040DEAB                 xor     eax, eax
.text:0040DEAD                 add     esp, 0Ch
.text:0040DEB0                 retn
.text:0040DEB0 sub_40DE90      endp
.text:0040DEB0
.text:0040DEB1 ; ---------------------------------------------------------------------------
.text:0040DEB1                 jmp     short sub_40DEC0
.text:0040DEB1 ; ---------------------------------------------------------------------------
.text:0040DEB3                 align 10h
.text:0040DEC0
.text:0040DEC0 ; =============== S U B R O U T I N E =======================================
.text:0040DEC0
.text:0040DEC0
.text:0040DEC0 ; int __cdecl sub_40DEC0(LPCSTR)
.text:0040DEC0 sub_40DEC0      proc near               ; CODE XREF: sub_40BCC0-10C↑p
.text:0040DEC0                                         ; .text:0040C3E8↑p ...
.text:0040DEC0
.text:0040DEC0 lpFileName      = dword ptr -0Ch
.text:0040DEC0 Destination     = dword ptr -8
.text:0040DEC0 arg_0           = dword ptr  4
.text:0040DEC0
.text:0040DEC0                 sub     esp, 0Ch
.text:0040DEC3                 mov     edx, [esp+0Ch+arg_0]
.text:0040DEC7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040DECF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040DED2                 call    sub_40DEE0
.text:0040DED7                 add     esp, 0Ch
.text:0040DEDA                 retn
.text:0040DEDA sub_40DEC0      endp
.text:0040DEDA
.text:0040DEDA ; ---------------------------------------------------------------------------
.text:0040DEDB                 align 10h
.text:0040DEE0
.text:0040DEE0 ; =============== S U B R O U T I N E =======================================
.text:0040DEE0
.text:0040DEE0
.text:0040DEE0 ; int __cdecl sub_40DEE0(LPCSTR lpFileName, char *Destination)
.text:0040DEE0 sub_40DEE0      proc near               ; CODE XREF: sub_40DE90+E↑j
.text:0040DEE0                                         ; sub_40DEC0+12↑p
.text:0040DEE0
.text:0040DEE0 Size            = dword ptr -2Ch
.text:0040DEE0 nBufferLength   = dword ptr -28h
.text:0040DEE0 lpBuffer        = dword ptr -24h
.text:0040DEE0 lpFilePart      = dword ptr -20h
.text:0040DEE0 FilePart        = dword ptr -14h
.text:0040DEE0 lpFileName      = dword ptr  4
.text:0040DEE0 Destination     = dword ptr  8
.text:0040DEE0
.text:0040DEE0                 push    ebp
.text:0040DEE1                 push    edi
.text:0040DEE2                 push    esi
.text:0040DEE3                 push    ebx
.text:0040DEE4                 sub     esp, 1Ch
.text:0040DEE7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040DEEB                 mov     ebp, [esp+2Ch+Destination]
.text:0040DEEF                 test    edi, edi
.text:0040DEF1                 jz      loc_40DFF9
.text:0040DEF7                 cmp     byte ptr [edi], 0
.text:0040DEFA                 jz      loc_40DFEC
.text:0040DF00                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040DF07                 call    malloc
.text:0040DF0C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040DF10                 lea     edx, [esp+2Ch+FilePart]
.text:0040DF14                 mov     ebx, eax
.text:0040DF16                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040DF1A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040DF22                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040DF25                 call    GetFullPathNameA
.text:0040DF2A                 sub     esp, 10h
.text:0040DF2D                 mov     esi, eax
.text:0040DF2F                 test    eax, eax
.text:0040DF31                 jz      loc_40DFDA
.text:0040DF37                 cmp     eax, 104h
.text:0040DF3C                 jle     short loc_40DF4D
.text:0040DF3E                 test    ebp, ebp
.text:0040DF40                 jz      short loc_40DFA9
.text:0040DF42                 call    _errno
.text:0040DF47                 mov     dword ptr [eax], 26h ; '&'
.text:0040DF4D
.text:0040DF4D loc_40DF4D:                             ; CODE XREF: sub_40DEE0+5C↑j
.text:0040DF4D                                         ; sub_40DEE0+F5↓j
.text:0040DF4D                 call    _errno
.text:0040DF52                 mov     edi, [eax]
.text:0040DF54                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040DF5C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040DF5F                 call    sub_40E010
.text:0040DF64                 test    eax, eax
.text:0040DF66                 jnz     short loc_40DF80
.text:0040DF68                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040DF6D                 cmp     al, 2Fh ; '/'
.text:0040DF6F                 jz      short loc_40DF80
.text:0040DF71                 cmp     al, 5Ch ; '\'
.text:0040DF73                 jz      short loc_40DF80
.text:0040DF75                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040DF79                 mov     byte ptr [esi+ebx+1], 0
.text:0040DF7E                 mov     esi, esi
.text:0040DF80
.text:0040DF80 loc_40DF80:                             ; CODE XREF: sub_40DEE0+86↑j
.text:0040DF80                                         ; sub_40DEE0+8F↑j ...
.text:0040DF80                 call    _errno
.text:0040DF85                 mov     [eax], edi
.text:0040DF87                 mov     [esp+2Ch+Size], ebx
.text:0040DF8A                 call    sub_40C0E0
.text:0040DF8F                 test    ebp, ebp
.text:0040DF91                 mov     eax, ebx
.text:0040DF93                 jz      short loc_40DFA1
.text:0040DF95                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040DF99                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040DF9C                 call    strcpy
.text:0040DFA1
.text:0040DFA1 loc_40DFA1:                             ; CODE XREF: sub_40DEE0+B3↑j
.text:0040DFA1                                         ; sub_40DEE0+10A↓j
.text:0040DFA1                 add     esp, 1Ch
.text:0040DFA4                 pop     ebx
.text:0040DFA5                 pop     esi
.text:0040DFA6                 pop     edi
.text:0040DFA7                 pop     ebp
.text:0040DFA8                 retn
.text:0040DFA9 ; ---------------------------------------------------------------------------
.text:0040DFA9
.text:0040DFA9 loc_40DFA9:                             ; CODE XREF: sub_40DEE0+60↑j
.text:0040DFA9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040DFAC                 lea     ecx, [eax+2]
.text:0040DFAF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040DFB3                 call    realloc
.text:0040DFB8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040DFBC                 lea     edx, [esp+2Ch+FilePart]
.text:0040DFC0                 mov     ebx, eax
.text:0040DFC2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040DFC6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040DFCA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040DFCD                 call    GetFullPathNameA
.text:0040DFD2                 sub     esp, 10h
.text:0040DFD5                 jmp     loc_40DF4D
.text:0040DFDA ; ---------------------------------------------------------------------------
.text:0040DFDA
.text:0040DFDA loc_40DFDA:                             ; CODE XREF: sub_40DEE0+51↑j
.text:0040DFDA                 call    sub_40DE70
.text:0040DFDF                 mov     esi, eax
.text:0040DFE1                 call    _errno
.text:0040DFE6                 mov     [eax], esi
.text:0040DFE8
.text:0040DFE8 loc_40DFE8:                             ; CODE XREF: sub_40DEE0+117↓j
.text:0040DFE8                                         ; sub_40DEE0+124↓j
.text:0040DFE8                 xor     eax, eax
.text:0040DFEA                 jmp     short loc_40DFA1
.text:0040DFEC ; ---------------------------------------------------------------------------
.text:0040DFEC
.text:0040DFEC loc_40DFEC:                             ; CODE XREF: sub_40DEE0+1A↑j
.text:0040DFEC                 call    _errno
.text:0040DFF1                 mov     dword ptr [eax], 2
.text:0040DFF7                 jmp     short loc_40DFE8
.text:0040DFF9 ; ---------------------------------------------------------------------------
.text:0040DFF9
.text:0040DFF9 loc_40DFF9:                             ; CODE XREF: sub_40DEE0+11↑j
.text:0040DFF9                 call    _errno
.text:0040DFFE                 mov     dword ptr [eax], 16h
.text:0040E004                 jmp     short loc_40DFE8
.text:0040E004 sub_40DEE0      endp
.text:0040E004
.text:0040E004 ; ---------------------------------------------------------------------------
.text:0040E006                 align 10h
.text:0040E010
.text:0040E010 ; =============== S U B R O U T I N E =======================================
.text:0040E010
.text:0040E010
.text:0040E010 ; int __cdecl sub_40E010(LPCSTR lpFileName, int)
.text:0040E010 sub_40E010      proc near               ; CODE XREF: sub_40BCC0-11D↑p
.text:0040E010                                         ; .text:0040C0C2↑p ...
.text:0040E010
.text:0040E010 uMode           = dword ptr -1Ch
.text:0040E010 var_10          = dword ptr -10h
.text:0040E010 var_C           = dword ptr -0Ch
.text:0040E010 var_8           = dword ptr -8
.text:0040E010 var_4           = dword ptr -4
.text:0040E010 lpFileName      = dword ptr  4
.text:0040E010 arg_4           = dword ptr  8
.text:0040E010
.text:0040E010                 sub     esp, 1Ch
.text:0040E013                 mov     [esp+1Ch+var_10], ebx
.text:0040E017                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040E01B                 mov     [esp+1Ch+var_4], ebp
.text:0040E01F                 xor     ebp, ebp
.text:0040E021                 test    ebx, ebx
.text:0040E023                 mov     [esp+1Ch+var_C], esi
.text:0040E027                 mov     esi, [esp+1Ch+arg_4]
.text:0040E02B                 mov     [esp+1Ch+var_8], edi
.text:0040E02F                 jz      short loc_40E039
.text:0040E031                 test    esi, 0FFFFFFE8h
.text:0040E037                 jz      short loc_40E060
.text:0040E039
.text:0040E039 loc_40E039:                             ; CODE XREF: sub_40E010+1F↑j
.text:0040E039                 call    _errno
.text:0040E03E                 mov     dword ptr [eax], 16h
.text:0040E044
.text:0040E044 loc_40E044:                             ; CODE XREF: sub_40E010+B1↓j
.text:0040E044                 mov     eax, 0FFFFFFFFh
.text:0040E049
.text:0040E049 loc_40E049:                             ; CODE XREF: sub_40E010+86↓j
.text:0040E049                                         ; sub_40E010+A4↓j
.text:0040E049                 mov     ebx, [esp+1Ch+var_10]
.text:0040E04D                 mov     esi, [esp+1Ch+var_C]
.text:0040E051                 mov     edi, [esp+1Ch+var_8]
.text:0040E055                 mov     ebp, [esp+1Ch+var_4]
.text:0040E059                 add     esp, 1Ch
.text:0040E05C                 retn
.text:0040E05C ; ---------------------------------------------------------------------------
.text:0040E05D                 align 10h
.text:0040E060
.text:0040E060 loc_40E060:                             ; CODE XREF: sub_40E010+27↑j
.text:0040E060                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040E067                 call    SetErrorMode
.text:0040E06C                 sub     esp, 4
.text:0040E06F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040E072                 call    GetFileAttributesA
.text:0040E077                 sub     esp, 4
.text:0040E07A                 mov     edi, eax
.text:0040E07C                 cmp     eax, 0FFFFFFFFh
.text:0040E07F                 jz      short loc_40E0C3
.text:0040E081
.text:0040E081 loc_40E081:                             ; CODE XREF: sub_40E010+C6↓j
.text:0040E081                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040E088                 call    SetErrorMode
.text:0040E08D                 sub     esp, 4
.text:0040E090                 mov     eax, 0FFFFFFFFh
.text:0040E095                 inc     ebp
.text:0040E096                 jz      short loc_40E049
.text:0040E098                 test    esi, 10h
.text:0040E09E                 jz      short loc_40E0A8
.text:0040E0A0                 test    edi, 10h
.text:0040E0A6                 jz      short loc_40E0B6
.text:0040E0A8
.text:0040E0A8 loc_40E0A8:                             ; CODE XREF: sub_40E010+8E↑j
.text:0040E0A8                 and     esi, 2
.text:0040E0AB                 jz      short loc_40E0B2
.text:0040E0AD                 and     edi, 1
.text:0040E0B0                 jnz     short loc_40E0B6
.text:0040E0B2
.text:0040E0B2 loc_40E0B2:                             ; CODE XREF: sub_40E010+9B↑j
.text:0040E0B2                 xor     eax, eax
.text:0040E0B4                 jmp     short loc_40E049
.text:0040E0B6 ; ---------------------------------------------------------------------------
.text:0040E0B6
.text:0040E0B6 loc_40E0B6:                             ; CODE XREF: sub_40E010+96↑j
.text:0040E0B6                                         ; sub_40E010+A0↑j
.text:0040E0B6                 call    _errno
.text:0040E0BB                 mov     dword ptr [eax], 0Dh
.text:0040E0C1                 jmp     short loc_40E044
.text:0040E0C3 ; ---------------------------------------------------------------------------
.text:0040E0C3
.text:0040E0C3 loc_40E0C3:                             ; CODE XREF: sub_40E010+6F↑j
.text:0040E0C3                 call    sub_40DE70
.text:0040E0C8                 mov     ebp, eax
.text:0040E0CA                 call    _errno
.text:0040E0CF                 mov     [eax], ebp
.text:0040E0D1                 mov     ebp, 0FFFFFFFFh
.text:0040E0D6                 jmp     short loc_40E081
.text:0040E0D6 sub_40E010      endp
.text:0040E0D6
.text:0040E0D6 ; ---------------------------------------------------------------------------
.text:0040E0D8                 align 10h
.text:0040E0E0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040E2FF↓o
.text:0040E0EC aLu             db '%lu',0              ; DATA XREF: .text:0040E30F↓o
.text:0040E0F0 asc_40E0F0      db ' ',0                ; DATA XREF: .text:loc_40E3F8↓o
.text:0040E0F2                 align 10h
.text:0040E100 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040E100                                         ; DATA XREF: .text:0040E42F↓o
.text:0040E120 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40E43D↓o
.text:0040E12C aServer         db ' Server',0          ; DATA XREF: .text:0040E466↓o
.text:0040E12C                                         ; .text:loc_40E5DE↓o
.text:0040E134 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40E478↓o
.text:0040E145 aDatacenterServ db ' Datacenter Server',0
.text:0040E145                                         ; DATA XREF: .text:loc_40E482↓o
.text:0040E158 aStandardEditio db ' Standard Edition',0
.text:0040E158                                         ; DATA XREF: .text:0040E4AA↓o
.text:0040E16A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40E4B4↓o
.text:0040E177 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040E177                                         ; DATA XREF: .text:loc_40E4BE↓o
.text:0040E18B aDatacenterEdit db ' Datacenter Edition',0
.text:0040E18B                                         ; DATA XREF: .text:loc_40E4C8↓o
.text:0040E19F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040E4DB↓o
.text:0040E1AD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40E4E5↓o
.text:0040E1AD                                         ; .text:loc_40E5F0↓o
.text:0040E1BB                 align 10h
.text:0040E1C0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040E1C0                                         ; DATA XREF: .text:0040E512↓o
.text:0040E1F0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040E559↓o
.text:0040E1FC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040E594↓o
.text:0040E202 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040E5AB↓o
.text:0040E20B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040E5C2↓o
.text:0040E214                 align 10h
.text:0040E220 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040E220                                         ; DATA XREF: .text:0040E737↓o
.text:0040E243                 align 20h
.text:0040E260 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040E260                                         ; DATA XREF: .text:0040E796↓o
.text:0040E286 ; ---------------------------------------------------------------------------
.text:0040E286
.text:0040E286 loc_40E286:                             ; DATA XREF: .text:loc_40E801↓o
.text:0040E286                 and     [ebx+45h], dl
.text:0040E289                 add     [eax], ah
.text:0040E28B                 push    ebx
.text:0040E28C                 push    eax
.text:0040E28D                 xor     [eax], eax
.text:0040E28F
.text:0040E28F loc_40E28F:                             ; DATA XREF: .text:loc_40E87B↓o
.text:0040E28F                 and     [edi+53h], cl
.text:0040E292                 push    edx
.text:0040E293                 xor     al, [eax]
.text:0040E295                 lea     esi, [esi+0]
.text:0040E299                 lea     edi, [edi+0]
.text:0040E2A0                 push    edi
.text:0040E2A1                 push    esi
.text:0040E2A2                 push    ebx
.text:0040E2A3                 sub     esp, 130h
.text:0040E2A9                 mov     ebx, [esp+140h]
.text:0040E2B0                 call    sub_40E9B0
.text:0040E2B5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E2BA                 cmp     eax, 1
.text:0040E2BD                 jz      loc_40E760
.text:0040E2C3                 cmp     eax, 1
.text:0040E2C6                 jb      loc_40E736
.text:0040E2CC                 cmp     eax, 2
.text:0040E2CF                 jz      loc_40E380
.text:0040E2D5                 cmp     eax, 3
.text:0040E2D8                 jz      short loc_40E33F
.text:0040E2DA                 lea     esi, [esi+0]
.text:0040E2E0
.text:0040E2E0 loc_40E2E0:                             ; CODE XREF: .text:0040E375↓j
.text:0040E2E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E2E6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E2EC
.text:0040E2EC loc_40E2EC:                             ; CODE XREF: .text:0040E77F↓j
.text:0040E2EC                 mov     [esp+10h], edx
.text:0040E2F0                 mov     ebx, [esp+144h]
.text:0040E2F7                 mov     [esp+0Ch], ecx
.text:0040E2FB                 mov     [esp+8], eax
.text:0040E2FF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040E307                 mov     [esp], ebx
.text:0040E30A                 call    sprintf
.text:0040E30F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040E317                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040E31D                 mov     ecx, [esp+148h]
.text:0040E324                 mov     [esp+8], edi
.text:0040E328                 mov     [esp], ecx
.text:0040E32B                 call    sprintf
.text:0040E330                 mov     eax, 1
.text:0040E335
.text:0040E335 loc_40E335:                             ; CODE XREF: .text:0040E52F↓j
.text:0040E335                                         ; .text:0040E57C↓j
.text:0040E335                 add     esp, 130h
.text:0040E33B                 pop     ebx
.text:0040E33C                 pop     esi
.text:0040E33D                 pop     edi
.text:0040E33E                 retn
.text:0040E33F ; ---------------------------------------------------------------------------
.text:0040E33F
.text:0040E33F loc_40E33F:                             ; CODE XREF: .text:0040E2D8↑j
.text:0040E33F                 mov     dword ptr [ebx], 7263694Dh
.text:0040E345                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E34C                 mov     dword ptr [ebx+8], 69572074h
.text:0040E353                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E35A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040E361                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040E367                 mov     esi, esi
.text:0040E369                 lea     edi, [edi+0]
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: .text:0040E418↓j
.text:0040E370                                         ; .text:0040E759↓j ...
.text:0040E370                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E375                 jmp     loc_40E2E0
.text:0040E375 ; ---------------------------------------------------------------------------
.text:0040E37A                 align 10h
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: .text:0040E2CF↑j
.text:0040E380                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040E386                 cmp     edx, 3
.text:0040E389                 mov     eax, edx
.text:0040E38B                 jz      loc_40E6F5
.text:0040E391
.text:0040E391 loc_40E391:                             ; CODE XREF: .text:0040E6FC↓j
.text:0040E391                 cmp     eax, 4
.text:0040E394                 jz      loc_40E6B5
.text:0040E39A
.text:0040E39A loc_40E39A:                             ; CODE XREF: .text:0040E6BD↓j
.text:0040E39A                 cmp     eax, 4
.text:0040E39D                 ja      loc_40E602
.text:0040E3A3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040E3A9                 test    ecx, ecx
.text:0040E3AB                 jnz     loc_40E602
.text:0040E3B1                 mov     dword ptr [ebx], 7263694Dh
.text:0040E3B7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E3BE                 mov     dword ptr [ebx+8], 69572074h
.text:0040E3C5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E3CC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E3D3
.text:0040E3D3 loc_40E3D3:                             ; CODE XREF: .text:0040E675↓j
.text:0040E3D3                 mov     byte ptr [ebx+14h], 0
.text:0040E3D7
.text:0040E3D7 loc_40E3D7:                             ; CODE XREF: .text:0040E605↓j
.text:0040E3D7                                         ; .text:0040E61C↓j ...
.text:0040E3D7                 mov     esi, dword_414080
.text:0040E3DD                 test    esi, esi
.text:0040E3DF                 jz      loc_40E4F2
.text:0040E3E5                 movzx   eax, ds:byte_415CFA
.text:0040E3EC                 cmp     al, 1
.text:0040E3EE                 jz      loc_40E4D2
.text:0040E3F4                 cmp     al, 3
.text:0040E3F6                 jz      short loc_40E41D
.text:0040E3F8
.text:0040E3F8 loc_40E3F8:                             ; CODE XREF: .text:0040E43B↓j
.text:0040E3F8                                         ; .text:0040E476↓j ...
.text:0040E3F8                 mov     dword ptr [esp+4], offset asc_40E0F0 ; " "
.text:0040E400                 mov     [esp], ebx
.text:0040E403                 call    strcat
.text:0040E408                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040E410                 mov     [esp], ebx
.text:0040E413                 call    strcat
.text:0040E418                 jmp     loc_40E370
.text:0040E41D ; ---------------------------------------------------------------------------
.text:0040E41D
.text:0040E41D loc_40E41D:                             ; CODE XREF: .text:0040E3F6↑j
.text:0040E41D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040E424                 jz      short loc_40E446
.text:0040E426
.text:0040E426 loc_40E426:                             ; CODE XREF: .text:0040E452↓j
.text:0040E426                 test    byte ptr ds:word_415CF8, 2
.text:0040E42D                 jz      short loc_40E43D
.text:0040E42F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040E436
.text:0040E436 loc_40E436:                             ; CODE XREF: .text:0040E444↓j
.text:0040E436                 call    printf
.text:0040E43B                 jmp     short loc_40E3F8
.text:0040E43D ; ---------------------------------------------------------------------------
.text:0040E43D
.text:0040E43D loc_40E43D:                             ; CODE XREF: .text:0040E42D↑j
.text:0040E43D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040E444                 jmp     short loc_40E436
.text:0040E446 ; ---------------------------------------------------------------------------
.text:0040E446
.text:0040E446 loc_40E446:                             ; CODE XREF: .text:0040E424↑j
.text:0040E446                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E44B                 cmp     eax, 2
.text:0040E44E                 jz      short loc_40E490
.text:0040E450                 test    eax, eax
.text:0040E452                 jnz     short loc_40E426
.text:0040E454                 cmp     byte ptr ds:word_415CF8, 0
.text:0040E45B                 js      short loc_40E482
.text:0040E45D                 test    byte ptr ds:word_415CF8, 2
.text:0040E464                 jnz     short loc_40E478
.text:0040E466                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040E46E
.text:0040E46E loc_40E46E:                             ; CODE XREF: .text:0040E480↓j
.text:0040E46E                                         ; .text:0040E48A↓j ...
.text:0040E46E                 mov     [esp], ebx
.text:0040E471                 call    strcat
.text:0040E476                 jmp     short loc_40E3F8
.text:0040E478 ; ---------------------------------------------------------------------------
.text:0040E478
.text:0040E478 loc_40E478:                             ; CODE XREF: .text:0040E464↑j
.text:0040E478                                         ; .text:0040E5D9↓j
.text:0040E478                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040E480                 jmp     short loc_40E46E
.text:0040E482 ; ---------------------------------------------------------------------------
.text:0040E482
.text:0040E482 loc_40E482:                             ; CODE XREF: .text:0040E45B↑j
.text:0040E482                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040E48A                 jmp     short loc_40E46E
.text:0040E48A ; ---------------------------------------------------------------------------
.text:0040E48C                 align 10h
.text:0040E490
.text:0040E490 loc_40E490:                             ; CODE XREF: .text:0040E44E↑j
.text:0040E490                 cmp     byte ptr ds:word_415CF8, 0
.text:0040E497                 js      short loc_40E4C8
.text:0040E499                 movzx   eax, ds:word_415CF8
.text:0040E4A0                 test    al, 2
.text:0040E4A2                 jnz     short loc_40E4BE
.text:0040E4A4                 cmp     ax, 400h
.text:0040E4A8                 jz      short loc_40E4B4
.text:0040E4AA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040E4B2                 jmp     short loc_40E46E
.text:0040E4B4 ; ---------------------------------------------------------------------------
.text:0040E4B4
.text:0040E4B4 loc_40E4B4:                             ; CODE XREF: .text:0040E4A8↑j
.text:0040E4B4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040E4BC                 jmp     short loc_40E46E
.text:0040E4BE ; ---------------------------------------------------------------------------
.text:0040E4BE
.text:0040E4BE loc_40E4BE:                             ; CODE XREF: .text:0040E4A2↑j
.text:0040E4BE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040E4C6                 jmp     short loc_40E46E
.text:0040E4C8 ; ---------------------------------------------------------------------------
.text:0040E4C8
.text:0040E4C8 loc_40E4C8:                             ; CODE XREF: .text:0040E497↑j
.text:0040E4C8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040E4D0                 jmp     short loc_40E46E
.text:0040E4D2 ; ---------------------------------------------------------------------------
.text:0040E4D2
.text:0040E4D2 loc_40E4D2:                             ; CODE XREF: .text:0040E3EE↑j
.text:0040E4D2                 test    byte ptr ds:word_415CF8+1, 2
.text:0040E4D9                 jz      short loc_40E4E5
.text:0040E4DB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040E4E3                 jmp     short loc_40E46E
.text:0040E4E5 ; ---------------------------------------------------------------------------
.text:0040E4E5
.text:0040E4E5 loc_40E4E5:                             ; CODE XREF: .text:0040E4D9↑j
.text:0040E4E5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040E4ED                 jmp     loc_40E46E
.text:0040E4F2 ; ---------------------------------------------------------------------------
.text:0040E4F2
.text:0040E4F2 loc_40E4F2:                             ; CODE XREF: .text:0040E3DF↑j
.text:0040E4F2                 mov     dword ptr [esp+28h], 0FFh
.text:0040E4FA                 lea     edx, [esp+2Ch]
.text:0040E4FE                 mov     [esp+10h], edx
.text:0040E502                 mov     dword ptr [esp+0Ch], 1
.text:0040E50A                 mov     dword ptr [esp+8], 0
.text:0040E512                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040E51A                 mov     dword ptr [esp], 80000002h
.text:0040E521                 call    RegOpenKeyExA
.text:0040E526                 mov     edi, eax
.text:0040E528                 sub     esp, 14h
.text:0040E52B                 xor     eax, eax
.text:0040E52D                 test    edi, edi
.text:0040E52F                 jnz     loc_40E335
.text:0040E535                 mov     dword ptr [esp+0Ch], 0
.text:0040E53D                 mov     edi, [esp+2Ch]
.text:0040E541                 lea     esi, [esp+28h]
.text:0040E545                 mov     [esp+14h], esi
.text:0040E549                 lea     esi, [esp+30h]
.text:0040E54D                 mov     [esp+10h], esi
.text:0040E551                 mov     dword ptr [esp+8], 0
.text:0040E559                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040E561                 mov     [esp], edi
.text:0040E564                 call    RegQueryValueExA
.text:0040E569                 sub     esp, 18h
.text:0040E56C                 test    eax, eax
.text:0040E56E                 jnz     short loc_40E57A
.text:0040E570                 cmp     dword ptr [esp+28h], 0FFh
.text:0040E578                 jbe     short loc_40E581
.text:0040E57A
.text:0040E57A loc_40E57A:                             ; CODE XREF: .text:0040E56E↑j
.text:0040E57A                 xor     eax, eax
.text:0040E57C                 jmp     loc_40E335
.text:0040E581 ; ---------------------------------------------------------------------------
.text:0040E581
.text:0040E581 loc_40E581:                             ; CODE XREF: .text:0040E578↑j
.text:0040E581                 mov     edx, [esp+2Ch]
.text:0040E585                 mov     [esp], edx
.text:0040E588                 call    RegCloseKey
.text:0040E58D                 sub     esp, 4
.text:0040E590                 mov     [esp+4], esi
.text:0040E594                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040E59B                 call    lstrcmpiA
.text:0040E5A0                 sub     esp, 8
.text:0040E5A3                 test    eax, eax
.text:0040E5A5                 jz      short loc_40E5F0
.text:0040E5A7
.text:0040E5A7 loc_40E5A7:                             ; CODE XREF: .text:0040E600↓j
.text:0040E5A7                 mov     [esp+4], esi
.text:0040E5AB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040E5B2                 call    lstrcmpiA
.text:0040E5B7                 sub     esp, 8
.text:0040E5BA                 test    eax, eax
.text:0040E5BC                 jz      short loc_40E5DE
.text:0040E5BE
.text:0040E5BE loc_40E5BE:                             ; CODE XREF: .text:0040E5EE↓j
.text:0040E5BE                 mov     [esp+4], esi
.text:0040E5C2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040E5C9                 call    lstrcmpiA
.text:0040E5CE                 sub     esp, 8
.text:0040E5D1                 test    eax, eax
.text:0040E5D3                 jnz     loc_40E3F8
.text:0040E5D9                 jmp     loc_40E478
.text:0040E5DE ; ---------------------------------------------------------------------------
.text:0040E5DE
.text:0040E5DE loc_40E5DE:                             ; CODE XREF: .text:0040E5BC↑j
.text:0040E5DE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040E5E6                 mov     [esp], ebx
.text:0040E5E9                 call    strcat
.text:0040E5EE                 jmp     short loc_40E5BE
.text:0040E5F0 ; ---------------------------------------------------------------------------
.text:0040E5F0
.text:0040E5F0 loc_40E5F0:                             ; CODE XREF: .text:0040E5A5↑j
.text:0040E5F0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040E5F8                 mov     [esp], ebx
.text:0040E5FB                 call    strcat
.text:0040E600                 jmp     short loc_40E5A7
.text:0040E602 ; ---------------------------------------------------------------------------
.text:0040E602
.text:0040E602 loc_40E602:                             ; CODE XREF: .text:0040E39D↑j
.text:0040E602                                         ; .text:0040E3AB↑j
.text:0040E602                 cmp     eax, 5
.text:0040E605                 jnz     loc_40E3D7
.text:0040E60B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E610                 cmp     eax, 2
.text:0040E613                 jz      short loc_40E67A
.text:0040E615                 cmp     eax, 1
.text:0040E618                 jz      short loc_40E653
.text:0040E61A                 test    eax, eax
.text:0040E61C                 jnz     loc_40E3D7
.text:0040E622                 mov     dword ptr [ebx], 7263694Dh
.text:0040E628                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E62F                 mov     dword ptr [ebx+8], 69572074h
.text:0040E636                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E63D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040E644                 mov     word ptr [ebx+14h], 3030h
.text:0040E64A                 mov     byte ptr [ebx+16h], 0
.text:0040E64E                 jmp     loc_40E3D7
.text:0040E653 ; ---------------------------------------------------------------------------
.text:0040E653
.text:0040E653 loc_40E653:                             ; CODE XREF: .text:0040E618↑j
.text:0040E653                 mov     dword ptr [ebx], 7263694Dh
.text:0040E659                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E660                 mov     dword ptr [ebx+8], 69572074h
.text:0040E667                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E66E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040E675                 jmp     loc_40E3D3
.text:0040E67A ; ---------------------------------------------------------------------------
.text:0040E67A
.text:0040E67A loc_40E67A:                             ; CODE XREF: .text:0040E613↑j
.text:0040E67A                 mov     dword ptr [ebx], 7263694Dh
.text:0040E680                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E687                 mov     dword ptr [ebx+8], 69572074h
.text:0040E68E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E695                 mov     dword ptr [ebx+10h], 65532073h
.text:0040E69C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040E6A3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040E6AA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040E6B0                 jmp     loc_40E3D7
.text:0040E6B5 ; ---------------------------------------------------------------------------
.text:0040E6B5
.text:0040E6B5 loc_40E6B5:                             ; CODE XREF: .text:0040E394↑j
.text:0040E6B5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E6BB                 test    edx, edx
.text:0040E6BD                 jnz     loc_40E39A
.text:0040E6C3                 mov     dword ptr [ebx], 7263694Dh
.text:0040E6C9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E6D0                 mov     dword ptr [ebx+8], 69572074h
.text:0040E6D7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E6DE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E6E5                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040E6EC                 mov     byte ptr [ebx+18h], 0
.text:0040E6F0                 jmp     loc_40E3D7
.text:0040E6F5 ; ---------------------------------------------------------------------------
.text:0040E6F5
.text:0040E6F5 loc_40E6F5:                             ; CODE XREF: .text:0040E38B↑j
.text:0040E6F5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040E6FC                 jnz     loc_40E391
.text:0040E702                 mov     dword ptr [ebx], 7263694Dh
.text:0040E708                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E70F                 mov     dword ptr [ebx+8], 69572074h
.text:0040E716                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E71D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E724                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040E72B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040E731                 jmp     loc_40E3D7
.text:0040E736 ; ---------------------------------------------------------------------------
.text:0040E736
.text:0040E736 loc_40E736:                             ; CODE XREF: .text:0040E2C6↑j
.text:0040E736                 cld
.text:0040E737                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040E73C                 mov     ecx, 8
.text:0040E741                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040E748                 mov     edi, ebx
.text:0040E74A                 rep movsd
.text:0040E74C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040E753                 mov     [edi+2], dl
.text:0040E756                 mov     [edi], si
.text:0040E759                 jmp     loc_40E370
.text:0040E759 ; ---------------------------------------------------------------------------
.text:0040E75E                 align 10h
.text:0040E760
.text:0040E760 loc_40E760:                             ; CODE XREF: .text:0040E2BD↑j
.text:0040E760                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E766                 cmp     ecx, 4
.text:0040E769                 jz      loc_40E820
.text:0040E76F
.text:0040E76F loc_40E76F:                             ; CODE XREF: .text:0040E876↓j
.text:0040E76F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E775
.text:0040E775 loc_40E775:                             ; CODE XREF: .text:0040E828↓j
.text:0040E775                 cmp     ecx, 4
.text:0040E778                 jz      short loc_40E784
.text:0040E77A
.text:0040E77A loc_40E77A:                             ; CODE XREF: .text:0040E78C↓j
.text:0040E77A                                         ; .text:0040E791↓j
.text:0040E77A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E77F                 jmp     loc_40E2EC
.text:0040E784 ; ---------------------------------------------------------------------------
.text:0040E784
.text:0040E784 loc_40E784:                             ; CODE XREF: .text:0040E778↑j
.text:0040E784                 cmp     edx, 0Ah
.text:0040E787                 jz      short loc_40E7B1
.text:0040E789
.text:0040E789 loc_40E789:                             ; CODE XREF: .text:0040E7FF↓j
.text:0040E789                 cmp     ecx, 4
.text:0040E78C                 jnz     short loc_40E77A
.text:0040E78E                 cmp     edx, 5Ah ; 'Z'
.text:0040E791                 jnz     short loc_40E77A
.text:0040E793                 cld
.text:0040E794                 mov     edi, ebx
.text:0040E796                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040E79B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040E7A2                 mov     ecx, 9
.text:0040E7A7                 rep movsd
.text:0040E7A9                 mov     [edi], bx
.text:0040E7AC                 jmp     loc_40E370
.text:0040E7B1 ; ---------------------------------------------------------------------------
.text:0040E7B1
.text:0040E7B1 loc_40E7B1:                             ; CODE XREF: .text:0040E787↑j
.text:0040E7B1                 mov     dword ptr [ebx], 7263694Dh
.text:0040E7B7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E7BE                 mov     dword ptr [ebx+8], 69572074h
.text:0040E7C5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E7CC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040E7D3                 mov     byte ptr [ebx+14h], 0
.text:0040E7D7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040E7DD                 lea     edi, [edx-7CFh]
.text:0040E7E3                 cmp     edi, 0B7h ; '·'
.text:0040E7E9                 jbe     short loc_40E813
.text:0040E7EB                 cmp     edx, 886h
.text:0040E7F1                 ja      short loc_40E801
.text:0040E7F3
.text:0040E7F3 loc_40E7F3:                             ; CODE XREF: .text:0040E811↓j
.text:0040E7F3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E7F9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E7FF                 jmp     short loc_40E789
.text:0040E801 ; ---------------------------------------------------------------------------
.text:0040E801
.text:0040E801 loc_40E801:                             ; CODE XREF: .text:0040E7F1↑j
.text:0040E801                 mov     dword ptr [esp+4], offset loc_40E286
.text:0040E809
.text:0040E809 loc_40E809:                             ; CODE XREF: .text:0040E81B↓j
.text:0040E809                 mov     [esp], ebx
.text:0040E80C                 call    strcat
.text:0040E811                 jmp     short loc_40E7F3
.text:0040E813 ; ---------------------------------------------------------------------------
.text:0040E813
.text:0040E813 loc_40E813:                             ; CODE XREF: .text:0040E7E9↑j
.text:0040E813                 mov     dword ptr [esp+4], 40E28Ah
.text:0040E81B                 jmp     short loc_40E809
.text:0040E81B ; ---------------------------------------------------------------------------
.text:0040E81D                 align 10h
.text:0040E820
.text:0040E820 loc_40E820:                             ; CODE XREF: .text:0040E769↑j
.text:0040E820                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E826                 test    edx, edx
.text:0040E828                 jnz     loc_40E775
.text:0040E82E                 mov     dword ptr [ebx], 7263694Dh
.text:0040E834                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E83B                 mov     dword ptr [ebx+8], 69572074h
.text:0040E842                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E849                 mov     dword ptr [ebx+10h], 35392073h
.text:0040E850                 mov     byte ptr [ebx+14h], 0
.text:0040E854                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040E85A                 lea     ecx, [edx-3B7h]
.text:0040E860                 cmp     ecx, 81h
.text:0040E866                 jbe     short loc_40E88D
.text:0040E868                 cmp     edx, 438h
.text:0040E86E                 ja      short loc_40E87B
.text:0040E870
.text:0040E870 loc_40E870:                             ; CODE XREF: .text:0040E88B↓j
.text:0040E870                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E876                 jmp     loc_40E76F
.text:0040E87B ; ---------------------------------------------------------------------------
.text:0040E87B
.text:0040E87B loc_40E87B:                             ; CODE XREF: .text:0040E86E↑j
.text:0040E87B                 mov     dword ptr [esp+4], offset loc_40E28F
.text:0040E883
.text:0040E883 loc_40E883:                             ; CODE XREF: .text:0040E895↓j
.text:0040E883                 mov     [esp], ebx
.text:0040E886                 call    strcat
.text:0040E88B                 jmp     short loc_40E870
.text:0040E88D ; ---------------------------------------------------------------------------
.text:0040E88D
.text:0040E88D loc_40E88D:                             ; CODE XREF: .text:0040E866↑j
.text:0040E88D                 mov     dword ptr [esp+4], 40E28Ah
.text:0040E895                 jmp     short loc_40E883
.text:0040E895 ; ---------------------------------------------------------------------------
.text:0040E897                 align 10h
.text:0040E8A0
.text:0040E8A0 ; =============== S U B R O U T I N E =======================================
.text:0040E8A0
.text:0040E8A0
.text:0040E8A0 sub_40E8A0      proc near               ; CODE XREF: .text:0040CD4E↑p
.text:0040E8A0                                         ; sub_40D1D0+12A↑p
.text:0040E8A0                 sub     esp, 0Ch
.text:0040E8A3                 call    sub_40E9B0
.text:0040E8A8                 mov     eax, ds:dword_415C50
.text:0040E8AD                 add     esp, 0Ch
.text:0040E8B0                 retn
.text:0040E8B0 sub_40E8A0      endp
.text:0040E8B0
.text:0040E8B1 ; ---------------------------------------------------------------------------
.text:0040E8B1                 jmp     short loc_40E8C0
.text:0040E8B1 ; ---------------------------------------------------------------------------
.text:0040E8B3                 align 10h
.text:0040E8C0
.text:0040E8C0 loc_40E8C0:                             ; CODE XREF: .text:0040E8B1↑j
.text:0040E8C0                 sub     esp, 0Ch
.text:0040E8C3                 call    sub_40E9B0
.text:0040E8C8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E8CD                 add     esp, 0Ch
.text:0040E8D0                 retn
.text:0040E8D1 ; ---------------------------------------------------------------------------
.text:0040E8D1                 jmp     short loc_40E8E0
.text:0040E8D1 ; ---------------------------------------------------------------------------
.text:0040E8D3                 align 10h
.text:0040E8E0
.text:0040E8E0 loc_40E8E0:                             ; CODE XREF: .text:0040E8D1↑j
.text:0040E8E0                 sub     esp, 0Ch
.text:0040E8E3                 call    sub_40E9B0
.text:0040E8E8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040E8ED                 add     esp, 0Ch
.text:0040E8F0                 retn
.text:0040E8F1 ; ---------------------------------------------------------------------------
.text:0040E8F1                 jmp     short loc_40E900
.text:0040E8F1 ; ---------------------------------------------------------------------------
.text:0040E8F3                 align 10h
.text:0040E900
.text:0040E900 loc_40E900:                             ; CODE XREF: .text:0040E8F1↑j
.text:0040E900                 sub     esp, 0Ch
.text:0040E903                 call    sub_40E9B0
.text:0040E908                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E90D                 add     esp, 0Ch
.text:0040E910                 retn
.text:0040E911 ; ---------------------------------------------------------------------------
.text:0040E911                 jmp     short loc_40E920
.text:0040E911 ; ---------------------------------------------------------------------------
.text:0040E913                 align 10h
.text:0040E920
.text:0040E920 loc_40E920:                             ; CODE XREF: .text:0040E911↑j
.text:0040E920                 sub     esp, 0Ch
.text:0040E923                 call    GetVersion
.text:0040E928                 shr     eax, 10h
.text:0040E92B                 add     esp, 0Ch
.text:0040E92E                 retn
.text:0040E92E ; ---------------------------------------------------------------------------
.text:0040E92F                 align 10h
.text:0040E930                 sub     esp, 0Ch
.text:0040E933                 call    sub_40E9B0
.text:0040E938                 xor     eax, eax
.text:0040E93A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040E941                 setz    al
.text:0040E944                 add     esp, 0Ch
.text:0040E947                 retn
.text:0040E947 ; ---------------------------------------------------------------------------
.text:0040E948                 align 10h
.text:0040E950
.text:0040E950 ; =============== S U B R O U T I N E =======================================
.text:0040E950
.text:0040E950
.text:0040E950 sub_40E950      proc near               ; CODE XREF: .text:loc_40C4C0↑p
.text:0040E950                                         ; .text:loc_40CD34↑p ...
.text:0040E950                 sub     esp, 0Ch
.text:0040E953                 call    sub_40E9B0
.text:0040E958                 xor     eax, eax
.text:0040E95A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040E961                 setz    al
.text:0040E964                 add     esp, 0Ch
.text:0040E967                 retn
.text:0040E967 sub_40E950      endp
.text:0040E967
.text:0040E967 ; ---------------------------------------------------------------------------
.text:0040E968                 align 10h
.text:0040E970                 sub     esp, 0Ch
.text:0040E973                 call    sub_40E9B0
.text:0040E978                 xor     eax, eax
.text:0040E97A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040E981                 setz    al
.text:0040E984                 add     esp, 0Ch
.text:0040E987                 retn
.text:0040E987 ; ---------------------------------------------------------------------------
.text:0040E988                 align 10h
.text:0040E990                 sub     esp, 0Ch
.text:0040E993                 call    sub_40E9B0
.text:0040E998                 xor     eax, eax
.text:0040E99A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040E9A1                 setz    al
.text:0040E9A4                 add     esp, 0Ch
.text:0040E9A7                 retn
.text:0040E9A7 ; ---------------------------------------------------------------------------
.text:0040E9A8                 align 10h
.text:0040E9B0
.text:0040E9B0 ; =============== S U B R O U T I N E =======================================
.text:0040E9B0
.text:0040E9B0
.text:0040E9B0 sub_40E9B0      proc near               ; CODE XREF: .text:0040E2B0↑p
.text:0040E9B0                                         ; sub_40E8A0+3↑p ...
.text:0040E9B0
.text:0040E9B0 lpVersionInformation= dword ptr -0BCh
.text:0040E9B0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040E9B0
.text:0040E9B0                 sub     esp, 0BCh
.text:0040E9B6                 mov     edx, ds:dword_415D00
.text:0040E9BC                 test    edx, edx
.text:0040E9BE                 jz      short loc_40E9D0
.text:0040E9C0
.text:0040E9C0 loc_40E9C0:                             ; CODE XREF: sub_40E9B0+7B↓j
.text:0040E9C0                 mov     edx, 1
.text:0040E9C5
.text:0040E9C5 loc_40E9C5:                             ; CODE XREF: sub_40E9B0+217↓j
.text:0040E9C5                 mov     eax, edx
.text:0040E9C7                 add     esp, 0BCh
.text:0040E9CD                 retn
.text:0040E9CD ; ---------------------------------------------------------------------------
.text:0040E9CE                 align 10h
.text:0040E9D0
.text:0040E9D0 loc_40E9D0:                             ; CODE XREF: sub_40E9B0+E↑j
.text:0040E9D0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040E9D7                 mov     edx, 9Ch ; 'œ'
.text:0040E9DC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040E9E2                 call    GetVersionExA
.text:0040E9E7                 sub     esp, 4
.text:0040E9EA                 test    eax, eax
.text:0040E9EC                 jz      loc_40EBA4
.text:0040E9F2
.text:0040E9F2 loc_40E9F2:                             ; CODE XREF: sub_40E9B0+245↓j
.text:0040E9F2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040E9F9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E9FE                 cmp     eax, 1
.text:0040EA01                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040EA07                 jz      loc_40EAF0
.text:0040EA0D                 cmp     eax, 1
.text:0040EA10                 jb      loc_40EAE0
.text:0040EA16                 cmp     eax, 2
.text:0040EA19                 jz      short loc_40EA3A
.text:0040EA1B                 cmp     eax, 3
.text:0040EA1E                 jz      short loc_40EA2D
.text:0040EA20
.text:0040EA20 loc_40EA20:                             ; CODE XREF: sub_40E9B0+88↓j
.text:0040EA20                                         ; sub_40E9B0+C0↓j ...
.text:0040EA20                 mov     edx, 1
.text:0040EA25                 mov     ds:dword_415D00, edx
.text:0040EA2B                 jmp     short loc_40E9C0
.text:0040EA2D ; ---------------------------------------------------------------------------
.text:0040EA2D
.text:0040EA2D loc_40EA2D:                             ; CODE XREF: sub_40E9B0+6E↑j
.text:0040EA2D                 mov     ecx, 17h
.text:0040EA32
.text:0040EA32 loc_40EA32:                             ; CODE XREF: sub_40E9B0+1A7↓j
.text:0040EA32                 mov     ds:dword_415C50, ecx
.text:0040EA38                 jmp     short loc_40EA20
.text:0040EA3A ; ---------------------------------------------------------------------------
.text:0040EA3A
.text:0040EA3A loc_40EA3A:                             ; CODE XREF: sub_40E9B0+69↑j
.text:0040EA3A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040EA3F                 cmp     eax, 3
.text:0040EA42                 jz      short loc_40EABB
.text:0040EA44                 cmp     eax, 4
.text:0040EA47                 jz      short loc_40EAAA
.text:0040EA49
.text:0040EA49 loc_40EA49:                             ; CODE XREF: sub_40E9B0+102↓j
.text:0040EA49                 cmp     eax, 4
.text:0040EA4C                 ja      short loc_40EA72
.text:0040EA4E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040EA54                 test    ecx, ecx
.text:0040EA56                 jnz     short loc_40EA72
.text:0040EA58                 mov     edx, 1Eh
.text:0040EA5D
.text:0040EA5D loc_40EA5D:                             ; CODE XREF: sub_40E9B0+DF↓j
.text:0040EA5D                 mov     ds:dword_415C50, edx
.text:0040EA63
.text:0040EA63 loc_40EA63:                             ; CODE XREF: sub_40E9B0+C5↓j
.text:0040EA63                                         ; sub_40E9B0+D8↓j ...
.text:0040EA63                 movzx   ecx, ds:word_415CF4
.text:0040EA6A                 add     ds:dword_415C50, ecx
.text:0040EA70                 jmp     short loc_40EA20
.text:0040EA72 ; ---------------------------------------------------------------------------
.text:0040EA72
.text:0040EA72 loc_40EA72:                             ; CODE XREF: sub_40E9B0+9C↑j
.text:0040EA72                                         ; sub_40E9B0+A6↑j
.text:0040EA72                 cmp     eax, 5
.text:0040EA75                 jnz     short loc_40EA63
.text:0040EA77                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EA7C                 cmp     eax, 2
.text:0040EA7F                 jz      short loc_40EA9E
.text:0040EA81                 cmp     eax, 1
.text:0040EA84                 jz      short loc_40EA91
.text:0040EA86                 test    eax, eax
.text:0040EA88                 jnz     short loc_40EA63
.text:0040EA8A                 mov     edx, 32h ; '2'
.text:0040EA8F                 jmp     short loc_40EA5D
.text:0040EA91 ; ---------------------------------------------------------------------------
.text:0040EA91
.text:0040EA91 loc_40EA91:                             ; CODE XREF: sub_40E9B0+D4↑j
.text:0040EA91                 mov     ecx, 3Ch ; '<'
.text:0040EA96
.text:0040EA96 loc_40EA96:                             ; CODE XREF: sub_40E9B0+122↓j
.text:0040EA96                 mov     ds:dword_415C50, ecx
.text:0040EA9C                 jmp     short loc_40EA63
.text:0040EA9E ; ---------------------------------------------------------------------------
.text:0040EA9E
.text:0040EA9E loc_40EA9E:                             ; CODE XREF: sub_40E9B0+CF↑j
.text:0040EA9E                 mov     eax, 46h ; 'F'
.text:0040EAA3
.text:0040EAA3 loc_40EAA3:                             ; CODE XREF: sub_40E9B0+109↓j
.text:0040EAA3                                         ; sub_40E9B0+129↓j
.text:0040EAA3                 mov     ds:dword_415C50, eax
.text:0040EAA8                 jmp     short loc_40EA63
.text:0040EAAA ; ---------------------------------------------------------------------------
.text:0040EAAA
.text:0040EAAA loc_40EAAA:                             ; CODE XREF: sub_40E9B0+97↑j
.text:0040EAAA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040EAB0                 test    ecx, ecx
.text:0040EAB2                 jnz     short loc_40EA49
.text:0040EAB4                 mov     eax, 28h ; '('
.text:0040EAB9                 jmp     short loc_40EAA3
.text:0040EABB ; ---------------------------------------------------------------------------
.text:0040EABB
.text:0040EABB loc_40EABB:                             ; CODE XREF: sub_40E9B0+92↑j
.text:0040EABB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EAC0                 cmp     eax, 33h ; '3'
.text:0040EAC3                 jz      short loc_40EAD4
.text:0040EAC5                 cmp     eax, 5
.text:0040EAC8                 setz    cl
.text:0040EACB                 movzx   edx, cl
.text:0040EACE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040EAD2                 jmp     short loc_40EA96
.text:0040EAD4 ; ---------------------------------------------------------------------------
.text:0040EAD4
.text:0040EAD4 loc_40EAD4:                             ; CODE XREF: sub_40E9B0+113↑j
.text:0040EAD4                 mov     eax, 24h ; '$'
.text:0040EAD9                 jmp     short loc_40EAA3
.text:0040EAD9 ; ---------------------------------------------------------------------------
.text:0040EADB                 align 10h
.text:0040EAE0
.text:0040EAE0 loc_40EAE0:                             ; CODE XREF: sub_40E9B0+60↑j
.text:0040EAE0                 mov     edx, 2
.text:0040EAE5                 mov     ds:dword_415C50, edx
.text:0040EAEB                 jmp     loc_40EA20
.text:0040EAF0 ; ---------------------------------------------------------------------------
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: sub_40E9B0+57↑j
.text:0040EAF0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040EAF6                 cmp     ecx, 4
.text:0040EAF9                 jnz     loc_40EA20
.text:0040EAFF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EB04                 test    eax, eax
.text:0040EB06                 jnz     short loc_40EB2A
.text:0040EB08                 mov     eax, 0Ah
.text:0040EB0D                 mov     ds:dword_415C50, eax
.text:0040EB12                 lea     eax, [edx-3B7h]
.text:0040EB18                 cmp     eax, 81h
.text:0040EB1D                 ja      short loc_40EB95
.text:0040EB1F                 mov     edx, 0Bh
.text:0040EB24
.text:0040EB24 loc_40EB24:                             ; CODE XREF: sub_40E9B0+1F2↓j
.text:0040EB24                 mov     ds:dword_415C50, edx
.text:0040EB2A
.text:0040EB2A loc_40EB2A:                             ; CODE XREF: sub_40E9B0+156↑j
.text:0040EB2A                                         ; sub_40E9B0+1EB↓j
.text:0040EB2A                 cmp     ecx, 4
.text:0040EB2D                 jnz     loc_40EA20
.text:0040EB33                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040EB3A                 jz      short loc_40EB5C
.text:0040EB3C
.text:0040EB3C loc_40EB3C:                             ; CODE XREF: sub_40E9B0+1D4↓j
.text:0040EB3C                                         ; sub_40E9B0+1DC↓j
.text:0040EB3C                 cmp     ecx, 4
.text:0040EB3F                 jnz     loc_40EA20
.text:0040EB45                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040EB4C                 jnz     loc_40EA20
.text:0040EB52                 mov     ecx, 12h
.text:0040EB57                 jmp     loc_40EA32
.text:0040EB5C ; ---------------------------------------------------------------------------
.text:0040EB5C
.text:0040EB5C loc_40EB5C:                             ; CODE XREF: sub_40E9B0+18A↑j
.text:0040EB5C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040EB62                 mov     eax, 0Eh
.text:0040EB67                 mov     ds:dword_415C50, eax
.text:0040EB6C                 lea     eax, [edx-7CFh]
.text:0040EB72                 cmp     eax, 0B7h ; '·'
.text:0040EB77                 ja      short loc_40EB86
.text:0040EB79                 mov     edx, 0Fh
.text:0040EB7E
.text:0040EB7E loc_40EB7E:                             ; CODE XREF: sub_40E9B0+1E3↓j
.text:0040EB7E                 mov     ds:dword_415C50, edx
.text:0040EB84                 jmp     short loc_40EB3C
.text:0040EB86 ; ---------------------------------------------------------------------------
.text:0040EB86
.text:0040EB86 loc_40EB86:                             ; CODE XREF: sub_40E9B0+1C7↑j
.text:0040EB86                 cmp     edx, 886h
.text:0040EB8C                 jbe     short loc_40EB3C
.text:0040EB8E                 mov     edx, 10h
.text:0040EB93                 jmp     short loc_40EB7E
.text:0040EB95 ; ---------------------------------------------------------------------------
.text:0040EB95
.text:0040EB95 loc_40EB95:                             ; CODE XREF: sub_40E9B0+16D↑j
.text:0040EB95                 cmp     edx, 438h
.text:0040EB9B                 jbe     short loc_40EB2A
.text:0040EB9D                 mov     edx, 0Ch
.text:0040EBA2                 jmp     short loc_40EB24
.text:0040EBA4 ; ---------------------------------------------------------------------------
.text:0040EBA4
.text:0040EBA4 loc_40EBA4:                             ; CODE XREF: sub_40E9B0+3C↑j
.text:0040EBA4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040EBAC                 xor     edx, edx
.text:0040EBAE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040EBB2                 mov     dword_414080, edx
.text:0040EBB8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040EBBB                 call    GetVersionExA
.text:0040EBC0                 sub     esp, 4
.text:0040EBC3                 xor     edx, edx
.text:0040EBC5                 test    eax, eax
.text:0040EBC7                 jz      loc_40E9C5
.text:0040EBCD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040EBD1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040EBD5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040EBDB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040EBDF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040EBE5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040EBE9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040EBEF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040EBF5                 jmp     loc_40E9F2
.text:0040EBF5 sub_40E9B0      endp
.text:0040EBF5
.text:0040EBF5 ; ---------------------------------------------------------------------------
.text:0040EBFA                 align 10h
.text:0040EC00 aNotset         db 'notset',0           ; DATA XREF: .data:off_414090↓o
.text:0040EC00                                         ; .data:off_414094↓o
.text:0040EC07 ; ---------------------------------------------------------------------------
.text:0040EC07
.text:0040EC07 loc_40EC07:                             ; DATA XREF: .text:loc_40ECA5↓o
.text:0040EC07                 jb      short loc_40EC80
.text:0040EC09                 add     [eax], ah
.text:0040EC0B                 or      [eax], eax
.text:0040EC0D
.text:0040EC0D loc_40EC0D:                             ; DATA XREF: .text:0040ECF8↓o
.text:0040EC0D                                         ; .text:0040ED5E↓o ...
.text:0040EC0D                 add     [eax], ah
.text:0040EC0F                 and     eax, 64252064h
.text:0040EC14                 and     [eax], al
.text:0040EC16                 lea     esi, [esi+0]
.text:0040EC19                 lea     edi, [edi+0]
.text:0040EC20                 push    ebp
.text:0040EC21                 push    edi
.text:0040EC22                 push    esi
.text:0040EC23                 push    ebx
.text:0040EC24                 sub     esp, 14Ch
.text:0040EC2A                 mov     edx, off_414090 ; "notset"
.text:0040EC30                 mov     edi, [esp+164h]
.text:0040EC37                 mov     ebp, [esp+168h]
.text:0040EC3E                 mov     [esp+4], edx
.text:0040EC42                 mov     edx, off_414094 ; "notset"
.text:0040EC48                 mov     [esp], edx
.text:0040EC4B                 call    strcmp
.text:0040EC50                 test    eax, eax
.text:0040EC52                 jz      loc_40F040
.text:0040EC58
.text:0040EC58 loc_40EC58:                             ; CODE XREF: .text:0040F08C↓j
.text:0040EC58                 lea     ebx, [esp+20h]
.text:0040EC5C                 lea     esi, [esi+0]
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; CODE XREF: .text:0040EC96↓j
.text:0040EC60                 mov     [esp+4], ebx
.text:0040EC64                 mov     ecx, off_414094 ; "notset"
.text:0040EC6A                 mov     [esp], ecx
.text:0040EC6D                 call    loc_40D270
.text:0040EC72                 test    eax, eax
.text:0040EC74                 jns     short loc_40ECA5
.text:0040EC76                 mov     eax, off_414094 ; "notset"
.text:0040EC7B                 cmp     byte ptr [eax], 0
.text:0040EC7E                 jz      short loc_40EC98
.text:0040EC80
.text:0040EC80 loc_40EC80:                             ; CODE XREF: .text:loc_40EC07↑j
.text:0040EC80                 mov     dword ptr [esp+4], 0
.text:0040EC88                 mov     [esp], eax
.text:0040EC8B                 call    strchr
.text:0040EC90                 inc     eax
.text:0040EC91                 mov     off_414094, eax ; "notset"
.text:0040EC96                 jmp     short loc_40EC60
.text:0040EC98 ; ---------------------------------------------------------------------------
.text:0040EC98
.text:0040EC98 loc_40EC98:                             ; CODE XREF: .text:0040EC7E↑j
.text:0040EC98                 xor     eax, eax
.text:0040EC9A
.text:0040EC9A loc_40EC9A:                             ; CODE XREF: .text:0040EE5C↓j
.text:0040EC9A                 add     esp, 14Ch
.text:0040ECA0                 pop     ebx
.text:0040ECA1                 pop     esi
.text:0040ECA2                 pop     edi
.text:0040ECA3                 pop     ebp
.text:0040ECA4                 retn
.text:0040ECA5 ; ---------------------------------------------------------------------------
.text:0040ECA5
.text:0040ECA5 loc_40ECA5:                             ; CODE XREF: .text:0040EC74↑j
.text:0040ECA5                 mov     dword ptr [edi+0Ch], offset loc_40EC07
.text:0040ECAC                 lea     ecx, [esp+0D6h]
.text:0040ECB3                 lea     edx, [esp+6Ch]
.text:0040ECB7                 mov     [edi+4], ecx
.text:0040ECBA                 lea     ebx, [esp+7Ch]
.text:0040ECBE                 mov     [edi+8], edx
.text:0040ECC1                 mov     [edi], ebx
.text:0040ECC3                 mov     [esp], ebp
.text:0040ECC6                 mov     [esp+4], edi
.text:0040ECCA                 call    ___addmntentstr
.text:0040ECCF                 mov     [esp], ebp
.text:0040ECD2                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040ECDA                 call    strspn
.text:0040ECDF                 mov     dword ptr [esp+4], 0
.text:0040ECE7                 mov     ebx, off_414094 ; "notset"
.text:0040ECED                 lea     esi, [eax+ebp]
.text:0040ECF0                 mov     [esp+1Ch], esi
.text:0040ECF4                 lea     ebp, [esp+1Ch]
.text:0040ECF8                 mov     esi, offset loc_40EC0D
.text:0040ECFD                 mov     [esp], ebx
.text:0040ED00                 call    strchr
.text:0040ED05                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040ED0D                 inc     eax
.text:0040ED0E                 mov     off_414094, eax ; "notset"
.text:0040ED13                 mov     [esp], ebp
.text:0040ED16                 call    sub_410690
.text:0040ED1B                 test    eax, eax
.text:0040ED1D                 mov     ebx, eax
.text:0040ED1F                 jz      short loc_40ED48
.text:0040ED21                 mov     edx, eax
.text:0040ED23                 mov     ecx, eax
.text:0040ED25                 lea     esi, [esi+0]
.text:0040ED29                 lea     edi, [edi+0]
.text:0040ED30
.text:0040ED30 loc_40ED30:                             ; CODE XREF: .text:0040ED46↓j
.text:0040ED30                 movzx   eax, byte ptr [edx]
.text:0040ED33                 cmp     al, 5Ch ; '\'
.text:0040ED35                 jz      loc_40EFE4
.text:0040ED3B
.text:0040ED3B loc_40ED3B:                             ; CODE XREF: .text:0040EFEC↓j
.text:0040ED3B                                         ; .text:0040EFFA↓j ...
.text:0040ED3B                 mov     [ecx], al
.text:0040ED3D
.text:0040ED3D loc_40ED3D:                             ; CODE XREF: .text:0040F00E↓j
.text:0040ED3D                 inc     ecx
.text:0040ED3E
.text:0040ED3E loc_40ED3E:                             ; CODE XREF: .text:0040F026↓j
.text:0040ED3E                 movzx   eax, byte ptr [edx]
.text:0040ED41                 mov     esi, ebx
.text:0040ED43                 inc     edx
.text:0040ED44                 test    al, al
.text:0040ED46                 jnz     short loc_40ED30
.text:0040ED48
.text:0040ED48 loc_40ED48:                             ; CODE XREF: .text:0040ED1F↑j
.text:0040ED48                 mov     [edi], esi
.text:0040ED4A                 mov     eax, [esp+1Ch]
.text:0040ED4E                 test    eax, eax
.text:0040ED50                 jnz     loc_40EFCB
.text:0040ED56
.text:0040ED56 loc_40ED56:                             ; CODE XREF: .text:0040EFDF↓j
.text:0040ED56                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040ED5E                 mov     esi, offset loc_40EC0D
.text:0040ED63                 mov     [esp], ebp
.text:0040ED66                 call    sub_410690
.text:0040ED6B                 test    eax, eax
.text:0040ED6D                 mov     ebx, eax
.text:0040ED6F                 jz      short loc_40ED98
.text:0040ED71                 mov     edx, eax
.text:0040ED73                 mov     ecx, eax
.text:0040ED75                 lea     esi, [esi+0]
.text:0040ED79                 lea     edi, [edi+0]
.text:0040ED80
.text:0040ED80 loc_40ED80:                             ; CODE XREF: .text:0040ED96↓j
.text:0040ED80                 movzx   eax, byte ptr [edx]
.text:0040ED83                 cmp     al, 5Ch ; '\'
.text:0040ED85                 jz      loc_40EF73
.text:0040ED8B
.text:0040ED8B loc_40ED8B:                             ; CODE XREF: .text:0040EF7B↓j
.text:0040ED8B                                         ; .text:0040EF89↓j ...
.text:0040ED8B                 mov     [ecx], al
.text:0040ED8D
.text:0040ED8D loc_40ED8D:                             ; CODE XREF: .text:0040EF9D↓j
.text:0040ED8D                 inc     ecx
.text:0040ED8E
.text:0040ED8E loc_40ED8E:                             ; CODE XREF: .text:0040EFB5↓j
.text:0040ED8E                 movzx   eax, byte ptr [edx]
.text:0040ED91                 mov     esi, ebx
.text:0040ED93                 inc     edx
.text:0040ED94                 test    al, al
.text:0040ED96                 jnz     short loc_40ED80
.text:0040ED98
.text:0040ED98 loc_40ED98:                             ; CODE XREF: .text:0040ED6F↑j
.text:0040ED98                 mov     [edi+4], esi
.text:0040ED9B                 mov     eax, [esp+1Ch]
.text:0040ED9F                 test    eax, eax
.text:0040EDA1                 jnz     loc_40EF5A
.text:0040EDA7
.text:0040EDA7 loc_40EDA7:                             ; CODE XREF: .text:0040EF6E↓j
.text:0040EDA7                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040EDAF                 mov     esi, offset loc_40EC0D
.text:0040EDB4                 mov     [esp], ebp
.text:0040EDB7                 call    sub_410690
.text:0040EDBC                 test    eax, eax
.text:0040EDBE                 mov     ebx, eax
.text:0040EDC0                 jz      short loc_40EDE8
.text:0040EDC2                 mov     edx, eax
.text:0040EDC4                 mov     ecx, eax
.text:0040EDC6                 lea     esi, [esi+0]
.text:0040EDC9                 lea     edi, [edi+0]
.text:0040EDD0
.text:0040EDD0 loc_40EDD0:                             ; CODE XREF: .text:0040EDE6↓j
.text:0040EDD0                 movzx   eax, byte ptr [edx]
.text:0040EDD3                 cmp     al, 5Ch ; '\'
.text:0040EDD5                 jz      loc_40EF02
.text:0040EDDB
.text:0040EDDB loc_40EDDB:                             ; CODE XREF: .text:0040EF0A↓j
.text:0040EDDB                                         ; .text:0040EF18↓j ...
.text:0040EDDB                 mov     [ecx], al
.text:0040EDDD
.text:0040EDDD loc_40EDDD:                             ; CODE XREF: .text:0040EF2C↓j
.text:0040EDDD                 inc     ecx
.text:0040EDDE
.text:0040EDDE loc_40EDDE:                             ; CODE XREF: .text:0040EF44↓j
.text:0040EDDE                 movzx   eax, byte ptr [edx]
.text:0040EDE1                 mov     esi, ebx
.text:0040EDE3                 inc     edx
.text:0040EDE4                 test    al, al
.text:0040EDE6                 jnz     short loc_40EDD0
.text:0040EDE8
.text:0040EDE8 loc_40EDE8:                             ; CODE XREF: .text:0040EDC0↑j
.text:0040EDE8                 mov     [edi+8], esi
.text:0040EDEB                 mov     eax, [esp+1Ch]
.text:0040EDEF                 test    eax, eax
.text:0040EDF1                 jnz     loc_40EEE9
.text:0040EDF7
.text:0040EDF7 loc_40EDF7:                             ; CODE XREF: .text:0040EEFD↓j
.text:0040EDF7                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040EDFF                 mov     esi, offset loc_40EC0D
.text:0040EE04                 mov     [esp], ebp
.text:0040EE07                 call    sub_410690
.text:0040EE0C                 test    eax, eax
.text:0040EE0E                 mov     ebx, eax
.text:0040EE10                 jz      short loc_40EE34
.text:0040EE12                 mov     edx, eax
.text:0040EE14                 mov     ecx, eax
.text:0040EE16                 lea     esi, [esi+0]
.text:0040EE19                 lea     edi, [edi+0]
.text:0040EE20
.text:0040EE20 loc_40EE20:                             ; CODE XREF: .text:0040EE32↓j
.text:0040EE20                 movzx   eax, byte ptr [edx]
.text:0040EE23                 cmp     al, 5Ch ; '\'
.text:0040EE25                 jz      short loc_40EE95
.text:0040EE27
.text:0040EE27 loc_40EE27:                             ; CODE XREF: .text:0040EE9D↓j
.text:0040EE27                                         ; .text:0040EEA7↓j ...
.text:0040EE27                 mov     [ecx], al
.text:0040EE29
.text:0040EE29 loc_40EE29:                             ; CODE XREF: .text:0040EEBB↓j
.text:0040EE29                 inc     ecx
.text:0040EE2A
.text:0040EE2A loc_40EE2A:                             ; CODE XREF: .text:0040EED3↓j
.text:0040EE2A                 movzx   eax, byte ptr [edx]
.text:0040EE2D                 mov     esi, ebx
.text:0040EE2F                 inc     edx
.text:0040EE30                 test    al, al
.text:0040EE32                 jnz     short loc_40EE20
.text:0040EE34
.text:0040EE34 loc_40EE34:                             ; CODE XREF: .text:0040EE10↑j
.text:0040EE34                 mov     [edi+0Ch], esi
.text:0040EE37                 xor     eax, eax
.text:0040EE39                 mov     edx, [esp+1Ch]
.text:0040EE3D                 test    edx, edx
.text:0040EE3F                 jnz     short loc_40EE75
.text:0040EE41
.text:0040EE41 loc_40EE41:                             ; CODE XREF: .text:0040EE93↓j
.text:0040EE41                 cmp     eax, 1
.text:0040EE44                 jz      short loc_40EE6C
.text:0040EE46                 cmp     eax, 1
.text:0040EE49                 jle     short loc_40EE61
.text:0040EE4B
.text:0040EE4B loc_40EE4B:                             ; CODE XREF: .text:0040EE63↓j
.text:0040EE4B                                         ; .text:0040EE73↓j
.text:0040EE4B                 mov     edx, [esp+160h]
.text:0040EE52                 mov     [esp], edx
.text:0040EE55                 call    sub_410630
.text:0040EE5A                 mov     eax, edi
.text:0040EE5C                 jmp     loc_40EC9A
.text:0040EE61 ; ---------------------------------------------------------------------------
.text:0040EE61
.text:0040EE61 loc_40EE61:                             ; CODE XREF: .text:0040EE49↑j
.text:0040EE61                 test    eax, eax
.text:0040EE63                 jnz     short loc_40EE4B
.text:0040EE65                 mov     dword ptr [edi+10h], 0
.text:0040EE6C
.text:0040EE6C loc_40EE6C:                             ; CODE XREF: .text:0040EE44↑j
.text:0040EE6C                 mov     dword ptr [edi+14h], 0
.text:0040EE73                 jmp     short loc_40EE4B
.text:0040EE75 ; ---------------------------------------------------------------------------
.text:0040EE75
.text:0040EE75 loc_40EE75:                             ; CODE XREF: .text:0040EE3F↑j
.text:0040EE75                 mov     dword ptr [esp+4], 40EC0Eh
.text:0040EE7D                 lea     esi, [edi+14h]
.text:0040EE80                 lea     ebp, [edi+10h]
.text:0040EE83                 mov     [esp+0Ch], esi
.text:0040EE87                 mov     [esp+8], ebp
.text:0040EE8B                 mov     [esp], edx
.text:0040EE8E                 call    sscanf
.text:0040EE93                 jmp     short loc_40EE41
.text:0040EE95 ; ---------------------------------------------------------------------------
.text:0040EE95
.text:0040EE95 loc_40EE95:                             ; CODE XREF: .text:0040EE25↑j
.text:0040EE95                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EE99                 jz      short loc_40EED8
.text:0040EE9B
.text:0040EE9B loc_40EE9B:                             ; CODE XREF: .text:0040EEDC↓j
.text:0040EE9B                                         ; .text:0040EEE2↓j
.text:0040EE9B                 cmp     al, 5Ch ; '\'
.text:0040EE9D                 jnz     short loc_40EE27
.text:0040EE9F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EEA3                 jz      short loc_40EEC0
.text:0040EEA5
.text:0040EEA5 loc_40EEA5:                             ; CODE XREF: .text:0040EEC4↓j
.text:0040EEA5                                         ; .text:0040EECA↓j
.text:0040EEA5                 cmp     al, 5Ch ; '\'
.text:0040EEA7                 jnz     loc_40EE27
.text:0040EEAD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040EEB1                 jnz     loc_40EE27
.text:0040EEB7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040EEBA                 inc     edx
.text:0040EEBB                 jmp     loc_40EE29
.text:0040EEC0 ; ---------------------------------------------------------------------------
.text:0040EEC0
.text:0040EEC0 loc_40EEC0:                             ; CODE XREF: .text:0040EEA3↑j
.text:0040EEC0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040EEC4                 jnz     short loc_40EEA5
.text:0040EEC6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040EECA                 jnz     short loc_40EEA5
.text:0040EECC                 mov     byte ptr [ecx], 9
.text:0040EECF
.text:0040EECF loc_40EECF:                             ; CODE XREF: .text:0040EEE7↓j
.text:0040EECF                 inc     ecx
.text:0040EED0                 add     edx, 3
.text:0040EED3                 jmp     loc_40EE2A
.text:0040EED8 ; ---------------------------------------------------------------------------
.text:0040EED8
.text:0040EED8 loc_40EED8:                             ; CODE XREF: .text:0040EE99↑j
.text:0040EED8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040EEDC                 jnz     short loc_40EE9B
.text:0040EEDE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040EEE2                 jnz     short loc_40EE9B
.text:0040EEE4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040EEE7                 jmp     short loc_40EECF
.text:0040EEE9 ; ---------------------------------------------------------------------------
.text:0040EEE9
.text:0040EEE9 loc_40EEE9:                             ; CODE XREF: .text:0040EDF1↑j
.text:0040EEE9                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040EEF1                 mov     [esp], eax
.text:0040EEF4                 call    strspn
.text:0040EEF9                 add     [esp+1Ch], eax
.text:0040EEFD                 jmp     loc_40EDF7
.text:0040EF02 ; ---------------------------------------------------------------------------
.text:0040EF02
.text:0040EF02 loc_40EF02:                             ; CODE XREF: .text:0040EDD5↑j
.text:0040EF02                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF06                 jz      short loc_40EF49
.text:0040EF08
.text:0040EF08 loc_40EF08:                             ; CODE XREF: .text:0040EF4D↓j
.text:0040EF08                                         ; .text:0040EF53↓j
.text:0040EF08                 cmp     al, 5Ch ; '\'
.text:0040EF0A                 jnz     loc_40EDDB
.text:0040EF10                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF14                 jz      short loc_40EF31
.text:0040EF16
.text:0040EF16 loc_40EF16:                             ; CODE XREF: .text:0040EF35↓j
.text:0040EF16                                         ; .text:0040EF3B↓j
.text:0040EF16                 cmp     al, 5Ch ; '\'
.text:0040EF18                 jnz     loc_40EDDB
.text:0040EF1E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040EF22                 jnz     loc_40EDDB
.text:0040EF28                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040EF2B                 inc     edx
.text:0040EF2C                 jmp     loc_40EDDD
.text:0040EF31 ; ---------------------------------------------------------------------------
.text:0040EF31
.text:0040EF31 loc_40EF31:                             ; CODE XREF: .text:0040EF14↑j
.text:0040EF31                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040EF35                 jnz     short loc_40EF16
.text:0040EF37                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040EF3B                 jnz     short loc_40EF16
.text:0040EF3D                 mov     byte ptr [ecx], 9
.text:0040EF40
.text:0040EF40 loc_40EF40:                             ; CODE XREF: .text:0040EF58↓j
.text:0040EF40                 inc     ecx
.text:0040EF41                 add     edx, 3
.text:0040EF44                 jmp     loc_40EDDE
.text:0040EF49 ; ---------------------------------------------------------------------------
.text:0040EF49
.text:0040EF49 loc_40EF49:                             ; CODE XREF: .text:0040EF06↑j
.text:0040EF49                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040EF4D                 jnz     short loc_40EF08
.text:0040EF4F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040EF53                 jnz     short loc_40EF08
.text:0040EF55                 mov     byte ptr [ecx], 20h ; ' '
.text:0040EF58                 jmp     short loc_40EF40
.text:0040EF5A ; ---------------------------------------------------------------------------
.text:0040EF5A
.text:0040EF5A loc_40EF5A:                             ; CODE XREF: .text:0040EDA1↑j
.text:0040EF5A                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040EF62                 mov     [esp], eax
.text:0040EF65                 call    strspn
.text:0040EF6A                 add     [esp+1Ch], eax
.text:0040EF6E                 jmp     loc_40EDA7
.text:0040EF73 ; ---------------------------------------------------------------------------
.text:0040EF73
.text:0040EF73 loc_40EF73:                             ; CODE XREF: .text:0040ED85↑j
.text:0040EF73                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF77                 jz      short loc_40EFBA
.text:0040EF79
.text:0040EF79 loc_40EF79:                             ; CODE XREF: .text:0040EFBE↓j
.text:0040EF79                                         ; .text:0040EFC4↓j
.text:0040EF79                 cmp     al, 5Ch ; '\'
.text:0040EF7B                 jnz     loc_40ED8B
.text:0040EF81                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF85                 jz      short loc_40EFA2
.text:0040EF87
.text:0040EF87 loc_40EF87:                             ; CODE XREF: .text:0040EFA6↓j
.text:0040EF87                                         ; .text:0040EFAC↓j
.text:0040EF87                 cmp     al, 5Ch ; '\'
.text:0040EF89                 jnz     loc_40ED8B
.text:0040EF8F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040EF93                 jnz     loc_40ED8B
.text:0040EF99                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040EF9C                 inc     edx
.text:0040EF9D                 jmp     loc_40ED8D
.text:0040EFA2 ; ---------------------------------------------------------------------------
.text:0040EFA2
.text:0040EFA2 loc_40EFA2:                             ; CODE XREF: .text:0040EF85↑j
.text:0040EFA2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040EFA6                 jnz     short loc_40EF87
.text:0040EFA8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040EFAC                 jnz     short loc_40EF87
.text:0040EFAE                 mov     byte ptr [ecx], 9
.text:0040EFB1
.text:0040EFB1 loc_40EFB1:                             ; CODE XREF: .text:0040EFC9↓j
.text:0040EFB1                 inc     ecx
.text:0040EFB2                 add     edx, 3
.text:0040EFB5                 jmp     loc_40ED8E
.text:0040EFBA ; ---------------------------------------------------------------------------
.text:0040EFBA
.text:0040EFBA loc_40EFBA:                             ; CODE XREF: .text:0040EF77↑j
.text:0040EFBA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040EFBE                 jnz     short loc_40EF79
.text:0040EFC0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040EFC4                 jnz     short loc_40EF79
.text:0040EFC6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040EFC9                 jmp     short loc_40EFB1
.text:0040EFCB ; ---------------------------------------------------------------------------
.text:0040EFCB
.text:0040EFCB loc_40EFCB:                             ; CODE XREF: .text:0040ED50↑j
.text:0040EFCB                 mov     dword ptr [esp+4], 40EC0Ah
.text:0040EFD3                 mov     [esp], eax
.text:0040EFD6                 call    strspn
.text:0040EFDB                 add     [esp+1Ch], eax
.text:0040EFDF                 jmp     loc_40ED56
.text:0040EFE4 ; ---------------------------------------------------------------------------
.text:0040EFE4
.text:0040EFE4 loc_40EFE4:                             ; CODE XREF: .text:0040ED35↑j
.text:0040EFE4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EFE8                 jz      short loc_40F02B
.text:0040EFEA
.text:0040EFEA loc_40EFEA:                             ; CODE XREF: .text:0040F02F↓j
.text:0040EFEA                                         ; .text:0040F035↓j
.text:0040EFEA                 cmp     al, 5Ch ; '\'
.text:0040EFEC                 jnz     loc_40ED3B
.text:0040EFF2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EFF6                 jz      short loc_40F013
.text:0040EFF8
.text:0040EFF8 loc_40EFF8:                             ; CODE XREF: .text:0040F017↓j
.text:0040EFF8                                         ; .text:0040F01D↓j
.text:0040EFF8                 cmp     al, 5Ch ; '\'
.text:0040EFFA                 jnz     loc_40ED3B
.text:0040F000                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F004                 jnz     loc_40ED3B
.text:0040F00A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F00D                 inc     edx
.text:0040F00E                 jmp     loc_40ED3D
.text:0040F013 ; ---------------------------------------------------------------------------
.text:0040F013
.text:0040F013 loc_40F013:                             ; CODE XREF: .text:0040EFF6↑j
.text:0040F013                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F017                 jnz     short loc_40EFF8
.text:0040F019                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F01D                 jnz     short loc_40EFF8
.text:0040F01F                 mov     byte ptr [ecx], 9
.text:0040F022
.text:0040F022 loc_40F022:                             ; CODE XREF: .text:0040F03A↓j
.text:0040F022                 inc     ecx
.text:0040F023                 add     edx, 3
.text:0040F026                 jmp     loc_40ED3E
.text:0040F02B ; ---------------------------------------------------------------------------
.text:0040F02B
.text:0040F02B loc_40F02B:                             ; CODE XREF: .text:0040EFE8↑j
.text:0040F02B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F02F                 jnz     short loc_40EFEA
.text:0040F031                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F035                 jnz     short loc_40EFEA
.text:0040F037                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F03A                 jmp     short loc_40F022
.text:0040F03A ; ---------------------------------------------------------------------------
.text:0040F03C                 align 10h
.text:0040F040
.text:0040F040 loc_40F040:                             ; CODE XREF: .text:0040EC52↑j
.text:0040F040                 mov     dword ptr [esp+4], 0
.text:0040F048                 mov     dword ptr [esp], 0
.text:0040F04F                 call    GetLogicalDriveStringsA
.text:0040F054                 sub     esp, 8
.text:0040F057                 mov     ebx, eax
.text:0040F059                 call    GetProcessHeap
.text:0040F05E                 mov     [esp], eax
.text:0040F061                 mov     [esp+8], ebx
.text:0040F065                 mov     dword ptr [esp+4], 0
.text:0040F06D                 call    HeapAlloc
.text:0040F072                 sub     esp, 0Ch
.text:0040F075                 mov     esi, eax
.text:0040F077                 mov     [esp+4], eax
.text:0040F07B                 mov     [esp], ebx
.text:0040F07E                 call    GetLogicalDriveStringsA
.text:0040F083                 mov     off_414094, esi ; "notset"
.text:0040F089                 sub     esp, 8
.text:0040F08C                 jmp     loc_40EC58
.text:0040F08C ; ---------------------------------------------------------------------------
.text:0040F091 ; const char aSSSSDD[]
.text:0040F091 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040F091                                         ; DATA XREF: .text:0040F1D0↓o
.text:0040F091                                         ; ___addmntentstr+F0↓o
.text:0040F0A4                 align 10h
.text:0040F0B0                 push    esi
.text:0040F0B1                 push    ebx
.text:0040F0B2                 sub     esp, 44h
.text:0040F0B5                 mov     ebx, [esp+54h]
.text:0040F0B9                 mov     esi, [esp+50h]
.text:0040F0BD                 mov     edx, [ebx]
.text:0040F0BF                 mov     [esp+20h], edx
.text:0040F0C3                 mov     ecx, [ebx+4]
.text:0040F0C6                 mov     [esp+24h], ecx
.text:0040F0CA                 mov     edx, [ebx+8]
.text:0040F0CD                 mov     [esp+28h], edx
.text:0040F0D1                 mov     ecx, [ebx+0Ch]
.text:0040F0D4                 mov     [esp+2Ch], ecx
.text:0040F0D8                 mov     edx, [ebx+10h]
.text:0040F0DB                 mov     [esp+30h], edx
.text:0040F0DF                 mov     ecx, [ebx+14h]
.text:0040F0E2                 mov     dword ptr [esp+8], 2
.text:0040F0EA                 mov     dword ptr [esp+4], 0
.text:0040F0F2                 mov     [esp+34h], ecx
.text:0040F0F6                 mov     [esp], esi
.text:0040F0F9                 call    sub_410620
.text:0040F0FE ; ---------------------------------------------------------------------------
.text:0040F0FE                 test    eax, eax
.text:0040F100                 mov     edx, 1
.text:0040F105                 jnz     loc_40F205
.text:0040F10B                 mov     ebx, [esp+20h]
.text:0040F10F                 mov     edx, ebx
.text:0040F111                 movzx   eax, byte ptr [ebx]
.text:0040F114                 test    al, al
.text:0040F116                 jz      short loc_40F140
.text:0040F118                 nop
.text:0040F119                 lea     esi, [esi+0]
.text:0040F120
.text:0040F120 loc_40F120:                             ; CODE XREF: .text:0040F13E↓j
.text:0040F120                 cmp     al, 20h ; ' '
.text:0040F122                 jz      loc_40F37A
.text:0040F128                 cmp     al, 9
.text:0040F12A                 jz      loc_40F37A
.text:0040F130                 cmp     al, 5Ch ; '\'
.text:0040F132                 jz      loc_40F37A
.text:0040F138                 inc     ebx
.text:0040F139                 movzx   eax, byte ptr [ebx]
.text:0040F13C                 test    al, al
.text:0040F13E                 jnz     short loc_40F120
.text:0040F140
.text:0040F140 loc_40F140:                             ; CODE XREF: .text:0040F116↑j
.text:0040F140                                         ; .text:0040F37C↓j ...
.text:0040F140                 mov     ebx, [esp+24h]
.text:0040F144                 mov     edx, ebx
.text:0040F146                 movzx   eax, byte ptr [ebx]
.text:0040F149                 test    al, al
.text:0040F14B                 jz      short loc_40F170
.text:0040F14D                 lea     esi, [esi+0]
.text:0040F150
.text:0040F150 loc_40F150:                             ; CODE XREF: .text:0040F16E↓j
.text:0040F150                 cmp     al, 20h ; ' '
.text:0040F152                 jz      loc_40F2FA
.text:0040F158                 cmp     al, 9
.text:0040F15A                 jz      loc_40F2FA
.text:0040F160                 cmp     al, 5Ch ; '\'
.text:0040F162                 jz      loc_40F2FA
.text:0040F168                 inc     ebx
.text:0040F169                 movzx   eax, byte ptr [ebx]
.text:0040F16C                 test    al, al
.text:0040F16E                 jnz     short loc_40F150
.text:0040F170
.text:0040F170 loc_40F170:                             ; CODE XREF: .text:0040F14B↑j
.text:0040F170                                         ; .text:0040F2FC↓j ...
.text:0040F170                 mov     ebx, [esp+28h]
.text:0040F174                 mov     edx, ebx
.text:0040F176                 movzx   eax, byte ptr [ebx]
.text:0040F179                 test    al, al
.text:0040F17B                 jz      short loc_40F1A0
.text:0040F17D                 lea     esi, [esi+0]
.text:0040F180
.text:0040F180 loc_40F180:                             ; CODE XREF: .text:0040F19E↓j
.text:0040F180                 cmp     al, 20h ; ' '
.text:0040F182                 jz      loc_40F27E
.text:0040F188                 cmp     al, 9
.text:0040F18A                 jz      loc_40F27E
.text:0040F190                 cmp     al, 5Ch ; '\'
.text:0040F192                 jz      loc_40F27E
.text:0040F198                 inc     ebx
.text:0040F199                 movzx   eax, byte ptr [ebx]
.text:0040F19C                 test    al, al
.text:0040F19E                 jnz     short loc_40F180
.text:0040F1A0
.text:0040F1A0 loc_40F1A0:                             ; CODE XREF: .text:0040F17B↑j
.text:0040F1A0                                         ; .text:0040F280↓j ...
.text:0040F1A0                 mov     edx, [esp+2Ch]
.text:0040F1A4                 mov     ebx, edx
.text:0040F1A6                 movzx   eax, byte ptr [edx]
.text:0040F1A9                 test    al, al
.text:0040F1AB                 jz      short loc_40F1C4
.text:0040F1AD                 lea     esi, [esi+0]
.text:0040F1B0
.text:0040F1B0 loc_40F1B0:                             ; CODE XREF: .text:0040F1C2↓j
.text:0040F1B0                 cmp     al, 20h ; ' '
.text:0040F1B2                 jz      short loc_40F20D
.text:0040F1B4                 cmp     al, 9
.text:0040F1B6                 jz      short loc_40F20D
.text:0040F1B8                 cmp     al, 5Ch ; '\'
.text:0040F1BA                 jz      short loc_40F20D
.text:0040F1BC                 inc     ebx
.text:0040F1BD                 movzx   eax, byte ptr [ebx]
.text:0040F1C0                 test    al, al
.text:0040F1C2                 jnz     short loc_40F1B0
.text:0040F1C4
.text:0040F1C4 loc_40F1C4:                             ; CODE XREF: .text:0040F1AB↑j
.text:0040F1C4                                         ; .text:0040F20F↓j ...
.text:0040F1C4                 mov     [esp+14h], edx
.text:0040F1C8                 mov     ecx, [esp+34h]
.text:0040F1CC                 mov     ebx, [esp+30h]
.text:0040F1D0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F1D8                 mov     edx, [esp+24h]
.text:0040F1DC                 mov     [esp+1Ch], ecx
.text:0040F1E0                 mov     ecx, [esp+28h]
.text:0040F1E4                 mov     [esp+18h], ebx
.text:0040F1E8                 mov     ebx, [esp+20h]
.text:0040F1EC                 mov     [esp+0Ch], edx
.text:0040F1F0                 mov     [esp+10h], ecx
.text:0040F1F4                 mov     [esp+8], ebx
.text:0040F1F8                 mov     [esp], esi
.text:0040F1FB                 call    fprintf
.text:0040F200                 mov     edx, eax
.text:0040F202                 shr     edx, 1Fh
.text:0040F205
.text:0040F205 loc_40F205:                             ; CODE XREF: .text:0040F105↑j
.text:0040F205                 add     esp, 44h
.text:0040F208                 mov     eax, edx
.text:0040F20A                 pop     ebx
.text:0040F20B                 pop     esi
.text:0040F20C                 retn
.text:0040F20D ; ---------------------------------------------------------------------------
.text:0040F20D
.text:0040F20D loc_40F20D:                             ; CODE XREF: .text:0040F1B2↑j
.text:0040F20D                                         ; .text:0040F1B6↑j ...
.text:0040F20D                 test    al, al
.text:0040F20F                 jz      short loc_40F1C4
.text:0040F211                 mov     [esp], edx
.text:0040F214                 mov     ebx, edx
.text:0040F216                 call    strlen
.text:0040F21B                 lea     edx, ds:1[eax*4]
.text:0040F222                 mov     [esp], edx
.text:0040F225                 call    malloc
.text:0040F22A                 mov     [esp+2Ch], eax
.text:0040F22E                 mov     edx, eax
.text:0040F230
.text:0040F230 loc_40F230:                             ; CODE XREF: .text:0040F248↓j
.text:0040F230                 movzx   eax, byte ptr [ebx]
.text:0040F233                 cmp     al, 20h ; ' '
.text:0040F235                 jz      short loc_40F26D
.text:0040F237                 cmp     al, 9
.text:0040F239                 jz      short loc_40F25C
.text:0040F23B                 cmp     al, 5Ch ; '\'
.text:0040F23D                 jz      short loc_40F253
.text:0040F23F                 mov     [edx], al
.text:0040F241
.text:0040F241 loc_40F241:                             ; CODE XREF: .text:0040F25A↓j
.text:0040F241                                         ; .text:0040F26B↓j ...
.text:0040F241                 movzx   ecx, byte ptr [ebx]
.text:0040F244                 inc     edx
.text:0040F245                 inc     ebx
.text:0040F246                 test    cl, cl
.text:0040F248                 jnz     short loc_40F230
.text:0040F24A                 mov     edx, [esp+2Ch]
.text:0040F24E                 jmp     loc_40F1C4
.text:0040F253 ; ---------------------------------------------------------------------------
.text:0040F253
.text:0040F253 loc_40F253:                             ; CODE XREF: .text:0040F23D↑j
.text:0040F253                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F256                 inc     edx
.text:0040F257                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F25A                 jmp     short loc_40F241
.text:0040F25C ; ---------------------------------------------------------------------------
.text:0040F25C
.text:0040F25C loc_40F25C:                             ; CODE XREF: .text:0040F239↑j
.text:0040F25C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F25F                 inc     edx
.text:0040F260                 mov     byte ptr [edx], 30h ; '0'
.text:0040F263                 inc     edx
.text:0040F264                 mov     byte ptr [edx], 31h ; '1'
.text:0040F267                 inc     edx
.text:0040F268                 mov     byte ptr [edx], 32h ; '2'
.text:0040F26B                 jmp     short loc_40F241
.text:0040F26D ; ---------------------------------------------------------------------------
.text:0040F26D
.text:0040F26D loc_40F26D:                             ; CODE XREF: .text:0040F235↑j
.text:0040F26D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F270                 inc     edx
.text:0040F271                 mov     byte ptr [edx], 30h ; '0'
.text:0040F274                 inc     edx
.text:0040F275                 mov     byte ptr [edx], 34h ; '4'
.text:0040F278                 inc     edx
.text:0040F279                 mov     byte ptr [edx], 30h ; '0'
.text:0040F27C                 jmp     short loc_40F241
.text:0040F27E ; ---------------------------------------------------------------------------
.text:0040F27E
.text:0040F27E loc_40F27E:                             ; CODE XREF: .text:0040F182↑j
.text:0040F27E                                         ; .text:0040F18A↑j ...
.text:0040F27E                 test    al, al
.text:0040F280                 jz      loc_40F1A0
.text:0040F286                 mov     [esp], edx
.text:0040F289                 mov     ebx, edx
.text:0040F28B                 call    strlen
.text:0040F290                 lea     edx, ds:1[eax*4]
.text:0040F297                 mov     [esp], edx
.text:0040F29A                 call    malloc
.text:0040F29F                 mov     [esp+28h], eax
.text:0040F2A3                 mov     edx, eax
.text:0040F2A5                 lea     esi, [esi+0]
.text:0040F2A9                 lea     edi, [edi+0]
.text:0040F2B0
.text:0040F2B0 loc_40F2B0:                             ; CODE XREF: .text:0040F2C8↓j
.text:0040F2B0                 movzx   eax, byte ptr [ebx]
.text:0040F2B3                 cmp     al, 20h ; ' '
.text:0040F2B5                 jz      short loc_40F2E9
.text:0040F2B7                 cmp     al, 9
.text:0040F2B9                 jz      short loc_40F2D8
.text:0040F2BB                 cmp     al, 5Ch ; '\'
.text:0040F2BD                 jz      short loc_40F2CF
.text:0040F2BF                 mov     [edx], al
.text:0040F2C1
.text:0040F2C1 loc_40F2C1:                             ; CODE XREF: .text:0040F2D6↓j
.text:0040F2C1                                         ; .text:0040F2E7↓j ...
.text:0040F2C1                 movzx   ecx, byte ptr [ebx]
.text:0040F2C4                 inc     edx
.text:0040F2C5                 inc     ebx
.text:0040F2C6                 test    cl, cl
.text:0040F2C8                 jnz     short loc_40F2B0
.text:0040F2CA                 jmp     loc_40F1A0
.text:0040F2CF ; ---------------------------------------------------------------------------
.text:0040F2CF
.text:0040F2CF loc_40F2CF:                             ; CODE XREF: .text:0040F2BD↑j
.text:0040F2CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2D2                 inc     edx
.text:0040F2D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2D6                 jmp     short loc_40F2C1
.text:0040F2D8 ; ---------------------------------------------------------------------------
.text:0040F2D8
.text:0040F2D8 loc_40F2D8:                             ; CODE XREF: .text:0040F2B9↑j
.text:0040F2D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2DB                 inc     edx
.text:0040F2DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2DF                 inc     edx
.text:0040F2E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040F2E3                 inc     edx
.text:0040F2E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040F2E7                 jmp     short loc_40F2C1
.text:0040F2E9 ; ---------------------------------------------------------------------------
.text:0040F2E9
.text:0040F2E9 loc_40F2E9:                             ; CODE XREF: .text:0040F2B5↑j
.text:0040F2E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2EC                 inc     edx
.text:0040F2ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2F0                 inc     edx
.text:0040F2F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040F2F4                 inc     edx
.text:0040F2F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2F8                 jmp     short loc_40F2C1
.text:0040F2FA ; ---------------------------------------------------------------------------
.text:0040F2FA
.text:0040F2FA loc_40F2FA:                             ; CODE XREF: .text:0040F152↑j
.text:0040F2FA                                         ; .text:0040F15A↑j ...
.text:0040F2FA                 test    al, al
.text:0040F2FC                 jz      loc_40F170
.text:0040F302                 mov     [esp], edx
.text:0040F305                 mov     ebx, edx
.text:0040F307                 call    strlen
.text:0040F30C                 lea     edx, ds:1[eax*4]
.text:0040F313                 mov     [esp], edx
.text:0040F316                 call    malloc
.text:0040F31B                 mov     [esp+24h], eax
.text:0040F31F                 mov     edx, eax
.text:0040F321                 jmp     short loc_40F330
.text:0040F321 ; ---------------------------------------------------------------------------
.text:0040F323                 align 10h
.text:0040F330
.text:0040F330 loc_40F330:                             ; CODE XREF: .text:0040F321↑j
.text:0040F330                                         ; .text:0040F348↓j
.text:0040F330                 movzx   eax, byte ptr [ebx]
.text:0040F333                 cmp     al, 20h ; ' '
.text:0040F335                 jz      short loc_40F369
.text:0040F337                 cmp     al, 9
.text:0040F339                 jz      short loc_40F358
.text:0040F33B                 cmp     al, 5Ch ; '\'
.text:0040F33D                 jz      short loc_40F34F
.text:0040F33F                 mov     [edx], al
.text:0040F341
.text:0040F341 loc_40F341:                             ; CODE XREF: .text:0040F356↓j
.text:0040F341                                         ; .text:0040F367↓j ...
.text:0040F341                 movzx   ecx, byte ptr [ebx]
.text:0040F344                 inc     edx
.text:0040F345                 inc     ebx
.text:0040F346                 test    cl, cl
.text:0040F348                 jnz     short loc_40F330
.text:0040F34A                 jmp     loc_40F170
.text:0040F34F ; ---------------------------------------------------------------------------
.text:0040F34F
.text:0040F34F loc_40F34F:                             ; CODE XREF: .text:0040F33D↑j
.text:0040F34F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F352                 inc     edx
.text:0040F353                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F356                 jmp     short loc_40F341
.text:0040F358 ; ---------------------------------------------------------------------------
.text:0040F358
.text:0040F358 loc_40F358:                             ; CODE XREF: .text:0040F339↑j
.text:0040F358                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F35B                 inc     edx
.text:0040F35C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F35F                 inc     edx
.text:0040F360                 mov     byte ptr [edx], 31h ; '1'
.text:0040F363                 inc     edx
.text:0040F364                 mov     byte ptr [edx], 32h ; '2'
.text:0040F367                 jmp     short loc_40F341
.text:0040F369 ; ---------------------------------------------------------------------------
.text:0040F369
.text:0040F369 loc_40F369:                             ; CODE XREF: .text:0040F335↑j
.text:0040F369                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F36C                 inc     edx
.text:0040F36D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F370                 inc     edx
.text:0040F371                 mov     byte ptr [edx], 34h ; '4'
.text:0040F374                 inc     edx
.text:0040F375                 mov     byte ptr [edx], 30h ; '0'
.text:0040F378                 jmp     short loc_40F341
.text:0040F37A ; ---------------------------------------------------------------------------
.text:0040F37A
.text:0040F37A loc_40F37A:                             ; CODE XREF: .text:0040F122↑j
.text:0040F37A                                         ; .text:0040F12A↑j ...
.text:0040F37A                 test    al, al
.text:0040F37C                 jz      loc_40F140
.text:0040F382                 mov     [esp], edx
.text:0040F385                 mov     ebx, edx
.text:0040F387                 call    strlen
.text:0040F38C                 lea     ecx, ds:1[eax*4]
.text:0040F393                 mov     [esp], ecx
.text:0040F396                 call    malloc
.text:0040F39B                 mov     [esp+20h], eax
.text:0040F39F                 mov     edx, eax
.text:0040F3A1                 jmp     short loc_40F3B0
.text:0040F3A1 ; ---------------------------------------------------------------------------
.text:0040F3A3                 align 10h
.text:0040F3B0
.text:0040F3B0 loc_40F3B0:                             ; CODE XREF: .text:0040F3A1↑j
.text:0040F3B0                                         ; .text:0040F3C8↓j
.text:0040F3B0                 movzx   eax, byte ptr [ebx]
.text:0040F3B3                 cmp     al, 20h ; ' '
.text:0040F3B5                 jz      short loc_40F3E9
.text:0040F3B7                 cmp     al, 9
.text:0040F3B9                 jz      short loc_40F3D8
.text:0040F3BB                 cmp     al, 5Ch ; '\'
.text:0040F3BD                 jz      short loc_40F3CF
.text:0040F3BF                 mov     [edx], al
.text:0040F3C1
.text:0040F3C1 loc_40F3C1:                             ; CODE XREF: .text:0040F3D6↓j
.text:0040F3C1                                         ; .text:0040F3E7↓j ...
.text:0040F3C1                 movzx   ecx, byte ptr [ebx]
.text:0040F3C4                 inc     edx
.text:0040F3C5                 inc     ebx
.text:0040F3C6                 test    cl, cl
.text:0040F3C8                 jnz     short loc_40F3B0
.text:0040F3CA                 jmp     loc_40F140
.text:0040F3CF ; ---------------------------------------------------------------------------
.text:0040F3CF
.text:0040F3CF loc_40F3CF:                             ; CODE XREF: .text:0040F3BD↑j
.text:0040F3CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3D2                 inc     edx
.text:0040F3D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3D6                 jmp     short loc_40F3C1
.text:0040F3D8 ; ---------------------------------------------------------------------------
.text:0040F3D8
.text:0040F3D8 loc_40F3D8:                             ; CODE XREF: .text:0040F3B9↑j
.text:0040F3D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3DB                 inc     edx
.text:0040F3DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3DF                 inc     edx
.text:0040F3E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040F3E3                 inc     edx
.text:0040F3E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040F3E7                 jmp     short loc_40F3C1
.text:0040F3E9 ; ---------------------------------------------------------------------------
.text:0040F3E9
.text:0040F3E9 loc_40F3E9:                             ; CODE XREF: .text:0040F3B5↑j
.text:0040F3E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3EC                 inc     edx
.text:0040F3ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3F0                 inc     edx
.text:0040F3F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040F3F4                 inc     edx
.text:0040F3F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3F8                 jmp     short loc_40F3C1
.text:0040F3F8 ; ---------------------------------------------------------------------------
.text:0040F3FA                 align 10h
.text:0040F400
.text:0040F400 ; =============== S U B R O U T I N E =======================================
.text:0040F400
.text:0040F400 ; Attributes: info_from_lumina
.text:0040F400
.text:0040F400 ; int __cdecl __addmntentstr(char *, int)
.text:0040F400 ___addmntentstr proc near               ; CODE XREF: .text:0040ECCA↑p
.text:0040F400
.text:0040F400 Buffer          = dword ptr -4Ch
.text:0040F400 Format          = dword ptr -48h
.text:0040F400 var_44          = dword ptr -44h
.text:0040F400 var_40          = dword ptr -40h
.text:0040F400 var_3C          = dword ptr -3Ch
.text:0040F400 var_38          = dword ptr -38h
.text:0040F400 var_34          = dword ptr -34h
.text:0040F400 var_30          = dword ptr -30h
.text:0040F400 var_2C          = dword ptr -2Ch
.text:0040F400 var_28          = dword ptr -28h
.text:0040F400 var_24          = dword ptr -24h
.text:0040F400 Str             = dword ptr -20h
.text:0040F400 var_1C          = dword ptr -1Ch
.text:0040F400 var_18          = dword ptr -18h
.text:0040F400 arg_0           = dword ptr  4
.text:0040F400 arg_4           = dword ptr  8
.text:0040F400
.text:0040F400                 push    ebx
.text:0040F401                 sub     esp, 48h
.text:0040F404                 mov     edx, [esp+4Ch+arg_4]
.text:0040F408                 mov     ecx, [edx]
.text:0040F40A                 mov     [esp+4Ch+var_2C], ecx
.text:0040F40E                 mov     ebx, [edx+4]
.text:0040F411                 mov     [esp+4Ch+var_28], ebx
.text:0040F415                 mov     ebx, [edx+8]
.text:0040F418                 mov     [esp+4Ch+var_24], ebx
.text:0040F41C                 mov     ebx, [edx+0Ch]
.text:0040F41F                 mov     [esp+4Ch+Str], ebx
.text:0040F423                 mov     ebx, [edx+10h]
.text:0040F426                 mov     [esp+4Ch+var_1C], ebx
.text:0040F42A                 mov     ebx, [edx+14h]
.text:0040F42D                 mov     [esp+4Ch+var_18], ebx
.text:0040F431                 mov     ebx, ecx
.text:0040F433                 movzx   eax, byte ptr [ecx]
.text:0040F436                 test    al, al
.text:0040F438                 jz      loc_40F721
.text:0040F43E                 mov     esi, esi
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040F440                 cmp     al, 20h ; ' '
.text:0040F442                 jz      loc_40F6A0
.text:0040F448                 cmp     al, 9
.text:0040F44A                 jz      loc_40F6A0
.text:0040F450                 cmp     al, 5Ch ; '\'
.text:0040F452                 jz      loc_40F6A0
.text:0040F458                 inc     ebx
.text:0040F459                 movzx   eax, byte ptr [ebx]
.text:0040F45C                 test    al, al
.text:0040F45E                 jnz     short loc_40F440
.text:0040F460
.text:0040F460 loc_40F460:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040F460                                         ; ___addmntentstr+2EA↓j
.text:0040F460                 mov     ebx, [esp+4Ch+var_28]
.text:0040F464                 mov     edx, ebx
.text:0040F466                 movzx   eax, byte ptr [ebx]
.text:0040F469                 test    al, al
.text:0040F46B                 jz      short loc_40F490
.text:0040F46D                 lea     esi, [esi+0]
.text:0040F470
.text:0040F470 loc_40F470:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040F470                 cmp     al, 20h ; ' '
.text:0040F472                 jz      loc_40F61A
.text:0040F478                 cmp     al, 9
.text:0040F47A                 jz      loc_40F61A
.text:0040F480                 cmp     al, 5Ch ; '\'
.text:0040F482                 jz      loc_40F61A
.text:0040F488                 inc     ebx
.text:0040F489                 movzx   eax, byte ptr [ebx]
.text:0040F48C                 test    al, al
.text:0040F48E                 jnz     short loc_40F470
.text:0040F490
.text:0040F490 loc_40F490:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040F490                                         ; ___addmntentstr+21C↓j ...
.text:0040F490                 mov     ebx, [esp+4Ch+var_24]
.text:0040F494                 mov     edx, ebx
.text:0040F496                 movzx   eax, byte ptr [ebx]
.text:0040F499                 test    al, al
.text:0040F49B                 jz      short loc_40F4C0
.text:0040F49D                 lea     esi, [esi+0]
.text:0040F4A0
.text:0040F4A0 loc_40F4A0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040F4A0                 cmp     al, 20h ; ' '
.text:0040F4A2                 jz      loc_40F59E
.text:0040F4A8                 cmp     al, 9
.text:0040F4AA                 jz      loc_40F59E
.text:0040F4B0                 cmp     al, 5Ch ; '\'
.text:0040F4B2                 jz      loc_40F59E
.text:0040F4B8                 inc     ebx
.text:0040F4B9                 movzx   eax, byte ptr [ebx]
.text:0040F4BC                 test    al, al
.text:0040F4BE                 jnz     short loc_40F4A0
.text:0040F4C0
.text:0040F4C0 loc_40F4C0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040F4C0                                         ; ___addmntentstr+1A0↓j ...
.text:0040F4C0                 mov     edx, [esp+4Ch+Str]
.text:0040F4C4                 mov     ebx, edx
.text:0040F4C6                 movzx   eax, byte ptr [edx]
.text:0040F4C9                 test    al, al
.text:0040F4CB                 jz      short loc_40F4E4
.text:0040F4CD                 lea     esi, [esi+0]
.text:0040F4D0
.text:0040F4D0 loc_40F4D0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040F4D0                 cmp     al, 20h ; ' '
.text:0040F4D2                 jz      short loc_40F52C
.text:0040F4D4                 cmp     al, 9
.text:0040F4D6                 jz      short loc_40F52C
.text:0040F4D8                 cmp     al, 5Ch ; '\'
.text:0040F4DA                 jz      short loc_40F52C
.text:0040F4DC                 inc     ebx
.text:0040F4DD                 movzx   eax, byte ptr [ebx]
.text:0040F4E0                 test    al, al
.text:0040F4E2                 jnz     short loc_40F4D0
.text:0040F4E4
.text:0040F4E4 loc_40F4E4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040F4E4                                         ; ___addmntentstr+12E↓j ...
.text:0040F4E4                 mov     [esp+4Ch+var_38], edx
.text:0040F4E8                 mov     ebx, [esp+4Ch+var_18]
.text:0040F4EC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040F4F0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F4F8                 mov     edx, [esp+4Ch+var_2C]
.text:0040F4FC                 mov     [esp+4Ch+var_30], ebx
.text:0040F500                 mov     ebx, [esp+4Ch+var_24]
.text:0040F504                 mov     [esp+4Ch+var_34], ecx
.text:0040F508                 mov     ecx, [esp+4Ch+var_28]
.text:0040F50C                 mov     [esp+4Ch+var_3C], ebx
.text:0040F510                 mov     ebx, [esp+4Ch+arg_0]
.text:0040F514                 mov     [esp+4Ch+var_40], ecx
.text:0040F518                 mov     [esp+4Ch+var_44], edx
.text:0040F51C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040F51F                 call    sprintf
.text:0040F524                 add     esp, 48h
.text:0040F527                 shr     eax, 1Fh
.text:0040F52A                 pop     ebx
.text:0040F52B                 retn
.text:0040F52C ; ---------------------------------------------------------------------------
.text:0040F52C
.text:0040F52C loc_40F52C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040F52C                                         ; ___addmntentstr+D6↑j ...
.text:0040F52C                 test    al, al
.text:0040F52E                 jz      short loc_40F4E4
.text:0040F530                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F533                 mov     ebx, edx
.text:0040F535                 call    strlen
.text:0040F53A                 lea     edx, ds:1[eax*4]
.text:0040F541                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F544                 call    malloc
.text:0040F549                 mov     [esp+4Ch+Str], eax
.text:0040F54D                 mov     edx, eax
.text:0040F54F                 nop
.text:0040F550
.text:0040F550 loc_40F550:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040F550                 movzx   eax, byte ptr [ebx]
.text:0040F553                 cmp     al, 20h ; ' '
.text:0040F555                 jz      short loc_40F58D
.text:0040F557                 cmp     al, 9
.text:0040F559                 jz      short loc_40F57C
.text:0040F55B                 cmp     al, 5Ch ; '\'
.text:0040F55D                 jz      short loc_40F573
.text:0040F55F                 mov     [edx], al
.text:0040F561
.text:0040F561 loc_40F561:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040F561                                         ; ___addmntentstr+18B↓j ...
.text:0040F561                 movzx   ecx, byte ptr [ebx]
.text:0040F564                 inc     edx
.text:0040F565                 inc     ebx
.text:0040F566                 test    cl, cl
.text:0040F568                 jnz     short loc_40F550
.text:0040F56A                 mov     edx, [esp+4Ch+Str]
.text:0040F56E                 jmp     loc_40F4E4
.text:0040F573 ; ---------------------------------------------------------------------------
.text:0040F573
.text:0040F573 loc_40F573:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040F573                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F576                 inc     edx
.text:0040F577                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F57A                 jmp     short loc_40F561
.text:0040F57C ; ---------------------------------------------------------------------------
.text:0040F57C
.text:0040F57C loc_40F57C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040F57C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F57F                 inc     edx
.text:0040F580                 mov     byte ptr [edx], 30h ; '0'
.text:0040F583                 inc     edx
.text:0040F584                 mov     byte ptr [edx], 31h ; '1'
.text:0040F587                 inc     edx
.text:0040F588                 mov     byte ptr [edx], 32h ; '2'
.text:0040F58B                 jmp     short loc_40F561
.text:0040F58D ; ---------------------------------------------------------------------------
.text:0040F58D
.text:0040F58D loc_40F58D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040F58D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F590                 inc     edx
.text:0040F591                 mov     byte ptr [edx], 30h ; '0'
.text:0040F594                 inc     edx
.text:0040F595                 mov     byte ptr [edx], 34h ; '4'
.text:0040F598                 inc     edx
.text:0040F599                 mov     byte ptr [edx], 30h ; '0'
.text:0040F59C                 jmp     short loc_40F561
.text:0040F59E ; ---------------------------------------------------------------------------
.text:0040F59E
.text:0040F59E loc_40F59E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040F59E                                         ; ___addmntentstr+AA↑j ...
.text:0040F59E                 test    al, al
.text:0040F5A0                 jz      loc_40F4C0
.text:0040F5A6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F5A9                 mov     ebx, edx
.text:0040F5AB                 call    strlen
.text:0040F5B0                 lea     edx, ds:1[eax*4]
.text:0040F5B7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F5BA                 call    malloc
.text:0040F5BF                 mov     [esp+4Ch+var_24], eax
.text:0040F5C3                 mov     edx, eax
.text:0040F5C5                 lea     esi, [esi+0]
.text:0040F5C9                 lea     edi, [edi+0]
.text:0040F5D0
.text:0040F5D0 loc_40F5D0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040F5D0                 movzx   eax, byte ptr [ebx]
.text:0040F5D3                 cmp     al, 20h ; ' '
.text:0040F5D5                 jz      short loc_40F609
.text:0040F5D7                 cmp     al, 9
.text:0040F5D9                 jz      short loc_40F5F8
.text:0040F5DB                 cmp     al, 5Ch ; '\'
.text:0040F5DD                 jz      short loc_40F5EF
.text:0040F5DF                 mov     [edx], al
.text:0040F5E1
.text:0040F5E1 loc_40F5E1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040F5E1                                         ; ___addmntentstr+207↓j ...
.text:0040F5E1                 movzx   ecx, byte ptr [ebx]
.text:0040F5E4                 inc     edx
.text:0040F5E5                 inc     ebx
.text:0040F5E6                 test    cl, cl
.text:0040F5E8                 jnz     short loc_40F5D0
.text:0040F5EA                 jmp     loc_40F4C0
.text:0040F5EF ; ---------------------------------------------------------------------------
.text:0040F5EF
.text:0040F5EF loc_40F5EF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040F5EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5F2                 inc     edx
.text:0040F5F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5F6                 jmp     short loc_40F5E1
.text:0040F5F8 ; ---------------------------------------------------------------------------
.text:0040F5F8
.text:0040F5F8 loc_40F5F8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040F5F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5FB                 inc     edx
.text:0040F5FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F5FF                 inc     edx
.text:0040F600                 mov     byte ptr [edx], 31h ; '1'
.text:0040F603                 inc     edx
.text:0040F604                 mov     byte ptr [edx], 32h ; '2'
.text:0040F607                 jmp     short loc_40F5E1
.text:0040F609 ; ---------------------------------------------------------------------------
.text:0040F609
.text:0040F609 loc_40F609:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040F609                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F60C                 inc     edx
.text:0040F60D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F610                 inc     edx
.text:0040F611                 mov     byte ptr [edx], 34h ; '4'
.text:0040F614                 inc     edx
.text:0040F615                 mov     byte ptr [edx], 30h ; '0'
.text:0040F618                 jmp     short loc_40F5E1
.text:0040F61A ; ---------------------------------------------------------------------------
.text:0040F61A
.text:0040F61A loc_40F61A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040F61A                                         ; ___addmntentstr+7A↑j ...
.text:0040F61A                 test    al, al
.text:0040F61C                 jz      loc_40F490
.text:0040F622                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F625                 mov     ebx, edx
.text:0040F627                 call    strlen
.text:0040F62C                 lea     edx, ds:1[eax*4]
.text:0040F633                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F636                 call    malloc
.text:0040F63B                 mov     [esp+4Ch+var_28], eax
.text:0040F63F                 mov     edx, eax
.text:0040F641                 jmp     short loc_40F650
.text:0040F641 ; ---------------------------------------------------------------------------
.text:0040F643                 align 10h
.text:0040F650
.text:0040F650 loc_40F650:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040F650                                         ; ___addmntentstr+268↓j
.text:0040F650                 movzx   eax, byte ptr [ebx]
.text:0040F653                 cmp     al, 20h ; ' '
.text:0040F655                 jz      short loc_40F689
.text:0040F657                 cmp     al, 9
.text:0040F659                 jz      short loc_40F678
.text:0040F65B                 cmp     al, 5Ch ; '\'
.text:0040F65D                 jz      short loc_40F66F
.text:0040F65F                 mov     [edx], al
.text:0040F661
.text:0040F661 loc_40F661:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040F661                                         ; ___addmntentstr+287↓j ...
.text:0040F661                 movzx   ecx, byte ptr [ebx]
.text:0040F664                 inc     edx
.text:0040F665                 inc     ebx
.text:0040F666                 test    cl, cl
.text:0040F668                 jnz     short loc_40F650
.text:0040F66A                 jmp     loc_40F490
.text:0040F66F ; ---------------------------------------------------------------------------
.text:0040F66F
.text:0040F66F loc_40F66F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040F66F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F672                 inc     edx
.text:0040F673                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F676                 jmp     short loc_40F661
.text:0040F678 ; ---------------------------------------------------------------------------
.text:0040F678
.text:0040F678 loc_40F678:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040F678                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F67B                 inc     edx
.text:0040F67C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F67F                 inc     edx
.text:0040F680                 mov     byte ptr [edx], 31h ; '1'
.text:0040F683                 inc     edx
.text:0040F684                 mov     byte ptr [edx], 32h ; '2'
.text:0040F687                 jmp     short loc_40F661
.text:0040F689 ; ---------------------------------------------------------------------------
.text:0040F689
.text:0040F689 loc_40F689:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040F689                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F68C                 inc     edx
.text:0040F68D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F690                 inc     edx
.text:0040F691                 mov     byte ptr [edx], 34h ; '4'
.text:0040F694                 inc     edx
.text:0040F695                 mov     byte ptr [edx], 30h ; '0'
.text:0040F698                 jmp     short loc_40F661
.text:0040F698 ; ---------------------------------------------------------------------------
.text:0040F69A                 align 10h
.text:0040F6A0
.text:0040F6A0 loc_40F6A0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040F6A0                                         ; ___addmntentstr+4A↑j ...
.text:0040F6A0                 test    al, al
.text:0040F6A2                 jz      loc_40F460
.text:0040F6A8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040F6AC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040F6AF                 call    strlen
.text:0040F6B4                 lea     edx, ds:1[eax*4]
.text:0040F6BB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F6BE                 call    malloc
.text:0040F6C3                 mov     [esp+4Ch+var_2C], eax
.text:0040F6C7                 mov     edx, eax
.text:0040F6C9                 lea     esi, [esi+0]
.text:0040F6D0
.text:0040F6D0 loc_40F6D0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040F6D0                 movzx   eax, byte ptr [ebx]
.text:0040F6D3                 cmp     al, 20h ; ' '
.text:0040F6D5                 jz      short loc_40F710
.text:0040F6D7                 cmp     al, 9
.text:0040F6D9                 jz      short loc_40F6F8
.text:0040F6DB                 cmp     al, 5Ch ; '\'
.text:0040F6DD                 jz      short loc_40F6EF
.text:0040F6DF                 mov     [edx], al
.text:0040F6E1
.text:0040F6E1 loc_40F6E1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040F6E1                                         ; ___addmntentstr+307↓j ...
.text:0040F6E1                 movzx   ecx, byte ptr [ebx]
.text:0040F6E4                 inc     edx
.text:0040F6E5                 inc     ebx
.text:0040F6E6                 test    cl, cl
.text:0040F6E8                 jnz     short loc_40F6D0
.text:0040F6EA                 jmp     loc_40F460
.text:0040F6EF ; ---------------------------------------------------------------------------
.text:0040F6EF
.text:0040F6EF loc_40F6EF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040F6EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6F2                 inc     edx
.text:0040F6F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6F6                 jmp     short loc_40F6E1
.text:0040F6F8 ; ---------------------------------------------------------------------------
.text:0040F6F8
.text:0040F6F8 loc_40F6F8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040F6F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6FB                 inc     edx
.text:0040F6FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F6FF                 inc     edx
.text:0040F700                 mov     byte ptr [edx], 31h ; '1'
.text:0040F703                 inc     edx
.text:0040F704                 mov     byte ptr [edx], 32h ; '2'
.text:0040F707                 jmp     short loc_40F6E1
.text:0040F707 ; ---------------------------------------------------------------------------
.text:0040F709                 align 10h
.text:0040F710
.text:0040F710 loc_40F710:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040F710                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F713                 inc     edx
.text:0040F714                 mov     byte ptr [edx], 30h ; '0'
.text:0040F717                 inc     edx
.text:0040F718                 mov     byte ptr [edx], 34h ; '4'
.text:0040F71B                 inc     edx
.text:0040F71C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F71F                 jmp     short loc_40F6E1
.text:0040F721 ; ---------------------------------------------------------------------------
.text:0040F721
.text:0040F721 loc_40F721:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040F721                 movzx   eax, byte ptr [ecx]
.text:0040F724                 jmp     loc_40F6A0
.text:0040F724 ___addmntentstr endp
.text:0040F724
.text:0040F724 ; ---------------------------------------------------------------------------
.text:0040F729                 align 10h
.text:0040F730
.text:0040F730 ; =============== S U B R O U T I N E =======================================
.text:0040F730
.text:0040F730
.text:0040F730 sub_40F730      proc near               ; CODE XREF: sub_40C8A0+99↑p
.text:0040F730
.text:0040F730 nBufferLength   = dword ptr -1Ch
.text:0040F730 lpBuffer        = dword ptr -18h
.text:0040F730 dwBytes         = dword ptr -14h
.text:0040F730 var_8           = dword ptr -8
.text:0040F730 var_4           = dword ptr -4
.text:0040F730
.text:0040F730                 sub     esp, 1Ch
.text:0040F733                 mov     [esp+1Ch+var_8], ebx
.text:0040F737                 mov     [esp+1Ch+var_4], esi
.text:0040F73B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040F743                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040F74A                 call    GetLogicalDriveStringsA
.text:0040F74F                 sub     esp, 8
.text:0040F752                 mov     ebx, eax
.text:0040F754                 call    GetProcessHeap
.text:0040F759                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040F75C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040F760                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040F768                 call    HeapAlloc
.text:0040F76D                 sub     esp, 0Ch
.text:0040F770                 mov     esi, eax
.text:0040F772                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040F775                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040F779                 call    GetLogicalDriveStringsA
.text:0040F77E                 sub     esp, 8
.text:0040F781                 mov     eax, esi
.text:0040F783                 mov     ebx, [esp+1Ch+var_8]
.text:0040F787                 mov     esi, [esp+1Ch+var_4]
.text:0040F78B                 add     esp, 1Ch
.text:0040F78E                 retn
.text:0040F78E sub_40F730      endp
.text:0040F78E
.text:0040F78F
.text:0040F78F ; =============== S U B R O U T I N E =======================================
.text:0040F78F
.text:0040F78F
.text:0040F78F ; int __cdecl sub_40F78F(char *, char *)
.text:0040F78F sub_40F78F      proc near               ; DATA XREF: sub_40F78F:loc_40F81D↓o
.text:0040F78F
.text:0040F78F FileName        = dword ptr -1Ch
.text:0040F78F Mode            = dword ptr -18h
.text:0040F78F dwBytes         = dword ptr -14h
.text:0040F78F arg_0           = dword ptr  4
.text:0040F78F arg_4           = dword ptr  8
.text:0040F78F
.text:0040F78F                 ja      short $+2
.text:0040F791
.text:0040F791 loc_40F791:                             ; CODE XREF: sub_40F78F↑j
.text:0040F791                 jmp     short loc_40F7A0
.text:0040F791 ; ---------------------------------------------------------------------------
.text:0040F793                 align 10h
.text:0040F7A0
.text:0040F7A0 loc_40F7A0:                             ; CODE XREF: sub_40F78F:loc_40F791↑j
.text:0040F7A0                 push    edi
.text:0040F7A1                 push    esi
.text:0040F7A2                 push    ebx
.text:0040F7A3                 sub     esp, 10h
.text:0040F7A6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F7AA                 mov     edx, [esp+1Ch+arg_4]
.text:0040F7AE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040F7B1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040F7B5                 call    fopen
.text:0040F7BA                 test    eax, eax
.text:0040F7BC                 mov     edi, eax
.text:0040F7BE                 jz      short loc_40F81D
.text:0040F7C0
.text:0040F7C0 loc_40F7C0:                             ; CODE XREF: sub_40F78F+A2↓j
.text:0040F7C0                                         ; sub_40F78F+AB↓j
.text:0040F7C0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040F7C8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040F7CF                 call    GetLogicalDriveStringsA
.text:0040F7D4                 sub     esp, 8
.text:0040F7D7                 mov     esi, eax
.text:0040F7D9                 call    GetProcessHeap
.text:0040F7DE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040F7E1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040F7E5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040F7ED                 call    HeapAlloc
.text:0040F7F2                 sub     esp, 0Ch
.text:0040F7F5                 mov     ebx, eax
.text:0040F7F7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040F7FA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040F7FE                 call    GetLogicalDriveStringsA
.text:0040F803                 mov     off_414094, ebx ; "notset"
.text:0040F809                 sub     esp, 8
.text:0040F80C                 xor     eax, eax
.text:0040F80E                 test    ebx, ebx
.text:0040F810                 setz    al
.text:0040F813                 add     esp, 10h
.text:0040F816                 pop     ebx
.text:0040F817                 dec     eax
.text:0040F818                 and     eax, edi
.text:0040F81A                 pop     esi
.text:0040F81B                 pop     edi
.text:0040F81C                 retn
.text:0040F81D ; ---------------------------------------------------------------------------
.text:0040F81D
.text:0040F81D loc_40F81D:                             ; CODE XREF: sub_40F78F+2F↑j
.text:0040F81D                 mov     [esp+1Ch+Mode], offset sub_40F78F ; Mode
.text:0040F825                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040F828                 call    fopen
.text:0040F82D                 test    eax, eax
.text:0040F82F                 mov     edi, eax
.text:0040F831                 jnz     short loc_40F7C0
.text:0040F833                 call    sub_410730
.text:0040F838                 mov     edi, eax
.text:0040F83A                 jmp     short loc_40F7C0
.text:0040F83A sub_40F78F      endp
.text:0040F83A
.text:0040F83A ; ---------------------------------------------------------------------------
.text:0040F83C                 align 10h
.text:0040F840                 sub     esp, 0Ch
.text:0040F843                 mov     eax, [esp+10h]
.text:0040F847                 test    eax, eax
.text:0040F849                 jz      short loc_40F853
.text:0040F84B                 mov     [esp], eax
.text:0040F84E                 call    fclose
.text:0040F853
.text:0040F853 loc_40F853:                             ; CODE XREF: .text:0040F849↑j
.text:0040F853                 call    GetProcessHeap
.text:0040F858                 mov     [esp], eax
.text:0040F85B                 mov     ecx, off_414094 ; "notset"
.text:0040F861                 mov     dword ptr [esp+4], 0
.text:0040F869                 mov     [esp+8], ecx
.text:0040F86D                 call    HeapFree
.text:0040F872                 mov     edx, off_414090 ; "notset"
.text:0040F878                 sub     esp, 0Ch
.text:0040F87B                 mov     eax, 1
.text:0040F880                 mov     off_414094, edx ; "notset"
.text:0040F886                 add     esp, 0Ch
.text:0040F889                 retn
.text:0040F889 ; ---------------------------------------------------------------------------
.text:0040F88A                 align 10h
.text:0040F890                 push    edi
.text:0040F891                 push    esi
.text:0040F892                 push    ebx
.text:0040F893                 sub     esp, 10h
.text:0040F896                 mov     edi, [esp+24h]
.text:0040F89A                 mov     [esp], edi
.text:0040F89D                 call    strlen
.text:0040F8A2                 mov     edx, [esp+20h]
.text:0040F8A6                 mov     esi, eax
.text:0040F8A8                 mov     ebx, [edx+0Ch]
.text:0040F8AB                 nop
.text:0040F8AC                 lea     esi, [esi+0]
.text:0040F8B0
.text:0040F8B0 loc_40F8B0:                             ; CODE XREF: .text:0040F8E1↓j
.text:0040F8B0                 mov     [esp+4], edi
.text:0040F8B4                 mov     [esp], ebx
.text:0040F8B7                 call    strstr
.text:0040F8BC                 test    eax, eax
.text:0040F8BE                 jz      short loc_40F8E3
.text:0040F8C0                 cmp     eax, ebx
.text:0040F8C2                 jz      short loc_40F8E5
.text:0040F8C4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040F8C8                 jz      short loc_40F8F0
.text:0040F8CA
.text:0040F8CA loc_40F8CA:                             ; CODE XREF: .text:0040F900↓j
.text:0040F8CA                 mov     [esp], ebx
.text:0040F8CD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040F8D5                 call    strchr
.text:0040F8DA                 test    eax, eax
.text:0040F8DC                 mov     ebx, eax
.text:0040F8DE                 jz      short loc_40F8E3
.text:0040F8E0                 inc     ebx
.text:0040F8E1                 jmp     short loc_40F8B0
.text:0040F8E3 ; ---------------------------------------------------------------------------
.text:0040F8E3
.text:0040F8E3 loc_40F8E3:                             ; CODE XREF: .text:0040F8BE↑j
.text:0040F8E3                                         ; .text:0040F8DE↑j
.text:0040F8E3                 xor     eax, eax
.text:0040F8E5
.text:0040F8E5 loc_40F8E5:                             ; CODE XREF: .text:0040F8C2↑j
.text:0040F8E5                                         ; .text:0040F8F6↓j ...
.text:0040F8E5                 add     esp, 10h
.text:0040F8E8                 pop     ebx
.text:0040F8E9                 pop     esi
.text:0040F8EA                 pop     edi
.text:0040F8EB                 retn
.text:0040F8EB ; ---------------------------------------------------------------------------
.text:0040F8EC                 align 10h
.text:0040F8F0
.text:0040F8F0 loc_40F8F0:                             ; CODE XREF: .text:0040F8C8↑j
.text:0040F8F0                 movzx   edx, byte ptr [esi+eax]
.text:0040F8F4                 test    dl, dl
.text:0040F8F6                 jz      short loc_40F8E5
.text:0040F8F8                 cmp     dl, 3Dh ; '='
.text:0040F8FB                 jz      short loc_40F8E5
.text:0040F8FD                 cmp     dl, 2Ch ; ','
.text:0040F900                 jnz     short loc_40F8CA
.text:0040F902                 jmp     short loc_40F8E5
.text:0040F902 ; ---------------------------------------------------------------------------
.text:0040F904                 align 10h
.text:0040F910
.text:0040F910 ; =============== S U B R O U T I N E =======================================
.text:0040F910
.text:0040F910
.text:0040F910 ; int __cdecl sub_40F910(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040F910 sub_40F910      proc near               ; CODE XREF: sub_40FA90+93↓p
.text:0040F910
.text:0040F910 pvReserved      = dword ptr -35Ch
.text:0040F910 pUnkOuter       = dword ptr -358h
.text:0040F910 dwClsContext    = dword ptr -354h
.text:0040F910 riid            = dword ptr -350h
.text:0040F910 ppv             = dword ptr -34Ch
.text:0040F910 cchWideChar     = dword ptr -348h
.text:0040F910 var_334         = byte ptr -334h
.text:0040F910 var_330         = dword ptr -330h
.text:0040F910 String2         = byte ptr -32Ch
.text:0040F910 WideCharStr     = word ptr -21Ch
.text:0040F910 lpMultiByteStr  = dword ptr  4
.text:0040F910 lpString1       = dword ptr  8
.text:0040F910
.text:0040F910                 push    edi
.text:0040F911                 push    esi
.text:0040F912                 push    ebx
.text:0040F913                 sub     esp, 350h
.text:0040F919                 mov     edi, [esp+35Ch+lpString1]
.text:0040F920                 mov     byte ptr [edi], 0
.text:0040F923                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040F92A                 call    OleInitialize
.text:0040F92F                 sub     esp, 4
.text:0040F932                 cmp     eax, 1
.text:0040F935                 ja      loc_40FA6F
.text:0040F93B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040F943                 lea     ecx, [esp+35Ch+var_330]
.text:0040F947                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040F94B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040F953                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040F95B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040F962                 call    CoCreateInstance
.text:0040F967                 sub     esp, 14h
.text:0040F96A                 test    eax, eax
.text:0040F96C                 js      loc_40FA6F
.text:0040F972                 mov     ebx, [esp+35Ch+var_330]
.text:0040F976                 lea     edx, [esp+35Ch+var_334]
.text:0040F97A                 mov     esi, [ebx]
.text:0040F97C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040F980                 mov     [esp+35Ch+pvReserved], ebx
.text:0040F983                 xor     ebx, ebx
.text:0040F985                 mov     [esp+35Ch+pUnkOuter], offset dword_412660
.text:0040F98D                 call    dword ptr [esi]
.text:0040F98F                 sub     esp, 0Ch
.text:0040F992                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040F999                 call    AreFileApisANSI
.text:0040F99E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040F9A6                 test    eax, eax
.text:0040F9A8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040F9AF                 setz    bl
.text:0040F9B2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040F9B6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040F9BE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040F9C2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040F9CA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040F9CD                 call    MultiByteToWideChar
.text:0040F9D2                 sub     esp, 18h
.text:0040F9D5                 test    eax, eax
.text:0040F9D7                 js      loc_40FA6F
.text:0040F9DD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040F9E1                 mov     ebx, [edx]
.text:0040F9E3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040F9EB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040F9EF                 mov     [esp+35Ch+pvReserved], edx
.text:0040F9F2                 call    dword ptr [ebx+14h]
.text:0040F9F5                 sub     esp, 0Ch
.text:0040F9F8                 test    eax, eax
.text:0040F9FA                 js      short loc_40FA6F
.text:0040F9FC                 mov     ebx, [esp+35Ch+var_330]
.text:0040FA00                 lea     esi, [esp+35Ch+String2]
.text:0040FA04                 mov     ecx, [ebx]
.text:0040FA06                 mov     [esp+35Ch+pvReserved], ebx
.text:0040FA09                 mov     [esp+35Ch+ppv], 0
.text:0040FA11                 mov     [esp+35Ch+riid], 0
.text:0040FA19                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040FA21                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040FA25                 call    dword ptr [ecx+0Ch]
.text:0040FA28                 sub     esp, 14h
.text:0040FA2B                 mov     ebx, eax
.text:0040FA2D                 test    eax, eax
.text:0040FA2F                 js      short loc_40FA6F
.text:0040FA31                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040FA35                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040FA38                 call    lstrcpyA
.text:0040FA3D                 sub     esp, 8
.text:0040FA40                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040FA44                 mov     ecx, [edi]
.text:0040FA46                 mov     [esp+35Ch+pvReserved], edi
.text:0040FA49                 call    dword ptr [ecx+8]
.text:0040FA4C                 sub     esp, 4
.text:0040FA4F                 mov     edx, [esp+35Ch+var_330]
.text:0040FA53                 mov     esi, [edx]
.text:0040FA55                 mov     [esp+35Ch+pvReserved], edx
.text:0040FA58                 call    dword ptr [esi+8]
.text:0040FA5B                 sub     esp, 4
.text:0040FA5E                 call    CoUninitialize
.text:0040FA63                 mov     eax, ebx
.text:0040FA65
.text:0040FA65 loc_40FA65:                             ; CODE XREF: sub_40F910+177↓j
.text:0040FA65                 add     esp, 350h
.text:0040FA6B                 pop     ebx
.text:0040FA6C                 pop     esi
.text:0040FA6D                 pop     edi
.text:0040FA6E                 retn
.text:0040FA6F ; ---------------------------------------------------------------------------
.text:0040FA6F
.text:0040FA6F loc_40FA6F:                             ; CODE XREF: sub_40F910+25↑j
.text:0040FA6F                                         ; sub_40F910+5C↑j ...
.text:0040FA6F                 call    sub_40DE70
.text:0040FA74                 mov     edi, eax
.text:0040FA76                 call    _errno
.text:0040FA7B                 mov     [eax], edi
.text:0040FA7D                 call    CoUninitialize
.text:0040FA82                 mov     eax, 0FFFFFFFFh
.text:0040FA87                 jmp     short loc_40FA65
.text:0040FA87 sub_40F910      endp
.text:0040FA87
.text:0040FA87 ; ---------------------------------------------------------------------------
.text:0040FA89 ; const char aLnk_0[]
.text:0040FA89 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40FA90+53↓o
.text:0040FA89                                         ; sub_40FA90:loc_40FAF5↓o
.text:0040FA8E                 align 10h
.text:0040FA90
.text:0040FA90 ; =============== S U B R O U T I N E =======================================
.text:0040FA90
.text:0040FA90
.text:0040FA90 ; int __cdecl sub_40FA90(char *, LPSTR lpString1)
.text:0040FA90 sub_40FA90      proc near               ; CODE XREF: sub_40D470+96↑p
.text:0040FA90
.text:0040FA90 Str             = dword ptr -1Ch
.text:0040FA90 Source          = dword ptr -18h
.text:0040FA90 Destination     = dword ptr -14h
.text:0040FA90 arg_0           = dword ptr  4
.text:0040FA90 lpString1       = dword ptr  8
.text:0040FA90
.text:0040FA90                 push    ebp
.text:0040FA91                 push    edi
.text:0040FA92                 push    esi
.text:0040FA93                 push    ebx
.text:0040FA94                 sub     esp, 0Ch
.text:0040FA97                 mov     ebx, [esp+1Ch+arg_0]
.text:0040FA9B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040FA9F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FAA2                 call    strlen
.text:0040FAA7                 add     eax, 5
.text:0040FAAA                 mov     [esp+1Ch+Str], eax ; Size
.text:0040FAAD                 call    malloc
.text:0040FAB2                 mov     [esp+1Ch+Destination], eax
.text:0040FAB6                 test    eax, eax
.text:0040FAB8                 jz      loc_40FB60
.text:0040FABE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040FAC2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040FAC5                 call    strcpy
.text:0040FACA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040FAD2                 mov     eax, [esp+1Ch+Destination]
.text:0040FAD6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040FAD9                 call    strrchr
.text:0040FADE                 test    eax, eax
.text:0040FAE0                 jz      short loc_40FAF5
.text:0040FAE2                 cld
.text:0040FAE3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040FAE8                 mov     ecx, 5
.text:0040FAED                 mov     esi, eax
.text:0040FAEF                 mov     edi, ebx
.text:0040FAF1                 repe cmpsb
.text:0040FAF3                 jz      short loc_40FB09
.text:0040FAF5
.text:0040FAF5 loc_40FAF5:                             ; CODE XREF: sub_40FA90+50↑j
.text:0040FAF5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040FAFD                 mov     edx, [esp+1Ch+Destination]
.text:0040FB01                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040FB04                 call    strcat
.text:0040FB09
.text:0040FB09 loc_40FB09:                             ; CODE XREF: sub_40FA90+63↑j
.text:0040FB09                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040FB10                 call    SetErrorMode
.text:0040FB15                 sub     esp, 4
.text:0040FB18                 mov     ebx, [esp+1Ch+Destination]
.text:0040FB1C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040FB20                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040FB23                 call    sub_40F910
.text:0040FB28                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040FB2B                 mov     esi, eax
.text:0040FB2D                 call    free
.text:0040FB32                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040FB39                 call    SetErrorMode
.text:0040FB3E                 sub     esp, 4
.text:0040FB41                 mov     [esp+1Ch+Str], ebp
.text:0040FB44                 call    sub_40C0E0
.text:0040FB49                 inc     esi
.text:0040FB4A                 jz      short loc_40FB60
.text:0040FB4C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040FB50                 add     esp, 0Ch
.text:0040FB53                 pop     ebx
.text:0040FB54                 pop     esi
.text:0040FB55                 pop     edi
.text:0040FB56                 pop     ebp
.text:0040FB57                 jmp     strlen
.text:0040FB57 ; ---------------------------------------------------------------------------
.text:0040FB5C                 align 10h
.text:0040FB60
.text:0040FB60 loc_40FB60:                             ; CODE XREF: sub_40FA90+28↑j
.text:0040FB60                                         ; sub_40FA90+BA↑j
.text:0040FB60                 add     esp, 0Ch
.text:0040FB63                 mov     eax, 0FFFFFFFFh
.text:0040FB68                 pop     ebx
.text:0040FB69                 pop     esi
.text:0040FB6A                 pop     edi
.text:0040FB6B                 pop     ebp
.text:0040FB6C                 retn
.text:0040FB6C sub_40FA90      endp
.text:0040FB6C
.text:0040FB6C ; ---------------------------------------------------------------------------
.text:0040FB6D                 align 10h
.text:0040FB70
.text:0040FB70 ; =============== S U B R O U T I N E =======================================
.text:0040FB70
.text:0040FB70
.text:0040FB70 ; int __cdecl sub_40FB70(int, int, char *, int, int)
.text:0040FB70 sub_40FB70      proc near               ; CODE XREF: sub_40D5C0+2A↑p
.text:0040FB70
.text:0040FB70 var_1C          = dword ptr -1Ch
.text:0040FB70 var_18          = dword ptr -18h
.text:0040FB70 var_14          = dword ptr -14h
.text:0040FB70 var_10          = dword ptr -10h
.text:0040FB70 var_C           = dword ptr -0Ch
.text:0040FB70 var_4           = dword ptr -4
.text:0040FB70 arg_0           = dword ptr  4
.text:0040FB70 arg_4           = dword ptr  8
.text:0040FB70 arg_8           = dword ptr  0Ch
.text:0040FB70 arg_C           = dword ptr  10h
.text:0040FB70 arg_10          = dword ptr  14h
.text:0040FB70
.text:0040FB70                 sub     esp, 1Ch
.text:0040FB73                 mov     [esp+1Ch+var_4], ebx
.text:0040FB77                 mov     ebx, [esp+1Ch+arg_4]
.text:0040FB7B                 call    sub_4107D0
.text:0040FB80                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040FB83                 mov     ecx, [esp+1Ch+arg_10]
.text:0040FB87                 mov     [esp+1Ch+var_18], ebx ; int
.text:0040FB8B                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040FB8F                 mov     ecx, [esp+1Ch+arg_C]
.text:0040FB93                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040FB97                 mov     ecx, [esp+1Ch+arg_8]
.text:0040FB9B                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040FB9F                 call    sub_410430
.text:0040FBA4                 mov     ecx, [esp+1Ch+arg_0]
.text:0040FBA8                 mov     [ebx+8], ecx
.text:0040FBAB                 mov     ebx, [esp+1Ch+var_4]
.text:0040FBAF                 add     esp, 1Ch
.text:0040FBB2                 retn
.text:0040FBB2 sub_40FB70      endp
.text:0040FBB2
.text:0040FBB2 ; ---------------------------------------------------------------------------
.text:0040FBB3                 align 10h
.text:0040FBC0
.text:0040FBC0 ; =============== S U B R O U T I N E =======================================
.text:0040FBC0
.text:0040FBC0 ; Attributes: info_from_lumina
.text:0040FBC0
.text:0040FBC0 __quicksort     proc near               ; CODE XREF: sub_40D810+7B↑j
.text:0040FBC0
.text:0040FBC0 var_14C         = dword ptr -14Ch
.text:0040FBC0 var_148         = dword ptr -148h
.text:0040FBC0 var_13C         = dword ptr -13Ch
.text:0040FBC0 var_135         = byte ptr -135h
.text:0040FBC0 var_134         = dword ptr -134h
.text:0040FBC0 var_130         = dword ptr -130h
.text:0040FBC0 var_12C         = dword ptr -12Ch
.text:0040FBC0 var_128         = dword ptr -128h
.text:0040FBC0 var_124         = dword ptr -124h
.text:0040FBC0 var_120         = dword ptr -120h
.text:0040FBC0 var_11C         = byte ptr -11Ch
.text:0040FBC0 var_114         = byte ptr -114h
.text:0040FBC0 arg_0           = dword ptr  4
.text:0040FBC0 arg_4           = dword ptr  8
.text:0040FBC0 arg_8           = dword ptr  0Ch
.text:0040FBC0 arg_C           = dword ptr  10h
.text:0040FBC0
.text:0040FBC0                 push    ebp
.text:0040FBC1                 push    edi
.text:0040FBC2                 push    esi
.text:0040FBC3                 push    ebx
.text:0040FBC4                 sub     esp, 13Ch
.text:0040FBCA                 mov     eax, [esp+14Ch+arg_4]
.text:0040FBD1                 mov     ecx, [esp+14Ch+arg_8]
.text:0040FBD8                 shl     ecx, 2
.text:0040FBDB                 test    eax, eax
.text:0040FBDD                 mov     [esp+14Ch+var_120], ecx
.text:0040FBE1                 jz      loc_40FD3C
.text:0040FBE7                 lea     ecx, [eax-1]
.text:0040FBEA                 cmp     eax, 4
.text:0040FBED                 mov     [esp+14Ch+var_13C], ecx
.text:0040FBF1                 jbe     short loc_40FC26
.text:0040FBF3                 mov     edi, [esp+14Ch+arg_8]
.text:0040FBFA                 lea     ebx, [esp+14Ch+var_114]
.text:0040FBFE                 mov     edx, [esp+14Ch+var_13C]
.text:0040FC02                 mov     [esp+14Ch+var_12C], ebx
.text:0040FC06                 mov     ebp, [esp+14Ch+arg_0]
.text:0040FC0D                 lea     eax, [esp+14Ch+var_11C]
.text:0040FC11                 imul    edi, edx
.text:0040FC14                 mov     [esp+14Ch+var_124], ebp
.text:0040FC18                 add     edi, ebp
.text:0040FC1A                 cmp     eax, ebx
.text:0040FC1C                 mov     [esp+14Ch+var_128], edi
.text:0040FC20                 jb      loc_40FD6F
.text:0040FC26
.text:0040FC26 loc_40FC26:                             ; CODE XREF: __quicksort+31↑j
.text:0040FC26                                         ; __quicksort+313↓j
.text:0040FC26                 mov     ebx, [esp+14Ch+arg_8]
.text:0040FC2D                 mov     edx, [esp+14Ch+var_13C]
.text:0040FC31                 mov     ecx, [esp+14Ch+arg_0]
.text:0040FC38                 mov     esi, [esp+14Ch+arg_0]
.text:0040FC3F                 imul    ebx, edx
.text:0040FC42                 mov     edi, [esp+14Ch+var_120]
.text:0040FC46                 add     ebx, ecx
.text:0040FC48                 mov     [esp+14Ch+var_134], ebx
.text:0040FC4C                 lea     ebx, [edi+esi]
.text:0040FC4F                 cmp     ebx, [esp+14Ch+var_134]
.text:0040FC53                 jbe     short loc_40FC59
.text:0040FC55                 mov     ebx, [esp+14Ch+var_134]
.text:0040FC59
.text:0040FC59 loc_40FC59:                             ; CODE XREF: __quicksort+93↑j
.text:0040FC59                 mov     ebp, [esp+14Ch+arg_8]
.text:0040FC60                 lea     edi, [ebp+esi+0]
.text:0040FC64                 cmp     edi, ebx
.text:0040FC66                 mov     ebp, edi
.text:0040FC68                 jbe     loc_40FD47
.text:0040FC6E
.text:0040FC6E loc_40FC6E:                             ; CODE XREF: __quicksort+1A6↓j
.text:0040FC6E                 cmp     esi, [esp+14Ch+arg_0]
.text:0040FC75                 jz      short loc_40FC96
.text:0040FC77                 mov     edi, [esp+14Ch+arg_8]
.text:0040FC7E                 mov     ebx, esi
.text:0040FC80                 mov     ecx, [esp+14Ch+arg_0]
.text:0040FC87
.text:0040FC87 loc_40FC87:                             ; CODE XREF: __quicksort+D4↓j
.text:0040FC87                 movzx   edx, byte ptr [ebx]
.text:0040FC8A                 movzx   eax, byte ptr [ecx]
.text:0040FC8D                 mov     [ebx], al
.text:0040FC8F                 inc     ebx
.text:0040FC90                 mov     [ecx], dl
.text:0040FC92                 inc     ecx
.text:0040FC93                 dec     edi
.text:0040FC94                 jnz     short loc_40FC87
.text:0040FC96
.text:0040FC96 loc_40FC96:                             ; CODE XREF: __quicksort+B5↑j
.text:0040FC96                 mov     esi, [esp+14Ch+arg_8]
.text:0040FC9D                 lea     edi, [esi+ebp]
.text:0040FCA0                 cmp     edi, [esp+14Ch+var_134]
.text:0040FCA4                 ja      loc_40FD3C
.text:0040FCAA
.text:0040FCAA loc_40FCAA:                             ; CODE XREF: __quicksort+176↓j
.text:0040FCAA                 mov     esi, edi
.text:0040FCAC                 lea     esi, [esi+0]
.text:0040FCB0
.text:0040FCB0 loc_40FCB0:                             ; CODE XREF: __quicksort+109↓j
.text:0040FCB0                 mov     [esp+14Ch+var_14C], edi
.text:0040FCB3                 mov     ebx, [esp+14Ch+arg_8]
.text:0040FCBA                 sub     esi, ebx
.text:0040FCBC                 mov     [esp+14Ch+var_148], esi
.text:0040FCC0                 call    [esp+14Ch+arg_C]
.text:0040FCC7                 test    eax, eax
.text:0040FCC9                 js      short loc_40FCB0
.text:0040FCCB                 mov     edx, [esp+14Ch+arg_8]
.text:0040FCD2                 mov     eax, [esp+14Ch+arg_8]
.text:0040FCD9                 add     esi, edx
.text:0040FCDB                 cmp     esi, edi
.text:0040FCDD                 lea     ebp, [eax+edi]
.text:0040FCE0                 jz      short loc_40FD30
.text:0040FCE2                 lea     ebx, [ebp-1]
.text:0040FCE5                 cmp     ebx, edi
.text:0040FCE7                 jb      short loc_40FD30
.text:0040FCE9                 lea     esi, [esi+0]
.text:0040FCF0
.text:0040FCF0 loc_40FCF0:                             ; CODE XREF: __quicksort+16E↓j
.text:0040FCF0                 movzx   ecx, byte ptr [ebx]
.text:0040FCF3                 mov     edx, ebx
.text:0040FCF5                 mov     eax, [esp+14Ch+arg_8]
.text:0040FCFC                 mov     [esp+14Ch+var_135], cl
.text:0040FD00                 sub     edx, eax
.text:0040FD02                 cmp     edx, esi
.text:0040FD04                 mov     ecx, ebx
.text:0040FD06                 jb      short loc_40FD24
.text:0040FD08                 nop
.text:0040FD09                 lea     esi, [esi+0]
.text:0040FD10
.text:0040FD10 loc_40FD10:                             ; CODE XREF: __quicksort+162↓j
.text:0040FD10                 movzx   eax, byte ptr [edx]
.text:0040FD13                 mov     [ecx], al
.text:0040FD15                 mov     eax, [esp+14Ch+arg_8]
.text:0040FD1C                 mov     ecx, edx
.text:0040FD1E                 sub     edx, eax
.text:0040FD20                 cmp     edx, esi
.text:0040FD22                 jnb     short loc_40FD10
.text:0040FD24
.text:0040FD24 loc_40FD24:                             ; CODE XREF: __quicksort+146↑j
.text:0040FD24                 movzx   eax, [esp+14Ch+var_135]
.text:0040FD29                 dec     ebx
.text:0040FD2A                 cmp     ebx, edi
.text:0040FD2C                 mov     [ecx], al
.text:0040FD2E                 jnb     short loc_40FCF0
.text:0040FD30
.text:0040FD30 loc_40FD30:                             ; CODE XREF: __quicksort+120↑j
.text:0040FD30                                         ; __quicksort+127↑j
.text:0040FD30                 cmp     ebp, [esp+14Ch+var_134]
.text:0040FD34                 mov     edi, ebp
.text:0040FD36                 jbe     loc_40FCAA
.text:0040FD3C
.text:0040FD3C loc_40FD3C:                             ; CODE XREF: __quicksort+21↑j
.text:0040FD3C                                         ; __quicksort+E4↑j
.text:0040FD3C                 add     esp, 13Ch
.text:0040FD42                 pop     ebx
.text:0040FD43                 pop     esi
.text:0040FD44                 pop     edi
.text:0040FD45                 pop     ebp
.text:0040FD46                 retn
.text:0040FD47 ; ---------------------------------------------------------------------------
.text:0040FD47
.text:0040FD47 loc_40FD47:                             ; CODE XREF: __quicksort+A8↑j
.text:0040FD47                                         ; __quicksort+1A4↓j
.text:0040FD47                 mov     [esp+14Ch+var_148], esi
.text:0040FD4B                 mov     [esp+14Ch+var_14C], edi
.text:0040FD4E                 call    [esp+14Ch+arg_C]
.text:0040FD55                 test    eax, eax
.text:0040FD57                 js      short loc_40FD6B
.text:0040FD59
.text:0040FD59 loc_40FD59:                             ; CODE XREF: __quicksort+1AD↓j
.text:0040FD59                 mov     ecx, [esp+14Ch+arg_8]
.text:0040FD60                 add     edi, ecx
.text:0040FD62                 cmp     edi, ebx
.text:0040FD64                 jbe     short loc_40FD47
.text:0040FD66                 jmp     loc_40FC6E
.text:0040FD6B ; ---------------------------------------------------------------------------
.text:0040FD6B
.text:0040FD6B loc_40FD6B:                             ; CODE XREF: __quicksort+197↑j
.text:0040FD6B                 mov     esi, edi
.text:0040FD6D                 jmp     short loc_40FD59
.text:0040FD6F ; ---------------------------------------------------------------------------
.text:0040FD6F
.text:0040FD6F loc_40FD6F:                             ; CODE XREF: __quicksort+60↑j
.text:0040FD6F                                         ; __quicksort+30D↓j
.text:0040FD6F                 mov     eax, [esp+14Ch+var_128]
.text:0040FD73                 xor     edx, edx
.text:0040FD75                 mov     ebp, [esp+14Ch+var_124]
.text:0040FD79                 mov     edi, [esp+14Ch+arg_8]
.text:0040FD80                 mov     ebx, [esp+14Ch+var_124]
.text:0040FD84                 sub     eax, ebp
.text:0040FD86                 div     [esp+14Ch+arg_8]
.text:0040FD8D                 mov     ecx, [esp+14Ch+var_124]
.text:0040FD91                 mov     [esp+14Ch+var_148], ecx
.text:0040FD95                 shr     eax, 1
.text:0040FD97                 imul    eax, edi
.text:0040FD9A                 add     eax, ebx
.text:0040FD9C                 mov     [esp+14Ch+var_130], eax
.text:0040FDA0                 mov     esi, [esp+14Ch+var_130]
.text:0040FDA4                 mov     [esp+14Ch+var_14C], esi
.text:0040FDA7                 call    [esp+14Ch+arg_C]
.text:0040FDAE                 test    eax, eax
.text:0040FDB0                 js      loc_40FFB4
.text:0040FDB6
.text:0040FDB6 loc_40FDB6:                             ; CODE XREF: __quicksort+412↓j
.text:0040FDB6                 mov     edx, [esp+14Ch+var_130]
.text:0040FDBA                 mov     eax, [esp+14Ch+var_128]
.text:0040FDBE                 mov     [esp+14Ch+var_148], edx
.text:0040FDC2                 mov     [esp+14Ch+var_14C], eax
.text:0040FDC5                 call    [esp+14Ch+arg_C]
.text:0040FDCC                 test    eax, eax
.text:0040FDCE                 js      loc_40FF55
.text:0040FDD4
.text:0040FDD4 loc_40FDD4:                             ; CODE XREF: __quicksort+3CB↓j
.text:0040FDD4                                         ; __quicksort+3EF↓j
.text:0040FDD4                 mov     edi, [esp+14Ch+arg_8]
.text:0040FDDB                 mov     ebp, [esp+14Ch+var_124]
.text:0040FDDF                 mov     ebx, [esp+14Ch+arg_8]
.text:0040FDE6                 add     ebp, edi
.text:0040FDE8                 mov     edi, [esp+14Ch+var_128]
.text:0040FDEC                 sub     edi, ebx
.text:0040FDEE                 mov     esi, esi
.text:0040FDF0
.text:0040FDF0 loc_40FDF0:                             ; CODE XREF: __quicksort+2C7↓j
.text:0040FDF0                                         ; __quicksort+390↓j
.text:0040FDF0                 mov     [esp+14Ch+var_14C], ebp
.text:0040FDF3                 mov     esi, [esp+14Ch+var_130]
.text:0040FDF7                 mov     [esp+14Ch+var_148], esi
.text:0040FDFB                 call    [esp+14Ch+arg_C]
.text:0040FE02                 test    eax, eax
.text:0040FE04                 js      loc_40FF47
.text:0040FE0A                 lea     esi, [esi+0]
.text:0040FE10
.text:0040FE10 loc_40FE10:                             ; CODE XREF: __quicksort+26F↓j
.text:0040FE10                 mov     [esp+14Ch+var_148], edi
.text:0040FE14                 mov     eax, [esp+14Ch+var_130]
.text:0040FE18                 mov     [esp+14Ch+var_14C], eax
.text:0040FE1B                 call    [esp+14Ch+arg_C]
.text:0040FE22                 test    eax, eax
.text:0040FE24                 jns     short loc_40FE31
.text:0040FE26                 mov     ecx, [esp+14Ch+arg_8]
.text:0040FE2D                 sub     edi, ecx
.text:0040FE2F                 jmp     short loc_40FE10
.text:0040FE31 ; ---------------------------------------------------------------------------
.text:0040FE31
.text:0040FE31 loc_40FE31:                             ; CODE XREF: __quicksort+264↑j
.text:0040FE31                 cmp     ebp, edi
.text:0040FE33                 jnb     loc_40FF2E
.text:0040FE39                 mov     esi, [esp+14Ch+arg_8]
.text:0040FE40                 mov     ebx, ebp
.text:0040FE42                 mov     ecx, edi
.text:0040FE44                 lea     esi, [esi+0]
.text:0040FE4A                 lea     edi, [edi+0]
.text:0040FE50
.text:0040FE50 loc_40FE50:                             ; CODE XREF: __quicksort+29D↓j
.text:0040FE50                 movzx   edx, byte ptr [ebx]
.text:0040FE53                 movzx   eax, byte ptr [ecx]
.text:0040FE56                 mov     [ebx], al
.text:0040FE58                 inc     ebx
.text:0040FE59                 mov     [ecx], dl
.text:0040FE5B                 inc     ecx
.text:0040FE5C                 dec     esi
.text:0040FE5D                 jnz     short loc_40FE50
.text:0040FE5F                 cmp     [esp+14Ch+var_130], ebp
.text:0040FE63                 jz      loc_40FF25
.text:0040FE69                 cmp     [esp+14Ch+var_130], edi
.text:0040FE6D                 jz      loc_40FF1C
.text:0040FE73
.text:0040FE73 loc_40FE73:                             ; CODE XREF: __quicksort+360↓j
.text:0040FE73                                         ; __quicksort+369↓j
.text:0040FE73                 mov     edx, [esp+14Ch+arg_8]
.text:0040FE7A                 mov     ebx, [esp+14Ch+arg_8]
.text:0040FE81                 add     ebp, edx
.text:0040FE83                 sub     edi, ebx
.text:0040FE85
.text:0040FE85 loc_40FE85:                             ; CODE XREF: __quicksort+370↓j
.text:0040FE85                 cmp     ebp, edi
.text:0040FE87                 jbe     loc_40FDF0
.text:0040FE8D
.text:0040FE8D loc_40FE8D:                             ; CODE XREF: __quicksort+382↓j
.text:0040FE8D                 mov     esi, [esp+14Ch+var_124]
.text:0040FE91                 mov     eax, edi
.text:0040FE93                 sub     eax, esi
.text:0040FE95                 cmp     eax, [esp+14Ch+var_120]
.text:0040FE99                 ja      short loc_40FED8
.text:0040FE9B                 mov     [esp+14Ch+var_124], ebp
.text:0040FE9F                 mov     edi, [esp+14Ch+var_128]
.text:0040FEA3                 sub     edi, ebp
.text:0040FEA5                 cmp     edi, [esp+14Ch+var_120]
.text:0040FEA9                 ja      short loc_40FEC5
.text:0040FEAB                 sub     [esp+14Ch+var_12C], 8
.text:0040FEB0                 mov     edx, [esp+14Ch+var_12C]
.text:0040FEB4                 mov     ecx, [esp+14Ch+var_12C]
.text:0040FEB8                 mov     ebx, [edx]
.text:0040FEBA                 mov     ebp, [ecx+4]
.text:0040FEBD                 mov     [esp+14Ch+var_124], ebx
.text:0040FEC1                 mov     [esp+14Ch+var_128], ebp
.text:0040FEC5
.text:0040FEC5 loc_40FEC5:                             ; CODE XREF: __quicksort+2E9↑j
.text:0040FEC5                                         ; __quicksort+340↓j ...
.text:0040FEC5                 lea     eax, [esp+14Ch+var_11C]
.text:0040FEC9                 cmp     eax, [esp+14Ch+var_12C]
.text:0040FECD                 jb      loc_40FD6F
.text:0040FED3                 jmp     loc_40FC26
.text:0040FED8 ; ---------------------------------------------------------------------------
.text:0040FED8
.text:0040FED8 loc_40FED8:                             ; CODE XREF: __quicksort+2D9↑j
.text:0040FED8                 mov     edx, [esp+14Ch+var_128]
.text:0040FEDC                 sub     edx, ebp
.text:0040FEDE                 cmp     edx, [esp+14Ch+var_120]
.text:0040FEE2                 jbe     short loc_40FF16
.text:0040FEE4                 cmp     eax, edx
.text:0040FEE6                 jle     short loc_40FF02
.text:0040FEE8                 mov     ecx, [esp+14Ch+var_12C]
.text:0040FEEC                 mov     ebx, [esp+14Ch+var_124]
.text:0040FEF0                 mov     [esp+14Ch+var_124], ebp
.text:0040FEF4                 mov     [ecx+4], edi
.text:0040FEF7                 mov     [ecx], ebx
.text:0040FEF9                 add     ecx, 8
.text:0040FEFC                 mov     [esp+14Ch+var_12C], ecx
.text:0040FF00                 jmp     short loc_40FEC5
.text:0040FF02 ; ---------------------------------------------------------------------------
.text:0040FF02
.text:0040FF02 loc_40FF02:                             ; CODE XREF: __quicksort+326↑j
.text:0040FF02                 mov     esi, [esp+14Ch+var_12C]
.text:0040FF06                 mov     [esi], ebp
.text:0040FF08                 mov     ebp, [esp+14Ch+var_128]
.text:0040FF0C                 mov     [esi+4], ebp
.text:0040FF0F                 add     esi, 8
.text:0040FF12                 mov     [esp+14Ch+var_12C], esi
.text:0040FF16
.text:0040FF16 loc_40FF16:                             ; CODE XREF: __quicksort+322↑j
.text:0040FF16                 mov     [esp+14Ch+var_128], edi
.text:0040FF1A                 jmp     short loc_40FEC5
.text:0040FF1C ; ---------------------------------------------------------------------------
.text:0040FF1C
.text:0040FF1C loc_40FF1C:                             ; CODE XREF: __quicksort+2AD↑j
.text:0040FF1C                 mov     [esp+14Ch+var_130], ebp
.text:0040FF20                 jmp     loc_40FE73
.text:0040FF25 ; ---------------------------------------------------------------------------
.text:0040FF25
.text:0040FF25 loc_40FF25:                             ; CODE XREF: __quicksort+2A3↑j
.text:0040FF25                 mov     [esp+14Ch+var_130], edi
.text:0040FF29                 jmp     loc_40FE73
.text:0040FF2E ; ---------------------------------------------------------------------------
.text:0040FF2E
.text:0040FF2E loc_40FF2E:                             ; CODE XREF: __quicksort+273↑j
.text:0040FF2E                 cmp     ebp, edi
.text:0040FF30                 jnz     loc_40FE85
.text:0040FF36                 mov     esi, [esp+14Ch+arg_8]
.text:0040FF3D                 lea     ebp, [esi+edi]
.text:0040FF40                 sub     edi, esi
.text:0040FF42                 jmp     loc_40FE8D
.text:0040FF47 ; ---------------------------------------------------------------------------
.text:0040FF47
.text:0040FF47 loc_40FF47:                             ; CODE XREF: __quicksort+244↑j
.text:0040FF47                 mov     edx, [esp+14Ch+arg_8]
.text:0040FF4E                 add     ebp, edx
.text:0040FF50                 jmp     loc_40FDF0
.text:0040FF55 ; ---------------------------------------------------------------------------
.text:0040FF55
.text:0040FF55 loc_40FF55:                             ; CODE XREF: __quicksort+20E↑j
.text:0040FF55                 mov     esi, [esp+14Ch+arg_8]
.text:0040FF5C                 mov     ebx, [esp+14Ch+var_130]
.text:0040FF60                 mov     ecx, [esp+14Ch+var_128]
.text:0040FF64
.text:0040FF64 loc_40FF64:                             ; CODE XREF: __quicksort+3B1↓j
.text:0040FF64                 movzx   edx, byte ptr [ebx]
.text:0040FF67                 movzx   eax, byte ptr [ecx]
.text:0040FF6A                 mov     [ebx], al
.text:0040FF6C                 inc     ebx
.text:0040FF6D                 mov     [ecx], dl
.text:0040FF6F                 inc     ecx
.text:0040FF70                 dec     esi
.text:0040FF71                 jnz     short loc_40FF64
.text:0040FF73                 mov     ecx, [esp+14Ch+var_124]
.text:0040FF77                 mov     esi, [esp+14Ch+var_130]
.text:0040FF7B                 mov     [esp+14Ch+var_148], ecx
.text:0040FF7F                 mov     [esp+14Ch+var_14C], esi
.text:0040FF82                 call    [esp+14Ch+arg_C]
.text:0040FF89                 test    eax, eax
.text:0040FF8B                 jns     loc_40FDD4
.text:0040FF91                 mov     esi, [esp+14Ch+arg_8]
.text:0040FF98                 mov     ebx, [esp+14Ch+var_130]
.text:0040FF9C                 mov     ecx, [esp+14Ch+var_124]
.text:0040FFA0
.text:0040FFA0 loc_40FFA0:                             ; CODE XREF: __quicksort+3ED↓j
.text:0040FFA0                 movzx   edx, byte ptr [ebx]
.text:0040FFA3                 movzx   eax, byte ptr [ecx]
.text:0040FFA6                 mov     [ebx], al
.text:0040FFA8                 inc     ebx
.text:0040FFA9                 mov     [ecx], dl
.text:0040FFAB                 inc     ecx
.text:0040FFAC                 dec     esi
.text:0040FFAD                 jnz     short loc_40FFA0
.text:0040FFAF                 jmp     loc_40FDD4
.text:0040FFB4 ; ---------------------------------------------------------------------------
.text:0040FFB4
.text:0040FFB4 loc_40FFB4:                             ; CODE XREF: __quicksort+1F0↑j
.text:0040FFB4                 mov     esi, [esp+14Ch+arg_8]
.text:0040FFBB                 mov     ebx, [esp+14Ch+var_130]
.text:0040FFBF                 mov     ecx, [esp+14Ch+var_124]
.text:0040FFC3
.text:0040FFC3 loc_40FFC3:                             ; CODE XREF: __quicksort+410↓j
.text:0040FFC3                 movzx   edx, byte ptr [ebx]
.text:0040FFC6                 movzx   eax, byte ptr [ecx]
.text:0040FFC9                 mov     [ebx], al
.text:0040FFCB                 inc     ebx
.text:0040FFCC                 mov     [ecx], dl
.text:0040FFCE                 inc     ecx
.text:0040FFCF                 dec     esi
.text:0040FFD0                 jnz     short loc_40FFC3
.text:0040FFD2                 jmp     loc_40FDB6
.text:0040FFD2 __quicksort     endp
.text:0040FFD2
.text:0040FFD2 ; ---------------------------------------------------------------------------
.text:0040FFD7                 align 10h
.text:0040FFE0
.text:0040FFE0 ; =============== S U B R O U T I N E =======================================
.text:0040FFE0
.text:0040FFE0 ; Attributes: info_from_lumina
.text:0040FFE0
.text:0040FFE0 _sysconf        proc near               ; CODE XREF: sub_40D810+F7↑p
.text:0040FFE0                                         ; sub_40D810+11E↑p
.text:0040FFE0
.text:0040FFE0 arg_0           = dword ptr  4
.text:0040FFE0
.text:0040FFE0                 sub     esp, 0Ch
.text:0040FFE3                 mov     eax, [esp+0Ch+arg_0]
.text:0040FFE7                 cmp     eax, 83h        ; switch 132 cases
.text:0040FFEC                 ja      def_40FFF2      ; jumptable 67026652 default case, cases 50,56
.text:0040FFEC                                         ; jumptable 0040FFF2 default case, cases 50,56
.text:0040FFF2                 jmp     ds:jpt_40FFF2[eax*4] ; switch jump
.text:0040FFF2 ; ---------------------------------------------------------------------------
.text:0040FFF9                 align 4
.text:0040FFFC jpt_40FFF2      dd offset loc_410234, offset loc_410234, offset loc_410234
.text:0040FFFC                                         ; DATA XREF: _sysconf+12↑r
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC ; jump table for switch statement
.text:0040FFFC                 dd offset loc_41023B, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102E8, offset loc_410220
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_410257, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset def_40FFF2
.text:0040FFFC                 dd offset loc_4102FC, offset loc_41025E, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset def_40FFF2
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_410265, offset loc_410265, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_41026C
.text:0040FFFC                 dd offset loc_410274, offset loc_41027C, offset loc_410284
.text:0040FFFC                 dd offset loc_41029A, offset loc_41028C, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_410293
.text:0040FFFC                 dd offset loc_4102C0, offset loc_4102CA, offset loc_41029A
.text:0040FFFC                 dd offset loc_4102A1, offset loc_4102A8, offset loc_4102A8
.text:0040FFFC                 dd offset loc_4102AF, offset loc_4102B9, offset loc_4102D4
.text:0040FFFC                 dd offset loc_4102C0, offset loc_4102CA, offset loc_4102D4
.text:0040FFFC                 dd offset loc_4102DE, offset loc_4102E8, offset loc_410220
.text:0040FFFC                 dd offset loc_410220, offset loc_4102F2, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0040FFFC                 dd offset loc_4102FC, offset loc_4102FC, offset loc_4102FC
.text:0041020C ; ---------------------------------------------------------------------------
.text:0041020C
.text:0041020C def_40FFF2:                             ; CODE XREF: _sysconf+C↑j
.text:0041020C                                         ; _sysconf+12↑j
.text:0041020C                                         ; DATA XREF: ...
.text:0041020C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0041020C                                         ; jumptable 0040FFF2 default case, cases 50,56
.text:00410211                 mov     dword ptr [eax], 16h
.text:00410217                 mov     esi, esi
.text:00410219                 lea     edi, [edi+0]
.text:00410220
.text:00410220 loc_410220:                             ; CODE XREF: _sysconf+12↑j
.text:00410220                                         ; _sysconf+327↓j
.text:00410220                                         ; DATA XREF: ...
.text:00410220                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:00410220                                         ; jumptable 0040FFF2 cases 41,116,117
.text:00410225                 lea     esi, [esi+0]
.text:00410229                 lea     edi, [edi+0]
.text:00410230
.text:00410230 loc_410230:                             ; CODE XREF: _sysconf+259↓j
.text:00410230                                         ; _sysconf+26C↓j ...
.text:00410230                 add     esp, 0Ch
.text:00410233                 retn
.text:00410234 ; ---------------------------------------------------------------------------
.text:00410234
.text:00410234 loc_410234:                             ; CODE XREF: _sysconf+12↑j
.text:00410234                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410234                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:00410234                                         ; jumptable 0040FFF2 cases 0-2
.text:00410239                 jmp     short loc_410230
.text:0041023B ; ---------------------------------------------------------------------------
.text:0041023B
.text:0041023B loc_41023B:                             ; CODE XREF: _sysconf+12↑j
.text:0041023B                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041023B                 call    sub_410980      ; jumptable 67026652 case 6
.text:0041023B                                         ; jumptable 0040FFF2 case 6
.text:00410240                 cmp     eax, 6
.text:00410243                 mov     edx, 6
.text:00410248                 jg      short loc_41024E
.text:0041024A
.text:0041024A loc_41024A:                             ; CODE XREF: _sysconf+275↓j
.text:0041024A                 mov     eax, edx
.text:0041024C                 jmp     short loc_410230
.text:0041024E ; ---------------------------------------------------------------------------
.text:0041024E
.text:0041024E loc_41024E:                             ; CODE XREF: _sysconf+268↑j
.text:0041024E                 call    sub_410980
.text:00410253                 mov     edx, eax
.text:00410255                 jmp     short loc_41024A
.text:00410257 ; ---------------------------------------------------------------------------
.text:00410257
.text:00410257 loc_410257:                             ; CODE XREF: _sysconf+12↑j
.text:00410257                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410257                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:00410257                                         ; jumptable 0040FFF2 case 45
.text:0041025C                 jmp     short loc_410230
.text:0041025E ; ---------------------------------------------------------------------------
.text:0041025E
.text:0041025E loc_41025E:                             ; CODE XREF: _sysconf+12↑j
.text:0041025E                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041025E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:0041025E                                         ; jumptable 0040FFF2 case 52
.text:00410263                 jmp     short loc_410230
.text:00410265 ; ---------------------------------------------------------------------------
.text:00410265
.text:00410265 loc_410265:                             ; CODE XREF: _sysconf+12↑j
.text:00410265                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410265                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:00410265                                         ; jumptable 0040FFF2 cases 69,70
.text:0041026A                 jmp     short loc_410230
.text:0041026C ; ---------------------------------------------------------------------------
.text:0041026C
.text:0041026C loc_41026C:                             ; CODE XREF: _sysconf+12↑j
.text:0041026C                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041026C                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:0041026C                                         ; jumptable 0040FFF2 case 83
.text:0041026F                 jmp     sub_410870
.text:00410274 ; ---------------------------------------------------------------------------
.text:00410274
.text:00410274 loc_410274:                             ; CODE XREF: _sysconf+12↑j
.text:00410274                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410274                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:00410274                                         ; jumptable 0040FFF2 case 84
.text:00410277                 jmp     sub_410820
.text:0041027C ; ---------------------------------------------------------------------------
.text:0041027C
.text:0041027C loc_41027C:                             ; CODE XREF: _sysconf+12↑j
.text:0041027C                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041027C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0041027C                                         ; jumptable 0040FFF2 case 85
.text:0041027F                 jmp     sub_4108C0
.text:00410284 ; ---------------------------------------------------------------------------
.text:00410284
.text:00410284 loc_410284:                             ; CODE XREF: _sysconf+12↑j
.text:00410284                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410284                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:00410284                                         ; jumptable 0040FFF2 case 86
.text:00410287                 jmp     sub_410920
.text:0041028C ; ---------------------------------------------------------------------------
.text:0041028C
.text:0041028C loc_41028C:                             ; CODE XREF: _sysconf+12↑j
.text:0041028C                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041028C                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0041028C                                         ; jumptable 0040FFF2 case 88
.text:00410291                 jmp     short loc_410230
.text:00410293 ; ---------------------------------------------------------------------------
.text:00410293
.text:00410293 loc_410293:                             ; CODE XREF: _sysconf+12↑j
.text:00410293                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:00410293                 mov     eax, 8          ; jumptable 67026652 case 101
.text:00410293                                         ; jumptable 0040FFF2 case 101
.text:00410298                 jmp     short loc_410230
.text:0041029A ; ---------------------------------------------------------------------------
.text:0041029A
.text:0041029A loc_41029A:                             ; CODE XREF: _sysconf+12↑j
.text:0041029A                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:0041029A                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0041029A                                         ; jumptable 0040FFF2 cases 87,104
.text:0041029F                 jmp     short loc_410230
.text:004102A1 ; ---------------------------------------------------------------------------
.text:004102A1
.text:004102A1 loc_4102A1:                             ; CODE XREF: _sysconf+12↑j
.text:004102A1                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102A1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:004102A1                                         ; jumptable 0040FFF2 case 105
.text:004102A6                 jmp     short loc_410230
.text:004102A8 ; ---------------------------------------------------------------------------
.text:004102A8
.text:004102A8 loc_4102A8:                             ; CODE XREF: _sysconf+12↑j
.text:004102A8                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102A8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:004102A8                                         ; jumptable 0040FFF2 cases 106,107
.text:004102AD                 jmp     short loc_410230
.text:004102AF ; ---------------------------------------------------------------------------
.text:004102AF
.text:004102AF loc_4102AF:                             ; CODE XREF: _sysconf+12↑j
.text:004102AF                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102AF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:004102AF                                         ; jumptable 0040FFF2 case 108
.text:004102B4                 jmp     loc_410230
.text:004102B9 ; ---------------------------------------------------------------------------
.text:004102B9
.text:004102B9 loc_4102B9:                             ; CODE XREF: _sysconf+12↑j
.text:004102B9                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102B9                 xor     eax, eax        ; jumptable 67026652 case 109
.text:004102B9                                         ; jumptable 0040FFF2 case 109
.text:004102BB                 jmp     loc_410230
.text:004102C0 ; ---------------------------------------------------------------------------
.text:004102C0
.text:004102C0 loc_4102C0:                             ; CODE XREF: _sysconf+12↑j
.text:004102C0                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102C0                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:004102C0                                         ; jumptable 0040FFF2 cases 102,111
.text:004102C5                 jmp     loc_410230
.text:004102CA ; ---------------------------------------------------------------------------
.text:004102CA
.text:004102CA loc_4102CA:                             ; CODE XREF: _sysconf+12↑j
.text:004102CA                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102CA                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:004102CA                                         ; jumptable 0040FFF2 cases 103,112
.text:004102CF                 jmp     loc_410230
.text:004102D4 ; ---------------------------------------------------------------------------
.text:004102D4
.text:004102D4 loc_4102D4:                             ; CODE XREF: _sysconf+12↑j
.text:004102D4                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102D4                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:004102D4                                         ; jumptable 0040FFF2 cases 110,113
.text:004102D9                 jmp     loc_410230
.text:004102DE ; ---------------------------------------------------------------------------
.text:004102DE
.text:004102DE loc_4102DE:                             ; CODE XREF: _sysconf+12↑j
.text:004102DE                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102DE                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:004102DE                                         ; jumptable 0040FFF2 case 114
.text:004102E3                 jmp     loc_410230
.text:004102E8 ; ---------------------------------------------------------------------------
.text:004102E8
.text:004102E8 loc_4102E8:                             ; CODE XREF: _sysconf+12↑j
.text:004102E8                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102E8                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:004102E8                                         ; jumptable 0040FFF2 cases 40,115
.text:004102ED                 jmp     loc_410230
.text:004102F2 ; ---------------------------------------------------------------------------
.text:004102F2
.text:004102F2 loc_4102F2:                             ; CODE XREF: _sysconf+12↑j
.text:004102F2                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102F2                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:004102F2                                         ; jumptable 0040FFF2 case 118
.text:004102F7                 jmp     loc_410230
.text:004102FC ; ---------------------------------------------------------------------------
.text:004102FC
.text:004102FC loc_4102FC:                             ; CODE XREF: _sysconf+12↑j
.text:004102FC                                         ; DATA XREF: _sysconf:jpt_40FFF2↑o
.text:004102FC                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:004102FC                                         ; jumptable 0040FFF2 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00410301                 mov     dword ptr [eax], 28h ; '('
.text:00410307                 jmp     loc_410220      ; jumptable 67026652 cases 41,116,117
.text:00410307 _sysconf        endp                    ; jumptable 0040FFF2 cases 41,116,117
.text:00410307
.text:00410307 ; ---------------------------------------------------------------------------
.text:0041030C                 align 10h
.text:00410310
.text:00410310 ; =============== S U B R O U T I N E =======================================
.text:00410310
.text:00410310
.text:00410310 sub_410310      proc near               ; CODE XREF: sub_40D620+134↑p
.text:00410310                                         ; sub_40D620+167↑p
.text:00410310
.text:00410310 var_1C          = dword ptr -1Ch
.text:00410310 var_18          = dword ptr -18h
.text:00410310 var_14          = dword ptr -14h
.text:00410310 arg_0           = dword ptr  4
.text:00410310 arg_4           = dword ptr  8
.text:00410310 arg_8           = dword ptr  0Ch
.text:00410310
.text:00410310                 push    edi
.text:00410311                 push    esi
.text:00410312                 push    ebx
.text:00410313                 sub     esp, 10h
.text:00410316                 mov     edi, [esp+1Ch+arg_8]
.text:0041031A                 mov     esi, [esp+1Ch+arg_0]
.text:0041031E                 mov     ebx, [esp+1Ch+arg_4]
.text:00410322                 cmp     edi, 0Fh
.text:00410325                 jbe     short loc_410370
.text:00410327                 mov     ecx, esi
.text:00410329                 neg     ecx
.text:0041032B                 and     ecx, 3
.text:0041032E                 sub     edi, ecx
.text:00410330                 mov     edx, ecx
.text:00410332                 test    ecx, ecx
.text:00410334                 jz      short loc_41034A
.text:00410336                 lea     esi, [esi+0]
.text:00410339                 lea     edi, [edi+0]
.text:00410340
.text:00410340 loc_410340:                             ; CODE XREF: sub_410310+38↓j
.text:00410340                 movzx   ecx, byte ptr [ebx]
.text:00410343                 inc     ebx
.text:00410344                 mov     [esi], cl
.text:00410346                 inc     esi
.text:00410347                 dec     edx
.text:00410348                 jnz     short loc_410340
.text:0041034A
.text:0041034A loc_41034A:                             ; CODE XREF: sub_410310+24↑j
.text:0041034A                 test    bl, 3
.text:0041034D                 jnz     short loc_410393
.text:0041034F                 mov     [esp+1Ch+var_18], ebx
.text:00410353                 mov     edx, edi
.text:00410355                 shr     edx, 2
.text:00410358                 mov     [esp+1Ch+var_14], edx
.text:0041035C                 mov     [esp+1Ch+var_1C], esi
.text:0041035F                 call    sub_4109A0
.text:00410364
.text:00410364 loc_410364:                             ; CODE XREF: sub_410310+98↓j
.text:00410364                 mov     edx, edi
.text:00410366                 and     edx, 0FFFFFFFCh
.text:00410369                 and     edi, 3
.text:0041036C                 add     ebx, edx
.text:0041036E                 add     esi, edx
.text:00410370
.text:00410370 loc_410370:                             ; CODE XREF: sub_410310+15↑j
.text:00410370                 test    edi, edi
.text:00410372                 mov     edx, edi
.text:00410374                 jz      short loc_41038A
.text:00410376                 lea     esi, [esi+0]
.text:00410379                 lea     edi, [edi+0]
.text:00410380
.text:00410380 loc_410380:                             ; CODE XREF: sub_410310+78↓j
.text:00410380                 movzx   ecx, byte ptr [ebx]
.text:00410383                 inc     ebx
.text:00410384                 mov     [esi], cl
.text:00410386                 inc     esi
.text:00410387                 dec     edx
.text:00410388                 jnz     short loc_410380
.text:0041038A
.text:0041038A loc_41038A:                             ; CODE XREF: sub_410310+64↑j
.text:0041038A                 add     esp, 10h
.text:0041038D                 mov     eax, esi
.text:0041038F                 pop     ebx
.text:00410390                 pop     esi
.text:00410391                 pop     edi
.text:00410392                 retn
.text:00410393 ; ---------------------------------------------------------------------------
.text:00410393
.text:00410393 loc_410393:                             ; CODE XREF: sub_410310+3D↑j
.text:00410393                 mov     [esp+1Ch+var_18], ebx
.text:00410397                 mov     ecx, edi
.text:00410399                 shr     ecx, 2
.text:0041039C                 mov     [esp+1Ch+var_14], ecx
.text:004103A0                 mov     [esp+1Ch+var_1C], esi
.text:004103A3                 call    sub_410AA0
.text:004103A8                 jmp     short loc_410364
.text:004103A8 sub_410310      endp
.text:004103A8
.text:004103A8 ; ---------------------------------------------------------------------------
.text:004103AA                 align 10h
.text:004103B0
.text:004103B0 ; =============== S U B R O U T I N E =======================================
.text:004103B0
.text:004103B0
.text:004103B0 sub_4103B0      proc near               ; CODE XREF: sub_40D990+17↑p
.text:004103B0
.text:004103B0 hFindFile       = dword ptr -0Ch
.text:004103B0 var_8           = dword ptr -8
.text:004103B0 var_4           = dword ptr -4
.text:004103B0 arg_0           = dword ptr  4
.text:004103B0
.text:004103B0                 sub     esp, 0Ch
.text:004103B3                 mov     [esp+0Ch+var_4], esi
.text:004103B7                 mov     esi, [esp+0Ch+arg_0]
.text:004103BB                 mov     [esp+0Ch+var_8], ebx
.text:004103BF                 test    esi, esi
.text:004103C1                 jz      short loc_410402
.text:004103C3                 mov     eax, [esi]
.text:004103C5                 cmp     eax, 0FFFFFFFFh
.text:004103C8                 jz      short loc_4103DF
.text:004103CA                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:004103CD                 call    FindClose
.text:004103D2                 sub     esp, 4
.text:004103D5                 test    eax, eax
.text:004103D7                 jz      short loc_4103F2
.text:004103D9
.text:004103D9 loc_4103D9:                             ; CODE XREF: sub_4103B0+50↓j
.text:004103D9                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004103DF
.text:004103DF loc_4103DF:                             ; CODE XREF: sub_4103B0+18↑j
.text:004103DF                 mov     dword ptr [esi+14h], 1
.text:004103E6
.text:004103E6 loc_4103E6:                             ; CODE XREF: sub_4103B0+5D↓j
.text:004103E6                 mov     ebx, [esp+0Ch+var_8]
.text:004103EA                 mov     esi, [esp+0Ch+var_4]
.text:004103EE                 add     esp, 0Ch
.text:004103F1                 retn
.text:004103F2 ; ---------------------------------------------------------------------------
.text:004103F2
.text:004103F2 loc_4103F2:                             ; CODE XREF: sub_4103B0+27↑j
.text:004103F2                 call    sub_40DE70
.text:004103F7                 mov     ebx, eax
.text:004103F9                 call    _errno
.text:004103FE                 mov     [eax], ebx
.text:00410400                 jmp     short loc_4103D9
.text:00410402 ; ---------------------------------------------------------------------------
.text:00410402
.text:00410402 loc_410402:                             ; CODE XREF: sub_4103B0+11↑j
.text:00410402                 call    _errno
.text:00410407                 mov     dword ptr [eax], 16h
.text:0041040D                 jmp     short loc_4103E6
.text:0041040D sub_4103B0      endp
.text:0041040D
.text:0041040D ; ---------------------------------------------------------------------------
.text:0041040F                 align 10h
.text:00410410 byte_410410     db 0                    ; DATA XREF: .data:Src↓o
.text:00410411 byte_410411     db 73h, 68h, 0          ; DATA XREF: .data:off_4140A4↓o
.text:00410414 ; const char aHome[]
.text:00410414 aHome           db 'HOME',0             ; DATA XREF: sub_410430+96↓o
.text:00410419 ; const char aShell[]
.text:00410419 aShell          db 'SHELL',0            ; DATA XREF: sub_410430+E2↓o
.text:0041041F ; const char aComspec[]
.text:0041041F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_410430:loc_4105F4↓o
.text:00410427 aC              db 'C:/',0              ; DATA XREF: sub_410430:loc_410615↓o
.text:0041042B                 align 10h
.text:00410430
.text:00410430 ; =============== S U B R O U T I N E =======================================
.text:00410430
.text:00410430
.text:00410430 ; int __cdecl sub_410430(char *, int, char *, int, int)
.text:00410430 sub_410430      proc near               ; CODE XREF: sub_40DB90+2A↑p
.text:00410430                                         ; sub_40FB70+2F↑p
.text:00410430
.text:00410430 Str             = dword ptr -1Ch
.text:00410430 Src             = dword ptr -18h
.text:00410430 Size            = dword ptr -14h
.text:00410430 var_10          = dword ptr -10h
.text:00410430 var_C           = dword ptr -0Ch
.text:00410430 var_8           = dword ptr -8
.text:00410430 var_4           = dword ptr -4
.text:00410430 arg_0           = dword ptr  4
.text:00410430 arg_4           = dword ptr  8
.text:00410430 arg_8           = dword ptr  0Ch
.text:00410430 arg_C           = dword ptr  10h
.text:00410430 arg_10          = dword ptr  14h
.text:00410430
.text:00410430                 sub     esp, 1Ch
.text:00410433                 mov     eax, [esp+1Ch+arg_0]
.text:00410437                 mov     [esp+1Ch+var_10], ebx
.text:0041043B                 mov     [esp+1Ch+var_C], esi
.text:0041043F                 test    eax, eax
.text:00410441                 mov     [esp+1Ch+var_8], edi
.text:00410445                 mov     [esp+1Ch+var_4], ebp
.text:00410449                 jz      short loc_410458
.text:0041044B                 cmp     byte ptr [eax], 0
.text:0041044E                 jz      short loc_410458
.text:00410450                 mov     ecx, [esp+1Ch+arg_C]
.text:00410454                 test    ecx, ecx
.text:00410456                 jnz     short loc_410480
.text:00410458
.text:00410458 loc_410458:                             ; CODE XREF: sub_410430+19↑j
.text:00410458                                         ; sub_410430+1E↑j ...
.text:00410458                 call    _errno
.text:0041045D                 mov     dword ptr [eax], 22h ; '"'
.text:00410463                 mov     eax, 0FFFFFFFFh
.text:00410468
.text:00410468 loc_410468:                             ; CODE XREF: sub_410430+1BF↓j
.text:00410468                 mov     ebx, [esp+1Ch+var_10]
.text:0041046C                 mov     esi, [esp+1Ch+var_C]
.text:00410470                 mov     edi, [esp+1Ch+var_8]
.text:00410474                 mov     ebp, [esp+1Ch+var_4]
.text:00410478                 add     esp, 1Ch
.text:0041047B                 retn
.text:0041047B ; ---------------------------------------------------------------------------
.text:0041047C                 align 10h
.text:00410480
.text:00410480 loc_410480:                             ; CODE XREF: sub_410430+26↑j
.text:00410480                 mov     [esp+1Ch+Str], eax ; Str
.text:00410483                 mov     ebx, eax
.text:00410485                 call    strlen
.text:0041048A                 lea     esi, [eax+1]
.text:0041048D                 cmp     esi, [esp+1Ch+arg_C]
.text:00410491                 ja      short loc_410458
.text:00410493                 mov     [esp+1Ch+Src], ebx ; Src
.text:00410497                 mov     edx, [esp+1Ch+arg_8]
.text:0041049B                 mov     [esp+1Ch+Size], esi ; Size
.text:0041049F                 mov     [esp+1Ch+Str], edx ; void *
.text:004104A2                 call    memcpy
.text:004104A7                 mov     ebp, [esp+1Ch+arg_4]
.text:004104AB                 mov     [ebp+0], eax
.text:004104AE                 call    sub_410E40
.text:004104B3                 mov     edi, [esp+1Ch+arg_4]
.text:004104B7                 mov     [edi+8], eax
.text:004104BA                 call    sub_410E30
.text:004104BF                 mov     ebx, [esp+1Ch+arg_4]
.text:004104C3                 mov     [ebx+0Ch], eax
.text:004104C6                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:004104CD                 call    getenv
.text:004104D2                 test    eax, eax
.text:004104D4                 mov     ebx, eax
.text:004104D6                 jz      loc_410615
.text:004104DC
.text:004104DC loc_4104DC:                             ; CODE XREF: sub_410430+1EA↓j
.text:004104DC                 mov     [esp+1Ch+Str], ebx ; Str
.text:004104DF                 call    strlen
.text:004104E4                 lea     ebp, [eax+esi+1]
.text:004104E8                 cmp     ebp, [esp+1Ch+arg_C]
.text:004104EC                 ja      loc_410458
.text:004104F2                 mov     [esp+1Ch+Src], ebx ; Src
.text:004104F6                 mov     ecx, [esp+1Ch+arg_8]
.text:004104FA                 lea     edi, [eax+1]
.text:004104FD                 mov     [esp+1Ch+Size], edi ; Size
.text:00410501                 add     ecx, esi
.text:00410503                 mov     [esp+1Ch+Str], ecx ; void *
.text:00410506                 call    memcpy
.text:0041050B                 mov     esi, [esp+1Ch+arg_4]
.text:0041050F                 mov     [esi+14h], eax
.text:00410512                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:00410519                 call    getenv
.text:0041051E                 test    eax, eax
.text:00410520                 mov     ebx, eax
.text:00410522                 jz      loc_4105F4
.text:00410528
.text:00410528 loc_410528:                             ; CODE XREF: sub_410430+1D4↓j
.text:00410528                                         ; sub_410430+1E0↓j
.text:00410528                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041052B                 call    strlen
.text:00410530                 lea     edi, [eax+ebp+1]
.text:00410534                 cmp     edi, [esp+1Ch+arg_C]
.text:00410538                 ja      loc_410458
.text:0041053E                 mov     [esp+1Ch+Src], ebx ; Src
.text:00410542                 mov     esi, [esp+1Ch+arg_8]
.text:00410546                 lea     ecx, [eax+1]
.text:00410549                 mov     [esp+1Ch+Size], ecx ; Size
.text:0041054D                 add     esi, ebp
.text:0041054F                 mov     [esp+1Ch+Str], esi ; void *
.text:00410552                 call    memcpy
.text:00410557                 mov     ebx, [esp+1Ch+arg_4]
.text:0041055B                 mov     [ebx+18h], eax
.text:0041055E                 call    sub_4107D0
.text:00410563                 mov     [esp+1Ch+Str], eax ; Str
.text:00410566                 mov     ebx, eax
.text:00410568                 call    strlen
.text:0041056D                 lea     esi, [eax+edi+1]
.text:00410571                 cmp     esi, [esp+1Ch+arg_C]
.text:00410575                 ja      loc_410458
.text:0041057B                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041057F                 mov     ecx, [esp+1Ch+arg_8]
.text:00410583                 lea     ebp, [eax+1]
.text:00410586                 mov     [esp+1Ch+Size], ebp ; Size
.text:0041058A                 add     ecx, edi
.text:0041058C                 mov     [esp+1Ch+Str], ecx ; void *
.text:0041058F                 call    memcpy
.text:00410594                 mov     edi, [esp+1Ch+arg_4]
.text:00410598                 mov     ebx, Src
.text:0041059E                 mov     [edi+10h], eax
.text:004105A1                 mov     [esp+1Ch+Str], ebx ; Str
.text:004105A4                 call    strlen
.text:004105A9                 lea     ebp, [eax+esi+1]
.text:004105AD                 cmp     ebp, [esp+1Ch+arg_C]
.text:004105B1                 ja      loc_410458
.text:004105B7                 mov     [esp+1Ch+Src], ebx ; Src
.text:004105BB                 mov     edi, [esp+1Ch+arg_8]
.text:004105BF                 lea     ecx, [eax+1]
.text:004105C2                 mov     [esp+1Ch+Size], ecx ; Size
.text:004105C6                 add     edi, esi
.text:004105C8                 mov     [esp+1Ch+Str], edi ; void *
.text:004105CB                 call    memcpy
.text:004105D0                 mov     esi, [esp+1Ch+arg_4]
.text:004105D4                 mov     [esi+4], eax
.text:004105D7                 mov     edx, [esp+1Ch+arg_8]
.text:004105DB                 mov     [esp+1Ch+Str], edx ; Str
.text:004105DE                 call    strlen
.text:004105E3                 mov     eax, [esp+1Ch+arg_4]
.text:004105E7                 mov     ebx, [esp+1Ch+arg_10]
.text:004105EB                 mov     [ebx], eax
.text:004105ED                 xor     eax, eax
.text:004105EF                 jmp     loc_410468
.text:004105F4 ; ---------------------------------------------------------------------------
.text:004105F4
.text:004105F4 loc_4105F4:                             ; CODE XREF: sub_410430+F2↑j
.text:004105F4                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:004105FB                 call    getenv
.text:00410600                 test    eax, eax
.text:00410602                 mov     ebx, eax
.text:00410604                 jnz     loc_410528
.text:0041060A                 mov     ebx, off_4140A4
.text:00410610                 jmp     loc_410528
.text:00410615 ; ---------------------------------------------------------------------------
.text:00410615
.text:00410615 loc_410615:                             ; CODE XREF: sub_410430+A6↑j
.text:00410615                 mov     ebx, offset aC  ; "C:/"
.text:0041061A                 jmp     loc_4104DC
.text:0041061A sub_410430      endp
.text:0041061A
.text:0041061A ; ---------------------------------------------------------------------------
.text:0041061F                 align 10h
.text:00410620
.text:00410620 ; =============== S U B R O U T I N E =======================================
.text:00410620
.text:00410620 ; Attributes: noreturn
.text:00410620
.text:00410620 sub_410620      proc near               ; CODE XREF: .text:0040F0F9↑p
.text:00410620                                         ; sub_410620↓j
.text:00410620                 jmp     short sub_410620
.text:00410620 sub_410620      endp
.text:00410620
.text:00410620 ; ---------------------------------------------------------------------------
.text:00410622                 align 10h
.text:00410630
.text:00410630 ; =============== S U B R O U T I N E =======================================
.text:00410630
.text:00410630
.text:00410630 sub_410630      proc near               ; CODE XREF: .text:0040EE55↑p
.text:00410630
.text:00410630 FileHandle      = dword ptr -1Ch
.text:00410630 dwFileOffsetLow = dword ptr -18h
.text:00410630 dwFileOffsetHigh= dword ptr -14h
.text:00410630 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00410630 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00410630 var_8           = dword ptr -8
.text:00410630 var_4           = dword ptr -4
.text:00410630 arg_0           = dword ptr  4
.text:00410630
.text:00410630                 sub     esp, 1Ch
.text:00410633                 mov     edx, [esp+1Ch+arg_0]
.text:00410637                 mov     [esp+1Ch+var_4], esi
.text:0041063B                 mov     [esp+1Ch+var_8], ebx
.text:0041063F                 mov     ebx, [edx+10h]
.text:00410642                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00410645                 call    _get_osfhandle
.text:0041064A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041064D                 mov     esi, eax
.text:0041064F                 call    _filelengthi64
.text:00410654                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00410658                 cdq
.text:00410659                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041065C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00410660                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00410668                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00410670                 call    UnlockFile
.text:00410675                 sub     esp, 14h
.text:00410678                 mov     ebx, [esp+1Ch+var_8]
.text:0041067C                 mov     esi, [esp+1Ch+var_4]
.text:00410680                 add     esp, 1Ch
.text:00410683                 retn
.text:00410683 sub_410630      endp
.text:00410683
.text:00410683 ; ---------------------------------------------------------------------------
.text:00410684                 align 10h
.text:00410690
.text:00410690 ; =============== S U B R O U T I N E =======================================
.text:00410690
.text:00410690
.text:00410690 ; int __cdecl sub_410690(int, char *Control)
.text:00410690 sub_410690      proc near               ; CODE XREF: .text:0040ED16↑p
.text:00410690                                         ; .text:0040ED66↑p ...
.text:00410690
.text:00410690 Str             = dword ptr -1Ch
.text:00410690 Val             = dword ptr -18h
.text:00410690 var_8           = dword ptr -8
.text:00410690 var_4           = dword ptr -4
.text:00410690 arg_0           = dword ptr  4
.text:00410690 Control         = dword ptr  8
.text:00410690
.text:00410690                 sub     esp, 1Ch
.text:00410693                 xor     eax, eax
.text:00410695                 mov     edx, [esp+1Ch+Control]
.text:00410699                 mov     [esp+1Ch+var_4], esi
.text:0041069D                 mov     esi, [esp+1Ch+arg_0]
.text:004106A1                 mov     [esp+1Ch+var_8], ebx
.text:004106A5                 mov     ebx, [esi]
.text:004106A7                 test    ebx, ebx
.text:004106A9                 jz      short loc_4106D8
.text:004106AB                 movzx   eax, byte ptr [edx]
.text:004106AE                 test    al, al
.text:004106B0                 jz      short loc_4106D0
.text:004106B2                 cmp     byte ptr [edx+1], 0
.text:004106B6                 jnz     short loc_410710
.text:004106B8                 movzx   ecx, byte ptr [ebx]
.text:004106BB                 mov     edx, ebx
.text:004106BD                 cmp     cl, al
.text:004106BF                 jz      short loc_410702
.text:004106C1                 test    cl, cl
.text:004106C3                 jnz     short loc_4106E4
.text:004106C5                 lea     esi, [esi+0]
.text:004106C9                 lea     edi, [edi+0]
.text:004106D0
.text:004106D0 loc_4106D0:                             ; CODE XREF: sub_410690+20↑j
.text:004106D0                                         ; sub_410690+74↓j
.text:004106D0                 mov     dword ptr [esi], 0
.text:004106D6
.text:004106D6 loc_4106D6:                             ; CODE XREF: sub_410690+7C↓j
.text:004106D6                 mov     eax, ebx
.text:004106D8
.text:004106D8 loc_4106D8:                             ; CODE XREF: sub_410690+19↑j
.text:004106D8                 mov     ebx, [esp+1Ch+var_8]
.text:004106DC                 mov     esi, [esp+1Ch+var_4]
.text:004106E0                 add     esp, 1Ch
.text:004106E3                 retn
.text:004106E4 ; ---------------------------------------------------------------------------
.text:004106E4
.text:004106E4 loc_4106E4:                             ; CODE XREF: sub_410690+33↑j
.text:004106E4                 movsx   edx, al
.text:004106E7                 mov     [esp+1Ch+Val], edx ; Val
.text:004106EB                 lea     edx, [ebx+1]
.text:004106EE                 mov     [esp+1Ch+Str], edx ; Str
.text:004106F1                 call    strchr
.text:004106F6                 lea     esi, [esi+0]
.text:004106F9                 lea     edi, [edi+0]
.text:00410700
.text:00410700 loc_410700:                             ; CODE XREF: sub_410690+8C↓j
.text:00410700                 mov     edx, eax
.text:00410702
.text:00410702 loc_410702:                             ; CODE XREF: sub_410690+2F↑j
.text:00410702                 test    edx, edx
.text:00410704                 jz      short loc_4106D0
.text:00410706                 mov     byte ptr [edx], 0
.text:00410709                 inc     edx
.text:0041070A                 mov     [esi], edx
.text:0041070C                 jmp     short loc_4106D6
.text:0041070C ; ---------------------------------------------------------------------------
.text:0041070E                 align 10h
.text:00410710
.text:00410710 loc_410710:                             ; CODE XREF: sub_410690+26↑j
.text:00410710                 mov     [esp+1Ch+Val], edx ; Control
.text:00410714                 mov     [esp+1Ch+Str], ebx ; Str
.text:00410717                 call    strpbrk
.text:0041071C                 jmp     short loc_410700
.text:0041071C sub_410690      endp
.text:0041071C
.text:0041071C ; ---------------------------------------------------------------------------
.text:0041071E                 align 10h
.text:00410720 ; const char aTmpf[]
.text:00410720 aTmpf           db 'tmpf',0             ; DATA XREF: sub_410730+20↓o
.text:00410725 ; const char aWBd[]
.text:00410725 aWBd            db 'w+bD',0             ; DATA XREF: sub_410730+5E↓o
.text:0041072A                 align 10h
.text:00410730
.text:00410730 ; =============== S U B R O U T I N E =======================================
.text:00410730
.text:00410730
.text:00410730 sub_410730      proc near               ; CODE XREF: sub_40F78F+A4↑p
.text:00410730
.text:00410730 FileHandle      = dword ptr -13Ch
.text:00410730 Format          = dword ptr -138h
.text:00410730 var_134         = dword ptr -134h
.text:00410730 var_130         = dword ptr -130h
.text:00410730 var_12C         = dword ptr -12Ch
.text:00410730 Buffer          = byte ptr -11Ch
.text:00410730 var_8           = dword ptr -8
.text:00410730 var_4           = dword ptr -4
.text:00410730
.text:00410730                 sub     esp, 13Ch
.text:00410736                 mov     [esp+13Ch+var_8], ebx
.text:0041073D                 lea     ebx, [esp+13Ch+Buffer]
.text:00410741                 mov     [esp+13Ch+var_4], esi
.text:00410748                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00410750                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00410758                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00410760                 mov     [esp+13Ch+Format], 104h ; int
.text:00410768                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041076B                 call    sub_410E80
.text:00410770                 xor     edx, edx
.text:00410772                 test    eax, eax
.text:00410774                 jnz     short loc_4107A6
.text:00410776                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00410779                 mov     [esp+13Ch+Format], 0 ; int
.text:00410781                 call    sub_411200
.text:00410786                 xor     edx, edx
.text:00410788                 mov     ebx, eax
.text:0041078A                 test    eax, eax
.text:0041078C                 js      short loc_4107A6
.text:0041078E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00410796                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00410799                 call    _fdopen
.text:0041079E                 test    eax, eax
.text:004107A0                 mov     esi, eax
.text:004107A2                 jz      short loc_4107BD
.text:004107A4
.text:004107A4 loc_4107A4:                             ; CODE XREF: sub_410730+95↓j
.text:004107A4                 mov     edx, esi
.text:004107A6
.text:004107A6 loc_4107A6:                             ; CODE XREF: sub_410730+44↑j
.text:004107A6                                         ; sub_410730+5C↑j
.text:004107A6                 mov     ebx, [esp+13Ch+var_8]
.text:004107AD                 mov     eax, edx
.text:004107AF                 mov     esi, [esp+13Ch+var_4]
.text:004107B6                 add     esp, 13Ch
.text:004107BC                 retn
.text:004107BD ; ---------------------------------------------------------------------------
.text:004107BD
.text:004107BD loc_4107BD:                             ; CODE XREF: sub_410730+72↑j
.text:004107BD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:004107C0                 call    _close_0
.text:004107C5                 jmp     short loc_4107A4
.text:004107C5 sub_410730      endp
.text:004107C5
.text:004107C5 ; ---------------------------------------------------------------------------
.text:004107C7                 align 10h
.text:004107D0
.text:004107D0 ; =============== S U B R O U T I N E =======================================
.text:004107D0
.text:004107D0
.text:004107D0 sub_4107D0      proc near               ; CODE XREF: sub_40FB70+B↑p
.text:004107D0                                         ; sub_410430+12E↑p
.text:004107D0
.text:004107D0 lpBuffer        = dword ptr -1Ch
.text:004107D0 pcbBuffer       = dword ptr -18h
.text:004107D0 var_8           = dword ptr -8
.text:004107D0 var_4           = dword ptr -4
.text:004107D0
.text:004107D0                 sub     esp, 1Ch
.text:004107D3                 lea     edx, [esp+1Ch+var_8]
.text:004107D7                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:004107DB                 mov     [esp+1Ch+var_4], ebx
.text:004107DF                 mov     [esp+1Ch+var_8], 101h
.text:004107E7                 mov     [esp+1Ch+lpBuffer], offset byte_415D10 ; lpBuffer
.text:004107EE                 call    GetUserNameA
.text:004107F3                 sub     esp, 8
.text:004107F6                 mov     edx, offset byte_415D10
.text:004107FB                 test    eax, eax
.text:004107FD                 jz      short loc_410809
.text:004107FF
.text:004107FF loc_4107FF:                             ; CODE XREF: sub_4107D0+49↓j
.text:004107FF                 mov     ebx, [esp+1Ch+var_4]
.text:00410803                 mov     eax, edx
.text:00410805                 add     esp, 1Ch
.text:00410808                 retn
.text:00410809 ; ---------------------------------------------------------------------------
.text:00410809
.text:00410809 loc_410809:                             ; CODE XREF: sub_4107D0+2D↑j
.text:00410809                 call    sub_40DE70
.text:0041080E                 mov     ebx, eax
.text:00410810                 call    _errno
.text:00410815                 mov     [eax], ebx
.text:00410817                 xor     edx, edx
.text:00410819                 jmp     short loc_4107FF
.text:00410819 sub_4107D0      endp
.text:00410819
.text:00410819 ; ---------------------------------------------------------------------------
.text:0041081B                 align 10h
.text:00410820
.text:00410820 ; =============== S U B R O U T I N E =======================================
.text:00410820
.text:00410820
.text:00410820 sub_410820      proc near               ; CODE XREF: _sysconf+297↑j
.text:00410820
.text:00410820 lpSystemInfo    = dword ptr -0Ch
.text:00410820 var_4           = dword ptr -4
.text:00410820
.text:00410820                 sub     esp, 0Ch
.text:00410823                 mov     [esp+0Ch+var_4], edi
.text:00410827                 mov     edi, ds:dword_415E20
.text:0041082D                 test    edi, edi
.text:0041082F                 mov     eax, edi
.text:00410831                 jz      short loc_410840
.text:00410833
.text:00410833 loc_410833:                             ; CODE XREF: sub_410820+48↓j
.text:00410833                 mov     eax, [edi+14h]
.text:00410836                 mov     edi, [esp+0Ch+var_4]
.text:0041083A                 add     esp, 0Ch
.text:0041083D                 retn
.text:0041083D ; ---------------------------------------------------------------------------
.text:0041083E                 align 10h
.text:00410840
.text:00410840 loc_410840:                             ; CODE XREF: sub_410820+11↑j
.text:00410840                 cld
.text:00410841                 mov     edi, offset SystemInfo
.text:00410846                 mov     ecx, 9
.text:0041084B                 mov     ds:dword_415E20, edi
.text:00410851                 rep stosd
.text:00410853                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041085A                 call    GetSystemInfo
.text:0041085F                 mov     edi, ds:dword_415E20
.text:00410865                 sub     esp, 4
.text:00410868                 jmp     short loc_410833
.text:00410868 sub_410820      endp
.text:00410868
.text:00410868 ; ---------------------------------------------------------------------------
.text:0041086A                 align 10h
.text:00410870
.text:00410870 ; =============== S U B R O U T I N E =======================================
.text:00410870
.text:00410870
.text:00410870 sub_410870      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00410870
.text:00410870 lpSystemInfo    = dword ptr -0Ch
.text:00410870 var_4           = dword ptr -4
.text:00410870
.text:00410870                 sub     esp, 0Ch
.text:00410873                 mov     [esp+0Ch+var_4], edi
.text:00410877                 mov     edi, ds:dword_415E20
.text:0041087D                 test    edi, edi
.text:0041087F                 mov     eax, edi
.text:00410881                 jz      short loc_410890
.text:00410883
.text:00410883 loc_410883:                             ; CODE XREF: sub_410870+48↓j
.text:00410883                 mov     eax, [edi+14h]
.text:00410886                 mov     edi, [esp+0Ch+var_4]
.text:0041088A                 add     esp, 0Ch
.text:0041088D                 retn
.text:0041088D ; ---------------------------------------------------------------------------
.text:0041088E                 align 10h
.text:00410890
.text:00410890 loc_410890:                             ; CODE XREF: sub_410870+11↑j
.text:00410890                 cld
.text:00410891                 mov     edi, offset SystemInfo
.text:00410896                 mov     ecx, 9
.text:0041089B                 mov     ds:dword_415E20, edi
.text:004108A1                 rep stosd
.text:004108A3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004108AA                 call    GetSystemInfo
.text:004108AF                 mov     edi, ds:dword_415E20
.text:004108B5                 sub     esp, 4
.text:004108B8                 jmp     short loc_410883
.text:004108B8 sub_410870      endp
.text:004108B8
.text:004108B8 ; ---------------------------------------------------------------------------
.text:004108BA                 align 10h
.text:004108C0
.text:004108C0 ; =============== S U B R O U T I N E =======================================
.text:004108C0
.text:004108C0
.text:004108C0 sub_4108C0      proc near               ; CODE XREF: _sysconf+29F↑j
.text:004108C0
.text:004108C0 lpSystemInfo    = dword ptr -0Ch
.text:004108C0 var_4           = dword ptr -4
.text:004108C0
.text:004108C0                 sub     esp, 0Ch
.text:004108C3                 mov     [esp+0Ch+var_4], edi
.text:004108C7                 mov     edi, ds:dword_415E20
.text:004108CD                 test    edi, edi
.text:004108CF                 mov     eax, edi
.text:004108D1                 jz      short loc_4108E8
.text:004108D3
.text:004108D3 loc_4108D3:                             ; CODE XREF: sub_4108C0+50↓j
.text:004108D3                 mov     eax, [edi+0Ch]
.text:004108D6                 xor     edx, edx
.text:004108D8                 mov     ecx, [edi+8]
.text:004108DB                 sub     eax, ecx
.text:004108DD                 div     dword ptr [edi+4]
.text:004108E0                 mov     edi, [esp+0Ch+var_4]
.text:004108E4                 add     esp, 0Ch
.text:004108E7                 retn
.text:004108E8 ; ---------------------------------------------------------------------------
.text:004108E8
.text:004108E8 loc_4108E8:                             ; CODE XREF: sub_4108C0+11↑j
.text:004108E8                 cld
.text:004108E9                 mov     edi, offset SystemInfo
.text:004108EE                 mov     ecx, 9
.text:004108F3                 mov     ds:dword_415E20, edi
.text:004108F9                 rep stosd
.text:004108FB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00410902                 call    GetSystemInfo
.text:00410907                 mov     edi, ds:dword_415E20
.text:0041090D                 sub     esp, 4
.text:00410910                 jmp     short loc_4108D3
.text:00410910 sub_4108C0      endp
.text:00410910
.text:00410910 ; ---------------------------------------------------------------------------
.text:00410912                 align 10h
.text:00410920
.text:00410920 ; =============== S U B R O U T I N E =======================================
.text:00410920
.text:00410920
.text:00410920 sub_410920      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:00410920
.text:00410920 lpSystemInfo    = dword ptr -0Ch
.text:00410920 var_4           = dword ptr -4
.text:00410920
.text:00410920                 sub     esp, 0Ch
.text:00410923                 mov     [esp+0Ch+var_4], edi
.text:00410927                 mov     edi, ds:dword_415E20
.text:0041092D                 test    edi, edi
.text:0041092F                 mov     eax, edi
.text:00410931                 jz      short loc_410948
.text:00410933
.text:00410933 loc_410933:                             ; CODE XREF: sub_410920+50↓j
.text:00410933                 mov     edx, [edi+8]
.text:00410936                 mov     eax, [edi+0Ch]
.text:00410939                 sub     eax, edx
.text:0041093B                 xor     edx, edx
.text:0041093D                 div     dword ptr [edi+4]
.text:00410940                 mov     edi, [esp+0Ch+var_4]
.text:00410944                 add     esp, 0Ch
.text:00410947                 retn
.text:00410948 ; ---------------------------------------------------------------------------
.text:00410948
.text:00410948 loc_410948:                             ; CODE XREF: sub_410920+11↑j
.text:00410948                 cld
.text:00410949                 mov     edi, offset SystemInfo
.text:0041094E                 mov     ecx, 9
.text:00410953                 mov     ds:dword_415E20, edi
.text:00410959                 rep stosd
.text:0041095B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00410962                 call    GetSystemInfo
.text:00410967                 mov     edi, ds:dword_415E20
.text:0041096D                 sub     esp, 4
.text:00410970                 jmp     short loc_410933
.text:00410970 sub_410920      endp
.text:00410970
.text:00410970 ; ---------------------------------------------------------------------------
.text:00410972                 align 10h
.text:00410980
.text:00410980 ; =============== S U B R O U T I N E =======================================
.text:00410980
.text:00410980
.text:00410980 sub_410980      proc near               ; CODE XREF: _sysconf:loc_41023B↑p
.text:00410980                                         ; _sysconf:loc_41024E↑p
.text:00410980                 mov     edx, 40h ; '@'
.text:00410985                 mov     eax, 40h ; '@'
.text:0041098A                 mov     ds:dword_415F00, edx
.text:00410990                 retn
.text:00410990 sub_410980      endp
.text:00410990
.text:00410990 ; ---------------------------------------------------------------------------
.text:00410991                 align 10h
.text:004109A0
.text:004109A0 ; =============== S U B R O U T I N E =======================================
.text:004109A0
.text:004109A0
.text:004109A0 sub_4109A0      proc near               ; CODE XREF: sub_410310+4F↑p
.text:004109A0
.text:004109A0 var_8           = dword ptr -8
.text:004109A0 var_4           = dword ptr -4
.text:004109A0 arg_0           = dword ptr  4
.text:004109A0 arg_4           = dword ptr  8
.text:004109A0 arg_8           = dword ptr  0Ch
.text:004109A0
.text:004109A0                 sub     esp, 8
.text:004109A3                 mov     ecx, [esp+8+arg_0]
.text:004109A7                 mov     [esp+8+var_8], ebx
.text:004109AA                 mov     ebx, [esp+8+arg_8]
.text:004109AE                 mov     [esp+8+var_4], esi
.text:004109B2                 mov     edx, [esp+8+arg_4]
.text:004109B6                 mov     eax, ebx
.text:004109B8                 and     eax, 7
.text:004109BB                 cmp     eax, 7          ; switch 8 cases
.text:004109BE                 ja      short def_4109C0 ; jumptable 004109C0 default case
.text:004109C0                 jmp     ds:jpt_4109C0[eax*4] ; switch jump
.text:004109C0 ; ---------------------------------------------------------------------------
.text:004109C7                 align 4
.text:004109C8 jpt_4109C0      dd offset loc_410A4A    ; DATA XREF: sub_4109A0+20↑r
.text:004109C8                 dd offset loc_410A51    ; jump table for switch statement
.text:004109C8                 dd offset loc_4109E8
.text:004109C8                 dd offset loc_410A59
.text:004109C8                 dd offset loc_410A66
.text:004109C8                 dd offset loc_410A73
.text:004109C8                 dd offset loc_410A80
.text:004109C8                 dd offset loc_410A8D
.text:004109E8 ; ---------------------------------------------------------------------------
.text:004109E8
.text:004109E8 loc_4109E8:                             ; CODE XREF: sub_4109A0+20↑j
.text:004109E8                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:004109E8                 mov     eax, [edx]      ; jumptable 004109C0 case 2
.text:004109EA                 sub     ecx, 1Ch
.text:004109ED                 add     ebx, 6
.text:004109F0                 sub     edx, 18h
.text:004109F3                 lea     esi, [esi+0]
.text:004109F9                 lea     edi, [edi+0]
.text:00410A00
.text:00410A00 loc_410A00:                             ; CODE XREF: sub_4109A0+A8↓j
.text:00410A00                 mov     esi, [edx+1Ch]
.text:00410A03                 add     edx, 20h ; ' '
.text:00410A06                 mov     [ecx+1Ch], eax
.text:00410A09                 add     ecx, 20h ; ' '
.text:00410A0C                 sub     ebx, 8
.text:00410A0F                 jnz     short def_4109C0 ; jumptable 004109C0 default case
.text:00410A11                 mov     [ecx], esi
.text:00410A13                 mov     ebx, [esp+8+var_8]
.text:00410A16                 mov     esi, [esp+8+var_4]
.text:00410A1A                 add     esp, 8
.text:00410A1D                 retn
.text:00410A1D ; ---------------------------------------------------------------------------
.text:00410A1E                 align 10h
.text:00410A20
.text:00410A20 def_4109C0:                             ; CODE XREF: sub_4109A0+1E↑j
.text:00410A20                                         ; sub_4109A0+6F↑j ...
.text:00410A20                 mov     eax, [edx]      ; jumptable 004109C0 default case
.text:00410A22                 mov     [ecx], esi
.text:00410A24
.text:00410A24 loc_410A24:                             ; CODE XREF: sub_4109A0+AF↓j
.text:00410A24                 mov     esi, [edx+4]
.text:00410A27                 mov     [ecx+4], eax
.text:00410A2A
.text:00410A2A loc_410A2A:                             ; CODE XREF: sub_4109A0+F6↓j
.text:00410A2A                 mov     eax, [edx+8]
.text:00410A2D                 mov     [ecx+8], esi
.text:00410A30
.text:00410A30 loc_410A30:                             ; CODE XREF: sub_4109A0+EB↓j
.text:00410A30                 mov     esi, [edx+0Ch]
.text:00410A33                 mov     [ecx+0Ch], eax
.text:00410A36
.text:00410A36 loc_410A36:                             ; CODE XREF: sub_4109A0+DE↓j
.text:00410A36                 mov     eax, [edx+10h]
.text:00410A39                 mov     [ecx+10h], esi
.text:00410A3C
.text:00410A3C loc_410A3C:                             ; CODE XREF: sub_4109A0+D1↓j
.text:00410A3C                 mov     esi, [edx+14h]
.text:00410A3F                 mov     [ecx+14h], eax
.text:00410A42
.text:00410A42 loc_410A42:                             ; CODE XREF: sub_4109A0+C4↓j
.text:00410A42                 mov     eax, [edx+18h]
.text:00410A45                 mov     [ecx+18h], esi
.text:00410A48                 jmp     short loc_410A00
.text:00410A4A ; ---------------------------------------------------------------------------
.text:00410A4A
.text:00410A4A loc_410A4A:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A4A                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A4A                 mov     eax, [edx]      ; jumptable 004109C0 case 0
.text:00410A4C                 sub     ecx, 4
.text:00410A4F                 jmp     short loc_410A24
.text:00410A51 ; ---------------------------------------------------------------------------
.text:00410A51
.text:00410A51 loc_410A51:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A51                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A51                 mov     esi, [edx]      ; jumptable 004109C0 case 1
.text:00410A53                 dec     ebx
.text:00410A54                 add     edx, 4
.text:00410A57                 jmp     short def_4109C0 ; jumptable 004109C0 default case
.text:00410A59 ; ---------------------------------------------------------------------------
.text:00410A59
.text:00410A59 loc_410A59:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A59                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A59                 mov     esi, [edx]      ; jumptable 004109C0 case 3
.text:00410A5B                 sub     ecx, 18h
.text:00410A5E                 add     ebx, 5
.text:00410A61                 sub     edx, 14h
.text:00410A64                 jmp     short loc_410A42
.text:00410A66 ; ---------------------------------------------------------------------------
.text:00410A66
.text:00410A66 loc_410A66:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A66                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A66                 mov     eax, [edx]      ; jumptable 004109C0 case 4
.text:00410A68                 sub     ecx, 14h
.text:00410A6B                 add     ebx, 4
.text:00410A6E                 sub     edx, 10h
.text:00410A71                 jmp     short loc_410A3C
.text:00410A73 ; ---------------------------------------------------------------------------
.text:00410A73
.text:00410A73 loc_410A73:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A73                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A73                 mov     esi, [edx]      ; jumptable 004109C0 case 5
.text:00410A75                 sub     ecx, 10h
.text:00410A78                 add     ebx, 3
.text:00410A7B                 sub     edx, 0Ch
.text:00410A7E                 jmp     short loc_410A36
.text:00410A80 ; ---------------------------------------------------------------------------
.text:00410A80
.text:00410A80 loc_410A80:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A80                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A80                 mov     eax, [edx]      ; jumptable 004109C0 case 6
.text:00410A82                 sub     ecx, 0Ch
.text:00410A85                 add     ebx, 2
.text:00410A88                 sub     edx, 8
.text:00410A8B                 jmp     short loc_410A30
.text:00410A8D ; ---------------------------------------------------------------------------
.text:00410A8D
.text:00410A8D loc_410A8D:                             ; CODE XREF: sub_4109A0+20↑j
.text:00410A8D                                         ; DATA XREF: sub_4109A0:jpt_4109C0↑o
.text:00410A8D                 mov     esi, [edx]      ; jumptable 004109C0 case 7
.text:00410A8F                 sub     ecx, 8
.text:00410A92                 inc     ebx
.text:00410A93                 sub     edx, 4
.text:00410A96                 jmp     short loc_410A2A
.text:00410A96 sub_4109A0      endp
.text:00410A96
.text:00410A96 ; ---------------------------------------------------------------------------
.text:00410A98                 align 10h
.text:00410AA0
.text:00410AA0 ; =============== S U B R O U T I N E =======================================
.text:00410AA0
.text:00410AA0
.text:00410AA0 sub_410AA0      proc near               ; CODE XREF: sub_410310+93↑p
.text:00410AA0
.text:00410AA0 var_1C          = dword ptr -1Ch
.text:00410AA0 var_18          = dword ptr -18h
.text:00410AA0 var_14          = dword ptr -14h
.text:00410AA0 arg_0           = dword ptr  4
.text:00410AA0 arg_4           = dword ptr  8
.text:00410AA0 arg_8           = dword ptr  0Ch
.text:00410AA0
.text:00410AA0                 push    ebp
.text:00410AA1                 push    edi
.text:00410AA2                 push    esi
.text:00410AA3                 push    ebx
.text:00410AA4                 sub     esp, 0Ch
.text:00410AA7                 mov     edx, [esp+1Ch+arg_4]
.text:00410AAB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00410AB3                 mov     eax, [esp+1Ch+arg_8]
.text:00410AB7                 mov     esi, [esp+1Ch+arg_0]
.text:00410ABB                 mov     ecx, edx
.text:00410ABD                 and     ecx, 3
.text:00410AC0                 and     eax, 3
.text:00410AC3                 shl     ecx, 3
.text:00410AC6                 and     edx, 0FFFFFFFCh
.text:00410AC9                 sub     [esp+1Ch+var_14], ecx
.text:00410ACD                 cmp     eax, 1
.text:00410AD0                 mov     [esp+1Ch+var_18], ecx
.text:00410AD4                 jz      loc_410BC0
.text:00410ADA                 cmp     eax, 1
.text:00410ADD                 jb      loc_410BB0
.text:00410AE3                 cmp     eax, 2
.text:00410AE6                 jz      loc_410B94
.text:00410AEC                 cmp     eax, 3
.text:00410AEF                 jz      loc_410B83
.text:00410AF5
.text:00410AF5 loc_410AF5:                             ; CODE XREF: sub_410AA0+C7↓j
.text:00410AF5                                         ; sub_410AA0+12C↓j
.text:00410AF5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410AFA                 mov     eax, edi
.text:00410AFC                 mov     ebx, [edx]
.text:00410AFE                 shr     ebp, cl
.text:00410B00                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410B05                 shl     eax, cl
.text:00410B07                 or      ebp, eax
.text:00410B09                 mov     [esi], ebp
.text:00410B0B
.text:00410B0B loc_410B0B:                             ; CODE XREF: sub_410AA0+11B↓j
.text:00410B0B                 mov     ecx, [edx+4]
.text:00410B0E                 mov     ebp, ebx
.text:00410B10                 mov     [esp+1Ch+var_1C], ecx
.text:00410B13                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410B18                 shr     edi, cl
.text:00410B1A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410B1F                 shl     ebp, cl
.text:00410B21                 or      edi, ebp
.text:00410B23                 mov     [esi+4], edi
.text:00410B26
.text:00410B26 loc_410B26:                             ; CODE XREF: sub_410AA0+F2↓j
.text:00410B26                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410B2B                 mov     edi, [esp+1Ch+var_1C]
.text:00410B2E                 mov     ebp, [edx+8]
.text:00410B31                 shr     ebx, cl
.text:00410B33                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410B38                 shl     edi, cl
.text:00410B3A                 or      ebx, edi
.text:00410B3C                 mov     [esi+8], ebx
.text:00410B3F
.text:00410B3F loc_410B3F:                             ; CODE XREF: sub_410AA0+107↓j
.text:00410B3F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410B44                 mov     ebx, ebp
.text:00410B46                 mov     edi, [edx+0Ch]
.text:00410B49                 add     edx, 10h
.text:00410B4C                 shr     [esp+1Ch+var_1C], cl
.text:00410B4F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410B54                 shl     ebx, cl
.text:00410B56                 or      [esp+1Ch+var_1C], ebx
.text:00410B59                 mov     ebx, [esp+1Ch+var_1C]
.text:00410B5C                 mov     [esi+0Ch], ebx
.text:00410B5F                 add     esi, 10h
.text:00410B62                 sub     [esp+1Ch+arg_8], 4
.text:00410B67                 jnz     short loc_410AF5
.text:00410B69                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00410B6E                 shr     ebp, cl
.text:00410B70                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00410B75                 shl     edi, cl
.text:00410B77                 or      ebp, edi
.text:00410B79                 mov     [esi], ebp
.text:00410B7B                 add     esp, 0Ch
.text:00410B7E                 pop     ebx
.text:00410B7F                 pop     esi
.text:00410B80                 pop     edi
.text:00410B81                 pop     ebp
.text:00410B82                 retn
.text:00410B83 ; ---------------------------------------------------------------------------
.text:00410B83
.text:00410B83 loc_410B83:                             ; CODE XREF: sub_410AA0+4F↑j
.text:00410B83                 inc     [esp+1Ch+arg_8]
.text:00410B87                 sub     esi, 8
.text:00410B8A                 mov     eax, [edx+4]
.text:00410B8D                 mov     ebx, [edx]
.text:00410B8F                 mov     [esp+1Ch+var_1C], eax
.text:00410B92                 jmp     short loc_410B26
.text:00410B94 ; ---------------------------------------------------------------------------
.text:00410B94
.text:00410B94 loc_410B94:                             ; CODE XREF: sub_410AA0+46↑j
.text:00410B94                 add     [esp+1Ch+arg_8], 2
.text:00410B99                 sub     esi, 0Ch
.text:00410B9C                 mov     ecx, [edx]
.text:00410B9E                 mov     ebp, [edx+4]
.text:00410BA1                 sub     edx, 4
.text:00410BA4                 mov     [esp+1Ch+var_1C], ecx
.text:00410BA7                 jmp     short loc_410B3F
.text:00410BA7 ; ---------------------------------------------------------------------------
.text:00410BA9                 align 10h
.text:00410BB0
.text:00410BB0 loc_410BB0:                             ; CODE XREF: sub_410AA0+3D↑j
.text:00410BB0                 mov     edi, [edx]
.text:00410BB2                 sub     esi, 4
.text:00410BB5                 mov     ebx, [edx+4]
.text:00410BB8                 add     edx, 4
.text:00410BBB                 jmp     loc_410B0B
.text:00410BC0 ; ---------------------------------------------------------------------------
.text:00410BC0
.text:00410BC0 loc_410BC0:                             ; CODE XREF: sub_410AA0+34↑j
.text:00410BC0                 dec     [esp+1Ch+arg_8]
.text:00410BC4                 mov     ebp, [edx]
.text:00410BC6                 mov     edi, [edx+4]
.text:00410BC9                 add     edx, 8
.text:00410BCC                 jmp     loc_410AF5
.text:00410BCC sub_410AA0      endp
.text:00410BCC
.text:00410BD1 ; ---------------------------------------------------------------------------
.text:00410BD1                 jmp     short loc_410BE0
.text:00410BD1 ; ---------------------------------------------------------------------------
.text:00410BD3                 align 10h
.text:00410BE0
.text:00410BE0 loc_410BE0:                             ; CODE XREF: .text:00410BD1↑j
.text:00410BE0                 sub     esp, 8
.text:00410BE3                 mov     ecx, [esp+0Ch]
.text:00410BE7                 mov     [esp+4], esi
.text:00410BEB                 mov     esi, [esp+14h]
.text:00410BEF                 mov     [esp], ebx
.text:00410BF2                 mov     edx, [esp+10h]
.text:00410BF6                 mov     eax, esi
.text:00410BF8                 and     eax, 7
.text:00410BFB                 cmp     eax, 7          ; switch 8 cases
.text:00410BFE                 ja      short def_410C00 ; jumptable 00410C00 default case
.text:00410C00                 jmp     ds:jpt_410C00[eax*4] ; switch jump
.text:00410C00 ; ---------------------------------------------------------------------------
.text:00410C07                 align 4
.text:00410C08 jpt_410C00      dd offset loc_410C8C    ; DATA XREF: .text:00410C00↑r
.text:00410C08                 dd offset loc_410C97    ; jump table for switch statement
.text:00410C08                 dd offset loc_410C28
.text:00410C08                 dd offset loc_410CA3
.text:00410C08                 dd offset loc_410CB1
.text:00410C08                 dd offset loc_410CBF
.text:00410C08                 dd offset loc_410CCD
.text:00410C08                 dd offset loc_410CDB
.text:00410C28 ; ---------------------------------------------------------------------------
.text:00410C28
.text:00410C28 loc_410C28:                             ; CODE XREF: .text:00410C00↑j
.text:00410C28                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410C28                 sub     edx, 8          ; jumptable 00410C00 case 2
.text:00410C2B                 sub     ecx, 4
.text:00410C2E                 mov     eax, [edx+4]
.text:00410C31                 add     esi, 6
.text:00410C34                 lea     esi, [esi+0]
.text:00410C3A                 lea     edi, [edi+0]
.text:00410C40
.text:00410C40 loc_410C40:                             ; CODE XREF: .text:00410C8A↓j
.text:00410C40                 mov     ebx, [edx]
.text:00410C42                 sub     edx, 20h ; ' '
.text:00410C45                 mov     [ecx], eax
.text:00410C47                 sub     ecx, 20h ; ' '
.text:00410C4A                 sub     esi, 8
.text:00410C4D                 jnz     short def_410C00 ; jumptable 00410C00 default case
.text:00410C4F                 mov     [ecx+1Ch], ebx
.text:00410C52                 mov     ebx, [esp]
.text:00410C55                 mov     esi, [esp+4]
.text:00410C59                 add     esp, 8
.text:00410C5C                 retn
.text:00410C5C ; ---------------------------------------------------------------------------
.text:00410C5D                 align 10h
.text:00410C60
.text:00410C60 def_410C00:                             ; CODE XREF: .text:00410BFE↑j
.text:00410C60                                         ; .text:00410C4D↑j ...
.text:00410C60                 mov     eax, [edx+1Ch]  ; jumptable 00410C00 default case
.text:00410C63                 mov     [ecx+1Ch], ebx
.text:00410C66
.text:00410C66 loc_410C66:                             ; CODE XREF: .text:00410C95↓j
.text:00410C66                 mov     ebx, [edx+18h]
.text:00410C69                 mov     [ecx+18h], eax
.text:00410C6C
.text:00410C6C loc_410C6C:                             ; CODE XREF: .text:00410CE5↓j
.text:00410C6C                 mov     eax, [edx+14h]
.text:00410C6F                 mov     [ecx+14h], ebx
.text:00410C72
.text:00410C72 loc_410C72:                             ; CODE XREF: .text:00410CD9↓j
.text:00410C72                 mov     ebx, [edx+10h]
.text:00410C75                 mov     [ecx+10h], eax
.text:00410C78
.text:00410C78 loc_410C78:                             ; CODE XREF: .text:00410CCB↓j
.text:00410C78                 mov     eax, [edx+0Ch]
.text:00410C7B                 mov     [ecx+0Ch], ebx
.text:00410C7E
.text:00410C7E loc_410C7E:                             ; CODE XREF: .text:00410CBD↓j
.text:00410C7E                 mov     ebx, [edx+8]
.text:00410C81                 mov     [ecx+8], eax
.text:00410C84
.text:00410C84 loc_410C84:                             ; CODE XREF: .text:00410CAF↓j
.text:00410C84                 mov     eax, [edx+4]
.text:00410C87                 mov     [ecx+4], ebx
.text:00410C8A                 jmp     short loc_410C40
.text:00410C8C ; ---------------------------------------------------------------------------
.text:00410C8C
.text:00410C8C loc_410C8C:                             ; CODE XREF: .text:00410C00↑j
.text:00410C8C                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410C8C                 sub     edx, 20h ; ' '  ; jumptable 00410C00 case 0
.text:00410C8F                 sub     ecx, 1Ch
.text:00410C92                 mov     eax, [edx+1Ch]
.text:00410C95                 jmp     short loc_410C66
.text:00410C97 ; ---------------------------------------------------------------------------
.text:00410C97
.text:00410C97 loc_410C97:                             ; CODE XREF: .text:00410C00↑j
.text:00410C97                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410C97                 sub     edx, 24h ; '$'  ; jumptable 00410C00 case 1
.text:00410C9A                 sub     ecx, 20h ; ' '
.text:00410C9D                 mov     ebx, [edx+20h]
.text:00410CA0                 dec     esi
.text:00410CA1                 jmp     short def_410C00 ; jumptable 00410C00 default case
.text:00410CA3 ; ---------------------------------------------------------------------------
.text:00410CA3
.text:00410CA3 loc_410CA3:                             ; CODE XREF: .text:00410C00↑j
.text:00410CA3                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410CA3                 sub     edx, 0Ch        ; jumptable 00410C00 case 3
.text:00410CA6                 sub     ecx, 8
.text:00410CA9                 mov     ebx, [edx+8]
.text:00410CAC                 add     esi, 5
.text:00410CAF                 jmp     short loc_410C84
.text:00410CB1 ; ---------------------------------------------------------------------------
.text:00410CB1
.text:00410CB1 loc_410CB1:                             ; CODE XREF: .text:00410C00↑j
.text:00410CB1                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410CB1                 sub     edx, 10h        ; jumptable 00410C00 case 4
.text:00410CB4                 sub     ecx, 0Ch
.text:00410CB7                 mov     eax, [edx+0Ch]
.text:00410CBA                 add     esi, 4
.text:00410CBD                 jmp     short loc_410C7E
.text:00410CBF ; ---------------------------------------------------------------------------
.text:00410CBF
.text:00410CBF loc_410CBF:                             ; CODE XREF: .text:00410C00↑j
.text:00410CBF                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410CBF                 sub     edx, 14h        ; jumptable 00410C00 case 5
.text:00410CC2                 sub     ecx, 10h
.text:00410CC5                 mov     ebx, [edx+10h]
.text:00410CC8                 add     esi, 3
.text:00410CCB                 jmp     short loc_410C78
.text:00410CCD ; ---------------------------------------------------------------------------
.text:00410CCD
.text:00410CCD loc_410CCD:                             ; CODE XREF: .text:00410C00↑j
.text:00410CCD                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410CCD                 sub     edx, 18h        ; jumptable 00410C00 case 6
.text:00410CD0                 sub     ecx, 14h
.text:00410CD3                 mov     eax, [edx+14h]
.text:00410CD6                 add     esi, 2
.text:00410CD9                 jmp     short loc_410C72
.text:00410CDB ; ---------------------------------------------------------------------------
.text:00410CDB
.text:00410CDB loc_410CDB:                             ; CODE XREF: .text:00410C00↑j
.text:00410CDB                                         ; DATA XREF: .text:jpt_410C00↑o
.text:00410CDB                 sub     edx, 1Ch        ; jumptable 00410C00 case 7
.text:00410CDE                 sub     ecx, 18h
.text:00410CE1                 mov     ebx, [edx+18h]
.text:00410CE4                 inc     esi
.text:00410CE5                 jmp     short loc_410C6C
.text:00410CE5 ; ---------------------------------------------------------------------------
.text:00410CE7                 align 10h
.text:00410CF0                 push    ebp
.text:00410CF1                 push    edi
.text:00410CF2                 push    esi
.text:00410CF3                 push    ebx
.text:00410CF4                 sub     esp, 8
.text:00410CF7                 mov     edx, [esp+20h]
.text:00410CFB                 mov     dword ptr [esp+4], 20h ; ' '
.text:00410D03                 mov     eax, [esp+24h]
.text:00410D07                 mov     ecx, edx
.text:00410D09                 and     ecx, 3
.text:00410D0C                 and     eax, 3
.text:00410D0F                 shl     ecx, 3
.text:00410D12                 sub     [esp+4], ecx
.text:00410D16                 and     edx, 0FFFFFFFCh
.text:00410D19                 add     edx, 4
.text:00410D1C                 mov     [esp], ecx
.text:00410D1F                 cmp     eax, 1
.text:00410D22                 jz      loc_410E18
.text:00410D28                 cmp     eax, 1
.text:00410D2B                 jb      loc_410E05
.text:00410D31                 cmp     eax, 2
.text:00410D34                 jz      loc_410DF0
.text:00410D3A                 cmp     eax, 3
.text:00410D3D                 jz      loc_410DDC
.text:00410D43
.text:00410D43 loc_410D43:                             ; CODE XREF: .text:00410DBC↓j
.text:00410D43                                         ; .text:00410E2A↓j
.text:00410D43                 movzx   ecx, byte ptr [esp]
.text:00410D47                 mov     eax, edi
.text:00410D49                 mov     ebx, [esp+1Ch]
.text:00410D4D                 mov     esi, [edx+0Ch]
.text:00410D50                 shr     eax, cl
.text:00410D52                 movzx   ecx, byte ptr [esp+4]
.text:00410D57                 shl     ebp, cl
.text:00410D59                 or      eax, ebp
.text:00410D5B                 mov     [ebx+0Ch], eax
.text:00410D5E
.text:00410D5E loc_410D5E:                             ; CODE XREF: .text:00410E13↓j
.text:00410D5E                 movzx   ecx, byte ptr [esp]
.text:00410D62                 mov     ebp, esi
.text:00410D64                 mov     ebx, [edx+8]
.text:00410D67                 shr     ebp, cl
.text:00410D69                 movzx   ecx, byte ptr [esp+4]
.text:00410D6E                 shl     edi, cl
.text:00410D70                 or      ebp, edi
.text:00410D72                 mov     edi, [esp+1Ch]
.text:00410D76                 mov     [edi+8], ebp
.text:00410D79
.text:00410D79 loc_410D79:                             ; CODE XREF: .text:00410DEE↓j
.text:00410D79                 movzx   ecx, byte ptr [esp]
.text:00410D7D                 mov     edi, ebx
.text:00410D7F                 mov     ebp, [edx+4]
.text:00410D82                 shr     edi, cl
.text:00410D84                 movzx   ecx, byte ptr [esp+4]
.text:00410D89                 shl     esi, cl
.text:00410D8B                 or      edi, esi
.text:00410D8D                 mov     esi, [esp+1Ch]
.text:00410D91                 mov     [esi+4], edi
.text:00410D94
.text:00410D94 loc_410D94:                             ; CODE XREF: .text:00410E03↓j
.text:00410D94                 movzx   ecx, byte ptr [esp]
.text:00410D98                 mov     esi, ebp
.text:00410D9A                 mov     edi, [edx]
.text:00410D9C                 sub     edx, 10h
.text:00410D9F                 shr     esi, cl
.text:00410DA1                 movzx   ecx, byte ptr [esp+4]
.text:00410DA6                 shl     ebx, cl
.text:00410DA8                 or      esi, ebx
.text:00410DAA                 mov     ebx, [esp+1Ch]
.text:00410DAE                 mov     [ebx], esi
.text:00410DB0                 sub     ebx, 10h
.text:00410DB3                 sub     dword ptr [esp+24h], 4
.text:00410DB8                 mov     [esp+1Ch], ebx
.text:00410DBC                 jnz     short loc_410D43
.text:00410DBE                 movzx   ecx, byte ptr [esp]
.text:00410DC2                 mov     edx, [esp+1Ch]
.text:00410DC6                 shr     edi, cl
.text:00410DC8                 movzx   ecx, byte ptr [esp+4]
.text:00410DCD                 shl     ebp, cl
.text:00410DCF                 or      edi, ebp
.text:00410DD1                 mov     [edx+0Ch], edi
.text:00410DD4                 add     esp, 8
.text:00410DD7                 pop     ebx
.text:00410DD8                 pop     esi
.text:00410DD9                 pop     edi
.text:00410DDA                 pop     ebp
.text:00410DDB                 retn
.text:00410DDC ; ---------------------------------------------------------------------------
.text:00410DDC
.text:00410DDC loc_410DDC:                             ; CODE XREF: .text:00410D3D↑j
.text:00410DDC                 sub     dword ptr [esp+1Ch], 8
.text:00410DE1                 sub     edx, 10h
.text:00410DE4                 inc     dword ptr [esp+24h]
.text:00410DE8                 mov     esi, [edx+0Ch]
.text:00410DEB                 mov     ebx, [edx+8]
.text:00410DEE                 jmp     short loc_410D79
.text:00410DF0 ; ---------------------------------------------------------------------------
.text:00410DF0
.text:00410DF0 loc_410DF0:                             ; CODE XREF: .text:00410D34↑j
.text:00410DF0                 sub     dword ptr [esp+1Ch], 4
.text:00410DF5                 sub     edx, 0Ch
.text:00410DF8                 add     dword ptr [esp+24h], 2
.text:00410DFD                 mov     ebx, [edx+8]
.text:00410E00                 mov     ebp, [edx+4]
.text:00410E03                 jmp     short loc_410D94
.text:00410E05 ; ---------------------------------------------------------------------------
.text:00410E05
.text:00410E05 loc_410E05:                             ; CODE XREF: .text:00410D2B↑j
.text:00410E05                 sub     dword ptr [esp+1Ch], 0Ch
.text:00410E0A                 sub     edx, 14h
.text:00410E0D                 mov     edi, [edx+10h]
.text:00410E10                 mov     esi, [edx+0Ch]
.text:00410E13                 jmp     loc_410D5E
.text:00410E18 ; ---------------------------------------------------------------------------
.text:00410E18
.text:00410E18 loc_410E18:                             ; CODE XREF: .text:00410D22↑j
.text:00410E18                 sub     dword ptr [esp+1Ch], 10h
.text:00410E1D                 sub     edx, 18h
.text:00410E20                 dec     dword ptr [esp+24h]
.text:00410E24                 mov     ebp, [edx+14h]
.text:00410E27                 mov     edi, [edx+10h]
.text:00410E2A                 jmp     loc_410D43
.text:00410E2A ; ---------------------------------------------------------------------------
.text:00410E2F                 align 10h
.text:00410E30
.text:00410E30 ; =============== S U B R O U T I N E =======================================
.text:00410E30
.text:00410E30
.text:00410E30 sub_410E30      proc near               ; CODE XREF: sub_410430+8A↑p
.text:00410E30                                         ; .text:0041185B↓p
.text:00410E30                 xor     eax, eax
.text:00410E32                 retn
.text:00410E32 sub_410E30      endp
.text:00410E32
.text:00410E32 ; ---------------------------------------------------------------------------
.text:00410E33                 align 10h
.text:00410E40
.text:00410E40 ; =============== S U B R O U T I N E =======================================
.text:00410E40
.text:00410E40
.text:00410E40 sub_410E40      proc near               ; CODE XREF: sub_410430+7E↑p
.text:00410E40                                         ; .text:00411834↓p
.text:00410E40                 xor     eax, eax
.text:00410E42                 retn
.text:00410E42 sub_410E40      endp
.text:00410E42
.text:00410E42 ; ---------------------------------------------------------------------------
.text:00410E43                 align 10h
.text:00410E50 aFile           db 'file',0             ; DATA XREF: sub_410E80:loc_410EAC↓o
.text:00410E55 ; const char aSSxxxxxx[]
.text:00410E55 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_410E80+9B↓o
.text:00410E65 ; const char aTemp[]
.text:00410E65 aTemp           db 'TEMP',0             ; DATA XREF: sub_410E80:loc_410F62↓o
.text:00410E65                                         ; sub_410E80:loc_410FA2↓o ...
.text:00410E6A ; const char aTmp[]
.text:00410E6A aTmp            db '/tmp',0             ; DATA XREF: sub_410E80+12F↓o
.text:00410E6A                                         ; sub_410E80+141↓o ...
.text:00410E6F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_410E80:loc_411020↓o
.text:00410E76 aTmp_0          db 'TMP',0              ; DATA XREF: sub_410E80:loc_4110B0↓o
.text:00410E7A                 align 10h
.text:00410E80
.text:00410E80 ; =============== S U B R O U T I N E =======================================
.text:00410E80
.text:00410E80
.text:00410E80 ; int __cdecl sub_410E80(char *Buffer, int, char *, char *, int)
.text:00410E80 sub_410E80      proc near               ; CODE XREF: sub_410730+3B↑p
.text:00410E80
.text:00410E80 Str             = dword ptr -1BCh
.text:00410E80 Format          = dword ptr -1B8h
.text:00410E80 var_1B4         = dword ptr -1B4h
.text:00410E80 var_1B0         = dword ptr -1B0h
.text:00410E80 var_1AC         = dword ptr -1ACh
.text:00410E80 var_1A8         = dword ptr -1A8h
.text:00410E80 var_19C         = dword ptr -19Ch
.text:00410E80 var_13C         = dword ptr -13Ch
.text:00410E80 var_DC          = dword ptr -0DCh
.text:00410E80 var_7C          = dword ptr -7Ch
.text:00410E80 Buffer          = dword ptr  4
.text:00410E80 arg_4           = dword ptr  8
.text:00410E80 arg_8           = dword ptr  0Ch
.text:00410E80 arg_C           = dword ptr  10h
.text:00410E80 arg_10          = dword ptr  14h
.text:00410E80
.text:00410E80                 push    ebp
.text:00410E81                 push    edi
.text:00410E82                 push    esi
.text:00410E83                 push    ebx
.text:00410E84                 sub     esp, 1ACh
.text:00410E8A                 mov     eax, [esp+1BCh+arg_C]
.text:00410E91                 mov     esi, [esp+1BCh+arg_8]
.text:00410E98                 test    eax, eax
.text:00410E9A                 jz      short loc_410EAC
.text:00410E9C                 mov     edx, [esp+1BCh+arg_C]
.text:00410EA3                 cmp     byte ptr [edx], 0
.text:00410EA6                 jnz     loc_4110E0
.text:00410EAC
.text:00410EAC loc_410EAC:                             ; CODE XREF: sub_410E80+1A↑j
.text:00410EAC                 mov     eax, offset aFile ; "file"
.text:00410EB1                 mov     ebp, 4
.text:00410EB6                 mov     [esp+1BCh+arg_C], eax
.text:00410EBD
.text:00410EBD loc_410EBD:                             ; CODE XREF: sub_410E80+274↓j
.text:00410EBD                                         ; sub_410E80+27F↓j
.text:00410EBD                 mov     ebx, [esp+1BCh+arg_10]
.text:00410EC4                 test    ebx, ebx
.text:00410EC6                 jnz     loc_411020
.text:00410ECC
.text:00410ECC loc_410ECC:                             ; CODE XREF: sub_410E80+21C↓j
.text:00410ECC                                         ; sub_410E80+224↓j ...
.text:00410ECC                 test    esi, esi
.text:00410ECE                 jz      loc_410F62
.text:00410ED4
.text:00410ED4 loc_410ED4:                             ; CODE XREF: sub_410E80+176↓j
.text:00410ED4                                         ; sub_410E80+19A↓j
.text:00410ED4                 mov     [esp+1BCh+Str], esi ; Str
.text:00410ED7                 call    strlen
.text:00410EDC                 test    eax, eax
.text:00410EDE                 mov     edx, eax
.text:00410EE0                 jz      short loc_410EF0
.text:00410EE2                 movzx   eax, byte ptr [eax+esi-1]
.text:00410EE7                 cmp     al, 2Fh ; '/'
.text:00410EE9                 jz      short loc_410F50
.text:00410EEB                 cmp     al, 5Ch ; '\'
.text:00410EED                 jz      short loc_410F50
.text:00410EEF                 nop
.text:00410EF0
.text:00410EF0 loc_410EF0:                             ; CODE XREF: sub_410E80+60↑j
.text:00410EF0                                         ; sub_410E80+D1↓j ...
.text:00410EF0                 lea     edi, [ebp+edx+8]
.text:00410EF4                 cmp     [esp+1BCh+arg_4], edi
.text:00410EFB                 jb      short loc_410F38
.text:00410EFD                 mov     [esp+1BCh+var_1AC], ebp
.text:00410F01                 mov     ecx, [esp+1BCh+arg_C]
.text:00410F08                 mov     ebp, [esp+1BCh+Buffer]
.text:00410F0F                 mov     [esp+1BCh+var_1B0], esi
.text:00410F13                 mov     [esp+1BCh+var_1A8], ecx
.text:00410F17                 mov     [esp+1BCh+var_1B4], edx
.text:00410F1B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410F23                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410F26                 call    sprintf
.text:00410F2B                 xor     eax, eax
.text:00410F2D
.text:00410F2D loc_410F2D:                             ; CODE XREF: sub_410E80+C8↓j
.text:00410F2D                 add     esp, 1ACh
.text:00410F33                 pop     ebx
.text:00410F34                 pop     esi
.text:00410F35                 pop     edi
.text:00410F36                 pop     ebp
.text:00410F37                 retn
.text:00410F38 ; ---------------------------------------------------------------------------
.text:00410F38
.text:00410F38 loc_410F38:                             ; CODE XREF: sub_410E80+7B↑j
.text:00410F38                 call    _errno
.text:00410F3D                 mov     dword ptr [eax], 16h
.text:00410F43
.text:00410F43 loc_410F43:                             ; CODE XREF: sub_410E80+187↓j
.text:00410F43                 mov     eax, 0FFFFFFFFh
.text:00410F48                 jmp     short loc_410F2D
.text:00410F48 ; ---------------------------------------------------------------------------
.text:00410F4A                 align 10h
.text:00410F50
.text:00410F50 loc_410F50:                             ; CODE XREF: sub_410E80+69↑j
.text:00410F50                                         ; sub_410E80+6D↑j ...
.text:00410F50                 dec     edx
.text:00410F51                 jz      short loc_410EF0
.text:00410F53                 movzx   eax, byte ptr [edx+esi-1]
.text:00410F58                 cmp     al, 2Fh ; '/'
.text:00410F5A                 jz      short loc_410F50
.text:00410F5C                 cmp     al, 5Ch ; '\'
.text:00410F5E                 jz      short loc_410F50
.text:00410F60                 jmp     short loc_410EF0
.text:00410F62 ; ---------------------------------------------------------------------------
.text:00410F62
.text:00410F62 loc_410F62:                             ; CODE XREF: sub_410E80+4E↑j
.text:00410F62                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410F69                 lea     esi, [esp+1BCh+var_13C]
.text:00410F70                 call    getenv
.text:00410F75                 mov     [esp+1BCh+Format], eax ; char *
.text:00410F79                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00410F7D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410F84                 call    sub_40D470
.text:00410F89                 test    eax, eax
.text:00410F8B                 jnz     short loc_410FA2
.text:00410F8D                 mov     edi, [esp+1BCh+var_13C]
.text:00410F94                 and     edi, 0F000h
.text:00410F9A                 cmp     edi, 4000h
.text:00410FA0                 jz      short loc_41100C
.text:00410FA2
.text:00410FA2 loc_410FA2:                             ; CODE XREF: sub_410E80+10B↑j
.text:00410FA2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410FA9                 call    getenv
.text:00410FAE                 cld
.text:00410FAF                 mov     edx, offset aTmp ; "/tmp"
.text:00410FB4                 mov     esi, eax
.text:00410FB6                 mov     ecx, 5
.text:00410FBB                 mov     edi, edx
.text:00410FBD                 repe cmpsb
.text:00410FBF                 jz      short loc_410FFC
.text:00410FC1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00410FC9                 lea     ecx, [esp+1BCh+var_19C]
.text:00410FCD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410FD1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410FD8                 call    sub_40D470
.text:00410FDD                 test    eax, eax
.text:00410FDF                 jnz     short loc_410FFC
.text:00410FE1                 mov     ebx, [esp+1BCh+var_19C]
.text:00410FE5                 mov     esi, offset aTmp ; "/tmp"
.text:00410FEA                 and     ebx, 0F000h
.text:00410FF0                 cmp     ebx, 4000h
.text:00410FF6                 jz      loc_410ED4
.text:00410FFC
.text:00410FFC loc_410FFC:                             ; CODE XREF: sub_410E80+13F↑j
.text:00410FFC                                         ; sub_410E80+15F↑j
.text:00410FFC                 call    _errno
.text:00411001                 mov     dword ptr [eax], 2
.text:00411007                 jmp     loc_410F43
.text:0041100C ; ---------------------------------------------------------------------------
.text:0041100C
.text:0041100C loc_41100C:                             ; CODE XREF: sub_410E80+120↑j
.text:0041100C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00411013                 call    getenv
.text:00411018                 mov     esi, eax
.text:0041101A                 jmp     loc_410ED4
.text:0041101A ; ---------------------------------------------------------------------------
.text:0041101F                 align 10h
.text:00411020
.text:00411020 loc_411020:                             ; CODE XREF: sub_410E80+46↑j
.text:00411020                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00411027                 call    sub_411710
.text:0041102C                 test    eax, eax
.text:0041102E                 mov     ebx, eax
.text:00411030                 jz      short loc_4110B0
.text:00411032
.text:00411032 loc_411032:                             ; CODE XREF: sub_410E80+240↓j
.text:00411032                                         ; sub_410E80+256↓j
.text:00411032                 mov     [esp+1BCh+Format], ebx ; char *
.text:00411036                 lea     edi, [esp+1BCh+var_7C]
.text:0041103D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00411041                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00411048                 call    sub_40D470
.text:0041104D                 test    eax, eax
.text:0041104F                 jnz     short loc_411066
.text:00411051                 mov     edx, [esp+1BCh+var_7C]
.text:00411058                 and     edx, 0F000h
.text:0041105E                 cmp     edx, 4000h
.text:00411064                 jz      short loc_4110A9
.text:00411066
.text:00411066 loc_411066:                             ; CODE XREF: sub_410E80+1CF↑j
.text:00411066                                         ; sub_410E80+25C↓j
.text:00411066                 test    esi, esi
.text:00411068                 jz      short loc_4110A2
.text:0041106A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041106E                 lea     ecx, [esp+1BCh+var_DC]
.text:00411075                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00411079                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00411080                 call    sub_40D470
.text:00411085                 test    eax, eax
.text:00411087                 jnz     short loc_4110A2
.text:00411089                 mov     ebx, [esp+1BCh+var_DC]
.text:00411090                 and     ebx, 0F000h
.text:00411096                 cmp     ebx, 4000h
.text:0041109C                 jz      loc_410ECC
.text:004110A2
.text:004110A2 loc_4110A2:                             ; CODE XREF: sub_410E80+1E8↑j
.text:004110A2                                         ; sub_410E80+207↑j
.text:004110A2                 xor     esi, esi
.text:004110A4                 jmp     loc_410ECC
.text:004110A9 ; ---------------------------------------------------------------------------
.text:004110A9
.text:004110A9 loc_4110A9:                             ; CODE XREF: sub_410E80+1E4↑j
.text:004110A9                 mov     esi, ebx
.text:004110AB                 jmp     loc_410ECC
.text:004110B0 ; ---------------------------------------------------------------------------
.text:004110B0
.text:004110B0 loc_4110B0:                             ; CODE XREF: sub_410E80+1B0↑j
.text:004110B0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:004110B7                 call    sub_411710
.text:004110BC                 test    eax, eax
.text:004110BE                 mov     ebx, eax
.text:004110C0                 jnz     loc_411032
.text:004110C6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004110CD                 call    sub_411710
.text:004110D2                 test    eax, eax
.text:004110D4                 mov     ebx, eax
.text:004110D6                 jnz     loc_411032
.text:004110DC                 jmp     short loc_411066
.text:004110DC ; ---------------------------------------------------------------------------
.text:004110DE                 align 10h
.text:004110E0
.text:004110E0 loc_4110E0:                             ; CODE XREF: sub_410E80+26↑j
.text:004110E0                 mov     ecx, [esp+1BCh+arg_C]
.text:004110E7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004110EA                 call    strlen
.text:004110EF                 cmp     eax, 5
.text:004110F2                 mov     ebp, eax
.text:004110F4                 jbe     loc_410EBD
.text:004110FA                 mov     ebp, 5
.text:004110FF                 jmp     loc_410EBD
.text:004110FF sub_410E80      endp
.text:004110FF
.text:004110FF ; ---------------------------------------------------------------------------
.text:00411104                 align 10h
.text:00411110 byte_411110     db 61h                  ; DATA XREF: sub_411200+DC↓r
.text:00411110                                         ; sub_411200+122↓r ...
.text:00411111 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041114F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_411200+39↓o
.text:00411156                 db 1Ah dup(90h)
.text:00411170 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00411170                                         ; DATA XREF: sub_411200:loc_411478↓o
.text:0041118F                 align 10h
.text:00411190 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00411190                                         ; DATA XREF: sub_411200+405↓o
.text:004111BB                 db 15h dup(90h)
.text:004111D0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:004111D0                                         ; DATA XREF: sub_411200+40D↓o
.text:004111F3                 align 10h
.text:00411200
.text:00411200 ; =============== S U B R O U T I N E =======================================
.text:00411200
.text:00411200
.text:00411200 ; int __cdecl sub_411200(char *FileName, int)
.text:00411200 sub_411200      proc near               ; CODE XREF: sub_410730+51↑p
.text:00411200
.text:00411200 Str             = dword ptr -9Ch
.text:00411200 OpenFlag        = dword ptr -98h
.text:00411200 var_94          = dword ptr -94h
.text:00411200 var_90          = dword ptr -90h
.text:00411200 var_8C          = dword ptr -8Ch
.text:00411200 var_88          = dword ptr -88h
.text:00411200 var_84          = dword ptr -84h
.text:00411200 var_80          = dword ptr -80h
.text:00411200 var_7C          = dword ptr -7Ch
.text:00411200 FileName        = dword ptr  4
.text:00411200 arg_4           = dword ptr  8
.text:00411200
.text:00411200                 push    ebp
.text:00411201                 push    edi
.text:00411202                 push    esi
.text:00411203                 push    ebx
.text:00411204                 sub     esp, 8Ch
.text:0041120A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00411212                 call    _errno
.text:00411217                 mov     edx, [eax]
.text:00411219                 mov     [esp+9Ch+var_8C], edx
.text:0041121D                 mov     edx, [esp+9Ch+FileName]
.text:00411224                 mov     [esp+9Ch+Str], edx ; Str
.text:00411227                 call    strlen
.text:0041122C                 cmp     eax, 5
.text:0041122F                 jle     short loc_41124D
.text:00411231                 cld
.text:00411232                 mov     ecx, [esp+9Ch+FileName]
.text:00411239                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041123E                 lea     esi, [eax+ecx-6]
.text:00411242                 mov     ecx, 7
.text:00411247                 mov     ebp, esi
.text:00411249                 repe cmpsb
.text:0041124B                 jz      short loc_411268
.text:0041124D
.text:0041124D loc_41124D:                             ; CODE XREF: sub_411200+2F↑j
.text:0041124D                 call    _errno
.text:00411252                 mov     dword ptr [eax], 16h
.text:00411258
.text:00411258 loc_411258:                             ; CODE XREF: sub_411200+295↓j
.text:00411258                                         ; sub_411200+2D8↓j ...
.text:00411258                 mov     eax, 0FFFFFFFFh
.text:0041125D
.text:0041125D loc_41125D:                             ; CODE XREF: sub_411200+2EF↓j
.text:0041125D                                         ; sub_411200+332↓j
.text:0041125D                 add     esp, 8Ch
.text:00411263                 pop     ebx
.text:00411264                 pop     esi
.text:00411265                 pop     edi
.text:00411266                 pop     ebp
.text:00411267                 retn
.text:00411268 ; ---------------------------------------------------------------------------
.text:00411268
.text:00411268 loc_411268:                             ; CODE XREF: sub_411200+4B↑j
.text:00411268                 mov     ecx, ds:dword_415E64
.text:0041126E                 mov     edi, ds:dword_415E60
.text:00411274                 mov     eax, ecx
.text:00411276                 or      eax, edi
.text:00411278                 jz      loc_4115B3
.text:0041127E
.text:0041127E loc_41127E:                             ; CODE XREF: sub_411200+3F8↓j
.text:0041127E                 rdtsc
.text:00411280                 mov     edi, edx
.text:00411282                 mov     esi, eax
.text:00411284                 call    _getpid
.text:00411289                 mov     ebx, eax
.text:0041128B                 mov     edx, esi
.text:0041128D                 sar     ebx, 1Fh
.text:00411290                 xor     edx, eax
.text:00411292                 mov     ecx, edi
.text:00411294                 xor     ecx, ebx
.text:00411296                 mov     ebx, edx
.text:00411298                 mov     esi, ecx
.text:0041129A                 add     ebx, ds:dword_415E60
.text:004112A0                 adc     esi, ds:dword_415E64
.text:004112A6                 xor     edi, edi
.text:004112A8                 mov     ds:dword_415E60, ebx
.text:004112AE                 mov     ds:dword_415E64, esi
.text:004112B4                 lea     esi, [esi+0]
.text:004112BA                 lea     edi, [edi+0]
.text:004112C0
.text:004112C0 loc_4112C0:                             ; CODE XREF: sub_411200+2C7↓j
.text:004112C0                 mov     [esp+9Ch+Str], ebx
.text:004112C3                 mov     [esp+9Ch+OpenFlag], esi
.text:004112C7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004112CF                 mov     [esp+9Ch+var_90], 0
.text:004112D7                 call    sub_412EB0
.text:004112DC                 movzx   ecx, ds:byte_411110[eax]
.text:004112E3                 mov     [ebp+0], cl
.text:004112E6                 mov     [esp+9Ch+Str], ebx
.text:004112E9                 mov     [esp+9Ch+OpenFlag], esi
.text:004112ED                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004112F5                 mov     [esp+9Ch+var_90], 0
.text:004112FD                 call    sub_413030
.text:00411302                 mov     [esp+9Ch+Str], eax
.text:00411305                 mov     ebx, eax
.text:00411307                 mov     esi, edx
.text:00411309                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00411311                 mov     [esp+9Ch+var_90], 0
.text:00411319                 mov     [esp+9Ch+OpenFlag], edx
.text:0041131D                 call    sub_412EB0
.text:00411322                 movzx   edx, ds:byte_411110[eax]
.text:00411329                 mov     [ebp+1], dl
.text:0041132C                 mov     [esp+9Ch+Str], ebx
.text:0041132F                 mov     [esp+9Ch+OpenFlag], esi
.text:00411333                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041133B                 mov     [esp+9Ch+var_90], 0
.text:00411343                 call    sub_413030
.text:00411348                 mov     [esp+9Ch+Str], eax
.text:0041134B                 mov     ebx, eax
.text:0041134D                 mov     esi, edx
.text:0041134F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00411357                 mov     [esp+9Ch+var_90], 0
.text:0041135F                 mov     [esp+9Ch+OpenFlag], edx
.text:00411363                 call    sub_412EB0
.text:00411368                 movzx   ecx, ds:byte_411110[eax]
.text:0041136F                 mov     [ebp+2], cl
.text:00411372                 mov     [esp+9Ch+Str], ebx
.text:00411375                 mov     [esp+9Ch+OpenFlag], esi
.text:00411379                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00411381                 mov     [esp+9Ch+var_90], 0
.text:00411389                 call    sub_413030
.text:0041138E                 mov     [esp+9Ch+Str], eax
.text:00411391                 mov     ebx, eax
.text:00411393                 mov     esi, edx
.text:00411395                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041139D                 mov     [esp+9Ch+var_90], 0
.text:004113A5                 mov     [esp+9Ch+OpenFlag], edx
.text:004113A9                 call    sub_412EB0
.text:004113AE                 movzx   edx, ds:byte_411110[eax]
.text:004113B5                 mov     [ebp+3], dl
.text:004113B8                 mov     [esp+9Ch+Str], ebx
.text:004113BB                 mov     [esp+9Ch+OpenFlag], esi
.text:004113BF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004113C7                 mov     [esp+9Ch+var_90], 0
.text:004113CF                 call    sub_413030
.text:004113D4                 mov     [esp+9Ch+Str], eax
.text:004113D7                 mov     ebx, eax
.text:004113D9                 mov     esi, edx
.text:004113DB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004113E3                 mov     [esp+9Ch+var_90], 0
.text:004113EB                 mov     [esp+9Ch+OpenFlag], edx
.text:004113EF                 call    sub_412EB0
.text:004113F4                 movzx   ecx, ds:byte_411110[eax]
.text:004113FB                 mov     [ebp+4], cl
.text:004113FE                 mov     [esp+9Ch+Str], ebx
.text:00411401                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00411409                 mov     [esp+9Ch+var_90], 0
.text:00411411                 mov     [esp+9Ch+OpenFlag], esi
.text:00411415                 call    sub_413030
.text:0041141A                 mov     [esp+9Ch+Str], eax
.text:0041141D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00411425                 mov     [esp+9Ch+var_90], 0
.text:0041142D                 mov     [esp+9Ch+OpenFlag], edx
.text:00411431                 call    sub_412EB0
.text:00411436                 movzx   ebx, ds:byte_411110[eax]
.text:0041143D                 mov     [ebp+5], bl
.text:00411440                 cmp     [esp+9Ch+arg_4], 1
.text:00411448                 jz      loc_411597
.text:0041144E                 cmp     [esp+9Ch+arg_4], 1
.text:00411456                 jle     loc_411560
.text:0041145C                 cmp     [esp+9Ch+arg_4], 2
.text:00411464                 jz      loc_411537
.text:0041146A                 cmp     [esp+9Ch+arg_4], 3
.text:00411472                 jz      loc_4114F4
.text:00411478
.text:00411478 loc_411478:                             ; CODE XREF: sub_411200+369↓j
.text:00411478                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041147D                 test    ebx, ebx
.text:0041147F                 jnz     loc_4115FD
.text:00411485
.text:00411485 loc_411485:                             ; CODE XREF: sub_411200+354↓j
.text:00411485                 mov     eax, [esp+9Ch+var_88]
.text:00411489                 test    eax, eax
.text:0041148B                 jns     short loc_4114E0
.text:0041148D                 call    _errno
.text:00411492                 cmp     dword ptr [eax], 11h
.text:00411495                 jnz     loc_411258
.text:0041149B
.text:0041149B loc_41149B:                             ; CODE XREF: sub_411200+315↓j
.text:0041149B                 mov     edx, ds:dword_415E60
.text:004114A1                 mov     ecx, ds:dword_415E64
.text:004114A7                 add     edx, 1E61h
.text:004114AD                 adc     ecx, 0
.text:004114B0                 mov     ebx, edx
.text:004114B2                 inc     edi
.text:004114B3                 mov     ds:dword_415E60, edx
.text:004114B9                 cmp     edi, 3A2F8h
.text:004114BF                 mov     esi, ecx
.text:004114C1                 mov     ds:dword_415E64, ecx
.text:004114C7                 jb      loc_4112C0
.text:004114CD                 call    _errno
.text:004114D2                 mov     dword ptr [eax], 11h
.text:004114D8                 jmp     loc_411258
.text:004114D8 ; ---------------------------------------------------------------------------
.text:004114DD                 align 10h
.text:004114E0
.text:004114E0 loc_4114E0:                             ; CODE XREF: sub_411200+28B↑j
.text:004114E0                 call    _errno
.text:004114E5                 mov     esi, [esp+9Ch+var_8C]
.text:004114E9                 mov     [eax], esi
.text:004114EB                 mov     eax, [esp+9Ch+var_88]
.text:004114EF                 jmp     loc_41125D
.text:004114F4 ; ---------------------------------------------------------------------------
.text:004114F4
.text:004114F4 loc_4114F4:                             ; CODE XREF: sub_411200+272↑j
.text:004114F4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:004114FB                 mov     ecx, [esp+9Ch+FileName]
.text:00411502                 lea     esi, [esp+9Ch+var_7C]
.text:00411506                 mov     [esp+9Ch+var_94], esi ; int
.text:0041150A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041150E                 call    sub_40BCC0
.text:00411513                 test    eax, eax
.text:00411515                 jns     short loc_41149B
.text:00411517                 call    _errno
.text:0041151C                 cmp     dword ptr [eax], 2
.text:0041151F                 jnz     loc_411258
.text:00411525                 call    _errno
.text:0041152A                 mov     ebx, [esp+9Ch+var_8C]
.text:0041152E                 mov     [eax], ebx
.text:00411530                 xor     eax, eax
.text:00411532                 jmp     loc_41125D
.text:00411537 ; ---------------------------------------------------------------------------
.text:00411537
.text:00411537 loc_411537:                             ; CODE XREF: sub_411200+264↑j
.text:00411537                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041153F                 mov     edx, [esp+9Ch+FileName]
.text:00411546                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00411549                 call    sub_411630
.text:0041154E                 mov     esi, esi
.text:00411550
.text:00411550 loc_411550:                             ; CODE XREF: sub_411200+395↓j
.text:00411550                 mov     [esp+9Ch+var_88], eax
.text:00411554                 jmp     loc_411485
.text:00411554 ; ---------------------------------------------------------------------------
.text:00411559                 align 10h
.text:00411560
.text:00411560 loc_411560:                             ; CODE XREF: sub_411200+256↑j
.text:00411560                 mov     eax, [esp+9Ch+arg_4]
.text:00411567                 test    eax, eax
.text:00411569                 jnz     loc_411478
.text:0041156F                 mov     [esp+9Ch+var_94], 180h
.text:00411577                 mov     esi, [esp+9Ch+FileName]
.text:0041157E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00411586                 mov     [esp+9Ch+Str], esi ; FileName
.text:00411589                 lea     esi, [esi+0]
.text:00411590
.text:00411590 loc_411590:                             ; CODE XREF: sub_411200+3B1↓j
.text:00411590                 call    _open_0
.text:00411595                 jmp     short loc_411550
.text:00411597 ; ---------------------------------------------------------------------------
.text:00411597
.text:00411597 loc_411597:                             ; CODE XREF: sub_411200+248↑j
.text:00411597                 mov     [esp+9Ch+var_94], 180h
.text:0041159F                 mov     ebx, [esp+9Ch+FileName]
.text:004115A6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:004115AE                 mov     [esp+9Ch+Str], ebx
.text:004115B1                 jmp     short loc_411590
.text:004115B3 ; ---------------------------------------------------------------------------
.text:004115B3
.text:004115B3 loc_4115B3:                             ; CODE XREF: sub_411200+78↑j
.text:004115B3                 mov     [esp+9Ch+OpenFlag], 0
.text:004115BB                 lea     ebx, [esp+9Ch+var_84]
.text:004115BF                 mov     [esp+9Ch+Str], ebx
.text:004115C2                 call    sub_4116B0
.text:004115C7                 mov     edi, [esp+9Ch+var_80]
.text:004115CB                 mov     edx, [esp+9Ch+var_84]
.text:004115CF                 mov     ecx, edi
.text:004115D1                 mov     ebx, edi
.text:004115D3                 shl     ecx, 10h
.text:004115D6                 sar     ebx, 1Fh
.text:004115D9                 shld    ebx, edi, 10h
.text:004115DD                 mov     esi, edx
.text:004115DF                 mov     edi, edx
.text:004115E1                 mov     edx, ecx
.text:004115E3                 sar     edi, 1Fh
.text:004115E6                 xor     edx, esi
.text:004115E8                 mov     ds:dword_415E60, edx
.text:004115EE                 mov     esi, ebx
.text:004115F0                 xor     esi, edi
.text:004115F2                 mov     ds:dword_415E64, esi
.text:004115F8                 jmp     loc_41127E
.text:004115FD ; ---------------------------------------------------------------------------
.text:004115FD
.text:004115FD loc_4115FD:                             ; CODE XREF: sub_411200+27F↑j
.text:004115FD                 mov     [esp+9Ch+var_94], 151h
.text:00411605                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041160D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00411614                 call    _assert
.text:00411614 sub_411200      endp
.text:00411614
.text:00411614 ; ---------------------------------------------------------------------------
.text:00411619                 db 17h dup(90h)
.text:00411630
.text:00411630 ; =============== S U B R O U T I N E =======================================
.text:00411630
.text:00411630
.text:00411630 ; int __cdecl sub_411630(LPCSTR, int AccessMode)
.text:00411630 sub_411630      proc near               ; CODE XREF: sub_411200+349↑p
.text:00411630
.text:00411630 lpPathName      = dword ptr -1Ch
.text:00411630 lpSecurityAttributes= dword ptr -18h
.text:00411630 var_8           = dword ptr -8
.text:00411630 var_4           = dword ptr -4
.text:00411630 arg_0           = dword ptr  4
.text:00411630 AccessMode      = dword ptr  8
.text:00411630
.text:00411630                 sub     esp, 1Ch
.text:00411633                 mov     [esp+1Ch+var_8], ebx
.text:00411637                 mov     ebx, [esp+1Ch+arg_0]
.text:0041163B                 mov     [esp+1Ch+var_4], esi
.text:0041163F                 mov     esi, [esp+1Ch+AccessMode]
.text:00411643                 test    ebx, ebx
.text:00411645                 jz      short loc_411695
.text:00411647                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041164F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00411652                 call    CreateDirectoryA
.text:00411657                 sub     esp, 8
.text:0041165A                 test    eax, eax
.text:0041165C                 jz      short loc_411676
.text:0041165E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00411662                 mov     esi, [esp+1Ch+var_4]
.text:00411666                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041166A                 mov     ebx, [esp+1Ch+var_8]
.text:0041166E                 add     esp, 1Ch
.text:00411671                 jmp     _chmod
.text:00411676 ; ---------------------------------------------------------------------------
.text:00411676
.text:00411676 loc_411676:                             ; CODE XREF: sub_411630+2C↑j
.text:00411676                 call    sub_40DE70
.text:0041167B                 mov     esi, eax
.text:0041167D                 call    _errno
.text:00411682                 mov     [eax], esi
.text:00411684
.text:00411684 loc_411684:                             ; CODE XREF: sub_411630+70↓j
.text:00411684                 mov     ebx, [esp+1Ch+var_8]
.text:00411688                 mov     eax, 0FFFFFFFFh
.text:0041168D                 mov     esi, [esp+1Ch+var_4]
.text:00411691                 add     esp, 1Ch
.text:00411694                 retn
.text:00411695 ; ---------------------------------------------------------------------------
.text:00411695
.text:00411695 loc_411695:                             ; CODE XREF: sub_411630+15↑j
.text:00411695                 call    _errno
.text:0041169A                 mov     dword ptr [eax], 16h
.text:004116A0                 jmp     short loc_411684
.text:004116A0 sub_411630      endp
.text:004116A0
.text:004116A0 ; ---------------------------------------------------------------------------
.text:004116A2                 align 10h
.text:004116B0
.text:004116B0 ; =============== S U B R O U T I N E =======================================
.text:004116B0
.text:004116B0
.text:004116B0 sub_4116B0      proc near               ; CODE XREF: sub_411200+3C2↑p
.text:004116B0
.text:004116B0 var_1C          = dword ptr -1Ch
.text:004116B0 var_18          = dword ptr -18h
.text:004116B0 var_C           = dword ptr -0Ch
.text:004116B0 var_8           = dword ptr -8
.text:004116B0 var_4           = dword ptr -4
.text:004116B0 arg_0           = dword ptr  4
.text:004116B0 arg_4           = dword ptr  8
.text:004116B0
.text:004116B0                 sub     esp, 1Ch
.text:004116B3                 mov     edx, [esp+1Ch+arg_4]
.text:004116B7                 mov     [esp+1Ch+var_4], ebx
.text:004116BB                 mov     ebx, [esp+1Ch+arg_0]
.text:004116BF                 mov     [esp+1Ch+var_18], edx
.text:004116C3                 lea     edx, [esp+1Ch+var_C]
.text:004116C7                 mov     [esp+1Ch+var_1C], edx
.text:004116CA                 call    sub_411730
.text:004116CF                 test    eax, eax
.text:004116D1                 mov     edx, 0FFFFFFFFh
.text:004116D6                 jnz     short loc_4116FA
.text:004116D8                 mov     ecx, [esp+1Ch+var_C]
.text:004116DC                 mov     edx, 10624DD3h
.text:004116E1                 mov     [ebx], ecx
.text:004116E3                 mov     ecx, [esp+1Ch+var_8]
.text:004116E7                 mov     eax, ecx
.text:004116E9                 imul    edx
.text:004116EB                 mov     eax, ecx
.text:004116ED                 sar     eax, 1Fh
.text:004116F0                 sar     edx, 6
.text:004116F3                 sub     edx, eax
.text:004116F5                 mov     [ebx+4], edx
.text:004116F8                 xor     edx, edx
.text:004116FA
.text:004116FA loc_4116FA:                             ; CODE XREF: sub_4116B0+26↑j
.text:004116FA                 mov     ebx, [esp+1Ch+var_4]
.text:004116FE                 mov     eax, edx
.text:00411700                 add     esp, 1Ch
.text:00411703                 retn
.text:00411703 sub_4116B0      endp
.text:00411703
.text:00411703 ; ---------------------------------------------------------------------------
.text:00411704                 align 10h
.text:00411710
.text:00411710 ; =============== S U B R O U T I N E =======================================
.text:00411710
.text:00411710
.text:00411710 sub_411710      proc near               ; CODE XREF: sub_410E80+1A7↑p
.text:00411710                                         ; sub_410E80+237↑p ...
.text:00411710                 mov     edx, ds:dword_415E70
.text:00411716                 test    edx, edx
.text:00411718                 jnz     short loc_411720
.text:0041171A                 jmp     getenv
.text:0041171A ; ---------------------------------------------------------------------------
.text:0041171F                 align 10h
.text:00411720
.text:00411720 loc_411720:                             ; CODE XREF: sub_411710+8↑j
.text:00411720                 xor     eax, eax
.text:00411722                 retn
.text:00411722 sub_411710      endp
.text:00411722
.text:00411722 ; ---------------------------------------------------------------------------
.text:00411723                 align 10h
.text:00411730
.text:00411730 ; =============== S U B R O U T I N E =======================================
.text:00411730
.text:00411730
.text:00411730 sub_411730      proc near               ; CODE XREF: sub_4116B0+1A↑p
.text:00411730
.text:00411730 lpTimeZoneInformation= dword ptr -0DCh
.text:00411730 var_D8          = dword ptr -0D8h
.text:00411730 var_D4          = dword ptr -0D4h
.text:00411730 var_D0          = dword ptr -0D0h
.text:00411730 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00411730 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00411730 arg_0           = dword ptr  4
.text:00411730 arg_4           = dword ptr  8
.text:00411730
.text:00411730                 push    edi
.text:00411731                 push    esi
.text:00411732                 push    ebx
.text:00411733                 sub     esp, 0D0h
.text:00411739                 mov     ebx, [esp+0DCh+arg_4]
.text:00411740                 mov     edi, [esp+0DCh+arg_0]
.text:00411747                 test    ebx, ebx
.text:00411749                 jz      short loc_411774
.text:0041174B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041174F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00411752                 call    GetTimeZoneInformation
.text:00411757                 sub     esp, 4
.text:0041175A                 cmp     eax, 0FFFFFFFFh
.text:0041175D                 jz      loc_4117F5
.text:00411763                 xor     ecx, ecx
.text:00411765                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00411769                 cmp     eax, 2
.text:0041176C                 setz    cl
.text:0041176F                 mov     [ebx], esi
.text:00411771                 mov     [ebx+4], ecx
.text:00411774
.text:00411774 loc_411774:                             ; CODE XREF: sub_411730+19↑j
.text:00411774                                         ; sub_411730+E0↓j
.text:00411774                 test    edi, edi
.text:00411776                 jz      short loc_4117E9
.text:00411778                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041177C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041177F                 call    GetSystemTimeAsFileTime
.text:00411784                 sub     esp, 4
.text:00411787                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041178B                 mov     [esp+0DCh+var_D4], 989680h
.text:00411793                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00411797                 mov     [esp+0DCh+var_D0], 0
.text:0041179F                 add     ebx, 2AC18000h
.text:004117A5                 adc     esi, 0FE624E21h
.text:004117AB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:004117AF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004117B2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:004117B6                 mov     [esp+0DCh+var_D8], esi
.text:004117BA                 call    sub_413030
.text:004117BF                 mov     [edi], eax
.text:004117C1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004117C4                 mov     [esp+0DCh+var_D4], 989680h
.text:004117CC                 mov     [esp+0DCh+var_D0], 0
.text:004117D4                 mov     [esp+0DCh+var_D8], esi
.text:004117D8                 call    sub_412EB0
.text:004117DD                 lea     ebx, [eax+eax*4]
.text:004117E0                 lea     edx, [ebx+ebx*4]
.text:004117E3                 shl     edx, 2
.text:004117E6                 mov     [edi+4], edx
.text:004117E9
.text:004117E9 loc_4117E9:                             ; CODE XREF: sub_411730+46↑j
.text:004117E9                 add     esp, 0D0h
.text:004117EF                 xor     eax, eax
.text:004117F1                 pop     ebx
.text:004117F2                 pop     esi
.text:004117F3                 pop     edi
.text:004117F4                 retn
.text:004117F5 ; ---------------------------------------------------------------------------
.text:004117F5
.text:004117F5 loc_4117F5:                             ; CODE XREF: sub_411730+2D↑j
.text:004117F5                 mov     dword ptr [ebx], 0
.text:004117FB                 mov     dword ptr [ebx+4], 0
.text:00411802                 call    sub_40DE70
.text:00411807                 mov     esi, eax
.text:00411809                 call    _errno
.text:0041180E                 mov     [eax], esi
.text:00411810                 jmp     loc_411774
.text:00411810 sub_411730      endp
.text:00411810
.text:00411810 ; ---------------------------------------------------------------------------
.text:00411815                 align 10h
.text:00411820                 sub     esp, 0Ch
.text:00411823                 mov     [esp+4], ebx
.text:00411827                 mov     [esp+8], esi
.text:0041182B                 xor     esi, esi
.text:0041182D                 call    sub_411880
.text:00411832                 mov     ebx, eax
.text:00411834                 call    sub_410E40
.text:00411839                 cmp     ebx, eax
.text:0041183B                 jz      short loc_411854
.text:0041183D
.text:0041183D loc_41183D:                             ; CODE XREF: .text:00411862↓j
.text:0041183D                 mov     esi, 1
.text:00411842
.text:00411842 loc_411842:                             ; CODE XREF: .text:00411864↓j
.text:00411842                 mov     ds:dword_415E70, esi
.text:00411848                 mov     ebx, [esp+4]
.text:0041184C                 mov     esi, [esp+8]
.text:00411850                 add     esp, 0Ch
.text:00411853                 retn
.text:00411854 ; ---------------------------------------------------------------------------
.text:00411854
.text:00411854 loc_411854:                             ; CODE XREF: .text:0041183B↑j
.text:00411854                 call    sub_411870
.text:00411859                 mov     ebx, eax
.text:0041185B                 call    sub_410E30
.text:00411860                 cmp     ebx, eax
.text:00411862                 jnz     short loc_41183D
.text:00411864                 jmp     short loc_411842
.text:00411864 ; ---------------------------------------------------------------------------
.text:00411866                 align 10h
.text:00411870
.text:00411870 ; =============== S U B R O U T I N E =======================================
.text:00411870
.text:00411870
.text:00411870 sub_411870      proc near               ; CODE XREF: .text:loc_411854↑p
.text:00411870                 xor     eax, eax
.text:00411872                 retn
.text:00411872 sub_411870      endp
.text:00411872
.text:00411872 ; ---------------------------------------------------------------------------
.text:00411873                 align 10h
.text:00411880
.text:00411880 ; =============== S U B R O U T I N E =======================================
.text:00411880
.text:00411880
.text:00411880 sub_411880      proc near               ; CODE XREF: .text:0041182D↑p
.text:00411880                 xor     eax, eax
.text:00411882                 retn
.text:00411882 sub_411880      endp
.text:00411882
.text:00411882 ; ---------------------------------------------------------------------------
.text:00411883                 align 10h
.text:00411890
.text:00411890 ; =============== S U B R O U T I N E =======================================
.text:00411890
.text:00411890 ; Attributes: thunk
.text:00411890
.text:00411890 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00411890 OleInitialize   proc near               ; CODE XREF: sub_40F910+1A↑p
.text:00411890
.text:00411890 pvReserved      = dword ptr  4
.text:00411890
.text:00411890                 jmp     ds:__imp_OleInitialize
.text:00411890 OleInitialize   endp
.text:00411890
.text:00411890 ; ---------------------------------------------------------------------------
.text:00411896                 align 10h
.text:004118A0
.text:004118A0 ; =============== S U B R O U T I N E =======================================
.text:004118A0
.text:004118A0 ; Attributes: thunk
.text:004118A0
.text:004118A0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:004118A0 CoCreateInstance proc near              ; CODE XREF: sub_40F910+52↑p
.text:004118A0
.text:004118A0 rclsid          = dword ptr  4
.text:004118A0 pUnkOuter       = dword ptr  8
.text:004118A0 dwClsContext    = dword ptr  0Ch
.text:004118A0 riid            = dword ptr  10h
.text:004118A0 ppv             = dword ptr  14h
.text:004118A0
.text:004118A0                 jmp     ds:__imp_CoCreateInstance
.text:004118A0 CoCreateInstance endp
.text:004118A0
.text:004118A0 ; ---------------------------------------------------------------------------
.text:004118A6                 align 10h
.text:004118B0
.text:004118B0 ; =============== S U B R O U T I N E =======================================
.text:004118B0
.text:004118B0 ; Attributes: thunk
.text:004118B0
.text:004118B0 ; void __stdcall CoUninitialize()
.text:004118B0 CoUninitialize  proc near               ; CODE XREF: sub_40F910+14E↑p
.text:004118B0                                         ; sub_40F910+16D↑p
.text:004118B0                 jmp     ds:__imp_CoUninitialize
.text:004118B0 CoUninitialize  endp
.text:004118B0
.text:004118B0 ; ---------------------------------------------------------------------------
.text:004118B6                 align 10h
.text:004118C0                 add     al, 0BAh ; 'º'
.text:004118C2                 retf
.text:004118C2 ; ---------------------------------------------------------------------------
.text:004118C3                 db 7Eh
.text:004118C4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:004118C4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:004118C4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:004118C4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:004118C4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:004118C4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:004118C4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:004118C4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:004118C4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:004118C4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:004118C4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:004118C4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:004118C4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:004118C4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:004118C4                 dd 0C4426C00h, 330h, 0
.text:004119F8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004119F8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004119F8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004119F8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00411A48                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411A48                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00411A48                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00411A48                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00411A48                 dd 0BA94B00h, 1Bh, 0
.text:00411AA8                 dd 0C0h, 46000000h, 1Ch, 0
.text:00411AB8                 dd 0C0h, 46000000h, 331h, 0
.text:00411AC8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411AC8                 dd 312h, 0
.text:00411AE8                 dd 0C0h, 46000000h, 30Eh, 0
.text:00411AF8                 dd 0C0h, 46000000h, 30Dh, 0
.text:00411B08                 dd 0C0h, 46000000h, 311h, 0
.text:00411B18                 dd 0C0h, 46000000h, 313h, 0
.text:00411B28                 dd 0C0h, 46000000h, 30Ch, 0
.text:00411B38                 dd 0C0h, 46000000h, 30Fh, 0
.text:00411B48                 dd 0C0h, 46000000h, 310h, 0
.text:00411B58                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411B58                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00411B88                 dd 0C0h, 46000000h, 319h, 0
.text:00411B98                 dd 0C0h, 46000000h, 315h, 0
.text:00411BA8                 dd 0C0h, 46000000h, 316h, 0
.text:00411BB8                 dd 0C0h, 46000000h, 315h, 0
.text:00411BC8                 dd 0C0h, 46000000h, 2E005h, 0
.text:00411BD8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411BD8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00411BD8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00411C18                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411C18                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00411C18                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00411C18                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00411C18                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00411C18                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00411C18                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00411C18                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00411C18                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00411C18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00411C18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00411C18                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411C18                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00411C18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00411C18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00411C18                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411C18                 dd 2DE81h, 0
.text:00411D68                 dd 0C0h, 46000000h, 4 dup(0)
.text:00411D80                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00411D80                 dd 0
.text:00411D98                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411D98                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00411D98                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00411D98                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00411D98                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411D98                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00411D98                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00411D98                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00411D98                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00411D98                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00411D98                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00411D98                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00411D98                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00411D98                 dd 10Fh, 0
.text:00411EA8                 dd 0C0h, 46000000h, 125h, 0
.text:00411EB8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00411EB8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00411EB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00411EF8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00411EF8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411EF8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00411EF8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00411EF8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00411F58                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411F68                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411F68                 dd 140h, 0
.text:00411F88                 dd 0C0h, 46000000h, 1, 0
.text:00411F98                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00411F98                 dd 71D3400h, 13Dh, 0
.text:00411FB8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411FB8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00411FB8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00411FB8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00412008                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00412008                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00412008                 dd 20405h, 0
.text:00412038                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00412048                 dd 0C0h, 46000000h, 20406h, 0
.text:00412058                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00412068                 dd 0C0h, 46000000h, 110h, 0
.text:00412078                 dd 0C0h, 46000000h, 10Eh, 0
.text:00412088                 dd 0C0h, 46000000h, 123h, 0
.text:00412098                 dd 0C0h, 46000000h, 124h, 0
.text:004120A8                 dd 0C0h, 46000000h, 13h, 0
.text:004120B8                 dd 0C0h, 46000000h, 14h, 0
.text:004120C8                 dd 0C0h, 46000000h, 15h, 0
.text:004120D8                 dd 0C0h, 46000000h, 20400h, 0
.text:004120E8                 dd 0C0h, 46000000h, 121h, 0
.text:004120F8                 dd 0C0h, 46000000h, 122h, 0
.text:00412108                 dd 0C0h, 46000000h, 2E011h, 0
.text:00412118                 dd 0C0h, 46000000h, 108h, 0
.text:00412128                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00412128                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00412128                 dd 103h, 0
.text:00412158                 dd 0C0h, 46000000h, 2E000h, 0
.text:00412168                 dd 0C0h, 46000000h, 106h, 0
.text:00412178                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412178                 dd 107h, 0
.text:00412198                 dd 0C0h, 46000000h, 102h, 0
.text:004121A8                 dd 0C0h, 46000000h, 104h, 0
.text:004121B8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:004121B8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:004121B8                 dd 105h, 0
.text:004121E8                 dd 0C0h, 46000000h, 13Bh, 0
.text:004121F8                 dd 0C0h, 46000000h, 139h, 0
.text:00412208                 dd 0C0h, 46000000h, 0Dh, 0
.text:00412218                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00412218                 dd 101h, 0
.text:00412238                 dd 0C0h, 46000000h, 100h, 0
.text:00412248                 dd 0C0h, 46000000h, 20404h, 0
.text:00412258                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00412258                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00412288                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00412288                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00412288                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00412288                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:004122D8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004122D8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:004122D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:004122D8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:004122D8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004122D8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00412358                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00412358                 dd 0Ah, 0
.text:00412378                 dd 0C0h, 46000000h, 2, 0
.text:00412388                 dd 0C0h, 46000000h, 1Dh, 0
.text:00412398                 dd 0C0h, 46000000h, 3, 0
.text:004123A8                 dd 0C0h, 46000000h, 16h, 0
.text:004123B8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:004123B8                 dd 1608D74Fh, 0Fh, 0
.text:004123D8                 dd 0C0h, 46000000h, 20h, 0
.text:004123E8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:004123E8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:004123E8                 dd 0
.text:00412418                 dd 0C0h, 46000000h, 11Eh, 0
.text:00412428                 dd 0C0h, 46000000h, 128h, 0
.text:00412438                 dd 0C0h, 46000000h, 129h, 0
.text:00412448                 dd 0C0h, 46000000h, 118h, 0
.text:00412458                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00412458                 dd 70474000h, 11Bh, 0
.text:00412478                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00412478                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00412478                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00412478                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00412478                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:004124D8                 dd 0C0h, 46000000h, 116h, 0
.text:004124E8                 dd 0C0h, 46000000h, 113h, 0
.text:004124F8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:004124F8                 dd 119h, 0
.text:00412518                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00412518                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00412518                 dd 0
.text:00412548                 dd 0C0h, 46000000h, 11Ch, 0
.text:00412558                 dd 0C0h, 46000000h, 11Dh, 0
.text:00412568                 dd 0C0h, 46000000h, 11Fh, 0
.text:00412578                 dd 0C0h, 46000000h, 112h, 0
.text:00412588                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00412588                 dd 18E6000h, 120h, 0
.text:004125A8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:004125A8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:004125A8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:004125E8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:004125E8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00412618                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412618                 dd 11Ah, 0
.text:00412638                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00412638                 dd 10Ch, 0
.text:00412658                 dd 0C0h, 46000000h
.text:00412660 dword_412660    dd 10Bh, 0              ; DATA XREF: sub_40F910+75↑o
.text:00412668                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00412668                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00412668                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00412668                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:004126B8                 dd 0C0h, 46000000h, 109h, 0
.text:004126C8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:004126C8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:004126C8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:004126C8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:004126C8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:004126C8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:004126C8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:004126C8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:004126C8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004126C8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:004126C8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:004127A8                 dd 0C0h, 46000000h, 138h, 0
.text:004127B8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:004127B8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:004127B8                 dd 27h, 0
.text:004127E8                 dd 0C0h, 46000000h, 8, 0
.text:004127F8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:004127F8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:004127F8                 dd 20D00h, 0
.text:00412828                 dd 0C0h, 46000000h, 20D03h, 0
.text:00412838                 dd 0C0h, 46000000h, 12h, 0
.text:00412848                 dd 0C0h, 46000000h, 4, 0
.text:00412858                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412858                 dd 7, 0
.text:00412878                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412878                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:004128A8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004128A8                 dd 126h, 0
.text:004128C8                 dd 0C0h, 46000000h, 10h, 0
.text:004128D8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:004128D8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00412908                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00412908                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00412908                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00412948                 dd 0C0h, 46000000h, 0Bh, 0
.text:00412958                 dd 0C0h, 46000000h, 0Ch, 0
.text:00412968                 dd 0C0h, 46000000h, 26h, 0
.text:00412978                 dd 0C0h, 46000000h, 6, 0
.text:00412988                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00412988                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00412988                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004129C8                 dd 0C0h, 46000000h, 20403h, 0
.text:004129D8                 dd 0C0h, 46000000h, 20401h, 0
.text:004129E8                 dd 0C0h, 46000000h, 20412h, 0
.text:004129F8                 dd 0C0h, 46000000h, 20402h, 0
.text:00412A08                 dd 0C0h, 46000000h, 20411h, 0
.text:00412A18                 dd 0C0h, 46000000h, 2 dup(0)
.text:00412A28                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00412A28                 dd 10Dh, 0
.text:00412A48                 dd 0C0h, 46000000h, 127h, 0
.text:00412A58                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00412A58                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00412A58                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00412A98                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00412A98                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00412A98                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00412AD8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00412AE8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00412AF8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00412B08                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00412B18                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00412B28                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00412B38                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00412B48                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00412B58                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00412B68                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00412B78                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00412B88                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00412B98                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00412BA8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00412BB8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00412BC8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00412BD8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00412BE8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00412BF8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00412C08                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00412C18                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00412C28                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00412C38                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00412C48                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00412C58                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00412C68                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00412C78                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00412C88                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00412C98                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00412CA8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00412CB8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00412CC8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00412CD8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00412CE8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00412CF8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00412D08                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00412D08                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00412D30
.text:00412D30 ; =============== S U B R O U T I N E =======================================
.text:00412D30
.text:00412D30 ; Attributes: thunk
.text:00412D30
.text:00412D30 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00412D30 mbrtowc         proc near               ; CODE XREF: sub_408260+757↑p
.text:00412D30
.text:00412D30 DstCh           = dword ptr  4
.text:00412D30 SrcCh           = dword ptr  8
.text:00412D30 SizeInBytes     = dword ptr  0Ch
.text:00412D30 State           = dword ptr  10h
.text:00412D30
.text:00412D30                 jmp     ds:__imp_mbrtowc
.text:00412D30 mbrtowc         endp
.text:00412D30
.text:00412D30 ; ---------------------------------------------------------------------------
.text:00412D36                 align 10h
.text:00412D40
.text:00412D40 ; =============== S U B R O U T I N E =======================================
.text:00412D40
.text:00412D40 ; Attributes: bp-based frame
.text:00412D40
.text:00412D40 sub_412D40      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00412D40                 push    ebp
.text:00412D41                 mov     ecx, offset unk_415000
.text:00412D46                 cmp     ecx, offset unk_415000
.text:00412D4C                 mov     ebp, esp
.text:00412D4E                 jnb     short loc_412D66
.text:00412D50
.text:00412D50 loc_412D50:                             ; CODE XREF: sub_412D40+24↓j
.text:00412D50                 mov     edx, [ecx+4]
.text:00412D53                 mov     eax, [ecx]
.text:00412D55                 add     ecx, 8
.text:00412D58                 add     [edx+400000h], eax
.text:00412D5E                 cmp     ecx, offset unk_415000
.text:00412D64                 jb      short loc_412D50
.text:00412D66
.text:00412D66 loc_412D66:                             ; CODE XREF: sub_412D40+E↑j
.text:00412D66                 pop     ebp
.text:00412D67                 retn
.text:00412D67 sub_412D40      endp
.text:00412D67
.text:00412D67 ; ---------------------------------------------------------------------------
.text:00412D68                 align 10h
.text:00412D70
.text:00412D70 ; =============== S U B R O U T I N E =======================================
.text:00412D70
.text:00412D70 ; Attributes: bp-based frame
.text:00412D70
.text:00412D70 sub_412D70      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412D70                                         ; TopLevelExceptionFilter+D7↑p
.text:00412D70                 push    ebp
.text:00412D71                 mov     ebp, esp
.text:00412D73                 fninit
.text:00412D75                 pop     ebp
.text:00412D76                 retn
.text:00412D76 sub_412D70      endp
.text:00412D76
.text:00412D76 ; ---------------------------------------------------------------------------
.text:00412D77                 align 10h
.text:00412D80
.text:00412D80 ; =============== S U B R O U T I N E =======================================
.text:00412D80
.text:00412D80 ; Attributes: bp-based frame
.text:00412D80
.text:00412D80 ; void __cdecl sub_412D80()
.text:00412D80 sub_412D80      proc near               ; DATA XREF: .text:loc_412DC9↓o
.text:00412D80                                         ; sub_412E10:loc_412E3E↓o
.text:00412D80                 push    ebp
.text:00412D81                 mov     ebp, esp
.text:00412D83                 sub     esp, 8
.text:00412D86                 mov     eax, off_4140E4
.text:00412D8B                 mov     edx, [eax]
.text:00412D8D                 test    edx, edx
.text:00412D8F                 jnz     short loc_412D95
.text:00412D91
.text:00412D91 loc_412D91:                             ; CODE XREF: sub_412D80+2C↓j
.text:00412D91                 mov     esp, ebp
.text:00412D93                 pop     ebp
.text:00412D94                 retn
.text:00412D95 ; ---------------------------------------------------------------------------
.text:00412D95
.text:00412D95 loc_412D95:                             ; CODE XREF: sub_412D80+F↑j
.text:00412D95                                         ; sub_412D80+2A↓j
.text:00412D95                 call    dword ptr [eax]
.text:00412D97                 mov     edx, off_4140E4
.text:00412D9D                 mov     ecx, [edx+4]
.text:00412DA0                 lea     eax, [edx+4]
.text:00412DA3                 mov     off_4140E4, eax
.text:00412DA8                 test    ecx, ecx
.text:00412DAA                 jnz     short loc_412D95
.text:00412DAC                 jmp     short loc_412D91
.text:00412DAC sub_412D80      endp
.text:00412DAC
.text:00412DAC ; ---------------------------------------------------------------------------
.text:00412DAE                 align 10h
.text:00412DB0                 push    ebp
.text:00412DB1                 mov     ebp, esp
.text:00412DB3                 sub     esp, 8
.text:00412DB6                 mov     [ebp-4], ebx
.text:00412DB9                 mov     eax, ds:dword_413B90
.text:00412DBE                 cmp     eax, 0FFFFFFFFh
.text:00412DC1                 jz      short loc_412DEC
.text:00412DC3
.text:00412DC3 loc_412DC3:                             ; CODE XREF: .text:00412DF6↓j
.text:00412DC3                                         ; .text:00412E09↓j
.text:00412DC3                 test    eax, eax
.text:00412DC5                 mov     ebx, eax
.text:00412DC7                 jnz     short loc_412DE0
.text:00412DC9
.text:00412DC9 loc_412DC9:                             ; CODE XREF: .text:00412DEA↓j
.text:00412DC9                 mov     dword ptr [esp], offset sub_412D80
.text:00412DD0                 call    sub_401040
.text:00412DD5                 mov     ebx, [ebp-4]
.text:00412DD8                 mov     esp, ebp
.text:00412DDA                 pop     ebp
.text:00412DDB                 retn
.text:00412DDB ; ---------------------------------------------------------------------------
.text:00412DDC                 align 10h
.text:00412DE0
.text:00412DE0 loc_412DE0:                             ; CODE XREF: .text:00412DC7↑j
.text:00412DE0                                         ; .text:00412DE8↓j
.text:00412DE0                 call    ds:dword_413B90[ebx*4]
.text:00412DE7                 dec     ebx
.text:00412DE8                 jnz     short loc_412DE0
.text:00412DEA                 jmp     short loc_412DC9
.text:00412DEC ; ---------------------------------------------------------------------------
.text:00412DEC
.text:00412DEC loc_412DEC:                             ; CODE XREF: .text:00412DC1↑j
.text:00412DEC                 mov     ecx, ds:dword_413B94
.text:00412DF2                 xor     eax, eax
.text:00412DF4                 test    ecx, ecx
.text:00412DF6                 jz      short loc_412DC3
.text:00412DF8                 mov     edx, offset dword_413B90
.text:00412DFD                 lea     esi, [esi+0]
.text:00412E00
.text:00412E00 loc_412E00:                             ; CODE XREF: .text:00412E07↓j
.text:00412E00                 inc     eax
.text:00412E01                 mov     ecx, [edx+eax*4+4]
.text:00412E05                 test    ecx, ecx
.text:00412E07                 jnz     short loc_412E00
.text:00412E09                 jmp     short loc_412DC3
.text:00412E09 ; ---------------------------------------------------------------------------
.text:00412E0B                 align 10h
.text:00412E10
.text:00412E10 ; =============== S U B R O U T I N E =======================================
.text:00412E10
.text:00412E10 ; Attributes: bp-based frame
.text:00412E10
.text:00412E10 sub_412E10      proc near               ; CODE XREF: sub_401E90+21↑p
.text:00412E10
.text:00412E10 var_8           = dword ptr -8
.text:00412E10 var_4           = dword ptr -4
.text:00412E10
.text:00412E10                 push    ebp
.text:00412E11                 mov     ebp, esp
.text:00412E13                 sub     esp, 8
.text:00412E16                 mov     [ebp+var_4], ebx
.text:00412E19                 mov     edx, dword_4140E0
.text:00412E1F                 test    edx, edx
.text:00412E21                 jnz     short loc_412E4A
.text:00412E23                 mov     eax, ds:dword_413B90
.text:00412E28                 mov     edx, 1
.text:00412E2D                 mov     dword_4140E0, edx
.text:00412E33                 cmp     eax, 0FFFFFFFFh
.text:00412E36                 jz      short loc_412E5D
.text:00412E38
.text:00412E38 loc_412E38:                             ; CODE XREF: sub_412E10+57↓j
.text:00412E38                                         ; sub_412E10+69↓j
.text:00412E38                 test    eax, eax
.text:00412E3A                 mov     ebx, eax
.text:00412E3C                 jnz     short loc_412E51
.text:00412E3E
.text:00412E3E loc_412E3E:                             ; CODE XREF: sub_412E10+4B↓j
.text:00412E3E                 mov     [esp+8+var_8], offset sub_412D80 ; void (__cdecl *)()
.text:00412E45                 call    sub_401040
.text:00412E4A
.text:00412E4A loc_412E4A:                             ; CODE XREF: sub_412E10+11↑j
.text:00412E4A                 mov     ebx, [ebp+var_4]
.text:00412E4D                 mov     esp, ebp
.text:00412E4F                 pop     ebp
.text:00412E50                 retn
.text:00412E51 ; ---------------------------------------------------------------------------
.text:00412E51
.text:00412E51 loc_412E51:                             ; CODE XREF: sub_412E10+2C↑j
.text:00412E51                                         ; sub_412E10+49↓j
.text:00412E51                 call    ds:dword_413B90[ebx*4]
.text:00412E58                 dec     ebx
.text:00412E59                 jnz     short loc_412E51
.text:00412E5B                 jmp     short loc_412E3E
.text:00412E5D ; ---------------------------------------------------------------------------
.text:00412E5D
.text:00412E5D loc_412E5D:                             ; CODE XREF: sub_412E10+26↑j
.text:00412E5D                 mov     ecx, ds:dword_413B94
.text:00412E63                 xor     eax, eax
.text:00412E65                 test    ecx, ecx
.text:00412E67                 jz      short loc_412E38
.text:00412E69                 mov     edx, offset dword_413B90
.text:00412E6E                 mov     esi, esi
.text:00412E70
.text:00412E70 loc_412E70:                             ; CODE XREF: sub_412E10+67↓j
.text:00412E70                 inc     eax
.text:00412E71                 mov     ebx, [edx+eax*4+4]
.text:00412E75                 test    ebx, ebx
.text:00412E77                 jnz     short loc_412E70
.text:00412E79                 jmp     short loc_412E38
.text:00412E79 sub_412E10      endp
.text:00412E79
.text:00412E79 ; ---------------------------------------------------------------------------
.text:00412E7B                 align 10h
.text:00412E80
.text:00412E80 ; =============== S U B R O U T I N E =======================================
.text:00412E80
.text:00412E80 ; Attributes: info_from_lumina
.text:00412E80
.text:00412E80 ; void *__cdecl _alloca(size_t Size)
.text:00412E80 __alloca        proc near               ; CODE XREF: sub_401E90+1C↑p
.text:00412E80                 push    ecx
.text:00412E81                 mov     ecx, esp
.text:00412E83                 add     ecx, 8
.text:00412E86
.text:00412E86 loc_412E86:                             ; CODE XREF: __alloca+1B↓j
.text:00412E86                 cmp     eax, 1000h
.text:00412E8B                 jb      short loc_412E9D
.text:00412E8D                 sub     ecx, 1000h
.text:00412E93                 or      dword ptr [ecx], 0
.text:00412E96                 sub     eax, 1000h
.text:00412E9B                 jmp     short loc_412E86
.text:00412E9D ; ---------------------------------------------------------------------------
.text:00412E9D
.text:00412E9D loc_412E9D:                             ; CODE XREF: __alloca+B↑j
.text:00412E9D                 sub     ecx, eax
.text:00412E9F                 or      dword ptr [ecx], 0
.text:00412EA2                 mov     eax, esp
.text:00412EA4                 mov     esp, ecx
.text:00412EA6                 mov     ecx, [eax]
.text:00412EA8                 mov     eax, [eax+4]
.text:00412EAB                 jmp     eax
.text:00412EAB __alloca        endp
.text:00412EAB
.text:00412EAB ; ---------------------------------------------------------------------------
.text:00412EAD                 align 10h
.text:00412EB0
.text:00412EB0 ; =============== S U B R O U T I N E =======================================
.text:00412EB0
.text:00412EB0 ; Attributes: bp-based frame
.text:00412EB0
.text:00412EB0 sub_412EB0      proc near               ; CODE XREF: sub_404EE0+24↑p
.text:00412EB0                                         ; sub_4070A0+38↑p ...
.text:00412EB0
.text:00412EB0 var_34          = dword ptr -34h
.text:00412EB0 var_2C          = dword ptr -2Ch
.text:00412EB0 var_28          = dword ptr -28h
.text:00412EB0 var_24          = dword ptr -24h
.text:00412EB0 var_20          = dword ptr -20h
.text:00412EB0 var_1C          = dword ptr -1Ch
.text:00412EB0 var_18          = dword ptr -18h
.text:00412EB0 var_14          = dword ptr -14h
.text:00412EB0 arg_0           = dword ptr  8
.text:00412EB0 arg_4           = dword ptr  0Ch
.text:00412EB0 arg_8           = dword ptr  10h
.text:00412EB0 arg_C           = dword ptr  14h
.text:00412EB0
.text:00412EB0                 push    ebp
.text:00412EB1                 mov     ebp, esp
.text:00412EB3                 push    edi
.text:00412EB4                 push    esi
.text:00412EB5                 push    ebx
.text:00412EB6                 sub     esp, 2Ch
.text:00412EB9                 mov     edx, [ebp+arg_C]
.text:00412EBC                 mov     [ebp+var_20], 0
.text:00412EC3                 mov     ecx, [ebp+arg_0]
.text:00412EC6                 mov     ebx, [ebp+arg_4]
.text:00412EC9                 mov     [ebp+var_1C], 0
.text:00412ED0                 mov     eax, [ebp+arg_8]
.text:00412ED3                 test    edx, edx
.text:00412ED5                 mov     [ebp+var_24], edx
.text:00412ED8                 mov     edi, ebx
.text:00412EDA                 mov     esi, eax
.text:00412EDC                 mov     [ebp+var_28], ecx
.text:00412EDF                 jnz     short loc_412F40
.text:00412EE1                 cmp     eax, ebx
.text:00412EE3                 jbe     short loc_412F20
.text:00412EE5                 mov     eax, ecx
.text:00412EE7                 mov     edx, ebx
.text:00412EE9                 div     esi
.text:00412EEB
.text:00412EEB loc_412EEB:                             ; CODE XREF: sub_412EB0+8B↓j
.text:00412EEB                 mov     [ebp+var_28], edx
.text:00412EEE                 lea     ecx, [ebp+var_18]
.text:00412EF1                 test    ecx, ecx
.text:00412EF3                 jz      short loc_412F0E
.text:00412EF5                 mov     [ebp+var_1C], 0
.text:00412EFC
.text:00412EFC loc_412EFC:                             ; CODE XREF: sub_412EB0+DA↓j
.text:00412EFC                 mov     eax, [ebp+var_28]
.text:00412EFF                 mov     [ebp+var_20], eax
.text:00412F02                 mov     edx, [ebp+var_20]
.text:00412F05                 mov     ecx, [ebp+var_1C]
.text:00412F08                 mov     [ebp+var_18], edx
.text:00412F0B                 mov     [ebp+var_14], ecx
.text:00412F0E
.text:00412F0E loc_412F0E:                             ; CODE XREF: sub_412EB0+43↑j
.text:00412F0E                                         ; sub_412EB0+A7↓j ...
.text:00412F0E                 mov     eax, [ebp+var_18]
.text:00412F11                 mov     edx, [ebp+var_14]
.text:00412F14                 add     esp, 2Ch
.text:00412F17                 pop     ebx
.text:00412F18                 pop     esi
.text:00412F19                 pop     edi
.text:00412F1A                 pop     ebp
.text:00412F1B                 retn
.text:00412F1B ; ---------------------------------------------------------------------------
.text:00412F1C                 align 10h
.text:00412F20
.text:00412F20 loc_412F20:                             ; CODE XREF: sub_412EB0+33↑j
.text:00412F20                 test    eax, eax
.text:00412F22                 jnz     short loc_412F2F
.text:00412F24                 mov     eax, 1
.text:00412F29                 xor     edx, edx
.text:00412F2B                 div     esi
.text:00412F2D                 mov     esi, eax
.text:00412F2F
.text:00412F2F loc_412F2F:                             ; CODE XREF: sub_412EB0+72↑j
.text:00412F2F                 mov     eax, edi
.text:00412F31                 mov     edx, [ebp+var_24]
.text:00412F34                 div     esi
.text:00412F36                 mov     eax, [ebp+var_28]
.text:00412F39                 div     esi
.text:00412F3B                 jmp     short loc_412EEB
.text:00412F3B ; ---------------------------------------------------------------------------
.text:00412F3D                 align 10h
.text:00412F40
.text:00412F40 loc_412F40:                             ; CODE XREF: sub_412EB0+2F↑j
.text:00412F40                 cmp     [ebp+var_24], ebx
.text:00412F43                 jbe     short loc_412F60
.text:00412F45                 mov     [ebp+var_20], ecx
.text:00412F48
.text:00412F48 loc_412F48:                             ; CODE XREF: sub_412EB0+15B↓j
.text:00412F48                 mov     [ebp+var_1C], edi
.text:00412F4B                 mov     eax, [ebp+var_20]
.text:00412F4E                 mov     edx, [ebp+var_1C]
.text:00412F51                 mov     [ebp+var_18], eax
.text:00412F54                 mov     [ebp+var_14], edx
.text:00412F57                 jmp     short loc_412F0E
.text:00412F57 ; ---------------------------------------------------------------------------
.text:00412F59                 align 10h
.text:00412F60
.text:00412F60 loc_412F60:                             ; CODE XREF: sub_412EB0+93↑j
.text:00412F60                 bsr     eax, [ebp+var_24]
.text:00412F64                 mov     ebx, eax
.text:00412F66                 xor     ebx, 1Fh
.text:00412F69                 jnz     short loc_412F90
.text:00412F6B                 cmp     edi, [ebp+var_24]
.text:00412F6E                 ja      short loc_412F75
.text:00412F70                 cmp     [ebp+var_28], esi
.text:00412F73                 jb      short loc_412F80
.text:00412F75
.text:00412F75 loc_412F75:                             ; CODE XREF: sub_412EB0+BE↑j
.text:00412F75                 mov     edx, [ebp+var_28]
.text:00412F78                 sub     edx, esi
.text:00412F7A                 sbb     edi, [ebp+var_24]
.text:00412F7D                 mov     [ebp+var_28], edx
.text:00412F80
.text:00412F80 loc_412F80:                             ; CODE XREF: sub_412EB0+C3↑j
.text:00412F80                 lea     ecx, [ebp+var_18]
.text:00412F83                 test    ecx, ecx
.text:00412F85                 jz      short loc_412F0E
.text:00412F87                 mov     [ebp+var_1C], edi
.text:00412F8A                 jmp     loc_412EFC
.text:00412F8A ; ---------------------------------------------------------------------------
.text:00412F8F                 align 10h
.text:00412F90
.text:00412F90 loc_412F90:                             ; CODE XREF: sub_412EB0+B9↑j
.text:00412F90                 mov     edx, [ebp+var_24]
.text:00412F93                 mov     eax, 20h ; ' '
.text:00412F98                 mov     cl, bl
.text:00412F9A                 sub     eax, ebx
.text:00412F9C                 mov     [ebp+var_2C], eax
.text:00412F9F                 shl     edx, cl
.text:00412FA1                 mov     eax, esi
.text:00412FA3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FA7                 shr     eax, cl
.text:00412FA9                 mov     cl, bl
.text:00412FAB                 shl     esi, cl
.text:00412FAD                 or      edx, eax
.text:00412FAF                 mov     eax, [ebp+var_28]
.text:00412FB2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FB6                 mov     [ebp+var_24], edx
.text:00412FB9                 mov     edx, edi
.text:00412FBB                 shr     edx, cl
.text:00412FBD                 mov     cl, bl
.text:00412FBF                 shl     edi, cl
.text:00412FC1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FC5                 shr     eax, cl
.text:00412FC7                 or      edi, eax
.text:00412FC9                 mov     eax, edi
.text:00412FCB                 mov     cl, bl
.text:00412FCD                 div     [ebp+var_24]
.text:00412FD0                 shl     [ebp+var_28], cl
.text:00412FD3                 mov     edi, edx
.text:00412FD5                 mul     esi
.text:00412FD7                 mov     [ebp+var_34], eax
.text:00412FDA                 cmp     edx, edi
.text:00412FDC                 ja      short loc_413018
.text:00412FDE                 cmp     edx, edi
.text:00412FE0                 jz      short loc_413010
.text:00412FE2
.text:00412FE2 loc_412FE2:                             ; CODE XREF: sub_412EB0+166↓j
.text:00412FE2                                         ; sub_412EB0+173↓j
.text:00412FE2                 lea     eax, [ebp+var_18]
.text:00412FE5                 test    eax, eax
.text:00412FE7                 jz      loc_412F0E
.text:00412FED                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412FF1                 mov     eax, [ebp+var_28]
.text:00412FF4                 sub     eax, [ebp+var_34]
.text:00412FF7                 sbb     edi, edx
.text:00412FF9                 mov     [ebp+var_28], eax
.text:00412FFC                 mov     edx, edi
.text:00412FFE                 shl     edx, cl
.text:00413000                 mov     cl, bl
.text:00413002                 shr     eax, cl
.text:00413004                 or      edx, eax
.text:00413006                 mov     [ebp+var_20], edx
.text:00413009                 shr     edi, cl
.text:0041300B                 jmp     loc_412F48
.text:00413010 ; ---------------------------------------------------------------------------
.text:00413010
.text:00413010 loc_413010:                             ; CODE XREF: sub_412EB0+130↑j
.text:00413010                 mov     eax, [ebp+var_28]
.text:00413013                 cmp     [ebp+var_34], eax
.text:00413016                 jbe     short loc_412FE2
.text:00413018
.text:00413018 loc_413018:                             ; CODE XREF: sub_412EB0+12C↑j
.text:00413018                 mov     ecx, [ebp+var_34]
.text:0041301B                 sub     ecx, esi
.text:0041301D                 sbb     edx, [ebp+var_24]
.text:00413020                 mov     [ebp+var_34], ecx
.text:00413023                 jmp     short loc_412FE2
.text:00413023 sub_412EB0      endp
.text:00413023
.text:00413023 ; ---------------------------------------------------------------------------
.text:00413025                 align 10h
.text:00413030
.text:00413030 ; =============== S U B R O U T I N E =======================================
.text:00413030
.text:00413030 ; Attributes: bp-based frame
.text:00413030
.text:00413030 sub_413030      proc near               ; CODE XREF: sub_4070A0+58↑p
.text:00413030                                         ; sub_40A490+17E↑p ...
.text:00413030
.text:00413030 var_24          = dword ptr -24h
.text:00413030 var_20          = dword ptr -20h
.text:00413030 var_1C          = dword ptr -1Ch
.text:00413030 var_18          = dword ptr -18h
.text:00413030 var_14          = dword ptr -14h
.text:00413030 var_C           = dword ptr -0Ch
.text:00413030 var_8           = dword ptr -8
.text:00413030 var_4           = dword ptr -4
.text:00413030 arg_0           = dword ptr  8
.text:00413030 arg_4           = dword ptr  0Ch
.text:00413030 arg_8           = dword ptr  10h
.text:00413030 arg_C           = dword ptr  14h
.text:00413030
.text:00413030                 push    ebp
.text:00413031                 mov     ebp, esp
.text:00413033                 sub     esp, 28h
.text:00413036                 mov     [ebp+var_C], ebx
.text:00413039                 mov     edx, [ebp+arg_C]
.text:0041303C                 mov     ecx, [ebp+arg_0]
.text:0041303F                 mov     [ebp+var_8], esi
.text:00413042                 mov     eax, [ebp+arg_8]
.text:00413045                 test    edx, edx
.text:00413047                 mov     [ebp+var_4], edi
.text:0041304A                 mov     ebx, [ebp+arg_4]
.text:0041304D                 mov     esi, eax
.text:0041304F                 mov     [ebp+var_18], 0
.text:00413056                 mov     [ebp+var_14], 0
.text:0041305D                 mov     [ebp+var_1C], ecx
.text:00413060                 jnz     short loc_4130B2
.text:00413062                 cmp     eax, ebx
.text:00413064                 jbe     short loc_413090
.text:00413066                 mov     eax, ecx
.text:00413068                 mov     edx, ebx
.text:0041306A                 div     esi
.text:0041306C                 mov     edi, eax
.text:0041306E                 mov     esi, esi
.text:00413070
.text:00413070 loc_413070:                             ; CODE XREF: sub_413030+88↓j
.text:00413070                                         ; sub_413030+A4↓j ...
.text:00413070                 xor     ecx, ecx
.text:00413072
.text:00413072 loc_413072:                             ; CODE XREF: sub_413030+80↓j
.text:00413072                 mov     [ebp+var_18], edi
.text:00413075                 mov     ebx, [ebp+var_C]
.text:00413078                 mov     eax, [ebp+var_18]
.text:0041307B                 mov     [ebp+var_14], ecx
.text:0041307E                 mov     esi, [ebp+var_8]
.text:00413081                 mov     edx, [ebp+var_14]
.text:00413084                 mov     edi, [ebp+var_4]
.text:00413087                 mov     esp, ebp
.text:00413089                 pop     ebp
.text:0041308A                 retn
.text:0041308A ; ---------------------------------------------------------------------------
.text:0041308B                 align 10h
.text:00413090
.text:00413090 loc_413090:                             ; CODE XREF: sub_413030+34↑j
.text:00413090                 test    eax, eax
.text:00413092                 jnz     short loc_4130A1
.text:00413094                 mov     eax, 1
.text:00413099                 xor     ecx, ecx
.text:0041309B                 xor     edx, edx
.text:0041309D                 div     ecx
.text:0041309F                 mov     esi, eax
.text:004130A1
.text:004130A1 loc_4130A1:                             ; CODE XREF: sub_413030+62↑j
.text:004130A1                 mov     eax, ebx
.text:004130A3                 xor     edx, edx
.text:004130A5                 div     esi
.text:004130A7                 mov     ecx, eax
.text:004130A9                 mov     eax, [ebp+var_1C]
.text:004130AC                 div     esi
.text:004130AE                 mov     edi, eax
.text:004130B0                 jmp     short loc_413072
.text:004130B2 ; ---------------------------------------------------------------------------
.text:004130B2
.text:004130B2 loc_4130B2:                             ; CODE XREF: sub_413030+30↑j
.text:004130B2                 cmp     edx, ebx
.text:004130B4                 jbe     short loc_4130C0
.text:004130B6                 xor     edi, edi
.text:004130B8                 jmp     short loc_413070
.text:004130B8 ; ---------------------------------------------------------------------------
.text:004130BA                 align 10h
.text:004130C0
.text:004130C0 loc_4130C0:                             ; CODE XREF: sub_413030+84↑j
.text:004130C0                 bsr     eax, edx
.text:004130C3                 xor     eax, 1Fh
.text:004130C6                 mov     [ebp+var_20], eax
.text:004130C9                 jnz     short loc_4130E0
.text:004130CB                 cmp     ebx, edx
.text:004130CD                 ja      short loc_4130D6
.text:004130CF                 xor     edi, edi
.text:004130D1                 cmp     [ebp+var_1C], esi
.text:004130D4                 jb      short loc_413070
.text:004130D6
.text:004130D6 loc_4130D6:                             ; CODE XREF: sub_413030+9D↑j
.text:004130D6                 mov     edi, 1
.text:004130DB                 jmp     short loc_413070
.text:004130DB ; ---------------------------------------------------------------------------
.text:004130DD                 align 10h
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: sub_413030+99↑j
.text:004130E0                 mov     eax, [ebp+var_20]
.text:004130E3                 mov     ecx, 20h ; ' '
.text:004130E8                 sub     ecx, eax
.text:004130EA                 mov     [ebp+var_24], ecx
.text:004130ED                 mov     eax, esi
.text:004130EF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004130F3                 shl     edx, cl
.text:004130F5                 mov     edi, edx
.text:004130F7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004130FB                 mov     edx, ebx
.text:004130FD                 shr     eax, cl
.text:004130FF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00413103                 or      edi, eax
.text:00413105                 mov     eax, [ebp+var_1C]
.text:00413108                 shl     esi, cl
.text:0041310A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041310E                 shr     edx, cl
.text:00413110                 movzx   ecx, byte ptr [ebp+var_20]
.text:00413114                 shl     ebx, cl
.text:00413116                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041311A                 shr     eax, cl
.text:0041311C                 or      ebx, eax
.text:0041311E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00413122                 mov     eax, ebx
.text:00413124                 div     edi
.text:00413126                 mov     ebx, edx
.text:00413128                 mov     edi, eax
.text:0041312A                 shl     [ebp+var_1C], cl
.text:0041312D                 mul     esi
.text:0041312F                 cmp     edx, ebx
.text:00413131                 ja      short loc_413144
.text:00413133                 cmp     edx, ebx
.text:00413135                 jnz     loc_413070
.text:0041313B                 cmp     eax, [ebp+var_1C]
.text:0041313E                 jbe     loc_413070
.text:00413144
.text:00413144 loc_413144:                             ; CODE XREF: sub_413030+101↑j
.text:00413144                 dec     edi
.text:00413145                 jmp     loc_413070
.text:00413145 sub_413030      endp
.text:00413145
.text:00413145 ; ---------------------------------------------------------------------------
.text:0041314A                 align 10h
.text:00413150
.text:00413150 ; =============== S U B R O U T I N E =======================================
.text:00413150
.text:00413150 ; Attributes: thunk
.text:00413150
.text:00413150 ; int __cdecl close(int FileHandle)
.text:00413150 _close          proc near               ; CODE XREF: sub_403500+95↑p
.text:00413150                                         ; sub_403500+108↑p ...
.text:00413150
.text:00413150 FileHandle      = dword ptr  4
.text:00413150
.text:00413150                 jmp     ds:__imp__close
.text:00413150 _close          endp
.text:00413150
.text:00413150 ; ---------------------------------------------------------------------------
.text:00413156                 align 10h
.text:00413160
.text:00413160 ; =============== S U B R O U T I N E =======================================
.text:00413160
.text:00413160 ; Attributes: thunk
.text:00413160
.text:00413160 ; int open(const char *FileName, int OpenFlag, ...)
.text:00413160 _open           proc near               ; CODE XREF: sub_403500+21↑p
.text:00413160                                         ; sub_403500+13B↑p ...
.text:00413160
.text:00413160 FileName        = dword ptr  4
.text:00413160 OpenFlag        = dword ptr  8
.text:00413160
.text:00413160                 jmp     ds:__imp__open
.text:00413160 _open           endp
.text:00413160
.text:00413160 ; ---------------------------------------------------------------------------
.text:00413166                 align 10h
.text:00413170
.text:00413170 ; =============== S U B R O U T I N E =======================================
.text:00413170
.text:00413170 ; Attributes: thunk
.text:00413170
.text:00413170 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00413170 _stricmp        proc near               ; CODE XREF: sub_40A960+46F↑p
.text:00413170                                         ; sub_40CB50+2E↑p ...
.text:00413170
.text:00413170 String1         = dword ptr  4
.text:00413170 String2         = dword ptr  8
.text:00413170
.text:00413170                 jmp     ds:__imp__stricmp
.text:00413170 _stricmp        endp
.text:00413170
.text:00413170 ; ---------------------------------------------------------------------------
.text:00413176                 align 10h
.text:00413180
.text:00413180 ; =============== S U B R O U T I N E =======================================
.text:00413180
.text:00413180 ; Attributes: thunk
.text:00413180
.text:00413180 ; char *__cdecl strdup(const char *String)
.text:00413180 _strdup         proc near               ; CODE XREF: sub_40C780+101↑p
.text:00413180                                         ; .text:0040C9EA↑p ...
.text:00413180
.text:00413180 String          = dword ptr  4
.text:00413180
.text:00413180                 jmp     ds:__imp__strdup
.text:00413180 _strdup         endp
.text:00413180
.text:00413180 ; ---------------------------------------------------------------------------
.text:00413186                 align 10h
.text:00413190
.text:00413190 ; =============== S U B R O U T I N E =======================================
.text:00413190
.text:00413190 ; Attributes: thunk
.text:00413190
.text:00413190 ; int __cdecl getpid()
.text:00413190 _getpid         proc near               ; CODE XREF: sub_411200+84↑p
.text:00413190                 jmp     ds:__imp__getpid
.text:00413190 _getpid         endp
.text:00413190
.text:00413190 ; ---------------------------------------------------------------------------
.text:00413196                 align 10h
.text:004131A0
.text:004131A0 ; =============== S U B R O U T I N E =======================================
.text:004131A0
.text:004131A0 ; Attributes: thunk
.text:004131A0
.text:004131A0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:004131A0 _chmod          proc near               ; CODE XREF: sub_411630+41↑j
.text:004131A0
.text:004131A0 FileName        = dword ptr  4
.text:004131A0 AccessMode      = dword ptr  8
.text:004131A0
.text:004131A0                 jmp     ds:__imp__chmod
.text:004131A0 _chmod          endp
.text:004131A0
.text:004131A0 ; ---------------------------------------------------------------------------
.text:004131A6                 align 10h
.text:004131B0                 jmp     ds:__set_app_type
.text:004131B0 ; ---------------------------------------------------------------------------
.text:004131B6                 align 10h
.text:004131C0
.text:004131C0 ; =============== S U B R O U T I N E =======================================
.text:004131C0
.text:004131C0 ; Attributes: thunk
.text:004131C0
.text:004131C0 ; void __cdecl cexit()
.text:004131C0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004131C0                 jmp     ds:__imp__cexit
.text:004131C0 _cexit          endp
.text:004131C0
.text:004131C0 ; ---------------------------------------------------------------------------
.text:004131C6                 align 10h
.text:004131D0
.text:004131D0 ; =============== S U B R O U T I N E =======================================
.text:004131D0
.text:004131D0 ; Attributes: thunk
.text:004131D0
.text:004131D0 ; char ***__cdecl _p__environ()
.text:004131D0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004131D0                 jmp     ds:__imp___p__environ
.text:004131D0 __p__environ    endp
.text:004131D0
.text:004131D0 ; ---------------------------------------------------------------------------
.text:004131D6                 align 10h
.text:004131E0
.text:004131E0 ; =============== S U B R O U T I N E =======================================
.text:004131E0
.text:004131E0 ; Attributes: thunk
.text:004131E0
.text:004131E0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004131E0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004131E0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004131E0
.text:004131E0 Signal          = dword ptr  4
.text:004131E0 Function        = dword ptr  8
.text:004131E0
.text:004131E0                 jmp     ds:__imp_signal
.text:004131E0 signal          endp
.text:004131E0
.text:004131E0 ; ---------------------------------------------------------------------------
.text:004131E6                 align 10h
.text:004131F0
.text:004131F0 ; =============== S U B R O U T I N E =======================================
.text:004131F0
.text:004131F0 ; Attributes: thunk
.text:004131F0
.text:004131F0 ; int *__cdecl _p__fmode()
.text:004131F0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004131F0                 jmp     ds:__imp___p__fmode
.text:004131F0 __p__fmode      endp
.text:004131F0
.text:004131F0 ; ---------------------------------------------------------------------------
.text:004131F6                 align 10h
.text:00413200
.text:00413200 ; =============== S U B R O U T I N E =======================================
.text:00413200
.text:00413200 ; Attributes: thunk
.text:00413200
.text:00413200 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00413200 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00413200                                         ; sub_401080+90↑p ...
.text:00413200
.text:00413200 FileHandle      = dword ptr  4
.text:00413200 Mode            = dword ptr  8
.text:00413200
.text:00413200                 jmp     ds:__imp__setmode
.text:00413200 _setmode        endp
.text:00413200
.text:00413200 ; ---------------------------------------------------------------------------
.text:00413206                 align 10h
.text:00413210
.text:00413210 ; =============== S U B R O U T I N E =======================================
.text:00413210
.text:00413210 ; Attributes: thunk
.text:00413210
.text:00413210 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00413210                 jmp     ds:__imp___getmainargs
.text:00413210 __getmainargs   endp
.text:00413210
.text:00413210 ; ---------------------------------------------------------------------------
.text:00413216                 align 10h
.text:00413220
.text:00413220 ; =============== S U B R O U T I N E =======================================
.text:00413220
.text:00413220 ; Attributes: thunk
.text:00413220
.text:00413220 ; int *__cdecl errno()
.text:00413220 _errno          proc near               ; CODE XREF: sub_401E90+5DD↑p
.text:00413220                                         ; sub_401E90+620↑p ...
.text:00413220                 jmp     ds:__imp__errno
.text:00413220 _errno          endp
.text:00413220
.text:00413220 ; ---------------------------------------------------------------------------
.text:00413226                 align 10h
.text:00413230
.text:00413230 ; =============== S U B R O U T I N E =======================================
.text:00413230
.text:00413230 ; Attributes: thunk
.text:00413230
.text:00413230 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00413230 setlocale       proc near               ; CODE XREF: sub_401E90+81↑p
.text:00413230
.text:00413230 Category        = dword ptr  4
.text:00413230 Locale          = dword ptr  8
.text:00413230
.text:00413230                 jmp     ds:__imp_setlocale
.text:00413230 setlocale       endp
.text:00413230
.text:00413230 ; ---------------------------------------------------------------------------
.text:00413236                 align 10h
.text:00413240
.text:00413240 ; =============== S U B R O U T I N E =======================================
.text:00413240
.text:00413240 ; Attributes: noreturn thunk
.text:00413240
.text:00413240 ; void __cdecl __noreturn exit(int Code)
.text:00413240 exit            proc near               ; CODE XREF: sub_401E90:loc_401FF6↑p
.text:00413240                                         ; .text:0040268B↑p ...
.text:00413240
.text:00413240 Code            = dword ptr  4
.text:00413240
.text:00413240                 jmp     ds:__imp_exit
.text:00413240 exit            endp
.text:00413240
.text:00413240 ; ---------------------------------------------------------------------------
.text:00413246                 align 10h
.text:00413250
.text:00413250 ; =============== S U B R O U T I N E =======================================
.text:00413250
.text:00413250 ; Attributes: thunk
.text:00413250
.text:00413250 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00413250 fputs           proc near               ; CODE XREF: sub_401E90+1FC↑p
.text:00413250                                         ; sub_401E90+21E↑p ...
.text:00413250
.text:00413250 Buffer          = dword ptr  4
.text:00413250 Stream          = dword ptr  8
.text:00413250
.text:00413250                 jmp     ds:__imp_fputs
.text:00413250 fputs           endp
.text:00413250
.text:00413250 ; ---------------------------------------------------------------------------
.text:00413256                 align 10h
.text:00413260
.text:00413260 ; =============== S U B R O U T I N E =======================================
.text:00413260
.text:00413260 ; Attributes: thunk
.text:00413260
.text:00413260 ; int printf(const char *const Format, ...)
.text:00413260 printf          proc near               ; CODE XREF: sub_401E90+1DA↑p
.text:00413260                                         ; sub_401E90+329↑p ...
.text:00413260
.text:00413260 Format          = dword ptr  4
.text:00413260
.text:00413260                 jmp     ds:__imp_printf
.text:00413260 printf          endp
.text:00413260
.text:00413260 ; ---------------------------------------------------------------------------
.text:00413266                 align 10h
.text:00413270
.text:00413270 ; =============== S U B R O U T I N E =======================================
.text:00413270
.text:00413270 ; Attributes: thunk
.text:00413270
.text:00413270 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00413270 fprintf         proc near               ; CODE XREF: sub_401E90+15A↑p
.text:00413270                                         ; .text:00402683↑p ...
.text:00413270
.text:00413270 Stream          = dword ptr  4
.text:00413270 Format          = dword ptr  8
.text:00413270
.text:00413270                 jmp     ds:__imp_fprintf
.text:00413270 fprintf         endp
.text:00413270
.text:00413270 ; ---------------------------------------------------------------------------
.text:00413276                 align 10h
.text:00413280
.text:00413280 ; =============== S U B R O U T I N E =======================================
.text:00413280
.text:00413280 ; Attributes: thunk
.text:00413280
.text:00413280 ; void __cdecl free(void *Block)
.text:00413280 free            proc near               ; CODE XREF: sub_403380+E3↑j
.text:00413280                                         ; sub_403670+1C2↑p ...
.text:00413280
.text:00413280 Block           = dword ptr  4
.text:00413280
.text:00413280                 jmp     ds:__imp_free
.text:00413280 free            endp
.text:00413280
.text:00413280 ; ---------------------------------------------------------------------------
.text:00413286                 align 10h
.text:00413290
.text:00413290 ; =============== S U B R O U T I N E =======================================
.text:00413290
.text:00413290 ; Attributes: noreturn thunk
.text:00413290
.text:00413290 ; void __cdecl __noreturn abort()
.text:00413290 abort           proc near               ; CODE XREF: sub_402B60:loc_402DB1↑p
.text:00413290                                         ; sub_403380:loc_403419↑p ...
.text:00413290                 jmp     ds:__imp_abort
.text:00413290 abort           endp
.text:00413290
.text:00413290 ; ---------------------------------------------------------------------------
.text:00413296                 align 10h
.text:004132A0
.text:004132A0 ; =============== S U B R O U T I N E =======================================
.text:004132A0
.text:004132A0 ; Attributes: thunk
.text:004132A0
.text:004132A0 ; size_t __cdecl strlen(const char *Str)
.text:004132A0 strlen          proc near               ; CODE XREF: sub_403380+3B↑p
.text:004132A0                                         ; sub_403380+45↑p ...
.text:004132A0
.text:004132A0 Str             = dword ptr  4
.text:004132A0
.text:004132A0                 jmp     ds:__imp_strlen
.text:004132A0 strlen          endp
.text:004132A0
.text:004132A0 ; ---------------------------------------------------------------------------
.text:004132A6                 align 10h
.text:004132B0
.text:004132B0 ; =============== S U B R O U T I N E =======================================
.text:004132B0
.text:004132B0 ; Attributes: thunk
.text:004132B0
.text:004132B0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004132B0 realloc         proc near               ; CODE XREF: sub_404A10+35↑p
.text:004132B0                                         ; sub_404BB0+60↑p ...
.text:004132B0
.text:004132B0 Block           = dword ptr  4
.text:004132B0 Size            = dword ptr  8
.text:004132B0
.text:004132B0                 jmp     ds:__imp_realloc
.text:004132B0 realloc         endp
.text:004132B0
.text:004132B0 ; ---------------------------------------------------------------------------
.text:004132B6                 align 10h
.text:004132C0
.text:004132C0 ; =============== S U B R O U T I N E =======================================
.text:004132C0
.text:004132C0 ; Attributes: thunk
.text:004132C0
.text:004132C0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:004132C0 memmove         proc near               ; CODE XREF: sub_403A80+B2↑p
.text:004132C0                                         ; sub_403A80+1B2↑p ...
.text:004132C0
.text:004132C0 Src             = dword ptr  8
.text:004132C0 Size            = dword ptr  0Ch
.text:004132C0
.text:004132C0                 jmp     ds:__imp_memmove
.text:004132C0 memmove         endp
.text:004132C0
.text:004132C0 ; ---------------------------------------------------------------------------
.text:004132C6                 align 10h
.text:004132D0
.text:004132D0 ; =============== S U B R O U T I N E =======================================
.text:004132D0
.text:004132D0 ; Attributes: thunk
.text:004132D0
.text:004132D0 ; void *__cdecl malloc(size_t Size)
.text:004132D0 malloc          proc near               ; CODE XREF: sub_403670+2A↑p
.text:004132D0                                         ; sub_403670+156↑p ...
.text:004132D0
.text:004132D0 Size            = dword ptr  4
.text:004132D0
.text:004132D0                 jmp     ds:__imp_malloc
.text:004132D0 malloc          endp
.text:004132D0
.text:004132D0 ; ---------------------------------------------------------------------------
.text:004132D6                 align 10h
.text:004132E0
.text:004132E0 ; =============== S U B R O U T I N E =======================================
.text:004132E0
.text:004132E0 ; Attributes: thunk
.text:004132E0
.text:004132E0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004132E0 strrchr         proc near               ; CODE XREF: sub_403A80+1C2↑p
.text:004132E0                                         ; sub_40A960+CB↑p ...
.text:004132E0
.text:004132E0 Str             = dword ptr  4
.text:004132E0
.text:004132E0                 jmp     ds:__imp_strrchr
.text:004132E0 strrchr         endp
.text:004132E0
.text:004132E0 ; ---------------------------------------------------------------------------
.text:004132E6                 align 10h
.text:004132F0
.text:004132F0 ; =============== S U B R O U T I N E =======================================
.text:004132F0
.text:004132F0 ; Attributes: thunk
.text:004132F0
.text:004132F0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004132F0 strncmp         proc near               ; CODE XREF: sub_4054B0+23F↑p
.text:004132F0                                         ; sub_4054B0+699↑p
.text:004132F0
.text:004132F0 Str1            = dword ptr  4
.text:004132F0 Str2            = dword ptr  8
.text:004132F0 MaxCount        = dword ptr  0Ch
.text:004132F0
.text:004132F0                 jmp     ds:__imp_strncmp
.text:004132F0 strncmp         endp
.text:004132F0
.text:004132F0 ; ---------------------------------------------------------------------------
.text:004132F6                 align 10h
.text:00413300
.text:00413300 ; =============== S U B R O U T I N E =======================================
.text:00413300
.text:00413300 ; Attributes: thunk
.text:00413300
.text:00413300 ; char *__cdecl getenv(const char *VarName)
.text:00413300 getenv          proc near               ; CODE XREF: sub_4054B0+B57↑p
.text:00413300                                         ; sub_40A960+3EE↑p ...
.text:00413300
.text:00413300 VarName         = dword ptr  4
.text:00413300
.text:00413300                 jmp     ds:__imp_getenv
.text:00413300 getenv          endp
.text:00413300
.text:00413300 ; ---------------------------------------------------------------------------
.text:00413306                 align 10h
.text:00413310
.text:00413310 ; =============== S U B R O U T I N E =======================================
.text:00413310
.text:00413310 ; Attributes: thunk
.text:00413310
.text:00413310 ; char *__cdecl strchr(const char *Str, int Val)
.text:00413310 strchr          proc near               ; CODE XREF: sub_4054B0+469↑p
.text:00413310                                         ; sub_4054B0+53A↑p ...
.text:00413310
.text:00413310 Str             = dword ptr  4
.text:00413310 Val             = dword ptr  8
.text:00413310
.text:00413310                 jmp     ds:__imp_strchr
.text:00413310 strchr          endp
.text:00413310
.text:00413310 ; ---------------------------------------------------------------------------
.text:00413316                 align 10h
.text:00413320
.text:00413320 ; =============== S U B R O U T I N E =======================================
.text:00413320
.text:00413320 ; Attributes: thunk
.text:00413320
.text:00413320 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00413320 vfprintf        proc near               ; CODE XREF: sub_406570+C1↑p
.text:00413320                                         ; sub_409BA0+49↑p ...
.text:00413320
.text:00413320 Stream          = dword ptr  4
.text:00413320 Format          = dword ptr  8
.text:00413320 ArgList         = dword ptr  0Ch
.text:00413320
.text:00413320                 jmp     ds:__imp_vfprintf
.text:00413320 vfprintf        endp
.text:00413320
.text:00413320 ; ---------------------------------------------------------------------------
.text:00413326                 align 10h
.text:00413330
.text:00413330 ; =============== S U B R O U T I N E =======================================
.text:00413330
.text:00413330 ; Attributes: thunk
.text:00413330
.text:00413330 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00413330 _flsbuf         proc near               ; CODE XREF: sub_406570+128↑p
.text:00413330                                         ; sub_406570+13A↑p ...
.text:00413330
.text:00413330 File            = dword ptr  8
.text:00413330
.text:00413330                 jmp     ds:__imp__flsbuf
.text:00413330 _flsbuf         endp
.text:00413330
.text:00413330 ; ---------------------------------------------------------------------------
.text:00413336                 align 10h
.text:00413340
.text:00413340 ; =============== S U B R O U T I N E =======================================
.text:00413340
.text:00413340 ; Attributes: thunk
.text:00413340
.text:00413340 ; int __cdecl fclose(FILE *Stream)
.text:00413340 fclose          proc near               ; CODE XREF: sub_406CF0+27↑p
.text:00413340                                         ; .text:0040F84E↑p
.text:00413340
.text:00413340 Stream          = dword ptr  4
.text:00413340
.text:00413340                 jmp     ds:__imp_fclose
.text:00413340 fclose          endp
.text:00413340
.text:00413340 ; ---------------------------------------------------------------------------
.text:00413346                 align 10h
.text:00413350
.text:00413350 ; =============== S U B R O U T I N E =======================================
.text:00413350
.text:00413350 ; Attributes: thunk
.text:00413350
.text:00413350 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00413350 memcpy          proc near               ; CODE XREF: sub_406F90+28↑p
.text:00413350                                         ; sub_406FD0+31↑p ...
.text:00413350
.text:00413350 Src             = dword ptr  8
.text:00413350 Size            = dword ptr  0Ch
.text:00413350
.text:00413350                 jmp     ds:__imp_memcpy
.text:00413350 memcpy          endp
.text:00413350
.text:00413350 ; ---------------------------------------------------------------------------
.text:00413356                 align 10h
.text:00413360
.text:00413360 ; =============== S U B R O U T I N E =======================================
.text:00413360
.text:00413360 ; Attributes: thunk
.text:00413360
.text:00413360 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00413360 memset          proc near               ; CODE XREF: .text:00406F36↑p
.text:00413360
.text:00413360 Val             = dword ptr  8
.text:00413360 Size            = dword ptr  0Ch
.text:00413360
.text:00413360                 jmp     ds:__imp_memset
.text:00413360 memset          endp
.text:00413360
.text:00413360 ; ---------------------------------------------------------------------------
.text:00413366                 align 10h
.text:00413370
.text:00413370 ; =============== S U B R O U T I N E =======================================
.text:00413370
.text:00413370 ; Attributes: thunk
.text:00413370
.text:00413370 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00413370 calloc          proc near               ; CODE XREF: .text:00406F73↑p
.text:00413370                                         ; sub_4072C0+1D0↑p ...
.text:00413370
.text:00413370 Count           = dword ptr  4
.text:00413370 Size            = dword ptr  8
.text:00413370
.text:00413370                 jmp     ds:__imp_calloc
.text:00413370 calloc          endp
.text:00413370
.text:00413370 ; ---------------------------------------------------------------------------
.text:00413376                 align 10h
.text:00413380
.text:00413380 ; =============== S U B R O U T I N E =======================================
.text:00413380
.text:00413380 ; Attributes: noreturn thunk
.text:00413380
.text:00413380 _assert         proc near               ; CODE XREF: sub_4071A0+DD↑p
.text:00413380                                         ; sub_4095E0+553↑p ...
.text:00413380                 jmp     ds:__imp__assert
.text:00413380 _assert         endp
.text:00413380
.text:00413380 ; ---------------------------------------------------------------------------
.text:00413386                 align 10h
.text:00413390
.text:00413390 ; =============== S U B R O U T I N E =======================================
.text:00413390
.text:00413390 ; Attributes: thunk
.text:00413390
.text:00413390 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00413390 iswctype        proc near               ; CODE XREF: sub_408260+78B↑p
.text:00413390
.text:00413390 C               = word ptr  4
.text:00413390 Type            = word ptr  8
.text:00413390
.text:00413390                 jmp     ds:__imp_iswctype
.text:00413390 iswctype        endp
.text:00413390
.text:00413390 ; ---------------------------------------------------------------------------
.text:00413396                 align 10h
.text:004133A0
.text:004133A0 ; =============== S U B R O U T I N E =======================================
.text:004133A0
.text:004133A0 ; Attributes: thunk
.text:004133A0
.text:004133A0 ; int __cdecl isctype(int C, int Type)
.text:004133A0 _isctype        proc near               ; CODE XREF: sub_408260+610↑p
.text:004133A0                                         ; sub_4095E0+5F↑p
.text:004133A0
.text:004133A0 C               = dword ptr  4
.text:004133A0 Type            = dword ptr  8
.text:004133A0
.text:004133A0                 jmp     ds:__imp__isctype
.text:004133A0 _isctype        endp
.text:004133A0
.text:004133A0 ; ---------------------------------------------------------------------------
.text:004133A6                 align 10h
.text:004133B0
.text:004133B0 ; =============== S U B R O U T I N E =======================================
.text:004133B0
.text:004133B0 ; Attributes: thunk
.text:004133B0
.text:004133B0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:004133B0 strtoul         proc near               ; CODE XREF: sub_4095E0+94↑p
.text:004133B0
.text:004133B0 String          = dword ptr  4
.text:004133B0 EndPtr          = dword ptr  8
.text:004133B0 Radix           = dword ptr  0Ch
.text:004133B0
.text:004133B0                 jmp     ds:__imp_strtoul
.text:004133B0 strtoul         endp
.text:004133B0
.text:004133B0 ; ---------------------------------------------------------------------------
.text:004133B6                 align 10h
.text:004133C0
.text:004133C0 ; =============== S U B R O U T I N E =======================================
.text:004133C0
.text:004133C0 ; Attributes: thunk
.text:004133C0
.text:004133C0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004133C0 strcmp          proc near               ; CODE XREF: sub_409CA4+180↑p
.text:004133C0                                         ; .text:0040EC4B↑p
.text:004133C0
.text:004133C0 Str1            = dword ptr  4
.text:004133C0 Str2            = dword ptr  8
.text:004133C0
.text:004133C0                 jmp     ds:__imp_strcmp
.text:004133C0 strcmp          endp
.text:004133C0
.text:004133C0 ; ---------------------------------------------------------------------------
.text:004133C6                 align 10h
.text:004133D0
.text:004133D0 ; =============== S U B R O U T I N E =======================================
.text:004133D0
.text:004133D0 ; Attributes: thunk
.text:004133D0
.text:004133D0 ; int __cdecl fflush(FILE *Stream)
.text:004133D0 fflush          proc near               ; CODE XREF: sub_409BA0+19↑p
.text:004133D0                                         ; sub_409BA0+81↑p ...
.text:004133D0
.text:004133D0 Stream          = dword ptr  4
.text:004133D0
.text:004133D0                 jmp     ds:__imp_fflush
.text:004133D0 fflush          endp
.text:004133D0
.text:004133D0 ; ---------------------------------------------------------------------------
.text:004133D6                 align 10h
.text:004133E0
.text:004133E0 ; =============== S U B R O U T I N E =======================================
.text:004133E0
.text:004133E0 ; Attributes: thunk
.text:004133E0
.text:004133E0 ; char *__cdecl strerror(int ErrorMessage)
.text:004133E0 strerror        proc near               ; CODE XREF: sub_409BA0+A5↑p
.text:004133E0                                         ; sub_409CA4+10F↑p
.text:004133E0
.text:004133E0 ErrorMessage    = dword ptr  4
.text:004133E0
.text:004133E0                 jmp     ds:__imp_strerror
.text:004133E0 strerror        endp
.text:004133E0
.text:004133E0 ; ---------------------------------------------------------------------------
.text:004133E6                 align 10h
.text:004133F0
.text:004133F0 ; =============== S U B R O U T I N E =======================================
.text:004133F0
.text:004133F0 ; Attributes: thunk
.text:004133F0
.text:004133F0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004133F0 ctime           proc near               ; CODE XREF: .text:0040A00D↑p
.text:004133F0                                         ; .text:0040A02F↑p ...
.text:004133F0
.text:004133F0 Time            = dword ptr  4
.text:004133F0
.text:004133F0                 jmp     ds:__imp_ctime
.text:004133F0 ctime           endp
.text:004133F0
.text:004133F0 ; ---------------------------------------------------------------------------
.text:004133F6                 align 10h
.text:00413400
.text:00413400 ; =============== S U B R O U T I N E =======================================
.text:00413400
.text:00413400 ; Attributes: thunk
.text:00413400
.text:00413400 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00413400 _get_osfhandle  proc near               ; CODE XREF: sub_40A0B0+3A↑p
.text:00413400                                         ; sub_410630+15↑p
.text:00413400
.text:00413400 FileHandle      = dword ptr  4
.text:00413400
.text:00413400                 jmp     ds:__imp__get_osfhandle
.text:00413400 _get_osfhandle  endp
.text:00413400
.text:00413400 ; ---------------------------------------------------------------------------
.text:00413406                 align 10h
.text:00413410
.text:00413410 ; =============== S U B R O U T I N E =======================================
.text:00413410
.text:00413410 ; Attributes: thunk
.text:00413410
.text:00413410 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00413410 strcat          proc near               ; CODE XREF: sub_40A310+98↑p
.text:00413410                                         ; sub_40C590+191↑p ...
.text:00413410
.text:00413410 Destination     = dword ptr  4
.text:00413410 Source          = dword ptr  8
.text:00413410
.text:00413410                 jmp     ds:__imp_strcat
.text:00413410 strcat          endp
.text:00413410
.text:00413410 ; ---------------------------------------------------------------------------
.text:00413416                 align 10h
.text:00413420
.text:00413420 ; =============== S U B R O U T I N E =======================================
.text:00413420
.text:00413420 ; Attributes: thunk
.text:00413420
.text:00413420 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00413420 strcpy          proc near               ; CODE XREF: sub_40A310+73↑p
.text:00413420                                         ; _win32_longpath+13C↑p ...
.text:00413420
.text:00413420 Destination     = dword ptr  4
.text:00413420 Source          = dword ptr  8
.text:00413420
.text:00413420                 jmp     ds:__imp_strcpy
.text:00413420 strcpy          endp
.text:00413420
.text:00413420 ; ---------------------------------------------------------------------------
.text:00413426                 align 10h
.text:00413430
.text:00413430 ; =============== S U B R O U T I N E =======================================
.text:00413430
.text:00413430 ; Attributes: thunk
.text:00413430
.text:00413430 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00413430 strstr          proc near               ; CODE XREF: sub_40A960+3BF↑p
.text:00413430                                         ; sub_40A960+3DC↑p ...
.text:00413430
.text:00413430 Str             = dword ptr  4
.text:00413430 SubStr          = dword ptr  8
.text:00413430
.text:00413430                 jmp     ds:__imp_strstr
.text:00413430 strstr          endp
.text:00413430
.text:00413430 ; ---------------------------------------------------------------------------
.text:00413436                 align 10h
.text:00413440
.text:00413440 ; =============== S U B R O U T I N E =======================================
.text:00413440
.text:00413440 ; Attributes: thunk
.text:00413440
.text:00413440 ; int __cdecl isalpha(int C)
.text:00413440 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00413440
.text:00413440 C               = dword ptr  4
.text:00413440
.text:00413440                 jmp     ds:__imp_isalpha
.text:00413440 isalpha         endp
.text:00413440
.text:00413440 ; ---------------------------------------------------------------------------
.text:00413446                 align 10h
.text:00413450
.text:00413450 ; =============== S U B R O U T I N E =======================================
.text:00413450
.text:00413450 ; Attributes: thunk
.text:00413450
.text:00413450 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00413450 _stricmp_0      proc near               ; CODE XREF: .text:0040C404↑p
.text:00413450
.text:00413450 String1         = dword ptr  4
.text:00413450 String2         = dword ptr  8
.text:00413450
.text:00413450                 jmp     ds:__imp__stricmp_0
.text:00413450 _stricmp_0      endp
.text:00413450
.text:00413450 ; ---------------------------------------------------------------------------
.text:00413456                 align 10h
.text:00413460
.text:00413460 ; =============== S U B R O U T I N E =======================================
.text:00413460
.text:00413460 ; Attributes: thunk
.text:00413460
.text:00413460 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:00413460 strncat         proc near               ; CODE XREF: sub_40C590+75↑p
.text:00413460
.text:00413460 Destination     = dword ptr  4
.text:00413460 Source          = dword ptr  8
.text:00413460 Count           = dword ptr  0Ch
.text:00413460
.text:00413460                 jmp     ds:__imp_strncat
.text:00413460 strncat         endp
.text:00413460
.text:00413460 ; ---------------------------------------------------------------------------
.text:00413466                 align 10h
.text:00413470
.text:00413470 ; =============== S U B R O U T I N E =======================================
.text:00413470
.text:00413470 ; Attributes: thunk
.text:00413470
.text:00413470 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00413470 strncpy         proc near               ; CODE XREF: sub_40C590+61↑p
.text:00413470                                         ; sub_40C590+118↑p ...
.text:00413470
.text:00413470 Destination     = dword ptr  4
.text:00413470 Source          = dword ptr  8
.text:00413470 Count           = dword ptr  0Ch
.text:00413470
.text:00413470                 jmp     ds:__imp_strncpy
.text:00413470 strncpy         endp
.text:00413470
.text:00413470 ; ---------------------------------------------------------------------------
.text:00413476                 align 10h
.text:00413480
.text:00413480 ; =============== S U B R O U T I N E =======================================
.text:00413480
.text:00413480 ; Attributes: thunk
.text:00413480
.text:00413480 ; int __cdecl toupper(int C)
.text:00413480 toupper         proc near               ; CODE XREF: sub_40C780+10E↑p
.text:00413480
.text:00413480 C               = dword ptr  4
.text:00413480
.text:00413480                 jmp     ds:__imp_toupper
.text:00413480 toupper         endp
.text:00413480
.text:00413480 ; ---------------------------------------------------------------------------
.text:00413486                 align 10h
.text:00413490
.text:00413490 ; =============== S U B R O U T I N E =======================================
.text:00413490
.text:00413490 ; Attributes: thunk
.text:00413490
.text:00413490 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00413490 sprintf         proc near               ; CODE XREF: .text:0040E30A↑p
.text:00413490                                         ; .text:0040E32B↑p ...
.text:00413490
.text:00413490 Buffer          = dword ptr  4
.text:00413490 Format          = dword ptr  8
.text:00413490
.text:00413490                 jmp     ds:__imp_sprintf
.text:00413490 sprintf         endp
.text:00413490
.text:00413490 ; ---------------------------------------------------------------------------
.text:00413496                 align 10h
.text:004134A0
.text:004134A0 ; =============== S U B R O U T I N E =======================================
.text:004134A0
.text:004134A0 ; Attributes: thunk
.text:004134A0
.text:004134A0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:004134A0 sscanf          proc near               ; CODE XREF: .text:0040EE8E↑p
.text:004134A0
.text:004134A0 Buffer          = dword ptr  4
.text:004134A0 Format          = dword ptr  8
.text:004134A0
.text:004134A0                 jmp     ds:__imp_sscanf
.text:004134A0 sscanf          endp
.text:004134A0
.text:004134A0 ; ---------------------------------------------------------------------------
.text:004134A6                 align 10h
.text:004134B0
.text:004134B0 ; =============== S U B R O U T I N E =======================================
.text:004134B0
.text:004134B0 ; Attributes: thunk
.text:004134B0
.text:004134B0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:004134B0 strspn          proc near               ; CODE XREF: .text:0040ECDA↑p
.text:004134B0                                         ; .text:0040EEF4↑p ...
.text:004134B0
.text:004134B0 Str             = dword ptr  4
.text:004134B0 Control         = dword ptr  8
.text:004134B0
.text:004134B0                 jmp     ds:__imp_strspn
.text:004134B0 strspn          endp
.text:004134B0
.text:004134B0 ; ---------------------------------------------------------------------------
.text:004134B6                 align 10h
.text:004134C0
.text:004134C0 ; =============== S U B R O U T I N E =======================================
.text:004134C0
.text:004134C0 ; Attributes: thunk
.text:004134C0
.text:004134C0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004134C0 fopen           proc near               ; CODE XREF: sub_40F78F+26↑p
.text:004134C0                                         ; sub_40F78F+99↑p
.text:004134C0
.text:004134C0 FileName        = dword ptr  4
.text:004134C0 Mode            = dword ptr  8
.text:004134C0
.text:004134C0                 jmp     ds:__imp_fopen
.text:004134C0 fopen           endp
.text:004134C0
.text:004134C0 ; ---------------------------------------------------------------------------
.text:004134C6                 align 10h
.text:004134D0
.text:004134D0 ; =============== S U B R O U T I N E =======================================
.text:004134D0
.text:004134D0 ; Attributes: thunk
.text:004134D0
.text:004134D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004134D0 _filelengthi64  proc near               ; CODE XREF: sub_410630+1F↑p
.text:004134D0
.text:004134D0 FileHandle      = dword ptr  4
.text:004134D0
.text:004134D0                 jmp     ds:__imp__filelengthi64
.text:004134D0 _filelengthi64  endp
.text:004134D0
.text:004134D0 ; ---------------------------------------------------------------------------
.text:004134D6                 align 10h
.text:004134E0
.text:004134E0 ; =============== S U B R O U T I N E =======================================
.text:004134E0
.text:004134E0 ; Attributes: thunk
.text:004134E0
.text:004134E0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004134E0 strpbrk         proc near               ; CODE XREF: sub_410690+87↑p
.text:004134E0
.text:004134E0 Str             = dword ptr  4
.text:004134E0 Control         = dword ptr  8
.text:004134E0
.text:004134E0                 jmp     ds:__imp_strpbrk
.text:004134E0 strpbrk         endp
.text:004134E0
.text:004134E0 ; ---------------------------------------------------------------------------
.text:004134E6                 align 10h
.text:004134F0
.text:004134F0 ; =============== S U B R O U T I N E =======================================
.text:004134F0
.text:004134F0 ; Attributes: thunk
.text:004134F0
.text:004134F0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004134F0 _fdopen         proc near               ; CODE XREF: sub_410730+69↑p
.text:004134F0
.text:004134F0 FileHandle      = dword ptr  4
.text:004134F0 Format          = dword ptr  8
.text:004134F0
.text:004134F0                 jmp     ds:__imp__fdopen
.text:004134F0 _fdopen         endp
.text:004134F0
.text:004134F0 ; ---------------------------------------------------------------------------
.text:004134F6                 align 10h
.text:00413500
.text:00413500 ; =============== S U B R O U T I N E =======================================
.text:00413500
.text:00413500 ; Attributes: thunk
.text:00413500
.text:00413500 ; int __cdecl close_0(int FileHandle)
.text:00413500 _close_0        proc near               ; CODE XREF: sub_410730+90↑p
.text:00413500
.text:00413500 FileHandle      = dword ptr  4
.text:00413500
.text:00413500                 jmp     ds:__imp__close_0
.text:00413500 _close_0        endp
.text:00413500
.text:00413500 ; ---------------------------------------------------------------------------
.text:00413506                 align 10h
.text:00413510
.text:00413510 ; =============== S U B R O U T I N E =======================================
.text:00413510
.text:00413510 ; Attributes: thunk
.text:00413510
.text:00413510 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00413510 _open_0         proc near               ; CODE XREF: sub_411200:loc_411590↑p
.text:00413510
.text:00413510 FileName        = dword ptr  4
.text:00413510 OpenFlag        = dword ptr  8
.text:00413510
.text:00413510                 jmp     ds:__imp__open_0
.text:00413510 _open_0         endp
.text:00413510
.text:00413510 ; ---------------------------------------------------------------------------
.text:00413516                 align 10h
.text:00413520
.text:00413520 ; =============== S U B R O U T I N E =======================================
.text:00413520
.text:00413520 ; Attributes: thunk
.text:00413520
.text:00413520 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00413520 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00413520
.text:00413520 lpTopLevelExceptionFilter= dword ptr  4
.text:00413520
.text:00413520                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00413520 SetUnhandledExceptionFilter endp
.text:00413520
.text:00413520 ; ---------------------------------------------------------------------------
.text:00413526                 align 10h
.text:00413530
.text:00413530 ; =============== S U B R O U T I N E =======================================
.text:00413530
.text:00413530 ; Attributes: noreturn thunk
.text:00413530
.text:00413530 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00413530 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00413530
.text:00413530 uExitCode       = dword ptr  4
.text:00413530
.text:00413530                 jmp     ds:__imp_ExitProcess
.text:00413530 ExitProcess     endp
.text:00413530
.text:00413530 ; ---------------------------------------------------------------------------
.text:00413536                 align 10h
.text:00413540
.text:00413540 ; =============== S U B R O U T I N E =======================================
.text:00413540
.text:00413540 ; Attributes: thunk
.text:00413540
.text:00413540 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00413540 GetModuleHandleA proc near              ; CODE XREF: sub_40A1A0+18↑p
.text:00413540                                         ; sub_40A960+329↑p ...
.text:00413540
.text:00413540 lpModuleName    = dword ptr  4
.text:00413540
.text:00413540                 jmp     ds:__imp_GetModuleHandleA
.text:00413540 GetModuleHandleA endp
.text:00413540
.text:00413540 ; ---------------------------------------------------------------------------
.text:00413546                 align 10h
.text:00413550
.text:00413550 ; =============== S U B R O U T I N E =======================================
.text:00413550
.text:00413550 ; Attributes: thunk
.text:00413550
.text:00413550 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00413550 GetProcAddress  proc near               ; CODE XREF: sub_40A1A0+33↑p
.text:00413550                                         ; sub_40A310+2E↑p ...
.text:00413550
.text:00413550 hModule         = dword ptr  4
.text:00413550 lpProcName      = dword ptr  8
.text:00413550
.text:00413550                 jmp     ds:__imp_GetProcAddress
.text:00413550 GetProcAddress  endp
.text:00413550
.text:00413550 ; ---------------------------------------------------------------------------
.text:00413556                 align 10h
.text:00413560
.text:00413560 ; =============== S U B R O U T I N E =======================================
.text:00413560
.text:00413560 ; Attributes: thunk
.text:00413560
.text:00413560 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00413560 GetFileAttributesA proc near            ; CODE XREF: sub_40A1A0+47↑p
.text:00413560                                         ; sub_40DA00+65↑p ...
.text:00413560
.text:00413560 lpFileName      = dword ptr  4
.text:00413560
.text:00413560                 jmp     ds:__imp_GetFileAttributesA
.text:00413560 GetFileAttributesA endp
.text:00413560
.text:00413560 ; ---------------------------------------------------------------------------
.text:00413566                 align 10h
.text:00413570
.text:00413570 ; =============== S U B R O U T I N E =======================================
.text:00413570
.text:00413570 ; Attributes: thunk
.text:00413570
.text:00413570 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00413570 FreeLibrary     proc near               ; CODE XREF: sub_40A1A0+A4↑p
.text:00413570                                         ; sub_40A310+11D↑p ...
.text:00413570
.text:00413570 hLibModule      = dword ptr  4
.text:00413570
.text:00413570                 jmp     ds:__imp_FreeLibrary
.text:00413570 FreeLibrary     endp
.text:00413570
.text:00413570 ; ---------------------------------------------------------------------------
.text:00413576                 align 10h
.text:00413580
.text:00413580 ; =============== S U B R O U T I N E =======================================
.text:00413580
.text:00413580 ; Attributes: thunk
.text:00413580
.text:00413580 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413580 FindFirstFileA  proc near               ; CODE XREF: sub_40A1A0+CE↑p
.text:00413580                                         ; sub_40A310+14F↑p ...
.text:00413580
.text:00413580 lpFileName      = dword ptr  4
.text:00413580 lpFindFileData  = dword ptr  8
.text:00413580
.text:00413580                 jmp     ds:__imp_FindFirstFileA
.text:00413580 FindFirstFileA  endp
.text:00413580
.text:00413580 ; ---------------------------------------------------------------------------
.text:00413586                 align 10h
.text:00413590
.text:00413590 ; =============== S U B R O U T I N E =======================================
.text:00413590
.text:00413590 ; Attributes: thunk
.text:00413590
.text:00413590 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00413590 FindClose       proc near               ; CODE XREF: sub_40A1A0+123↑p
.text:00413590                                         ; sub_40A310+10E↑p ...
.text:00413590
.text:00413590 hFindFile       = dword ptr  4
.text:00413590
.text:00413590                 jmp     ds:__imp_FindClose
.text:00413590 FindClose       endp
.text:00413590
.text:00413590 ; ---------------------------------------------------------------------------
.text:00413596                 align 10h
.text:004135A0
.text:004135A0 ; =============== S U B R O U T I N E =======================================
.text:004135A0
.text:004135A0 ; Attributes: thunk
.text:004135A0
.text:004135A0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:004135A0 LoadLibraryA    proc near               ; CODE XREF: sub_40A310+13↑p
.text:004135A0                                         ; sub_40A960+134↑p ...
.text:004135A0
.text:004135A0 lpLibFileName   = dword ptr  4
.text:004135A0
.text:004135A0                 jmp     ds:__imp_LoadLibraryA
.text:004135A0 LoadLibraryA    endp
.text:004135A0
.text:004135A0 ; ---------------------------------------------------------------------------
.text:004135A6                 align 10h
.text:004135B0
.text:004135B0 ; =============== S U B R O U T I N E =======================================
.text:004135B0
.text:004135B0 ; Attributes: thunk
.text:004135B0
.text:004135B0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:004135B0 FindNextFileA   proc near               ; CODE XREF: sub_40A310+FF↑p
.text:004135B0                                         ; sub_40C590+36↑p
.text:004135B0
.text:004135B0 hFindFile       = dword ptr  4
.text:004135B0 lpFindFileData  = dword ptr  8
.text:004135B0
.text:004135B0                 jmp     ds:__imp_FindNextFileA
.text:004135B0 FindNextFileA   endp
.text:004135B0
.text:004135B0 ; ---------------------------------------------------------------------------
.text:004135B6                 align 10h
.text:004135C0
.text:004135C0 ; =============== S U B R O U T I N E =======================================
.text:004135C0
.text:004135C0 ; Attributes: thunk
.text:004135C0
.text:004135C0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:004135C0 GetFileType     proc near               ; CODE XREF: sub_40A490+43↑p
.text:004135C0                                         ; .text:0040B14A↑p
.text:004135C0
.text:004135C0 hFile           = dword ptr  4
.text:004135C0
.text:004135C0                 jmp     ds:__imp_GetFileType
.text:004135C0 GetFileType     endp
.text:004135C0
.text:004135C0 ; ---------------------------------------------------------------------------
.text:004135C6                 align 10h
.text:004135D0
.text:004135D0 ; =============== S U B R O U T I N E =======================================
.text:004135D0
.text:004135D0 ; Attributes: thunk
.text:004135D0
.text:004135D0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004135D0 GetFileInformationByHandle proc near    ; CODE XREF: sub_40A490+69↑p
.text:004135D0
.text:004135D0 hFile           = dword ptr  4
.text:004135D0 lpFileInformation= dword ptr  8
.text:004135D0
.text:004135D0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004135D0 GetFileInformationByHandle endp
.text:004135D0
.text:004135D0 ; ---------------------------------------------------------------------------
.text:004135D6                 align 10h
.text:004135E0
.text:004135E0 ; =============== S U B R O U T I N E =======================================
.text:004135E0
.text:004135E0 ; Attributes: thunk
.text:004135E0
.text:004135E0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:004135E0 GetFileSize     proc near               ; CODE XREF: sub_40A490+3F2↑p
.text:004135E0
.text:004135E0 hFile           = dword ptr  4
.text:004135E0 lpFileSizeHigh  = dword ptr  8
.text:004135E0
.text:004135E0                 jmp     ds:__imp_GetFileSize
.text:004135E0 GetFileSize     endp
.text:004135E0
.text:004135E0 ; ---------------------------------------------------------------------------
.text:004135E6                 align 10h
.text:004135F0
.text:004135F0 ; =============== S U B R O U T I N E =======================================
.text:004135F0
.text:004135F0 ; Attributes: thunk
.text:004135F0
.text:004135F0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:004135F0 PeekNamedPipe   proc near               ; CODE XREF: sub_40A490+439↑p
.text:004135F0
.text:004135F0 hNamedPipe      = dword ptr  4
.text:004135F0 lpBuffer        = dword ptr  8
.text:004135F0 nBufferSize     = dword ptr  0Ch
.text:004135F0 lpBytesRead     = dword ptr  10h
.text:004135F0 lpTotalBytesAvail= dword ptr  14h
.text:004135F0 lpBytesLeftThisMessage= dword ptr  18h
.text:004135F0
.text:004135F0                 jmp     ds:__imp_PeekNamedPipe
.text:004135F0 PeekNamedPipe   endp
.text:004135F0
.text:004135F0 ; ---------------------------------------------------------------------------
.text:004135F6                 align 10h
.text:00413600
.text:00413600 ; =============== S U B R O U T I N E =======================================
.text:00413600
.text:00413600 ; Attributes: thunk
.text:00413600
.text:00413600 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00413600 GetDriveTypeA   proc near               ; CODE XREF: sub_40A960+4C↑p
.text:00413600
.text:00413600 lpRootPathName  = dword ptr  4
.text:00413600
.text:00413600                 jmp     ds:__imp_GetDriveTypeA
.text:00413600 GetDriveTypeA   endp
.text:00413600
.text:00413600 ; ---------------------------------------------------------------------------
.text:00413606                 align 10h
.text:00413610
.text:00413610 ; =============== S U B R O U T I N E =======================================
.text:00413610
.text:00413610 ; Attributes: thunk
.text:00413610
.text:00413610 ; DWORD __stdcall GetLastError()
.text:00413610 GetLastError    proc near               ; CODE XREF: sub_40A960:loc_40ABE9↑p
.text:00413610                                         ; .text:loc_40B72D↑p ...
.text:00413610                 jmp     ds:__imp_GetLastError
.text:00413610 GetLastError    endp
.text:00413610
.text:00413610 ; ---------------------------------------------------------------------------
.text:00413616                 align 10h
.text:00413620
.text:00413620 ; =============== S U B R O U T I N E =======================================
.text:00413620
.text:00413620 ; Attributes: thunk
.text:00413620
.text:00413620 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00413620 GetVolumeInformationA proc near         ; CODE XREF: sub_40AE60+64↑p
.text:00413620                                         ; .text:0040B40C↑p ...
.text:00413620
.text:00413620 lpRootPathName  = dword ptr  4
.text:00413620 lpVolumeNameBuffer= dword ptr  8
.text:00413620 nVolumeNameSize = dword ptr  0Ch
.text:00413620 lpVolumeSerialNumber= dword ptr  10h
.text:00413620 lpMaximumComponentLength= dword ptr  14h
.text:00413620 lpFileSystemFlags= dword ptr  18h
.text:00413620 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00413620 nFileSystemNameSize= dword ptr  20h
.text:00413620
.text:00413620                 jmp     ds:__imp_GetVolumeInformationA
.text:00413620 GetVolumeInformationA endp
.text:00413620
.text:00413620 ; ---------------------------------------------------------------------------
.text:00413626                 align 10h
.text:00413630
.text:00413630 ; =============== S U B R O U T I N E =======================================
.text:00413630
.text:00413630 ; Attributes: thunk
.text:00413630
.text:00413630 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00413630 CreateFileA     proc near               ; CODE XREF: sub_40BCC0-CA↑p
.text:00413630                                         ; .text:0040CDA3↑p ...
.text:00413630
.text:00413630 lpFileName      = dword ptr  4
.text:00413630 dwDesiredAccess = dword ptr  8
.text:00413630 dwShareMode     = dword ptr  0Ch
.text:00413630 lpSecurityAttributes= dword ptr  10h
.text:00413630 dwCreationDisposition= dword ptr  14h
.text:00413630 dwFlagsAndAttributes= dword ptr  18h
.text:00413630 hTemplateFile   = dword ptr  1Ch
.text:00413630
.text:00413630                 jmp     ds:__imp_CreateFileA
.text:00413630 CreateFileA     endp
.text:00413630
.text:00413630 ; ---------------------------------------------------------------------------
.text:00413636                 align 10h
.text:00413640
.text:00413640 ; =============== S U B R O U T I N E =======================================
.text:00413640
.text:00413640 ; Attributes: thunk
.text:00413640
.text:00413640 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00413640 CloseHandle     proc near               ; CODE XREF: sub_40BCC0-AF↑p
.text:00413640                                         ; .text:0040CE19↑p ...
.text:00413640
.text:00413640 hObject         = dword ptr  4
.text:00413640
.text:00413640                 jmp     ds:__imp_CloseHandle
.text:00413640 CloseHandle     endp
.text:00413640
.text:00413640 ; ---------------------------------------------------------------------------
.text:00413646                 align 10h
.text:00413650
.text:00413650 ; =============== S U B R O U T I N E =======================================
.text:00413650
.text:00413650 ; Attributes: thunk
.text:00413650
.text:00413650 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00413650 SetErrorMode    proc near               ; CODE XREF: sub_40BCC0-7A↑p
.text:00413650                                         ; sub_40E010+57↑p ...
.text:00413650
.text:00413650 uMode           = dword ptr  4
.text:00413650
.text:00413650                 jmp     ds:__imp_SetErrorMode
.text:00413650 SetErrorMode    endp
.text:00413650
.text:00413650 ; ---------------------------------------------------------------------------
.text:00413656                 align 10h
.text:00413660
.text:00413660 ; =============== S U B R O U T I N E =======================================
.text:00413660
.text:00413660 ; Attributes: thunk
.text:00413660
.text:00413660 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00413660 GetModuleFileNameA proc near            ; CODE XREF: sub_40C280+1C↑p
.text:00413660
.text:00413660 hModule         = dword ptr  4
.text:00413660 lpFilename      = dword ptr  8
.text:00413660 nSize           = dword ptr  0Ch
.text:00413660
.text:00413660                 jmp     ds:__imp_GetModuleFileNameA
.text:00413660 GetModuleFileNameA endp
.text:00413660
.text:00413660 ; ---------------------------------------------------------------------------
.text:00413666                 align 10h
.text:00413670
.text:00413670 ; =============== S U B R O U T I N E =======================================
.text:00413670
.text:00413670 ; Attributes: thunk
.text:00413670
.text:00413670 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00413670 GetShortPathNameA proc near             ; CODE XREF: .text:0040C506↑p
.text:00413670                                         ; .text:0040C530↑p
.text:00413670
.text:00413670 lpszLongPath    = dword ptr  4
.text:00413670 lpszShortPath   = dword ptr  8
.text:00413670 cchBuffer       = dword ptr  0Ch
.text:00413670
.text:00413670                 jmp     ds:__imp_GetShortPathNameA
.text:00413670 GetShortPathNameA endp
.text:00413670
.text:00413670 ; ---------------------------------------------------------------------------
.text:00413676                 align 10h
.text:00413680
.text:00413680 ; =============== S U B R O U T I N E =======================================
.text:00413680
.text:00413680 ; Attributes: thunk
.text:00413680
.text:00413680 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413680 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040CA28↑p
.text:00413680                                         ; .text:0040CA44↑p ...
.text:00413680
.text:00413680 nBufferLength   = dword ptr  4
.text:00413680 lpBuffer        = dword ptr  8
.text:00413680
.text:00413680                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00413680 GetCurrentDirectoryA endp
.text:00413680
.text:00413680 ; ---------------------------------------------------------------------------
.text:00413686                 align 10h
.text:00413690
.text:00413690 ; =============== S U B R O U T I N E =======================================
.text:00413690
.text:00413690 ; Attributes: thunk
.text:00413690
.text:00413690 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00413690 DeviceIoControl proc near               ; CODE XREF: .text:0040CE0C↑p
.text:00413690                                         ; sub_40D1D0+1E5↑p
.text:00413690
.text:00413690 hDevice         = dword ptr  4
.text:00413690 dwIoControlCode = dword ptr  8
.text:00413690 lpInBuffer      = dword ptr  0Ch
.text:00413690 nInBufferSize   = dword ptr  10h
.text:00413690 lpOutBuffer     = dword ptr  14h
.text:00413690 nOutBufferSize  = dword ptr  18h
.text:00413690 lpBytesReturned = dword ptr  1Ch
.text:00413690 lpOverlapped    = dword ptr  20h
.text:00413690
.text:00413690                 jmp     ds:__imp_DeviceIoControl
.text:00413690 DeviceIoControl endp
.text:00413690
.text:00413690 ; ---------------------------------------------------------------------------
.text:00413696                 align 10h
.text:004136A0
.text:004136A0 ; =============== S U B R O U T I N E =======================================
.text:004136A0
.text:004136A0 ; Attributes: thunk
.text:004136A0
.text:004136A0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:004136A0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040D163↑p
.text:004136A0                                         ; sub_40D1D0+7B↑p ...
.text:004136A0
.text:004136A0 lpRootPathName  = dword ptr  4
.text:004136A0 lpSectorsPerCluster= dword ptr  8
.text:004136A0 lpBytesPerSector= dword ptr  0Ch
.text:004136A0 lpNumberOfFreeClusters= dword ptr  10h
.text:004136A0 lpTotalNumberOfClusters= dword ptr  14h
.text:004136A0
.text:004136A0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:004136A0 GetDiskFreeSpaceA endp
.text:004136A0
.text:004136A0 ; ---------------------------------------------------------------------------
.text:004136A6                 align 10h
.text:004136B0
.text:004136B0 ; =============== S U B R O U T I N E =======================================
.text:004136B0
.text:004136B0 ; Attributes: thunk
.text:004136B0
.text:004136B0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:004136B0 GetFullPathNameA proc near              ; CODE XREF: sub_40DEE0+45↑p
.text:004136B0                                         ; sub_40DEE0+ED↑p
.text:004136B0
.text:004136B0 lpFileName      = dword ptr  4
.text:004136B0 nBufferLength   = dword ptr  8
.text:004136B0 lpBuffer        = dword ptr  0Ch
.text:004136B0 lpFilePart      = dword ptr  10h
.text:004136B0
.text:004136B0                 jmp     ds:__imp_GetFullPathNameA
.text:004136B0 GetFullPathNameA endp
.text:004136B0
.text:004136B0 ; ---------------------------------------------------------------------------
.text:004136B6                 align 10h
.text:004136C0
.text:004136C0 ; =============== S U B R O U T I N E =======================================
.text:004136C0
.text:004136C0 ; Attributes: thunk
.text:004136C0
.text:004136C0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:004136C0 lstrcmpiA       proc near               ; CODE XREF: .text:0040E59B↑p
.text:004136C0                                         ; .text:0040E5B2↑p ...
.text:004136C0
.text:004136C0 lpString1       = dword ptr  4
.text:004136C0 lpString2       = dword ptr  8
.text:004136C0
.text:004136C0                 jmp     ds:__imp_lstrcmpiA
.text:004136C0 lstrcmpiA       endp
.text:004136C0
.text:004136C0 ; ---------------------------------------------------------------------------
.text:004136C6                 align 10h
.text:004136D0
.text:004136D0 ; =============== S U B R O U T I N E =======================================
.text:004136D0
.text:004136D0 ; Attributes: thunk
.text:004136D0
.text:004136D0 ; DWORD __stdcall GetVersion()
.text:004136D0 GetVersion      proc near               ; CODE XREF: .text:0040E923↑p
.text:004136D0                 jmp     ds:__imp_GetVersion
.text:004136D0 GetVersion      endp
.text:004136D0
.text:004136D0 ; ---------------------------------------------------------------------------
.text:004136D6                 align 10h
.text:004136E0
.text:004136E0 ; =============== S U B R O U T I N E =======================================
.text:004136E0
.text:004136E0 ; Attributes: thunk
.text:004136E0
.text:004136E0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:004136E0 GetVersionExA   proc near               ; CODE XREF: sub_40E9B0+32↑p
.text:004136E0                                         ; sub_40E9B0+20B↑p
.text:004136E0
.text:004136E0 lpVersionInformation= dword ptr  4
.text:004136E0
.text:004136E0                 jmp     ds:__imp_GetVersionExA
.text:004136E0 GetVersionExA   endp
.text:004136E0
.text:004136E0 ; ---------------------------------------------------------------------------
.text:004136E6                 align 10h
.text:004136F0
.text:004136F0 ; =============== S U B R O U T I N E =======================================
.text:004136F0
.text:004136F0 ; Attributes: thunk
.text:004136F0
.text:004136F0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004136F0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040F04F↑p
.text:004136F0                                         ; .text:0040F07E↑p ...
.text:004136F0
.text:004136F0 nBufferLength   = dword ptr  4
.text:004136F0 lpBuffer        = dword ptr  8
.text:004136F0
.text:004136F0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:004136F0 GetLogicalDriveStringsA endp
.text:004136F0
.text:004136F0 ; ---------------------------------------------------------------------------
.text:004136F6                 align 10h
.text:00413700
.text:00413700 ; =============== S U B R O U T I N E =======================================
.text:00413700
.text:00413700 ; Attributes: thunk
.text:00413700
.text:00413700 ; HANDLE __stdcall GetProcessHeap()
.text:00413700 GetProcessHeap  proc near               ; CODE XREF: .text:0040F059↑p
.text:00413700                                         ; sub_40F730+24↑p ...
.text:00413700                 jmp     ds:__imp_GetProcessHeap
.text:00413700 GetProcessHeap  endp
.text:00413700
.text:00413700 ; ---------------------------------------------------------------------------
.text:00413706                 align 10h
.text:00413710
.text:00413710 ; =============== S U B R O U T I N E =======================================
.text:00413710
.text:00413710 ; Attributes: thunk
.text:00413710
.text:00413710 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00413710 HeapAlloc       proc near               ; CODE XREF: .text:0040F06D↑p
.text:00413710                                         ; sub_40F730+38↑p ...
.text:00413710
.text:00413710 hHeap           = dword ptr  4
.text:00413710 dwFlags         = dword ptr  8
.text:00413710 dwBytes         = dword ptr  0Ch
.text:00413710
.text:00413710                 jmp     ds:__imp_HeapAlloc
.text:00413710 HeapAlloc       endp
.text:00413710
.text:00413710 ; ---------------------------------------------------------------------------
.text:00413716                 align 10h
.text:00413720
.text:00413720 ; =============== S U B R O U T I N E =======================================
.text:00413720
.text:00413720 ; Attributes: thunk
.text:00413720
.text:00413720 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00413720 HeapFree        proc near               ; CODE XREF: .text:0040F86D↑p
.text:00413720
.text:00413720 hHeap           = dword ptr  4
.text:00413720 dwFlags         = dword ptr  8
.text:00413720 lpMem           = dword ptr  0Ch
.text:00413720
.text:00413720                 jmp     ds:__imp_HeapFree
.text:00413720 HeapFree        endp
.text:00413720
.text:00413720 ; ---------------------------------------------------------------------------
.text:00413726                 align 10h
.text:00413730
.text:00413730 ; =============== S U B R O U T I N E =======================================
.text:00413730
.text:00413730 ; Attributes: thunk
.text:00413730
.text:00413730 ; BOOL __stdcall AreFileApisANSI()
.text:00413730 AreFileApisANSI proc near               ; CODE XREF: sub_40F910+89↑p
.text:00413730                 jmp     ds:__imp_AreFileApisANSI
.text:00413730 AreFileApisANSI endp
.text:00413730
.text:00413730 ; ---------------------------------------------------------------------------
.text:00413736                 align 10h
.text:00413740
.text:00413740 ; =============== S U B R O U T I N E =======================================
.text:00413740
.text:00413740 ; Attributes: thunk
.text:00413740
.text:00413740 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00413740 MultiByteToWideChar proc near           ; CODE XREF: sub_40F910+BD↑p
.text:00413740
.text:00413740 CodePage        = dword ptr  4
.text:00413740 dwFlags         = dword ptr  8
.text:00413740 lpMultiByteStr  = dword ptr  0Ch
.text:00413740 cbMultiByte     = dword ptr  10h
.text:00413740 lpWideCharStr   = dword ptr  14h
.text:00413740 cchWideChar     = dword ptr  18h
.text:00413740
.text:00413740                 jmp     ds:__imp_MultiByteToWideChar
.text:00413740 MultiByteToWideChar endp
.text:00413740
.text:00413740 ; ---------------------------------------------------------------------------
.text:00413746                 align 10h
.text:00413750
.text:00413750 ; =============== S U B R O U T I N E =======================================
.text:00413750
.text:00413750 ; Attributes: thunk
.text:00413750
.text:00413750 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00413750 lstrcpyA        proc near               ; CODE XREF: sub_40F910+128↑p
.text:00413750
.text:00413750 lpString1       = dword ptr  4
.text:00413750 lpString2       = dword ptr  8
.text:00413750
.text:00413750                 jmp     ds:__imp_lstrcpyA
.text:00413750 lstrcpyA        endp
.text:00413750
.text:00413750 ; ---------------------------------------------------------------------------
.text:00413756                 align 10h
.text:00413760
.text:00413760 ; =============== S U B R O U T I N E =======================================
.text:00413760
.text:00413760 ; Attributes: thunk
.text:00413760
.text:00413760 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00413760 UnlockFile      proc near               ; CODE XREF: sub_410630+40↑p
.text:00413760
.text:00413760 hFile           = dword ptr  4
.text:00413760 dwFileOffsetLow = dword ptr  8
.text:00413760 dwFileOffsetHigh= dword ptr  0Ch
.text:00413760 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00413760 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00413760
.text:00413760                 jmp     ds:__imp_UnlockFile
.text:00413760 UnlockFile      endp
.text:00413760
.text:00413760 ; ---------------------------------------------------------------------------
.text:00413766                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770 ; Attributes: thunk
.text:00413770
.text:00413770 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00413770 GetSystemInfo   proc near               ; CODE XREF: sub_410820+3A↑p
.text:00413770                                         ; sub_410870+3A↑p ...
.text:00413770
.text:00413770 lpSystemInfo    = dword ptr  4
.text:00413770
.text:00413770                 jmp     ds:__imp_GetSystemInfo
.text:00413770 GetSystemInfo   endp
.text:00413770
.text:00413770 ; ---------------------------------------------------------------------------
.text:00413776                 align 10h
.text:00413780
.text:00413780 ; =============== S U B R O U T I N E =======================================
.text:00413780
.text:00413780 ; Attributes: thunk
.text:00413780
.text:00413780 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00413780 CreateDirectoryA proc near              ; CODE XREF: sub_411630+22↑p
.text:00413780
.text:00413780 lpPathName      = dword ptr  4
.text:00413780 lpSecurityAttributes= dword ptr  8
.text:00413780
.text:00413780                 jmp     ds:__imp_CreateDirectoryA
.text:00413780 CreateDirectoryA endp
.text:00413780
.text:00413780 ; ---------------------------------------------------------------------------
.text:00413786                 align 10h
.text:00413790
.text:00413790 ; =============== S U B R O U T I N E =======================================
.text:00413790
.text:00413790 ; Attributes: thunk
.text:00413790
.text:00413790 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00413790 GetTimeZoneInformation proc near        ; CODE XREF: sub_411730+22↑p
.text:00413790
.text:00413790 lpTimeZoneInformation= dword ptr  4
.text:00413790
.text:00413790                 jmp     ds:__imp_GetTimeZoneInformation
.text:00413790 GetTimeZoneInformation endp
.text:00413790
.text:00413790 ; ---------------------------------------------------------------------------
.text:00413796                 align 10h
.text:004137A0
.text:004137A0 ; =============== S U B R O U T I N E =======================================
.text:004137A0
.text:004137A0 ; Attributes: thunk
.text:004137A0
.text:004137A0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:004137A0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_411730+4F↑p
.text:004137A0
.text:004137A0 lpSystemTimeAsFileTime= dword ptr  4
.text:004137A0
.text:004137A0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:004137A0 GetSystemTimeAsFileTime endp
.text:004137A0
.text:004137A0 ; ---------------------------------------------------------------------------
.text:004137A6                 align 10h
.text:004137B0
.text:004137B0 ; =============== S U B R O U T I N E =======================================
.text:004137B0
.text:004137B0 ; Attributes: thunk
.text:004137B0
.text:004137B0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:004137B0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040E521↑p
.text:004137B0
.text:004137B0 hKey            = dword ptr  4
.text:004137B0 lpSubKey        = dword ptr  8
.text:004137B0 ulOptions       = dword ptr  0Ch
.text:004137B0 samDesired      = dword ptr  10h
.text:004137B0 phkResult       = dword ptr  14h
.text:004137B0
.text:004137B0                 jmp     ds:__imp_RegOpenKeyExA
.text:004137B0 RegOpenKeyExA   endp
.text:004137B0
.text:004137B0 ; ---------------------------------------------------------------------------
.text:004137B6                 align 10h
.text:004137C0
.text:004137C0 ; =============== S U B R O U T I N E =======================================
.text:004137C0
.text:004137C0 ; Attributes: thunk
.text:004137C0
.text:004137C0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004137C0 RegQueryValueExA proc near              ; CODE XREF: .text:0040E564↑p
.text:004137C0
.text:004137C0 hKey            = dword ptr  4
.text:004137C0 lpValueName     = dword ptr  8
.text:004137C0 lpReserved      = dword ptr  0Ch
.text:004137C0 lpType          = dword ptr  10h
.text:004137C0 lpData          = dword ptr  14h
.text:004137C0 lpcbData        = dword ptr  18h
.text:004137C0
.text:004137C0                 jmp     ds:__imp_RegQueryValueExA
.text:004137C0 RegQueryValueExA endp
.text:004137C0
.text:004137C0 ; ---------------------------------------------------------------------------
.text:004137C6                 align 10h
.text:004137D0
.text:004137D0 ; =============== S U B R O U T I N E =======================================
.text:004137D0
.text:004137D0 ; Attributes: thunk
.text:004137D0
.text:004137D0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004137D0 RegCloseKey     proc near               ; CODE XREF: .text:0040E588↑p
.text:004137D0
.text:004137D0 hKey            = dword ptr  4
.text:004137D0
.text:004137D0                 jmp     ds:__imp_RegCloseKey
.text:004137D0 RegCloseKey     endp
.text:004137D0
.text:004137D0 ; ---------------------------------------------------------------------------
.text:004137D6                 align 10h
.text:004137E0
.text:004137E0 ; =============== S U B R O U T I N E =======================================
.text:004137E0
.text:004137E0 ; Attributes: thunk
.text:004137E0
.text:004137E0 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:004137E0 GetUserNameA    proc near               ; CODE XREF: sub_4107D0+1E↑p
.text:004137E0
.text:004137E0 lpBuffer        = dword ptr  4
.text:004137E0 pcbBuffer       = dword ptr  8
.text:004137E0
.text:004137E0                 jmp     ds:__imp_GetUserNameA
.text:004137E0 GetUserNameA    endp
.text:004137E0
.text:004137E0 ; ---------------------------------------------------------------------------
.text:004137E6                 db 2 dup(90h)
.text:004137E8                 dd 2 dup(0)
.text:004137F0                 dd 21400h, 0
.text:004137F8                 dd 0C0h, 46000000h
.text:00413800 ; const IID rclsid
.text:00413800 rclsid          dd 21401h               ; Data1
.text:00413800                                         ; DATA XREF: sub_40F910+4B↑o
.text:00413800                 dw 0                    ; Data2
.text:00413800                 dw 0                    ; Data3
.text:00413800                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413810                 dd 214A0h, 0
.text:00413818                 dd 0C0h, 46000000h, 214A1h, 0
.text:00413828                 dd 0C0h, 46000000h, 214D0h, 0
.text:00413838                 dd 0C0h, 46000000h, 214D1h, 0
.text:00413848                 dd 0C0h, 46000000h, 214D2h, 0
.text:00413858                 dd 0C0h, 46000000h, 214E1h, 0
.text:00413868                 dd 0C0h, 46000000h, 214E2h, 0
.text:00413878                 dd 0C0h, 46000000h, 214E3h, 0
.text:00413888                 dd 0C0h, 46000000h, 214E4h, 0
.text:00413898                 dd 0C0h, 46000000h, 21500h, 0
.text:004138A8                 dd 0C0h, 46000000h, 214E5h, 0
.text:004138B8                 dd 0C0h, 46000000h, 214E6h, 0
.text:004138C8                 dd 0C0h, 46000000h, 214E8h, 0
.text:004138D8                 dd 0C0h, 46000000h, 214E9h, 0
.text:004138E8                 dd 0C0h, 46000000h, 214EAh, 0
.text:004138F8                 dd 0C0h, 46000000h, 214EBh, 0
.text:00413908                 dd 0C0h, 46000000h
.text:00413910 ; const IID riid
.text:00413910 riid            dd 214EEh               ; Data1
.text:00413910                                         ; DATA XREF: sub_40F910+2B↑o
.text:00413910                 dw 0                    ; Data2
.text:00413910                 dw 0                    ; Data3
.text:00413910                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413920                 dd 214EFh, 0
.text:00413928                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413938                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413948                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413958                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413968                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413978                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413988                 dd 0C0h, 46000000h, 214F6h, 0
.text:00413998                 dd 0C0h, 46000000h, 214F7h, 0
.text:004139A8                 dd 0C0h, 46000000h, 214F8h, 0
.text:004139B8                 dd 0C0h, 46000000h, 214F9h, 0
.text:004139C8                 dd 0C0h, 46000000h, 214FAh, 0
.text:004139D8                 dd 0C0h, 46000000h, 214FBh, 0
.text:004139E8                 dd 0C0h, 46000000h, 214FCh, 0
.text:004139F8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004139F8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004139F8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004139F8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004139F8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004139F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004139F8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004139F8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004139F8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004139F8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00413AC8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00413AD8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00413AE8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00413AF8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00413B08                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00413B08                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00413B08                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00413B08                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00413B08                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00413B08                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00413B08                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00413B90 dword_413B90    dd 0FFFFFFFFh           ; DATA XREF: .text:00412DB9↑r
.text:00413B90                                         ; .text:loc_412DE0↑r ...
.text:00413B94 dword_413B94    dd 0                    ; DATA XREF: .text:loc_412DEC↑r
.text:00413B94                                         ; sub_412E10:loc_412E5D↑r
.text:00413B98                 dd 0FFFFFFFFh
.text:00413B9C dword_413B9C    dd 19h dup(0)           ; DATA XREF: .data:off_4140E4↓o
.text:00413C00                 dd 100h dup(?)
.text:00413C00 _text           ends
.text:00413C00
.data:00414000 ; Section 2. (virtual address 00014000)
.data:00414000 ; Virtual size                  : 00000100 (    256.)
.data:00414000 ; Section size in file          : 00000200 (    512.)
.data:00414000 ; Offset to raw data for section: 00013000
.data:00414000 ; Flags C0000040: Data Readable Writable
.data:00414000 ; Alignment     : default
.data:00414000 ; ===========================================================================
.data:00414000
.data:00414000 ; Segment type: Pure data
.data:00414000 ; Segment permissions: Read/Write
.data:00414000 _data           segment para public 'DATA' use32
.data:00414000                 assume cs:_data
.data:00414000                 ;org 414000h
.data:00414000 dword_414000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00414000                                         ; sub_401080+CC↑r
.data:00414004 dword_414004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00414004                                         ; sub_401080+D4↑r
.data:00414008                 align 10h
.data:00414010 dword_414010    dd 1                    ; DATA XREF: sub_401E90:loc_402352↑r
.data:00414010                                         ; sub_401E90+56A↑r ...
.data:00414014 dword_414014    dd 1                    ; DATA XREF: sub_406040+11↑r
.data:00414014                                         ; .text:004060E1↑r
.data:00414018 dword_414018    dd 3Fh                  ; DATA XREF: sub_406040+7D↑w
.data:00414018                                         ; .text:0040614D↑w
.data:0041401C                 align 10h
.data:00414020 ; char *Buffer
.data:00414020 Buffer          dd offset aCopyrightC2005
.data:00414020                                         ; DATA XREF: sub_406570+DC↑r
.data:00414020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00414024                 align 10h
.data:00414030 off_414030      dd offset aInvalidUser  ; DATA XREF: sub_406900:loc_406B0E↑r
.data:00414030                                         ; "invalid user"
.data:00414034 off_414034      dd offset aInvalidGroup ; DATA XREF: sub_406900:loc_406A6E↑r
.data:00414034                                         ; "invalid group"
.data:00414038 off_414038      dd offset aCannotGetTheLo
.data:00414038                                         ; DATA XREF: sub_406900:loc_406B1D↑r
.data:00414038                                         ; "cannot get the login group of a numeric"...
.data:0041403C                 align 10h
.data:00414040 dword_414040    dd 1                    ; DATA XREF: sub_4093A0+22↑r
.data:00414040                                         ; sub_4093A0+65↑r ...
.data:00414044 dword_414044    dd 100h                 ; DATA XREF: sub_4093A0+3F↑o
.data:00414044                                         ; sub_4093A0+1A2↑r ...
.data:00414048 off_414048      dd offset unk_415060    ; DATA XREF: sub_4093A0+1AA↑r
.data:0041404C ; void *off_41404C
.data:0041404C off_41404C      dd offset dword_414044  ; DATA XREF: sub_4093A0+39↑r
.data:0041404C                                         ; sub_4093A0+60↑w ...
.data:00414050 ; int Code
.data:00414050 Code            dd 1                    ; DATA XREF: sub_406CF0+6D↑r
.data:00414050                                         ; sub_406CF0+9A↑r ...
.data:00414054                 align 10h
.data:00414060 dword_414060    dd 200h                 ; DATA XREF: sub_40A490+2ED↑r
.data:00414060                                         ; sub_40A490+2F8↑r ...
.data:00414064 ; char *off_414064
.data:00414064 off_414064      dd offset aComExeBatCmd ; DATA XREF: sub_40A960+3D3↑r
.data:00414064                                         ; sub_40A960+400↑r ...
.data:00414064                                         ; ".com;.exe;.bat;.cmd"
.data:00414068                 align 10h
.data:00414070 byte_414070     db 41h                  ; DATA XREF: sub_40C8A0+6B↑w
.data:00414070                                         ; sub_40C8A0:loc_40C9B4↑r
.data:00414071                 align 10h
.data:00414080 dword_414080    dd 1                    ; DATA XREF: .text:loc_40E3D7↑r
.data:00414080                                         ; sub_40E9B0+202↑w
.data:00414084                 align 10h
.data:00414090 off_414090      dd offset aNotset       ; DATA XREF: .text:0040EC2A↑r
.data:00414090                                         ; .text:0040F872↑r
.data:00414090                                         ; "notset"
.data:00414094 off_414094      dd offset aNotset       ; DATA XREF: .text:0040EC42↑r
.data:00414094                                         ; .text:0040EC64↑r ...
.data:00414094                                         ; "notset"
.data:00414098                 align 10h
.data:004140A0 ; char *Src
.data:004140A0 Src             dd offset byte_410410   ; DATA XREF: sub_410430+168↑r
.data:004140A4 off_4140A4      dd offset byte_410411   ; DATA XREF: sub_410430+1DA↑r
.data:004140A8                 align 10h
.data:004140B0 dword_4140B0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004140B4                 align 10h
.data:004140C0 ; int Mode
.data:004140C0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004140C0                                         ; sub_401080+80↑r ...
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004140D0                                         ; sub_401080+BA↑r
.data:004140D4                 align 10h
.data:004140E0 dword_4140E0    dd 0                    ; DATA XREF: sub_412E10+9↑r
.data:004140E0                                         ; sub_412E10+1D↑w
.data:004140E4 off_4140E4      dd offset dword_413B9C  ; DATA XREF: sub_412D80+6↑r
.data:004140E4                                         ; sub_412D80+17↑r ...
.data:004140E8                 align 1000h
.data:004140E8 _data           ends
.data:004140E8
.bss:00415000 ; Section 3. (virtual address 00015000)
.bss:00415000 ; Virtual size                  : 00000F30 (   3888.)
.bss:00415000 ; Section size in file          : 00000000 (      0.)
.bss:00415000 ; Offset to raw data for section: 00000000
.bss:00415000 ; Flags C0000080: Bss Readable Writable
.bss:00415000 ; Alignment     : default
.bss:00415000 ; ===========================================================================
.bss:00415000
.bss:00415000 ; Segment type: Uninitialized
.bss:00415000 ; Segment permissions: Read/Write
.bss:00415000 _bss            segment para public 'BSS' use32
.bss:00415000                 assume cs:_bss
.bss:00415000                 ;org 415000h
.bss:00415000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00415000 unk_415000      db    ? ;               ; DATA XREF: sub_401E90:loc_40243D↑o
.bss:00415000                                         ; sub_412D40+1↑o ...
.bss:00415001                 db    ? ;
.bss:00415002                 db    ? ;
.bss:00415003                 db    ? ;
.bss:00415004                 db    ? ;
.bss:00415005                 db    ? ;
.bss:00415006                 db    ? ;
.bss:00415007                 db    ? ;
.bss:00415008                 db    ? ;
.bss:00415009                 db    ? ;
.bss:0041500A                 db    ? ;
.bss:0041500B                 db    ? ;
.bss:0041500C                 db    ? ;
.bss:0041500D                 db    ? ;
.bss:0041500E                 db    ? ;
.bss:0041500F                 db    ? ;
.bss:00415010 ; char *dword_415010
.bss:00415010 dword_415010    dd ?                    ; DATA XREF: sub_401E90+3EF↑w
.bss:00415010                                         ; sub_401E90+4CA↑r ...
.bss:00415014                 align 10h
.bss:00415020 dword_415020    dd ?                    ; DATA XREF: sub_406040+9↑o
.bss:00415020                                         ; sub_406040+17↑w ...
.bss:00415024 dword_415024    dd ?                    ; DATA XREF: sub_406040+21↑w
.bss:00415024                                         ; .text:004060F9↑w
.bss:00415028 dword_415028    dd ?                    ; DATA XREF: sub_406040+77↑r
.bss:00415028                                         ; .text:00406147↑r
.bss:0041502C dword_41502C    dd ?                    ; DATA XREF: sub_406040+6B↑r
.bss:0041502C                                         ; .text:0040613B↑r
.bss:00415030                 db    ? ;
.bss:00415031                 db    ? ;
.bss:00415032                 db    ? ;
.bss:00415033                 db    ? ;
.bss:00415034                 db    ? ;
.bss:00415035                 db    ? ;
.bss:00415036                 db    ? ;
.bss:00415037                 db    ? ;
.bss:00415038                 db    ? ;
.bss:00415039                 db    ? ;
.bss:0041503A                 db    ? ;
.bss:0041503B                 db    ? ;
.bss:0041503C                 db    ? ;
.bss:0041503D                 db    ? ;
.bss:0041503E                 db    ? ;
.bss:0041503F                 db    ? ;
.bss:00415040                 db    ? ;
.bss:00415041                 db    ? ;
.bss:00415042                 db    ? ;
.bss:00415043                 db    ? ;
.bss:00415044                 db    ? ;
.bss:00415045                 db    ? ;
.bss:00415046                 db    ? ;
.bss:00415047                 db    ? ;
.bss:00415048                 db    ? ;
.bss:00415049                 db    ? ;
.bss:0041504A                 db    ? ;
.bss:0041504B                 db    ? ;
.bss:0041504C                 db    ? ;
.bss:0041504D                 db    ? ;
.bss:0041504E                 db    ? ;
.bss:0041504F                 db    ? ;
.bss:00415050 ; char *dword_415050
.bss:00415050 dword_415050    dd ?                    ; DATA XREF: .text:00406CC4↑w
.bss:00415050                                         ; sub_406CF0+58↑r
.bss:00415054                 align 10h
.bss:00415060 unk_415060      db    ? ;               ; DATA XREF: sub_4093A0+100↑o
.bss:00415060                                         ; .data:off_414048↑o
.bss:00415061                 db    ? ;
.bss:00415062                 db    ? ;
.bss:00415063                 db    ? ;
.bss:00415064                 db    ? ;
.bss:00415065                 db    ? ;
.bss:00415066                 db    ? ;
.bss:00415067                 db    ? ;
.bss:00415068                 db    ? ;
.bss:00415069                 db    ? ;
.bss:0041506A                 db    ? ;
.bss:0041506B                 db    ? ;
.bss:0041506C                 db    ? ;
.bss:0041506D                 db    ? ;
.bss:0041506E                 db    ? ;
.bss:0041506F                 db    ? ;
.bss:00415070                 db    ? ;
.bss:00415071                 db    ? ;
.bss:00415072                 db    ? ;
.bss:00415073                 db    ? ;
.bss:00415074                 db    ? ;
.bss:00415075                 db    ? ;
.bss:00415076                 db    ? ;
.bss:00415077                 db    ? ;
.bss:00415078                 db    ? ;
.bss:00415079                 db    ? ;
.bss:0041507A                 db    ? ;
.bss:0041507B                 db    ? ;
.bss:0041507C                 db    ? ;
.bss:0041507D                 db    ? ;
.bss:0041507E                 db    ? ;
.bss:0041507F                 db    ? ;
.bss:00415080                 db    ? ;
.bss:00415081                 db    ? ;
.bss:00415082                 db    ? ;
.bss:00415083                 db    ? ;
.bss:00415084                 db    ? ;
.bss:00415085                 db    ? ;
.bss:00415086                 db    ? ;
.bss:00415087                 db    ? ;
.bss:00415088                 db    ? ;
.bss:00415089                 db    ? ;
.bss:0041508A                 db    ? ;
.bss:0041508B                 db    ? ;
.bss:0041508C                 db    ? ;
.bss:0041508D                 db    ? ;
.bss:0041508E                 db    ? ;
.bss:0041508F                 db    ? ;
.bss:00415090                 db    ? ;
.bss:00415091                 db    ? ;
.bss:00415092                 db    ? ;
.bss:00415093                 db    ? ;
.bss:00415094                 db    ? ;
.bss:00415095                 db    ? ;
.bss:00415096                 db    ? ;
.bss:00415097                 db    ? ;
.bss:00415098                 db    ? ;
.bss:00415099                 db    ? ;
.bss:0041509A                 db    ? ;
.bss:0041509B                 db    ? ;
.bss:0041509C                 db    ? ;
.bss:0041509D                 db    ? ;
.bss:0041509E                 db    ? ;
.bss:0041509F                 db    ? ;
.bss:004150A0                 db    ? ;
.bss:004150A1                 db    ? ;
.bss:004150A2                 db    ? ;
.bss:004150A3                 db    ? ;
.bss:004150A4                 db    ? ;
.bss:004150A5                 db    ? ;
.bss:004150A6                 db    ? ;
.bss:004150A7                 db    ? ;
.bss:004150A8                 db    ? ;
.bss:004150A9                 db    ? ;
.bss:004150AA                 db    ? ;
.bss:004150AB                 db    ? ;
.bss:004150AC                 db    ? ;
.bss:004150AD                 db    ? ;
.bss:004150AE                 db    ? ;
.bss:004150AF                 db    ? ;
.bss:004150B0                 db    ? ;
.bss:004150B1                 db    ? ;
.bss:004150B2                 db    ? ;
.bss:004150B3                 db    ? ;
.bss:004150B4                 db    ? ;
.bss:004150B5                 db    ? ;
.bss:004150B6                 db    ? ;
.bss:004150B7                 db    ? ;
.bss:004150B8                 db    ? ;
.bss:004150B9                 db    ? ;
.bss:004150BA                 db    ? ;
.bss:004150BB                 db    ? ;
.bss:004150BC                 db    ? ;
.bss:004150BD                 db    ? ;
.bss:004150BE                 db    ? ;
.bss:004150BF                 db    ? ;
.bss:004150C0                 db    ? ;
.bss:004150C1                 db    ? ;
.bss:004150C2                 db    ? ;
.bss:004150C3                 db    ? ;
.bss:004150C4                 db    ? ;
.bss:004150C5                 db    ? ;
.bss:004150C6                 db    ? ;
.bss:004150C7                 db    ? ;
.bss:004150C8                 db    ? ;
.bss:004150C9                 db    ? ;
.bss:004150CA                 db    ? ;
.bss:004150CB                 db    ? ;
.bss:004150CC                 db    ? ;
.bss:004150CD                 db    ? ;
.bss:004150CE                 db    ? ;
.bss:004150CF                 db    ? ;
.bss:004150D0                 db    ? ;
.bss:004150D1                 db    ? ;
.bss:004150D2                 db    ? ;
.bss:004150D3                 db    ? ;
.bss:004150D4                 db    ? ;
.bss:004150D5                 db    ? ;
.bss:004150D6                 db    ? ;
.bss:004150D7                 db    ? ;
.bss:004150D8                 db    ? ;
.bss:004150D9                 db    ? ;
.bss:004150DA                 db    ? ;
.bss:004150DB                 db    ? ;
.bss:004150DC                 db    ? ;
.bss:004150DD                 db    ? ;
.bss:004150DE                 db    ? ;
.bss:004150DF                 db    ? ;
.bss:004150E0                 db    ? ;
.bss:004150E1                 db    ? ;
.bss:004150E2                 db    ? ;
.bss:004150E3                 db    ? ;
.bss:004150E4                 db    ? ;
.bss:004150E5                 db    ? ;
.bss:004150E6                 db    ? ;
.bss:004150E7                 db    ? ;
.bss:004150E8                 db    ? ;
.bss:004150E9                 db    ? ;
.bss:004150EA                 db    ? ;
.bss:004150EB                 db    ? ;
.bss:004150EC                 db    ? ;
.bss:004150ED                 db    ? ;
.bss:004150EE                 db    ? ;
.bss:004150EF                 db    ? ;
.bss:004150F0                 db    ? ;
.bss:004150F1                 db    ? ;
.bss:004150F2                 db    ? ;
.bss:004150F3                 db    ? ;
.bss:004150F4                 db    ? ;
.bss:004150F5                 db    ? ;
.bss:004150F6                 db    ? ;
.bss:004150F7                 db    ? ;
.bss:004150F8                 db    ? ;
.bss:004150F9                 db    ? ;
.bss:004150FA                 db    ? ;
.bss:004150FB                 db    ? ;
.bss:004150FC                 db    ? ;
.bss:004150FD                 db    ? ;
.bss:004150FE                 db    ? ;
.bss:004150FF                 db    ? ;
.bss:00415100                 db    ? ;
.bss:00415101                 db    ? ;
.bss:00415102                 db    ? ;
.bss:00415103                 db    ? ;
.bss:00415104                 db    ? ;
.bss:00415105                 db    ? ;
.bss:00415106                 db    ? ;
.bss:00415107                 db    ? ;
.bss:00415108                 db    ? ;
.bss:00415109                 db    ? ;
.bss:0041510A                 db    ? ;
.bss:0041510B                 db    ? ;
.bss:0041510C                 db    ? ;
.bss:0041510D                 db    ? ;
.bss:0041510E                 db    ? ;
.bss:0041510F                 db    ? ;
.bss:00415110                 db    ? ;
.bss:00415111                 db    ? ;
.bss:00415112                 db    ? ;
.bss:00415113                 db    ? ;
.bss:00415114                 db    ? ;
.bss:00415115                 db    ? ;
.bss:00415116                 db    ? ;
.bss:00415117                 db    ? ;
.bss:00415118                 db    ? ;
.bss:00415119                 db    ? ;
.bss:0041511A                 db    ? ;
.bss:0041511B                 db    ? ;
.bss:0041511C                 db    ? ;
.bss:0041511D                 db    ? ;
.bss:0041511E                 db    ? ;
.bss:0041511F                 db    ? ;
.bss:00415120                 db    ? ;
.bss:00415121                 db    ? ;
.bss:00415122                 db    ? ;
.bss:00415123                 db    ? ;
.bss:00415124                 db    ? ;
.bss:00415125                 db    ? ;
.bss:00415126                 db    ? ;
.bss:00415127                 db    ? ;
.bss:00415128                 db    ? ;
.bss:00415129                 db    ? ;
.bss:0041512A                 db    ? ;
.bss:0041512B                 db    ? ;
.bss:0041512C                 db    ? ;
.bss:0041512D                 db    ? ;
.bss:0041512E                 db    ? ;
.bss:0041512F                 db    ? ;
.bss:00415130                 db    ? ;
.bss:00415131                 db    ? ;
.bss:00415132                 db    ? ;
.bss:00415133                 db    ? ;
.bss:00415134                 db    ? ;
.bss:00415135                 db    ? ;
.bss:00415136                 db    ? ;
.bss:00415137                 db    ? ;
.bss:00415138                 db    ? ;
.bss:00415139                 db    ? ;
.bss:0041513A                 db    ? ;
.bss:0041513B                 db    ? ;
.bss:0041513C                 db    ? ;
.bss:0041513D                 db    ? ;
.bss:0041513E                 db    ? ;
.bss:0041513F                 db    ? ;
.bss:00415140                 db    ? ;
.bss:00415141                 db    ? ;
.bss:00415142                 db    ? ;
.bss:00415143                 db    ? ;
.bss:00415144                 db    ? ;
.bss:00415145                 db    ? ;
.bss:00415146                 db    ? ;
.bss:00415147                 db    ? ;
.bss:00415148                 db    ? ;
.bss:00415149                 db    ? ;
.bss:0041514A                 db    ? ;
.bss:0041514B                 db    ? ;
.bss:0041514C                 db    ? ;
.bss:0041514D                 db    ? ;
.bss:0041514E                 db    ? ;
.bss:0041514F                 db    ? ;
.bss:00415150                 db    ? ;
.bss:00415151                 db    ? ;
.bss:00415152                 db    ? ;
.bss:00415153                 db    ? ;
.bss:00415154                 db    ? ;
.bss:00415155                 db    ? ;
.bss:00415156                 db    ? ;
.bss:00415157                 db    ? ;
.bss:00415158                 db    ? ;
.bss:00415159                 db    ? ;
.bss:0041515A                 db    ? ;
.bss:0041515B                 db    ? ;
.bss:0041515C                 db    ? ;
.bss:0041515D                 db    ? ;
.bss:0041515E                 db    ? ;
.bss:0041515F                 db    ? ;
.bss:00415160 dword_415160    dd ?                    ; DATA XREF: .text:loc_408D31↑o
.bss:00415160                                         ; .text:loc_408D50↑o ...
.bss:00415164 dword_415164    dd ?                    ; DATA XREF: .text:loc_408DD0↑o
.bss:00415164                                         ; .text:00409258↑r ...
.bss:00415168 dword_415168    dd ?                    ; DATA XREF: .text:00409252↑r
.bss:00415168                                         ; sub_409300+2C↑r
.bss:0041516C dword_41516C    dd ?                    ; DATA XREF: .text:00409246↑r
.bss:0041516C                                         ; sub_409300+22↑r
.bss:00415170 dword_415170    dd ?                    ; DATA XREF: .text:00409262↑r
.bss:00415170                                         ; sub_409300+36↑r
.bss:00415174 dword_415174    dd ?                    ; DATA XREF: .text:00409272↑r
.bss:00415174                                         ; sub_409300+4E↑r
.bss:00415178 dword_415178    dd ?                    ; DATA XREF: .text:0040928F↑r
.bss:00415178                                         ; sub_409300+62↑r
.bss:0041517C dword_41517C    dd ?                    ; DATA XREF: .text:00409285↑r
.bss:0041517C                                         ; sub_409300+70↑r
.bss:00415180 dword_415180    dd ?                    ; DATA XREF: .text:00409268↑r
.bss:00415180                                         ; sub_409300+7A↑r
.bss:00415184                 align 10h
.bss:00415190 ; char *Str1
.bss:00415190 Str1            dd ?                    ; DATA XREF: sub_409CA4:loc_409CDD↑w
.bss:00415190                                         ; sub_409CA4:loc_409E10↑r
.bss:00415194                 align 10h
.bss:004151A0 dword_4151A0    dd ?                    ; DATA XREF: sub_409CA4+2D↑r
.bss:004151A0                                         ; sub_409CA4+3F↑w
.bss:004151A4                 align 10h
.bss:004151B0 dword_4151B0    dd ?                    ; DATA XREF: sub_40A960+100↑r
.bss:004151B0                                         ; sub_40A960+308↑w
.bss:004151B4                 align 10h
.bss:004151C0 ; char *Str
.bss:004151C0 Str             dd ?                    ; DATA XREF: sub_40A960:loc_40ACC4↑r
.bss:004151C0                                         ; sub_40A960+3B6↑r ...
.bss:004151C4                 align 10h
.bss:004151D0 dword_4151D0    dd ?                    ; DATA XREF: sub_40C8A0+1C↑r
.bss:004151D0                                         ; sub_40C8A0+104↑w
.bss:004151D4                 align 10h
.bss:004151E0 dword_4151E0    dd ?                    ; DATA XREF: sub_40C8A0+B↑r
.bss:004151E0                                         ; sub_40C8A0+71↑w
.bss:004151E4                 align 10h
.bss:004151F0 dword_4151F0    dd ?                    ; DATA XREF: sub_40C8A0+85↑r
.bss:004151F0                                         ; sub_40C8A0+B9↑w
.bss:004151F4 dword_4151F4    dd ?                    ; DATA XREF: sub_40C8A0+C4↑w
.bss:004151F8 dword_4151F8    dd ?                    ; DATA XREF: sub_40C8A0+2E↑o
.bss:004151F8                                         ; sub_40C8A0+CF↑w
.bss:004151FC dword_4151FC    dd ?                    ; DATA XREF: sub_40C8A0+DA↑w
.bss:00415200                 db    ? ;
.bss:00415201                 db    ? ;
.bss:00415202                 db    ? ;
.bss:00415203                 db    ? ;
.bss:00415204                 db    ? ;
.bss:00415205                 db    ? ;
.bss:00415206                 db    ? ;
.bss:00415207                 db    ? ;
.bss:00415208                 db    ? ;
.bss:00415209                 db    ? ;
.bss:0041520A                 db    ? ;
.bss:0041520B                 db    ? ;
.bss:0041520C                 db    ? ;
.bss:0041520D                 db    ? ;
.bss:0041520E                 db    ? ;
.bss:0041520F                 db    ? ;
.bss:00415210                 db    ? ;
.bss:00415211                 db    ? ;
.bss:00415212                 db    ? ;
.bss:00415213                 db    ? ;
.bss:00415214                 db    ? ;
.bss:00415215                 db    ? ;
.bss:00415216                 db    ? ;
.bss:00415217                 db    ? ;
.bss:00415218                 db    ? ;
.bss:00415219                 db    ? ;
.bss:0041521A                 db    ? ;
.bss:0041521B                 db    ? ;
.bss:0041521C                 db    ? ;
.bss:0041521D                 db    ? ;
.bss:0041521E                 db    ? ;
.bss:0041521F                 db    ? ;
.bss:00415220                 db    ? ;
.bss:00415221                 db    ? ;
.bss:00415222                 db    ? ;
.bss:00415223                 db    ? ;
.bss:00415224                 db    ? ;
.bss:00415225                 db    ? ;
.bss:00415226                 db    ? ;
.bss:00415227                 db    ? ;
.bss:00415228                 db    ? ;
.bss:00415229                 db    ? ;
.bss:0041522A                 db    ? ;
.bss:0041522B                 db    ? ;
.bss:0041522C                 db    ? ;
.bss:0041522D                 db    ? ;
.bss:0041522E                 db    ? ;
.bss:0041522F                 db    ? ;
.bss:00415230                 db    ? ;
.bss:00415231                 db    ? ;
.bss:00415232                 db    ? ;
.bss:00415233                 db    ? ;
.bss:00415234                 db    ? ;
.bss:00415235                 db    ? ;
.bss:00415236                 db    ? ;
.bss:00415237                 db    ? ;
.bss:00415238                 db    ? ;
.bss:00415239                 db    ? ;
.bss:0041523A                 db    ? ;
.bss:0041523B                 db    ? ;
.bss:0041523C                 db    ? ;
.bss:0041523D                 db    ? ;
.bss:0041523E                 db    ? ;
.bss:0041523F                 db    ? ;
.bss:00415240                 db    ? ;
.bss:00415241                 db    ? ;
.bss:00415242                 db    ? ;
.bss:00415243                 db    ? ;
.bss:00415244                 db    ? ;
.bss:00415245                 db    ? ;
.bss:00415246                 db    ? ;
.bss:00415247                 db    ? ;
.bss:00415248                 db    ? ;
.bss:00415249                 db    ? ;
.bss:0041524A                 db    ? ;
.bss:0041524B                 db    ? ;
.bss:0041524C                 db    ? ;
.bss:0041524D                 db    ? ;
.bss:0041524E                 db    ? ;
.bss:0041524F                 db    ? ;
.bss:00415250                 db    ? ;
.bss:00415251                 db    ? ;
.bss:00415252                 db    ? ;
.bss:00415253                 db    ? ;
.bss:00415254                 db    ? ;
.bss:00415255                 db    ? ;
.bss:00415256                 db    ? ;
.bss:00415257                 db    ? ;
.bss:00415258                 db    ? ;
.bss:00415259                 db    ? ;
.bss:0041525A                 db    ? ;
.bss:0041525B                 db    ? ;
.bss:0041525C                 db    ? ;
.bss:0041525D                 db    ? ;
.bss:0041525E                 db    ? ;
.bss:0041525F                 db    ? ;
.bss:00415260                 db    ? ;
.bss:00415261                 db    ? ;
.bss:00415262                 db    ? ;
.bss:00415263                 db    ? ;
.bss:00415264                 db    ? ;
.bss:00415265                 db    ? ;
.bss:00415266                 db    ? ;
.bss:00415267                 db    ? ;
.bss:00415268                 db    ? ;
.bss:00415269                 db    ? ;
.bss:0041526A                 db    ? ;
.bss:0041526B                 db    ? ;
.bss:0041526C                 db    ? ;
.bss:0041526D                 db    ? ;
.bss:0041526E                 db    ? ;
.bss:0041526F                 db    ? ;
.bss:00415270                 db    ? ;
.bss:00415271                 db    ? ;
.bss:00415272                 db    ? ;
.bss:00415273                 db    ? ;
.bss:00415274                 db    ? ;
.bss:00415275                 db    ? ;
.bss:00415276                 db    ? ;
.bss:00415277                 db    ? ;
.bss:00415278                 db    ? ;
.bss:00415279                 db    ? ;
.bss:0041527A                 db    ? ;
.bss:0041527B                 db    ? ;
.bss:0041527C                 db    ? ;
.bss:0041527D                 db    ? ;
.bss:0041527E                 db    ? ;
.bss:0041527F                 db    ? ;
.bss:00415280                 db    ? ;
.bss:00415281                 db    ? ;
.bss:00415282                 db    ? ;
.bss:00415283                 db    ? ;
.bss:00415284                 db    ? ;
.bss:00415285                 db    ? ;
.bss:00415286                 db    ? ;
.bss:00415287                 db    ? ;
.bss:00415288                 db    ? ;
.bss:00415289                 db    ? ;
.bss:0041528A                 db    ? ;
.bss:0041528B                 db    ? ;
.bss:0041528C                 db    ? ;
.bss:0041528D                 db    ? ;
.bss:0041528E                 db    ? ;
.bss:0041528F                 db    ? ;
.bss:00415290                 db    ? ;
.bss:00415291                 db    ? ;
.bss:00415292                 db    ? ;
.bss:00415293                 db    ? ;
.bss:00415294                 db    ? ;
.bss:00415295                 db    ? ;
.bss:00415296                 db    ? ;
.bss:00415297                 db    ? ;
.bss:00415298                 db    ? ;
.bss:00415299                 db    ? ;
.bss:0041529A                 db    ? ;
.bss:0041529B                 db    ? ;
.bss:0041529C                 db    ? ;
.bss:0041529D                 db    ? ;
.bss:0041529E                 db    ? ;
.bss:0041529F                 db    ? ;
.bss:004152A0                 db    ? ;
.bss:004152A1                 db    ? ;
.bss:004152A2                 db    ? ;
.bss:004152A3                 db    ? ;
.bss:004152A4                 db    ? ;
.bss:004152A5                 db    ? ;
.bss:004152A6                 db    ? ;
.bss:004152A7                 db    ? ;
.bss:004152A8                 db    ? ;
.bss:004152A9                 db    ? ;
.bss:004152AA                 db    ? ;
.bss:004152AB                 db    ? ;
.bss:004152AC                 db    ? ;
.bss:004152AD                 db    ? ;
.bss:004152AE                 db    ? ;
.bss:004152AF                 db    ? ;
.bss:004152B0                 db    ? ;
.bss:004152B1                 db    ? ;
.bss:004152B2                 db    ? ;
.bss:004152B3                 db    ? ;
.bss:004152B4                 db    ? ;
.bss:004152B5                 db    ? ;
.bss:004152B6                 db    ? ;
.bss:004152B7                 db    ? ;
.bss:004152B8                 db    ? ;
.bss:004152B9                 db    ? ;
.bss:004152BA                 db    ? ;
.bss:004152BB                 db    ? ;
.bss:004152BC                 db    ? ;
.bss:004152BD                 db    ? ;
.bss:004152BE                 db    ? ;
.bss:004152BF                 db    ? ;
.bss:004152C0                 db    ? ;
.bss:004152C1                 db    ? ;
.bss:004152C2                 db    ? ;
.bss:004152C3                 db    ? ;
.bss:004152C4                 db    ? ;
.bss:004152C5                 db    ? ;
.bss:004152C6                 db    ? ;
.bss:004152C7                 db    ? ;
.bss:004152C8                 db    ? ;
.bss:004152C9                 db    ? ;
.bss:004152CA                 db    ? ;
.bss:004152CB                 db    ? ;
.bss:004152CC                 db    ? ;
.bss:004152CD                 db    ? ;
.bss:004152CE                 db    ? ;
.bss:004152CF                 db    ? ;
.bss:004152D0                 db    ? ;
.bss:004152D1                 db    ? ;
.bss:004152D2                 db    ? ;
.bss:004152D3                 db    ? ;
.bss:004152D4                 db    ? ;
.bss:004152D5                 db    ? ;
.bss:004152D6                 db    ? ;
.bss:004152D7                 db    ? ;
.bss:004152D8                 db    ? ;
.bss:004152D9                 db    ? ;
.bss:004152DA                 db    ? ;
.bss:004152DB                 db    ? ;
.bss:004152DC                 db    ? ;
.bss:004152DD                 db    ? ;
.bss:004152DE                 db    ? ;
.bss:004152DF                 db    ? ;
.bss:004152E0                 db    ? ;
.bss:004152E1                 db    ? ;
.bss:004152E2                 db    ? ;
.bss:004152E3                 db    ? ;
.bss:004152E4                 db    ? ;
.bss:004152E5                 db    ? ;
.bss:004152E6                 db    ? ;
.bss:004152E7                 db    ? ;
.bss:004152E8                 db    ? ;
.bss:004152E9                 db    ? ;
.bss:004152EA                 db    ? ;
.bss:004152EB                 db    ? ;
.bss:004152EC                 db    ? ;
.bss:004152ED                 db    ? ;
.bss:004152EE                 db    ? ;
.bss:004152EF                 db    ? ;
.bss:004152F0                 db    ? ;
.bss:004152F1                 db    ? ;
.bss:004152F2                 db    ? ;
.bss:004152F3                 db    ? ;
.bss:004152F4                 db    ? ;
.bss:004152F5                 db    ? ;
.bss:004152F6                 db    ? ;
.bss:004152F7                 db    ? ;
.bss:004152F8                 db    ? ;
.bss:004152F9                 db    ? ;
.bss:004152FA                 db    ? ;
.bss:004152FB                 db    ? ;
.bss:004152FC                 db    ? ;
.bss:004152FD                 db    ? ;
.bss:004152FE                 db    ? ;
.bss:004152FF                 db    ? ;
.bss:00415300                 db    ? ;
.bss:00415301                 db    ? ;
.bss:00415302                 db    ? ;
.bss:00415303                 db    ? ;
.bss:00415304                 db    ? ;
.bss:00415305                 db    ? ;
.bss:00415306                 db    ? ;
.bss:00415307                 db    ? ;
.bss:00415308                 db    ? ;
.bss:00415309                 db    ? ;
.bss:0041530A                 db    ? ;
.bss:0041530B                 db    ? ;
.bss:0041530C                 db    ? ;
.bss:0041530D                 db    ? ;
.bss:0041530E                 db    ? ;
.bss:0041530F                 db    ? ;
.bss:00415310                 db    ? ;
.bss:00415311                 db    ? ;
.bss:00415312                 db    ? ;
.bss:00415313                 db    ? ;
.bss:00415314                 db    ? ;
.bss:00415315                 db    ? ;
.bss:00415316                 db    ? ;
.bss:00415317                 db    ? ;
.bss:00415318                 db    ? ;
.bss:00415319                 db    ? ;
.bss:0041531A                 db    ? ;
.bss:0041531B                 db    ? ;
.bss:0041531C                 db    ? ;
.bss:0041531D                 db    ? ;
.bss:0041531E                 db    ? ;
.bss:0041531F                 db    ? ;
.bss:00415320                 db    ? ;
.bss:00415321                 db    ? ;
.bss:00415322                 db    ? ;
.bss:00415323                 db    ? ;
.bss:00415324                 db    ? ;
.bss:00415325                 db    ? ;
.bss:00415326                 db    ? ;
.bss:00415327                 db    ? ;
.bss:00415328                 db    ? ;
.bss:00415329                 db    ? ;
.bss:0041532A                 db    ? ;
.bss:0041532B                 db    ? ;
.bss:0041532C                 db    ? ;
.bss:0041532D                 db    ? ;
.bss:0041532E                 db    ? ;
.bss:0041532F                 db    ? ;
.bss:00415330                 db    ? ;
.bss:00415331                 db    ? ;
.bss:00415332                 db    ? ;
.bss:00415333                 db    ? ;
.bss:00415334                 db    ? ;
.bss:00415335                 db    ? ;
.bss:00415336                 db    ? ;
.bss:00415337                 db    ? ;
.bss:00415338                 db    ? ;
.bss:00415339                 db    ? ;
.bss:0041533A                 db    ? ;
.bss:0041533B                 db    ? ;
.bss:0041533C                 db    ? ;
.bss:0041533D                 db    ? ;
.bss:0041533E                 db    ? ;
.bss:0041533F                 db    ? ;
.bss:00415340                 db    ? ;
.bss:00415341                 db    ? ;
.bss:00415342                 db    ? ;
.bss:00415343                 db    ? ;
.bss:00415344                 db    ? ;
.bss:00415345                 db    ? ;
.bss:00415346                 db    ? ;
.bss:00415347                 db    ? ;
.bss:00415348                 db    ? ;
.bss:00415349                 db    ? ;
.bss:0041534A                 db    ? ;
.bss:0041534B                 db    ? ;
.bss:0041534C                 db    ? ;
.bss:0041534D                 db    ? ;
.bss:0041534E                 db    ? ;
.bss:0041534F                 db    ? ;
.bss:00415350                 db    ? ;
.bss:00415351                 db    ? ;
.bss:00415352                 db    ? ;
.bss:00415353                 db    ? ;
.bss:00415354                 db    ? ;
.bss:00415355                 db    ? ;
.bss:00415356                 db    ? ;
.bss:00415357                 db    ? ;
.bss:00415358                 db    ? ;
.bss:00415359                 db    ? ;
.bss:0041535A                 db    ? ;
.bss:0041535B                 db    ? ;
.bss:0041535C                 db    ? ;
.bss:0041535D                 db    ? ;
.bss:0041535E                 db    ? ;
.bss:0041535F                 db    ? ;
.bss:00415360                 db    ? ;
.bss:00415361                 db    ? ;
.bss:00415362                 db    ? ;
.bss:00415363                 db    ? ;
.bss:00415364                 db    ? ;
.bss:00415365                 db    ? ;
.bss:00415366                 db    ? ;
.bss:00415367                 db    ? ;
.bss:00415368                 db    ? ;
.bss:00415369                 db    ? ;
.bss:0041536A                 db    ? ;
.bss:0041536B                 db    ? ;
.bss:0041536C                 db    ? ;
.bss:0041536D                 db    ? ;
.bss:0041536E                 db    ? ;
.bss:0041536F                 db    ? ;
.bss:00415370                 db    ? ;
.bss:00415371                 db    ? ;
.bss:00415372                 db    ? ;
.bss:00415373                 db    ? ;
.bss:00415374                 db    ? ;
.bss:00415375                 db    ? ;
.bss:00415376                 db    ? ;
.bss:00415377                 db    ? ;
.bss:00415378                 db    ? ;
.bss:00415379                 db    ? ;
.bss:0041537A                 db    ? ;
.bss:0041537B                 db    ? ;
.bss:0041537C                 db    ? ;
.bss:0041537D                 db    ? ;
.bss:0041537E                 db    ? ;
.bss:0041537F                 db    ? ;
.bss:00415380                 db    ? ;
.bss:00415381                 db    ? ;
.bss:00415382                 db    ? ;
.bss:00415383                 db    ? ;
.bss:00415384                 db    ? ;
.bss:00415385                 db    ? ;
.bss:00415386                 db    ? ;
.bss:00415387                 db    ? ;
.bss:00415388                 db    ? ;
.bss:00415389                 db    ? ;
.bss:0041538A                 db    ? ;
.bss:0041538B                 db    ? ;
.bss:0041538C                 db    ? ;
.bss:0041538D                 db    ? ;
.bss:0041538E                 db    ? ;
.bss:0041538F                 db    ? ;
.bss:00415390                 db    ? ;
.bss:00415391                 db    ? ;
.bss:00415392                 db    ? ;
.bss:00415393                 db    ? ;
.bss:00415394                 db    ? ;
.bss:00415395                 db    ? ;
.bss:00415396                 db    ? ;
.bss:00415397                 db    ? ;
.bss:00415398                 db    ? ;
.bss:00415399                 db    ? ;
.bss:0041539A                 db    ? ;
.bss:0041539B                 db    ? ;
.bss:0041539C                 db    ? ;
.bss:0041539D                 db    ? ;
.bss:0041539E                 db    ? ;
.bss:0041539F                 db    ? ;
.bss:004153A0                 db    ? ;
.bss:004153A1                 db    ? ;
.bss:004153A2                 db    ? ;
.bss:004153A3                 db    ? ;
.bss:004153A4                 db    ? ;
.bss:004153A5                 db    ? ;
.bss:004153A6                 db    ? ;
.bss:004153A7                 db    ? ;
.bss:004153A8                 db    ? ;
.bss:004153A9                 db    ? ;
.bss:004153AA                 db    ? ;
.bss:004153AB                 db    ? ;
.bss:004153AC                 db    ? ;
.bss:004153AD                 db    ? ;
.bss:004153AE                 db    ? ;
.bss:004153AF                 db    ? ;
.bss:004153B0                 db    ? ;
.bss:004153B1                 db    ? ;
.bss:004153B2                 db    ? ;
.bss:004153B3                 db    ? ;
.bss:004153B4                 db    ? ;
.bss:004153B5                 db    ? ;
.bss:004153B6                 db    ? ;
.bss:004153B7                 db    ? ;
.bss:004153B8                 db    ? ;
.bss:004153B9                 db    ? ;
.bss:004153BA                 db    ? ;
.bss:004153BB                 db    ? ;
.bss:004153BC                 db    ? ;
.bss:004153BD                 db    ? ;
.bss:004153BE                 db    ? ;
.bss:004153BF                 db    ? ;
.bss:004153C0                 db    ? ;
.bss:004153C1                 db    ? ;
.bss:004153C2                 db    ? ;
.bss:004153C3                 db    ? ;
.bss:004153C4                 db    ? ;
.bss:004153C5                 db    ? ;
.bss:004153C6                 db    ? ;
.bss:004153C7                 db    ? ;
.bss:004153C8                 db    ? ;
.bss:004153C9                 db    ? ;
.bss:004153CA                 db    ? ;
.bss:004153CB                 db    ? ;
.bss:004153CC                 db    ? ;
.bss:004153CD                 db    ? ;
.bss:004153CE                 db    ? ;
.bss:004153CF                 db    ? ;
.bss:004153D0                 db    ? ;
.bss:004153D1                 db    ? ;
.bss:004153D2                 db    ? ;
.bss:004153D3                 db    ? ;
.bss:004153D4                 db    ? ;
.bss:004153D5                 db    ? ;
.bss:004153D6                 db    ? ;
.bss:004153D7                 db    ? ;
.bss:004153D8                 db    ? ;
.bss:004153D9                 db    ? ;
.bss:004153DA                 db    ? ;
.bss:004153DB                 db    ? ;
.bss:004153DC                 db    ? ;
.bss:004153DD                 db    ? ;
.bss:004153DE                 db    ? ;
.bss:004153DF                 db    ? ;
.bss:004153E0                 db    ? ;
.bss:004153E1                 db    ? ;
.bss:004153E2                 db    ? ;
.bss:004153E3                 db    ? ;
.bss:004153E4                 db    ? ;
.bss:004153E5                 db    ? ;
.bss:004153E6                 db    ? ;
.bss:004153E7                 db    ? ;
.bss:004153E8                 db    ? ;
.bss:004153E9                 db    ? ;
.bss:004153EA                 db    ? ;
.bss:004153EB                 db    ? ;
.bss:004153EC                 db    ? ;
.bss:004153ED                 db    ? ;
.bss:004153EE                 db    ? ;
.bss:004153EF                 db    ? ;
.bss:004153F0 unk_4153F0      db    ? ;               ; DATA XREF: sub_40D5C0+22↑o
.bss:004153F1                 db    ? ;
.bss:004153F2                 db    ? ;
.bss:004153F3                 db    ? ;
.bss:004153F4                 db    ? ;
.bss:004153F5                 db    ? ;
.bss:004153F6                 db    ? ;
.bss:004153F7                 db    ? ;
.bss:004153F8                 db    ? ;
.bss:004153F9                 db    ? ;
.bss:004153FA                 db    ? ;
.bss:004153FB                 db    ? ;
.bss:004153FC                 db    ? ;
.bss:004153FD                 db    ? ;
.bss:004153FE                 db    ? ;
.bss:004153FF                 db    ? ;
.bss:00415400                 db    ? ;
.bss:00415401                 db    ? ;
.bss:00415402                 db    ? ;
.bss:00415403                 db    ? ;
.bss:00415404                 db    ? ;
.bss:00415405                 db    ? ;
.bss:00415406                 db    ? ;
.bss:00415407                 db    ? ;
.bss:00415408                 db    ? ;
.bss:00415409                 db    ? ;
.bss:0041540A                 db    ? ;
.bss:0041540B                 db    ? ;
.bss:0041540C                 db    ? ;
.bss:0041540D                 db    ? ;
.bss:0041540E                 db    ? ;
.bss:0041540F                 db    ? ;
.bss:00415410 ; char byte_415410[1024]
.bss:00415410 byte_415410     db 400h dup(?)          ; DATA XREF: sub_40D5C0+1A↑o
.bss:00415810 dword_415810    dd ?                    ; DATA XREF: sub_40D810+38↑r
.bss:00415810                                         ; sub_40D810+FC↑w ...
.bss:00415814                 align 10h
.bss:00415820 dword_415820    dd ?                    ; DATA XREF: sub_40D810+4A↑r
.bss:00415820                                         ; sub_40D810+123↑w
.bss:00415824                 align 10h
.bss:00415830 unk_415830      db    ? ;               ; DATA XREF: sub_40DB90+22↑o
.bss:00415831                 db    ? ;
.bss:00415832                 db    ? ;
.bss:00415833                 db    ? ;
.bss:00415834                 db    ? ;
.bss:00415835                 db    ? ;
.bss:00415836                 db    ? ;
.bss:00415837                 db    ? ;
.bss:00415838                 db    ? ;
.bss:00415839                 db    ? ;
.bss:0041583A                 db    ? ;
.bss:0041583B                 db    ? ;
.bss:0041583C                 db    ? ;
.bss:0041583D                 db    ? ;
.bss:0041583E                 db    ? ;
.bss:0041583F                 db    ? ;
.bss:00415840                 db    ? ;
.bss:00415841                 db    ? ;
.bss:00415842                 db    ? ;
.bss:00415843                 db    ? ;
.bss:00415844                 db    ? ;
.bss:00415845                 db    ? ;
.bss:00415846                 db    ? ;
.bss:00415847                 db    ? ;
.bss:00415848                 db    ? ;
.bss:00415849                 db    ? ;
.bss:0041584A                 db    ? ;
.bss:0041584B                 db    ? ;
.bss:0041584C                 db    ? ;
.bss:0041584D                 db    ? ;
.bss:0041584E                 db    ? ;
.bss:0041584F                 db    ? ;
.bss:00415850 ; char byte_415850[1024]
.bss:00415850 byte_415850     db 400h dup(?)          ; DATA XREF: sub_40DB90+1A↑o
.bss:00415C50 dword_415C50    dd ?                    ; DATA XREF: sub_40E8A0+8↑r
.bss:00415C50                                         ; sub_40E9B0:loc_40EA32↑w ...
.bss:00415C54                 align 10h
.bss:00415C60 ; struct _OSVERSIONINFOA VersionInformation
.bss:00415C60 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40E9B0:loc_40E9D0↑o
.bss:00415C60                                         ; sub_40E9B0+2C↑w ...
.bss:00415CF4 word_415CF4     dw ?                    ; DATA XREF: sub_40E9B0:loc_40EA63↑r
.bss:00415CF6                 align 4
.bss:00415CF8 word_415CF8     dw ?                    ; DATA XREF: .text:loc_40E426↑r
.bss:00415CF8                                         ; .text:0040E454↑r ...
.bss:00415CFA byte_415CFA     db ?                    ; DATA XREF: .text:0040E3E5↑r
.bss:00415CFB                 align 10h
.bss:00415D00 dword_415D00    dd ?                    ; DATA XREF: sub_40E9B0+6↑r
.bss:00415D00                                         ; sub_40E9B0+75↑w
.bss:00415D04                 align 10h
.bss:00415D10 ; CHAR byte_415D10[272]
.bss:00415D10 byte_415D10     db 110h dup(?)          ; DATA XREF: sub_4107D0+17↑o
.bss:00415D10                                         ; sub_4107D0+26↑o
.bss:00415E20 dword_415E20    dd ?                    ; DATA XREF: sub_410820+7↑r
.bss:00415E20                                         ; sub_410820+2B↑w ...
.bss:00415E24                 align 10h
.bss:00415E30 ; struct _SYSTEM_INFO SystemInfo
.bss:00415E30 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_410820+21↑o
.bss:00415E30                                         ; sub_410820+33↑o ...
.bss:00415E54                 align 10h
.bss:00415E60 dword_415E60    dd ?                    ; DATA XREF: sub_411200+6E↑r
.bss:00415E60                                         ; sub_411200+9A↑r ...
.bss:00415E64 dword_415E64    dd ?                    ; DATA XREF: sub_411200:loc_411268↑r
.bss:00415E64                                         ; sub_411200+A0↑r ...
.bss:00415E68                 align 10h
.bss:00415E70 dword_415E70    dd ?                    ; DATA XREF: sub_411710↑r
.bss:00415E70                                         ; .text:loc_411842↑w
.bss:00415E74                 align 10h
.bss:00415E80 dword_415E80    dd ?                    ; DATA XREF: sub_401E90+59↑w
.bss:00415E80                                         ; sub_401E90+146↑r ...
.bss:00415E84                 align 20h
.bss:00415EA0 ; char *dword_415EA0
.bss:00415EA0 dword_415EA0    dd ?                    ; DATA XREF: sub_401E90+3E9↑r
.bss:00415EA0                                         ; sub_401E90+422↑r ...
.bss:00415EA4                 align 10h
.bss:00415EB0 dword_415EB0    dd ?                    ; CODE XREF: sub_409CA4+63↑p
.bss:00415EB0                                         ; DATA XREF: sub_409BA0+1E↑r ...
.bss:00415EB4                 align 10h
.bss:00415EC0 dword_415EC0    dd ?                    ; DATA XREF: sub_409BA0+4E↑w
.bss:00415EC0                                         ; sub_409CA4+AB↑w
.bss:00415EC4                 db    ? ;
.bss:00415EC5                 db    ? ;
.bss:00415EC6                 db    ? ;
.bss:00415EC7                 db    ? ;
.bss:00415EC8                 db    ? ;
.bss:00415EC9                 db    ? ;
.bss:00415ECA                 db    ? ;
.bss:00415ECB                 db    ? ;
.bss:00415ECC                 db    ? ;
.bss:00415ECD                 db    ? ;
.bss:00415ECE                 db    ? ;
.bss:00415ECF                 db    ? ;
.bss:00415ED0                 db    ? ;
.bss:00415ED1                 db    ? ;
.bss:00415ED2                 db    ? ;
.bss:00415ED3                 db    ? ;
.bss:00415ED4                 db    ? ;
.bss:00415ED5                 db    ? ;
.bss:00415ED6                 db    ? ;
.bss:00415ED7                 db    ? ;
.bss:00415ED8                 db    ? ;
.bss:00415ED9                 db    ? ;
.bss:00415EDA                 db    ? ;
.bss:00415EDB                 db    ? ;
.bss:00415EDC                 db    ? ;
.bss:00415EDD                 db    ? ;
.bss:00415EDE                 db    ? ;
.bss:00415EDF                 db    ? ;
.bss:00415EE0                 db    ? ;
.bss:00415EE1                 db    ? ;
.bss:00415EE2                 db    ? ;
.bss:00415EE3                 db    ? ;
.bss:00415EE4                 db    ? ;
.bss:00415EE5                 db    ? ;
.bss:00415EE6                 db    ? ;
.bss:00415EE7                 db    ? ;
.bss:00415EE8                 db    ? ;
.bss:00415EE9                 db    ? ;
.bss:00415EEA                 db    ? ;
.bss:00415EEB                 db    ? ;
.bss:00415EEC                 db    ? ;
.bss:00415EED                 db    ? ;
.bss:00415EEE                 db    ? ;
.bss:00415EEF                 db    ? ;
.bss:00415EF0 dword_415EF0    dd ?                    ; DATA XREF: sub_409CA4+13↑r
.bss:00415EF4                 align 10h
.bss:00415F00 dword_415F00    dd ?                    ; DATA XREF: sub_410980+A↑w
.bss:00415F04                 align 100h
.bss:00415F04 _bss            ends
.bss:00415F04
.idata:00416000 ; Section 4. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00000DF4 (   3572.)
.idata:00416000 ; Section size in file          : 00000E00 (   3584.)
.idata:00416000 ; Offset to raw data for section: 00013200
.idata:00416000 ; Flags C0000040: Data Readable Writable
.idata:00416000 ; Alignment     : default
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000
.idata:00416001
.idata:004162B4 ;
.idata:004162B4 ; Imports from libintl3.dll
.idata:004162B4 ;
.idata:004162B4                 extrn __imp_libintl_bindtextdomain:dword
.idata:004162B4                                         ; CODE XREF: sub_401E90+95↑p
.idata:004162B4                                         ; DATA XREF: sub_401E90+95↑r ...
.idata:004162B8                 extrn libintl_gettext:dword
.idata:004162B8                                         ; CODE XREF: sub_401E90+13A↑p
.idata:004162B8                                         ; sub_401E90+1C3↑p ...
.idata:004162BC                 extrn libintl_textdomain:dword
.idata:004162BC                                         ; CODE XREF: sub_401E90+A2↑p
.idata:004162BC                                         ; DATA XREF: sub_401E90+A2↑r ...
.idata:004162C0
.idata:004162C8 ;
.idata:004162C8 ; Imports from ADVAPI32.DLL
.idata:004162C8 ;
.idata:004162C8 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:004162C8                 extrn __imp_GetUserNameA:dword
.idata:004162C8                                         ; DATA XREF: GetUserNameA↑r
.idata:004162CC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004162CC                 extrn __imp_RegCloseKey:dword
.idata:004162CC                                         ; DATA XREF: RegCloseKey↑r
.idata:004162D0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004162D0                 extrn __imp_RegOpenKeyExA:dword
.idata:004162D0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004162D4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004162D4                 extrn __imp_RegQueryValueExA:dword
.idata:004162D4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004162D8
.idata:004162E0 ;
.idata:004162E0 ; Imports from KERNEL32.dll
.idata:004162E0 ;
.idata:004162E0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004162E0                 extrn __imp_AreFileApisANSI:dword
.idata:004162E0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004162E4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004162E4                 extrn __imp_CloseHandle:dword
.idata:004162E4                                         ; DATA XREF: CloseHandle↑r
.idata:004162E8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004162E8                 extrn __imp_CreateDirectoryA:dword
.idata:004162E8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004162EC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004162EC                 extrn __imp_CreateFileA:dword
.idata:004162EC                                         ; DATA XREF: CreateFileA↑r
.idata:004162F0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004162F0                 extrn __imp_DeviceIoControl:dword
.idata:004162F0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004162F4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004162F4                 extrn __imp_ExitProcess:dword
.idata:004162F4                                         ; DATA XREF: ExitProcess↑r
.idata:004162F8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004162F8                 extrn __imp_FindClose:dword
.idata:004162F8                                         ; DATA XREF: FindClose↑r
.idata:004162FC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004162FC                 extrn __imp_FindFirstFileA:dword
.idata:004162FC                                         ; DATA XREF: FindFirstFileA↑r
.idata:00416300 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416300                 extrn __imp_FindNextFileA:dword
.idata:00416300                                         ; DATA XREF: FindNextFileA↑r
.idata:00416304 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416304                 extrn __imp_FreeLibrary:dword
.idata:00416304                                         ; DATA XREF: FreeLibrary↑r
.idata:00416308 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416308                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00416308                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041630C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041630C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041630C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00416310 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00416310                 extrn __imp_GetDriveTypeA:dword
.idata:00416310                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00416314 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00416314                 extrn __imp_GetFileAttributesA:dword
.idata:00416314                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00416318 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00416318                 extrn __imp_GetFileInformationByHandle:dword
.idata:00416318                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041631C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041631C                 extrn __imp_GetFileSize:dword
.idata:0041631C                                         ; DATA XREF: GetFileSize↑r
.idata:00416320 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00416320                 extrn __imp_GetFileType:dword
.idata:00416320                                         ; DATA XREF: GetFileType↑r
.idata:00416324 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00416324                 extrn __imp_GetFullPathNameA:dword
.idata:00416324                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00416328 ; DWORD (__stdcall *GetLastError)()
.idata:00416328                 extrn __imp_GetLastError:dword
.idata:00416328                                         ; DATA XREF: GetLastError↑r
.idata:0041632C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041632C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041632C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00416330 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00416330                 extrn __imp_GetModuleFileNameA:dword
.idata:00416330                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00416334 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00416334                 extrn __imp_GetModuleHandleA:dword
.idata:00416334                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00416338 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00416338                 extrn __imp_GetProcAddress:dword
.idata:00416338                                         ; DATA XREF: GetProcAddress↑r
.idata:0041633C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041633C                 extrn __imp_GetProcessHeap:dword
.idata:0041633C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00416340 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00416340                 extrn __imp_GetShortPathNameA:dword
.idata:00416340                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00416344 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00416344                 extrn __imp_GetSystemInfo:dword
.idata:00416344                                         ; DATA XREF: GetSystemInfo↑r
.idata:00416348 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00416348                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00416348                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041634C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041634C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041634C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00416350 ; DWORD (__stdcall *GetVersion)()
.idata:00416350                 extrn __imp_GetVersion:dword
.idata:00416350                                         ; DATA XREF: GetVersion↑r
.idata:00416354 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00416354                 extrn __imp_GetVersionExA:dword
.idata:00416354                                         ; DATA XREF: GetVersionExA↑r
.idata:00416358 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00416358                 extrn __imp_GetVolumeInformationA:dword
.idata:00416358                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041635C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041635C                 extrn __imp_HeapAlloc:dword
.idata:0041635C                                         ; DATA XREF: HeapAlloc↑r
.idata:00416360 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00416360                 extrn __imp_HeapFree:dword
.idata:00416360                                         ; DATA XREF: HeapFree↑r
.idata:00416364 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00416364                 extrn __imp_LoadLibraryA:dword
.idata:00416364                                         ; DATA XREF: LoadLibraryA↑r
.idata:00416368 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00416368                 extrn __imp_MultiByteToWideChar:dword
.idata:00416368                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041636C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041636C                 extrn __imp_PeekNamedPipe:dword
.idata:0041636C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00416370 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00416370                 extrn __imp_SetErrorMode:dword
.idata:00416370                                         ; DATA XREF: SetErrorMode↑r
.idata:00416374 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00416374                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00416374                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00416378 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00416378                 extrn __imp_UnlockFile:dword
.idata:00416378                                         ; DATA XREF: UnlockFile↑r
.idata:0041637C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041637C                 extrn __imp_lstrcmpiA:dword
.idata:0041637C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00416380 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00416380                 extrn __imp_lstrcpyA:dword
.idata:00416380                                         ; DATA XREF: lstrcpyA↑r
.idata:00416384
.idata:0041638C ;
.idata:0041638C ; Imports from msvcrt.dll
.idata:0041638C ;
.idata:0041638C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041638C                 extrn __imp__chmod:dword
.idata:0041638C                                         ; DATA XREF: _chmod↑r
.idata:00416390 ; int (__cdecl *_close)(int FileHandle)
.idata:00416390                 extrn __imp__close:dword
.idata:00416390                                         ; DATA XREF: _close↑r
.idata:00416394 ; int (__cdecl *_getpid)()
.idata:00416394                 extrn __imp__getpid:dword
.idata:00416394                                         ; DATA XREF: _getpid↑r
.idata:00416398 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00416398                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041639C ; char *(__cdecl *_strdup)(const char *String)
.idata:0041639C                 extrn __imp__strdup:dword
.idata:0041639C                                         ; DATA XREF: _strdup↑r
.idata:004163A0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004163A0                 extrn __imp__stricmp:dword
.idata:004163A0                                         ; DATA XREF: _stricmp↑r
.idata:004163A4
.idata:004163AC ;
.idata:004163AC ; Imports from MSVCP60.DLL
.idata:004163AC ;
.idata:004163AC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004163AC                 extrn __imp_mbrtowc:dword
.idata:004163AC                                         ; DATA XREF: mbrtowc↑r
.idata:004163B0
.idata:004163B8 ;
.idata:004163B8 ; Imports from msvcrt.dll
.idata:004163B8 ;
.idata:004163B8                 extrn __imp___getmainargs:dword
.idata:004163B8                                         ; DATA XREF: __getmainargs↑r
.idata:004163BC ; int _mb_cur_max
.idata:004163BC                 extrn __mb_cur_max:dword
.idata:004163BC                                         ; DATA XREF: sub_408260+7↑r
.idata:004163BC                                         ; sub_408260+5F3↑r ...
.idata:004163C0 ; char ***(__cdecl *__p__environ)()
.idata:004163C0                 extrn __imp___p__environ:dword
.idata:004163C0                                         ; DATA XREF: __p__environ↑r
.idata:004163C4 ; int *(__cdecl *__p__fmode)()
.idata:004163C4                 extrn __imp___p__fmode:dword
.idata:004163C4                                         ; DATA XREF: __p__fmode↑r
.idata:004163C8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004163C8                 extrn __set_app_type:dword
.idata:004163C8                                         ; CODE XREF: start+D↑p
.idata:004163C8                                         ; .text:0040102D↑p
.idata:004163C8                                         ; DATA XREF: ...
.idata:004163CC                 extrn __imp__assert:dword
.idata:004163CC                                         ; DATA XREF: _assert↑r
.idata:004163D0 ; void (__cdecl *_cexit)()
.idata:004163D0                 extrn __imp__cexit:dword
.idata:004163D0                                         ; DATA XREF: _cexit↑r
.idata:004163D4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004163D4                 extrn __imp__close_0:dword
.idata:004163D4                                         ; DATA XREF: _close_0↑r
.idata:004163D8 ; int *(__cdecl *_errno)()
.idata:004163D8                 extrn __imp__errno:dword
.idata:004163D8                                         ; DATA XREF: _errno↑r
.idata:004163DC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004163DC                 extrn __imp__fdopen:dword
.idata:004163DC                                         ; DATA XREF: _fdopen↑r
.idata:004163E0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004163E0                 extrn __imp__filelengthi64:dword
.idata:004163E0                                         ; DATA XREF: _filelengthi64↑r
.idata:004163E4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004163E4                 extrn __imp__flsbuf:dword
.idata:004163E4                                         ; DATA XREF: _flsbuf↑r
.idata:004163E8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004163E8                 extrn __imp__get_osfhandle:dword
.idata:004163E8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004163EC ; FILE iob[]
.idata:004163EC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004163EC                                         ; sub_401080+75↑r ...
.idata:004163F0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004163F0                 extrn __imp__isctype:dword
.idata:004163F0                                         ; DATA XREF: _isctype↑r
.idata:004163F4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004163F4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004163F4                                         ; DATA XREF: .text:0040106C↑r
.idata:004163F8 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004163F8                 extrn __imp__open_0:dword
.idata:004163F8                                         ; DATA XREF: _open_0↑r
.idata:004163FC ; const unsigned __int16 *pctype
.idata:004163FC                 extrn _pctype:dword     ; DATA XREF: sub_408260:loc_408954↑r
.idata:004163FC                                         ; sub_4095E0:loc_409B00↑r
.idata:00416400 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00416400                 extrn __imp__setmode:dword
.idata:00416400                                         ; DATA XREF: _setmode↑r
.idata:00416404 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00416404                 extrn __imp__stricmp_0:dword
.idata:00416404                                         ; DATA XREF: _stricmp_0↑r
.idata:00416408 ; void (__cdecl __noreturn *abort)()
.idata:00416408                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041640C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041640C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041640C                                         ; DATA XREF: sub_401040+C↑r
.idata:00416410 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00416410                 extrn __imp_calloc:dword
.idata:00416410                                         ; DATA XREF: calloc↑r
.idata:00416414 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00416414                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00416418 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416418                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041641C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041641C                 extrn __imp_fclose:dword
.idata:0041641C                                         ; DATA XREF: fclose↑r
.idata:00416420 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00416420                 extrn __imp_fflush:dword
.idata:00416420                                         ; DATA XREF: fflush↑r
.idata:00416424 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00416424                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00416428 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00416428                 extrn __imp_fprintf:dword
.idata:00416428                                         ; DATA XREF: fprintf↑r
.idata:0041642C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041642C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00416430 ; void (__cdecl *free)(void *Block)
.idata:00416430                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00416434 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00416434                 extrn __imp_getenv:dword
.idata:00416434                                         ; DATA XREF: getenv↑r
.idata:00416438 ; int (__cdecl *isalpha)(int C)
.idata:00416438                 extrn __imp_isalpha:dword
.idata:00416438                                         ; DATA XREF: isalpha↑r
.idata:0041643C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041643C                 extrn __imp_iswctype:dword
.idata:0041643C                                         ; DATA XREF: iswctype↑r
.idata:00416440 ; void *(__cdecl *malloc)(size_t Size)
.idata:00416440                 extrn __imp_malloc:dword
.idata:00416440                                         ; DATA XREF: malloc↑r
.idata:00416444 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00416444                 extrn __imp_memcpy:dword
.idata:00416444                                         ; DATA XREF: memcpy↑r
.idata:00416448 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00416448                 extrn __imp_memmove:dword
.idata:00416448                                         ; DATA XREF: memmove↑r
.idata:0041644C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041644C                 extrn __imp_memset:dword
.idata:0041644C                                         ; DATA XREF: memset↑r
.idata:00416450 ; int (*printf)(const char *const Format, ...)
.idata:00416450                 extrn __imp_printf:dword
.idata:00416450                                         ; DATA XREF: printf↑r
.idata:00416454 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00416454                 extrn __imp_realloc:dword
.idata:00416454                                         ; DATA XREF: realloc↑r
.idata:00416458 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00416458                 extrn __imp_setlocale:dword
.idata:00416458                                         ; DATA XREF: setlocale↑r
.idata:0041645C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041645C                 extrn __imp_signal:dword
.idata:0041645C                                         ; DATA XREF: signal↑r
.idata:00416460 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00416460                 extrn __imp_sprintf:dword
.idata:00416460                                         ; DATA XREF: sprintf↑r
.idata:00416464 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00416464                 extrn __imp_sscanf:dword
.idata:00416464                                         ; DATA XREF: sscanf↑r
.idata:00416468 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00416468                 extrn __imp_strcat:dword
.idata:00416468                                         ; DATA XREF: strcat↑r
.idata:0041646C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041646C                 extrn __imp_strchr:dword
.idata:0041646C                                         ; DATA XREF: strchr↑r
.idata:00416470 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00416470                 extrn __imp_strcmp:dword
.idata:00416470                                         ; DATA XREF: strcmp↑r
.idata:00416474 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00416474                 extrn __imp_strcpy:dword
.idata:00416474                                         ; DATA XREF: strcpy↑r
.idata:00416478 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00416478                 extrn __imp_strerror:dword
.idata:00416478                                         ; DATA XREF: strerror↑r
.idata:0041647C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041647C                 extrn __imp_strlen:dword
.idata:0041647C                                         ; DATA XREF: strlen↑r
.idata:00416480 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00416480                 extrn __imp_strncat:dword
.idata:00416480                                         ; DATA XREF: strncat↑r
.idata:00416484 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00416484                 extrn __imp_strncmp:dword
.idata:00416484                                         ; DATA XREF: strncmp↑r
.idata:00416488 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00416488                 extrn __imp_strncpy:dword
.idata:00416488                                         ; DATA XREF: strncpy↑r
.idata:0041648C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041648C                 extrn __imp_strpbrk:dword
.idata:0041648C                                         ; DATA XREF: strpbrk↑r
.idata:00416490 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00416490                 extrn __imp_strrchr:dword
.idata:00416490                                         ; DATA XREF: strrchr↑r
.idata:00416494 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00416494                 extrn __imp_strspn:dword
.idata:00416494                                         ; DATA XREF: strspn↑r
.idata:00416498 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00416498                 extrn __imp_strstr:dword
.idata:00416498                                         ; DATA XREF: strstr↑r
.idata:0041649C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041649C                 extrn __imp_strtoul:dword
.idata:0041649C                                         ; DATA XREF: strtoul↑r
.idata:004164A0 ; int (__cdecl *toupper)(int C)
.idata:004164A0                 extrn __imp_toupper:dword
.idata:004164A0                                         ; DATA XREF: toupper↑r
.idata:004164A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004164A4                 extrn __imp_vfprintf:dword
.idata:004164A4                                         ; DATA XREF: vfprintf↑r
.idata:004164A8
.idata:004164B0 ;
.idata:004164B0 ; Imports from OLE32.dll
.idata:004164B0 ;
.idata:004164B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004164B0                 extrn __imp_CoCreateInstance:dword
.idata:004164B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004164B4 ; void (__stdcall *CoUninitialize)()
.idata:004164B4                 extrn __imp_CoUninitialize:dword
.idata:004164B4                                         ; DATA XREF: CoUninitialize↑r
.idata:004164B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004164B8                 extrn __imp_OleInitialize:dword
.idata:004164B8                                         ; DATA XREF: OleInitialize↑r
.idata:004164BC
.idata:004164BC
.idata:004164BC
.idata:004164BC                 end start
