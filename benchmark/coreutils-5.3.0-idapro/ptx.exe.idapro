.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 4F6B5BFF5698B56CE4D26BC77F2990AD0A4DBAA7DB9A1688370567CC36A00E64
.text:00401000 ; Input MD5    : 4B8FBFA8D4FA07CD4536D49F58D7A268
.text:00401000 ; Input CRC32  : 0A1437EF
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/ptx.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25C (Wed Apr 20 18:41:32 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00018B60 ( 101216.)
.text:00401000 ; Section size in file          : 00018C00 ( 101376.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402010+60↓p
.text:00401040                                         ; .text:00418D90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_418D30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41A000
.text:004010A2                 mov     edx, dword_41A0D0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41A0F0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41A0F0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_418D00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402010
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_418D30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 2Fh, 0               ; DATA XREF: .data:off_41A01C↓o
.text:00401282 word_401282     dw 7878h                ; DATA XREF: .data:off_41A020↓o
.text:00401284                 db 0
.text:00401285 aAutoReference  db 'auto-reference',0   ; DATA XREF: .text:off_401360↓o
.text:00401294 aBreakFile      db 'break-file',0       ; DATA XREF: .text:00401370↓o
.text:0040129F aCopyright      db 'copyright',0        ; DATA XREF: .text:00401380↓o
.text:004012A9 aFlagTruncation db 'flag-truncation',0  ; DATA XREF: .text:00401390↓o
.text:004012B9 aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .text:004013A0↓o
.text:004012C5 aGapSize        db 'gap-size',0         ; DATA XREF: .text:004013B0↓o
.text:004012CE aIgnoreFile     db 'ignore-file',0      ; DATA XREF: .text:004013C0↓o
.text:004012DA aMacroName      db 'macro-name',0       ; DATA XREF: .text:004013D0↓o
.text:004012E5 aOnlyFile       db 'only-file',0        ; DATA XREF: .text:004013E0↓o
.text:004012EF aReferences     db 'references',0       ; DATA XREF: .text:004013F0↓o
.text:004012FA aRightSideRefs  db 'right-side-refs',0  ; DATA XREF: .text:00401400↓o
.text:0040130A aFormat_0       db 'format',0           ; DATA XREF: .text:00401410↓o
.text:00401311 aSentenceRegexp db 'sentence-regexp',0  ; DATA XREF: .text:00401420↓o
.text:00401321 aTraditional    db 'traditional',0      ; DATA XREF: .text:00401430↓o
.text:0040132D aTypesetMode    db 'typeset-mode',0     ; DATA XREF: .text:00401440↓o
.text:0040133A aWidth          db 'width',0            ; DATA XREF: .text:00401450↓o
.text:00401340 aWordRegexp     db 'word-regexp',0      ; DATA XREF: .text:00401460↓o
.text:0040134C aHelp           db 'help',0             ; DATA XREF: .text:00401470↓o
.text:00401351 aVersion        db 'version',0          ; DATA XREF: .text:00401480↓o
.text:00401359                 align 10h
.text:00401360 off_401360      dd offset aAutoReference
.text:00401360                                         ; DATA XREF: sub_402010+7E↓o
.text:00401360                                         ; "auto-reference"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 41h
.text:00401370                 dd offset aBreakFile    ; "break-file"
.text:00401374                 dd 1, 0
.text:0040137C                 dd 62h
.text:00401380                 dd offset aCopyright    ; "copyright"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 43h
.text:00401390                 dd offset aFlagTruncation ; "flag-truncation"
.text:00401394                 dd 1, 0
.text:0040139C                 dd 46h
.text:004013A0                 dd offset aIgnoreCase   ; "ignore-case"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 66h
.text:004013B0                 dd offset aGapSize      ; "gap-size"
.text:004013B4                 dd 1, 0
.text:004013BC                 dd 67h
.text:004013C0                 dd offset aIgnoreFile   ; "ignore-file"
.text:004013C4                 dd 1, 0
.text:004013CC                 dd 69h
.text:004013D0                 dd offset aMacroName    ; "macro-name"
.text:004013D4                 dd 1, 0
.text:004013DC                 dd 4Dh
.text:004013E0                 dd offset aOnlyFile     ; "only-file"
.text:004013E4                 dd 1, 0
.text:004013EC                 dd 6Fh
.text:004013F0                 dd offset aReferences   ; "references"
.text:004013F4                 dd 2 dup(0)
.text:004013FC                 dd 72h
.text:00401400                 dd offset aRightSideRefs ; "right-side-refs"
.text:00401404                 dd 2 dup(0)
.text:0040140C                 dd 52h
.text:00401410                 dd offset aFormat_0     ; "format"
.text:00401414                 dd 1, 0
.text:0040141C                 dd 0Ah
.text:00401420                 dd offset aSentenceRegexp ; "sentence-regexp"
.text:00401424                 dd 1, 0
.text:0040142C                 dd 53h
.text:00401430                 dd offset aTraditional  ; "traditional"
.text:00401434                 dd 2 dup(0)
.text:0040143C                 dd 47h
.text:00401440                 dd offset aTypesetMode  ; "typeset-mode"
.text:00401444                 dd 2 dup(0)
.text:0040144C                 dd 74h
.text:00401450                 dd offset aWidth        ; "width"
.text:00401454                 dd 1, 0
.text:0040145C                 dd 77h
.text:00401460                 dd offset aWordRegexp   ; "word-regexp"
.text:00401464                 dd 1, 0
.text:0040146C                 dd 57h
.text:00401470                 dd offset aHelp         ; "help"
.text:00401474                 dd 2 dup(0)
.text:0040147C                 dd 0FFFFFF7Eh
.text:00401480                 dd offset aVersion      ; "version"
.text:00401484                 dd 2 dup(0)
.text:0040148C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004014A0 aRoff           db 'roff',0             ; DATA XREF: .text:off_4014AC↓o
.text:004014A5 aTex            db 'tex',0              ; DATA XREF: .text:004014B0↓o
.text:004014A9                 align 4
.text:004014AC off_4014AC      dd offset aRoff         ; DATA XREF: sub_402010+148↓o
.text:004014AC                                         ; "roff"
.text:004014B0                 dd offset aTex          ; "tex"
.text:004014B4                 align 8
.text:004014B8 dword_4014B8    dd 2                    ; DATA XREF: sub_402010+13C↓o
.text:004014B8                                         ; sub_402010+160↓r
.text:004014BC                 dd 3
.text:004014C0 ; const char Locale
.text:004014C0 Locale          db 0                    ; DATA XREF: sub_402010+1D↓o
.text:004014C0                                         ; sub_403F40:loc_4045B1↓o ...
.text:004014C1                 align 20h
.text:004014E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004014E0                                         ; DATA XREF: sub_402010+37↓o
.text:00401503 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402010+3F↓o
.text:00401503                                         ; sub_402010+4C↓o
.text:0040150D ; const char aAcfGmOrsTwBIFg[]
.text:0040150D aAcfGmOrsTwBIFg db 'ACF:GM:ORS:TW:b:i:fg:o:trw:',0
.text:0040150D                                         ; DATA XREF: sub_402010+86↓o
.text:00401529                 align 20h
.text:00401540 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401540                                         ; DATA XREF: sub_402010:loc_402100↓o
.text:00401540                                         ; sub_402A30+C↓o
.text:00401567 ; const char aFormat[]
.text:00401567 aFormat         db '--format',0         ; DATA XREF: sub_402010+154↓o
.text:00401570                 align 20h
.text:00401580 aUsageSOptionIn db 'Usage: %s [OPTION]... [INPUT]...   (without -G)',0Ah
.text:00401580                                         ; DATA XREF: sub_402010:loc_40217D↓o
.text:00401580                                         ; sub_402A30:loc_402A70↓o
.text:00401580                 db '  or:  %s -G [OPTION]... [INPUT [OUTPUT]]',0Ah,0
.text:004015DB                 align 10h
.text:004015E0 aOutputAPermute db 'Output a permuted index, including context, of the words in the i'
.text:004015E0                                         ; DATA XREF: sub_402010+190↓o
.text:004015E0                                         ; sub_402A30+63↓o
.text:004015E0                 db 'nput files.',0Ah
.text:004015E0                 db 0Ah,0
.text:0040162F                 align 20h
.text:00401640 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401640                                         ; DATA XREF: sub_402010+1B2↓o
.text:00401640                                         ; sub_402A30+85↓o
.text:00401640                 db 'ns too.',0Ah,0
.text:0040168A                 align 20h
.text:004016A0 aAAutoReference db '  -A, --auto-reference           output automatically generated r'
.text:004016A0                                         ; DATA XREF: sub_402010+1D4↓o
.text:004016A0                                         ; sub_402A30+A7↓o
.text:004016A0                 db 'eferences',0Ah
.text:004016A0                 db '  -C, --copyright                display Copyright and copying co'
.text:004016A0                 db 'nditions',0Ah
.text:004016A0                 db '  -G, --traditional              behave more like System V `ptx',27h
.text:004016A0                 db 0Ah
.text:004016A0                 db '  -F, --flag-truncation=STRING   use STRING for flagging line tru'
.text:004016A0                 db 'ncations',0Ah,0
.text:004017C1                 align 20h
.text:004017E0 aMMacroNameStri db '  -M, --macro-name=STRING        macro name to use instead of `xx'
.text:004017E0                                         ; DATA XREF: sub_402010+1F6↓o
.text:004017E0                                         ; sub_402A30+C9↓o
.text:004017E0                 db 27h,0Ah
.text:004017E0                 db '  -O, --format=roff              generate output as roff directiv'
.text:004017E0                 db 'es',0Ah
.text:004017E0                 db '  -R, --right-side-refs          put references at right, not cou'
.text:004017E0                 db 'nted in -w',0Ah
.text:004017E0                 db '  -S, --sentence-regexp=REGEXP   for end of lines or end of sente'
.text:004017E0                 db 'nces',0Ah
.text:004017E0                 db '  -T, --format=tex               generate output as TeX directive'
.text:004017E0                 db 's',0Ah,0
.text:0040193D                 align 10h
.text:00401940 aWWordRegexpReg db '  -W, --word-regexp=REGEXP       use REGEXP to match each keyword'
.text:00401940                                         ; DATA XREF: sub_402010+218↓o
.text:00401940                                         ; sub_402A30+EB↓o
.text:00401940                 db 0Ah
.text:00401940                 db '  -b, --break-file=FILE          word break characters in this FI'
.text:00401940                 db 'LE',0Ah
.text:00401940                 db '  -f, --ignore-case              fold lower case to upper case fo'
.text:00401940                 db 'r sorting',0Ah
.text:00401940                 db '  -g, --gap-size=NUMBER          gap size in columns between outp'
.text:00401940                 db 'ut fields',0Ah
.text:00401940                 db '  -i, --ignore-file=FILE         read ignore word list from FILE',0Ah
.text:00401940                 db '  -o, --only-file=FILE           read only word list from this FI'
.text:00401940                 db 'LE',0Ah,0
.text:00401AE2                 align 20h
.text:00401B00 aRReferencesFir db '  -r, --references               first field of each line is a re'
.text:00401B00                                         ; DATA XREF: sub_402010+23A↓o
.text:00401B00                                         ; sub_402A30+10D↓o
.text:00401B00                 db 'ference',0Ah
.text:00401B00                 db '  -t, --typeset-mode               - not implemented -',0Ah
.text:00401B00                 db '  -w, --width=NUMBER             output width in columns, referen'
.text:00401B00                 db 'ce excluded',0Ah,0
.text:00401BCE                 align 20h
.text:00401BE0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_402010+25C↓o
.text:00401BE0                                         ; sub_402A30+12F↓o
.text:00401C0D                 align 20h
.text:00401C20 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401C20                                         ; DATA XREF: sub_402010+27E↓o
.text:00401C20                                         ; sub_402A30+151↓o
.text:00401C56                 align 10h
.text:00401C60 aWithNoFileOrIf db 0Ah                  ; DATA XREF: sub_402010+2A0↓o
.text:00401C60                                         ; sub_402A30+173↓o
.text:00401C60                 db 'With no FILE or if FILE is -, read Standard Input.  `-F /',27h,' '
.text:00401C60                 db 'by default.',0Ah,0
.text:00401CA9 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402010+2C2↓o
.text:00401CA9                                         ; sub_402A30+195↓o
.text:00401CA9                 db 'Report bugs to <%s>.',0Ah,0
.text:00401CC0 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401CC0                                         ; DATA XREF: sub_402010+2CF↓o
.text:00401CC0                                         ; sub_402A30+1A2↓o
.text:00401CD6 aFPinard        db 'F. Pinard',0        ; DATA XREF: sub_402010+2F6↓o
.text:00401CE0 a530            db '5.3.0',0            ; DATA XREF: sub_402010+311↓o
.text:00401CE6 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_402010+319↓o
.text:00401CF4 ; const FILE stru_401CF4
.text:00401CF4 stru_401CF4     FILE <787470h, 26B48D90h, 0, 73696854h, 6F727020h, 6D617267h, \
.text:00401CF4                                         ; DATA XREF: sub_402010+328↓o
.text:00401CF4                                         ; sub_402010:loc_4023C7↓o
.text:00401CF4                       20736920h, 65657266h>
.text:00401D14                 db  20h
.text:00401D15                 db  73h ; s
.text:00401D16                 db  6Fh ; o
.text:00401D17                 db  66h ; f
.text:00401D18                 db  74h ; t
.text:00401D19                 db  77h ; w
.text:00401D1A                 db  61h ; a
.text:00401D1B                 db  72h ; r
.text:00401D1C                 db  65h ; e
.text:00401D1D                 db  3Bh ; ;
.text:00401D1E                 db  20h
.text:00401D1F                 db  79h ; y
.text:00401D20                 db  6Fh ; o
.text:00401D21                 db  75h ; u
.text:00401D22                 db  20h
.text:00401D23                 db  63h ; c
.text:00401D24                 db  61h ; a
.text:00401D25                 db  6Eh ; n
.text:00401D26                 db  20h
.text:00401D27                 db  72h ; r
.text:00401D28                 db  65h ; e
.text:00401D29                 db  64h ; d
.text:00401D2A                 db  69h ; i
.text:00401D2B                 db  73h ; s
.text:00401D2C                 db  74h ; t
.text:00401D2D                 db  72h ; r
.text:00401D2E                 db  69h ; i
.text:00401D2F                 db  62h ; b
.text:00401D30                 db  75h ; u
.text:00401D31                 db  74h ; t
.text:00401D32                 db  65h ; e
.text:00401D33                 db  20h
.text:00401D34                 db  69h ; i
.text:00401D35                 db  74h ; t
.text:00401D36                 db  20h
.text:00401D37                 db  61h ; a
.text:00401D38                 db  6Eh ; n
.text:00401D39                 db  64h ; d
.text:00401D3A                 db  2Fh ; /
.text:00401D3B                 db  6Fh ; o
.text:00401D3C                 db  72h ; r
.text:00401D3D                 db  20h
.text:00401D3E                 db  6Dh ; m
.text:00401D3F                 db  6Fh ; o
.text:00401D40                 db  64h ; d
.text:00401D41                 db  69h ; i
.text:00401D42                 db  66h ; f
.text:00401D43                 db  79h ; y
.text:00401D44                 db  0Ah
.text:00401D45                 db  69h ; i
.text:00401D46                 db  74h ; t
.text:00401D47                 db  20h
.text:00401D48                 db  75h ; u
.text:00401D49                 db  6Eh ; n
.text:00401D4A                 db  64h ; d
.text:00401D4B                 db  65h ; e
.text:00401D4C                 db  72h ; r
.text:00401D4D                 db  20h
.text:00401D4E                 db  74h ; t
.text:00401D4F                 db  68h ; h
.text:00401D50                 db  65h ; e
.text:00401D51                 db  20h
.text:00401D52                 db  74h ; t
.text:00401D53                 db  65h ; e
.text:00401D54                 db  72h ; r
.text:00401D55                 db  6Dh ; m
.text:00401D56                 db  73h ; s
.text:00401D57                 db  20h
.text:00401D58                 db  6Fh ; o
.text:00401D59                 db  66h ; f
.text:00401D5A                 db  20h
.text:00401D5B                 db  74h ; t
.text:00401D5C                 db  68h ; h
.text:00401D5D                 db  65h ; e
.text:00401D5E                 db  20h
.text:00401D5F                 db  47h ; G
.text:00401D60                 db  4Eh ; N
.text:00401D61                 db  55h ; U
.text:00401D62                 db  20h
.text:00401D63                 db  47h ; G
.text:00401D64                 db  65h ; e
.text:00401D65                 db  6Eh ; n
.text:00401D66                 db  65h ; e
.text:00401D67                 db  72h ; r
.text:00401D68                 db  61h ; a
.text:00401D69                 db  6Ch ; l
.text:00401D6A                 db  20h
.text:00401D6B                 db  50h ; P
.text:00401D6C                 db  75h ; u
.text:00401D6D                 db  62h ; b
.text:00401D6E                 db  6Ch ; l
.text:00401D6F                 db  69h ; i
.text:00401D70                 db  63h ; c
.text:00401D71                 db  20h
.text:00401D72                 db  4Ch ; L
.text:00401D73                 db  69h ; i
.text:00401D74                 db  63h ; c
.text:00401D75                 db  65h ; e
.text:00401D76                 db  6Eh ; n
.text:00401D77                 db  73h ; s
.text:00401D78                 db  65h ; e
.text:00401D79                 db  20h
.text:00401D7A                 db  61h ; a
.text:00401D7B                 db  73h ; s
.text:00401D7C                 db  20h
.text:00401D7D                 db  70h ; p
.text:00401D7E                 db  75h ; u
.text:00401D7F                 db  62h ; b
.text:00401D80                 db  6Ch ; l
.text:00401D81                 db  69h ; i
.text:00401D82                 db  73h ; s
.text:00401D83                 db  68h ; h
.text:00401D84                 db  65h ; e
.text:00401D85                 db  64h ; d
.text:00401D86                 db  20h
.text:00401D87                 db  62h ; b
.text:00401D88                 db  79h ; y
.text:00401D89                 db  0Ah
.text:00401D8A                 db  74h ; t
.text:00401D8B                 db  68h ; h
.text:00401D8C                 db  65h ; e
.text:00401D8D                 db  20h
.text:00401D8E                 db  46h ; F
.text:00401D8F                 db  72h ; r
.text:00401D90                 db  65h ; e
.text:00401D91                 db  65h ; e
.text:00401D92                 db  20h
.text:00401D93                 db  53h ; S
.text:00401D94                 db  6Fh ; o
.text:00401D95                 db  66h ; f
.text:00401D96                 db  74h ; t
.text:00401D97                 db  77h ; w
.text:00401D98                 db  61h ; a
.text:00401D99                 db  72h ; r
.text:00401D9A                 db  65h ; e
.text:00401D9B                 db  20h
.text:00401D9C                 db  46h ; F
.text:00401D9D                 db  6Fh ; o
.text:00401D9E                 db  75h ; u
.text:00401D9F                 db  6Eh ; n
.text:00401DA0                 db  64h ; d
.text:00401DA1                 db  61h ; a
.text:00401DA2                 db  74h ; t
.text:00401DA3                 db  69h ; i
.text:00401DA4                 db  6Fh ; o
.text:00401DA5                 db  6Eh ; n
.text:00401DA6                 db  3Bh ; ;
.text:00401DA7                 db  20h
.text:00401DA8                 db  65h ; e
.text:00401DA9                 db  69h ; i
.text:00401DAA                 db  74h ; t
.text:00401DAB                 db  68h ; h
.text:00401DAC                 db  65h ; e
.text:00401DAD                 db  72h ; r
.text:00401DAE                 db  20h
.text:00401DAF                 db  76h ; v
.text:00401DB0                 db  65h ; e
.text:00401DB1                 db  72h ; r
.text:00401DB2                 db  73h ; s
.text:00401DB3                 db  69h ; i
.text:00401DB4                 db  6Fh ; o
.text:00401DB5                 db  6Eh ; n
.text:00401DB6                 db  20h
.text:00401DB7                 db  32h ; 2
.text:00401DB8                 db  2Ch ; ,
.text:00401DB9                 db  20h
.text:00401DBA                 db  6Fh ; o
.text:00401DBB                 db  72h ; r
.text:00401DBC                 db  20h
.text:00401DBD                 db  28h ; (
.text:00401DBE                 db  61h ; a
.text:00401DBF                 db  74h ; t
.text:00401DC0                 db  20h
.text:00401DC1                 db  79h ; y
.text:00401DC2                 db  6Fh ; o
.text:00401DC3                 db  75h ; u
.text:00401DC4                 db  72h ; r
.text:00401DC5                 db  20h
.text:00401DC6                 db  6Fh ; o
.text:00401DC7                 db  70h ; p
.text:00401DC8                 db  74h ; t
.text:00401DC9                 db  69h ; i
.text:00401DCA                 db  6Fh ; o
.text:00401DCB                 db  6Eh ; n
.text:00401DCC                 db  29h ; )
.text:00401DCD                 db  0Ah
.text:00401DCE                 db  61h ; a
.text:00401DCF                 db  6Eh ; n
.text:00401DD0                 db  79h ; y
.text:00401DD1                 db  20h
.text:00401DD2                 db  6Ch ; l
.text:00401DD3                 db  61h ; a
.text:00401DD4                 db  74h ; t
.text:00401DD5                 db  65h ; e
.text:00401DD6                 db  72h ; r
.text:00401DD7                 db  20h
.text:00401DD8                 db  76h ; v
.text:00401DD9                 db  65h ; e
.text:00401DDA                 db  72h ; r
.text:00401DDB                 db  73h ; s
.text:00401DDC                 db  69h ; i
.text:00401DDD                 db  6Fh ; o
.text:00401DDE                 db  6Eh ; n
.text:00401DDF                 db  2Eh ; .
.text:00401DE0                 db  0Ah
.text:00401DE1                 db  0Ah
.text:00401DE2                 db    0
.text:00401DE3                 align 20h
.text:00401E00 aThisProgramIsD db 'This program is distributed in the hope that it will be useful,',0Ah
.text:00401E00                                         ; DATA XREF: sub_402010+3D9↓o
.text:00401E00                 db 'but WITHOUT ANY WARRANTY; without even the implied warranty of',0Ah
.text:00401E00                 db 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the',0Ah
.text:00401E00                 db 'GNU General Public License for more details.',0Ah
.text:00401E00                 db 0Ah,0
.text:00401EEC                 align 20h
.text:00401F00 aYouShouldHaveR db 'You should have received a copy of the GNU General Public License'
.text:00401F00                                         ; DATA XREF: sub_402010+3FB↓o
.text:00401F00                 db 0Ah
.text:00401F00                 db 'along with this program; if not, write to the Free Software Found'
.text:00401F00                 db 'ation,',0Ah
.text:00401F00                 db 'Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.',0Ah
.text:00401F00                 db 0
.text:00401FCA aInvalidLineWid db 'invalid line width: %s',0
.text:00401FCA                                         ; DATA XREF: sub_402010+536↓o
.text:00401FE1 aInvalidGapWidt db 'invalid gap width: %s',0
.text:00401FE1                                         ; DATA XREF: sub_402010+5C2↓o
.text:00401FF7 asc_401FF7      db '-',0                ; DATA XREF: sub_402010+69B↓o
.text:00401FF7                                         ; sub_402010+8DC↓o ...
.text:00401FF9 ; const char aW[]
.text:00401FF9 aW              db 'w',0                ; DATA XREF: sub_402010+924↓o
.text:00401FFB aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_402010+96D↓o
.text:0040200C ; const char aS[]
.text:0040200C aS              db '%s',0               ; DATA XREF: sub_402010+9AE↓o
.text:0040200C                                         ; sub_403190+134↓o ...
.text:0040200F                 align 10h
.text:00402010
.text:00402010 ; =============== S U B R O U T I N E =======================================
.text:00402010
.text:00402010 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402010
.text:00402010 sub_402010      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402010
.text:00402010 Category        = dword ptr -48h
.text:00402010 Locale          = dword ptr -44h
.text:00402010 Size            = dword ptr -40h
.text:00402010 var_3C          = byte ptr -3Ch
.text:00402010 Str             = dword ptr -38h
.text:00402010 var_34          = dword ptr -34h
.text:00402010 var_30          = dword ptr -30h
.text:00402010 var_2C          = dword ptr -2Ch
.text:00402010 var_28          = dword ptr -28h
.text:00402010 var_24          = dword ptr -24h
.text:00402010 Block           = dword ptr -20h
.text:00402010 var_1C          = dword ptr -1Ch
.text:00402010 var_18          = dword ptr -18h
.text:00402010 var_14          = dword ptr -14h
.text:00402010 arg_0           = dword ptr  8
.text:00402010 arg_4           = dword ptr  0Ch
.text:00402010
.text:00402010                 push    ebp
.text:00402011                 xor     eax, eax
.text:00402013                 mov     ebp, esp
.text:00402015                 push    edi
.text:00402016                 push    esi
.text:00402017                 push    ebx
.text:00402018                 sub     esp, 3Ch
.text:0040201B                 and     esp, 0FFFFFFF0h
.text:0040201E                 call    __alloca
.text:00402023                 call    sub_418DD0
.text:00402028                 mov     eax, [ebp+arg_4]
.text:0040202B                 mov     ecx, [eax]
.text:0040202D                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00402035                 mov     [esp+48h+Category], 0 ; Category
.text:0040203C                 mov     ds:dword_41BBA0, ecx
.text:00402042                 call    setlocale
.text:00402047                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:0040204F                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00402056                 call    ds:libintl_bindtextdomain
.text:0040205C                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00402063                 call    ds:libintl_textdomain
.text:00402069                 mov     [esp+48h+Category], offset sub_40FF80 ; void (__cdecl *)()
.text:00402070                 call    sub_401040
.text:00402075                 lea     esi, [esi+0]
.text:00402079                 lea     edi, [edi+0]
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_402010+EE↓j
.text:00402080                                         ; sub_402010+35F↓j ...
.text:00402080                 mov     [esp+48h+Str], 0 ; int
.text:00402088                 mov     eax, [ebp+arg_4]
.text:0040208B                 mov     edi, [ebp+arg_0]
.text:0040208E                 mov     dword ptr [esp+48h+var_3C], offset off_401360 ; int
.text:00402096                 mov     [esp+48h+Size], offset aAcfGmOrsTwBIFg ; "ACF:GM:ORS:TW:b:i:fg:o:trw:"
.text:0040209E                 mov     [esp+48h+Locale], eax ; int
.text:004020A2                 mov     [esp+48h+Category], edi ; int
.text:004020A5                 call    sub_40FE10
.text:004020AA                 cmp     eax, 0FFFFFFFFh
.text:004020AD                 jz      loc_40261A
.text:004020B3                 cmp     eax, 53h ; 'S'
.text:004020B6                 jz      loc_402602
.text:004020BC                 cmp     eax, 53h ; 'S'
.text:004020BF                 jg      loc_402432
.text:004020C5                 cmp     eax, 43h ; 'C'
.text:004020C8                 jz      loc_4023C7
.text:004020CE                 cmp     eax, 43h ; 'C'
.text:004020D1                 jg      loc_402350
.text:004020D7                 cmp     eax, 0FFFFFF7Eh
.text:004020DC                 jz      loc_40217D
.text:004020E2                 cmp     eax, 0FFFFFF7Eh
.text:004020E7                 jle     loc_4022FB
.text:004020ED                 cmp     eax, 0Ah
.text:004020F0                 jz      short loc_402138
.text:004020F2                 cmp     eax, 41h ; 'A'
.text:004020F5                 jnz     short loc_402100
.text:004020F7                 mov     ds:byte_41B000, 1
.text:004020FE                 jmp     short loc_402080
.text:00402100 ; ---------------------------------------------------------------------------
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_402010+E5↑j
.text:00402100                                         ; sub_402010+2F0↓j ...
.text:00402100                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402107                 call    ds:libintl_gettext
.text:0040210D                 mov     ecx, ds:_iob
.text:00402113                 mov     edi, ds:dword_41BBA0
.text:00402119                 add     ecx, 40h ; '@'
.text:0040211C                 mov     [esp+48h+Size], edi
.text:00402120                 mov     [esp+48h+Locale], eax ; Format
.text:00402124                 mov     [esp+48h+Category], ecx ; Stream
.text:00402127                 call    fprintf
.text:0040212C                 mov     [esp+48h+Category], 1 ; Code
.text:00402133
.text:00402133 loc_402133:                             ; CODE XREF: sub_402010+2E6↓j
.text:00402133                 call    exit
.text:00402138 ; ---------------------------------------------------------------------------
.text:00402138
.text:00402138 loc_402138:                             ; CODE XREF: sub_402010+E0↑j
.text:00402138                 mov     [esp+48h+Str], 4 ; int
.text:00402140                 mov     edi, off_41A050
.text:00402146                 mov     esi, ds:dword_41BBD0
.text:0040214C                 mov     dword ptr [esp+48h+var_3C], offset dword_4014B8 ; int
.text:00402154                 mov     [esp+48h+var_34], edi ; int
.text:00402158                 mov     [esp+48h+Size], offset off_4014AC ; int
.text:00402160                 mov     [esp+48h+Locale], esi ; char *
.text:00402164                 mov     [esp+48h+Category], offset aFormat ; "--format"
.text:0040216B                 call    sub_40DE20
.text:00402170                 mov     ecx, ds:dword_4014B8[eax*4]
.text:00402177                 mov     ds:dword_41B030, ecx
.text:0040217D
.text:0040217D loc_40217D:                             ; CODE XREF: sub_402010+CC↑j
.text:0040217D                 mov     [esp+48h+Category], offset aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT]...   (wit"...
.text:00402184                 call    ds:libintl_gettext
.text:0040218A                 mov     ecx, ds:dword_41BBA0
.text:00402190                 mov     [esp+48h+Category], eax ; Format
.text:00402193                 mov     [esp+48h+Size], ecx
.text:00402197                 mov     [esp+48h+Locale], ecx
.text:0040219B                 call    printf
.text:004021A0                 mov     [esp+48h+Category], offset aOutputAPermute ; "Output a permuted index, including cont"...
.text:004021A7                 call    ds:libintl_gettext
.text:004021AD                 mov     ebx, ds:_iob
.text:004021B3                 add     ebx, 20h ; ' '
.text:004021B6                 mov     [esp+48h+Locale], ebx ; Stream
.text:004021BA                 mov     [esp+48h+Category], eax ; Buffer
.text:004021BD                 call    fputs
.text:004021C2                 mov     [esp+48h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004021C9                 call    ds:libintl_gettext
.text:004021CF                 mov     edi, ds:_iob
.text:004021D5                 add     edi, 20h ; ' '
.text:004021D8                 mov     [esp+48h+Locale], edi ; Stream
.text:004021DC                 mov     [esp+48h+Category], eax ; Buffer
.text:004021DF                 call    fputs
.text:004021E4                 mov     [esp+48h+Category], offset aAAutoReference ; "  -A, --auto-reference           output"...
.text:004021EB                 call    ds:libintl_gettext
.text:004021F1                 mov     esi, ds:_iob
.text:004021F7                 add     esi, 20h ; ' '
.text:004021FA                 mov     [esp+48h+Locale], esi ; Stream
.text:004021FE                 mov     [esp+48h+Category], eax ; Buffer
.text:00402201                 call    fputs
.text:00402206                 mov     [esp+48h+Category], offset aMMacroNameStri ; "  -M, --macro-name=STRING        macro "...
.text:0040220D                 call    ds:libintl_gettext
.text:00402213                 mov     ecx, ds:_iob
.text:00402219                 add     ecx, 20h ; ' '
.text:0040221C                 mov     [esp+48h+Locale], ecx ; Stream
.text:00402220                 mov     [esp+48h+Category], eax ; Buffer
.text:00402223                 call    fputs
.text:00402228                 mov     [esp+48h+Category], offset aWWordRegexpReg ; "  -W, --word-regexp=REGEXP       use RE"...
.text:0040222F                 call    ds:libintl_gettext
.text:00402235                 mov     ebx, ds:_iob
.text:0040223B                 add     ebx, 20h ; ' '
.text:0040223E                 mov     [esp+48h+Locale], ebx ; Stream
.text:00402242                 mov     [esp+48h+Category], eax ; Buffer
.text:00402245                 call    fputs
.text:0040224A                 mov     [esp+48h+Category], offset aRReferencesFir ; "  -r, --references               first "...
.text:00402251                 call    ds:libintl_gettext
.text:00402257                 mov     edi, ds:_iob
.text:0040225D                 add     edi, 20h ; ' '
.text:00402260                 mov     [esp+48h+Locale], edi ; Stream
.text:00402264                 mov     [esp+48h+Category], eax ; Buffer
.text:00402267                 call    fputs
.text:0040226C                 mov     [esp+48h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402273                 call    ds:libintl_gettext
.text:00402279                 mov     esi, ds:_iob
.text:0040227F                 add     esi, 20h ; ' '
.text:00402282                 mov     [esp+48h+Locale], esi ; Stream
.text:00402286                 mov     [esp+48h+Category], eax ; Buffer
.text:00402289                 call    fputs
.text:0040228E                 mov     [esp+48h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402295                 call    ds:libintl_gettext
.text:0040229B                 mov     ecx, ds:_iob
.text:004022A1                 add     ecx, 20h ; ' '
.text:004022A4                 mov     [esp+48h+Locale], ecx ; Stream
.text:004022A8                 mov     [esp+48h+Category], eax ; Buffer
.text:004022AB                 call    fputs
.text:004022B0                 mov     [esp+48h+Category], offset aWithNoFileOrIf ; "\nWith no FILE or if FILE is -, read St"...
.text:004022B7                 call    ds:libintl_gettext
.text:004022BD                 mov     ebx, ds:_iob
.text:004022C3                 add     ebx, 20h ; ' '
.text:004022C6                 mov     [esp+48h+Locale], ebx ; Stream
.text:004022CA                 mov     [esp+48h+Category], eax ; Buffer
.text:004022CD                 call    fputs
.text:004022D2                 mov     [esp+48h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004022D9                 call    ds:libintl_gettext
.text:004022DF                 mov     [esp+48h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004022E7                 mov     [esp+48h+Category], eax ; Format
.text:004022EA                 call    printf
.text:004022EF
.text:004022EF loc_4022EF:                             ; CODE XREF: sub_402010+338↓j
.text:004022EF                                         ; sub_402010+41D↓j ...
.text:004022EF                 mov     [esp+48h+Category], 0
.text:004022F6                 jmp     loc_402133
.text:004022FB ; ---------------------------------------------------------------------------
.text:004022FB
.text:004022FB loc_4022FB:                             ; CODE XREF: sub_402010+D7↑j
.text:004022FB                 cmp     eax, 0FFFFFF7Dh
.text:00402300                 jnz     loc_402100
.text:00402306                 mov     [esp+48h+Category], offset aFPinard ; "F. Pinard"
.text:0040230D                 call    ds:libintl_gettext
.text:00402313                 mov     [esp+48h+var_34], 0
.text:0040231B                 mov     edx, ds:_iob
.text:00402321                 mov     dword ptr [esp+48h+var_3C], offset a530 ; "5.3.0"
.text:00402329                 mov     [esp+48h+Size], offset aGnuCoreutils ; "GNU coreutils"
.text:00402331                 add     edx, 20h ; ' '
.text:00402334                 mov     [esp+48h+Str], eax ; char
.text:00402338                 mov     [esp+48h+Locale], offset stru_401CF4 ; FILE *
.text:00402340                 mov     [esp+48h+Category], edx ; FILE *
.text:00402343                 call    sub_40F7F0
.text:00402348                 jmp     short loc_4022EF
.text:00402348 ; ---------------------------------------------------------------------------
.text:0040234A                 align 10h
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_402010+C1↑j
.text:00402350                 cmp     eax, 4Dh ; 'M'
.text:00402353                 jz      short loc_4023B6
.text:00402355                 cmp     eax, 4Dh ; 'M'
.text:00402358                 jg      short loc_40238C
.text:0040235A                 cmp     eax, 46h ; 'F'
.text:0040235D                 jz      short loc_402374
.text:0040235F                 cmp     eax, 47h ; 'G'
.text:00402362                 jnz     loc_402100
.text:00402368                 mov     byte_41A010, 0
.text:0040236F                 jmp     loc_402080
.text:00402374 ; ---------------------------------------------------------------------------
.text:00402374
.text:00402374 loc_402374:                             ; CODE XREF: sub_402010+34D↑j
.text:00402374                 mov     edx, ds:dword_41BBD0
.text:0040237A                 mov     [esp+48h+Category], edx ; char *
.text:0040237D                 call    sub_402BF0
.text:00402382                 mov     off_41A01C, eax
.text:00402387                 jmp     loc_402080
.text:0040238C ; ---------------------------------------------------------------------------
.text:0040238C
.text:0040238C loc_40238C:                             ; CODE XREF: sub_402010+348↑j
.text:0040238C                 cmp     eax, 4Fh ; 'O'
.text:0040238F                 jz      short loc_4023A6
.text:00402391                 cmp     eax, 52h ; 'R'
.text:00402394                 jnz     loc_402100
.text:0040239A                 mov     ds:byte_41B020, 1
.text:004023A1                 jmp     loc_402080
.text:004023A6 ; ---------------------------------------------------------------------------
.text:004023A6
.text:004023A6 loc_4023A6:                             ; CODE XREF: sub_402010+37F↑j
.text:004023A6                 mov     esi, 2
.text:004023AB                 mov     ds:dword_41B030, esi
.text:004023B1                 jmp     loc_402080
.text:004023B6 ; ---------------------------------------------------------------------------
.text:004023B6
.text:004023B6 loc_4023B6:                             ; CODE XREF: sub_402010+343↑j
.text:004023B6                 mov     ecx, ds:dword_41BBD0
.text:004023BC                 mov     off_41A020, ecx
.text:004023C2                 jmp     loc_402080
.text:004023C7 ; ---------------------------------------------------------------------------
.text:004023C7
.text:004023C7 loc_4023C7:                             ; CODE XREF: sub_402010+B8↑j
.text:004023C7                 mov     [esp+48h+Category], offset stru_401CF4._flag
.text:004023CE                 call    ds:libintl_gettext
.text:004023D4                 mov     esi, ds:_iob
.text:004023DA                 add     esi, 20h ; ' '
.text:004023DD                 mov     [esp+48h+Locale], esi ; Stream
.text:004023E1                 mov     [esp+48h+Category], eax ; Buffer
.text:004023E4                 call    fputs
.text:004023E9                 mov     [esp+48h+Category], offset aThisProgramIsD ; "This program is distributed in the hope"...
.text:004023F0                 call    ds:libintl_gettext
.text:004023F6                 mov     ebx, ds:_iob
.text:004023FC                 add     ebx, 20h ; ' '
.text:004023FF                 mov     [esp+48h+Locale], ebx ; Stream
.text:00402403                 mov     [esp+48h+Category], eax ; Buffer
.text:00402406                 call    fputs
.text:0040240B                 mov     [esp+48h+Category], offset aYouShouldHaveR ; "You should have received a copy of the "...
.text:00402412                 call    ds:libintl_gettext
.text:00402418                 mov     ecx, ds:_iob
.text:0040241E                 add     ecx, 20h ; ' '
.text:00402421                 mov     [esp+48h+Locale], ecx ; Stream
.text:00402425                 mov     [esp+48h+Category], eax ; Buffer
.text:00402428                 call    fputs
.text:0040242D                 jmp     loc_4022EF
.text:00402432 ; ---------------------------------------------------------------------------
.text:00402432
.text:00402432 loc_402432:                             ; CODE XREF: sub_402010+AF↑j
.text:00402432                 cmp     eax, 67h ; 'g'
.text:00402435                 jz      loc_402582
.text:0040243B                 cmp     eax, 67h ; 'g'
.text:0040243E                 jg      short loc_4024A6
.text:00402440                 cmp     eax, 57h ; 'W'
.text:00402443                 jz      short loc_40248E
.text:00402445                 cmp     eax, 57h ; 'W'
.text:00402448                 jg      short loc_402463
.text:0040244A                 cmp     eax, 54h ; 'T'
.text:0040244D                 jnz     loc_402100
.text:00402453                 mov     ebx, 3
.text:00402458                 mov     ds:dword_41B030, ebx
.text:0040245E                 jmp     loc_402080
.text:00402463 ; ---------------------------------------------------------------------------
.text:00402463
.text:00402463 loc_402463:                             ; CODE XREF: sub_402010+438↑j
.text:00402463                 cmp     eax, 62h ; 'b'
.text:00402466                 jz      short loc_40247D
.text:00402468                 cmp     eax, 66h ; 'f'
.text:0040246B                 jnz     loc_402100
.text:00402471                 mov     ds:byte_41B040, 1
.text:00402478                 jmp     loc_402080
.text:0040247D ; ---------------------------------------------------------------------------
.text:0040247D
.text:0040247D loc_40247D:                             ; CODE XREF: sub_402010+456↑j
.text:0040247D                 mov     edx, ds:dword_41BBD0
.text:00402483                 mov     ds:dword_41B070, edx
.text:00402489                 jmp     loc_402080
.text:0040248E ; ---------------------------------------------------------------------------
.text:0040248E
.text:0040248E loc_40248E:                             ; CODE XREF: sub_402010+433↑j
.text:0040248E                 mov     edx, ds:dword_41BBD0
.text:00402494                 mov     [esp+48h+Category], edx ; char *
.text:00402497                 call    sub_402BF0
.text:0040249C                 mov     ds:Str, eax
.text:004024A1                 jmp     loc_402080
.text:004024A6 ; ---------------------------------------------------------------------------
.text:004024A6
.text:004024A6 loc_4024A6:                             ; CODE XREF: sub_402010+42E↑j
.text:004024A6                 cmp     eax, 72h ; 'r'
.text:004024A9                 jz      loc_402576
.text:004024AF                 cmp     eax, 72h ; 'r'
.text:004024B2                 jg      short loc_4024E4
.text:004024B4                 cmp     eax, 69h ; 'i'
.text:004024B7                 jz      short loc_4024D3
.text:004024B9                 cmp     eax, 6Fh ; 'o'
.text:004024BC                 jnz     loc_402100
.text:004024C2                 mov     edi, ds:dword_41BBD0
.text:004024C8                 mov     ds:dword_41B080, edi
.text:004024CE                 jmp     loc_402080
.text:004024D3 ; ---------------------------------------------------------------------------
.text:004024D3
.text:004024D3 loc_4024D3:                             ; CODE XREF: sub_402010+4A7↑j
.text:004024D3                 mov     edx, ds:dword_41BBD0
.text:004024D9                 mov     ds:dword_41B090, edx
.text:004024DF                 jmp     loc_402080
.text:004024E4 ; ---------------------------------------------------------------------------
.text:004024E4
.text:004024E4 loc_4024E4:                             ; CODE XREF: sub_402010+4A2↑j
.text:004024E4                 cmp     eax, 74h ; 't'
.text:004024E7                 jz      loc_402080
.text:004024ED                 cmp     eax, 77h ; 'w'
.text:004024F0                 jnz     loc_402100
.text:004024F6                 mov     [esp+48h+Str], 0 ; Str
.text:004024FE                 mov     ecx, ds:dword_41BBD0
.text:00402504                 lea     esi, [ebp+var_18]
.text:00402507                 mov     dword ptr [esp+48h+var_3C], esi ; int
.text:0040250B                 mov     [esp+48h+Size], 0 ; int
.text:00402513                 mov     [esp+48h+Locale], 0 ; int
.text:0040251B                 mov     [esp+48h+Category], ecx ; int
.text:0040251E                 call    sub_40F8A0
.text:00402523                 test    eax, eax
.text:00402525                 jnz     short loc_402538
.text:00402527                 mov     eax, [ebp+var_18]
.text:0040252A                 test    eax, eax
.text:0040252C                 jle     short loc_402538
.text:0040252E
.text:0040252E loc_40252E:                             ; CODE XREF: sub_402010+564↓j
.text:0040252E                 mov     dword_41A014, eax
.text:00402533                 jmp     loc_402080
.text:00402538 ; ---------------------------------------------------------------------------
.text:00402538
.text:00402538 loc_402538:                             ; CODE XREF: sub_402010+515↑j
.text:00402538                                         ; sub_402010+51C↑j
.text:00402538                 mov     ebx, ds:dword_41BBD0
.text:0040253E                 mov     [esp+48h+Category], ebx ; char *
.text:00402541                 call    sub_4068D0
.text:00402546                 mov     [esp+48h+Category], offset aInvalidLineWid ; "invalid line width: %s"
.text:0040254D                 mov     edi, eax
.text:0040254F                 call    ds:libintl_gettext
.text:00402555                 mov     dword ptr [esp+48h+var_3C], edi ; char
.text:00402559                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00402561                 mov     [esp+48h+Category], 1 ; Code
.text:00402568                 mov     [esp+48h+Size], eax ; char *
.text:0040256C                 call    sub_4103E0
.text:00402571                 mov     eax, [ebp+var_18]
.text:00402574                 jmp     short loc_40252E
.text:00402576 ; ---------------------------------------------------------------------------
.text:00402576
.text:00402576 loc_402576:                             ; CODE XREF: sub_402010+499↑j
.text:00402576                 mov     ds:byte_41B010, 1
.text:0040257D                 jmp     loc_402080
.text:00402582 ; ---------------------------------------------------------------------------
.text:00402582
.text:00402582 loc_402582:                             ; CODE XREF: sub_402010+425↑j
.text:00402582                 mov     [esp+48h+Str], 0 ; Str
.text:0040258A                 mov     edi, ds:dword_41BBD0
.text:00402590                 lea     ecx, [ebp+var_14]
.text:00402593                 mov     dword ptr [esp+48h+var_3C], ecx ; int
.text:00402597                 mov     [esp+48h+Size], 0 ; int
.text:0040259F                 mov     [esp+48h+Locale], 0 ; int
.text:004025A7                 mov     [esp+48h+Category], edi ; int
.text:004025AA                 call    sub_40F8A0
.text:004025AF                 test    eax, eax
.text:004025B1                 jnz     short loc_4025C4
.text:004025B3                 mov     eax, [ebp+var_14]
.text:004025B6                 test    eax, eax
.text:004025B8                 jle     short loc_4025C4
.text:004025BA
.text:004025BA loc_4025BA:                             ; CODE XREF: sub_402010+5F0↓j
.text:004025BA                 mov     dword_41A018, eax
.text:004025BF                 jmp     loc_402080
.text:004025C4 ; ---------------------------------------------------------------------------
.text:004025C4
.text:004025C4 loc_4025C4:                             ; CODE XREF: sub_402010+5A1↑j
.text:004025C4                                         ; sub_402010+5A8↑j
.text:004025C4                 mov     ebx, ds:dword_41BBD0
.text:004025CA                 mov     [esp+48h+Category], ebx ; char *
.text:004025CD                 call    sub_4068D0
.text:004025D2                 mov     [esp+48h+Category], offset aInvalidGapWidt ; "invalid gap width: %s"
.text:004025D9                 mov     esi, eax
.text:004025DB                 call    ds:libintl_gettext
.text:004025E1                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:004025E5                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004025ED                 mov     [esp+48h+Category], 1 ; Code
.text:004025F4                 mov     [esp+48h+Size], eax ; char *
.text:004025F8                 call    sub_4103E0
.text:004025FD                 mov     eax, [ebp+var_14]
.text:00402600                 jmp     short loc_4025BA
.text:00402602 ; ---------------------------------------------------------------------------
.text:00402602
.text:00402602 loc_402602:                             ; CODE XREF: sub_402010+A6↑j
.text:00402602                 mov     edi, ds:dword_41BBD0
.text:00402608                 mov     [esp+48h+Category], edi ; char *
.text:0040260B                 call    sub_402BF0
.text:00402610                 mov     ds:dword_41B050, eax
.text:00402615                 jmp     loc_402080
.text:0040261A ; ---------------------------------------------------------------------------
.text:0040261A
.text:0040261A loc_40261A:                             ; CODE XREF: sub_402010+9D↑j
.text:0040261A                 mov     eax, dword_41A060
.text:0040261F                 cmp     eax, edi
.text:00402621                 jz      loc_4029F1
.text:00402627                 cmp     byte_41A010, 0
.text:0040262E                 jz      loc_4028A5
.text:00402634                 mov     edi, [ebp+arg_0]
.text:00402637                 sub     edi, eax
.text:00402639                 mov     esi, edi
.text:0040263B                 mov     ds:dword_41B320, edi
.text:00402641                 shl     esi, 2
.text:00402644                 mov     [esp+48h+Category], esi ; size_t
.text:00402647                 call    sub_410100
.text:0040264C                 mov     ds:dword_41B340, eax
.text:00402651                 mov     ecx, ds:dword_41B320
.text:00402657                 shl     ecx, 2
.text:0040265A                 mov     [esp+48h+Category], ecx ; size_t
.text:0040265D                 call    sub_410100
.text:00402662                 mov     [ebp+var_2C], 0
.text:00402669                 mov     ebx, ds:dword_41B320
.text:0040266F                 cmp     [ebp+var_2C], ebx
.text:00402672                 mov     ds:dword_41B350, eax
.text:00402677                 mov     [ebp+var_24], ebx
.text:0040267A                 jge     short loc_4026E3
.text:0040267C                 mov     eax, dword_41A060
.text:00402681                 mov     edx, ds:dword_41B340
.text:00402687                 mov     [ebp+var_30], eax
.text:0040268A                 mov     [ebp+var_28], edx
.text:0040268D
.text:0040268D loc_40268D:                             ; CODE XREF: sub_402010+6D1↓j
.text:0040268D                 mov     esi, [ebp+arg_4]
.text:00402690                 mov     eax, [ebp+var_30]
.text:00402693                 mov     ebx, [ebp+var_28]
.text:00402696                 mov     edx, [ebp+var_2C]
.text:00402699                 mov     edi, [esi+eax*4]
.text:0040269C                 mov     ecx, [ebp+var_30]
.text:0040269F                 mov     [ebx+edx*4], edi
.text:004026A2                 mov     ebx, [esi+ecx*4]
.text:004026A5                 cmp     byte ptr [ebx], 0
.text:004026A8                 jz      short loc_4026C3
.text:004026AA                 cld
.text:004026AB                 mov     ecx, offset asc_401FF7 ; "-"
.text:004026B0                 mov     eax, 2
.text:004026B5                 mov     edi, ecx
.text:004026B7                 mov     esi, ebx
.text:004026B9                 mov     ecx, eax
.text:004026BB                 repe cmpsb
.text:004026BD                 jnz     loc_40289B
.text:004026C3
.text:004026C3 loc_4026C3:                             ; CODE XREF: sub_402010+698↑j
.text:004026C3                 mov     esi, [ebp+var_28]
.text:004026C6                 mov     dword ptr [esi], 0
.text:004026CC
.text:004026CC loc_4026CC:                             ; CODE XREF: sub_402010+890↓j
.text:004026CC                 inc     [ebp+var_2C]
.text:004026CF                 mov     ebx, [ebp+var_24]
.text:004026D2                 inc     [ebp+var_30]
.text:004026D5                 cmp     [ebp+var_2C], ebx
.text:004026D8                 mov     edx, [ebp+var_30]
.text:004026DB                 mov     dword_41A060, edx
.text:004026E1                 jl      short loc_40268D
.text:004026E3
.text:004026E3 loc_4026E3:                             ; CODE XREF: sub_402010+66A↑j
.text:004026E3                                         ; sub_402010+90D↓j ...
.text:004026E3                 mov     edx, ds:dword_41B030
.text:004026E9                 test    edx, edx
.text:004026EB                 jnz     short loc_402700
.text:004026ED                 xor     ebx, ebx
.text:004026EF                 cmp     byte_41A010, 0
.text:004026F6                 setz    bl
.text:004026F9                 inc     ebx
.text:004026FA                 mov     ds:dword_41B030, ebx
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_402010+6DB↑j
.text:00402700                 call    sub_402ED0
.text:00402705                 mov     edx, ds:dword_41B070
.text:0040270B                 test    edx, edx
.text:0040270D                 jnz     loc_40282A
.text:00402713
.text:00402713 loc_402713:                             ; CODE XREF: sub_402010+886↓j
.text:00402713                 mov     eax, ds:dword_41B090
.text:00402718                 test    eax, eax
.text:0040271A                 jnz     loc_402802
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_402010+815↓j
.text:00402720                 mov     eax, ds:dword_41B080
.text:00402725                 test    eax, eax
.text:00402727                 jnz     loc_4027DA
.text:0040272D
.text:0040272D loc_40272D:                             ; CODE XREF: sub_402010+7ED↓j
.text:0040272D                 mov     [ebp+var_2C], 0
.text:00402734                 xor     ebx, ebx
.text:00402736                 xor     ecx, ecx
.text:00402738                 mov     ds:dword_41B390, ecx
.text:0040273E                 xor     edi, edi
.text:00402740                 xor     eax, eax
.text:00402742                 mov     ds:dword_41B330, edi
.text:00402748                 xor     esi, esi
.text:0040274A                 cmp     ebx, ds:dword_41B320
.text:00402750                 mov     ds:dword_41B2E0, eax
.text:00402755                 mov     ds:dword_41B2F0, esi
.text:0040275B                 jl      short loc_402794
.text:0040275D
.text:0040275D loc_40275D:                             ; CODE XREF: sub_402010+7C8↓j
.text:0040275D                 mov     dword ptr [esp+48h+var_3C], offset sub_403420 ; int
.text:00402765                 mov     edx, ds:Block
.text:0040276B                 mov     esi, ds:dword_41B390
.text:00402771                 mov     [esp+48h+Size], 10h ; size_t
.text:00402779                 mov     [esp+48h+Category], edx ; Block
.text:0040277C                 mov     [esp+48h+Locale], esi ; void *
.text:00402780                 call    sub_413C00
.text:00402785                 call    sub_403B90
.text:0040278A                 call    sub_403E10
.text:0040278F                 jmp     loc_4022EF
.text:00402794 ; ---------------------------------------------------------------------------
.text:00402794
.text:00402794 loc_402794:                             ; CODE XREF: sub_402010+74B↑j
.text:00402794                                         ; sub_402010+7C6↓j
.text:00402794                 mov     [esp+48h+Locale], offset dword_41B360 ; int
.text:0040279C                 mov     ecx, ds:dword_41B340
.text:004027A2                 mov     ebx, [ebp+var_2C]
.text:004027A5                 mov     edi, [ecx+ebx*4]
.text:004027A8                 mov     [esp+48h+Category], edi ; FileName
.text:004027AB                 call    sub_403190
.text:004027B0                 call    sub_403550
.text:004027B5                 mov     eax, ds:dword_41B330
.text:004027BA                 mov     ebx, [ebp+var_2C]
.text:004027BD                 mov     esi, ds:dword_41B350
.text:004027C3                 inc     eax
.text:004027C4                 mov     ds:dword_41B330, eax
.text:004027C9                 mov     [esi+ebx*4], eax
.text:004027CC                 inc     ebx
.text:004027CD                 cmp     ebx, ds:dword_41B320
.text:004027D3                 mov     [ebp+var_2C], ebx
.text:004027D6                 jl      short loc_402794
.text:004027D8                 jmp     short loc_40275D
.text:004027DA ; ---------------------------------------------------------------------------
.text:004027DA
.text:004027DA loc_4027DA:                             ; CODE XREF: sub_402010+717↑j
.text:004027DA                 mov     [esp+48h+Locale], offset dword_41B310 ; int
.text:004027E2                 mov     [esp+48h+Category], eax ; FileName
.text:004027E5                 call    sub_403460
.text:004027EA                 xor     edx, edx
.text:004027EC                 cmp     ds:dword_41B318, 0
.text:004027F3                 setz    dl
.text:004027F6                 dec     edx
.text:004027F7                 and     ds:dword_41B080, edx
.text:004027FD                 jmp     loc_40272D
.text:00402802 ; ---------------------------------------------------------------------------
.text:00402802
.text:00402802 loc_402802:                             ; CODE XREF: sub_402010+70A↑j
.text:00402802                 mov     [esp+48h+Locale], offset dword_41B300 ; int
.text:0040280A                 mov     [esp+48h+Category], eax ; FileName
.text:0040280D                 call    sub_403460
.text:00402812                 xor     ecx, ecx
.text:00402814                 cmp     ds:dword_41B308, 0
.text:0040281B                 setz    cl
.text:0040281E                 dec     ecx
.text:0040281F                 and     ds:dword_41B090, ecx
.text:00402825                 jmp     loc_402720
.text:0040282A ; ---------------------------------------------------------------------------
.text:0040282A
.text:0040282A loc_40282A:                             ; CODE XREF: sub_402010+6FD↑j
.text:0040282A                 mov     [esp+48h+Category], edx ; FileName
.text:0040282D                 lea     esi, [ebp+Block]
.text:00402830                 mov     [esp+48h+Locale], esi ; int
.text:00402834                 call    sub_403190
.text:00402839                 mov     [esp+48h+Size], 100h ; Size
.text:00402841                 mov     [esp+48h+Locale], 1 ; Val
.text:00402849                 mov     [esp+48h+Category], offset byte_41B1E0 ; void *
.text:00402850                 call    memset
.text:00402855                 mov     ebx, [ebp+Block]
.text:00402858                 mov     ecx, [ebp+var_1C]
.text:0040285B                 mov     edx, ebx
.text:0040285D                 cmp     ebx, ecx
.text:0040285F                 jnb     short loc_402870
.text:00402861
.text:00402861 loc_402861:                             ; CODE XREF: sub_402010+85E↓j
.text:00402861                 movzx   edi, byte ptr [edx]
.text:00402864                 inc     edx
.text:00402865                 cmp     edx, ecx
.text:00402867                 mov     ds:byte_41B1E0[edi], 0
.text:0040286E                 jb      short loc_402861
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402010+84F↑j
.text:00402870                 cmp     byte_41A010, 0
.text:00402877                 jnz     short loc_40288E
.text:00402879                 mov     ds:byte_41B200, 0
.text:00402880                 mov     ds:byte_41B1E9, 0
.text:00402887                 mov     ds:byte_41B1EA, 0
.text:0040288E
.text:0040288E loc_40288E:                             ; CODE XREF: sub_402010+867↑j
.text:0040288E                 mov     [esp+48h+Category], ebx ; Block
.text:00402891                 call    free
.text:00402896                 jmp     loc_402713
.text:0040289B ; ---------------------------------------------------------------------------
.text:0040289B
.text:0040289B loc_40289B:                             ; CODE XREF: sub_402010+6AD↑j
.text:0040289B                 mov     edi, [ebp+var_28]
.text:0040289E                 mov     [edi], ebx
.text:004028A0                 jmp     loc_4026CC
.text:004028A5 ; ---------------------------------------------------------------------------
.text:004028A5
.text:004028A5 loc_4028A5:                             ; CODE XREF: sub_402010+61E↑j
.text:004028A5                 mov     [esp+48h+Category], 4 ; size_t
.text:004028AC                 mov     ebx, 1
.text:004028B1                 mov     ds:dword_41B320, ebx
.text:004028B7                 call    sub_410100
.text:004028BC                 mov     ds:dword_41B340, eax
.text:004028C1                 mov     [esp+48h+Category], 4 ; size_t
.text:004028C8                 call    sub_410100
.text:004028CD                 mov     ds:dword_41B350, eax
.text:004028D2                 mov     esi, dword_41A060
.text:004028D8                 mov     ecx, [ebp+arg_4]
.text:004028DB                 mov     ebx, esi
.text:004028DD                 mov     eax, [ecx+esi*4]
.text:004028E0                 mov     [ebp+var_30], eax
.text:004028E3                 cmp     byte ptr [eax], 0
.text:004028E6                 jz      short loc_402902
.text:004028E8                 cld
.text:004028E9                 mov     esi, [ebp+var_30]
.text:004028EC                 mov     ecx, offset asc_401FF7 ; "-"
.text:004028F1                 mov     eax, 2
.text:004028F6                 mov     edi, ecx
.text:004028F8                 mov     ecx, eax
.text:004028FA                 repe cmpsb
.text:004028FC                 jnz     loc_4029E1
.text:00402902
.text:00402902 loc_402902:                             ; CODE XREF: sub_402010+8D6↑j
.text:00402902                 mov     edi, ds:dword_41B340
.text:00402908                 mov     dword ptr [edi], 0
.text:0040290E
.text:0040290E loc_40290E:                             ; CODE XREF: sub_402010+9DC↓j
.text:0040290E                 mov     edx, [ebp+arg_0]
.text:00402911                 inc     ebx
.text:00402912                 mov     [ebp+var_30], ebx
.text:00402915                 mov     dword_41A060, ebx
.text:0040291B                 cmp     ebx, edx
.text:0040291D                 jge     loc_4026E3
.text:00402923                 mov     edi, ds:_iob
.text:00402929                 add     edi, 20h ; ' '
.text:0040292C                 mov     [esp+48h+Category], edi ; Stream
.text:0040292F                 call    fclose
.text:00402934                 mov     [esp+48h+Locale], offset aW ; "w"
.text:0040293C                 mov     ecx, dword_41A060
.text:00402942                 mov     edi, [ebp+arg_4]
.text:00402945                 mov     ebx, [edi+ecx*4]
.text:00402948                 mov     [esp+48h+Category], ebx ; FileName
.text:0040294B                 call    fopen
.text:00402950                 test    eax, eax
.text:00402952                 jz      short loc_4029B0
.text:00402954
.text:00402954 loc_402954:                             ; CODE XREF: sub_402010+9CC↓j
.text:00402954                 mov     eax, dword_41A060
.text:00402959                 mov     edi, [ebp+arg_0]
.text:0040295C                 inc     eax
.text:0040295D                 mov     [ebp+var_30], eax
.text:00402960                 cmp     eax, edi
.text:00402962                 mov     dword_41A060, eax
.text:00402967                 jge     loc_4026E3
.text:0040296D                 mov     ebx, eax
.text:0040296F                 mov     eax, [ebp+arg_4]
.text:00402972                 mov     edx, [eax+ebx*4]
.text:00402975                 mov     [esp+48h+Category], edx ; char *
.text:00402978                 call    sub_40F300
.text:0040297D                 mov     [esp+48h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00402984                 mov     esi, eax
.text:00402986                 call    ds:libintl_gettext
.text:0040298C                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:00402990                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:00402998                 mov     [esp+48h+Category], 0 ; Code
.text:0040299F                 mov     [esp+48h+Size], eax ; char *
.text:004029A3                 call    sub_4103E0
.text:004029A8                 jmp     loc_402100
.text:004029A8 ; ---------------------------------------------------------------------------
.text:004029AD                 align 10h
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_402010+942↑j
.text:004029B0                 call    _errno
.text:004029B5                 mov     ecx, dword_41A060
.text:004029BB                 mov     ebx, [edi+ecx*4]
.text:004029BE                 mov     [esp+48h+Size], offset aS ; "%s"
.text:004029C6                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:004029CA                 mov     esi, [eax]
.text:004029CC                 mov     [esp+48h+Category], 1 ; Code
.text:004029D3                 mov     [esp+48h+Locale], esi ; ErrorMessage
.text:004029D7                 call    sub_4103E0
.text:004029DC                 jmp     loc_402954
.text:004029E1 ; ---------------------------------------------------------------------------
.text:004029E1
.text:004029E1 loc_4029E1:                             ; CODE XREF: sub_402010+8EC↑j
.text:004029E1                 mov     esi, ds:dword_41B340
.text:004029E7                 mov     eax, [ebp+var_30]
.text:004029EA                 mov     [esi], eax
.text:004029EC                 jmp     loc_40290E
.text:004029F1 ; ---------------------------------------------------------------------------
.text:004029F1
.text:004029F1 loc_4029F1:                             ; CODE XREF: sub_402010+611↑j
.text:004029F1                 mov     [esp+48h+Category], 4 ; size_t
.text:004029F8                 mov     edi, 1
.text:004029FD                 call    sub_410100
.text:00402A02                 mov     ds:dword_41B340, eax
.text:00402A07                 mov     [esp+48h+Category], 4 ; size_t
.text:00402A0E                 call    sub_410100
.text:00402A13                 mov     ds:dword_41B350, eax
.text:00402A18                 mov     esi, ds:dword_41B340
.text:00402A1E                 mov     ds:dword_41B320, edi
.text:00402A24                 mov     dword ptr [esi], 0
.text:00402A2A                 jmp     loc_4026E3
.text:00402A2A sub_402010      endp
.text:00402A2A
.text:00402A2A ; ---------------------------------------------------------------------------
.text:00402A2F                 align 10h
.text:00402A30
.text:00402A30 ; =============== S U B R O U T I N E =======================================
.text:00402A30
.text:00402A30 ; Attributes: noreturn
.text:00402A30
.text:00402A30 ; void __cdecl __noreturn sub_402A30(int Code)
.text:00402A30 sub_402A30      proc near               ; CODE XREF: sub_40E090+A↓p
.text:00402A30
.text:00402A30 Stream          = dword ptr -1Ch
.text:00402A30 Format          = dword ptr -18h
.text:00402A30 var_14          = dword ptr -14h
.text:00402A30 Code            = dword ptr  4
.text:00402A30
.text:00402A30                 push    ebx
.text:00402A31                 sub     esp, 18h
.text:00402A34                 mov     ebx, [esp+1Ch+Code]
.text:00402A38                 test    ebx, ebx
.text:00402A3A                 jz      short loc_402A70
.text:00402A3C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402A43                 call    ds:libintl_gettext
.text:00402A49                 mov     edx, ds:_iob
.text:00402A4F                 mov     ecx, ds:dword_41BBA0
.text:00402A55                 add     edx, 40h ; '@'
.text:00402A58                 mov     [esp+1Ch+var_14], ecx
.text:00402A5C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402A60                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402A63                 call    fprintf
.text:00402A68
.text:00402A68 loc_402A68:                             ; CODE XREF: sub_402A30+1B2↓j
.text:00402A68                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00402A6B                 call    exit
.text:00402A70 ; ---------------------------------------------------------------------------
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402A30+A↑j
.text:00402A70                 mov     [esp+1Ch+Stream], offset aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT]...   (wit"...
.text:00402A77                 call    ds:libintl_gettext
.text:00402A7D                 mov     ecx, ds:dword_41BBA0
.text:00402A83                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402A86                 mov     [esp+1Ch+var_14], ecx
.text:00402A8A                 mov     [esp+1Ch+Format], ecx
.text:00402A8E                 call    printf
.text:00402A93                 mov     [esp+1Ch+Stream], offset aOutputAPermute ; "Output a permuted index, including cont"...
.text:00402A9A                 call    ds:libintl_gettext
.text:00402AA0                 mov     ecx, ds:_iob
.text:00402AA6                 add     ecx, 20h ; ' '
.text:00402AA9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402AAD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AB0                 call    fputs
.text:00402AB5                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402ABC                 call    ds:libintl_gettext
.text:00402AC2                 mov     ecx, ds:_iob
.text:00402AC8                 add     ecx, 20h ; ' '
.text:00402ACB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402ACF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AD2                 call    fputs
.text:00402AD7                 mov     [esp+1Ch+Stream], offset aAAutoReference ; "  -A, --auto-reference           output"...
.text:00402ADE                 call    ds:libintl_gettext
.text:00402AE4                 mov     ecx, ds:_iob
.text:00402AEA                 add     ecx, 20h ; ' '
.text:00402AED                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402AF1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AF4                 call    fputs
.text:00402AF9                 mov     [esp+1Ch+Stream], offset aMMacroNameStri ; "  -M, --macro-name=STRING        macro "...
.text:00402B00                 call    ds:libintl_gettext
.text:00402B06                 mov     ecx, ds:_iob
.text:00402B0C                 add     ecx, 20h ; ' '
.text:00402B0F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402B13                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402B16                 call    fputs
.text:00402B1B                 mov     [esp+1Ch+Stream], offset aWWordRegexpReg ; "  -W, --word-regexp=REGEXP       use RE"...
.text:00402B22                 call    ds:libintl_gettext
.text:00402B28                 mov     ecx, ds:_iob
.text:00402B2E                 add     ecx, 20h ; ' '
.text:00402B31                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402B35                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402B38                 call    fputs
.text:00402B3D                 mov     [esp+1Ch+Stream], offset aRReferencesFir ; "  -r, --references               first "...
.text:00402B44                 call    ds:libintl_gettext
.text:00402B4A                 mov     ecx, ds:_iob
.text:00402B50                 add     ecx, 20h ; ' '
.text:00402B53                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402B57                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402B5A                 call    fputs
.text:00402B5F                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402B66                 call    ds:libintl_gettext
.text:00402B6C                 mov     ecx, ds:_iob
.text:00402B72                 add     ecx, 20h ; ' '
.text:00402B75                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402B79                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402B7C                 call    fputs
.text:00402B81                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402B88                 call    ds:libintl_gettext
.text:00402B8E                 mov     ecx, ds:_iob
.text:00402B94                 add     ecx, 20h ; ' '
.text:00402B97                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402B9B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402B9E                 call    fputs
.text:00402BA3                 mov     [esp+1Ch+Stream], offset aWithNoFileOrIf ; "\nWith no FILE or if FILE is -, read St"...
.text:00402BAA                 call    ds:libintl_gettext
.text:00402BB0                 mov     ecx, ds:_iob
.text:00402BB6                 add     ecx, 20h ; ' '
.text:00402BB9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402BBD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402BC0                 call    fputs
.text:00402BC5                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402BCC                 call    ds:libintl_gettext
.text:00402BD2                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402BDA                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402BDD                 call    printf
.text:00402BE2                 jmp     loc_402A68
.text:00402BE2 sub_402A30      endp
.text:00402BE2
.text:00402BE2 ; ---------------------------------------------------------------------------
.text:00402BE7                 align 10h
.text:00402BF0
.text:00402BF0 ; =============== S U B R O U T I N E =======================================
.text:00402BF0
.text:00402BF0
.text:00402BF0 ; int __cdecl sub_402BF0(char *)
.text:00402BF0 sub_402BF0      proc near               ; CODE XREF: sub_402010+36D↑p
.text:00402BF0                                         ; sub_402010+487↑p ...
.text:00402BF0
.text:00402BF0 Str             = dword ptr -1Ch
.text:00402BF0 Type            = dword ptr -18h
.text:00402BF0 var_14          = dword ptr -14h
.text:00402BF0 arg_0           = dword ptr  4
.text:00402BF0
.text:00402BF0                 push    ebp
.text:00402BF1                 push    edi
.text:00402BF2                 push    esi
.text:00402BF3                 push    ebx
.text:00402BF4                 sub     esp, 0Ch
.text:00402BF7                 mov     ebx, [esp+1Ch+arg_0]
.text:00402BFB                 mov     [esp+1Ch+Str], ebx ; Str
.text:00402BFE                 call    strlen
.text:00402C03                 inc     eax
.text:00402C04                 mov     [esp+1Ch+Str], eax ; size_t
.text:00402C07                 call    sub_410100
.text:00402C0C                 mov     [esp+1Ch+var_14], eax
.text:00402C10                 mov     esi, eax
.text:00402C12                 movzx   edx, byte ptr [ebx]
.text:00402C15                 test    dl, dl
.text:00402C17                 jz      short loc_402C30
.text:00402C19                 lea     esi, [esi+0]
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402BF0+3E↓j
.text:00402C20                 cmp     dl, 5Ch ; '\'
.text:00402C23                 jz      short loc_402C40
.text:00402C25                 mov     [esi], dl
.text:00402C27
.text:00402C27 loc_402C27:                             ; CODE XREF: sub_402BF0+289↓j
.text:00402C27                 inc     ebx
.text:00402C28
.text:00402C28 loc_402C28:                             ; CODE XREF: sub_402BF0+1E0↓j
.text:00402C28                                         ; sub_402BF0+1E9↓j
.text:00402C28                 inc     esi
.text:00402C29
.text:00402C29 loc_402C29:                             ; CODE XREF: sub_402BF0+24E↓j
.text:00402C29                 movzx   edx, byte ptr [ebx]
.text:00402C2C                 test    dl, dl
.text:00402C2E                 jnz     short loc_402C20
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402BF0+27↑j
.text:00402C30                                         ; sub_402BF0+25A↓j
.text:00402C30                 mov     byte ptr [esi], 0
.text:00402C33                 mov     eax, [esp+1Ch+var_14]
.text:00402C37                 add     esp, 0Ch
.text:00402C3A                 pop     ebx
.text:00402C3B                 pop     esi
.text:00402C3C                 pop     edi
.text:00402C3D                 pop     ebp
.text:00402C3E                 retn
.text:00402C3E ; ---------------------------------------------------------------------------
.text:00402C3F                 align 10h
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402BF0+33↑j
.text:00402C40                 inc     ebx
.text:00402C41                 movzx   edx, byte ptr [ebx]
.text:00402C44                 movsx   eax, dl
.text:00402C47                 sub     eax, 30h ; '0'  ; switch 73 cases
.text:00402C4A                 cmp     eax, 48h
.text:00402C4D                 ja      def_402C53      ; jumptable 00402C53 default case, cases 49-96,100,101,103-109,111-113,115,117,119
.text:00402C53                 jmp     ds:jpt_402C53[eax*4] ; switch jump
.text:00402C53 ; ---------------------------------------------------------------------------
.text:00402C5A                 align 4
.text:00402C5C jpt_402C53      dd offset loc_402E0A, offset def_402C53, offset def_402C53
.text:00402C5C                                         ; DATA XREF: sub_402BF0+63↑r
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53 ; jump table for switch statement
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset loc_402E39, offset loc_402E43
.text:00402C5C                 dd offset loc_402E48, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset loc_402E56, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset loc_402E5B
.text:00402C5C                 dd offset def_402C53, offset def_402C53, offset def_402C53
.text:00402C5C                 dd offset loc_402E60, offset def_402C53, offset loc_402E65
.text:00402C5C                 dd offset def_402C53, offset loc_402E6A, offset def_402C53
.text:00402C5C                 dd offset loc_402D80
.text:00402D80 ; ---------------------------------------------------------------------------
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402D80                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402D80                 xor     ebp, ebp        ; jumptable 00402C53 case 120
.text:00402D82                 xor     edi, edi
.text:00402D84                 inc     ebx
.text:00402D85
.text:00402D85 loc_402D85:                             ; CODE XREF: sub_402BF0+1D3↓j
.text:00402D85                 movsx   edx, byte ptr [ebx]
.text:00402D88                 mov     ecx, ds:__mb_cur_max
.text:00402D8E                 cmp     dword ptr [ecx], 1
.text:00402D91                 jz      short loc_402DF8
.text:00402D93                 mov     [esp+1Ch+Type], 80h ; '€' ; Type
.text:00402D9B                 mov     [esp+1Ch+Str], edx ; C
.text:00402D9E                 call    _isctype
.text:00402DA3
.text:00402DA3 loc_402DA3:                             ; CODE XREF: sub_402BF0+218↓j
.text:00402DA3                 test    eax, eax
.text:00402DA5                 jz      short loc_402DC5
.text:00402DA7                 movzx   edx, byte ptr [ebx]
.text:00402DAA                 mov     ecx, ebp
.text:00402DAC                 shl     ecx, 4
.text:00402DAF                 mov     al, dl
.text:00402DB1                 sub     al, 61h ; 'a'
.text:00402DB3                 cmp     al, 5
.text:00402DB5                 ja      short loc_402DDE
.text:00402DB7                 movsx   eax, dl
.text:00402DBA                 lea     ebp, [eax+ecx-57h]
.text:00402DBE
.text:00402DBE loc_402DBE:                             ; CODE XREF: sub_402BF0+1FD↓j
.text:00402DBE                                         ; sub_402BF0+206↓j
.text:00402DBE                 inc     edi
.text:00402DBF                 inc     ebx
.text:00402DC0                 cmp     edi, 2
.text:00402DC3                 jle     short loc_402D85
.text:00402DC5
.text:00402DC5 loc_402DC5:                             ; CODE XREF: sub_402BF0+1B5↑j
.text:00402DC5                 test    edi, edi
.text:00402DC7                 jnz     short loc_402DD5
.text:00402DC9                 mov     byte ptr [esi], 5Ch ; '\'
.text:00402DCC                 inc     esi
.text:00402DCD                 mov     byte ptr [esi], 78h ; 'x'
.text:00402DD0                 jmp     loc_402C28
.text:00402DD5 ; ---------------------------------------------------------------------------
.text:00402DD5
.text:00402DD5 loc_402DD5:                             ; CODE XREF: sub_402BF0+1D7↑j
.text:00402DD5                                         ; sub_402BF0+22A↓j ...
.text:00402DD5                 mov     edx, ebp
.text:00402DD7                 mov     [esi], dl
.text:00402DD9                 jmp     loc_402C28
.text:00402DDE ; ---------------------------------------------------------------------------
.text:00402DDE
.text:00402DDE loc_402DDE:                             ; CODE XREF: sub_402BF0+1C5↑j
.text:00402DDE                 mov     al, dl
.text:00402DE0                 sub     al, 41h ; 'A'
.text:00402DE2                 cmp     al, 5
.text:00402DE4                 ja      short loc_402DEF
.text:00402DE6                 movsx   eax, dl
.text:00402DE9                 lea     ebp, [eax+ecx-37h]
.text:00402DED                 jmp     short loc_402DBE
.text:00402DEF ; ---------------------------------------------------------------------------
.text:00402DEF
.text:00402DEF loc_402DEF:                             ; CODE XREF: sub_402BF0+1F4↑j
.text:00402DEF                 movsx   eax, dl
.text:00402DF2                 lea     ebp, [eax+ecx-30h]
.text:00402DF6                 jmp     short loc_402DBE
.text:00402DF8 ; ---------------------------------------------------------------------------
.text:00402DF8
.text:00402DF8 loc_402DF8:                             ; CODE XREF: sub_402BF0+1A1↑j
.text:00402DF8                 mov     eax, ds:_pctype
.text:00402DFD                 mov     ecx, [eax]
.text:00402DFF                 movzx   eax, word ptr [ecx+edx*2]
.text:00402E03                 and     eax, 80h
.text:00402E08                 jmp     short loc_402DA3
.text:00402E0A ; ---------------------------------------------------------------------------
.text:00402E0A
.text:00402E0A loc_402E0A:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E0A                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E0A                 inc     ebx             ; jumptable 00402C53 case 48
.text:00402E0B                 xor     ebp, ebp
.text:00402E0D                 xor     edi, edi
.text:00402E0F                 movzx   edx, byte ptr [ebx]
.text:00402E12                 mov     cl, dl
.text:00402E14                 sub     cl, 30h ; '0'
.text:00402E17                 cmp     cl, 7
.text:00402E1A                 ja      short loc_402DD5
.text:00402E1C
.text:00402E1C loc_402E1C:                             ; CODE XREF: sub_402BF0+245↓j
.text:00402E1C                 inc     edi
.text:00402E1D                 movsx   ecx, dl
.text:00402E20                 inc     ebx
.text:00402E21                 cmp     edi, 2
.text:00402E24                 lea     ebp, [ecx+ebp*8-30h]
.text:00402E28                 jg      short loc_402DD5
.text:00402E2A                 movzx   edx, byte ptr [ebx]
.text:00402E2D                 mov     cl, dl
.text:00402E2F                 sub     cl, 30h ; '0'
.text:00402E32                 cmp     cl, 7
.text:00402E35                 jbe     short loc_402E1C
.text:00402E37                 jmp     short loc_402DD5
.text:00402E39 ; ---------------------------------------------------------------------------
.text:00402E39
.text:00402E39 loc_402E39:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E39                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E39                 mov     byte ptr [esi], 7 ; jumptable 00402C53 case 97
.text:00402E3C
.text:00402E3C loc_402E3C:                             ; CODE XREF: sub_402BF0+256↓j
.text:00402E3C                                         ; sub_402BF0+269↓j ...
.text:00402E3C                 inc     esi
.text:00402E3D                 inc     ebx
.text:00402E3E                 jmp     loc_402C29
.text:00402E43 ; ---------------------------------------------------------------------------
.text:00402E43
.text:00402E43 loc_402E43:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E43                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E43                 mov     byte ptr [esi], 8 ; jumptable 00402C53 case 98
.text:00402E46                 jmp     short loc_402E3C
.text:00402E48 ; ---------------------------------------------------------------------------
.text:00402E48
.text:00402E48 loc_402E48:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E48                                         ; sub_402BF0+264↓j
.text:00402E48                                         ; DATA XREF: ...
.text:00402E48                 test    dl, dl          ; jumptable 00402C53 case 99
.text:00402E4A                 jz      loc_402C30
.text:00402E50                 inc     ebx
.text:00402E51                 movzx   edx, byte ptr [ebx]
.text:00402E54                 jmp     short loc_402E48 ; jumptable 00402C53 case 99
.text:00402E56 ; ---------------------------------------------------------------------------
.text:00402E56
.text:00402E56 loc_402E56:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E56                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E56                 mov     byte ptr [esi], 0Ch ; jumptable 00402C53 case 102
.text:00402E59                 jmp     short loc_402E3C
.text:00402E5B ; ---------------------------------------------------------------------------
.text:00402E5B
.text:00402E5B loc_402E5B:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E5B                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E5B                 mov     byte ptr [esi], 0Ah ; jumptable 00402C53 case 110
.text:00402E5E                 jmp     short loc_402E3C
.text:00402E60 ; ---------------------------------------------------------------------------
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E60                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E60                 mov     byte ptr [esi], 0Dh ; jumptable 00402C53 case 114
.text:00402E63                 jmp     short loc_402E3C
.text:00402E65 ; ---------------------------------------------------------------------------
.text:00402E65
.text:00402E65 loc_402E65:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E65                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E65                 mov     byte ptr [esi], 9 ; jumptable 00402C53 case 116
.text:00402E68                 jmp     short loc_402E3C
.text:00402E6A ; ---------------------------------------------------------------------------
.text:00402E6A
.text:00402E6A loc_402E6A:                             ; CODE XREF: sub_402BF0+63↑j
.text:00402E6A                                         ; DATA XREF: sub_402BF0:jpt_402C53↑o
.text:00402E6A                 mov     byte ptr [esi], 0Bh ; jumptable 00402C53 case 118
.text:00402E6D                 jmp     short loc_402E3C
.text:00402E6D ; ---------------------------------------------------------------------------
.text:00402E6F                 align 10h
.text:00402E70
.text:00402E70 def_402C53:                             ; CODE XREF: sub_402BF0+5D↑j
.text:00402E70                                         ; sub_402BF0+63↑j
.text:00402E70                                         ; DATA XREF: ...
.text:00402E70                 mov     byte ptr [esi], 5Ch ; '\' ; jumptable 00402C53 default case, cases 49-96,100,101,103-109,111-113,115,117,119
.text:00402E73                 inc     esi
.text:00402E74                 movzx   ecx, byte ptr [ebx]
.text:00402E77                 mov     [esi], cl
.text:00402E79                 jmp     loc_402C27
.text:00402E79 sub_402BF0      endp
.text:00402E79
.text:00402E79 ; ---------------------------------------------------------------------------
.text:00402E7E aSForRegexpS    db '%s (for regexp `%s',27h,')',0
.text:00402E7E                                         ; DATA XREF: sub_402ED0+168↓o
.text:00402E7E                                         ; sub_402ED0+232↓o
.text:00402E93                 align 10h
.text:00402EA0 asc_402EA0      db '[.?!][]"',27h,')}]*\($\|',9,'\|  \)[ ',9,0Ah
.text:00402EA0                                         ; DATA XREF: sub_402ED0+2A4↓o
.text:00402EA0                 db ']*',0
.text:00402EC0 asc_402EC0      db 0Ah,0                ; DATA XREF: sub_402ED0:loc_403184↓o
.text:00402EC2                 align 10h
.text:00402ED0
.text:00402ED0 ; =============== S U B R O U T I N E =======================================
.text:00402ED0
.text:00402ED0
.text:00402ED0 sub_402ED0      proc near               ; CODE XREF: sub_402010:loc_402700↑p
.text:00402ED0
.text:00402ED0 C               = dword ptr -2Ch
.text:00402ED0 Type            = dword ptr -28h
.text:00402ED0 Size            = dword ptr -24h
.text:00402ED0 var_20          = byte ptr -20h
.text:00402ED0 var_1C          = dword ptr -1Ch
.text:00402ED0
.text:00402ED0                 push    edi
.text:00402ED1                 push    esi
.text:00402ED2                 push    ebx
.text:00402ED3                 sub     esp, 20h
.text:00402ED6                 cmp     ds:byte_41B040, 0
.text:00402EDD                 jz      short loc_402F07
.text:00402EDF                 xor     edi, edi
.text:00402EE1                 jmp     short loc_402EF0
.text:00402EE1 ; ---------------------------------------------------------------------------
.text:00402EE3                 align 10h
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402ED0+11↑j
.text:00402EF0                                         ; sub_402ED0+35↓j
.text:00402EF0                 mov     [esp+2Ch+C], edi ; C
.text:00402EF3                 call    toupper
.text:00402EF8                 mov     ds:byte_41B0A0[edi], al
.text:00402EFE                 inc     edi
.text:00402EFF                 cmp     edi, 0FFh
.text:00402F05                 jle     short loc_402EF0
.text:00402F07
.text:00402F07 loc_402F07:                             ; CODE XREF: sub_402ED0+D↑j
.text:00402F07                 mov     esi, ds:dword_41B050
.text:00402F0D                 test    esi, esi
.text:00402F0F                 jz      loc_403162
.text:00402F15                 cmp     byte ptr [esi], 0
.text:00402F18                 jnz     short loc_402F24
.text:00402F1A                 xor     edx, edx
.text:00402F1C                 xor     esi, esi
.text:00402F1E                 mov     ds:dword_41B050, edx
.text:00402F24
.text:00402F24 loc_402F24:                             ; CODE XREF: sub_402ED0+48↑j
.text:00402F24                                         ; sub_402ED0+2AF↓j
.text:00402F24                 test    esi, esi
.text:00402F26                 jnz     loc_403098
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_402ED0+275↓j
.text:00402F2C                 mov     esi, ds:Str
.text:00402F32                 test    esi, esi
.text:00402F34                 jz      short loc_402F3F
.text:00402F36                 cmp     byte ptr [esi], 0
.text:00402F39                 jnz     loc_402FCE
.text:00402F3F
.text:00402F3F loc_402F3F:                             ; CODE XREF: sub_402ED0+64↑j
.text:00402F3F                 mov     ebx, ds:dword_41B070
.text:00402F45                 test    ebx, ebx
.text:00402F47                 jnz     short loc_402F81
.text:00402F49                 cmp     byte_41A010, 0
.text:00402F50                 jz      short loc_402F9B
.text:00402F52                 xor     edi, edi
.text:00402F54
.text:00402F54 loc_402F54:                             ; CODE XREF: sub_402ED0+AF↓j
.text:00402F54                 mov     esi, ds:__mb_cur_max
.text:00402F5A                 cmp     dword ptr [esi], 1
.text:00402F5D                 jz      short loc_402F88
.text:00402F5F                 mov     [esp+2Ch+Type], 103h ; Type
.text:00402F67                 mov     [esp+2Ch+C], edi ; C
.text:00402F6A                 call    _isctype
.text:00402F6F
.text:00402F6F loc_402F6F:                             ; CODE XREF: sub_402ED0+C9↓j
.text:00402F6F                 test    eax, eax
.text:00402F71                 setnz   ds:byte_41B1E0[edi]
.text:00402F78                 inc     edi
.text:00402F79                 cmp     edi, 0FFh
.text:00402F7F                 jle     short loc_402F54
.text:00402F81
.text:00402F81 loc_402F81:                             ; CODE XREF: sub_402ED0+77↑j
.text:00402F81                                         ; sub_402ED0+FC↓j ...
.text:00402F81                 add     esp, 20h
.text:00402F84                 pop     ebx
.text:00402F85                 pop     esi
.text:00402F86                 pop     edi
.text:00402F87                 retn
.text:00402F88 ; ---------------------------------------------------------------------------
.text:00402F88
.text:00402F88 loc_402F88:                             ; CODE XREF: sub_402ED0+8D↑j
.text:00402F88                 mov     ecx, ds:_pctype
.text:00402F8E                 mov     edx, [ecx]
.text:00402F90                 movzx   eax, word ptr [edx+edi*2]
.text:00402F94                 and     eax, 103h
.text:00402F99                 jmp     short loc_402F6F
.text:00402F9B ; ---------------------------------------------------------------------------
.text:00402F9B
.text:00402F9B loc_402F9B:                             ; CODE XREF: sub_402ED0+80↑j
.text:00402F9B                 mov     [esp+2Ch+Size], 100h ; Size
.text:00402FA3                 mov     [esp+2Ch+Type], 1 ; Val
.text:00402FAB                 mov     [esp+2Ch+C], offset byte_41B1E0 ; void *
.text:00402FB2                 call    memset
.text:00402FB7                 mov     ds:byte_41B200, 0
.text:00402FBE                 mov     ds:byte_41B1E9, 0
.text:00402FC5                 mov     ds:byte_41B1EA, 0
.text:00402FCC                 jmp     short loc_402F81
.text:00402FCE ; ---------------------------------------------------------------------------
.text:00402FCE
.text:00402FCE loc_402FCE:                             ; CODE XREF: sub_402ED0+69↑j
.text:00402FCE                 mov     [esp+2Ch+C], 20h ; ' ' ; size_t
.text:00402FD5                 call    sub_410100
.text:00402FDA                 cld
.text:00402FDB                 mov     ebx, eax
.text:00402FDD                 mov     ecx, 8
.text:00402FE2                 xor     eax, eax
.text:00402FE4                 mov     edi, ebx
.text:00402FE6                 xor     edx, edx
.text:00402FE8                 rep stosd
.text:00402FEA                 cmp     ds:byte_41B040, 0
.text:00402FF1                 mov     dword ptr [ebx], 0
.text:00402FF7                 mov     dword ptr [ebx+4], 0
.text:00402FFE                 setz    dl
.text:00403001                 dec     edx
.text:00403002                 and     edx, offset byte_41B0A0
.text:00403008                 mov     [ebx+14h], edx
.text:0040300B                 mov     [esp+2Ch+C], 100h ; size_t
.text:00403012                 call    sub_410100
.text:00403017                 mov     [ebx+10h], eax
.text:0040301A                 mov     [esp+2Ch+C], esi ; Str
.text:0040301D                 call    strlen
.text:00403022                 mov     [esp+2Ch+Type], eax
.text:00403026                 mov     [esp+2Ch+Size], ebx
.text:0040302A                 mov     [esp+2Ch+C], esi
.text:0040302D                 call    sub_409F80
.text:00403032                 test    eax, eax
.text:00403034                 mov     edi, eax
.text:00403036                 jz      short loc_403065
.text:00403038                 mov     [esp+2Ch+C], offset aSForRegexpS ; "%s (for regexp `%s')"
.text:0040303F                 call    ds:libintl_gettext
.text:00403045                 mov     [esp+2Ch+var_1C], esi
.text:00403049                 mov     dword ptr [esp+2Ch+var_20], edi ; char
.text:0040304D                 mov     [esp+2Ch+Type], 0 ; ErrorMessage
.text:00403055                 mov     [esp+2Ch+Size], eax ; char *
.text:00403059                 mov     [esp+2Ch+C], 1  ; Code
.text:00403060                 call    sub_4103E0
.text:00403065
.text:00403065 loc_403065:                             ; CODE XREF: sub_402ED0+166↑j
.text:00403065                 mov     [esp+2Ch+C], ebx
.text:00403068                 call    sub_409B30
.text:0040306D                 mov     eax, [ebx+8]
.text:00403070                 cmp     [ebx+4], eax
.text:00403073                 ja      short loc_403080
.text:00403075
.text:00403075 loc_403075:                             ; CODE XREF: sub_402ED0+1C6↓j
.text:00403075                 mov     ds:dword_41B1C0, ebx
.text:0040307B                 jmp     loc_402F81
.text:00403080 ; ---------------------------------------------------------------------------
.text:00403080
.text:00403080 loc_403080:                             ; CODE XREF: sub_402ED0+1A3↑j
.text:00403080                 mov     [esp+2Ch+Type], eax ; size_t
.text:00403084                 mov     ecx, [ebx]
.text:00403086                 mov     [esp+2Ch+C], ecx ; void *
.text:00403089                 call    sub_410190
.text:0040308E                 mov     [ebx], eax
.text:00403090                 mov     edi, [ebx+8]
.text:00403093                 mov     [ebx+4], edi
.text:00403096                 jmp     short loc_403075
.text:00403098 ; ---------------------------------------------------------------------------
.text:00403098
.text:00403098 loc_403098:                             ; CODE XREF: sub_402ED0+56↑j
.text:00403098                 mov     [esp+2Ch+C], 20h ; ' ' ; size_t
.text:0040309F                 call    sub_410100
.text:004030A4                 cld
.text:004030A5                 mov     ebx, eax
.text:004030A7                 mov     ecx, 8
.text:004030AC                 xor     eax, eax
.text:004030AE                 mov     edi, ebx
.text:004030B0                 xor     edx, edx
.text:004030B2                 rep stosd
.text:004030B4                 cmp     ds:byte_41B040, 0
.text:004030BB                 mov     dword ptr [ebx], 0
.text:004030C1                 mov     dword ptr [ebx+4], 0
.text:004030C8                 setz    dl
.text:004030CB                 dec     edx
.text:004030CC                 and     edx, offset byte_41B0A0
.text:004030D2                 mov     [ebx+14h], edx
.text:004030D5                 mov     [esp+2Ch+C], 100h ; size_t
.text:004030DC                 call    sub_410100
.text:004030E1                 mov     [ebx+10h], eax
.text:004030E4                 mov     [esp+2Ch+C], esi ; Str
.text:004030E7                 call    strlen
.text:004030EC                 mov     [esp+2Ch+Type], eax
.text:004030F0                 mov     [esp+2Ch+Size], ebx
.text:004030F4                 mov     [esp+2Ch+C], esi
.text:004030F7                 call    sub_409F80
.text:004030FC                 test    eax, eax
.text:004030FE                 mov     edi, eax
.text:00403100                 jz      short loc_40312F
.text:00403102                 mov     [esp+2Ch+C], offset aSForRegexpS ; "%s (for regexp `%s')"
.text:00403109                 call    ds:libintl_gettext
.text:0040310F                 mov     [esp+2Ch+var_1C], esi
.text:00403113                 mov     dword ptr [esp+2Ch+var_20], edi ; char
.text:00403117                 mov     [esp+2Ch+Type], 0 ; ErrorMessage
.text:0040311F                 mov     [esp+2Ch+Size], eax ; char *
.text:00403123                 mov     [esp+2Ch+C], 1  ; Code
.text:0040312A                 call    sub_4103E0
.text:0040312F
.text:0040312F loc_40312F:                             ; CODE XREF: sub_402ED0+230↑j
.text:0040312F                 mov     [esp+2Ch+C], ebx
.text:00403132                 call    sub_409B30
.text:00403137                 mov     eax, [ebx+8]
.text:0040313A                 cmp     [ebx+4], eax
.text:0040313D                 ja      short loc_40314A
.text:0040313F
.text:0040313F loc_40313F:                             ; CODE XREF: sub_402ED0+290↓j
.text:0040313F                 mov     ds:dword_41B1A0, ebx
.text:00403145                 jmp     loc_402F2C
.text:0040314A ; ---------------------------------------------------------------------------
.text:0040314A
.text:0040314A loc_40314A:                             ; CODE XREF: sub_402ED0+26D↑j
.text:0040314A                 mov     [esp+2Ch+Type], eax ; size_t
.text:0040314E                 mov     esi, [ebx]
.text:00403150                 mov     [esp+2Ch+C], esi ; void *
.text:00403153                 call    sub_410190
.text:00403158                 mov     [ebx], eax
.text:0040315A                 mov     ecx, [ebx+8]
.text:0040315D                 mov     [ebx+4], ecx
.text:00403160                 jmp     short loc_40313F
.text:00403162 ; ---------------------------------------------------------------------------
.text:00403162
.text:00403162 loc_403162:                             ; CODE XREF: sub_402ED0+3F↑j
.text:00403162                 cmp     ds:byte_41B010, 0
.text:00403169                 jnz     short loc_403184
.text:0040316B                 cmp     byte_41A010, 0
.text:00403172                 jz      short loc_403184
.text:00403174                 mov     esi, offset asc_402EA0 ; "[.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*"
.text:00403179
.text:00403179 loc_403179:                             ; CODE XREF: sub_402ED0+2B9↓j
.text:00403179                 mov     ds:dword_41B050, esi
.text:0040317F                 jmp     loc_402F24
.text:00403184 ; ---------------------------------------------------------------------------
.text:00403184
.text:00403184 loc_403184:                             ; CODE XREF: sub_402ED0+299↑j
.text:00403184                                         ; sub_402ED0+2A2↑j
.text:00403184                 mov     esi, offset asc_402EC0 ; "\n"
.text:00403189                 jmp     short loc_403179
.text:00403189 sub_402ED0      endp
.text:00403189
.text:00403189 ; ---------------------------------------------------------------------------
.text:0040318B                 align 10h
.text:00403190
.text:00403190 ; =============== S U B R O U T I N E =======================================
.text:00403190
.text:00403190
.text:00403190 ; int __cdecl sub_403190(char *FileName, int)
.text:00403190 sub_403190      proc near               ; CODE XREF: sub_402010+79B↑p
.text:00403190                                         ; sub_402010+824↑p ...
.text:00403190
.text:00403190 FileHandle      = dword ptr -0ACh
.text:00403190 DstBuf          = dword ptr -0A8h
.text:00403190 MaxCharCount    = dword ptr -0A4h
.text:00403190 var_A0          = byte ptr -0A0h
.text:00403190 var_91          = byte ptr -91h
.text:00403190 var_90          = dword ptr -90h
.text:00403190 var_8C          = dword ptr -8Ch
.text:00403190 var_5C          = dword ptr -5Ch
.text:00403190 var_58          = dword ptr -58h
.text:00403190 FileName        = dword ptr  4
.text:00403190 arg_4           = dword ptr  8
.text:00403190
.text:00403190                 push    ebp
.text:00403191                 push    edi
.text:00403192                 push    esi
.text:00403193                 push    ebx
.text:00403194                 sub     esp, 9Ch
.text:0040319A                 mov     eax, [esp+0ACh+FileName]
.text:004031A1                 mov     [esp+0ACh+var_91], 0
.text:004031A6                 test    eax, eax
.text:004031A8                 jz      short loc_4031D0
.text:004031AA                 mov     eax, [esp+0ACh+FileName]
.text:004031B1                 cmp     byte ptr [eax], 0
.text:004031B4                 jz      short loc_4031D0
.text:004031B6                 cld
.text:004031B7                 mov     edx, offset asc_401FF7 ; "-"
.text:004031BC                 mov     esi, eax
.text:004031BE                 mov     ecx, 2
.text:004031C3                 mov     edi, edx
.text:004031C5                 repe cmpsb
.text:004031C7                 jnz     short loc_4031D5
.text:004031C9                 lea     esi, [esi+0]
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_403190+18↑j
.text:004031D0                                         ; sub_403190+24↑j
.text:004031D0                 mov     [esp+0ACh+var_91], 1
.text:004031D5
.text:004031D5 loc_4031D5:                             ; CODE XREF: sub_403190+37↑j
.text:004031D5                 cmp     [esp+0ACh+var_91], 0
.text:004031DA                 mov     [esp+0ACh+var_90], 0
.text:004031E2                 jz      loc_4033CB
.text:004031E8
.text:004031E8 loc_4031E8:                             ; CODE XREF: sub_403190+258↓j
.text:004031E8                                         ; sub_403190+288↓j
.text:004031E8                 mov     eax, [esp+0ACh+var_90]
.text:004031EC                 lea     edi, [esp+0ACh+var_8C]
.text:004031F0                 mov     [esp+0ACh+DstBuf], edi ; int
.text:004031F4                 mov     [esp+0ACh+FileHandle], eax ; char *
.text:004031F7                 call    sub_410680
.text:004031FC                 test    eax, eax
.text:004031FE                 js      loc_40339C
.text:00403204
.text:00403204 loc_403204:                             ; CODE XREF: sub_403190+236↓j
.text:00403204                 mov     edx, [esp+0ACh+var_8C]
.text:00403208                 and     edx, 0F000h
.text:0040320E                 cmp     edx, 8000h
.text:00403214                 jz      loc_40331A
.text:0040321A                 mov     [esp+0ACh+FileHandle], 1000h ; size_t
.text:00403221                 xor     esi, esi
.text:00403223                 mov     ebx, 1000h
.text:00403228                 call    sub_410100
.text:0040322D                 mov     ebp, [esp+0ACh+arg_4]
.text:00403234
.text:00403234 loc_403234:                             ; CODE XREF: sub_403190+F9↓j
.text:00403234                 mov     [ebp+0], eax
.text:00403237                 mov     esi, esi
.text:00403239                 lea     edi, [edi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_403190+DB↓j
.text:00403240                 mov     eax, [esp+0ACh+arg_4]
.text:00403247                 mov     ebp, ebx
.text:00403249                 sub     ebp, esi
.text:0040324B                 mov     [esp+0ACh+MaxCharCount], ebp ; MaxCharCount
.text:0040324F                 mov     ecx, [esp+0ACh+var_90]
.text:00403253                 mov     edi, [eax]
.text:00403255                 mov     [esp+0ACh+FileHandle], ecx ; FileHandle
.text:00403258                 add     edi, esi
.text:0040325A                 mov     [esp+0ACh+DstBuf], edi ; DstBuf
.text:0040325E                 call    _read
.text:00403263                 test    eax, eax
.text:00403265                 jle     short loc_40328B
.text:00403267                 add     esi, eax
.text:00403269                 cmp     esi, ebx
.text:0040326B                 jnz     short loc_403240
.text:0040326D                 mov     ebp, [esp+0ACh+arg_4]
.text:00403274                 lea     ebx, [esi+1000h]
.text:0040327A                 mov     [esp+0ACh+DstBuf], ebx ; size_t
.text:0040327E                 mov     edx, [ebp+0]
.text:00403281                 mov     [esp+0ACh+FileHandle], edx ; void *
.text:00403284                 call    sub_410190
.text:00403289                 jmp     short loc_403234
.text:0040328B ; ---------------------------------------------------------------------------
.text:0040328B
.text:0040328B loc_40328B:                             ; CODE XREF: sub_403190+D5↑j
.text:0040328B                 test    eax, eax
.text:0040328D                 js      short loc_4032EB
.text:0040328F
.text:0040328F loc_40328F:                             ; CODE XREF: sub_403190+185↓j
.text:0040328F                 mov     edx, [esp+0ACh+arg_4]
.text:00403296                 mov     edi, [edx]
.text:00403298                 add     esi, edi
.text:0040329A                 mov     [edx+4], esi
.text:0040329D
.text:0040329D loc_40329D:                             ; CODE XREF: sub_403190+1DB↓j
.text:0040329D                 cmp     [esp+0ACh+var_91], 0
.text:004032A2                 jz      short loc_4032AF
.text:004032A4
.text:004032A4 loc_4032A4:                             ; CODE XREF: sub_403190+12D↓j
.text:004032A4                                         ; sub_403190+159↓j
.text:004032A4                 add     esp, 9Ch
.text:004032AA                 pop     ebx
.text:004032AB                 pop     esi
.text:004032AC                 pop     edi
.text:004032AD                 pop     ebp
.text:004032AE                 retn
.text:004032AF ; ---------------------------------------------------------------------------
.text:004032AF
.text:004032AF loc_4032AF:                             ; CODE XREF: sub_403190+112↑j
.text:004032AF                 mov     esi, [esp+0ACh+var_90]
.text:004032B3                 mov     [esp+0ACh+FileHandle], esi ; FileHandle
.text:004032B6                 call    _close
.text:004032BB                 test    eax, eax
.text:004032BD                 jz      short loc_4032A4
.text:004032BF                 call    _errno
.text:004032C4                 mov     [esp+0ACh+MaxCharCount], offset aS ; "%s"
.text:004032CC                 mov     ebx, [esp+0ACh+FileName]
.text:004032D3                 mov     dword ptr [esp+0ACh+var_A0], ebx ; char
.text:004032D7                 mov     ebp, [eax]
.text:004032D9                 mov     [esp+0ACh+FileHandle], 1 ; Code
.text:004032E0                 mov     [esp+0ACh+DstBuf], ebp ; ErrorMessage
.text:004032E4                 call    sub_4103E0
.text:004032E9                 jmp     short loc_4032A4
.text:004032EB ; ---------------------------------------------------------------------------
.text:004032EB
.text:004032EB loc_4032EB:                             ; CODE XREF: sub_403190+FD↑j
.text:004032EB                 call    _errno
.text:004032F0                 mov     [esp+0ACh+MaxCharCount], offset aS ; "%s"
.text:004032F8                 mov     ecx, [esp+0ACh+FileName]
.text:004032FF                 mov     dword ptr [esp+0ACh+var_A0], ecx ; char
.text:00403303                 mov     ebx, [eax]
.text:00403305                 mov     [esp+0ACh+FileHandle], 1 ; Code
.text:0040330C                 mov     [esp+0ACh+DstBuf], ebx ; ErrorMessage
.text:00403310                 call    sub_4103E0
.text:00403315                 jmp     loc_40328F
.text:0040331A ; ---------------------------------------------------------------------------
.text:0040331A
.text:0040331A loc_40331A:                             ; CODE XREF: sub_403190+84↑j
.text:0040331A                 mov     edi, [esp+0ACh+var_5C]
.text:0040331E                 mov     [esp+0ACh+FileHandle], edi ; size_t
.text:00403321                 call    sub_410100
.text:00403326                 mov     esi, [esp+0ACh+arg_4]
.text:0040332D                 mov     ebp, [esp+0ACh+var_5C]
.text:00403331                 mov     ebx, [esp+0ACh+var_90]
.text:00403335                 mov     [esi], eax
.text:00403337                 mov     [esp+0ACh+MaxCharCount], ebp ; MaxCharCount
.text:0040333B                 mov     [esp+0ACh+DstBuf], eax ; DstBuf
.text:0040333F                 mov     [esp+0ACh+FileHandle], ebx ; FileHandle
.text:00403342                 call    _read
.text:00403347                 mov     edi, [esp+0ACh+var_5C]
.text:0040334B                 xor     edx, edx
.text:0040334D                 mov     ebp, eax
.text:0040334F                 mov     ecx, [esp+0ACh+var_58]
.text:00403353                 mov     eax, edx
.text:00403355                 xor     edi, ebp
.text:00403357                 xor     eax, ecx
.text:00403359                 or      eax, edi
.text:0040335B                 jnz     short loc_403370
.text:0040335D
.text:0040335D loc_40335D:                             ; CODE XREF: sub_403190+20A↓j
.text:0040335D                 mov     eax, [esp+0ACh+arg_4]
.text:00403364                 mov     esi, [eax]
.text:00403366                 add     ebp, esi
.text:00403368                 mov     [eax+4], ebp
.text:0040336B                 jmp     loc_40329D
.text:00403370 ; ---------------------------------------------------------------------------
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_403190+1CB↑j
.text:00403370                 call    _errno
.text:00403375                 mov     [esp+0ACh+MaxCharCount], offset aS ; "%s"
.text:0040337D                 mov     ebx, [esp+0ACh+FileName]
.text:00403384                 mov     dword ptr [esp+0ACh+var_A0], ebx ; char
.text:00403388                 mov     ecx, [eax]
.text:0040338A                 mov     [esp+0ACh+FileHandle], 1 ; Code
.text:00403391                 mov     [esp+0ACh+DstBuf], ecx ; ErrorMessage
.text:00403395                 call    sub_4103E0
.text:0040339A                 jmp     short loc_40335D
.text:0040339C ; ---------------------------------------------------------------------------
.text:0040339C
.text:0040339C loc_40339C:                             ; CODE XREF: sub_403190+6E↑j
.text:0040339C                 call    _errno
.text:004033A1                 mov     [esp+0ACh+MaxCharCount], offset aS ; "%s"
.text:004033A9                 mov     ecx, [esp+0ACh+FileName]
.text:004033B0                 mov     dword ptr [esp+0ACh+var_A0], ecx ; char
.text:004033B4                 mov     ebp, [eax]
.text:004033B6                 mov     [esp+0ACh+FileHandle], 1 ; Code
.text:004033BD                 mov     [esp+0ACh+DstBuf], ebp ; ErrorMessage
.text:004033C1                 call    sub_4103E0
.text:004033C6                 jmp     loc_403204
.text:004033CB ; ---------------------------------------------------------------------------
.text:004033CB
.text:004033CB loc_4033CB:                             ; CODE XREF: sub_403190+52↑j
.text:004033CB                 mov     [esp+0ACh+DstBuf], 0 ; OpenFlag
.text:004033D3                 mov     ecx, [esp+0ACh+FileName]
.text:004033DA                 mov     [esp+0ACh+FileHandle], ecx ; FileName
.text:004033DD                 call    _open
.text:004033E2                 mov     [esp+0ACh+var_90], eax
.text:004033E6                 test    eax, eax
.text:004033E8                 jns     loc_4031E8
.text:004033EE                 call    _errno
.text:004033F3                 mov     [esp+0ACh+MaxCharCount], offset aS ; "%s"
.text:004033FB                 mov     esi, [esp+0ACh+FileName]
.text:00403402                 mov     dword ptr [esp+0ACh+var_A0], esi ; char
.text:00403406                 mov     ebx, [eax]
.text:00403408                 mov     [esp+0ACh+FileHandle], 1 ; Code
.text:0040340F                 mov     [esp+0ACh+DstBuf], ebx ; ErrorMessage
.text:00403413                 call    sub_4103E0
.text:00403418                 jmp     loc_4031E8
.text:00403418 sub_403190      endp
.text:00403418
.text:00403418 ; ---------------------------------------------------------------------------
.text:0040341D                 align 10h
.text:00403420
.text:00403420 ; =============== S U B R O U T I N E =======================================
.text:00403420
.text:00403420
.text:00403420 sub_403420      proc near               ; DATA XREF: sub_402010:loc_40275D↑o
.text:00403420
.text:00403420 var_1C          = dword ptr -1Ch
.text:00403420 var_18          = dword ptr -18h
.text:00403420 var_8           = dword ptr -8
.text:00403420 var_4           = dword ptr -4
.text:00403420 arg_0           = dword ptr  4
.text:00403420 arg_4           = dword ptr  8
.text:00403420
.text:00403420                 sub     esp, 1Ch
.text:00403423                 mov     [esp+1Ch+var_8], ebx
.text:00403427                 mov     ebx, [esp+1Ch+arg_0]
.text:0040342B                 mov     [esp+1Ch+var_4], esi
.text:0040342F                 mov     esi, [esp+1Ch+arg_4]
.text:00403433                 mov     [esp+1Ch+var_1C], ebx
.text:00403436                 mov     [esp+1Ch+var_18], esi
.text:0040343A                 call    sub_403EA0
.text:0040343F                 test    eax, eax
.text:00403441                 jnz     short loc_403449
.text:00403443                 mov     eax, [ebx]
.text:00403445                 mov     edx, [esi]
.text:00403447                 sub     eax, edx
.text:00403449
.text:00403449 loc_403449:                             ; CODE XREF: sub_403420+21↑j
.text:00403449                 mov     ebx, [esp+1Ch+var_8]
.text:0040344D                 mov     esi, [esp+1Ch+var_4]
.text:00403451                 add     esp, 1Ch
.text:00403454                 retn
.text:00403454 sub_403420      endp
.text:00403454
.text:00403454 ; ---------------------------------------------------------------------------
.text:00403455                 align 10h
.text:00403460
.text:00403460 ; =============== S U B R O U T I N E =======================================
.text:00403460
.text:00403460
.text:00403460 ; int __cdecl sub_403460(char *FileName, int)
.text:00403460 sub_403460      proc near               ; CODE XREF: sub_402010+7D5↑p
.text:00403460                                         ; sub_402010+7FD↑p
.text:00403460
.text:00403460 Block           = dword ptr -2Ch
.text:00403460 var_28          = dword ptr -28h
.text:00403460 var_24          = dword ptr -24h
.text:00403460 var_20          = dword ptr -20h
.text:00403460 var_1C          = dword ptr -1Ch
.text:00403460 var_18          = dword ptr -18h
.text:00403460 FileName        = dword ptr  4
.text:00403460 arg_4           = dword ptr  8
.text:00403460
.text:00403460                 push    ebp
.text:00403461                 push    edi
.text:00403462                 push    esi
.text:00403463                 push    ebx
.text:00403464                 sub     esp, 1Ch
.text:00403467                 mov     edx, [esp+2Ch+FileName]
.text:0040346B                 lea     ebx, [esp+2Ch+var_1C]
.text:0040346F                 mov     edi, [esp+2Ch+arg_4]
.text:00403473                 mov     ebp, ebx
.text:00403475                 mov     [esp+2Ch+Block], edx ; FileName
.text:00403478                 mov     [esp+2Ch+var_28], ebx ; int
.text:0040347C                 call    sub_403190
.text:00403481                 mov     dword ptr [edi], 0
.text:00403487                 mov     esi, [esp+2Ch+var_1C]
.text:0040348B                 mov     edx, ebx
.text:0040348D                 cmp     esi, [esp+2Ch+var_18]
.text:00403491                 mov     dword ptr [edi+4], 0
.text:00403498                 mov     dword ptr [edi+8], 0
.text:0040349F                 jnb     short loc_4034F8
.text:004034A1                 jmp     short loc_4034B0
.text:004034A1 ; ---------------------------------------------------------------------------
.text:004034A3                 align 10h
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_403460+41↑j
.text:004034B0                                         ; sub_403460+96↓j
.text:004034B0                 mov     eax, [edx+4]
.text:004034B3                 mov     ebx, esi
.text:004034B5                 cmp     esi, eax
.text:004034B7                 jnb     short loc_4034CA
.text:004034B9                 cmp     byte ptr [esi], 0Ah
.text:004034BC                 jz      short loc_4034CA
.text:004034BE                 mov     esi, esi
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403460+68↓j
.text:004034C0                 inc     esi
.text:004034C1                 cmp     esi, eax
.text:004034C3                 jnb     short loc_4034CA
.text:004034C5                 cmp     byte ptr [esi], 0Ah
.text:004034C8                 jnz     short loc_4034C0
.text:004034CA
.text:004034CA loc_4034CA:                             ; CODE XREF: sub_403460+57↑j
.text:004034CA                                         ; sub_403460+5C↑j ...
.text:004034CA                 cmp     esi, ebx
.text:004034CC                 jbe     short loc_4034EA
.text:004034CE                 mov     ecx, [edi+8]
.text:004034D1                 cmp     ecx, [edi+4]
.text:004034D4                 jz      short loc_403521
.text:004034D6
.text:004034D6 loc_4034D6:                             ; CODE XREF: sub_403460+E6↓j
.text:004034D6                 mov     eax, [edi]
.text:004034D8                 mov     edx, esi
.text:004034DA                 sub     edx, ebx
.text:004034DC                 mov     [eax+ecx*8], ebx
.text:004034DF                 lea     ebx, [ecx+1]
.text:004034E2                 mov     [eax+ecx*8+4], dx
.text:004034E7                 mov     [edi+8], ebx
.text:004034EA
.text:004034EA loc_4034EA:                             ; CODE XREF: sub_403460+6C↑j
.text:004034EA                 mov     eax, [ebp+4]
.text:004034ED                 cmp     esi, eax
.text:004034EF                 jnb     short loc_4034F2
.text:004034F1                 inc     esi
.text:004034F2
.text:004034F2 loc_4034F2:                             ; CODE XREF: sub_403460+8F↑j
.text:004034F2                 cmp     esi, eax
.text:004034F4                 mov     edx, ebp
.text:004034F6                 jb      short loc_4034B0
.text:004034F8
.text:004034F8 loc_4034F8:                             ; CODE XREF: sub_403460+3F↑j
.text:004034F8                 mov     [esp+2Ch+var_20], offset sub_403EA0 ; int
.text:00403500                 mov     [esp+2Ch+var_24], 8 ; size_t
.text:00403508                 mov     esi, [edi+8]
.text:0040350B                 mov     [esp+2Ch+var_28], esi ; void *
.text:0040350F                 mov     ecx, [edi]
.text:00403511                 mov     [esp+2Ch+Block], ecx ; Block
.text:00403514                 call    sub_413C00
.text:00403519                 add     esp, 1Ch
.text:0040351C                 pop     ebx
.text:0040351D                 pop     esi
.text:0040351E                 pop     edi
.text:0040351F                 pop     ebp
.text:00403520                 retn
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403521
.text:00403521 loc_403521:                             ; CODE XREF: sub_403460+74↑j
.text:00403521                 cmp     ecx, 0FFFFFFFh
.text:00403527                 ja      short loc_403548
.text:00403529                 lea     edx, [ecx+ecx+1]
.text:0040352D                 mov     [edi+4], edx
.text:00403530                 shl     edx, 3
.text:00403533                 mov     [esp+2Ch+var_28], edx ; size_t
.text:00403537                 mov     edx, [edi]
.text:00403539                 mov     [esp+2Ch+Block], edx ; void *
.text:0040353C                 call    sub_410190
.text:00403541                 mov     [edi], eax
.text:00403543                 mov     ecx, [edi+8]
.text:00403546                 jmp     short loc_4034D6
.text:00403548 ; ---------------------------------------------------------------------------
.text:00403548
.text:00403548 loc_403548:                             ; CODE XREF: sub_403460+C7↑j
.text:00403548                 call    sub_410080
.text:00403548 sub_403460      endp
.text:00403548
.text:00403548 ; ---------------------------------------------------------------------------
.text:0040354D                 align 10h
.text:00403550
.text:00403550 ; =============== S U B R O U T I N E =======================================
.text:00403550
.text:00403550
.text:00403550 sub_403550      proc near               ; CODE XREF: sub_402010+7A0↑p
.text:00403550
.text:00403550 C               = dword ptr -4Ch
.text:00403550 Type            = dword ptr -48h
.text:00403550 var_44          = dword ptr -44h
.text:00403550 var_40          = dword ptr -40h
.text:00403550 var_3C          = dword ptr -3Ch
.text:00403550 var_38          = dword ptr -38h
.text:00403550 var_34          = dword ptr -34h
.text:00403550 var_30          = dword ptr -30h
.text:00403550 var_2C          = dword ptr -2Ch
.text:00403550 var_28          = dword ptr -28h
.text:00403550 var_24          = dword ptr -24h
.text:00403550 var_20          = dword ptr -20h
.text:00403550 var_1C          = dword ptr -1Ch
.text:00403550 var_18          = dword ptr -18h
.text:00403550
.text:00403550                 push    ebp
.text:00403551                 push    edi
.text:00403552                 push    esi
.text:00403553                 push    ebx
.text:00403554                 sub     esp, 3Ch
.text:00403557                 mov     eax, ds:dword_41B360
.text:0040355C                 cmp     ds:byte_41B010, 0
.text:00403563                 mov     [esp+4Ch+var_28], 0
.text:0040356B                 mov     ebx, eax
.text:0040356D                 mov     [esp+4Ch+var_24], eax
.text:00403571                 jz      loc_403B6F
.text:00403577                 mov     edx, ds:dword_41B364
.text:0040357D
.text:0040357D loc_40357D:                             ; CODE XREF: sub_403550+5E↓j
.text:0040357D                 cmp     ebx, edx
.text:0040357F                 jnb     short loc_4035B0
.text:00403581                 movsx   ecx, byte ptr [ebx]
.text:00403584                 mov     esi, ds:__mb_cur_max
.text:0040358A                 cmp     dword ptr [esi], 1
.text:0040358D                 jz      loc_403B5B
.text:00403593                 mov     [esp+4Ch+Type], 8 ; Type
.text:0040359B                 mov     [esp+4Ch+C], ecx ; C
.text:0040359E                 call    _isctype
.text:004035A3                 mov     edx, ds:dword_41B364
.text:004035A9
.text:004035A9 loc_4035A9:                             ; CODE XREF: sub_403550+61A↓j
.text:004035A9                 test    eax, eax
.text:004035AB                 jnz     short loc_4035B0
.text:004035AD                 inc     ebx
.text:004035AE                 jmp     short loc_40357D
.text:004035B0 ; ---------------------------------------------------------------------------
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_403550+2F↑j
.text:004035B0                                         ; sub_403550+5B↑j
.text:004035B0                 mov     ecx, [esp+4Ch+var_24]
.text:004035B4                 mov     eax, ebx
.text:004035B6                 sub     eax, ecx
.text:004035B8                 mov     [esp+4Ch+var_28], eax
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_403550+9E↓j
.text:004035BC                 cmp     ebx, edx
.text:004035BE                 jnb     short loc_4035F0
.text:004035C0                 movsx   ecx, byte ptr [ebx]
.text:004035C3                 mov     ebp, ds:__mb_cur_max
.text:004035C9                 cmp     dword ptr [ebp+0], 1
.text:004035CD                 jz      loc_403B47
.text:004035D3                 mov     [esp+4Ch+Type], 8 ; Type
.text:004035DB                 mov     [esp+4Ch+C], ecx ; C
.text:004035DE                 call    _isctype
.text:004035E3                 mov     edx, ds:dword_41B364
.text:004035E9
.text:004035E9 loc_4035E9:                             ; CODE XREF: sub_403550+606↓j
.text:004035E9                 test    eax, eax
.text:004035EB                 jz      short loc_4035F0
.text:004035ED                 inc     ebx
.text:004035EE                 jmp     short loc_4035BC
.text:004035F0 ; ---------------------------------------------------------------------------
.text:004035F0
.text:004035F0 loc_4035F0:                             ; CODE XREF: sub_403550+6E↑j
.text:004035F0                                         ; sub_403550+9B↑j
.text:004035F0                 mov     eax, ds:dword_41B360
.text:004035F5
.text:004035F5 loc_4035F5:                             ; CODE XREF: sub_403550+625↓j
.text:004035F5                 mov     [esp+4Ch+var_20], eax
.text:004035F9                 mov     eax, edx
.text:004035FB                 cmp     [esp+4Ch+var_20], edx
.text:004035FF                 jnb     loc_403A85
.text:00403605
.text:00403605 loc_403605:                             ; CODE XREF: sub_403550+52F↓j
.text:00403605                 mov     ebp, ds:dword_41B050
.text:0040360B                 mov     ecx, [esp+4Ch+var_20]
.text:0040360F                 test    ebp, ebp
.text:00403611                 mov     [esp+4Ch+var_2C], ecx
.text:00403615                 jnz     loc_403AF9
.text:0040361B
.text:0040361B loc_40361B:                             ; CODE XREF: sub_403550+5E7↓j
.text:0040361B                                         ; sub_403550+5F2↓j
.text:0040361B                 mov     [esp+4Ch+var_34], edx
.text:0040361F                 mov     eax, [esp+4Ch+var_34]
.text:00403623                 mov     [esp+4Ch+var_30], eax
.text:00403627
.text:00403627 loc_403627:                             ; CODE XREF: sub_403550+110↓j
.text:00403627                 mov     ebp, [esp+4Ch+var_20]
.text:0040362B                 cmp     [esp+4Ch+var_30], ebp
.text:0040362F                 jbe     short loc_403662
.text:00403631                 mov     esi, ds:__mb_cur_max
.text:00403637                 mov     edi, [esp+4Ch+var_30]
.text:0040363B                 cmp     dword ptr [esi], 1
.text:0040363E                 movsx   edx, byte ptr [edi-1]
.text:00403642                 jz      loc_403AE4
.text:00403648                 mov     [esp+4Ch+Type], 8 ; Type
.text:00403650                 mov     [esp+4Ch+C], edx ; C
.text:00403653                 call    _isctype
.text:00403658
.text:00403658 loc_403658:                             ; CODE XREF: sub_403550+5A4↓j
.text:00403658                 test    eax, eax
.text:0040365A                 jz      short loc_403662
.text:0040365C                 dec     [esp+4Ch+var_30]
.text:00403660                 jmp     short loc_403627
.text:00403662 ; ---------------------------------------------------------------------------
.text:00403662
.text:00403662 loc_403662:                             ; CODE XREF: sub_403550+DF↑j
.text:00403662                                         ; sub_403550+10A↑j ...
.text:00403662                 mov     edx, ds:dword_41B1C0
.text:00403668                 test    edx, edx
.text:0040366A                 jnz     loc_403A8D
.text:00403670                 mov     edx, [esp+4Ch+var_20]
.text:00403674                 mov     eax, [esp+4Ch+var_30]
.text:00403678                 cmp     edx, eax
.text:0040367A                 jnb     short loc_4036B0
.text:0040367C                 movzx   ecx, byte ptr [edx]
.text:0040367F                 cmp     ds:byte_41B1E0[ecx], 0
.text:00403686                 jnz     short loc_4036B0
.text:00403688                 nop
.text:00403689                 lea     esi, [esi+0]
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_403550+151↓j
.text:00403690                 inc     edx
.text:00403691                 cmp     edx, [esp+4Ch+var_30]
.text:00403695                 jnb     short loc_4036B0
.text:00403697                 movzx   ebp, byte ptr [edx]
.text:0040369A                 cmp     ss:byte_41B1E0[ebp], 0
.text:004036A1                 jz      short loc_403690
.text:004036A3                 lea     esi, [esi+0]
.text:004036A9                 lea     edi, [edi+0]
.text:004036B0
.text:004036B0 loc_4036B0:                             ; CODE XREF: sub_403550+12A↑j
.text:004036B0                                         ; sub_403550+136↑j ...
.text:004036B0                 cmp     edx, [esp+4Ch+var_30]
.text:004036B4                 jz      loc_403A6C
.text:004036BA                 cmp     edx, [esp+4Ch+var_30]
.text:004036BE                 mov     ecx, edx
.text:004036C0                 jnb     short loc_4036F0
.text:004036C2                 movzx   esi, byte ptr [edx]
.text:004036C5                 cmp     ds:byte_41B1E0[esi], 0
.text:004036CC                 jz      short loc_4036F0
.text:004036CE                 mov     esi, esi
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_403550+191↓j
.text:004036D0                 inc     edx
.text:004036D1                 cmp     edx, [esp+4Ch+var_30]
.text:004036D5                 jnb     short loc_4036F0
.text:004036D7                 movzx   edi, byte ptr [edx]
.text:004036DA                 cmp     ds:byte_41B1E0[edi], 0
.text:004036E1                 jnz     short loc_4036D0
.text:004036E3                 lea     esi, [esi+0]
.text:004036E9                 lea     edi, [edi+0]
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_403550+170↑j
.text:004036F0                                         ; sub_403550+17C↑j ...
.text:004036F0                 mov     [esp+4Ch+var_20], ecx
.text:004036F4                 cmp     edx, ecx
.text:004036F6                 mov     eax, edx
.text:004036F8                 jz      loc_403A63
.text:004036FE                 mov     ebp, [esp+4Ch+var_20]
.text:00403702                 sub     eax, ebp
.text:00403704                 mov     word ptr [esp+4Ch+var_18], ax
.text:00403709                 cwde
.text:0040370A                 mov     [esp+4Ch+var_1C], ebp
.text:0040370E                 add     ebp, eax
.text:00403710                 cmp     eax, ds:dword_41B2E0
.text:00403716                 mov     [esp+4Ch+var_20], ebp
.text:0040371A                 jle     short loc_403721
.text:0040371C                 mov     ds:dword_41B2E0, eax
.text:00403721
.text:00403721 loc_403721:                             ; CODE XREF: sub_403550+1CA↑j
.text:00403721                 cmp     ds:byte_41B010, 0
.text:00403728                 jz      short loc_403746
.text:0040372A                 cmp     ebx, ecx
.text:0040372C                 mov     eax, ecx
.text:0040372E                 jnb     short loc_40373E
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_403550+1EC↓j
.text:00403730                 cmp     byte ptr [ebx], 0Ah
.text:00403733                 jz      loc_403A05
.text:00403739                 inc     ebx
.text:0040373A
.text:0040373A loc_40373A:                             ; CODE XREF: sub_403550+4FD↓j
.text:0040373A                 cmp     ebx, eax
.text:0040373C                 jb      short loc_403730
.text:0040373E
.text:0040373E loc_40373E:                             ; CODE XREF: sub_403550+1DE↑j
.text:0040373E                 cmp     ebx, eax
.text:00403740                 ja      loc_403662
.text:00403746
.text:00403746 loc_403746:                             ; CODE XREF: sub_403550+1D8↑j
.text:00403746                 mov     ecx, ds:dword_41B090
.text:0040374C                 test    ecx, ecx
.text:0040374E                 jz      short loc_403761
.text:00403750                 mov     edi, ds:dword_41B308
.text:00403756                 xor     ebp, ebp
.text:00403758                 dec     edi
.text:00403759                 cmp     ebp, edi
.text:0040375B                 jle     loc_4039C2
.text:00403761
.text:00403761 loc_403761:                             ; CODE XREF: sub_403550+1FE↑j
.text:00403761                                         ; sub_403550+4AB↓j
.text:00403761                 mov     esi, ds:dword_41B080
.text:00403767                 test    esi, esi
.text:00403769                 jz      short loc_4037BE
.text:0040376B                 mov     edi, ds:dword_41B318
.text:00403771                 xor     ebp, ebp
.text:00403773                 dec     edi
.text:00403774                 cmp     ebp, edi
.text:00403776                 jg      loc_403662
.text:0040377C                 lea     esi, [esi+0]
.text:00403780
.text:00403780 loc_403780:                             ; CODE XREF: sub_403550+267↓j
.text:00403780                 lea     eax, [edi+ebp]
.text:00403783                 mov     ecx, eax
.text:00403785                 shr     ecx, 1Fh
.text:00403788                 lea     esi, [ecx+eax]
.text:0040378B                 mov     ecx, ds:dword_41B310
.text:00403791                 sar     esi, 1
.text:00403793                 lea     edx, [ecx+esi*8]
.text:00403796                 lea     ecx, [esp+4Ch+var_1C]
.text:0040379A                 mov     [esp+4Ch+Type], edx
.text:0040379E                 mov     [esp+4Ch+C], ecx
.text:004037A1                 call    sub_403EA0
.text:004037A6                 test    eax, eax
.text:004037A8                 js      loc_4039BA
.text:004037AE                 test    eax, eax
.text:004037B0                 jle     short loc_4037BE
.text:004037B2                 lea     ebp, [esi+1]
.text:004037B5
.text:004037B5 loc_4037B5:                             ; CODE XREF: sub_403550+46D↓j
.text:004037B5                 cmp     ebp, edi
.text:004037B7                 jle     short loc_403780
.text:004037B9                 jmp     loc_403662
.text:004037BE ; ---------------------------------------------------------------------------
.text:004037BE
.text:004037BE loc_4037BE:                             ; CODE XREF: sub_403550+219↑j
.text:004037BE                                         ; sub_403550+260↑j
.text:004037BE                 mov     eax, ds:dword_41B390
.text:004037C3                 cmp     eax, ds:dword_41B380
.text:004037C9                 jz      loc_403981
.text:004037CF
.text:004037CF loc_4037CF:                             ; CODE XREF: sub_403550+465↓j
.text:004037CF                 mov     edx, ds:Block
.text:004037D5                 mov     esi, eax
.text:004037D7                 shl     esi, 4
.text:004037DA                 add     esi, edx
.text:004037DC                 cmp     ds:byte_41B000, 0
.text:004037E3                 jz      loc_403948
.text:004037E9                 mov     eax, [esp+4Ch+var_1C]
.text:004037ED                 cmp     ebx, eax
.text:004037EF                 jnb     short loc_40380E
.text:004037F1                 jmp     short loc_403800
.text:004037F1 ; ---------------------------------------------------------------------------
.text:004037F3                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_403550+2A1↑j
.text:00403800                                         ; sub_403550+2BC↓j
.text:00403800                 cmp     byte ptr [ebx], 0Ah
.text:00403803                 jz      loc_4038F0
.text:00403809                 inc     ebx
.text:0040380A
.text:0040380A loc_40380A:                             ; CODE XREF: sub_403550+3E1↓j
.text:0040380A                 cmp     ebx, eax
.text:0040380C                 jb      short loc_403800
.text:0040380E
.text:0040380E loc_40380E:                             ; CODE XREF: sub_403550+29F↑j
.text:0040380E                 mov     edx, ds:dword_41B330
.text:00403814                 mov     [esi+0Ch], edx
.text:00403817                 movzx   edx, ds:byte_41B010
.text:0040381E
.text:0040381E loc_40381E:                             ; CODE XREF: sub_403550+421↓j
.text:0040381E                                         ; sub_403550+42C↓j
.text:0040381E                 test    dl, dl
.text:00403820                 jz      short loc_40382C
.text:00403822                 mov     eax, [esp+4Ch+var_2C]
.text:00403826                 cmp     [esp+4Ch+var_24], eax
.text:0040382A                 jz      short loc_40385C
.text:0040382C
.text:0040382C loc_40382C:                             ; CODE XREF: sub_403550+2D0↑j
.text:0040382C                                         ; sub_403550+314↓j ...
.text:0040382C                 inc     ds:dword_41B390
.text:00403832                 mov     ebp, [esp+4Ch+var_1C]
.text:00403836                 mov     ecx, [esp+4Ch+var_18]
.text:0040383A                 mov     edx, [esp+4Ch+var_2C]
.text:0040383E                 mov     [esi], ebp
.text:00403840                 mov     ebp, [esp+4Ch+var_30]
.text:00403844                 mov     [esi+4], ecx
.text:00403847                 mov     edi, [esp+4Ch+var_1C]
.text:0040384B                 sub     edx, edi
.text:0040384D                 mov     [esi+8], dx
.text:00403851                 sub     ebp, edi
.text:00403853                 mov     [esi+0Ah], bp
.text:00403857                 jmp     loc_403662
.text:0040385C ; ---------------------------------------------------------------------------
.text:0040385C
.text:0040385C loc_40385C:                             ; CODE XREF: sub_403550+2DA↑j
.text:0040385C                                         ; sub_403550+340↓j
.text:0040385C                 mov     ebp, [esp+4Ch+var_30]
.text:00403860                 cmp     [esp+4Ch+var_2C], ebp
.text:00403864                 jnb     short loc_40382C
.text:00403866                 mov     edi, ds:__mb_cur_max
.text:0040386C                 mov     ecx, [esp+4Ch+var_2C]
.text:00403870                 cmp     dword ptr [edi], 1
.text:00403873                 movsx   edx, byte ptr [ecx]
.text:00403876                 jz      short loc_4038DE
.text:00403878                 mov     [esp+4Ch+Type], 8 ; Type
.text:00403880                 mov     [esp+4Ch+C], edx ; C
.text:00403883                 call    _isctype
.text:00403888
.text:00403888 loc_403888:                             ; CODE XREF: sub_403550+39E↓j
.text:00403888                 test    eax, eax
.text:0040388A                 jnz     short loc_403892
.text:0040388C                 inc     [esp+4Ch+var_2C]
.text:00403890                 jmp     short loc_40385C
.text:00403892 ; ---------------------------------------------------------------------------
.text:00403892
.text:00403892 loc_403892:                             ; CODE XREF: sub_403550+33A↑j
.text:00403892                                         ; sub_403550+37B↓j
.text:00403892                 mov     eax, [esp+4Ch+var_30]
.text:00403896                 cmp     [esp+4Ch+var_2C], eax
.text:0040389A                 jnb     short loc_40382C
.text:0040389C                 mov     ecx, ds:__mb_cur_max
.text:004038A2                 mov     ebp, [esp+4Ch+var_2C]
.text:004038A6                 cmp     dword ptr [ecx], 1
.text:004038A9                 movsx   edx, byte ptr [ebp+0]
.text:004038AD                 jz      short loc_4038CD
.text:004038AF                 mov     [esp+4Ch+Type], 8 ; Type
.text:004038B7                 mov     [esp+4Ch+C], edx ; C
.text:004038BA                 call    _isctype
.text:004038BF
.text:004038BF loc_4038BF:                             ; CODE XREF: sub_403550+38C↓j
.text:004038BF                 test    eax, eax
.text:004038C1                 jz      loc_40382C
.text:004038C7                 inc     [esp+4Ch+var_2C]
.text:004038CB                 jmp     short loc_403892
.text:004038CD ; ---------------------------------------------------------------------------
.text:004038CD
.text:004038CD loc_4038CD:                             ; CODE XREF: sub_403550+35D↑j
.text:004038CD                 mov     ecx, ds:_pctype
.text:004038D3                 mov     edi, [ecx]
.text:004038D5                 movzx   eax, word ptr [edi+edx*2]
.text:004038D9                 and     eax, 8
.text:004038DC                 jmp     short loc_4038BF
.text:004038DE ; ---------------------------------------------------------------------------
.text:004038DE
.text:004038DE loc_4038DE:                             ; CODE XREF: sub_403550+326↑j
.text:004038DE                 mov     edi, ds:_pctype
.text:004038E4                 mov     ebp, [edi]
.text:004038E6                 movzx   eax, word ptr [ebp+edx*2+0]
.text:004038EB                 and     eax, 8
.text:004038EE                 jmp     short loc_403888
.text:004038F0 ; ---------------------------------------------------------------------------
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403550+2B3↑j
.text:004038F0                 inc     ds:dword_41B330
.text:004038F6                 inc     ebx
.text:004038F7                 mov     [esp+4Ch+var_24], ebx
.text:004038FB                 nop
.text:004038FC                 lea     esi, [esi+0]
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_403550+3DB↓j
.text:00403900                 cmp     ebx, ds:dword_41B364
.text:00403906                 jnb     short loc_40392D
.text:00403908                 movsx   edx, byte ptr [ebx]
.text:0040390B                 mov     ecx, ds:__mb_cur_max
.text:00403911                 cmp     dword ptr [ecx], 1
.text:00403914                 jz      short loc_403936
.text:00403916                 mov     [esp+4Ch+Type], 8 ; Type
.text:0040391E                 mov     [esp+4Ch+C], edx ; C
.text:00403921                 call    _isctype
.text:00403926
.text:00403926 loc_403926:                             ; CODE XREF: sub_403550+3F6↓j
.text:00403926                 test    eax, eax
.text:00403928                 jnz     short loc_40392D
.text:0040392A                 inc     ebx
.text:0040392B                 jmp     short loc_403900
.text:0040392D ; ---------------------------------------------------------------------------
.text:0040392D
.text:0040392D loc_40392D:                             ; CODE XREF: sub_403550+3B6↑j
.text:0040392D                                         ; sub_403550+3D8↑j
.text:0040392D                 mov     eax, [esp+4Ch+var_1C]
.text:00403931                 jmp     loc_40380A
.text:00403936 ; ---------------------------------------------------------------------------
.text:00403936
.text:00403936 loc_403936:                             ; CODE XREF: sub_403550+3C4↑j
.text:00403936                 mov     ebp, ds:_pctype
.text:0040393C                 mov     edi, [ebp+0]
.text:0040393F                 movzx   eax, word ptr [edi+edx*2]
.text:00403943                 and     eax, 8
.text:00403946                 jmp     short loc_403926
.text:00403948 ; ---------------------------------------------------------------------------
.text:00403948
.text:00403948 loc_403948:                             ; CODE XREF: sub_403550+293↑j
.text:00403948                 movzx   edx, ds:byte_41B010
.text:0040394F                 test    dl, dl
.text:00403951                 jz      loc_40382C
.text:00403957                 mov     ecx, [esp+4Ch+var_1C]
.text:0040395B                 mov     edi, [esp+4Ch+var_24]
.text:0040395F                 sub     edi, ecx
.text:00403961                 mov     eax, edi
.text:00403963                 cwde
.text:00403964                 mov     [esi+0Ch], eax
.text:00403967                 mov     eax, [esp+4Ch+var_28]
.text:0040396B                 cmp     eax, ds:dword_41B2F0
.text:00403971                 jle     loc_40381E
.text:00403977                 mov     ds:dword_41B2F0, eax
.text:0040397C                 jmp     loc_40381E
.text:00403981 ; ---------------------------------------------------------------------------
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_403550+279↑j
.text:00403981                 cmp     eax, 7FFFFFFh
.text:00403986                 ja      loc_403B7A
.text:0040398C                 mov     edi, ds:Block
.text:00403992                 lea     ebp, [eax+eax+1]
.text:00403996                 mov     ds:dword_41B380, ebp
.text:0040399C                 shl     ebp, 4
.text:0040399F                 mov     [esp+4Ch+Type], ebp ; size_t
.text:004039A3                 mov     [esp+4Ch+C], edi ; void *
.text:004039A6                 call    sub_410190
.text:004039AB                 mov     ds:Block, eax
.text:004039B0                 mov     eax, ds:dword_41B390
.text:004039B5                 jmp     loc_4037CF
.text:004039BA ; ---------------------------------------------------------------------------
.text:004039BA
.text:004039BA loc_4039BA:                             ; CODE XREF: sub_403550+258↑j
.text:004039BA                 lea     edi, [esi-1]
.text:004039BD                 jmp     loc_4037B5
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C2
.text:004039C2 loc_4039C2:                             ; CODE XREF: sub_403550+20B↑j
.text:004039C2                                         ; sub_403550+4A9↓j
.text:004039C2                 lea     eax, [edi+ebp]
.text:004039C5                 mov     edx, ds:dword_41B300
.text:004039CB                 mov     ecx, eax
.text:004039CD                 shr     ecx, 1Fh
.text:004039D0                 lea     esi, [ecx+eax]
.text:004039D3                 sar     esi, 1
.text:004039D5                 lea     ecx, [edx+esi*8]
.text:004039D8                 lea     edx, [esp+4Ch+var_1C]
.text:004039DC                 mov     [esp+4Ch+Type], ecx
.text:004039E0                 mov     [esp+4Ch+C], edx
.text:004039E3                 call    sub_403EA0
.text:004039E8                 test    eax, eax
.text:004039EA                 js      short loc_403A00
.text:004039EC                 test    eax, eax
.text:004039EE                 jle     loc_403662
.text:004039F4                 lea     ebp, [esi+1]
.text:004039F7
.text:004039F7 loc_4039F7:                             ; CODE XREF: sub_403550+4B3↓j
.text:004039F7                 cmp     ebp, edi
.text:004039F9                 jle     short loc_4039C2
.text:004039FB                 jmp     loc_403761
.text:00403A00 ; ---------------------------------------------------------------------------
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_403550+49A↑j
.text:00403A00                 lea     edi, [esi-1]
.text:00403A03                 jmp     short loc_4039F7
.text:00403A05 ; ---------------------------------------------------------------------------
.text:00403A05
.text:00403A05 loc_403A05:                             ; CODE XREF: sub_403550+1E3↑j
.text:00403A05                 inc     ds:dword_41B330
.text:00403A0B                 inc     ebx
.text:00403A0C                 mov     [esp+4Ch+var_24], ebx
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_403550+4EB↓j
.text:00403A10                 cmp     ebx, ds:dword_41B364
.text:00403A16                 jnb     short loc_403A3D
.text:00403A18                 movsx   edx, byte ptr [ebx]
.text:00403A1B                 mov     ecx, ds:__mb_cur_max
.text:00403A21                 cmp     dword ptr [ecx], 1
.text:00403A24                 jz      short loc_403A52
.text:00403A26                 mov     [esp+4Ch+Type], 8 ; Type
.text:00403A2E                 mov     [esp+4Ch+C], edx ; C
.text:00403A31                 call    _isctype
.text:00403A36
.text:00403A36 loc_403A36:                             ; CODE XREF: sub_403550+511↓j
.text:00403A36                 test    eax, eax
.text:00403A38                 jnz     short loc_403A3D
.text:00403A3A                 inc     ebx
.text:00403A3B                 jmp     short loc_403A10
.text:00403A3D ; ---------------------------------------------------------------------------
.text:00403A3D
.text:00403A3D loc_403A3D:                             ; CODE XREF: sub_403550+4C6↑j
.text:00403A3D                                         ; sub_403550+4E8↑j
.text:00403A3D                 mov     ebp, [esp+4Ch+var_24]
.text:00403A41                 mov     edx, ebx
.text:00403A43                 mov     eax, [esp+4Ch+var_1C]
.text:00403A47                 sub     edx, ebp
.text:00403A49                 mov     [esp+4Ch+var_28], edx
.text:00403A4D                 jmp     loc_40373A
.text:00403A52 ; ---------------------------------------------------------------------------
.text:00403A52
.text:00403A52 loc_403A52:                             ; CODE XREF: sub_403550+4D4↑j
.text:00403A52                 mov     edi, ds:_pctype
.text:00403A58                 mov     esi, [edi]
.text:00403A5A                 movzx   eax, word ptr [esi+edx*2]
.text:00403A5E                 and     eax, 8
.text:00403A61                 jmp     short loc_403A36
.text:00403A63 ; ---------------------------------------------------------------------------
.text:00403A63
.text:00403A63 loc_403A63:                             ; CODE XREF: sub_403550+1A8↑j
.text:00403A63                 inc     [esp+4Ch+var_20]
.text:00403A67                 jmp     loc_403662
.text:00403A6C ; ---------------------------------------------------------------------------
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_403550+164↑j
.text:00403A6C                                         ; sub_403550+571↓j
.text:00403A6C                 mov     esi, [esp+4Ch+var_34]
.text:00403A70                 mov     eax, ds:dword_41B364
.text:00403A75                 mov     [esp+4Ch+var_20], esi
.text:00403A79                 mov     edx, eax
.text:00403A7B                 cmp     [esp+4Ch+var_20], eax
.text:00403A7F                 jb      loc_403605
.text:00403A85
.text:00403A85 loc_403A85:                             ; CODE XREF: sub_403550+AF↑j
.text:00403A85                 add     esp, 3Ch
.text:00403A88                 pop     ebx
.text:00403A89                 pop     esi
.text:00403A8A                 pop     edi
.text:00403A8B                 pop     ebp
.text:00403A8C                 retn
.text:00403A8D ; ---------------------------------------------------------------------------
.text:00403A8D
.text:00403A8D loc_403A8D:                             ; CODE XREF: sub_403550+11A↑j
.text:00403A8D                 mov     [esp+4Ch+var_38], offset unk_41B1D0
.text:00403A95                 mov     edi, [esp+4Ch+var_30]
.text:00403A99                 mov     eax, [esp+4Ch+var_20]
.text:00403A9D                 mov     [esp+4Ch+var_40], 0
.text:00403AA5                 mov     esi, [esp+4Ch+var_20]
.text:00403AA9                 mov     [esp+4Ch+C], edx
.text:00403AAC                 sub     edi, eax
.text:00403AAE                 mov     [esp+4Ch+var_3C], edi
.text:00403AB2                 mov     [esp+4Ch+var_44], edi
.text:00403AB6                 mov     [esp+4Ch+Type], esi
.text:00403ABA                 call    sub_409EC0
.text:00403ABF                 test    eax, eax
.text:00403AC1                 js      short loc_403A6C
.text:00403AC3                 mov     edi, ds:dword_41B1D4
.text:00403AC9                 mov     ecx, [esp+4Ch+var_20]
.text:00403ACD                 mov     esi, ds:dword_41B1D8
.text:00403AD3                 mov     edx, [edi]
.text:00403AD5                 mov     ebp, [esi]
.text:00403AD7                 add     ecx, edx
.text:00403AD9                 mov     edx, [esp+4Ch+var_20]
.text:00403ADD                 add     edx, ebp
.text:00403ADF                 jmp     loc_4036F0
.text:00403AE4 ; ---------------------------------------------------------------------------
.text:00403AE4
.text:00403AE4 loc_403AE4:                             ; CODE XREF: sub_403550+F2↑j
.text:00403AE4                 mov     ebp, ds:_pctype
.text:00403AEA                 mov     ecx, [ebp+0]
.text:00403AED                 movzx   eax, word ptr [ecx+edx*2]
.text:00403AF1                 and     eax, 8
.text:00403AF4                 jmp     loc_403658
.text:00403AF9 ; ---------------------------------------------------------------------------
.text:00403AF9
.text:00403AF9 loc_403AF9:                             ; CODE XREF: sub_403550+C5↑j
.text:00403AF9                 mov     [esp+4Ch+var_38], offset unk_41B1B0
.text:00403B01                 mov     edx, ds:dword_41B1A0
.text:00403B07                 sub     eax, ecx
.text:00403B09                 mov     [esp+4Ch+var_3C], eax
.text:00403B0D                 mov     [esp+4Ch+var_40], 0
.text:00403B15                 mov     [esp+4Ch+var_44], eax
.text:00403B19                 mov     [esp+4Ch+Type], ecx
.text:00403B1D                 mov     [esp+4Ch+C], edx
.text:00403B20                 call    sub_409EC0
.text:00403B25                 test    eax, eax
.text:00403B27                 js      short loc_403B3C
.text:00403B29                 mov     ecx, ds:dword_41B1B8
.text:00403B2F                 mov     edx, [esp+4Ch+var_20]
.text:00403B33                 mov     edi, [ecx]
.text:00403B35                 add     edx, edi
.text:00403B37                 jmp     loc_40361B
.text:00403B3C ; ---------------------------------------------------------------------------
.text:00403B3C
.text:00403B3C loc_403B3C:                             ; CODE XREF: sub_403550+5D7↑j
.text:00403B3C                 mov     edx, ds:dword_41B364
.text:00403B42                 jmp     loc_40361B
.text:00403B47 ; ---------------------------------------------------------------------------
.text:00403B47
.text:00403B47 loc_403B47:                             ; CODE XREF: sub_403550+7D↑j
.text:00403B47                 mov     edi, ds:_pctype
.text:00403B4D                 mov     esi, [edi]
.text:00403B4F                 movzx   eax, word ptr [esi+ecx*2]
.text:00403B53                 and     eax, 8
.text:00403B56                 jmp     loc_4035E9
.text:00403B5B ; ---------------------------------------------------------------------------
.text:00403B5B
.text:00403B5B loc_403B5B:                             ; CODE XREF: sub_403550+3D↑j
.text:00403B5B                 mov     edi, ds:_pctype
.text:00403B61                 mov     esi, [edi]
.text:00403B63                 movzx   eax, word ptr [esi+ecx*2]
.text:00403B67                 and     eax, 8
.text:00403B6A                 jmp     loc_4035A9
.text:00403B6F ; ---------------------------------------------------------------------------
.text:00403B6F
.text:00403B6F loc_403B6F:                             ; CODE XREF: sub_403550+21↑j
.text:00403B6F                 mov     edx, ds:dword_41B364
.text:00403B75                 jmp     loc_4035F5
.text:00403B7A ; ---------------------------------------------------------------------------
.text:00403B7A
.text:00403B7A loc_403B7A:                             ; CODE XREF: sub_403550+436↑j
.text:00403B7A                 call    sub_410080
.text:00403B7A sub_403550      endp
.text:00403B7A
.text:00403B7F
.text:00403B7F ; =============== S U B R O U T I N E =======================================
.text:00403B7F
.text:00403B7F
.text:00403B7F sub_403B7F      proc near               ; DATA XREF: sub_403B90+46↓o
.text:00403B7F                                         ; sub_403B90:loc_403D63↓r
.text:00403B7F                 and     eax, 25240064h
.text:00403B84                 and     ebx, es:[edi+7Bh]
.text:00403B88                 jge     short loc_403BE6
.text:00403B8A                 add     [eax+26748Dh], dl
.text:00403B8A sub_403B7F      endp
.text:00403B8A
.text:00403B90
.text:00403B90 ; =============== S U B R O U T I N E =======================================
.text:00403B90
.text:00403B90
.text:00403B90 sub_403B90      proc near               ; CODE XREF: sub_402010+775↑p
.text:00403B90
.text:00403B90 Buffer          = dword ptr -2Ch
.text:00403B90 Format          = dword ptr -28h
.text:00403B90 var_24          = dword ptr -24h
.text:00403B90 var_1C          = byte ptr -1Ch
.text:00403B90
.text:00403B90                 push    edi
.text:00403B91                 push    esi
.text:00403B92                 push    ebx
.text:00403B93                 sub     esp, 20h
.text:00403B96                 cmp     ds:byte_41B000, 0
.text:00403B9D                 jz      loc_403C66
.text:00403BA3                 xor     esi, esi
.text:00403BA5                 xor     eax, eax
.text:00403BA7                 cmp     esi, ds:dword_41B320
.text:00403BAD                 mov     ds:dword_41B2F0, eax
.text:00403BB2                 jge     loc_403C48
.text:00403BB8                 lea     edi, [esp+2Ch+var_1C]
.text:00403BBC
.text:00403BBC loc_403BBC:                             ; CODE XREF: sub_403B90+B2↓j
.text:00403BBC                 mov     edx, ds:dword_41B350
.text:00403BC2                 mov     eax, [edx+esi*4]
.text:00403BC5                 inc     eax
.text:00403BC6                 test    esi, esi
.text:00403BC8                 jle     short loc_403BD0
.text:00403BCA                 mov     ebx, [edx+esi*4-4]
.text:00403BCE                 sub     eax, ebx
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403B90+38↑j
.text:00403BD0                 mov     [esp+2Ch+var_24], eax
.text:00403BD4                 mov     ebx, edi
.text:00403BD6                 mov     [esp+2Ch+Format], offset sub_403B7F ; Format
.text:00403BDE                 mov     [esp+2Ch+Buffer], edi ; Buffer
.text:00403BE1                 call    sprintf
.text:00403BE6
.text:00403BE6 loc_403BE6:                             ; CODE XREF: sub_403B7F+9↑j
.text:00403BE6                 lea     esi, [esi+0]
.text:00403BE9                 lea     edi, [edi+0]
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403B90+75↓j
.text:00403BF0                 mov     ecx, [ebx]
.text:00403BF2                 add     ebx, 4
.text:00403BF5                 lea     edx, [ecx-1010101h]
.text:00403BFB                 not     ecx
.text:00403BFD                 and     edx, ecx
.text:00403BFF                 and     edx, 80808080h
.text:00403C05                 jz      short loc_403BF0
.text:00403C07                 test    edx, 8080h
.text:00403C0D                 jnz     short loc_403C15
.text:00403C0F                 shr     edx, 10h
.text:00403C12                 add     ebx, 2
.text:00403C15
.text:00403C15 loc_403C15:                             ; CODE XREF: sub_403B90+7D↑j
.text:00403C15                 add     dl, dl
.text:00403C17                 mov     edx, ds:dword_41B340
.text:00403C1D                 sbb     ebx, 3
.text:00403C20                 sub     ebx, edi
.text:00403C22                 mov     eax, [edx+esi*4]
.text:00403C25                 test    eax, eax
.text:00403C27                 jnz     loc_403DFC
.text:00403C2D
.text:00403C2D loc_403C2D:                             ; CODE XREF: sub_403B90+276↓j
.text:00403C2D                 cmp     ebx, ds:dword_41B2F0
.text:00403C33                 jle     short loc_403C3B
.text:00403C35                 mov     ds:dword_41B2F0, ebx
.text:00403C3B
.text:00403C3B loc_403C3B:                             ; CODE XREF: sub_403B90+A3↑j
.text:00403C3B                 inc     esi
.text:00403C3C                 cmp     esi, ds:dword_41B320
.text:00403C42                 jl      loc_403BBC
.text:00403C48
.text:00403C48 loc_403C48:                             ; CODE XREF: sub_403B90+22↑j
.text:00403C48                 mov     esi, ds:dword_41B2F0
.text:00403C4E                 lea     eax, [esi+1]
.text:00403C51                 add     esi, 2
.text:00403C54                 mov     ds:dword_41B2F0, eax
.text:00403C59                 mov     [esp+2Ch+Buffer], esi ; size_t
.text:00403C5C                 call    sub_410100
.text:00403C61                 mov     ds:Buffer, eax
.text:00403C66
.text:00403C66 loc_403C66:                             ; CODE XREF: sub_403B90+D↑j
.text:00403C66                 xor     edx, edx
.text:00403C68                 cmp     ds:byte_41B010, 0
.text:00403C6F                 jnz     short loc_403C7A
.text:00403C71                 cmp     ds:byte_41B000, 0
.text:00403C78                 jz      short loc_403C7F
.text:00403C7A
.text:00403C7A loc_403C7A:                             ; CODE XREF: sub_403B90+DF↑j
.text:00403C7A                 mov     edx, 1
.text:00403C7F
.text:00403C7F loc_403C7F:                             ; CODE XREF: sub_403B90+E8↑j
.text:00403C7F                 xor     ebx, ebx
.text:00403C81                 cmp     ds:byte_41B020, 0
.text:00403C88                 setz    bl
.text:00403C8B                 test    ebx, edx
.text:00403C8D                 jz      loc_403DEB
.text:00403C93                 mov     ecx, dword_41A018
.text:00403C99                 mov     edi, ds:dword_41B2F0
.text:00403C9F                 mov     edx, dword_41A014
.text:00403CA5                 add     edi, ecx
.text:00403CA7                 sub     edx, edi
.text:00403CA9                 mov     dword_41A014, edx
.text:00403CAF
.text:00403CAF loc_403CAF:                             ; CODE XREF: sub_403B90+267↓j
.text:00403CAF                 mov     edi, edx
.text:00403CB1                 mov     eax, off_41A01C
.text:00403CB6                 shr     edi, 1Fh
.text:00403CB9                 lea     esi, [edi+edx]
.text:00403CBC                 sar     esi, 1
.text:00403CBE                 mov     ebx, esi
.text:00403CC0                 mov     ds:dword_41B4A0, esi
.text:00403CC6                 sub     ebx, ecx
.text:00403CC8                 test    eax, eax
.text:00403CCA                 mov     ds:dword_41B4B0, ebx
.text:00403CD0                 mov     ds:dword_41B4C0, esi
.text:00403CD6                 jz      short loc_403CE1
.text:00403CD8                 cmp     byte ptr [eax], 0
.text:00403CDB                 jnz     loc_403DD9
.text:00403CE1
.text:00403CE1 loc_403CE1:                             ; CODE XREF: sub_403B90+146↑j
.text:00403CE1                 xor     ecx, ecx
.text:00403CE3                 mov     off_41A01C, ecx
.text:00403CE9
.text:00403CE9 loc_403CE9:                             ; CODE XREF: sub_403B90+256↓j
.text:00403CE9                 cmp     byte_41A010, 0
.text:00403CF0                 jz      loc_403DC4
.text:00403CF6                 mov     edx, ds:dword_41B4D0
.text:00403CFC                 add     edx, edx
.text:00403CFE                 sub     ds:dword_41B4B0, edx
.text:00403D04                 sub     ds:dword_41B4C0, edx
.text:00403D0A
.text:00403D0A loc_403D0A:                             ; CODE XREF: sub_403B90+244↓j
.text:00403D0A                 xor     ebx, ebx
.text:00403D0C                 lea     esi, [esi+0]
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403B90+1AF↓j
.text:00403D10                 mov     edi, ds:__mb_cur_max
.text:00403D16                 cmp     dword ptr [edi], 1
.text:00403D19                 jz      loc_403DB0
.text:00403D1F                 mov     [esp+2Ch+Format], 8 ; Type
.text:00403D27                 mov     [esp+2Ch+Buffer], ebx ; C
.text:00403D2A                 call    _isctype
.text:00403D2F
.text:00403D2F loc_403D2F:                             ; CODE XREF: sub_403B90+22F↓j
.text:00403D2F                 test    eax, eax
.text:00403D31                 setnz   ds:byte_41B3A0[ebx]
.text:00403D38                 inc     ebx
.text:00403D39                 cmp     ebx, 0FFh
.text:00403D3F                 jle     short loc_403D10
.text:00403D41                 mov     ds:byte_41B3AC, 1
.text:00403D48                 mov     eax, ds:dword_41B030
.text:00403D4D                 cmp     eax, 2
.text:00403D50                 jz      short loc_403DA6
.text:00403D52                 cmp     eax, 2
.text:00403D55                 jb      short loc_403D5C
.text:00403D57                 cmp     eax, 3
.text:00403D5A                 jz      short loc_403D63
.text:00403D5C
.text:00403D5C loc_403D5C:                             ; CODE XREF: sub_403B90+1C5↑j
.text:00403D5C                                         ; sub_403B90+214↓j ...
.text:00403D5C                 add     esp, 20h
.text:00403D5F                 pop     ebx
.text:00403D60                 pop     esi
.text:00403D61                 pop     edi
.text:00403D62                 retn
.text:00403D63 ; ---------------------------------------------------------------------------
.text:00403D63
.text:00403D63 loc_403D63:                             ; CODE XREF: sub_403B90+1CA↑j
.text:00403D63                 movzx   eax, byte ptr ds:sub_403B7F+3
.text:00403D6A                 mov     edx, 403B82h
.text:00403D6F                 test    al, al
.text:00403D71                 jz      short loc_403D85
.text:00403D73
.text:00403D73 loc_403D73:                             ; CODE XREF: sub_403B90+1F3↓j
.text:00403D73                 movzx   ebx, al
.text:00403D76                 inc     edx
.text:00403D77                 mov     ds:byte_41B3A0[ebx], 1
.text:00403D7E                 movzx   eax, byte ptr [edx]
.text:00403D81                 test    al, al
.text:00403D83                 jnz     short loc_403D73
.text:00403D85
.text:00403D85 loc_403D85:                             ; CODE XREF: sub_403B90+1E1↑j
.text:00403D85                 mov     ebx, 80h ; '€'
.text:00403D8A
.text:00403D8A loc_403D8A:                             ; CODE XREF: sub_403B90+212↓j
.text:00403D8A                 movzx   esi, bl
.text:00403D8D                 cmp     ds:byte_40F1D0[esi], 0
.text:00403D94                 setnz   ds:byte_41B3A0[ebx]
.text:00403D9B                 inc     ebx
.text:00403D9C                 cmp     ebx, 0FFh
.text:00403DA2                 jle     short loc_403D8A
.text:00403DA4                 jmp     short loc_403D5C
.text:00403DA6 ; ---------------------------------------------------------------------------
.text:00403DA6
.text:00403DA6 loc_403DA6:                             ; CODE XREF: sub_403B90+1C0↑j
.text:00403DA6                 mov     ds:byte_41B3C2, 1
.text:00403DAD                 jmp     short loc_403D5C
.text:00403DAD ; ---------------------------------------------------------------------------
.text:00403DAF                 align 10h
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403B90+189↑j
.text:00403DB0                 mov     edx, ds:_pctype
.text:00403DB6                 mov     ecx, [edx]
.text:00403DB8                 movzx   eax, word ptr [ecx+ebx*2]
.text:00403DBC                 and     eax, 8
.text:00403DBF                 jmp     loc_403D2F
.text:00403DC4 ; ---------------------------------------------------------------------------
.text:00403DC4
.text:00403DC4 loc_403DC4:                             ; CODE XREF: sub_403B90+160↑j
.text:00403DC4                 mov     esi, ds:dword_41B4D0
.text:00403DCA                 add     esi, esi
.text:00403DCC                 not     esi
.text:00403DCE                 add     ds:dword_41B4C0, esi
.text:00403DD4                 jmp     loc_403D0A
.text:00403DD9 ; ---------------------------------------------------------------------------
.text:00403DD9
.text:00403DD9 loc_403DD9:                             ; CODE XREF: sub_403B90+14B↑j
.text:00403DD9                 mov     [esp+2Ch+Buffer], eax ; Str
.text:00403DDC                 call    strlen
.text:00403DE1                 mov     ds:dword_41B4D0, eax
.text:00403DE6                 jmp     loc_403CE9
.text:00403DEB ; ---------------------------------------------------------------------------
.text:00403DEB
.text:00403DEB loc_403DEB:                             ; CODE XREF: sub_403B90+FD↑j
.text:00403DEB                 mov     ecx, dword_41A018
.text:00403DF1                 mov     edx, dword_41A014
.text:00403DF7                 jmp     loc_403CAF
.text:00403DFC ; ---------------------------------------------------------------------------
.text:00403DFC
.text:00403DFC loc_403DFC:                             ; CODE XREF: sub_403B90+97↑j
.text:00403DFC                 mov     [esp+2Ch+Buffer], eax ; Str
.text:00403DFF                 call    strlen
.text:00403E04                 add     ebx, eax
.text:00403E06                 jmp     loc_403C2D
.text:00403E06 sub_403B90      endp
.text:00403E06
.text:00403E06 ; ---------------------------------------------------------------------------
.text:00403E0B                 align 10h
.text:00403E10
.text:00403E10 ; =============== S U B R O U T I N E =======================================
.text:00403E10
.text:00403E10
.text:00403E10 sub_403E10      proc near               ; CODE XREF: sub_402010+77A↑p
.text:00403E10
.text:00403E10 var_C           = dword ptr -0Ch
.text:00403E10
.text:00403E10                 push    esi
.text:00403E11                 xor     edx, edx
.text:00403E13                 xor     esi, esi
.text:00403E15                 push    ebx
.text:00403E16                 xor     ecx, ecx
.text:00403E18                 sub     esp, 4
.text:00403E1B                 mov     ds:dword_41B4E0, edx
.text:00403E21                 xor     ebx, ebx
.text:00403E23                 xor     edx, edx
.text:00403E25                 mov     ds:dword_41B4E4, esi
.text:00403E2B                 xor     esi, esi
.text:00403E2D                 mov     ds:dword_41B544, edx
.text:00403E33                 xor     edx, edx
.text:00403E35                 cmp     esi, ds:dword_41B390
.text:00403E3B                 mov     ds:dword_41B4F0, ebx
.text:00403E41                 mov     ebx, ds:Block
.text:00403E47                 mov     ds:dword_41B540, ecx
.text:00403E4D                 mov     ds:dword_41B550, edx
.text:00403E53                 jb      short loc_403E60
.text:00403E55
.text:00403E55 loc_403E55:                             ; CODE XREF: sub_403E10+78↓j
.text:00403E55                 pop     esi
.text:00403E56                 pop     ebx
.text:00403E57                 pop     esi
.text:00403E58                 retn
.text:00403E58 ; ---------------------------------------------------------------------------
.text:00403E59                 align 10h
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403E10+43↑j
.text:00403E60                                         ; sub_403E10+76↓j
.text:00403E60                 mov     [esp+0Ch+var_C], ebx
.text:00403E63                 call    sub_403F40
.text:00403E68                 mov     eax, ds:dword_41B030
.text:00403E6D                 cmp     eax, 2
.text:00403E70                 jz      short loc_403E98
.text:00403E72                 cmp     eax, 2
.text:00403E75                 jb      short loc_403E91
.text:00403E77                 cmp     eax, 3
.text:00403E7A                 jz      short loc_403E8A
.text:00403E7C
.text:00403E7C loc_403E7C:                             ; CODE XREF: sub_403E10+7F↓j
.text:00403E7C                                         ; sub_403E10+86↓j ...
.text:00403E7C                 inc     esi
.text:00403E7D                 add     ebx, 10h
.text:00403E80                 cmp     esi, ds:dword_41B390
.text:00403E86                 jb      short loc_403E60
.text:00403E88                 jmp     short loc_403E55
.text:00403E8A ; ---------------------------------------------------------------------------
.text:00403E8A
.text:00403E8A loc_403E8A:                             ; CODE XREF: sub_403E10+6A↑j
.text:00403E8A                 call    sub_404C40
.text:00403E8F                 jmp     short loc_403E7C
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403E10+65↑j
.text:00403E91                 call    sub_404FA0
.text:00403E96                 jmp     short loc_403E7C
.text:00403E98 ; ---------------------------------------------------------------------------
.text:00403E98
.text:00403E98 loc_403E98:                             ; CODE XREF: sub_403E10+60↑j
.text:00403E98                 call    sub_4048A0
.text:00403E9D                 jmp     short loc_403E7C
.text:00403E9D sub_403E10      endp
.text:00403E9D
.text:00403E9D ; ---------------------------------------------------------------------------
.text:00403E9F                 align 10h
.text:00403EA0
.text:00403EA0 ; =============== S U B R O U T I N E =======================================
.text:00403EA0
.text:00403EA0
.text:00403EA0 sub_403EA0      proc near               ; CODE XREF: sub_403420+1A↑p
.text:00403EA0                                         ; sub_403550+251↑p ...
.text:00403EA0
.text:00403EA0 var_12          = word ptr -12h
.text:00403EA0 arg_0           = dword ptr  4
.text:00403EA0 arg_4           = dword ptr  8
.text:00403EA0
.text:00403EA0                 push    ebp
.text:00403EA1                 push    edi
.text:00403EA2                 push    esi
.text:00403EA3                 push    ebx
.text:00403EA4                 sub     esp, 4
.text:00403EA7                 mov     edx, [esp+14h+arg_0]
.text:00403EAB                 mov     ebx, [esp+14h+arg_4]
.text:00403EAF                 movzx   ecx, word ptr [edx+4]
.text:00403EB3                 movzx   ebp, word ptr [ebx+4]
.text:00403EB7                 mov     [esp+14h+var_12], cx
.text:00403EBC                 cmp     bp, cx
.text:00403EBF                 mov     eax, ebp
.text:00403EC1                 jle     short loc_403EC5
.text:00403EC3                 mov     eax, ecx
.text:00403EC5
.text:00403EC5 loc_403EC5:                             ; CODE XREF: sub_403EA0+21↑j
.text:00403EC5                 cmp     ds:byte_41B040, 0
.text:00403ECC                 movsx   edi, ax
.text:00403ECF                 jz      short loc_403F12
.text:00403ED1                 xor     ecx, ecx
.text:00403ED3                 cmp     ecx, edi
.text:00403ED5                 jge     short loc_403F00
.text:00403ED7                 mov     esi, [edx]
.text:00403ED9                 mov     ebx, [ebx]
.text:00403EDB                 nop
.text:00403EDC                 lea     esi, [esi+0]
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: sub_403EA0+5D↓j
.text:00403EE0                 movzx   eax, byte ptr [ecx+esi]
.text:00403EE4                 movzx   edx, ds:byte_41B0A0[eax]
.text:00403EEB                 movzx   eax, byte ptr [ecx+ebx]
.text:00403EEF                 movzx   eax, ds:byte_41B0A0[eax]
.text:00403EF6                 sub     edx, eax
.text:00403EF8                 jnz     short loc_403F0A
.text:00403EFA                 inc     ecx
.text:00403EFB                 cmp     ecx, edi
.text:00403EFD                 jl      short loc_403EE0
.text:00403EFF                 nop
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403EA0+35↑j
.text:00403F00                                         ; sub_403EA0+76↓j ...
.text:00403F00                 movsx   edx, [esp+14h+var_12]
.text:00403F05                 movsx   ecx, bp
.text:00403F08                 sub     edx, ecx
.text:00403F0A
.text:00403F0A loc_403F0A:                             ; CODE XREF: sub_403EA0+58↑j
.text:00403F0A                                         ; sub_403EA0+8A↓j
.text:00403F0A                 mov     eax, edx
.text:00403F0C                 pop     edx
.text:00403F0D                 pop     ebx
.text:00403F0E                 pop     esi
.text:00403F0F                 pop     edi
.text:00403F10                 pop     ebp
.text:00403F11                 retn
.text:00403F12 ; ---------------------------------------------------------------------------
.text:00403F12
.text:00403F12 loc_403F12:                             ; CODE XREF: sub_403EA0+2F↑j
.text:00403F12                 xor     ecx, ecx
.text:00403F14                 cmp     ecx, edi
.text:00403F16                 jge     short loc_403F00
.text:00403F18                 mov     esi, [edx]
.text:00403F1A                 mov     ebx, [ebx]
.text:00403F1C                 lea     esi, [esi+0]
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403EA0+8F↓j
.text:00403F20                 movzx   edx, byte ptr [ecx+esi]
.text:00403F24                 movzx   eax, byte ptr [ecx+ebx]
.text:00403F28                 sub     edx, eax
.text:00403F2A                 jnz     short loc_403F0A
.text:00403F2C                 inc     ecx
.text:00403F2D                 cmp     ecx, edi
.text:00403F2F                 jl      short loc_403F20
.text:00403F31                 jmp     short loc_403F00
.text:00403F31 sub_403EA0      endp
.text:00403F31
.text:00403F31 ; ---------------------------------------------------------------------------
.text:00403F33 ; const char Format[]
.text:00403F33 Format          db '%s:%d',0            ; DATA XREF: sub_403F40+63E↓o
.text:00403F39                 align 10h
.text:00403F40
.text:00403F40 ; =============== S U B R O U T I N E =======================================
.text:00403F40
.text:00403F40
.text:00403F40 sub_403F40      proc near               ; CODE XREF: sub_403E10+53↑p
.text:00403F40
.text:00403F40 C               = dword ptr -2Ch
.text:00403F40 Type            = dword ptr -28h
.text:00403F40 var_24          = dword ptr -24h
.text:00403F40 var_20          = dword ptr -20h
.text:00403F40 var_1C          = dword ptr -1Ch
.text:00403F40 var_18          = dword ptr -18h
.text:00403F40 var_14          = dword ptr -14h
.text:00403F40 arg_0           = dword ptr  4
.text:00403F40
.text:00403F40                 push    ebp
.text:00403F41                 push    edi
.text:00403F42                 push    esi
.text:00403F43                 push    ebx
.text:00403F44                 sub     esp, 1Ch
.text:00403F47                 mov     edx, [esp+2Ch+arg_0]
.text:00403F4B                 movsx   esi, word ptr [edx+4]
.text:00403F4F                 mov     ecx, [edx]
.text:00403F51                 lea     edi, [esi+ecx]
.text:00403F54                 mov     ds:dword_41B520, ecx
.text:00403F5A                 mov     esi, [esp+2Ch+arg_0]
.text:00403F5E                 mov     ds:dword_41B524, edi
.text:00403F64                 movsx   ebp, word ptr [esi+8]
.text:00403F68                 movsx   edx, word ptr [esi+0Ah]
.text:00403F6C                 mov     esi, edi
.text:00403F6E                 lea     ebx, [ebp+ecx+0]
.text:00403F72                 mov     [esp+2Ch+var_14], ebx
.text:00403F76                 lea     ebp, [edx+ecx]
.text:00403F79                 cmp     edi, ebp
.text:00403F7B                 jnb     loc_404884
.text:00403F81                 mov     edx, ds:dword_41B4C0
.text:00403F87                 lea     ebx, [edx+ecx]
.text:00403F8A                 cmp     edi, ebx
.text:00403F8C                 ja      short loc_403FEA
.text:00403F8E
.text:00403F8E loc_403F8E:                             ; CODE XREF: sub_403F40+A8↓j
.text:00403F8E                 mov     ds:dword_41B524, esi
.text:00403F94                 mov     ecx, ds:Str
.text:00403F9A                 test    ecx, ecx
.text:00403F9C                 jnz     loc_404841
.text:00403FA2                 movzx   ebx, byte ptr [esi]
.text:00403FA5                 cmp     ds:byte_41B1E0[ebx], 0
.text:00403FAC                 jz      loc_40483B
.text:00403FB2                 cmp     esi, ebp
.text:00403FB4                 jnb     loc_404830
.text:00403FBA                 lea     esi, [esi+0]
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403F40+93↓j
.text:00403FC0                 inc     esi
.text:00403FC1                 cmp     esi, ebp
.text:00403FC3                 jnb     loc_404830
.text:00403FC9                 movzx   ecx, byte ptr [esi]
.text:00403FCC                 cmp     ds:byte_41B1E0[ecx], 0
.text:00403FD3                 jnz     short loc_403FC0
.text:00403FD5
.text:00403FD5 loc_403FD5:                             ; CODE XREF: sub_403F40+8FC↓j
.text:00403FD5                                         ; sub_403F40+938↓j
.text:00403FD5                 cmp     esi, ebp
.text:00403FD7                 jnb     loc_404830
.text:00403FDD                 mov     ecx, ds:dword_41B520
.text:00403FE3                 lea     edi, [edx+ecx]
.text:00403FE6                 cmp     esi, edi
.text:00403FE8                 jbe     short loc_403F8E
.text:00403FEA
.text:00403FEA loc_403FEA:                             ; CODE XREF: sub_403F40+4C↑j
.text:00403FEA                                         ; sub_403F40+8F6↓j
.text:00403FEA                 lea     ebx, [edx+ecx]
.text:00403FED                 cmp     esi, ebx
.text:00403FEF                 ja      short loc_403FF7
.text:00403FF1                 mov     ds:dword_41B524, esi
.text:00403FF7
.text:00403FF7 loc_403FF7:                             ; CODE XREF: sub_403F40+AF↑j
.text:00403FF7                 mov     esi, off_41A01C
.text:00403FFD                 xor     eax, eax
.text:00403FFF                 test    esi, esi
.text:00404001                 jz      loc_404825
.text:00404007                 mov     edx, ds:dword_41B524
.text:0040400D                 cmp     edx, ebp
.text:0040400F                 jnb     short loc_404016
.text:00404011                 mov     eax, 1
.text:00404016
.text:00404016 loc_404016:                             ; CODE XREF: sub_403F40+CF↑j
.text:00404016                                         ; sub_403F40+8EB↓j
.text:00404016                 mov     ds:dword_41B530, eax
.text:0040401B                 nop
.text:0040401C                 lea     esi, [esi+0]
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403F40+11E↓j
.text:00404020                 cmp     edx, ecx
.text:00404022                 jbe     short loc_404060
.text:00404024                 movsx   edx, byte ptr [edx-1]
.text:00404028                 mov     edi, ds:__mb_cur_max
.text:0040402E                 cmp     dword ptr [edi], 1
.text:00404031                 jz      loc_404811
.text:00404037                 mov     [esp+2Ch+Type], 8 ; Type
.text:0040403F                 mov     [esp+2Ch+C], edx ; C
.text:00404042                 call    _isctype
.text:00404047                 mov     ecx, ds:dword_41B520
.text:0040404D
.text:0040404D loc_40404D:                             ; CODE XREF: sub_403F40+8E0↓j
.text:0040404D                 test    eax, eax
.text:0040404F                 jz      short loc_404060
.text:00404051                 mov     edx, ds:dword_41B524
.text:00404057                 dec     edx
.text:00404058                 mov     ds:dword_41B524, edx
.text:0040405E                 jmp     short loc_404020
.text:00404060 ; ---------------------------------------------------------------------------
.text:00404060
.text:00404060 loc_404060:                             ; CODE XREF: sub_403F40+E2↑j
.text:00404060                                         ; sub_403F40+10F↑j
.text:00404060                 mov     edx, [esp+2Ch+arg_0]
.text:00404064                 mov     eax, ds:dword_41B4A0
.text:00404069                 movsx   ebx, word ptr [edx+8]
.text:0040406D                 mov     edx, ds:dword_41B2E0
.text:00404073                 mov     edi, ebx
.text:00404075                 neg     edi
.text:00404077                 add     edx, eax
.text:00404079                 cmp     edi, edx
.text:0040407B                 jle     loc_404805
.text:00404081                 mov     esi, ds:Str
.text:00404087                 mov     ebx, ecx
.text:00404089                 sub     ebx, edx
.text:0040408B                 mov     [esp+2Ch+var_18], ebx
.text:0040408F                 test    esi, esi
.text:00404091                 jnz     loc_4047C2
.text:00404097                 mov     edx, [esp+2Ch+var_18]
.text:0040409B                 movzx   ebx, byte ptr [edx]
.text:0040409E                 cmp     ds:byte_41B1E0[ebx], 0
.text:004040A5                 jz      loc_4047B9
.text:004040AB                 cmp     edx, ecx
.text:004040AD                 jnb     short loc_4040C9
.text:004040AF
.text:004040AF loc_4040AF:                             ; CODE XREF: sub_403F40+187↓j
.text:004040AF                 inc     [esp+2Ch+var_18]
.text:004040B3                 cmp     [esp+2Ch+var_18], ecx
.text:004040B7                 jnb     short loc_4040C9
.text:004040B9                 mov     eax, [esp+2Ch+var_18]
.text:004040BD                 movzx   edi, byte ptr [eax]
.text:004040C0                 cmp     ds:byte_41B1E0[edi], 0
.text:004040C7                 jnz     short loc_4040AF
.text:004040C9
.text:004040C9 loc_4040C9:                             ; CODE XREF: sub_403F40+16D↑j
.text:004040C9                                         ; sub_403F40+177↑j ...
.text:004040C9                 mov     ds:dword_41B504, ecx
.text:004040CF                 mov     esi, [esp+2Ch+var_18]
.text:004040D3                 mov     edx, esi
.text:004040D5                 mov     ds:dword_41B500, esi
.text:004040DB                 nop
.text:004040DC                 lea     esi, [esi+0]
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403F40+1E4↓j
.text:004040E0                 mov     ecx, ds:dword_41B504
.text:004040E6                 cmp     ecx, edx
.text:004040E8                 jbe     short loc_404126
.text:004040EA                 movsx   ebx, byte ptr [ecx-1]
.text:004040EE                 mov     edi, ds:__mb_cur_max
.text:004040F4                 cmp     dword ptr [edi], 1
.text:004040F7                 jz      loc_4047A5
.text:004040FD                 mov     [esp+2Ch+Type], 8 ; Type
.text:00404105                 mov     [esp+2Ch+C], ebx ; C
.text:00404108                 call    _isctype
.text:0040410D                 mov     ecx, ds:dword_41B504
.text:00404113                 mov     edx, ds:dword_41B500
.text:00404119
.text:00404119 loc_404119:                             ; CODE XREF: sub_403F40+874↓j
.text:00404119                 test    eax, eax
.text:0040411B                 jz      short loc_404126
.text:0040411D                 dec     ecx
.text:0040411E                 mov     ds:dword_41B504, ecx
.text:00404124                 jmp     short loc_4040E0
.text:00404126 ; ---------------------------------------------------------------------------
.text:00404126
.text:00404126 loc_404126:                             ; CODE XREF: sub_403F40+1A8↑j
.text:00404126                                         ; sub_403F40+1DB↑j ...
.text:00404126                 mov     ebx, ds:dword_41B4B0
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_403F40+20F↓j
.text:0040412C                                         ; sub_403F40+22B↓j ...
.text:0040412C                 lea     edi, [ebx+edx]
.text:0040412F                 cmp     edi, ecx
.text:00404131                 jnb     loc_4041DD
.text:00404137                 mov     esi, ds:Str
.text:0040413D                 test    esi, esi
.text:0040413F                 jnz     short loc_404190
.text:00404141                 movzx   edi, byte ptr [edx]
.text:00404144                 cmp     ds:byte_41B1E0[edi], 0
.text:0040414B                 jz      short loc_404180
.text:0040414D                 cmp     edx, ecx
.text:0040414F                 jnb     short loc_40412C
.text:00404151                 jmp     short loc_404160
.text:00404151 ; ---------------------------------------------------------------------------
.text:00404153                 align 10h
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: sub_403F40+211↑j
.text:00404160                                         ; sub_403F40+238↓j
.text:00404160                 mov     eax, edx
.text:00404162                 inc     edx
.text:00404163                 cmp     edx, ecx
.text:00404165                 mov     ds:dword_41B500, edx
.text:0040416B                 jnb     short loc_40412C
.text:0040416D                 movzx   esi, byte ptr [eax+1]
.text:00404171                 cmp     ds:byte_41B1E0[esi], 0
.text:00404178                 jnz     short loc_404160
.text:0040417A                 jmp     short loc_40412C
.text:0040417A ; ---------------------------------------------------------------------------
.text:0040417C                 align 10h
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_403F40+20B↑j
.text:00404180                 inc     edx
.text:00404181                 mov     ds:dword_41B500, edx
.text:00404187                 jmp     short loc_40412C
.text:00404187 ; ---------------------------------------------------------------------------
.text:00404189                 align 10h
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_403F40+1FF↑j
.text:00404190                 mov     [esp+2Ch+var_1C], 0
.text:00404198                 sub     ecx, edx
.text:0040419A                 mov     [esp+2Ch+var_24], ecx
.text:0040419E                 mov     ecx, ds:dword_41B1C0
.text:004041A4                 mov     [esp+2Ch+var_20], 0
.text:004041AC                 mov     [esp+2Ch+Type], edx
.text:004041B0                 mov     [esp+2Ch+C], ecx
.text:004041B3                 call    sub_409F20
.text:004041B8                 cmp     eax, 1
.text:004041BB                 jl      short loc_4041D6
.text:004041BD
.text:004041BD loc_4041BD:                             ; CODE XREF: sub_403F40+29B↓j
.text:004041BD                 mov     edx, ds:dword_41B500
.text:004041C3                 mov     ecx, ds:dword_41B504
.text:004041C9                 add     edx, eax
.text:004041CB                 mov     ds:dword_41B500, edx
.text:004041D1                 jmp     loc_404126
.text:004041D6 ; ---------------------------------------------------------------------------
.text:004041D6
.text:004041D6 loc_4041D6:                             ; CODE XREF: sub_403F40+27B↑j
.text:004041D6                 mov     eax, 1
.text:004041DB                 jmp     short loc_4041BD
.text:004041DD ; ---------------------------------------------------------------------------
.text:004041DD
.text:004041DD loc_4041DD:                             ; CODE XREF: sub_403F40+1F1↑j
.text:004041DD                 mov     ebx, off_41A01C
.text:004041E3                 test    ebx, ebx
.text:004041E5                 jz      loc_404798
.text:004041EB                 mov     esi, edx
.text:004041ED                 lea     esi, [esi+0]
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_403F40+2E0↓j
.text:004041F0                 cmp     esi, ds:dword_41B360
.text:004041F6                 jbe     short loc_404222
.text:004041F8                 movsx   edx, byte ptr [esi-1]
.text:004041FC                 mov     ecx, ds:__mb_cur_max
.text:00404202                 cmp     dword ptr [ecx], 1
.text:00404205                 jz      loc_404784
.text:0040420B                 mov     [esp+2Ch+Type], 8 ; Type
.text:00404213                 mov     [esp+2Ch+C], edx ; C
.text:00404216                 call    _isctype
.text:0040421B
.text:0040421B loc_40421B:                             ; CODE XREF: sub_403F40+853↓j
.text:0040421B                 test    eax, eax
.text:0040421D                 jz      short loc_404222
.text:0040421F                 dec     esi
.text:00404220                 jmp     short loc_4041F0
.text:00404222 ; ---------------------------------------------------------------------------
.text:00404222
.text:00404222 loc_404222:                             ; CODE XREF: sub_403F40+2B6↑j
.text:00404222                                         ; sub_403F40+2DD↑j
.text:00404222                 xor     edx, edx
.text:00404224                 cmp     esi, [esp+2Ch+var_14]
.text:00404228                 setnbe  dl
.text:0040422B                 mov     ds:dword_41B510, edx
.text:00404231                 mov     edx, ds:dword_41B500
.text:00404237                 mov     esi, esi
.text:00404239                 lea     edi, [edi+0]
.text:00404240
.text:00404240 loc_404240:                             ; CODE XREF: sub_403F40+33B↓j
.text:00404240                                         ; sub_403F40+860↓j
.text:00404240                 cmp     edx, ds:dword_41B364
.text:00404246                 jnb     short loc_40427D
.text:00404248                 movsx   ecx, byte ptr [edx]
.text:0040424B                 mov     edi, ds:__mb_cur_max
.text:00404251                 cmp     dword ptr [edi], 1
.text:00404254                 jz      loc_404770
.text:0040425A                 mov     [esp+2Ch+Type], 8 ; Type
.text:00404262                 mov     [esp+2Ch+C], ecx ; C
.text:00404265                 call    _isctype
.text:0040426A                 mov     edx, ds:dword_41B500
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_403F40+83F↓j
.text:00404270                 test    eax, eax
.text:00404272                 jz      short loc_40427D
.text:00404274                 inc     edx
.text:00404275                 mov     ds:dword_41B500, edx
.text:0040427B                 jmp     short loc_404240
.text:0040427D ; ---------------------------------------------------------------------------
.text:0040427D
.text:0040427D loc_40427D:                             ; CODE XREF: sub_403F40+306↑j
.text:0040427D                                         ; sub_403F40+332↑j
.text:0040427D                 mov     ecx, ds:dword_41B504
.text:00404283                 mov     edi, ds:dword_41B4B0
.text:00404289                 sub     ecx, edx
.text:0040428B                 mov     edx, dword_41A018
.text:00404291                 sub     edi, ecx
.text:00404293                 sub     edi, edx
.text:00404295                 test    edi, edi
.text:00404297                 jle     loc_404754
.text:0040429D                 mov     edx, ds:dword_41B524
.text:004042A3                 lea     esi, [esi+0]
.text:004042A9                 lea     edi, [edi+0]
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_403F40+3B1↓j
.text:004042B0                 mov     ds:dword_41B4E0, edx
.text:004042B6                 mov     edx, ds:dword_41B4E0
.text:004042BC                 cmp     edx, ds:dword_41B364
.text:004042C2                 jnb     short loc_4042F3
.text:004042C4                 movsx   ecx, byte ptr [edx]
.text:004042C7                 mov     ebx, ds:__mb_cur_max
.text:004042CD                 cmp     dword ptr [ebx], 1
.text:004042D0                 jz      loc_404740
.text:004042D6                 mov     [esp+2Ch+Type], 8 ; Type
.text:004042DE                 mov     [esp+2Ch+C], ecx ; C
.text:004042E1                 call    _isctype
.text:004042E6                 mov     edx, ds:dword_41B4E0
.text:004042EC
.text:004042EC loc_4042EC:                             ; CODE XREF: sub_403F40+80F↓j
.text:004042EC                 test    eax, eax
.text:004042EE                 jz      short loc_4042F3
.text:004042F0                 inc     edx
.text:004042F1                 jmp     short loc_4042B0
.text:004042F3 ; ---------------------------------------------------------------------------
.text:004042F3
.text:004042F3 loc_4042F3:                             ; CODE XREF: sub_403F40+382↑j
.text:004042F3                                         ; sub_403F40+3AE↑j
.text:004042F3                 mov     ds:dword_41B4E4, edx
.text:004042F9                 cmp     edx, ebp
.text:004042FB                 mov     esi, edx
.text:004042FD                 jnb     short loc_40434C
.text:004042FF                 lea     ecx, [edi+edx]
.text:00404302                 cmp     edx, ecx
.text:00404304                 jnb     short loc_40434C
.text:00404306
.text:00404306 loc_404306:                             ; CODE XREF: sub_403F40+40A↓j
.text:00404306                 mov     ds:dword_41B4E4, esi
.text:0040430C                 mov     ecx, ds:Str
.text:00404312                 mov     ebx, esi
.text:00404314                 test    ecx, ecx
.text:00404316                 jnz     loc_4046F8
.text:0040431C                 movzx   ecx, byte ptr [esi]
.text:0040431F                 cmp     ds:byte_41B1E0[ecx], 0
.text:00404326                 jz      loc_4046F2
.text:0040432C                 cmp     esi, ebp
.text:0040432E                 jnb     short loc_40434C
.text:00404330
.text:00404330 loc_404330:                             ; CODE XREF: sub_403F40+3FF↓j
.text:00404330                 inc     esi
.text:00404331                 cmp     esi, ebp
.text:00404333                 jnb     short loc_40434C
.text:00404335                 movzx   ebx, byte ptr [esi]
.text:00404338                 cmp     ds:byte_41B1E0[ebx], 0
.text:0040433F                 jnz     short loc_404330
.text:00404341
.text:00404341 loc_404341:                             ; CODE XREF: sub_403F40+7B3↓j
.text:00404341                                         ; sub_403F40+7F0↓j
.text:00404341                 cmp     esi, ebp
.text:00404343                 jnb     short loc_40434C
.text:00404345                 lea     ecx, [edi+edx]
.text:00404348                 cmp     esi, ecx
.text:0040434A                 jb      short loc_404306
.text:0040434C
.text:0040434C loc_40434C:                             ; CODE XREF: sub_403F40+3BD↑j
.text:0040434C                                         ; sub_403F40+3C4↑j ...
.text:0040434C                 lea     ebx, [edi+edx]
.text:0040434F                 cmp     esi, ebx
.text:00404351                 jnb     short loc_404359
.text:00404353                 mov     ds:dword_41B4E4, esi
.text:00404359
.text:00404359 loc_404359:                             ; CODE XREF: sub_403F40+411↑j
.text:00404359                 mov     ebx, ds:dword_41B4E4
.text:0040435F                 cmp     ebx, edx
.text:00404361                 jbe     loc_4046E5
.text:00404367                 mov     edi, off_41A01C
.text:0040436D                 xor     eax, eax
.text:0040436F                 mov     ds:dword_41B530, eax
.text:00404374                 xor     eax, eax
.text:00404376                 test    edi, edi
.text:00404378                 jz      short loc_404383
.text:0040437A                 cmp     ebx, ebp
.text:0040437C                 jnb     short loc_404383
.text:0040437E                 mov     eax, 1
.text:00404383
.text:00404383 loc_404383:                             ; CODE XREF: sub_403F40+438↑j
.text:00404383                                         ; sub_403F40+43C↑j
.text:00404383                 mov     ds:dword_41B4F0, eax
.text:00404388                 nop
.text:00404389                 lea     esi, [esi+0]
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_403F40+48E↓j
.text:00404390                                         ; sub_403F40+7AD↓j
.text:00404390                 cmp     ebx, edx
.text:00404392                 jbe     short loc_4043D0
.text:00404394                 movsx   edx, byte ptr [ebx-1]
.text:00404398                 mov     ecx, ds:__mb_cur_max
.text:0040439E                 cmp     dword ptr [ecx], 1
.text:004043A1                 jz      loc_4046D1
.text:004043A7                 mov     [esp+2Ch+Type], 8 ; Type
.text:004043AF                 mov     [esp+2Ch+C], edx ; C
.text:004043B2                 call    _isctype
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: sub_403F40+7A0↓j
.text:004043B7                 test    eax, eax
.text:004043B9                 jz      short loc_4043D0
.text:004043BB                 mov     ebx, ds:dword_41B4E4
.text:004043C1                 mov     edx, ds:dword_41B4E0
.text:004043C7                 dec     ebx
.text:004043C8                 mov     ds:dword_41B4E4, ebx
.text:004043CE                 jmp     short loc_404390
.text:004043D0 ; ---------------------------------------------------------------------------
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_403F40+452↑j
.text:004043D0                                         ; sub_403F40+479↑j
.text:004043D0                 mov     edx, dword_41A018
.text:004043D6
.text:004043D6 loc_4043D6:                             ; CODE XREF: sub_403F40+82B↓j
.text:004043D6                 mov     ebx, ds:dword_41B520
.text:004043DC                 mov     edi, ds:dword_41B524
.text:004043E2                 sub     edi, ebx
.text:004043E4                 mov     ebx, ds:dword_41B4C0
.text:004043EA                 sub     ebx, edi
.text:004043EC                 sub     ebx, edx
.text:004043EE                 test    ebx, ebx
.text:004043F0                 jle     loc_4046B4
.text:004043F6                 mov     ecx, ds:dword_41B500
.text:004043FC                 lea     esi, [esi+0]
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_403F40+502↓j
.text:00404400                 mov     ds:dword_41B544, ecx
.text:00404406                 mov     ecx, ds:dword_41B544
.text:0040440C                 cmp     ecx, ds:dword_41B360
.text:00404412                 jbe     short loc_404444
.text:00404414                 movsx   edx, byte ptr [ecx-1]
.text:00404418                 mov     esi, ds:__mb_cur_max
.text:0040441E                 cmp     dword ptr [esi], 1
.text:00404421                 jz      loc_4046A0
.text:00404427                 mov     [esp+2Ch+Type], 8 ; Type
.text:0040442F                 mov     [esp+2Ch+C], edx ; C
.text:00404432                 call    _isctype
.text:00404437                 mov     ecx, ds:dword_41B544
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_403F40+76F↓j
.text:0040443D                 test    eax, eax
.text:0040443F                 jz      short loc_404444
.text:00404441                 dec     ecx
.text:00404442                 jmp     short loc_404400
.text:00404444 ; ---------------------------------------------------------------------------
.text:00404444
.text:00404444 loc_404444:                             ; CODE XREF: sub_403F40+4D2↑j
.text:00404444                                         ; sub_403F40+4FF↑j
.text:00404444                 mov     edx, [esp+2Ch+var_18]
.text:00404448                 lea     edi, [ebx+edx]
.text:0040444B                 cmp     edi, ecx
.text:0040444D                 mov     ds:dword_41B540, edx
.text:00404453                 jnb     loc_404695
.text:00404459                 lea     esi, [esi+0]
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_403F40+575↓j
.text:00404460                 mov     eax, ds:Str
.text:00404465                 test    eax, eax
.text:00404467                 jnz     loc_404651
.text:0040446D                 movzx   esi, byte ptr [edx]
.text:00404470                 cmp     ds:byte_41B1E0[esi], 0
.text:00404477                 jz      loc_404645
.text:0040447D                 cmp     edx, ecx
.text:0040447F                 jnb     short loc_4044B0
.text:00404481                 jmp     short loc_404490
.text:00404481 ; ---------------------------------------------------------------------------
.text:00404483                 align 10h
.text:00404490
.text:00404490 loc_404490:                             ; CODE XREF: sub_403F40+541↑j
.text:00404490                                         ; sub_403F40+568↓j
.text:00404490                 mov     eax, edx
.text:00404492                 inc     edx
.text:00404493                 cmp     edx, ecx
.text:00404495                 mov     ds:dword_41B540, edx
.text:0040449B                 jnb     short loc_4044B0
.text:0040449D                 movzx   edi, byte ptr [eax+1]
.text:004044A1                 cmp     ds:byte_41B1E0[edi], 0
.text:004044A8                 jnz     short loc_404490
.text:004044AA                 lea     esi, [esi+0]
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_403F40+53F↑j
.text:004044B0                                         ; sub_403F40+55B↑j ...
.text:004044B0                 lea     esi, [ebx+edx]
.text:004044B3                 cmp     esi, ecx
.text:004044B5                 jb      short loc_404460
.text:004044B7
.text:004044B7 loc_4044B7:                             ; CODE XREF: sub_403F40+75B↓j
.text:004044B7                 cmp     ecx, edx
.text:004044B9                 jbe     loc_404638
.text:004044BF                 mov     edi, off_41A01C
.text:004044C5                 xor     ebx, ebx
.text:004044C7                 xor     eax, eax
.text:004044C9                 mov     ds:dword_41B510, ebx
.text:004044CF                 test    edi, edi
.text:004044D1                 jz      short loc_4044DE
.text:004044D3                 cmp     edx, [esp+2Ch+var_14]
.text:004044D7                 jbe     short loc_4044DE
.text:004044D9                 mov     eax, 1
.text:004044DE
.text:004044DE loc_4044DE:                             ; CODE XREF: sub_403F40+591↑j
.text:004044DE                                         ; sub_403F40+597↑j
.text:004044DE                 mov     ds:dword_41B550, eax
.text:004044E3                 lea     esi, [esi+0]
.text:004044E9                 lea     edi, [edi+0]
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_403F40+5ED↓j
.text:004044F0                                         ; sub_403F40+700↓j
.text:004044F0                 cmp     edx, ecx
.text:004044F2                 jnb     short loc_40452F
.text:004044F4                 movsx   edx, byte ptr [edx]
.text:004044F7                 mov     ecx, ds:__mb_cur_max
.text:004044FD                 cmp     dword ptr [ecx], 1
.text:00404500                 jz      loc_404624
.text:00404506                 mov     [esp+2Ch+Type], 8 ; Type
.text:0040450E                 mov     [esp+2Ch+C], edx ; C
.text:00404511                 call    _isctype
.text:00404516
.text:00404516 loc_404516:                             ; CODE XREF: sub_403F40+6F3↓j
.text:00404516                 test    eax, eax
.text:00404518                 jz      short loc_40452F
.text:0040451A                 mov     edx, ds:dword_41B540
.text:00404520                 mov     ecx, ds:dword_41B544
.text:00404526                 inc     edx
.text:00404527                 mov     ds:dword_41B540, edx
.text:0040452D                 jmp     short loc_4044F0
.text:0040452F ; ---------------------------------------------------------------------------
.text:0040452F
.text:0040452F loc_40452F:                             ; CODE XREF: sub_403F40+5B2↑j
.text:0040452F                                         ; sub_403F40+5D8↑j ...
.text:0040452F                 cmp     ds:byte_41B000, 0
.text:00404536                 jz      loc_4045B8
.text:0040453C                 mov     ebp, [esp+2Ch+arg_0]
.text:00404540                 xor     ecx, ecx
.text:00404542                 mov     ebx, ds:dword_41B350
.text:00404548                 mov     edx, [ebp+0Ch]
.text:0040454B                 cmp     [ebx], edx
.text:0040454D                 jge     short loc_404556
.text:0040454F                 nop
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_403F40+614↓j
.text:00404550                 inc     ecx
.text:00404551                 cmp     [ebx+ecx*4], edx
.text:00404554                 jl      short loc_404550
.text:00404556
.text:00404556 loc_404556:                             ; CODE XREF: sub_403F40+60D↑j
.text:00404556                 mov     edi, ds:dword_41B340
.text:0040455C                 mov     esi, [edi+ecx*4]
.text:0040455F                 test    esi, esi
.text:00404561                 jz      short loc_4045B1
.text:00404563
.text:00404563 loc_404563:                             ; CODE XREF: sub_403F40+676↓j
.text:00404563                 test    ecx, ecx
.text:00404565                 lea     eax, [edx+1]
.text:00404568                 jle     short loc_404570
.text:0040456A                 mov     edx, [ebx+ecx*4-4]
.text:0040456E                 sub     eax, edx
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_403F40+628↑j
.text:00404570                 mov     [esp+2Ch+var_24], esi
.text:00404574                 mov     ecx, ds:Buffer
.text:0040457A                 mov     [esp+2Ch+var_20], eax
.text:0040457E                 mov     [esp+2Ch+Type], offset Format ; "%s:%d"
.text:00404586                 mov     [esp+2Ch+C], ecx ; Buffer
.text:00404589                 call    sprintf
.text:0040458E                 mov     ebx, ds:Buffer
.text:00404594                 mov     [esp+2Ch+C], ebx ; Str
.text:00404597                 call    strlen
.text:0040459C                 mov     esi, ds:Buffer
.text:004045A2                 add     eax, esi
.text:004045A4                 mov     ds:dword_41B564, eax
.text:004045A9
.text:004045A9 loc_4045A9:                             ; CODE XREF: sub_403F40+67F↓j
.text:004045A9                                         ; sub_403F40+6A7↓j ...
.text:004045A9                 add     esp, 1Ch
.text:004045AC                 pop     ebx
.text:004045AD                 pop     esi
.text:004045AE                 pop     edi
.text:004045AF                 pop     ebp
.text:004045B0                 retn
.text:004045B1 ; ---------------------------------------------------------------------------
.text:004045B1
.text:004045B1 loc_4045B1:                             ; CODE XREF: sub_403F40+621↑j
.text:004045B1                 mov     esi, offset Locale
.text:004045B6                 jmp     short loc_404563
.text:004045B8 ; ---------------------------------------------------------------------------
.text:004045B8
.text:004045B8 loc_4045B8:                             ; CODE XREF: sub_403F40+5F6↑j
.text:004045B8                 cmp     ds:byte_41B010, 0
.text:004045BF                 jz      short loc_4045A9
.text:004045C1                 mov     esi, [esp+2Ch+arg_0]
.text:004045C5                 mov     eax, ds:dword_41B520
.text:004045CA                 movsx   edi, word ptr [esi+0Ch]
.text:004045CE                 add     edi, eax
.text:004045D0                 mov     ds:Buffer, edi
.text:004045D6                 mov     ds:dword_41B564, edi
.text:004045DC                 lea     esi, [esi+0]
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_403F40+6D1↓j
.text:004045E0                 mov     eax, ds:dword_41B564
.text:004045E5                 cmp     eax, ebp
.text:004045E7                 jnb     short loc_4045A9
.text:004045E9                 movsx   edx, byte ptr [eax]
.text:004045EC                 mov     ebx, ds:__mb_cur_max
.text:004045F2                 cmp     dword ptr [ebx], 1
.text:004045F5                 jz      short loc_404613
.text:004045F7                 mov     [esp+2Ch+Type], 8 ; Type
.text:004045FF                 mov     [esp+2Ch+C], edx ; C
.text:00404602                 call    _isctype
.text:00404607
.text:00404607 loc_404607:                             ; CODE XREF: sub_403F40+6E2↓j
.text:00404607                 test    eax, eax
.text:00404609                 jnz     short loc_4045A9
.text:0040460B                 inc     ds:dword_41B564
.text:00404611                 jmp     short loc_4045E0
.text:00404613 ; ---------------------------------------------------------------------------
.text:00404613
.text:00404613 loc_404613:                             ; CODE XREF: sub_403F40+6B5↑j
.text:00404613                 mov     edi, ds:_pctype
.text:00404619                 mov     ecx, [edi]
.text:0040461B                 movzx   eax, word ptr [ecx+edx*2]
.text:0040461F                 and     eax, 8
.text:00404622                 jmp     short loc_404607
.text:00404624 ; ---------------------------------------------------------------------------
.text:00404624
.text:00404624 loc_404624:                             ; CODE XREF: sub_403F40+5C0↑j
.text:00404624                 mov     ebx, ds:_pctype
.text:0040462A                 mov     edi, [ebx]
.text:0040462C                 movzx   eax, word ptr [edi+edx*2]
.text:00404630                 and     eax, 8
.text:00404633                 jmp     loc_404516
.text:00404638 ; ---------------------------------------------------------------------------
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_403F40+579↑j
.text:00404638                 xor     esi, esi
.text:0040463A                 mov     ds:dword_41B550, esi
.text:00404640                 jmp     loc_4044F0
.text:00404645 ; ---------------------------------------------------------------------------
.text:00404645
.text:00404645 loc_404645:                             ; CODE XREF: sub_403F40+537↑j
.text:00404645                 inc     edx
.text:00404646
.text:00404646 loc_404646:                             ; CODE XREF: sub_403F40+74C↓j
.text:00404646                 mov     ds:dword_41B540, edx
.text:0040464C                 jmp     loc_4044B0
.text:00404651 ; ---------------------------------------------------------------------------
.text:00404651
.text:00404651 loc_404651:                             ; CODE XREF: sub_403F40+527↑j
.text:00404651                 mov     [esp+2Ch+Type], edx
.text:00404655                 sub     ecx, edx
.text:00404657                 mov     edx, ds:dword_41B1C0
.text:0040465D                 mov     [esp+2Ch+var_1C], 0
.text:00404665                 mov     [esp+2Ch+var_20], 0
.text:0040466D                 mov     [esp+2Ch+var_24], ecx
.text:00404671                 mov     [esp+2Ch+C], edx
.text:00404674                 call    sub_409F20
.text:00404679                 cmp     eax, 1
.text:0040467C                 jl      short loc_40468E
.text:0040467E
.text:0040467E loc_40467E:                             ; CODE XREF: sub_403F40+753↓j
.text:0040467E                 mov     edx, ds:dword_41B540
.text:00404684                 mov     ecx, ds:dword_41B544
.text:0040468A                 add     edx, eax
.text:0040468C                 jmp     short loc_404646
.text:0040468E ; ---------------------------------------------------------------------------
.text:0040468E
.text:0040468E loc_40468E:                             ; CODE XREF: sub_403F40+73C↑j
.text:0040468E                 mov     eax, 1
.text:00404693                 jmp     short loc_40467E
.text:00404695 ; ---------------------------------------------------------------------------
.text:00404695
.text:00404695 loc_404695:                             ; CODE XREF: sub_403F40+513↑j
.text:00404695                 mov     edx, ds:dword_41B540
.text:0040469B                 jmp     loc_4044B7
.text:004046A0 ; ---------------------------------------------------------------------------
.text:004046A0
.text:004046A0 loc_4046A0:                             ; CODE XREF: sub_403F40+4E1↑j
.text:004046A0                 mov     esi, ds:_pctype
.text:004046A6                 mov     edi, [esi]
.text:004046A8                 movzx   eax, word ptr [edi+edx*2]
.text:004046AC                 and     eax, 8
.text:004046AF                 jmp     loc_40443D
.text:004046B4 ; ---------------------------------------------------------------------------
.text:004046B4
.text:004046B4 loc_4046B4:                             ; CODE XREF: sub_403F40+4B0↑j
.text:004046B4                 xor     ecx, ecx
.text:004046B6                 xor     esi, esi
.text:004046B8                 xor     edx, edx
.text:004046BA                 mov     ds:dword_41B540, ecx
.text:004046C0                 mov     ds:dword_41B544, esi
.text:004046C6                 mov     ds:dword_41B550, edx
.text:004046CC                 jmp     loc_40452F
.text:004046D1 ; ---------------------------------------------------------------------------
.text:004046D1
.text:004046D1 loc_4046D1:                             ; CODE XREF: sub_403F40+461↑j
.text:004046D1                 mov     edi, ds:_pctype
.text:004046D7                 mov     ebx, [edi]
.text:004046D9                 movzx   eax, word ptr [ebx+edx*2]
.text:004046DD                 and     eax, 8
.text:004046E0                 jmp     loc_4043B7
.text:004046E5 ; ---------------------------------------------------------------------------
.text:004046E5
.text:004046E5 loc_4046E5:                             ; CODE XREF: sub_403F40+421↑j
.text:004046E5                 xor     esi, esi
.text:004046E7                 mov     ds:dword_41B4F0, esi
.text:004046ED                 jmp     loc_404390
.text:004046F2 ; ---------------------------------------------------------------------------
.text:004046F2
.text:004046F2 loc_4046F2:                             ; CODE XREF: sub_403F40+3E6↑j
.text:004046F2                 inc     esi
.text:004046F3                 jmp     loc_404341
.text:004046F8 ; ---------------------------------------------------------------------------
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_403F40+3D6↑j
.text:004046F8                 mov     [esp+2Ch+var_1C], 0
.text:00404700                 mov     edx, ds:dword_41B1C0
.text:00404706                 mov     esi, ebp
.text:00404708                 mov     [esp+2Ch+var_20], 0
.text:00404710                 sub     esi, ebx
.text:00404712                 mov     [esp+2Ch+var_24], esi
.text:00404716                 mov     [esp+2Ch+Type], ebx
.text:0040471A                 mov     [esp+2Ch+C], edx
.text:0040471D                 call    sub_409F20
.text:00404722                 cmp     eax, 1
.text:00404725                 jl      short loc_404735
.text:00404727
.text:00404727 loc_404727:                             ; CODE XREF: sub_403F40+7FA↓j
.text:00404727                 mov     edx, ds:dword_41B4E0
.text:0040472D                 lea     esi, [eax+ebx]
.text:00404730                 jmp     loc_404341
.text:00404735 ; ---------------------------------------------------------------------------
.text:00404735
.text:00404735 loc_404735:                             ; CODE XREF: sub_403F40+7E5↑j
.text:00404735                 mov     eax, 1
.text:0040473A                 jmp     short loc_404727
.text:0040473A ; ---------------------------------------------------------------------------
.text:0040473C                 align 10h
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_403F40+390↑j
.text:00404740                 mov     ebx, ds:_pctype
.text:00404746                 mov     esi, [ebx]
.text:00404748                 movzx   eax, word ptr [esi+ecx*2]
.text:0040474C                 and     eax, 8
.text:0040474F                 jmp     loc_4042EC
.text:00404754 ; ---------------------------------------------------------------------------
.text:00404754
.text:00404754 loc_404754:                             ; CODE XREF: sub_403F40+357↑j
.text:00404754                 xor     esi, esi
.text:00404756                 xor     ecx, ecx
.text:00404758                 xor     eax, eax
.text:0040475A                 mov     ds:dword_41B4E0, esi
.text:00404760                 mov     ds:dword_41B4E4, ecx
.text:00404766                 mov     ds:dword_41B4F0, eax
.text:0040476B                 jmp     loc_4043D6
.text:00404770 ; ---------------------------------------------------------------------------
.text:00404770
.text:00404770 loc_404770:                             ; CODE XREF: sub_403F40+314↑j
.text:00404770                 mov     esi, ds:_pctype
.text:00404776                 mov     ebx, [esi]
.text:00404778                 movzx   eax, word ptr [ebx+ecx*2]
.text:0040477C                 and     eax, 8
.text:0040477F                 jmp     loc_404270
.text:00404784 ; ---------------------------------------------------------------------------
.text:00404784
.text:00404784 loc_404784:                             ; CODE XREF: sub_403F40+2C5↑j
.text:00404784                 mov     ebx, ds:_pctype
.text:0040478A                 mov     edi, [ebx]
.text:0040478C                 movzx   eax, word ptr [edi+edx*2]
.text:00404790                 and     eax, 8
.text:00404793                 jmp     loc_40421B
.text:00404798 ; ---------------------------------------------------------------------------
.text:00404798
.text:00404798 loc_404798:                             ; CODE XREF: sub_403F40+2A5↑j
.text:00404798                 xor     esi, esi
.text:0040479A                 mov     ds:dword_41B510, esi
.text:004047A0                 jmp     loc_404240
.text:004047A5 ; ---------------------------------------------------------------------------
.text:004047A5
.text:004047A5 loc_4047A5:                             ; CODE XREF: sub_403F40+1B7↑j
.text:004047A5                 mov     edi, ds:_pctype
.text:004047AB                 mov     esi, [edi]
.text:004047AD                 movzx   eax, word ptr [esi+ebx*2]
.text:004047B1                 and     eax, 8
.text:004047B4                 jmp     loc_404119
.text:004047B9 ; ---------------------------------------------------------------------------
.text:004047B9
.text:004047B9 loc_4047B9:                             ; CODE XREF: sub_403F40+165↑j
.text:004047B9                 inc     [esp+2Ch+var_18]
.text:004047BD                 jmp     loc_4040C9
.text:004047C2 ; ---------------------------------------------------------------------------
.text:004047C2
.text:004047C2 loc_4047C2:                             ; CODE XREF: sub_403F40+151↑j
.text:004047C2                 mov     [esp+2Ch+var_1C], 0
.text:004047CA                 sub     ecx, ebx
.text:004047CC                 mov     [esp+2Ch+var_24], ecx
.text:004047D0                 mov     ecx, ds:dword_41B1C0
.text:004047D6                 mov     [esp+2Ch+var_20], 0
.text:004047DE                 mov     [esp+2Ch+Type], ebx
.text:004047E2                 mov     [esp+2Ch+C], ecx
.text:004047E5                 call    sub_409F20
.text:004047EA                 cmp     eax, 1
.text:004047ED                 jl      short loc_4047FE
.text:004047EF
.text:004047EF loc_4047EF:                             ; CODE XREF: sub_403F40+8C3↓j
.text:004047EF                 add     [esp+2Ch+var_18], eax
.text:004047F3                 mov     ecx, ds:dword_41B520
.text:004047F9                 jmp     loc_4040C9
.text:004047FE ; ---------------------------------------------------------------------------
.text:004047FE
.text:004047FE loc_4047FE:                             ; CODE XREF: sub_403F40+8AD↑j
.text:004047FE                 mov     eax, 1
.text:00404803                 jmp     short loc_4047EF
.text:00404805 ; ---------------------------------------------------------------------------
.text:00404805
.text:00404805 loc_404805:                             ; CODE XREF: sub_403F40+13B↑j
.text:00404805                 lea     edx, [ebx+ecx]
.text:00404808                 mov     [esp+2Ch+var_18], edx
.text:0040480C                 jmp     loc_4040C9
.text:00404811 ; ---------------------------------------------------------------------------
.text:00404811
.text:00404811 loc_404811:                             ; CODE XREF: sub_403F40+F1↑j
.text:00404811                 mov     esi, ds:_pctype
.text:00404817                 mov     ebx, [esi]
.text:00404819                 movzx   eax, word ptr [ebx+edx*2]
.text:0040481D                 and     eax, 8
.text:00404820                 jmp     loc_40404D
.text:00404825 ; ---------------------------------------------------------------------------
.text:00404825
.text:00404825 loc_404825:                             ; CODE XREF: sub_403F40+C1↑j
.text:00404825                 mov     edx, ds:dword_41B524
.text:0040482B                 jmp     loc_404016
.text:00404830 ; ---------------------------------------------------------------------------
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: sub_403F40+74↑j
.text:00404830                                         ; sub_403F40+83↑j ...
.text:00404830                 mov     ecx, ds:dword_41B520
.text:00404836                 jmp     loc_403FEA
.text:0040483B ; ---------------------------------------------------------------------------
.text:0040483B
.text:0040483B loc_40483B:                             ; CODE XREF: sub_403F40+6C↑j
.text:0040483B                 inc     esi
.text:0040483C                 jmp     loc_403FD5
.text:00404841 ; ---------------------------------------------------------------------------
.text:00404841
.text:00404841 loc_404841:                             ; CODE XREF: sub_403F40+5C↑j
.text:00404841                 mov     [esp+2Ch+var_1C], 0
.text:00404849                 mov     edi, ds:dword_41B1C0
.text:0040484F                 mov     edx, ebp
.text:00404851                 mov     [esp+2Ch+var_20], 0
.text:00404859                 sub     edx, esi
.text:0040485B                 mov     [esp+2Ch+var_24], edx
.text:0040485F                 mov     [esp+2Ch+Type], esi
.text:00404863                 mov     [esp+2Ch+C], edi
.text:00404866                 call    sub_409F20
.text:0040486B                 cmp     eax, 1
.text:0040486E                 jl      short loc_40487D
.text:00404870
.text:00404870 loc_404870:                             ; CODE XREF: sub_403F40+942↓j
.text:00404870                 mov     edx, ds:dword_41B4C0
.text:00404876                 add     esi, eax
.text:00404878                 jmp     loc_403FD5
.text:0040487D ; ---------------------------------------------------------------------------
.text:0040487D
.text:0040487D loc_40487D:                             ; CODE XREF: sub_403F40+92E↑j
.text:0040487D                 mov     eax, 1
.text:00404882                 jmp     short loc_404870
.text:00404884 ; ---------------------------------------------------------------------------
.text:00404884
.text:00404884 loc_404884:                             ; CODE XREF: sub_403F40+3B↑j
.text:00404884                 mov     edx, ds:dword_41B4C0
.text:0040488A                 jmp     short loc_404830
.text:0040488A sub_403F40      endp
.text:0040488A
.text:0040488A ; ---------------------------------------------------------------------------
.text:0040488C ; const char aS_0[]
.text:0040488C aS_0            db '.%s "',0            ; DATA XREF: sub_4048A0+9↓o
.text:00404892 asc_404892      db ' "',0               ; DATA XREF: sub_4048A0+79↓o
.text:00404892                                         ; sub_4048A0+EC↓o ...
.text:00404895                 align 10h
.text:004048A0
.text:004048A0 ; =============== S U B R O U T I N E =======================================
.text:004048A0
.text:004048A0
.text:004048A0 sub_4048A0      proc near               ; CODE XREF: sub_403E10:loc_403E98↑p
.text:004048A0
.text:004048A0 Format          = dword ptr -1Ch
.text:004048A0 ElementSize     = dword ptr -18h
.text:004048A0 ElementCount    = dword ptr -14h
.text:004048A0 Stream          = dword ptr -10h
.text:004048A0
.text:004048A0                 sub     esp, 1Ch
.text:004048A3                 mov     ecx, off_41A020
.text:004048A9                 mov     [esp+1Ch+Format], offset aS_0 ; ".%s \""
.text:004048B0                 mov     [esp+1Ch+ElementSize], ecx
.text:004048B4                 call    printf
.text:004048B9                 mov     edx, ds:dword_41B4E0
.text:004048BF                 mov     ecx, ds:dword_41B4E4
.text:004048C5                 mov     [esp+1Ch+Format], edx
.text:004048C8                 mov     [esp+1Ch+ElementSize], ecx
.text:004048CC                 call    sub_405670
.text:004048D1                 mov     edx, ds:dword_41B4F0
.text:004048D7                 test    edx, edx
.text:004048D9                 jnz     loc_404C10
.text:004048DF
.text:004048DF loc_4048DF:                             ; CODE XREF: sub_4048A0+38B↓j
.text:004048DF                 mov     edx, ds:_iob
.text:004048E5                 mov     ecx, [edx+24h]
.text:004048E8                 dec     ecx
.text:004048E9                 mov     [edx+24h], ecx
.text:004048EC                 test    ecx, ecx
.text:004048EE                 js      loc_404BF0
.text:004048F4                 mov     ecx, ds:_iob
.text:004048FA                 mov     eax, [ecx+20h]
.text:004048FD                 mov     byte ptr [eax], 22h ; '"'
.text:00404900                 inc     dword ptr [ecx+20h]
.text:00404903
.text:00404903 loc_404903:                             ; CODE XREF: sub_4048A0+369↓j
.text:00404903                 mov     [esp+1Ch+ElementCount], 2 ; ElementCount
.text:0040490B                 mov     edx, ds:_iob
.text:00404911                 mov     [esp+1Ch+ElementSize], 1 ; ElementSize
.text:00404919                 mov     [esp+1Ch+Format], offset asc_404892 ; " \""
.text:00404920                 add     edx, 20h ; ' '
.text:00404923                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404927                 call    fwrite
.text:0040492C                 mov     ecx, ds:dword_41B510
.text:00404932                 test    ecx, ecx
.text:00404934                 jnz     loc_404BD0
.text:0040493A
.text:0040493A loc_40493A:                             ; CODE XREF: sub_4048A0+34B↓j
.text:0040493A                 mov     edx, ds:dword_41B500
.text:00404940                 mov     ecx, ds:dword_41B504
.text:00404946                 mov     [esp+1Ch+Format], edx
.text:00404949                 mov     [esp+1Ch+ElementSize], ecx
.text:0040494D                 call    sub_405670
.text:00404952                 mov     edx, ds:_iob
.text:00404958                 mov     ecx, [edx+24h]
.text:0040495B                 dec     ecx
.text:0040495C                 mov     [edx+24h], ecx
.text:0040495F                 test    ecx, ecx
.text:00404961                 js      loc_404BB0
.text:00404967                 mov     ecx, ds:_iob
.text:0040496D                 mov     eax, [ecx+20h]
.text:00404970                 mov     byte ptr [eax], 22h ; '"'
.text:00404973                 inc     dword ptr [ecx+20h]
.text:00404976
.text:00404976 loc_404976:                             ; CODE XREF: sub_4048A0+329↓j
.text:00404976                 mov     [esp+1Ch+ElementCount], 2 ; ElementCount
.text:0040497E                 mov     ecx, ds:_iob
.text:00404984                 mov     [esp+1Ch+ElementSize], 1 ; ElementSize
.text:0040498C                 mov     [esp+1Ch+Format], offset asc_404892 ; " \""
.text:00404993                 add     ecx, 20h ; ' '
.text:00404996                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:0040499A                 call    fwrite
.text:0040499F                 mov     ecx, ds:dword_41B524
.text:004049A5                 mov     edx, ds:dword_41B520
.text:004049AB                 mov     [esp+1Ch+ElementSize], ecx
.text:004049AF                 mov     [esp+1Ch+Format], edx
.text:004049B2                 call    sub_405670
.text:004049B7                 mov     ecx, ds:dword_41B530
.text:004049BD                 test    ecx, ecx
.text:004049BF                 jnz     loc_404B90
.text:004049C5
.text:004049C5 loc_4049C5:                             ; CODE XREF: sub_4048A0+30B↓j
.text:004049C5                 mov     edx, ds:_iob
.text:004049CB                 mov     ecx, [edx+24h]
.text:004049CE                 dec     ecx
.text:004049CF                 mov     [edx+24h], ecx
.text:004049D2                 test    ecx, ecx
.text:004049D4                 js      loc_404B70
.text:004049DA                 mov     ecx, ds:_iob
.text:004049E0                 mov     eax, [ecx+20h]
.text:004049E3                 mov     byte ptr [eax], 22h ; '"'
.text:004049E6                 inc     dword ptr [ecx+20h]
.text:004049E9
.text:004049E9 loc_4049E9:                             ; CODE XREF: sub_4048A0+2E9↓j
.text:004049E9                 mov     [esp+1Ch+ElementCount], 2 ; ElementCount
.text:004049F1                 mov     edx, ds:_iob
.text:004049F7                 mov     [esp+1Ch+ElementSize], 1 ; ElementSize
.text:004049FF                 mov     [esp+1Ch+Format], offset asc_404892 ; " \""
.text:00404A06                 add     edx, 20h ; ' '
.text:00404A09                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A0D                 call    fwrite
.text:00404A12                 mov     ecx, ds:dword_41B550
.text:00404A18                 test    ecx, ecx
.text:00404A1A                 jnz     loc_404B50
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_4048A0+2CB↓j
.text:00404A20                 mov     edx, ds:dword_41B540
.text:00404A26                 mov     ecx, ds:dword_41B544
.text:00404A2C                 mov     [esp+1Ch+Format], edx
.text:00404A2F                 mov     [esp+1Ch+ElementSize], ecx
.text:00404A33                 call    sub_405670
.text:00404A38                 mov     edx, ds:_iob
.text:00404A3E                 mov     ecx, [edx+24h]
.text:00404A41                 dec     ecx
.text:00404A42                 mov     [edx+24h], ecx
.text:00404A45                 test    ecx, ecx
.text:00404A47                 js      loc_404B30
.text:00404A4D                 mov     ecx, ds:_iob
.text:00404A53                 mov     eax, [ecx+20h]
.text:00404A56                 mov     byte ptr [eax], 22h ; '"'
.text:00404A59                 inc     dword ptr [ecx+20h]
.text:00404A5C
.text:00404A5C loc_404A5C:                             ; CODE XREF: sub_4048A0+2A9↓j
.text:00404A5C                 cmp     ds:byte_41B010, 0
.text:00404A63                 jnz     short loc_404A6E
.text:00404A65                 cmp     ds:byte_41B000, 0
.text:00404A6C                 jz      short loc_404ACF
.text:00404A6E
.text:00404A6E loc_404A6E:                             ; CODE XREF: sub_4048A0+1C3↑j
.text:00404A6E                 mov     [esp+1Ch+ElementCount], 2 ; ElementCount
.text:00404A76                 mov     ecx, ds:_iob
.text:00404A7C                 mov     [esp+1Ch+ElementSize], 1 ; ElementSize
.text:00404A84                 mov     [esp+1Ch+Format], offset asc_404892 ; " \""
.text:00404A8B                 add     ecx, 20h ; ' '
.text:00404A8E                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:00404A92                 call    fwrite
.text:00404A97                 mov     edx, ds:Buffer
.text:00404A9D                 mov     ecx, ds:dword_41B564
.text:00404AA3                 mov     [esp+1Ch+Format], edx
.text:00404AA6                 mov     [esp+1Ch+ElementSize], ecx
.text:00404AAA                 call    sub_405670
.text:00404AAF                 mov     edx, ds:_iob
.text:00404AB5                 mov     ecx, [edx+24h]
.text:00404AB8                 dec     ecx
.text:00404AB9                 mov     [edx+24h], ecx
.text:00404ABC                 test    ecx, ecx
.text:00404ABE                 js      short loc_404B0E
.text:00404AC0                 mov     ecx, ds:_iob
.text:00404AC6                 mov     eax, [ecx+20h]
.text:00404AC9                 mov     byte ptr [eax], 22h ; '"'
.text:00404ACC                 inc     dword ptr [ecx+20h]
.text:00404ACF
.text:00404ACF loc_404ACF:                             ; CODE XREF: sub_4048A0+1CC↑j
.text:00404ACF                                         ; sub_4048A0+287↓j
.text:00404ACF                 mov     edx, ds:_iob
.text:00404AD5                 mov     ecx, [edx+24h]
.text:00404AD8                 dec     ecx
.text:00404AD9                 mov     [edx+24h], ecx
.text:00404ADC                 test    ecx, ecx
.text:00404ADE                 js      short loc_404AF3
.text:00404AE0                 mov     ecx, ds:_iob
.text:00404AE6                 mov     eax, [ecx+20h]
.text:00404AE9                 mov     byte ptr [eax], 0Ah
.text:00404AEC                 inc     dword ptr [ecx+20h]
.text:00404AEF
.text:00404AEF loc_404AEF:                             ; CODE XREF: sub_4048A0+26C↓j
.text:00404AEF                 add     esp, 1Ch
.text:00404AF2                 retn
.text:00404AF3 ; ---------------------------------------------------------------------------
.text:00404AF3
.text:00404AF3 loc_404AF3:                             ; CODE XREF: sub_4048A0+23E↑j
.text:00404AF3                 mov     [esp+1Ch+Format], 0Ah ; Ch
.text:00404AFA                 mov     edx, ds:_iob
.text:00404B00                 add     edx, 20h ; ' '
.text:00404B03                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404B07                 call    _flsbuf
.text:00404B0C                 jmp     short loc_404AEF
.text:00404B0E ; ---------------------------------------------------------------------------
.text:00404B0E
.text:00404B0E loc_404B0E:                             ; CODE XREF: sub_4048A0+21E↑j
.text:00404B0E                 mov     [esp+1Ch+Format], 22h ; '"' ; Ch
.text:00404B15                 mov     edx, ds:_iob
.text:00404B1B                 add     edx, 20h ; ' '
.text:00404B1E                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404B22                 call    _flsbuf
.text:00404B27                 jmp     short loc_404ACF
.text:00404B27 ; ---------------------------------------------------------------------------
.text:00404B29                 align 10h
.text:00404B30
.text:00404B30 loc_404B30:                             ; CODE XREF: sub_4048A0+1A7↑j
.text:00404B30                 mov     [esp+1Ch+Format], 22h ; '"' ; Ch
.text:00404B37                 mov     edx, ds:_iob
.text:00404B3D                 add     edx, 20h ; ' '
.text:00404B40                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404B44                 call    _flsbuf
.text:00404B49                 jmp     loc_404A5C
.text:00404B49 ; ---------------------------------------------------------------------------
.text:00404B4E                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_4048A0+17A↑j
.text:00404B50                 mov     edx, ds:_iob
.text:00404B56                 mov     ecx, off_41A01C
.text:00404B5C                 add     edx, 20h ; ' '
.text:00404B5F                 mov     [esp+1Ch+ElementSize], edx ; Stream
.text:00404B63                 mov     [esp+1Ch+Format], ecx ; Buffer
.text:00404B66                 call    fputs
.text:00404B6B                 jmp     loc_404A20
.text:00404B70 ; ---------------------------------------------------------------------------
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_4048A0+134↑j
.text:00404B70                 mov     [esp+1Ch+Format], 22h ; '"' ; Ch
.text:00404B77                 mov     edx, ds:_iob
.text:00404B7D                 add     edx, 20h ; ' '
.text:00404B80                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404B84                 call    _flsbuf
.text:00404B89                 jmp     loc_4049E9
.text:00404B89 ; ---------------------------------------------------------------------------
.text:00404B8E                 align 10h
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_4048A0+11F↑j
.text:00404B90                 mov     ecx, ds:_iob
.text:00404B96                 mov     edx, off_41A01C
.text:00404B9C                 add     ecx, 20h ; ' '
.text:00404B9F                 mov     [esp+1Ch+ElementSize], ecx ; Stream
.text:00404BA3                 mov     [esp+1Ch+Format], edx ; Buffer
.text:00404BA6                 call    fputs
.text:00404BAB                 jmp     loc_4049C5
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: sub_4048A0+C1↑j
.text:00404BB0                 mov     [esp+1Ch+Format], 22h ; '"' ; Ch
.text:00404BB7                 mov     edx, ds:_iob
.text:00404BBD                 add     edx, 20h ; ' '
.text:00404BC0                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404BC4                 call    _flsbuf
.text:00404BC9                 jmp     loc_404976
.text:00404BC9 ; ---------------------------------------------------------------------------
.text:00404BCE                 align 10h
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: sub_4048A0+94↑j
.text:00404BD0                 mov     edx, ds:_iob
.text:00404BD6                 mov     ecx, off_41A01C
.text:00404BDC                 add     edx, 20h ; ' '
.text:00404BDF                 mov     [esp+1Ch+ElementSize], edx ; Stream
.text:00404BE3                 mov     [esp+1Ch+Format], ecx ; Buffer
.text:00404BE6                 call    fputs
.text:00404BEB                 jmp     loc_40493A
.text:00404BF0 ; ---------------------------------------------------------------------------
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: sub_4048A0+4E↑j
.text:00404BF0                 mov     [esp+1Ch+Format], 22h ; '"' ; Ch
.text:00404BF7                 mov     edx, ds:_iob
.text:00404BFD                 add     edx, 20h ; ' '
.text:00404C00                 mov     [esp+1Ch+ElementSize], edx ; File
.text:00404C04                 call    _flsbuf
.text:00404C09                 jmp     loc_404903
.text:00404C09 ; ---------------------------------------------------------------------------
.text:00404C0E                 align 10h
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: sub_4048A0+39↑j
.text:00404C10                 mov     ecx, ds:_iob
.text:00404C16                 mov     edx, off_41A01C
.text:00404C1C                 add     ecx, 20h ; ' '
.text:00404C1F                 mov     [esp+1Ch+ElementSize], ecx ; Stream
.text:00404C23                 mov     [esp+1Ch+Format], edx ; Buffer
.text:00404C26                 call    fputs
.text:00404C2B                 jmp     loc_4048DF
.text:00404C2B sub_4048A0      endp
.text:00404C2B
.text:00404C2B ; ---------------------------------------------------------------------------
.text:00404C30 ; const char aS_1[]
.text:00404C30 aS_1            db '\%s ',0             ; DATA XREF: sub_404C40+20↓o
.text:00404C35 asc_404C35      db '}{',0               ; DATA XREF: sub_404C40+7E↓o
.text:00404C35                                         ; sub_404C40+BF↓o ...
.text:00404C38                 align 10h
.text:00404C40
.text:00404C40 ; =============== S U B R O U T I N E =======================================
.text:00404C40
.text:00404C40
.text:00404C40 sub_404C40      proc near               ; CODE XREF: sub_403E10:loc_403E8A↑p
.text:00404C40
.text:00404C40 Format          = dword ptr -2Ch
.text:00404C40 ElementSize     = dword ptr -28h
.text:00404C40 ElementCount    = dword ptr -24h
.text:00404C40 Stream          = dword ptr -20h
.text:00404C40 var_1C          = dword ptr -1Ch
.text:00404C40 var_14          = dword ptr -14h
.text:00404C40 var_10          = dword ptr -10h
.text:00404C40
.text:00404C40                 push    edi
.text:00404C41                 push    esi
.text:00404C42                 push    ebx
.text:00404C43                 sub     esp, 20h
.text:00404C46                 mov     ecx, off_41A020
.text:00404C4C                 mov     [esp+2Ch+var_14], 0
.text:00404C54                 mov     [esp+2Ch+var_10], 0
.text:00404C5C                 mov     [esp+2Ch+ElementSize], ecx
.text:00404C60                 mov     [esp+2Ch+Format], offset aS_1 ; "\\%s "
.text:00404C67                 call    printf
.text:00404C6C                 mov     edx, ds:_iob
.text:00404C72                 mov     ecx, [edx+24h]
.text:00404C75                 dec     ecx
.text:00404C76                 mov     [edx+24h], ecx
.text:00404C79                 test    ecx, ecx
.text:00404C7B                 js      loc_404F73
.text:00404C81                 mov     ebx, ds:_iob
.text:00404C87                 mov     eax, [ebx+20h]
.text:00404C8A                 mov     byte ptr [eax], 7Bh ; '{'
.text:00404C8D                 inc     dword ptr [ebx+20h]
.text:00404C90
.text:00404C90 loc_404C90:                             ; CODE XREF: sub_404C40+34C↓j
.text:00404C90                 mov     edx, ds:dword_41B4E0
.text:00404C96                 mov     edi, ds:dword_41B4E4
.text:00404C9C                 mov     [esp+2Ch+Format], edx
.text:00404C9F                 mov     [esp+2Ch+ElementSize], edi
.text:00404CA3                 call    sub_405670
.text:00404CA8                 mov     [esp+2Ch+ElementCount], 2 ; ElementCount
.text:00404CB0                 mov     esi, ds:_iob
.text:00404CB6                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00404CBE                 mov     [esp+2Ch+Format], offset asc_404C35 ; "}{"
.text:00404CC5                 add     esi, 20h ; ' '
.text:00404CC8                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404CCC                 call    fwrite
.text:00404CD1                 mov     ecx, ds:dword_41B504
.text:00404CD7                 mov     ebx, ds:dword_41B500
.text:00404CDD                 mov     [esp+2Ch+ElementSize], ecx
.text:00404CE1                 mov     [esp+2Ch+Format], ebx
.text:00404CE4                 call    sub_405670
.text:00404CE9                 mov     [esp+2Ch+ElementCount], 2 ; ElementCount
.text:00404CF1                 mov     edx, ds:_iob
.text:00404CF7                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00404CFF                 mov     [esp+2Ch+Format], offset asc_404C35 ; "}{"
.text:00404D06                 add     edx, 20h ; ' '
.text:00404D09                 mov     [esp+2Ch+Stream], edx ; Stream
.text:00404D0D                 call    fwrite
.text:00404D12                 mov     edi, ds:Str
.text:00404D18                 mov     edx, ds:dword_41B520
.text:00404D1E                 mov     ecx, ds:dword_41B524
.text:00404D24                 test    edi, edi
.text:00404D26                 mov     esi, edx
.text:00404D28                 mov     ebx, edx
.text:00404D2A                 mov     [esp+2Ch+var_10], ecx
.text:00404D2E                 jnz     loc_404F38
.text:00404D34                 movzx   edi, byte ptr [edx]
.text:00404D37                 cmp     ds:byte_41B1E0[edi], 0
.text:00404D3E                 jz      loc_404F30
.text:00404D44                 cmp     edx, ecx
.text:00404D46                 jnb     short loc_404D70
.text:00404D48                 nop
.text:00404D49                 lea     esi, [esi+0]
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: sub_404C40+11F↓j
.text:00404D50                 inc     ebx
.text:00404D51                 cmp     ebx, ecx
.text:00404D53                 jnb     short loc_404D70
.text:00404D55                 movzx   edx, byte ptr [ebx]
.text:00404D58                 cmp     ds:byte_41B1E0[edx], 0
.text:00404D5F                 jnz     short loc_404D50
.text:00404D61                 jmp     short loc_404D70
.text:00404D61 ; ---------------------------------------------------------------------------
.text:00404D63                 align 10h
.text:00404D70
.text:00404D70 loc_404D70:                             ; CODE XREF: sub_404C40+106↑j
.text:00404D70                                         ; sub_404C40+113↑j ...
.text:00404D70                 mov     [esp+2Ch+var_14], ebx
.text:00404D74                 mov     [esp+2Ch+Format], esi
.text:00404D77                 mov     [esp+2Ch+ElementSize], ebx
.text:00404D7B                 call    sub_405670
.text:00404D80                 mov     [esp+2Ch+ElementCount], 2 ; ElementCount
.text:00404D88                 mov     ecx, ds:_iob
.text:00404D8E                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00404D96                 mov     [esp+2Ch+Format], offset asc_404C35 ; "}{"
.text:00404D9D                 add     ecx, 20h ; ' '
.text:00404DA0                 mov     [esp+2Ch+Stream], ecx ; Stream
.text:00404DA4                 call    fwrite
.text:00404DA9                 mov     esi, [esp+2Ch+var_14]
.text:00404DAD                 mov     ebx, [esp+2Ch+var_10]
.text:00404DB1                 mov     [esp+2Ch+Format], esi
.text:00404DB4                 mov     [esp+2Ch+ElementSize], ebx
.text:00404DB8                 call    sub_405670
.text:00404DBD                 mov     [esp+2Ch+ElementCount], 2 ; ElementCount
.text:00404DC5                 mov     edx, ds:_iob
.text:00404DCB                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00404DD3                 mov     [esp+2Ch+Format], offset asc_404C35 ; "}{"
.text:00404DDA                 add     edx, 20h ; ' '
.text:00404DDD                 mov     [esp+2Ch+Stream], edx ; Stream
.text:00404DE1                 call    fwrite
.text:00404DE6                 mov     edi, ds:dword_41B540
.text:00404DEC                 mov     ecx, ds:dword_41B544
.text:00404DF2                 mov     [esp+2Ch+Format], edi
.text:00404DF5                 mov     [esp+2Ch+ElementSize], ecx
.text:00404DF9                 call    sub_405670
.text:00404DFE                 mov     esi, ds:_iob
.text:00404E04                 mov     ebx, [esi+24h]
.text:00404E07                 dec     ebx
.text:00404E08                 mov     [esi+24h], ebx
.text:00404E0B                 test    ebx, ebx
.text:00404E0D                 js      loc_404F0B
.text:00404E13                 mov     edi, ds:_iob
.text:00404E19                 mov     ebx, [edi+20h]
.text:00404E1C                 mov     byte ptr [ebx], 7Dh ; '}'
.text:00404E1F                 inc     dword ptr [edi+20h]
.text:00404E22
.text:00404E22 loc_404E22:                             ; CODE XREF: sub_404C40+2E4↓j
.text:00404E22                 cmp     ds:byte_41B010, 0
.text:00404E29                 jnz     short loc_404E34
.text:00404E2B                 cmp     ds:byte_41B000, 0
.text:00404E32                 jz      short loc_404E90
.text:00404E34
.text:00404E34 loc_404E34:                             ; CODE XREF: sub_404C40+1E9↑j
.text:00404E34                 mov     ecx, ds:_iob
.text:00404E3A                 mov     esi, [ecx+24h]
.text:00404E3D                 dec     esi
.text:00404E3E                 mov     [ecx+24h], esi
.text:00404E41                 test    esi, esi
.text:00404E43                 js      loc_404EED
.text:00404E49                 mov     edi, ds:_iob
.text:00404E4F                 mov     eax, [edi+20h]
.text:00404E52                 mov     byte ptr [eax], 7Bh ; '{'
.text:00404E55                 inc     dword ptr [edi+20h]
.text:00404E58
.text:00404E58 loc_404E58:                             ; CODE XREF: sub_404C40+2C6↓j
.text:00404E58                 mov     edi, ds:Buffer
.text:00404E5E                 mov     ecx, ds:dword_41B564
.text:00404E64                 mov     [esp+2Ch+Format], edi
.text:00404E67                 mov     [esp+2Ch+ElementSize], ecx
.text:00404E6B                 call    sub_405670
.text:00404E70                 mov     edx, ds:_iob
.text:00404E76                 mov     esi, [edx+24h]
.text:00404E79                 dec     esi
.text:00404E7A                 mov     [edx+24h], esi
.text:00404E7D                 test    esi, esi
.text:00404E7F                 js      short loc_404ED2
.text:00404E81                 mov     ebx, ds:_iob
.text:00404E87                 mov     eax, [ebx+20h]
.text:00404E8A                 mov     byte ptr [eax], 7Dh ; '}'
.text:00404E8D                 inc     dword ptr [ebx+20h]
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404C40+1F2↑j
.text:00404E90                                         ; sub_404C40+2AB↓j
.text:00404E90                 mov     edx, ds:_iob
.text:00404E96                 mov     ecx, [edx+24h]
.text:00404E99                 dec     ecx
.text:00404E9A                 mov     [edx+24h], ecx
.text:00404E9D                 test    ecx, ecx
.text:00404E9F                 js      short loc_404EB7
.text:00404EA1                 mov     edi, ds:_iob
.text:00404EA7                 mov     ebx, [edi+20h]
.text:00404EAA                 mov     byte ptr [ebx], 0Ah
.text:00404EAD                 inc     dword ptr [edi+20h]
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404C40+290↓j
.text:00404EB0                 add     esp, 20h
.text:00404EB3                 pop     ebx
.text:00404EB4                 pop     esi
.text:00404EB5                 pop     edi
.text:00404EB6                 retn
.text:00404EB7 ; ---------------------------------------------------------------------------
.text:00404EB7
.text:00404EB7 loc_404EB7:                             ; CODE XREF: sub_404C40+25F↑j
.text:00404EB7                 mov     [esp+2Ch+Format], 0Ah ; Ch
.text:00404EBE                 mov     esi, ds:_iob
.text:00404EC4                 add     esi, 20h ; ' '
.text:00404EC7                 mov     [esp+2Ch+ElementSize], esi ; File
.text:00404ECB                 call    _flsbuf
.text:00404ED0                 jmp     short loc_404EB0
.text:00404ED2 ; ---------------------------------------------------------------------------
.text:00404ED2
.text:00404ED2 loc_404ED2:                             ; CODE XREF: sub_404C40+23F↑j
.text:00404ED2                 mov     [esp+2Ch+Format], 7Dh ; '}' ; Ch
.text:00404ED9                 mov     esi, ds:_iob
.text:00404EDF                 add     esi, 20h ; ' '
.text:00404EE2                 mov     [esp+2Ch+ElementSize], esi ; File
.text:00404EE6                 call    _flsbuf
.text:00404EEB                 jmp     short loc_404E90
.text:00404EED ; ---------------------------------------------------------------------------
.text:00404EED
.text:00404EED loc_404EED:                             ; CODE XREF: sub_404C40+203↑j
.text:00404EED                 mov     [esp+2Ch+Format], 7Bh ; '{' ; Ch
.text:00404EF4                 mov     ebx, ds:_iob
.text:00404EFA                 add     ebx, 20h ; ' '
.text:00404EFD                 mov     [esp+2Ch+ElementSize], ebx ; File
.text:00404F01                 call    _flsbuf
.text:00404F06                 jmp     loc_404E58
.text:00404F0B ; ---------------------------------------------------------------------------
.text:00404F0B
.text:00404F0B loc_404F0B:                             ; CODE XREF: sub_404C40+1CD↑j
.text:00404F0B                 mov     [esp+2Ch+Format], 7Dh ; '}' ; Ch
.text:00404F12                 mov     edx, ds:_iob
.text:00404F18                 add     edx, 20h ; ' '
.text:00404F1B                 mov     [esp+2Ch+ElementSize], edx ; File
.text:00404F1F                 call    _flsbuf
.text:00404F24                 jmp     loc_404E22
.text:00404F24 ; ---------------------------------------------------------------------------
.text:00404F29                 align 10h
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: sub_404C40+FE↑j
.text:00404F30                 lea     ebx, [edx+1]
.text:00404F33                 jmp     loc_404D70
.text:00404F38 ; ---------------------------------------------------------------------------
.text:00404F38
.text:00404F38 loc_404F38:                             ; CODE XREF: sub_404C40+EE↑j
.text:00404F38                 mov     [esp+2Ch+var_1C], 0
.text:00404F40                 sub     ecx, edx
.text:00404F42                 mov     [esp+2Ch+ElementCount], ecx
.text:00404F46                 mov     ecx, ds:dword_41B1C0
.text:00404F4C                 mov     [esp+2Ch+Stream], 0
.text:00404F54                 mov     [esp+2Ch+ElementSize], edx
.text:00404F58                 mov     [esp+2Ch+Format], ecx
.text:00404F5B                 call    sub_409F20
.text:00404F60                 cmp     eax, 1
.text:00404F63                 jl      short loc_404F6C
.text:00404F65
.text:00404F65 loc_404F65:                             ; CODE XREF: sub_404C40+331↓j
.text:00404F65                 add     ebx, eax
.text:00404F67                 jmp     loc_404D70
.text:00404F6C ; ---------------------------------------------------------------------------
.text:00404F6C
.text:00404F6C loc_404F6C:                             ; CODE XREF: sub_404C40+323↑j
.text:00404F6C                 mov     eax, 1
.text:00404F71                 jmp     short loc_404F65
.text:00404F73 ; ---------------------------------------------------------------------------
.text:00404F73
.text:00404F73 loc_404F73:                             ; CODE XREF: sub_404C40+3B↑j
.text:00404F73                 mov     [esp+2Ch+Format], 7Bh ; '{' ; Ch
.text:00404F7A                 mov     esi, ds:_iob
.text:00404F80                 add     esi, 20h ; ' '
.text:00404F83                 mov     [esp+2Ch+ElementSize], esi ; File
.text:00404F87                 call    _flsbuf
.text:00404F8C                 jmp     loc_404C90
.text:00404F8C sub_404C40      endp
.text:00404F8C
.text:00404F91 ; ---------------------------------------------------------------------------
.text:00404F91                 jmp     short sub_404FA0
.text:00404F91 ; ---------------------------------------------------------------------------
.text:00404F93                 align 10h
.text:00404FA0
.text:00404FA0 ; =============== S U B R O U T I N E =======================================
.text:00404FA0
.text:00404FA0
.text:00404FA0 sub_404FA0      proc near               ; CODE XREF: sub_403E10:loc_403E91↑p
.text:00404FA0                                         ; .text:00404F91↑j
.text:00404FA0
.text:00404FA0 Buffer          = dword ptr -1Ch
.text:00404FA0 File            = dword ptr -18h
.text:00404FA0 var_5           = byte ptr -5
.text:00404FA0
.text:00404FA0                 push    ebx
.text:00404FA1                 sub     esp, 18h
.text:00404FA4                 cmp     ds:byte_41B020, 0
.text:00404FAB                 jnz     loc_405050
.text:00404FB1                 cmp     ds:byte_41B000, 0
.text:00404FB8                 jz      loc_405567
.text:00404FBE                 mov     ecx, ds:dword_41B564
.text:00404FC4                 mov     ebx, ds:Buffer
.text:00404FCA                 mov     [esp+1Ch+File], ecx
.text:00404FCE                 mov     [esp+1Ch+Buffer], ebx
.text:00404FD1                 call    sub_405670
.text:00404FD6                 mov     edx, ds:_iob
.text:00404FDC                 mov     ecx, [edx+24h]
.text:00404FDF                 dec     ecx
.text:00404FE0                 mov     [edx+24h], ecx
.text:00404FE3                 test    ecx, ecx
.text:00404FE5                 js      loc_405549
.text:00404FEB                 mov     ecx, ds:_iob
.text:00404FF1                 mov     eax, [ecx+20h]
.text:00404FF4                 mov     byte ptr [eax], 3Ah ; ':'
.text:00404FF7                 inc     dword ptr [ecx+20h]
.text:00404FFA
.text:00404FFA loc_404FFA:                             ; CODE XREF: sub_404FA0+5C2↓j
.text:00404FFA                 mov     ebx, ds:dword_41B2F0
.text:00405000                 mov     ecx, dword_41A018
.text:00405006                 mov     edx, ds:dword_41B564
.text:0040500C                 mov     eax, ds:Buffer
.text:00405011                 add     ecx, ebx
.text:00405013                 sub     edx, eax
.text:00405015                 sub     ecx, edx
.text:00405017                 lea     ebx, [ecx-1]
.text:0040501A                 test    ebx, ebx
.text:0040501C                 jle     short loc_405050
.text:0040501E                 mov     esi, esi
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404FA0+A7↓j
.text:00405020                 mov     edx, ds:_iob
.text:00405026                 mov     ecx, [edx+24h]
.text:00405029                 dec     ecx
.text:0040502A                 mov     [edx+24h], ecx
.text:0040502D                 test    ecx, ecx
.text:0040502F                 js      loc_40552B
.text:00405035                 mov     ecx, ds:_iob
.text:0040503B                 mov     eax, [ecx+20h]
.text:0040503E                 mov     byte ptr [eax], 20h ; ' '
.text:00405041                 inc     dword ptr [ecx+20h]
.text:00405044
.text:00405044 loc_405044:                             ; CODE XREF: sub_404FA0+5A4↓j
.text:00405044                 dec     ebx
.text:00405045                 test    ebx, ebx
.text:00405047                 jg      short loc_405020
.text:00405049                 lea     esi, [esi+0]
.text:00405050
.text:00405050 loc_405050:                             ; CODE XREF: sub_404FA0+B↑j
.text:00405050                                         ; sub_404FA0+7C↑j ...
.text:00405050                 mov     ebx, ds:dword_41B4E4
.text:00405056                 cmp     ds:dword_41B4E0, ebx
.text:0040505C                 jb      loc_405441
.text:00405062                 mov     eax, ds:dword_41B500
.text:00405067                 mov     ebx, ds:dword_41B504
.text:0040506D                 mov     edx, ds:dword_41B4A0
.text:00405073                 mov     ecx, dword_41A018
.text:00405079                 sub     ebx, eax
.text:0040507B                 mov     eax, ds:dword_41B510
.text:00405080                 sub     edx, ecx
.text:00405082                 sub     edx, ebx
.text:00405084                 test    eax, eax
.text:00405086                 jz      short loc_405090
.text:00405088                 mov     ecx, ds:dword_41B4D0
.text:0040508E                 sub     edx, ecx
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: sub_404FA0+E6↑j
.text:00405090                 test    edx, edx
.text:00405092                 mov     ebx, edx
.text:00405094                 jle     short loc_4050CE
.text:00405096                 lea     esi, [esi+0]
.text:00405099                 lea     edi, [edi+0]
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: sub_404FA0+127↓j
.text:004050A0                 mov     edx, ds:_iob
.text:004050A6                 mov     ecx, [edx+24h]
.text:004050A9                 dec     ecx
.text:004050AA                 mov     [edx+24h], ecx
.text:004050AD                 test    ecx, ecx
.text:004050AF                 js      loc_405423
.text:004050B5                 mov     ecx, ds:_iob
.text:004050BB                 mov     eax, [ecx+20h]
.text:004050BE                 mov     byte ptr [eax], 20h ; ' '
.text:004050C1                 inc     dword ptr [ecx+20h]
.text:004050C4
.text:004050C4 loc_4050C4:                             ; CODE XREF: sub_404FA0+49C↓j
.text:004050C4                 dec     ebx
.text:004050C5                 test    ebx, ebx
.text:004050C7                 jg      short loc_4050A0
.text:004050C9
.text:004050C9 loc_4050C9:                             ; CODE XREF: sub_404FA0+545↓j
.text:004050C9                 mov     eax, ds:dword_41B510
.text:004050CE
.text:004050CE loc_4050CE:                             ; CODE XREF: sub_404FA0+F4↑j
.text:004050CE                                         ; sub_404FA0+512↓j
.text:004050CE                 test    eax, eax
.text:004050D0                 jnz     loc_405403
.text:004050D6
.text:004050D6 loc_4050D6:                             ; CODE XREF: sub_404FA0+47E↓j
.text:004050D6                 mov     ebx, ds:dword_41B504
.text:004050DC                 mov     edx, ds:dword_41B500
.text:004050E2                 mov     [esp+1Ch+File], ebx
.text:004050E6                 mov     [esp+1Ch+Buffer], edx
.text:004050E9                 call    sub_405670
.text:004050EE                 mov     ebx, dword_41A018
.text:004050F4                 test    ebx, ebx
.text:004050F6                 jle     short loc_405129
.text:004050F8                 nop
.text:004050F9                 lea     esi, [esi+0]
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_404FA0+187↓j
.text:00405100                 mov     edx, ds:_iob
.text:00405106                 mov     ecx, [edx+24h]
.text:00405109                 dec     ecx
.text:0040510A                 mov     [edx+24h], ecx
.text:0040510D                 test    ecx, ecx
.text:0040510F                 js      loc_4053E5
.text:00405115                 mov     ecx, ds:_iob
.text:0040511B                 mov     eax, [ecx+20h]
.text:0040511E                 mov     byte ptr [eax], 20h ; ' '
.text:00405121                 inc     dword ptr [ecx+20h]
.text:00405124
.text:00405124 loc_405124:                             ; CODE XREF: sub_404FA0+45E↓j
.text:00405124                 dec     ebx
.text:00405125                 test    ebx, ebx
.text:00405127                 jg      short loc_405100
.text:00405129
.text:00405129 loc_405129:                             ; CODE XREF: sub_404FA0+156↑j
.text:00405129                 mov     edx, ds:dword_41B520
.text:0040512F                 mov     ecx, ds:dword_41B524
.text:00405135                 mov     [esp+1Ch+Buffer], edx
.text:00405138                 mov     [esp+1Ch+File], ecx
.text:0040513C                 call    sub_405670
.text:00405141                 mov     ebx, ds:dword_41B530
.text:00405147                 test    ebx, ebx
.text:00405149                 jnz     loc_4053C5
.text:0040514F
.text:0040514F loc_40514F:                             ; CODE XREF: sub_404FA0+440↓j
.text:0040514F                 mov     ebx, ds:dword_41B540
.text:00405155                 mov     ecx, ds:dword_41B544
.text:0040515B                 cmp     ebx, ecx
.text:0040515D                 jnb     loc_40531D
.text:00405163                 mov     edx, ds:dword_41B520
.text:00405169                 sub     ecx, ebx
.text:0040516B                 mov     eax, ds:dword_41B524
.text:00405170                 mov     ebx, ds:dword_41B530
.text:00405176                 sub     eax, edx
.text:00405178                 mov     edx, ds:dword_41B4A0
.text:0040517E                 sub     edx, eax
.text:00405180                 test    ebx, ebx
.text:00405182                 jz      loc_405316
.text:00405188                 mov     eax, edx
.text:0040518A                 mov     edx, ds:dword_41B4D0
.text:00405190                 sub     eax, edx
.text:00405192
.text:00405192 loc_405192:                             ; CODE XREF: sub_404FA0+378↓j
.text:00405192                 sub     eax, ecx
.text:00405194                 mov     edx, eax
.text:00405196                 mov     eax, ds:dword_41B550
.text:0040519B                 test    eax, eax
.text:0040519D                 jz      short loc_4051A7
.text:0040519F                 mov     ebx, ds:dword_41B4D0
.text:004051A5                 sub     edx, ebx
.text:004051A7
.text:004051A7 loc_4051A7:                             ; CODE XREF: sub_404FA0+1FD↑j
.text:004051A7                 test    edx, edx
.text:004051A9                 mov     ebx, edx
.text:004051AB                 jle     short loc_4051DE
.text:004051AD                 lea     esi, [esi+0]
.text:004051B0
.text:004051B0 loc_4051B0:                             ; CODE XREF: sub_404FA0+237↓j
.text:004051B0                 mov     edx, ds:_iob
.text:004051B6                 mov     ecx, [edx+24h]
.text:004051B9                 dec     ecx
.text:004051BA                 mov     [edx+24h], ecx
.text:004051BD                 test    ecx, ecx
.text:004051BF                 js      loc_4052F8
.text:004051C5                 mov     ecx, ds:_iob
.text:004051CB                 mov     eax, [ecx+20h]
.text:004051CE                 mov     byte ptr [eax], 20h ; ' '
.text:004051D1                 inc     dword ptr [ecx+20h]
.text:004051D4
.text:004051D4 loc_4051D4:                             ; CODE XREF: sub_404FA0+371↓j
.text:004051D4                 dec     ebx
.text:004051D5                 test    ebx, ebx
.text:004051D7                 jg      short loc_4051B0
.text:004051D9                 mov     eax, ds:dword_41B550
.text:004051DE
.text:004051DE loc_4051DE:                             ; CODE XREF: sub_404FA0+20B↑j
.text:004051DE                 test    eax, eax
.text:004051E0                 jnz     loc_4052D8
.text:004051E6
.text:004051E6 loc_4051E6:                             ; CODE XREF: sub_404FA0+353↓j
.text:004051E6                 mov     edx, ds:dword_41B540
.text:004051EC                 mov     ebx, ds:dword_41B544
.text:004051F2                 mov     [esp+1Ch+Buffer], edx
.text:004051F5                 mov     [esp+1Ch+File], ebx
.text:004051F9                 call    sub_405670
.text:004051FE
.text:004051FE loc_4051FE:                             ; CODE XREF: sub_404FA0+405↓j
.text:004051FE                 movzx   ebx, ds:byte_41B020
.text:00405205                 movzx   ecx, ds:byte_41B010
.text:0040520C                 mov     [esp+1Ch+var_5], bl
.text:00405210
.text:00405210 loc_405210:                             ; CODE XREF: sub_404FA0+3A8↓j
.text:00405210                                         ; sub_404FA0+3D8↓j
.text:00405210                 xor     edx, edx
.text:00405212                 test    cl, cl
.text:00405214                 jnz     short loc_40521F
.text:00405216                 cmp     ds:byte_41B000, 0
.text:0040521D                 jz      short loc_405224
.text:0040521F
.text:0040521F loc_40521F:                             ; CODE XREF: sub_404FA0+274↑j
.text:0040521F                 mov     edx, 1
.text:00405224
.text:00405224 loc_405224:                             ; CODE XREF: sub_404FA0+27D↑j
.text:00405224                 movzx   ecx, [esp+1Ch+var_5]
.text:00405229                 test    ecx, edx
.text:0040522B                 jz      short loc_40527D
.text:0040522D                 mov     ebx, dword_41A018
.text:00405233                 test    ebx, ebx
.text:00405235                 jle     short loc_405265
.text:00405237                 mov     esi, esi
.text:00405239                 lea     edi, [edi+0]
.text:00405240
.text:00405240 loc_405240:                             ; CODE XREF: sub_404FA0+2C3↓j
.text:00405240                 mov     edx, ds:_iob
.text:00405246                 mov     ecx, [edx+24h]
.text:00405249                 dec     ecx
.text:0040524A                 mov     [edx+24h], ecx
.text:0040524D                 test    ecx, ecx
.text:0040524F                 js      short loc_4052BD
.text:00405251                 mov     ecx, ds:_iob
.text:00405257                 mov     eax, [ecx+20h]
.text:0040525A                 mov     byte ptr [eax], 20h ; ' '
.text:0040525D                 inc     dword ptr [ecx+20h]
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: sub_404FA0+336↓j
.text:00405260                 dec     ebx
.text:00405261                 test    ebx, ebx
.text:00405263                 jg      short loc_405240
.text:00405265
.text:00405265 loc_405265:                             ; CODE XREF: sub_404FA0+295↑j
.text:00405265                 mov     ecx, ds:Buffer
.text:0040526B                 mov     ebx, ds:dword_41B564
.text:00405271                 mov     [esp+1Ch+Buffer], ecx
.text:00405274                 mov     [esp+1Ch+File], ebx
.text:00405278                 call    sub_405670
.text:0040527D
.text:0040527D loc_40527D:                             ; CODE XREF: sub_404FA0+28B↑j
.text:0040527D                 mov     edx, ds:_iob
.text:00405283                 mov     ebx, [edx+24h]
.text:00405286                 dec     ebx
.text:00405287                 mov     [edx+24h], ebx
.text:0040528A                 test    ebx, ebx
.text:0040528C                 js      short loc_4052A2
.text:0040528E                 mov     ecx, ds:_iob
.text:00405294                 mov     eax, [ecx+20h]
.text:00405297                 mov     byte ptr [eax], 0Ah
.text:0040529A                 inc     dword ptr [ecx+20h]
.text:0040529D
.text:0040529D loc_40529D:                             ; CODE XREF: sub_404FA0+31B↓j
.text:0040529D                 add     esp, 18h
.text:004052A0                 pop     ebx
.text:004052A1                 retn
.text:004052A2 ; ---------------------------------------------------------------------------
.text:004052A2
.text:004052A2 loc_4052A2:                             ; CODE XREF: sub_404FA0+2EC↑j
.text:004052A2                 mov     [esp+1Ch+Buffer], 0Ah ; Ch
.text:004052A9                 mov     ebx, ds:_iob
.text:004052AF                 add     ebx, 20h ; ' '
.text:004052B2                 mov     [esp+1Ch+File], ebx ; File
.text:004052B6                 call    _flsbuf
.text:004052BB                 jmp     short loc_40529D
.text:004052BD ; ---------------------------------------------------------------------------
.text:004052BD
.text:004052BD loc_4052BD:                             ; CODE XREF: sub_404FA0+2AF↑j
.text:004052BD                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004052C4                 mov     edx, ds:_iob
.text:004052CA                 add     edx, 20h ; ' '
.text:004052CD                 mov     [esp+1Ch+File], edx ; File
.text:004052D1                 call    _flsbuf
.text:004052D6                 jmp     short loc_405260
.text:004052D8 ; ---------------------------------------------------------------------------
.text:004052D8
.text:004052D8 loc_4052D8:                             ; CODE XREF: sub_404FA0+240↑j
.text:004052D8                 mov     ecx, ds:_iob
.text:004052DE                 mov     ebx, off_41A01C
.text:004052E4                 add     ecx, 20h ; ' '
.text:004052E7                 mov     [esp+1Ch+File], ecx ; Stream
.text:004052EB                 mov     [esp+1Ch+Buffer], ebx ; Buffer
.text:004052EE                 call    fputs
.text:004052F3                 jmp     loc_4051E6
.text:004052F8 ; ---------------------------------------------------------------------------
.text:004052F8
.text:004052F8 loc_4052F8:                             ; CODE XREF: sub_404FA0+21F↑j
.text:004052F8                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004052FF                 mov     edx, ds:_iob
.text:00405305                 add     edx, 20h ; ' '
.text:00405308                 mov     [esp+1Ch+File], edx ; File
.text:0040530C                 call    _flsbuf
.text:00405311                 jmp     loc_4051D4
.text:00405316 ; ---------------------------------------------------------------------------
.text:00405316
.text:00405316 loc_405316:                             ; CODE XREF: sub_404FA0+1E2↑j
.text:00405316                 mov     eax, edx
.text:00405318                 jmp     loc_405192
.text:0040531D ; ---------------------------------------------------------------------------
.text:0040531D
.text:0040531D loc_40531D:                             ; CODE XREF: sub_404FA0+1BD↑j
.text:0040531D                 movzx   ecx, ds:byte_41B010
.text:00405324                 xor     edx, edx
.text:00405326                 test    cl, cl
.text:00405328                 jnz     short loc_405333
.text:0040532A                 cmp     ds:byte_41B000, 0
.text:00405331                 jz      short loc_405338
.text:00405333
.text:00405333 loc_405333:                             ; CODE XREF: sub_404FA0+388↑j
.text:00405333                 mov     edx, 1
.text:00405338
.text:00405338 loc_405338:                             ; CODE XREF: sub_404FA0+391↑j
.text:00405338                 movzx   eax, ds:byte_41B020
.text:0040533F                 movzx   ebx, al
.text:00405342                 test    ebx, edx
.text:00405344                 mov     [esp+1Ch+var_5], al
.text:00405348                 jz      loc_405210
.text:0040534E                 mov     ebx, ds:dword_41B524
.text:00405354                 mov     eax, ds:dword_41B520
.text:00405359                 mov     edx, ds:dword_41B4A0
.text:0040535F                 sub     ebx, eax
.text:00405361                 sub     edx, ebx
.text:00405363                 mov     ebx, ds:dword_41B530
.text:00405369                 test    ebx, ebx
.text:0040536B                 jz      short loc_405374
.text:0040536D                 mov     eax, ds:dword_41B4D0
.text:00405372                 sub     edx, eax
.text:00405374
.text:00405374 loc_405374:                             ; CODE XREF: sub_404FA0+3CB↑j
.text:00405374                 test    edx, edx
.text:00405376                 mov     ebx, edx
.text:00405378                 jle     loc_405210
.text:0040537E                 mov     esi, esi
.text:00405380
.text:00405380 loc_405380:                             ; CODE XREF: sub_404FA0+403↓j
.text:00405380                 mov     edx, ds:_iob
.text:00405386                 mov     ecx, [edx+24h]
.text:00405389                 dec     ecx
.text:0040538A                 mov     [edx+24h], ecx
.text:0040538D                 test    ecx, ecx
.text:0040538F                 js      short loc_4053AA
.text:00405391                 mov     ecx, ds:_iob
.text:00405397                 mov     eax, [ecx+20h]
.text:0040539A                 mov     byte ptr [eax], 20h ; ' '
.text:0040539D                 inc     dword ptr [ecx+20h]
.text:004053A0
.text:004053A0 loc_4053A0:                             ; CODE XREF: sub_404FA0+423↓j
.text:004053A0                 dec     ebx
.text:004053A1                 test    ebx, ebx
.text:004053A3                 jg      short loc_405380
.text:004053A5                 jmp     loc_4051FE
.text:004053AA ; ---------------------------------------------------------------------------
.text:004053AA
.text:004053AA loc_4053AA:                             ; CODE XREF: sub_404FA0+3EF↑j
.text:004053AA                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004053B1                 mov     edx, ds:_iob
.text:004053B7                 add     edx, 20h ; ' '
.text:004053BA                 mov     [esp+1Ch+File], edx ; File
.text:004053BE                 call    _flsbuf
.text:004053C3                 jmp     short loc_4053A0
.text:004053C5 ; ---------------------------------------------------------------------------
.text:004053C5
.text:004053C5 loc_4053C5:                             ; CODE XREF: sub_404FA0+1A9↑j
.text:004053C5                 mov     ecx, ds:_iob
.text:004053CB                 mov     ebx, off_41A01C
.text:004053D1                 add     ecx, 20h ; ' '
.text:004053D4                 mov     [esp+1Ch+File], ecx ; Stream
.text:004053D8                 mov     [esp+1Ch+Buffer], ebx ; Buffer
.text:004053DB                 call    fputs
.text:004053E0                 jmp     loc_40514F
.text:004053E5 ; ---------------------------------------------------------------------------
.text:004053E5
.text:004053E5 loc_4053E5:                             ; CODE XREF: sub_404FA0+16F↑j
.text:004053E5                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004053EC                 mov     edx, ds:_iob
.text:004053F2                 add     edx, 20h ; ' '
.text:004053F5                 mov     [esp+1Ch+File], edx ; File
.text:004053F9                 call    _flsbuf
.text:004053FE                 jmp     loc_405124
.text:00405403 ; ---------------------------------------------------------------------------
.text:00405403
.text:00405403 loc_405403:                             ; CODE XREF: sub_404FA0+130↑j
.text:00405403                 mov     ecx, ds:_iob
.text:00405409                 mov     ebx, off_41A01C
.text:0040540F                 add     ecx, 20h ; ' '
.text:00405412                 mov     [esp+1Ch+File], ecx ; Stream
.text:00405416                 mov     [esp+1Ch+Buffer], ebx ; Buffer
.text:00405419                 call    fputs
.text:0040541E                 jmp     loc_4050D6
.text:00405423 ; ---------------------------------------------------------------------------
.text:00405423
.text:00405423 loc_405423:                             ; CODE XREF: sub_404FA0+10F↑j
.text:00405423                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:0040542A                 mov     edx, ds:_iob
.text:00405430                 add     edx, 20h ; ' '
.text:00405433                 mov     [esp+1Ch+File], edx ; File
.text:00405437                 call    _flsbuf
.text:0040543C                 jmp     loc_4050C4
.text:00405441 ; ---------------------------------------------------------------------------
.text:00405441
.text:00405441 loc_405441:                             ; CODE XREF: sub_404FA0+BC↑j
.text:00405441                 mov     edx, ds:dword_41B4E0
.text:00405447                 mov     ecx, ds:dword_41B4E4
.text:0040544D                 mov     [esp+1Ch+Buffer], edx
.text:00405450                 mov     [esp+1Ch+File], ecx
.text:00405454                 call    sub_405670
.text:00405459                 mov     ebx, ds:dword_41B4F0
.text:0040545F                 test    ebx, ebx
.text:00405461                 jnz     loc_405505
.text:00405467
.text:00405467 loc_405467:                             ; CODE XREF: sub_404FA0+586↓j
.text:00405467                 mov     ecx, dword_41A018
.text:0040546D                 mov     edx, ds:dword_41B4A0
.text:00405473                 mov     eax, ds:dword_41B504
.text:00405478                 sub     edx, ecx
.text:0040547A                 mov     ecx, ds:dword_41B500
.text:00405480                 sub     eax, ecx
.text:00405482                 sub     edx, eax
.text:00405484                 mov     ecx, ds:dword_41B4E4
.text:0040548A                 mov     eax, ds:dword_41B4E0
.text:0040548F                 sub     ecx, eax
.text:00405491                 mov     eax, ds:dword_41B510
.text:00405496                 test    eax, eax
.text:00405498                 jz      short loc_4054A0
.text:0040549A                 sub     edx, ds:dword_41B4D0
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_404FA0+4F8↑j
.text:004054A0                 sub     edx, ecx
.text:004054A2                 test    ebx, ebx
.text:004054A4                 jz      short loc_4054AE
.text:004054A6                 mov     ebx, ds:dword_41B4D0
.text:004054AC                 sub     edx, ebx
.text:004054AE
.text:004054AE loc_4054AE:                             ; CODE XREF: sub_404FA0+504↑j
.text:004054AE                 test    edx, edx
.text:004054B0                 mov     ebx, edx
.text:004054B2                 jle     loc_4050CE
.text:004054B8                 nop
.text:004054B9                 lea     esi, [esi+0]
.text:004054C0
.text:004054C0 loc_4054C0:                             ; CODE XREF: sub_404FA0+543↓j
.text:004054C0                 mov     edx, ds:_iob
.text:004054C6                 mov     ecx, [edx+24h]
.text:004054C9                 dec     ecx
.text:004054CA                 mov     [edx+24h], ecx
.text:004054CD                 test    ecx, ecx
.text:004054CF                 js      short loc_4054EA
.text:004054D1                 mov     ecx, ds:_iob
.text:004054D7                 mov     eax, [ecx+20h]
.text:004054DA                 mov     byte ptr [eax], 20h ; ' '
.text:004054DD                 inc     dword ptr [ecx+20h]
.text:004054E0
.text:004054E0 loc_4054E0:                             ; CODE XREF: sub_404FA0+563↓j
.text:004054E0                 dec     ebx
.text:004054E1                 test    ebx, ebx
.text:004054E3                 jg      short loc_4054C0
.text:004054E5                 jmp     loc_4050C9
.text:004054EA ; ---------------------------------------------------------------------------
.text:004054EA
.text:004054EA loc_4054EA:                             ; CODE XREF: sub_404FA0+52F↑j
.text:004054EA                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004054F1                 mov     edx, ds:_iob
.text:004054F7                 add     edx, 20h ; ' '
.text:004054FA                 mov     [esp+1Ch+File], edx ; File
.text:004054FE                 call    _flsbuf
.text:00405503                 jmp     short loc_4054E0
.text:00405505 ; ---------------------------------------------------------------------------
.text:00405505
.text:00405505 loc_405505:                             ; CODE XREF: sub_404FA0+4C1↑j
.text:00405505                 mov     ecx, ds:_iob
.text:0040550B                 mov     ebx, off_41A01C
.text:00405511                 add     ecx, 20h ; ' '
.text:00405514                 mov     [esp+1Ch+Buffer], ebx ; Buffer
.text:00405517                 mov     [esp+1Ch+File], ecx ; Stream
.text:0040551B                 call    fputs
.text:00405520                 mov     ebx, ds:dword_41B4F0
.text:00405526                 jmp     loc_405467
.text:0040552B ; ---------------------------------------------------------------------------
.text:0040552B
.text:0040552B loc_40552B:                             ; CODE XREF: sub_404FA0+8F↑j
.text:0040552B                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:00405532                 mov     edx, ds:_iob
.text:00405538                 add     edx, 20h ; ' '
.text:0040553B                 mov     [esp+1Ch+File], edx ; File
.text:0040553F                 call    _flsbuf
.text:00405544                 jmp     loc_405044
.text:00405549 ; ---------------------------------------------------------------------------
.text:00405549
.text:00405549 loc_405549:                             ; CODE XREF: sub_404FA0+45↑j
.text:00405549                 mov     [esp+1Ch+Buffer], 3Ah ; ':' ; Ch
.text:00405550                 mov     edx, ds:_iob
.text:00405556                 add     edx, 20h ; ' '
.text:00405559                 mov     [esp+1Ch+File], edx ; File
.text:0040555D                 call    _flsbuf
.text:00405562                 jmp     loc_404FFA
.text:00405567 ; ---------------------------------------------------------------------------
.text:00405567
.text:00405567 loc_405567:                             ; CODE XREF: sub_404FA0+18↑j
.text:00405567                 mov     ecx, ds:Buffer
.text:0040556D                 mov     ebx, ds:dword_41B564
.text:00405573                 mov     [esp+1Ch+Buffer], ecx
.text:00405576                 mov     [esp+1Ch+File], ebx
.text:0040557A                 call    sub_405670
.text:0040557F                 mov     ebx, dword_41A018
.text:00405585                 mov     edx, ds:dword_41B2F0
.text:0040558B                 mov     ecx, ds:dword_41B564
.text:00405591                 mov     eax, ds:Buffer
.text:00405596                 add     ebx, edx
.text:00405598                 sub     ecx, eax
.text:0040559A                 sub     ebx, ecx
.text:0040559C                 test    ebx, ebx
.text:0040559E                 jle     loc_405050
.text:004055A4                 lea     esi, [esi+0]
.text:004055AA                 lea     edi, [edi+0]
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_404FA0+633↓j
.text:004055B0                 mov     edx, ds:_iob
.text:004055B6                 mov     ecx, [edx+24h]
.text:004055B9                 dec     ecx
.text:004055BA                 mov     [edx+24h], ecx
.text:004055BD                 test    ecx, ecx
.text:004055BF                 js      short loc_4055DA
.text:004055C1                 mov     ecx, ds:_iob
.text:004055C7                 mov     eax, [ecx+20h]
.text:004055CA                 mov     byte ptr [eax], 20h ; ' '
.text:004055CD                 inc     dword ptr [ecx+20h]
.text:004055D0
.text:004055D0 loc_4055D0:                             ; CODE XREF: sub_404FA0+653↓j
.text:004055D0                 dec     ebx
.text:004055D1                 test    ebx, ebx
.text:004055D3                 jg      short loc_4055B0
.text:004055D5                 jmp     loc_405050
.text:004055DA ; ---------------------------------------------------------------------------
.text:004055DA
.text:004055DA loc_4055DA:                             ; CODE XREF: sub_404FA0+61F↑j
.text:004055DA                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:004055E1                 mov     edx, ds:_iob
.text:004055E7                 add     edx, 20h ; ' '
.text:004055EA                 mov     [esp+1Ch+File], edx ; File
.text:004055EE                 call    _flsbuf
.text:004055F3                 jmp     short loc_4055D0
.text:004055F3 sub_404FA0      endp
.text:004055F3
.text:004055F3 ; ---------------------------------------------------------------------------
.text:004055F5 ; const char aC[]
.text:004055F5 aC              db '$\%c$',0            ; DATA XREF: sub_405670:loc_405851↓o
.text:004055FB aBackslash      db '\backslash{}',0     ; DATA XREF: sub_405670+20F↓o
.text:00405608 aAe             db '\AE{}',0            ; DATA XREF: sub_405670+295↓o
.text:0040560E aOe             db '\oe{}',0            ; DATA XREF: sub_405670+2CC↓o
.text:00405614 aAe_0           db '\ae{}',0            ; DATA XREF: sub_405670+2F5↓o
.text:0040561A aOe_0           db '\OE{}',0            ; DATA XREF: sub_405670+317↓o
.text:00405620 asc_405620      db '\',0                ; DATA XREF: sub_405670+331↓o
.text:00405620                                         ; sub_405670+359↓o ...
.text:00405622 ; const char aSC[]
.text:00405622 aSC             db '\',27h,'%s%c',0     ; DATA XREF: sub_405670+341↓o
.text:00405629 aSC_0           db '\`%s%c',0           ; DATA XREF: sub_405670+369↓o
.text:00405630 aSC_1           db '\^%s%c',0           ; DATA XREF: sub_405670+389↓o
.text:00405637 aSC_2           db '\"%s%c',0           ; DATA XREF: sub_405670+3A9↓o
.text:0040563E aSC_3           db '\~%s%c',0           ; DATA XREF: sub_405670+3C9↓o
.text:00405645 aCC             db '\c{%c}',0           ; DATA XREF: sub_405670+3D9↓o
.text:0040564C aAa             db '\aa{}',0            ; DATA XREF: sub_405670+409↓o
.text:00405652 aAa_0           db '\AA{}',0            ; DATA XREF: sub_405670+42B↓o
.text:00405658 aO              db '\o{}',0             ; DATA XREF: sub_405670+45B↓o
.text:0040565D aO_0            db '\O{}',0             ; DATA XREF: sub_405670+47D↓o
.text:00405662                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670
.text:00405670 sub_405670      proc near               ; CODE XREF: sub_4048A0+2C↑p
.text:00405670                                         ; sub_4048A0+AD↑p ...
.text:00405670
.text:00405670 Format          = dword ptr -2Ch
.text:00405670 File            = dword ptr -28h
.text:00405670 ElementCount    = dword ptr -24h
.text:00405670 Stream          = dword ptr -20h
.text:00405670 arg_0           = dword ptr  4
.text:00405670 arg_4           = dword ptr  8
.text:00405670
.text:00405670                 push    ebp
.text:00405671                 push    edi
.text:00405672                 push    esi
.text:00405673                 push    ebx
.text:00405674                 sub     esp, 1Ch
.text:00405677                 mov     eax, [esp+2Ch+arg_0]
.text:0040567B                 mov     ebp, [esp+2Ch+arg_4]
.text:0040567F                 mov     esi, eax
.text:00405681                 cmp     eax, ebp
.text:00405683                 jnb     loc_40573C
.text:00405689                 lea     esi, [esi+0]
.text:00405690
.text:00405690 loc_405690:                             ; CODE XREF: sub_405670+C6↓j
.text:00405690                 movzx   ebx, byte ptr [esi]
.text:00405693                 movzx   eax, bl
.text:00405696                 cmp     ds:byte_41B3A0[eax], 0
.text:0040569D                 jz      loc_405B00
.text:004056A3                 movsx   edx, ds:byte_40F1D0[eax]
.text:004056AA                 test    edx, edx
.text:004056AC                 jz      short loc_4056BB
.text:004056AE                 cmp     ds:dword_41B030, 3
.text:004056B5                 jz      loc_405897
.text:004056BB
.text:004056BB loc_4056BB:                             ; CODE XREF: sub_405670+3C↑j
.text:004056BB                 movzx   eax, bl
.text:004056BE                 cmp     eax, 5Ch ; '\'
.text:004056C1                 jz      loc_405869
.text:004056C7                 cmp     eax, 5Ch ; '\'
.text:004056CA                 jg      loc_405830
.text:004056D0                 cmp     eax, 22h ; '"'
.text:004056D3                 jz      loc_4057B4
.text:004056D9                 cmp     eax, 22h ; '"'
.text:004056DC                 jl      loc_405780
.text:004056E2                 cmp     eax, 26h ; '&'
.text:004056E5                 jg      loc_405780
.text:004056EB
.text:004056EB loc_4056EB:                             ; CODE XREF: sub_405670+1D3↓j
.text:004056EB                 mov     edx, ds:_iob
.text:004056F1                 mov     ecx, [edx+24h]
.text:004056F4                 dec     ecx
.text:004056F5                 mov     [edx+24h], ecx
.text:004056F8                 test    ecx, ecx
.text:004056FA                 js      short loc_40575E
.text:004056FC                 mov     edi, ds:_iob
.text:00405702                 mov     eax, [edi+20h]
.text:00405705                 mov     byte ptr [eax], 5Ch ; '\'
.text:00405708                 inc     dword ptr [edi+20h]
.text:0040570B
.text:0040570B loc_40570B:                             ; CODE XREF: sub_405670+107↓j
.text:0040570B                 mov     edx, ds:_iob
.text:00405711                 mov     edi, [edx+24h]
.text:00405714                 dec     edi
.text:00405715                 mov     [edx+24h], edi
.text:00405718                 test    edi, edi
.text:0040571A                 js      short loc_405744
.text:0040571C                 mov     eax, ds:_iob
.text:00405721                 mov     ecx, [eax+20h]
.text:00405724                 mov     [ecx], bl
.text:00405726                 lea     esi, [esi+0]
.text:00405729                 lea     edi, [edi+0]
.text:00405730
.text:00405730 loc_405730:                             ; CODE XREF: sub_405670+12C↓j
.text:00405730                                         ; sub_405670+180↓j ...
.text:00405730                 inc     dword ptr [eax+20h]
.text:00405733
.text:00405733 def_4058A7:                             ; CODE XREF: sub_405670+EC↓j
.text:00405733                                         ; sub_405670+1F4↓j ...
.text:00405733                 inc     esi             ; jumptable 004058A7 default case, case 0
.text:00405734                 cmp     esi, ebp
.text:00405736                 jb      loc_405690
.text:0040573C
.text:0040573C loc_40573C:                             ; CODE XREF: sub_405670+13↑j
.text:0040573C                 add     esp, 1Ch
.text:0040573F                 pop     ebx
.text:00405740                 pop     esi
.text:00405741                 pop     edi
.text:00405742                 pop     ebp
.text:00405743                 retn
.text:00405744 ; ---------------------------------------------------------------------------
.text:00405744
.text:00405744 loc_405744:                             ; CODE XREF: sub_405670+AA↑j
.text:00405744                 mov     edi, ds:_iob
.text:0040574A                 movzx   eax, bl
.text:0040574D                 add     edi, 20h ; ' '
.text:00405750                 mov     [esp+2Ch+File], edi ; File
.text:00405754
.text:00405754 loc_405754:                             ; CODE XREF: sub_405670+4C3↓j
.text:00405754                 mov     [esp+2Ch+Format], eax ; Ch
.text:00405757
.text:00405757 loc_405757:                             ; CODE XREF: sub_405670+142↓j
.text:00405757                                         ; sub_405670+199↓j
.text:00405757                 call    _flsbuf
.text:0040575C                 jmp     short def_4058A7 ; jumptable 004058A7 default case, case 0
.text:0040575E ; ---------------------------------------------------------------------------
.text:0040575E
.text:0040575E loc_40575E:                             ; CODE XREF: sub_405670+8A↑j
.text:0040575E                 mov     [esp+2Ch+Format], 5Ch ; '\' ; Ch
.text:00405765                 mov     ecx, ds:_iob
.text:0040576B                 add     ecx, 20h ; ' '
.text:0040576E                 mov     [esp+2Ch+File], ecx ; File
.text:00405772                 call    _flsbuf
.text:00405777                 jmp     short loc_40570B
.text:00405777 ; ---------------------------------------------------------------------------
.text:00405779                 align 10h
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_405670+6C↑j
.text:00405780                                         ; sub_405670+75↑j ...
.text:00405780                 mov     edi, ds:_iob
.text:00405786                 mov     ecx, [edi+24h]
.text:00405789                 dec     ecx
.text:0040578A                 mov     [edi+24h], ecx
.text:0040578D                 test    ecx, ecx
.text:0040578F                 js      short loc_40579E
.text:00405791                 mov     eax, ds:_iob
.text:00405796                 mov     ebx, [eax+20h]
.text:00405799                 mov     byte ptr [ebx], 20h ; ' '
.text:0040579C                 jmp     short loc_405730
.text:0040579E ; ---------------------------------------------------------------------------
.text:0040579E
.text:0040579E loc_40579E:                             ; CODE XREF: sub_405670+11F↑j
.text:0040579E                 mov     [esp+2Ch+Format], 20h ; ' '
.text:004057A5                 mov     edx, ds:_iob
.text:004057AB                 add     edx, 20h ; ' '
.text:004057AE                 mov     [esp+2Ch+File], edx
.text:004057B2                 jmp     short loc_405757
.text:004057B4 ; ---------------------------------------------------------------------------
.text:004057B4
.text:004057B4 loc_4057B4:                             ; CODE XREF: sub_405670+63↑j
.text:004057B4                 mov     edx, ds:_iob
.text:004057BA                 mov     ecx, [edx+24h]
.text:004057BD                 dec     ecx
.text:004057BE                 mov     [edx+24h], ecx
.text:004057C1                 test    ecx, ecx
.text:004057C3                 js      short loc_40580E
.text:004057C5                 mov     ebx, ds:_iob
.text:004057CB                 mov     eax, [ebx+20h]
.text:004057CE                 mov     byte ptr [eax], 22h ; '"'
.text:004057D1                 inc     dword ptr [ebx+20h]
.text:004057D4
.text:004057D4 loc_4057D4:                             ; CODE XREF: sub_405670+1B7↓j
.text:004057D4                 mov     edx, ds:_iob
.text:004057DA                 mov     ecx, [edx+24h]
.text:004057DD                 dec     ecx
.text:004057DE                 mov     [edx+24h], ecx
.text:004057E1                 test    ecx, ecx
.text:004057E3                 js      short loc_4057F5
.text:004057E5                 mov     eax, ds:_iob
.text:004057EA                 mov     ebx, [eax+20h]
.text:004057ED                 mov     byte ptr [ebx], 22h ; '"'
.text:004057F0                 jmp     loc_405730
.text:004057F5 ; ---------------------------------------------------------------------------
.text:004057F5
.text:004057F5 loc_4057F5:                             ; CODE XREF: sub_405670+173↑j
.text:004057F5                 mov     [esp+2Ch+Format], 22h ; '"'
.text:004057FC                 mov     edi, ds:_iob
.text:00405802                 add     edi, 20h ; ' '
.text:00405805                 mov     [esp+2Ch+File], edi
.text:00405809                 jmp     loc_405757
.text:0040580E ; ---------------------------------------------------------------------------
.text:0040580E
.text:0040580E loc_40580E:                             ; CODE XREF: sub_405670+153↑j
.text:0040580E                 mov     [esp+2Ch+Format], 22h ; '"' ; Ch
.text:00405815                 mov     edi, ds:_iob
.text:0040581B                 add     edi, 20h ; ' '
.text:0040581E                 mov     [esp+2Ch+File], edi ; File
.text:00405822                 call    _flsbuf
.text:00405827                 jmp     short loc_4057D4
.text:00405827 ; ---------------------------------------------------------------------------
.text:00405829                 align 10h
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_405670+5A↑j
.text:00405830                 cmp     eax, 7Bh ; '{'
.text:00405833                 jz      short loc_405851
.text:00405835                 cmp     eax, 7Bh ; '{'
.text:00405838                 jg      short loc_405848
.text:0040583A                 cmp     eax, 5Fh ; '_'
.text:0040583D                 jnz     loc_405780
.text:00405843                 jmp     loc_4056EB
.text:00405848 ; ---------------------------------------------------------------------------
.text:00405848
.text:00405848 loc_405848:                             ; CODE XREF: sub_405670+1C8↑j
.text:00405848                 cmp     eax, 7Dh ; '}'
.text:0040584B                 jnz     loc_405780
.text:00405851
.text:00405851 loc_405851:                             ; CODE XREF: sub_405670+1C3↑j
.text:00405851                 mov     [esp+2Ch+Format], offset aC ; "$\\%c$"
.text:00405858                 movzx   edx, bl
.text:0040585B                 mov     [esp+2Ch+File], edx
.text:0040585F
.text:0040585F loc_40585F:                             ; CODE XREF: sub_405670+3E0↓j
.text:0040585F                 call    printf
.text:00405864                 jmp     def_4058A7      ; jumptable 004058A7 default case, case 0
.text:00405869 ; ---------------------------------------------------------------------------
.text:00405869
.text:00405869 loc_405869:                             ; CODE XREF: sub_405670+51↑j
.text:00405869                 mov     [esp+2Ch+ElementCount], 0Ch ; ElementCount
.text:00405871                 mov     ebx, ds:_iob
.text:00405877                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:0040587F                 mov     [esp+2Ch+Format], offset aBackslash ; "\\backslash{}"
.text:00405886
.text:00405886 loc_405886:                             ; CODE XREF: sub_405670+2FC↓j
.text:00405886                                         ; sub_405670+462↓j
.text:00405886                 add     ebx, 20h ; ' '
.text:00405889                 mov     [esp+2Ch+Stream], ebx ; Stream
.text:0040588D
.text:0040588D loc_40588D:                             ; CODE XREF: sub_405670+2A3↓j
.text:0040588D                                         ; sub_405670+2DA↓j ...
.text:0040588D                 call    fwrite
.text:00405892                 jmp     def_4058A7      ; jumptable 004058A7 default case, case 0
.text:00405897 ; ---------------------------------------------------------------------------
.text:00405897
.text:00405897 loc_405897:                             ; CODE XREF: sub_405670+45↑j
.text:00405897                 movsx   eax, ds:byte_40F0D0[eax]
.text:0040589E                 cmp     edx, 9          ; switch 10 cases
.text:004058A1                 ja      def_4058A7      ; jumptable 004058A7 default case, case 0
.text:004058A7                 jmp     ds:jpt_4058A7[edx*4] ; switch jump
.text:004058A7 ; ---------------------------------------------------------------------------
.text:004058AE                 align 10h
.text:004058B0 jpt_4058A7      dd offset def_4058A7    ; DATA XREF: sub_405670+237↑r
.text:004058B0                 dd offset loc_4058D8    ; jump table for switch statement
.text:004058B0                 dd offset loc_40599A
.text:004058B0                 dd offset loc_4059C2
.text:004058B0                 dd offset loc_4059E2
.text:004058B0                 dd offset loc_405A02
.text:004058B0                 dd offset loc_405A22
.text:004058B0                 dd offset loc_405A45
.text:004058B0                 dd offset loc_405A55
.text:004058B0                 dd offset loc_405AA7
.text:004058D8 ; ---------------------------------------------------------------------------
.text:004058D8
.text:004058D8 loc_4058D8:                             ; CODE XREF: sub_405670+237↑j
.text:004058D8                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:004058D8                 cmp     eax, 4Fh ; 'O'  ; jumptable 004058A7 case 1
.text:004058DB                 jz      loc_405971
.text:004058E1                 cmp     eax, 4Fh ; 'O'
.text:004058E4                 jg      short loc_405918
.text:004058E6                 cmp     eax, 41h ; 'A'
.text:004058E9                 jnz     loc_405780
.text:004058EF                 mov     [esp+2Ch+ElementCount], 5
.text:004058F7                 mov     edi, ds:_iob
.text:004058FD                 mov     [esp+2Ch+File], 1
.text:00405905                 mov     [esp+2Ch+Format], offset aAe ; "\\AE{}"
.text:0040590C
.text:0040590C loc_40590C:                             ; CODE XREF: sub_405670+484↓j
.text:0040590C                 add     edi, 20h ; ' '
.text:0040590F                 mov     [esp+2Ch+Stream], edi
.text:00405913                 jmp     loc_40588D
.text:00405918 ; ---------------------------------------------------------------------------
.text:00405918
.text:00405918 loc_405918:                             ; CODE XREF: sub_405670+274↑j
.text:00405918                 cmp     eax, 61h ; 'a'
.text:0040591B                 jz      short loc_40594F
.text:0040591D                 cmp     eax, 6Fh ; 'o'
.text:00405920                 jnz     loc_405780
.text:00405926                 mov     [esp+2Ch+ElementCount], 5
.text:0040592E                 mov     edx, ds:_iob
.text:00405934                 mov     [esp+2Ch+File], 1
.text:0040593C                 mov     [esp+2Ch+Format], offset aOe ; "\\oe{}"
.text:00405943
.text:00405943 loc_405943:                             ; CODE XREF: sub_405670+410↓j
.text:00405943                 add     edx, 20h ; ' '
.text:00405946                 mov     [esp+2Ch+Stream], edx
.text:0040594A                 jmp     loc_40588D
.text:0040594F ; ---------------------------------------------------------------------------
.text:0040594F
.text:0040594F loc_40594F:                             ; CODE XREF: sub_405670+2AB↑j
.text:0040594F                 mov     [esp+2Ch+ElementCount], 5
.text:00405957                 mov     ebx, ds:_iob
.text:0040595D                 mov     [esp+2Ch+File], 1
.text:00405965                 mov     [esp+2Ch+Format], offset aAe_0 ; "\\ae{}"
.text:0040596C                 jmp     loc_405886
.text:00405971 ; ---------------------------------------------------------------------------
.text:00405971
.text:00405971 loc_405971:                             ; CODE XREF: sub_405670+26B↑j
.text:00405971                 mov     [esp+2Ch+ElementCount], 5
.text:00405979                 mov     ecx, ds:_iob
.text:0040597F                 mov     [esp+2Ch+File], 1
.text:00405987                 mov     [esp+2Ch+Format], offset aOe_0 ; "\\OE{}"
.text:0040598E
.text:0040598E loc_40598E:                             ; CODE XREF: sub_405670+432↓j
.text:0040598E                 add     ecx, 20h ; ' '
.text:00405991                 mov     [esp+2Ch+Stream], ecx
.text:00405995                 jmp     loc_40588D
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599A
.text:0040599A loc_40599A:                             ; CODE XREF: sub_405670+237↑j
.text:0040599A                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:0040599A                 mov     [esp+2Ch+ElementCount], eax ; jumptable 004058A7 case 2
.text:0040599E                 cmp     eax, 69h ; 'i'
.text:004059A1                 mov     edx, offset asc_405620 ; "\\"
.text:004059A6                 jz      short loc_4059AD
.text:004059A8                 mov     edx, offset Locale
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: sub_405670+336↑j
.text:004059AD                 mov     [esp+2Ch+File], edx
.text:004059B1                 mov     [esp+2Ch+Format], offset aSC ; "\\'%s%c"
.text:004059B8
.text:004059B8 loc_4059B8:                             ; CODE XREF: sub_405670+370↓j
.text:004059B8                                         ; sub_405670+390↓j ...
.text:004059B8                 call    printf
.text:004059BD                 jmp     def_4058A7      ; jumptable 004058A7 default case, case 0
.text:004059C2 ; ---------------------------------------------------------------------------
.text:004059C2
.text:004059C2 loc_4059C2:                             ; CODE XREF: sub_405670+237↑j
.text:004059C2                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:004059C2                 mov     [esp+2Ch+ElementCount], eax ; jumptable 004058A7 case 3
.text:004059C6                 cmp     eax, 69h ; 'i'
.text:004059C9                 mov     edx, offset asc_405620 ; "\\"
.text:004059CE                 jz      short loc_4059D5
.text:004059D0                 mov     edx, offset Locale
.text:004059D5
.text:004059D5 loc_4059D5:                             ; CODE XREF: sub_405670+35E↑j
.text:004059D5                 mov     [esp+2Ch+File], edx
.text:004059D9                 mov     [esp+2Ch+Format], offset aSC_0 ; "\\`%s%c"
.text:004059E0                 jmp     short loc_4059B8
.text:004059E2 ; ---------------------------------------------------------------------------
.text:004059E2
.text:004059E2 loc_4059E2:                             ; CODE XREF: sub_405670+237↑j
.text:004059E2                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:004059E2                 mov     [esp+2Ch+ElementCount], eax ; jumptable 004058A7 case 4
.text:004059E6                 cmp     eax, 69h ; 'i'
.text:004059E9                 mov     edx, offset asc_405620 ; "\\"
.text:004059EE                 jz      short loc_4059F5
.text:004059F0                 mov     edx, offset Locale
.text:004059F5
.text:004059F5 loc_4059F5:                             ; CODE XREF: sub_405670+37E↑j
.text:004059F5                 mov     [esp+2Ch+File], edx
.text:004059F9                 mov     [esp+2Ch+Format], offset aSC_1 ; "\\^%s%c"
.text:00405A00                 jmp     short loc_4059B8
.text:00405A02 ; ---------------------------------------------------------------------------
.text:00405A02
.text:00405A02 loc_405A02:                             ; CODE XREF: sub_405670+237↑j
.text:00405A02                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:00405A02                 mov     [esp+2Ch+ElementCount], eax ; jumptable 004058A7 case 5
.text:00405A06                 cmp     eax, 69h ; 'i'
.text:00405A09                 mov     edx, offset asc_405620 ; "\\"
.text:00405A0E                 jz      short loc_405A15
.text:00405A10                 mov     edx, offset Locale
.text:00405A15
.text:00405A15 loc_405A15:                             ; CODE XREF: sub_405670+39E↑j
.text:00405A15                 mov     [esp+2Ch+File], edx
.text:00405A19                 mov     [esp+2Ch+Format], offset aSC_2 ; "\\\"%s%c"
.text:00405A20                 jmp     short loc_4059B8
.text:00405A22 ; ---------------------------------------------------------------------------
.text:00405A22
.text:00405A22 loc_405A22:                             ; CODE XREF: sub_405670+237↑j
.text:00405A22                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:00405A22                 mov     [esp+2Ch+ElementCount], eax ; jumptable 004058A7 case 6
.text:00405A26                 cmp     eax, 69h ; 'i'
.text:00405A29                 mov     edx, offset asc_405620 ; "\\"
.text:00405A2E                 jz      short loc_405A35
.text:00405A30                 mov     edx, offset Locale
.text:00405A35
.text:00405A35 loc_405A35:                             ; CODE XREF: sub_405670+3BE↑j
.text:00405A35                 mov     [esp+2Ch+File], edx
.text:00405A39                 mov     [esp+2Ch+Format], offset aSC_3 ; "\\~%s%c"
.text:00405A40                 jmp     loc_4059B8
.text:00405A45 ; ---------------------------------------------------------------------------
.text:00405A45
.text:00405A45 loc_405A45:                             ; CODE XREF: sub_405670+237↑j
.text:00405A45                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:00405A45                 mov     [esp+2Ch+File], eax ; jumptable 004058A7 case 7
.text:00405A49                 mov     [esp+2Ch+Format], offset aCC ; "\\c{%c}"
.text:00405A50                 jmp     loc_40585F
.text:00405A55 ; ---------------------------------------------------------------------------
.text:00405A55
.text:00405A55 loc_405A55:                             ; CODE XREF: sub_405670+237↑j
.text:00405A55                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:00405A55                 cmp     eax, 41h ; 'A'  ; jumptable 004058A7 case 8
.text:00405A58                 jz      short loc_405A85
.text:00405A5A                 cmp     eax, 61h ; 'a'
.text:00405A5D                 jnz     loc_405780
.text:00405A63                 mov     [esp+2Ch+ElementCount], 5
.text:00405A6B                 mov     edx, ds:_iob
.text:00405A71                 mov     [esp+2Ch+File], 1
.text:00405A79                 mov     [esp+2Ch+Format], offset aAa ; "\\aa{}"
.text:00405A80                 jmp     loc_405943
.text:00405A85 ; ---------------------------------------------------------------------------
.text:00405A85
.text:00405A85 loc_405A85:                             ; CODE XREF: sub_405670+3E8↑j
.text:00405A85                 mov     [esp+2Ch+ElementCount], 5
.text:00405A8D                 mov     ecx, ds:_iob
.text:00405A93                 mov     [esp+2Ch+File], 1
.text:00405A9B                 mov     [esp+2Ch+Format], offset aAa_0 ; "\\AA{}"
.text:00405AA2                 jmp     loc_40598E
.text:00405AA7 ; ---------------------------------------------------------------------------
.text:00405AA7
.text:00405AA7 loc_405AA7:                             ; CODE XREF: sub_405670+237↑j
.text:00405AA7                                         ; DATA XREF: sub_405670:jpt_4058A7↑o
.text:00405AA7                 cmp     eax, 4Fh ; 'O'  ; jumptable 004058A7 case 9
.text:00405AAA                 jz      short loc_405AD7
.text:00405AAC                 cmp     eax, 6Fh ; 'o'
.text:00405AAF                 jnz     loc_405780
.text:00405AB5                 mov     [esp+2Ch+ElementCount], 4
.text:00405ABD                 mov     ebx, ds:_iob
.text:00405AC3                 mov     [esp+2Ch+File], 1
.text:00405ACB                 mov     [esp+2Ch+Format], offset aO ; "\\o{}"
.text:00405AD2                 jmp     loc_405886
.text:00405AD7 ; ---------------------------------------------------------------------------
.text:00405AD7
.text:00405AD7 loc_405AD7:                             ; CODE XREF: sub_405670+43A↑j
.text:00405AD7                 mov     [esp+2Ch+ElementCount], 4
.text:00405ADF                 mov     edi, ds:_iob
.text:00405AE5                 mov     [esp+2Ch+File], 1
.text:00405AED                 mov     [esp+2Ch+Format], offset aO_0 ; "\\O{}"
.text:00405AF4                 jmp     loc_40590C
.text:00405AF4 ; ---------------------------------------------------------------------------
.text:00405AF9                 align 10h
.text:00405B00
.text:00405B00 loc_405B00:                             ; CODE XREF: sub_405670+2D↑j
.text:00405B00                 mov     edi, ds:_iob
.text:00405B06                 mov     ecx, [edi+24h]
.text:00405B09                 dec     ecx
.text:00405B0A                 mov     [edi+24h], ecx
.text:00405B0D                 test    ecx, ecx
.text:00405B0F                 js      short loc_405B23
.text:00405B11                 movzx   ecx, byte ptr [esi]
.text:00405B14                 mov     eax, ds:_iob
.text:00405B19                 mov     ebx, [eax+20h]
.text:00405B1C                 mov     [ebx], cl
.text:00405B1E                 jmp     loc_405730
.text:00405B23 ; ---------------------------------------------------------------------------
.text:00405B23
.text:00405B23 loc_405B23:                             ; CODE XREF: sub_405670+49F↑j
.text:00405B23                 mov     edx, ds:_iob
.text:00405B29                 add     edx, 20h ; ' '
.text:00405B2C                 mov     [esp+2Ch+File], edx
.text:00405B30                 movsx   eax, byte ptr [esi]
.text:00405B33                 jmp     loc_405754
.text:00405B33 sub_405670      endp
.text:00405B33
.text:00405B33 ; ---------------------------------------------------------------------------
.text:00405B38                 align 10h
.text:00405B40 aLiteral        db 'literal',0          ; DATA XREF: .text:00405B80↓o
.text:00405B48 aShell          db 'shell',0            ; DATA XREF: .text:00405B84↓o
.text:00405B4E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405B88↓o
.text:00405B5B aC_0            db 'c',0                ; DATA XREF: .text:00405B8C↓o
.text:00405B5D aEscape         db 'escape',0           ; DATA XREF: .text:00405B90↓o
.text:00405B64 aLocale         db 'locale',0           ; DATA XREF: .text:00405B94↓o
.text:00405B6B aClocale        db 'clocale',0          ; DATA XREF: .text:00405B98↓o
.text:00405B73                 align 10h
.text:00405B80                 dd offset aLiteral      ; "literal"
.text:00405B84                 dd offset aShell        ; "shell"
.text:00405B88                 dd offset aShellAlways  ; "shell-always"
.text:00405B8C                 dd offset aC_0          ; "c"
.text:00405B90                 dd offset aEscape       ; "escape"
.text:00405B94                 dd offset aLocale       ; "locale"
.text:00405B98                 dd offset aClocale      ; "clocale"
.text:00405B9C                 dd 2 dup(0)
.text:00405BA4                 dd 1, 2, 3, 4, 5, 6
.text:00405BBC asc_405BBC:                             ; DATA XREF: sub_405BD0+7E↓o
.text:00405BBC                                         ; sub_405BD0+A39↓o ...
.text:00405BBC                 text "UTF-16LE", '"',27h,'`'
.text:00405BC2                 align 10h
.text:00405BD0
.text:00405BD0 ; =============== S U B R O U T I N E =======================================
.text:00405BD0
.text:00405BD0
.text:00405BD0 ; int __cdecl sub_405BD0(int, int, char *Str, int, int, int)
.text:00405BD0 sub_405BD0      proc near               ; CODE XREF: sub_405BD0+43A↓p
.text:00405BD0                                         ; .text:00406793↓p ...
.text:00405BD0
.text:00405BD0 C               = dword ptr -4Ch
.text:00405BD0 Type            = dword ptr -48h
.text:00405BD0 SizeInBytes     = dword ptr -44h
.text:00405BD0 State           = dword ptr -40h
.text:00405BD0 var_3C          = dword ptr -3Ch
.text:00405BD0 var_38          = dword ptr -38h
.text:00405BD0 var_34          = dword ptr -34h
.text:00405BD0 var_30          = dword ptr -30h
.text:00405BD0 var_29          = byte ptr -29h
.text:00405BD0 var_28          = dword ptr -28h
.text:00405BD0 var_22          = byte ptr -22h
.text:00405BD0 var_21          = byte ptr -21h
.text:00405BD0 var_20          = dword ptr -20h
.text:00405BD0 var_1C          = dword ptr -1Ch
.text:00405BD0 var_18          = mbstate_t ptr -18h
.text:00405BD0 arg_0           = dword ptr  4
.text:00405BD0 arg_4           = dword ptr  8
.text:00405BD0 Str             = dword ptr  0Ch
.text:00405BD0 arg_C           = dword ptr  10h
.text:00405BD0 arg_10          = dword ptr  14h
.text:00405BD0 arg_14          = dword ptr  18h
.text:00405BD0
.text:00405BD0                 push    ebp
.text:00405BD1                 push    edi
.text:00405BD2                 push    esi
.text:00405BD3                 push    ebx
.text:00405BD4                 sub     esp, 3Ch
.text:00405BD7                 mov     edx, ds:__mb_cur_max
.text:00405BDD                 mov     [esp+4Ch+var_34], 0
.text:00405BE5                 mov     [esp+4Ch+var_1C], 0
.text:00405BED                 cmp     dword ptr [edx], 1
.text:00405BF0                 mov     [esp+4Ch+var_20], 0
.text:00405BF8                 mov     [esp+4Ch+var_21], 0
.text:00405BFD                 setz    [esp+4Ch+var_22]
.text:00405C02                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405C07                 ja      short def_405C0D ; jumptable 00405C0D default case, cases 0,1
.text:00405C09                 mov     edx, [esp+4Ch+arg_10]
.text:00405C0D                 jmp     ds:jpt_405C0D[edx*4] ; switch jump
.text:00405C0D ; ---------------------------------------------------------------------------
.text:00405C14 jpt_405C0D      dd offset def_405C0D    ; DATA XREF: sub_405BD0+3D↑r
.text:00405C14                 dd offset def_405C0D    ; jump table for switch statement
.text:00405C14                 dd offset loc_406555
.text:00405C14                 dd offset loc_405C30
.text:00405C14                 dd offset loc_40657B
.text:00405C14                 dd offset loc_406585
.text:00405C14                 dd offset loc_406585
.text:00405C30 ; ---------------------------------------------------------------------------
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_405BD0+3D↑j
.text:00405C30                                         ; DATA XREF: sub_405BD0:jpt_405C0D↑o
.text:00405C30                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00405C0D case 3
.text:00405C34                 cmp     [esp+4Ch+var_34], eax
.text:00405C38                 jnb     short loc_405C41
.text:00405C3A                 mov     ebx, [esp+4Ch+arg_0]
.text:00405C3E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405C41
.text:00405C41 loc_405C41:                             ; CODE XREF: sub_405BD0+68↑j
.text:00405C41                 mov     [esp+4Ch+var_34], 1
.text:00405C49                 mov     [esp+4Ch+var_21], 1
.text:00405C4E                 mov     [esp+4Ch+var_1C], offset asc_405BBC ; "\"'`"
.text:00405C56
.text:00405C56 loc_405C56:                             ; CODE XREF: sub_405BD0+9A6↓j
.text:00405C56                 mov     [esp+4Ch+var_20], 1
.text:00405C5E
.text:00405C5E def_405C0D:                             ; CODE XREF: sub_405BD0+37↑j
.text:00405C5E                                         ; sub_405BD0+3D↑j ...
.text:00405C5E                 xor     ebp, ebp        ; jumptable 00405C0D default case, cases 0,1
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_405BD0+3DB↓j
.text:00405C60                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405C65                 jz      loc_406547
.text:00405C6B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405C6F
.text:00405C6F loc_405C6F:                             ; CODE XREF: sub_405BD0+980↓j
.text:00405C6F                 jz      loc_4064DE
.text:00405C75                 cmp     [esp+4Ch+var_21], 0
.text:00405C7A                 jz      short loc_405CC0
.text:00405C7C                 mov     esi, [esp+4Ch+var_20]
.text:00405C80                 test    esi, esi
.text:00405C82                 jz      short loc_405CC0
.text:00405C84                 mov     ecx, [esp+4Ch+var_20]
.text:00405C88                 lea     edi, [ecx+ebp]
.text:00405C8B                 cmp     edi, [esp+4Ch+arg_C]
.text:00405C8F                 ja      short loc_405CC0
.text:00405C91                 cld
.text:00405C92                 mov     ebx, [esp+4Ch+Str]
.text:00405C96                 mov     edi, [esp+4Ch+var_1C]
.text:00405C9A                 add     ebx, ebp
.text:00405C9C                 mov     esi, ebx
.text:00405C9E                 cmp     ecx, ecx
.text:00405CA0                 repe cmpsb
.text:00405CA2                 jnz     short loc_405CC0
.text:00405CA4                 mov     edx, [esp+4Ch+arg_4]
.text:00405CA8                 cmp     [esp+4Ch+var_34], edx
.text:00405CAC                 jnb     short loc_405CBA
.text:00405CAE                 mov     ecx, [esp+4Ch+arg_0]
.text:00405CB2                 mov     eax, [esp+4Ch+var_34]
.text:00405CB6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00405CBA
.text:00405CBA loc_405CBA:                             ; CODE XREF: sub_405BD0+DC↑j
.text:00405CBA                 inc     [esp+4Ch+var_34]
.text:00405CBE                 mov     esi, esi
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: sub_405BD0+AA↑j
.text:00405CC0                                         ; sub_405BD0+B2↑j ...
.text:00405CC0                 mov     edi, [esp+4Ch+Str]
.text:00405CC4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00405CC9                 movzx   eax, bl
.text:00405CCC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00405CCF                 ja      def_405CD5      ; jumptable 00405CD5 default case, cases 1-6,14-31,64
.text:00405CD5                 jmp     ds:jpt_405CD5[eax*4] ; switch jump
.text:00405CD5 ; ---------------------------------------------------------------------------
.text:00405CDC jpt_405CD5      dd offset loc_405ED8, offset def_405CD5, offset def_405CD5
.text:00405CDC                                         ; DATA XREF: sub_405BD0+105↑r
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5 ; jump table for switch statement
.text:00405CDC                 dd offset def_405CD5, offset loc_405FB0, offset loc_405FCE
.text:00405CDC                 dd offset loc_405FD2, offset loc_406017, offset loc_40601B
.text:00405CDC                 dd offset loc_40601F, offset loc_406023, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset def_405CD5
.text:00405CDC                 dd offset def_405CD5, offset def_405CD5, offset loc_4064A8
.text:00405CDC                 dd offset loc_4064A8, offset loc_4064A8, offset loc_4064CA
.text:00405CDC                 dd offset loc_4064A8, offset def_4060D2, offset loc_4064A8
.text:00405CDC                 dd offset loc_406027, offset loc_4064A8, offset loc_4064A8
.text:00405CDC                 dd offset loc_4064A8, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset loc_4064A8
.text:00405CDC                 dd offset loc_4064A8, offset loc_4064A8, offset loc_4064A8
.text:00405CDC                 dd offset loc_40608C, offset def_405CD5, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset loc_4064A8, offset loc_4064A1
.text:00405CDC                 dd offset def_4060D2, offset loc_4064A8, offset def_4060D2
.text:00405CDC                 dd offset loc_4064A8, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset def_4060D2, offset def_4060D2, offset def_4060D2
.text:00405CDC                 dd offset loc_4064B8, offset loc_4064A8, offset loc_4064B8
.text:00405CDC                 dd offset loc_4064CA
.text:00405ED8 ; ---------------------------------------------------------------------------
.text:00405ED8
.text:00405ED8 loc_405ED8:                             ; CODE XREF: sub_405BD0+105↑j
.text:00405ED8                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00405ED8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405CD5 case 0
.text:00405EDD                 lea     eax, [ebp+1]
.text:00405EE0                 jz      loc_405F90
.text:00405EE6                 mov     esi, [esp+4Ch+arg_4]
.text:00405EEA                 cmp     [esp+4Ch+var_34], esi
.text:00405EEE                 jnb     short loc_405EFC
.text:00405EF0                 mov     eax, [esp+4Ch+arg_0]
.text:00405EF4                 mov     ebx, [esp+4Ch+var_34]
.text:00405EF8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00405EFC
.text:00405EFC loc_405EFC:                             ; CODE XREF: sub_405BD0+31E↑j
.text:00405EFC                 inc     [esp+4Ch+var_34]
.text:00405F00                 mov     edx, [esp+4Ch+arg_4]
.text:00405F04                 cmp     [esp+4Ch+var_34], edx
.text:00405F08                 jnb     short loc_405F16
.text:00405F0A                 mov     edi, [esp+4Ch+arg_0]
.text:00405F0E                 mov     ecx, [esp+4Ch+var_34]
.text:00405F12                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00405F16
.text:00405F16 loc_405F16:                             ; CODE XREF: sub_405BD0+338↑j
.text:00405F16                 inc     [esp+4Ch+var_34]
.text:00405F1A                 mov     esi, [esp+4Ch+arg_4]
.text:00405F1E                 cmp     [esp+4Ch+var_34], esi
.text:00405F22                 jnb     short loc_405F30
.text:00405F24                 mov     ebx, [esp+4Ch+arg_0]
.text:00405F28                 mov     eax, [esp+4Ch+var_34]
.text:00405F2C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405F30
.text:00405F30 loc_405F30:                             ; CODE XREF: sub_405BD0+352↑j
.text:00405F30                 inc     [esp+4Ch+var_34]
.text:00405F34                 mov     bl, 30h ; '0'
.text:00405F36                 lea     esi, [esi+0]
.text:00405F39                 lea     edi, [edi+0]
.text:00405F40
.text:00405F40 def_4060D2:                             ; CODE XREF: sub_405BD0+105↑j
.text:00405F40                                         ; sub_405BD0+463↓j ...
.text:00405F40                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:00405F40                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:00405F45                 lea     eax, [ebp+1]
.text:00405F48                 jz      short loc_405F90
.text:00405F4A                 mov     cl, bl
.text:00405F4C                 mov     edi, [esp+4Ch+arg_14]
.text:00405F50                 mov     esi, 1
.text:00405F55                 shr     cl, 5
.text:00405F58                 movzx   edx, cl
.text:00405F5B                 mov     ecx, ebx
.text:00405F5D                 and     ecx, 1Fh
.text:00405F60                 shl     esi, cl
.text:00405F62                 test    [edi+edx*4+4], esi
.text:00405F66                 jz      short loc_405F82
.text:00405F68
.text:00405F68 loc_405F68:                             ; CODE XREF: sub_405BD0+3FC↓j
.text:00405F68                 mov     edx, [esp+4Ch+arg_4]
.text:00405F6C                 cmp     [esp+4Ch+var_34], edx
.text:00405F70                 jnb     short loc_405F7E
.text:00405F72                 mov     edi, [esp+4Ch+arg_0]
.text:00405F76                 mov     esi, [esp+4Ch+var_34]
.text:00405F7A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00405F7E
.text:00405F7E loc_405F7E:                             ; CODE XREF: sub_405BD0+3A0↑j
.text:00405F7E                 inc     [esp+4Ch+var_34]
.text:00405F82
.text:00405F82 loc_405F82:                             ; CODE XREF: sub_405BD0+396↑j
.text:00405F82                 lea     eax, [ebp+1]
.text:00405F85                 lea     esi, [esi+0]
.text:00405F89                 lea     edi, [edi+0]
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_405BD0+310↑j
.text:00405F90                                         ; sub_405BD0+378↑j ...
.text:00405F90                 mov     ebp, [esp+4Ch+arg_4]
.text:00405F94                 cmp     [esp+4Ch+var_34], ebp
.text:00405F98                 jnb     short loc_405FA5
.text:00405F9A                 mov     edx, [esp+4Ch+arg_0]
.text:00405F9E                 mov     ecx, [esp+4Ch+var_34]
.text:00405FA2                 mov     [ecx+edx], bl
.text:00405FA5
.text:00405FA5 loc_405FA5:                             ; CODE XREF: sub_405BD0+3C8↑j
.text:00405FA5                 inc     [esp+4Ch+var_34]
.text:00405FA9                 mov     ebp, eax
.text:00405FAB                 jmp     loc_405C60
.text:00405FB0 ; ---------------------------------------------------------------------------
.text:00405FB0
.text:00405FB0 loc_405FB0:                             ; CODE XREF: sub_405BD0+105↑j
.text:00405FB0                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00405FB0                 mov     dl, 61h ; 'a'   ; jumptable 00405CD5 case 7
.text:00405FB2                 lea     esi, [esi+0]
.text:00405FB9                 lea     edi, [edi+0]
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_405BD0+400↓j
.text:00405FC0                                         ; sub_405BD0+409↓j ...
.text:00405FC0                 cmp     [esp+4Ch+var_21], 0
.text:00405FC5                 lea     eax, [ebp+1]
.text:00405FC8                 jz      short loc_405F90
.text:00405FCA                 mov     bl, dl
.text:00405FCC                 jmp     short loc_405F68
.text:00405FCE ; ---------------------------------------------------------------------------
.text:00405FCE
.text:00405FCE loc_405FCE:                             ; CODE XREF: sub_405BD0+105↑j
.text:00405FCE                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00405FCE                 mov     dl, 62h ; 'b'   ; jumptable 00405CD5 case 8
.text:00405FD0                 jmp     short loc_405FC0
.text:00405FD2 ; ---------------------------------------------------------------------------
.text:00405FD2
.text:00405FD2 loc_405FD2:                             ; CODE XREF: sub_405BD0+105↑j
.text:00405FD2                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00405FD2                 mov     dl, 74h ; 't'   ; jumptable 00405CD5 case 9
.text:00405FD4
.text:00405FD4 loc_405FD4:                             ; CODE XREF: sub_405BD0+449↓j
.text:00405FD4                                         ; sub_405BD0+455↓j ...
.text:00405FD4                 cmp     [esp+4Ch+arg_10], 1
.text:00405FD9                 jnz     short loc_405FC0
.text:00405FDB
.text:00405FDB loc_405FDB:                             ; CODE XREF: sub_405BD0+45C↓j
.text:00405FDB                                         ; sub_405BD0+4C1↓j ...
.text:00405FDB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004063A2 cases 91,92,94,96,124
.text:00405FE3                 mov     eax, [esp+4Ch+arg_14]
.text:00405FE7                 mov     edx, [esp+4Ch+arg_C]
.text:00405FEB                 mov     ecx, [esp+4Ch+Str]
.text:00405FEF                 mov     ebx, [esp+4Ch+arg_4]
.text:00405FF3                 mov     [esp+4Ch+var_38], eax ; int
.text:00405FF7                 mov     ebp, [esp+4Ch+arg_0]
.text:00405FFB                 mov     [esp+4Ch+State], edx ; int
.text:00405FFF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00406003                 mov     [esp+4Ch+Type], ebx ; int
.text:00406007                 mov     [esp+4Ch+C], ebp ; int
.text:0040600A                 call    sub_405BD0
.text:0040600F
.text:0040600F loc_40600F:                             ; CODE XREF: sub_405BD0+972↓j
.text:0040600F                 add     esp, 3Ch
.text:00406012                 pop     ebx
.text:00406013                 pop     esi
.text:00406014                 pop     edi
.text:00406015                 pop     ebp
.text:00406016                 retn
.text:00406017 ; ---------------------------------------------------------------------------
.text:00406017
.text:00406017 loc_406017:                             ; CODE XREF: sub_405BD0+105↑j
.text:00406017                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00406017                 mov     dl, 6Eh ; 'n'   ; jumptable 00405CD5 case 10
.text:00406019                 jmp     short loc_405FD4
.text:0040601B ; ---------------------------------------------------------------------------
.text:0040601B
.text:0040601B loc_40601B:                             ; CODE XREF: sub_405BD0+105↑j
.text:0040601B                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:0040601B                 mov     dl, 76h ; 'v'   ; jumptable 00405CD5 case 11
.text:0040601D                 jmp     short loc_405FC0
.text:0040601F ; ---------------------------------------------------------------------------
.text:0040601F
.text:0040601F loc_40601F:                             ; CODE XREF: sub_405BD0+105↑j
.text:0040601F                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:0040601F                 mov     dl, 66h ; 'f'   ; jumptable 00405CD5 case 12
.text:00406021                 jmp     short loc_405FC0
.text:00406023 ; ---------------------------------------------------------------------------
.text:00406023
.text:00406023 loc_406023:                             ; CODE XREF: sub_405BD0+105↑j
.text:00406023                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00406023                 mov     dl, 72h ; 'r'   ; jumptable 00405CD5 case 13
.text:00406025                 jmp     short loc_405FD4
.text:00406027 ; ---------------------------------------------------------------------------
.text:00406027
.text:00406027 loc_406027:                             ; CODE XREF: sub_405BD0+105↑j
.text:00406027                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:00406027                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405CD5 case 39
.text:0040602C                 jz      short loc_405FDB ; jumptable 004063A2 cases 91,92,94,96,124
.text:0040602E                 cmp     [esp+4Ch+arg_10], 2
.text:00406033                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:00406033                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:00406039                 mov     edx, [esp+4Ch+arg_4]
.text:0040603D                 cmp     [esp+4Ch+var_34], edx
.text:00406041                 jnb     short loc_40604F
.text:00406043                 mov     ecx, [esp+4Ch+arg_0]
.text:00406047                 mov     edi, [esp+4Ch+var_34]
.text:0040604B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040604F
.text:0040604F loc_40604F:                             ; CODE XREF: sub_405BD0+471↑j
.text:0040604F                 inc     [esp+4Ch+var_34]
.text:00406053                 mov     eax, [esp+4Ch+arg_4]
.text:00406057                 cmp     [esp+4Ch+var_34], eax
.text:0040605B                 jnb     short loc_406069
.text:0040605D                 mov     esi, [esp+4Ch+arg_0]
.text:00406061                 mov     edx, [esp+4Ch+var_34]
.text:00406065                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00406069
.text:00406069 loc_406069:                             ; CODE XREF: sub_405BD0+48B↑j
.text:00406069                 inc     [esp+4Ch+var_34]
.text:0040606D                 mov     edi, [esp+4Ch+arg_4]
.text:00406071                 cmp     [esp+4Ch+var_34], edi
.text:00406075                 jnb     short loc_406083
.text:00406077                 mov     ecx, [esp+4Ch+arg_0]
.text:0040607B                 mov     eax, [esp+4Ch+var_34]
.text:0040607F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00406083
.text:00406083 loc_406083:                             ; CODE XREF: sub_405BD0+4A5↑j
.text:00406083                                         ; sub_405BD0+5C4↓j ...
.text:00406083                 inc     [esp+4Ch+var_34]
.text:00406087                 jmp     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:00406087                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:0040608C ; ---------------------------------------------------------------------------
.text:0040608C
.text:0040608C loc_40608C:                             ; CODE XREF: sub_405BD0+105↑j
.text:0040608C                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:0040608C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405CD5 case 63
.text:00406091                 jz      loc_405FDB      ; jumptable 004063A2 cases 91,92,94,96,124
.text:00406097                 cmp     [esp+4Ch+arg_10], 3
.text:0040609C                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:0040609C                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004060A2                 lea     edx, [ebp+2]
.text:004060A5                 cmp     edx, [esp+4Ch+arg_C]
.text:004060A9                 jnb     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004060A9                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004060AF                 mov     esi, [esp+4Ch+Str]
.text:004060B3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004060B8                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004060B8                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004060BE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004060C3                 movsx   eax, cl
.text:004060C6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004060C9                 cmp     eax, 1Dh
.text:004060CC                 ja      def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004060CC                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004060D2                 jmp     ds:jpt_4060D2[eax*4] ; switch jump
.text:004060D2 ; ---------------------------------------------------------------------------
.text:004060D9                 align 4
.text:004060DC jpt_4060D2      dd offset loc_406154    ; DATA XREF: sub_405BD0+502↑r
.text:004060DC                 dd offset def_4060D2    ; jump table for switch statement
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset def_4060D2
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset loc_406154
.text:004060DC                 dd offset loc_406154
.text:00406154 ; ---------------------------------------------------------------------------
.text:00406154
.text:00406154 loc_406154:                             ; CODE XREF: sub_405BD0+502↑j
.text:00406154                                         ; DATA XREF: sub_405BD0:jpt_4060D2↑o
.text:00406154                 mov     ebp, edx        ; jumptable 004060D2 cases 33,39-41,45,47,60-62
.text:00406156                 mov     bl, cl
.text:00406158                 mov     edx, [esp+4Ch+arg_4]
.text:0040615C                 cmp     [esp+4Ch+var_34], edx
.text:00406160                 jnb     short loc_40616E
.text:00406162                 mov     ecx, [esp+4Ch+arg_0]
.text:00406166                 mov     edi, [esp+4Ch+var_34]
.text:0040616A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040616E
.text:0040616E loc_40616E:                             ; CODE XREF: sub_405BD0+590↑j
.text:0040616E                 inc     [esp+4Ch+var_34]
.text:00406172                 mov     eax, [esp+4Ch+arg_4]
.text:00406176                 cmp     [esp+4Ch+var_34], eax
.text:0040617A                 jnb     short loc_406188
.text:0040617C                 mov     edx, [esp+4Ch+arg_0]
.text:00406180                 mov     esi, [esp+4Ch+var_34]
.text:00406184                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00406188
.text:00406188 loc_406188:                             ; CODE XREF: sub_405BD0+5AA↑j
.text:00406188                 inc     [esp+4Ch+var_34]
.text:0040618C                 mov     edi, [esp+4Ch+arg_4]
.text:00406190                 cmp     [esp+4Ch+var_34], edi
.text:00406194                 jnb     loc_406083
.text:0040619A                 mov     eax, [esp+4Ch+arg_0]
.text:0040619E                 mov     ecx, [esp+4Ch+var_34]
.text:004061A2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004061A6                 jmp     loc_406083
.text:004061A6 ; ---------------------------------------------------------------------------
.text:004061AB                 align 10h
.text:004061B0
.text:004061B0 def_405CD5:                             ; CODE XREF: sub_405BD0+FF↑j
.text:004061B0                                         ; sub_405BD0+105↑j
.text:004061B0                                         ; DATA XREF: ...
.text:004061B0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00405CD5 default case, cases 1-6,14-31,64
.text:004061B5                 jz      loc_4062E0
.text:004061BB                 mov     [esp+4Ch+var_28], 1
.text:004061C3                 mov     esi, ds:__mb_cur_max
.text:004061C9                 movzx   edx, bl
.text:004061CC                 cmp     dword ptr [esi], 1
.text:004061CF                 jz      loc_4062C4
.text:004061D5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004061DD                 mov     [esp+4Ch+C], edx ; C
.text:004061E0                 call    _isctype
.text:004061E5
.text:004061E5 loc_4061E5:                             ; CODE XREF: sub_405BD0+705↓j
.text:004061E5                 test    eax, eax
.text:004061E7                 setnz   [esp+4Ch+var_29]
.text:004061EC
.text:004061EC loc_4061EC:                             ; CODE XREF: sub_405BD0+7A5↓j
.text:004061EC                 cmp     [esp+4Ch+var_21], 0
.text:004061F1                 lea     eax, [ebp+1]
.text:004061F4                 jz      loc_405F90
.text:004061FA                 cmp     [esp+4Ch+var_29], 0
.text:004061FF                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004061FF                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:00406205
.text:00406205 loc_406205:                             ; CODE XREF: sub_405BD0+7AB↓j
.text:00406205                 mov     eax, [esp+4Ch+var_28]
.text:00406209                 lea     edx, [eax+ebp]
.text:0040620C                 lea     esi, [esi+0]
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_405BD0+6EF↓j
.text:00406210                 cmp     [esp+4Ch+var_21], 0
.text:00406215                 jz      short loc_406290
.text:00406217                 cmp     [esp+4Ch+var_29], 0
.text:0040621C                 jnz     short loc_406290
.text:0040621E                 mov     edi, [esp+4Ch+arg_4]
.text:00406222                 cmp     [esp+4Ch+var_34], edi
.text:00406226                 jnb     short loc_406234
.text:00406228                 mov     esi, [esp+4Ch+arg_0]
.text:0040622C                 mov     eax, [esp+4Ch+var_34]
.text:00406230                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00406234
.text:00406234 loc_406234:                             ; CODE XREF: sub_405BD0+656↑j
.text:00406234                 inc     [esp+4Ch+var_34]
.text:00406238                 mov     ecx, [esp+4Ch+arg_4]
.text:0040623C                 cmp     [esp+4Ch+var_34], ecx
.text:00406240                 jnb     short loc_406255
.text:00406242                 mov     cl, bl
.text:00406244                 mov     esi, [esp+4Ch+arg_0]
.text:00406248                 mov     edi, [esp+4Ch+var_34]
.text:0040624C                 shr     cl, 6
.text:0040624F                 add     cl, 30h ; '0'
.text:00406252                 mov     [edi+esi], cl
.text:00406255
.text:00406255 loc_406255:                             ; CODE XREF: sub_405BD0+670↑j
.text:00406255                 inc     [esp+4Ch+var_34]
.text:00406259                 mov     edi, [esp+4Ch+arg_4]
.text:0040625D                 cmp     [esp+4Ch+var_34], edi
.text:00406261                 jnb     short loc_406279
.text:00406263                 mov     cl, bl
.text:00406265                 mov     esi, [esp+4Ch+arg_0]
.text:00406269                 shr     cl, 3
.text:0040626C                 mov     edi, [esp+4Ch+var_34]
.text:00406270                 and     cl, 7
.text:00406273                 add     cl, 30h ; '0'
.text:00406276                 mov     [edi+esi], cl
.text:00406279
.text:00406279 loc_406279:                             ; CODE XREF: sub_405BD0+691↑j
.text:00406279                 inc     [esp+4Ch+var_34]
.text:0040627D                 and     bl, 7
.text:00406280                 add     bl, 30h ; '0'
.text:00406283                 lea     esi, [esi+0]
.text:00406289                 lea     edi, [edi+0]
.text:00406290
.text:00406290 loc_406290:                             ; CODE XREF: sub_405BD0+645↑j
.text:00406290                                         ; sub_405BD0+64C↑j
.text:00406290                 lea     eax, [ebp+1]
.text:00406293                 cmp     edx, eax
.text:00406295                 jbe     loc_405F90
.text:0040629B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040629F                 cmp     [esp+4Ch+var_34], ebp
.text:004062A3                 jnb     short loc_4062B0
.text:004062A5                 mov     ecx, [esp+4Ch+arg_0]
.text:004062A9                 mov     edi, [esp+4Ch+var_34]
.text:004062AD                 mov     [edi+ecx], bl
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_405BD0+6D3↑j
.text:004062B0                 inc     [esp+4Ch+var_34]
.text:004062B4                 mov     ebp, eax
.text:004062B6                 mov     eax, [esp+4Ch+Str]
.text:004062BA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004062BF                 jmp     loc_406210
.text:004062C4 ; ---------------------------------------------------------------------------
.text:004062C4
.text:004062C4 loc_4062C4:                             ; CODE XREF: sub_405BD0+5FF↑j
.text:004062C4                 mov     ecx, ds:_pctype
.text:004062CA                 mov     edi, [ecx]
.text:004062CC                 movzx   eax, word ptr [edi+edx*2]
.text:004062D0                 and     eax, 157h
.text:004062D5                 jmp     loc_4061E5
.text:004062D5 ; ---------------------------------------------------------------------------
.text:004062DA                 align 10h
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_405BD0+5E5↑j
.text:004062E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004062E5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004062ED                 mov     [esp+4Ch+var_28], 0
.text:004062F5                 mov     [esp+4Ch+var_29], 1
.text:004062FA                 jz      loc_40648C
.text:00406300
.text:00406300 loc_406300:                             ; CODE XREF: sub_405BD0+8CC↓j
.text:00406300                 mov     ecx, [esp+4Ch+arg_C]
.text:00406304                 lea     edx, [esp+4Ch+var_18]
.text:00406308                 mov     edi, [esp+4Ch+Str]
.text:0040630C                 mov     [esp+4Ch+State], edx ; State
.text:00406310                 lea     esi, [esp+4Ch+var_18._State]
.text:00406314                 sub     ecx, ebp
.text:00406316                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040631A                 add     edi, ebp
.text:0040631C                 mov     [esp+4Ch+var_30], edi
.text:00406320                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00406324                 mov     [esp+4Ch+C], esi ; DstCh
.text:00406327                 call    mbrtowc
.text:0040632C                 test    eax, eax
.text:0040632E                 mov     edi, eax
.text:00406330                 jz      short loc_406370
.text:00406332                 cmp     eax, 0FFFFFFFFh
.text:00406335                 jz      loc_406482
.text:0040633B                 cmp     eax, 0FFFFFFFEh
.text:0040633E                 jz      loc_406442
.text:00406344                 cmp     [esp+4Ch+arg_10], 1
.text:00406349                 jz      short loc_406380
.text:0040634B
.text:0040634B loc_40634B:                             ; CODE XREF: sub_405BD0+7B9↓j
.text:0040634B                                         ; sub_405BD0+86D↓j
.text:0040634B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00406350                 mov     [esp+4Ch+Type], 157h ; Type
.text:00406358                 mov     [esp+4Ch+C], ecx ; C
.text:0040635B                 call    iswctype
.text:00406360                 test    eax, eax
.text:00406362                 jnz     short loc_406369
.text:00406364                 mov     [esp+4Ch+var_29], 0
.text:00406369
.text:00406369 loc_406369:                             ; CODE XREF: sub_405BD0+792↑j
.text:00406369                 mov     [esp+4Ch+var_28], edi
.text:0040636D                 lea     esi, [esi+0]
.text:00406370
.text:00406370 loc_406370:                             ; CODE XREF: sub_405BD0+760↑j
.text:00406370                                         ; sub_405BD0+87B↓j ...
.text:00406370                 cmp     [esp+4Ch+var_28], 1
.text:00406375                 jbe     loc_4061EC
.text:0040637B                 jmp     loc_406205
.text:00406380 ; ---------------------------------------------------------------------------
.text:00406380
.text:00406380 loc_406380:                             ; CODE XREF: sub_405BD0+779↑j
.text:00406380                 cmp     [esp+4Ch+arg_10], eax
.text:00406384                 mov     edx, 1
.text:00406389                 jnb     short loc_40634B
.text:0040638B
.text:0040638B loc_40638B:                             ; CODE XREF: sub_405BD0+867↓j
.text:0040638B                 mov     ecx, [esp+4Ch+Str]
.text:0040638F                 lea     esi, [edx+ebp]
.text:00406392                 movsx   eax, byte ptr [esi+ecx]
.text:00406396                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00406399                 cmp     eax, 21h
.text:0040639C                 ja      def_4063A2      ; jumptable 004063A2 default case, cases 93,95,97-123
.text:004063A2                 jmp     ds:jpt_4063A2[eax*4] ; switch jump
.text:004063A2 ; ---------------------------------------------------------------------------
.text:004063A9                 align 4
.text:004063AC jpt_4063A2      dd offset loc_405FDB    ; DATA XREF: sub_405BD0+7D2↑r
.text:004063AC                 dd offset loc_405FDB    ; jump table for switch statement
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset loc_405FDB
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset loc_405FDB
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset def_4063A2
.text:004063AC                 dd offset loc_405FDB
.text:00406434 ; ---------------------------------------------------------------------------
.text:00406434
.text:00406434 def_4063A2:                             ; CODE XREF: sub_405BD0+7CC↑j
.text:00406434                                         ; sub_405BD0+7D2↑j
.text:00406434                                         ; DATA XREF: ...
.text:00406434                 inc     edx             ; jumptable 004063A2 default case, cases 93,95,97-123
.text:00406435                 cmp     edx, edi
.text:00406437                 jb      loc_40638B
.text:0040643D                 jmp     loc_40634B
.text:00406442 ; ---------------------------------------------------------------------------
.text:00406442
.text:00406442 loc_406442:                             ; CODE XREF: sub_405BD0+76E↑j
.text:00406442                 cmp     ebp, [esp+4Ch+arg_C]
.text:00406446                 mov     [esp+4Ch+var_29], 0
.text:0040644B                 jnb     loc_406370
.text:00406451                 mov     eax, [esp+4Ch+var_30]
.text:00406455                 cmp     byte ptr [eax], 0
.text:00406458                 jz      loc_406370
.text:0040645E
.text:0040645E loc_40645E:                             ; CODE XREF: sub_405BD0+8AB↓j
.text:0040645E                 inc     [esp+4Ch+var_28]
.text:00406462                 mov     esi, [esp+4Ch+var_28]
.text:00406466                 lea     eax, [esi+ebp]
.text:00406469                 cmp     eax, [esp+4Ch+arg_C]
.text:0040646D                 jnb     loc_406370
.text:00406473                 mov     edi, [esp+4Ch+Str]
.text:00406477                 cmp     byte ptr [eax+edi], 0
.text:0040647B                 jnz     short loc_40645E
.text:0040647D                 jmp     loc_406370
.text:00406482 ; ---------------------------------------------------------------------------
.text:00406482
.text:00406482 loc_406482:                             ; CODE XREF: sub_405BD0+765↑j
.text:00406482                 mov     [esp+4Ch+var_29], 0
.text:00406487                 jmp     loc_406370
.text:0040648C ; ---------------------------------------------------------------------------
.text:0040648C
.text:0040648C loc_40648C:                             ; CODE XREF: sub_405BD0+72A↑j
.text:0040648C                 mov     edx, [esp+4Ch+Str]
.text:00406490                 mov     [esp+4Ch+C], edx ; Str
.text:00406493                 call    strlen
.text:00406498                 mov     [esp+4Ch+arg_C], eax
.text:0040649C                 jmp     loc_406300
.text:004064A1 ; ---------------------------------------------------------------------------
.text:004064A1
.text:004064A1 loc_4064A1:                             ; CODE XREF: sub_405BD0+105↑j
.text:004064A1                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:004064A1                 mov     dl, bl          ; jumptable 00405CD5 case 92
.text:004064A3                 jmp     loc_405FD4
.text:004064A8 ; ---------------------------------------------------------------------------
.text:004064A8
.text:004064A8 loc_4064A8:                             ; CODE XREF: sub_405BD0+105↑j
.text:004064A8                                         ; sub_405BD0+902↓j
.text:004064A8                                         ; DATA XREF: ...
.text:004064A8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405CD5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004064AD                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004064AD                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004064B3                 jmp     loc_405FDB      ; jumptable 004063A2 cases 91,92,94,96,124
.text:004064B8 ; ---------------------------------------------------------------------------
.text:004064B8
.text:004064B8 loc_4064B8:                             ; CODE XREF: sub_405BD0+105↑j
.text:004064B8                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:004064B8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00405CD5 cases 123,125
.text:004064BD                 jz      short loc_4064D4
.text:004064BF                 cmp     [esp+4Ch+arg_C], 1
.text:004064C4
.text:004064C4 loc_4064C4:                             ; CODE XREF: sub_405BD0+90C↓j
.text:004064C4                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004064C4                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004064CA
.text:004064CA loc_4064CA:                             ; CODE XREF: sub_405BD0+105↑j
.text:004064CA                                         ; DATA XREF: sub_405BD0:jpt_405CD5↑o
.text:004064CA                 test    ebp, ebp        ; jumptable 00405CD5 cases 35,126
.text:004064CC                 jnz     def_4060D2      ; jumptable 00405CD5 cases 37,43-58,65-90,93,95,97-122
.text:004064CC                                         ; jumptable 004060D2 default case, cases 34-38,42-44,46,48-59
.text:004064D2                 jmp     short loc_4064A8 ; jumptable 00405CD5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004064D4 ; ---------------------------------------------------------------------------
.text:004064D4
.text:004064D4 loc_4064D4:                             ; CODE XREF: sub_405BD0+8ED↑j
.text:004064D4                 mov     esi, [esp+4Ch+Str]
.text:004064D8                 cmp     byte ptr [esi+1], 0
.text:004064DC                 jmp     short loc_4064C4
.text:004064DE ; ---------------------------------------------------------------------------
.text:004064DE
.text:004064DE loc_4064DE:                             ; CODE XREF: sub_405BD0:loc_405C6F↑j
.text:004064DE                 test    ebp, ebp
.text:004064E0                 jnz     short loc_4064ED
.text:004064E2                 cmp     [esp+4Ch+arg_10], 1
.text:004064E7                 jz      loc_405FDB      ; jumptable 004063A2 cases 91,92,94,96,124
.text:004064ED
.text:004064ED loc_4064ED:                             ; CODE XREF: sub_405BD0+910↑j
.text:004064ED                 mov     esi, [esp+4Ch+var_1C]
.text:004064F1                 test    esi, esi
.text:004064F3                 jz      short loc_406528
.text:004064F5                 mov     edi, [esp+4Ch+var_1C]
.text:004064F9                 movzx   eax, byte ptr [edi]
.text:004064FC                 test    al, al
.text:004064FE                 jz      short loc_406528
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: sub_405BD0+956↓j
.text:00406500                 mov     ebp, [esp+4Ch+arg_4]
.text:00406504                 cmp     [esp+4Ch+var_34], ebp
.text:00406508                 jnb     short loc_406515
.text:0040650A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040650E                 mov     ebx, [esp+4Ch+var_34]
.text:00406512                 mov     [ebx+ecx], al
.text:00406515
.text:00406515 loc_406515:                             ; CODE XREF: sub_405BD0+938↑j
.text:00406515                 inc     [esp+4Ch+var_1C]
.text:00406519                 inc     [esp+4Ch+var_34]
.text:0040651D                 mov     edx, [esp+4Ch+var_1C]
.text:00406521                 movzx   eax, byte ptr [edx]
.text:00406524                 test    al, al
.text:00406526                 jnz     short loc_406500
.text:00406528
.text:00406528 loc_406528:                             ; CODE XREF: sub_405BD0+923↑j
.text:00406528                                         ; sub_405BD0+92E↑j
.text:00406528                 mov     eax, [esp+4Ch+arg_4]
.text:0040652C                 cmp     [esp+4Ch+var_34], eax
.text:00406530                 jnb     short loc_40653E
.text:00406532                 mov     edi, [esp+4Ch+arg_0]
.text:00406536                 mov     esi, [esp+4Ch+var_34]
.text:0040653A                 mov     byte ptr [esi+edi], 0
.text:0040653E
.text:0040653E loc_40653E:                             ; CODE XREF: sub_405BD0+960↑j
.text:0040653E                 mov     eax, [esp+4Ch+var_34]
.text:00406542                 jmp     loc_40600F
.text:00406547 ; ---------------------------------------------------------------------------
.text:00406547
.text:00406547 loc_406547:                             ; CODE XREF: sub_405BD0+95↑j
.text:00406547                 mov     ebx, [esp+4Ch+Str]
.text:0040654B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00406550                 jmp     loc_405C6F
.text:00406555 ; ---------------------------------------------------------------------------
.text:00406555
.text:00406555 loc_406555:                             ; CODE XREF: sub_405BD0+3D↑j
.text:00406555                                         ; DATA XREF: sub_405BD0:jpt_405C0D↑o
.text:00406555                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00405C0D case 2
.text:00406559                 cmp     [esp+4Ch+var_34], edx
.text:0040655D                 jnb     short loc_406566
.text:0040655F                 mov     ecx, [esp+4Ch+arg_0]
.text:00406563                 mov     byte ptr [ecx], 27h ; '''
.text:00406566
.text:00406566 loc_406566:                             ; CODE XREF: sub_405BD0+98D↑j
.text:00406566                 mov     [esp+4Ch+var_34], 1
.text:0040656E                 mov     [esp+4Ch+var_1C], 405BBEh
.text:00406576                 jmp     loc_405C56
.text:0040657B ; ---------------------------------------------------------------------------
.text:0040657B
.text:0040657B loc_40657B:                             ; CODE XREF: sub_405BD0+3D↑j
.text:0040657B                                         ; DATA XREF: sub_405BD0:jpt_405C0D↑o
.text:0040657B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00405C0D case 4
.text:00406580                 jmp     def_405C0D      ; jumptable 00405C0D default case, cases 0,1
.text:00406585 ; ---------------------------------------------------------------------------
.text:00406585
.text:00406585 loc_406585:                             ; CODE XREF: sub_405BD0+3D↑j
.text:00406585                                         ; DATA XREF: sub_405BD0:jpt_405C0D↑o
.text:00406585                 mov     [esp+4Ch+C], 405BC0h ; jumptable 00405C0D cases 5,6
.text:0040658C                 call    ds:libintl_gettext
.text:00406592                 cmp     eax, 405BC0h
.text:00406597                 mov     edi, eax
.text:00406599                 jz      short loc_406610
.text:0040659B
.text:0040659B loc_40659B:                             ; CODE XREF: sub_405BD0+A45↓j
.text:0040659B                                         ; sub_405BD0+A4C↓j
.text:0040659B                 mov     [esp+4Ch+C], 405BBEh
.text:004065A2                 call    ds:libintl_gettext
.text:004065A8                 cmp     eax, 405BBEh
.text:004065AD                 mov     edx, eax
.text:004065AF                 jz      short loc_406602
.text:004065B1
.text:004065B1 loc_4065B1:                             ; CODE XREF: sub_405BD0+A37↓j
.text:004065B1                                         ; sub_405BD0+A3E↓j
.text:004065B1                 mov     [esp+4Ch+var_1C], edi
.text:004065B5                 cmp     byte ptr [edi], 0
.text:004065B8                 jz      short loc_4065E8
.text:004065BA
.text:004065BA loc_4065BA:                             ; CODE XREF: sub_405BD0+A16↓j
.text:004065BA                 mov     ecx, [esp+4Ch+arg_4]
.text:004065BE                 cmp     [esp+4Ch+var_34], ecx
.text:004065C2                 jnb     short loc_4065D7
.text:004065C4                 mov     ebp, [esp+4Ch+var_1C]
.text:004065C8                 mov     edi, [esp+4Ch+arg_0]
.text:004065CC                 mov     esi, [esp+4Ch+var_34]
.text:004065D0                 movzx   ebx, byte ptr [ebp+0]
.text:004065D4                 mov     [esi+edi], bl
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: sub_405BD0+9F2↑j
.text:004065D7                 inc     [esp+4Ch+var_1C]
.text:004065DB                 inc     [esp+4Ch+var_34]
.text:004065DF                 mov     eax, [esp+4Ch+var_1C]
.text:004065E3                 cmp     byte ptr [eax], 0
.text:004065E6                 jnz     short loc_4065BA
.text:004065E8
.text:004065E8 loc_4065E8:                             ; CODE XREF: sub_405BD0+9E8↑j
.text:004065E8                 mov     [esp+4Ch+var_21], 1
.text:004065ED                 mov     [esp+4Ch+var_1C], edx
.text:004065F1                 mov     [esp+4Ch+C], edx ; Str
.text:004065F4                 call    strlen
.text:004065F9                 mov     [esp+4Ch+var_20], eax
.text:004065FD                 jmp     def_405C0D      ; jumptable 00405C0D default case, cases 0,1
.text:00406602 ; ---------------------------------------------------------------------------
.text:00406602
.text:00406602 loc_406602:                             ; CODE XREF: sub_405BD0+9DF↑j
.text:00406602                 cmp     [esp+4Ch+arg_10], 6
.text:00406607                 jnz     short loc_4065B1
.text:00406609                 mov     edx, offset asc_405BBC ; "\"'`"
.text:0040660E                 jmp     short loc_4065B1
.text:00406610 ; ---------------------------------------------------------------------------
.text:00406610
.text:00406610 loc_406610:                             ; CODE XREF: sub_405BD0+9C9↑j
.text:00406610                 cmp     [esp+4Ch+arg_10], 6
.text:00406615                 jnz     short loc_40659B
.text:00406617                 mov     edi, offset asc_405BBC ; "\"'`"
.text:0040661C                 jmp     loc_40659B
.text:0040661C sub_405BD0      endp
.text:0040661C
.text:00406621 ; ---------------------------------------------------------------------------
.text:00406621                 jmp     short loc_406630
.text:00406621 ; ---------------------------------------------------------------------------
.text:00406623                 align 10h
.text:00406630
.text:00406630 loc_406630:                             ; CODE XREF: .text:00406621↑j
.text:00406630                 sub     esp, 0Ch
.text:00406633                 mov     [esp+4], ebx
.text:00406637                 mov     [esp+8], esi
.text:0040663B                 call    _errno
.text:00406640                 mov     esi, [eax]
.text:00406642                 mov     dword ptr [esp], 24h ; '$'
.text:00406649                 call    sub_410100
.text:0040664E                 mov     edx, [esp+10h]
.text:00406652                 mov     ebx, eax
.text:00406654                 test    edx, edx
.text:00406656                 jz      short loc_4066A1
.text:00406658
.text:00406658 loc_406658:                             ; CODE XREF: .text:004066A6↓j
.text:00406658                 mov     ecx, [edx]
.text:0040665A                 mov     [ebx], ecx
.text:0040665C                 mov     ecx, [edx+4]
.text:0040665F                 mov     [ebx+4], ecx
.text:00406662                 mov     ecx, [edx+8]
.text:00406665                 mov     [ebx+8], ecx
.text:00406668                 mov     ecx, [edx+0Ch]
.text:0040666B                 mov     [ebx+0Ch], ecx
.text:0040666E                 mov     ecx, [edx+10h]
.text:00406671                 mov     [ebx+10h], ecx
.text:00406674                 mov     ecx, [edx+14h]
.text:00406677                 mov     [ebx+14h], ecx
.text:0040667A                 mov     ecx, [edx+18h]
.text:0040667D                 mov     [ebx+18h], ecx
.text:00406680                 mov     ecx, [edx+1Ch]
.text:00406683                 mov     [ebx+1Ch], ecx
.text:00406686                 mov     ecx, [edx+20h]
.text:00406689                 mov     [ebx+20h], ecx
.text:0040668C                 call    _errno
.text:00406691                 mov     [eax], esi
.text:00406693                 mov     esi, [esp+8]
.text:00406697                 mov     eax, ebx
.text:00406699                 mov     ebx, [esp+4]
.text:0040669D                 add     esp, 0Ch
.text:004066A0                 retn
.text:004066A1 ; ---------------------------------------------------------------------------
.text:004066A1
.text:004066A1 loc_4066A1:                             ; CODE XREF: .text:00406656↑j
.text:004066A1                 mov     edx, offset dword_41B670
.text:004066A6                 jmp     short loc_406658
.text:004066A6 ; ---------------------------------------------------------------------------
.text:004066A8                 align 10h
.text:004066B0                 mov     eax, [esp+4]
.text:004066B4                 test    eax, eax
.text:004066B6                 jz      short loc_4066C0
.text:004066B8
.text:004066B8 loc_4066B8:                             ; CODE XREF: .text:004066C5↓j
.text:004066B8                 mov     eax, [eax]
.text:004066BA                 retn
.text:004066BA ; ---------------------------------------------------------------------------
.text:004066BB                 align 10h
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: .text:004066B6↑j
.text:004066C0                 mov     eax, offset dword_41B670
.text:004066C5                 jmp     short loc_4066B8
.text:004066C5 ; ---------------------------------------------------------------------------
.text:004066C7                 align 10h
.text:004066D0                 mov     edx, [esp+4]
.text:004066D4                 test    edx, edx
.text:004066D6                 jz      short loc_4066E0
.text:004066D8
.text:004066D8 loc_4066D8:                             ; CODE XREF: .text:004066E5↓j
.text:004066D8                 mov     ecx, [esp+8]
.text:004066DC                 mov     [edx], ecx
.text:004066DE                 retn
.text:004066DE ; ---------------------------------------------------------------------------
.text:004066DF                 align 10h
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: .text:004066D6↑j
.text:004066E0                 mov     edx, offset dword_41B670
.text:004066E5                 jmp     short loc_4066D8
.text:004066E5 ; ---------------------------------------------------------------------------
.text:004066E7                 align 10h
.text:004066F0                 sub     esp, 8
.text:004066F3                 mov     eax, [esp+0Ch]
.text:004066F7                 movzx   ecx, byte ptr [esp+10h]
.text:004066FC                 mov     [esp], ebx
.text:004066FF                 mov     ebx, [esp+14h]
.text:00406703                 mov     [esp+4], esi
.text:00406707                 mov     dl, cl
.text:00406709                 shr     dl, 5
.text:0040670C                 movzx   edx, dl
.text:0040670F                 shl     edx, 2
.text:00406712                 test    eax, eax
.text:00406714                 lea     esi, [edx+eax+4]
.text:00406718                 jz      short loc_406740
.text:0040671A
.text:0040671A loc_40671A:                             ; CODE XREF: .text:00406746↓j
.text:0040671A                 mov     edx, [esi]
.text:0040671C                 and     ecx, 1Fh
.text:0040671F                 and     ebx, 1
.text:00406722                 mov     eax, edx
.text:00406724                 shr     eax, cl
.text:00406726                 and     eax, 1
.text:00406729                 xor     ebx, eax
.text:0040672B                 shl     ebx, cl
.text:0040672D                 xor     edx, ebx
.text:0040672F                 mov     [esi], edx
.text:00406731                 mov     ebx, [esp]
.text:00406734                 mov     esi, [esp+4]
.text:00406738                 add     esp, 8
.text:0040673B                 retn
.text:0040673B ; ---------------------------------------------------------------------------
.text:0040673C                 align 10h
.text:00406740
.text:00406740 loc_406740:                             ; CODE XREF: .text:00406718↑j
.text:00406740                 lea     esi, dword_41B674[edx]
.text:00406746                 jmp     short loc_40671A
.text:00406746 ; ---------------------------------------------------------------------------
.text:00406748                 align 10h
.text:00406750                 sub     esp, 2Ch
.text:00406753                 mov     [esp+24h], ebx
.text:00406757                 mov     ebx, [esp+40h]
.text:0040675B                 mov     [esp+28h], esi
.text:0040675F                 test    ebx, ebx
.text:00406761                 jz      short loc_4067B0
.text:00406763
.text:00406763 loc_406763:                             ; CODE XREF: .text:004067B5↓j
.text:00406763                 call    _errno
.text:00406768                 mov     esi, [eax]
.text:0040676A                 mov     [esp+14h], ebx
.text:0040676E                 mov     edx, [ebx]
.text:00406770                 mov     ecx, [esp+38h]
.text:00406774                 mov     ebx, [esp+3Ch]
.text:00406778                 mov     [esp+10h], edx
.text:0040677C                 mov     edx, [esp+34h]
.text:00406780                 mov     [esp+0Ch], ebx
.text:00406784                 mov     [esp+8], ecx
.text:00406788                 mov     [esp+4], edx
.text:0040678C                 mov     edx, [esp+30h]
.text:00406790                 mov     [esp], edx
.text:00406793                 call    sub_405BD0
.text:00406798                 mov     ebx, eax
.text:0040679A                 call    _errno
.text:0040679F                 mov     [eax], esi
.text:004067A1                 mov     esi, [esp+28h]
.text:004067A5                 mov     eax, ebx
.text:004067A7                 mov     ebx, [esp+24h]
.text:004067AB                 add     esp, 2Ch
.text:004067AE                 retn
.text:004067AE ; ---------------------------------------------------------------------------
.text:004067AF                 align 10h
.text:004067B0
.text:004067B0 loc_4067B0:                             ; CODE XREF: .text:00406761↑j
.text:004067B0                 mov     ebx, offset dword_41B670
.text:004067B5                 jmp     short loc_406763
.text:004067B5 ; ---------------------------------------------------------------------------
.text:004067B7                 align 10h
.text:004067C0                 push    ebp
.text:004067C1                 push    edi
.text:004067C2                 push    esi
.text:004067C3                 push    ebx
.text:004067C4                 sub     esp, 2Ch
.text:004067C7                 mov     ebp, [esp+48h]
.text:004067CB                 call    _errno
.text:004067D0                 mov     edx, [eax]
.text:004067D2                 test    ebp, ebp
.text:004067D4                 mov     ebx, ebp
.text:004067D6                 mov     [esp+28h], edx
.text:004067DA                 jz      loc_406890
.text:004067E0
.text:004067E0 loc_4067E0:                             ; CODE XREF: .text:00406895↓j
.text:004067E0                 call    _errno
.text:004067E5                 mov     edi, [eax]
.text:004067E7                 mov     esi, ebp
.text:004067E9                 mov     [esp+14h], ebx
.text:004067ED                 mov     ecx, [ebx]
.text:004067EF                 mov     dword ptr [esp], 0
.text:004067F6                 mov     edx, [esp+44h]
.text:004067FA                 mov     dword ptr [esp+4], 0
.text:00406802                 mov     eax, [esp+40h]
.text:00406806                 mov     [esp+10h], ecx
.text:0040680A                 mov     [esp+0Ch], edx
.text:0040680E                 mov     [esp+8], eax
.text:00406812                 call    sub_405BD0
.text:00406817                 mov     ebx, eax
.text:00406819                 call    _errno
.text:0040681E                 mov     [eax], edi
.text:00406820                 lea     edi, [ebx+1]
.text:00406823                 mov     [esp], edi
.text:00406826                 call    sub_410100
.text:0040682B                 mov     [esp+24h], eax
.text:0040682F                 test    ebp, ebp
.text:00406831                 jz      short loc_406882
.text:00406833
.text:00406833 loc_406833:                             ; CODE XREF: .text:00406887↓j
.text:00406833                 call    _errno
.text:00406838                 mov     ebp, [eax]
.text:0040683A                 mov     [esp+14h], esi
.text:0040683E                 mov     ecx, [esi]
.text:00406840                 mov     [esp+4], edi
.text:00406844                 mov     edx, [esp+44h]
.text:00406848                 mov     esi, [esp+24h]
.text:0040684C                 mov     [esp+10h], ecx
.text:00406850                 mov     eax, [esp+40h]
.text:00406854                 mov     [esp+0Ch], edx
.text:00406858                 mov     [esp], esi
.text:0040685B                 mov     [esp+8], eax
.text:0040685F                 call    sub_405BD0
.text:00406864                 call    _errno
.text:00406869                 mov     [eax], ebp
.text:0040686B                 call    _errno
.text:00406870                 mov     ebx, [esp+28h]
.text:00406874                 mov     [eax], ebx
.text:00406876                 mov     eax, [esp+24h]
.text:0040687A                 add     esp, 2Ch
.text:0040687D                 pop     ebx
.text:0040687E                 pop     esi
.text:0040687F                 pop     edi
.text:00406880                 pop     ebp
.text:00406881                 retn
.text:00406882 ; ---------------------------------------------------------------------------
.text:00406882
.text:00406882 loc_406882:                             ; CODE XREF: .text:00406831↑j
.text:00406882                 mov     esi, offset dword_41B670
.text:00406887                 jmp     short loc_406833
.text:00406887 ; ---------------------------------------------------------------------------
.text:00406889                 align 10h
.text:00406890
.text:00406890 loc_406890:                             ; CODE XREF: .text:004067DA↑j
.text:00406890                 mov     ebx, offset dword_41B670
.text:00406895                 jmp     loc_4067E0
.text:00406895 ; ---------------------------------------------------------------------------
.text:0040689A                 align 10h
.text:004068A0                 sub     esp, 1Ch
.text:004068A3                 mov     edx, [esp+24h]
.text:004068A7                 mov     dword ptr [esp+0Ch], offset dword_41B670
.text:004068AF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004068B7                 mov     [esp+4], edx
.text:004068BB                 mov     edx, [esp+20h]
.text:004068BF                 mov     [esp], edx
.text:004068C2                 call    sub_406D10
.text:004068C7                 add     esp, 1Ch
.text:004068CA                 retn
.text:004068CA ; ---------------------------------------------------------------------------
.text:004068CB                 align 10h
.text:004068D0
.text:004068D0 ; =============== S U B R O U T I N E =======================================
.text:004068D0
.text:004068D0
.text:004068D0 ; int __cdecl sub_4068D0(char *)
.text:004068D0 sub_4068D0      proc near               ; CODE XREF: sub_402010+531↑p
.text:004068D0                                         ; sub_402010+5BD↑p
.text:004068D0
.text:004068D0 var_1C          = dword ptr -1Ch
.text:004068D0 var_18          = dword ptr -18h
.text:004068D0 var_14          = dword ptr -14h
.text:004068D0 var_10          = dword ptr -10h
.text:004068D0 arg_0           = dword ptr  4
.text:004068D0
.text:004068D0                 sub     esp, 1Ch
.text:004068D3                 mov     edx, [esp+1Ch+arg_0]
.text:004068D7                 mov     [esp+1Ch+var_10], offset dword_41B670 ; int
.text:004068DF                 mov     [esp+1Ch+var_14], 0FFFFFFFFh ; int
.text:004068E7                 mov     [esp+1Ch+var_18], edx ; char *
.text:004068EB                 mov     [esp+1Ch+var_1C], 0 ; int
.text:004068F2                 call    sub_406D10
.text:004068F7                 add     esp, 1Ch
.text:004068FA                 retn
.text:004068FA sub_4068D0      endp
.text:004068FA
.text:004068FA ; ---------------------------------------------------------------------------
.text:004068FB                 align 10h
.text:00406900
.text:00406900 ; =============== S U B R O U T I N E =======================================
.text:00406900
.text:00406900
.text:00406900 ; int __cdecl sub_406900(int, int, char *)
.text:00406900 sub_406900      proc near               ; CODE XREF: .text:0040DC6E↓p
.text:00406900                                         ; sub_40DE20+96↓p ...
.text:00406900
.text:00406900 var_BC          = dword ptr -0BCh
.text:00406900 var_B8          = dword ptr -0B8h
.text:00406900 var_B4          = dword ptr -0B4h
.text:00406900 var_B0          = dword ptr -0B0h
.text:00406900 var_AC          = dword ptr -0ACh
.text:00406900 var_A8          = dword ptr -0A8h
.text:00406900 var_A4          = dword ptr -0A4h
.text:00406900 var_A0          = dword ptr -0A0h
.text:00406900 var_9C          = dword ptr -9Ch
.text:00406900 var_98          = dword ptr -98h
.text:00406900 var_94          = dword ptr -94h
.text:00406900 var_90          = dword ptr -90h
.text:00406900 var_8C          = dword ptr -8Ch
.text:00406900 var_7C          = dword ptr -7Ch
.text:00406900 var_78          = dword ptr -78h
.text:00406900 var_74          = dword ptr -74h
.text:00406900 var_70          = dword ptr -70h
.text:00406900 var_6C          = dword ptr -6Ch
.text:00406900 var_68          = dword ptr -68h
.text:00406900 var_64          = dword ptr -64h
.text:00406900 var_60          = dword ptr -60h
.text:00406900 var_5C          = dword ptr -5Ch
.text:00406900 var_4C          = dword ptr -4Ch
.text:00406900 var_48          = dword ptr -48h
.text:00406900 var_44          = dword ptr -44h
.text:00406900 var_40          = dword ptr -40h
.text:00406900 var_3C          = dword ptr -3Ch
.text:00406900 var_38          = dword ptr -38h
.text:00406900 var_34          = dword ptr -34h
.text:00406900 var_30          = dword ptr -30h
.text:00406900 var_2C          = dword ptr -2Ch
.text:00406900 arg_0           = dword ptr  4
.text:00406900 arg_4           = dword ptr  8
.text:00406900 arg_8           = dword ptr  0Ch
.text:00406900
.text:00406900                 push    ebp
.text:00406901                 xor     eax, eax
.text:00406903                 mov     ecx, 8
.text:00406908                 push    edi
.text:00406909                 push    esi
.text:0040690A                 push    ebx
.text:0040690B                 sub     esp, 0ACh
.text:00406911                 mov     ebp, [esp+0BCh+arg_4]
.text:00406918                 cld
.text:00406919                 lea     edi, [esp+0BCh+var_A8]
.text:0040691D                 mov     [esp+0BCh+var_AC], ebp
.text:00406921                 rep stosd
.text:00406923                 mov     eax, [esp+0BCh+var_8C]
.text:00406927                 mov     edi, [esp+0BCh+var_AC]
.text:0040692B                 mov     esi, [esp+0BCh+var_A8]
.text:0040692F                 mov     [esp+0BCh+var_5C], eax
.text:00406933                 mov     ebp, [esp+0BCh+var_A4]
.text:00406937                 mov     eax, [esp+0BCh+var_AC]
.text:0040693B                 mov     [esp+0BCh+var_7C], edi
.text:0040693F                 mov     ecx, [esp+0BCh+var_94]
.text:00406943                 mov     edi, [esp+0BCh+var_A0]
.text:00406947                 mov     [esp+0BCh+var_78], esi
.text:0040694B                 mov     edx, [esp+0BCh+var_90]
.text:0040694F                 mov     esi, [esp+0BCh+var_9C]
.text:00406953                 mov     [esp+0BCh+var_4C], eax
.text:00406957                 mov     ebx, [esp+0BCh+var_98]
.text:0040695B                 mov     eax, [esp+0BCh+var_A8]
.text:0040695F                 mov     [esp+0BCh+var_74], ebp
.text:00406963                 mov     [esp+0BCh+var_70], edi
.text:00406967                 mov     [esp+0BCh+var_6C], esi
.text:0040696B                 mov     [esp+0BCh+var_68], ebx
.text:0040696F                 mov     [esp+0BCh+var_64], ecx
.text:00406973                 mov     [esp+0BCh+var_60], edx
.text:00406977                 mov     [esp+0BCh+var_48], eax
.text:0040697B                 mov     [esp+0BCh+var_44], ebp
.text:0040697F                 mov     [esp+0BCh+var_40], edi
.text:00406983                 mov     [esp+0BCh+var_3C], esi
.text:0040698A                 mov     [esp+0BCh+var_38], ebx
.text:00406991                 mov     ebx, [esp+0BCh+var_8C]
.text:00406995                 mov     [esp+0BCh+var_30], edx
.text:0040699C                 mov     edx, [esp+0BCh+arg_8]
.text:004069A3                 mov     [esp+0BCh+var_34], ecx
.text:004069AA                 lea     ecx, [esp+0BCh+var_4C]
.text:004069AE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004069B2                 mov     edx, [esp+0BCh+arg_0]
.text:004069B9                 mov     [esp+0BCh+var_2C], ebx
.text:004069C0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004069C4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004069CC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004069CF                 call    sub_406D10
.text:004069D4                 add     esp, 0ACh
.text:004069DA                 pop     ebx
.text:004069DB                 pop     esi
.text:004069DC                 pop     edi
.text:004069DD                 pop     ebp
.text:004069DE                 retn
.text:004069DE sub_406900      endp
.text:004069DE
.text:004069DE ; ---------------------------------------------------------------------------
.text:004069DF                 align 10h
.text:004069E0                 push    ebp
.text:004069E1                 xor     eax, eax
.text:004069E3                 mov     ecx, 8
.text:004069E8                 push    edi
.text:004069E9                 push    esi
.text:004069EA                 push    ebx
.text:004069EB                 sub     esp, 0ACh
.text:004069F1                 mov     edx, [esp+0C4h]
.text:004069F8                 cld
.text:004069F9                 lea     edi, [esp+14h]
.text:004069FD                 mov     [esp+10h], edx
.text:00406A01                 rep stosd
.text:00406A03                 mov     eax, [esp+30h]
.text:00406A07                 mov     ebp, [esp+10h]
.text:00406A0B                 mov     edi, [esp+14h]
.text:00406A0F                 mov     [esp+60h], eax
.text:00406A13                 mov     esi, [esp+20h]
.text:00406A17                 mov     eax, [esp+10h]
.text:00406A1B                 mov     [esp+40h], ebp
.text:00406A1F                 mov     ecx, [esp+28h]
.text:00406A23                 mov     ebp, [esp+18h]
.text:00406A27                 mov     [esp+44h], edi
.text:00406A2B                 mov     edx, [esp+2Ch]
.text:00406A2F                 mov     edi, [esp+1Ch]
.text:00406A33                 mov     [esp+70h], eax
.text:00406A37                 mov     ebx, [esp+24h]
.text:00406A3B                 mov     eax, [esp+14h]
.text:00406A3F                 mov     [esp+48h], ebp
.text:00406A43                 mov     [esp+4Ch], edi
.text:00406A47                 mov     [esp+50h], esi
.text:00406A4B                 mov     [esp+54h], ebx
.text:00406A4F                 mov     [esp+58h], ecx
.text:00406A53                 mov     [esp+5Ch], edx
.text:00406A57                 mov     [esp+74h], eax
.text:00406A5B                 mov     [esp+78h], ebp
.text:00406A5F                 mov     [esp+7Ch], edi
.text:00406A63                 mov     [esp+80h], esi
.text:00406A6A                 mov     [esp+84h], ebx
.text:00406A71                 mov     esi, [esp+30h]
.text:00406A75                 lea     ebx, [esp+70h]
.text:00406A79                 mov     [esp+8Ch], edx
.text:00406A80                 mov     edx, [esp+0C8h]
.text:00406A87                 mov     [esp+88h], ecx
.text:00406A8E                 mov     ecx, [esp+0CCh]
.text:00406A95                 mov     [esp+4], edx
.text:00406A99                 mov     edx, [esp+0C0h]
.text:00406AA0                 mov     [esp+90h], esi
.text:00406AA7                 mov     [esp+0Ch], ebx
.text:00406AAB                 mov     [esp+8], ecx
.text:00406AAF                 mov     [esp], edx
.text:00406AB2                 call    sub_406D10
.text:00406AB7                 add     esp, 0ACh
.text:00406ABD                 pop     ebx
.text:00406ABE                 pop     esi
.text:00406ABF                 pop     edi
.text:00406AC0                 pop     ebp
.text:00406AC1                 retn
.text:00406AC1 ; ---------------------------------------------------------------------------
.text:00406AC2                 align 10h
.text:00406AD0                 push    ebp
.text:00406AD1                 xor     eax, eax
.text:00406AD3                 mov     ecx, 8
.text:00406AD8                 push    edi
.text:00406AD9                 push    esi
.text:00406ADA                 push    ebx
.text:00406ADB                 sub     esp, 0ACh
.text:00406AE1                 mov     edi, [esp+0C0h]
.text:00406AE8                 cld
.text:00406AE9                 mov     [esp+10h], edi
.text:00406AED                 lea     edi, [esp+14h]
.text:00406AF1                 rep stosd
.text:00406AF3                 mov     eax, [esp+30h]
.text:00406AF7                 mov     esi, [esp+10h]
.text:00406AFB                 mov     ebx, [esp+14h]
.text:00406AFF                 mov     [esp+60h], eax
.text:00406B03                 mov     ebp, [esp+18h]
.text:00406B07                 mov     eax, [esp+10h]
.text:00406B0B                 mov     [esp+40h], esi
.text:00406B0F                 mov     edi, [esp+1Ch]
.text:00406B13                 mov     esi, [esp+20h]
.text:00406B17                 mov     [esp+44h], ebx
.text:00406B1B                 mov     ecx, [esp+28h]
.text:00406B1F                 mov     edx, [esp+2Ch]
.text:00406B23                 mov     [esp+70h], eax
.text:00406B27                 mov     ebx, [esp+24h]
.text:00406B2B                 mov     eax, [esp+14h]
.text:00406B2F                 mov     [esp+48h], ebp
.text:00406B33                 mov     [esp+4Ch], edi
.text:00406B37                 mov     [esp+50h], esi
.text:00406B3B                 mov     [esp+54h], ebx
.text:00406B3F                 mov     [esp+58h], ecx
.text:00406B43                 mov     [esp+5Ch], edx
.text:00406B47                 mov     [esp+74h], eax
.text:00406B4B                 mov     [esp+78h], ebp
.text:00406B4F                 mov     [esp+7Ch], edi
.text:00406B53                 mov     [esp+80h], esi
.text:00406B5A                 mov     [esp+84h], ebx
.text:00406B61                 mov     [esp+8Ch], edx
.text:00406B68                 lea     edx, [esp+70h]
.text:00406B6C                 mov     [esp+88h], ecx
.text:00406B73                 mov     ecx, [esp+30h]
.text:00406B77                 mov     [esp+0Ch], edx
.text:00406B7B                 mov     edx, [esp+0C4h]
.text:00406B82                 mov     [esp+90h], ecx
.text:00406B89                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406B91                 mov     [esp+4], edx
.text:00406B95                 mov     dword ptr [esp], 0
.text:00406B9C                 call    sub_406D10
.text:00406BA1                 add     esp, 0ACh
.text:00406BA7                 pop     ebx
.text:00406BA8                 pop     esi
.text:00406BA9                 pop     edi
.text:00406BAA                 pop     ebp
.text:00406BAB                 retn
.text:00406BAB ; ---------------------------------------------------------------------------
.text:00406BAC                 align 10h
.text:00406BB0                 push    edi
.text:00406BB1                 push    esi
.text:00406BB2                 push    ebx
.text:00406BB3                 sub     esp, 40h
.text:00406BB6                 mov     edx, ds:dword_41B67C
.text:00406BBC                 mov     ebx, ds:dword_41B670
.text:00406BC2                 mov     esi, ds:dword_41B678
.text:00406BC8                 mov     edi, ds:dword_41B674
.text:00406BCE                 mov     [esp+1Ch], edx
.text:00406BD2                 mov     ecx, ds:dword_41B680
.text:00406BD8                 mov     edx, ds:dword_41B690
.text:00406BDE                 mov     [esp+10h], ebx
.text:00406BE2                 mov     ebx, ds:dword_41B684
.text:00406BE8                 mov     [esp+30h], edx
.text:00406BEC                 movzx   edx, byte ptr [esp+54h]
.text:00406BF1                 mov     [esp+18h], esi
.text:00406BF5                 mov     esi, ds:dword_41B68C
.text:00406BFB                 mov     [esp+14h], edi
.text:00406BFF                 mov     edi, ds:dword_41B688
.text:00406C05                 mov     [esp+20h], ecx
.text:00406C09                 mov     cl, dl
.text:00406C0B                 shr     cl, 5
.text:00406C0E                 mov     [esp+24h], ebx
.text:00406C12                 movzx   ebx, cl
.text:00406C15                 mov     [esp+2Ch], esi
.text:00406C19                 lea     esi, [esp+10h]
.text:00406C1D                 mov     [esp+28h], edi
.text:00406C21                 lea     edi, [esi+ebx*4]
.text:00406C24                 mov     ebx, edx
.text:00406C26                 mov     edx, [edi+4]
.text:00406C29                 and     ebx, 1Fh
.text:00406C2C                 mov     cl, bl
.text:00406C2E                 mov     eax, edx
.text:00406C30                 shr     eax, cl
.text:00406C32                 and     eax, 1
.text:00406C35                 xor     eax, 1
.text:00406C38                 shl     eax, cl
.text:00406C3A                 xor     edx, eax
.text:00406C3C                 mov     [edi+4], edx
.text:00406C3F                 mov     edx, [esp+50h]
.text:00406C43                 mov     [esp+0Ch], esi
.text:00406C47                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406C4F                 mov     [esp+4], edx
.text:00406C53                 mov     dword ptr [esp], 0
.text:00406C5A                 call    sub_406D10
.text:00406C5F                 add     esp, 40h
.text:00406C62                 pop     ebx
.text:00406C63                 pop     esi
.text:00406C64                 pop     edi
.text:00406C65                 retn
.text:00406C65 ; ---------------------------------------------------------------------------
.text:00406C66                 align 10h
.text:00406C70
.text:00406C70 ; =============== S U B R O U T I N E =======================================
.text:00406C70
.text:00406C70
.text:00406C70 ; int __cdecl sub_406C70(char *)
.text:00406C70 sub_406C70      proc near               ; CODE XREF: sub_40FF80+64↓p
.text:00406C70
.text:00406C70 var_4C          = dword ptr -4Ch
.text:00406C70 var_48          = dword ptr -48h
.text:00406C70 var_44          = dword ptr -44h
.text:00406C70 var_40          = dword ptr -40h
.text:00406C70 var_3C          = dword ptr -3Ch
.text:00406C70 var_38          = dword ptr -38h
.text:00406C70 var_34          = dword ptr -34h
.text:00406C70 var_30          = dword ptr -30h
.text:00406C70 var_2C          = dword ptr -2Ch
.text:00406C70 var_28          = dword ptr -28h
.text:00406C70 var_24          = dword ptr -24h
.text:00406C70 var_20          = dword ptr -20h
.text:00406C70 var_1C          = dword ptr -1Ch
.text:00406C70 arg_0           = dword ptr  4
.text:00406C70
.text:00406C70                 sub     esp, 4Ch
.text:00406C73                 mov     ecx, ds:dword_41B670
.text:00406C79                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406C81                 mov     edx, ds:dword_41B674
.text:00406C87                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00406C8E                 mov     [esp+4Ch+var_3C], ecx
.text:00406C92                 mov     ecx, ds:dword_41B67C
.text:00406C98                 mov     [esp+4Ch+var_38], edx
.text:00406C9C                 mov     edx, ds:dword_41B678
.text:00406CA2                 mov     [esp+4Ch+var_30], ecx
.text:00406CA6                 mov     ecx, ds:dword_41B680
.text:00406CAC                 mov     eax, edx
.text:00406CAE                 shr     eax, 1Ah
.text:00406CB1                 and     eax, 1
.text:00406CB4                 xor     eax, 1
.text:00406CB7                 mov     [esp+4Ch+var_2C], ecx
.text:00406CBB                 shl     eax, 1Ah
.text:00406CBE                 mov     ecx, ds:dword_41B684
.text:00406CC4                 xor     edx, eax
.text:00406CC6                 mov     [esp+4Ch+var_34], edx
.text:00406CCA                 mov     edx, [esp+4Ch+arg_0]
.text:00406CCE                 mov     [esp+4Ch+var_28], ecx
.text:00406CD2                 mov     ecx, ds:dword_41B688
.text:00406CD8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00406CDC                 mov     [esp+4Ch+var_24], ecx
.text:00406CE0                 mov     ecx, ds:dword_41B68C
.text:00406CE6                 mov     [esp+4Ch+var_20], ecx
.text:00406CEA                 mov     ecx, ds:dword_41B690
.text:00406CF0                 mov     [esp+4Ch+var_1C], ecx
.text:00406CF4                 lea     ecx, [esp+4Ch+var_3C]
.text:00406CF8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00406CFC                 call    sub_406D10
.text:00406D01                 add     esp, 4Ch
.text:00406D04                 retn
.text:00406D04 sub_406C70      endp
.text:00406D04
.text:00406D04 ; ---------------------------------------------------------------------------
.text:00406D05                 align 10h
.text:00406D10
.text:00406D10 ; =============== S U B R O U T I N E =======================================
.text:00406D10
.text:00406D10
.text:00406D10 ; int __cdecl sub_406D10(int, char *, int, int)
.text:00406D10 sub_406D10      proc near               ; CODE XREF: .text:004068C2↑p
.text:00406D10                                         ; sub_4068D0+22↑p ...
.text:00406D10
.text:00406D10 Block           = dword ptr -2Ch
.text:00406D10 var_28          = dword ptr -28h
.text:00406D10 Str             = dword ptr -24h
.text:00406D10 var_20          = dword ptr -20h
.text:00406D10 var_1C          = dword ptr -1Ch
.text:00406D10 var_18          = dword ptr -18h
.text:00406D10 var_14          = dword ptr -14h
.text:00406D10 arg_0           = dword ptr  4
.text:00406D10 arg_4           = dword ptr  8
.text:00406D10 arg_8           = dword ptr  0Ch
.text:00406D10 arg_C           = dword ptr  10h
.text:00406D10
.text:00406D10                 push    ebp
.text:00406D11                 push    edi
.text:00406D12                 push    esi
.text:00406D13                 push    ebx
.text:00406D14                 sub     esp, 1Ch
.text:00406D17                 call    _errno
.text:00406D1C                 mov     edx, [eax]
.text:00406D1E                 mov     eax, [esp+2Ch+arg_0]
.text:00406D22                 mov     [esp+2Ch+var_14], edx
.text:00406D26                 test    eax, eax
.text:00406D28                 js      loc_406ECA
.text:00406D2E                 mov     eax, [esp+2Ch+arg_0]
.text:00406D32                 cmp     dword_41A030, eax
.text:00406D38                 ja      short loc_406DB0
.text:00406D3A                 mov     esi, eax
.text:00406D3C                 inc     esi
.text:00406D3D                 cmp     esi, 1FFFFFFFh
.text:00406D43                 ja      loc_406ECF
.text:00406D49                 mov     ebx, off_41A03C
.text:00406D4F                 cmp     ebx, offset dword_41A034
.text:00406D55                 jz      loc_406EA1
.text:00406D5B
.text:00406D5B loc_406D5B:                             ; CODE XREF: sub_406D10+1B5↓j
.text:00406D5B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00406D5E                 lea     ecx, ds:0[esi*8]
.text:00406D65                 mov     ebp, esi
.text:00406D67                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00406D6B                 call    sub_410190
.text:00406D70                 mov     off_41A03C, eax
.text:00406D75                 mov     ebx, dword_41A030
.text:00406D7B                 sub     ebp, ebx
.text:00406D7D                 lea     edi, [eax+ebx*8]
.text:00406D80                 lea     eax, ds:0[ebp*8]
.text:00406D87                 cmp     eax, 7
.text:00406D8A                 jbe     short loc_406DA0
.text:00406D8C                 test    edi, 4
.text:00406D92                 jz      short loc_406DA0
.text:00406D94                 mov     dword ptr [edi], 0
.text:00406D9A                 sub     eax, 4
.text:00406D9D                 add     edi, 4
.text:00406DA0
.text:00406DA0 loc_406DA0:                             ; CODE XREF: sub_406D10+7A↑j
.text:00406DA0                                         ; sub_406D10+82↑j
.text:00406DA0                 cld
.text:00406DA1                 mov     ecx, eax
.text:00406DA3                 shr     ecx, 2
.text:00406DA6                 xor     eax, eax
.text:00406DA8                 rep stosd
.text:00406DAA                 mov     dword_41A030, esi
.text:00406DB0
.text:00406DB0 loc_406DB0:                             ; CODE XREF: sub_406D10+28↑j
.text:00406DB0                 mov     esi, off_41A03C
.text:00406DB6                 mov     eax, [esp+2Ch+arg_0]
.text:00406DBA                 mov     ebp, [esi+eax*8]
.text:00406DBD                 mov     edi, [esi+eax*8+4]
.text:00406DC1                 mov     esi, [esp+2Ch+arg_C]
.text:00406DC5                 test    esi, esi
.text:00406DC7                 jz      loc_406E97
.text:00406DCD
.text:00406DCD loc_406DCD:                             ; CODE XREF: sub_406D10+18C↓j
.text:00406DCD                 call    _errno
.text:00406DD2                 mov     ebx, [eax]
.text:00406DD4                 mov     [esp+2Ch+var_18], esi ; int
.text:00406DD8                 mov     ecx, [esi]
.text:00406DDA                 mov     [esp+2Ch+Block], edi ; int
.text:00406DDD                 mov     edx, [esp+2Ch+arg_8]
.text:00406DE1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406DE5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406DE9                 mov     ecx, [esp+2Ch+arg_4]
.text:00406DED                 mov     [esp+2Ch+var_20], edx ; int
.text:00406DF1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406DF5                 call    sub_405BD0
.text:00406DFA                 mov     esi, eax
.text:00406DFC                 call    _errno
.text:00406E01                 mov     [eax], ebx
.text:00406E03                 cmp     ebp, esi
.text:00406E05                 ja      short loc_406E7B
.text:00406E07                 lea     ebp, [esi+1]
.text:00406E0A                 mov     ebx, off_41A03C
.text:00406E10                 cmp     edi, offset unk_41B570
.text:00406E16                 mov     esi, [esp+2Ch+arg_0]
.text:00406E1A                 mov     [ebx+esi*8], ebp
.text:00406E1D                 jz      short loc_406E2D
.text:00406E1F                 mov     [esp+2Ch+Block], edi ; Block
.text:00406E22                 call    free
.text:00406E27                 mov     ebx, off_41A03C
.text:00406E2D
.text:00406E2D loc_406E2D:                             ; CODE XREF: sub_406D10+10D↑j
.text:00406E2D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406E30                 call    sub_410100
.text:00406E35                 mov     esi, [esp+2Ch+arg_C]
.text:00406E39                 mov     edi, eax
.text:00406E3B                 mov     eax, [esp+2Ch+arg_0]
.text:00406E3F                 test    esi, esi
.text:00406E41                 mov     [ebx+eax*8+4], edi
.text:00406E45                 jz      short loc_406E90
.text:00406E47
.text:00406E47 loc_406E47:                             ; CODE XREF: sub_406D10+185↓j
.text:00406E47                 call    _errno
.text:00406E4C                 mov     ebx, [eax]
.text:00406E4E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406E52                 mov     ecx, [esi]
.text:00406E54                 mov     [esp+2Ch+Block], edi ; int
.text:00406E57                 mov     edx, [esp+2Ch+arg_8]
.text:00406E5B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406E5F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406E63                 mov     ecx, [esp+2Ch+arg_4]
.text:00406E67                 mov     [esp+2Ch+var_20], edx ; int
.text:00406E6B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406E6F                 call    sub_405BD0
.text:00406E74                 call    _errno
.text:00406E79                 mov     [eax], ebx
.text:00406E7B
.text:00406E7B loc_406E7B:                             ; CODE XREF: sub_406D10+F5↑j
.text:00406E7B                 call    _errno
.text:00406E80                 mov     ebp, [esp+2Ch+var_14]
.text:00406E84                 mov     [eax], ebp
.text:00406E86                 add     esp, 1Ch
.text:00406E89                 mov     eax, edi
.text:00406E8B                 pop     ebx
.text:00406E8C                 pop     esi
.text:00406E8D                 pop     edi
.text:00406E8E                 pop     ebp
.text:00406E8F                 retn
.text:00406E90 ; ---------------------------------------------------------------------------
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: sub_406D10+135↑j
.text:00406E90                 mov     esi, offset dword_41B670
.text:00406E95                 jmp     short loc_406E47
.text:00406E97 ; ---------------------------------------------------------------------------
.text:00406E97
.text:00406E97 loc_406E97:                             ; CODE XREF: sub_406D10+B7↑j
.text:00406E97                 mov     esi, offset dword_41B670
.text:00406E9C                 jmp     loc_406DCD
.text:00406EA1 ; ---------------------------------------------------------------------------
.text:00406EA1
.text:00406EA1 loc_406EA1:                             ; CODE XREF: sub_406D10+45↑j
.text:00406EA1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00406EA8                 call    sub_410100
.text:00406EAD                 mov     off_41A03C, eax
.text:00406EB2                 mov     edi, dword_41A034
.text:00406EB8                 mov     ebx, eax
.text:00406EBA                 mov     ecx, off_41A038
.text:00406EC0                 mov     [eax], edi
.text:00406EC2                 mov     [eax+4], ecx
.text:00406EC5                 jmp     loc_406D5B
.text:00406ECA ; ---------------------------------------------------------------------------
.text:00406ECA
.text:00406ECA loc_406ECA:                             ; CODE XREF: sub_406D10+18↑j
.text:00406ECA                 call    abort
.text:00406ECF ; ---------------------------------------------------------------------------
.text:00406ECF
.text:00406ECF loc_406ECF:                             ; CODE XREF: sub_406D10+33↑j
.text:00406ECF                 call    sub_410080
.text:00406ECF sub_406D10      endp
.text:00406ECF
.text:00406ECF ; ---------------------------------------------------------------------------
.text:00406ED4                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0
.text:00406EE0 sub_406EE0      proc near               ; CODE XREF: sub_406F30+3A↓j
.text:00406EE0                                         ; sub_40A110+46B↓p ...
.text:00406EE0
.text:00406EE0 arg_0           = dword ptr  4
.text:00406EE0 arg_4           = dword ptr  8
.text:00406EE0 arg_8           = dword ptr  0Ch
.text:00406EE0
.text:00406EE0                 mov     edx, [esp+arg_8]
.text:00406EE4                 mov     ecx, [esp+arg_4]
.text:00406EE8                 mov     eax, [esp+arg_0]
.text:00406EEC                 mov     [ecx+1], dl
.text:00406EEF                 sar     edx, 8
.text:00406EF2                 mov     [ecx], al
.text:00406EF4                 mov     [ecx+2], dl
.text:00406EF7                 retn
.text:00406EF7 sub_406EE0      endp
.text:00406EF7
.text:00406EF7 ; ---------------------------------------------------------------------------
.text:00406EF8                 align 10h
.text:00406F00
.text:00406F00 ; =============== S U B R O U T I N E =======================================
.text:00406F00
.text:00406F00
.text:00406F00 sub_406F00      proc near               ; CODE XREF: sub_406F70+3F↓j
.text:00406F00                                         ; sub_40A110+313B↓p
.text:00406F00
.text:00406F00 arg_0           = dword ptr  4
.text:00406F00 arg_4           = dword ptr  8
.text:00406F00 arg_8           = dword ptr  0Ch
.text:00406F00 arg_C           = dword ptr  10h
.text:00406F00
.text:00406F00                 push    ebx
.text:00406F01                 mov     edx, [esp+4+arg_8]
.text:00406F05                 mov     ebx, [esp+4+arg_C]
.text:00406F09                 mov     ecx, [esp+4+arg_4]
.text:00406F0D                 mov     eax, [esp+4+arg_0]
.text:00406F11                 mov     [ecx+1], dl
.text:00406F14                 sar     edx, 8
.text:00406F17                 mov     [ecx+3], bl
.text:00406F1A                 sar     ebx, 8
.text:00406F1D                 mov     [ecx], al
.text:00406F1F                 mov     [ecx+2], dl
.text:00406F22                 mov     [ecx+4], bl
.text:00406F25                 pop     ebx
.text:00406F26                 retn
.text:00406F26 sub_406F00      endp
.text:00406F26
.text:00406F26 ; ---------------------------------------------------------------------------
.text:00406F27                 align 10h
.text:00406F30
.text:00406F30 ; =============== S U B R O U T I N E =======================================
.text:00406F30
.text:00406F30
.text:00406F30 sub_406F30      proc near               ; CODE XREF: sub_40A110+967↓p
.text:00406F30                                         ; sub_40A110+137C↓p ...
.text:00406F30
.text:00406F30 arg_0           = dword ptr  4
.text:00406F30 arg_4           = dword ptr  8
.text:00406F30 arg_8           = dword ptr  0Ch
.text:00406F30 arg_C           = dword ptr  10h
.text:00406F30
.text:00406F30                 push    edi
.text:00406F31                 push    esi
.text:00406F32                 push    ebx
.text:00406F33                 mov     edx, [esp+0Ch+arg_C]
.text:00406F37                 mov     ebx, [esp+0Ch+arg_4]
.text:00406F3B                 mov     edi, [esp+0Ch+arg_0]
.text:00406F3F                 mov     esi, [esp+0Ch+arg_8]
.text:00406F43                 lea     ecx, [edx+3]
.text:00406F46                 cmp     edx, ebx
.text:00406F48                 jz      short loc_406F5B
.text:00406F4A                 lea     esi, [esi+0]
.text:00406F50
.text:00406F50 loc_406F50:                             ; CODE XREF: sub_406F30+29↓j
.text:00406F50                 dec     edx
.text:00406F51                 dec     ecx
.text:00406F52                 cmp     edx, ebx
.text:00406F54                 movzx   eax, byte ptr [edx]
.text:00406F57                 mov     [ecx], al
.text:00406F59                 jnz     short loc_406F50
.text:00406F5B
.text:00406F5B loc_406F5B:                             ; CODE XREF: sub_406F30+18↑j
.text:00406F5B                 mov     [esp+0Ch+arg_8], esi
.text:00406F5F                 mov     [esp+0Ch+arg_0], edi
.text:00406F63                 mov     [esp+0Ch+arg_4], ebx
.text:00406F67                 pop     ebx
.text:00406F68                 pop     esi
.text:00406F69                 pop     edi
.text:00406F6A                 jmp     sub_406EE0
.text:00406F6A sub_406F30      endp
.text:00406F6A
.text:00406F6A ; ---------------------------------------------------------------------------
.text:00406F6F                 align 10h
.text:00406F70
.text:00406F70 ; =============== S U B R O U T I N E =======================================
.text:00406F70
.text:00406F70
.text:00406F70 sub_406F70      proc near               ; CODE XREF: sub_40A110+30CC↓p
.text:00406F70                                         ; sub_40A110+30F8↓p ...
.text:00406F70
.text:00406F70 arg_0           = dword ptr  4
.text:00406F70 arg_4           = dword ptr  8
.text:00406F70 arg_8           = dword ptr  0Ch
.text:00406F70 arg_C           = dword ptr  10h
.text:00406F70 arg_10          = dword ptr  14h
.text:00406F70
.text:00406F70                 push    ebp
.text:00406F71                 push    edi
.text:00406F72                 push    esi
.text:00406F73                 push    ebx
.text:00406F74                 mov     edx, [esp+10h+arg_10]
.text:00406F78                 mov     ebx, [esp+10h+arg_4]
.text:00406F7C                 mov     ebp, [esp+10h+arg_0]
.text:00406F80                 mov     edi, [esp+10h+arg_8]
.text:00406F84                 lea     ecx, [edx+5]
.text:00406F87                 cmp     edx, ebx
.text:00406F89                 mov     esi, [esp+10h+arg_C]
.text:00406F8D                 jz      short loc_406F9B
.text:00406F8F                 nop
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: sub_406F70+29↓j
.text:00406F90                 dec     edx
.text:00406F91                 dec     ecx
.text:00406F92                 cmp     edx, ebx
.text:00406F94                 movzx   eax, byte ptr [edx]
.text:00406F97                 mov     [ecx], al
.text:00406F99                 jnz     short loc_406F90
.text:00406F9B
.text:00406F9B loc_406F9B:                             ; CODE XREF: sub_406F70+1D↑j
.text:00406F9B                 mov     [esp+10h+arg_C], esi
.text:00406F9F                 mov     [esp+10h+arg_8], edi
.text:00406FA3                 mov     [esp+10h+arg_0], ebp
.text:00406FA7                 mov     [esp+10h+arg_4], ebx
.text:00406FAB                 pop     ebx
.text:00406FAC                 pop     esi
.text:00406FAD                 pop     edi
.text:00406FAE                 pop     ebp
.text:00406FAF                 jmp     sub_406F00
.text:00406FAF sub_406F70      endp
.text:00406FAF
.text:00406FAF ; ---------------------------------------------------------------------------
.text:00406FB4                 align 10h
.text:00406FC0
.text:00406FC0 ; =============== S U B R O U T I N E =======================================
.text:00406FC0
.text:00406FC0
.text:00406FC0 sub_406FC0      proc near               ; CODE XREF: sub_40A110+5C6↓p
.text:00406FC0
.text:00406FC0 arg_0           = dword ptr  4
.text:00406FC0 arg_4           = dword ptr  8
.text:00406FC0 arg_8           = dword ptr  0Ch
.text:00406FC0
.text:00406FC0                 push    ebx
.text:00406FC1                 mov     edx, [esp+4+arg_4]
.text:00406FC5                 xor     ebx, ebx
.text:00406FC7                 mov     ecx, [esp+4+arg_8]
.text:00406FCB                 sub     edx, 2
.text:00406FCE                 cmp     edx, [esp+4+arg_0]
.text:00406FD2                 jbe     short loc_406FDA
.text:00406FD4                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:00406FD8                 jz      short loc_407012
.text:00406FDA
.text:00406FDA loc_406FDA:                             ; CODE XREF: sub_406FC0+12↑j
.text:00406FDA                                         ; sub_406FC0+54↓j
.text:00406FDA                 movzx   edx, byte ptr [edx]
.text:00406FDD                 xor     eax, eax
.text:00406FDF                 cmp     dl, 28h ; '('
.text:00406FE2                 jz      short loc_407007
.text:00406FE4
.text:00406FE4 loc_406FE4:                             ; CODE XREF: sub_406FC0+50↓j
.text:00406FE4                 cmp     dl, 7Ch ; '|'
.text:00406FE7                 jz      short loc_406FF0
.text:00406FE9
.text:00406FE9 loc_406FE9:                             ; CODE XREF: sub_406FC0+3D↓j
.text:00406FE9                                         ; sub_406FC0+45↓j
.text:00406FE9                 pop     ebx
.text:00406FEA                 retn
.text:00406FEA ; ---------------------------------------------------------------------------
.text:00406FEB                 align 10h
.text:00406FF0
.text:00406FF0 loc_406FF0:                             ; CODE XREF: sub_406FC0+27↑j
.text:00406FF0                 and     ecx, 0FFFF8000h
.text:00406FF6                 test    cx, cx
.text:00406FF9                 jnz     short loc_407000
.text:00406FFB                 test    bl, bl
.text:00406FFD                 jz      short loc_406FE9
.text:00406FFF                 nop
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: sub_406FC0+39↑j
.text:00407000                                         ; sub_406FC0+4A↓j ...
.text:00407000                 mov     eax, 1
.text:00407005                 jmp     short loc_406FE9
.text:00407007 ; ---------------------------------------------------------------------------
.text:00407007
.text:00407007 loc_407007:                             ; CODE XREF: sub_406FC0+22↑j
.text:00407007                 test    ch, 20h
.text:0040700A                 jnz     short loc_407000
.text:0040700C                 test    bl, bl
.text:0040700E                 jnz     short loc_407000
.text:00407010                 jmp     short loc_406FE4
.text:00407012 ; ---------------------------------------------------------------------------
.text:00407012
.text:00407012 loc_407012:                             ; CODE XREF: sub_406FC0+18↑j
.text:00407012                 mov     bl, 1
.text:00407014                 jmp     short loc_406FDA
.text:00407014 sub_406FC0      endp
.text:00407014
.text:00407014 ; ---------------------------------------------------------------------------
.text:00407016                 align 10h
.text:00407020
.text:00407020 ; =============== S U B R O U T I N E =======================================
.text:00407020
.text:00407020
.text:00407020 sub_407020      proc near               ; CODE XREF: sub_40A110+B9A↓p
.text:00407020
.text:00407020 var_9           = byte ptr -9
.text:00407020 var_8           = dword ptr -8
.text:00407020 var_4           = dword ptr -4
.text:00407020 arg_0           = dword ptr  4
.text:00407020 arg_4           = dword ptr  8
.text:00407020 arg_8           = dword ptr  0Ch
.text:00407020
.text:00407020                 sub     esp, 0Ch
.text:00407023                 mov     edx, [esp+0Ch+arg_8]
.text:00407027                 mov     [esp+0Ch+var_4], esi
.text:0040702B                 mov     esi, [esp+0Ch+arg_0]
.text:0040702F                 mov     [esp+0Ch+var_8], ebx
.text:00407033                 lea     eax, [esi+1]
.text:00407036                 movzx   ebx, byte ptr [esi]
.text:00407039                 cmp     bl, 5Ch ; '\'
.text:0040703C                 setz    [esp+0Ch+var_9]
.text:00407041                 cmp     eax, [esp+0Ch+arg_4]
.text:00407045                 sbb     ecx, ecx
.text:00407047                 and     ecx, eax
.text:00407049                 xor     eax, eax
.text:0040704B                 test    dh, 20h
.text:0040704E                 jz      short loc_407088
.text:00407050                 cmp     bl, 29h ; ')'
.text:00407053
.text:00407053 loc_407053:                             ; CODE XREF: sub_407020+76↓j
.text:00407053                 jz      short loc_407071
.text:00407055
.text:00407055 loc_407055:                             ; CODE XREF: sub_407020+6D↓j
.text:00407055                                         ; sub_407020+71↓j
.text:00407055                 and     edx, 0FFFF8000h
.text:0040705B                 test    dx, dx
.text:0040705E                 jz      short loc_407078
.text:00407060                 cmp     byte ptr [esi], 7Ch ; '|'
.text:00407063
.text:00407063 loc_407063:                             ; CODE XREF: sub_407020+66↓j
.text:00407063                 jz      short loc_407071
.text:00407065
.text:00407065 loc_407065:                             ; CODE XREF: sub_407020+56↓j
.text:00407065                                         ; sub_407020+5D↓j ...
.text:00407065                 mov     ebx, [esp+0Ch+var_8]
.text:00407069                 mov     esi, [esp+0Ch+var_4]
.text:0040706D                 add     esp, 0Ch
.text:00407070                 retn
.text:00407071 ; ---------------------------------------------------------------------------
.text:00407071
.text:00407071 loc_407071:                             ; CODE XREF: sub_407020:loc_407053↑j
.text:00407071                                         ; sub_407020:loc_407063↑j
.text:00407071                 mov     eax, 1
.text:00407076                 jmp     short loc_407065
.text:00407078 ; ---------------------------------------------------------------------------
.text:00407078
.text:00407078 loc_407078:                             ; CODE XREF: sub_407020+3E↑j
.text:00407078                 cmp     [esp+0Ch+var_9], 0
.text:0040707D                 jz      short loc_407065
.text:0040707F                 test    ecx, ecx
.text:00407081                 jz      short loc_407065
.text:00407083                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:00407086                 jmp     short loc_407063
.text:00407088 ; ---------------------------------------------------------------------------
.text:00407088
.text:00407088 loc_407088:                             ; CODE XREF: sub_407020+2E↑j
.text:00407088                 cmp     [esp+0Ch+var_9], 0
.text:0040708D                 jz      short loc_407055
.text:0040708F                 test    ecx, ecx
.text:00407091                 jz      short loc_407055
.text:00407093                 cmp     byte ptr [ecx], 29h ; ')'
.text:00407096                 jmp     short loc_407053
.text:00407096 sub_407020      endp
.text:00407096
.text:00407096 ; ---------------------------------------------------------------------------
.text:00407098                 align 10h
.text:004070A0
.text:004070A0 ; =============== S U B R O U T I N E =======================================
.text:004070A0
.text:004070A0
.text:004070A0 sub_4070A0      proc near               ; CODE XREF: sub_40A110:loc_40C1F3↓p
.text:004070A0
.text:004070A0 arg_0           = dword ptr  4
.text:004070A0 arg_4           = dword ptr  8
.text:004070A0 arg_8           = dword ptr  0Ch
.text:004070A0 arg_C           = dword ptr  10h
.text:004070A0 arg_10          = dword ptr  14h
.text:004070A0 arg_14          = dword ptr  18h
.text:004070A0
.text:004070A0                 push    ebp
.text:004070A1                 push    edi
.text:004070A2                 push    esi
.text:004070A3                 push    ebx
.text:004070A4                 mov     ecx, [esp+10h+arg_4]
.text:004070A8                 mov     esi, [esp+10h+arg_0]
.text:004070AC                 mov     ebx, [esp+10h+arg_C]
.text:004070B0                 mov     edx, [ecx]
.text:004070B2                 cmp     edx, [esp+10h+arg_8]
.text:004070B6                 jz      loc_40716A
.text:004070BC                 lea     edi, [edx+1]
.text:004070BF                 mov     [ecx], edi
.text:004070C1                 xor     ecx, ecx
.text:004070C3                 test    [esp+10h+arg_10], 10000h
.text:004070CB                 setz    cl
.text:004070CE                 dec     ecx
.text:004070CF                 and     ecx, 0Bh
.text:004070D2                 test    ebx, ebx
.text:004070D4                 jz      loc_407165
.text:004070DA                 movzx   edi, byte ptr [edx]
.text:004070DD                 and     esi, 0FFh
.text:004070E3                 movsx   esi, byte ptr [esi+ebx]
.text:004070E7                 movzx   ebp, byte ptr [edi+ebx]
.text:004070EB
.text:004070EB loc_4070EB:                             ; CODE XREF: sub_4070A0+C8↓j
.text:004070EB                 cmp     esi, ebp
.text:004070ED                 mov     edx, esi
.text:004070EF                 ja      short loc_40715E
.text:004070F1                 jmp     short loc_407100
.text:004070F1 ; ---------------------------------------------------------------------------
.text:004070F3                 align 10h
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: sub_4070A0+51↑j
.text:00407100                                         ; sub_4070A0+BC↓j
.text:00407100                 test    ebx, ebx
.text:00407102                 movzx   eax, dl
.text:00407105                 jz      short loc_40710E
.text:00407107                 movzx   ecx, dl
.text:0040710A                 movzx   eax, byte ptr [ecx+ebx]
.text:0040710E
.text:0040710E loc_40710E:                             ; CODE XREF: sub_4070A0+65↑j
.text:0040710E                 mov     edi, [esp+10h+arg_14]
.text:00407112                 sar     eax, 3
.text:00407115                 add     edi, eax
.text:00407117                 test    ebx, ebx
.text:00407119                 movzx   eax, dl
.text:0040711C                 jz      short loc_407125
.text:0040711E                 movzx   esi, dl
.text:00407121                 movzx   eax, byte ptr [esi+ebx]
.text:00407125
.text:00407125 loc_407125:                             ; CODE XREF: sub_4070A0+7C↑j
.text:00407125                 mov     esi, [esp+10h+arg_14]
.text:00407129                 sar     eax, 3
.text:0040712C                 movzx   ecx, dl
.text:0040712F                 add     eax, esi
.text:00407131                 test    ebx, ebx
.text:00407133                 movzx   esi, byte ptr [eax]
.text:00407136                 jz      short loc_40713F
.text:00407138                 movzx   eax, dl
.text:0040713B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040713F
.text:0040713F loc_40713F:                             ; CODE XREF: sub_4070A0+96↑j
.text:0040713F                 mov     eax, ecx
.text:00407141                 inc     edx
.text:00407142                 and     eax, 1F8h
.text:00407147                 sub     ecx, eax
.text:00407149                 mov     eax, 1
.text:0040714E                 shl     eax, cl
.text:00407150                 mov     ecx, eax
.text:00407152                 mov     eax, esi
.text:00407154                 or      al, cl
.text:00407156                 mov     [edi], al
.text:00407158                 xor     ecx, ecx
.text:0040715A                 cmp     edx, ebp
.text:0040715C                 jbe     short loc_407100
.text:0040715E
.text:0040715E loc_40715E:                             ; CODE XREF: sub_4070A0+4F↑j
.text:0040715E                 mov     eax, ecx
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: sub_4070A0+CF↓j
.text:00407160                 pop     ebx
.text:00407161                 pop     esi
.text:00407162                 pop     edi
.text:00407163                 pop     ebp
.text:00407164                 retn
.text:00407165 ; ---------------------------------------------------------------------------
.text:00407165
.text:00407165 loc_407165:                             ; CODE XREF: sub_4070A0+34↑j
.text:00407165                 movzx   ebp, byte ptr [edx]
.text:00407168                 jmp     short loc_4070EB
.text:0040716A ; ---------------------------------------------------------------------------
.text:0040716A
.text:0040716A loc_40716A:                             ; CODE XREF: sub_4070A0+16↑j
.text:0040716A                 mov     eax, 0Bh
.text:0040716F                 jmp     short loc_407160
.text:0040716F sub_4070A0      endp
.text:0040716F
.text:0040716F ; ---------------------------------------------------------------------------
.text:00407171                 db 0EBh, 0Dh, 90h
.text:00407174                 align 10h
.text:00407180 jpt_407477      dd offset loc_407A2B    ; DATA XREF: sub_407200:loc_407470↓r
.text:00407180                                         ; sub_407200+BEF↓r ...
.text:00407180                 dd offset loc_407A43    ; jump table for switch statement
.text:00407180                 dd offset loc_407A48
.text:00407180                 dd offset loc_407B43
.text:00407180                 dd offset loc_4093A6
.text:00407180                 dd offset loc_4092B0
.text:00407198 jpt_407C04      dd offset loc_4091C4    ; DATA XREF: sub_407200+9FD↓r
.text:00407198                 dd offset loc_408DC0    ; jump table for switch statement
.text:004071A0                 dd offset loc_408C23
.text:004071A4                 dd offset loc_408BD9
.text:004071A8                 dd offset loc_408B7D
.text:004071AC                 dd offset loc_408B40
.text:004071B0                 dd offset loc_408B26
.text:004071B4                 dd offset loc_40819A
.text:004071B8                 dd offset loc_408B21
.text:004071BC                 dd offset loc_408B1C
.text:004071C0                 dd offset loc_4089A1
.text:004071C4                 dd offset loc_4087A5
.text:004071C8                 dd offset loc_40870C
.text:004071CC                 dd offset loc_408586
.text:004071D0                 dd offset loc_408400
.text:004071D4                 dd offset loc_4081B8
.text:004071D8                 dd offset loc_40816F
.text:004071DC                 dd offset loc_408117
.text:004071E0                 dd offset loc_408067
.text:004071E4                 dd offset loc_407FB6
.text:004071E8                 dd offset loc_407ECA
.text:004071EC                 dd offset loc_407DF8
.text:004071F0                 dd offset loc_407CF2
.text:004071F4                 dd offset loc_407C06
.text:004071F8                 align 10h
.text:00407200
.text:00407200 ; =============== S U B R O U T I N E =======================================
.text:00407200
.text:00407200
.text:00407200 sub_407200      proc near               ; CODE XREF: sub_409F20+3E↓p
.text:00407200                                         ; .text:00409F70↓j ...
.text:00407200
.text:00407200 Size            = dword ptr -0BCh
.text:00407200 var_B8          = dword ptr -0B8h
.text:00407200 var_B4          = dword ptr -0B4h
.text:00407200 var_B0          = dword ptr -0B0h
.text:00407200 var_A5          = byte ptr -0A5h
.text:00407200 var_A4          = dword ptr -0A4h
.text:00407200 var_A0          = dword ptr -0A0h
.text:00407200 var_9C          = dword ptr -9Ch
.text:00407200 var_97          = byte ptr -97h
.text:00407200 var_96          = byte ptr -96h
.text:00407200 var_95          = byte ptr -95h
.text:00407200 var_94          = dword ptr -94h
.text:00407200 var_90          = dword ptr -90h
.text:00407200 var_8C          = dword ptr -8Ch
.text:00407200 var_88          = dword ptr -88h
.text:00407200 var_84          = dword ptr -84h
.text:00407200 var_80          = dword ptr -80h
.text:00407200 var_7C          = dword ptr -7Ch
.text:00407200 var_78          = dword ptr -78h
.text:00407200 var_74          = dword ptr -74h
.text:00407200 var_70          = dword ptr -70h
.text:00407200 var_6C          = dword ptr -6Ch
.text:00407200 var_68          = dword ptr -68h
.text:00407200 var_64          = dword ptr -64h
.text:00407200 var_60          = dword ptr -60h
.text:00407200 var_5C          = dword ptr -5Ch
.text:00407200 var_58          = dword ptr -58h
.text:00407200 var_54          = dword ptr -54h
.text:00407200 var_50          = dword ptr -50h
.text:00407200 var_4C          = dword ptr -4Ch
.text:00407200 var_48          = dword ptr -48h
.text:00407200 var_44          = dword ptr -44h
.text:00407200 var_40          = dword ptr -40h
.text:00407200 var_3C          = dword ptr -3Ch
.text:00407200 var_38          = dword ptr -38h
.text:00407200 var_34          = dword ptr -34h
.text:00407200 var_30          = dword ptr -30h
.text:00407200 Src             = dword ptr -2Ch
.text:00407200 var_28          = dword ptr -28h
.text:00407200 var_24          = dword ptr -24h
.text:00407200 arg_0           = dword ptr  4
.text:00407200 arg_4           = dword ptr  8
.text:00407200 arg_8           = dword ptr  0Ch
.text:00407200 arg_C           = dword ptr  10h
.text:00407200 arg_10          = dword ptr  14h
.text:00407200 arg_14          = dword ptr  18h
.text:00407200 arg_18          = dword ptr  1Ch
.text:00407200 arg_1C          = dword ptr  20h
.text:00407200
.text:00407200                 push    ebp
.text:00407201                 push    edi
.text:00407202                 push    esi
.text:00407203                 push    ebx
.text:00407204                 sub     esp, 0ACh
.text:0040720A                 mov     ebx, [esp+0BCh+arg_0]
.text:00407211                 mov     [esp+0BCh+var_54], 0
.text:00407219                 mov     ecx, [esp+0BCh+arg_0]
.text:00407220                 mov     esi, [esp+0BCh+arg_1C]
.text:00407227                 mov     [esp+0BCh+var_60], 101h
.text:0040722F                 mov     ebp, [ebx+8]
.text:00407232                 mov     edi, [ecx]
.text:00407234                 mov     [esp+0BCh+var_64], 100h
.text:0040723C                 mov     eax, [ebx+18h]
.text:0040723F                 mov     edx, [ebx+14h]
.text:00407242                 mov     [esp+0BCh+var_4C], edi
.text:00407246                 inc     eax
.text:00407247                 add     edi, ebp
.text:00407249                 mov     [esp+0BCh+var_58], edx
.text:0040724D                 mov     [esp+0BCh+var_50], edi
.text:00407251                 mov     [esp+0BCh+var_5C], eax
.text:00407255                 mov     [esp+0BCh+var_7C], 0
.text:0040725D                 mov     [esp+0BCh+var_88], 0
.text:00407265                 mov     [esp+0BCh+var_8C], 0
.text:0040726D                 mov     [esp+0BCh+Size], 14h ; Size
.text:00407274                 call    malloc
.text:00407279                 mov     [esp+0BCh+Src], eax
.text:00407280                 mov     edx, eax
.text:00407282                 test    edx, edx
.text:00407284                 mov     eax, 0FFFFFFFEh
.text:00407289                 jz      loc_407957
.text:0040728F                 mov     edx, [esp+0BCh+arg_0]
.text:00407296                 xor     edi, edi
.text:00407298                 mov     ebp, 5
.text:0040729D                 mov     [esp+0BCh+var_28], ebp
.text:004072A4                 mov     [esp+0BCh+var_24], edi
.text:004072AB                 mov     ebx, [edx+18h]
.text:004072AE                 test    ebx, ebx
.text:004072B0                 jnz     loc_409497
.text:004072B6                 mov     [esp+0BCh+var_90], 0
.text:004072BE                 mov     [esp+0BCh+var_84], 0
.text:004072C6                 mov     [esp+0BCh+var_80], 0
.text:004072CE                 mov     [esp+0BCh+var_74], 0
.text:004072D6                 mov     [esp+0BCh+var_70], 0
.text:004072DE                 mov     [esp+0BCh+var_6C], 0
.text:004072E6                 mov     [esp+0BCh+var_68], 0
.text:004072EE                 mov     [esp+0BCh+var_94], 0
.text:004072F6                 mov     [esp+0BCh+var_78], 0
.text:004072FE
.text:004072FE loc_4072FE:                             ; CODE XREF: sub_407200+236C↓j
.text:004072FE                 mov     eax, [esp+0BCh+arg_14]
.text:00407305                 test    eax, eax
.text:00407307                 js      loc_4079F5
.text:0040730D                 mov     ebp, [esp+0BCh+arg_8]
.text:00407314                 mov     ecx, [esp+0BCh+arg_10]
.text:0040731B                 add     ebp, ecx
.text:0040731D                 cmp     [esp+0BCh+arg_14], ebp
.text:00407324                 jg      loc_4079F5
.text:0040732A                 mov     ebp, 1
.text:0040732F                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407333                 jnb     short loc_407378
.text:00407335                 mov     eax, [esp+0BCh+var_78]
.text:00407339                 add     eax, 4
.text:0040733C
.text:0040733C loc_40733C:                             ; CODE XREF: sub_407200+176↓j
.text:0040733C                 mov     ecx, [esp+0BCh+var_74]
.text:00407340                 mov     ebx, [esp+0BCh+var_70]
.text:00407344                 mov     edx, [esp+0BCh+var_6C]
.text:00407348                 mov     dword ptr [ecx+ebp*4], offset unk_41B7B0
.text:0040734F                 mov     edi, [esp+0BCh+var_68]
.text:00407353                 mov     dword ptr [ebx+ebp*4], offset unk_41B7B0
.text:0040735A                 mov     dword ptr [edx+ebp*4], offset unk_41B7B0
.text:00407361                 mov     dword ptr [edi+ebp*4], offset unk_41B7B0
.text:00407368                 inc     ebp
.text:00407369                 or      dword ptr [eax], 3
.text:0040736C                 and     byte ptr [eax], 0E3h
.text:0040736F                 add     eax, 4
.text:00407372                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407376                 jb      short loc_40733C
.text:00407378
.text:00407378 loc_407378:                             ; CODE XREF: sub_407200+133↑j
.text:00407378                 mov     eax, [esp+0BCh+arg_10]
.text:0040737F                 test    eax, eax
.text:00407381                 jnz     short loc_4073BC
.text:00407383                 mov     ebp, [esp+0BCh+arg_4]
.text:0040738A                 test    ebp, ebp
.text:0040738C                 jz      short loc_4073BC
.text:0040738E                 mov     ebx, [esp+0BCh+arg_4]
.text:00407395                 xor     edx, edx
.text:00407397                 xor     edi, edi
.text:00407399                 mov     [esp+0BCh+arg_4], edx
.text:004073A0                 mov     ecx, [esp+0BCh+arg_8]
.text:004073A7                 mov     [esp+0BCh+arg_8], edi
.text:004073AE                 mov     [esp+0BCh+arg_C], ebx
.text:004073B5                 mov     [esp+0BCh+arg_10], ecx
.text:004073BC
.text:004073BC loc_4073BC:                             ; CODE XREF: sub_407200+181↑j
.text:004073BC                                         ; sub_407200+18C↑j
.text:004073BC                 mov     ecx, [esp+0BCh+arg_4]
.text:004073C3                 mov     eax, [esp+0BCh+arg_8]
.text:004073CA                 mov     ebp, [esp+0BCh+arg_C]
.text:004073D1                 mov     edi, [esp+0BCh+arg_10]
.text:004073D8                 add     ecx, eax
.text:004073DA                 mov     [esp+0BCh+var_34], ecx
.text:004073E1                 add     ebp, edi
.text:004073E3                 cmp     esi, [esp+0BCh+arg_8]
.text:004073EA                 mov     [esp+0BCh+var_38], ebp
.text:004073F1                 jg      loc_409472
.text:004073F7                 mov     edx, [esp+0BCh+arg_4]
.text:004073FE                 add     esi, edx
.text:00407400                 mov     [esp+0BCh+var_3C], esi
.text:00407407                 mov     esi, [esp+0BCh+arg_C]
.text:0040740E
.text:0040740E loc_40740E:                             ; CODE XREF: sub_407200+2292↓j
.text:0040740E                 mov     [esp+0BCh+var_40], esi
.text:00407412                 mov     ecx, [esp+0BCh+arg_8]
.text:00407419                 test    ecx, ecx
.text:0040741B                 jle     loc_409448
.text:00407421                 mov     eax, [esp+0BCh+arg_8]
.text:00407428                 cmp     [esp+0BCh+arg_14], eax
.text:0040742F                 jg      loc_409448
.text:00407435                 mov     edx, [esp+0BCh+arg_4]
.text:0040743C                 mov     ebx, [esp+0BCh+arg_14]
.text:00407443                 mov     esi, [esp+0BCh+var_3C]
.text:0040744A                 add     edx, ebx
.text:0040744C                 mov     [esp+0BCh+var_44], edx
.text:00407450                 mov     [esp+0BCh+var_48], esi
.text:00407454
.text:00407454 loc_407454:                             ; CODE XREF: sub_407200+469↓j
.text:00407454                                         ; sub_407200+47A↓j ...
.text:00407454                 mov     edx, [esp+0BCh+var_50]
.text:00407458                 mov     eax, offset loc_407479
.text:0040745D                 cmp     [esp+0BCh+var_4C], edx
.text:00407461                 jz      short loc_407477
.text:00407463
.text:00407463 loc_407463:                             ; CODE XREF: sub_407200+838↓j
.text:00407463                 mov     ebp, [esp+0BCh+var_4C]
.text:00407467                 movzx   ebx, byte ptr [ebp+0]
.text:0040746B                 inc     ebp
.text:0040746C                 mov     [esp+0BCh+var_4C], ebp
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: sub_407200+1CA0↓j
.text:00407470                 mov     eax, ds:jpt_407477[ebx*4] ; switch 6 cases
.text:00407477
.text:00407477 loc_407477:                             ; CODE XREF: sub_407200+261↑j
.text:00407477                                         ; sub_407200+83E↓j ...
.text:00407477                 jmp     eax             ; switch jump
.text:00407479 ; ---------------------------------------------------------------------------
.text:00407479
.text:00407479 loc_407479:                             ; DATA XREF: sub_407200+258↑o
.text:00407479                                         ; sub_407200+82F↓o ...
.text:00407479                 mov     eax, [esp+0BCh+var_40]
.text:0040747D                 cmp     [esp+0BCh+var_44], eax
.text:00407481                 jz      loc_407709
.text:00407487                 mov     edi, [esp+0BCh+arg_8]
.text:0040748E                 xor     edx, edx
.text:00407490                 test    edi, edi
.text:00407492                 jz      short loc_4074AC
.text:00407494                 mov     eax, [esp+0BCh+var_88]
.text:00407498                 cmp     [esp+0BCh+arg_4], eax
.text:0040749F                 ja      short loc_4074AC
.text:004074A1                 mov     esi, [esp+0BCh+var_34]
.text:004074A8                 cmp     eax, esi
.text:004074AA                 jbe     short loc_4074AE
.text:004074AC
.text:004074AC loc_4074AC:                             ; CODE XREF: sub_407200+292↑j
.text:004074AC                                         ; sub_407200+29F↑j
.text:004074AC                 mov     dl, 1
.text:004074AE
.text:004074AE loc_4074AE:                             ; CODE XREF: sub_407200+2AA↑j
.text:004074AE                 mov     ebp, [esp+0BCh+var_3C]
.text:004074B5                 cmp     [esp+0BCh+var_48], ebp
.text:004074B9                 setz    cl
.text:004074BC                 cmp     dl, cl
.text:004074BE                 jz      loc_407A18
.text:004074C4                 mov     edx, [esp+0BCh+var_88]
.text:004074C8                 cmp     [esp+0BCh+var_44], edx
.text:004074CC                 setnbe  al
.text:004074CF
.text:004074CF loc_4074CF:                             ; CODE XREF: sub_407200+826↓j
.text:004074CF                 mov     esi, [esp+0BCh+var_24]
.text:004074D6                 test    esi, esi
.text:004074D8                 jz      loc_4079FF
.text:004074DE                 mov     ecx, [esp+0BCh+var_7C]
.text:004074E2                 test    ecx, ecx
.text:004074E4                 jz      short loc_4074EA
.text:004074E6                 test    al, al
.text:004074E8                 jz      short loc_407530
.text:004074EA
.text:004074EA loc_4074EA:                             ; CODE XREF: sub_407200+2E4↑j
.text:004074EA                 mov     [esp+0BCh+var_7C], 1
.text:004074F2                 mov     eax, [esp+0BCh+var_5C]
.text:004074F6                 mov     ebp, 1
.text:004074FB                 mov     edi, [esp+0BCh+var_44]
.text:004074FF                 cmp     ebp, eax
.text:00407501                 mov     [esp+0BCh+var_88], edi
.text:00407505                 jnb     short loc_407530
.text:00407507
.text:00407507 loc_407507:                             ; CODE XREF: sub_407200+328↓j
.text:00407507                 mov     edx, [esp+0BCh+var_68]
.text:0040750B                 mov     ecx, [esp+0BCh+var_80]
.text:0040750F                 mov     eax, [esp+0BCh+var_6C]
.text:00407513                 mov     edi, [edx+ebp*4]
.text:00407516                 mov     edx, [esp+0BCh+var_84]
.text:0040751A                 mov     [ecx+ebp*4], edi
.text:0040751D                 mov     ebx, [eax+ebp*4]
.text:00407520                 mov     [edx+ebp*4], ebx
.text:00407523                 inc     ebp
.text:00407524                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407528                 jb      short loc_407507
.text:0040752A                 lea     esi, [esi+0]
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: sub_407200+2E8↑j
.text:00407530                                         ; sub_407200+305↑j ...
.text:00407530                 test    esi, esi
.text:00407532                 mov     eax, esi
.text:00407534                 jz      loc_40769E
.text:0040753A                 mov     ebx, [esp+0BCh+Src]
.text:00407541                 dec     esi
.text:00407542                 mov     [esp+0BCh+var_24], esi
.text:00407549                 mov     esi, [ebx+esi*4]
.text:0040754C                 test    esi, esi
.text:0040754E                 jz      short loc_407554
.text:00407550                 mov     [esp+0BCh+var_44], esi
.text:00407554
.text:00407554 loc_407554:                             ; CODE XREF: sub_407200+34E↑j
.text:00407554                 lea     ecx, [eax-2]
.text:00407557                 lea     edx, [eax-3]
.text:0040755A                 mov     [esp+0BCh+var_24], ecx
.text:00407561                 mov     ebp, [ebx+ecx*4]
.text:00407564                 lea     ecx, [eax-4]
.text:00407567                 mov     [esp+0BCh+var_24], edx
.text:0040756E                 mov     [esp+0BCh+var_4C], ebp
.text:00407572                 mov     edi, [ebx+edx*4]
.text:00407575                 mov     [esp+0BCh+var_24], ecx
.text:0040757C                 mov     [esp+0BCh+var_64], edi
.text:00407580                 mov     ebp, [ebx+ecx*4]
.text:00407583                 mov     ecx, [esp+0BCh+var_64]
.text:00407587                 mov     [esp+0BCh+var_60], ebp
.text:0040758B                 cmp     ecx, ebp
.text:0040758D                 jb      short loc_4075E9
.text:0040758F                 nop
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_407200+3E7↓j
.text:00407590                 mov     eax, [esp+0BCh+var_24]
.text:00407597                 mov     ebp, [esp+0BCh+var_78]
.text:0040759B                 dec     eax
.text:0040759C                 mov     [esp+0BCh+var_24], eax
.text:004075A3                 mov     edi, [ebx+eax*4]
.text:004075A6                 mov     [ebp+ecx*4+0], edi
.text:004075AA                 mov     ebp, [esp+0BCh+var_24]
.text:004075B1                 mov     esi, [esp+0BCh+Src]
.text:004075B8                 lea     edx, [ebp-1]
.text:004075BB                 sub     ebp, 2
.text:004075BE                 mov     ebx, esi
.text:004075C0                 mov     [esp+0BCh+var_24], edx
.text:004075C7                 mov     edi, [esi+edx*4]
.text:004075CA                 mov     edx, [esp+0BCh+var_6C]
.text:004075CE                 mov     [esp+0BCh+var_24], ebp
.text:004075D5                 mov     [edx+ecx*4], edi
.text:004075D8                 mov     edi, [esi+ebp*4]
.text:004075DB                 mov     esi, [esp+0BCh+var_68]
.text:004075DF                 mov     [esi+ecx*4], edi
.text:004075E2                 dec     ecx
.text:004075E3                 cmp     ecx, [esp+0BCh+var_60]
.text:004075E7                 jnb     short loc_407590
.text:004075E9
.text:004075E9 loc_4075E9:                             ; CODE XREF: sub_407200+38D↑j
.text:004075E9                 mov     [esp+0BCh+var_8C], 0
.text:004075F1                 mov     ebx, [esp+0BCh+var_4C]
.text:004075F5                 test    ebx, ebx
.text:004075F7                 jz      short loc_407652
.text:004075F9                 mov     edx, [esp+0BCh+var_50]
.text:004075FD                 cmp     [esp+0BCh+var_4C], edx
.text:00407601                 jnb     short loc_40765E
.text:00407603                 mov     ecx, [esp+0BCh+var_4C]
.text:00407607                 xor     edx, edx
.text:00407609                 movzx   eax, byte ptr [ecx]
.text:0040760C                 cmp     eax, 12h
.text:0040760F                 ja      loc_407695
.text:00407615                 cmp     eax, 11h
.text:00407618                 jnb     short loc_407620
.text:0040761A                 cmp     eax, 0Dh
.text:0040761D                 jnz     short loc_40765E
.text:0040761F                 nop
.text:00407620
.text:00407620 loc_407620:                             ; CODE XREF: sub_407200+418↑j
.text:00407620                                         ; sub_407200+49C↓j
.text:00407620                 mov     ebp, [esp+0BCh+var_4C]
.text:00407624                 mov     ecx, [esp+0BCh+var_4C]
.text:00407628                 inc     ebp
.text:00407629                 mov     [esp+0BCh+var_30], ebp
.text:00407630                 movsx   esi, byte ptr [ebp+1]
.text:00407634                 movzx   eax, byte ptr [ecx+1]
.text:00407638                 shl     esi, 8
.text:0040763B                 lea     edi, [esi+eax]
.text:0040763E                 lea     eax, [edi+ecx+3]
.text:00407642                 test    dl, dl
.text:00407644                 mov     [esp+0BCh+var_30], eax
.text:0040764B                 jz      short loc_407690
.text:0040764D                 cmp     byte ptr [eax], 15h
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_407200+493↓j
.text:00407650                 jnz     short loc_40765E
.text:00407652
.text:00407652 loc_407652:                             ; CODE XREF: sub_407200+3F7↑j
.text:00407652                                         ; sub_407200+889↓j ...
.text:00407652                 mov     esi, [esp+0BCh+var_24]
.text:00407659                 jmp     loc_407530
.text:0040765E ; ---------------------------------------------------------------------------
.text:0040765E
.text:0040765E loc_40765E:                             ; CODE XREF: sub_407200+401↑j
.text:0040765E                                         ; sub_407200+41D↑j ...
.text:0040765E                 mov     ebx, [esp+0BCh+arg_4]
.text:00407665                 cmp     [esp+0BCh+var_44], ebx
.text:00407669                 jb      loc_407454
.text:0040766F                 mov     edi, [esp+0BCh+var_34]
.text:00407676                 cmp     [esp+0BCh+var_44], edi
.text:0040767A                 ja      loc_407454
.text:00407680                 mov     edx, [esp+0BCh+var_3C]
.text:00407687                 mov     [esp+0BCh+var_48], edx
.text:0040768B                 jmp     loc_407454
.text:00407690 ; ---------------------------------------------------------------------------
.text:00407690
.text:00407690 loc_407690:                             ; CODE XREF: sub_407200+44B↑j
.text:00407690                 cmp     byte ptr [eax], 0Fh
.text:00407693                 jmp     short loc_407650
.text:00407695 ; ---------------------------------------------------------------------------
.text:00407695
.text:00407695 loc_407695:                             ; CODE XREF: sub_407200+40F↑j
.text:00407695                 cmp     eax, 16h
.text:00407698                 jnz     short loc_40765E
.text:0040769A                 mov     dl, 1
.text:0040769C                 jmp     short loc_407620
.text:0040769E ; ---------------------------------------------------------------------------
.text:0040769E
.text:0040769E loc_40769E:                             ; CODE XREF: sub_407200+334↑j
.text:0040769E                 mov     ecx, [esp+0BCh+var_7C]
.text:004076A2                 test    ecx, ecx
.text:004076A4                 jz      loc_4079F5
.text:004076AA
.text:004076AA loc_4076AA:                             ; CODE XREF: sub_407200+813↓j
.text:004076AA                 mov     esi, [esp+0BCh+var_88]
.text:004076AE                 mov     ebx, [esp+0BCh+arg_4]
.text:004076B5                 mov     [esp+0BCh+var_44], esi
.text:004076B9                 cmp     esi, ebx
.text:004076BB                 jb      short loc_4076D3
.text:004076BD                 mov     eax, [esp+0BCh+var_34]
.text:004076C4                 mov     ecx, [esp+0BCh+var_3C]
.text:004076CB                 cmp     esi, eax
.text:004076CD                 mov     [esp+0BCh+var_48], ecx
.text:004076D1                 jbe     short loc_4076DB
.text:004076D3
.text:004076D3 loc_4076D3:                             ; CODE XREF: sub_407200+4BB↑j
.text:004076D3                 mov     esi, [esp+0BCh+var_40]
.text:004076D7                 mov     [esp+0BCh+var_48], esi
.text:004076DB
.text:004076DB loc_4076DB:                             ; CODE XREF: sub_407200+4D1↑j
.text:004076DB                 mov     ebp, 1
.text:004076E0                 cmp     ebp, [esp+0BCh+var_5C]
.text:004076E4                 jnb     short loc_407709
.text:004076E6
.text:004076E6 loc_4076E6:                             ; CODE XREF: sub_407200+507↓j
.text:004076E6                 mov     eax, [esp+0BCh+var_80]
.text:004076EA                 mov     ecx, [esp+0BCh+var_68]
.text:004076EE                 mov     ebx, [esp+0BCh+var_84]
.text:004076F2                 mov     edi, [eax+ebp*4]
.text:004076F5                 mov     [ecx+ebp*4], edi
.text:004076F8                 mov     edx, [ebx+ebp*4]
.text:004076FB                 mov     edi, [esp+0BCh+var_6C]
.text:004076FF                 mov     [edi+ebp*4], edx
.text:00407702                 inc     ebp
.text:00407703                 cmp     ebp, [esp+0BCh+var_5C]
.text:00407707                 jb      short loc_4076E6
.text:00407709
.text:00407709 loc_407709:                             ; CODE XREF: sub_407200+281↑j
.text:00407709                                         ; sub_407200+4E4↑j ...
.text:00407709                 mov     ebp, [esp+0BCh+arg_18]
.text:00407710                 test    ebp, ebp
.text:00407712                 jz      loc_407922
.text:00407718                 mov     edx, [esp+0BCh+arg_0]
.text:0040771F                 movzx   eax, byte ptr [edx+1Ch]
.text:00407723                 test    al, 10h
.text:00407725                 jnz     loc_407922
.text:0040772B                 shr     al, 1
.text:0040772D                 and     eax, 3
.text:00407730                 jnz     loc_407988
.text:00407736                 mov     eax, [esp+0BCh+var_5C]
.text:0040773A                 inc     eax
.text:0040773B                 cmp     eax, 1Eh
.text:0040773E                 jnb     short loc_407745
.text:00407740                 mov     eax, 1Eh
.text:00407745
.text:00407745 loc_407745:                             ; CODE XREF: sub_407200+53E↑j
.text:00407745                 mov     ebp, [esp+0BCh+arg_18]
.text:0040774C                 mov     [ebp+0], eax
.text:0040774F                 shl     eax, 2
.text:00407752                 mov     [esp+0BCh+Size], eax ; Size
.text:00407755                 call    malloc
.text:0040775A                 mov     edi, [esp+0BCh+arg_18]
.text:00407761                 mov     ebx, [edi]
.text:00407763                 mov     [edi+4], eax
.text:00407766                 shl     ebx, 2
.text:00407769                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040776C                 call    malloc
.text:00407771                 mov     ecx, [esp+0BCh+arg_18]
.text:00407778                 mov     esi, [ecx+4]
.text:0040777B                 mov     [ecx+8], eax
.text:0040777E                 test    esi, esi
.text:00407780                 jz      loc_407981
.text:00407786                 test    eax, eax
.text:00407788                 jz      loc_407981
.text:0040778E                 mov     edx, [esp+0BCh+arg_0]
.text:00407795                 movzx   ecx, byte ptr [edx+1Ch]
.text:00407799                 and     cl, 0F9h
.text:0040779C                 or      cl, 2
.text:0040779F                 mov     [edx+1Ch], cl
.text:004077A2
.text:004077A2 loc_4077A2:                             ; CODE XREF: sub_407200+7ED↓j
.text:004077A2                 mov     ecx, [esp+0BCh+arg_18]
.text:004077A9                 mov     edx, [ecx]
.text:004077AB
.text:004077AB loc_4077AB:                             ; CODE XREF: sub_407200+794↓j
.text:004077AB                                         ; sub_407200+7A9↓j
.text:004077AB                 test    edx, edx
.text:004077AD                 jz      short loc_4077F8
.text:004077AF                 mov     esi, [esp+0BCh+arg_18]
.text:004077B6                 mov     edi, [esp+0BCh+var_3C]
.text:004077BD                 mov     edx, [esp+0BCh+arg_14]
.text:004077C4                 cmp     [esp+0BCh+var_48], edi
.text:004077C8                 mov     ebp, [esi+4]
.text:004077CB                 mov     [ebp+0], edx
.text:004077CE                 mov     edx, [esi+8]
.text:004077D1                 jz      loc_40796F
.text:004077D7                 mov     eax, [esp+0BCh+var_44]
.text:004077DB                 mov     esi, [esp+0BCh+arg_C]
.text:004077E2                 mov     ecx, [esp+0BCh+arg_8]
.text:004077E9                 sub     eax, esi
.text:004077EB                 add     eax, ecx
.text:004077ED
.text:004077ED loc_4077ED:                             ; CODE XREF: sub_407200+77C↓j
.text:004077ED                 mov     [edx], eax
.text:004077EF                 mov     edi, [esp+0BCh+arg_18]
.text:004077F6                 mov     edx, [edi]
.text:004077F8
.text:004077F8 loc_4077F8:                             ; CODE XREF: sub_407200+5AD↑j
.text:004077F8                 mov     ebp, 1
.text:004077FD
.text:004077FD loc_4077FD:                             ; CODE XREF: sub_407200+6A8↓j
.text:004077FD                 cmp     edx, [esp+0BCh+var_5C]
.text:00407801                 mov     eax, edx
.text:00407803                 jbe     short loc_407809
.text:00407805                 mov     eax, [esp+0BCh+var_5C]
.text:00407809
.text:00407809 loc_407809:                             ; CODE XREF: sub_407200+603↑j
.text:00407809                 cmp     ebp, eax
.text:0040780B                 jnb     loc_4078F3
.text:00407811                 mov     ebx, [esp+0BCh+var_68]
.text:00407815                 mov     eax, [ebx+ebp*4]
.text:00407818                 cmp     eax, offset unk_41B7B0
.text:0040781D                 jz      loc_4078D6
.text:00407823                 mov     esi, [esp+0BCh+var_6C]
.text:00407827                 mov     edx, [esi+ebp*4]
.text:0040782A                 cmp     edx, offset unk_41B7B0
.text:00407830                 jz      loc_4078D6
.text:00407836                 mov     edi, [esp+0BCh+arg_8]
.text:0040783D                 mov     ebx, [esp+0BCh+arg_18]
.text:00407844                 test    edi, edi
.text:00407846                 mov     ecx, [ebx+4]
.text:00407849                 jz      short loc_4078C2
.text:0040784B                 cmp     [esp+0BCh+arg_4], eax
.text:00407852                 ja      short loc_4078C2
.text:00407854                 cmp     eax, [esp+0BCh+var_34]
.text:0040785B                 ja      short loc_4078C2
.text:0040785D                 mov     esi, [esp+0BCh+arg_4]
.text:00407864                 sub     eax, esi
.text:00407866
.text:00407866 loc_407866:                             ; CODE XREF: sub_407200+6D4↓j
.text:00407866                 mov     [ecx+ebp*4], eax
.text:00407869                 mov     esi, [esp+0BCh+arg_18]
.text:00407870                 mov     eax, [esp+0BCh+arg_8]
.text:00407877                 mov     ecx, [esi+8]
.text:0040787A                 test    eax, eax
.text:0040787C                 jz      short loc_4078AD
.text:0040787E                 cmp     [esp+0BCh+arg_4], edx
.text:00407885                 ja      short loc_4078AD
.text:00407887                 cmp     edx, [esp+0BCh+var_34]
.text:0040788E                 ja      short loc_4078AD
.text:00407890                 mov     eax, edx
.text:00407892                 mov     edx, [esp+0BCh+arg_4]
.text:00407899                 sub     eax, edx
.text:0040789B
.text:0040789B loc_40789B:                             ; CODE XREF: sub_407200+6C0↓j
.text:0040789B                 mov     [ecx+ebp*4], eax
.text:0040789E
.text:0040789E loc_40789E:                             ; CODE XREF: sub_407200+6F1↓j
.text:0040789E                 mov     ecx, [esp+0BCh+arg_18]
.text:004078A5                 inc     ebp
.text:004078A6                 mov     edx, [ecx]
.text:004078A8                 jmp     loc_4077FD
.text:004078AD ; ---------------------------------------------------------------------------
.text:004078AD
.text:004078AD loc_4078AD:                             ; CODE XREF: sub_407200+67C↑j
.text:004078AD                                         ; sub_407200+685↑j ...
.text:004078AD                 mov     eax, [esp+0BCh+arg_C]
.text:004078B4                 mov     edi, [esp+0BCh+arg_8]
.text:004078BB                 sub     edx, eax
.text:004078BD                 lea     eax, [edi+edx]
.text:004078C0                 jmp     short loc_40789B
.text:004078C2 ; ---------------------------------------------------------------------------
.text:004078C2
.text:004078C2 loc_4078C2:                             ; CODE XREF: sub_407200+649↑j
.text:004078C2                                         ; sub_407200+652↑j ...
.text:004078C2                 mov     ebx, [esp+0BCh+arg_C]
.text:004078C9                 mov     edi, [esp+0BCh+arg_8]
.text:004078D0                 sub     eax, ebx
.text:004078D2                 add     eax, edi
.text:004078D4                 jmp     short loc_407866
.text:004078D6 ; ---------------------------------------------------------------------------
.text:004078D6
.text:004078D6 loc_4078D6:                             ; CODE XREF: sub_407200+61D↑j
.text:004078D6                                         ; sub_407200+630↑j
.text:004078D6                 mov     eax, [esp+0BCh+arg_18]
.text:004078DD                 mov     ecx, [eax+4]
.text:004078E0                 mov     edx, [eax+8]
.text:004078E3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:004078EA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:004078F1                 jmp     short loc_40789E
.text:004078F3 ; ---------------------------------------------------------------------------
.text:004078F3
.text:004078F3 loc_4078F3:                             ; CODE XREF: sub_407200+60B↑j
.text:004078F3                 mov     ebp, [esp+0BCh+var_5C]
.text:004078F7                 cmp     ebp, edx
.text:004078F9                 jnb     short loc_407922
.text:004078FB                 mov     esi, [esp+0BCh+arg_18]
.text:00407902                 mov     edx, [esi+4]
.text:00407905                 mov     eax, [esi+8]
.text:00407908
.text:00407908 loc_407908:                             ; CODE XREF: sub_407200+720↓j
.text:00407908                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:0040790F                 mov     edi, [esp+0BCh+arg_18]
.text:00407916                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040791D                 inc     ebp
.text:0040791E                 cmp     ebp, [edi]
.text:00407920                 jb      short loc_407908
.text:00407922
.text:00407922 loc_407922:                             ; CODE XREF: sub_407200+512↑j
.text:00407922                                         ; sub_407200+525↑j ...
.text:00407922                 mov     eax, [esp+0BCh+var_44]
.text:00407926                 mov     ecx, [esp+0BCh+arg_14]
.text:0040792D                 mov     ebp, [esp+0BCh+var_3C]
.text:00407934                 sub     eax, ecx
.text:00407936                 cmp     [esp+0BCh+var_48], ebp
.text:0040793A                 jz      short loc_407962
.text:0040793C                 mov     ebx, [esp+0BCh+arg_8]
.text:00407943                 mov     ebp, eax
.text:00407945                 sub     [esp+0BCh+arg_C], ebx
.text:0040794C                 mov     edx, [esp+0BCh+arg_C]
.text:00407953                 sub     ebp, edx
.text:00407955
.text:00407955 loc_407955:                             ; CODE XREF: sub_407200+76D↓j
.text:00407955                 mov     eax, ebp
.text:00407957
.text:00407957 loc_407957:                             ; CODE XREF: sub_407200+89↑j
.text:00407957                                         ; sub_407200+786↓j ...
.text:00407957                 add     esp, 0ACh
.text:0040795D                 pop     ebx
.text:0040795E                 pop     esi
.text:0040795F                 pop     edi
.text:00407960                 pop     ebp
.text:00407961                 retn
.text:00407962 ; ---------------------------------------------------------------------------
.text:00407962
.text:00407962 loc_407962:                             ; CODE XREF: sub_407200+73A↑j
.text:00407962                 mov     esi, [esp+0BCh+arg_4]
.text:00407969                 mov     ebp, eax
.text:0040796B                 sub     ebp, esi
.text:0040796D                 jmp     short loc_407955
.text:0040796F ; ---------------------------------------------------------------------------
.text:0040796F
.text:0040796F loc_40796F:                             ; CODE XREF: sub_407200+5D1↑j
.text:0040796F                 mov     eax, [esp+0BCh+var_44]
.text:00407973                 mov     ebx, [esp+0BCh+arg_4]
.text:0040797A                 sub     eax, ebx
.text:0040797C                 jmp     loc_4077ED
.text:00407981 ; ---------------------------------------------------------------------------
.text:00407981
.text:00407981 loc_407981:                             ; CODE XREF: sub_407200+580↑j
.text:00407981                                         ; sub_407200+588↑j ...
.text:00407981                 mov     eax, 0FFFFFFFEh
.text:00407986                 jmp     short loc_407957
.text:00407988 ; ---------------------------------------------------------------------------
.text:00407988
.text:00407988 loc_407988:                             ; CODE XREF: sub_407200+530↑j
.text:00407988                 dec     eax
.text:00407989                 jz      short loc_407999
.text:0040798B                 mov     eax, [esp+0BCh+arg_18]
.text:00407992                 mov     edx, [eax]
.text:00407994                 jmp     loc_4077AB
.text:00407999 ; ---------------------------------------------------------------------------
.text:00407999
.text:00407999 loc_407999:                             ; CODE XREF: sub_407200+789↑j
.text:00407999                 mov     ecx, [esp+0BCh+arg_18]
.text:004079A0                 mov     eax, [esp+0BCh+var_5C]
.text:004079A4                 mov     edx, [ecx]
.text:004079A6                 inc     eax
.text:004079A7                 cmp     edx, eax
.text:004079A9                 jnb     loc_4077AB
.text:004079AF                 mov     [ecx], eax
.text:004079B1                 shl     eax, 2
.text:004079B4                 mov     [esp+0BCh+var_B8], eax ; Size
.text:004079B8                 mov     edx, [ecx+4]
.text:004079BB                 mov     [esp+0BCh+Size], edx ; Block
.text:004079BE                 call    realloc
.text:004079C3                 mov     edi, [esp+0BCh+arg_18]
.text:004079CA                 mov     ebp, [edi]
.text:004079CC                 mov     [edi+4], eax
.text:004079CF                 shl     ebp, 2
.text:004079D2                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:004079D6                 mov     ebx, [edi+8]
.text:004079D9                 mov     [esp+0BCh+Size], ebx ; Block
.text:004079DC                 call    realloc
.text:004079E1                 mov     [edi+8], eax
.text:004079E4                 mov     esi, [edi+4]
.text:004079E7                 test    esi, esi
.text:004079E9                 jz      short loc_407981
.text:004079EB                 test    eax, eax
.text:004079ED                 jnz     loc_4077A2
.text:004079F3                 jmp     short loc_407981
.text:004079F5 ; ---------------------------------------------------------------------------
.text:004079F5
.text:004079F5 loc_4079F5:                             ; CODE XREF: sub_407200+107↑j
.text:004079F5                                         ; sub_407200+124↑j ...
.text:004079F5                 mov     eax, 0FFFFFFFFh
.text:004079FA                 jmp     loc_407957
.text:004079FF ; ---------------------------------------------------------------------------
.text:004079FF
.text:004079FF loc_4079FF:                             ; CODE XREF: sub_407200+2D8↑j
.text:004079FF                 mov     ebp, [esp+0BCh+var_7C]
.text:00407A03                 test    ebp, ebp
.text:00407A05                 jz      loc_407709
.text:00407A0B                 test    al, al
.text:00407A0D                 jnz     loc_407709
.text:00407A13                 jmp     loc_4076AA
.text:00407A18 ; ---------------------------------------------------------------------------
.text:00407A18
.text:00407A18 loc_407A18:                             ; CODE XREF: sub_407200+2BE↑j
.text:00407A18                 mov     ebx, [esp+0BCh+var_3C]
.text:00407A1F                 cmp     [esp+0BCh+var_48], ebx
.text:00407A23                 setnz   al
.text:00407A26                 jmp     loc_4074CF
.text:00407A2B ; ---------------------------------------------------------------------------
.text:00407A2B
.text:00407A2B loc_407A2B:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:00407A2B                                         ; sub_407200+898↓j ...
.text:00407A2B                 mov     edx, [esp+0BCh+var_50] ; jumptable 00407477 case 0
.text:00407A2B                                         ; jumptable 00407DF6 case 0
.text:00407A2B                                         ; jumptable 00407EC8 case 0
.text:00407A2F                 mov     eax, offset loc_407479
.text:00407A34                 cmp     [esp+0BCh+var_4C], edx
.text:00407A38                 jnz     loc_407463
.text:00407A3E                 jmp     loc_407477
.text:00407A43 ; ---------------------------------------------------------------------------
.text:00407A43
.text:00407A43 loc_407A43:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:00407A43                                         ; sub_407200+BF6↓j ...
.text:00407A43                 jmp     loc_407709      ; jumptable 00407477 case 1
.text:00407A43                                         ; jumptable 00407DF6 case 1
.text:00407A43                                         ; jumptable 00407EC8 case 1
.text:00407A48 ; ---------------------------------------------------------------------------
.text:00407A48
.text:00407A48 loc_407A48:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:00407A48                                         ; sub_407200+BF6↓j ...
.text:00407A48                 mov     eax, [esp+0BCh+var_4C] ; jumptable 00407477 case 2
.text:00407A48                                         ; jumptable 00407DF6 case 2
.text:00407A48                                         ; jumptable 00407EC8 case 2
.text:00407A4C                 mov     edi, [esp+0BCh+var_58]
.text:00407A50                 movzx   ebp, byte ptr [eax]
.text:00407A53                 inc     eax
.text:00407A54                 test    edi, edi
.text:00407A56                 mov     [esp+0BCh+var_4C], eax
.text:00407A5A                 jz      loc_407AE9
.text:00407A60
.text:00407A60 loc_407A60:                             ; CODE XREF: sub_407200+890↓j
.text:00407A60                 mov     ecx, [esp+0BCh+var_48]
.text:00407A64                 cmp     [esp+0BCh+var_44], ecx
.text:00407A68                 jz      short loc_407AC6
.text:00407A6A
.text:00407A6A loc_407A6A:                             ; CODE XREF: sub_407200+8E7↓j
.text:00407A6A                 mov     ecx, [esp+0BCh+var_44]
.text:00407A6E                 mov     ebx, [esp+0BCh+var_4C]
.text:00407A72                 mov     edx, [esp+0BCh+var_58]
.text:00407A76                 movzx   edi, byte ptr [ecx]
.text:00407A79                 inc     ecx
.text:00407A7A                 movzx   eax, byte ptr [ebx]
.text:00407A7D                 inc     ebx
.text:00407A7E                 mov     [esp+0BCh+var_4C], ebx
.text:00407A82                 mov     [esp+0BCh+var_44], ecx
.text:00407A86                 cmp     [edi+edx], al
.text:00407A89                 jnz     loc_407652
.text:00407A8F                 dec     ebp
.text:00407A90                 jnz     short loc_407A60
.text:00407A92
.text:00407A92 loc_407A92:                             ; CODE XREF: sub_407200+916↓j
.text:00407A92                 mov     ebp, [esp+0BCh+var_8C]
.text:00407A96                 test    ebp, ebp
.text:00407A98                 jnz     short loc_407A2B ; jumptable 00407477 case 0
.text:00407A98                                         ; jumptable 00407DF6 case 0
.text:00407A98                                         ; jumptable 00407EC8 case 0
.text:00407A9A                 mov     [esp+0BCh+var_8C], 1
.text:00407AA2                 mov     eax, [esp+0BCh+var_60]
.text:00407AA6                 mov     edx, [esp+0BCh+var_64]
.text:00407AAA                 cmp     eax, edx
.text:00407AAC                 ja      loc_407A2B      ; jumptable 00407477 case 0
.text:00407AAC                                         ; jumptable 00407DF6 case 0
.text:00407AAC                                         ; jumptable 00407EC8 case 0
.text:00407AB2
.text:00407AB2 loc_407AB2:                             ; CODE XREF: sub_407200+8BF↓j
.text:00407AB2                 mov     esi, [esp+0BCh+var_78]
.text:00407AB6                 or      byte ptr [esi+eax*4], 18h
.text:00407ABA                 inc     eax
.text:00407ABB                 cmp     eax, [esp+0BCh+var_64]
.text:00407ABF                 jbe     short loc_407AB2
.text:00407AC1                 jmp     loc_407A2B      ; jumptable 00407477 case 0
.text:00407AC1                                         ; jumptable 00407DF6 case 0
.text:00407AC1                                         ; jumptable 00407EC8 case 0
.text:00407AC6 ; ---------------------------------------------------------------------------
.text:00407AC6
.text:00407AC6 loc_407AC6:                             ; CODE XREF: sub_407200+868↑j
.text:00407AC6                                         ; sub_407200+8E5↓j
.text:00407AC6                 mov     edx, [esp+0BCh+var_40]
.text:00407ACA                 cmp     [esp+0BCh+var_48], edx
.text:00407ACE                 jz      loc_407652
.text:00407AD4                 mov     [esp+0BCh+var_48], edx
.text:00407AD8                 mov     ebx, [esp+0BCh+arg_C]
.text:00407ADF                 cmp     ebx, edx
.text:00407AE1                 mov     [esp+0BCh+var_44], ebx
.text:00407AE5                 jz      short loc_407AC6
.text:00407AE7                 jmp     short loc_407A6A
.text:00407AE9 ; ---------------------------------------------------------------------------
.text:00407AE9
.text:00407AE9 loc_407AE9:                             ; CODE XREF: sub_407200+85A↑j
.text:00407AE9                                         ; sub_407200+914↓j
.text:00407AE9                 mov     esi, [esp+0BCh+var_48]
.text:00407AED                 cmp     [esp+0BCh+var_44], esi
.text:00407AF1                 jz      short loc_407B20
.text:00407AF3
.text:00407AF3 loc_407AF3:                             ; CODE XREF: sub_407200+941↓j
.text:00407AF3                 mov     ebx, [esp+0BCh+var_4C]
.text:00407AF7                 mov     eax, [esp+0BCh+var_44]
.text:00407AFB                 movzx   edx, byte ptr [ebx]
.text:00407AFE                 inc     ebx
.text:00407AFF                 mov     [esp+0BCh+var_4C], ebx
.text:00407B03                 movzx   ecx, byte ptr [eax]
.text:00407B06                 inc     eax
.text:00407B07                 mov     [esp+0BCh+var_44], eax
.text:00407B0B                 cmp     cl, dl
.text:00407B0D                 jnz     loc_407652
.text:00407B13                 dec     ebp
.text:00407B14                 jnz     short loc_407AE9
.text:00407B16                 jmp     loc_407A92
.text:00407B16 ; ---------------------------------------------------------------------------
.text:00407B1B                 align 10h
.text:00407B20
.text:00407B20 loc_407B20:                             ; CODE XREF: sub_407200+8F1↑j
.text:00407B20                                         ; sub_407200+93F↓j
.text:00407B20                 mov     esi, [esp+0BCh+var_40]
.text:00407B24                 cmp     [esp+0BCh+var_48], esi
.text:00407B28                 jz      loc_407652
.text:00407B2E                 mov     [esp+0BCh+var_48], esi
.text:00407B32                 mov     edi, [esp+0BCh+arg_C]
.text:00407B39                 cmp     edi, esi
.text:00407B3B                 mov     [esp+0BCh+var_44], edi
.text:00407B3F                 jz      short loc_407B20
.text:00407B41                 jmp     short loc_407AF3
.text:00407B43 ; ---------------------------------------------------------------------------
.text:00407B43
.text:00407B43 loc_407B43:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:00407B43                                         ; sub_407200+BF6↓j ...
.text:00407B43                 mov     edi, [esp+0BCh+var_48] ; jumptable 00407477 case 3
.text:00407B43                                         ; jumptable 00407DF6 case 3
.text:00407B43                                         ; jumptable 00407EC8 case 3
.text:00407B47                 cmp     [esp+0BCh+var_44], edi
.text:00407B4B                 jz      loc_409422
.text:00407B51
.text:00407B51 loc_407B51:                             ; CODE XREF: sub_407200+2243↓j
.text:00407B51                 mov     eax, [esp+0BCh+arg_0]
.text:00407B58                 test    byte ptr [eax+0Ch], 40h
.text:00407B5C                 jnz     short loc_407B80
.text:00407B5E                 mov     ebx, [esp+0BCh+var_58]
.text:00407B62                 test    ebx, ebx
.text:00407B64                 jz      loc_409416
.text:00407B6A                 mov     esi, [esp+0BCh+var_44]
.text:00407B6E                 mov     edx, [esp+0BCh+var_58]
.text:00407B72                 movzx   ebp, byte ptr [esi]
.text:00407B75                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:00407B7A
.text:00407B7A loc_407B7A:                             ; CODE XREF: sub_407200+221D↓j
.text:00407B7A                 jz      loc_407652
.text:00407B80
.text:00407B80 loc_407B80:                             ; CODE XREF: sub_407200+95C↑j
.text:00407B80                 mov     ecx, [esp+0BCh+arg_0]
.text:00407B87                 cmp     byte ptr [ecx+0Ch], 0
.text:00407B8B                 jns     short loc_407BAF
.text:00407B8D                 mov     ebx, [esp+0BCh+var_58]
.text:00407B91                 test    ebx, ebx
.text:00407B93                 jz      loc_40940A
.text:00407B99                 mov     edx, [esp+0BCh+var_44]
.text:00407B9D                 mov     eax, [esp+0BCh+var_58]
.text:00407BA1                 movzx   ebp, byte ptr [edx]
.text:00407BA4                 cmp     byte ptr [ebp+eax+0], 0
.text:00407BA9
.text:00407BA9 loc_407BA9:                             ; CODE XREF: sub_407200+2211↓j
.text:00407BA9                 jz      loc_407652
.text:00407BAF
.text:00407BAF loc_407BAF:                             ; CODE XREF: sub_407200+98B↑j
.text:00407BAF                 mov     esi, [esp+0BCh+var_8C]
.text:00407BB3                 test    esi, esi
.text:00407BB5                 jnz     short loc_407BDA
.text:00407BB7                 mov     [esp+0BCh+var_8C], 1
.text:00407BBF                 mov     eax, [esp+0BCh+var_60]
.text:00407BC3                 mov     ecx, [esp+0BCh+var_64]
.text:00407BC7                 cmp     eax, ecx
.text:00407BC9                 ja      short loc_407BDA
.text:00407BCB
.text:00407BCB loc_407BCB:                             ; CODE XREF: sub_407200+9D8↓j
.text:00407BCB                 mov     ebx, [esp+0BCh+var_78]
.text:00407BCF                 or      byte ptr [ebx+eax*4], 18h
.text:00407BD3                 inc     eax
.text:00407BD4                 cmp     eax, [esp+0BCh+var_64]
.text:00407BD8                 jbe     short loc_407BCB
.text:00407BDA
.text:00407BDA loc_407BDA:                             ; CODE XREF: sub_407200+9B5↑j
.text:00407BDA                                         ; sub_407200+9C9↑j
.text:00407BDA                 inc     [esp+0BCh+var_44]
.text:00407BDE
.text:00407BDE loc_407BDE:                             ; CODE XREF: sub_407200:loc_407CA4↓j
.text:00407BDE                                         ; sub_407200+B8C↓j ...
.text:00407BDE                 mov     edx, [esp+0BCh+var_50]
.text:00407BE2                 mov     eax, offset loc_407479
.text:00407BE7                 cmp     [esp+0BCh+var_4C], edx
.text:00407BEB                 jz      loc_407477
.text:00407BF1                 mov     esi, [esp+0BCh+var_4C]
.text:00407BF5
.text:00407BF5 loc_407BF5:                             ; CODE XREF: sub_407200+F64↓j
.text:00407BF5                 movzx   edi, byte ptr [esi]
.text:00407BF8                 inc     esi
.text:00407BF9                 mov     [esp+0BCh+var_4C], esi
.text:00407BFD                 mov     eax, ds:(jpt_407C04-18h)[edi*4] ; switch 2 cases
.text:00407C04                 jmp     eax             ; switch jump
.text:00407C06 ; ---------------------------------------------------------------------------
.text:00407C06
.text:00407C06 loc_407C06:                             ; DATA XREF: .text:004071F4↑o
.text:00407C06                 mov     edx, [esp+0BCh+arg_8]
.text:00407C0D                 test    edx, edx
.text:00407C0F                 jz      loc_407CE2
.text:00407C15                 mov     edi, [esp+0BCh+arg_4]
.text:00407C1C                 cmp     [esp+0BCh+var_44], edi
.text:00407C20
.text:00407C20 loc_407C20:                             ; CODE XREF: sub_407200+AED↓j
.text:00407C20                 jz      loc_407652
.text:00407C26                 mov     ecx, [esp+0BCh+arg_10]
.text:00407C2D                 test    ecx, ecx
.text:00407C2F                 jz      loc_407652
.text:00407C35                 mov     ebp, [esp+0BCh+var_38]
.text:00407C3C                 cmp     [esp+0BCh+var_44], ebp
.text:00407C40                 jz      loc_407652
.text:00407C46                 mov     edx, [esp+0BCh+var_44]
.text:00407C4A                 dec     edx
.text:00407C4B                 cmp     edx, [esp+0BCh+var_34]
.text:00407C52                 jz      loc_407CD6
.text:00407C58                 mov     ebx, [esp+0BCh+arg_C]
.text:00407C5F                 dec     ebx
.text:00407C60                 cmp     edx, ebx
.text:00407C62                 jz      short loc_407CC9
.text:00407C64                 mov     edi, [esp+0BCh+var_44]
.text:00407C68                 movzx   eax, byte ptr [edi-1]
.text:00407C6C
.text:00407C6C loc_407C6C:                             ; CODE XREF: sub_407200+AD4↓j
.text:00407C6C                                         ; sub_407200+AE0↓j
.text:00407C6C                 cmp     ds:byte_41B6B0[eax], 1
.text:00407C73                 mov     eax, [esp+0BCh+var_34]
.text:00407C7A                 setz    dl
.text:00407C7D                 cmp     [esp+0BCh+var_44], eax
.text:00407C81                 jz      short loc_407CBD
.text:00407C83                 mov     ebp, [esp+0BCh+arg_C]
.text:00407C8A                 dec     ebp
.text:00407C8B                 cmp     [esp+0BCh+var_44], ebp
.text:00407C8F                 jz      short loc_407CB0
.text:00407C91                 mov     esi, [esp+0BCh+var_44]
.text:00407C95                 movzx   eax, byte ptr [esi]
.text:00407C98
.text:00407C98 loc_407C98:                             ; CODE XREF: sub_407200+ABB↓j
.text:00407C98                                         ; sub_407200+AC7↓j
.text:00407C98                 cmp     ds:byte_41B6B0[eax], 1
.text:00407C9F                 setz    cl
.text:00407CA2                 cmp     dl, cl
.text:00407CA4
.text:00407CA4 loc_407CA4:                             ; CODE XREF: sub_407200+1A07↓j
.text:00407CA4                 jz      loc_407BDE
.text:00407CAA                 jmp     loc_407652
.text:00407CAA ; ---------------------------------------------------------------------------
.text:00407CAF                 align 10h
.text:00407CB0
.text:00407CB0 loc_407CB0:                             ; CODE XREF: sub_407200+A8F↑j
.text:00407CB0                 mov     ebx, [esp+0BCh+var_34]
.text:00407CB7                 movzx   eax, byte ptr [ebx-1]
.text:00407CBB                 jmp     short loc_407C98
.text:00407CBD ; ---------------------------------------------------------------------------
.text:00407CBD
.text:00407CBD loc_407CBD:                             ; CODE XREF: sub_407200+A81↑j
.text:00407CBD                 mov     ecx, [esp+0BCh+arg_C]
.text:00407CC4                 movzx   eax, byte ptr [ecx]
.text:00407CC7                 jmp     short loc_407C98
.text:00407CC9 ; ---------------------------------------------------------------------------
.text:00407CC9
.text:00407CC9 loc_407CC9:                             ; CODE XREF: sub_407200+A62↑j
.text:00407CC9                 mov     edx, [esp+0BCh+var_34]
.text:00407CD0                 movzx   eax, byte ptr [edx-1]
.text:00407CD4                 jmp     short loc_407C6C
.text:00407CD6 ; ---------------------------------------------------------------------------
.text:00407CD6
.text:00407CD6 loc_407CD6:                             ; CODE XREF: sub_407200+A52↑j
.text:00407CD6                 mov     esi, [esp+0BCh+arg_C]
.text:00407CDD                 movzx   eax, byte ptr [esi]
.text:00407CE0                 jmp     short loc_407C6C
.text:00407CE2 ; ---------------------------------------------------------------------------
.text:00407CE2
.text:00407CE2 loc_407CE2:                             ; CODE XREF: sub_407200+A0F↑j
.text:00407CE2                 mov     eax, [esp+0BCh+arg_C]
.text:00407CE9                 cmp     [esp+0BCh+var_44], eax
.text:00407CED                 jmp     loc_407C20
.text:00407CF2 ; ---------------------------------------------------------------------------
.text:00407CF2
.text:00407CF2 loc_407CF2:                             ; DATA XREF: .text:004071F0↑o
.text:00407CF2                 mov     esi, [esp+0BCh+arg_8]
.text:00407CF9                 test    esi, esi
.text:00407CFB                 jz      loc_4093FA
.text:00407D01                 mov     ebp, [esp+0BCh+arg_4]
.text:00407D08                 cmp     [esp+0BCh+var_44], ebp
.text:00407D0C
.text:00407D0C loc_407D0C:                             ; CODE XREF: sub_407200+2205↓j
.text:00407D0C                 jz      loc_407DD0
.text:00407D12                 mov     edi, [esp+0BCh+arg_10]
.text:00407D19                 test    edi, edi
.text:00407D1B                 jz      loc_407DD0
.text:00407D21                 mov     edx, [esp+0BCh+var_38]
.text:00407D28                 cmp     [esp+0BCh+var_44], edx
.text:00407D2C                 jz      loc_407DD0
.text:00407D32                 mov     edx, [esp+0BCh+var_44]
.text:00407D36                 dec     edx
.text:00407D37                 cmp     edx, [esp+0BCh+var_34]
.text:00407D3E                 jz      short loc_407DBD
.text:00407D40                 mov     esi, [esp+0BCh+arg_C]
.text:00407D47                 dec     esi
.text:00407D48                 cmp     edx, esi
.text:00407D4A                 jz      short loc_407DB0
.text:00407D4C                 mov     ebx, [esp+0BCh+var_44]
.text:00407D50                 movzx   eax, byte ptr [ebx-1]
.text:00407D54
.text:00407D54 loc_407D54:                             ; CODE XREF: sub_407200+BBB↓j
.text:00407D54                                         ; sub_407200+BC7↓j
.text:00407D54                 cmp     ds:byte_41B6B0[eax], 1
.text:00407D5B                 mov     eax, [esp+0BCh+var_34]
.text:00407D62                 setz    dl
.text:00407D65                 cmp     [esp+0BCh+var_44], eax
.text:00407D69                 jz      short loc_407DA4
.text:00407D6B                 mov     ecx, [esp+0BCh+arg_C]
.text:00407D72                 dec     ecx
.text:00407D73                 cmp     [esp+0BCh+var_44], ecx
.text:00407D77                 jz      short loc_407D97
.text:00407D79                 mov     esi, [esp+0BCh+var_44]
.text:00407D7D                 movzx   eax, byte ptr [esi]
.text:00407D80
.text:00407D80 loc_407D80:                             ; CODE XREF: sub_407200+BA2↓j
.text:00407D80                                         ; sub_407200+BAE↓j
.text:00407D80                 cmp     ds:byte_41B6B0[eax], 1
.text:00407D87                 setz    bl
.text:00407D8A                 cmp     dl, bl
.text:00407D8C                 jnz     loc_407BDE
.text:00407D92                 jmp     loc_407652
.text:00407D97 ; ---------------------------------------------------------------------------
.text:00407D97
.text:00407D97 loc_407D97:                             ; CODE XREF: sub_407200+B77↑j
.text:00407D97                 mov     ebp, [esp+0BCh+var_34]
.text:00407D9E                 movzx   eax, byte ptr [ebp-1]
.text:00407DA2                 jmp     short loc_407D80
.text:00407DA4 ; ---------------------------------------------------------------------------
.text:00407DA4
.text:00407DA4 loc_407DA4:                             ; CODE XREF: sub_407200+B69↑j
.text:00407DA4                 mov     edi, [esp+0BCh+arg_C]
.text:00407DAB                 movzx   eax, byte ptr [edi]
.text:00407DAE                 jmp     short loc_407D80
.text:00407DB0 ; ---------------------------------------------------------------------------
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: sub_407200+B4A↑j
.text:00407DB0                 mov     ebp, [esp+0BCh+var_34]
.text:00407DB7                 movzx   eax, byte ptr [ebp-1]
.text:00407DBB                 jmp     short loc_407D54
.text:00407DBD ; ---------------------------------------------------------------------------
.text:00407DBD
.text:00407DBD loc_407DBD:                             ; CODE XREF: sub_407200+B3E↑j
.text:00407DBD                 mov     ecx, [esp+0BCh+arg_C]
.text:00407DC4                 movzx   eax, byte ptr [ecx]
.text:00407DC7                 jmp     short loc_407D54
.text:00407DC7 ; ---------------------------------------------------------------------------
.text:00407DC9                 align 10h
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: sub_407200:loc_407D0C↑j
.text:00407DD0                                         ; sub_407200+B1B↑j ...
.text:00407DD0                 mov     ebp, [esp+0BCh+var_50]
.text:00407DD4                 mov     eax, offset loc_407479
.text:00407DD9                 cmp     [esp+0BCh+var_4C], ebp
.text:00407DDD                 jz      loc_407477
.text:00407DE3                 mov     ebx, [esp+0BCh+var_4C]
.text:00407DE7                 movzx   esi, byte ptr [ebx]
.text:00407DEA                 inc     ebx
.text:00407DEB                 mov     [esp+0BCh+var_4C], ebx
.text:00407DEF                 mov     eax, ds:jpt_407477[esi*4] ; switch 6 cases
.text:00407DF6                 jmp     eax             ; switch jump
.text:00407DF8 ; ---------------------------------------------------------------------------
.text:00407DF8
.text:00407DF8 loc_407DF8:                             ; DATA XREF: .text:004071EC↑o
.text:00407DF8                 mov     ecx, [esp+0BCh+arg_8]
.text:00407DFF                 test    ecx, ecx
.text:00407E01                 jz      loc_4093EA
.text:00407E07                 mov     eax, [esp+0BCh+arg_4]
.text:00407E0E                 cmp     [esp+0BCh+var_44], eax
.text:00407E12
.text:00407E12 loc_407E12:                             ; CODE XREF: sub_407200+21F5↓j
.text:00407E12                 jz      loc_407652
.text:00407E18                 mov     edi, [esp+0BCh+arg_10]
.text:00407E1F                 test    edi, edi
.text:00407E21                 jz      loc_407652
.text:00407E27                 mov     edx, [esp+0BCh+var_44]
.text:00407E2B                 dec     edx
.text:00407E2C                 cmp     edx, [esp+0BCh+var_34]
.text:00407E33                 jz      loc_4093DA
.text:00407E39                 mov     ebx, [esp+0BCh+arg_C]
.text:00407E40                 dec     ebx
.text:00407E41                 cmp     edx, ebx
.text:00407E43                 jz      loc_4093CA
.text:00407E49                 mov     ecx, [esp+0BCh+var_44]
.text:00407E4D                 movzx   eax, byte ptr [ecx-1]
.text:00407E51
.text:00407E51 loc_407E51:                             ; CODE XREF: sub_407200+21D5↓j
.text:00407E51                                         ; sub_407200+21E5↓j
.text:00407E51                 cmp     ds:byte_41B6B0[eax], 1
.text:00407E58                 jnz     loc_407652
.text:00407E5E                 mov     eax, [esp+0BCh+var_38]
.text:00407E65                 cmp     [esp+0BCh+var_44], eax
.text:00407E69                 jz      short loc_407EA2
.text:00407E6B                 mov     edx, [esp+0BCh+var_34]
.text:00407E72                 cmp     [esp+0BCh+var_44], edx
.text:00407E76                 jz      loc_4093BB
.text:00407E7C                 mov     ebp, [esp+0BCh+arg_C]
.text:00407E83                 dec     ebp
.text:00407E84                 cmp     [esp+0BCh+var_44], ebp
.text:00407E88                 jz      loc_4093AB
.text:00407E8E                 mov     esi, [esp+0BCh+var_44]
.text:00407E92                 movzx   eax, byte ptr [esi]
.text:00407E95
.text:00407E95 loc_407E95:                             ; CODE XREF: sub_407200+21B6↓j
.text:00407E95                                         ; sub_407200+21C5↓j
.text:00407E95                 cmp     ds:byte_41B6B0[eax], 1
.text:00407E9C                 jz      loc_407652
.text:00407EA2
.text:00407EA2 loc_407EA2:                             ; CODE XREF: sub_407200+C69↑j
.text:00407EA2                                         ; sub_407200+E23↓j ...
.text:00407EA2                 mov     ecx, [esp+0BCh+var_50]
.text:00407EA6                 mov     eax, offset loc_407479
.text:00407EAB                 cmp     [esp+0BCh+var_4C], ecx
.text:00407EAF                 jz      loc_407477
.text:00407EB5                 mov     edi, [esp+0BCh+var_4C]
.text:00407EB9                 movzx   edx, byte ptr [edi]
.text:00407EBC                 inc     edi
.text:00407EBD                 mov     [esp+0BCh+var_4C], edi
.text:00407EC1                 mov     eax, ds:jpt_407477[edx*4] ; switch 6 cases
.text:00407EC8                 jmp     eax             ; switch jump
.text:00407ECA ; ---------------------------------------------------------------------------
.text:00407ECA
.text:00407ECA loc_407ECA:                             ; DATA XREF: .text:004071E8↑o
.text:00407ECA                 mov     ebp, [esp+0BCh+var_38]
.text:00407ED1                 cmp     [esp+0BCh+var_44], ebp
.text:00407ED5                 jz      loc_407652
.text:00407EDB                 mov     eax, [esp+0BCh+var_34]
.text:00407EE2                 cmp     [esp+0BCh+var_44], eax
.text:00407EE6                 jz      loc_407FA7
.text:00407EEC                 mov     esi, [esp+0BCh+arg_C]
.text:00407EF3                 dec     esi
.text:00407EF4                 cmp     [esp+0BCh+var_44], esi
.text:00407EF8                 jz      loc_407F97
.text:00407EFE                 mov     edx, [esp+0BCh+var_44]
.text:00407F02                 movzx   eax, byte ptr [edx]
.text:00407F05
.text:00407F05 loc_407F05:                             ; CODE XREF: sub_407200+DA2↓j
.text:00407F05                                         ; sub_407200+DB1↓j
.text:00407F05                 cmp     ds:byte_41B6B0[eax], 1
.text:00407F0C                 jnz     loc_407652
.text:00407F12                 mov     edi, [esp+0BCh+arg_8]
.text:00407F19                 test    edi, edi
.text:00407F1B                 jz      short loc_407F8A
.text:00407F1D                 mov     ebp, [esp+0BCh+arg_4]
.text:00407F24                 cmp     [esp+0BCh+var_44], ebp
.text:00407F28
.text:00407F28 loc_407F28:                             ; CODE XREF: sub_407200+D95↓j
.text:00407F28                 jz      loc_407DD0
.text:00407F2E                 mov     ebx, [esp+0BCh+arg_10]
.text:00407F35                 test    ebx, ebx
.text:00407F37                 jz      loc_407DD0
.text:00407F3D                 mov     edx, [esp+0BCh+var_44]
.text:00407F41                 dec     edx
.text:00407F42                 cmp     edx, [esp+0BCh+var_34]
.text:00407F49                 jz      short loc_407F7E
.text:00407F4B                 mov     ecx, [esp+0BCh+arg_C]
.text:00407F52                 dec     ecx
.text:00407F53                 cmp     edx, ecx
.text:00407F55                 jz      short loc_407F71
.text:00407F57                 mov     edi, [esp+0BCh+var_44]
.text:00407F5B                 movzx   eax, byte ptr [edi-1]
.text:00407F5F
.text:00407F5F loc_407F5F:                             ; CODE XREF: sub_407200+D7C↓j
.text:00407F5F                                         ; sub_407200+D88↓j
.text:00407F5F                 cmp     ds:byte_41B6B0[eax], 1
.text:00407F66                 jnz     loc_407DD0
.text:00407F6C                 jmp     loc_407652
.text:00407F71 ; ---------------------------------------------------------------------------
.text:00407F71
.text:00407F71 loc_407F71:                             ; CODE XREF: sub_407200+D55↑j
.text:00407F71                 mov     edx, [esp+0BCh+var_34]
.text:00407F78                 movzx   eax, byte ptr [edx-1]
.text:00407F7C                 jmp     short loc_407F5F
.text:00407F7E ; ---------------------------------------------------------------------------
.text:00407F7E
.text:00407F7E loc_407F7E:                             ; CODE XREF: sub_407200+D49↑j
.text:00407F7E                 mov     esi, [esp+0BCh+arg_C]
.text:00407F85                 movzx   eax, byte ptr [esi]
.text:00407F88                 jmp     short loc_407F5F
.text:00407F8A ; ---------------------------------------------------------------------------
.text:00407F8A
.text:00407F8A loc_407F8A:                             ; CODE XREF: sub_407200+D1B↑j
.text:00407F8A                 mov     eax, [esp+0BCh+arg_C]
.text:00407F91                 cmp     [esp+0BCh+var_44], eax
.text:00407F95                 jmp     short loc_407F28
.text:00407F97 ; ---------------------------------------------------------------------------
.text:00407F97
.text:00407F97 loc_407F97:                             ; CODE XREF: sub_407200+CF8↑j
.text:00407F97                 mov     ecx, [esp+0BCh+var_34]
.text:00407F9E                 movzx   eax, byte ptr [ecx-1]
.text:00407FA2                 jmp     loc_407F05
.text:00407FA7 ; ---------------------------------------------------------------------------
.text:00407FA7
.text:00407FA7 loc_407FA7:                             ; CODE XREF: sub_407200+CE6↑j
.text:00407FA7                 mov     ebx, [esp+0BCh+arg_C]
.text:00407FAE                 movzx   eax, byte ptr [ebx]
.text:00407FB1                 jmp     loc_407F05
.text:00407FB6 ; ---------------------------------------------------------------------------
.text:00407FB6
.text:00407FB6 loc_407FB6:                             ; DATA XREF: .text:004071E4↑o
.text:00407FB6                 mov     ebp, [esp+0BCh+var_48]
.text:00407FBA                 cmp     [esp+0BCh+var_44], ebp
.text:00407FBE                 jz      loc_408041
.text:00407FC4
.text:00407FC4 loc_407FC4:                             ; CODE XREF: sub_407200+E62↓j
.text:00407FC4                 mov     esi, [esp+0BCh+var_34]
.text:00407FCB                 cmp     [esp+0BCh+var_44], esi
.text:00407FCF                 jz      short loc_408035
.text:00407FD1                 mov     edi, [esp+0BCh+arg_C]
.text:00407FD8                 dec     edi
.text:00407FD9                 cmp     [esp+0BCh+var_44], edi
.text:00407FDD                 jz      short loc_408028
.text:00407FDF                 mov     ebp, [esp+0BCh+var_44]
.text:00407FE3                 movzx   eax, byte ptr [ebp+0]
.text:00407FE7
.text:00407FE7 loc_407FE7:                             ; CODE XREF: sub_407200+E33↓j
.text:00407FE7                                         ; sub_407200+E3F↓j
.text:00407FE7                 cmp     ds:byte_41B6B0[eax], 1
.text:00407FEE                 jz      loc_407652
.text:00407FF4                 mov     eax, [esp+0BCh+var_8C]
.text:00407FF8                 test    eax, eax
.text:00407FFA                 jnz     short loc_40801F
.text:00407FFC                 mov     [esp+0BCh+var_8C], 1
.text:00408004                 mov     eax, [esp+0BCh+var_60]
.text:00408008                 mov     ebx, [esp+0BCh+var_64]
.text:0040800C                 cmp     eax, ebx
.text:0040800E                 ja      short loc_40801F
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407200+E1D↓j
.text:00408010                 mov     esi, [esp+0BCh+var_78]
.text:00408014                 or      byte ptr [esi+eax*4], 18h
.text:00408018                 inc     eax
.text:00408019                 cmp     eax, [esp+0BCh+var_64]
.text:0040801D                 jbe     short loc_408010
.text:0040801F
.text:0040801F loc_40801F:                             ; CODE XREF: sub_407200+DFA↑j
.text:0040801F                                         ; sub_407200+E0E↑j ...
.text:0040801F                 inc     [esp+0BCh+var_44]
.text:00408023                 jmp     loc_407EA2
.text:00408028 ; ---------------------------------------------------------------------------
.text:00408028
.text:00408028 loc_408028:                             ; CODE XREF: sub_407200+DDD↑j
.text:00408028                 mov     edx, [esp+0BCh+var_34]
.text:0040802F                 movzx   eax, byte ptr [edx-1]
.text:00408033                 jmp     short loc_407FE7
.text:00408035 ; ---------------------------------------------------------------------------
.text:00408035
.text:00408035 loc_408035:                             ; CODE XREF: sub_407200+DCF↑j
.text:00408035                 mov     ecx, [esp+0BCh+arg_C]
.text:0040803C                 movzx   eax, byte ptr [ecx]
.text:0040803F                 jmp     short loc_407FE7
.text:00408041 ; ---------------------------------------------------------------------------
.text:00408041
.text:00408041 loc_408041:                             ; CODE XREF: sub_407200+DBE↑j
.text:00408041                                         ; sub_407200+E60↓j
.text:00408041                 mov     eax, [esp+0BCh+var_40]
.text:00408045                 cmp     [esp+0BCh+var_48], eax
.text:00408049                 jz      loc_407652
.text:0040804F                 mov     [esp+0BCh+var_48], eax
.text:00408053                 mov     ebx, [esp+0BCh+arg_C]
.text:0040805A                 cmp     ebx, eax
.text:0040805C                 mov     [esp+0BCh+var_44], ebx
.text:00408060                 jz      short loc_408041
.text:00408062                 jmp     loc_407FC4
.text:00408067 ; ---------------------------------------------------------------------------
.text:00408067
.text:00408067 loc_408067:                             ; DATA XREF: .text:004071E0↑o
.text:00408067                 mov     eax, [esp+0BCh+var_48]
.text:0040806B                 cmp     [esp+0BCh+var_44], eax
.text:0040806F                 jz      loc_4080F1
.text:00408075
.text:00408075 loc_408075:                             ; CODE XREF: sub_407200+F12↓j
.text:00408075                 mov     edx, [esp+0BCh+var_34]
.text:0040807C                 cmp     [esp+0BCh+var_44], edx
.text:00408080                 jz      short loc_4080E5
.text:00408082                 mov     ebp, [esp+0BCh+arg_C]
.text:00408089                 dec     ebp
.text:0040808A                 cmp     [esp+0BCh+var_44], ebp
.text:0040808E                 jz      short loc_4080D8
.text:00408090                 mov     esi, [esp+0BCh+var_44]
.text:00408094                 movzx   eax, byte ptr [esi]
.text:00408097
.text:00408097 loc_408097:                             ; CODE XREF: sub_407200+EE3↓j
.text:00408097                                         ; sub_407200+EEF↓j
.text:00408097                 cmp     ds:byte_41B6B0[eax], 1
.text:0040809E                 jnz     loc_407652
.text:004080A4                 mov     eax, [esp+0BCh+var_8C]
.text:004080A8                 test    eax, eax
.text:004080AA                 jnz     short loc_4080CF
.text:004080AC                 mov     [esp+0BCh+var_8C], 1
.text:004080B4                 mov     eax, [esp+0BCh+var_60]
.text:004080B8                 mov     ecx, [esp+0BCh+var_64]
.text:004080BC                 cmp     eax, ecx
.text:004080BE                 ja      short loc_4080CF
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: sub_407200+ECD↓j
.text:004080C0                 mov     edi, [esp+0BCh+var_78]
.text:004080C4                 or      byte ptr [edi+eax*4], 18h
.text:004080C8                 inc     eax
.text:004080C9                 cmp     eax, [esp+0BCh+var_64]
.text:004080CD                 jbe     short loc_4080C0
.text:004080CF
.text:004080CF loc_4080CF:                             ; CODE XREF: sub_407200+EAA↑j
.text:004080CF                                         ; sub_407200+EBE↑j
.text:004080CF                 inc     [esp+0BCh+var_44]
.text:004080D3                 jmp     loc_407A2B      ; jumptable 00407477 case 0
.text:004080D3                                         ; jumptable 00407DF6 case 0
.text:004080D3                                         ; jumptable 00407EC8 case 0
.text:004080D8 ; ---------------------------------------------------------------------------
.text:004080D8
.text:004080D8 loc_4080D8:                             ; CODE XREF: sub_407200+E8E↑j
.text:004080D8                 mov     ebx, [esp+0BCh+var_34]
.text:004080DF                 movzx   eax, byte ptr [ebx-1]
.text:004080E3                 jmp     short loc_408097
.text:004080E5 ; ---------------------------------------------------------------------------
.text:004080E5
.text:004080E5 loc_4080E5:                             ; CODE XREF: sub_407200+E80↑j
.text:004080E5                 mov     edi, [esp+0BCh+arg_C]
.text:004080EC                 movzx   eax, byte ptr [edi]
.text:004080EF                 jmp     short loc_408097
.text:004080F1 ; ---------------------------------------------------------------------------
.text:004080F1
.text:004080F1 loc_4080F1:                             ; CODE XREF: sub_407200+E6F↑j
.text:004080F1                                         ; sub_407200+F10↓j
.text:004080F1                 mov     ebx, [esp+0BCh+var_40]
.text:004080F5                 cmp     [esp+0BCh+var_48], ebx
.text:004080F9                 jz      loc_407652
.text:004080FF                 mov     [esp+0BCh+var_48], ebx
.text:00408103                 mov     ecx, [esp+0BCh+arg_C]
.text:0040810A                 cmp     ecx, ebx
.text:0040810C                 mov     [esp+0BCh+var_44], ecx
.text:00408110                 jz      short loc_4080F1
.text:00408112                 jmp     loc_408075
.text:00408117 ; ---------------------------------------------------------------------------
.text:00408117
.text:00408117 loc_408117:                             ; DATA XREF: .text:004071DC↑o
.text:00408117                 mov     esi, [esp+0BCh+var_4C]
.text:0040811B                 movsx   ecx, byte ptr [esi+1]
.text:0040811F                 movzx   eax, byte ptr [esi]
.text:00408122                 add     esi, 2
.text:00408125                 mov     ebp, esi
.text:00408127                 shl     ecx, 8
.text:0040812A                 lea     edi, [ecx+eax]
.text:0040812D                 add     ebp, edi
.text:0040812F                 mov     [esp+0BCh+var_30], ebp
.text:00408136                 mov     eax, offset loc_407479
.text:0040813B                 movsx   edx, byte ptr [esi+1]
.text:0040813F                 movzx   ecx, byte ptr [esi]
.text:00408142                 add     esi, 2
.text:00408145                 mov     [esp+0BCh+var_4C], esi
.text:00408149                 shl     edx, 8
.text:0040814C                 add     ecx, edx
.text:0040814E                 mov     [ebp+0], cl
.text:00408151                 mov     edi, [esp+0BCh+var_30]
.text:00408158                 sar     ecx, 8
.text:0040815B                 mov     [edi+1], cl
.text:0040815E                 mov     edx, [esp+0BCh+var_50]
.text:00408162                 cmp     esi, edx
.text:00408164                 jnz     loc_407BF5
.text:0040816A                 jmp     loc_407477
.text:0040816F ; ---------------------------------------------------------------------------
.text:0040816F
.text:0040816F loc_40816F:                             ; DATA XREF: .text:004071D8↑o
.text:0040816F                 mov     esi, [esp+0BCh+var_4C]
.text:00408173                 movsx   edi, byte ptr [esi+3]
.text:00408177                 movzx   ebp, byte ptr [esi+2]
.text:0040817B                 shl     edi, 8
.text:0040817E                 add     ebp, edi
.text:00408180                 jnz     short loc_40818C
.text:00408182                 add     [esp+0BCh+var_4C], 4
.text:00408187                 jmp     loc_407A2B      ; jumptable 00407477 case 0
.text:00408187                                         ; jumptable 00407DF6 case 0
.text:00408187                                         ; jumptable 00407EC8 case 0
.text:0040818C ; ---------------------------------------------------------------------------
.text:0040818C
.text:0040818C loc_40818C:                             ; CODE XREF: sub_407200+F80↑j
.text:0040818C                 dec     ebp
.text:0040818D                 mov     ebx, ebp
.text:0040818F                 sar     ebp, 8
.text:00408192                 mov     [esi+2], bl
.text:00408195                 mov     ecx, ebp
.text:00408197                 mov     [esi+3], cl
.text:0040819A
.text:0040819A loc_40819A:                             ; CODE XREF: sub_407200+14FE↓j
.text:0040819A                                         ; sub_407200+15A0↓j ...
.text:0040819A                 mov     ebx, [esp+0BCh+var_4C]
.text:0040819E                 movsx   ecx, byte ptr [ebx+1]
.text:004081A2                 movzx   edx, byte ptr [ebx]
.text:004081A5                 shl     ecx, 8
.text:004081A8                 lea     esi, [ecx+edx]
.text:004081AB                 lea     edi, [esi+ebx+2]
.text:004081AF                 mov     [esp+0BCh+var_4C], edi
.text:004081B3                 jmp     loc_407BDE
.text:004081B8 ; ---------------------------------------------------------------------------
.text:004081B8
.text:004081B8 loc_4081B8:                             ; DATA XREF: .text:004071D4↑o
.text:004081B8                 mov     ecx, [esp+0BCh+var_4C]
.text:004081BC                 movsx   ebx, byte ptr [ecx+3]
.text:004081C0                 movzx   ebp, byte ptr [ecx+2]
.text:004081C4                 shl     ebx, 8
.text:004081C7                 add     ebp, ebx
.text:004081C9                 test    ebp, ebp
.text:004081CB                 jle     short loc_4081E9
.text:004081CD                 dec     ebp
.text:004081CE                 add     ecx, 2
.text:004081D1                 mov     eax, ebp
.text:004081D3                 mov     [ecx], al
.text:004081D5                 sar     ebp, 8
.text:004081D8                 mov     edx, ebp
.text:004081DA                 mov     [ecx+1], dl
.text:004081DD                 add     ecx, 2
.text:004081E0                 mov     [esp+0BCh+var_4C], ecx
.text:004081E4                 jmp     loc_407A2B      ; jumptable 00407477 case 0
.text:004081E4                                         ; jumptable 00407DF6 case 0
.text:004081E4                                         ; jumptable 00407EC8 case 0
.text:004081E9 ; ---------------------------------------------------------------------------
.text:004081E9
.text:004081E9 loc_4081E9:                             ; CODE XREF: sub_407200+FCB↑j
.text:004081E9                 test    ebp, ebp
.text:004081EB                 jnz     loc_407A2B      ; jumptable 00407477 case 0
.text:004081EB                                         ; jumptable 00407DF6 case 0
.text:004081EB                                         ; jumptable 00407EC8 case 0
.text:004081F1                 mov     ebp, [esp+0BCh+var_4C]
.text:004081F5                 mov     byte ptr [ebp+2], 0
.text:004081F9                 mov     byte ptr [ebp+3], 0
.text:004081FD
.text:004081FD loc_4081FD:                             ; CODE XREF: sub_407200:loc_408B1C↓j
.text:004081FD                 mov     edx, [esp+0BCh+var_4C]
.text:00408201                 movsx   ecx, byte ptr [edx+1]
.text:00408205                 movzx   ebp, byte ptr [edx]
.text:00408208                 add     edx, 2
.text:0040820B                 mov     ebx, edx
.text:0040820D                 mov     [esp+0BCh+var_4C], edx
.text:00408211                 shl     ecx, 8
.text:00408214                 add     ebp, ecx
.text:00408216                 cmp     edx, [esp+0BCh+var_50]
.text:0040821A                 mov     [esp+0BCh+var_30], edx
.text:00408221                 jnb     short loc_408252
.text:00408223                 cmp     byte ptr [edx], 0
.text:00408226                 jnz     short loc_408243
.text:00408228                 lea     eax, [edx+1]
.text:0040822B
.text:0040822B loc_40822B:                             ; CODE XREF: sub_407200+1041↓j
.text:0040822B                 mov     [esp+0BCh+var_30], eax
.text:00408232                 mov     ebx, eax
.text:00408234                 lea     eax, [eax+1]
.text:00408237                 cmp     ebx, [esp+0BCh+var_50]
.text:0040823B                 jnb     short loc_408252
.text:0040823D                 cmp     byte ptr [eax-1], 0
.text:00408241                 jz      short loc_40822B
.text:00408243
.text:00408243 loc_408243:                             ; CODE XREF: sub_407200+1026↑j
.text:00408243                 cmp     ebx, [esp+0BCh+var_50]
.text:00408247                 jnb     short loc_408252
.text:00408249                 cmp     byte ptr [ebx], 6
.text:0040824C                 jz      loc_4083DA
.text:00408252
.text:00408252 loc_408252:                             ; CODE XREF: sub_407200+1021↑j
.text:00408252                                         ; sub_407200+103B↑j ...
.text:00408252                 mov     edi, [esp+0BCh+var_60]
.text:00408256                 mov     ebx, [esp+0BCh+var_64]
.text:0040825A                 mov     ecx, [esp+0BCh+var_28]
.text:00408261                 mov     esi, [esp+0BCh+var_24]
.text:00408268                 sub     ebx, edi
.text:0040826A                 mov     edx, ecx
.text:0040826C                 lea     edi, [ebx+ebx]
.text:0040826F                 sub     edx, esi
.text:00408271                 lea     eax, [ebx+edi+7]
.text:00408275                 cmp     edx, eax
.text:00408277                 jnb     short loc_4082ED
.text:00408279                 mov     edi, eax
.text:0040827B
.text:0040827B loc_40827B:                             ; CODE XREF: sub_407200+10EB↓j
.text:0040827B                 mov     edx, dword_41A040
.text:00408281                 lea     ebx, [edx+edx*8]
.text:00408284                 lea     esi, [edx+ebx*2]
.text:00408287                 cmp     ecx, esi
.text:00408289                 ja      loc_407981
.text:0040828F                 lea     edx, ds:0[ecx*8]
.text:00408296                 mov     [esp+0BCh+Size], edx ; Size
.text:00408299                 call    malloc
.text:0040829E                 mov     [esp+0BCh+Size], eax ; void *
.text:004082A1                 mov     ebx, [esp+0BCh+var_28]
.text:004082A8                 mov     esi, [esp+0BCh+Src]
.text:004082AF                 shl     ebx, 2
.text:004082B2                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:004082B6                 mov     [esp+0BCh+var_B8], esi ; Src
.text:004082BA                 call    memcpy
.text:004082BF                 mov     [esp+0BCh+Src], eax
.text:004082C6                 test    eax, eax
.text:004082C8                 jz      loc_407981
.text:004082CE                 mov     ebx, [esp+0BCh+var_28]
.text:004082D5                 mov     esi, [esp+0BCh+var_24]
.text:004082DC                 add     ebx, ebx
.text:004082DE                 mov     [esp+0BCh+var_28], ebx
.text:004082E5                 mov     ecx, ebx
.text:004082E7                 sub     ebx, esi
.text:004082E9                 cmp     ebx, edi
.text:004082EB                 jb      short loc_40827B
.text:004082ED
.text:004082ED loc_4082ED:                             ; CODE XREF: sub_407200+1077↑j
.text:004082ED                 mov     ecx, [esp+0BCh+var_60]
.text:004082F1                 mov     eax, [esp+0BCh+var_64]
.text:004082F5                 cmp     ecx, eax
.text:004082F7                 ja      loc_4083D1
.text:004082FD                 mov     ebx, [esp+0BCh+Src]
.text:00408304
.text:00408304 loc_408304:                             ; CODE XREF: sub_407200+1162↓j
.text:00408304                 mov     eax, [esp+0BCh+var_68]
.text:00408308                 mov     edi, [eax+ecx*4]
.text:0040830B                 mov     [ebx+esi*4], edi
.text:0040830E                 mov     edx, [esp+0BCh+var_6C]
.text:00408312                 mov     edi, [esp+0BCh+var_24]
.text:00408319                 mov     ebx, [esp+0BCh+Src]
.text:00408320                 mov     esi, [edx+ecx*4]
.text:00408323                 inc     edi
.text:00408324                 mov     [esp+0BCh+var_24], edi
.text:0040832B                 mov     [ebx+edi*4], esi
.text:0040832E                 mov     edi, [esp+0BCh+var_24]
.text:00408335                 mov     eax, [esp+0BCh+var_78]
.text:00408339                 mov     ebx, [esp+0BCh+Src]
.text:00408340                 inc     edi
.text:00408341                 mov     [esp+0BCh+var_24], edi
.text:00408348                 mov     esi, [eax+ecx*4]
.text:0040834B                 inc     ecx
.text:0040834C                 mov     [ebx+edi*4], esi
.text:0040834F                 mov     esi, [esp+0BCh+var_24]
.text:00408356                 inc     esi
.text:00408357                 cmp     ecx, [esp+0BCh+var_64]
.text:0040835B                 mov     [esp+0BCh+var_24], esi
.text:00408362                 jbe     short loc_408304
.text:00408364
.text:00408364 loc_408364:                             ; CODE XREF: sub_407200+11D8↓j
.text:00408364                 mov     eax, [esp+0BCh+var_60]
.text:00408368                 mov     [ebx+esi*4], eax
.text:0040836B                 mov     ecx, [esp+0BCh+var_24]
.text:00408372                 mov     edi, [esp+0BCh+var_64]
.text:00408376                 mov     edx, [esp+0BCh+Src]
.text:0040837D                 inc     ecx
.text:0040837E                 mov     [esp+0BCh+var_24], ecx
.text:00408385                 mov     [edx+ecx*4], edi
.text:00408388                 mov     eax, [esp+0BCh+var_24]
.text:0040838F                 mov     esi, [esp+0BCh+var_4C]
.text:00408393                 mov     edi, [esp+0BCh+Src]
.text:0040839A                 inc     eax
.text:0040839B                 add     esi, ebp
.text:0040839D                 mov     [esp+0BCh+var_24], eax
.text:004083A4                 mov     [edi+eax*4], esi
.text:004083A7                 mov     ecx, [esp+0BCh+var_24]
.text:004083AE                 mov     ebp, [esp+0BCh+Src]
.text:004083B5                 mov     ebx, [esp+0BCh+var_44]
.text:004083B9                 inc     ecx
.text:004083BA                 mov     [esp+0BCh+var_24], ecx
.text:004083C1                 mov     [ebp+ecx*4+0], ebx
.text:004083C5                 inc     [esp+0BCh+var_24]
.text:004083CC                 jmp     loc_407A2B      ; jumptable 00407477 case 0
.text:004083CC                                         ; jumptable 00407DF6 case 0
.text:004083CC                                         ; jumptable 00407EC8 case 0
.text:004083D1 ; ---------------------------------------------------------------------------
.text:004083D1
.text:004083D1 loc_4083D1:                             ; CODE XREF: sub_407200+10F7↑j
.text:004083D1                 mov     ebx, [esp+0BCh+Src]
.text:004083D8                 jmp     short loc_408364
.text:004083DA ; ---------------------------------------------------------------------------
.text:004083DA
.text:004083DA loc_4083DA:                             ; CODE XREF: sub_407200+104C↑j
.text:004083DA                 movzx   edx, byte ptr [ebx+1]
.text:004083DE                 movzx   edi, byte ptr [ebx+2]
.text:004083E2                 cmp     [esp+0BCh+var_60], 101h
.text:004083EA                 lea     ebx, [edi+edx]
.text:004083ED                 mov     [esp+0BCh+var_64], ebx
.text:004083F1                 jnz     loc_408252
.text:004083F7                 mov     [esp+0BCh+var_60], edx
.text:004083FB                 jmp     loc_408252
.text:00408400 ; ---------------------------------------------------------------------------
.text:00408400
.text:00408400 loc_408400:                             ; DATA XREF: .text:004071D0↑o
.text:00408400                 mov     eax, [esp+0BCh+var_60]
.text:00408404                 mov     edx, [esp+0BCh+var_64]
.text:00408408                 mov     ecx, [esp+0BCh+var_28]
.text:0040840F                 mov     esi, [esp+0BCh+var_24]
.text:00408416                 sub     edx, eax
.text:00408418                 mov     ebp, ecx
.text:0040841A                 lea     ebx, [edx+edx]
.text:0040841D                 sub     ebp, esi
.text:0040841F                 lea     eax, [edx+ebx+7]
.text:00408423                 cmp     ebp, eax
.text:00408425                 jnb     short loc_40849B
.text:00408427                 mov     edi, eax
.text:00408429
.text:00408429 loc_408429:                             ; CODE XREF: sub_407200+1299↓j
.text:00408429                 mov     edx, dword_41A040
.text:0040842F                 lea     ebp, [edx+edx*8]
.text:00408432                 lea     esi, [edx+ebp*2]
.text:00408435                 cmp     ecx, esi
.text:00408437                 ja      loc_407981
.text:0040843D                 lea     ebp, ds:0[ecx*8]
.text:00408444                 mov     [esp+0BCh+Size], ebp ; Size
.text:00408447                 call    malloc
.text:0040844C                 mov     [esp+0BCh+Size], eax ; void *
.text:0040844F                 mov     esi, [esp+0BCh+var_28]
.text:00408456                 mov     ebx, [esp+0BCh+Src]
.text:0040845D                 shl     esi, 2
.text:00408460                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00408464                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00408468                 call    memcpy
.text:0040846D                 mov     [esp+0BCh+Src], eax
.text:00408474                 test    eax, eax
.text:00408476                 jz      loc_407981
.text:0040847C                 mov     edx, [esp+0BCh+var_28]
.text:00408483                 mov     esi, [esp+0BCh+var_24]
.text:0040848A                 add     edx, edx
.text:0040848C                 mov     [esp+0BCh+var_28], edx
.text:00408493                 mov     ecx, edx
.text:00408495                 sub     edx, esi
.text:00408497                 cmp     edx, edi
.text:00408499                 jb      short loc_408429
.text:0040849B
.text:0040849B loc_40849B:                             ; CODE XREF: sub_407200+1225↑j
.text:0040849B                 mov     ecx, [esp+0BCh+var_60]
.text:0040849F                 mov     edi, [esp+0BCh+var_64]
.text:004084A3                 cmp     ecx, edi
.text:004084A5                 ja      loc_40857D
.text:004084AB                 mov     ebx, [esp+0BCh+Src]
.text:004084B2
.text:004084B2 loc_4084B2:                             ; CODE XREF: sub_407200+1310↓j
.text:004084B2                 mov     eax, [esp+0BCh+var_68]
.text:004084B6                 mov     edi, [eax+ecx*4]
.text:004084B9                 mov     [ebx+esi*4], edi
.text:004084BC                 mov     edx, [esp+0BCh+var_6C]
.text:004084C0                 mov     edi, [esp+0BCh+var_24]
.text:004084C7                 mov     ebx, [esp+0BCh+Src]
.text:004084CE                 mov     ebp, [edx+ecx*4]
.text:004084D1                 inc     edi
.text:004084D2                 mov     [esp+0BCh+var_24], edi
.text:004084D9                 mov     [ebx+edi*4], ebp
.text:004084DC                 mov     ebp, [esp+0BCh+var_24]
.text:004084E3                 mov     eax, [esp+0BCh+var_78]
.text:004084E7                 mov     ebx, [esp+0BCh+Src]
.text:004084EE                 inc     ebp
.text:004084EF                 mov     [esp+0BCh+var_24], ebp
.text:004084F6                 mov     esi, [eax+ecx*4]
.text:004084F9                 inc     ecx
.text:004084FA                 mov     [ebx+ebp*4], esi
.text:004084FD                 mov     esi, [esp+0BCh+var_24]
.text:00408504                 inc     esi
.text:00408505                 cmp     ecx, [esp+0BCh+var_64]
.text:00408509                 mov     [esp+0BCh+var_24], esi
.text:00408510                 jbe     short loc_4084B2
.text:00408512
.text:00408512 loc_408512:                             ; CODE XREF: sub_407200+1384↓j
.text:00408512                 mov     edi, [esp+0BCh+var_60]
.text:00408516                 mov     [ebx+esi*4], edi
.text:00408519                 mov     edx, [esp+0BCh+var_24]
.text:00408520                 mov     ebp, [esp+0BCh+Src]
.text:00408527                 mov     esi, [esp+0BCh+var_64]
.text:0040852B                 inc     edx
.text:0040852C                 mov     [esp+0BCh+var_24], edx
.text:00408533                 mov     [ebp+edx*4+0], esi
.text:00408537                 mov     ebx, [esp+0BCh+var_24]
.text:0040853E                 mov     ecx, [esp+0BCh+Src]
.text:00408545                 inc     ebx
.text:00408546                 mov     [esp+0BCh+var_24], ebx
.text:0040854D                 mov     dword ptr [ecx+ebx*4], 0
.text:00408554
.text:00408554 loc_408554:                             ; CODE XREF: sub_407200+190E↓j
.text:00408554                 mov     eax, [esp+0BCh+var_24]
.text:0040855B                 mov     ecx, [esp+0BCh+Src]
.text:00408562                 inc     eax
.text:00408563                 mov     [esp+0BCh+var_24], eax
.text:0040856A                 mov     dword ptr [ecx+eax*4], 0
.text:00408571                 inc     [esp+0BCh+var_24]
.text:00408578                 jmp     loc_407EA2
.text:0040857D ; ---------------------------------------------------------------------------
.text:0040857D
.text:0040857D loc_40857D:                             ; CODE XREF: sub_407200+12A5↑j
.text:0040857D                 mov     ebx, [esp+0BCh+Src]
.text:00408584                 jmp     short loc_408512
.text:00408586 ; ---------------------------------------------------------------------------
.text:00408586
.text:00408586 loc_408586:                             ; DATA XREF: .text:004071CC↑o
.text:00408586                 mov     eax, [esp+0BCh+var_60]
.text:0040858A                 mov     ebx, [esp+0BCh+var_64]
.text:0040858E                 mov     ecx, [esp+0BCh+var_28]
.text:00408595                 mov     esi, [esp+0BCh+var_24]
.text:0040859C                 sub     ebx, eax
.text:0040859E                 mov     edx, ecx
.text:004085A0                 lea     ebp, [ebx+ebx]
.text:004085A3                 sub     edx, esi
.text:004085A5                 lea     eax, [ebx+ebp+7]
.text:004085A9                 cmp     edx, eax
.text:004085AB                 jnb     short loc_408621
.text:004085AD                 mov     edi, eax
.text:004085AF
.text:004085AF loc_4085AF:                             ; CODE XREF: sub_407200+141F↓j
.text:004085AF                 mov     edx, dword_41A040
.text:004085B5                 lea     ebx, [edx+edx*8]
.text:004085B8                 lea     esi, [edx+ebx*2]
.text:004085BB                 cmp     ecx, esi
.text:004085BD                 ja      loc_407981
.text:004085C3                 lea     ebx, ds:0[ecx*8]
.text:004085CA                 mov     [esp+0BCh+Size], ebx ; Size
.text:004085CD                 call    malloc
.text:004085D2                 mov     [esp+0BCh+Size], eax ; void *
.text:004085D5                 mov     esi, [esp+0BCh+var_28]
.text:004085DC                 mov     ebp, [esp+0BCh+Src]
.text:004085E3                 shl     esi, 2
.text:004085E6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:004085EA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:004085EE                 call    memcpy
.text:004085F3                 mov     [esp+0BCh+Src], eax
.text:004085FA                 test    eax, eax
.text:004085FC                 jz      loc_407981
.text:00408602                 mov     edx, [esp+0BCh+var_28]
.text:00408609                 mov     esi, [esp+0BCh+var_24]
.text:00408610                 add     edx, edx
.text:00408612                 mov     [esp+0BCh+var_28], edx
.text:00408619                 mov     ecx, edx
.text:0040861B                 sub     edx, esi
.text:0040861D                 cmp     edx, edi
.text:0040861F                 jb      short loc_4085AF
.text:00408621
.text:00408621 loc_408621:                             ; CODE XREF: sub_407200+13AB↑j
.text:00408621                 mov     ecx, [esp+0BCh+var_60]
.text:00408625                 mov     edi, [esp+0BCh+var_64]
.text:00408629                 cmp     ecx, edi
.text:0040862B                 ja      loc_408703
.text:00408631                 mov     ebx, [esp+0BCh+Src]
.text:00408638
.text:00408638 loc_408638:                             ; CODE XREF: sub_407200+1496↓j
.text:00408638                 mov     eax, [esp+0BCh+var_68]
.text:0040863C                 mov     edi, [eax+ecx*4]
.text:0040863F                 mov     [ebx+esi*4], edi
.text:00408642                 mov     edx, [esp+0BCh+var_6C]
.text:00408646                 mov     edi, [esp+0BCh+var_24]
.text:0040864D                 mov     ebx, [esp+0BCh+Src]
.text:00408654                 mov     ebp, [edx+ecx*4]
.text:00408657                 inc     edi
.text:00408658                 mov     [esp+0BCh+var_24], edi
.text:0040865F                 mov     [ebx+edi*4], ebp
.text:00408662                 mov     ebp, [esp+0BCh+var_24]
.text:00408669                 mov     eax, [esp+0BCh+var_78]
.text:0040866D                 mov     ebx, [esp+0BCh+Src]
.text:00408674                 inc     ebp
.text:00408675                 mov     [esp+0BCh+var_24], ebp
.text:0040867C                 mov     esi, [eax+ecx*4]
.text:0040867F                 inc     ecx
.text:00408680                 mov     [ebx+ebp*4], esi
.text:00408683                 mov     esi, [esp+0BCh+var_24]
.text:0040868A                 inc     esi
.text:0040868B                 cmp     ecx, [esp+0BCh+var_64]
.text:0040868F                 mov     [esp+0BCh+var_24], esi
.text:00408696                 jbe     short loc_408638
.text:00408698
.text:00408698 loc_408698:                             ; CODE XREF: sub_407200+150A↓j
.text:00408698                 mov     ebp, [esp+0BCh+var_60]
.text:0040869C                 mov     [ebx+esi*4], ebp
.text:0040869F                 mov     eax, [esp+0BCh+var_24]
.text:004086A6                 mov     edi, [esp+0BCh+Src]
.text:004086AD                 mov     esi, [esp+0BCh+var_64]
.text:004086B1                 inc     eax
.text:004086B2                 mov     [esp+0BCh+var_24], eax
.text:004086B9                 mov     [edi+eax*4], esi
.text:004086BC                 mov     edx, [esp+0BCh+var_24]
.text:004086C3                 mov     ebp, [esp+0BCh+Src]
.text:004086CA                 inc     edx
.text:004086CB                 mov     [esp+0BCh+var_24], edx
.text:004086D2                 mov     dword ptr [ebp+edx*4+0], 0
.text:004086DA                 mov     ebx, [esp+0BCh+var_24]
.text:004086E1                 mov     ecx, [esp+0BCh+Src]
.text:004086E8                 inc     ebx
.text:004086E9                 mov     [esp+0BCh+var_24], ebx
.text:004086F0                 mov     dword ptr [ecx+ebx*4], 0
.text:004086F7                 inc     [esp+0BCh+var_24]
.text:004086FE                 jmp     loc_40819A
.text:00408703 ; ---------------------------------------------------------------------------
.text:00408703
.text:00408703 loc_408703:                             ; CODE XREF: sub_407200+142B↑j
.text:00408703                 mov     ebx, [esp+0BCh+Src]
.text:0040870A                 jmp     short loc_408698
.text:0040870C ; ---------------------------------------------------------------------------
.text:0040870C
.text:0040870C loc_40870C:                             ; DATA XREF: .text:004071C8↑o
.text:0040870C                 mov     esi, [esp+0BCh+var_4C]
.text:00408710                 movsx   ebx, byte ptr [esi+1]
.text:00408714                 movzx   ebp, byte ptr [esi]
.text:00408717                 add     esi, 2
.text:0040871A                 mov     [esp+0BCh+var_4C], esi
.text:0040871E                 shl     ebx, 8
.text:00408721                 add     ebp, ebx
.text:00408723
.text:00408723 loc_408723:                             ; CODE XREF: sub_407200+153A↓j
.text:00408723                                         ; sub_407200+154C↓j
.text:00408723                 lea     edx, [esi+2]
.text:00408726                 cmp     edx, [esp+0BCh+var_50]
.text:0040872A                 jnb     short def_407C04 ; jumptable 00407C04 default case
.text:0040872C                 movzx   ecx, byte ptr [esi]
.text:0040872F                 sub     cl, 6
.text:00408732                 cmp     cl, 1
.text:00408735                 ja      short def_407C04 ; jumptable 00407C04 default case
.text:00408737                 add     esi, 3
.text:0040873A                 jmp     short loc_408723
.text:0040873C ; ---------------------------------------------------------------------------
.text:0040873C
.text:0040873C def_407C04:                             ; CODE XREF: sub_407200+152A↑j
.text:0040873C                                         ; sub_407200+1535↑j
.text:0040873C                 lea     eax, [esi+6]    ; jumptable 00407C04 default case
.text:0040873F                 cmp     eax, [esp+0BCh+var_50]
.text:00408743                 jnb     short loc_40874E
.text:00408745                 cmp     byte ptr [esi], 13h
.text:00408748                 jnz     short loc_40874E
.text:0040874A                 mov     esi, eax
.text:0040874C                 jmp     short loc_408723
.text:0040874E ; ---------------------------------------------------------------------------
.text:0040874E
.text:0040874E loc_40874E:                             ; CODE XREF: sub_407200+1543↑j
.text:0040874E                                         ; sub_407200+1548↑j
.text:0040874E                 mov     edi, [esp+0BCh+var_4C]
.text:00408752                 add     edi, ebp
.text:00408754                 cmp     esi, [esp+0BCh+var_50]
.text:00408758                 mov     [esp+0BCh+var_30], edi
.text:0040875F                 jz      loc_4088E5
.text:00408765                 movzx   eax, byte ptr [esi]
.text:00408768                 cmp     al, 2
.text:0040876A                 jz      loc_40899B
.text:00408770                 mov     ebp, [esp+0BCh+arg_0]
.text:00408777                 test    byte ptr [ebp+1Ch], 80h
.text:0040877B                 jz      short loc_408785
.text:0040877D                 cmp     al, 0Ah
.text:0040877F                 jz      loc_40892B
.text:00408785
.text:00408785 loc_408785:                             ; CODE XREF: sub_407200+157B↑j
.text:00408785                 cmp     al, 4
.text:00408787                 jz      loc_408835
.text:0040878D
.text:0040878D loc_40878D:                             ; CODE XREF: sub_407200+1652↓j
.text:0040878D                                         ; sub_407200:loc_408894↓j ...
.text:0040878D                 sub     [esp+0BCh+var_4C], 2
.text:00408792                 mov     esi, [esp+0BCh+var_4C]
.text:00408796                 cmp     byte ptr [esi-1], 11h
.text:0040879A                 jz      short loc_4087A5
.text:0040879C                 mov     byte ptr [esi-1], 0Dh
.text:004087A0                 jmp     loc_40819A
.text:004087A5 ; ---------------------------------------------------------------------------
.text:004087A5
.text:004087A5 loc_4087A5:                             ; CODE XREF: sub_407200+159A↑j
.text:004087A5                                         ; DATA XREF: .text:004071C4↑o
.text:004087A5                 mov     edi, [esp+0BCh+var_24]
.text:004087AC                 mov     ebx, [esp+0BCh+Src]
.text:004087B3                 lea     eax, [edi-3]
.text:004087B6                 mov     [esp+0BCh+var_24], eax
.text:004087BD                 lea     ecx, [edi-4]
.text:004087C0                 mov     ebp, [ebx+eax*4]
.text:004087C3                 mov     [esp+0BCh+var_24], ecx
.text:004087CA                 mov     edi, [ebx+ecx*4]
.text:004087CD                 mov     ecx, ebp
.text:004087CF                 cmp     ebp, edi
.text:004087D1                 jb      short loc_408828
.text:004087D3
.text:004087D3 loc_4087D3:                             ; CODE XREF: sub_407200+1626↓j
.text:004087D3                 mov     eax, [esp+0BCh+var_24]
.text:004087DA                 dec     eax
.text:004087DB                 mov     [esp+0BCh+var_24], eax
.text:004087E2                 mov     edx, [ebx+eax*4]
.text:004087E5                 mov     ebx, [esp+0BCh+var_94]
.text:004087E9                 mov     [ebx+ecx*4], edx
.text:004087EC                 mov     edx, [esp+0BCh+var_24]
.text:004087F3                 mov     ebx, [esp+0BCh+Src]
.text:004087FA                 mov     esi, [esp+0BCh+var_90]
.text:004087FE                 lea     ebp, [edx-1]
.text:00408801                 mov     [esp+0BCh+var_24], ebp
.text:00408808                 mov     eax, [ebx+ebp*4]
.text:0040880B                 mov     ebp, [esp+0BCh+var_90]
.text:0040880F                 mov     [ebp+ecx*4+0], eax
.text:00408813                 lea     ebp, [edx-2]
.text:00408816                 mov     [esp+0BCh+var_24], ebp
.text:0040881D                 mov     edx, [ebx+ebp*4]
.text:00408820                 mov     [esi+ecx*4], edx
.text:00408823                 dec     ecx
.text:00408824                 cmp     ecx, edi
.text:00408826                 jnb     short loc_4087D3
.text:00408828
.text:00408828 loc_408828:                             ; CODE XREF: sub_407200+15D1↑j
.text:00408828                 mov     [esp+0BCh+var_8C], 0
.text:00408830                 jmp     loc_40819A
.text:00408835 ; ---------------------------------------------------------------------------
.text:00408835
.text:00408835 loc_408835:                             ; CODE XREF: sub_407200+1587↑j
.text:00408835                 mov     ebx, [esp+0BCh+var_30]
.text:0040883C                 mov     edi, ebx
.text:0040883E                 cmp     byte ptr [ebx+3], 2
.text:00408842                 jz      loc_4088F2
.text:00408848
.text:00408848 loc_408848:                             ; CODE XREF: sub_407200+1718↓j
.text:00408848                 movzx   eax, byte ptr [edi+3]
.text:0040884C                 cmp     al, 5
.text:0040884E                 jz      short loc_4088A7
.text:00408850                 cmp     al, 4
.text:00408852                 jnz     loc_40878D
.text:00408858                 movzx   eax, byte ptr [esi+1]
.text:0040885C                 xor     edx, edx
.text:0040885E                 movzx   ebx, al
.text:00408861                 mov     [esp+0BCh+var_A5], al
.text:00408865                 cmp     edx, ebx
.text:00408867                 jge     short loc_408885
.text:00408869                 movzx   ecx, byte ptr [edi+4]
.text:0040886D                 cmp     edx, ecx
.text:0040886F                 jge     short loc_408885
.text:00408871
.text:00408871 loc_408871:                             ; CODE XREF: sub_407200+1683↓j
.text:00408871                 movzx   eax, byte ptr [edx+edi+5]
.text:00408876                 test    [edx+esi+2], al
.text:0040887A                 jnz     short loc_408885
.text:0040887C                 inc     edx
.text:0040887D                 cmp     edx, ebx
.text:0040887F                 jge     short loc_408885
.text:00408881                 cmp     edx, ecx
.text:00408883                 jl      short loc_408871
.text:00408885
.text:00408885 loc_408885:                             ; CODE XREF: sub_407200+1667↑j
.text:00408885                                         ; sub_407200+166F↑j ...
.text:00408885                 movzx   ebp, [esp+0BCh+var_A5]
.text:0040888A                 cmp     edx, ebp
.text:0040888C                 jz      short loc_40889A
.text:0040888E                 movzx   ebx, byte ptr [edi+4]
.text:00408892                 cmp     edx, ebx
.text:00408894
.text:00408894 loc_408894:                             ; CODE XREF: sub_407200+1784↓j
.text:00408894                 jnz     loc_40878D
.text:0040889A
.text:0040889A loc_40889A:                             ; CODE XREF: sub_407200+168C↑j
.text:0040889A                 mov     edx, [esp+0BCh+var_4C]
.text:0040889E                 mov     byte ptr [edx-3], 11h
.text:004088A2                 jmp     loc_40878D
.text:004088A7 ; ---------------------------------------------------------------------------
.text:004088A7
.text:004088A7 loc_4088A7:                             ; CODE XREF: sub_407200+164E↑j
.text:004088A7                 movzx   ebx, byte ptr [esi+1]
.text:004088AB                 xor     ecx, ecx
.text:004088AD                 movzx   eax, bl
.text:004088B0                 cmp     ecx, eax
.text:004088B2                 jge     short loc_4088DA
.text:004088B4                 mov     ebp, eax
.text:004088B6
.text:004088B6 loc_4088B6:                             ; CODE XREF: sub_407200+16D8↓j
.text:004088B6                 movzx   edx, byte ptr [ecx+esi+2]
.text:004088BB                 test    dl, dl
.text:004088BD                 jz      short loc_4088D5
.text:004088BF                 movzx   eax, byte ptr [edi+4]
.text:004088C3                 cmp     ecx, eax
.text:004088C5                 jge     short loc_4088DA
.text:004088C7                 movzx   eax, byte ptr [ecx+edi+5]
.text:004088CC                 movzx   edx, dl
.text:004088CF                 not     eax
.text:004088D1                 test    eax, edx
.text:004088D3                 jnz     short loc_4088DA
.text:004088D5
.text:004088D5 loc_4088D5:                             ; CODE XREF: sub_407200+16BD↑j
.text:004088D5                 inc     ecx
.text:004088D6                 cmp     ecx, ebp
.text:004088D8                 jl      short loc_4088B6
.text:004088DA
.text:004088DA loc_4088DA:                             ; CODE XREF: sub_407200+16B2↑j
.text:004088DA                                         ; sub_407200+16C5↑j ...
.text:004088DA                 movzx   esi, bl
.text:004088DD                 cmp     ecx, esi
.text:004088DF                 jnz     loc_40878D
.text:004088E5
.text:004088E5 loc_4088E5:                             ; CODE XREF: sub_407200+155F↑j
.text:004088E5                 mov     ecx, [esp+0BCh+var_4C]
.text:004088E9                 mov     byte ptr [ecx-3], 11h
.text:004088ED                 jmp     loc_40878D
.text:004088F2 ; ---------------------------------------------------------------------------
.text:004088F2
.text:004088F2 loc_4088F2:                             ; CODE XREF: sub_407200+1642↑j
.text:004088F2                 movzx   edx, byte ptr [esi+1]
.text:004088F6                 movzx   ecx, byte ptr [ebx+5]
.text:004088FA                 shl     edx, 3
.text:004088FD                 movzx   ebp, cl
.text:00408900                 cmp     edx, ebp
.text:00408902                 jle     short loc_40891E
.text:00408904                 mov     dl, cl
.text:00408906                 shr     dl, 3
.text:00408909                 and     ecx, 7
.text:0040890C                 movzx   ebx, dl
.text:0040890F                 movzx   eax, byte ptr [ebx+esi+2]
.text:00408914                 sar     eax, cl
.text:00408916                 test    al, 1
.text:00408918                 jnz     loc_408848
.text:0040891E
.text:0040891E loc_40891E:                             ; CODE XREF: sub_407200+1702↑j
.text:0040891E                 mov     edi, [esp+0BCh+var_4C]
.text:00408922                 mov     byte ptr [edi-3], 11h
.text:00408926                 jmp     loc_40878D
.text:0040892B ; ---------------------------------------------------------------------------
.text:0040892B
.text:0040892B loc_40892B:                             ; CODE XREF: sub_407200+157F↑j
.text:0040892B                 mov     cl, 0Ah
.text:0040892D
.text:0040892D loc_40892D:                             ; CODE XREF: sub_407200+179F↓j
.text:0040892D                 mov     ebx, [esp+0BCh+var_30]
.text:00408934                 mov     esi, ebx
.text:00408936                 cmp     byte ptr [ebx+3], 2
.text:0040893A                 jz      short loc_408989
.text:0040893C
.text:0040893C loc_40893C:                             ; CODE XREF: sub_407200+178C↓j
.text:0040893C                 movzx   edx, byte ptr [esi+3]
.text:00408940                 mov     bl, dl
.text:00408942                 sub     bl, 4
.text:00408945                 cmp     bl, 1
.text:00408948                 ja      loc_40878D
.text:0040894E                 movzx   edi, byte ptr [esi+4]
.text:00408952                 xor     ebx, ebx
.text:00408954                 cmp     dl, 5
.text:00408957                 setz    bl
.text:0040895A                 movzx   eax, cl
.text:0040895D                 shl     edi, 3
.text:00408960                 cmp     eax, edi
.text:00408962                 jnb     short loc_408982
.text:00408964                 mov     al, cl
.text:00408966                 shr     al, 3
.text:00408969                 and     ecx, 7
.text:0040896C                 movzx   edx, al
.text:0040896F                 movzx   eax, byte ptr [edx+esi+5]
.text:00408974                 sar     eax, cl
.text:00408976                 test    al, 1
.text:00408978                 jz      short loc_408982
.text:0040897A                 test    ebx, ebx
.text:0040897C                 setz    cl
.text:0040897F                 movzx   ebx, cl
.text:00408982
.text:00408982 loc_408982:                             ; CODE XREF: sub_407200+1762↑j
.text:00408982                                         ; sub_407200+1778↑j
.text:00408982                 test    ebx, ebx
.text:00408984                 jmp     loc_408894
.text:00408989 ; ---------------------------------------------------------------------------
.text:00408989
.text:00408989 loc_408989:                             ; CODE XREF: sub_407200+173A↑j
.text:00408989                 cmp     [ebx+5], cl
.text:0040898C                 jz      short loc_40893C
.text:0040898E                 mov     esi, [esp+0BCh+var_4C]
.text:00408992                 mov     byte ptr [esi-3], 11h
.text:00408996                 jmp     loc_40878D
.text:0040899B ; ---------------------------------------------------------------------------
.text:0040899B
.text:0040899B loc_40899B:                             ; CODE XREF: sub_407200+156A↑j
.text:0040899B                 movzx   ecx, byte ptr [esi+2]
.text:0040899F                 jmp     short loc_40892D
.text:004089A1 ; ---------------------------------------------------------------------------
.text:004089A1
.text:004089A1 loc_4089A1:                             ; DATA XREF: .text:004071C0↑o
.text:004089A1                 mov     edx, [esp+0BCh+var_4C]
.text:004089A5                 mov     edi, [esp+0BCh+var_60]
.text:004089A9                 mov     ebx, [esp+0BCh+var_64]
.text:004089AD                 movsx   ecx, byte ptr [edx+1]
.text:004089B1                 mov     esi, [esp+0BCh+var_24]
.text:004089B8                 sub     ebx, edi
.text:004089BA                 movzx   ebp, byte ptr [edx]
.text:004089BD                 lea     edi, [ebx+ebx]
.text:004089C0                 shl     ecx, 8
.text:004089C3                 add     edx, 2
.text:004089C6                 lea     eax, [ebx+edi+7]
.text:004089CA                 mov     [esp+0BCh+var_4C], edx
.text:004089CE                 add     ebp, ecx
.text:004089D0                 mov     ecx, [esp+0BCh+var_28]
.text:004089D7                 mov     edx, ecx
.text:004089D9                 sub     edx, esi
.text:004089DB                 cmp     edx, eax
.text:004089DD                 jnb     short loc_408A53
.text:004089DF                 mov     edi, eax
.text:004089E1
.text:004089E1 loc_4089E1:                             ; CODE XREF: sub_407200+1851↓j
.text:004089E1                 mov     edx, dword_41A040
.text:004089E7                 lea     esi, [edx+edx*8]
.text:004089EA                 lea     ebx, [edx+esi*2]
.text:004089ED                 cmp     ecx, ebx
.text:004089EF                 ja      loc_407981
.text:004089F5                 lea     edx, ds:0[ecx*8]
.text:004089FC                 mov     [esp+0BCh+Size], edx ; Size
.text:004089FF                 call    malloc
.text:00408A04                 mov     [esp+0BCh+Size], eax ; void *
.text:00408A07                 mov     esi, [esp+0BCh+var_28]
.text:00408A0E                 mov     ebx, [esp+0BCh+Src]
.text:00408A15                 shl     esi, 2
.text:00408A18                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00408A1C                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00408A20                 call    memcpy
.text:00408A25                 mov     [esp+0BCh+Src], eax
.text:00408A2C                 test    eax, eax
.text:00408A2E                 jz      loc_407981
.text:00408A34                 mov     ebx, [esp+0BCh+var_28]
.text:00408A3B                 mov     esi, [esp+0BCh+var_24]
.text:00408A42                 add     ebx, ebx
.text:00408A44                 mov     [esp+0BCh+var_28], ebx
.text:00408A4B                 mov     ecx, ebx
.text:00408A4D                 sub     ebx, esi
.text:00408A4F                 cmp     ebx, edi
.text:00408A51                 jb      short loc_4089E1
.text:00408A53
.text:00408A53 loc_408A53:                             ; CODE XREF: sub_407200+17DD↑j
.text:00408A53                 mov     ecx, [esp+0BCh+var_60]
.text:00408A57                 mov     eax, [esp+0BCh+var_64]
.text:00408A5B                 cmp     ecx, eax
.text:00408A5D                 ja      loc_408B13
.text:00408A63                 mov     ebx, [esp+0BCh+Src]
.text:00408A6A
.text:00408A6A loc_408A6A:                             ; CODE XREF: sub_407200+18C8↓j
.text:00408A6A                 mov     eax, [esp+0BCh+var_68]
.text:00408A6E                 mov     edi, [eax+ecx*4]
.text:00408A71                 mov     [ebx+esi*4], edi
.text:00408A74                 mov     edx, [esp+0BCh+var_6C]
.text:00408A78                 mov     edi, [esp+0BCh+var_24]
.text:00408A7F                 mov     ebx, [esp+0BCh+Src]
.text:00408A86                 mov     esi, [edx+ecx*4]
.text:00408A89                 inc     edi
.text:00408A8A                 mov     [esp+0BCh+var_24], edi
.text:00408A91                 mov     [ebx+edi*4], esi
.text:00408A94                 mov     edi, [esp+0BCh+var_24]
.text:00408A9B                 mov     eax, [esp+0BCh+var_78]
.text:00408A9F                 mov     ebx, [esp+0BCh+Src]
.text:00408AA6                 inc     edi
.text:00408AA7                 mov     [esp+0BCh+var_24], edi
.text:00408AAE                 mov     esi, [eax+ecx*4]
.text:00408AB1                 inc     ecx
.text:00408AB2                 mov     [ebx+edi*4], esi
.text:00408AB5                 mov     esi, [esp+0BCh+var_24]
.text:00408ABC                 inc     esi
.text:00408ABD                 cmp     ecx, [esp+0BCh+var_64]
.text:00408AC1                 mov     [esp+0BCh+var_24], esi
.text:00408AC8                 jbe     short loc_408A6A
.text:00408ACA
.text:00408ACA loc_408ACA:                             ; CODE XREF: sub_407200+191A↓j
.text:00408ACA                 mov     eax, [esp+0BCh+var_60]
.text:00408ACE                 mov     [ebx+esi*4], eax
.text:00408AD1                 mov     edi, [esp+0BCh+var_24]
.text:00408AD8                 mov     edx, [esp+0BCh+Src]
.text:00408ADF                 mov     esi, [esp+0BCh+var_64]
.text:00408AE3                 inc     edi
.text:00408AE4                 mov     [esp+0BCh+var_24], edi
.text:00408AEB                 mov     [edx+edi*4], esi
.text:00408AEE                 mov     ebx, [esp+0BCh+var_4C]
.text:00408AF2                 mov     ecx, [esp+0BCh+var_24]
.text:00408AF9                 add     ebx, ebp
.text:00408AFB                 mov     ebp, [esp+0BCh+Src]
.text:00408B02                 inc     ecx
.text:00408B03                 mov     [esp+0BCh+var_24], ecx
.text:00408B0A                 mov     [ebp+ecx*4+0], ebx
.text:00408B0E                 jmp     loc_408554
.text:00408B13 ; ---------------------------------------------------------------------------
.text:00408B13
.text:00408B13 loc_408B13:                             ; CODE XREF: sub_407200+185D↑j
.text:00408B13                 mov     ebx, [esp+0BCh+Src]
.text:00408B1A                 jmp     short loc_408ACA
.text:00408B1C ; ---------------------------------------------------------------------------
.text:00408B1C
.text:00408B1C loc_408B1C:                             ; DATA XREF: .text:004071BC↑o
.text:00408B1C                 jmp     loc_4081FD
.text:00408B21 ; ---------------------------------------------------------------------------
.text:00408B21
.text:00408B21 loc_408B21:                             ; DATA XREF: .text:004071B8↑o
.text:00408B21                 jmp     loc_40819A
.text:00408B26 ; ---------------------------------------------------------------------------
.text:00408B26
.text:00408B26 loc_408B26:                             ; DATA XREF: .text:004071B0↑o
.text:00408B26                 mov     eax, [esp+0BCh+var_38]
.text:00408B2D                 cmp     [esp+0BCh+var_44], eax
.text:00408B31                 jz      loc_407EA2
.text:00408B37                 jmp     loc_407652
.text:00408B37 ; ---------------------------------------------------------------------------
.text:00408B3C                 align 10h
.text:00408B40
.text:00408B40 loc_408B40:                             ; DATA XREF: .text:004071AC↑o
.text:00408B40                 mov     ecx, [esp+0BCh+arg_8]
.text:00408B47                 test    ecx, ecx
.text:00408B49                 jz      short loc_408B70
.text:00408B4B                 mov     ebx, [esp+0BCh+arg_4]
.text:00408B52                 cmp     [esp+0BCh+var_44], ebx
.text:00408B56
.text:00408B56 loc_408B56:                             ; CODE XREF: sub_407200+197B↓j
.text:00408B56                 jz      loc_407DD0
.text:00408B5C                 mov     edi, [esp+0BCh+arg_10]
.text:00408B63                 test    edi, edi
.text:00408B65
.text:00408B65 loc_408B65:                             ; CODE XREF: sub_407200+19D7↓j
.text:00408B65                 jz      loc_407DD0
.text:00408B6B                 jmp     loc_407652
.text:00408B70 ; ---------------------------------------------------------------------------
.text:00408B70
.text:00408B70 loc_408B70:                             ; CODE XREF: sub_407200+1949↑j
.text:00408B70                 mov     esi, [esp+0BCh+arg_C]
.text:00408B77                 cmp     [esp+0BCh+var_44], esi
.text:00408B7B                 jmp     short loc_408B56
.text:00408B7D ; ---------------------------------------------------------------------------
.text:00408B7D
.text:00408B7D loc_408B7D:                             ; DATA XREF: .text:004071A8↑o
.text:00408B7D                 mov     ebx, [esp+0BCh+var_38]
.text:00408B84                 cmp     [esp+0BCh+var_44], ebx
.text:00408B88                 jz      short loc_408BCC
.text:00408B8A                 mov     edi, [esp+0BCh+var_34]
.text:00408B91                 cmp     [esp+0BCh+var_44], edi
.text:00408B95                 jz      short loc_408BC0
.text:00408B97                 mov     edx, [esp+0BCh+var_44]
.text:00408B9B                 cmp     byte ptr [edx], 0Ah
.text:00408B9E
.text:00408B9E loc_408B9E:                             ; CODE XREF: sub_407200+19CA↓j
.text:00408B9E                                         ; sub_407200+1A14↓j
.text:00408B9E                 jnz     loc_407652
.text:00408BA4                 mov     ebp, [esp+0BCh+arg_0]
.text:00408BAB                 test    byte ptr [ebp+1Ch], 80h
.text:00408BAF                 jnz     loc_407A2B      ; jumptable 00407477 case 0
.text:00408BAF                                         ; jumptable 00407DF6 case 0
.text:00408BAF                                         ; jumptable 00407EC8 case 0
.text:00408BB5                 jmp     loc_407652
.text:00408BB5 ; ---------------------------------------------------------------------------
.text:00408BBA                 align 10h
.text:00408BC0
.text:00408BC0 loc_408BC0:                             ; CODE XREF: sub_407200+1995↑j
.text:00408BC0                 mov     eax, [esp+0BCh+arg_C]
.text:00408BC7                 cmp     byte ptr [eax], 0Ah
.text:00408BCA                 jmp     short loc_408B9E
.text:00408BCC ; ---------------------------------------------------------------------------
.text:00408BCC
.text:00408BCC loc_408BCC:                             ; CODE XREF: sub_407200+1988↑j
.text:00408BCC                 mov     esi, [esp+0BCh+arg_0]
.text:00408BD3                 test    byte ptr [esi+1Ch], 40h
.text:00408BD7                 jmp     short loc_408B65
.text:00408BD9 ; ---------------------------------------------------------------------------
.text:00408BD9
.text:00408BD9 loc_408BD9:                             ; DATA XREF: .text:004071A4↑o
.text:00408BD9                 mov     ebx, [esp+0BCh+arg_8]
.text:00408BE0                 test    ebx, ebx
.text:00408BE2                 jz      short loc_408C16
.text:00408BE4                 mov     edi, [esp+0BCh+arg_4]
.text:00408BEB                 cmp     [esp+0BCh+var_44], edi
.text:00408BEF
.text:00408BEF loc_408BEF:                             ; CODE XREF: sub_407200+1A21↓j
.text:00408BEF                 jz      short loc_408BFC
.text:00408BF1                 mov     edx, [esp+0BCh+arg_10]
.text:00408BF8                 test    edx, edx
.text:00408BFA                 jnz     short loc_408C0C
.text:00408BFC
.text:00408BFC loc_408BFC:                             ; CODE XREF: sub_407200:loc_408BEF↑j
.text:00408BFC                 mov     ebp, [esp+0BCh+arg_0]
.text:00408C03                 test    byte ptr [ebp+1Ch], 20h
.text:00408C07                 jmp     loc_407CA4
.text:00408C0C ; ---------------------------------------------------------------------------
.text:00408C0C
.text:00408C0C loc_408C0C:                             ; CODE XREF: sub_407200+19FA↑j
.text:00408C0C                 mov     ecx, [esp+0BCh+var_44]
.text:00408C10                 cmp     byte ptr [ecx-1], 0Ah
.text:00408C14                 jmp     short loc_408B9E
.text:00408C16 ; ---------------------------------------------------------------------------
.text:00408C16
.text:00408C16 loc_408C16:                             ; CODE XREF: sub_407200+19E2↑j
.text:00408C16                 mov     eax, [esp+0BCh+arg_C]
.text:00408C1D                 cmp     [esp+0BCh+var_44], eax
.text:00408C21                 jmp     short loc_408BEF
.text:00408C23 ; ---------------------------------------------------------------------------
.text:00408C23
.text:00408C23 loc_408C23:                             ; DATA XREF: .text:004071A0↑o
.text:00408C23                 mov     eax, [esp+0BCh+var_4C]
.text:00408C27                 mov     ecx, [esp+0BCh+var_68]
.text:00408C2B                 movzx   esi, byte ptr [eax]
.text:00408C2E                 inc     [esp+0BCh+var_4C]
.text:00408C32                 mov     edi, [ecx+esi*4]
.text:00408C35                 mov     [esp+0BCh+var_A4], esi
.text:00408C39                 cmp     edi, offset unk_41B7B0
.text:00408C3F                 jz      loc_407652
.text:00408C45                 mov     ebp, [esp+0BCh+var_6C]
.text:00408C49                 mov     eax, [ebp+esi*4+0]
.text:00408C4D                 cmp     eax, offset unk_41B7B0
.text:00408C52                 jz      loc_407652
.text:00408C58                 mov     [esp+0BCh+var_A0], edi
.text:00408C5C                 mov     esi, [esp+0BCh+arg_8]
.text:00408C63                 xor     ecx, ecx
.text:00408C65                 test    esi, esi
.text:00408C67                 jz      short loc_408C7D
.text:00408C69                 cmp     [esp+0BCh+arg_4], edi
.text:00408C70                 ja      short loc_408C7D
.text:00408C72                 mov     edx, [esp+0BCh+var_34]
.text:00408C79                 cmp     edi, edx
.text:00408C7B                 jbe     short loc_408C82
.text:00408C7D
.text:00408C7D loc_408C7D:                             ; CODE XREF: sub_407200+1A67↑j
.text:00408C7D                                         ; sub_407200+1A70↑j
.text:00408C7D                 mov     ecx, 1
.text:00408C82
.text:00408C82 loc_408C82:                             ; CODE XREF: sub_407200+1A7B↑j
.text:00408C82                 mov     edi, [esp+0BCh+arg_8]
.text:00408C89                 xor     edx, edx
.text:00408C8B                 test    edi, edi
.text:00408C8D                 jz      short loc_408CA6
.text:00408C8F                 cmp     [esp+0BCh+arg_4], eax
.text:00408C96                 ja      short loc_408CA6
.text:00408C98                 cmp     eax, [esp+0BCh+var_34]
.text:00408C9F                 ja      short loc_408CA6
.text:00408CA1                 mov     edx, 1
.text:00408CA6
.text:00408CA6 loc_408CA6:                             ; CODE XREF: sub_407200+1A8D↑j
.text:00408CA6                                         ; sub_407200+1A96↑j ...
.text:00408CA6                 cmp     ecx, edx
.text:00408CA8                 mov     ebx, eax
.text:00408CAA                 jnz     short loc_408CB3
.text:00408CAC                 mov     ebx, [esp+0BCh+var_3C]
.text:00408CB3
.text:00408CB3 loc_408CB3:                             ; CODE XREF: sub_407200+1AAA↑j
.text:00408CB3                                         ; sub_407200+1B21↓j ...
.text:00408CB3                 cmp     [esp+0BCh+var_A0], ebx
.text:00408CB7                 jz      loc_408D86
.text:00408CBD
.text:00408CBD loc_408CBD:                             ; CODE XREF: sub_407200+1BAC↓j
.text:00408CBD                                         ; sub_407200+1BB5↓j
.text:00408CBD                 mov     eax, [esp+0BCh+var_48]
.text:00408CC1                 cmp     [esp+0BCh+var_44], eax
.text:00408CC5                 jz      loc_408D60
.text:00408CCB
.text:00408CCB loc_408CCB:                             ; CODE XREF: sub_407200+1B81↓j
.text:00408CCB                 mov     ecx, [esp+0BCh+var_44]
.text:00408CCF                 mov     ebp, [esp+0BCh+var_48]
.text:00408CD3                 mov     edx, [esp+0BCh+var_A0]
.text:00408CD7                 sub     ebp, ecx
.text:00408CD9                 mov     ecx, ebx
.text:00408CDB                 sub     ecx, edx
.text:00408CDD                 cmp     ebp, ecx
.text:00408CDF                 jle     short loc_408CE3
.text:00408CE1                 mov     ebp, ecx
.text:00408CE3
.text:00408CE3 loc_408CE3:                             ; CODE XREF: sub_407200+1ADF↑j
.text:00408CE3                 mov     esi, [esp+0BCh+var_58]
.text:00408CE7                 test    esi, esi
.text:00408CE9                 jz      short loc_408D4F
.text:00408CEB                 mov     [esp+0BCh+var_B4], ebp
.text:00408CEF                 mov     edx, [esp+0BCh+var_58]
.text:00408CF3                 mov     eax, [esp+0BCh+var_A0]
.text:00408CF7                 mov     edi, [esp+0BCh+var_44]
.text:00408CFB                 mov     [esp+0BCh+var_B0], edx
.text:00408CFF                 mov     [esp+0BCh+var_B8], eax
.text:00408D03                 mov     [esp+0BCh+Size], edi
.text:00408D06                 call    sub_4098C0
.text:00408D0B                 test    eax, eax
.text:00408D0D
.text:00408D0D loc_408D0D:                             ; CODE XREF: sub_407200+1B5E↓j
.text:00408D0D                 jnz     loc_407652
.text:00408D13                 add     [esp+0BCh+var_44], ebp
.text:00408D17                 add     [esp+0BCh+var_A0], ebp
.text:00408D1B                 mov     ebp, [esp+0BCh+var_8C]
.text:00408D1F                 test    ebp, ebp
.text:00408D21                 jnz     short loc_408CB3
.text:00408D23                 mov     [esp+0BCh+var_8C], 1
.text:00408D2B                 mov     eax, [esp+0BCh+var_60]
.text:00408D2F                 mov     ecx, [esp+0BCh+var_64]
.text:00408D33                 cmp     eax, ecx
.text:00408D35                 ja      loc_408CB3
.text:00408D3B
.text:00408D3B loc_408D3B:                             ; CODE XREF: sub_407200+1B48↓j
.text:00408D3B                 mov     esi, [esp+0BCh+var_78]
.text:00408D3F                 or      byte ptr [esi+eax*4], 18h
.text:00408D43                 inc     eax
.text:00408D44                 cmp     eax, [esp+0BCh+var_64]
.text:00408D48                 jbe     short loc_408D3B
.text:00408D4A                 jmp     loc_408CB3
.text:00408D4F ; ---------------------------------------------------------------------------
.text:00408D4F
.text:00408D4F loc_408D4F:                             ; CODE XREF: sub_407200+1AE9↑j
.text:00408D4F                 cld
.text:00408D50                 mov     esi, [esp+0BCh+var_44]
.text:00408D54                 cmp     ebp, ebp
.text:00408D56                 mov     edi, [esp+0BCh+var_A0]
.text:00408D5A                 mov     ecx, ebp
.text:00408D5C                 repe cmpsb
.text:00408D5E                 jmp     short loc_408D0D
.text:00408D60 ; ---------------------------------------------------------------------------
.text:00408D60
.text:00408D60 loc_408D60:                             ; CODE XREF: sub_407200+1AC5↑j
.text:00408D60                                         ; sub_407200+1B7F↓j
.text:00408D60                 mov     eax, [esp+0BCh+var_40]
.text:00408D64                 cmp     [esp+0BCh+var_48], eax
.text:00408D68                 jz      loc_407652
.text:00408D6E                 mov     [esp+0BCh+var_48], eax
.text:00408D72                 mov     edi, [esp+0BCh+arg_C]
.text:00408D79                 cmp     edi, eax
.text:00408D7B                 mov     [esp+0BCh+var_44], edi
.text:00408D7F                 jz      short loc_408D60
.text:00408D81                 jmp     loc_408CCB
.text:00408D86 ; ---------------------------------------------------------------------------
.text:00408D86
.text:00408D86 loc_408D86:                             ; CODE XREF: sub_407200+1AB7↑j
.text:00408D86                                         ; sub_407200+1BAA↓j
.text:00408D86                 cmp     ebx, [esp+0BCh+var_40]
.text:00408D8A                 jz      short loc_408DB1
.text:00408D8C                 mov     ebp, [esp+0BCh+var_A4]
.text:00408D90                 mov     ecx, [esp+0BCh+var_6C]
.text:00408D94                 mov     eax, [ecx+ebp*4]
.text:00408D97                 cmp     ebx, eax
.text:00408D99                 jz      short loc_408DB1
.text:00408D9B                 mov     esi, [esp+0BCh+arg_C]
.text:00408DA2                 mov     ebx, eax
.text:00408DA4                 cmp     esi, eax
.text:00408DA6                 mov     [esp+0BCh+var_A0], esi
.text:00408DAA                 jz      short loc_408D86
.text:00408DAC                 jmp     loc_408CBD
.text:00408DB1 ; ---------------------------------------------------------------------------
.text:00408DB1
.text:00408DB1 loc_408DB1:                             ; CODE XREF: sub_407200+1B8A↑j
.text:00408DB1                                         ; sub_407200+1B99↑j
.text:00408DB1                 cmp     [esp+0BCh+var_A0], ebx
.text:00408DB5                 jnz     loc_408CBD
.text:00408DBB                 jmp     loc_407BDE
.text:00408DC0 ; ---------------------------------------------------------------------------
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: sub_407200+A04↑j
.text:00408DC0                                         ; DATA XREF: .text:jpt_407C04↑o
.text:00408DC0                 mov     esi, [esp+0BCh+var_4C] ; jumptable 00407C04 case 7
.text:00408DC4                 mov     ebx, [esp+0BCh+var_78]
.text:00408DC8                 movzx   edx, byte ptr [esi]
.text:00408DCB                 test    byte ptr [ebx+edx*4], 3
.text:00408DCF                 jz      loc_4091B7
.text:00408DD5                 mov     edi, [esp+0BCh+var_6C]
.text:00408DD9                 mov     eax, [edi+edx*4]
.text:00408DDC                 cmp     eax, offset unk_41B7B0
.text:00408DE1                 jz      loc_4091AE
.text:00408DE7
.text:00408DE7 loc_408DE7:                             ; CODE XREF: sub_407200+1FB2↓j
.text:00408DE7                                         ; sub_407200+1FBF↓j
.text:00408DE7                 mov     ecx, [esp+0BCh+var_74]
.text:00408DEB                 mov     edi, [esp+0BCh+var_6C]
.text:00408DEF                 mov     ebx, [esp+0BCh+var_78]
.text:00408DF3                 mov     [ecx+edx*4], eax
.text:00408DF6                 mov     edx, [esp+0BCh+var_4C]
.text:00408DFA                 mov     eax, [esp+0BCh+var_44]
.text:00408DFE                 movzx   ebp, byte ptr [edx]
.text:00408E01                 mov     [edi+ebp*4], eax
.text:00408E04                 movzx   esi, byte ptr [edx]
.text:00408E07                 and     byte ptr [ebx+esi*4], 0FBh
.text:00408E0B                 mov     [esp+0BCh+var_8C], 0
.text:00408E13                 mov     ecx, [esp+0BCh+var_64]
.text:00408E17                 cmp     [esp+0BCh+var_60], ecx
.text:00408E1B                 jz      loc_409196
.text:00408E21                 mov     ebx, [esp+0BCh+var_4C]
.text:00408E25                 movzx   ecx, byte ptr [ebx]
.text:00408E28                 mov     dl, cl
.text:00408E2A                 dec     dl
.text:00408E2C                 jz      short loc_408E55
.text:00408E2E                 mov     esi, [esp+0BCh+var_78]
.text:00408E32                 movzx   edi, dl
.text:00408E35                 test    byte ptr [esi+edi*4], 4
.text:00408E39                 jnz     short loc_408E4D
.text:00408E3B
.text:00408E3B loc_408E3B:                             ; CODE XREF: sub_407200+1C4B↓j
.text:00408E3B                 dec     dl
.text:00408E3D                 jz      short loc_408E55
.text:00408E3F                 mov     ebp, [esp+0BCh+var_78]
.text:00408E43                 movzx   ebx, dl
.text:00408E46                 test    byte ptr [ebp+ebx*4+0], 4
.text:00408E4B                 jz      short loc_408E3B
.text:00408E4D
.text:00408E4D loc_408E4D:                             ; CODE XREF: sub_407200+1C39↑j
.text:00408E4D                 test    dl, dl
.text:00408E4F                 jnz     loc_40918A
.text:00408E55
.text:00408E55 loc_408E55:                             ; CODE XREF: sub_407200+1C2C↑j
.text:00408E55                                         ; sub_407200+1C3D↑j
.text:00408E55                 mov     [esp+0BCh+var_60], 101h
.text:00408E5D                 mov     [esp+0BCh+var_64], 100h
.text:00408E65
.text:00408E65 loc_408E65:                             ; CODE XREF: sub_407200+1F91↓j
.text:00408E65                                         ; sub_407200+1FA9↓j
.text:00408E65                 movzx   edx, cl
.text:00408E68                 mov     ecx, [esp+0BCh+var_78]
.text:00408E6C                 test    byte ptr [ecx+edx*4], 8
.text:00408E70                 jz      short loc_408EA5
.text:00408E72                 mov     esi, [esp+0BCh+var_4C]
.text:00408E76                 mov     edi, [esp+0BCh+var_4C]
.text:00408E7A                 dec     esi
.text:00408E7B                 cmp     [esp+0BCh+var_54], esi
.text:00408E7F                 lea     ecx, [edi+2]
.text:00408E82                 jz      short loc_408EA5
.text:00408E84
.text:00408E84 loc_408E84:                             ; CODE XREF: sub_407200+1CB0↓j
.text:00408E84                                         ; sub_407200+1D01↓j ...
.text:00408E84                 mov     [esp+0BCh+var_4C], ecx
.text:00408E88                 mov     ebp, [esp+0BCh+var_50]
.text:00408E8C                 mov     eax, offset loc_407479
.text:00408E91                 cmp     ecx, ebp
.text:00408E93                 jz      loc_407477
.text:00408E99                 movzx   ebx, byte ptr [ecx]
.text:00408E9C                 inc     [esp+0BCh+var_4C]
.text:00408EA0                 jmp     loc_407470
.text:00408EA5 ; ---------------------------------------------------------------------------
.text:00408EA5
.text:00408EA5 loc_408EA5:                             ; CODE XREF: sub_407200+1C70↑j
.text:00408EA5                                         ; sub_407200+1C82↑j
.text:00408EA5                 mov     ecx, [esp+0BCh+var_4C]
.text:00408EA9                 add     ecx, 2
.text:00408EAC                 cmp     ecx, [esp+0BCh+var_50]
.text:00408EB0                 jnb     short loc_408E84
.text:00408EB2                 mov     [esp+0BCh+var_30], ecx
.text:00408EB9                 mov     ebx, [esp+0BCh+var_4C]
.text:00408EBD                 xor     ebp, ebp
.text:00408EBF                 mov     [esp+0BCh+var_97], 0
.text:00408EC4                 mov     edx, ebx
.text:00408EC6                 add     edx, 3
.text:00408EC9                 movzx   eax, byte ptr [ebx+2]
.text:00408ECD                 mov     [esp+0BCh+var_30], edx
.text:00408ED4                 cmp     eax, 13h
.text:00408ED7                 ja      loc_40917A
.text:00408EDD                 cmp     eax, 11h
.text:00408EE0                 jnb     loc_409143
.text:00408EE6                 cmp     eax, 0Dh
.text:00408EE9                 jz      loc_409143
.text:00408EEF
.text:00408EEF loc_408EEF:                             ; CODE XREF: sub_407200+1F65↓j
.text:00408EEF                                         ; sub_407200+1F75↓j ...
.text:00408EEF                 mov     ebx, [esp+0BCh+var_30]
.text:00408EF6                 add     ebx, ebp
.text:00408EF8                 test    ebp, ebp
.text:00408EFA                 mov     [esp+0BCh+var_30], ebx
.text:00408F01                 jns     short loc_408E84
.text:00408F03                 cmp     byte ptr [ebx], 0Fh
.text:00408F06                 jnz     loc_408E84
.text:00408F0C                 cmp     byte ptr [ebx+3], 6
.text:00408F10                 jnz     loc_408E84
.text:00408F16                 movzx   eax, byte ptr [ebx+4]
.text:00408F1A                 mov     ebp, [esp+0BCh+var_4C]
.text:00408F1E                 cmp     al, [ebp+0]
.text:00408F21                 jnz     loc_408E84
.text:00408F27                 mov     ecx, [esp+0BCh+var_78]
.text:00408F2B                 movzx   edx, al
.text:00408F2E                 movzx   eax, byte ptr [ecx+edx*4]
.text:00408F32                 test    al, 10h
.text:00408F34                 jz      short loc_408F88
.text:00408F36                 and     al, 0EFh
.text:00408F38                 mov     [ecx+edx*4], al
.text:00408F3B                 mov     eax, [esp+0BCh+var_4C]
.text:00408F3F                 movzx   ecx, byte ptr [eax]
.text:00408F42                 movzx   esi, byte ptr [eax+1]
.text:00408F46                 lea     edx, [esi+ecx]
.text:00408F49                 cmp     ecx, edx
.text:00408F4B                 jnb     short loc_408F81
.text:00408F4D
.text:00408F4D loc_408F4D:                             ; CODE XREF: sub_407200+1D7F↓j
.text:00408F4D                 mov     edx, [esp+0BCh+var_70]
.text:00408F51                 mov     ebx, [esp+0BCh+var_68]
.text:00408F55                 mov     ebp, [esp+0BCh+var_74]
.text:00408F59                 mov     edi, [edx+ecx*4]
.text:00408F5C                 mov     [ebx+ecx*4], edi
.text:00408F5F                 mov     edx, [ebp+ecx*4+0]
.text:00408F63                 cmp     edx, edi
.text:00408F65                 jb      short loc_408F6E
.text:00408F67                 mov     eax, [esp+0BCh+var_6C]
.text:00408F6B                 mov     [eax+ecx*4], edx
.text:00408F6E
.text:00408F6E loc_408F6E:                             ; CODE XREF: sub_407200+1D65↑j
.text:00408F6E                 mov     ebp, [esp+0BCh+var_4C]
.text:00408F72                 inc     ecx
.text:00408F73                 movzx   esi, byte ptr [ebp+0]
.text:00408F77                 movzx   edi, byte ptr [ebp+1]
.text:00408F7B                 add     esi, edi
.text:00408F7D                 cmp     ecx, esi
.text:00408F7F                 jb      short loc_408F4D
.text:00408F81
.text:00408F81 loc_408F81:                             ; CODE XREF: sub_407200+1D4B↑j
.text:00408F81                 mov     ebx, [esp+0BCh+var_30]
.text:00408F88
.text:00408F88 loc_408F88:                             ; CODE XREF: sub_407200+1D34↑j
.text:00408F88                 mov     esi, ebx
.text:00408F8A                 mov     eax, [esp+0BCh+var_60]
.text:00408F8E                 inc     ebx
.text:00408F8F                 mov     [esp+0BCh+var_30], ebx
.text:00408F96                 lea     ecx, [esi+3]
.text:00408F99                 mov     edi, [esp+0BCh+var_28]
.text:00408FA0                 movsx   edx, byte ptr [ebx+1]
.text:00408FA4                 movzx   ebp, byte ptr [esi+1]
.text:00408FA8                 mov     esi, [esp+0BCh+var_24]
.text:00408FAF                 mov     [esp+0BCh+var_30], ecx
.text:00408FB6                 mov     ecx, [esp+0BCh+var_64]
.text:00408FBA                 shl     edx, 8
.text:00408FBD                 add     ebp, edx
.text:00408FBF                 mov     edx, edi
.text:00408FC1                 sub     ecx, eax
.text:00408FC3                 lea     ebx, [ecx+ecx]
.text:00408FC6                 sub     edx, esi
.text:00408FC8                 lea     eax, [ecx+ebx+7]
.text:00408FCC                 cmp     edx, eax
.text:00408FCE                 jnb     short loc_409048
.text:00408FD0                 mov     [esp+0BCh+var_9C], eax
.text:00408FD4
.text:00408FD4 loc_408FD4:                             ; CODE XREF: sub_407200+1E46↓j
.text:00408FD4                 mov     edx, dword_41A040
.text:00408FDA                 lea     esi, [edx+edx*8]
.text:00408FDD                 lea     ebx, [edx+esi*2]
.text:00408FE0                 cmp     edi, ebx
.text:00408FE2                 ja      loc_407981
.text:00408FE8                 lea     esi, ds:0[edi*8]
.text:00408FEF                 mov     [esp+0BCh+Size], esi ; Size
.text:00408FF2                 call    malloc
.text:00408FF7                 mov     [esp+0BCh+Size], eax ; void *
.text:00408FFA                 mov     ebx, [esp+0BCh+var_28]
.text:00409001                 mov     ecx, [esp+0BCh+Src]
.text:00409008                 shl     ebx, 2
.text:0040900B                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040900F                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:00409013                 call    memcpy
.text:00409018                 mov     [esp+0BCh+Src], eax
.text:0040901F                 test    eax, eax
.text:00409021                 jz      loc_407981
.text:00409027                 mov     edx, [esp+0BCh+var_28]
.text:0040902E                 mov     esi, [esp+0BCh+var_24]
.text:00409035                 add     edx, edx
.text:00409037                 mov     [esp+0BCh+var_28], edx
.text:0040903E                 mov     edi, edx
.text:00409040                 sub     edx, esi
.text:00409042                 cmp     edx, [esp+0BCh+var_9C]
.text:00409046                 jb      short loc_408FD4
.text:00409048
.text:00409048 loc_409048:                             ; CODE XREF: sub_407200+1DCE↑j
.text:00409048                 mov     ecx, [esp+0BCh+var_60]
.text:0040904C                 mov     eax, [esp+0BCh+var_64]
.text:00409050                 cmp     ecx, eax
.text:00409052                 ja      loc_409137
.text:00409058                 mov     ebx, [esp+0BCh+Src]
.text:0040905F
.text:0040905F loc_40905F:                             ; CODE XREF: sub_407200+1EBD↓j
.text:0040905F                 mov     eax, [esp+0BCh+var_68]
.text:00409063                 mov     edi, [eax+ecx*4]
.text:00409066                 mov     [ebx+esi*4], edi
.text:00409069                 mov     edx, [esp+0BCh+var_6C]
.text:0040906D                 mov     edi, [esp+0BCh+var_24]
.text:00409074                 mov     ebx, [esp+0BCh+Src]
.text:0040907B                 mov     esi, [edx+ecx*4]
.text:0040907E                 inc     edi
.text:0040907F                 mov     [esp+0BCh+var_24], edi
.text:00409086                 mov     [ebx+edi*4], esi
.text:00409089                 mov     edi, [esp+0BCh+var_24]
.text:00409090                 mov     eax, [esp+0BCh+var_78]
.text:00409094                 mov     ebx, [esp+0BCh+Src]
.text:0040909B                 inc     edi
.text:0040909C                 mov     [esp+0BCh+var_24], edi
.text:004090A3                 mov     esi, [eax+ecx*4]
.text:004090A6                 inc     ecx
.text:004090A7                 mov     [ebx+edi*4], esi
.text:004090AA                 mov     esi, [esp+0BCh+var_24]
.text:004090B1                 inc     esi
.text:004090B2                 cmp     ecx, [esp+0BCh+var_64]
.text:004090B6                 mov     [esp+0BCh+var_24], esi
.text:004090BD                 jbe     short loc_40905F
.text:004090BF
.text:004090BF loc_4090BF:                             ; CODE XREF: sub_407200+1F3E↓j
.text:004090BF                 mov     edi, [esp+0BCh+var_60]
.text:004090C3                 mov     [ebx+esi*4], edi
.text:004090C6                 mov     eax, [esp+0BCh+var_24]
.text:004090CD                 mov     ecx, [esp+0BCh+Src]
.text:004090D4                 mov     edx, [esp+0BCh+var_64]
.text:004090D8                 inc     eax
.text:004090D9                 mov     [esp+0BCh+var_24], eax
.text:004090E0                 mov     [ecx+eax*4], edx
.text:004090E3                 mov     edi, [esp+0BCh+var_24]
.text:004090EA                 mov     esi, [esp+0BCh+var_30]
.text:004090F1                 mov     edx, [esp+0BCh+Src]
.text:004090F8                 inc     edi
.text:004090F9                 add     ebp, esi
.text:004090FB                 mov     [esp+0BCh+var_24], edi
.text:00409102                 mov     [edx+edi*4], ebp
.text:00409105                 mov     ecx, [esp+0BCh+var_24]
.text:0040910C                 mov     ebp, [esp+0BCh+Src]
.text:00409113                 mov     ebx, [esp+0BCh+var_44]
.text:00409117                 inc     ecx
.text:00409118                 mov     [esp+0BCh+var_24], ecx
.text:0040911F                 mov     [ebp+ecx*4+0], ebx
.text:00409123                 mov     esi, [esp+0BCh+var_24]
.text:0040912A                 inc     esi
.text:0040912B                 mov     [esp+0BCh+var_24], esi
.text:00409132                 jmp     loc_407530
.text:00409137 ; ---------------------------------------------------------------------------
.text:00409137
.text:00409137 loc_409137:                             ; CODE XREF: sub_407200+1E52↑j
.text:00409137                 mov     ebx, [esp+0BCh+Src]
.text:0040913E                 jmp     loc_4090BF
.text:00409143 ; ---------------------------------------------------------------------------
.text:00409143
.text:00409143 loc_409143:                             ; CODE XREF: sub_407200+1CE0↑j
.text:00409143                                         ; sub_407200+1CE9↑j ...
.text:00409143                 mov     edx, [esp+0BCh+var_30]
.text:0040914A                 lea     eax, [edx+2]
.text:0040914D                 movsx   esi, byte ptr [edx+1]
.text:00409151                 movzx   ebp, byte ptr [edx]
.text:00409154                 mov     [esp+0BCh+var_30], eax
.text:0040915B                 shl     esi, 8
.text:0040915E                 add     ebp, esi
.text:00409160                 cmp     [esp+0BCh+var_97], 0
.text:00409165                 jz      loc_408EEF
.text:0040916B                 lea     edi, [edx+4]
.text:0040916E                 mov     [esp+0BCh+var_30], edi
.text:00409175                 jmp     loc_408EEF
.text:0040917A ; ---------------------------------------------------------------------------
.text:0040917A
.text:0040917A loc_40917A:                             ; CODE XREF: sub_407200+1CD7↑j
.text:0040917A                 cmp     eax, 16h
.text:0040917D                 jnz     loc_408EEF
.text:00409183                 mov     [esp+0BCh+var_97], 1
.text:00409188                 jmp     short loc_409143
.text:0040918A ; ---------------------------------------------------------------------------
.text:0040918A
.text:0040918A loc_40918A:                             ; CODE XREF: sub_407200+1C4F↑j
.text:0040918A                 movzx   eax, dl
.text:0040918D                 mov     [esp+0BCh+var_64], eax
.text:00409191                 jmp     loc_408E65
.text:00409196 ; ---------------------------------------------------------------------------
.text:00409196
.text:00409196 loc_409196:                             ; CODE XREF: sub_407200+1C1B↑j
.text:00409196                 mov     [esp+0BCh+var_60], 101h
.text:0040919E                 mov     [esp+0BCh+var_64], 100h
.text:004091A6                 movzx   ecx, byte ptr [edx]
.text:004091A9                 jmp     loc_408E65
.text:004091AE ; ---------------------------------------------------------------------------
.text:004091AE
.text:004091AE loc_4091AE:                             ; CODE XREF: sub_407200+1BE1↑j
.text:004091AE                 mov     eax, [esp+0BCh+var_44]
.text:004091B2                 jmp     loc_408DE7
.text:004091B7 ; ---------------------------------------------------------------------------
.text:004091B7
.text:004091B7 loc_4091B7:                             ; CODE XREF: sub_407200+1BCF↑j
.text:004091B7                 mov     ebp, [esp+0BCh+var_6C]
.text:004091BB                 mov     eax, [ebp+edx*4+0]
.text:004091BF                 jmp     loc_408DE7
.text:004091C4 ; ---------------------------------------------------------------------------
.text:004091C4
.text:004091C4 loc_4091C4:                             ; CODE XREF: sub_407200+A04↑j
.text:004091C4                                         ; DATA XREF: .text:jpt_407C04↑o
.text:004091C4                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 00407C04 case 6
.text:004091C8                 mov     edx, [esp+0BCh+var_78]
.text:004091CC                 mov     [esp+0BCh+var_30], ebx
.text:004091D3                 movzx   ecx, byte ptr [ebx]
.text:004091D6                 movzx   esi, cl
.text:004091D9                 movzx   ebp, byte ptr [edx+esi*4]
.text:004091DD                 and     ebp, 3
.text:004091E0                 cmp     ebp, 3
.text:004091E3                 jz      loc_409274
.text:004091E9
.text:004091E9 loc_4091E9:                             ; CODE XREF: sub_407200+20A6↓j
.text:004091E9                 mov     esi, [esp+0BCh+var_78]
.text:004091ED                 movzx   edx, cl
.text:004091F0                 test    byte ptr [esi+edx*4], 3
.text:004091F4                 jz      short loc_40926B
.text:004091F6                 mov     ebx, [esp+0BCh+var_68]
.text:004091FA                 mov     eax, [ebx+edx*4]
.text:004091FD                 cmp     eax, offset unk_41B7B0
.text:00409202                 jz      short loc_409265
.text:00409204
.text:00409204 loc_409204:                             ; CODE XREF: sub_407200+2069↓j
.text:00409204                                         ; sub_407200+2072↓j
.text:00409204                 mov     ebp, [esp+0BCh+var_70]
.text:00409208                 mov     ebx, [esp+0BCh+var_68]
.text:0040920C                 mov     ecx, [esp+0BCh+var_78]
.text:00409210                 mov     [ebp+edx*4+0], eax
.text:00409214                 mov     ebp, [esp+0BCh+var_4C]
.text:00409218                 mov     eax, [esp+0BCh+var_44]
.text:0040921C                 movzx   edi, byte ptr [ebp+0]
.text:00409220                 mov     [ebx+edi*4], eax
.text:00409223                 movzx   esi, byte ptr [ebp+0]
.text:00409227                 or      byte ptr [ecx+esi*4], 4
.text:0040922B                 movzx   edx, byte ptr [ebp+0]
.text:0040922F                 and     byte ptr [ecx+edx*4], 0F7h
.text:00409233                 mov     [esp+0BCh+var_8C], 0
.text:0040923B                 movzx   esi, byte ptr [ebp+0]
.text:0040923F                 cmp     [esp+0BCh+var_60], 101h
.text:00409247                 mov     [esp+0BCh+var_64], esi
.text:0040924B                 jz      short loc_40925F
.text:0040924D
.text:0040924D loc_40924D:                             ; CODE XREF: sub_407200+2063↓j
.text:0040924D                 add     [esp+0BCh+var_4C], 2
.text:00409252                 mov     ecx, [esp+0BCh+var_4C]
.text:00409256                 mov     [esp+0BCh+var_54], ecx
.text:0040925A                 jmp     loc_407DD0
.text:0040925F ; ---------------------------------------------------------------------------
.text:0040925F
.text:0040925F loc_40925F:                             ; CODE XREF: sub_407200+204B↑j
.text:0040925F                 mov     [esp+0BCh+var_60], esi
.text:00409263                 jmp     short loc_40924D
.text:00409265 ; ---------------------------------------------------------------------------
.text:00409265
.text:00409265 loc_409265:                             ; CODE XREF: sub_407200+2002↑j
.text:00409265                 mov     eax, [esp+0BCh+var_44]
.text:00409269                 jmp     short loc_409204
.text:0040926B ; ---------------------------------------------------------------------------
.text:0040926B
.text:0040926B loc_40926B:                             ; CODE XREF: sub_407200+1FF4↑j
.text:0040926B                 mov     edi, [esp+0BCh+var_68]
.text:0040926F                 mov     eax, [edi+edx*4]
.text:00409272                 jmp     short loc_409204
.text:00409274 ; ---------------------------------------------------------------------------
.text:00409274
.text:00409274 loc_409274:                             ; CODE XREF: sub_407200+1FE3↑j
.text:00409274                 mov     [esp+0BCh+var_B4], edx
.text:00409278                 mov     eax, [esp+0BCh+var_50]
.text:0040927C                 lea     edx, [esp+0BCh+var_30]
.text:00409283                 mov     [esp+0BCh+Size], edx
.text:00409286                 mov     [esp+0BCh+var_B8], eax
.text:0040928A                 call    sub_409580
.text:0040928F                 mov     edi, [esp+0BCh+var_78]
.text:00409293                 mov     ebp, eax
.text:00409295                 and     ebp, 3
.text:00409298                 mov     ecx, [edi+esi*4]
.text:0040929B                 and     ecx, 0FFFFFFFCh
.text:0040929E                 or      ecx, ebp
.text:004092A0                 mov     [edi+esi*4], ecx
.text:004092A3                 movzx   ecx, byte ptr [ebx]
.text:004092A6                 jmp     loc_4091E9
.text:004092A6 ; ---------------------------------------------------------------------------
.text:004092AB                 align 10h
.text:004092B0
.text:004092B0 loc_4092B0:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:004092B0                                         ; sub_407200+BF6↑j ...
.text:004092B0                 mov     edx, [esp+0BCh+var_4C] ; jumptable 00407477 case 5
.text:004092B0                                         ; jumptable 00407DF6 case 5
.text:004092B0                                         ; jumptable 00407EC8 case 5
.text:004092B4                 mov     ebp, [esp+0BCh+var_48]
.text:004092B8                 cmp     byte ptr [edx-1], 5
.text:004092BC                 setz    [esp+0BCh+var_95]
.text:004092C1                 cmp     [esp+0BCh+var_44], ebp
.text:004092C5                 jz      loc_409380
.text:004092CB
.text:004092CB loc_4092CB:                             ; CODE XREF: sub_407200+21A1↓j
.text:004092CB                 mov     esi, [esp+0BCh+var_58]
.text:004092CF                 test    esi, esi
.text:004092D1                 jz      loc_40936F
.text:004092D7                 mov     ebx, [esp+0BCh+var_44]
.text:004092DB                 mov     ecx, [esp+0BCh+var_58]
.text:004092DF                 movzx   edi, byte ptr [ebx]
.text:004092E2                 movzx   ebx, byte ptr [edi+ecx]
.text:004092E6
.text:004092E6 loc_4092E6:                             ; CODE XREF: sub_407200+2177↓j
.text:004092E6                 mov     esi, [esp+0BCh+var_4C]
.text:004092EA                 movzx   eax, bl
.text:004092ED                 movzx   edx, byte ptr [esi]
.text:004092F0                 movzx   edi, dl
.text:004092F3                 shl     edi, 3
.text:004092F6                 mov     [esp+0BCh+var_96], dl
.text:004092FA                 cmp     eax, edi
.text:004092FC                 jnb     short loc_40931B
.text:004092FE                 mov     dl, bl
.text:00409300                 shr     dl, 3
.text:00409303                 movzx   ecx, dl
.text:00409306                 movzx   eax, byte ptr [ecx+esi+1]
.text:0040930B                 mov     ecx, ebx
.text:0040930D                 and     ecx, 7
.text:00409310                 sar     eax, cl
.text:00409312                 test    al, 1
.text:00409314                 jz      short loc_40931B
.text:00409316                 xor     [esp+0BCh+var_95], 1
.text:0040931B
.text:0040931B loc_40931B:                             ; CODE XREF: sub_407200+20FC↑j
.text:0040931B                                         ; sub_407200+2114↑j
.text:0040931B                 movzx   ebx, [esp+0BCh+var_96]
.text:00409320                 mov     ebp, [esp+0BCh+var_4C]
.text:00409324                 cmp     [esp+0BCh+var_95], 0
.text:00409329                 lea     esi, [ebx+ebp+1]
.text:0040932D                 mov     [esp+0BCh+var_4C], esi
.text:00409331                 jz      loc_407652
.text:00409337                 mov     edi, [esp+0BCh+var_8C]
.text:0040933B                 test    edi, edi
.text:0040933D                 jnz     loc_40801F
.text:00409343                 mov     [esp+0BCh+var_8C], 1
.text:0040934B                 mov     eax, [esp+0BCh+var_60]
.text:0040934F                 mov     edx, [esp+0BCh+var_64]
.text:00409353                 cmp     eax, edx
.text:00409355                 ja      loc_40801F
.text:0040935B
.text:0040935B loc_40935B:                             ; CODE XREF: sub_407200+2168↓j
.text:0040935B                 mov     ecx, [esp+0BCh+var_78]
.text:0040935F                 or      byte ptr [ecx+eax*4], 18h
.text:00409363                 inc     eax
.text:00409364                 cmp     eax, [esp+0BCh+var_64]
.text:00409368                 jbe     short loc_40935B
.text:0040936A                 jmp     loc_40801F
.text:0040936F ; ---------------------------------------------------------------------------
.text:0040936F
.text:0040936F loc_40936F:                             ; CODE XREF: sub_407200+20D1↑j
.text:0040936F                 mov     ebp, [esp+0BCh+var_44]
.text:00409373                 movzx   ebx, byte ptr [ebp+0]
.text:00409377                 jmp     loc_4092E6
.text:00409377 ; ---------------------------------------------------------------------------
.text:0040937C                 align 10h
.text:00409380
.text:00409380 loc_409380:                             ; CODE XREF: sub_407200+20C5↑j
.text:00409380                                         ; sub_407200+219F↓j
.text:00409380                 mov     ecx, [esp+0BCh+var_40]
.text:00409384                 cmp     [esp+0BCh+var_48], ecx
.text:00409388                 jz      loc_407652
.text:0040938E                 mov     [esp+0BCh+var_48], ecx
.text:00409392                 mov     eax, [esp+0BCh+arg_C]
.text:00409399                 cmp     eax, ecx
.text:0040939B                 mov     [esp+0BCh+var_44], eax
.text:0040939F                 jz      short loc_409380
.text:004093A1                 jmp     loc_4092CB
.text:004093A6 ; ---------------------------------------------------------------------------
.text:004093A6
.text:004093A6 loc_4093A6:                             ; CODE XREF: sub_407200:loc_407477↑j
.text:004093A6                                         ; sub_407200+BF6↑j ...
.text:004093A6                 jmp     loc_4092B0      ; jumptable 00407477 case 4
.text:004093A6                                         ; jumptable 00407DF6 case 4
.text:004093A6                                         ; jumptable 00407EC8 case 4
.text:004093AB ; ---------------------------------------------------------------------------
.text:004093AB
.text:004093AB loc_4093AB:                             ; CODE XREF: sub_407200+C88↑j
.text:004093AB                 mov     ebx, [esp+0BCh+var_34]
.text:004093B2                 movzx   eax, byte ptr [ebx-1]
.text:004093B6                 jmp     loc_407E95
.text:004093BB ; ---------------------------------------------------------------------------
.text:004093BB
.text:004093BB loc_4093BB:                             ; CODE XREF: sub_407200+C76↑j
.text:004093BB                 mov     edi, [esp+0BCh+arg_C]
.text:004093C2                 movzx   eax, byte ptr [edi]
.text:004093C5                 jmp     loc_407E95
.text:004093CA ; ---------------------------------------------------------------------------
.text:004093CA
.text:004093CA loc_4093CA:                             ; CODE XREF: sub_407200+C43↑j
.text:004093CA                 mov     esi, [esp+0BCh+var_34]
.text:004093D1                 movzx   eax, byte ptr [esi-1]
.text:004093D5                 jmp     loc_407E51
.text:004093DA ; ---------------------------------------------------------------------------
.text:004093DA
.text:004093DA loc_4093DA:                             ; CODE XREF: sub_407200+C33↑j
.text:004093DA                 mov     ebp, [esp+0BCh+arg_C]
.text:004093E1                 movzx   eax, byte ptr [ebp+0]
.text:004093E5                 jmp     loc_407E51
.text:004093EA ; ---------------------------------------------------------------------------
.text:004093EA
.text:004093EA loc_4093EA:                             ; CODE XREF: sub_407200+C01↑j
.text:004093EA                 mov     edx, [esp+0BCh+arg_C]
.text:004093F1                 cmp     [esp+0BCh+var_44], edx
.text:004093F5                 jmp     loc_407E12
.text:004093FA ; ---------------------------------------------------------------------------
.text:004093FA
.text:004093FA loc_4093FA:                             ; CODE XREF: sub_407200+AFB↑j
.text:004093FA                 mov     ebx, [esp+0BCh+arg_C]
.text:00409401                 cmp     [esp+0BCh+var_44], ebx
.text:00409405                 jmp     loc_407D0C
.text:0040940A ; ---------------------------------------------------------------------------
.text:0040940A
.text:0040940A loc_40940A:                             ; CODE XREF: sub_407200+993↑j
.text:0040940A                 mov     edi, [esp+0BCh+var_44]
.text:0040940E                 cmp     byte ptr [edi], 0
.text:00409411                 jmp     loc_407BA9
.text:00409416 ; ---------------------------------------------------------------------------
.text:00409416
.text:00409416 loc_409416:                             ; CODE XREF: sub_407200+964↑j
.text:00409416                 mov     edi, [esp+0BCh+var_44]
.text:0040941A                 cmp     byte ptr [edi], 0Ah
.text:0040941D                 jmp     loc_407B7A
.text:00409422 ; ---------------------------------------------------------------------------
.text:00409422
.text:00409422 loc_409422:                             ; CODE XREF: sub_407200+94B↑j
.text:00409422                                         ; sub_407200+2241↓j
.text:00409422                 mov     eax, [esp+0BCh+var_40]
.text:00409426                 cmp     [esp+0BCh+var_48], eax
.text:0040942A                 jz      loc_407652
.text:00409430                 mov     [esp+0BCh+var_48], eax
.text:00409434                 mov     ecx, [esp+0BCh+arg_C]
.text:0040943B                 cmp     ecx, eax
.text:0040943D                 mov     [esp+0BCh+var_44], ecx
.text:00409441                 jz      short loc_409422
.text:00409443                 jmp     loc_407B51
.text:00409448 ; ---------------------------------------------------------------------------
.text:00409448
.text:00409448 loc_409448:                             ; CODE XREF: sub_407200+21B↑j
.text:00409448                                         ; sub_407200+22F↑j
.text:00409448                 mov     edi, [esp+0BCh+arg_C]
.text:0040944F                 mov     esi, [esp+0BCh+arg_14]
.text:00409456                 mov     ecx, [esp+0BCh+arg_8]
.text:0040945D                 mov     ebp, [esp+0BCh+var_40]
.text:00409461                 add     edi, esi
.text:00409463                 sub     edi, ecx
.text:00409465                 mov     [esp+0BCh+var_44], edi
.text:00409469                 mov     [esp+0BCh+var_48], ebp
.text:0040946D                 jmp     loc_407454
.text:00409472 ; ---------------------------------------------------------------------------
.text:00409472
.text:00409472 loc_409472:                             ; CODE XREF: sub_407200+1F1↑j
.text:00409472                 mov     ebp, [esp+0BCh+arg_C]
.text:00409479                 mov     ebx, [esp+0BCh+arg_8]
.text:00409480                 mov     edi, [esp+0BCh+var_34]
.text:00409487                 add     esi, ebp
.text:00409489                 sub     esi, ebx
.text:0040948B                 mov     [esp+0BCh+var_3C], edi
.text:00409492                 jmp     loc_40740E
.text:00409497 ; ---------------------------------------------------------------------------
.text:00409497
.text:00409497 loc_409497:                             ; CODE XREF: sub_407200+B0↑j
.text:00409497                 mov     edi, [esp+0BCh+var_5C]
.text:0040949B                 shl     edi, 2
.text:0040949E                 mov     [esp+0BCh+Size], edi ; Size
.text:004094A1                 call    malloc
.text:004094A6                 mov     [esp+0BCh+var_68], eax
.text:004094AA                 mov     [esp+0BCh+Size], edi ; Size
.text:004094AD                 call    malloc
.text:004094B2                 mov     [esp+0BCh+var_6C], eax
.text:004094B6                 mov     [esp+0BCh+Size], edi ; Size
.text:004094B9                 call    malloc
.text:004094BE                 mov     [esp+0BCh+var_70], eax
.text:004094C2                 mov     [esp+0BCh+Size], edi ; Size
.text:004094C5                 call    malloc
.text:004094CA                 mov     [esp+0BCh+var_74], eax
.text:004094CE                 mov     [esp+0BCh+Size], edi ; Size
.text:004094D1                 call    malloc
.text:004094D6                 mov     [esp+0BCh+var_80], eax
.text:004094DA                 mov     [esp+0BCh+Size], edi ; Size
.text:004094DD                 call    malloc
.text:004094E2                 mov     [esp+0BCh+var_84], eax
.text:004094E6                 mov     [esp+0BCh+Size], edi ; Size
.text:004094E9                 call    malloc
.text:004094EE                 mov     [esp+0BCh+var_78], eax
.text:004094F2                 mov     [esp+0BCh+Size], edi ; Size
.text:004094F5                 call    malloc
.text:004094FA                 mov     [esp+0BCh+var_90], eax
.text:004094FE                 mov     [esp+0BCh+Size], edi ; Size
.text:00409501                 call    malloc
.text:00409506                 mov     [esp+0BCh+var_94], eax
.text:0040950A                 mov     ecx, [esp+0BCh+var_68]
.text:0040950E                 test    ecx, ecx
.text:00409510                 jz      loc_407981
.text:00409516                 mov     ebx, [esp+0BCh+var_6C]
.text:0040951A                 test    ebx, ebx
.text:0040951C                 jz      loc_407981
.text:00409522                 mov     edx, [esp+0BCh+var_70]
.text:00409526                 test    edx, edx
.text:00409528                 jz      loc_407981
.text:0040952E                 mov     ebp, [esp+0BCh+var_74]
.text:00409532                 test    ebp, ebp
.text:00409534                 jz      loc_407981
.text:0040953A                 mov     ecx, [esp+0BCh+var_78]
.text:0040953E                 test    ecx, ecx
.text:00409540                 jz      loc_407981
.text:00409546                 mov     edi, [esp+0BCh+var_80]
.text:0040954A                 test    edi, edi
.text:0040954C                 jz      loc_407981
.text:00409552                 mov     ebx, [esp+0BCh+var_84]
.text:00409556                 test    ebx, ebx
.text:00409558                 jz      loc_407981
.text:0040955E                 mov     edx, [esp+0BCh+var_90]
.text:00409562                 test    edx, edx
.text:00409564                 jz      loc_407981
.text:0040956A                 test    eax, eax
.text:0040956C                 jnz     loc_4072FE
.text:00409572                 jmp     loc_407981
.text:00409572 sub_407200      endp
.text:00409572
.text:00409572 ; ---------------------------------------------------------------------------
.text:00409577                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580
.text:00409580 sub_409580      proc near               ; CODE XREF: sub_407200+208A↑p
.text:00409580                                         ; sub_409730+CA↓p
.text:00409580
.text:00409580 var_2C          = dword ptr -2Ch
.text:00409580 var_28          = dword ptr -28h
.text:00409580 var_24          = dword ptr -24h
.text:00409580 var_14          = dword ptr -14h
.text:00409580 arg_0           = dword ptr  4
.text:00409580 arg_4           = dword ptr  8
.text:00409580 arg_8           = dword ptr  0Ch
.text:00409580
.text:00409580                 push    ebp
.text:00409581                 push    edi
.text:00409582                 push    esi
.text:00409583                 push    ebx
.text:00409584                 sub     esp, 1Ch
.text:00409587                 mov     ebp, [esp+2Ch+arg_0]
.text:0040958B                 mov     edi, [esp+2Ch+arg_4]
.text:0040958F                 mov     esi, [esp+2Ch+arg_8]
.text:00409593                 mov     eax, [ebp+0]
.text:00409596                 add     eax, 2
.text:00409599                 cmp     eax, edi
.text:0040959B                 mov     ecx, eax
.text:0040959D                 mov     [esp+2Ch+var_14], eax
.text:004095A1                 jnb     short loc_4095E3
.text:004095A3                 lea     esi, [esi+0]
.text:004095A9                 lea     edi, [edi+0]
.text:004095B0
.text:004095B0 loc_4095B0:                             ; CODE XREF: sub_409580+61↓j
.text:004095B0                 movzx   eax, byte ptr [ecx]
.text:004095B3                 cmp     eax, 7
.text:004095B6                 jz      loc_409693
.text:004095BC                 cmp     eax, 0Fh
.text:004095BF                 jz      short loc_4095F0
.text:004095C1                 mov     [esp+2Ch+var_24], esi
.text:004095C5                 lea     ebx, [esp+2Ch+var_14]
.text:004095C9                 mov     [esp+2Ch+var_28], edi
.text:004095CD                 mov     [esp+2Ch+var_2C], ebx
.text:004095D0                 call    sub_409730
.text:004095D5                 xor     edx, edx
.text:004095D7                 test    al, al
.text:004095D9                 jz      short loc_4095E5
.text:004095DB
.text:004095DB loc_4095DB:                             ; CODE XREF: sub_409580+8B↓j
.text:004095DB                                         ; sub_409580+BE↓j
.text:004095DB                 mov     ecx, [esp+2Ch+var_14]
.text:004095DF                 cmp     ecx, edi
.text:004095E1                 jb      short loc_4095B0
.text:004095E3
.text:004095E3 loc_4095E3:                             ; CODE XREF: sub_409580+21↑j
.text:004095E3                 xor     edx, edx
.text:004095E5
.text:004095E5 loc_4095E5:                             ; CODE XREF: sub_409580+59↑j
.text:004095E5                                         ; sub_409580+B8↓j ...
.text:004095E5                 add     esp, 1Ch
.text:004095E8                 mov     eax, edx
.text:004095EA                 pop     ebx
.text:004095EB                 pop     esi
.text:004095EC                 pop     edi
.text:004095ED                 pop     ebp
.text:004095EE                 retn
.text:004095EE ; ---------------------------------------------------------------------------
.text:004095EF                 align 10h
.text:004095F0
.text:004095F0 loc_4095F0:                             ; CODE XREF: sub_409580+3F↑j
.text:004095F0                 lea     edx, [ecx+1]
.text:004095F3                 mov     [esp+2Ch+var_14], edx
.text:004095F7                 movsx   eax, byte ptr [edx+1]
.text:004095FB                 lea     edx, [ecx+3]
.text:004095FE                 movzx   ebx, byte ptr [ecx+1]
.text:00409602                 mov     [esp+2Ch+var_14], edx
.text:00409606                 shl     eax, 8
.text:00409609                 add     ebx, eax
.text:0040960B                 js      short loc_4095DB
.text:0040960D                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00409612                 jz      short loc_409640
.text:00409614
.text:00409614 loc_409614:                             ; CODE XREF: sub_409580+E9↓j
.text:00409614                                         ; sub_409580+111↓j
.text:00409614                 movsx   ecx, byte ptr [edx-1]
.text:00409618                 movzx   ebx, byte ptr [edx-2]
.text:0040961C                 mov     [esp+2Ch+var_2C], edx
.text:0040961F                 mov     [esp+2Ch+var_24], esi
.text:00409623                 shl     ecx, 8
.text:00409626                 add     ebx, ecx
.text:00409628                 lea     ecx, [ebx+edx]
.text:0040962B                 mov     [esp+2Ch+var_28], ecx
.text:0040962F                 call    sub_4096B0
.text:00409634                 xor     edx, edx
.text:00409636                 test    al, al
.text:00409638                 jz      short loc_4095E5
.text:0040963A                 add     [esp+2Ch+var_14], ebx
.text:0040963E                 jmp     short loc_4095DB
.text:00409640 ; ---------------------------------------------------------------------------
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: sub_409580+92↑j
.text:00409640                                         ; sub_409580+109↓j
.text:00409640                 mov     [esp+2Ch+var_2C], edx
.text:00409643                 lea     ecx, [ebx+edx-3]
.text:00409647                 mov     [esp+2Ch+var_24], esi
.text:0040964B                 mov     [esp+2Ch+var_28], ecx
.text:0040964F                 call    sub_4096B0
.text:00409654                 xor     edx, edx
.text:00409656                 test    al, al
.text:00409658                 jz      short loc_4095E5
.text:0040965A                 mov     ecx, [esp+2Ch+var_14]
.text:0040965E                 add     ecx, ebx
.text:00409660                 mov     edx, ecx
.text:00409662                 mov     [esp+2Ch+var_14], ecx
.text:00409666                 cmp     byte ptr [ecx], 0Fh
.text:00409669                 jnz     short loc_409614
.text:0040966B                 inc     edx
.text:0040966C                 mov     [esp+2Ch+var_14], edx
.text:00409670                 movsx   eax, byte ptr [edx+1]
.text:00409674                 lea     edx, [ecx+3]
.text:00409677                 movzx   ebx, byte ptr [ecx+1]
.text:0040967B                 mov     [esp+2Ch+var_14], edx
.text:0040967F                 shl     eax, 8
.text:00409682                 add     ebx, eax
.text:00409684                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00409689                 jz      short loc_409640
.text:0040968B                 mov     [esp+2Ch+var_14], ecx
.text:0040968F                 mov     edx, ecx
.text:00409691                 jmp     short loc_409614
.text:00409693 ; ---------------------------------------------------------------------------
.text:00409693
.text:00409693 loc_409693:                             ; CODE XREF: sub_409580+36↑j
.text:00409693                 lea     edx, [ecx+2]
.text:00409696                 mov     [ebp+0], edx
.text:00409699                 mov     edx, 1
.text:0040969E                 jmp     loc_4095E5
.text:0040969E sub_409580      endp
.text:0040969E
.text:0040969E ; ---------------------------------------------------------------------------
.text:004096A3                 align 10h
.text:004096B0
.text:004096B0 ; =============== S U B R O U T I N E =======================================
.text:004096B0
.text:004096B0
.text:004096B0 sub_4096B0      proc near               ; CODE XREF: sub_409580+AF↑p
.text:004096B0                                         ; sub_409580+CF↑p
.text:004096B0
.text:004096B0 var_1C          = dword ptr -1Ch
.text:004096B0 var_18          = dword ptr -18h
.text:004096B0 var_14          = dword ptr -14h
.text:004096B0 var_C           = dword ptr -0Ch
.text:004096B0 arg_0           = dword ptr  4
.text:004096B0 arg_4           = dword ptr  8
.text:004096B0 arg_8           = dword ptr  0Ch
.text:004096B0
.text:004096B0                 push    esi
.text:004096B1                 push    ebx
.text:004096B2                 sub     esp, 14h
.text:004096B5                 mov     edx, [esp+1Ch+arg_0]
.text:004096B9                 mov     ebx, [esp+1Ch+arg_4]
.text:004096BD                 mov     esi, [esp+1Ch+arg_8]
.text:004096C1                 mov     ecx, edx
.text:004096C3                 mov     [esp+1Ch+var_C], edx
.text:004096C7                 cmp     edx, ebx
.text:004096C9                 jnb     short loc_4096F7
.text:004096CB                 nop
.text:004096CC                 lea     esi, [esi+0]
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: sub_4096B0+45↓j
.text:004096D0                 cmp     byte ptr [ecx], 0Fh
.text:004096D3                 jz      short loc_409704
.text:004096D5                 mov     [esp+1Ch+var_14], esi
.text:004096D9                 lea     edx, [esp+1Ch+var_C]
.text:004096DD                 mov     [esp+1Ch+var_1C], edx
.text:004096E0                 mov     [esp+1Ch+var_18], ebx
.text:004096E4                 call    sub_409730
.text:004096E9                 xor     edx, edx
.text:004096EB                 test    al, al
.text:004096ED                 jz      short loc_4096FC
.text:004096EF
.text:004096EF loc_4096EF:                             ; CODE XREF: sub_4096B0+70↓j
.text:004096EF                 mov     ecx, [esp+1Ch+var_C]
.text:004096F3                 cmp     ecx, ebx
.text:004096F5                 jb      short loc_4096D0
.text:004096F7
.text:004096F7 loc_4096F7:                             ; CODE XREF: sub_4096B0+19↑j
.text:004096F7                 mov     edx, 1
.text:004096FC
.text:004096FC loc_4096FC:                             ; CODE XREF: sub_4096B0+3D↑j
.text:004096FC                 add     esp, 14h
.text:004096FF                 mov     eax, edx
.text:00409701                 pop     ebx
.text:00409702                 pop     esi
.text:00409703                 retn
.text:00409704 ; ---------------------------------------------------------------------------
.text:00409704
.text:00409704 loc_409704:                             ; CODE XREF: sub_4096B0+23↑j
.text:00409704                 lea     eax, [ecx+1]
.text:00409707                 mov     [esp+1Ch+var_C], eax
.text:0040970B                 movsx   eax, byte ptr [eax+1]
.text:0040970F                 movzx   edx, byte ptr [ecx+1]
.text:00409713                 shl     eax, 8
.text:00409716                 add     edx, eax
.text:00409718                 lea     eax, [edx+ecx+3]
.text:0040971C                 mov     [esp+1Ch+var_C], eax
.text:00409720                 jmp     short loc_4096EF
.text:00409720 sub_4096B0      endp
.text:00409720
.text:00409720 ; ---------------------------------------------------------------------------
.text:00409722                 align 10h
.text:00409730
.text:00409730 ; =============== S U B R O U T I N E =======================================
.text:00409730
.text:00409730
.text:00409730 sub_409730      proc near               ; CODE XREF: sub_409580+50↑p
.text:00409730                                         ; sub_4096B0+34↑p
.text:00409730
.text:00409730 var_1C          = dword ptr -1Ch
.text:00409730 var_18          = dword ptr -18h
.text:00409730 var_14          = dword ptr -14h
.text:00409730 var_10          = dword ptr -10h
.text:00409730 var_C           = dword ptr -0Ch
.text:00409730 var_8           = dword ptr -8
.text:00409730 var_4           = dword ptr -4
.text:00409730 arg_0           = dword ptr  4
.text:00409730 arg_4           = dword ptr  8
.text:00409730 arg_8           = dword ptr  0Ch
.text:00409730
.text:00409730                 sub     esp, 1Ch
.text:00409733                 mov     [esp+1Ch+var_4], edi
.text:00409737                 mov     edi, [esp+1Ch+arg_0]
.text:0040973B                 mov     [esp+1Ch+var_C], ebx
.text:0040973F                 mov     ebx, [esp+1Ch+arg_8]
.text:00409743                 mov     [esp+1Ch+var_8], esi
.text:00409747                 mov     edx, [edi]
.text:00409749                 mov     [esp+1Ch+var_10], edx
.text:0040974D                 movzx   eax, byte ptr [edx]
.text:00409750                 inc     edx
.text:00409751                 mov     [esp+1Ch+var_10], edx
.text:00409755                 cmp     eax, 1Dh        ; switch 30 cases
.text:00409758                 ja      def_40975E      ; jumptable 0040975E default case, cases 1-5,7,14-20,22,24,25
.text:0040975E                 jmp     ds:jpt_40975E[eax*4] ; switch jump
.text:0040975E ; ---------------------------------------------------------------------------
.text:00409765                 align 4
.text:00409768 jpt_40975E      dd offset loc_409813    ; DATA XREF: sub_409730+2E↑r
.text:00409768                 dd offset def_40975E    ; jump table for switch statement
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset loc_4097E0
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset loc_409842
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409854
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset loc_409875
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset loc_4098B1
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset def_40975E
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:00409768                 dd offset loc_409813
.text:004097E0 ; ---------------------------------------------------------------------------
.text:004097E0
.text:004097E0 loc_4097E0:                             ; CODE XREF: sub_409730+2E↑j
.text:004097E0                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:004097E0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040975E case 6
.text:004097E4                 mov     edx, [esp+1Ch+arg_4]
.text:004097E8                 movzx   esi, byte ptr [ecx]
.text:004097EB                 lea     ecx, [esp+1Ch+var_10]
.text:004097EF                 mov     [esp+1Ch+var_18], edx
.text:004097F3                 mov     [esp+1Ch+var_1C], ecx
.text:004097F6                 mov     [esp+1Ch+var_14], ebx
.text:004097FA                 call    sub_409580
.text:004097FF                 movzx   edx, byte ptr [ebx+esi*4]
.text:00409803                 mov     cl, al
.text:00409805                 and     edx, 3
.text:00409808                 cmp     edx, 3
.text:0040980B                 jz      short loc_409830
.text:0040980D
.text:0040980D loc_40980D:                             ; CODE XREF: sub_409730+110↓j
.text:0040980D                 xor     eax, eax
.text:0040980F                 test    cl, cl
.text:00409811                 jz      short loc_409820
.text:00409813
.text:00409813 loc_409813:                             ; CODE XREF: sub_409730+2E↑j
.text:00409813                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:00409813                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040975E cases 0,9-12,26-29
.text:00409817
.text:00409817 loc_409817:                             ; CODE XREF: sub_409730+11D↓j
.text:00409817                                         ; sub_409730+143↓j
.text:00409817                 mov     [edi], ecx
.text:00409819                 mov     eax, 1
.text:0040981E                 mov     esi, esi
.text:00409820
.text:00409820 loc_409820:                             ; CODE XREF: sub_409730+E1↑j
.text:00409820                                         ; sub_409730+122↓j ...
.text:00409820                 mov     ebx, [esp+1Ch+var_C]
.text:00409824                 mov     esi, [esp+1Ch+var_8]
.text:00409828                 mov     edi, [esp+1Ch+var_4]
.text:0040982C                 add     esp, 1Ch
.text:0040982F                 retn
.text:00409830 ; ---------------------------------------------------------------------------
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_409730+DB↑j
.text:00409830                 mov     eax, [ebx+esi*4]
.text:00409833                 mov     edx, ecx
.text:00409835                 and     edx, 3
.text:00409838                 and     eax, 0FFFFFFFCh
.text:0040983B                 or      eax, edx
.text:0040983D                 mov     [ebx+esi*4], eax
.text:00409840                 jmp     short loc_40980D
.text:00409842 ; ---------------------------------------------------------------------------
.text:00409842
.text:00409842 loc_409842:                             ; CODE XREF: sub_409730+2E↑j
.text:00409842                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:00409842                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040975E case 8
.text:00409846                 movzx   esi, byte ptr [ecx]
.text:00409849                 test    byte ptr [ebx+esi*4], 3
.text:0040984D                 jnz     short loc_409817
.text:0040984F                 nop
.text:00409850
.text:00409850 def_40975E:                             ; CODE XREF: sub_409730+28↑j
.text:00409850                                         ; sub_409730+2E↑j ...
.text:00409850                 xor     eax, eax        ; jumptable 0040975E default case, cases 1-5,7,14-20,22,24,25
.text:00409852                 jmp     short loc_409820
.text:00409854 ; ---------------------------------------------------------------------------
.text:00409854
.text:00409854 loc_409854:                             ; CODE XREF: sub_409730+2E↑j
.text:00409854                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:00409854                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040975E case 13
.text:00409858                 lea     ecx, [edx+2]
.text:0040985B                 movsx   esi, byte ptr [edx+1]
.text:0040985F                 movzx   ebx, byte ptr [edx]
.text:00409862                 mov     [esp+1Ch+var_10], ecx
.text:00409866                 shl     esi, 8
.text:00409869                 add     ebx, esi
.text:0040986B                 js      short def_40975E ; jumptable 0040975E default case, cases 1-5,7,14-20,22,24,25
.text:0040986D                 add     ecx, ebx
.text:0040986F
.text:0040986F loc_40986F:                             ; CODE XREF: sub_409730+17F↓j
.text:0040986F                 mov     [esp+1Ch+var_10], ecx
.text:00409873                 jmp     short loc_409817
.text:00409875 ; ---------------------------------------------------------------------------
.text:00409875
.text:00409875 loc_409875:                             ; CODE XREF: sub_409730+2E↑j
.text:00409875                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:00409875                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040975E case 21
.text:00409879                 lea     esi, [edx+2]
.text:0040987C                 mov     [esp+1Ch+var_10], esi
.text:00409880                 movsx   eax, byte ptr [esi+1]
.text:00409884                 movzx   ebx, byte ptr [edx+2]
.text:00409888                 shl     eax, 8
.text:0040988B                 add     ebx, eax
.text:0040988D                 lea     eax, [edx+4]
.text:00409890                 mov     [esp+1Ch+var_10], eax
.text:00409894                 xor     eax, eax
.text:00409896                 test    ebx, ebx
.text:00409898                 jnz     short loc_409820
.text:0040989A                 mov     [esp+1Ch+var_10], edx
.text:0040989E                 mov     eax, edx
.text:004098A0                 movsx   ebx, byte ptr [eax+1]
.text:004098A4                 movzx   edx, byte ptr [edx]
.text:004098A7                 shl     ebx, 8
.text:004098AA                 add     edx, ebx
.text:004098AC                 lea     ecx, [edx+esi]
.text:004098AF                 jmp     short loc_40986F
.text:004098B1 ; ---------------------------------------------------------------------------
.text:004098B1
.text:004098B1 loc_4098B1:                             ; CODE XREF: sub_409730+2E↑j
.text:004098B1                                         ; DATA XREF: sub_409730:jpt_40975E↑o
.text:004098B1                 add     [esp+1Ch+var_10], 4 ; jumptable 0040975E case 23
.text:004098B6                 jmp     short def_40975E ; jumptable 0040975E default case, cases 1-5,7,14-20,22,24,25
.text:004098B6 sub_409730      endp
.text:004098B6
.text:004098B6 ; ---------------------------------------------------------------------------
.text:004098B8                 align 10h
.text:004098C0
.text:004098C0 ; =============== S U B R O U T I N E =======================================
.text:004098C0
.text:004098C0
.text:004098C0 sub_4098C0      proc near               ; CODE XREF: sub_407200+1B06↑p
.text:004098C0
.text:004098C0 arg_0           = dword ptr  4
.text:004098C0 arg_4           = dword ptr  8
.text:004098C0 arg_8           = dword ptr  0Ch
.text:004098C0 arg_C           = dword ptr  10h
.text:004098C0
.text:004098C0                 push    edi
.text:004098C1                 push    esi
.text:004098C2                 push    ebx
.text:004098C3                 mov     esi, [esp+0Ch+arg_8]
.text:004098C7                 mov     edi, [esp+0Ch+arg_C]
.text:004098CB                 mov     ebx, [esp+0Ch+arg_0]
.text:004098CF                 test    esi, esi
.text:004098D1                 mov     ecx, [esp+0Ch+arg_4]
.text:004098D5                 jz      short loc_4098F4
.text:004098D7                 mov     esi, esi
.text:004098D9                 lea     edi, [edi+0]
.text:004098E0
.text:004098E0 loc_4098E0:                             ; CODE XREF: sub_4098C0+32↓j
.text:004098E0                 movzx   eax, byte ptr [ecx]
.text:004098E3                 inc     ecx
.text:004098E4                 movzx   edx, byte ptr [ebx]
.text:004098E7                 inc     ebx
.text:004098E8                 movzx   eax, byte ptr [eax+edi]
.text:004098EC                 cmp     [edx+edi], al
.text:004098EF                 jnz     short loc_4098FA
.text:004098F1                 dec     esi
.text:004098F2                 jnz     short loc_4098E0
.text:004098F4
.text:004098F4 loc_4098F4:                             ; CODE XREF: sub_4098C0+15↑j
.text:004098F4                 xor     eax, eax
.text:004098F6
.text:004098F6 loc_4098F6:                             ; CODE XREF: sub_4098C0+3F↓j
.text:004098F6                 pop     ebx
.text:004098F7                 pop     esi
.text:004098F8                 pop     edi
.text:004098F9                 retn
.text:004098FA ; ---------------------------------------------------------------------------
.text:004098FA
.text:004098FA loc_4098FA:                             ; CODE XREF: sub_4098C0+2F↑j
.text:004098FA                 mov     eax, 1
.text:004098FF                 jmp     short loc_4098F6
.text:004098FF sub_4098C0      endp
.text:004098FF
.text:004098FF ; ---------------------------------------------------------------------------
.text:00409901                 align 20h
.text:00409920 aSuccess        db 'Success',0          ; DATA XREF: sub_409F80+41↓o
.text:00409920                                         ; .text:0040A00B↓o
.text:00409928 aNoMatch        db 'No match',0
.text:00409931 aInvalidRegular db 'Invalid regular expression',0
.text:0040994C aInvalidCollati db 'Invalid collation character',0
.text:00409968 aInvalidCharact db 'Invalid character class name',0
.text:00409985 aTrailingBacksl db 'Trailing backslash',0
.text:00409998 aInvalidBackRef db 'Invalid back reference',0
.text:004099AF aUnmatchedOr    db 'Unmatched [ or [^',0
.text:004099C1 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:004099D3 aUnmatched      db 'Unmatched \{',0
.text:004099E0 aInvalidContent db 'Invalid content of \{\}',0
.text:004099F8 aInvalidRangeEn db 'Invalid range end',0
.text:00409A0A aMemoryExhauste_0 db 'Memory exhausted',0
.text:00409A1B aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00409A40 aPrematureEndOf db 'Premature end of regular expression',0
.text:00409A64 aRegularExpress db 'Regular expression too big',0
.text:00409A7F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00409A91                 db 0EBh, 0Dh, 90h
.text:00409A94                 align 10h
.text:00409AA0 dword_409AA0    dd 0                    ; DATA XREF: sub_409F80+3A↓r
.text:00409AA0                                         ; .text:0040A004↓r
.text:00409AA4                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00409AA4                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00409AF0
.text:00409AF0 ; =============== S U B R O U T I N E =======================================
.text:00409AF0
.text:00409AF0
.text:00409AF0 sub_409AF0      proc near               ; CODE XREF: sub_40A110+25A0↓p
.text:00409AF0
.text:00409AF0 arg_0           = dword ptr  4
.text:00409AF0 arg_8           = dword ptr  0Ch
.text:00409AF0 arg_C           = dword ptr  10h
.text:00409AF0
.text:00409AF0                 mov     edx, [esp+arg_8]
.text:00409AF4                 mov     ecx, [esp+arg_C]
.text:00409AF8                 dec     edx
.text:00409AF9                 js      short loc_409B1A
.text:00409AFB                 lea     eax, [edx+edx*4]
.text:00409AFE                 shl     eax, 2
.text:00409B01                 add     eax, [esp+arg_0]
.text:00409B05                 add     eax, 10h
.text:00409B08                 nop
.text:00409B09                 lea     esi, [esi+0]
.text:00409B10
.text:00409B10 loc_409B10:                             ; CODE XREF: sub_409AF0+28↓j
.text:00409B10                 cmp     [eax], ecx
.text:00409B12                 jz      short loc_409B1D
.text:00409B14                 sub     eax, 14h
.text:00409B17                 dec     edx
.text:00409B18                 jns     short loc_409B10
.text:00409B1A
.text:00409B1A loc_409B1A:                             ; CODE XREF: sub_409AF0+9↑j
.text:00409B1A                 xor     eax, eax
.text:00409B1C                 retn
.text:00409B1D ; ---------------------------------------------------------------------------
.text:00409B1D
.text:00409B1D loc_409B1D:                             ; CODE XREF: sub_409AF0+22↑j
.text:00409B1D                 mov     eax, 1
.text:00409B22                 retn
.text:00409B22 sub_409AF0      endp
.text:00409B22
.text:00409B22 ; ---------------------------------------------------------------------------
.text:00409B23                 align 10h
.text:00409B30
.text:00409B30 ; =============== S U B R O U T I N E =======================================
.text:00409B30
.text:00409B30 ; Attributes: thunk
.text:00409B30
.text:00409B30 sub_409B30      proc near               ; CODE XREF: sub_402ED0+198↑p
.text:00409B30                                         ; sub_402ED0+262↑p ...
.text:00409B30                 jmp     sub_40D720
.text:00409B30 sub_409B30      endp
.text:00409B30
.text:00409B30 ; ---------------------------------------------------------------------------
.text:00409B35                 align 10h
.text:00409B40                 push    ebp
.text:00409B41                 push    edi
.text:00409B42                 push    esi
.text:00409B43                 push    ebx
.text:00409B44                 sub     esp, 1Ch
.text:00409B47                 mov     edi, [esp+30h]
.text:00409B4B                 test    byte ptr [esp+38h], 1
.text:00409B50                 mov     dword ptr [edi], 0
.text:00409B56                 setnz   dl
.text:00409B59                 mov     dword ptr [edi+4], 0
.text:00409B60                 mov     dword ptr [edi+8], 0
.text:00409B67                 mov     dword ptr [esp], 100h
.text:00409B6E                 movzx   ebp, dl
.text:00409B71                 dec     ebp
.text:00409B72                 and     ebp, 0FFFD4FCAh
.text:00409B78                 add     ebp, 3B2FCh
.text:00409B7E                 call    malloc
.text:00409B83                 test    byte ptr [esp+38h], 2
.text:00409B88                 mov     [edi+10h], eax
.text:00409B8B                 jnz     loc_409C40
.text:00409B91                 mov     dword ptr [edi+14h], 0
.text:00409B98
.text:00409B98 loc_409B98:                             ; CODE XREF: .text:00409C90↓j
.text:00409B98                 test    byte ptr [esp+38h], 4
.text:00409B9D                 jz      loc_409C37
.text:00409BA3                 or      byte ptr [edi+1Ch], 80h
.text:00409BA7                 and     ebp, 0FFFFFFBFh
.text:00409BAA                 or      ebp, 100h
.text:00409BB0
.text:00409BB0 loc_409BB0:                             ; CODE XREF: .text:00409C3B↓j
.text:00409BB0                 shr     dword ptr [esp+38h], 3
.text:00409BB5                 movzx   edx, byte ptr [esp+38h]
.text:00409BBA                 movzx   ecx, byte ptr [edi+1Ch]
.text:00409BBE                 and     dl, 1
.text:00409BC1                 shl     dl, 4
.text:00409BC4                 and     cl, 0EFh
.text:00409BC7                 or      cl, dl
.text:00409BC9                 mov     [edi+1Ch], cl
.text:00409BCC                 mov     esi, [esp+34h]
.text:00409BD0                 mov     [esp], esi
.text:00409BD3                 call    strlen
.text:00409BD8                 mov     [esp+4], eax
.text:00409BDC                 mov     ebx, [esp+34h]
.text:00409BE0                 mov     [esp+0Ch], edi
.text:00409BE4                 mov     [esp+8], ebp
.text:00409BE8                 mov     [esp], ebx
.text:00409BEB                 call    sub_40A110
.text:00409BF0                 cmp     eax, 10h
.text:00409BF3                 mov     ebx, eax
.text:00409BF5                 jz      short loc_409C30
.text:00409BF7
.text:00409BF7 loc_409BF7:                             ; CODE XREF: .text:00409C35↓j
.text:00409BF7                 test    ebx, ebx
.text:00409BF9                 jnz     short loc_409C02
.text:00409BFB                 mov     ebp, [edi+10h]
.text:00409BFE                 test    ebp, ebp
.text:00409C00                 jnz     short loc_409C0E
.text:00409C02
.text:00409C02 loc_409C02:                             ; CODE XREF: .text:00409BF9↑j
.text:00409C02                                         ; .text:00409C19↓j ...
.text:00409C02                 mov     edx, ebx
.text:00409C04
.text:00409C04 loc_409C04:                             ; CODE XREF: .text:00409C56↓j
.text:00409C04                 add     esp, 1Ch
.text:00409C07                 mov     eax, edx
.text:00409C09                 pop     ebx
.text:00409C0A                 pop     esi
.text:00409C0B                 pop     edi
.text:00409C0C                 pop     ebp
.text:00409C0D                 retn
.text:00409C0E ; ---------------------------------------------------------------------------
.text:00409C0E
.text:00409C0E loc_409C0E:                             ; CODE XREF: .text:00409C00↑j
.text:00409C0E                 mov     [esp], edi
.text:00409C11                 call    sub_409B30
.text:00409C16                 cmp     eax, 0FFFFFFFEh
.text:00409C19                 jnz     short loc_409C02
.text:00409C1B                 mov     esi, [edi+10h]
.text:00409C1E                 mov     [esp], esi
.text:00409C21                 call    free
.text:00409C26                 mov     dword ptr [edi+10h], 0
.text:00409C2D                 jmp     short loc_409C02
.text:00409C2D ; ---------------------------------------------------------------------------
.text:00409C2F                 align 10h
.text:00409C30
.text:00409C30 loc_409C30:                             ; CODE XREF: .text:00409BF5↑j
.text:00409C30                 mov     ebx, 8
.text:00409C35                 jmp     short loc_409BF7
.text:00409C37 ; ---------------------------------------------------------------------------
.text:00409C37
.text:00409C37 loc_409C37:                             ; CODE XREF: .text:00409B9D↑j
.text:00409C37                 and     byte ptr [edi+1Ch], 7Fh
.text:00409C3B                 jmp     loc_409BB0
.text:00409C40 ; ---------------------------------------------------------------------------
.text:00409C40
.text:00409C40 loc_409C40:                             ; CODE XREF: .text:00409B8B↑j
.text:00409C40                 mov     dword ptr [esp], 100h
.text:00409C47                 call    malloc
.text:00409C4C                 mov     [edi+14h], eax
.text:00409C4F                 test    eax, eax
.text:00409C51                 mov     edx, 0Ch
.text:00409C56                 jz      short loc_409C04
.text:00409C58                 xor     ebx, ebx
.text:00409C5A                 lea     esi, [esi+0]
.text:00409C60
.text:00409C60 loc_409C60:                             ; CODE XREF: .text:00409C8E↓j
.text:00409C60                 mov     edx, ds:__mb_cur_max
.text:00409C66                 mov     esi, [edi+14h]
.text:00409C69                 cmp     dword ptr [edx], 1
.text:00409C6C                 jz      short loc_409CA1
.text:00409C6E                 mov     dword ptr [esp+4], 1
.text:00409C76                 mov     [esp], ebx
.text:00409C79                 call    _isctype
.text:00409C7E
.text:00409C7E loc_409C7E:                             ; CODE XREF: .text:00409CB0↓j
.text:00409C7E                 test    eax, eax
.text:00409C80                 mov     dl, bl
.text:00409C82                 jnz     short loc_409C95
.text:00409C84
.text:00409C84 loc_409C84:                             ; CODE XREF: .text:00409C9F↓j
.text:00409C84                 mov     [ebx+esi], dl
.text:00409C87                 inc     ebx
.text:00409C88                 cmp     ebx, 0FFh
.text:00409C8E                 jbe     short loc_409C60
.text:00409C90                 jmp     loc_409B98
.text:00409C95 ; ---------------------------------------------------------------------------
.text:00409C95
.text:00409C95 loc_409C95:                             ; CODE XREF: .text:00409C82↑j
.text:00409C95                 mov     [esp], ebx
.text:00409C98                 call    tolower
.text:00409C9D                 mov     dl, al
.text:00409C9F                 jmp     short loc_409C84
.text:00409CA1 ; ---------------------------------------------------------------------------
.text:00409CA1
.text:00409CA1 loc_409CA1:                             ; CODE XREF: .text:00409C6C↑j
.text:00409CA1                 mov     edx, ds:_pctype
.text:00409CA7                 mov     ecx, [edx]
.text:00409CA9                 movzx   eax, word ptr [ecx+ebx*2]
.text:00409CAD                 and     eax, 1
.text:00409CB0                 jmp     short loc_409C7E
.text:00409CB0 ; ---------------------------------------------------------------------------
.text:00409CB2                 align 10h
.text:00409CC0                 push    ebp
.text:00409CC1                 push    edi
.text:00409CC2                 push    esi
.text:00409CC3                 push    ebx
.text:00409CC4                 sub     esp, 7Ch
.text:00409CC7                 mov     ebx, [esp+90h]
.text:00409CCE                 mov     edx, [esp+94h]
.text:00409CD5                 mov     ebp, [esp+98h]
.text:00409CDC                 mov     esi, [esp+0A0h]
.text:00409CE3                 mov     [esp], edx
.text:00409CE6                 call    strlen
.text:00409CEB                 test    byte ptr [ebx+1Ch], 10h
.text:00409CEF                 mov     edi, eax
.text:00409CF1                 mov     byte ptr [esp+3Fh], 0
.text:00409CF6                 jnz     short loc_409D10
.text:00409CF8                 test    ebp, ebp
.text:00409CFA                 jz      short loc_409D10
.text:00409CFC                 mov     byte ptr [esp+3Fh], 1
.text:00409D01                 jmp     short loc_409D10
.text:00409D01 ; ---------------------------------------------------------------------------
.text:00409D03                 align 10h
.text:00409D10
.text:00409D10 loc_409D10:                             ; CODE XREF: .text:00409CF6↑j
.text:00409D10                                         ; .text:00409CFA↑j ...
.text:00409D10                 mov     edx, [ebx]
.text:00409D12                 mov     [esp+40h], edx
.text:00409D16                 mov     ecx, [ebx+4]
.text:00409D19                 mov     [esp+44h], ecx
.text:00409D1D                 mov     edx, [ebx+8]
.text:00409D20                 mov     [esp+48h], edx
.text:00409D24                 mov     ecx, [ebx+0Ch]
.text:00409D27                 mov     [esp+4Ch], ecx
.text:00409D2B                 mov     edx, [ebx+10h]
.text:00409D2E                 mov     [esp+50h], edx
.text:00409D32                 mov     ecx, [ebx+14h]
.text:00409D35                 mov     [esp+54h], ecx
.text:00409D39                 mov     edx, [ebx+18h]
.text:00409D3C                 mov     [esp+58h], edx
.text:00409D40                 mov     ecx, [ebx+1Ch]
.text:00409D43                 mov     edx, esi
.text:00409D45                 shr     esi, 1
.text:00409D47                 and     dl, 1
.text:00409D4A                 mov     eax, esi
.text:00409D4C                 mov     [esp+5Ch], ecx
.text:00409D50                 shl     dl, 5
.text:00409D53                 and     al, 1
.text:00409D55                 movzx   ebx, byte ptr [esp+5Ch]
.text:00409D5A                 shl     al, 6
.text:00409D5D                 and     bl, 9Fh
.text:00409D60                 or      bl, dl
.text:00409D62                 or      bl, al
.text:00409D64                 and     bl, 0F9h
.text:00409D67                 or      bl, 4
.text:00409D6A                 cmp     byte ptr [esp+3Fh], 0
.text:00409D6F                 mov     [esp+5Ch], bl
.text:00409D73                 jnz     loc_409E26
.text:00409D79
.text:00409D79 loc_409D79:                             ; CODE XREF: .text:00409E4F↓j
.text:00409D79                 movzx   ecx, byte ptr [esp+3Fh]
.text:00409D7E                 lea     esi, [esp+60h]
.text:00409D82                 mov     [esp+20h], edi
.text:00409D86                 lea     ebx, [esp+40h]
.text:00409D8A                 mov     [esp+18h], edi
.text:00409D8E                 mov     dword ptr [esp+14h], 0
.text:00409D96                 xor     cl, 1
.text:00409D99                 movzx   edx, cl
.text:00409D9C                 mov     [esp+10h], edi
.text:00409DA0                 mov     ecx, [esp+94h]
.text:00409DA7                 dec     edx
.text:00409DA8                 mov     dword ptr [esp+8], 0
.text:00409DB0                 and     esi, edx
.text:00409DB2                 mov     [esp+1Ch], esi
.text:00409DB6                 mov     [esp+0Ch], ecx
.text:00409DBA                 mov     dword ptr [esp+4], 0
.text:00409DC2                 mov     [esp], ebx
.text:00409DC5                 call    sub_40D480
.text:00409DCA                 cmp     byte ptr [esp+3Fh], 0
.text:00409DCF                 mov     esi, eax
.text:00409DD1                 jz      short loc_409E11
.text:00409DD3                 test    eax, eax
.text:00409DD5                 js      short loc_409E20
.text:00409DD7                 xor     edx, edx
.text:00409DD9                 cmp     edx, ebp
.text:00409DDB                 jnb     short loc_409E20
.text:00409DDD                 mov     ecx, [esp+64h]
.text:00409DE1                 mov     ebx, [esp+68h]
.text:00409DE5                 lea     esi, [esi+0]
.text:00409DE9                 lea     edi, [edi+0]
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: .text:00409E07↓j
.text:00409DF0                 mov     eax, [ecx+edx*4]
.text:00409DF3                 mov     edi, [esp+9Ch]
.text:00409DFA                 mov     [edi+edx*8], eax
.text:00409DFD                 mov     eax, [ebx+edx*4]
.text:00409E00                 mov     [edi+edx*8+4], eax
.text:00409E04                 inc     edx
.text:00409E05                 cmp     edx, ebp
.text:00409E07                 jb      short loc_409DF0
.text:00409E09
.text:00409E09 loc_409E09:                             ; CODE XREF: .text:00409E24↓j
.text:00409E09                 mov     [esp], ecx
.text:00409E0C                 call    free
.text:00409E11
.text:00409E11 loc_409E11:                             ; CODE XREF: .text:00409DD1↑j
.text:00409E11                 mov     eax, esi
.text:00409E13                 shr     eax, 1Fh
.text:00409E16
.text:00409E16 loc_409E16:                             ; CODE XREF: .text:00409E46↓j
.text:00409E16                 add     esp, 7Ch
.text:00409E19                 pop     ebx
.text:00409E1A                 pop     esi
.text:00409E1B                 pop     edi
.text:00409E1C                 pop     ebp
.text:00409E1D                 retn
.text:00409E1D ; ---------------------------------------------------------------------------
.text:00409E1E                 align 10h
.text:00409E20
.text:00409E20 loc_409E20:                             ; CODE XREF: .text:00409DD5↑j
.text:00409E20                                         ; .text:00409DDB↑j
.text:00409E20                 mov     ecx, [esp+64h]
.text:00409E24                 jmp     short loc_409E09
.text:00409E26 ; ---------------------------------------------------------------------------
.text:00409E26
.text:00409E26 loc_409E26:                             ; CODE XREF: .text:00409D73↑j
.text:00409E26                 mov     [esp+60h], ebp
.text:00409E2A                 lea     esi, ds:0[ebp*8]
.text:00409E31                 mov     [esp], esi
.text:00409E34                 call    malloc
.text:00409E39                 mov     [esp+64h], eax
.text:00409E3D                 mov     ecx, eax
.text:00409E3F                 test    ecx, ecx
.text:00409E41                 mov     eax, 1
.text:00409E46                 jz      short loc_409E16
.text:00409E48                 lea     eax, [ecx+ebp*4]
.text:00409E4B                 mov     [esp+68h], eax
.text:00409E4F                 jmp     loc_409D79
.text:00409E4F ; ---------------------------------------------------------------------------
.text:00409E54                 align 10h
.text:00409E60                 mov     eax, ds:dword_41BBC0
.text:00409E65                 mov     ecx, [esp+4]
.text:00409E69                 mov     ds:dword_41BBC0, ecx
.text:00409E6F                 retn
.text:00409E70 ; ---------------------------------------------------------------------------
.text:00409E70                 push    ebx
.text:00409E71                 mov     ebx, [esp+10h]
.text:00409E75                 mov     edx, [esp+8]
.text:00409E79                 mov     ecx, [esp+0Ch]
.text:00409E7D                 test    ebx, ebx
.text:00409E7F                 jz      short loc_409EA0
.text:00409E81                 movzx   eax, byte ptr [edx+1Ch]
.text:00409E85                 and     al, 0F9h
.text:00409E87                 or      al, 2
.text:00409E89                 mov     [edx+1Ch], al
.text:00409E8C                 mov     edx, [esp+14h]
.text:00409E90                 mov     [ecx], ebx
.text:00409E92                 mov     [ecx+4], edx
.text:00409E95                 mov     edx, [esp+18h]
.text:00409E99                 mov     [ecx+8], edx
.text:00409E9C
.text:00409E9C loc_409E9C:                             ; CODE XREF: .text:00409EB8↓j
.text:00409E9C                 pop     ebx
.text:00409E9D                 retn
.text:00409E9D ; ---------------------------------------------------------------------------
.text:00409E9E                 align 10h
.text:00409EA0
.text:00409EA0 loc_409EA0:                             ; CODE XREF: .text:00409E7F↑j
.text:00409EA0                 and     byte ptr [edx+1Ch], 0F9h
.text:00409EA4                 mov     dword ptr [ecx], 0
.text:00409EAA                 mov     dword ptr [ecx+8], 0
.text:00409EB1                 mov     dword ptr [ecx+4], 0
.text:00409EB8                 jmp     short loc_409E9C
.text:00409EB8 ; ---------------------------------------------------------------------------
.text:00409EBA                 align 10h
.text:00409EC0
.text:00409EC0 ; =============== S U B R O U T I N E =======================================
.text:00409EC0
.text:00409EC0
.text:00409EC0 sub_409EC0      proc near               ; CODE XREF: sub_403550+56A↑p
.text:00409EC0                                         ; sub_403550+5D0↑p
.text:00409EC0
.text:00409EC0 var_2C          = dword ptr -2Ch
.text:00409EC0 var_28          = dword ptr -28h
.text:00409EC0 var_24          = dword ptr -24h
.text:00409EC0 var_20          = dword ptr -20h
.text:00409EC0 var_1C          = dword ptr -1Ch
.text:00409EC0 var_18          = dword ptr -18h
.text:00409EC0 var_14          = dword ptr -14h
.text:00409EC0 var_10          = dword ptr -10h
.text:00409EC0 var_C           = dword ptr -0Ch
.text:00409EC0 arg_0           = dword ptr  4
.text:00409EC0 arg_4           = dword ptr  8
.text:00409EC0 arg_8           = dword ptr  0Ch
.text:00409EC0 arg_C           = dword ptr  10h
.text:00409EC0 arg_10          = dword ptr  14h
.text:00409EC0 arg_14          = dword ptr  18h
.text:00409EC0
.text:00409EC0                 sub     esp, 2Ch
.text:00409EC3                 mov     edx, [esp+2Ch+arg_14]
.text:00409EC7                 mov     [esp+2Ch+var_24], 0
.text:00409ECF                 mov     ecx, [esp+2Ch+arg_8]
.text:00409ED3                 mov     [esp+2Ch+var_28], 0
.text:00409EDB                 mov     [esp+2Ch+var_10], edx
.text:00409EDF                 mov     edx, [esp+2Ch+arg_10]
.text:00409EE3                 mov     [esp+2Ch+var_C], ecx
.text:00409EE7                 mov     [esp+2Ch+var_1C], ecx
.text:00409EEB                 mov     [esp+2Ch+var_14], edx
.text:00409EEF                 mov     edx, [esp+2Ch+arg_C]
.text:00409EF3                 mov     [esp+2Ch+var_18], edx
.text:00409EF7                 mov     edx, [esp+2Ch+arg_4]
.text:00409EFB                 mov     [esp+2Ch+var_20], edx
.text:00409EFF                 mov     edx, [esp+2Ch+arg_0]
.text:00409F03                 mov     [esp+2Ch+var_2C], edx
.text:00409F06                 call    sub_40D480
.text:00409F0B                 add     esp, 2Ch
.text:00409F0E                 retn
.text:00409F0E sub_409EC0      endp
.text:00409F0E
.text:00409F0E ; ---------------------------------------------------------------------------
.text:00409F0F                 align 10h
.text:00409F10                 jmp     sub_40D480
.text:00409F10 ; ---------------------------------------------------------------------------
.text:00409F15                 align 10h
.text:00409F20
.text:00409F20 ; =============== S U B R O U T I N E =======================================
.text:00409F20
.text:00409F20
.text:00409F20 sub_409F20      proc near               ; CODE XREF: sub_403F40+273↑p
.text:00409F20                                         ; sub_403F40+734↑p ...
.text:00409F20
.text:00409F20 var_2C          = dword ptr -2Ch
.text:00409F20 var_28          = dword ptr -28h
.text:00409F20 var_24          = dword ptr -24h
.text:00409F20 var_20          = dword ptr -20h
.text:00409F20 var_1C          = dword ptr -1Ch
.text:00409F20 var_18          = dword ptr -18h
.text:00409F20 var_14          = dword ptr -14h
.text:00409F20 var_10          = dword ptr -10h
.text:00409F20 arg_0           = dword ptr  4
.text:00409F20 arg_4           = dword ptr  8
.text:00409F20 arg_8           = dword ptr  0Ch
.text:00409F20 arg_C           = dword ptr  10h
.text:00409F20 arg_10          = dword ptr  14h
.text:00409F20
.text:00409F20                 sub     esp, 2Ch
.text:00409F23                 mov     edx, [esp+2Ch+arg_10]
.text:00409F27                 mov     [esp+2Ch+var_24], 0
.text:00409F2F                 mov     ecx, [esp+2Ch+arg_8]
.text:00409F33                 mov     [esp+2Ch+var_28], 0
.text:00409F3B                 mov     [esp+2Ch+var_14], edx
.text:00409F3F                 mov     edx, [esp+2Ch+arg_C]
.text:00409F43                 mov     [esp+2Ch+var_10], ecx
.text:00409F47                 mov     [esp+2Ch+var_1C], ecx
.text:00409F4B                 mov     [esp+2Ch+var_18], edx
.text:00409F4F                 mov     edx, [esp+2Ch+arg_4]
.text:00409F53                 mov     [esp+2Ch+var_20], edx
.text:00409F57                 mov     edx, [esp+2Ch+arg_0]
.text:00409F5B                 mov     [esp+2Ch+var_2C], edx
.text:00409F5E                 call    sub_407200
.text:00409F63                 add     esp, 2Ch
.text:00409F66                 retn
.text:00409F66 sub_409F20      endp
.text:00409F66
.text:00409F66 ; ---------------------------------------------------------------------------
.text:00409F67                 align 10h
.text:00409F70                 jmp     sub_407200
.text:00409F70 ; ---------------------------------------------------------------------------
.text:00409F75                 align 10h
.text:00409F80
.text:00409F80 ; =============== S U B R O U T I N E =======================================
.text:00409F80
.text:00409F80
.text:00409F80 sub_409F80      proc near               ; CODE XREF: sub_402ED0+15D↑p
.text:00409F80                                         ; sub_402ED0+227↑p
.text:00409F80
.text:00409F80 var_1C          = dword ptr -1Ch
.text:00409F80 var_18          = dword ptr -18h
.text:00409F80 var_14          = dword ptr -14h
.text:00409F80 var_10          = dword ptr -10h
.text:00409F80 arg_0           = dword ptr  4
.text:00409F80 arg_4           = dword ptr  8
.text:00409F80 arg_8           = dword ptr  0Ch
.text:00409F80
.text:00409F80                 sub     esp, 1Ch
.text:00409F83                 mov     ecx, [esp+1Ch+arg_8]
.text:00409F87                 movzx   edx, byte ptr [ecx+1Ch]
.text:00409F8B                 and     dl, 0E9h
.text:00409F8E                 or      dl, 80h
.text:00409F91                 mov     [ecx+1Ch], dl
.text:00409F94                 mov     edx, [esp+1Ch+arg_4]
.text:00409F98                 mov     [esp+1Ch+var_10], ecx
.text:00409F9C                 mov     ecx, ds:dword_41BBC0
.text:00409FA2                 mov     [esp+1Ch+var_18], edx
.text:00409FA6                 mov     edx, [esp+1Ch+arg_0]
.text:00409FAA                 mov     [esp+1Ch+var_14], ecx
.text:00409FAE                 mov     [esp+1Ch+var_1C], edx
.text:00409FB1                 call    sub_40A110
.text:00409FB6                 test    eax, eax
.text:00409FB8                 jz      short loc_409FD4
.text:00409FBA                 mov     ecx, ds:dword_409AA0[eax*4]
.text:00409FC1                 add     ecx, offset aSuccess ; "Success"
.text:00409FC7                 mov     [esp+1Ch+arg_0], ecx
.text:00409FCB                 add     esp, 1Ch
.text:00409FCE                 jmp     ds:libintl_gettext
.text:00409FD4 ; ---------------------------------------------------------------------------
.text:00409FD4
.text:00409FD4 loc_409FD4:                             ; CODE XREF: sub_409F80+38↑j
.text:00409FD4                 xor     eax, eax
.text:00409FD6                 add     esp, 1Ch
.text:00409FD9                 retn
.text:00409FD9 sub_409F80      endp
.text:00409FD9
.text:00409FD9 ; ---------------------------------------------------------------------------
.text:00409FDA                 align 10h
.text:00409FE0                 sub     esp, 1Ch
.text:00409FE3                 mov     eax, [esp+20h]
.text:00409FE7                 mov     [esp+14h], edi
.text:00409FEB                 mov     edi, [esp+2Ch]
.text:00409FEF                 cmp     eax, 10h
.text:00409FF2                 mov     [esp+18h], ebp
.text:00409FF6                 mov     ebp, [esp+28h]
.text:00409FFA                 mov     [esp+0Ch], ebx
.text:00409FFE                 mov     [esp+10h], esi
.text:0040A002                 ja      short loc_40A078
.text:0040A004                 mov     edx, ds:dword_409AA0[eax*4]
.text:0040A00B                 add     edx, offset aSuccess ; "Success"
.text:0040A011                 mov     [esp], edx
.text:0040A014                 call    ds:libintl_gettext
.text:0040A01A                 mov     [esp], eax
.text:0040A01D                 mov     ebx, eax
.text:0040A01F                 call    strlen
.text:0040A024                 test    edi, edi
.text:0040A026                 lea     esi, [eax+1]
.text:0040A029                 jz      short loc_40A050
.text:0040A02B                 cmp     esi, edi
.text:0040A02D                 jbe     short loc_40A066
.text:0040A02F                 mov     [esp+4], ebx
.text:0040A033                 lea     edx, [edi-1]
.text:0040A036                 mov     [esp+8], edx
.text:0040A03A                 mov     [esp], ebp
.text:0040A03D                 call    sub_413D80
.text:0040A042                 mov     byte ptr [eax], 0
.text:0040A045                 lea     esi, [esi+0]
.text:0040A049                 lea     edi, [edi+0]
.text:0040A050
.text:0040A050 loc_40A050:                             ; CODE XREF: .text:0040A029↑j
.text:0040A050                                         ; .text:0040A076↓j
.text:0040A050                 mov     eax, esi
.text:0040A052                 mov     ebx, [esp+0Ch]
.text:0040A056                 mov     esi, [esp+10h]
.text:0040A05A                 mov     edi, [esp+14h]
.text:0040A05E                 mov     ebp, [esp+18h]
.text:0040A062                 add     esp, 1Ch
.text:0040A065                 retn
.text:0040A066 ; ---------------------------------------------------------------------------
.text:0040A066
.text:0040A066 loc_40A066:                             ; CODE XREF: .text:0040A02D↑j
.text:0040A066                 mov     [esp+8], esi
.text:0040A06A                 mov     [esp+4], ebx
.text:0040A06E                 mov     [esp], ebp
.text:0040A071                 call    memcpy
.text:0040A076                 jmp     short loc_40A050
.text:0040A078 ; ---------------------------------------------------------------------------
.text:0040A078
.text:0040A078 loc_40A078:                             ; CODE XREF: .text:0040A002↑j
.text:0040A078                 call    abort
.text:0040A078 ; ---------------------------------------------------------------------------
.text:0040A07D                 align 10h
.text:0040A080                 sub     esp, 0Ch
.text:0040A083                 mov     [esp+8], ebx
.text:0040A087                 mov     ebx, [esp+10h]
.text:0040A08B                 mov     eax, [ebx]
.text:0040A08D                 test    eax, eax
.text:0040A08F                 jnz     short loc_40A0F0
.text:0040A091
.text:0040A091 loc_40A091:                             ; CODE XREF: .text:0040A0F8↓j
.text:0040A091                 mov     dword ptr [ebx], 0
.text:0040A097                 mov     eax, [ebx+10h]
.text:0040A09A                 mov     dword ptr [ebx+4], 0
.text:0040A0A1                 mov     dword ptr [ebx+8], 0
.text:0040A0A8                 test    eax, eax
.text:0040A0AA                 jnz     short loc_40A0E0
.text:0040A0AC
.text:0040A0AC loc_40A0AC:                             ; CODE XREF: .text:0040A0E8↓j
.text:0040A0AC                 and     byte ptr [ebx+1Ch], 0F7h
.text:0040A0B0                 mov     eax, [ebx+14h]
.text:0040A0B3                 mov     dword ptr [ebx+10h], 0
.text:0040A0BA                 test    eax, eax
.text:0040A0BC                 jnz     short loc_40A0D0
.text:0040A0BE
.text:0040A0BE loc_40A0BE:                             ; CODE XREF: .text:0040A0D8↓j
.text:0040A0BE                 mov     dword ptr [ebx+14h], 0
.text:0040A0C5                 mov     ebx, [esp+8]
.text:0040A0C9                 add     esp, 0Ch
.text:0040A0CC                 retn
.text:0040A0CC ; ---------------------------------------------------------------------------
.text:0040A0CD                 align 10h
.text:0040A0D0
.text:0040A0D0 loc_40A0D0:                             ; CODE XREF: .text:0040A0BC↑j
.text:0040A0D0                 mov     [esp], eax
.text:0040A0D3                 call    free
.text:0040A0D8                 jmp     short loc_40A0BE
.text:0040A0D8 ; ---------------------------------------------------------------------------
.text:0040A0DA                 align 10h
.text:0040A0E0
.text:0040A0E0 loc_40A0E0:                             ; CODE XREF: .text:0040A0AA↑j
.text:0040A0E0                 mov     [esp], eax
.text:0040A0E3                 call    free
.text:0040A0E8                 jmp     short loc_40A0AC
.text:0040A0E8 ; ---------------------------------------------------------------------------
.text:0040A0EA                 align 10h
.text:0040A0F0
.text:0040A0F0 loc_40A0F0:                             ; CODE XREF: .text:0040A08F↑j
.text:0040A0F0                 mov     [esp], eax
.text:0040A0F3                 call    free
.text:0040A0F8                 jmp     short loc_40A091
.text:0040A0F8 ; ---------------------------------------------------------------------------
.text:0040A0FA aLower          db 'lower',0            ; DATA XREF: sub_40A110+1EEB↓o
.text:0040A100 aUpper          db 'upper',0            ; DATA XREF: sub_40A110+1F11↓o
.text:0040A106                 align 10h
.text:0040A110
.text:0040A110 ; =============== S U B R O U T I N E =======================================
.text:0040A110
.text:0040A110
.text:0040A110 sub_40A110      proc near               ; CODE XREF: .text:00409BEB↑p
.text:0040A110                                         ; sub_409F80+31↑p
.text:0040A110
.text:0040A110 Size            = dword ptr -97Ch
.text:0040A110 var_978         = dword ptr -978h
.text:0040A110 var_974         = dword ptr -974h
.text:0040A110 var_970         = dword ptr -970h
.text:0040A110 var_96C         = dword ptr -96Ch
.text:0040A110 var_968         = dword ptr -968h
.text:0040A110 var_950         = dword ptr -950h
.text:0040A110 var_940         = dword ptr -940h
.text:0040A110 var_93C         = dword ptr -93Ch
.text:0040A110 var_938         = dword ptr -938h
.text:0040A110 var_934         = dword ptr -934h
.text:0040A110 var_930         = dword ptr -930h
.text:0040A110 Type            = word ptr -92Ch
.text:0040A110 var_926         = byte ptr -926h
.text:0040A110 var_925         = byte ptr -925h
.text:0040A110 var_924         = dword ptr -924h
.text:0040A110 var_91E         = byte ptr -91Eh
.text:0040A110 var_91D         = byte ptr -91Dh
.text:0040A110 var_91C         = byte ptr -91Ch
.text:0040A110 var_90C         = dword ptr -90Ch
.text:0040A110 var_908         = dword ptr -908h
.text:0040A110 var_904         = dword ptr -904h
.text:0040A110 var_900         = dword ptr -900h
.text:0040A110 var_8FC         = dword ptr -8FCh
.text:0040A110 var_8F8         = dword ptr -8F8h
.text:0040A110 var_8F4         = dword ptr -8F4h
.text:0040A110 var_8F0         = dword ptr -8F0h
.text:0040A110 var_8EC         = byte ptr -8ECh
.text:0040A110 var_8D0         = dword ptr -8D0h
.text:0040A110 var_8CC         = byte ptr -8CCh
.text:0040A110 var_84C         = byte ptr -84Ch
.text:0040A110 name            = byte ptr -83Ch
.text:0040A110 Block           = dword ptr -2Ch
.text:0040A110 var_28          = dword ptr -28h
.text:0040A110 var_24          = dword ptr -24h
.text:0040A110 arg_0           = dword ptr  4
.text:0040A110 arg_4           = dword ptr  8
.text:0040A110 arg_8           = dword ptr  0Ch
.text:0040A110 arg_C           = dword ptr  10h
.text:0040A110
.text:0040A110                 push    ebp
.text:0040A111                 mov     ebp, 0Ch
.text:0040A116                 push    edi
.text:0040A117                 push    esi
.text:0040A118                 push    ebx
.text:0040A119                 sub     esp, 96Ch
.text:0040A11F                 mov     eax, [esp+97Ch+arg_0]
.text:0040A126                 mov     [esp+97Ch+var_900], 0
.text:0040A12E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A135                 mov     ebx, [esp+97Ch+arg_4]
.text:0040A13C                 mov     [esp+97Ch+var_8D0], eax
.text:0040A143                 mov     edx, [ecx+14h]
.text:0040A146                 add     eax, ebx
.text:0040A148                 mov     [esp+97Ch+var_8F4], eax
.text:0040A14F                 xor     eax, eax
.text:0040A151                 mov     [esp+97Ch+var_8F8], edx
.text:0040A158                 mov     [esp+97Ch+var_8FC], eax
.text:0040A15F                 mov     [esp+97Ch+var_908], 0
.text:0040A167                 mov     [esp+97Ch+var_90C], 0
.text:0040A16F                 mov     [esp+97Ch+Size], 280h ; Size
.text:0040A176                 call    malloc
.text:0040A17B                 mov     [esp+97Ch+Block], eax
.text:0040A182                 test    eax, eax
.text:0040A184                 jz      loc_40A526
.text:0040A18A                 mov     edi, [esp+97Ch+arg_C]
.text:0040A191                 xor     edx, edx
.text:0040A193                 mov     ecx, 20h ; ' '
.text:0040A198                 mov     [esp+97Ch+var_28], ecx
.text:0040A19F                 mov     ebp, [esp+97Ch+arg_8]
.text:0040A1A6                 mov     [esp+97Ch+var_24], edx
.text:0040A1AD                 and     byte ptr [edi+1Ch], 97h
.text:0040A1B1                 mov     [edi+0Ch], ebp
.text:0040A1B4                 mov     dword ptr [edi+8], 0
.text:0040A1BB                 mov     esi, ds:dword_41B6A0
.text:0040A1C1                 mov     dword ptr [edi+18h], 0
.text:0040A1C8                 test    esi, esi
.text:0040A1CA                 jz      loc_40D401
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: sub_40A110+3351↓j
.text:0040A1D0                 mov     ebx, [esp+97Ch+arg_C]
.text:0040A1D7                 mov     edx, [ebx+4]
.text:0040A1DA                 test    edx, edx
.text:0040A1DC                 jnz     loc_40D3F2
.text:0040A1E2                 mov     eax, [ebx]
.text:0040A1E4                 test    eax, eax
.text:0040A1E6                 jz      loc_40D3D8
.text:0040A1EC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:0040A1F4                 mov     [esp+97Ch+Size], eax ; Block
.text:0040A1F7                 call    realloc
.text:0040A1FC                 mov     [ebx], eax
.text:0040A1FE
.text:0040A1FE loc_40A1FE:                             ; CODE XREF: sub_40A110+32DD↓j
.text:0040A1FE                 mov     esi, [esp+97Ch+arg_C]
.text:0040A205                 mov     edi, [esi]
.text:0040A207                 test    edi, edi
.text:0040A209                 jz      loc_40D3C7
.text:0040A20F                 mov     eax, [esp+97Ch+arg_C]
.text:0040A216                 mov     dword ptr [eax+4], 20h ; ' '
.text:0040A21D
.text:0040A21D loc_40A21D:                             ; CODE XREF: sub_40A110+32EC↓j
.text:0040A21D                 mov     [esp+97Ch+var_950], edi
.text:0040A221                 mov     [esp+97Ch+var_904], edi
.text:0040A225                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A22C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A233                 jz      loc_40A580
.text:0040A239
.text:0040A239 loc_40A239:                             ; CODE XREF: sub_40A110+43D↓j
.text:0040A239                 movzx   ebx, byte ptr [edi]
.text:0040A23C                 inc     edi
.text:0040A23D                 mov     edx, [esp+97Ch+var_8F8]
.text:0040A244                 mov     [esp+97Ch+var_8D0], edi
.text:0040A24B                 test    edx, edx
.text:0040A24D                 mov     [esp+97Ch+var_8EC], bl
.text:0040A254                 jz      short loc_40A26B
.text:0040A256                 mov     edi, [esp+97Ch+var_8F8]
.text:0040A25D                 movzx   ecx, bl
.text:0040A260                 movzx   ebx, byte ptr [ecx+edi]
.text:0040A264                 mov     [esp+97Ch+var_8EC], bl
.text:0040A26B
.text:0040A26B loc_40A26B:                             ; CODE XREF: sub_40A110+144↑j
.text:0040A26B                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040A273                 sub     eax, 0Ah        ; switch 115 cases
.text:0040A276                 cmp     eax, 72h
.text:0040A279                 ja      def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A27F                 jmp     ds:jpt_40A27F[eax*4] ; switch jump
.text:0040A27F ; ---------------------------------------------------------------------------
.text:0040A286                 align 4
.text:0040A288 jpt_40A27F      dd offset loc_40A975, offset def_40A27F, offset def_40A27F
.text:0040A288                                         ; DATA XREF: sub_40A110+16F↑r
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F ; jump table for switch statement
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset loc_40ABAD
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset loc_40ACBC, offset loc_40AEA6, offset loc_40B170
.text:0040A288                 dd offset loc_40B7E4, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset loc_40B700, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset loc_40B7E4
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset loc_40B7FA, offset loc_40C386, offset def_40A27F
.text:0040A288                 dd offset loc_40A454, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset def_40A27F
.text:0040A288                 dd offset def_40A27F, offset def_40A27F, offset loc_40D394
.text:0040A288                 dd offset loc_40D3B2
.text:0040A454 ; ---------------------------------------------------------------------------
.text:0040A454
.text:0040A454 loc_40A454:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040A454                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040A454                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0040A27F case 94
.text:0040A45B                 mov     edx, [esp+97Ch+var_8D0]
.text:0040A462                 inc     esi
.text:0040A463                 cmp     edx, esi
.text:0040A465                 jz      short loc_40A475
.text:0040A467                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040A46F                 jz      loc_40A6BD
.text:0040A475
.text:0040A475 loc_40A475:                             ; CODE XREF: sub_40A110+355↑j
.text:0040A475                                         ; sub_40A110+3D7↓j ...
.text:0040A475                 mov     eax, [esp+97Ch+arg_C]
.text:0040A47C                 mov     ebp, [esp+97Ch+var_950]
.text:0040A480                 mov     edi, [eax]
.text:0040A482                 mov     edx, [eax+4]
.text:0040A485                 sub     ebp, edi
.text:0040A487                 inc     ebp
.text:0040A488                 cmp     ebp, edx
.text:0040A48A                 jbe     loc_40A533
.text:0040A490                 cmp     edx, 10000h
.text:0040A496                 mov     ebp, 0Fh
.text:0040A49B                 jz      loc_40A526
.text:0040A4A1                 lea     ebx, [edx+edx]
.text:0040A4A4                 mov     edx, [esp+97Ch+arg_C]
.text:0040A4AB                 cmp     ebx, 10000h
.text:0040A4B1                 mov     [edx+4], ebx
.text:0040A4B4                 jbe     short loc_40A4BD
.text:0040A4B6                 mov     dword ptr [edx+4], 10000h
.text:0040A4BD
.text:0040A4BD loc_40A4BD:                             ; CODE XREF: sub_40A110+3A4↑j
.text:0040A4BD                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A4C4                 mov     esi, [ebp+4]
.text:0040A4C7                 mov     ebp, 0Ch
.text:0040A4CC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A4CF                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040A4D3                 call    realloc
.text:0040A4D8                 mov     edx, [esp+97Ch+arg_C]
.text:0040A4DF                 test    eax, eax
.text:0040A4E1                 mov     [edx], eax
.text:0040A4E3                 jz      short loc_40A526
.text:0040A4E5                 cmp     edi, eax
.text:0040A4E7                 jz      short loc_40A475
.text:0040A4E9                 mov     ecx, [esp+97Ch+var_908]
.text:0040A4ED                 sub     eax, edi
.text:0040A4EF                 add     [esp+97Ch+var_950], eax
.text:0040A4F3                 add     [esp+97Ch+var_904], eax
.text:0040A4F7                 test    ecx, ecx
.text:0040A4F9                 jz      short loc_40A4FF
.text:0040A4FB                 add     [esp+97Ch+var_908], eax
.text:0040A4FF
.text:0040A4FF loc_40A4FF:                             ; CODE XREF: sub_40A110+3E9↑j
.text:0040A4FF                 mov     ebx, [esp+97Ch+var_900]
.text:0040A503                 test    ebx, ebx
.text:0040A505                 jz      short loc_40A50B
.text:0040A507                 add     [esp+97Ch+var_900], eax
.text:0040A50B
.text:0040A50B loc_40A50B:                             ; CODE XREF: sub_40A110+3F5↑j
.text:0040A50B                 mov     edi, [esp+97Ch+var_8FC]
.text:0040A512                 test    edi, edi
.text:0040A514                 jz      loc_40A475
.text:0040A51A                 add     [esp+97Ch+var_8FC], eax
.text:0040A521                 jmp     loc_40A475
.text:0040A526 ; ---------------------------------------------------------------------------
.text:0040A526
.text:0040A526 loc_40A526:                             ; CODE XREF: sub_40A110+74↑j
.text:0040A526                                         ; sub_40A110+38B↑j ...
.text:0040A526                 add     esp, 96Ch
.text:0040A52C                 mov     eax, ebp
.text:0040A52E                 pop     ebx
.text:0040A52F                 pop     esi
.text:0040A530                 pop     edi
.text:0040A531                 pop     ebp
.text:0040A532                 retn
.text:0040A533 ; ---------------------------------------------------------------------------
.text:0040A533
.text:0040A533 loc_40A533:                             ; CODE XREF: sub_40A110+37A↑j
.text:0040A533                 mov     edi, [esp+97Ch+var_950]
.text:0040A537                 mov     byte ptr [edi], 9
.text:0040A53A
.text:0040A53A loc_40A53A:                             ; CODE XREF: sub_40A110+16CF↓j
.text:0040A53A                                         ; sub_40A110+2518↓j ...
.text:0040A53A                 inc     edi
.text:0040A53B
.text:0040A53B loc_40A53B:                             ; CODE XREF: sub_40A110+1496↓j
.text:0040A53B                 mov     [esp+97Ch+var_950], edi
.text:0040A53F
.text:0040A53F loc_40A53F:                             ; CODE XREF: sub_40A110+7DA↓j
.text:0040A53F                                         ; sub_40A110+A98↓j ...
.text:0040A53F                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A546                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A54D                 jnz     loc_40A239
.text:0040A553                 mov     ebx, [esp+97Ch+var_908]
.text:0040A557                 test    ebx, ebx
.text:0040A559                 jz      short loc_40A580
.text:0040A55B                 mov     [esp+97Ch+Size], 0Eh
.text:0040A562                 mov     ebp, [esp+97Ch+var_950]
.text:0040A566                 mov     edx, [esp+97Ch+var_908]
.text:0040A56A                 mov     esi, [esp+97Ch+var_908]
.text:0040A56E                 sub     ebp, edx
.text:0040A570                 sub     ebp, 3
.text:0040A573                 mov     [esp+97Ch+var_974], ebp
.text:0040A577                 mov     [esp+97Ch+var_978], esi
.text:0040A57B                 call    sub_406EE0
.text:0040A580
.text:0040A580 loc_40A580:                             ; CODE XREF: sub_40A110+123↑j
.text:0040A580                                         ; sub_40A110+449↑j
.text:0040A580                 mov     eax, [esp+97Ch+var_24]
.text:0040A587                 test    eax, eax
.text:0040A589                 jnz     loc_40A6A4
.text:0040A58F                 test    [esp+97Ch+arg_8], 40000h
.text:0040A59A                 jz      loc_40A673
.text:0040A5A0                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A5A7                 mov     ebp, [esp+97Ch+var_950]
.text:0040A5AB                 mov     ebx, [ecx]
.text:0040A5AD                 mov     edx, [ecx+4]
.text:0040A5B0                 sub     ebp, ebx
.text:0040A5B2                 mov     edi, ebx
.text:0040A5B4                 inc     ebp
.text:0040A5B5                 cmp     ebp, edx
.text:0040A5B7                 jbe     loc_40A667
.text:0040A5BD
.text:0040A5BD loc_40A5BD:                             ; CODE XREF: sub_40A110+551↓j
.text:0040A5BD                 cmp     edx, 10000h
.text:0040A5C3                 mov     ebp, 0Fh
.text:0040A5C8                 jz      loc_40A526
.text:0040A5CE                 mov     esi, [esp+97Ch+arg_C]
.text:0040A5D5                 lea     ebp, [edx+edx]
.text:0040A5D8                 cmp     ebp, 10000h
.text:0040A5DE                 mov     [esi+4], ebp
.text:0040A5E1                 jbe     short loc_40A5EA
.text:0040A5E3                 mov     dword ptr [esi+4], 10000h
.text:0040A5EA
.text:0040A5EA loc_40A5EA:                             ; CODE XREF: sub_40A110+4D1↑j
.text:0040A5EA                 mov     eax, [esp+97Ch+arg_C]
.text:0040A5F1                 mov     ebp, 0Ch
.text:0040A5F6                 mov     esi, [eax+4]
.text:0040A5F9                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A5FC                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040A600                 call    realloc
.text:0040A605                 mov     edx, [esp+97Ch+arg_C]
.text:0040A60C                 test    eax, eax
.text:0040A60E                 mov     [edx], eax
.text:0040A610                 jz      loc_40A526
.text:0040A616                 cmp     ebx, eax
.text:0040A618                 jz      short loc_40A64A
.text:0040A61A                 mov     edi, [esp+97Ch+var_908]
.text:0040A61E                 sub     eax, ebx
.text:0040A620                 add     [esp+97Ch+var_950], eax
.text:0040A624                 test    edi, edi
.text:0040A626                 jz      short loc_40A62C
.text:0040A628                 add     [esp+97Ch+var_908], eax
.text:0040A62C
.text:0040A62C loc_40A62C:                             ; CODE XREF: sub_40A110+516↑j
.text:0040A62C                 mov     ebx, [esp+97Ch+var_900]
.text:0040A630                 test    ebx, ebx
.text:0040A632                 jz      short loc_40A638
.text:0040A634                 add     [esp+97Ch+var_900], eax
.text:0040A638
.text:0040A638 loc_40A638:                             ; CODE XREF: sub_40A110+522↑j
.text:0040A638                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040A63F                 test    ecx, ecx
.text:0040A641                 jz      short loc_40A64A
.text:0040A643                 add     [esp+97Ch+var_8FC], eax
.text:0040A64A
.text:0040A64A loc_40A64A:                             ; CODE XREF: sub_40A110+508↑j
.text:0040A64A                                         ; sub_40A110+531↑j
.text:0040A64A                 mov     eax, [esp+97Ch+arg_C]
.text:0040A651                 mov     ebp, [esp+97Ch+var_950]
.text:0040A655                 mov     ebx, [eax]
.text:0040A657                 mov     edx, [eax+4]
.text:0040A65A                 sub     ebp, ebx
.text:0040A65C                 mov     edi, ebx
.text:0040A65E                 inc     ebp
.text:0040A65F                 cmp     ebp, edx
.text:0040A661                 ja      loc_40A5BD
.text:0040A667
.text:0040A667 loc_40A667:                             ; CODE XREF: sub_40A110+4A7↑j
.text:0040A667                 mov     edx, [esp+97Ch+var_950]
.text:0040A66B                 mov     byte ptr [edx], 1
.text:0040A66E                 inc     edx
.text:0040A66F                 mov     [esp+97Ch+var_950], edx
.text:0040A673
.text:0040A673 loc_40A673:                             ; CODE XREF: sub_40A110+48A↑j
.text:0040A673                 mov     ebp, [esp+97Ch+Block]
.text:0040A67A                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040A67D                 xor     ebp, ebp
.text:0040A67F                 call    free
.text:0040A684                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A68B                 mov     esi, [esp+97Ch+arg_C]
.text:0040A692                 mov     ebx, [ecx]
.text:0040A694                 sub     [esp+97Ch+var_950], ebx
.text:0040A698                 mov     edi, [esp+97Ch+var_950]
.text:0040A69C                 mov     [esi+8], edi
.text:0040A69F                 jmp     loc_40A526
.text:0040A6A4 ; ---------------------------------------------------------------------------
.text:0040A6A4
.text:0040A6A4 loc_40A6A4:                             ; CODE XREF: sub_40A110+479↑j
.text:0040A6A4                 mov     edi, [esp+97Ch+Block]
.text:0040A6AB                 mov     ebp, 8
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: sub_40A110+15BC↓j
.text:0040A6B0                                         ; sub_40A110+32C3↓j
.text:0040A6B0                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A6B3
.text:0040A6B3 loc_40A6B3:                             ; CODE XREF: sub_40A110+EDF↓j
.text:0040A6B3                                         ; sub_40A110+1C4C↓j ...
.text:0040A6B3                 call    free
.text:0040A6B8                 jmp     loc_40A526
.text:0040A6BD ; ---------------------------------------------------------------------------
.text:0040A6BD
.text:0040A6BD loc_40A6BD:                             ; CODE XREF: sub_40A110+35F↑j
.text:0040A6BD                 mov     [esp+97Ch+var_978], edx
.text:0040A6C1                 mov     eax, [esp+97Ch+arg_8]
.text:0040A6C8                 mov     ebp, [esp+97Ch+arg_0]
.text:0040A6CF                 mov     [esp+97Ch+var_974], eax
.text:0040A6D3                 mov     [esp+97Ch+Size], ebp
.text:0040A6D6                 call    sub_406FC0
.text:0040A6DB                 test    al, al
.text:0040A6DD                 jnz     loc_40A475
.text:0040A6E3
.text:0040A6E3 def_40A27F:                             ; CODE XREF: sub_40A110+169↑j
.text:0040A6E3                                         ; sub_40A110+16F↑j ...
.text:0040A6E3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A6EA                 test    edx, edx
.text:0040A6EC                 jz      short loc_40A709
.text:0040A6EE                 mov     eax, [esp+97Ch+var_8FC]
.text:0040A6F5                 movzx   edx, byte ptr [eax]
.text:0040A6F8                 movzx   ebx, dl
.text:0040A6FB                 lea     ebp, [ebx+eax+1]
.text:0040A6FF                 cmp     ebp, [esp+97Ch+var_950]
.text:0040A703                 jz      loc_40A8EF
.text:0040A709
.text:0040A709 loc_40A709:                             ; CODE XREF: sub_40A110+5DC↑j
.text:0040A709                                         ; sub_40A110+7E1↓j ...
.text:0040A709                 mov     edi, [esp+97Ch+var_950]
.text:0040A70D                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A714                 mov     ecx, [esp+97Ch+var_950]
.text:0040A718                 mov     [esp+97Ch+var_900], edi
.text:0040A71C                 mov     edi, [ebp+0]
.text:0040A71F                 mov     edx, [ebp+4]
.text:0040A722                 sub     ecx, edi
.text:0040A724                 mov     ebx, edi
.text:0040A726                 add     ecx, 2
.text:0040A729                 cmp     ecx, edx
.text:0040A72B                 jbe     loc_40A7E8
.text:0040A731
.text:0040A731 loc_40A731:                             ; CODE XREF: sub_40A110+6D2↓j
.text:0040A731                 cmp     edx, 10000h
.text:0040A737                 mov     ebp, 0Fh
.text:0040A73C                 jz      loc_40A526
.text:0040A742                 lea     esi, [edx+edx]
.text:0040A745                 mov     edx, [esp+97Ch+arg_C]
.text:0040A74C                 cmp     esi, 10000h
.text:0040A752                 mov     [edx+4], esi
.text:0040A755                 jbe     short loc_40A75E
.text:0040A757                 mov     dword ptr [edx+4], 10000h
.text:0040A75E
.text:0040A75E loc_40A75E:                             ; CODE XREF: sub_40A110+645↑j
.text:0040A75E                 mov     eax, [esp+97Ch+arg_C]
.text:0040A765                 mov     ebp, [eax+4]
.text:0040A768                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A76B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040A76F                 mov     ebp, 0Ch
.text:0040A774                 call    realloc
.text:0040A779                 mov     edx, [esp+97Ch+arg_C]
.text:0040A780                 test    eax, eax
.text:0040A782                 mov     [edx], eax
.text:0040A784                 jz      loc_40A526
.text:0040A78A                 cmp     ebx, eax
.text:0040A78C                 jz      short loc_40A7C2
.text:0040A78E                 sub     eax, ebx
.text:0040A790                 mov     ebx, [esp+97Ch+var_908]
.text:0040A794                 add     [esp+97Ch+var_950], eax
.text:0040A798                 add     [esp+97Ch+var_904], eax
.text:0040A79C                 test    ebx, ebx
.text:0040A79E                 jz      short loc_40A7A4
.text:0040A7A0                 add     [esp+97Ch+var_908], eax
.text:0040A7A4
.text:0040A7A4 loc_40A7A4:                             ; CODE XREF: sub_40A110+68E↑j
.text:0040A7A4                 mov     ecx, [esp+97Ch+var_900]
.text:0040A7A8                 test    ecx, ecx
.text:0040A7AA                 jz      short loc_40A7B0
.text:0040A7AC                 add     [esp+97Ch+var_900], eax
.text:0040A7B0
.text:0040A7B0 loc_40A7B0:                             ; CODE XREF: sub_40A110+69A↑j
.text:0040A7B0                 mov     edi, [esp+97Ch+var_8FC]
.text:0040A7B7                 test    edi, edi
.text:0040A7B9                 jz      short loc_40A7C2
.text:0040A7BB                 add     [esp+97Ch+var_8FC], eax
.text:0040A7C2
.text:0040A7C2 loc_40A7C2:                             ; CODE XREF: sub_40A110+67C↑j
.text:0040A7C2                                         ; sub_40A110+6A9↑j
.text:0040A7C2                 mov     edx, [esp+97Ch+arg_C]
.text:0040A7C9                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A7D0                 mov     esi, [esp+97Ch+var_950]
.text:0040A7D4                 mov     edi, [edx]
.text:0040A7D6                 mov     edx, [ebp+4]
.text:0040A7D9                 sub     esi, edi
.text:0040A7DB                 add     esi, 2
.text:0040A7DE                 mov     ebx, edi
.text:0040A7E0                 cmp     esi, edx
.text:0040A7E2                 ja      loc_40A731
.text:0040A7E8
.text:0040A7E8 loc_40A7E8:                             ; CODE XREF: sub_40A110+61B↑j
.text:0040A7E8                 mov     eax, [esp+97Ch+var_950]
.text:0040A7EC                 mov     byte ptr [eax], 2
.text:0040A7EF                 inc     eax
.text:0040A7F0                 mov     byte ptr [eax], 0
.text:0040A7F3                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A7FA                 inc     eax
.text:0040A7FB                 mov     [esp+97Ch+var_950], eax
.text:0040A7FF                 dec     eax
.text:0040A800                 mov     edi, [ecx]
.text:0040A802                 mov     [esp+97Ch+var_8FC], eax
.text:0040A809                 mov     edx, [ecx+4]
.text:0040A80C                 mov     eax, [esp+97Ch+var_950]
.text:0040A810                 mov     ebx, edi
.text:0040A812                 sub     eax, edi
.text:0040A814
.text:0040A814 loc_40A814:                             ; CODE XREF: sub_40A110+7B9↓j
.text:0040A814                 inc     eax
.text:0040A815                 cmp     eax, edx
.text:0040A817                 jbe     loc_40A8CE
.text:0040A81D                 cmp     edx, 10000h
.text:0040A823                 mov     ebp, 0Fh
.text:0040A828                 jz      loc_40A526
.text:0040A82E                 lea     esi, [edx+edx]
.text:0040A831                 mov     edx, [esp+97Ch+arg_C]
.text:0040A838                 cmp     esi, 10000h
.text:0040A83E                 mov     [edx+4], esi
.text:0040A841                 jbe     short loc_40A84A
.text:0040A843                 mov     dword ptr [edx+4], 10000h
.text:0040A84A
.text:0040A84A loc_40A84A:                             ; CODE XREF: sub_40A110+731↑j
.text:0040A84A                 mov     edx, [esp+97Ch+arg_C]
.text:0040A851                 mov     ebp, [edx+4]
.text:0040A854                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A857                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040A85B                 mov     ebp, 0Ch
.text:0040A860                 call    realloc
.text:0040A865                 mov     edi, [esp+97Ch+arg_C]
.text:0040A86C                 test    eax, eax
.text:0040A86E                 mov     [edi], eax
.text:0040A870                 jz      loc_40A526
.text:0040A876                 cmp     ebx, eax
.text:0040A878                 jz      short loc_40A8AE
.text:0040A87A                 mov     ecx, [esp+97Ch+var_908]
.text:0040A87E                 sub     eax, ebx
.text:0040A880                 add     [esp+97Ch+var_950], eax
.text:0040A884                 add     [esp+97Ch+var_904], eax
.text:0040A888                 test    ecx, ecx
.text:0040A88A                 jz      short loc_40A890
.text:0040A88C                 add     [esp+97Ch+var_908], eax
.text:0040A890
.text:0040A890 loc_40A890:                             ; CODE XREF: sub_40A110+77A↑j
.text:0040A890                 mov     ebx, [esp+97Ch+var_900]
.text:0040A894                 test    ebx, ebx
.text:0040A896                 jz      short loc_40A89C
.text:0040A898                 add     [esp+97Ch+var_900], eax
.text:0040A89C
.text:0040A89C loc_40A89C:                             ; CODE XREF: sub_40A110+786↑j
.text:0040A89C                 mov     esi, [esp+97Ch+var_8FC]
.text:0040A8A3                 test    esi, esi
.text:0040A8A5                 jz      short loc_40A8AE
.text:0040A8A7                 add     [esp+97Ch+var_8FC], eax
.text:0040A8AE
.text:0040A8AE loc_40A8AE:                             ; CODE XREF: sub_40A110+768↑j
.text:0040A8AE                                         ; sub_40A110+795↑j ...
.text:0040A8AE                 mov     edx, [esp+97Ch+arg_C]
.text:0040A8B5                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A8BC                 mov     eax, [esp+97Ch+var_950]
.text:0040A8C0                 mov     edi, [edx]
.text:0040A8C2                 mov     edx, [ebp+4]
.text:0040A8C5                 sub     eax, edi
.text:0040A8C7                 mov     ebx, edi
.text:0040A8C9                 jmp     loc_40A814
.text:0040A8CE ; ---------------------------------------------------------------------------
.text:0040A8CE
.text:0040A8CE loc_40A8CE:                             ; CODE XREF: sub_40A110+707↑j
.text:0040A8CE                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040A8D6                 mov     edi, [esp+97Ch+var_950]
.text:0040A8DA                 mov     [edi], cl
.text:0040A8DC                 mov     eax, [esp+97Ch+var_8FC]
.text:0040A8E3                 inc     edi
.text:0040A8E4                 mov     [esp+97Ch+var_950], edi
.text:0040A8E8                 inc     byte ptr [eax]
.text:0040A8EA                 jmp     loc_40A53F
.text:0040A8EF ; ---------------------------------------------------------------------------
.text:0040A8EF
.text:0040A8EF loc_40A8EF:                             ; CODE XREF: sub_40A110+5F3↑j
.text:0040A8EF                 inc     dl
.text:0040A8F1                 jz      loc_40A709
.text:0040A8F7                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A8FE                 mov     edx, edi
.text:0040A900                 movzx   eax, byte ptr [edi]
.text:0040A903                 cmp     al, 2Ah ; '*'
.text:0040A905                 jz      loc_40A709
.text:0040A90B                 cmp     al, 5Eh ; '^'
.text:0040A90D                 jz      loc_40A709
.text:0040A913                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040A91B                 jz      short loc_40A964
.text:0040A91D                 cmp     al, 5Ch ; '\'
.text:0040A91F                 jz      short loc_40A960
.text:0040A921
.text:0040A921 loc_40A921:                             ; CODE XREF: sub_40A110+85E↓j
.text:0040A921                 test    [esp+97Ch+arg_8], 200h
.text:0040A92C                 jz      short loc_40A8AE
.text:0040A92E                 test    [esp+97Ch+arg_8], 1000h
.text:0040A939                 jz      short loc_40A950
.text:0040A93B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0040A93E
.text:0040A93E loc_40A93E:                             ; CODE XREF: sub_40A110+84D↓j
.text:0040A93E                 jnz     loc_40A8AE
.text:0040A944                 jmp     loc_40A709
.text:0040A944 ; ---------------------------------------------------------------------------
.text:0040A949                 align 10h
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: sub_40A110+829↑j
.text:0040A950                 cmp     byte ptr [edx], 5Ch ; '\'
.text:0040A953                 jnz     loc_40A8AE
.text:0040A959                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:0040A95D                 jmp     short loc_40A93E
.text:0040A95D ; ---------------------------------------------------------------------------
.text:0040A95F                 align 10h
.text:0040A960
.text:0040A960 loc_40A960:                             ; CODE XREF: sub_40A110+80F↑j
.text:0040A960                 movzx   eax, byte ptr [edi+1]
.text:0040A964
.text:0040A964 loc_40A964:                             ; CODE XREF: sub_40A110+80B↑j
.text:0040A964                 cmp     al, 2Bh ; '+'
.text:0040A966                 jz      loc_40A709
.text:0040A96C                 cmp     al, 3Fh ; '?'
.text:0040A96E                 jnz     short loc_40A921
.text:0040A970                 jmp     loc_40A709
.text:0040A975 ; ---------------------------------------------------------------------------
.text:0040A975
.text:0040A975 loc_40A975:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040A975                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040A975                 test    [esp+97Ch+arg_8], 800h ; jumptable 0040A27F case 10
.text:0040A980
.text:0040A980 loc_40A980:                             ; CODE XREF: sub_40A110+32B2↓j
.text:0040A980                 jz      def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A986
.text:0040A986 loc_40A986:                             ; CODE XREF: sub_40A110+3279↓j
.text:0040A986                 test    [esp+97Ch+arg_8], 400h
.text:0040A991                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A997
.text:0040A997 loc_40A997:                             ; CODE XREF: sub_40A110+8FF↓j
.text:0040A997                                         ; sub_40A110+92C↓j ...
.text:0040A997                 mov     eax, [esp+97Ch+arg_C]
.text:0040A99E                 mov     ebp, [esp+97Ch+var_950]
.text:0040A9A2                 mov     edi, [eax]
.text:0040A9A4                 mov     edx, [eax+4]
.text:0040A9A7                 sub     ebp, edi
.text:0040A9A9                 add     ebp, 3
.text:0040A9AC                 cmp     ebp, edx
.text:0040A9AE                 jbe     loc_40AA4E
.text:0040A9B4                 cmp     edx, 10000h
.text:0040A9BA                 mov     ebp, 0Fh
.text:0040A9BF                 jz      loc_40A526
.text:0040A9C5                 lea     ebx, [edx+edx]
.text:0040A9C8                 mov     edx, [esp+97Ch+arg_C]
.text:0040A9CF                 cmp     ebx, 10000h
.text:0040A9D5                 mov     [edx+4], ebx
.text:0040A9D8                 jbe     short loc_40A9E1
.text:0040A9DA                 mov     dword ptr [edx+4], 10000h
.text:0040A9E1
.text:0040A9E1 loc_40A9E1:                             ; CODE XREF: sub_40A110+8C8↑j
.text:0040A9E1                 mov     eax, [esp+97Ch+arg_C]
.text:0040A9E8                 mov     ebp, [eax+4]
.text:0040A9EB                 mov     [esp+97Ch+Size], edi ; Block
.text:0040A9EE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040A9F2                 mov     ebp, 0Ch
.text:0040A9F7                 call    realloc
.text:0040A9FC                 mov     esi, [esp+97Ch+arg_C]
.text:0040AA03                 test    eax, eax
.text:0040AA05                 mov     [esi], eax
.text:0040AA07                 jz      loc_40A526
.text:0040AA0D                 cmp     edi, eax
.text:0040AA0F                 jz      short loc_40A997
.text:0040AA11                 mov     ecx, [esp+97Ch+var_908]
.text:0040AA15                 sub     eax, edi
.text:0040AA17                 add     [esp+97Ch+var_950], eax
.text:0040AA1B                 add     [esp+97Ch+var_904], eax
.text:0040AA1F                 test    ecx, ecx
.text:0040AA21                 jz      short loc_40AA27
.text:0040AA23                 add     [esp+97Ch+var_908], eax
.text:0040AA27
.text:0040AA27 loc_40AA27:                             ; CODE XREF: sub_40A110+911↑j
.text:0040AA27                 mov     edx, [esp+97Ch+var_900]
.text:0040AA2B                 test    edx, edx
.text:0040AA2D                 jz      short loc_40AA33
.text:0040AA2F                 add     [esp+97Ch+var_900], eax
.text:0040AA33
.text:0040AA33 loc_40AA33:                             ; CODE XREF: sub_40A110+91D↑j
.text:0040AA33                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040AA3A                 test    ebx, ebx
.text:0040AA3C                 jz      loc_40A997
.text:0040AA42                 add     [esp+97Ch+var_8FC], eax
.text:0040AA49                 jmp     loc_40A997
.text:0040AA4E ; ---------------------------------------------------------------------------
.text:0040AA4E
.text:0040AA4E loc_40AA4E:                             ; CODE XREF: sub_40A110+89E↑j
.text:0040AA4E                 mov     [esp+97Ch+Size], 0Fh
.text:0040AA55                 mov     edi, [esp+97Ch+var_950]
.text:0040AA59                 mov     ebp, [esp+97Ch+var_904]
.text:0040AA5D                 mov     edx, [esp+97Ch+var_904]
.text:0040AA61                 mov     ebx, edi
.text:0040AA63                 sub     ebx, ebp
.text:0040AA65                 mov     [esp+97Ch+var_970], edi
.text:0040AA69                 add     ebx, 3
.text:0040AA6C                 add     edi, 3
.text:0040AA6F                 mov     [esp+97Ch+var_974], ebx
.text:0040AA73                 mov     [esp+97Ch+var_978], edx
.text:0040AA77                 call    sub_406F30
.text:0040AA7C                 mov     [esp+97Ch+var_950], edi
.text:0040AA80                 mov     esi, [esp+97Ch+var_908]
.text:0040AA84                 xor     ecx, ecx
.text:0040AA86                 mov     [esp+97Ch+var_8FC], ecx
.text:0040AA8D                 test    esi, esi
.text:0040AA8F                 jz      short loc_40AAB4
.text:0040AA91                 mov     [esp+97Ch+Size], 0Eh
.text:0040AA98                 mov     eax, [esp+97Ch+var_908]
.text:0040AA9C                 mov     esi, edi
.text:0040AA9E                 mov     edi, [esp+97Ch+var_908]
.text:0040AAA2                 sub     esi, eax
.text:0040AAA4                 sub     esi, 3
.text:0040AAA7                 mov     [esp+97Ch+var_974], esi
.text:0040AAAB                 mov     [esp+97Ch+var_978], edi
.text:0040AAAF                 call    sub_406EE0
.text:0040AAB4
.text:0040AAB4 loc_40AAB4:                             ; CODE XREF: sub_40A110+97F↑j
.text:0040AAB4                 mov     esi, [esp+97Ch+arg_C]
.text:0040AABB                 mov     edx, [esp+97Ch+var_950]
.text:0040AABF                 mov     ecx, [esp+97Ch+arg_C]
.text:0040AAC6                 mov     edi, [esi]
.text:0040AAC8                 mov     ebp, edx
.text:0040AACA                 mov     [esp+97Ch+var_908], edx
.text:0040AACE                 mov     edx, [ecx+4]
.text:0040AAD1                 sub     ebp, edi
.text:0040AAD3                 add     ebp, 3
.text:0040AAD6                 mov     ebx, edi
.text:0040AAD8                 cmp     ebp, edx
.text:0040AADA                 jbe     loc_40AB93
.text:0040AAE0
.text:0040AAE0 loc_40AAE0:                             ; CODE XREF: sub_40A110+A7D↓j
.text:0040AAE0                 cmp     edx, 10000h
.text:0040AAE6                 mov     ebp, 0Fh
.text:0040AAEB                 jz      loc_40A526
.text:0040AAF1                 lea     ebp, [edx+edx]
.text:0040AAF4                 mov     edx, [esp+97Ch+arg_C]
.text:0040AAFB                 cmp     ebp, 10000h
.text:0040AB01                 mov     [edx+4], ebp
.text:0040AB04                 jbe     short loc_40AB0D
.text:0040AB06                 mov     dword ptr [edx+4], 10000h
.text:0040AB0D
.text:0040AB0D loc_40AB0D:                             ; CODE XREF: sub_40A110+9F4↑j
.text:0040AB0D                 mov     eax, [esp+97Ch+arg_C]
.text:0040AB14                 mov     ebp, 0Ch
.text:0040AB19                 mov     edx, [eax+4]
.text:0040AB1C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AB1F                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040AB23                 call    realloc
.text:0040AB28                 mov     edi, [esp+97Ch+arg_C]
.text:0040AB2F                 test    eax, eax
.text:0040AB31                 mov     [edi], eax
.text:0040AB33                 jz      loc_40A526
.text:0040AB39                 cmp     ebx, eax
.text:0040AB3B                 jz      short loc_40AB6D
.text:0040AB3D                 sub     eax, ebx
.text:0040AB3F                 mov     ebx, [esp+97Ch+var_908]
.text:0040AB43                 add     [esp+97Ch+var_950], eax
.text:0040AB47                 test    ebx, ebx
.text:0040AB49                 jz      short loc_40AB4F
.text:0040AB4B                 add     [esp+97Ch+var_908], eax
.text:0040AB4F
.text:0040AB4F loc_40AB4F:                             ; CODE XREF: sub_40A110+A39↑j
.text:0040AB4F                 mov     ecx, [esp+97Ch+var_900]
.text:0040AB53                 test    ecx, ecx
.text:0040AB55                 jz      short loc_40AB5B
.text:0040AB57                 add     [esp+97Ch+var_900], eax
.text:0040AB5B
.text:0040AB5B loc_40AB5B:                             ; CODE XREF: sub_40A110+A45↑j
.text:0040AB5B                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040AB62                 test    ebp, ebp
.text:0040AB64                 jz      short loc_40AB6D
.text:0040AB66                 add     [esp+97Ch+var_8FC], eax
.text:0040AB6D
.text:0040AB6D loc_40AB6D:                             ; CODE XREF: sub_40A110+A2B↑j
.text:0040AB6D                                         ; sub_40A110+A54↑j
.text:0040AB6D                 mov     edx, [esp+97Ch+arg_C]
.text:0040AB74                 mov     eax, [esp+97Ch+arg_C]
.text:0040AB7B                 mov     esi, [esp+97Ch+var_950]
.text:0040AB7F                 mov     edi, [edx]
.text:0040AB81                 mov     edx, [eax+4]
.text:0040AB84                 sub     esi, edi
.text:0040AB86                 add     esi, 3
.text:0040AB89                 mov     ebx, edi
.text:0040AB8B                 cmp     esi, edx
.text:0040AB8D                 ja      loc_40AAE0
.text:0040AB93
.text:0040AB93 loc_40AB93:                             ; CODE XREF: sub_40A110+9CA↑j
.text:0040AB93                 add     [esp+97Ch+var_950], 3
.text:0040AB98                 mov     [esp+97Ch+var_900], 0
.text:0040ABA0                 mov     edi, [esp+97Ch+var_950]
.text:0040ABA4                 mov     [esp+97Ch+var_904], edi
.text:0040ABA8                 jmp     loc_40A53F
.text:0040ABAD ; ---------------------------------------------------------------------------
.text:0040ABAD
.text:0040ABAD loc_40ABAD:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040ABAD                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040ABAD                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040A27F case 36
.text:0040ABB4                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040ABBB                 jz      short loc_40ABCB
.text:0040ABBD                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040ABC5                 jz      loc_40AC91
.text:0040ABCB
.text:0040ABCB loc_40ABCB:                             ; CODE XREF: sub_40A110+AAB↑j
.text:0040ABCB                                         ; sub_40A110+B31↓j ...
.text:0040ABCB                 mov     ecx, [esp+97Ch+arg_C]
.text:0040ABD2                 mov     eax, [esp+97Ch+arg_C]
.text:0040ABD9                 mov     ebx, [esp+97Ch+var_950]
.text:0040ABDD                 mov     edi, [ecx]
.text:0040ABDF                 mov     edx, [eax+4]
.text:0040ABE2                 sub     ebx, edi
.text:0040ABE4                 inc     ebx
.text:0040ABE5                 cmp     ebx, edx
.text:0040ABE7                 jbe     loc_40AC80
.text:0040ABED                 cmp     edx, 10000h
.text:0040ABF3                 mov     ebp, 0Fh
.text:0040ABF8                 jz      loc_40A526
.text:0040ABFE                 mov     ebx, [esp+97Ch+arg_C]
.text:0040AC05                 lea     ecx, [edx+edx]
.text:0040AC08                 cmp     ecx, 10000h
.text:0040AC0E                 mov     [ebx+4], ecx
.text:0040AC11                 jbe     short loc_40AC1A
.text:0040AC13                 mov     dword ptr [ebx+4], 10000h
.text:0040AC1A
.text:0040AC1A loc_40AC1A:                             ; CODE XREF: sub_40A110+B01↑j
.text:0040AC1A                 mov     ebx, [esp+97Ch+arg_C]
.text:0040AC21                 mov     ebp, [ebx+4]
.text:0040AC24                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AC27                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040AC2B                 mov     ebp, 0Ch
.text:0040AC30                 call    realloc
.text:0040AC35                 mov     [ebx], eax
.text:0040AC37                 test    eax, eax
.text:0040AC39                 jz      loc_40A526
.text:0040AC3F                 cmp     edi, eax
.text:0040AC41                 jz      short loc_40ABCB
.text:0040AC43                 sub     eax, edi
.text:0040AC45                 mov     edi, [esp+97Ch+var_908]
.text:0040AC49                 add     [esp+97Ch+var_950], eax
.text:0040AC4D                 add     [esp+97Ch+var_904], eax
.text:0040AC51                 test    edi, edi
.text:0040AC53                 jz      short loc_40AC59
.text:0040AC55                 add     [esp+97Ch+var_908], eax
.text:0040AC59
.text:0040AC59 loc_40AC59:                             ; CODE XREF: sub_40A110+B43↑j
.text:0040AC59                 mov     edx, [esp+97Ch+var_900]
.text:0040AC5D                 test    edx, edx
.text:0040AC5F                 jz      short loc_40AC65
.text:0040AC61                 add     [esp+97Ch+var_900], eax
.text:0040AC65
.text:0040AC65 loc_40AC65:                             ; CODE XREF: sub_40A110+B4F↑j
.text:0040AC65                 mov     esi, [esp+97Ch+var_8FC]
.text:0040AC6C                 test    esi, esi
.text:0040AC6E                 jz      loc_40ABCB
.text:0040AC74                 add     [esp+97Ch+var_8FC], eax
.text:0040AC7B                 jmp     loc_40ABCB
.text:0040AC80 ; ---------------------------------------------------------------------------
.text:0040AC80
.text:0040AC80 loc_40AC80:                             ; CODE XREF: sub_40A110+AD7↑j
.text:0040AC80                 mov     ebx, [esp+97Ch+var_950]
.text:0040AC84                 mov     byte ptr [ebx], 0Ah
.text:0040AC87
.text:0040AC87 loc_40AC87:                             ; CODE XREF: sub_40A110+1059↓j
.text:0040AC87                 inc     ebx
.text:0040AC88                 mov     [esp+97Ch+var_950], ebx
.text:0040AC8C                 jmp     loc_40A53F
.text:0040AC91 ; ---------------------------------------------------------------------------
.text:0040AC91
.text:0040AC91 loc_40AC91:                             ; CODE XREF: sub_40A110+AB5↑j
.text:0040AC91                 mov     [esp+97Ch+Size], eax
.text:0040AC94                 mov     esi, [esp+97Ch+arg_8]
.text:0040AC9B                 mov     edx, [esp+97Ch+var_8F4]
.text:0040ACA2                 mov     [esp+97Ch+var_974], esi
.text:0040ACA6                 mov     [esp+97Ch+var_978], edx
.text:0040ACAA                 call    sub_407020
.text:0040ACAF                 test    al, al
.text:0040ACB1                 jnz     loc_40ABCB
.text:0040ACB7                 jmp     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040ACBC ; ---------------------------------------------------------------------------
.text:0040ACBC
.text:0040ACBC loc_40ACBC:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040ACBC                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040ACBC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A27F case 40
.text:0040ACC7                 jz      def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040ACCD
.text:0040ACCD loc_40ACCD:                             ; CODE XREF: sub_40A110+2417↓j
.text:0040ACCD                 inc     [esp+97Ch+var_90C]
.text:0040ACD1                 mov     eax, [esp+97Ch+arg_C]
.text:0040ACD8                 inc     dword ptr [eax+18h]
.text:0040ACDB                 mov     ecx, [esp+97Ch+var_24]
.text:0040ACE2                 cmp     ecx, [esp+97Ch+var_28]
.text:0040ACE9                 jz      loc_40AE66
.text:0040ACEF
.text:0040ACEF loc_40ACEF:                             ; CODE XREF: sub_40A110+D91↓j
.text:0040ACEF                 mov     edx, [esp+97Ch+arg_C]
.text:0040ACF6                 lea     edi, [ecx+ecx*4]
.text:0040ACF9                 xor     eax, eax
.text:0040ACFB                 lea     ebp, ds:0[edi*4]
.text:0040AD02                 mov     ebx, [esp+97Ch+Block]
.text:0040AD09                 mov     edi, [edx]
.text:0040AD0B                 sub     [esp+97Ch+var_904], edi
.text:0040AD0F                 mov     edx, edi
.text:0040AD11                 mov     esi, [esp+97Ch+var_904]
.text:0040AD15                 mov     [ebx+ebp], esi
.text:0040AD18                 mov     esi, [esp+97Ch+var_908]
.text:0040AD1C                 test    esi, esi
.text:0040AD1E                 jz      short loc_40AD27
.text:0040AD20                 mov     eax, [esp+97Ch+var_908]
.text:0040AD24                 sub     eax, edi
.text:0040AD26                 inc     eax
.text:0040AD27
.text:0040AD27 loc_40AD27:                             ; CODE XREF: sub_40A110+C0E↑j
.text:0040AD27                 mov     [ebx+ebp+4], eax
.text:0040AD2B                 lea     esi, [ecx+ecx*4]
.text:0040AD2E                 mov     ebp, [esp+97Ch+var_90C]
.text:0040AD32                 mov     ecx, [esp+97Ch+var_950]
.text:0040AD36                 shl     esi, 2
.text:0040AD39                 mov     [ebx+esi+10h], ebp
.text:0040AD3D                 sub     ecx, edx
.text:0040AD3F                 cmp     ebp, 0FFh
.text:0040AD45                 mov     [ebx+esi+0Ch], ecx
.text:0040AD49                 ja      loc_40AE39
.text:0040AD4F                 mov     edx, [esp+97Ch+var_24]
.text:0040AD56                 lea     esi, [ecx+2]
.text:0040AD59                 mov     eax, [esp+97Ch+arg_C]
.text:0040AD60                 lea     ebp, [edx+edx*4]
.text:0040AD63                 lea     edx, [ecx+3]
.text:0040AD66                 mov     [ebx+ebp*4+8], esi
.text:0040AD6A                 mov     ecx, [eax+4]
.text:0040AD6D                 cmp     edx, ecx
.text:0040AD6F                 jbe     loc_40AE21
.text:0040AD75
.text:0040AD75 loc_40AD75:                             ; CODE XREF: sub_40A110+D0B↓j
.text:0040AD75                 cmp     ecx, 10000h
.text:0040AD7B                 mov     ebp, 0Fh
.text:0040AD80                 jz      loc_40A526
.text:0040AD86                 mov     esi, [esp+97Ch+arg_C]
.text:0040AD8D                 lea     ebx, [ecx+ecx]
.text:0040AD90                 cmp     ebx, 10000h
.text:0040AD96                 mov     [esi+4], ebx
.text:0040AD99                 jbe     short loc_40ADA2
.text:0040AD9B                 mov     dword ptr [esi+4], 10000h
.text:0040ADA2
.text:0040ADA2 loc_40ADA2:                             ; CODE XREF: sub_40A110+C89↑j
.text:0040ADA2                 mov     eax, [esp+97Ch+arg_C]
.text:0040ADA9                 mov     ecx, [eax+4]
.text:0040ADAC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040ADAF                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040ADB3                 call    realloc
.text:0040ADB8                 mov     ebp, [esp+97Ch+arg_C]
.text:0040ADBF                 test    eax, eax
.text:0040ADC1                 mov     [ebp+0], eax
.text:0040ADC4                 mov     ebp, 0Ch
.text:0040ADC9                 jz      loc_40A526
.text:0040ADCF                 cmp     edi, eax
.text:0040ADD1                 jz      short loc_40AE03
.text:0040ADD3                 sub     eax, edi
.text:0040ADD5                 mov     edi, [esp+97Ch+var_908]
.text:0040ADD9                 add     [esp+97Ch+var_950], eax
.text:0040ADDD                 test    edi, edi
.text:0040ADDF                 jz      short loc_40ADE5
.text:0040ADE1                 add     [esp+97Ch+var_908], eax
.text:0040ADE5
.text:0040ADE5 loc_40ADE5:                             ; CODE XREF: sub_40A110+CCF↑j
.text:0040ADE5                 mov     esi, [esp+97Ch+var_900]
.text:0040ADE9                 test    esi, esi
.text:0040ADEB                 jz      short loc_40ADF1
.text:0040ADED                 add     [esp+97Ch+var_900], eax
.text:0040ADF1
.text:0040ADF1 loc_40ADF1:                             ; CODE XREF: sub_40A110+CDB↑j
.text:0040ADF1                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040ADF8                 test    ebx, ebx
.text:0040ADFA                 jz      short loc_40AE03
.text:0040ADFC                 add     [esp+97Ch+var_8FC], eax
.text:0040AE03
.text:0040AE03 loc_40AE03:                             ; CODE XREF: sub_40A110+CC1↑j
.text:0040AE03                                         ; sub_40A110+CEA↑j
.text:0040AE03                 mov     ebp, [esp+97Ch+arg_C]
.text:0040AE0A                 mov     edx, [esp+97Ch+var_950]
.text:0040AE0E                 mov     edi, [ebp+0]
.text:0040AE11                 mov     ecx, [ebp+4]
.text:0040AE14                 sub     edx, edi
.text:0040AE16                 add     edx, 3
.text:0040AE19                 cmp     edx, ecx
.text:0040AE1B                 ja      loc_40AD75
.text:0040AE21
.text:0040AE21 loc_40AE21:                             ; CODE XREF: sub_40A110+C5F↑j
.text:0040AE21                 mov     ecx, [esp+97Ch+var_950]
.text:0040AE25                 mov     byte ptr [ecx], 6
.text:0040AE28                 inc     ecx
.text:0040AE29                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:0040AE2E                 mov     [ecx], bl
.text:0040AE30                 inc     ecx
.text:0040AE31                 mov     byte ptr [ecx], 0
.text:0040AE34                 inc     ecx
.text:0040AE35                 mov     [esp+97Ch+var_950], ecx
.text:0040AE39
.text:0040AE39 loc_40AE39:                             ; CODE XREF: sub_40A110+C39↑j
.text:0040AE39                 inc     [esp+97Ch+var_24]
.text:0040AE40                 mov     eax, [esp+97Ch+var_950]
.text:0040AE44                 mov     [esp+97Ch+var_908], 0
.text:0040AE4C                 mov     [esp+97Ch+var_900], 0
.text:0040AE54                 mov     [esp+97Ch+var_904], eax
.text:0040AE58
.text:0040AE58 loc_40AE58:                             ; CODE XREF: sub_40A110+2F9A↓j
.text:0040AE58                                         ; sub_40A110+3107↓j ...
.text:0040AE58                 xor     eax, eax
.text:0040AE5A                 mov     [esp+97Ch+var_8FC], eax
.text:0040AE61                 jmp     loc_40A53F
.text:0040AE66 ; ---------------------------------------------------------------------------
.text:0040AE66
.text:0040AE66 loc_40AE66:                             ; CODE XREF: sub_40A110+BD9↑j
.text:0040AE66                 mov     ebp, [esp+97Ch+Block]
.text:0040AE6D                 lea     edi, [ecx+ecx*4]
.text:0040AE70                 shl     edi, 3
.text:0040AE73                 mov     [esp+97Ch+var_978], edi ; Size
.text:0040AE77                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040AE7A                 mov     ebp, 0Ch
.text:0040AE7F                 call    realloc
.text:0040AE84                 mov     [esp+97Ch+Block], eax
.text:0040AE8B                 test    eax, eax
.text:0040AE8D                 jz      loc_40A526
.text:0040AE93                 shl     [esp+97Ch+var_28], 1
.text:0040AE9A                 mov     ecx, [esp+97Ch+var_24]
.text:0040AEA1                 jmp     loc_40ACEF
.text:0040AEA6 ; ---------------------------------------------------------------------------
.text:0040AEA6
.text:0040AEA6 loc_40AEA6:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040AEA6                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040AEA6                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040A27F case 41
.text:0040AEB1                 jz      def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AEB7
.text:0040AEB7 loc_40AEB7:                             ; CODE XREF: sub_40A110+2537↓j
.text:0040AEB7                 mov     esi, [esp+97Ch+var_908]
.text:0040AEBB                 test    esi, esi
.text:0040AEBD                 jz      loc_40AFC4
.text:0040AEC3                 mov     eax, [esp+97Ch+arg_C]
.text:0040AECA                 mov     ebp, [esp+97Ch+var_950]
.text:0040AECE                 mov     edi, [eax]
.text:0040AED0                 mov     edx, [eax+4]
.text:0040AED3                 sub     ebp, edi
.text:0040AED5                 mov     ebx, edi
.text:0040AED7                 inc     ebp
.text:0040AED8                 cmp     ebp, edx
.text:0040AEDA                 jbe     loc_40AF95
.text:0040AEE0
.text:0040AEE0 loc_40AEE0:                             ; CODE XREF: sub_40A110+E7F↓j
.text:0040AEE0                 cmp     edx, 10000h
.text:0040AEE6                 mov     ebp, 0Fh
.text:0040AEEB                 jz      loc_40A526
.text:0040AEF1                 mov     esi, [esp+97Ch+arg_C]
.text:0040AEF8                 lea     ecx, [edx+edx]
.text:0040AEFB                 cmp     ecx, 10000h
.text:0040AF01                 mov     [esi+4], ecx
.text:0040AF04                 jbe     short loc_40AF0D
.text:0040AF06                 mov     dword ptr [esi+4], 10000h
.text:0040AF0D
.text:0040AF0D loc_40AF0D:                             ; CODE XREF: sub_40A110+DF4↑j
.text:0040AF0D                 mov     ebp, [esp+97Ch+arg_C]
.text:0040AF14                 mov     esi, [ebp+4]
.text:0040AF17                 mov     ebp, 0Ch
.text:0040AF1C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040AF1F                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040AF23                 call    realloc
.text:0040AF28                 mov     edx, [esp+97Ch+arg_C]
.text:0040AF2F                 test    eax, eax
.text:0040AF31                 mov     [edx], eax
.text:0040AF33                 jz      loc_40A526
.text:0040AF39                 cmp     ebx, eax
.text:0040AF3B                 jz      short loc_40AF71
.text:0040AF3D                 sub     eax, ebx
.text:0040AF3F                 mov     ebx, [esp+97Ch+var_908]
.text:0040AF43                 add     [esp+97Ch+var_950], eax
.text:0040AF47                 add     [esp+97Ch+var_904], eax
.text:0040AF4B                 test    ebx, ebx
.text:0040AF4D                 jz      short loc_40AF53
.text:0040AF4F                 add     [esp+97Ch+var_908], eax
.text:0040AF53
.text:0040AF53 loc_40AF53:                             ; CODE XREF: sub_40A110+E3D↑j
.text:0040AF53                 mov     edi, [esp+97Ch+var_900]
.text:0040AF57                 test    edi, edi
.text:0040AF59                 jz      short loc_40AF5F
.text:0040AF5B                 add     [esp+97Ch+var_900], eax
.text:0040AF5F
.text:0040AF5F loc_40AF5F:                             ; CODE XREF: sub_40A110+E49↑j
.text:0040AF5F                 mov     edx, [esp+97Ch+var_8FC]
.text:0040AF66                 test    edx, edx
.text:0040AF68                 jz      short loc_40AF71
.text:0040AF6A                 add     [esp+97Ch+var_8FC], eax
.text:0040AF71
.text:0040AF71 loc_40AF71:                             ; CODE XREF: sub_40A110+E2B↑j
.text:0040AF71                                         ; sub_40A110+E58↑j
.text:0040AF71                 mov     esi, [esp+97Ch+arg_C]
.text:0040AF78                 mov     eax, [esp+97Ch+arg_C]
.text:0040AF7F                 mov     ecx, [esp+97Ch+var_950]
.text:0040AF83                 mov     edi, [esi]
.text:0040AF85                 mov     edx, [eax+4]
.text:0040AF88                 sub     ecx, edi
.text:0040AF8A                 inc     ecx
.text:0040AF8B                 mov     ebx, edi
.text:0040AF8D                 cmp     ecx, edx
.text:0040AF8F                 ja      loc_40AEE0
.text:0040AF95
.text:0040AF95 loc_40AF95:                             ; CODE XREF: sub_40A110+DCA↑j
.text:0040AF95                 mov     edx, [esp+97Ch+var_950]
.text:0040AF99                 mov     byte ptr [edx], 14h
.text:0040AF9C                 mov     edi, [esp+97Ch+var_908]
.text:0040AFA0                 inc     edx
.text:0040AFA1                 mov     [esp+97Ch+var_950], edx
.text:0040AFA5                 mov     ebx, edx
.text:0040AFA7                 mov     ebp, [esp+97Ch+var_908]
.text:0040AFAB                 mov     [esp+97Ch+Size], 0Eh
.text:0040AFB2                 sub     ebx, edi
.text:0040AFB4                 sub     ebx, 4
.text:0040AFB7                 mov     [esp+97Ch+var_974], ebx
.text:0040AFBB                 mov     [esp+97Ch+var_978], ebp
.text:0040AFBF                 call    sub_406EE0
.text:0040AFC4
.text:0040AFC4 loc_40AFC4:                             ; CODE XREF: sub_40A110+DAD↑j
.text:0040AFC4                 mov     eax, [esp+97Ch+var_24]
.text:0040AFCB                 test    eax, eax
.text:0040AFCD                 jnz     short loc_40AFF4
.text:0040AFCF                 test    [esp+97Ch+arg_8], 20000h
.text:0040AFDA                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040AFE0
.text:0040AFE0 loc_40AFE0:                             ; CODE XREF: sub_40A110+254E↓j
.text:0040AFE0                 mov     ecx, [esp+97Ch+Block]
.text:0040AFE7                 mov     ebp, 10h
.text:0040AFEC
.text:0040AFEC loc_40AFEC:                             ; CODE XREF: sub_40A110+15EA↓j
.text:0040AFEC                                         ; sub_40A110+21AF↓j
.text:0040AFEC                 mov     [esp+97Ch+Size], ecx
.text:0040AFEF                 jmp     loc_40A6B3
.text:0040AFF4 ; ---------------------------------------------------------------------------
.text:0040AFF4
.text:0040AFF4 loc_40AFF4:                             ; CODE XREF: sub_40A110+EBD↑j
.text:0040AFF4                 dec     eax
.text:0040AFF5                 mov     edx, [esp+97Ch+Block]
.text:0040AFFC                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B003                 mov     [esp+97Ch+var_24], eax
.text:0040B00A                 lea     esi, [eax+eax*4]
.text:0040B00D                 shl     esi, 2
.text:0040B010                 mov     ebx, [ebp+0]
.text:0040B013                 mov     edi, [edx+esi]
.text:0040B016                 mov     ebp, [edx+esi+4]
.text:0040B01A                 mov     ecx, ebx
.text:0040B01C                 add     edi, ebx
.text:0040B01E                 test    ebp, ebp
.text:0040B020                 mov     [esp+97Ch+var_904], edi
.text:0040B024                 lea     edi, [ebp+ebx-1]
.text:0040B028                 setz    bl
.text:0040B02B                 movzx   esi, bl
.text:0040B02E                 mov     ebx, [esp+97Ch+var_24]
.text:0040B035                 dec     esi
.text:0040B036                 and     edi, esi
.text:0040B038                 lea     eax, [ebx+ebx*4]
.text:0040B03B                 mov     [esp+97Ch+var_908], edi
.text:0040B03F                 shl     eax, 2
.text:0040B042                 xor     esi, esi
.text:0040B044                 mov     [esp+97Ch+var_8FC], esi
.text:0040B04B                 mov     ebx, [edx+eax+10h]
.text:0040B04F                 mov     ebp, [edx+eax+0Ch]
.text:0040B053                 mov     [esp+97Ch+var_930], ebx
.text:0040B057                 add     ebp, ecx
.text:0040B059                 cmp     ebx, 0FFh
.text:0040B05F                 mov     [esp+97Ch+var_900], ebp
.text:0040B063                 ja      loc_40A53F
.text:0040B069                 mov     esi, [edx+eax+8]
.text:0040B06D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:0040B072                 add     ecx, esi
.text:0040B074                 sub     dl, bl
.text:0040B076                 mov     [ecx], dl
.text:0040B078                 mov     eax, [esp+97Ch+arg_C]
.text:0040B07F                 mov     ecx, [esp+97Ch+var_950]
.text:0040B083                 mov     edi, [eax]
.text:0040B085                 mov     edx, [eax+4]
.text:0040B088                 sub     ecx, edi
.text:0040B08A                 add     ecx, 3
.text:0040B08D                 mov     ebx, edi
.text:0040B08F                 cmp     ecx, edx
.text:0040B091                 jbe     loc_40B14E
.text:0040B097
.text:0040B097 loc_40B097:                             ; CODE XREF: sub_40A110+1038↓j
.text:0040B097                 cmp     edx, 10000h
.text:0040B09D                 mov     ebp, 0Fh
.text:0040B0A2                 jz      loc_40A526
.text:0040B0A8                 lea     ebp, [edx+edx]
.text:0040B0AB                 mov     edx, [esp+97Ch+arg_C]
.text:0040B0B2                 cmp     ebp, 10000h
.text:0040B0B8                 mov     [edx+4], ebp
.text:0040B0BB                 jbe     short loc_40B0C4
.text:0040B0BD                 mov     dword ptr [edx+4], 10000h
.text:0040B0C4
.text:0040B0C4 loc_40B0C4:                             ; CODE XREF: sub_40A110+FAB↑j
.text:0040B0C4                 mov     eax, [esp+97Ch+arg_C]
.text:0040B0CB                 mov     ebp, 0Ch
.text:0040B0D0                 mov     edx, [eax+4]
.text:0040B0D3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B0D6                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040B0DA                 call    realloc
.text:0040B0DF                 mov     edi, [esp+97Ch+arg_C]
.text:0040B0E6                 test    eax, eax
.text:0040B0E8                 mov     [edi], eax
.text:0040B0EA                 jz      loc_40A526
.text:0040B0F0                 cmp     ebx, eax
.text:0040B0F2                 jz      short loc_40B128
.text:0040B0F4                 sub     eax, ebx
.text:0040B0F6                 mov     ebx, [esp+97Ch+var_908]
.text:0040B0FA                 add     [esp+97Ch+var_950], eax
.text:0040B0FE                 add     [esp+97Ch+var_904], eax
.text:0040B102                 test    ebx, ebx
.text:0040B104                 jz      short loc_40B10A
.text:0040B106                 add     [esp+97Ch+var_908], eax
.text:0040B10A
.text:0040B10A loc_40B10A:                             ; CODE XREF: sub_40A110+FF4↑j
.text:0040B10A                 mov     ecx, [esp+97Ch+var_900]
.text:0040B10E                 test    ecx, ecx
.text:0040B110                 jz      short loc_40B116
.text:0040B112                 add     [esp+97Ch+var_900], eax
.text:0040B116
.text:0040B116 loc_40B116:                             ; CODE XREF: sub_40A110+1000↑j
.text:0040B116                 mov     esi, [esp+97Ch+var_8FC]
.text:0040B11D                 test    esi, esi
.text:0040B11F                 jz      short loc_40B128
.text:0040B121                 add     [esp+97Ch+var_8FC], eax
.text:0040B128
.text:0040B128 loc_40B128:                             ; CODE XREF: sub_40A110+FE2↑j
.text:0040B128                                         ; sub_40A110+100F↑j
.text:0040B128                 mov     edx, [esp+97Ch+arg_C]
.text:0040B12F                 mov     eax, [esp+97Ch+arg_C]
.text:0040B136                 mov     ebp, [esp+97Ch+var_950]
.text:0040B13A                 mov     edi, [edx]
.text:0040B13C                 mov     edx, [eax+4]
.text:0040B13F                 sub     ebp, edi
.text:0040B141                 add     ebp, 3
.text:0040B144                 mov     ebx, edi
.text:0040B146                 cmp     ebp, edx
.text:0040B148                 ja      loc_40B097
.text:0040B14E
.text:0040B14E loc_40B14E:                             ; CODE XREF: sub_40A110+F81↑j
.text:0040B14E                 mov     ebx, [esp+97Ch+var_950]
.text:0040B152                 mov     byte ptr [ebx], 7
.text:0040B155                 inc     ebx
.text:0040B156                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:0040B15B                 mov     [ebx], dl
.text:0040B15D                 inc     ebx
.text:0040B15E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:0040B163                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:0040B167                 mov     [ebx], cl
.text:0040B169                 jmp     loc_40AC87
.text:0040B169 ; ---------------------------------------------------------------------------
.text:0040B16E                 align 10h
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040B170                                         ; sub_40A110+16DF↓j ...
.text:0040B170                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0040A27F case 42
.text:0040B174                 test    ebp, ebp
.text:0040B176                 jz      loc_40B6D1
.text:0040B17C
.text:0040B17C loc_40B17C:                             ; CODE XREF: sub_40A110+15D3↓j
.text:0040B17C                 mov     [esp+97Ch+var_91C], 0
.text:0040B181                 xor     ecx, ecx
.text:0040B183                 mov     [esp+97Ch+var_91D], 0
.text:0040B188
.text:0040B188 loc_40B188:                             ; CODE XREF: sub_40A110+10ED↓j
.text:0040B188                                         ; sub_40A110+1105↓j ...
.text:0040B188                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040B190                 movsx   eax, [esp+97Ch+var_91D]
.text:0040B195                 jz      short loc_40B19A
.text:0040B197                 or      eax, 1
.text:0040B19A
.text:0040B19A loc_40B19A:                             ; CODE XREF: sub_40A110+1085↑j
.text:0040B19A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040B1A2                 mov     [esp+97Ch+var_91D], al
.text:0040B1A6                 movsx   eax, cl
.text:0040B1A9                 jz      short loc_40B1AE
.text:0040B1AB                 or      eax, 1
.text:0040B1AE
.text:0040B1AE loc_40B1AE:                             ; CODE XREF: sub_40A110+1099↑j
.text:0040B1AE                 mov     edx, [esp+97Ch+var_8D0]
.text:0040B1B5                 mov     cl, al
.text:0040B1B7                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040B1BE                 jz      short loc_40B230
.text:0040B1C0                 movzx   eax, byte ptr [edx]
.text:0040B1C3                 lea     edi, [edx+1]
.text:0040B1C6                 mov     esi, [esp+97Ch+var_8F8]
.text:0040B1CD                 mov     [esp+97Ch+var_8D0], edi
.text:0040B1D4                 test    esi, esi
.text:0040B1D6                 mov     [esp+97Ch+var_8EC], al
.text:0040B1DD                 jz      short loc_40B1F5
.text:0040B1DF                 mov     esi, [esp+97Ch+var_8F8]
.text:0040B1E6                 movzx   ebp, al
.text:0040B1E9                 movzx   eax, byte ptr [ebp+esi+0]
.text:0040B1EE                 mov     [esp+97Ch+var_8EC], al
.text:0040B1F5
.text:0040B1F5 loc_40B1F5:                             ; CODE XREF: sub_40A110+10CD↑j
.text:0040B1F5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:0040B1FD                 jz      short loc_40B188
.text:0040B1FF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040B207                 jnz     loc_40B660
.text:0040B20D                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040B215                 jz      loc_40B188
.text:0040B21B                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040B223                 jz      loc_40B188
.text:0040B229
.text:0040B229 loc_40B229:                             ; CODE XREF: sub_40A110+1558↓j
.text:0040B229                 dec     [esp+97Ch+var_8D0]
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: sub_40A110+10AE↑j
.text:0040B230                                         ; sub_40A110+15AB↓j
.text:0040B230                 mov     edx, [esp+97Ch+var_900]
.text:0040B234                 test    edx, edx
.text:0040B236                 jz      loc_40A53F
.text:0040B23C                 test    cl, cl
.text:0040B23E                 jz      loc_40B443
.text:0040B244                 mov     ebx, [esp+97Ch+arg_C]
.text:0040B24B                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B252                 mov     esi, [esp+97Ch+var_950]
.text:0040B256                 mov     edi, [ebx]
.text:0040B258                 mov     edx, [ebp+4]
.text:0040B25B                 sub     esi, edi
.text:0040B25D                 add     esi, 3
.text:0040B260                 mov     ebx, edi
.text:0040B262                 cmp     esi, edx
.text:0040B264                 jbe     loc_40B321
.text:0040B26A
.text:0040B26A loc_40B26A:                             ; CODE XREF: sub_40A110+120B↓j
.text:0040B26A                 cmp     edx, 10000h
.text:0040B270                 mov     ebp, 0Fh
.text:0040B275                 jz      loc_40A526
.text:0040B27B                 mov     esi, [esp+97Ch+arg_C]
.text:0040B282                 lea     ecx, [edx+edx]
.text:0040B285                 cmp     ecx, 10000h
.text:0040B28B                 mov     [esi+4], ecx
.text:0040B28E                 jbe     short loc_40B297
.text:0040B290                 mov     dword ptr [esi+4], 10000h
.text:0040B297
.text:0040B297 loc_40B297:                             ; CODE XREF: sub_40A110+117E↑j
.text:0040B297                 mov     eax, [esp+97Ch+arg_C]
.text:0040B29E                 mov     ebp, 0Ch
.text:0040B2A3                 mov     esi, [eax+4]
.text:0040B2A6                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B2A9                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B2AD                 call    realloc
.text:0040B2B2                 mov     edi, [esp+97Ch+arg_C]
.text:0040B2B9                 test    eax, eax
.text:0040B2BB                 mov     [edi], eax
.text:0040B2BD                 jz      loc_40A526
.text:0040B2C3                 cmp     ebx, eax
.text:0040B2C5                 jz      short loc_40B2FB
.text:0040B2C7                 mov     edx, [esp+97Ch+var_908]
.text:0040B2CB                 sub     eax, ebx
.text:0040B2CD                 add     [esp+97Ch+var_950], eax
.text:0040B2D1                 add     [esp+97Ch+var_904], eax
.text:0040B2D5                 test    edx, edx
.text:0040B2D7                 jz      short loc_40B2DD
.text:0040B2D9                 add     [esp+97Ch+var_908], eax
.text:0040B2DD
.text:0040B2DD loc_40B2DD:                             ; CODE XREF: sub_40A110+11C7↑j
.text:0040B2DD                 mov     ebp, [esp+97Ch+var_900]
.text:0040B2E1                 test    ebp, ebp
.text:0040B2E3                 jz      short loc_40B2E9
.text:0040B2E5                 add     [esp+97Ch+var_900], eax
.text:0040B2E9
.text:0040B2E9 loc_40B2E9:                             ; CODE XREF: sub_40A110+11D3↑j
.text:0040B2E9                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040B2F0                 test    ebx, ebx
.text:0040B2F2                 jz      short loc_40B2FB
.text:0040B2F4                 add     [esp+97Ch+var_8FC], eax
.text:0040B2FB
.text:0040B2FB loc_40B2FB:                             ; CODE XREF: sub_40A110+11B5↑j
.text:0040B2FB                                         ; sub_40A110+11E2↑j
.text:0040B2FB                 mov     esi, [esp+97Ch+arg_C]
.text:0040B302                 mov     eax, [esp+97Ch+arg_C]
.text:0040B309                 mov     ecx, [esp+97Ch+var_950]
.text:0040B30D                 mov     edi, [esi]
.text:0040B30F                 mov     edx, [eax+4]
.text:0040B312                 sub     ecx, edi
.text:0040B314                 add     ecx, 3
.text:0040B317                 mov     ebx, edi
.text:0040B319                 cmp     ecx, edx
.text:0040B31B                 ja      loc_40B26A
.text:0040B321
.text:0040B321 loc_40B321:                             ; CODE XREF: sub_40A110+1154↑j
.text:0040B321                 mov     edi, [esp+97Ch+var_8F8]
.text:0040B328                 test    edi, edi
.text:0040B32A                 jz      loc_40B64A
.text:0040B330                 mov     edi, [esp+97Ch+var_8D0]
.text:0040B337                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040B33E                 movzx   ebp, byte ptr [edi-2]
.text:0040B342                 movsx   edx, byte ptr [ebp+ebx+0]
.text:0040B347
.text:0040B347 loc_40B347:                             ; CODE XREF: sub_40A110+1545↓j
.text:0040B347                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040B34E                 test    ecx, ecx
.text:0040B350                 jz      loc_40B642
.text:0040B356                 mov     eax, [esp+97Ch+var_8F8]
.text:0040B35D                 movsx   esi, byte ptr [eax+2Eh]
.text:0040B361                 cmp     edx, esi
.text:0040B363
.text:0040B363 loc_40B363:                             ; CODE XREF: sub_40A110+1535↓j
.text:0040B363                 jz      loc_40B5AB
.text:0040B369
.text:0040B369 loc_40B369:                             ; CODE XREF: sub_40A110+14A0↓j
.text:0040B369                                         ; sub_40A110+14AD↓j ...
.text:0040B369                 mov     [esp+97Ch+Size], 12h
.text:0040B370                 mov     ebx, [esp+97Ch+var_900]
.text:0040B374                 mov     ecx, [esp+97Ch+var_950]
.text:0040B378                 mov     edi, [esp+97Ch+var_950]
.text:0040B37C                 sub     ebx, ecx
.text:0040B37E                 sub     ebx, 6
.text:0040B381                 mov     [esp+97Ch+var_974], ebx
.text:0040B385                 mov     [esp+97Ch+var_978], edi
.text:0040B389                 call    sub_406EE0
.text:0040B38E
.text:0040B38E loc_40B38E:                             ; CODE XREF: sub_40A110+1523↓j
.text:0040B38E                 add     [esp+97Ch+var_950], 3
.text:0040B393                 mov     esi, [esp+97Ch+arg_C]
.text:0040B39A                 mov     eax, [esp+97Ch+var_950]
.text:0040B39E                 mov     edi, [esi]
.text:0040B3A0                 mov     edx, [esi+4]
.text:0040B3A3
.text:0040B3A3 loc_40B3A3:                             ; CODE XREF: sub_40A110+134A↓j
.text:0040B3A3                 sub     eax, edi
.text:0040B3A5                 mov     ebx, edi
.text:0040B3A7                 add     eax, 3
.text:0040B3AA                 cmp     eax, edx
.text:0040B3AC                 jbe     loc_40B45F
.text:0040B3B2                 cmp     edx, 10000h
.text:0040B3B8                 mov     ebp, 0Fh
.text:0040B3BD                 jz      loc_40A526
.text:0040B3C3                 mov     esi, [esp+97Ch+arg_C]
.text:0040B3CA                 lea     ebp, [edx+edx]
.text:0040B3CD                 cmp     ebp, 10000h
.text:0040B3D3                 mov     [esi+4], ebp
.text:0040B3D6                 jbe     short loc_40B3DF
.text:0040B3D8                 mov     dword ptr [esi+4], 10000h
.text:0040B3DF
.text:0040B3DF loc_40B3DF:                             ; CODE XREF: sub_40A110+12C6↑j
.text:0040B3DF                 mov     eax, [esp+97Ch+arg_C]
.text:0040B3E6                 mov     ebp, 0Ch
.text:0040B3EB                 mov     ecx, [eax+4]
.text:0040B3EE                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B3F1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040B3F5                 call    realloc
.text:0040B3FA                 mov     edx, [esp+97Ch+arg_C]
.text:0040B401                 test    eax, eax
.text:0040B403                 mov     [edx], eax
.text:0040B405                 jz      loc_40A526
.text:0040B40B                 cmp     ebx, eax
.text:0040B40D                 jz      short loc_40B443
.text:0040B40F                 mov     edi, [esp+97Ch+var_908]
.text:0040B413                 sub     eax, ebx
.text:0040B415                 add     [esp+97Ch+var_950], eax
.text:0040B419                 add     [esp+97Ch+var_904], eax
.text:0040B41D                 test    edi, edi
.text:0040B41F                 jz      short loc_40B425
.text:0040B421                 add     [esp+97Ch+var_908], eax
.text:0040B425
.text:0040B425 loc_40B425:                             ; CODE XREF: sub_40A110+130F↑j
.text:0040B425                 mov     ebx, [esp+97Ch+var_900]
.text:0040B429                 test    ebx, ebx
.text:0040B42B                 jz      short loc_40B431
.text:0040B42D                 add     [esp+97Ch+var_900], eax
.text:0040B431
.text:0040B431 loc_40B431:                             ; CODE XREF: sub_40A110+131B↑j
.text:0040B431                 mov     esi, [esp+97Ch+var_8FC]
.text:0040B438                 test    esi, esi
.text:0040B43A                 jz      short loc_40B443
.text:0040B43C                 add     [esp+97Ch+var_8FC], eax
.text:0040B443
.text:0040B443 loc_40B443:                             ; CODE XREF: sub_40A110+112E↑j
.text:0040B443                                         ; sub_40A110+12FD↑j ...
.text:0040B443                 mov     edx, [esp+97Ch+arg_C]
.text:0040B44A                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B451                 mov     eax, [esp+97Ch+var_950]
.text:0040B455                 mov     edi, [edx]
.text:0040B457                 mov     edx, [ebp+4]
.text:0040B45A                 jmp     loc_40B3A3
.text:0040B45F ; ---------------------------------------------------------------------------
.text:0040B45F
.text:0040B45F loc_40B45F:                             ; CODE XREF: sub_40A110+129C↑j
.text:0040B45F                 movzx   edx, [esp+97Ch+var_91C]
.text:0040B464                 mov     ebx, [esp+97Ch+var_950]
.text:0040B468                 mov     eax, [esp+97Ch+var_900]
.text:0040B46C                 mov     edi, [esp+97Ch+var_900]
.text:0040B470                 mov     esi, ebx
.text:0040B472                 and     edx, 1
.text:0040B475                 mov     [esp+97Ch+var_970], ebx
.text:0040B479                 sub     esi, eax
.text:0040B47B                 add     edx, 0Fh
.text:0040B47E                 mov     [esp+97Ch+var_974], esi
.text:0040B482                 add     ebx, 3
.text:0040B485                 mov     [esp+97Ch+var_978], edi
.text:0040B489                 mov     [esp+97Ch+Size], edx
.text:0040B48C                 call    sub_406F30
.text:0040B491                 mov     [esp+97Ch+var_950], ebx
.text:0040B495                 xor     ecx, ecx
.text:0040B497                 cmp     [esp+97Ch+var_91D], 0
.text:0040B49C                 mov     [esp+97Ch+var_8FC], ecx
.text:0040B4A3                 jnz     loc_40A53F
.text:0040B4A9                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B4B0                 mov     ebp, [esp+97Ch+var_950]
.text:0040B4B4                 mov     edi, [ecx]
.text:0040B4B6                 mov     edx, [ecx+4]
.text:0040B4B9                 sub     ebp, edi
.text:0040B4BB                 mov     ebx, edi
.text:0040B4BD                 add     ebp, 3
.text:0040B4C0                 cmp     ebp, edx
.text:0040B4C2                 jbe     loc_40B57F
.text:0040B4C8
.text:0040B4C8 loc_40B4C8:                             ; CODE XREF: sub_40A110+1469↓j
.text:0040B4C8                 cmp     edx, 10000h
.text:0040B4CE                 mov     ebp, 0Fh
.text:0040B4D3                 jz      loc_40A526
.text:0040B4D9                 mov     esi, [esp+97Ch+arg_C]
.text:0040B4E0                 lea     ebp, [edx+edx]
.text:0040B4E3                 cmp     ebp, 10000h
.text:0040B4E9                 mov     [esi+4], ebp
.text:0040B4EC                 jbe     short loc_40B4F5
.text:0040B4EE                 mov     dword ptr [esi+4], 10000h
.text:0040B4F5
.text:0040B4F5 loc_40B4F5:                             ; CODE XREF: sub_40A110+13DC↑j
.text:0040B4F5                 mov     eax, [esp+97Ch+arg_C]
.text:0040B4FC                 mov     ebp, 0Ch
.text:0040B501                 mov     esi, [eax+4]
.text:0040B504                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B507                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B50B                 call    realloc
.text:0040B510                 mov     edx, [esp+97Ch+arg_C]
.text:0040B517                 test    eax, eax
.text:0040B519                 mov     [edx], eax
.text:0040B51B                 jz      loc_40A526
.text:0040B521                 cmp     ebx, eax
.text:0040B523                 jz      short loc_40B559
.text:0040B525                 mov     edi, [esp+97Ch+var_908]
.text:0040B529                 sub     eax, ebx
.text:0040B52B                 add     [esp+97Ch+var_950], eax
.text:0040B52F                 add     [esp+97Ch+var_904], eax
.text:0040B533                 test    edi, edi
.text:0040B535                 jz      short loc_40B53B
.text:0040B537                 add     [esp+97Ch+var_908], eax
.text:0040B53B
.text:0040B53B loc_40B53B:                             ; CODE XREF: sub_40A110+1425↑j
.text:0040B53B                 mov     ebx, [esp+97Ch+var_900]
.text:0040B53F                 test    ebx, ebx
.text:0040B541                 jz      short loc_40B547
.text:0040B543                 add     [esp+97Ch+var_900], eax
.text:0040B547
.text:0040B547 loc_40B547:                             ; CODE XREF: sub_40A110+1431↑j
.text:0040B547                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040B54E                 test    ecx, ecx
.text:0040B550                 jz      short loc_40B559
.text:0040B552                 add     [esp+97Ch+var_8FC], eax
.text:0040B559
.text:0040B559 loc_40B559:                             ; CODE XREF: sub_40A110+1413↑j
.text:0040B559                                         ; sub_40A110+1440↑j
.text:0040B559                 mov     edx, [esp+97Ch+arg_C]
.text:0040B560                 mov     eax, [esp+97Ch+arg_C]
.text:0040B567                 mov     ebp, [esp+97Ch+var_950]
.text:0040B56B                 mov     edi, [edx]
.text:0040B56D                 mov     edx, [eax+4]
.text:0040B570                 sub     ebp, edi
.text:0040B572                 add     ebp, 3
.text:0040B575                 mov     ebx, edi
.text:0040B577                 cmp     ebp, edx
.text:0040B579                 ja      loc_40B4C8
.text:0040B57F
.text:0040B57F loc_40B57F:                             ; CODE XREF: sub_40A110+13B2↑j
.text:0040B57F                 mov     [esp+97Ch+var_974], 3
.text:0040B587                 mov     edi, [esp+97Ch+var_950]
.text:0040B58B                 mov     esi, [esp+97Ch+var_900]
.text:0040B58F                 mov     [esp+97Ch+Size], 13h
.text:0040B596                 mov     [esp+97Ch+var_970], edi
.text:0040B59A                 add     edi, 3
.text:0040B59D                 mov     [esp+97Ch+var_978], esi
.text:0040B5A1                 call    sub_406F30
.text:0040B5A6                 jmp     loc_40A53B
.text:0040B5AB ; ---------------------------------------------------------------------------
.text:0040B5AB
.text:0040B5AB loc_40B5AB:                             ; CODE XREF: sub_40A110:loc_40B363↑j
.text:0040B5AB                 cmp     [esp+97Ch+var_91D], 0
.text:0040B5B0                 jz      loc_40B369
.text:0040B5B6                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040B5BD                 jnb     loc_40B369
.text:0040B5C3                 mov     edx, [esp+97Ch+var_8F8]
.text:0040B5CA                 test    edx, edx
.text:0040B5CC                 jz      short loc_40B63D
.text:0040B5CE                 movzx   ebp, byte ptr [edi]
.text:0040B5D1                 mov     edi, [esp+97Ch+var_8F8]
.text:0040B5D8                 movsx   edx, byte ptr [ebp+edi+0]
.text:0040B5DD
.text:0040B5DD loc_40B5DD:                             ; CODE XREF: sub_40A110+1530↓j
.text:0040B5DD                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040B5E4                 test    ebx, ebx
.text:0040B5E6                 jz      short loc_40B638
.text:0040B5E8                 mov     esi, [esp+97Ch+var_8F8]
.text:0040B5EF                 movsx   ecx, byte ptr [esi+0Ah]
.text:0040B5F3                 cmp     edx, ecx
.text:0040B5F5
.text:0040B5F5 loc_40B5F5:                             ; CODE XREF: sub_40A110+152B↓j
.text:0040B5F5                 jnz     loc_40B369
.text:0040B5FB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:0040B603                 jnz     loc_40B369
.text:0040B609                 mov     [esp+97Ch+Size], 0Dh
.text:0040B610                 mov     ebp, [esp+97Ch+var_900]
.text:0040B614                 mov     eax, [esp+97Ch+var_950]
.text:0040B618                 mov     edx, [esp+97Ch+var_950]
.text:0040B61C                 sub     ebp, eax
.text:0040B61E                 sub     ebp, 3
.text:0040B621                 mov     [esp+97Ch+var_974], ebp
.text:0040B625                 mov     [esp+97Ch+var_978], edx
.text:0040B629                 call    sub_406EE0
.text:0040B62E                 mov     [esp+97Ch+var_91C], 1
.text:0040B633                 jmp     loc_40B38E
.text:0040B638 ; ---------------------------------------------------------------------------
.text:0040B638
.text:0040B638 loc_40B638:                             ; CODE XREF: sub_40A110+14D6↑j
.text:0040B638                 cmp     edx, 0Ah
.text:0040B63B                 jmp     short loc_40B5F5
.text:0040B63D ; ---------------------------------------------------------------------------
.text:0040B63D
.text:0040B63D loc_40B63D:                             ; CODE XREF: sub_40A110+14BC↑j
.text:0040B63D                 movsx   edx, byte ptr [edi]
.text:0040B640                 jmp     short loc_40B5DD
.text:0040B642 ; ---------------------------------------------------------------------------
.text:0040B642
.text:0040B642 loc_40B642:                             ; CODE XREF: sub_40A110+1240↑j
.text:0040B642                 cmp     edx, 2Eh ; '.'
.text:0040B645                 jmp     loc_40B363
.text:0040B64A ; ---------------------------------------------------------------------------
.text:0040B64A
.text:0040B64A loc_40B64A:                             ; CODE XREF: sub_40A110+121A↑j
.text:0040B64A                 mov     edi, [esp+97Ch+var_8D0]
.text:0040B651                 movsx   edx, byte ptr [edi-2]
.text:0040B655                 jmp     loc_40B347
.text:0040B655 ; ---------------------------------------------------------------------------
.text:0040B65A                 align 10h
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: sub_40A110+10F7↑j
.text:0040B660                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040B668                 jnz     loc_40B229
.text:0040B66E                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040B675                 jz      short loc_40B6C0
.text:0040B677                 movzx   ebx, byte ptr [edx+1]
.text:0040B67B                 lea     ebp, [edx+2]
.text:0040B67E                 mov     eax, [esp+97Ch+var_8F8]
.text:0040B685                 mov     [esp+97Ch+var_8D0], ebp
.text:0040B68C                 test    eax, eax
.text:0040B68E                 jz      short loc_40B69E
.text:0040B690                 mov     eax, [esp+97Ch+var_8F8]
.text:0040B697                 movzx   edi, bl
.text:0040B69A                 movzx   ebx, byte ptr [edi+eax]
.text:0040B69E
.text:0040B69E loc_40B69E:                             ; CODE XREF: sub_40A110+157E↑j
.text:0040B69E                 cmp     bl, 2Bh ; '+'
.text:0040B6A1                 jz      short loc_40B6A8
.text:0040B6A3                 cmp     bl, 3Fh ; '?'
.text:0040B6A6                 jnz     short loc_40B6B4
.text:0040B6A8
.text:0040B6A8 loc_40B6A8:                             ; CODE XREF: sub_40A110+1591↑j
.text:0040B6A8                 mov     [esp+97Ch+var_8EC], bl
.text:0040B6AF                 jmp     loc_40B188
.text:0040B6B4 ; ---------------------------------------------------------------------------
.text:0040B6B4
.text:0040B6B4 loc_40B6B4:                             ; CODE XREF: sub_40A110+1596↑j
.text:0040B6B4                 mov     [esp+97Ch+var_8D0], edx
.text:0040B6BB                 jmp     loc_40B230
.text:0040B6C0 ; ---------------------------------------------------------------------------
.text:0040B6C0
.text:0040B6C0 loc_40B6C0:                             ; CODE XREF: sub_40A110+1565↑j
.text:0040B6C0                                         ; sub_40A110+21FF↓j ...
.text:0040B6C0                 mov     edi, [esp+97Ch+Block]
.text:0040B6C7                 mov     ebp, 5
.text:0040B6CC                 jmp     loc_40A6B0
.text:0040B6D1 ; ---------------------------------------------------------------------------
.text:0040B6D1
.text:0040B6D1 loc_40B6D1:                             ; CODE XREF: sub_40A110+1066↑j
.text:0040B6D1                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:0040B6D9                 jnz     short loc_40B6EE
.text:0040B6DB                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040B6E3                 jnz     loc_40B17C
.text:0040B6E9                 jmp     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B6EE ; ---------------------------------------------------------------------------
.text:0040B6EE
.text:0040B6EE loc_40B6EE:                             ; CODE XREF: sub_40A110+15C9↑j
.text:0040B6EE                                         ; sub_40A110+31A3↓j
.text:0040B6EE                 mov     ecx, [esp+97Ch+Block]
.text:0040B6F5                 mov     ebp, 0Dh
.text:0040B6FA                 jmp     loc_40AFEC
.text:0040B6FA ; ---------------------------------------------------------------------------
.text:0040B6FF                 align 10h
.text:0040B700
.text:0040B700 loc_40B700:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040B700                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040B700                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0040A27F case 46
.text:0040B707                 mov     ecx, [esp+97Ch+var_950]
.text:0040B70B                 mov     edi, [eax]
.text:0040B70D                 mov     [esp+97Ch+var_900], ecx
.text:0040B711                 mov     ebp, ecx
.text:0040B713                 mov     edx, [eax+4]
.text:0040B716                 sub     ebp, edi
.text:0040B718                 mov     ebx, edi
.text:0040B71A                 inc     ebp
.text:0040B71B                 cmp     ebp, edx
.text:0040B71D                 jbe     loc_40B7D8
.text:0040B723
.text:0040B723 loc_40B723:                             ; CODE XREF: sub_40A110+16C2↓j
.text:0040B723                 cmp     edx, 10000h
.text:0040B729                 mov     ebp, 0Fh
.text:0040B72E                 jz      loc_40A526
.text:0040B734                 mov     esi, [esp+97Ch+arg_C]
.text:0040B73B                 lea     ebp, [edx+edx]
.text:0040B73E                 cmp     ebp, 10000h
.text:0040B744                 mov     [esi+4], ebp
.text:0040B747                 jbe     short loc_40B750
.text:0040B749                 mov     dword ptr [esi+4], 10000h
.text:0040B750
.text:0040B750 loc_40B750:                             ; CODE XREF: sub_40A110+1637↑j
.text:0040B750                 mov     eax, [esp+97Ch+arg_C]
.text:0040B757                 mov     ebp, 0Ch
.text:0040B75C                 mov     esi, [eax+4]
.text:0040B75F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B762                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040B766                 call    realloc
.text:0040B76B                 mov     edi, [esp+97Ch+arg_C]
.text:0040B772                 test    eax, eax
.text:0040B774                 mov     [edi], eax
.text:0040B776                 jz      loc_40A526
.text:0040B77C                 cmp     ebx, eax
.text:0040B77E                 jz      short loc_40B7B4
.text:0040B780                 sub     eax, ebx
.text:0040B782                 mov     ebx, [esp+97Ch+var_908]
.text:0040B786                 add     [esp+97Ch+var_950], eax
.text:0040B78A                 add     [esp+97Ch+var_904], eax
.text:0040B78E                 test    ebx, ebx
.text:0040B790                 jz      short loc_40B796
.text:0040B792                 add     [esp+97Ch+var_908], eax
.text:0040B796
.text:0040B796 loc_40B796:                             ; CODE XREF: sub_40A110+1680↑j
.text:0040B796                 mov     edx, [esp+97Ch+var_900]
.text:0040B79A                 test    edx, edx
.text:0040B79C                 jz      short loc_40B7A2
.text:0040B79E                 add     [esp+97Ch+var_900], eax
.text:0040B7A2
.text:0040B7A2 loc_40B7A2:                             ; CODE XREF: sub_40A110+168C↑j
.text:0040B7A2                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040B7A9                 test    ecx, ecx
.text:0040B7AB                 jz      short loc_40B7B4
.text:0040B7AD                 add     [esp+97Ch+var_8FC], eax
.text:0040B7B4
.text:0040B7B4 loc_40B7B4:                             ; CODE XREF: sub_40A110+166E↑j
.text:0040B7B4                                         ; sub_40A110+169B↑j
.text:0040B7B4                 mov     esi, [esp+97Ch+arg_C]
.text:0040B7BB                 mov     eax, [esp+97Ch+arg_C]
.text:0040B7C2                 mov     ebp, [esp+97Ch+var_950]
.text:0040B7C6                 mov     edi, [esi]
.text:0040B7C8                 mov     edx, [eax+4]
.text:0040B7CB                 sub     ebp, edi
.text:0040B7CD                 inc     ebp
.text:0040B7CE                 mov     ebx, edi
.text:0040B7D0                 cmp     ebp, edx
.text:0040B7D2                 ja      loc_40B723
.text:0040B7D8
.text:0040B7D8 loc_40B7D8:                             ; CODE XREF: sub_40A110+160D↑j
.text:0040B7D8                 mov     edi, [esp+97Ch+var_950]
.text:0040B7DC                 mov     byte ptr [edi], 3
.text:0040B7DF                 jmp     loc_40A53A
.text:0040B7E4 ; ---------------------------------------------------------------------------
.text:0040B7E4
.text:0040B7E4 loc_40B7E4:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040B7E4                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040B7E4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0040A27F cases 43,63
.text:0040B7EF                 jz      loc_40B170      ; jumptable 0040A27F case 42
.text:0040B7F5                 jmp     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040B7FA ; ---------------------------------------------------------------------------
.text:0040B7FA
.text:0040B7FA loc_40B7FA:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040B7FA                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040B7FA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0040A27F case 91
.text:0040B7FF                 mov     edi, [esp+97Ch+var_8F4]
.text:0040B806                 cmp     [esp+97Ch+var_8D0], edi
.text:0040B80D                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040B815                 jz      loc_40BD6F
.text:0040B81B
.text:0040B81B loc_40B81B:                             ; CODE XREF: sub_40A110+1784↓j
.text:0040B81B                                         ; sub_40A110+17B1↓j ...
.text:0040B81B                 mov     ebp, [esp+97Ch+arg_C]
.text:0040B822                 mov     ecx, [esp+97Ch+var_950]
.text:0040B826                 mov     edi, [ebp+0]
.text:0040B829                 mov     edx, [ebp+4]
.text:0040B82C                 sub     ecx, edi
.text:0040B82E                 lea     ebx, [ecx+22h]
.text:0040B831                 cmp     ebx, edx
.text:0040B833                 jbe     loc_40B8D3
.text:0040B839                 cmp     edx, 10000h
.text:0040B83F                 mov     ebp, 0Fh
.text:0040B844                 jz      loc_40A526
.text:0040B84A                 lea     ebx, [edx+edx]
.text:0040B84D                 mov     edx, [esp+97Ch+arg_C]
.text:0040B854                 cmp     ebx, 10000h
.text:0040B85A                 mov     [edx+4], ebx
.text:0040B85D                 jbe     short loc_40B866
.text:0040B85F                 mov     dword ptr [edx+4], 10000h
.text:0040B866
.text:0040B866 loc_40B866:                             ; CODE XREF: sub_40A110+174D↑j
.text:0040B866                 mov     eax, [esp+97Ch+arg_C]
.text:0040B86D                 mov     ebp, [eax+4]
.text:0040B870                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B873                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040B877                 mov     ebp, 0Ch
.text:0040B87C                 call    realloc
.text:0040B881                 mov     edx, [esp+97Ch+arg_C]
.text:0040B888                 test    eax, eax
.text:0040B88A                 mov     [edx], eax
.text:0040B88C                 jz      loc_40A526
.text:0040B892                 cmp     edi, eax
.text:0040B894                 jz      short loc_40B81B
.text:0040B896                 mov     ecx, [esp+97Ch+var_908]
.text:0040B89A                 sub     eax, edi
.text:0040B89C                 add     [esp+97Ch+var_950], eax
.text:0040B8A0                 add     [esp+97Ch+var_904], eax
.text:0040B8A4                 test    ecx, ecx
.text:0040B8A6                 jz      short loc_40B8AC
.text:0040B8A8                 add     [esp+97Ch+var_908], eax
.text:0040B8AC
.text:0040B8AC loc_40B8AC:                             ; CODE XREF: sub_40A110+1796↑j
.text:0040B8AC                 mov     esi, [esp+97Ch+var_900]
.text:0040B8B0                 test    esi, esi
.text:0040B8B2                 jz      short loc_40B8B8
.text:0040B8B4                 add     [esp+97Ch+var_900], eax
.text:0040B8B8
.text:0040B8B8 loc_40B8B8:                             ; CODE XREF: sub_40A110+17A2↑j
.text:0040B8B8                 mov     edi, [esp+97Ch+var_8FC]
.text:0040B8BF                 test    edi, edi
.text:0040B8C1                 jz      loc_40B81B
.text:0040B8C7                 add     [esp+97Ch+var_8FC], eax
.text:0040B8CE                 jmp     loc_40B81B
.text:0040B8D3 ; ---------------------------------------------------------------------------
.text:0040B8D3
.text:0040B8D3 loc_40B8D3:                             ; CODE XREF: sub_40A110+1723↑j
.text:0040B8D3                 mov     ebx, [esp+97Ch+var_950]
.text:0040B8D7                 lea     esi, [ecx+1]
.text:0040B8DA                 cmp     esi, edx
.text:0040B8DC                 mov     [esp+97Ch+var_900], ebx
.text:0040B8E0                 mov     ebx, edi
.text:0040B8E2                 jbe     loc_40B99D
.text:0040B8E8
.text:0040B8E8 loc_40B8E8:                             ; CODE XREF: sub_40A110+1887↓j
.text:0040B8E8                 cmp     edx, 10000h
.text:0040B8EE                 mov     ebp, 0Fh
.text:0040B8F3                 jz      loc_40A526
.text:0040B8F9                 lea     ecx, [edx+edx]
.text:0040B8FC                 mov     edx, [esp+97Ch+arg_C]
.text:0040B903                 cmp     ecx, 10000h
.text:0040B909                 mov     [edx+4], ecx
.text:0040B90C                 jbe     short loc_40B915
.text:0040B90E                 mov     dword ptr [edx+4], 10000h
.text:0040B915
.text:0040B915 loc_40B915:                             ; CODE XREF: sub_40A110+17FC↑j
.text:0040B915                 mov     eax, [esp+97Ch+arg_C]
.text:0040B91C                 mov     ebp, [eax+4]
.text:0040B91F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040B922                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040B926                 mov     ebp, 0Ch
.text:0040B92B                 call    realloc
.text:0040B930                 mov     edx, [esp+97Ch+arg_C]
.text:0040B937                 test    eax, eax
.text:0040B939                 mov     [edx], eax
.text:0040B93B                 jz      loc_40A526
.text:0040B941                 cmp     ebx, eax
.text:0040B943                 jz      short loc_40B979
.text:0040B945                 mov     edi, [esp+97Ch+var_908]
.text:0040B949                 sub     eax, ebx
.text:0040B94B                 add     [esp+97Ch+var_950], eax
.text:0040B94F                 add     [esp+97Ch+var_904], eax
.text:0040B953                 test    edi, edi
.text:0040B955                 jz      short loc_40B95B
.text:0040B957                 add     [esp+97Ch+var_908], eax
.text:0040B95B
.text:0040B95B loc_40B95B:                             ; CODE XREF: sub_40A110+1845↑j
.text:0040B95B                 mov     esi, [esp+97Ch+var_900]
.text:0040B95F                 test    esi, esi
.text:0040B961                 jz      short loc_40B967
.text:0040B963                 add     [esp+97Ch+var_900], eax
.text:0040B967
.text:0040B967 loc_40B967:                             ; CODE XREF: sub_40A110+1851↑j
.text:0040B967                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040B96E                 test    ebx, ebx
.text:0040B970                 jz      short loc_40B979
.text:0040B972                 add     [esp+97Ch+var_8FC], eax
.text:0040B979
.text:0040B979 loc_40B979:                             ; CODE XREF: sub_40A110+1833↑j
.text:0040B979                                         ; sub_40A110+1860↑j
.text:0040B979                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B980                 mov     eax, [esp+97Ch+arg_C]
.text:0040B987                 mov     ebp, [esp+97Ch+var_950]
.text:0040B98B                 mov     edi, [ecx]
.text:0040B98D                 mov     edx, [eax+4]
.text:0040B990                 sub     ebp, edi
.text:0040B992                 inc     ebp
.text:0040B993                 mov     ebx, edi
.text:0040B995                 cmp     ebp, edx
.text:0040B997                 ja      loc_40B8E8
.text:0040B99D
.text:0040B99D loc_40B99D:                             ; CODE XREF: sub_40A110+17D2↑j
.text:0040B99D                 mov     edi, [esp+97Ch+var_950]
.text:0040B9A1                 mov     bl, 5
.text:0040B9A3                 mov     edx, [esp+97Ch+var_8D0]
.text:0040B9AA                 inc     [esp+97Ch+var_950]
.text:0040B9AE                 cmp     byte ptr [edx], 5Eh ; '^'
.text:0040B9B1                 setnz   al
.text:0040B9B4                 sub     bl, al
.text:0040B9B6                 mov     [edi], bl
.text:0040B9B8                 mov     edi, [esp+97Ch+var_8D0]
.text:0040B9BF                 cmp     byte ptr [edi], 5Eh ; '^'
.text:0040B9C2                 jz      loc_40C379
.text:0040B9C8
.text:0040B9C8 loc_40B9C8:                             ; CODE XREF: sub_40A110+2271↓j
.text:0040B9C8                 mov     [esp+97Ch+var_8F0], edi
.text:0040B9CF                 mov     esi, [esp+97Ch+arg_C]
.text:0040B9D6                 mov     ecx, [esp+97Ch+arg_C]
.text:0040B9DD                 mov     ebp, [esp+97Ch+var_950]
.text:0040B9E1                 mov     edi, [esi]
.text:0040B9E3                 mov     edx, [ecx+4]
.text:0040B9E6                 sub     ebp, edi
.text:0040B9E8                 mov     ebx, edi
.text:0040B9EA                 inc     ebp
.text:0040B9EB                 cmp     ebp, edx
.text:0040B9ED                 jbe     loc_40BAA8
.text:0040B9F3
.text:0040B9F3 loc_40B9F3:                             ; CODE XREF: sub_40A110+1992↓j
.text:0040B9F3                 cmp     edx, 10000h
.text:0040B9F9                 mov     ebp, 0Fh
.text:0040B9FE                 jz      loc_40A526
.text:0040BA04                 lea     ebp, [edx+edx]
.text:0040BA07                 mov     edx, [esp+97Ch+arg_C]
.text:0040BA0E                 cmp     ebp, 10000h
.text:0040BA14                 mov     [edx+4], ebp
.text:0040BA17                 jbe     short loc_40BA20
.text:0040BA19                 mov     dword ptr [edx+4], 10000h
.text:0040BA20
.text:0040BA20 loc_40BA20:                             ; CODE XREF: sub_40A110+1907↑j
.text:0040BA20                 mov     eax, [esp+97Ch+arg_C]
.text:0040BA27                 mov     ebp, 0Ch
.text:0040BA2C                 mov     edx, [eax+4]
.text:0040BA2F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040BA32                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040BA36                 call    realloc
.text:0040BA3B                 mov     edi, [esp+97Ch+arg_C]
.text:0040BA42                 test    eax, eax
.text:0040BA44                 mov     [edi], eax
.text:0040BA46                 jz      loc_40A526
.text:0040BA4C                 cmp     ebx, eax
.text:0040BA4E                 jz      short loc_40BA84
.text:0040BA50                 mov     ecx, [esp+97Ch+var_908]
.text:0040BA54                 sub     eax, ebx
.text:0040BA56                 add     [esp+97Ch+var_950], eax
.text:0040BA5A                 add     [esp+97Ch+var_904], eax
.text:0040BA5E                 test    ecx, ecx
.text:0040BA60                 jz      short loc_40BA66
.text:0040BA62                 add     [esp+97Ch+var_908], eax
.text:0040BA66
.text:0040BA66 loc_40BA66:                             ; CODE XREF: sub_40A110+1950↑j
.text:0040BA66                 mov     ebx, [esp+97Ch+var_900]
.text:0040BA6A                 test    ebx, ebx
.text:0040BA6C                 jz      short loc_40BA72
.text:0040BA6E                 add     [esp+97Ch+var_900], eax
.text:0040BA72
.text:0040BA72 loc_40BA72:                             ; CODE XREF: sub_40A110+195C↑j
.text:0040BA72                 mov     esi, [esp+97Ch+var_8FC]
.text:0040BA79                 test    esi, esi
.text:0040BA7B                 jz      short loc_40BA84
.text:0040BA7D                 add     [esp+97Ch+var_8FC], eax
.text:0040BA84
.text:0040BA84 loc_40BA84:                             ; CODE XREF: sub_40A110+193E↑j
.text:0040BA84                                         ; sub_40A110+196B↑j
.text:0040BA84                 mov     edx, [esp+97Ch+arg_C]
.text:0040BA8B                 mov     eax, [esp+97Ch+arg_C]
.text:0040BA92                 mov     ebp, [esp+97Ch+var_950]
.text:0040BA96                 mov     edi, [edx]
.text:0040BA98                 mov     edx, [eax+4]
.text:0040BA9B                 sub     ebp, edi
.text:0040BA9D                 inc     ebp
.text:0040BA9E                 mov     ebx, edi
.text:0040BAA0                 cmp     ebp, edx
.text:0040BAA2                 ja      loc_40B9F3
.text:0040BAA8
.text:0040BAA8 loc_40BAA8:                             ; CODE XREF: sub_40A110+18DD↑j
.text:0040BAA8                 cld
.text:0040BAA9                 mov     ebx, [esp+97Ch+var_950]
.text:0040BAAD                 xor     eax, eax
.text:0040BAAF                 mov     ecx, 8
.text:0040BAB4                 mov     byte ptr [ebx], 20h ; ' '
.text:0040BAB7                 inc     ebx
.text:0040BAB8                 mov     edi, ebx
.text:0040BABA                 mov     [esp+97Ch+var_950], ebx
.text:0040BABE                 rep stosd
.text:0040BAC0                 cmp     byte ptr [ebx-2], 5
.text:0040BAC4                 jz      loc_40C35F
.text:0040BACA
.text:0040BACA loc_40BACA:                             ; CODE XREF: sub_40A110+1ACD↓j
.text:0040BACA                                         ; sub_40A110+1BD8↓j ...
.text:0040BACA                 mov     edx, [esp+97Ch+var_8D0]
.text:0040BAD1                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040BAD8                 jz      loc_40BD6F
.text:0040BADE                 movzx   eax, byte ptr [edx]
.text:0040BAE1                 lea     edi, [edx+1]
.text:0040BAE4                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040BAEB                 mov     [esp+97Ch+var_8D0], edi
.text:0040BAF2                 test    ecx, ecx
.text:0040BAF4                 mov     [esp+97Ch+var_8EC], al
.text:0040BAFB                 jz      short loc_40BB12
.text:0040BAFD                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040BB04                 movzx   esi, al
.text:0040BB07                 movzx   ebx, byte ptr [esi+ebp]
.text:0040BB0B                 mov     [esp+97Ch+var_8EC], bl
.text:0040BB12
.text:0040BB12 loc_40BB12:                             ; CODE XREF: sub_40A110+19EB↑j
.text:0040BB12                 test    byte ptr [esp+97Ch+arg_8], 1
.text:0040BB1A                 jz      short loc_40BB2A
.text:0040BB1C                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040BB24                 jz      loc_40C308
.text:0040BB2A
.text:0040BB2A loc_40BB2A:                             ; CODE XREF: sub_40A110+1A0A↑j
.text:0040BB2A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:0040BB32                 jz      loc_40C2C4
.text:0040BB38                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BB3F
.text:0040BB3F loc_40BB3F:                             ; CODE XREF: sub_40A110+21C5↓j
.text:0040BB3F                 cmp     [esp+97Ch+var_91E], 0
.text:0040BB44                 jz      loc_40C229
.text:0040BB4A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040BB52                 jz      loc_40C220
.text:0040BB58
.text:0040BB58 loc_40BB58:                             ; CODE XREF: sub_40A110+2121↓j
.text:0040BB58                                         ; sub_40A110+2137↓j ...
.text:0040BB58                 cmp     byte ptr [edi], 2Dh ; '-'
.text:0040BB5B                 jz      loc_40C190
.text:0040BB61
.text:0040BB61 loc_40BB61:                             ; CODE XREF: sub_40A110+2084↓j
.text:0040BB61                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040BB69                 jz      short loc_40BB79
.text:0040BB6B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040BB73                 jz      loc_40BEF6
.text:0040BB79
.text:0040BB79 loc_40BB79:                             ; CODE XREF: sub_40A110+1A59↑j
.text:0040BB79                                         ; sub_40A110+1DE9↓j
.text:0040BB79                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040BB81                 jz      short loc_40BB91
.text:0040BB83                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040BB8B                 jz      loc_40BD83
.text:0040BB91
.text:0040BB91 loc_40BB91:                             ; CODE XREF: sub_40A110+1A71↑j
.text:0040BB91                                         ; sub_40A110+1C76↓j
.text:0040BB91                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040BB99                 jz      short loc_40BBA5
.text:0040BB9B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040BBA3                 jz      short loc_40BBE2
.text:0040BBA5
.text:0040BBA5 loc_40BBA5:                             ; CODE XREF: sub_40A110+1A89↑j
.text:0040BBA5                                         ; sub_40A110+1AD5↓j
.text:0040BBA5                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040BBAD                 mov     edx, 1
.text:0040BBB2                 mov     [esp+97Ch+var_91E], 0
.text:0040BBB7                 mov     esi, [esp+97Ch+var_950]
.text:0040BBBB                 shr     cl, 3
.text:0040BBBE                 movzx   edi, cl
.text:0040BBC1                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040BBC9                 and     ecx, 7
.text:0040BBCC                 shl     edx, cl
.text:0040BBCE                 or      [edi+esi], dl
.text:0040BBD1                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040BBD9
.text:0040BBD9 loc_40BBD9:                             ; CODE XREF: sub_40A110+224A↓j
.text:0040BBD9                 mov     [esp+97Ch+var_924], ebx
.text:0040BBDD                 jmp     loc_40BACA
.text:0040BBE2 ; ---------------------------------------------------------------------------
.text:0040BBE2
.text:0040BBE2 loc_40BBE2:                             ; CODE XREF: sub_40A110+1A93↑j
.text:0040BBE2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:0040BBE5                 jnz     short loc_40BBA5
.text:0040BBE7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BBEE                 mov     ebp, 0Eh
.text:0040BBF3                 jz      loc_40A526
.text:0040BBF9                 inc     edi
.text:0040BBFA                 xor     ebx, ebx
.text:0040BBFC                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BC03                 mov     [esp+97Ch+var_8D0], edi
.text:0040BC0A                 jz      loc_40BD6F
.text:0040BC10
.text:0040BC10 loc_40BC10:                             ; CODE XREF: sub_40A110+1B75↓j
.text:0040BC10                 movzx   eax, byte ptr [edi]
.text:0040BC13                 inc     edi
.text:0040BC14                 mov     esi, [esp+97Ch+var_8F8]
.text:0040BC1B                 mov     [esp+97Ch+var_8D0], edi
.text:0040BC22                 test    esi, esi
.text:0040BC24                 mov     [esp+97Ch+var_8EC], al
.text:0040BC2B                 jz      short loc_40BC43
.text:0040BC2D                 mov     esi, [esp+97Ch+var_8F8]
.text:0040BC34                 movzx   ebp, al
.text:0040BC37                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040BC3C                 mov     [esp+97Ch+var_8EC], cl
.text:0040BC43
.text:0040BC43 loc_40BC43:                             ; CODE XREF: sub_40A110+1B1B↑j
.text:0040BC43                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040BC4B                 jz      loc_40BD61
.text:0040BC51
.text:0040BC51 loc_40BC51:                             ; CODE XREF: sub_40A110+1C54↓j
.text:0040BC51                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BC58                 jz      short loc_40BC9A
.text:0040BC5A                 test    bl, bl
.text:0040BC5C                 js      short loc_40BC90
.text:0040BC5E                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040BC66                 movzx   edx, bl
.text:0040BC69                 inc     bl
.text:0040BC6B                 mov     [esp+edx+97Ch+var_8CC], al
.text:0040BC72                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BC79
.text:0040BC79 loc_40BC79:                             ; CODE XREF: sub_40A110+1B88↓j
.text:0040BC79                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BC80                 mov     ebp, 0Eh
.text:0040BC85                 jnz     short loc_40BC10
.text:0040BC87                 jmp     loc_40A526
.text:0040BC87 ; ---------------------------------------------------------------------------
.text:0040BC8C                 align 10h
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: sub_40A110+1B4C↑j
.text:0040BC90                 mov     [esp+97Ch+var_8CC], 0
.text:0040BC98                 jmp     short loc_40BC79
.text:0040BC9A ; ---------------------------------------------------------------------------
.text:0040BC9A
.text:0040BC9A loc_40BC9A:                             ; CODE XREF: sub_40A110+1B48↑j
.text:0040BC9A                                         ; sub_40A110+1C5A↓j
.text:0040BC9A                 xor     ecx, ecx
.text:0040BC9C                 movzx   edi, bl
.text:0040BC9F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:0040BCA6                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040BCAE                 jz      short loc_40BCED
.text:0040BCB0
.text:0040BCB0 loc_40BCB0:                             ; CODE XREF: sub_40A110+1BE7↓j
.text:0040BCB0                                         ; sub_40A110+1BF3↓j
.text:0040BCB0                 cmp     bl, 0FFh
.text:0040BCB3                 jz      short loc_40BCCF
.text:0040BCB5                 mov     eax, [esp+97Ch+var_8D0]
.text:0040BCBC
.text:0040BCBC loc_40BCBC:                             ; CODE XREF: sub_40A110+1BB6↓j
.text:0040BCBC                 dec     bl
.text:0040BCBE                 lea     edi, [eax-1]
.text:0040BCC1                 cmp     bl, 0FFh
.text:0040BCC4                 mov     eax, edi
.text:0040BCC6                 jnz     short loc_40BCBC
.text:0040BCC8                 mov     [esp+97Ch+var_8D0], edi
.text:0040BCCF
.text:0040BCCF loc_40BCCF:                             ; CODE XREF: sub_40A110+1BA3↑j
.text:0040BCCF                 mov     eax, [esp+97Ch+var_950]
.text:0040BCD3                 or      byte ptr [eax+0Bh], 8
.text:0040BCD7                 or      byte ptr [eax+5], 40h
.text:0040BCDB                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:0040BCE3
.text:0040BCE3 loc_40BCE3:                             ; CODE XREF: sub_40A110+1C3B↓j
.text:0040BCE3                                         ; sub_40A110+1D73↓j ...
.text:0040BCE3                 mov     [esp+97Ch+var_91E], 0
.text:0040BCE8                 jmp     loc_40BACA
.text:0040BCED ; ---------------------------------------------------------------------------
.text:0040BCED
.text:0040BCED loc_40BCED:                             ; CODE XREF: sub_40A110+1B9E↑j
.text:0040BCED                 mov     eax, [esp+97Ch+var_8D0]
.text:0040BCF4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040BCF7                 jnz     short loc_40BCB0
.text:0040BCF9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:0040BD01                 test    cl, cl
.text:0040BD03                 jz      short loc_40BCB0
.text:0040BD05                 dec     bl
.text:0040BD07                 jnz     short loc_40BD4D
.text:0040BD09                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040BD10                 mov     ebp, 0Eh
.text:0040BD15                 jz      loc_40A526
.text:0040BD1B                 mov     bl, cl
.text:0040BD1D                 mov     esi, [esp+97Ch+var_950]
.text:0040BD21                 lea     ebp, [eax+1]
.text:0040BD24                 mov     [esp+97Ch+var_8D0], ebp
.text:0040BD2B                 shr     bl, 3
.text:0040BD2E                 and     ecx, 7
.text:0040BD31                 mov     edx, 1
.text:0040BD36                 movzx   ebp, bl
.text:0040BD39                 shl     edx, cl
.text:0040BD3B                 or      [ebp+esi+0], dl
.text:0040BD3F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:0040BD47                 mov     [esp+97Ch+var_924], ebx
.text:0040BD4B                 jmp     short loc_40BCE3
.text:0040BD4D ; ---------------------------------------------------------------------------
.text:0040BD4D
.text:0040BD4D loc_40BD4D:                             ; CODE XREF: sub_40A110+1BF7↑j
.text:0040BD4D                                         ; sub_40A110+1D92↓j
.text:0040BD4D                 mov     edx, [esp+97Ch+Block]
.text:0040BD54                 mov     ebp, 3
.text:0040BD59                 mov     [esp+97Ch+Size], edx
.text:0040BD5C                 jmp     loc_40A6B3
.text:0040BD61 ; ---------------------------------------------------------------------------
.text:0040BD61
.text:0040BD61 loc_40BD61:                             ; CODE XREF: sub_40A110+1B3B↑j
.text:0040BD61                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040BD64                 jnz     loc_40BC51
.text:0040BD6A                 jmp     loc_40BC9A
.text:0040BD6F ; ---------------------------------------------------------------------------
.text:0040BD6F
.text:0040BD6F loc_40BD6F:                             ; CODE XREF: sub_40A110+1705↑j
.text:0040BD6F                                         ; sub_40A110+19C8↑j ...
.text:0040BD6F                 mov     ebp, [esp+97Ch+Block]
.text:0040BD76                 mov     [esp+97Ch+Size], ebp
.text:0040BD79                 mov     ebp, 7
.text:0040BD7E                 jmp     loc_40A6B3
.text:0040BD83 ; ---------------------------------------------------------------------------
.text:0040BD83
.text:0040BD83 loc_40BD83:                             ; CODE XREF: sub_40A110+1A7B↑j
.text:0040BD83                 cmp     byte ptr [edi], 3Dh ; '='
.text:0040BD86                 jnz     loc_40BB91
.text:0040BD8C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BD93                 mov     ebp, 0Eh
.text:0040BD98                 jz      loc_40A526
.text:0040BD9E                 inc     edi
.text:0040BD9F                 xor     ebx, ebx
.text:0040BDA1                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BDA8                 mov     [esp+97Ch+var_8D0], edi
.text:0040BDAF                 jz      short loc_40BD6F
.text:0040BDB1
.text:0040BDB1 loc_40BDB1:                             ; CODE XREF: sub_40A110+1D17↓j
.text:0040BDB1                 movzx   eax, byte ptr [edi]
.text:0040BDB4                 inc     edi
.text:0040BDB5                 mov     esi, [esp+97Ch+var_8F8]
.text:0040BDBC                 mov     [esp+97Ch+var_8D0], edi
.text:0040BDC3                 test    esi, esi
.text:0040BDC5                 mov     [esp+97Ch+var_8EC], al
.text:0040BDCC                 jz      short loc_40BDE4
.text:0040BDCE                 mov     esi, [esp+97Ch+var_8F8]
.text:0040BDD5                 movzx   ebp, al
.text:0040BDD8                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040BDDD                 mov     [esp+97Ch+var_8EC], cl
.text:0040BDE4
.text:0040BDE4 loc_40BDE4:                             ; CODE XREF: sub_40A110+1CBC↑j
.text:0040BDE4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040BDEC                 jz      loc_40BEE8
.text:0040BDF2
.text:0040BDF2 loc_40BDF2:                             ; CODE XREF: sub_40A110+1DDB↓j
.text:0040BDF2                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BDF9                 jz      short loc_40BE3A
.text:0040BDFB                 cmp     bl, 1
.text:0040BDFE                 ja      short loc_40BE30
.text:0040BE00                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040BE08                 movzx   edi, bl
.text:0040BE0B                 inc     bl
.text:0040BE0D                 mov     [esp+edi+97Ch+var_84C], dl
.text:0040BE14                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BE1B
.text:0040BE1B loc_40BE1B:                             ; CODE XREF: sub_40A110+1D28↓j
.text:0040BE1B                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BE22                 mov     ebp, 0Eh
.text:0040BE27                 jnz     short loc_40BDB1
.text:0040BE29                 jmp     loc_40A526
.text:0040BE29 ; ---------------------------------------------------------------------------
.text:0040BE2E                 align 10h
.text:0040BE30
.text:0040BE30 loc_40BE30:                             ; CODE XREF: sub_40A110+1CEE↑j
.text:0040BE30                 mov     [esp+97Ch+var_84C], 0
.text:0040BE38                 jmp     short loc_40BE1B
.text:0040BE3A ; ---------------------------------------------------------------------------
.text:0040BE3A
.text:0040BE3A loc_40BE3A:                             ; CODE XREF: sub_40A110+1CE9↑j
.text:0040BE3A                                         ; sub_40A110+1DE1↓j
.text:0040BE3A                 xor     eax, eax
.text:0040BE3C                 movzx   ecx, bl
.text:0040BE3F                 mov     [esp+ecx+97Ch+var_84C], al
.text:0040BE46                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040BE4E                 jz      short loc_40BE88
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: sub_40A110+1D82↓j
.text:0040BE50                                         ; sub_40A110+1D8E↓j
.text:0040BE50                 cmp     bl, 0FFh
.text:0040BE53                 jz      short loc_40BE6F
.text:0040BE55                 mov     eax, [esp+97Ch+var_8D0]
.text:0040BE5C
.text:0040BE5C loc_40BE5C:                             ; CODE XREF: sub_40A110+1D56↓j
.text:0040BE5C                 dec     bl
.text:0040BE5E                 lea     edi, [eax-1]
.text:0040BE61                 cmp     bl, 0FFh
.text:0040BE64                 mov     eax, edi
.text:0040BE66                 jnz     short loc_40BE5C
.text:0040BE68                 mov     [esp+97Ch+var_8D0], edi
.text:0040BE6F
.text:0040BE6F loc_40BE6F:                             ; CODE XREF: sub_40A110+1D43↑j
.text:0040BE6F                 mov     edi, [esp+97Ch+var_950]
.text:0040BE73                 or      byte ptr [edi+0Bh], 8
.text:0040BE77                 or      byte ptr [edi+7], 20h
.text:0040BE7B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:0040BE83                 jmp     loc_40BCE3
.text:0040BE88 ; ---------------------------------------------------------------------------
.text:0040BE88
.text:0040BE88 loc_40BE88:                             ; CODE XREF: sub_40A110+1D3E↑j
.text:0040BE88                 mov     eax, [esp+97Ch+var_8D0]
.text:0040BE8F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040BE92                 jnz     short loc_40BE50
.text:0040BE94                 movzx   ecx, [esp+97Ch+var_84C]
.text:0040BE9C                 test    cl, cl
.text:0040BE9E                 jz      short loc_40BE50
.text:0040BEA0                 dec     bl
.text:0040BEA2                 jnz     loc_40BD4D
.text:0040BEA8                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040BEAF                 mov     ebp, 0Eh
.text:0040BEB4                 jz      loc_40A526
.text:0040BEBA                 mov     dl, cl
.text:0040BEBC                 mov     esi, [esp+97Ch+var_950]
.text:0040BEC0                 lea     ebp, [eax+1]
.text:0040BEC3                 mov     [esp+97Ch+var_8D0], ebp
.text:0040BECA                 shr     dl, 3
.text:0040BECD                 and     ecx, 7
.text:0040BED0                 mov     ebx, 1
.text:0040BED5                 movzx   ebp, dl
.text:0040BED8                 shl     ebx, cl
.text:0040BEDA                 or      [ebp+esi+0], bl
.text:0040BEDE                 mov     [esp+97Ch+var_91E], 1
.text:0040BEE3                 jmp     loc_40BACA
.text:0040BEE8 ; ---------------------------------------------------------------------------
.text:0040BEE8
.text:0040BEE8 loc_40BEE8:                             ; CODE XREF: sub_40A110+1CDC↑j
.text:0040BEE8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040BEEB                 jnz     loc_40BDF2
.text:0040BEF1                 jmp     loc_40BE3A
.text:0040BEF6 ; ---------------------------------------------------------------------------
.text:0040BEF6
.text:0040BEF6 loc_40BEF6:                             ; CODE XREF: sub_40A110+1A63↑j
.text:0040BEF6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040BEF9                 jnz     loc_40BB79
.text:0040BEFF                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BF06                 mov     ebp, 0Eh
.text:0040BF0B                 jz      loc_40A526
.text:0040BF11                 inc     edi
.text:0040BF12                 xor     ebx, ebx
.text:0040BF14                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BF1B                 mov     [esp+97Ch+var_8D0], edi
.text:0040BF22                 jz      loc_40BD6F
.text:0040BF28
.text:0040BF28 loc_40BF28:                             ; CODE XREF: sub_40A110+1E89↓j
.text:0040BF28                 movzx   ecx, byte ptr [edi]
.text:0040BF2B                 inc     edi
.text:0040BF2C                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040BF33                 mov     [esp+97Ch+var_8D0], edi
.text:0040BF3A                 test    ebp, ebp
.text:0040BF3C                 mov     [esp+97Ch+var_8EC], cl
.text:0040BF43                 jz      short loc_40BF5B
.text:0040BF45                 movzx   ebp, cl
.text:0040BF48                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040BF4F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:0040BF54                 mov     [esp+97Ch+var_8EC], dl
.text:0040BF5B
.text:0040BF5B loc_40BF5B:                             ; CODE XREF: sub_40A110+1E33↑j
.text:0040BF5B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040BF63                 jz      loc_40C180
.text:0040BF69
.text:0040BF69 loc_40BF69:                             ; CODE XREF: sub_40A110+2073↓j
.text:0040BF69                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BF70                 jz      short loc_40BFA0
.text:0040BF72                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040BF7A                 movzx   esi, bl
.text:0040BF7D                 inc     bl
.text:0040BF7F                 mov     ebp, 0Eh
.text:0040BF84                 mov     [esp+esi+97Ch+name], al
.text:0040BF8B                 mov     edi, [esp+97Ch+var_8D0]
.text:0040BF92                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040BF99                 jnz     short loc_40BF28
.text:0040BF9B                 jmp     loc_40A526
.text:0040BFA0 ; ---------------------------------------------------------------------------
.text:0040BFA0
.text:0040BFA0 loc_40BFA0:                             ; CODE XREF: sub_40A110+1E60↑j
.text:0040BFA0                                         ; sub_40A110+2079↓j
.text:0040BFA0                 xor     eax, eax
.text:0040BFA2                 movzx   edi, bl
.text:0040BFA5                 mov     [esp+edi+97Ch+name], al
.text:0040BFAC                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040BFB4                 jz      short loc_40BFEE
.text:0040BFB6
.text:0040BFB6 loc_40BFB6:                             ; CODE XREF: sub_40A110+1EE8↓j
.text:0040BFB6                 cmp     bl, 0FFh
.text:0040BFB9                 jz      short loc_40BFD5
.text:0040BFBB                 mov     eax, [esp+97Ch+var_8D0]
.text:0040BFC2
.text:0040BFC2 loc_40BFC2:                             ; CODE XREF: sub_40A110+1EBC↓j
.text:0040BFC2                 dec     bl
.text:0040BFC4                 lea     edi, [eax-1]
.text:0040BFC7                 cmp     bl, 0FFh
.text:0040BFCA                 mov     eax, edi
.text:0040BFCC                 jnz     short loc_40BFC2
.text:0040BFCE                 mov     [esp+97Ch+var_8D0], edi
.text:0040BFD5
.text:0040BFD5 loc_40BFD5:                             ; CODE XREF: sub_40A110+1EA9↑j
.text:0040BFD5                 mov     eax, [esp+97Ch+var_950]
.text:0040BFD9                 or      byte ptr [eax+0Bh], 8
.text:0040BFDD                 or      byte ptr [eax+7], 4
.text:0040BFE1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:0040BFE9                 jmp     loc_40BCE3
.text:0040BFEE ; ---------------------------------------------------------------------------
.text:0040BFEE
.text:0040BFEE loc_40BFEE:                             ; CODE XREF: sub_40A110+1EA4↑j
.text:0040BFEE                 mov     esi, [esp+97Ch+var_8D0]
.text:0040BFF5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:0040BFF8                 jnz     short loc_40BFB6
.text:0040BFFA                 cld
.text:0040BFFB                 mov     edi, offset aLower ; "lower"
.text:0040C000                 lea     ebx, [esp+97Ch+name]
.text:0040C007                 mov     esi, ebx
.text:0040C009                 mov     ecx, 6
.text:0040C00E                 lea     ebp, [esp+97Ch+name]
.text:0040C015                 repe cmpsb
.text:0040C017                 setz    [esp+97Ch+var_925]
.text:0040C01C                 mov     ecx, 6
.text:0040C021                 mov     edi, offset aUpper ; "upper"
.text:0040C026                 mov     esi, ebp
.text:0040C028                 lea     edx, [esp+97Ch+name]
.text:0040C02F                 repe cmpsb
.text:0040C031                 setz    [esp+97Ch+var_926]
.text:0040C036                 mov     [esp+97Ch+Size], edx ; name
.text:0040C039                 call    wctype
.text:0040C03E                 movzx   ebx, ax
.text:0040C041                 test    bx, bx
.text:0040C044                 mov     dword ptr [esp+97Ch+Type], ebx
.text:0040C048                 jz      loc_40C16C
.text:0040C04E                 mov     eax, [esp+97Ch+var_8D0]
.text:0040C055                 mov     ebp, 0Eh
.text:0040C05A                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C061                 jz      loc_40A526
.text:0040C067                 lea     ecx, [eax+1]
.text:0040C06A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:0040C071                 mov     [esp+97Ch+var_8D0], ecx
.text:0040C078                 jz      loc_40BD6F
.text:0040C07E                 xor     edi, edi
.text:0040C080
.text:0040C080 loc_40C080:                             ; CODE XREF: sub_40A110+202E↓j
.text:0040C080                 mov     [esp+97Ch+Size], edi ; Ch
.text:0040C083                 call    btowc
.text:0040C088                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0040C08C                 movzx   esi, ax
.text:0040C08F                 mov     [esp+97Ch+Size], esi ; C
.text:0040C092                 mov     [esp+97Ch+var_978], ebp ; Type
.text:0040C096                 call    iswctype
.text:0040C09B                 test    eax, eax
.text:0040C09D                 jz      short loc_40C0BC
.text:0040C09F                 mov     ecx, edi
.text:0040C0A1                 mov     ebx, edi
.text:0040C0A3                 mov     edx, [esp+97Ch+var_950]
.text:0040C0A7                 shr     cl, 3
.text:0040C0AA                 movzx   esi, cl
.text:0040C0AD                 mov     ecx, ebx
.text:0040C0AF                 and     ecx, 7
.text:0040C0B2                 mov     ebx, 1
.text:0040C0B7                 shl     ebx, cl
.text:0040C0B9                 or      [esi+edx], bl
.text:0040C0BC
.text:0040C0BC loc_40C0BC:                             ; CODE XREF: sub_40A110+1F8D↑j
.text:0040C0BC                 mov     eax, [esp+97Ch+var_8F8]
.text:0040C0C3                 test    eax, eax
.text:0040C0C5                 jz      short loc_40C132
.text:0040C0C7                 cmp     [esp+97Ch+var_926], 0
.text:0040C0CC                 jnz     short loc_40C0D5
.text:0040C0CE                 cmp     [esp+97Ch+var_925], 0
.text:0040C0D3                 jz      short loc_40C132
.text:0040C0D5
.text:0040C0D5 loc_40C0D5:                             ; CODE XREF: sub_40A110+1FBC↑j
.text:0040C0D5                 mov     ebp, ds:__mb_cur_max
.text:0040C0DB                 cmp     dword ptr [ebp+0], 1
.text:0040C0DF                 jz      short loc_40C15B
.text:0040C0E1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:0040C0E9                 mov     [esp+97Ch+Size], edi ; C
.text:0040C0EC                 call    _isctype
.text:0040C0F1
.text:0040C0F1 loc_40C0F1:                             ; CODE XREF: sub_40A110+205A↓j
.text:0040C0F1                 test    eax, eax
.text:0040C0F3                 jnz     short loc_40C114
.text:0040C0F5                 mov     ebx, ds:__mb_cur_max
.text:0040C0FB                 cmp     dword ptr [ebx], 1
.text:0040C0FE                 jz      short loc_40C149
.text:0040C100                 mov     [esp+97Ch+var_978], 2 ; Type
.text:0040C108                 mov     [esp+97Ch+Size], edi ; C
.text:0040C10B                 call    _isctype
.text:0040C110
.text:0040C110 loc_40C110:                             ; CODE XREF: sub_40A110+2049↓j
.text:0040C110                 test    eax, eax
.text:0040C112                 jz      short loc_40C132
.text:0040C114
.text:0040C114 loc_40C114:                             ; CODE XREF: sub_40A110+1FE3↑j
.text:0040C114                 mov     ecx, edi
.text:0040C116                 mov     ebx, edi
.text:0040C118                 mov     edx, [esp+97Ch+var_950]
.text:0040C11C                 shr     cl, 3
.text:0040C11F                 movzx   ebp, cl
.text:0040C122                 mov     ecx, ebx
.text:0040C124                 and     ecx, 7
.text:0040C127                 mov     ebx, 1
.text:0040C12C                 shl     ebx, cl
.text:0040C12E                 or      [ebp+edx+0], bl
.text:0040C132
.text:0040C132 loc_40C132:                             ; CODE XREF: sub_40A110+1FB5↑j
.text:0040C132                                         ; sub_40A110+1FC3↑j ...
.text:0040C132                 mov     [esp+97Ch+var_91E], 1
.text:0040C137                 inc     edi
.text:0040C138                 cmp     edi, 0FFh
.text:0040C13E                 jle     loc_40C080
.text:0040C144                 jmp     loc_40BACA
.text:0040C149 ; ---------------------------------------------------------------------------
.text:0040C149
.text:0040C149 loc_40C149:                             ; CODE XREF: sub_40A110+1FEE↑j
.text:0040C149                 mov     ebp, ds:_pctype
.text:0040C14F                 mov     ecx, [ebp+0]
.text:0040C152                 movzx   eax, word ptr [ecx+edi*2]
.text:0040C156                 and     eax, 2
.text:0040C159                 jmp     short loc_40C110
.text:0040C15B ; ---------------------------------------------------------------------------
.text:0040C15B
.text:0040C15B loc_40C15B:                             ; CODE XREF: sub_40A110+1FCF↑j
.text:0040C15B                 mov     edx, ds:_pctype
.text:0040C161                 mov     esi, [edx]
.text:0040C163                 movzx   eax, word ptr [esi+edi*2]
.text:0040C167                 and     eax, 1
.text:0040C16A                 jmp     short loc_40C0F1
.text:0040C16C ; ---------------------------------------------------------------------------
.text:0040C16C
.text:0040C16C loc_40C16C:                             ; CODE XREF: sub_40A110+1F38↑j
.text:0040C16C                 mov     ebx, [esp+97Ch+Block]
.text:0040C173                 mov     ebp, 4
.text:0040C178
.text:0040C178 loc_40C178:                             ; CODE XREF: sub_40A110+26A5↓j
.text:0040C178                 mov     [esp+97Ch+Size], ebx
.text:0040C17B                 jmp     loc_40A6B3
.text:0040C180 ; ---------------------------------------------------------------------------
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: sub_40A110+1E53↑j
.text:0040C180                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C183                 jnz     loc_40BF69
.text:0040C189                 jmp     loc_40BFA0
.text:0040C189 ; ---------------------------------------------------------------------------
.text:0040C18E                 align 10h
.text:0040C190
.text:0040C190 loc_40C190:                             ; CODE XREF: sub_40A110+1A4B↑j
.text:0040C190                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:0040C194                 jz      loc_40BB61
.text:0040C19A                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C1A1                 mov     ebp, 0Eh
.text:0040C1A6                 jz      loc_40A526
.text:0040C1AC                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040C1B4                 inc     edi
.text:0040C1B5                 mov     ecx, [esp+97Ch+var_950]
.text:0040C1B9                 mov     [esp+97Ch+var_8D0], edi
.text:0040C1C0                 mov     edx, [esp+97Ch+arg_8]
.text:0040C1C7                 lea     edi, [esp+97Ch+var_8D0]
.text:0040C1CE                 mov     [esp+97Ch+var_978], edi
.text:0040C1D2                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040C1D9                 mov     eax, [esp+97Ch+var_8F4]
.text:0040C1E0                 mov     [esp+97Ch+var_968], ecx
.text:0040C1E4                 mov     [esp+97Ch+var_96C], edx
.text:0040C1E8                 mov     [esp+97Ch+var_970], ebx
.text:0040C1EC                 mov     [esp+97Ch+var_974], eax
.text:0040C1F0                 mov     [esp+97Ch+Size], ebp
.text:0040C1F3
.text:0040C1F3 loc_40C1F3:                             ; CODE XREF: sub_40A110+2193↓j
.text:0040C1F3                 call    sub_4070A0
.text:0040C1F8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040C200                 test    eax, eax
.text:0040C202                 mov     ebx, eax
.text:0040C204                 jz      loc_40BACA
.text:0040C20A                 mov     esi, [esp+97Ch+Block]
.text:0040C211                 mov     ebp, ebx
.text:0040C213
.text:0040C213 loc_40C213:                             ; CODE XREF: sub_40A110+318E↓j
.text:0040C213                 mov     [esp+97Ch+Size], esi
.text:0040C216                 jmp     loc_40A6B3
.text:0040C216 ; ---------------------------------------------------------------------------
.text:0040C21B                 align 10h
.text:0040C220
.text:0040C220 loc_40C220:                             ; CODE XREF: sub_40A110+1A42↑j
.text:0040C220                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C223                 jnz     loc_40C2B3
.text:0040C229
.text:0040C229 loc_40C229:                             ; CODE XREF: sub_40A110+1A34↑j
.text:0040C229                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040C231                 jnz     loc_40BB58
.text:0040C237                 lea     esi, [edi-2]
.text:0040C23A                 cmp     esi, [esp+97Ch+arg_0]
.text:0040C241                 jb      short loc_40C24D
.text:0040C243                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:0040C247                 jz      loc_40BB58
.text:0040C24D
.text:0040C24D loc_40C24D:                             ; CODE XREF: sub_40A110+2131↑j
.text:0040C24D                 lea     ebp, [edi-3]
.text:0040C250                 cmp     ebp, [esp+97Ch+arg_0]
.text:0040C257                 jb      short loc_40C25F
.text:0040C259                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0040C25D                 jz      short loc_40C2A8
.text:0040C25F
.text:0040C25F loc_40C25F:                             ; CODE XREF: sub_40A110+2147↑j
.text:0040C25F                                         ; sub_40A110+219C↓j
.text:0040C25F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040C262                 jz      loc_40BB58
.text:0040C268                 mov     esi, [esp+97Ch+var_950]
.text:0040C26C                 lea     edi, [esp+97Ch+var_8D0]
.text:0040C273                 mov     ecx, [esp+97Ch+arg_8]
.text:0040C27A                 mov     [esp+97Ch+var_978], edi
.text:0040C27E                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040C285                 mov     edx, [esp+97Ch+var_8F4]
.text:0040C28C                 mov     [esp+97Ch+var_968], esi
.text:0040C290                 mov     eax, [esp+97Ch+var_924]
.text:0040C294                 mov     [esp+97Ch+var_96C], ecx
.text:0040C298                 mov     [esp+97Ch+var_970], ebx
.text:0040C29C                 mov     [esp+97Ch+var_974], edx
.text:0040C2A0                 mov     [esp+97Ch+Size], eax
.text:0040C2A3                 jmp     loc_40C1F3
.text:0040C2A8 ; ---------------------------------------------------------------------------
.text:0040C2A8
.text:0040C2A8 loc_40C2A8:                             ; CODE XREF: sub_40A110+214D↑j
.text:0040C2A8                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0040C2AC                 jnz     short loc_40C25F
.text:0040C2AE                 jmp     loc_40BB58
.text:0040C2B3 ; ---------------------------------------------------------------------------
.text:0040C2B3
.text:0040C2B3 loc_40C2B3:                             ; CODE XREF: sub_40A110+2113↑j
.text:0040C2B3                 mov     ecx, [esp+97Ch+Block]
.text:0040C2BA                 mov     ebp, 0Bh
.text:0040C2BF                 jmp     loc_40AFEC
.text:0040C2C4 ; ---------------------------------------------------------------------------
.text:0040C2C4
.text:0040C2C4 loc_40C2C4:                             ; CODE XREF: sub_40A110+1A22↑j
.text:0040C2C4                 mov     ebx, [esp+97Ch+var_8F0]
.text:0040C2CB                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C2D2                 inc     ebx
.text:0040C2D3                 cmp     edi, ebx
.text:0040C2D5                 jz      loc_40BB3F
.text:0040C2DB
.text:0040C2DB loc_40C2DB:                             ; CODE XREF: sub_40A110+21EA↓j
.text:0040C2DB                 mov     edi, [esp+97Ch+var_950]
.text:0040C2DF                 movzx   edx, byte ptr [edi-1]
.text:0040C2E3                 test    dl, dl
.text:0040C2E5                 jz      short loc_40C2FC
.text:0040C2E7                 movzx   ebp, dl
.text:0040C2EA                 cmp     byte ptr [ebp+edi-1], 0
.text:0040C2EF                 jnz     short loc_40C2FC
.text:0040C2F1                 mov     ebx, [esp+97Ch+var_950]
.text:0040C2F5                 dec     dl
.text:0040C2F7                 mov     [ebx-1], dl
.text:0040C2FA                 jmp     short loc_40C2DB
.text:0040C2FC ; ---------------------------------------------------------------------------
.text:0040C2FC
.text:0040C2FC loc_40C2FC:                             ; CODE XREF: sub_40A110+21D5↑j
.text:0040C2FC                                         ; sub_40A110+21DF↑j
.text:0040C2FC                 movzx   edi, dl
.text:0040C2FF                 add     [esp+97Ch+var_950], edi
.text:0040C303                 jmp     loc_40A53F
.text:0040C308 ; ---------------------------------------------------------------------------
.text:0040C308
.text:0040C308 loc_40C308:                             ; CODE XREF: sub_40A110+1A14↑j
.text:0040C308                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C30F                 jz      loc_40B6C0
.text:0040C315                 movzx   ebx, byte ptr [edx+1]
.text:0040C319                 lea     ecx, [edx+2]
.text:0040C31C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040C323                 mov     [esp+97Ch+var_8D0], ecx
.text:0040C32A                 test    eax, eax
.text:0040C32C                 jz      short loc_40C33C
.text:0040C32E                 mov     edx, [esp+97Ch+var_8F8]
.text:0040C335                 movzx   edi, bl
.text:0040C338                 movzx   ebx, byte ptr [edi+edx]
.text:0040C33C
.text:0040C33C loc_40C33C:                             ; CODE XREF: sub_40A110+221C↑j
.text:0040C33C                 mov     cl, bl
.text:0040C33E                 mov     ebp, [esp+97Ch+var_950]
.text:0040C342                 mov     edx, 1
.text:0040C347                 shr     cl, 3
.text:0040C34A                 movzx   esi, cl
.text:0040C34D                 mov     ecx, ebx
.text:0040C34F                 and     ecx, 7
.text:0040C352                 movzx   ebx, bl
.text:0040C355                 shl     edx, cl
.text:0040C357                 or      [esi+ebp], dl
.text:0040C35A                 jmp     loc_40BBD9
.text:0040C35F ; ---------------------------------------------------------------------------
.text:0040C35F
.text:0040C35F loc_40C35F:                             ; CODE XREF: sub_40A110+19B4↑j
.text:0040C35F                 test    [esp+97Ch+arg_8], 100h
.text:0040C36A                 jz      loc_40BACA
.text:0040C370                 or      byte ptr [ebx+1], 4
.text:0040C374                 jmp     loc_40BACA
.text:0040C379 ; ---------------------------------------------------------------------------
.text:0040C379
.text:0040C379 loc_40C379:                             ; CODE XREF: sub_40A110+18B2↑j
.text:0040C379                 inc     edi
.text:0040C37A                 mov     [esp+97Ch+var_8D0], edi
.text:0040C381                 jmp     loc_40B9C8
.text:0040C386 ; ---------------------------------------------------------------------------
.text:0040C386
.text:0040C386 loc_40C386:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040C386                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040C386                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040A27F case 92
.text:0040C38D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040C394                 jz      loc_40B6C0
.text:0040C39A                 movzx   ecx, byte ptr [eax]
.text:0040C39D                 lea     ebx, [eax+1]
.text:0040C3A0                 mov     [esp+97Ch+var_8D0], ebx
.text:0040C3A7                 movzx   eax, cl
.text:0040C3AA                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0040C3AD                 mov     [esp+97Ch+var_8EC], cl
.text:0040C3B4                 cmp     eax, 55h
.text:0040C3B7                 ja      def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C3BD                 jmp     ds:jpt_40C3BD[eax*4] ; switch jump
.text:0040C3BD ; ---------------------------------------------------------------------------
.text:0040C3C4 jpt_40C3BD      dd offset loc_40C55B, offset loc_40C51C, offset loc_40C62D
.text:0040C3C4                                         ; DATA XREF: sub_40A110+22AD↑r
.text:0040C3C4                 dd offset def_40C3BD, offset loc_40C95E, offset def_40C3BD ; jump table for switch statement
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset loc_40C663, offset loc_40C663
.text:0040C3C4                 dd offset loc_40C663, offset loc_40C663, offset loc_40C663
.text:0040C3C4                 dd offset loc_40C663, offset loc_40C663, offset loc_40C663
.text:0040C3C4                 dd offset loc_40C663, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset loc_40C7BA, offset def_40C3BD, offset loc_40C88C
.text:0040C3C4                 dd offset loc_40C95E, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset loc_40C971, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset loc_40CA43, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset loc_40CB36, offset def_40C3BD, offset loc_40CC08
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset loc_40CCDA
.text:0040C3C4                 dd offset def_40C3BD, offset def_40C3BD, offset def_40C3BD
.text:0040C3C4                 dd offset loc_40CDCF, offset loc_40D379
.text:0040C51C ; ---------------------------------------------------------------------------
.text:0040C51C
.text:0040C51C loc_40C51C:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C51C                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C51C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C3BD case 40
.text:0040C527                 jz      loc_40ACCD
.text:0040C52D
.text:0040C52D def_40C3BD:                             ; CODE XREF: sub_40A110+22A7↑j
.text:0040C52D                                         ; sub_40A110+22AD↑j ...
.text:0040C52D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C534                 test    ebx, ebx
.text:0040C536                 jz      def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C53C                 movzx   edi, [esp+97Ch+var_8EC]
.text:0040C544                 mov     esi, [esp+97Ch+var_8F8]
.text:0040C54B                 movzx   ecx, byte ptr [edi+esi]
.text:0040C54F                 mov     [esp+97Ch+var_8EC], cl
.text:0040C556                 jmp     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C55B ; ---------------------------------------------------------------------------
.text:0040C55B
.text:0040C55B loc_40C55B:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C55B                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C55B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 39
.text:0040C566                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C56C
.text:0040C56C loc_40C56C:                             ; CODE XREF: sub_40A110+24D2↓j
.text:0040C56C                                         ; sub_40A110+24FF↓j ...
.text:0040C56C                 mov     eax, [esp+97Ch+arg_C]
.text:0040C573                 mov     ebp, [esp+97Ch+var_950]
.text:0040C577                 mov     edi, [eax]
.text:0040C579                 mov     edx, [eax+4]
.text:0040C57C                 sub     ebp, edi
.text:0040C57E                 inc     ebp
.text:0040C57F                 cmp     ebp, edx
.text:0040C581                 jbe     loc_40C621
.text:0040C587                 cmp     edx, 10000h
.text:0040C58D                 mov     ebp, 0Fh
.text:0040C592                 jz      loc_40A526
.text:0040C598                 lea     ebp, [edx+edx]
.text:0040C59B                 mov     edx, [esp+97Ch+arg_C]
.text:0040C5A2                 cmp     ebp, 10000h
.text:0040C5A8                 mov     [edx+4], ebp
.text:0040C5AB                 jbe     short loc_40C5B4
.text:0040C5AD                 mov     dword ptr [edx+4], 10000h
.text:0040C5B4
.text:0040C5B4 loc_40C5B4:                             ; CODE XREF: sub_40A110+249B↑j
.text:0040C5B4                 mov     ebx, [esp+97Ch+arg_C]
.text:0040C5BB                 mov     ebp, 0Ch
.text:0040C5C0                 mov     esi, [ebx+4]
.text:0040C5C3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C5C6                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040C5CA                 call    realloc
.text:0040C5CF                 mov     edx, [esp+97Ch+arg_C]
.text:0040C5D6                 test    eax, eax
.text:0040C5D8                 mov     [edx], eax
.text:0040C5DA                 jz      loc_40A526
.text:0040C5E0                 cmp     edi, eax
.text:0040C5E2                 jz      short loc_40C56C
.text:0040C5E4                 sub     eax, edi
.text:0040C5E6                 mov     edi, [esp+97Ch+var_908]
.text:0040C5EA                 add     [esp+97Ch+var_950], eax
.text:0040C5EE                 add     [esp+97Ch+var_904], eax
.text:0040C5F2                 test    edi, edi
.text:0040C5F4                 jz      short loc_40C5FA
.text:0040C5F6                 add     [esp+97Ch+var_908], eax
.text:0040C5FA
.text:0040C5FA loc_40C5FA:                             ; CODE XREF: sub_40A110+24E4↑j
.text:0040C5FA                 mov     ecx, [esp+97Ch+var_900]
.text:0040C5FE                 test    ecx, ecx
.text:0040C600                 jz      short loc_40C606
.text:0040C602                 add     [esp+97Ch+var_900], eax
.text:0040C606
.text:0040C606 loc_40C606:                             ; CODE XREF: sub_40A110+24F0↑j
.text:0040C606                 mov     edx, [esp+97Ch+var_8FC]
.text:0040C60D                 test    edx, edx
.text:0040C60F                 jz      loc_40C56C
.text:0040C615                 add     [esp+97Ch+var_8FC], eax
.text:0040C61C                 jmp     loc_40C56C
.text:0040C621 ; ---------------------------------------------------------------------------
.text:0040C621
.text:0040C621 loc_40C621:                             ; CODE XREF: sub_40A110+2471↑j
.text:0040C621                 mov     edi, [esp+97Ch+var_950]
.text:0040C625                 mov     byte ptr [edi], 0Ch
.text:0040C628                 jmp     loc_40A53A
.text:0040C62D ; ---------------------------------------------------------------------------
.text:0040C62D
.text:0040C62D loc_40C62D:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C62D                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C62D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C3BD case 41
.text:0040C638                 jnz     def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C63E                 mov     edi, [esp+97Ch+var_24]
.text:0040C645                 test    edi, edi
.text:0040C647                 jnz     loc_40AEB7
.text:0040C64D                 test    [esp+97Ch+arg_8], 20000h
.text:0040C658                 jnz     def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C65E                 jmp     loc_40AFE0
.text:0040C663 ; ---------------------------------------------------------------------------
.text:0040C663
.text:0040C663 loc_40C663:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C663                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C663                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0040C3BD cases 49-57
.text:0040C66E                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C674                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040C67C                 sub     bl, 30h ; '0'
.text:0040C67F                 movzx   eax, bl
.text:0040C682                 cmp     eax, [esp+97Ch+var_90C]
.text:0040C686                 ja      loc_40C7A9
.text:0040C68C                 mov     [esp+97Ch+var_970], eax
.text:0040C690                 mov     ecx, [esp+97Ch+Block]
.text:0040C697                 mov     edi, [esp+97Ch+var_28]
.text:0040C69E                 mov     esi, [esp+97Ch+var_24]
.text:0040C6A5                 mov     [esp+97Ch+Size], ecx
.text:0040C6A8                 mov     [esp+97Ch+var_978], edi
.text:0040C6AC                 mov     [esp+97Ch+var_974], esi
.text:0040C6B0                 call    sub_409AF0
.text:0040C6B5                 test    al, al
.text:0040C6B7                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C6BD                 mov     esi, [esp+97Ch+arg_C]
.text:0040C6C4                 mov     ebp, [esp+97Ch+var_950]
.text:0040C6C8                 mov     edi, [esi]
.text:0040C6CA                 mov     [esp+97Ch+var_900], ebp
.text:0040C6CE                 mov     edx, [esi+4]
.text:0040C6D1                 sub     ebp, edi
.text:0040C6D3                 mov     [esp+97Ch+var_940], edi
.text:0040C6D7                 add     ebp, 2
.text:0040C6DA                 cmp     ebp, edx
.text:0040C6DC                 jbe     loc_40C79A
.text:0040C6E2
.text:0040C6E2 loc_40C6E2:                             ; CODE XREF: sub_40A110+2684↓j
.text:0040C6E2                 cmp     edx, 10000h
.text:0040C6E8                 mov     ebp, 0Fh
.text:0040C6ED                 jz      loc_40A526
.text:0040C6F3                 mov     esi, [esp+97Ch+arg_C]
.text:0040C6FA                 lea     ecx, [edx+edx]
.text:0040C6FD                 cmp     ecx, 10000h
.text:0040C703                 mov     [esi+4], ecx
.text:0040C706                 jbe     short loc_40C70F
.text:0040C708                 mov     dword ptr [esi+4], 10000h
.text:0040C70F
.text:0040C70F loc_40C70F:                             ; CODE XREF: sub_40A110+25F6↑j
.text:0040C70F                 mov     eax, [esp+97Ch+arg_C]
.text:0040C716                 mov     ebp, [eax+4]
.text:0040C719                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C71C                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040C720                 mov     ebp, 0Ch
.text:0040C725                 call    realloc
.text:0040C72A                 mov     edx, [esp+97Ch+arg_C]
.text:0040C731                 test    eax, eax
.text:0040C733                 mov     [edx], eax
.text:0040C735                 jz      loc_40A526
.text:0040C73B                 cmp     [esp+97Ch+var_940], eax
.text:0040C73F                 jz      short loc_40C779
.text:0040C741                 mov     esi, [esp+97Ch+var_940]
.text:0040C745                 mov     edi, [esp+97Ch+var_908]
.text:0040C749                 sub     eax, esi
.text:0040C74B                 add     [esp+97Ch+var_950], eax
.text:0040C74F                 add     [esp+97Ch+var_904], eax
.text:0040C753                 test    edi, edi
.text:0040C755                 jz      short loc_40C75B
.text:0040C757                 add     [esp+97Ch+var_908], eax
.text:0040C75B
.text:0040C75B loc_40C75B:                             ; CODE XREF: sub_40A110+2645↑j
.text:0040C75B                 mov     edx, [esp+97Ch+var_900]
.text:0040C75F                 test    edx, edx
.text:0040C761                 jz      short loc_40C767
.text:0040C763                 add     [esp+97Ch+var_900], eax
.text:0040C767
.text:0040C767 loc_40C767:                             ; CODE XREF: sub_40A110+2651↑j
.text:0040C767                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040C76E                 test    ecx, ecx
.text:0040C770                 jz      short loc_40C779
.text:0040C772                 add     [esp+97Ch+var_8FC], eax
.text:0040C779
.text:0040C779 loc_40C779:                             ; CODE XREF: sub_40A110+262F↑j
.text:0040C779                                         ; sub_40A110+2660↑j
.text:0040C779                 mov     eax, [esp+97Ch+arg_C]
.text:0040C780                 mov     ebp, [esp+97Ch+var_950]
.text:0040C784                 mov     edi, [eax]
.text:0040C786                 mov     edx, [eax+4]
.text:0040C789                 sub     ebp, edi
.text:0040C78B                 add     ebp, 2
.text:0040C78E                 mov     [esp+97Ch+var_940], edi
.text:0040C792                 cmp     ebp, edx
.text:0040C794                 ja      loc_40C6E2
.text:0040C79A
.text:0040C79A loc_40C79A:                             ; CODE XREF: sub_40A110+25CC↑j
.text:0040C79A                 mov     edi, [esp+97Ch+var_950]
.text:0040C79E                 mov     byte ptr [edi], 8
.text:0040C7A1                 inc     edi
.text:0040C7A2                 mov     [edi], bl
.text:0040C7A4                 jmp     loc_40A53A
.text:0040C7A9 ; ---------------------------------------------------------------------------
.text:0040C7A9
.text:0040C7A9 loc_40C7A9:                             ; CODE XREF: sub_40A110+2576↑j
.text:0040C7A9                 mov     ebx, [esp+97Ch+Block]
.text:0040C7B0                 mov     ebp, 6
.text:0040C7B5                 jmp     loc_40C178
.text:0040C7BA ; ---------------------------------------------------------------------------
.text:0040C7BA
.text:0040C7BA loc_40C7BA:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C7BA                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C7BA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 60
.text:0040C7C5                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C7CB
.text:0040C7CB loc_40C7CB:                             ; CODE XREF: sub_40A110+2731↓j
.text:0040C7CB                                         ; sub_40A110+275E↓j ...
.text:0040C7CB                 mov     eax, [esp+97Ch+arg_C]
.text:0040C7D2                 mov     ebx, [esp+97Ch+var_950]
.text:0040C7D6                 mov     edi, [eax]
.text:0040C7D8                 mov     edx, [eax+4]
.text:0040C7DB                 sub     ebx, edi
.text:0040C7DD                 inc     ebx
.text:0040C7DE                 cmp     ebx, edx
.text:0040C7E0                 jbe     loc_40C880
.text:0040C7E6                 cmp     edx, 10000h
.text:0040C7EC                 mov     ebp, 0Fh
.text:0040C7F1                 jz      loc_40A526
.text:0040C7F7                 lea     ebx, [edx+edx]
.text:0040C7FA                 mov     edx, [esp+97Ch+arg_C]
.text:0040C801                 cmp     ebx, 10000h
.text:0040C807                 mov     [edx+4], ebx
.text:0040C80A                 jbe     short loc_40C813
.text:0040C80C                 mov     dword ptr [edx+4], 10000h
.text:0040C813
.text:0040C813 loc_40C813:                             ; CODE XREF: sub_40A110+26FA↑j
.text:0040C813                 mov     ebp, [esp+97Ch+arg_C]
.text:0040C81A                 mov     edx, [ebp+4]
.text:0040C81D                 mov     ebp, 0Ch
.text:0040C822                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C825                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040C829                 call    realloc
.text:0040C82E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040C835                 test    eax, eax
.text:0040C837                 mov     [ecx], eax
.text:0040C839                 jz      loc_40A526
.text:0040C83F                 cmp     edi, eax
.text:0040C841                 jz      short loc_40C7CB
.text:0040C843                 mov     esi, [esp+97Ch+var_908]
.text:0040C847                 sub     eax, edi
.text:0040C849                 add     [esp+97Ch+var_950], eax
.text:0040C84D                 add     [esp+97Ch+var_904], eax
.text:0040C851                 test    esi, esi
.text:0040C853                 jz      short loc_40C859
.text:0040C855                 add     [esp+97Ch+var_908], eax
.text:0040C859
.text:0040C859 loc_40C859:                             ; CODE XREF: sub_40A110+2743↑j
.text:0040C859                 mov     edi, [esp+97Ch+var_900]
.text:0040C85D                 test    edi, edi
.text:0040C85F                 jz      short loc_40C865
.text:0040C861                 add     [esp+97Ch+var_900], eax
.text:0040C865
.text:0040C865 loc_40C865:                             ; CODE XREF: sub_40A110+274F↑j
.text:0040C865                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040C86C                 test    ecx, ecx
.text:0040C86E                 jz      loc_40C7CB
.text:0040C874                 add     [esp+97Ch+var_8FC], eax
.text:0040C87B                 jmp     loc_40C7CB
.text:0040C880 ; ---------------------------------------------------------------------------
.text:0040C880
.text:0040C880 loc_40C880:                             ; CODE XREF: sub_40A110+26D0↑j
.text:0040C880                 mov     edi, [esp+97Ch+var_950]
.text:0040C884                 mov     byte ptr [edi], 1Ah
.text:0040C887                 jmp     loc_40A53A
.text:0040C88C ; ---------------------------------------------------------------------------
.text:0040C88C
.text:0040C88C loc_40C88C:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C88C                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C88C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 62
.text:0040C897                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C89D
.text:0040C89D loc_40C89D:                             ; CODE XREF: sub_40A110+2803↓j
.text:0040C89D                                         ; sub_40A110+2830↓j ...
.text:0040C89D                 mov     eax, [esp+97Ch+arg_C]
.text:0040C8A4                 mov     ebp, [esp+97Ch+var_950]
.text:0040C8A8                 mov     edi, [eax]
.text:0040C8AA                 mov     edx, [eax+4]
.text:0040C8AD                 sub     ebp, edi
.text:0040C8AF                 inc     ebp
.text:0040C8B0                 cmp     ebp, edx
.text:0040C8B2                 jbe     loc_40C952
.text:0040C8B8                 cmp     edx, 10000h
.text:0040C8BE                 mov     ebp, 0Fh
.text:0040C8C3                 jz      loc_40A526
.text:0040C8C9                 lea     ebp, [edx+edx]
.text:0040C8CC                 mov     edx, [esp+97Ch+arg_C]
.text:0040C8D3                 cmp     ebp, 10000h
.text:0040C8D9                 mov     [edx+4], ebp
.text:0040C8DC                 jbe     short loc_40C8E5
.text:0040C8DE                 mov     dword ptr [edx+4], 10000h
.text:0040C8E5
.text:0040C8E5 loc_40C8E5:                             ; CODE XREF: sub_40A110+27CC↑j
.text:0040C8E5                 mov     ebx, [esp+97Ch+arg_C]
.text:0040C8EC                 mov     ebp, 0Ch
.text:0040C8F1                 mov     esi, [ebx+4]
.text:0040C8F4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C8F7                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040C8FB                 call    realloc
.text:0040C900                 mov     edx, [esp+97Ch+arg_C]
.text:0040C907                 test    eax, eax
.text:0040C909                 mov     [edx], eax
.text:0040C90B                 jz      loc_40A526
.text:0040C911                 cmp     edi, eax
.text:0040C913                 jz      short loc_40C89D
.text:0040C915                 sub     eax, edi
.text:0040C917                 mov     edi, [esp+97Ch+var_908]
.text:0040C91B                 add     [esp+97Ch+var_950], eax
.text:0040C91F                 add     [esp+97Ch+var_904], eax
.text:0040C923                 test    edi, edi
.text:0040C925                 jz      short loc_40C92B
.text:0040C927                 add     [esp+97Ch+var_908], eax
.text:0040C92B
.text:0040C92B loc_40C92B:                             ; CODE XREF: sub_40A110+2815↑j
.text:0040C92B                 mov     ecx, [esp+97Ch+var_900]
.text:0040C92F                 test    ecx, ecx
.text:0040C931                 jz      short loc_40C937
.text:0040C933                 add     [esp+97Ch+var_900], eax
.text:0040C937
.text:0040C937 loc_40C937:                             ; CODE XREF: sub_40A110+2821↑j
.text:0040C937                 mov     edx, [esp+97Ch+var_8FC]
.text:0040C93E                 test    edx, edx
.text:0040C940                 jz      loc_40C89D
.text:0040C946                 add     [esp+97Ch+var_8FC], eax
.text:0040C94D                 jmp     loc_40C89D
.text:0040C952 ; ---------------------------------------------------------------------------
.text:0040C952
.text:0040C952 loc_40C952:                             ; CODE XREF: sub_40A110+27A2↑j
.text:0040C952                 mov     edi, [esp+97Ch+var_950]
.text:0040C956                 mov     byte ptr [edi], 1Bh
.text:0040C959                 jmp     loc_40A53A
.text:0040C95E ; ---------------------------------------------------------------------------
.text:0040C95E
.text:0040C95E loc_40C95E:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C95E                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C95E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0040C3BD cases 43,63
.text:0040C966                 jz      def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040C96C                 jmp     loc_40B170      ; jumptable 0040A27F case 42
.text:0040C971 ; ---------------------------------------------------------------------------
.text:0040C971
.text:0040C971 loc_40C971:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040C971                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040C971                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 66
.text:0040C97C                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C982
.text:0040C982 loc_40C982:                             ; CODE XREF: sub_40A110+28E8↓j
.text:0040C982                                         ; sub_40A110+2915↓j ...
.text:0040C982                 mov     eax, [esp+97Ch+arg_C]
.text:0040C989                 mov     ebp, [esp+97Ch+var_950]
.text:0040C98D                 mov     edi, [eax]
.text:0040C98F                 mov     edx, [eax+4]
.text:0040C992                 sub     ebp, edi
.text:0040C994                 inc     ebp
.text:0040C995                 cmp     ebp, edx
.text:0040C997                 jbe     loc_40CA37
.text:0040C99D                 cmp     edx, 10000h
.text:0040C9A3                 mov     ebp, 0Fh
.text:0040C9A8                 jz      loc_40A526
.text:0040C9AE                 lea     ebx, [edx+edx]
.text:0040C9B1                 mov     edx, [esp+97Ch+arg_C]
.text:0040C9B8                 cmp     ebx, 10000h
.text:0040C9BE                 mov     [edx+4], ebx
.text:0040C9C1                 jbe     short loc_40C9CA
.text:0040C9C3                 mov     dword ptr [edx+4], 10000h
.text:0040C9CA
.text:0040C9CA loc_40C9CA:                             ; CODE XREF: sub_40A110+28B1↑j
.text:0040C9CA                 mov     esi, [esp+97Ch+arg_C]
.text:0040C9D1                 mov     ebp, [esi+4]
.text:0040C9D4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C9D7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040C9DB                 mov     ebp, 0Ch
.text:0040C9E0                 call    realloc
.text:0040C9E5                 mov     edx, [esp+97Ch+arg_C]
.text:0040C9EC                 test    eax, eax
.text:0040C9EE                 mov     [edx], eax
.text:0040C9F0                 jz      loc_40A526
.text:0040C9F6                 cmp     edi, eax
.text:0040C9F8                 jz      short loc_40C982
.text:0040C9FA                 sub     eax, edi
.text:0040C9FC                 mov     edi, [esp+97Ch+var_908]
.text:0040CA00                 add     [esp+97Ch+var_950], eax
.text:0040CA04                 add     [esp+97Ch+var_904], eax
.text:0040CA08                 test    edi, edi
.text:0040CA0A                 jz      short loc_40CA10
.text:0040CA0C                 add     [esp+97Ch+var_908], eax
.text:0040CA10
.text:0040CA10 loc_40CA10:                             ; CODE XREF: sub_40A110+28FA↑j
.text:0040CA10                 mov     ecx, [esp+97Ch+var_900]
.text:0040CA14                 test    ecx, ecx
.text:0040CA16                 jz      short loc_40CA1C
.text:0040CA18                 add     [esp+97Ch+var_900], eax
.text:0040CA1C
.text:0040CA1C loc_40CA1C:                             ; CODE XREF: sub_40A110+2906↑j
.text:0040CA1C                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040CA23                 test    ebx, ebx
.text:0040CA25                 jz      loc_40C982
.text:0040CA2B                 add     [esp+97Ch+var_8FC], eax
.text:0040CA32                 jmp     loc_40C982
.text:0040CA37 ; ---------------------------------------------------------------------------
.text:0040CA37
.text:0040CA37 loc_40CA37:                             ; CODE XREF: sub_40A110+2887↑j
.text:0040CA37                 mov     edi, [esp+97Ch+var_950]
.text:0040CA3B                 mov     byte ptr [edi], 1Dh
.text:0040CA3E                 jmp     loc_40A53A
.text:0040CA43 ; ---------------------------------------------------------------------------
.text:0040CA43
.text:0040CA43 loc_40CA43:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040CA43                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040CA43                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 87
.text:0040CA4E                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CA54                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CA5B                 mov     esi, [esp+97Ch+var_950]
.text:0040CA5F                 mov     edi, [ecx]
.text:0040CA61                 mov     [esp+97Ch+var_900], esi
.text:0040CA65                 mov     edx, [ecx+4]
.text:0040CA68                 sub     esi, edi
.text:0040CA6A                 inc     esi
.text:0040CA6B                 mov     ebx, edi
.text:0040CA6D                 cmp     esi, edx
.text:0040CA6F                 jbe     loc_40CB2A
.text:0040CA75
.text:0040CA75 loc_40CA75:                             ; CODE XREF: sub_40A110+2A14↓j
.text:0040CA75                 cmp     edx, 10000h
.text:0040CA7B                 mov     ebp, 0Fh
.text:0040CA80                 jz      loc_40A526
.text:0040CA86                 mov     esi, [esp+97Ch+arg_C]
.text:0040CA8D                 lea     ebp, [edx+edx]
.text:0040CA90                 cmp     ebp, 10000h
.text:0040CA96                 mov     [esi+4], ebp
.text:0040CA99                 jbe     short loc_40CAA2
.text:0040CA9B                 mov     dword ptr [esi+4], 10000h
.text:0040CAA2
.text:0040CAA2 loc_40CAA2:                             ; CODE XREF: sub_40A110+2989↑j
.text:0040CAA2                 mov     eax, [esp+97Ch+arg_C]
.text:0040CAA9                 mov     ebp, 0Ch
.text:0040CAAE                 mov     esi, [eax+4]
.text:0040CAB1                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CAB4                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040CAB8                 call    realloc
.text:0040CABD                 mov     edi, [esp+97Ch+arg_C]
.text:0040CAC4                 test    eax, eax
.text:0040CAC6                 mov     [edi], eax
.text:0040CAC8                 jz      loc_40A526
.text:0040CACE                 cmp     ebx, eax
.text:0040CAD0                 jz      short loc_40CB06
.text:0040CAD2                 sub     eax, ebx
.text:0040CAD4                 mov     ebx, [esp+97Ch+var_908]
.text:0040CAD8                 add     [esp+97Ch+var_950], eax
.text:0040CADC                 add     [esp+97Ch+var_904], eax
.text:0040CAE0                 test    ebx, ebx
.text:0040CAE2                 jz      short loc_40CAE8
.text:0040CAE4                 add     [esp+97Ch+var_908], eax
.text:0040CAE8
.text:0040CAE8 loc_40CAE8:                             ; CODE XREF: sub_40A110+29D2↑j
.text:0040CAE8                 mov     ecx, [esp+97Ch+var_900]
.text:0040CAEC                 test    ecx, ecx
.text:0040CAEE                 jz      short loc_40CAF4
.text:0040CAF0                 add     [esp+97Ch+var_900], eax
.text:0040CAF4
.text:0040CAF4 loc_40CAF4:                             ; CODE XREF: sub_40A110+29DE↑j
.text:0040CAF4                 mov     edx, [esp+97Ch+var_8FC]
.text:0040CAFB                 test    edx, edx
.text:0040CAFD                 jz      short loc_40CB06
.text:0040CAFF                 add     [esp+97Ch+var_8FC], eax
.text:0040CB06
.text:0040CB06 loc_40CB06:                             ; CODE XREF: sub_40A110+29C0↑j
.text:0040CB06                                         ; sub_40A110+29ED↑j
.text:0040CB06                 mov     esi, [esp+97Ch+arg_C]
.text:0040CB0D                 mov     eax, [esp+97Ch+arg_C]
.text:0040CB14                 mov     ebp, [esp+97Ch+var_950]
.text:0040CB18                 mov     edi, [esi]
.text:0040CB1A                 mov     edx, [eax+4]
.text:0040CB1D                 sub     ebp, edi
.text:0040CB1F                 inc     ebp
.text:0040CB20                 mov     ebx, edi
.text:0040CB22                 cmp     ebp, edx
.text:0040CB24                 ja      loc_40CA75
.text:0040CB2A
.text:0040CB2A loc_40CB2A:                             ; CODE XREF: sub_40A110+295F↑j
.text:0040CB2A                 mov     edi, [esp+97Ch+var_950]
.text:0040CB2E                 mov     byte ptr [edi], 19h
.text:0040CB31                 jmp     loc_40A53A
.text:0040CB36 ; ---------------------------------------------------------------------------
.text:0040CB36
.text:0040CB36 loc_40CB36:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040CB36                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040CB36                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 96
.text:0040CB41                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CB47
.text:0040CB47 loc_40CB47:                             ; CODE XREF: sub_40A110+2AAD↓j
.text:0040CB47                                         ; sub_40A110+2ADA↓j ...
.text:0040CB47                 mov     eax, [esp+97Ch+arg_C]
.text:0040CB4E                 mov     ebx, [esp+97Ch+var_950]
.text:0040CB52                 mov     edi, [eax]
.text:0040CB54                 mov     edx, [eax+4]
.text:0040CB57                 sub     ebx, edi
.text:0040CB59                 inc     ebx
.text:0040CB5A                 cmp     ebx, edx
.text:0040CB5C                 jbe     loc_40CBFC
.text:0040CB62                 cmp     edx, 10000h
.text:0040CB68                 mov     ebp, 0Fh
.text:0040CB6D                 jz      loc_40A526
.text:0040CB73                 lea     esi, [edx+edx]
.text:0040CB76                 mov     edx, [esp+97Ch+arg_C]
.text:0040CB7D                 cmp     esi, 10000h
.text:0040CB83                 mov     [edx+4], esi
.text:0040CB86                 jbe     short loc_40CB8F
.text:0040CB88                 mov     dword ptr [edx+4], 10000h
.text:0040CB8F
.text:0040CB8F loc_40CB8F:                             ; CODE XREF: sub_40A110+2A76↑j
.text:0040CB8F                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CB96                 mov     ebx, [ebp+4]
.text:0040CB99                 mov     ebp, 0Ch
.text:0040CB9E                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CBA1                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040CBA5                 call    realloc
.text:0040CBAA                 mov     edx, [esp+97Ch+arg_C]
.text:0040CBB1                 test    eax, eax
.text:0040CBB3                 mov     [edx], eax
.text:0040CBB5                 jz      loc_40A526
.text:0040CBBB                 cmp     edi, eax
.text:0040CBBD                 jz      short loc_40CB47
.text:0040CBBF                 mov     ecx, [esp+97Ch+var_908]
.text:0040CBC3                 sub     eax, edi
.text:0040CBC5                 add     [esp+97Ch+var_950], eax
.text:0040CBC9                 add     [esp+97Ch+var_904], eax
.text:0040CBCD                 test    ecx, ecx
.text:0040CBCF                 jz      short loc_40CBD5
.text:0040CBD1                 add     [esp+97Ch+var_908], eax
.text:0040CBD5
.text:0040CBD5 loc_40CBD5:                             ; CODE XREF: sub_40A110+2ABF↑j
.text:0040CBD5                 mov     edi, [esp+97Ch+var_900]
.text:0040CBD9                 test    edi, edi
.text:0040CBDB                 jz      short loc_40CBE1
.text:0040CBDD                 add     [esp+97Ch+var_900], eax
.text:0040CBE1
.text:0040CBE1 loc_40CBE1:                             ; CODE XREF: sub_40A110+2ACB↑j
.text:0040CBE1                 mov     esi, [esp+97Ch+var_8FC]
.text:0040CBE8                 test    esi, esi
.text:0040CBEA                 jz      loc_40CB47
.text:0040CBF0                 add     [esp+97Ch+var_8FC], eax
.text:0040CBF7                 jmp     loc_40CB47
.text:0040CBFC ; ---------------------------------------------------------------------------
.text:0040CBFC
.text:0040CBFC loc_40CBFC:                             ; CODE XREF: sub_40A110+2A4C↑j
.text:0040CBFC                 mov     edi, [esp+97Ch+var_950]
.text:0040CC00                 mov     byte ptr [edi], 0Bh
.text:0040CC03                 jmp     loc_40A53A
.text:0040CC08 ; ---------------------------------------------------------------------------
.text:0040CC08
.text:0040CC08 loc_40CC08:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040CC08                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040CC08                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 98
.text:0040CC13                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CC19
.text:0040CC19 loc_40CC19:                             ; CODE XREF: sub_40A110+2B7F↓j
.text:0040CC19                                         ; sub_40A110+2BAC↓j ...
.text:0040CC19                 mov     eax, [esp+97Ch+arg_C]
.text:0040CC20                 mov     ecx, [esp+97Ch+var_950]
.text:0040CC24                 mov     edi, [eax]
.text:0040CC26                 mov     edx, [eax+4]
.text:0040CC29                 sub     ecx, edi
.text:0040CC2B                 inc     ecx
.text:0040CC2C                 cmp     ecx, edx
.text:0040CC2E                 jbe     loc_40CCCE
.text:0040CC34                 cmp     edx, 10000h
.text:0040CC3A                 mov     ebp, 0Fh
.text:0040CC3F                 jz      loc_40A526
.text:0040CC45                 lea     esi, [edx+edx]
.text:0040CC48                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC4F                 cmp     esi, 10000h
.text:0040CC55                 mov     [edx+4], esi
.text:0040CC58                 jbe     short loc_40CC61
.text:0040CC5A                 mov     dword ptr [edx+4], 10000h
.text:0040CC61
.text:0040CC61 loc_40CC61:                             ; CODE XREF: sub_40A110+2B48↑j
.text:0040CC61                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC68                 mov     ebp, 0Ch
.text:0040CC6D                 mov     ebx, [edx+4]
.text:0040CC70                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CC73                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040CC77                 call    realloc
.text:0040CC7C                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CC83                 test    eax, eax
.text:0040CC85                 mov     [ecx], eax
.text:0040CC87                 jz      loc_40A526
.text:0040CC8D                 cmp     edi, eax
.text:0040CC8F                 jz      short loc_40CC19
.text:0040CC91                 mov     ebp, [esp+97Ch+var_908]
.text:0040CC95                 sub     eax, edi
.text:0040CC97                 add     [esp+97Ch+var_950], eax
.text:0040CC9B                 add     [esp+97Ch+var_904], eax
.text:0040CC9F                 test    ebp, ebp
.text:0040CCA1                 jz      short loc_40CCA7
.text:0040CCA3                 add     [esp+97Ch+var_908], eax
.text:0040CCA7
.text:0040CCA7 loc_40CCA7:                             ; CODE XREF: sub_40A110+2B91↑j
.text:0040CCA7                 mov     edi, [esp+97Ch+var_900]
.text:0040CCAB                 test    edi, edi
.text:0040CCAD                 jz      short loc_40CCB3
.text:0040CCAF                 add     [esp+97Ch+var_900], eax
.text:0040CCB3
.text:0040CCB3 loc_40CCB3:                             ; CODE XREF: sub_40A110+2B9D↑j
.text:0040CCB3                 mov     esi, [esp+97Ch+var_8FC]
.text:0040CCBA                 test    esi, esi
.text:0040CCBC                 jz      loc_40CC19
.text:0040CCC2                 add     [esp+97Ch+var_8FC], eax
.text:0040CCC9                 jmp     loc_40CC19
.text:0040CCCE ; ---------------------------------------------------------------------------
.text:0040CCCE
.text:0040CCCE loc_40CCCE:                             ; CODE XREF: sub_40A110+2B1E↑j
.text:0040CCCE                 mov     edi, [esp+97Ch+var_950]
.text:0040CCD2                 mov     byte ptr [edi], 1Ch
.text:0040CCD5                 jmp     loc_40A53A
.text:0040CCDA ; ---------------------------------------------------------------------------
.text:0040CCDA
.text:0040CCDA loc_40CCDA:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040CCDA                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040CCDA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040C3BD case 119
.text:0040CCE5                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CCEB                 mov     eax, [esp+97Ch+arg_C]
.text:0040CCF2                 mov     ecx, [esp+97Ch+var_950]
.text:0040CCF6                 mov     edi, [eax]
.text:0040CCF8                 mov     [esp+97Ch+var_900], ecx
.text:0040CCFC                 mov     esi, ecx
.text:0040CCFE                 mov     edx, [eax+4]
.text:0040CD01                 sub     esi, edi
.text:0040CD03                 mov     ebx, edi
.text:0040CD05                 inc     esi
.text:0040CD06                 cmp     esi, edx
.text:0040CD08                 jbe     loc_40CDC3
.text:0040CD0E
.text:0040CD0E loc_40CD0E:                             ; CODE XREF: sub_40A110+2CAD↓j
.text:0040CD0E                 cmp     edx, 10000h
.text:0040CD14                 mov     ebp, 0Fh
.text:0040CD19                 jz      loc_40A526
.text:0040CD1F                 mov     esi, [esp+97Ch+arg_C]
.text:0040CD26                 lea     ebp, [edx+edx]
.text:0040CD29                 cmp     ebp, 10000h
.text:0040CD2F                 mov     [esi+4], ebp
.text:0040CD32                 jbe     short loc_40CD3B
.text:0040CD34                 mov     dword ptr [esi+4], 10000h
.text:0040CD3B
.text:0040CD3B loc_40CD3B:                             ; CODE XREF: sub_40A110+2C22↑j
.text:0040CD3B                 mov     eax, [esp+97Ch+arg_C]
.text:0040CD42                 mov     ebp, 0Ch
.text:0040CD47                 mov     esi, [eax+4]
.text:0040CD4A                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CD4D                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040CD51                 call    realloc
.text:0040CD56                 mov     edx, [esp+97Ch+arg_C]
.text:0040CD5D                 test    eax, eax
.text:0040CD5F                 mov     [edx], eax
.text:0040CD61                 jz      loc_40A526
.text:0040CD67                 cmp     ebx, eax
.text:0040CD69                 jz      short loc_40CD9F
.text:0040CD6B                 sub     eax, ebx
.text:0040CD6D                 mov     ebx, [esp+97Ch+var_908]
.text:0040CD71                 add     [esp+97Ch+var_950], eax
.text:0040CD75                 add     [esp+97Ch+var_904], eax
.text:0040CD79                 test    ebx, ebx
.text:0040CD7B                 jz      short loc_40CD81
.text:0040CD7D                 add     [esp+97Ch+var_908], eax
.text:0040CD81
.text:0040CD81 loc_40CD81:                             ; CODE XREF: sub_40A110+2C6B↑j
.text:0040CD81                 mov     edi, [esp+97Ch+var_900]
.text:0040CD85                 test    edi, edi
.text:0040CD87                 jz      short loc_40CD8D
.text:0040CD89                 add     [esp+97Ch+var_900], eax
.text:0040CD8D
.text:0040CD8D loc_40CD8D:                             ; CODE XREF: sub_40A110+2C77↑j
.text:0040CD8D                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040CD94                 test    ecx, ecx
.text:0040CD96                 jz      short loc_40CD9F
.text:0040CD98                 add     [esp+97Ch+var_8FC], eax
.text:0040CD9F
.text:0040CD9F loc_40CD9F:                             ; CODE XREF: sub_40A110+2C59↑j
.text:0040CD9F                                         ; sub_40A110+2C86↑j
.text:0040CD9F                 mov     edx, [esp+97Ch+arg_C]
.text:0040CDA6                 mov     eax, [esp+97Ch+arg_C]
.text:0040CDAD                 mov     ebp, [esp+97Ch+var_950]
.text:0040CDB1                 mov     edi, [edx]
.text:0040CDB3                 mov     edx, [eax+4]
.text:0040CDB6                 sub     ebp, edi
.text:0040CDB8                 inc     ebp
.text:0040CDB9                 mov     ebx, edi
.text:0040CDBB                 cmp     ebp, edx
.text:0040CDBD                 ja      loc_40CD0E
.text:0040CDC3
.text:0040CDC3 loc_40CDC3:                             ; CODE XREF: sub_40A110+2BF8↑j
.text:0040CDC3                 mov     edi, [esp+97Ch+var_950]
.text:0040CDC7                 mov     byte ptr [edi], 18h
.text:0040CDCA                 jmp     loc_40A53A
.text:0040CDCF ; ---------------------------------------------------------------------------
.text:0040CDCF
.text:0040CDCF loc_40CDCF:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040CDCF                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040CDCF                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0040C3BD case 123
.text:0040CDD6                 and     ebx, 1200h
.text:0040CDDC                 cmp     ebx, 200h
.text:0040CDE2                 jnz     def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CDE8
.text:0040CDE8 loc_40CDE8:                             ; CODE XREF: sub_40A110+329D↓j
.text:0040CDE8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:0040CDF0                 mov     edi, [esp+97Ch+var_8D0]
.text:0040CDF7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040CDFE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:0040CE06                 mov     ecx, edi
.text:0040CE08                 jz      loc_40CEC9
.text:0040CE0E
.text:0040CE0E loc_40CE0E:                             ; CODE XREF: sub_40A110+2D74↓j
.text:0040CE0E                 movzx   eax, byte ptr [edi]
.text:0040CE11                 inc     edi
.text:0040CE12                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040CE19                 mov     [esp+97Ch+var_8D0], edi
.text:0040CE20                 test    ebp, ebp
.text:0040CE22                 mov     [esp+97Ch+var_8EC], al
.text:0040CE29                 jz      short loc_40CE40
.text:0040CE2B                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040CE32                 movzx   esi, al
.text:0040CE35                 movzx   ebx, byte ptr [esi+ebp]
.text:0040CE39                 mov     [esp+97Ch+var_8EC], bl
.text:0040CE40
.text:0040CE40 loc_40CE40:                             ; CODE XREF: sub_40A110+2D19↑j
.text:0040CE40                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040CE48                 sub     dl, 30h ; '0'
.text:0040CE4B                 cmp     dl, 9
.text:0040CE4E                 ja      short loc_40CE86
.text:0040CE50                 cmp     [esp+97Ch+var_934], 7FFFh
.text:0040CE58                 jg      short loc_40CE7D
.text:0040CE5A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040CE62                 mov     edx, [esp+97Ch+var_934]
.text:0040CE66                 shr     edx, 1Fh
.text:0040CE69                 dec     edx
.text:0040CE6A                 and     [esp+97Ch+var_934], edx
.text:0040CE6E                 mov     eax, [esp+97Ch+var_934]
.text:0040CE72                 lea     esi, [eax+eax*4]
.text:0040CE75                 lea     ebx, [ebp+esi*2-30h]
.text:0040CE79                 mov     [esp+97Ch+var_934], ebx
.text:0040CE7D
.text:0040CE7D loc_40CE7D:                             ; CODE XREF: sub_40A110+2D48↑j
.text:0040CE7D                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040CE84                 jnz     short loc_40CE0E
.text:0040CE86
.text:0040CE86 loc_40CE86:                             ; CODE XREF: sub_40A110+2D3E↑j
.text:0040CE86                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:0040CE8E                 jz      loc_40D2D4
.text:0040CE94                 mov     ebx, [esp+97Ch+var_934]
.text:0040CE98                 mov     [esp+97Ch+var_938], ebx
.text:0040CE9C
.text:0040CE9C loc_40CE9C:                             ; CODE XREF: sub_40A110+3256↓j
.text:0040CE9C                                         ; sub_40A110+3264↓j
.text:0040CE9C                 mov     esi, [esp+97Ch+var_934]
.text:0040CEA0                 test    esi, esi
.text:0040CEA2                 js      short loc_40CEC9
.text:0040CEA4                 mov     ebp, [esp+97Ch+var_938]
.text:0040CEA8                 cmp     [esp+97Ch+var_934], ebp
.text:0040CEAC                 jg      short loc_40CEC9
.text:0040CEAE                 test    [esp+97Ch+arg_8], 1000h
.text:0040CEB9                 jnz     loc_40CF6A
.text:0040CEBF                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040CEC7                 jz      short loc_40CF26
.text:0040CEC9
.text:0040CEC9 loc_40CEC9:                             ; CODE XREF: sub_40A110+2CF8↑j
.text:0040CEC9                                         ; sub_40A110+2D92↑j ...
.text:0040CEC9                 test    [esp+97Ch+arg_8], 200000h
.text:0040CED4                 jz      short loc_40CEFB
.text:0040CED6
.text:0040CED6 loc_40CED6:                             ; CODE XREF: sub_40A110+31B1↓j
.text:0040CED6                 test    [esp+97Ch+arg_8], 1000h
.text:0040CEE1                 mov     [esp+97Ch+var_8D0], ecx
.text:0040CEE8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:0040CEF0                 jz      def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040CEF6                 jmp     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CEFB ; ---------------------------------------------------------------------------
.text:0040CEFB
.text:0040CEFB loc_40CEFB:                             ; CODE XREF: sub_40A110+2DC4↑j
.text:0040CEFB                 mov     edi, [esp+97Ch+Block]
.text:0040CF02                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CF05                 call    free
.text:0040CF0A                 mov     ebp, [esp+97Ch+var_8F4]
.text:0040CF11                 cmp     [esp+97Ch+var_8D0], ebp
.text:0040CF18                 setnz   cl
.text:0040CF1B                 movzx   ebx, cl
.text:0040CF1E                 lea     ebp, [ebx+9]
.text:0040CF21                 jmp     loc_40A526
.text:0040CF26 ; ---------------------------------------------------------------------------
.text:0040CF26
.text:0040CF26 loc_40CF26:                             ; CODE XREF: sub_40A110+2DB7↑j
.text:0040CF26                 mov     eax, [esp+97Ch+var_8D0]
.text:0040CF2D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040CF34                 jz      short loc_40CEC9
.text:0040CF36                 movzx   edx, byte ptr [eax]
.text:0040CF39                 lea     ebx, [eax+1]
.text:0040CF3C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040CF43                 mov     [esp+97Ch+var_8D0], ebx
.text:0040CF4A                 test    eax, eax
.text:0040CF4C                 mov     [esp+97Ch+var_8EC], dl
.text:0040CF53                 jz      short loc_40CF6A
.text:0040CF55                 mov     esi, [esp+97Ch+var_8F8]
.text:0040CF5C                 movzx   edi, dl
.text:0040CF5F                 movzx   edx, byte ptr [edi+esi]
.text:0040CF63                 mov     [esp+97Ch+var_8EC], dl
.text:0040CF6A
.text:0040CF6A loc_40CF6A:                             ; CODE XREF: sub_40A110+2DA9↑j
.text:0040CF6A                                         ; sub_40A110+2E43↑j
.text:0040CF6A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:0040CF72                 jnz     loc_40CEC9
.text:0040CF78                 mov     ebp, [esp+97Ch+var_900]
.text:0040CF7C                 test    ebp, ebp
.text:0040CF7E                 jz      loc_40D2A3
.text:0040CF84
.text:0040CF84 loc_40CF84:                             ; CODE XREF: sub_40A110+31BF↓j
.text:0040CF84                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040CF8C                 jg      loc_40D292
.text:0040CF92                 mov     eax, [esp+97Ch+var_938]
.text:0040CF96                 test    eax, eax
.text:0040CF98                 jnz     loc_40D0AF
.text:0040CF9E                 mov     edx, [esp+97Ch+arg_C]
.text:0040CFA5                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CFAC                 mov     esi, [esp+97Ch+var_950]
.text:0040CFB0                 mov     edi, [edx]
.text:0040CFB2                 mov     edx, [ebp+4]
.text:0040CFB5                 sub     esi, edi
.text:0040CFB7                 add     esi, 3
.text:0040CFBA                 mov     ebx, edi
.text:0040CFBC                 cmp     esi, edx
.text:0040CFBE                 jbe     loc_40D07B
.text:0040CFC4
.text:0040CFC4 loc_40CFC4:                             ; CODE XREF: sub_40A110+2F65↓j
.text:0040CFC4                 cmp     edx, 10000h
.text:0040CFCA                 mov     ebp, 0Fh
.text:0040CFCF                 jz      loc_40A526
.text:0040CFD5                 mov     esi, [esp+97Ch+arg_C]
.text:0040CFDC                 lea     ecx, [edx+edx]
.text:0040CFDF                 cmp     ecx, 10000h
.text:0040CFE5                 mov     [esi+4], ecx
.text:0040CFE8                 jbe     short loc_40CFF1
.text:0040CFEA                 mov     dword ptr [esi+4], 10000h
.text:0040CFF1
.text:0040CFF1 loc_40CFF1:                             ; CODE XREF: sub_40A110+2ED8↑j
.text:0040CFF1                 mov     eax, [esp+97Ch+arg_C]
.text:0040CFF8                 mov     ebp, 0Ch
.text:0040CFFD                 mov     esi, [eax+4]
.text:0040D000                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D003                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D007                 call    realloc
.text:0040D00C                 mov     edi, [esp+97Ch+arg_C]
.text:0040D013                 test    eax, eax
.text:0040D015                 mov     [edi], eax
.text:0040D017                 jz      loc_40A526
.text:0040D01D                 cmp     ebx, eax
.text:0040D01F                 jz      short loc_40D055
.text:0040D021                 sub     eax, ebx
.text:0040D023                 mov     ebx, [esp+97Ch+var_908]
.text:0040D027                 add     [esp+97Ch+var_950], eax
.text:0040D02B                 add     [esp+97Ch+var_904], eax
.text:0040D02F                 test    ebx, ebx
.text:0040D031                 jz      short loc_40D037
.text:0040D033                 add     [esp+97Ch+var_908], eax
.text:0040D037
.text:0040D037 loc_40D037:                             ; CODE XREF: sub_40A110+2F21↑j
.text:0040D037                 mov     edx, [esp+97Ch+var_900]
.text:0040D03B                 test    edx, edx
.text:0040D03D                 jz      short loc_40D043
.text:0040D03F                 add     [esp+97Ch+var_900], eax
.text:0040D043
.text:0040D043 loc_40D043:                             ; CODE XREF: sub_40A110+2F2D↑j
.text:0040D043                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040D04A                 test    ebp, ebp
.text:0040D04C                 jz      short loc_40D055
.text:0040D04E                 add     [esp+97Ch+var_8FC], eax
.text:0040D055
.text:0040D055 loc_40D055:                             ; CODE XREF: sub_40A110+2F0F↑j
.text:0040D055                                         ; sub_40A110+2F3C↑j
.text:0040D055                 mov     esi, [esp+97Ch+arg_C]
.text:0040D05C                 mov     eax, [esp+97Ch+arg_C]
.text:0040D063                 mov     ecx, [esp+97Ch+var_950]
.text:0040D067                 mov     edi, [esi]
.text:0040D069                 mov     edx, [eax+4]
.text:0040D06C                 sub     ecx, edi
.text:0040D06E                 add     ecx, 3
.text:0040D071                 mov     ebx, edi
.text:0040D073                 cmp     ecx, edx
.text:0040D075                 ja      loc_40CFC4
.text:0040D07B
.text:0040D07B loc_40D07B:                             ; CODE XREF: sub_40A110+2EAE↑j
.text:0040D07B                 mov     [esp+97Ch+Size], 0Dh
.text:0040D082                 mov     ebx, [esp+97Ch+var_950]
.text:0040D086                 mov     ebp, [esp+97Ch+var_900]
.text:0040D08A                 mov     edi, [esp+97Ch+var_900]
.text:0040D08E                 mov     edx, ebx
.text:0040D090                 sub     edx, ebp
.text:0040D092                 mov     [esp+97Ch+var_970], ebx
.text:0040D096                 add     ebx, 3
.text:0040D099                 mov     [esp+97Ch+var_974], edx
.text:0040D09D                 mov     [esp+97Ch+var_978], edi
.text:0040D0A1                 call    sub_406F30
.text:0040D0A6                 mov     [esp+97Ch+var_950], ebx
.text:0040D0AA                 jmp     loc_40AE58
.text:0040D0AF ; ---------------------------------------------------------------------------
.text:0040D0AF
.text:0040D0AF loc_40D0AF:                             ; CODE XREF: sub_40A110+2E88↑j
.text:0040D0AF                 cmp     [esp+97Ch+var_938], 1
.text:0040D0B4                 mov     [esp+97Ch+var_93C], 14h
.text:0040D0BC                 jg      loc_40D17A
.text:0040D0C2                 mov     [esp+97Ch+var_93C], 0Ah
.text:0040D0CA                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D0D1                 mov     eax, [esp+97Ch+var_950]
.text:0040D0D5                 mov     edi, [ecx]
.text:0040D0D7                 mov     edx, [ecx+4]
.text:0040D0DA                 sub     eax, edi
.text:0040D0DC                 mov     ebx, edi
.text:0040D0DE                 add     eax, 0Ah
.text:0040D0E1
.text:0040D0E1 loc_40D0E1:                             ; CODE XREF: sub_40A110+308B↓j
.text:0040D0E1                 cmp     eax, edx
.text:0040D0E3                 jbe     loc_40D1A0
.text:0040D0E9                 cmp     edx, 10000h
.text:0040D0EF                 mov     ebp, 0Fh
.text:0040D0F4                 jz      loc_40A526
.text:0040D0FA                 mov     esi, [esp+97Ch+arg_C]
.text:0040D101                 lea     ebp, [edx+edx]
.text:0040D104                 cmp     ebp, 10000h
.text:0040D10A                 mov     [esi+4], ebp
.text:0040D10D                 jbe     short loc_40D116
.text:0040D10F                 mov     dword ptr [esi+4], 10000h
.text:0040D116
.text:0040D116 loc_40D116:                             ; CODE XREF: sub_40A110+2FFD↑j
.text:0040D116                 mov     eax, [esp+97Ch+arg_C]
.text:0040D11D                 mov     ebp, 0Ch
.text:0040D122                 mov     esi, [eax+4]
.text:0040D125                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D128                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D12C                 call    realloc
.text:0040D131                 mov     edi, [esp+97Ch+arg_C]
.text:0040D138                 test    eax, eax
.text:0040D13A                 mov     [edi], eax
.text:0040D13C                 jz      loc_40A526
.text:0040D142                 cmp     ebx, eax
.text:0040D144                 jz      short loc_40D17A
.text:0040D146                 mov     edx, [esp+97Ch+var_908]
.text:0040D14A                 sub     eax, ebx
.text:0040D14C                 add     [esp+97Ch+var_950], eax
.text:0040D150                 add     [esp+97Ch+var_904], eax
.text:0040D154                 test    edx, edx
.text:0040D156                 jz      short loc_40D15C
.text:0040D158                 add     [esp+97Ch+var_908], eax
.text:0040D15C
.text:0040D15C loc_40D15C:                             ; CODE XREF: sub_40A110+3046↑j
.text:0040D15C                 mov     ebx, [esp+97Ch+var_900]
.text:0040D160                 test    ebx, ebx
.text:0040D162                 jz      short loc_40D168
.text:0040D164                 add     [esp+97Ch+var_900], eax
.text:0040D168
.text:0040D168 loc_40D168:                             ; CODE XREF: sub_40A110+3052↑j
.text:0040D168                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040D16F                 test    ecx, ecx
.text:0040D171                 jz      short loc_40D17A
.text:0040D173                 add     [esp+97Ch+var_8FC], eax
.text:0040D17A
.text:0040D17A loc_40D17A:                             ; CODE XREF: sub_40A110+2FAC↑j
.text:0040D17A                                         ; sub_40A110+3034↑j ...
.text:0040D17A                 mov     eax, [esp+97Ch+arg_C]
.text:0040D181                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D188                 mov     esi, [esp+97Ch+var_93C]
.text:0040D18C                 mov     edi, [eax]
.text:0040D18E                 mov     eax, [esp+97Ch+var_950]
.text:0040D192                 mov     edx, [ebp+4]
.text:0040D195                 mov     ebx, edi
.text:0040D197                 sub     eax, edi
.text:0040D199                 add     eax, esi
.text:0040D19B                 jmp     loc_40D0E1
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A0
.text:0040D1A0 loc_40D1A0:                             ; CODE XREF: sub_40A110+2FD3↑j
.text:0040D1A0                 mov     edi, [esp+97Ch+var_950]
.text:0040D1A4                 mov     edx, [esp+97Ch+var_934]
.text:0040D1A8                 mov     [esp+97Ch+var_96C], edi
.text:0040D1AC                 add     edi, 5
.text:0040D1AF                 cmp     [esp+97Ch+var_938], 1
.text:0040D1B4                 mov     [esp+97Ch+var_970], edx
.text:0040D1B8                 jle     loc_40D282
.text:0040D1BE                 mov     ebx, [esp+97Ch+var_900]
.text:0040D1C2                 mov     eax, edi
.text:0040D1C4                 sub     eax, ebx
.text:0040D1C6                 add     eax, 2
.text:0040D1C9
.text:0040D1C9 loc_40D1C9:                             ; CODE XREF: sub_40A110+317D↓j
.text:0040D1C9                 mov     [esp+97Ch+var_974], eax
.text:0040D1CD                 mov     esi, [esp+97Ch+var_900]
.text:0040D1D1                 mov     [esp+97Ch+Size], 15h
.text:0040D1D8                 mov     [esp+97Ch+var_978], esi
.text:0040D1DC                 call    sub_406F70
.text:0040D1E1                 mov     [esp+97Ch+var_950], edi
.text:0040D1E5                 mov     ebp, [esp+97Ch+var_934]
.text:0040D1E9                 mov     [esp+97Ch+var_96C], edi
.text:0040D1ED                 mov     edi, [esp+97Ch+var_900]
.text:0040D1F1                 mov     [esp+97Ch+var_970], ebp
.text:0040D1F5                 mov     [esp+97Ch+var_974], 5
.text:0040D1FD                 mov     [esp+97Ch+var_978], edi
.text:0040D201                 mov     [esp+97Ch+Size], 17h
.text:0040D208                 call    sub_406F70
.text:0040D20D                 add     [esp+97Ch+var_950], 5
.text:0040D212                 cmp     [esp+97Ch+var_938], 1
.text:0040D217                 jle     loc_40AE58
.text:0040D21D                 mov     [esp+97Ch+Size], 16h
.text:0040D224                 mov     edx, [esp+97Ch+var_900]
.text:0040D228                 mov     esi, [esp+97Ch+var_950]
.text:0040D22C                 mov     edi, [esp+97Ch+var_938]
.text:0040D230                 mov     ebp, [esp+97Ch+var_950]
.text:0040D234                 sub     edx, esi
.text:0040D236                 add     edx, 2
.text:0040D239                 dec     edi
.text:0040D23A                 mov     [esp+97Ch+var_974], edx
.text:0040D23E                 mov     [esp+97Ch+var_978], ebp
.text:0040D242                 add     ebp, 5
.text:0040D245                 mov     ebx, ebp
.text:0040D247                 mov     [esp+97Ch+var_970], edi
.text:0040D24B                 call    sub_406F00
.text:0040D250                 mov     [esp+97Ch+var_96C], ebp
.text:0040D254                 mov     ecx, [esp+97Ch+var_900]
.text:0040D258                 add     ebp, 5
.text:0040D25B                 mov     [esp+97Ch+var_970], edi
.text:0040D25F                 mov     eax, [esp+97Ch+var_900]
.text:0040D263                 mov     [esp+97Ch+Size], 17h
.text:0040D26A                 sub     ebx, ecx
.text:0040D26C                 mov     [esp+97Ch+var_974], ebx
.text:0040D270                 mov     [esp+97Ch+var_978], eax
.text:0040D274                 call    sub_406F70
.text:0040D279                 mov     [esp+97Ch+var_950], ebp
.text:0040D27D                 jmp     loc_40AE58
.text:0040D282 ; ---------------------------------------------------------------------------
.text:0040D282
.text:0040D282 loc_40D282:                             ; CODE XREF: sub_40A110+30A8↑j
.text:0040D282                 mov     ecx, [esp+97Ch+var_900]
.text:0040D286                 mov     eax, edi
.text:0040D288                 sub     eax, ecx
.text:0040D28A                 sub     eax, 3
.text:0040D28D                 jmp     loc_40D1C9
.text:0040D292 ; ---------------------------------------------------------------------------
.text:0040D292
.text:0040D292 loc_40D292:                             ; CODE XREF: sub_40A110+2E7C↑j
.text:0040D292                 mov     esi, [esp+97Ch+Block]
.text:0040D299                 mov     ebp, 0Ah
.text:0040D29E                 jmp     loc_40C213
.text:0040D2A3 ; ---------------------------------------------------------------------------
.text:0040D2A3
.text:0040D2A3 loc_40D2A3:                             ; CODE XREF: sub_40A110+2E6E↑j
.text:0040D2A3                 mov     ebx, [esp+97Ch+arg_8]
.text:0040D2AA                 and     ebx, 200020h
.text:0040D2B0                 cmp     ebx, 20h ; ' '
.text:0040D2B3                 jz      loc_40B6EE
.text:0040D2B9                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040D2C1                 jz      loc_40CED6
.text:0040D2C7                 mov     ecx, [esp+97Ch+var_950]
.text:0040D2CB                 mov     [esp+97Ch+var_900], ecx
.text:0040D2CF                 jmp     loc_40CF84
.text:0040D2D4 ; ---------------------------------------------------------------------------
.text:0040D2D4
.text:0040D2D4 loc_40D2D4:                             ; CODE XREF: sub_40A110+2D7E↑j
.text:0040D2D4                 mov     edi, [esp+97Ch+var_8D0]
.text:0040D2DB                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D2E2                 jz      loc_40D36C
.text:0040D2E8
.text:0040D2E8 loc_40D2E8:                             ; CODE XREF: sub_40A110+324E↓j
.text:0040D2E8                 movzx   eax, byte ptr [edi]
.text:0040D2EB                 inc     edi
.text:0040D2EC                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040D2F3                 mov     [esp+97Ch+var_8D0], edi
.text:0040D2FA                 test    ebx, ebx
.text:0040D2FC                 mov     [esp+97Ch+var_8EC], al
.text:0040D303                 jz      short loc_40D31A
.text:0040D305                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040D30C                 movzx   esi, al
.text:0040D30F                 movzx   ebx, byte ptr [esi+ebp]
.text:0040D313                 mov     [esp+97Ch+var_8EC], bl
.text:0040D31A
.text:0040D31A loc_40D31A:                             ; CODE XREF: sub_40A110+31F3↑j
.text:0040D31A                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040D322                 sub     dl, 30h ; '0'
.text:0040D325                 cmp     dl, 9
.text:0040D328                 ja      short loc_40D360
.text:0040D32A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040D332                 jg      short loc_40D357
.text:0040D334                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040D33C                 mov     edx, [esp+97Ch+var_938]
.text:0040D340                 shr     edx, 1Fh
.text:0040D343                 dec     edx
.text:0040D344                 and     [esp+97Ch+var_938], edx
.text:0040D348                 mov     eax, [esp+97Ch+var_938]
.text:0040D34C                 lea     esi, [eax+eax*4]
.text:0040D34F                 lea     ebx, [ebp+esi*2-30h]
.text:0040D353                 mov     [esp+97Ch+var_938], ebx
.text:0040D357
.text:0040D357 loc_40D357:                             ; CODE XREF: sub_40A110+3222↑j
.text:0040D357                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D35E                 jnz     short loc_40D2E8
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: sub_40A110+3218↑j
.text:0040D360                 mov     edi, [esp+97Ch+var_938]
.text:0040D364                 test    edi, edi
.text:0040D366                 jns     loc_40CE9C
.text:0040D36C
.text:0040D36C loc_40D36C:                             ; CODE XREF: sub_40A110+31D2↑j
.text:0040D36C                 mov     [esp+97Ch+var_938], 7FFFh
.text:0040D374                 jmp     loc_40CE9C
.text:0040D379 ; ---------------------------------------------------------------------------
.text:0040D379
.text:0040D379 loc_40D379:                             ; CODE XREF: sub_40A110+22AD↑j
.text:0040D379                                         ; DATA XREF: sub_40A110:jpt_40C3BD↑o
.text:0040D379                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0040C3BD case 124
.text:0040D380                 and     edi, 0FFFF8400h
.text:0040D386                 test    di, di
.text:0040D389                 jz      loc_40A986
.text:0040D38F                 jmp     def_40C3BD      ; jumptable 0040C3BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040D394 ; ---------------------------------------------------------------------------
.text:0040D394
.text:0040D394 loc_40D394:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040D394                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040D394                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0040A27F case 123
.text:0040D39B                 and     edx, 1200h
.text:0040D3A1                 cmp     edx, 1200h
.text:0040D3A7                 jnz     def_40A27F      ; jumptable 0040A27F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D3AD                 jmp     loc_40CDE8
.text:0040D3B2 ; ---------------------------------------------------------------------------
.text:0040D3B2
.text:0040D3B2 loc_40D3B2:                             ; CODE XREF: sub_40A110+16F↑j
.text:0040D3B2                                         ; DATA XREF: sub_40A110:jpt_40A27F↑o
.text:0040D3B2                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0040A27F case 124
.text:0040D3B9                 and     esi, 0FFFF8000h
.text:0040D3BF                 test    si, si
.text:0040D3C2                 jmp     loc_40A980
.text:0040D3C7 ; ---------------------------------------------------------------------------
.text:0040D3C7
.text:0040D3C7 loc_40D3C7:                             ; CODE XREF: sub_40A110+F9↑j
.text:0040D3C7                 mov     edi, [esp+97Ch+Block]
.text:0040D3CE                 mov     ebp, 0Ch
.text:0040D3D3                 jmp     loc_40A6B0
.text:0040D3D8 ; ---------------------------------------------------------------------------
.text:0040D3D8
.text:0040D3D8 loc_40D3D8:                             ; CODE XREF: sub_40A110+D6↑j
.text:0040D3D8                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:0040D3DF                 call    malloc
.text:0040D3E4                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D3EB                 mov     [ecx], eax
.text:0040D3ED                 jmp     loc_40A1FE
.text:0040D3F2 ; ---------------------------------------------------------------------------
.text:0040D3F2
.text:0040D3F2 loc_40D3F2:                             ; CODE XREF: sub_40A110+CC↑j
.text:0040D3F2                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D3F9                 mov     edi, [ebp+0]
.text:0040D3FC                 jmp     loc_40A21D
.text:0040D401 ; ---------------------------------------------------------------------------
.text:0040D401
.text:0040D401 loc_40D401:                             ; CODE XREF: sub_40A110+BA↑j
.text:0040D401                 mov     [esp+97Ch+var_974], 100h ; Size
.text:0040D409                 xor     ebx, ebx
.text:0040D40B                 mov     [esp+97Ch+var_978], 0 ; Val
.text:0040D413                 mov     [esp+97Ch+Size], offset byte_41B6B0 ; void *
.text:0040D41A                 call    memset
.text:0040D41F                 nop
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: sub_40A110+333D↓j
.text:0040D420                 mov     esi, ds:__mb_cur_max
.text:0040D426                 cmp     dword ptr [esi], 1
.text:0040D429                 jz      short loc_40D466
.text:0040D42B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:0040D433                 mov     [esp+97Ch+Size], ebx ; C
.text:0040D436                 call    _isctype
.text:0040D43B
.text:0040D43B loc_40D43B:                             ; CODE XREF: sub_40A110+3368↓j
.text:0040D43B                 test    eax, eax
.text:0040D43D                 jz      short loc_40D446
.text:0040D43F                 mov     ds:byte_41B6B0[ebx], 1
.text:0040D446
.text:0040D446 loc_40D446:                             ; CODE XREF: sub_40A110+332D↑j
.text:0040D446                 inc     ebx
.text:0040D447                 cmp     ebx, 0FFh
.text:0040D44D                 jle     short loc_40D420
.text:0040D44F                 mov     ds:byte_41B70F, 1
.text:0040D456                 mov     ebx, 1
.text:0040D45B                 mov     ds:dword_41B6A0, ebx
.text:0040D461                 jmp     loc_40A1D0
.text:0040D466 ; ---------------------------------------------------------------------------
.text:0040D466
.text:0040D466 loc_40D466:                             ; CODE XREF: sub_40A110+3319↑j
.text:0040D466                 mov     ebp, ds:_pctype
.text:0040D46C                 mov     edi, [ebp+0]
.text:0040D46F                 movzx   eax, word ptr [edi+ebx*2]
.text:0040D473                 and     eax, 107h
.text:0040D478                 jmp     short loc_40D43B
.text:0040D478 sub_40A110      endp
.text:0040D478
.text:0040D478 ; ---------------------------------------------------------------------------
.text:0040D47A                 align 10h
.text:0040D480
.text:0040D480 ; =============== S U B R O U T I N E =======================================
.text:0040D480
.text:0040D480
.text:0040D480 sub_40D480      proc near               ; CODE XREF: .text:00409DC5↑p
.text:0040D480                                         ; sub_409EC0+46↑p ...
.text:0040D480
.text:0040D480 var_4C          = dword ptr -4Ch
.text:0040D480 var_48          = dword ptr -48h
.text:0040D480 var_44          = dword ptr -44h
.text:0040D480 var_40          = dword ptr -40h
.text:0040D480 var_3C          = dword ptr -3Ch
.text:0040D480 var_38          = dword ptr -38h
.text:0040D480 var_34          = dword ptr -34h
.text:0040D480 var_30          = dword ptr -30h
.text:0040D480 var_20          = dword ptr -20h
.text:0040D480 var_1C          = dword ptr -1Ch
.text:0040D480 var_18          = dword ptr -18h
.text:0040D480 var_14          = dword ptr -14h
.text:0040D480 arg_0           = dword ptr  4
.text:0040D480 arg_4           = dword ptr  8
.text:0040D480 arg_8           = dword ptr  0Ch
.text:0040D480 arg_C           = dword ptr  10h
.text:0040D480 arg_10          = dword ptr  14h
.text:0040D480 arg_14          = dword ptr  18h
.text:0040D480 arg_18          = dword ptr  1Ch
.text:0040D480 arg_1C          = dword ptr  20h
.text:0040D480 arg_20          = dword ptr  24h
.text:0040D480
.text:0040D480                 push    ebp
.text:0040D481                 push    edi
.text:0040D482                 push    esi
.text:0040D483                 push    ebx
.text:0040D484                 sub     esp, 3Ch
.text:0040D487                 mov     edi, [esp+4Ch+arg_0]
.text:0040D48B                 mov     ebx, [esp+4Ch+arg_14]
.text:0040D48F                 mov     ecx, [esp+4Ch+arg_10]
.text:0040D493                 mov     edx, [edi+14h]
.text:0040D496                 mov     esi, [esp+4Ch+arg_18]
.text:0040D49A                 mov     ebp, [edi+10h]
.text:0040D49D                 mov     [esp+4Ch+var_14], edx
.text:0040D4A1                 mov     edx, [esp+4Ch+arg_8]
.text:0040D4A5                 lea     eax, [esi+ebx]
.text:0040D4A8                 add     edx, ecx
.text:0040D4AA                 test    ebx, ebx
.text:0040D4AC                 mov     [esp+4Ch+var_18], edx
.text:0040D4B0                 js      loc_40D650
.text:0040D4B6                 cmp     ebx, edx
.text:0040D4B8                 jg      loc_40D650
.text:0040D4BE                 test    eax, eax
.text:0040D4C0                 js      loc_40D711
.text:0040D4C6                 cmp     eax, [esp+4Ch+var_18]
.text:0040D4CA                 jle     short loc_40D4D2
.text:0040D4CC                 mov     esi, [esp+4Ch+var_18]
.text:0040D4D0                 sub     esi, ebx
.text:0040D4D2
.text:0040D4D2 loc_40D4D2:                             ; CODE XREF: sub_40D480+4A↑j
.text:0040D4D2                                         ; sub_40D480+295↓j
.text:0040D4D2                 mov     eax, [edi+8]
.text:0040D4D5                 test    eax, eax
.text:0040D4D7                 jz      short loc_40D500
.text:0040D4D9                 test    esi, esi
.text:0040D4DB                 jle     short loc_40D500
.text:0040D4DD                 mov     ecx, [edi]
.text:0040D4DF                 movzx   eax, byte ptr [ecx]
.text:0040D4E2                 cmp     al, 0Bh
.text:0040D4E4                 jz      loc_40D6FA
.text:0040D4EA                 cmp     al, 9
.text:0040D4EC                 jz      loc_40D6F0
.text:0040D4F2                 lea     esi, [esi+0]
.text:0040D4F9                 lea     edi, [edi+0]
.text:0040D500
.text:0040D500 loc_40D500:                             ; CODE XREF: sub_40D480+57↑j
.text:0040D500                                         ; sub_40D480+5B↑j ...
.text:0040D500                 test    ebp, ebp
.text:0040D502                 jz      loc_40D5C0
.text:0040D508                 test    byte ptr [edi+1Ch], 8
.text:0040D50C                 jz      loc_40D6D5
.text:0040D512
.text:0040D512 loc_40D512:                             ; CODE XREF: sub_40D480+1AF↓j
.text:0040D512                                         ; sub_40D480+1B6↓j ...
.text:0040D512                 test    ebp, ebp
.text:0040D514                 jz      loc_40D5C0
.text:0040D51A                 cmp     ebx, [esp+4Ch+var_18]
.text:0040D51E                 jge     loc_40D5C0
.text:0040D524                 test    byte ptr [edi+1Ch], 1
.text:0040D528                 jnz     loc_40D5C0
.text:0040D52E                 test    esi, esi
.text:0040D530                 jle     loc_40D684
.text:0040D536                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040D53A                 mov     [esp+4Ch+var_20], 0
.text:0040D542                 mov     [esp+4Ch+var_1C], esi
.text:0040D546                 jge     loc_40D672
.text:0040D54C                 lea     edx, [esi+ebx]
.text:0040D54F                 cmp     edx, [esp+4Ch+arg_8]
.text:0040D553                 jl      short loc_40D563
.text:0040D555                 mov     ecx, [esp+4Ch+arg_8]
.text:0040D559                 mov     edx, esi
.text:0040D55B                 sub     ecx, ebx
.text:0040D55D                 sub     edx, ecx
.text:0040D55F                 mov     [esp+4Ch+var_20], edx
.text:0040D563
.text:0040D563 loc_40D563:                             ; CODE XREF: sub_40D480+D3↑j
.text:0040D563                 mov     edx, [esp+4Ch+arg_4]
.text:0040D567                 add     edx, ebx
.text:0040D569
.text:0040D569 loc_40D569:                             ; CODE XREF: sub_40D480+1FF↓j
.text:0040D569                 mov     ecx, [esp+4Ch+var_14]
.text:0040D56D                 test    ecx, ecx
.text:0040D56F                 jz      loc_40D657
.text:0040D575                 cmp     esi, [esp+4Ch+var_20]
.text:0040D579                 jle     short loc_40D5A9
.text:0040D57B                 movzx   eax, byte ptr [edx]
.text:0040D57E                 inc     edx
.text:0040D57F                 mov     ecx, [esp+4Ch+var_14]
.text:0040D583                 movzx   ecx, byte ptr [eax+ecx]
.text:0040D587                 cmp     byte ptr [ecx+ebp], 0
.text:0040D58B                 jnz     short loc_40D5A9
.text:0040D58D                 lea     esi, [esi+0]
.text:0040D590
.text:0040D590 loc_40D590:                             ; CODE XREF: sub_40D480+127↓j
.text:0040D590                 dec     esi
.text:0040D591                 cmp     esi, [esp+4Ch+var_20]
.text:0040D595                 jle     short loc_40D5A9
.text:0040D597                 movzx   eax, byte ptr [edx]
.text:0040D59A                 inc     edx
.text:0040D59B                 mov     ecx, [esp+4Ch+var_14]
.text:0040D59F                 movzx   eax, byte ptr [eax+ecx]
.text:0040D5A3                 cmp     byte ptr [eax+ebp], 0
.text:0040D5A7                 jz      short loc_40D590
.text:0040D5A9
.text:0040D5A9 loc_40D5A9:                             ; CODE XREF: sub_40D480+F9↑j
.text:0040D5A9                                         ; sub_40D480+10B↑j ...
.text:0040D5A9                 sub     [esp+4Ch+var_1C], esi
.text:0040D5AD                 mov     edx, [esp+4Ch+var_1C]
.text:0040D5B1                 add     ebx, edx
.text:0040D5B3                 lea     esi, [esi+0]
.text:0040D5B9                 lea     edi, [edi+0]
.text:0040D5C0
.text:0040D5C0 loc_40D5C0:                             ; CODE XREF: sub_40D480+82↑j
.text:0040D5C0                                         ; sub_40D480+94↑j ...
.text:0040D5C0                 test    esi, esi
.text:0040D5C2                 js      short loc_40D5CA
.text:0040D5C4                 cmp     ebx, [esp+4Ch+var_18]
.text:0040D5C8                 jz      short loc_40D640
.text:0040D5CA
.text:0040D5CA loc_40D5CA:                             ; CODE XREF: sub_40D480+142↑j
.text:0040D5CA                                         ; sub_40D480+1C2↓j ...
.text:0040D5CA                 mov     [esp+4Ch+var_38], ebx
.text:0040D5CE                 mov     edx, [esp+4Ch+arg_20]
.text:0040D5D2                 mov     ecx, [esp+4Ch+arg_1C]
.text:0040D5D6                 mov     [esp+4Ch+var_4C], edi
.text:0040D5D9                 mov     eax, [esp+4Ch+arg_10]
.text:0040D5DD                 mov     [esp+4Ch+var_30], edx
.text:0040D5E1                 mov     edx, [esp+4Ch+arg_C]
.text:0040D5E5                 mov     [esp+4Ch+var_34], ecx
.text:0040D5E9                 mov     ecx, [esp+4Ch+arg_8]
.text:0040D5ED                 mov     [esp+4Ch+var_3C], eax
.text:0040D5F1                 mov     eax, [esp+4Ch+arg_4]
.text:0040D5F5                 mov     [esp+4Ch+var_40], edx
.text:0040D5F9                 mov     [esp+4Ch+var_44], ecx
.text:0040D5FD                 mov     [esp+4Ch+var_48], eax
.text:0040D601                 call    sub_407200
.text:0040D606                 test    eax, eax
.text:0040D608                 mov     edx, ebx
.text:0040D60A                 js      short loc_40D616
.text:0040D60C
.text:0040D60C loc_40D60C:                             ; CODE XREF: sub_40D480+19E↓j
.text:0040D60C                                         ; sub_40D480+1A7↓j ...
.text:0040D60C                 add     esp, 3Ch
.text:0040D60F                 mov     eax, edx
.text:0040D611                 pop     ebx
.text:0040D612                 pop     esi
.text:0040D613                 pop     edi
.text:0040D614                 pop     ebp
.text:0040D615                 retn
.text:0040D616 ; ---------------------------------------------------------------------------
.text:0040D616
.text:0040D616 loc_40D616:                             ; CODE XREF: sub_40D480+18A↑j
.text:0040D616                 cmp     eax, 0FFFFFFFEh
.text:0040D619                 mov     edx, 0FFFFFFFEh
.text:0040D61E                 jz      short loc_40D60C
.text:0040D620
.text:0040D620 loc_40D620:                             ; CODE XREF: sub_40D480+241↓j
.text:0040D620                 test    esi, esi
.text:0040D622                 mov     edx, 0FFFFFFFFh
.text:0040D627                 jz      short loc_40D60C
.text:0040D629                 test    esi, esi
.text:0040D62B                 jle     short loc_40D634
.text:0040D62D                 dec     esi
.text:0040D62E                 inc     ebx
.text:0040D62F                 jmp     loc_40D512
.text:0040D634 ; ---------------------------------------------------------------------------
.text:0040D634
.text:0040D634 loc_40D634:                             ; CODE XREF: sub_40D480+1AB↑j
.text:0040D634                 inc     esi
.text:0040D635                 dec     ebx
.text:0040D636                 jmp     loc_40D512
.text:0040D636 ; ---------------------------------------------------------------------------
.text:0040D63B                 align 10h
.text:0040D640
.text:0040D640 loc_40D640:                             ; CODE XREF: sub_40D480+148↑j
.text:0040D640                 test    ebp, ebp
.text:0040D642                 jz      short loc_40D5CA
.text:0040D644                 test    byte ptr [edi+1Ch], 1
.text:0040D648                 jnz     short loc_40D5CA
.text:0040D64A                 lea     esi, [esi+0]
.text:0040D650
.text:0040D650 loc_40D650:                             ; CODE XREF: sub_40D480+30↑j
.text:0040D650                                         ; sub_40D480+38↑j
.text:0040D650                 mov     edx, 0FFFFFFFFh
.text:0040D655                 jmp     short loc_40D60C
.text:0040D657 ; ---------------------------------------------------------------------------
.text:0040D657
.text:0040D657 loc_40D657:                             ; CODE XREF: sub_40D480+EF↑j
.text:0040D657                                         ; sub_40D480+1F0↓j
.text:0040D657                 cmp     esi, [esp+4Ch+var_20]
.text:0040D65B                 jle     loc_40D5A9
.text:0040D661                 movzx   ecx, byte ptr [edx]
.text:0040D664                 inc     edx
.text:0040D665                 cmp     byte ptr [ecx+ebp], 0
.text:0040D669                 jnz     loc_40D5A9
.text:0040D66F                 dec     esi
.text:0040D670                 jmp     short loc_40D657
.text:0040D672 ; ---------------------------------------------------------------------------
.text:0040D672
.text:0040D672 loc_40D672:                             ; CODE XREF: sub_40D480+C6↑j
.text:0040D672                 mov     ecx, [esp+4Ch+arg_C]
.text:0040D676                 mov     eax, [esp+4Ch+arg_8]
.text:0040D67A                 sub     ecx, eax
.text:0040D67C                 lea     edx, [ebx+ecx]
.text:0040D67F                 jmp     loc_40D569
.text:0040D684 ; ---------------------------------------------------------------------------
.text:0040D684
.text:0040D684 loc_40D684:                             ; CODE XREF: sub_40D480+B0↑j
.text:0040D684                 mov     ecx, [esp+4Ch+arg_8]
.text:0040D688                 test    ecx, ecx
.text:0040D68A                 jz      short loc_40D692
.text:0040D68C                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040D690                 jl      short loc_40D6CB
.text:0040D692
.text:0040D692 loc_40D692:                             ; CODE XREF: sub_40D480+20A↑j
.text:0040D692                 mov     edx, [esp+4Ch+arg_8]
.text:0040D696                 mov     eax, ebx
.text:0040D698                 mov     ecx, [esp+4Ch+arg_C]
.text:0040D69C                 sub     eax, edx
.text:0040D69E                 movzx   eax, byte ptr [eax+ecx]
.text:0040D6A2
.text:0040D6A2 loc_40D6A2:                             ; CODE XREF: sub_40D480+253↓j
.text:0040D6A2                 mov     ecx, [esp+4Ch+var_14]
.text:0040D6A6                 test    ecx, ecx
.text:0040D6A8                 jz      short loc_40D6C6
.text:0040D6AA                 mov     edx, [esp+4Ch+var_14]
.text:0040D6AE                 movzx   ecx, al
.text:0040D6B1                 movzx   eax, byte ptr [ecx+edx]
.text:0040D6B5
.text:0040D6B5 loc_40D6B5:                             ; CODE XREF: sub_40D480+249↓j
.text:0040D6B5                 lea     edx, [eax+ebp]
.text:0040D6B8                 cmp     byte ptr [edx], 0
.text:0040D6BB                 jnz     loc_40D5C0
.text:0040D6C1                 jmp     loc_40D620
.text:0040D6C6 ; ---------------------------------------------------------------------------
.text:0040D6C6
.text:0040D6C6 loc_40D6C6:                             ; CODE XREF: sub_40D480+228↑j
.text:0040D6C6                 movzx   eax, al
.text:0040D6C9                 jmp     short loc_40D6B5
.text:0040D6CB ; ---------------------------------------------------------------------------
.text:0040D6CB
.text:0040D6CB loc_40D6CB:                             ; CODE XREF: sub_40D480+210↑j
.text:0040D6CB                 mov     edx, [esp+4Ch+arg_4]
.text:0040D6CF                 movzx   eax, byte ptr [ebx+edx]
.text:0040D6D3                 jmp     short loc_40D6A2
.text:0040D6D5 ; ---------------------------------------------------------------------------
.text:0040D6D5
.text:0040D6D5 loc_40D6D5:                             ; CODE XREF: sub_40D480+8C↑j
.text:0040D6D5                 mov     [esp+4Ch+var_4C], edi
.text:0040D6D8                 call    sub_409B30
.text:0040D6DD                 cmp     eax, 0FFFFFFFEh
.text:0040D6E0                 mov     edx, 0FFFFFFFEh
.text:0040D6E5                 jnz     loc_40D512
.text:0040D6EB                 jmp     loc_40D60C
.text:0040D6F0 ; ---------------------------------------------------------------------------
.text:0040D6F0
.text:0040D6F0 loc_40D6F0:                             ; CODE XREF: sub_40D480+6C↑j
.text:0040D6F0                 test    byte ptr [edi+1Ch], 80h
.text:0040D6F4                 jnz     loc_40D500
.text:0040D6FA
.text:0040D6FA loc_40D6FA:                             ; CODE XREF: sub_40D480+64↑j
.text:0040D6FA                 test    ebx, ebx
.text:0040D6FC                 mov     edx, 0FFFFFFFFh
.text:0040D701                 jg      loc_40D60C
.text:0040D707                 mov     esi, 1
.text:0040D70C                 jmp     loc_40D500
.text:0040D711 ; ---------------------------------------------------------------------------
.text:0040D711
.text:0040D711 loc_40D711:                             ; CODE XREF: sub_40D480+40↑j
.text:0040D711                 mov     esi, ebx
.text:0040D713                 neg     esi
.text:0040D715                 jmp     loc_40D4D2
.text:0040D715 sub_40D480      endp
.text:0040D715
.text:0040D715 ; ---------------------------------------------------------------------------
.text:0040D71A                 align 10h
.text:0040D720
.text:0040D720 ; =============== S U B R O U T I N E =======================================
.text:0040D720
.text:0040D720
.text:0040D720 sub_40D720      proc near               ; CODE XREF: sub_409B30↑j
.text:0040D720
.text:0040D720 Size            = dword ptr -6Ch
.text:0040D720 Val             = dword ptr -68h
.text:0040D720 var_64          = dword ptr -64h
.text:0040D720 var_4D          = byte ptr -4Dh
.text:0040D720 var_4C          = byte ptr -4Ch
.text:0040D720 var_30          = dword ptr -30h
.text:0040D720 Src             = dword ptr -2Ch
.text:0040D720 var_28          = dword ptr -28h
.text:0040D720 var_24          = dword ptr -24h
.text:0040D720 arg_0           = dword ptr  4
.text:0040D720
.text:0040D720                 push    ebp
.text:0040D721                 push    edi
.text:0040D722                 push    esi
.text:0040D723                 push    ebx
.text:0040D724                 sub     esp, 5Ch
.text:0040D727                 mov     ebp, [esp+6Ch+arg_0]
.text:0040D72B                 mov     [esp+6Ch+var_4C], 1
.text:0040D730                 mov     [esp+6Ch+var_4D], 0
.text:0040D735                 mov     ecx, [ebp+0]
.text:0040D738                 mov     eax, [ebp+8]
.text:0040D73B                 mov     esi, [ebp+10h]
.text:0040D73E                 mov     edi, ecx
.text:0040D740                 add     eax, ecx
.text:0040D742                 mov     [esp+6Ch+var_30], eax
.text:0040D746                 mov     [esp+6Ch+Size], 14h ; Size
.text:0040D74D                 call    malloc
.text:0040D752                 mov     [esp+6Ch+Src], eax
.text:0040D756                 test    eax, eax
.text:0040D758                 mov     edx, 0FFFFFFFEh
.text:0040D75D                 jz      loc_40D842
.text:0040D763                 mov     [esp+6Ch+var_28], 5
.text:0040D76B                 mov     [esp+6Ch+var_24], 0
.text:0040D773                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0040D77B                 mov     [esp+6Ch+Val], 0 ; Val
.text:0040D783                 mov     [esp+6Ch+Size], esi ; void *
.text:0040D786                 call    memset
.text:0040D78B                 movzx   edx, byte ptr [ebp+1Ch]
.text:0040D78F                 or      dl, 8
.text:0040D792                 and     dl, 0FEh
.text:0040D795                 mov     [ebp+1Ch], dl
.text:0040D798
.text:0040D798 loc_40D798:                             ; CODE XREF: sub_40D720+9A↓j
.text:0040D798                                         ; sub_40D720+13D↓j ...
.text:0040D798                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040D79C                 jz      loc_40DAA0
.text:0040D7A2                 movzx   eax, byte ptr [edi]
.text:0040D7A5                 cmp     al, 1
.text:0040D7A7                 jz      loc_40DAA0
.text:0040D7AD                 movzx   eax, al
.text:0040D7B0                 inc     edi
.text:0040D7B1                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040D7B4                 ja      def_40D7BA      ; jumptable 0040D7BA default case, case 1
.text:0040D7BA                 jmp     ds:jpt_40D7BA[eax*4] ; switch jump
.text:0040D7BA ; ---------------------------------------------------------------------------
.text:0040D7C1                 align 4
.text:0040D7C4 jpt_40D7BA      dd offset loc_40D798    ; DATA XREF: sub_40D720+9A↑r
.text:0040D7C4                 dd offset def_40D7BA    ; jump table for switch statement
.text:0040D7C4                 dd offset loc_40D84C
.text:0040D7C4                 dd offset loc_40D862
.text:0040D7C4                 dd offset loc_40D890
.text:0040D7C4                 dd offset loc_40D8C8
.text:0040D7C4                 dd offset loc_40D92C
.text:0040D7C4                 dd offset loc_40D92C
.text:0040D7C4                 dd offset loc_40D83C
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40D934
.text:0040D7C4                 dd offset loc_40D934
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D9CE
.text:0040D7C4                 dd offset loc_40D9F5
.text:0040D7C4                 dd offset loc_40DA53
.text:0040D7C4                 dd offset loc_40DA5B
.text:0040D7C4                 dd offset loc_40DA7D
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D7C4                 dd offset loc_40D798
.text:0040D83C ; ---------------------------------------------------------------------------
.text:0040D83C
.text:0040D83C loc_40D83C:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D83C                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D83C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0040D7BA case 8
.text:0040D840
.text:0040D840 loc_40D840:                             ; CODE XREF: sub_40D720+16E↓j
.text:0040D840                                         ; sub_40D720+3C8↓j
.text:0040D840                 xor     edx, edx
.text:0040D842
.text:0040D842 loc_40D842:                             ; CODE XREF: sub_40D720+3D↑j
.text:0040D842                                         ; sub_40D720+2A3↓j
.text:0040D842                 add     esp, 5Ch
.text:0040D845                 mov     eax, edx
.text:0040D847                 pop     ebx
.text:0040D848                 pop     esi
.text:0040D849                 pop     edi
.text:0040D84A                 pop     ebp
.text:0040D84B                 retn
.text:0040D84C ; ---------------------------------------------------------------------------
.text:0040D84C
.text:0040D84C loc_40D84C:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D84C                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D84C                 movzx   ecx, byte ptr [edi+1] ; jumptable 0040D7BA case 2
.text:0040D850                 mov     byte ptr [ecx+esi], 1
.text:0040D854
.text:0040D854 loc_40D854:                             ; CODE XREF: sub_40D720+166↓j
.text:0040D854                                         ; sub_40D720+16C↓j ...
.text:0040D854                 mov     [esp+6Ch+var_4C], 0
.text:0040D859                 mov     edi, [esp+6Ch+var_30]
.text:0040D85D                 jmp     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040D862 ; ---------------------------------------------------------------------------
.text:0040D862
.text:0040D862 loc_40D862:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D862                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D862                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0040D7BA case 3
.text:0040D866                 xor     ebx, ebx
.text:0040D868                 nop
.text:0040D869                 lea     esi, [esi+0]
.text:0040D870
.text:0040D870 loc_40D870:                             ; CODE XREF: sub_40D720+15B↓j
.text:0040D870                 mov     byte ptr [ebx+esi], 1
.text:0040D874                 inc     ebx
.text:0040D875                 cmp     ebx, 0FFh
.text:0040D87B                 jle     short loc_40D870
.text:0040D87D                 test    byte ptr [ebp+0Ch], 40h
.text:0040D881                 jnz     short loc_40D888
.text:0040D883                 mov     [esi+0Ah], al
.text:0040D886                 jmp     short loc_40D854
.text:0040D888 ; ---------------------------------------------------------------------------
.text:0040D888
.text:0040D888 loc_40D888:                             ; CODE XREF: sub_40D720+161↑j
.text:0040D888                 test    byte ptr [ebp+1Ch], 1
.text:0040D88C                 jz      short loc_40D854
.text:0040D88E                 jmp     short loc_40D840
.text:0040D890 ; ---------------------------------------------------------------------------
.text:0040D890
.text:0040D890 loc_40D890:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D890                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D890                 movzx   edx, byte ptr [edi] ; jumptable 0040D7BA case 4
.text:0040D893                 inc     edi
.text:0040D894                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0040D89B                 test    ebx, ebx
.text:0040D89D                 js      short loc_40D854
.text:0040D89F
.text:0040D89F loc_40D89F:                             ; CODE XREF: sub_40D720+19F↓j
.text:0040D89F                 test    ebx, ebx
.text:0040D8A1                 mov     eax, ebx
.text:0040D8A3                 js      short loc_40D8C3
.text:0040D8A5
.text:0040D8A5 loc_40D8A5:                             ; CODE XREF: sub_40D720+1A6↓j
.text:0040D8A5                 sar     eax, 3
.text:0040D8A8                 mov     ecx, ebx
.text:0040D8AA                 movzx   edx, byte ptr [eax+edi]
.text:0040D8AE                 shl     eax, 3
.text:0040D8B1                 sub     ecx, eax
.text:0040D8B3                 sar     edx, cl
.text:0040D8B5                 test    dl, 1
.text:0040D8B8                 jz      short loc_40D8BE
.text:0040D8BA                 mov     byte ptr [ebx+esi], 1
.text:0040D8BE
.text:0040D8BE loc_40D8BE:                             ; CODE XREF: sub_40D720+198↑j
.text:0040D8BE                 dec     ebx
.text:0040D8BF                 jns     short loc_40D89F
.text:0040D8C1                 jmp     short loc_40D854
.text:0040D8C3 ; ---------------------------------------------------------------------------
.text:0040D8C3
.text:0040D8C3 loc_40D8C3:                             ; CODE XREF: sub_40D720+183↑j
.text:0040D8C3                 lea     eax, [ebx+7]
.text:0040D8C6                 jmp     short loc_40D8A5
.text:0040D8C8 ; ---------------------------------------------------------------------------
.text:0040D8C8
.text:0040D8C8 loc_40D8C8:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D8C8                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D8C8                 movzx   edx, byte ptr [edi] ; jumptable 0040D7BA case 5
.text:0040D8CB                 movzx   ecx, dl
.text:0040D8CE                 lea     ebx, ds:0[ecx*8]
.text:0040D8D5                 cmp     ebx, 0FFh
.text:0040D8DB                 jg      short loc_40D8ED
.text:0040D8DD
.text:0040D8DD loc_40D8DD:                             ; CODE XREF: sub_40D720+1C8↓j
.text:0040D8DD                 mov     byte ptr [ebx+esi], 1
.text:0040D8E1                 inc     ebx
.text:0040D8E2                 cmp     ebx, 0FFh
.text:0040D8E8                 jle     short loc_40D8DD
.text:0040D8EA                 movzx   edx, byte ptr [edi]
.text:0040D8ED
.text:0040D8ED loc_40D8ED:                             ; CODE XREF: sub_40D720+1BB↑j
.text:0040D8ED                 movzx   ecx, dl
.text:0040D8F0                 inc     edi
.text:0040D8F1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:0040D8F8                 test    ebx, ebx
.text:0040D8FA                 js      loc_40D854
.text:0040D900
.text:0040D900 loc_40D900:                             ; CODE XREF: sub_40D720+200↓j
.text:0040D900                 test    ebx, ebx
.text:0040D902                 mov     eax, ebx
.text:0040D904                 js      short loc_40D927
.text:0040D906
.text:0040D906 loc_40D906:                             ; CODE XREF: sub_40D720+20A↓j
.text:0040D906                 sar     eax, 3
.text:0040D909                 mov     ecx, ebx
.text:0040D90B                 movzx   edx, byte ptr [eax+edi]
.text:0040D90F                 shl     eax, 3
.text:0040D912                 sub     ecx, eax
.text:0040D914                 sar     edx, cl
.text:0040D916                 test    dl, 1
.text:0040D919                 jnz     short loc_40D91F
.text:0040D91B                 mov     byte ptr [ebx+esi], 1
.text:0040D91F
.text:0040D91F loc_40D91F:                             ; CODE XREF: sub_40D720+1F9↑j
.text:0040D91F                 dec     ebx
.text:0040D920                 jns     short loc_40D900
.text:0040D922                 jmp     loc_40D854
.text:0040D927 ; ---------------------------------------------------------------------------
.text:0040D927
.text:0040D927 loc_40D927:                             ; CODE XREF: sub_40D720+1E4↑j
.text:0040D927                 lea     eax, [ebx+7]
.text:0040D92A                 jmp     short loc_40D906
.text:0040D92C ; ---------------------------------------------------------------------------
.text:0040D92C
.text:0040D92C loc_40D92C:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D92C                                         ; sub_40D720+251↓j
.text:0040D92C                                         ; DATA XREF: ...
.text:0040D92C                 add     edi, 2          ; jumptable 0040D7BA cases 6,7
.text:0040D92F                 jmp     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040D934 ; ---------------------------------------------------------------------------
.text:0040D934
.text:0040D934 loc_40D934:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D934                                         ; sub_40D720+2D0↓j
.text:0040D934                                         ; DATA XREF: ...
.text:0040D934                 movsx   ecx, byte ptr [edi+1] ; jumptable 0040D7BA cases 15,16
.text:0040D938                 movzx   edx, byte ptr [edi]
.text:0040D93B                 add     edi, 2
.text:0040D93E                 shl     ecx, 8
.text:0040D941                 add     edx, ecx
.text:0040D943                 lea     ebx, [edx+edi]
.text:0040D946                 cmp     ebx, [esp+6Ch+var_30]
.text:0040D94A                 jnb     short loc_40D9C8
.text:0040D94C                 mov     ecx, [esp+6Ch+var_24]
.text:0040D950                 cmp     ecx, [esp+6Ch+var_28]
.text:0040D954                 jz      short loc_40D973
.text:0040D956
.text:0040D956 loc_40D956:                             ; CODE XREF: sub_40D720+29C↓j
.text:0040D956                 mov     edx, [esp+6Ch+Src]
.text:0040D95A                 mov     [edx+ecx*4], ebx
.text:0040D95D                 inc     [esp+6Ch+var_24]
.text:0040D961
.text:0040D961 loc_40D961:                             ; CODE XREF: sub_40D720+2AC↓j
.text:0040D961                 cmp     [esp+6Ch+var_4D], 0
.text:0040D966                 jz      loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040D96C                 mov     [esp+6Ch+var_4D], 0
.text:0040D971                 jmp     short loc_40D92C ; jumptable 0040D7BA cases 6,7
.text:0040D973 ; ---------------------------------------------------------------------------
.text:0040D973
.text:0040D973 loc_40D973:                             ; CODE XREF: sub_40D720+234↑j
.text:0040D973                 mov     eax, dword_41A040
.text:0040D978                 lea     edx, [eax+eax*8]
.text:0040D97B                 lea     edx, [eax+edx*2]
.text:0040D97E                 cmp     ecx, edx
.text:0040D980                 ja      short loc_40D9BE
.text:0040D982                 lea     edx, ds:0[ecx*8]
.text:0040D989                 mov     [esp+6Ch+Size], edx ; Size
.text:0040D98C                 call    malloc
.text:0040D991                 mov     [esp+6Ch+Size], eax ; void *
.text:0040D994                 mov     ecx, [esp+6Ch+var_28]
.text:0040D998                 shl     ecx, 2
.text:0040D99B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0040D99F                 mov     ecx, [esp+6Ch+Src]
.text:0040D9A3                 mov     [esp+6Ch+Val], ecx ; Src
.text:0040D9A7                 call    memcpy
.text:0040D9AC                 mov     [esp+6Ch+Src], eax
.text:0040D9B0                 test    eax, eax
.text:0040D9B2                 jz      short loc_40D9BE
.text:0040D9B4                 shl     [esp+6Ch+var_28], 1
.text:0040D9B8                 mov     ecx, [esp+6Ch+var_24]
.text:0040D9BC                 jmp     short loc_40D956
.text:0040D9BE ; ---------------------------------------------------------------------------
.text:0040D9BE
.text:0040D9BE loc_40D9BE:                             ; CODE XREF: sub_40D720+260↑j
.text:0040D9BE                                         ; sub_40D720+292↑j
.text:0040D9BE                 mov     edx, 0FFFFFFFEh
.text:0040D9C3                 jmp     loc_40D842
.text:0040D9C8 ; ---------------------------------------------------------------------------
.text:0040D9C8
.text:0040D9C8 loc_40D9C8:                             ; CODE XREF: sub_40D720+22A↑j
.text:0040D9C8                 or      byte ptr [ebp+1Ch], 1
.text:0040D9CC                 jmp     short loc_40D961
.text:0040D9CE ; ---------------------------------------------------------------------------
.text:0040D9CE
.text:0040D9CE loc_40D9CE:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D9CE                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D9CE                 add     edi, 2          ; jumptable 0040D7BA case 21
.text:0040D9D1                 movsx   ecx, byte ptr [edi+1]
.text:0040D9D5                 movzx   ebx, byte ptr [edi]
.text:0040D9D8                 add     edi, 2
.text:0040D9DB                 shl     ecx, 8
.text:0040D9DE                 add     ebx, ecx
.text:0040D9E0                 test    ebx, ebx
.text:0040D9E2                 jnz     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040D9E8                 mov     [esp+6Ch+var_4D], 1
.text:0040D9ED                 sub     edi, 4
.text:0040D9F0                 jmp     loc_40D934      ; jumptable 0040D7BA cases 15,16
.text:0040D9F5 ; ---------------------------------------------------------------------------
.text:0040D9F5
.text:0040D9F5 loc_40D9F5:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040D9F5                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040D9F5                 movsx   ebx, byte ptr [edi+1] ; jumptable 0040D7BA cases 13,14,17-19,22
.text:0040D9F9                 movzx   ecx, byte ptr [edi]
.text:0040D9FC                 shl     ebx, 8
.text:0040D9FF                 add     ecx, ebx
.text:0040DA01                 test    ecx, ecx
.text:0040DA03                 lea     edi, [ecx+edi+2]
.text:0040DA07                 jg      loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA0D                 movzx   eax, byte ptr [edi]
.text:0040DA10                 cmp     al, 0Fh
.text:0040DA12                 jz      short loc_40DA1C
.text:0040DA14                 cmp     al, 15h
.text:0040DA16                 jnz     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA1C
.text:0040DA1C loc_40DA1C:                             ; CODE XREF: sub_40D720+2F2↑j
.text:0040DA1C                 inc     edi
.text:0040DA1D                 movsx   ecx, byte ptr [edi+1]
.text:0040DA21                 movzx   edx, byte ptr [edi]
.text:0040DA24                 shl     ecx, 8
.text:0040DA27                 add     edx, ecx
.text:0040DA29                 lea     edi, [edx+edi+2]
.text:0040DA2D                 mov     edx, [esp+6Ch+var_24]
.text:0040DA31                 test    edx, edx
.text:0040DA33                 jz      loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA39                 mov     ebx, [esp+6Ch+Src]
.text:0040DA3D                 cmp     [ebx+edx*4-4], edi
.text:0040DA41                 jnz     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA47                 lea     eax, [edx-1]
.text:0040DA4A                 mov     [esp+6Ch+var_24], eax
.text:0040DA4E                 jmp     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA53 ; ---------------------------------------------------------------------------
.text:0040DA53
.text:0040DA53 loc_40DA53:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040DA53                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040DA53                 add     edi, 4          ; jumptable 0040D7BA case 23
.text:0040DA56                 jmp     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DA5B ; ---------------------------------------------------------------------------
.text:0040DA5B
.text:0040DA5B loc_40DA5B:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040DA5B                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040DA5B                 xor     ebx, ebx        ; jumptable 0040D7BA case 24
.text:0040DA5D
.text:0040DA5D loc_40DA5D:                             ; CODE XREF: sub_40D720+350↓j
.text:0040DA5D                 movzx   edi, bl
.text:0040DA60                 cmp     ds:byte_41B6B0[edi], 1
.text:0040DA67                 jz      short loc_40DA77
.text:0040DA69
.text:0040DA69 loc_40DA69:                             ; CODE XREF: sub_40D720+35B↓j
.text:0040DA69                 inc     ebx
.text:0040DA6A                 cmp     ebx, 0FFh
.text:0040DA70                 jle     short loc_40DA5D
.text:0040DA72                 jmp     loc_40D854
.text:0040DA77 ; ---------------------------------------------------------------------------
.text:0040DA77
.text:0040DA77 loc_40DA77:                             ; CODE XREF: sub_40D720+347↑j
.text:0040DA77                 mov     byte ptr [ebx+esi], 1
.text:0040DA7B                 jmp     short loc_40DA69
.text:0040DA7D ; ---------------------------------------------------------------------------
.text:0040DA7D
.text:0040DA7D loc_40DA7D:                             ; CODE XREF: sub_40D720+9A↑j
.text:0040DA7D                                         ; DATA XREF: sub_40D720:jpt_40D7BA↑o
.text:0040DA7D                 xor     ebx, ebx        ; jumptable 0040D7BA case 25
.text:0040DA7F
.text:0040DA7F loc_40DA7F:                             ; CODE XREF: sub_40D720+376↓j
.text:0040DA7F                 movzx   edx, bl
.text:0040DA82                 cmp     ds:byte_41B6B0[edx], 1
.text:0040DA89                 jz      short loc_40DA8F
.text:0040DA8B                 mov     byte ptr [ebx+esi], 1
.text:0040DA8F
.text:0040DA8F loc_40DA8F:                             ; CODE XREF: sub_40D720+369↑j
.text:0040DA8F                 inc     ebx
.text:0040DA90                 cmp     ebx, 0FFh
.text:0040DA96                 jle     short loc_40DA7F
.text:0040DA98                 jmp     loc_40D854
.text:0040DA98 ; ---------------------------------------------------------------------------
.text:0040DA9D                 align 10h
.text:0040DAA0
.text:0040DAA0 loc_40DAA0:                             ; CODE XREF: sub_40D720+7C↑j
.text:0040DAA0                                         ; sub_40D720+87↑j
.text:0040DAA0                 mov     ecx, [esp+6Ch+var_24]
.text:0040DAA4                 test    ecx, ecx
.text:0040DAA6                 jz      short loc_40DAD3
.text:0040DAA8                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040DAAC                 dec     ecx
.text:0040DAAD                 movzx   eax, [esp+6Ch+var_4C]
.text:0040DAB2                 or      eax, ebx
.text:0040DAB4                 and     al, 1
.text:0040DAB6                 and     bl, 0FEh
.text:0040DAB9                 or      bl, al
.text:0040DABB                 mov     [ebp+1Ch], bl
.text:0040DABE                 mov     ebx, [esp+6Ch+Src]
.text:0040DAC2                 mov     [esp+6Ch+var_4C], 1
.text:0040DAC7                 mov     [esp+6Ch+var_24], ecx
.text:0040DACB                 mov     edi, [ebx+ecx*4]
.text:0040DACE                 jmp     loc_40D798      ; jumptable 0040D7BA cases 0,9-12,20,26-29
.text:0040DAD3 ; ---------------------------------------------------------------------------
.text:0040DAD3
.text:0040DAD3 loc_40DAD3:                             ; CODE XREF: sub_40D720+386↑j
.text:0040DAD3                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040DAD7                 movzx   eax, [esp+6Ch+var_4C]
.text:0040DADC                 or      eax, ebx
.text:0040DADE                 and     al, 1
.text:0040DAE0                 and     bl, 0FEh
.text:0040DAE3                 or      bl, al
.text:0040DAE5                 mov     [ebp+1Ch], bl
.text:0040DAE8                 jmp     loc_40D840
.text:0040DAED ; ---------------------------------------------------------------------------
.text:0040DAED
.text:0040DAED def_40D7BA:                             ; CODE XREF: sub_40D720+94↑j
.text:0040DAED                                         ; sub_40D720+9A↑j
.text:0040DAED                                         ; DATA XREF: ...
.text:0040DAED                 call    abort           ; jumptable 0040D7BA default case, case 1
.text:0040DAED sub_40D720      endp
.text:0040DAED
.text:0040DAED ; ---------------------------------------------------------------------------
.text:0040DAF2                 align 10h
.text:0040DB00
.text:0040DB00 ; =============== S U B R O U T I N E =======================================
.text:0040DB00
.text:0040DB00
.text:0040DB00 ; int __cdecl sub_40DB00(char *, int, int, int)
.text:0040DB00 sub_40DB00      proc near               ; CODE XREF: sub_40DE20+32↓p
.text:0040DB00
.text:0040DB00 Str             = dword ptr -2Ch
.text:0040DB00 Str2            = dword ptr -28h
.text:0040DB00 MaxCount        = dword ptr -24h
.text:0040DB00 var_20          = dword ptr -20h
.text:0040DB00 var_19          = byte ptr -19h
.text:0040DB00 var_18          = dword ptr -18h
.text:0040DB00 var_14          = dword ptr -14h
.text:0040DB00 arg_0           = dword ptr  4
.text:0040DB00 arg_4           = dword ptr  8
.text:0040DB00 arg_8           = dword ptr  0Ch
.text:0040DB00 arg_C           = dword ptr  10h
.text:0040DB00
.text:0040DB00                 push    ebp
.text:0040DB01                 push    edi
.text:0040DB02                 push    esi
.text:0040DB03                 push    ebx
.text:0040DB04                 sub     esp, 1Ch
.text:0040DB07                 xor     ebx, ebx
.text:0040DB09                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040DB11                 mov     edx, [esp+2Ch+arg_0]
.text:0040DB15                 mov     ebp, [esp+2Ch+arg_C]
.text:0040DB19                 mov     [esp+2Ch+var_19], 0
.text:0040DB1E                 mov     [esp+2Ch+Str], edx ; Str
.text:0040DB21                 call    strlen
.text:0040DB26                 mov     [esp+2Ch+var_14], eax
.text:0040DB2A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040DB2E                 mov     eax, [ecx]
.text:0040DB30                 test    eax, eax
.text:0040DB32                 jz      short loc_40DB78
.text:0040DB34                 mov     [esp+2Ch+var_20], 0
.text:0040DB3C                 lea     esi, [esi+0]
.text:0040DB40
.text:0040DB40 loc_40DB40:                             ; CODE XREF: sub_40DB00+6A↓j
.text:0040DB40                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040DB43                 mov     esi, [esp+2Ch+var_14]
.text:0040DB47                 mov     ecx, [esp+2Ch+arg_0]
.text:0040DB4B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040DB4F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040DB53                 call    strncmp
.text:0040DB58                 test    eax, eax
.text:0040DB5A                 jz      short loc_40DB86
.text:0040DB5C
.text:0040DB5C loc_40DB5C:                             ; CODE XREF: sub_40DB00+CA↓j
.text:0040DB5C                                         ; sub_40DB00+D1↓j ...
.text:0040DB5C                 add     [esp+2Ch+var_20], ebp
.text:0040DB60                 inc     ebx
.text:0040DB61                 mov     esi, [esp+2Ch+arg_4]
.text:0040DB65                 mov     eax, [esi+ebx*4]
.text:0040DB68                 test    eax, eax
.text:0040DB6A                 jnz     short loc_40DB40
.text:0040DB6C                 cmp     [esp+2Ch+var_19], 0
.text:0040DB71                 mov     edx, 0FFFFFFFEh
.text:0040DB76                 jnz     short loc_40DB7C
.text:0040DB78
.text:0040DB78 loc_40DB78:                             ; CODE XREF: sub_40DB00+32↑j
.text:0040DB78                 mov     edx, [esp+2Ch+var_18]
.text:0040DB7C
.text:0040DB7C loc_40DB7C:                             ; CODE XREF: sub_40DB00+76↑j
.text:0040DB7C                                         ; sub_40DB00+9B↓j
.text:0040DB7C                 add     esp, 1Ch
.text:0040DB7F                 mov     eax, edx
.text:0040DB81                 pop     ebx
.text:0040DB82                 pop     esi
.text:0040DB83                 pop     edi
.text:0040DB84                 pop     ebp
.text:0040DB85                 retn
.text:0040DB86 ; ---------------------------------------------------------------------------
.text:0040DB86
.text:0040DB86 loc_40DB86:                             ; CODE XREF: sub_40DB00+5A↑j
.text:0040DB86                 mov     eax, [esp+2Ch+arg_4]
.text:0040DB8A                 mov     edi, [eax+ebx*4]
.text:0040DB8D                 mov     [esp+2Ch+Str], edi ; Str
.text:0040DB90                 call    strlen
.text:0040DB95                 cmp     eax, [esp+2Ch+var_14]
.text:0040DB99                 mov     edx, ebx
.text:0040DB9B                 jz      short loc_40DB7C
.text:0040DB9D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040DBA2                 jz      short loc_40DBD3
.text:0040DBA4                 mov     ecx, [esp+2Ch+arg_8]
.text:0040DBA8                 test    ecx, ecx
.text:0040DBAA                 jz      short loc_40DBCC
.text:0040DBAC                 cld
.text:0040DBAD                 mov     edi, [esp+2Ch+var_18]
.text:0040DBB1                 mov     ecx, ebp
.text:0040DBB3                 mov     esi, [esp+2Ch+arg_8]
.text:0040DBB7                 mov     edx, [esp+2Ch+var_20]
.text:0040DBBB                 imul    edi, ebp
.text:0040DBBE                 add     esi, edi
.text:0040DBC0                 mov     edi, [esp+2Ch+arg_8]
.text:0040DBC4                 add     edi, edx
.text:0040DBC6                 cmp     ebp, ebp
.text:0040DBC8                 repe cmpsb
.text:0040DBCA                 jz      short loc_40DB5C
.text:0040DBCC
.text:0040DBCC loc_40DBCC:                             ; CODE XREF: sub_40DB00+AA↑j
.text:0040DBCC                 mov     [esp+2Ch+var_19], 1
.text:0040DBD1                 jmp     short loc_40DB5C
.text:0040DBD3 ; ---------------------------------------------------------------------------
.text:0040DBD3
.text:0040DBD3 loc_40DBD3:                             ; CODE XREF: sub_40DB00+A2↑j
.text:0040DBD3                 mov     [esp+2Ch+var_18], ebx
.text:0040DBD7                 jmp     short loc_40DB5C
.text:0040DBD7 sub_40DB00      endp
.text:0040DBD7
.text:0040DBD7 ; ---------------------------------------------------------------------------
.text:0040DBD9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040DBD9                                         ; DATA XREF: .text:0040DC32↓o
.text:0040DBD9                                         ; sub_40DE20+5A↓o
.text:0040DBF6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040DBF6                                         ; DATA XREF: .text:loc_40DCA0↓o
.text:0040DBF6                                         ; sub_40DE20:loc_40E016↓o
.text:0040DC11 ; ---------------------------------------------------------------------------
.text:0040DC11                 jmp     short loc_40DC20
.text:0040DC11 ; ---------------------------------------------------------------------------
.text:0040DC13                 align 10h
.text:0040DC20
.text:0040DC20 loc_40DC20:                             ; CODE XREF: .text:0040DC11↑j
.text:0040DC20                 sub     esp, 1Ch
.text:0040DC23                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040DC28                 mov     [esp+14h], ebx
.text:0040DC2C                 mov     [esp+18h], esi
.text:0040DC30                 jz      short loc_40DCA0
.text:0040DC32                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040DC39
.text:0040DC39 loc_40DC39:                             ; CODE XREF: .text:0040DCA7↓j
.text:0040DC39                 call    ds:libintl_gettext
.text:0040DC3F                 mov     dword ptr [esp], 1
.text:0040DC46                 mov     edx, [esp+20h]
.text:0040DC4A                 mov     esi, eax
.text:0040DC4C                 mov     [esp+4], edx
.text:0040DC50                 call    sub_40F2D0
.text:0040DC55                 mov     dword ptr [esp+4], 5
.text:0040DC5D                 mov     edx, [esp+24h]
.text:0040DC61                 mov     ebx, eax
.text:0040DC63                 mov     dword ptr [esp], 0
.text:0040DC6A                 mov     [esp+8], edx
.text:0040DC6E                 call    sub_406900
.text:0040DC73                 mov     [esp+0Ch], eax
.text:0040DC77                 mov     [esp+10h], ebx
.text:0040DC7B                 mov     [esp+8], esi
.text:0040DC7F                 mov     dword ptr [esp+4], 0
.text:0040DC87                 mov     dword ptr [esp], 0
.text:0040DC8E                 call    sub_4103E0
.text:0040DC93                 mov     ebx, [esp+14h]
.text:0040DC97                 mov     esi, [esp+18h]
.text:0040DC9B                 add     esp, 1Ch
.text:0040DC9E                 retn
.text:0040DC9E ; ---------------------------------------------------------------------------
.text:0040DC9F                 align 10h
.text:0040DCA0
.text:0040DCA0 loc_40DCA0:                             ; CODE XREF: .text:0040DC30↑j
.text:0040DCA0                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040DCA7                 jmp     short loc_40DC39
.text:0040DCA7 ; ---------------------------------------------------------------------------
.text:0040DCA9 aValidArguments db 'Valid arguments are:',0
.text:0040DCA9                                         ; DATA XREF: .text:0040DCF3↓o
.text:0040DCA9                                         ; sub_40DE20+CB↓o
.text:0040DCBE ; const char aS_2[]
.text:0040DCBE aS_2            db 0Ah                  ; DATA XREF: .text:0040DD6D↓o
.text:0040DCBE                                         ; sub_40DE20:loc_40DF58↓o
.text:0040DCBE                 db '  - `%s',27h,0
.text:0040DCC8 ; const char aS_3[]
.text:0040DCC8 aS_3            db ', `%s',27h,0        ; DATA XREF: .text:0040DDFA↓o
.text:0040DCC8                                         ; sub_40DE20:loc_40DFF0↓o
.text:0040DCCF                 align 10h
.text:0040DCD0                 push    ebp
.text:0040DCD1                 push    edi
.text:0040DCD2                 push    esi
.text:0040DCD3                 push    ebx
.text:0040DCD4                 sub     esp, 2Ch
.text:0040DCD7                 mov     ecx, [esp+40h]
.text:0040DCDB                 mov     dword ptr [esp+1Ch], 0
.text:0040DCE3                 mov     eax, [esp+44h]
.text:0040DCE7                 mov     ebp, [esp+48h]
.text:0040DCEB                 mov     [esp+28h], ecx
.text:0040DCEF                 mov     [esp+24h], eax
.text:0040DCF3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040DCFA                 call    ds:libintl_gettext
.text:0040DD00                 mov     edx, ds:_iob
.text:0040DD06                 add     edx, 40h ; '@'
.text:0040DD09                 mov     [esp], edx
.text:0040DD0C                 mov     [esp+4], eax
.text:0040DD10                 call    fprintf
.text:0040DD15                 mov     dword ptr [esp+20h], 0
.text:0040DD1D                 mov     edx, [esp+28h]
.text:0040DD21                 mov     eax, [edx]
.text:0040DD23                 test    eax, eax
.text:0040DD25                 jz      short loc_40DDA5
.text:0040DD27                 mov     dword ptr [esp+14h], 0
.text:0040DD2F                 mov     esi, [esp+24h]
.text:0040DD33                 mov     ebx, eax
.text:0040DD35                 mov     [esp+18h], esi
.text:0040DD39                 lea     esi, [esi+0]
.text:0040DD40
.text:0040DD40 loc_40DD40:                             ; CODE XREF: .text:0040DDA3↓j
.text:0040DD40                 mov     edi, [esp+20h]
.text:0040DD44                 test    edi, edi
.text:0040DD46                 jz      short loc_40DD63
.text:0040DD48                 cld
.text:0040DD49                 mov     edi, [esp+24h]
.text:0040DD4D                 mov     ecx, ebp
.text:0040DD4F                 mov     edx, [esp+14h]
.text:0040DD53                 mov     esi, [esp+1Ch]
.text:0040DD57                 add     edi, edx
.text:0040DD59                 cmp     ebp, ebp
.text:0040DD5B                 repe cmpsb
.text:0040DD5D                 jz      loc_40DDF0
.text:0040DD63
.text:0040DD63 loc_40DD63:                             ; CODE XREF: .text:0040DD46↑j
.text:0040DD63                 mov     [esp+8], ebx
.text:0040DD67                 mov     ecx, ds:_iob
.text:0040DD6D                 mov     dword ptr [esp+4], offset aS_2 ; "\n  - `%s'"
.text:0040DD75                 add     ecx, 40h ; '@'
.text:0040DD78                 mov     [esp], ecx
.text:0040DD7B                 call    fprintf
.text:0040DD80                 mov     ebx, [esp+18h]
.text:0040DD84                 mov     [esp+1Ch], ebx
.text:0040DD88
.text:0040DD88 loc_40DD88:                             ; CODE XREF: .text:0040DE0D↓j
.text:0040DD88                 inc     dword ptr [esp+20h]
.text:0040DD8C                 mov     eax, [esp+28h]
.text:0040DD90                 add     [esp+14h], ebp
.text:0040DD94                 mov     edx, [esp+20h]
.text:0040DD98                 add     [esp+18h], ebp
.text:0040DD9C                 mov     edi, [eax+edx*4]
.text:0040DD9F                 test    edi, edi
.text:0040DDA1                 mov     ebx, edi
.text:0040DDA3                 jnz     short loc_40DD40
.text:0040DDA5
.text:0040DDA5 loc_40DDA5:                             ; CODE XREF: .text:0040DD25↑j
.text:0040DDA5                 mov     ebx, ds:_iob
.text:0040DDAB                 mov     ebp, [ebx+44h]
.text:0040DDAE                 dec     ebp
.text:0040DDAF                 mov     [ebx+44h], ebp
.text:0040DDB2                 test    ebp, ebp
.text:0040DDB4                 js      short loc_40DDCD
.text:0040DDB6                 mov     ecx, ds:_iob
.text:0040DDBC                 mov     esi, [ecx+40h]
.text:0040DDBF                 mov     byte ptr [esi], 0Ah
.text:0040DDC2                 inc     dword ptr [ecx+40h]
.text:0040DDC5                 add     esp, 2Ch
.text:0040DDC8                 pop     ebx
.text:0040DDC9                 pop     esi
.text:0040DDCA                 pop     edi
.text:0040DDCB                 pop     ebp
.text:0040DDCC                 retn
.text:0040DDCD ; ---------------------------------------------------------------------------
.text:0040DDCD
.text:0040DDCD loc_40DDCD:                             ; CODE XREF: .text:0040DDB4↑j
.text:0040DDCD                 mov     dword ptr [esp+40h], 0Ah
.text:0040DDD5                 mov     edi, ds:_iob
.text:0040DDDB                 add     edi, 40h ; '@'
.text:0040DDDE                 mov     [esp+44h], edi
.text:0040DDE2                 add     esp, 2Ch
.text:0040DDE5                 pop     ebx
.text:0040DDE6                 pop     esi
.text:0040DDE7                 pop     edi
.text:0040DDE8                 pop     ebp
.text:0040DDE9                 jmp     _flsbuf
.text:0040DDE9 ; ---------------------------------------------------------------------------
.text:0040DDEE                 align 10h
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: .text:0040DD5D↑j
.text:0040DDF0                 mov     [esp+8], ebx
.text:0040DDF4                 mov     esi, ds:_iob
.text:0040DDFA                 mov     dword ptr [esp+4], offset aS_3 ; ", `%s'"
.text:0040DE02                 add     esi, 40h ; '@'
.text:0040DE05                 mov     [esp], esi
.text:0040DE08                 call    fprintf
.text:0040DE0D                 jmp     loc_40DD88
.text:0040DE0D ; ---------------------------------------------------------------------------
.text:0040DE12                 align 10h
.text:0040DE20
.text:0040DE20 ; =============== S U B R O U T I N E =======================================
.text:0040DE20
.text:0040DE20
.text:0040DE20 ; int __cdecl sub_40DE20(char *, char *, int, int, int, int)
.text:0040DE20 sub_40DE20      proc near               ; CODE XREF: sub_402010+15B↑p
.text:0040DE20
.text:0040DE20 Stream          = dword ptr -4Ch
.text:0040DE20 Format          = dword ptr -48h
.text:0040DE20 var_44          = dword ptr -44h
.text:0040DE20 var_40          = byte ptr -40h
.text:0040DE20 var_3C          = dword ptr -3Ch
.text:0040DE20 var_2C          = dword ptr -2Ch
.text:0040DE20 var_28          = dword ptr -28h
.text:0040DE20 var_24          = dword ptr -24h
.text:0040DE20 var_20          = dword ptr -20h
.text:0040DE20 var_1C          = dword ptr -1Ch
.text:0040DE20 var_18          = dword ptr -18h
.text:0040DE20 var_14          = dword ptr -14h
.text:0040DE20 var_10          = dword ptr -10h
.text:0040DE20 var_C           = dword ptr -0Ch
.text:0040DE20 var_8           = dword ptr -8
.text:0040DE20 var_4           = dword ptr -4
.text:0040DE20 arg_0           = dword ptr  4
.text:0040DE20 arg_4           = dword ptr  8
.text:0040DE20 arg_8           = dword ptr  0Ch
.text:0040DE20 arg_C           = dword ptr  10h
.text:0040DE20 arg_10          = dword ptr  14h
.text:0040DE20 arg_14          = dword ptr  18h
.text:0040DE20
.text:0040DE20                 sub     esp, 4Ch
.text:0040DE23                 mov     edx, [esp+4Ch+arg_10]
.text:0040DE27                 mov     [esp+4Ch+var_10], ebx
.text:0040DE2B                 mov     ebx, [esp+4Ch+arg_C]
.text:0040DE2F                 mov     [esp+4Ch+var_C], esi
.text:0040DE33                 mov     esi, [esp+4Ch+arg_4]
.text:0040DE37                 mov     [esp+4Ch+var_4], ebp
.text:0040DE3B                 mov     ebp, [esp+4Ch+arg_8]
.text:0040DE3F                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:0040DE43                 mov     [esp+4Ch+var_8], edi
.text:0040DE47                 mov     [esp+4Ch+var_44], ebx ; int
.text:0040DE4B                 mov     [esp+4Ch+Format], ebp ; int
.text:0040DE4F                 mov     [esp+4Ch+Stream], esi ; char *
.text:0040DE52                 call    sub_40DB00
.text:0040DE57                 test    eax, eax
.text:0040DE59                 mov     edx, eax
.text:0040DE5B                 js      short loc_40DE73
.text:0040DE5D
.text:0040DE5D loc_40DE5D:                             ; CODE XREF: sub_40DE20+1AA↓j
.text:0040DE5D                 mov     ebx, [esp+4Ch+var_10]
.text:0040DE61                 mov     eax, edx
.text:0040DE63                 mov     esi, [esp+4Ch+var_C]
.text:0040DE67                 mov     edi, [esp+4Ch+var_8]
.text:0040DE6B                 mov     ebp, [esp+4Ch+var_4]
.text:0040DE6F                 add     esp, 4Ch
.text:0040DE72                 retn
.text:0040DE73 ; ---------------------------------------------------------------------------
.text:0040DE73
.text:0040DE73 loc_40DE73:                             ; CODE XREF: sub_40DE20+3B↑j
.text:0040DE73                 inc     eax
.text:0040DE74                 jz      loc_40E016
.text:0040DE7A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040DE81
.text:0040DE81 loc_40DE81:                             ; CODE XREF: sub_40DE20+1FD↓j
.text:0040DE81                 call    ds:libintl_gettext
.text:0040DE87                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040DE8E                 mov     edi, [esp+4Ch+arg_0]
.text:0040DE92                 mov     [esp+4Ch+var_14], eax
.text:0040DE96                 mov     [esp+4Ch+Format], edi ; char *
.text:0040DE9A                 call    sub_40F2D0
.text:0040DE9F                 mov     [esp+4Ch+var_18], eax
.text:0040DEA3                 mov     [esp+4Ch+var_44], esi ; char *
.text:0040DEA7                 mov     [esp+4Ch+Format], 5 ; int
.text:0040DEAF                 mov     [esp+4Ch+Stream], 0 ; int
.text:0040DEB6                 call    sub_406900
.text:0040DEBB                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040DEBF                 mov     ecx, [esp+4Ch+var_18]
.text:0040DEC3                 mov     eax, [esp+4Ch+var_14]
.text:0040DEC7                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040DECF                 mov     [esp+4Ch+var_3C], ecx
.text:0040DED3                 mov     [esp+4Ch+var_44], eax ; char *
.text:0040DED7                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040DEDE                 call    sub_4103E0
.text:0040DEE3                 mov     [esp+4Ch+var_20], 0
.text:0040DEEB                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:0040DEF2                 call    ds:libintl_gettext
.text:0040DEF8                 mov     edx, ds:_iob
.text:0040DEFE                 add     edx, 40h ; '@'
.text:0040DF01                 mov     [esp+4Ch+Format], eax ; Format
.text:0040DF05                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040DF08                 call    fprintf
.text:0040DF0D                 mov     [esp+4Ch+var_1C], 0
.text:0040DF15                 mov     eax, [ebp+0]
.text:0040DF18                 test    eax, eax
.text:0040DF1A                 jz      loc_40DFA1
.text:0040DF20                 mov     [esp+4Ch+var_24], eax
.text:0040DF24                 mov     [esp+4Ch+var_28], ebx
.text:0040DF28                 mov     [esp+4Ch+var_2C], 0
.text:0040DF30
.text:0040DF30 loc_40DF30:                             ; CODE XREF: sub_40DE20+17F↓j
.text:0040DF30                 mov     esi, [esp+4Ch+var_1C]
.text:0040DF34                 test    esi, esi
.text:0040DF36                 jz      short loc_40DF58
.text:0040DF38                 cld
.text:0040DF39                 mov     eax, [esp+4Ch+var_2C]
.text:0040DF3D                 mov     edx, [esp+4Ch+arg_10]
.text:0040DF41                 mov     esi, [esp+4Ch+var_20]
.text:0040DF45                 lea     ecx, [eax+ebx]
.text:0040DF48                 mov     edi, ecx
.text:0040DF4A                 mov     ecx, [esp+4Ch+arg_10]
.text:0040DF4E                 cmp     edx, edx
.text:0040DF50                 repe cmpsb
.text:0040DF52                 jz      loc_40DFF0
.text:0040DF58
.text:0040DF58 loc_40DF58:                             ; CODE XREF: sub_40DE20+116↑j
.text:0040DF58                 mov     [esp+4Ch+Format], offset aS_2 ; "\n  - `%s'"
.text:0040DF60                 mov     esi, ds:_iob
.text:0040DF66                 mov     ecx, [esp+4Ch+var_24]
.text:0040DF6A                 add     esi, 40h ; '@'
.text:0040DF6D                 mov     [esp+4Ch+var_44], ecx
.text:0040DF71                 mov     [esp+4Ch+Stream], esi ; Stream
.text:0040DF74                 call    fprintf
.text:0040DF79                 mov     edi, [esp+4Ch+var_28]
.text:0040DF7D                 mov     [esp+4Ch+var_20], edi
.text:0040DF81
.text:0040DF81 loc_40DF81:                             ; CODE XREF: sub_40DE20+1F1↓j
.text:0040DF81                 inc     [esp+4Ch+var_1C]
.text:0040DF85                 mov     ecx, [esp+4Ch+arg_10]
.text:0040DF89                 add     [esp+4Ch+var_2C], ecx
.text:0040DF8D                 mov     esi, [esp+4Ch+var_1C]
.text:0040DF91                 add     [esp+4Ch+var_28], ecx
.text:0040DF95                 mov     edi, [ebp+esi*4+0]
.text:0040DF99                 test    edi, edi
.text:0040DF9B                 mov     [esp+4Ch+var_24], edi
.text:0040DF9F                 jnz     short loc_40DF30
.text:0040DFA1
.text:0040DFA1 loc_40DFA1:                             ; CODE XREF: sub_40DE20+FA↑j
.text:0040DFA1                 mov     ebp, ds:_iob
.text:0040DFA7                 mov     ebx, [ebp+44h]
.text:0040DFAA                 dec     ebx
.text:0040DFAB                 mov     [ebp+44h], ebx
.text:0040DFAE                 test    ebx, ebx
.text:0040DFB0                 js      short loc_40DFCF
.text:0040DFB2                 mov     edi, ds:_iob
.text:0040DFB8                 mov     eax, [edi+40h]
.text:0040DFBB                 mov     byte ptr [eax], 0Ah
.text:0040DFBE                 inc     dword ptr [edi+40h]
.text:0040DFC1
.text:0040DFC1 loc_40DFC1:                             ; CODE XREF: sub_40DE20+1C8↓j
.text:0040DFC1                 call    [esp+4Ch+arg_14]
.text:0040DFC5                 mov     edx, 0FFFFFFFFh
.text:0040DFCA                 jmp     loc_40DE5D
.text:0040DFCF ; ---------------------------------------------------------------------------
.text:0040DFCF
.text:0040DFCF loc_40DFCF:                             ; CODE XREF: sub_40DE20+190↑j
.text:0040DFCF                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:0040DFD6                 mov     edx, ds:_iob
.text:0040DFDC                 add     edx, 40h ; '@'
.text:0040DFDF                 mov     [esp+4Ch+Format], edx ; File
.text:0040DFE3                 call    _flsbuf
.text:0040DFE8                 jmp     short loc_40DFC1
.text:0040DFE8 ; ---------------------------------------------------------------------------
.text:0040DFEA                 align 10h
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: sub_40DE20+132↑j
.text:0040DFF0                 mov     [esp+4Ch+Format], offset aS_3 ; ", `%s'"
.text:0040DFF8                 mov     edx, ds:_iob
.text:0040DFFE                 mov     eax, [esp+4Ch+var_24]
.text:0040E002                 add     edx, 40h ; '@'
.text:0040E005                 mov     [esp+4Ch+var_44], eax
.text:0040E009                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040E00C                 call    fprintf
.text:0040E011                 jmp     loc_40DF81
.text:0040E016 ; ---------------------------------------------------------------------------
.text:0040E016
.text:0040E016 loc_40E016:                             ; CODE XREF: sub_40DE20+54↑j
.text:0040E016                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040E01D                 jmp     loc_40DE81
.text:0040E01D sub_40DE20      endp
.text:0040E01D
.text:0040E01D ; ---------------------------------------------------------------------------
.text:0040E022                 align 10h
.text:0040E030                 push    ebp
.text:0040E031                 push    edi
.text:0040E032                 push    esi
.text:0040E033                 push    ebx
.text:0040E034                 sub     esp, 4
.text:0040E037                 mov     ecx, [esp+1Ch]
.text:0040E03B                 mov     dword ptr [esp], 0
.text:0040E042                 mov     ebx, [esp+24h]
.text:0040E046                 mov     edx, [ecx]
.text:0040E048                 test    edx, edx
.text:0040E04A                 jz      short loc_40E075
.text:0040E04C                 cld
.text:0040E04D                 xor     ebp, ebp
.text:0040E04F                 nop
.text:0040E050
.text:0040E050 loc_40E050:                             ; CODE XREF: .text:0040E073↓j
.text:0040E050                 mov     edi, [esp+20h]
.text:0040E054                 mov     ecx, ebx
.text:0040E056                 mov     esi, [esp+18h]
.text:0040E05A                 add     edi, ebp
.text:0040E05C                 cmp     ebx, ebx
.text:0040E05E                 repe cmpsb
.text:0040E060                 jz      short loc_40E07D
.text:0040E062                 inc     dword ptr [esp]
.text:0040E065                 add     ebp, ebx
.text:0040E067                 mov     eax, [esp+1Ch]
.text:0040E06B                 mov     ecx, [esp]
.text:0040E06E                 mov     edi, [eax+ecx*4]
.text:0040E071                 test    edi, edi
.text:0040E073                 jnz     short loc_40E050
.text:0040E075
.text:0040E075 loc_40E075:                             ; CODE XREF: .text:0040E04A↑j
.text:0040E075                 xor     eax, eax
.text:0040E077
.text:0040E077 loc_40E077:                             ; CODE XREF: .text:0040E087↓j
.text:0040E077                 pop     ebp
.text:0040E078                 pop     ebx
.text:0040E079                 pop     esi
.text:0040E07A                 pop     edi
.text:0040E07B                 pop     ebp
.text:0040E07C                 retn
.text:0040E07D ; ---------------------------------------------------------------------------
.text:0040E07D
.text:0040E07D loc_40E07D:                             ; CODE XREF: .text:0040E060↑j
.text:0040E07D                 mov     esi, [esp]
.text:0040E080                 mov     ebx, [esp+1Ch]
.text:0040E084                 mov     eax, [ebx+esi*4]
.text:0040E087                 jmp     short loc_40E077
.text:0040E087 ; ---------------------------------------------------------------------------
.text:0040E089                 align 10h
.text:0040E090
.text:0040E090 ; =============== S U B R O U T I N E =======================================
.text:0040E090
.text:0040E090 ; Attributes: noreturn
.text:0040E090
.text:0040E090 sub_40E090      proc near               ; DATA XREF: .data:off_41A050↓o
.text:0040E090
.text:0040E090 Code            = dword ptr -0Ch
.text:0040E090
.text:0040E090                 sub     esp, 0Ch
.text:0040E093                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040E09A                 call    sub_402A30
.text:0040E09A sub_40E090      endp
.text:0040E09A
.text:0040E09A ; ---------------------------------------------------------------------------
.text:0040E09F                 db  83h ; ƒ
.text:0040E0A0                 db 0C4h ; Ä
.text:0040E0A1                 db  0Ch
.text:0040E0A2                 db 0C3h ; Ã
.text:0040E0A3                 align 10h
.text:0040E0B0 dword_40E0B0    dd 90002D2Dh, 7 dup(90909090h)
.text:0040E0B0                                         ; DATA XREF: sub_40E300+E4↓o
.text:0040E0D0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040E0D0                                         ; DATA XREF: sub_40E300+2FC↓o
.text:0040E0FD                 db 13h dup(90h)
.text:0040E110 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040E110                                         ; DATA XREF: sub_40E300:loc_40E662↓o
.text:0040E13D                 db 13h dup(90h)
.text:0040E150 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:0040E150                                         ; DATA XREF: sub_40E300:loc_40E700↓o
.text:0040E150                                         ; sub_40E300:loc_40EAC7↓o
.text:0040E176                 db 1Ah dup(90h)
.text:0040E190 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:0040E190                                         ; DATA XREF: sub_40E300+48E↓o
.text:0040E1B0 dword_40E1B0    dd 90909000h, 7 dup(90909090h)
.text:0040E1B0                                         ; DATA XREF: sub_40E300:loc_40E7D1↓o
.text:0040E1D0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:0040E1D0                                         ; DATA XREF: sub_40E300:loc_40E7EA↓o
.text:0040E1F0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:0040E1F0                                         ; DATA XREF: sub_40E300:loc_40E8CF↓o
.text:0040E1F0                                         ; sub_40E300:loc_40EBFC↓o
.text:0040E217                 db 19h dup(90h)
.text:0040E230 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:0040E230                                         ; DATA XREF: sub_40E300:loc_40EA43↓o
.text:0040E25E                 db 12h dup(90h)
.text:0040E270 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:0040E270                                         ; DATA XREF: sub_40E300:loc_40EB2F↓o
.text:0040E291 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:0040E291                                         ; DATA XREF: sub_40E300+93F↓o
.text:0040E2AB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040E2AB                                         ; DATA XREF: sub_40E300:loc_40EC77↓o
.text:0040E2C5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:0040E2C5                                         ; DATA XREF: sub_40E300:loc_40EC9E↓o
.text:0040E2E3 ; const char VarName[]
.text:0040E2E3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_40E300:loc_40EE50↓o
.text:0040E2F3                 align 10h
.text:0040E300
.text:0040E300 ; =============== S U B R O U T I N E =======================================
.text:0040E300
.text:0040E300
.text:0040E300 ; int __cdecl sub_40E300(int, int, char *Str, int, int, int, int, int)
.text:0040E300 sub_40E300      proc near               ; CODE XREF: sub_40EE90+5A↓p
.text:0040E300                                         ; .text:0040EF7A↓p ...
.text:0040E300
.text:0040E300 Str1            = dword ptr -5Ch
.text:0040E300 Str2            = dword ptr -58h
.text:0040E300 MaxCount        = dword ptr -54h
.text:0040E300 var_50          = dword ptr -50h
.text:0040E300 var_4C          = dword ptr -4Ch
.text:0040E300 var_3C          = dword ptr -3Ch
.text:0040E300 var_38          = dword ptr -38h
.text:0040E300 var_34          = dword ptr -34h
.text:0040E300 var_30          = dword ptr -30h
.text:0040E300 var_2C          = dword ptr -2Ch
.text:0040E300 var_28          = dword ptr -28h
.text:0040E300 var_24          = dword ptr -24h
.text:0040E300 var_20          = dword ptr -20h
.text:0040E300 var_1C          = dword ptr -1Ch
.text:0040E300 var_18          = dword ptr -18h
.text:0040E300 var_14          = dword ptr -14h
.text:0040E300 arg_0           = dword ptr  4
.text:0040E300 arg_4           = dword ptr  8
.text:0040E300 Str             = dword ptr  0Ch
.text:0040E300 arg_C           = dword ptr  10h
.text:0040E300 arg_10          = dword ptr  14h
.text:0040E300 arg_14          = dword ptr  18h
.text:0040E300 arg_18          = dword ptr  1Ch
.text:0040E300 arg_1C          = dword ptr  20h
.text:0040E300
.text:0040E300                 push    ebp
.text:0040E301                 mov     eax, 0FFFFFFFFh
.text:0040E306                 push    edi
.text:0040E307                 push    esi
.text:0040E308                 push    ebx
.text:0040E309                 sub     esp, 4Ch
.text:0040E30C                 mov     esi, [esp+5Ch+Str]
.text:0040E310                 mov     ebp, [esp+5Ch+arg_1C]
.text:0040E314                 cmp     byte ptr [esi], 3Ah ; ':'
.text:0040E317                 mov     ebx, [ebp+4]
.text:0040E31A                 setz    dl
.text:0040E31D                 movzx   ecx, dl
.text:0040E320                 dec     ecx
.text:0040E321                 and     ecx, ebx
.text:0040E323                 mov     [esp+5Ch+var_14], ecx
.text:0040E327                 mov     ecx, [esp+5Ch+arg_0]
.text:0040E32B                 test    ecx, ecx
.text:0040E32D                 jle     loc_40E457
.text:0040E333                 mov     dword ptr [ebp+0Ch], 0
.text:0040E33A                 mov     ebx, [ebp+0]
.text:0040E33D                 test    ebx, ebx
.text:0040E33F                 jz      loc_40EE70
.text:0040E345                 mov     edi, [ebp+10h]
.text:0040E348                 test    edi, edi
.text:0040E34A                 jnz     short loc_40E3A3
.text:0040E34C                 lea     esi, [esi+0]
.text:0040E350
.text:0040E350 loc_40E350:                             ; CODE XREF: sub_40E300+B7C↓j
.text:0040E350                 mov     [ebp+24h], ebx
.text:0040E353                 mov     esi, [esp+5Ch+Str]
.text:0040E357                 mov     [ebp+20h], ebx
.text:0040E35A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040E35E                 xor     ebx, ebx
.text:0040E360                 mov     dword ptr [ebp+14h], 0
.text:0040E367                 test    ecx, ecx
.text:0040E369                 jz      loc_40EE50
.text:0040E36F
.text:0040E36F loc_40E36F:                             ; CODE XREF: sub_40E300+B64↓j
.text:0040E36F                 mov     ebx, 1
.text:0040E374
.text:0040E374 loc_40E374:                             ; CODE XREF: sub_40E300+B5E↓j
.text:0040E374                 mov     [ebp+1Ch], ebx
.text:0040E377                 mov     ecx, [esp+5Ch+Str]
.text:0040E37B                 movzx   eax, byte ptr [ecx]
.text:0040E37E                 cmp     al, 2Dh ; '-'
.text:0040E380                 jz      loc_40EE40
.text:0040E386                 cmp     al, 2Bh ; '+'
.text:0040E388                 jz      loc_40EE29
.text:0040E38E                 xor     edx, edx
.text:0040E390                 test    ebx, ebx
.text:0040E392                 setz    dl
.text:0040E395                 mov     [ebp+18h], edx
.text:0040E398
.text:0040E398 loc_40E398:                             ; CODE XREF: sub_40E300+B35↓j
.text:0040E398                 mov     [esp+5Ch+Str], esi
.text:0040E39C                 mov     dword ptr [ebp+10h], 1
.text:0040E3A3
.text:0040E3A3 loc_40E3A3:                             ; CODE XREF: sub_40E300+4A↑j
.text:0040E3A3                 mov     eax, [ebp+14h]
.text:0040E3A6                 test    eax, eax
.text:0040E3A8                 jz      short loc_40E3B3
.text:0040E3AA                 cmp     byte ptr [eax], 0
.text:0040E3AD                 jnz     loc_40E490
.text:0040E3B3
.text:0040E3B3 loc_40E3B3:                             ; CODE XREF: sub_40E300+A8↑j
.text:0040E3B3                 mov     ebx, [ebp+0]
.text:0040E3B6                 cmp     [ebp+24h], ebx
.text:0040E3B9                 jle     short loc_40E3BE
.text:0040E3BB                 mov     [ebp+24h], ebx
.text:0040E3BE
.text:0040E3BE loc_40E3BE:                             ; CODE XREF: sub_40E300+B9↑j
.text:0040E3BE                 cmp     [ebp+20h], ebx
.text:0040E3C1                 jle     short loc_40E3C6
.text:0040E3C3                 mov     [ebp+20h], ebx
.text:0040E3C6
.text:0040E3C6 loc_40E3C6:                             ; CODE XREF: sub_40E300+C1↑j
.text:0040E3C6                 cmp     dword ptr [ebp+18h], 1
.text:0040E3CA                 jz      loc_40EDA0
.text:0040E3D0
.text:0040E3D0 loc_40E3D0:                             ; CODE XREF: sub_40E300+B13↓j
.text:0040E3D0                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040E3D4                 jz      loc_40ED84
.text:0040E3DA                 cld
.text:0040E3DB                 mov     ecx, [esp+5Ch+arg_4]
.text:0040E3DF                 mov     edx, 3
.text:0040E3E4                 mov     edi, offset dword_40E0B0
.text:0040E3E9                 mov     esi, [ecx+ebx*4]
.text:0040E3EC                 mov     ecx, edx
.text:0040E3EE                 repe cmpsb
.text:0040E3F0                 jnz     short loc_40E42C
.text:0040E3F2                 mov     edx, [ebp+24h]
.text:0040E3F5                 lea     eax, [ebx+1]
.text:0040E3F8                 cmp     [ebp+20h], edx
.text:0040E3FB                 mov     [ebp+0], eax
.text:0040E3FE                 jz      loc_40ED98
.text:0040E404                 cmp     edx, eax
.text:0040E406                 jz      short loc_40E420
.text:0040E408                 mov     [esp+5Ch+Str2], ebp
.text:0040E40C                 mov     ebx, [esp+5Ch+arg_4]
.text:0040E410                 mov     [esp+5Ch+Str1], ebx
.text:0040E413                 call    sub_40EFB0
.text:0040E418                 nop
.text:0040E419                 lea     esi, [esi+0]
.text:0040E420
.text:0040E420 loc_40E420:                             ; CODE XREF: sub_40E300+106↑j
.text:0040E420                                         ; sub_40E300+A9B↓j
.text:0040E420                 mov     eax, [esp+5Ch+arg_0]
.text:0040E424                 mov     ebx, eax
.text:0040E426                 mov     [ebp+24h], eax
.text:0040E429                 mov     [ebp+0], eax
.text:0040E42C
.text:0040E42C loc_40E42C:                             ; CODE XREF: sub_40E300+F0↑j
.text:0040E42C                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040E430                 jz      loc_40ED84
.text:0040E436                 mov     esi, [esp+5Ch+arg_4]
.text:0040E43A                 mov     eax, [esi+ebx*4]
.text:0040E43D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040E440                 jz      short loc_40E467
.text:0040E442
.text:0040E442 loc_40E442:                             ; CODE XREF: sub_40E300+16D↓j
.text:0040E442                 mov     edx, [ebp+18h]
.text:0040E445                 test    edx, edx
.text:0040E447                 jz      short loc_40E460
.text:0040E449                 mov     [ebp+0Ch], eax
.text:0040E44C                 lea     edi, [ebx+1]
.text:0040E44F                 mov     eax, 1
.text:0040E454                 mov     [ebp+0], edi
.text:0040E457
.text:0040E457 loc_40E457:                             ; CODE XREF: sub_40E300+2D↑j
.text:0040E457                                         ; sub_40E300+165↓j ...
.text:0040E457                 add     esp, 4Ch
.text:0040E45A                 pop     ebx
.text:0040E45B                 pop     esi
.text:0040E45C                 pop     edi
.text:0040E45D                 pop     ebp
.text:0040E45E                 retn
.text:0040E45E ; ---------------------------------------------------------------------------
.text:0040E45F                 align 10h
.text:0040E460
.text:0040E460 loc_40E460:                             ; CODE XREF: sub_40E300+147↑j
.text:0040E460                                         ; sub_40E300+A8A↓j ...
.text:0040E460                 mov     eax, 0FFFFFFFFh
.text:0040E465                 jmp     short loc_40E457
.text:0040E467 ; ---------------------------------------------------------------------------
.text:0040E467
.text:0040E467 loc_40E467:                             ; CODE XREF: sub_40E300+140↑j
.text:0040E467                 movzx   edx, byte ptr [eax+1]
.text:0040E46B                 test    dl, dl
.text:0040E46D                 jz      short loc_40E442
.text:0040E46F                 mov     ebx, [esp+5Ch+arg_C]
.text:0040E473                 xor     ecx, ecx
.text:0040E475                 test    ebx, ebx
.text:0040E477                 jz      short loc_40E482
.text:0040E479                 cmp     dl, 2Dh ; '-'
.text:0040E47C                 jz      loc_40ED7A
.text:0040E482
.text:0040E482 loc_40E482:                             ; CODE XREF: sub_40E300+177↑j
.text:0040E482                                         ; sub_40E300+A7F↓j
.text:0040E482                 lea     esi, [ecx+eax+1]
.text:0040E486                 mov     [ebp+14h], esi
.text:0040E489                 lea     esi, [esi+0]
.text:0040E490
.text:0040E490 loc_40E490:                             ; CODE XREF: sub_40E300+AD↑j
.text:0040E490                 mov     ecx, [esp+5Ch+arg_C]
.text:0040E494                 test    ecx, ecx
.text:0040E496                 jz      loc_40E820
.text:0040E49C                 mov     edx, [ebp+0]
.text:0040E49F                 mov     edi, [esp+5Ch+arg_4]
.text:0040E4A3                 mov     eax, [edi+edx*4]
.text:0040E4A6                 movzx   edx, byte ptr [eax+1]
.text:0040E4AA                 cmp     dl, 2Dh ; '-'
.text:0040E4AD                 jz      short loc_40E4C5
.text:0040E4AF                 mov     ebx, [esp+5Ch+arg_14]
.text:0040E4B3                 test    ebx, ebx
.text:0040E4B5                 jz      loc_40E820
.text:0040E4BB                 cmp     byte ptr [eax+2], 0
.text:0040E4BF                 jz      loc_40ED5A
.text:0040E4C5
.text:0040E4C5 loc_40E4C5:                             ; CODE XREF: sub_40E300+1AD↑j
.text:0040E4C5                                         ; sub_40E300+A75↓j
.text:0040E4C5                 mov     [esp+5Ch+var_18], 0
.text:0040E4CD                 mov     ecx, [ebp+14h]
.text:0040E4D0                 mov     [esp+5Ch+var_1C], 0
.text:0040E4D8                 mov     [esp+5Ch+var_20], 0
.text:0040E4E0                 mov     edi, ecx
.text:0040E4E2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040E4EA                 movzx   eax, byte ptr [ecx]
.text:0040E4ED                 test    al, al
.text:0040E4EF                 jz      short loc_40E50C
.text:0040E4F1                 cmp     al, 3Dh ; '='
.text:0040E4F3                 jz      short loc_40E50C
.text:0040E4F5                 lea     esi, [esi+0]
.text:0040E4F9                 lea     edi, [edi+0]
.text:0040E500
.text:0040E500 loc_40E500:                             ; CODE XREF: sub_40E300+20A↓j
.text:0040E500                 inc     edi
.text:0040E501                 movzx   eax, byte ptr [edi]
.text:0040E504                 test    al, al
.text:0040E506                 jz      short loc_40E50C
.text:0040E508                 cmp     al, 3Dh ; '='
.text:0040E50A                 jnz     short loc_40E500
.text:0040E50C
.text:0040E50C loc_40E50C:                             ; CODE XREF: sub_40E300+1EF↑j
.text:0040E50C                                         ; sub_40E300+1F3↑j ...
.text:0040E50C                 mov     [esp+5Ch+var_28], 0
.text:0040E514                 mov     esi, [esp+5Ch+arg_C]
.text:0040E518                 mov     ebx, [esi]
.text:0040E51A                 test    ebx, ebx
.text:0040E51C                 mov     edx, ebx
.text:0040E51E                 jz      loc_40E740
.text:0040E524                 lea     esi, [esi+0]
.text:0040E52A                 lea     edi, [edi+0]
.text:0040E530
.text:0040E530 loc_40E530:                             ; CODE XREF: sub_40E300+25E↓j
.text:0040E530                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:0040E534                 mov     ebx, edi
.text:0040E536                 sub     ebx, ecx
.text:0040E538                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040E53C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040E53F                 call    strncmp
.text:0040E544                 test    eax, eax
.text:0040E546                 jz      loc_40ECD6
.text:0040E54C
.text:0040E54C loc_40E54C:                             ; CODE XREF: sub_40E300+A0F↓j
.text:0040E54C                                         ; sub_40E300+A24↓j ...
.text:0040E54C                 inc     [esp+5Ch+var_28]
.text:0040E550                 add     esi, 10h
.text:0040E553                 mov     ecx, [esi]
.text:0040E555                 test    ecx, ecx
.text:0040E557                 mov     edx, ecx
.text:0040E559                 jz      short loc_40E560
.text:0040E55B                 mov     ecx, [ebp+14h]
.text:0040E55E                 jmp     short loc_40E530
.text:0040E560 ; ---------------------------------------------------------------------------
.text:0040E560
.text:0040E560 loc_40E560:                             ; CODE XREF: sub_40E300+259↑j
.text:0040E560                                         ; sub_40E300+A55↓j
.text:0040E560                 mov     esi, [esp+5Ch+var_20]
.text:0040E564                 test    esi, esi
.text:0040E566                 jz      short loc_40E574
.text:0040E568                 mov     edx, [esp+5Ch+var_1C]
.text:0040E56C                 test    edx, edx
.text:0040E56E                 jz      loc_40EC80
.text:0040E574
.text:0040E574 loc_40E574:                             ; CODE XREF: sub_40E300+266↑j
.text:0040E574                 mov     eax, [esp+5Ch+var_18]
.text:0040E578                 test    eax, eax
.text:0040E57A                 jz      loc_40E740
.text:0040E580                 mov     ecx, [ebp+0]
.text:0040E583                 lea     eax, [ecx+1]
.text:0040E586                 mov     [ebp+0], eax
.text:0040E589                 cmp     byte ptr [edi], 0
.text:0040E58C                 jz      loc_40E6A0
.text:0040E592                 mov     ecx, [esp+5Ch+var_18]
.text:0040E596                 mov     esi, [ecx+4]
.text:0040E599                 test    esi, esi
.text:0040E59B                 jz      short loc_40E5E6
.text:0040E59D                 lea     ebx, [edi+1]
.text:0040E5A0                 mov     [ebp+0Ch], ebx
.text:0040E5A3
.text:0040E5A3 loc_40E5A3:                             ; CODE XREF: sub_40E300+3A8↓j
.text:0040E5A3                                         ; sub_40E300+3C4↓j
.text:0040E5A3                 mov     ebx, [ebp+14h]
.text:0040E5A6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:0040E5A9                 call    strlen
.text:0040E5AE                 add     [ebp+14h], eax
.text:0040E5B1                 mov     esi, [esp+5Ch+arg_10]
.text:0040E5B5                 test    esi, esi
.text:0040E5B7                 jz      short loc_40E5C3
.text:0040E5B9                 mov     ebp, [esp+5Ch+var_24]
.text:0040E5BD                 mov     ecx, [esp+5Ch+arg_10]
.text:0040E5C1                 mov     [ecx], ebp
.text:0040E5C3
.text:0040E5C3 loc_40E5C3:                             ; CODE XREF: sub_40E300+2B7↑j
.text:0040E5C3                 mov     eax, [esp+5Ch+var_18]
.text:0040E5C7                 mov     ecx, [eax+8]
.text:0040E5CA                 test    ecx, ecx
.text:0040E5CC                 jnz     short loc_40E5DA
.text:0040E5CE                 mov     ecx, [esp+5Ch+var_18]
.text:0040E5D2
.text:0040E5D2 loc_40E5D2:                             ; CODE XREF: sub_40E300+723↓j
.text:0040E5D2                 mov     eax, [ecx+0Ch]
.text:0040E5D5                 jmp     loc_40E457
.text:0040E5DA ; ---------------------------------------------------------------------------
.text:0040E5DA
.text:0040E5DA loc_40E5DA:                             ; CODE XREF: sub_40E300+2CC↑j
.text:0040E5DA                                         ; sub_40E300+719↓j
.text:0040E5DA                 mov     esi, [eax+0Ch]
.text:0040E5DD                 xor     eax, eax
.text:0040E5DF                 mov     [ecx], esi
.text:0040E5E1                 jmp     loc_40E457
.text:0040E5E6 ; ---------------------------------------------------------------------------
.text:0040E5E6
.text:0040E5E6 loc_40E5E6:                             ; CODE XREF: sub_40E300+29B↑j
.text:0040E5E6                 mov     edi, [esp+5Ch+var_14]
.text:0040E5EA                 test    edi, edi
.text:0040E5EC                 jz      short loc_40E640
.text:0040E5EE                 mov     esi, [esp+5Ch+arg_4]
.text:0040E5F2                 mov     edx, [esi+eax*4-4]
.text:0040E5F6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040E5FA                 jz      short loc_40E662
.text:0040E5FC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:0040E603                 call    ds:libintl_gettext
.text:0040E609                 mov     edx, [esp+5Ch+var_18]
.text:0040E60D                 mov     edi, [edx]
.text:0040E60F                 mov     [esp+5Ch+var_4C], edi
.text:0040E613                 mov     ebx, [ebp+0]
.text:0040E616                 mov     edi, [esp+5Ch+arg_4]
.text:0040E61A                 mov     ecx, [edi+ebx*4-4]
.text:0040E61E                 movsx   esi, byte ptr [ecx]
.text:0040E621                 mov     ecx, ds:_iob
.text:0040E627                 add     ecx, 40h ; '@'
.text:0040E62A                 mov     [esp+5Ch+var_50], esi
.text:0040E62E                 mov     ebx, [edi]
.text:0040E630                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E634                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040E637                 mov     [esp+5Ch+MaxCount], ebx
.text:0040E63B                 call    fprintf
.text:0040E640
.text:0040E640 loc_40E640:                             ; CODE XREF: sub_40E300+2EC↑j
.text:0040E640                                         ; sub_40E300+398↓j
.text:0040E640                 mov     ecx, [ebp+14h]
.text:0040E643                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040E646                 call    strlen
.text:0040E64B                 add     [ebp+14h], eax
.text:0040E64E                 mov     eax, [esp+5Ch+var_18]
.text:0040E652                 mov     esi, [eax+0Ch]
.text:0040E655                 mov     [ebp+8], esi
.text:0040E658
.text:0040E658 loc_40E658:                             ; CODE XREF: sub_40E300+4E5↓j
.text:0040E658                                         ; sub_40E300+73E↓j ...
.text:0040E658                 mov     eax, 3Fh ; '?'
.text:0040E65D                 jmp     loc_40E457
.text:0040E662 ; ---------------------------------------------------------------------------
.text:0040E662
.text:0040E662 loc_40E662:                             ; CODE XREF: sub_40E300+2FA↑j
.text:0040E662                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:0040E669                 call    ds:libintl_gettext
.text:0040E66F                 mov     edx, [esp+5Ch+var_18]
.text:0040E673                 mov     edi, [esp+5Ch+arg_4]
.text:0040E677                 mov     ecx, ds:_iob
.text:0040E67D                 mov     esi, [edx]
.text:0040E67F                 add     ecx, 40h ; '@'
.text:0040E682                 mov     [esp+5Ch+var_50], esi
.text:0040E686                 mov     ebx, [edi]
.text:0040E688                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E68C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040E68F                 mov     [esp+5Ch+MaxCount], ebx
.text:0040E693                 call    fprintf
.text:0040E698                 jmp     short loc_40E640
.text:0040E698 ; ---------------------------------------------------------------------------
.text:0040E69A                 align 10h
.text:0040E6A0
.text:0040E6A0 loc_40E6A0:                             ; CODE XREF: sub_40E300+28C↑j
.text:0040E6A0                 mov     ebx, [esp+5Ch+var_18]
.text:0040E6A4                 cmp     dword ptr [ebx+4], 1
.text:0040E6A8                 jnz     loc_40E5A3
.text:0040E6AE                 cmp     eax, [esp+5Ch+arg_0]
.text:0040E6B2                 jge     short loc_40E6C9
.text:0040E6B4                 mov     ebx, [esp+5Ch+arg_4]
.text:0040E6B8                 lea     edi, [ecx+2]
.text:0040E6BB                 mov     [ebp+0], edi
.text:0040E6BE                 mov     esi, [ebx+eax*4]
.text:0040E6C1                 mov     [ebp+0Ch], esi
.text:0040E6C4                 jmp     loc_40E5A3
.text:0040E6C9 ; ---------------------------------------------------------------------------
.text:0040E6C9
.text:0040E6C9 loc_40E6C9:                             ; CODE XREF: sub_40E300+3B2↑j
.text:0040E6C9                 mov     edx, [esp+5Ch+var_14]
.text:0040E6CD                 test    edx, edx
.text:0040E6CF                 jnz     short loc_40E700
.text:0040E6D1
.text:0040E6D1 loc_40E6D1:                             ; CODE XREF: sub_40E300+437↓j
.text:0040E6D1                 mov     edx, [ebp+14h]
.text:0040E6D4                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040E6D7                 call    strlen
.text:0040E6DC                 add     [ebp+14h], eax
.text:0040E6DF                 mov     eax, [esp+5Ch+var_18]
.text:0040E6E3                 mov     edi, [eax+0Ch]
.text:0040E6E6                 mov     [ebp+8], edi
.text:0040E6E9
.text:0040E6E9 loc_40E6E9:                             ; CODE XREF: sub_40E300+7C2↓j
.text:0040E6E9                 mov     ebp, [esp+5Ch+Str]
.text:0040E6ED                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040E6F1                 setnz   bl
.text:0040E6F4                 movzx   esi, bl
.text:0040E6F7                 lea     eax, [esi+esi*4+3Ah]
.text:0040E6FB                 jmp     loc_40E457
.text:0040E700 ; ---------------------------------------------------------------------------
.text:0040E700
.text:0040E700 loc_40E700:                             ; CODE XREF: sub_40E300+3CF↑j
.text:0040E700                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040E707                 call    ds:libintl_gettext
.text:0040E70D                 mov     ecx, [ebp+0]
.text:0040E710                 mov     esi, [esp+5Ch+arg_4]
.text:0040E714                 mov     ebx, [esi+ecx*4-4]
.text:0040E718                 mov     ecx, ds:_iob
.text:0040E71E                 mov     [esp+5Ch+var_50], ebx
.text:0040E722                 mov     edi, [esi]
.text:0040E724                 add     ecx, 40h ; '@'
.text:0040E727                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E72B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040E72E                 mov     [esp+5Ch+MaxCount], edi
.text:0040E732                 call    fprintf
.text:0040E737                 jmp     short loc_40E6D1
.text:0040E737 ; ---------------------------------------------------------------------------
.text:0040E739                 align 10h
.text:0040E740
.text:0040E740 loc_40E740:                             ; CODE XREF: sub_40E300+21E↑j
.text:0040E740                                         ; sub_40E300+27A↑j
.text:0040E740                 mov     eax, [esp+5Ch+arg_14]
.text:0040E744                 test    eax, eax
.text:0040E746                 jz      short loc_40E776
.text:0040E748                 mov     ebx, [ebp+0]
.text:0040E74B                 mov     esi, [esp+5Ch+arg_4]
.text:0040E74F                 mov     edi, [esi+ebx*4]
.text:0040E752                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040E756                 jz      short loc_40E779
.text:0040E758                 mov     ecx, [ebp+14h]
.text:0040E75B                 mov     edx, [esp+5Ch+Str]
.text:0040E75F                 movsx   ebx, byte ptr [ecx]
.text:0040E762                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040E765                 mov     [esp+5Ch+Str2], ebx ; Val
.text:0040E769                 call    strchr
.text:0040E76E                 test    eax, eax
.text:0040E770                 jnz     loc_40E820
.text:0040E776
.text:0040E776 loc_40E776:                             ; CODE XREF: sub_40E300+446↑j
.text:0040E776                 mov     ebx, [ebp+0]
.text:0040E779
.text:0040E779 loc_40E779:                             ; CODE XREF: sub_40E300+456↑j
.text:0040E779                 mov     eax, [esp+5Ch+var_14]
.text:0040E77D                 test    eax, eax
.text:0040E77F                 jz      short loc_40E7D1
.text:0040E781                 mov     esi, [esp+5Ch+arg_4]
.text:0040E785                 mov     edi, [esi+ebx*4]
.text:0040E788                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040E78C                 jz      short loc_40E7EA
.text:0040E78E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:0040E795                 call    ds:libintl_gettext
.text:0040E79B                 mov     edi, [ebp+14h]
.text:0040E79E                 mov     [esp+5Ch+var_4C], edi
.text:0040E7A2                 mov     ebx, [ebp+0]
.text:0040E7A5                 mov     edi, [esp+5Ch+arg_4]
.text:0040E7A9                 mov     esi, [edi+ebx*4]
.text:0040E7AC                 movsx   ecx, byte ptr [esi]
.text:0040E7AF                 mov     esi, ds:_iob
.text:0040E7B5                 add     esi, 40h ; '@'
.text:0040E7B8                 mov     [esp+5Ch+var_50], ecx
.text:0040E7BC                 mov     ebx, [edi]
.text:0040E7BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E7C2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:0040E7C5                 mov     [esp+5Ch+MaxCount], ebx
.text:0040E7C9                 call    fprintf
.text:0040E7CE
.text:0040E7CE loc_40E7CE:                             ; CODE XREF: sub_40E300+51D↓j
.text:0040E7CE                 mov     ebx, [ebp+0]
.text:0040E7D1
.text:0040E7D1 loc_40E7D1:                             ; CODE XREF: sub_40E300+47F↑j
.text:0040E7D1                 mov     dword ptr [ebp+14h], offset dword_40E1B0
.text:0040E7D8                 lea     edx, [ebx+1]
.text:0040E7DB                 mov     [ebp+0], edx
.text:0040E7DE
.text:0040E7DE loc_40E7DE:                             ; CODE XREF: sub_40E300+999↓j
.text:0040E7DE                 mov     dword ptr [ebp+8], 0
.text:0040E7E5                 jmp     loc_40E658
.text:0040E7EA ; ---------------------------------------------------------------------------
.text:0040E7EA
.text:0040E7EA loc_40E7EA:                             ; CODE XREF: sub_40E300+48C↑j
.text:0040E7EA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:0040E7F1                 call    ds:libintl_gettext
.text:0040E7F7                 mov     ecx, [ebp+14h]
.text:0040E7FA                 mov     edi, [esp+5Ch+arg_4]
.text:0040E7FE                 mov     edx, ds:_iob
.text:0040E804                 mov     [esp+5Ch+var_50], ecx
.text:0040E808                 mov     ebx, [edi]
.text:0040E80A                 add     edx, 40h ; '@'
.text:0040E80D                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E811                 mov     [esp+5Ch+MaxCount], ebx
.text:0040E815                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040E818                 call    fprintf
.text:0040E81D                 jmp     short loc_40E7CE
.text:0040E81D ; ---------------------------------------------------------------------------
.text:0040E81F                 align 10h
.text:0040E820
.text:0040E820 loc_40E820:                             ; CODE XREF: sub_40E300+196↑j
.text:0040E820                                         ; sub_40E300+1B5↑j ...
.text:0040E820                 mov     esi, [ebp+14h]
.text:0040E823                 movzx   ebx, byte ptr [esi]
.text:0040E826                 inc     esi
.text:0040E827                 mov     [ebp+14h], esi
.text:0040E82A                 mov     ecx, [esp+5Ch+Str]
.text:0040E82E                 movsx   esi, bl
.text:0040E831                 mov     [esp+5Ch+Str2], esi ; Val
.text:0040E835                 mov     edi, esi
.text:0040E837                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040E83A                 call    strchr
.text:0040E83F                 mov     ecx, [ebp+14h]
.text:0040E842                 cmp     byte ptr [ecx], 0
.text:0040E845                 jnz     short loc_40E84A
.text:0040E847                 inc     dword ptr [ebp+0]
.text:0040E84A
.text:0040E84A loc_40E84A:                             ; CODE XREF: sub_40E300+545↑j
.text:0040E84A                 test    eax, eax
.text:0040E84C                 jz      loc_40EC30
.text:0040E852                 cmp     bl, 3Ah ; ':'
.text:0040E855                 jz      loc_40EC30
.text:0040E85B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040E85E                 jz      loc_40E916
.text:0040E864                 movzx   edx, byte ptr [eax+1]
.text:0040E868
.text:0040E868 loc_40E868:                             ; CODE XREF: sub_40E300+61D↓j
.text:0040E868                 cmp     dl, 3Ah ; ':'
.text:0040E86B                 jz      short loc_40E874
.text:0040E86D
.text:0040E86D loc_40E86D:                             ; CODE XREF: sub_40E300+590↓j
.text:0040E86D                 mov     eax, esi
.text:0040E86F                 jmp     loc_40E457
.text:0040E874 ; ---------------------------------------------------------------------------
.text:0040E874
.text:0040E874 loc_40E874:                             ; CODE XREF: sub_40E300+56B↑j
.text:0040E874                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:0040E878                 jz      loc_40E901
.text:0040E87E                 cmp     byte ptr [ecx], 0
.text:0040E881                 jz      short loc_40E892
.text:0040E883
.text:0040E883 loc_40E883:                             ; CODE XREF: sub_40E300+604↓j
.text:0040E883                 inc     dword ptr [ebp+0]
.text:0040E886                 mov     [ebp+0Ch], ecx
.text:0040E889
.text:0040E889 loc_40E889:                             ; CODE XREF: sub_40E300+5AB↓j
.text:0040E889                                         ; sub_40E300+5C6↓j ...
.text:0040E889                 mov     dword ptr [ebp+14h], 0
.text:0040E890                 jmp     short loc_40E86D
.text:0040E892 ; ---------------------------------------------------------------------------
.text:0040E892
.text:0040E892 loc_40E892:                             ; CODE XREF: sub_40E300+581↑j
.text:0040E892                 mov     ecx, [ebp+0]
.text:0040E895                 cmp     ecx, [esp+5Ch+arg_0]
.text:0040E899                 jz      short loc_40E8AD
.text:0040E89B                 mov     eax, [esp+5Ch+arg_4]
.text:0040E89F                 lea     edx, [ecx+1]
.text:0040E8A2                 mov     [ebp+0], edx
.text:0040E8A5                 mov     ebx, [eax+ecx*4]
.text:0040E8A8                 mov     [ebp+0Ch], ebx
.text:0040E8AB                 jmp     short loc_40E889
.text:0040E8AD ; ---------------------------------------------------------------------------
.text:0040E8AD
.text:0040E8AD loc_40E8AD:                             ; CODE XREF: sub_40E300+599↑j
.text:0040E8AD                 mov     ecx, [esp+5Ch+var_14]
.text:0040E8B1                 test    ecx, ecx
.text:0040E8B3                 jnz     short loc_40E8CF
.text:0040E8B5
.text:0040E8B5 loc_40E8B5:                             ; CODE XREF: sub_40E300+5FF↓j
.text:0040E8B5                 mov     [ebp+8], edi
.text:0040E8B8                 mov     edi, [esp+5Ch+Str]
.text:0040E8BC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040E8BF                 jz      short loc_40E8C8
.text:0040E8C1                 mov     esi, 3Fh ; '?'
.text:0040E8C6                 jmp     short loc_40E889
.text:0040E8C8 ; ---------------------------------------------------------------------------
.text:0040E8C8
.text:0040E8C8 loc_40E8C8:                             ; CODE XREF: sub_40E300+5BF↑j
.text:0040E8C8                 mov     esi, 3Ah ; ':'
.text:0040E8CD                 jmp     short loc_40E889
.text:0040E8CF ; ---------------------------------------------------------------------------
.text:0040E8CF
.text:0040E8CF loc_40E8CF:                             ; CODE XREF: sub_40E300+5B3↑j
.text:0040E8CF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:0040E8D6                 call    ds:libintl_gettext
.text:0040E8DC                 mov     [esp+5Ch+var_50], edi
.text:0040E8E0                 mov     ebx, [esp+5Ch+arg_4]
.text:0040E8E4                 mov     edx, ds:_iob
.text:0040E8EA                 mov     esi, [ebx]
.text:0040E8EC                 add     edx, 40h ; '@'
.text:0040E8EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040E8F3                 mov     [esp+5Ch+MaxCount], esi
.text:0040E8F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040E8FA                 call    fprintf
.text:0040E8FF                 jmp     short loc_40E8B5
.text:0040E901 ; ---------------------------------------------------------------------------
.text:0040E901
.text:0040E901 loc_40E901:                             ; CODE XREF: sub_40E300+578↑j
.text:0040E901                 cmp     byte ptr [ecx], 0
.text:0040E904                 jnz     loc_40E883
.text:0040E90A                 mov     dword ptr [ebp+0Ch], 0
.text:0040E911                 jmp     loc_40E889
.text:0040E916 ; ---------------------------------------------------------------------------
.text:0040E916
.text:0040E916 loc_40E916:                             ; CODE XREF: sub_40E300+55E↑j
.text:0040E916                 movzx   edx, byte ptr [eax+1]
.text:0040E91A                 cmp     dl, 3Bh ; ';'
.text:0040E91D                 jnz     loc_40E868
.text:0040E923                 mov     [esp+5Ch+var_2C], 0
.text:0040E92B                 mov     [esp+5Ch+var_30], 0
.text:0040E933                 mov     [esp+5Ch+var_34], 0
.text:0040E93B                 mov     [esp+5Ch+var_38], 0
.text:0040E943                 cmp     byte ptr [ecx], 0
.text:0040E946                 jz      loc_40EBBB
.text:0040E94C                 inc     dword ptr [ebp+0]
.text:0040E94F                 mov     [ebp+0Ch], ecx
.text:0040E952
.text:0040E952 loc_40E952:                             ; CODE XREF: sub_40E300+8D4↓j
.text:0040E952                 mov     edi, [ebp+0Ch]
.text:0040E955                 mov     [ebp+14h], edi
.text:0040E958                 movzx   eax, byte ptr [edi]
.text:0040E95B                 test    al, al
.text:0040E95D                 jz      short loc_40E96F
.text:0040E95F                 cmp     al, 3Dh ; '='
.text:0040E961                 jz      short loc_40E96F
.text:0040E963
.text:0040E963 loc_40E963:                             ; CODE XREF: sub_40E300+66D↓j
.text:0040E963                 inc     edi
.text:0040E964                 movzx   eax, byte ptr [edi]
.text:0040E967                 test    al, al
.text:0040E969                 jz      short loc_40E96F
.text:0040E96B                 cmp     al, 3Dh ; '='
.text:0040E96D                 jnz     short loc_40E963
.text:0040E96F
.text:0040E96F loc_40E96F:                             ; CODE XREF: sub_40E300+65D↑j
.text:0040E96F                                         ; sub_40E300+661↑j ...
.text:0040E96F                 mov     [esp+5Ch+var_3C], 0
.text:0040E977                 mov     esi, [esp+5Ch+arg_C]
.text:0040E97B                 mov     eax, [esi]
.text:0040E97D                 test    eax, eax
.text:0040E97F                 jz      loc_40EB00
.text:0040E985                 mov     ecx, eax
.text:0040E987
.text:0040E987 loc_40E987:                             ; CODE XREF: sub_40E300+6B3↓j
.text:0040E987                 mov     ebx, [ebp+14h]
.text:0040E98A                 mov     eax, edi
.text:0040E98C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040E98F                 sub     eax, ebx
.text:0040E991                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:0040E995                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:0040E999                 call    strncmp
.text:0040E99E                 test    eax, eax
.text:0040E9A0                 jz      loc_40EB67
.text:0040E9A6
.text:0040E9A6 loc_40E9A6:                             ; CODE XREF: sub_40E300+88C↓j
.text:0040E9A6                                         ; sub_40E300+89D↓j
.text:0040E9A6                 inc     [esp+5Ch+var_3C]
.text:0040E9AA                 add     esi, 10h
.text:0040E9AD                 mov     edx, [esi]
.text:0040E9AF                 test    edx, edx
.text:0040E9B1                 mov     ecx, edx
.text:0040E9B3                 jnz     short loc_40E987
.text:0040E9B5
.text:0040E9B5 loc_40E9B5:                             ; CODE XREF: sub_40E300+8B6↓j
.text:0040E9B5                 mov     esi, [esp+5Ch+var_34]
.text:0040E9B9                 test    esi, esi
.text:0040E9BB                 jz      short loc_40E9C9
.text:0040E9BD                 mov     ebx, [esp+5Ch+var_30]
.text:0040E9C1                 test    ebx, ebx
.text:0040E9C3                 jz      loc_40EB11
.text:0040E9C9
.text:0040E9C9 loc_40E9C9:                             ; CODE XREF: sub_40E300+6BB↑j
.text:0040E9C9                 mov     esi, [esp+5Ch+var_2C]
.text:0040E9CD                 test    esi, esi
.text:0040E9CF                 jz      loc_40EB00
.text:0040E9D5                 cmp     byte ptr [edi], 0
.text:0040E9D8                 jz      loc_40EA80
.text:0040E9DE                 mov     ecx, [esp+5Ch+var_2C]
.text:0040E9E2                 mov     ebx, [ecx+4]
.text:0040E9E5                 test    ebx, ebx
.text:0040E9E7                 jz      short loc_40EA28
.text:0040E9E9                 lea     edx, [edi+1]
.text:0040E9EC                 mov     [ebp+0Ch], edx
.text:0040E9EF
.text:0040E9EF loc_40E9EF:                             ; CODE XREF: sub_40E300+788↓j
.text:0040E9EF                                         ; sub_40E300+7A7↓j
.text:0040E9EF                 mov     edi, [ebp+14h]
.text:0040E9F2                 mov     [esp+5Ch+Str1], edi ; Str
.text:0040E9F5                 call    strlen
.text:0040E9FA                 add     [ebp+14h], eax
.text:0040E9FD                 mov     eax, [esp+5Ch+arg_10]
.text:0040EA01                 test    eax, eax
.text:0040EA03                 jz      short loc_40EA10
.text:0040EA05                 mov     edx, [esp+5Ch+var_38]
.text:0040EA09                 mov     ebp, [esp+5Ch+arg_10]
.text:0040EA0D                 mov     [ebp+0], edx
.text:0040EA10
.text:0040EA10 loc_40EA10:                             ; CODE XREF: sub_40E300+703↑j
.text:0040EA10                 mov     eax, [esp+5Ch+var_2C]
.text:0040EA14                 mov     ecx, [eax+8]
.text:0040EA17                 test    ecx, ecx
.text:0040EA19                 jnz     loc_40E5DA
.text:0040EA1F                 mov     ecx, [esp+5Ch+var_2C]
.text:0040EA23                 jmp     loc_40E5D2
.text:0040EA28 ; ---------------------------------------------------------------------------
.text:0040EA28
.text:0040EA28 loc_40EA28:                             ; CODE XREF: sub_40E300+6E7↑j
.text:0040EA28                 mov     eax, [esp+5Ch+var_14]
.text:0040EA2C                 test    eax, eax
.text:0040EA2E                 jnz     short loc_40EA43
.text:0040EA30
.text:0040EA30 loc_40EA30:                             ; CODE XREF: sub_40E300+779↓j
.text:0040EA30                 mov     ecx, [ebp+14h]
.text:0040EA33                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040EA36                 call    strlen
.text:0040EA3B                 add     [ebp+14h], eax
.text:0040EA3E                 jmp     loc_40E658
.text:0040EA43 ; ---------------------------------------------------------------------------
.text:0040EA43
.text:0040EA43 loc_40EA43:                             ; CODE XREF: sub_40E300+72E↑j
.text:0040EA43                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040EA4A                 call    ds:libintl_gettext
.text:0040EA50                 mov     edx, [esp+5Ch+var_2C]
.text:0040EA54                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EA58                 mov     edi, [edx]
.text:0040EA5A                 mov     [esp+5Ch+var_50], edi
.text:0040EA5E                 mov     edi, ds:_iob
.text:0040EA64                 mov     esi, [ebx]
.text:0040EA66                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040EA6A                 add     edi, 40h ; '@'
.text:0040EA6D                 mov     [esp+5Ch+MaxCount], esi
.text:0040EA71                 mov     [esp+5Ch+Str1], edi ; Stream
.text:0040EA74                 call    fprintf
.text:0040EA79                 jmp     short loc_40EA30
.text:0040EA79 ; ---------------------------------------------------------------------------
.text:0040EA7B                 align 10h
.text:0040EA80
.text:0040EA80 loc_40EA80:                             ; CODE XREF: sub_40E300+6D8↑j
.text:0040EA80                 mov     esi, [esp+5Ch+var_2C]
.text:0040EA84                 cmp     dword ptr [esi+4], 1
.text:0040EA88                 jnz     loc_40E9EF
.text:0040EA8E                 mov     ecx, [ebp+0]
.text:0040EA91                 cmp     ecx, [esp+5Ch+arg_0]
.text:0040EA95                 jge     short loc_40EAAC
.text:0040EA97                 mov     eax, [esp+5Ch+arg_4]
.text:0040EA9B                 lea     ebx, [ecx+1]
.text:0040EA9E                 mov     [ebp+0], ebx
.text:0040EAA1                 mov     edi, [eax+ecx*4]
.text:0040EAA4                 mov     [ebp+0Ch], edi
.text:0040EAA7                 jmp     loc_40E9EF
.text:0040EAAC ; ---------------------------------------------------------------------------
.text:0040EAAC
.text:0040EAAC loc_40EAAC:                             ; CODE XREF: sub_40E300+795↑j
.text:0040EAAC                 mov     edx, [esp+5Ch+var_14]
.text:0040EAB0                 test    edx, edx
.text:0040EAB2                 jnz     short loc_40EAC7
.text:0040EAB4
.text:0040EAB4 loc_40EAB4:                             ; CODE XREF: sub_40E300+7FE↓j
.text:0040EAB4                 mov     edx, [ebp+14h]
.text:0040EAB7                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040EABA                 call    strlen
.text:0040EABF                 add     [ebp+14h], eax
.text:0040EAC2                 jmp     loc_40E6E9
.text:0040EAC7 ; ---------------------------------------------------------------------------
.text:0040EAC7
.text:0040EAC7 loc_40EAC7:                             ; CODE XREF: sub_40E300+7B2↑j
.text:0040EAC7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040EACE                 call    ds:libintl_gettext
.text:0040EAD4                 mov     ecx, [ebp+0]
.text:0040EAD7                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EADB                 mov     edi, [ebx+ecx*4-4]
.text:0040EADF                 mov     ecx, ds:_iob
.text:0040EAE5                 mov     [esp+5Ch+var_50], edi
.text:0040EAE9                 mov     esi, [ebx]
.text:0040EAEB                 add     ecx, 40h ; '@'
.text:0040EAEE                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040EAF2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040EAF5                 mov     [esp+5Ch+MaxCount], esi
.text:0040EAF9                 call    fprintf
.text:0040EAFE                 jmp     short loc_40EAB4
.text:0040EB00 ; ---------------------------------------------------------------------------
.text:0040EB00
.text:0040EB00 loc_40EB00:                             ; CODE XREF: sub_40E300+67F↑j
.text:0040EB00                                         ; sub_40E300+6CF↑j
.text:0040EB00                 mov     dword ptr [ebp+14h], 0
.text:0040EB07                 mov     eax, 57h ; 'W'
.text:0040EB0C                 jmp     loc_40E457
.text:0040EB11 ; ---------------------------------------------------------------------------
.text:0040EB11
.text:0040EB11 loc_40EB11:                             ; CODE XREF: sub_40E300+6C3↑j
.text:0040EB11                 mov     edi, [esp+5Ch+var_14]
.text:0040EB15                 test    edi, edi
.text:0040EB17                 jnz     short loc_40EB2F
.text:0040EB19
.text:0040EB19 loc_40EB19:                             ; CODE XREF: sub_40E300+865↓j
.text:0040EB19                 mov     edx, [ebp+14h]
.text:0040EB1C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040EB1F                 call    strlen
.text:0040EB24                 add     [ebp+14h], eax
.text:0040EB27                 inc     dword ptr [ebp+0]
.text:0040EB2A                 jmp     loc_40E658
.text:0040EB2F ; ---------------------------------------------------------------------------
.text:0040EB2F
.text:0040EB2F loc_40EB2F:                             ; CODE XREF: sub_40E300+817↑j
.text:0040EB2F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:0040EB36                 call    ds:libintl_gettext
.text:0040EB3C                 mov     ecx, [ebp+0]
.text:0040EB3F                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EB43                 mov     edi, [ebx+ecx*4]
.text:0040EB46                 mov     ecx, ds:_iob
.text:0040EB4C                 mov     [esp+5Ch+var_50], edi
.text:0040EB50                 mov     esi, [ebx]
.text:0040EB52                 add     ecx, 40h ; '@'
.text:0040EB55                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040EB59                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040EB5C                 mov     [esp+5Ch+MaxCount], esi
.text:0040EB60                 call    fprintf
.text:0040EB65                 jmp     short loc_40EB19
.text:0040EB67 ; ---------------------------------------------------------------------------
.text:0040EB67
.text:0040EB67 loc_40EB67:                             ; CODE XREF: sub_40E300+6A0↑j
.text:0040EB67                 mov     edx, [ebp+14h]
.text:0040EB6A                 mov     ebx, edi
.text:0040EB6C                 mov     ecx, [esi]
.text:0040EB6E                 sub     ebx, edx
.text:0040EB70                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040EB73                 call    strlen
.text:0040EB78                 cmp     ebx, eax
.text:0040EB7A                 jz      short loc_40EBA2
.text:0040EB7C                 mov     ebx, [esp+5Ch+var_2C]
.text:0040EB80                 test    ebx, ebx
.text:0040EB82                 jz      short loc_40EB91
.text:0040EB84                 mov     [esp+5Ch+var_34], 1
.text:0040EB8C                 jmp     loc_40E9A6
.text:0040EB91 ; ---------------------------------------------------------------------------
.text:0040EB91
.text:0040EB91 loc_40EB91:                             ; CODE XREF: sub_40E300+882↑j
.text:0040EB91                 mov     [esp+5Ch+var_2C], esi
.text:0040EB95                 mov     ecx, [esp+5Ch+var_3C]
.text:0040EB99                 mov     [esp+5Ch+var_38], ecx
.text:0040EB9D                 jmp     loc_40E9A6
.text:0040EBA2 ; ---------------------------------------------------------------------------
.text:0040EBA2
.text:0040EBA2 loc_40EBA2:                             ; CODE XREF: sub_40E300+87A↑j
.text:0040EBA2                 mov     [esp+5Ch+var_2C], esi
.text:0040EBA6                 mov     eax, [esp+5Ch+var_3C]
.text:0040EBAA                 mov     [esp+5Ch+var_30], 1
.text:0040EBB2                 mov     [esp+5Ch+var_38], eax
.text:0040EBB6                 jmp     loc_40E9B5
.text:0040EBBB ; ---------------------------------------------------------------------------
.text:0040EBBB
.text:0040EBBB loc_40EBBB:                             ; CODE XREF: sub_40E300+646↑j
.text:0040EBBB                 mov     edx, [ebp+0]
.text:0040EBBE                 cmp     edx, [esp+5Ch+arg_0]
.text:0040EBC2                 jz      short loc_40EBD9
.text:0040EBC4                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EBC8                 lea     esi, [edx+1]
.text:0040EBCB                 mov     [ebp+0], esi
.text:0040EBCE                 mov     edi, [ebx+edx*4]
.text:0040EBD1                 mov     [ebp+0Ch], edi
.text:0040EBD4                 jmp     loc_40E952
.text:0040EBD9 ; ---------------------------------------------------------------------------
.text:0040EBD9
.text:0040EBD9 loc_40EBD9:                             ; CODE XREF: sub_40E300+8C2↑j
.text:0040EBD9                 mov     edi, [esp+5Ch+var_14]
.text:0040EBDD                 test    edi, edi
.text:0040EBDF                 jnz     short loc_40EBFC
.text:0040EBE1
.text:0040EBE1 loc_40EBE1:                             ; CODE XREF: sub_40E300+92C↓j
.text:0040EBE1                 mov     [ebp+8], esi
.text:0040EBE4                 mov     ebp, [esp+5Ch+Str]
.text:0040EBE8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040EBEC                 jz      short loc_40EBF8
.text:0040EBEE                 mov     bl, 3Fh ; '?'
.text:0040EBF0
.text:0040EBF0 loc_40EBF0:                             ; CODE XREF: sub_40E300+8FA↓j
.text:0040EBF0                 movsx   eax, bl
.text:0040EBF3                 jmp     loc_40E457
.text:0040EBF8 ; ---------------------------------------------------------------------------
.text:0040EBF8
.text:0040EBF8 loc_40EBF8:                             ; CODE XREF: sub_40E300+8EC↑j
.text:0040EBF8                 mov     bl, 3Ah ; ':'
.text:0040EBFA                 jmp     short loc_40EBF0
.text:0040EBFC ; ---------------------------------------------------------------------------
.text:0040EBFC
.text:0040EBFC loc_40EBFC:                             ; CODE XREF: sub_40E300+8DF↑j
.text:0040EBFC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:0040EC03                 call    ds:libintl_gettext
.text:0040EC09                 mov     [esp+5Ch+var_50], esi
.text:0040EC0D                 mov     edx, [esp+5Ch+arg_4]
.text:0040EC11                 mov     ecx, ds:_iob
.text:0040EC17                 mov     ebx, [edx]
.text:0040EC19                 add     ecx, 40h ; '@'
.text:0040EC1C                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040EC20                 mov     [esp+5Ch+MaxCount], ebx
.text:0040EC24                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040EC27                 call    fprintf
.text:0040EC2C                 jmp     short loc_40EBE1
.text:0040EC2C ; ---------------------------------------------------------------------------
.text:0040EC2E                 align 10h
.text:0040EC30
.text:0040EC30 loc_40EC30:                             ; CODE XREF: sub_40E300+54C↑j
.text:0040EC30                                         ; sub_40E300+555↑j
.text:0040EC30                 mov     eax, [esp+5Ch+var_14]
.text:0040EC34                 test    eax, eax
.text:0040EC36                 jz      short loc_40EC6F
.text:0040EC38                 mov     ebx, [ebp+1Ch]
.text:0040EC3B                 test    ebx, ebx
.text:0040EC3D                 jz      short loc_40EC77
.text:0040EC3F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:0040EC46
.text:0040EC46 loc_40EC46:                             ; CODE XREF: sub_40E300+97E↓j
.text:0040EC46                 call    ds:libintl_gettext
.text:0040EC4C                 mov     [esp+5Ch+var_50], esi
.text:0040EC50                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EC54                 mov     edx, ds:_iob
.text:0040EC5A                 mov     esi, [ebx]
.text:0040EC5C                 add     edx, 40h ; '@'
.text:0040EC5F                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040EC63                 mov     [esp+5Ch+MaxCount], esi
.text:0040EC67                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040EC6A                 call    fprintf
.text:0040EC6F
.text:0040EC6F loc_40EC6F:                             ; CODE XREF: sub_40E300+936↑j
.text:0040EC6F                 mov     [ebp+8], edi
.text:0040EC72                 jmp     loc_40E658
.text:0040EC77 ; ---------------------------------------------------------------------------
.text:0040EC77
.text:0040EC77 loc_40EC77:                             ; CODE XREF: sub_40E300+93D↑j
.text:0040EC77                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040EC7E                 jmp     short loc_40EC46
.text:0040EC80 ; ---------------------------------------------------------------------------
.text:0040EC80
.text:0040EC80 loc_40EC80:                             ; CODE XREF: sub_40E300+26E↑j
.text:0040EC80                 mov     edi, [esp+5Ch+var_14]
.text:0040EC84                 test    edi, edi
.text:0040EC86                 jnz     short loc_40EC9E
.text:0040EC88
.text:0040EC88 loc_40EC88:                             ; CODE XREF: sub_40E300+9D4↓j
.text:0040EC88                 mov     edx, [ebp+14h]
.text:0040EC8B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040EC8E                 call    strlen
.text:0040EC93                 add     [ebp+14h], eax
.text:0040EC96                 inc     dword ptr [ebp+0]
.text:0040EC99                 jmp     loc_40E7DE
.text:0040EC9E ; ---------------------------------------------------------------------------
.text:0040EC9E
.text:0040EC9E loc_40EC9E:                             ; CODE XREF: sub_40E300+986↑j
.text:0040EC9E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:0040ECA5                 call    ds:libintl_gettext
.text:0040ECAB                 mov     ebx, [ebp+0]
.text:0040ECAE                 mov     edi, [esp+5Ch+arg_4]
.text:0040ECB2                 mov     ecx, [edi+ebx*4]
.text:0040ECB5                 mov     ebx, ds:_iob
.text:0040ECBB                 mov     [esp+5Ch+var_50], ecx
.text:0040ECBF                 mov     esi, [edi]
.text:0040ECC1                 add     ebx, 40h ; '@'
.text:0040ECC4                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040ECC8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040ECCB                 mov     [esp+5Ch+MaxCount], esi
.text:0040ECCF                 call    fprintf
.text:0040ECD4                 jmp     short loc_40EC88
.text:0040ECD6 ; ---------------------------------------------------------------------------
.text:0040ECD6
.text:0040ECD6 loc_40ECD6:                             ; CODE XREF: sub_40E300+246↑j
.text:0040ECD6                 mov     ecx, [ebp+14h]
.text:0040ECD9                 mov     ebx, edi
.text:0040ECDB                 mov     edx, [esi]
.text:0040ECDD                 sub     ebx, ecx
.text:0040ECDF                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040ECE2                 call    strlen
.text:0040ECE7                 cmp     ebx, eax
.text:0040ECE9                 jz      short loc_40ED41
.text:0040ECEB                 mov     ebx, [esp+5Ch+var_18]
.text:0040ECEF                 test    ebx, ebx
.text:0040ECF1                 jz      short loc_40ED30
.text:0040ECF3                 mov     edx, [esp+5Ch+arg_14]
.text:0040ECF7                 test    edx, edx
.text:0040ECF9                 jnz     short loc_40ED07
.text:0040ECFB                 mov     ecx, [esp+5Ch+var_18]
.text:0040ECFF                 mov     ebx, [esi+4]
.text:0040ED02                 cmp     [ecx+4], ebx
.text:0040ED05                 jz      short loc_40ED14
.text:0040ED07
.text:0040ED07 loc_40ED07:                             ; CODE XREF: sub_40E300+9F9↑j
.text:0040ED07                                         ; sub_40E300+A1A↓j ...
.text:0040ED07                 mov     [esp+5Ch+var_20], 1
.text:0040ED0F                 jmp     loc_40E54C
.text:0040ED14 ; ---------------------------------------------------------------------------
.text:0040ED14
.text:0040ED14 loc_40ED14:                             ; CODE XREF: sub_40E300+A05↑j
.text:0040ED14                 mov     edx, [esi+8]
.text:0040ED17                 cmp     [ecx+8], edx
.text:0040ED1A                 jnz     short loc_40ED07
.text:0040ED1C                 mov     ebx, [esi+0Ch]
.text:0040ED1F                 cmp     [ecx+0Ch], ebx
.text:0040ED22                 jnz     short loc_40ED07
.text:0040ED24                 jmp     loc_40E54C
.text:0040ED24 ; ---------------------------------------------------------------------------
.text:0040ED29                 align 10h
.text:0040ED30
.text:0040ED30 loc_40ED30:                             ; CODE XREF: sub_40E300+9F1↑j
.text:0040ED30                 mov     [esp+5Ch+var_18], esi
.text:0040ED34                 mov     eax, [esp+5Ch+var_28]
.text:0040ED38                 mov     [esp+5Ch+var_24], eax
.text:0040ED3C                 jmp     loc_40E54C
.text:0040ED41 ; ---------------------------------------------------------------------------
.text:0040ED41
.text:0040ED41 loc_40ED41:                             ; CODE XREF: sub_40E300+9E9↑j
.text:0040ED41                 mov     [esp+5Ch+var_18], esi
.text:0040ED45                 mov     ecx, [esp+5Ch+var_28]
.text:0040ED49                 mov     [esp+5Ch+var_1C], 1
.text:0040ED51                 mov     [esp+5Ch+var_24], ecx
.text:0040ED55                 jmp     loc_40E560
.text:0040ED5A ; ---------------------------------------------------------------------------
.text:0040ED5A
.text:0040ED5A loc_40ED5A:                             ; CODE XREF: sub_40E300+1BF↑j
.text:0040ED5A                 mov     eax, [esp+5Ch+Str]
.text:0040ED5E                 movsx   esi, dl
.text:0040ED61                 mov     [esp+5Ch+Str2], esi ; Val
.text:0040ED65                 mov     [esp+5Ch+Str1], eax ; Str
.text:0040ED68                 call    strchr
.text:0040ED6D                 test    eax, eax
.text:0040ED6F                 jnz     loc_40E820
.text:0040ED75                 jmp     loc_40E4C5
.text:0040ED7A ; ---------------------------------------------------------------------------
.text:0040ED7A
.text:0040ED7A loc_40ED7A:                             ; CODE XREF: sub_40E300+17C↑j
.text:0040ED7A                 mov     ecx, 1
.text:0040ED7F                 jmp     loc_40E482
.text:0040ED84 ; ---------------------------------------------------------------------------
.text:0040ED84
.text:0040ED84 loc_40ED84:                             ; CODE XREF: sub_40E300+D4↑j
.text:0040ED84                                         ; sub_40E300+130↑j
.text:0040ED84                 mov     eax, [ebp+20h]
.text:0040ED87                 cmp     eax, [ebp+24h]
.text:0040ED8A                 jz      loc_40E460
.text:0040ED90                 mov     [ebp+0], eax
.text:0040ED93                 jmp     loc_40E460
.text:0040ED98 ; ---------------------------------------------------------------------------
.text:0040ED98
.text:0040ED98 loc_40ED98:                             ; CODE XREF: sub_40E300+FE↑j
.text:0040ED98                 mov     [ebp+20h], eax
.text:0040ED9B                 jmp     loc_40E420
.text:0040EDA0 ; ---------------------------------------------------------------------------
.text:0040EDA0
.text:0040EDA0 loc_40EDA0:                             ; CODE XREF: sub_40E300+CA↑j
.text:0040EDA0                 mov     edx, [ebp+20h]
.text:0040EDA3                 mov     eax, [ebp+24h]
.text:0040EDA6                 cmp     edx, eax
.text:0040EDA8                 jz      short loc_40EE20
.text:0040EDAA                 cmp     eax, ebx
.text:0040EDAC                 jz      short loc_40EDC1
.text:0040EDAE                 mov     [esp+5Ch+Str2], ebp
.text:0040EDB2                 mov     ebx, [esp+5Ch+arg_4]
.text:0040EDB6                 mov     [esp+5Ch+Str1], ebx
.text:0040EDB9                 call    sub_40EFB0
.text:0040EDBE                 mov     ebx, [ebp+0]
.text:0040EDC1
.text:0040EDC1 loc_40EDC1:                             ; CODE XREF: sub_40E300+AAC↑j
.text:0040EDC1                                         ; sub_40E300+B22↓j ...
.text:0040EDC1                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040EDC5                 jge     short loc_40EE10
.text:0040EDC7                 mov     esi, [esp+5Ch+arg_4]
.text:0040EDCB                 mov     eax, [esi+ebx*4]
.text:0040EDCE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040EDD1                 jz      short loc_40EE18
.text:0040EDD3                 lea     esi, [esi+0]
.text:0040EDD9                 lea     edi, [edi+0]
.text:0040EDE0
.text:0040EDE0 loc_40EDE0:                             ; CODE XREF: sub_40E300+AFC↓j
.text:0040EDE0                                         ; sub_40E300+B1C↓j
.text:0040EDE0                 lea     eax, [ebx+1]
.text:0040EDE3                 mov     ebx, eax
.text:0040EDE5                 mov     [ebp+0], eax
.text:0040EDE8                 cmp     eax, [esp+5Ch+arg_0]
.text:0040EDEC                 jge     short loc_40EE10
.text:0040EDEE                 mov     edi, [esp+5Ch+arg_4]
.text:0040EDF2                 mov     edx, [edi+eax*4]
.text:0040EDF5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:0040EDF8                 jz      short loc_40EE00
.text:0040EDFA
.text:0040EDFA loc_40EDFA:                             ; CODE XREF: sub_40E300+B04↓j
.text:0040EDFA                 mov     ebx, eax
.text:0040EDFC                 jmp     short loc_40EDE0
.text:0040EDFC ; ---------------------------------------------------------------------------
.text:0040EDFE                 align 10h
.text:0040EE00
.text:0040EE00 loc_40EE00:                             ; CODE XREF: sub_40E300+AF8↑j
.text:0040EE00                 cmp     byte ptr [edx+1], 0
.text:0040EE04                 jz      short loc_40EDFA
.text:0040EE06                 lea     esi, [esi+0]
.text:0040EE09                 lea     edi, [edi+0]
.text:0040EE10
.text:0040EE10 loc_40EE10:                             ; CODE XREF: sub_40E300+AC5↑j
.text:0040EE10                                         ; sub_40E300+AEC↑j ...
.text:0040EE10                 mov     [ebp+24h], ebx
.text:0040EE13                 jmp     loc_40E3D0
.text:0040EE18 ; ---------------------------------------------------------------------------
.text:0040EE18
.text:0040EE18 loc_40EE18:                             ; CODE XREF: sub_40E300+AD1↑j
.text:0040EE18                 cmp     byte ptr [eax+1], 0
.text:0040EE1C                 jz      short loc_40EDE0
.text:0040EE1E                 jmp     short loc_40EE10
.text:0040EE20 ; ---------------------------------------------------------------------------
.text:0040EE20
.text:0040EE20 loc_40EE20:                             ; CODE XREF: sub_40E300+AA8↑j
.text:0040EE20                 cmp     edx, ebx
.text:0040EE22                 jz      short loc_40EDC1
.text:0040EE24                 mov     [ebp+20h], ebx
.text:0040EE27                 jmp     short loc_40EDC1
.text:0040EE29 ; ---------------------------------------------------------------------------
.text:0040EE29
.text:0040EE29 loc_40EE29:                             ; CODE XREF: sub_40E300+88↑j
.text:0040EE29                 mov     dword ptr [ebp+18h], 0
.text:0040EE30                 mov     esi, [esp+5Ch+Str]
.text:0040EE34
.text:0040EE34 loc_40EE34:                             ; CODE XREF: sub_40E300+B49↓j
.text:0040EE34                 inc     esi
.text:0040EE35                 jmp     loc_40E398
.text:0040EE35 ; ---------------------------------------------------------------------------
.text:0040EE3A                 align 10h
.text:0040EE40
.text:0040EE40 loc_40EE40:                             ; CODE XREF: sub_40E300+80↑j
.text:0040EE40                 mov     dword ptr [ebp+18h], 2
.text:0040EE47                 mov     esi, ecx
.text:0040EE49                 jmp     short loc_40EE34
.text:0040EE49 ; ---------------------------------------------------------------------------
.text:0040EE4B                 align 10h
.text:0040EE50
.text:0040EE50 loc_40EE50:                             ; CODE XREF: sub_40E300+69↑j
.text:0040EE50                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:0040EE57                 call    getenv
.text:0040EE5C                 test    eax, eax
.text:0040EE5E                 jz      loc_40E374
.text:0040EE64                 jmp     loc_40E36F
.text:0040EE64 ; ---------------------------------------------------------------------------
.text:0040EE69                 align 10h
.text:0040EE70
.text:0040EE70 loc_40EE70:                             ; CODE XREF: sub_40E300+3F↑j
.text:0040EE70                 mov     dword ptr [ebp+0], 1
.text:0040EE77                 mov     ebx, 1
.text:0040EE7C                 jmp     loc_40E350
.text:0040EE7C sub_40E300      endp
.text:0040EE7C
.text:0040EE81 ; ---------------------------------------------------------------------------
.text:0040EE81                 jmp     short sub_40EE90
.text:0040EE81 ; ---------------------------------------------------------------------------
.text:0040EE83                 align 10h
.text:0040EE90
.text:0040EE90 ; =============== S U B R O U T I N E =======================================
.text:0040EE90
.text:0040EE90
.text:0040EE90 ; int __cdecl sub_40EE90(int, int, char *, int, int, int, int)
.text:0040EE90 sub_40EE90      proc near               ; CODE XREF: .text:0040EE81↑j
.text:0040EE90                                         ; sub_40FE10+3A↓p ...
.text:0040EE90
.text:0040EE90 var_2C          = dword ptr -2Ch
.text:0040EE90 var_28          = dword ptr -28h
.text:0040EE90 Str             = dword ptr -24h
.text:0040EE90 var_20          = dword ptr -20h
.text:0040EE90 var_1C          = dword ptr -1Ch
.text:0040EE90 var_18          = dword ptr -18h
.text:0040EE90 var_14          = dword ptr -14h
.text:0040EE90 var_10          = dword ptr -10h
.text:0040EE90 arg_0           = dword ptr  4
.text:0040EE90 arg_4           = dword ptr  8
.text:0040EE90 arg_8           = dword ptr  0Ch
.text:0040EE90 arg_C           = dword ptr  10h
.text:0040EE90 arg_10          = dword ptr  14h
.text:0040EE90 arg_14          = dword ptr  18h
.text:0040EE90 arg_18          = dword ptr  1Ch
.text:0040EE90
.text:0040EE90                 sub     esp, 2Ch
.text:0040EE93                 mov     edx, dword_41A060
.text:0040EE99                 mov     [esp+2Ch+var_10], offset dword_41B7C0 ; int
.text:0040EEA1                 mov     ecx, dword_41A064
.text:0040EEA7                 mov     ds:dword_41B7C0, edx
.text:0040EEAD                 mov     edx, [esp+2Ch+arg_18]
.text:0040EEB1                 mov     ds:dword_41B7C4, ecx
.text:0040EEB7                 mov     ecx, [esp+2Ch+arg_14]
.text:0040EEBB                 mov     [esp+2Ch+var_14], edx ; int
.text:0040EEBF                 mov     edx, [esp+2Ch+arg_10]
.text:0040EEC3                 mov     [esp+2Ch+var_18], ecx ; int
.text:0040EEC7                 mov     ecx, [esp+2Ch+arg_C]
.text:0040EECB                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040EECF                 mov     edx, [esp+2Ch+arg_8]
.text:0040EED3                 mov     [esp+2Ch+var_20], ecx ; int
.text:0040EED7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040EEDB                 mov     [esp+2Ch+Str], edx ; Str
.text:0040EEDF                 mov     edx, [esp+2Ch+arg_0]
.text:0040EEE3                 mov     [esp+2Ch+var_28], ecx ; int
.text:0040EEE7                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040EEEA                 call    sub_40E300
.text:0040EEEF                 mov     ecx, ds:dword_41B7C0
.text:0040EEF5                 mov     dword_41A060, ecx
.text:0040EEFB                 mov     ecx, ds:dword_41B7CC
.text:0040EF01                 mov     ds:dword_41BBD0, ecx
.text:0040EF07                 mov     ecx, ds:dword_41B7C8
.text:0040EF0D                 mov     dword_41A068, ecx
.text:0040EF13                 add     esp, 2Ch
.text:0040EF16                 retn
.text:0040EF16 sub_40EE90      endp
.text:0040EF16
.text:0040EF16 ; ---------------------------------------------------------------------------
.text:0040EF17                 align 10h
.text:0040EF20                 sub     esp, 2Ch
.text:0040EF23                 mov     edx, dword_41A060
.text:0040EF29                 mov     dword ptr [esp+1Ch], offset dword_41B7C0
.text:0040EF31                 mov     ecx, dword_41A064
.text:0040EF37                 mov     dword ptr [esp+18h], 1
.text:0040EF3F                 mov     ds:dword_41B7C0, edx
.text:0040EF45                 mov     edx, [esp+38h]
.text:0040EF49                 mov     ds:dword_41B7C4, ecx
.text:0040EF4F                 mov     ecx, [esp+34h]
.text:0040EF53                 mov     [esp+8], edx
.text:0040EF57                 mov     edx, [esp+30h]
.text:0040EF5B                 mov     [esp+4], ecx
.text:0040EF5F                 mov     dword ptr [esp+14h], 0
.text:0040EF67                 mov     dword ptr [esp+10h], 0
.text:0040EF6F                 mov     dword ptr [esp+0Ch], 0
.text:0040EF77                 mov     [esp], edx
.text:0040EF7A                 call    sub_40E300
.text:0040EF7F                 mov     ecx, ds:dword_41B7C0
.text:0040EF85                 mov     dword_41A060, ecx
.text:0040EF8B                 mov     ecx, ds:dword_41B7CC
.text:0040EF91                 mov     ds:dword_41BBD0, ecx
.text:0040EF97                 mov     ecx, ds:dword_41B7C8
.text:0040EF9D                 mov     dword_41A068, ecx
.text:0040EFA3                 add     esp, 2Ch
.text:0040EFA6                 retn
.text:0040EFA6 ; ---------------------------------------------------------------------------
.text:0040EFA7                 align 10h
.text:0040EFB0
.text:0040EFB0 ; =============== S U B R O U T I N E =======================================
.text:0040EFB0
.text:0040EFB0
.text:0040EFB0 sub_40EFB0      proc near               ; CODE XREF: sub_40E300+113↑p
.text:0040EFB0                                         ; sub_40E300+AB9↑p
.text:0040EFB0
.text:0040EFB0 var_2C          = dword ptr -2Ch
.text:0040EFB0 var_28          = dword ptr -28h
.text:0040EFB0 var_24          = dword ptr -24h
.text:0040EFB0 var_20          = dword ptr -20h
.text:0040EFB0 var_1C          = dword ptr -1Ch
.text:0040EFB0 var_18          = dword ptr -18h
.text:0040EFB0 var_14          = dword ptr -14h
.text:0040EFB0 arg_0           = dword ptr  4
.text:0040EFB0 arg_4           = dword ptr  8
.text:0040EFB0
.text:0040EFB0                 push    ebp
.text:0040EFB1                 push    edi
.text:0040EFB2                 push    esi
.text:0040EFB3                 push    ebx
.text:0040EFB4                 sub     esp, 1Ch
.text:0040EFB7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040EFBB                 mov     eax, [esp+2Ch+arg_4]
.text:0040EFBF                 mov     ebx, [esp+2Ch+arg_4]
.text:0040EFC3                 mov     edx, [ecx+20h]
.text:0040EFC6                 mov     edi, [esp+2Ch+arg_0]
.text:0040EFCA                 mov     ecx, [ebx]
.text:0040EFCC                 mov     [esp+2Ch+var_2C], edx
.text:0040EFCF                 mov     [esp+2Ch+var_14], edx
.text:0040EFD3                 mov     edx, [eax+24h]
.text:0040EFD6                 mov     [esp+2Ch+var_28], ecx
.text:0040EFDA                 mov     [esp+2Ch+var_1C], ecx
.text:0040EFDE                 cmp     ecx, edx
.text:0040EFE0                 mov     [esp+2Ch+var_18], edx
.text:0040EFE4                 jle     short loc_40F060
.text:0040EFE6                 mov     esi, [esp+2Ch+var_2C]
.text:0040EFE9                 cmp     edx, esi
.text:0040EFEB                 jle     short loc_40F060
.text:0040EFED                 lea     esi, [esi+0]
.text:0040EFF0
.text:0040EFF0 loc_40EFF0:                             ; CODE XREF: sub_40EFB0+A1↓j
.text:0040EFF0                 mov     ebx, [esp+2Ch+var_1C]
.text:0040EFF4                 mov     edx, [esp+2Ch+var_18]
.text:0040EFF8                 mov     ebp, [esp+2Ch+var_18]
.text:0040EFFC                 mov     eax, [esp+2Ch+var_14]
.text:0040F000                 sub     ebx, edx
.text:0040F002                 mov     [esp+2Ch+var_20], ebx
.text:0040F006                 sub     ebp, eax
.text:0040F008                 cmp     ebx, ebp
.text:0040F00A                 jle     short loc_40F085
.text:0040F00C                 xor     esi, esi
.text:0040F00E                 cmp     esi, ebp
.text:0040F010                 jge     short loc_40F03D
.text:0040F012                 mov     ecx, [esp+2Ch+var_1C]
.text:0040F016                 sub     ecx, ebp
.text:0040F018                 mov     [esp+2Ch+var_24], ecx
.text:0040F01C                 lea     esi, [esi+0]
.text:0040F020
.text:0040F020 loc_40F020:                             ; CODE XREF: sub_40EFB0+8B↓j
.text:0040F020                 mov     ecx, [esp+2Ch+var_14]
.text:0040F024                 mov     edx, [esp+2Ch+var_24]
.text:0040F028                 add     ecx, esi
.text:0040F02A                 add     edx, esi
.text:0040F02C                 mov     ebx, [edi+ecx*4]
.text:0040F02F                 mov     eax, [edi+edx*4]
.text:0040F032                 inc     esi
.text:0040F033                 cmp     esi, ebp
.text:0040F035                 mov     [edi+ecx*4], eax
.text:0040F038                 mov     [edi+edx*4], ebx
.text:0040F03B                 jl      short loc_40F020
.text:0040F03D
.text:0040F03D loc_40F03D:                             ; CODE XREF: sub_40EFB0+60↑j
.text:0040F03D                 sub     [esp+2Ch+var_1C], ebp
.text:0040F041
.text:0040F041 loc_40F041:                             ; CODE XREF: sub_40EFB0+107↓j
.text:0040F041                 mov     eax, [esp+2Ch+var_18]
.text:0040F045                 cmp     [esp+2Ch+var_1C], eax
.text:0040F049                 jle     short loc_40F060
.text:0040F04B                 mov     ebp, [esp+2Ch+var_14]
.text:0040F04F                 cmp     eax, ebp
.text:0040F051                 jg      short loc_40EFF0
.text:0040F053                 lea     esi, [esi+0]
.text:0040F059                 lea     edi, [edi+0]
.text:0040F060
.text:0040F060 loc_40F060:                             ; CODE XREF: sub_40EFB0+34↑j
.text:0040F060                                         ; sub_40EFB0+3B↑j ...
.text:0040F060                 mov     esi, [esp+2Ch+var_28]
.text:0040F064                 mov     ecx, [esp+2Ch+var_18]
.text:0040F068                 mov     eax, [esp+2Ch+var_2C]
.text:0040F06B                 mov     edi, [esp+2Ch+arg_4]
.text:0040F06F                 mov     edx, [esp+2Ch+var_28]
.text:0040F073                 sub     esi, ecx
.text:0040F075                 add     esi, eax
.text:0040F077                 mov     [edi+20h], esi
.text:0040F07A                 mov     [edi+24h], edx
.text:0040F07D                 add     esp, 1Ch
.text:0040F080                 pop     ebx
.text:0040F081                 pop     esi
.text:0040F082                 pop     edi
.text:0040F083                 pop     ebp
.text:0040F084                 retn
.text:0040F085 ; ---------------------------------------------------------------------------
.text:0040F085
.text:0040F085 loc_40F085:                             ; CODE XREF: sub_40EFB0+5A↑j
.text:0040F085                 xor     esi, esi
.text:0040F087                 cmp     esi, [esp+2Ch+var_20]
.text:0040F08B                 jge     short loc_40F0AF
.text:0040F08D                 lea     esi, [esi+0]
.text:0040F090
.text:0040F090 loc_40F090:                             ; CODE XREF: sub_40EFB0+FD↓j
.text:0040F090                 mov     ebx, [esp+2Ch+var_14]
.text:0040F094                 mov     ebp, [esp+2Ch+var_18]
.text:0040F098                 add     ebx, esi
.text:0040F09A                 add     ebp, esi
.text:0040F09C                 mov     edx, [edi+ebx*4]
.text:0040F09F                 inc     esi
.text:0040F0A0                 cmp     esi, [esp+2Ch+var_20]
.text:0040F0A4                 mov     ecx, [edi+ebp*4]
.text:0040F0A7                 mov     [edi+ebx*4], ecx
.text:0040F0AA                 mov     [edi+ebp*4], edx
.text:0040F0AD                 jl      short loc_40F090
.text:0040F0AF
.text:0040F0AF loc_40F0AF:                             ; CODE XREF: sub_40EFB0+DB↑j
.text:0040F0AF                 mov     esi, [esp+2Ch+var_20]
.text:0040F0B3                 add     [esp+2Ch+var_14], esi
.text:0040F0B7                 jmp     short loc_40F041
.text:0040F0B7 sub_40EFB0      endp
.text:0040F0B7
.text:0040F0B7 ; ---------------------------------------------------------------------------
.text:0040F0B9                 db 17h dup(90h)
.text:0040F0D0 byte_40F0D0     db 0                    ; DATA XREF: sub_405670:loc_405897↑r
.text:0040F0D1                 align 4
.text:0040F0D4                 dd 0Fh dup(0)
.text:0040F110                 db    0
.text:0040F111 aAbcdefghijklmn db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
.text:0040F12C                 dd 0
.text:0040F130                 db    0
.text:0040F131 aAbcdefghijklmn_0 db 'abcdefghijklmnopqrstuvwxyz',0
.text:0040F14C                 dd 11h dup(0)
.text:0040F190 aAaaaaaaceeeeii db 'AAAAAAACEEEEIIII',0
.text:0040F1A1 aNooooo         db 'NOOOOO',0
.text:0040F1A8 aOuuuuy         db 'OUUUUY',0
.text:0040F1AF                 align 10h
.text:0040F1B0 aAaaaaaaceeeeii_0 db 'aaaaaaaceeeeiiii',0
.text:0040F1C1 aNooooo_0       db 'nooooo',0
.text:0040F1C8 aOuuuuy_0       db 'ouuuuy',0
.text:0040F1CF                 db 79h
.text:0040F1D0 byte_40F1D0     db 0                    ; DATA XREF: sub_403B90+1FD↑r
.text:0040F1D0                                         ; sub_405670+33↑r
.text:0040F1D1                 align 4
.text:0040F1D4                 dd 16h dup(0)
.text:0040F22C                 dd 40000h, 3, 6 dup(0)
.text:0040F24C                 dd 60000h, 10h dup(0)
.text:0040F290                 dd 6040203h, 7010805h, 2 dup(5040203h), 2030600h, 50604h
.text:0040F290                 dd 4020309h, 205h, 6040203h, 7010805h, 2 dup(5040203h)
.text:0040F290                 dd 2030600h, 50604h, 4020309h, 205h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0
.text:0040F2D0 ; int __cdecl sub_40F2D0(int, char *)
.text:0040F2D0 sub_40F2D0      proc near               ; CODE XREF: .text:0040DC50↑p
.text:0040F2D0                                         ; sub_40DE20+7A↑p
.text:0040F2D0
.text:0040F2D0 var_C           = dword ptr -0Ch
.text:0040F2D0 var_8           = dword ptr -8
.text:0040F2D0 var_4           = dword ptr -4
.text:0040F2D0 arg_0           = dword ptr  4
.text:0040F2D0 arg_4           = dword ptr  8
.text:0040F2D0
.text:0040F2D0                 sub     esp, 0Ch
.text:0040F2D3                 mov     edx, [esp+0Ch+arg_4]
.text:0040F2D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040F2DF                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040F2E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040F2E7                 mov     [esp+0Ch+var_C], edx ; int
.text:0040F2EA                 call    sub_406900
.text:0040F2EF                 add     esp, 0Ch
.text:0040F2F2                 retn
.text:0040F2F2 sub_40F2D0      endp
.text:0040F2F2
.text:0040F2F2 ; ---------------------------------------------------------------------------
.text:0040F2F3                 align 10h
.text:0040F300
.text:0040F300 ; =============== S U B R O U T I N E =======================================
.text:0040F300
.text:0040F300
.text:0040F300 ; int __cdecl sub_40F300(char *)
.text:0040F300 sub_40F300      proc near               ; CODE XREF: sub_402010+968↑p
.text:0040F300
.text:0040F300 var_C           = dword ptr -0Ch
.text:0040F300 var_8           = dword ptr -8
.text:0040F300 var_4           = dword ptr -4
.text:0040F300 arg_0           = dword ptr  4
.text:0040F300
.text:0040F300                 sub     esp, 0Ch
.text:0040F303                 mov     edx, [esp+0Ch+arg_0]
.text:0040F307                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040F30F                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040F316                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040F31A                 call    sub_406900
.text:0040F31F                 add     esp, 0Ch
.text:0040F322                 retn
.text:0040F322 sub_40F300      endp
.text:0040F322
.text:0040F322 ; ---------------------------------------------------------------------------
.text:0040F323                 align 10h
.text:0040F330 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040F330                                         ; DATA XREF: .data:off_41A070↓o
.text:0040F362 ; const char aSSS[]
.text:0040F362 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40F620+50↓o
.text:0040F36E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040F36E                                         ; DATA XREF: sub_40F620:loc_40F6C1↓o
.text:0040F37E                 db 12h dup(90h)
.text:0040F390 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040F390                                         ; DATA XREF: sub_40F620+100↓o
.text:0040F390                 db 'ere is NO',0Ah
.text:0040F390                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040F390                 db 'R PURPOSE.',0Ah,0
.text:0040F428 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040F428                                         ; DATA XREF: sub_40F620:loc_40F761↓o
.text:0040F43F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040F43F                                         ; DATA XREF: sub_40F620:loc_40F76D↓o
.text:0040F45B                 db 15h dup(90h)
.text:0040F470 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040F470                                         ; DATA XREF: sub_40F620:loc_40F779↓o
.text:0040F470                 db 'and %s.',0Ah,0
.text:0040F490 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040F490                                         ; DATA XREF: sub_40F620:loc_40F785↓o
.text:0040F490                 db '%s, and %s.',0Ah,0
.text:0040F4B4                 db 1Ch dup(90h)
.text:0040F4D0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040F4D0                                         ; DATA XREF: sub_40F620:loc_40F791↓o
.text:0040F4D0                 db '%s, %s, and %s.',0Ah,0
.text:0040F4F8                 db 18h dup(90h)
.text:0040F510 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040F510                                         ; DATA XREF: sub_40F620:loc_40F79D↓o
.text:0040F510                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040F53C                 db 14h dup(90h)
.text:0040F550 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040F550                                         ; DATA XREF: sub_40F620:loc_40F7A9↓o
.text:0040F550                 db '%s, %s, %s, %s,',0Ah
.text:0040F550                 db 'and %s.',0Ah,0
.text:0040F580                 db 10h dup(90h)
.text:0040F590 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040F590                                         ; DATA XREF: sub_40F620:loc_40F7B5↓o
.text:0040F590                 db '%s, %s, %s, %s,',0Ah
.text:0040F590                 db '%s, and %s.',0Ah,0
.text:0040F5C4                 align 10h
.text:0040F5D0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040F5D0                                         ; DATA XREF: sub_40F620:def_40F68D↓o
.text:0040F5D0                 db '%s, %s, %s, %s,',0Ah
.text:0040F5D0                 db '%s, %s, and others.',0Ah,0
.text:0040F60C ; const char aSS[]
.text:0040F60C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_40F620+1B5↓o
.text:0040F613                 align 10h
.text:0040F620
.text:0040F620 ; =============== S U B R O U T I N E =======================================
.text:0040F620
.text:0040F620
.text:0040F620 ; int __cdecl sub_40F620(FILE *, FILE *, int, int, va_list)
.text:0040F620 sub_40F620      proc near               ; CODE XREF: sub_40F7F0+2A↓p
.text:0040F620
.text:0040F620 Stream          = dword ptr -2Ch
.text:0040F620 Format          = dword ptr -28h
.text:0040F620 ArgList         = dword ptr -24h
.text:0040F620 var_20          = dword ptr -20h
.text:0040F620 var_1C          = dword ptr -1Ch
.text:0040F620 var_14          = dword ptr -14h
.text:0040F620 arg_0           = dword ptr  4
.text:0040F620 arg_4           = dword ptr  8
.text:0040F620 arg_8           = dword ptr  0Ch
.text:0040F620 arg_C           = dword ptr  10h
.text:0040F620 arg_10          = dword ptr  14h
.text:0040F620
.text:0040F620                 push    ebp
.text:0040F621                 push    edi
.text:0040F622                 push    esi
.text:0040F623                 push    ebx
.text:0040F624                 sub     esp, 1Ch
.text:0040F627                 xor     ebx, ebx
.text:0040F629                 mov     edi, [esp+2Ch+arg_10]
.text:0040F62D                 mov     edx, [esp+2Ch+arg_8]
.text:0040F631                 mov     esi, [esp+2Ch+arg_0]
.text:0040F635                 mov     eax, [edi]
.text:0040F637                 mov     ecx, [esp+2Ch+arg_4]
.text:0040F63B                 mov     [esp+2Ch+var_14], edx
.text:0040F63F                 mov     ebp, [esp+2Ch+arg_C]
.text:0040F643                 lea     edx, [edi+4]
.text:0040F646                 test    eax, eax
.text:0040F648                 jz      short loc_40F65C
.text:0040F64A                 lea     esi, [esi+0]
.text:0040F650
.text:0040F650 loc_40F650:                             ; CODE XREF: sub_40F620+3A↓j
.text:0040F650                 mov     eax, edx
.text:0040F652                 inc     ebx
.text:0040F653                 mov     eax, [eax]
.text:0040F655                 add     edx, 4
.text:0040F658                 test    eax, eax
.text:0040F65A                 jnz     short loc_40F650
.text:0040F65C
.text:0040F65C loc_40F65C:                             ; CODE XREF: sub_40F620+28↑j
.text:0040F65C                 test    ecx, ecx
.text:0040F65E                 jz      loc_40F7CD
.text:0040F664                 mov     [esp+2Ch+var_1C], ebp
.text:0040F668                 mov     edx, [esp+2Ch+var_14]
.text:0040F66C                 mov     [esp+2Ch+ArgList], ecx
.text:0040F670                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:0040F678                 mov     [esp+2Ch+var_20], edx
.text:0040F67C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040F67F                 call    fprintf
.text:0040F684
.text:0040F684 loc_40F684:                             ; CODE XREF: sub_40F620+1C9↓j
.text:0040F684                 cmp     ebx, 9          ; switch 10 cases
.text:0040F687                 ja      def_40F68D      ; jumptable 0040F68D default case
.text:0040F68D                 jmp     ds:jpt_40F68D[ebx*4] ; switch jump
.text:0040F68D ; ---------------------------------------------------------------------------
.text:0040F694 jpt_40F68D      dd offset loc_40F6BC    ; DATA XREF: sub_40F620+6D↑r
.text:0040F694                 dd offset loc_40F6C1    ; jump table for switch statement
.text:0040F694                 dd offset loc_40F761
.text:0040F694                 dd offset loc_40F76D
.text:0040F694                 dd offset loc_40F779
.text:0040F694                 dd offset loc_40F785
.text:0040F694                 dd offset loc_40F791
.text:0040F694                 dd offset loc_40F79D
.text:0040F694                 dd offset loc_40F7A9
.text:0040F694                 dd offset loc_40F7B5
.text:0040F6BC ; ---------------------------------------------------------------------------
.text:0040F6BC
.text:0040F6BC loc_40F6BC:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F6BC                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F6BC                 call    abort           ; jumptable 0040F68D case 0
.text:0040F6C1 ; ---------------------------------------------------------------------------
.text:0040F6C1
.text:0040F6C1 loc_40F6C1:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F6C1                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F6C1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040F68D case 1
.text:0040F6C8                 nop
.text:0040F6C9                 lea     esi, [esi+0]
.text:0040F6D0
.text:0040F6D0 loc_40F6D0:                             ; CODE XREF: sub_40F620+148↓j
.text:0040F6D0                                         ; sub_40F620+154↓j ...
.text:0040F6D0                 call    ds:libintl_gettext
.text:0040F6D6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040F6DA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040F6DD                 mov     [esp+2Ch+Format], eax ; Format
.text:0040F6E1                 call    vfprintf
.text:0040F6E6                 mov     ebx, [esi+4]
.text:0040F6E9                 dec     ebx
.text:0040F6EA                 test    ebx, ebx
.text:0040F6EC                 mov     [esi+4], ebx
.text:0040F6EF                 js      short loc_40F74F
.text:0040F6F1                 mov     edi, [esi]
.text:0040F6F3                 mov     byte ptr [edi], 0Ah
.text:0040F6F6                 inc     dword ptr [esi]
.text:0040F6F8
.text:0040F6F8 loc_40F6F8:                             ; CODE XREF: sub_40F620+13F↓j
.text:0040F6F8                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040F6FC                 mov     edx, off_41A070 ; "Copyright (C) 2005 Free Software Founda"...
.text:0040F702                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040F705                 call    fputs
.text:0040F70A                 mov     ebp, [esi+4]
.text:0040F70D                 dec     ebp
.text:0040F70E                 test    ebp, ebp
.text:0040F710                 mov     [esi+4], ebp
.text:0040F713                 js      short loc_40F73D
.text:0040F715                 mov     ecx, [esi]
.text:0040F717                 mov     byte ptr [ecx], 0Ah
.text:0040F71A                 inc     dword ptr [esi]
.text:0040F71C
.text:0040F71C loc_40F71C:                             ; CODE XREF: sub_40F620+12D↓j
.text:0040F71C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040F720                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040F727                 call    ds:libintl_gettext
.text:0040F72D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040F731                 add     esp, 1Ch
.text:0040F734                 pop     ebx
.text:0040F735                 pop     esi
.text:0040F736                 pop     edi
.text:0040F737                 pop     ebp
.text:0040F738                 jmp     fputs
.text:0040F73D ; ---------------------------------------------------------------------------
.text:0040F73D
.text:0040F73D loc_40F73D:                             ; CODE XREF: sub_40F620+F3↑j
.text:0040F73D                 mov     [esp+2Ch+Format], esi ; File
.text:0040F741                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040F748                 call    _flsbuf
.text:0040F74D                 jmp     short loc_40F71C
.text:0040F74F ; ---------------------------------------------------------------------------
.text:0040F74F
.text:0040F74F loc_40F74F:                             ; CODE XREF: sub_40F620+CF↑j
.text:0040F74F                 mov     [esp+2Ch+Format], esi ; File
.text:0040F753                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040F75A                 call    _flsbuf
.text:0040F75F                 jmp     short loc_40F6F8
.text:0040F761 ; ---------------------------------------------------------------------------
.text:0040F761
.text:0040F761 loc_40F761:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F761                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F761                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040F68D case 2
.text:0040F768                 jmp     loc_40F6D0
.text:0040F76D ; ---------------------------------------------------------------------------
.text:0040F76D
.text:0040F76D loc_40F76D:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F76D                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F76D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040F68D case 3
.text:0040F774                 jmp     loc_40F6D0
.text:0040F779 ; ---------------------------------------------------------------------------
.text:0040F779
.text:0040F779 loc_40F779:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F779                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F779                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040F68D case 4
.text:0040F780                 jmp     loc_40F6D0
.text:0040F785 ; ---------------------------------------------------------------------------
.text:0040F785
.text:0040F785 loc_40F785:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F785                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F785                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040F68D case 5
.text:0040F78C                 jmp     loc_40F6D0
.text:0040F791 ; ---------------------------------------------------------------------------
.text:0040F791
.text:0040F791 loc_40F791:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F791                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F791                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040F68D case 6
.text:0040F798                 jmp     loc_40F6D0
.text:0040F79D ; ---------------------------------------------------------------------------
.text:0040F79D
.text:0040F79D loc_40F79D:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F79D                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F79D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040F68D case 7
.text:0040F7A4                 jmp     loc_40F6D0
.text:0040F7A9 ; ---------------------------------------------------------------------------
.text:0040F7A9
.text:0040F7A9 loc_40F7A9:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F7A9                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F7A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040F68D case 8
.text:0040F7B0                 jmp     loc_40F6D0
.text:0040F7B5 ; ---------------------------------------------------------------------------
.text:0040F7B5
.text:0040F7B5 loc_40F7B5:                             ; CODE XREF: sub_40F620+6D↑j
.text:0040F7B5                                         ; DATA XREF: sub_40F620:jpt_40F68D↑o
.text:0040F7B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040F68D case 9
.text:0040F7BC                 jmp     loc_40F6D0
.text:0040F7C1 ; ---------------------------------------------------------------------------
.text:0040F7C1
.text:0040F7C1 def_40F68D:                             ; CODE XREF: sub_40F620+67↑j
.text:0040F7C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040F68D default case
.text:0040F7C8                 jmp     loc_40F6D0
.text:0040F7CD ; ---------------------------------------------------------------------------
.text:0040F7CD
.text:0040F7CD loc_40F7CD:                             ; CODE XREF: sub_40F620+3E↑j
.text:0040F7CD                 mov     [esp+2Ch+var_20], ebp
.text:0040F7D1                 mov     ecx, [esp+2Ch+var_14]
.text:0040F7D5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040F7DD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040F7E0                 mov     [esp+2Ch+ArgList], ecx
.text:0040F7E4                 call    fprintf
.text:0040F7E9                 jmp     loc_40F684
.text:0040F7E9 sub_40F620      endp
.text:0040F7E9
.text:0040F7E9 ; ---------------------------------------------------------------------------
.text:0040F7EE                 align 10h
.text:0040F7F0
.text:0040F7F0 ; =============== S U B R O U T I N E =======================================
.text:0040F7F0
.text:0040F7F0
.text:0040F7F0 ; int __cdecl sub_40F7F0(FILE *, FILE *, int, int, char)
.text:0040F7F0 sub_40F7F0      proc near               ; CODE XREF: sub_402010+333↑p
.text:0040F7F0
.text:0040F7F0 var_1C          = dword ptr -1Ch
.text:0040F7F0 var_18          = dword ptr -18h
.text:0040F7F0 var_14          = dword ptr -14h
.text:0040F7F0 var_10          = dword ptr -10h
.text:0040F7F0 var_C           = dword ptr -0Ch
.text:0040F7F0 arg_0           = dword ptr  4
.text:0040F7F0 arg_4           = dword ptr  8
.text:0040F7F0 arg_8           = dword ptr  0Ch
.text:0040F7F0 arg_C           = dword ptr  10h
.text:0040F7F0 arg_10          = byte ptr  14h
.text:0040F7F0
.text:0040F7F0                 sub     esp, 1Ch
.text:0040F7F3                 mov     edx, [esp+1Ch+arg_C]
.text:0040F7F7                 lea     ecx, [esp+1Ch+arg_10]
.text:0040F7FB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040F7FF                 mov     ecx, [esp+1Ch+arg_8]
.text:0040F803                 mov     [esp+1Ch+var_10], edx ; int
.text:0040F807                 mov     edx, [esp+1Ch+arg_4]
.text:0040F80B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040F80F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:0040F813                 mov     edx, [esp+1Ch+arg_0]
.text:0040F817                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040F81A                 call    sub_40F620
.text:0040F81F                 add     esp, 1Ch
.text:0040F822                 retn
.text:0040F822 sub_40F7F0      endp
.text:0040F822
.text:0040F822 ; ---------------------------------------------------------------------------
.text:0040F823                 align 10h
.text:0040F830 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:0040F830                                         ; DATA XREF: sub_40F8A0+544↓o
.text:0040F858                 db 18h dup(90h)
.text:0040F870 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:0040F870                                         ; DATA XREF: sub_40F8A0+54C↓o
.text:0040F896                 align 10h
.text:0040F8A0
.text:0040F8A0 ; =============== S U B R O U T I N E =======================================
.text:0040F8A0
.text:0040F8A0
.text:0040F8A0 ; int __cdecl sub_40F8A0(int, int, int, int, char *Str)
.text:0040F8A0 sub_40F8A0      proc near               ; CODE XREF: sub_402010+50E↑p
.text:0040F8A0                                         ; sub_402010+59A↑p
.text:0040F8A0
.text:0040F8A0 C               = dword ptr -3Ch
.text:0040F8A0 Type            = dword ptr -38h
.text:0040F8A0 Radix           = dword ptr -34h
.text:0040F8A0 var_28          = dword ptr -28h
.text:0040F8A0 var_24          = dword ptr -24h
.text:0040F8A0 var_1D          = byte ptr -1Dh
.text:0040F8A0 var_1C          = dword ptr -1Ch
.text:0040F8A0 var_18          = dword ptr -18h
.text:0040F8A0 var_14          = byte ptr -14h
.text:0040F8A0 arg_0           = dword ptr  4
.text:0040F8A0 arg_4           = dword ptr  8
.text:0040F8A0 arg_8           = dword ptr  0Ch
.text:0040F8A0 arg_C           = dword ptr  10h
.text:0040F8A0 Str             = dword ptr  14h
.text:0040F8A0
.text:0040F8A0                 push    ebp
.text:0040F8A1                 push    edi
.text:0040F8A2                 push    esi
.text:0040F8A3                 push    ebx
.text:0040F8A4                 sub     esp, 2Ch
.text:0040F8A7                 mov     ebp, [esp+3Ch+arg_8]
.text:0040F8AB                 mov     [esp+3Ch+var_1C], 0
.text:0040F8B3                 mov     esi, [esp+3Ch+arg_0]
.text:0040F8B7                 cmp     ebp, 24h ; '$'
.text:0040F8BA                 ja      loc_40FDDC
.text:0040F8C0                 mov     edi, [esp+3Ch+arg_4]
.text:0040F8C4                 test    edi, edi
.text:0040F8C6                 jz      loc_40FDD3
.text:0040F8CC
.text:0040F8CC loc_40F8CC:                             ; CODE XREF: sub_40F8A0+537↓j
.text:0040F8CC                 movzx   edx, byte ptr [esi]
.text:0040F8CF                 mov     ebx, esi
.text:0040F8D1                 mov     [esp+3Ch+var_1D], dl
.text:0040F8D5                 lea     esi, [esi+0]
.text:0040F8D9                 lea     edi, [edi+0]
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: sub_40F8A0+70↓j
.text:0040F8E0                 movzx   edx, [esp+3Ch+var_1D]
.text:0040F8E5                 mov     ecx, ds:__mb_cur_max
.text:0040F8EB                 cmp     dword ptr [ecx], 1
.text:0040F8EE                 jz      loc_40FDC0
.text:0040F8F4                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040F8FC                 mov     [esp+3Ch+C], edx ; C
.text:0040F8FF                 call    _isctype
.text:0040F904
.text:0040F904 loc_40F904:                             ; CODE XREF: sub_40F8A0+52E↓j
.text:0040F904                 test    eax, eax
.text:0040F906                 jz      short loc_40F912
.text:0040F908                 inc     ebx
.text:0040F909                 movzx   eax, byte ptr [ebx]
.text:0040F90C                 mov     [esp+3Ch+var_1D], al
.text:0040F910                 jmp     short loc_40F8E0
.text:0040F912 ; ---------------------------------------------------------------------------
.text:0040F912
.text:0040F912 loc_40F912:                             ; CODE XREF: sub_40F8A0+66↑j
.text:0040F912                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:0040F917                 mov     eax, 4
.text:0040F91C                 jz      short loc_40F975
.text:0040F91E                 call    _errno
.text:0040F923                 mov     dword ptr [eax], 0
.text:0040F929                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040F92D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:0040F931                 mov     [esp+3Ch+C], esi ; String
.text:0040F934                 call    strtoul
.text:0040F939                 mov     [esp+3Ch+var_18], eax
.text:0040F93D                 mov     eax, [edi]
.text:0040F93F                 cmp     eax, esi
.text:0040F941                 jz      loc_40FD8C
.text:0040F947                 call    _errno
.text:0040F94C                 mov     ebp, [eax]
.text:0040F94E                 test    ebp, ebp
.text:0040F950                 jnz     loc_40FD6B
.text:0040F956
.text:0040F956 loc_40F956:                             ; CODE XREF: sub_40F8A0+4DD↓j
.text:0040F956                                         ; sub_40F8A0+51A↓j
.text:0040F956                 mov     eax, [esp+3Ch+Str]
.text:0040F95A                 test    eax, eax
.text:0040F95C                 jz      short loc_40F967
.text:0040F95E                 mov     ecx, [edi]
.text:0040F960                 movzx   eax, byte ptr [ecx]
.text:0040F963                 test    al, al
.text:0040F965                 jnz     short loc_40F97D
.text:0040F967
.text:0040F967 loc_40F967:                             ; CODE XREF: sub_40F8A0+BC↑j
.text:0040F967                                         ; sub_40F8A0+26C↓j ...
.text:0040F967                 mov     edx, [esp+3Ch+var_18]
.text:0040F96B                 mov     esi, [esp+3Ch+arg_C]
.text:0040F96F                 mov     eax, [esp+3Ch+var_1C]
.text:0040F973                 mov     [esi], edx
.text:0040F975
.text:0040F975 loc_40F975:                             ; CODE XREF: sub_40F8A0+7C↑j
.text:0040F975                                         ; sub_40F8A0+112↓j ...
.text:0040F975                 add     esp, 2Ch
.text:0040F978                 pop     ebx
.text:0040F979                 pop     esi
.text:0040F97A                 pop     edi
.text:0040F97B                 pop     ebp
.text:0040F97C                 retn
.text:0040F97D ; ---------------------------------------------------------------------------
.text:0040F97D
.text:0040F97D loc_40F97D:                             ; CODE XREF: sub_40F8A0+C5↑j
.text:0040F97D                 mov     [esp+3Ch+var_24], 1
.text:0040F985                 mov     edx, [esp+3Ch+Str]
.text:0040F989                 movsx   esi, al
.text:0040F98C                 mov     [esp+3Ch+Type], esi ; Val
.text:0040F990                 mov     ebx, 400h
.text:0040F995                 mov     [esp+3Ch+C], edx ; Str
.text:0040F998                 call    strchr
.text:0040F99D                 test    eax, eax
.text:0040F99F                 jnz     short loc_40F9B4
.text:0040F9A1
.text:0040F9A1 def_40FA04:                             ; CODE XREF: sub_40F8A0+162↓j
.text:0040F9A1                                         ; sub_40F8A0+164↓j
.text:0040F9A1                                         ; DATA XREF: ...
.text:0040F9A1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 0040FA04 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040F9A5                 mov     ebx, [esp+3Ch+var_18]
.text:0040F9A9                 mov     edi, [esp+3Ch+arg_C]
.text:0040F9AD                 or      eax, 2
.text:0040F9B0                 mov     [edi], ebx
.text:0040F9B2                 jmp     short loc_40F975
.text:0040F9B4 ; ---------------------------------------------------------------------------
.text:0040F9B4
.text:0040F9B4 loc_40F9B4:                             ; CODE XREF: sub_40F8A0+FF↑j
.text:0040F9B4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:0040F9BC                 mov     ebp, [esp+3Ch+Str]
.text:0040F9C0                 mov     [esp+3Ch+C], ebp ; Str
.text:0040F9C3                 call    strchr
.text:0040F9C8                 test    eax, eax
.text:0040F9CA                 jz      loc_40FD60
.text:0040F9D0                 mov     ecx, [edi]
.text:0040F9D2                 mov     [esp+3Ch+var_28], ecx
.text:0040F9D6                 movsx   eax, byte ptr [ecx+1]
.text:0040F9DA                 cmp     eax, 44h ; 'D'
.text:0040F9DD                 jz      loc_40FD29
.text:0040F9E3                 cmp     eax, 44h ; 'D'
.text:0040F9E6                 jg      loc_40FD3B
.text:0040F9EC                 cmp     eax, 42h ; 'B'
.text:0040F9EF                 jz      loc_40FD29
.text:0040F9F5
.text:0040F9F5 loc_40F9F5:                             ; CODE XREF: sub_40F8A0+496↓j
.text:0040F9F5                                         ; sub_40F8A0+49E↓j ...
.text:0040F9F5                 mov     esi, [esp+3Ch+var_28]
.text:0040F9F9                 movsx   eax, byte ptr [esi]
.text:0040F9FC                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040F9FF                 cmp     eax, 35h
.text:0040FA02                 ja      short def_40FA04 ; jumptable 0040FA04 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0040FA04                 jmp     ds:jpt_40FA04[eax*4] ; switch jump
.text:0040FA04 ; ---------------------------------------------------------------------------
.text:0040FA0B                 align 4
.text:0040FA0C jpt_40FA04      dd offset loc_40FB2B, offset def_40FA04, offset def_40FA04
.text:0040FA0C                                         ; DATA XREF: sub_40F8A0+164↑r
.text:0040FA0C                 dd offset loc_40FB3B, offset def_40FA04, offset loc_40FC2C ; jump table for switch statement
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset loc_40FC69, offset def_40FA04, offset loc_40FC9B
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FB75
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset loc_40FCD9, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FBB2
.text:0040FA0C                 dd offset loc_40FBEF, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FAE4
.text:0040FA0C                 dd offset loc_40FAF6, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset loc_40FC2C, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FC69
.text:0040FA0C                 dd offset def_40FA04, offset loc_40FC9B, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset def_40FA04
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FCD9
.text:0040FA0C                 dd offset def_40FA04, offset def_40FA04, offset loc_40FD16
.text:0040FAE4 ; ---------------------------------------------------------------------------
.text:0040FAE4
.text:0040FAE4 loc_40FAE4:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FAE4                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FAE4                 mov     eax, [esp+3Ch+var_18] ; jumptable 0040FA04 case 98
.text:0040FAE8                 cmp     eax, 7FFFFFh
.text:0040FAED                 ja      short loc_40FB1C
.text:0040FAEF                 shl     eax, 9
.text:0040FAF2
.text:0040FAF2 loc_40FAF2:                             ; CODE XREF: sub_40F8A0+299↓j
.text:0040FAF2                                         ; sub_40F8A0+484↓j
.text:0040FAF2                 mov     [esp+3Ch+var_18], eax
.text:0040FAF6
.text:0040FAF6 loc_40FAF6:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FAF6                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FAF6                 xor     eax, eax        ; jumptable 0040FA04 case 99
.text:0040FAF8
.text:0040FAF8 loc_40FAF8:                             ; CODE XREF: sub_40F8A0+289↓j
.text:0040FAF8                                         ; sub_40F8A0+2CA↓j ...
.text:0040FAF8                 or      [esp+3Ch+var_1C], eax
.text:0040FAFC                 mov     ebp, [esp+3Ch+var_28]
.text:0040FB00                 mov     ecx, [esp+3Ch+var_24]
.text:0040FB04                 add     ebp, ecx
.text:0040FB06                 mov     [edi], ebp
.text:0040FB08                 cmp     byte ptr [ebp+0], 0
.text:0040FB0C                 jz      loc_40F967
.text:0040FB12                 or      [esp+3Ch+var_1C], 2
.text:0040FB17                 jmp     loc_40F967
.text:0040FB1C ; ---------------------------------------------------------------------------
.text:0040FB1C
.text:0040FB1C loc_40FB1C:                             ; CODE XREF: sub_40F8A0+24D↑j
.text:0040FB1C                                         ; sub_40F8A0+294↓j ...
.text:0040FB1C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:0040FB24                 mov     eax, 1
.text:0040FB29                 jmp     short loc_40FAF8
.text:0040FB2B ; ---------------------------------------------------------------------------
.text:0040FB2B
.text:0040FB2B loc_40FB2B:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FB2B                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FB2B                 mov     eax, [esp+3Ch+var_18] ; jumptable 0040FA04 case 66
.text:0040FB2F                 cmp     eax, 3FFFFFh
.text:0040FB34                 ja      short loc_40FB1C
.text:0040FB36                 shl     eax, 0Ah
.text:0040FB39                 jmp     short loc_40FAF2
.text:0040FB3B ; ---------------------------------------------------------------------------
.text:0040FB3B
.text:0040FB3B loc_40FB3B:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FB3B                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FB3B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 case 69
.text:0040FB3F                 xor     ebp, ebp
.text:0040FB41                 mov     esi, 5
.text:0040FB46
.text:0040FB46 loc_40FB46:                             ; CODE XREF: sub_40F8A0+2C8↓j
.text:0040FB46                 xor     edx, edx
.text:0040FB48                 mov     eax, 0FFFFFFFFh
.text:0040FB4D                 div     ebx
.text:0040FB4F                 mov     edx, [ecx]
.text:0040FB51                 cmp     eax, edx
.text:0040FB53                 jnb     short loc_40FB6C
.text:0040FB55                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FB5B                 mov     eax, 1
.text:0040FB60
.text:0040FB60 loc_40FB60:                             ; CODE XREF: sub_40F8A0+2D3↓j
.text:0040FB60                 dec     esi
.text:0040FB61                 or      ebp, eax
.text:0040FB63                 cmp     esi, 0FFFFFFFFh
.text:0040FB66                 mov     eax, ebp
.text:0040FB68                 jnz     short loc_40FB46
.text:0040FB6A                 jmp     short loc_40FAF8
.text:0040FB6C ; ---------------------------------------------------------------------------
.text:0040FB6C
.text:0040FB6C loc_40FB6C:                             ; CODE XREF: sub_40F8A0+2B3↑j
.text:0040FB6C                 imul    edx, ebx
.text:0040FB6F                 xor     eax, eax
.text:0040FB71                 mov     [ecx], edx
.text:0040FB73                 jmp     short loc_40FB60
.text:0040FB75 ; ---------------------------------------------------------------------------
.text:0040FB75
.text:0040FB75 loc_40FB75:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FB75                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FB75                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 case 80
.text:0040FB79                 xor     ebp, ebp
.text:0040FB7B                 mov     esi, 4
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: sub_40F8A0+302↓j
.text:0040FB80                 xor     edx, edx
.text:0040FB82                 mov     eax, 0FFFFFFFFh
.text:0040FB87                 div     ebx
.text:0040FB89                 mov     edx, [ecx]
.text:0040FB8B                 cmp     eax, edx
.text:0040FB8D                 jnb     short loc_40FBA9
.text:0040FB8F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FB95                 mov     eax, 1
.text:0040FB9A
.text:0040FB9A loc_40FB9A:                             ; CODE XREF: sub_40F8A0+310↓j
.text:0040FB9A                 dec     esi
.text:0040FB9B                 or      ebp, eax
.text:0040FB9D                 cmp     esi, 0FFFFFFFFh
.text:0040FBA0                 mov     eax, ebp
.text:0040FBA2                 jnz     short loc_40FB80
.text:0040FBA4                 jmp     loc_40FAF8
.text:0040FBA9 ; ---------------------------------------------------------------------------
.text:0040FBA9
.text:0040FBA9 loc_40FBA9:                             ; CODE XREF: sub_40F8A0+2ED↑j
.text:0040FBA9                 imul    edx, ebx
.text:0040FBAC                 xor     eax, eax
.text:0040FBAE                 mov     [ecx], edx
.text:0040FBB0                 jmp     short loc_40FB9A
.text:0040FBB2 ; ---------------------------------------------------------------------------
.text:0040FBB2
.text:0040FBB2 loc_40FBB2:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FBB2                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FBB2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 case 89
.text:0040FBB6                 xor     ebp, ebp
.text:0040FBB8                 mov     esi, 7
.text:0040FBBD
.text:0040FBBD loc_40FBBD:                             ; CODE XREF: sub_40F8A0+33F↓j
.text:0040FBBD                 xor     edx, edx
.text:0040FBBF                 mov     eax, 0FFFFFFFFh
.text:0040FBC4                 div     ebx
.text:0040FBC6                 mov     edx, [ecx]
.text:0040FBC8                 cmp     eax, edx
.text:0040FBCA                 jnb     short loc_40FBE6
.text:0040FBCC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FBD2                 mov     eax, 1
.text:0040FBD7
.text:0040FBD7 loc_40FBD7:                             ; CODE XREF: sub_40F8A0+34D↓j
.text:0040FBD7                 dec     esi
.text:0040FBD8                 or      ebp, eax
.text:0040FBDA                 cmp     esi, 0FFFFFFFFh
.text:0040FBDD                 mov     eax, ebp
.text:0040FBDF                 jnz     short loc_40FBBD
.text:0040FBE1                 jmp     loc_40FAF8
.text:0040FBE6 ; ---------------------------------------------------------------------------
.text:0040FBE6
.text:0040FBE6 loc_40FBE6:                             ; CODE XREF: sub_40F8A0+32A↑j
.text:0040FBE6                 imul    edx, ebx
.text:0040FBE9                 xor     eax, eax
.text:0040FBEB                 mov     [ecx], edx
.text:0040FBED                 jmp     short loc_40FBD7
.text:0040FBEF ; ---------------------------------------------------------------------------
.text:0040FBEF
.text:0040FBEF loc_40FBEF:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FBEF                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FBEF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 case 90
.text:0040FBF3                 xor     ebp, ebp
.text:0040FBF5                 mov     esi, 6
.text:0040FBFA
.text:0040FBFA loc_40FBFA:                             ; CODE XREF: sub_40F8A0+37C↓j
.text:0040FBFA                 xor     edx, edx
.text:0040FBFC                 mov     eax, 0FFFFFFFFh
.text:0040FC01                 div     ebx
.text:0040FC03                 mov     edx, [ecx]
.text:0040FC05                 cmp     eax, edx
.text:0040FC07                 jnb     short loc_40FC23
.text:0040FC09                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FC0F                 mov     eax, 1
.text:0040FC14
.text:0040FC14 loc_40FC14:                             ; CODE XREF: sub_40F8A0+38A↓j
.text:0040FC14                 dec     esi
.text:0040FC15                 or      ebp, eax
.text:0040FC17                 cmp     esi, 0FFFFFFFFh
.text:0040FC1A                 mov     eax, ebp
.text:0040FC1C                 jnz     short loc_40FBFA
.text:0040FC1E                 jmp     loc_40FAF8
.text:0040FC23 ; ---------------------------------------------------------------------------
.text:0040FC23
.text:0040FC23 loc_40FC23:                             ; CODE XREF: sub_40F8A0+367↑j
.text:0040FC23                 imul    edx, ebx
.text:0040FC26                 xor     eax, eax
.text:0040FC28                 mov     [ecx], edx
.text:0040FC2A                 jmp     short loc_40FC14
.text:0040FC2C ; ---------------------------------------------------------------------------
.text:0040FC2C
.text:0040FC2C loc_40FC2C:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FC2C                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FC2C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 cases 71,103
.text:0040FC30                 xor     ebp, ebp
.text:0040FC32                 mov     esi, 2
.text:0040FC37
.text:0040FC37 loc_40FC37:                             ; CODE XREF: sub_40F8A0+3B9↓j
.text:0040FC37                 xor     edx, edx
.text:0040FC39                 mov     eax, 0FFFFFFFFh
.text:0040FC3E                 div     ebx
.text:0040FC40                 mov     edx, [ecx]
.text:0040FC42                 cmp     eax, edx
.text:0040FC44                 jnb     short loc_40FC60
.text:0040FC46                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FC4C                 mov     eax, 1
.text:0040FC51
.text:0040FC51 loc_40FC51:                             ; CODE XREF: sub_40F8A0+3C7↓j
.text:0040FC51                 dec     esi
.text:0040FC52                 or      ebp, eax
.text:0040FC54                 cmp     esi, 0FFFFFFFFh
.text:0040FC57                 mov     eax, ebp
.text:0040FC59                 jnz     short loc_40FC37
.text:0040FC5B                 jmp     loc_40FAF8
.text:0040FC60 ; ---------------------------------------------------------------------------
.text:0040FC60
.text:0040FC60 loc_40FC60:                             ; CODE XREF: sub_40F8A0+3A4↑j
.text:0040FC60                 imul    edx, ebx
.text:0040FC63                 xor     eax, eax
.text:0040FC65                 mov     [ecx], edx
.text:0040FC67                 jmp     short loc_40FC51
.text:0040FC69 ; ---------------------------------------------------------------------------
.text:0040FC69
.text:0040FC69 loc_40FC69:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FC69                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FC69                 xor     edx, edx        ; jumptable 0040FA04 cases 75,107
.text:0040FC6B                 mov     eax, 0FFFFFFFFh
.text:0040FC70                 div     ebx
.text:0040FC72                 mov     edx, [esp+3Ch+var_18]
.text:0040FC76                 cmp     eax, edx
.text:0040FC78                 jnb     short loc_40FC90
.text:0040FC7A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:0040FC82                 mov     edx, 1
.text:0040FC87
.text:0040FC87 loc_40FC87:                             ; CODE XREF: sub_40F8A0+3F9↓j
.text:0040FC87                 xor     eax, eax
.text:0040FC89                 or      eax, edx
.text:0040FC8B                 jmp     loc_40FAF8
.text:0040FC90 ; ---------------------------------------------------------------------------
.text:0040FC90
.text:0040FC90 loc_40FC90:                             ; CODE XREF: sub_40F8A0+3D8↑j
.text:0040FC90                 imul    edx, ebx
.text:0040FC93                 mov     [esp+3Ch+var_18], edx
.text:0040FC97                 xor     edx, edx
.text:0040FC99                 jmp     short loc_40FC87
.text:0040FC9B ; ---------------------------------------------------------------------------
.text:0040FC9B
.text:0040FC9B loc_40FC9B:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FC9B                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FC9B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 cases 77,109
.text:0040FC9F                 xor     ebp, ebp
.text:0040FCA1                 mov     esi, 1
.text:0040FCA6
.text:0040FCA6 loc_40FCA6:                             ; CODE XREF: sub_40F8A0+42E↓j
.text:0040FCA6                 xor     edx, edx
.text:0040FCA8                 mov     eax, 0FFFFFFFFh
.text:0040FCAD                 div     ebx
.text:0040FCAF                 mov     edx, [ecx]
.text:0040FCB1                 cmp     eax, edx
.text:0040FCB3                 jnb     short loc_40FCD0
.text:0040FCB5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FCBB                 mov     eax, 1
.text:0040FCC0
.text:0040FCC0 loc_40FCC0:                             ; CODE XREF: sub_40F8A0+437↓j
.text:0040FCC0                 dec     esi
.text:0040FCC1                 or      ebp, eax
.text:0040FCC3                 cmp     esi, 0FFFFFFFFh
.text:0040FCC6                 mov     eax, ebp
.text:0040FCC8                 jz      loc_40FAF8
.text:0040FCCE                 jmp     short loc_40FCA6
.text:0040FCD0 ; ---------------------------------------------------------------------------
.text:0040FCD0
.text:0040FCD0 loc_40FCD0:                             ; CODE XREF: sub_40F8A0+413↑j
.text:0040FCD0                 imul    edx, ebx
.text:0040FCD3                 xor     eax, eax
.text:0040FCD5                 mov     [ecx], edx
.text:0040FCD7                 jmp     short loc_40FCC0
.text:0040FCD9 ; ---------------------------------------------------------------------------
.text:0040FCD9
.text:0040FCD9 loc_40FCD9:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FCD9                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FCD9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 0040FA04 cases 84,116
.text:0040FCDD                 xor     ebp, ebp
.text:0040FCDF                 mov     esi, 3
.text:0040FCE4
.text:0040FCE4 loc_40FCE4:                             ; CODE XREF: sub_40F8A0+466↓j
.text:0040FCE4                 xor     edx, edx
.text:0040FCE6                 mov     eax, 0FFFFFFFFh
.text:0040FCEB                 div     ebx
.text:0040FCED                 mov     edx, [ecx]
.text:0040FCEF                 cmp     eax, edx
.text:0040FCF1                 jnb     short loc_40FD0D
.text:0040FCF3                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040FCF9                 mov     eax, 1
.text:0040FCFE
.text:0040FCFE loc_40FCFE:                             ; CODE XREF: sub_40F8A0+474↓j
.text:0040FCFE                 dec     esi
.text:0040FCFF                 or      ebp, eax
.text:0040FD01                 cmp     esi, 0FFFFFFFFh
.text:0040FD04                 mov     eax, ebp
.text:0040FD06                 jnz     short loc_40FCE4
.text:0040FD08                 jmp     loc_40FAF8
.text:0040FD0D ; ---------------------------------------------------------------------------
.text:0040FD0D
.text:0040FD0D loc_40FD0D:                             ; CODE XREF: sub_40F8A0+451↑j
.text:0040FD0D                 imul    edx, ebx
.text:0040FD10                 xor     eax, eax
.text:0040FD12                 mov     [ecx], edx
.text:0040FD14                 jmp     short loc_40FCFE
.text:0040FD16 ; ---------------------------------------------------------------------------
.text:0040FD16
.text:0040FD16 loc_40FD16:                             ; CODE XREF: sub_40F8A0+164↑j
.text:0040FD16                                         ; DATA XREF: sub_40F8A0:jpt_40FA04↑o
.text:0040FD16                 mov     eax, [esp+3Ch+var_18] ; jumptable 0040FA04 case 119
.text:0040FD1A                 test    eax, eax
.text:0040FD1C                 js      loc_40FB1C
.text:0040FD22                 add     eax, eax
.text:0040FD24                 jmp     loc_40FAF2
.text:0040FD29 ; ---------------------------------------------------------------------------
.text:0040FD29
.text:0040FD29 loc_40FD29:                             ; CODE XREF: sub_40F8A0+13D↑j
.text:0040FD29                                         ; sub_40F8A0+14F↑j
.text:0040FD29                 mov     [esp+3Ch+var_24], 2
.text:0040FD31                 mov     ebx, 3E8h
.text:0040FD36                 jmp     loc_40F9F5
.text:0040FD3B ; ---------------------------------------------------------------------------
.text:0040FD3B
.text:0040FD3B loc_40FD3B:                             ; CODE XREF: sub_40F8A0+146↑j
.text:0040FD3B                 cmp     eax, 69h ; 'i'
.text:0040FD3E                 jnz     loc_40F9F5
.text:0040FD44                 mov     edx, [esp+3Ch+var_28]
.text:0040FD48                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040FD4C                 jnz     loc_40F9F5
.text:0040FD52                 mov     [esp+3Ch+var_24], 3
.text:0040FD5A                 jmp     loc_40F9F5
.text:0040FD5A ; ---------------------------------------------------------------------------
.text:0040FD5F                 align 10h
.text:0040FD60
.text:0040FD60 loc_40FD60:                             ; CODE XREF: sub_40F8A0+12A↑j
.text:0040FD60                 mov     eax, [edi]
.text:0040FD62                 mov     [esp+3Ch+var_28], eax
.text:0040FD66                 jmp     loc_40F9F5
.text:0040FD6B ; ---------------------------------------------------------------------------
.text:0040FD6B
.text:0040FD6B loc_40FD6B:                             ; CODE XREF: sub_40F8A0+B0↑j
.text:0040FD6B                 call    _errno
.text:0040FD70                 cmp     dword ptr [eax], 22h ; '"'
.text:0040FD73                 jnz     short loc_40FD82
.text:0040FD75                 mov     [esp+3Ch+var_1C], 1
.text:0040FD7D                 jmp     loc_40F956
.text:0040FD82 ; ---------------------------------------------------------------------------
.text:0040FD82
.text:0040FD82 loc_40FD82:                             ; CODE XREF: sub_40F8A0+4D3↑j
.text:0040FD82                                         ; sub_40F8A0+4F2↓j ...
.text:0040FD82                 mov     eax, 4
.text:0040FD87                 jmp     loc_40F975
.text:0040FD8C ; ---------------------------------------------------------------------------
.text:0040FD8C
.text:0040FD8C loc_40FD8C:                             ; CODE XREF: sub_40F8A0+A1↑j
.text:0040FD8C                 mov     edx, [esp+3Ch+Str]
.text:0040FD90                 test    edx, edx
.text:0040FD92                 jz      short loc_40FD82
.text:0040FD94                 movzx   eax, byte ptr [eax]
.text:0040FD97                 test    al, al
.text:0040FD99                 jz      short loc_40FD82
.text:0040FD9B                 mov     ebx, [esp+3Ch+Str]
.text:0040FD9F                 movsx   esi, al
.text:0040FDA2                 mov     [esp+3Ch+Type], esi ; Val
.text:0040FDA6                 mov     [esp+3Ch+C], ebx ; Str
.text:0040FDA9                 call    strchr
.text:0040FDAE                 test    eax, eax
.text:0040FDB0                 jz      short loc_40FD82
.text:0040FDB2                 mov     [esp+3Ch+var_18], 1
.text:0040FDBA                 jmp     loc_40F956
.text:0040FDBA ; ---------------------------------------------------------------------------
.text:0040FDBF                 align 10h
.text:0040FDC0
.text:0040FDC0 loc_40FDC0:                             ; CODE XREF: sub_40F8A0+4E↑j
.text:0040FDC0                 mov     eax, ds:_pctype
.text:0040FDC5                 mov     ecx, [eax]
.text:0040FDC7                 movzx   eax, word ptr [ecx+edx*2]
.text:0040FDCB                 and     eax, 8
.text:0040FDCE                 jmp     loc_40F904
.text:0040FDD3 ; ---------------------------------------------------------------------------
.text:0040FDD3
.text:0040FDD3 loc_40FDD3:                             ; CODE XREF: sub_40F8A0+26↑j
.text:0040FDD3                 lea     edi, [esp+3Ch+var_14]
.text:0040FDD7                 jmp     loc_40F8CC
.text:0040FDDC ; ---------------------------------------------------------------------------
.text:0040FDDC
.text:0040FDDC loc_40FDDC:                             ; CODE XREF: sub_40F8A0+1A↑j
.text:0040FDDC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:0040FDE4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:0040FDEC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0040FDF3                 call    _assert
.text:0040FDF3 sub_40F8A0      endp
.text:0040FDF3
.text:0040FDF3 ; ---------------------------------------------------------------------------
.text:0040FDF8                 db 18h dup(90h)
.text:0040FE10
.text:0040FE10 ; =============== S U B R O U T I N E =======================================
.text:0040FE10
.text:0040FE10
.text:0040FE10 ; int __cdecl sub_40FE10(int, int, char *, int, int)
.text:0040FE10 sub_40FE10      proc near               ; CODE XREF: sub_402010+95↑p
.text:0040FE10
.text:0040FE10 var_1C          = dword ptr -1Ch
.text:0040FE10 var_18          = dword ptr -18h
.text:0040FE10 var_14          = dword ptr -14h
.text:0040FE10 var_10          = dword ptr -10h
.text:0040FE10 var_C           = dword ptr -0Ch
.text:0040FE10 var_8           = dword ptr -8
.text:0040FE10 var_4           = dword ptr -4
.text:0040FE10 arg_0           = dword ptr  4
.text:0040FE10 arg_4           = dword ptr  8
.text:0040FE10 arg_8           = dword ptr  0Ch
.text:0040FE10 arg_C           = dword ptr  10h
.text:0040FE10 arg_10          = dword ptr  14h
.text:0040FE10
.text:0040FE10                 sub     esp, 1Ch
.text:0040FE13                 mov     edx, [esp+1Ch+arg_C]
.text:0040FE17                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040FE1F                 mov     ecx, [esp+1Ch+arg_10]
.text:0040FE23                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040FE2B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040FE2F                 mov     edx, [esp+1Ch+arg_4]
.text:0040FE33                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040FE37                 mov     ecx, [esp+1Ch+arg_8]
.text:0040FE3B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040FE3F                 mov     edx, [esp+1Ch+arg_0]
.text:0040FE43                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040FE47                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040FE4A                 call    sub_40EE90
.text:0040FE4F                 add     esp, 1Ch
.text:0040FE52                 retn
.text:0040FE52 sub_40FE10      endp
.text:0040FE52
.text:0040FE52 ; ---------------------------------------------------------------------------
.text:0040FE53                 align 10h
.text:0040FE60                 sub     esp, 2Ch
.text:0040FE63                 mov     edx, [esp+44h]
.text:0040FE67                 mov     dword ptr [esp+18h], 0
.text:0040FE6F                 mov     ecx, [esp+40h]
.text:0040FE73                 mov     dword ptr [esp+14h], 0
.text:0040FE7B                 mov     [esp+1Ch], edx
.text:0040FE7F                 mov     edx, [esp+3Ch]
.text:0040FE83                 mov     [esp+10h], ecx
.text:0040FE87                 mov     ecx, [esp+38h]
.text:0040FE8B                 mov     [esp+0Ch], edx
.text:0040FE8F                 mov     edx, [esp+34h]
.text:0040FE93                 mov     [esp+8], ecx
.text:0040FE97                 mov     [esp+4], edx
.text:0040FE9B                 mov     edx, [esp+30h]
.text:0040FE9F                 mov     [esp], edx
.text:0040FEA2                 call    sub_40E300
.text:0040FEA7                 add     esp, 2Ch
.text:0040FEAA                 retn
.text:0040FEAA ; ---------------------------------------------------------------------------
.text:0040FEAB                 align 10h
.text:0040FEB0                 sub     esp, 1Ch
.text:0040FEB3                 mov     edx, [esp+2Ch]
.text:0040FEB7                 mov     dword ptr [esp+18h], 0
.text:0040FEBF                 mov     ecx, [esp+30h]
.text:0040FEC3                 mov     dword ptr [esp+14h], 1
.text:0040FECB                 mov     [esp+0Ch], edx
.text:0040FECF                 mov     edx, [esp+24h]
.text:0040FED3                 mov     [esp+10h], ecx
.text:0040FED7                 mov     ecx, [esp+28h]
.text:0040FEDB                 mov     [esp+4], edx
.text:0040FEDF                 mov     edx, [esp+20h]
.text:0040FEE3                 mov     [esp+8], ecx
.text:0040FEE7                 mov     [esp], edx
.text:0040FEEA                 call    sub_40EE90
.text:0040FEEF                 add     esp, 1Ch
.text:0040FEF2                 retn
.text:0040FEF2 ; ---------------------------------------------------------------------------
.text:0040FEF3                 align 10h
.text:0040FF00                 sub     esp, 2Ch
.text:0040FF03                 mov     edx, [esp+44h]
.text:0040FF07                 mov     dword ptr [esp+18h], 0
.text:0040FF0F                 mov     ecx, [esp+40h]
.text:0040FF13                 mov     dword ptr [esp+14h], 1
.text:0040FF1B                 mov     [esp+1Ch], edx
.text:0040FF1F                 mov     edx, [esp+3Ch]
.text:0040FF23                 mov     [esp+10h], ecx
.text:0040FF27                 mov     ecx, [esp+38h]
.text:0040FF2B                 mov     [esp+0Ch], edx
.text:0040FF2F                 mov     edx, [esp+34h]
.text:0040FF33                 mov     [esp+8], ecx
.text:0040FF37                 mov     [esp+4], edx
.text:0040FF3B                 mov     edx, [esp+30h]
.text:0040FF3F                 mov     [esp], edx
.text:0040FF42                 call    sub_40E300
.text:0040FF47                 add     esp, 2Ch
.text:0040FF4A                 retn
.text:0040FF4A ; ---------------------------------------------------------------------------
.text:0040FF4B                 align 10h
.text:0040FF50                 mov     edx, [esp+4]
.text:0040FF54                 mov     ds:dword_41B7F0, edx
.text:0040FF5A                 retn
.text:0040FF5A ; ---------------------------------------------------------------------------
.text:0040FF5B aWriteError     db 'write error',0      ; DATA XREF: sub_40FF80:loc_40FFC9↓o
.text:0040FF67 ; const char aSS_0[]
.text:0040FF67 aSS_0           db '%s: %s',0           ; DATA XREF: sub_40FF80+77↓o
.text:0040FF6E ; const char aS_7[]
.text:0040FF6E aS_7            db '%s',0               ; DATA XREF: sub_40FF80+A0↓o
.text:0040FF71 ; ---------------------------------------------------------------------------
.text:0040FF71                 jmp     short sub_40FF80
.text:0040FF71 ; ---------------------------------------------------------------------------
.text:0040FF73                 align 10h
.text:0040FF80
.text:0040FF80 ; =============== S U B R O U T I N E =======================================
.text:0040FF80
.text:0040FF80
.text:0040FF80 ; void __cdecl sub_40FF80()
.text:0040FF80 sub_40FF80      proc near               ; CODE XREF: .text:0040FF71↑j
.text:0040FF80                                         ; DATA XREF: sub_402010+59↑o
.text:0040FF80
.text:0040FF80 Stream          = dword ptr -2Ch
.text:0040FF80 ErrorMessage    = dword ptr -28h
.text:0040FF80 var_24          = dword ptr -24h
.text:0040FF80 var_20          = byte ptr -20h
.text:0040FF80 var_1C          = dword ptr -1Ch
.text:0040FF80 var_9           = byte ptr -9
.text:0040FF80
.text:0040FF80                 push    esi
.text:0040FF81                 push    ebx
.text:0040FF82                 sub     esp, 24h
.text:0040FF85                 mov     edx, ds:_iob
.text:0040FF8B                 mov     ecx, [edx+2Ch]
.text:0040FF8E                 lea     esi, [edx+20h]
.text:0040FF91                 shr     ecx, 5
.text:0040FF94                 mov     bl, cl
.text:0040FF96                 mov     ecx, [edx+20h]
.text:0040FF99                 and     bl, 1
.text:0040FF9C                 cmp     ecx, [esi+8]
.text:0040FF9F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040FFA2                 setz    [esp+2Ch+var_9]
.text:0040FFA7                 call    fclose
.text:0040FFAC                 test    eax, eax
.text:0040FFAE                 setnz   al
.text:0040FFB1                 test    bl, bl
.text:0040FFB3                 jnz     loc_410043
.text:0040FFB9                 test    al, al
.text:0040FFBB                 jz      short loc_410010
.text:0040FFBD
.text:0040FFBD loc_40FFBD:                             ; CODE XREF: sub_40FF80+CD↓j
.text:0040FFBD                 call    _errno
.text:0040FFC2                 mov     esi, [eax]
.text:0040FFC4
.text:0040FFC4 loc_40FFC4:                             ; CODE XREF: sub_40FF80+C7↓j
.text:0040FFC4                 cmp     esi, 9
.text:0040FFC7                 jz      short loc_410036
.text:0040FFC9
.text:0040FFC9 loc_40FFC9:                             ; CODE XREF: sub_40FF80+B8↓j
.text:0040FFC9                                         ; sub_40FF80+C1↓j
.text:0040FFC9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040FFD0                 call    ds:libintl_gettext
.text:0040FFD6                 mov     ebx, eax
.text:0040FFD8                 mov     eax, ds:dword_41B7F0
.text:0040FFDD                 test    eax, eax
.text:0040FFDF                 jz      short loc_410016
.text:0040FFE1                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040FFE4                 call    sub_406C70
.text:0040FFE9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040FFED                 mov     edx, Code
.text:0040FFF3                 mov     [esp+2Ch+var_1C], ebx
.text:0040FFF7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040FFFF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00410003                 mov     [esp+2Ch+Stream], edx ; Code
.text:00410006                 call    sub_4103E0
.text:0041000B                 nop
.text:0041000C                 lea     esi, [esi+0]
.text:00410010
.text:00410010 loc_410010:                             ; CODE XREF: sub_40FF80+3B↑j
.text:00410010                                         ; sub_40FF80+B4↓j ...
.text:00410010                 add     esp, 24h
.text:00410013                 pop     ebx
.text:00410014                 pop     esi
.text:00410015                 retn
.text:00410016 ; ---------------------------------------------------------------------------
.text:00410016
.text:00410016 loc_410016:                             ; CODE XREF: sub_40FF80+5F↑j
.text:00410016                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0041001A                 mov     ebx, Code
.text:00410020                 mov     [esp+2Ch+var_24], offset aS_7 ; "%s"
.text:00410028                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0041002C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0041002F                 call    sub_4103E0
.text:00410034                 jmp     short loc_410010
.text:00410036 ; ---------------------------------------------------------------------------
.text:00410036
.text:00410036 loc_410036:                             ; CODE XREF: sub_40FF80+47↑j
.text:00410036                 test    bl, bl
.text:00410038                 jnz     short loc_40FFC9
.text:0041003A                 cmp     [esp+2Ch+var_9], 0
.text:0041003F                 jnz     short loc_410010
.text:00410041                 jmp     short loc_40FFC9
.text:00410043 ; ---------------------------------------------------------------------------
.text:00410043
.text:00410043 loc_410043:                             ; CODE XREF: sub_40FF80+33↑j
.text:00410043                 xor     esi, esi
.text:00410045                 test    al, al
.text:00410047                 jz      loc_40FFC4
.text:0041004D                 jmp     loc_40FFBD
.text:0041004D sub_40FF80      endp
.text:0041004D
.text:0041004D ; ---------------------------------------------------------------------------
.text:00410052                 align 10h
.text:00410060 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_410080+3↓o
.text:00410071 ; const char aS_4[]
.text:00410071 aS_4            db '%s',0               ; DATA XREF: sub_410080+10↓o
.text:00410074                 align 10h
.text:00410080
.text:00410080 ; =============== S U B R O U T I N E =======================================
.text:00410080
.text:00410080 ; Attributes: noreturn
.text:00410080
.text:00410080 sub_410080      proc near               ; CODE XREF: sub_403460:loc_403548↑p
.text:00410080                                         ; sub_403550:loc_403B7A↑p ...
.text:00410080
.text:00410080 Code            = dword ptr -1Ch
.text:00410080 ErrorMessage    = dword ptr -18h
.text:00410080 var_14          = dword ptr -14h
.text:00410080 var_10          = byte ptr -10h
.text:00410080
.text:00410080                 sub     esp, 1Ch
.text:00410083                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0041008A                 call    ds:libintl_gettext
.text:00410090                 mov     [esp+1Ch+var_14], offset aS_4 ; "%s"
.text:00410098                 mov     edx, Code
.text:0041009E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004100A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004100AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004100AD                 call    sub_4103E0
.text:004100B2                 call    abort
.text:004100B2 sub_410080      endp
.text:004100B2
.text:004100B2 ; ---------------------------------------------------------------------------
.text:004100B7                 align 10h
.text:004100C0
.text:004100C0 ; =============== S U B R O U T I N E =======================================
.text:004100C0
.text:004100C0
.text:004100C0 sub_4100C0      proc near
.text:004100C0
.text:004100C0 Size            = dword ptr -0Ch
.text:004100C0 var_4           = dword ptr -4
.text:004100C0 arg_0           = dword ptr  4
.text:004100C0 arg_4           = dword ptr  8
.text:004100C0
.text:004100C0                 sub     esp, 0Ch
.text:004100C3                 xor     edx, edx
.text:004100C5                 mov     ecx, [esp+0Ch+arg_4]
.text:004100C9                 mov     [esp+0Ch+var_4], ebx
.text:004100CD                 mov     eax, 0FFFFFFFFh
.text:004100D2                 mov     ebx, [esp+0Ch+arg_0]
.text:004100D6                 div     ecx
.text:004100D8                 cmp     eax, ebx
.text:004100DA                 jb      short loc_4100F9
.text:004100DC                 mov     edx, ebx
.text:004100DE                 imul    edx, ecx
.text:004100E1                 mov     [esp+0Ch+Size], edx ; Size
.text:004100E4                 call    malloc
.text:004100E9                 test    eax, eax
.text:004100EB                 jz      short loc_4100F5
.text:004100ED
.text:004100ED loc_4100ED:                             ; CODE XREF: sub_4100C0+37↓j
.text:004100ED                 mov     ebx, [esp+0Ch+var_4]
.text:004100F1                 add     esp, 0Ch
.text:004100F4                 retn
.text:004100F5 ; ---------------------------------------------------------------------------
.text:004100F5
.text:004100F5 loc_4100F5:                             ; CODE XREF: sub_4100C0+2B↑j
.text:004100F5                 test    ebx, ebx
.text:004100F7                 jz      short loc_4100ED
.text:004100F9
.text:004100F9 loc_4100F9:                             ; CODE XREF: sub_4100C0+1A↑j
.text:004100F9                 call    sub_410080
.text:004100F9 sub_4100C0      endp
.text:004100F9
.text:004100F9 ; ---------------------------------------------------------------------------
.text:004100FE                 align 10h
.text:00410100
.text:00410100 ; =============== S U B R O U T I N E =======================================
.text:00410100
.text:00410100
.text:00410100 ; int __cdecl sub_410100(size_t)
.text:00410100 sub_410100      proc near               ; CODE XREF: sub_402010+637↑p
.text:00410100                                         ; sub_402010+64D↑p ...
.text:00410100
.text:00410100 Size            = dword ptr -0Ch
.text:00410100 var_4           = dword ptr -4
.text:00410100 arg_0           = dword ptr  4
.text:00410100
.text:00410100                 sub     esp, 0Ch
.text:00410103                 mov     [esp+0Ch+var_4], ebx
.text:00410107                 mov     ebx, [esp+0Ch+arg_0]
.text:0041010B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0041010E                 call    malloc
.text:00410113                 test    eax, eax
.text:00410115                 jz      short loc_410120
.text:00410117
.text:00410117 loc_410117:                             ; CODE XREF: sub_410100+22↓j
.text:00410117                 mov     ebx, [esp+0Ch+var_4]
.text:0041011B                 add     esp, 0Ch
.text:0041011E                 retn
.text:0041011E ; ---------------------------------------------------------------------------
.text:0041011F                 align 10h
.text:00410120
.text:00410120 loc_410120:                             ; CODE XREF: sub_410100+15↑j
.text:00410120                 test    ebx, ebx
.text:00410122                 jz      short loc_410117
.text:00410124                 call    sub_410080
.text:00410124 sub_410100      endp
.text:00410124
.text:00410124 ; ---------------------------------------------------------------------------
.text:00410129                 align 10h
.text:00410130                 sub     esp, 1Ch
.text:00410133                 xor     edx, edx
.text:00410135                 mov     eax, 0FFFFFFFFh
.text:0041013A                 mov     [esp+14h], ebx
.text:0041013E                 mov     ecx, [esp+20h]
.text:00410142                 mov     ebx, [esp+28h]
.text:00410146                 mov     [esp+18h], esi
.text:0041014A                 mov     esi, [esp+24h]
.text:0041014E                 div     ebx
.text:00410150                 cmp     eax, esi
.text:00410152                 jb      short loc_410184
.text:00410154                 mov     [esp], ecx
.text:00410157                 mov     edx, esi
.text:00410159                 imul    edx, ebx
.text:0041015C                 mov     [esp+4], edx
.text:00410160                 call    realloc
.text:00410165                 test    eax, eax
.text:00410167                 mov     ecx, eax
.text:00410169                 jz      short loc_410180
.text:0041016B
.text:0041016B loc_41016B:                             ; CODE XREF: .text:00410182↓j
.text:0041016B                 mov     ebx, [esp+14h]
.text:0041016F                 mov     eax, ecx
.text:00410171                 mov     esi, [esp+18h]
.text:00410175                 add     esp, 1Ch
.text:00410178                 retn
.text:00410178 ; ---------------------------------------------------------------------------
.text:00410179                 align 10h
.text:00410180
.text:00410180 loc_410180:                             ; CODE XREF: .text:00410169↑j
.text:00410180                 test    esi, esi
.text:00410182                 jz      short loc_41016B
.text:00410184
.text:00410184 loc_410184:                             ; CODE XREF: .text:00410152↑j
.text:00410184                 call    sub_410080
.text:00410184 ; ---------------------------------------------------------------------------
.text:00410189                 align 10h
.text:00410190
.text:00410190 ; =============== S U B R O U T I N E =======================================
.text:00410190
.text:00410190
.text:00410190 ; int __cdecl sub_410190(void *, size_t)
.text:00410190 sub_410190      proc near               ; CODE XREF: sub_402ED0+1B9↑p
.text:00410190                                         ; sub_402ED0+283↑p ...
.text:00410190
.text:00410190 Block           = dword ptr -0Ch
.text:00410190 Size            = dword ptr -8
.text:00410190 var_4           = dword ptr -4
.text:00410190 arg_0           = dword ptr  4
.text:00410190 arg_4           = dword ptr  8
.text:00410190
.text:00410190                 sub     esp, 0Ch
.text:00410193                 mov     edx, [esp+0Ch+arg_0]
.text:00410197                 mov     [esp+0Ch+var_4], ebx
.text:0041019B                 mov     ebx, [esp+0Ch+arg_4]
.text:0041019F                 mov     [esp+0Ch+Block], edx ; Block
.text:004101A2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004101A6                 call    realloc
.text:004101AB                 test    eax, eax
.text:004101AD                 jz      short loc_4101B7
.text:004101AF
.text:004101AF loc_4101AF:                             ; CODE XREF: sub_410190+29↓j
.text:004101AF                 mov     ebx, [esp+0Ch+var_4]
.text:004101B3                 add     esp, 0Ch
.text:004101B6                 retn
.text:004101B7 ; ---------------------------------------------------------------------------
.text:004101B7
.text:004101B7 loc_4101B7:                             ; CODE XREF: sub_410190+1D↑j
.text:004101B7                 test    ebx, ebx
.text:004101B9                 jz      short loc_4101AF
.text:004101BB                 call    sub_410080
.text:004101BB sub_410190      endp
.text:004101BB
.text:004101C0 ; ---------------------------------------------------------------------------
.text:004101C0                 jmp     sub_410310
.text:004101C0 ; ---------------------------------------------------------------------------
.text:004101C5                 align 10h
.text:004101D0                 sub     esp, 0Ch
.text:004101D3                 mov     edx, [esp+14h]
.text:004101D7                 mov     dword ptr [esp+8], 1
.text:004101DF                 mov     [esp+4], edx
.text:004101E3                 mov     edx, [esp+10h]
.text:004101E7                 mov     [esp], edx
.text:004101EA                 call    sub_410310
.text:004101EF                 add     esp, 0Ch
.text:004101F2                 retn
.text:004101F2 ; ---------------------------------------------------------------------------
.text:004101F3                 align 10h
.text:00410200                 sub     esp, 1Ch
.text:00410203                 mov     [esp+18h], ebx
.text:00410207                 mov     ebx, [esp+20h]
.text:0041020B                 mov     [esp], ebx
.text:0041020E                 call    malloc
.text:00410213                 test    eax, eax
.text:00410215                 jz      short loc_410233
.text:00410217
.text:00410217 loc_410217:                             ; CODE XREF: .text:00410235↓j
.text:00410217                 mov     [esp+8], ebx
.text:0041021B                 mov     dword ptr [esp+4], 0
.text:00410223                 mov     [esp], eax
.text:00410226                 call    memset
.text:0041022B                 mov     ebx, [esp+18h]
.text:0041022F                 add     esp, 1Ch
.text:00410232                 retn
.text:00410233 ; ---------------------------------------------------------------------------
.text:00410233
.text:00410233 loc_410233:                             ; CODE XREF: .text:00410215↑j
.text:00410233                 test    ebx, ebx
.text:00410235                 jz      short loc_410217
.text:00410237                 call    sub_410080
.text:00410237 ; ---------------------------------------------------------------------------
.text:0041023C                 align 10h
.text:00410240                 sub     esp, 0Ch
.text:00410243                 xor     edx, edx
.text:00410245                 mov     ecx, [esp+14h]
.text:00410249                 mov     [esp+8], ebx
.text:0041024D                 mov     eax, 0FFFFFFFFh
.text:00410252                 mov     ebx, [esp+10h]
.text:00410256                 div     ecx
.text:00410258                 cmp     eax, ebx
.text:0041025A                 jb      short loc_410278
.text:0041025C                 mov     [esp+4], ecx
.text:00410260                 mov     [esp], ebx
.text:00410263                 call    calloc
.text:00410268                 test    eax, eax
.text:0041026A                 jz      short loc_410274
.text:0041026C
.text:0041026C loc_41026C:                             ; CODE XREF: .text:00410276↓j
.text:0041026C                 mov     ebx, [esp+8]
.text:00410270                 add     esp, 0Ch
.text:00410273                 retn
.text:00410274 ; ---------------------------------------------------------------------------
.text:00410274
.text:00410274 loc_410274:                             ; CODE XREF: .text:0041026A↑j
.text:00410274                 test    ebx, ebx
.text:00410276                 jz      short loc_41026C
.text:00410278
.text:00410278 loc_410278:                             ; CODE XREF: .text:0041025A↑j
.text:00410278                 call    sub_410080
.text:00410278 ; ---------------------------------------------------------------------------
.text:0041027D                 align 10h
.text:00410280                 sub     esp, 1Ch
.text:00410283                 mov     [esp+18h], ebx
.text:00410287                 mov     ebx, [esp+24h]
.text:0041028B                 mov     [esp], ebx
.text:0041028E                 call    malloc
.text:00410293                 test    eax, eax
.text:00410295                 mov     edx, eax
.text:00410297                 jz      short loc_4102B5
.text:00410299
.text:00410299 loc_410299:                             ; CODE XREF: .text:004102B7↓j
.text:00410299                 mov     [esp+8], ebx
.text:0041029D                 mov     ecx, [esp+20h]
.text:004102A1                 mov     [esp], edx
.text:004102A4                 mov     [esp+4], ecx
.text:004102A8                 call    memcpy
.text:004102AD                 mov     ebx, [esp+18h]
.text:004102B1                 add     esp, 1Ch
.text:004102B4                 retn
.text:004102B5 ; ---------------------------------------------------------------------------
.text:004102B5
.text:004102B5 loc_4102B5:                             ; CODE XREF: .text:00410297↑j
.text:004102B5                 test    ebx, ebx
.text:004102B7                 jz      short loc_410299
.text:004102B9                 call    sub_410080
.text:004102B9 ; ---------------------------------------------------------------------------
.text:004102BE                 align 10h
.text:004102C0                 sub     esp, 1Ch
.text:004102C3                 mov     [esp+18h], esi
.text:004102C7                 mov     esi, [esp+20h]
.text:004102CB                 mov     [esp+14h], ebx
.text:004102CF                 mov     [esp], esi
.text:004102D2                 call    strlen
.text:004102D7                 lea     ebx, [eax+1]
.text:004102DA                 mov     [esp], ebx
.text:004102DD                 call    malloc
.text:004102E2                 test    eax, eax
.text:004102E4                 jz      short loc_410302
.text:004102E6
.text:004102E6 loc_4102E6:                             ; CODE XREF: .text:00410304↓j
.text:004102E6                 mov     [esp+8], ebx
.text:004102EA                 mov     [esp+4], esi
.text:004102EE                 mov     [esp], eax
.text:004102F1                 call    memcpy
.text:004102F6                 mov     ebx, [esp+14h]
.text:004102FA                 mov     esi, [esp+18h]
.text:004102FE                 add     esp, 1Ch
.text:00410301                 retn
.text:00410302 ; ---------------------------------------------------------------------------
.text:00410302
.text:00410302 loc_410302:                             ; CODE XREF: .text:004102E4↑j
.text:00410302                 test    ebx, ebx
.text:00410304                 jz      short loc_4102E6
.text:00410306                 call    sub_410080
.text:00410306 ; ---------------------------------------------------------------------------
.text:0041030B                 align 10h
.text:00410310
.text:00410310 ; =============== S U B R O U T I N E =======================================
.text:00410310
.text:00410310
.text:00410310 ; int __cdecl sub_410310(void *, int, int)
.text:00410310 sub_410310      proc near               ; CODE XREF: .text:004101C0↑j
.text:00410310                                         ; .text:004101EA↑p
.text:00410310
.text:00410310 Block           = dword ptr -1Ch
.text:00410310 Size            = dword ptr -18h
.text:00410310 var_C           = dword ptr -0Ch
.text:00410310 var_8           = dword ptr -8
.text:00410310 var_4           = dword ptr -4
.text:00410310 arg_0           = dword ptr  4
.text:00410310 arg_4           = dword ptr  8
.text:00410310 arg_8           = dword ptr  0Ch
.text:00410310
.text:00410310                 sub     esp, 1Ch
.text:00410313                 mov     [esp+1Ch+var_8], esi
.text:00410317                 mov     esi, [esp+1Ch+arg_0]
.text:0041031B                 mov     [esp+1Ch+var_4], edi
.text:0041031F                 mov     edi, [esp+1Ch+arg_4]
.text:00410323                 test    esi, esi
.text:00410325                 mov     [esp+1Ch+var_C], ebx
.text:00410329                 mov     ecx, [edi]
.text:0041032B                 mov     ebx, [esp+1Ch+arg_8]
.text:0041032F                 jz      short loc_410370
.text:00410331                 xor     edx, edx
.text:00410333                 mov     eax, 7FFFFFFFh
.text:00410338                 div     ebx
.text:0041033A                 cmp     eax, ecx
.text:0041033C                 jb      short loc_410369
.text:0041033E                 add     ecx, ecx
.text:00410340
.text:00410340 loc_410340:                             ; CODE XREF: sub_410310+62↓j
.text:00410340                                         ; sub_410310+71↓j ...
.text:00410340                 mov     [edi], ecx
.text:00410342                 imul    ebx, ecx
.text:00410345                 mov     [esp+1Ch+Block], esi ; Block
.text:00410348                 mov     [esp+1Ch+Size], ebx ; Size
.text:0041034C                 call    realloc
.text:00410351                 test    eax, eax
.text:00410353                 jz      short loc_410365
.text:00410355
.text:00410355 loc_410355:                             ; CODE XREF: sub_410310+57↓j
.text:00410355                 mov     ebx, [esp+1Ch+var_C]
.text:00410359                 mov     esi, [esp+1Ch+var_8]
.text:0041035D                 mov     edi, [esp+1Ch+var_4]
.text:00410361                 add     esp, 1Ch
.text:00410364                 retn
.text:00410365 ; ---------------------------------------------------------------------------
.text:00410365
.text:00410365 loc_410365:                             ; CODE XREF: sub_410310+43↑j
.text:00410365                 test    ebx, ebx
.text:00410367                 jz      short loc_410355
.text:00410369
.text:00410369 loc_410369:                             ; CODE XREF: sub_410310+2C↑j
.text:00410369                 call    sub_410080
.text:00410369 ; ---------------------------------------------------------------------------
.text:0041036E                 align 10h
.text:00410370
.text:00410370 loc_410370:                             ; CODE XREF: sub_410310+1F↑j
.text:00410370                 test    ecx, ecx
.text:00410372                 jnz     short loc_410340
.text:00410374                 xor     edx, edx
.text:00410376                 mov     eax, 40h ; '@'
.text:0041037B                 div     ebx
.text:0041037D                 test    eax, eax
.text:0041037F                 mov     ecx, eax
.text:00410381                 jnz     short loc_410340
.text:00410383                 mov     ecx, 1
.text:00410388                 jmp     short loc_410340
.text:00410388 sub_410310      endp
.text:00410388
.text:00410388 ; ---------------------------------------------------------------------------
.text:0041038A                 align 10h
.text:00410390                 jmp     ds:libintl_bindtextdomain
.text:00410390 ; ---------------------------------------------------------------------------
.text:00410396                 align 10h
.text:004103A0                 jmp     ds:libintl_textdomain
.text:004103A0 ; ---------------------------------------------------------------------------
.text:004103A6                 align 10h
.text:004103B0                 jmp     ds:libintl_gettext
.text:004103B0 ; ---------------------------------------------------------------------------
.text:004103B6                 align 10h
.text:004103C0 ; const char aS_5[]
.text:004103C0 aS_5            db ': %s',0             ; DATA XREF: sub_4103E0+B8↓o
.text:004103C0                                         ; sub_4104E4+122↓o
.text:004103C5 aUnknownSystemE db 'Unknown system error',0
.text:004103C5                                         ; DATA XREF: sub_4103E0:loc_4104AD↓o
.text:004103C5                                         ; sub_4104E4:loc_41061E↓o
.text:004103DA ; const char aS_6[]
.text:004103DA aS_6            db '%s: ',0             ; DATA XREF: sub_4103E0:loc_4104B4↓o
.text:004103DF                 align 10h
.text:004103E0
.text:004103E0 ; =============== S U B R O U T I N E =======================================
.text:004103E0
.text:004103E0
.text:004103E0 ; int __cdecl sub_4103E0(int Code, int ErrorMessage, char *, char)
.text:004103E0 sub_4103E0      proc near               ; CODE XREF: sub_402010+55C↑p
.text:004103E0                                         ; sub_402010+5E8↑p ...
.text:004103E0
.text:004103E0 Stream          = dword ptr -1Ch
.text:004103E0 Format          = dword ptr -18h
.text:004103E0 ArgList         = dword ptr -14h
.text:004103E0 Code            = dword ptr  4
.text:004103E0 ErrorMessage    = dword ptr  8
.text:004103E0 arg_8           = dword ptr  0Ch
.text:004103E0 arg_C           = byte ptr  10h
.text:004103E0
.text:004103E0                 push    esi
.text:004103E1                 push    ebx
.text:004103E2                 sub     esp, 14h
.text:004103E5                 mov     edx, ds:_iob
.text:004103EB                 mov     esi, [esp+1Ch+Code]
.text:004103EF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004103F3                 add     edx, 20h ; ' '
.text:004103F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004103F9                 call    fflush
.text:004103FE                 mov     eax, ds:dword_41BBE0
.text:00410403                 test    eax, eax
.text:00410405                 jz      loc_4104B4
.text:0041040B                 call    eax ; dword_41BBE0
.text:0041040D
.text:0041040D loc_41040D:                             ; CODE XREF: sub_4103E0+F7↓j
.text:0041040D                 lea     edx, [esp+1Ch+arg_C]
.text:00410411                 mov     ecx, [esp+1Ch+arg_8]
.text:00410415                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00410419                 mov     edx, ds:_iob
.text:0041041F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00410423                 add     edx, 40h ; '@'
.text:00410426                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00410429                 call    vfprintf
.text:0041042E                 inc     ds:dword_41BBF0
.text:00410434                 test    ebx, ebx
.text:00410436                 jnz     short loc_410482
.text:00410438
.text:00410438 loc_410438:                             ; CODE XREF: sub_4103E0+CB↓j
.text:00410438                 mov     edx, ds:_iob
.text:0041043E                 lea     ecx, [edx+40h]
.text:00410441                 mov     ebx, [ecx+4]
.text:00410444                 dec     ebx
.text:00410445                 test    ebx, ebx
.text:00410447                 mov     [ecx+4], ebx
.text:0041044A                 js      short loc_410470
.text:0041044C                 mov     ecx, [edx+40h]
.text:0041044F                 mov     byte ptr [ecx], 0Ah
.text:00410452                 inc     dword ptr [edx+40h]
.text:00410455
.text:00410455 loc_410455:                             ; CODE XREF: sub_4103E0+A0↓j
.text:00410455                 mov     edx, ds:_iob
.text:0041045B                 add     edx, 40h ; '@'
.text:0041045E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00410461                 call    fflush
.text:00410466                 test    esi, esi
.text:00410468                 jnz     short loc_4104DC
.text:0041046A                 add     esp, 14h
.text:0041046D                 pop     ebx
.text:0041046E                 pop     esi
.text:0041046F                 retn
.text:00410470 ; ---------------------------------------------------------------------------
.text:00410470
.text:00410470 loc_410470:                             ; CODE XREF: sub_4103E0+6A↑j
.text:00410470                 mov     [esp+1Ch+Format], ecx ; File
.text:00410474                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0041047B                 call    _flsbuf
.text:00410480                 jmp     short loc_410455
.text:00410482 ; ---------------------------------------------------------------------------
.text:00410482
.text:00410482 loc_410482:                             ; CODE XREF: sub_4103E0+56↑j
.text:00410482                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00410485                 call    strerror
.text:0041048A                 test    eax, eax
.text:0041048C                 jz      short loc_4104AD
.text:0041048E
.text:0041048E loc_41048E:                             ; CODE XREF: sub_4103E0+D2↓j
.text:0041048E                 mov     [esp+1Ch+ArgList], eax
.text:00410492                 mov     ebx, ds:_iob
.text:00410498                 mov     [esp+1Ch+Format], offset aS_5 ; ": %s"
.text:004104A0                 add     ebx, 40h ; '@'
.text:004104A3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004104A6                 call    fprintf
.text:004104AB                 jmp     short loc_410438
.text:004104AD ; ---------------------------------------------------------------------------
.text:004104AD
.text:004104AD loc_4104AD:                             ; CODE XREF: sub_4103E0+AC↑j
.text:004104AD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004104B2                 jmp     short loc_41048E
.text:004104B4 ; ---------------------------------------------------------------------------
.text:004104B4
.text:004104B4 loc_4104B4:                             ; CODE XREF: sub_4103E0+25↑j
.text:004104B4                 mov     [esp+1Ch+Format], offset aS_6 ; "%s: "
.text:004104BC                 mov     edx, ds:_iob
.text:004104C2                 mov     ecx, ds:dword_41BBA0
.text:004104C8                 add     edx, 40h ; '@'
.text:004104CB                 mov     [esp+1Ch+ArgList], ecx
.text:004104CF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004104D2                 call    fprintf
.text:004104D7                 jmp     loc_41040D
.text:004104DC ; ---------------------------------------------------------------------------
.text:004104DC
.text:004104DC loc_4104DC:                             ; CODE XREF: sub_4103E0+88↑j
.text:004104DC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004104DF                 call    exit
.text:004104DF sub_4103E0      endp
.text:004104DF
.text:004104E4
.text:004104E4 ; =============== S U B R O U T I N E =======================================
.text:004104E4
.text:004104E4
.text:004104E4 ; int __cdecl sub_4104E4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004104E4 sub_4104E4      proc near               ; DATA XREF: sub_4104E4+77↓o
.text:004104E4
.text:004104E4 Stream          = dword ptr -28h
.text:004104E4 Format          = dword ptr -24h
.text:004104E4 ArgList         = dword ptr -20h
.text:004104E4 var_1C          = dword ptr -1Ch
.text:004104E4 Code            = dword ptr  8
.text:004104E4 ErrorMessage    = dword ptr  0Ch
.text:004104E4 Str2            = dword ptr  10h
.text:004104E4 arg_10          = dword ptr  14h
.text:004104E4 arg_14          = dword ptr  18h
.text:004104E4 arg_18          = byte ptr  1Ch
.text:004104E4
.text:004104E4                 and     eax, 64253A73h
.text:004104E9                 cmp     ah, [eax]
.text:004104EB
.text:004104EB loc_4104EB:                             ; DATA XREF: sub_4104E4:loc_410625↓o
.text:004104EB                 add     ds:55003A73h, ah
.text:004104F1                 push    edi
.text:004104F2                 push    esi
.text:004104F3                 push    ebx
.text:004104F4                 sub     esp, 1Ch
.text:004104F7                 mov     edx, ds:dword_41BC20
.text:004104FD                 mov     ebp, [esp+28h+Code]
.text:00410501                 mov     edi, [esp+28h+ErrorMessage]
.text:00410505                 test    edx, edx
.text:00410507                 mov     ebx, [esp+28h+Str2]
.text:0041050B                 mov     esi, [esp+28h+arg_10]
.text:0041050F                 jz      short loc_410529
.text:00410511                 cmp     ds:dword_41B810, esi
.text:00410517                 jz      loc_410650
.text:0041051D
.text:0041051D loc_41051D:                             ; CODE XREF: sub_4104E4+18D↓j
.text:0041051D                 mov     ds:Str1, ebx
.text:00410523                 mov     ds:dword_41B810, esi
.text:00410529
.text:00410529 loc_410529:                             ; CODE XREF: sub_4104E4+2B↑j
.text:00410529                 mov     edx, ds:_iob
.text:0041052F                 add     edx, 20h ; ' '
.text:00410532                 mov     [esp+28h+Stream], edx ; Stream
.text:00410535                 call    fflush
.text:0041053A                 mov     eax, ds:dword_41BBE0
.text:0041053F                 test    eax, eax
.text:00410541                 jz      loc_410625
.text:00410547                 call    eax ; dword_41BBE0
.text:00410549
.text:00410549 loc_410549:                             ; CODE XREF: sub_4104E4+164↓j
.text:00410549                 test    ebx, ebx
.text:0041054B                 jz      short loc_41056E
.text:0041054D                 mov     [esp+28h+ArgList], ebx
.text:00410551                 mov     ebx, ds:_iob
.text:00410557                 mov     [esp+28h+var_1C], esi
.text:0041055B                 mov     [esp+28h+Format], offset sub_4104E4 ; Format
.text:00410563                 add     ebx, 40h ; '@'
.text:00410566                 mov     [esp+28h+Stream], ebx ; Stream
.text:00410569                 call    fprintf
.text:0041056E
.text:0041056E loc_41056E:                             ; CODE XREF: sub_4104E4+67↑j
.text:0041056E                 mov     esi, ds:_iob
.text:00410574                 lea     edx, [esp+28h+arg_18]
.text:00410578                 mov     ecx, [esp+28h+arg_14]
.text:0041057C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00410580                 add     esi, 40h ; '@'
.text:00410583                 mov     [esp+28h+Format], ecx ; Format
.text:00410587                 mov     [esp+28h+Stream], esi ; Stream
.text:0041058A                 call    vfprintf
.text:0041058F                 inc     ds:dword_41BBF0
.text:00410595                 test    edi, edi
.text:00410597                 jnz     short loc_4105F0
.text:00410599
.text:00410599 loc_410599:                             ; CODE XREF: sub_4104E4+135↓j
.text:00410599                 mov     edx, ds:_iob
.text:0041059F                 lea     ecx, [edx+40h]
.text:004105A2                 mov     ebx, [ecx+4]
.text:004105A5                 dec     ebx
.text:004105A6                 test    ebx, ebx
.text:004105A8                 mov     [ecx+4], ebx
.text:004105AB                 js      short loc_4105D7
.text:004105AD                 mov     esi, [edx+40h]
.text:004105B0                 mov     byte ptr [esi], 0Ah
.text:004105B3                 inc     dword ptr [edx+40h]
.text:004105B6
.text:004105B6 loc_4105B6:                             ; CODE XREF: sub_4104E4+103↓j
.text:004105B6                 mov     ecx, ds:_iob
.text:004105BC                 add     ecx, 40h ; '@'
.text:004105BF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004105C2                 call    fflush
.text:004105C7                 test    ebp, ebp
.text:004105C9                 jnz     loc_410676
.text:004105CF
.text:004105CF loc_4105CF:                             ; CODE XREF: sub_4104E4+173↓j
.text:004105CF                                         ; sub_4104E4+187↓j
.text:004105CF                 add     esp, 1Ch
.text:004105D2                 pop     ebx
.text:004105D3                 pop     esi
.text:004105D4                 pop     edi
.text:004105D5                 pop     ebp
.text:004105D6                 retn
.text:004105D7 ; ---------------------------------------------------------------------------
.text:004105D7
.text:004105D7 loc_4105D7:                             ; CODE XREF: sub_4104E4+C7↑j
.text:004105D7                 mov     [esp+28h+Format], ecx ; File
.text:004105DB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004105E2                 call    _flsbuf
.text:004105E7                 jmp     short loc_4105B6
.text:004105E7 ; ---------------------------------------------------------------------------
.text:004105E9                 align 10h
.text:004105F0
.text:004105F0 loc_4105F0:                             ; CODE XREF: sub_4104E4+B3↑j
.text:004105F0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004105F3                 call    strerror
.text:004105F8                 test    eax, eax
.text:004105FA                 jz      short loc_41061E
.text:004105FC
.text:004105FC loc_4105FC:                             ; CODE XREF: sub_4104E4+13F↓j
.text:004105FC                 mov     [esp+28h+ArgList], eax
.text:00410600                 mov     edi, ds:_iob
.text:00410606                 mov     [esp+28h+Format], offset aS_5 ; ": %s"
.text:0041060E                 add     edi, 40h ; '@'
.text:00410611                 mov     [esp+28h+Stream], edi ; Stream
.text:00410614                 call    fprintf
.text:00410619                 jmp     loc_410599
.text:0041061E ; ---------------------------------------------------------------------------
.text:0041061E
.text:0041061E loc_41061E:                             ; CODE XREF: sub_4104E4+116↑j
.text:0041061E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00410623                 jmp     short loc_4105FC
.text:00410625 ; ---------------------------------------------------------------------------
.text:00410625
.text:00410625 loc_410625:                             ; CODE XREF: sub_4104E4+5D↑j
.text:00410625                 mov     [esp+28h+Format], (offset loc_4104EB+1) ; Format
.text:0041062D                 mov     ecx, ds:_iob
.text:00410633                 mov     edx, ds:dword_41BBA0
.text:00410639                 add     ecx, 40h ; '@'
.text:0041063C                 mov     [esp+28h+ArgList], edx
.text:00410640                 mov     [esp+28h+Stream], ecx ; Stream
.text:00410643                 call    fprintf
.text:00410648                 jmp     loc_410549
.text:00410648 ; ---------------------------------------------------------------------------
.text:0041064D                 align 10h
.text:00410650
.text:00410650 loc_410650:                             ; CODE XREF: sub_4104E4+33↑j
.text:00410650                 mov     eax, ds:Str1
.text:00410655                 cmp     ebx, eax
.text:00410657                 jz      loc_4105CF
.text:0041065D                 mov     [esp+28h+Format], ebx ; Str2
.text:00410661                 mov     [esp+28h+Stream], eax ; Str1
.text:00410664                 call    strcmp
.text:00410669                 test    eax, eax
.text:0041066B                 jz      loc_4105CF
.text:00410671                 jmp     loc_41051D
.text:00410676 ; ---------------------------------------------------------------------------
.text:00410676
.text:00410676 loc_410676:                             ; CODE XREF: sub_4104E4+E5↑j
.text:00410676                 mov     [esp+28h+Stream], ebp ; Code
.text:00410679                 call    exit
.text:00410679 sub_4104E4      endp ; sp-analysis failed
.text:00410679
.text:00410679 ; ---------------------------------------------------------------------------
.text:0041067E                 align 10h
.text:00410680
.text:00410680 ; =============== S U B R O U T I N E =======================================
.text:00410680
.text:00410680
.text:00410680 ; int __cdecl sub_410680(char *, int)
.text:00410680 sub_410680      proc near               ; CODE XREF: sub_403190+67↑p
.text:00410680
.text:00410680 hNamedPipe      = dword ptr -0Ch
.text:00410680 Str             = dword ptr -8
.text:00410680 var_4           = dword ptr -4
.text:00410680 arg_0           = dword ptr  4
.text:00410680 arg_4           = dword ptr  8
.text:00410680
.text:00410680                 sub     esp, 0Ch
.text:00410683                 mov     edx, [esp+0Ch+arg_4]
.text:00410687                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0041068E                 mov     [esp+0Ch+var_4], edx ; int
.text:00410692                 mov     edx, [esp+0Ch+arg_0]
.text:00410696                 mov     [esp+0Ch+Str], edx ; Str
.text:0041069A                 call    sub_4108F0
.text:0041069F                 add     esp, 0Ch
.text:004106A2                 retn
.text:004106A2 sub_410680      endp
.text:004106A2
.text:004106A2 ; ---------------------------------------------------------------------------
.text:004106A3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004106A3                                         ; DATA XREF: .text:0041078E↓o
.text:004106B6 aModeO          db 'mode:      %#o',0Ah,0
.text:004106B6                                         ; DATA XREF: .text:004107A4↓o
.text:004106C6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004106C6                                         ; DATA XREF: .text:004107B7↓o
.text:004106D6 aGidLd          db 'gid:       %ld',0Ah,0
.text:004106D6                                         ; DATA XREF: .text:004107CA↓o
.text:004106E6 aDevLu          db 'dev:       %lu',0Ah,0
.text:004106E6                                         ; DATA XREF: .text:004107DD↓o
.text:004106F6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:004106F6                                         ; DATA XREF: .text:004107F0↓o
.text:00410706 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00410706                                         ; DATA XREF: .text:00410806↓o
.text:00410718 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00410718                                         ; DATA XREF: .text:0041081D↓o
.text:00410727 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00410727                                         ; DATA XREF: .text:00410833↓o
.text:00410739 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00410739                                         ; DATA XREF: .text:00410859↓o
.text:0041074C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0041074C                                         ; DATA XREF: .text:0041087B↓o
.text:0041075F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0041075F                                         ; DATA XREF: .text:0041089D↓o
.text:00410773                 align 10h
.text:00410780                 push    ebx
.text:00410781                 sub     esp, 18h
.text:00410784                 mov     ebx, [esp+20h]
.text:00410788                 mov     edx, [ebx+8]
.text:0041078B                 mov     ecx, [ebx+0Ch]
.text:0041078E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00410795                 mov     [esp+4], edx
.text:00410799                 mov     [esp+8], ecx
.text:0041079D                 call    printf
.text:004107A2                 mov     ecx, [ebx]
.text:004107A4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:004107AB                 mov     [esp+4], ecx
.text:004107AF                 call    printf
.text:004107B4                 mov     edx, [ebx+1Ch]
.text:004107B7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:004107BE                 mov     [esp+4], edx
.text:004107C2                 call    printf
.text:004107C7                 mov     ecx, [ebx+20h]
.text:004107CA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:004107D1                 mov     [esp+4], ecx
.text:004107D5                 call    printf
.text:004107DA                 mov     edx, [ebx+10h]
.text:004107DD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:004107E4                 mov     [esp+4], edx
.text:004107E8                 call    printf
.text:004107ED                 mov     ecx, [ebx+18h]
.text:004107F0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:004107F7                 mov     [esp+4], ecx
.text:004107FB                 call    printf
.text:00410800                 mov     edx, [ebx+30h]
.text:00410803                 mov     ecx, [ebx+34h]
.text:00410806                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0041080D                 mov     [esp+4], edx
.text:00410811                 mov     [esp+8], ecx
.text:00410815                 call    printf
.text:0041081A                 mov     ecx, [ebx+50h]
.text:0041081D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00410824                 mov     [esp+4], ecx
.text:00410828                 call    printf
.text:0041082D                 mov     ecx, [ebx+5Ch]
.text:00410830                 mov     edx, [ebx+58h]
.text:00410833                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0041083A                 mov     [esp+8], ecx
.text:0041083E                 mov     [esp+4], edx
.text:00410842                 call    printf
.text:00410847                 lea     edx, [ebx+38h]
.text:0041084A                 mov     [esp], edx
.text:0041084D                 call    ctime
.text:00410852                 mov     [esp+8], eax
.text:00410856                 mov     ecx, [ebx+38h]
.text:00410859                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00410860                 mov     [esp+4], ecx
.text:00410864                 call    printf
.text:00410869                 lea     edx, [ebx+40h]
.text:0041086C                 mov     [esp], edx
.text:0041086F                 call    ctime
.text:00410874                 mov     [esp+8], eax
.text:00410878                 mov     ecx, [ebx+40h]
.text:0041087B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00410882                 mov     [esp+4], ecx
.text:00410886                 call    printf
.text:0041088B                 lea     edx, [ebx+48h]
.text:0041088E                 mov     [esp], edx
.text:00410891                 call    ctime
.text:00410896                 mov     [esp+8], eax
.text:0041089A                 mov     edx, [ebx+48h]
.text:0041089D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:004108A4                 mov     [esp+4], edx
.text:004108A8                 call    printf
.text:004108AD                 add     esp, 18h
.text:004108B0                 xor     eax, eax
.text:004108B2                 pop     ebx
.text:004108B3                 retn
.text:004108B3 ; ---------------------------------------------------------------------------
.text:004108B4                 align 10h
.text:004108C0 ; const char aFxstat64BadFil[]
.text:004108C0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004108C0                                         ; DATA XREF: sub_4108F0+7B↓o
.text:004108E4                 align 10h
.text:004108F0
.text:004108F0 ; =============== S U B R O U T I N E =======================================
.text:004108F0
.text:004108F0
.text:004108F0 ; int __cdecl sub_4108F0(HANDLE hNamedPipe, char *Str, int)
.text:004108F0 sub_4108F0      proc near               ; CODE XREF: sub_410680+1A↑p
.text:004108F0                                         ; .text:00413089↓p
.text:004108F0
.text:004108F0 hFindFile       = dword ptr -1A0h
.text:004108F0 var_19C         = dword ptr -19Ch
.text:004108F0 hLibModule      = dword ptr -198h
.text:004108F0 lpFindFileData  = dword ptr -194h
.text:004108F0 lpModuleName    = dword ptr -18Ch
.text:004108F0 lpProcName      = dword ptr -188h
.text:004108F0 var_184         = dword ptr -184h
.text:004108F0 var_180         = dword ptr -180h
.text:004108F0 var_17C         = dword ptr -17Ch
.text:004108F0 var_178         = dword ptr -178h
.text:004108F0 var_174         = dword ptr -174h
.text:004108F0 var_170         = dword ptr -170h
.text:004108F0 var_16C         = dword ptr -16Ch
.text:004108F0 var_168         = dword ptr -168h
.text:004108F0 var_164         = dword ptr -164h
.text:004108F0 hModule         = dword ptr -160h
.text:004108F0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004108F0 FileHandle      = dword ptr -1Ch
.text:004108F0 var_18          = dword ptr -18h
.text:004108F0 var_10          = dword ptr -10h
.text:004108F0 var_C           = dword ptr -0Ch
.text:004108F0 lpFileName      = dword ptr -8
.text:004108F0 var_4           = dword ptr -4
.text:004108F0 hNamedPipe      = dword ptr  4
.text:004108F0 Str             = dword ptr  8
.text:004108F0 arg_8           = dword ptr  0Ch
.text:004108F0
.text:004108F0                 sub     esp, 1Ch
.text:004108F3                 mov     edx, [esp+1Ch+Str]
.text:004108F7                 mov     [esp+1Ch+var_C], ebx
.text:004108FB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:004108FF                 mov     [esp+1Ch+lpFileName], esi
.text:00410903                 mov     esi, [esp+1Ch+arg_8]
.text:00410907                 test    ebx, ebx
.text:00410909                 mov     [esp+1Ch+var_4], edi
.text:0041090D                 jnz     short loc_410947
.text:0041090F                 test    edx, edx
.text:00410911                 js      short loc_410967
.text:00410913                 test    esi, esi
.text:00410915                 jz      short loc_410947
.text:00410917                 cld
.text:00410918                 mov     eax, ebx
.text:0041091A                 mov     edi, esi
.text:0041091C                 mov     ecx, 18h
.text:00410921                 rep stosd
.text:00410923                 mov     [esp+1Ch+Str], esi
.text:00410927                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0041092A                 call    _get_osfhandle
.text:0041092F                 mov     [esp+1Ch+hNamedPipe], eax
.text:00410933                 mov     ebx, [esp+1Ch+var_C]
.text:00410937                 mov     esi, [esp+1Ch+lpFileName]
.text:0041093B                 mov     edi, [esp+1Ch+var_4]
.text:0041093F                 add     esp, 1Ch
.text:00410942                 jmp     loc_410CD0
.text:00410947 ; ---------------------------------------------------------------------------
.text:00410947
.text:00410947 loc_410947:                             ; CODE XREF: sub_4108F0+1D↑j
.text:00410947                                         ; sub_4108F0+25↑j
.text:00410947                 call    _errno
.text:0041094C                 mov     dword ptr [eax], 16h
.text:00410952
.text:00410952 loc_410952:                             ; CODE XREF: sub_4108F0+92↓j
.text:00410952                 mov     ebx, [esp+1Ch+var_C]
.text:00410956                 mov     eax, 0FFFFFFFFh
.text:0041095B                 mov     esi, [esp+1Ch+lpFileName]
.text:0041095F                 mov     edi, [esp+1Ch+var_4]
.text:00410963                 add     esp, 1Ch
.text:00410966                 retn
.text:00410967 ; ---------------------------------------------------------------------------
.text:00410967
.text:00410967 loc_410967:                             ; CODE XREF: sub_4108F0+21↑j
.text:00410967                 mov     [esp+1Ch+var_18], edx
.text:0041096B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00410972                 call    printf
.text:00410977                 call    _errno
.text:0041097C                 mov     dword ptr [eax], 9
.text:00410982                 jmp     short loc_410952
.text:00410982 ; ---------------------------------------------------------------------------
.text:00410984                 align 20h
.text:004109A0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004109A0                                         ; DATA XREF: .data:off_41A094↓o
.text:004109B4 ; const CHAR ModuleName[]
.text:004109B4 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_4108F0+101↓o
.text:004109B4                                         ; sub_4108F0+26C↓o ...
.text:004109C1 ; const CHAR ProcName[]
.text:004109C1 ProcName        db 'GetFileAttributesExA',0
.text:004109C1                                         ; DATA XREF: sub_4108F0+118↓o
.text:004109D6                 align 10h
.text:004109E0
.text:004109E0 loc_4109E0:                             ; CODE XREF: .text:00411B84↓p
.text:004109E0                                         ; sub_411F80+37↓p
.text:004109E0                 push    ebp
.text:004109E1                 push    edi
.text:004109E2                 push    esi
.text:004109E3                 push    ebx
.text:004109E4                 sub     esp, 17Ch
.text:004109EA                 mov     ebx, [esp+18Ch+Str]
.text:004109F1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:004109F8                 call    GetModuleHandleA
.text:004109FD                 sub     esp, 4
.text:00410A00                 mov     [esp+18Ch+hModule], eax
.text:00410A04                 mov     edx, [esp+18Ch+hModule]
.text:00410A08                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00410A10                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00410A13                 call    GetProcAddress
.text:00410A18                 sub     esp, 8
.text:00410A1B                 mov     ebp, eax
.text:00410A1D                 mov     eax, [esp+18Ch+hNamedPipe]
.text:00410A24                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00410A27                 call    GetFileAttributesA
.text:00410A2C                 sub     esp, 4
.text:00410A2F                 mov     [esp+18Ch+var_164], eax
.text:00410A33                 xor     eax, eax
.text:00410A35                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00410A3A                 jz      short loc_410A91
.text:00410A3C                 cld
.text:00410A3D                 mov     ecx, 50h ; 'P'
.text:00410A42                 lea     esi, [esp+18Ch+FindFileData]
.text:00410A46                 mov     edi, esi
.text:00410A48                 test    ebp, ebp
.text:00410A4A                 rep stosd
.text:00410A4C                 mov     [esp+18Ch+var_170], 0
.text:00410A54                 jz      short loc_410A75
.text:00410A56                 mov     [esp+18Ch+var_184], ebx
.text:00410A5A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:00410A61                 mov     [esp+18Ch+lpProcName], 0
.text:00410A69                 mov     [esp+18Ch+lpModuleName], ecx
.text:00410A6C                 call    ebp
.text:00410A6E                 sub     esp, 0Ch
.text:00410A71                 mov     [esp+198h+var_17C], eax
.text:00410A75
.text:00410A75 loc_410A75:                             ; CODE XREF: sub_4108F0+164↑j
.text:00410A75                 mov     eax, [esp+198h+var_17C]
.text:00410A79                 test    eax, eax
.text:00410A7B                 jz      short loc_410AA0
.text:00410A7D
.text:00410A7D loc_410A7D:                             ; CODE XREF: sub_4108F0+221↓j
.text:00410A7D                                         ; sub_4108F0+23B↓j
.text:00410A7D                 mov     ebx, [esp+198h+var_16C]
.text:00410A81                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:00410A84                 call    FreeLibrary
.text:00410A89                 sub     esp, 4
.text:00410A8C                 mov     eax, 1
.text:00410A91
.text:00410A91 loc_410A91:                             ; CODE XREF: sub_4108F0+14A↑j
.text:00410A91                 add     esp, 17Ch
.text:00410A97                 pop     ebx
.text:00410A98                 pop     esi
.text:00410A99                 pop     edi
.text:00410A9A                 pop     ebp
.text:00410A9B                 retn
.text:00410A9B ; ---------------------------------------------------------------------------
.text:00410A9C                 align 10h
.text:00410AA0
.text:00410AA0 loc_410AA0:                             ; CODE XREF: sub_4108F0+18B↑j
.text:00410AA0                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:00410AA4                 mov     edx, [esp+198h+lpFileName]
.text:00410AAB                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:00410AAE                 call    FindFirstFileA
.text:00410AB3                 sub     esp, 8
.text:00410AB6                 xor     ecx, ecx
.text:00410AB8                 cmp     eax, 0FFFFFFFFh
.text:00410ABB                 setnz   cl
.text:00410ABE                 mov     edi, [esp+198h+var_168]
.text:00410AC2                 mov     [ebx], edi
.text:00410AC4                 mov     esi, [esp+198h+hModule]
.text:00410AC8                 mov     [esp+198h+var_17C], ecx
.text:00410ACC                 mov     ecx, [esp+198h+var_164]
.text:00410AD0                 mov     [ebx+8], esi
.text:00410AD3                 mov     [ebx+4], ecx
.text:00410AD6                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:00410ADA                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:00410ADE                 mov     [ebx+0Ch], ebp
.text:00410AE1                 mov     [ebx+10h], edi
.text:00410AE4                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00410AE8                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:00410AEC                 mov     [ebx+18h], esi
.text:00410AEF                 mov     [ebx+14h], ecx
.text:00410AF2                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00410AF6                 mov     [ebx+1Ch], ebp
.text:00410AF9                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00410AFD                 mov     [ebx+20h], edi
.text:00410B00                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:00410B03                 call    FindClose
.text:00410B08                 sub     esp, 4
.text:00410B0B                 mov     esi, [esp+198h+var_17C]
.text:00410B0F                 test    esi, esi
.text:00410B11                 jnz     loc_410A7D
.text:00410B17                 cld
.text:00410B18                 mov     eax, [esp+198h+var_17C]
.text:00410B1C                 mov     ecx, 9
.text:00410B21                 mov     edi, ebx
.text:00410B23                 rep stosd
.text:00410B25                 mov     ebp, [esp+198h+var_170]
.text:00410B29                 mov     [ebx], ebp
.text:00410B2B                 jmp     loc_410A7D
.text:00410B2B ; ---------------------------------------------------------------------------
.text:00410B30 ; const CHAR aFindfirstfilee[]
.text:00410B30 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_4108F0+283↓o
.text:00410B41 ; ---------------------------------------------------------------------------
.text:00410B41
.text:00410B41 loc_410B41:                             ; DATA XREF: sub_4108F0:loc_410BDD↓o
.text:00410B41                 pop     esp
.text:00410B42                 sub     al, [eax]
.text:00410B44                 lea     esi, [esi+0]
.text:00410B4A                 lea     edi, [edi+0]
.text:00410B50
.text:00410B50 loc_410B50:                             ; CODE XREF: .text:00411C83↓p
.text:00410B50                                         ; sub_411F80+3FA↓p ...
.text:00410B50                 push    ebp
.text:00410B51                 push    edi
.text:00410B52                 xor     edi, edi
.text:00410B54                 push    esi
.text:00410B55                 push    ebx
.text:00410B56                 sub     esp, 17Ch
.text:00410B5C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:00410B63                 call    LoadLibraryA
.text:00410B68                 sub     esp, 4
.text:00410B6B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:00410B6F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:00410B73                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00410B7B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:00410B7E                 call    GetProcAddress
.text:00410B83                 sub     esp, 8
.text:00410B86                 mov     edx, [esp+188h+Str]
.text:00410B8D                 mov     [esp+188h+hModule], eax
.text:00410B91                 mov     [esp+188h+lpProcName], edx ; Str
.text:00410B94                 call    strlen
.text:00410B99                 lea     edx, [eax+5]
.text:00410B9C                 mov     ebx, eax
.text:00410B9E                 mov     [esp+188h+lpProcName], edx ; Size
.text:00410BA1                 call    malloc
.text:00410BA6                 mov     esi, eax
.text:00410BA8                 test    esi, esi
.text:00410BAA                 mov     eax, 1
.text:00410BAF                 jz      loc_410C8D
.text:00410BB5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00410BB8                 mov     ebp, [esp+188h+Str]
.text:00410BBF                 mov     [esp+188h+var_184], ebp ; Source
.text:00410BC3                 call    strcpy
.text:00410BC8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00410BCD                 cmp     al, 2Fh ; '/'
.text:00410BCF                 jz      loc_410CBB
.text:00410BD5                 cmp     al, 5Ch ; '\'
.text:00410BD7                 jz      loc_410CBB
.text:00410BDD
.text:00410BDD loc_410BDD:                             ; CODE XREF: sub_4108F0+3D0↓j
.text:00410BDD                 mov     [esp+188h+var_184], offset loc_410B41 ; Source
.text:00410BE5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00410BE8                 call    strcat
.text:00410BED                 mov     eax, [esp+188h+hModule]
.text:00410BF1                 test    eax, eax
.text:00410BF3                 jz      loc_410CB5
.text:00410BF9                 mov     [esp+188h+var_174], 0
.text:00410C01                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00410C05                 mov     [esp+188h+var_178], 0
.text:00410C0D                 mov     [esp+188h+var_17C], 1
.text:00410C15                 mov     [esp+188h+var_180], ebp
.text:00410C19                 mov     [esp+188h+var_184], 0
.text:00410C21                 mov     [esp+188h+lpProcName], esi
.text:00410C24                 call    [esp+188h+hModule]
.text:00410C28                 sub     esp, 18h
.text:00410C2B                 mov     ebx, eax
.text:00410C2D                 cmp     eax, 0FFFFFFFFh
.text:00410C30                 jz      short loc_410C98
.text:00410C32                 lea     esi, [esi+0]
.text:00410C39                 lea     edi, [edi+0]
.text:00410C40
.text:00410C40 loc_410C40:                             ; CODE XREF: sub_4108F0+369↓j
.text:00410C40                                         ; sub_4108F0+3C1↓j
.text:00410C40                 test    byte ptr [esp+1A0h+var_170], 10h
.text:00410C45                 jz      short loc_410C48
.text:00410C47                 inc     edi
.text:00410C48
.text:00410C48 loc_410C48:                             ; CODE XREF: sub_4108F0+355↑j
.text:00410C48                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:00410C4C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:00410C4F                 call    FindNextFileA
.text:00410C54                 sub     esp, 8
.text:00410C57                 test    eax, eax
.text:00410C59                 jnz     short loc_410C40
.text:00410C5B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:00410C5E                 call    FindClose
.text:00410C63                 sub     esp, 4
.text:00410C66                 mov     esi, [esp+1A0h+var_174]
.text:00410C6A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:00410C6D                 call    FreeLibrary
.text:00410C72                 sub     esp, 4
.text:00410C75                 mov     ebx, [esp+1A0h+var_10]
.text:00410C7C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:00410C7F                 call    sub_413120
.text:00410C84                 test    eax, eax
.text:00410C86                 jz      short loc_410C8B
.text:00410C88                 add     edi, 2
.text:00410C8B
.text:00410C8B loc_410C8B:                             ; CODE XREF: sub_4108F0+396↑j
.text:00410C8B                 mov     eax, edi
.text:00410C8D
.text:00410C8D loc_410C8D:                             ; CODE XREF: sub_4108F0+2BF↑j
.text:00410C8D                                         ; sub_4108F0+3C3↓j
.text:00410C8D                 add     esp, 17Ch
.text:00410C93                 pop     ebx
.text:00410C94                 pop     esi
.text:00410C95                 pop     edi
.text:00410C96                 pop     ebp
.text:00410C97                 retn
.text:00410C98 ; ---------------------------------------------------------------------------
.text:00410C98
.text:00410C98 loc_410C98:                             ; CODE XREF: sub_4108F0+340↑j
.text:00410C98                                         ; sub_4108F0+3C9↓j
.text:00410C98                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:00410C9C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:00410C9F                 call    FindFirstFileA
.text:00410CA4                 mov     ebx, eax
.text:00410CA6                 sub     esp, 8
.text:00410CA9                 cmp     ebx, 0FFFFFFFFh
.text:00410CAC                 mov     eax, 2
.text:00410CB1                 jnz     short loc_410C40
.text:00410CB3                 jmp     short loc_410C8D
.text:00410CB5 ; ---------------------------------------------------------------------------
.text:00410CB5
.text:00410CB5 loc_410CB5:                             ; CODE XREF: sub_4108F0+303↑j
.text:00410CB5                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00410CB9                 jmp     short loc_410C98
.text:00410CBB ; ---------------------------------------------------------------------------
.text:00410CBB
.text:00410CBB loc_410CBB:                             ; CODE XREF: sub_4108F0+2DF↑j
.text:00410CBB                                         ; sub_4108F0+2E7↑j
.text:00410CBB                 mov     byte ptr [ebx+esi-1], 0
.text:00410CC0                 jmp     loc_410BDD
.text:00410CC0 ; ---------------------------------------------------------------------------
.text:00410CC5                 align 10h
.text:00410CD0
.text:00410CD0 loc_410CD0:                             ; CODE XREF: sub_4108F0+52↑j
.text:00410CD0                                         ; sub_417340-4EF9↓p
.text:00410CD0                 push    ebp
.text:00410CD1                 mov     eax, 0FFFFFFFFh
.text:00410CD6                 push    edi
.text:00410CD7                 push    esi
.text:00410CD8                 push    ebx
.text:00410CD9                 sub     esp, 0DCh
.text:00410CDF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00410CE6                 mov     ebp, [esp+0ECh+Str]
.text:00410CED                 cmp     esi, 0FFFFFFFFh
.text:00410CF0                 jz      loc_411071
.text:00410CF6                 cld
.text:00410CF7                 xor     eax, eax
.text:00410CF9                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:00410D00                 mov     ecx, 0Dh
.text:00410D05                 mov     edi, ebx
.text:00410D07                 rep stosd
.text:00410D09                 mov     dword ptr [ebp+18h], 1
.text:00410D10                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00410D13                 call    GetFileType
.text:00410D18                 sub     esp, 4
.text:00410D1B                 xor     edx, edx
.text:00410D1D                 cmp     eax, 2
.text:00410D20                 jz      loc_411150
.text:00410D26                 cmp     eax, 3
.text:00410D29                 jz      loc_411140
.text:00410D2F
.text:00410D2F loc_410D2F:                             ; CODE XREF: sub_4108F0+855↓j
.text:00410D2F                                         ; sub_4108F0+865↓j
.text:00410D2F                 or      [ebp+0], edx
.text:00410D32                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:00410D36                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00410D39                 call    GetFileInformationByHandle
.text:00410D3E                 sub     esp, 8
.text:00410D41                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00410D48                 test    ecx, ecx
.text:00410D4A                 jnz     short loc_410D80
.text:00410D4C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:00410D53                 test    edx, edx
.text:00410D55                 jnz     short loc_410D80
.text:00410D57                 mov     edx, [ebp+0]
.text:00410D5A                 and     edx, 0F000h
.text:00410D60                 cmp     edx, 1000h
.text:00410D66                 jz      loc_4110D6
.text:00410D6C
.text:00410D6C loc_410D6C:                             ; CODE XREF: sub_4108F0+839↓j
.text:00410D6C                                         ; sub_4108F0+845↓j
.text:00410D6C                 test    ecx, ecx
.text:00410D6E                 jnz     short loc_410D80
.text:00410D70                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:00410D77                 test    edx, edx
.text:00410D79                 jz      loc_4110B4
.text:00410D7F                 nop
.text:00410D80
.text:00410D80 loc_410D80:                             ; CODE XREF: sub_4108F0+45A↑j
.text:00410D80                                         ; sub_4108F0+465↑j ...
.text:00410D80                 cld
.text:00410D81                 mov     esi, ebx
.text:00410D83                 mov     dword ptr [ebp+14h], 0
.text:00410D8A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:00410D8E                 mov     ecx, 0Dh
.text:00410D93                 rep movsd
.text:00410D95                 xor     ebx, ebx
.text:00410D97                 xor     edi, edi
.text:00410D99                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:00410DA0                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:00410DA4                 or      edx, ebx
.text:00410DA6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:00410DAA                 mov     [ebp+8], edx
.text:00410DAD                 or      edi, esi
.text:00410DAF                 xor     edx, edx
.text:00410DB1                 mov     [ebp+0Ch], edi
.text:00410DB4                 test    bl, 10h
.text:00410DB7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:00410DBB                 setz    dl
.text:00410DBE                 mov     [ebp+10h], esi
.text:00410DC1                 dec     edx
.text:00410DC2                 and     edx, 0FFFFC000h
.text:00410DC8                 add     edx, 8000h
.text:00410DCE                 or      edx, 124h
.text:00410DD4                 test    bl, 1
.text:00410DD7                 movzx   eax, dx
.text:00410DDA                 jnz     short loc_410DE1
.text:00410DDC                 or      eax, 92h
.text:00410DE1
.text:00410DE1 loc_410DE1:                             ; CODE XREF: sub_4108F0+4EA↑j
.text:00410DE1                 or      [ebp+0], eax
.text:00410DE4                 xor     edx, edx
.text:00410DE6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:00410DEA                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:00410DEE                 mov     eax, edx
.text:00410DF0                 xor     esi, esi
.text:00410DF2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:00410DF6                 mov     edi, ebx
.text:00410DF8                 or      eax, edi
.text:00410DFA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:00410DFE                 mov     ebx, ecx
.text:00410E00                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:00410E04                 or      ebx, esi
.text:00410E06                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00410E0A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:00410E0E                 xor     ebx, ebx
.text:00410E10                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00410E14                 mov     [ebp+34h], esi
.text:00410E17                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:00410E1B                 mov     [ebp+18h], edi
.text:00410E1E                 xor     edi, edi
.text:00410E20                 or      esi, ebx
.text:00410E22                 mov     [ebp+30h], ecx
.text:00410E25                 or      edi, edx
.text:00410E27                 mov     edx, esi
.text:00410E29                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410E31                 sub     edx, 0D53E8000h
.text:00410E37                 mov     ebx, edi
.text:00410E39                 sbb     ebx, 19DB1DEh
.text:00410E3F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00410E43                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410E4B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00410E4E                 call    sub_418E70
.text:00410E53                 mov     ecx, eax
.text:00410E55                 shr     eax, 1Fh
.text:00410E58                 dec     eax
.text:00410E59                 and     ecx, eax
.text:00410E5B                 mov     [ebp+38h], ecx
.text:00410E5E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:00410E61                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00410E65                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410E6D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410E75                 call    sub_418F90
.text:00410E7A                 lea     ebx, [eax+eax*4]
.text:00410E7D                 xor     ecx, ecx
.text:00410E7F                 lea     esi, [ebx+ebx*4]
.text:00410E82                 shl     esi, 2
.text:00410E85                 mov     edi, esi
.text:00410E87                 shr     edi, 1Fh
.text:00410E8A                 dec     edi
.text:00410E8B                 and     edi, esi
.text:00410E8D                 mov     [ebp+3Ch], edi
.text:00410E90                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:00410E94                 xor     edi, edi
.text:00410E96                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410E9E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:00410EA2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410EAA                 or      esi, ecx
.text:00410EAC                 or      edi, edx
.text:00410EAE                 mov     edx, esi
.text:00410EB0                 mov     ecx, edi
.text:00410EB2                 sub     edx, 0D53E8000h
.text:00410EB8                 sbb     ecx, 19DB1DEh
.text:00410EBE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00410EC2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00410EC5                 call    sub_418E70
.text:00410ECA                 mov     ebx, eax
.text:00410ECC                 shr     eax, 1Fh
.text:00410ECF                 dec     eax
.text:00410ED0                 and     ebx, eax
.text:00410ED2                 mov     [ebp+48h], ebx
.text:00410ED5                 xor     ebx, ebx
.text:00410ED7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:00410EDA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00410EDE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410EE6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410EEE                 call    sub_418F90
.text:00410EF3                 lea     ecx, [eax+eax*4]
.text:00410EF6                 lea     esi, [ecx+ecx*4]
.text:00410EF9                 shl     esi, 2
.text:00410EFC                 mov     edi, esi
.text:00410EFE                 shr     edi, 1Fh
.text:00410F01                 dec     edi
.text:00410F02                 and     edi, esi
.text:00410F04                 mov     [ebp+4Ch], edi
.text:00410F07                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:00410F0B                 xor     edi, edi
.text:00410F0D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410F15                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:00410F19                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410F21                 or      esi, ebx
.text:00410F23                 or      edi, edx
.text:00410F25                 mov     edx, esi
.text:00410F27                 mov     ebx, edi
.text:00410F29                 sub     edx, 0D53E8000h
.text:00410F2F                 sbb     ebx, 19DB1DEh
.text:00410F35                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00410F39                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00410F3C                 call    sub_418E70
.text:00410F41                 mov     ecx, eax
.text:00410F43                 shr     eax, 1Fh
.text:00410F46                 dec     eax
.text:00410F47                 and     ecx, eax
.text:00410F49                 mov     [ebp+40h], ecx
.text:00410F4C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00410F50                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00410F58                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00410F60                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:00410F63                 call    sub_418F90
.text:00410F68                 mov     dword ptr [ebp+50h], 200h
.text:00410F6F                 lea     ebx, [eax+eax*4]
.text:00410F72                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00410F76                 lea     edx, [ebx+ebx*4]
.text:00410F79                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00410F7D                 shl     edx, 2
.text:00410F80                 mov     ecx, edx
.text:00410F82                 shr     ecx, 1Fh
.text:00410F85                 dec     ecx
.text:00410F86                 and     ecx, edx
.text:00410F88                 test    edi, edi
.text:00410F8A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00410F8E                 mov     [ebp+44h], ecx
.text:00410F91                 js      loc_4110A7
.text:00410F97
.text:00410F97 loc_410F97:                             ; CODE XREF: sub_4108F0+7BF↓j
.text:00410F97                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00410F9B                 xor     esi, esi
.text:00410F9D                 mov     ecx, eax
.text:00410F9F                 shrd    ecx, edx, 9
.text:00410FA3                 mov     ebx, edx
.text:00410FA5                 mov     eax, esi
.text:00410FA7                 and     edi, 1FFh
.text:00410FAD                 sar     ebx, 9
.text:00410FB0                 or      eax, edi
.text:00410FB2                 jz      short loc_410FBA
.text:00410FB4                 add     ecx, 1
.text:00410FB7                 adc     ebx, 0
.text:00410FBA
.text:00410FBA loc_410FBA:                             ; CODE XREF: sub_4108F0+6C2↑j
.text:00410FBA                 mov     [ebp+5Ch], ebx
.text:00410FBD                 mov     esi, dword_41A090
.text:00410FC3                 xor     edi, edi
.text:00410FC5                 mov     [ebp+58h], ecx
.text:00410FC8                 mov     ebx, dword_41A090
.text:00410FCE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00410FD2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00410FD6                 mov     [ebp+50h], ebx
.text:00410FD9                 shr     ebx, 9
.text:00410FDC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00410FE0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00410FE4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00410FE8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00410FEB                 call    sub_418E70
.text:00410FF0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00410FF4                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00410FF8                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00410FFC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:00411000                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:00411004                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:00411008                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:00411010                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00411014                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:00411017                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0041101B                 call    sub_418F90
.text:00411020                 mov     ebx, edx
.text:00411022                 or      ebx, eax
.text:00411024                 jz      short loc_411080
.text:00411026                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0041102A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0041102E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00411032                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:00411036                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0041103A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0041103F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:00411043                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:00411048                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0041104C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:00411050                 mov     ebx, edx
.text:00411052                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:00411056                 mov     esi, eax
.text:00411058                 mov     eax, ebx
.text:0041105A                 imul    ecx, edx
.text:0041105D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00411061                 imul    edx, edi
.text:00411064                 add     eax, ecx
.text:00411066                 lea     edi, [edx+eax]
.text:00411069
.text:00411069 loc_411069:                             ; CODE XREF: sub_4108F0+7B5↓j
.text:00411069                 mov     [ebp+58h], esi
.text:0041106C                 xor     eax, eax
.text:0041106E                 mov     [ebp+5Ch], edi
.text:00411071
.text:00411071 loc_411071:                             ; CODE XREF: sub_4108F0+400↑j
.text:00411071                 add     esp, 0DCh
.text:00411077                 pop     ebx
.text:00411078                 pop     esi
.text:00411079                 pop     edi
.text:0041107A                 pop     ebp
.text:0041107B                 retn
.text:0041107B ; ---------------------------------------------------------------------------
.text:0041107C                 align 10h
.text:00411080
.text:00411080 loc_411080:                             ; CODE XREF: sub_4108F0+734↑j
.text:00411080                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:00411084                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:00411088                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0041108C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00411090                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00411094                 imul    ebx, edi
.text:00411097                 mov     esi, eax
.text:00411099                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0041109D                 add     edx, ebx
.text:0041109F                 imul    ecx, eax
.text:004110A2                 lea     edi, [ecx+edx]
.text:004110A5                 jmp     short loc_411069
.text:004110A7 ; ---------------------------------------------------------------------------
.text:004110A7
.text:004110A7 loc_4110A7:                             ; CODE XREF: sub_4108F0+6A1↑j
.text:004110A7                 add     eax, 1FFh
.text:004110AC                 adc     edx, 0
.text:004110AF                 jmp     loc_410F97
.text:004110B4 ; ---------------------------------------------------------------------------
.text:004110B4
.text:004110B4 loc_4110B4:                             ; CODE XREF: sub_4108F0+489↑j
.text:004110B4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:004110B7                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:004110BE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:004110C2                 call    GetFileSize
.text:004110C7                 sub     esp, 8
.text:004110CA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:004110D1                 jmp     loc_410D80
.text:004110D6 ; ---------------------------------------------------------------------------
.text:004110D6
.text:004110D6 loc_4110D6:                             ; CODE XREF: sub_4108F0+476↑j
.text:004110D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:004110DE                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:004110E2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:004110EA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:004110EE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:004110F6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:004110FE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:00411106                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:00411109                 call    PeekNamedPipe
.text:0041110E                 sub     esp, 18h
.text:00411111                 test    eax, eax
.text:00411113                 jz      short loc_41112E
.text:00411115                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:00411119                 xor     eax, eax
.text:0041111B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:00411122                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:00411129                 jmp     loc_410D6C
.text:0041112E ; ---------------------------------------------------------------------------
.text:0041112E
.text:0041112E loc_41112E:                             ; CODE XREF: sub_4108F0+823↑j
.text:0041112E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00411135                 jmp     loc_410D6C
.text:00411135 ; ---------------------------------------------------------------------------
.text:0041113A                 align 10h
.text:00411140
.text:00411140 loc_411140:                             ; CODE XREF: sub_4108F0+439↑j
.text:00411140                 mov     edx, 1000h
.text:00411145                 jmp     loc_410D2F
.text:00411145 ; ---------------------------------------------------------------------------
.text:0041114A                 align 10h
.text:00411150
.text:00411150 loc_411150:                             ; CODE XREF: sub_4108F0+430↑j
.text:00411150                 mov     edx, 2000h
.text:00411155                 jmp     loc_410D2F
.text:00411155 sub_4108F0      endp ; sp-analysis failed
.text:00411155
.text:00411155 ; ---------------------------------------------------------------------------
.text:0041115A aLnk            db '.lnk',0             ; DATA XREF: sub_4111A0+E0↓o
.text:0041115A                                         ; .text:0041184A↓o ...
.text:0041115F ; const CHAR aKernel32[]
.text:0041115F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4111A0+12D↓o
.text:0041115F                                         ; .text:00411EFB↓o
.text:00411168 ; const CHAR aGetcompressedf[]
.text:00411168 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00411168                                         ; DATA XREF: sub_4111A0+13E↓o
.text:00411168                                         ; .text:00411F0C↓o
.text:0041117F ; const CHAR aGetbinarytypea[]
.text:0041117F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4111A0+333↓o
.text:0041117F                                         ; .text:004118A6↓o ...
.text:0041118E ; const char aPathext[]
.text:0041118E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4111A0:loc_411587↓o
.text:0041118E                                         ; .text:loc_411950↓o ...
.text:00411196                 align 10h
.text:004111A0
.text:004111A0 ; =============== S U B R O U T I N E =======================================
.text:004111A0
.text:004111A0
.text:004111A0 ; int __cdecl sub_4111A0(char *String1, int)
.text:004111A0 sub_4111A0      proc near               ; CODE XREF: sub_411F80+3CD↓p
.text:004111A0                                         ; sub_417340-4EDB↓p
.text:004111A0
.text:004111A0 Str             = dword ptr -6Ch
.text:004111A0 lpProcName      = dword ptr -68h
.text:004111A0 var_64          = dword ptr -64h
.text:004111A0 var_60          = dword ptr -60h
.text:004111A0 var_5C          = dword ptr -5Ch
.text:004111A0 var_4C          = dword ptr -4Ch
.text:004111A0 var_48          = dword ptr -48h
.text:004111A0 var_44          = dword ptr -44h
.text:004111A0 var_40          = dword ptr -40h
.text:004111A0 var_3C          = dword ptr -3Ch
.text:004111A0 var_38          = dword ptr -38h
.text:004111A0 lpRootPathName  = dword ptr -30h
.text:004111A0 var_2C          = byte ptr -2Ch
.text:004111A0 var_28          = dword ptr -28h
.text:004111A0 var_24          = dword ptr -24h
.text:004111A0 var_20          = dword ptr -20h
.text:004111A0 var_1C          = dword ptr -1Ch
.text:004111A0 var_18          = byte ptr -18h
.text:004111A0 String1         = dword ptr  4
.text:004111A0 arg_4           = dword ptr  8
.text:004111A0
.text:004111A0                 push    ebp
.text:004111A1                 push    edi
.text:004111A2                 push    esi
.text:004111A3                 push    ebx
.text:004111A4                 sub     esp, 5Ch
.text:004111A7                 mov     edx, [esp+6Ch+String1]
.text:004111AB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004111AE                 call    sub_412D50
.text:004111B3                 mov     [esp+6Ch+Str], eax
.text:004111B6                 call    sub_412920
.text:004111BB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004111BF                 test    eax, eax
.text:004111C1                 jz      loc_4113F3
.text:004111C7                 mov     [esp+6Ch+Str], eax ; Str
.text:004111CA                 call    strlen
.text:004111CF                 mov     edx, [esp+6Ch+arg_4]
.text:004111D3                 mov     ebx, eax
.text:004111D5                 mov     esi, [edx+0Ch]
.text:004111D8                 mov     edi, [edx+8]
.text:004111DB                 mov     eax, esi
.text:004111DD                 or      eax, edi
.text:004111DF                 jz      loc_411600
.text:004111E5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004111E9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004111EC                 call    GetDriveTypeA
.text:004111F1                 sub     esp, 4
.text:004111F4                 cmp     eax, 4
.text:004111F7                 jz      loc_411600
.text:004111FD
.text:004111FD loc_4111FD:                             ; CODE XREF: sub_4111A0+48A↓j
.text:004111FD                                         ; sub_4111A0+4B2↓j
.text:004111FD                 mov     edx, [esp+6Ch+arg_4]
.text:00411201                 mov     esi, [edx+14h]
.text:00411204                 mov     edi, [edx+10h]
.text:00411207                 mov     ecx, esi
.text:00411209                 or      ecx, edi
.text:0041120B                 jnz     short loc_411235
.text:0041120D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00411211                 xor     esi, esi
.text:00411213                 xor     edi, edi
.text:00411215                 test    ebp, ebp
.text:00411217                 jz      short loc_411227
.text:00411219                 movzx   ebx, byte ptr [ebp+0]
.text:0041121D                 test    bl, bl
.text:0041121F                 mov     cl, bl
.text:00411221                 jnz     loc_4115B1
.text:00411227
.text:00411227 loc_411227:                             ; CODE XREF: sub_4111A0+77↑j
.text:00411227                 xor     eax, eax
.text:00411229                 xor     edx, edx
.text:0041122B
.text:0041122B loc_41122B:                             ; CODE XREF: sub_4111A0+458↓j
.text:0041122B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041122F                 mov     [ebp+10h], eax
.text:00411232                 mov     [ebp+14h], edx
.text:00411235
.text:00411235 loc_411235:                             ; CODE XREF: sub_4111A0+6B↑j
.text:00411235                 mov     edi, [esp+6Ch+String1]
.text:00411239                 xor     ebx, ebx
.text:0041123B                 test    edi, edi
.text:0041123D                 jz      loc_4114B3
.text:00411243                 mov     esi, [esp+6Ch+String1]
.text:00411247                 cmp     byte ptr [esi], 0
.text:0041124A                 jnz     loc_4114C0
.text:00411250
.text:00411250 loc_411250:                             ; CODE XREF: sub_4111A0+38C↓j
.text:00411250                                         ; sub_4111A0+397↓j
.text:00411250                 mov     ebp, [esp+6Ch+String1]
.text:00411254                 test    ebp, ebp
.text:00411256                 jz      loc_4114B3
.text:0041125C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00411264                 mov     edi, [esp+6Ch+String1]
.text:00411268                 mov     [esp+6Ch+Str], edi ; Str
.text:0041126B                 call    strrchr
.text:00411270                 test    eax, eax
.text:00411272                 jz      loc_4114B3
.text:00411278                 cld
.text:00411279                 mov     ecx, 5
.text:0041127E                 mov     esi, eax
.text:00411280                 mov     edi, offset aLnk ; ".lnk"
.text:00411285                 repe cmpsb
.text:00411287                 setz    cl
.text:0041128A                 movzx   eax, cl
.text:0041128D                 lea     esi, [esi+0]
.text:00411290
.text:00411290 loc_411290:                             ; CODE XREF: sub_4111A0+315↓j
.text:00411290                 test    eax, eax
.text:00411292                 jz      short loc_41129A
.text:00411294                 or      ebx, 0A000h
.text:0041129A
.text:0041129A loc_41129A:                             ; CODE XREF: sub_4111A0+F2↑j
.text:0041129A                 mov     esi, [esp+6Ch+arg_4]
.text:0041129E                 xor     ecx, ecx
.text:004112A0                 mov     edi, ds:dword_41B820
.text:004112A6                 or      [esi], ebx
.text:004112A8                 mov     ebx, [esi+14h]
.text:004112AB                 mov     ebp, [esi+10h]
.text:004112AE                 mov     eax, ebx
.text:004112B0                 xor     eax, ecx
.text:004112B2                 xor     ebp, edi
.text:004112B4                 or      eax, ebp
.text:004112B6                 jnz     loc_411440
.text:004112BC
.text:004112BC loc_4112BC:                             ; CODE XREF: sub_4111A0+30E↓j
.text:004112BC                 mov     ecx, dword_41A090
.text:004112C2                 xor     esi, esi
.text:004112C4                 xor     edi, edi
.text:004112C6                 mov     edx, [esp+6Ch+arg_4]
.text:004112CA                 mov     [edx+50h], ecx
.text:004112CD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004112D4                 call    LoadLibraryA
.text:004112D9                 sub     esp, 4
.text:004112DC                 mov     ebp, eax
.text:004112DE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004112E6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004112E9                 call    GetProcAddress
.text:004112EE                 sub     esp, 8
.text:004112F1                 test    eax, eax
.text:004112F3                 jz      short loc_411328
.text:004112F5                 mov     ebx, [esp+6Ch+String1]
.text:004112F9                 lea     esi, [esp+6Ch+var_2C]
.text:004112FD                 mov     [esp+6Ch+lpProcName], esi
.text:00411301                 mov     [esp+6Ch+Str], ebx
.text:00411304                 call    eax
.text:00411306                 sub     esp, 8
.text:00411309                 mov     ebx, eax
.text:0041130B                 cmp     eax, 0FFFFFFFFh
.text:0041130E                 jz      loc_411429
.text:00411314
.text:00411314 loc_411314:                             ; CODE XREF: sub_4111A0+29A↓j
.text:00411314                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00411318                 mov     ecx, ebx
.text:0041131A                 xor     edi, edi
.text:0041131C                 xor     ebx, ebx
.text:0041131E                 mov     edx, esi
.text:00411320                 mov     esi, ecx
.text:00411322                 or      esi, edi
.text:00411324                 mov     edi, ebx
.text:00411326                 or      edi, edx
.text:00411328
.text:00411328 loc_411328:                             ; CODE XREF: sub_4111A0+153↑j
.text:00411328                                         ; sub_4111A0+294↓j
.text:00411328                 test    ebp, ebp
.text:0041132A                 jz      short loc_411337
.text:0041132C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041132F                 call    FreeLibrary
.text:00411334                 sub     esp, 4
.text:00411337
.text:00411337 loc_411337:                             ; CODE XREF: sub_4111A0+18A↑j
.text:00411337                 mov     ebp, edi
.text:00411339                 mov     edx, ebp
.text:0041133B                 mov     edi, esi
.text:0041133D                 or      edx, esi
.text:0041133F                 jnz     short loc_41134B
.text:00411341                 mov     eax, [esp+6Ch+arg_4]
.text:00411345                 mov     edi, [eax+30h]
.text:00411348                 mov     ebp, [eax+34h]
.text:0041134B
.text:0041134B loc_41134B:                             ; CODE XREF: sub_4111A0+19F↑j
.text:0041134B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041134F                 mov     ebx, dword_41A090
.text:00411355                 xor     esi, esi
.text:00411357                 mov     [esp+6Ch+var_60], esi
.text:0041135B                 mov     [esp+6Ch+Str], edi
.text:0041135E                 mov     [esp+6Ch+var_64], ebx
.text:00411362                 call    sub_418E70
.text:00411367                 mov     [esp+6Ch+var_3C], eax
.text:0041136B                 mov     ecx, dword_41A090
.text:00411371                 mov     [esp+6Ch+lpProcName], ebp
.text:00411375                 mov     [esp+6Ch+var_38], edx
.text:00411379                 shr     ecx, 9
.text:0041137C                 mov     [esp+6Ch+var_44], ecx
.text:00411380                 mov     [esp+6Ch+var_40], 0
.text:00411388                 mov     [esp+6Ch+var_64], ebx
.text:0041138C                 mov     [esp+6Ch+var_60], esi
.text:00411390                 mov     [esp+6Ch+Str], edi
.text:00411393                 call    sub_418F90
.text:00411398                 mov     ebp, edx
.text:0041139A                 or      ebp, eax
.text:0041139C                 jz      short loc_411400
.text:0041139E                 mov     ebp, [esp+6Ch+var_3C]
.text:004113A2                 mov     esi, [esp+6Ch+var_38]
.text:004113A6                 mov     eax, [esp+6Ch+var_44]
.text:004113AA                 mov     [esp+6Ch+var_4C], ebp
.text:004113AE                 mov     ecx, [esp+6Ch+var_40]
.text:004113B2                 mov     ebx, [esp+6Ch+var_44]
.text:004113B6                 add     [esp+6Ch+var_4C], 1
.text:004113BB                 mov     [esp+6Ch+var_48], esi
.text:004113BF                 mov     edi, [esp+6Ch+var_4C]
.text:004113C3                 adc     [esp+6Ch+var_48], 0
.text:004113C8                 mul     [esp+6Ch+var_4C]
.text:004113CC                 imul    ecx, edi
.text:004113CF                 mov     esi, eax
.text:004113D1                 mov     eax, [esp+6Ch+var_48]
.text:004113D5                 add     edx, ecx
.text:004113D7                 imul    ebx, eax
.text:004113DA                 lea     edi, [ebx+edx]
.text:004113DD
.text:004113DD loc_4113DD:                             ; CODE XREF: sub_4111A0+287↓j
.text:004113DD                 mov     ebx, [esp+6Ch+arg_4]
.text:004113E1                 mov     [ebx+58h], esi
.text:004113E4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004113E8                 mov     [ebx+5Ch], edi
.text:004113EB                 mov     [esp+6Ch+Str], esi ; Block
.text:004113EE                 call    free
.text:004113F3
.text:004113F3 loc_4113F3:                             ; CODE XREF: sub_4111A0+21↑j
.text:004113F3                 add     esp, 5Ch
.text:004113F6                 xor     eax, eax
.text:004113F8                 pop     ebx
.text:004113F9                 pop     esi
.text:004113FA                 pop     edi
.text:004113FB                 pop     ebp
.text:004113FC                 retn
.text:004113FC ; ---------------------------------------------------------------------------
.text:004113FD                 align 10h
.text:00411400
.text:00411400 loc_411400:                             ; CODE XREF: sub_4111A0+1FC↑j
.text:00411400                 mov     eax, [esp+6Ch+var_3C]
.text:00411404                 mov     edi, [esp+6Ch+var_40]
.text:00411408                 mov     ecx, [esp+6Ch+var_3C]
.text:0041140C                 mul     [esp+6Ch+var_44]
.text:00411410                 mov     ebx, [esp+6Ch+var_44]
.text:00411414                 imul    ecx, edi
.text:00411417                 mov     ebp, edx
.text:00411419                 mov     esi, eax
.text:0041141B                 mov     edx, [esp+6Ch+var_38]
.text:0041141F                 add     ebp, ecx
.text:00411421                 imul    ebx, edx
.text:00411424                 lea     edi, [ebx+ebp]
.text:00411427                 jmp     short loc_4113DD
.text:00411429 ; ---------------------------------------------------------------------------
.text:00411429
.text:00411429 loc_411429:                             ; CODE XREF: sub_4111A0+16E↑j
.text:00411429                 call    GetLastError
.text:0041142E                 xor     esi, esi
.text:00411430                 xor     edi, edi
.text:00411432                 test    eax, eax
.text:00411434                 jnz     loc_411328
.text:0041143A                 jmp     loc_411314
.text:0041143A ; ---------------------------------------------------------------------------
.text:0041143F                 align 10h
.text:00411440
.text:00411440 loc_411440:                             ; CODE XREF: sub_4111A0+116↑j
.text:00411440                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00411444                 lea     ecx, [esp+6Ch+var_20]
.text:00411448                 lea     ebx, [esp+6Ch+var_1C]
.text:0041144C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00411450                 lea     edi, [esp+6Ch+var_24]
.text:00411454                 lea     ebp, [esp+6Ch+var_28]
.text:00411458                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0041145C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00411460                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00411464                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00411467                 call    sub_413770
.text:0041146C                 test    eax, eax
.text:0041146E                 jnz     short loc_411490
.text:00411470                 mov     [esp+6Ch+var_28], 1
.text:00411478                 mov     [esp+6Ch+var_24], 200h
.text:00411480                 mov     [esp+6Ch+var_20], 0
.text:00411488                 mov     [esp+6Ch+var_1C], 0
.text:00411490
.text:00411490 loc_411490:                             ; CODE XREF: sub_4111A0+2CE↑j
.text:00411490                 mov     ebp, [esp+6Ch+var_24]
.text:00411494                 mov     edi, [esp+6Ch+var_28]
.text:00411498                 mov     eax, [esp+6Ch+arg_4]
.text:0041149C                 imul    ebp, edi
.text:0041149F                 mov     esi, [eax+10h]
.text:004114A2                 mov     dword_41A090, ebp
.text:004114A8                 mov     ds:dword_41B820, esi
.text:004114AE                 jmp     loc_4112BC
.text:004114B3 ; ---------------------------------------------------------------------------
.text:004114B3
.text:004114B3 loc_4114B3:                             ; CODE XREF: sub_4111A0+9D↑j
.text:004114B3                                         ; sub_4111A0+B6↑j ...
.text:004114B3                 xor     eax, eax
.text:004114B5                 jmp     loc_411290
.text:004114B5 ; ---------------------------------------------------------------------------
.text:004114BA                 align 10h
.text:004114C0
.text:004114C0 loc_4114C0:                             ; CODE XREF: sub_4111A0+AA↑j
.text:004114C0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:004114C7                 xor     ebp, ebp
.text:004114C9                 call    GetModuleHandleA
.text:004114CE                 sub     esp, 4
.text:004114D1                 mov     edi, eax
.text:004114D3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004114DB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004114DE                 call    GetProcAddress
.text:004114E3                 sub     esp, 8
.text:004114E6                 mov     edx, eax
.text:004114E8                 test    eax, eax
.text:004114EA                 jz      short loc_411504
.text:004114EC                 mov     eax, [esp+6Ch+String1]
.text:004114F0                 lea     ecx, [esp+6Ch+var_18]
.text:004114F4                 mov     [esp+6Ch+lpProcName], ecx
.text:004114F8                 mov     [esp+6Ch+Str], eax
.text:004114FB                 call    edx
.text:004114FD                 sub     esp, 8
.text:00411500                 test    eax, eax
.text:00411502                 jnz     short loc_411568
.text:00411504
.text:00411504 loc_411504:                             ; CODE XREF: sub_4111A0+34A↑j
.text:00411504                 mov     edx, ds:dword_41B830
.text:0041150A                 test    edx, edx
.text:0041150C                 jz      short loc_411587
.text:0041150E
.text:0041150E loc_41150E:                             ; CODE XREF: sub_4111A0+3FA↓j
.text:0041150E                                         ; sub_4111A0+40C↓j
.text:0041150E                 mov     eax, [esp+6Ch+String1]
.text:00411512                 test    eax, eax
.text:00411514                 jz      short loc_41151F
.text:00411516                 mov     esi, [esp+6Ch+String1]
.text:0041151A                 cmp     byte ptr [esi], 0
.text:0041151D                 jnz     short loc_41153C
.text:0041151F
.text:0041151F loc_41151F:                             ; CODE XREF: sub_4111A0+374↑j
.text:0041151F                                         ; sub_4111A0+3B0↓j ...
.text:0041151F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00411522                 call    FreeLibrary
.text:00411527                 sub     esp, 4
.text:0041152A                 test    ebp, ebp
.text:0041152C                 jz      loc_411250
.text:00411532                 mov     ebx, 49h ; 'I'
.text:00411537                 jmp     loc_411250
.text:0041153C ; ---------------------------------------------------------------------------
.text:0041153C
.text:0041153C loc_41153C:                             ; CODE XREF: sub_4111A0+37D↑j
.text:0041153C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041153F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00411547                 call    strrchr
.text:0041154C                 test    eax, eax
.text:0041154E                 mov     esi, eax
.text:00411550                 jz      short loc_41151F
.text:00411552                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00411556                 mov     ecx, ds:dword_41B830
.text:0041155C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0041155F                 call    strstr
.text:00411564                 test    eax, eax
.text:00411566                 jz      short loc_41156F
.text:00411568
.text:00411568 loc_411568:                             ; CODE XREF: sub_4111A0+362↑j
.text:00411568                                         ; sub_4111A0+3E5↓j
.text:00411568                 mov     ebp, 1
.text:0041156D                 jmp     short loc_41151F
.text:0041156F ; ---------------------------------------------------------------------------
.text:0041156F
.text:0041156F loc_41156F:                             ; CODE XREF: sub_4111A0+3C6↑j
.text:0041156F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00411573                 mov     edx, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:00411579                 mov     [esp+6Ch+Str], edx ; Str
.text:0041157C                 call    strstr
.text:00411581                 test    eax, eax
.text:00411583                 jz      short loc_41151F
.text:00411585                 jmp     short loc_411568
.text:00411587 ; ---------------------------------------------------------------------------
.text:00411587
.text:00411587 loc_411587:                             ; CODE XREF: sub_4111A0+36C↑j
.text:00411587                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0041158E                 call    getenv
.text:00411593                 mov     ds:dword_41B830, eax
.text:00411598                 test    eax, eax
.text:0041159A                 jnz     loc_41150E
.text:004115A0                 mov     esi, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:004115A6                 mov     ds:dword_41B830, esi
.text:004115AC                 jmp     loc_41150E
.text:004115B1 ; ---------------------------------------------------------------------------
.text:004115B1
.text:004115B1 loc_4115B1:                             ; CODE XREF: sub_4111A0+81↑j
.text:004115B1                                         ; sub_4111A0+452↓j
.text:004115B1                 shld    edi, esi, 8
.text:004115B5                 movsx   eax, cl
.text:004115B8                 shl     esi, 8
.text:004115BB                 cdq
.text:004115BC                 add     esi, eax
.text:004115BE                 adc     edi, edx
.text:004115C0                 mov     edx, edi
.text:004115C2                 xor     ebx, ebx
.text:004115C4                 and     edx, 0FF000000h
.text:004115CA                 mov     eax, edx
.text:004115CC                 or      eax, ebx
.text:004115CE                 jz      short loc_4115E9
.text:004115D0                 mov     ecx, edx
.text:004115D2                 xor     eax, eax
.text:004115D4                 shr     ecx, 10h
.text:004115D7                 mov     edx, esi
.text:004115D9                 xor     edx, ecx
.text:004115DB                 mov     ecx, edi
.text:004115DD                 xor     ecx, eax
.text:004115DF                 mov     esi, edx
.text:004115E1                 mov     edi, ecx
.text:004115E3                 and     edi, 0FFFFFFh
.text:004115E9
.text:004115E9 loc_4115E9:                             ; CODE XREF: sub_4111A0+42E↑j
.text:004115E9                 inc     ebp
.text:004115EA                 movzx   ebx, byte ptr [ebp+0]
.text:004115EE                 test    bl, bl
.text:004115F0                 mov     cl, bl
.text:004115F2                 jnz     short loc_4115B1
.text:004115F4                 mov     eax, esi
.text:004115F6                 mov     edx, edi
.text:004115F8                 jmp     loc_41122B
.text:004115F8 ; ---------------------------------------------------------------------------
.text:004115FD                 align 10h
.text:00411600
.text:00411600 loc_411600:                             ; CODE XREF: sub_4111A0+3F↑j
.text:00411600                                         ; sub_4111A0+57↑j
.text:00411600                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00411604                 mov     ebp, [esp+6Ch+String1]
.text:00411608                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0041160C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0041160F                 call    _stricmp
.text:00411614                 test    eax, eax
.text:00411616                 jnz     short loc_411630
.text:00411618                 mov     ebx, [esp+6Ch+arg_4]
.text:0041161C                 mov     dword ptr [ebx+8], 5
.text:00411623                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041162A                 jmp     loc_4111FD
.text:0041162A ; ---------------------------------------------------------------------------
.text:0041162F                 align 10h
.text:00411630
.text:00411630 loc_411630:                             ; CODE XREF: sub_4111A0+476↑j
.text:00411630                 mov     ebp, [esp+6Ch+String1]
.text:00411634                 xor     esi, esi
.text:00411636                 xor     edi, edi
.text:00411638                 add     ebp, ebx
.text:0041163A                 jz      short loc_411644
.text:0041163C                 movzx   ecx, byte ptr [ebp+0]
.text:00411640                 test    cl, cl
.text:00411642                 jnz     short loc_411657
.text:00411644
.text:00411644 loc_411644:                             ; CODE XREF: sub_4111A0+49A↑j
.text:00411644                 xor     eax, eax
.text:00411646                 xor     edx, edx
.text:00411648
.text:00411648 loc_411648:                             ; CODE XREF: sub_4111A0+4FE↓j
.text:00411648                 mov     ebp, [esp+6Ch+arg_4]
.text:0041164C                 mov     [ebp+8], eax
.text:0041164F                 mov     [ebp+0Ch], edx
.text:00411652                 jmp     loc_4111FD
.text:00411657 ; ---------------------------------------------------------------------------
.text:00411657
.text:00411657 loc_411657:                             ; CODE XREF: sub_4111A0+4A2↑j
.text:00411657                                         ; sub_4111A0+4F8↓j
.text:00411657                 shld    edi, esi, 8
.text:0041165B                 movsx   eax, cl
.text:0041165E                 shl     esi, 8
.text:00411661                 cdq
.text:00411662                 add     esi, eax
.text:00411664                 adc     edi, edx
.text:00411666                 mov     edx, edi
.text:00411668                 xor     ebx, ebx
.text:0041166A                 and     edx, 0FF000000h
.text:00411670                 mov     eax, edx
.text:00411672                 or      eax, ebx
.text:00411674                 jz      short loc_41168F
.text:00411676                 mov     ecx, edx
.text:00411678                 xor     eax, eax
.text:0041167A                 shr     ecx, 10h
.text:0041167D                 mov     edx, esi
.text:0041167F                 xor     edx, ecx
.text:00411681                 mov     ecx, edi
.text:00411683                 xor     ecx, eax
.text:00411685                 mov     esi, edx
.text:00411687                 mov     edi, ecx
.text:00411689                 and     edi, 0FFFFFFh
.text:0041168F
.text:0041168F loc_41168F:                             ; CODE XREF: sub_4111A0+4D4↑j
.text:0041168F                 inc     ebp
.text:00411690                 movzx   ebx, byte ptr [ebp+0]
.text:00411694                 test    bl, bl
.text:00411696                 mov     cl, bl
.text:00411698                 jnz     short loc_411657
.text:0041169A                 mov     eax, esi
.text:0041169C                 mov     edx, edi
.text:0041169E                 jmp     short loc_411648
.text:0041169E sub_4111A0      endp
.text:0041169E
.text:004116A0
.text:004116A0 ; =============== S U B R O U T I N E =======================================
.text:004116A0
.text:004116A0
.text:004116A0 ; int __cdecl sub_4116A0(LPCSTR)
.text:004116A0 sub_4116A0      proc near               ; CODE XREF: sub_412E70+CA↓p
.text:004116A0
.text:004116A0 lpRootPathName  = dword ptr -83Ch
.text:004116A0 lpVolumeNameBuffer= dword ptr -838h
.text:004116A0 nVolumeNameSize = dword ptr -834h
.text:004116A0 lpVolumeSerialNumber= dword ptr -830h
.text:004116A0 lpMaximumComponentLength= dword ptr -82Ch
.text:004116A0 lpFileSystemFlags= dword ptr -828h
.text:004116A0 lpFileSystemNameBuffer= dword ptr -824h
.text:004116A0 nFileSystemNameSize= dword ptr -820h
.text:004116A0 VolumeSerialNumber= dword ptr -818h
.text:004116A0 MaximumComponentLength= dword ptr -814h
.text:004116A0 FileSystemFlags = dword ptr -810h
.text:004116A0 FileSystemNameBuffer= byte ptr -80Ch
.text:004116A0 VolumeNameBuffer= byte ptr -40Ch
.text:004116A0 var_4           = dword ptr -4
.text:004116A0 arg_0           = dword ptr  4
.text:004116A0
.text:004116A0                 sub     esp, 83Ch
.text:004116A6                 mov     [esp+83Ch+var_4], ebx
.text:004116AD                 mov     ebx, [esp+83Ch+arg_0]
.text:004116B4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004116B7                 call    sub_412D50
.text:004116BC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004116BF                 call    sub_412920
.text:004116C4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004116C7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004116CB                 mov     ebx, eax
.text:004116CD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004116D1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004116D5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004116D9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004116DD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004116E1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004116E5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004116EC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004116F0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004116F4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004116FC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00411704                 call    GetVolumeInformationA
.text:00411709                 sub     esp, 20h
.text:0041170C                 test    eax, eax
.text:0041170E                 setz    cl
.text:00411711                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00411714                 movzx   edx, cl
.text:00411717                 dec     edx
.text:00411718                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0041171C                 call    free
.text:00411721                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00411725                 mov     ebx, [esp+83Ch+var_4]
.text:0041172C                 add     esp, 83Ch
.text:00411732                 retn
.text:00411732 sub_4116A0      endp
.text:00411732
.text:00411732 ; ---------------------------------------------------------------------------
.text:00411733                 align 10h
.text:00411740                 push    ebp
.text:00411741                 push    edi
.text:00411742                 xor     edi, edi
.text:00411744                 push    esi
.text:00411745                 xor     esi, esi
.text:00411747                 push    ebx
.text:00411748                 mov     ebp, [esp+14h]
.text:0041174C                 test    ebp, ebp
.text:0041174E                 jz      short loc_411758
.text:00411750                 movzx   ecx, byte ptr [ebp+0]
.text:00411754                 test    cl, cl
.text:00411756                 jnz     short loc_411761
.text:00411758
.text:00411758 loc_411758:                             ; CODE XREF: .text:0041174E↑j
.text:00411758                 xor     eax, eax
.text:0041175A                 xor     edx, edx
.text:0041175C
.text:0041175C loc_41175C:                             ; CODE XREF: .text:004117A8↓j
.text:0041175C                 pop     ebx
.text:0041175D                 pop     esi
.text:0041175E                 pop     edi
.text:0041175F                 pop     ebp
.text:00411760                 retn
.text:00411761 ; ---------------------------------------------------------------------------
.text:00411761
.text:00411761 loc_411761:                             ; CODE XREF: .text:00411756↑j
.text:00411761                                         ; .text:004117A2↓j
.text:00411761                 shld    edi, esi, 8
.text:00411765                 movsx   eax, cl
.text:00411768                 shl     esi, 8
.text:0041176B                 cdq
.text:0041176C                 add     esi, eax
.text:0041176E                 adc     edi, edx
.text:00411770                 mov     edx, edi
.text:00411772                 xor     ebx, ebx
.text:00411774                 and     edx, 0FF000000h
.text:0041177A                 mov     eax, edx
.text:0041177C                 or      eax, ebx
.text:0041177E                 jz      short loc_411799
.text:00411780                 mov     ecx, edx
.text:00411782                 xor     eax, eax
.text:00411784                 shr     ecx, 10h
.text:00411787                 mov     edx, esi
.text:00411789                 xor     edx, ecx
.text:0041178B                 mov     ecx, edi
.text:0041178D                 xor     ecx, eax
.text:0041178F                 mov     esi, edx
.text:00411791                 mov     edi, ecx
.text:00411793                 and     edi, 0FFFFFFh
.text:00411799
.text:00411799 loc_411799:                             ; CODE XREF: .text:0041177E↑j
.text:00411799                 inc     ebp
.text:0041179A                 movzx   ebx, byte ptr [ebp+0]
.text:0041179E                 test    bl, bl
.text:004117A0                 mov     cl, bl
.text:004117A2                 jnz     short loc_411761
.text:004117A4                 mov     eax, esi
.text:004117A6                 mov     edx, edi
.text:004117A8                 jmp     short loc_41175C
.text:004117A8 ; ---------------------------------------------------------------------------
.text:004117AA                 align 10h
.text:004117B0                 sub     esp, 2Ch
.text:004117B3                 lea     edx, [esp+24h]
.text:004117B7                 lea     ecx, [esp+28h]
.text:004117BB                 mov     [esp+0Ch], edx
.text:004117BF                 lea     edx, [esp+1Ch]
.text:004117C3                 mov     [esp+4], edx
.text:004117C7                 mov     edx, [esp+30h]
.text:004117CB                 mov     [esp+10h], ecx
.text:004117CF                 lea     ecx, [esp+20h]
.text:004117D3                 mov     [esp+8], ecx
.text:004117D7                 mov     [esp], edx
.text:004117DA                 call    sub_413770
.text:004117DF                 test    eax, eax
.text:004117E1                 jnz     short loc_411803
.text:004117E3                 mov     dword ptr [esp+1Ch], 1
.text:004117EB                 mov     dword ptr [esp+20h], 200h
.text:004117F3                 mov     dword ptr [esp+24h], 0
.text:004117FB                 mov     dword ptr [esp+28h], 0
.text:00411803
.text:00411803 loc_411803:                             ; CODE XREF: .text:004117E1↑j
.text:00411803                 mov     eax, [esp+20h]
.text:00411807                 mov     ecx, [esp+1Ch]
.text:0041180B                 add     esp, 2Ch
.text:0041180E                 imul    eax, ecx
.text:00411811                 retn
.text:00411811 ; ---------------------------------------------------------------------------
.text:00411812                 align 10h
.text:00411820                 sub     esp, 1Ch
.text:00411823                 mov     eax, [esp+20h]
.text:00411827                 mov     [esp+14h], esi
.text:0041182B                 mov     [esp+18h], edi
.text:0041182F                 test    eax, eax
.text:00411831                 jz      short loc_411870
.text:00411833                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041183B                 mov     [esp], eax
.text:0041183E                 call    strrchr
.text:00411843                 test    eax, eax
.text:00411845                 jz      short loc_411870
.text:00411847                 cld
.text:00411848                 mov     esi, eax
.text:0041184A                 mov     edi, offset aLnk ; ".lnk"
.text:0041184F                 mov     ecx, 5
.text:00411854                 repe cmpsb
.text:00411856                 setz    dl
.text:00411859                 movzx   eax, dl
.text:0041185C                 lea     esi, [esi+0]
.text:00411860
.text:00411860 loc_411860:                             ; CODE XREF: .text:00411872↓j
.text:00411860                 mov     esi, [esp+14h]
.text:00411864                 mov     edi, [esp+18h]
.text:00411868                 add     esp, 1Ch
.text:0041186B                 retn
.text:0041186B ; ---------------------------------------------------------------------------
.text:0041186C                 align 10h
.text:00411870
.text:00411870 loc_411870:                             ; CODE XREF: .text:00411831↑j
.text:00411870                                         ; .text:00411845↑j
.text:00411870                 xor     eax, eax
.text:00411872                 jmp     short loc_411860
.text:00411872 ; ---------------------------------------------------------------------------
.text:00411874                 align 10h
.text:00411880                 sub     esp, 1Ch
.text:00411883                 mov     [esp+10h], ebx
.text:00411887                 mov     ebx, [esp+20h]
.text:0041188B                 mov     [esp+14h], esi
.text:0041188F                 mov     [esp+18h], edi
.text:00411893                 xor     edi, edi
.text:00411895                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0041189C                 call    GetModuleHandleA
.text:004118A1                 sub     esp, 4
.text:004118A4                 mov     esi, eax
.text:004118A6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004118AE                 mov     [esp], eax
.text:004118B1                 call    GetProcAddress
.text:004118B6                 sub     esp, 8
.text:004118B9                 test    eax, eax
.text:004118BB                 jz      short loc_4118D1
.text:004118BD                 mov     [esp], ebx
.text:004118C0                 lea     ecx, [esp+0Ch]
.text:004118C4                 mov     [esp+4], ecx
.text:004118C8                 call    eax
.text:004118CA                 sub     esp, 8
.text:004118CD                 test    eax, eax
.text:004118CF                 jnz     short loc_411930
.text:004118D1
.text:004118D1 loc_4118D1:                             ; CODE XREF: .text:004118BB↑j
.text:004118D1                 mov     eax, ds:dword_41B830
.text:004118D6                 test    eax, eax
.text:004118D8                 jz      short loc_411950
.text:004118DA
.text:004118DA loc_4118DA:                             ; CODE XREF: .text:00411963↓j
.text:004118DA                                         ; .text:00411975↓j
.text:004118DA                 test    ebx, ebx
.text:004118DC                 jz      short loc_4118E3
.text:004118DE                 cmp     byte ptr [ebx], 0
.text:004118E1                 jnz     short loc_411900
.text:004118E3
.text:004118E3 loc_4118E3:                             ; CODE XREF: .text:004118DC↑j
.text:004118E3                                         ; .text:00411914↓j ...
.text:004118E3                 mov     [esp], esi
.text:004118E6                 call    FreeLibrary
.text:004118EB                 sub     esp, 4
.text:004118EE                 mov     eax, edi
.text:004118F0                 mov     ebx, [esp+10h]
.text:004118F4                 mov     esi, [esp+14h]
.text:004118F8                 mov     edi, [esp+18h]
.text:004118FC                 add     esp, 1Ch
.text:004118FF                 retn
.text:00411900 ; ---------------------------------------------------------------------------
.text:00411900
.text:00411900 loc_411900:                             ; CODE XREF: .text:004118E1↑j
.text:00411900                 mov     [esp], ebx
.text:00411903                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041190B                 call    strrchr
.text:00411910                 test    eax, eax
.text:00411912                 mov     ebx, eax
.text:00411914                 jz      short loc_4118E3
.text:00411916                 mov     [esp+4], eax
.text:0041191A                 mov     ecx, ds:dword_41B830
.text:00411920                 mov     [esp], ecx
.text:00411923                 call    strstr
.text:00411928                 test    eax, eax
.text:0041192A                 jz      short loc_411937
.text:0041192C                 lea     esi, [esi+0]
.text:00411930
.text:00411930 loc_411930:                             ; CODE XREF: .text:004118CF↑j
.text:00411930                                         ; .text:0041194D↓j
.text:00411930                 mov     edi, 1
.text:00411935                 jmp     short loc_4118E3
.text:00411937 ; ---------------------------------------------------------------------------
.text:00411937
.text:00411937 loc_411937:                             ; CODE XREF: .text:0041192A↑j
.text:00411937                 mov     [esp+4], ebx
.text:0041193B                 mov     ebx, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:00411941                 mov     [esp], ebx
.text:00411944                 call    strstr
.text:00411949                 test    eax, eax
.text:0041194B                 jz      short loc_4118E3
.text:0041194D                 jmp     short loc_411930
.text:0041194D ; ---------------------------------------------------------------------------
.text:0041194F                 align 10h
.text:00411950
.text:00411950 loc_411950:                             ; CODE XREF: .text:004118D8↑j
.text:00411950                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00411957                 call    getenv
.text:0041195C                 mov     ds:dword_41B830, eax
.text:00411961                 test    eax, eax
.text:00411963                 jnz     loc_4118DA
.text:00411969                 mov     edx, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:0041196F                 mov     ds:dword_41B830, edx
.text:00411975                 jmp     loc_4118DA
.text:00411975 ; ---------------------------------------------------------------------------
.text:0041197A                 align 10h
.text:00411980                 sub     esp, 0Ch
.text:00411983                 mov     edx, [esp+10h]
.text:00411987                 mov     [esp], edx
.text:0041198A                 call    GetFileType
.text:0041198F                 sub     esp, 4
.text:00411992                 xor     edx, edx
.text:00411994                 cmp     eax, 2
.text:00411997                 jz      short loc_4119B0
.text:00411999                 cmp     eax, 3
.text:0041199C                 jz      short loc_4119A4
.text:0041199E
.text:0041199E loc_41199E:                             ; CODE XREF: .text:004119A9↓j
.text:0041199E                                         ; .text:004119B5↓j
.text:0041199E                 mov     eax, edx
.text:004119A0                 add     esp, 0Ch
.text:004119A3                 retn
.text:004119A4 ; ---------------------------------------------------------------------------
.text:004119A4
.text:004119A4 loc_4119A4:                             ; CODE XREF: .text:0041199C↑j
.text:004119A4                 mov     edx, 1000h
.text:004119A9                 jmp     short loc_41199E
.text:004119A9 ; ---------------------------------------------------------------------------
.text:004119AB                 align 10h
.text:004119B0
.text:004119B0 loc_4119B0:                             ; CODE XREF: .text:00411997↑j
.text:004119B0                 mov     edx, 2000h
.text:004119B5                 jmp     short loc_41199E
.text:004119B5 ; ---------------------------------------------------------------------------
.text:004119B7                 align 10h
.text:004119C0                 mov     ecx, [esp+4]
.text:004119C4                 xor     edx, edx
.text:004119C6                 test    cl, 10h
.text:004119C9                 setz    dl
.text:004119CC                 dec     edx
.text:004119CD                 and     edx, 0FFFFC000h
.text:004119D3                 add     edx, 8000h
.text:004119D9                 or      edx, 124h
.text:004119DF                 test    cl, 1
.text:004119E2                 movzx   eax, dx
.text:004119E5                 jnz     short locret_4119EC
.text:004119E7                 or      eax, 92h
.text:004119EC
.text:004119EC locret_4119EC:                          ; CODE XREF: .text:004119E5↑j
.text:004119EC                 retn
.text:004119EC ; ---------------------------------------------------------------------------
.text:004119ED                 align 10h
.text:004119F0                 sub     esp, 2Ch
.text:004119F3                 mov     [esp+20h], esi
.text:004119F7                 mov     esi, [esp+30h]
.text:004119FB                 mov     [esp+1Ch], ebx
.text:004119FF                 xor     ebx, ebx
.text:00411A01                 test    esi, esi
.text:00411A03                 mov     [esp+24h], edi
.text:00411A07                 mov     [esp+28h], ebp
.text:00411A0B                 jz      short loc_411A60
.text:00411A0D                 cmp     byte ptr [esi], 0
.text:00411A10                 jnz     short loc_411A64
.text:00411A12
.text:00411A12 loc_411A12:                             ; CODE XREF: .text:00411ACC↓j
.text:00411A12                                         ; .text:00411AD7↓j
.text:00411A12                 test    esi, esi
.text:00411A14                 jz      short loc_411A60
.text:00411A16                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411A1E                 mov     [esp], esi
.text:00411A21                 call    strrchr
.text:00411A26                 test    eax, eax
.text:00411A28                 jz      short loc_411A60
.text:00411A2A                 cld
.text:00411A2B                 mov     ecx, 5
.text:00411A30                 mov     esi, eax
.text:00411A32                 mov     edi, offset aLnk ; ".lnk"
.text:00411A37                 repe cmpsb
.text:00411A39                 setz    cl
.text:00411A3C                 movzx   eax, cl
.text:00411A3F                 nop
.text:00411A40
.text:00411A40 loc_411A40:                             ; CODE XREF: .text:00411A62↓j
.text:00411A40                 test    eax, eax
.text:00411A42                 jz      short loc_411A4A
.text:00411A44                 or      ebx, 0A000h
.text:00411A4A
.text:00411A4A loc_411A4A:                             ; CODE XREF: .text:00411A42↑j
.text:00411A4A                 mov     eax, ebx
.text:00411A4C                 mov     esi, [esp+20h]
.text:00411A50                 mov     ebx, [esp+1Ch]
.text:00411A54                 mov     edi, [esp+24h]
.text:00411A58                 mov     ebp, [esp+28h]
.text:00411A5C                 add     esp, 2Ch
.text:00411A5F                 retn
.text:00411A60 ; ---------------------------------------------------------------------------
.text:00411A60
.text:00411A60 loc_411A60:                             ; CODE XREF: .text:00411A0B↑j
.text:00411A60                                         ; .text:00411A14↑j ...
.text:00411A60                 xor     eax, eax
.text:00411A62                 jmp     short loc_411A40
.text:00411A64 ; ---------------------------------------------------------------------------
.text:00411A64
.text:00411A64 loc_411A64:                             ; CODE XREF: .text:00411A10↑j
.text:00411A64                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00411A6B                 call    GetModuleHandleA
.text:00411A70                 sub     esp, 4
.text:00411A73                 mov     ebp, eax
.text:00411A75                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00411A7D                 mov     [esp], eax
.text:00411A80                 call    GetProcAddress
.text:00411A85                 sub     esp, 8
.text:00411A88                 test    eax, eax
.text:00411A8A                 mov     dword ptr [esp+14h], 0
.text:00411A92                 jz      short loc_411AA8
.text:00411A94                 mov     [esp], esi
.text:00411A97                 lea     ecx, [esp+18h]
.text:00411A9B                 mov     [esp+4], ecx
.text:00411A9F                 call    eax
.text:00411AA1                 sub     esp, 8
.text:00411AA4                 test    eax, eax
.text:00411AA6                 jnz     short loc_411B08
.text:00411AA8
.text:00411AA8 loc_411AA8:                             ; CODE XREF: .text:00411A92↑j
.text:00411AA8                 mov     edx, ds:dword_41B830
.text:00411AAE                 test    edx, edx
.text:00411AB0                 jz      short loc_411B30
.text:00411AB2
.text:00411AB2 loc_411AB2:                             ; CODE XREF: .text:00411B43↓j
.text:00411AB2                                         ; .text:00411B55↓j
.text:00411AB2                 test    esi, esi
.text:00411AB4                 jz      short loc_411ABB
.text:00411AB6                 cmp     byte ptr [esi], 0
.text:00411AB9                 jnz     short loc_411ADC
.text:00411ABB
.text:00411ABB loc_411ABB:                             ; CODE XREF: .text:00411AB4↑j
.text:00411ABB                                         ; .text:00411AF0↓j ...
.text:00411ABB                 mov     [esp], ebp
.text:00411ABE                 call    FreeLibrary
.text:00411AC3                 sub     esp, 4
.text:00411AC6                 mov     eax, [esp+14h]
.text:00411ACA                 test    eax, eax
.text:00411ACC                 jz      loc_411A12
.text:00411AD2                 mov     ebx, 49h ; 'I'
.text:00411AD7                 jmp     loc_411A12
.text:00411ADC ; ---------------------------------------------------------------------------
.text:00411ADC
.text:00411ADC loc_411ADC:                             ; CODE XREF: .text:00411AB9↑j
.text:00411ADC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411AE4                 mov     [esp], esi
.text:00411AE7                 call    strrchr
.text:00411AEC                 test    eax, eax
.text:00411AEE                 mov     edi, eax
.text:00411AF0                 jz      short loc_411ABB
.text:00411AF2                 mov     [esp+4], eax
.text:00411AF6                 mov     edx, ds:dword_41B830
.text:00411AFC                 mov     [esp], edx
.text:00411AFF                 call    strstr
.text:00411B04                 test    eax, eax
.text:00411B06                 jz      short loc_411B12
.text:00411B08
.text:00411B08 loc_411B08:                             ; CODE XREF: .text:00411AA6↑j
.text:00411B08                                         ; .text:00411B28↓j
.text:00411B08                 mov     dword ptr [esp+14h], 1
.text:00411B10                 jmp     short loc_411ABB
.text:00411B12 ; ---------------------------------------------------------------------------
.text:00411B12
.text:00411B12 loc_411B12:                             ; CODE XREF: .text:00411B06↑j
.text:00411B12                 mov     [esp+4], edi
.text:00411B16                 mov     edi, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:00411B1C                 mov     [esp], edi
.text:00411B1F                 call    strstr
.text:00411B24                 test    eax, eax
.text:00411B26                 jz      short loc_411ABB
.text:00411B28                 jmp     short loc_411B08
.text:00411B28 ; ---------------------------------------------------------------------------
.text:00411B2A                 align 10h
.text:00411B30
.text:00411B30 loc_411B30:                             ; CODE XREF: .text:00411AB0↑j
.text:00411B30                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00411B37                 call    getenv
.text:00411B3C                 mov     ds:dword_41B830, eax
.text:00411B41                 test    eax, eax
.text:00411B43                 jnz     loc_411AB2
.text:00411B49                 mov     ecx, off_41A094 ; ".com;.exe;.bat;.cmd"
.text:00411B4F                 mov     ds:dword_41B830, ecx
.text:00411B55                 jmp     loc_411AB2
.text:00411B55 ; ---------------------------------------------------------------------------
.text:00411B5A                 align 10h
.text:00411B60                 push    esi
.text:00411B61                 push    ebx
.text:00411B62                 sub     esp, 864h
.text:00411B68                 mov     ebx, [esp+870h]
.text:00411B6F                 lea     edx, [esp+830h]
.text:00411B76                 mov     esi, [esp+874h]
.text:00411B7D                 mov     [esp+4], edx
.text:00411B81                 mov     [esp], ebx
.text:00411B84                 call    loc_4109E0
.text:00411B89                 xor     edx, edx
.text:00411B8B                 test    eax, eax
.text:00411B8D                 jz      loc_411C75
.text:00411B93                 mov     ecx, [esp+830h]
.text:00411B9A                 test    cl, 10h
.text:00411B9D                 mov     [esi], ecx
.text:00411B9F                 mov     eax, [esp+834h]
.text:00411BA6                 mov     edx, [esp+838h]
.text:00411BAD                 mov     [esi+4], eax
.text:00411BB0                 mov     [esi+8], edx
.text:00411BB3                 mov     eax, [esp+83Ch]
.text:00411BBA                 mov     edx, [esp+840h]
.text:00411BC1                 mov     [esi+0Ch], eax
.text:00411BC4                 mov     [esi+10h], edx
.text:00411BC7                 mov     edx, [esp+848h]
.text:00411BCE                 mov     eax, [esp+844h]
.text:00411BD5                 mov     [esi+18h], edx
.text:00411BD8                 mov     [esi+14h], eax
.text:00411BDB                 mov     edx, [esp+84Ch]
.text:00411BE2                 mov     [esi+20h], edx
.text:00411BE5                 mov     edx, [esp+850h]
.text:00411BEC                 mov     [esi+24h], edx
.text:00411BEF                 jnz     loc_411C80
.text:00411BF5                 mov     dword ptr [esi+28h], 1
.text:00411BFC
.text:00411BFC loc_411BFC:                             ; CODE XREF: .text:00411C8B↓j
.text:00411BFC                 mov     [esp], ebx
.text:00411BFF                 call    sub_412D50
.text:00411C04                 mov     [esp], eax
.text:00411C07                 call    sub_412920
.text:00411C0C                 mov     [esp], eax
.text:00411C0F                 lea     edx, [esp+30h]
.text:00411C13                 mov     ebx, eax
.text:00411C15                 mov     [esp+18h], edx
.text:00411C19                 lea     ecx, [esp+2Ch]
.text:00411C1D                 lea     edx, [esp+28h]
.text:00411C21                 mov     [esp+14h], ecx
.text:00411C25                 lea     ecx, [esp+24h]
.text:00411C29                 mov     [esp+10h], edx
.text:00411C2D                 lea     edx, [esp+430h]
.text:00411C34                 mov     [esp+0Ch], ecx
.text:00411C38                 mov     [esp+4], edx
.text:00411C3C                 mov     dword ptr [esp+1Ch], 400h
.text:00411C44                 mov     dword ptr [esp+8], 400h
.text:00411C4C                 call    GetVolumeInformationA
.text:00411C51                 sub     esp, 20h
.text:00411C54                 test    eax, eax
.text:00411C56                 setz    cl
.text:00411C59                 mov     [esp], ebx
.text:00411C5C                 movzx   edx, cl
.text:00411C5F                 dec     edx
.text:00411C60                 and     [esp+24h], edx
.text:00411C64                 call    free
.text:00411C69                 mov     ecx, [esp+24h]
.text:00411C6D                 mov     edx, 1
.text:00411C72                 mov     [esi+1Ch], ecx
.text:00411C75
.text:00411C75 loc_411C75:                             ; CODE XREF: .text:00411B8D↑j
.text:00411C75                 add     esp, 864h
.text:00411C7B                 mov     eax, edx
.text:00411C7D                 pop     ebx
.text:00411C7E                 pop     esi
.text:00411C7F                 retn
.text:00411C80 ; ---------------------------------------------------------------------------
.text:00411C80
.text:00411C80 loc_411C80:                             ; CODE XREF: .text:00411BEF↑j
.text:00411C80                 mov     [esp], ebx
.text:00411C83                 call    loc_410B50
.text:00411C88                 mov     [esi+28h], eax
.text:00411C8B                 jmp     loc_411BFC
.text:00411C90 ; ---------------------------------------------------------------------------
.text:00411C90                 push    ebp
.text:00411C91                 xor     edx, edx
.text:00411C93                 push    edi
.text:00411C94                 push    esi
.text:00411C95                 xor     esi, esi
.text:00411C97                 push    ebx
.text:00411C98                 sub     esp, 1Ch
.text:00411C9B                 mov     ebx, [esp+5Ch]
.text:00411C9F                 mov     ecx, [esp+30h]
.text:00411CA3                 mov     edi, [esp+60h]
.text:00411CA7                 or      esi, ebx
.text:00411CA9                 mov     eax, [esp+4Ch]
.text:00411CAD                 or      edi, edx
.text:00411CAF                 mov     ebx, [esp+64h]
.text:00411CB3                 xor     edx, edx
.text:00411CB5                 test    cl, 10h
.text:00411CB8                 setz    dl
.text:00411CBB                 mov     [ebx+10h], eax
.text:00411CBE                 mov     [ebx+8], edi
.text:00411CC1                 mov     [ebx+0Ch], esi
.text:00411CC4                 dec     edx
.text:00411CC5                 and     edx, 0FFFFC000h
.text:00411CCB                 mov     dword ptr [ebx+14h], 0
.text:00411CD2                 add     edx, 8000h
.text:00411CD8                 or      edx, 124h
.text:00411CDE                 test    cl, 1
.text:00411CE1                 movzx   eax, dx
.text:00411CE4                 jnz     short loc_411CEB
.text:00411CE6                 or      eax, 92h
.text:00411CEB
.text:00411CEB loc_411CEB:                             ; CODE XREF: .text:00411CE4↑j
.text:00411CEB                 mov     ebx, [esp+54h]
.text:00411CEF                 xor     edx, edx
.text:00411CF1                 xor     ebp, ebp
.text:00411CF3                 mov     edi, [esp+50h]
.text:00411CF7                 mov     ecx, [esp+64h]
.text:00411CFB                 mov     esi, edi
.text:00411CFD                 or      [ecx], eax
.text:00411CFF                 mov     edi, ebx
.text:00411D01                 or      edi, ebp
.text:00411D03                 mov     ebp, edx
.text:00411D05                 mov     ebx, [esp+64h]
.text:00411D09                 or      ebp, esi
.text:00411D0B                 mov     esi, [esp+58h]
.text:00411D0F                 mov     edx, [esp+40h]
.text:00411D13                 mov     [ebx+30h], edi
.text:00411D16                 mov     [ebx+18h], esi
.text:00411D19                 mov     ecx, edx
.text:00411D1B                 xor     esi, esi
.text:00411D1D                 mov     [ebx+34h], ebp
.text:00411D20                 xor     edx, edx
.text:00411D22                 or      esi, ecx
.text:00411D24                 mov     dword ptr [esp+8], 989680h
.text:00411D2C                 mov     ebx, [esp+3Ch]
.text:00411D30                 mov     ecx, esi
.text:00411D32                 mov     dword ptr [esp+0Ch], 0
.text:00411D3A                 or      ebx, edx
.text:00411D3C                 mov     edx, ebx
.text:00411D3E                 sub     edx, 0D53E8000h
.text:00411D44                 sbb     ecx, 19DB1DEh
.text:00411D4A                 mov     [esp+4], ecx
.text:00411D4E                 mov     [esp], edx
.text:00411D51                 call    sub_418E70
.text:00411D56                 mov     edx, eax
.text:00411D58                 mov     ecx, [esp+64h]
.text:00411D5C                 shr     eax, 1Fh
.text:00411D5F                 dec     eax
.text:00411D60                 and     edx, eax
.text:00411D62                 mov     [ecx+38h], edx
.text:00411D65                 mov     [esp], ebx
.text:00411D68                 mov     [esp+4], esi
.text:00411D6C                 mov     dword ptr [esp+8], 989680h
.text:00411D74                 mov     dword ptr [esp+0Ch], 0
.text:00411D7C                 call    sub_418F90
.text:00411D81                 lea     ecx, [eax+eax*4]
.text:00411D84                 lea     esi, [ecx+ecx*4]
.text:00411D87                 mov     eax, [esp+64h]
.text:00411D8B                 shl     esi, 2
.text:00411D8E                 mov     ebx, esi
.text:00411D90                 shr     ebx, 1Fh
.text:00411D93                 dec     ebx
.text:00411D94                 and     ebx, esi
.text:00411D96                 xor     esi, esi
.text:00411D98                 mov     [eax+3Ch], ebx
.text:00411D9B                 mov     edx, [esp+38h]
.text:00411D9F                 mov     dword ptr [esp+8], 989680h
.text:00411DA7                 mov     ebx, [esp+34h]
.text:00411DAB                 mov     dword ptr [esp+0Ch], 0
.text:00411DB3                 mov     ecx, edx
.text:00411DB5                 xor     edx, edx
.text:00411DB7                 or      ebx, edx
.text:00411DB9                 or      esi, ecx
.text:00411DBB                 mov     edx, ebx
.text:00411DBD                 sub     edx, 0D53E8000h
.text:00411DC3                 mov     ecx, esi
.text:00411DC5                 sbb     ecx, 19DB1DEh
.text:00411DCB                 mov     [esp+4], ecx
.text:00411DCF                 mov     [esp], edx
.text:00411DD2                 call    sub_418E70
.text:00411DD7                 mov     edx, eax
.text:00411DD9                 mov     ecx, [esp+64h]
.text:00411DDD                 shr     eax, 1Fh
.text:00411DE0                 dec     eax
.text:00411DE1                 and     edx, eax
.text:00411DE3                 mov     [ecx+48h], edx
.text:00411DE6                 mov     [esp], ebx
.text:00411DE9                 mov     [esp+4], esi
.text:00411DED                 mov     dword ptr [esp+8], 989680h
.text:00411DF5                 mov     dword ptr [esp+0Ch], 0
.text:00411DFD                 call    sub_418F90
.text:00411E02                 lea     edx, [eax+eax*4]
.text:00411E05                 mov     ebx, [esp+64h]
.text:00411E09                 lea     ecx, [edx+edx*4]
.text:00411E0C                 shl     ecx, 2
.text:00411E0F                 mov     esi, ecx
.text:00411E11                 shr     esi, 1Fh
.text:00411E14                 dec     esi
.text:00411E15                 and     esi, ecx
.text:00411E17                 mov     [ebx+4Ch], esi
.text:00411E1A                 mov     edx, [esp+48h]
.text:00411E1E                 xor     esi, esi
.text:00411E20                 mov     dword ptr [esp+8], 989680h
.text:00411E28                 mov     ebx, [esp+44h]
.text:00411E2C                 mov     dword ptr [esp+0Ch], 0
.text:00411E34                 mov     ecx, edx
.text:00411E36                 xor     edx, edx
.text:00411E38                 or      ebx, edx
.text:00411E3A                 or      esi, ecx
.text:00411E3C                 mov     edx, ebx
.text:00411E3E                 sub     edx, 0D53E8000h
.text:00411E44                 mov     ecx, esi
.text:00411E46                 sbb     ecx, 19DB1DEh
.text:00411E4C                 mov     [esp+4], ecx
.text:00411E50                 mov     [esp], edx
.text:00411E53                 call    sub_418E70
.text:00411E58                 mov     edx, eax
.text:00411E5A                 mov     ecx, [esp+64h]
.text:00411E5E                 shr     eax, 1Fh
.text:00411E61                 dec     eax
.text:00411E62                 and     edx, eax
.text:00411E64                 mov     [ecx+40h], edx
.text:00411E67                 mov     [esp+4], esi
.text:00411E6B                 mov     dword ptr [esp+8], 989680h
.text:00411E73                 mov     dword ptr [esp+0Ch], 0
.text:00411E7B                 mov     [esp], ebx
.text:00411E7E                 call    sub_418F90
.text:00411E83                 lea     edx, [eax+eax*4]
.text:00411E86                 lea     esi, [edx+edx*4]
.text:00411E89                 mov     eax, [esp+64h]
.text:00411E8D                 shl     esi, 2
.text:00411E90                 mov     edx, ebp
.text:00411E92                 mov     ecx, esi
.text:00411E94                 mov     dword ptr [eax+50h], 200h
.text:00411E9B                 shr     ecx, 1Fh
.text:00411E9E                 dec     ecx
.text:00411E9F                 and     ecx, esi
.text:00411EA1                 test    ebp, ebp
.text:00411EA3                 mov     [eax+44h], ecx
.text:00411EA6                 mov     eax, edi
.text:00411EA8                 js      short loc_411EE2
.text:00411EAA
.text:00411EAA loc_411EAA:                             ; CODE XREF: .text:00411EEA↓j
.text:00411EAA                 xor     esi, esi
.text:00411EAC                 mov     ebp, edi
.text:00411EAE                 mov     ecx, eax
.text:00411EB0                 shrd    ecx, edx, 9
.text:00411EB4                 mov     ebx, edx
.text:00411EB6                 and     ebp, 1FFh
.text:00411EBC                 mov     eax, esi
.text:00411EBE                 sar     ebx, 9
.text:00411EC1                 or      eax, ebp
.text:00411EC3                 jz      short loc_411ECB
.text:00411EC5                 add     ecx, 1
.text:00411EC8                 adc     ebx, 0
.text:00411ECB
.text:00411ECB loc_411ECB:                             ; CODE XREF: .text:00411EC3↑j
.text:00411ECB                 mov     edx, [esp+64h]
.text:00411ECF                 mov     eax, 1
.text:00411ED4                 mov     [edx+58h], ecx
.text:00411ED7                 mov     [edx+5Ch], ebx
.text:00411EDA                 add     esp, 1Ch
.text:00411EDD                 pop     ebx
.text:00411EDE                 pop     esi
.text:00411EDF                 pop     edi
.text:00411EE0                 pop     ebp
.text:00411EE1                 retn
.text:00411EE2 ; ---------------------------------------------------------------------------
.text:00411EE2
.text:00411EE2 loc_411EE2:                             ; CODE XREF: .text:00411EA8↑j
.text:00411EE2                 add     eax, 1FFh
.text:00411EE7                 adc     edx, 0
.text:00411EEA                 jmp     short loc_411EAA
.text:00411EEA ; ---------------------------------------------------------------------------
.text:00411EEC                 align 10h
.text:00411EF0                 push    ebp
.text:00411EF1                 push    edi
.text:00411EF2                 xor     edi, edi
.text:00411EF4                 push    esi
.text:00411EF5                 xor     esi, esi
.text:00411EF7                 push    ebx
.text:00411EF8                 sub     esp, 0Ch
.text:00411EFB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00411F02                 call    LoadLibraryA
.text:00411F07                 sub     esp, 4
.text:00411F0A                 mov     ebp, eax
.text:00411F0C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00411F14                 mov     [esp], eax
.text:00411F17                 call    GetProcAddress
.text:00411F1C                 sub     esp, 8
.text:00411F1F                 test    eax, eax
.text:00411F21                 jz      short loc_411F52
.text:00411F23                 lea     ecx, [esp+8]
.text:00411F27                 mov     [esp+4], ecx
.text:00411F2B                 mov     ecx, [esp+20h]
.text:00411F2F                 mov     [esp], ecx
.text:00411F32                 call    eax
.text:00411F34                 sub     esp, 8
.text:00411F37                 mov     ebx, eax
.text:00411F39                 cmp     eax, 0FFFFFFFFh
.text:00411F3C                 jz      short loc_411F6D
.text:00411F3E
.text:00411F3E loc_411F3E:                             ; CODE XREF: .text:00411F76↓j
.text:00411F3E                 mov     esi, [esp+8]
.text:00411F42                 mov     ecx, ebx
.text:00411F44                 xor     edi, edi
.text:00411F46                 xor     ebx, ebx
.text:00411F48                 mov     edx, esi
.text:00411F4A                 mov     esi, ecx
.text:00411F4C                 or      esi, edi
.text:00411F4E                 mov     edi, ebx
.text:00411F50                 or      edi, edx
.text:00411F52
.text:00411F52 loc_411F52:                             ; CODE XREF: .text:00411F21↑j
.text:00411F52                                         ; .text:00411F74↓j
.text:00411F52                 test    ebp, ebp
.text:00411F54                 jz      short loc_411F61
.text:00411F56                 mov     [esp], ebp
.text:00411F59                 call    FreeLibrary
.text:00411F5E                 sub     esp, 4
.text:00411F61
.text:00411F61 loc_411F61:                             ; CODE XREF: .text:00411F54↑j
.text:00411F61                 add     esp, 0Ch
.text:00411F64                 mov     eax, esi
.text:00411F66                 mov     edx, edi
.text:00411F68                 pop     ebx
.text:00411F69                 pop     esi
.text:00411F6A                 pop     edi
.text:00411F6B                 pop     ebp
.text:00411F6C                 retn
.text:00411F6D ; ---------------------------------------------------------------------------
.text:00411F6D
.text:00411F6D loc_411F6D:                             ; CODE XREF: .text:00411F3C↑j
.text:00411F6D                 call    GetLastError
.text:00411F72                 test    eax, eax
.text:00411F74                 jnz     short loc_411F52
.text:00411F76                 jmp     short loc_411F3E
.text:00411F76 ; ---------------------------------------------------------------------------
.text:00411F78                 align 10h
.text:00411F80
.text:00411F80 ; =============== S U B R O U T I N E =======================================
.text:00411F80
.text:00411F80
.text:00411F80 ; int __cdecl sub_411F80(LPCSTR, int)
.text:00411F80 sub_411F80      proc near               ; CODE XREF: sub_417340-4E7F↓p
.text:00411F80
.text:00411F80 lpRootPathName  = dword ptr -8FCh
.text:00411F80 lpVolumeNameBuffer= dword ptr -8F8h
.text:00411F80 nVolumeNameSize = dword ptr -8F4h
.text:00411F80 lpVolumeSerialNumber= dword ptr -8F0h
.text:00411F80 lpMaximumComponentLength= dword ptr -8ECh
.text:00411F80 lpFileSystemFlags= dword ptr -8E8h
.text:00411F80 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00411F80 nFileSystemNameSize= dword ptr -8E0h
.text:00411F80 VolumeSerialNumber= dword ptr -8D8h
.text:00411F80 MaximumComponentLength= dword ptr -8D4h
.text:00411F80 FileSystemFlags = dword ptr -8D0h
.text:00411F80 var_8CC         = dword ptr -8CCh
.text:00411F80 var_8C8         = dword ptr -8C8h
.text:00411F80 var_8C4         = dword ptr -8C4h
.text:00411F80 var_8C0         = dword ptr -8C0h
.text:00411F80 var_8BC         = dword ptr -8BCh
.text:00411F80 var_8B8         = dword ptr -8B8h
.text:00411F80 var_8B4         = dword ptr -8B4h
.text:00411F80 var_8B0         = dword ptr -8B0h
.text:00411F80 var_8AC         = dword ptr -8ACh
.text:00411F80 var_8A8         = dword ptr -8A8h
.text:00411F80 var_8A4         = dword ptr -8A4h
.text:00411F80 var_8A0         = dword ptr -8A0h
.text:00411F80 var_89C         = dword ptr -89Ch
.text:00411F80 FileSystemNameBuffer= byte ptr -88Ch
.text:00411F80 VolumeNameBuffer= byte ptr -48Ch
.text:00411F80 var_8C          = dword ptr -8Ch
.text:00411F80 var_88          = dword ptr -88h
.text:00411F80 var_84          = dword ptr -84h
.text:00411F80 var_80          = dword ptr -80h
.text:00411F80 var_7C          = dword ptr -7Ch
.text:00411F80 var_78          = dword ptr -78h
.text:00411F80 var_74          = dword ptr -74h
.text:00411F80 var_70          = dword ptr -70h
.text:00411F80 var_6C          = dword ptr -6Ch
.text:00411F80 var_5C          = dword ptr -5Ch
.text:00411F80 var_58          = dword ptr -58h
.text:00411F80 var_54          = dword ptr -54h
.text:00411F80 var_50          = dword ptr -50h
.text:00411F80 var_4C          = dword ptr -4Ch
.text:00411F80 var_48          = dword ptr -48h
.text:00411F80 var_44          = dword ptr -44h
.text:00411F80 var_3C          = dword ptr -3Ch
.text:00411F80 var_38          = dword ptr -38h
.text:00411F80 var_34          = dword ptr -34h
.text:00411F80 arg_0           = dword ptr  4
.text:00411F80 arg_4           = dword ptr  8
.text:00411F80
.text:00411F80                 push    ebp
.text:00411F81                 xor     eax, eax
.text:00411F83                 mov     ecx, 0Dh
.text:00411F88                 push    edi
.text:00411F89                 push    esi
.text:00411F8A                 push    ebx
.text:00411F8B                 sub     esp, 8ECh
.text:00411F91                 lea     edi, [esp+8FCh+var_5C]
.text:00411F98                 cld
.text:00411F99                 lea     edx, [esp+8FCh+var_8C]
.text:00411FA0                 rep stosd
.text:00411FA2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:00411FA6                 lea     esi, [esp+8FCh+var_5C]
.text:00411FAD                 mov     edx, [esp+8FCh+arg_0]
.text:00411FB4                 mov     [esp+8FCh+lpRootPathName], edx
.text:00411FB7                 call    loc_4109E0
.text:00411FBC                 test    eax, eax
.text:00411FBE                 mov     edx, 0FFFFFFFFh
.text:00411FC3                 jz      loc_412354
.text:00411FC9                 mov     edx, [esp+8FCh+var_88]
.text:00411FD0                 mov     ebp, [esp+8FCh+var_84]
.text:00411FD7                 mov     edi, [esp+8FCh+var_80]
.text:00411FDE                 mov     [esp+8FCh+var_58], edx
.text:00411FE5                 mov     ecx, [esp+8FCh+var_7C]
.text:00411FEC                 mov     ebx, [esp+8FCh+var_8C]
.text:00411FF3                 mov     [esp+8FCh+var_54], ebp
.text:00411FFA                 mov     edx, [esp+8FCh+var_78]
.text:00412001                 mov     ebp, [esp+8FCh+var_74]
.text:00412008                 mov     [esp+8FCh+var_50], edi
.text:0041200F                 test    bl, 10h
.text:00412012                 mov     edi, [esp+8FCh+var_70]
.text:00412019                 mov     [esp+8FCh+var_4C], ecx
.text:00412020                 mov     ecx, [esp+8FCh+var_6C]
.text:00412027                 mov     [esp+8FCh+var_5C], ebx
.text:0041202E                 mov     [esp+8FCh+var_48], edx
.text:00412035                 mov     [esp+8FCh+var_44], ebp
.text:0041203C                 mov     [esp+8FCh+var_3C], edi
.text:00412043                 mov     [esp+8FCh+var_38], ecx
.text:0041204A                 jnz     loc_412370
.text:00412050                 mov     ebx, 1
.text:00412055                 mov     [esp+8FCh+var_34], ebx
.text:0041205C
.text:0041205C loc_41205C:                             ; CODE XREF: sub_411F80+406↓j
.text:0041205C                 mov     eax, [esp+8FCh+arg_0]
.text:00412063                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00412067                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0041206B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0041206E                 call    sub_412D50
.text:00412073                 mov     [esp+8FCh+lpRootPathName], eax
.text:00412076                 call    sub_412920
.text:0041207B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0041207F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00412083                 mov     ebp, eax
.text:00412085                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00412089                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0041208D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00412094                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00412098                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0041209C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004120A0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004120A8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004120B0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004120B3                 call    GetVolumeInformationA
.text:004120B8                 sub     esp, 20h
.text:004120BB                 test    eax, eax
.text:004120BD                 lea     edi, [esp+8FCh+var_8CC]
.text:004120C1                 setz    bl
.text:004120C4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004120C7                 xor     ebp, ebp
.text:004120C9                 movzx   edx, bl
.text:004120CC                 dec     edx
.text:004120CD                 xor     ebx, ebx
.text:004120CF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004120D3                 call    free
.text:004120D8                 cld
.text:004120D9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004120DD                 mov     [esi+1Ch], ecx
.text:004120E0                 mov     ecx, 0Dh
.text:004120E5                 rep movsd
.text:004120E7                 mov     edi, [esp+8FCh+var_8A0]
.text:004120EB                 mov     edx, [esp+8FCh+var_89C]
.text:004120EF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004120F3                 or      ebp, edi
.text:004120F5                 mov     esi, [esp+8FCh+var_8B0]
.text:004120F9                 mov     edi, [esp+8FCh+arg_4]
.text:00412100                 or      edx, ebx
.text:00412102                 mov     [edi+8], edx
.text:00412105                 xor     edx, edx
.text:00412107                 test    cl, 10h
.text:0041210A                 setz    dl
.text:0041210D                 mov     [edi+0Ch], ebp
.text:00412110                 mov     [edi+10h], esi
.text:00412113                 mov     dword ptr [edi+14h], 0
.text:0041211A                 dec     edx
.text:0041211B                 and     edx, 0FFFFC000h
.text:00412121                 add     edx, 8000h
.text:00412127                 or      edx, 124h
.text:0041212D                 test    cl, 1
.text:00412130                 movzx   eax, dx
.text:00412133                 jnz     short loc_41213A
.text:00412135                 or      eax, 92h
.text:0041213A
.text:0041213A loc_41213A:                             ; CODE XREF: sub_411F80+1B3↑j
.text:0041213A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041213E                 xor     edx, edx
.text:00412140                 xor     ebp, ebp
.text:00412142                 mov     edi, [esp+8FCh+var_8AC]
.text:00412146                 mov     ecx, [esp+8FCh+arg_4]
.text:0041214D                 mov     esi, edi
.text:0041214F                 or      [ecx], eax
.text:00412151                 mov     edi, ebx
.text:00412153                 or      edi, ebp
.text:00412155                 mov     ebp, edx
.text:00412157                 mov     ebx, [esp+8FCh+var_8A4]
.text:0041215B                 or      ebp, esi
.text:0041215D                 mov     esi, [esp+8FCh+arg_4]
.text:00412164                 mov     edx, [esp+8FCh+var_8BC]
.text:00412168                 mov     [esi+18h], ebx
.text:0041216B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0041216F                 mov     ecx, edx
.text:00412171                 mov     [esi+30h], edi
.text:00412174                 xor     edx, edx
.text:00412176                 mov     [esi+34h], ebp
.text:00412179                 or      ebx, edx
.text:0041217B                 xor     esi, esi
.text:0041217D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412185                 or      esi, ecx
.text:00412187                 mov     edx, ebx
.text:00412189                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00412191                 sub     edx, 0D53E8000h
.text:00412197                 mov     ecx, esi
.text:00412199                 sbb     ecx, 19DB1DEh
.text:0041219F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004121A3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004121A6                 call    sub_418E70
.text:004121AB                 mov     edx, eax
.text:004121AD                 mov     ecx, [esp+8FCh+arg_4]
.text:004121B4                 shr     eax, 1Fh
.text:004121B7                 dec     eax
.text:004121B8                 and     edx, eax
.text:004121BA                 mov     [ecx+38h], edx
.text:004121BD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004121C0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004121C4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004121CC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004121D4                 call    sub_418F90
.text:004121D9                 lea     ecx, [eax+eax*4]
.text:004121DC                 lea     ebx, [ecx+ecx*4]
.text:004121DF                 mov     eax, [esp+8FCh+arg_4]
.text:004121E6                 shl     ebx, 2
.text:004121E9                 mov     esi, ebx
.text:004121EB                 shr     esi, 1Fh
.text:004121EE                 dec     esi
.text:004121EF                 and     esi, ebx
.text:004121F1                 mov     [eax+3Ch], esi
.text:004121F4                 mov     edx, [esp+8FCh+var_8C4]
.text:004121F8                 xor     esi, esi
.text:004121FA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412202                 mov     ebx, [esp+8FCh+var_8C8]
.text:00412206                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041220E                 mov     ecx, edx
.text:00412210                 xor     edx, edx
.text:00412212                 or      ebx, edx
.text:00412214                 or      esi, ecx
.text:00412216                 mov     edx, ebx
.text:00412218                 sub     edx, 0D53E8000h
.text:0041221E                 mov     ecx, esi
.text:00412220                 sbb     ecx, 19DB1DEh
.text:00412226                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041222A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041222D                 call    sub_418E70
.text:00412232                 mov     edx, eax
.text:00412234                 mov     ecx, [esp+8FCh+arg_4]
.text:0041223B                 shr     eax, 1Fh
.text:0041223E                 dec     eax
.text:0041223F                 and     edx, eax
.text:00412241                 mov     [ecx+48h], edx
.text:00412244                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00412247                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041224B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412253                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041225B                 call    sub_418F90
.text:00412260                 lea     ecx, [eax+eax*4]
.text:00412263                 lea     ebx, [ecx+ecx*4]
.text:00412266                 mov     eax, [esp+8FCh+arg_4]
.text:0041226D                 shl     ebx, 2
.text:00412270                 mov     esi, ebx
.text:00412272                 shr     esi, 1Fh
.text:00412275                 dec     esi
.text:00412276                 and     esi, ebx
.text:00412278                 mov     [eax+4Ch], esi
.text:0041227B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041227F                 xor     esi, esi
.text:00412281                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412289                 mov     ebx, [esp+8FCh+var_8B8]
.text:0041228D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00412295                 mov     ecx, edx
.text:00412297                 xor     edx, edx
.text:00412299                 or      ebx, edx
.text:0041229B                 or      esi, ecx
.text:0041229D                 mov     edx, ebx
.text:0041229F                 sub     edx, 0D53E8000h
.text:004122A5                 mov     ecx, esi
.text:004122A7                 sbb     ecx, 19DB1DEh
.text:004122AD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004122B1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004122B4                 call    sub_418E70
.text:004122B9                 mov     edx, eax
.text:004122BB                 mov     ecx, [esp+8FCh+arg_4]
.text:004122C2                 shr     eax, 1Fh
.text:004122C5                 dec     eax
.text:004122C6                 and     edx, eax
.text:004122C8                 mov     [ecx+40h], edx
.text:004122CB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004122CE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004122D2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004122DA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004122E2                 call    sub_418F90
.text:004122E7                 lea     ebx, [eax+eax*4]
.text:004122EA                 mov     esi, [esp+8FCh+arg_4]
.text:004122F1                 lea     edx, [ebx+ebx*4]
.text:004122F4                 shl     edx, 2
.text:004122F7                 mov     eax, edi
.text:004122F9                 mov     ecx, edx
.text:004122FB                 mov     dword ptr [esi+50h], 200h
.text:00412302                 shr     ecx, 1Fh
.text:00412305                 dec     ecx
.text:00412306                 and     ecx, edx
.text:00412308                 test    ebp, ebp
.text:0041230A                 mov     edx, ebp
.text:0041230C                 mov     [esi+44h], ecx
.text:0041230F                 js      short loc_412361
.text:00412311
.text:00412311 loc_412311:                             ; CODE XREF: sub_411F80+3E9↓j
.text:00412311                 xor     esi, esi
.text:00412313                 mov     ebp, edi
.text:00412315                 mov     ecx, eax
.text:00412317                 shrd    ecx, edx, 9
.text:0041231B                 mov     ebx, edx
.text:0041231D                 and     ebp, 1FFh
.text:00412323                 mov     eax, esi
.text:00412325                 sar     ebx, 9
.text:00412328                 or      eax, ebp
.text:0041232A                 jz      short loc_412332
.text:0041232C                 add     ecx, 1
.text:0041232F                 adc     ebx, 0
.text:00412332
.text:00412332 loc_412332:                             ; CODE XREF: sub_411F80+3AA↑j
.text:00412332                 mov     edx, [esp+8FCh+arg_4]
.text:00412339                 mov     [edx+5Ch], ebx
.text:0041233C                 mov     ebx, [esp+8FCh+arg_0]
.text:00412343                 mov     [edx+58h], ecx
.text:00412346                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041234A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041234D                 call    sub_4111A0
.text:00412352                 xor     edx, edx
.text:00412354
.text:00412354 loc_412354:                             ; CODE XREF: sub_411F80+43↑j
.text:00412354                 add     esp, 8ECh
.text:0041235A                 mov     eax, edx
.text:0041235C                 pop     ebx
.text:0041235D                 pop     esi
.text:0041235E                 pop     edi
.text:0041235F                 pop     ebp
.text:00412360                 retn
.text:00412361 ; ---------------------------------------------------------------------------
.text:00412361
.text:00412361 loc_412361:                             ; CODE XREF: sub_411F80+38F↑j
.text:00412361                 add     eax, 1FFh
.text:00412366                 adc     edx, 0
.text:00412369                 jmp     short loc_412311
.text:00412369 ; ---------------------------------------------------------------------------
.text:0041236B                 align 10h
.text:00412370
.text:00412370 loc_412370:                             ; CODE XREF: sub_411F80+CA↑j
.text:00412370                 mov     eax, [esp+8FCh+arg_0]
.text:00412377                 mov     [esp+8FCh+lpRootPathName], eax
.text:0041237A                 call    loc_410B50
.text:0041237F                 mov     [esp+8FCh+var_34], eax
.text:00412386                 jmp     loc_41205C
.text:00412386 sub_411F80      endp
.text:00412386
.text:00412386 ; ---------------------------------------------------------------------------
.text:0041238B                 align 10h
.text:00412390 ; START OF FUNCTION CHUNK FOR sub_417340
.text:00412390
.text:00412390 loc_412390:                             ; CODE XREF: sub_417340+26↓j
.text:00412390                 cld
.text:00412391                 sub     esp, 2Ch
.text:00412394                 xor     eax, eax
.text:00412396                 mov     [esp+2Ch+var_10], ebx
.text:0041239A                 mov     ecx, 18h
.text:0041239F                 mov     ebx, [esp+2Ch+arg_0]
.text:004123A3                 mov     [esp+2Ch+var_C], esi
.text:004123A7                 mov     esi, [esp+2Ch+arg_4]
.text:004123AB                 test    ebx, ebx
.text:004123AD                 mov     [esp+2Ch+var_8], edi
.text:004123B1                 mov     edi, esi
.text:004123B3                 mov     [esp+2Ch+var_4], ebp
.text:004123B7                 rep stosd
.text:004123B9                 jz      short loc_4123C0
.text:004123BB                 cmp     byte ptr [ebx], 0
.text:004123BE                 jnz     short loc_4123D8
.text:004123C0
.text:004123C0 loc_4123C0:                             ; CODE XREF: sub_417340-4F87↑j
.text:004123C0                 xor     edx, edx
.text:004123C2
.text:004123C2 loc_4123C2:                             ; CODE XREF: sub_417340-4F51↓j
.text:004123C2                                         ; sub_417340-4EA8↓j
.text:004123C2                 mov     ebx, [esp+2Ch+var_10]
.text:004123C6                 mov     eax, edx
.text:004123C8                 mov     esi, [esp+2Ch+var_C]
.text:004123CC                 mov     edi, [esp+2Ch+var_8]
.text:004123D0                 mov     ebp, [esp+2Ch+var_4]
.text:004123D4                 add     esp, 2Ch
.text:004123D7                 retn
.text:004123D8 ; ---------------------------------------------------------------------------
.text:004123D8
.text:004123D8 loc_4123D8:                             ; CODE XREF: sub_417340-4F82↑j
.text:004123D8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004123E0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004123E3                 call    sub_414250
.text:004123E8                 test    eax, eax
.text:004123EA                 mov     edx, 0FFFFFFFFh
.text:004123EF                 jnz     short loc_4123C2
.text:004123F1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004123F4                 call    sub_414100
.text:004123F9                 mov     [esp+2Ch+lpFileName], eax
.text:004123FC                 call    sub_412920
.text:00412401                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00412404                 mov     ebp, eax
.text:00412406                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041240E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00412416                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041241E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00412426                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041242E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00412436                 call    CreateFileA
.text:0041243B                 sub     esp, 1Ch
.text:0041243E                 mov     ebx, eax
.text:00412440                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:00412444                 mov     [esp+2Ch+lpFileName], eax
.text:00412447                 call    loc_410CD0
.text:0041244C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041244F                 mov     edi, eax
.text:00412451                 call    CloseHandle
.text:00412456                 sub     esp, 4
.text:00412459                 cmp     edi, 0FFFFFFFFh
.text:0041245C                 jz      short loc_4124BA
.text:0041245E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00412462                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00412465                 call    sub_4111A0
.text:0041246A
.text:0041246A loc_41246A:                             ; CODE XREF: sub_417340-4E78↓j
.text:0041246A                 mov     edx, [esi]
.text:0041246C                 and     edx, 0F000h
.text:00412472                 cmp     edx, 4000h
.text:00412478                 jz      short loc_4124AD
.text:0041247A
.text:0041247A loc_41247A:                             ; CODE XREF: sub_417340-4E88↓j
.text:0041247A                 cmp     edi, 0FFFFFFFFh
.text:0041247D                 jz      short loc_41249D
.text:0041247F
.text:0041247F loc_41247F:                             ; CODE XREF: sub_417340-4E95↓j
.text:0041247F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00412486                 call    SetErrorMode
.text:0041248B                 sub     esp, 4
.text:0041248E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00412491                 call    free
.text:00412496                 mov     edx, edi
.text:00412498                 jmp     loc_4123C2
.text:0041249D ; ---------------------------------------------------------------------------
.text:0041249D
.text:0041249D loc_41249D:                             ; CODE XREF: sub_417340-4EC3↑j
.text:0041249D                 call    sub_4140B0
.text:004124A2                 mov     esi, eax
.text:004124A4                 call    _errno
.text:004124A9                 mov     [eax], esi
.text:004124AB                 jmp     short loc_41247F
.text:004124AD ; ---------------------------------------------------------------------------
.text:004124AD
.text:004124AD loc_4124AD:                             ; CODE XREF: sub_417340-4EC8↑j
.text:004124AD                 mov     [esp+2Ch+lpFileName], ebp
.text:004124B0                 call    loc_410B50
.text:004124B5                 mov     [esi+18h], eax
.text:004124B8                 jmp     short loc_41247A
.text:004124BA ; ---------------------------------------------------------------------------
.text:004124BA
.text:004124BA loc_4124BA:                             ; CODE XREF: sub_417340-4EE4↑j
.text:004124BA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004124BE                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:004124C1                 call    sub_411F80
.text:004124C6                 mov     edi, eax
.text:004124C8                 jmp     short loc_41246A
.text:004124C8 ; END OF FUNCTION CHUNK FOR sub_417340
.text:004124C8 ; ---------------------------------------------------------------------------
.text:004124CA                 align 10h
.text:004124D0
.text:004124D0 ; =============== S U B R O U T I N E =======================================
.text:004124D0
.text:004124D0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:004124D0
.text:004124D0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:004124D0 _win32_longpath proc near               ; CODE XREF: .text:00412C94↓p
.text:004124D0
.text:004124D0 C               = dword ptr -278h
.text:004124D0 lpFindFileData  = dword ptr -274h
.text:004124D0 Destination     = byte ptr -268h
.text:004124D0 var_267         = byte ptr -267h
.text:004124D0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:004124D0 lpFileName      = dword ptr  8
.text:004124D0
.text:004124D0                 push    ebp
.text:004124D1                 xor     eax, eax
.text:004124D3                 push    edi
.text:004124D4                 push    esi
.text:004124D5                 push    ebx
.text:004124D6                 sub     esp, 26Ch
.text:004124DC                 mov     esi, [esp+278h+lpFileName]
.text:004124E3                 lea     ebp, [esp+278h+Destination]
.text:004124E7                 test    esi, esi
.text:004124E9                 jz      loc_412647
.text:004124EF                 movsx   edx, byte ptr [esi]
.text:004124F2                 mov     [esp+278h+C], edx ; C
.text:004124F5                 call    isalpha
.text:004124FA                 test    eax, eax
.text:004124FC                 jz      short loc_41250F
.text:004124FE                 mov     eax, [esp+278h+lpFileName]
.text:00412505                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00412509                 jz      loc_41284B
.text:0041250F
.text:0041250F loc_41250F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041250F                 mov     edx, [esp+278h+lpFileName]
.text:00412516                 movzx   eax, byte ptr [edx]
.text:00412519                 cmp     al, 2Fh ; '/'
.text:0041251B                 jz      loc_41272B
.text:00412521                 cmp     al, 5Ch ; '\'
.text:00412523                 jz      loc_41272B
.text:00412529
.text:00412529 loc_412529:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00412529                                         ; _win32_longpath+2B1↓j ...
.text:00412529                 mov     [ebp+268h+Destination], 0
.text:0041252D                 movzx   ebx, byte ptr [esi]
.text:00412530                 test    bl, bl
.text:00412532                 jz      loc_412629
.text:00412538                 nop
.text:00412539                 lea     esi, [esi+0]
.text:00412540
.text:00412540 loc_412540:                             ; CODE XREF: _win32_longpath+153↓j
.text:00412540                 cmp     bl, 2Fh ; '/'
.text:00412543                 jz      loc_4126E0
.text:00412549                 cmp     bl, 5Ch ; '\'
.text:0041254C                 jz      loc_4126E0
.text:00412552
.text:00412552 loc_412552:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00412552                                         ; _win32_longpath+22C↓j ...
.text:00412552                 cmp     bl, 2Eh ; '.'
.text:00412555                 jz      loc_412680
.text:0041255B
.text:0041255B loc_41255B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0041255B                                         ; _win32_longpath+203↓j
.text:0041255B                 test    bl, bl
.text:0041255D                 jz      loc_412629
.text:00412563                 cmp     bl, 2Fh ; '/'
.text:00412566                 jz      short loc_412582
.text:00412568                 cmp     bl, 5Ch ; '\'
.text:0041256B                 jz      short loc_412582
.text:0041256D                 lea     esi, [esi+0]
.text:00412570
.text:00412570 loc_412570:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00412570                 inc     esi
.text:00412571                 movzx   ebx, byte ptr [esi]
.text:00412574                 test    bl, bl
.text:00412576                 jz      short loc_412582
.text:00412578                 cmp     bl, 2Fh ; '/'
.text:0041257B                 jz      short loc_412582
.text:0041257D                 cmp     bl, 5Ch ; '\'
.text:00412580                 jnz     short loc_412570
.text:00412582
.text:00412582 loc_412582:                             ; CODE XREF: _win32_longpath+96↑j
.text:00412582                                         ; _win32_longpath+9B↑j ...
.text:00412582                 mov     byte ptr [esi], 0
.text:00412585                 lea     edx, [esp+278h+FindFileData]
.text:0041258C                 mov     eax, [esp+278h+lpFileName]
.text:00412593                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00412597                 mov     [esp+278h+C], eax ; lpFileName
.text:0041259A                 call    FindFirstFileA
.text:0041259F                 mov     [esi], bl
.text:004125A1                 sub     esp, 8
.text:004125A4                 mov     edi, eax
.text:004125A6                 cmp     eax, 0FFFFFFFFh
.text:004125A9                 jz      loc_41266C
.text:004125AF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004125B6                 mov     ecx, ebx
.text:004125B8                 nop
.text:004125B9                 lea     esi, [esi+0]
.text:004125C0
.text:004125C0 loc_4125C0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004125C0                 mov     eax, [ebx]
.text:004125C2                 add     ebx, 4
.text:004125C5                 lea     edx, [eax-1010101h]
.text:004125CB                 not     eax
.text:004125CD                 and     edx, eax
.text:004125CF                 and     edx, 80808080h
.text:004125D5                 jz      short loc_4125C0
.text:004125D7                 test    edx, 8080h
.text:004125DD                 jnz     short loc_4125E5
.text:004125DF                 shr     edx, 10h
.text:004125E2                 add     ebx, 2
.text:004125E5
.text:004125E5 loc_4125E5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:004125E5                 add     dl, dl
.text:004125E7                 sbb     ebx, 3
.text:004125EA                 sub     ebx, ecx
.text:004125EC                 lea     ecx, [esp+278h+Destination]
.text:004125F0                 sub     ecx, ebp
.text:004125F2                 add     ecx, 105h
.text:004125F8                 cmp     ecx, ebx
.text:004125FA                 jle     short loc_412652
.text:004125FC                 mov     [esp+278h+C], ebp ; Destination
.text:004125FF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00412606                 add     ebp, ebx
.text:00412608                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0041260C                 call    strcpy
.text:00412611                 mov     [esp+278h+C], edi ; hFindFile
.text:00412614                 call    FindClose
.text:00412619                 sub     esp, 4
.text:0041261C
.text:0041261C loc_41261C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0041261C                 movzx   ecx, byte ptr [esi]
.text:0041261F                 test    cl, cl
.text:00412621                 mov     bl, cl
.text:00412623                 jnz     loc_412540
.text:00412629
.text:00412629 loc_412629:                             ; CODE XREF: _win32_longpath+62↑j
.text:00412629                                         ; _win32_longpath+8D↑j
.text:00412629                 mov     esi, [esp+278h+lpFileName]
.text:00412630                 lea     ebp, [esp+278h+Destination]
.text:00412634                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00412638                 mov     [esp+278h+C], esi ; Destination
.text:0041263B                 call    strcpy
.text:00412640                 mov     eax, [esp+278h+lpFileName]
.text:00412647
.text:00412647 loc_412647:                             ; CODE XREF: _win32_longpath+19↑j
.text:00412647                                         ; _win32_longpath+19A↓j
.text:00412647                 add     esp, 26Ch
.text:0041264D                 pop     ebx
.text:0041264E                 pop     esi
.text:0041264F                 pop     edi
.text:00412650                 pop     ebp
.text:00412651                 retn
.text:00412652 ; ---------------------------------------------------------------------------
.text:00412652
.text:00412652 loc_412652:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00412652                 mov     [esp+278h+C], edi ; hFindFile
.text:00412655                 call    FindClose
.text:0041265A                 sub     esp, 4
.text:0041265D                 call    _errno
.text:00412662                 mov     dword ptr [eax], 22h ; '"'
.text:00412668
.text:00412668 loc_412668:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00412668                 xor     eax, eax
.text:0041266A                 jmp     short loc_412647
.text:0041266C ; ---------------------------------------------------------------------------
.text:0041266C
.text:0041266C loc_41266C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0041266C                 call    _errno
.text:00412671                 mov     dword ptr [eax], 16h
.text:00412677                 jmp     short loc_412668
.text:00412677 ; ---------------------------------------------------------------------------
.text:00412679                 align 10h
.text:00412680
.text:00412680 loc_412680:                             ; CODE XREF: _win32_longpath+85↑j
.text:00412680                 movzx   eax, byte ptr [esi+1]
.text:00412684                 test    al, al
.text:00412686                 jnz     short loc_4126B5
.text:00412688
.text:00412688 loc_412688:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00412688                                         ; _win32_longpath+1EB↓j ...
.text:00412688                 test    bl, bl
.text:0041268A                 jz      short loc_4126AC
.text:0041268C                 cmp     bl, 2Fh ; '/'
.text:0041268F                 jz      short loc_4126AC
.text:00412691                 cmp     bl, 5Ch ; '\'
.text:00412694                 jz      short loc_4126AC
.text:00412696
.text:00412696 loc_412696:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00412696                 mov     [ebp+268h+Destination], bl
.text:00412699                 inc     esi
.text:0041269A                 inc     ebp
.text:0041269B                 movzx   ebx, byte ptr [esi]
.text:0041269E                 test    bl, bl
.text:004126A0                 jz      short loc_4126AC
.text:004126A2                 cmp     bl, 2Fh ; '/'
.text:004126A5                 jz      short loc_4126AC
.text:004126A7                 cmp     bl, 5Ch ; '\'
.text:004126AA                 jnz     short loc_412696
.text:004126AC
.text:004126AC loc_4126AC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:004126AC                                         ; _win32_longpath+1BF↑j ...
.text:004126AC                 mov     [ebp+268h+Destination], 0
.text:004126B0                 jmp     loc_41261C
.text:004126B5 ; ---------------------------------------------------------------------------
.text:004126B5
.text:004126B5 loc_4126B5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:004126B5                 cmp     al, 2Fh ; '/'
.text:004126B7                 jz      short loc_412688
.text:004126B9                 cmp     al, 5Ch ; '\'
.text:004126BB                 jz      short loc_412688
.text:004126BD                 cmp     al, 2Eh ; '.'
.text:004126BF                 jnz     loc_41255B
.text:004126C5                 movzx   eax, byte ptr [esi+2]
.text:004126C9                 test    al, al
.text:004126CB                 jz      short loc_412688
.text:004126CD                 cmp     al, 2Fh ; '/'
.text:004126CF                 jz      short loc_412688
.text:004126D1                 cmp     al, 5Ch ; '\'
.text:004126D3                 jnz     loc_41255B
.text:004126D9                 jmp     short loc_412688
.text:004126D9 ; ---------------------------------------------------------------------------
.text:004126DB                 align 10h
.text:004126E0
.text:004126E0 loc_4126E0:                             ; CODE XREF: _win32_longpath+73↑j
.text:004126E0                                         ; _win32_longpath+7C↑j
.text:004126E0                 mov     [ebp+268h+Destination], bl
.text:004126E3                 inc     esi
.text:004126E4                 inc     ebp
.text:004126E5                 mov     [ebp+268h+Destination], 0
.text:004126E9                 movzx   ebx, byte ptr [esi]
.text:004126EC                 test    bl, bl
.text:004126EE                 jz      loc_412552
.text:004126F4                 cmp     bl, 2Fh ; '/'
.text:004126F7                 jz      short loc_412710
.text:004126F9                 cmp     bl, 5Ch ; '\'
.text:004126FC                 jnz     loc_412552
.text:00412702                 lea     esi, [esi+0]
.text:00412709                 lea     edi, [edi+0]
.text:00412710
.text:00412710 loc_412710:                             ; CODE XREF: _win32_longpath+227↑j
.text:00412710                                         ; _win32_longpath+24F↓j ...
.text:00412710                 inc     esi
.text:00412711                 movzx   ebx, byte ptr [esi]
.text:00412714                 test    bl, bl
.text:00412716                 jz      loc_412552
.text:0041271C                 cmp     bl, 2Fh ; '/'
.text:0041271F                 jz      short loc_412710
.text:00412721                 cmp     bl, 5Ch ; '\'
.text:00412724                 jz      short loc_412710
.text:00412726                 jmp     loc_412552
.text:0041272B ; ---------------------------------------------------------------------------
.text:0041272B
.text:0041272B loc_41272B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0041272B                                         ; _win32_longpath+53↑j
.text:0041272B                 mov     edi, [esp+278h+lpFileName]
.text:00412732                 movzx   edx, byte ptr [edi+1]
.text:00412736                 cmp     dl, 2Fh ; '/'
.text:00412739                 jz      short loc_412744
.text:0041273B                 cmp     dl, 5Ch ; '\'
.text:0041273E                 jnz     loc_412529
.text:00412744
.text:00412744 loc_412744:                             ; CODE XREF: _win32_longpath+269↑j
.text:00412744                 mov     esi, [esp+278h+lpFileName]
.text:0041274B                 mov     [ebp+268h+Destination], al
.text:0041274E                 mov     ecx, [esp+278h+lpFileName]
.text:00412755                 inc     ebp
.text:00412756                 add     esi, 2
.text:00412759                 movzx   ebx, byte ptr [ecx+1]
.text:0041275D                 mov     [ebp+268h+Destination], bl
.text:00412760                 inc     ebp
.text:00412761                 movzx   eax, byte ptr [ecx+2]
.text:00412765                 test    al, al
.text:00412767                 jz      loc_412843
.text:0041276D                 cmp     al, 2Fh ; '/'
.text:0041276F                 jz      loc_412828
.text:00412775                 cmp     al, 5Ch ; '\'
.text:00412777                 mov     bl, al
.text:00412779                 jz      loc_412828
.text:0041277F
.text:0041277F loc_41277F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0041277F                                         ; _win32_longpath+376↓j
.text:0041277F                 test    bl, bl
.text:00412781                 jz      loc_412529
.text:00412787                 cmp     bl, 2Fh ; '/'
.text:0041278A                 jz      short loc_4127AB
.text:0041278C                 cmp     bl, 5Ch ; '\'
.text:0041278F                 jz      short loc_4127AB
.text:00412791
.text:00412791 loc_412791:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00412791                 mov     [ebp+268h+Destination], bl
.text:00412794                 inc     esi
.text:00412795                 inc     ebp
.text:00412796                 movzx   ebx, byte ptr [esi]
.text:00412799                 test    bl, bl
.text:0041279B                 jz      loc_412529
.text:004127A1                 cmp     bl, 2Fh ; '/'
.text:004127A4                 jz      short loc_4127AB
.text:004127A6                 cmp     bl, 5Ch ; '\'
.text:004127A9                 jnz     short loc_412791
.text:004127AB
.text:004127AB loc_4127AB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:004127AB                                         ; _win32_longpath+2BF↑j ...
.text:004127AB                 test    bl, bl
.text:004127AD                 jz      loc_412529
.text:004127B3                 mov     [ebp+268h+Destination], bl
.text:004127B6                 inc     esi
.text:004127B7                 inc     ebp
.text:004127B8                 movzx   ebx, byte ptr [esi]
.text:004127BB                 test    bl, bl
.text:004127BD                 jz      loc_412529
.text:004127C3                 cmp     bl, 2Fh ; '/'
.text:004127C6                 jz      short loc_412810
.text:004127C8                 cmp     bl, 5Ch ; '\'
.text:004127CB                 jz      short loc_412810
.text:004127CD
.text:004127CD loc_4127CD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004127CD                 test    bl, bl
.text:004127CF                 jz      loc_412529
.text:004127D5                 cmp     bl, 2Fh ; '/'
.text:004127D8                 jz      loc_412529
.text:004127DE                 cmp     bl, 5Ch ; '\'
.text:004127E1                 jz      loc_412529
.text:004127E7
.text:004127E7 loc_4127E7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004127E7                 mov     [ebp+268h+Destination], bl
.text:004127EA                 inc     esi
.text:004127EB                 inc     ebp
.text:004127EC                 movzx   ebx, byte ptr [esi]
.text:004127EF                 test    bl, bl
.text:004127F1                 jz      loc_412529
.text:004127F7                 cmp     bl, 2Fh ; '/'
.text:004127FA                 jz      loc_412529
.text:00412800                 cmp     bl, 5Ch ; '\'
.text:00412803                 jnz     short loc_4127E7
.text:00412805                 jmp     loc_412529
.text:00412805 ; ---------------------------------------------------------------------------
.text:0041280A                 align 10h
.text:00412810
.text:00412810 loc_412810:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00412810                                         ; _win32_longpath+2FB↑j ...
.text:00412810                 inc     esi
.text:00412811                 movzx   ebx, byte ptr [esi]
.text:00412814                 test    bl, bl
.text:00412816                 jz      loc_412529
.text:0041281C                 cmp     bl, 2Fh ; '/'
.text:0041281F                 jz      short loc_412810
.text:00412821                 cmp     bl, 5Ch ; '\'
.text:00412824                 jz      short loc_412810
.text:00412826                 jmp     short loc_4127CD
.text:00412828 ; ---------------------------------------------------------------------------
.text:00412828
.text:00412828 loc_412828:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00412828                                         ; _win32_longpath+2A9↑j ...
.text:00412828                 inc     esi
.text:00412829                 movzx   ebx, byte ptr [esi]
.text:0041282C                 test    bl, bl
.text:0041282E                 jz      loc_412529
.text:00412834                 cmp     bl, 2Fh ; '/'
.text:00412837                 jz      short loc_412828
.text:00412839                 cmp     bl, 5Ch ; '\'
.text:0041283C                 jz      short loc_412828
.text:0041283E                 jmp     loc_41277F
.text:00412843 ; ---------------------------------------------------------------------------
.text:00412843
.text:00412843 loc_412843:                             ; CODE XREF: _win32_longpath+297↑j
.text:00412843                 movzx   ebx, byte ptr [esi]
.text:00412846                 jmp     loc_41277F
.text:0041284B ; ---------------------------------------------------------------------------
.text:0041284B
.text:0041284B loc_41284B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0041284B                 movzx   ecx, byte ptr [eax]
.text:0041284E                 mov     esi, eax
.text:00412850                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00412855                 add     esi, 2
.text:00412858                 lea     ebp, [esp+12h]
.text:0041285C                 mov     [esp+278h+Destination], cl
.text:00412860                 jmp     loc_412529
.text:00412860 _win32_longpath endp
.text:00412860
.text:00412860 ; ---------------------------------------------------------------------------
.text:00412865                 align 10h
.text:00412870                 sub     esp, 0Ch
.text:00412873                 mov     edx, [esp+10h]
.text:00412877                 mov     dword ptr [esp+4], 0
.text:0041287F                 mov     [esp], edx
.text:00412882                 call    sub_414250
.text:00412887                 inc     eax
.text:00412888                 setnz   dl
.text:0041288B                 add     esp, 0Ch
.text:0041288E                 movzx   eax, dl
.text:00412891                 retn
.text:00412891 ; ---------------------------------------------------------------------------
.text:00412892                 align 10h
.text:004128A0
.text:004128A0 ; =============== S U B R O U T I N E =======================================
.text:004128A0
.text:004128A0
.text:004128A0 sub_4128A0      proc near               ; CODE XREF: sub_414120+AA↓p
.text:004128A0                                         ; sub_417710+B4↓p
.text:004128A0
.text:004128A0 arg_0           = dword ptr  4
.text:004128A0
.text:004128A0                 mov     ecx, [esp+arg_0]
.text:004128A4                 mov     edx, ecx
.text:004128A6                 movzx   eax, byte ptr [ecx]
.text:004128A9                 test    al, al
.text:004128AB                 jz      short loc_4128BC
.text:004128AD                 lea     esi, [esi+0]
.text:004128B0
.text:004128B0 loc_4128B0:                             ; CODE XREF: sub_4128A0+1A↓j
.text:004128B0                 cmp     al, 5Ch ; '\'
.text:004128B2                 jz      short loc_4128C0
.text:004128B4
.text:004128B4 loc_4128B4:                             ; CODE XREF: sub_4128A0+23↓j
.text:004128B4                 inc     edx
.text:004128B5                 movzx   eax, byte ptr [edx]
.text:004128B8                 test    al, al
.text:004128BA                 jnz     short loc_4128B0
.text:004128BC
.text:004128BC loc_4128BC:                             ; CODE XREF: sub_4128A0+B↑j
.text:004128BC                 mov     eax, ecx
.text:004128BE                 retn
.text:004128BE ; ---------------------------------------------------------------------------
.text:004128BF                 align 10h
.text:004128C0
.text:004128C0 loc_4128C0:                             ; CODE XREF: sub_4128A0+12↑j
.text:004128C0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004128C3                 jmp     short loc_4128B4
.text:004128C3 sub_4128A0      endp
.text:004128C3
.text:004128C3 ; ---------------------------------------------------------------------------
.text:004128C5                 align 10h
.text:004128D0                 push    ebx
.text:004128D1                 sub     esp, 8
.text:004128D4                 mov     ebx, [esp+14h]
.text:004128D8                 mov     edx, [esp+10h]
.text:004128DC                 mov     [esp], ebx
.text:004128DF                 mov     [esp+4], edx
.text:004128E3                 call    strcpy
.text:004128E8                 movzx   eax, byte ptr [ebx]
.text:004128EB                 mov     edx, ebx
.text:004128ED                 test    al, al
.text:004128EF                 jz      short loc_41290C
.text:004128F1                 jmp     short loc_412900
.text:004128F1 ; ---------------------------------------------------------------------------
.text:004128F3                 align 10h
.text:00412900
.text:00412900 loc_412900:                             ; CODE XREF: .text:004128F1↑j
.text:00412900                                         ; .text:0041290A↓j
.text:00412900                 cmp     al, 5Ch ; '\'
.text:00412902                 jz      short loc_412913
.text:00412904
.text:00412904 loc_412904:                             ; CODE XREF: .text:00412916↓j
.text:00412904                 inc     edx
.text:00412905                 movzx   eax, byte ptr [edx]
.text:00412908                 test    al, al
.text:0041290A                 jnz     short loc_412900
.text:0041290C
.text:0041290C loc_41290C:                             ; CODE XREF: .text:004128EF↑j
.text:0041290C                 add     esp, 8
.text:0041290F                 xor     eax, eax
.text:00412911                 pop     ebx
.text:00412912                 retn
.text:00412913 ; ---------------------------------------------------------------------------
.text:00412913
.text:00412913 loc_412913:                             ; CODE XREF: .text:00412902↑j
.text:00412913                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412916                 jmp     short loc_412904
.text:00412916 ; ---------------------------------------------------------------------------
.text:00412918                 align 10h
.text:00412920
.text:00412920 ; =============== S U B R O U T I N E =======================================
.text:00412920
.text:00412920
.text:00412920 sub_412920      proc near               ; CODE XREF: sub_4111A0+16↑p
.text:00412920                                         ; sub_4116A0+1F↑p ...
.text:00412920
.text:00412920 arg_0           = dword ptr  4
.text:00412920
.text:00412920                 mov     ecx, [esp+arg_0]
.text:00412924                 mov     edx, ecx
.text:00412926                 movzx   eax, byte ptr [ecx]
.text:00412929                 test    al, al
.text:0041292B                 jz      short loc_41293C
.text:0041292D                 lea     esi, [esi+0]
.text:00412930
.text:00412930 loc_412930:                             ; CODE XREF: sub_412920+1A↓j
.text:00412930                 cmp     al, 2Fh ; '/'
.text:00412932                 jz      short loc_412940
.text:00412934
.text:00412934 loc_412934:                             ; CODE XREF: sub_412920+23↓j
.text:00412934                 inc     edx
.text:00412935                 movzx   eax, byte ptr [edx]
.text:00412938                 test    al, al
.text:0041293A                 jnz     short loc_412930
.text:0041293C
.text:0041293C loc_41293C:                             ; CODE XREF: sub_412920+B↑j
.text:0041293C                 mov     eax, ecx
.text:0041293E                 retn
.text:0041293E ; ---------------------------------------------------------------------------
.text:0041293F                 align 10h
.text:00412940
.text:00412940 loc_412940:                             ; CODE XREF: sub_412920+12↑j
.text:00412940                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412943                 jmp     short loc_412934
.text:00412943 sub_412920      endp
.text:00412943
.text:00412943 ; ---------------------------------------------------------------------------
.text:00412945                 align 10h
.text:00412950                 push    ebx
.text:00412951                 sub     esp, 8
.text:00412954                 mov     ebx, [esp+14h]
.text:00412958                 mov     edx, [esp+10h]
.text:0041295C                 mov     [esp], ebx
.text:0041295F                 mov     [esp+4], edx
.text:00412963                 call    strcpy
.text:00412968                 movzx   eax, byte ptr [ebx]
.text:0041296B                 mov     edx, ebx
.text:0041296D                 test    al, al
.text:0041296F                 jz      short loc_41298C
.text:00412971                 jmp     short loc_412980
.text:00412971 ; ---------------------------------------------------------------------------
.text:00412973                 align 10h
.text:00412980
.text:00412980 loc_412980:                             ; CODE XREF: .text:00412971↑j
.text:00412980                                         ; .text:0041298A↓j
.text:00412980                 cmp     al, 2Fh ; '/'
.text:00412982                 jz      short loc_412993
.text:00412984
.text:00412984 loc_412984:                             ; CODE XREF: .text:00412996↓j
.text:00412984                 inc     edx
.text:00412985                 movzx   eax, byte ptr [edx]
.text:00412988                 test    al, al
.text:0041298A                 jnz     short loc_412980
.text:0041298C
.text:0041298C loc_41298C:                             ; CODE XREF: .text:0041296F↑j
.text:0041298C                 add     esp, 8
.text:0041298F                 xor     eax, eax
.text:00412991                 pop     ebx
.text:00412992                 retn
.text:00412993 ; ---------------------------------------------------------------------------
.text:00412993
.text:00412993 loc_412993:                             ; CODE XREF: .text:00412982↑j
.text:00412993                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412996                 jmp     short loc_412984
.text:00412996 ; ---------------------------------------------------------------------------
.text:00412998                 align 10h
.text:004129A0                 push    ebx
.text:004129A1                 sub     esp, 8
.text:004129A4                 mov     ebx, [esp+14h]
.text:004129A8                 mov     edx, [esp+10h]
.text:004129AC                 mov     [esp+4], ebx
.text:004129B0                 mov     [esp], edx
.text:004129B3                 call    sub_4140D0
.text:004129B8                 movzx   eax, byte ptr [ebx]
.text:004129BB                 mov     edx, ebx
.text:004129BD                 test    al, al
.text:004129BF                 jz      short loc_4129DC
.text:004129C1                 jmp     short loc_4129D0
.text:004129C1 ; ---------------------------------------------------------------------------
.text:004129C3                 align 10h
.text:004129D0
.text:004129D0 loc_4129D0:                             ; CODE XREF: .text:004129C1↑j
.text:004129D0                                         ; .text:004129DA↓j
.text:004129D0                 cmp     al, 2Fh ; '/'
.text:004129D2                 jz      short loc_4129E3
.text:004129D4
.text:004129D4 loc_4129D4:                             ; CODE XREF: .text:004129E6↓j
.text:004129D4                 inc     edx
.text:004129D5                 movzx   eax, byte ptr [edx]
.text:004129D8                 test    al, al
.text:004129DA                 jnz     short loc_4129D0
.text:004129DC
.text:004129DC loc_4129DC:                             ; CODE XREF: .text:004129BF↑j
.text:004129DC                 add     esp, 8
.text:004129DF                 xor     eax, eax
.text:004129E1                 pop     ebx
.text:004129E2                 retn
.text:004129E3 ; ---------------------------------------------------------------------------
.text:004129E3
.text:004129E3 loc_4129E3:                             ; CODE XREF: .text:004129D2↑j
.text:004129E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004129E6                 jmp     short loc_4129D4
.text:004129E6 ; ---------------------------------------------------------------------------
.text:004129E8                 align 10h
.text:004129F0                 push    ebx
.text:004129F1                 sub     esp, 8
.text:004129F4                 mov     ebx, [esp+14h]
.text:004129F8                 mov     edx, [esp+10h]
.text:004129FC                 mov     [esp], ebx
.text:004129FF                 mov     [esp+4], edx
.text:00412A03                 call    sub_4140D0
.text:00412A08                 movzx   eax, byte ptr [ebx]
.text:00412A0B                 mov     edx, ebx
.text:00412A0D                 test    al, al
.text:00412A0F                 jz      short loc_412A2C
.text:00412A11                 jmp     short loc_412A20
.text:00412A11 ; ---------------------------------------------------------------------------
.text:00412A13                 align 10h
.text:00412A20
.text:00412A20 loc_412A20:                             ; CODE XREF: .text:00412A11↑j
.text:00412A20                                         ; .text:00412A2A↓j
.text:00412A20                 cmp     al, 5Ch ; '\'
.text:00412A22                 jz      short loc_412A31
.text:00412A24
.text:00412A24 loc_412A24:                             ; CODE XREF: .text:00412A34↓j
.text:00412A24                 inc     edx
.text:00412A25                 movzx   eax, byte ptr [edx]
.text:00412A28                 test    al, al
.text:00412A2A                 jnz     short loc_412A20
.text:00412A2C
.text:00412A2C loc_412A2C:                             ; CODE XREF: .text:00412A0F↑j
.text:00412A2C                 add     esp, 8
.text:00412A2F                 pop     ebx
.text:00412A30                 retn
.text:00412A31 ; ---------------------------------------------------------------------------
.text:00412A31
.text:00412A31 loc_412A31:                             ; CODE XREF: .text:00412A22↑j
.text:00412A31                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412A34                 jmp     short loc_412A24
.text:00412A34 ; ---------------------------------------------------------------------------
.text:00412A36                 align 10h
.text:00412A40
.text:00412A40 ; =============== S U B R O U T I N E =======================================
.text:00412A40
.text:00412A40
.text:00412A40 ; int __cdecl sub_412A40(LPSTR)
.text:00412A40 sub_412A40      proc near               ; CODE XREF: .text:00412ACE↓p
.text:00412A40                                         ; .text:00412B0E↓p ...
.text:00412A40
.text:00412A40 hModule         = dword ptr -1Ch
.text:00412A40 lpFilename      = dword ptr -18h
.text:00412A40 nSize           = dword ptr -14h
.text:00412A40 arg_0           = dword ptr  4
.text:00412A40
.text:00412A40                 push    esi
.text:00412A41                 push    ebx
.text:00412A42                 sub     esp, 14h
.text:00412A45                 mov     esi, [esp+1Ch+arg_0]
.text:00412A49                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00412A51                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00412A58                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00412A5C                 call    GetModuleFileNameA
.text:00412A61                 sub     esp, 0Ch
.text:00412A64                 test    eax, eax
.text:00412A66                 jz      short loc_412AA8
.text:00412A68                 cmp     eax, 104h
.text:00412A6D                 jg      short loc_412A99
.text:00412A6F
.text:00412A6F loc_412A6F:                             ; CODE XREF: sub_412A40+66↓j
.text:00412A6F                                         ; sub_412A40+78↓j
.text:00412A6F                 movzx   eax, byte ptr [esi]
.text:00412A72                 mov     edx, esi
.text:00412A74                 test    al, al
.text:00412A76                 jz      short loc_412A8C
.text:00412A78                 nop
.text:00412A79                 lea     esi, [esi+0]
.text:00412A80
.text:00412A80 loc_412A80:                             ; CODE XREF: sub_412A40+4A↓j
.text:00412A80                 cmp     al, 5Ch ; '\'
.text:00412A82                 jz      short loc_412A94
.text:00412A84
.text:00412A84 loc_412A84:                             ; CODE XREF: sub_412A40+57↓j
.text:00412A84                 inc     edx
.text:00412A85                 movzx   eax, byte ptr [edx]
.text:00412A88                 test    al, al
.text:00412A8A                 jnz     short loc_412A80
.text:00412A8C
.text:00412A8C loc_412A8C:                             ; CODE XREF: sub_412A40+36↑j
.text:00412A8C                 add     esp, 14h
.text:00412A8F                 mov     eax, esi
.text:00412A91                 pop     ebx
.text:00412A92                 pop     esi
.text:00412A93                 retn
.text:00412A94 ; ---------------------------------------------------------------------------
.text:00412A94
.text:00412A94 loc_412A94:                             ; CODE XREF: sub_412A40+42↑j
.text:00412A94                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412A97                 jmp     short loc_412A84
.text:00412A99 ; ---------------------------------------------------------------------------
.text:00412A99
.text:00412A99 loc_412A99:                             ; CODE XREF: sub_412A40+2D↑j
.text:00412A99                 call    _errno
.text:00412A9E                 mov     dword ptr [eax], 26h ; '&'
.text:00412AA4                 xor     esi, esi
.text:00412AA6                 jmp     short loc_412A6F
.text:00412AA8 ; ---------------------------------------------------------------------------
.text:00412AA8
.text:00412AA8 loc_412AA8:                             ; CODE XREF: sub_412A40+26↑j
.text:00412AA8                 call    sub_4140B0
.text:00412AAD                 mov     ebx, eax
.text:00412AAF                 xor     esi, esi
.text:00412AB1                 call    _errno
.text:00412AB6                 mov     [eax], ebx
.text:00412AB8                 jmp     short loc_412A6F
.text:00412AB8 sub_412A40      endp
.text:00412AB8
.text:00412AB8 ; ---------------------------------------------------------------------------
.text:00412ABA                 align 10h
.text:00412AC0                 sub     esp, 0Ch
.text:00412AC3                 mov     [esp+8], ebx
.text:00412AC7                 mov     ebx, [esp+10h]
.text:00412ACB                 mov     [esp], ebx
.text:00412ACE                 call    sub_412A40
.text:00412AD3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412ADB                 mov     [esp], ebx
.text:00412ADE                 call    strrchr
.text:00412AE3                 test    eax, eax
.text:00412AE5                 jz      short loc_412AEA
.text:00412AE7                 lea     ebx, [eax+1]
.text:00412AEA
.text:00412AEA loc_412AEA:                             ; CODE XREF: .text:00412AE5↑j
.text:00412AEA                 mov     eax, ebx
.text:00412AEC                 mov     ebx, [esp+8]
.text:00412AF0                 add     esp, 0Ch
.text:00412AF3                 retn
.text:00412AF3 ; ---------------------------------------------------------------------------
.text:00412AF4                 align 10h
.text:00412B00                 sub     esp, 0Ch
.text:00412B03                 mov     [esp+8], ebx
.text:00412B07                 mov     ebx, [esp+10h]
.text:00412B0B                 mov     [esp], ebx
.text:00412B0E                 call    sub_412A40
.text:00412B13                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412B1B                 mov     [esp], ebx
.text:00412B1E                 call    strrchr
.text:00412B23                 test    eax, eax
.text:00412B25                 jz      short loc_412B2A
.text:00412B27                 mov     byte ptr [eax], 0
.text:00412B2A
.text:00412B2A loc_412B2A:                             ; CODE XREF: .text:00412B25↑j
.text:00412B2A                 mov     eax, ebx
.text:00412B2C                 mov     ebx, [esp+8]
.text:00412B30                 add     esp, 0Ch
.text:00412B33                 retn
.text:00412B33 ; ---------------------------------------------------------------------------
.text:00412B34                 align 10h
.text:00412B40                 sub     esp, 0Ch
.text:00412B43                 mov     [esp+8], ebx
.text:00412B47                 mov     ebx, [esp+10h]
.text:00412B4B                 mov     [esp], ebx
.text:00412B4E                 call    sub_412A40
.text:00412B53                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412B5B                 mov     [esp], ebx
.text:00412B5E                 call    strrchr
.text:00412B63                 test    eax, eax
.text:00412B65                 jz      short loc_412B6A
.text:00412B67                 mov     byte ptr [eax], 0
.text:00412B6A
.text:00412B6A loc_412B6A:                             ; CODE XREF: .text:00412B65↑j
.text:00412B6A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412B72                 mov     [esp], ebx
.text:00412B75                 call    strrchr
.text:00412B7A                 test    eax, eax
.text:00412B7C                 jz      short loc_412B81
.text:00412B7E                 mov     byte ptr [eax], 0
.text:00412B81
.text:00412B81 loc_412B81:                             ; CODE XREF: .text:00412B7C↑j
.text:00412B81                 mov     eax, ebx
.text:00412B83                 mov     ebx, [esp+8]
.text:00412B87                 add     esp, 0Ch
.text:00412B8A                 retn
.text:00412B8A ; ---------------------------------------------------------------------------
.text:00412B8B                 align 10h
.text:00412B90                 sub     esp, 1Ch
.text:00412B93                 mov     edx, [esp+20h]
.text:00412B97                 mov     [esp+10h], ebx
.text:00412B9B                 xor     ebx, ebx
.text:00412B9D                 mov     [esp+14h], esi
.text:00412BA1                 mov     [esp+18h], edi
.text:00412BA5                 mov     [esp], edx
.text:00412BA8                 call    sub_414100
.text:00412BAD                 mov     edx, [esp+24h]
.text:00412BB1                 mov     edi, eax
.text:00412BB3                 mov     [esp], edx
.text:00412BB6                 call    sub_414100
.text:00412BBB                 mov     [esp+4], eax
.text:00412BBF                 mov     esi, eax
.text:00412BC1                 mov     [esp], edi
.text:00412BC4                 call    _stricmp_0
.text:00412BC9                 mov     [esp], edi
.text:00412BCC                 test    eax, eax
.text:00412BCE                 setz    bl
.text:00412BD1                 call    free
.text:00412BD6                 mov     [esp], esi
.text:00412BD9                 call    free
.text:00412BDE                 mov     eax, ebx
.text:00412BE0                 mov     esi, [esp+14h]
.text:00412BE4                 mov     ebx, [esp+10h]
.text:00412BE8                 mov     edi, [esp+18h]
.text:00412BEC                 add     esp, 1Ch
.text:00412BEF                 retn
.text:00412BF0 ; ---------------------------------------------------------------------------
.text:00412BF0                 xor     eax, eax
.text:00412BF2                 retn
.text:00412BF2 ; ---------------------------------------------------------------------------
.text:00412BF3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00412C27↓o
.text:00412C00 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00412C36↓o
.text:00412C10 ; ---------------------------------------------------------------------------
.text:00412C10                 sub     esp, 1Ch
.text:00412C13                 mov     [esp+10h], ebx
.text:00412C17                 mov     ebx, [esp+20h]
.text:00412C1B                 mov     [esp+18h], edi
.text:00412C1F                 mov     edi, [esp+24h]
.text:00412C23                 mov     [esp+14h], esi
.text:00412C27                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00412C2E                 call    GetModuleHandleA
.text:00412C33                 sub     esp, 4
.text:00412C36                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00412C3E                 mov     [esp], eax
.text:00412C41                 call    GetProcAddress
.text:00412C46                 sub     esp, 8
.text:00412C49                 test    eax, eax
.text:00412C4B                 jz      short loc_412C63
.text:00412C4D                 mov     dword ptr [esp+8], 104h
.text:00412C55                 mov     [esp+4], ebx
.text:00412C59                 mov     [esp], edi
.text:00412C5C                 call    eax
.text:00412C5E                 sub     esp, 0Ch
.text:00412C61                 mov     esi, eax
.text:00412C63
.text:00412C63 loc_412C63:                             ; CODE XREF: .text:00412C4B↑j
.text:00412C63                 test    esi, esi
.text:00412C65                 jz      short loc_412C80
.text:00412C67
.text:00412C67 loc_412C67:                             ; CODE XREF: .text:00412C9B↓j
.text:00412C67                 mov     eax, ebx
.text:00412C69                 mov     esi, [esp+14h]
.text:00412C6D                 mov     ebx, [esp+10h]
.text:00412C71                 mov     edi, [esp+18h]
.text:00412C75                 add     esp, 1Ch
.text:00412C78                 retn
.text:00412C78 ; ---------------------------------------------------------------------------
.text:00412C79                 align 10h
.text:00412C80
.text:00412C80 loc_412C80:                             ; CODE XREF: .text:00412C65↑j
.text:00412C80                 call    sub_414B90
.text:00412C85                 mov     [esp], ebx
.text:00412C88                 mov     [esp+4], edi
.text:00412C8C                 call    strcpy
.text:00412C91                 mov     [esp], ebx
.text:00412C94                 call    _win32_longpath
.text:00412C99                 mov     ebx, eax
.text:00412C9B                 jmp     short loc_412C67
.text:00412C9B ; ---------------------------------------------------------------------------
.text:00412C9D                 align 10h
.text:00412CA0                 sub     esp, 1Ch
.text:00412CA3                 mov     [esp+18h], edi
.text:00412CA7                 mov     edi, [esp+20h]
.text:00412CAB                 mov     [esp+10h], ebx
.text:00412CAF                 mov     [esp+14h], esi
.text:00412CB3                 mov     dword ptr [esp+8], 0
.text:00412CBB                 mov     dword ptr [esp+4], 0
.text:00412CC3                 mov     [esp], edi
.text:00412CC6                 call    GetShortPathNameA
.text:00412CCB                 sub     esp, 0Ch
.text:00412CCE                 mov     ebx, eax
.text:00412CD0                 test    eax, eax
.text:00412CD2                 jz      short loc_412D20
.text:00412CD4                 lea     edx, [eax+1]
.text:00412CD7                 mov     [esp], edx
.text:00412CDA                 call    malloc
.text:00412CDF                 test    eax, eax
.text:00412CE1                 mov     esi, eax
.text:00412CE3                 jz      short loc_412D20
.text:00412CE5                 mov     [esp+8], ebx
.text:00412CE9                 mov     [esp+4], eax
.text:00412CED                 mov     [esp], edi
.text:00412CF0                 call    GetShortPathNameA
.text:00412CF5                 sub     esp, 0Ch
.text:00412CF8                 mov     edx, esi
.text:00412CFA                 test    eax, eax
.text:00412CFC                 jz      short loc_412D12
.text:00412CFE                 mov     esi, esi
.text:00412D00
.text:00412D00 loc_412D00:                             ; CODE XREF: .text:00412D30↓j
.text:00412D00                 mov     ebx, [esp+10h]
.text:00412D04                 mov     eax, edx
.text:00412D06                 mov     esi, [esp+14h]
.text:00412D0A                 mov     edi, [esp+18h]
.text:00412D0E                 add     esp, 1Ch
.text:00412D11                 retn
.text:00412D12 ; ---------------------------------------------------------------------------
.text:00412D12
.text:00412D12 loc_412D12:                             ; CODE XREF: .text:00412CFC↑j
.text:00412D12                 mov     [esp], esi
.text:00412D15                 call    free
.text:00412D1A                 lea     esi, [esi+0]
.text:00412D20
.text:00412D20 loc_412D20:                             ; CODE XREF: .text:00412CD2↑j
.text:00412D20                                         ; .text:00412CE3↑j
.text:00412D20                 call    sub_4140B0
.text:00412D25                 mov     esi, eax
.text:00412D27                 call    _errno
.text:00412D2C                 mov     [eax], esi
.text:00412D2E                 mov     edx, edi
.text:00412D30                 jmp     short loc_412D00
.text:00412D30 ; ---------------------------------------------------------------------------
.text:00412D32                 align 10h
.text:00412D40 ; const char String[4]
.text:00412D40 String          db ' :/',0              ; DATA XREF: sub_412D50+FA↓o
.text:00412D44                 align 10h
.text:00412D50
.text:00412D50 ; =============== S U B R O U T I N E =======================================
.text:00412D50
.text:00412D50
.text:00412D50 ; int __cdecl sub_412D50(LPCSTR)
.text:00412D50 sub_412D50      proc near               ; CODE XREF: sub_4111A0+E↑p
.text:00412D50                                         ; sub_4116A0+17↑p ...
.text:00412D50
.text:00412D50 Str             = dword ptr -1Ch
.text:00412D50 Val             = dword ptr -18h
.text:00412D50 Count           = dword ptr -14h
.text:00412D50 var_10          = dword ptr -10h
.text:00412D50 var_C           = dword ptr -0Ch
.text:00412D50 var_8           = dword ptr -8
.text:00412D50 var_4           = dword ptr -4
.text:00412D50 arg_0           = dword ptr  4
.text:00412D50
.text:00412D50                 sub     esp, 1Ch
.text:00412D53                 mov     edx, [esp+1Ch+arg_0]
.text:00412D57                 mov     [esp+1Ch+var_8], edi
.text:00412D5B                 mov     [esp+1Ch+var_10], ebx
.text:00412D5F                 mov     [esp+1Ch+var_C], esi
.text:00412D63                 mov     [esp+1Ch+var_4], ebp
.text:00412D67                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:00412D6A                 call    sub_414100
.text:00412D6F                 test    eax, eax
.text:00412D71                 mov     edi, eax
.text:00412D73                 jz      short loc_412DB0
.text:00412D75                 mov     [esp+1Ch+Str], eax ; Str
.text:00412D78                 call    strlen
.text:00412D7D                 cmp     eax, 2
.text:00412D80                 jbe     short loc_412D8C
.text:00412D82                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00412D86                 jz      loc_412E40
.text:00412D8C
.text:00412D8C loc_412D8C:                             ; CODE XREF: sub_412D50+30↑j
.text:00412D8C                                         ; sub_412D50+F4↓j
.text:00412D8C                 test    edi, edi
.text:00412D8E                 jz      short loc_412DB0
.text:00412D90                 mov     [esp+1Ch+Str], edi ; Str
.text:00412D93                 call    strlen
.text:00412D98                 cmp     eax, 4
.text:00412D9B                 mov     ebp, eax
.text:00412D9D                 jle     short loc_412DB0
.text:00412D9F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00412DA2                 jz      short loc_412DD0
.text:00412DA4                 lea     esi, [esi+0]
.text:00412DAA                 lea     edi, [edi+0]
.text:00412DB0
.text:00412DB0 loc_412DB0:                             ; CODE XREF: sub_412D50+23↑j
.text:00412DB0                                         ; sub_412D50+3E↑j ...
.text:00412DB0                 xor     esi, esi
.text:00412DB2
.text:00412DB2 loc_412DB2:                             ; CODE XREF: sub_412D50+CD↓j
.text:00412DB2                                         ; sub_412D50+115↓j
.text:00412DB2                 mov     [esp+1Ch+Str], edi ; Block
.text:00412DB5                 call    free
.text:00412DBA                 mov     eax, esi
.text:00412DBC                 mov     ebx, [esp+1Ch+var_10]
.text:00412DC0                 mov     esi, [esp+1Ch+var_C]
.text:00412DC4                 mov     edi, [esp+1Ch+var_8]
.text:00412DC8                 mov     ebp, [esp+1Ch+var_4]
.text:00412DCC                 add     esp, 1Ch
.text:00412DCF                 retn
.text:00412DD0 ; ---------------------------------------------------------------------------
.text:00412DD0
.text:00412DD0 loc_412DD0:                             ; CODE XREF: sub_412D50+52↑j
.text:00412DD0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00412DD4                 jnz     short loc_412DB0
.text:00412DD6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00412DDE                 lea     ecx, [edi+2]
.text:00412DE1                 mov     [esp+1Ch+Str], ecx ; Str
.text:00412DE4                 call    strchr
.text:00412DE9                 test    eax, eax
.text:00412DEB                 jnz     short loc_412E1F
.text:00412DED
.text:00412DED loc_412DED:                             ; CODE XREF: sub_412D50+E2↓j
.text:00412DED                 inc     ebp
.text:00412DEE
.text:00412DEE loc_412DEE:                             ; CODE XREF: sub_412D50+E9↓j
.text:00412DEE                 mov     [esp+1Ch+Val], 1 ; Size
.text:00412DF6                 lea     ebx, [ebp+1]
.text:00412DF9                 mov     [esp+1Ch+Str], ebx ; Count
.text:00412DFC                 call    calloc
.text:00412E01                 mov     [esp+1Ch+Str], eax ; Destination
.text:00412E04                 mov     esi, eax
.text:00412E06                 mov     [esp+1Ch+Count], ebx ; Count
.text:00412E0A                 mov     [esp+1Ch+Val], edi ; Source
.text:00412E0E                 call    strncpy
.text:00412E13                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00412E18                 mov     byte ptr [ebp+esi+0], 0
.text:00412E1D                 jmp     short loc_412DB2
.text:00412E1F ; ---------------------------------------------------------------------------
.text:00412E1F
.text:00412E1F loc_412E1F:                             ; CODE XREF: sub_412D50+9B↑j
.text:00412E1F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00412E27                 inc     eax
.text:00412E28                 mov     [esp+1Ch+Str], eax ; Str
.text:00412E2B                 call    strchr
.text:00412E30                 test    eax, eax
.text:00412E32                 jz      short loc_412DED
.text:00412E34                 sub     eax, edi
.text:00412E36                 lea     ebp, [eax+1]
.text:00412E39                 jmp     short loc_412DEE
.text:00412E39 ; ---------------------------------------------------------------------------
.text:00412E3B                 align 10h
.text:00412E40
.text:00412E40 loc_412E40:                             ; CODE XREF: sub_412D50+36↑j
.text:00412E40                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00412E44                 jnz     loc_412D8C
.text:00412E4A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00412E51                 call    _strdup
.text:00412E56                 movsx   edx, byte ptr [edi]
.text:00412E59                 mov     esi, eax
.text:00412E5B                 mov     [esp+1Ch+Str], edx ; C
.text:00412E5E                 call    toupper
.text:00412E63                 mov     [esi], al
.text:00412E65                 jmp     loc_412DB2
.text:00412E65 sub_412D50      endp
.text:00412E65
.text:00412E65 ; ---------------------------------------------------------------------------
.text:00412E6A                 align 10h
.text:00412E70
.text:00412E70 ; =============== S U B R O U T I N E =======================================
.text:00412E70
.text:00412E70
.text:00412E70 sub_412E70      proc near               ; CODE XREF: .text:00412FC4↓p
.text:00412E70                                         ; .text:004130A8↓p
.text:00412E70
.text:00412E70 Str             = dword ptr -2Ch
.text:00412E70 Val             = dword ptr -28h
.text:00412E70 var_18          = dword ptr -18h
.text:00412E70 var_11          = byte ptr -11h
.text:00412E70 arg_0           = dword ptr  4
.text:00412E70
.text:00412E70                 push    ebp
.text:00412E71                 push    edi
.text:00412E72                 push    esi
.text:00412E73                 push    ebx
.text:00412E74                 sub     esp, 1Ch
.text:00412E77                 mov     edx, [esp+2Ch+arg_0]
.text:00412E7B                 cmp     edx, ds:dword_41B850
.text:00412E81                 mov     [esp+2Ch+var_11], 0
.text:00412E86                 jz      loc_412F84
.text:00412E8C                 mov     ebx, ds:dword_41B840
.text:00412E92                 test    ebx, ebx
.text:00412E94                 jz      short loc_412F02
.text:00412E96
.text:00412E96 loc_412E96:                             ; CODE XREF: sub_412E70+10F↓j
.text:00412E96                 mov     ebx, [esp+2Ch+arg_0]
.text:00412E9A                 xor     edi, edi
.text:00412E9C                 xor     esi, esi
.text:00412E9E                 mov     ebp, offset dword_41B868
.text:00412EA3                 lea     esi, [esi+0]
.text:00412EA9                 lea     edi, [edi+0]
.text:00412EB0
.text:00412EB0 loc_412EB0:                             ; CODE XREF: sub_412E70+60↓j
.text:00412EB0                 mov     edx, [ebp+4]
.text:00412EB3                 mov     ecx, edi
.text:00412EB5                 mov     eax, [ebp+0]
.text:00412EB8                 shl     ecx, 4
.text:00412EBB                 mov     [esp+2Ch+var_18], ecx
.text:00412EBF                 mov     ecx, edx
.text:00412EC1                 xor     eax, ebx
.text:00412EC3                 xor     ecx, esi
.text:00412EC5                 or      ecx, eax
.text:00412EC7                 jz      short loc_412EF1
.text:00412EC9                 inc     edi
.text:00412ECA                 add     ebp, 10h
.text:00412ECD                 cmp     edi, 20h ; ' '
.text:00412ED0                 jle     short loc_412EB0
.text:00412ED2
.text:00412ED2 loc_412ED2:                             ; CODE XREF: sub_412E70+90↓j
.text:00412ED2                 movzx   ebx, [esp+2Ch+var_11]
.text:00412ED7                 mov     eax, [esp+2Ch+arg_0]
.text:00412EDB                 mov     byte_41A0A0, bl
.text:00412EE1                 mov     ds:dword_41B850, eax
.text:00412EE6                 movsx   eax, bl
.text:00412EE9
.text:00412EE9 loc_412EE9:                             ; CODE XREF: sub_412E70+11B↓j
.text:00412EE9                 add     esp, 1Ch
.text:00412EEC                 pop     ebx
.text:00412EED                 pop     esi
.text:00412EEE                 pop     edi
.text:00412EEF                 pop     ebp
.text:00412EF0                 retn
.text:00412EF1 ; ---------------------------------------------------------------------------
.text:00412EF1
.text:00412EF1 loc_412EF1:                             ; CODE XREF: sub_412E70+57↑j
.text:00412EF1                 mov     edx, [esp+2Ch+var_18]
.text:00412EF5                 movzx   eax, byte ptr ds:dword_41B860[edx]
.text:00412EFC                 mov     [esp+2Ch+var_11], al
.text:00412F00                 jmp     short loc_412ED2
.text:00412F02 ; ---------------------------------------------------------------------------
.text:00412F02
.text:00412F02 loc_412F02:                             ; CODE XREF: sub_412E70+24↑j
.text:00412F02                 mov     [esp+2Ch+Str], 0
.text:00412F09                 call    sub_415970
.text:00412F0E                 test    eax, eax
.text:00412F10                 mov     ebx, eax
.text:00412F12                 jz      short loc_412F6C
.text:00412F14                 movzx   ecx, byte ptr [eax]
.text:00412F17                 mov     esi, 0FFFFFFF0h
.text:00412F1C                 test    cl, cl
.text:00412F1E                 jz      short loc_412F6C
.text:00412F20
.text:00412F20 loc_412F20:                             ; CODE XREF: sub_412E70+FA↓j
.text:00412F20                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00412F23                 movsx   ebp, cl
.text:00412F26                 add     esi, 10h
.text:00412F29                 mov     ds:dword_41B860[esi], ebp
.text:00412F2F                 mov     edi, ebp
.text:00412F31                 sar     edi, 1Fh
.text:00412F34                 mov     ds:dword_41B864[esi], edi
.text:00412F3A                 call    sub_4116A0
.text:00412F3F                 mov     ds:dword_41B868[esi], eax
.text:00412F45                 xor     ecx, ecx
.text:00412F47                 mov     [esp+2Ch+Str], ebx ; Str
.text:00412F4A                 mov     ds:dword_41B86C[esi], ecx
.text:00412F50                 mov     [esp+2Ch+Val], 0 ; Val
.text:00412F58                 call    strchr
.text:00412F5D                 mov     ebx, eax
.text:00412F5F                 inc     ebx
.text:00412F60                 jz      short loc_412F6C
.text:00412F62                 movzx   edx, byte ptr [eax+1]
.text:00412F66                 test    dl, dl
.text:00412F68                 mov     cl, dl
.text:00412F6A                 jnz     short loc_412F20
.text:00412F6C
.text:00412F6C loc_412F6C:                             ; CODE XREF: sub_412E70+A2↑j
.text:00412F6C                                         ; sub_412E70+AE↑j ...
.text:00412F6C                 mov     [esp+2Ch+Str], ebx ; Block
.text:00412F6F                 mov     esi, 1
.text:00412F74                 mov     ds:dword_41B840, esi
.text:00412F7A                 call    free
.text:00412F7F                 jmp     loc_412E96
.text:00412F84 ; ---------------------------------------------------------------------------
.text:00412F84
.text:00412F84 loc_412F84:                             ; CODE XREF: sub_412E70+16↑j
.text:00412F84                 movsx   eax, byte_41A0A0
.text:00412F8B                 jmp     loc_412EE9
.text:00412F8B sub_412E70      endp
.text:00412F8B
.text:00412F8B ; ---------------------------------------------------------------------------
.text:00412F90 dword_412F90    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00412F90                                         ; DATA XREF: .text:00412FB3↓o
.text:00412F90                                         ; .text:00413093↓o
.text:00412FA0 ; ---------------------------------------------------------------------------
.text:00412FA0                 sub     esp, 1Ch
.text:00412FA3                 mov     [esp+14h], esi
.text:00412FA7                 mov     esi, [esp+20h]
.text:00412FAB                 mov     [esp+18h], edi
.text:00412FAF                 mov     [esp+10h], ebx
.text:00412FB3                 mov     dword ptr [esp], offset dword_412F90
.text:00412FBA                 call    _strdup
.text:00412FBF                 mov     [esp], esi
.text:00412FC2                 mov     edi, eax
.text:00412FC4                 call    sub_412E70
.text:00412FC9                 mov     [edi], al
.text:00412FCB                 test    al, al
.text:00412FCD                 jz      short loc_412FE1
.text:00412FCF                 mov     eax, edi
.text:00412FD1                 mov     ebx, [esp+10h]
.text:00412FD5                 mov     esi, [esp+14h]
.text:00412FD9                 mov     edi, [esp+18h]
.text:00412FDD                 add     esp, 1Ch
.text:00412FE0                 retn
.text:00412FE1 ; ---------------------------------------------------------------------------
.text:00412FE1
.text:00412FE1 loc_412FE1:                             ; CODE XREF: .text:00412FCD↑j
.text:00412FE1                 mov     [esp], edi
.text:00412FE4                 call    free
.text:00412FE9                 mov     dword ptr [esp+4], 0
.text:00412FF1                 mov     dword ptr [esp], 0
.text:00412FF8                 call    GetCurrentDirectoryA
.text:00412FFD                 sub     esp, 8
.text:00413000                 lea     esi, [eax+1]
.text:00413003                 mov     [esp], esi
.text:00413006                 call    malloc
.text:0041300B                 mov     [esp+4], eax
.text:0041300F                 mov     edi, eax
.text:00413011                 mov     [esp], esi
.text:00413014                 call    GetCurrentDirectoryA
.text:00413019                 sub     esp, 8
.text:0041301C                 test    eax, eax
.text:0041301E                 jnz     short loc_413040
.text:00413020                 mov     dword ptr [esp+20h], 412F94h
.text:00413028                 mov     ebx, [esp+10h]
.text:0041302C                 mov     esi, [esp+14h]
.text:00413030                 mov     edi, [esp+18h]
.text:00413034                 add     esp, 1Ch
.text:00413037                 jmp     _strdup
.text:00413037 ; ---------------------------------------------------------------------------
.text:0041303C                 align 10h
.text:00413040
.text:00413040 loc_413040:                             ; CODE XREF: .text:0041301E↑j
.text:00413040                 mov     [esp+20h], edi
.text:00413044                 mov     ebx, [esp+10h]
.text:00413048                 mov     esi, [esp+14h]
.text:0041304C                 mov     edi, [esp+18h]
.text:00413050                 add     esp, 1Ch
.text:00413053                 jmp     sub_412D50
.text:00413053 ; ---------------------------------------------------------------------------
.text:00413058                 align 10h
.text:00413060                 sub     esp, 7Ch
.text:00413063                 lea     edx, [esp+10h]
.text:00413067                 mov     [esp+8], edx
.text:0041306B                 mov     edx, [esp+80h]
.text:00413072                 mov     [esp+70h], ebx
.text:00413076                 mov     [esp+74h], esi
.text:0041307A                 mov     [esp+4], edx
.text:0041307E                 mov     [esp+78h], edi
.text:00413082                 mov     dword ptr [esp], 0
.text:00413089                 call    sub_4108F0
.text:0041308E                 xor     edx, edx
.text:00413090                 inc     eax
.text:00413091                 jz      short loc_4130B5
.text:00413093                 mov     dword ptr [esp], offset dword_412F90
.text:0041309A                 mov     esi, [esp+20h]
.text:0041309E                 call    _strdup
.text:004130A3                 mov     edi, eax
.text:004130A5                 mov     [esp], esi
.text:004130A8                 call    sub_412E70
.text:004130AD                 mov     [edi], al
.text:004130AF                 test    al, al
.text:004130B1                 mov     edx, edi
.text:004130B3                 jz      short loc_4130C7
.text:004130B5
.text:004130B5 loc_4130B5:                             ; CODE XREF: .text:00413091↑j
.text:004130B5                                         ; .text:00413114↓j
.text:004130B5                 mov     ebx, [esp+70h]
.text:004130B9                 mov     eax, edx
.text:004130BB                 mov     esi, [esp+74h]
.text:004130BF                 mov     edi, [esp+78h]
.text:004130C3                 add     esp, 7Ch
.text:004130C6                 retn
.text:004130C7 ; ---------------------------------------------------------------------------
.text:004130C7
.text:004130C7 loc_4130C7:                             ; CODE XREF: .text:004130B3↑j
.text:004130C7                 mov     [esp], edi
.text:004130CA                 call    free
.text:004130CF                 mov     dword ptr [esp+4], 0
.text:004130D7                 mov     dword ptr [esp], 0
.text:004130DE                 call    GetCurrentDirectoryA
.text:004130E3                 sub     esp, 8
.text:004130E6                 lea     esi, [eax+1]
.text:004130E9                 mov     [esp], esi
.text:004130EC                 call    malloc
.text:004130F1                 mov     [esp+4], eax
.text:004130F5                 mov     edi, eax
.text:004130F7                 mov     [esp], esi
.text:004130FA                 call    GetCurrentDirectoryA
.text:004130FF                 sub     esp, 8
.text:00413102                 test    eax, eax
.text:00413104                 jnz     short loc_413116
.text:00413106                 mov     dword ptr [esp], 412F94h
.text:0041310D                 call    _strdup
.text:00413112
.text:00413112 loc_413112:                             ; CODE XREF: .text:0041311E↓j
.text:00413112                 mov     edx, eax
.text:00413114                 jmp     short loc_4130B5
.text:00413116 ; ---------------------------------------------------------------------------
.text:00413116
.text:00413116 loc_413116:                             ; CODE XREF: .text:00413104↑j
.text:00413116                 mov     [esp], edi
.text:00413119                 call    sub_412D50
.text:0041311E                 jmp     short loc_413112
.text:00413120
.text:00413120 ; =============== S U B R O U T I N E =======================================
.text:00413120
.text:00413120
.text:00413120 ; int __cdecl sub_413120(LPCSTR)
.text:00413120 sub_413120      proc near               ; CODE XREF: sub_4108F0+38F↑p
.text:00413120
.text:00413120 String1         = dword ptr -1Ch
.text:00413120 String2         = dword ptr -18h
.text:00413120 var_C           = dword ptr -0Ch
.text:00413120 var_8           = dword ptr -8
.text:00413120 var_4           = dword ptr -4
.text:00413120 arg_0           = dword ptr  4
.text:00413120
.text:00413120                 sub     esp, 1Ch
.text:00413123                 mov     [esp+1Ch+var_4], edi
.text:00413127                 mov     edi, [esp+1Ch+arg_0]
.text:0041312B                 mov     [esp+1Ch+var_C], ebx
.text:0041312F                 mov     [esp+1Ch+var_8], esi
.text:00413133                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00413136                 call    sub_414100
.text:0041313B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0041313E                 mov     esi, eax
.text:00413140                 call    sub_412D50
.text:00413145                 mov     [esp+1Ch+String2], eax ; String2
.text:00413149                 mov     ebx, eax
.text:0041314B                 mov     [esp+1Ch+String1], esi ; String1
.text:0041314E                 call    _stricmp
.text:00413153                 test    eax, eax
.text:00413155                 setz    dl
.text:00413158                 test    esi, esi
.text:0041315A                 movzx   edi, dl
.text:0041315D                 jz      short loc_413167
.text:0041315F                 mov     [esp+1Ch+String1], esi ; Block
.text:00413162                 call    free
.text:00413167
.text:00413167 loc_413167:                             ; CODE XREF: sub_413120+3D↑j
.text:00413167                 test    ebx, ebx
.text:00413169                 jz      short loc_413173
.text:0041316B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0041316E                 call    free
.text:00413173
.text:00413173 loc_413173:                             ; CODE XREF: sub_413120+49↑j
.text:00413173                 mov     eax, edi
.text:00413175                 mov     ebx, [esp+1Ch+var_C]
.text:00413179                 mov     esi, [esp+1Ch+var_8]
.text:0041317D                 mov     edi, [esp+1Ch+var_4]
.text:00413181                 add     esp, 1Ch
.text:00413184                 retn
.text:00413184 sub_413120      endp
.text:00413184
.text:00413184 ; ---------------------------------------------------------------------------
.text:00413185                 align 10h
.text:00413190 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:004131E1↓o
.text:00413199 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00413199                                         ; DATA XREF: .text:004131F2↓o
.text:004131AD ; const CHAR FileName[]
.text:004131AD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0041333C↓o
.text:004131AD                                         ; sub_413770+17C↓o
.text:004131B8 ; ---------------------------------------------------------------------------
.text:004131B8
.text:004131B8 loc_4131B8:                             ; DATA XREF: .text:00413452↓o
.text:004131B8                 dec     esi
.text:004131B9                 push    esp
.text:004131BA                 inc     esi
.text:004131BB                 push    ebx
.text:004131BC                 add     [esi+41h], al
.text:004131BF                 push    esp
.text:004131C0                 xor     esi, [edx]
.text:004131C2                 add     [esi+41h], al
.text:004131C5                 push    esp
.text:004131C6                 add     [ebx+44h], al
.text:004131C9                 inc     esi
.text:004131CA                 push    ebx
.text:004131CB
.text:004131CB loc_4131CB:                             ; CODE XREF: sub_413770+101↓p
.text:004131CB                 add     [ebp+55002674h], cl
.text:004131D1                 push    edi
.text:004131D2                 push    esi
.text:004131D3                 push    ebx
.text:004131D4                 sub     esp, 8BCh
.text:004131DA                 mov     ebp, [esp+8D0h]
.text:004131E1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:004131E8                 call    LoadLibraryA
.text:004131ED                 sub     esp, 4
.text:004131F0                 mov     edi, eax
.text:004131F2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:004131FA                 mov     [esp], eax
.text:004131FD                 call    GetProcAddress
.text:00413202                 sub     esp, 8
.text:00413205                 mov     esi, eax
.text:00413207                 test    ebp, ebp
.text:00413209                 mov     dword ptr [esp+20h], 0
.text:00413211                 jz      loc_413751
.text:00413217                 mov     [esp], ebp
.text:0041321A                 call    sub_412920
.text:0041321F                 mov     [esp], eax
.text:00413222                 mov     ebp, eax
.text:00413224                 call    strlen
.text:00413229                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041322E                 mov     ebx, eax
.text:00413230                 jz      short loc_41324C
.text:00413232                 mov     [esp], ebp
.text:00413235                 lea     edx, [eax+1]
.text:00413238                 mov     [esp+4], edx
.text:0041323C                 call    realloc
.text:00413241                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00413245                 mov     ebp, eax
.text:00413247                 mov     byte ptr [ebx+eax+1], 0
.text:0041324C
.text:0041324C loc_41324C:                             ; CODE XREF: .text:00413230↑j
.text:0041324C                 mov     dword ptr [esp+1Ch], 400h
.text:00413254                 lea     edx, [esp+0B0h]
.text:0041325B                 lea     ebx, [esp+5Ch]
.text:0041325F                 mov     [esp+18h], edx
.text:00413263                 lea     ecx, [esp+58h]
.text:00413267                 lea     edx, [esp+54h]
.text:0041326B                 mov     [esp+14h], ebx
.text:0041326F                 lea     eax, [esp+4B0h]
.text:00413276                 mov     [esp+10h], ecx
.text:0041327A                 mov     [esp+0Ch], edx
.text:0041327E                 mov     dword ptr [esp+8], 400h
.text:00413286                 mov     [esp+4], eax
.text:0041328A                 mov     [esp], ebp
.text:0041328D                 call    GetVolumeInformationA
.text:00413292                 sub     esp, 20h
.text:00413295                 test    eax, eax
.text:00413297                 jz      loc_41372E
.text:0041329D                 test    esi, esi
.text:0041329F                 jz      short loc_4132C5
.text:004132A1                 mov     [esp], ebp
.text:004132A4                 lea     edx, [esp+48h]
.text:004132A8                 lea     ebx, [esp+40h]
.text:004132AC                 mov     [esp+0Ch], edx
.text:004132B0                 lea     ecx, [esp+38h]
.text:004132B4                 mov     [esp+8], ebx
.text:004132B8                 mov     [esp+4], ecx
.text:004132BC                 call    esi
.text:004132BE                 sub     esp, 10h
.text:004132C1                 mov     [esp+20h], eax
.text:004132C5
.text:004132C5 loc_4132C5:                             ; CODE XREF: .text:0041329F↑j
.text:004132C5                 test    edi, edi
.text:004132C7                 jz      short loc_4132D4
.text:004132C9                 mov     [esp], edi
.text:004132CC                 call    FreeLibrary
.text:004132D1                 sub     esp, 4
.text:004132D4
.text:004132D4 loc_4132D4:                             ; CODE XREF: .text:004132C7↑j
.text:004132D4                 call    sub_414B90
.text:004132D9                 test    eax, eax
.text:004132DB                 lea     esi, [esp+28h]
.text:004132DF                 jz      loc_413710
.text:004132E5                 call    sub_414B90
.text:004132EA                 test    eax, eax
.text:004132EC                 jz      short loc_4132FC
.text:004132EE                 call    sub_414AE0
.text:004132F3                 cmp     eax, 0Bh
.text:004132F6                 jle     loc_4136E4
.text:004132FC
.text:004132FC loc_4132FC:                             ; CODE XREF: .text:004132EC↑j
.text:004132FC                 cld
.text:004132FD                 xor     eax, eax
.text:004132FF                 lea     ebx, [esp+60h]
.text:00413303                 mov     ecx, 7
.text:00413308                 mov     edi, ebx
.text:0041330A                 rep stosd
.text:0041330C                 mov     dword ptr [esp+18h], 0
.text:00413314                 mov     dword ptr [esp+14h], 4000000h
.text:0041331C                 mov     dword ptr [esp+10h], 0
.text:00413324                 mov     dword ptr [esp+0Ch], 0
.text:0041332C                 mov     dword ptr [esp+8], 0
.text:00413334                 mov     dword ptr [esp+4], 0
.text:0041333C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00413343                 call    CreateFileA
.text:00413348                 sub     esp, 1Ch
.text:0041334B                 mov     edi, eax
.text:0041334D                 cmp     eax, 0FFFFFFFFh
.text:00413350                 jz      short loc_4133D0
.text:00413352                 mov     [esp+10h], ebx
.text:00413356                 lea     edx, [esp+80h]
.text:0041335D                 lea     ecx, [esp+24h]
.text:00413361                 mov     [esp+70h], edx
.text:00413365                 mov     [esp+18h], ecx
.text:00413369                 mov     [esp+8], ebx
.text:0041336D                 mov     dword ptr [esp+6Ch], 7303h
.text:00413375                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041337D                 mov     [esp+64h], ebp
.text:00413381                 mov     dword ptr [esp+78h], 1
.text:00413389                 mov     dword ptr [esp+1Ch], 0
.text:00413391                 mov     dword ptr [esp+14h], 1Ch
.text:00413399                 mov     dword ptr [esp+0Ch], 1Ch
.text:004133A1                 mov     dword ptr [esp+4], 6
.text:004133A9                 mov     [esp], eax
.text:004133AC                 call    DeviceIoControl
.text:004133B1                 sub     esp, 20h
.text:004133B4                 mov     ebx, eax
.text:004133B6                 mov     [esp], edi
.text:004133B9                 call    CloseHandle
.text:004133BE                 sub     esp, 4
.text:004133C1                 test    ebx, ebx
.text:004133C3                 jz      short loc_4133D0
.text:004133C5                 test    byte ptr [esp+78h], 1
.text:004133CA                 jz      loc_4136B0
.text:004133D0
.text:004133D0 loc_4133D0:                             ; CODE XREF: .text:00413350↑j
.text:004133D0                                         ; .text:004133C3↑j
.text:004133D0                 call    sub_4140B0
.text:004133D5                 mov     edi, eax
.text:004133D7                 call    _errno
.text:004133DC                 mov     [eax], edi
.text:004133DE                 xor     eax, eax
.text:004133E0
.text:004133E0 loc_4133E0:                             ; CODE XREF: .text:004136DF↓j
.text:004133E0                                         ; .text:0041370B↓j
.text:004133E0                 test    eax, eax
.text:004133E2                 jnz     short loc_413404
.text:004133E4                 mov     dword ptr [esp+34h], 1
.text:004133EC                 mov     dword ptr [esp+30h], 200h
.text:004133F4                 mov     dword ptr [esp+2Ch], 0
.text:004133FC                 mov     dword ptr [esp+28h], 0
.text:00413404
.text:00413404 loc_413404:                             ; CODE XREF: .text:004133E2↑j
.text:00413404                 mov     edx, [esp+30h]
.text:00413408                 mov     edi, [esp+34h]
.text:0041340C                 mov     ecx, [esp+20h]
.text:00413410                 imul    edi, edx
.text:00413413                 test    ecx, ecx
.text:00413415                 jnz     short loc_41343D
.text:00413417                 mov     eax, [esp+28h]
.text:0041341B                 mul     edi
.text:0041341D                 mov     esi, eax
.text:0041341F                 mov     eax, [esp+2Ch]
.text:00413423                 mov     [esp+44h], edx
.text:00413427                 mov     [esp+40h], esi
.text:0041342B                 mul     edi
.text:0041342D                 mov     [esp+48h], eax
.text:00413431                 mov     [esp+4Ch], edx
.text:00413435                 mov     [esp+38h], eax
.text:00413439                 mov     [esp+3Ch], edx
.text:0041343D
.text:0041343D loc_41343D:                             ; CODE XREF: .text:00413415↑j
.text:0041343D                 mov     ebx, [esp+5Ch]
.text:00413441                 lea     edx, [esp+0B0h]
.text:00413448                 mov     ecx, [esp+8D4h]
.text:0041344F                 mov     [ecx+48h], ebx
.text:00413452                 mov     dword ptr [esp+4], offset loc_4131B8
.text:0041345A                 mov     [esp], edx
.text:0041345D                 call    _stricmp
.text:00413462                 test    eax, eax
.text:00413464                 jnz     loc_413620
.text:0041346A                 mov     esi, [esp+8D4h]
.text:00413471                 mov     dword ptr [esi], 5346544Eh
.text:00413477
.text:00413477 loc_413477:                             ; CODE XREF: .text:00413648↓j
.text:00413477                                         ; .text:00413675↓j ...
.text:00413477                 mov     ebx, [esp+30h]
.text:0041347B                 mov     esi, [esp+8D4h]
.text:00413482                 mov     [esi+4], ebx
.text:00413485                 mov     [esi+8], ebx
.text:00413488                 mov     ebx, [esi+8]
.text:0041348B                 mov     [esi+0Ch], edi
.text:0041348E                 mov     ecx, [esp+44h]
.text:00413492                 xor     esi, esi
.text:00413494                 mov     [esp+8], ebx
.text:00413498                 mov     edx, [esp+40h]
.text:0041349C                 mov     [esp+0Ch], esi
.text:004134A0                 mov     [esp+4], ecx
.text:004134A4                 mov     [esp], edx
.text:004134A7                 call    sub_418E70
.text:004134AC                 mov     ecx, [esp+8D4h]
.text:004134B3                 mov     [ecx+10h], eax
.text:004134B6                 mov     [ecx+14h], edx
.text:004134B9                 mov     ecx, [esp+4Ch]
.text:004134BD                 mov     [esp+8], ebx
.text:004134C1                 mov     edx, [esp+48h]
.text:004134C5                 mov     [esp+0Ch], esi
.text:004134C9                 mov     [esp+4], ecx
.text:004134CD                 mov     [esp], edx
.text:004134D0                 call    sub_418E70
.text:004134D5                 mov     ecx, [esp+8D4h]
.text:004134DC                 mov     [ecx+18h], eax
.text:004134DF                 mov     [ecx+1Ch], edx
.text:004134E2                 mov     ecx, [esp+38h]
.text:004134E6                 mov     [esp+8], ebx
.text:004134EA                 mov     ebx, [esp+3Ch]
.text:004134EE                 mov     [esp+0Ch], esi
.text:004134F2                 mov     [esp], ecx
.text:004134F5                 mov     [esp+4], ebx
.text:004134F9                 call    sub_418E70
.text:004134FE                 mov     esi, [esp+8D4h]
.text:00413505                 mov     [esi+20h], eax
.text:00413508                 mov     [esi+24h], edx
.text:0041350B                 mov     ecx, [esp+44h]
.text:0041350F                 mov     esi, edi
.text:00413511                 mov     [esp+8], esi
.text:00413515                 mov     edx, [esp+40h]
.text:00413519                 xor     edi, edi
.text:0041351B                 mov     [esp+0Ch], edi
.text:0041351F                 mov     [esp+4], ecx
.text:00413523                 mov     [esp], edx
.text:00413526                 call    sub_418E70
.text:0041352B                 mov     ebx, [esp+8D4h]
.text:00413532                 mov     [ebx+28h], eax
.text:00413535                 mov     [ebx+2Ch], edx
.text:00413538                 mov     ecx, [esp+4Ch]
.text:0041353C                 mov     [esp+8], esi
.text:00413540                 mov     edx, [esp+48h]
.text:00413544                 mov     [esp+0Ch], edi
.text:00413548                 mov     [esp+4], ecx
.text:0041354C                 mov     [esp], edx
.text:0041354F                 call    sub_418E70
.text:00413554                 mov     ebx, [esp+8D4h]
.text:0041355B                 mov     [ebx+30h], eax
.text:0041355E                 mov     [ebx+34h], edx
.text:00413561                 mov     ecx, [esp+3Ch]
.text:00413565                 mov     [esp+8], esi
.text:00413569                 mov     edx, [esp+38h]
.text:0041356D                 mov     [esp+0Ch], edi
.text:00413571                 mov     [esp+4], ecx
.text:00413575                 mov     [esp], edx
.text:00413578                 call    sub_418E70
.text:0041357D                 mov     edx, [esp+8D4h]
.text:00413584                 lea     ecx, [esp+0B0h]
.text:0041358B                 mov     [edx+38h], eax
.text:0041358E                 mov     esi, [esp+58h]
.text:00413592                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00413599                 mov     [edx+110h], esi
.text:0041359F                 mov     esi, edx
.text:004135A1                 add     esi, 4Ch ; 'L'
.text:004135A4                 movzx   ebx, word ptr [esp+56h]
.text:004135A9                 movzx   edi, word ptr [esp+54h]
.text:004135AE                 mov     [edx+3Ch], ebx
.text:004135B1                 lea     ebx, [esp+4B0h]
.text:004135B8                 mov     [edx+40h], edi
.text:004135BB                 mov     [esp+4], ecx
.text:004135BF                 mov     dword ptr [esp+8], 10h
.text:004135C7                 mov     [esp], esi
.text:004135CA                 call    strncpy
.text:004135CF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004135D7                 mov     edi, [esp+8D4h]
.text:004135DE                 mov     [esp+4], ebx
.text:004135E2                 add     edi, 5Ch ; '\'
.text:004135E5                 mov     [esp], edi
.text:004135E8                 call    strncpy
.text:004135ED                 mov     [esp+4], ebp
.text:004135F1                 mov     ebp, [esp+8D4h]
.text:004135F8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00413600                 add     ebp, 0B6h ; '¶'
.text:00413606                 mov     [esp], ebp
.text:00413609                 call    strncpy
.text:0041360E                 xor     eax, eax
.text:00413610
.text:00413610 loc_413610:                             ; CODE XREF: .text:0041374C↓j
.text:00413610                 add     esp, 8BCh
.text:00413616                 pop     ebx
.text:00413617                 pop     esi
.text:00413618                 pop     edi
.text:00413619                 pop     ebp
.text:0041361A                 retn
.text:0041361A ; ---------------------------------------------------------------------------
.text:0041361B                 align 10h
.text:00413620
.text:00413620 loc_413620:                             ; CODE XREF: .text:00413464↑j
.text:00413620                 mov     dword ptr [esp+4], 4131BDh
.text:00413628                 lea     eax, [esp+0B0h]
.text:0041362F                 mov     [esp], eax
.text:00413632                 call    _stricmp
.text:00413637                 test    eax, eax
.text:00413639                 jnz     short loc_41364D
.text:0041363B                 mov     edx, [esp+8D4h]
.text:00413642                 mov     dword ptr [edx], 4008h
.text:00413648                 jmp     loc_413477
.text:0041364D ; ---------------------------------------------------------------------------
.text:0041364D
.text:0041364D loc_41364D:                             ; CODE XREF: .text:00413639↑j
.text:0041364D                 mov     dword ptr [esp+4], 4131C3h
.text:00413655                 lea     ecx, [esp+0B0h]
.text:0041365C                 mov     [esp], ecx
.text:0041365F                 call    _stricmp
.text:00413664                 test    eax, eax
.text:00413666                 jnz     short loc_41367A
.text:00413668                 mov     ebx, [esp+8D4h]
.text:0041366F                 mov     dword ptr [ebx], 4006h
.text:00413675                 jmp     loc_413477
.text:0041367A ; ---------------------------------------------------------------------------
.text:0041367A
.text:0041367A loc_41367A:                             ; CODE XREF: .text:00413666↑j
.text:0041367A                 mov     dword ptr [esp+4], 4131C7h
.text:00413682                 lea     eax, [esp+0B0h]
.text:00413689                 mov     [esp], eax
.text:0041368C                 call    _stricmp
.text:00413691                 test    eax, eax
.text:00413693                 mov     esi, [esp+8D4h]
.text:0041369A                 setnz   cl
.text:0041369D                 movzx   edx, cl
.text:004136A0                 dec     edx
.text:004136A1                 and     edx, 4000h
.text:004136A7                 mov     [esi], edx
.text:004136A9                 jmp     loc_413477
.text:004136A9 ; ---------------------------------------------------------------------------
.text:004136AE                 align 10h
.text:004136B0
.text:004136B0 loc_4136B0:                             ; CODE XREF: .text:004133CA↑j
.text:004136B0                 mov     edi, [esp+84h]
.text:004136B7                 mov     eax, 1
.text:004136BC                 mov     edx, [esp+88h]
.text:004136C3                 mov     ecx, [esp+8Ch]
.text:004136CA                 mov     ebx, [esp+90h]
.text:004136D1                 mov     [esp+34h], edi
.text:004136D5                 mov     [esp+30h], edx
.text:004136D9                 mov     [esp+2Ch], ecx
.text:004136DD                 mov     [esi], ebx
.text:004136DF                 jmp     loc_4133E0
.text:004136E4 ; ---------------------------------------------------------------------------
.text:004136E4
.text:004136E4 loc_4136E4:                             ; CODE XREF: .text:004132F6↑j
.text:004136E4                 mov     [esp+10h], esi
.text:004136E8                 lea     eax, [esp+2Ch]
.text:004136EC                 lea     esi, [esp+30h]
.text:004136F0                 mov     [esp+0Ch], eax
.text:004136F4                 lea     edi, [esp+34h]
.text:004136F8                 mov     [esp+8], esi
.text:004136FC                 mov     [esp+4], edi
.text:00413700
.text:00413700 loc_413700:                             ; CODE XREF: .text:0041372C↓j
.text:00413700                 mov     [esp], ebp
.text:00413703                 call    GetDiskFreeSpaceA
.text:00413708                 sub     esp, 14h
.text:0041370B                 jmp     loc_4133E0
.text:00413710 ; ---------------------------------------------------------------------------
.text:00413710
.text:00413710 loc_413710:                             ; CODE XREF: .text:004132DF↑j
.text:00413710                 mov     [esp+10h], esi
.text:00413714                 lea     ebx, [esp+2Ch]
.text:00413718                 lea     eax, [esp+30h]
.text:0041371C                 mov     [esp+0Ch], ebx
.text:00413720                 lea     esi, [esp+34h]
.text:00413724                 mov     [esp+8], eax
.text:00413728                 mov     [esp+4], esi
.text:0041372C                 jmp     short loc_413700
.text:0041372E ; ---------------------------------------------------------------------------
.text:0041372E
.text:0041372E loc_41372E:                             ; CODE XREF: .text:00413297↑j
.text:0041372E                 mov     [esp], edi
.text:00413731                 call    FreeLibrary
.text:00413736                 sub     esp, 4
.text:00413739                 call    sub_4140B0
.text:0041373E                 mov     esi, eax
.text:00413740                 call    _errno
.text:00413745                 mov     [eax], esi
.text:00413747
.text:00413747 loc_413747:                             ; CODE XREF: .text:00413767↓j
.text:00413747                 mov     eax, 0FFFFFFFFh
.text:0041374C                 jmp     loc_413610
.text:00413751 ; ---------------------------------------------------------------------------
.text:00413751
.text:00413751 loc_413751:                             ; CODE XREF: .text:00413211↑j
.text:00413751                 mov     [esp], edi
.text:00413754                 call    FreeLibrary
.text:00413759                 sub     esp, 4
.text:0041375C                 call    _errno
.text:00413761                 mov     dword ptr [eax], 2
.text:00413767                 jmp     short loc_413747
.text:00413767 ; ---------------------------------------------------------------------------
.text:00413769                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770
.text:00413770 ; int __cdecl sub_413770(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00413770 sub_413770      proc near               ; CODE XREF: sub_4111A0+2C7↑p
.text:00413770                                         ; .text:004117DA↑p
.text:00413770
.text:00413770 lpFileName      = dword ptr -9Ch
.text:00413770 dwDesiredAccess = dword ptr -98h
.text:00413770 dwShareMode     = dword ptr -94h
.text:00413770 lpSecurityAttributes= dword ptr -90h
.text:00413770 dwCreationDisposition= dword ptr -8Ch
.text:00413770 dwFlagsAndAttributes= dword ptr -88h
.text:00413770 hTemplateFile   = dword ptr -84h
.text:00413770 lpOverlapped    = dword ptr -80h
.text:00413770 BytesReturned   = dword ptr -70h
.text:00413770 InBuffer        = byte ptr -6Ch
.text:00413770 var_68          = dword ptr -68h
.text:00413770 var_64          = dword ptr -64h
.text:00413770 var_60          = dword ptr -60h
.text:00413770 var_5C          = dword ptr -5Ch
.text:00413770 var_54          = dword ptr -54h
.text:00413770 var_4C          = byte ptr -4Ch
.text:00413770 var_48          = dword ptr -48h
.text:00413770 var_44          = dword ptr -44h
.text:00413770 var_40          = dword ptr -40h
.text:00413770 var_3C          = dword ptr -3Ch
.text:00413770 lpRootPathName  = dword ptr -2Ch
.text:00413770 lpSectorsPerCluster= dword ptr -28h
.text:00413770 lpBytesPerSector= dword ptr -24h
.text:00413770 lpNumberOfFreeClusters= dword ptr -20h
.text:00413770 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00413770 var_18          = dword ptr -18h
.text:00413770 var_14          = dword ptr -14h
.text:00413770 var_10          = dword ptr -10h
.text:00413770 var_C           = dword ptr -0Ch
.text:00413770 var_8           = dword ptr -8
.text:00413770 var_4           = dword ptr -4
.text:00413770 arg_0           = dword ptr  4
.text:00413770 arg_4           = dword ptr  8
.text:00413770 arg_8           = dword ptr  0Ch
.text:00413770 arg_C           = dword ptr  10h
.text:00413770 arg_10          = dword ptr  14h
.text:00413770
.text:00413770                 sub     esp, 2Ch
.text:00413773                 mov     edx, [esp+2Ch+arg_0]
.text:00413777                 mov     [esp+2Ch+var_10], ebx
.text:0041377B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041377F                 mov     [esp+2Ch+var_C], esi
.text:00413783                 mov     esi, [esp+2Ch+arg_C]
.text:00413787                 mov     [esp+2Ch+var_8], edi
.text:0041378B                 mov     edi, [esp+2Ch+arg_8]
.text:0041378F                 mov     [esp+2Ch+var_4], ebp
.text:00413793                 mov     ebp, [esp+2Ch+arg_4]
.text:00413797                 mov     [esp+2Ch+var_14], edx
.text:0041379B                 call    sub_414B90
.text:004137A0                 test    eax, eax
.text:004137A2                 jz      short loc_4137D4
.text:004137A4                 mov     [esp+2Ch+arg_10], ebx
.text:004137A8                 mov     edx, [esp+2Ch+var_14]
.text:004137AC                 mov     ebx, [esp+2Ch+var_10]
.text:004137B0                 mov     [esp+2Ch+arg_C], esi
.text:004137B4                 mov     esi, [esp+2Ch+var_C]
.text:004137B8                 mov     [esp+2Ch+arg_8], edi
.text:004137BC                 mov     edi, [esp+2Ch+var_8]
.text:004137C0                 mov     [esp+2Ch+arg_4], ebp
.text:004137C4                 mov     ebp, [esp+2Ch+var_4]
.text:004137C8                 mov     [esp+2Ch+arg_0], edx
.text:004137CC                 add     esp, 2Ch
.text:004137CF                 jmp     loc_413880
.text:004137D4 ; ---------------------------------------------------------------------------
.text:004137D4
.text:004137D4 loc_4137D4:                             ; CODE XREF: sub_413770+32↑j
.text:004137D4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:004137D8                 mov     ecx, [esp+2Ch+var_14]
.text:004137DC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:004137E0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:004137E4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:004137E8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:004137EB                 call    GetDiskFreeSpaceA
.text:004137F0                 sub     esp, 14h
.text:004137F3                 mov     ebx, [esp+2Ch+var_10]
.text:004137F7                 mov     esi, [esp+2Ch+var_C]
.text:004137FB                 mov     edi, [esp+2Ch+var_8]
.text:004137FF                 mov     ebp, [esp+2Ch+var_4]
.text:00413803                 add     esp, 2Ch
.text:00413806                 retn
.text:00413806 ; ---------------------------------------------------------------------------
.text:00413807                 align 10h
.text:00413810
.text:00413810 loc_413810:                             ; CODE XREF: .text:00414EAD↓p
.text:00413810                 sub     esp, 1Ch
.text:00413813                 mov     [esp+1Ch+var_4], esi
.text:00413817                 mov     esi, [esp+1Ch+arg_0]
.text:0041381B                 mov     [esp+1Ch+var_8], ebx
.text:0041381F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00413822                 call    sub_412D50
.text:00413827                 test    eax, eax
.text:00413829                 mov     ebx, eax
.text:0041382B                 jz      short loc_413840
.text:0041382D                 cmp     byte ptr [eax], 0
.text:00413830                 jz      short loc_413840
.text:00413832                 test    esi, esi
.text:00413834                 jz      short loc_413840
.text:00413836                 cmp     byte ptr [esi], 0
.text:00413839                 jnz     short loc_413866
.text:0041383B                 nop
.text:0041383C                 lea     esi, [esi+0]
.text:00413840
.text:00413840 loc_413840:                             ; CODE XREF: sub_413770+BB↑j
.text:00413840                                         ; sub_413770+C0↑j ...
.text:00413840                 call    _errno
.text:00413845                 mov     dword ptr [eax], 2
.text:0041384B                 mov     esi, 0FFFFFFFFh
.text:00413850
.text:00413850 loc_413850:                             ; CODE XREF: sub_413770+108↓j
.text:00413850                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00413853                 call    free
.text:00413858                 mov     eax, esi
.text:0041385A                 mov     ebx, [esp+1Ch+var_8]
.text:0041385E                 mov     esi, [esp+1Ch+var_4]
.text:00413862                 add     esp, 1Ch
.text:00413865                 retn
.text:00413866 ; ---------------------------------------------------------------------------
.text:00413866
.text:00413866 loc_413866:                             ; CODE XREF: sub_413770+C9↑j
.text:00413866                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00413869                 mov     edx, [esp+1Ch+arg_4]
.text:0041386D                 mov     [esp+1Ch+var_18], edx
.text:00413871                 call    near ptr loc_4131CB+5
.text:00413876                 mov     esi, eax
.text:00413878                 jmp     short loc_413850
.text:00413878 ; ---------------------------------------------------------------------------
.text:0041387A                 align 10h
.text:00413880
.text:00413880 loc_413880:                             ; CODE XREF: sub_413770+5F↑j
.text:00413880                 push    ebp
.text:00413881                 push    edi
.text:00413882                 push    esi
.text:00413883                 push    ebx
.text:00413884                 sub     esp, 8Ch
.text:0041388A                 mov     ebp, [esp+9Ch+arg_0]
.text:00413891                 call    sub_414B90
.text:00413896                 test    eax, eax
.text:00413898                 jz      short loc_4138A8
.text:0041389A                 call    sub_414AE0
.text:0041389F                 cmp     eax, 0Bh
.text:004138A2                 jle     loc_4139D0
.text:004138A8
.text:004138A8 loc_4138A8:                             ; CODE XREF: sub_413770+128↑j
.text:004138A8                 cld
.text:004138A9                 xor     eax, eax
.text:004138AB                 lea     ebx, [esp+9Ch+InBuffer]
.text:004138AF                 mov     ecx, 7
.text:004138B4                 mov     edi, ebx
.text:004138B6                 lea     esi, [esp+9Ch+var_4C]
.text:004138BA                 rep stosd
.text:004138BC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:004138C4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:004138CC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:004138D4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004138DC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:004138E4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:004138EC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:004138F3                 call    CreateFileA
.text:004138F8                 sub     esp, 1Ch
.text:004138FB                 mov     edi, eax
.text:004138FD                 cmp     eax, 0FFFFFFFFh
.text:00413900                 jz      short loc_413975
.text:00413902                 mov     [esp+9Ch+var_68], ebp
.text:00413906                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0041390A                 mov     [esp+9Ch+var_5C], esi
.text:0041390E                 mov     [esp+9Ch+var_60], 7303h
.text:00413916                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0041391E                 mov     [esp+9Ch+var_54], 1
.text:00413926                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0041392E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00413932                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0041393A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0041393E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00413946                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0041394A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00413952                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00413955                 call    DeviceIoControl
.text:0041395A                 sub     esp, 20h
.text:0041395D                 mov     esi, eax
.text:0041395F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00413962                 call    CloseHandle
.text:00413967                 sub     esp, 4
.text:0041396A                 test    esi, esi
.text:0041396C                 jz      short loc_413975
.text:0041396E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00413973                 jz      short loc_413990
.text:00413975
.text:00413975 loc_413975:                             ; CODE XREF: sub_413770+190↑j
.text:00413975                                         ; sub_413770+1FC↑j
.text:00413975                 call    sub_4140B0
.text:0041397A                 mov     edi, eax
.text:0041397C                 call    _errno
.text:00413981                 mov     [eax], edi
.text:00413983                 xor     eax, eax
.text:00413985
.text:00413985 loc_413985:                             ; CODE XREF: sub_413770+25A↓j
.text:00413985                                         ; sub_413770+297↓j
.text:00413985                 add     esp, 8Ch
.text:0041398B                 pop     ebx
.text:0041398C                 pop     esi
.text:0041398D                 pop     edi
.text:0041398E                 pop     ebp
.text:0041398F                 retn
.text:00413990 ; ---------------------------------------------------------------------------
.text:00413990
.text:00413990 loc_413990:                             ; CODE XREF: sub_413770+203↑j
.text:00413990                 mov     edx, [esp+9Ch+var_48]
.text:00413994                 mov     eax, 1
.text:00413999                 mov     ebx, [esp+9Ch+arg_4]
.text:004139A0                 mov     ebp, [esp+9Ch+arg_8]
.text:004139A7                 mov     ecx, [esp+9Ch+arg_C]
.text:004139AE                 mov     [ebx], edx
.text:004139B0                 mov     edi, [esp+9Ch+var_44]
.text:004139B4                 mov     ebx, [esp+9Ch+arg_10]
.text:004139BB                 mov     [ebp+0], edi
.text:004139BE                 mov     esi, [esp+9Ch+var_40]
.text:004139C2                 mov     [ecx], esi
.text:004139C4                 mov     edx, [esp+9Ch+var_3C]
.text:004139C8                 mov     [ebx], edx
.text:004139CA                 jmp     short loc_413985
.text:004139CA ; ---------------------------------------------------------------------------
.text:004139CC                 align 10h
.text:004139D0
.text:004139D0 loc_4139D0:                             ; CODE XREF: sub_413770+132↑j
.text:004139D0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:004139D3                 mov     eax, [esp+9Ch+arg_C]
.text:004139DA                 mov     ecx, [esp+9Ch+arg_10]
.text:004139E1                 mov     edx, [esp+9Ch+arg_8]
.text:004139E8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:004139EC                 mov     eax, [esp+9Ch+arg_4]
.text:004139F3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:004139F7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:004139FB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:004139FF                 call    GetDiskFreeSpaceA
.text:00413A04                 sub     esp, 14h
.text:00413A07                 jmp     loc_413985
.text:00413A07 sub_413770      endp ; sp-analysis failed
.text:00413A07
.text:00413A07 ; ---------------------------------------------------------------------------
.text:00413A0C                 align 10h
.text:00413A10
.text:00413A10 ; =============== S U B R O U T I N E =======================================
.text:00413A10
.text:00413A10
.text:00413A10 ; int __cdecl sub_413A10(void *, void *Src, size_t Size, int, int)
.text:00413A10 sub_413A10      proc near               ; CODE XREF: sub_413A10+72↓p
.text:00413A10                                         ; sub_413A10+96↓p ...
.text:00413A10
.text:00413A10 var_3C          = dword ptr -3Ch
.text:00413A10 var_38          = dword ptr -38h
.text:00413A10 var_34          = dword ptr -34h
.text:00413A10 var_30          = dword ptr -30h
.text:00413A10 var_2C          = dword ptr -2Ch
.text:00413A10 var_28          = dword ptr -28h
.text:00413A10 var_24          = dword ptr -24h
.text:00413A10 var_20          = dword ptr -20h
.text:00413A10 var_1C          = dword ptr -1Ch
.text:00413A10 var_18          = dword ptr -18h
.text:00413A10 var_14          = dword ptr -14h
.text:00413A10 arg_0           = dword ptr  4
.text:00413A10 Src             = dword ptr  8
.text:00413A10 Size            = dword ptr  0Ch
.text:00413A10 arg_C           = dword ptr  10h
.text:00413A10 arg_10          = dword ptr  14h
.text:00413A10
.text:00413A10                 push    ebp
.text:00413A11                 push    edi
.text:00413A12                 push    esi
.text:00413A13                 push    ebx
.text:00413A14                 sub     esp, 2Ch
.text:00413A17                 mov     edx, [esp+3Ch+arg_0]
.text:00413A1B                 mov     ebx, [esp+3Ch+Src]
.text:00413A1F                 mov     eax, [esp+3Ch+arg_C]
.text:00413A23                 mov     edi, [esp+3Ch+Size]
.text:00413A27                 mov     [esp+3Ch+var_14], edx
.text:00413A2B                 cmp     ebx, 1
.text:00413A2E                 mov     edx, [esp+3Ch+arg_10]
.text:00413A32                 mov     [esp+3Ch+var_18], eax
.text:00413A36                 mov     [esp+3Ch+var_1C], edx
.text:00413A3A                 ja      short loc_413A44
.text:00413A3C                 add     esp, 2Ch
.text:00413A3F                 pop     ebx
.text:00413A40                 pop     esi
.text:00413A41                 pop     edi
.text:00413A42                 pop     ebp
.text:00413A43                 retn
.text:00413A44 ; ---------------------------------------------------------------------------
.text:00413A44
.text:00413A44 loc_413A44:                             ; CODE XREF: sub_413A10+2A↑j
.text:00413A44                 mov     [esp+3Ch+var_34], edi ; Size
.text:00413A48                 mov     esi, ebx
.text:00413A4A                 mov     ebp, [esp+3Ch+var_14]
.text:00413A4E                 shr     esi, 1
.text:00413A50                 mov     eax, ebx
.text:00413A52                 mov     ecx, [esp+3Ch+var_1C]
.text:00413A56                 mov     [esp+3Ch+var_38], esi ; Src
.text:00413A5A                 mov     edx, esi
.text:00413A5C                 sub     eax, esi
.text:00413A5E                 mov     [esp+3Ch+var_24], ebp
.text:00413A62                 imul    edx, edi
.text:00413A65                 mov     ebp, [esp+3Ch+var_14]
.text:00413A69                 mov     [esp+3Ch+var_28], eax
.text:00413A6D                 mov     eax, [esp+3Ch+var_14]
.text:00413A71                 add     ebp, edx
.text:00413A73                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00413A77                 mov     edx, [esp+3Ch+var_18]
.text:00413A7B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:00413A7E                 mov     [esp+3Ch+var_30], edx ; int
.text:00413A82                 call    sub_413A10
.text:00413A87                 mov     [esp+3Ch+var_34], edi ; Size
.text:00413A8B                 mov     ecx, [esp+3Ch+var_1C]
.text:00413A8F                 mov     eax, [esp+3Ch+var_18]
.text:00413A93                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:00413A96                 mov     edx, [esp+3Ch+var_28]
.text:00413A9A                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00413A9E                 mov     [esp+3Ch+var_30], eax ; int
.text:00413AA2                 mov     [esp+3Ch+var_38], edx ; Src
.text:00413AA6                 call    sub_413A10
.text:00413AAB                 mov     ecx, [esp+3Ch+var_1C]
.text:00413AAF                 cmp     edi, 4
.text:00413AB2                 mov     [esp+3Ch+var_20], ecx
.text:00413AB6                 jz      loc_413B82
.text:00413ABC
.text:00413ABC loc_413ABC:                             ; CODE XREF: sub_413A10+177↓j
.text:00413ABC                 test    esi, esi
.text:00413ABE                 jnz     short loc_413AF0
.text:00413AC0
.text:00413AC0 loc_413AC0:                             ; CODE XREF: sub_413A10+EA↓j
.text:00413AC0                                         ; sub_413A10+107↓j ...
.text:00413AC0                 mov     edx, [esp+3Ch+var_28]
.text:00413AC4                 sub     ebx, edx
.text:00413AC6                 imul    ebx, edi
.text:00413AC9                 mov     edi, [esp+3Ch+var_1C]
.text:00413ACD                 mov     [esp+3Ch+Size], ebx ; Size
.text:00413AD1                 mov     ebx, [esp+3Ch+var_14]
.text:00413AD5                 mov     [esp+3Ch+Src], edi ; Src
.text:00413AD9                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:00413ADD                 add     esp, 2Ch
.text:00413AE0                 pop     ebx
.text:00413AE1                 pop     esi
.text:00413AE2                 pop     edi
.text:00413AE3                 pop     ebp
.text:00413AE4                 jmp     memcpy
.text:00413AE4 ; ---------------------------------------------------------------------------
.text:00413AE9                 align 10h
.text:00413AF0
.text:00413AF0 loc_413AF0:                             ; CODE XREF: sub_413A10+AE↑j
.text:00413AF0                 mov     eax, [esp+3Ch+var_28]
.text:00413AF4                 test    eax, eax
.text:00413AF6                 jnz     short loc_413B20
.text:00413AF8
.text:00413AF8 loc_413AF8:                             ; CODE XREF: sub_413A10+151↓j
.text:00413AF8                                         ; sub_413A10+18B↓j ...
.text:00413AF8                 test    esi, esi
.text:00413AFA                 jz      short loc_413AC0
.text:00413AFC                 imul    esi, edi
.text:00413AFF                 mov     ebp, [esp+3Ch+var_24]
.text:00413B03                 mov     [esp+3Ch+var_38], ebp ; Src
.text:00413B07                 mov     [esp+3Ch+var_34], esi ; Size
.text:00413B0B                 mov     esi, [esp+3Ch+var_20]
.text:00413B0F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:00413B12                 call    memcpy
.text:00413B17                 jmp     short loc_413AC0
.text:00413B17 ; ---------------------------------------------------------------------------
.text:00413B19                 align 10h
.text:00413B20
.text:00413B20 loc_413B20:                             ; CODE XREF: sub_413A10+E6↑j
.text:00413B20                                         ; sub_413A10+14F↓j
.text:00413B20                 mov     [esp+3Ch+var_38], ebp
.text:00413B24                 mov     ecx, [esp+3Ch+var_24]
.text:00413B28                 mov     [esp+3Ch+var_3C], ecx
.text:00413B2B                 call    [esp+3Ch+var_18]
.text:00413B2F                 test    eax, eax
.text:00413B31                 jle     short loc_413B63
.text:00413B33                 mov     [esp+3Ch+var_38], ebp
.text:00413B37                 mov     ecx, [esp+3Ch+var_20]
.text:00413B3B                 add     ebp, edi
.text:00413B3D                 mov     [esp+3Ch+var_34], edi
.text:00413B41                 mov     [esp+3Ch+var_3C], ecx
.text:00413B44                 call    sub_413D80
.text:00413B49                 dec     [esp+3Ch+var_28]
.text:00413B4D
.text:00413B4D loc_413B4D:                             ; CODE XREF: sub_413A10+170↓j
.text:00413B4D                 mov     [esp+3Ch+var_20], eax
.text:00413B51                 test    esi, esi
.text:00413B53                 jz      loc_413AC0
.text:00413B59                 mov     eax, [esp+3Ch+var_28]
.text:00413B5D                 test    eax, eax
.text:00413B5F                 jnz     short loc_413B20
.text:00413B61                 jmp     short loc_413AF8
.text:00413B63 ; ---------------------------------------------------------------------------
.text:00413B63
.text:00413B63 loc_413B63:                             ; CODE XREF: sub_413A10+121↑j
.text:00413B63                 mov     [esp+3Ch+var_34], edi
.text:00413B67                 mov     eax, [esp+3Ch+var_24]
.text:00413B6B                 dec     esi
.text:00413B6C                 mov     edx, [esp+3Ch+var_20]
.text:00413B70                 mov     [esp+3Ch+var_38], eax
.text:00413B74                 mov     [esp+3Ch+var_3C], edx
.text:00413B77                 call    sub_413D80
.text:00413B7C                 add     [esp+3Ch+var_24], edi
.text:00413B80                 jmp     short loc_413B4D
.text:00413B82 ; ---------------------------------------------------------------------------
.text:00413B82
.text:00413B82 loc_413B82:                             ; CODE XREF: sub_413A10+A6↑j
.text:00413B82                 test    byte ptr [esp+3Ch+var_14], 3
.text:00413B87                 jnz     loc_413ABC
.text:00413B8D                 test    esi, esi
.text:00413B8F                 jz      loc_413AC0
.text:00413B95                 mov     ecx, [esp+3Ch+var_28]
.text:00413B99                 test    ecx, ecx
.text:00413B9B                 jz      loc_413AF8
.text:00413BA1
.text:00413BA1 loc_413BA1:                             ; CODE XREF: sub_413A10+1C9↓j
.text:00413BA1                 mov     [esp+3Ch+var_38], ebp
.text:00413BA5                 mov     edx, [esp+3Ch+var_24]
.text:00413BA9                 mov     [esp+3Ch+var_3C], edx
.text:00413BAC                 call    [esp+3Ch+var_18]
.text:00413BB0                 test    eax, eax
.text:00413BB2                 jle     short loc_413BE0
.text:00413BB4                 dec     [esp+3Ch+var_28]
.text:00413BB8                 mov     ecx, [ebp+0]
.text:00413BBB                 add     ebp, 4
.text:00413BBE                 mov     edx, [esp+3Ch+var_20]
.text:00413BC2
.text:00413BC2 loc_413BC2:                             ; CODE XREF: sub_413A10+1E0↓j
.text:00413BC2                 mov     [edx], ecx
.text:00413BC4                 add     edx, 4
.text:00413BC7                 test    esi, esi
.text:00413BC9                 mov     [esp+3Ch+var_20], edx
.text:00413BCD                 jz      loc_413AC0
.text:00413BD3                 mov     edx, [esp+3Ch+var_28]
.text:00413BD7                 test    edx, edx
.text:00413BD9                 jnz     short loc_413BA1
.text:00413BDB                 jmp     loc_413AF8
.text:00413BE0 ; ---------------------------------------------------------------------------
.text:00413BE0
.text:00413BE0 loc_413BE0:                             ; CODE XREF: sub_413A10+1A2↑j
.text:00413BE0                 mov     eax, [esp+3Ch+var_24]
.text:00413BE4                 dec     esi
.text:00413BE5                 mov     edx, [esp+3Ch+var_20]
.text:00413BE9                 add     [esp+3Ch+var_24], 4
.text:00413BEE                 mov     ecx, [eax]
.text:00413BF0                 jmp     short loc_413BC2
.text:00413BF0 sub_413A10      endp
.text:00413BF0
.text:00413BF0 ; ---------------------------------------------------------------------------
.text:00413BF2                 align 10h
.text:00413C00
.text:00413C00 ; =============== S U B R O U T I N E =======================================
.text:00413C00
.text:00413C00
.text:00413C00 ; int __cdecl sub_413C00(void *Block, void *, size_t, int)
.text:00413C00 sub_413C00      proc near               ; CODE XREF: sub_402010+770↑p
.text:00413C00                                         ; sub_403460+B4↑p
.text:00413C00
.text:00413C00 Size            = dword ptr -2Ch
.text:00413C00 Src             = dword ptr -28h
.text:00413C00 var_24          = dword ptr -24h
.text:00413C00 var_20          = dword ptr -20h
.text:00413C00 var_1C          = dword ptr -1Ch
.text:00413C00 var_18          = dword ptr -18h
.text:00413C00 var_14          = dword ptr -14h
.text:00413C00 var_10          = dword ptr -10h
.text:00413C00 var_C           = dword ptr -0Ch
.text:00413C00 var_8           = dword ptr -8
.text:00413C00 var_4           = dword ptr -4
.text:00413C00 Block           = dword ptr  4
.text:00413C00 arg_4           = dword ptr  8
.text:00413C00 arg_8           = dword ptr  0Ch
.text:00413C00 arg_C           = dword ptr  10h
.text:00413C00
.text:00413C00                 sub     esp, 2Ch
.text:00413C03                 mov     edx, [esp+2Ch+Block]
.text:00413C07                 mov     [esp+2Ch+var_8], edi
.text:00413C0B                 mov     edi, [esp+2Ch+arg_4]
.text:00413C0F                 mov     [esp+2Ch+var_C], esi
.text:00413C13                 mov     esi, [esp+2Ch+arg_8]
.text:00413C17                 mov     [esp+2Ch+var_10], ebx
.text:00413C1B                 mov     ebx, edi
.text:00413C1D                 imul    ebx, esi
.text:00413C20                 mov     [esp+2Ch+var_4], ebp
.text:00413C24                 mov     ebp, [esp+2Ch+arg_C]
.text:00413C28                 mov     [esp+2Ch+var_14], edx
.text:00413C2C                 cmp     ebx, 3FFh
.text:00413C32                 jbe     loc_413D45
.text:00413C38                 mov     ecx, ds:dword_41BA60
.text:00413C3E                 test    ecx, ecx
.text:00413C40                 jz      loc_413CF0
.text:00413C46
.text:00413C46 loc_413C46:                             ; CODE XREF: sub_413C00+12E↓j
.text:00413C46                 xor     edx, edx
.text:00413C48                 mov     eax, ebx
.text:00413C4A                 div     ds:dword_41BA70
.text:00413C50                 cmp     eax, ecx
.text:00413C52                 jbe     short loc_413C80
.text:00413C54
.text:00413C54 loc_413C54:                             ; CODE XREF: sub_413C00+E7↓j
.text:00413C54                 mov     [esp+2Ch+arg_8], esi
.text:00413C58                 mov     ebx, [esp+2Ch+var_10]
.text:00413C5C                 mov     esi, [esp+2Ch+var_14]
.text:00413C60                 mov     [esp+2Ch+arg_C], ebp
.text:00413C64                 mov     ebp, [esp+2Ch+var_4]
.text:00413C68                 mov     [esp+2Ch+arg_4], edi
.text:00413C6C                 mov     edi, [esp+2Ch+var_8]
.text:00413C70                 mov     [esp+2Ch+Block], esi
.text:00413C74                 mov     esi, [esp+2Ch+var_C]
.text:00413C78                 add     esp, 2Ch
.text:00413C7B                 jmp     __quicksort
.text:00413C80 ; ---------------------------------------------------------------------------
.text:00413C80
.text:00413C80 loc_413C80:                             ; CODE XREF: sub_413C00+52↑j
.text:00413C80                 call    _errno
.text:00413C85                 mov     edx, [eax]
.text:00413C87                 mov     [esp+2Ch+Size], ebx ; Size
.text:00413C8A                 mov     [esp+2Ch+var_18], edx
.text:00413C8E                 call    malloc
.text:00413C93                 test    eax, eax
.text:00413C95                 mov     ebx, eax
.text:00413C97                 jz      short loc_413CDC
.text:00413C99                 call    _errno
.text:00413C9E                 mov     ecx, [esp+2Ch+var_18]
.text:00413CA2                 mov     [eax], ecx
.text:00413CA4                 mov     [esp+2Ch+Src], edi ; Src
.text:00413CA8                 mov     edi, [esp+2Ch+var_14]
.text:00413CAC                 mov     [esp+2Ch+var_1C], ebx ; int
.text:00413CB0                 mov     [esp+2Ch+var_20], ebp ; int
.text:00413CB4                 mov     [esp+2Ch+var_24], esi ; Size
.text:00413CB8                 mov     [esp+2Ch+Size], edi ; void *
.text:00413CBB                 call    sub_413A10
.text:00413CC0                 mov     [esp+2Ch+Block], ebx ; Block
.text:00413CC4                 mov     esi, [esp+2Ch+var_C]
.text:00413CC8                 mov     ebx, [esp+2Ch+var_10]
.text:00413CCC                 mov     edi, [esp+2Ch+var_8]
.text:00413CD0                 mov     ebp, [esp+2Ch+var_4]
.text:00413CD4                 add     esp, 2Ch
.text:00413CD7                 jmp     free
.text:00413CDC ; ---------------------------------------------------------------------------
.text:00413CDC
.text:00413CDC loc_413CDC:                             ; CODE XREF: sub_413C00+97↑j
.text:00413CDC                 call    _errno
.text:00413CE1                 mov     ebx, [esp+2Ch+var_18]
.text:00413CE5                 mov     [eax], ebx
.text:00413CE7                 jmp     loc_413C54
.text:00413CE7 ; ---------------------------------------------------------------------------
.text:00413CEC                 align 10h
.text:00413CF0
.text:00413CF0 loc_413CF0:                             ; CODE XREF: sub_413C00+40↑j
.text:00413CF0                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:00413CF7                 call    _sysconf
.text:00413CFC                 mov     ds:dword_41BA60, eax
.text:00413D01                 mov     edx, eax
.text:00413D03                 inc     edx
.text:00413D04                 jz      short loc_413D38
.text:00413D06
.text:00413D06 loc_413D06:                             ; CODE XREF: sub_413C00+143↓j
.text:00413D06                 mov     eax, ds:dword_41BA60
.text:00413D0B                 test    eax, eax
.text:00413D0D                 js      short loc_413D33
.text:00413D0F
.text:00413D0F loc_413D0F:                             ; CODE XREF: sub_413C00+136↓j
.text:00413D0F                 mov     [esp+2Ch+Size], 1Eh
.text:00413D16                 sar     eax, 2
.text:00413D19                 mov     ds:dword_41BA60, eax
.text:00413D1E                 call    _sysconf
.text:00413D23                 mov     ds:dword_41BA70, eax
.text:00413D28                 mov     ecx, ds:dword_41BA60
.text:00413D2E                 jmp     loc_413C46
.text:00413D33 ; ---------------------------------------------------------------------------
.text:00413D33
.text:00413D33 loc_413D33:                             ; CODE XREF: sub_413C00+10D↑j
.text:00413D33                 add     eax, 3
.text:00413D36                 jmp     short loc_413D0F
.text:00413D38 ; ---------------------------------------------------------------------------
.text:00413D38
.text:00413D38 loc_413D38:                             ; CODE XREF: sub_413C00+104↑j
.text:00413D38                 mov     ecx, 7FFFFFFFh
.text:00413D3D                 mov     ds:dword_41BA60, ecx
.text:00413D43                 jmp     short loc_413D06
.text:00413D45 ; ---------------------------------------------------------------------------
.text:00413D45
.text:00413D45 loc_413D45:                             ; CODE XREF: sub_413C00+32↑j
.text:00413D45                 mov     [esp+2Ch+Size], ebx ; Size
.text:00413D48                 call    malloc
.text:00413D4D                 mov     [esp+2Ch+var_1C], eax ; int
.text:00413D51                 mov     eax, [esp+2Ch+var_14]
.text:00413D55                 mov     [esp+2Ch+var_20], ebp ; int
.text:00413D59                 mov     [esp+2Ch+var_24], esi ; Size
.text:00413D5D                 mov     [esp+2Ch+Src], edi ; Src
.text:00413D61                 mov     [esp+2Ch+Size], eax ; void *
.text:00413D64                 call    sub_413A10
.text:00413D69                 mov     ebx, [esp+2Ch+var_10]
.text:00413D6D                 mov     esi, [esp+2Ch+var_C]
.text:00413D71                 mov     edi, [esp+2Ch+var_8]
.text:00413D75                 mov     ebp, [esp+2Ch+var_4]
.text:00413D79                 add     esp, 2Ch
.text:00413D7C                 retn
.text:00413D7C sub_413C00      endp
.text:00413D7C
.text:00413D7C ; ---------------------------------------------------------------------------
.text:00413D7D                 align 10h
.text:00413D80
.text:00413D80 ; =============== S U B R O U T I N E =======================================
.text:00413D80
.text:00413D80
.text:00413D80 sub_413D80      proc near               ; CODE XREF: .text:0040A03D↑p
.text:00413D80                                         ; sub_413A10+134↑p ...
.text:00413D80
.text:00413D80 var_1C          = dword ptr -1Ch
.text:00413D80 var_18          = dword ptr -18h
.text:00413D80 var_14          = dword ptr -14h
.text:00413D80 arg_0           = dword ptr  4
.text:00413D80 arg_4           = dword ptr  8
.text:00413D80 arg_8           = dword ptr  0Ch
.text:00413D80
.text:00413D80                 push    edi
.text:00413D81                 push    esi
.text:00413D82                 push    ebx
.text:00413D83                 sub     esp, 10h
.text:00413D86                 mov     edi, [esp+1Ch+arg_8]
.text:00413D8A                 mov     esi, [esp+1Ch+arg_0]
.text:00413D8E                 mov     ebx, [esp+1Ch+arg_4]
.text:00413D92                 cmp     edi, 0Fh
.text:00413D95                 jbe     short loc_413DE0
.text:00413D97                 mov     ecx, esi
.text:00413D99                 neg     ecx
.text:00413D9B                 and     ecx, 3
.text:00413D9E                 sub     edi, ecx
.text:00413DA0                 mov     edx, ecx
.text:00413DA2                 test    ecx, ecx
.text:00413DA4                 jz      short loc_413DBA
.text:00413DA6                 lea     esi, [esi+0]
.text:00413DA9                 lea     edi, [edi+0]
.text:00413DB0
.text:00413DB0 loc_413DB0:                             ; CODE XREF: sub_413D80+38↓j
.text:00413DB0                 movzx   ecx, byte ptr [ebx]
.text:00413DB3                 inc     ebx
.text:00413DB4                 mov     [esi], cl
.text:00413DB6                 inc     esi
.text:00413DB7                 dec     edx
.text:00413DB8                 jnz     short loc_413DB0
.text:00413DBA
.text:00413DBA loc_413DBA:                             ; CODE XREF: sub_413D80+24↑j
.text:00413DBA                 test    bl, 3
.text:00413DBD                 jnz     short loc_413E03
.text:00413DBF                 mov     [esp+1Ch+var_18], ebx
.text:00413DC3                 mov     edx, edi
.text:00413DC5                 shr     edx, 2
.text:00413DC8                 mov     [esp+1Ch+var_14], edx
.text:00413DCC                 mov     [esp+1Ch+var_1C], esi
.text:00413DCF                 call    sub_4162A0
.text:00413DD4
.text:00413DD4 loc_413DD4:                             ; CODE XREF: sub_413D80+98↓j
.text:00413DD4                 mov     edx, edi
.text:00413DD6                 and     edx, 0FFFFFFFCh
.text:00413DD9                 and     edi, 3
.text:00413DDC                 add     ebx, edx
.text:00413DDE                 add     esi, edx
.text:00413DE0
.text:00413DE0 loc_413DE0:                             ; CODE XREF: sub_413D80+15↑j
.text:00413DE0                 test    edi, edi
.text:00413DE2                 mov     edx, edi
.text:00413DE4                 jz      short loc_413DFA
.text:00413DE6                 lea     esi, [esi+0]
.text:00413DE9                 lea     edi, [edi+0]
.text:00413DF0
.text:00413DF0 loc_413DF0:                             ; CODE XREF: sub_413D80+78↓j
.text:00413DF0                 movzx   ecx, byte ptr [ebx]
.text:00413DF3                 inc     ebx
.text:00413DF4                 mov     [esi], cl
.text:00413DF6                 inc     esi
.text:00413DF7                 dec     edx
.text:00413DF8                 jnz     short loc_413DF0
.text:00413DFA
.text:00413DFA loc_413DFA:                             ; CODE XREF: sub_413D80+64↑j
.text:00413DFA                 add     esp, 10h
.text:00413DFD                 mov     eax, esi
.text:00413DFF                 pop     ebx
.text:00413E00                 pop     esi
.text:00413E01                 pop     edi
.text:00413E02                 retn
.text:00413E03 ; ---------------------------------------------------------------------------
.text:00413E03
.text:00413E03 loc_413E03:                             ; CODE XREF: sub_413D80+3D↑j
.text:00413E03                 mov     [esp+1Ch+var_18], ebx
.text:00413E07                 mov     ecx, edi
.text:00413E09                 shr     ecx, 2
.text:00413E0C                 mov     [esp+1Ch+var_14], ecx
.text:00413E10                 mov     [esp+1Ch+var_1C], esi
.text:00413E13                 call    sub_4163A0
.text:00413E18                 jmp     short loc_413DD4
.text:00413E18 sub_413D80      endp
.text:00413E18
.text:00413E18 ; ---------------------------------------------------------------------------
.text:00413E1A                 align 10h
.text:00413E20
.text:00413E20 ; =============== S U B R O U T I N E =======================================
.text:00413E20
.text:00413E20 ; Attributes: info_from_lumina
.text:00413E20
.text:00413E20 ___get_errno    proc near               ; CODE XREF: sub_4140B0+B↓p
.text:00413E20
.text:00413E20 arg_0           = dword ptr  4
.text:00413E20
.text:00413E20                 mov     eax, [esp+arg_0]
.text:00413E24                 cmp     eax, 53h ; 'S'
.text:00413E27                 jg      loc_413F20
.text:00413E2D                 cmp     eax, 52h ; 'R'
.text:00413E30                 jge     short loc_413E82
.text:00413E32                 cmp     eax, 0Fh
.text:00413E35                 jz      short loc_413E50
.text:00413E37                 cmp     eax, 0Fh
.text:00413E3A                 jg      short loc_413EB0
.text:00413E3C                 cmp     eax, 9
.text:00413E3F                 jg      short loc_413E90
.text:00413E41                 cmp     eax, 7
.text:00413E44                 jge     short loc_413E89
.text:00413E46                 cmp     eax, 3
.text:00413E49                 jg      short loc_413E6A
.text:00413E4B                 cmp     eax, 2
.text:00413E4E                 jl      short loc_413E63
.text:00413E50
.text:00413E50 loc_413E50:                             ; CODE XREF: ___get_errno+15↑j
.text:00413E50                                         ; ___get_errno+9D↓j ...
.text:00413E50                 mov     edx, 2
.text:00413E55                 lea     esi, [esi+0]
.text:00413E59                 lea     edi, [edi+0]
.text:00413E60
.text:00413E60 loc_413E60:                             ; CODE XREF: ___get_errno+48↓j
.text:00413E60                                         ; ___get_errno+59↓j ...
.text:00413E60                 mov     eax, edx
.text:00413E62                 retn
.text:00413E63 ; ---------------------------------------------------------------------------
.text:00413E63
.text:00413E63 loc_413E63:                             ; CODE XREF: ___get_errno+2E↑j
.text:00413E63                                         ; ___get_errno+78↓j ...
.text:00413E63                 mov     edx, 16h
.text:00413E68                 jmp     short loc_413E60
.text:00413E6A ; ---------------------------------------------------------------------------
.text:00413E6A
.text:00413E6A loc_413E6A:                             ; CODE XREF: ___get_errno+29↑j
.text:00413E6A                 cmp     eax, 5
.text:00413E6D                 jz      short loc_413E82
.text:00413E6F                 cmp     eax, 5
.text:00413E72                 jg      short loc_413E7B
.text:00413E74                 mov     edx, 18h
.text:00413E79                 jmp     short loc_413E60
.text:00413E7B ; ---------------------------------------------------------------------------
.text:00413E7B
.text:00413E7B loc_413E7B:                             ; CODE XREF: ___get_errno+52↑j
.text:00413E7B                                         ; ___get_errno+180↓j
.text:00413E7B                 mov     edx, 9
.text:00413E80                 jmp     short loc_413E60
.text:00413E82 ; ---------------------------------------------------------------------------
.text:00413E82
.text:00413E82 loc_413E82:                             ; CODE XREF: ___get_errno+10↑j
.text:00413E82                                         ; ___get_errno+4D↑j ...
.text:00413E82                 mov     edx, 0Dh
.text:00413E87                 jmp     short loc_413E60
.text:00413E89 ; ---------------------------------------------------------------------------
.text:00413E89
.text:00413E89 loc_413E89:                             ; CODE XREF: ___get_errno+24↑j
.text:00413E89                                         ; ___get_errno+73↓j ...
.text:00413E89                 mov     edx, 0Ch
.text:00413E8E                 jmp     short loc_413E60
.text:00413E90 ; ---------------------------------------------------------------------------
.text:00413E90
.text:00413E90 loc_413E90:                             ; CODE XREF: ___get_errno+1F↑j
.text:00413E90                 cmp     eax, 0Dh
.text:00413E93                 jg      short loc_413E89
.text:00413E95                 cmp     eax, 0Ch
.text:00413E98                 jge     short loc_413E63
.text:00413E9A                 cmp     eax, 0Ah
.text:00413E9D                 mov     edx, 7
.text:00413EA2                 jz      short loc_413E60
.text:00413EA4                 cmp     eax, 0Bh
.text:00413EA7                 jnz     short loc_413E63
.text:00413EA9
.text:00413EA9 loc_413EA9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00413EA9                 mov     edx, 8
.text:00413EAE                 jmp     short loc_413E60
.text:00413EB0 ; ---------------------------------------------------------------------------
.text:00413EB0
.text:00413EB0 loc_413EB0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00413EB0                 cmp     eax, 22h ; '"'
.text:00413EB3                 jg      short loc_413EE4
.text:00413EB5                 cmp     eax, 16h
.text:00413EB8                 jge     short loc_413E82
.text:00413EBA                 cmp     eax, 12h
.text:00413EBD                 jz      short loc_413E50
.text:00413EBF                 cmp     eax, 12h
.text:00413EC2                 jg      short loc_413ED5
.text:00413EC4                 cmp     eax, 10h
.text:00413EC7                 jz      short loc_413E82
.text:00413EC9                 mov     edx, 12h
.text:00413ECE                 cmp     eax, 11h
.text:00413ED1
.text:00413ED1 loc_413ED1:                             ; CODE XREF: ___get_errno+172↓j
.text:00413ED1                                         ; ___get_errno+24C↓j ...
.text:00413ED1                 jnz     short loc_413E63
.text:00413ED3                 jmp     short loc_413E60
.text:00413ED5 ; ---------------------------------------------------------------------------
.text:00413ED5
.text:00413ED5 loc_413ED5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00413ED5                 cmp     eax, 14h
.text:00413ED8                 jle     short loc_413E82
.text:00413EDA
.text:00413EDA loc_413EDA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00413EDA                 mov     edx, 10h
.text:00413EDF                 jmp     loc_413E60
.text:00413EE4 ; ---------------------------------------------------------------------------
.text:00413EE4
.text:00413EE4 loc_413EE4:                             ; CODE XREF: ___get_errno+93↑j
.text:00413EE4                 cmp     eax, 41h ; 'A'
.text:00413EE7                 jz      short loc_413E82
.text:00413EE9                 cmp     eax, 41h ; 'A'
.text:00413EEC                 jg      short loc_413F01
.text:00413EEE                 cmp     eax, 24h ; '$'
.text:00413EF1                 jz      short loc_413E82
.text:00413EF3                 cmp     eax, 35h ; '5'
.text:00413EF6                 jnz     loc_413E63
.text:00413EFC                 jmp     loc_413E50
.text:00413F01 ; ---------------------------------------------------------------------------
.text:00413F01
.text:00413F01 loc_413F01:                             ; CODE XREF: ___get_errno+CC↑j
.text:00413F01                 cmp     eax, 43h ; 'C'
.text:00413F04                 jz      loc_413E50
.text:00413F0A                 cmp     eax, 50h ; 'P'
.text:00413F0D                 jnz     loc_413E63
.text:00413F13
.text:00413F13 loc_413F13:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00413F13                 mov     edx, 11h
.text:00413F18                 jmp     loc_413E60
.text:00413F18 ; ---------------------------------------------------------------------------
.text:00413F1D                 align 10h
.text:00413F20
.text:00413F20 loc_413F20:                             ; CODE XREF: ___get_errno+7↑j
.text:00413F20                 cmp     eax, 0A1h ; '¡'
.text:00413F25                 jz      loc_413E50
.text:00413F2B                 cmp     eax, 0A1h ; '¡'
.text:00413F30                 jg      loc_413FE0
.text:00413F36                 cmp     eax, 81h
.text:00413F3B                 jg      short loc_413FA5
.text:00413F3D                 cmp     eax, 80h ; '€'
.text:00413F42                 mov     edx, 0Ah
.text:00413F47                 jge     loc_413E60
.text:00413F4D                 cmp     eax, 6Ch ; 'l'
.text:00413F50                 jz      loc_413E82
.text:00413F56                 cmp     eax, 6Ch ; 'l'
.text:00413F59                 jg      short loc_413F77
.text:00413F5B                 cmp     eax, 57h ; 'W'
.text:00413F5E                 jz      loc_413E63
.text:00413F64                 cmp     eax, 59h ; 'Y'
.text:00413F67                 jnz     loc_413E63
.text:00413F6D
.text:00413F6D loc_413F6D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00413F6D                                         ; ___get_errno+23C↓j
.text:00413F6D                 mov     edx, 0Bh
.text:00413F72                 jmp     loc_413E60
.text:00413F77 ; ---------------------------------------------------------------------------
.text:00413F77
.text:00413F77 loc_413F77:                             ; CODE XREF: ___get_errno+139↑j
.text:00413F77                 cmp     eax, 70h ; 'p'
.text:00413F7A                 mov     edx, 1Ch
.text:00413F7F                 jz      loc_413E60
.text:00413F85                 cmp     eax, 70h ; 'p'
.text:00413F88                 jg      short loc_413F97
.text:00413F8A                 mov     edx, 20h ; ' '
.text:00413F8F                 cmp     eax, 6Dh ; 'm'
.text:00413F92                 jmp     loc_413ED1
.text:00413F97 ; ---------------------------------------------------------------------------
.text:00413F97
.text:00413F97 loc_413F97:                             ; CODE XREF: ___get_errno+168↑j
.text:00413F97                 cmp     eax, 72h ; 'r'
.text:00413F9A
.text:00413F9A loc_413F9A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00413F9A                 jnz     loc_413E63
.text:00413FA0                 jmp     loc_413E7B
.text:00413FA5 ; ---------------------------------------------------------------------------
.text:00413FA5
.text:00413FA5 loc_413FA5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00413FA5                 cmp     eax, 84h ; '„'
.text:00413FAA                 jz      loc_413E82
.text:00413FB0                 cmp     eax, 84h ; '„'
.text:00413FB5                 jg      short loc_413FBE
.text:00413FB7                 cmp     eax, 82h ; '‚'
.text:00413FBC                 jmp     short loc_413F9A
.text:00413FBE ; ---------------------------------------------------------------------------
.text:00413FBE
.text:00413FBE loc_413FBE:                             ; CODE XREF: ___get_errno+195↑j
.text:00413FBE                 cmp     eax, 91h ; '‘'
.text:00413FC3                 mov     edx, 29h ; ')'
.text:00413FC8                 jz      loc_413E60
.text:00413FCE                 cmp     eax, 9Eh ; 'ž'
.text:00413FD3
.text:00413FD3 loc_413FD3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00413FD3                 jnz     loc_413E63
.text:00413FD9                 jmp     loc_413E82
.text:00413FD9 ; ---------------------------------------------------------------------------
.text:00413FDE                 align 10h
.text:00413FE0
.text:00413FE0 loc_413FE0:                             ; CODE XREF: ___get_errno+110↑j
.text:00413FE0                 cmp     eax, 0CEh ; 'Î'
.text:00413FE5                 jz      loc_413E50
.text:00413FEB                 cmp     eax, 0CEh ; 'Î'
.text:00413FF0                 jg      short loc_414040
.text:00413FF2                 cmp     eax, 0AAh ; 'ª'
.text:00413FF7                 jz      loc_413EDA
.text:00413FFD                 cmp     eax, 0AAh ; 'ª'
.text:00414002                 jg      short loc_414016
.text:00414004                 cmp     eax, 0A4h ; '¤'
.text:00414009                 jz      loc_413F6D
.text:0041400F                 cmp     eax, 0A7h ; '§'
.text:00414014                 jmp     short loc_413FD3
.text:00414016 ; ---------------------------------------------------------------------------
.text:00414016
.text:00414016 loc_414016:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00414016                 cmp     eax, 0B7h ; '·'
.text:0041401B                 jz      loc_413F13
.text:00414021                 cmp     eax, 0B7h ; '·'
.text:00414026                 jl      loc_413E63
.text:0041402C                 sub     eax, 0BCh ; '¼'
.text:00414031                 cmp     eax, 0Eh
.text:00414034                 ja      loc_413E63
.text:0041403A                 jmp     loc_413EA9
.text:0041403A ; ---------------------------------------------------------------------------
.text:0041403F                 align 10h
.text:00414040
.text:00414040 loc_414040:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00414040                 cmp     eax, 46Bh
.text:00414045                 mov     edx, 24h ; '$'
.text:0041404A                 jz      loc_413E60
.text:00414050                 cmp     eax, 46Bh
.text:00414055                 jg      short loc_414071
.text:00414057                 cmp     eax, 0D7h ; '×'
.text:0041405C                 jz      loc_413F6D
.text:00414062                 mov     edx, 5
.text:00414067                 cmp     eax, 45Dh
.text:0041406C                 jmp     loc_413ED1
.text:00414071 ; ---------------------------------------------------------------------------
.text:00414071
.text:00414071 loc_414071:                             ; CODE XREF: ___get_errno+235↑j
.text:00414071                 cmp     eax, 4D5h
.text:00414076                 mov     edx, 4
.text:0041407B                 jz      loc_413E60
.text:00414081                 cmp     eax, 4D5h
.text:00414086                 jg      short loc_414097
.text:00414088                 mov     edx, 13h
.text:0041408D                 cmp     eax, 4B0h
.text:00414092                 jmp     loc_413ED1
.text:00414097 ; ---------------------------------------------------------------------------
.text:00414097
.text:00414097 loc_414097:                             ; CODE XREF: ___get_errno+266↑j
.text:00414097                 cmp     eax, 718h
.text:0041409C                 jnz     loc_413E63
.text:004140A2                 jmp     loc_413E89
.text:004140A2 ___get_errno    endp
.text:004140A2
.text:004140A2 ; ---------------------------------------------------------------------------
.text:004140A7                 align 10h
.text:004140B0
.text:004140B0 ; =============== S U B R O U T I N E =======================================
.text:004140B0
.text:004140B0
.text:004140B0 sub_4140B0      proc near               ; CODE XREF: sub_417340:loc_41249D↑p
.text:004140B0                                         ; sub_412A40:loc_412AA8↑p ...
.text:004140B0
.text:004140B0 var_C           = dword ptr -0Ch
.text:004140B0
.text:004140B0                 sub     esp, 0Ch
.text:004140B3                 call    GetLastError
.text:004140B8                 mov     [esp+0Ch+var_C], eax
.text:004140BB                 call    ___get_errno
.text:004140C0                 add     esp, 0Ch
.text:004140C3                 retn
.text:004140C3 sub_4140B0      endp
.text:004140C3
.text:004140C3 ; ---------------------------------------------------------------------------
.text:004140C4                 align 10h
.text:004140D0
.text:004140D0 ; =============== S U B R O U T I N E =======================================
.text:004140D0
.text:004140D0
.text:004140D0 sub_4140D0      proc near               ; CODE XREF: .text:004129B3↑p
.text:004140D0                                         ; .text:00412A03↑p
.text:004140D0
.text:004140D0 arg_4           = dword ptr  8
.text:004140D0
.text:004140D0                 sub     esp, 0Ch
.text:004140D3                 mov     edx, [esp+0Ch+arg_4]
.text:004140D7                 test    edx, edx
.text:004140D9                 jz      short loc_4140E0
.text:004140DB                 add     esp, 0Ch
.text:004140DE                 jmp     short sub_414120
.text:004140E0 ; ---------------------------------------------------------------------------
.text:004140E0
.text:004140E0 loc_4140E0:                             ; CODE XREF: sub_4140D0+9↑j
.text:004140E0                 call    _errno
.text:004140E5                 mov     dword ptr [eax], 16h
.text:004140EB                 xor     eax, eax
.text:004140ED                 add     esp, 0Ch
.text:004140F0                 retn
.text:004140F0 sub_4140D0      endp
.text:004140F0
.text:004140F1 ; ---------------------------------------------------------------------------
.text:004140F1                 jmp     short sub_414100
.text:004140F1 ; ---------------------------------------------------------------------------
.text:004140F3                 align 10h
.text:00414100
.text:00414100 ; =============== S U B R O U T I N E =======================================
.text:00414100
.text:00414100
.text:00414100 ; int __cdecl sub_414100(LPCSTR)
.text:00414100 sub_414100      proc near               ; CODE XREF: sub_417340-4F4C↑p
.text:00414100                                         ; .text:00412BA8↑p ...
.text:00414100
.text:00414100 lpFileName      = dword ptr -0Ch
.text:00414100 Destination     = dword ptr -8
.text:00414100 arg_0           = dword ptr  4
.text:00414100
.text:00414100                 sub     esp, 0Ch
.text:00414103                 mov     edx, [esp+0Ch+arg_0]
.text:00414107                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0041410F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00414112                 call    sub_414120
.text:00414117                 add     esp, 0Ch
.text:0041411A                 retn
.text:0041411A sub_414100      endp
.text:0041411A
.text:0041411A ; ---------------------------------------------------------------------------
.text:0041411B                 align 10h
.text:00414120
.text:00414120 ; =============== S U B R O U T I N E =======================================
.text:00414120
.text:00414120
.text:00414120 ; int __cdecl sub_414120(LPCSTR lpFileName, char *Destination)
.text:00414120 sub_414120      proc near               ; CODE XREF: sub_4140D0+E↑j
.text:00414120                                         ; sub_414100+12↑p
.text:00414120
.text:00414120 Size            = dword ptr -2Ch
.text:00414120 nBufferLength   = dword ptr -28h
.text:00414120 lpBuffer        = dword ptr -24h
.text:00414120 lpFilePart      = dword ptr -20h
.text:00414120 FilePart        = dword ptr -14h
.text:00414120 lpFileName      = dword ptr  4
.text:00414120 Destination     = dword ptr  8
.text:00414120
.text:00414120                 push    ebp
.text:00414121                 push    edi
.text:00414122                 push    esi
.text:00414123                 push    ebx
.text:00414124                 sub     esp, 1Ch
.text:00414127                 mov     edi, [esp+2Ch+lpFileName]
.text:0041412B                 mov     ebp, [esp+2Ch+Destination]
.text:0041412F                 test    edi, edi
.text:00414131                 jz      loc_414239
.text:00414137                 cmp     byte ptr [edi], 0
.text:0041413A                 jz      loc_41422C
.text:00414140                 mov     [esp+2Ch+Size], 104h ; Size
.text:00414147                 call    malloc
.text:0041414C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00414150                 lea     edx, [esp+2Ch+FilePart]
.text:00414154                 mov     ebx, eax
.text:00414156                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041415A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00414162                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00414165                 call    GetFullPathNameA
.text:0041416A                 sub     esp, 10h
.text:0041416D                 mov     esi, eax
.text:0041416F                 test    eax, eax
.text:00414171                 jz      loc_41421A
.text:00414177                 cmp     eax, 104h
.text:0041417C                 jle     short loc_41418D
.text:0041417E                 test    ebp, ebp
.text:00414180                 jz      short loc_4141E9
.text:00414182                 call    _errno
.text:00414187                 mov     dword ptr [eax], 26h ; '&'
.text:0041418D
.text:0041418D loc_41418D:                             ; CODE XREF: sub_414120+5C↑j
.text:0041418D                                         ; sub_414120+F5↓j
.text:0041418D                 call    _errno
.text:00414192                 mov     edi, [eax]
.text:00414194                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041419C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041419F                 call    sub_414250
.text:004141A4                 test    eax, eax
.text:004141A6                 jnz     short loc_4141C0
.text:004141A8                 movzx   eax, byte ptr [esi+ebx-1]
.text:004141AD                 cmp     al, 2Fh ; '/'
.text:004141AF                 jz      short loc_4141C0
.text:004141B1                 cmp     al, 5Ch ; '\'
.text:004141B3                 jz      short loc_4141C0
.text:004141B5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:004141B9                 mov     byte ptr [esi+ebx+1], 0
.text:004141BE                 mov     esi, esi
.text:004141C0
.text:004141C0 loc_4141C0:                             ; CODE XREF: sub_414120+86↑j
.text:004141C0                                         ; sub_414120+8F↑j ...
.text:004141C0                 call    _errno
.text:004141C5                 mov     [eax], edi
.text:004141C7                 mov     [esp+2Ch+Size], ebx
.text:004141CA                 call    sub_4128A0
.text:004141CF                 test    ebp, ebp
.text:004141D1                 mov     eax, ebx
.text:004141D3                 jz      short loc_4141E1
.text:004141D5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:004141D9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:004141DC                 call    strcpy
.text:004141E1
.text:004141E1 loc_4141E1:                             ; CODE XREF: sub_414120+B3↑j
.text:004141E1                                         ; sub_414120+10A↓j
.text:004141E1                 add     esp, 1Ch
.text:004141E4                 pop     ebx
.text:004141E5                 pop     esi
.text:004141E6                 pop     edi
.text:004141E7                 pop     ebp
.text:004141E8                 retn
.text:004141E9 ; ---------------------------------------------------------------------------
.text:004141E9
.text:004141E9 loc_4141E9:                             ; CODE XREF: sub_414120+60↑j
.text:004141E9                 mov     [esp+2Ch+Size], ebx ; Block
.text:004141EC                 lea     ecx, [eax+2]
.text:004141EF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:004141F3                 call    realloc
.text:004141F8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004141FC                 lea     edx, [esp+2Ch+FilePart]
.text:00414200                 mov     ebx, eax
.text:00414202                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00414206                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0041420A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041420D                 call    GetFullPathNameA
.text:00414212                 sub     esp, 10h
.text:00414215                 jmp     loc_41418D
.text:0041421A ; ---------------------------------------------------------------------------
.text:0041421A
.text:0041421A loc_41421A:                             ; CODE XREF: sub_414120+51↑j
.text:0041421A                 call    sub_4140B0
.text:0041421F                 mov     esi, eax
.text:00414221                 call    _errno
.text:00414226                 mov     [eax], esi
.text:00414228
.text:00414228 loc_414228:                             ; CODE XREF: sub_414120+117↓j
.text:00414228                                         ; sub_414120+124↓j
.text:00414228                 xor     eax, eax
.text:0041422A                 jmp     short loc_4141E1
.text:0041422C ; ---------------------------------------------------------------------------
.text:0041422C
.text:0041422C loc_41422C:                             ; CODE XREF: sub_414120+1A↑j
.text:0041422C                 call    _errno
.text:00414231                 mov     dword ptr [eax], 2
.text:00414237                 jmp     short loc_414228
.text:00414239 ; ---------------------------------------------------------------------------
.text:00414239
.text:00414239 loc_414239:                             ; CODE XREF: sub_414120+11↑j
.text:00414239                 call    _errno
.text:0041423E                 mov     dword ptr [eax], 16h
.text:00414244                 jmp     short loc_414228
.text:00414244 sub_414120      endp
.text:00414244
.text:00414244 ; ---------------------------------------------------------------------------
.text:00414246                 align 10h
.text:00414250
.text:00414250 ; =============== S U B R O U T I N E =======================================
.text:00414250
.text:00414250
.text:00414250 ; int __cdecl sub_414250(LPCSTR lpFileName, int)
.text:00414250 sub_414250      proc near               ; CODE XREF: sub_417340-4F5D↑p
.text:00414250                                         ; .text:00412882↑p ...
.text:00414250
.text:00414250 uMode           = dword ptr -1Ch
.text:00414250 var_10          = dword ptr -10h
.text:00414250 var_C           = dword ptr -0Ch
.text:00414250 var_8           = dword ptr -8
.text:00414250 var_4           = dword ptr -4
.text:00414250 lpFileName      = dword ptr  4
.text:00414250 arg_4           = dword ptr  8
.text:00414250
.text:00414250                 sub     esp, 1Ch
.text:00414253                 mov     [esp+1Ch+var_10], ebx
.text:00414257                 mov     ebx, [esp+1Ch+lpFileName]
.text:0041425B                 mov     [esp+1Ch+var_4], ebp
.text:0041425F                 xor     ebp, ebp
.text:00414261                 test    ebx, ebx
.text:00414263                 mov     [esp+1Ch+var_C], esi
.text:00414267                 mov     esi, [esp+1Ch+arg_4]
.text:0041426B                 mov     [esp+1Ch+var_8], edi
.text:0041426F                 jz      short loc_414279
.text:00414271                 test    esi, 0FFFFFFE8h
.text:00414277                 jz      short loc_4142A0
.text:00414279
.text:00414279 loc_414279:                             ; CODE XREF: sub_414250+1F↑j
.text:00414279                 call    _errno
.text:0041427E                 mov     dword ptr [eax], 16h
.text:00414284
.text:00414284 loc_414284:                             ; CODE XREF: sub_414250+B1↓j
.text:00414284                 mov     eax, 0FFFFFFFFh
.text:00414289
.text:00414289 loc_414289:                             ; CODE XREF: sub_414250+86↓j
.text:00414289                                         ; sub_414250+A4↓j
.text:00414289                 mov     ebx, [esp+1Ch+var_10]
.text:0041428D                 mov     esi, [esp+1Ch+var_C]
.text:00414291                 mov     edi, [esp+1Ch+var_8]
.text:00414295                 mov     ebp, [esp+1Ch+var_4]
.text:00414299                 add     esp, 1Ch
.text:0041429C                 retn
.text:0041429C ; ---------------------------------------------------------------------------
.text:0041429D                 align 10h
.text:004142A0
.text:004142A0 loc_4142A0:                             ; CODE XREF: sub_414250+27↑j
.text:004142A0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:004142A7                 call    SetErrorMode
.text:004142AC                 sub     esp, 4
.text:004142AF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:004142B2                 call    GetFileAttributesA
.text:004142B7                 sub     esp, 4
.text:004142BA                 mov     edi, eax
.text:004142BC                 cmp     eax, 0FFFFFFFFh
.text:004142BF                 jz      short loc_414303
.text:004142C1
.text:004142C1 loc_4142C1:                             ; CODE XREF: sub_414250+C6↓j
.text:004142C1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:004142C8                 call    SetErrorMode
.text:004142CD                 sub     esp, 4
.text:004142D0                 mov     eax, 0FFFFFFFFh
.text:004142D5                 inc     ebp
.text:004142D6                 jz      short loc_414289
.text:004142D8                 test    esi, 10h
.text:004142DE                 jz      short loc_4142E8
.text:004142E0                 test    edi, 10h
.text:004142E6                 jz      short loc_4142F6
.text:004142E8
.text:004142E8 loc_4142E8:                             ; CODE XREF: sub_414250+8E↑j
.text:004142E8                 and     esi, 2
.text:004142EB                 jz      short loc_4142F2
.text:004142ED                 and     edi, 1
.text:004142F0                 jnz     short loc_4142F6
.text:004142F2
.text:004142F2 loc_4142F2:                             ; CODE XREF: sub_414250+9B↑j
.text:004142F2                 xor     eax, eax
.text:004142F4                 jmp     short loc_414289
.text:004142F6 ; ---------------------------------------------------------------------------
.text:004142F6
.text:004142F6 loc_4142F6:                             ; CODE XREF: sub_414250+96↑j
.text:004142F6                                         ; sub_414250+A0↑j
.text:004142F6                 call    _errno
.text:004142FB                 mov     dword ptr [eax], 0Dh
.text:00414301                 jmp     short loc_414284
.text:00414303 ; ---------------------------------------------------------------------------
.text:00414303
.text:00414303 loc_414303:                             ; CODE XREF: sub_414250+6F↑j
.text:00414303                 call    sub_4140B0
.text:00414308                 mov     ebp, eax
.text:0041430A                 call    _errno
.text:0041430F                 mov     [eax], ebp
.text:00414311                 mov     ebp, 0FFFFFFFFh
.text:00414316                 jmp     short loc_4142C1
.text:00414316 sub_414250      endp
.text:00414316
.text:00414316 ; ---------------------------------------------------------------------------
.text:00414318                 align 10h
.text:00414320 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041453F↓o
.text:0041432C aLu             db '%lu',0              ; DATA XREF: .text:0041454F↓o
.text:00414330 asc_414330      db ' ',0                ; DATA XREF: .text:loc_414638↓o
.text:00414332                 align 10h
.text:00414340 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00414340                                         ; DATA XREF: .text:0041466F↓o
.text:00414360 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41467D↓o
.text:0041436C aServer         db ' Server',0          ; DATA XREF: .text:004146A6↓o
.text:0041436C                                         ; .text:loc_41481E↓o
.text:00414374 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4146B8↓o
.text:00414385 aDatacenterServ db ' Datacenter Server',0
.text:00414385                                         ; DATA XREF: .text:loc_4146C2↓o
.text:00414398 aStandardEditio db ' Standard Edition',0
.text:00414398                                         ; DATA XREF: .text:004146EA↓o
.text:004143AA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_4146F4↓o
.text:004143B7 aEnterpriseEdit db ' Enterprise Edition',0
.text:004143B7                                         ; DATA XREF: .text:loc_4146FE↓o
.text:004143CB aDatacenterEdit db ' Datacenter Edition',0
.text:004143CB                                         ; DATA XREF: .text:loc_414708↓o
.text:004143DF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041471B↓o
.text:004143ED aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_414725↓o
.text:004143ED                                         ; .text:loc_414830↓o
.text:004143FB                 align 10h
.text:00414400 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00414400                                         ; DATA XREF: .text:00414752↓o
.text:00414430 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00414799↓o
.text:0041443C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004147D4↓o
.text:00414442 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004147EB↓o
.text:0041444B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00414802↓o
.text:00414454                 align 10h
.text:00414460 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00414460                                         ; DATA XREF: .text:00414977↓o
.text:00414483                 align 20h
.text:004144A0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:004144A0                                         ; DATA XREF: .text:004149D6↓o
.text:004144C6 ; ---------------------------------------------------------------------------
.text:004144C6
.text:004144C6 loc_4144C6:                             ; DATA XREF: .text:loc_414A41↓o
.text:004144C6                 and     [ebx+45h], dl
.text:004144C9                 add     [eax], ah
.text:004144CB                 push    ebx
.text:004144CC                 push    eax
.text:004144CD                 xor     [eax], eax
.text:004144CF
.text:004144CF loc_4144CF:                             ; DATA XREF: .text:loc_414ABB↓o
.text:004144CF                 and     [edi+53h], cl
.text:004144D2                 push    edx
.text:004144D3                 xor     al, [eax]
.text:004144D5                 lea     esi, [esi+0]
.text:004144D9                 lea     edi, [edi+0]
.text:004144E0                 push    edi
.text:004144E1                 push    esi
.text:004144E2                 push    ebx
.text:004144E3                 sub     esp, 130h
.text:004144E9                 mov     ebx, [esp+140h]
.text:004144F0                 call    sub_414BF0
.text:004144F5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004144FA                 cmp     eax, 1
.text:004144FD                 jz      loc_4149A0
.text:00414503                 cmp     eax, 1
.text:00414506                 jb      loc_414976
.text:0041450C                 cmp     eax, 2
.text:0041450F                 jz      loc_4145C0
.text:00414515                 cmp     eax, 3
.text:00414518                 jz      short loc_41457F
.text:0041451A                 lea     esi, [esi+0]
.text:00414520
.text:00414520 loc_414520:                             ; CODE XREF: .text:004145B5↓j
.text:00414520                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414526                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041452C
.text:0041452C loc_41452C:                             ; CODE XREF: .text:004149BF↓j
.text:0041452C                 mov     [esp+10h], edx
.text:00414530                 mov     ebx, [esp+144h]
.text:00414537                 mov     [esp+0Ch], ecx
.text:0041453B                 mov     [esp+8], eax
.text:0041453F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00414547                 mov     [esp], ebx
.text:0041454A                 call    sprintf
.text:0041454F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00414557                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041455D                 mov     ecx, [esp+148h]
.text:00414564                 mov     [esp+8], edi
.text:00414568                 mov     [esp], ecx
.text:0041456B                 call    sprintf
.text:00414570                 mov     eax, 1
.text:00414575
.text:00414575 loc_414575:                             ; CODE XREF: .text:0041476F↓j
.text:00414575                                         ; .text:004147BC↓j
.text:00414575                 add     esp, 130h
.text:0041457B                 pop     ebx
.text:0041457C                 pop     esi
.text:0041457D                 pop     edi
.text:0041457E                 retn
.text:0041457F ; ---------------------------------------------------------------------------
.text:0041457F
.text:0041457F loc_41457F:                             ; CODE XREF: .text:00414518↑j
.text:0041457F                 mov     dword ptr [ebx], 7263694Dh
.text:00414585                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041458C                 mov     dword ptr [ebx+8], 69572074h
.text:00414593                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041459A                 mov     dword ptr [ebx+10h], 45432073h
.text:004145A1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004145A7                 mov     esi, esi
.text:004145A9                 lea     edi, [edi+0]
.text:004145B0
.text:004145B0 loc_4145B0:                             ; CODE XREF: .text:00414658↓j
.text:004145B0                                         ; .text:00414999↓j ...
.text:004145B0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004145B5                 jmp     loc_414520
.text:004145B5 ; ---------------------------------------------------------------------------
.text:004145BA                 align 10h
.text:004145C0
.text:004145C0 loc_4145C0:                             ; CODE XREF: .text:0041450F↑j
.text:004145C0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004145C6                 cmp     edx, 3
.text:004145C9                 mov     eax, edx
.text:004145CB                 jz      loc_414935
.text:004145D1
.text:004145D1 loc_4145D1:                             ; CODE XREF: .text:0041493C↓j
.text:004145D1                 cmp     eax, 4
.text:004145D4                 jz      loc_4148F5
.text:004145DA
.text:004145DA loc_4145DA:                             ; CODE XREF: .text:004148FD↓j
.text:004145DA                 cmp     eax, 4
.text:004145DD                 ja      loc_414842
.text:004145E3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004145E9                 test    ecx, ecx
.text:004145EB                 jnz     loc_414842
.text:004145F1                 mov     dword ptr [ebx], 7263694Dh
.text:004145F7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004145FE                 mov     dword ptr [ebx+8], 69572074h
.text:00414605                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041460C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414613
.text:00414613 loc_414613:                             ; CODE XREF: .text:004148B5↓j
.text:00414613                 mov     byte ptr [ebx+14h], 0
.text:00414617
.text:00414617 loc_414617:                             ; CODE XREF: .text:00414845↓j
.text:00414617                                         ; .text:0041485C↓j ...
.text:00414617                 mov     esi, dword_41A0B0
.text:0041461D                 test    esi, esi
.text:0041461F                 jz      loc_414732
.text:00414625                 movzx   eax, ds:byte_41BB2A
.text:0041462C                 cmp     al, 1
.text:0041462E                 jz      loc_414712
.text:00414634                 cmp     al, 3
.text:00414636                 jz      short loc_41465D
.text:00414638
.text:00414638 loc_414638:                             ; CODE XREF: .text:0041467B↓j
.text:00414638                                         ; .text:004146B6↓j ...
.text:00414638                 mov     dword ptr [esp+4], offset asc_414330 ; " "
.text:00414640                 mov     [esp], ebx
.text:00414643                 call    strcat
.text:00414648                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00414650                 mov     [esp], ebx
.text:00414653                 call    strcat
.text:00414658                 jmp     loc_4145B0
.text:0041465D ; ---------------------------------------------------------------------------
.text:0041465D
.text:0041465D loc_41465D:                             ; CODE XREF: .text:00414636↑j
.text:0041465D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00414664                 jz      short loc_414686
.text:00414666
.text:00414666 loc_414666:                             ; CODE XREF: .text:00414692↓j
.text:00414666                 test    byte ptr ds:word_41BB28, 2
.text:0041466D                 jz      short loc_41467D
.text:0041466F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00414676
.text:00414676 loc_414676:                             ; CODE XREF: .text:00414684↓j
.text:00414676                 call    printf
.text:0041467B                 jmp     short loc_414638
.text:0041467D ; ---------------------------------------------------------------------------
.text:0041467D
.text:0041467D loc_41467D:                             ; CODE XREF: .text:0041466D↑j
.text:0041467D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00414684                 jmp     short loc_414676
.text:00414686 ; ---------------------------------------------------------------------------
.text:00414686
.text:00414686 loc_414686:                             ; CODE XREF: .text:00414664↑j
.text:00414686                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041468B                 cmp     eax, 2
.text:0041468E                 jz      short loc_4146D0
.text:00414690                 test    eax, eax
.text:00414692                 jnz     short loc_414666
.text:00414694                 cmp     byte ptr ds:word_41BB28, 0
.text:0041469B                 js      short loc_4146C2
.text:0041469D                 test    byte ptr ds:word_41BB28, 2
.text:004146A4                 jnz     short loc_4146B8
.text:004146A6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004146AE
.text:004146AE loc_4146AE:                             ; CODE XREF: .text:004146C0↓j
.text:004146AE                                         ; .text:004146CA↓j ...
.text:004146AE                 mov     [esp], ebx
.text:004146B1                 call    strcat
.text:004146B6                 jmp     short loc_414638
.text:004146B8 ; ---------------------------------------------------------------------------
.text:004146B8
.text:004146B8 loc_4146B8:                             ; CODE XREF: .text:004146A4↑j
.text:004146B8                                         ; .text:00414819↓j
.text:004146B8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004146C0                 jmp     short loc_4146AE
.text:004146C2 ; ---------------------------------------------------------------------------
.text:004146C2
.text:004146C2 loc_4146C2:                             ; CODE XREF: .text:0041469B↑j
.text:004146C2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004146CA                 jmp     short loc_4146AE
.text:004146CA ; ---------------------------------------------------------------------------
.text:004146CC                 align 10h
.text:004146D0
.text:004146D0 loc_4146D0:                             ; CODE XREF: .text:0041468E↑j
.text:004146D0                 cmp     byte ptr ds:word_41BB28, 0
.text:004146D7                 js      short loc_414708
.text:004146D9                 movzx   eax, ds:word_41BB28
.text:004146E0                 test    al, 2
.text:004146E2                 jnz     short loc_4146FE
.text:004146E4                 cmp     ax, 400h
.text:004146E8                 jz      short loc_4146F4
.text:004146EA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:004146F2                 jmp     short loc_4146AE
.text:004146F4 ; ---------------------------------------------------------------------------
.text:004146F4
.text:004146F4 loc_4146F4:                             ; CODE XREF: .text:004146E8↑j
.text:004146F4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:004146FC                 jmp     short loc_4146AE
.text:004146FE ; ---------------------------------------------------------------------------
.text:004146FE
.text:004146FE loc_4146FE:                             ; CODE XREF: .text:004146E2↑j
.text:004146FE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00414706                 jmp     short loc_4146AE
.text:00414708 ; ---------------------------------------------------------------------------
.text:00414708
.text:00414708 loc_414708:                             ; CODE XREF: .text:004146D7↑j
.text:00414708                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00414710                 jmp     short loc_4146AE
.text:00414712 ; ---------------------------------------------------------------------------
.text:00414712
.text:00414712 loc_414712:                             ; CODE XREF: .text:0041462E↑j
.text:00414712                 test    byte ptr ds:word_41BB28+1, 2
.text:00414719                 jz      short loc_414725
.text:0041471B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00414723                 jmp     short loc_4146AE
.text:00414725 ; ---------------------------------------------------------------------------
.text:00414725
.text:00414725 loc_414725:                             ; CODE XREF: .text:00414719↑j
.text:00414725                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041472D                 jmp     loc_4146AE
.text:00414732 ; ---------------------------------------------------------------------------
.text:00414732
.text:00414732 loc_414732:                             ; CODE XREF: .text:0041461F↑j
.text:00414732                 mov     dword ptr [esp+28h], 0FFh
.text:0041473A                 lea     edx, [esp+2Ch]
.text:0041473E                 mov     [esp+10h], edx
.text:00414742                 mov     dword ptr [esp+0Ch], 1
.text:0041474A                 mov     dword ptr [esp+8], 0
.text:00414752                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041475A                 mov     dword ptr [esp], 80000002h
.text:00414761                 call    RegOpenKeyExA
.text:00414766                 mov     edi, eax
.text:00414768                 sub     esp, 14h
.text:0041476B                 xor     eax, eax
.text:0041476D                 test    edi, edi
.text:0041476F                 jnz     loc_414575
.text:00414775                 mov     dword ptr [esp+0Ch], 0
.text:0041477D                 mov     edi, [esp+2Ch]
.text:00414781                 lea     esi, [esp+28h]
.text:00414785                 mov     [esp+14h], esi
.text:00414789                 lea     esi, [esp+30h]
.text:0041478D                 mov     [esp+10h], esi
.text:00414791                 mov     dword ptr [esp+8], 0
.text:00414799                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004147A1                 mov     [esp], edi
.text:004147A4                 call    RegQueryValueExA
.text:004147A9                 sub     esp, 18h
.text:004147AC                 test    eax, eax
.text:004147AE                 jnz     short loc_4147BA
.text:004147B0                 cmp     dword ptr [esp+28h], 0FFh
.text:004147B8                 jbe     short loc_4147C1
.text:004147BA
.text:004147BA loc_4147BA:                             ; CODE XREF: .text:004147AE↑j
.text:004147BA                 xor     eax, eax
.text:004147BC                 jmp     loc_414575
.text:004147C1 ; ---------------------------------------------------------------------------
.text:004147C1
.text:004147C1 loc_4147C1:                             ; CODE XREF: .text:004147B8↑j
.text:004147C1                 mov     edx, [esp+2Ch]
.text:004147C5                 mov     [esp], edx
.text:004147C8                 call    RegCloseKey
.text:004147CD                 sub     esp, 4
.text:004147D0                 mov     [esp+4], esi
.text:004147D4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004147DB                 call    lstrcmpiA
.text:004147E0                 sub     esp, 8
.text:004147E3                 test    eax, eax
.text:004147E5                 jz      short loc_414830
.text:004147E7
.text:004147E7 loc_4147E7:                             ; CODE XREF: .text:00414840↓j
.text:004147E7                 mov     [esp+4], esi
.text:004147EB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:004147F2                 call    lstrcmpiA
.text:004147F7                 sub     esp, 8
.text:004147FA                 test    eax, eax
.text:004147FC                 jz      short loc_41481E
.text:004147FE
.text:004147FE loc_4147FE:                             ; CODE XREF: .text:0041482E↓j
.text:004147FE                 mov     [esp+4], esi
.text:00414802                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00414809                 call    lstrcmpiA
.text:0041480E                 sub     esp, 8
.text:00414811                 test    eax, eax
.text:00414813                 jnz     loc_414638
.text:00414819                 jmp     loc_4146B8
.text:0041481E ; ---------------------------------------------------------------------------
.text:0041481E
.text:0041481E loc_41481E:                             ; CODE XREF: .text:004147FC↑j
.text:0041481E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00414826                 mov     [esp], ebx
.text:00414829                 call    strcat
.text:0041482E                 jmp     short loc_4147FE
.text:00414830 ; ---------------------------------------------------------------------------
.text:00414830
.text:00414830 loc_414830:                             ; CODE XREF: .text:004147E5↑j
.text:00414830                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00414838                 mov     [esp], ebx
.text:0041483B                 call    strcat
.text:00414840                 jmp     short loc_4147E7
.text:00414842 ; ---------------------------------------------------------------------------
.text:00414842
.text:00414842 loc_414842:                             ; CODE XREF: .text:004145DD↑j
.text:00414842                                         ; .text:004145EB↑j
.text:00414842                 cmp     eax, 5
.text:00414845                 jnz     loc_414617
.text:0041484B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414850                 cmp     eax, 2
.text:00414853                 jz      short loc_4148BA
.text:00414855                 cmp     eax, 1
.text:00414858                 jz      short loc_414893
.text:0041485A                 test    eax, eax
.text:0041485C                 jnz     loc_414617
.text:00414862                 mov     dword ptr [ebx], 7263694Dh
.text:00414868                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041486F                 mov     dword ptr [ebx+8], 69572074h
.text:00414876                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041487D                 mov     dword ptr [ebx+10h], 30322073h
.text:00414884                 mov     word ptr [ebx+14h], 3030h
.text:0041488A                 mov     byte ptr [ebx+16h], 0
.text:0041488E                 jmp     loc_414617
.text:00414893 ; ---------------------------------------------------------------------------
.text:00414893
.text:00414893 loc_414893:                             ; CODE XREF: .text:00414858↑j
.text:00414893                 mov     dword ptr [ebx], 7263694Dh
.text:00414899                 mov     dword ptr [ebx+4], 666F736Fh
.text:004148A0                 mov     dword ptr [ebx+8], 69572074h
.text:004148A7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004148AE                 mov     dword ptr [ebx+10h], 50582073h
.text:004148B5                 jmp     loc_414613
.text:004148BA ; ---------------------------------------------------------------------------
.text:004148BA
.text:004148BA loc_4148BA:                             ; CODE XREF: .text:00414853↑j
.text:004148BA                 mov     dword ptr [ebx], 7263694Dh
.text:004148C0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004148C7                 mov     dword ptr [ebx+8], 69572074h
.text:004148CE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004148D5                 mov     dword ptr [ebx+10h], 65532073h
.text:004148DC                 mov     dword ptr [ebx+14h], 72657672h
.text:004148E3                 mov     dword ptr [ebx+18h], 30303220h
.text:004148EA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:004148F0                 jmp     loc_414617
.text:004148F5 ; ---------------------------------------------------------------------------
.text:004148F5
.text:004148F5 loc_4148F5:                             ; CODE XREF: .text:004145D4↑j
.text:004148F5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004148FB                 test    edx, edx
.text:004148FD                 jnz     loc_4145DA
.text:00414903                 mov     dword ptr [ebx], 7263694Dh
.text:00414909                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414910                 mov     dword ptr [ebx+8], 69572074h
.text:00414917                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041491E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414925                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041492C                 mov     byte ptr [ebx+18h], 0
.text:00414930                 jmp     loc_414617
.text:00414935 ; ---------------------------------------------------------------------------
.text:00414935
.text:00414935 loc_414935:                             ; CODE XREF: .text:004145CB↑j
.text:00414935                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041493C                 jnz     loc_4145D1
.text:00414942                 mov     dword ptr [ebx], 7263694Dh
.text:00414948                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041494F                 mov     dword ptr [ebx+8], 69572074h
.text:00414956                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041495D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414964                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041496B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00414971                 jmp     loc_414617
.text:00414976 ; ---------------------------------------------------------------------------
.text:00414976
.text:00414976 loc_414976:                             ; CODE XREF: .text:00414506↑j
.text:00414976                 cld
.text:00414977                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0041497C                 mov     ecx, 8
.text:00414981                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00414988                 mov     edi, ebx
.text:0041498A                 rep movsd
.text:0041498C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00414993                 mov     [edi+2], dl
.text:00414996                 mov     [edi], si
.text:00414999                 jmp     loc_4145B0
.text:00414999 ; ---------------------------------------------------------------------------
.text:0041499E                 align 10h
.text:004149A0
.text:004149A0 loc_4149A0:                             ; CODE XREF: .text:004144FD↑j
.text:004149A0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004149A6                 cmp     ecx, 4
.text:004149A9                 jz      loc_414A60
.text:004149AF
.text:004149AF loc_4149AF:                             ; CODE XREF: .text:00414AB6↓j
.text:004149AF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004149B5
.text:004149B5 loc_4149B5:                             ; CODE XREF: .text:00414A68↓j
.text:004149B5                 cmp     ecx, 4
.text:004149B8                 jz      short loc_4149C4
.text:004149BA
.text:004149BA loc_4149BA:                             ; CODE XREF: .text:004149CC↓j
.text:004149BA                                         ; .text:004149D1↓j
.text:004149BA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004149BF                 jmp     loc_41452C
.text:004149C4 ; ---------------------------------------------------------------------------
.text:004149C4
.text:004149C4 loc_4149C4:                             ; CODE XREF: .text:004149B8↑j
.text:004149C4                 cmp     edx, 0Ah
.text:004149C7                 jz      short loc_4149F1
.text:004149C9
.text:004149C9 loc_4149C9:                             ; CODE XREF: .text:00414A3F↓j
.text:004149C9                 cmp     ecx, 4
.text:004149CC                 jnz     short loc_4149BA
.text:004149CE                 cmp     edx, 5Ah ; 'Z'
.text:004149D1                 jnz     short loc_4149BA
.text:004149D3                 cld
.text:004149D4                 mov     edi, ebx
.text:004149D6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:004149DB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:004149E2                 mov     ecx, 9
.text:004149E7                 rep movsd
.text:004149E9                 mov     [edi], bx
.text:004149EC                 jmp     loc_4145B0
.text:004149F1 ; ---------------------------------------------------------------------------
.text:004149F1
.text:004149F1 loc_4149F1:                             ; CODE XREF: .text:004149C7↑j
.text:004149F1                 mov     dword ptr [ebx], 7263694Dh
.text:004149F7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004149FE                 mov     dword ptr [ebx+8], 69572074h
.text:00414A05                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414A0C                 mov     dword ptr [ebx+10h], 38392073h
.text:00414A13                 mov     byte ptr [ebx+14h], 0
.text:00414A17                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00414A1D                 lea     edi, [edx-7CFh]
.text:00414A23                 cmp     edi, 0B7h ; '·'
.text:00414A29                 jbe     short loc_414A53
.text:00414A2B                 cmp     edx, 886h
.text:00414A31                 ja      short loc_414A41
.text:00414A33
.text:00414A33 loc_414A33:                             ; CODE XREF: .text:00414A51↓j
.text:00414A33                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414A39                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414A3F                 jmp     short loc_4149C9
.text:00414A41 ; ---------------------------------------------------------------------------
.text:00414A41
.text:00414A41 loc_414A41:                             ; CODE XREF: .text:00414A31↑j
.text:00414A41                 mov     dword ptr [esp+4], offset loc_4144C6
.text:00414A49
.text:00414A49 loc_414A49:                             ; CODE XREF: .text:00414A5B↓j
.text:00414A49                 mov     [esp], ebx
.text:00414A4C                 call    strcat
.text:00414A51                 jmp     short loc_414A33
.text:00414A53 ; ---------------------------------------------------------------------------
.text:00414A53
.text:00414A53 loc_414A53:                             ; CODE XREF: .text:00414A29↑j
.text:00414A53                 mov     dword ptr [esp+4], 4144CAh
.text:00414A5B                 jmp     short loc_414A49
.text:00414A5B ; ---------------------------------------------------------------------------
.text:00414A5D                 align 10h
.text:00414A60
.text:00414A60 loc_414A60:                             ; CODE XREF: .text:004149A9↑j
.text:00414A60                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414A66                 test    edx, edx
.text:00414A68                 jnz     loc_4149B5
.text:00414A6E                 mov     dword ptr [ebx], 7263694Dh
.text:00414A74                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414A7B                 mov     dword ptr [ebx+8], 69572074h
.text:00414A82                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414A89                 mov     dword ptr [ebx+10h], 35392073h
.text:00414A90                 mov     byte ptr [ebx+14h], 0
.text:00414A94                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00414A9A                 lea     ecx, [edx-3B7h]
.text:00414AA0                 cmp     ecx, 81h
.text:00414AA6                 jbe     short loc_414ACD
.text:00414AA8                 cmp     edx, 438h
.text:00414AAE                 ja      short loc_414ABB
.text:00414AB0
.text:00414AB0 loc_414AB0:                             ; CODE XREF: .text:00414ACB↓j
.text:00414AB0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414AB6                 jmp     loc_4149AF
.text:00414ABB ; ---------------------------------------------------------------------------
.text:00414ABB
.text:00414ABB loc_414ABB:                             ; CODE XREF: .text:00414AAE↑j
.text:00414ABB                 mov     dword ptr [esp+4], offset loc_4144CF
.text:00414AC3
.text:00414AC3 loc_414AC3:                             ; CODE XREF: .text:00414AD5↓j
.text:00414AC3                 mov     [esp], ebx
.text:00414AC6                 call    strcat
.text:00414ACB                 jmp     short loc_414AB0
.text:00414ACD ; ---------------------------------------------------------------------------
.text:00414ACD
.text:00414ACD loc_414ACD:                             ; CODE XREF: .text:00414AA6↑j
.text:00414ACD                 mov     dword ptr [esp+4], 4144CAh
.text:00414AD5                 jmp     short loc_414AC3
.text:00414AD5 ; ---------------------------------------------------------------------------
.text:00414AD7                 align 10h
.text:00414AE0
.text:00414AE0 ; =============== S U B R O U T I N E =======================================
.text:00414AE0
.text:00414AE0
.text:00414AE0 sub_414AE0      proc near               ; CODE XREF: .text:004132EE↑p
.text:00414AE0                                         ; sub_413770+12A↑p
.text:00414AE0                 sub     esp, 0Ch
.text:00414AE3                 call    sub_414BF0
.text:00414AE8                 mov     eax, ds:dword_41BA80
.text:00414AED                 add     esp, 0Ch
.text:00414AF0                 retn
.text:00414AF0 sub_414AE0      endp
.text:00414AF0
.text:00414AF1 ; ---------------------------------------------------------------------------
.text:00414AF1                 jmp     short loc_414B00
.text:00414AF1 ; ---------------------------------------------------------------------------
.text:00414AF3                 align 10h
.text:00414B00
.text:00414B00 loc_414B00:                             ; CODE XREF: .text:00414AF1↑j
.text:00414B00                 sub     esp, 0Ch
.text:00414B03                 call    sub_414BF0
.text:00414B08                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00414B0D                 add     esp, 0Ch
.text:00414B10                 retn
.text:00414B11 ; ---------------------------------------------------------------------------
.text:00414B11                 jmp     short loc_414B20
.text:00414B11 ; ---------------------------------------------------------------------------
.text:00414B13                 align 10h
.text:00414B20
.text:00414B20 loc_414B20:                             ; CODE XREF: .text:00414B11↑j
.text:00414B20                 sub     esp, 0Ch
.text:00414B23                 call    sub_414BF0
.text:00414B28                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00414B2D                 add     esp, 0Ch
.text:00414B30                 retn
.text:00414B31 ; ---------------------------------------------------------------------------
.text:00414B31                 jmp     short loc_414B40
.text:00414B31 ; ---------------------------------------------------------------------------
.text:00414B33                 align 10h
.text:00414B40
.text:00414B40 loc_414B40:                             ; CODE XREF: .text:00414B31↑j
.text:00414B40                 sub     esp, 0Ch
.text:00414B43                 call    sub_414BF0
.text:00414B48                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414B4D                 add     esp, 0Ch
.text:00414B50                 retn
.text:00414B51 ; ---------------------------------------------------------------------------
.text:00414B51                 jmp     short loc_414B60
.text:00414B51 ; ---------------------------------------------------------------------------
.text:00414B53                 align 10h
.text:00414B60
.text:00414B60 loc_414B60:                             ; CODE XREF: .text:00414B51↑j
.text:00414B60                 sub     esp, 0Ch
.text:00414B63                 call    GetVersion
.text:00414B68                 shr     eax, 10h
.text:00414B6B                 add     esp, 0Ch
.text:00414B6E                 retn
.text:00414B6E ; ---------------------------------------------------------------------------
.text:00414B6F                 align 10h
.text:00414B70                 sub     esp, 0Ch
.text:00414B73                 call    sub_414BF0
.text:00414B78                 xor     eax, eax
.text:00414B7A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00414B81                 setz    al
.text:00414B84                 add     esp, 0Ch
.text:00414B87                 retn
.text:00414B87 ; ---------------------------------------------------------------------------
.text:00414B88                 align 10h
.text:00414B90
.text:00414B90 ; =============== S U B R O U T I N E =======================================
.text:00414B90
.text:00414B90
.text:00414B90 sub_414B90      proc near               ; CODE XREF: .text:loc_412C80↑p
.text:00414B90                                         ; .text:loc_4132D4↑p ...
.text:00414B90                 sub     esp, 0Ch
.text:00414B93                 call    sub_414BF0
.text:00414B98                 xor     eax, eax
.text:00414B9A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00414BA1                 setz    al
.text:00414BA4                 add     esp, 0Ch
.text:00414BA7                 retn
.text:00414BA7 sub_414B90      endp
.text:00414BA7
.text:00414BA7 ; ---------------------------------------------------------------------------
.text:00414BA8                 align 10h
.text:00414BB0                 sub     esp, 0Ch
.text:00414BB3                 call    sub_414BF0
.text:00414BB8                 xor     eax, eax
.text:00414BBA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00414BC1                 setz    al
.text:00414BC4                 add     esp, 0Ch
.text:00414BC7                 retn
.text:00414BC7 ; ---------------------------------------------------------------------------
.text:00414BC8                 align 10h
.text:00414BD0                 sub     esp, 0Ch
.text:00414BD3                 call    sub_414BF0
.text:00414BD8                 xor     eax, eax
.text:00414BDA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00414BE1                 setz    al
.text:00414BE4                 add     esp, 0Ch
.text:00414BE7                 retn
.text:00414BE7 ; ---------------------------------------------------------------------------
.text:00414BE8                 align 10h
.text:00414BF0
.text:00414BF0 ; =============== S U B R O U T I N E =======================================
.text:00414BF0
.text:00414BF0
.text:00414BF0 sub_414BF0      proc near               ; CODE XREF: .text:004144F0↑p
.text:00414BF0                                         ; sub_414AE0+3↑p ...
.text:00414BF0
.text:00414BF0 lpVersionInformation= dword ptr -0BCh
.text:00414BF0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00414BF0
.text:00414BF0                 sub     esp, 0BCh
.text:00414BF6                 mov     edx, ds:dword_41BB30
.text:00414BFC                 test    edx, edx
.text:00414BFE                 jz      short loc_414C10
.text:00414C00
.text:00414C00 loc_414C00:                             ; CODE XREF: sub_414BF0+7B↓j
.text:00414C00                 mov     edx, 1
.text:00414C05
.text:00414C05 loc_414C05:                             ; CODE XREF: sub_414BF0+217↓j
.text:00414C05                 mov     eax, edx
.text:00414C07                 add     esp, 0BCh
.text:00414C0D                 retn
.text:00414C0D ; ---------------------------------------------------------------------------
.text:00414C0E                 align 10h
.text:00414C10
.text:00414C10 loc_414C10:                             ; CODE XREF: sub_414BF0+E↑j
.text:00414C10                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00414C17                 mov     edx, 9Ch ; 'œ'
.text:00414C1C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00414C22                 call    GetVersionExA
.text:00414C27                 sub     esp, 4
.text:00414C2A                 test    eax, eax
.text:00414C2C                 jz      loc_414DE4
.text:00414C32
.text:00414C32 loc_414C32:                             ; CODE XREF: sub_414BF0+245↓j
.text:00414C32                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00414C39                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00414C3E                 cmp     eax, 1
.text:00414C41                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00414C47                 jz      loc_414D30
.text:00414C4D                 cmp     eax, 1
.text:00414C50                 jb      loc_414D20
.text:00414C56                 cmp     eax, 2
.text:00414C59                 jz      short loc_414C7A
.text:00414C5B                 cmp     eax, 3
.text:00414C5E                 jz      short loc_414C6D
.text:00414C60
.text:00414C60 loc_414C60:                             ; CODE XREF: sub_414BF0+88↓j
.text:00414C60                                         ; sub_414BF0+C0↓j ...
.text:00414C60                 mov     edx, 1
.text:00414C65                 mov     ds:dword_41BB30, edx
.text:00414C6B                 jmp     short loc_414C00
.text:00414C6D ; ---------------------------------------------------------------------------
.text:00414C6D
.text:00414C6D loc_414C6D:                             ; CODE XREF: sub_414BF0+6E↑j
.text:00414C6D                 mov     ecx, 17h
.text:00414C72
.text:00414C72 loc_414C72:                             ; CODE XREF: sub_414BF0+1A7↓j
.text:00414C72                 mov     ds:dword_41BA80, ecx
.text:00414C78                 jmp     short loc_414C60
.text:00414C7A ; ---------------------------------------------------------------------------
.text:00414C7A
.text:00414C7A loc_414C7A:                             ; CODE XREF: sub_414BF0+69↑j
.text:00414C7A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00414C7F                 cmp     eax, 3
.text:00414C82                 jz      short loc_414CFB
.text:00414C84                 cmp     eax, 4
.text:00414C87                 jz      short loc_414CEA
.text:00414C89
.text:00414C89 loc_414C89:                             ; CODE XREF: sub_414BF0+102↓j
.text:00414C89                 cmp     eax, 4
.text:00414C8C                 ja      short loc_414CB2
.text:00414C8E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00414C94                 test    ecx, ecx
.text:00414C96                 jnz     short loc_414CB2
.text:00414C98                 mov     edx, 1Eh
.text:00414C9D
.text:00414C9D loc_414C9D:                             ; CODE XREF: sub_414BF0+DF↓j
.text:00414C9D                 mov     ds:dword_41BA80, edx
.text:00414CA3
.text:00414CA3 loc_414CA3:                             ; CODE XREF: sub_414BF0+C5↓j
.text:00414CA3                                         ; sub_414BF0+D8↓j ...
.text:00414CA3                 movzx   ecx, ds:word_41BB24
.text:00414CAA                 add     ds:dword_41BA80, ecx
.text:00414CB0                 jmp     short loc_414C60
.text:00414CB2 ; ---------------------------------------------------------------------------
.text:00414CB2
.text:00414CB2 loc_414CB2:                             ; CODE XREF: sub_414BF0+9C↑j
.text:00414CB2                                         ; sub_414BF0+A6↑j
.text:00414CB2                 cmp     eax, 5
.text:00414CB5                 jnz     short loc_414CA3
.text:00414CB7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414CBC                 cmp     eax, 2
.text:00414CBF                 jz      short loc_414CDE
.text:00414CC1                 cmp     eax, 1
.text:00414CC4                 jz      short loc_414CD1
.text:00414CC6                 test    eax, eax
.text:00414CC8                 jnz     short loc_414CA3
.text:00414CCA                 mov     edx, 32h ; '2'
.text:00414CCF                 jmp     short loc_414C9D
.text:00414CD1 ; ---------------------------------------------------------------------------
.text:00414CD1
.text:00414CD1 loc_414CD1:                             ; CODE XREF: sub_414BF0+D4↑j
.text:00414CD1                 mov     ecx, 3Ch ; '<'
.text:00414CD6
.text:00414CD6 loc_414CD6:                             ; CODE XREF: sub_414BF0+122↓j
.text:00414CD6                 mov     ds:dword_41BA80, ecx
.text:00414CDC                 jmp     short loc_414CA3
.text:00414CDE ; ---------------------------------------------------------------------------
.text:00414CDE
.text:00414CDE loc_414CDE:                             ; CODE XREF: sub_414BF0+CF↑j
.text:00414CDE                 mov     eax, 46h ; 'F'
.text:00414CE3
.text:00414CE3 loc_414CE3:                             ; CODE XREF: sub_414BF0+109↓j
.text:00414CE3                                         ; sub_414BF0+129↓j
.text:00414CE3                 mov     ds:dword_41BA80, eax
.text:00414CE8                 jmp     short loc_414CA3
.text:00414CEA ; ---------------------------------------------------------------------------
.text:00414CEA
.text:00414CEA loc_414CEA:                             ; CODE XREF: sub_414BF0+97↑j
.text:00414CEA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00414CF0                 test    ecx, ecx
.text:00414CF2                 jnz     short loc_414C89
.text:00414CF4                 mov     eax, 28h ; '('
.text:00414CF9                 jmp     short loc_414CE3
.text:00414CFB ; ---------------------------------------------------------------------------
.text:00414CFB
.text:00414CFB loc_414CFB:                             ; CODE XREF: sub_414BF0+92↑j
.text:00414CFB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414D00                 cmp     eax, 33h ; '3'
.text:00414D03                 jz      short loc_414D14
.text:00414D05                 cmp     eax, 5
.text:00414D08                 setz    cl
.text:00414D0B                 movzx   edx, cl
.text:00414D0E                 lea     ecx, [edx+edx*4+1Eh]
.text:00414D12                 jmp     short loc_414CD6
.text:00414D14 ; ---------------------------------------------------------------------------
.text:00414D14
.text:00414D14 loc_414D14:                             ; CODE XREF: sub_414BF0+113↑j
.text:00414D14                 mov     eax, 24h ; '$'
.text:00414D19                 jmp     short loc_414CE3
.text:00414D19 ; ---------------------------------------------------------------------------
.text:00414D1B                 align 10h
.text:00414D20
.text:00414D20 loc_414D20:                             ; CODE XREF: sub_414BF0+60↑j
.text:00414D20                 mov     edx, 2
.text:00414D25                 mov     ds:dword_41BA80, edx
.text:00414D2B                 jmp     loc_414C60
.text:00414D30 ; ---------------------------------------------------------------------------
.text:00414D30
.text:00414D30 loc_414D30:                             ; CODE XREF: sub_414BF0+57↑j
.text:00414D30                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414D36                 cmp     ecx, 4
.text:00414D39                 jnz     loc_414C60
.text:00414D3F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414D44                 test    eax, eax
.text:00414D46                 jnz     short loc_414D6A
.text:00414D48                 mov     eax, 0Ah
.text:00414D4D                 mov     ds:dword_41BA80, eax
.text:00414D52                 lea     eax, [edx-3B7h]
.text:00414D58                 cmp     eax, 81h
.text:00414D5D                 ja      short loc_414DD5
.text:00414D5F                 mov     edx, 0Bh
.text:00414D64
.text:00414D64 loc_414D64:                             ; CODE XREF: sub_414BF0+1F2↓j
.text:00414D64                 mov     ds:dword_41BA80, edx
.text:00414D6A
.text:00414D6A loc_414D6A:                             ; CODE XREF: sub_414BF0+156↑j
.text:00414D6A                                         ; sub_414BF0+1EB↓j
.text:00414D6A                 cmp     ecx, 4
.text:00414D6D                 jnz     loc_414C60
.text:00414D73                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00414D7A                 jz      short loc_414D9C
.text:00414D7C
.text:00414D7C loc_414D7C:                             ; CODE XREF: sub_414BF0+1D4↓j
.text:00414D7C                                         ; sub_414BF0+1DC↓j
.text:00414D7C                 cmp     ecx, 4
.text:00414D7F                 jnz     loc_414C60
.text:00414D85                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00414D8C                 jnz     loc_414C60
.text:00414D92                 mov     ecx, 12h
.text:00414D97                 jmp     loc_414C72
.text:00414D9C ; ---------------------------------------------------------------------------
.text:00414D9C
.text:00414D9C loc_414D9C:                             ; CODE XREF: sub_414BF0+18A↑j
.text:00414D9C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00414DA2                 mov     eax, 0Eh
.text:00414DA7                 mov     ds:dword_41BA80, eax
.text:00414DAC                 lea     eax, [edx-7CFh]
.text:00414DB2                 cmp     eax, 0B7h ; '·'
.text:00414DB7                 ja      short loc_414DC6
.text:00414DB9                 mov     edx, 0Fh
.text:00414DBE
.text:00414DBE loc_414DBE:                             ; CODE XREF: sub_414BF0+1E3↓j
.text:00414DBE                 mov     ds:dword_41BA80, edx
.text:00414DC4                 jmp     short loc_414D7C
.text:00414DC6 ; ---------------------------------------------------------------------------
.text:00414DC6
.text:00414DC6 loc_414DC6:                             ; CODE XREF: sub_414BF0+1C7↑j
.text:00414DC6                 cmp     edx, 886h
.text:00414DCC                 jbe     short loc_414D7C
.text:00414DCE                 mov     edx, 10h
.text:00414DD3                 jmp     short loc_414DBE
.text:00414DD5 ; ---------------------------------------------------------------------------
.text:00414DD5
.text:00414DD5 loc_414DD5:                             ; CODE XREF: sub_414BF0+16D↑j
.text:00414DD5                 cmp     edx, 438h
.text:00414DDB                 jbe     short loc_414D6A
.text:00414DDD                 mov     edx, 0Ch
.text:00414DE2                 jmp     short loc_414D64
.text:00414DE4 ; ---------------------------------------------------------------------------
.text:00414DE4
.text:00414DE4 loc_414DE4:                             ; CODE XREF: sub_414BF0+3C↑j
.text:00414DE4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00414DEC                 xor     edx, edx
.text:00414DEE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00414DF2                 mov     dword_41A0B0, edx
.text:00414DF8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00414DFB                 call    GetVersionExA
.text:00414E00                 sub     esp, 4
.text:00414E03                 xor     edx, edx
.text:00414E05                 test    eax, eax
.text:00414E07                 jz      loc_414C05
.text:00414E0D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00414E11                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00414E15                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00414E1B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00414E1F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00414E25                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00414E29                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00414E2F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00414E35                 jmp     loc_414C32
.text:00414E35 sub_414BF0      endp
.text:00414E35
.text:00414E35 ; ---------------------------------------------------------------------------
.text:00414E3A                 align 10h
.text:00414E40 aNotset         db 'notset',0           ; DATA XREF: .data:off_41A0C0↓o
.text:00414E40                                         ; .data:off_41A0C4↓o
.text:00414E47 ; ---------------------------------------------------------------------------
.text:00414E47
.text:00414E47 loc_414E47:                             ; DATA XREF: .text:loc_414EE5↓o
.text:00414E47                 jb      short loc_414EC0
.text:00414E49                 add     [eax], ah
.text:00414E4B                 or      [eax], eax
.text:00414E4D
.text:00414E4D loc_414E4D:                             ; DATA XREF: .text:00414F38↓o
.text:00414E4D                                         ; .text:00414F9E↓o ...
.text:00414E4D                 add     [eax], ah
.text:00414E4F                 and     eax, 64252064h
.text:00414E54                 and     [eax], al
.text:00414E56                 lea     esi, [esi+0]
.text:00414E59                 lea     edi, [edi+0]
.text:00414E60                 push    ebp
.text:00414E61                 push    edi
.text:00414E62                 push    esi
.text:00414E63                 push    ebx
.text:00414E64                 sub     esp, 14Ch
.text:00414E6A                 mov     edx, off_41A0C0 ; "notset"
.text:00414E70                 mov     edi, [esp+164h]
.text:00414E77                 mov     ebp, [esp+168h]
.text:00414E7E                 mov     [esp+4], edx
.text:00414E82                 mov     edx, off_41A0C4 ; "notset"
.text:00414E88                 mov     [esp], edx
.text:00414E8B                 call    strcmp
.text:00414E90                 test    eax, eax
.text:00414E92                 jz      loc_415280
.text:00414E98
.text:00414E98 loc_414E98:                             ; CODE XREF: .text:004152CC↓j
.text:00414E98                 lea     ebx, [esp+20h]
.text:00414E9C                 lea     esi, [esi+0]
.text:00414EA0
.text:00414EA0 loc_414EA0:                             ; CODE XREF: .text:00414ED6↓j
.text:00414EA0                 mov     [esp+4], ebx
.text:00414EA4                 mov     ecx, off_41A0C4 ; "notset"
.text:00414EAA                 mov     [esp], ecx
.text:00414EAD                 call    loc_413810
.text:00414EB2                 test    eax, eax
.text:00414EB4                 jns     short loc_414EE5
.text:00414EB6                 mov     eax, off_41A0C4 ; "notset"
.text:00414EBB                 cmp     byte ptr [eax], 0
.text:00414EBE                 jz      short loc_414ED8
.text:00414EC0
.text:00414EC0 loc_414EC0:                             ; CODE XREF: .text:loc_414E47↑j
.text:00414EC0                 mov     dword ptr [esp+4], 0
.text:00414EC8                 mov     [esp], eax
.text:00414ECB                 call    strchr
.text:00414ED0                 inc     eax
.text:00414ED1                 mov     off_41A0C4, eax ; "notset"
.text:00414ED6                 jmp     short loc_414EA0
.text:00414ED8 ; ---------------------------------------------------------------------------
.text:00414ED8
.text:00414ED8 loc_414ED8:                             ; CODE XREF: .text:00414EBE↑j
.text:00414ED8                 xor     eax, eax
.text:00414EDA
.text:00414EDA loc_414EDA:                             ; CODE XREF: .text:0041509C↓j
.text:00414EDA                 add     esp, 14Ch
.text:00414EE0                 pop     ebx
.text:00414EE1                 pop     esi
.text:00414EE2                 pop     edi
.text:00414EE3                 pop     ebp
.text:00414EE4                 retn
.text:00414EE5 ; ---------------------------------------------------------------------------
.text:00414EE5
.text:00414EE5 loc_414EE5:                             ; CODE XREF: .text:00414EB4↑j
.text:00414EE5                 mov     dword ptr [edi+0Ch], offset loc_414E47
.text:00414EEC                 lea     ecx, [esp+0D6h]
.text:00414EF3                 lea     edx, [esp+6Ch]
.text:00414EF7                 mov     [edi+4], ecx
.text:00414EFA                 lea     ebx, [esp+7Ch]
.text:00414EFE                 mov     [edi+8], edx
.text:00414F01                 mov     [edi], ebx
.text:00414F03                 mov     [esp], ebp
.text:00414F06                 mov     [esp+4], edi
.text:00414F0A                 call    ___addmntentstr
.text:00414F0F                 mov     [esp], ebp
.text:00414F12                 mov     dword ptr [esp+4], 414E4Ah
.text:00414F1A                 call    strspn
.text:00414F1F                 mov     dword ptr [esp+4], 0
.text:00414F27                 mov     ebx, off_41A0C4 ; "notset"
.text:00414F2D                 lea     esi, [eax+ebp]
.text:00414F30                 mov     [esp+1Ch], esi
.text:00414F34                 lea     ebp, [esp+1Ch]
.text:00414F38                 mov     esi, offset loc_414E4D
.text:00414F3D                 mov     [esp], ebx
.text:00414F40                 call    strchr
.text:00414F45                 mov     dword ptr [esp+4], 414E4Ah
.text:00414F4D                 inc     eax
.text:00414F4E                 mov     off_41A0C4, eax ; "notset"
.text:00414F53                 mov     [esp], ebp
.text:00414F56                 call    sub_4167A0
.text:00414F5B                 test    eax, eax
.text:00414F5D                 mov     ebx, eax
.text:00414F5F                 jz      short loc_414F88
.text:00414F61                 mov     edx, eax
.text:00414F63                 mov     ecx, eax
.text:00414F65                 lea     esi, [esi+0]
.text:00414F69                 lea     edi, [edi+0]
.text:00414F70
.text:00414F70 loc_414F70:                             ; CODE XREF: .text:00414F86↓j
.text:00414F70                 movzx   eax, byte ptr [edx]
.text:00414F73                 cmp     al, 5Ch ; '\'
.text:00414F75                 jz      loc_415224
.text:00414F7B
.text:00414F7B loc_414F7B:                             ; CODE XREF: .text:0041522C↓j
.text:00414F7B                                         ; .text:0041523A↓j ...
.text:00414F7B                 mov     [ecx], al
.text:00414F7D
.text:00414F7D loc_414F7D:                             ; CODE XREF: .text:0041524E↓j
.text:00414F7D                 inc     ecx
.text:00414F7E
.text:00414F7E loc_414F7E:                             ; CODE XREF: .text:00415266↓j
.text:00414F7E                 movzx   eax, byte ptr [edx]
.text:00414F81                 mov     esi, ebx
.text:00414F83                 inc     edx
.text:00414F84                 test    al, al
.text:00414F86                 jnz     short loc_414F70
.text:00414F88
.text:00414F88 loc_414F88:                             ; CODE XREF: .text:00414F5F↑j
.text:00414F88                 mov     [edi], esi
.text:00414F8A                 mov     eax, [esp+1Ch]
.text:00414F8E                 test    eax, eax
.text:00414F90                 jnz     loc_41520B
.text:00414F96
.text:00414F96 loc_414F96:                             ; CODE XREF: .text:0041521F↓j
.text:00414F96                 mov     dword ptr [esp+4], 414E4Ah
.text:00414F9E                 mov     esi, offset loc_414E4D
.text:00414FA3                 mov     [esp], ebp
.text:00414FA6                 call    sub_4167A0
.text:00414FAB                 test    eax, eax
.text:00414FAD                 mov     ebx, eax
.text:00414FAF                 jz      short loc_414FD8
.text:00414FB1                 mov     edx, eax
.text:00414FB3                 mov     ecx, eax
.text:00414FB5                 lea     esi, [esi+0]
.text:00414FB9                 lea     edi, [edi+0]
.text:00414FC0
.text:00414FC0 loc_414FC0:                             ; CODE XREF: .text:00414FD6↓j
.text:00414FC0                 movzx   eax, byte ptr [edx]
.text:00414FC3                 cmp     al, 5Ch ; '\'
.text:00414FC5                 jz      loc_4151B3
.text:00414FCB
.text:00414FCB loc_414FCB:                             ; CODE XREF: .text:004151BB↓j
.text:00414FCB                                         ; .text:004151C9↓j ...
.text:00414FCB                 mov     [ecx], al
.text:00414FCD
.text:00414FCD loc_414FCD:                             ; CODE XREF: .text:004151DD↓j
.text:00414FCD                 inc     ecx
.text:00414FCE
.text:00414FCE loc_414FCE:                             ; CODE XREF: .text:004151F5↓j
.text:00414FCE                 movzx   eax, byte ptr [edx]
.text:00414FD1                 mov     esi, ebx
.text:00414FD3                 inc     edx
.text:00414FD4                 test    al, al
.text:00414FD6                 jnz     short loc_414FC0
.text:00414FD8
.text:00414FD8 loc_414FD8:                             ; CODE XREF: .text:00414FAF↑j
.text:00414FD8                 mov     [edi+4], esi
.text:00414FDB                 mov     eax, [esp+1Ch]
.text:00414FDF                 test    eax, eax
.text:00414FE1                 jnz     loc_41519A
.text:00414FE7
.text:00414FE7 loc_414FE7:                             ; CODE XREF: .text:004151AE↓j
.text:00414FE7                 mov     dword ptr [esp+4], 414E4Ah
.text:00414FEF                 mov     esi, offset loc_414E4D
.text:00414FF4                 mov     [esp], ebp
.text:00414FF7                 call    sub_4167A0
.text:00414FFC                 test    eax, eax
.text:00414FFE                 mov     ebx, eax
.text:00415000                 jz      short loc_415028
.text:00415002                 mov     edx, eax
.text:00415004                 mov     ecx, eax
.text:00415006                 lea     esi, [esi+0]
.text:00415009                 lea     edi, [edi+0]
.text:00415010
.text:00415010 loc_415010:                             ; CODE XREF: .text:00415026↓j
.text:00415010                 movzx   eax, byte ptr [edx]
.text:00415013                 cmp     al, 5Ch ; '\'
.text:00415015                 jz      loc_415142
.text:0041501B
.text:0041501B loc_41501B:                             ; CODE XREF: .text:0041514A↓j
.text:0041501B                                         ; .text:00415158↓j ...
.text:0041501B                 mov     [ecx], al
.text:0041501D
.text:0041501D loc_41501D:                             ; CODE XREF: .text:0041516C↓j
.text:0041501D                 inc     ecx
.text:0041501E
.text:0041501E loc_41501E:                             ; CODE XREF: .text:00415184↓j
.text:0041501E                 movzx   eax, byte ptr [edx]
.text:00415021                 mov     esi, ebx
.text:00415023                 inc     edx
.text:00415024                 test    al, al
.text:00415026                 jnz     short loc_415010
.text:00415028
.text:00415028 loc_415028:                             ; CODE XREF: .text:00415000↑j
.text:00415028                 mov     [edi+8], esi
.text:0041502B                 mov     eax, [esp+1Ch]
.text:0041502F                 test    eax, eax
.text:00415031                 jnz     loc_415129
.text:00415037
.text:00415037 loc_415037:                             ; CODE XREF: .text:0041513D↓j
.text:00415037                 mov     dword ptr [esp+4], 414E4Ah
.text:0041503F                 mov     esi, offset loc_414E4D
.text:00415044                 mov     [esp], ebp
.text:00415047                 call    sub_4167A0
.text:0041504C                 test    eax, eax
.text:0041504E                 mov     ebx, eax
.text:00415050                 jz      short loc_415074
.text:00415052                 mov     edx, eax
.text:00415054                 mov     ecx, eax
.text:00415056                 lea     esi, [esi+0]
.text:00415059                 lea     edi, [edi+0]
.text:00415060
.text:00415060 loc_415060:                             ; CODE XREF: .text:00415072↓j
.text:00415060                 movzx   eax, byte ptr [edx]
.text:00415063                 cmp     al, 5Ch ; '\'
.text:00415065                 jz      short loc_4150D5
.text:00415067
.text:00415067 loc_415067:                             ; CODE XREF: .text:004150DD↓j
.text:00415067                                         ; .text:004150E7↓j ...
.text:00415067                 mov     [ecx], al
.text:00415069
.text:00415069 loc_415069:                             ; CODE XREF: .text:004150FB↓j
.text:00415069                 inc     ecx
.text:0041506A
.text:0041506A loc_41506A:                             ; CODE XREF: .text:00415113↓j
.text:0041506A                 movzx   eax, byte ptr [edx]
.text:0041506D                 mov     esi, ebx
.text:0041506F                 inc     edx
.text:00415070                 test    al, al
.text:00415072                 jnz     short loc_415060
.text:00415074
.text:00415074 loc_415074:                             ; CODE XREF: .text:00415050↑j
.text:00415074                 mov     [edi+0Ch], esi
.text:00415077                 xor     eax, eax
.text:00415079                 mov     edx, [esp+1Ch]
.text:0041507D                 test    edx, edx
.text:0041507F                 jnz     short loc_4150B5
.text:00415081
.text:00415081 loc_415081:                             ; CODE XREF: .text:004150D3↓j
.text:00415081                 cmp     eax, 1
.text:00415084                 jz      short loc_4150AC
.text:00415086                 cmp     eax, 1
.text:00415089                 jle     short loc_4150A1
.text:0041508B
.text:0041508B loc_41508B:                             ; CODE XREF: .text:004150A3↓j
.text:0041508B                                         ; .text:004150B3↓j
.text:0041508B                 mov     edx, [esp+160h]
.text:00415092                 mov     [esp], edx
.text:00415095                 call    sub_416740
.text:0041509A                 mov     eax, edi
.text:0041509C                 jmp     loc_414EDA
.text:004150A1 ; ---------------------------------------------------------------------------
.text:004150A1
.text:004150A1 loc_4150A1:                             ; CODE XREF: .text:00415089↑j
.text:004150A1                 test    eax, eax
.text:004150A3                 jnz     short loc_41508B
.text:004150A5                 mov     dword ptr [edi+10h], 0
.text:004150AC
.text:004150AC loc_4150AC:                             ; CODE XREF: .text:00415084↑j
.text:004150AC                 mov     dword ptr [edi+14h], 0
.text:004150B3                 jmp     short loc_41508B
.text:004150B5 ; ---------------------------------------------------------------------------
.text:004150B5
.text:004150B5 loc_4150B5:                             ; CODE XREF: .text:0041507F↑j
.text:004150B5                 mov     dword ptr [esp+4], 414E4Eh
.text:004150BD                 lea     esi, [edi+14h]
.text:004150C0                 lea     ebp, [edi+10h]
.text:004150C3                 mov     [esp+0Ch], esi
.text:004150C7                 mov     [esp+8], ebp
.text:004150CB                 mov     [esp], edx
.text:004150CE                 call    sscanf
.text:004150D3                 jmp     short loc_415081
.text:004150D5 ; ---------------------------------------------------------------------------
.text:004150D5
.text:004150D5 loc_4150D5:                             ; CODE XREF: .text:00415065↑j
.text:004150D5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004150D9                 jz      short loc_415118
.text:004150DB
.text:004150DB loc_4150DB:                             ; CODE XREF: .text:0041511C↓j
.text:004150DB                                         ; .text:00415122↓j
.text:004150DB                 cmp     al, 5Ch ; '\'
.text:004150DD                 jnz     short loc_415067
.text:004150DF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004150E3                 jz      short loc_415100
.text:004150E5
.text:004150E5 loc_4150E5:                             ; CODE XREF: .text:00415104↓j
.text:004150E5                                         ; .text:0041510A↓j
.text:004150E5                 cmp     al, 5Ch ; '\'
.text:004150E7                 jnz     loc_415067
.text:004150ED                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004150F1                 jnz     loc_415067
.text:004150F7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004150FA                 inc     edx
.text:004150FB                 jmp     loc_415069
.text:00415100 ; ---------------------------------------------------------------------------
.text:00415100
.text:00415100 loc_415100:                             ; CODE XREF: .text:004150E3↑j
.text:00415100                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00415104                 jnz     short loc_4150E5
.text:00415106                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041510A                 jnz     short loc_4150E5
.text:0041510C                 mov     byte ptr [ecx], 9
.text:0041510F
.text:0041510F loc_41510F:                             ; CODE XREF: .text:00415127↓j
.text:0041510F                 inc     ecx
.text:00415110                 add     edx, 3
.text:00415113                 jmp     loc_41506A
.text:00415118 ; ---------------------------------------------------------------------------
.text:00415118
.text:00415118 loc_415118:                             ; CODE XREF: .text:004150D9↑j
.text:00415118                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041511C                 jnz     short loc_4150DB
.text:0041511E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415122                 jnz     short loc_4150DB
.text:00415124                 mov     byte ptr [ecx], 20h ; ' '
.text:00415127                 jmp     short loc_41510F
.text:00415129 ; ---------------------------------------------------------------------------
.text:00415129
.text:00415129 loc_415129:                             ; CODE XREF: .text:00415031↑j
.text:00415129                 mov     dword ptr [esp+4], 414E4Ah
.text:00415131                 mov     [esp], eax
.text:00415134                 call    strspn
.text:00415139                 add     [esp+1Ch], eax
.text:0041513D                 jmp     loc_415037
.text:00415142 ; ---------------------------------------------------------------------------
.text:00415142
.text:00415142 loc_415142:                             ; CODE XREF: .text:00415015↑j
.text:00415142                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415146                 jz      short loc_415189
.text:00415148
.text:00415148 loc_415148:                             ; CODE XREF: .text:0041518D↓j
.text:00415148                                         ; .text:00415193↓j
.text:00415148                 cmp     al, 5Ch ; '\'
.text:0041514A                 jnz     loc_41501B
.text:00415150                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415154                 jz      short loc_415171
.text:00415156
.text:00415156 loc_415156:                             ; CODE XREF: .text:00415175↓j
.text:00415156                                         ; .text:0041517B↓j
.text:00415156                 cmp     al, 5Ch ; '\'
.text:00415158                 jnz     loc_41501B
.text:0041515E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00415162                 jnz     loc_41501B
.text:00415168                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041516B                 inc     edx
.text:0041516C                 jmp     loc_41501D
.text:00415171 ; ---------------------------------------------------------------------------
.text:00415171
.text:00415171 loc_415171:                             ; CODE XREF: .text:00415154↑j
.text:00415171                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00415175                 jnz     short loc_415156
.text:00415177                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041517B                 jnz     short loc_415156
.text:0041517D                 mov     byte ptr [ecx], 9
.text:00415180
.text:00415180 loc_415180:                             ; CODE XREF: .text:00415198↓j
.text:00415180                 inc     ecx
.text:00415181                 add     edx, 3
.text:00415184                 jmp     loc_41501E
.text:00415189 ; ---------------------------------------------------------------------------
.text:00415189
.text:00415189 loc_415189:                             ; CODE XREF: .text:00415146↑j
.text:00415189                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041518D                 jnz     short loc_415148
.text:0041518F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415193                 jnz     short loc_415148
.text:00415195                 mov     byte ptr [ecx], 20h ; ' '
.text:00415198                 jmp     short loc_415180
.text:0041519A ; ---------------------------------------------------------------------------
.text:0041519A
.text:0041519A loc_41519A:                             ; CODE XREF: .text:00414FE1↑j
.text:0041519A                 mov     dword ptr [esp+4], 414E4Ah
.text:004151A2                 mov     [esp], eax
.text:004151A5                 call    strspn
.text:004151AA                 add     [esp+1Ch], eax
.text:004151AE                 jmp     loc_414FE7
.text:004151B3 ; ---------------------------------------------------------------------------
.text:004151B3
.text:004151B3 loc_4151B3:                             ; CODE XREF: .text:00414FC5↑j
.text:004151B3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004151B7                 jz      short loc_4151FA
.text:004151B9
.text:004151B9 loc_4151B9:                             ; CODE XREF: .text:004151FE↓j
.text:004151B9                                         ; .text:00415204↓j
.text:004151B9                 cmp     al, 5Ch ; '\'
.text:004151BB                 jnz     loc_414FCB
.text:004151C1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004151C5                 jz      short loc_4151E2
.text:004151C7
.text:004151C7 loc_4151C7:                             ; CODE XREF: .text:004151E6↓j
.text:004151C7                                         ; .text:004151EC↓j
.text:004151C7                 cmp     al, 5Ch ; '\'
.text:004151C9                 jnz     loc_414FCB
.text:004151CF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004151D3                 jnz     loc_414FCB
.text:004151D9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004151DC                 inc     edx
.text:004151DD                 jmp     loc_414FCD
.text:004151E2 ; ---------------------------------------------------------------------------
.text:004151E2
.text:004151E2 loc_4151E2:                             ; CODE XREF: .text:004151C5↑j
.text:004151E2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:004151E6                 jnz     short loc_4151C7
.text:004151E8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:004151EC                 jnz     short loc_4151C7
.text:004151EE                 mov     byte ptr [ecx], 9
.text:004151F1
.text:004151F1 loc_4151F1:                             ; CODE XREF: .text:00415209↓j
.text:004151F1                 inc     ecx
.text:004151F2                 add     edx, 3
.text:004151F5                 jmp     loc_414FCE
.text:004151FA ; ---------------------------------------------------------------------------
.text:004151FA
.text:004151FA loc_4151FA:                             ; CODE XREF: .text:004151B7↑j
.text:004151FA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:004151FE                 jnz     short loc_4151B9
.text:00415200                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415204                 jnz     short loc_4151B9
.text:00415206                 mov     byte ptr [ecx], 20h ; ' '
.text:00415209                 jmp     short loc_4151F1
.text:0041520B ; ---------------------------------------------------------------------------
.text:0041520B
.text:0041520B loc_41520B:                             ; CODE XREF: .text:00414F90↑j
.text:0041520B                 mov     dword ptr [esp+4], 414E4Ah
.text:00415213                 mov     [esp], eax
.text:00415216                 call    strspn
.text:0041521B                 add     [esp+1Ch], eax
.text:0041521F                 jmp     loc_414F96
.text:00415224 ; ---------------------------------------------------------------------------
.text:00415224
.text:00415224 loc_415224:                             ; CODE XREF: .text:00414F75↑j
.text:00415224                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415228                 jz      short loc_41526B
.text:0041522A
.text:0041522A loc_41522A:                             ; CODE XREF: .text:0041526F↓j
.text:0041522A                                         ; .text:00415275↓j
.text:0041522A                 cmp     al, 5Ch ; '\'
.text:0041522C                 jnz     loc_414F7B
.text:00415232                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415236                 jz      short loc_415253
.text:00415238
.text:00415238 loc_415238:                             ; CODE XREF: .text:00415257↓j
.text:00415238                                         ; .text:0041525D↓j
.text:00415238                 cmp     al, 5Ch ; '\'
.text:0041523A                 jnz     loc_414F7B
.text:00415240                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00415244                 jnz     loc_414F7B
.text:0041524A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041524D                 inc     edx
.text:0041524E                 jmp     loc_414F7D
.text:00415253 ; ---------------------------------------------------------------------------
.text:00415253
.text:00415253 loc_415253:                             ; CODE XREF: .text:00415236↑j
.text:00415253                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00415257                 jnz     short loc_415238
.text:00415259                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041525D                 jnz     short loc_415238
.text:0041525F                 mov     byte ptr [ecx], 9
.text:00415262
.text:00415262 loc_415262:                             ; CODE XREF: .text:0041527A↓j
.text:00415262                 inc     ecx
.text:00415263                 add     edx, 3
.text:00415266                 jmp     loc_414F7E
.text:0041526B ; ---------------------------------------------------------------------------
.text:0041526B
.text:0041526B loc_41526B:                             ; CODE XREF: .text:00415228↑j
.text:0041526B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041526F                 jnz     short loc_41522A
.text:00415271                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415275                 jnz     short loc_41522A
.text:00415277                 mov     byte ptr [ecx], 20h ; ' '
.text:0041527A                 jmp     short loc_415262
.text:0041527A ; ---------------------------------------------------------------------------
.text:0041527C                 align 10h
.text:00415280
.text:00415280 loc_415280:                             ; CODE XREF: .text:00414E92↑j
.text:00415280                 mov     dword ptr [esp+4], 0
.text:00415288                 mov     dword ptr [esp], 0
.text:0041528F                 call    GetLogicalDriveStringsA
.text:00415294                 sub     esp, 8
.text:00415297                 mov     ebx, eax
.text:00415299                 call    GetProcessHeap
.text:0041529E                 mov     [esp], eax
.text:004152A1                 mov     [esp+8], ebx
.text:004152A5                 mov     dword ptr [esp+4], 0
.text:004152AD                 call    HeapAlloc
.text:004152B2                 sub     esp, 0Ch
.text:004152B5                 mov     esi, eax
.text:004152B7                 mov     [esp+4], eax
.text:004152BB                 mov     [esp], ebx
.text:004152BE                 call    GetLogicalDriveStringsA
.text:004152C3                 mov     off_41A0C4, esi ; "notset"
.text:004152C9                 sub     esp, 8
.text:004152CC                 jmp     loc_414E98
.text:004152CC ; ---------------------------------------------------------------------------
.text:004152D1 ; const char aSSSSDD[]
.text:004152D1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:004152D1                                         ; DATA XREF: .text:00415410↓o
.text:004152D1                                         ; ___addmntentstr+F0↓o
.text:004152E4                 align 10h
.text:004152F0                 push    esi
.text:004152F1                 push    ebx
.text:004152F2                 sub     esp, 44h
.text:004152F5                 mov     ebx, [esp+54h]
.text:004152F9                 mov     esi, [esp+50h]
.text:004152FD                 mov     edx, [ebx]
.text:004152FF                 mov     [esp+20h], edx
.text:00415303                 mov     ecx, [ebx+4]
.text:00415306                 mov     [esp+24h], ecx
.text:0041530A                 mov     edx, [ebx+8]
.text:0041530D                 mov     [esp+28h], edx
.text:00415311                 mov     ecx, [ebx+0Ch]
.text:00415314                 mov     [esp+2Ch], ecx
.text:00415318                 mov     edx, [ebx+10h]
.text:0041531B                 mov     [esp+30h], edx
.text:0041531F                 mov     ecx, [ebx+14h]
.text:00415322                 mov     dword ptr [esp+8], 2
.text:0041532A                 mov     dword ptr [esp+4], 0
.text:00415332                 mov     [esp+34h], ecx
.text:00415336                 mov     [esp], esi
.text:00415339                 call    sub_416730
.text:0041533E ; ---------------------------------------------------------------------------
.text:0041533E                 test    eax, eax
.text:00415340                 mov     edx, 1
.text:00415345                 jnz     loc_415445
.text:0041534B                 mov     ebx, [esp+20h]
.text:0041534F                 mov     edx, ebx
.text:00415351                 movzx   eax, byte ptr [ebx]
.text:00415354                 test    al, al
.text:00415356                 jz      short loc_415380
.text:00415358                 nop
.text:00415359                 lea     esi, [esi+0]
.text:00415360
.text:00415360 loc_415360:                             ; CODE XREF: .text:0041537E↓j
.text:00415360                 cmp     al, 20h ; ' '
.text:00415362                 jz      loc_4155BA
.text:00415368                 cmp     al, 9
.text:0041536A                 jz      loc_4155BA
.text:00415370                 cmp     al, 5Ch ; '\'
.text:00415372                 jz      loc_4155BA
.text:00415378                 inc     ebx
.text:00415379                 movzx   eax, byte ptr [ebx]
.text:0041537C                 test    al, al
.text:0041537E                 jnz     short loc_415360
.text:00415380
.text:00415380 loc_415380:                             ; CODE XREF: .text:00415356↑j
.text:00415380                                         ; .text:004155BC↓j ...
.text:00415380                 mov     ebx, [esp+24h]
.text:00415384                 mov     edx, ebx
.text:00415386                 movzx   eax, byte ptr [ebx]
.text:00415389                 test    al, al
.text:0041538B                 jz      short loc_4153B0
.text:0041538D                 lea     esi, [esi+0]
.text:00415390
.text:00415390 loc_415390:                             ; CODE XREF: .text:004153AE↓j
.text:00415390                 cmp     al, 20h ; ' '
.text:00415392                 jz      loc_41553A
.text:00415398                 cmp     al, 9
.text:0041539A                 jz      loc_41553A
.text:004153A0                 cmp     al, 5Ch ; '\'
.text:004153A2                 jz      loc_41553A
.text:004153A8                 inc     ebx
.text:004153A9                 movzx   eax, byte ptr [ebx]
.text:004153AC                 test    al, al
.text:004153AE                 jnz     short loc_415390
.text:004153B0
.text:004153B0 loc_4153B0:                             ; CODE XREF: .text:0041538B↑j
.text:004153B0                                         ; .text:0041553C↓j ...
.text:004153B0                 mov     ebx, [esp+28h]
.text:004153B4                 mov     edx, ebx
.text:004153B6                 movzx   eax, byte ptr [ebx]
.text:004153B9                 test    al, al
.text:004153BB                 jz      short loc_4153E0
.text:004153BD                 lea     esi, [esi+0]
.text:004153C0
.text:004153C0 loc_4153C0:                             ; CODE XREF: .text:004153DE↓j
.text:004153C0                 cmp     al, 20h ; ' '
.text:004153C2                 jz      loc_4154BE
.text:004153C8                 cmp     al, 9
.text:004153CA                 jz      loc_4154BE
.text:004153D0                 cmp     al, 5Ch ; '\'
.text:004153D2                 jz      loc_4154BE
.text:004153D8                 inc     ebx
.text:004153D9                 movzx   eax, byte ptr [ebx]
.text:004153DC                 test    al, al
.text:004153DE                 jnz     short loc_4153C0
.text:004153E0
.text:004153E0 loc_4153E0:                             ; CODE XREF: .text:004153BB↑j
.text:004153E0                                         ; .text:004154C0↓j ...
.text:004153E0                 mov     edx, [esp+2Ch]
.text:004153E4                 mov     ebx, edx
.text:004153E6                 movzx   eax, byte ptr [edx]
.text:004153E9                 test    al, al
.text:004153EB                 jz      short loc_415404
.text:004153ED                 lea     esi, [esi+0]
.text:004153F0
.text:004153F0 loc_4153F0:                             ; CODE XREF: .text:00415402↓j
.text:004153F0                 cmp     al, 20h ; ' '
.text:004153F2                 jz      short loc_41544D
.text:004153F4                 cmp     al, 9
.text:004153F6                 jz      short loc_41544D
.text:004153F8                 cmp     al, 5Ch ; '\'
.text:004153FA                 jz      short loc_41544D
.text:004153FC                 inc     ebx
.text:004153FD                 movzx   eax, byte ptr [ebx]
.text:00415400                 test    al, al
.text:00415402                 jnz     short loc_4153F0
.text:00415404
.text:00415404 loc_415404:                             ; CODE XREF: .text:004153EB↑j
.text:00415404                                         ; .text:0041544F↓j ...
.text:00415404                 mov     [esp+14h], edx
.text:00415408                 mov     ecx, [esp+34h]
.text:0041540C                 mov     ebx, [esp+30h]
.text:00415410                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00415418                 mov     edx, [esp+24h]
.text:0041541C                 mov     [esp+1Ch], ecx
.text:00415420                 mov     ecx, [esp+28h]
.text:00415424                 mov     [esp+18h], ebx
.text:00415428                 mov     ebx, [esp+20h]
.text:0041542C                 mov     [esp+0Ch], edx
.text:00415430                 mov     [esp+10h], ecx
.text:00415434                 mov     [esp+8], ebx
.text:00415438                 mov     [esp], esi
.text:0041543B                 call    fprintf
.text:00415440                 mov     edx, eax
.text:00415442                 shr     edx, 1Fh
.text:00415445
.text:00415445 loc_415445:                             ; CODE XREF: .text:00415345↑j
.text:00415445                 add     esp, 44h
.text:00415448                 mov     eax, edx
.text:0041544A                 pop     ebx
.text:0041544B                 pop     esi
.text:0041544C                 retn
.text:0041544D ; ---------------------------------------------------------------------------
.text:0041544D
.text:0041544D loc_41544D:                             ; CODE XREF: .text:004153F2↑j
.text:0041544D                                         ; .text:004153F6↑j ...
.text:0041544D                 test    al, al
.text:0041544F                 jz      short loc_415404
.text:00415451                 mov     [esp], edx
.text:00415454                 mov     ebx, edx
.text:00415456                 call    strlen
.text:0041545B                 lea     edx, ds:1[eax*4]
.text:00415462                 mov     [esp], edx
.text:00415465                 call    malloc
.text:0041546A                 mov     [esp+2Ch], eax
.text:0041546E                 mov     edx, eax
.text:00415470
.text:00415470 loc_415470:                             ; CODE XREF: .text:00415488↓j
.text:00415470                 movzx   eax, byte ptr [ebx]
.text:00415473                 cmp     al, 20h ; ' '
.text:00415475                 jz      short loc_4154AD
.text:00415477                 cmp     al, 9
.text:00415479                 jz      short loc_41549C
.text:0041547B                 cmp     al, 5Ch ; '\'
.text:0041547D                 jz      short loc_415493
.text:0041547F                 mov     [edx], al
.text:00415481
.text:00415481 loc_415481:                             ; CODE XREF: .text:0041549A↓j
.text:00415481                                         ; .text:004154AB↓j ...
.text:00415481                 movzx   ecx, byte ptr [ebx]
.text:00415484                 inc     edx
.text:00415485                 inc     ebx
.text:00415486                 test    cl, cl
.text:00415488                 jnz     short loc_415470
.text:0041548A                 mov     edx, [esp+2Ch]
.text:0041548E                 jmp     loc_415404
.text:00415493 ; ---------------------------------------------------------------------------
.text:00415493
.text:00415493 loc_415493:                             ; CODE XREF: .text:0041547D↑j
.text:00415493                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415496                 inc     edx
.text:00415497                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041549A                 jmp     short loc_415481
.text:0041549C ; ---------------------------------------------------------------------------
.text:0041549C
.text:0041549C loc_41549C:                             ; CODE XREF: .text:00415479↑j
.text:0041549C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041549F                 inc     edx
.text:004154A0                 mov     byte ptr [edx], 30h ; '0'
.text:004154A3                 inc     edx
.text:004154A4                 mov     byte ptr [edx], 31h ; '1'
.text:004154A7                 inc     edx
.text:004154A8                 mov     byte ptr [edx], 32h ; '2'
.text:004154AB                 jmp     short loc_415481
.text:004154AD ; ---------------------------------------------------------------------------
.text:004154AD
.text:004154AD loc_4154AD:                             ; CODE XREF: .text:00415475↑j
.text:004154AD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004154B0                 inc     edx
.text:004154B1                 mov     byte ptr [edx], 30h ; '0'
.text:004154B4                 inc     edx
.text:004154B5                 mov     byte ptr [edx], 34h ; '4'
.text:004154B8                 inc     edx
.text:004154B9                 mov     byte ptr [edx], 30h ; '0'
.text:004154BC                 jmp     short loc_415481
.text:004154BE ; ---------------------------------------------------------------------------
.text:004154BE
.text:004154BE loc_4154BE:                             ; CODE XREF: .text:004153C2↑j
.text:004154BE                                         ; .text:004153CA↑j ...
.text:004154BE                 test    al, al
.text:004154C0                 jz      loc_4153E0
.text:004154C6                 mov     [esp], edx
.text:004154C9                 mov     ebx, edx
.text:004154CB                 call    strlen
.text:004154D0                 lea     edx, ds:1[eax*4]
.text:004154D7                 mov     [esp], edx
.text:004154DA                 call    malloc
.text:004154DF                 mov     [esp+28h], eax
.text:004154E3                 mov     edx, eax
.text:004154E5                 lea     esi, [esi+0]
.text:004154E9                 lea     edi, [edi+0]
.text:004154F0
.text:004154F0 loc_4154F0:                             ; CODE XREF: .text:00415508↓j
.text:004154F0                 movzx   eax, byte ptr [ebx]
.text:004154F3                 cmp     al, 20h ; ' '
.text:004154F5                 jz      short loc_415529
.text:004154F7                 cmp     al, 9
.text:004154F9                 jz      short loc_415518
.text:004154FB                 cmp     al, 5Ch ; '\'
.text:004154FD                 jz      short loc_41550F
.text:004154FF                 mov     [edx], al
.text:00415501
.text:00415501 loc_415501:                             ; CODE XREF: .text:00415516↓j
.text:00415501                                         ; .text:00415527↓j ...
.text:00415501                 movzx   ecx, byte ptr [ebx]
.text:00415504                 inc     edx
.text:00415505                 inc     ebx
.text:00415506                 test    cl, cl
.text:00415508                 jnz     short loc_4154F0
.text:0041550A                 jmp     loc_4153E0
.text:0041550F ; ---------------------------------------------------------------------------
.text:0041550F
.text:0041550F loc_41550F:                             ; CODE XREF: .text:004154FD↑j
.text:0041550F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415512                 inc     edx
.text:00415513                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415516                 jmp     short loc_415501
.text:00415518 ; ---------------------------------------------------------------------------
.text:00415518
.text:00415518 loc_415518:                             ; CODE XREF: .text:004154F9↑j
.text:00415518                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041551B                 inc     edx
.text:0041551C                 mov     byte ptr [edx], 30h ; '0'
.text:0041551F                 inc     edx
.text:00415520                 mov     byte ptr [edx], 31h ; '1'
.text:00415523                 inc     edx
.text:00415524                 mov     byte ptr [edx], 32h ; '2'
.text:00415527                 jmp     short loc_415501
.text:00415529 ; ---------------------------------------------------------------------------
.text:00415529
.text:00415529 loc_415529:                             ; CODE XREF: .text:004154F5↑j
.text:00415529                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041552C                 inc     edx
.text:0041552D                 mov     byte ptr [edx], 30h ; '0'
.text:00415530                 inc     edx
.text:00415531                 mov     byte ptr [edx], 34h ; '4'
.text:00415534                 inc     edx
.text:00415535                 mov     byte ptr [edx], 30h ; '0'
.text:00415538                 jmp     short loc_415501
.text:0041553A ; ---------------------------------------------------------------------------
.text:0041553A
.text:0041553A loc_41553A:                             ; CODE XREF: .text:00415392↑j
.text:0041553A                                         ; .text:0041539A↑j ...
.text:0041553A                 test    al, al
.text:0041553C                 jz      loc_4153B0
.text:00415542                 mov     [esp], edx
.text:00415545                 mov     ebx, edx
.text:00415547                 call    strlen
.text:0041554C                 lea     edx, ds:1[eax*4]
.text:00415553                 mov     [esp], edx
.text:00415556                 call    malloc
.text:0041555B                 mov     [esp+24h], eax
.text:0041555F                 mov     edx, eax
.text:00415561                 jmp     short loc_415570
.text:00415561 ; ---------------------------------------------------------------------------
.text:00415563                 align 10h
.text:00415570
.text:00415570 loc_415570:                             ; CODE XREF: .text:00415561↑j
.text:00415570                                         ; .text:00415588↓j
.text:00415570                 movzx   eax, byte ptr [ebx]
.text:00415573                 cmp     al, 20h ; ' '
.text:00415575                 jz      short loc_4155A9
.text:00415577                 cmp     al, 9
.text:00415579                 jz      short loc_415598
.text:0041557B                 cmp     al, 5Ch ; '\'
.text:0041557D                 jz      short loc_41558F
.text:0041557F                 mov     [edx], al
.text:00415581
.text:00415581 loc_415581:                             ; CODE XREF: .text:00415596↓j
.text:00415581                                         ; .text:004155A7↓j ...
.text:00415581                 movzx   ecx, byte ptr [ebx]
.text:00415584                 inc     edx
.text:00415585                 inc     ebx
.text:00415586                 test    cl, cl
.text:00415588                 jnz     short loc_415570
.text:0041558A                 jmp     loc_4153B0
.text:0041558F ; ---------------------------------------------------------------------------
.text:0041558F
.text:0041558F loc_41558F:                             ; CODE XREF: .text:0041557D↑j
.text:0041558F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415592                 inc     edx
.text:00415593                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415596                 jmp     short loc_415581
.text:00415598 ; ---------------------------------------------------------------------------
.text:00415598
.text:00415598 loc_415598:                             ; CODE XREF: .text:00415579↑j
.text:00415598                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041559B                 inc     edx
.text:0041559C                 mov     byte ptr [edx], 30h ; '0'
.text:0041559F                 inc     edx
.text:004155A0                 mov     byte ptr [edx], 31h ; '1'
.text:004155A3                 inc     edx
.text:004155A4                 mov     byte ptr [edx], 32h ; '2'
.text:004155A7                 jmp     short loc_415581
.text:004155A9 ; ---------------------------------------------------------------------------
.text:004155A9
.text:004155A9 loc_4155A9:                             ; CODE XREF: .text:00415575↑j
.text:004155A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004155AC                 inc     edx
.text:004155AD                 mov     byte ptr [edx], 30h ; '0'
.text:004155B0                 inc     edx
.text:004155B1                 mov     byte ptr [edx], 34h ; '4'
.text:004155B4                 inc     edx
.text:004155B5                 mov     byte ptr [edx], 30h ; '0'
.text:004155B8                 jmp     short loc_415581
.text:004155BA ; ---------------------------------------------------------------------------
.text:004155BA
.text:004155BA loc_4155BA:                             ; CODE XREF: .text:00415362↑j
.text:004155BA                                         ; .text:0041536A↑j ...
.text:004155BA                 test    al, al
.text:004155BC                 jz      loc_415380
.text:004155C2                 mov     [esp], edx
.text:004155C5                 mov     ebx, edx
.text:004155C7                 call    strlen
.text:004155CC                 lea     ecx, ds:1[eax*4]
.text:004155D3                 mov     [esp], ecx
.text:004155D6                 call    malloc
.text:004155DB                 mov     [esp+20h], eax
.text:004155DF                 mov     edx, eax
.text:004155E1                 jmp     short loc_4155F0
.text:004155E1 ; ---------------------------------------------------------------------------
.text:004155E3                 align 10h
.text:004155F0
.text:004155F0 loc_4155F0:                             ; CODE XREF: .text:004155E1↑j
.text:004155F0                                         ; .text:00415608↓j
.text:004155F0                 movzx   eax, byte ptr [ebx]
.text:004155F3                 cmp     al, 20h ; ' '
.text:004155F5                 jz      short loc_415629
.text:004155F7                 cmp     al, 9
.text:004155F9                 jz      short loc_415618
.text:004155FB                 cmp     al, 5Ch ; '\'
.text:004155FD                 jz      short loc_41560F
.text:004155FF                 mov     [edx], al
.text:00415601
.text:00415601 loc_415601:                             ; CODE XREF: .text:00415616↓j
.text:00415601                                         ; .text:00415627↓j ...
.text:00415601                 movzx   ecx, byte ptr [ebx]
.text:00415604                 inc     edx
.text:00415605                 inc     ebx
.text:00415606                 test    cl, cl
.text:00415608                 jnz     short loc_4155F0
.text:0041560A                 jmp     loc_415380
.text:0041560F ; ---------------------------------------------------------------------------
.text:0041560F
.text:0041560F loc_41560F:                             ; CODE XREF: .text:004155FD↑j
.text:0041560F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415612                 inc     edx
.text:00415613                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415616                 jmp     short loc_415601
.text:00415618 ; ---------------------------------------------------------------------------
.text:00415618
.text:00415618 loc_415618:                             ; CODE XREF: .text:004155F9↑j
.text:00415618                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041561B                 inc     edx
.text:0041561C                 mov     byte ptr [edx], 30h ; '0'
.text:0041561F                 inc     edx
.text:00415620                 mov     byte ptr [edx], 31h ; '1'
.text:00415623                 inc     edx
.text:00415624                 mov     byte ptr [edx], 32h ; '2'
.text:00415627                 jmp     short loc_415601
.text:00415629 ; ---------------------------------------------------------------------------
.text:00415629
.text:00415629 loc_415629:                             ; CODE XREF: .text:004155F5↑j
.text:00415629                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041562C                 inc     edx
.text:0041562D                 mov     byte ptr [edx], 30h ; '0'
.text:00415630                 inc     edx
.text:00415631                 mov     byte ptr [edx], 34h ; '4'
.text:00415634                 inc     edx
.text:00415635                 mov     byte ptr [edx], 30h ; '0'
.text:00415638                 jmp     short loc_415601
.text:00415638 ; ---------------------------------------------------------------------------
.text:0041563A                 align 10h
.text:00415640
.text:00415640 ; =============== S U B R O U T I N E =======================================
.text:00415640
.text:00415640 ; Attributes: info_from_lumina
.text:00415640
.text:00415640 ; int __cdecl __addmntentstr(char *, int)
.text:00415640 ___addmntentstr proc near               ; CODE XREF: .text:00414F0A↑p
.text:00415640
.text:00415640 Buffer          = dword ptr -4Ch
.text:00415640 Format          = dword ptr -48h
.text:00415640 var_44          = dword ptr -44h
.text:00415640 var_40          = dword ptr -40h
.text:00415640 var_3C          = dword ptr -3Ch
.text:00415640 var_38          = dword ptr -38h
.text:00415640 var_34          = dword ptr -34h
.text:00415640 var_30          = dword ptr -30h
.text:00415640 var_2C          = dword ptr -2Ch
.text:00415640 var_28          = dword ptr -28h
.text:00415640 var_24          = dword ptr -24h
.text:00415640 Str             = dword ptr -20h
.text:00415640 var_1C          = dword ptr -1Ch
.text:00415640 var_18          = dword ptr -18h
.text:00415640 arg_0           = dword ptr  4
.text:00415640 arg_4           = dword ptr  8
.text:00415640
.text:00415640                 push    ebx
.text:00415641                 sub     esp, 48h
.text:00415644                 mov     edx, [esp+4Ch+arg_4]
.text:00415648                 mov     ecx, [edx]
.text:0041564A                 mov     [esp+4Ch+var_2C], ecx
.text:0041564E                 mov     ebx, [edx+4]
.text:00415651                 mov     [esp+4Ch+var_28], ebx
.text:00415655                 mov     ebx, [edx+8]
.text:00415658                 mov     [esp+4Ch+var_24], ebx
.text:0041565C                 mov     ebx, [edx+0Ch]
.text:0041565F                 mov     [esp+4Ch+Str], ebx
.text:00415663                 mov     ebx, [edx+10h]
.text:00415666                 mov     [esp+4Ch+var_1C], ebx
.text:0041566A                 mov     ebx, [edx+14h]
.text:0041566D                 mov     [esp+4Ch+var_18], ebx
.text:00415671                 mov     ebx, ecx
.text:00415673                 movzx   eax, byte ptr [ecx]
.text:00415676                 test    al, al
.text:00415678                 jz      loc_415961
.text:0041567E                 mov     esi, esi
.text:00415680
.text:00415680 loc_415680:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:00415680                 cmp     al, 20h ; ' '
.text:00415682                 jz      loc_4158E0
.text:00415688                 cmp     al, 9
.text:0041568A                 jz      loc_4158E0
.text:00415690                 cmp     al, 5Ch ; '\'
.text:00415692                 jz      loc_4158E0
.text:00415698                 inc     ebx
.text:00415699                 movzx   eax, byte ptr [ebx]
.text:0041569C                 test    al, al
.text:0041569E                 jnz     short loc_415680
.text:004156A0
.text:004156A0 loc_4156A0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:004156A0                                         ; ___addmntentstr+2EA↓j
.text:004156A0                 mov     ebx, [esp+4Ch+var_28]
.text:004156A4                 mov     edx, ebx
.text:004156A6                 movzx   eax, byte ptr [ebx]
.text:004156A9                 test    al, al
.text:004156AB                 jz      short loc_4156D0
.text:004156AD                 lea     esi, [esi+0]
.text:004156B0
.text:004156B0 loc_4156B0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:004156B0                 cmp     al, 20h ; ' '
.text:004156B2                 jz      loc_41585A
.text:004156B8                 cmp     al, 9
.text:004156BA                 jz      loc_41585A
.text:004156C0                 cmp     al, 5Ch ; '\'
.text:004156C2                 jz      loc_41585A
.text:004156C8                 inc     ebx
.text:004156C9                 movzx   eax, byte ptr [ebx]
.text:004156CC                 test    al, al
.text:004156CE                 jnz     short loc_4156B0
.text:004156D0
.text:004156D0 loc_4156D0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:004156D0                                         ; ___addmntentstr+21C↓j ...
.text:004156D0                 mov     ebx, [esp+4Ch+var_24]
.text:004156D4                 mov     edx, ebx
.text:004156D6                 movzx   eax, byte ptr [ebx]
.text:004156D9                 test    al, al
.text:004156DB                 jz      short loc_415700
.text:004156DD                 lea     esi, [esi+0]
.text:004156E0
.text:004156E0 loc_4156E0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:004156E0                 cmp     al, 20h ; ' '
.text:004156E2                 jz      loc_4157DE
.text:004156E8                 cmp     al, 9
.text:004156EA                 jz      loc_4157DE
.text:004156F0                 cmp     al, 5Ch ; '\'
.text:004156F2                 jz      loc_4157DE
.text:004156F8                 inc     ebx
.text:004156F9                 movzx   eax, byte ptr [ebx]
.text:004156FC                 test    al, al
.text:004156FE                 jnz     short loc_4156E0
.text:00415700
.text:00415700 loc_415700:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00415700                                         ; ___addmntentstr+1A0↓j ...
.text:00415700                 mov     edx, [esp+4Ch+Str]
.text:00415704                 mov     ebx, edx
.text:00415706                 movzx   eax, byte ptr [edx]
.text:00415709                 test    al, al
.text:0041570B                 jz      short loc_415724
.text:0041570D                 lea     esi, [esi+0]
.text:00415710
.text:00415710 loc_415710:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00415710                 cmp     al, 20h ; ' '
.text:00415712                 jz      short loc_41576C
.text:00415714                 cmp     al, 9
.text:00415716                 jz      short loc_41576C
.text:00415718                 cmp     al, 5Ch ; '\'
.text:0041571A                 jz      short loc_41576C
.text:0041571C                 inc     ebx
.text:0041571D                 movzx   eax, byte ptr [ebx]
.text:00415720                 test    al, al
.text:00415722                 jnz     short loc_415710
.text:00415724
.text:00415724 loc_415724:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00415724                                         ; ___addmntentstr+12E↓j ...
.text:00415724                 mov     [esp+4Ch+var_38], edx
.text:00415728                 mov     ebx, [esp+4Ch+var_18]
.text:0041572C                 mov     ecx, [esp+4Ch+var_1C]
.text:00415730                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00415738                 mov     edx, [esp+4Ch+var_2C]
.text:0041573C                 mov     [esp+4Ch+var_30], ebx
.text:00415740                 mov     ebx, [esp+4Ch+var_24]
.text:00415744                 mov     [esp+4Ch+var_34], ecx
.text:00415748                 mov     ecx, [esp+4Ch+var_28]
.text:0041574C                 mov     [esp+4Ch+var_3C], ebx
.text:00415750                 mov     ebx, [esp+4Ch+arg_0]
.text:00415754                 mov     [esp+4Ch+var_40], ecx
.text:00415758                 mov     [esp+4Ch+var_44], edx
.text:0041575C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041575F                 call    sprintf
.text:00415764                 add     esp, 48h
.text:00415767                 shr     eax, 1Fh
.text:0041576A                 pop     ebx
.text:0041576B                 retn
.text:0041576C ; ---------------------------------------------------------------------------
.text:0041576C
.text:0041576C loc_41576C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041576C                                         ; ___addmntentstr+D6↑j ...
.text:0041576C                 test    al, al
.text:0041576E                 jz      short loc_415724
.text:00415770                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00415773                 mov     ebx, edx
.text:00415775                 call    strlen
.text:0041577A                 lea     edx, ds:1[eax*4]
.text:00415781                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415784                 call    malloc
.text:00415789                 mov     [esp+4Ch+Str], eax
.text:0041578D                 mov     edx, eax
.text:0041578F                 nop
.text:00415790
.text:00415790 loc_415790:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00415790                 movzx   eax, byte ptr [ebx]
.text:00415793                 cmp     al, 20h ; ' '
.text:00415795                 jz      short loc_4157CD
.text:00415797                 cmp     al, 9
.text:00415799                 jz      short loc_4157BC
.text:0041579B                 cmp     al, 5Ch ; '\'
.text:0041579D                 jz      short loc_4157B3
.text:0041579F                 mov     [edx], al
.text:004157A1
.text:004157A1 loc_4157A1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:004157A1                                         ; ___addmntentstr+18B↓j ...
.text:004157A1                 movzx   ecx, byte ptr [ebx]
.text:004157A4                 inc     edx
.text:004157A5                 inc     ebx
.text:004157A6                 test    cl, cl
.text:004157A8                 jnz     short loc_415790
.text:004157AA                 mov     edx, [esp+4Ch+Str]
.text:004157AE                 jmp     loc_415724
.text:004157B3 ; ---------------------------------------------------------------------------
.text:004157B3
.text:004157B3 loc_4157B3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:004157B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004157B6                 inc     edx
.text:004157B7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004157BA                 jmp     short loc_4157A1
.text:004157BC ; ---------------------------------------------------------------------------
.text:004157BC
.text:004157BC loc_4157BC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:004157BC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004157BF                 inc     edx
.text:004157C0                 mov     byte ptr [edx], 30h ; '0'
.text:004157C3                 inc     edx
.text:004157C4                 mov     byte ptr [edx], 31h ; '1'
.text:004157C7                 inc     edx
.text:004157C8                 mov     byte ptr [edx], 32h ; '2'
.text:004157CB                 jmp     short loc_4157A1
.text:004157CD ; ---------------------------------------------------------------------------
.text:004157CD
.text:004157CD loc_4157CD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004157CD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004157D0                 inc     edx
.text:004157D1                 mov     byte ptr [edx], 30h ; '0'
.text:004157D4                 inc     edx
.text:004157D5                 mov     byte ptr [edx], 34h ; '4'
.text:004157D8                 inc     edx
.text:004157D9                 mov     byte ptr [edx], 30h ; '0'
.text:004157DC                 jmp     short loc_4157A1
.text:004157DE ; ---------------------------------------------------------------------------
.text:004157DE
.text:004157DE loc_4157DE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:004157DE                                         ; ___addmntentstr+AA↑j ...
.text:004157DE                 test    al, al
.text:004157E0                 jz      loc_415700
.text:004157E6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:004157E9                 mov     ebx, edx
.text:004157EB                 call    strlen
.text:004157F0                 lea     edx, ds:1[eax*4]
.text:004157F7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004157FA                 call    malloc
.text:004157FF                 mov     [esp+4Ch+var_24], eax
.text:00415803                 mov     edx, eax
.text:00415805                 lea     esi, [esi+0]
.text:00415809                 lea     edi, [edi+0]
.text:00415810
.text:00415810 loc_415810:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00415810                 movzx   eax, byte ptr [ebx]
.text:00415813                 cmp     al, 20h ; ' '
.text:00415815                 jz      short loc_415849
.text:00415817                 cmp     al, 9
.text:00415819                 jz      short loc_415838
.text:0041581B                 cmp     al, 5Ch ; '\'
.text:0041581D                 jz      short loc_41582F
.text:0041581F                 mov     [edx], al
.text:00415821
.text:00415821 loc_415821:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00415821                                         ; ___addmntentstr+207↓j ...
.text:00415821                 movzx   ecx, byte ptr [ebx]
.text:00415824                 inc     edx
.text:00415825                 inc     ebx
.text:00415826                 test    cl, cl
.text:00415828                 jnz     short loc_415810
.text:0041582A                 jmp     loc_415700
.text:0041582F ; ---------------------------------------------------------------------------
.text:0041582F
.text:0041582F loc_41582F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041582F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415832                 inc     edx
.text:00415833                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415836                 jmp     short loc_415821
.text:00415838 ; ---------------------------------------------------------------------------
.text:00415838
.text:00415838 loc_415838:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00415838                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041583B                 inc     edx
.text:0041583C                 mov     byte ptr [edx], 30h ; '0'
.text:0041583F                 inc     edx
.text:00415840                 mov     byte ptr [edx], 31h ; '1'
.text:00415843                 inc     edx
.text:00415844                 mov     byte ptr [edx], 32h ; '2'
.text:00415847                 jmp     short loc_415821
.text:00415849 ; ---------------------------------------------------------------------------
.text:00415849
.text:00415849 loc_415849:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00415849                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041584C                 inc     edx
.text:0041584D                 mov     byte ptr [edx], 30h ; '0'
.text:00415850                 inc     edx
.text:00415851                 mov     byte ptr [edx], 34h ; '4'
.text:00415854                 inc     edx
.text:00415855                 mov     byte ptr [edx], 30h ; '0'
.text:00415858                 jmp     short loc_415821
.text:0041585A ; ---------------------------------------------------------------------------
.text:0041585A
.text:0041585A loc_41585A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041585A                                         ; ___addmntentstr+7A↑j ...
.text:0041585A                 test    al, al
.text:0041585C                 jz      loc_4156D0
.text:00415862                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00415865                 mov     ebx, edx
.text:00415867                 call    strlen
.text:0041586C                 lea     edx, ds:1[eax*4]
.text:00415873                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415876                 call    malloc
.text:0041587B                 mov     [esp+4Ch+var_28], eax
.text:0041587F                 mov     edx, eax
.text:00415881                 jmp     short loc_415890
.text:00415881 ; ---------------------------------------------------------------------------
.text:00415883                 align 10h
.text:00415890
.text:00415890 loc_415890:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00415890                                         ; ___addmntentstr+268↓j
.text:00415890                 movzx   eax, byte ptr [ebx]
.text:00415893                 cmp     al, 20h ; ' '
.text:00415895                 jz      short loc_4158C9
.text:00415897                 cmp     al, 9
.text:00415899                 jz      short loc_4158B8
.text:0041589B                 cmp     al, 5Ch ; '\'
.text:0041589D                 jz      short loc_4158AF
.text:0041589F                 mov     [edx], al
.text:004158A1
.text:004158A1 loc_4158A1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:004158A1                                         ; ___addmntentstr+287↓j ...
.text:004158A1                 movzx   ecx, byte ptr [ebx]
.text:004158A4                 inc     edx
.text:004158A5                 inc     ebx
.text:004158A6                 test    cl, cl
.text:004158A8                 jnz     short loc_415890
.text:004158AA                 jmp     loc_4156D0
.text:004158AF ; ---------------------------------------------------------------------------
.text:004158AF
.text:004158AF loc_4158AF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:004158AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004158B2                 inc     edx
.text:004158B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004158B6                 jmp     short loc_4158A1
.text:004158B8 ; ---------------------------------------------------------------------------
.text:004158B8
.text:004158B8 loc_4158B8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:004158B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004158BB                 inc     edx
.text:004158BC                 mov     byte ptr [edx], 30h ; '0'
.text:004158BF                 inc     edx
.text:004158C0                 mov     byte ptr [edx], 31h ; '1'
.text:004158C3                 inc     edx
.text:004158C4                 mov     byte ptr [edx], 32h ; '2'
.text:004158C7                 jmp     short loc_4158A1
.text:004158C9 ; ---------------------------------------------------------------------------
.text:004158C9
.text:004158C9 loc_4158C9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:004158C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004158CC                 inc     edx
.text:004158CD                 mov     byte ptr [edx], 30h ; '0'
.text:004158D0                 inc     edx
.text:004158D1                 mov     byte ptr [edx], 34h ; '4'
.text:004158D4                 inc     edx
.text:004158D5                 mov     byte ptr [edx], 30h ; '0'
.text:004158D8                 jmp     short loc_4158A1
.text:004158D8 ; ---------------------------------------------------------------------------
.text:004158DA                 align 10h
.text:004158E0
.text:004158E0 loc_4158E0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:004158E0                                         ; ___addmntentstr+4A↑j ...
.text:004158E0                 test    al, al
.text:004158E2                 jz      loc_4156A0
.text:004158E8                 mov     ebx, [esp+4Ch+var_2C]
.text:004158EC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:004158EF                 call    strlen
.text:004158F4                 lea     edx, ds:1[eax*4]
.text:004158FB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004158FE                 call    malloc
.text:00415903                 mov     [esp+4Ch+var_2C], eax
.text:00415907                 mov     edx, eax
.text:00415909                 lea     esi, [esi+0]
.text:00415910
.text:00415910 loc_415910:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00415910                 movzx   eax, byte ptr [ebx]
.text:00415913                 cmp     al, 20h ; ' '
.text:00415915                 jz      short loc_415950
.text:00415917                 cmp     al, 9
.text:00415919                 jz      short loc_415938
.text:0041591B                 cmp     al, 5Ch ; '\'
.text:0041591D                 jz      short loc_41592F
.text:0041591F                 mov     [edx], al
.text:00415921
.text:00415921 loc_415921:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00415921                                         ; ___addmntentstr+307↓j ...
.text:00415921                 movzx   ecx, byte ptr [ebx]
.text:00415924                 inc     edx
.text:00415925                 inc     ebx
.text:00415926                 test    cl, cl
.text:00415928                 jnz     short loc_415910
.text:0041592A                 jmp     loc_4156A0
.text:0041592F ; ---------------------------------------------------------------------------
.text:0041592F
.text:0041592F loc_41592F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041592F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415932                 inc     edx
.text:00415933                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415936                 jmp     short loc_415921
.text:00415938 ; ---------------------------------------------------------------------------
.text:00415938
.text:00415938 loc_415938:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00415938                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041593B                 inc     edx
.text:0041593C                 mov     byte ptr [edx], 30h ; '0'
.text:0041593F                 inc     edx
.text:00415940                 mov     byte ptr [edx], 31h ; '1'
.text:00415943                 inc     edx
.text:00415944                 mov     byte ptr [edx], 32h ; '2'
.text:00415947                 jmp     short loc_415921
.text:00415947 ; ---------------------------------------------------------------------------
.text:00415949                 align 10h
.text:00415950
.text:00415950 loc_415950:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00415950                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415953                 inc     edx
.text:00415954                 mov     byte ptr [edx], 30h ; '0'
.text:00415957                 inc     edx
.text:00415958                 mov     byte ptr [edx], 34h ; '4'
.text:0041595B                 inc     edx
.text:0041595C                 mov     byte ptr [edx], 30h ; '0'
.text:0041595F                 jmp     short loc_415921
.text:00415961 ; ---------------------------------------------------------------------------
.text:00415961
.text:00415961 loc_415961:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00415961                 movzx   eax, byte ptr [ecx]
.text:00415964                 jmp     loc_4158E0
.text:00415964 ___addmntentstr endp
.text:00415964
.text:00415964 ; ---------------------------------------------------------------------------
.text:00415969                 align 10h
.text:00415970
.text:00415970 ; =============== S U B R O U T I N E =======================================
.text:00415970
.text:00415970
.text:00415970 sub_415970      proc near               ; CODE XREF: sub_412E70+99↑p
.text:00415970
.text:00415970 nBufferLength   = dword ptr -1Ch
.text:00415970 lpBuffer        = dword ptr -18h
.text:00415970 dwBytes         = dword ptr -14h
.text:00415970 var_8           = dword ptr -8
.text:00415970 var_4           = dword ptr -4
.text:00415970
.text:00415970                 sub     esp, 1Ch
.text:00415973                 mov     [esp+1Ch+var_8], ebx
.text:00415977                 mov     [esp+1Ch+var_4], esi
.text:0041597B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00415983                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041598A                 call    GetLogicalDriveStringsA
.text:0041598F                 sub     esp, 8
.text:00415992                 mov     ebx, eax
.text:00415994                 call    GetProcessHeap
.text:00415999                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041599C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:004159A0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:004159A8                 call    HeapAlloc
.text:004159AD                 sub     esp, 0Ch
.text:004159B0                 mov     esi, eax
.text:004159B2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:004159B5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:004159B9                 call    GetLogicalDriveStringsA
.text:004159BE                 sub     esp, 8
.text:004159C1                 mov     eax, esi
.text:004159C3                 mov     ebx, [esp+1Ch+var_8]
.text:004159C7                 mov     esi, [esp+1Ch+var_4]
.text:004159CB                 add     esp, 1Ch
.text:004159CE                 retn
.text:004159CE sub_415970      endp
.text:004159CE
.text:004159CF
.text:004159CF ; =============== S U B R O U T I N E =======================================
.text:004159CF
.text:004159CF
.text:004159CF ; int __cdecl sub_4159CF(char *, char *)
.text:004159CF sub_4159CF      proc near               ; DATA XREF: sub_4159CF:loc_415A5D↓o
.text:004159CF
.text:004159CF FileName        = dword ptr -1Ch
.text:004159CF Mode            = dword ptr -18h
.text:004159CF dwBytes         = dword ptr -14h
.text:004159CF arg_0           = dword ptr  4
.text:004159CF arg_4           = dword ptr  8
.text:004159CF
.text:004159CF                 ja      short $+2
.text:004159D1
.text:004159D1 loc_4159D1:                             ; CODE XREF: sub_4159CF↑j
.text:004159D1                 jmp     short loc_4159E0
.text:004159D1 ; ---------------------------------------------------------------------------
.text:004159D3                 align 10h
.text:004159E0
.text:004159E0 loc_4159E0:                             ; CODE XREF: sub_4159CF:loc_4159D1↑j
.text:004159E0                 push    edi
.text:004159E1                 push    esi
.text:004159E2                 push    ebx
.text:004159E3                 sub     esp, 10h
.text:004159E6                 mov     ebx, [esp+1Ch+arg_0]
.text:004159EA                 mov     edx, [esp+1Ch+arg_4]
.text:004159EE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:004159F1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:004159F5                 call    fopen
.text:004159FA                 test    eax, eax
.text:004159FC                 mov     edi, eax
.text:004159FE                 jz      short loc_415A5D
.text:00415A00
.text:00415A00 loc_415A00:                             ; CODE XREF: sub_4159CF+A2↓j
.text:00415A00                                         ; sub_4159CF+AB↓j
.text:00415A00                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00415A08                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:00415A0F                 call    GetLogicalDriveStringsA
.text:00415A14                 sub     esp, 8
.text:00415A17                 mov     esi, eax
.text:00415A19                 call    GetProcessHeap
.text:00415A1E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00415A21                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00415A25                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:00415A2D                 call    HeapAlloc
.text:00415A32                 sub     esp, 0Ch
.text:00415A35                 mov     ebx, eax
.text:00415A37                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:00415A3A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:00415A3E                 call    GetLogicalDriveStringsA
.text:00415A43                 mov     off_41A0C4, ebx ; "notset"
.text:00415A49                 sub     esp, 8
.text:00415A4C                 xor     eax, eax
.text:00415A4E                 test    ebx, ebx
.text:00415A50                 setz    al
.text:00415A53                 add     esp, 10h
.text:00415A56                 pop     ebx
.text:00415A57                 dec     eax
.text:00415A58                 and     eax, edi
.text:00415A5A                 pop     esi
.text:00415A5B                 pop     edi
.text:00415A5C                 retn
.text:00415A5D ; ---------------------------------------------------------------------------
.text:00415A5D
.text:00415A5D loc_415A5D:                             ; CODE XREF: sub_4159CF+2F↑j
.text:00415A5D                 mov     [esp+1Ch+Mode], offset sub_4159CF ; Mode
.text:00415A65                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00415A68                 call    fopen
.text:00415A6D                 test    eax, eax
.text:00415A6F                 mov     edi, eax
.text:00415A71                 jnz     short loc_415A00
.text:00415A73                 call    sub_416840
.text:00415A78                 mov     edi, eax
.text:00415A7A                 jmp     short loc_415A00
.text:00415A7A sub_4159CF      endp
.text:00415A7A
.text:00415A7A ; ---------------------------------------------------------------------------
.text:00415A7C                 align 10h
.text:00415A80                 sub     esp, 0Ch
.text:00415A83                 mov     eax, [esp+10h]
.text:00415A87                 test    eax, eax
.text:00415A89                 jz      short loc_415A93
.text:00415A8B                 mov     [esp], eax
.text:00415A8E                 call    fclose
.text:00415A93
.text:00415A93 loc_415A93:                             ; CODE XREF: .text:00415A89↑j
.text:00415A93                 call    GetProcessHeap
.text:00415A98                 mov     [esp], eax
.text:00415A9B                 mov     ecx, off_41A0C4 ; "notset"
.text:00415AA1                 mov     dword ptr [esp+4], 0
.text:00415AA9                 mov     [esp+8], ecx
.text:00415AAD                 call    HeapFree
.text:00415AB2                 mov     edx, off_41A0C0 ; "notset"
.text:00415AB8                 sub     esp, 0Ch
.text:00415ABB                 mov     eax, 1
.text:00415AC0                 mov     off_41A0C4, edx ; "notset"
.text:00415AC6                 add     esp, 0Ch
.text:00415AC9                 retn
.text:00415AC9 ; ---------------------------------------------------------------------------
.text:00415ACA                 align 10h
.text:00415AD0                 push    edi
.text:00415AD1                 push    esi
.text:00415AD2                 push    ebx
.text:00415AD3                 sub     esp, 10h
.text:00415AD6                 mov     edi, [esp+24h]
.text:00415ADA                 mov     [esp], edi
.text:00415ADD                 call    strlen
.text:00415AE2                 mov     edx, [esp+20h]
.text:00415AE6                 mov     esi, eax
.text:00415AE8                 mov     ebx, [edx+0Ch]
.text:00415AEB                 nop
.text:00415AEC                 lea     esi, [esi+0]
.text:00415AF0
.text:00415AF0 loc_415AF0:                             ; CODE XREF: .text:00415B21↓j
.text:00415AF0                 mov     [esp+4], edi
.text:00415AF4                 mov     [esp], ebx
.text:00415AF7                 call    strstr
.text:00415AFC                 test    eax, eax
.text:00415AFE                 jz      short loc_415B23
.text:00415B00                 cmp     eax, ebx
.text:00415B02                 jz      short loc_415B25
.text:00415B04                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00415B08                 jz      short loc_415B30
.text:00415B0A
.text:00415B0A loc_415B0A:                             ; CODE XREF: .text:00415B40↓j
.text:00415B0A                 mov     [esp], ebx
.text:00415B0D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00415B15                 call    strchr
.text:00415B1A                 test    eax, eax
.text:00415B1C                 mov     ebx, eax
.text:00415B1E                 jz      short loc_415B23
.text:00415B20                 inc     ebx
.text:00415B21                 jmp     short loc_415AF0
.text:00415B23 ; ---------------------------------------------------------------------------
.text:00415B23
.text:00415B23 loc_415B23:                             ; CODE XREF: .text:00415AFE↑j
.text:00415B23                                         ; .text:00415B1E↑j
.text:00415B23                 xor     eax, eax
.text:00415B25
.text:00415B25 loc_415B25:                             ; CODE XREF: .text:00415B02↑j
.text:00415B25                                         ; .text:00415B36↓j ...
.text:00415B25                 add     esp, 10h
.text:00415B28                 pop     ebx
.text:00415B29                 pop     esi
.text:00415B2A                 pop     edi
.text:00415B2B                 retn
.text:00415B2B ; ---------------------------------------------------------------------------
.text:00415B2C                 align 10h
.text:00415B30
.text:00415B30 loc_415B30:                             ; CODE XREF: .text:00415B08↑j
.text:00415B30                 movzx   edx, byte ptr [esi+eax]
.text:00415B34                 test    dl, dl
.text:00415B36                 jz      short loc_415B25
.text:00415B38                 cmp     dl, 3Dh ; '='
.text:00415B3B                 jz      short loc_415B25
.text:00415B3D                 cmp     dl, 2Ch ; ','
.text:00415B40                 jnz     short loc_415B0A
.text:00415B42                 jmp     short loc_415B25
.text:00415B42 ; ---------------------------------------------------------------------------
.text:00415B44                 align 10h
.text:00415B50
.text:00415B50 ; =============== S U B R O U T I N E =======================================
.text:00415B50
.text:00415B50 ; Attributes: info_from_lumina
.text:00415B50
.text:00415B50 __quicksort     proc near               ; CODE XREF: sub_413C00+7B↑j
.text:00415B50
.text:00415B50 var_14C         = dword ptr -14Ch
.text:00415B50 var_148         = dword ptr -148h
.text:00415B50 var_13C         = dword ptr -13Ch
.text:00415B50 var_135         = byte ptr -135h
.text:00415B50 var_134         = dword ptr -134h
.text:00415B50 var_130         = dword ptr -130h
.text:00415B50 var_12C         = dword ptr -12Ch
.text:00415B50 var_128         = dword ptr -128h
.text:00415B50 var_124         = dword ptr -124h
.text:00415B50 var_120         = dword ptr -120h
.text:00415B50 var_11C         = byte ptr -11Ch
.text:00415B50 var_114         = byte ptr -114h
.text:00415B50 arg_0           = dword ptr  4
.text:00415B50 arg_4           = dword ptr  8
.text:00415B50 arg_8           = dword ptr  0Ch
.text:00415B50 arg_C           = dword ptr  10h
.text:00415B50
.text:00415B50                 push    ebp
.text:00415B51                 push    edi
.text:00415B52                 push    esi
.text:00415B53                 push    ebx
.text:00415B54                 sub     esp, 13Ch
.text:00415B5A                 mov     eax, [esp+14Ch+arg_4]
.text:00415B61                 mov     ecx, [esp+14Ch+arg_8]
.text:00415B68                 shl     ecx, 2
.text:00415B6B                 test    eax, eax
.text:00415B6D                 mov     [esp+14Ch+var_120], ecx
.text:00415B71                 jz      loc_415CCC
.text:00415B77                 lea     ecx, [eax-1]
.text:00415B7A                 cmp     eax, 4
.text:00415B7D                 mov     [esp+14Ch+var_13C], ecx
.text:00415B81                 jbe     short loc_415BB6
.text:00415B83                 mov     edi, [esp+14Ch+arg_8]
.text:00415B8A                 lea     ebx, [esp+14Ch+var_114]
.text:00415B8E                 mov     edx, [esp+14Ch+var_13C]
.text:00415B92                 mov     [esp+14Ch+var_12C], ebx
.text:00415B96                 mov     ebp, [esp+14Ch+arg_0]
.text:00415B9D                 lea     eax, [esp+14Ch+var_11C]
.text:00415BA1                 imul    edi, edx
.text:00415BA4                 mov     [esp+14Ch+var_124], ebp
.text:00415BA8                 add     edi, ebp
.text:00415BAA                 cmp     eax, ebx
.text:00415BAC                 mov     [esp+14Ch+var_128], edi
.text:00415BB0                 jb      loc_415CFF
.text:00415BB6
.text:00415BB6 loc_415BB6:                             ; CODE XREF: __quicksort+31↑j
.text:00415BB6                                         ; __quicksort+313↓j
.text:00415BB6                 mov     ebx, [esp+14Ch+arg_8]
.text:00415BBD                 mov     edx, [esp+14Ch+var_13C]
.text:00415BC1                 mov     ecx, [esp+14Ch+arg_0]
.text:00415BC8                 mov     esi, [esp+14Ch+arg_0]
.text:00415BCF                 imul    ebx, edx
.text:00415BD2                 mov     edi, [esp+14Ch+var_120]
.text:00415BD6                 add     ebx, ecx
.text:00415BD8                 mov     [esp+14Ch+var_134], ebx
.text:00415BDC                 lea     ebx, [edi+esi]
.text:00415BDF                 cmp     ebx, [esp+14Ch+var_134]
.text:00415BE3                 jbe     short loc_415BE9
.text:00415BE5                 mov     ebx, [esp+14Ch+var_134]
.text:00415BE9
.text:00415BE9 loc_415BE9:                             ; CODE XREF: __quicksort+93↑j
.text:00415BE9                 mov     ebp, [esp+14Ch+arg_8]
.text:00415BF0                 lea     edi, [ebp+esi+0]
.text:00415BF4                 cmp     edi, ebx
.text:00415BF6                 mov     ebp, edi
.text:00415BF8                 jbe     loc_415CD7
.text:00415BFE
.text:00415BFE loc_415BFE:                             ; CODE XREF: __quicksort+1A6↓j
.text:00415BFE                 cmp     esi, [esp+14Ch+arg_0]
.text:00415C05                 jz      short loc_415C26
.text:00415C07                 mov     edi, [esp+14Ch+arg_8]
.text:00415C0E                 mov     ebx, esi
.text:00415C10                 mov     ecx, [esp+14Ch+arg_0]
.text:00415C17
.text:00415C17 loc_415C17:                             ; CODE XREF: __quicksort+D4↓j
.text:00415C17                 movzx   edx, byte ptr [ebx]
.text:00415C1A                 movzx   eax, byte ptr [ecx]
.text:00415C1D                 mov     [ebx], al
.text:00415C1F                 inc     ebx
.text:00415C20                 mov     [ecx], dl
.text:00415C22                 inc     ecx
.text:00415C23                 dec     edi
.text:00415C24                 jnz     short loc_415C17
.text:00415C26
.text:00415C26 loc_415C26:                             ; CODE XREF: __quicksort+B5↑j
.text:00415C26                 mov     esi, [esp+14Ch+arg_8]
.text:00415C2D                 lea     edi, [esi+ebp]
.text:00415C30                 cmp     edi, [esp+14Ch+var_134]
.text:00415C34                 ja      loc_415CCC
.text:00415C3A
.text:00415C3A loc_415C3A:                             ; CODE XREF: __quicksort+176↓j
.text:00415C3A                 mov     esi, edi
.text:00415C3C                 lea     esi, [esi+0]
.text:00415C40
.text:00415C40 loc_415C40:                             ; CODE XREF: __quicksort+109↓j
.text:00415C40                 mov     [esp+14Ch+var_14C], edi
.text:00415C43                 mov     ebx, [esp+14Ch+arg_8]
.text:00415C4A                 sub     esi, ebx
.text:00415C4C                 mov     [esp+14Ch+var_148], esi
.text:00415C50                 call    [esp+14Ch+arg_C]
.text:00415C57                 test    eax, eax
.text:00415C59                 js      short loc_415C40
.text:00415C5B                 mov     edx, [esp+14Ch+arg_8]
.text:00415C62                 mov     eax, [esp+14Ch+arg_8]
.text:00415C69                 add     esi, edx
.text:00415C6B                 cmp     esi, edi
.text:00415C6D                 lea     ebp, [eax+edi]
.text:00415C70                 jz      short loc_415CC0
.text:00415C72                 lea     ebx, [ebp-1]
.text:00415C75                 cmp     ebx, edi
.text:00415C77                 jb      short loc_415CC0
.text:00415C79                 lea     esi, [esi+0]
.text:00415C80
.text:00415C80 loc_415C80:                             ; CODE XREF: __quicksort+16E↓j
.text:00415C80                 movzx   ecx, byte ptr [ebx]
.text:00415C83                 mov     edx, ebx
.text:00415C85                 mov     eax, [esp+14Ch+arg_8]
.text:00415C8C                 mov     [esp+14Ch+var_135], cl
.text:00415C90                 sub     edx, eax
.text:00415C92                 cmp     edx, esi
.text:00415C94                 mov     ecx, ebx
.text:00415C96                 jb      short loc_415CB4
.text:00415C98                 nop
.text:00415C99                 lea     esi, [esi+0]
.text:00415CA0
.text:00415CA0 loc_415CA0:                             ; CODE XREF: __quicksort+162↓j
.text:00415CA0                 movzx   eax, byte ptr [edx]
.text:00415CA3                 mov     [ecx], al
.text:00415CA5                 mov     eax, [esp+14Ch+arg_8]
.text:00415CAC                 mov     ecx, edx
.text:00415CAE                 sub     edx, eax
.text:00415CB0                 cmp     edx, esi
.text:00415CB2                 jnb     short loc_415CA0
.text:00415CB4
.text:00415CB4 loc_415CB4:                             ; CODE XREF: __quicksort+146↑j
.text:00415CB4                 movzx   eax, [esp+14Ch+var_135]
.text:00415CB9                 dec     ebx
.text:00415CBA                 cmp     ebx, edi
.text:00415CBC                 mov     [ecx], al
.text:00415CBE                 jnb     short loc_415C80
.text:00415CC0
.text:00415CC0 loc_415CC0:                             ; CODE XREF: __quicksort+120↑j
.text:00415CC0                                         ; __quicksort+127↑j
.text:00415CC0                 cmp     ebp, [esp+14Ch+var_134]
.text:00415CC4                 mov     edi, ebp
.text:00415CC6                 jbe     loc_415C3A
.text:00415CCC
.text:00415CCC loc_415CCC:                             ; CODE XREF: __quicksort+21↑j
.text:00415CCC                                         ; __quicksort+E4↑j
.text:00415CCC                 add     esp, 13Ch
.text:00415CD2                 pop     ebx
.text:00415CD3                 pop     esi
.text:00415CD4                 pop     edi
.text:00415CD5                 pop     ebp
.text:00415CD6                 retn
.text:00415CD7 ; ---------------------------------------------------------------------------
.text:00415CD7
.text:00415CD7 loc_415CD7:                             ; CODE XREF: __quicksort+A8↑j
.text:00415CD7                                         ; __quicksort+1A4↓j
.text:00415CD7                 mov     [esp+14Ch+var_148], esi
.text:00415CDB                 mov     [esp+14Ch+var_14C], edi
.text:00415CDE                 call    [esp+14Ch+arg_C]
.text:00415CE5                 test    eax, eax
.text:00415CE7                 js      short loc_415CFB
.text:00415CE9
.text:00415CE9 loc_415CE9:                             ; CODE XREF: __quicksort+1AD↓j
.text:00415CE9                 mov     ecx, [esp+14Ch+arg_8]
.text:00415CF0                 add     edi, ecx
.text:00415CF2                 cmp     edi, ebx
.text:00415CF4                 jbe     short loc_415CD7
.text:00415CF6                 jmp     loc_415BFE
.text:00415CFB ; ---------------------------------------------------------------------------
.text:00415CFB
.text:00415CFB loc_415CFB:                             ; CODE XREF: __quicksort+197↑j
.text:00415CFB                 mov     esi, edi
.text:00415CFD                 jmp     short loc_415CE9
.text:00415CFF ; ---------------------------------------------------------------------------
.text:00415CFF
.text:00415CFF loc_415CFF:                             ; CODE XREF: __quicksort+60↑j
.text:00415CFF                                         ; __quicksort+30D↓j
.text:00415CFF                 mov     eax, [esp+14Ch+var_128]
.text:00415D03                 xor     edx, edx
.text:00415D05                 mov     ebp, [esp+14Ch+var_124]
.text:00415D09                 mov     edi, [esp+14Ch+arg_8]
.text:00415D10                 mov     ebx, [esp+14Ch+var_124]
.text:00415D14                 sub     eax, ebp
.text:00415D16                 div     [esp+14Ch+arg_8]
.text:00415D1D                 mov     ecx, [esp+14Ch+var_124]
.text:00415D21                 mov     [esp+14Ch+var_148], ecx
.text:00415D25                 shr     eax, 1
.text:00415D27                 imul    eax, edi
.text:00415D2A                 add     eax, ebx
.text:00415D2C                 mov     [esp+14Ch+var_130], eax
.text:00415D30                 mov     esi, [esp+14Ch+var_130]
.text:00415D34                 mov     [esp+14Ch+var_14C], esi
.text:00415D37                 call    [esp+14Ch+arg_C]
.text:00415D3E                 test    eax, eax
.text:00415D40                 js      loc_415F44
.text:00415D46
.text:00415D46 loc_415D46:                             ; CODE XREF: __quicksort+412↓j
.text:00415D46                 mov     edx, [esp+14Ch+var_130]
.text:00415D4A                 mov     eax, [esp+14Ch+var_128]
.text:00415D4E                 mov     [esp+14Ch+var_148], edx
.text:00415D52                 mov     [esp+14Ch+var_14C], eax
.text:00415D55                 call    [esp+14Ch+arg_C]
.text:00415D5C                 test    eax, eax
.text:00415D5E                 js      loc_415EE5
.text:00415D64
.text:00415D64 loc_415D64:                             ; CODE XREF: __quicksort+3CB↓j
.text:00415D64                                         ; __quicksort+3EF↓j
.text:00415D64                 mov     edi, [esp+14Ch+arg_8]
.text:00415D6B                 mov     ebp, [esp+14Ch+var_124]
.text:00415D6F                 mov     ebx, [esp+14Ch+arg_8]
.text:00415D76                 add     ebp, edi
.text:00415D78                 mov     edi, [esp+14Ch+var_128]
.text:00415D7C                 sub     edi, ebx
.text:00415D7E                 mov     esi, esi
.text:00415D80
.text:00415D80 loc_415D80:                             ; CODE XREF: __quicksort+2C7↓j
.text:00415D80                                         ; __quicksort+390↓j
.text:00415D80                 mov     [esp+14Ch+var_14C], ebp
.text:00415D83                 mov     esi, [esp+14Ch+var_130]
.text:00415D87                 mov     [esp+14Ch+var_148], esi
.text:00415D8B                 call    [esp+14Ch+arg_C]
.text:00415D92                 test    eax, eax
.text:00415D94                 js      loc_415ED7
.text:00415D9A                 lea     esi, [esi+0]
.text:00415DA0
.text:00415DA0 loc_415DA0:                             ; CODE XREF: __quicksort+26F↓j
.text:00415DA0                 mov     [esp+14Ch+var_148], edi
.text:00415DA4                 mov     eax, [esp+14Ch+var_130]
.text:00415DA8                 mov     [esp+14Ch+var_14C], eax
.text:00415DAB                 call    [esp+14Ch+arg_C]
.text:00415DB2                 test    eax, eax
.text:00415DB4                 jns     short loc_415DC1
.text:00415DB6                 mov     ecx, [esp+14Ch+arg_8]
.text:00415DBD                 sub     edi, ecx
.text:00415DBF                 jmp     short loc_415DA0
.text:00415DC1 ; ---------------------------------------------------------------------------
.text:00415DC1
.text:00415DC1 loc_415DC1:                             ; CODE XREF: __quicksort+264↑j
.text:00415DC1                 cmp     ebp, edi
.text:00415DC3                 jnb     loc_415EBE
.text:00415DC9                 mov     esi, [esp+14Ch+arg_8]
.text:00415DD0                 mov     ebx, ebp
.text:00415DD2                 mov     ecx, edi
.text:00415DD4                 lea     esi, [esi+0]
.text:00415DDA                 lea     edi, [edi+0]
.text:00415DE0
.text:00415DE0 loc_415DE0:                             ; CODE XREF: __quicksort+29D↓j
.text:00415DE0                 movzx   edx, byte ptr [ebx]
.text:00415DE3                 movzx   eax, byte ptr [ecx]
.text:00415DE6                 mov     [ebx], al
.text:00415DE8                 inc     ebx
.text:00415DE9                 mov     [ecx], dl
.text:00415DEB                 inc     ecx
.text:00415DEC                 dec     esi
.text:00415DED                 jnz     short loc_415DE0
.text:00415DEF                 cmp     [esp+14Ch+var_130], ebp
.text:00415DF3                 jz      loc_415EB5
.text:00415DF9                 cmp     [esp+14Ch+var_130], edi
.text:00415DFD                 jz      loc_415EAC
.text:00415E03
.text:00415E03 loc_415E03:                             ; CODE XREF: __quicksort+360↓j
.text:00415E03                                         ; __quicksort+369↓j
.text:00415E03                 mov     edx, [esp+14Ch+arg_8]
.text:00415E0A                 mov     ebx, [esp+14Ch+arg_8]
.text:00415E11                 add     ebp, edx
.text:00415E13                 sub     edi, ebx
.text:00415E15
.text:00415E15 loc_415E15:                             ; CODE XREF: __quicksort+370↓j
.text:00415E15                 cmp     ebp, edi
.text:00415E17                 jbe     loc_415D80
.text:00415E1D
.text:00415E1D loc_415E1D:                             ; CODE XREF: __quicksort+382↓j
.text:00415E1D                 mov     esi, [esp+14Ch+var_124]
.text:00415E21                 mov     eax, edi
.text:00415E23                 sub     eax, esi
.text:00415E25                 cmp     eax, [esp+14Ch+var_120]
.text:00415E29                 ja      short loc_415E68
.text:00415E2B                 mov     [esp+14Ch+var_124], ebp
.text:00415E2F                 mov     edi, [esp+14Ch+var_128]
.text:00415E33                 sub     edi, ebp
.text:00415E35                 cmp     edi, [esp+14Ch+var_120]
.text:00415E39                 ja      short loc_415E55
.text:00415E3B                 sub     [esp+14Ch+var_12C], 8
.text:00415E40                 mov     edx, [esp+14Ch+var_12C]
.text:00415E44                 mov     ecx, [esp+14Ch+var_12C]
.text:00415E48                 mov     ebx, [edx]
.text:00415E4A                 mov     ebp, [ecx+4]
.text:00415E4D                 mov     [esp+14Ch+var_124], ebx
.text:00415E51                 mov     [esp+14Ch+var_128], ebp
.text:00415E55
.text:00415E55 loc_415E55:                             ; CODE XREF: __quicksort+2E9↑j
.text:00415E55                                         ; __quicksort+340↓j ...
.text:00415E55                 lea     eax, [esp+14Ch+var_11C]
.text:00415E59                 cmp     eax, [esp+14Ch+var_12C]
.text:00415E5D                 jb      loc_415CFF
.text:00415E63                 jmp     loc_415BB6
.text:00415E68 ; ---------------------------------------------------------------------------
.text:00415E68
.text:00415E68 loc_415E68:                             ; CODE XREF: __quicksort+2D9↑j
.text:00415E68                 mov     edx, [esp+14Ch+var_128]
.text:00415E6C                 sub     edx, ebp
.text:00415E6E                 cmp     edx, [esp+14Ch+var_120]
.text:00415E72                 jbe     short loc_415EA6
.text:00415E74                 cmp     eax, edx
.text:00415E76                 jle     short loc_415E92
.text:00415E78                 mov     ecx, [esp+14Ch+var_12C]
.text:00415E7C                 mov     ebx, [esp+14Ch+var_124]
.text:00415E80                 mov     [esp+14Ch+var_124], ebp
.text:00415E84                 mov     [ecx+4], edi
.text:00415E87                 mov     [ecx], ebx
.text:00415E89                 add     ecx, 8
.text:00415E8C                 mov     [esp+14Ch+var_12C], ecx
.text:00415E90                 jmp     short loc_415E55
.text:00415E92 ; ---------------------------------------------------------------------------
.text:00415E92
.text:00415E92 loc_415E92:                             ; CODE XREF: __quicksort+326↑j
.text:00415E92                 mov     esi, [esp+14Ch+var_12C]
.text:00415E96                 mov     [esi], ebp
.text:00415E98                 mov     ebp, [esp+14Ch+var_128]
.text:00415E9C                 mov     [esi+4], ebp
.text:00415E9F                 add     esi, 8
.text:00415EA2                 mov     [esp+14Ch+var_12C], esi
.text:00415EA6
.text:00415EA6 loc_415EA6:                             ; CODE XREF: __quicksort+322↑j
.text:00415EA6                 mov     [esp+14Ch+var_128], edi
.text:00415EAA                 jmp     short loc_415E55
.text:00415EAC ; ---------------------------------------------------------------------------
.text:00415EAC
.text:00415EAC loc_415EAC:                             ; CODE XREF: __quicksort+2AD↑j
.text:00415EAC                 mov     [esp+14Ch+var_130], ebp
.text:00415EB0                 jmp     loc_415E03
.text:00415EB5 ; ---------------------------------------------------------------------------
.text:00415EB5
.text:00415EB5 loc_415EB5:                             ; CODE XREF: __quicksort+2A3↑j
.text:00415EB5                 mov     [esp+14Ch+var_130], edi
.text:00415EB9                 jmp     loc_415E03
.text:00415EBE ; ---------------------------------------------------------------------------
.text:00415EBE
.text:00415EBE loc_415EBE:                             ; CODE XREF: __quicksort+273↑j
.text:00415EBE                 cmp     ebp, edi
.text:00415EC0                 jnz     loc_415E15
.text:00415EC6                 mov     esi, [esp+14Ch+arg_8]
.text:00415ECD                 lea     ebp, [esi+edi]
.text:00415ED0                 sub     edi, esi
.text:00415ED2                 jmp     loc_415E1D
.text:00415ED7 ; ---------------------------------------------------------------------------
.text:00415ED7
.text:00415ED7 loc_415ED7:                             ; CODE XREF: __quicksort+244↑j
.text:00415ED7                 mov     edx, [esp+14Ch+arg_8]
.text:00415EDE                 add     ebp, edx
.text:00415EE0                 jmp     loc_415D80
.text:00415EE5 ; ---------------------------------------------------------------------------
.text:00415EE5
.text:00415EE5 loc_415EE5:                             ; CODE XREF: __quicksort+20E↑j
.text:00415EE5                 mov     esi, [esp+14Ch+arg_8]
.text:00415EEC                 mov     ebx, [esp+14Ch+var_130]
.text:00415EF0                 mov     ecx, [esp+14Ch+var_128]
.text:00415EF4
.text:00415EF4 loc_415EF4:                             ; CODE XREF: __quicksort+3B1↓j
.text:00415EF4                 movzx   edx, byte ptr [ebx]
.text:00415EF7                 movzx   eax, byte ptr [ecx]
.text:00415EFA                 mov     [ebx], al
.text:00415EFC                 inc     ebx
.text:00415EFD                 mov     [ecx], dl
.text:00415EFF                 inc     ecx
.text:00415F00                 dec     esi
.text:00415F01                 jnz     short loc_415EF4
.text:00415F03                 mov     ecx, [esp+14Ch+var_124]
.text:00415F07                 mov     esi, [esp+14Ch+var_130]
.text:00415F0B                 mov     [esp+14Ch+var_148], ecx
.text:00415F0F                 mov     [esp+14Ch+var_14C], esi
.text:00415F12                 call    [esp+14Ch+arg_C]
.text:00415F19                 test    eax, eax
.text:00415F1B                 jns     loc_415D64
.text:00415F21                 mov     esi, [esp+14Ch+arg_8]
.text:00415F28                 mov     ebx, [esp+14Ch+var_130]
.text:00415F2C                 mov     ecx, [esp+14Ch+var_124]
.text:00415F30
.text:00415F30 loc_415F30:                             ; CODE XREF: __quicksort+3ED↓j
.text:00415F30                 movzx   edx, byte ptr [ebx]
.text:00415F33                 movzx   eax, byte ptr [ecx]
.text:00415F36                 mov     [ebx], al
.text:00415F38                 inc     ebx
.text:00415F39                 mov     [ecx], dl
.text:00415F3B                 inc     ecx
.text:00415F3C                 dec     esi
.text:00415F3D                 jnz     short loc_415F30
.text:00415F3F                 jmp     loc_415D64
.text:00415F44 ; ---------------------------------------------------------------------------
.text:00415F44
.text:00415F44 loc_415F44:                             ; CODE XREF: __quicksort+1F0↑j
.text:00415F44                 mov     esi, [esp+14Ch+arg_8]
.text:00415F4B                 mov     ebx, [esp+14Ch+var_130]
.text:00415F4F                 mov     ecx, [esp+14Ch+var_124]
.text:00415F53
.text:00415F53 loc_415F53:                             ; CODE XREF: __quicksort+410↓j
.text:00415F53                 movzx   edx, byte ptr [ebx]
.text:00415F56                 movzx   eax, byte ptr [ecx]
.text:00415F59                 mov     [ebx], al
.text:00415F5B                 inc     ebx
.text:00415F5C                 mov     [ecx], dl
.text:00415F5E                 inc     ecx
.text:00415F5F                 dec     esi
.text:00415F60                 jnz     short loc_415F53
.text:00415F62                 jmp     loc_415D46
.text:00415F62 __quicksort     endp
.text:00415F62
.text:00415F62 ; ---------------------------------------------------------------------------
.text:00415F67                 align 10h
.text:00415F70
.text:00415F70 ; =============== S U B R O U T I N E =======================================
.text:00415F70
.text:00415F70 ; Attributes: info_from_lumina
.text:00415F70
.text:00415F70 _sysconf        proc near               ; CODE XREF: sub_413C00+F7↑p
.text:00415F70                                         ; sub_413C00+11E↑p
.text:00415F70
.text:00415F70 arg_0           = dword ptr  4
.text:00415F70
.text:00415F70                 sub     esp, 0Ch
.text:00415F73                 mov     eax, [esp+0Ch+arg_0]
.text:00415F77                 cmp     eax, 83h        ; switch 132 cases
.text:00415F7C                 ja      def_415F82      ; jumptable 67026652 default case, cases 50,56
.text:00415F7C                                         ; jumptable 00415F82 default case, cases 50,56
.text:00415F82                 jmp     ds:jpt_415F82[eax*4] ; switch jump
.text:00415F82 ; ---------------------------------------------------------------------------
.text:00415F89                 align 4
.text:00415F8C jpt_415F82      dd offset loc_4161C4, offset loc_4161C4, offset loc_4161C4
.text:00415F8C                                         ; DATA XREF: _sysconf+12↑r
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C ; jump table for switch statement
.text:00415F8C                 dd offset loc_4161CB, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_416278, offset loc_4161B0
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_4161E7, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset def_415F82
.text:00415F8C                 dd offset loc_41628C, offset loc_4161EE, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset def_415F82
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_4161F5, offset loc_4161F5, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_4161FC
.text:00415F8C                 dd offset loc_416204, offset loc_41620C, offset loc_416214
.text:00415F8C                 dd offset loc_41622A, offset loc_41621C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_416223
.text:00415F8C                 dd offset loc_416250, offset loc_41625A, offset loc_41622A
.text:00415F8C                 dd offset loc_416231, offset loc_416238, offset loc_416238
.text:00415F8C                 dd offset loc_41623F, offset loc_416249, offset loc_416264
.text:00415F8C                 dd offset loc_416250, offset loc_41625A, offset loc_416264
.text:00415F8C                 dd offset loc_41626E, offset loc_416278, offset loc_4161B0
.text:00415F8C                 dd offset loc_4161B0, offset loc_416282, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:00415F8C                 dd offset loc_41628C, offset loc_41628C, offset loc_41628C
.text:0041619C ; ---------------------------------------------------------------------------
.text:0041619C
.text:0041619C def_415F82:                             ; CODE XREF: _sysconf+C↑j
.text:0041619C                                         ; _sysconf+12↑j
.text:0041619C                                         ; DATA XREF: ...
.text:0041619C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0041619C                                         ; jumptable 00415F82 default case, cases 50,56
.text:004161A1                 mov     dword ptr [eax], 16h
.text:004161A7                 mov     esi, esi
.text:004161A9                 lea     edi, [edi+0]
.text:004161B0
.text:004161B0 loc_4161B0:                             ; CODE XREF: _sysconf+12↑j
.text:004161B0                                         ; _sysconf+327↓j
.text:004161B0                                         ; DATA XREF: ...
.text:004161B0                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:004161B0                                         ; jumptable 00415F82 cases 41,116,117
.text:004161B5                 lea     esi, [esi+0]
.text:004161B9                 lea     edi, [edi+0]
.text:004161C0
.text:004161C0 loc_4161C0:                             ; CODE XREF: _sysconf+259↓j
.text:004161C0                                         ; _sysconf+26C↓j ...
.text:004161C0                 add     esp, 0Ch
.text:004161C3                 retn
.text:004161C4 ; ---------------------------------------------------------------------------
.text:004161C4
.text:004161C4 loc_4161C4:                             ; CODE XREF: _sysconf+12↑j
.text:004161C4                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161C4                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:004161C4                                         ; jumptable 00415F82 cases 0-2
.text:004161C9                 jmp     short loc_4161C0
.text:004161CB ; ---------------------------------------------------------------------------
.text:004161CB
.text:004161CB loc_4161CB:                             ; CODE XREF: _sysconf+12↑j
.text:004161CB                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161CB                 call    sub_416A40      ; jumptable 67026652 case 6
.text:004161CB                                         ; jumptable 00415F82 case 6
.text:004161D0                 cmp     eax, 6
.text:004161D3                 mov     edx, 6
.text:004161D8                 jg      short loc_4161DE
.text:004161DA
.text:004161DA loc_4161DA:                             ; CODE XREF: _sysconf+275↓j
.text:004161DA                 mov     eax, edx
.text:004161DC                 jmp     short loc_4161C0
.text:004161DE ; ---------------------------------------------------------------------------
.text:004161DE
.text:004161DE loc_4161DE:                             ; CODE XREF: _sysconf+268↑j
.text:004161DE                 call    sub_416A40
.text:004161E3                 mov     edx, eax
.text:004161E5                 jmp     short loc_4161DA
.text:004161E7 ; ---------------------------------------------------------------------------
.text:004161E7
.text:004161E7 loc_4161E7:                             ; CODE XREF: _sysconf+12↑j
.text:004161E7                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161E7                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:004161E7                                         ; jumptable 00415F82 case 45
.text:004161EC                 jmp     short loc_4161C0
.text:004161EE ; ---------------------------------------------------------------------------
.text:004161EE
.text:004161EE loc_4161EE:                             ; CODE XREF: _sysconf+12↑j
.text:004161EE                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161EE                 mov     eax, 1          ; jumptable 67026652 case 52
.text:004161EE                                         ; jumptable 00415F82 case 52
.text:004161F3                 jmp     short loc_4161C0
.text:004161F5 ; ---------------------------------------------------------------------------
.text:004161F5
.text:004161F5 loc_4161F5:                             ; CODE XREF: _sysconf+12↑j
.text:004161F5                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161F5                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:004161F5                                         ; jumptable 00415F82 cases 69,70
.text:004161FA                 jmp     short loc_4161C0
.text:004161FC ; ---------------------------------------------------------------------------
.text:004161FC
.text:004161FC loc_4161FC:                             ; CODE XREF: _sysconf+12↑j
.text:004161FC                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:004161FC                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:004161FC                                         ; jumptable 00415F82 case 83
.text:004161FF                 jmp     sub_416930
.text:00416204 ; ---------------------------------------------------------------------------
.text:00416204
.text:00416204 loc_416204:                             ; CODE XREF: _sysconf+12↑j
.text:00416204                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416204                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:00416204                                         ; jumptable 00415F82 case 84
.text:00416207                 jmp     sub_4168E0
.text:0041620C ; ---------------------------------------------------------------------------
.text:0041620C
.text:0041620C loc_41620C:                             ; CODE XREF: _sysconf+12↑j
.text:0041620C                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041620C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0041620C                                         ; jumptable 00415F82 case 85
.text:0041620F                 jmp     sub_416980
.text:00416214 ; ---------------------------------------------------------------------------
.text:00416214
.text:00416214 loc_416214:                             ; CODE XREF: _sysconf+12↑j
.text:00416214                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416214                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:00416214                                         ; jumptable 00415F82 case 86
.text:00416217                 jmp     sub_4169E0
.text:0041621C ; ---------------------------------------------------------------------------
.text:0041621C
.text:0041621C loc_41621C:                             ; CODE XREF: _sysconf+12↑j
.text:0041621C                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041621C                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0041621C                                         ; jumptable 00415F82 case 88
.text:00416221                 jmp     short loc_4161C0
.text:00416223 ; ---------------------------------------------------------------------------
.text:00416223
.text:00416223 loc_416223:                             ; CODE XREF: _sysconf+12↑j
.text:00416223                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416223                 mov     eax, 8          ; jumptable 67026652 case 101
.text:00416223                                         ; jumptable 00415F82 case 101
.text:00416228                 jmp     short loc_4161C0
.text:0041622A ; ---------------------------------------------------------------------------
.text:0041622A
.text:0041622A loc_41622A:                             ; CODE XREF: _sysconf+12↑j
.text:0041622A                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041622A                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0041622A                                         ; jumptable 00415F82 cases 87,104
.text:0041622F                 jmp     short loc_4161C0
.text:00416231 ; ---------------------------------------------------------------------------
.text:00416231
.text:00416231 loc_416231:                             ; CODE XREF: _sysconf+12↑j
.text:00416231                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416231                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:00416231                                         ; jumptable 00415F82 case 105
.text:00416236                 jmp     short loc_4161C0
.text:00416238 ; ---------------------------------------------------------------------------
.text:00416238
.text:00416238 loc_416238:                             ; CODE XREF: _sysconf+12↑j
.text:00416238                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416238                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:00416238                                         ; jumptable 00415F82 cases 106,107
.text:0041623D                 jmp     short loc_4161C0
.text:0041623F ; ---------------------------------------------------------------------------
.text:0041623F
.text:0041623F loc_41623F:                             ; CODE XREF: _sysconf+12↑j
.text:0041623F                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041623F                 mov     eax, 2          ; jumptable 67026652 case 108
.text:0041623F                                         ; jumptable 00415F82 case 108
.text:00416244                 jmp     loc_4161C0
.text:00416249 ; ---------------------------------------------------------------------------
.text:00416249
.text:00416249 loc_416249:                             ; CODE XREF: _sysconf+12↑j
.text:00416249                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416249                 xor     eax, eax        ; jumptable 67026652 case 109
.text:00416249                                         ; jumptable 00415F82 case 109
.text:0041624B                 jmp     loc_4161C0
.text:00416250 ; ---------------------------------------------------------------------------
.text:00416250
.text:00416250 loc_416250:                             ; CODE XREF: _sysconf+12↑j
.text:00416250                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416250                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:00416250                                         ; jumptable 00415F82 cases 102,111
.text:00416255                 jmp     loc_4161C0
.text:0041625A ; ---------------------------------------------------------------------------
.text:0041625A
.text:0041625A loc_41625A:                             ; CODE XREF: _sysconf+12↑j
.text:0041625A                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041625A                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0041625A                                         ; jumptable 00415F82 cases 103,112
.text:0041625F                 jmp     loc_4161C0
.text:00416264 ; ---------------------------------------------------------------------------
.text:00416264
.text:00416264 loc_416264:                             ; CODE XREF: _sysconf+12↑j
.text:00416264                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416264                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:00416264                                         ; jumptable 00415F82 cases 110,113
.text:00416269                 jmp     loc_4161C0
.text:0041626E ; ---------------------------------------------------------------------------
.text:0041626E
.text:0041626E loc_41626E:                             ; CODE XREF: _sysconf+12↑j
.text:0041626E                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041626E                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0041626E                                         ; jumptable 00415F82 case 114
.text:00416273                 jmp     loc_4161C0
.text:00416278 ; ---------------------------------------------------------------------------
.text:00416278
.text:00416278 loc_416278:                             ; CODE XREF: _sysconf+12↑j
.text:00416278                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416278                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:00416278                                         ; jumptable 00415F82 cases 40,115
.text:0041627D                 jmp     loc_4161C0
.text:00416282 ; ---------------------------------------------------------------------------
.text:00416282
.text:00416282 loc_416282:                             ; CODE XREF: _sysconf+12↑j
.text:00416282                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:00416282                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:00416282                                         ; jumptable 00415F82 case 118
.text:00416287                 jmp     loc_4161C0
.text:0041628C ; ---------------------------------------------------------------------------
.text:0041628C
.text:0041628C loc_41628C:                             ; CODE XREF: _sysconf+12↑j
.text:0041628C                                         ; DATA XREF: _sysconf:jpt_415F82↑o
.text:0041628C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0041628C                                         ; jumptable 00415F82 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00416291                 mov     dword ptr [eax], 28h ; '('
.text:00416297                 jmp     loc_4161B0      ; jumptable 67026652 cases 41,116,117
.text:00416297 _sysconf        endp                    ; jumptable 00415F82 cases 41,116,117
.text:00416297
.text:00416297 ; ---------------------------------------------------------------------------
.text:0041629C                 align 10h
.text:004162A0
.text:004162A0 ; =============== S U B R O U T I N E =======================================
.text:004162A0
.text:004162A0
.text:004162A0 sub_4162A0      proc near               ; CODE XREF: sub_413D80+4F↑p
.text:004162A0
.text:004162A0 var_8           = dword ptr -8
.text:004162A0 var_4           = dword ptr -4
.text:004162A0 arg_0           = dword ptr  4
.text:004162A0 arg_4           = dword ptr  8
.text:004162A0 arg_8           = dword ptr  0Ch
.text:004162A0
.text:004162A0                 sub     esp, 8
.text:004162A3                 mov     ecx, [esp+8+arg_0]
.text:004162A7                 mov     [esp+8+var_8], ebx
.text:004162AA                 mov     ebx, [esp+8+arg_8]
.text:004162AE                 mov     [esp+8+var_4], esi
.text:004162B2                 mov     edx, [esp+8+arg_4]
.text:004162B6                 mov     eax, ebx
.text:004162B8                 and     eax, 7
.text:004162BB                 cmp     eax, 7          ; switch 8 cases
.text:004162BE                 ja      short def_4162C0 ; jumptable 004162C0 default case
.text:004162C0                 jmp     ds:jpt_4162C0[eax*4] ; switch jump
.text:004162C0 ; ---------------------------------------------------------------------------
.text:004162C7                 align 4
.text:004162C8 jpt_4162C0      dd offset loc_41634A    ; DATA XREF: sub_4162A0+20↑r
.text:004162C8                 dd offset loc_416351    ; jump table for switch statement
.text:004162C8                 dd offset loc_4162E8
.text:004162C8                 dd offset loc_416359
.text:004162C8                 dd offset loc_416366
.text:004162C8                 dd offset loc_416373
.text:004162C8                 dd offset loc_416380
.text:004162C8                 dd offset loc_41638D
.text:004162E8 ; ---------------------------------------------------------------------------
.text:004162E8
.text:004162E8 loc_4162E8:                             ; CODE XREF: sub_4162A0+20↑j
.text:004162E8                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:004162E8                 mov     eax, [edx]      ; jumptable 004162C0 case 2
.text:004162EA                 sub     ecx, 1Ch
.text:004162ED                 add     ebx, 6
.text:004162F0                 sub     edx, 18h
.text:004162F3                 lea     esi, [esi+0]
.text:004162F9                 lea     edi, [edi+0]
.text:00416300
.text:00416300 loc_416300:                             ; CODE XREF: sub_4162A0+A8↓j
.text:00416300                 mov     esi, [edx+1Ch]
.text:00416303                 add     edx, 20h ; ' '
.text:00416306                 mov     [ecx+1Ch], eax
.text:00416309                 add     ecx, 20h ; ' '
.text:0041630C                 sub     ebx, 8
.text:0041630F                 jnz     short def_4162C0 ; jumptable 004162C0 default case
.text:00416311                 mov     [ecx], esi
.text:00416313                 mov     ebx, [esp+8+var_8]
.text:00416316                 mov     esi, [esp+8+var_4]
.text:0041631A                 add     esp, 8
.text:0041631D                 retn
.text:0041631D ; ---------------------------------------------------------------------------
.text:0041631E                 align 10h
.text:00416320
.text:00416320 def_4162C0:                             ; CODE XREF: sub_4162A0+1E↑j
.text:00416320                                         ; sub_4162A0+6F↑j ...
.text:00416320                 mov     eax, [edx]      ; jumptable 004162C0 default case
.text:00416322                 mov     [ecx], esi
.text:00416324
.text:00416324 loc_416324:                             ; CODE XREF: sub_4162A0+AF↓j
.text:00416324                 mov     esi, [edx+4]
.text:00416327                 mov     [ecx+4], eax
.text:0041632A
.text:0041632A loc_41632A:                             ; CODE XREF: sub_4162A0+F6↓j
.text:0041632A                 mov     eax, [edx+8]
.text:0041632D                 mov     [ecx+8], esi
.text:00416330
.text:00416330 loc_416330:                             ; CODE XREF: sub_4162A0+EB↓j
.text:00416330                 mov     esi, [edx+0Ch]
.text:00416333                 mov     [ecx+0Ch], eax
.text:00416336
.text:00416336 loc_416336:                             ; CODE XREF: sub_4162A0+DE↓j
.text:00416336                 mov     eax, [edx+10h]
.text:00416339                 mov     [ecx+10h], esi
.text:0041633C
.text:0041633C loc_41633C:                             ; CODE XREF: sub_4162A0+D1↓j
.text:0041633C                 mov     esi, [edx+14h]
.text:0041633F                 mov     [ecx+14h], eax
.text:00416342
.text:00416342 loc_416342:                             ; CODE XREF: sub_4162A0+C4↓j
.text:00416342                 mov     eax, [edx+18h]
.text:00416345                 mov     [ecx+18h], esi
.text:00416348                 jmp     short loc_416300
.text:0041634A ; ---------------------------------------------------------------------------
.text:0041634A
.text:0041634A loc_41634A:                             ; CODE XREF: sub_4162A0+20↑j
.text:0041634A                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:0041634A                 mov     eax, [edx]      ; jumptable 004162C0 case 0
.text:0041634C                 sub     ecx, 4
.text:0041634F                 jmp     short loc_416324
.text:00416351 ; ---------------------------------------------------------------------------
.text:00416351
.text:00416351 loc_416351:                             ; CODE XREF: sub_4162A0+20↑j
.text:00416351                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:00416351                 mov     esi, [edx]      ; jumptable 004162C0 case 1
.text:00416353                 dec     ebx
.text:00416354                 add     edx, 4
.text:00416357                 jmp     short def_4162C0 ; jumptable 004162C0 default case
.text:00416359 ; ---------------------------------------------------------------------------
.text:00416359
.text:00416359 loc_416359:                             ; CODE XREF: sub_4162A0+20↑j
.text:00416359                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:00416359                 mov     esi, [edx]      ; jumptable 004162C0 case 3
.text:0041635B                 sub     ecx, 18h
.text:0041635E                 add     ebx, 5
.text:00416361                 sub     edx, 14h
.text:00416364                 jmp     short loc_416342
.text:00416366 ; ---------------------------------------------------------------------------
.text:00416366
.text:00416366 loc_416366:                             ; CODE XREF: sub_4162A0+20↑j
.text:00416366                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:00416366                 mov     eax, [edx]      ; jumptable 004162C0 case 4
.text:00416368                 sub     ecx, 14h
.text:0041636B                 add     ebx, 4
.text:0041636E                 sub     edx, 10h
.text:00416371                 jmp     short loc_41633C
.text:00416373 ; ---------------------------------------------------------------------------
.text:00416373
.text:00416373 loc_416373:                             ; CODE XREF: sub_4162A0+20↑j
.text:00416373                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:00416373                 mov     esi, [edx]      ; jumptable 004162C0 case 5
.text:00416375                 sub     ecx, 10h
.text:00416378                 add     ebx, 3
.text:0041637B                 sub     edx, 0Ch
.text:0041637E                 jmp     short loc_416336
.text:00416380 ; ---------------------------------------------------------------------------
.text:00416380
.text:00416380 loc_416380:                             ; CODE XREF: sub_4162A0+20↑j
.text:00416380                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:00416380                 mov     eax, [edx]      ; jumptable 004162C0 case 6
.text:00416382                 sub     ecx, 0Ch
.text:00416385                 add     ebx, 2
.text:00416388                 sub     edx, 8
.text:0041638B                 jmp     short loc_416330
.text:0041638D ; ---------------------------------------------------------------------------
.text:0041638D
.text:0041638D loc_41638D:                             ; CODE XREF: sub_4162A0+20↑j
.text:0041638D                                         ; DATA XREF: sub_4162A0:jpt_4162C0↑o
.text:0041638D                 mov     esi, [edx]      ; jumptable 004162C0 case 7
.text:0041638F                 sub     ecx, 8
.text:00416392                 inc     ebx
.text:00416393                 sub     edx, 4
.text:00416396                 jmp     short loc_41632A
.text:00416396 sub_4162A0      endp
.text:00416396
.text:00416396 ; ---------------------------------------------------------------------------
.text:00416398                 align 10h
.text:004163A0
.text:004163A0 ; =============== S U B R O U T I N E =======================================
.text:004163A0
.text:004163A0
.text:004163A0 sub_4163A0      proc near               ; CODE XREF: sub_413D80+93↑p
.text:004163A0
.text:004163A0 var_1C          = dword ptr -1Ch
.text:004163A0 var_18          = dword ptr -18h
.text:004163A0 var_14          = dword ptr -14h
.text:004163A0 arg_0           = dword ptr  4
.text:004163A0 arg_4           = dword ptr  8
.text:004163A0 arg_8           = dword ptr  0Ch
.text:004163A0
.text:004163A0                 push    ebp
.text:004163A1                 push    edi
.text:004163A2                 push    esi
.text:004163A3                 push    ebx
.text:004163A4                 sub     esp, 0Ch
.text:004163A7                 mov     edx, [esp+1Ch+arg_4]
.text:004163AB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:004163B3                 mov     eax, [esp+1Ch+arg_8]
.text:004163B7                 mov     esi, [esp+1Ch+arg_0]
.text:004163BB                 mov     ecx, edx
.text:004163BD                 and     ecx, 3
.text:004163C0                 and     eax, 3
.text:004163C3                 shl     ecx, 3
.text:004163C6                 and     edx, 0FFFFFFFCh
.text:004163C9                 sub     [esp+1Ch+var_14], ecx
.text:004163CD                 cmp     eax, 1
.text:004163D0                 mov     [esp+1Ch+var_18], ecx
.text:004163D4                 jz      loc_4164C0
.text:004163DA                 cmp     eax, 1
.text:004163DD                 jb      loc_4164B0
.text:004163E3                 cmp     eax, 2
.text:004163E6                 jz      loc_416494
.text:004163EC                 cmp     eax, 3
.text:004163EF                 jz      loc_416483
.text:004163F5
.text:004163F5 loc_4163F5:                             ; CODE XREF: sub_4163A0+C7↓j
.text:004163F5                                         ; sub_4163A0+12C↓j
.text:004163F5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004163FA                 mov     eax, edi
.text:004163FC                 mov     ebx, [edx]
.text:004163FE                 shr     ebp, cl
.text:00416400                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00416405                 shl     eax, cl
.text:00416407                 or      ebp, eax
.text:00416409                 mov     [esi], ebp
.text:0041640B
.text:0041640B loc_41640B:                             ; CODE XREF: sub_4163A0+11B↓j
.text:0041640B                 mov     ecx, [edx+4]
.text:0041640E                 mov     ebp, ebx
.text:00416410                 mov     [esp+1Ch+var_1C], ecx
.text:00416413                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00416418                 shr     edi, cl
.text:0041641A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041641F                 shl     ebp, cl
.text:00416421                 or      edi, ebp
.text:00416423                 mov     [esi+4], edi
.text:00416426
.text:00416426 loc_416426:                             ; CODE XREF: sub_4163A0+F2↓j
.text:00416426                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041642B                 mov     edi, [esp+1Ch+var_1C]
.text:0041642E                 mov     ebp, [edx+8]
.text:00416431                 shr     ebx, cl
.text:00416433                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00416438                 shl     edi, cl
.text:0041643A                 or      ebx, edi
.text:0041643C                 mov     [esi+8], ebx
.text:0041643F
.text:0041643F loc_41643F:                             ; CODE XREF: sub_4163A0+107↓j
.text:0041643F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00416444                 mov     ebx, ebp
.text:00416446                 mov     edi, [edx+0Ch]
.text:00416449                 add     edx, 10h
.text:0041644C                 shr     [esp+1Ch+var_1C], cl
.text:0041644F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00416454                 shl     ebx, cl
.text:00416456                 or      [esp+1Ch+var_1C], ebx
.text:00416459                 mov     ebx, [esp+1Ch+var_1C]
.text:0041645C                 mov     [esi+0Ch], ebx
.text:0041645F                 add     esi, 10h
.text:00416462                 sub     [esp+1Ch+arg_8], 4
.text:00416467                 jnz     short loc_4163F5
.text:00416469                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041646E                 shr     ebp, cl
.text:00416470                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00416475                 shl     edi, cl
.text:00416477                 or      ebp, edi
.text:00416479                 mov     [esi], ebp
.text:0041647B                 add     esp, 0Ch
.text:0041647E                 pop     ebx
.text:0041647F                 pop     esi
.text:00416480                 pop     edi
.text:00416481                 pop     ebp
.text:00416482                 retn
.text:00416483 ; ---------------------------------------------------------------------------
.text:00416483
.text:00416483 loc_416483:                             ; CODE XREF: sub_4163A0+4F↑j
.text:00416483                 inc     [esp+1Ch+arg_8]
.text:00416487                 sub     esi, 8
.text:0041648A                 mov     eax, [edx+4]
.text:0041648D                 mov     ebx, [edx]
.text:0041648F                 mov     [esp+1Ch+var_1C], eax
.text:00416492                 jmp     short loc_416426
.text:00416494 ; ---------------------------------------------------------------------------
.text:00416494
.text:00416494 loc_416494:                             ; CODE XREF: sub_4163A0+46↑j
.text:00416494                 add     [esp+1Ch+arg_8], 2
.text:00416499                 sub     esi, 0Ch
.text:0041649C                 mov     ecx, [edx]
.text:0041649E                 mov     ebp, [edx+4]
.text:004164A1                 sub     edx, 4
.text:004164A4                 mov     [esp+1Ch+var_1C], ecx
.text:004164A7                 jmp     short loc_41643F
.text:004164A7 ; ---------------------------------------------------------------------------
.text:004164A9                 align 10h
.text:004164B0
.text:004164B0 loc_4164B0:                             ; CODE XREF: sub_4163A0+3D↑j
.text:004164B0                 mov     edi, [edx]
.text:004164B2                 sub     esi, 4
.text:004164B5                 mov     ebx, [edx+4]
.text:004164B8                 add     edx, 4
.text:004164BB                 jmp     loc_41640B
.text:004164C0 ; ---------------------------------------------------------------------------
.text:004164C0
.text:004164C0 loc_4164C0:                             ; CODE XREF: sub_4163A0+34↑j
.text:004164C0                 dec     [esp+1Ch+arg_8]
.text:004164C4                 mov     ebp, [edx]
.text:004164C6                 mov     edi, [edx+4]
.text:004164C9                 add     edx, 8
.text:004164CC                 jmp     loc_4163F5
.text:004164CC sub_4163A0      endp
.text:004164CC
.text:004164D1 ; ---------------------------------------------------------------------------
.text:004164D1                 jmp     short loc_4164E0
.text:004164D1 ; ---------------------------------------------------------------------------
.text:004164D3                 align 10h
.text:004164E0
.text:004164E0 loc_4164E0:                             ; CODE XREF: .text:004164D1↑j
.text:004164E0                 sub     esp, 8
.text:004164E3                 mov     ecx, [esp+0Ch]
.text:004164E7                 mov     [esp+4], esi
.text:004164EB                 mov     esi, [esp+14h]
.text:004164EF                 mov     [esp], ebx
.text:004164F2                 mov     edx, [esp+10h]
.text:004164F6                 mov     eax, esi
.text:004164F8                 and     eax, 7
.text:004164FB                 cmp     eax, 7          ; switch 8 cases
.text:004164FE                 ja      short def_416500 ; jumptable 00416500 default case
.text:00416500                 jmp     ds:jpt_416500[eax*4] ; switch jump
.text:00416500 ; ---------------------------------------------------------------------------
.text:00416507                 align 4
.text:00416508 jpt_416500      dd offset loc_41658C    ; DATA XREF: .text:00416500↑r
.text:00416508                 dd offset loc_416597    ; jump table for switch statement
.text:00416508                 dd offset loc_416528
.text:00416508                 dd offset loc_4165A3
.text:00416508                 dd offset loc_4165B1
.text:00416508                 dd offset loc_4165BF
.text:00416508                 dd offset loc_4165CD
.text:00416508                 dd offset loc_4165DB
.text:00416528 ; ---------------------------------------------------------------------------
.text:00416528
.text:00416528 loc_416528:                             ; CODE XREF: .text:00416500↑j
.text:00416528                                         ; DATA XREF: .text:jpt_416500↑o
.text:00416528                 sub     edx, 8          ; jumptable 00416500 case 2
.text:0041652B                 sub     ecx, 4
.text:0041652E                 mov     eax, [edx+4]
.text:00416531                 add     esi, 6
.text:00416534                 lea     esi, [esi+0]
.text:0041653A                 lea     edi, [edi+0]
.text:00416540
.text:00416540 loc_416540:                             ; CODE XREF: .text:0041658A↓j
.text:00416540                 mov     ebx, [edx]
.text:00416542                 sub     edx, 20h ; ' '
.text:00416545                 mov     [ecx], eax
.text:00416547                 sub     ecx, 20h ; ' '
.text:0041654A                 sub     esi, 8
.text:0041654D                 jnz     short def_416500 ; jumptable 00416500 default case
.text:0041654F                 mov     [ecx+1Ch], ebx
.text:00416552                 mov     ebx, [esp]
.text:00416555                 mov     esi, [esp+4]
.text:00416559                 add     esp, 8
.text:0041655C                 retn
.text:0041655C ; ---------------------------------------------------------------------------
.text:0041655D                 align 10h
.text:00416560
.text:00416560 def_416500:                             ; CODE XREF: .text:004164FE↑j
.text:00416560                                         ; .text:0041654D↑j ...
.text:00416560                 mov     eax, [edx+1Ch]  ; jumptable 00416500 default case
.text:00416563                 mov     [ecx+1Ch], ebx
.text:00416566
.text:00416566 loc_416566:                             ; CODE XREF: .text:00416595↓j
.text:00416566                 mov     ebx, [edx+18h]
.text:00416569                 mov     [ecx+18h], eax
.text:0041656C
.text:0041656C loc_41656C:                             ; CODE XREF: .text:004165E5↓j
.text:0041656C                 mov     eax, [edx+14h]
.text:0041656F                 mov     [ecx+14h], ebx
.text:00416572
.text:00416572 loc_416572:                             ; CODE XREF: .text:004165D9↓j
.text:00416572                 mov     ebx, [edx+10h]
.text:00416575                 mov     [ecx+10h], eax
.text:00416578
.text:00416578 loc_416578:                             ; CODE XREF: .text:004165CB↓j
.text:00416578                 mov     eax, [edx+0Ch]
.text:0041657B                 mov     [ecx+0Ch], ebx
.text:0041657E
.text:0041657E loc_41657E:                             ; CODE XREF: .text:004165BD↓j
.text:0041657E                 mov     ebx, [edx+8]
.text:00416581                 mov     [ecx+8], eax
.text:00416584
.text:00416584 loc_416584:                             ; CODE XREF: .text:004165AF↓j
.text:00416584                 mov     eax, [edx+4]
.text:00416587                 mov     [ecx+4], ebx
.text:0041658A                 jmp     short loc_416540
.text:0041658C ; ---------------------------------------------------------------------------
.text:0041658C
.text:0041658C loc_41658C:                             ; CODE XREF: .text:00416500↑j
.text:0041658C                                         ; DATA XREF: .text:jpt_416500↑o
.text:0041658C                 sub     edx, 20h ; ' '  ; jumptable 00416500 case 0
.text:0041658F                 sub     ecx, 1Ch
.text:00416592                 mov     eax, [edx+1Ch]
.text:00416595                 jmp     short loc_416566
.text:00416597 ; ---------------------------------------------------------------------------
.text:00416597
.text:00416597 loc_416597:                             ; CODE XREF: .text:00416500↑j
.text:00416597                                         ; DATA XREF: .text:jpt_416500↑o
.text:00416597                 sub     edx, 24h ; '$'  ; jumptable 00416500 case 1
.text:0041659A                 sub     ecx, 20h ; ' '
.text:0041659D                 mov     ebx, [edx+20h]
.text:004165A0                 dec     esi
.text:004165A1                 jmp     short def_416500 ; jumptable 00416500 default case
.text:004165A3 ; ---------------------------------------------------------------------------
.text:004165A3
.text:004165A3 loc_4165A3:                             ; CODE XREF: .text:00416500↑j
.text:004165A3                                         ; DATA XREF: .text:jpt_416500↑o
.text:004165A3                 sub     edx, 0Ch        ; jumptable 00416500 case 3
.text:004165A6                 sub     ecx, 8
.text:004165A9                 mov     ebx, [edx+8]
.text:004165AC                 add     esi, 5
.text:004165AF                 jmp     short loc_416584
.text:004165B1 ; ---------------------------------------------------------------------------
.text:004165B1
.text:004165B1 loc_4165B1:                             ; CODE XREF: .text:00416500↑j
.text:004165B1                                         ; DATA XREF: .text:jpt_416500↑o
.text:004165B1                 sub     edx, 10h        ; jumptable 00416500 case 4
.text:004165B4                 sub     ecx, 0Ch
.text:004165B7                 mov     eax, [edx+0Ch]
.text:004165BA                 add     esi, 4
.text:004165BD                 jmp     short loc_41657E
.text:004165BF ; ---------------------------------------------------------------------------
.text:004165BF
.text:004165BF loc_4165BF:                             ; CODE XREF: .text:00416500↑j
.text:004165BF                                         ; DATA XREF: .text:jpt_416500↑o
.text:004165BF                 sub     edx, 14h        ; jumptable 00416500 case 5
.text:004165C2                 sub     ecx, 10h
.text:004165C5                 mov     ebx, [edx+10h]
.text:004165C8                 add     esi, 3
.text:004165CB                 jmp     short loc_416578
.text:004165CD ; ---------------------------------------------------------------------------
.text:004165CD
.text:004165CD loc_4165CD:                             ; CODE XREF: .text:00416500↑j
.text:004165CD                                         ; DATA XREF: .text:jpt_416500↑o
.text:004165CD                 sub     edx, 18h        ; jumptable 00416500 case 6
.text:004165D0                 sub     ecx, 14h
.text:004165D3                 mov     eax, [edx+14h]
.text:004165D6                 add     esi, 2
.text:004165D9                 jmp     short loc_416572
.text:004165DB ; ---------------------------------------------------------------------------
.text:004165DB
.text:004165DB loc_4165DB:                             ; CODE XREF: .text:00416500↑j
.text:004165DB                                         ; DATA XREF: .text:jpt_416500↑o
.text:004165DB                 sub     edx, 1Ch        ; jumptable 00416500 case 7
.text:004165DE                 sub     ecx, 18h
.text:004165E1                 mov     ebx, [edx+18h]
.text:004165E4                 inc     esi
.text:004165E5                 jmp     short loc_41656C
.text:004165E5 ; ---------------------------------------------------------------------------
.text:004165E7                 align 10h
.text:004165F0                 push    ebp
.text:004165F1                 push    edi
.text:004165F2                 push    esi
.text:004165F3                 push    ebx
.text:004165F4                 sub     esp, 8
.text:004165F7                 mov     edx, [esp+20h]
.text:004165FB                 mov     dword ptr [esp+4], 20h ; ' '
.text:00416603                 mov     eax, [esp+24h]
.text:00416607                 mov     ecx, edx
.text:00416609                 and     ecx, 3
.text:0041660C                 and     eax, 3
.text:0041660F                 shl     ecx, 3
.text:00416612                 sub     [esp+4], ecx
.text:00416616                 and     edx, 0FFFFFFFCh
.text:00416619                 add     edx, 4
.text:0041661C                 mov     [esp], ecx
.text:0041661F                 cmp     eax, 1
.text:00416622                 jz      loc_416718
.text:00416628                 cmp     eax, 1
.text:0041662B                 jb      loc_416705
.text:00416631                 cmp     eax, 2
.text:00416634                 jz      loc_4166F0
.text:0041663A                 cmp     eax, 3
.text:0041663D                 jz      loc_4166DC
.text:00416643
.text:00416643 loc_416643:                             ; CODE XREF: .text:004166BC↓j
.text:00416643                                         ; .text:0041672A↓j
.text:00416643                 movzx   ecx, byte ptr [esp]
.text:00416647                 mov     eax, edi
.text:00416649                 mov     ebx, [esp+1Ch]
.text:0041664D                 mov     esi, [edx+0Ch]
.text:00416650                 shr     eax, cl
.text:00416652                 movzx   ecx, byte ptr [esp+4]
.text:00416657                 shl     ebp, cl
.text:00416659                 or      eax, ebp
.text:0041665B                 mov     [ebx+0Ch], eax
.text:0041665E
.text:0041665E loc_41665E:                             ; CODE XREF: .text:00416713↓j
.text:0041665E                 movzx   ecx, byte ptr [esp]
.text:00416662                 mov     ebp, esi
.text:00416664                 mov     ebx, [edx+8]
.text:00416667                 shr     ebp, cl
.text:00416669                 movzx   ecx, byte ptr [esp+4]
.text:0041666E                 shl     edi, cl
.text:00416670                 or      ebp, edi
.text:00416672                 mov     edi, [esp+1Ch]
.text:00416676                 mov     [edi+8], ebp
.text:00416679
.text:00416679 loc_416679:                             ; CODE XREF: .text:004166EE↓j
.text:00416679                 movzx   ecx, byte ptr [esp]
.text:0041667D                 mov     edi, ebx
.text:0041667F                 mov     ebp, [edx+4]
.text:00416682                 shr     edi, cl
.text:00416684                 movzx   ecx, byte ptr [esp+4]
.text:00416689                 shl     esi, cl
.text:0041668B                 or      edi, esi
.text:0041668D                 mov     esi, [esp+1Ch]
.text:00416691                 mov     [esi+4], edi
.text:00416694
.text:00416694 loc_416694:                             ; CODE XREF: .text:00416703↓j
.text:00416694                 movzx   ecx, byte ptr [esp]
.text:00416698                 mov     esi, ebp
.text:0041669A                 mov     edi, [edx]
.text:0041669C                 sub     edx, 10h
.text:0041669F                 shr     esi, cl
.text:004166A1                 movzx   ecx, byte ptr [esp+4]
.text:004166A6                 shl     ebx, cl
.text:004166A8                 or      esi, ebx
.text:004166AA                 mov     ebx, [esp+1Ch]
.text:004166AE                 mov     [ebx], esi
.text:004166B0                 sub     ebx, 10h
.text:004166B3                 sub     dword ptr [esp+24h], 4
.text:004166B8                 mov     [esp+1Ch], ebx
.text:004166BC                 jnz     short loc_416643
.text:004166BE                 movzx   ecx, byte ptr [esp]
.text:004166C2                 mov     edx, [esp+1Ch]
.text:004166C6                 shr     edi, cl
.text:004166C8                 movzx   ecx, byte ptr [esp+4]
.text:004166CD                 shl     ebp, cl
.text:004166CF                 or      edi, ebp
.text:004166D1                 mov     [edx+0Ch], edi
.text:004166D4                 add     esp, 8
.text:004166D7                 pop     ebx
.text:004166D8                 pop     esi
.text:004166D9                 pop     edi
.text:004166DA                 pop     ebp
.text:004166DB                 retn
.text:004166DC ; ---------------------------------------------------------------------------
.text:004166DC
.text:004166DC loc_4166DC:                             ; CODE XREF: .text:0041663D↑j
.text:004166DC                 sub     dword ptr [esp+1Ch], 8
.text:004166E1                 sub     edx, 10h
.text:004166E4                 inc     dword ptr [esp+24h]
.text:004166E8                 mov     esi, [edx+0Ch]
.text:004166EB                 mov     ebx, [edx+8]
.text:004166EE                 jmp     short loc_416679
.text:004166F0 ; ---------------------------------------------------------------------------
.text:004166F0
.text:004166F0 loc_4166F0:                             ; CODE XREF: .text:00416634↑j
.text:004166F0                 sub     dword ptr [esp+1Ch], 4
.text:004166F5                 sub     edx, 0Ch
.text:004166F8                 add     dword ptr [esp+24h], 2
.text:004166FD                 mov     ebx, [edx+8]
.text:00416700                 mov     ebp, [edx+4]
.text:00416703                 jmp     short loc_416694
.text:00416705 ; ---------------------------------------------------------------------------
.text:00416705
.text:00416705 loc_416705:                             ; CODE XREF: .text:0041662B↑j
.text:00416705                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041670A                 sub     edx, 14h
.text:0041670D                 mov     edi, [edx+10h]
.text:00416710                 mov     esi, [edx+0Ch]
.text:00416713                 jmp     loc_41665E
.text:00416718 ; ---------------------------------------------------------------------------
.text:00416718
.text:00416718 loc_416718:                             ; CODE XREF: .text:00416622↑j
.text:00416718                 sub     dword ptr [esp+1Ch], 10h
.text:0041671D                 sub     edx, 18h
.text:00416720                 dec     dword ptr [esp+24h]
.text:00416724                 mov     ebp, [edx+14h]
.text:00416727                 mov     edi, [edx+10h]
.text:0041672A                 jmp     loc_416643
.text:0041672A ; ---------------------------------------------------------------------------
.text:0041672F                 align 10h
.text:00416730
.text:00416730 ; =============== S U B R O U T I N E =======================================
.text:00416730
.text:00416730 ; Attributes: noreturn
.text:00416730
.text:00416730 sub_416730      proc near               ; CODE XREF: .text:00415339↑p
.text:00416730                                         ; sub_416730↓j
.text:00416730                 jmp     short sub_416730
.text:00416730 sub_416730      endp
.text:00416730
.text:00416730 ; ---------------------------------------------------------------------------
.text:00416732                 align 10h
.text:00416740
.text:00416740 ; =============== S U B R O U T I N E =======================================
.text:00416740
.text:00416740
.text:00416740 sub_416740      proc near               ; CODE XREF: .text:00415095↑p
.text:00416740
.text:00416740 FileHandle      = dword ptr -1Ch
.text:00416740 dwFileOffsetLow = dword ptr -18h
.text:00416740 dwFileOffsetHigh= dword ptr -14h
.text:00416740 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00416740 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00416740 var_8           = dword ptr -8
.text:00416740 var_4           = dword ptr -4
.text:00416740 arg_0           = dword ptr  4
.text:00416740
.text:00416740                 sub     esp, 1Ch
.text:00416743                 mov     edx, [esp+1Ch+arg_0]
.text:00416747                 mov     [esp+1Ch+var_4], esi
.text:0041674B                 mov     [esp+1Ch+var_8], ebx
.text:0041674F                 mov     ebx, [edx+10h]
.text:00416752                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00416755                 call    _get_osfhandle
.text:0041675A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041675D                 mov     esi, eax
.text:0041675F                 call    _filelengthi64
.text:00416764                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:00416768                 cdq
.text:00416769                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041676C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00416770                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:00416778                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00416780                 call    UnlockFile
.text:00416785                 sub     esp, 14h
.text:00416788                 mov     ebx, [esp+1Ch+var_8]
.text:0041678C                 mov     esi, [esp+1Ch+var_4]
.text:00416790                 add     esp, 1Ch
.text:00416793                 retn
.text:00416793 sub_416740      endp
.text:00416793
.text:00416793 ; ---------------------------------------------------------------------------
.text:00416794                 align 10h
.text:004167A0
.text:004167A0 ; =============== S U B R O U T I N E =======================================
.text:004167A0
.text:004167A0
.text:004167A0 ; int __cdecl sub_4167A0(int, char *Control)
.text:004167A0 sub_4167A0      proc near               ; CODE XREF: .text:00414F56↑p
.text:004167A0                                         ; .text:00414FA6↑p ...
.text:004167A0
.text:004167A0 Str             = dword ptr -1Ch
.text:004167A0 Val             = dword ptr -18h
.text:004167A0 var_8           = dword ptr -8
.text:004167A0 var_4           = dword ptr -4
.text:004167A0 arg_0           = dword ptr  4
.text:004167A0 Control         = dword ptr  8
.text:004167A0
.text:004167A0                 sub     esp, 1Ch
.text:004167A3                 xor     eax, eax
.text:004167A5                 mov     edx, [esp+1Ch+Control]
.text:004167A9                 mov     [esp+1Ch+var_4], esi
.text:004167AD                 mov     esi, [esp+1Ch+arg_0]
.text:004167B1                 mov     [esp+1Ch+var_8], ebx
.text:004167B5                 mov     ebx, [esi]
.text:004167B7                 test    ebx, ebx
.text:004167B9                 jz      short loc_4167E8
.text:004167BB                 movzx   eax, byte ptr [edx]
.text:004167BE                 test    al, al
.text:004167C0                 jz      short loc_4167E0
.text:004167C2                 cmp     byte ptr [edx+1], 0
.text:004167C6                 jnz     short loc_416820
.text:004167C8                 movzx   ecx, byte ptr [ebx]
.text:004167CB                 mov     edx, ebx
.text:004167CD                 cmp     cl, al
.text:004167CF                 jz      short loc_416812
.text:004167D1                 test    cl, cl
.text:004167D3                 jnz     short loc_4167F4
.text:004167D5                 lea     esi, [esi+0]
.text:004167D9                 lea     edi, [edi+0]
.text:004167E0
.text:004167E0 loc_4167E0:                             ; CODE XREF: sub_4167A0+20↑j
.text:004167E0                                         ; sub_4167A0+74↓j
.text:004167E0                 mov     dword ptr [esi], 0
.text:004167E6
.text:004167E6 loc_4167E6:                             ; CODE XREF: sub_4167A0+7C↓j
.text:004167E6                 mov     eax, ebx
.text:004167E8
.text:004167E8 loc_4167E8:                             ; CODE XREF: sub_4167A0+19↑j
.text:004167E8                 mov     ebx, [esp+1Ch+var_8]
.text:004167EC                 mov     esi, [esp+1Ch+var_4]
.text:004167F0                 add     esp, 1Ch
.text:004167F3                 retn
.text:004167F4 ; ---------------------------------------------------------------------------
.text:004167F4
.text:004167F4 loc_4167F4:                             ; CODE XREF: sub_4167A0+33↑j
.text:004167F4                 movsx   edx, al
.text:004167F7                 mov     [esp+1Ch+Val], edx ; Val
.text:004167FB                 lea     edx, [ebx+1]
.text:004167FE                 mov     [esp+1Ch+Str], edx ; Str
.text:00416801                 call    strchr
.text:00416806                 lea     esi, [esi+0]
.text:00416809                 lea     edi, [edi+0]
.text:00416810
.text:00416810 loc_416810:                             ; CODE XREF: sub_4167A0+8C↓j
.text:00416810                 mov     edx, eax
.text:00416812
.text:00416812 loc_416812:                             ; CODE XREF: sub_4167A0+2F↑j
.text:00416812                 test    edx, edx
.text:00416814                 jz      short loc_4167E0
.text:00416816                 mov     byte ptr [edx], 0
.text:00416819                 inc     edx
.text:0041681A                 mov     [esi], edx
.text:0041681C                 jmp     short loc_4167E6
.text:0041681C ; ---------------------------------------------------------------------------
.text:0041681E                 align 10h
.text:00416820
.text:00416820 loc_416820:                             ; CODE XREF: sub_4167A0+26↑j
.text:00416820                 mov     [esp+1Ch+Val], edx ; Control
.text:00416824                 mov     [esp+1Ch+Str], ebx ; Str
.text:00416827                 call    strpbrk
.text:0041682C                 jmp     short loc_416810
.text:0041682C sub_4167A0      endp
.text:0041682C
.text:0041682C ; ---------------------------------------------------------------------------
.text:0041682E                 align 10h
.text:00416830 ; const char aTmpf[]
.text:00416830 aTmpf           db 'tmpf',0             ; DATA XREF: sub_416840+20↓o
.text:00416835 ; const char aWBd[]
.text:00416835 aWBd            db 'w+bD',0             ; DATA XREF: sub_416840+5E↓o
.text:0041683A                 align 10h
.text:00416840
.text:00416840 ; =============== S U B R O U T I N E =======================================
.text:00416840
.text:00416840
.text:00416840 sub_416840      proc near               ; CODE XREF: sub_4159CF+A4↑p
.text:00416840
.text:00416840 FileHandle      = dword ptr -13Ch
.text:00416840 Format          = dword ptr -138h
.text:00416840 var_134         = dword ptr -134h
.text:00416840 var_130         = dword ptr -130h
.text:00416840 var_12C         = dword ptr -12Ch
.text:00416840 Buffer          = byte ptr -11Ch
.text:00416840 var_8           = dword ptr -8
.text:00416840 var_4           = dword ptr -4
.text:00416840
.text:00416840                 sub     esp, 13Ch
.text:00416846                 mov     [esp+13Ch+var_8], ebx
.text:0041684D                 lea     ebx, [esp+13Ch+Buffer]
.text:00416851                 mov     [esp+13Ch+var_4], esi
.text:00416858                 mov     [esp+13Ch+var_12C], 0 ; int
.text:00416860                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00416868                 mov     [esp+13Ch+var_134], 0 ; char *
.text:00416870                 mov     [esp+13Ch+Format], 104h ; int
.text:00416878                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041687B                 call    sub_416A90
.text:00416880                 xor     edx, edx
.text:00416882                 test    eax, eax
.text:00416884                 jnz     short loc_4168B6
.text:00416886                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00416889                 mov     [esp+13Ch+Format], 0 ; int
.text:00416891                 call    sub_416E10
.text:00416896                 xor     edx, edx
.text:00416898                 mov     ebx, eax
.text:0041689A                 test    eax, eax
.text:0041689C                 js      short loc_4168B6
.text:0041689E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:004168A6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:004168A9                 call    _fdopen
.text:004168AE                 test    eax, eax
.text:004168B0                 mov     esi, eax
.text:004168B2                 jz      short loc_4168CD
.text:004168B4
.text:004168B4 loc_4168B4:                             ; CODE XREF: sub_416840+95↓j
.text:004168B4                 mov     edx, esi
.text:004168B6
.text:004168B6 loc_4168B6:                             ; CODE XREF: sub_416840+44↑j
.text:004168B6                                         ; sub_416840+5C↑j
.text:004168B6                 mov     ebx, [esp+13Ch+var_8]
.text:004168BD                 mov     eax, edx
.text:004168BF                 mov     esi, [esp+13Ch+var_4]
.text:004168C6                 add     esp, 13Ch
.text:004168CC                 retn
.text:004168CD ; ---------------------------------------------------------------------------
.text:004168CD
.text:004168CD loc_4168CD:                             ; CODE XREF: sub_416840+72↑j
.text:004168CD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:004168D0                 call    _close_0
.text:004168D5                 jmp     short loc_4168B4
.text:004168D5 sub_416840      endp
.text:004168D5
.text:004168D5 ; ---------------------------------------------------------------------------
.text:004168D7                 align 10h
.text:004168E0
.text:004168E0 ; =============== S U B R O U T I N E =======================================
.text:004168E0
.text:004168E0
.text:004168E0 sub_4168E0      proc near               ; CODE XREF: _sysconf+297↑j
.text:004168E0
.text:004168E0 lpSystemInfo    = dword ptr -0Ch
.text:004168E0 var_4           = dword ptr -4
.text:004168E0
.text:004168E0                 sub     esp, 0Ch
.text:004168E3                 mov     [esp+0Ch+var_4], edi
.text:004168E7                 mov     edi, ds:dword_41BB40
.text:004168ED                 test    edi, edi
.text:004168EF                 mov     eax, edi
.text:004168F1                 jz      short loc_416900
.text:004168F3
.text:004168F3 loc_4168F3:                             ; CODE XREF: sub_4168E0+48↓j
.text:004168F3                 mov     eax, [edi+14h]
.text:004168F6                 mov     edi, [esp+0Ch+var_4]
.text:004168FA                 add     esp, 0Ch
.text:004168FD                 retn
.text:004168FD ; ---------------------------------------------------------------------------
.text:004168FE                 align 10h
.text:00416900
.text:00416900 loc_416900:                             ; CODE XREF: sub_4168E0+11↑j
.text:00416900                 cld
.text:00416901                 mov     edi, offset SystemInfo
.text:00416906                 mov     ecx, 9
.text:0041690B                 mov     ds:dword_41BB40, edi
.text:00416911                 rep stosd
.text:00416913                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041691A                 call    GetSystemInfo
.text:0041691F                 mov     edi, ds:dword_41BB40
.text:00416925                 sub     esp, 4
.text:00416928                 jmp     short loc_4168F3
.text:00416928 sub_4168E0      endp
.text:00416928
.text:00416928 ; ---------------------------------------------------------------------------
.text:0041692A                 align 10h
.text:00416930
.text:00416930 ; =============== S U B R O U T I N E =======================================
.text:00416930
.text:00416930
.text:00416930 sub_416930      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00416930
.text:00416930 lpSystemInfo    = dword ptr -0Ch
.text:00416930 var_4           = dword ptr -4
.text:00416930
.text:00416930                 sub     esp, 0Ch
.text:00416933                 mov     [esp+0Ch+var_4], edi
.text:00416937                 mov     edi, ds:dword_41BB40
.text:0041693D                 test    edi, edi
.text:0041693F                 mov     eax, edi
.text:00416941                 jz      short loc_416950
.text:00416943
.text:00416943 loc_416943:                             ; CODE XREF: sub_416930+48↓j
.text:00416943                 mov     eax, [edi+14h]
.text:00416946                 mov     edi, [esp+0Ch+var_4]
.text:0041694A                 add     esp, 0Ch
.text:0041694D                 retn
.text:0041694D ; ---------------------------------------------------------------------------
.text:0041694E                 align 10h
.text:00416950
.text:00416950 loc_416950:                             ; CODE XREF: sub_416930+11↑j
.text:00416950                 cld
.text:00416951                 mov     edi, offset SystemInfo
.text:00416956                 mov     ecx, 9
.text:0041695B                 mov     ds:dword_41BB40, edi
.text:00416961                 rep stosd
.text:00416963                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041696A                 call    GetSystemInfo
.text:0041696F                 mov     edi, ds:dword_41BB40
.text:00416975                 sub     esp, 4
.text:00416978                 jmp     short loc_416943
.text:00416978 sub_416930      endp
.text:00416978
.text:00416978 ; ---------------------------------------------------------------------------
.text:0041697A                 align 10h
.text:00416980
.text:00416980 ; =============== S U B R O U T I N E =======================================
.text:00416980
.text:00416980
.text:00416980 sub_416980      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00416980
.text:00416980 lpSystemInfo    = dword ptr -0Ch
.text:00416980 var_4           = dword ptr -4
.text:00416980
.text:00416980                 sub     esp, 0Ch
.text:00416983                 mov     [esp+0Ch+var_4], edi
.text:00416987                 mov     edi, ds:dword_41BB40
.text:0041698D                 test    edi, edi
.text:0041698F                 mov     eax, edi
.text:00416991                 jz      short loc_4169A8
.text:00416993
.text:00416993 loc_416993:                             ; CODE XREF: sub_416980+50↓j
.text:00416993                 mov     eax, [edi+0Ch]
.text:00416996                 xor     edx, edx
.text:00416998                 mov     ecx, [edi+8]
.text:0041699B                 sub     eax, ecx
.text:0041699D                 div     dword ptr [edi+4]
.text:004169A0                 mov     edi, [esp+0Ch+var_4]
.text:004169A4                 add     esp, 0Ch
.text:004169A7                 retn
.text:004169A8 ; ---------------------------------------------------------------------------
.text:004169A8
.text:004169A8 loc_4169A8:                             ; CODE XREF: sub_416980+11↑j
.text:004169A8                 cld
.text:004169A9                 mov     edi, offset SystemInfo
.text:004169AE                 mov     ecx, 9
.text:004169B3                 mov     ds:dword_41BB40, edi
.text:004169B9                 rep stosd
.text:004169BB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004169C2                 call    GetSystemInfo
.text:004169C7                 mov     edi, ds:dword_41BB40
.text:004169CD                 sub     esp, 4
.text:004169D0                 jmp     short loc_416993
.text:004169D0 sub_416980      endp
.text:004169D0
.text:004169D0 ; ---------------------------------------------------------------------------
.text:004169D2                 align 10h
.text:004169E0
.text:004169E0 ; =============== S U B R O U T I N E =======================================
.text:004169E0
.text:004169E0
.text:004169E0 sub_4169E0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:004169E0
.text:004169E0 lpSystemInfo    = dword ptr -0Ch
.text:004169E0 var_4           = dword ptr -4
.text:004169E0
.text:004169E0                 sub     esp, 0Ch
.text:004169E3                 mov     [esp+0Ch+var_4], edi
.text:004169E7                 mov     edi, ds:dword_41BB40
.text:004169ED                 test    edi, edi
.text:004169EF                 mov     eax, edi
.text:004169F1                 jz      short loc_416A08
.text:004169F3
.text:004169F3 loc_4169F3:                             ; CODE XREF: sub_4169E0+50↓j
.text:004169F3                 mov     edx, [edi+8]
.text:004169F6                 mov     eax, [edi+0Ch]
.text:004169F9                 sub     eax, edx
.text:004169FB                 xor     edx, edx
.text:004169FD                 div     dword ptr [edi+4]
.text:00416A00                 mov     edi, [esp+0Ch+var_4]
.text:00416A04                 add     esp, 0Ch
.text:00416A07                 retn
.text:00416A08 ; ---------------------------------------------------------------------------
.text:00416A08
.text:00416A08 loc_416A08:                             ; CODE XREF: sub_4169E0+11↑j
.text:00416A08                 cld
.text:00416A09                 mov     edi, offset SystemInfo
.text:00416A0E                 mov     ecx, 9
.text:00416A13                 mov     ds:dword_41BB40, edi
.text:00416A19                 rep stosd
.text:00416A1B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00416A22                 call    GetSystemInfo
.text:00416A27                 mov     edi, ds:dword_41BB40
.text:00416A2D                 sub     esp, 4
.text:00416A30                 jmp     short loc_4169F3
.text:00416A30 sub_4169E0      endp
.text:00416A30
.text:00416A30 ; ---------------------------------------------------------------------------
.text:00416A32                 align 10h
.text:00416A40
.text:00416A40 ; =============== S U B R O U T I N E =======================================
.text:00416A40
.text:00416A40
.text:00416A40 sub_416A40      proc near               ; CODE XREF: _sysconf:loc_4161CB↑p
.text:00416A40                                         ; _sysconf:loc_4161DE↑p
.text:00416A40                 mov     edx, 40h ; '@'
.text:00416A45                 mov     eax, 40h ; '@'
.text:00416A4A                 mov     ds:dword_41BC30, edx
.text:00416A50                 retn
.text:00416A50 sub_416A40      endp
.text:00416A50
.text:00416A50 ; ---------------------------------------------------------------------------
.text:00416A51                 align 10h
.text:00416A60 aFile           db 'file',0             ; DATA XREF: sub_416A90:loc_416ABC↓o
.text:00416A65 ; const char aSSxxxxxx[]
.text:00416A65 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_416A90+9B↓o
.text:00416A75 ; const char aTemp[]
.text:00416A75 aTemp           db 'TEMP',0             ; DATA XREF: sub_416A90:loc_416B72↓o
.text:00416A75                                         ; sub_416A90:loc_416BB2↓o ...
.text:00416A7A ; const char aTmp[]
.text:00416A7A aTmp            db '/tmp',0             ; DATA XREF: sub_416A90+12F↓o
.text:00416A7A                                         ; sub_416A90+141↓o ...
.text:00416A7F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_416A90:loc_416C30↓o
.text:00416A86 aTmp_0          db 'TMP',0              ; DATA XREF: sub_416A90:loc_416CC0↓o
.text:00416A8A                 align 10h
.text:00416A90
.text:00416A90 ; =============== S U B R O U T I N E =======================================
.text:00416A90
.text:00416A90
.text:00416A90 ; int __cdecl sub_416A90(char *Buffer, int, char *, char *, int)
.text:00416A90 sub_416A90      proc near               ; CODE XREF: sub_416840+3B↑p
.text:00416A90
.text:00416A90 Str             = dword ptr -1BCh
.text:00416A90 Format          = dword ptr -1B8h
.text:00416A90 var_1B4         = dword ptr -1B4h
.text:00416A90 var_1B0         = dword ptr -1B0h
.text:00416A90 var_1AC         = dword ptr -1ACh
.text:00416A90 var_1A8         = dword ptr -1A8h
.text:00416A90 var_19C         = dword ptr -19Ch
.text:00416A90 var_13C         = dword ptr -13Ch
.text:00416A90 var_DC          = dword ptr -0DCh
.text:00416A90 var_7C          = dword ptr -7Ch
.text:00416A90 Buffer          = dword ptr  4
.text:00416A90 arg_4           = dword ptr  8
.text:00416A90 arg_8           = dword ptr  0Ch
.text:00416A90 arg_C           = dword ptr  10h
.text:00416A90 arg_10          = dword ptr  14h
.text:00416A90
.text:00416A90                 push    ebp
.text:00416A91                 push    edi
.text:00416A92                 push    esi
.text:00416A93                 push    ebx
.text:00416A94                 sub     esp, 1ACh
.text:00416A9A                 mov     eax, [esp+1BCh+arg_C]
.text:00416AA1                 mov     esi, [esp+1BCh+arg_8]
.text:00416AA8                 test    eax, eax
.text:00416AAA                 jz      short loc_416ABC
.text:00416AAC                 mov     edx, [esp+1BCh+arg_C]
.text:00416AB3                 cmp     byte ptr [edx], 0
.text:00416AB6                 jnz     loc_416CF0
.text:00416ABC
.text:00416ABC loc_416ABC:                             ; CODE XREF: sub_416A90+1A↑j
.text:00416ABC                 mov     eax, offset aFile ; "file"
.text:00416AC1                 mov     ebp, 4
.text:00416AC6                 mov     [esp+1BCh+arg_C], eax
.text:00416ACD
.text:00416ACD loc_416ACD:                             ; CODE XREF: sub_416A90+274↓j
.text:00416ACD                                         ; sub_416A90+27F↓j
.text:00416ACD                 mov     ebx, [esp+1BCh+arg_10]
.text:00416AD4                 test    ebx, ebx
.text:00416AD6                 jnz     loc_416C30
.text:00416ADC
.text:00416ADC loc_416ADC:                             ; CODE XREF: sub_416A90+21C↓j
.text:00416ADC                                         ; sub_416A90+224↓j ...
.text:00416ADC                 test    esi, esi
.text:00416ADE                 jz      loc_416B72
.text:00416AE4
.text:00416AE4 loc_416AE4:                             ; CODE XREF: sub_416A90+176↓j
.text:00416AE4                                         ; sub_416A90+19A↓j
.text:00416AE4                 mov     [esp+1BCh+Str], esi ; Str
.text:00416AE7                 call    strlen
.text:00416AEC                 test    eax, eax
.text:00416AEE                 mov     edx, eax
.text:00416AF0                 jz      short loc_416B00
.text:00416AF2                 movzx   eax, byte ptr [eax+esi-1]
.text:00416AF7                 cmp     al, 2Fh ; '/'
.text:00416AF9                 jz      short loc_416B60
.text:00416AFB                 cmp     al, 5Ch ; '\'
.text:00416AFD                 jz      short loc_416B60
.text:00416AFF                 nop
.text:00416B00
.text:00416B00 loc_416B00:                             ; CODE XREF: sub_416A90+60↑j
.text:00416B00                                         ; sub_416A90+D1↓j ...
.text:00416B00                 lea     edi, [ebp+edx+8]
.text:00416B04                 cmp     [esp+1BCh+arg_4], edi
.text:00416B0B                 jb      short loc_416B48
.text:00416B0D                 mov     [esp+1BCh+var_1AC], ebp
.text:00416B11                 mov     ecx, [esp+1BCh+arg_C]
.text:00416B18                 mov     ebp, [esp+1BCh+Buffer]
.text:00416B1F                 mov     [esp+1BCh+var_1B0], esi
.text:00416B23                 mov     [esp+1BCh+var_1A8], ecx
.text:00416B27                 mov     [esp+1BCh+var_1B4], edx
.text:00416B2B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00416B33                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00416B36                 call    sprintf
.text:00416B3B                 xor     eax, eax
.text:00416B3D
.text:00416B3D loc_416B3D:                             ; CODE XREF: sub_416A90+C8↓j
.text:00416B3D                 add     esp, 1ACh
.text:00416B43                 pop     ebx
.text:00416B44                 pop     esi
.text:00416B45                 pop     edi
.text:00416B46                 pop     ebp
.text:00416B47                 retn
.text:00416B48 ; ---------------------------------------------------------------------------
.text:00416B48
.text:00416B48 loc_416B48:                             ; CODE XREF: sub_416A90+7B↑j
.text:00416B48                 call    _errno
.text:00416B4D                 mov     dword ptr [eax], 16h
.text:00416B53
.text:00416B53 loc_416B53:                             ; CODE XREF: sub_416A90+187↓j
.text:00416B53                 mov     eax, 0FFFFFFFFh
.text:00416B58                 jmp     short loc_416B3D
.text:00416B58 ; ---------------------------------------------------------------------------
.text:00416B5A                 align 10h
.text:00416B60
.text:00416B60 loc_416B60:                             ; CODE XREF: sub_416A90+69↑j
.text:00416B60                                         ; sub_416A90+6D↑j ...
.text:00416B60                 dec     edx
.text:00416B61                 jz      short loc_416B00
.text:00416B63                 movzx   eax, byte ptr [edx+esi-1]
.text:00416B68                 cmp     al, 2Fh ; '/'
.text:00416B6A                 jz      short loc_416B60
.text:00416B6C                 cmp     al, 5Ch ; '\'
.text:00416B6E                 jz      short loc_416B60
.text:00416B70                 jmp     short loc_416B00
.text:00416B72 ; ---------------------------------------------------------------------------
.text:00416B72
.text:00416B72 loc_416B72:                             ; CODE XREF: sub_416A90+4E↑j
.text:00416B72                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416B79                 lea     esi, [esp+1BCh+var_13C]
.text:00416B80                 call    getenv
.text:00416B85                 mov     [esp+1BCh+Format], eax ; char *
.text:00416B89                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00416B8D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416B94                 call    sub_417390
.text:00416B99                 test    eax, eax
.text:00416B9B                 jnz     short loc_416BB2
.text:00416B9D                 mov     edi, [esp+1BCh+var_13C]
.text:00416BA4                 and     edi, 0F000h
.text:00416BAA                 cmp     edi, 4000h
.text:00416BB0                 jz      short loc_416C1C
.text:00416BB2
.text:00416BB2 loc_416BB2:                             ; CODE XREF: sub_416A90+10B↑j
.text:00416BB2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416BB9                 call    getenv
.text:00416BBE                 cld
.text:00416BBF                 mov     edx, offset aTmp ; "/tmp"
.text:00416BC4                 mov     esi, eax
.text:00416BC6                 mov     ecx, 5
.text:00416BCB                 mov     edi, edx
.text:00416BCD                 repe cmpsb
.text:00416BCF                 jz      short loc_416C0C
.text:00416BD1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00416BD9                 lea     ecx, [esp+1BCh+var_19C]
.text:00416BDD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00416BE1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416BE8                 call    sub_417390
.text:00416BED                 test    eax, eax
.text:00416BEF                 jnz     short loc_416C0C
.text:00416BF1                 mov     ebx, [esp+1BCh+var_19C]
.text:00416BF5                 mov     esi, offset aTmp ; "/tmp"
.text:00416BFA                 and     ebx, 0F000h
.text:00416C00                 cmp     ebx, 4000h
.text:00416C06                 jz      loc_416AE4
.text:00416C0C
.text:00416C0C loc_416C0C:                             ; CODE XREF: sub_416A90+13F↑j
.text:00416C0C                                         ; sub_416A90+15F↑j
.text:00416C0C                 call    _errno
.text:00416C11                 mov     dword ptr [eax], 2
.text:00416C17                 jmp     loc_416B53
.text:00416C1C ; ---------------------------------------------------------------------------
.text:00416C1C
.text:00416C1C loc_416C1C:                             ; CODE XREF: sub_416A90+120↑j
.text:00416C1C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416C23                 call    getenv
.text:00416C28                 mov     esi, eax
.text:00416C2A                 jmp     loc_416AE4
.text:00416C2A ; ---------------------------------------------------------------------------
.text:00416C2F                 align 10h
.text:00416C30
.text:00416C30 loc_416C30:                             ; CODE XREF: sub_416A90+46↑j
.text:00416C30                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00416C37                 call    sub_417320
.text:00416C3C                 test    eax, eax
.text:00416C3E                 mov     ebx, eax
.text:00416C40                 jz      short loc_416CC0
.text:00416C42
.text:00416C42 loc_416C42:                             ; CODE XREF: sub_416A90+240↓j
.text:00416C42                                         ; sub_416A90+256↓j
.text:00416C42                 mov     [esp+1BCh+Format], ebx ; char *
.text:00416C46                 lea     edi, [esp+1BCh+var_7C]
.text:00416C4D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00416C51                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416C58                 call    sub_417390
.text:00416C5D                 test    eax, eax
.text:00416C5F                 jnz     short loc_416C76
.text:00416C61                 mov     edx, [esp+1BCh+var_7C]
.text:00416C68                 and     edx, 0F000h
.text:00416C6E                 cmp     edx, 4000h
.text:00416C74                 jz      short loc_416CB9
.text:00416C76
.text:00416C76 loc_416C76:                             ; CODE XREF: sub_416A90+1CF↑j
.text:00416C76                                         ; sub_416A90+25C↓j
.text:00416C76                 test    esi, esi
.text:00416C78                 jz      short loc_416CB2
.text:00416C7A                 mov     [esp+1BCh+Format], esi ; char *
.text:00416C7E                 lea     ecx, [esp+1BCh+var_DC]
.text:00416C85                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00416C89                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416C90                 call    sub_417390
.text:00416C95                 test    eax, eax
.text:00416C97                 jnz     short loc_416CB2
.text:00416C99                 mov     ebx, [esp+1BCh+var_DC]
.text:00416CA0                 and     ebx, 0F000h
.text:00416CA6                 cmp     ebx, 4000h
.text:00416CAC                 jz      loc_416ADC
.text:00416CB2
.text:00416CB2 loc_416CB2:                             ; CODE XREF: sub_416A90+1E8↑j
.text:00416CB2                                         ; sub_416A90+207↑j
.text:00416CB2                 xor     esi, esi
.text:00416CB4                 jmp     loc_416ADC
.text:00416CB9 ; ---------------------------------------------------------------------------
.text:00416CB9
.text:00416CB9 loc_416CB9:                             ; CODE XREF: sub_416A90+1E4↑j
.text:00416CB9                 mov     esi, ebx
.text:00416CBB                 jmp     loc_416ADC
.text:00416CC0 ; ---------------------------------------------------------------------------
.text:00416CC0
.text:00416CC0 loc_416CC0:                             ; CODE XREF: sub_416A90+1B0↑j
.text:00416CC0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00416CC7                 call    sub_417320
.text:00416CCC                 test    eax, eax
.text:00416CCE                 mov     ebx, eax
.text:00416CD0                 jnz     loc_416C42
.text:00416CD6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416CDD                 call    sub_417320
.text:00416CE2                 test    eax, eax
.text:00416CE4                 mov     ebx, eax
.text:00416CE6                 jnz     loc_416C42
.text:00416CEC                 jmp     short loc_416C76
.text:00416CEC ; ---------------------------------------------------------------------------
.text:00416CEE                 align 10h
.text:00416CF0
.text:00416CF0 loc_416CF0:                             ; CODE XREF: sub_416A90+26↑j
.text:00416CF0                 mov     ecx, [esp+1BCh+arg_C]
.text:00416CF7                 mov     [esp+1BCh+Str], ecx ; Str
.text:00416CFA                 call    strlen
.text:00416CFF                 cmp     eax, 5
.text:00416D02                 mov     ebp, eax
.text:00416D04                 jbe     loc_416ACD
.text:00416D0A                 mov     ebp, 5
.text:00416D0F                 jmp     loc_416ACD
.text:00416D0F sub_416A90      endp
.text:00416D0F
.text:00416D0F ; ---------------------------------------------------------------------------
.text:00416D14                 align 10h
.text:00416D20 byte_416D20     db 61h                  ; DATA XREF: sub_416E10+DC↓r
.text:00416D20                                         ; sub_416E10+122↓r ...
.text:00416D21 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00416D5F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_416E10+39↓o
.text:00416D66                 align 20h
.text:00416D80 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00416D80                                         ; DATA XREF: sub_416E10:loc_417088↓o
.text:00416D9F                 align 10h
.text:00416DA0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00416DA0                                         ; DATA XREF: sub_416E10+405↓o
.text:00416DCB                 align 20h
.text:00416DE0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00416DE0                                         ; DATA XREF: sub_416E10+40D↓o
.text:00416E03                 align 10h
.text:00416E10
.text:00416E10 ; =============== S U B R O U T I N E =======================================
.text:00416E10
.text:00416E10
.text:00416E10 ; int __cdecl sub_416E10(char *FileName, int)
.text:00416E10 sub_416E10      proc near               ; CODE XREF: sub_416840+51↑p
.text:00416E10
.text:00416E10 Str             = dword ptr -9Ch
.text:00416E10 OpenFlag        = dword ptr -98h
.text:00416E10 var_94          = dword ptr -94h
.text:00416E10 var_90          = dword ptr -90h
.text:00416E10 var_8C          = dword ptr -8Ch
.text:00416E10 var_88          = dword ptr -88h
.text:00416E10 var_84          = dword ptr -84h
.text:00416E10 var_80          = dword ptr -80h
.text:00416E10 var_7C          = dword ptr -7Ch
.text:00416E10 FileName        = dword ptr  4
.text:00416E10 arg_4           = dword ptr  8
.text:00416E10
.text:00416E10                 push    ebp
.text:00416E11                 push    edi
.text:00416E12                 push    esi
.text:00416E13                 push    ebx
.text:00416E14                 sub     esp, 8Ch
.text:00416E1A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00416E22                 call    _errno
.text:00416E27                 mov     edx, [eax]
.text:00416E29                 mov     [esp+9Ch+var_8C], edx
.text:00416E2D                 mov     edx, [esp+9Ch+FileName]
.text:00416E34                 mov     [esp+9Ch+Str], edx ; Str
.text:00416E37                 call    strlen
.text:00416E3C                 cmp     eax, 5
.text:00416E3F                 jle     short loc_416E5D
.text:00416E41                 cld
.text:00416E42                 mov     ecx, [esp+9Ch+FileName]
.text:00416E49                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00416E4E                 lea     esi, [eax+ecx-6]
.text:00416E52                 mov     ecx, 7
.text:00416E57                 mov     ebp, esi
.text:00416E59                 repe cmpsb
.text:00416E5B                 jz      short loc_416E78
.text:00416E5D
.text:00416E5D loc_416E5D:                             ; CODE XREF: sub_416E10+2F↑j
.text:00416E5D                 call    _errno
.text:00416E62                 mov     dword ptr [eax], 16h
.text:00416E68
.text:00416E68 loc_416E68:                             ; CODE XREF: sub_416E10+295↓j
.text:00416E68                                         ; sub_416E10+2D8↓j ...
.text:00416E68                 mov     eax, 0FFFFFFFFh
.text:00416E6D
.text:00416E6D loc_416E6D:                             ; CODE XREF: sub_416E10+2EF↓j
.text:00416E6D                                         ; sub_416E10+332↓j
.text:00416E6D                 add     esp, 8Ch
.text:00416E73                 pop     ebx
.text:00416E74                 pop     esi
.text:00416E75                 pop     edi
.text:00416E76                 pop     ebp
.text:00416E77                 retn
.text:00416E78 ; ---------------------------------------------------------------------------
.text:00416E78
.text:00416E78 loc_416E78:                             ; CODE XREF: sub_416E10+4B↑j
.text:00416E78                 mov     ecx, ds:dword_41BB84
.text:00416E7E                 mov     edi, ds:dword_41BB80
.text:00416E84                 mov     eax, ecx
.text:00416E86                 or      eax, edi
.text:00416E88                 jz      loc_4171C3
.text:00416E8E
.text:00416E8E loc_416E8E:                             ; CODE XREF: sub_416E10+3F8↓j
.text:00416E8E                 rdtsc
.text:00416E90                 mov     edi, edx
.text:00416E92                 mov     esi, eax
.text:00416E94                 call    _getpid
.text:00416E99                 mov     ebx, eax
.text:00416E9B                 mov     edx, esi
.text:00416E9D                 sar     ebx, 1Fh
.text:00416EA0                 xor     edx, eax
.text:00416EA2                 mov     ecx, edi
.text:00416EA4                 xor     ecx, ebx
.text:00416EA6                 mov     ebx, edx
.text:00416EA8                 mov     esi, ecx
.text:00416EAA                 add     ebx, ds:dword_41BB80
.text:00416EB0                 adc     esi, ds:dword_41BB84
.text:00416EB6                 xor     edi, edi
.text:00416EB8                 mov     ds:dword_41BB80, ebx
.text:00416EBE                 mov     ds:dword_41BB84, esi
.text:00416EC4                 lea     esi, [esi+0]
.text:00416ECA                 lea     edi, [edi+0]
.text:00416ED0
.text:00416ED0 loc_416ED0:                             ; CODE XREF: sub_416E10+2C7↓j
.text:00416ED0                 mov     [esp+9Ch+Str], ebx
.text:00416ED3                 mov     [esp+9Ch+OpenFlag], esi
.text:00416ED7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416EDF                 mov     [esp+9Ch+var_90], 0
.text:00416EE7                 call    sub_418F90
.text:00416EEC                 movzx   ecx, ds:byte_416D20[eax]
.text:00416EF3                 mov     [ebp+0], cl
.text:00416EF6                 mov     [esp+9Ch+Str], ebx
.text:00416EF9                 mov     [esp+9Ch+OpenFlag], esi
.text:00416EFD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416F05                 mov     [esp+9Ch+var_90], 0
.text:00416F0D                 call    sub_418E70
.text:00416F12                 mov     [esp+9Ch+Str], eax
.text:00416F15                 mov     ebx, eax
.text:00416F17                 mov     esi, edx
.text:00416F19                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416F21                 mov     [esp+9Ch+var_90], 0
.text:00416F29                 mov     [esp+9Ch+OpenFlag], edx
.text:00416F2D                 call    sub_418F90
.text:00416F32                 movzx   edx, ds:byte_416D20[eax]
.text:00416F39                 mov     [ebp+1], dl
.text:00416F3C                 mov     [esp+9Ch+Str], ebx
.text:00416F3F                 mov     [esp+9Ch+OpenFlag], esi
.text:00416F43                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416F4B                 mov     [esp+9Ch+var_90], 0
.text:00416F53                 call    sub_418E70
.text:00416F58                 mov     [esp+9Ch+Str], eax
.text:00416F5B                 mov     ebx, eax
.text:00416F5D                 mov     esi, edx
.text:00416F5F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416F67                 mov     [esp+9Ch+var_90], 0
.text:00416F6F                 mov     [esp+9Ch+OpenFlag], edx
.text:00416F73                 call    sub_418F90
.text:00416F78                 movzx   ecx, ds:byte_416D20[eax]
.text:00416F7F                 mov     [ebp+2], cl
.text:00416F82                 mov     [esp+9Ch+Str], ebx
.text:00416F85                 mov     [esp+9Ch+OpenFlag], esi
.text:00416F89                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416F91                 mov     [esp+9Ch+var_90], 0
.text:00416F99                 call    sub_418E70
.text:00416F9E                 mov     [esp+9Ch+Str], eax
.text:00416FA1                 mov     ebx, eax
.text:00416FA3                 mov     esi, edx
.text:00416FA5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416FAD                 mov     [esp+9Ch+var_90], 0
.text:00416FB5                 mov     [esp+9Ch+OpenFlag], edx
.text:00416FB9                 call    sub_418F90
.text:00416FBE                 movzx   edx, ds:byte_416D20[eax]
.text:00416FC5                 mov     [ebp+3], dl
.text:00416FC8                 mov     [esp+9Ch+Str], ebx
.text:00416FCB                 mov     [esp+9Ch+OpenFlag], esi
.text:00416FCF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416FD7                 mov     [esp+9Ch+var_90], 0
.text:00416FDF                 call    sub_418E70
.text:00416FE4                 mov     [esp+9Ch+Str], eax
.text:00416FE7                 mov     ebx, eax
.text:00416FE9                 mov     esi, edx
.text:00416FEB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416FF3                 mov     [esp+9Ch+var_90], 0
.text:00416FFB                 mov     [esp+9Ch+OpenFlag], edx
.text:00416FFF                 call    sub_418F90
.text:00417004                 movzx   ecx, ds:byte_416D20[eax]
.text:0041700B                 mov     [ebp+4], cl
.text:0041700E                 mov     [esp+9Ch+Str], ebx
.text:00417011                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00417019                 mov     [esp+9Ch+var_90], 0
.text:00417021                 mov     [esp+9Ch+OpenFlag], esi
.text:00417025                 call    sub_418E70
.text:0041702A                 mov     [esp+9Ch+Str], eax
.text:0041702D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00417035                 mov     [esp+9Ch+var_90], 0
.text:0041703D                 mov     [esp+9Ch+OpenFlag], edx
.text:00417041                 call    sub_418F90
.text:00417046                 movzx   ebx, ds:byte_416D20[eax]
.text:0041704D                 mov     [ebp+5], bl
.text:00417050                 cmp     [esp+9Ch+arg_4], 1
.text:00417058                 jz      loc_4171A7
.text:0041705E                 cmp     [esp+9Ch+arg_4], 1
.text:00417066                 jle     loc_417170
.text:0041706C                 cmp     [esp+9Ch+arg_4], 2
.text:00417074                 jz      loc_417147
.text:0041707A                 cmp     [esp+9Ch+arg_4], 3
.text:00417082                 jz      loc_417104
.text:00417088
.text:00417088 loc_417088:                             ; CODE XREF: sub_416E10+369↓j
.text:00417088                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041708D                 test    ebx, ebx
.text:0041708F                 jnz     loc_41720D
.text:00417095
.text:00417095 loc_417095:                             ; CODE XREF: sub_416E10+354↓j
.text:00417095                 mov     eax, [esp+9Ch+var_88]
.text:00417099                 test    eax, eax
.text:0041709B                 jns     short loc_4170F0
.text:0041709D                 call    _errno
.text:004170A2                 cmp     dword ptr [eax], 11h
.text:004170A5                 jnz     loc_416E68
.text:004170AB
.text:004170AB loc_4170AB:                             ; CODE XREF: sub_416E10+315↓j
.text:004170AB                 mov     edx, ds:dword_41BB80
.text:004170B1                 mov     ecx, ds:dword_41BB84
.text:004170B7                 add     edx, 1E61h
.text:004170BD                 adc     ecx, 0
.text:004170C0                 mov     ebx, edx
.text:004170C2                 inc     edi
.text:004170C3                 mov     ds:dword_41BB80, edx
.text:004170C9                 cmp     edi, 3A2F8h
.text:004170CF                 mov     esi, ecx
.text:004170D1                 mov     ds:dword_41BB84, ecx
.text:004170D7                 jb      loc_416ED0
.text:004170DD                 call    _errno
.text:004170E2                 mov     dword ptr [eax], 11h
.text:004170E8                 jmp     loc_416E68
.text:004170E8 ; ---------------------------------------------------------------------------
.text:004170ED                 align 10h
.text:004170F0
.text:004170F0 loc_4170F0:                             ; CODE XREF: sub_416E10+28B↑j
.text:004170F0                 call    _errno
.text:004170F5                 mov     esi, [esp+9Ch+var_8C]
.text:004170F9                 mov     [eax], esi
.text:004170FB                 mov     eax, [esp+9Ch+var_88]
.text:004170FF                 jmp     loc_416E6D
.text:00417104 ; ---------------------------------------------------------------------------
.text:00417104
.text:00417104 loc_417104:                             ; CODE XREF: sub_416E10+272↑j
.text:00417104                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041710B                 mov     ecx, [esp+9Ch+FileName]
.text:00417112                 lea     esi, [esp+9Ch+var_7C]
.text:00417116                 mov     [esp+9Ch+var_94], esi ; int
.text:0041711A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041711E                 call    sub_417340
.text:00417123                 test    eax, eax
.text:00417125                 jns     short loc_4170AB
.text:00417127                 call    _errno
.text:0041712C                 cmp     dword ptr [eax], 2
.text:0041712F                 jnz     loc_416E68
.text:00417135                 call    _errno
.text:0041713A                 mov     ebx, [esp+9Ch+var_8C]
.text:0041713E                 mov     [eax], ebx
.text:00417140                 xor     eax, eax
.text:00417142                 jmp     loc_416E6D
.text:00417147 ; ---------------------------------------------------------------------------
.text:00417147
.text:00417147 loc_417147:                             ; CODE XREF: sub_416E10+264↑j
.text:00417147                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041714F                 mov     edx, [esp+9Ch+FileName]
.text:00417156                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00417159                 call    sub_417240
.text:0041715E                 mov     esi, esi
.text:00417160
.text:00417160 loc_417160:                             ; CODE XREF: sub_416E10+395↓j
.text:00417160                 mov     [esp+9Ch+var_88], eax
.text:00417164                 jmp     loc_417095
.text:00417164 ; ---------------------------------------------------------------------------
.text:00417169                 align 10h
.text:00417170
.text:00417170 loc_417170:                             ; CODE XREF: sub_416E10+256↑j
.text:00417170                 mov     eax, [esp+9Ch+arg_4]
.text:00417177                 test    eax, eax
.text:00417179                 jnz     loc_417088
.text:0041717F                 mov     [esp+9Ch+var_94], 180h
.text:00417187                 mov     esi, [esp+9Ch+FileName]
.text:0041718E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00417196                 mov     [esp+9Ch+Str], esi ; FileName
.text:00417199                 lea     esi, [esi+0]
.text:004171A0
.text:004171A0 loc_4171A0:                             ; CODE XREF: sub_416E10+3B1↓j
.text:004171A0                 call    _open_0
.text:004171A5                 jmp     short loc_417160
.text:004171A7 ; ---------------------------------------------------------------------------
.text:004171A7
.text:004171A7 loc_4171A7:                             ; CODE XREF: sub_416E10+248↑j
.text:004171A7                 mov     [esp+9Ch+var_94], 180h
.text:004171AF                 mov     ebx, [esp+9Ch+FileName]
.text:004171B6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:004171BE                 mov     [esp+9Ch+Str], ebx
.text:004171C1                 jmp     short loc_4171A0
.text:004171C3 ; ---------------------------------------------------------------------------
.text:004171C3
.text:004171C3 loc_4171C3:                             ; CODE XREF: sub_416E10+78↑j
.text:004171C3                 mov     [esp+9Ch+OpenFlag], 0
.text:004171CB                 lea     ebx, [esp+9Ch+var_84]
.text:004171CF                 mov     [esp+9Ch+Str], ebx
.text:004171D2                 call    sub_4172C0
.text:004171D7                 mov     edi, [esp+9Ch+var_80]
.text:004171DB                 mov     edx, [esp+9Ch+var_84]
.text:004171DF                 mov     ecx, edi
.text:004171E1                 mov     ebx, edi
.text:004171E3                 shl     ecx, 10h
.text:004171E6                 sar     ebx, 1Fh
.text:004171E9                 shld    ebx, edi, 10h
.text:004171ED                 mov     esi, edx
.text:004171EF                 mov     edi, edx
.text:004171F1                 mov     edx, ecx
.text:004171F3                 sar     edi, 1Fh
.text:004171F6                 xor     edx, esi
.text:004171F8                 mov     ds:dword_41BB80, edx
.text:004171FE                 mov     esi, ebx
.text:00417200                 xor     esi, edi
.text:00417202                 mov     ds:dword_41BB84, esi
.text:00417208                 jmp     loc_416E8E
.text:0041720D ; ---------------------------------------------------------------------------
.text:0041720D
.text:0041720D loc_41720D:                             ; CODE XREF: sub_416E10+27F↑j
.text:0041720D                 mov     [esp+9Ch+var_94], 151h
.text:00417215                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041721D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00417224                 call    _assert
.text:00417224 sub_416E10      endp
.text:00417224
.text:00417224 ; ---------------------------------------------------------------------------
.text:00417229                 align 20h
.text:00417240
.text:00417240 ; =============== S U B R O U T I N E =======================================
.text:00417240
.text:00417240
.text:00417240 ; int __cdecl sub_417240(LPCSTR, int AccessMode)
.text:00417240 sub_417240      proc near               ; CODE XREF: sub_416E10+349↑p
.text:00417240
.text:00417240 lpPathName      = dword ptr -1Ch
.text:00417240 lpSecurityAttributes= dword ptr -18h
.text:00417240 var_8           = dword ptr -8
.text:00417240 var_4           = dword ptr -4
.text:00417240 arg_0           = dword ptr  4
.text:00417240 AccessMode      = dword ptr  8
.text:00417240
.text:00417240                 sub     esp, 1Ch
.text:00417243                 mov     [esp+1Ch+var_8], ebx
.text:00417247                 mov     ebx, [esp+1Ch+arg_0]
.text:0041724B                 mov     [esp+1Ch+var_4], esi
.text:0041724F                 mov     esi, [esp+1Ch+AccessMode]
.text:00417253                 test    ebx, ebx
.text:00417255                 jz      short loc_4172A5
.text:00417257                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041725F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00417262                 call    CreateDirectoryA
.text:00417267                 sub     esp, 8
.text:0041726A                 test    eax, eax
.text:0041726C                 jz      short loc_417286
.text:0041726E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00417272                 mov     esi, [esp+1Ch+var_4]
.text:00417276                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041727A                 mov     ebx, [esp+1Ch+var_8]
.text:0041727E                 add     esp, 1Ch
.text:00417281                 jmp     _chmod
.text:00417286 ; ---------------------------------------------------------------------------
.text:00417286
.text:00417286 loc_417286:                             ; CODE XREF: sub_417240+2C↑j
.text:00417286                 call    sub_4140B0
.text:0041728B                 mov     esi, eax
.text:0041728D                 call    _errno
.text:00417292                 mov     [eax], esi
.text:00417294
.text:00417294 loc_417294:                             ; CODE XREF: sub_417240+70↓j
.text:00417294                 mov     ebx, [esp+1Ch+var_8]
.text:00417298                 mov     eax, 0FFFFFFFFh
.text:0041729D                 mov     esi, [esp+1Ch+var_4]
.text:004172A1                 add     esp, 1Ch
.text:004172A4                 retn
.text:004172A5 ; ---------------------------------------------------------------------------
.text:004172A5
.text:004172A5 loc_4172A5:                             ; CODE XREF: sub_417240+15↑j
.text:004172A5                 call    _errno
.text:004172AA                 mov     dword ptr [eax], 16h
.text:004172B0                 jmp     short loc_417294
.text:004172B0 sub_417240      endp
.text:004172B0
.text:004172B0 ; ---------------------------------------------------------------------------
.text:004172B2                 align 10h
.text:004172C0
.text:004172C0 ; =============== S U B R O U T I N E =======================================
.text:004172C0
.text:004172C0
.text:004172C0 sub_4172C0      proc near               ; CODE XREF: sub_416E10+3C2↑p
.text:004172C0
.text:004172C0 var_1C          = dword ptr -1Ch
.text:004172C0 var_18          = dword ptr -18h
.text:004172C0 var_C           = dword ptr -0Ch
.text:004172C0 var_8           = dword ptr -8
.text:004172C0 var_4           = dword ptr -4
.text:004172C0 arg_0           = dword ptr  4
.text:004172C0 arg_4           = dword ptr  8
.text:004172C0
.text:004172C0                 sub     esp, 1Ch
.text:004172C3                 mov     edx, [esp+1Ch+arg_4]
.text:004172C7                 mov     [esp+1Ch+var_4], ebx
.text:004172CB                 mov     ebx, [esp+1Ch+arg_0]
.text:004172CF                 mov     [esp+1Ch+var_18], edx
.text:004172D3                 lea     edx, [esp+1Ch+var_C]
.text:004172D7                 mov     [esp+1Ch+var_1C], edx
.text:004172DA                 call    sub_417450
.text:004172DF                 test    eax, eax
.text:004172E1                 mov     edx, 0FFFFFFFFh
.text:004172E6                 jnz     short loc_41730A
.text:004172E8                 mov     ecx, [esp+1Ch+var_C]
.text:004172EC                 mov     edx, 10624DD3h
.text:004172F1                 mov     [ebx], ecx
.text:004172F3                 mov     ecx, [esp+1Ch+var_8]
.text:004172F7                 mov     eax, ecx
.text:004172F9                 imul    edx
.text:004172FB                 mov     eax, ecx
.text:004172FD                 sar     eax, 1Fh
.text:00417300                 sar     edx, 6
.text:00417303                 sub     edx, eax
.text:00417305                 mov     [ebx+4], edx
.text:00417308                 xor     edx, edx
.text:0041730A
.text:0041730A loc_41730A:                             ; CODE XREF: sub_4172C0+26↑j
.text:0041730A                 mov     ebx, [esp+1Ch+var_4]
.text:0041730E                 mov     eax, edx
.text:00417310                 add     esp, 1Ch
.text:00417313                 retn
.text:00417313 sub_4172C0      endp
.text:00417313
.text:00417313 ; ---------------------------------------------------------------------------
.text:00417314                 align 10h
.text:00417320
.text:00417320 ; =============== S U B R O U T I N E =======================================
.text:00417320
.text:00417320
.text:00417320 sub_417320      proc near               ; CODE XREF: sub_416A90+1A7↑p
.text:00417320                                         ; sub_416A90+237↑p ...
.text:00417320                 mov     edx, ds:dword_41BB90
.text:00417326                 test    edx, edx
.text:00417328                 jnz     short loc_417330
.text:0041732A                 jmp     getenv
.text:0041732A ; ---------------------------------------------------------------------------
.text:0041732F                 align 10h
.text:00417330
.text:00417330 loc_417330:                             ; CODE XREF: sub_417320+8↑j
.text:00417330                 xor     eax, eax
.text:00417332                 retn
.text:00417332 sub_417320      endp
.text:00417332
.text:00417332 ; ---------------------------------------------------------------------------
.text:00417333                 align 10h
.text:00417340
.text:00417340 ; =============== S U B R O U T I N E =======================================
.text:00417340
.text:00417340
.text:00417340 ; int __cdecl sub_417340(LPCSTR, int, int)
.text:00417340 sub_417340      proc near               ; CODE XREF: sub_416E10+30E↑p
.text:00417340                                         ; sub_417390+42↓p ...
.text:00417340
.text:00417340 lpFileName      = dword ptr -2Ch
.text:00417340 dwDesiredAccess = dword ptr -28h
.text:00417340 dwShareMode     = dword ptr -24h
.text:00417340 lpSecurityAttributes= dword ptr -20h
.text:00417340 dwCreationDisposition= dword ptr -1Ch
.text:00417340 dwFlagsAndAttributes= dword ptr -18h
.text:00417340 hTemplateFile   = dword ptr -14h
.text:00417340 var_10          = dword ptr -10h
.text:00417340 var_C           = dword ptr -0Ch
.text:00417340 var_8           = dword ptr -8
.text:00417340 var_4           = dword ptr -4
.text:00417340 arg_0           = dword ptr  4
.text:00417340 arg_4           = dword ptr  8
.text:00417340 arg_8           = dword ptr  0Ch
.text:00417340
.text:00417340 ; FUNCTION CHUNK AT .text:00412390 SIZE 0000013A BYTES
.text:00417340
.text:00417340                 sub     esp, 0Ch
.text:00417343                 mov     ecx, [esp+0Ch+arg_0]
.text:00417347                 mov     edx, [esp+0Ch+arg_4]
.text:0041734B                 mov     eax, [esp+0Ch+arg_8]
.text:0041734F                 test    ecx, ecx
.text:00417351                 jnz     short loc_417370
.text:00417353                 test    edx, edx
.text:00417355                 jz      short loc_417370
.text:00417357                 test    eax, eax
.text:00417359                 jz      short loc_417370
.text:0041735B                 mov     [esp+0Ch+arg_4], eax
.text:0041735F                 mov     [esp+0Ch+arg_0], edx
.text:00417363                 add     esp, 0Ch
.text:00417366                 jmp     loc_412390
.text:00417366 ; ---------------------------------------------------------------------------
.text:0041736B                 align 10h
.text:00417370
.text:00417370 loc_417370:                             ; CODE XREF: sub_417340+11↑j
.text:00417370                                         ; sub_417340+15↑j ...
.text:00417370                 call    _errno
.text:00417375                 mov     dword ptr [eax], 16h
.text:0041737B                 mov     eax, 0FFFFFFFFh
.text:00417380                 add     esp, 0Ch
.text:00417383                 retn
.text:00417383 sub_417340      endp
.text:00417383
.text:00417383 ; ---------------------------------------------------------------------------
.text:00417384                 align 10h
.text:00417390
.text:00417390 ; =============== S U B R O U T I N E =======================================
.text:00417390
.text:00417390
.text:00417390 ; int __cdecl sub_417390(LPCSTR, char *, int)
.text:00417390 sub_417390      proc near               ; CODE XREF: sub_416A90+104↑p
.text:00417390                                         ; sub_416A90+158↑p ...
.text:00417390
.text:00417390 var_13C         = dword ptr -13Ch
.text:00417390 lpString1       = dword ptr -138h
.text:00417390 var_134         = dword ptr -134h
.text:00417390 String1         = byte ptr -12Ch
.text:00417390 var_10          = dword ptr -10h
.text:00417390 var_C           = dword ptr -0Ch
.text:00417390 var_8           = dword ptr -8
.text:00417390 var_4           = dword ptr -4
.text:00417390 arg_0           = dword ptr  4
.text:00417390 arg_4           = dword ptr  8
.text:00417390 arg_8           = dword ptr  0Ch
.text:00417390
.text:00417390                 sub     esp, 13Ch
.text:00417396                 mov     [esp+13Ch+var_10], ebx
.text:0041739D                 mov     ebx, [esp+13Ch+arg_8]
.text:004173A4                 mov     [esp+13Ch+var_C], esi
.text:004173AB                 mov     esi, [esp+13Ch+arg_4]
.text:004173B2                 mov     [esp+13Ch+var_8], edi
.text:004173B9                 mov     edi, [esp+13Ch+arg_0]
.text:004173C0                 mov     [esp+13Ch+var_4], ebp
.text:004173C7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004173CB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004173CF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004173D2                 call    sub_417340
.text:004173D7                 cmp     eax, 0FFFFFFFFh
.text:004173DA                 mov     edx, eax
.text:004173DC                 jz      short loc_4173EE
.text:004173DE                 mov     ecx, [ebx]
.text:004173E0                 and     ecx, 0F000h
.text:004173E6                 cmp     ecx, 0A000h
.text:004173EC                 jz      short loc_417413
.text:004173EE
.text:004173EE loc_4173EE:                             ; CODE XREF: sub_417390+4C↑j
.text:004173EE                                         ; sub_417390+A1↓j ...
.text:004173EE                 mov     ebx, [esp+13Ch+var_10]
.text:004173F5                 mov     eax, edx
.text:004173F7                 mov     esi, [esp+13Ch+var_C]
.text:004173FE                 mov     edi, [esp+13Ch+var_8]
.text:00417405                 mov     ebp, [esp+13Ch+var_4]
.text:0041740C                 add     esp, 13Ch
.text:00417412                 retn
.text:00417413 ; ---------------------------------------------------------------------------
.text:00417413
.text:00417413 loc_417413:                             ; CODE XREF: sub_417390+5C↑j
.text:00417413                 mov     [esp+13Ch+var_134], 104h
.text:0041741B                 lea     ebp, [esp+13Ch+String1]
.text:0041741F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00417423                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00417426                 call    sub_417710
.text:0041742B                 inc     eax
.text:0041742C                 mov     edx, 0FFFFFFFFh
.text:00417431                 jz      short loc_4173EE
.text:00417433                 mov     [esp+13Ch+var_134], ebx ; int
.text:00417437                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041743B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041743E                 call    sub_417340
.text:00417443                 mov     edx, eax
.text:00417445                 jmp     short loc_4173EE
.text:00417445 sub_417390      endp
.text:00417445
.text:00417445 ; ---------------------------------------------------------------------------
.text:00417447                 align 10h
.text:00417450
.text:00417450 ; =============== S U B R O U T I N E =======================================
.text:00417450
.text:00417450
.text:00417450 sub_417450      proc near               ; CODE XREF: sub_4172C0+1A↑p
.text:00417450
.text:00417450 lpTimeZoneInformation= dword ptr -0DCh
.text:00417450 var_D8          = dword ptr -0D8h
.text:00417450 var_D4          = dword ptr -0D4h
.text:00417450 var_D0          = dword ptr -0D0h
.text:00417450 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00417450 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00417450 arg_0           = dword ptr  4
.text:00417450 arg_4           = dword ptr  8
.text:00417450
.text:00417450                 push    edi
.text:00417451                 push    esi
.text:00417452                 push    ebx
.text:00417453                 sub     esp, 0D0h
.text:00417459                 mov     ebx, [esp+0DCh+arg_4]
.text:00417460                 mov     edi, [esp+0DCh+arg_0]
.text:00417467                 test    ebx, ebx
.text:00417469                 jz      short loc_417494
.text:0041746B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041746F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00417472                 call    GetTimeZoneInformation
.text:00417477                 sub     esp, 4
.text:0041747A                 cmp     eax, 0FFFFFFFFh
.text:0041747D                 jz      loc_417515
.text:00417483                 xor     ecx, ecx
.text:00417485                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00417489                 cmp     eax, 2
.text:0041748C                 setz    cl
.text:0041748F                 mov     [ebx], esi
.text:00417491                 mov     [ebx+4], ecx
.text:00417494
.text:00417494 loc_417494:                             ; CODE XREF: sub_417450+19↑j
.text:00417494                                         ; sub_417450+E0↓j
.text:00417494                 test    edi, edi
.text:00417496                 jz      short loc_417509
.text:00417498                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041749C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041749F                 call    GetSystemTimeAsFileTime
.text:004174A4                 sub     esp, 4
.text:004174A7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:004174AB                 mov     [esp+0DCh+var_D4], 989680h
.text:004174B3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:004174B7                 mov     [esp+0DCh+var_D0], 0
.text:004174BF                 add     ebx, 2AC18000h
.text:004174C5                 adc     esi, 0FE624E21h
.text:004174CB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:004174CF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004174D2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:004174D6                 mov     [esp+0DCh+var_D8], esi
.text:004174DA                 call    sub_418E70
.text:004174DF                 mov     [edi], eax
.text:004174E1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:004174E4                 mov     [esp+0DCh+var_D4], 989680h
.text:004174EC                 mov     [esp+0DCh+var_D0], 0
.text:004174F4                 mov     [esp+0DCh+var_D8], esi
.text:004174F8                 call    sub_418F90
.text:004174FD                 lea     ebx, [eax+eax*4]
.text:00417500                 lea     edx, [ebx+ebx*4]
.text:00417503                 shl     edx, 2
.text:00417506                 mov     [edi+4], edx
.text:00417509
.text:00417509 loc_417509:                             ; CODE XREF: sub_417450+46↑j
.text:00417509                 add     esp, 0D0h
.text:0041750F                 xor     eax, eax
.text:00417511                 pop     ebx
.text:00417512                 pop     esi
.text:00417513                 pop     edi
.text:00417514                 retn
.text:00417515 ; ---------------------------------------------------------------------------
.text:00417515
.text:00417515 loc_417515:                             ; CODE XREF: sub_417450+2D↑j
.text:00417515                 mov     dword ptr [ebx], 0
.text:0041751B                 mov     dword ptr [ebx+4], 0
.text:00417522                 call    sub_4140B0
.text:00417527                 mov     esi, eax
.text:00417529                 call    _errno
.text:0041752E                 mov     [eax], esi
.text:00417530                 jmp     loc_417494
.text:00417530 sub_417450      endp
.text:00417530
.text:00417530 ; ---------------------------------------------------------------------------
.text:00417535                 align 10h
.text:00417540                 sub     esp, 0Ch
.text:00417543                 mov     [esp+4], ebx
.text:00417547                 mov     [esp+8], esi
.text:0041754B                 xor     esi, esi
.text:0041754D                 call    sub_417820
.text:00417552                 mov     ebx, eax
.text:00417554                 call    sub_417810
.text:00417559                 cmp     ebx, eax
.text:0041755B                 jz      short loc_417574
.text:0041755D
.text:0041755D loc_41755D:                             ; CODE XREF: .text:00417582↓j
.text:0041755D                 mov     esi, 1
.text:00417562
.text:00417562 loc_417562:                             ; CODE XREF: .text:00417584↓j
.text:00417562                 mov     ds:dword_41BB90, esi
.text:00417568                 mov     ebx, [esp+4]
.text:0041756C                 mov     esi, [esp+8]
.text:00417570                 add     esp, 0Ch
.text:00417573                 retn
.text:00417574 ; ---------------------------------------------------------------------------
.text:00417574
.text:00417574 loc_417574:                             ; CODE XREF: .text:0041755B↑j
.text:00417574                 call    sub_417800
.text:00417579                 mov     ebx, eax
.text:0041757B                 call    sub_4177F0
.text:00417580                 cmp     ebx, eax
.text:00417582                 jnz     short loc_41755D
.text:00417584                 jmp     short loc_417562
.text:00417584 ; ---------------------------------------------------------------------------
.text:00417586                 align 10h
.text:00417590
.text:00417590 ; =============== S U B R O U T I N E =======================================
.text:00417590
.text:00417590
.text:00417590 ; int __cdecl sub_417590(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00417590 sub_417590      proc near               ; CODE XREF: sub_417710+93↓p
.text:00417590
.text:00417590 pvReserved      = dword ptr -35Ch
.text:00417590 pUnkOuter       = dword ptr -358h
.text:00417590 dwClsContext    = dword ptr -354h
.text:00417590 riid            = dword ptr -350h
.text:00417590 ppv             = dword ptr -34Ch
.text:00417590 cchWideChar     = dword ptr -348h
.text:00417590 var_334         = byte ptr -334h
.text:00417590 var_330         = dword ptr -330h
.text:00417590 String2         = byte ptr -32Ch
.text:00417590 WideCharStr     = word ptr -21Ch
.text:00417590 lpMultiByteStr  = dword ptr  4
.text:00417590 lpString1       = dword ptr  8
.text:00417590
.text:00417590                 push    edi
.text:00417591                 push    esi
.text:00417592                 push    ebx
.text:00417593                 sub     esp, 350h
.text:00417599                 mov     edi, [esp+35Ch+lpString1]
.text:004175A0                 mov     byte ptr [edi], 0
.text:004175A3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:004175AA                 call    OleInitialize
.text:004175AF                 sub     esp, 4
.text:004175B2                 cmp     eax, 1
.text:004175B5                 ja      loc_4176EF
.text:004175BB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:004175C3                 lea     ecx, [esp+35Ch+var_330]
.text:004175C7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:004175CB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004175D3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004175DB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004175E2                 call    CoCreateInstance
.text:004175E7                 sub     esp, 14h
.text:004175EA                 test    eax, eax
.text:004175EC                 js      loc_4176EF
.text:004175F2                 mov     ebx, [esp+35Ch+var_330]
.text:004175F6                 lea     edx, [esp+35Ch+var_334]
.text:004175FA                 mov     esi, [ebx]
.text:004175FC                 mov     [esp+35Ch+dwClsContext], edx
.text:00417600                 mov     [esp+35Ch+pvReserved], ebx
.text:00417603                 xor     ebx, ebx
.text:00417605                 mov     [esp+35Ch+pUnkOuter], offset dword_418600
.text:0041760D                 call    dword ptr [esi]
.text:0041760F                 sub     esp, 0Ch
.text:00417612                 lea     esi, [esp+35Ch+WideCharStr]
.text:00417619                 call    AreFileApisANSI
.text:0041761E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00417626                 test    eax, eax
.text:00417628                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041762F                 setz    bl
.text:00417632                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00417636                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041763E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00417642                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041764A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041764D                 call    MultiByteToWideChar
.text:00417652                 sub     esp, 18h
.text:00417655                 test    eax, eax
.text:00417657                 js      loc_4176EF
.text:0041765D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00417661                 mov     ebx, [edx]
.text:00417663                 mov     [esp+35Ch+dwClsContext], 0
.text:0041766B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041766F                 mov     [esp+35Ch+pvReserved], edx
.text:00417672                 call    dword ptr [ebx+14h]
.text:00417675                 sub     esp, 0Ch
.text:00417678                 test    eax, eax
.text:0041767A                 js      short loc_4176EF
.text:0041767C                 mov     ebx, [esp+35Ch+var_330]
.text:00417680                 lea     esi, [esp+35Ch+String2]
.text:00417684                 mov     ecx, [ebx]
.text:00417686                 mov     [esp+35Ch+pvReserved], ebx
.text:00417689                 mov     [esp+35Ch+ppv], 0
.text:00417691                 mov     [esp+35Ch+riid], 0
.text:00417699                 mov     [esp+35Ch+dwClsContext], 104h
.text:004176A1                 mov     [esp+35Ch+pUnkOuter], esi
.text:004176A5                 call    dword ptr [ecx+0Ch]
.text:004176A8                 sub     esp, 14h
.text:004176AB                 mov     ebx, eax
.text:004176AD                 test    eax, eax
.text:004176AF                 js      short loc_4176EF
.text:004176B1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:004176B5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:004176B8                 call    lstrcpyA
.text:004176BD                 sub     esp, 8
.text:004176C0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:004176C4                 mov     ecx, [edi]
.text:004176C6                 mov     [esp+35Ch+pvReserved], edi
.text:004176C9                 call    dword ptr [ecx+8]
.text:004176CC                 sub     esp, 4
.text:004176CF                 mov     edx, [esp+35Ch+var_330]
.text:004176D3                 mov     esi, [edx]
.text:004176D5                 mov     [esp+35Ch+pvReserved], edx
.text:004176D8                 call    dword ptr [esi+8]
.text:004176DB                 sub     esp, 4
.text:004176DE                 call    CoUninitialize
.text:004176E3                 mov     eax, ebx
.text:004176E5
.text:004176E5 loc_4176E5:                             ; CODE XREF: sub_417590+177↓j
.text:004176E5                 add     esp, 350h
.text:004176EB                 pop     ebx
.text:004176EC                 pop     esi
.text:004176ED                 pop     edi
.text:004176EE                 retn
.text:004176EF ; ---------------------------------------------------------------------------
.text:004176EF
.text:004176EF loc_4176EF:                             ; CODE XREF: sub_417590+25↑j
.text:004176EF                                         ; sub_417590+5C↑j ...
.text:004176EF                 call    sub_4140B0
.text:004176F4                 mov     edi, eax
.text:004176F6                 call    _errno
.text:004176FB                 mov     [eax], edi
.text:004176FD                 call    CoUninitialize
.text:00417702                 mov     eax, 0FFFFFFFFh
.text:00417707                 jmp     short loc_4176E5
.text:00417707 sub_417590      endp
.text:00417707
.text:00417707 ; ---------------------------------------------------------------------------
.text:00417709 ; const char Source[]
.text:00417709 Source          db '.lnk',0             ; DATA XREF: sub_417710+53↓o
.text:00417709                                         ; sub_417710:loc_417775↓o
.text:0041770E                 align 10h
.text:00417710
.text:00417710 ; =============== S U B R O U T I N E =======================================
.text:00417710
.text:00417710
.text:00417710 ; int __cdecl sub_417710(char *, LPSTR lpString1)
.text:00417710 sub_417710      proc near               ; CODE XREF: sub_417390+96↑p
.text:00417710
.text:00417710 Str             = dword ptr -1Ch
.text:00417710 Source          = dword ptr -18h
.text:00417710 Destination     = dword ptr -14h
.text:00417710 arg_0           = dword ptr  4
.text:00417710 lpString1       = dword ptr  8
.text:00417710
.text:00417710                 push    ebp
.text:00417711                 push    edi
.text:00417712                 push    esi
.text:00417713                 push    ebx
.text:00417714                 sub     esp, 0Ch
.text:00417717                 mov     ebx, [esp+1Ch+arg_0]
.text:0041771B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041771F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00417722                 call    strlen
.text:00417727                 add     eax, 5
.text:0041772A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041772D                 call    malloc
.text:00417732                 mov     [esp+1Ch+Destination], eax
.text:00417736                 test    eax, eax
.text:00417738                 jz      loc_4177E0
.text:0041773E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00417742                 mov     [esp+1Ch+Str], eax ; Destination
.text:00417745                 call    strcpy
.text:0041774A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00417752                 mov     eax, [esp+1Ch+Destination]
.text:00417756                 mov     [esp+1Ch+Str], eax ; Str
.text:00417759                 call    strrchr
.text:0041775E                 test    eax, eax
.text:00417760                 jz      short loc_417775
.text:00417762                 cld
.text:00417763                 mov     ebx, offset Source ; ".lnk"
.text:00417768                 mov     ecx, 5
.text:0041776D                 mov     esi, eax
.text:0041776F                 mov     edi, ebx
.text:00417771                 repe cmpsb
.text:00417773                 jz      short loc_417789
.text:00417775
.text:00417775 loc_417775:                             ; CODE XREF: sub_417710+50↑j
.text:00417775                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0041777D                 mov     edx, [esp+1Ch+Destination]
.text:00417781                 mov     [esp+1Ch+Str], edx ; Destination
.text:00417784                 call    strcat
.text:00417789
.text:00417789 loc_417789:                             ; CODE XREF: sub_417710+63↑j
.text:00417789                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00417790                 call    SetErrorMode
.text:00417795                 sub     esp, 4
.text:00417798                 mov     ebx, [esp+1Ch+Destination]
.text:0041779C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004177A0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004177A3                 call    sub_417590
.text:004177A8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004177AB                 mov     esi, eax
.text:004177AD                 call    free
.text:004177B2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004177B9                 call    SetErrorMode
.text:004177BE                 sub     esp, 4
.text:004177C1                 mov     [esp+1Ch+Str], ebp
.text:004177C4                 call    sub_4128A0
.text:004177C9                 inc     esi
.text:004177CA                 jz      short loc_4177E0
.text:004177CC                 mov     [esp+1Ch+arg_0], ebp
.text:004177D0                 add     esp, 0Ch
.text:004177D3                 pop     ebx
.text:004177D4                 pop     esi
.text:004177D5                 pop     edi
.text:004177D6                 pop     ebp
.text:004177D7                 jmp     strlen
.text:004177D7 ; ---------------------------------------------------------------------------
.text:004177DC                 align 10h
.text:004177E0
.text:004177E0 loc_4177E0:                             ; CODE XREF: sub_417710+28↑j
.text:004177E0                                         ; sub_417710+BA↑j
.text:004177E0                 add     esp, 0Ch
.text:004177E3                 mov     eax, 0FFFFFFFFh
.text:004177E8                 pop     ebx
.text:004177E9                 pop     esi
.text:004177EA                 pop     edi
.text:004177EB                 pop     ebp
.text:004177EC                 retn
.text:004177EC sub_417710      endp
.text:004177EC
.text:004177EC ; ---------------------------------------------------------------------------
.text:004177ED                 align 10h
.text:004177F0
.text:004177F0 ; =============== S U B R O U T I N E =======================================
.text:004177F0
.text:004177F0
.text:004177F0 sub_4177F0      proc near               ; CODE XREF: .text:0041757B↑p
.text:004177F0                 xor     eax, eax
.text:004177F2                 retn
.text:004177F2 sub_4177F0      endp
.text:004177F2
.text:004177F2 ; ---------------------------------------------------------------------------
.text:004177F3                 align 10h
.text:00417800
.text:00417800 ; =============== S U B R O U T I N E =======================================
.text:00417800
.text:00417800
.text:00417800 sub_417800      proc near               ; CODE XREF: .text:loc_417574↑p
.text:00417800                 xor     eax, eax
.text:00417802                 retn
.text:00417802 sub_417800      endp
.text:00417802
.text:00417802 ; ---------------------------------------------------------------------------
.text:00417803                 align 10h
.text:00417810
.text:00417810 ; =============== S U B R O U T I N E =======================================
.text:00417810
.text:00417810
.text:00417810 sub_417810      proc near               ; CODE XREF: .text:00417554↑p
.text:00417810                 xor     eax, eax
.text:00417812                 retn
.text:00417812 sub_417810      endp
.text:00417812
.text:00417812 ; ---------------------------------------------------------------------------
.text:00417813                 align 10h
.text:00417820
.text:00417820 ; =============== S U B R O U T I N E =======================================
.text:00417820
.text:00417820
.text:00417820 sub_417820      proc near               ; CODE XREF: .text:0041754D↑p
.text:00417820                 xor     eax, eax
.text:00417822                 retn
.text:00417822 sub_417820      endp
.text:00417822
.text:00417822 ; ---------------------------------------------------------------------------
.text:00417823                 align 10h
.text:00417830
.text:00417830 ; =============== S U B R O U T I N E =======================================
.text:00417830
.text:00417830 ; Attributes: thunk
.text:00417830
.text:00417830 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00417830 OleInitialize   proc near               ; CODE XREF: sub_417590+1A↑p
.text:00417830
.text:00417830 pvReserved      = dword ptr  4
.text:00417830
.text:00417830                 jmp     ds:__imp_OleInitialize
.text:00417830 OleInitialize   endp
.text:00417830
.text:00417830 ; ---------------------------------------------------------------------------
.text:00417836                 align 10h
.text:00417840
.text:00417840 ; =============== S U B R O U T I N E =======================================
.text:00417840
.text:00417840 ; Attributes: thunk
.text:00417840
.text:00417840 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00417840 CoCreateInstance proc near              ; CODE XREF: sub_417590+52↑p
.text:00417840
.text:00417840 rclsid          = dword ptr  4
.text:00417840 pUnkOuter       = dword ptr  8
.text:00417840 dwClsContext    = dword ptr  0Ch
.text:00417840 riid            = dword ptr  10h
.text:00417840 ppv             = dword ptr  14h
.text:00417840
.text:00417840                 jmp     ds:__imp_CoCreateInstance
.text:00417840 CoCreateInstance endp
.text:00417840
.text:00417840 ; ---------------------------------------------------------------------------
.text:00417846                 align 10h
.text:00417850
.text:00417850 ; =============== S U B R O U T I N E =======================================
.text:00417850
.text:00417850 ; Attributes: thunk
.text:00417850
.text:00417850 ; void __stdcall CoUninitialize()
.text:00417850 CoUninitialize  proc near               ; CODE XREF: sub_417590+14E↑p
.text:00417850                                         ; sub_417590+16D↑p
.text:00417850                 jmp     ds:__imp_CoUninitialize
.text:00417850 CoUninitialize  endp
.text:00417850
.text:00417850 ; ---------------------------------------------------------------------------
.text:00417856                 align 10h
.text:00417860                 add     al, 0BAh ; 'º'
.text:00417862                 retf
.text:00417862 ; ---------------------------------------------------------------------------
.text:00417863                 db 7Eh
.text:00417864                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00417864                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00417864                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00417864                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00417864                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00417864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00417864                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00417864                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00417864                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00417864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00417864                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00417864                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00417864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00417864                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00417864                 dd 0C4426C00h, 330h, 0
.text:00417998                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00417998                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00417998                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00417998                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004179E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004179E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004179E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004179E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004179E8                 dd 0BA94B00h, 1Bh, 0
.text:00417A48                 dd 0C0h, 46000000h, 1Ch, 0
.text:00417A58                 dd 0C0h, 46000000h, 331h, 0
.text:00417A68                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417A68                 dd 312h, 0
.text:00417A88                 dd 0C0h, 46000000h, 30Eh, 0
.text:00417A98                 dd 0C0h, 46000000h, 30Dh, 0
.text:00417AA8                 dd 0C0h, 46000000h, 311h, 0
.text:00417AB8                 dd 0C0h, 46000000h, 313h, 0
.text:00417AC8                 dd 0C0h, 46000000h, 30Ch, 0
.text:00417AD8                 dd 0C0h, 46000000h, 30Fh, 0
.text:00417AE8                 dd 0C0h, 46000000h, 310h, 0
.text:00417AF8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417AF8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00417B28                 dd 0C0h, 46000000h, 319h, 0
.text:00417B38                 dd 0C0h, 46000000h, 315h, 0
.text:00417B48                 dd 0C0h, 46000000h, 316h, 0
.text:00417B58                 dd 0C0h, 46000000h, 315h, 0
.text:00417B68                 dd 0C0h, 46000000h, 2E005h, 0
.text:00417B78                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00417B78                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00417B78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00417BB8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00417BB8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00417BB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00417BB8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00417BB8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00417BB8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00417BB8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00417BB8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00417BB8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00417BB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00417BB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00417BB8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417BB8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00417BB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00417BB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00417BB8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417BB8                 dd 2DE81h, 0
.text:00417D08                 dd 0C0h, 46000000h, 4 dup(0)
.text:00417D20                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00417D20                 dd 0
.text:00417D38                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417D38                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00417D38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00417D38                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00417D38                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417D38                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00417D38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00417D38                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00417D38                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00417D38                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00417D38                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00417D38                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00417D38                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00417D38                 dd 10Fh, 0
.text:00417E48                 dd 0C0h, 46000000h, 125h, 0
.text:00417E58                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00417E58                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00417E58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00417E98                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00417E98                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417E98                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00417E98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00417E98                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00417EF8                 dd 0C0h, 46000000h, 2E012h, 0
.text:00417F08                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00417F08                 dd 140h, 0
.text:00417F28                 dd 0C0h, 46000000h, 1, 0
.text:00417F38                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00417F38                 dd 71D3400h, 13Dh, 0
.text:00417F58                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00417F58                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00417F58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00417F58                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00417FA8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00417FA8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00417FA8                 dd 20405h, 0
.text:00417FD8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00417FE8                 dd 0C0h, 46000000h, 20406h, 0
.text:00417FF8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00418008                 dd 0C0h, 46000000h, 110h, 0
.text:00418018                 dd 0C0h, 46000000h, 10Eh, 0
.text:00418028                 dd 0C0h, 46000000h, 123h, 0
.text:00418038                 dd 0C0h, 46000000h, 124h, 0
.text:00418048                 dd 0C0h, 46000000h, 13h, 0
.text:00418058                 dd 0C0h, 46000000h, 14h, 0
.text:00418068                 dd 0C0h, 46000000h, 15h, 0
.text:00418078                 dd 0C0h, 46000000h, 20400h, 0
.text:00418088                 dd 0C0h, 46000000h, 121h, 0
.text:00418098                 dd 0C0h, 46000000h, 122h, 0
.text:004180A8                 dd 0C0h, 46000000h, 2E011h, 0
.text:004180B8                 dd 0C0h, 46000000h, 108h, 0
.text:004180C8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004180C8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004180C8                 dd 103h, 0
.text:004180F8                 dd 0C0h, 46000000h, 2E000h, 0
.text:00418108                 dd 0C0h, 46000000h, 106h, 0
.text:00418118                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00418118                 dd 107h, 0
.text:00418138                 dd 0C0h, 46000000h, 102h, 0
.text:00418148                 dd 0C0h, 46000000h, 104h, 0
.text:00418158                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00418158                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00418158                 dd 105h, 0
.text:00418188                 dd 0C0h, 46000000h, 13Bh, 0
.text:00418198                 dd 0C0h, 46000000h, 139h, 0
.text:004181A8                 dd 0C0h, 46000000h, 0Dh, 0
.text:004181B8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004181B8                 dd 101h, 0
.text:004181D8                 dd 0C0h, 46000000h, 100h, 0
.text:004181E8                 dd 0C0h, 46000000h, 20404h, 0
.text:004181F8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004181F8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00418228                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00418228                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00418228                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00418228                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00418278                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00418278                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00418278                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00418278                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00418278                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00418278                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:004182F8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:004182F8                 dd 0Ah, 0
.text:00418318                 dd 0C0h, 46000000h, 2, 0
.text:00418328                 dd 0C0h, 46000000h, 1Dh, 0
.text:00418338                 dd 0C0h, 46000000h, 3, 0
.text:00418348                 dd 0C0h, 46000000h, 16h, 0
.text:00418358                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00418358                 dd 1608D74Fh, 0Fh, 0
.text:00418378                 dd 0C0h, 46000000h, 20h, 0
.text:00418388                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00418388                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00418388                 dd 0
.text:004183B8                 dd 0C0h, 46000000h, 11Eh, 0
.text:004183C8                 dd 0C0h, 46000000h, 128h, 0
.text:004183D8                 dd 0C0h, 46000000h, 129h, 0
.text:004183E8                 dd 0C0h, 46000000h, 118h, 0
.text:004183F8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004183F8                 dd 70474000h, 11Bh, 0
.text:00418418                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00418418                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00418418                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00418418                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00418418                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00418478                 dd 0C0h, 46000000h, 116h, 0
.text:00418488                 dd 0C0h, 46000000h, 113h, 0
.text:00418498                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00418498                 dd 119h, 0
.text:004184B8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:004184B8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:004184B8                 dd 0
.text:004184E8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004184F8                 dd 0C0h, 46000000h, 11Dh, 0
.text:00418508                 dd 0C0h, 46000000h, 11Fh, 0
.text:00418518                 dd 0C0h, 46000000h, 112h, 0
.text:00418528                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00418528                 dd 18E6000h, 120h, 0
.text:00418548                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00418548                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00418548                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00418588                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00418588                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:004185B8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004185B8                 dd 11Ah, 0
.text:004185D8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004185D8                 dd 10Ch, 0
.text:004185F8                 dd 0C0h, 46000000h
.text:00418600 dword_418600    dd 10Bh, 0              ; DATA XREF: sub_417590+75↑o
.text:00418608                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00418608                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00418608                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00418608                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00418658                 dd 0C0h, 46000000h, 109h, 0
.text:00418668                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00418668                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00418668                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00418668                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00418668                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00418668                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00418668                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00418668                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00418668                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00418668                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00418668                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00418748                 dd 0C0h, 46000000h, 138h, 0
.text:00418758                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00418758                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00418758                 dd 27h, 0
.text:00418788                 dd 0C0h, 46000000h, 8, 0
.text:00418798                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00418798                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00418798                 dd 20D00h, 0
.text:004187C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004187D8                 dd 0C0h, 46000000h, 12h, 0
.text:004187E8                 dd 0C0h, 46000000h, 4, 0
.text:004187F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004187F8                 dd 7, 0
.text:00418818                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00418818                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00418848                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00418848                 dd 126h, 0
.text:00418868                 dd 0C0h, 46000000h, 10h, 0
.text:00418878                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00418878                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004188A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004188A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004188A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004188E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004188F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:00418908                 dd 0C0h, 46000000h, 26h, 0
.text:00418918                 dd 0C0h, 46000000h, 6, 0
.text:00418928                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00418928                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00418928                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00418968                 dd 0C0h, 46000000h, 20403h, 0
.text:00418978                 dd 0C0h, 46000000h, 20401h, 0
.text:00418988                 dd 0C0h, 46000000h, 20412h, 0
.text:00418998                 dd 0C0h, 46000000h, 20402h, 0
.text:004189A8                 dd 0C0h, 46000000h, 20411h, 0
.text:004189B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004189C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004189C8                 dd 10Dh, 0
.text:004189E8                 dd 0C0h, 46000000h, 127h, 0
.text:004189F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004189F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:004189F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00418A38                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00418A38                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00418A38                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00418A78                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00418A88                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00418A98                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00418AA8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00418AB8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00418AC8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00418AD8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00418AE8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00418AF8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00418B08                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00418B18                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00418B28                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00418B38                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00418B48                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00418B58                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00418B68                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00418B78                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00418B88                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00418B98                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00418BA8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00418BB8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00418BC8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00418BD8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00418BE8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00418BF8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00418C08                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00418C18                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00418C28                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00418C38                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00418C48                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00418C58                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00418C68                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00418C78                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00418C88                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00418C98                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00418CA8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00418CA8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00418CD0
.text:00418CD0 ; =============== S U B R O U T I N E =======================================
.text:00418CD0
.text:00418CD0 ; Attributes: thunk
.text:00418CD0
.text:00418CD0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00418CD0 mbrtowc         proc near               ; CODE XREF: sub_405BD0+757↑p
.text:00418CD0
.text:00418CD0 DstCh           = dword ptr  4
.text:00418CD0 SrcCh           = dword ptr  8
.text:00418CD0 SizeInBytes     = dword ptr  0Ch
.text:00418CD0 State           = dword ptr  10h
.text:00418CD0
.text:00418CD0                 jmp     ds:__imp_mbrtowc
.text:00418CD0 mbrtowc         endp
.text:00418CD0
.text:00418CD0 ; ---------------------------------------------------------------------------
.text:00418CD6                 align 10h
.text:00418CE0
.text:00418CE0 ; =============== S U B R O U T I N E =======================================
.text:00418CE0
.text:00418CE0 ; Attributes: thunk
.text:00418CE0
.text:00418CE0 ; wint_t __cdecl btowc(int Ch)
.text:00418CE0 btowc           proc near               ; CODE XREF: sub_40A110+1F73↑p
.text:00418CE0                 jmp     ds:__imp_btowc
.text:00418CE0 btowc           endp
.text:00418CE0
.text:00418CE0 ; ---------------------------------------------------------------------------
.text:00418CE6                 align 10h
.text:00418CF0
.text:00418CF0 ; =============== S U B R O U T I N E =======================================
.text:00418CF0
.text:00418CF0 ; Attributes: thunk
.text:00418CF0
.text:00418CF0 ; wctype_t __cdecl wctype(const char *name)
.text:00418CF0 wctype          proc near               ; CODE XREF: sub_40A110+1F29↑p
.text:00418CF0
.text:00418CF0 name            = dword ptr  4
.text:00418CF0
.text:00418CF0                 jmp     ds:__imp_wctype
.text:00418CF0 wctype          endp
.text:00418CF0
.text:00418CF0 ; ---------------------------------------------------------------------------
.text:00418CF6                 align 10h
.text:00418D00
.text:00418D00 ; =============== S U B R O U T I N E =======================================
.text:00418D00
.text:00418D00 ; Attributes: bp-based frame
.text:00418D00
.text:00418D00 sub_418D00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00418D00                 push    ebp
.text:00418D01                 mov     ecx, offset byte_41B000
.text:00418D06                 cmp     ecx, offset byte_41B000
.text:00418D0C                 mov     ebp, esp
.text:00418D0E                 jnb     short loc_418D26
.text:00418D10
.text:00418D10 loc_418D10:                             ; CODE XREF: sub_418D00+24↓j
.text:00418D10                 mov     edx, [ecx+4]
.text:00418D13                 mov     eax, [ecx]
.text:00418D15                 add     ecx, 8
.text:00418D18                 add     [edx+400000h], eax
.text:00418D1E                 cmp     ecx, offset byte_41B000
.text:00418D24                 jb      short loc_418D10
.text:00418D26
.text:00418D26 loc_418D26:                             ; CODE XREF: sub_418D00+E↑j
.text:00418D26                 pop     ebp
.text:00418D27                 retn
.text:00418D27 sub_418D00      endp
.text:00418D27
.text:00418D27 ; ---------------------------------------------------------------------------
.text:00418D28                 align 10h
.text:00418D30
.text:00418D30 ; =============== S U B R O U T I N E =======================================
.text:00418D30
.text:00418D30 ; Attributes: bp-based frame
.text:00418D30
.text:00418D30 sub_418D30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00418D30                                         ; TopLevelExceptionFilter+D7↑p
.text:00418D30                 push    ebp
.text:00418D31                 mov     ebp, esp
.text:00418D33                 fninit
.text:00418D35                 pop     ebp
.text:00418D36                 retn
.text:00418D36 sub_418D30      endp
.text:00418D36
.text:00418D36 ; ---------------------------------------------------------------------------
.text:00418D37                 align 10h
.text:00418D40
.text:00418D40 ; =============== S U B R O U T I N E =======================================
.text:00418D40
.text:00418D40 ; Attributes: bp-based frame
.text:00418D40
.text:00418D40 ; void __cdecl sub_418D40()
.text:00418D40 sub_418D40      proc near               ; DATA XREF: .text:loc_418D89↓o
.text:00418D40                                         ; sub_418DD0:loc_418DFE↓o
.text:00418D40                 push    ebp
.text:00418D41                 mov     ebp, esp
.text:00418D43                 sub     esp, 8
.text:00418D46                 mov     eax, off_41A104
.text:00418D4B                 mov     edx, [eax]
.text:00418D4D                 test    edx, edx
.text:00418D4F                 jnz     short loc_418D55
.text:00418D51
.text:00418D51 loc_418D51:                             ; CODE XREF: sub_418D40+2C↓j
.text:00418D51                 mov     esp, ebp
.text:00418D53                 pop     ebp
.text:00418D54                 retn
.text:00418D55 ; ---------------------------------------------------------------------------
.text:00418D55
.text:00418D55 loc_418D55:                             ; CODE XREF: sub_418D40+F↑j
.text:00418D55                                         ; sub_418D40+2A↓j
.text:00418D55                 call    dword ptr [eax]
.text:00418D57                 mov     edx, off_41A104
.text:00418D5D                 mov     ecx, [edx+4]
.text:00418D60                 lea     eax, [edx+4]
.text:00418D63                 mov     off_41A104, eax
.text:00418D68                 test    ecx, ecx
.text:00418D6A                 jnz     short loc_418D55
.text:00418D6C                 jmp     short loc_418D51
.text:00418D6C sub_418D40      endp
.text:00418D6C
.text:00418D6C ; ---------------------------------------------------------------------------
.text:00418D6E                 align 10h
.text:00418D70                 push    ebp
.text:00418D71                 mov     ebp, esp
.text:00418D73                 sub     esp, 8
.text:00418D76                 mov     [ebp-4], ebx
.text:00418D79                 mov     eax, ds:dword_419B50
.text:00418D7E                 cmp     eax, 0FFFFFFFFh
.text:00418D81                 jz      short loc_418DAC
.text:00418D83
.text:00418D83 loc_418D83:                             ; CODE XREF: .text:00418DB6↓j
.text:00418D83                                         ; .text:00418DC9↓j
.text:00418D83                 test    eax, eax
.text:00418D85                 mov     ebx, eax
.text:00418D87                 jnz     short loc_418DA0
.text:00418D89
.text:00418D89 loc_418D89:                             ; CODE XREF: .text:00418DAA↓j
.text:00418D89                 mov     dword ptr [esp], offset sub_418D40
.text:00418D90                 call    sub_401040
.text:00418D95                 mov     ebx, [ebp-4]
.text:00418D98                 mov     esp, ebp
.text:00418D9A                 pop     ebp
.text:00418D9B                 retn
.text:00418D9B ; ---------------------------------------------------------------------------
.text:00418D9C                 align 10h
.text:00418DA0
.text:00418DA0 loc_418DA0:                             ; CODE XREF: .text:00418D87↑j
.text:00418DA0                                         ; .text:00418DA8↓j
.text:00418DA0                 call    ds:dword_419B50[ebx*4]
.text:00418DA7                 dec     ebx
.text:00418DA8                 jnz     short loc_418DA0
.text:00418DAA                 jmp     short loc_418D89
.text:00418DAC ; ---------------------------------------------------------------------------
.text:00418DAC
.text:00418DAC loc_418DAC:                             ; CODE XREF: .text:00418D81↑j
.text:00418DAC                 mov     ecx, ds:dword_419B54
.text:00418DB2                 xor     eax, eax
.text:00418DB4                 test    ecx, ecx
.text:00418DB6                 jz      short loc_418D83
.text:00418DB8                 mov     edx, offset dword_419B50
.text:00418DBD                 lea     esi, [esi+0]
.text:00418DC0
.text:00418DC0 loc_418DC0:                             ; CODE XREF: .text:00418DC7↓j
.text:00418DC0                 inc     eax
.text:00418DC1                 mov     ecx, [edx+eax*4+4]
.text:00418DC5                 test    ecx, ecx
.text:00418DC7                 jnz     short loc_418DC0
.text:00418DC9                 jmp     short loc_418D83
.text:00418DC9 ; ---------------------------------------------------------------------------
.text:00418DCB                 align 10h
.text:00418DD0
.text:00418DD0 ; =============== S U B R O U T I N E =======================================
.text:00418DD0
.text:00418DD0 ; Attributes: bp-based frame
.text:00418DD0
.text:00418DD0 sub_418DD0      proc near               ; CODE XREF: sub_402010+13↑p
.text:00418DD0
.text:00418DD0 var_8           = dword ptr -8
.text:00418DD0 var_4           = dword ptr -4
.text:00418DD0
.text:00418DD0                 push    ebp
.text:00418DD1                 mov     ebp, esp
.text:00418DD3                 sub     esp, 8
.text:00418DD6                 mov     [ebp+var_4], ebx
.text:00418DD9                 mov     edx, dword_41A100
.text:00418DDF                 test    edx, edx
.text:00418DE1                 jnz     short loc_418E0A
.text:00418DE3                 mov     eax, ds:dword_419B50
.text:00418DE8                 mov     edx, 1
.text:00418DED                 mov     dword_41A100, edx
.text:00418DF3                 cmp     eax, 0FFFFFFFFh
.text:00418DF6                 jz      short loc_418E1D
.text:00418DF8
.text:00418DF8 loc_418DF8:                             ; CODE XREF: sub_418DD0+57↓j
.text:00418DF8                                         ; sub_418DD0+69↓j
.text:00418DF8                 test    eax, eax
.text:00418DFA                 mov     ebx, eax
.text:00418DFC                 jnz     short loc_418E11
.text:00418DFE
.text:00418DFE loc_418DFE:                             ; CODE XREF: sub_418DD0+4B↓j
.text:00418DFE                 mov     [esp+8+var_8], offset sub_418D40 ; void (__cdecl *)()
.text:00418E05                 call    sub_401040
.text:00418E0A
.text:00418E0A loc_418E0A:                             ; CODE XREF: sub_418DD0+11↑j
.text:00418E0A                 mov     ebx, [ebp+var_4]
.text:00418E0D                 mov     esp, ebp
.text:00418E0F                 pop     ebp
.text:00418E10                 retn
.text:00418E11 ; ---------------------------------------------------------------------------
.text:00418E11
.text:00418E11 loc_418E11:                             ; CODE XREF: sub_418DD0+2C↑j
.text:00418E11                                         ; sub_418DD0+49↓j
.text:00418E11                 call    ds:dword_419B50[ebx*4]
.text:00418E18                 dec     ebx
.text:00418E19                 jnz     short loc_418E11
.text:00418E1B                 jmp     short loc_418DFE
.text:00418E1D ; ---------------------------------------------------------------------------
.text:00418E1D
.text:00418E1D loc_418E1D:                             ; CODE XREF: sub_418DD0+26↑j
.text:00418E1D                 mov     ecx, ds:dword_419B54
.text:00418E23                 xor     eax, eax
.text:00418E25                 test    ecx, ecx
.text:00418E27                 jz      short loc_418DF8
.text:00418E29                 mov     edx, offset dword_419B50
.text:00418E2E                 mov     esi, esi
.text:00418E30
.text:00418E30 loc_418E30:                             ; CODE XREF: sub_418DD0+67↓j
.text:00418E30                 inc     eax
.text:00418E31                 mov     ebx, [edx+eax*4+4]
.text:00418E35                 test    ebx, ebx
.text:00418E37                 jnz     short loc_418E30
.text:00418E39                 jmp     short loc_418DF8
.text:00418E39 sub_418DD0      endp
.text:00418E39
.text:00418E39 ; ---------------------------------------------------------------------------
.text:00418E3B                 align 10h
.text:00418E40
.text:00418E40 ; =============== S U B R O U T I N E =======================================
.text:00418E40
.text:00418E40 ; Attributes: info_from_lumina
.text:00418E40
.text:00418E40 ; void *__cdecl _alloca(size_t Size)
.text:00418E40 __alloca        proc near               ; CODE XREF: sub_402010+E↑p
.text:00418E40                 push    ecx
.text:00418E41                 mov     ecx, esp
.text:00418E43                 add     ecx, 8
.text:00418E46
.text:00418E46 loc_418E46:                             ; CODE XREF: __alloca+1B↓j
.text:00418E46                 cmp     eax, 1000h
.text:00418E4B                 jb      short loc_418E5D
.text:00418E4D                 sub     ecx, 1000h
.text:00418E53                 or      dword ptr [ecx], 0
.text:00418E56                 sub     eax, 1000h
.text:00418E5B                 jmp     short loc_418E46
.text:00418E5D ; ---------------------------------------------------------------------------
.text:00418E5D
.text:00418E5D loc_418E5D:                             ; CODE XREF: __alloca+B↑j
.text:00418E5D                 sub     ecx, eax
.text:00418E5F                 or      dword ptr [ecx], 0
.text:00418E62                 mov     eax, esp
.text:00418E64                 mov     esp, ecx
.text:00418E66                 mov     ecx, [eax]
.text:00418E68                 mov     eax, [eax+4]
.text:00418E6B                 jmp     eax
.text:00418E6B __alloca        endp
.text:00418E6B
.text:00418E6B ; ---------------------------------------------------------------------------
.text:00418E6D                 align 10h
.text:00418E70
.text:00418E70 ; =============== S U B R O U T I N E =======================================
.text:00418E70
.text:00418E70 ; Attributes: bp-based frame
.text:00418E70
.text:00418E70 sub_418E70      proc near               ; CODE XREF: sub_4108F0+55E↑p
.text:00418E70                                         ; sub_4108F0+5D5↑p ...
.text:00418E70
.text:00418E70 var_24          = dword ptr -24h
.text:00418E70 var_20          = dword ptr -20h
.text:00418E70 var_1C          = dword ptr -1Ch
.text:00418E70 var_18          = dword ptr -18h
.text:00418E70 var_14          = dword ptr -14h
.text:00418E70 var_C           = dword ptr -0Ch
.text:00418E70 var_8           = dword ptr -8
.text:00418E70 var_4           = dword ptr -4
.text:00418E70 arg_0           = dword ptr  8
.text:00418E70 arg_4           = dword ptr  0Ch
.text:00418E70 arg_8           = dword ptr  10h
.text:00418E70 arg_C           = dword ptr  14h
.text:00418E70
.text:00418E70                 push    ebp
.text:00418E71                 mov     ebp, esp
.text:00418E73                 sub     esp, 28h
.text:00418E76                 mov     [ebp+var_C], ebx
.text:00418E79                 mov     edx, [ebp+arg_C]
.text:00418E7C                 mov     ecx, [ebp+arg_0]
.text:00418E7F                 mov     [ebp+var_8], esi
.text:00418E82                 mov     eax, [ebp+arg_8]
.text:00418E85                 test    edx, edx
.text:00418E87                 mov     [ebp+var_4], edi
.text:00418E8A                 mov     ebx, [ebp+arg_4]
.text:00418E8D                 mov     esi, eax
.text:00418E8F                 mov     [ebp+var_18], 0
.text:00418E96                 mov     [ebp+var_14], 0
.text:00418E9D                 mov     [ebp+var_1C], ecx
.text:00418EA0                 jnz     short loc_418EF2
.text:00418EA2                 cmp     eax, ebx
.text:00418EA4                 jbe     short loc_418ED0
.text:00418EA6                 mov     eax, ecx
.text:00418EA8                 mov     edx, ebx
.text:00418EAA                 div     esi
.text:00418EAC                 mov     edi, eax
.text:00418EAE                 mov     esi, esi
.text:00418EB0
.text:00418EB0 loc_418EB0:                             ; CODE XREF: sub_418E70+88↓j
.text:00418EB0                                         ; sub_418E70+A4↓j ...
.text:00418EB0                 xor     ecx, ecx
.text:00418EB2
.text:00418EB2 loc_418EB2:                             ; CODE XREF: sub_418E70+80↓j
.text:00418EB2                 mov     [ebp+var_18], edi
.text:00418EB5                 mov     ebx, [ebp+var_C]
.text:00418EB8                 mov     eax, [ebp+var_18]
.text:00418EBB                 mov     [ebp+var_14], ecx
.text:00418EBE                 mov     esi, [ebp+var_8]
.text:00418EC1                 mov     edx, [ebp+var_14]
.text:00418EC4                 mov     edi, [ebp+var_4]
.text:00418EC7                 mov     esp, ebp
.text:00418EC9                 pop     ebp
.text:00418ECA                 retn
.text:00418ECA ; ---------------------------------------------------------------------------
.text:00418ECB                 align 10h
.text:00418ED0
.text:00418ED0 loc_418ED0:                             ; CODE XREF: sub_418E70+34↑j
.text:00418ED0                 test    eax, eax
.text:00418ED2                 jnz     short loc_418EE1
.text:00418ED4                 mov     eax, 1
.text:00418ED9                 xor     ecx, ecx
.text:00418EDB                 xor     edx, edx
.text:00418EDD                 div     ecx
.text:00418EDF                 mov     esi, eax
.text:00418EE1
.text:00418EE1 loc_418EE1:                             ; CODE XREF: sub_418E70+62↑j
.text:00418EE1                 mov     eax, ebx
.text:00418EE3                 xor     edx, edx
.text:00418EE5                 div     esi
.text:00418EE7                 mov     ecx, eax
.text:00418EE9                 mov     eax, [ebp+var_1C]
.text:00418EEC                 div     esi
.text:00418EEE                 mov     edi, eax
.text:00418EF0                 jmp     short loc_418EB2
.text:00418EF2 ; ---------------------------------------------------------------------------
.text:00418EF2
.text:00418EF2 loc_418EF2:                             ; CODE XREF: sub_418E70+30↑j
.text:00418EF2                 cmp     edx, ebx
.text:00418EF4                 jbe     short loc_418F00
.text:00418EF6                 xor     edi, edi
.text:00418EF8                 jmp     short loc_418EB0
.text:00418EF8 ; ---------------------------------------------------------------------------
.text:00418EFA                 align 10h
.text:00418F00
.text:00418F00 loc_418F00:                             ; CODE XREF: sub_418E70+84↑j
.text:00418F00                 bsr     eax, edx
.text:00418F03                 xor     eax, 1Fh
.text:00418F06                 mov     [ebp+var_20], eax
.text:00418F09                 jnz     short loc_418F20
.text:00418F0B                 cmp     ebx, edx
.text:00418F0D                 ja      short loc_418F16
.text:00418F0F                 xor     edi, edi
.text:00418F11                 cmp     [ebp+var_1C], esi
.text:00418F14                 jb      short loc_418EB0
.text:00418F16
.text:00418F16 loc_418F16:                             ; CODE XREF: sub_418E70+9D↑j
.text:00418F16                 mov     edi, 1
.text:00418F1B                 jmp     short loc_418EB0
.text:00418F1B ; ---------------------------------------------------------------------------
.text:00418F1D                 align 10h
.text:00418F20
.text:00418F20 loc_418F20:                             ; CODE XREF: sub_418E70+99↑j
.text:00418F20                 mov     eax, [ebp+var_20]
.text:00418F23                 mov     ecx, 20h ; ' '
.text:00418F28                 sub     ecx, eax
.text:00418F2A                 mov     [ebp+var_24], ecx
.text:00418F2D                 mov     eax, esi
.text:00418F2F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418F33                 shl     edx, cl
.text:00418F35                 mov     edi, edx
.text:00418F37                 movzx   ecx, byte ptr [ebp+var_24]
.text:00418F3B                 mov     edx, ebx
.text:00418F3D                 shr     eax, cl
.text:00418F3F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418F43                 or      edi, eax
.text:00418F45                 mov     eax, [ebp+var_1C]
.text:00418F48                 shl     esi, cl
.text:00418F4A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00418F4E                 shr     edx, cl
.text:00418F50                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418F54                 shl     ebx, cl
.text:00418F56                 movzx   ecx, byte ptr [ebp+var_24]
.text:00418F5A                 shr     eax, cl
.text:00418F5C                 or      ebx, eax
.text:00418F5E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418F62                 mov     eax, ebx
.text:00418F64                 div     edi
.text:00418F66                 mov     ebx, edx
.text:00418F68                 mov     edi, eax
.text:00418F6A                 shl     [ebp+var_1C], cl
.text:00418F6D                 mul     esi
.text:00418F6F                 cmp     edx, ebx
.text:00418F71                 ja      short loc_418F84
.text:00418F73                 cmp     edx, ebx
.text:00418F75                 jnz     loc_418EB0
.text:00418F7B                 cmp     eax, [ebp+var_1C]
.text:00418F7E                 jbe     loc_418EB0
.text:00418F84
.text:00418F84 loc_418F84:                             ; CODE XREF: sub_418E70+101↑j
.text:00418F84                 dec     edi
.text:00418F85                 jmp     loc_418EB0
.text:00418F85 sub_418E70      endp
.text:00418F85
.text:00418F85 ; ---------------------------------------------------------------------------
.text:00418F8A                 align 10h
.text:00418F90
.text:00418F90 ; =============== S U B R O U T I N E =======================================
.text:00418F90
.text:00418F90 ; Attributes: bp-based frame
.text:00418F90
.text:00418F90 sub_418F90      proc near               ; CODE XREF: sub_4108F0+585↑p
.text:00418F90                                         ; sub_4108F0+5FE↑p ...
.text:00418F90
.text:00418F90 var_34          = dword ptr -34h
.text:00418F90 var_2C          = dword ptr -2Ch
.text:00418F90 var_28          = dword ptr -28h
.text:00418F90 var_24          = dword ptr -24h
.text:00418F90 var_20          = dword ptr -20h
.text:00418F90 var_1C          = dword ptr -1Ch
.text:00418F90 var_18          = dword ptr -18h
.text:00418F90 var_14          = dword ptr -14h
.text:00418F90 arg_0           = dword ptr  8
.text:00418F90 arg_4           = dword ptr  0Ch
.text:00418F90 arg_8           = dword ptr  10h
.text:00418F90 arg_C           = dword ptr  14h
.text:00418F90
.text:00418F90                 push    ebp
.text:00418F91                 mov     ebp, esp
.text:00418F93                 push    edi
.text:00418F94                 push    esi
.text:00418F95                 push    ebx
.text:00418F96                 sub     esp, 2Ch
.text:00418F99                 mov     edx, [ebp+arg_C]
.text:00418F9C                 mov     [ebp+var_20], 0
.text:00418FA3                 mov     ecx, [ebp+arg_0]
.text:00418FA6                 mov     ebx, [ebp+arg_4]
.text:00418FA9                 mov     [ebp+var_1C], 0
.text:00418FB0                 mov     eax, [ebp+arg_8]
.text:00418FB3                 test    edx, edx
.text:00418FB5                 mov     [ebp+var_24], edx
.text:00418FB8                 mov     edi, ebx
.text:00418FBA                 mov     esi, eax
.text:00418FBC                 mov     [ebp+var_28], ecx
.text:00418FBF                 jnz     short loc_419020
.text:00418FC1                 cmp     eax, ebx
.text:00418FC3                 jbe     short loc_419000
.text:00418FC5                 mov     eax, ecx
.text:00418FC7                 mov     edx, ebx
.text:00418FC9                 div     esi
.text:00418FCB
.text:00418FCB loc_418FCB:                             ; CODE XREF: sub_418F90+8B↓j
.text:00418FCB                 mov     [ebp+var_28], edx
.text:00418FCE                 lea     ecx, [ebp+var_18]
.text:00418FD1                 test    ecx, ecx
.text:00418FD3                 jz      short loc_418FEE
.text:00418FD5                 mov     [ebp+var_1C], 0
.text:00418FDC
.text:00418FDC loc_418FDC:                             ; CODE XREF: sub_418F90+DA↓j
.text:00418FDC                 mov     eax, [ebp+var_28]
.text:00418FDF                 mov     [ebp+var_20], eax
.text:00418FE2                 mov     edx, [ebp+var_20]
.text:00418FE5                 mov     ecx, [ebp+var_1C]
.text:00418FE8                 mov     [ebp+var_18], edx
.text:00418FEB                 mov     [ebp+var_14], ecx
.text:00418FEE
.text:00418FEE loc_418FEE:                             ; CODE XREF: sub_418F90+43↑j
.text:00418FEE                                         ; sub_418F90+A7↓j ...
.text:00418FEE                 mov     eax, [ebp+var_18]
.text:00418FF1                 mov     edx, [ebp+var_14]
.text:00418FF4                 add     esp, 2Ch
.text:00418FF7                 pop     ebx
.text:00418FF8                 pop     esi
.text:00418FF9                 pop     edi
.text:00418FFA                 pop     ebp
.text:00418FFB                 retn
.text:00418FFB ; ---------------------------------------------------------------------------
.text:00418FFC                 align 10h
.text:00419000
.text:00419000 loc_419000:                             ; CODE XREF: sub_418F90+33↑j
.text:00419000                 test    eax, eax
.text:00419002                 jnz     short loc_41900F
.text:00419004                 mov     eax, 1
.text:00419009                 xor     edx, edx
.text:0041900B                 div     esi
.text:0041900D                 mov     esi, eax
.text:0041900F
.text:0041900F loc_41900F:                             ; CODE XREF: sub_418F90+72↑j
.text:0041900F                 mov     eax, edi
.text:00419011                 mov     edx, [ebp+var_24]
.text:00419014                 div     esi
.text:00419016                 mov     eax, [ebp+var_28]
.text:00419019                 div     esi
.text:0041901B                 jmp     short loc_418FCB
.text:0041901B ; ---------------------------------------------------------------------------
.text:0041901D                 align 10h
.text:00419020
.text:00419020 loc_419020:                             ; CODE XREF: sub_418F90+2F↑j
.text:00419020                 cmp     [ebp+var_24], ebx
.text:00419023                 jbe     short loc_419040
.text:00419025                 mov     [ebp+var_20], ecx
.text:00419028
.text:00419028 loc_419028:                             ; CODE XREF: sub_418F90+15B↓j
.text:00419028                 mov     [ebp+var_1C], edi
.text:0041902B                 mov     eax, [ebp+var_20]
.text:0041902E                 mov     edx, [ebp+var_1C]
.text:00419031                 mov     [ebp+var_18], eax
.text:00419034                 mov     [ebp+var_14], edx
.text:00419037                 jmp     short loc_418FEE
.text:00419037 ; ---------------------------------------------------------------------------
.text:00419039                 align 10h
.text:00419040
.text:00419040 loc_419040:                             ; CODE XREF: sub_418F90+93↑j
.text:00419040                 bsr     eax, [ebp+var_24]
.text:00419044                 mov     ebx, eax
.text:00419046                 xor     ebx, 1Fh
.text:00419049                 jnz     short loc_419070
.text:0041904B                 cmp     edi, [ebp+var_24]
.text:0041904E                 ja      short loc_419055
.text:00419050                 cmp     [ebp+var_28], esi
.text:00419053                 jb      short loc_419060
.text:00419055
.text:00419055 loc_419055:                             ; CODE XREF: sub_418F90+BE↑j
.text:00419055                 mov     edx, [ebp+var_28]
.text:00419058                 sub     edx, esi
.text:0041905A                 sbb     edi, [ebp+var_24]
.text:0041905D                 mov     [ebp+var_28], edx
.text:00419060
.text:00419060 loc_419060:                             ; CODE XREF: sub_418F90+C3↑j
.text:00419060                 lea     ecx, [ebp+var_18]
.text:00419063                 test    ecx, ecx
.text:00419065                 jz      short loc_418FEE
.text:00419067                 mov     [ebp+var_1C], edi
.text:0041906A                 jmp     loc_418FDC
.text:0041906A ; ---------------------------------------------------------------------------
.text:0041906F                 align 10h
.text:00419070
.text:00419070 loc_419070:                             ; CODE XREF: sub_418F90+B9↑j
.text:00419070                 mov     edx, [ebp+var_24]
.text:00419073                 mov     eax, 20h ; ' '
.text:00419078                 mov     cl, bl
.text:0041907A                 sub     eax, ebx
.text:0041907C                 mov     [ebp+var_2C], eax
.text:0041907F                 shl     edx, cl
.text:00419081                 mov     eax, esi
.text:00419083                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00419087                 shr     eax, cl
.text:00419089                 mov     cl, bl
.text:0041908B                 shl     esi, cl
.text:0041908D                 or      edx, eax
.text:0041908F                 mov     eax, [ebp+var_28]
.text:00419092                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00419096                 mov     [ebp+var_24], edx
.text:00419099                 mov     edx, edi
.text:0041909B                 shr     edx, cl
.text:0041909D                 mov     cl, bl
.text:0041909F                 shl     edi, cl
.text:004190A1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004190A5                 shr     eax, cl
.text:004190A7                 or      edi, eax
.text:004190A9                 mov     eax, edi
.text:004190AB                 mov     cl, bl
.text:004190AD                 div     [ebp+var_24]
.text:004190B0                 shl     [ebp+var_28], cl
.text:004190B3                 mov     edi, edx
.text:004190B5                 mul     esi
.text:004190B7                 mov     [ebp+var_34], eax
.text:004190BA                 cmp     edx, edi
.text:004190BC                 ja      short loc_4190F8
.text:004190BE                 cmp     edx, edi
.text:004190C0                 jz      short loc_4190F0
.text:004190C2
.text:004190C2 loc_4190C2:                             ; CODE XREF: sub_418F90+166↓j
.text:004190C2                                         ; sub_418F90+173↓j
.text:004190C2                 lea     eax, [ebp+var_18]
.text:004190C5                 test    eax, eax
.text:004190C7                 jz      loc_418FEE
.text:004190CD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004190D1                 mov     eax, [ebp+var_28]
.text:004190D4                 sub     eax, [ebp+var_34]
.text:004190D7                 sbb     edi, edx
.text:004190D9                 mov     [ebp+var_28], eax
.text:004190DC                 mov     edx, edi
.text:004190DE                 shl     edx, cl
.text:004190E0                 mov     cl, bl
.text:004190E2                 shr     eax, cl
.text:004190E4                 or      edx, eax
.text:004190E6                 mov     [ebp+var_20], edx
.text:004190E9                 shr     edi, cl
.text:004190EB                 jmp     loc_419028
.text:004190F0 ; ---------------------------------------------------------------------------
.text:004190F0
.text:004190F0 loc_4190F0:                             ; CODE XREF: sub_418F90+130↑j
.text:004190F0                 mov     eax, [ebp+var_28]
.text:004190F3                 cmp     [ebp+var_34], eax
.text:004190F6                 jbe     short loc_4190C2
.text:004190F8
.text:004190F8 loc_4190F8:                             ; CODE XREF: sub_418F90+12C↑j
.text:004190F8                 mov     ecx, [ebp+var_34]
.text:004190FB                 sub     ecx, esi
.text:004190FD                 sbb     edx, [ebp+var_24]
.text:00419100                 mov     [ebp+var_34], ecx
.text:00419103                 jmp     short loc_4190C2
.text:00419103 sub_418F90      endp
.text:00419103
.text:00419103 ; ---------------------------------------------------------------------------
.text:00419105                 align 10h
.text:00419110
.text:00419110 ; =============== S U B R O U T I N E =======================================
.text:00419110
.text:00419110 ; Attributes: thunk
.text:00419110
.text:00419110 ; int __cdecl close(int FileHandle)
.text:00419110 _close          proc near               ; CODE XREF: sub_403190+126↑p
.text:00419110
.text:00419110 FileHandle      = dword ptr  4
.text:00419110
.text:00419110                 jmp     ds:__imp__close
.text:00419110 _close          endp
.text:00419110
.text:00419110 ; ---------------------------------------------------------------------------
.text:00419116                 align 10h
.text:00419120
.text:00419120 ; =============== S U B R O U T I N E =======================================
.text:00419120
.text:00419120 ; Attributes: thunk
.text:00419120
.text:00419120 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00419120 _read           proc near               ; CODE XREF: sub_403190+CE↑p
.text:00419120                                         ; sub_403190+1B2↑p
.text:00419120
.text:00419120 FileHandle      = dword ptr  4
.text:00419120 DstBuf          = dword ptr  8
.text:00419120 MaxCharCount    = dword ptr  0Ch
.text:00419120
.text:00419120                 jmp     ds:__imp__read
.text:00419120 _read           endp
.text:00419120
.text:00419120 ; ---------------------------------------------------------------------------
.text:00419126                 align 10h
.text:00419130
.text:00419130 ; =============== S U B R O U T I N E =======================================
.text:00419130
.text:00419130 ; Attributes: thunk
.text:00419130
.text:00419130 ; int open(const char *FileName, int OpenFlag, ...)
.text:00419130 _open           proc near               ; CODE XREF: sub_403190+24D↑p
.text:00419130
.text:00419130 FileName        = dword ptr  4
.text:00419130 OpenFlag        = dword ptr  8
.text:00419130
.text:00419130                 jmp     ds:__imp__open
.text:00419130 _open           endp
.text:00419130
.text:00419130 ; ---------------------------------------------------------------------------
.text:00419136                 align 10h
.text:00419140
.text:00419140 ; =============== S U B R O U T I N E =======================================
.text:00419140
.text:00419140 ; Attributes: thunk
.text:00419140
.text:00419140 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00419140 _stricmp        proc near               ; CODE XREF: sub_4111A0+46F↑p
.text:00419140                                         ; sub_413120+2E↑p ...
.text:00419140
.text:00419140 String1         = dword ptr  4
.text:00419140 String2         = dword ptr  8
.text:00419140
.text:00419140                 jmp     ds:__imp__stricmp
.text:00419140 _stricmp        endp
.text:00419140
.text:00419140 ; ---------------------------------------------------------------------------
.text:00419146                 align 10h
.text:00419150
.text:00419150 ; =============== S U B R O U T I N E =======================================
.text:00419150
.text:00419150 ; Attributes: thunk
.text:00419150
.text:00419150 ; char *__cdecl strdup(const char *String)
.text:00419150 _strdup         proc near               ; CODE XREF: sub_412D50+101↑p
.text:00419150                                         ; .text:00412FBA↑p ...
.text:00419150
.text:00419150 String          = dword ptr  4
.text:00419150
.text:00419150                 jmp     ds:__imp__strdup
.text:00419150 _strdup         endp
.text:00419150
.text:00419150 ; ---------------------------------------------------------------------------
.text:00419156                 align 10h
.text:00419160
.text:00419160 ; =============== S U B R O U T I N E =======================================
.text:00419160
.text:00419160 ; Attributes: thunk
.text:00419160
.text:00419160 ; int __cdecl getpid()
.text:00419160 _getpid         proc near               ; CODE XREF: sub_416E10+84↑p
.text:00419160                 jmp     ds:__imp__getpid
.text:00419160 _getpid         endp
.text:00419160
.text:00419160 ; ---------------------------------------------------------------------------
.text:00419166                 align 10h
.text:00419170
.text:00419170 ; =============== S U B R O U T I N E =======================================
.text:00419170
.text:00419170 ; Attributes: thunk
.text:00419170
.text:00419170 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00419170 _chmod          proc near               ; CODE XREF: sub_417240+41↑j
.text:00419170
.text:00419170 FileName        = dword ptr  4
.text:00419170 AccessMode      = dword ptr  8
.text:00419170
.text:00419170                 jmp     ds:__imp__chmod
.text:00419170 _chmod          endp
.text:00419170
.text:00419170 ; ---------------------------------------------------------------------------
.text:00419176                 align 10h
.text:00419180                 jmp     ds:__set_app_type
.text:00419180 ; ---------------------------------------------------------------------------
.text:00419186                 align 10h
.text:00419190
.text:00419190 ; =============== S U B R O U T I N E =======================================
.text:00419190
.text:00419190 ; Attributes: thunk
.text:00419190
.text:00419190 ; void __cdecl cexit()
.text:00419190 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00419190                 jmp     ds:__imp__cexit
.text:00419190 _cexit          endp
.text:00419190
.text:00419190 ; ---------------------------------------------------------------------------
.text:00419196                 align 10h
.text:004191A0
.text:004191A0 ; =============== S U B R O U T I N E =======================================
.text:004191A0
.text:004191A0 ; Attributes: thunk
.text:004191A0
.text:004191A0 ; char ***__cdecl _p__environ()
.text:004191A0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004191A0                 jmp     ds:__imp___p__environ
.text:004191A0 __p__environ    endp
.text:004191A0
.text:004191A0 ; ---------------------------------------------------------------------------
.text:004191A6                 align 10h
.text:004191B0
.text:004191B0 ; =============== S U B R O U T I N E =======================================
.text:004191B0
.text:004191B0 ; Attributes: thunk
.text:004191B0
.text:004191B0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004191B0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004191B0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004191B0
.text:004191B0 Signal          = dword ptr  4
.text:004191B0 Function        = dword ptr  8
.text:004191B0
.text:004191B0                 jmp     ds:__imp_signal
.text:004191B0 signal          endp
.text:004191B0
.text:004191B0 ; ---------------------------------------------------------------------------
.text:004191B6                 align 10h
.text:004191C0
.text:004191C0 ; =============== S U B R O U T I N E =======================================
.text:004191C0
.text:004191C0 ; Attributes: thunk
.text:004191C0
.text:004191C0 ; int *__cdecl _p__fmode()
.text:004191C0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004191C0                 jmp     ds:__imp___p__fmode
.text:004191C0 __p__fmode      endp
.text:004191C0
.text:004191C0 ; ---------------------------------------------------------------------------
.text:004191C6                 align 10h
.text:004191D0
.text:004191D0 ; =============== S U B R O U T I N E =======================================
.text:004191D0
.text:004191D0 ; Attributes: thunk
.text:004191D0
.text:004191D0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004191D0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004191D0                                         ; sub_401080+90↑p ...
.text:004191D0
.text:004191D0 FileHandle      = dword ptr  4
.text:004191D0 Mode            = dword ptr  8
.text:004191D0
.text:004191D0                 jmp     ds:__imp__setmode
.text:004191D0 _setmode        endp
.text:004191D0
.text:004191D0 ; ---------------------------------------------------------------------------
.text:004191D6                 align 10h
.text:004191E0
.text:004191E0 ; =============== S U B R O U T I N E =======================================
.text:004191E0
.text:004191E0 ; Attributes: thunk
.text:004191E0
.text:004191E0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004191E0                 jmp     ds:__imp___getmainargs
.text:004191E0 __getmainargs   endp
.text:004191E0
.text:004191E0 ; ---------------------------------------------------------------------------
.text:004191E6                 align 10h
.text:004191F0
.text:004191F0 ; =============== S U B R O U T I N E =======================================
.text:004191F0
.text:004191F0 ; Attributes: thunk
.text:004191F0
.text:004191F0 ; int __cdecl fclose(FILE *Stream)
.text:004191F0 fclose          proc near               ; CODE XREF: sub_402010+91F↑p
.text:004191F0                                         ; sub_40FF80+27↑p ...
.text:004191F0
.text:004191F0 Stream          = dword ptr  4
.text:004191F0
.text:004191F0                 jmp     ds:__imp_fclose
.text:004191F0 fclose          endp
.text:004191F0
.text:004191F0 ; ---------------------------------------------------------------------------
.text:004191F6                 align 10h
.text:00419200
.text:00419200 ; =============== S U B R O U T I N E =======================================
.text:00419200
.text:00419200 ; Attributes: thunk
.text:00419200
.text:00419200 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00419200 setlocale       proc near               ; CODE XREF: sub_402010+32↑p
.text:00419200
.text:00419200 Category        = dword ptr  4
.text:00419200 Locale          = dword ptr  8
.text:00419200
.text:00419200                 jmp     ds:__imp_setlocale
.text:00419200 setlocale       endp
.text:00419200
.text:00419200 ; ---------------------------------------------------------------------------
.text:00419206                 align 10h
.text:00419210
.text:00419210 ; =============== S U B R O U T I N E =======================================
.text:00419210
.text:00419210 ; Attributes: noreturn thunk
.text:00419210
.text:00419210 ; void __cdecl __noreturn exit(int Code)
.text:00419210 exit            proc near               ; CODE XREF: sub_402010:loc_402133↑p
.text:00419210                                         ; sub_402A30+3B↑p ...
.text:00419210
.text:00419210 Code            = dword ptr  4
.text:00419210
.text:00419210                 jmp     ds:__imp_exit
.text:00419210 exit            endp
.text:00419210
.text:00419210 ; ---------------------------------------------------------------------------
.text:00419216                 align 10h
.text:00419220
.text:00419220 ; =============== S U B R O U T I N E =======================================
.text:00419220
.text:00419220 ; Attributes: thunk
.text:00419220
.text:00419220 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00419220 fprintf         proc near               ; CODE XREF: sub_402010+117↑p
.text:00419220                                         ; sub_402A30+33↑p ...
.text:00419220
.text:00419220 Stream          = dword ptr  4
.text:00419220 Format          = dword ptr  8
.text:00419220
.text:00419220                 jmp     ds:__imp_fprintf
.text:00419220 fprintf         endp
.text:00419220
.text:00419220 ; ---------------------------------------------------------------------------
.text:00419226                 align 10h
.text:00419230
.text:00419230 ; =============== S U B R O U T I N E =======================================
.text:00419230
.text:00419230 ; Attributes: thunk
.text:00419230
.text:00419230 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00419230 sprintf         proc near               ; CODE XREF: sub_403B90+51↑p
.text:00419230                                         ; sub_403F40+649↑p ...
.text:00419230
.text:00419230 Buffer          = dword ptr  4
.text:00419230 Format          = dword ptr  8
.text:00419230
.text:00419230                 jmp     ds:__imp_sprintf
.text:00419230 sprintf         endp
.text:00419230
.text:00419230 ; ---------------------------------------------------------------------------
.text:00419236                 align 10h
.text:00419240
.text:00419240 ; =============== S U B R O U T I N E =======================================
.text:00419240
.text:00419240 ; Attributes: thunk
.text:00419240
.text:00419240 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00419240 fwrite          proc near               ; CODE XREF: sub_4048A0+87↑p
.text:00419240                                         ; sub_4048A0+FA↑p ...
.text:00419240
.text:00419240 Buffer          = dword ptr  4
.text:00419240 ElementSize     = dword ptr  8
.text:00419240 ElementCount    = dword ptr  0Ch
.text:00419240 Stream          = dword ptr  10h
.text:00419240
.text:00419240                 jmp     ds:__imp_fwrite
.text:00419240 fwrite          endp
.text:00419240
.text:00419240 ; ---------------------------------------------------------------------------
.text:00419246                 align 10h
.text:00419250
.text:00419250 ; =============== S U B R O U T I N E =======================================
.text:00419250
.text:00419250 ; Attributes: thunk
.text:00419250
.text:00419250 ; int printf(const char *const Format, ...)
.text:00419250 printf          proc near               ; CODE XREF: sub_402010+18B↑p
.text:00419250                                         ; sub_402010+2DA↑p ...
.text:00419250
.text:00419250 Format          = dword ptr  4
.text:00419250
.text:00419250                 jmp     ds:__imp_printf
.text:00419250 printf          endp
.text:00419250
.text:00419250 ; ---------------------------------------------------------------------------
.text:00419256                 align 10h
.text:00419260
.text:00419260 ; =============== S U B R O U T I N E =======================================
.text:00419260
.text:00419260 ; Attributes: thunk
.text:00419260
.text:00419260 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00419260 fputs           proc near               ; CODE XREF: sub_402010+1AD↑p
.text:00419260                                         ; sub_402010+1CF↑p ...
.text:00419260
.text:00419260 Buffer          = dword ptr  4
.text:00419260 Stream          = dword ptr  8
.text:00419260
.text:00419260                 jmp     ds:__imp_fputs
.text:00419260 fputs           endp
.text:00419260
.text:00419260 ; ---------------------------------------------------------------------------
.text:00419266                 align 10h
.text:00419270
.text:00419270 ; =============== S U B R O U T I N E =======================================
.text:00419270
.text:00419270 ; Attributes: thunk
.text:00419270
.text:00419270 ; void __cdecl free(void *Block)
.text:00419270 free            proc near               ; CODE XREF: sub_402010+881↑p
.text:00419270                                         ; sub_406D10+112↑p ...
.text:00419270
.text:00419270 Block           = dword ptr  4
.text:00419270
.text:00419270                 jmp     ds:__imp_free
.text:00419270 free            endp
.text:00419270
.text:00419270 ; ---------------------------------------------------------------------------
.text:00419276                 align 10h
.text:00419280
.text:00419280 ; =============== S U B R O U T I N E =======================================
.text:00419280
.text:00419280 ; Attributes: thunk
.text:00419280
.text:00419280 ; int *__cdecl errno()
.text:00419280 _errno          proc near               ; CODE XREF: sub_402010:loc_4029B0↑p
.text:00419280                                         ; sub_403190+12F↑p ...
.text:00419280                 jmp     ds:__imp__errno
.text:00419280 _errno          endp
.text:00419280
.text:00419280 ; ---------------------------------------------------------------------------
.text:00419286                 align 10h
.text:00419290
.text:00419290 ; =============== S U B R O U T I N E =======================================
.text:00419290
.text:00419290 ; Attributes: thunk
.text:00419290
.text:00419290 ; int __cdecl toupper(int C)
.text:00419290 toupper         proc near               ; CODE XREF: sub_402ED0+23↑p
.text:00419290                                         ; sub_412D50+10E↑p
.text:00419290
.text:00419290 C               = dword ptr  4
.text:00419290
.text:00419290                 jmp     ds:__imp_toupper
.text:00419290 toupper         endp
.text:00419290
.text:00419290 ; ---------------------------------------------------------------------------
.text:00419296                 align 10h
.text:004192A0
.text:004192A0 ; =============== S U B R O U T I N E =======================================
.text:004192A0
.text:004192A0 ; Attributes: thunk
.text:004192A0
.text:004192A0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004192A0 memset          proc near               ; CODE XREF: sub_402010+840↑p
.text:004192A0                                         ; sub_402ED0+E2↑p ...
.text:004192A0
.text:004192A0 Val             = dword ptr  8
.text:004192A0 Size            = dword ptr  0Ch
.text:004192A0
.text:004192A0                 jmp     ds:__imp_memset
.text:004192A0 memset          endp
.text:004192A0
.text:004192A0 ; ---------------------------------------------------------------------------
.text:004192A6                 align 10h
.text:004192B0
.text:004192B0 ; =============== S U B R O U T I N E =======================================
.text:004192B0
.text:004192B0 ; Attributes: thunk
.text:004192B0
.text:004192B0 ; size_t __cdecl strlen(const char *Str)
.text:004192B0 strlen          proc near               ; CODE XREF: sub_402BF0+E↑p
.text:004192B0                                         ; sub_402ED0+14D↑p ...
.text:004192B0
.text:004192B0 Str             = dword ptr  4
.text:004192B0
.text:004192B0                 jmp     ds:__imp_strlen
.text:004192B0 strlen          endp
.text:004192B0
.text:004192B0 ; ---------------------------------------------------------------------------
.text:004192B6                 align 10h
.text:004192C0
.text:004192C0 ; =============== S U B R O U T I N E =======================================
.text:004192C0
.text:004192C0 ; Attributes: thunk
.text:004192C0
.text:004192C0 ; int __cdecl isctype(int C, int Type)
.text:004192C0 _isctype        proc near               ; CODE XREF: sub_402BF0+1AE↑p
.text:004192C0                                         ; sub_402ED0+9A↑p ...
.text:004192C0
.text:004192C0 C               = dword ptr  4
.text:004192C0 Type            = dword ptr  8
.text:004192C0
.text:004192C0                 jmp     ds:__imp__isctype
.text:004192C0 _isctype        endp
.text:004192C0
.text:004192C0 ; ---------------------------------------------------------------------------
.text:004192C6                 align 10h
.text:004192D0
.text:004192D0 ; =============== S U B R O U T I N E =======================================
.text:004192D0
.text:004192D0 ; Attributes: thunk
.text:004192D0
.text:004192D0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004192D0 fopen           proc near               ; CODE XREF: sub_402010+93B↑p
.text:004192D0                                         ; sub_4159CF+26↑p ...
.text:004192D0
.text:004192D0 FileName        = dword ptr  4
.text:004192D0 Mode            = dword ptr  8
.text:004192D0
.text:004192D0                 jmp     ds:__imp_fopen
.text:004192D0 fopen           endp
.text:004192D0
.text:004192D0 ; ---------------------------------------------------------------------------
.text:004192D6                 align 10h
.text:004192E0
.text:004192E0 ; =============== S U B R O U T I N E =======================================
.text:004192E0
.text:004192E0 ; Attributes: thunk
.text:004192E0
.text:004192E0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004192E0 _flsbuf         proc near               ; CODE XREF: sub_4048A0+267↑p
.text:004192E0                                         ; sub_4048A0+282↑p ...
.text:004192E0
.text:004192E0 File            = dword ptr  8
.text:004192E0
.text:004192E0                 jmp     ds:__imp__flsbuf
.text:004192E0 _flsbuf         endp
.text:004192E0
.text:004192E0 ; ---------------------------------------------------------------------------
.text:004192E6                 align 10h
.text:004192F0
.text:004192F0 ; =============== S U B R O U T I N E =======================================
.text:004192F0
.text:004192F0 ; Attributes: noreturn thunk
.text:004192F0
.text:004192F0 ; void __cdecl __noreturn abort()
.text:004192F0 abort           proc near               ; CODE XREF: sub_406D10:loc_406ECA↑p
.text:004192F0                                         ; .text:loc_40A078↑p ...
.text:004192F0                 jmp     ds:__imp_abort
.text:004192F0 abort           endp
.text:004192F0
.text:004192F0 ; ---------------------------------------------------------------------------
.text:004192F6                 align 10h
.text:00419300
.text:00419300 ; =============== S U B R O U T I N E =======================================
.text:00419300
.text:00419300 ; Attributes: thunk
.text:00419300
.text:00419300 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00419300 iswctype        proc near               ; CODE XREF: sub_405BD0+78B↑p
.text:00419300                                         ; sub_40A110+1F86↑p
.text:00419300
.text:00419300 C               = word ptr  4
.text:00419300 Type            = word ptr  8
.text:00419300
.text:00419300                 jmp     ds:__imp_iswctype
.text:00419300 iswctype        endp
.text:00419300
.text:00419300 ; ---------------------------------------------------------------------------
.text:00419306                 align 10h
.text:00419310
.text:00419310 ; =============== S U B R O U T I N E =======================================
.text:00419310
.text:00419310 ; Attributes: thunk
.text:00419310
.text:00419310 ; int __cdecl tolower(int C)
.text:00419310 tolower         proc near               ; CODE XREF: .text:00409C98↑p
.text:00419310
.text:00419310 C               = dword ptr  4
.text:00419310
.text:00419310                 jmp     ds:__imp_tolower
.text:00419310 tolower         endp
.text:00419310
.text:00419310 ; ---------------------------------------------------------------------------
.text:00419316                 align 10h
.text:00419320
.text:00419320 ; =============== S U B R O U T I N E =======================================
.text:00419320
.text:00419320 ; Attributes: thunk
.text:00419320
.text:00419320 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00419320 memcpy          proc near               ; CODE XREF: sub_407200+10BA↑p
.text:00419320                                         ; sub_407200+1268↑p ...
.text:00419320
.text:00419320 Src             = dword ptr  8
.text:00419320 Size            = dword ptr  0Ch
.text:00419320
.text:00419320                 jmp     ds:__imp_memcpy
.text:00419320 memcpy          endp
.text:00419320
.text:00419320 ; ---------------------------------------------------------------------------
.text:00419326                 align 10h
.text:00419330
.text:00419330 ; =============== S U B R O U T I N E =======================================
.text:00419330
.text:00419330 ; Attributes: thunk
.text:00419330
.text:00419330 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00419330 realloc         proc near               ; CODE XREF: sub_407200+7BE↑p
.text:00419330                                         ; sub_407200+7DC↑p ...
.text:00419330
.text:00419330 Block           = dword ptr  4
.text:00419330 Size            = dword ptr  8
.text:00419330
.text:00419330                 jmp     ds:__imp_realloc
.text:00419330 realloc         endp
.text:00419330
.text:00419330 ; ---------------------------------------------------------------------------
.text:00419336                 align 10h
.text:00419340
.text:00419340 ; =============== S U B R O U T I N E =======================================
.text:00419340
.text:00419340 ; Attributes: thunk
.text:00419340
.text:00419340 ; void *__cdecl malloc(size_t Size)
.text:00419340 malloc          proc near               ; CODE XREF: sub_407200+74↑p
.text:00419340                                         ; sub_407200+555↑p ...
.text:00419340
.text:00419340 Size            = dword ptr  4
.text:00419340
.text:00419340                 jmp     ds:__imp_malloc
.text:00419340 malloc          endp
.text:00419340
.text:00419340 ; ---------------------------------------------------------------------------
.text:00419346                 align 10h
.text:00419350
.text:00419350 ; =============== S U B R O U T I N E =======================================
.text:00419350
.text:00419350 ; Attributes: thunk
.text:00419350
.text:00419350 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00419350 strncmp         proc near               ; CODE XREF: sub_40DB00+53↑p
.text:00419350                                         ; sub_40E300+23F↑p ...
.text:00419350
.text:00419350 Str1            = dword ptr  4
.text:00419350 Str2            = dword ptr  8
.text:00419350 MaxCount        = dword ptr  0Ch
.text:00419350
.text:00419350                 jmp     ds:__imp_strncmp
.text:00419350 strncmp         endp
.text:00419350
.text:00419350 ; ---------------------------------------------------------------------------
.text:00419356                 align 10h
.text:00419360
.text:00419360 ; =============== S U B R O U T I N E =======================================
.text:00419360
.text:00419360 ; Attributes: thunk
.text:00419360
.text:00419360 ; char *__cdecl getenv(const char *VarName)
.text:00419360 getenv          proc near               ; CODE XREF: sub_40E300+B57↑p
.text:00419360                                         ; sub_4111A0+3EE↑p ...
.text:00419360
.text:00419360 VarName         = dword ptr  4
.text:00419360
.text:00419360                 jmp     ds:__imp_getenv
.text:00419360 getenv          endp
.text:00419360
.text:00419360 ; ---------------------------------------------------------------------------
.text:00419366                 align 10h
.text:00419370
.text:00419370 ; =============== S U B R O U T I N E =======================================
.text:00419370
.text:00419370 ; Attributes: thunk
.text:00419370
.text:00419370 ; char *__cdecl strchr(const char *Str, int Val)
.text:00419370 strchr          proc near               ; CODE XREF: sub_40E300+469↑p
.text:00419370                                         ; sub_40E300+53A↑p ...
.text:00419370
.text:00419370 Str             = dword ptr  4
.text:00419370 Val             = dword ptr  8
.text:00419370
.text:00419370                 jmp     ds:__imp_strchr
.text:00419370 strchr          endp
.text:00419370
.text:00419370 ; ---------------------------------------------------------------------------
.text:00419376                 align 10h
.text:00419380
.text:00419380 ; =============== S U B R O U T I N E =======================================
.text:00419380
.text:00419380 ; Attributes: thunk
.text:00419380
.text:00419380 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00419380 vfprintf        proc near               ; CODE XREF: sub_40F620+C1↑p
.text:00419380                                         ; sub_4103E0+49↑p ...
.text:00419380
.text:00419380 Stream          = dword ptr  4
.text:00419380 Format          = dword ptr  8
.text:00419380 ArgList         = dword ptr  0Ch
.text:00419380
.text:00419380                 jmp     ds:__imp_vfprintf
.text:00419380 vfprintf        endp
.text:00419380
.text:00419380 ; ---------------------------------------------------------------------------
.text:00419386                 align 10h
.text:00419390
.text:00419390 ; =============== S U B R O U T I N E =======================================
.text:00419390
.text:00419390 ; Attributes: thunk
.text:00419390
.text:00419390 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00419390 strtoul         proc near               ; CODE XREF: sub_40F8A0+94↑p
.text:00419390
.text:00419390 String          = dword ptr  4
.text:00419390 EndPtr          = dword ptr  8
.text:00419390 Radix           = dword ptr  0Ch
.text:00419390
.text:00419390                 jmp     ds:__imp_strtoul
.text:00419390 strtoul         endp
.text:00419390
.text:00419390 ; ---------------------------------------------------------------------------
.text:00419396                 align 10h
.text:004193A0
.text:004193A0 ; =============== S U B R O U T I N E =======================================
.text:004193A0
.text:004193A0 ; Attributes: noreturn thunk
.text:004193A0
.text:004193A0 _assert         proc near               ; CODE XREF: sub_40F8A0+553↑p
.text:004193A0                                         ; sub_416E10+414↑p
.text:004193A0                 jmp     ds:__imp__assert
.text:004193A0 _assert         endp
.text:004193A0
.text:004193A0 ; ---------------------------------------------------------------------------
.text:004193A6                 align 10h
.text:004193B0
.text:004193B0 ; =============== S U B R O U T I N E =======================================
.text:004193B0
.text:004193B0 ; Attributes: thunk
.text:004193B0
.text:004193B0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004193B0 calloc          proc near               ; CODE XREF: .text:00410263↑p
.text:004193B0                                         ; sub_412D50+AC↑p
.text:004193B0
.text:004193B0 Count           = dword ptr  4
.text:004193B0 Size            = dword ptr  8
.text:004193B0
.text:004193B0                 jmp     ds:__imp_calloc
.text:004193B0 calloc          endp
.text:004193B0
.text:004193B0 ; ---------------------------------------------------------------------------
.text:004193B6                 align 10h
.text:004193C0
.text:004193C0 ; =============== S U B R O U T I N E =======================================
.text:004193C0
.text:004193C0 ; Attributes: thunk
.text:004193C0
.text:004193C0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004193C0 strcmp          proc near               ; CODE XREF: sub_4104E4+180↑p
.text:004193C0                                         ; .text:00414E8B↑p
.text:004193C0
.text:004193C0 Str1            = dword ptr  4
.text:004193C0 Str2            = dword ptr  8
.text:004193C0
.text:004193C0                 jmp     ds:__imp_strcmp
.text:004193C0 strcmp          endp
.text:004193C0
.text:004193C0 ; ---------------------------------------------------------------------------
.text:004193C6                 align 10h
.text:004193D0
.text:004193D0 ; =============== S U B R O U T I N E =======================================
.text:004193D0
.text:004193D0 ; Attributes: thunk
.text:004193D0
.text:004193D0 ; int __cdecl fflush(FILE *Stream)
.text:004193D0 fflush          proc near               ; CODE XREF: sub_4103E0+19↑p
.text:004193D0                                         ; sub_4103E0+81↑p ...
.text:004193D0
.text:004193D0 Stream          = dword ptr  4
.text:004193D0
.text:004193D0                 jmp     ds:__imp_fflush
.text:004193D0 fflush          endp
.text:004193D0
.text:004193D0 ; ---------------------------------------------------------------------------
.text:004193D6                 align 10h
.text:004193E0
.text:004193E0 ; =============== S U B R O U T I N E =======================================
.text:004193E0
.text:004193E0 ; Attributes: thunk
.text:004193E0
.text:004193E0 ; char *__cdecl strerror(int ErrorMessage)
.text:004193E0 strerror        proc near               ; CODE XREF: sub_4103E0+A5↑p
.text:004193E0                                         ; sub_4104E4+10F↑p
.text:004193E0
.text:004193E0 ErrorMessage    = dword ptr  4
.text:004193E0
.text:004193E0                 jmp     ds:__imp_strerror
.text:004193E0 strerror        endp
.text:004193E0
.text:004193E0 ; ---------------------------------------------------------------------------
.text:004193E6                 align 10h
.text:004193F0
.text:004193F0 ; =============== S U B R O U T I N E =======================================
.text:004193F0
.text:004193F0 ; Attributes: thunk
.text:004193F0
.text:004193F0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004193F0 ctime           proc near               ; CODE XREF: .text:0041084D↑p
.text:004193F0                                         ; .text:0041086F↑p ...
.text:004193F0
.text:004193F0 Time            = dword ptr  4
.text:004193F0
.text:004193F0                 jmp     ds:__imp_ctime
.text:004193F0 ctime           endp
.text:004193F0
.text:004193F0 ; ---------------------------------------------------------------------------
.text:004193F6                 align 10h
.text:00419400
.text:00419400 ; =============== S U B R O U T I N E =======================================
.text:00419400
.text:00419400 ; Attributes: thunk
.text:00419400
.text:00419400 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00419400 _get_osfhandle  proc near               ; CODE XREF: sub_4108F0+3A↑p
.text:00419400                                         ; sub_416740+15↑p
.text:00419400
.text:00419400 FileHandle      = dword ptr  4
.text:00419400
.text:00419400                 jmp     ds:__imp__get_osfhandle
.text:00419400 _get_osfhandle  endp
.text:00419400
.text:00419400 ; ---------------------------------------------------------------------------
.text:00419406                 align 10h
.text:00419410
.text:00419410 ; =============== S U B R O U T I N E =======================================
.text:00419410
.text:00419410 ; Attributes: thunk
.text:00419410
.text:00419410 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00419410 strcat          proc near               ; CODE XREF: sub_4108F0+2F8↑p
.text:00419410                                         ; .text:00414643↑p ...
.text:00419410
.text:00419410 Destination     = dword ptr  4
.text:00419410 Source          = dword ptr  8
.text:00419410
.text:00419410                 jmp     ds:__imp_strcat
.text:00419410 strcat          endp
.text:00419410
.text:00419410 ; ---------------------------------------------------------------------------
.text:00419416                 align 10h
.text:00419420
.text:00419420 ; =============== S U B R O U T I N E =======================================
.text:00419420
.text:00419420 ; Attributes: thunk
.text:00419420
.text:00419420 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00419420 strcpy          proc near               ; CODE XREF: sub_4108F0+2D3↑p
.text:00419420                                         ; _win32_longpath+13C↑p ...
.text:00419420
.text:00419420 Destination     = dword ptr  4
.text:00419420 Source          = dword ptr  8
.text:00419420
.text:00419420                 jmp     ds:__imp_strcpy
.text:00419420 strcpy          endp
.text:00419420
.text:00419420 ; ---------------------------------------------------------------------------
.text:00419426                 align 10h
.text:00419430
.text:00419430 ; =============== S U B R O U T I N E =======================================
.text:00419430
.text:00419430 ; Attributes: thunk
.text:00419430
.text:00419430 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00419430 strstr          proc near               ; CODE XREF: sub_4111A0+3BF↑p
.text:00419430                                         ; sub_4111A0+3DC↑p ...
.text:00419430
.text:00419430 Str             = dword ptr  4
.text:00419430 SubStr          = dword ptr  8
.text:00419430
.text:00419430                 jmp     ds:__imp_strstr
.text:00419430 strstr          endp
.text:00419430
.text:00419430 ; ---------------------------------------------------------------------------
.text:00419436                 align 10h
.text:00419440
.text:00419440 ; =============== S U B R O U T I N E =======================================
.text:00419440
.text:00419440 ; Attributes: thunk
.text:00419440
.text:00419440 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00419440 strrchr         proc near               ; CODE XREF: sub_4111A0+CB↑p
.text:00419440                                         ; sub_4111A0+3A7↑p ...
.text:00419440
.text:00419440 Str             = dword ptr  4
.text:00419440
.text:00419440                 jmp     ds:__imp_strrchr
.text:00419440 strrchr         endp
.text:00419440
.text:00419440 ; ---------------------------------------------------------------------------
.text:00419446                 align 10h
.text:00419450
.text:00419450 ; =============== S U B R O U T I N E =======================================
.text:00419450
.text:00419450 ; Attributes: thunk
.text:00419450
.text:00419450 ; int __cdecl isalpha(int C)
.text:00419450 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00419450
.text:00419450 C               = dword ptr  4
.text:00419450
.text:00419450                 jmp     ds:__imp_isalpha
.text:00419450 isalpha         endp
.text:00419450
.text:00419450 ; ---------------------------------------------------------------------------
.text:00419456                 align 10h
.text:00419460
.text:00419460 ; =============== S U B R O U T I N E =======================================
.text:00419460
.text:00419460 ; Attributes: thunk
.text:00419460
.text:00419460 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00419460 _stricmp_0      proc near               ; CODE XREF: .text:00412BC4↑p
.text:00419460
.text:00419460 String1         = dword ptr  4
.text:00419460 String2         = dword ptr  8
.text:00419460
.text:00419460                 jmp     ds:__imp__stricmp_0
.text:00419460 _stricmp_0      endp
.text:00419460
.text:00419460 ; ---------------------------------------------------------------------------
.text:00419466                 align 10h
.text:00419470
.text:00419470 ; =============== S U B R O U T I N E =======================================
.text:00419470
.text:00419470 ; Attributes: thunk
.text:00419470
.text:00419470 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00419470 strncpy         proc near               ; CODE XREF: sub_412D50+BE↑p
.text:00419470                                         ; .text:004135CA↑p ...
.text:00419470
.text:00419470 Destination     = dword ptr  4
.text:00419470 Source          = dword ptr  8
.text:00419470 Count           = dword ptr  0Ch
.text:00419470
.text:00419470                 jmp     ds:__imp_strncpy
.text:00419470 strncpy         endp
.text:00419470
.text:00419470 ; ---------------------------------------------------------------------------
.text:00419476                 align 10h
.text:00419480
.text:00419480 ; =============== S U B R O U T I N E =======================================
.text:00419480
.text:00419480 ; Attributes: thunk
.text:00419480
.text:00419480 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00419480 sscanf          proc near               ; CODE XREF: .text:004150CE↑p
.text:00419480
.text:00419480 Buffer          = dword ptr  4
.text:00419480 Format          = dword ptr  8
.text:00419480
.text:00419480                 jmp     ds:__imp_sscanf
.text:00419480 sscanf          endp
.text:00419480
.text:00419480 ; ---------------------------------------------------------------------------
.text:00419486                 align 10h
.text:00419490
.text:00419490 ; =============== S U B R O U T I N E =======================================
.text:00419490
.text:00419490 ; Attributes: thunk
.text:00419490
.text:00419490 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00419490 strspn          proc near               ; CODE XREF: .text:00414F1A↑p
.text:00419490                                         ; .text:00415134↑p ...
.text:00419490
.text:00419490 Str             = dword ptr  4
.text:00419490 Control         = dword ptr  8
.text:00419490
.text:00419490                 jmp     ds:__imp_strspn
.text:00419490 strspn          endp
.text:00419490
.text:00419490 ; ---------------------------------------------------------------------------
.text:00419496                 align 10h
.text:004194A0
.text:004194A0 ; =============== S U B R O U T I N E =======================================
.text:004194A0
.text:004194A0 ; Attributes: thunk
.text:004194A0
.text:004194A0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004194A0 _filelengthi64  proc near               ; CODE XREF: sub_416740+1F↑p
.text:004194A0
.text:004194A0 FileHandle      = dword ptr  4
.text:004194A0
.text:004194A0                 jmp     ds:__imp__filelengthi64
.text:004194A0 _filelengthi64  endp
.text:004194A0
.text:004194A0 ; ---------------------------------------------------------------------------
.text:004194A6                 align 10h
.text:004194B0
.text:004194B0 ; =============== S U B R O U T I N E =======================================
.text:004194B0
.text:004194B0 ; Attributes: thunk
.text:004194B0
.text:004194B0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004194B0 strpbrk         proc near               ; CODE XREF: sub_4167A0+87↑p
.text:004194B0
.text:004194B0 Str             = dword ptr  4
.text:004194B0 Control         = dword ptr  8
.text:004194B0
.text:004194B0                 jmp     ds:__imp_strpbrk
.text:004194B0 strpbrk         endp
.text:004194B0
.text:004194B0 ; ---------------------------------------------------------------------------
.text:004194B6                 align 10h
.text:004194C0
.text:004194C0 ; =============== S U B R O U T I N E =======================================
.text:004194C0
.text:004194C0 ; Attributes: thunk
.text:004194C0
.text:004194C0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004194C0 _fdopen         proc near               ; CODE XREF: sub_416840+69↑p
.text:004194C0
.text:004194C0 FileHandle      = dword ptr  4
.text:004194C0 Format          = dword ptr  8
.text:004194C0
.text:004194C0                 jmp     ds:__imp__fdopen
.text:004194C0 _fdopen         endp
.text:004194C0
.text:004194C0 ; ---------------------------------------------------------------------------
.text:004194C6                 align 10h
.text:004194D0
.text:004194D0 ; =============== S U B R O U T I N E =======================================
.text:004194D0
.text:004194D0 ; Attributes: thunk
.text:004194D0
.text:004194D0 ; int __cdecl close_0(int FileHandle)
.text:004194D0 _close_0        proc near               ; CODE XREF: sub_416840+90↑p
.text:004194D0
.text:004194D0 FileHandle      = dword ptr  4
.text:004194D0
.text:004194D0                 jmp     ds:__imp__close_0
.text:004194D0 _close_0        endp
.text:004194D0
.text:004194D0 ; ---------------------------------------------------------------------------
.text:004194D6                 align 10h
.text:004194E0
.text:004194E0 ; =============== S U B R O U T I N E =======================================
.text:004194E0
.text:004194E0 ; Attributes: thunk
.text:004194E0
.text:004194E0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004194E0 _open_0         proc near               ; CODE XREF: sub_416E10:loc_4171A0↑p
.text:004194E0
.text:004194E0 FileName        = dword ptr  4
.text:004194E0 OpenFlag        = dword ptr  8
.text:004194E0
.text:004194E0                 jmp     ds:__imp__open_0
.text:004194E0 _open_0         endp
.text:004194E0
.text:004194E0 ; ---------------------------------------------------------------------------
.text:004194E6                 align 10h
.text:004194F0
.text:004194F0 ; =============== S U B R O U T I N E =======================================
.text:004194F0
.text:004194F0 ; Attributes: thunk
.text:004194F0
.text:004194F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004194F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004194F0
.text:004194F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004194F0
.text:004194F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004194F0 SetUnhandledExceptionFilter endp
.text:004194F0
.text:004194F0 ; ---------------------------------------------------------------------------
.text:004194F6                 align 10h
.text:00419500
.text:00419500 ; =============== S U B R O U T I N E =======================================
.text:00419500
.text:00419500 ; Attributes: noreturn thunk
.text:00419500
.text:00419500 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00419500 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00419500
.text:00419500 uExitCode       = dword ptr  4
.text:00419500
.text:00419500                 jmp     ds:__imp_ExitProcess
.text:00419500 ExitProcess     endp
.text:00419500
.text:00419500 ; ---------------------------------------------------------------------------
.text:00419506                 align 10h
.text:00419510
.text:00419510 ; =============== S U B R O U T I N E =======================================
.text:00419510
.text:00419510 ; Attributes: thunk
.text:00419510
.text:00419510 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00419510 GetModuleHandleA proc near              ; CODE XREF: sub_4108F0+108↑p
.text:00419510                                         ; sub_4111A0+329↑p ...
.text:00419510
.text:00419510 lpModuleName    = dword ptr  4
.text:00419510
.text:00419510                 jmp     ds:__imp_GetModuleHandleA
.text:00419510 GetModuleHandleA endp
.text:00419510
.text:00419510 ; ---------------------------------------------------------------------------
.text:00419516                 align 10h
.text:00419520
.text:00419520 ; =============== S U B R O U T I N E =======================================
.text:00419520
.text:00419520 ; Attributes: thunk
.text:00419520
.text:00419520 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00419520 GetProcAddress  proc near               ; CODE XREF: sub_4108F0+123↑p
.text:00419520                                         ; sub_4108F0+28E↑p ...
.text:00419520
.text:00419520 hModule         = dword ptr  4
.text:00419520 lpProcName      = dword ptr  8
.text:00419520
.text:00419520                 jmp     ds:__imp_GetProcAddress
.text:00419520 GetProcAddress  endp
.text:00419520
.text:00419520 ; ---------------------------------------------------------------------------
.text:00419526                 align 10h
.text:00419530
.text:00419530 ; =============== S U B R O U T I N E =======================================
.text:00419530
.text:00419530 ; Attributes: thunk
.text:00419530
.text:00419530 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00419530 GetFileAttributesA proc near            ; CODE XREF: sub_4108F0+137↑p
.text:00419530                                         ; sub_414250+62↑p
.text:00419530
.text:00419530 lpFileName      = dword ptr  4
.text:00419530
.text:00419530                 jmp     ds:__imp_GetFileAttributesA
.text:00419530 GetFileAttributesA endp
.text:00419530
.text:00419530 ; ---------------------------------------------------------------------------
.text:00419536                 align 10h
.text:00419540
.text:00419540 ; =============== S U B R O U T I N E =======================================
.text:00419540
.text:00419540 ; Attributes: thunk
.text:00419540
.text:00419540 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00419540 FreeLibrary     proc near               ; CODE XREF: sub_4108F0+194↑p
.text:00419540                                         ; sub_4108F0+37D↑p ...
.text:00419540
.text:00419540 hLibModule      = dword ptr  4
.text:00419540
.text:00419540                 jmp     ds:__imp_FreeLibrary
.text:00419540 FreeLibrary     endp
.text:00419540
.text:00419540 ; ---------------------------------------------------------------------------
.text:00419546                 align 10h
.text:00419550
.text:00419550 ; =============== S U B R O U T I N E =======================================
.text:00419550
.text:00419550 ; Attributes: thunk
.text:00419550
.text:00419550 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00419550 FindFirstFileA  proc near               ; CODE XREF: sub_4108F0+1BE↑p
.text:00419550                                         ; sub_4108F0+3AF↑p ...
.text:00419550
.text:00419550 lpFileName      = dword ptr  4
.text:00419550 lpFindFileData  = dword ptr  8
.text:00419550
.text:00419550                 jmp     ds:__imp_FindFirstFileA
.text:00419550 FindFirstFileA  endp
.text:00419550
.text:00419550 ; ---------------------------------------------------------------------------
.text:00419556                 align 10h
.text:00419560
.text:00419560 ; =============== S U B R O U T I N E =======================================
.text:00419560
.text:00419560 ; Attributes: thunk
.text:00419560
.text:00419560 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00419560 FindClose       proc near               ; CODE XREF: sub_4108F0+213↑p
.text:00419560                                         ; sub_4108F0+36E↑p ...
.text:00419560
.text:00419560 hFindFile       = dword ptr  4
.text:00419560
.text:00419560                 jmp     ds:__imp_FindClose
.text:00419560 FindClose       endp
.text:00419560
.text:00419560 ; ---------------------------------------------------------------------------
.text:00419566                 align 10h
.text:00419570
.text:00419570 ; =============== S U B R O U T I N E =======================================
.text:00419570
.text:00419570 ; Attributes: thunk
.text:00419570
.text:00419570 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00419570 LoadLibraryA    proc near               ; CODE XREF: sub_4108F0+273↑p
.text:00419570                                         ; sub_4111A0+134↑p ...
.text:00419570
.text:00419570 lpLibFileName   = dword ptr  4
.text:00419570
.text:00419570                 jmp     ds:__imp_LoadLibraryA
.text:00419570 LoadLibraryA    endp
.text:00419570
.text:00419570 ; ---------------------------------------------------------------------------
.text:00419576                 align 10h
.text:00419580
.text:00419580 ; =============== S U B R O U T I N E =======================================
.text:00419580
.text:00419580 ; Attributes: thunk
.text:00419580
.text:00419580 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00419580 FindNextFileA   proc near               ; CODE XREF: sub_4108F0+35F↑p
.text:00419580
.text:00419580 hFindFile       = dword ptr  4
.text:00419580 lpFindFileData  = dword ptr  8
.text:00419580
.text:00419580                 jmp     ds:__imp_FindNextFileA
.text:00419580 FindNextFileA   endp
.text:00419580
.text:00419580 ; ---------------------------------------------------------------------------
.text:00419586                 align 10h
.text:00419590
.text:00419590 ; =============== S U B R O U T I N E =======================================
.text:00419590
.text:00419590 ; Attributes: thunk
.text:00419590
.text:00419590 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00419590 GetFileType     proc near               ; CODE XREF: sub_4108F0+423↑p
.text:00419590                                         ; .text:0041198A↑p
.text:00419590
.text:00419590 hFile           = dword ptr  4
.text:00419590
.text:00419590                 jmp     ds:__imp_GetFileType
.text:00419590 GetFileType     endp
.text:00419590
.text:00419590 ; ---------------------------------------------------------------------------
.text:00419596                 align 10h
.text:004195A0
.text:004195A0 ; =============== S U B R O U T I N E =======================================
.text:004195A0
.text:004195A0 ; Attributes: thunk
.text:004195A0
.text:004195A0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004195A0 GetFileInformationByHandle proc near    ; CODE XREF: sub_4108F0+449↑p
.text:004195A0
.text:004195A0 hFile           = dword ptr  4
.text:004195A0 lpFileInformation= dword ptr  8
.text:004195A0
.text:004195A0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004195A0 GetFileInformationByHandle endp
.text:004195A0
.text:004195A0 ; ---------------------------------------------------------------------------
.text:004195A6                 align 10h
.text:004195B0
.text:004195B0 ; =============== S U B R O U T I N E =======================================
.text:004195B0
.text:004195B0 ; Attributes: thunk
.text:004195B0
.text:004195B0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:004195B0 GetFileSize     proc near               ; CODE XREF: sub_4108F0+7D2↑p
.text:004195B0
.text:004195B0 hFile           = dword ptr  4
.text:004195B0 lpFileSizeHigh  = dword ptr  8
.text:004195B0
.text:004195B0                 jmp     ds:__imp_GetFileSize
.text:004195B0 GetFileSize     endp
.text:004195B0
.text:004195B0 ; ---------------------------------------------------------------------------
.text:004195B6                 align 10h
.text:004195C0
.text:004195C0 ; =============== S U B R O U T I N E =======================================
.text:004195C0
.text:004195C0 ; Attributes: thunk
.text:004195C0
.text:004195C0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:004195C0 PeekNamedPipe   proc near               ; CODE XREF: sub_4108F0+819↑p
.text:004195C0
.text:004195C0 hNamedPipe      = dword ptr  4
.text:004195C0 lpBuffer        = dword ptr  8
.text:004195C0 nBufferSize     = dword ptr  0Ch
.text:004195C0 lpBytesRead     = dword ptr  10h
.text:004195C0 lpTotalBytesAvail= dword ptr  14h
.text:004195C0 lpBytesLeftThisMessage= dword ptr  18h
.text:004195C0
.text:004195C0                 jmp     ds:__imp_PeekNamedPipe
.text:004195C0 PeekNamedPipe   endp
.text:004195C0
.text:004195C0 ; ---------------------------------------------------------------------------
.text:004195C6                 align 10h
.text:004195D0
.text:004195D0 ; =============== S U B R O U T I N E =======================================
.text:004195D0
.text:004195D0 ; Attributes: thunk
.text:004195D0
.text:004195D0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:004195D0 GetDriveTypeA   proc near               ; CODE XREF: sub_4111A0+4C↑p
.text:004195D0
.text:004195D0 lpRootPathName  = dword ptr  4
.text:004195D0
.text:004195D0                 jmp     ds:__imp_GetDriveTypeA
.text:004195D0 GetDriveTypeA   endp
.text:004195D0
.text:004195D0 ; ---------------------------------------------------------------------------
.text:004195D6                 align 10h
.text:004195E0
.text:004195E0 ; =============== S U B R O U T I N E =======================================
.text:004195E0
.text:004195E0 ; Attributes: thunk
.text:004195E0
.text:004195E0 ; DWORD __stdcall GetLastError()
.text:004195E0 GetLastError    proc near               ; CODE XREF: sub_4111A0:loc_411429↑p
.text:004195E0                                         ; .text:loc_411F6D↑p ...
.text:004195E0                 jmp     ds:__imp_GetLastError
.text:004195E0 GetLastError    endp
.text:004195E0
.text:004195E0 ; ---------------------------------------------------------------------------
.text:004195E6                 align 10h
.text:004195F0
.text:004195F0 ; =============== S U B R O U T I N E =======================================
.text:004195F0
.text:004195F0 ; Attributes: thunk
.text:004195F0
.text:004195F0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004195F0 GetVolumeInformationA proc near         ; CODE XREF: sub_4116A0+64↑p
.text:004195F0                                         ; .text:00411C4C↑p ...
.text:004195F0
.text:004195F0 lpRootPathName  = dword ptr  4
.text:004195F0 lpVolumeNameBuffer= dword ptr  8
.text:004195F0 nVolumeNameSize = dword ptr  0Ch
.text:004195F0 lpVolumeSerialNumber= dword ptr  10h
.text:004195F0 lpMaximumComponentLength= dword ptr  14h
.text:004195F0 lpFileSystemFlags= dword ptr  18h
.text:004195F0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004195F0 nFileSystemNameSize= dword ptr  20h
.text:004195F0
.text:004195F0                 jmp     ds:__imp_GetVolumeInformationA
.text:004195F0 GetVolumeInformationA endp
.text:004195F0
.text:004195F0 ; ---------------------------------------------------------------------------
.text:004195F6                 align 10h
.text:00419600
.text:00419600 ; =============== S U B R O U T I N E =======================================
.text:00419600
.text:00419600 ; Attributes: thunk
.text:00419600
.text:00419600 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00419600 CreateFileA     proc near               ; CODE XREF: sub_417340-4F0A↑p
.text:00419600                                         ; .text:00413343↑p ...
.text:00419600
.text:00419600 lpFileName      = dword ptr  4
.text:00419600 dwDesiredAccess = dword ptr  8
.text:00419600 dwShareMode     = dword ptr  0Ch
.text:00419600 lpSecurityAttributes= dword ptr  10h
.text:00419600 dwCreationDisposition= dword ptr  14h
.text:00419600 dwFlagsAndAttributes= dword ptr  18h
.text:00419600 hTemplateFile   = dword ptr  1Ch
.text:00419600
.text:00419600                 jmp     ds:__imp_CreateFileA
.text:00419600 CreateFileA     endp
.text:00419600
.text:00419600 ; ---------------------------------------------------------------------------
.text:00419606                 align 10h
.text:00419610
.text:00419610 ; =============== S U B R O U T I N E =======================================
.text:00419610
.text:00419610 ; Attributes: thunk
.text:00419610
.text:00419610 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00419610 CloseHandle     proc near               ; CODE XREF: sub_417340-4EEF↑p
.text:00419610                                         ; .text:004133B9↑p ...
.text:00419610
.text:00419610 hObject         = dword ptr  4
.text:00419610
.text:00419610                 jmp     ds:__imp_CloseHandle
.text:00419610 CloseHandle     endp
.text:00419610
.text:00419610 ; ---------------------------------------------------------------------------
.text:00419616                 align 10h
.text:00419620
.text:00419620 ; =============== S U B R O U T I N E =======================================
.text:00419620
.text:00419620 ; Attributes: thunk
.text:00419620
.text:00419620 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00419620 SetErrorMode    proc near               ; CODE XREF: sub_417340-4EBA↑p
.text:00419620                                         ; sub_414250+57↑p ...
.text:00419620
.text:00419620 uMode           = dword ptr  4
.text:00419620
.text:00419620                 jmp     ds:__imp_SetErrorMode
.text:00419620 SetErrorMode    endp
.text:00419620
.text:00419620 ; ---------------------------------------------------------------------------
.text:00419626                 align 10h
.text:00419630
.text:00419630 ; =============== S U B R O U T I N E =======================================
.text:00419630
.text:00419630 ; Attributes: thunk
.text:00419630
.text:00419630 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00419630 GetModuleFileNameA proc near            ; CODE XREF: sub_412A40+1C↑p
.text:00419630
.text:00419630 hModule         = dword ptr  4
.text:00419630 lpFilename      = dword ptr  8
.text:00419630 nSize           = dword ptr  0Ch
.text:00419630
.text:00419630                 jmp     ds:__imp_GetModuleFileNameA
.text:00419630 GetModuleFileNameA endp
.text:00419630
.text:00419630 ; ---------------------------------------------------------------------------
.text:00419636                 align 10h
.text:00419640
.text:00419640 ; =============== S U B R O U T I N E =======================================
.text:00419640
.text:00419640 ; Attributes: thunk
.text:00419640
.text:00419640 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00419640 GetShortPathNameA proc near             ; CODE XREF: .text:00412CC6↑p
.text:00419640                                         ; .text:00412CF0↑p
.text:00419640
.text:00419640 lpszLongPath    = dword ptr  4
.text:00419640 lpszShortPath   = dword ptr  8
.text:00419640 cchBuffer       = dword ptr  0Ch
.text:00419640
.text:00419640                 jmp     ds:__imp_GetShortPathNameA
.text:00419640 GetShortPathNameA endp
.text:00419640
.text:00419640 ; ---------------------------------------------------------------------------
.text:00419646                 align 10h
.text:00419650
.text:00419650 ; =============== S U B R O U T I N E =======================================
.text:00419650
.text:00419650 ; Attributes: thunk
.text:00419650
.text:00419650 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00419650 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00412FF8↑p
.text:00419650                                         ; .text:00413014↑p ...
.text:00419650
.text:00419650 nBufferLength   = dword ptr  4
.text:00419650 lpBuffer        = dword ptr  8
.text:00419650
.text:00419650                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00419650 GetCurrentDirectoryA endp
.text:00419650
.text:00419650 ; ---------------------------------------------------------------------------
.text:00419656                 align 10h
.text:00419660
.text:00419660 ; =============== S U B R O U T I N E =======================================
.text:00419660
.text:00419660 ; Attributes: thunk
.text:00419660
.text:00419660 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00419660 DeviceIoControl proc near               ; CODE XREF: .text:004133AC↑p
.text:00419660                                         ; sub_413770+1E5↑p
.text:00419660
.text:00419660 hDevice         = dword ptr  4
.text:00419660 dwIoControlCode = dword ptr  8
.text:00419660 lpInBuffer      = dword ptr  0Ch
.text:00419660 nInBufferSize   = dword ptr  10h
.text:00419660 lpOutBuffer     = dword ptr  14h
.text:00419660 nOutBufferSize  = dword ptr  18h
.text:00419660 lpBytesReturned = dword ptr  1Ch
.text:00419660 lpOverlapped    = dword ptr  20h
.text:00419660
.text:00419660                 jmp     ds:__imp_DeviceIoControl
.text:00419660 DeviceIoControl endp
.text:00419660
.text:00419660 ; ---------------------------------------------------------------------------
.text:00419666                 align 10h
.text:00419670
.text:00419670 ; =============== S U B R O U T I N E =======================================
.text:00419670
.text:00419670 ; Attributes: thunk
.text:00419670
.text:00419670 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00419670 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00413703↑p
.text:00419670                                         ; sub_413770+7B↑p ...
.text:00419670
.text:00419670 lpRootPathName  = dword ptr  4
.text:00419670 lpSectorsPerCluster= dword ptr  8
.text:00419670 lpBytesPerSector= dword ptr  0Ch
.text:00419670 lpNumberOfFreeClusters= dword ptr  10h
.text:00419670 lpTotalNumberOfClusters= dword ptr  14h
.text:00419670
.text:00419670                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00419670 GetDiskFreeSpaceA endp
.text:00419670
.text:00419670 ; ---------------------------------------------------------------------------
.text:00419676                 align 10h
.text:00419680
.text:00419680 ; =============== S U B R O U T I N E =======================================
.text:00419680
.text:00419680 ; Attributes: thunk
.text:00419680
.text:00419680 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00419680 GetFullPathNameA proc near              ; CODE XREF: sub_414120+45↑p
.text:00419680                                         ; sub_414120+ED↑p
.text:00419680
.text:00419680 lpFileName      = dword ptr  4
.text:00419680 nBufferLength   = dword ptr  8
.text:00419680 lpBuffer        = dword ptr  0Ch
.text:00419680 lpFilePart      = dword ptr  10h
.text:00419680
.text:00419680                 jmp     ds:__imp_GetFullPathNameA
.text:00419680 GetFullPathNameA endp
.text:00419680
.text:00419680 ; ---------------------------------------------------------------------------
.text:00419686                 align 10h
.text:00419690
.text:00419690 ; =============== S U B R O U T I N E =======================================
.text:00419690
.text:00419690 ; Attributes: thunk
.text:00419690
.text:00419690 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00419690 lstrcmpiA       proc near               ; CODE XREF: .text:004147DB↑p
.text:00419690                                         ; .text:004147F2↑p ...
.text:00419690
.text:00419690 lpString1       = dword ptr  4
.text:00419690 lpString2       = dword ptr  8
.text:00419690
.text:00419690                 jmp     ds:__imp_lstrcmpiA
.text:00419690 lstrcmpiA       endp
.text:00419690
.text:00419690 ; ---------------------------------------------------------------------------
.text:00419696                 align 10h
.text:004196A0
.text:004196A0 ; =============== S U B R O U T I N E =======================================
.text:004196A0
.text:004196A0 ; Attributes: thunk
.text:004196A0
.text:004196A0 ; DWORD __stdcall GetVersion()
.text:004196A0 GetVersion      proc near               ; CODE XREF: .text:00414B63↑p
.text:004196A0                 jmp     ds:__imp_GetVersion
.text:004196A0 GetVersion      endp
.text:004196A0
.text:004196A0 ; ---------------------------------------------------------------------------
.text:004196A6                 align 10h
.text:004196B0
.text:004196B0 ; =============== S U B R O U T I N E =======================================
.text:004196B0
.text:004196B0 ; Attributes: thunk
.text:004196B0
.text:004196B0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:004196B0 GetVersionExA   proc near               ; CODE XREF: sub_414BF0+32↑p
.text:004196B0                                         ; sub_414BF0+20B↑p
.text:004196B0
.text:004196B0 lpVersionInformation= dword ptr  4
.text:004196B0
.text:004196B0                 jmp     ds:__imp_GetVersionExA
.text:004196B0 GetVersionExA   endp
.text:004196B0
.text:004196B0 ; ---------------------------------------------------------------------------
.text:004196B6                 align 10h
.text:004196C0
.text:004196C0 ; =============== S U B R O U T I N E =======================================
.text:004196C0
.text:004196C0 ; Attributes: thunk
.text:004196C0
.text:004196C0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004196C0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041528F↑p
.text:004196C0                                         ; .text:004152BE↑p ...
.text:004196C0
.text:004196C0 nBufferLength   = dword ptr  4
.text:004196C0 lpBuffer        = dword ptr  8
.text:004196C0
.text:004196C0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:004196C0 GetLogicalDriveStringsA endp
.text:004196C0
.text:004196C0 ; ---------------------------------------------------------------------------
.text:004196C6                 align 10h
.text:004196D0
.text:004196D0 ; =============== S U B R O U T I N E =======================================
.text:004196D0
.text:004196D0 ; Attributes: thunk
.text:004196D0
.text:004196D0 ; HANDLE __stdcall GetProcessHeap()
.text:004196D0 GetProcessHeap  proc near               ; CODE XREF: .text:00415299↑p
.text:004196D0                                         ; sub_415970+24↑p ...
.text:004196D0                 jmp     ds:__imp_GetProcessHeap
.text:004196D0 GetProcessHeap  endp
.text:004196D0
.text:004196D0 ; ---------------------------------------------------------------------------
.text:004196D6                 align 10h
.text:004196E0
.text:004196E0 ; =============== S U B R O U T I N E =======================================
.text:004196E0
.text:004196E0 ; Attributes: thunk
.text:004196E0
.text:004196E0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:004196E0 HeapAlloc       proc near               ; CODE XREF: .text:004152AD↑p
.text:004196E0                                         ; sub_415970+38↑p ...
.text:004196E0
.text:004196E0 hHeap           = dword ptr  4
.text:004196E0 dwFlags         = dword ptr  8
.text:004196E0 dwBytes         = dword ptr  0Ch
.text:004196E0
.text:004196E0                 jmp     ds:__imp_HeapAlloc
.text:004196E0 HeapAlloc       endp
.text:004196E0
.text:004196E0 ; ---------------------------------------------------------------------------
.text:004196E6                 align 10h
.text:004196F0
.text:004196F0 ; =============== S U B R O U T I N E =======================================
.text:004196F0
.text:004196F0 ; Attributes: thunk
.text:004196F0
.text:004196F0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:004196F0 HeapFree        proc near               ; CODE XREF: .text:00415AAD↑p
.text:004196F0
.text:004196F0 hHeap           = dword ptr  4
.text:004196F0 dwFlags         = dword ptr  8
.text:004196F0 lpMem           = dword ptr  0Ch
.text:004196F0
.text:004196F0                 jmp     ds:__imp_HeapFree
.text:004196F0 HeapFree        endp
.text:004196F0
.text:004196F0 ; ---------------------------------------------------------------------------
.text:004196F6                 align 10h
.text:00419700
.text:00419700 ; =============== S U B R O U T I N E =======================================
.text:00419700
.text:00419700 ; Attributes: thunk
.text:00419700
.text:00419700 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00419700 UnlockFile      proc near               ; CODE XREF: sub_416740+40↑p
.text:00419700
.text:00419700 hFile           = dword ptr  4
.text:00419700 dwFileOffsetLow = dword ptr  8
.text:00419700 dwFileOffsetHigh= dword ptr  0Ch
.text:00419700 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00419700 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00419700
.text:00419700                 jmp     ds:__imp_UnlockFile
.text:00419700 UnlockFile      endp
.text:00419700
.text:00419700 ; ---------------------------------------------------------------------------
.text:00419706                 align 10h
.text:00419710
.text:00419710 ; =============== S U B R O U T I N E =======================================
.text:00419710
.text:00419710 ; Attributes: thunk
.text:00419710
.text:00419710 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00419710 GetSystemInfo   proc near               ; CODE XREF: sub_4168E0+3A↑p
.text:00419710                                         ; sub_416930+3A↑p ...
.text:00419710
.text:00419710 lpSystemInfo    = dword ptr  4
.text:00419710
.text:00419710                 jmp     ds:__imp_GetSystemInfo
.text:00419710 GetSystemInfo   endp
.text:00419710
.text:00419710 ; ---------------------------------------------------------------------------
.text:00419716                 align 10h
.text:00419720
.text:00419720 ; =============== S U B R O U T I N E =======================================
.text:00419720
.text:00419720 ; Attributes: thunk
.text:00419720
.text:00419720 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00419720 CreateDirectoryA proc near              ; CODE XREF: sub_417240+22↑p
.text:00419720
.text:00419720 lpPathName      = dword ptr  4
.text:00419720 lpSecurityAttributes= dword ptr  8
.text:00419720
.text:00419720                 jmp     ds:__imp_CreateDirectoryA
.text:00419720 CreateDirectoryA endp
.text:00419720
.text:00419720 ; ---------------------------------------------------------------------------
.text:00419726                 align 10h
.text:00419730
.text:00419730 ; =============== S U B R O U T I N E =======================================
.text:00419730
.text:00419730 ; Attributes: thunk
.text:00419730
.text:00419730 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00419730 GetTimeZoneInformation proc near        ; CODE XREF: sub_417450+22↑p
.text:00419730
.text:00419730 lpTimeZoneInformation= dword ptr  4
.text:00419730
.text:00419730                 jmp     ds:__imp_GetTimeZoneInformation
.text:00419730 GetTimeZoneInformation endp
.text:00419730
.text:00419730 ; ---------------------------------------------------------------------------
.text:00419736                 align 10h
.text:00419740
.text:00419740 ; =============== S U B R O U T I N E =======================================
.text:00419740
.text:00419740 ; Attributes: thunk
.text:00419740
.text:00419740 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00419740 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_417450+4F↑p
.text:00419740
.text:00419740 lpSystemTimeAsFileTime= dword ptr  4
.text:00419740
.text:00419740                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00419740 GetSystemTimeAsFileTime endp
.text:00419740
.text:00419740 ; ---------------------------------------------------------------------------
.text:00419746                 align 10h
.text:00419750
.text:00419750 ; =============== S U B R O U T I N E =======================================
.text:00419750
.text:00419750 ; Attributes: thunk
.text:00419750
.text:00419750 ; BOOL __stdcall AreFileApisANSI()
.text:00419750 AreFileApisANSI proc near               ; CODE XREF: sub_417590+89↑p
.text:00419750                 jmp     ds:__imp_AreFileApisANSI
.text:00419750 AreFileApisANSI endp
.text:00419750
.text:00419750 ; ---------------------------------------------------------------------------
.text:00419756                 align 10h
.text:00419760
.text:00419760 ; =============== S U B R O U T I N E =======================================
.text:00419760
.text:00419760 ; Attributes: thunk
.text:00419760
.text:00419760 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00419760 MultiByteToWideChar proc near           ; CODE XREF: sub_417590+BD↑p
.text:00419760
.text:00419760 CodePage        = dword ptr  4
.text:00419760 dwFlags         = dword ptr  8
.text:00419760 lpMultiByteStr  = dword ptr  0Ch
.text:00419760 cbMultiByte     = dword ptr  10h
.text:00419760 lpWideCharStr   = dword ptr  14h
.text:00419760 cchWideChar     = dword ptr  18h
.text:00419760
.text:00419760                 jmp     ds:__imp_MultiByteToWideChar
.text:00419760 MultiByteToWideChar endp
.text:00419760
.text:00419760 ; ---------------------------------------------------------------------------
.text:00419766                 align 10h
.text:00419770
.text:00419770 ; =============== S U B R O U T I N E =======================================
.text:00419770
.text:00419770 ; Attributes: thunk
.text:00419770
.text:00419770 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00419770 lstrcpyA        proc near               ; CODE XREF: sub_417590+128↑p
.text:00419770
.text:00419770 lpString1       = dword ptr  4
.text:00419770 lpString2       = dword ptr  8
.text:00419770
.text:00419770                 jmp     ds:__imp_lstrcpyA
.text:00419770 lstrcpyA        endp
.text:00419770
.text:00419770 ; ---------------------------------------------------------------------------
.text:00419776                 align 10h
.text:00419780
.text:00419780 ; =============== S U B R O U T I N E =======================================
.text:00419780
.text:00419780 ; Attributes: thunk
.text:00419780
.text:00419780 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00419780 RegOpenKeyExA   proc near               ; CODE XREF: .text:00414761↑p
.text:00419780
.text:00419780 hKey            = dword ptr  4
.text:00419780 lpSubKey        = dword ptr  8
.text:00419780 ulOptions       = dword ptr  0Ch
.text:00419780 samDesired      = dword ptr  10h
.text:00419780 phkResult       = dword ptr  14h
.text:00419780
.text:00419780                 jmp     ds:__imp_RegOpenKeyExA
.text:00419780 RegOpenKeyExA   endp
.text:00419780
.text:00419780 ; ---------------------------------------------------------------------------
.text:00419786                 align 10h
.text:00419790
.text:00419790 ; =============== S U B R O U T I N E =======================================
.text:00419790
.text:00419790 ; Attributes: thunk
.text:00419790
.text:00419790 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00419790 RegQueryValueExA proc near              ; CODE XREF: .text:004147A4↑p
.text:00419790
.text:00419790 hKey            = dword ptr  4
.text:00419790 lpValueName     = dword ptr  8
.text:00419790 lpReserved      = dword ptr  0Ch
.text:00419790 lpType          = dword ptr  10h
.text:00419790 lpData          = dword ptr  14h
.text:00419790 lpcbData        = dword ptr  18h
.text:00419790
.text:00419790                 jmp     ds:__imp_RegQueryValueExA
.text:00419790 RegQueryValueExA endp
.text:00419790
.text:00419790 ; ---------------------------------------------------------------------------
.text:00419796                 align 10h
.text:004197A0
.text:004197A0 ; =============== S U B R O U T I N E =======================================
.text:004197A0
.text:004197A0 ; Attributes: thunk
.text:004197A0
.text:004197A0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004197A0 RegCloseKey     proc near               ; CODE XREF: .text:004147C8↑p
.text:004197A0
.text:004197A0 hKey            = dword ptr  4
.text:004197A0
.text:004197A0                 jmp     ds:__imp_RegCloseKey
.text:004197A0 RegCloseKey     endp
.text:004197A0
.text:004197A0 ; ---------------------------------------------------------------------------
.text:004197A6                 db 2 dup(90h)
.text:004197A8                 dd 2 dup(0)
.text:004197B0                 dd 21400h, 0
.text:004197B8                 dd 0C0h, 46000000h
.text:004197C0 ; const IID rclsid
.text:004197C0 rclsid          dd 21401h               ; Data1
.text:004197C0                                         ; DATA XREF: sub_417590+4B↑o
.text:004197C0                 dw 0                    ; Data2
.text:004197C0                 dw 0                    ; Data3
.text:004197C0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004197D0                 dd 214A0h, 0
.text:004197D8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004197E8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004197F8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00419808                 dd 0C0h, 46000000h, 214D2h, 0
.text:00419818                 dd 0C0h, 46000000h, 214E1h, 0
.text:00419828                 dd 0C0h, 46000000h, 214E2h, 0
.text:00419838                 dd 0C0h, 46000000h, 214E3h, 0
.text:00419848                 dd 0C0h, 46000000h, 214E4h, 0
.text:00419858                 dd 0C0h, 46000000h, 21500h, 0
.text:00419868                 dd 0C0h, 46000000h, 214E5h, 0
.text:00419878                 dd 0C0h, 46000000h, 214E6h, 0
.text:00419888                 dd 0C0h, 46000000h, 214E8h, 0
.text:00419898                 dd 0C0h, 46000000h, 214E9h, 0
.text:004198A8                 dd 0C0h, 46000000h, 214EAh, 0
.text:004198B8                 dd 0C0h, 46000000h, 214EBh, 0
.text:004198C8                 dd 0C0h, 46000000h
.text:004198D0 ; const IID riid
.text:004198D0 riid            dd 214EEh               ; Data1
.text:004198D0                                         ; DATA XREF: sub_417590+2B↑o
.text:004198D0                 dw 0                    ; Data2
.text:004198D0                 dw 0                    ; Data3
.text:004198D0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004198E0                 dd 214EFh, 0
.text:004198E8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004198F8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00419908                 dd 0C0h, 46000000h, 214F2h, 0
.text:00419918                 dd 0C0h, 46000000h, 214F3h, 0
.text:00419928                 dd 0C0h, 46000000h, 214F4h, 0
.text:00419938                 dd 0C0h, 46000000h, 214F5h, 0
.text:00419948                 dd 0C0h, 46000000h, 214F6h, 0
.text:00419958                 dd 0C0h, 46000000h, 214F7h, 0
.text:00419968                 dd 0C0h, 46000000h, 214F8h, 0
.text:00419978                 dd 0C0h, 46000000h, 214F9h, 0
.text:00419988                 dd 0C0h, 46000000h, 214FAh, 0
.text:00419998                 dd 0C0h, 46000000h, 214FBh, 0
.text:004199A8                 dd 0C0h, 46000000h, 214FCh, 0
.text:004199B8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004199B8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004199B8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004199B8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004199B8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004199B8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004199B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004199B8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004199B8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004199B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00419A88                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00419A98                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00419AA8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00419AB8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00419AC8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00419AC8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00419AC8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00419AC8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00419AC8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00419AC8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00419AC8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00419B50 dword_419B50    dd 0FFFFFFFFh           ; DATA XREF: .text:00418D79↑r
.text:00419B50                                         ; .text:loc_418DA0↑r ...
.text:00419B54 dword_419B54    dd 0                    ; DATA XREF: .text:loc_418DAC↑r
.text:00419B54                                         ; sub_418DD0:loc_418E1D↑r
.text:00419B58                 dd 0FFFFFFFFh
.text:00419B5C dword_419B5C    dd 29h dup(0)           ; DATA XREF: .data:off_41A104↓o
.text:00419C00                 dd 100h dup(?)
.text:00419C00 _text           ends
.text:00419C00
.data:0041A000 ; Section 2. (virtual address 0001A000)
.data:0041A000 ; Virtual size                  : 00000120 (    288.)
.data:0041A000 ; Section size in file          : 00000200 (    512.)
.data:0041A000 ; Offset to raw data for section: 00019000
.data:0041A000 ; Flags C0000040: Data Readable Writable
.data:0041A000 ; Alignment     : default
.data:0041A000 ; ===========================================================================
.data:0041A000
.data:0041A000 ; Segment type: Pure data
.data:0041A000 ; Segment permissions: Read/Write
.data:0041A000 _data           segment para public 'DATA' use32
.data:0041A000                 assume cs:_data
.data:0041A000                 ;org 41A000h
.data:0041A000 dword_41A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041A000                                         ; sub_401080+CC↑r
.data:0041A004 dword_41A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041A004                                         ; sub_401080+D4↑r
.data:0041A008                 align 10h
.data:0041A010 byte_41A010     db 1                    ; DATA XREF: sub_402010+358↑w
.data:0041A010                                         ; sub_402010+617↑r ...
.data:0041A011                 align 4
.data:0041A014 dword_41A014    dd 48h                  ; DATA XREF: sub_402010:loc_40252E↑w
.data:0041A014                                         ; sub_403B90+10F↑r ...
.data:0041A018 dword_41A018    dd 3                    ; DATA XREF: sub_402010:loc_4025BA↑w
.data:0041A018                                         ; sub_403B90+103↑r ...
.data:0041A01C ; char *off_41A01C
.data:0041A01C off_41A01C      dd offset byte_401280   ; DATA XREF: sub_402010+372↑w
.data:0041A01C                                         ; sub_403B90+121↑r ...
.data:0041A020 off_41A020      dd offset word_401282   ; DATA XREF: sub_402010+3AC↑w
.data:0041A020                                         ; sub_4048A0+3↑r ...
.data:0041A024                 align 10h
.data:0041A030 dword_41A030    dd 1                    ; DATA XREF: sub_406D10+22↑r
.data:0041A030                                         ; sub_406D10+65↑r ...
.data:0041A034 dword_41A034    dd 100h                 ; DATA XREF: sub_406D10+3F↑o
.data:0041A034                                         ; sub_406D10+1A2↑r ...
.data:0041A038 off_41A038      dd offset unk_41B570    ; DATA XREF: sub_406D10+1AA↑r
.data:0041A03C ; void *off_41A03C
.data:0041A03C off_41A03C      dd offset dword_41A034  ; DATA XREF: sub_406D10+39↑r
.data:0041A03C                                         ; sub_406D10+60↑w ...
.data:0041A040 dword_41A040    dd 0FA0h                ; DATA XREF: sub_407200:loc_40827B↑r
.data:0041A040                                         ; sub_407200:loc_408429↑r ...
.data:0041A044                 align 10h
.data:0041A050 ; int off_41A050
.data:0041A050 off_41A050      dd offset sub_40E090    ; DATA XREF: sub_402010+130↑r
.data:0041A054                 align 10h
.data:0041A060 dword_41A060    dd 1                    ; DATA XREF: sub_402010:loc_40261A↑r
.data:0041A060                                         ; sub_402010+66C↑r ...
.data:0041A064 dword_41A064    dd 1                    ; DATA XREF: sub_40EE90+11↑r
.data:0041A064                                         ; .text:0040EF31↑r
.data:0041A068 dword_41A068    dd 3Fh                  ; DATA XREF: sub_40EE90+7D↑w
.data:0041A068                                         ; .text:0040EF9D↑w
.data:0041A06C                 align 10h
.data:0041A070 ; char *off_41A070
.data:0041A070 off_41A070      dd offset aCopyrightC2005
.data:0041A070                                         ; DATA XREF: sub_40F620+DC↑r
.data:0041A070                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041A074                 align 10h
.data:0041A080 ; int Code
.data:0041A080 Code            dd 1                    ; DATA XREF: sub_40FF80+6D↑r
.data:0041A080                                         ; sub_40FF80+9A↑r ...
.data:0041A084                 align 10h
.data:0041A090 dword_41A090    dd 200h                 ; DATA XREF: sub_4108F0+6CD↑r
.data:0041A090                                         ; sub_4108F0+6D8↑r ...
.data:0041A094 ; char *off_41A094
.data:0041A094 off_41A094      dd offset aComExeBatCmd ; DATA XREF: sub_4111A0+3D3↑r
.data:0041A094                                         ; sub_4111A0+400↑r ...
.data:0041A094                                         ; ".com;.exe;.bat;.cmd"
.data:0041A098                 align 10h
.data:0041A0A0 byte_41A0A0     db 41h                  ; DATA XREF: sub_412E70+6B↑w
.data:0041A0A0                                         ; sub_412E70:loc_412F84↑r
.data:0041A0A1                 align 10h
.data:0041A0B0 dword_41A0B0    dd 1                    ; DATA XREF: .text:loc_414617↑r
.data:0041A0B0                                         ; sub_414BF0+202↑w
.data:0041A0B4                 align 10h
.data:0041A0C0 off_41A0C0      dd offset aNotset       ; DATA XREF: .text:00414E6A↑r
.data:0041A0C0                                         ; .text:00415AB2↑r
.data:0041A0C0                                         ; "notset"
.data:0041A0C4 off_41A0C4      dd offset aNotset       ; DATA XREF: .text:00414E82↑r
.data:0041A0C4                                         ; .text:00414EA4↑r ...
.data:0041A0C4                                         ; "notset"
.data:0041A0C8                 align 10h
.data:0041A0D0 dword_41A0D0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041A0D4                 align 10h
.data:0041A0E0 ; int Mode
.data:0041A0E0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041A0E0                                         ; sub_401080+80↑r ...
.data:0041A0E4                 align 10h
.data:0041A0F0 dword_41A0F0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041A0F0                                         ; sub_401080+BA↑r
.data:0041A0F4                 align 10h
.data:0041A100 dword_41A100    dd 0                    ; DATA XREF: sub_418DD0+9↑r
.data:0041A100                                         ; sub_418DD0+1D↑w
.data:0041A104 off_41A104      dd offset dword_419B5C  ; DATA XREF: sub_418D40+6↑r
.data:0041A104                                         ; sub_418D40+17↑r ...
.data:0041A108                 align 1000h
.data:0041A108 _data           ends
.data:0041A108
.bss:0041B000 ; Section 3. (virtual address 0001B000)
.bss:0041B000 ; Virtual size                  : 00000C60 (   3168.)
.bss:0041B000 ; Section size in file          : 00000000 (      0.)
.bss:0041B000 ; Offset to raw data for section: 00000000
.bss:0041B000 ; Flags C0000080: Bss Readable Writable
.bss:0041B000 ; Alignment     : default
.bss:0041B000 ; ===========================================================================
.bss:0041B000
.bss:0041B000 ; Segment type: Uninitialized
.bss:0041B000 ; Segment permissions: Read/Write
.bss:0041B000 _bss            segment para public 'BSS' use32
.bss:0041B000                 assume cs:_bss
.bss:0041B000                 ;org 41B000h
.bss:0041B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0041B000 byte_41B000     db ?                    ; DATA XREF: sub_402010+E7↑w
.bss:0041B000                                         ; sub_403550+28C↑r ...
.bss:0041B001                 align 10h
.bss:0041B010 byte_41B010     db ?                    ; DATA XREF: sub_402010:loc_402576↑w
.bss:0041B010                                         ; sub_402ED0:loc_403162↑r ...
.bss:0041B011                 align 10h
.bss:0041B020 byte_41B020     db ?                    ; DATA XREF: sub_402010+38A↑w
.bss:0041B020                                         ; sub_403B90+F1↑r ...
.bss:0041B021                 align 10h
.bss:0041B030 dword_41B030    dd ?                    ; DATA XREF: sub_402010+167↑w
.bss:0041B030                                         ; sub_402010+39B↑w ...
.bss:0041B034                 align 10h
.bss:0041B040 byte_41B040     db ?                    ; DATA XREF: sub_402010+461↑w
.bss:0041B040                                         ; sub_402ED0+6↑r ...
.bss:0041B041                 align 10h
.bss:0041B050 ; char *dword_41B050
.bss:0041B050 dword_41B050    dd ?                    ; DATA XREF: sub_402010+600↑w
.bss:0041B050                                         ; sub_402ED0:loc_402F07↑r ...
.bss:0041B054                 align 10h
.bss:0041B060 ; char *Str
.bss:0041B060 Str             dd ?                    ; DATA XREF: sub_402010+48C↑w
.bss:0041B060                                         ; sub_402ED0:loc_402F2C↑r ...
.bss:0041B064                 align 10h
.bss:0041B070 ; char *dword_41B070
.bss:0041B070 dword_41B070    dd ?                    ; DATA XREF: sub_402010+473↑w
.bss:0041B070                                         ; sub_402010+6F5↑r ...
.bss:0041B074                 align 10h
.bss:0041B080 ; char *dword_41B080
.bss:0041B080 dword_41B080    dd ?                    ; DATA XREF: sub_402010+4B8↑w
.bss:0041B080                                         ; sub_402010:loc_402720↑r ...
.bss:0041B084                 align 10h
.bss:0041B090 ; char *dword_41B090
.bss:0041B090 dword_41B090    dd ?                    ; DATA XREF: sub_402010+4C9↑w
.bss:0041B090                                         ; sub_402010:loc_402713↑r ...
.bss:0041B094                 align 10h
.bss:0041B0A0 byte_41B0A0     db ?                    ; DATA XREF: sub_402ED0+28↑w
.bss:0041B0A0                                         ; sub_402ED0+132↑o ...
.bss:0041B0A1                 db    ? ;
.bss:0041B0A2                 db    ? ;
.bss:0041B0A3                 db    ? ;
.bss:0041B0A4                 db    ? ;
.bss:0041B0A5                 db    ? ;
.bss:0041B0A6                 db    ? ;
.bss:0041B0A7                 db    ? ;
.bss:0041B0A8                 db    ? ;
.bss:0041B0A9                 db    ? ;
.bss:0041B0AA                 db    ? ;
.bss:0041B0AB                 db    ? ;
.bss:0041B0AC                 db    ? ;
.bss:0041B0AD                 db    ? ;
.bss:0041B0AE                 db    ? ;
.bss:0041B0AF                 db    ? ;
.bss:0041B0B0                 db    ? ;
.bss:0041B0B1                 db    ? ;
.bss:0041B0B2                 db    ? ;
.bss:0041B0B3                 db    ? ;
.bss:0041B0B4                 db    ? ;
.bss:0041B0B5                 db    ? ;
.bss:0041B0B6                 db    ? ;
.bss:0041B0B7                 db    ? ;
.bss:0041B0B8                 db    ? ;
.bss:0041B0B9                 db    ? ;
.bss:0041B0BA                 db    ? ;
.bss:0041B0BB                 db    ? ;
.bss:0041B0BC                 db    ? ;
.bss:0041B0BD                 db    ? ;
.bss:0041B0BE                 db    ? ;
.bss:0041B0BF                 db    ? ;
.bss:0041B0C0                 db    ? ;
.bss:0041B0C1                 db    ? ;
.bss:0041B0C2                 db    ? ;
.bss:0041B0C3                 db    ? ;
.bss:0041B0C4                 db    ? ;
.bss:0041B0C5                 db    ? ;
.bss:0041B0C6                 db    ? ;
.bss:0041B0C7                 db    ? ;
.bss:0041B0C8                 db    ? ;
.bss:0041B0C9                 db    ? ;
.bss:0041B0CA                 db    ? ;
.bss:0041B0CB                 db    ? ;
.bss:0041B0CC                 db    ? ;
.bss:0041B0CD                 db    ? ;
.bss:0041B0CE                 db    ? ;
.bss:0041B0CF                 db    ? ;
.bss:0041B0D0                 db    ? ;
.bss:0041B0D1                 db    ? ;
.bss:0041B0D2                 db    ? ;
.bss:0041B0D3                 db    ? ;
.bss:0041B0D4                 db    ? ;
.bss:0041B0D5                 db    ? ;
.bss:0041B0D6                 db    ? ;
.bss:0041B0D7                 db    ? ;
.bss:0041B0D8                 db    ? ;
.bss:0041B0D9                 db    ? ;
.bss:0041B0DA                 db    ? ;
.bss:0041B0DB                 db    ? ;
.bss:0041B0DC                 db    ? ;
.bss:0041B0DD                 db    ? ;
.bss:0041B0DE                 db    ? ;
.bss:0041B0DF                 db    ? ;
.bss:0041B0E0                 db    ? ;
.bss:0041B0E1                 db    ? ;
.bss:0041B0E2                 db    ? ;
.bss:0041B0E3                 db    ? ;
.bss:0041B0E4                 db    ? ;
.bss:0041B0E5                 db    ? ;
.bss:0041B0E6                 db    ? ;
.bss:0041B0E7                 db    ? ;
.bss:0041B0E8                 db    ? ;
.bss:0041B0E9                 db    ? ;
.bss:0041B0EA                 db    ? ;
.bss:0041B0EB                 db    ? ;
.bss:0041B0EC                 db    ? ;
.bss:0041B0ED                 db    ? ;
.bss:0041B0EE                 db    ? ;
.bss:0041B0EF                 db    ? ;
.bss:0041B0F0                 db    ? ;
.bss:0041B0F1                 db    ? ;
.bss:0041B0F2                 db    ? ;
.bss:0041B0F3                 db    ? ;
.bss:0041B0F4                 db    ? ;
.bss:0041B0F5                 db    ? ;
.bss:0041B0F6                 db    ? ;
.bss:0041B0F7                 db    ? ;
.bss:0041B0F8                 db    ? ;
.bss:0041B0F9                 db    ? ;
.bss:0041B0FA                 db    ? ;
.bss:0041B0FB                 db    ? ;
.bss:0041B0FC                 db    ? ;
.bss:0041B0FD                 db    ? ;
.bss:0041B0FE                 db    ? ;
.bss:0041B0FF                 db    ? ;
.bss:0041B100                 db    ? ;
.bss:0041B101                 db    ? ;
.bss:0041B102                 db    ? ;
.bss:0041B103                 db    ? ;
.bss:0041B104                 db    ? ;
.bss:0041B105                 db    ? ;
.bss:0041B106                 db    ? ;
.bss:0041B107                 db    ? ;
.bss:0041B108                 db    ? ;
.bss:0041B109                 db    ? ;
.bss:0041B10A                 db    ? ;
.bss:0041B10B                 db    ? ;
.bss:0041B10C                 db    ? ;
.bss:0041B10D                 db    ? ;
.bss:0041B10E                 db    ? ;
.bss:0041B10F                 db    ? ;
.bss:0041B110                 db    ? ;
.bss:0041B111                 db    ? ;
.bss:0041B112                 db    ? ;
.bss:0041B113                 db    ? ;
.bss:0041B114                 db    ? ;
.bss:0041B115                 db    ? ;
.bss:0041B116                 db    ? ;
.bss:0041B117                 db    ? ;
.bss:0041B118                 db    ? ;
.bss:0041B119                 db    ? ;
.bss:0041B11A                 db    ? ;
.bss:0041B11B                 db    ? ;
.bss:0041B11C                 db    ? ;
.bss:0041B11D                 db    ? ;
.bss:0041B11E                 db    ? ;
.bss:0041B11F                 db    ? ;
.bss:0041B120                 db    ? ;
.bss:0041B121                 db    ? ;
.bss:0041B122                 db    ? ;
.bss:0041B123                 db    ? ;
.bss:0041B124                 db    ? ;
.bss:0041B125                 db    ? ;
.bss:0041B126                 db    ? ;
.bss:0041B127                 db    ? ;
.bss:0041B128                 db    ? ;
.bss:0041B129                 db    ? ;
.bss:0041B12A                 db    ? ;
.bss:0041B12B                 db    ? ;
.bss:0041B12C                 db    ? ;
.bss:0041B12D                 db    ? ;
.bss:0041B12E                 db    ? ;
.bss:0041B12F                 db    ? ;
.bss:0041B130                 db    ? ;
.bss:0041B131                 db    ? ;
.bss:0041B132                 db    ? ;
.bss:0041B133                 db    ? ;
.bss:0041B134                 db    ? ;
.bss:0041B135                 db    ? ;
.bss:0041B136                 db    ? ;
.bss:0041B137                 db    ? ;
.bss:0041B138                 db    ? ;
.bss:0041B139                 db    ? ;
.bss:0041B13A                 db    ? ;
.bss:0041B13B                 db    ? ;
.bss:0041B13C                 db    ? ;
.bss:0041B13D                 db    ? ;
.bss:0041B13E                 db    ? ;
.bss:0041B13F                 db    ? ;
.bss:0041B140                 db    ? ;
.bss:0041B141                 db    ? ;
.bss:0041B142                 db    ? ;
.bss:0041B143                 db    ? ;
.bss:0041B144                 db    ? ;
.bss:0041B145                 db    ? ;
.bss:0041B146                 db    ? ;
.bss:0041B147                 db    ? ;
.bss:0041B148                 db    ? ;
.bss:0041B149                 db    ? ;
.bss:0041B14A                 db    ? ;
.bss:0041B14B                 db    ? ;
.bss:0041B14C                 db    ? ;
.bss:0041B14D                 db    ? ;
.bss:0041B14E                 db    ? ;
.bss:0041B14F                 db    ? ;
.bss:0041B150                 db    ? ;
.bss:0041B151                 db    ? ;
.bss:0041B152                 db    ? ;
.bss:0041B153                 db    ? ;
.bss:0041B154                 db    ? ;
.bss:0041B155                 db    ? ;
.bss:0041B156                 db    ? ;
.bss:0041B157                 db    ? ;
.bss:0041B158                 db    ? ;
.bss:0041B159                 db    ? ;
.bss:0041B15A                 db    ? ;
.bss:0041B15B                 db    ? ;
.bss:0041B15C                 db    ? ;
.bss:0041B15D                 db    ? ;
.bss:0041B15E                 db    ? ;
.bss:0041B15F                 db    ? ;
.bss:0041B160                 db    ? ;
.bss:0041B161                 db    ? ;
.bss:0041B162                 db    ? ;
.bss:0041B163                 db    ? ;
.bss:0041B164                 db    ? ;
.bss:0041B165                 db    ? ;
.bss:0041B166                 db    ? ;
.bss:0041B167                 db    ? ;
.bss:0041B168                 db    ? ;
.bss:0041B169                 db    ? ;
.bss:0041B16A                 db    ? ;
.bss:0041B16B                 db    ? ;
.bss:0041B16C                 db    ? ;
.bss:0041B16D                 db    ? ;
.bss:0041B16E                 db    ? ;
.bss:0041B16F                 db    ? ;
.bss:0041B170                 db    ? ;
.bss:0041B171                 db    ? ;
.bss:0041B172                 db    ? ;
.bss:0041B173                 db    ? ;
.bss:0041B174                 db    ? ;
.bss:0041B175                 db    ? ;
.bss:0041B176                 db    ? ;
.bss:0041B177                 db    ? ;
.bss:0041B178                 db    ? ;
.bss:0041B179                 db    ? ;
.bss:0041B17A                 db    ? ;
.bss:0041B17B                 db    ? ;
.bss:0041B17C                 db    ? ;
.bss:0041B17D                 db    ? ;
.bss:0041B17E                 db    ? ;
.bss:0041B17F                 db    ? ;
.bss:0041B180                 db    ? ;
.bss:0041B181                 db    ? ;
.bss:0041B182                 db    ? ;
.bss:0041B183                 db    ? ;
.bss:0041B184                 db    ? ;
.bss:0041B185                 db    ? ;
.bss:0041B186                 db    ? ;
.bss:0041B187                 db    ? ;
.bss:0041B188                 db    ? ;
.bss:0041B189                 db    ? ;
.bss:0041B18A                 db    ? ;
.bss:0041B18B                 db    ? ;
.bss:0041B18C                 db    ? ;
.bss:0041B18D                 db    ? ;
.bss:0041B18E                 db    ? ;
.bss:0041B18F                 db    ? ;
.bss:0041B190                 db    ? ;
.bss:0041B191                 db    ? ;
.bss:0041B192                 db    ? ;
.bss:0041B193                 db    ? ;
.bss:0041B194                 db    ? ;
.bss:0041B195                 db    ? ;
.bss:0041B196                 db    ? ;
.bss:0041B197                 db    ? ;
.bss:0041B198                 db    ? ;
.bss:0041B199                 db    ? ;
.bss:0041B19A                 db    ? ;
.bss:0041B19B                 db    ? ;
.bss:0041B19C                 db    ? ;
.bss:0041B19D                 db    ? ;
.bss:0041B19E                 db    ? ;
.bss:0041B19F                 db    ? ;
.bss:0041B1A0 dword_41B1A0    dd ?                    ; DATA XREF: sub_402ED0:loc_40313F↑w
.bss:0041B1A0                                         ; sub_403550+5B1↑r
.bss:0041B1A4                 align 10h
.bss:0041B1B0 unk_41B1B0      db    ? ;               ; DATA XREF: sub_403550:loc_403AF9↑o
.bss:0041B1B1                 db    ? ;
.bss:0041B1B2                 db    ? ;
.bss:0041B1B3                 db    ? ;
.bss:0041B1B4                 db    ? ;
.bss:0041B1B5                 db    ? ;
.bss:0041B1B6                 db    ? ;
.bss:0041B1B7                 db    ? ;
.bss:0041B1B8 dword_41B1B8    dd ?                    ; DATA XREF: sub_403550+5D9↑r
.bss:0041B1BC                 align 10h
.bss:0041B1C0 dword_41B1C0    dd ?                    ; DATA XREF: sub_402ED0:loc_403075↑w
.bss:0041B1C0                                         ; sub_403550:loc_403662↑r ...
.bss:0041B1C4                 align 10h
.bss:0041B1D0 unk_41B1D0      db    ? ;               ; DATA XREF: sub_403550:loc_403A8D↑o
.bss:0041B1D1                 db    ? ;
.bss:0041B1D2                 db    ? ;
.bss:0041B1D3                 db    ? ;
.bss:0041B1D4 dword_41B1D4    dd ?                    ; DATA XREF: sub_403550+573↑r
.bss:0041B1D8 dword_41B1D8    dd ?                    ; DATA XREF: sub_403550+57D↑r
.bss:0041B1DC                 align 10h
.bss:0041B1E0 byte_41B1E0     db ?                    ; DATA XREF: sub_402010+839↑o
.bss:0041B1E0                                         ; sub_402010+857↑w ...
.bss:0041B1E1                 db    ? ;
.bss:0041B1E2                 db    ? ;
.bss:0041B1E3                 db    ? ;
.bss:0041B1E4                 db    ? ;
.bss:0041B1E5                 db    ? ;
.bss:0041B1E6                 db    ? ;
.bss:0041B1E7                 db    ? ;
.bss:0041B1E8                 db    ? ;
.bss:0041B1E9 byte_41B1E9     db ?                    ; DATA XREF: sub_402010+870↑w
.bss:0041B1E9                                         ; sub_402ED0+EE↑w
.bss:0041B1EA byte_41B1EA     db ?                    ; DATA XREF: sub_402010+877↑w
.bss:0041B1EA                                         ; sub_402ED0+F5↑w
.bss:0041B1EB                 align 20h
.bss:0041B200 byte_41B200     db ?                    ; DATA XREF: sub_402010+869↑w
.bss:0041B200                                         ; sub_402ED0+E7↑w
.bss:0041B201                 db    ? ;
.bss:0041B202                 db    ? ;
.bss:0041B203                 db    ? ;
.bss:0041B204                 db    ? ;
.bss:0041B205                 db    ? ;
.bss:0041B206                 db    ? ;
.bss:0041B207                 db    ? ;
.bss:0041B208                 db    ? ;
.bss:0041B209                 db    ? ;
.bss:0041B20A                 db    ? ;
.bss:0041B20B                 db    ? ;
.bss:0041B20C                 db    ? ;
.bss:0041B20D                 db    ? ;
.bss:0041B20E                 db    ? ;
.bss:0041B20F                 db    ? ;
.bss:0041B210                 db    ? ;
.bss:0041B211                 db    ? ;
.bss:0041B212                 db    ? ;
.bss:0041B213                 db    ? ;
.bss:0041B214                 db    ? ;
.bss:0041B215                 db    ? ;
.bss:0041B216                 db    ? ;
.bss:0041B217                 db    ? ;
.bss:0041B218                 db    ? ;
.bss:0041B219                 db    ? ;
.bss:0041B21A                 db    ? ;
.bss:0041B21B                 db    ? ;
.bss:0041B21C                 db    ? ;
.bss:0041B21D                 db    ? ;
.bss:0041B21E                 db    ? ;
.bss:0041B21F                 db    ? ;
.bss:0041B220                 db    ? ;
.bss:0041B221                 db    ? ;
.bss:0041B222                 db    ? ;
.bss:0041B223                 db    ? ;
.bss:0041B224                 db    ? ;
.bss:0041B225                 db    ? ;
.bss:0041B226                 db    ? ;
.bss:0041B227                 db    ? ;
.bss:0041B228                 db    ? ;
.bss:0041B229                 db    ? ;
.bss:0041B22A                 db    ? ;
.bss:0041B22B                 db    ? ;
.bss:0041B22C                 db    ? ;
.bss:0041B22D                 db    ? ;
.bss:0041B22E                 db    ? ;
.bss:0041B22F                 db    ? ;
.bss:0041B230                 db    ? ;
.bss:0041B231                 db    ? ;
.bss:0041B232                 db    ? ;
.bss:0041B233                 db    ? ;
.bss:0041B234                 db    ? ;
.bss:0041B235                 db    ? ;
.bss:0041B236                 db    ? ;
.bss:0041B237                 db    ? ;
.bss:0041B238                 db    ? ;
.bss:0041B239                 db    ? ;
.bss:0041B23A                 db    ? ;
.bss:0041B23B                 db    ? ;
.bss:0041B23C                 db    ? ;
.bss:0041B23D                 db    ? ;
.bss:0041B23E                 db    ? ;
.bss:0041B23F                 db    ? ;
.bss:0041B240                 db    ? ;
.bss:0041B241                 db    ? ;
.bss:0041B242                 db    ? ;
.bss:0041B243                 db    ? ;
.bss:0041B244                 db    ? ;
.bss:0041B245                 db    ? ;
.bss:0041B246                 db    ? ;
.bss:0041B247                 db    ? ;
.bss:0041B248                 db    ? ;
.bss:0041B249                 db    ? ;
.bss:0041B24A                 db    ? ;
.bss:0041B24B                 db    ? ;
.bss:0041B24C                 db    ? ;
.bss:0041B24D                 db    ? ;
.bss:0041B24E                 db    ? ;
.bss:0041B24F                 db    ? ;
.bss:0041B250                 db    ? ;
.bss:0041B251                 db    ? ;
.bss:0041B252                 db    ? ;
.bss:0041B253                 db    ? ;
.bss:0041B254                 db    ? ;
.bss:0041B255                 db    ? ;
.bss:0041B256                 db    ? ;
.bss:0041B257                 db    ? ;
.bss:0041B258                 db    ? ;
.bss:0041B259                 db    ? ;
.bss:0041B25A                 db    ? ;
.bss:0041B25B                 db    ? ;
.bss:0041B25C                 db    ? ;
.bss:0041B25D                 db    ? ;
.bss:0041B25E                 db    ? ;
.bss:0041B25F                 db    ? ;
.bss:0041B260                 db    ? ;
.bss:0041B261                 db    ? ;
.bss:0041B262                 db    ? ;
.bss:0041B263                 db    ? ;
.bss:0041B264                 db    ? ;
.bss:0041B265                 db    ? ;
.bss:0041B266                 db    ? ;
.bss:0041B267                 db    ? ;
.bss:0041B268                 db    ? ;
.bss:0041B269                 db    ? ;
.bss:0041B26A                 db    ? ;
.bss:0041B26B                 db    ? ;
.bss:0041B26C                 db    ? ;
.bss:0041B26D                 db    ? ;
.bss:0041B26E                 db    ? ;
.bss:0041B26F                 db    ? ;
.bss:0041B270                 db    ? ;
.bss:0041B271                 db    ? ;
.bss:0041B272                 db    ? ;
.bss:0041B273                 db    ? ;
.bss:0041B274                 db    ? ;
.bss:0041B275                 db    ? ;
.bss:0041B276                 db    ? ;
.bss:0041B277                 db    ? ;
.bss:0041B278                 db    ? ;
.bss:0041B279                 db    ? ;
.bss:0041B27A                 db    ? ;
.bss:0041B27B                 db    ? ;
.bss:0041B27C                 db    ? ;
.bss:0041B27D                 db    ? ;
.bss:0041B27E                 db    ? ;
.bss:0041B27F                 db    ? ;
.bss:0041B280                 db    ? ;
.bss:0041B281                 db    ? ;
.bss:0041B282                 db    ? ;
.bss:0041B283                 db    ? ;
.bss:0041B284                 db    ? ;
.bss:0041B285                 db    ? ;
.bss:0041B286                 db    ? ;
.bss:0041B287                 db    ? ;
.bss:0041B288                 db    ? ;
.bss:0041B289                 db    ? ;
.bss:0041B28A                 db    ? ;
.bss:0041B28B                 db    ? ;
.bss:0041B28C                 db    ? ;
.bss:0041B28D                 db    ? ;
.bss:0041B28E                 db    ? ;
.bss:0041B28F                 db    ? ;
.bss:0041B290                 db    ? ;
.bss:0041B291                 db    ? ;
.bss:0041B292                 db    ? ;
.bss:0041B293                 db    ? ;
.bss:0041B294                 db    ? ;
.bss:0041B295                 db    ? ;
.bss:0041B296                 db    ? ;
.bss:0041B297                 db    ? ;
.bss:0041B298                 db    ? ;
.bss:0041B299                 db    ? ;
.bss:0041B29A                 db    ? ;
.bss:0041B29B                 db    ? ;
.bss:0041B29C                 db    ? ;
.bss:0041B29D                 db    ? ;
.bss:0041B29E                 db    ? ;
.bss:0041B29F                 db    ? ;
.bss:0041B2A0                 db    ? ;
.bss:0041B2A1                 db    ? ;
.bss:0041B2A2                 db    ? ;
.bss:0041B2A3                 db    ? ;
.bss:0041B2A4                 db    ? ;
.bss:0041B2A5                 db    ? ;
.bss:0041B2A6                 db    ? ;
.bss:0041B2A7                 db    ? ;
.bss:0041B2A8                 db    ? ;
.bss:0041B2A9                 db    ? ;
.bss:0041B2AA                 db    ? ;
.bss:0041B2AB                 db    ? ;
.bss:0041B2AC                 db    ? ;
.bss:0041B2AD                 db    ? ;
.bss:0041B2AE                 db    ? ;
.bss:0041B2AF                 db    ? ;
.bss:0041B2B0                 db    ? ;
.bss:0041B2B1                 db    ? ;
.bss:0041B2B2                 db    ? ;
.bss:0041B2B3                 db    ? ;
.bss:0041B2B4                 db    ? ;
.bss:0041B2B5                 db    ? ;
.bss:0041B2B6                 db    ? ;
.bss:0041B2B7                 db    ? ;
.bss:0041B2B8                 db    ? ;
.bss:0041B2B9                 db    ? ;
.bss:0041B2BA                 db    ? ;
.bss:0041B2BB                 db    ? ;
.bss:0041B2BC                 db    ? ;
.bss:0041B2BD                 db    ? ;
.bss:0041B2BE                 db    ? ;
.bss:0041B2BF                 db    ? ;
.bss:0041B2C0                 db    ? ;
.bss:0041B2C1                 db    ? ;
.bss:0041B2C2                 db    ? ;
.bss:0041B2C3                 db    ? ;
.bss:0041B2C4                 db    ? ;
.bss:0041B2C5                 db    ? ;
.bss:0041B2C6                 db    ? ;
.bss:0041B2C7                 db    ? ;
.bss:0041B2C8                 db    ? ;
.bss:0041B2C9                 db    ? ;
.bss:0041B2CA                 db    ? ;
.bss:0041B2CB                 db    ? ;
.bss:0041B2CC                 db    ? ;
.bss:0041B2CD                 db    ? ;
.bss:0041B2CE                 db    ? ;
.bss:0041B2CF                 db    ? ;
.bss:0041B2D0                 db    ? ;
.bss:0041B2D1                 db    ? ;
.bss:0041B2D2                 db    ? ;
.bss:0041B2D3                 db    ? ;
.bss:0041B2D4                 db    ? ;
.bss:0041B2D5                 db    ? ;
.bss:0041B2D6                 db    ? ;
.bss:0041B2D7                 db    ? ;
.bss:0041B2D8                 db    ? ;
.bss:0041B2D9                 db    ? ;
.bss:0041B2DA                 db    ? ;
.bss:0041B2DB                 db    ? ;
.bss:0041B2DC                 db    ? ;
.bss:0041B2DD                 db    ? ;
.bss:0041B2DE                 db    ? ;
.bss:0041B2DF                 db    ? ;
.bss:0041B2E0 dword_41B2E0    dd ?                    ; DATA XREF: sub_402010+740↑w
.bss:0041B2E0                                         ; sub_403550+1C0↑r ...
.bss:0041B2E4                 align 10h
.bss:0041B2F0 dword_41B2F0    dd ?                    ; DATA XREF: sub_402010+745↑w
.bss:0041B2F0                                         ; sub_403550+41B↑r ...
.bss:0041B2F4                 align 10h
.bss:0041B300 dword_41B300    dd ?                    ; DATA XREF: sub_402010:loc_402802↑o
.bss:0041B300                                         ; sub_403550+475↑r
.bss:0041B304                 align 8
.bss:0041B308 dword_41B308    dd ?                    ; DATA XREF: sub_402010+804↑r
.bss:0041B308                                         ; sub_403550+200↑r
.bss:0041B30C                 align 10h
.bss:0041B310 dword_41B310    dd ?                    ; DATA XREF: sub_402010:loc_4027DA↑o
.bss:0041B310                                         ; sub_403550+23B↑r
.bss:0041B314                 align 8
.bss:0041B318 dword_41B318    dd ?                    ; DATA XREF: sub_402010+7DC↑r
.bss:0041B318                                         ; sub_403550+21B↑r
.bss:0041B31C                 align 10h
.bss:0041B320 dword_41B320    dd ?                    ; DATA XREF: sub_402010+62B↑w
.bss:0041B320                                         ; sub_402010+641↑r ...
.bss:0041B324                 align 10h
.bss:0041B330 dword_41B330    dd ?                    ; DATA XREF: sub_402010+732↑w
.bss:0041B330                                         ; sub_402010+7A5↑r ...
.bss:0041B334                 align 10h
.bss:0041B340 dword_41B340    dd ?                    ; DATA XREF: sub_402010+63C↑w
.bss:0041B340                                         ; sub_402010+671↑r ...
.bss:0041B344                 align 10h
.bss:0041B350 dword_41B350    dd ?                    ; DATA XREF: sub_402010+662↑w
.bss:0041B350                                         ; sub_402010+7AD↑r ...
.bss:0041B354                 align 10h
.bss:0041B360 dword_41B360    dd ?                    ; DATA XREF: sub_402010:loc_402794↑o
.bss:0041B360                                         ; sub_403550+7↑r ...
.bss:0041B364 dword_41B364    dd ?                    ; DATA XREF: sub_403550+27↑r
.bss:0041B364                                         ; sub_403550+53↑r ...
.bss:0041B368                 align 10h
.bss:0041B370 ; void *Block
.bss:0041B370 Block           dd ?                    ; DATA XREF: sub_402010+755↑r
.bss:0041B370                                         ; sub_403550:loc_4037CF↑r ...
.bss:0041B374                 align 10h
.bss:0041B380 dword_41B380    dd ?                    ; DATA XREF: sub_403550+273↑r
.bss:0041B380                                         ; sub_403550+446↑w
.bss:0041B384                 align 10h
.bss:0041B390 ; void *dword_41B390
.bss:0041B390 dword_41B390    dd ?                    ; DATA XREF: sub_402010+728↑w
.bss:0041B390                                         ; sub_402010+75B↑r ...
.bss:0041B394                 align 10h
.bss:0041B3A0 byte_41B3A0     db ?                    ; DATA XREF: sub_403B90+1A1↑w
.bss:0041B3A0                                         ; sub_403B90+1E7↑w ...
.bss:0041B3A1                 db    ? ;
.bss:0041B3A2                 db    ? ;
.bss:0041B3A3                 db    ? ;
.bss:0041B3A4                 db    ? ;
.bss:0041B3A5                 db    ? ;
.bss:0041B3A6                 db    ? ;
.bss:0041B3A7                 db    ? ;
.bss:0041B3A8                 db    ? ;
.bss:0041B3A9                 db    ? ;
.bss:0041B3AA                 db    ? ;
.bss:0041B3AB                 db    ? ;
.bss:0041B3AC byte_41B3AC     db ?                    ; DATA XREF: sub_403B90+1B1↑w
.bss:0041B3AD                 db    ? ;
.bss:0041B3AE                 db    ? ;
.bss:0041B3AF                 db    ? ;
.bss:0041B3B0                 db    ? ;
.bss:0041B3B1                 db    ? ;
.bss:0041B3B2                 db    ? ;
.bss:0041B3B3                 db    ? ;
.bss:0041B3B4                 db    ? ;
.bss:0041B3B5                 db    ? ;
.bss:0041B3B6                 db    ? ;
.bss:0041B3B7                 db    ? ;
.bss:0041B3B8                 db    ? ;
.bss:0041B3B9                 db    ? ;
.bss:0041B3BA                 db    ? ;
.bss:0041B3BB                 db    ? ;
.bss:0041B3BC                 db    ? ;
.bss:0041B3BD                 db    ? ;
.bss:0041B3BE                 db    ? ;
.bss:0041B3BF                 db    ? ;
.bss:0041B3C0                 db    ? ;
.bss:0041B3C1                 db    ? ;
.bss:0041B3C2 byte_41B3C2     db ?                    ; DATA XREF: sub_403B90:loc_403DA6↑w
.bss:0041B3C3                 db    ? ;
.bss:0041B3C4                 db    ? ;
.bss:0041B3C5                 db    ? ;
.bss:0041B3C6                 db    ? ;
.bss:0041B3C7                 db    ? ;
.bss:0041B3C8                 db    ? ;
.bss:0041B3C9                 db    ? ;
.bss:0041B3CA                 db    ? ;
.bss:0041B3CB                 db    ? ;
.bss:0041B3CC                 db    ? ;
.bss:0041B3CD                 db    ? ;
.bss:0041B3CE                 db    ? ;
.bss:0041B3CF                 db    ? ;
.bss:0041B3D0                 db    ? ;
.bss:0041B3D1                 db    ? ;
.bss:0041B3D2                 db    ? ;
.bss:0041B3D3                 db    ? ;
.bss:0041B3D4                 db    ? ;
.bss:0041B3D5                 db    ? ;
.bss:0041B3D6                 db    ? ;
.bss:0041B3D7                 db    ? ;
.bss:0041B3D8                 db    ? ;
.bss:0041B3D9                 db    ? ;
.bss:0041B3DA                 db    ? ;
.bss:0041B3DB                 db    ? ;
.bss:0041B3DC                 db    ? ;
.bss:0041B3DD                 db    ? ;
.bss:0041B3DE                 db    ? ;
.bss:0041B3DF                 db    ? ;
.bss:0041B3E0                 db    ? ;
.bss:0041B3E1                 db    ? ;
.bss:0041B3E2                 db    ? ;
.bss:0041B3E3                 db    ? ;
.bss:0041B3E4                 db    ? ;
.bss:0041B3E5                 db    ? ;
.bss:0041B3E6                 db    ? ;
.bss:0041B3E7                 db    ? ;
.bss:0041B3E8                 db    ? ;
.bss:0041B3E9                 db    ? ;
.bss:0041B3EA                 db    ? ;
.bss:0041B3EB                 db    ? ;
.bss:0041B3EC                 db    ? ;
.bss:0041B3ED                 db    ? ;
.bss:0041B3EE                 db    ? ;
.bss:0041B3EF                 db    ? ;
.bss:0041B3F0                 db    ? ;
.bss:0041B3F1                 db    ? ;
.bss:0041B3F2                 db    ? ;
.bss:0041B3F3                 db    ? ;
.bss:0041B3F4                 db    ? ;
.bss:0041B3F5                 db    ? ;
.bss:0041B3F6                 db    ? ;
.bss:0041B3F7                 db    ? ;
.bss:0041B3F8                 db    ? ;
.bss:0041B3F9                 db    ? ;
.bss:0041B3FA                 db    ? ;
.bss:0041B3FB                 db    ? ;
.bss:0041B3FC                 db    ? ;
.bss:0041B3FD                 db    ? ;
.bss:0041B3FE                 db    ? ;
.bss:0041B3FF                 db    ? ;
.bss:0041B400                 db    ? ;
.bss:0041B401                 db    ? ;
.bss:0041B402                 db    ? ;
.bss:0041B403                 db    ? ;
.bss:0041B404                 db    ? ;
.bss:0041B405                 db    ? ;
.bss:0041B406                 db    ? ;
.bss:0041B407                 db    ? ;
.bss:0041B408                 db    ? ;
.bss:0041B409                 db    ? ;
.bss:0041B40A                 db    ? ;
.bss:0041B40B                 db    ? ;
.bss:0041B40C                 db    ? ;
.bss:0041B40D                 db    ? ;
.bss:0041B40E                 db    ? ;
.bss:0041B40F                 db    ? ;
.bss:0041B410                 db    ? ;
.bss:0041B411                 db    ? ;
.bss:0041B412                 db    ? ;
.bss:0041B413                 db    ? ;
.bss:0041B414                 db    ? ;
.bss:0041B415                 db    ? ;
.bss:0041B416                 db    ? ;
.bss:0041B417                 db    ? ;
.bss:0041B418                 db    ? ;
.bss:0041B419                 db    ? ;
.bss:0041B41A                 db    ? ;
.bss:0041B41B                 db    ? ;
.bss:0041B41C                 db    ? ;
.bss:0041B41D                 db    ? ;
.bss:0041B41E                 db    ? ;
.bss:0041B41F                 db    ? ;
.bss:0041B420                 db    ? ;
.bss:0041B421                 db    ? ;
.bss:0041B422                 db    ? ;
.bss:0041B423                 db    ? ;
.bss:0041B424                 db    ? ;
.bss:0041B425                 db    ? ;
.bss:0041B426                 db    ? ;
.bss:0041B427                 db    ? ;
.bss:0041B428                 db    ? ;
.bss:0041B429                 db    ? ;
.bss:0041B42A                 db    ? ;
.bss:0041B42B                 db    ? ;
.bss:0041B42C                 db    ? ;
.bss:0041B42D                 db    ? ;
.bss:0041B42E                 db    ? ;
.bss:0041B42F                 db    ? ;
.bss:0041B430                 db    ? ;
.bss:0041B431                 db    ? ;
.bss:0041B432                 db    ? ;
.bss:0041B433                 db    ? ;
.bss:0041B434                 db    ? ;
.bss:0041B435                 db    ? ;
.bss:0041B436                 db    ? ;
.bss:0041B437                 db    ? ;
.bss:0041B438                 db    ? ;
.bss:0041B439                 db    ? ;
.bss:0041B43A                 db    ? ;
.bss:0041B43B                 db    ? ;
.bss:0041B43C                 db    ? ;
.bss:0041B43D                 db    ? ;
.bss:0041B43E                 db    ? ;
.bss:0041B43F                 db    ? ;
.bss:0041B440                 db    ? ;
.bss:0041B441                 db    ? ;
.bss:0041B442                 db    ? ;
.bss:0041B443                 db    ? ;
.bss:0041B444                 db    ? ;
.bss:0041B445                 db    ? ;
.bss:0041B446                 db    ? ;
.bss:0041B447                 db    ? ;
.bss:0041B448                 db    ? ;
.bss:0041B449                 db    ? ;
.bss:0041B44A                 db    ? ;
.bss:0041B44B                 db    ? ;
.bss:0041B44C                 db    ? ;
.bss:0041B44D                 db    ? ;
.bss:0041B44E                 db    ? ;
.bss:0041B44F                 db    ? ;
.bss:0041B450                 db    ? ;
.bss:0041B451                 db    ? ;
.bss:0041B452                 db    ? ;
.bss:0041B453                 db    ? ;
.bss:0041B454                 db    ? ;
.bss:0041B455                 db    ? ;
.bss:0041B456                 db    ? ;
.bss:0041B457                 db    ? ;
.bss:0041B458                 db    ? ;
.bss:0041B459                 db    ? ;
.bss:0041B45A                 db    ? ;
.bss:0041B45B                 db    ? ;
.bss:0041B45C                 db    ? ;
.bss:0041B45D                 db    ? ;
.bss:0041B45E                 db    ? ;
.bss:0041B45F                 db    ? ;
.bss:0041B460                 db    ? ;
.bss:0041B461                 db    ? ;
.bss:0041B462                 db    ? ;
.bss:0041B463                 db    ? ;
.bss:0041B464                 db    ? ;
.bss:0041B465                 db    ? ;
.bss:0041B466                 db    ? ;
.bss:0041B467                 db    ? ;
.bss:0041B468                 db    ? ;
.bss:0041B469                 db    ? ;
.bss:0041B46A                 db    ? ;
.bss:0041B46B                 db    ? ;
.bss:0041B46C                 db    ? ;
.bss:0041B46D                 db    ? ;
.bss:0041B46E                 db    ? ;
.bss:0041B46F                 db    ? ;
.bss:0041B470                 db    ? ;
.bss:0041B471                 db    ? ;
.bss:0041B472                 db    ? ;
.bss:0041B473                 db    ? ;
.bss:0041B474                 db    ? ;
.bss:0041B475                 db    ? ;
.bss:0041B476                 db    ? ;
.bss:0041B477                 db    ? ;
.bss:0041B478                 db    ? ;
.bss:0041B479                 db    ? ;
.bss:0041B47A                 db    ? ;
.bss:0041B47B                 db    ? ;
.bss:0041B47C                 db    ? ;
.bss:0041B47D                 db    ? ;
.bss:0041B47E                 db    ? ;
.bss:0041B47F                 db    ? ;
.bss:0041B480                 db    ? ;
.bss:0041B481                 db    ? ;
.bss:0041B482                 db    ? ;
.bss:0041B483                 db    ? ;
.bss:0041B484                 db    ? ;
.bss:0041B485                 db    ? ;
.bss:0041B486                 db    ? ;
.bss:0041B487                 db    ? ;
.bss:0041B488                 db    ? ;
.bss:0041B489                 db    ? ;
.bss:0041B48A                 db    ? ;
.bss:0041B48B                 db    ? ;
.bss:0041B48C                 db    ? ;
.bss:0041B48D                 db    ? ;
.bss:0041B48E                 db    ? ;
.bss:0041B48F                 db    ? ;
.bss:0041B490                 db    ? ;
.bss:0041B491                 db    ? ;
.bss:0041B492                 db    ? ;
.bss:0041B493                 db    ? ;
.bss:0041B494                 db    ? ;
.bss:0041B495                 db    ? ;
.bss:0041B496                 db    ? ;
.bss:0041B497                 db    ? ;
.bss:0041B498                 db    ? ;
.bss:0041B499                 db    ? ;
.bss:0041B49A                 db    ? ;
.bss:0041B49B                 db    ? ;
.bss:0041B49C                 db    ? ;
.bss:0041B49D                 db    ? ;
.bss:0041B49E                 db    ? ;
.bss:0041B49F                 db    ? ;
.bss:0041B4A0 dword_41B4A0    dd ?                    ; DATA XREF: sub_403B90+130↑w
.bss:0041B4A0                                         ; sub_403F40+124↑r ...
.bss:0041B4A4                 align 10h
.bss:0041B4B0 dword_41B4B0    dd ?                    ; DATA XREF: sub_403B90+13A↑w
.bss:0041B4B0                                         ; sub_403B90+16E↑w ...
.bss:0041B4B4                 align 10h
.bss:0041B4C0 dword_41B4C0    dd ?                    ; DATA XREF: sub_403B90+140↑w
.bss:0041B4C0                                         ; sub_403B90+174↑w ...
.bss:0041B4C4                 align 10h
.bss:0041B4D0 dword_41B4D0    dd ?                    ; DATA XREF: sub_403B90+166↑r
.bss:0041B4D0                                         ; sub_403B90:loc_403DC4↑r ...
.bss:0041B4D4                 align 10h
.bss:0041B4E0 dword_41B4E0    dd ?                    ; DATA XREF: sub_403E10+B↑w
.bss:0041B4E0                                         ; sub_403F40:loc_4042B0↑w ...
.bss:0041B4E4 dword_41B4E4    dd ?                    ; DATA XREF: sub_403E10+15↑w
.bss:0041B4E4                                         ; sub_403F40:loc_4042F3↑w ...
.bss:0041B4E8                 align 10h
.bss:0041B4F0 dword_41B4F0    dd ?                    ; DATA XREF: sub_403E10+2B↑w
.bss:0041B4F0                                         ; sub_403F40:loc_404383↑w ...
.bss:0041B4F4                 align 10h
.bss:0041B500 dword_41B500    dd ?                    ; DATA XREF: sub_403F40+195↑w
.bss:0041B500                                         ; sub_403F40+1D3↑r ...
.bss:0041B504 dword_41B504    dd ?                    ; DATA XREF: sub_403F40:loc_4040C9↑w
.bss:0041B504                                         ; sub_403F40:loc_4040E0↑r ...
.bss:0041B508                 align 10h
.bss:0041B510 dword_41B510    dd ?                    ; DATA XREF: sub_403F40+2EB↑w
.bss:0041B510                                         ; sub_403F40+589↑w ...
.bss:0041B514                 align 10h
.bss:0041B520 dword_41B520    dd ?                    ; DATA XREF: sub_403F40+14↑w
.bss:0041B520                                         ; sub_403F40+9D↑r ...
.bss:0041B524 dword_41B524    dd ?                    ; DATA XREF: sub_403F40+1E↑w
.bss:0041B524                                         ; sub_403F40:loc_403F8E↑w ...
.bss:0041B528                 align 10h
.bss:0041B530 dword_41B530    dd ?                    ; DATA XREF: sub_403F40:loc_404016↑w
.bss:0041B530                                         ; sub_403F40+42F↑w ...
.bss:0041B534                 align 10h
.bss:0041B540 dword_41B540    dd ?                    ; DATA XREF: sub_403E10+37↑w
.bss:0041B540                                         ; sub_403F40+50D↑w ...
.bss:0041B544 dword_41B544    dd ?                    ; DATA XREF: sub_403E10+1D↑w
.bss:0041B544                                         ; sub_403F40:loc_404400↑w ...
.bss:0041B548                 align 10h
.bss:0041B550 dword_41B550    dd ?                    ; DATA XREF: sub_403E10+3D↑w
.bss:0041B550                                         ; sub_403F40:loc_4044DE↑w ...
.bss:0041B554                 align 10h
.bss:0041B560 ; char *Buffer
.bss:0041B560 Buffer          dd ?                    ; DATA XREF: sub_403B90+D1↑w
.bss:0041B560                                         ; sub_403F40+634↑r ...
.bss:0041B564 dword_41B564    dd ?                    ; DATA XREF: sub_403F40+664↑w
.bss:0041B564                                         ; sub_403F40+696↑w ...
.bss:0041B568                 align 10h
.bss:0041B570 unk_41B570      db    ? ;               ; DATA XREF: sub_406D10+100↑o
.bss:0041B570                                         ; .data:off_41A038↑o
.bss:0041B571                 db    ? ;
.bss:0041B572                 db    ? ;
.bss:0041B573                 db    ? ;
.bss:0041B574                 db    ? ;
.bss:0041B575                 db    ? ;
.bss:0041B576                 db    ? ;
.bss:0041B577                 db    ? ;
.bss:0041B578                 db    ? ;
.bss:0041B579                 db    ? ;
.bss:0041B57A                 db    ? ;
.bss:0041B57B                 db    ? ;
.bss:0041B57C                 db    ? ;
.bss:0041B57D                 db    ? ;
.bss:0041B57E                 db    ? ;
.bss:0041B57F                 db    ? ;
.bss:0041B580                 db    ? ;
.bss:0041B581                 db    ? ;
.bss:0041B582                 db    ? ;
.bss:0041B583                 db    ? ;
.bss:0041B584                 db    ? ;
.bss:0041B585                 db    ? ;
.bss:0041B586                 db    ? ;
.bss:0041B587                 db    ? ;
.bss:0041B588                 db    ? ;
.bss:0041B589                 db    ? ;
.bss:0041B58A                 db    ? ;
.bss:0041B58B                 db    ? ;
.bss:0041B58C                 db    ? ;
.bss:0041B58D                 db    ? ;
.bss:0041B58E                 db    ? ;
.bss:0041B58F                 db    ? ;
.bss:0041B590                 db    ? ;
.bss:0041B591                 db    ? ;
.bss:0041B592                 db    ? ;
.bss:0041B593                 db    ? ;
.bss:0041B594                 db    ? ;
.bss:0041B595                 db    ? ;
.bss:0041B596                 db    ? ;
.bss:0041B597                 db    ? ;
.bss:0041B598                 db    ? ;
.bss:0041B599                 db    ? ;
.bss:0041B59A                 db    ? ;
.bss:0041B59B                 db    ? ;
.bss:0041B59C                 db    ? ;
.bss:0041B59D                 db    ? ;
.bss:0041B59E                 db    ? ;
.bss:0041B59F                 db    ? ;
.bss:0041B5A0                 db    ? ;
.bss:0041B5A1                 db    ? ;
.bss:0041B5A2                 db    ? ;
.bss:0041B5A3                 db    ? ;
.bss:0041B5A4                 db    ? ;
.bss:0041B5A5                 db    ? ;
.bss:0041B5A6                 db    ? ;
.bss:0041B5A7                 db    ? ;
.bss:0041B5A8                 db    ? ;
.bss:0041B5A9                 db    ? ;
.bss:0041B5AA                 db    ? ;
.bss:0041B5AB                 db    ? ;
.bss:0041B5AC                 db    ? ;
.bss:0041B5AD                 db    ? ;
.bss:0041B5AE                 db    ? ;
.bss:0041B5AF                 db    ? ;
.bss:0041B5B0                 db    ? ;
.bss:0041B5B1                 db    ? ;
.bss:0041B5B2                 db    ? ;
.bss:0041B5B3                 db    ? ;
.bss:0041B5B4                 db    ? ;
.bss:0041B5B5                 db    ? ;
.bss:0041B5B6                 db    ? ;
.bss:0041B5B7                 db    ? ;
.bss:0041B5B8                 db    ? ;
.bss:0041B5B9                 db    ? ;
.bss:0041B5BA                 db    ? ;
.bss:0041B5BB                 db    ? ;
.bss:0041B5BC                 db    ? ;
.bss:0041B5BD                 db    ? ;
.bss:0041B5BE                 db    ? ;
.bss:0041B5BF                 db    ? ;
.bss:0041B5C0                 db    ? ;
.bss:0041B5C1                 db    ? ;
.bss:0041B5C2                 db    ? ;
.bss:0041B5C3                 db    ? ;
.bss:0041B5C4                 db    ? ;
.bss:0041B5C5                 db    ? ;
.bss:0041B5C6                 db    ? ;
.bss:0041B5C7                 db    ? ;
.bss:0041B5C8                 db    ? ;
.bss:0041B5C9                 db    ? ;
.bss:0041B5CA                 db    ? ;
.bss:0041B5CB                 db    ? ;
.bss:0041B5CC                 db    ? ;
.bss:0041B5CD                 db    ? ;
.bss:0041B5CE                 db    ? ;
.bss:0041B5CF                 db    ? ;
.bss:0041B5D0                 db    ? ;
.bss:0041B5D1                 db    ? ;
.bss:0041B5D2                 db    ? ;
.bss:0041B5D3                 db    ? ;
.bss:0041B5D4                 db    ? ;
.bss:0041B5D5                 db    ? ;
.bss:0041B5D6                 db    ? ;
.bss:0041B5D7                 db    ? ;
.bss:0041B5D8                 db    ? ;
.bss:0041B5D9                 db    ? ;
.bss:0041B5DA                 db    ? ;
.bss:0041B5DB                 db    ? ;
.bss:0041B5DC                 db    ? ;
.bss:0041B5DD                 db    ? ;
.bss:0041B5DE                 db    ? ;
.bss:0041B5DF                 db    ? ;
.bss:0041B5E0                 db    ? ;
.bss:0041B5E1                 db    ? ;
.bss:0041B5E2                 db    ? ;
.bss:0041B5E3                 db    ? ;
.bss:0041B5E4                 db    ? ;
.bss:0041B5E5                 db    ? ;
.bss:0041B5E6                 db    ? ;
.bss:0041B5E7                 db    ? ;
.bss:0041B5E8                 db    ? ;
.bss:0041B5E9                 db    ? ;
.bss:0041B5EA                 db    ? ;
.bss:0041B5EB                 db    ? ;
.bss:0041B5EC                 db    ? ;
.bss:0041B5ED                 db    ? ;
.bss:0041B5EE                 db    ? ;
.bss:0041B5EF                 db    ? ;
.bss:0041B5F0                 db    ? ;
.bss:0041B5F1                 db    ? ;
.bss:0041B5F2                 db    ? ;
.bss:0041B5F3                 db    ? ;
.bss:0041B5F4                 db    ? ;
.bss:0041B5F5                 db    ? ;
.bss:0041B5F6                 db    ? ;
.bss:0041B5F7                 db    ? ;
.bss:0041B5F8                 db    ? ;
.bss:0041B5F9                 db    ? ;
.bss:0041B5FA                 db    ? ;
.bss:0041B5FB                 db    ? ;
.bss:0041B5FC                 db    ? ;
.bss:0041B5FD                 db    ? ;
.bss:0041B5FE                 db    ? ;
.bss:0041B5FF                 db    ? ;
.bss:0041B600                 db    ? ;
.bss:0041B601                 db    ? ;
.bss:0041B602                 db    ? ;
.bss:0041B603                 db    ? ;
.bss:0041B604                 db    ? ;
.bss:0041B605                 db    ? ;
.bss:0041B606                 db    ? ;
.bss:0041B607                 db    ? ;
.bss:0041B608                 db    ? ;
.bss:0041B609                 db    ? ;
.bss:0041B60A                 db    ? ;
.bss:0041B60B                 db    ? ;
.bss:0041B60C                 db    ? ;
.bss:0041B60D                 db    ? ;
.bss:0041B60E                 db    ? ;
.bss:0041B60F                 db    ? ;
.bss:0041B610                 db    ? ;
.bss:0041B611                 db    ? ;
.bss:0041B612                 db    ? ;
.bss:0041B613                 db    ? ;
.bss:0041B614                 db    ? ;
.bss:0041B615                 db    ? ;
.bss:0041B616                 db    ? ;
.bss:0041B617                 db    ? ;
.bss:0041B618                 db    ? ;
.bss:0041B619                 db    ? ;
.bss:0041B61A                 db    ? ;
.bss:0041B61B                 db    ? ;
.bss:0041B61C                 db    ? ;
.bss:0041B61D                 db    ? ;
.bss:0041B61E                 db    ? ;
.bss:0041B61F                 db    ? ;
.bss:0041B620                 db    ? ;
.bss:0041B621                 db    ? ;
.bss:0041B622                 db    ? ;
.bss:0041B623                 db    ? ;
.bss:0041B624                 db    ? ;
.bss:0041B625                 db    ? ;
.bss:0041B626                 db    ? ;
.bss:0041B627                 db    ? ;
.bss:0041B628                 db    ? ;
.bss:0041B629                 db    ? ;
.bss:0041B62A                 db    ? ;
.bss:0041B62B                 db    ? ;
.bss:0041B62C                 db    ? ;
.bss:0041B62D                 db    ? ;
.bss:0041B62E                 db    ? ;
.bss:0041B62F                 db    ? ;
.bss:0041B630                 db    ? ;
.bss:0041B631                 db    ? ;
.bss:0041B632                 db    ? ;
.bss:0041B633                 db    ? ;
.bss:0041B634                 db    ? ;
.bss:0041B635                 db    ? ;
.bss:0041B636                 db    ? ;
.bss:0041B637                 db    ? ;
.bss:0041B638                 db    ? ;
.bss:0041B639                 db    ? ;
.bss:0041B63A                 db    ? ;
.bss:0041B63B                 db    ? ;
.bss:0041B63C                 db    ? ;
.bss:0041B63D                 db    ? ;
.bss:0041B63E                 db    ? ;
.bss:0041B63F                 db    ? ;
.bss:0041B640                 db    ? ;
.bss:0041B641                 db    ? ;
.bss:0041B642                 db    ? ;
.bss:0041B643                 db    ? ;
.bss:0041B644                 db    ? ;
.bss:0041B645                 db    ? ;
.bss:0041B646                 db    ? ;
.bss:0041B647                 db    ? ;
.bss:0041B648                 db    ? ;
.bss:0041B649                 db    ? ;
.bss:0041B64A                 db    ? ;
.bss:0041B64B                 db    ? ;
.bss:0041B64C                 db    ? ;
.bss:0041B64D                 db    ? ;
.bss:0041B64E                 db    ? ;
.bss:0041B64F                 db    ? ;
.bss:0041B650                 db    ? ;
.bss:0041B651                 db    ? ;
.bss:0041B652                 db    ? ;
.bss:0041B653                 db    ? ;
.bss:0041B654                 db    ? ;
.bss:0041B655                 db    ? ;
.bss:0041B656                 db    ? ;
.bss:0041B657                 db    ? ;
.bss:0041B658                 db    ? ;
.bss:0041B659                 db    ? ;
.bss:0041B65A                 db    ? ;
.bss:0041B65B                 db    ? ;
.bss:0041B65C                 db    ? ;
.bss:0041B65D                 db    ? ;
.bss:0041B65E                 db    ? ;
.bss:0041B65F                 db    ? ;
.bss:0041B660                 db    ? ;
.bss:0041B661                 db    ? ;
.bss:0041B662                 db    ? ;
.bss:0041B663                 db    ? ;
.bss:0041B664                 db    ? ;
.bss:0041B665                 db    ? ;
.bss:0041B666                 db    ? ;
.bss:0041B667                 db    ? ;
.bss:0041B668                 db    ? ;
.bss:0041B669                 db    ? ;
.bss:0041B66A                 db    ? ;
.bss:0041B66B                 db    ? ;
.bss:0041B66C                 db    ? ;
.bss:0041B66D                 db    ? ;
.bss:0041B66E                 db    ? ;
.bss:0041B66F                 db    ? ;
.bss:0041B670 dword_41B670    dd ?                    ; DATA XREF: .text:loc_4066A1↑o
.bss:0041B670                                         ; .text:loc_4066C0↑o ...
.bss:0041B674 dword_41B674    dd ?                    ; DATA XREF: .text:loc_406740↑o
.bss:0041B674                                         ; .text:00406BC8↑r ...
.bss:0041B678 dword_41B678    dd ?                    ; DATA XREF: .text:00406BC2↑r
.bss:0041B678                                         ; sub_406C70+2C↑r
.bss:0041B67C dword_41B67C    dd ?                    ; DATA XREF: .text:00406BB6↑r
.bss:0041B67C                                         ; sub_406C70+22↑r
.bss:0041B680 dword_41B680    dd ?                    ; DATA XREF: .text:00406BD2↑r
.bss:0041B680                                         ; sub_406C70+36↑r
.bss:0041B684 dword_41B684    dd ?                    ; DATA XREF: .text:00406BE2↑r
.bss:0041B684                                         ; sub_406C70+4E↑r
.bss:0041B688 dword_41B688    dd ?                    ; DATA XREF: .text:00406BFF↑r
.bss:0041B688                                         ; sub_406C70+62↑r
.bss:0041B68C dword_41B68C    dd ?                    ; DATA XREF: .text:00406BF5↑r
.bss:0041B68C                                         ; sub_406C70+70↑r
.bss:0041B690 dword_41B690    dd ?                    ; DATA XREF: .text:00406BD8↑r
.bss:0041B690                                         ; sub_406C70+7A↑r
.bss:0041B694                 align 10h
.bss:0041B6A0 dword_41B6A0    dd ?                    ; DATA XREF: sub_40A110+AB↑r
.bss:0041B6A0                                         ; sub_40A110+334B↑w
.bss:0041B6A4                 align 10h
.bss:0041B6B0 byte_41B6B0     db ?                    ; DATA XREF: sub_407200:loc_407C6C↑r
.bss:0041B6B0                                         ; sub_407200:loc_407C98↑r ...
.bss:0041B6B1                 db    ? ;
.bss:0041B6B2                 db    ? ;
.bss:0041B6B3                 db    ? ;
.bss:0041B6B4                 db    ? ;
.bss:0041B6B5                 db    ? ;
.bss:0041B6B6                 db    ? ;
.bss:0041B6B7                 db    ? ;
.bss:0041B6B8                 db    ? ;
.bss:0041B6B9                 db    ? ;
.bss:0041B6BA                 db    ? ;
.bss:0041B6BB                 db    ? ;
.bss:0041B6BC                 db    ? ;
.bss:0041B6BD                 db    ? ;
.bss:0041B6BE                 db    ? ;
.bss:0041B6BF                 db    ? ;
.bss:0041B6C0                 db    ? ;
.bss:0041B6C1                 db    ? ;
.bss:0041B6C2                 db    ? ;
.bss:0041B6C3                 db    ? ;
.bss:0041B6C4                 db    ? ;
.bss:0041B6C5                 db    ? ;
.bss:0041B6C6                 db    ? ;
.bss:0041B6C7                 db    ? ;
.bss:0041B6C8                 db    ? ;
.bss:0041B6C9                 db    ? ;
.bss:0041B6CA                 db    ? ;
.bss:0041B6CB                 db    ? ;
.bss:0041B6CC                 db    ? ;
.bss:0041B6CD                 db    ? ;
.bss:0041B6CE                 db    ? ;
.bss:0041B6CF                 db    ? ;
.bss:0041B6D0                 db    ? ;
.bss:0041B6D1                 db    ? ;
.bss:0041B6D2                 db    ? ;
.bss:0041B6D3                 db    ? ;
.bss:0041B6D4                 db    ? ;
.bss:0041B6D5                 db    ? ;
.bss:0041B6D6                 db    ? ;
.bss:0041B6D7                 db    ? ;
.bss:0041B6D8                 db    ? ;
.bss:0041B6D9                 db    ? ;
.bss:0041B6DA                 db    ? ;
.bss:0041B6DB                 db    ? ;
.bss:0041B6DC                 db    ? ;
.bss:0041B6DD                 db    ? ;
.bss:0041B6DE                 db    ? ;
.bss:0041B6DF                 db    ? ;
.bss:0041B6E0                 db    ? ;
.bss:0041B6E1                 db    ? ;
.bss:0041B6E2                 db    ? ;
.bss:0041B6E3                 db    ? ;
.bss:0041B6E4                 db    ? ;
.bss:0041B6E5                 db    ? ;
.bss:0041B6E6                 db    ? ;
.bss:0041B6E7                 db    ? ;
.bss:0041B6E8                 db    ? ;
.bss:0041B6E9                 db    ? ;
.bss:0041B6EA                 db    ? ;
.bss:0041B6EB                 db    ? ;
.bss:0041B6EC                 db    ? ;
.bss:0041B6ED                 db    ? ;
.bss:0041B6EE                 db    ? ;
.bss:0041B6EF                 db    ? ;
.bss:0041B6F0                 db    ? ;
.bss:0041B6F1                 db    ? ;
.bss:0041B6F2                 db    ? ;
.bss:0041B6F3                 db    ? ;
.bss:0041B6F4                 db    ? ;
.bss:0041B6F5                 db    ? ;
.bss:0041B6F6                 db    ? ;
.bss:0041B6F7                 db    ? ;
.bss:0041B6F8                 db    ? ;
.bss:0041B6F9                 db    ? ;
.bss:0041B6FA                 db    ? ;
.bss:0041B6FB                 db    ? ;
.bss:0041B6FC                 db    ? ;
.bss:0041B6FD                 db    ? ;
.bss:0041B6FE                 db    ? ;
.bss:0041B6FF                 db    ? ;
.bss:0041B700                 db    ? ;
.bss:0041B701                 db    ? ;
.bss:0041B702                 db    ? ;
.bss:0041B703                 db    ? ;
.bss:0041B704                 db    ? ;
.bss:0041B705                 db    ? ;
.bss:0041B706                 db    ? ;
.bss:0041B707                 db    ? ;
.bss:0041B708                 db    ? ;
.bss:0041B709                 db    ? ;
.bss:0041B70A                 db    ? ;
.bss:0041B70B                 db    ? ;
.bss:0041B70C                 db    ? ;
.bss:0041B70D                 db    ? ;
.bss:0041B70E                 db    ? ;
.bss:0041B70F byte_41B70F     db ?                    ; DATA XREF: sub_40A110+333F↑w
.bss:0041B710                 db    ? ;
.bss:0041B711                 db    ? ;
.bss:0041B712                 db    ? ;
.bss:0041B713                 db    ? ;
.bss:0041B714                 db    ? ;
.bss:0041B715                 db    ? ;
.bss:0041B716                 db    ? ;
.bss:0041B717                 db    ? ;
.bss:0041B718                 db    ? ;
.bss:0041B719                 db    ? ;
.bss:0041B71A                 db    ? ;
.bss:0041B71B                 db    ? ;
.bss:0041B71C                 db    ? ;
.bss:0041B71D                 db    ? ;
.bss:0041B71E                 db    ? ;
.bss:0041B71F                 db    ? ;
.bss:0041B720                 db    ? ;
.bss:0041B721                 db    ? ;
.bss:0041B722                 db    ? ;
.bss:0041B723                 db    ? ;
.bss:0041B724                 db    ? ;
.bss:0041B725                 db    ? ;
.bss:0041B726                 db    ? ;
.bss:0041B727                 db    ? ;
.bss:0041B728                 db    ? ;
.bss:0041B729                 db    ? ;
.bss:0041B72A                 db    ? ;
.bss:0041B72B                 db    ? ;
.bss:0041B72C                 db    ? ;
.bss:0041B72D                 db    ? ;
.bss:0041B72E                 db    ? ;
.bss:0041B72F                 db    ? ;
.bss:0041B730                 db    ? ;
.bss:0041B731                 db    ? ;
.bss:0041B732                 db    ? ;
.bss:0041B733                 db    ? ;
.bss:0041B734                 db    ? ;
.bss:0041B735                 db    ? ;
.bss:0041B736                 db    ? ;
.bss:0041B737                 db    ? ;
.bss:0041B738                 db    ? ;
.bss:0041B739                 db    ? ;
.bss:0041B73A                 db    ? ;
.bss:0041B73B                 db    ? ;
.bss:0041B73C                 db    ? ;
.bss:0041B73D                 db    ? ;
.bss:0041B73E                 db    ? ;
.bss:0041B73F                 db    ? ;
.bss:0041B740                 db    ? ;
.bss:0041B741                 db    ? ;
.bss:0041B742                 db    ? ;
.bss:0041B743                 db    ? ;
.bss:0041B744                 db    ? ;
.bss:0041B745                 db    ? ;
.bss:0041B746                 db    ? ;
.bss:0041B747                 db    ? ;
.bss:0041B748                 db    ? ;
.bss:0041B749                 db    ? ;
.bss:0041B74A                 db    ? ;
.bss:0041B74B                 db    ? ;
.bss:0041B74C                 db    ? ;
.bss:0041B74D                 db    ? ;
.bss:0041B74E                 db    ? ;
.bss:0041B74F                 db    ? ;
.bss:0041B750                 db    ? ;
.bss:0041B751                 db    ? ;
.bss:0041B752                 db    ? ;
.bss:0041B753                 db    ? ;
.bss:0041B754                 db    ? ;
.bss:0041B755                 db    ? ;
.bss:0041B756                 db    ? ;
.bss:0041B757                 db    ? ;
.bss:0041B758                 db    ? ;
.bss:0041B759                 db    ? ;
.bss:0041B75A                 db    ? ;
.bss:0041B75B                 db    ? ;
.bss:0041B75C                 db    ? ;
.bss:0041B75D                 db    ? ;
.bss:0041B75E                 db    ? ;
.bss:0041B75F                 db    ? ;
.bss:0041B760                 db    ? ;
.bss:0041B761                 db    ? ;
.bss:0041B762                 db    ? ;
.bss:0041B763                 db    ? ;
.bss:0041B764                 db    ? ;
.bss:0041B765                 db    ? ;
.bss:0041B766                 db    ? ;
.bss:0041B767                 db    ? ;
.bss:0041B768                 db    ? ;
.bss:0041B769                 db    ? ;
.bss:0041B76A                 db    ? ;
.bss:0041B76B                 db    ? ;
.bss:0041B76C                 db    ? ;
.bss:0041B76D                 db    ? ;
.bss:0041B76E                 db    ? ;
.bss:0041B76F                 db    ? ;
.bss:0041B770                 db    ? ;
.bss:0041B771                 db    ? ;
.bss:0041B772                 db    ? ;
.bss:0041B773                 db    ? ;
.bss:0041B774                 db    ? ;
.bss:0041B775                 db    ? ;
.bss:0041B776                 db    ? ;
.bss:0041B777                 db    ? ;
.bss:0041B778                 db    ? ;
.bss:0041B779                 db    ? ;
.bss:0041B77A                 db    ? ;
.bss:0041B77B                 db    ? ;
.bss:0041B77C                 db    ? ;
.bss:0041B77D                 db    ? ;
.bss:0041B77E                 db    ? ;
.bss:0041B77F                 db    ? ;
.bss:0041B780                 db    ? ;
.bss:0041B781                 db    ? ;
.bss:0041B782                 db    ? ;
.bss:0041B783                 db    ? ;
.bss:0041B784                 db    ? ;
.bss:0041B785                 db    ? ;
.bss:0041B786                 db    ? ;
.bss:0041B787                 db    ? ;
.bss:0041B788                 db    ? ;
.bss:0041B789                 db    ? ;
.bss:0041B78A                 db    ? ;
.bss:0041B78B                 db    ? ;
.bss:0041B78C                 db    ? ;
.bss:0041B78D                 db    ? ;
.bss:0041B78E                 db    ? ;
.bss:0041B78F                 db    ? ;
.bss:0041B790                 db    ? ;
.bss:0041B791                 db    ? ;
.bss:0041B792                 db    ? ;
.bss:0041B793                 db    ? ;
.bss:0041B794                 db    ? ;
.bss:0041B795                 db    ? ;
.bss:0041B796                 db    ? ;
.bss:0041B797                 db    ? ;
.bss:0041B798                 db    ? ;
.bss:0041B799                 db    ? ;
.bss:0041B79A                 db    ? ;
.bss:0041B79B                 db    ? ;
.bss:0041B79C                 db    ? ;
.bss:0041B79D                 db    ? ;
.bss:0041B79E                 db    ? ;
.bss:0041B79F                 db    ? ;
.bss:0041B7A0                 db    ? ;
.bss:0041B7A1                 db    ? ;
.bss:0041B7A2                 db    ? ;
.bss:0041B7A3                 db    ? ;
.bss:0041B7A4                 db    ? ;
.bss:0041B7A5                 db    ? ;
.bss:0041B7A6                 db    ? ;
.bss:0041B7A7                 db    ? ;
.bss:0041B7A8                 db    ? ;
.bss:0041B7A9                 db    ? ;
.bss:0041B7AA                 db    ? ;
.bss:0041B7AB                 db    ? ;
.bss:0041B7AC                 db    ? ;
.bss:0041B7AD                 db    ? ;
.bss:0041B7AE                 db    ? ;
.bss:0041B7AF                 db    ? ;
.bss:0041B7B0 unk_41B7B0      db    ? ;               ; DATA XREF: sub_407200+148↑o
.bss:0041B7B0                                         ; sub_407200+153↑o ...
.bss:0041B7B1                 db    ? ;
.bss:0041B7B2                 db    ? ;
.bss:0041B7B3                 db    ? ;
.bss:0041B7B4                 db    ? ;
.bss:0041B7B5                 db    ? ;
.bss:0041B7B6                 db    ? ;
.bss:0041B7B7                 db    ? ;
.bss:0041B7B8                 db    ? ;
.bss:0041B7B9                 db    ? ;
.bss:0041B7BA                 db    ? ;
.bss:0041B7BB                 db    ? ;
.bss:0041B7BC                 db    ? ;
.bss:0041B7BD                 db    ? ;
.bss:0041B7BE                 db    ? ;
.bss:0041B7BF                 db    ? ;
.bss:0041B7C0 dword_41B7C0    dd ?                    ; DATA XREF: sub_40EE90+9↑o
.bss:0041B7C0                                         ; sub_40EE90+17↑w ...
.bss:0041B7C4 dword_41B7C4    dd ?                    ; DATA XREF: sub_40EE90+21↑w
.bss:0041B7C4                                         ; .text:0040EF49↑w
.bss:0041B7C8 dword_41B7C8    dd ?                    ; DATA XREF: sub_40EE90+77↑r
.bss:0041B7C8                                         ; .text:0040EF97↑r
.bss:0041B7CC dword_41B7CC    dd ?                    ; DATA XREF: sub_40EE90+6B↑r
.bss:0041B7CC                                         ; .text:0040EF8B↑r
.bss:0041B7D0                 db    ? ;
.bss:0041B7D1                 db    ? ;
.bss:0041B7D2                 db    ? ;
.bss:0041B7D3                 db    ? ;
.bss:0041B7D4                 db    ? ;
.bss:0041B7D5                 db    ? ;
.bss:0041B7D6                 db    ? ;
.bss:0041B7D7                 db    ? ;
.bss:0041B7D8                 db    ? ;
.bss:0041B7D9                 db    ? ;
.bss:0041B7DA                 db    ? ;
.bss:0041B7DB                 db    ? ;
.bss:0041B7DC                 db    ? ;
.bss:0041B7DD                 db    ? ;
.bss:0041B7DE                 db    ? ;
.bss:0041B7DF                 db    ? ;
.bss:0041B7E0                 db    ? ;
.bss:0041B7E1                 db    ? ;
.bss:0041B7E2                 db    ? ;
.bss:0041B7E3                 db    ? ;
.bss:0041B7E4                 db    ? ;
.bss:0041B7E5                 db    ? ;
.bss:0041B7E6                 db    ? ;
.bss:0041B7E7                 db    ? ;
.bss:0041B7E8                 db    ? ;
.bss:0041B7E9                 db    ? ;
.bss:0041B7EA                 db    ? ;
.bss:0041B7EB                 db    ? ;
.bss:0041B7EC                 db    ? ;
.bss:0041B7ED                 db    ? ;
.bss:0041B7EE                 db    ? ;
.bss:0041B7EF                 db    ? ;
.bss:0041B7F0 ; char *dword_41B7F0
.bss:0041B7F0 dword_41B7F0    dd ?                    ; DATA XREF: .text:0040FF54↑w
.bss:0041B7F0                                         ; sub_40FF80+58↑r
.bss:0041B7F4                 align 10h
.bss:0041B800 ; char *Str1
.bss:0041B800 Str1            dd ?                    ; DATA XREF: sub_4104E4:loc_41051D↑w
.bss:0041B800                                         ; sub_4104E4:loc_410650↑r
.bss:0041B804                 align 10h
.bss:0041B810 dword_41B810    dd ?                    ; DATA XREF: sub_4104E4+2D↑r
.bss:0041B810                                         ; sub_4104E4+3F↑w
.bss:0041B814                 align 10h
.bss:0041B820 dword_41B820    dd ?                    ; DATA XREF: sub_4111A0+100↑r
.bss:0041B820                                         ; sub_4111A0+308↑w
.bss:0041B824                 align 10h
.bss:0041B830 ; char *dword_41B830
.bss:0041B830 dword_41B830    dd ?                    ; DATA XREF: sub_4111A0:loc_411504↑r
.bss:0041B830                                         ; sub_4111A0+3B6↑r ...
.bss:0041B834                 align 10h
.bss:0041B840 dword_41B840    dd ?                    ; DATA XREF: sub_412E70+1C↑r
.bss:0041B840                                         ; sub_412E70+104↑w
.bss:0041B844                 align 10h
.bss:0041B850 dword_41B850    dd ?                    ; DATA XREF: sub_412E70+B↑r
.bss:0041B850                                         ; sub_412E70+71↑w
.bss:0041B854                 align 10h
.bss:0041B860 dword_41B860    dd ?                    ; DATA XREF: sub_412E70+85↑r
.bss:0041B860                                         ; sub_412E70+B9↑w
.bss:0041B864 dword_41B864    dd ?                    ; DATA XREF: sub_412E70+C4↑w
.bss:0041B868 dword_41B868    dd ?                    ; DATA XREF: sub_412E70+2E↑o
.bss:0041B868                                         ; sub_412E70+CF↑w
.bss:0041B86C dword_41B86C    dd ?                    ; DATA XREF: sub_412E70+DA↑w
.bss:0041B870                 db    ? ;
.bss:0041B871                 db    ? ;
.bss:0041B872                 db    ? ;
.bss:0041B873                 db    ? ;
.bss:0041B874                 db    ? ;
.bss:0041B875                 db    ? ;
.bss:0041B876                 db    ? ;
.bss:0041B877                 db    ? ;
.bss:0041B878                 db    ? ;
.bss:0041B879                 db    ? ;
.bss:0041B87A                 db    ? ;
.bss:0041B87B                 db    ? ;
.bss:0041B87C                 db    ? ;
.bss:0041B87D                 db    ? ;
.bss:0041B87E                 db    ? ;
.bss:0041B87F                 db    ? ;
.bss:0041B880                 db    ? ;
.bss:0041B881                 db    ? ;
.bss:0041B882                 db    ? ;
.bss:0041B883                 db    ? ;
.bss:0041B884                 db    ? ;
.bss:0041B885                 db    ? ;
.bss:0041B886                 db    ? ;
.bss:0041B887                 db    ? ;
.bss:0041B888                 db    ? ;
.bss:0041B889                 db    ? ;
.bss:0041B88A                 db    ? ;
.bss:0041B88B                 db    ? ;
.bss:0041B88C                 db    ? ;
.bss:0041B88D                 db    ? ;
.bss:0041B88E                 db    ? ;
.bss:0041B88F                 db    ? ;
.bss:0041B890                 db    ? ;
.bss:0041B891                 db    ? ;
.bss:0041B892                 db    ? ;
.bss:0041B893                 db    ? ;
.bss:0041B894                 db    ? ;
.bss:0041B895                 db    ? ;
.bss:0041B896                 db    ? ;
.bss:0041B897                 db    ? ;
.bss:0041B898                 db    ? ;
.bss:0041B899                 db    ? ;
.bss:0041B89A                 db    ? ;
.bss:0041B89B                 db    ? ;
.bss:0041B89C                 db    ? ;
.bss:0041B89D                 db    ? ;
.bss:0041B89E                 db    ? ;
.bss:0041B89F                 db    ? ;
.bss:0041B8A0                 db    ? ;
.bss:0041B8A1                 db    ? ;
.bss:0041B8A2                 db    ? ;
.bss:0041B8A3                 db    ? ;
.bss:0041B8A4                 db    ? ;
.bss:0041B8A5                 db    ? ;
.bss:0041B8A6                 db    ? ;
.bss:0041B8A7                 db    ? ;
.bss:0041B8A8                 db    ? ;
.bss:0041B8A9                 db    ? ;
.bss:0041B8AA                 db    ? ;
.bss:0041B8AB                 db    ? ;
.bss:0041B8AC                 db    ? ;
.bss:0041B8AD                 db    ? ;
.bss:0041B8AE                 db    ? ;
.bss:0041B8AF                 db    ? ;
.bss:0041B8B0                 db    ? ;
.bss:0041B8B1                 db    ? ;
.bss:0041B8B2                 db    ? ;
.bss:0041B8B3                 db    ? ;
.bss:0041B8B4                 db    ? ;
.bss:0041B8B5                 db    ? ;
.bss:0041B8B6                 db    ? ;
.bss:0041B8B7                 db    ? ;
.bss:0041B8B8                 db    ? ;
.bss:0041B8B9                 db    ? ;
.bss:0041B8BA                 db    ? ;
.bss:0041B8BB                 db    ? ;
.bss:0041B8BC                 db    ? ;
.bss:0041B8BD                 db    ? ;
.bss:0041B8BE                 db    ? ;
.bss:0041B8BF                 db    ? ;
.bss:0041B8C0                 db    ? ;
.bss:0041B8C1                 db    ? ;
.bss:0041B8C2                 db    ? ;
.bss:0041B8C3                 db    ? ;
.bss:0041B8C4                 db    ? ;
.bss:0041B8C5                 db    ? ;
.bss:0041B8C6                 db    ? ;
.bss:0041B8C7                 db    ? ;
.bss:0041B8C8                 db    ? ;
.bss:0041B8C9                 db    ? ;
.bss:0041B8CA                 db    ? ;
.bss:0041B8CB                 db    ? ;
.bss:0041B8CC                 db    ? ;
.bss:0041B8CD                 db    ? ;
.bss:0041B8CE                 db    ? ;
.bss:0041B8CF                 db    ? ;
.bss:0041B8D0                 db    ? ;
.bss:0041B8D1                 db    ? ;
.bss:0041B8D2                 db    ? ;
.bss:0041B8D3                 db    ? ;
.bss:0041B8D4                 db    ? ;
.bss:0041B8D5                 db    ? ;
.bss:0041B8D6                 db    ? ;
.bss:0041B8D7                 db    ? ;
.bss:0041B8D8                 db    ? ;
.bss:0041B8D9                 db    ? ;
.bss:0041B8DA                 db    ? ;
.bss:0041B8DB                 db    ? ;
.bss:0041B8DC                 db    ? ;
.bss:0041B8DD                 db    ? ;
.bss:0041B8DE                 db    ? ;
.bss:0041B8DF                 db    ? ;
.bss:0041B8E0                 db    ? ;
.bss:0041B8E1                 db    ? ;
.bss:0041B8E2                 db    ? ;
.bss:0041B8E3                 db    ? ;
.bss:0041B8E4                 db    ? ;
.bss:0041B8E5                 db    ? ;
.bss:0041B8E6                 db    ? ;
.bss:0041B8E7                 db    ? ;
.bss:0041B8E8                 db    ? ;
.bss:0041B8E9                 db    ? ;
.bss:0041B8EA                 db    ? ;
.bss:0041B8EB                 db    ? ;
.bss:0041B8EC                 db    ? ;
.bss:0041B8ED                 db    ? ;
.bss:0041B8EE                 db    ? ;
.bss:0041B8EF                 db    ? ;
.bss:0041B8F0                 db    ? ;
.bss:0041B8F1                 db    ? ;
.bss:0041B8F2                 db    ? ;
.bss:0041B8F3                 db    ? ;
.bss:0041B8F4                 db    ? ;
.bss:0041B8F5                 db    ? ;
.bss:0041B8F6                 db    ? ;
.bss:0041B8F7                 db    ? ;
.bss:0041B8F8                 db    ? ;
.bss:0041B8F9                 db    ? ;
.bss:0041B8FA                 db    ? ;
.bss:0041B8FB                 db    ? ;
.bss:0041B8FC                 db    ? ;
.bss:0041B8FD                 db    ? ;
.bss:0041B8FE                 db    ? ;
.bss:0041B8FF                 db    ? ;
.bss:0041B900                 db    ? ;
.bss:0041B901                 db    ? ;
.bss:0041B902                 db    ? ;
.bss:0041B903                 db    ? ;
.bss:0041B904                 db    ? ;
.bss:0041B905                 db    ? ;
.bss:0041B906                 db    ? ;
.bss:0041B907                 db    ? ;
.bss:0041B908                 db    ? ;
.bss:0041B909                 db    ? ;
.bss:0041B90A                 db    ? ;
.bss:0041B90B                 db    ? ;
.bss:0041B90C                 db    ? ;
.bss:0041B90D                 db    ? ;
.bss:0041B90E                 db    ? ;
.bss:0041B90F                 db    ? ;
.bss:0041B910                 db    ? ;
.bss:0041B911                 db    ? ;
.bss:0041B912                 db    ? ;
.bss:0041B913                 db    ? ;
.bss:0041B914                 db    ? ;
.bss:0041B915                 db    ? ;
.bss:0041B916                 db    ? ;
.bss:0041B917                 db    ? ;
.bss:0041B918                 db    ? ;
.bss:0041B919                 db    ? ;
.bss:0041B91A                 db    ? ;
.bss:0041B91B                 db    ? ;
.bss:0041B91C                 db    ? ;
.bss:0041B91D                 db    ? ;
.bss:0041B91E                 db    ? ;
.bss:0041B91F                 db    ? ;
.bss:0041B920                 db    ? ;
.bss:0041B921                 db    ? ;
.bss:0041B922                 db    ? ;
.bss:0041B923                 db    ? ;
.bss:0041B924                 db    ? ;
.bss:0041B925                 db    ? ;
.bss:0041B926                 db    ? ;
.bss:0041B927                 db    ? ;
.bss:0041B928                 db    ? ;
.bss:0041B929                 db    ? ;
.bss:0041B92A                 db    ? ;
.bss:0041B92B                 db    ? ;
.bss:0041B92C                 db    ? ;
.bss:0041B92D                 db    ? ;
.bss:0041B92E                 db    ? ;
.bss:0041B92F                 db    ? ;
.bss:0041B930                 db    ? ;
.bss:0041B931                 db    ? ;
.bss:0041B932                 db    ? ;
.bss:0041B933                 db    ? ;
.bss:0041B934                 db    ? ;
.bss:0041B935                 db    ? ;
.bss:0041B936                 db    ? ;
.bss:0041B937                 db    ? ;
.bss:0041B938                 db    ? ;
.bss:0041B939                 db    ? ;
.bss:0041B93A                 db    ? ;
.bss:0041B93B                 db    ? ;
.bss:0041B93C                 db    ? ;
.bss:0041B93D                 db    ? ;
.bss:0041B93E                 db    ? ;
.bss:0041B93F                 db    ? ;
.bss:0041B940                 db    ? ;
.bss:0041B941                 db    ? ;
.bss:0041B942                 db    ? ;
.bss:0041B943                 db    ? ;
.bss:0041B944                 db    ? ;
.bss:0041B945                 db    ? ;
.bss:0041B946                 db    ? ;
.bss:0041B947                 db    ? ;
.bss:0041B948                 db    ? ;
.bss:0041B949                 db    ? ;
.bss:0041B94A                 db    ? ;
.bss:0041B94B                 db    ? ;
.bss:0041B94C                 db    ? ;
.bss:0041B94D                 db    ? ;
.bss:0041B94E                 db    ? ;
.bss:0041B94F                 db    ? ;
.bss:0041B950                 db    ? ;
.bss:0041B951                 db    ? ;
.bss:0041B952                 db    ? ;
.bss:0041B953                 db    ? ;
.bss:0041B954                 db    ? ;
.bss:0041B955                 db    ? ;
.bss:0041B956                 db    ? ;
.bss:0041B957                 db    ? ;
.bss:0041B958                 db    ? ;
.bss:0041B959                 db    ? ;
.bss:0041B95A                 db    ? ;
.bss:0041B95B                 db    ? ;
.bss:0041B95C                 db    ? ;
.bss:0041B95D                 db    ? ;
.bss:0041B95E                 db    ? ;
.bss:0041B95F                 db    ? ;
.bss:0041B960                 db    ? ;
.bss:0041B961                 db    ? ;
.bss:0041B962                 db    ? ;
.bss:0041B963                 db    ? ;
.bss:0041B964                 db    ? ;
.bss:0041B965                 db    ? ;
.bss:0041B966                 db    ? ;
.bss:0041B967                 db    ? ;
.bss:0041B968                 db    ? ;
.bss:0041B969                 db    ? ;
.bss:0041B96A                 db    ? ;
.bss:0041B96B                 db    ? ;
.bss:0041B96C                 db    ? ;
.bss:0041B96D                 db    ? ;
.bss:0041B96E                 db    ? ;
.bss:0041B96F                 db    ? ;
.bss:0041B970                 db    ? ;
.bss:0041B971                 db    ? ;
.bss:0041B972                 db    ? ;
.bss:0041B973                 db    ? ;
.bss:0041B974                 db    ? ;
.bss:0041B975                 db    ? ;
.bss:0041B976                 db    ? ;
.bss:0041B977                 db    ? ;
.bss:0041B978                 db    ? ;
.bss:0041B979                 db    ? ;
.bss:0041B97A                 db    ? ;
.bss:0041B97B                 db    ? ;
.bss:0041B97C                 db    ? ;
.bss:0041B97D                 db    ? ;
.bss:0041B97E                 db    ? ;
.bss:0041B97F                 db    ? ;
.bss:0041B980                 db    ? ;
.bss:0041B981                 db    ? ;
.bss:0041B982                 db    ? ;
.bss:0041B983                 db    ? ;
.bss:0041B984                 db    ? ;
.bss:0041B985                 db    ? ;
.bss:0041B986                 db    ? ;
.bss:0041B987                 db    ? ;
.bss:0041B988                 db    ? ;
.bss:0041B989                 db    ? ;
.bss:0041B98A                 db    ? ;
.bss:0041B98B                 db    ? ;
.bss:0041B98C                 db    ? ;
.bss:0041B98D                 db    ? ;
.bss:0041B98E                 db    ? ;
.bss:0041B98F                 db    ? ;
.bss:0041B990                 db    ? ;
.bss:0041B991                 db    ? ;
.bss:0041B992                 db    ? ;
.bss:0041B993                 db    ? ;
.bss:0041B994                 db    ? ;
.bss:0041B995                 db    ? ;
.bss:0041B996                 db    ? ;
.bss:0041B997                 db    ? ;
.bss:0041B998                 db    ? ;
.bss:0041B999                 db    ? ;
.bss:0041B99A                 db    ? ;
.bss:0041B99B                 db    ? ;
.bss:0041B99C                 db    ? ;
.bss:0041B99D                 db    ? ;
.bss:0041B99E                 db    ? ;
.bss:0041B99F                 db    ? ;
.bss:0041B9A0                 db    ? ;
.bss:0041B9A1                 db    ? ;
.bss:0041B9A2                 db    ? ;
.bss:0041B9A3                 db    ? ;
.bss:0041B9A4                 db    ? ;
.bss:0041B9A5                 db    ? ;
.bss:0041B9A6                 db    ? ;
.bss:0041B9A7                 db    ? ;
.bss:0041B9A8                 db    ? ;
.bss:0041B9A9                 db    ? ;
.bss:0041B9AA                 db    ? ;
.bss:0041B9AB                 db    ? ;
.bss:0041B9AC                 db    ? ;
.bss:0041B9AD                 db    ? ;
.bss:0041B9AE                 db    ? ;
.bss:0041B9AF                 db    ? ;
.bss:0041B9B0                 db    ? ;
.bss:0041B9B1                 db    ? ;
.bss:0041B9B2                 db    ? ;
.bss:0041B9B3                 db    ? ;
.bss:0041B9B4                 db    ? ;
.bss:0041B9B5                 db    ? ;
.bss:0041B9B6                 db    ? ;
.bss:0041B9B7                 db    ? ;
.bss:0041B9B8                 db    ? ;
.bss:0041B9B9                 db    ? ;
.bss:0041B9BA                 db    ? ;
.bss:0041B9BB                 db    ? ;
.bss:0041B9BC                 db    ? ;
.bss:0041B9BD                 db    ? ;
.bss:0041B9BE                 db    ? ;
.bss:0041B9BF                 db    ? ;
.bss:0041B9C0                 db    ? ;
.bss:0041B9C1                 db    ? ;
.bss:0041B9C2                 db    ? ;
.bss:0041B9C3                 db    ? ;
.bss:0041B9C4                 db    ? ;
.bss:0041B9C5                 db    ? ;
.bss:0041B9C6                 db    ? ;
.bss:0041B9C7                 db    ? ;
.bss:0041B9C8                 db    ? ;
.bss:0041B9C9                 db    ? ;
.bss:0041B9CA                 db    ? ;
.bss:0041B9CB                 db    ? ;
.bss:0041B9CC                 db    ? ;
.bss:0041B9CD                 db    ? ;
.bss:0041B9CE                 db    ? ;
.bss:0041B9CF                 db    ? ;
.bss:0041B9D0                 db    ? ;
.bss:0041B9D1                 db    ? ;
.bss:0041B9D2                 db    ? ;
.bss:0041B9D3                 db    ? ;
.bss:0041B9D4                 db    ? ;
.bss:0041B9D5                 db    ? ;
.bss:0041B9D6                 db    ? ;
.bss:0041B9D7                 db    ? ;
.bss:0041B9D8                 db    ? ;
.bss:0041B9D9                 db    ? ;
.bss:0041B9DA                 db    ? ;
.bss:0041B9DB                 db    ? ;
.bss:0041B9DC                 db    ? ;
.bss:0041B9DD                 db    ? ;
.bss:0041B9DE                 db    ? ;
.bss:0041B9DF                 db    ? ;
.bss:0041B9E0                 db    ? ;
.bss:0041B9E1                 db    ? ;
.bss:0041B9E2                 db    ? ;
.bss:0041B9E3                 db    ? ;
.bss:0041B9E4                 db    ? ;
.bss:0041B9E5                 db    ? ;
.bss:0041B9E6                 db    ? ;
.bss:0041B9E7                 db    ? ;
.bss:0041B9E8                 db    ? ;
.bss:0041B9E9                 db    ? ;
.bss:0041B9EA                 db    ? ;
.bss:0041B9EB                 db    ? ;
.bss:0041B9EC                 db    ? ;
.bss:0041B9ED                 db    ? ;
.bss:0041B9EE                 db    ? ;
.bss:0041B9EF                 db    ? ;
.bss:0041B9F0                 db    ? ;
.bss:0041B9F1                 db    ? ;
.bss:0041B9F2                 db    ? ;
.bss:0041B9F3                 db    ? ;
.bss:0041B9F4                 db    ? ;
.bss:0041B9F5                 db    ? ;
.bss:0041B9F6                 db    ? ;
.bss:0041B9F7                 db    ? ;
.bss:0041B9F8                 db    ? ;
.bss:0041B9F9                 db    ? ;
.bss:0041B9FA                 db    ? ;
.bss:0041B9FB                 db    ? ;
.bss:0041B9FC                 db    ? ;
.bss:0041B9FD                 db    ? ;
.bss:0041B9FE                 db    ? ;
.bss:0041B9FF                 db    ? ;
.bss:0041BA00                 db    ? ;
.bss:0041BA01                 db    ? ;
.bss:0041BA02                 db    ? ;
.bss:0041BA03                 db    ? ;
.bss:0041BA04                 db    ? ;
.bss:0041BA05                 db    ? ;
.bss:0041BA06                 db    ? ;
.bss:0041BA07                 db    ? ;
.bss:0041BA08                 db    ? ;
.bss:0041BA09                 db    ? ;
.bss:0041BA0A                 db    ? ;
.bss:0041BA0B                 db    ? ;
.bss:0041BA0C                 db    ? ;
.bss:0041BA0D                 db    ? ;
.bss:0041BA0E                 db    ? ;
.bss:0041BA0F                 db    ? ;
.bss:0041BA10                 db    ? ;
.bss:0041BA11                 db    ? ;
.bss:0041BA12                 db    ? ;
.bss:0041BA13                 db    ? ;
.bss:0041BA14                 db    ? ;
.bss:0041BA15                 db    ? ;
.bss:0041BA16                 db    ? ;
.bss:0041BA17                 db    ? ;
.bss:0041BA18                 db    ? ;
.bss:0041BA19                 db    ? ;
.bss:0041BA1A                 db    ? ;
.bss:0041BA1B                 db    ? ;
.bss:0041BA1C                 db    ? ;
.bss:0041BA1D                 db    ? ;
.bss:0041BA1E                 db    ? ;
.bss:0041BA1F                 db    ? ;
.bss:0041BA20                 db    ? ;
.bss:0041BA21                 db    ? ;
.bss:0041BA22                 db    ? ;
.bss:0041BA23                 db    ? ;
.bss:0041BA24                 db    ? ;
.bss:0041BA25                 db    ? ;
.bss:0041BA26                 db    ? ;
.bss:0041BA27                 db    ? ;
.bss:0041BA28                 db    ? ;
.bss:0041BA29                 db    ? ;
.bss:0041BA2A                 db    ? ;
.bss:0041BA2B                 db    ? ;
.bss:0041BA2C                 db    ? ;
.bss:0041BA2D                 db    ? ;
.bss:0041BA2E                 db    ? ;
.bss:0041BA2F                 db    ? ;
.bss:0041BA30                 db    ? ;
.bss:0041BA31                 db    ? ;
.bss:0041BA32                 db    ? ;
.bss:0041BA33                 db    ? ;
.bss:0041BA34                 db    ? ;
.bss:0041BA35                 db    ? ;
.bss:0041BA36                 db    ? ;
.bss:0041BA37                 db    ? ;
.bss:0041BA38                 db    ? ;
.bss:0041BA39                 db    ? ;
.bss:0041BA3A                 db    ? ;
.bss:0041BA3B                 db    ? ;
.bss:0041BA3C                 db    ? ;
.bss:0041BA3D                 db    ? ;
.bss:0041BA3E                 db    ? ;
.bss:0041BA3F                 db    ? ;
.bss:0041BA40                 db    ? ;
.bss:0041BA41                 db    ? ;
.bss:0041BA42                 db    ? ;
.bss:0041BA43                 db    ? ;
.bss:0041BA44                 db    ? ;
.bss:0041BA45                 db    ? ;
.bss:0041BA46                 db    ? ;
.bss:0041BA47                 db    ? ;
.bss:0041BA48                 db    ? ;
.bss:0041BA49                 db    ? ;
.bss:0041BA4A                 db    ? ;
.bss:0041BA4B                 db    ? ;
.bss:0041BA4C                 db    ? ;
.bss:0041BA4D                 db    ? ;
.bss:0041BA4E                 db    ? ;
.bss:0041BA4F                 db    ? ;
.bss:0041BA50                 db    ? ;
.bss:0041BA51                 db    ? ;
.bss:0041BA52                 db    ? ;
.bss:0041BA53                 db    ? ;
.bss:0041BA54                 db    ? ;
.bss:0041BA55                 db    ? ;
.bss:0041BA56                 db    ? ;
.bss:0041BA57                 db    ? ;
.bss:0041BA58                 db    ? ;
.bss:0041BA59                 db    ? ;
.bss:0041BA5A                 db    ? ;
.bss:0041BA5B                 db    ? ;
.bss:0041BA5C                 db    ? ;
.bss:0041BA5D                 db    ? ;
.bss:0041BA5E                 db    ? ;
.bss:0041BA5F                 db    ? ;
.bss:0041BA60 dword_41BA60    dd ?                    ; DATA XREF: sub_413C00+38↑r
.bss:0041BA60                                         ; sub_413C00+FC↑w ...
.bss:0041BA64                 align 10h
.bss:0041BA70 dword_41BA70    dd ?                    ; DATA XREF: sub_413C00+4A↑r
.bss:0041BA70                                         ; sub_413C00+123↑w
.bss:0041BA74                 align 10h
.bss:0041BA80 dword_41BA80    dd ?                    ; DATA XREF: sub_414AE0+8↑r
.bss:0041BA80                                         ; sub_414BF0:loc_414C72↑w ...
.bss:0041BA84                 align 10h
.bss:0041BA90 ; struct _OSVERSIONINFOA VersionInformation
.bss:0041BA90 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_414BF0:loc_414C10↑o
.bss:0041BA90                                         ; sub_414BF0+2C↑w ...
.bss:0041BB24 word_41BB24     dw ?                    ; DATA XREF: sub_414BF0:loc_414CA3↑r
.bss:0041BB26                 align 4
.bss:0041BB28 word_41BB28     dw ?                    ; DATA XREF: .text:loc_414666↑r
.bss:0041BB28                                         ; .text:00414694↑r ...
.bss:0041BB2A byte_41BB2A     db ?                    ; DATA XREF: .text:00414625↑r
.bss:0041BB2B                 align 10h
.bss:0041BB30 dword_41BB30    dd ?                    ; DATA XREF: sub_414BF0+6↑r
.bss:0041BB30                                         ; sub_414BF0+75↑w
.bss:0041BB34                 align 10h
.bss:0041BB40 dword_41BB40    dd ?                    ; DATA XREF: sub_4168E0+7↑r
.bss:0041BB40                                         ; sub_4168E0+2B↑w ...
.bss:0041BB44                 align 10h
.bss:0041BB50 ; struct _SYSTEM_INFO SystemInfo
.bss:0041BB50 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_4168E0+21↑o
.bss:0041BB50                                         ; sub_4168E0+33↑o ...
.bss:0041BB74                 align 10h
.bss:0041BB80 dword_41BB80    dd ?                    ; DATA XREF: sub_416E10+6E↑r
.bss:0041BB80                                         ; sub_416E10+9A↑r ...
.bss:0041BB84 dword_41BB84    dd ?                    ; DATA XREF: sub_416E10:loc_416E78↑r
.bss:0041BB84                                         ; sub_416E10+A0↑r ...
.bss:0041BB88                 align 10h
.bss:0041BB90 dword_41BB90    dd ?                    ; DATA XREF: sub_417320↑r
.bss:0041BB90                                         ; .text:loc_417562↑w
.bss:0041BB94                 align 10h
.bss:0041BBA0 dword_41BBA0    dd ?                    ; DATA XREF: sub_402010+2C↑w
.bss:0041BBA0                                         ; sub_402010+103↑r ...
.bss:0041BBA4                 align 20h
.bss:0041BBC0 dword_41BBC0    dd ?                    ; DATA XREF: .text:00409E60↑r
.bss:0041BBC0                                         ; .text:00409E69↑w ...
.bss:0041BBC4                 align 10h
.bss:0041BBD0 ; char *dword_41BBD0
.bss:0041BBD0 dword_41BBD0    dd ?                    ; DATA XREF: sub_402010+136↑r
.bss:0041BBD0                                         ; sub_402010:loc_402374↑r ...
.bss:0041BBD4                 align 10h
.bss:0041BBE0 dword_41BBE0    dd ?                    ; CODE XREF: sub_4104E4+63↑p
.bss:0041BBE0                                         ; DATA XREF: sub_4103E0+1E↑r ...
.bss:0041BBE4                 align 10h
.bss:0041BBF0 dword_41BBF0    dd ?                    ; DATA XREF: sub_4103E0+4E↑w
.bss:0041BBF0                                         ; sub_4104E4+AB↑w
.bss:0041BBF4                 db    ? ;
.bss:0041BBF5                 db    ? ;
.bss:0041BBF6                 db    ? ;
.bss:0041BBF7                 db    ? ;
.bss:0041BBF8                 db    ? ;
.bss:0041BBF9                 db    ? ;
.bss:0041BBFA                 db    ? ;
.bss:0041BBFB                 db    ? ;
.bss:0041BBFC                 db    ? ;
.bss:0041BBFD                 db    ? ;
.bss:0041BBFE                 db    ? ;
.bss:0041BBFF                 db    ? ;
.bss:0041BC00                 db    ? ;
.bss:0041BC01                 db    ? ;
.bss:0041BC02                 db    ? ;
.bss:0041BC03                 db    ? ;
.bss:0041BC04                 db    ? ;
.bss:0041BC05                 db    ? ;
.bss:0041BC06                 db    ? ;
.bss:0041BC07                 db    ? ;
.bss:0041BC08                 db    ? ;
.bss:0041BC09                 db    ? ;
.bss:0041BC0A                 db    ? ;
.bss:0041BC0B                 db    ? ;
.bss:0041BC0C                 db    ? ;
.bss:0041BC0D                 db    ? ;
.bss:0041BC0E                 db    ? ;
.bss:0041BC0F                 db    ? ;
.bss:0041BC10                 db    ? ;
.bss:0041BC11                 db    ? ;
.bss:0041BC12                 db    ? ;
.bss:0041BC13                 db    ? ;
.bss:0041BC14                 db    ? ;
.bss:0041BC15                 db    ? ;
.bss:0041BC16                 db    ? ;
.bss:0041BC17                 db    ? ;
.bss:0041BC18                 db    ? ;
.bss:0041BC19                 db    ? ;
.bss:0041BC1A                 db    ? ;
.bss:0041BC1B                 db    ? ;
.bss:0041BC1C                 db    ? ;
.bss:0041BC1D                 db    ? ;
.bss:0041BC1E                 db    ? ;
.bss:0041BC1F                 db    ? ;
.bss:0041BC20 dword_41BC20    dd ?                    ; DATA XREF: sub_4104E4+13↑r
.bss:0041BC24                 align 10h
.bss:0041BC30 dword_41BC30    dd ?                    ; DATA XREF: sub_416A40+A↑w
.bss:0041BC34                 align 400h
.bss:0041BC34 _bss            ends
.bss:0041BC34
.idata:0041C000 ; Section 4. (virtual address 0001C000)
.idata:0041C000 ; Virtual size                  : 00000E18 (   3608.)
.idata:0041C000 ; Section size in file          : 00001000 (   4096.)
.idata:0041C000 ; Offset to raw data for section: 00019200
.idata:0041C000 ; Flags C0000040: Data Readable Writable
.idata:0041C000 ; Alignment     : default
.idata:0041C000 ; ===========================================================================
.idata:0041C000
.idata:0041C000 ; Segment type: Externs
.idata:0041C000 ; _idata
.idata:0041C000
.idata:0041C001
.idata:0041C2BC ;
.idata:0041C2BC ; Imports from libintl3.dll
.idata:0041C2BC ;
.idata:0041C2BC                 extrn libintl_bindtextdomain:dword
.idata:0041C2BC                                         ; CODE XREF: sub_402010+46↑p
.idata:0041C2BC                                         ; DATA XREF: sub_402010+46↑r ...
.idata:0041C2C0                 extrn libintl_gettext:dword
.idata:0041C2C0                                         ; CODE XREF: sub_402010+F7↑p
.idata:0041C2C0                                         ; sub_402010+174↑p ...
.idata:0041C2C4                 extrn libintl_textdomain:dword
.idata:0041C2C4                                         ; CODE XREF: sub_402010+53↑p
.idata:0041C2C4                                         ; DATA XREF: sub_402010+53↑r ...
.idata:0041C2C8
.idata:0041C2D0 ;
.idata:0041C2D0 ; Imports from ADVAPI32.DLL
.idata:0041C2D0 ;
.idata:0041C2D0 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041C2D0                 extrn __imp_RegCloseKey:dword
.idata:0041C2D0                                         ; DATA XREF: RegCloseKey↑r
.idata:0041C2D4 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041C2D4                 extrn __imp_RegOpenKeyExA:dword
.idata:0041C2D4                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041C2D8 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041C2D8                 extrn __imp_RegQueryValueExA:dword
.idata:0041C2D8                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041C2DC
.idata:0041C2E4 ;
.idata:0041C2E4 ; Imports from KERNEL32.dll
.idata:0041C2E4 ;
.idata:0041C2E4 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041C2E4                 extrn __imp_AreFileApisANSI:dword
.idata:0041C2E4                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041C2E8 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041C2E8                 extrn __imp_CloseHandle:dword
.idata:0041C2E8                                         ; DATA XREF: CloseHandle↑r
.idata:0041C2EC ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041C2EC                 extrn __imp_CreateDirectoryA:dword
.idata:0041C2EC                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041C2F0 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041C2F0                 extrn __imp_CreateFileA:dword
.idata:0041C2F0                                         ; DATA XREF: CreateFileA↑r
.idata:0041C2F4 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041C2F4                 extrn __imp_DeviceIoControl:dword
.idata:0041C2F4                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041C2F8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041C2F8                 extrn __imp_ExitProcess:dword
.idata:0041C2F8                                         ; DATA XREF: ExitProcess↑r
.idata:0041C2FC ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041C2FC                 extrn __imp_FindClose:dword
.idata:0041C2FC                                         ; DATA XREF: FindClose↑r
.idata:0041C300 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C300                 extrn __imp_FindFirstFileA:dword
.idata:0041C300                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041C304 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C304                 extrn __imp_FindNextFileA:dword
.idata:0041C304                                         ; DATA XREF: FindNextFileA↑r
.idata:0041C308 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041C308                 extrn __imp_FreeLibrary:dword
.idata:0041C308                                         ; DATA XREF: FreeLibrary↑r
.idata:0041C30C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C30C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041C30C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041C310 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041C310                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041C310                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041C314 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041C314                 extrn __imp_GetDriveTypeA:dword
.idata:0041C314                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041C318 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041C318                 extrn __imp_GetFileAttributesA:dword
.idata:0041C318                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041C31C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041C31C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041C31C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041C320 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041C320                 extrn __imp_GetFileSize:dword
.idata:0041C320                                         ; DATA XREF: GetFileSize↑r
.idata:0041C324 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041C324                 extrn __imp_GetFileType:dword
.idata:0041C324                                         ; DATA XREF: GetFileType↑r
.idata:0041C328 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041C328                 extrn __imp_GetFullPathNameA:dword
.idata:0041C328                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041C32C ; DWORD (__stdcall *GetLastError)()
.idata:0041C32C                 extrn __imp_GetLastError:dword
.idata:0041C32C                                         ; DATA XREF: GetLastError↑r
.idata:0041C330 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C330                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041C330                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041C334 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041C334                 extrn __imp_GetModuleFileNameA:dword
.idata:0041C334                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041C338 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041C338                 extrn __imp_GetModuleHandleA:dword
.idata:0041C338                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041C33C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041C33C                 extrn __imp_GetProcAddress:dword
.idata:0041C33C                                         ; DATA XREF: GetProcAddress↑r
.idata:0041C340 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041C340                 extrn __imp_GetProcessHeap:dword
.idata:0041C340                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041C344 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041C344                 extrn __imp_GetShortPathNameA:dword
.idata:0041C344                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041C348 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0041C348                 extrn __imp_GetSystemInfo:dword
.idata:0041C348                                         ; DATA XREF: GetSystemInfo↑r
.idata:0041C34C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041C34C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041C34C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041C350 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041C350                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041C350                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041C354 ; DWORD (__stdcall *GetVersion)()
.idata:0041C354                 extrn __imp_GetVersion:dword
.idata:0041C354                                         ; DATA XREF: GetVersion↑r
.idata:0041C358 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041C358                 extrn __imp_GetVersionExA:dword
.idata:0041C358                                         ; DATA XREF: GetVersionExA↑r
.idata:0041C35C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041C35C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041C35C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041C360 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041C360                 extrn __imp_HeapAlloc:dword
.idata:0041C360                                         ; DATA XREF: HeapAlloc↑r
.idata:0041C364 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041C364                 extrn __imp_HeapFree:dword
.idata:0041C364                                         ; DATA XREF: HeapFree↑r
.idata:0041C368 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041C368                 extrn __imp_LoadLibraryA:dword
.idata:0041C368                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041C36C ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041C36C                 extrn __imp_MultiByteToWideChar:dword
.idata:0041C36C                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041C370 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041C370                 extrn __imp_PeekNamedPipe:dword
.idata:0041C370                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041C374 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041C374                 extrn __imp_SetErrorMode:dword
.idata:0041C374                                         ; DATA XREF: SetErrorMode↑r
.idata:0041C378 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041C378                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041C378                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041C37C ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041C37C                 extrn __imp_UnlockFile:dword
.idata:0041C37C                                         ; DATA XREF: UnlockFile↑r
.idata:0041C380 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041C380                 extrn __imp_lstrcmpiA:dword
.idata:0041C380                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041C384 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041C384                 extrn __imp_lstrcpyA:dword
.idata:0041C384                                         ; DATA XREF: lstrcpyA↑r
.idata:0041C388
.idata:0041C390 ;
.idata:0041C390 ; Imports from msvcrt.dll
.idata:0041C390 ;
.idata:0041C390 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041C390                 extrn __imp__chmod:dword
.idata:0041C390                                         ; DATA XREF: _chmod↑r
.idata:0041C394 ; int (__cdecl *_close)(int FileHandle)
.idata:0041C394                 extrn __imp__close:dword
.idata:0041C394                                         ; DATA XREF: _close↑r
.idata:0041C398 ; int (__cdecl *_getpid)()
.idata:0041C398                 extrn __imp__getpid:dword
.idata:0041C398                                         ; DATA XREF: _getpid↑r
.idata:0041C39C ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041C39C                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041C3A0 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0041C3A0                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0041C3A4 ; char *(__cdecl *_strdup)(const char *String)
.idata:0041C3A4                 extrn __imp__strdup:dword
.idata:0041C3A4                                         ; DATA XREF: _strdup↑r
.idata:0041C3A8 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041C3A8                 extrn __imp__stricmp:dword
.idata:0041C3A8                                         ; DATA XREF: _stricmp↑r
.idata:0041C3AC
.idata:0041C3B4 ;
.idata:0041C3B4 ; Imports from MSVCP60.DLL
.idata:0041C3B4 ;
.idata:0041C3B4 ; wint_t (__cdecl *btowc)(int Ch)
.idata:0041C3B4                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0041C3B8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041C3B8                 extrn __imp_mbrtowc:dword
.idata:0041C3B8                                         ; DATA XREF: mbrtowc↑r
.idata:0041C3BC ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041C3BC                 extrn __imp_wctype:dword
.idata:0041C3BC                                         ; DATA XREF: wctype↑r
.idata:0041C3C0
.idata:0041C3C8 ;
.idata:0041C3C8 ; Imports from msvcrt.dll
.idata:0041C3C8 ;
.idata:0041C3C8                 extrn __imp___getmainargs:dword
.idata:0041C3C8                                         ; DATA XREF: __getmainargs↑r
.idata:0041C3CC ; int _mb_cur_max
.idata:0041C3CC                 extrn __mb_cur_max:dword
.idata:0041C3CC                                         ; DATA XREF: sub_402BF0+198↑r
.idata:0041C3CC                                         ; sub_402ED0:loc_402F54↑r ...
.idata:0041C3D0 ; char ***(__cdecl *__p__environ)()
.idata:0041C3D0                 extrn __imp___p__environ:dword
.idata:0041C3D0                                         ; DATA XREF: __p__environ↑r
.idata:0041C3D4 ; int *(__cdecl *__p__fmode)()
.idata:0041C3D4                 extrn __imp___p__fmode:dword
.idata:0041C3D4                                         ; DATA XREF: __p__fmode↑r
.idata:0041C3D8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041C3D8                 extrn __set_app_type:dword
.idata:0041C3D8                                         ; CODE XREF: start+D↑p
.idata:0041C3D8                                         ; .text:0040102D↑p
.idata:0041C3D8                                         ; DATA XREF: ...
.idata:0041C3DC                 extrn __imp__assert:dword
.idata:0041C3DC                                         ; DATA XREF: _assert↑r
.idata:0041C3E0 ; void (__cdecl *_cexit)()
.idata:0041C3E0                 extrn __imp__cexit:dword
.idata:0041C3E0                                         ; DATA XREF: _cexit↑r
.idata:0041C3E4 ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041C3E4                 extrn __imp__close_0:dword
.idata:0041C3E4                                         ; DATA XREF: _close_0↑r
.idata:0041C3E8 ; int *(__cdecl *_errno)()
.idata:0041C3E8                 extrn __imp__errno:dword
.idata:0041C3E8                                         ; DATA XREF: _errno↑r
.idata:0041C3EC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041C3EC                 extrn __imp__fdopen:dword
.idata:0041C3EC                                         ; DATA XREF: _fdopen↑r
.idata:0041C3F0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041C3F0                 extrn __imp__filelengthi64:dword
.idata:0041C3F0                                         ; DATA XREF: _filelengthi64↑r
.idata:0041C3F4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041C3F4                 extrn __imp__flsbuf:dword
.idata:0041C3F4                                         ; DATA XREF: _flsbuf↑r
.idata:0041C3F8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041C3F8                 extrn __imp__get_osfhandle:dword
.idata:0041C3F8                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041C3FC ; FILE iob[]
.idata:0041C3FC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041C3FC                                         ; sub_401080+75↑r ...
.idata:0041C400 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041C400                 extrn __imp__isctype:dword
.idata:0041C400                                         ; DATA XREF: _isctype↑r
.idata:0041C404 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041C404                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041C404                                         ; DATA XREF: .text:0040106C↑r
.idata:0041C408 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041C408                 extrn __imp__open_0:dword
.idata:0041C408                                         ; DATA XREF: _open_0↑r
.idata:0041C40C ; const unsigned __int16 *pctype
.idata:0041C40C                 extrn _pctype:dword     ; DATA XREF: sub_402BF0:loc_402DF8↑r
.idata:0041C40C                                         ; sub_402ED0:loc_402F88↑r ...
.idata:0041C410 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041C410                 extrn __imp__setmode:dword
.idata:0041C410                                         ; DATA XREF: _setmode↑r
.idata:0041C414 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041C414                 extrn __imp__stricmp_0:dword
.idata:0041C414                                         ; DATA XREF: _stricmp_0↑r
.idata:0041C418 ; void (__cdecl __noreturn *abort)()
.idata:0041C418                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041C41C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041C41C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041C41C                                         ; DATA XREF: sub_401040+C↑r
.idata:0041C420 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041C420                 extrn __imp_calloc:dword
.idata:0041C420                                         ; DATA XREF: calloc↑r
.idata:0041C424 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041C424                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0041C428 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041C428                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041C42C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041C42C                 extrn __imp_fclose:dword
.idata:0041C42C                                         ; DATA XREF: fclose↑r
.idata:0041C430 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041C430                 extrn __imp_fflush:dword
.idata:0041C430                                         ; DATA XREF: fflush↑r
.idata:0041C434 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041C434                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041C438 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041C438                 extrn __imp_fprintf:dword
.idata:0041C438                                         ; DATA XREF: fprintf↑r
.idata:0041C43C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041C43C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041C440 ; void (__cdecl *free)(void *Block)
.idata:0041C440                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041C444 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0041C444                 extrn __imp_fwrite:dword
.idata:0041C444                                         ; DATA XREF: fwrite↑r
.idata:0041C448 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041C448                 extrn __imp_getenv:dword
.idata:0041C448                                         ; DATA XREF: getenv↑r
.idata:0041C44C ; int (__cdecl *isalpha)(int C)
.idata:0041C44C                 extrn __imp_isalpha:dword
.idata:0041C44C                                         ; DATA XREF: isalpha↑r
.idata:0041C450 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041C450                 extrn __imp_iswctype:dword
.idata:0041C450                                         ; DATA XREF: iswctype↑r
.idata:0041C454 ; void *(__cdecl *malloc)(size_t Size)
.idata:0041C454                 extrn __imp_malloc:dword
.idata:0041C454                                         ; DATA XREF: malloc↑r
.idata:0041C458 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041C458                 extrn __imp_memcpy:dword
.idata:0041C458                                         ; DATA XREF: memcpy↑r
.idata:0041C45C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041C45C                 extrn __imp_memset:dword
.idata:0041C45C                                         ; DATA XREF: memset↑r
.idata:0041C460 ; int (*printf)(const char *const Format, ...)
.idata:0041C460                 extrn __imp_printf:dword
.idata:0041C460                                         ; DATA XREF: printf↑r
.idata:0041C464 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041C464                 extrn __imp_realloc:dword
.idata:0041C464                                         ; DATA XREF: realloc↑r
.idata:0041C468 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041C468                 extrn __imp_setlocale:dword
.idata:0041C468                                         ; DATA XREF: setlocale↑r
.idata:0041C46C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041C46C                 extrn __imp_signal:dword
.idata:0041C46C                                         ; DATA XREF: signal↑r
.idata:0041C470 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041C470                 extrn __imp_sprintf:dword
.idata:0041C470                                         ; DATA XREF: sprintf↑r
.idata:0041C474 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041C474                 extrn __imp_sscanf:dword
.idata:0041C474                                         ; DATA XREF: sscanf↑r
.idata:0041C478 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041C478                 extrn __imp_strcat:dword
.idata:0041C478                                         ; DATA XREF: strcat↑r
.idata:0041C47C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041C47C                 extrn __imp_strchr:dword
.idata:0041C47C                                         ; DATA XREF: strchr↑r
.idata:0041C480 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041C480                 extrn __imp_strcmp:dword
.idata:0041C480                                         ; DATA XREF: strcmp↑r
.idata:0041C484 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041C484                 extrn __imp_strcpy:dword
.idata:0041C484                                         ; DATA XREF: strcpy↑r
.idata:0041C488 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041C488                 extrn __imp_strerror:dword
.idata:0041C488                                         ; DATA XREF: strerror↑r
.idata:0041C48C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041C48C                 extrn __imp_strlen:dword
.idata:0041C48C                                         ; DATA XREF: strlen↑r
.idata:0041C490 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041C490                 extrn __imp_strncmp:dword
.idata:0041C490                                         ; DATA XREF: strncmp↑r
.idata:0041C494 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041C494                 extrn __imp_strncpy:dword
.idata:0041C494                                         ; DATA XREF: strncpy↑r
.idata:0041C498 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041C498                 extrn __imp_strpbrk:dword
.idata:0041C498                                         ; DATA XREF: strpbrk↑r
.idata:0041C49C ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041C49C                 extrn __imp_strrchr:dword
.idata:0041C49C                                         ; DATA XREF: strrchr↑r
.idata:0041C4A0 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041C4A0                 extrn __imp_strspn:dword
.idata:0041C4A0                                         ; DATA XREF: strspn↑r
.idata:0041C4A4 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041C4A4                 extrn __imp_strstr:dword
.idata:0041C4A4                                         ; DATA XREF: strstr↑r
.idata:0041C4A8 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041C4A8                 extrn __imp_strtoul:dword
.idata:0041C4A8                                         ; DATA XREF: strtoul↑r
.idata:0041C4AC ; int (__cdecl *tolower)(int C)
.idata:0041C4AC                 extrn __imp_tolower:dword
.idata:0041C4AC                                         ; DATA XREF: tolower↑r
.idata:0041C4B0 ; int (__cdecl *toupper)(int C)
.idata:0041C4B0                 extrn __imp_toupper:dword
.idata:0041C4B0                                         ; DATA XREF: toupper↑r
.idata:0041C4B4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041C4B4                 extrn __imp_vfprintf:dword
.idata:0041C4B4                                         ; DATA XREF: vfprintf↑r
.idata:0041C4B8
.idata:0041C4C0 ;
.idata:0041C4C0 ; Imports from OLE32.dll
.idata:0041C4C0 ;
.idata:0041C4C0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041C4C0                 extrn __imp_CoCreateInstance:dword
.idata:0041C4C0                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041C4C4 ; void (__stdcall *CoUninitialize)()
.idata:0041C4C4                 extrn __imp_CoUninitialize:dword
.idata:0041C4C4                                         ; DATA XREF: CoUninitialize↑r
.idata:0041C4C8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041C4C8                 extrn __imp_OleInitialize:dword
.idata:0041C4C8                                         ; DATA XREF: OleInitialize↑r
.idata:0041C4CC
.idata:0041C4CC
.idata:0041C4CC
.idata:0041C4CC                 end start
