.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : D92E5A7B0B8B6F5E808A5F14832E267775686E30211273484CA46F733D5A98F4
.text:00401000 ; Input MD5    : 03910FAA95E19C86D761A7E14BADB44A
.text:00401000 ; Input CRC32  : 1F4088B7
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/mv.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24B (Wed Apr 20 18:41:15 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0001F440 ( 128064.)
.text:00401000 ; Section size in file          : 0001F600 ( 128512.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401EE0+81↓p
.text:00401040                                         ; .text:0041F4D0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_41F470
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_421000
.text:004010A2                 mov     edx, dword_4210E0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_421004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_421100, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_421100
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_41F440
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_421000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_421004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401EE0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_41F470
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 736579h, 71006F6Eh, 79726575h, 768D00h
.text:00401280                                         ; DATA XREF: .text:off_401290↓o
.text:00401280                                         ; .text:00401294↓o ...
.text:00401290 off_401290      dd offset dword_401280  ; DATA XREF: sub_401EE0+5AF↓o
.text:00401294                 dd offset dword_401280+4
.text:00401298                 dd offset dword_401280+7
.text:0040129C                 align 10h
.text:004012A0 dword_4012A0    dd 1                    ; DATA XREF: sub_401EE0+5A3↓o
.text:004012A0                                         ; sub_401EE0+5C7↓r
.text:004012A4                 dd 2, 3
.text:004012AC aBackup         db 'backup',0           ; DATA XREF: .text:off_401340↓o
.text:004012B3 aForce          db 'force',0            ; DATA XREF: .text:00401350↓o
.text:004012B9 aInteractive    db 'interactive',0      ; DATA XREF: .text:00401360↓o
.text:004012C5 aNoTargetDirect db 'no-target-directory',0
.text:004012C5                                         ; DATA XREF: .text:00401370↓o
.text:004012D9 aReply_0        db 'reply',0            ; DATA XREF: .text:00401380↓o
.text:004012DF aStripTrailingS db 'strip-trailing-slashes',0
.text:004012DF                                         ; DATA XREF: .text:00401390↓o
.text:004012F6 aSuffix         db 'suffix',0           ; DATA XREF: .text:004013A0↓o
.text:004012FD aTargetDirector db 'target-directory',0 ; DATA XREF: .text:004013B0↓o
.text:0040130E aUpdate         db 'update',0           ; DATA XREF: .text:004013C0↓o
.text:00401315 aVerbose        db 'verbose',0          ; DATA XREF: .text:004013D0↓o
.text:0040131D aVersionControl_1 db 'version-control',0
.text:0040131D                                         ; DATA XREF: .text:004013E0↓o
.text:0040132D aHelp           db 'help',0             ; DATA XREF: .text:004013F0↓o
.text:00401332 aVersion        db 'version',0          ; DATA XREF: .text:00401400↓o
.text:0040133A                 align 10h
.text:00401340 off_401340      dd offset aBackup       ; DATA XREF: sub_401EE0+14B↓o
.text:00401340                                         ; "backup"
.text:00401344                 dd 2, 0
.text:0040134C                 dd 62h
.text:00401350                 dd offset aForce        ; "force"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 66h
.text:00401360                 dd offset aInteractive  ; "interactive"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 69h
.text:00401370                 dd offset aNoTargetDirect ; "no-target-directory"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 54h
.text:00401380                 dd offset aReply_0      ; "reply"
.text:00401384                 dd 1, 0
.text:0040138C                 dd 80h
.text:00401390                 dd offset aStripTrailingS ; "strip-trailing-slashes"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 81h
.text:004013A0                 dd offset aSuffix       ; "suffix"
.text:004013A4                 dd 1, 0
.text:004013AC                 dd 53h
.text:004013B0                 dd offset aTargetDirector ; "target-directory"
.text:004013B4                 dd 1, 0
.text:004013BC                 dd 74h
.text:004013C0                 dd offset aUpdate       ; "update"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 75h
.text:004013D0                 dd offset aVerbose      ; "verbose"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 76h
.text:004013E0                 dd offset aVersionControl_1 ; "version-control"
.text:004013E4                 dd 1, 0
.text:004013EC                 dd 56h
.text:004013F0                 dd offset aHelp         ; "help"
.text:004013F4                 dd 2 dup(0)
.text:004013FC                 dd 0FFFFFF7Eh
.text:00401400                 dd offset aVersion      ; "version"
.text:00401404                 dd 2 dup(0)
.text:0040140C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401420 ; const char Locale
.text:00401420 Locale          db 0                    ; DATA XREF: sub_401EE0+44↓o
.text:00401421                 align 20h
.text:00401440 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401440                                         ; DATA XREF: sub_401EE0+58↓o
.text:00401463 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401EE0+60↓o
.text:00401463                                         ; sub_401EE0+6D↓o
.text:0040146D ; const char VarName[]
.text:0040146D VarName         db 'SIMPLE_BACKUP_SUFFIX',0
.text:0040146D                                         ; DATA XREF: sub_401EE0+11B↓o
.text:00401482 ; const char aBfitUvsTv[]
.text:00401482 aBfitUvsTv      db 'bfit:uvS:TV:',0     ; DATA XREF: sub_401EE0+153↓o
.text:0040148F                 align 20h
.text:004014A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004014A0                                         ; DATA XREF: sub_401EE0:loc_40208A↓o
.text:004014A0                                         ; sub_402960+C↓o
.text:004014C7                 align 20h
.text:004014E0 aWarningVersion db 'warning: --version-control (-V) is obsolete;  support for it',0Ah
.text:004014E0                                         ; DATA XREF: sub_401EE0:loc_4020E6↓o
.text:004014E0                 db 'will be removed in some future release.  Use --backup=%s instead.'
.text:004014E0                 db 0
.text:0040155F                 align 10h
.text:00401560 aUsageSOptionTS db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah
.text:00401560                                         ; DATA XREF: sub_401EE0+24D↓o
.text:00401560                                         ; sub_402960:loc_4029A0↓o
.text:00401560                 db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
.text:00401560                 db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah,0
.text:004015DF                 align 10h
.text:004015E0 aRenameSourceTo db 'Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.',0Ah
.text:004015E0                                         ; DATA XREF: sub_401EE0+274↓o
.text:004015E0                                         ; sub_402960+67↓o
.text:004015E0                 db 0Ah,0
.text:00401619                 align 10h
.text:00401620 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401620                                         ; DATA XREF: sub_401EE0+296↓o
.text:00401620                                         ; sub_402960+89↓o
.text:00401620                 db 'ns too.',0Ah,0
.text:0040166A                 align 20h
.text:00401680 aBackupControlM db '      --backup[=CONTROL]       make a backup of each existing des'
.text:00401680                                         ; DATA XREF: sub_401EE0+2B8↓o
.text:00401680                                         ; sub_402960+AB↓o
.text:00401680                 db 'tination file',0Ah
.text:00401680                 db '  -b                           like --backup but does not accept '
.text:00401680                 db 'an argument',0Ah
.text:00401680                 db '  -f, --force                  do not prompt before overwriting',0Ah
.text:00401680                 db '                                 (equivalent to --reply=yes)',0Ah
.text:00401680                 db '  -i, --interactive            prompt before overwrite',0Ah
.text:00401680                 db '                                 (equivalent to --reply=query)',0Ah
.text:00401680                 db 0
.text:00401810                 align 20h
.text:00401820 aReplyYesNoQuer db '      --reply={yes,no,query}   specify how to handle the prompt a'
.text:00401820                                         ; DATA XREF: sub_401EE0+2DA↓o
.text:00401820                                         ; sub_402960+CD↓o
.text:00401820                 db 'bout an',0Ah
.text:00401820                 db '                                 existing destination file',0Ah
.text:00401820                 db '      --strip-trailing-slashes remove any trailing slashes from e'
.text:00401820                 db 'ach SOURCE',0Ah
.text:00401820                 db '                                 argument',0Ah
.text:00401820                 db '  -S, --suffix=SUFFIX          override the usual backup suffix',0Ah
.text:00401820                 db 0
.text:0040195B                 align 10h
.text:00401960 aTTargetDirecto db '  -t, --target-directory=DIRECTORY  move all SOURCE arguments int'
.text:00401960                                         ; DATA XREF: sub_401EE0+2FC↓o
.text:00401960                                         ; sub_402960+EF↓o
.text:00401960                 db 'o DIRECTORY',0Ah
.text:00401960                 db '  -T, --no-target-directory    treat DEST as a normal file',0Ah
.text:00401960                 db '  -u, --update                 move only when the SOURCE file is '
.text:00401960                 db 'newer',0Ah
.text:00401960                 db '                                 than the destination file or whe'
.text:00401960                 db 'n the',0Ah
.text:00401960                 db '                                 destination file is missing',0Ah
.text:00401960                 db '  -v, --verbose                explain what is being done',0Ah,0
.text:00401AEE                 align 20h
.text:00401B00 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401B00                                         ; DATA XREF: sub_401EE0+31E↓o
.text:00401B00                                         ; sub_402960+111↓o
.text:00401B2D                 align 20h
.text:00401B40 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401B40                                         ; DATA XREF: sub_401EE0+340↓o
.text:00401B40                                         ; sub_402960+133↓o
.text:00401B76                 align 10h
.text:00401B80 aTheBackupSuffi db 0Ah                  ; DATA XREF: sub_401EE0+362↓o
.text:00401B80                                         ; sub_402960+155↓o
.text:00401B80                 db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPL'
.text:00401B80                 db 'E_BACKUP_SUFFIX.',0Ah
.text:00401B80                 db 'The version control method may be selected via the --backup optio'
.text:00401B80                 db 'n or through',0Ah
.text:00401B80                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.text:00401B80                 db 0Ah,0
.text:00401C5D                 align 10h
.text:00401C60 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.text:00401C60                                         ; DATA XREF: sub_401EE0+384↓o
.text:00401C60                                         ; sub_402960+177↓o
.text:00401C60                 db '  numbered, t     make numbered backups',0Ah
.text:00401C60                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.text:00401C60                 db 'rwise',0Ah
.text:00401C60                 db '  simple, never   always make simple backups',0Ah,0
.text:00401D3E aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401EE0+3A6↓o
.text:00401D3E                                         ; sub_402960+199↓o
.text:00401D3E                 db 'Report bugs to <%s>.',0Ah,0
.text:00401D55 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401D55                                         ; DATA XREF: sub_401EE0+3B3↓o
.text:00401D55                                         ; sub_402960+1A6↓o
.text:00401D6B aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401EE0+3DD↓o
.text:00401D78 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401EE0+3E5↓o
.text:00401D88 aMikeParker     db 'Mike Parker',0      ; DATA XREF: sub_401EE0+3F0↓o
.text:00401D94 a530            db '5.3.0',0            ; DATA XREF: sub_401EE0+3F8↓o
.text:00401D9A aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401EE0+400↓o
.text:00401DA8 ; const FILE stru_401DA8
.text:00401DA8 stru_401DA8     FILE <9000766Dh, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:00401DA8                                         ; DATA XREF: sub_401EE0+408↓o
.text:00401DA8                       90909090h, 746C756Dh, 656C7069h>
.text:00401DC8                 db  20h
.text:00401DC9                 db  74h ; t
.text:00401DCA                 db  61h ; a
.text:00401DCB                 db  72h ; r
.text:00401DCC                 db  67h ; g
.text:00401DCD                 db  65h ; e
.text:00401DCE                 db  74h ; t
.text:00401DCF                 db  20h
.text:00401DD0                 db  64h ; d
.text:00401DD1                 db  69h ; i
.text:00401DD2                 db  72h ; r
.text:00401DD3                 db  65h ; e
.text:00401DD4                 db  63h ; c
.text:00401DD5                 db  74h ; t
.text:00401DD6                 db  6Fh ; o
.text:00401DD7                 db  72h ; r
.text:00401DD8                 db  69h ; i
.text:00401DD9                 db  65h ; e
.text:00401DDA                 db  73h ; s
.text:00401DDB                 db  20h
.text:00401DDC                 db  73h ; s
.text:00401DDD                 db  70h ; p
.text:00401DDE                 db  65h ; e
.text:00401DDF                 db  63h ; c
.text:00401DE0                 db  69h ; i
.text:00401DE1                 db  66h ; f
.text:00401DE2                 db  69h ; i
.text:00401DE3                 db  65h ; e
.text:00401DE4                 db  64h ; d
.text:00401DE5                 db    0
.text:00401DE6 aTargetSIsNotAD db 'target %s is not a directory',0
.text:00401DE6                                         ; DATA XREF: sub_401EE0+4D2↓o
.text:00401DE6                                         ; sub_401EE0+891↓o ...
.text:00401E03 aAccessingS     db 'accessing %s',0     ; DATA XREF: sub_401EE0+50D↓o
.text:00401E03                                         ; sub_401EE0+9E3↓o
.text:00401E10 ; const char aReply[]
.text:00401E10 aReply          db '--reply',0          ; DATA XREF: sub_401EE0+5BB↓o
.text:00401E18                 align 10h
.text:00401E20 aCannotCombineT db 'Cannot combine --target-directory (-t) and --no-target-directory '
.text:00401E20                                         ; DATA XREF: sub_401EE0+631↓o
.text:00401E20                 db '(-T)',0
.text:00401E66 aBackupType     db 'backup type',0      ; DATA XREF: sub_401EE0:loc_4026D0↓o
.text:00401E72 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401EE0+825↓o
.text:00401E83                 align 20h
.text:00401EA0 aMissingDestina db 'missing destination file operand after %s',0
.text:00401EA0                                         ; DATA XREF: sub_401EE0+A47↓o
.text:00401ECA aMissingFileOpe db 'missing file operand',0
.text:00401ECA                                         ; DATA XREF: sub_401EE0:loc_402933↓o
.text:00401EDF                 align 10h
.text:00401EE0
.text:00401EE0 ; =============== S U B R O U T I N E =======================================
.text:00401EE0
.text:00401EE0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401EE0
.text:00401EE0 sub_401EE0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401EE0
.text:00401EE0 Category        = dword ptr -118h
.text:00401EE0 Locale          = dword ptr -114h
.text:00401EE0 var_110         = dword ptr -110h
.text:00401EE0 var_10C         = byte ptr -10Ch
.text:00401EE0 var_108         = byte ptr -108h
.text:00401EE0 var_104         = dword ptr -104h
.text:00401EE0 var_100         = dword ptr -100h
.text:00401EE0 var_FC          = dword ptr -0FCh
.text:00401EE0 Block           = dword ptr -0F8h
.text:00401EE0 var_F2          = byte ptr -0F2h
.text:00401EE0 var_F1          = byte ptr -0F1h
.text:00401EE0 ErrorMessage    = dword ptr -0F0h
.text:00401EE0 var_E9          = byte ptr -0E9h
.text:00401EE0 var_E8          = dword ptr -0E8h
.text:00401EE0 var_E4          = dword ptr -0E4h
.text:00401EE0 var_E0          = dword ptr -0E0h
.text:00401EE0 var_D9          = byte ptr -0D9h
.text:00401EE0 var_D8          = dword ptr -0D8h
.text:00401EE0 var_D4          = dword ptr -0D4h
.text:00401EE0 var_D0          = dword ptr -0D0h
.text:00401EE0 var_CA          = byte ptr -0CAh
.text:00401EE0 var_C9          = byte ptr -0C9h
.text:00401EE0 var_C8          = dword ptr -0C8h
.text:00401EE0 var_58          = dword ptr -58h
.text:00401EE0 var_54          = byte ptr -54h
.text:00401EE0 var_50          = dword ptr -50h
.text:00401EE0 var_4C          = byte ptr -4Ch
.text:00401EE0 var_4B          = byte ptr -4Bh
.text:00401EE0 var_4A          = byte ptr -4Ah
.text:00401EE0 var_48          = dword ptr -48h
.text:00401EE0 var_44          = byte ptr -44h
.text:00401EE0 var_40          = dword ptr -40h
.text:00401EE0 var_3C          = byte ptr -3Ch
.text:00401EE0 var_3B          = byte ptr -3Bh
.text:00401EE0 var_3A          = byte ptr -3Ah
.text:00401EE0 var_39          = byte ptr -39h
.text:00401EE0 var_38          = byte ptr -38h
.text:00401EE0 var_37          = byte ptr -37h
.text:00401EE0 var_36          = byte ptr -36h
.text:00401EE0 var_35          = byte ptr -35h
.text:00401EE0 var_34          = word ptr -34h
.text:00401EE0 var_30          = dword ptr -30h
.text:00401EE0 var_2C          = byte ptr -2Ch
.text:00401EE0 var_2A          = word ptr -2Ah
.text:00401EE0 var_28          = byte ptr -28h
.text:00401EE0 var_27          = byte ptr -27h
.text:00401EE0 var_26          = byte ptr -26h
.text:00401EE0 var_24          = dword ptr -24h
.text:00401EE0 var_20          = dword ptr -20h
.text:00401EE0 arg_0           = dword ptr  8
.text:00401EE0 arg_4           = dword ptr  0Ch
.text:00401EE0
.text:00401EE0                 push    ebp
.text:00401EE1                 xor     eax, eax
.text:00401EE3                 mov     ebp, esp
.text:00401EE5                 push    edi
.text:00401EE6                 push    esi
.text:00401EE7                 push    ebx
.text:00401EE8                 sub     esp, 10Ch
.text:00401EEE                 mov     edi, [ebp+arg_4]
.text:00401EF1                 and     esp, 0FFFFFFF0h
.text:00401EF4                 call    __alloca
.text:00401EF9                 call    sub_41F510
.text:00401EFE                 mov     [ebp+var_CA], 0
.text:00401F05                 xor     edx, edx
.text:00401F07                 xor     ecx, ecx
.text:00401F09                 mov     [ebp+var_D8], edx
.text:00401F0F                 mov     edx, [edi]
.text:00401F11                 mov     [ebp+var_D4], ecx
.text:00401F17                 mov     [ebp+var_D9], 0
.text:00401F1E                 mov     ds:dword_422930, edx
.text:00401F24                 mov     [esp+118h+Locale], offset Locale ; Locale
.text:00401F2C                 mov     [esp+118h+Category], 0 ; Category
.text:00401F33                 call    setlocale
.text:00401F38                 mov     [esp+118h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401F40                 mov     [esp+118h+Category], offset aCoreutils ; "coreutils"
.text:00401F47                 call    ds:libintl_bindtextdomain
.text:00401F4D                 mov     [esp+118h+Category], offset aCoreutils ; "coreutils"
.text:00401F54                 call    ds:libintl_textdomain
.text:00401F5A                 mov     [esp+118h+Category], offset sub_40B990 ; void (__cdecl *)()
.text:00401F61                 call    sub_401040
.text:00401F66                 mov     [ebp+var_54], 0
.text:00401F6A                 mov     [ebp+var_50], 2
.text:00401F71                 mov     [ebp+var_4C], 0
.text:00401F75                 mov     [ebp+var_4B], 0
.text:00401F79                 mov     [ebp+var_4A], 0
.text:00401F7D                 mov     [ebp+var_48], 4
.text:00401F84                 mov     [ebp+var_44], 1
.text:00401F88                 call    sub_41A310
.text:00401F8D                 mov     [ebp+var_40], eax
.text:00401F90                 mov     [ebp+var_3C], 0
.text:00401F94                 mov     [ebp+var_3B], 1
.text:00401F98                 mov     [ebp+var_38], 1
.text:00401F9C                 mov     [ebp+var_3A], 1
.text:00401FA0                 mov     [ebp+var_39], 1
.text:00401FA4                 mov     [ebp+var_37], 0
.text:00401FA8                 mov     [ebp+var_36], 1
.text:00401FAC                 mov     [ebp+var_30], 2
.text:00401FB3                 mov     [ebp+var_2C], 0
.text:00401FB7                 mov     [ebp+var_35], 0
.text:00401FBB                 mov     [ebp+var_34], 0
.text:00401FC1                 mov     [esp+118h+Category], 0 ; FileHandle
.text:00401FC8                 call    _isatty
.text:00401FCD                 mov     [esp+118h+Category], 0 ; Mode
.text:00401FD4                 test    eax, eax
.text:00401FD6                 setnz   [ebp+var_26]
.text:00401FDA                 call    _umask
.text:00401FDF                 mov     [ebp+var_28], 0
.text:00401FE3                 not     eax
.text:00401FE5                 mov     [ebp+var_2A], ax
.text:00401FE9                 mov     [ebp+var_27], 0
.text:00401FED                 mov     [ebp+var_24], 0
.text:00401FF4                 mov     [ebp+var_20], 0
.text:00401FFB                 mov     [esp+118h+Category], offset VarName ; "SIMPLE_BACKUP_SUFFIX"
.text:00402002                 call    getenv
.text:00402007                 mov     esi, esi
.text:00402009                 lea     edi, [edi+0]
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401EE0+42C↓j
.text:00402010                 mov     [ebp+var_D0], eax
.text:00402016                 lea     esi, [esi+0]
.text:00402019                 lea     edi, [edi+0]
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401EE0+1A8↓j
.text:00402020                                         ; sub_401EE0+1F5↓j ...
.text:00402020                 mov     dword ptr [esp+118h+var_108], 0 ; int
.text:00402028                 mov     eax, [ebp+arg_0]
.text:0040202B                 mov     dword ptr [esp+118h+var_10C], offset off_401340 ; char
.text:00402033                 mov     [esp+118h+var_110], offset aBfitUvsTv ; "bfit:uvS:TV:"
.text:0040203B                 mov     [esp+118h+Locale], edi ; int
.text:0040203F                 mov     [esp+118h+Category], eax ; int
.text:00402042                 call    sub_40B820
.text:00402047                 cmp     eax, 0FFFFFFFFh
.text:0040204A                 jz      loc_4024CC
.text:00402050                 cmp     eax, 66h ; 'f'
.text:00402053                 jz      loc_4024C0
.text:00402059                 cmp     eax, 66h ; 'f'
.text:0040205C                 jg      loc_402311
.text:00402062                 cmp     eax, 53h ; 'S'
.text:00402065                 jz      loc_402300
.text:0040206B                 cmp     eax, 53h ; 'S'
.text:0040206E                 jle     loc_402117
.text:00402074                 cmp     eax, 56h ; 'V'
.text:00402077                 jz      short loc_4020E6
.text:00402079                 cmp     eax, 56h ; 'V'
.text:0040207C                 jg      short loc_4020C2
.text:0040207E                 mov     [ebp+var_D9], 1
.text:00402085                 cmp     eax, 54h ; 'T'
.text:00402088                 jz      short loc_402020
.text:0040208A
.text:0040208A loc_40208A:                             ; CODE XREF: sub_401EE0+1E5↓j
.text:0040208A                                         ; sub_401EE0+247↓j ...
.text:0040208A                 mov     [esp+118h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402091                 call    ds:libintl_gettext
.text:00402097                 mov     edx, ds:_iob
.text:0040209D                 mov     ecx, ds:dword_422930
.text:004020A3                 add     edx, 40h ; '@'
.text:004020A6                 mov     [esp+118h+var_110], ecx
.text:004020AA                 mov     [esp+118h+Locale], eax ; Format
.text:004020AE                 mov     [esp+118h+Category], edx ; Stream
.text:004020B1                 call    fprintf
.text:004020B6                 mov     [esp+118h+Category], 1 ; Code
.text:004020BD
.text:004020BD loc_4020BD:                             ; CODE XREF: sub_401EE0+3CA↓j
.text:004020BD                                         ; sub_401EE0+788↓j
.text:004020BD                 call    exit
.text:004020C2 ; ---------------------------------------------------------------------------
.text:004020C2
.text:004020C2 loc_4020C2:                             ; CODE XREF: sub_401EE0+19C↑j
.text:004020C2                 cmp     eax, 62h ; 'b'
.text:004020C5                 jnz     short loc_40208A
.text:004020C7
.text:004020C7 loc_4020C7:                             ; CODE XREF: sub_401EE0+235↓j
.text:004020C7                 mov     [ebp+var_CA], 1
.text:004020CE                 mov     eax, ds:dword_422950
.text:004020D3                 test    eax, eax
.text:004020D5                 jz      loc_402020
.text:004020DB                 mov     [ebp+var_D4], eax
.text:004020E1                 jmp     loc_402020
.text:004020E6 ; ---------------------------------------------------------------------------
.text:004020E6
.text:004020E6 loc_4020E6:                             ; CODE XREF: sub_401EE0+197↑j
.text:004020E6                 mov     [esp+118h+Category], offset aWarningVersion ; "warning: --version-control (-V) is obso"...
.text:004020ED                 call    ds:libintl_gettext
.text:004020F3                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:004020FB                 mov     ebx, ds:dword_422950
.text:00402101                 mov     [esp+118h+Category], 0 ; Code
.text:00402108                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:0040210C                 mov     [esp+118h+var_110], eax ; char *
.text:00402110                 call    sub_415D50
.text:00402115                 jmp     short loc_4020C7
.text:00402117 ; ---------------------------------------------------------------------------
.text:00402117
.text:00402117 loc_402117:                             ; CODE XREF: sub_401EE0+18E↑j
.text:00402117                 cmp     eax, 0FFFFFF7Dh
.text:0040211C                 jz      loc_4022AF
.text:00402122                 cmp     eax, 0FFFFFF7Eh
.text:00402127                 jnz     loc_40208A
.text:0040212D                 mov     [esp+118h+Category], offset aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:00402134                 call    ds:libintl_gettext
.text:0040213A                 mov     esi, ds:dword_422930
.text:00402140                 mov     [esp+118h+Category], eax ; Format
.text:00402143                 mov     dword ptr [esp+118h+var_10C], esi
.text:00402147                 mov     [esp+118h+var_110], esi
.text:0040214B                 mov     [esp+118h+Locale], esi
.text:0040214F                 call    printf
.text:00402154                 mov     [esp+118h+Category], offset aRenameSourceTo ; "Rename SOURCE to DEST, or move SOURCE(s"...
.text:0040215B                 call    ds:libintl_gettext
.text:00402161                 mov     edi, ds:_iob
.text:00402167                 add     edi, 20h ; ' '
.text:0040216A                 mov     [esp+118h+Locale], edi ; Stream
.text:0040216E                 mov     [esp+118h+Category], eax ; Buffer
.text:00402171                 call    fputs
.text:00402176                 mov     [esp+118h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:0040217D                 call    ds:libintl_gettext
.text:00402183                 mov     ecx, ds:_iob
.text:00402189                 add     ecx, 20h ; ' '
.text:0040218C                 mov     [esp+118h+Locale], ecx ; Stream
.text:00402190                 mov     [esp+118h+Category], eax ; Buffer
.text:00402193                 call    fputs
.text:00402198                 mov     [esp+118h+Category], offset aBackupControlM ; "      --backup[=CONTROL]       make a b"...
.text:0040219F                 call    ds:libintl_gettext
.text:004021A5                 mov     ebx, ds:_iob
.text:004021AB                 add     ebx, 20h ; ' '
.text:004021AE                 mov     [esp+118h+Locale], ebx ; Stream
.text:004021B2                 mov     [esp+118h+Category], eax ; Buffer
.text:004021B5                 call    fputs
.text:004021BA                 mov     [esp+118h+Category], offset aReplyYesNoQuer ; "      --reply={yes,no,query}   specify "...
.text:004021C1                 call    ds:libintl_gettext
.text:004021C7                 mov     esi, ds:_iob
.text:004021CD                 add     esi, 20h ; ' '
.text:004021D0                 mov     [esp+118h+Locale], esi ; Stream
.text:004021D4                 mov     [esp+118h+Category], eax ; Buffer
.text:004021D7                 call    fputs
.text:004021DC                 mov     [esp+118h+Category], offset aTTargetDirecto ; "  -t, --target-directory=DIRECTORY  mov"...
.text:004021E3                 call    ds:libintl_gettext
.text:004021E9                 mov     edi, ds:_iob
.text:004021EF                 add     edi, 20h ; ' '
.text:004021F2                 mov     [esp+118h+Locale], edi ; Stream
.text:004021F6                 mov     [esp+118h+Category], eax ; Buffer
.text:004021F9                 call    fputs
.text:004021FE                 mov     [esp+118h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402205                 call    ds:libintl_gettext
.text:0040220B                 mov     ecx, ds:_iob
.text:00402211                 add     ecx, 20h ; ' '
.text:00402214                 mov     [esp+118h+Locale], ecx ; Stream
.text:00402218                 mov     [esp+118h+Category], eax ; Buffer
.text:0040221B                 call    fputs
.text:00402220                 mov     [esp+118h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402227                 call    ds:libintl_gettext
.text:0040222D                 mov     ebx, ds:_iob
.text:00402233                 add     ebx, 20h ; ' '
.text:00402236                 mov     [esp+118h+Locale], ebx ; Stream
.text:0040223A                 mov     [esp+118h+Category], eax ; Buffer
.text:0040223D                 call    fputs
.text:00402242                 mov     [esp+118h+Category], offset aTheBackupSuffi ; "\nThe backup suffix is `~', unless set "...
.text:00402249                 call    ds:libintl_gettext
.text:0040224F                 mov     esi, ds:_iob
.text:00402255                 add     esi, 20h ; ' '
.text:00402258                 mov     [esp+118h+Locale], esi ; Stream
.text:0040225C                 mov     [esp+118h+Category], eax ; Buffer
.text:0040225F                 call    fputs
.text:00402264                 mov     [esp+118h+Category], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:0040226B                 call    ds:libintl_gettext
.text:00402271                 mov     edi, ds:_iob
.text:00402277                 add     edi, 20h ; ' '
.text:0040227A                 mov     [esp+118h+Locale], edi ; Stream
.text:0040227E                 mov     [esp+118h+Category], eax ; Buffer
.text:00402281                 call    fputs
.text:00402286                 mov     [esp+118h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040228D                 call    ds:libintl_gettext
.text:00402293                 mov     [esp+118h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040229B                 mov     [esp+118h+Category], eax ; Format
.text:0040229E                 call    printf
.text:004022A3
.text:004022A3 loc_4022A3:                             ; CODE XREF: sub_401EE0+418↓j
.text:004022A3                 mov     [esp+118h+Category], 0
.text:004022AA                 jmp     loc_4020BD
.text:004022AF ; ---------------------------------------------------------------------------
.text:004022AF
.text:004022AF loc_4022AF:                             ; CODE XREF: sub_401EE0+23C↑j
.text:004022AF                 mov     [esp+118h+var_FC], 0
.text:004022B7                 mov     edx, ds:_iob
.text:004022BD                 mov     [esp+118h+var_100], offset aJimMeyering ; "Jim Meyering"
.text:004022C5                 mov     [esp+118h+var_104], offset aDavidMackenzie ; "David MacKenzie"
.text:004022CD                 add     edx, 20h ; ' '
.text:004022D0                 mov     dword ptr [esp+118h+var_108], offset aMikeParker ; "Mike Parker"
.text:004022D8                 mov     dword ptr [esp+118h+var_10C], offset a530 ; "5.3.0"
.text:004022E0                 mov     [esp+118h+var_110], offset aGnuCoreutils ; "GNU coreutils"
.text:004022E8                 mov     [esp+118h+Locale], offset stru_401DA8 ; FILE *
.text:004022F0                 mov     [esp+118h+Category], edx ; FILE *
.text:004022F3                 call    sub_40B7E0
.text:004022F8                 jmp     short loc_4022A3
.text:004022F8 ; ---------------------------------------------------------------------------
.text:004022FA                 align 10h
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_401EE0+185↑j
.text:00402300                 mov     [ebp+var_CA], 1
.text:00402307                 mov     eax, ds:dword_422950
.text:0040230C                 jmp     loc_402010
.text:00402311 ; ---------------------------------------------------------------------------
.text:00402311
.text:00402311 loc_402311:                             ; CODE XREF: sub_401EE0+17C↑j
.text:00402311                 cmp     eax, 75h ; 'u'
.text:00402314                 jz      loc_4024B6
.text:0040231A                 cmp     eax, 75h ; 'u'
.text:0040231D                 jg      loc_402438
.text:00402323                 cmp     eax, 69h ; 'i'
.text:00402326                 jz      loc_40242C
.text:0040232C                 cmp     eax, 74h ; 't'
.text:0040232F                 jnz     loc_40208A
.text:00402335                 mov     ebx, [ebp+var_D8]
.text:0040233B                 test    ebx, ebx
.text:0040233D                 jz      short loc_402374
.text:0040233F                 mov     [esp+118h+Category], offset stru_401DA8._bufsiz
.text:00402346                 call    ds:libintl_gettext
.text:0040234C                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00402354                 mov     [esp+118h+Category], 1 ; Code
.text:0040235B                 mov     [esp+118h+var_110], eax ; char *
.text:0040235F                 call    sub_415D50
.text:00402364
.text:00402364 loc_402364:                             ; CODE XREF: sub_401EE0+4C2↓j
.text:00402364                                         ; sub_401EE0+4FD↓j
.text:00402364                 mov     eax, ds:dword_422950
.text:00402369                 mov     [ebp+var_D8], eax
.text:0040236F                 jmp     loc_402020
.text:00402374 ; ---------------------------------------------------------------------------
.text:00402374
.text:00402374 loc_402374:                             ; CODE XREF: sub_401EE0+45D↑j
.text:00402374                 mov     esi, ds:dword_422950
.text:0040237A                 lea     edx, [ebp+var_C8]
.text:00402380                 mov     [esp+118h+Locale], edx ; int
.text:00402384                 mov     [esp+118h+Category], esi ; char *
.text:00402387                 call    sub_419540
.text:0040238C                 test    eax, eax
.text:0040238E                 jnz     short loc_4023DF
.text:00402390
.text:00402390 loc_402390:                             ; CODE XREF: sub_401EE0+547↓j
.text:00402390                 mov     edx, [ebp+var_C8]
.text:00402396                 and     edx, 0F000h
.text:0040239C                 cmp     edx, 4000h
.text:004023A2                 jz      short loc_402364
.text:004023A4                 mov     ecx, ds:dword_422950
.text:004023AA                 mov     [esp+118h+Category], ecx ; char *
.text:004023AD                 call    sub_40BBD0
.text:004023B2                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:004023B9                 mov     ebx, eax
.text:004023BB                 call    ds:libintl_gettext
.text:004023C1                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:004023C5                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:004023CD                 mov     [esp+118h+Category], 1 ; Code
.text:004023D4                 mov     [esp+118h+var_110], eax ; char *
.text:004023D8                 call    sub_415D50
.text:004023DD                 jmp     short loc_402364
.text:004023DF ; ---------------------------------------------------------------------------
.text:004023DF
.text:004023DF loc_4023DF:                             ; CODE XREF: sub_401EE0+4AE↑j
.text:004023DF                 mov     esi, ds:dword_422950
.text:004023E5                 mov     [esp+118h+Category], esi ; char *
.text:004023E8                 call    sub_40BBD0
.text:004023ED                 mov     [esp+118h+Category], offset aAccessingS ; "accessing %s"
.text:004023F4                 mov     ebx, eax
.text:004023F6                 call    ds:libintl_gettext
.text:004023FC                 mov     [ebp+var_E8], eax
.text:00402402                 call    _errno
.text:00402407                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:0040240B                 mov     ebx, [ebp+var_E8]
.text:00402411                 mov     [esp+118h+var_110], ebx ; char *
.text:00402415                 mov     ecx, [eax]
.text:00402417                 mov     [esp+118h+Category], 1 ; Code
.text:0040241E                 mov     [esp+118h+Locale], ecx ; ErrorMessage
.text:00402422                 call    sub_415D50
.text:00402427                 jmp     loc_402390
.text:0040242C ; ---------------------------------------------------------------------------
.text:0040242C
.text:0040242C loc_40242C:                             ; CODE XREF: sub_401EE0+446↑j
.text:0040242C                 mov     [ebp+var_48], 3
.text:00402433                 jmp     loc_402020
.text:00402438 ; ---------------------------------------------------------------------------
.text:00402438
.text:00402438 loc_402438:                             ; CODE XREF: sub_401EE0+43D↑j
.text:00402438                 cmp     eax, 80h ; '€'
.text:0040243D                 jz      short loc_40246F
.text:0040243F                 cmp     eax, 80h ; '€'
.text:00402444                 jg      short loc_402458
.text:00402446                 cmp     eax, 76h ; 'v'
.text:00402449                 jnz     loc_40208A
.text:0040244F                 mov     [ebp+var_27], 1
.text:00402453                 jmp     loc_402020
.text:00402458 ; ---------------------------------------------------------------------------
.text:00402458
.text:00402458 loc_402458:                             ; CODE XREF: sub_401EE0+564↑j
.text:00402458                 cmp     eax, 81h
.text:0040245D                 jnz     loc_40208A
.text:00402463                 mov     ds:byte_422000, 1
.text:0040246A                 jmp     loc_402020
.text:0040246F ; ---------------------------------------------------------------------------
.text:0040246F
.text:0040246F loc_40246F:                             ; CODE XREF: sub_401EE0+55D↑j
.text:0040246F                 mov     dword ptr [esp+118h+var_108], 4 ; int
.text:00402477                 mov     ecx, off_421030
.text:0040247D                 mov     edx, ds:dword_422950
.text:00402483                 mov     dword ptr [esp+118h+var_10C], offset dword_4012A0 ; int
.text:0040248B                 mov     [esp+118h+var_104], ecx ; int
.text:0040248F                 mov     [esp+118h+var_110], offset off_401290 ; int
.text:00402497                 mov     [esp+118h+Locale], edx ; char *
.text:0040249B                 mov     [esp+118h+Category], offset aReply ; "--reply"
.text:004024A2                 call    sub_40A7C0
.text:004024A7                 mov     esi, ds:dword_4012A0[eax*4]
.text:004024AE                 mov     [ebp+var_48], esi
.text:004024B1                 jmp     loc_402020
.text:004024B6 ; ---------------------------------------------------------------------------
.text:004024B6
.text:004024B6 loc_4024B6:                             ; CODE XREF: sub_401EE0+434↑j
.text:004024B6                 mov     [ebp+var_28], 1
.text:004024BA                 jmp     loc_402020
.text:004024BA ; ---------------------------------------------------------------------------
.text:004024BF                 align 10h
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_401EE0+173↑j
.text:004024C0                 mov     [ebp+var_48], 1
.text:004024C7                 jmp     loc_402020
.text:004024CC ; ---------------------------------------------------------------------------
.text:004024CC
.text:004024CC loc_4024CC:                             ; CODE XREF: sub_401EE0+16A↑j
.text:004024CC                 mov     edx, dword_421020
.text:004024D2                 xor     ebx, ebx
.text:004024D4                 mov     ecx, [ebp+arg_0]
.text:004024D7                 lea     esi, [edi+edx*4]
.text:004024DA                 sub     ecx, edx
.text:004024DC                 cmp     [ebp+var_D8], 0
.text:004024E3                 mov     [ebp+var_E0], ecx
.text:004024E9                 mov     [ebp+var_E4], esi
.text:004024EF                 setz    bl
.text:004024F2                 cmp     ecx, ebx
.text:004024F4                 jle     loc_402913
.text:004024FA                 cmp     [ebp+var_D9], 0
.text:00402501                 jz      loc_402735
.text:00402507                 mov     eax, [ebp+var_D8]
.text:0040250D                 test    eax, eax
.text:0040250F                 jz      short loc_402536
.text:00402511                 mov     [esp+118h+Category], offset aCannotCombineT ; "Cannot combine --target-directory (-t) "...
.text:00402518                 call    ds:libintl_gettext
.text:0040251E                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00402526                 mov     [esp+118h+Category], 1 ; Code
.text:0040252D                 mov     [esp+118h+var_110], eax ; char *
.text:00402531                 call    sub_415D50
.text:00402536
.text:00402536 loc_402536:                             ; CODE XREF: sub_401EE0+62F↑j
.text:00402536                 cmp     [ebp+var_E0], 2
.text:0040253D                 jg      loc_4026F4
.text:00402543
.text:00402543 loc_402543:                             ; CODE XREF: sub_401EE0+85D↓j
.text:00402543                                         ; sub_401EE0+873↓j ...
.text:00402543                 mov     ecx, [ebp+var_D0]
.text:00402549                 test    ecx, ecx
.text:0040254B                 jz      short loc_402560
.text:0040254D                 mov     edx, [ebp+var_D0]
.text:00402553                 mov     [esp+118h+Category], edx ; char *
.text:00402556                 call    sub_40B250
.text:0040255B                 mov     Src, eax
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_401EE0+66B↑j
.text:00402560                 xor     eax, eax
.text:00402562                 cmp     [ebp+var_CA], 0
.text:00402569                 jnz     loc_4026D0
.text:0040256F
.text:0040256F loc_40256F:                             ; CODE XREF: sub_401EE0+80F↓j
.text:0040256F                 mov     [ebp+var_58], eax
.text:00402572                 call    sub_406160
.text:00402577                 mov     ebx, [ebp+var_D8]
.text:0040257D                 test    ebx, ebx
.text:0040257F                 jz      loc_40268A
.text:00402585                 cmp     [ebp+var_E0], 1
.text:0040258C                 jg      loc_40267A
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_401EE0+7A5↓j
.text:00402592                 mov     [ebp+var_C9], 1
.text:00402599                 xor     edi, edi
.text:0040259B                 cmp     edi, [ebp+var_E0]
.text:004025A1                 jge     loc_402659
.text:004025A7
.text:004025A7 loc_4025A7:                             ; CODE XREF: sub_401EE0+773↓j
.text:004025A7                 mov     [ebp+var_F2], 0
.text:004025AE                 mov     edx, [ebp+var_E4]
.text:004025B4                 mov     ecx, [ebp+var_D8]
.text:004025BA                 mov     esi, [edx+edi*4]
.text:004025BD                 mov     [esp+118h+Category], ecx
.text:004025C0                 call    sub_40BB60
.text:004025C5                 cmp     ds:byte_422000, 0
.text:004025CC                 jnz     loc_40266D
.text:004025D2
.text:004025D2 loc_4025D2:                             ; CODE XREF: sub_401EE0+795↓j
.text:004025D2                 mov     [esp+118h+Category], esi
.text:004025D5                 call    sub_40BC00
.text:004025DA                 mov     [esp+118h+Locale], eax ; char *
.text:004025DE                 mov     eax, [ebp+var_D8]
.text:004025E4                 mov     [esp+118h+var_110], 0 ; int
.text:004025EC                 mov     [esp+118h+Category], eax ; int
.text:004025EF                 call    sub_40BA70
.text:004025F4                 mov     [ebp+Block], eax
.text:004025FA                 mov     [esp+118h+Category], eax
.text:004025FD                 call    sub_40BB60
.text:00402602                 mov     [esp+118h+Category], esi
.text:00402605                 mov     ebx, [ebp+Block]
.text:0040260B                 lea     ecx, [ebp+var_58]
.text:0040260E                 mov     [esp+118h+var_110], ecx
.text:00402612                 mov     [esp+118h+Locale], ebx
.text:00402616                 call    sub_402B60
.text:0040261B                 mov     esi, [ebp+Block]
.text:00402621                 mov     bl, al
.text:00402623                 mov     [esp+118h+Category], esi ; Block
.text:00402626                 call    free
.text:0040262B                 test    bl, bl
.text:0040262D                 jz      short loc_40263F
.text:0040262F                 cmp     [ebp+var_C9], 0
.text:00402636                 jz      short loc_40263F
.text:00402638                 mov     [ebp+var_F2], 1
.text:0040263F
.text:0040263F loc_40263F:                             ; CODE XREF: sub_401EE0+74D↑j
.text:0040263F                                         ; sub_401EE0+756↑j
.text:0040263F                 movzx   edx, [ebp+var_F2]
.text:00402646                 inc     edi
.text:00402647                 cmp     edi, [ebp+var_E0]
.text:0040264D                 mov     [ebp+var_C9], dl
.text:00402653                 jl      loc_4025A7
.text:00402659
.text:00402659 loc_402659:                             ; CODE XREF: sub_401EE0+6C1↑j
.text:00402659                                         ; sub_401EE0+7DF↓j
.text:00402659                 xor     ebx, ebx
.text:0040265B                 cmp     [ebp+var_C9], 0
.text:00402662                 setz    bl
.text:00402665                 mov     [esp+118h+Category], ebx
.text:00402668                 jmp     loc_4020BD
.text:0040266D ; ---------------------------------------------------------------------------
.text:0040266D
.text:0040266D loc_40266D:                             ; CODE XREF: sub_401EE0+6EC↑j
.text:0040266D                 mov     [esp+118h+Category], esi
.text:00402670                 call    sub_40BB60
.text:00402675                 jmp     loc_4025D2
.text:0040267A ; ---------------------------------------------------------------------------
.text:0040267A
.text:0040267A loc_40267A:                             ; CODE XREF: sub_401EE0+6AC↑j
.text:0040267A                 lea     eax, [ebp+var_58]
.text:0040267D                 mov     [esp+118h+Category], eax
.text:00402680                 call    sub_404D50
.text:00402685                 jmp     loc_402592
.text:0040268A ; ---------------------------------------------------------------------------
.text:0040268A
.text:0040268A loc_40268A:                             ; CODE XREF: sub_401EE0+69F↑j
.text:0040268A                 mov     edi, [ebp+var_E4]
.text:00402690                 mov     ebx, [edi+4]
.text:00402693                 mov     esi, [edi]
.text:00402695                 lea     edi, [ebp+var_58]
.text:00402698                 mov     [esp+118h+Category], ebx
.text:0040269B                 call    sub_40BB60
.text:004026A0                 cmp     ds:byte_422000, 0
.text:004026A7                 jnz     short loc_4026C1
.text:004026A9
.text:004026A9 loc_4026A9:                             ; CODE XREF: sub_401EE0+7E9↓j
.text:004026A9                 mov     [esp+118h+var_110], edi
.text:004026AD                 mov     [esp+118h+Locale], ebx
.text:004026B1                 mov     [esp+118h+Category], esi
.text:004026B4                 call    sub_402B60
.text:004026B9                 mov     [ebp+var_C9], al
.text:004026BF                 jmp     short loc_402659
.text:004026C1 ; ---------------------------------------------------------------------------
.text:004026C1
.text:004026C1 loc_4026C1:                             ; CODE XREF: sub_401EE0+7C7↑j
.text:004026C1                 mov     [esp+118h+Category], esi
.text:004026C4                 call    sub_40BB60
.text:004026C9                 jmp     short loc_4026A9
.text:004026C9 ; ---------------------------------------------------------------------------
.text:004026CB                 align 10h
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_401EE0+689↑j
.text:004026D0                 mov     [esp+118h+Category], offset aBackupType ; "backup type"
.text:004026D7                 call    ds:libintl_gettext
.text:004026DD                 mov     edi, [ebp+var_D4]
.text:004026E3                 mov     [esp+118h+Category], eax
.text:004026E6                 mov     [esp+118h+Locale], edi
.text:004026EA                 call    sub_40AC50
.text:004026EF                 jmp     loc_40256F
.text:004026F4 ; ---------------------------------------------------------------------------
.text:004026F4
.text:004026F4 loc_4026F4:                             ; CODE XREF: sub_401EE0+65D↑j
.text:004026F4                 mov     esi, [ebp+var_E4]
.text:004026FA                 mov     ebx, [esi+8]
.text:004026FD                 mov     [esp+118h+Category], ebx ; char *
.text:00402700                 call    sub_40BBD0
.text:00402705                 mov     [esp+118h+Category], offset aExtraOperandS ; "extra operand %s"
.text:0040270C
.text:0040270C loc_40270C:                             ; CODE XREF: sub_401EE0+A4E↓j
.text:0040270C                 mov     esi, eax
.text:0040270E                 call    ds:libintl_gettext
.text:00402714                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00402718                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00402720                 mov     [esp+118h+Category], 0 ; Code
.text:00402727                 mov     [esp+118h+var_110], eax ; char *
.text:0040272B                 call    sub_415D50
.text:00402730                 jmp     loc_40208A
.text:00402735 ; ---------------------------------------------------------------------------
.text:00402735
.text:00402735 loc_402735:                             ; CODE XREF: sub_401EE0+621↑j
.text:00402735                 mov     edi, [ebp+var_D8]
.text:0040273B                 test    edi, edi
.text:0040273D                 jnz     loc_402543
.text:00402743                 cmp     [ebp+var_E0], 1
.text:0040274A                 jg      short loc_4027A1
.text:0040274C
.text:0040274C loc_40274C:                             ; CODE XREF: sub_401EE0+968↓j
.text:0040274C                 cmp     [ebp+var_E0], 2
.text:00402753                 jle     loc_402543
.text:00402759                 mov     esi, [ebp+var_E0]
.text:0040275F                 mov     eax, [ebp+var_E4]
.text:00402765                 mov     ebx, [eax+esi*4-4]
.text:00402769                 mov     [esp+118h+Category], ebx ; char *
.text:0040276C                 call    sub_40BBD0
.text:00402771                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00402778                 mov     edi, eax
.text:0040277A                 call    ds:libintl_gettext
.text:00402780                 mov     dword ptr [esp+118h+var_10C], edi ; char
.text:00402784                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:0040278C                 mov     [esp+118h+Category], 1 ; Code
.text:00402793                 mov     [esp+118h+var_110], eax ; char *
.text:00402797                 call    sub_415D50
.text:0040279C                 jmp     loc_402543
.text:004027A1 ; ---------------------------------------------------------------------------
.text:004027A1
.text:004027A1 loc_4027A1:                             ; CODE XREF: sub_401EE0+86A↑j
.text:004027A1                 mov     ebx, [ebp+var_E4]
.text:004027A7                 mov     esi, [ebp+var_E0]
.text:004027AD                 mov     edi, [ebx+esi*4-4]
.text:004027B1                 mov     [esp+118h+Category], edi
.text:004027B4                 call    sub_40BC00
.text:004027B9                 mov     [esp+118h+Category], eax ; Str
.text:004027BC                 mov     ebx, eax
.text:004027BE                 call    strlen
.text:004027C3                 mov     [ebp+var_E9], 0
.text:004027CA                 test    eax, eax
.text:004027CC                 jz      loc_402907
.text:004027D2                 movzx   eax, byte ptr [eax+ebx-1]
.text:004027D7                 cmp     al, 2Fh ; '/'
.text:004027D9                 jz      loc_402907
.text:004027DF                 cmp     al, 5Ch ; '\'
.text:004027E1                 jz      loc_402907
.text:004027E7
.text:004027E7 loc_4027E7:                             ; CODE XREF: sub_401EE0+A2E↓j
.text:004027E7                 mov     [esp+118h+Category], edi ; char *
.text:004027EA                 lea     ecx, [ebp+var_C8]
.text:004027F0                 mov     [esp+118h+Locale], ecx ; int
.text:004027F4                 call    sub_419540
.text:004027F9                 xor     edx, edx
.text:004027FB                 test    eax, eax
.text:004027FD                 mov     [ebp+ErrorMessage], edx
.text:00402803                 jnz     loc_4028F5
.text:00402809
.text:00402809 loc_402809:                             ; CODE XREF: sub_401EE0+A22↓j
.text:00402809                 mov     [ebp+var_F1], 0
.text:00402810                 mov     eax, [ebp+ErrorMessage]
.text:00402816                 test    eax, eax
.text:00402818                 jnz     loc_4028AE
.text:0040281E                 mov     esi, [ebp+var_C8]
.text:00402824                 and     esi, 0F000h
.text:0040282A                 cmp     esi, 4000h
.text:00402830                 jz      short loc_4028A5
.text:00402832
.text:00402832 loc_402832:                             ; CODE XREF: sub_401EE0+9CC↓j
.text:00402832                                         ; sub_401EE0+9D5↓j ...
.text:00402832                 movzx   ecx, [ebp+var_E9]
.text:00402839                 cmp     [ebp+var_F1], cl
.text:0040283F                 jb      short loc_40286E
.text:00402841
.text:00402841 loc_402841:                             ; CODE XREF: sub_401EE0+9C3↓j
.text:00402841                 cmp     [ebp+var_F1], 0
.text:00402848                 jz      loc_40274C
.text:0040284E                 dec     [ebp+var_E0]
.text:00402854                 mov     ecx, [ebp+var_E4]
.text:0040285A                 mov     edx, [ebp+var_E0]
.text:00402860                 mov     esi, [ecx+edx*4]
.text:00402863                 mov     [ebp+var_D8], esi
.text:00402869                 jmp     loc_402543
.text:0040286E ; ---------------------------------------------------------------------------
.text:0040286E
.text:0040286E loc_40286E:                             ; CODE XREF: sub_401EE0+95F↑j
.text:0040286E                 mov     [esp+118h+Category], edi ; char *
.text:00402871                 call    sub_40BBD0
.text:00402876                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:0040287D                 mov     ebx, eax
.text:0040287F                 call    ds:libintl_gettext
.text:00402885                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:00402889                 mov     edi, [ebp+ErrorMessage]
.text:0040288F                 mov     [esp+118h+Category], 1 ; Code
.text:00402896                 mov     [esp+118h+var_110], eax ; char *
.text:0040289A                 mov     [esp+118h+Locale], edi ; ErrorMessage
.text:0040289E                 call    sub_415D50
.text:004028A3                 jmp     short loc_402841
.text:004028A5 ; ---------------------------------------------------------------------------
.text:004028A5
.text:004028A5 loc_4028A5:                             ; CODE XREF: sub_401EE0+950↑j
.text:004028A5                 mov     [ebp+var_F1], 1
.text:004028AC                 jmp     short loc_402832
.text:004028AE ; ---------------------------------------------------------------------------
.text:004028AE
.text:004028AE loc_4028AE:                             ; CODE XREF: sub_401EE0+938↑j
.text:004028AE                 cmp     [ebp+ErrorMessage], 2
.text:004028B5                 jz      loc_402832
.text:004028BB                 mov     [esp+118h+Category], edi ; char *
.text:004028BE                 call    sub_40BBD0
.text:004028C3                 mov     [esp+118h+Category], offset aAccessingS ; "accessing %s"
.text:004028CA                 mov     ebx, eax
.text:004028CC                 call    ds:libintl_gettext
.text:004028D2                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:004028D6                 mov     edx, [ebp+ErrorMessage]
.text:004028DC                 mov     [esp+118h+Category], 1 ; Code
.text:004028E3                 mov     [esp+118h+var_110], eax ; char *
.text:004028E7                 mov     [esp+118h+Locale], edx ; ErrorMessage
.text:004028EB                 call    sub_415D50
.text:004028F0                 jmp     loc_402832
.text:004028F5 ; ---------------------------------------------------------------------------
.text:004028F5
.text:004028F5 loc_4028F5:                             ; CODE XREF: sub_401EE0+923↑j
.text:004028F5                 call    _errno
.text:004028FA                 mov     ebx, [eax]
.text:004028FC                 mov     [ebp+ErrorMessage], ebx
.text:00402902                 jmp     loc_402809
.text:00402907 ; ---------------------------------------------------------------------------
.text:00402907
.text:00402907 loc_402907:                             ; CODE XREF: sub_401EE0+8EC↑j
.text:00402907                                         ; sub_401EE0+8F9↑j ...
.text:00402907                 mov     [ebp+var_E9], 1
.text:0040290E                 jmp     loc_4027E7
.text:00402913 ; ---------------------------------------------------------------------------
.text:00402913
.text:00402913 loc_402913:                             ; CODE XREF: sub_401EE0+614↑j
.text:00402913                 test    ecx, ecx
.text:00402915                 jle     short loc_402933
.text:00402917                 mov     edi, [ebp+var_E4]
.text:0040291D                 mov     ecx, [edi]
.text:0040291F                 mov     [esp+118h+Category], ecx ; char *
.text:00402922                 call    sub_40BBD0
.text:00402927                 mov     [esp+118h+Category], offset aMissingDestina ; "missing destination file operand after "...
.text:0040292E                 jmp     loc_40270C
.text:00402933 ; ---------------------------------------------------------------------------
.text:00402933
.text:00402933 loc_402933:                             ; CODE XREF: sub_401EE0+A35↑j
.text:00402933                 mov     [esp+118h+Category], offset aMissingFileOpe ; "missing file operand"
.text:0040293A                 call    ds:libintl_gettext
.text:00402940                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00402948                 mov     [esp+118h+Category], 0 ; Code
.text:0040294F                 mov     [esp+118h+var_110], eax ; char *
.text:00402953                 call    sub_415D50
.text:00402958                 jmp     loc_40208A
.text:00402958 sub_401EE0      endp
.text:00402958
.text:00402958 ; ---------------------------------------------------------------------------
.text:0040295D                 align 10h
.text:00402960
.text:00402960 ; =============== S U B R O U T I N E =======================================
.text:00402960
.text:00402960 ; Attributes: noreturn
.text:00402960
.text:00402960 ; void __cdecl __noreturn sub_402960(int Code)
.text:00402960 sub_402960      proc near               ; CODE XREF: sub_40AA30+A↓p
.text:00402960
.text:00402960 Stream          = dword ptr -1Ch
.text:00402960 Format          = dword ptr -18h
.text:00402960 var_14          = dword ptr -14h
.text:00402960 var_10          = dword ptr -10h
.text:00402960 Code            = dword ptr  4
.text:00402960
.text:00402960                 push    ebx
.text:00402961                 sub     esp, 18h
.text:00402964                 mov     ebx, [esp+1Ch+Code]
.text:00402968                 test    ebx, ebx
.text:0040296A                 jz      short loc_4029A0
.text:0040296C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402973                 call    ds:libintl_gettext
.text:00402979                 mov     edx, ds:_iob
.text:0040297F                 mov     ecx, ds:dword_422930
.text:00402985                 add     edx, 40h ; '@'
.text:00402988                 mov     [esp+1Ch+var_14], ecx
.text:0040298C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402990                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402993                 call    fprintf
.text:00402998
.text:00402998 loc_402998:                             ; CODE XREF: sub_402960+1B6↓j
.text:00402998                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040299B                 call    exit
.text:004029A0 ; ---------------------------------------------------------------------------
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_402960+A↑j
.text:004029A0                 mov     [esp+1Ch+Stream], offset aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:004029A7                 call    ds:libintl_gettext
.text:004029AD                 mov     ecx, ds:dword_422930
.text:004029B3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004029B6                 mov     [esp+1Ch+var_10], ecx
.text:004029BA                 mov     [esp+1Ch+var_14], ecx
.text:004029BE                 mov     [esp+1Ch+Format], ecx
.text:004029C2                 call    printf
.text:004029C7                 mov     [esp+1Ch+Stream], offset aRenameSourceTo ; "Rename SOURCE to DEST, or move SOURCE(s"...
.text:004029CE                 call    ds:libintl_gettext
.text:004029D4                 mov     ecx, ds:_iob
.text:004029DA                 add     ecx, 20h ; ' '
.text:004029DD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004029E1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004029E4                 call    fputs
.text:004029E9                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004029F0                 call    ds:libintl_gettext
.text:004029F6                 mov     ecx, ds:_iob
.text:004029FC                 add     ecx, 20h ; ' '
.text:004029FF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A03                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A06                 call    fputs
.text:00402A0B                 mov     [esp+1Ch+Stream], offset aBackupControlM ; "      --backup[=CONTROL]       make a b"...
.text:00402A12                 call    ds:libintl_gettext
.text:00402A18                 mov     ecx, ds:_iob
.text:00402A1E                 add     ecx, 20h ; ' '
.text:00402A21                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A25                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A28                 call    fputs
.text:00402A2D                 mov     [esp+1Ch+Stream], offset aReplyYesNoQuer ; "      --reply={yes,no,query}   specify "...
.text:00402A34                 call    ds:libintl_gettext
.text:00402A3A                 mov     ecx, ds:_iob
.text:00402A40                 add     ecx, 20h ; ' '
.text:00402A43                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A47                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A4A                 call    fputs
.text:00402A4F                 mov     [esp+1Ch+Stream], offset aTTargetDirecto ; "  -t, --target-directory=DIRECTORY  mov"...
.text:00402A56                 call    ds:libintl_gettext
.text:00402A5C                 mov     ecx, ds:_iob
.text:00402A62                 add     ecx, 20h ; ' '
.text:00402A65                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A69                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A6C                 call    fputs
.text:00402A71                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402A78                 call    ds:libintl_gettext
.text:00402A7E                 mov     ecx, ds:_iob
.text:00402A84                 add     ecx, 20h ; ' '
.text:00402A87                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402A8B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402A8E                 call    fputs
.text:00402A93                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402A9A                 call    ds:libintl_gettext
.text:00402AA0                 mov     ecx, ds:_iob
.text:00402AA6                 add     ecx, 20h ; ' '
.text:00402AA9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402AAD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AB0                 call    fputs
.text:00402AB5                 mov     [esp+1Ch+Stream], offset aTheBackupSuffi ; "\nThe backup suffix is `~', unless set "...
.text:00402ABC                 call    ds:libintl_gettext
.text:00402AC2                 mov     ecx, ds:_iob
.text:00402AC8                 add     ecx, 20h ; ' '
.text:00402ACB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402ACF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AD2                 call    fputs
.text:00402AD7                 mov     [esp+1Ch+Stream], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:00402ADE                 call    ds:libintl_gettext
.text:00402AE4                 mov     ecx, ds:_iob
.text:00402AEA                 add     ecx, 20h ; ' '
.text:00402AED                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402AF1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402AF4                 call    fputs
.text:00402AF9                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402B00                 call    ds:libintl_gettext
.text:00402B06                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402B0E                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402B11                 call    printf
.text:00402B16                 jmp     loc_402998
.text:00402B16 sub_402960      endp
.text:00402B16
.text:00402B16 ; ---------------------------------------------------------------------------
.text:00402B1B                 align 10h
.text:00402B20 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/mv.c',0
.text:00402B20                                         ; DATA XREF: sub_402B60+F4↓o
.text:00402B43 aValidStatusSta db 'VALID_STATUS (status)',0
.text:00402B43                                         ; DATA XREF: sub_402B60+FC↓o
.text:00402B59                 align 10h
.text:00402B60
.text:00402B60 ; =============== S U B R O U T I N E =======================================
.text:00402B60
.text:00402B60
.text:00402B60 sub_402B60      proc near               ; CODE XREF: sub_401EE0+736↑p
.text:00402B60                                         ; sub_401EE0+7D4↑p
.text:00402B60
.text:00402B60 var_4C          = dword ptr -4Ch
.text:00402B60 var_48          = dword ptr -48h
.text:00402B60 var_44          = byte ptr -44h
.text:00402B60 var_40          = dword ptr -40h
.text:00402B60 var_3C          = dword ptr -3Ch
.text:00402B60 var_38          = dword ptr -38h
.text:00402B60 var_25          = byte ptr -25h
.text:00402B60 var_24          = dword ptr -24h
.text:00402B60 var_1E          = dword ptr -1Eh
.text:00402B60 var_18          = dword ptr -18h
.text:00402B60 var_14          = byte ptr -14h
.text:00402B60 var_13          = byte ptr -13h
.text:00402B60 var_12          = byte ptr -12h
.text:00402B60 var_11          = byte ptr -11h
.text:00402B60 var_8           = dword ptr -8
.text:00402B60 var_4           = dword ptr -4
.text:00402B60 arg_0           = dword ptr  4
.text:00402B60 arg_4           = dword ptr  8
.text:00402B60 arg_8           = dword ptr  0Ch
.text:00402B60
.text:00402B60                 sub     esp, 4Ch
.text:00402B63                 lea     edx, [esp+4Ch+var_1E]
.text:00402B67                 mov     [esp+4Ch+var_8], ebx
.text:00402B6B                 mov     ebx, [esp+4Ch+arg_0]
.text:00402B6F                 lea     ecx, [esp+4Ch+var_1E+1]
.text:00402B73                 mov     [esp+4Ch+var_4], esi
.text:00402B77                 mov     esi, [esp+4Ch+arg_8]
.text:00402B7B                 mov     [esp+4Ch+var_3C], edx ; int
.text:00402B7F                 mov     edx, [esp+4Ch+arg_4]
.text:00402B83                 mov     [esp+4Ch+var_38], ecx ; int
.text:00402B87                 mov     [esp+4Ch+var_40], esi ; int
.text:00402B8B                 mov     dword ptr [esp+4Ch+var_44], 0 ; char
.text:00402B93                 mov     [esp+4Ch+var_48], edx ; char *
.text:00402B97                 mov     [esp+4Ch+var_4C], ebx ; char *
.text:00402B9A                 call    sub_404E90
.text:00402B9F                 mov     [esp+4Ch+var_25], al
.text:00402BA3                 test    al, al
.text:00402BA5                 jz      short loc_402BC7
.text:00402BA7                 cmp     byte ptr [esp+4Ch+var_1E], 0
.text:00402BAC                 jz      loc_402C36
.text:00402BB2                 mov     [esp+4Ch+var_24], 0
.text:00402BBA                 mov     [esp+4Ch+var_25], 0
.text:00402BBF
.text:00402BBF loc_402BBF:                             ; CODE XREF: sub_402B60+E7↓j
.text:00402BBF                 mov     ebx, [esp+4Ch+var_24]
.text:00402BC3                 test    ebx, ebx
.text:00402BC5                 jnz     short loc_402BD8
.text:00402BC7
.text:00402BC7 loc_402BC7:                             ; CODE XREF: sub_402B60+45↑j
.text:00402BC7                                         ; sub_402B60+CD↓j ...
.text:00402BC7                 movzx   eax, [esp+4Ch+var_25]
.text:00402BCC                 mov     ebx, [esp+4Ch+var_8]
.text:00402BD0                 mov     esi, [esp+4Ch+var_4]
.text:00402BD4                 add     esp, 4Ch
.text:00402BD7                 retn
.text:00402BD8 ; ---------------------------------------------------------------------------
.text:00402BD8
.text:00402BD8 loc_402BD8:                             ; CODE XREF: sub_402B60+65↑j
.text:00402BD8                 mov     [esp+4Ch+var_13], 0
.text:00402BDD                 lea     ecx, [esp+4Ch+var_24]
.text:00402BE1                 lea     ebx, [esp+4Ch+var_1E+2]
.text:00402BE5                 mov     byte ptr [esp+4Ch+var_1E+2], 0
.text:00402BEA                 mov     byte ptr [esp+32h], 1
.text:00402BEF                 mov     byte ptr [esp+4Ch+var_1E+3], 0
.text:00402BF4                 mov     [esp+4Ch+var_14], 0
.text:00402BF9                 mov     [esp+4Ch+var_11], 1
.text:00402BFE                 movzx   edx, byte ptr [esi+31h]
.text:00402C02                 mov     [esp+4Ch+var_18], 0
.text:00402C0A                 mov     dword ptr [esp+4Ch+var_44], ebx
.text:00402C0E                 mov     [esp+4Ch+var_48], ecx
.text:00402C12                 mov     [esp+4Ch+var_12], dl
.text:00402C16                 mov     [esp+4Ch+var_4C], 1
.text:00402C1D                 call    sub_406340
.text:00402C22                 lea     esi, [eax-2]
.text:00402C25                 cmp     esi, 2
.text:00402C28                 ja      short loc_402C4C
.text:00402C2A                 cmp     eax, 4
.text:00402C2D                 jnz     short loc_402BC7
.text:00402C2F                 mov     [esp+4Ch+var_25], 0
.text:00402C34                 jmp     short loc_402BC7
.text:00402C36 ; ---------------------------------------------------------------------------
.text:00402C36
.text:00402C36 loc_402C36:                             ; CODE XREF: sub_402B60+4C↑j
.text:00402C36                 xor     edx, edx
.text:00402C38                 cmp     byte ptr [esp+4Ch+var_1E+1], 0
.text:00402C3D                 setnz   dl
.text:00402C40                 dec     edx
.text:00402C41                 and     ebx, edx
.text:00402C43                 mov     [esp+4Ch+var_24], ebx
.text:00402C47                 jmp     loc_402BBF
.text:00402C4C ; ---------------------------------------------------------------------------
.text:00402C4C
.text:00402C4C loc_402C4C:                             ; CODE XREF: sub_402B60+C8↑j
.text:00402C4C                 mov     dword ptr [esp+4Ch+var_44], 0F3h ; 'ó'
.text:00402C54                 mov     [esp+4Ch+var_48], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/mv.c"
.text:00402C5C                 mov     [esp+4Ch+var_4C], offset aValidStatusSta ; "VALID_STATUS (status)"
.text:00402C63                 call    _assert
.text:00402C63 sub_402B60      endp
.text:00402C63
.text:00402C63 ; ---------------------------------------------------------------------------
.text:00402C68                 align 20h
.text:00402C80
.text:00402C80 loc_402C80:                             ; DATA XREF: sub_403270+A0↓o
.text:00402C80                 arpl    [ecx+6Eh], sp
.text:00402C83                 outsb
.text:00402C84                 outsd
.text:00402C85                 jz      short near ptr loc_402CA6+1
.text:00402C87                 jnb     short near ptr loc_402CF9+4
.text:00402C89                 popa
.text:00402C8A                 jz      short near ptr loc_402CA6+6
.text:00402C8C
.text:00402C8C loc_402C8C:                             ; DATA XREF: sub_403270+241↓o
.text:00402C8C                 and     eax, 73250073h
.text:00402C91                 and     ds:7325203Eh, ch
.text:00402C97
.text:00402C97 loc_402C97:                             ; DATA XREF: sub_403270:loc_403A36↓o
.text:00402C97                 add     [esi], ch
.text:00402C99                 add     [ebx+65h], dh
.text:00402C9C                 jz      short near ptr loc_402D11+1
.text:00402C9E                 imul    ebp, [esi+67h], 72657020h
.text:00402CA5                 insd
.text:00402CA6
.text:00402CA6 loc_402CA6:                             ; CODE XREF: .text:00402C85↑j
.text:00402CA6                                         ; .text:00402C8A↑j
.text:00402CA6                 imul    esi, [ebx+73h], 736E6F69h
.text:00402CAD                 and     [esi+6Fh], ah
.text:00402CB0                 jb      short loc_402CD2
.text:00402CB2                 and     eax, 748D0073h
.text:00402CB7                 add     es:[ebp+27BCh], cl
.text:00402CB7 ; ---------------------------------------------------------------------------
.text:00402CBE                 dw 0
.text:00402CC0 dword_402CC0    dd 6C696166h, 74206465h, 7270206Fh, 72657365h
.text:00402CC0                                         ; DATA XREF: sub_403270+53D↓o
.text:00402CC0                                         ; sub_403270:loc_403C4E↓o
.text:00402CD0                 db 76h, 65h
.text:00402CD2 ; ---------------------------------------------------------------------------
.text:00402CD2
.text:00402CD2 loc_402CD2:                             ; CODE XREF: .text:00402CB0↑j
.text:00402CD2                 and     [edi+77h], ch
.text:00402CD5                 outsb
.text:00402CD6                 db      65h
.text:00402CD6                 jb      short near ptr loc_402D4A+2
.text:00402CD9                 push    66207069h
.text:00402CDE                 outsd
.text:00402CDF                 jb      short near ptr loc_402CFE+3
.text:00402CE1                 and     eax, 72700073h
.text:00402CE6                 db      65h
.text:00402CE6                 jnb     short near ptr loc_402D4A+4
.text:00402CE9                 jb      short near ptr loc_402D60+1
.text:00402CEB                 imul    ebp, [esi+67h], 6D697420h
.text:00402CF2                 db      65h
.text:00402CF2                 jnb     short near ptr loc_402D14+1
.text:00402CF5                 outsw
.text:00402CF7                 jb      short near ptr loc_402D14+5
.text:00402CF9
.text:00402CF9 loc_402CF9:                             ; CODE XREF: .text:00402C87↑j
.text:00402CF9                 and     eax, 748D0073h
.text:00402CFE
.text:00402CFE loc_402CFE:                             ; CODE XREF: .text:00402CDF↑j
.text:00402CFE                 add     es:[ebx+61h], ah
.text:00402D02                 outsb
.text:00402D03                 outsb
.text:00402D04                 outsd
.text:00402D05                 jz      short loc_402D27
.text:00402D07                 arpl    [edx+65h], si
.text:00402D0A                 popa
.text:00402D0B                 jz      short near ptr loc_402D71+1
.text:00402D0D                 and     [ebx+79h], dh
.text:00402D10                 insd
.text:00402D11
.text:00402D11 loc_402D11:                             ; CODE XREF: .text:00402C9C↑j
.text:00402D11                 bound   ebp, [edi+6Ch]
.text:00402D14
.text:00402D14 loc_402D14:                             ; CODE XREF: .text:00402CF2↑j
.text:00402D14                                         ; .text:00402CF7↑j
.text:00402D14                 imul    esp, [ebx+20h], 6B6E696Ch
.text:00402D1B                 and     ds:6F742073h, ah
.text:00402D21                 and     ds:73250073h, ah
.text:00402D27
.text:00402D27 loc_402D27:                             ; CODE XREF: .text:00402D05↑j
.text:00402D27                 and     ds:7325203Eh, ch
.text:00402D2D                 and     [eax], ch
.text:00402D2F                 jnz     short loc_402D9F
.text:00402D31                 bound   esp, [ecx+63h]
.text:00402D34                 imul    esi, [ebp+70h], 29h ; ')'
.text:00402D38                 or      al, [eax]
.text:00402D3A
.text:00402D3A loc_402D3A:                             ; DATA XREF: sub_403270+75A↓o
.text:00402D3A                 arpl    [ecx+6Eh], sp
.text:00402D3D                 outsb
.text:00402D3E                 outsd
.text:00402D3F                 jz      short near ptr loc_402D60+1
.text:00402D41                 jnz     short loc_402DB1
.text:00402D43                 sub     eax, 6B636162h
.text:00402D48                 jnz     short near ptr loc_402DB6+4
.text:00402D4A
.text:00402D4A loc_402D4A:                             ; CODE XREF: .text:00402CD6↑j
.text:00402D4A                                         ; .text:00402CE6↑j
.text:00402D4A                 and     ds:90900073h, ah
.text:00402D50                 nop
.text:00402D51                 nop
.text:00402D52                 nop
.text:00402D53                 nop
.text:00402D54                 nop
.text:00402D55                 nop
.text:00402D56                 nop
.text:00402D57                 nop
.text:00402D58                 nop
.text:00402D59                 nop
.text:00402D5A                 nop
.text:00402D5B                 nop
.text:00402D5C                 nop
.text:00402D5D                 nop
.text:00402D5E                 nop
.text:00402D5F                 nop
.text:00402D60
.text:00402D60 loc_402D60:                             ; CODE XREF: .text:00402CE9↑j
.text:00402D60                                         ; .text:00402D3F↑j
.text:00402D60                                         ; DATA XREF: ...
.text:00402D60                 and     eax, 63203A73h
.text:00402D65                 popa
.text:00402D66                 outsb
.text:00402D67                 and     [ebp+61h], ch
.text:00402D6A                 imul    esp, [ebp+20h], 72h ; 'r'
.text:00402D6E                 db      65h
.text:00402D6E                 insb
.text:00402D70                 popa
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: .text:00402D0B↑j
.text:00402D71                 jz      short near ptr loc_402DDB+1
.text:00402D73                 jbe     short near ptr loc_402DD4+6
.text:00402D75                 and     [ebx+79h], dh
.text:00402D78                 insd
.text:00402D79                 bound   ebp, [edi+6Ch]
.text:00402D7C                 imul    esp, [ebx+20h], 6B6E696Ch
.text:00402D83                 jnb     short near ptr loc_402DA4+1
.text:00402D85                 outsd
.text:00402D86                 outsb
.text:00402D87                 insb
.text:00402D88                 jns     short near ptr loc_402DA8+2
.text:00402D8A                 imul    ebp, [esi+20h], 72727563h
.text:00402D91                 outs    dx, byte ptr gs:[esi]
.text:00402D93                 jz      short near ptr loc_402DB1+4
.text:00402D95                 imul    esi, fs:[edx+65h], 726F7463h
.text:00402D9D                 jns     short $+2
.text:00402D9F
.text:00402D9F loc_402D9F:                             ; CODE XREF: .text:00402D2F↑j
.text:00402D9F                                         ; .text:00402D9D↑j
.text:00402D9F                                         ; DATA XREF: ...
.text:00402D9F                 and     eax, 61682073h
.text:00402DA4
.text:00402DA4 loc_402DA4:                             ; CODE XREF: .text:00402D83↑j
.text:00402DA4                 jnb     short loc_402DC6
.text:00402DA6                 jnz     short near ptr loc_402E15+1
.text:00402DA8
.text:00402DA8 loc_402DA8:                             ; CODE XREF: .text:00402D88↑j
.text:00402DA8                 imul    ebp, [esi+6Fh], 77h ; 'w'
.text:00402DAC                 outsb
.text:00402DAD                 and     [esi+69h], ah
.text:00402DB0                 insb
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: .text:00402D41↑j
.text:00402DB1                                         ; .text:00402D93↑j
.text:00402DB1                 and     gs:[ecx+edi*2+70h], dh
.text:00402DB6
.text:00402DB6 loc_402DB6:                             ; CODE XREF: .text:00402D48↑j
.text:00402DB6                 add     gs:[eax+26B48Dh], dl
.text:00402DB6 ; ---------------------------------------------------------------------------
.text:00402DBD                 db 3 dup(0)
.text:00402DC0 dword_402DC0    dd 6E6E6163h            ; DATA XREF: sub_403270+A72↓o
.text:00402DC4                 db 6Fh, 74h
.text:00402DC6 ; ---------------------------------------------------------------------------
.text:00402DC6
.text:00402DC6 loc_402DC6:                             ; CODE XREF: .text:loc_402DA4↑j
.text:00402DC6                 and     [ebx+72h], ah
.text:00402DC9                 db      65h
.text:00402DC9                 popa
.text:00402DCB                 jz      short loc_402E32
.text:00402DCD                 and     [ebx+79h], dh
.text:00402DD0                 insd
.text:00402DD1                 bound   ebp, [edi+6Ch]
.text:00402DD4
.text:00402DD4 loc_402DD4:                             ; CODE XREF: .text:00402D73↑j
.text:00402DD4                 imul    esp, [ebx+20h], 6B6E696Ch
.text:00402DDB
.text:00402DDB loc_402DDB:                             ; CODE XREF: .text:loc_402D71↑j
.text:00402DDB                 and     ds:61630073h, ah
.text:00402DE1                 outsb
.text:00402DE2                 outsb
.text:00402DE3                 outsd
.text:00402DE4                 jz      short loc_402E06
.text:00402DE6                 jb      short near ptr loc_402E4B+2
.text:00402DE8                 popa
.text:00402DE9                 and     fs:[ebx+79h], dh
.text:00402DED                 insd
.text:00402DEE                 bound   ebp, [edi+6Ch]
.text:00402DF1                 imul    esp, [ebx+20h], 6B6E696Ch
.text:00402DF8                 and     ds:61630073h, ah
.text:00402DFE                 outsb
.text:00402DFF                 outsb
.text:00402E00                 outsd
.text:00402E01                 jz      short near ptr loc_402E21+2
.text:00402E03                 arpl    [edx+65h], si
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: .text:00402DE4↑j
.text:00402E06                 popa
.text:00402E07                 jz      short loc_402E6E
.text:00402E09                 and     [ebx+70h], dh
.text:00402E0C                 arpl    gs:[ecx+61h], bp
.text:00402E10                 insb
.text:00402E11                 and     [esi+69h], ah
.text:00402E14                 insb
.text:00402E15
.text:00402E15 loc_402E15:                             ; CODE XREF: .text:00402DA6↑j
.text:00402E15                 and     gs:61630073h, ah
.text:00402E1C                 outsb
.text:00402E1D                 outsb
.text:00402E1E                 outsd
.text:00402E1F                 jz      short loc_402E41
.text:00402E21
.text:00402E21 loc_402E21:                             ; CODE XREF: .text:00402E01↑j
.text:00402E21                 arpl    [edx+65h], si
.text:00402E24                 popa
.text:00402E25                 jz      short loc_402E8C
.text:00402E27                 and     [esi+69h], ah
.text:00402E2A                 outsw
.text:00402E2C                 and     ds:61630073h, ah
.text:00402E32
.text:00402E32 loc_402E32:                             ; CODE XREF: .text:00402DCB↑j
.text:00402E32                 outsb
.text:00402E33                 outsb
.text:00402E34                 outsd
.text:00402E35                 jz      short loc_402E57
.text:00402E37                 arpl    [edx+65h], si
.text:00402E3A                 popa
.text:00402E3B                 jz      short near ptr loc_402EA0+2
.text:00402E3D                 and     [ecx+ebp*2+6Eh], ch
.text:00402E41
.text:00402E41 loc_402E41:                             ; CODE XREF: .text:00402E1F↑j
.text:00402E41                 imul    esp, [eax], 25h ; '%'
.text:00402E44                 jnb     short $+2
.text:00402E46
.text:00402E46 loc_402E46:                             ; CODE XREF: .text:00402E44↑j
.text:00402E46                                         ; DATA XREF: sub_403270+DE5↓o ...
.text:00402E46                 and     eax, 3E2D2073h
.text:00402E4B
.text:00402E4B loc_402E4B:                             ; CODE XREF: .text:00402DE6↑j
.text:00402E4B                 and     ds:63000A73h, ah
.text:00402E51                 popa
.text:00402E52                 outsb
.text:00402E53                 outsb
.text:00402E54                 outsd
.text:00402E55                 jz      short loc_402E77
.text:00402E57
.text:00402E57 loc_402E57:                             ; CODE XREF: .text:00402E35↑j
.text:00402E57                 arpl    [edx+65h], si
.text:00402E5A                 popa
.text:00402E5B                 jz      short loc_402EC2
.text:00402E5D                 and     [ecx+ebp*2+72h], ah
.text:00402E61                 arpl    gs:[edi+ebp*2+72h], si
.text:00402E66                 jns     short near ptr loc_402E87+1
.text:00402E68                 and     eax, 90900073h
.text:00402E6D                 nop
.text:00402E6E
.text:00402E6E loc_402E6E:                             ; CODE XREF: .text:00402E07↑j
.text:00402E6E                 nop
.text:00402E6F                 nop
.text:00402E70                 nop
.text:00402E71                 nop
.text:00402E72                 nop
.text:00402E73                 nop
.text:00402E74                 nop
.text:00402E75                 nop
.text:00402E76                 nop
.text:00402E77
.text:00402E77 loc_402E77:                             ; CODE XREF: .text:00402E55↑j
.text:00402E77                 nop
.text:00402E78                 nop
.text:00402E79                 nop
.text:00402E7A                 nop
.text:00402E7B                 nop
.text:00402E7C                 nop
.text:00402E7D                 nop
.text:00402E7E                 nop
.text:00402E7F                 nop
.text:00402E80
.text:00402E80 loc_402E80:                             ; DATA XREF: sub_403270+E18↓o
.text:00402E80                 arpl    [ecx+6Eh], sp
.text:00402E83                 outsb
.text:00402E84                 outsd
.text:00402E85                 jz      short loc_402EA7
.text:00402E87
.text:00402E87 loc_402E87:                             ; CODE XREF: .text:00402E66↑j
.text:00402E87                 arpl    [edi+70h], bp
.text:00402E8A                 jns     short loc_402EAC
.text:00402E8C
.text:00402E8C loc_402E8C:                             ; CODE XREF: .text:00402E25↑j
.text:00402E8C                 arpl    [ecx+63h], di
.text:00402E8F                 insb
.text:00402E90                 imul    esp, [ebx+20h], 626D7973h
.text:00402E97                 outsd
.text:00402E98                 insb
.text:00402E99                 imul    esp, [ebx+20h], 6B6E696Ch
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: .text:00402E3B↑j
.text:00402EA0                 and     ds:61630073h, ah
.text:00402EA6                 outsb
.text:00402EA7
.text:00402EA7 loc_402EA7:                             ; CODE XREF: .text:00402E85↑j
.text:00402EA7                 outsb
.text:00402EA8                 outsd
.text:00402EA9                 jz      short near ptr loc_402ECA+1
.text:00402EAB                 insd
.text:00402EAC
.text:00402EAC loc_402EAC:                             ; CODE XREF: .text:00402E8A↑j
.text:00402EAC                 outsd
.text:00402EAD                 jbe     short loc_402F14
.text:00402EAF                 and     ds:6F742073h, ah
.text:00402EB5                 and     ds:0B48D0073h, ah
.text:00402EBB                 add     es:[eax], al
.text:00402EBB ; ---------------------------------------------------------------------------
.text:00402EBE                 dw 0
.text:00402EC0 byte_402EC0     db 69h, 6Eh             ; DATA XREF: sub_403270+FDF↓o
.text:00402EC2 ; ---------------------------------------------------------------------------
.text:00402EC2
.text:00402EC2 loc_402EC2:                             ; CODE XREF: .text:00402E5B↑j
.text:00402EC2                 jz      short loc_402F29
.text:00402EC4                 jb      short near ptr loc_402EF2+1
.text:00402EC6                 db      64h, 65h
.text:00402EC6                 jbe     short loc_402F33
.text:00402ECA
.text:00402ECA loc_402ECA:                             ; CODE XREF: .text:00402EA9↑j
.text:00402ECA                 arpl    [ebp+20h], sp
.text:00402ECD                 insd
.text:00402ECE                 outsd
.text:00402ECF                 jbe     short loc_402F36
.text:00402ED1                 and     [esi+61h], ah
.text:00402ED4                 imul    ebp, [ebp+64h], 7325203Ah
.text:00402EDC                 and     [edi+ebp*2+20h], dh
.text:00402EE0                 and     eax, 75203B73h
.text:00402EE5                 outsb
.text:00402EE6                 popa
.text:00402EE7                 bound   ebp, [ebp+20h]
.text:00402EEB                 jz      short near ptr loc_402F5B+1
.text:00402EED                 and     [edx+65h], dh
.text:00402EF0                 insd
.text:00402EF1                 outsd
.text:00402EF2
.text:00402EF2 loc_402EF2:                             ; CODE XREF: .text:00402EC4↑j
.text:00402EF2                 jbe     short loc_402F59
.text:00402EF4                 and     [ecx+72h], dh
.text:00402EF8                 db      67h, 65h
.text:00402EF8                 jz      $+4
.text:00402EFC
.text:00402EFC loc_402EFC:                             ; CODE XREF: .text:00402EF8↑j
.text:00402EFC                 lea     esi, [esi+0]
.text:00402F00
.text:00402F00 loc_402F00:                             ; DATA XREF: sub_403270+1030↓o
.text:00402F00                 arpl    [ecx+6Eh], sp
.text:00402F03                 outsb
.text:00402F04                 outsd
.text:00402F05                 jz      short near ptr loc_402F26+1
.text:00402F07                 insd
.text:00402F08                 outsd
.text:00402F09                 jbe     short near ptr loc_402F6E+2
.text:00402F0B                 and     ds:6F742073h, ah
.text:00402F11                 and     [ecx+20h], ah
.text:00402F14
.text:00402F14 loc_402F14:                             ; CODE XREF: .text:00402EAD↑j
.text:00402F14                 jnb     short loc_402F8B
.text:00402F16                 bound   esp, [ecx+ebp*2+72h]
.text:00402F1A                 arpl    gs:[edi+ebp*2+72h], si
.text:00402F1F                 jns     short near ptr loc_402F40+1
.text:00402F21                 outsd
.text:00402F22                 db      66h
.text:00402F22                 and     [ecx+74h], ch
.text:00402F26
.text:00402F26 loc_402F26:                             ; CODE XREF: .text:00402F05↑j
.text:00402F26                 jnb     short near ptr loc_402F8B+2
.text:00402F28                 insb
.text:00402F29
.text:00402F29 loc_402F29:                             ; CODE XREF: .text:loc_402EC2↑j
.text:00402F29                 db      66h
.text:00402F29                 sub     al, 20h ; ' '
.text:00402F2C                 and     eax, 90900073h
.text:00402F31                 nop
.text:00402F32                 nop
.text:00402F33
.text:00402F33 loc_402F33:                             ; CODE XREF: .text:00402EC6↑j
.text:00402F33                 nop
.text:00402F34                 nop
.text:00402F35                 nop
.text:00402F36
.text:00402F36 loc_402F36:                             ; CODE XREF: .text:00402ECF↑j
.text:00402F36                 nop
.text:00402F37                 nop
.text:00402F38                 nop
.text:00402F39                 nop
.text:00402F3A                 nop
.text:00402F3B                 nop
.text:00402F3C                 nop
.text:00402F3D                 nop
.text:00402F3E                 nop
.text:00402F3F                 nop
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: .text:00402F1F↑j
.text:00402F40                                         ; DATA XREF: sub_403270+1124↓o
.text:00402F40                 arpl    [ecx+6Eh], sp
.text:00402F43                 outsb
.text:00402F44                 outsd
.text:00402F45                 jz      short near ptr loc_402F66+1
.text:00402F47                 arpl    [edx+65h], si
.text:00402F4A                 popa
.text:00402F4B                 jz      short loc_402FB2
.text:00402F4D                 and     [eax+61h], ch
.text:00402F50                 jb      short loc_402FB6
.text:00402F52                 and     [ecx+ebp*2+6Eh], ch
.text:00402F56                 imul    esp, [eax], 25h ; '%'
.text:00402F59
.text:00402F59 loc_402F59:                             ; CODE XREF: .text:loc_402EF2↑j
.text:00402F59                 jnb     short loc_402F7B
.text:00402F5B
.text:00402F5B loc_402F5B:                             ; CODE XREF: .text:00402EEB↑j
.text:00402F5B                 jz      short loc_402FCC
.text:00402F5D                 and     ds:61630073h, ah
.text:00402F63                 outsb
.text:00402F64                 outsb
.text:00402F65                 outsd
.text:00402F66
.text:00402F66 loc_402F66:                             ; CODE XREF: .text:00402F45↑j
.text:00402F66                 jz      short loc_402F88
.text:00402F68                 jb      short loc_402FCF
.text:00402F6A                 insd
.text:00402F6B                 outsd
.text:00402F6C                 jbe     short near ptr loc_402FD2+1
.text:00402F6E
.text:00402F6E loc_402F6E:                             ; CODE XREF: .text:00402F09↑j
.text:00402F6E                 and     ds:0B48D0073h, ah
.text:00402F74                 add     es:[eax], al
.text:00402F74 ; ---------------------------------------------------------------------------
.text:00402F77                 db 0
.text:00402F78                 db 0, 8Dh, 0BCh
.text:00402F7B ; ---------------------------------------------------------------------------
.text:00402F7B
.text:00402F7B loc_402F7B:                             ; CODE XREF: .text:loc_402F59↑j
.text:00402F7B                 daa
.text:00402F7B ; ---------------------------------------------------------------------------
.text:00402F7C                 dd 0
.text:00402F80 dword_402F80    dd 6E6E6163h, 6320746Fh ; DATA XREF: sub_403270+11B9↓o
.text:00402F88 ; ---------------------------------------------------------------------------
.text:00402F88
.text:00402F88 loc_402F88:                             ; CODE XREF: .text:loc_402F66↑j
.text:00402F88                 outsd
.text:00402F89                 jo      short near ptr loc_403003+1
.text:00402F8B
.text:00402F8B loc_402F8B:                             ; CODE XREF: .text:loc_402F14↑j
.text:00402F8B                                         ; .text:loc_402F26↑j
.text:00402F8B                 and     [ecx+20h], ah
.text:00402F8E                 imul    esi, fs:[edx+65h], 726F7463h
.text:00402F96                 jns     short loc_402FC4
.text:00402F98                 and     ds:69202C73h, ah
.text:00402F9E                 outsb
.text:00402F9F                 jz      short loc_403010
.text:00402FA1                 and     [ecx+74h], ch
.text:00402FA4                 jnb     short near ptr loc_40300A+1
.text:00402FA6                 insb
.text:00402FA7                 db      66h
.text:00402FA7                 sub     al, 20h ; ' '
.text:00402FAA                 and     eax, 90900073h
.text:00402FAF                 nop
.text:00402FB0                 nop
.text:00402FB1                 nop
.text:00402FB2
.text:00402FB2 loc_402FB2:                             ; CODE XREF: .text:00402F4B↑j
.text:00402FB2                 nop
.text:00402FB3                 nop
.text:00402FB4                 nop
.text:00402FB5                 nop
.text:00402FB6
.text:00402FB6 loc_402FB6:                             ; CODE XREF: .text:00402F50↑j
.text:00402FB6                 nop
.text:00402FB7                 nop
.text:00402FB8                 nop
.text:00402FB9                 nop
.text:00402FBA                 nop
.text:00402FBB                 nop
.text:00402FBC                 nop
.text:00402FBD                 nop
.text:00402FBE                 nop
.text:00402FBF                 nop
.text:00402FC0
.text:00402FC0 loc_402FC0:                             ; DATA XREF: sub_403270+121E↓o
.text:00402FC0                 ja      short near ptr loc_40302A+1
.text:00402FC2                 insb
.text:00402FC3                 insb
.text:00402FC4
.text:00402FC4 loc_402FC4:                             ; CODE XREF: .text:00402F96↑j
.text:00402FC4                 and     [esi+6Fh], ch
.text:00402FC7                 jz      short near ptr loc_402FE8+1
.text:00402FC9                 arpl    [edx+65h], si
.text:00402FCC
.text:00402FCC loc_402FCC:                             ; CODE XREF: .text:loc_402F5B↑j
.text:00402FCC                 popa
.text:00402FCD                 jz      short near ptr loc_403030+4
.text:00402FCF
.text:00402FCF loc_402FCF:                             ; CODE XREF: .text:00402F68↑j
.text:00402FCF                 and     [eax+61h], ch
.text:00402FD2
.text:00402FD2 loc_402FD2:                             ; CODE XREF: .text:00402F6C↑j
.text:00402FD2                 jb      short loc_403038
.text:00402FD4                 and     [ecx+ebp*2+6Eh], ch
.text:00402FD8                 imul    esp, [eax], 25h ; '%'
.text:00402FDB                 jnb     short near ptr loc_402FFC+1
.text:00402FDD                 jz      short loc_40304E
.text:00402FDF                 and     [ecx+ebp*2+72h], ah
.text:00402FE3                 arpl    gs:[edi+ebp*2+72h], si
.text:00402FE8
.text:00402FE8 loc_402FE8:                             ; CODE XREF: .text:00402FC7↑j
.text:00402FE8                 jns     short loc_40300A
.text:00402FEA                 and     eax, 28200073h
.text:00402FEF                 bound   esp, [ecx+63h]
.text:00402FF2                 imul    esi, [ebp+70h], 3Ah ; ':'
.text:00402FF6                 and     ds:90002973h, ah
.text:00402FFC
.text:00402FFC loc_402FFC:                             ; CODE XREF: .text:00402FDB↑j
.text:00402FFC                 lea     esi, [esi+0]
.text:00403000
.text:00403000 loc_403000:                             ; DATA XREF: sub_403270+1543↓o
.text:00403000                 bound   esp, [ecx+63h]
.text:00403003
.text:00403003 loc_403003:                             ; CODE XREF: .text:00402F89↑j
.text:00403003                 imul    ebp, [ecx+6Eh], 67h ; 'g'
.text:00403007                 and     [ebp+70h], dh
.text:0040300A
.text:0040300A loc_40300A:                             ; CODE XREF: .text:loc_402FE8↑j
.text:0040300A                                         ; .text:00402FA4↑j
.text:0040300A                 and     ds:6F772073h, ah
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: .text:00402F9F↑j
.text:00403010                 jnz     short near ptr loc_40307D+1
.text:00403012                 and     fs:[ebp+73h], ah
.text:00403017                 jz      short loc_40308B
.text:00403019                 outsd
.text:0040301A                 jns     short near ptr loc_403038+4
.text:0040301C                 jnb     short loc_40308D
.text:0040301E                 jnz     short loc_403092
.text:00403020                 arpl    [ebp+3Bh], sp
.text:00403023                 and     [eax], ah
.text:00403025                 and     eax, 6F6E2073h
.text:0040302A
.text:0040302A loc_40302A:                             ; CODE XREF: .text:loc_402FC0↑j
.text:0040302A                 jz      short loc_40304C
.text:0040302C                 insd
.text:0040302D                 outsd
.text:0040302E                 jbe     short loc_403095
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: .text:00402FCD↑j
.text:00403030                 add     fs:[ebp+26B4h], cl
.text:00403030 ; ---------------------------------------------------------------------------
.text:00403037                 db 0
.text:00403038 ; ---------------------------------------------------------------------------
.text:00403038
.text:00403038 loc_403038:                             ; CODE XREF: .text:loc_402FD2↑j
.text:00403038                                         ; .text:0040301A↑j
.text:00403038                 add     [ebp+27BCh], cl
.text:00403038 ; ---------------------------------------------------------------------------
.text:0040303E                 dw 0
.text:00403040 dword_403040    dd 6B636162h, 20676E69h, 25207075h
.text:00403040                                         ; DATA XREF: sub_403270:loc_404817↓o
.text:0040304C ; ---------------------------------------------------------------------------
.text:0040304C
.text:0040304C loc_40304C:                             ; CODE XREF: .text:loc_40302A↑j
.text:0040304C                 jnb     short near ptr loc_40306C+2
.text:0040304E
.text:0040304E loc_40304E:                             ; CODE XREF: .text:00402FDD↑j
.text:0040304E                 ja      short near ptr loc_4030BE+1
.text:00403050                 jnz     short loc_4030BE
.text:00403052                 and     fs:[ebp+73h], ah
.text:00403057                 jz      short near ptr loc_4030C9+2
.text:00403059                 outsd
.text:0040305A                 jns     short near ptr loc_40307A+2
.text:0040305C                 jnb     short near ptr loc_4030C9+4
.text:0040305E                 jnz     short near ptr loc_4030CF+3
.text:00403060                 arpl    [ebp+3Bh], sp
.text:00403063                 and     [eax], ah
.text:00403065                 and     eax, 6F6E2073h
.text:0040306A                 jz      short loc_40308C
.text:0040306C
.text:0040306C loc_40306C:                             ; CODE XREF: .text:loc_40304C↑j
.text:0040306C                 arpl    [edi+70h], bp
.text:0040306F                 imul    esp, [ebp+64h], 6E616300h
.text:00403076                 outsb
.text:00403077                 outsd
.text:00403078                 jz      short loc_40309A
.text:0040307A
.text:0040307A loc_40307A:                             ; CODE XREF: .text:0040305A↑j
.text:0040307A                 bound   esp, [ecx+63h]
.text:0040307D
.text:0040307D loc_40307D:                             ; CODE XREF: .text:loc_403010↑j
.text:0040307D                 imul    esi, [ebp+70h], 20h ; ' '
.text:00403081                 and     eax, 90900073h
.text:00403086                 nop
.text:00403087                 nop
.text:00403088                 nop
.text:00403089                 nop
.text:0040308A                 nop
.text:0040308B
.text:0040308B loc_40308B:                             ; CODE XREF: .text:00403017↑j
.text:0040308B                 nop
.text:0040308C
.text:0040308C loc_40308C:                             ; CODE XREF: .text:0040306A↑j
.text:0040308C                 nop
.text:0040308D
.text:0040308D loc_40308D:                             ; CODE XREF: .text:0040301C↑j
.text:0040308D                 nop
.text:0040308E                 nop
.text:0040308F                 nop
.text:00403090                 nop
.text:00403091                 nop
.text:00403092
.text:00403092 loc_403092:                             ; CODE XREF: .text:0040301E↑j
.text:00403092                 nop
.text:00403093                 nop
.text:00403094                 nop
.text:00403095
.text:00403095 loc_403095:                             ; CODE XREF: .text:0040302E↑j
.text:00403095                 nop
.text:00403096                 nop
.text:00403097                 nop
.text:00403098                 nop
.text:00403099                 nop
.text:0040309A
.text:0040309A loc_40309A:                             ; CODE XREF: .text:00403078↑j
.text:0040309A                 nop
.text:0040309B                 nop
.text:0040309C                 nop
.text:0040309D                 nop
.text:0040309E                 nop
.text:0040309F                 nop
.text:004030A0
.text:004030A0 loc_4030A0:                             ; DATA XREF: sub_403270+16EF↓o
.text:004030A0                 arpl    [ecx+6Eh], sp
.text:004030A3                 outsb
.text:004030A4                 outsd
.text:004030A5                 jz      short loc_4030C7
.text:004030A7                 insd
.text:004030A8                 outsd
.text:004030A9                 jbe     short near ptr loc_40310D+3
.text:004030AB                 and     [ecx+ebp*2+72h], ah
.text:004030AF                 arpl    gs:[edi+ebp*2+72h], si
.text:004030B4                 jns     short loc_4030D6
.text:004030B6                 outsd
.text:004030B7                 outsb
.text:004030B8                 jz      short near ptr loc_403128+1
.text:004030BA                 and     [esi+6Fh], ch
.text:004030BD                 outsb
.text:004030BE
.text:004030BE loc_4030BE:                             ; CODE XREF: .text:00403050↑j
.text:004030BE                                         ; .text:loc_40304E↑j
.text:004030BE                 sub     eax, 65726964h
.text:004030C3                 arpl    [edi+ebp*2+72h], si
.text:004030C7
.text:004030C7 loc_4030C7:                             ; CODE XREF: .text:004030A5↑j
.text:004030C7                 jns     short near ptr loc_403100+3
.text:004030C9
.text:004030C9 loc_4030C9:                             ; CODE XREF: .text:00403057↑j
.text:004030C9                                         ; .text:0040305C↑j
.text:004030C9                 and     ds:3E2D2073h, ah
.text:004030CF
.text:004030CF loc_4030CF:                             ; CODE XREF: .text:0040305E↑j
.text:004030CF                 and     ds:61630073h, ah
.text:004030D5                 outsb
.text:004030D6
.text:004030D6 loc_4030D6:                             ; CODE XREF: .text:004030B4↑j
.text:004030D6                 outsb
.text:004030D7                 outsd
.text:004030D8                 jz      short loc_4030FA
.text:004030DA                 outsd
.text:004030DB                 jbe     short near ptr loc_403140+2
.text:004030DD                 jb      short near ptr loc_403154+2
.text:004030DF                 jb      short loc_40314A
.text:004030E1                 jz      short loc_403148
.text:004030E3                 and     [ecx+ebp*2+72h], ah
.text:004030E7                 arpl    gs:[edi+ebp*2+72h], si
.text:004030EC                 jns     short near ptr loc_40310D+1
.text:004030EE                 and     eax, 0DEB0073h
.text:004030F3                 nop
.text:004030F4                 nop
.text:004030F5                 nop
.text:004030F6                 nop
.text:004030F7                 nop
.text:004030F8                 nop
.text:004030F9                 nop
.text:004030FA
.text:004030FA loc_4030FA:                             ; CODE XREF: .text:004030D8↑j
.text:004030FA                 nop
.text:004030FB                 nop
.text:004030FC                 nop
.text:004030FD                 nop
.text:004030FE                 nop
.text:004030FF                 nop
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: .text:loc_4030C7↑j
.text:00403100                                         ; DATA XREF: sub_403270+17B6↓o ...
.text:00403100                 and     eax, 6F203A73h
.text:00403105                 jbe     short near ptr loc_40316B+1
.text:00403107                 jb      short loc_403180
.text:00403109                 jb      short loc_403174
.text:0040310B                 jz      short near ptr loc_403171+1
.text:0040310D
.text:0040310D loc_40310D:                             ; CODE XREF: .text:004030EC↑j
.text:0040310D                                         ; .text:004030A9↑j
.text:0040310D                 and     ds:6F202C73h, ah
.text:00403113                 jbe     short loc_40317A
.text:00403115                 jb      short loc_403189
.text:00403117                 imul    esp, [ecx+ebp*2+6Eh], 6F6D2067h
.text:0040311F                 db      64h
.text:0040311F                 and     gs:6F6C3430h, ah
.text:00403127                 aas
.text:00403128
.text:00403128 loc_403128:                             ; CODE XREF: .text:004030B8↑j
.text:00403128                 and     [eax], al
.text:0040312A
.text:0040312A loc_40312A:                             ; DATA XREF: sub_403270+1815↓o
.text:0040312A                                         ; sub_403270+193F↓o
.text:0040312A                 and     eax, 6F203A73h
.text:0040312F                 jbe     short near ptr loc_403195+1
.text:00403131                 jb      short near ptr loc_4031A7+3
.text:00403133                 jb      short loc_40319E
.text:00403135                 jz      short loc_40319C
.text:00403137                 and     ds:203F73h, ah
.text:0040313D                 lea     esi, [esi+0]
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: .text:004030DB↑j
.text:00403140                                         ; DATA XREF: sub_403270+197E↓o
.text:00403140                 arpl    [ecx+6Eh], sp
.text:00403143                 outsb
.text:00403144                 outsd
.text:00403145                 jz      short near ptr loc_403166+1
.text:00403147                 outsd
.text:00403148
.text:00403148 loc_403148:                             ; CODE XREF: .text:004030E1↑j
.text:00403148                 jbe     short loc_4031AF
.text:0040314A
.text:0040314A loc_40314A:                             ; CODE XREF: .text:004030DF↑j
.text:0040314A                 jb      short loc_4031C3
.text:0040314C                 jb      short loc_4031B7
.text:0040314E                 jz      short loc_4031B5
.text:00403150                 and     [ecx+ebp*2+72h], ah
.text:00403154
.text:00403154 loc_403154:                             ; CODE XREF: .text:004030DD↑j
.text:00403154                 arpl    gs:[edi+ebp*2+72h], si
.text:00403159                 jns     short loc_40317B
.text:0040315B                 and     eax, 69772073h
.text:00403160                 jz      short loc_4031CA
.text:00403162                 and     [esi+6Fh], ch
.text:00403165                 outsb
.text:00403166
.text:00403166 loc_403166:                             ; CODE XREF: .text:00403145↑j
.text:00403166                 sub     eax, 65726964h
.text:0040316B
.text:0040316B loc_40316B:                             ; CODE XREF: .text:00403105↑j
.text:0040316B                 arpl    [edi+ebp*2+72h], si
.text:0040316F                 jns     short $+2
.text:00403171
.text:00403171 loc_403171:                             ; CODE XREF: .text:0040316F↑j
.text:00403171                                         ; .text:0040310B↑j
.text:00403171                 jmp     short loc_403180
.text:00403171 ; ---------------------------------------------------------------------------
.text:00403173                 align 4
.text:00403174
.text:00403174 loc_403174:                             ; CODE XREF: .text:00403109↑j
.text:00403174                 nop
.text:00403175                 nop
.text:00403176                 nop
.text:00403177                 nop
.text:00403178                 nop
.text:00403179                 nop
.text:0040317A
.text:0040317A loc_40317A:                             ; CODE XREF: .text:00403113↑j
.text:0040317A                 nop
.text:0040317B
.text:0040317B loc_40317B:                             ; CODE XREF: .text:00403159↑j
.text:0040317B                 nop
.text:0040317C                 nop
.text:0040317D                 nop
.text:0040317E                 nop
.text:0040317F                 nop
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: .text:00403107↑j
.text:00403180                                         ; .text:loc_403171↑j
.text:00403180                                         ; DATA XREF: ...
.text:00403180                 ja      short near ptr loc_4031EA+1
.text:00403182                 insb
.text:00403183                 insb
.text:00403184                 and     [esi+6Fh], ch
.text:00403187                 jz      short near ptr loc_4031A7+2
.text:00403189
.text:00403189 loc_403189:                             ; CODE XREF: .text:00403115↑j
.text:00403189                 outsd
.text:0040318A                 jbe     short loc_4031F1
.text:0040318C                 jb      short loc_403205
.text:0040318E                 jb      short loc_4031F9
.text:00403190                 jz      short near ptr loc_4031F6+1
.text:00403192                 and     [edx+75h], ch
.text:00403195
.text:00403195 loc_403195:                             ; CODE XREF: .text:0040312F↑j
.text:00403195                 jnb     short near ptr loc_403209+2
.text:00403197                 sub     eax, 61657263h
.text:0040319C
.text:0040319C loc_40319C:                             ; CODE XREF: .text:00403135↑j
.text:0040319C                 jz      short near ptr loc_403200+3
.text:0040319E
.text:0040319E loc_40319E:                             ; CODE XREF: .text:00403133↑j
.text:0040319E                 and     fs:69772073h, ah
.text:004031A5                 jz      short near ptr loc_40320E+1
.text:004031A7
.text:004031A7 loc_4031A7:                             ; CODE XREF: .text:00403187↑j
.text:004031A7                                         ; .text:00403131↑j
.text:004031A7                 and     ds:90900073h, ah
.text:004031AD                 nop
.text:004031AE                 nop
.text:004031AF
.text:004031AF loc_4031AF:                             ; CODE XREF: .text:loc_403148↑j
.text:004031AF                 nop
.text:004031B0                 nop
.text:004031B1                 nop
.text:004031B2                 nop
.text:004031B3                 nop
.text:004031B4                 nop
.text:004031B5
.text:004031B5 loc_4031B5:                             ; CODE XREF: .text:0040314E↑j
.text:004031B5                 nop
.text:004031B6                 nop
.text:004031B7
.text:004031B7 loc_4031B7:                             ; CODE XREF: .text:0040314C↑j
.text:004031B7                 nop
.text:004031B8                 nop
.text:004031B9                 nop
.text:004031BA                 nop
.text:004031BB                 nop
.text:004031BC                 nop
.text:004031BD                 nop
.text:004031BE                 nop
.text:004031BF                 nop
.text:004031C0
.text:004031C0 loc_4031C0:                             ; DATA XREF: sub_403270+19E6↓o
.text:004031C0                 arpl    [ecx+6Eh], sp
.text:004031C3
.text:004031C3 loc_4031C3:                             ; CODE XREF: .text:loc_40314A↑j
.text:004031C3                 outsb
.text:004031C4                 outsd
.text:004031C5                 jz      short near ptr loc_4031E6+1
.text:004031C7                 outsd
.text:004031C8                 jbe     short near ptr loc_40322D+2
.text:004031CA
.text:004031CA loc_4031CA:                             ; CODE XREF: .text:00403160↑j
.text:004031CA                 jb      short near ptr loc_40323E+5
.text:004031CC                 jb      short loc_403237
.text:004031CE                 jz      short near ptr loc_403230+5
.text:004031D0                 and     [esi+6Fh], ch
.text:004031D3                 outsb
.text:004031D4                 sub     eax, 65726964h
.text:004031D9                 arpl    [edi+ebp*2+72h], si
.text:004031DD                 jns     short near ptr loc_4031F9+6
.text:004031DF                 and     eax, 69772073h
.text:004031E4                 jz      short loc_40324E
.text:004031E6
.text:004031E6 loc_4031E6:                             ; CODE XREF: .text:004031C5↑j
.text:004031E6                 and     [ecx+ebp*2+72h], ah
.text:004031EA
.text:004031EA loc_4031EA:                             ; CODE XREF: .text:loc_403180↑j
.text:004031EA                 arpl    gs:[edi+ebp*2+72h], si
.text:004031EF                 jns     short near ptr loc_40320E+3
.text:004031F1
.text:004031F1 loc_4031F1:                             ; CODE XREF: .text:0040318A↑j
.text:004031F1                 and     eax, 73250073h
.text:004031F6
.text:004031F6 loc_4031F6:                             ; CODE XREF: .text:00403190↑j
.text:004031F6                 and     [ecx+6Eh], ah
.text:004031F9
.text:004031F9 loc_4031F9:                             ; CODE XREF: .text:0040318E↑j
.text:004031F9                                         ; .text:004031DD↑j
.text:004031F9                 and     fs:72612073h, ah
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: .text:loc_40319C↑j
.text:00403200                 and     gs:[eax+ebp*2+65h], dh
.text:00403205
.text:00403205 loc_403205:                             ; CODE XREF: .text:0040318C↑j
.text:00403205                 and     [ebx+61h], dh
.text:00403208                 insd
.text:00403209
.text:00403209 loc_403209:                             ; CODE XREF: .text:loc_403195↑j
.text:00403209                 and     gs:[esi+69h], ah
.text:0040320D                 insb
.text:0040320E
.text:0040320E loc_40320E:                             ; CODE XREF: .text:004031A5↑j
.text:0040320E                                         ; .text:004031EF↑j
.text:0040320E                 add     gs:[eax-6F6F6F70h], dl
.text:00403215                 nop
.text:00403216                 nop
.text:00403217                 nop
.text:00403218                 nop
.text:00403219                 nop
.text:0040321A                 nop
.text:0040321B                 nop
.text:0040321C                 nop
.text:0040321D                 nop
.text:0040321E                 nop
.text:0040321F                 nop
.text:00403220
.text:00403220 ; =============== S U B R O U T I N E =======================================
.text:00403220
.text:00403220
.text:00403220 sub_403220      proc near               ; DATA XREF: sub_403270+1A72↓o
.text:00403220
.text:00403220 arg_65          = dword ptr  69h
.text:00403220
.text:00403220                 ja      short loc_403283
.text:00403222                 jb      short near ptr loc_403290+2
.text:00403224                 imul    ebp, [esi+67h], 6F73203Ah
.text:0040322B                 jnz     short loc_40329F
.text:0040322D
.text:0040322D loc_40322D:                             ; CODE XREF: .text:004031C8↑j
.text:0040322D                 arpl    [ebp+20h], sp
.text:00403230
.text:00403230 loc_403230:                             ; CODE XREF: .text:004031CE↑j
.text:00403230                 imul    bp, [ebp+20h], 7325h
.text:00403237
.text:00403237 loc_403237:                             ; CODE XREF: .text:004031CC↑j
.text:00403237                 and     [ebx+70h], dh
.text:0040323A                 arpl    gs:[ecx+66h], bp
.text:0040323E
.text:0040323E loc_40323E:                             ; CODE XREF: .text:loc_4031CA↑j
.text:0040323E                 imul    esp, [ebp+64h], 726F6D20h
.text:00403245                 and     gs:[eax+ebp*2+61h], dh
.text:0040324A                 outsb
.text:0040324B                 and     [edi+6Eh], ch
.text:0040324E
.text:0040324E loc_40324E:                             ; CODE XREF: .text:004031E4↑j
.text:0040324E                 arpl    [ebp+0], sp
.text:00403251
.text:00403251 loc_403251:                             ; DATA XREF: sub_403270+1ABA↓o
.text:00403251                 outsd
.text:00403252                 insd
.text:00403253                 imul    esi, [esp+esi*2+arg_65], 6420676Eh
.text:0040325B                 imul    esi, [edx+65h], 726F7463h
.text:00403262                 jns     short near ptr loc_403283+1
.text:00403264                 and     eax, 0F6890073h
.text:00403269                 lea     edi, [edi+0]
.text:00403269 sub_403220      endp
.text:00403269
.text:00403270
.text:00403270 ; =============== S U B R O U T I N E =======================================
.text:00403270
.text:00403270 ; Attributes: bp-based frame
.text:00403270
.text:00403270 ; int __cdecl sub_403270(char *Str2, char *FileName, int, int, int, int, int, char, int, int)
.text:00403270 sub_403270      proc near               ; CODE XREF: sub_404E90+84↓p
.text:00403270                                         ; sub_404F90+EF↓p
.text:00403270
.text:00403270 Format          = dword ptr -298h
.text:00403270 AccessMode      = dword ptr -294h
.text:00403270 Size            = dword ptr -290h
.text:00403270 var_28C         = byte ptr -28Ch
.text:00403270 var_288         = dword ptr -288h
.text:00403270 var_284         = dword ptr -284h
.text:00403270 var_280         = dword ptr -280h
.text:00403270 var_27C         = byte ptr -27Ch
.text:00403270 var_278         = dword ptr -278h
.text:00403270 var_274         = dword ptr -274h
.text:00403270 var_269         = byte ptr -269h
.text:00403270 var_268         = dword ptr -268h
.text:00403270 var_261         = byte ptr -261h
.text:00403270 Block           = dword ptr -260h
.text:00403270 var_25C         = byte ptr -25Ch
.text:00403270 var_255         = byte ptr -255h
.text:00403270 var_254         = byte ptr -254h
.text:00403270 var_253         = byte ptr -253h
.text:00403270 var_252         = byte ptr -252h
.text:00403270 var_251         = byte ptr -251h
.text:00403270 lpFileName      = dword ptr -250h
.text:00403270 lpExistingFileName= dword ptr -24Ch
.text:00403270 var_248         = dword ptr -248h
.text:00403270 var_241         = byte ptr -241h
.text:00403270 var_240         = dword ptr -240h
.text:00403270 var_23C         = dword ptr -23Ch
.text:00403270 var_238         = dword ptr -238h
.text:00403270 var_234         = dword ptr -234h
.text:00403270 var_22B         = dword ptr -22Bh
.text:00403270 var_224         = dword ptr -224h
.text:00403270 var_220         = dword ptr -220h
.text:00403270 var_21C         = dword ptr -21Ch
.text:00403270 var_218         = dword ptr -218h
.text:00403270 var_210         = dword ptr -210h
.text:00403270 var_20C         = dword ptr -20Ch
.text:00403270 var_208         = dword ptr -208h
.text:00403270 var_204         = dword ptr -204h
.text:00403270 var_1A8         = dword ptr -1A8h
.text:00403270 var_1A0         = dword ptr -1A0h
.text:00403270 var_19C         = dword ptr -19Ch
.text:00403270 var_198         = dword ptr -198h
.text:00403270 var_194         = dword ptr -194h
.text:00403270 var_138         = dword ptr -138h
.text:00403270 var_130         = dword ptr -130h
.text:00403270 var_12C         = dword ptr -12Ch
.text:00403270 var_128         = dword ptr -128h
.text:00403270 var_124         = dword ptr -124h
.text:00403270 var_118         = dword ptr -118h
.text:00403270 var_110         = dword ptr -110h
.text:00403270 var_10C         = dword ptr -10Ch
.text:00403270 var_108         = dword ptr -108h
.text:00403270 var_104         = dword ptr -104h
.text:00403270 var_F8          = dword ptr -0F8h
.text:00403270 var_F0          = dword ptr -0F0h
.text:00403270 var_EC          = dword ptr -0ECh
.text:00403270 var_E8          = dword ptr -0E8h
.text:00403270 var_E4          = dword ptr -0E4h
.text:00403270 var_E0          = dword ptr -0E0h
.text:00403270 var_DC          = dword ptr -0DCh
.text:00403270 var_D8          = dword ptr -0D8h
.text:00403270 var_C8          = dword ptr -0C8h
.text:00403270 var_C4          = dword ptr -0C4h
.text:00403270 var_88          = dword ptr -88h
.text:00403270 var_80          = dword ptr -80h
.text:00403270 var_7C          = dword ptr -7Ch
.text:00403270 var_78          = dword ptr -78h
.text:00403270 var_74          = dword ptr -74h
.text:00403270 var_70          = dword ptr -70h
.text:00403270 var_6C          = dword ptr -6Ch
.text:00403270 var_68          = dword ptr -68h
.text:00403270 var_60          = dword ptr -60h
.text:00403270 var_5C          = dword ptr -5Ch
.text:00403270 var_58          = dword ptr -58h
.text:00403270 var_50          = dword ptr -50h
.text:00403270 var_4C          = dword ptr -4Ch
.text:00403270 var_48          = dword ptr -48h
.text:00403270 var_44          = dword ptr -44h
.text:00403270 Str2            = dword ptr  8
.text:00403270 FileName        = dword ptr  0Ch
.text:00403270 arg_8           = dword ptr  10h
.text:00403270 arg_C           = dword ptr  14h
.text:00403270 arg_10          = dword ptr  18h
.text:00403270 arg_14          = dword ptr  1Ch
.text:00403270 arg_18          = dword ptr  20h
.text:00403270 arg_1C          = byte ptr  24h
.text:00403270 arg_20          = dword ptr  28h
.text:00403270 arg_24          = dword ptr  2Ch
.text:00403270
.text:00403270                 push    ebp
.text:00403271                 xor     ecx, ecx
.text:00403273                 mov     ebp, esp
.text:00403275                 push    edi
.text:00403276                 xor     edx, edx
.text:00403278                 push    esi
.text:00403279                 push    ebx
.text:0040327A                 sub     esp, 28Ch
.text:00403280                 mov     ebx, [ebp+arg_8]
.text:00403283
.text:00403283 loc_403283:                             ; CODE XREF: sub_403220↑j
.text:00403283                                         ; sub_403220+42↑j
.text:00403283                 movzx   eax, [ebp+arg_1C]
.text:00403287                 mov     [ebp+lpExistingFileName], ecx
.text:0040328D                 mov     edi, [ebp+arg_C]
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_403220+2↑j
.text:00403290                 mov     [ebp+lpFileName], edx
.text:00403296                 mov     esi, [ebp+arg_10]
.text:00403299                 mov     byte ptr [ebp+var_22B], bl
.text:0040329F
.text:0040329F loc_40329F:                             ; CODE XREF: sub_403220+B↑j
.text:0040329F                 mov     [ebp+var_241], al
.text:004032A5                 mov     eax, [ebp+arg_18]
.text:004032A8                 mov     [ebp+var_240], edi
.text:004032AE                 mov     edi, [ebp+arg_24]
.text:004032B1                 cmp     byte ptr [eax+14h], 0
.text:004032B5                 mov     [ebp+var_23C], esi
.text:004032BB                 mov     [ebp+var_251], 0
.text:004032C2                 mov     [ebp+var_253], 0
.text:004032C9                 mov     [ebp+var_254], 0
.text:004032D0                 jz      short loc_4032D9
.text:004032D2                 test    edi, edi
.text:004032D4                 jz      short loc_4032D9
.text:004032D6                 mov     byte ptr [edi], 0
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_403270+60↑j
.text:004032D9                                         ; sub_403270+64↑j
.text:004032D9                 mov     ecx, [ebp+arg_18]
.text:004032DC                 mov     edx, [ebp+arg_20]
.text:004032DF                 cmp     dword ptr [ecx+8], 2
.text:004032E3                 mov     byte ptr [edx], 0
.text:004032E6                 jz      loc_404D36
.text:004032EC                 mov     esi, [ebp+Str2]
.text:004032EF                 lea     ecx, [ebp+var_88]
.text:004032F5                 mov     [esp+298h+AccessMode], ecx ; int
.text:004032F9                 mov     [esp+298h+Format], esi ; char *
.text:004032FC                 call    sub_419540
.text:00403301
.text:00403301 loc_403301:                             ; CODE XREF: sub_403270+1ADB↓j
.text:00403301                 test    eax, eax
.text:00403303                 jz      short loc_403350
.text:00403305                 mov     edi, [ebp+Str2]
.text:00403308
.text:00403308 loc_403308:                             ; CODE XREF: sub_403270+1DF↓j
.text:00403308                 mov     [esp+298h+Format], edi ; char *
.text:0040330B                 call    sub_40BBD0
.text:00403310                 mov     [esp+298h+Format], offset loc_402C80
.text:00403317
.text:00403317 loc_403317:                             ; CODE XREF: sub_403270+761↓j
.text:00403317                                         ; sub_403270+1629↓j ...
.text:00403317                 mov     esi, eax
.text:00403319                 call    ds:libintl_gettext
.text:0040331F                 mov     edi, eax
.text:00403321                 call    _errno
.text:00403326                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:0040332A                 mov     [esp+298h+Size], edi ; char *
.text:0040332E                 mov     ebx, [eax]
.text:00403330                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:00403334
.text:00403334 loc_403334:                             ; CODE XREF: sub_403270+174D↓j
.text:00403334                 mov     [esp+298h+Format], 0 ; Code
.text:0040333B                 call    sub_415D50
.text:00403340
.text:00403340 loc_403340:                             ; CODE XREF: sub_403270+4F3↓j
.text:00403340                                         ; sub_403270+574↓j ...
.text:00403340                 xor     ebx, ebx
.text:00403342
.text:00403342 loc_403342:                             ; CODE XREF: sub_403270+3C0↓j
.text:00403342                                         ; sub_403270+480↓j ...
.text:00403342                 lea     esp, [ebp-0Ch]
.text:00403345                 mov     eax, ebx
.text:00403347                 pop     ebx
.text:00403348                 pop     esi
.text:00403349                 pop     edi
.text:0040334A                 pop     ebp
.text:0040334B                 retn
.text:0040334B ; ---------------------------------------------------------------------------
.text:0040334C                 align 10h
.text:00403350
.text:00403350 loc_403350:                             ; CODE XREF: sub_403270+93↑j
.text:00403350                 movzx   eax, word ptr [ebp+var_88]
.text:00403357                 mov     ebx, eax
.text:00403359                 and     ebx, 0F000h
.text:0040335F                 mov     [ebp+var_248], eax
.text:00403365                 cmp     ebx, 4000h
.text:0040336B                 jz      loc_404D12
.text:00403371
.text:00403371 loc_403371:                             ; CODE XREF: sub_403270+1AA9↓j
.text:00403371                 cmp     [ebp+var_241], 0
.text:00403378                 jz      loc_40340F
.text:0040337E                 mov     ecx, [ebp+var_88]
.text:00403384                 and     ecx, 0F000h
.text:0040338A                 cmp     ecx, 4000h
.text:00403390                 jz      short loc_4033F0
.text:00403392                 mov     edx, [ebp+arg_18]
.text:00403395                 mov     ebx, [edx]
.text:00403397                 test    ebx, ebx
.text:00403399                 jnz     short loc_4033F0
.text:0040339B                 mov     ecx, [edx+38h]
.text:0040339E                 test    ecx, ecx
.text:004033A0                 jz      short loc_4033F0
.text:004033A2                 mov     [esp+298h+Format], ecx
.text:004033A5                 mov     ebx, [ebp+Str2]
.text:004033A8                 mov     esi, [ebp+var_7C]
.text:004033AB                 mov     edx, [ebp+var_80]
.text:004033AE                 mov     [ebp+var_118], ebx
.text:004033B4                 mov     ebx, [ebp+var_78]
.text:004033B7                 mov     [ebp+var_10C], esi
.text:004033BD                 mov     esi, [ebp+var_74]
.text:004033C0                 mov     [ebp+var_110], edx
.text:004033C6                 lea     edx, [ebp+var_118]
.text:004033CC                 mov     [ebp+var_108], ebx
.text:004033D2                 mov     [ebp+var_104], esi
.text:004033D8                 mov     [esp+298h+AccessMode], edx
.text:004033DC                 call    sub_40CA70
.text:004033E1                 test    eax, eax
.text:004033E3                 jnz     loc_404CD7
.text:004033E9                 lea     esi, [esi+0]
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: sub_403270+120↑j
.text:004033F0                                         ; sub_403270+129↑j ...
.text:004033F0                 mov     edx, [ebp+Str2]
.text:004033F3                 lea     ebx, [ebp+var_88]
.text:004033F9                 mov     esi, [ebp+arg_18]
.text:004033FC                 mov     [esp+298h+Size], ebx ; int
.text:00403400                 mov     [esp+298h+AccessMode], edx ; char *
.text:00403404                 mov     ecx, [esi+38h]
.text:00403407                 mov     [esp+298h+Format], ecx ; int
.text:0040340A                 call    sub_405E30
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_403270+108↑j
.text:0040340F                 cmp     byte ptr [ebp+var_22B], 0
.text:00403416                 jnz     short loc_403460
.text:00403418                 mov     eax, [ebp+arg_18]
.text:0040341B                 cmp     dword ptr [eax+8], 2
.text:0040341F                 jz      loc_404CBD
.text:00403425                 mov     edx, [ebp+FileName]
.text:00403428                 lea     ebx, [ebp+var_F8]
.text:0040342E                 mov     [esp+298h+AccessMode], ebx ; int
.text:00403432                 mov     [esp+298h+Format], edx ; char *
.text:00403435                 call    sub_419540
.text:0040343A
.text:0040343A loc_40343A:                             ; CODE XREF: sub_403270+1A62↓j
.text:0040343A                 test    eax, eax
.text:0040343C                 jz      loc_404532
.text:00403442                 call    _errno
.text:00403447                 cmp     dword ptr [eax], 2
.text:0040344A                 jz      short loc_403454
.text:0040344C                 mov     edi, [ebp+FileName]
.text:0040344F                 jmp     loc_403308
.text:00403454 ; ---------------------------------------------------------------------------
.text:00403454
.text:00403454 loc_403454:                             ; CODE XREF: sub_403270+1DA↑j
.text:00403454                                         ; sub_403270+1608↓j ...
.text:00403454                 mov     byte ptr [ebp+var_22B], 1
.text:0040345B                 nop
.text:0040345C                 lea     esi, [esi+0]
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_403270+1A6↑j
.text:00403460                                         ; sub_403270+164C↓j ...
.text:00403460                 mov     ecx, [ebp+arg_18]
.text:00403463                 cmp     byte ptr [ecx+31h], 0
.text:00403467                 jz      loc_4034F0
.text:0040346D                 mov     edx, [ebp+var_248]
.text:00403473                 and     edx, 0F000h
.text:00403479                 cmp     edx, 4000h
.text:0040347F                 jz      short loc_4034F0
.text:00403481                 mov     [esp+298h+Format], 1 ; int
.text:00403488                 mov     eax, [ebp+FileName]
.text:0040348B                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040348F                 call    sub_40BBA0
.text:00403494                 mov     [esp+298h+Format], 0 ; int
.text:0040349B                 mov     ebx, [ebp+Str2]
.text:0040349E                 mov     esi, eax
.text:004034A0                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004034A4                 call    sub_40BBA0
.text:004034A9                 mov     [esp+298h+AccessMode], eax
.text:004034AD                 mov     [esp+298h+Size], esi
.text:004034B1                 mov     [esp+298h+Format], (offset loc_402C8C+3) ; Format
.text:004034B8                 call    printf
.text:004034BD                 cmp     [ebp+var_251], 0
.text:004034C4                 jnz     loc_404504
.text:004034CA
.text:004034CA loc_4034CA:                             ; CODE XREF: sub_403270+12BD↓j
.text:004034CA                 mov     edx, ds:_iob
.text:004034D0                 mov     ebx, [edx+24h]
.text:004034D3                 dec     ebx
.text:004034D4                 mov     [edx+24h], ebx
.text:004034D7                 test    ebx, ebx
.text:004034D9                 js      loc_4044E6
.text:004034DF                 mov     esi, ds:_iob
.text:004034E5                 mov     eax, [esi+20h]
.text:004034E8                 mov     byte ptr [eax], 0Ah
.text:004034EB                 inc     dword ptr [esi+20h]
.text:004034EE                 mov     esi, esi
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403270+1F7↑j
.text:004034F0                                         ; sub_403270+20F↑j ...
.text:004034F0                 mov     ebx, [ebp+arg_18]
.text:004034F3                 cmp     byte ptr [ebx+14h], 0
.text:004034F7                 jz      short loc_403503
.text:004034F9                 cmp     [ebp+var_70], 1
.text:004034FD                 jz      loc_4044C1
.text:00403503
.text:00403503 loc_403503:                             ; CODE XREF: sub_403270+287↑j
.text:00403503                 mov     eax, [ebp+arg_18]
.text:00403506                 cmp     byte ptr [eax+20h], 0
.text:0040350A                 jz      short loc_403540
.text:0040350C                 cmp     [ebp+var_70], 1
.text:00403510                 ja      loc_4042E0
.text:00403516                 cmp     [ebp+var_241], 0
.text:0040351D                 jz      loc_4044B6
.text:00403523                 mov     eax, [eax+8]
.text:00403526                 cmp     eax, 3
.text:00403529                 jz      loc_4042E0
.text:0040352F
.text:0040352F loc_40352F:                             ; CODE XREF: sub_403270+124C↓j
.text:0040352F                 cmp     eax, 4
.text:00403532                 jz      loc_4042E0
.text:00403538                 nop
.text:00403539                 lea     esi, [esi+0]
.text:00403540
.text:00403540 loc_403540:                             ; CODE XREF: sub_403270+29A↑j
.text:00403540                 mov     ecx, [ebp+arg_18]
.text:00403543                 cmp     byte ptr [ecx+22h], 0
.text:00403547                 jz      short loc_403561
.text:00403549                 mov     ebx, [ebp+var_248]
.text:0040354F                 and     ebx, 0F000h
.text:00403555                 cmp     ebx, 4000h
.text:0040355B                 jz      loc_4042E0
.text:00403561
.text:00403561 loc_403561:                             ; CODE XREF: sub_403270+2D7↑j
.text:00403561                                         ; sub_403270+10A5↓j
.text:00403561                 mov     ebx, [ebp+arg_18]
.text:00403564                 cmp     byte ptr [ebx+14h], 0
.text:00403568                 jnz     loc_404094
.text:0040356E
.text:0040356E loc_40356E:                             ; CODE XREF: sub_403270+FA8↓j
.text:0040356E                 mov     [ebp+var_252], 1
.text:00403575                 mov     eax, [ebp+var_248]
.text:0040357B                 mov     [ebp+var_255], 1
.text:00403582                 and     eax, 0F000h
.text:00403587                 cmp     eax, 4000h
.text:0040358C                 jz      loc_403EB0
.text:00403592                 mov     esi, [ebp+arg_18]
.text:00403595                 cmp     byte ptr [esi+2Ch], 0
.text:00403599                 jz      loc_403AC5
.text:0040359F                 mov     [ebp+var_255], 0
.text:004035A6                 mov     edx, [ebp+Str2]
.text:004035A9                 cmp     byte ptr [edx], 2Fh ; '/'
.text:004035AC                 jz      short loc_4035FD
.text:004035AE                 mov     edi, [ebp+FileName]
.text:004035B1                 mov     esi, 402C98h
.text:004035B6                 mov     [esp+298h+Format], edi ; void *
.text:004035B9                 call    sub_40BEA0
.text:004035BE                 mov     [ebp+Block], eax
.text:004035C4                 mov     edi, eax
.text:004035C6                 mov     ecx, 2
.text:004035CB                 mov     [ebp+var_261], 0
.text:004035D2                 cld
.text:004035D3                 repe cmpsb
.text:004035D5                 jnz     loc_403A36
.text:004035DB
.text:004035DB loc_4035DB:                             ; CODE XREF: sub_403270+7DE↓j
.text:004035DB                                         ; sub_403270+7FE↓j ...
.text:004035DB                 mov     [ebp+var_261], 1
.text:004035E2
.text:004035E2 loc_4035E2:                             ; CODE XREF: sub_403270+824↓j
.text:004035E2                                         ; sub_403270+84A↓j
.text:004035E2                 mov     ebx, [ebp+Block]
.text:004035E8                 mov     [esp+298h+Format], ebx ; Block
.text:004035EB                 call    free
.text:004035F0                 cmp     [ebp+var_261], 0
.text:004035F7                 jz      loc_4039FB
.text:004035FD
.text:004035FD loc_4035FD:                             ; CODE XREF: sub_403270+33C↑j
.text:004035FD                 mov     esi, [ebp+FileName]
.text:00403600                 mov     eax, [ebp+Str2]
.text:00403603                 mov     [esp+298h+AccessMode], esi ; char *
.text:00403607                 mov     [esp+298h+Format], eax ; String
.text:0040360A                 call    sub_419FB0
.text:0040360F                 test    eax, eax
.text:00403611                 jnz     loc_4038D2
.text:00403617
.text:00403617 loc_403617:                             ; CODE XREF: sub_403270+8D8↓j
.text:00403617                                         ; sub_403270+9A3↓j ...
.text:00403617                 cmp     [ebp+var_241], 0
.text:0040361E                 jnz     loc_4038B0
.text:00403624
.text:00403624 loc_403624:                             ; CODE XREF: sub_403270+65D↓j
.text:00403624                 cmp     [ebp+var_255], 0
.text:0040362B                 mov     ebx, 1
.text:00403630                 jz      loc_403342
.text:00403636                 mov     ecx, [ebp+arg_18]
.text:00403639                 cmp     byte ptr [ecx+1Fh], 0
.text:0040363D                 jnz     loc_40381E
.text:00403643
.text:00403643 loc_403643:                             ; CODE XREF: sub_403270+5E9↓j
.text:00403643                                         ; sub_403270+637↓j
.text:00403643                 mov     esi, [ebp+arg_18]
.text:00403646                 cmp     byte ptr [esi+1Dh], 0
.text:0040364A                 jz      short loc_40368F
.text:0040364C                 movzx   eax, byte ptr [ebp+var_22B]
.text:00403653                 test    al, al
.text:00403655                 jnz     loc_403813
.text:0040365B                 mov     ecx, [ebp+var_6C]
.text:0040365E                 cmp     ecx, [ebp+var_DC]
.text:00403664                 jz      loc_4037FF
.text:0040366A                 mov     edx, [ebp+var_68]
.text:0040366D
.text:0040366D loc_40366D:                             ; CODE XREF: sub_403270+598↓j
.text:0040366D                                         ; sub_403270+5A9↓j
.text:0040366D                 mov     [esp+298h+Size], edx ; int
.text:00403671                 mov     edx, [ebp+FileName]
.text:00403674                 mov     [ebp+var_254], 1
.text:0040367B                 mov     [esp+298h+AccessMode], ecx ; int
.text:0040367F                 mov     [esp+298h+Format], edx ; char *
.text:00403682                 call    sub_409360
.text:00403687                 test    eax, eax
.text:00403689                 jnz     loc_40378E
.text:0040368F
.text:0040368F loc_40368F:                             ; CODE XREF: sub_403270+3DA↑j
.text:0040368F                                         ; sub_403270+57A↓j ...
.text:0040368F                 movzx   eax, byte ptr [ebp+var_22B]
.text:00403696
.text:00403696 loc_403696:                             ; CODE XREF: sub_403270+59E↓j
.text:00403696                 test    al, al
.text:00403698                 jz      short loc_4036B8
.text:0040369A                 cmp     [ebp+var_253], 0
.text:004036A1                 jz      short loc_4036B8
.text:004036A3                 cmp     [ebp+var_254], 0
.text:004036AA                 jz      short loc_4036E9
.text:004036AC                 test    [ebp+var_248], 0FE00h
.text:004036B6                 jz      short loc_4036E9
.text:004036B8
.text:004036B8 loc_4036B8:                             ; CODE XREF: sub_403270+428↑j
.text:004036B8                                         ; sub_403270+431↑j
.text:004036B8                 mov     esi, [ebp+arg_18]
.text:004036BB                 movzx   ecx, byte ptr [esi+1Eh]
.text:004036BF                 test    cl, cl
.text:004036C1                 jnz     short loc_4036C7
.text:004036C3                 test    al, al
.text:004036C5                 jz      short loc_4036E9
.text:004036C7
.text:004036C7 loc_4036C7:                             ; CODE XREF: sub_403270+451↑j
.text:004036C7                 mov     edx, [ebp+arg_18]
.text:004036CA                 cmp     byte ptr [edx+4], 0
.text:004036CE                 jnz     short loc_4036F5
.text:004036D0                 mov     eax, [ebp+var_248]
.text:004036D6                 and     eax, 0F000h
.text:004036DB                 cmp     eax, 8000h
.text:004036E0                 jz      short loc_4036F5
.text:004036E2                 cmp     eax, 4000h
.text:004036E7                 jz      short loc_4036F5
.text:004036E9
.text:004036E9 loc_4036E9:                             ; CODE XREF: sub_403270+43A↑j
.text:004036E9                                         ; sub_403270+446↑j ...
.text:004036E9                 movzx   ebx, [ebp+var_252]
.text:004036F0                 jmp     loc_403342
.text:004036F5 ; ---------------------------------------------------------------------------
.text:004036F5
.text:004036F5 loc_4036F5:                             ; CODE XREF: sub_403270+45E↑j
.text:004036F5                                         ; sub_403270+470↑j ...
.text:004036F5                 mov     eax, [ebp+arg_18]
.text:004036F8                 mov     edx, [ebp+var_248]
.text:004036FE                 cmp     byte ptr [eax+23h], 0
.text:00403702                 jz      short loc_40376E
.text:00403704                 movzx   eax, word ptr [eax+24h]
.text:00403708
.text:00403708 loc_403708:                             ; CODE XREF: sub_403270+519↓j
.text:00403708                 mov     ecx, [ebp+FileName]
.text:0040370B                 movzx   esi, ax
.text:0040370E                 mov     [esp+298h+AccessMode], esi ; AccessMode
.text:00403712                 mov     [esp+298h+Format], ecx ; FileName
.text:00403715                 call    _chmod
.text:0040371A                 test    eax, eax
.text:0040371C                 jz      short loc_4036E9
.text:0040371E                 mov     ecx, [ebp+FileName]
.text:00403721                 mov     [esp+298h+Format], ecx ; char *
.text:00403724                 call    sub_40BBD0
.text:00403729                 mov     [esp+298h+Format], 402C9Ah
.text:00403730                 mov     ebx, eax
.text:00403732                 call    ds:libintl_gettext
.text:00403738                 mov     edi, eax
.text:0040373A                 call    _errno
.text:0040373F                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403743                 mov     [esp+298h+Size], edi ; char *
.text:00403747                 mov     edx, [eax]
.text:00403749                 mov     [esp+298h+Format], 0 ; Code
.text:00403750                 mov     [esp+298h+AccessMode], edx ; ErrorMessage
.text:00403754                 call    sub_415D50
.text:00403759                 mov     eax, [ebp+arg_18]
.text:0040375C                 test    dword ptr [eax+20h], 0FF00FF00h
.text:00403763                 jnz     loc_403340
.text:00403769                 jmp     loc_4036E9
.text:0040376E ; ---------------------------------------------------------------------------
.text:0040376E
.text:0040376E loc_40376E:                             ; CODE XREF: sub_403270+492↑j
.text:0040376E                 mov     eax, [ebp+arg_18]
.text:00403771                 cmp     byte ptr [eax+14h], 0
.text:00403775                 jnz     short loc_403787
.text:00403777                 test    cl, cl
.text:00403779                 jnz     short loc_403787
.text:0040377B                 movzx   edi, word ptr [eax+2Eh]
.text:0040377F                 and     edx, edi
.text:00403781                 and     edx, 0F3FFh
.text:00403787
.text:00403787 loc_403787:                             ; CODE XREF: sub_403270+505↑j
.text:00403787                                         ; sub_403270+509↑j
.text:00403787                 mov     eax, edx
.text:00403789                 jmp     loc_403708
.text:0040378E ; ---------------------------------------------------------------------------
.text:0040378E
.text:0040378E loc_40378E:                             ; CODE XREF: sub_403270+419↑j
.text:0040378E                 call    _errno
.text:00403793                 cmp     dword ptr [eax], 1
.text:00403796                 jz      short loc_4037EF
.text:00403798                 call    _errno
.text:0040379D                 cmp     dword ptr [eax], 16h
.text:004037A0                 jz      short loc_4037EF
.text:004037A2
.text:004037A2 loc_4037A2:                             ; CODE XREF: sub_403270+58D↓j
.text:004037A2                 mov     eax, [ebp+FileName]
.text:004037A5                 mov     [esp+298h+Format], eax ; char *
.text:004037A8                 call    sub_40BBD0
.text:004037AD                 mov     [esp+298h+Format], offset dword_402CC0
.text:004037B4                 mov     ebx, eax
.text:004037B6                 call    ds:libintl_gettext
.text:004037BC                 mov     edi, eax
.text:004037BE                 call    _errno
.text:004037C3                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:004037C7                 mov     [esp+298h+Size], edi ; char *
.text:004037CB                 mov     esi, [eax]
.text:004037CD                 mov     [esp+298h+Format], 0 ; Code
.text:004037D4                 mov     [esp+298h+AccessMode], esi ; ErrorMessage
.text:004037D8                 call    sub_415D50
.text:004037DD                 mov     ebx, [ebp+arg_18]
.text:004037E0                 cmp     byte ptr [ebx+21h], 0
.text:004037E4                 jnz     loc_403340
.text:004037EA                 jmp     loc_40368F
.text:004037EF ; ---------------------------------------------------------------------------
.text:004037EF
.text:004037EF loc_4037EF:                             ; CODE XREF: sub_403270+526↑j
.text:004037EF                                         ; sub_403270+530↑j
.text:004037EF                 mov     ecx, [ebp+arg_18]
.text:004037F2                 mov     edi, [ecx+18h]
.text:004037F5                 test    edi, edi
.text:004037F7                 jnz     loc_40368F
.text:004037FD                 jmp     short loc_4037A2
.text:004037FF ; ---------------------------------------------------------------------------
.text:004037FF
.text:004037FF loc_4037FF:                             ; CODE XREF: sub_403270+3F4↑j
.text:004037FF                 mov     edx, [ebp+var_68]
.text:00403802                 cmp     edx, [ebp+var_D8]
.text:00403808                 jnz     loc_40366D
.text:0040380E                 jmp     loc_403696
.text:00403813 ; ---------------------------------------------------------------------------
.text:00403813
.text:00403813 loc_403813:                             ; CODE XREF: sub_403270+3E5↑j
.text:00403813                 mov     edx, [ebp+var_68]
.text:00403816                 mov     ecx, [ebp+var_6C]
.text:00403819                 jmp     loc_40366D
.text:0040381E ; ---------------------------------------------------------------------------
.text:0040381E
.text:0040381E loc_40381E:                             ; CODE XREF: sub_403270+3CD↑j
.text:0040381E                 mov     ebx, [ebp+var_50]
.text:00403821                 lea     edx, [ebp+var_22B+3]
.text:00403827                 mov     ecx, [ebp+var_4C]
.text:0040382A                 mov     [esp+298h+AccessMode], edx ; int
.text:0040382E                 mov     esi, [ebp+var_48]
.text:00403831                 mov     edi, [ebp+var_44]
.text:00403834                 mov     [ebp+var_22B+3], ebx
.text:0040383A                 mov     ebx, [ebp+FileName]
.text:0040383D                 mov     [ebp+var_224], ecx
.text:00403843                 mov     [ebp+var_220], esi
.text:00403849                 mov     [ebp+var_21C], edi
.text:0040384F                 mov     [esp+298h+Format], ebx ; char *
.text:00403852                 call    sub_40BD60
.text:00403857                 test    eax, eax
.text:00403859                 jz      loc_403643
.text:0040385F                 mov     eax, [ebp+FileName]
.text:00403862                 mov     [esp+298h+Format], eax ; char *
.text:00403865                 call    sub_40BBD0
.text:0040386A                 mov     [esp+298h+Format], 402CE4h
.text:00403871                 mov     ebx, eax
.text:00403873                 call    ds:libintl_gettext
.text:00403879                 mov     edi, eax
.text:0040387B                 call    _errno
.text:00403880                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403884                 mov     [esp+298h+Size], edi ; char *
.text:00403888                 mov     edi, [eax]
.text:0040388A                 mov     [esp+298h+Format], 0 ; Code
.text:00403891                 mov     [esp+298h+AccessMode], edi ; ErrorMessage
.text:00403895                 call    sub_415D50
.text:0040389A                 mov     edx, [ebp+arg_18]
.text:0040389D                 cmp     byte ptr [edx+21h], 0
.text:004038A1                 jnz     loc_403340
.text:004038A7                 jmp     loc_403643
.text:004038A7 ; ---------------------------------------------------------------------------
.text:004038AC                 align 10h
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_403270+3AE↑j
.text:004038B0                 mov     [esp+298h+Size], 0 ; int
.text:004038B8                 mov     eax, [ebp+FileName]
.text:004038BB                 mov     esi, [ebp+arg_18]
.text:004038BE                 mov     [esp+298h+AccessMode], eax ; char *
.text:004038C2                 mov     edi, [esi+34h]
.text:004038C5                 mov     [esp+298h+Format], edi ; int
.text:004038C8                 call    sub_405E30
.text:004038CD                 jmp     loc_403624
.text:004038D2 ; ---------------------------------------------------------------------------
.text:004038D2
.text:004038D2 loc_4038D2:                             ; CODE XREF: sub_403270+3A1↑j
.text:004038D2                 mov     [esp+298h+Format], 1 ; int
.text:004038D9                 mov     edx, [ebp+Str2]
.text:004038DC                 mov     [esp+298h+AccessMode], edx ; char *
.text:004038E0                 call    sub_40BBA0
.text:004038E5                 mov     [esp+298h+Format], 0 ; int
.text:004038EC                 mov     ecx, [ebp+FileName]
.text:004038EF                 mov     edi, eax
.text:004038F1                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004038F5                 call    sub_40BBA0
.text:004038FA                 mov     [esp+298h+Format], 402D00h
.text:00403901
.text:00403901 loc_403901:                             ; CODE XREF: sub_403270+112B↓j
.text:00403901                 mov     esi, eax
.text:00403903                 call    ds:libintl_gettext
.text:00403909                 mov     ebx, eax
.text:0040390B                 call    _errno
.text:00403910                 mov     [esp+298h+var_288], edi
.text:00403914                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:00403918                 mov     [esp+298h+Size], ebx ; char *
.text:0040391C                 mov     ebx, [eax]
.text:0040391E                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:00403922
.text:00403922 loc_403922:                             ; CODE XREF: sub_403270+1241↓j
.text:00403922                 mov     [esp+298h+Format], 0 ; Code
.text:00403929                 call    sub_415D50
.text:0040392E
.text:0040392E loc_40392E:                             ; CODE XREF: sub_403270+7C1↓j
.text:0040392E                                         ; sub_403270+8DE↓j ...
.text:0040392E                 mov     eax, [ebp+lpExistingFileName]
.text:00403934                 test    eax, eax
.text:00403936                 jz      loc_4039D6
.text:0040393C
.text:0040393C loc_40393C:                             ; CODE XREF: sub_403270+786↓j
.text:0040393C                 mov     esi, [ebp+lpFileName]
.text:00403942                 test    esi, esi
.text:00403944                 jz      loc_403340
.text:0040394A                 mov     edi, [ebp+FileName]
.text:0040394D                 mov     eax, [ebp+lpFileName]
.text:00403953                 mov     [esp+298h+AccessMode], edi ; lpFileName
.text:00403957                 mov     [esp+298h+Format], eax ; LPCSTR
.text:0040395A                 call    sub_41A400
.text:0040395F                 test    eax, eax
.text:00403961                 jnz     short loc_4039BF
.text:00403963                 mov     ecx, [ebp+arg_18]
.text:00403966                 cmp     byte ptr [ecx+31h], 0
.text:0040396A                 jz      loc_403340
.text:00403970                 mov     [esp+298h+Format], 1 ; int
.text:00403977                 mov     eax, [ebp+FileName]
.text:0040397A                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040397E                 call    sub_40BBA0
.text:00403983                 mov     [esp+298h+Format], 0 ; int
.text:0040398A                 mov     esi, [ebp+lpFileName]
.text:00403990                 mov     ebx, eax
.text:00403992                 mov     [esp+298h+AccessMode], esi ; char *
.text:00403996                 call    sub_40BBA0
.text:0040399B                 mov     [esp+298h+Format], 402D25h
.text:004039A2                 mov     edi, eax
.text:004039A4                 call    ds:libintl_gettext
.text:004039AA                 mov     [esp+298h+Size], ebx
.text:004039AE                 mov     [esp+298h+AccessMode], edi
.text:004039B2                 mov     [esp+298h+Format], eax ; Format
.text:004039B5                 call    printf
.text:004039BA                 jmp     loc_403340
.text:004039BF ; ---------------------------------------------------------------------------
.text:004039BF
.text:004039BF loc_4039BF:                             ; CODE XREF: sub_403270+6F1↑j
.text:004039BF                 mov     edx, [ebp+FileName]
.text:004039C2                 mov     [esp+298h+Format], edx ; char *
.text:004039C5                 call    sub_40BBD0
.text:004039CA                 mov     [esp+298h+Format], offset loc_402D3A
.text:004039D1                 jmp     loc_403317
.text:004039D6 ; ---------------------------------------------------------------------------
.text:004039D6
.text:004039D6 loc_4039D6:                             ; CODE XREF: sub_403270+6C6↑j
.text:004039D6                 mov     ecx, [ebp+var_78]
.text:004039D9                 mov     ebx, [ebp+var_74]
.text:004039DC                 mov     edx, [ebp+var_80]
.text:004039DF                 mov     [esp+298h+Size], ecx
.text:004039E3                 mov     edi, [ebp+var_7C]
.text:004039E6                 mov     dword ptr [esp+298h+var_28C], ebx
.text:004039EA                 mov     [esp+298h+Format], edx
.text:004039ED                 mov     [esp+298h+AccessMode], edi
.text:004039F1                 call    sub_405F20
.text:004039F6                 jmp     loc_40393C
.text:004039FB ; ---------------------------------------------------------------------------
.text:004039FB
.text:004039FB loc_4039FB:                             ; CODE XREF: sub_403270+387↑j
.text:004039FB                 mov     edi, [ebp+FileName]
.text:004039FE                 mov     [esp+298h+Format], edi ; char *
.text:00403A01                 call    sub_40BBD0
.text:00403A06                 mov     [esp+298h+Format], offset loc_402D60
.text:00403A0D
.text:00403A0D loc_403A0D:                             ; CODE XREF: sub_403270+955↓j
.text:00403A0D                                         ; sub_403270+E1F↓j
.text:00403A0D                 mov     ebx, eax
.text:00403A0F                 call    ds:libintl_gettext
.text:00403A15                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403A19                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00403A21                 mov     [esp+298h+Size], eax ; char *
.text:00403A25
.text:00403A25 loc_403A25:                             ; CODE XREF: sub_403270+A03↓j
.text:00403A25                 mov     [esp+298h+Format], 0 ; Code
.text:00403A2C                 call    sub_415D50
.text:00403A31                 jmp     loc_40392E
.text:00403A36 ; ---------------------------------------------------------------------------
.text:00403A36
.text:00403A36 loc_403A36:                             ; CODE XREF: sub_403270+365↑j
.text:00403A36                 mov     [esp+298h+Format], (offset loc_402C97+1) ; char *
.text:00403A3D                 lea     ecx, [ebp+var_1A8]
.text:00403A43                 mov     [esp+298h+AccessMode], ecx ; int
.text:00403A47                 call    sub_419540
.text:00403A4C                 test    eax, eax
.text:00403A4E                 jnz     loc_4035DB
.text:00403A54                 mov     eax, [ebp+Block]
.text:00403A5A                 lea     ebx, [ebp+var_218]
.text:00403A60                 mov     [esp+298h+AccessMode], ebx ; int
.text:00403A64                 mov     [esp+298h+Format], eax ; char *
.text:00403A67                 call    sub_419540
.text:00403A6C                 test    eax, eax
.text:00403A6E                 jnz     loc_4035DB
.text:00403A74                 mov     edx, [ebp+var_19C]
.text:00403A7A                 mov     esi, [ebp+var_1A0]
.text:00403A80                 mov     edi, [ebp+var_210]
.text:00403A86                 mov     ecx, [ebp+var_20C]
.text:00403A8C                 mov     eax, edx
.text:00403A8E                 xor     edi, esi
.text:00403A90                 xor     eax, ecx
.text:00403A92                 or      eax, edi
.text:00403A94                 jnz     loc_4035E2
.text:00403A9A                 mov     edx, [ebp+var_194]
.text:00403AA0                 mov     esi, [ebp+var_198]
.text:00403AA6                 mov     edi, [ebp+var_208]
.text:00403AAC                 mov     ecx, [ebp+var_204]
.text:00403AB2                 mov     eax, edx
.text:00403AB4                 xor     edi, esi
.text:00403AB6                 xor     eax, ecx
.text:00403AB8                 or      eax, edi
.text:00403ABA                 jnz     loc_4035E2
.text:00403AC0                 jmp     loc_4035DB
.text:00403AC5 ; ---------------------------------------------------------------------------
.text:00403AC5
.text:00403AC5 loc_403AC5:                             ; CODE XREF: sub_403270+329↑j
.text:00403AC5                 mov     edi, [ebp+arg_18]
.text:00403AC8                 cmp     byte ptr [edi+0Eh], 0
.text:00403ACC                 jnz     loc_403E78
.text:00403AD2                 cmp     eax, 8000h
.text:00403AD7                 jz      short loc_403AF8
.text:00403AD9                 mov     ecx, [ebp+arg_18]
.text:00403ADC                 cmp     byte ptr [ecx+4], 0
.text:00403AE0                 jz      loc_403B75
.text:00403AE6                 cmp     eax, 4000h
.text:00403AEB                 jz      loc_403B75
.text:00403AF1                 cmp     eax, 0A000h
.text:00403AF6                 jz      short loc_403B75
.text:00403AF8
.text:00403AF8 loc_403AF8:                             ; CODE XREF: sub_403270+867↑j
.text:00403AF8                 mov     [ebp+var_253], 1
.text:00403AFF                 mov     ecx, [ebp+arg_18]
.text:00403B02                 mov     eax, [ebp+var_248]
.text:00403B08                 cmp     byte ptr [ecx+23h], 0
.text:00403B0C                 jz      short loc_403B53
.text:00403B0E                 movzx   eax, word ptr [ecx+24h]
.text:00403B12
.text:00403B12 loc_403B12:                             ; CODE XREF: sub_403270+8EA↓j
.text:00403B12                                         ; sub_403270+8F0↓j ...
.text:00403B12                 movzx   ebx, ax
.text:00403B15                 mov     esi, [ebp+arg_18]
.text:00403B18                 lea     edx, [ebp+var_88]
.text:00403B1E                 mov     [esp+298h+var_284], edx ; int
.text:00403B22                 mov     eax, [ebp+FileName]
.text:00403B25                 lea     ecx, [ebp+var_22B]
.text:00403B2B                 mov     [esp+298h+var_288], ecx ; int
.text:00403B2F                 mov     edi, [ebp+Str2]
.text:00403B32                 mov     dword ptr [esp+298h+var_28C], ebx ; __int16
.text:00403B36                 mov     [esp+298h+Size], esi ; int
.text:00403B3A                 mov     [esp+298h+AccessMode], eax ; LPCSTR
.text:00403B3E                 mov     [esp+298h+Format], edi ; char *
.text:00403B41                 call    sub_405220
.text:00403B46                 test    al, al
.text:00403B48                 jnz     loc_403617
.text:00403B4E                 jmp     loc_40392E
.text:00403B53 ; ---------------------------------------------------------------------------
.text:00403B53
.text:00403B53 loc_403B53:                             ; CODE XREF: sub_403270+89C↑j
.text:00403B53                 mov     edx, [ebp+arg_18]
.text:00403B56                 cmp     byte ptr [edx+14h], 0
.text:00403B5A                 jnz     short loc_403B12
.text:00403B5C                 cmp     byte ptr [edx+1Eh], 0
.text:00403B60                 jnz     short loc_403B12
.text:00403B62                 movzx   eax, word ptr [edx+2Eh]
.text:00403B66                 mov     ebx, [ebp+var_248]
.text:00403B6C                 and     eax, ebx
.text:00403B6E                 and     eax, 0F3FFh
.text:00403B73                 jmp     short loc_403B12
.text:00403B75 ; ---------------------------------------------------------------------------
.text:00403B75
.text:00403B75 loc_403B75:                             ; CODE XREF: sub_403270+870↑j
.text:00403B75                                         ; sub_403270+87B↑j ...
.text:00403B75                 mov     eax, [ebp+var_248]
.text:00403B7B                 and     eax, 0F000h
.text:00403B80                 cmp     eax, 1000h
.text:00403B85                 jz      loc_403E12
.text:00403B8B                 cmp     eax, 6000h
.text:00403B90                 jz      loc_403D8B
.text:00403B96                 cmp     eax, 2000h
.text:00403B9B                 jz      loc_403D8B
.text:00403BA1                 cmp     eax, 0C000h
.text:00403BA6                 jz      loc_403D8B
.text:00403BAC                 cmp     eax, 0A000h
.text:00403BB1                 jz      short loc_403BCA
.text:00403BB3                 mov     ebx, [ebp+Str2]
.text:00403BB6                 mov     [esp+298h+Format], ebx ; char *
.text:00403BB9                 call    sub_40BBD0
.text:00403BBE                 mov     [esp+298h+Format], offset loc_402D9F
.text:00403BC5                 jmp     loc_403A0D
.text:00403BCA ; ---------------------------------------------------------------------------
.text:00403BCA
.text:00403BCA loc_403BCA:                             ; CODE XREF: sub_403270+941↑j
.text:00403BCA                 mov     esi, [ebp+var_58]
.text:00403BCD                 mov     eax, [ebp+Str2]
.text:00403BD0                 mov     [esp+298h+AccessMode], esi ; int
.text:00403BD4                 mov     [esp+298h+Format], eax ; char *
.text:00403BD7                 call    sub_40BD90
.text:00403BDC                 test    eax, eax
.text:00403BDE                 mov     edi, eax
.text:00403BE0                 jz      loc_403D61
.text:00403BE6                 mov     [esp+298h+Format], eax ; String
.text:00403BE9                 mov     ebx, [ebp+FileName]
.text:00403BEC                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00403BF0                 call    sub_419FB0
.text:00403BF5                 test    eax, eax
.text:00403BF7                 jnz     loc_403C88
.text:00403BFD                 mov     [esp+298h+Format], edi ; Block
.text:00403C00                 call    free
.text:00403C05
.text:00403C05 loc_403C05:                             ; CODE XREF: sub_403270+A61↓j
.text:00403C05                 mov     [ebp+var_255], 0
.text:00403C0C                 mov     edx, [ebp+arg_18]
.text:00403C0F                 cmp     byte ptr [edx+1Dh], 0
.text:00403C13                 jz      loc_403617
.text:00403C19                 mov     esi, [ebp+var_68]
.text:00403C1C                 mov     edi, [ebp+var_6C]
.text:00403C1F                 mov     ebx, [ebp+FileName]
.text:00403C22                 mov     [esp+298h+Size], esi
.text:00403C26                 mov     [esp+298h+AccessMode], edi
.text:00403C2A                 mov     [esp+298h+Format], ebx
.text:00403C2D                 call    sub_41A3D0
.text:00403C32                 test    eax, eax
.text:00403C34                 jz      loc_403617
.text:00403C3A                 call    _errno
.text:00403C3F                 cmp     dword ptr [eax], 1
.text:00403C42                 jz      short loc_403C78
.text:00403C44                 call    _errno
.text:00403C49                 cmp     dword ptr [eax], 16h
.text:00403C4C                 jz      short loc_403C78
.text:00403C4E
.text:00403C4E loc_403C4E:                             ; CODE XREF: sub_403270+A16↓j
.text:00403C4E                 mov     [esp+298h+Format], offset dword_402CC0
.text:00403C55                 call    ds:libintl_gettext
.text:00403C5B                 mov     ebx, eax
.text:00403C5D                 call    _errno
.text:00403C62                 mov     edx, [ebp+FileName]
.text:00403C65                 mov     dword ptr [esp+298h+var_28C], edx
.text:00403C69
.text:00403C69 loc_403C69:                             ; CODE XREF: sub_403270+B16↓j
.text:00403C69                 mov     [esp+298h+Size], ebx
.text:00403C6D                 mov     edi, [eax]
.text:00403C6F
.text:00403C6F loc_403C6F:                             ; CODE XREF: sub_403270+A8F↓j
.text:00403C6F                 mov     [esp+298h+AccessMode], edi
.text:00403C73                 jmp     loc_403A25
.text:00403C78 ; ---------------------------------------------------------------------------
.text:00403C78
.text:00403C78 loc_403C78:                             ; CODE XREF: sub_403270+9D2↑j
.text:00403C78                                         ; sub_403270+9DC↑j
.text:00403C78                 mov     ecx, [ebp+arg_18]
.text:00403C7B                 mov     eax, [ecx+18h]
.text:00403C7E                 test    eax, eax
.text:00403C80                 jnz     loc_403617
.text:00403C86                 jmp     short loc_403C4E
.text:00403C88 ; ---------------------------------------------------------------------------
.text:00403C88
.text:00403C88 loc_403C88:                             ; CODE XREF: sub_403270+987↑j
.text:00403C88                 call    _errno
.text:00403C8D                 mov     [ebp+var_269], 0
.text:00403C94                 mov     ecx, [ebp+arg_18]
.text:00403C97                 mov     edx, [eax]
.text:00403C99                 cmp     byte ptr [ecx+30h], 0
.text:00403C9D                 mov     [ebp+var_268], edx
.text:00403CA3                 jz      short loc_403CC2
.text:00403CA5                 cmp     byte ptr [ebp+var_22B], 0
.text:00403CAC                 jnz     short loc_403CC2
.text:00403CAE                 mov     esi, [ebp+var_F8]
.text:00403CB4                 and     esi, 0F000h
.text:00403CBA                 cmp     esi, 0A000h
.text:00403CC0                 jz      short loc_403D04
.text:00403CC2
.text:00403CC2 loc_403CC2:                             ; CODE XREF: sub_403270+A33↑j
.text:00403CC2                                         ; sub_403270+A3C↑j ...
.text:00403CC2                 mov     [esp+298h+Format], edi ; Block
.text:00403CC5                 call    free
.text:00403CCA                 cmp     [ebp+var_269], 0
.text:00403CD1                 jnz     loc_403C05
.text:00403CD7                 mov     ecx, [ebp+FileName]
.text:00403CDA                 mov     [esp+298h+Format], ecx ; char *
.text:00403CDD                 call    sub_40BBD0
.text:00403CE2                 mov     [esp+298h+Format], offset dword_402DC0
.text:00403CE9                 mov     esi, eax
.text:00403CEB                 call    ds:libintl_gettext
.text:00403CF1                 mov     dword ptr [esp+298h+var_28C], esi
.text:00403CF5                 mov     edi, [ebp+var_268]
.text:00403CFB                 mov     [esp+298h+Size], eax
.text:00403CFF                 jmp     loc_403C6F
.text:00403D04 ; ---------------------------------------------------------------------------
.text:00403D04
.text:00403D04 loc_403D04:                             ; CODE XREF: sub_403270+A50↑j
.text:00403D04                 mov     [esp+298h+Format], edi ; Str
.text:00403D07                 xor     ebx, ebx
.text:00403D09                 call    strlen
.text:00403D0E                 mov     edx, [ebp+var_C4]
.text:00403D14                 mov     ecx, eax
.text:00403D16                 mov     eax, [ebp+var_C8]
.text:00403D1C                 mov     esi, edx
.text:00403D1E                 xor     esi, ebx
.text:00403D20                 xor     eax, ecx
.text:00403D22                 or      esi, eax
.text:00403D24                 jnz     short loc_403CC2
.text:00403D26                 mov     ebx, [ebp+var_C8]
.text:00403D2C                 mov     eax, [ebp+FileName]
.text:00403D2F                 mov     [esp+298h+AccessMode], ebx ; int
.text:00403D33                 mov     [esp+298h+Format], eax ; char *
.text:00403D36                 call    sub_40BD90
.text:00403D3B                 mov     [esp+298h+Format], eax ; Str1
.text:00403D3E                 mov     ebx, eax
.text:00403D40                 mov     [esp+298h+AccessMode], edi ; Str2
.text:00403D44                 call    strcmp
.text:00403D49                 test    eax, eax
.text:00403D4B                 jnz     short loc_403D54
.text:00403D4D                 mov     [ebp+var_269], 1
.text:00403D54
.text:00403D54 loc_403D54:                             ; CODE XREF: sub_403270+ADB↑j
.text:00403D54                 mov     [esp+298h+Format], ebx ; Block
.text:00403D57                 call    free
.text:00403D5C                 jmp     loc_403CC2
.text:00403D61 ; ---------------------------------------------------------------------------
.text:00403D61
.text:00403D61 loc_403D61:                             ; CODE XREF: sub_403270+970↑j
.text:00403D61                 mov     edi, [ebp+Str2]
.text:00403D64                 mov     [esp+298h+Format], edi ; char *
.text:00403D67                 call    sub_40BBD0
.text:00403D6C                 mov     [esp+298h+Format], 402DDFh
.text:00403D73
.text:00403D73 loc_403D73:                             ; CODE XREF: sub_403270+B7E↓j
.text:00403D73                                         ; sub_403270+BE1↓j ...
.text:00403D73                 mov     esi, eax
.text:00403D75                 call    ds:libintl_gettext
.text:00403D7B                 mov     ebx, eax
.text:00403D7D                 call    _errno
.text:00403D82                 mov     dword ptr [esp+298h+var_28C], esi
.text:00403D86                 jmp     loc_403C69
.text:00403D8B ; ---------------------------------------------------------------------------
.text:00403D8B
.text:00403D8B loc_403D8B:                             ; CODE XREF: sub_403270+920↑j
.text:00403D8B                                         ; sub_403270+92B↑j ...
.text:00403D8B                 mov     ecx, [ebp+arg_18]
.text:00403D8E                 mov     eax, [ebp+var_248]
.text:00403D94                 cmp     byte ptr [ecx+23h], 0
.text:00403D98                 jz      short loc_403DF0
.text:00403D9A                 movzx   eax, word ptr [ecx+24h]
.text:00403D9E
.text:00403D9E loc_403D9E:                             ; CODE XREF: sub_403270+B87↓j
.text:00403D9E                                         ; sub_403270+B8D↓j ...
.text:00403D9E                 mov     [esp+298h+Format], 0
.text:00403DA5                 mov     ecx, [ebp+var_60]
.text:00403DA8                 movzx   esi, ax
.text:00403DAB                 mov     [esp+298h+Size], esi
.text:00403DAF                 mov     ebx, [ebp+var_5C]
.text:00403DB2                 lea     edi, [ebp+var_238]
.text:00403DB8                 mov     dword ptr [esp+298h+var_28C], edi
.text:00403DBC                 mov     edx, [ebp+FileName]
.text:00403DBF                 mov     [ebp+var_238], ecx
.text:00403DC5                 mov     [ebp+var_234], ebx
.text:00403DCB                 mov     [esp+298h+AccessMode], edx
.text:00403DCF                 call    sub_41A220
.text:00403DD4                 test    eax, eax
.text:00403DD6                 jz      loc_403617
.text:00403DDC                 mov     edx, [ebp+FileName]
.text:00403DDF                 mov     [esp+298h+Format], edx ; char *
.text:00403DE2                 call    sub_40BBD0
.text:00403DE7                 mov     [esp+298h+Format], 402DFCh
.text:00403DEE                 jmp     short loc_403D73
.text:00403DF0 ; ---------------------------------------------------------------------------
.text:00403DF0
.text:00403DF0 loc_403DF0:                             ; CODE XREF: sub_403270+B28↑j
.text:00403DF0                 mov     edx, [ebp+arg_18]
.text:00403DF3                 cmp     byte ptr [edx+14h], 0
.text:00403DF7                 jnz     short loc_403D9E
.text:00403DF9                 cmp     byte ptr [edx+1Eh], 0
.text:00403DFD                 jnz     short loc_403D9E
.text:00403DFF                 movzx   eax, word ptr [edx+2Eh]
.text:00403E03                 mov     ecx, [ebp+var_248]
.text:00403E09                 and     eax, ecx
.text:00403E0B                 and     eax, 0F3FFh
.text:00403E10                 jmp     short loc_403D9E
.text:00403E12 ; ---------------------------------------------------------------------------
.text:00403E12
.text:00403E12 loc_403E12:                             ; CODE XREF: sub_403270+915↑j
.text:00403E12                 mov     edx, [ebp+arg_18]
.text:00403E15                 mov     eax, [ebp+var_248]
.text:00403E1B                 cmp     byte ptr [edx+23h], 0
.text:00403E1F                 jz      short loc_403E56
.text:00403E21                 movzx   eax, word ptr [edx+24h]
.text:00403E25
.text:00403E25 loc_403E25:                             ; CODE XREF: sub_403270+BED↓j
.text:00403E25                                         ; sub_403270+BF3↓j ...
.text:00403E25                 mov     edi, [ebp+FileName]
.text:00403E28                 movzx   ebx, ax
.text:00403E2B                 mov     [esp+298h+AccessMode], ebx ; __int16
.text:00403E2F                 mov     [esp+298h+Format], edi ; char *
.text:00403E32                 call    sub_418350
.text:00403E37                 test    eax, eax
.text:00403E39                 jz      loc_403617
.text:00403E3F                 mov     eax, [ebp+FileName]
.text:00403E42                 mov     [esp+298h+Format], eax ; char *
.text:00403E45                 call    sub_40BBD0
.text:00403E4A                 mov     [esp+298h+Format], 402E1Ah
.text:00403E51                 jmp     loc_403D73
.text:00403E56 ; ---------------------------------------------------------------------------
.text:00403E56
.text:00403E56 loc_403E56:                             ; CODE XREF: sub_403270+BAF↑j
.text:00403E56                 mov     ecx, [ebp+arg_18]
.text:00403E59                 cmp     byte ptr [ecx+14h], 0
.text:00403E5D                 jnz     short loc_403E25
.text:00403E5F                 cmp     byte ptr [ecx+1Eh], 0
.text:00403E63                 jnz     short loc_403E25
.text:00403E65                 movzx   eax, word ptr [ecx+2Eh]
.text:00403E69                 mov     esi, [ebp+var_248]
.text:00403E6F                 and     eax, esi
.text:00403E71                 and     eax, 0F3FFh
.text:00403E76                 jmp     short loc_403E25
.text:00403E78 ; ---------------------------------------------------------------------------
.text:00403E78
.text:00403E78 loc_403E78:                             ; CODE XREF: sub_403270+85C↑j
.text:00403E78                 mov     [ebp+var_255], 0
.text:00403E7F                 mov     esi, [ebp+FileName]
.text:00403E82                 mov     eax, [ebp+Str2]
.text:00403E85                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:00403E89                 mov     [esp+298h+Format], eax ; lpExistingFileName
.text:00403E8C                 call    sub_418130
.text:00403E91                 test    eax, eax
.text:00403E93                 jz      loc_403617
.text:00403E99                 mov     edx, [ebp+FileName]
.text:00403E9C                 mov     [esp+298h+Format], edx ; char *
.text:00403E9F                 call    sub_40BBD0
.text:00403EA4                 mov     [esp+298h+Format], 402E30h
.text:00403EAB                 jmp     loc_403D73
.text:00403EB0 ; ---------------------------------------------------------------------------
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403270+31C↑j
.text:00403EB0                 mov     edi, [ebp+arg_14]
.text:00403EB3                 test    edi, edi
.text:00403EB5                 jz      short loc_403F0A
.text:00403EB7                 mov     edx, [ebp+var_80]
.text:00403EBA                 mov     esi, [ebp+var_7C]
.text:00403EBD                 mov     [ebp+var_278], edx
.text:00403EC3                 mov     [ebp+var_274], esi
.text:00403EC9                 lea     esi, [esi+0]
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403270+C98↓j
.text:00403ED0                 mov     ebx, [edi+8]
.text:00403ED3                 mov     esi, [edi+0Ch]
.text:00403ED6                 mov     eax, [ebp+var_274]
.text:00403EDC                 mov     ecx, [ebp+var_278]
.text:00403EE2                 xor     eax, esi
.text:00403EE4                 xor     ebx, ecx
.text:00403EE6                 or      eax, ebx
.text:00403EE8                 jnz     short loc_403F04
.text:00403EEA                 mov     ebx, [edi+14h]
.text:00403EED                 mov     ecx, [edi+10h]
.text:00403EF0                 mov     eax, [ebp+var_78]
.text:00403EF3                 mov     edx, [ebp+var_74]
.text:00403EF6                 mov     esi, ebx
.text:00403EF8                 xor     eax, ecx
.text:00403EFA                 xor     esi, edx
.text:00403EFC                 or      esi, eax
.text:00403EFE                 jz      loc_40407D
.text:00403F04
.text:00403F04 loc_403F04:                             ; CODE XREF: sub_403270+C78↑j
.text:00403F04                 mov     edi, [edi]
.text:00403F06                 test    edi, edi
.text:00403F08                 jnz     short loc_403ED0
.text:00403F0A
.text:00403F0A loc_403F0A:                             ; CODE XREF: sub_403270+C45↑j
.text:00403F0A                 mov     [esp+298h+Format], 18h ; Size
.text:00403F11                 call    malloc
.text:00403F16                 cmp     byte ptr [ebp+var_22B], 0
.text:00403F1D                 mov     esi, eax
.text:00403F1F                 mov     ecx, [ebp+var_80]
.text:00403F22                 mov     ebx, [ebp+var_7C]
.text:00403F25                 mov     eax, [ebp+arg_14]
.text:00403F28                 mov     [esi+8], ecx
.text:00403F2B                 mov     [esi+0Ch], ebx
.text:00403F2E                 mov     edx, [ebp+var_78]
.text:00403F31                 mov     [esi], eax
.text:00403F33                 mov     edi, [ebp+var_74]
.text:00403F36                 mov     [esi+10h], edx
.text:00403F39                 mov     [esi+14h], edi
.text:00403F3C                 jnz     short loc_403F52
.text:00403F3E                 mov     edi, [ebp+var_F8]
.text:00403F44                 and     edi, 0F000h
.text:00403F4A                 cmp     edi, 4000h
.text:00403F50                 jz      short loc_403F9E
.text:00403F52
.text:00403F52 loc_403F52:                             ; CODE XREF: sub_403270+CCC↑j
.text:00403F52                 mov     eax, [ebp+arg_18]
.text:00403F55                 mov     ecx, [ebp+var_248]
.text:00403F5B                 mov     edx, [ebp+FileName]
.text:00403F5E                 movzx   ebx, word ptr [eax+2Eh]
.text:00403F62                 mov     [esp+298h+Format], edx ; LPCSTR
.text:00403F65                 and     ebx, ecx
.text:00403F67                 or      ebx, 1C0h
.text:00403F6D                 mov     [esp+298h+AccessMode], ebx ; AccessMode
.text:00403F71                 call    sub_4182D0
.text:00403F76                 test    eax, eax
.text:00403F78                 jnz     loc_404066
.text:00403F7E                 mov     edx, [ebp+FileName]
.text:00403F81                 mov     [esp+298h+Format], edx ; char *
.text:00403F84                 call    sub_405F90
.text:00403F89                 test    al, al
.text:00403F8B                 jz      loc_40392E
.text:00403F91                 mov     ebx, [ebp+arg_18]
.text:00403F94                 cmp     byte ptr [ebx+31h], 0
.text:00403F98                 jnz     loc_404025
.text:00403F9E
.text:00403F9E loc_403F9E:                             ; CODE XREF: sub_403270+CE0↑j
.text:00403F9E                                         ; sub_403270+DF1↓j
.text:00403F9E                 mov     edx, [ebp+arg_18]
.text:00403FA1                 cmp     byte ptr [edx+1Ch], 0
.text:00403FA5                 jz      short loc_403FD8
.text:00403FA7                 mov     ebx, [ebp+var_23C]
.text:00403FAD                 or      ebx, [ebp+var_240]
.text:00403FB3                 jz      short loc_403FD8
.text:00403FB5                 mov     ebx, [ebp+var_74]
.text:00403FB8                 mov     edi, [ebp+var_78]
.text:00403FBB                 mov     eax, [ebp+var_23C]
.text:00403FC1                 mov     ecx, [ebp+var_240]
.text:00403FC7                 xor     eax, ebx
.text:00403FC9                 xor     edi, ecx
.text:00403FCB                 or      eax, edi
.text:00403FCD                 mov     ebx, 1
.text:00403FD2                 jnz     loc_403342
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403270+D35↑j
.text:00403FD8                                         ; sub_403270+D43↑j
.text:00403FD8                 movzx   edi, byte ptr [ebp+var_22B]
.text:00403FDF                 mov     [esp+298h+var_288], esi ; int
.text:00403FE3                 lea     eax, [ebp+var_88]
.text:00403FE9                 mov     ebx, [ebp+arg_20]
.text:00403FEC                 mov     dword ptr [esp+298h+var_28C], eax ; int
.text:00403FF0                 mov     ecx, [ebp+arg_18]
.text:00403FF3                 mov     edx, [ebp+FileName]
.text:00403FF6                 mov     [esp+298h+var_280], ebx ; int
.text:00403FFA                 mov     esi, [ebp+Str2]
.text:00403FFD                 mov     [esp+298h+var_284], ecx ; int
.text:00404001                 mov     [esp+298h+Size], edi ; char
.text:00404005                 mov     [esp+298h+AccessMode], edx ; int
.text:00404009                 mov     [esp+298h+Format], esi ; LPCSTR
.text:0040400C                 call    sub_404F90
.text:00404011                 test    al, al
.text:00404013                 jnz     loc_403617
.text:00404019                 mov     [ebp+var_252], 0
.text:00404020                 jmp     loc_403617
.text:00404025 ; ---------------------------------------------------------------------------
.text:00404025
.text:00404025 loc_404025:                             ; CODE XREF: sub_403270+D28↑j
.text:00404025                 mov     [esp+298h+Format], 1 ; int
.text:0040402C                 mov     ecx, [ebp+FileName]
.text:0040402F                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404033                 call    sub_40BBA0
.text:00404038                 mov     [esp+298h+Format], 0 ; int
.text:0040403F                 mov     edi, eax
.text:00404041                 mov     eax, [ebp+Str2]
.text:00404044                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404048                 call    sub_40BBA0
.text:0040404D                 mov     [esp+298h+AccessMode], eax
.text:00404051                 mov     [esp+298h+Size], edi
.text:00404055                 mov     [esp+298h+Format], offset loc_402E46 ; Format
.text:0040405C                 call    printf
.text:00404061                 jmp     loc_403F9E
.text:00404066 ; ---------------------------------------------------------------------------
.text:00404066
.text:00404066 loc_404066:                             ; CODE XREF: sub_403270+D08↑j
.text:00404066                 mov     esi, [ebp+FileName]
.text:00404069                 mov     [esp+298h+Format], esi ; char *
.text:0040406C                 call    sub_40BBD0
.text:00404071                 mov     [esp+298h+Format], 402E50h
.text:00404078                 jmp     loc_403D73
.text:0040407D ; ---------------------------------------------------------------------------
.text:0040407D
.text:0040407D loc_40407D:                             ; CODE XREF: sub_403270+C8E↑j
.text:0040407D                 mov     esi, [ebp+Str2]
.text:00404080                 mov     [esp+298h+Format], esi ; char *
.text:00404083                 call    sub_40BBD0
.text:00404088                 mov     [esp+298h+Format], offset loc_402E80
.text:0040408F                 jmp     loc_403A0D
.text:00404094 ; ---------------------------------------------------------------------------
.text:00404094
.text:00404094 loc_404094:                             ; CODE XREF: sub_403270+2F8↑j
.text:00404094                 mov     ecx, [ebp+FileName]
.text:00404097                 mov     eax, [ebp+Str2]
.text:0040409A                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:0040409E                 mov     [esp+298h+Format], eax ; LPCSTR
.text:004040A1                 call    sub_41A400
.text:004040A6                 test    eax, eax
.text:004040A8                 jnz     loc_404149
.text:004040AE                 mov     edx, [ebp+arg_18]
.text:004040B1                 cmp     byte ptr [edx+31h], 0
.text:004040B5                 jz      short loc_4040CD
.text:004040B7                 and     [ebp+var_248], 0F000h
.text:004040C1                 cmp     [ebp+var_248], 4000h
.text:004040CB                 jz      short loc_40410B
.text:004040CD
.text:004040CD loc_4040CD:                             ; CODE XREF: sub_403270+E45↑j
.text:004040CD                                         ; sub_403270+ED7↓j
.text:004040CD                 test    edi, edi
.text:004040CF                 jz      short loc_4040D4
.text:004040D1                 mov     byte ptr [edi], 1
.text:004040D4
.text:004040D4 loc_4040D4:                             ; CODE XREF: sub_403270+E5F↑j
.text:004040D4                 cmp     [ebp+var_241], 0
.text:004040DB                 jnz     short loc_4040EA
.text:004040DD                 lea     esi, [esi+0]
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403270+E99↓j
.text:004040E0                                         ; sub_403270+1065↓j ...
.text:004040E0                 mov     ebx, 1
.text:004040E5                 jmp     loc_403342
.text:004040EA ; ---------------------------------------------------------------------------
.text:004040EA
.text:004040EA loc_4040EA:                             ; CODE XREF: sub_403270+E6B↑j
.text:004040EA                 mov     ecx, [ebp+FileName]
.text:004040ED                 lea     esi, [ebp+var_88]
.text:004040F3                 mov     edx, [ebp+arg_18]
.text:004040F6                 mov     [esp+298h+Size], esi ; int
.text:004040FA                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004040FE                 mov     edi, [edx+34h]
.text:00404101                 mov     [esp+298h+Format], edi ; int
.text:00404104                 call    sub_405E30
.text:00404109                 jmp     short loc_4040E0
.text:0040410B ; ---------------------------------------------------------------------------
.text:0040410B
.text:0040410B loc_40410B:                             ; CODE XREF: sub_403270+E5B↑j
.text:0040410B                 mov     [esp+298h+Format], 1 ; int
.text:00404112                 mov     eax, [ebp+FileName]
.text:00404115                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404119                 call    sub_40BBA0
.text:0040411E                 mov     [esp+298h+Format], 0 ; int
.text:00404125                 mov     ebx, [ebp+Str2]
.text:00404128                 mov     esi, eax
.text:0040412A                 mov     [esp+298h+AccessMode], ebx ; char *
.text:0040412E                 call    sub_40BBA0
.text:00404133                 mov     [esp+298h+AccessMode], eax
.text:00404137                 mov     [esp+298h+Size], esi
.text:0040413B                 mov     [esp+298h+Format], offset loc_402E46 ; Format
.text:00404142                 call    printf
.text:00404147                 jmp     short loc_4040CD
.text:00404149 ; ---------------------------------------------------------------------------
.text:00404149
.text:00404149 loc_404149:                             ; CODE XREF: sub_403270+E38↑j
.text:00404149                 call    _errno
.text:0040414E                 cmp     dword ptr [eax], 16h
.text:00404151                 jz      loc_404272
.text:00404157                 call    _errno
.text:0040415C                 cmp     dword ptr [eax], 5
.text:0040415F                 jz      loc_404272
.text:00404165                 call    _errno
.text:0040416A                 cmp     dword ptr [eax], 29h ; ')'
.text:0040416D                 jz      loc_404272
.text:00404173                 call    _errno
.text:00404178                 cmp     dword ptr [eax], 12h
.text:0040417B                 jz      loc_404202
.text:00404181                 mov     [esp+298h+Format], 1 ; int
.text:00404188                 mov     esi, [ebp+FileName]
.text:0040418B                 mov     [esp+298h+AccessMode], esi ; char *
.text:0040418F                 call    sub_40BBA0
.text:00404194                 mov     [esp+298h+Format], 0 ; int
.text:0040419B                 mov     edi, eax
.text:0040419D                 mov     eax, [ebp+Str2]
.text:004041A0                 mov     [esp+298h+AccessMode], eax ; char *
.text:004041A4                 call    sub_40BBA0
.text:004041A9                 mov     [esp+298h+Format], 402EA4h
.text:004041B0                 mov     esi, eax
.text:004041B2                 call    ds:libintl_gettext
.text:004041B8                 mov     ebx, eax
.text:004041BA                 call    _errno
.text:004041BF                 mov     [esp+298h+var_288], edi
.text:004041C3                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:004041C7
.text:004041C7 loc_4041C7:                             ; CODE XREF: sub_403270+FFD↓j
.text:004041C7                 mov     [esp+298h+Size], ebx ; char *
.text:004041CB                 mov     ecx, [eax]
.text:004041CD                 mov     [esp+298h+Format], 0 ; Code
.text:004041D4                 mov     [esp+298h+AccessMode], ecx ; ErrorMessage
.text:004041D8                 call    sub_415D50
.text:004041DD                 mov     ebx, [ebp+var_78]
.text:004041E0                 mov     edi, [ebp+var_74]
.text:004041E3                 mov     edx, [ebp+var_80]
.text:004041E6                 mov     [esp+298h+Size], ebx
.text:004041EA                 mov     esi, [ebp+var_7C]
.text:004041ED                 mov     dword ptr [esp+298h+var_28C], edi
.text:004041F1                 mov     [esp+298h+Format], edx
.text:004041F4                 mov     [esp+298h+AccessMode], esi
.text:004041F8                 call    sub_405F20
.text:004041FD                 jmp     loc_403340
.text:00404202 ; ---------------------------------------------------------------------------
.text:00404202
.text:00404202 loc_404202:                             ; CODE XREF: sub_403270+F0B↑j
.text:00404202                 mov     edi, [ebp+FileName]
.text:00404205                 mov     [esp+298h+Format], edi ; LPCSTR
.text:00404208                 call    sub_41A0D0
.text:0040420D                 test    eax, eax
.text:0040420F                 jnz     short loc_40421D
.text:00404211
.text:00404211 loc_404211:                             ; CODE XREF: sub_403270+FB5↓j
.text:00404211                 mov     byte ptr [ebp+var_22B], 1
.text:00404218                 jmp     loc_40356E
.text:0040421D ; ---------------------------------------------------------------------------
.text:0040421D
.text:0040421D loc_40421D:                             ; CODE XREF: sub_403270+F9F↑j
.text:0040421D                 call    _errno
.text:00404222                 cmp     dword ptr [eax], 2
.text:00404225                 jz      short loc_404211
.text:00404227                 mov     [esp+298h+Format], 1 ; int
.text:0040422E                 mov     ecx, [ebp+FileName]
.text:00404231                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404235                 call    sub_40BBA0
.text:0040423A                 mov     [esp+298h+Format], 0 ; int
.text:00404241                 mov     ebx, [ebp+Str2]
.text:00404244                 mov     esi, eax
.text:00404246                 mov     [esp+298h+AccessMode], ebx ; char *
.text:0040424A                 call    sub_40BBA0
.text:0040424F                 mov     [esp+298h+Format], offset byte_402EC0
.text:00404256                 mov     edi, eax
.text:00404258                 call    ds:libintl_gettext
.text:0040425E                 mov     ebx, eax
.text:00404260                 call    _errno
.text:00404265                 mov     [esp+298h+var_288], esi
.text:00404269                 mov     dword ptr [esp+298h+var_28C], edi
.text:0040426D                 jmp     loc_4041C7
.text:00404272 ; ---------------------------------------------------------------------------
.text:00404272
.text:00404272 loc_404272:                             ; CODE XREF: sub_403270+EE1↑j
.text:00404272                                         ; sub_403270+EEF↑j ...
.text:00404272                 mov     [esp+298h+Format], 1 ; int
.text:00404279                 mov     ecx, ds:dword_422020
.text:0040427F                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404283                 call    sub_40BBA0
.text:00404288                 mov     [esp+298h+Format], 0 ; int
.text:0040428F                 mov     edx, ds:dword_422010
.text:00404295                 mov     ebx, eax
.text:00404297                 mov     [esp+298h+AccessMode], edx ; char *
.text:0040429B                 call    sub_40BBA0
.text:004042A0                 mov     [esp+298h+Format], offset loc_402F00
.text:004042A7                 mov     edi, eax
.text:004042A9                 call    ds:libintl_gettext
.text:004042AF                 mov     [esp+298h+var_288], ebx
.text:004042B3                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:004042B7                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:004042BF                 mov     [esp+298h+Size], eax ; char *
.text:004042C3                 mov     [esp+298h+Format], 0 ; Code
.text:004042CA                 call    sub_415D50
.text:004042CF                 mov     ebx, [ebp+arg_20]
.text:004042D2                 mov     byte ptr [ebx], 1
.text:004042D5                 jmp     loc_4040E0
.text:004042D5 ; ---------------------------------------------------------------------------
.text:004042DA                 align 10h
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_403270+2A0↑j
.text:004042E0                                         ; sub_403270+2B9↑j ...
.text:004042E0                 mov     ebx, [ebp+var_78]
.text:004042E3                 mov     ecx, [ebp+var_74]
.text:004042E6                 mov     edx, [ebp+var_80]
.text:004042E9                 mov     dword ptr [esp+298h+var_28C], ebx ; int
.text:004042ED                 mov     esi, [ebp+var_7C]
.text:004042F0                 mov     eax, [ebp+FileName]
.text:004042F3                 mov     [esp+298h+var_288], ecx ; int
.text:004042F7                 mov     [esp+298h+AccessMode], edx ; int
.text:004042FB                 mov     [esp+298h+Size], esi ; int
.text:004042FF                 mov     [esp+298h+Format], eax ; char *
.text:00404302                 call    sub_4060D0
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_403270+1271↓j
.text:00404307                 mov     [ebp+lpExistingFileName], eax
.text:0040430D                 mov     eax, [ebp+lpExistingFileName]
.text:00404313                 test    eax, eax
.text:00404315                 jz      loc_403561
.text:0040431B                 and     [ebp+var_248], 0F000h
.text:00404325                 cmp     [ebp+var_248], 4000h
.text:0040432F                 jz      loc_4043E2
.text:00404335                 mov     esi, [ebp+FileName]
.text:00404338                 mov     edx, [ebp+lpExistingFileName]
.text:0040433E                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:00404342                 mov     [esp+298h+Format], edx ; lpExistingFileName
.text:00404345                 call    sub_418130
.text:0040434A                 test    eax, eax
.text:0040434C                 setnz   bl
.text:0040434F                 test    bl, bl
.text:00404351                 jz      loc_4040E0
.text:00404357                 call    _errno
.text:0040435C                 cmp     dword ptr [eax], 11h
.text:0040435F                 jz      short loc_4043A0
.text:00404361
.text:00404361 loc_404361:                             ; CODE XREF: sub_403270+1159↓j
.text:00404361                 test    bl, bl
.text:00404363                 jz      loc_4040E0
.text:00404369                 mov     [esp+298h+Format], 1 ; int
.text:00404370                 mov     esi, [ebp+lpExistingFileName]
.text:00404376                 mov     [esp+298h+AccessMode], esi ; char *
.text:0040437A                 call    sub_40BBA0
.text:0040437F                 mov     [esp+298h+Format], 0 ; int
.text:00404386                 mov     edx, [ebp+FileName]
.text:00404389                 mov     edi, eax
.text:0040438B                 mov     [esp+298h+AccessMode], edx ; char *
.text:0040438F                 call    sub_40BBA0
.text:00404394                 mov     [esp+298h+Format], offset loc_402F40
.text:0040439B                 jmp     loc_403901
.text:004043A0 ; ---------------------------------------------------------------------------
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403270+10EF↑j
.text:004043A0                 mov     edi, [ebp+FileName]
.text:004043A3                 mov     [esp+298h+Format], edi ; LPCSTR
.text:004043A6                 call    sub_41A0D0
.text:004043AB                 test    eax, eax
.text:004043AD                 jnz     short loc_4043CB
.text:004043AF                 mov     eax, [ebp+FileName]
.text:004043B2                 mov     ecx, [ebp+lpExistingFileName]
.text:004043B8                 mov     [esp+298h+AccessMode], eax ; lpNewFileName
.text:004043BC                 mov     [esp+298h+Format], ecx ; lpExistingFileName
.text:004043BF                 call    sub_418130
.text:004043C4                 test    eax, eax
.text:004043C6                 setnz   bl
.text:004043C9                 jmp     short loc_404361
.text:004043CB ; ---------------------------------------------------------------------------
.text:004043CB
.text:004043CB loc_4043CB:                             ; CODE XREF: sub_403270+113D↑j
.text:004043CB                 mov     ebx, [ebp+FileName]
.text:004043CE                 mov     [esp+298h+Format], ebx ; char *
.text:004043D1                 call    sub_40BBD0
.text:004043D6                 mov     [esp+298h+Format], 402F61h
.text:004043DD                 jmp     loc_403D73
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E2
.text:004043E2 loc_4043E2:                             ; CODE XREF: sub_403270+10BF↑j
.text:004043E2                 mov     esi, [ebp+lpExistingFileName]
.text:004043E8                 mov     edi, [ebp+Str2]
.text:004043EB                 mov     [esp+298h+AccessMode], esi ; void *
.text:004043EF                 mov     [esp+298h+Format], edi ; void *
.text:004043F2                 call    sub_408AE0
.text:004043F7                 test    al, al
.text:004043F9                 jz      short loc_404463
.text:004043FB                 mov     [esp+298h+Format], 1 ; int
.text:00404402                 mov     esi, ds:dword_422020
.text:00404408                 mov     [esp+298h+AccessMode], esi ; char *
.text:0040440C                 call    sub_40BBA0
.text:00404411                 mov     [esp+298h+Format], 0 ; int
.text:00404418                 mov     edx, ds:dword_422010
.text:0040441E                 mov     ebx, eax
.text:00404420                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404424                 call    sub_40BBA0
.text:00404429                 mov     [esp+298h+Format], offset dword_402F80
.text:00404430                 mov     edi, eax
.text:00404432                 call    ds:libintl_gettext
.text:00404438                 mov     [esp+298h+var_288], ebx
.text:0040443C                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00404440                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00404448                 mov     [esp+298h+Size], eax ; char *
.text:0040444C                 mov     [esp+298h+Format], 0 ; Code
.text:00404453                 call    sub_415D50
.text:00404458                 mov     ecx, [ebp+arg_20]
.text:0040445B                 mov     byte ptr [ecx], 1
.text:0040445E                 jmp     loc_40392E
.text:00404463 ; ---------------------------------------------------------------------------
.text:00404463
.text:00404463 loc_404463:                             ; CODE XREF: sub_403270+1189↑j
.text:00404463                 mov     [esp+298h+Format], 1 ; int
.text:0040446A                 mov     eax, [ebp+lpExistingFileName]
.text:00404470                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404474                 call    sub_40BBA0
.text:00404479                 mov     [esp+298h+Format], 0 ; int
.text:00404480                 mov     ecx, [ebp+FileName]
.text:00404483                 mov     ebx, eax
.text:00404485                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404489                 call    sub_40BBA0
.text:0040448E                 mov     [esp+298h+Format], offset loc_402FC0
.text:00404495                 mov     edi, eax
.text:00404497                 call    ds:libintl_gettext
.text:0040449D                 mov     [esp+298h+var_288], ebx
.text:004044A1                 mov     dword ptr [esp+298h+var_28C], edi
.text:004044A5                 mov     [esp+298h+AccessMode], 0
.text:004044AD                 mov     [esp+298h+Size], eax
.text:004044B1                 jmp     loc_403922
.text:004044B6 ; ---------------------------------------------------------------------------
.text:004044B6
.text:004044B6 loc_4044B6:                             ; CODE XREF: sub_403270+2AD↑j
.text:004044B6                 mov     edx, [ebp+arg_18]
.text:004044B9                 mov     eax, [edx+8]
.text:004044BC                 jmp     loc_40352F
.text:004044C1 ; ---------------------------------------------------------------------------
.text:004044C1
.text:004044C1 loc_4044C1:                             ; CODE XREF: sub_403270+28D↑j
.text:004044C1                 mov     ebx, [ebp+var_78]
.text:004044C4                 mov     ecx, [ebp+var_74]
.text:004044C7                 mov     edx, [ebp+var_80]
.text:004044CA                 mov     [esp+298h+Size], ebx
.text:004044CE                 mov     esi, [ebp+var_7C]
.text:004044D1                 mov     dword ptr [esp+298h+var_28C], ecx
.text:004044D5                 mov     [esp+298h+Format], edx
.text:004044D8                 mov     [esp+298h+AccessMode], esi
.text:004044DC                 call    sub_406080
.text:004044E1                 jmp     loc_404307
.text:004044E6 ; ---------------------------------------------------------------------------
.text:004044E6
.text:004044E6 loc_4044E6:                             ; CODE XREF: sub_403270+269↑j
.text:004044E6                 mov     [esp+298h+Format], 0Ah ; Ch
.text:004044ED                 mov     ecx, ds:_iob
.text:004044F3                 add     ecx, 20h ; ' '
.text:004044F6                 mov     [esp+298h+AccessMode], ecx ; File
.text:004044FA                 call    _flsbuf
.text:004044FF                 jmp     loc_4034F0
.text:00404504 ; ---------------------------------------------------------------------------
.text:00404504
.text:00404504 loc_404504:                             ; CODE XREF: sub_403270+254↑j
.text:00404504                 mov     ecx, [ebp+lpFileName]
.text:0040450A                 mov     [esp+298h+Format], ecx ; char *
.text:0040450D                 call    sub_40BBD0
.text:00404512                 mov     [esp+298h+Format], 402FEDh
.text:00404519                 mov     esi, eax
.text:0040451B                 call    ds:libintl_gettext
.text:00404521                 mov     [esp+298h+AccessMode], esi
.text:00404525                 mov     [esp+298h+Format], eax ; Format
.text:00404528                 call    printf
.text:0040452D                 jmp     loc_4034CA
.text:00404532 ; ---------------------------------------------------------------------------
.text:00404532
.text:00404532 loc_404532:                             ; CODE XREF: sub_403270+1CC↑j
.text:00404532                 lea     esi, [ebp+var_22B+2]
.text:00404538                 mov     ebx, [ebp+arg_18]
.text:0040453B                 lea     ecx, [ebp+var_22B+1]
.text:00404541                 mov     [esp+298h+var_280], esi ; int
.text:00404545                 lea     edx, [ebp+var_F8]
.text:0040454B                 mov     esi, [ebp+FileName]
.text:0040454E                 mov     [esp+298h+var_284], ecx ; int
.text:00404552                 lea     eax, [ebp+var_88]
.text:00404558                 mov     ecx, [ebp+Str2]
.text:0040455B                 mov     [esp+298h+var_288], ebx ; int
.text:0040455F                 mov     dword ptr [esp+298h+var_28C], edx ; int
.text:00404563                 mov     [esp+298h+Size], esi ; char *
.text:00404567                 mov     [esp+298h+AccessMode], eax ; int
.text:0040456B                 mov     [esp+298h+Format], ecx ; char *
.text:0040456E                 call    sub_405820
.text:00404573                 cmp     byte ptr [ebp+var_22B+2], 0
.text:0040457A                 mov     bl, al
.text:0040457C                 jnz     loc_404C96
.text:00404582
.text:00404582 loc_404582:                             ; CODE XREF: sub_403270+1A37↓j
.text:00404582                                         ; sub_403270+1A40↓j
.text:00404582                 cmp     byte ptr [ebp+var_22B+1], 0
.text:00404589                 jnz     loc_4040E0
.text:0040458F                 test    bl, bl
.text:00404591                 jz      loc_404C62
.text:00404597                 mov     ecx, [ebp+var_F8]
.text:0040459D                 and     ecx, 0F000h
.text:004045A3                 cmp     ecx, 4000h
.text:004045A9                 jz      loc_404632
.text:004045AF                 mov     esi, [ebp+var_248]
.text:004045B5                 and     esi, 0F000h
.text:004045BB                 cmp     esi, 4000h
.text:004045C1                 jz      loc_404C2E
.text:004045C7                 cmp     [ebp+var_241], 0
.text:004045CE                 jz      short loc_404632
.text:004045D0                 mov     edx, [ebp+arg_18]
.text:004045D3                 cmp     dword ptr [edx], 3
.text:004045D6                 jz      short loc_404632
.text:004045D8                 mov     ecx, [edx+34h]
.text:004045DB                 test    ecx, ecx
.text:004045DD                 jz      short loc_404632
.text:004045DF                 mov     [esp+298h+Format], ecx
.text:004045E2                 mov     edx, [ebp+FileName]
.text:004045E5                 mov     esi, [ebp+var_F0]
.text:004045EB                 mov     ebx, [ebp+var_EC]
.text:004045F1                 mov     [ebp+var_138], edx
.text:004045F7                 mov     edx, [ebp+var_E8]
.text:004045FD                 mov     [ebp+var_130], esi
.text:00404603                 mov     esi, [ebp+var_E4]
.text:00404609                 mov     [ebp+var_12C], ebx
.text:0040460F                 lea     ebx, [ebp+var_138]
.text:00404615                 mov     [ebp+var_128], edx
.text:0040461B                 mov     [ebp+var_124], esi
.text:00404621                 mov     [esp+298h+AccessMode], ebx
.text:00404625                 call    sub_40CA70
.text:0040462A                 test    eax, eax
.text:0040462C                 jnz     loc_404BFA
.text:00404632
.text:00404632 loc_404632:                             ; CODE XREF: sub_403270+1339↑j
.text:00404632                                         ; sub_403270+135E↑j ...
.text:00404632                 mov     ebx, [ebp+var_248]
.text:00404638                 and     ebx, 0F000h
.text:0040463E                 cmp     ebx, 4000h
.text:00404644                 jz      loc_4046E3
.text:0040464A                 mov     esi, [ebp+var_F8]
.text:00404650                 and     esi, 0F000h
.text:00404656                 cmp     esi, 4000h
.text:0040465C                 jz      loc_404BE3
.text:00404662                 mov     edx, [ebp+arg_18]
.text:00404665                 cmp     byte ptr [edx+30h], 0
.text:00404669                 jz      short loc_4046E3
.text:0040466B                 xor     ecx, ecx
.text:0040466D                 cmp     byte ptr [edx+1Fh], 0
.text:00404671                 mov     dword ptr [ebp+var_25C], ecx
.text:00404677                 jz      short loc_4046A6
.text:00404679                 cmp     byte ptr [edx+14h], 0
.text:0040467D                 jz      short loc_40469B
.text:0040467F                 mov     ebx, [ebp+var_E4]
.text:00404685                 mov     ecx, [ebp+var_E8]
.text:0040468B                 mov     eax, [ebp+var_78]
.text:0040468E                 mov     edx, [ebp+var_74]
.text:00404691                 mov     esi, ebx
.text:00404693                 xor     eax, ecx
.text:00404695                 xor     esi, edx
.text:00404697                 or      esi, eax
.text:00404699                 jz      short loc_4046A6
.text:0040469B
.text:0040469B loc_40469B:                             ; CODE XREF: sub_403270+140D↑j
.text:0040469B                 mov     eax, 1
.text:004046A0                 mov     dword ptr [ebp+var_25C], eax
.text:004046A6
.text:004046A6 loc_4046A6:                             ; CODE XREF: sub_403270+1407↑j
.text:004046A6                                         ; sub_403270+1429↑j
.text:004046A6                 mov     eax, dword ptr [ebp+var_25C]
.text:004046AC                 lea     edx, [ebp+var_88]
.text:004046B2                 mov     ebx, [ebp+FileName]
.text:004046B5                 mov     [esp+298h+Size], edx ; int
.text:004046B9                 lea     esi, [ebp+var_F8]
.text:004046BF                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:004046C3                 mov     [esp+298h+AccessMode], esi ; int
.text:004046C7                 mov     [esp+298h+Format], ebx ; char *
.text:004046CA                 call    sub_408D80
.text:004046CF                 test    eax, eax
.text:004046D1                 js      short loc_4046E3
.text:004046D3
.text:004046D3 loc_4046D3:                             ; CODE XREF: sub_403270+1805↓j
.text:004046D3                                         ; sub_403270+1895↓j
.text:004046D3                 test    edi, edi
.text:004046D5                 jz      loc_4040E0
.text:004046DB                 mov     byte ptr [edi], 1
.text:004046DE                 jmp     loc_4040E0
.text:004046E3 ; ---------------------------------------------------------------------------
.text:004046E3
.text:004046E3 loc_4046E3:                             ; CODE XREF: sub_403270+13D4↑j
.text:004046E3                                         ; sub_403270+13F9↑j ...
.text:004046E3                 mov     ecx, [ebp+var_248]
.text:004046E9                 and     ecx, 0F000h
.text:004046EF                 cmp     ecx, 4000h
.text:004046F5                 jz      loc_404AC0
.text:004046FB                 mov     edx, [ebp+arg_18]
.text:004046FE                 movzx   eax, byte ptr [edx+14h]
.text:00404702                 test    al, al
.text:00404704                 jz      loc_404B16
.text:0040470A                 mov     edx, [edx+10h]
.text:0040470D                 cmp     edx, 2
.text:00404710                 jz      loc_404AD8
.text:00404716
.text:00404716 loc_404716:                             ; CODE XREF: sub_403270+187A↓j
.text:00404716                                         ; sub_403270+18A1↓j
.text:00404716                 cmp     edx, 3
.text:00404719                 jz      loc_404A04
.text:0040471F                 cmp     edx, 4
.text:00404722                 jz      loc_4049C2
.text:00404728
.text:00404728 loc_404728:                             ; CODE XREF: sub_403270+17FF↓j
.text:00404728                 mov     esi, [ebp+arg_18]
.text:0040472B                 movzx   eax, byte ptr [esi+14h]
.text:0040472F
.text:0040472F loc_40472F:                             ; CODE XREF: sub_403270+1857↓j
.text:0040472F                                         ; sub_403270+18B8↓j
.text:0040472F                 mov     edx, [ebp+var_F8]
.text:00404735
.text:00404735 loc_404735:                             ; CODE XREF: sub_403270+1863↓j
.text:00404735                 test    al, al
.text:00404737                 jz      short loc_404765
.text:00404739                 mov     ebx, edx
.text:0040473B                 and     ebx, 0F000h
.text:00404741                 cmp     ebx, 4000h
.text:00404747                 jz      loc_404993
.text:0040474D                 mov     esi, [ebp+var_88]
.text:00404753                 and     esi, 0F000h
.text:00404759                 cmp     esi, 4000h
.text:0040475F                 jz      loc_404937
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_403270+14C7↑j
.text:00404765                 mov     ebx, [ebp+arg_18]
.text:00404768                 mov     ecx, [ebx]
.text:0040476A                 test    ecx, ecx
.text:0040476C                 jz      loc_4048B0
.text:00404772                 mov     esi, edx
.text:00404774                 and     esi, 0F000h
.text:0040477A                 cmp     esi, 4000h
.text:00404780                 jz      loc_4048B0
.text:00404786                 mov     [esp+298h+AccessMode], ecx ; int
.text:0040478A                 mov     ecx, [ebp+FileName]
.text:0040478D                 mov     [esp+298h+Format], ecx ; char *
.text:00404790                 call    sub_40AA60
.text:00404795                 mov     esi, eax
.text:00404797                 mov     eax, [ebp+Str2]
.text:0040479A                 mov     [esp+298h+Format], esi ; Str1
.text:0040479D                 mov     [esp+298h+AccessMode], eax ; Str2
.text:004047A1                 call    strcmp
.text:004047A6                 test    eax, eax
.text:004047A8                 jnz     short loc_404820
.text:004047AA                 mov     edi, [ebp+arg_18]
.text:004047AD                 cmp     byte ptr [edi+14h], 0
.text:004047B1                 jz      short loc_404817
.text:004047B3                 mov     [esp+298h+Format], offset loc_403000
.text:004047BA
.text:004047BA loc_4047BA:                             ; CODE XREF: sub_403270+15AE↓j
.text:004047BA                 call    ds:libintl_gettext
.text:004047C0                 mov     [esp+298h+Format], 1 ; int
.text:004047C7                 mov     ebx, [ebp+Str2]
.text:004047CA                 mov     edi, eax
.text:004047CC                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004047D0                 call    sub_40BBA0
.text:004047D5                 mov     [esp+298h+Format], 0 ; int
.text:004047DC                 mov     edx, [ebp+FileName]
.text:004047DF                 mov     ebx, eax
.text:004047E1                 mov     [esp+298h+AccessMode], edx ; char *
.text:004047E5                 call    sub_40BBA0
.text:004047EA                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:004047EE                 mov     [esp+298h+var_288], ebx
.text:004047F2                 mov     [esp+298h+Size], edi ; char *
.text:004047F6                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:004047FE                 mov     [esp+298h+Format], 0 ; Code
.text:00404805                 call    sub_415D50
.text:0040480A                 mov     [esp+298h+Format], esi ; Block
.text:0040480D                 call    free
.text:00404812                 jmp     loc_403340
.text:00404817 ; ---------------------------------------------------------------------------
.text:00404817
.text:00404817 loc_404817:                             ; CODE XREF: sub_403270+1541↑j
.text:00404817                 mov     [esp+298h+Format], offset dword_403040
.text:0040481E                 jmp     short loc_4047BA
.text:00404820 ; ---------------------------------------------------------------------------
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_403270+1538↑j
.text:00404820                 mov     [esp+298h+Format], esi ; Size
.text:00404823                 call    strlen
.text:00404828                 lea     ecx, [eax+1]
.text:0040482B                 add     eax, 10h
.text:0040482E                 and     eax, 0FFFFFFF0h
.text:00404831                 call    __alloca
.text:00404836                 mov     [esp+298h+Size], ecx ; Size
.text:0040483A                 lea     ebx, [esp+298h+var_27C]
.text:0040483E                 mov     [esp+298h+AccessMode], esi ; Src
.text:00404842                 mov     [esp+298h+Format], ebx ; void *
.text:00404845                 call    memcpy
.text:0040484A                 mov     [ebp+lpFileName], eax
.text:00404850                 mov     [esp+298h+Format], esi ; Block
.text:00404853                 call    free
.text:00404858                 mov     ecx, [ebp+lpFileName]
.text:0040485E                 mov     esi, [ebp+FileName]
.text:00404861                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:00404865                 mov     [esp+298h+Format], esi ; LPCSTR
.text:00404868                 call    sub_41A400
.text:0040486D                 test    eax, eax
.text:0040486F                 jnz     short loc_40487D
.text:00404871                 mov     [ebp+var_251], 1
.text:00404878                 jmp     loc_403454
.text:0040487D ; ---------------------------------------------------------------------------
.text:0040487D
.text:0040487D loc_40487D:                             ; CODE XREF: sub_403270+15FF↑j
.text:0040487D                 call    _errno
.text:00404882                 cmp     dword ptr [eax], 2
.text:00404885                 jz      short loc_40489E
.text:00404887                 mov     eax, [ebp+FileName]
.text:0040488A                 mov     [esp+298h+Format], eax ; char *
.text:0040488D                 call    sub_40BBD0
.text:00404892                 mov     [esp+298h+Format], 403073h
.text:00404899                 jmp     loc_403317
.text:0040489E ; ---------------------------------------------------------------------------
.text:0040489E
.text:0040489E loc_40489E:                             ; CODE XREF: sub_403270+1615↑j
.text:0040489E                 xor     edx, edx
.text:004048A0                 mov     [ebp+lpFileName], edx
.text:004048A6                 jmp     loc_403454
.text:004048A6 ; ---------------------------------------------------------------------------
.text:004048AB                 align 10h
.text:004048B0
.text:004048B0 loc_4048B0:                             ; CODE XREF: sub_403270+14FC↑j
.text:004048B0                                         ; sub_403270+1510↑j
.text:004048B0                 and     edx, 0F000h
.text:004048B6                 cmp     edx, 4000h
.text:004048BC                 jz      loc_403460
.text:004048C2                 mov     eax, [ebp+arg_18]
.text:004048C5                 cmp     byte ptr [eax+0Ch], 0
.text:004048C9                 jnz     short loc_4048FF
.text:004048CB                 cmp     byte ptr [eax+20h], 0
.text:004048CF                 jz      short loc_4048DA
.text:004048D1                 cmp     [ebp+var_E0], 1
.text:004048D8                 ja      short loc_4048FF
.text:004048DA
.text:004048DA loc_4048DA:                             ; CODE XREF: sub_403270+165F↑j
.text:004048DA                 mov     esi, [ebp+arg_18]
.text:004048DD                 cmp     dword ptr [esi+8], 2
.text:004048E1                 jnz     loc_403460
.text:004048E7                 mov     ebx, [ebp+var_88]
.text:004048ED                 and     ebx, 0F000h
.text:004048F3                 cmp     ebx, 8000h
.text:004048F9                 jz      loc_403460
.text:004048FF
.text:004048FF loc_4048FF:                             ; CODE XREF: sub_403270+1659↑j
.text:004048FF                                         ; sub_403270+1668↑j
.text:004048FF                 mov     eax, [ebp+FileName]
.text:00404902                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00404905                 call    sub_41A0D0
.text:0040490A                 test    eax, eax
.text:0040490C                 jz      loc_403454
.text:00404912                 call    _errno
.text:00404917                 cmp     dword ptr [eax], 2
.text:0040491A                 jz      loc_403454
.text:00404920                 mov     edi, [ebp+FileName]
.text:00404923
.text:00404923 loc_404923:                             ; CODE XREF: sub_403270+1A48↓j
.text:00404923                 mov     [esp+298h+Format], edi ; char *
.text:00404926                 call    sub_40BBD0
.text:0040492B                 mov     [esp+298h+Format], 402F61h
.text:00404932                 jmp     loc_403317
.text:00404937 ; ---------------------------------------------------------------------------
.text:00404937
.text:00404937 loc_404937:                             ; CODE XREF: sub_403270+14EF↑j
.text:00404937                 mov     [esp+298h+Format], 0 ; int
.text:0040493E                 mov     edx, [ebp+FileName]
.text:00404941                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404945                 call    sub_40BBA0
.text:0040494A                 mov     [esp+298h+Format], 0 ; int
.text:00404951                 mov     esi, eax
.text:00404953                 mov     eax, [ebp+Str2]
.text:00404956                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040495A                 call    sub_40BBA0
.text:0040495F                 mov     [esp+298h+Format], offset loc_4030A0
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_403270+19B9↓j
.text:00404966                                         ; sub_403270+19ED↓j ...
.text:00404966                 mov     ebx, eax
.text:00404968                 call    ds:libintl_gettext
.text:0040496E                 mov     [esp+298h+var_288], esi
.text:00404972                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00404976                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:0040497E                 mov     [esp+298h+Size], eax ; char *
.text:00404982                 mov     [esp+298h+Format], 0 ; Code
.text:00404989                 call    sub_415D50
.text:0040498E                 jmp     loc_403340
.text:00404993 ; ---------------------------------------------------------------------------
.text:00404993
.text:00404993 loc_404993:                             ; CODE XREF: sub_403270+14D7↑j
.text:00404993                 mov     edi, [ebp+FileName]
.text:00404996                 mov     [esp+298h+Format], edi ; char *
.text:00404999                 call    sub_40BBD0
.text:0040499E                 mov     [esp+298h+Format], 4030D3h
.text:004049A5
.text:004049A5 loc_4049A5:                             ; CODE XREF: sub_403270+1985↓j
.text:004049A5                                         ; sub_403270+1AC1↓j
.text:004049A5                 mov     ebx, eax
.text:004049A7                 call    ds:libintl_gettext
.text:004049AD                 mov     dword ptr [esp+298h+var_28C], ebx
.text:004049B1                 mov     [esp+298h+AccessMode], 0
.text:004049B9                 mov     [esp+298h+Size], eax
.text:004049BD                 jmp     loc_403334
.text:004049C2 ; ---------------------------------------------------------------------------
.text:004049C2
.text:004049C2 loc_4049C2:                             ; CODE XREF: sub_403270+14B2↑j
.text:004049C2                 mov     ecx, [ebp+arg_18]
.text:004049C5                 cmp     byte ptr [ecx+32h], 0
.text:004049C9                 jz      loc_404AC0
.text:004049CF                 mov     edx, [ebp+var_F8]
.text:004049D5                 mov     ebx, edx
.text:004049D7                 and     ebx, 0F000h
.text:004049DD                 cmp     ebx, 0A000h
.text:004049E3                 jz      loc_404ACC
.text:004049E9                 mov     [esp+298h+AccessMode], 2 ; int
.text:004049F1                 mov     esi, [ebp+FileName]
.text:004049F4                 mov     [esp+298h+Format], esi ; LPCSTR
.text:004049F7                 call    sub_415FF0
.text:004049FC                 test    eax, eax
.text:004049FE                 jz      loc_404AC0
.text:00404A04
.text:00404A04 loc_404A04:                             ; CODE XREF: sub_403270+14A9↑j
.text:00404A04                 mov     [esp+298h+AccessMode], 2 ; int
.text:00404A0C                 mov     edx, [ebp+FileName]
.text:00404A0F                 mov     [esp+298h+Format], edx ; LPCSTR
.text:00404A12                 call    sub_415FF0
.text:00404A17                 test    eax, eax
.text:00404A19                 jz      short loc_404A7A
.text:00404A1B                 mov     edx, [ebp+FileName]
.text:00404A1E                 mov     [esp+298h+Format], edx ; char *
.text:00404A21                 call    sub_40BBD0
.text:00404A26                 mov     [esp+298h+Format], offset loc_403100
.text:00404A2D                 mov     esi, eax
.text:00404A2F                 call    ds:libintl_gettext
.text:00404A35                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404A39                 mov     ecx, [ebp+var_F8]
.text:00404A3F                 mov     ebx, ds:dword_422930
.text:00404A45                 mov     [esp+298h+AccessMode], eax ; Format
.text:00404A49                 and     ecx, 0FFFh
.text:00404A4F                 mov     [esp+298h+var_288], ecx
.text:00404A53                 mov     ecx, ds:_iob
.text:00404A59                 mov     [esp+298h+Size], ebx
.text:00404A5D                 add     ecx, 40h ; '@'
.text:00404A60                 mov     [esp+298h+Format], ecx ; Stream
.text:00404A63                 call    fprintf
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: sub_403270+1847↓j
.text:00404A68                 call    sub_40BF70
.text:00404A6D                 test    al, al
.text:00404A6F                 jnz     loc_404728
.text:00404A75                 jmp     loc_4046D3
.text:00404A7A ; ---------------------------------------------------------------------------
.text:00404A7A
.text:00404A7A loc_404A7A:                             ; CODE XREF: sub_403270+17A9↑j
.text:00404A7A                 mov     eax, [ebp+FileName]
.text:00404A7D                 mov     [esp+298h+Format], eax ; char *
.text:00404A80                 call    sub_40BBD0
.text:00404A85                 mov     [esp+298h+Format], offset loc_40312A
.text:00404A8C                 mov     esi, eax
.text:00404A8E                 call    ds:libintl_gettext
.text:00404A94                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404A98                 mov     ebx, ds:_iob
.text:00404A9E                 mov     esi, ds:dword_422930
.text:00404AA4                 mov     [esp+298h+AccessMode], eax ; Format
.text:00404AA8                 add     ebx, 40h ; '@'
.text:00404AAB                 mov     [esp+298h+Size], esi
.text:00404AAF                 mov     [esp+298h+Format], ebx ; Stream
.text:00404AB2                 call    fprintf
.text:00404AB7                 jmp     short loc_404A68
.text:00404AB7 ; ---------------------------------------------------------------------------
.text:00404AB9                 align 10h
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_403270+1485↑j
.text:00404AC0                                         ; sub_403270+1759↑j ...
.text:00404AC0                 mov     ecx, [ebp+arg_18]
.text:00404AC3                 movzx   eax, byte ptr [ecx+14h]
.text:00404AC7                 jmp     loc_40472F
.text:00404ACC ; ---------------------------------------------------------------------------
.text:00404ACC
.text:00404ACC loc_404ACC:                             ; CODE XREF: sub_403270+1773↑j
.text:00404ACC                 mov     ebx, [ebp+arg_18]
.text:00404ACF                 movzx   eax, byte ptr [ebx+14h]
.text:00404AD3                 jmp     loc_404735
.text:00404AD8 ; ---------------------------------------------------------------------------
.text:00404AD8
.text:00404AD8 loc_404AD8:                             ; CODE XREF: sub_403270+14A0↑j
.text:00404AD8                 mov     esi, [ebp+var_F8]
.text:00404ADE                 and     esi, 0F000h
.text:00404AE4                 cmp     esi, 0A000h
.text:00404AEA                 jz      loc_404716
.text:00404AF0                 mov     [esp+298h+AccessMode], 2 ; int
.text:00404AF8                 mov     edx, [ebp+FileName]
.text:00404AFB                 mov     [esp+298h+Format], edx ; LPCSTR
.text:00404AFE                 call    sub_415FF0
.text:00404B03                 test    eax, eax
.text:00404B05                 jnz     loc_4046D3
.text:00404B0B                 mov     eax, [ebp+arg_18]
.text:00404B0E                 mov     edx, [eax+10h]
.text:00404B11                 jmp     loc_404716
.text:00404B16 ; ---------------------------------------------------------------------------
.text:00404B16
.text:00404B16 loc_404B16:                             ; CODE XREF: sub_403270+1494↑j
.text:00404B16                 mov     ebx, [ebp+arg_18]
.text:00404B19                 mov     edx, [ebx+10h]
.text:00404B1C                 cmp     edx, 2
.text:00404B1F                 jz      loc_4040E0
.text:00404B25                 cmp     edx, 3
.text:00404B28                 jnz     loc_40472F
.text:00404B2E                 mov     [esp+298h+AccessMode], 2 ; int
.text:00404B36                 mov     ecx, [ebp+FileName]
.text:00404B39                 mov     [esp+298h+Format], ecx ; LPCSTR
.text:00404B3C                 call    sub_415FF0
.text:00404B41                 test    eax, eax
.text:00404B43                 jz      short loc_404BA4
.text:00404B45                 mov     eax, [ebp+FileName]
.text:00404B48                 mov     [esp+298h+Format], eax ; char *
.text:00404B4B                 call    sub_40BBD0
.text:00404B50                 mov     [esp+298h+Format], offset loc_403100
.text:00404B57                 mov     esi, eax
.text:00404B59                 call    ds:libintl_gettext
.text:00404B5F                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404B63                 mov     ebx, [ebp+var_F8]
.text:00404B69                 mov     edx, ds:_iob
.text:00404B6F                 mov     esi, ds:dword_422930
.text:00404B75                 and     ebx, 0FFFh
.text:00404B7B                 add     edx, 40h ; '@'
.text:00404B7E                 mov     [esp+298h+var_288], ebx
.text:00404B82                 mov     [esp+298h+Size], esi
.text:00404B86                 mov     [esp+298h+AccessMode], eax ; Format
.text:00404B8A                 mov     [esp+298h+Format], edx ; Stream
.text:00404B8D                 call    fprintf
.text:00404B92
.text:00404B92 loc_404B92:                             ; CODE XREF: sub_403270+1971↓j
.text:00404B92                 call    sub_40BF70
.text:00404B97                 test    al, al
.text:00404B99                 jnz     loc_404AC0
.text:00404B9F                 jmp     loc_4040E0
.text:00404BA4 ; ---------------------------------------------------------------------------
.text:00404BA4
.text:00404BA4 loc_404BA4:                             ; CODE XREF: sub_403270+18D3↑j
.text:00404BA4                 mov     edx, [ebp+FileName]
.text:00404BA7                 mov     [esp+298h+Format], edx ; char *
.text:00404BAA                 call    sub_40BBD0
.text:00404BAF                 mov     [esp+298h+Format], offset loc_40312A
.text:00404BB6                 mov     esi, eax
.text:00404BB8                 call    ds:libintl_gettext
.text:00404BBE                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404BC2                 mov     ecx, ds:_iob
.text:00404BC8                 mov     esi, ds:dword_422930
.text:00404BCE                 mov     [esp+298h+AccessMode], eax ; Format
.text:00404BD2                 add     ecx, 40h ; '@'
.text:00404BD5                 mov     [esp+298h+Size], esi
.text:00404BD9                 mov     [esp+298h+Format], ecx ; Stream
.text:00404BDC                 call    fprintf
.text:00404BE1                 jmp     short loc_404B92
.text:00404BE3 ; ---------------------------------------------------------------------------
.text:00404BE3
.text:00404BE3 loc_404BE3:                             ; CODE XREF: sub_403270+13EC↑j
.text:00404BE3                 mov     edx, [ebp+FileName]
.text:00404BE6                 mov     [esp+298h+Format], edx ; char *
.text:00404BE9                 call    sub_40BBD0
.text:00404BEE                 mov     [esp+298h+Format], offset loc_403140
.text:00404BF5                 jmp     loc_4049A5
.text:00404BFA ; ---------------------------------------------------------------------------
.text:00404BFA
.text:00404BFA loc_404BFA:                             ; CODE XREF: sub_403270+13BC↑j
.text:00404BFA                 mov     [esp+298h+Format], 1 ; int
.text:00404C01                 mov     ecx, [ebp+Str2]
.text:00404C04                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404C08                 call    sub_40BBA0
.text:00404C0D                 mov     [esp+298h+Format], 0 ; int
.text:00404C14                 mov     edi, [ebp+FileName]
.text:00404C17                 mov     esi, eax
.text:00404C19                 mov     [esp+298h+AccessMode], edi ; char *
.text:00404C1D                 call    sub_40BBA0
.text:00404C22                 mov     [esp+298h+Format], offset loc_403180
.text:00404C29                 jmp     loc_404966
.text:00404C2E ; ---------------------------------------------------------------------------
.text:00404C2E
.text:00404C2E loc_404C2E:                             ; CODE XREF: sub_403270+1351↑j
.text:00404C2E                 mov     [esp+298h+Format], 1 ; int
.text:00404C35                 mov     eax, [ebp+Str2]
.text:00404C38                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404C3C                 call    sub_40BBA0
.text:00404C41                 mov     [esp+298h+Format], 0 ; int
.text:00404C48                 mov     edi, [ebp+FileName]
.text:00404C4B                 mov     esi, eax
.text:00404C4D                 mov     [esp+298h+AccessMode], edi ; char *
.text:00404C51                 call    sub_40BBA0
.text:00404C56                 mov     [esp+298h+Format], offset loc_4031C0
.text:00404C5D                 jmp     loc_404966
.text:00404C62 ; ---------------------------------------------------------------------------
.text:00404C62
.text:00404C62 loc_404C62:                             ; CODE XREF: sub_403270+1321↑j
.text:00404C62                 mov     [esp+298h+Format], 1 ; int
.text:00404C69                 mov     edx, [ebp+FileName]
.text:00404C6C                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404C70                 call    sub_40BBA0
.text:00404C75                 mov     [esp+298h+Format], 0 ; int
.text:00404C7C                 mov     ebx, [ebp+Str2]
.text:00404C7F                 mov     esi, eax
.text:00404C81                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00404C85                 call    sub_40BBA0
.text:00404C8A                 mov     [esp+298h+Format], 4031F4h
.text:00404C91                 jmp     loc_404966
.text:00404C96 ; ---------------------------------------------------------------------------
.text:00404C96
.text:00404C96 loc_404C96:                             ; CODE XREF: sub_403270+130C↑j
.text:00404C96                 mov     eax, [ebp+Str2]
.text:00404C99                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00404C9C                 call    sub_41A0D0
.text:00404CA1                 test    eax, eax
.text:00404CA3                 jnz     short loc_404CB5
.text:00404CA5                 test    edi, edi
.text:00404CA7                 jz      loc_404582
.text:00404CAD                 mov     byte ptr [edi], 1
.text:00404CB0                 jmp     loc_404582
.text:00404CB5 ; ---------------------------------------------------------------------------
.text:00404CB5
.text:00404CB5 loc_404CB5:                             ; CODE XREF: sub_403270+1A33↑j
.text:00404CB5                 mov     edi, [ebp+Str2]
.text:00404CB8                 jmp     loc_404923
.text:00404CBD ; ---------------------------------------------------------------------------
.text:00404CBD
.text:00404CBD loc_404CBD:                             ; CODE XREF: sub_403270+1AF↑j
.text:00404CBD                 mov     ecx, [ebp+FileName]
.text:00404CC0                 lea     esi, [ebp+var_F8]
.text:00404CC6                 mov     [esp+298h+AccessMode], esi
.text:00404CCA                 mov     [esp+298h+Format], ecx
.text:00404CCD                 call    sub_418250
.text:00404CD2                 jmp     loc_40343A
.text:00404CD7 ; ---------------------------------------------------------------------------
.text:00404CD7
.text:00404CD7 loc_404CD7:                             ; CODE XREF: sub_403270+173↑j
.text:00404CD7                 mov     eax, [ebp+Str2]
.text:00404CDA                 mov     [esp+298h+Format], eax ; char *
.text:00404CDD                 call    sub_40BBD0
.text:00404CE2                 mov     [esp+298h+Format], offset sub_403220
.text:00404CE9                 mov     edi, eax
.text:00404CEB                 call    ds:libintl_gettext
.text:00404CF1                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00404CF5                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00404CFD                 mov     [esp+298h+Format], 0 ; Code
.text:00404D04                 mov     [esp+298h+Size], eax ; char *
.text:00404D08                 call    sub_415D50
.text:00404D0D                 jmp     loc_4040E0
.text:00404D12 ; ---------------------------------------------------------------------------
.text:00404D12
.text:00404D12 loc_404D12:                             ; CODE XREF: sub_403270+FB↑j
.text:00404D12                 mov     edx, [ebp+arg_18]
.text:00404D15                 cmp     byte ptr [edx+22h], 0
.text:00404D19                 jnz     loc_403371
.text:00404D1F                 mov     esi, [ebp+Str2]
.text:00404D22                 mov     [esp+298h+Format], esi ; char *
.text:00404D25                 call    sub_40BBD0
.text:00404D2A                 mov     [esp+298h+Format], offset loc_403251
.text:00404D31                 jmp     loc_4049A5
.text:00404D36 ; ---------------------------------------------------------------------------
.text:00404D36
.text:00404D36 loc_404D36:                             ; CODE XREF: sub_403270+76↑j
.text:00404D36                 mov     ebx, [ebp+Str2]
.text:00404D39                 lea     eax, [ebp+var_88]
.text:00404D3F                 mov     [esp+298h+AccessMode], eax
.text:00404D43                 mov     [esp+298h+Format], ebx
.text:00404D46                 call    sub_418250
.text:00404D4B                 jmp     loc_403301
.text:00404D4B sub_403270      endp
.text:00404D4B
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50
.text:00404D50 sub_404D50      proc near               ; CODE XREF: sub_401EE0+7A0↑p
.text:00404D50
.text:00404D50 var_1C          = dword ptr -1Ch
.text:00404D50 var_18          = dword ptr -18h
.text:00404D50 var_14          = dword ptr -14h
.text:00404D50 var_10          = dword ptr -10h
.text:00404D50 var_C           = dword ptr -0Ch
.text:00404D50 arg_0           = dword ptr  4
.text:00404D50
.text:00404D50                 sub     esp, 1Ch
.text:00404D53                 mov     [esp+1Ch+var_C], offset sub_405E00
.text:00404D5B                 mov     [esp+1Ch+var_10], offset sub_405D70
.text:00404D63                 mov     [esp+1Ch+var_14], offset sub_405CE0
.text:00404D6B                 mov     [esp+1Ch+var_18], 0
.text:00404D73                 mov     [esp+1Ch+var_1C], 3Dh ; '='
.text:00404D7A                 call    sub_40C0D0
.text:00404D7F                 mov     ecx, [esp+1Ch+arg_0]
.text:00404D83                 mov     [ecx+34h], eax
.text:00404D86                 add     esp, 1Ch
.text:00404D89                 retn
.text:00404D89 sub_404D50      endp
.text:00404D89
.text:00404D89 ; ---------------------------------------------------------------------------
.text:00404D8A                 align 10h
.text:00404D90                 sub     esp, 1Ch
.text:00404D93                 mov     dword ptr [esp+10h], offset sub_405E00
.text:00404D9B                 mov     dword ptr [esp+0Ch], offset sub_405D70
.text:00404DA3                 mov     dword ptr [esp+8], offset sub_405D40
.text:00404DAB                 mov     dword ptr [esp+4], 0
.text:00404DB3                 mov     dword ptr [esp], 3Dh ; '='
.text:00404DBA                 call    sub_40C0D0
.text:00404DBF                 mov     ecx, [esp+20h]
.text:00404DC3                 mov     [ecx+38h], eax
.text:00404DC6                 add     esp, 1Ch
.text:00404DC9                 retn
.text:00404DC9 ; ---------------------------------------------------------------------------
.text:00404DCA                 align 20h
.text:00404DE0 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/src/copy.c',0
.text:00404DE0                                         ; DATA XREF: sub_404E90+A0↓o
.text:00404DE0                                         ; sub_404E90+BC↓o ...
.text:00404E05                 align 20h
.text:00404E20 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.text:00404E20                                         ; DATA XREF: sub_404E90+A8↓o
.text:00404E44                 align 20h
.text:00404E60 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.text:00404E60                                         ; DATA XREF: sub_404E90+C4↓o
.text:00404E84 aCoNull         db 'co != NULL',0       ; DATA XREF: sub_404E90+DD↓o
.text:00404E8F                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90
.text:00404E90 ; int __cdecl sub_404E90(char *, char *, char, int, int, int)
.text:00404E90 sub_404E90      proc near               ; CODE XREF: sub_402B60+3A↑p
.text:00404E90
.text:00404E90 Str2            = dword ptr -3Ch
.text:00404E90 FileName        = dword ptr -38h
.text:00404E90 var_34          = dword ptr -34h
.text:00404E90 var_30          = dword ptr -30h
.text:00404E90 var_2C          = dword ptr -2Ch
.text:00404E90 var_28          = dword ptr -28h
.text:00404E90 var_24          = dword ptr -24h
.text:00404E90 var_20          = byte ptr -20h
.text:00404E90 var_1C          = dword ptr -1Ch
.text:00404E90 var_18          = dword ptr -18h
.text:00404E90 var_8           = dword ptr -8
.text:00404E90 var_4           = dword ptr -4
.text:00404E90 arg_0           = dword ptr  4
.text:00404E90 arg_4           = dword ptr  8
.text:00404E90 arg_8           = byte ptr  0Ch
.text:00404E90 arg_C           = dword ptr  10h
.text:00404E90 arg_10          = dword ptr  14h
.text:00404E90 arg_14          = dword ptr  18h
.text:00404E90
.text:00404E90                 sub     esp, 3Ch
.text:00404E93                 mov     edx, [esp+3Ch+arg_C]
.text:00404E97                 mov     [esp+3Ch+var_8], ebx
.text:00404E9B                 mov     ebx, [esp+3Ch+arg_4]
.text:00404E9F                 test    edx, edx
.text:00404EA1                 mov     [esp+3Ch+var_4], esi
.text:00404EA5                 mov     esi, [esp+3Ch+arg_0]
.text:00404EA9                 movzx   ecx, [esp+3Ch+arg_8]
.text:00404EAE                 jz      loc_404F5D
.text:00404EB4                 cmp     dword ptr [edx], 3
.text:00404EB7                 ja      loc_404F44
.text:00404EBD                 mov     eax, [edx+28h]
.text:00404EC0                 dec     eax
.text:00404EC1                 cmp     eax, 2
.text:00404EC4                 ja      short loc_404F28
.text:00404EC6                 mov     [esp+3Ch+var_24], edx ; int
.text:00404ECA                 mov     eax, [esp+3Ch+arg_14]
.text:00404ECE                 movzx   edx, cl
.text:00404ED1                 mov     [esp+3Ch+FileName], ebx ; FileName
.text:00404ED5                 mov     [esp+3Ch+var_18], eax ; int
.text:00404ED9                 mov     eax, [esp+3Ch+arg_10]
.text:00404EDD                 mov     [esp+3Ch+Str2], esi ; Str2
.text:00404EE0                 mov     ds:dword_422010, esi
.text:00404EE6                 mov     ds:dword_422020, ebx
.text:00404EEC                 mov     [esp+3Ch+var_1C], eax ; int
.text:00404EF0                 mov     dword ptr [esp+3Ch+var_20], 1 ; char
.text:00404EF8                 mov     [esp+3Ch+var_28], 0 ; int
.text:00404F00                 mov     [esp+3Ch+var_30], 0 ; int
.text:00404F08                 mov     [esp+3Ch+var_2C], 0 ; int
.text:00404F10                 mov     [esp+3Ch+var_34], edx ; int
.text:00404F14                 call    sub_403270
.text:00404F19                 mov     ebx, [esp+3Ch+var_8]
.text:00404F1D                 movzx   eax, al
.text:00404F20                 mov     esi, [esp+3Ch+var_4]
.text:00404F24                 add     esp, 3Ch
.text:00404F27                 retn
.text:00404F28 ; ---------------------------------------------------------------------------
.text:00404F28
.text:00404F28 loc_404F28:                             ; CODE XREF: sub_404E90+34↑j
.text:00404F28                 mov     [esp+3Ch+var_34], 67Ah
.text:00404F30                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/copy.c"
.text:00404F38                 mov     [esp+3Ch+Str2], offset aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:00404F3F
.text:00404F3F loc_404F3F:                             ; CODE XREF: sub_404E90+CB↓j
.text:00404F3F                                         ; sub_404E90+E4↓j
.text:00404F3F                 call    _assert
.text:00404F44 ; ---------------------------------------------------------------------------
.text:00404F44
.text:00404F44 loc_404F44:                             ; CODE XREF: sub_404E90+27↑j
.text:00404F44                 mov     [esp+3Ch+var_34], 679h
.text:00404F4C                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/copy.c"
.text:00404F54                 mov     [esp+3Ch+Str2], offset aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:00404F5B                 jmp     short loc_404F3F
.text:00404F5D ; ---------------------------------------------------------------------------
.text:00404F5D
.text:00404F5D loc_404F5D:                             ; CODE XREF: sub_404E90+1E↑j
.text:00404F5D                 mov     [esp+3Ch+var_34], 678h
.text:00404F65                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/copy.c"
.text:00404F6D                 mov     [esp+3Ch+Str2], offset aCoNull ; "co != NULL"
.text:00404F74                 jmp     short loc_404F3F
.text:00404F74 sub_404E90      endp
.text:00404F74
.text:00404F74 ; ---------------------------------------------------------------------------
.text:00404F76 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_404F90+195↓o
.text:00404F87                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 ; int __cdecl sub_404F90(LPCSTR, int, char, int, int, int, int)
.text:00404F90 sub_404F90      proc near               ; CODE XREF: sub_403270+D9C↑p
.text:00404F90
.text:00404F90 Block           = dword ptr -9Ch
.text:00404F90 ErrorMessage    = dword ptr -98h
.text:00404F90 var_94          = dword ptr -94h
.text:00404F90 var_90          = byte ptr -90h
.text:00404F90 var_8C          = dword ptr -8Ch
.text:00404F90 var_88          = dword ptr -88h
.text:00404F90 var_84          = dword ptr -84h
.text:00404F90 var_80          = byte ptr -80h
.text:00404F90 var_7C          = dword ptr -7Ch
.text:00404F90 var_78          = dword ptr -78h
.text:00404F90 var_60          = byte ptr -60h
.text:00404F90 var_5F          = byte ptr -5Fh
.text:00404F90 var_5E          = byte ptr -5Eh
.text:00404F90 var_5D          = dword ptr -5Dh
.text:00404F90 var_54          = dword ptr -54h
.text:00404F90 arg_0           = dword ptr  4
.text:00404F90 arg_4           = dword ptr  8
.text:00404F90 arg_8           = byte ptr  0Ch
.text:00404F90 arg_C           = dword ptr  10h
.text:00404F90 arg_10          = dword ptr  14h
.text:00404F90 arg_14          = dword ptr  18h
.text:00404F90 arg_18          = dword ptr  1Ch
.text:00404F90
.text:00404F90                 push    ebp
.text:00404F91                 mov     ecx, 0Fh
.text:00404F96                 push    edi
.text:00404F97                 push    esi
.text:00404F98                 push    ebx
.text:00404F99                 sub     esp, 8Ch
.text:00404F9F                 mov     ebx, [esp+9Ch+arg_14]
.text:00404FA6                 movzx   edx, [esp+9Ch+arg_8]
.text:00404FAE                 lea     edi, [esp+9Ch+var_5D+1]
.text:00404FB2                 cld
.text:00404FB3                 mov     esi, ebx
.text:00404FB5                 rep movsd
.text:00404FB7                 mov     [esp+9Ch+var_5E], dl
.text:00404FBB                 mov     edx, [esp+9Ch+arg_0]
.text:00404FC2                 mov     [esp+9Ch+var_5F], 1
.text:00404FC7                 mov     [esp+9Ch+Block], edx ; LPCSTR
.text:00404FCA                 call    sub_40D020
.text:00404FCF                 test    eax, eax
.text:00404FD1                 mov     ebp, eax
.text:00404FD3                 jz      loc_405116
.text:00404FD9                 cmp     dword ptr [ebx+8], 3
.text:00404FDD                 jz      loc_405109
.text:00404FE3
.text:00404FE3 loc_404FE3:                             ; CODE XREF: sub_404F90+181↓j
.text:00404FE3                 cmp     byte ptr [ebp+0], 0
.text:00404FE7                 mov     ebx, ebp
.text:00404FE9                 jz      loc_4050F1
.text:00404FEF                 nop
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404F90+15B↓j
.text:00404FF0                 mov     [esp+9Ch+var_94], 0 ; int
.text:00404FF8                 mov     edi, [esp+9Ch+arg_0]
.text:00404FFF                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:00405003                 mov     [esp+9Ch+Block], edi ; int
.text:00405006                 call    sub_40BA70
.text:0040500B                 mov     [esp+9Ch+var_94], 0 ; int
.text:00405013                 mov     edi, eax
.text:00405015                 mov     eax, [esp+9Ch+arg_4]
.text:0040501C                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:00405020                 mov     [esp+9Ch+Block], eax ; int
.text:00405023                 call    sub_40BA70
.text:00405028                 mov     [esp+9Ch+var_78], 0 ; int
.text:00405030                 mov     esi, eax
.text:00405032                 lea     ecx, [esp+9Ch+var_5D+1]
.text:00405036                 mov     [esp+9Ch+var_84], ecx ; int
.text:0040503A                 mov     eax, [esp+9Ch+arg_10]
.text:00405041                 lea     edx, [esp+9Ch+var_5D]
.text:00405045                 mov     [esp+9Ch+var_7C], edx ; int
.text:00405049                 mov     ecx, [esp+9Ch+arg_C]
.text:00405050                 mov     dword ptr [esp+9Ch+var_80], 0 ; char
.text:00405058                 mov     [esp+9Ch+var_88], eax ; int
.text:0040505C                 mov     edx, [ecx+14h]
.text:0040505F                 mov     [esp+9Ch+var_60], 0
.text:00405064                 mov     eax, [ecx+10h]
.text:00405067                 mov     [esp+9Ch+ErrorMessage], esi ; FileName
.text:0040506B                 mov     [esp+9Ch+var_8C], edx ; int
.text:0040506F                 movzx   edx, [esp+9Ch+var_5E]
.text:00405074                 mov     dword ptr [esp+9Ch+var_90], eax ; int
.text:00405078                 mov     [esp+9Ch+Block], edi ; Str2
.text:0040507B                 mov     [esp+9Ch+var_94], edx ; int
.text:0040507F                 call    sub_403270
.text:00405084                 test    al, al
.text:00405086                 jz      short loc_4050A0
.text:00405088                 cmp     [esp+9Ch+var_5F], 0
.text:0040508D                 jz      short loc_4050A0
.text:0040508F                 mov     [esp+9Ch+var_60], 1
.text:00405094                 lea     esi, [esi+0]
.text:0040509A                 lea     edi, [edi+0]
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: sub_404F90+F6↑j
.text:004050A0                                         ; sub_404F90+FD↑j
.text:004050A0                 movzx   ecx, [esp+9Ch+var_60]
.text:004050A5                 xor     eax, eax
.text:004050A7                 cmp     byte ptr [esp+9Ch+var_5D], 0
.text:004050AC                 mov     [esp+9Ch+var_5F], cl
.text:004050B0                 jnz     short loc_4050BE
.text:004050B2                 mov     ecx, [esp+9Ch+arg_18]
.text:004050B9                 cmp     byte ptr [ecx], 0
.text:004050BC                 jz      short loc_4050C0
.text:004050BE
.text:004050BE loc_4050BE:                             ; CODE XREF: sub_404F90+120↑j
.text:004050BE                 mov     al, 1
.text:004050C0
.text:004050C0 loc_4050C0:                             ; CODE XREF: sub_404F90+12C↑j
.text:004050C0                 mov     edx, [esp+9Ch+arg_18]
.text:004050C7                 mov     [edx], al
.text:004050C9                 mov     [esp+9Ch+Block], esi ; Block
.text:004050CC                 call    free
.text:004050D1                 mov     [esp+9Ch+Block], edi ; Block
.text:004050D4                 call    free
.text:004050D9                 mov     [esp+9Ch+Block], ebx ; Str
.text:004050DC                 call    strlen
.text:004050E1                 lea     esi, [eax+ebx]
.text:004050E4                 lea     ebx, [esi+1]
.text:004050E7                 cmp     byte ptr [esi+1], 0
.text:004050EB                 jnz     loc_404FF0
.text:004050F1
.text:004050F1 loc_4050F1:                             ; CODE XREF: sub_404F90+59↑j
.text:004050F1                 mov     [esp+9Ch+Block], ebp ; Block
.text:004050F4                 call    free
.text:004050F9                 movzx   eax, [esp+9Ch+var_5F]
.text:004050FE
.text:004050FE loc_4050FE:                             ; CODE XREF: sub_404F90+1C7↓j
.text:004050FE                 add     esp, 8Ch
.text:00405104                 pop     ebx
.text:00405105                 pop     esi
.text:00405106                 pop     edi
.text:00405107                 pop     ebp
.text:00405108                 retn
.text:00405109 ; ---------------------------------------------------------------------------
.text:00405109
.text:00405109 loc_405109:                             ; CODE XREF: sub_404F90+4D↑j
.text:00405109                 mov     [esp+9Ch+var_54], 2
.text:00405111                 jmp     loc_404FE3
.text:00405116 ; ---------------------------------------------------------------------------
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_404F90+43↑j
.text:00405116                 mov     eax, [esp+9Ch+arg_0]
.text:0040511D                 mov     [esp+9Ch+Block], eax ; char *
.text:00405120                 call    sub_40BBD0
.text:00405125                 mov     [esp+9Ch+Block], offset aCannotAccessS ; "cannot access %s"
.text:0040512C                 mov     ebx, eax
.text:0040512E                 call    ds:libintl_gettext
.text:00405134                 mov     esi, eax
.text:00405136                 call    _errno
.text:0040513B                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:0040513F                 mov     [esp+9Ch+var_94], esi ; char *
.text:00405143                 mov     ecx, [eax]
.text:00405145                 mov     [esp+9Ch+Block], 0 ; Code
.text:0040514C                 mov     [esp+9Ch+ErrorMessage], ecx ; ErrorMessage
.text:00405150                 call    sub_415D50
.text:00405155                 xor     eax, eax
.text:00405157                 jmp     short loc_4050FE
.text:00405157 sub_404F90      endp
.text:00405157
.text:00405157 ; ---------------------------------------------------------------------------
.text:00405159                 align 10h
.text:00405160 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.text:00405160                                         ; DATA XREF: sub_405220+BD↓o
.text:00405198 aClosingS       db 'closing %s',0       ; DATA XREF: sub_405220+11C↓o
.text:00405198                                         ; sub_405220+338↓o
.text:004051A3 aWritingS       db 'writing %s',0       ; DATA XREF: sub_405220+2E0↓o
.text:004051AE aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: sub_405220+39E↓o
.text:004051BE byte_4051BE     db 0                    ; DATA XREF: sub_405220+3C1↓o
.text:004051BF aReadingS       db 'reading %s',0       ; DATA XREF: sub_405220+41E↓o
.text:004051CA aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: sub_405220+4D0↓o
.text:004051CA                                         ; sub_405220+5A7↓o
.text:004051DA aCannotCreateRe db 'cannot create regular file %s',0
.text:004051DA                                         ; DATA XREF: sub_405220+533↓o
.text:004051F8 aCannotOpenSFor db 'cannot open %s for reading',0
.text:004051F8                                         ; DATA XREF: sub_405220+5C2↓o
.text:00405213                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220
.text:00405220 ; int __cdecl sub_405220(char *, LPCSTR, int, __int16, int, int)
.text:00405220 sub_405220      proc near               ; CODE XREF: sub_403270+8D1↑p
.text:00405220
.text:00405220 FileName        = dword ptr -12Ch
.text:00405220 OpenFlag        = dword ptr -128h
.text:00405220 MaxCharCount    = dword ptr -124h
.text:00405220 Origin          = dword ptr -120h
.text:00405220 var_116         = byte ptr -116h
.text:00405220 var_115         = byte ptr -115h
.text:00405220 var_114         = dword ptr -114h
.text:00405220 var_110         = dword ptr -110h
.text:00405220 var_105         = byte ptr -105h
.text:00405220 FileHandle      = dword ptr -104h
.text:00405220 var_100         = dword ptr -100h
.text:00405220 var_FC          = dword ptr -0FCh
.text:00405220 var_F4          = dword ptr -0F4h
.text:00405220 var_F0          = dword ptr -0F0h
.text:00405220 var_EC          = dword ptr -0ECh
.text:00405220 var_E8          = dword ptr -0E8h
.text:00405220 var_8C          = dword ptr -8Ch
.text:00405220 var_5C          = dword ptr -5Ch
.text:00405220 var_58          = dword ptr -58h
.text:00405220 var_3C          = dword ptr -3Ch
.text:00405220 var_34          = dword ptr -34h
.text:00405220 var_30          = dword ptr -30h
.text:00405220 arg_0           = dword ptr  4
.text:00405220 arg_4           = dword ptr  8
.text:00405220 arg_8           = dword ptr  0Ch
.text:00405220 arg_C           = word ptr  10h
.text:00405220 arg_10          = dword ptr  14h
.text:00405220 arg_14          = dword ptr  18h
.text:00405220
.text:00405220                 push    ebp
.text:00405221                 push    edi
.text:00405222                 push    esi
.text:00405223                 push    ebx
.text:00405224                 sub     esp, 11Ch
.text:0040522A                 mov     edx, [esp+12Ch+arg_0]
.text:00405231                 movzx   edi, [esp+12Ch+arg_C]
.text:00405239                 mov     [esp+12Ch+var_105], 1
.text:0040523E                 mov     ebp, [esp+12Ch+arg_14]
.text:00405245                 mov     [esp+12Ch+var_114], 0
.text:0040524D                 mov     [esp+12Ch+var_110], 0
.text:00405255                 mov     [esp+12Ch+var_115], 0
.text:0040525A                 mov     [esp+12Ch+var_116], 0
.text:0040525F                 mov     [esp+12Ch+OpenFlag], 8000h ; OpenFlag
.text:00405267                 mov     [esp+12Ch+FileName], edx ; FileName
.text:0040526A                 call    _open
.text:0040526F                 mov     [esp+12Ch+FileHandle], eax
.text:00405273                 test    eax, eax
.text:00405275                 js      loc_4057D3
.text:0040527B                 mov     ecx, [esp+12Ch+arg_0]
.text:00405282                 lea     esi, [esp+12Ch+var_FC]
.text:00405286                 mov     [esp+12Ch+OpenFlag], esi ; int
.text:0040528A                 mov     [esp+12Ch+FileName], ecx ; char *
.text:0040528D                 call    sub_419540
.text:00405292                 test    eax, eax
.text:00405294                 jnz     loc_4057B8
.text:0040529A                 mov     ebx, [ebp+0Ch]
.text:0040529D                 mov     ecx, [ebp+8]
.text:004052A0                 mov     eax, [esp+12Ch+var_F4]
.text:004052A4                 mov     edx, [esp+12Ch+var_F0]
.text:004052A8                 mov     esi, ebx
.text:004052AA                 xor     eax, ecx
.text:004052AC                 xor     esi, edx
.text:004052AE                 or      esi, eax
.text:004052B0                 jnz     short loc_4052CE
.text:004052B2                 mov     edx, [ebp+14h]
.text:004052B5                 mov     esi, [ebp+10h]
.text:004052B8                 mov     ecx, [esp+12Ch+var_E8]
.text:004052BC                 mov     ebp, [esp+12Ch+var_EC]
.text:004052C0                 mov     eax, edx
.text:004052C2                 xor     eax, ecx
.text:004052C4                 xor     ebp, esi
.text:004052C6                 or      eax, ebp
.text:004052C8                 jz      loc_405373
.text:004052CE
.text:004052CE loc_4052CE:                             ; CODE XREF: sub_405220+90↑j
.text:004052CE                 mov     ebx, [esp+12Ch+arg_0]
.text:004052D5                 mov     [esp+12Ch+FileName], ebx ; char *
.text:004052D8                 call    sub_40BBD0
.text:004052DD                 mov     [esp+12Ch+FileName], offset aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:004052E4                 mov     edi, eax
.text:004052E6                 call    ds:libintl_gettext
.text:004052EC                 mov     [esp+12Ch+Origin], edi ; char
.text:004052F0                 mov     [esp+12Ch+OpenFlag], 0 ; ErrorMessage
.text:004052F8                 mov     [esp+12Ch+MaxCharCount], eax ; char *
.text:004052FC
.text:004052FC loc_4052FC:                             ; CODE XREF: sub_405220+35C↓j
.text:004052FC                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405303                 call    sub_415D50
.text:00405308                 mov     [esp+12Ch+var_105], 0
.text:0040530D
.text:0040530D loc_40530D:                             ; CODE XREF: sub_405220+323↓j
.text:0040530D                 mov     ecx, [esp+12Ch+FileHandle]
.text:00405311                 mov     [esp+12Ch+FileName], ecx ; FileHandle
.text:00405314                 call    _close
.text:00405319                 test    eax, eax
.text:0040531B                 js      short loc_40532D
.text:0040531D
.text:0040531D loc_40531D:                             ; CODE XREF: sub_405220+151↓j
.text:0040531D                 movzx   eax, [esp+12Ch+var_105]
.text:00405322
.text:00405322 loc_405322:                             ; CODE XREF: sub_405220+5F4↓j
.text:00405322                 add     esp, 11Ch
.text:00405328                 pop     ebx
.text:00405329                 pop     esi
.text:0040532A                 pop     edi
.text:0040532B                 pop     ebp
.text:0040532C                 retn
.text:0040532D ; ---------------------------------------------------------------------------
.text:0040532D
.text:0040532D loc_40532D:                             ; CODE XREF: sub_405220+FB↑j
.text:0040532D                 mov     esi, [esp+12Ch+arg_0]
.text:00405334                 mov     [esp+12Ch+FileName], esi ; char *
.text:00405337                 call    sub_40BBD0
.text:0040533C                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:00405343                 mov     ebx, eax
.text:00405345                 call    ds:libintl_gettext
.text:0040534B                 mov     ebp, eax
.text:0040534D                 call    _errno
.text:00405352                 mov     [esp+12Ch+Origin], ebx ; char
.text:00405356                 mov     [esp+12Ch+MaxCharCount], ebp ; char *
.text:0040535A                 mov     edx, [eax]
.text:0040535C                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405363                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:00405367                 call    sub_415D50
.text:0040536C                 mov     [esp+12Ch+var_105], 0
.text:00405371                 jmp     short loc_40531D
.text:00405373 ; ---------------------------------------------------------------------------
.text:00405373
.text:00405373 loc_405373:                             ; CODE XREF: sub_405220+A8↑j
.text:00405373                 mov     ebp, [esp+12Ch+arg_10]
.text:0040537A                 cmp     byte ptr [ebp+0], 0
.text:0040537E                 jnz     loc_40577C
.text:00405384                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405388                 mov     eax, [esp+12Ch+arg_4]
.text:0040538F                 mov     [esp+12Ch+OpenFlag], 8201h ; OpenFlag
.text:00405397                 mov     [esp+12Ch+FileName], eax ; FileName
.text:0040539A                 call    _open
.text:0040539F                 mov     [esp+12Ch+var_100], eax
.text:004053A3                 test    eax, eax
.text:004053A5                 js      loc_40572B
.text:004053AB
.text:004053AB loc_4053AB:                             ; CODE XREF: sub_405220+51E↓j
.text:004053AB                 mov     esi, [esp+12Ch+var_100]
.text:004053AF                 lea     ebx, [esp+12Ch+var_8C]
.text:004053B6                 mov     [esp+12Ch+OpenFlag], ebx
.text:004053BA                 mov     [esp+12Ch+FileName], esi
.text:004053BD                 call    sub_416100
.text:004053C2                 test    eax, eax
.text:004053C4                 jnz     loc_40571F
.text:004053CA                 mov     edx, [esp+12Ch+var_3C]
.text:004053D1                 lea     edi, [edx-1]
.text:004053D4                 mov     ebp, edx
.text:004053D6                 cmp     edi, 3FFFFFh
.text:004053DC                 jbe     short loc_4053E3
.text:004053DE                 mov     ebp, 200h
.text:004053E3
.text:004053E3 loc_4053E3:                             ; CODE XREF: sub_405220+1BC↑j
.text:004053E3                 mov     esi, [esp+12Ch+arg_8]
.text:004053EA                 mov     edx, [esi+28h]
.text:004053ED                 cmp     edx, 3
.text:004053F0                 jz      loc_4056FC
.text:004053F6
.text:004053F6 loc_4053F6:                             ; CODE XREF: sub_405220+4EF↓j
.text:004053F6                                         ; sub_405220+4FA↓j
.text:004053F6                 cmp     edx, 2
.text:004053F9                 jz      loc_40564A
.text:004053FF
.text:004053FF loc_4053FF:                             ; CODE XREF: sub_405220+43D↓j
.text:004053FF                                         ; sub_405220+46A↓j ...
.text:004053FF                 call    sub_41A480
.text:00405404                 mov     ebx, eax
.text:00405406                 mov     esi, 4
.text:0040540B                 mov     edi, eax
.text:0040540D                 mov     ecx, 4
.text:00405412                 lea     esi, [esi+0]
.text:00405419                 lea     edi, [edi+0]
.text:00405420
.text:00405420 loc_405420:                             ; CODE XREF: sub_405220+20C↓j
.text:00405420                 mov     eax, edi
.text:00405422                 xor     edx, edx
.text:00405424                 mov     edi, ecx
.text:00405426                 div     ecx
.text:00405428                 test    edx, edx
.text:0040542A                 mov     ecx, edx
.text:0040542C                 jnz     short loc_405420
.text:0040542E                 mov     eax, esi
.text:00405430                 xor     edx, edx
.text:00405432                 div     edi
.text:00405434                 imul    ebx, eax
.text:00405437                 lea     edx, [ebx+ebp+3]
.text:0040543B                 mov     [esp+12Ch+FileName], edx ; Size
.text:0040543E                 call    malloc
.text:00405443                 lea     ecx, [ebx+eax-1]
.text:00405447                 xor     edx, edx
.text:00405449                 mov     eax, ecx
.text:0040544B                 div     ebx
.text:0040544D                 mov     edi, ecx
.text:0040544F                 sub     edi, edx
.text:00405451                 jmp     short loc_405460
.text:00405451 ; ---------------------------------------------------------------------------
.text:00405453                 align 10h
.text:00405460
.text:00405460 loc_405460:                             ; CODE XREF: sub_405220+231↑j
.text:00405460                                         ; sub_405220+2A7↓j ...
.text:00405460                 mov     [esp+12Ch+MaxCharCount], ebp ; MaxCharCount
.text:00405464                 mov     ebx, [esp+12Ch+FileHandle]
.text:00405468                 mov     [esp+12Ch+OpenFlag], edi ; DstBuf
.text:0040546C                 mov     [esp+12Ch+FileName], ebx ; FileHandle
.text:0040546F                 call    _read
.text:00405474                 test    eax, eax
.text:00405476                 mov     ebx, eax
.text:00405478                 js      loc_405621
.text:0040547E                 test    eax, eax
.text:00405480                 jz      loc_4055CA
.text:00405486                 cdq
.text:00405487                 add     [esp+12Ch+var_114], eax
.text:0040548B                 adc     [esp+12Ch+var_110], edx
.text:0040548F                 cmp     [esp+12Ch+var_116], 0
.text:00405494                 jz      short loc_4054D0
.text:00405496                 mov     byte ptr [ebx+edi], 1
.text:0040549A                 mov     esi, edi
.text:0040549C                 lea     esi, [esi+0]
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_405220+287↓j
.text:004054A0                 mov     ecx, [esi]
.text:004054A2                 add     esi, 4
.text:004054A5                 test    ecx, ecx
.text:004054A7                 jz      short loc_4054A0
.text:004054A9                 lea     edx, [esi-4]
.text:004054AC                 lea     esi, [esi+0]
.text:004054B0
.text:004054B0 loc_4054B0:                             ; CODE XREF: sub_405220+296↓j
.text:004054B0                 movzx   ecx, byte ptr [edx]
.text:004054B3                 inc     edx
.text:004054B4                 test    cl, cl
.text:004054B6                 jz      short loc_4054B0
.text:004054B8                 lea     ecx, [ebx+edi]
.text:004054BB                 cmp     edx, ecx
.text:004054BD                 ja      loc_405581
.text:004054C3                 xor     esi, esi
.text:004054C5
.text:004054C5 loc_4054C5:                             ; CODE XREF: sub_405220+389↓j
.text:004054C5                 test    esi, esi
.text:004054C7                 jnz     short loc_405460
.text:004054C9                 lea     esi, [esi+0]
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405220+274↑j
.text:004054D0                 mov     [esp+12Ch+MaxCharCount], ebx
.text:004054D4                 mov     esi, [esp+12Ch+var_100]
.text:004054D8                 mov     [esp+12Ch+OpenFlag], edi
.text:004054DC                 mov     [esp+12Ch+FileName], esi
.text:004054DF                 call    sub_40CFC0
.text:004054E4                 mov     [esp+12Ch+var_115], 0
.text:004054E9                 cmp     eax, ebx
.text:004054EB                 jz      loc_405460
.text:004054F1
.text:004054F1 loc_4054F1:                             ; CODE XREF: sub_405220+3D2↓j
.text:004054F1                                         ; sub_405220+3FC↓j
.text:004054F1                 mov     edx, [esp+12Ch+arg_4]
.text:004054F8                 mov     [esp+12Ch+FileName], edx ; char *
.text:004054FB                 call    sub_40BBD0
.text:00405500                 mov     [esp+12Ch+FileName], offset aWritingS ; "writing %s"
.text:00405507
.text:00405507 loc_405507:                             ; CODE XREF: sub_405220+3A5↓j
.text:00405507                                         ; sub_405220+425↓j ...
.text:00405507                 mov     esi, eax
.text:00405509                 call    ds:libintl_gettext
.text:0040550F                 mov     edi, eax
.text:00405511                 call    _errno
.text:00405516                 mov     [esp+12Ch+Origin], esi ; char
.text:0040551A                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:0040551E                 mov     esi, [eax]
.text:00405520                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405527                 mov     [esp+12Ch+OpenFlag], esi ; ErrorMessage
.text:0040552B                 call    sub_415D50
.text:00405530                 mov     [esp+12Ch+var_105], 0
.text:00405535
.text:00405535 loc_405535:                             ; CODE XREF: sub_405220+3AF↓j
.text:00405535                                         ; sub_405220+3F6↓j
.text:00405535                 mov     eax, [esp+12Ch+var_100]
.text:00405539                 mov     [esp+12Ch+FileName], eax ; FileHandle
.text:0040553C                 call    _close
.text:00405541                 test    eax, eax
.text:00405543                 jns     loc_40530D
.text:00405549                 mov     ebx, [esp+12Ch+arg_4]
.text:00405550                 mov     [esp+12Ch+FileName], ebx ; char *
.text:00405553                 call    sub_40BBD0
.text:00405558                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:0040555F
.text:0040555F loc_40555F:                             ; CODE XREF: sub_405220+53A↓j
.text:0040555F                                         ; sub_405220+593↓j ...
.text:0040555F                 mov     esi, eax
.text:00405561                 call    ds:libintl_gettext
.text:00405567                 mov     edi, eax
.text:00405569                 call    _errno
.text:0040556E                 mov     [esp+12Ch+Origin], esi
.text:00405572                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405576                 mov     ebp, [eax]
.text:00405578                 mov     [esp+12Ch+OpenFlag], ebp
.text:0040557C                 jmp     loc_4052FC
.text:00405581 ; ---------------------------------------------------------------------------
.text:00405581
.text:00405581 loc_405581:                             ; CODE XREF: sub_405220+29D↑j
.text:00405581                 mov     [esp+12Ch+Origin], 1 ; Origin
.text:00405589                 mov     edx, [esp+12Ch+var_100]
.text:0040558D                 mov     eax, ebx
.text:0040558F                 mov     [esp+12Ch+OpenFlag], ebx ; Offset
.text:00405593                 sar     eax, 1Fh
.text:00405596                 mov     [esp+12Ch+MaxCharCount], eax
.text:0040559A                 mov     [esp+12Ch+FileName], edx ; FileHandle
.text:0040559D                 call    _lseeki64
.text:004055A2                 mov     [esp+12Ch+var_115], 1
.text:004055A7                 test    edx, edx
.text:004055A9                 jns     loc_4054C5
.text:004055AF                 mov     eax, [esp+12Ch+arg_4]
.text:004055B6                 mov     [esp+12Ch+FileName], eax ; char *
.text:004055B9                 call    sub_40BBD0
.text:004055BE                 mov     [esp+12Ch+FileName], offset aCannotLseekS ; "cannot lseek %s"
.text:004055C5                 jmp     loc_405507
.text:004055CA ; ---------------------------------------------------------------------------
.text:004055CA
.text:004055CA loc_4055CA:                             ; CODE XREF: sub_405220+260↑j
.text:004055CA                 cmp     [esp+12Ch+var_115], 0
.text:004055CF                 jz      loc_405535
.text:004055D5                 mov     [esp+12Ch+MaxCharCount], 1
.text:004055DD                 mov     edi, [esp+12Ch+var_100]
.text:004055E1                 mov     [esp+12Ch+OpenFlag], offset byte_4051BE
.text:004055E9                 mov     [esp+12Ch+FileName], edi
.text:004055EC                 call    sub_40CFC0
.text:004055F1                 dec     eax
.text:004055F2                 jnz     loc_4054F1
.text:004055F8                 mov     ecx, [esp+12Ch+var_114]
.text:004055FC                 mov     ebp, [esp+12Ch+var_110]
.text:00405600                 mov     ebx, [esp+12Ch+var_100]
.text:00405604                 mov     [esp+12Ch+OpenFlag], ecx
.text:00405608                 mov     [esp+12Ch+MaxCharCount], ebp
.text:0040560C                 mov     [esp+12Ch+FileName], ebx
.text:0040560F                 call    sub_41A320
.text:00405614                 test    eax, eax
.text:00405616                 jns     loc_405535
.text:0040561C                 jmp     loc_4054F1
.text:00405621 ; ---------------------------------------------------------------------------
.text:00405621
.text:00405621 loc_405621:                             ; CODE XREF: sub_405220+258↑j
.text:00405621                 call    _errno
.text:00405626                 cmp     dword ptr [eax], 4
.text:00405629                 jz      loc_405460
.text:0040562F                 mov     ebp, [esp+12Ch+arg_0]
.text:00405636                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00405639                 call    sub_40BBD0
.text:0040563E                 mov     [esp+12Ch+FileName], offset aReadingS ; "reading %s"
.text:00405645                 jmp     loc_405507
.text:0040564A ; ---------------------------------------------------------------------------
.text:0040564A
.text:0040564A loc_40564A:                             ; CODE XREF: sub_405220+1D9↑j
.text:0040564A                 mov     edi, [esp+12Ch+var_8C]
.text:00405651                 and     edi, 0F000h
.text:00405657                 cmp     edi, 8000h
.text:0040565D                 jnz     loc_4053FF
.text:00405663                 mov     [esp+12Ch+OpenFlag], ebx
.text:00405667                 mov     ebx, [esp+12Ch+FileHandle]
.text:0040566B                 mov     [esp+12Ch+FileName], ebx
.text:0040566E                 call    sub_416100
.text:00405673                 test    eax, eax
.text:00405675                 jnz     short loc_4056E1
.text:00405677                 mov     edx, [esp+12Ch+var_8C]
.text:0040567E                 and     edx, 0F000h
.text:00405684                 cmp     edx, 8000h
.text:0040568A                 jnz     loc_4053FF
.text:00405690                 mov     edx, [esp+12Ch+var_58]
.text:00405697                 mov     eax, [esp+12Ch+var_5C]
.text:0040569E                 test    edx, edx
.text:004056A0                 js      short loc_4056D7
.text:004056A2
.text:004056A2 loc_4056A2:                             ; CODE XREF: sub_405220+4BF↓j
.text:004056A2                 mov     esi, [esp+12Ch+var_30]
.text:004056A9                 mov     edi, edx
.text:004056AB                 mov     ecx, eax
.text:004056AD                 shrd    ecx, edx, 9
.text:004056B1                 mov     eax, [esp+12Ch+var_34]
.text:004056B8                 sar     edi, 9
.text:004056BB                 cmp     edi, esi
.text:004056BD                 jl      loc_4053FF
.text:004056C3                 jg      short loc_4056CD
.text:004056C5                 cmp     ecx, eax
.text:004056C7                 jbe     loc_4053FF
.text:004056CD
.text:004056CD loc_4056CD:                             ; CODE XREF: sub_405220+4A3↑j
.text:004056CD                 mov     [esp+12Ch+var_116], 1
.text:004056D2                 jmp     loc_4053FF
.text:004056D7 ; ---------------------------------------------------------------------------
.text:004056D7
.text:004056D7 loc_4056D7:                             ; CODE XREF: sub_405220+480↑j
.text:004056D7                 add     eax, 1FFh
.text:004056DC                 adc     edx, 0
.text:004056DF                 jmp     short loc_4056A2
.text:004056E1 ; ---------------------------------------------------------------------------
.text:004056E1
.text:004056E1 loc_4056E1:                             ; CODE XREF: sub_405220+455↑j
.text:004056E1                 mov     ebp, [esp+12Ch+arg_0]
.text:004056E8                 mov     [esp+12Ch+FileName], ebp ; char *
.text:004056EB
.text:004056EB loc_4056EB:                             ; CODE XREF: sub_405220+509↓j
.text:004056EB                 call    sub_40BBD0
.text:004056F0                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:004056F7                 jmp     loc_405507
.text:004056FC ; ---------------------------------------------------------------------------
.text:004056FC
.text:004056FC loc_4056FC:                             ; CODE XREF: sub_405220+1D0↑j
.text:004056FC                 mov     ecx, [esp+12Ch+var_8C]
.text:00405703                 and     ecx, 0F000h
.text:00405709                 cmp     ecx, 8000h
.text:0040570F                 jnz     loc_4053F6
.text:00405715                 mov     [esp+12Ch+var_116], 1
.text:0040571A                 jmp     loc_4053F6
.text:0040571F ; ---------------------------------------------------------------------------
.text:0040571F
.text:0040571F loc_40571F:                             ; CODE XREF: sub_405220+1A4↑j
.text:0040571F                 mov     ecx, [esp+12Ch+arg_4]
.text:00405726                 mov     [esp+12Ch+FileName], ecx
.text:00405729                 jmp     short loc_4056EB
.text:0040572B ; ---------------------------------------------------------------------------
.text:0040572B
.text:0040572B loc_40572B:                             ; CODE XREF: sub_405220+185↑j
.text:0040572B                 mov     esi, [esp+12Ch+arg_8]
.text:00405732                 cmp     byte ptr [esi+0Dh], 0
.text:00405736                 jnz     short loc_40575F
.text:00405738
.text:00405738 loc_405738:                             ; CODE XREF: sub_405220+57B↓j
.text:00405738                 mov     ebp, [esp+12Ch+var_100]
.text:0040573C                 test    ebp, ebp
.text:0040573E                 jns     loc_4053AB
.text:00405744                 mov     eax, [esp+12Ch+arg_4]
.text:0040574B                 mov     [esp+12Ch+FileName], eax ; char *
.text:0040574E                 call    sub_40BBD0
.text:00405753                 mov     [esp+12Ch+FileName], offset aCannotCreateRe ; "cannot create regular file %s"
.text:0040575A                 jmp     loc_40555F
.text:0040575F ; ---------------------------------------------------------------------------
.text:0040575F
.text:0040575F loc_40575F:                             ; CODE XREF: sub_405220+516↑j
.text:0040575F                 mov     ecx, [esp+12Ch+arg_4]
.text:00405766                 mov     [esp+12Ch+FileName], ecx ; LPCSTR
.text:00405769                 call    sub_41A0D0
.text:0040576E                 test    eax, eax
.text:00405770                 jnz     short loc_40579D
.text:00405772                 mov     ebx, [esp+12Ch+arg_10]
.text:00405779                 mov     byte ptr [ebx], 1
.text:0040577C
.text:0040577C loc_40577C:                             ; CODE XREF: sub_405220+15E↑j
.text:0040577C                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405780                 mov     edi, [esp+12Ch+arg_4]
.text:00405787                 mov     [esp+12Ch+OpenFlag], 8101h ; OpenFlag
.text:0040578F                 mov     [esp+12Ch+FileName], edi ; FileName
.text:00405792                 call    _open
.text:00405797                 mov     [esp+12Ch+var_100], eax
.text:0040579B                 jmp     short loc_405738
.text:0040579D ; ---------------------------------------------------------------------------
.text:0040579D
.text:0040579D loc_40579D:                             ; CODE XREF: sub_405220+550↑j
.text:0040579D                 mov     edx, [esp+12Ch+arg_4]
.text:004057A4                 mov     [esp+12Ch+FileName], edx ; char *
.text:004057A7                 call    sub_40BBD0
.text:004057AC                 mov     [esp+12Ch+FileName], 402F61h
.text:004057B3                 jmp     loc_40555F
.text:004057B8 ; ---------------------------------------------------------------------------
.text:004057B8
.text:004057B8 loc_4057B8:                             ; CODE XREF: sub_405220+74↑j
.text:004057B8                 mov     ebp, [esp+12Ch+arg_0]
.text:004057BF                 mov     [esp+12Ch+FileName], ebp ; char *
.text:004057C2                 call    sub_40BBD0
.text:004057C7                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:004057CE                 jmp     loc_40555F
.text:004057D3 ; ---------------------------------------------------------------------------
.text:004057D3
.text:004057D3 loc_4057D3:                             ; CODE XREF: sub_405220+55↑j
.text:004057D3                 mov     eax, [esp+12Ch+arg_0]
.text:004057DA                 mov     [esp+12Ch+FileName], eax ; char *
.text:004057DD                 call    sub_40BBD0
.text:004057E2                 mov     [esp+12Ch+FileName], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:004057E9                 mov     ebx, eax
.text:004057EB                 call    ds:libintl_gettext
.text:004057F1                 mov     edi, eax
.text:004057F3                 call    _errno
.text:004057F8                 mov     [esp+12Ch+Origin], ebx ; char
.text:004057FC                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:00405800                 mov     edx, [eax]
.text:00405802                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405809                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:0040580D                 call    sub_415D50
.text:00405812                 xor     eax, eax
.text:00405814                 jmp     loc_405322
.text:00405814 sub_405220      endp
.text:00405814
.text:00405814 ; ---------------------------------------------------------------------------
.text:00405819                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820
.text:00405820 ; int __cdecl sub_405820(char *, int, char *, int, int, int, int)
.text:00405820 sub_405820      proc near               ; CODE XREF: sub_403270+12FE↑p
.text:00405820
.text:00405820 var_11C         = dword ptr -11Ch
.text:00405820 var_118         = dword ptr -118h
.text:00405820 var_102         = byte ptr -102h
.text:00405820 var_101         = byte ptr -101h
.text:00405820 var_100         = dword ptr -100h
.text:00405820 var_FC          = dword ptr -0FCh
.text:00405820 var_F4          = dword ptr -0F4h
.text:00405820 var_F0          = dword ptr -0F0h
.text:00405820 var_EC          = dword ptr -0ECh
.text:00405820 var_E8          = dword ptr -0E8h
.text:00405820 var_8C          = dword ptr -8Ch
.text:00405820 var_84          = dword ptr -84h
.text:00405820 var_80          = dword ptr -80h
.text:00405820 var_7C          = dword ptr -7Ch
.text:00405820 var_78          = dword ptr -78h
.text:00405820 arg_0           = dword ptr  4
.text:00405820 arg_4           = dword ptr  8
.text:00405820 arg_8           = dword ptr  0Ch
.text:00405820 arg_C           = dword ptr  10h
.text:00405820 arg_10          = dword ptr  14h
.text:00405820 arg_14          = dword ptr  18h
.text:00405820 arg_18          = dword ptr  1Ch
.text:00405820
.text:00405820                 push    ebp
.text:00405821                 push    edi
.text:00405822                 push    esi
.text:00405823                 push    ebx
.text:00405824                 sub     esp, 10Ch
.text:0040582A                 mov     edi, [esp+11Ch+arg_4]
.text:00405831                 mov     [esp+11Ch+var_101], 0
.text:00405836                 mov     ebp, [esp+11Ch+arg_C]
.text:0040583D                 mov     ebx, [edi+0Ch]
.text:00405840                 mov     ecx, [edi+8]
.text:00405843                 mov     eax, [ebp+8]
.text:00405846                 mov     edx, [ebp+0Ch]
.text:00405849                 mov     esi, ebx
.text:0040584B                 xor     eax, ecx
.text:0040584D                 xor     esi, edx
.text:0040584F                 or      esi, eax
.text:00405851                 jnz     short loc_405870
.text:00405853                 mov     ebx, [edi+14h]
.text:00405856                 mov     ecx, [edi+10h]
.text:00405859                 mov     eax, [ebp+10h]
.text:0040585C                 mov     edx, [ebp+14h]
.text:0040585F                 mov     esi, ebx
.text:00405861                 xor     eax, ecx
.text:00405863                 xor     esi, edx
.text:00405865                 or      esi, eax
.text:00405867                 jnz     short loc_405870
.text:00405869                 mov     [esp+11Ch+var_101], 1
.text:0040586E                 mov     esi, esi
.text:00405870
.text:00405870 loc_405870:                             ; CODE XREF: sub_405820+31↑j
.text:00405870                                         ; sub_405820+47↑j
.text:00405870                 cmp     [esp+11Ch+var_101], 0
.text:00405875                 mov     eax, [esp+11Ch+arg_14]
.text:0040587C                 mov     ecx, [esp+11Ch+arg_18]
.text:00405883                 mov     byte ptr [eax], 0
.text:00405886                 mov     byte ptr [ecx], 0
.text:00405889                 jz      short loc_40589C
.text:0040588B                 mov     edx, [esp+11Ch+arg_10]
.text:00405892                 cmp     byte ptr [edx+0Eh], 0
.text:00405896                 jnz     loc_405C60
.text:0040589C
.text:0040589C loc_40589C:                             ; CODE XREF: sub_405820+69↑j
.text:0040589C                 mov     ecx, [esp+11Ch+arg_10]
.text:004058A3                 cmp     dword ptr [ecx+8], 2
.text:004058A7                 jz      loc_405C92
.text:004058AD                 cmp     [esp+11Ch+var_101], 0
.text:004058B2                 mov     edx, 1
.text:004058B7                 jnz     short loc_4058C6
.text:004058B9
.text:004058B9 loc_4058B9:                             ; CODE XREF: sub_405820+D5↓j
.text:004058B9                                         ; sub_405820+1BE↓j ...
.text:004058B9                 add     esp, 10Ch
.text:004058BF                 mov     eax, edx
.text:004058C1                 pop     ebx
.text:004058C2                 pop     esi
.text:004058C3                 pop     edi
.text:004058C4                 pop     ebp
.text:004058C5                 retn
.text:004058C6 ; ---------------------------------------------------------------------------
.text:004058C6
.text:004058C6 loc_4058C6:                             ; CODE XREF: sub_405820+97↑j
.text:004058C6                 mov     ebp, [esp+11Ch+arg_8]
.text:004058CD                 lea     edi, [esp+11Ch+var_8C]
.text:004058D4                 mov     [esp+11Ch+var_118], edi
.text:004058D8                 mov     [esp+11Ch+var_11C], ebp
.text:004058DB                 call    sub_418250
.text:004058E0                 test    eax, eax
.text:004058E2                 jz      short loc_4058F7
.text:004058E4                 lea     esi, [esi+0]
.text:004058EA                 lea     edi, [edi+0]
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_405820+F0↓j
.text:004058F0                                         ; sub_405820+185↓j ...
.text:004058F0                 mov     edx, 1
.text:004058F5                 jmp     short loc_4058B9
.text:004058F7 ; ---------------------------------------------------------------------------
.text:004058F7
.text:004058F7 loc_4058F7:                             ; CODE XREF: sub_405820+C2↑j
.text:004058F7                 mov     edx, [esp+11Ch+arg_0]
.text:004058FE                 lea     ecx, [esp+11Ch+var_FC]
.text:00405902                 mov     [esp+11Ch+var_118], ecx
.text:00405906                 mov     [esp+11Ch+var_11C], edx
.text:00405909                 call    sub_418250
.text:0040590E                 test    eax, eax
.text:00405910                 jnz     short loc_4058F0
.text:00405912                 mov     [esp+11Ch+var_102], 0
.text:00405917                 lea     ebx, [esp+11Ch+var_FC]
.text:0040591B                 mov     ecx, [esp+11Ch+var_F4]
.text:0040591F                 mov     [esp+11Ch+var_100], ebx
.text:00405923                 mov     eax, [esp+11Ch+var_84]
.text:0040592A                 mov     ebp, edi
.text:0040592C                 mov     ebx, [esp+11Ch+var_F0]
.text:00405930                 mov     edx, [esp+11Ch+var_80]
.text:00405937                 xor     eax, ecx
.text:00405939                 mov     esi, ebx
.text:0040593B                 xor     esi, edx
.text:0040593D                 or      esi, eax
.text:0040593F                 jnz     short loc_405966
.text:00405941                 mov     ebx, [esp+11Ch+var_E8]
.text:00405945                 mov     ecx, [esp+11Ch+var_EC]
.text:00405949                 mov     eax, [esp+11Ch+var_7C]
.text:00405950                 mov     edx, [esp+11Ch+var_78]
.text:00405957                 mov     esi, ebx
.text:00405959                 xor     eax, ecx
.text:0040595B                 xor     esi, edx
.text:0040595D                 or      esi, eax
.text:0040595F                 jnz     short loc_405966
.text:00405961                 mov     [esp+11Ch+var_102], 1
.text:00405966
.text:00405966 loc_405966:                             ; CODE XREF: sub_405820+11F↑j
.text:00405966                                         ; sub_405820+13F↑j
.text:00405966                 movzx   ecx, [esp+11Ch+var_102]
.text:0040596B                 mov     esi, [esp+11Ch+var_FC]
.text:0040596F                 and     esi, 0F000h
.text:00405975                 cmp     esi, 0A000h
.text:0040597B                 jz      loc_405C68
.text:00405981                 jmp     short loc_405990
.text:00405981 ; ---------------------------------------------------------------------------
.text:00405983                 align 10h
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405820+161↑j
.text:00405990                                         ; sub_405820+456↓j ...
.text:00405990                 mov     esi, [esp+11Ch+arg_10]
.text:00405997                 mov     edi, [esi]
.text:00405999                 test    edi, edi
.text:0040599B                 jz      short loc_405A17
.text:0040599D                 test    cl, cl
.text:0040599F                 jnz     short loc_4059F0
.text:004059A1                 cmp     byte ptr [esi+14h], 0
.text:004059A5                 jnz     loc_4058F0
.text:004059AB                 cmp     dword ptr [esi+8], 2
.text:004059AF                 jz      loc_4058F0
.text:004059B5                 mov     ebx, [esp+11Ch+var_100]
.text:004059B9                 mov     ecx, [ebx]
.text:004059BB                 and     ecx, 0F000h
.text:004059C1                 cmp     ecx, 0A000h
.text:004059C7                 jnz     loc_4058F0
.text:004059CD                 mov     esi, [ebp+0]
.text:004059D0                 xor     edx, edx
.text:004059D2                 and     esi, 0F000h
.text:004059D8                 cmp     esi, 0A000h
.text:004059DE                 jnz     loc_4058B9
.text:004059E4                 jmp     loc_4058F0
.text:004059E4 ; ---------------------------------------------------------------------------
.text:004059E9                 align 10h
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_405820+17F↑j
.text:004059F0                 mov     edx, [esp+11Ch+arg_8]
.text:004059F7                 mov     ebp, [esp+11Ch+arg_0]
.text:004059FE                 mov     [esp+11Ch+var_118], edx ; void *
.text:00405A02                 mov     [esp+11Ch+var_11C], ebp ; void *
.text:00405A05
.text:00405A05 loc_405A05:                             ; CODE XREF: sub_405820+4B6↓j
.text:00405A05                 call    sub_408AE0
.text:00405A0A                 test    al, al
.text:00405A0C
.text:00405A0C loc_405A0C:                             ; CODE XREF: sub_405820+3EF↓j
.text:00405A0C                 setz    cl
.text:00405A0F                 movzx   edx, cl
.text:00405A12                 jmp     loc_4058B9
.text:00405A17 ; ---------------------------------------------------------------------------
.text:00405A17
.text:00405A17 loc_405A17:                             ; CODE XREF: sub_405820+17B↑j
.text:00405A17                 mov     edx, [esp+11Ch+arg_10]
.text:00405A1E                 cmp     byte ptr [edx+14h], 0
.text:00405A22                 jnz     short loc_405A2A
.text:00405A24                 cmp     byte ptr [edx+0Ch], 0
.text:00405A28                 jz      short loc_405A52
.text:00405A2A
.text:00405A2A loc_405A2A:                             ; CODE XREF: sub_405820+202↑j
.text:00405A2A                 mov     edi, [ebp+0]
.text:00405A2D                 mov     edx, 1
.text:00405A32                 and     edi, 0F000h
.text:00405A38                 cmp     edi, 0A000h
.text:00405A3E                 jz      loc_4058B9
.text:00405A44                 test    cl, cl
.text:00405A46                 jz      short loc_405A52
.text:00405A48                 cmp     dword ptr [ebp+18h], 1
.text:00405A4C                 ja      loc_405C14
.text:00405A52
.text:00405A52 loc_405A52:                             ; CODE XREF: sub_405820+208↑j
.text:00405A52                                         ; sub_405820+226↑j ...
.text:00405A52                 mov     edx, [esp+11Ch+var_100]
.text:00405A56                 mov     edi, [edx]
.text:00405A58                 mov     esi, edi
.text:00405A5A                 and     esi, 0F000h
.text:00405A60                 cmp     esi, 0A000h
.text:00405A66                 jz      short loc_405AC2
.text:00405A68                 mov     ecx, [ebp+0]
.text:00405A6B                 and     ecx, 0F000h
.text:00405A71                 cmp     ecx, 0A000h
.text:00405A77                 jz      short loc_405AC2
.text:00405A79                 mov     ebx, [edx+0Ch]
.text:00405A7C                 mov     ecx, [edx+8]
.text:00405A7F                 mov     eax, [ebp+8]
.text:00405A82                 mov     edx, [ebp+0Ch]
.text:00405A85                 mov     esi, ebx
.text:00405A87                 xor     eax, ecx
.text:00405A89                 xor     esi, edx
.text:00405A8B                 or      esi, eax
.text:00405A8D                 jnz     loc_4058F0
.text:00405A93                 mov     edx, [esp+11Ch+var_100]
.text:00405A97                 mov     eax, [ebp+10h]
.text:00405A9A                 mov     ebx, [edx+14h]
.text:00405A9D                 mov     ecx, [edx+10h]
.text:00405AA0                 mov     edx, [ebp+14h]
.text:00405AA3                 mov     esi, ebx
.text:00405AA5                 xor     eax, ecx
.text:00405AA7                 xor     esi, edx
.text:00405AA9                 or      esi, eax
.text:00405AAB                 jnz     loc_4058F0
.text:00405AB1                 mov     ebx, [esp+11Ch+arg_10]
.text:00405AB8                 cmp     byte ptr [ebx+0Eh], 0
.text:00405ABC                 jnz     loc_405B95
.text:00405AC2
.text:00405AC2 loc_405AC2:                             ; CODE XREF: sub_405820+246↑j
.text:00405AC2                                         ; sub_405820+257↑j
.text:00405AC2                 mov     esi, [esp+11Ch+arg_10]
.text:00405AC9                 cmp     byte ptr [esi+0Ch], 0
.text:00405ACD                 jz      short loc_405AE4
.text:00405ACF                 mov     ecx, [ebp+0]
.text:00405AD2                 and     ecx, 0F000h
.text:00405AD8                 cmp     ecx, 0A000h
.text:00405ADE                 jz      loc_405BF9
.text:00405AE4
.text:00405AE4 loc_405AE4:                             ; CODE XREF: sub_405820+2AD↑j
.text:00405AE4                 mov     esi, [esp+11Ch+arg_10]
.text:00405AEB                 cmp     dword ptr [esi+8], 2
.text:00405AEF                 jz      short loc_405AF8
.text:00405AF1
.text:00405AF1 loc_405AF1:                             ; CODE XREF: sub_405820+36F↓j
.text:00405AF1                 xor     edx, edx
.text:00405AF3                 jmp     loc_4058B9
.text:00405AF8 ; ---------------------------------------------------------------------------
.text:00405AF8
.text:00405AF8 loc_405AF8:                             ; CODE XREF: sub_405820+2CF↑j
.text:00405AF8                 and     edi, 0F000h
.text:00405AFE                 cmp     edi, 0A000h
.text:00405B04                 jz      loc_405BD0
.text:00405B0A                 cld
.text:00405B0B                 mov     ecx, 1Ah
.text:00405B10                 mov     esi, [esp+11Ch+var_100]
.text:00405B14                 lea     edi, [esp+11Ch+var_FC]
.text:00405B18                 rep movsd
.text:00405B1A
.text:00405B1A loc_405B1A:                             ; CODE XREF: sub_405820+3D4↓j
.text:00405B1A                 mov     ebx, [ebp+0]
.text:00405B1D                 and     ebx, 0F000h
.text:00405B23                 cmp     ebx, 0A000h
.text:00405B29                 jz      short loc_405BA4
.text:00405B2B                 cld
.text:00405B2C                 mov     ecx, 1Ah
.text:00405B31                 lea     edi, [esp+11Ch+var_8C]
.text:00405B38                 mov     esi, ebp
.text:00405B3A                 rep movsd
.text:00405B3C
.text:00405B3C loc_405B3C:                             ; CODE XREF: sub_405820+3AB↓j
.text:00405B3C                 mov     edx, [esp+11Ch+var_F0]
.text:00405B40                 mov     esi, [esp+11Ch+var_F4]
.text:00405B44                 mov     edi, [esp+11Ch+var_84]
.text:00405B4B                 mov     ebp, [esp+11Ch+var_80]
.text:00405B52                 mov     eax, edx
.text:00405B54                 xor     edi, esi
.text:00405B56                 xor     eax, ebp
.text:00405B58                 or      eax, edi
.text:00405B5A                 jnz     loc_4058F0
.text:00405B60                 mov     ebp, [esp+11Ch+var_E8]
.text:00405B64                 mov     esi, [esp+11Ch+var_EC]
.text:00405B68                 mov     edi, [esp+11Ch+var_7C]
.text:00405B6F                 mov     ecx, [esp+11Ch+var_78]
.text:00405B76                 mov     eax, ebp
.text:00405B78                 xor     edi, esi
.text:00405B7A                 xor     eax, ecx
.text:00405B7C                 or      eax, edi
.text:00405B7E                 jnz     loc_4058F0
.text:00405B84                 mov     ebx, [esp+11Ch+arg_10]
.text:00405B8B                 cmp     byte ptr [ebx+0Eh], 0
.text:00405B8F                 jz      loc_405AF1
.text:00405B95
.text:00405B95 loc_405B95:                             ; CODE XREF: sub_405820+29C↑j
.text:00405B95                 mov     edi, [esp+11Ch+arg_14]
.text:00405B9C                 mov     byte ptr [edi], 1
.text:00405B9F                 jmp     loc_4058F0
.text:00405BA4 ; ---------------------------------------------------------------------------
.text:00405BA4
.text:00405BA4 loc_405BA4:                             ; CODE XREF: sub_405820+309↑j
.text:00405BA4                 mov     ebp, [esp+11Ch+arg_8]
.text:00405BAB                 lea     ecx, [esp+11Ch+var_8C]
.text:00405BB2                 mov     [esp+11Ch+var_118], ecx ; int
.text:00405BB6                 mov     [esp+11Ch+var_11C], ebp ; char *
.text:00405BB9                 call    sub_419540
.text:00405BBE                 test    eax, eax
.text:00405BC0                 mov     edx, 1
.text:00405BC5                 jnz     loc_4058B9
.text:00405BCB                 jmp     loc_405B3C
.text:00405BD0 ; ---------------------------------------------------------------------------
.text:00405BD0
.text:00405BD0 loc_405BD0:                             ; CODE XREF: sub_405820+2E4↑j
.text:00405BD0                 mov     edi, [esp+11Ch+arg_0]
.text:00405BD7                 lea     edx, [esp+11Ch+var_FC]
.text:00405BDB                 mov     [esp+11Ch+var_118], edx ; int
.text:00405BDF                 mov     [esp+11Ch+var_11C], edi ; char *
.text:00405BE2                 call    sub_419540
.text:00405BE7                 test    eax, eax
.text:00405BE9                 mov     edx, 1
.text:00405BEE                 jnz     loc_4058B9
.text:00405BF4                 jmp     loc_405B1A
.text:00405BF9 ; ---------------------------------------------------------------------------
.text:00405BF9
.text:00405BF9 loc_405BF9:                             ; CODE XREF: sub_405820+2BE↑j
.text:00405BF9                 mov     ebx, [esp+11Ch+var_100]
.text:00405BFD                 mov     edx, [ebp+10h]
.text:00405C00                 mov     edi, [ebp+14h]
.text:00405C03                 mov     eax, [ebx+10h]
.text:00405C06                 mov     ebp, [ebx+14h]
.text:00405C09                 xor     edx, eax
.text:00405C0B                 xor     edi, ebp
.text:00405C0D                 or      edx, edi
.text:00405C0F                 jmp     loc_405A0C
.text:00405C14 ; ---------------------------------------------------------------------------
.text:00405C14
.text:00405C14 loc_405C14:                             ; CODE XREF: sub_405820+22C↑j
.text:00405C14                 mov     eax, [esp+11Ch+arg_8]
.text:00405C1B                 mov     ecx, [esp+11Ch+arg_0]
.text:00405C22                 mov     [esp+11Ch+var_118], eax ; void *
.text:00405C26                 mov     [esp+11Ch+var_11C], ecx ; void *
.text:00405C29                 call    sub_408AE0
.text:00405C2E                 test    al, al
.text:00405C30                 jnz     loc_405A52
.text:00405C36                 mov     ebx, [esp+11Ch+arg_10]
.text:00405C3D                 cmp     byte ptr [ebx+14h], 0
.text:00405C41                 jz      loc_4058F0
.text:00405C47                 mov     ebp, [esp+11Ch+arg_18]
.text:00405C4E                 mov     eax, [esp+11Ch+arg_14]
.text:00405C55                 mov     byte ptr [ebp+0], 1
.text:00405C59                 lea     esi, [esi+0]
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_405820+76↑j
.text:00405C60                 mov     byte ptr [eax], 1
.text:00405C63                 jmp     loc_4058F0
.text:00405C68 ; ---------------------------------------------------------------------------
.text:00405C68
.text:00405C68 loc_405C68:                             ; CODE XREF: sub_405820+15B↑j
.text:00405C68                 mov     edx, [edi]
.text:00405C6A                 and     edx, 0F000h
.text:00405C70                 cmp     edx, 0A000h
.text:00405C76                 jnz     loc_405990
.text:00405C7C                 mov     eax, [esp+11Ch+arg_10]
.text:00405C83                 cmp     byte ptr [eax+0Ch], 0
.text:00405C87                 jnz     loc_4058F0
.text:00405C8D                 jmp     loc_405990
.text:00405C92 ; ---------------------------------------------------------------------------
.text:00405C92
.text:00405C92 loc_405C92:                             ; CODE XREF: sub_405820+87↑j
.text:00405C92                 movzx   ecx, [esp+11Ch+var_101]
.text:00405C97                 mov     ebx, [edi]
.text:00405C99                 and     ebx, 0F000h
.text:00405C9F                 cmp     ebx, 0A000h
.text:00405CA5                 jz      short loc_405CB0
.text:00405CA7
.text:00405CA7 loc_405CA7:                             ; CODE XREF: sub_405820+49F↓j
.text:00405CA7                 mov     [esp+11Ch+var_100], edi
.text:00405CAB                 jmp     loc_405990
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_405820+485↑j
.text:00405CB0                 mov     esi, [ebp+0]
.text:00405CB3                 and     esi, 0F000h
.text:00405CB9                 cmp     esi, 0A000h
.text:00405CBF                 jnz     short loc_405CA7
.text:00405CC1                 mov     edi, [esp+11Ch+arg_8]
.text:00405CC8                 mov     eax, [esp+11Ch+arg_0]
.text:00405CCF                 mov     [esp+11Ch+var_118], edi
.text:00405CD3                 mov     [esp+11Ch+var_11C], eax
.text:00405CD6                 jmp     loc_405A05
.text:00405CD6 sub_405820      endp
.text:00405CD6
.text:00405CD6 ; ---------------------------------------------------------------------------
.text:00405CDB                 align 10h
.text:00405CE0
.text:00405CE0 ; =============== S U B R O U T I N E =======================================
.text:00405CE0
.text:00405CE0
.text:00405CE0 sub_405CE0      proc near               ; DATA XREF: sub_404D50+13↑o
.text:00405CE0
.text:00405CE0 var_1C          = dword ptr -1Ch
.text:00405CE0 var_18          = dword ptr -18h
.text:00405CE0 var_14          = dword ptr -14h
.text:00405CE0 var_10          = dword ptr -10h
.text:00405CE0 var_8           = dword ptr -8
.text:00405CE0 var_4           = dword ptr -4
.text:00405CE0 arg_0           = dword ptr  4
.text:00405CE0 arg_4           = dword ptr  8
.text:00405CE0
.text:00405CE0                 sub     esp, 1Ch
.text:00405CE3                 mov     [esp+1Ch+var_4], esi
.text:00405CE7                 mov     esi, [esp+1Ch+arg_4]
.text:00405CEB                 mov     [esp+1Ch+var_8], ebx
.text:00405CEF                 mov     ebx, [esp+1Ch+arg_0]
.text:00405CF3                 mov     [esp+1Ch+var_18], esi
.text:00405CF7                 mov     edx, [ebx]
.text:00405CF9                 mov     [esp+1Ch+var_1C], edx
.text:00405CFC                 call    sub_40CF80
.text:00405D01                 mov     ecx, [ebx+8]
.text:00405D04                 xor     edx, edx
.text:00405D06                 mov     ebx, [ebx+0Ch]
.text:00405D09                 mov     [esp+1Ch+var_14], esi
.text:00405D0D                 or      eax, ecx
.text:00405D0F                 or      edx, ebx
.text:00405D11                 mov     [esp+1Ch+var_10], 0
.text:00405D19                 mov     [esp+1Ch+var_1C], eax
.text:00405D1C                 mov     [esp+1Ch+var_18], edx
.text:00405D20                 call    sub_41F5B0
.text:00405D25                 mov     ebx, [esp+1Ch+var_8]
.text:00405D29                 mov     esi, [esp+1Ch+var_4]
.text:00405D2D                 add     esp, 1Ch
.text:00405D30                 retn
.text:00405D30 sub_405CE0      endp
.text:00405D30
.text:00405D31 ; ---------------------------------------------------------------------------
.text:00405D31                 jmp     short sub_405D40
.text:00405D31 ; ---------------------------------------------------------------------------
.text:00405D33                 align 10h
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40
.text:00405D40 sub_405D40      proc near               ; CODE XREF: .text:00405D31↑j
.text:00405D40                                         ; DATA XREF: .text:00404DA3↑o
.text:00405D40
.text:00405D40 var_1C          = dword ptr -1Ch
.text:00405D40 var_18          = dword ptr -18h
.text:00405D40 var_14          = dword ptr -14h
.text:00405D40 var_10          = dword ptr -10h
.text:00405D40 arg_0           = dword ptr  4
.text:00405D40 arg_4           = dword ptr  8
.text:00405D40
.text:00405D40                 sub     esp, 1Ch
.text:00405D43                 mov     ecx, [esp+1Ch+arg_0]
.text:00405D47                 mov     edx, [ecx+0Ch]
.text:00405D4A                 mov     eax, [ecx+8]
.text:00405D4D                 mov     ecx, [esp+1Ch+arg_4]
.text:00405D51                 mov     [esp+1Ch+var_10], 0
.text:00405D59                 mov     [esp+1Ch+var_1C], eax
.text:00405D5C                 mov     [esp+1Ch+var_14], ecx
.text:00405D60                 mov     [esp+1Ch+var_18], edx
.text:00405D64                 call    sub_41F5B0
.text:00405D69                 add     esp, 1Ch
.text:00405D6C                 retn
.text:00405D6C sub_405D40      endp
.text:00405D6C
.text:00405D6C ; ---------------------------------------------------------------------------
.text:00405D6D                 align 10h
.text:00405D70
.text:00405D70 ; =============== S U B R O U T I N E =======================================
.text:00405D70
.text:00405D70
.text:00405D70 sub_405D70      proc near               ; DATA XREF: sub_404D50+B↑o
.text:00405D70                                         ; .text:00404D9B↑o
.text:00405D70
.text:00405D70 var_1C          = dword ptr -1Ch
.text:00405D70 var_18          = dword ptr -18h
.text:00405D70 var_11          = byte ptr -11h
.text:00405D70 var_10          = dword ptr -10h
.text:00405D70 var_C           = dword ptr -0Ch
.text:00405D70 var_8           = dword ptr -8
.text:00405D70 var_4           = dword ptr -4
.text:00405D70 arg_0           = dword ptr  4
.text:00405D70 arg_4           = dword ptr  8
.text:00405D70
.text:00405D70                 sub     esp, 1Ch
.text:00405D73                 mov     [esp+1Ch+var_4], ebp
.text:00405D77                 mov     ebp, [esp+1Ch+arg_0]
.text:00405D7B                 mov     [esp+1Ch+var_8], edi
.text:00405D7F                 mov     edi, [esp+1Ch+arg_4]
.text:00405D83                 mov     [esp+1Ch+var_C], esi
.text:00405D87                 mov     [esp+1Ch+var_10], ebx
.text:00405D8B                 mov     ebx, [ebp+0Ch]
.text:00405D8E                 mov     [esp+1Ch+var_11], 0
.text:00405D93                 mov     ecx, [ebp+8]
.text:00405D96                 mov     eax, [edi+8]
.text:00405D99                 mov     edx, [edi+0Ch]
.text:00405D9C                 mov     esi, ebx
.text:00405D9E                 xor     eax, ecx
.text:00405DA0                 xor     esi, edx
.text:00405DA2                 or      esi, eax
.text:00405DA4                 jnz     short loc_405DBC
.text:00405DA6                 mov     ebx, [ebp+14h]
.text:00405DA9                 mov     ecx, [ebp+10h]
.text:00405DAC                 mov     eax, [edi+10h]
.text:00405DAF                 mov     edx, [edi+14h]
.text:00405DB2                 mov     esi, ebx
.text:00405DB4                 xor     eax, ecx
.text:00405DB6                 xor     esi, edx
.text:00405DB8                 or      esi, eax
.text:00405DBA                 jz      short loc_405DD5
.text:00405DBC
.text:00405DBC loc_405DBC:                             ; CODE XREF: sub_405D70+34↑j
.text:00405DBC                                         ; sub_405D70+78↓j ...
.text:00405DBC                 movzx   eax, [esp+1Ch+var_11]
.text:00405DC1                 mov     ebx, [esp+1Ch+var_10]
.text:00405DC5                 mov     esi, [esp+1Ch+var_C]
.text:00405DC9                 mov     edi, [esp+1Ch+var_8]
.text:00405DCD                 mov     ebp, [esp+1Ch+var_4]
.text:00405DD1                 add     esp, 1Ch
.text:00405DD4                 retn
.text:00405DD5 ; ---------------------------------------------------------------------------
.text:00405DD5
.text:00405DD5 loc_405DD5:                             ; CODE XREF: sub_405D70+4A↑j
.text:00405DD5                 mov     edx, [edi]
.text:00405DD7                 mov     [esp+1Ch+var_18], edx ; void *
.text:00405DDB                 mov     edx, [ebp+0]
.text:00405DDE                 mov     [esp+1Ch+var_1C], edx ; void *
.text:00405DE1                 call    sub_408AE0
.text:00405DE6                 test    al, al
.text:00405DE8                 jz      short loc_405DBC
.text:00405DEA                 mov     [esp+1Ch+var_11], 1
.text:00405DEF                 jmp     short loc_405DBC
.text:00405DEF sub_405D70      endp
.text:00405DEF
.text:00405DF1 ; ---------------------------------------------------------------------------
.text:00405DF1                 jmp     short sub_405E00
.text:00405DF1 ; ---------------------------------------------------------------------------
.text:00405DF3                 align 10h
.text:00405E00
.text:00405E00 ; =============== S U B R O U T I N E =======================================
.text:00405E00
.text:00405E00
.text:00405E00 ; int __cdecl sub_405E00(void *)
.text:00405E00 sub_405E00      proc near               ; CODE XREF: .text:00405DF1↑j
.text:00405E00                                         ; DATA XREF: sub_404D50+3↑o ...
.text:00405E00
.text:00405E00 Block           = dword ptr -0Ch
.text:00405E00 var_4           = dword ptr -4
.text:00405E00 arg_0           = dword ptr  4
.text:00405E00
.text:00405E00                 sub     esp, 0Ch
.text:00405E03                 mov     [esp+0Ch+var_4], ebx
.text:00405E07                 mov     ebx, [esp+0Ch+arg_0]
.text:00405E0B                 mov     edx, [ebx]
.text:00405E0D                 mov     [esp+0Ch+Block], edx ; Block
.text:00405E10                 call    free
.text:00405E15                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:00405E19                 mov     ebx, [esp+0Ch+var_4]
.text:00405E1D                 add     esp, 0Ch
.text:00405E20                 jmp     free
.text:00405E20 sub_405E00      endp
.text:00405E20
.text:00405E20 ; ---------------------------------------------------------------------------
.text:00405E25                 align 10h
.text:00405E30
.text:00405E30 ; =============== S U B R O U T I N E =======================================
.text:00405E30
.text:00405E30
.text:00405E30 ; int __cdecl sub_405E30(int, char *, int)
.text:00405E30 sub_405E30      proc near               ; CODE XREF: sub_403270+19A↑p
.text:00405E30                                         ; sub_403270+658↑p ...
.text:00405E30
.text:00405E30 Block           = dword ptr -9Ch
.text:00405E30 var_98          = dword ptr -98h
.text:00405E30 var_8C          = byte ptr -8Ch
.text:00405E30 var_84          = dword ptr -84h
.text:00405E30 var_80          = dword ptr -80h
.text:00405E30 var_7C          = dword ptr -7Ch
.text:00405E30 var_78          = dword ptr -78h
.text:00405E30 var_10          = dword ptr -10h
.text:00405E30 var_C           = dword ptr -0Ch
.text:00405E30 var_8           = dword ptr -8
.text:00405E30 var_4           = dword ptr -4
.text:00405E30 arg_0           = dword ptr  4
.text:00405E30 arg_4           = dword ptr  8
.text:00405E30 arg_8           = dword ptr  0Ch
.text:00405E30
.text:00405E30                 sub     esp, 9Ch
.text:00405E36                 mov     [esp+9Ch+var_4], ebp
.text:00405E3D                 mov     ebp, [esp+9Ch+arg_0]
.text:00405E44                 mov     [esp+9Ch+var_C], esi
.text:00405E4B                 mov     esi, [esp+9Ch+arg_8]
.text:00405E52                 test    ebp, ebp
.text:00405E54                 mov     [esp+9Ch+var_8], edi
.text:00405E5B                 mov     edi, [esp+9Ch+arg_4]
.text:00405E62                 mov     [esp+9Ch+var_10], ebx
.text:00405E69                 jz      short loc_405EC5
.text:00405E6B                 mov     [esp+9Ch+Block], 18h ; size_t
.text:00405E72                 call    sub_40B090
.text:00405E77                 mov     [esp+9Ch+Block], edi ; char *
.text:00405E7A                 mov     ebx, eax
.text:00405E7C                 call    sub_40B250
.text:00405E81                 mov     [ebx], eax
.text:00405E83                 test    esi, esi
.text:00405E85                 jz      short loc_405EE8
.text:00405E87                 mov     edx, [esi+8]
.text:00405E8A                 mov     ecx, [esi+0Ch]
.text:00405E8D                 mov     [ebx+8], edx
.text:00405E90                 mov     [ebx+0Ch], ecx
.text:00405E93                 mov     eax, [esi+10h]
.text:00405E96                 mov     edx, [esi+14h]
.text:00405E99
.text:00405E99 loc_405E99:                             ; CODE XREF: sub_405E30+E2↓j
.text:00405E99                 mov     [ebx+10h], eax
.text:00405E9C                 mov     [ebx+14h], edx
.text:00405E9F                 mov     [esp+9Ch+var_98], ebx
.text:00405EA3                 mov     [esp+9Ch+Block], ebp
.text:00405EA6                 call    sub_40C620
.text:00405EAB                 test    eax, eax
.text:00405EAD                 jz      short loc_405F14
.text:00405EAF                 cmp     eax, ebx
.text:00405EB1                 jz      short loc_405EC5
.text:00405EB3                 mov     ebp, [ebx]
.text:00405EB5                 mov     [esp+9Ch+Block], ebp ; Block
.text:00405EB8                 call    free
.text:00405EBD                 mov     [esp+9Ch+Block], ebx ; Block
.text:00405EC0                 call    free
.text:00405EC5
.text:00405EC5 loc_405EC5:                             ; CODE XREF: sub_405E30+39↑j
.text:00405EC5                                         ; sub_405E30+81↑j ...
.text:00405EC5                 mov     ebx, [esp+9Ch+var_10]
.text:00405ECC                 mov     esi, [esp+9Ch+var_C]
.text:00405ED3                 mov     edi, [esp+9Ch+var_8]
.text:00405EDA                 mov     ebp, [esp+9Ch+var_4]
.text:00405EE1                 add     esp, 9Ch
.text:00405EE7                 retn
.text:00405EE8 ; ---------------------------------------------------------------------------
.text:00405EE8
.text:00405EE8 loc_405EE8:                             ; CODE XREF: sub_405E30+55↑j
.text:00405EE8                 mov     [esp+9Ch+Block], edi
.text:00405EEB                 lea     ecx, [esp+9Ch+var_8C]
.text:00405EEF                 mov     [esp+9Ch+var_98], ecx
.text:00405EF3                 call    sub_418250
.text:00405EF8                 test    eax, eax
.text:00405EFA                 jnz     short loc_405EC5
.text:00405EFC                 mov     edi, [esp+9Ch+var_84]
.text:00405F00                 mov     esi, [esp+9Ch+var_80]
.text:00405F04                 mov     [ebx+8], edi
.text:00405F07                 mov     [ebx+0Ch], esi
.text:00405F0A                 mov     eax, [esp+9Ch+var_7C]
.text:00405F0E                 mov     edx, [esp+9Ch+var_78]
.text:00405F12                 jmp     short loc_405E99
.text:00405F14 ; ---------------------------------------------------------------------------
.text:00405F14
.text:00405F14 loc_405F14:                             ; CODE XREF: sub_405E30+7D↑j
.text:00405F14                 call    sub_40C060
.text:00405F14 sub_405E30      endp
.text:00405F14
.text:00405F14 ; ---------------------------------------------------------------------------
.text:00405F19                 align 10h
.text:00405F20
.text:00405F20 ; =============== S U B R O U T I N E =======================================
.text:00405F20
.text:00405F20
.text:00405F20 sub_405F20      proc near               ; CODE XREF: sub_403270+781↑p
.text:00405F20                                         ; sub_403270+F88↑p
.text:00405F20
.text:00405F20 Block           = dword ptr -3Ch
.text:00405F20 var_38          = dword ptr -38h
.text:00405F20 var_2C          = dword ptr -2Ch
.text:00405F20 var_28          = dword ptr -28h
.text:00405F20 var_24          = dword ptr -24h
.text:00405F20 var_20          = dword ptr -20h
.text:00405F20 var_1C          = dword ptr -1Ch
.text:00405F20 var_4           = dword ptr -4
.text:00405F20 arg_0           = dword ptr  4
.text:00405F20 arg_4           = dword ptr  8
.text:00405F20 arg_8           = dword ptr  0Ch
.text:00405F20 arg_C           = dword ptr  10h
.text:00405F20
.text:00405F20                 sub     esp, 3Ch
.text:00405F23                 mov     edx, [esp+3Ch+arg_0]
.text:00405F27                 mov     [esp+3Ch+var_4], ebx
.text:00405F2B                 mov     ecx, [esp+3Ch+arg_4]
.text:00405F2F                 mov     [esp+3Ch+var_1C], 0
.text:00405F37                 mov     ebx, [esp+3Ch+arg_8]
.text:00405F3B                 mov     [esp+3Ch+var_2C], edx
.text:00405F3F                 lea     edx, [esp+3Ch+var_2C]
.text:00405F43                 mov     [esp+3Ch+var_28], ecx
.text:00405F47                 mov     ecx, [esp+3Ch+arg_C]
.text:00405F4B                 mov     [esp+3Ch+var_38], edx
.text:00405F4F                 mov     edx, ds:dword_422030
.text:00405F55                 mov     [esp+3Ch+var_24], ebx
.text:00405F59                 mov     [esp+3Ch+var_20], ecx
.text:00405F5D                 mov     [esp+3Ch+Block], edx
.text:00405F60                 call    sub_40CCF0
.text:00405F65                 test    eax, eax
.text:00405F67                 mov     ebx, eax
.text:00405F69                 jz      short loc_405F7E
.text:00405F6B                 mov     ecx, [eax+10h]
.text:00405F6E                 mov     [esp+3Ch+Block], ecx ; Block
.text:00405F71                 call    free
.text:00405F76                 mov     [esp+3Ch+Block], ebx ; Block
.text:00405F79                 call    free
.text:00405F7E
.text:00405F7E loc_405F7E:                             ; CODE XREF: sub_405F20+49↑j
.text:00405F7E                 mov     ebx, [esp+3Ch+var_4]
.text:00405F82                 add     esp, 3Ch
.text:00405F85                 retn
.text:00405F85 sub_405F20      endp
.text:00405F85
.text:00405F85 ; ---------------------------------------------------------------------------
.text:00405F86 ; const char word_405F86[]
.text:00405F86 word_405F86     dw 7325h                ; DATA XREF: sub_405F90+C3↓o
.text:00405F88                 align 10h
.text:00405F90
.text:00405F90 ; =============== S U B R O U T I N E =======================================
.text:00405F90
.text:00405F90
.text:00405F90 ; int __cdecl sub_405F90(char *)
.text:00405F90 sub_405F90      proc near               ; CODE XREF: sub_403270+D14↑p
.text:00405F90
.text:00405F90 Block           = dword ptr -0ACh
.text:00405F90 ErrorMessage    = dword ptr -0A8h
.text:00405F90 var_A4          = dword ptr -0A4h
.text:00405F90 var_A0          = byte ptr -0A0h
.text:00405F90 var_94          = dword ptr -94h
.text:00405F90 var_90          = dword ptr -90h
.text:00405F90 var_8C          = dword ptr -8Ch
.text:00405F90 var_84          = dword ptr -84h
.text:00405F90 var_80          = dword ptr -80h
.text:00405F90 var_7C          = dword ptr -7Ch
.text:00405F90 var_78          = dword ptr -78h
.text:00405F90 arg_0           = dword ptr  4
.text:00405F90
.text:00405F90                 push    ebp
.text:00405F91                 push    edi
.text:00405F92                 push    esi
.text:00405F93                 push    ebx
.text:00405F94                 sub     esp, 9Ch
.text:00405F9A                 mov     ebp, [esp+0ACh+arg_0]
.text:00405FA1                 lea     edx, [esp+0ACh+var_8C]
.text:00405FA5                 mov     [esp+0ACh+ErrorMessage], edx ; int
.text:00405FA9                 mov     [esp+0ACh+Block], ebp ; char *
.text:00405FAC                 call    sub_419540
.text:00405FB1                 test    eax, eax
.text:00405FB3                 js      loc_406040
.text:00405FB9                 mov     [esp+0ACh+Block], 18h ; size_t
.text:00405FC0                 mov     edx, [esp+0ACh+var_7C]
.text:00405FC4                 mov     edi, [esp+0ACh+var_78]
.text:00405FC8                 mov     ebx, [esp+0ACh+var_84]
.text:00405FCC                 mov     esi, [esp+0ACh+var_80]
.text:00405FD0                 mov     [esp+0ACh+var_94], edx
.text:00405FD4                 mov     [esp+0ACh+var_90], edi
.text:00405FD8                 call    sub_40B090
.text:00405FDD                 mov     [esp+0ACh+Block], ebp ; char *
.text:00405FE0                 mov     edi, eax
.text:00405FE2                 call    sub_40B250
.text:00405FE7                 mov     [edi], ebx
.text:00405FE9                 mov     ebp, [esp+0ACh+var_94]
.text:00405FED                 mov     ebx, [esp+0ACh+var_90]
.text:00405FF1                 mov     [edi+10h], eax
.text:00405FF4                 mov     ecx, ds:dword_422030
.text:00405FFA                 mov     [edi+4], esi
.text:00405FFD                 mov     [edi+8], ebp
.text:00406000                 mov     [edi+0Ch], ebx
.text:00406003                 mov     [esp+0ACh+ErrorMessage], edi
.text:00406007                 mov     [esp+0ACh+Block], ecx
.text:0040600A                 call    sub_40C620
.text:0040600F                 test    eax, eax
.text:00406011                 jz      short loc_406071
.text:00406013                 cmp     eax, edi
.text:00406015                 jz      short loc_40602A
.text:00406017                 mov     esi, [edi+10h]
.text:0040601A                 mov     [esp+0ACh+Block], esi ; Block
.text:0040601D                 call    free
.text:00406022                 mov     [esp+0ACh+Block], edi ; Block
.text:00406025                 call    free
.text:0040602A
.text:0040602A loc_40602A:                             ; CODE XREF: sub_405F90+85↑j
.text:0040602A                 mov     eax, 1
.text:0040602F
.text:0040602F loc_40602F:                             ; CODE XREF: sub_405F90+DF↓j
.text:0040602F                 add     esp, 9Ch
.text:00406035                 pop     ebx
.text:00406036                 pop     esi
.text:00406037                 pop     edi
.text:00406038                 pop     ebp
.text:00406039                 retn
.text:00406039 ; ---------------------------------------------------------------------------
.text:0040603A                 align 10h
.text:00406040
.text:00406040 loc_406040:                             ; CODE XREF: sub_405F90+23↑j
.text:00406040                 mov     [esp+0ACh+Block], ebp ; char *
.text:00406043                 call    sub_40BBD0
.text:00406048                 mov     esi, eax
.text:0040604A                 call    _errno
.text:0040604F                 mov     dword ptr [esp+0ACh+var_A0], esi ; char
.text:00406053                 mov     [esp+0ACh+var_A4], offset word_405F86 ; char *
.text:0040605B                 mov     edx, [eax]
.text:0040605D                 mov     [esp+0ACh+Block], 0 ; Code
.text:00406064                 mov     [esp+0ACh+ErrorMessage], edx ; ErrorMessage
.text:00406068                 call    sub_415D50
.text:0040606D                 xor     eax, eax
.text:0040606F                 jmp     short loc_40602F
.text:00406071 ; ---------------------------------------------------------------------------
.text:00406071
.text:00406071 loc_406071:                             ; CODE XREF: sub_405F90+81↑j
.text:00406071                 call    sub_40C060
.text:00406071 sub_405F90      endp
.text:00406071
.text:00406071 ; ---------------------------------------------------------------------------
.text:00406076                 align 10h
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080
.text:00406080 sub_406080      proc near               ; CODE XREF: sub_403270+126C↑p
.text:00406080
.text:00406080 var_3C          = dword ptr -3Ch
.text:00406080 var_38          = dword ptr -38h
.text:00406080 var_2C          = dword ptr -2Ch
.text:00406080 var_28          = dword ptr -28h
.text:00406080 var_24          = dword ptr -24h
.text:00406080 var_20          = dword ptr -20h
.text:00406080 arg_0           = dword ptr  4
.text:00406080 arg_4           = dword ptr  8
.text:00406080 arg_8           = dword ptr  0Ch
.text:00406080 arg_C           = dword ptr  10h
.text:00406080
.text:00406080                 sub     esp, 3Ch
.text:00406083                 mov     edx, [esp+3Ch+arg_0]
.text:00406087                 mov     ecx, [esp+3Ch+arg_4]
.text:0040608B                 mov     [esp+3Ch+var_2C], edx
.text:0040608F                 mov     edx, [esp+3Ch+arg_8]
.text:00406093                 mov     [esp+3Ch+var_28], ecx
.text:00406097                 mov     ecx, [esp+3Ch+arg_C]
.text:0040609B                 mov     [esp+3Ch+var_24], edx
.text:0040609F                 lea     edx, [esp+3Ch+var_2C]
.text:004060A3                 mov     [esp+3Ch+var_38], edx
.text:004060A7                 mov     edx, ds:dword_422030
.text:004060AD                 mov     [esp+3Ch+var_20], ecx
.text:004060B1                 mov     [esp+3Ch+var_3C], edx
.text:004060B4                 call    sub_40CA70
.text:004060B9                 xor     edx, edx
.text:004060BB                 test    eax, eax
.text:004060BD                 jz      short loc_4060C2
.text:004060BF                 mov     edx, [eax+10h]
.text:004060C2
.text:004060C2 loc_4060C2:                             ; CODE XREF: sub_406080+3D↑j
.text:004060C2                 mov     eax, edx
.text:004060C4                 add     esp, 3Ch
.text:004060C7                 retn
.text:004060C7 sub_406080      endp
.text:004060C7
.text:004060C7 ; ---------------------------------------------------------------------------
.text:004060C8                 align 10h
.text:004060D0
.text:004060D0 ; =============== S U B R O U T I N E =======================================
.text:004060D0
.text:004060D0
.text:004060D0 ; int __cdecl sub_4060D0(char *, int, int, int, int)
.text:004060D0 sub_4060D0      proc near               ; CODE XREF: sub_403270+1092↑p
.text:004060D0
.text:004060D0 Block           = dword ptr -1Ch
.text:004060D0 var_18          = dword ptr -18h
.text:004060D0 var_14          = dword ptr -14h
.text:004060D0 var_10          = dword ptr -10h
.text:004060D0 arg_0           = dword ptr  4
.text:004060D0 arg_4           = dword ptr  8
.text:004060D0 arg_8           = dword ptr  0Ch
.text:004060D0 arg_C           = dword ptr  10h
.text:004060D0 arg_10          = dword ptr  14h
.text:004060D0
.text:004060D0                 push    edi
.text:004060D1                 push    esi
.text:004060D2                 push    ebx
.text:004060D3                 sub     esp, 10h
.text:004060D6                 mov     edx, [esp+1Ch+arg_C]
.text:004060DA                 mov     [esp+1Ch+Block], 18h ; size_t
.text:004060E1                 mov     edi, [esp+1Ch+arg_10]
.text:004060E5                 mov     ebx, [esp+1Ch+arg_4]
.text:004060E9                 mov     [esp+1Ch+var_14], edx
.text:004060ED                 mov     esi, [esp+1Ch+arg_8]
.text:004060F1                 mov     [esp+1Ch+var_10], edi
.text:004060F5                 call    sub_40B090
.text:004060FA                 mov     ecx, [esp+1Ch+arg_0]
.text:004060FE                 mov     edi, eax
.text:00406100                 mov     [esp+1Ch+Block], ecx ; char *
.text:00406103                 call    sub_40B250
.text:00406108                 mov     [edi+10h], eax
.text:0040610B                 mov     edx, [esp+1Ch+var_14]
.text:0040610F                 mov     ecx, [esp+1Ch+var_10]
.text:00406113                 mov     [edi], ebx
.text:00406115                 mov     [edi+8], edx
.text:00406118                 mov     edx, ds:dword_422030
.text:0040611E                 mov     [edi+4], esi
.text:00406121                 mov     [edi+0Ch], ecx
.text:00406124                 mov     [esp+1Ch+var_18], edi
.text:00406128                 mov     [esp+1Ch+Block], edx
.text:0040612B                 call    sub_40C620
.text:00406130                 test    eax, eax
.text:00406132                 mov     ebx, eax
.text:00406134                 jz      short loc_406159
.text:00406136                 xor     eax, eax
.text:00406138                 cmp     ebx, edi
.text:0040613A                 jz      short loc_406152
.text:0040613C                 mov     esi, [edi+10h]
.text:0040613F                 mov     [esp+1Ch+Block], esi ; Block
.text:00406142                 call    free
.text:00406147                 mov     [esp+1Ch+Block], edi ; Block
.text:0040614A                 call    free
.text:0040614F                 mov     eax, [ebx+10h]
.text:00406152
.text:00406152 loc_406152:                             ; CODE XREF: sub_4060D0+6A↑j
.text:00406152                 add     esp, 10h
.text:00406155                 pop     ebx
.text:00406156                 pop     esi
.text:00406157                 pop     edi
.text:00406158                 retn
.text:00406159 ; ---------------------------------------------------------------------------
.text:00406159
.text:00406159 loc_406159:                             ; CODE XREF: sub_4060D0+64↑j
.text:00406159                 call    sub_40C060
.text:00406159 sub_4060D0      endp
.text:00406159
.text:00406159 ; ---------------------------------------------------------------------------
.text:0040615E                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_401EE0+692↑p
.text:00406160
.text:00406160 var_1C          = dword ptr -1Ch
.text:00406160 var_18          = dword ptr -18h
.text:00406160 var_14          = dword ptr -14h
.text:00406160 var_10          = dword ptr -10h
.text:00406160 var_C           = dword ptr -0Ch
.text:00406160
.text:00406160                 sub     esp, 1Ch
.text:00406163                 mov     [esp+1Ch+var_C], offset sub_406270
.text:0040616B                 mov     [esp+1Ch+var_10], offset sub_406200
.text:00406173                 mov     [esp+1Ch+var_14], offset sub_4061D0
.text:0040617B                 mov     [esp+1Ch+var_18], 0
.text:00406183                 mov     [esp+1Ch+var_1C], 67h ; 'g'
.text:0040618A                 call    sub_40C0D0
.text:0040618F                 mov     ds:dword_422030, eax
.text:00406194                 test    eax, eax
.text:00406196                 jz      short loc_40619C
.text:00406198                 add     esp, 1Ch
.text:0040619B                 retn
.text:0040619C ; ---------------------------------------------------------------------------
.text:0040619C
.text:0040619C loc_40619C:                             ; CODE XREF: sub_406160+36↑j
.text:0040619C                 call    sub_40C060
.text:0040619C sub_406160      endp
.text:0040619C
.text:004061A1 ; ---------------------------------------------------------------------------
.text:004061A1                 jmp     short loc_4061B0
.text:004061A1 ; ---------------------------------------------------------------------------
.text:004061A3                 align 10h
.text:004061B0
.text:004061B0 loc_4061B0:                             ; CODE XREF: .text:004061A1↑j
.text:004061B0                 sub     esp, 0Ch
.text:004061B3                 mov     edx, ds:dword_422030
.text:004061B9                 mov     [esp], edx
.text:004061BC                 call    sub_40C3B0
.text:004061C1                 add     esp, 0Ch
.text:004061C4                 retn
.text:004061C4 ; ---------------------------------------------------------------------------
.text:004061C5                 align 10h
.text:004061D0
.text:004061D0 ; =============== S U B R O U T I N E =======================================
.text:004061D0
.text:004061D0
.text:004061D0 sub_4061D0      proc near               ; DATA XREF: sub_406160+13↑o
.text:004061D0
.text:004061D0 var_1C          = dword ptr -1Ch
.text:004061D0 var_18          = dword ptr -18h
.text:004061D0 var_14          = dword ptr -14h
.text:004061D0 var_10          = dword ptr -10h
.text:004061D0 arg_0           = dword ptr  4
.text:004061D0 arg_4           = dword ptr  8
.text:004061D0
.text:004061D0                 sub     esp, 1Ch
.text:004061D3                 mov     ecx, [esp+1Ch+arg_0]
.text:004061D7                 mov     edx, [ecx+4]
.text:004061DA                 mov     eax, [ecx]
.text:004061DC                 mov     ecx, [esp+1Ch+arg_4]
.text:004061E0                 mov     [esp+1Ch+var_10], 0
.text:004061E8                 mov     [esp+1Ch+var_1C], eax
.text:004061EB                 mov     [esp+1Ch+var_14], ecx
.text:004061EF                 mov     [esp+1Ch+var_18], edx
.text:004061F3                 call    sub_41F5B0
.text:004061F8                 add     esp, 1Ch
.text:004061FB                 retn
.text:004061FB sub_4061D0      endp
.text:004061FB
.text:004061FB ; ---------------------------------------------------------------------------
.text:004061FC                 align 10h
.text:00406200
.text:00406200 ; =============== S U B R O U T I N E =======================================
.text:00406200
.text:00406200
.text:00406200 sub_406200      proc near               ; DATA XREF: sub_406160+B↑o
.text:00406200
.text:00406200 var_11          = byte ptr -11h
.text:00406200 var_10          = dword ptr -10h
.text:00406200 var_C           = dword ptr -0Ch
.text:00406200 var_8           = dword ptr -8
.text:00406200 var_4           = dword ptr -4
.text:00406200 arg_0           = dword ptr  4
.text:00406200 arg_4           = dword ptr  8
.text:00406200
.text:00406200                 sub     esp, 14h
.text:00406203                 mov     [esp+14h+var_8], edi
.text:00406207                 mov     edi, [esp+14h+arg_0]
.text:0040620B                 mov     [esp+14h+var_4], ebp
.text:0040620F                 mov     ebp, [esp+14h+arg_4]
.text:00406213                 mov     [esp+14h+var_C], esi
.text:00406217                 mov     [esp+14h+var_10], ebx
.text:0040621B                 mov     ebx, [edi+4]
.text:0040621E                 mov     [esp+14h+var_11], 0
.text:00406223                 mov     ecx, [edi]
.text:00406225                 mov     eax, [ebp+0]
.text:00406228                 mov     edx, [ebp+4]
.text:0040622B                 mov     esi, ebx
.text:0040622D                 xor     eax, ecx
.text:0040622F                 xor     esi, edx
.text:00406231                 or      esi, eax
.text:00406233                 jnz     short loc_406250
.text:00406235                 mov     edx, [edi+0Ch]
.text:00406238                 mov     esi, [edi+8]
.text:0040623B                 mov     ecx, [ebp+0Ch]
.text:0040623E                 mov     edi, [ebp+8]
.text:00406241                 mov     eax, edx
.text:00406243                 xor     eax, ecx
.text:00406245                 xor     edi, esi
.text:00406247                 or      eax, edi
.text:00406249                 jnz     short loc_406250
.text:0040624B                 mov     [esp+14h+var_11], 1
.text:00406250
.text:00406250 loc_406250:                             ; CODE XREF: sub_406200+33↑j
.text:00406250                                         ; sub_406200+49↑j
.text:00406250                 movzx   eax, [esp+14h+var_11]
.text:00406255                 mov     ebx, [esp+14h+var_10]
.text:00406259                 mov     esi, [esp+14h+var_C]
.text:0040625D                 mov     edi, [esp+14h+var_8]
.text:00406261                 mov     ebp, [esp+14h+var_4]
.text:00406265                 add     esp, 14h
.text:00406268                 retn
.text:00406268 sub_406200      endp
.text:00406268
.text:00406268 ; ---------------------------------------------------------------------------
.text:00406269                 align 10h
.text:00406270
.text:00406270 ; =============== S U B R O U T I N E =======================================
.text:00406270
.text:00406270
.text:00406270 ; int __cdecl sub_406270(void *)
.text:00406270 sub_406270      proc near               ; DATA XREF: sub_406160+3↑o
.text:00406270
.text:00406270 Block           = dword ptr -0Ch
.text:00406270 var_4           = dword ptr -4
.text:00406270 arg_0           = dword ptr  4
.text:00406270
.text:00406270                 sub     esp, 0Ch
.text:00406273                 mov     [esp+0Ch+var_4], ebx
.text:00406277                 mov     ebx, [esp+0Ch+arg_0]
.text:0040627B                 mov     edx, [ebx+10h]
.text:0040627E                 mov     [esp+0Ch+Block], edx ; Block
.text:00406281                 call    free
.text:00406286                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:0040628A                 mov     ebx, [esp+0Ch+var_4]
.text:0040628E                 add     esp, 0Ch
.text:00406291                 jmp     free
.text:00406291 sub_406270      endp
.text:00406291
.text:00406291 ; ---------------------------------------------------------------------------
.text:00406296                 align 10h
.text:004062A0 aCannotRestoreC db 'cannot restore current working directory',0
.text:004062A0                                         ; DATA XREF: sub_406340:loc_406450↓o
.text:004062C9 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: sub_406340+21E↓o
.text:004062C9                                         ; sub_4066D0+F3↓o ...
.text:004062DA aCannotRemoveOr db 'cannot remove `.',27h,' or `..',27h,0
.text:004062DA                                         ; DATA XREF: sub_406340:loc_4065F2↓o
.text:004062F4                 align 10h
.text:00406300 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/src/remove.c',0
.text:00406300                                         ; DATA XREF: sub_406340+2E4↓o
.text:00406300                                         ; sub_406A40+848↓o ...
.text:00406327 aValidStatusS   db 'VALID_STATUS (s)',0 ; DATA XREF: sub_406340+2EC↓o
.text:00406338                 align 10h
.text:00406340
.text:00406340 ; =============== S U B R O U T I N E =======================================
.text:00406340
.text:00406340
.text:00406340 sub_406340      proc near               ; CODE XREF: sub_402B60+BD↑p
.text:00406340
.text:00406340 Block           = dword ptr -2Ch
.text:00406340 ErrorMessage    = dword ptr -28h
.text:00406340 var_24          = dword ptr -24h
.text:00406340 var_20          = byte ptr -20h
.text:00406340 var_1C          = dword ptr -1Ch
.text:00406340 var_18          = dword ptr -18h
.text:00406340 var_14          = dword ptr -14h
.text:00406340 arg_0           = dword ptr  4
.text:00406340 arg_4           = dword ptr  8
.text:00406340 arg_8           = dword ptr  0Ch
.text:00406340
.text:00406340                 push    ebp
.text:00406341                 push    edi
.text:00406342                 push    esi
.text:00406343                 push    ebx
.text:00406344                 sub     esp, 1Ch
.text:00406347                 mov     [esp+2Ch+var_14], 0
.text:0040634F                 mov     [esp+2Ch+Block], 0E8h ; 'è' ; size_t
.text:00406356                 call    sub_40B090
.text:0040635B                 mov     [esp+2Ch+Block], eax
.text:0040635E                 mov     esi, eax
.text:00406360                 lea     ebx, [esi+2Ch]
.text:00406363                 mov     [esp+2Ch+var_1C], offset free
.text:0040636B                 mov     dword ptr [esp+2Ch+var_20], offset malloc
.text:00406373                 mov     [esp+2Ch+var_24], 0
.text:0040637B                 mov     [esp+2Ch+ErrorMessage], 0
.text:00406383                 call    sub_41DB60
.text:00406388                 mov     [esp+2Ch+var_1C], offset free
.text:00406390                 mov     dword ptr [esp+2Ch+var_20], offset malloc
.text:00406398                 mov     [esp+2Ch+var_24], 0
.text:004063A0                 mov     [esp+2Ch+ErrorMessage], 0
.text:004063A8                 mov     [esp+2Ch+Block], ebx
.text:004063AB                 call    sub_41DB60
.text:004063B0                 mov     [esp+2Ch+var_1C], offset free
.text:004063B8                 lea     ecx, [esi+58h]
.text:004063BB                 mov     dword ptr [esp+2Ch+var_20], offset malloc ; char
.text:004063C3                 mov     [esp+2Ch+var_24], 0
.text:004063CB                 mov     [esp+2Ch+ErrorMessage], 0
.text:004063D3                 mov     [esp+2Ch+Block], ecx
.text:004063D6                 call    sub_41DB60
.text:004063DB                 mov     [esp+2Ch+var_18], esi
.text:004063DF                 xor     edx, edx
.text:004063E1                 mov     ds:dword_422260, edx
.text:004063E7                 mov     edx, [esp+2Ch+arg_0]
.text:004063EB                 test    edx, edx
.text:004063ED                 jnz     loc_406483
.text:004063F3
.text:004063F3 loc_4063F3:                             ; CODE XREF: sub_406340+199↓j
.text:004063F3                 mov     ecx, [esp+2Ch+arg_8]
.text:004063F7                 cmp     byte ptr [ecx+0Bh], 0
.text:004063FB                 jz      short loc_406410
.text:004063FD                 mov     eax, [esp+2Ch+var_14]
.text:00406401                 test    eax, eax
.text:00406403                 jz      short loc_406410
.text:00406405                 mov     ebp, [eax]
.text:00406407                 test    ebp, ebp
.text:00406409                 jnz     short loc_406450
.text:0040640B                 nop
.text:0040640C                 lea     esi, [esi+0]
.text:00406410
.text:00406410 loc_406410:                             ; CODE XREF: sub_406340+BB↑j
.text:00406410                                         ; sub_406340+C3↑j ...
.text:00406410                 mov     edi, [esp+2Ch+var_18]
.text:00406414                 mov     [esp+2Ch+Block], edi ; Block
.text:00406417                 call    sub_406640
.text:0040641C                 mov     eax, [esp+2Ch+var_14]
.text:00406420                 test    eax, eax
.text:00406422                 jz      short loc_40642A
.text:00406424                 mov     ecx, [eax]
.text:00406426                 test    ecx, ecx
.text:00406428                 jz      short loc_406443
.text:0040642A
.text:0040642A loc_40642A:                             ; CODE XREF: sub_406340+E2↑j
.text:0040642A                                         ; sub_406340+10E↓j
.text:0040642A                 mov     edx, [esp+2Ch+var_14]
.text:0040642E                 mov     [esp+2Ch+Block], edx ; Block
.text:00406431                 call    free
.text:00406436                 mov     eax, dword_421010
.text:0040643B                 add     esp, 1Ch
.text:0040643E                 pop     ebx
.text:0040643F                 pop     esi
.text:00406440                 pop     edi
.text:00406441                 pop     ebp
.text:00406442                 retn
.text:00406443 ; ---------------------------------------------------------------------------
.text:00406443
.text:00406443 loc_406443:                             ; CODE XREF: sub_406340+E8↑j
.text:00406443                 add     eax, 4
.text:00406446                 mov     [esp+2Ch+Block], eax ; Block
.text:00406449                 call    sub_40D1E0
.text:0040644E                 jmp     short loc_40642A
.text:00406450 ; ---------------------------------------------------------------------------
.text:00406450
.text:00406450 loc_406450:                             ; CODE XREF: sub_406340+C9↑j
.text:00406450                 mov     [esp+2Ch+Block], offset aCannotRestoreC ; "cannot restore current working director"...
.text:00406457                 call    ds:libintl_gettext
.text:0040645D                 mov     esi, [esp+2Ch+var_14]
.text:00406461                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406465                 mov     ebx, [esi]
.text:00406467                 mov     [esp+2Ch+Block], 0 ; Code
.text:0040646E                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00406472                 call    sub_415D50
.text:00406477                 mov     eax, 4
.text:0040647C                 mov     dword_421010, eax
.text:00406481                 jmp     short loc_406410
.text:00406483 ; ---------------------------------------------------------------------------
.text:00406483
.text:00406483 loc_406483:                             ; CODE XREF: sub_406340+AD↑j
.text:00406483                                         ; sub_406340+197↓j
.text:00406483                 mov     ebp, [esp+2Ch+var_18]
.text:00406487                 add     ebp, 88h ; 'ˆ'
.text:0040648D                 mov     [esp+2Ch+Block], ebp
.text:00406490                 call    sub_408820
.text:00406495                 mov     edi, [esp+2Ch+var_18]
.text:00406499                 add     edi, 0A8h ; '¨'
.text:0040649F                 mov     [esp+2Ch+Block], edi ; Buf
.text:004064A2                 call    _setjmp
.text:004064A7                 test    eax, eax
.text:004064A9                 mov     edx, 4
.text:004064AE                 jz      short loc_4064F8
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406340+252↓j
.text:004064B0                 lea     edi, [edx-2]
.text:004064B3                 cmp     edi, 2
.text:004064B6                 ja      loc_40661C
.text:004064BC                 cmp     edx, 4
.text:004064BF                 jz      short loc_4064F0
.text:004064C1                 cmp     edx, 3
.text:004064C4                 jz      short loc_4064E0
.text:004064C6
.text:004064C6 loc_4064C6:                             ; CODE XREF: sub_406340+1A7↓j
.text:004064C6                                         ; sub_406340+1B6↓j
.text:004064C6                 mov     edx, ds:dword_422260
.text:004064CC                 inc     edx
.text:004064CD                 cmp     edx, [esp+2Ch+arg_0]
.text:004064D1                 mov     ds:dword_422260, edx
.text:004064D7                 jb      short loc_406483
.text:004064D9                 jmp     loc_4063F3
.text:004064D9 ; ---------------------------------------------------------------------------
.text:004064DE                 align 10h
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: sub_406340+184↑j
.text:004064E0                 cmp     dword_421010, 2
.text:004064E7                 jnz     short loc_4064C6
.text:004064E9                 lea     esi, [esi+0]
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: sub_406340+17F↑j
.text:004064F0                 mov     dword_421010, edx
.text:004064F6                 jmp     short loc_4064C6
.text:004064F8 ; ---------------------------------------------------------------------------
.text:004064F8
.text:004064F8 loc_4064F8:                             ; CODE XREF: sub_406340+16E↑j
.text:004064F8                 mov     esi, [esp+2Ch+arg_4]
.text:004064FC                 lea     edi, [esp+2Ch+var_14]
.text:00406500                 mov     edx, ds:dword_422260
.text:00406506                 mov     ebp, [esp+2Ch+var_18]
.text:0040650A                 mov     ebx, [esi+edx*4]
.text:0040650D                 mov     esi, [esp+2Ch+arg_8]
.text:00406511                 mov     [esp+2Ch+Block], ebx
.text:00406514                 call    sub_40BC00
.text:00406519                 cmp     byte ptr [eax], 2Eh ; '.'
.text:0040651C                 jz      loc_4065D7
.text:00406522
.text:00406522 loc_406522:                             ; CODE XREF: sub_406340+2A2↓j
.text:00406522                                         ; sub_406340+2AC↓j
.text:00406522                 mov     eax, [edi]
.text:00406524                 test    eax, eax
.text:00406526                 jz      short loc_406597
.text:00406528                 mov     ecx, [eax]
.text:0040652A                 test    ecx, ecx
.text:0040652C                 jz      short loc_406597
.text:0040652E                 cmp     byte ptr [ebx], 0
.text:00406531                 mov     eax, ebx
.text:00406533                 jz      short loc_40653F
.text:00406535                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:00406539                 jz      loc_4065CF
.text:0040653F
.text:0040653F loc_40653F:                             ; CODE XREF: sub_406340+1F3↑j
.text:0040653F                                         ; sub_406340+292↓j
.text:0040653F                 cmp     byte ptr [eax], 2Fh ; '/'
.text:00406542                 jz      short loc_406597
.text:00406544                 cmp     byte ptr [ebx], 0
.text:00406547                 mov     eax, ebx
.text:00406549                 jz      short loc_406551
.text:0040654B                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040654F                 jz      short loc_4065CA
.text:00406551
.text:00406551 loc_406551:                             ; CODE XREF: sub_406340+209↑j
.text:00406551                                         ; sub_406340+28D↓j
.text:00406551                 cmp     byte ptr [eax], 5Ch ; '\'
.text:00406554                 jz      short loc_406597
.text:00406556                 mov     [esp+2Ch+Block], ebx ; char *
.text:00406559                 call    sub_40BBD0
.text:0040655E                 mov     [esp+2Ch+Block], offset aCannotRemoveS ; "cannot remove %s"
.text:00406565                 mov     esi, eax
.text:00406567                 call    ds:libintl_gettext
.text:0040656D                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00406571                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406575                 mov     ebp, [edi]
.text:00406577                 mov     ebx, [ebp+0]
.text:0040657A                 mov     [esp+2Ch+Block], 0 ; Code
.text:00406581                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00406585                 call    sub_415D50
.text:0040658A
.text:0040658A loc_40658A:                             ; CODE XREF: sub_406340+2D7↓j
.text:0040658A                 mov     eax, 4
.text:0040658F                 nop
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: sub_406340+272↓j
.text:00406590                                         ; sub_406340+288↓j
.text:00406590                 mov     edx, eax
.text:00406592                 jmp     loc_4064B0
.text:00406597 ; ---------------------------------------------------------------------------
.text:00406597
.text:00406597 loc_406597:                             ; CODE XREF: sub_406340+1E6↑j
.text:00406597                                         ; sub_406340+1EC↑j ...
.text:00406597                 mov     dword ptr [esp+2Ch+var_20], 0 ; int
.text:0040659F                 mov     [esp+2Ch+var_24], esi ; int
.text:004065A3                 mov     [esp+2Ch+ErrorMessage], ebx ; LPCSTR
.text:004065A7                 mov     [esp+2Ch+Block], ebp ; int
.text:004065AA                 call    sub_4066D0
.text:004065AF                 cmp     eax, 5
.text:004065B2                 jnz     short loc_406590
.text:004065B4                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:004065B8                 mov     [esp+2Ch+var_24], edi ; int
.text:004065BC                 mov     [esp+2Ch+ErrorMessage], ebx ; LPCSTR
.text:004065C0                 mov     [esp+2Ch+Block], ebp ; int
.text:004065C3                 call    sub_406A40
.text:004065C8                 jmp     short loc_406590
.text:004065CA ; ---------------------------------------------------------------------------
.text:004065CA
.text:004065CA loc_4065CA:                             ; CODE XREF: sub_406340+20F↑j
.text:004065CA                 lea     eax, [ebx+2]
.text:004065CD                 jmp     short loc_406551
.text:004065CF ; ---------------------------------------------------------------------------
.text:004065CF
.text:004065CF loc_4065CF:                             ; CODE XREF: sub_406340+1F9↑j
.text:004065CF                 lea     eax, [ebx+2]
.text:004065D2                 jmp     loc_40653F
.text:004065D7 ; ---------------------------------------------------------------------------
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: sub_406340+1DC↑j
.text:004065D7                 movzx   edx, byte ptr [eax+1]
.text:004065DB                 test    dl, dl
.text:004065DD                 jz      short loc_4065F2
.text:004065DF                 cmp     dl, 2Eh ; '.'
.text:004065E2                 jnz     loc_406522
.text:004065E8                 cmp     byte ptr [eax+2], 0
.text:004065EC                 jnz     loc_406522
.text:004065F2
.text:004065F2 loc_4065F2:                             ; CODE XREF: sub_406340+29D↑j
.text:004065F2                 mov     [esp+2Ch+Block], offset aCannotRemoveOr ; "cannot remove `.' or `..'"
.text:004065F9                 call    ds:libintl_gettext
.text:004065FF                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406607                 mov     [esp+2Ch+Block], 0 ; Code
.text:0040660E                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406612                 call    sub_415D50
.text:00406617                 jmp     loc_40658A
.text:0040661C ; ---------------------------------------------------------------------------
.text:0040661C
.text:0040661C loc_40661C:                             ; CODE XREF: sub_406340+176↑j
.text:0040661C                 mov     [esp+2Ch+var_24], 4C5h
.text:00406624                 mov     [esp+2Ch+ErrorMessage], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:0040662C                 mov     [esp+2Ch+Block], offset aValidStatusS ; "VALID_STATUS (s)"
.text:00406633                 call    _assert
.text:00406633 sub_406340      endp
.text:00406633
.text:00406633 ; ---------------------------------------------------------------------------
.text:00406638                 align 10h
.text:00406640
.text:00406640 ; =============== S U B R O U T I N E =======================================
.text:00406640
.text:00406640
.text:00406640 ; int __cdecl sub_406640(void *Block)
.text:00406640 sub_406640      proc near               ; CODE XREF: sub_406340+D7↑p
.text:00406640
.text:00406640 var_C           = dword ptr -0Ch
.text:00406640 var_8           = dword ptr -8
.text:00406640 var_4           = dword ptr -4
.text:00406640 Block           = dword ptr  4
.text:00406640
.text:00406640                 sub     esp, 0Ch
.text:00406643                 mov     [esp+0Ch+var_4], ebx
.text:00406647                 mov     ebx, [esp+0Ch+Block]
.text:0040664B                 mov     [esp+0Ch+var_8], 0
.text:00406653                 mov     [esp+0Ch+var_C], ebx
.text:00406656                 call    sub_41DE80
.text:0040665B                 mov     [esp+0Ch+var_8], 0
.text:00406663                 lea     edx, [ebx+2Ch]
.text:00406666                 mov     [esp+0Ch+var_C], edx
.text:00406669                 call    sub_41DE80
.text:0040666E                 mov     [esp+0Ch+var_8], 0
.text:00406676                 lea     edx, [ebx+58h]
.text:00406679                 mov     [esp+0Ch+var_C], edx
.text:0040667C                 call    sub_41DE80
.text:00406681                 mov     [esp+0Ch+Block], ebx ; Block
.text:00406685                 mov     ebx, [esp+0Ch+var_4]
.text:00406689                 add     esp, 0Ch
.text:0040668C                 jmp     free
.text:0040668C sub_406640      endp
.text:0040668C
.text:0040668C ; ---------------------------------------------------------------------------
.text:00406691 aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: sub_4066D0+167↓o
.text:0040669D aRemovedDirecto db 'removed directory: %s',0Ah,0
.text:0040669D                                         ; DATA XREF: sub_4066D0+1DC↓o
.text:0040669D                                         ; sub_406A40+72E↓o
.text:004066B4 aCannotRemoveDi db 'cannot remove directory %s',0
.text:004066B4                                         ; DATA XREF: sub_4066D0+203↓o
.text:004066B4                                         ; sub_406A40+89↓o ...
.text:004066CF                 align 10h
.text:004066D0
.text:004066D0 ; =============== S U B R O U T I N E =======================================
.text:004066D0
.text:004066D0
.text:004066D0 ; int __cdecl sub_4066D0(int, LPCSTR, int, int)
.text:004066D0 sub_4066D0      proc near               ; CODE XREF: sub_406340+26A↑p
.text:004066D0                                         ; sub_4080E0+C4↓p
.text:004066D0
.text:004066D0 Format          = dword ptr -3Ch
.text:004066D0 ErrorMessage    = dword ptr -38h
.text:004066D0 var_34          = dword ptr -34h
.text:004066D0 var_30          = byte ptr -30h
.text:004066D0 var_2C          = dword ptr -2Ch
.text:004066D0 var_28          = dword ptr -28h
.text:004066D0 var_18          = dword ptr -18h
.text:004066D0 var_14          = dword ptr -14h
.text:004066D0 var_10          = dword ptr -10h
.text:004066D0 var_C           = dword ptr -0Ch
.text:004066D0 var_8           = dword ptr -8
.text:004066D0 var_4           = dword ptr -4
.text:004066D0 arg_0           = dword ptr  4
.text:004066D0 arg_4           = dword ptr  8
.text:004066D0 arg_8           = dword ptr  0Ch
.text:004066D0 arg_C           = dword ptr  10h
.text:004066D0
.text:004066D0                 sub     esp, 3Ch
.text:004066D3                 lea     edx, [esp+3Ch+var_14]
.text:004066D7                 mov     [esp+3Ch+var_10], ebx
.text:004066DB                 mov     ebx, [esp+3Ch+arg_8]
.text:004066DF                 mov     [esp+3Ch+var_C], esi
.text:004066E3                 mov     esi, [esp+3Ch+arg_4]
.text:004066E7                 mov     [esp+3Ch+var_8], edi
.text:004066EB                 mov     edi, [esp+3Ch+arg_0]
.text:004066EF                 mov     [esp+3Ch+var_28], edx ; int
.text:004066F3                 lea     edx, [esp+3Ch+var_18]
.text:004066F7                 mov     [esp+3Ch+var_4], ebp
.text:004066FB                 mov     ebp, [esp+3Ch+arg_C]
.text:004066FF                 mov     [esp+3Ch+var_2C], edx ; int
.text:00406703                 mov     dword ptr [esp+3Ch+var_30], 2 ; int
.text:0040670B                 mov     [esp+3Ch+var_34], ebx ; int
.text:0040670F                 mov     [esp+3Ch+ErrorMessage], esi ; LPCSTR
.text:00406713                 mov     [esp+3Ch+Format], edi ; int
.text:00406716                 call    sub_407C60
.text:0040671B                 cmp     eax, 2
.text:0040671E                 jz      short loc_406734
.text:00406720
.text:00406720 loc_406720:                             ; CODE XREF: sub_4066D0+128↓j
.text:00406720                                         ; sub_4066D0+135↓j ...
.text:00406720                 mov     ebx, [esp+3Ch+var_10]
.text:00406724                 mov     esi, [esp+3Ch+var_C]
.text:00406728                 mov     edi, [esp+3Ch+var_8]
.text:0040672C                 mov     ebp, [esp+3Ch+var_4]
.text:00406730                 add     esp, 3Ch
.text:00406733                 retn
.text:00406734 ; ---------------------------------------------------------------------------
.text:00406734
.text:00406734 loc_406734:                             ; CODE XREF: sub_4066D0+4E↑j
.text:00406734                 cmp     [esp+3Ch+var_18], 4
.text:00406739                 jz      loc_4068B5
.text:0040673F
.text:0040673F loc_40673F:                             ; CODE XREF: sub_4066D0+1E9↓j
.text:0040673F                 cmp     [esp+3Ch+var_14], 4
.text:00406744                 jz      loc_406854
.text:0040674A
.text:0040674A loc_40674A:                             ; CODE XREF: sub_4066D0+1AC↓j
.text:0040674A                 test    ebp, ebp
.text:0040674C                 jz      short loc_406758
.text:0040674E                 cmp     byte ptr [ebp+0Ah], 4
.text:00406752                 jz      loc_406800
.text:00406758
.text:00406758 loc_406758:                             ; CODE XREF: sub_4066D0+7C↑j
.text:00406758                 cmp     [esp+3Ch+var_18], 4
.text:0040675D                 jz      loc_406800
.text:00406763                 mov     [esp+3Ch+Format], esi ; LPCSTR
.text:00406766                 call    sub_41A0D0
.text:0040676B                 test    eax, eax
.text:0040676D                 jz      loc_40681D
.text:00406773                 call    _errno
.text:00406778                 cmp     dword ptr [eax], 2
.text:0040677B                 jz      loc_40680A
.text:00406781
.text:00406781 loc_406781:                             ; CODE XREF: sub_4066D0+13D↓j
.text:00406781                 cmp     byte ptr [ebx+2], 0
.text:00406785                 jz      short loc_4067AF
.text:00406787                 call    _errno
.text:0040678C                 cmp     dword ptr [eax], 2
.text:0040678F                 jz      short loc_4067AF
.text:00406791                 call    _errno
.text:00406796                 cmp     dword ptr [eax], 14h
.text:00406799                 jz      short loc_4067AF
.text:0040679B                 call    _errno
.text:004067A0                 cmp     dword ptr [eax], 3Eh ; '>'
.text:004067A3                 jz      short loc_4067AF
.text:004067A5                 call    _errno
.text:004067AA                 cmp     dword ptr [eax], 26h ; '&'
.text:004067AD                 jnz     short loc_406800
.text:004067AF
.text:004067AF loc_4067AF:                             ; CODE XREF: sub_4066D0+B5↑j
.text:004067AF                                         ; sub_4066D0+BF↑j ...
.text:004067AF                 mov     [esp+3Ch+Format], edi ; int
.text:004067B2                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:004067B6                 call    sub_4076F0
.text:004067BB                 mov     [esp+3Ch+Format], eax ; char *
.text:004067BE                 call    sub_40BBD0
.text:004067C3                 mov     [esp+3Ch+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:004067CA                 mov     ebx, eax
.text:004067CC                 call    ds:libintl_gettext
.text:004067D2                 mov     edi, eax
.text:004067D4                 call    _errno
.text:004067D9                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:004067DD                 mov     [esp+3Ch+var_34], edi ; char *
.text:004067E1                 mov     ecx, [eax]
.text:004067E3                 mov     [esp+3Ch+ErrorMessage], ecx ; ErrorMessage
.text:004067E7
.text:004067E7 loc_4067E7:                             ; CODE XREF: sub_4066D0+222↓j
.text:004067E7                 mov     [esp+3Ch+Format], 0 ; Code
.text:004067EE                 call    sub_415D50
.text:004067F3                 mov     eax, 4
.text:004067F8                 jmp     loc_406720
.text:004067F8 ; ---------------------------------------------------------------------------
.text:004067FD                 align 10h
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: sub_4066D0+82↑j
.text:00406800                                         ; sub_4066D0+8D↑j ...
.text:00406800                 mov     eax, 5
.text:00406805                 jmp     loc_406720
.text:0040680A ; ---------------------------------------------------------------------------
.text:0040680A
.text:0040680A loc_40680A:                             ; CODE XREF: sub_4066D0+AB↑j
.text:0040680A                 cmp     byte ptr [ebx], 0
.text:0040680D                 jz      loc_406781
.text:00406813
.text:00406813 loc_406813:                             ; CODE XREF: sub_4066D0+151↓j
.text:00406813                                         ; sub_4066D0+182↓j ...
.text:00406813                 mov     eax, 2
.text:00406818                 jmp     loc_406720
.text:0040681D ; ---------------------------------------------------------------------------
.text:0040681D
.text:0040681D loc_40681D:                             ; CODE XREF: sub_4066D0+9D↑j
.text:0040681D                 cmp     byte ptr [ebx+0Ah], 0
.text:00406821                 jz      short loc_406813
.text:00406823                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:00406827                 mov     [esp+3Ch+Format], edi ; int
.text:0040682A                 call    sub_4076F0
.text:0040682F                 mov     [esp+3Ch+Format], eax ; char *
.text:00406832                 call    sub_40BBD0
.text:00406837                 mov     [esp+3Ch+Format], offset aRemovedS ; "removed %s\n"
.text:0040683E
.text:0040683E loc_40683E:                             ; CODE XREF: sub_4066D0+1E3↓j
.text:0040683E                 mov     ebx, eax
.text:00406840                 call    ds:libintl_gettext
.text:00406846                 mov     [esp+3Ch+ErrorMessage], ebx
.text:0040684A                 mov     [esp+3Ch+Format], eax ; Format
.text:0040684D                 call    printf
.text:00406852                 jmp     short loc_406813
.text:00406854 ; ---------------------------------------------------------------------------
.text:00406854
.text:00406854 loc_406854:                             ; CODE XREF: sub_4066D0+74↑j
.text:00406854                 mov     [esp+3Ch+Format], esi ; LPCSTR
.text:00406857                 call    sub_41A4D0
.text:0040685C                 test    eax, eax
.text:0040685E                 jz      short loc_40688E
.text:00406860                 call    _errno
.text:00406865                 cmp     dword ptr [eax], 2
.text:00406868                 jz      short loc_406887
.text:0040686A
.text:0040686A loc_40686A:                             ; CODE XREF: sub_4066D0+1BA↓j
.text:0040686A                 call    _errno
.text:0040686F                 cmp     dword ptr [eax], 29h ; ')'
.text:00406872                 jz      short loc_406800
.text:00406874                 call    _errno
.text:00406879                 cmp     dword ptr [eax], 11h
.text:0040687C                 jnz     loc_40674A
.text:00406882                 jmp     loc_406800
.text:00406887 ; ---------------------------------------------------------------------------
.text:00406887
.text:00406887 loc_406887:                             ; CODE XREF: sub_4066D0+198↑j
.text:00406887                 cmp     byte ptr [ebx], 0
.text:0040688A                 jz      short loc_40686A
.text:0040688C                 jmp     short loc_406813
.text:0040688E ; ---------------------------------------------------------------------------
.text:0040688E
.text:0040688E loc_40688E:                             ; CODE XREF: sub_4066D0+18E↑j
.text:0040688E                 cmp     byte ptr [ebx+0Ah], 0
.text:00406892                 jz      loc_406813
.text:00406898                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:0040689C                 mov     [esp+3Ch+Format], edi ; int
.text:0040689F                 call    sub_4076F0
.text:004068A4                 mov     [esp+3Ch+Format], eax ; char *
.text:004068A7                 call    sub_40BBD0
.text:004068AC                 mov     [esp+3Ch+Format], offset aRemovedDirecto ; "removed directory: %s\n"
.text:004068B3                 jmp     short loc_40683E
.text:004068B5 ; ---------------------------------------------------------------------------
.text:004068B5
.text:004068B5 loc_4068B5:                             ; CODE XREF: sub_4066D0+69↑j
.text:004068B5                 cmp     byte ptr [ebx+2], 0
.text:004068B9                 jnz     loc_40673F
.text:004068BF                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:004068C3                 mov     [esp+3Ch+Format], edi ; int
.text:004068C6                 call    sub_4076F0
.text:004068CB                 mov     [esp+3Ch+Format], eax ; char *
.text:004068CE                 call    sub_40BBD0
.text:004068D3                 mov     [esp+3Ch+Format], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:004068DA                 mov     esi, eax
.text:004068DC                 call    ds:libintl_gettext
.text:004068E2                 mov     dword ptr [esp+3Ch+var_30], esi
.text:004068E6                 mov     [esp+3Ch+ErrorMessage], 15h
.text:004068EE                 mov     [esp+3Ch+var_34], eax
.text:004068F2                 jmp     loc_4067E7
.text:004068F2 sub_4066D0      endp
.text:004068F2
.text:004068F2 ; ---------------------------------------------------------------------------
.text:004068F7 ; const CHAR byte_4068F7
.text:004068F7 byte_4068F7     db 2Eh                  ; DATA XREF: sub_406A40+151↓o
.text:004068F7                                         ; sub_406A40+27B↓o ...
.text:004068F8                 db 0
.text:004068F9 aCannotChdirFro db 'cannot chdir from %s to %s',0
.text:004068F9                                         ; DATA XREF: sub_406A40+17A↓o
.text:004068F9                                         ; sub_4080E0+2AF↓o
.text:00406914 aSChangedDevIno db '%s changed dev/ino',0
.text:00406914                                         ; DATA XREF: sub_406A40+2FA↓o
.text:00406914                                         ; sub_406A40+54D↓o ...
.text:00406927 aCannotLstatInS db 'cannot lstat `.',27h,' in %s',0
.text:00406927                                         ; DATA XREF: sub_406A40+618↓o
.text:00406927                                         ; sub_406A40+8B4↓o ...
.text:0040693E a1AdStackHeight db '1 < AD_stack_height (ds)',0
.text:0040693E                                         ; DATA XREF: sub_406A40+850↓o
.text:00406957 ; const char asc_406957[]
.text:00406957 asc_406957      db '/',0                ; DATA XREF: sub_406A40+8FB↓o
.text:00406957                                         ; sub_406A40:loc_4073D0↓o ...
.text:00406959                 align 10h
.text:00406960 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.text:00406960                                         ; DATA XREF: sub_406A40+936↓o
.text:0040698D                 align 20h
.text:004069A0 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.text:004069A0                                         ; DATA XREF: sub_406A40:loc_4073A1↓o
.text:004069D1                 db 0EBh, 0Dh, 90h
.text:004069D4                 align 10h
.text:004069E0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.text:004069E0                                         ; DATA XREF: sub_406A40+9D0↓o
.text:00406A1A aCannotLstatS   db 'cannot lstat %s',0  ; DATA XREF: sub_406A40+A26↓o
.text:00406A1A                                         ; sub_407C60+2D3↓o ...
.text:00406A2A aErrno0         db 'errno != 0',0       ; DATA XREF: sub_406A40+B59↓o
.text:00406A35                 align 10h
.text:00406A40
.text:00406A40 ; =============== S U B R O U T I N E =======================================
.text:00406A40
.text:00406A40
.text:00406A40 ; int __cdecl sub_406A40(int, LPCSTR, int, int)
.text:00406A40 sub_406A40      proc near               ; CODE XREF: sub_406340+283↑p
.text:00406A40
.text:00406A40 Buf             = dword ptr -22Ch
.text:00406A40 Value           = dword ptr -228h
.text:00406A40 Size            = dword ptr -224h
.text:00406A40 var_220         = byte ptr -220h
.text:00406A40 var_21C         = dword ptr -21Ch
.text:00406A40 var_218         = dword ptr -218h
.text:00406A40 Src             = dword ptr -1F8h
.text:00406A40 var_1F4         = dword ptr -1F4h
.text:00406A40 var_1F0         = dword ptr -1F0h
.text:00406A40 var_1EC         = dword ptr -1ECh
.text:00406A40 var_1E8         = dword ptr -1E8h
.text:00406A40 var_1E4         = dword ptr -1E4h
.text:00406A40 Block           = dword ptr -1E0h
.text:00406A40 var_1DC         = byte ptr -1DCh
.text:00406A40 var_1D4         = dword ptr -1D4h
.text:00406A40 var_1D0         = dword ptr -1D0h
.text:00406A40 var_1CC         = dword ptr -1CCh
.text:00406A40 var_1C8         = dword ptr -1C8h
.text:00406A40 var_16C         = byte ptr -16Ch
.text:00406A40 var_164         = dword ptr -164h
.text:00406A40 var_160         = dword ptr -160h
.text:00406A40 var_15C         = dword ptr -15Ch
.text:00406A40 var_158         = dword ptr -158h
.text:00406A40 var_FC          = byte ptr -0FCh
.text:00406A40 var_F4          = dword ptr -0F4h
.text:00406A40 var_F0          = dword ptr -0F0h
.text:00406A40 var_EC          = dword ptr -0ECh
.text:00406A40 var_E8          = dword ptr -0E8h
.text:00406A40 var_8C          = dword ptr -8Ch
.text:00406A40 var_84          = dword ptr -84h
.text:00406A40 var_80          = dword ptr -80h
.text:00406A40 var_7C          = dword ptr -7Ch
.text:00406A40 var_78          = dword ptr -78h
.text:00406A40 arg_0           = dword ptr  4
.text:00406A40 arg_4           = dword ptr  8
.text:00406A40 arg_8           = dword ptr  0Ch
.text:00406A40 arg_C           = dword ptr  10h
.text:00406A40
.text:00406A40                 push    ebp
.text:00406A41                 push    edi
.text:00406A42                 push    esi
.text:00406A43                 push    ebx
.text:00406A44                 sub     esp, 21Ch
.text:00406A4A                 call    _errno
.text:00406A4F                 mov     ecx, [esp+22Ch+arg_8]
.text:00406A56                 mov     esi, [eax]
.text:00406A58                 mov     eax, [ecx]
.text:00406A5A                 test    eax, eax
.text:00406A5C                 jz      loc_40749F
.text:00406A62
.text:00406A62 loc_406A62:                             ; CODE XREF: sub_406A40+AF4↓j
.text:00406A62                 mov     edi, [eax]
.text:00406A64                 test    edi, edi
.text:00406A66                 jz      loc_406B13
.text:00406A6C                 mov     edx, [esp+22Ch+arg_4]
.text:00406A73                 movzx   eax, byte ptr [edx]
.text:00406A76                 test    al, al
.text:00406A78                 jz      short loc_406A84
.text:00406A7A                 cmp     byte ptr [edx+1], 3Ah ; ':'
.text:00406A7E                 jz      loc_407497
.text:00406A84
.text:00406A84 loc_406A84:                             ; CODE XREF: sub_406A40+38↑j
.text:00406A84                                         ; sub_406A40+A5A↓j
.text:00406A84                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00406A87                 jz      loc_406B13
.text:00406A8D                 test    al, al
.text:00406A8F                 mov     edx, [esp+22Ch+arg_4]
.text:00406A96                 jz      short loc_406AA2
.text:00406A98                 cmp     byte ptr [edx+1], 3Ah ; ':'
.text:00406A9C                 jz      loc_40748F
.text:00406AA2
.text:00406AA2 loc_406AA2:                             ; CODE XREF: sub_406A40+56↑j
.text:00406AA2                                         ; sub_406A40+A52↓j
.text:00406AA2                 cmp     byte ptr [edx], 5Ch ; '\'
.text:00406AA5                 jz      short loc_406B13
.text:00406AA7                 mov     edx, [esp+22Ch+arg_4]
.text:00406AAE                 mov     edi, [esp+22Ch+arg_0]
.text:00406AB5                 mov     [esp+22Ch+Value], edx ; char *
.text:00406AB9                 mov     [esp+22Ch+Buf], edi ; int
.text:00406ABC                 call    sub_4076F0
.text:00406AC1                 mov     [esp+22Ch+Buf], eax ; char *
.text:00406AC4                 call    sub_40BBD0
.text:00406AC9                 mov     [esp+22Ch+Buf], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:00406AD0                 mov     ebp, eax
.text:00406AD2                 call    ds:libintl_gettext
.text:00406AD8                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:00406ADC                 mov     ebp, edi
.text:00406ADE                 add     ebp, 0A8h ; '¨'
.text:00406AE4                 mov     [esp+22Ch+Size], eax ; char *
.text:00406AE8                 mov     eax, [esp+22Ch+arg_8]
.text:00406AEF                 mov     ebx, [eax]
.text:00406AF1                 mov     esi, [ebx]
.text:00406AF3                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00406AFA                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00406AFE                 call    sub_415D50
.text:00406B03                 mov     [esp+22Ch+Value], 1 ; Value
.text:00406B0B                 mov     [esp+22Ch+Buf], ebp ; Buf
.text:00406B0E                 call    longjmp
.text:00406B13 ; ---------------------------------------------------------------------------
.text:00406B13
.text:00406B13 loc_406B13:                             ; CODE XREF: sub_406A40+26↑j
.text:00406B13                                         ; sub_406A40+47↑j ...
.text:00406B13                 mov     edi, [esp+22Ch+arg_4]
.text:00406B1A                 lea     ecx, [esp+22Ch+var_8C]
.text:00406B21                 mov     [esp+22Ch+Value], ecx
.text:00406B25                 mov     [esp+22Ch+Buf], edi
.text:00406B28                 call    sub_409320
.text:00406B2D                 test    eax, eax
.text:00406B2F                 jnz     loc_407444
.text:00406B35                 call    _errno
.text:00406B3A                 mov     dword ptr [eax], 14h
.text:00406B40                 mov     edi, [esp+22Ch+var_8C]
.text:00406B47                 and     edi, 0F000h
.text:00406B4D                 cmp     edi, 4000h
.text:00406B53                 jnz     short loc_406B6C
.text:00406B55                 mov     ecx, [esp+22Ch+arg_4]
.text:00406B5C                 mov     [esp+22Ch+Buf], ecx ; LPCSTR
.text:00406B5F                 call    sub_41A6F0
.text:00406B64                 test    eax, eax
.text:00406B66                 jz      loc_406C49
.text:00406B6C
.text:00406B6C loc_406B6C:                             ; CODE XREF: sub_406A40+113↑j
.text:00406B6C                 call    _errno
.text:00406B71                 cmp     dword ptr [eax], 14h
.text:00406B74                 jz      loc_406BFE
.text:00406B7A                 mov     [esp+22Ch+Buf], 1 ; int
.text:00406B81                 mov     edi, [esp+22Ch+arg_4]
.text:00406B88                 mov     [esp+22Ch+Value], edi ; char *
.text:00406B8C                 call    sub_40BBA0
.text:00406B91                 mov     [esp+22Ch+Value], offset byte_4068F7 ; char *
.text:00406B99                 mov     ebp, eax
.text:00406B9B                 mov     eax, [esp+22Ch+arg_0]
.text:00406BA2                 mov     [esp+22Ch+Buf], eax ; int
.text:00406BA5                 call    sub_4076F0
.text:00406BAA                 mov     [esp+22Ch+Value], eax ; char *
.text:00406BAE                 mov     [esp+22Ch+Buf], 0 ; int
.text:00406BB5                 call    sub_40BBA0
.text:00406BBA                 mov     [esp+22Ch+Buf], offset aCannotChdirFro ; "cannot chdir from %s to %s"
.text:00406BC1                 mov     ebx, eax
.text:00406BC3                 call    ds:libintl_gettext
.text:00406BC9                 mov     esi, eax
.text:00406BCB                 call    _errno
.text:00406BD0                 mov     [esp+22Ch+var_21C], ebp
.text:00406BD4                 mov     dword ptr [esp+22Ch+var_220], ebx ; char
.text:00406BD8                 mov     [esp+22Ch+Size], esi ; char *
.text:00406BDC                 mov     esi, [eax]
.text:00406BDE                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00406BE5                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00406BE9                 call    sub_415D50
.text:00406BEE
.text:00406BEE loc_406BEE:                             ; CODE XREF: sub_406A40+207↓j
.text:00406BEE                 mov     eax, 4
.text:00406BF3
.text:00406BF3 loc_406BF3:                             ; CODE XREF: sub_406A40+6A6↓j
.text:00406BF3                                         ; sub_406A40+83B↓j ...
.text:00406BF3                 add     esp, 21Ch
.text:00406BF9                 pop     ebx
.text:00406BFA                 pop     esi
.text:00406BFB                 pop     edi
.text:00406BFC                 pop     ebp
.text:00406BFD                 retn
.text:00406BFE ; ---------------------------------------------------------------------------
.text:00406BFE
.text:00406BFE loc_406BFE:                             ; CODE XREF: sub_406A40+134↑j
.text:00406BFE                 mov     edx, [esp+22Ch+arg_4]
.text:00406C05                 mov     ebx, [esp+22Ch+arg_0]
.text:00406C0C                 mov     [esp+22Ch+Value], edx ; char *
.text:00406C10                 mov     [esp+22Ch+Buf], ebx ; int
.text:00406C13                 call    sub_4076F0
.text:00406C18                 mov     [esp+22Ch+Buf], eax ; char *
.text:00406C1B                 call    sub_40BBD0
.text:00406C20                 mov     [esp+22Ch+Buf], offset aCannotRemoveS ; "cannot remove %s"
.text:00406C27                 mov     ebp, eax
.text:00406C29                 call    ds:libintl_gettext
.text:00406C2F                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:00406C33                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00406C37                 mov     [esp+22Ch+Size], eax ; char *
.text:00406C3B
.text:00406C3B loc_406C3B:                             ; CODE XREF: sub_406A40+A4A↓j
.text:00406C3B                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00406C42                 call    sub_415D50
.text:00406C47                 jmp     short loc_406BEE
.text:00406C49 ; ---------------------------------------------------------------------------
.text:00406C49
.text:00406C49 loc_406C49:                             ; CODE XREF: sub_406A40+126↑j
.text:00406C49                 mov     ecx, [esp+22Ch+arg_C]
.text:00406C50                 mov     edi, [ecx+4]
.text:00406C53                 test    edi, edi
.text:00406C55                 jz      short loc_406C96
.text:00406C57                 mov     edx, [esp+22Ch+var_80]
.text:00406C5E                 mov     ebp, [esp+22Ch+var_84]
.text:00406C65                 mov     esi, [edi]
.text:00406C67                 mov     ecx, [edi+4]
.text:00406C6A                 mov     eax, edx
.text:00406C6C                 xor     esi, ebp
.text:00406C6E                 xor     eax, ecx
.text:00406C70                 or      eax, esi
.text:00406C72                 jnz     short loc_406C96
.text:00406C74                 mov     edx, [esp+22Ch+var_78]
.text:00406C7B                 mov     ebp, [esp+22Ch+var_7C]
.text:00406C82                 mov     esi, [edi+8]
.text:00406C85                 mov     ecx, [edi+0Ch]
.text:00406C88                 mov     eax, edx
.text:00406C8A                 xor     esi, ebp
.text:00406C8C                 xor     eax, ecx
.text:00406C8E                 or      eax, esi
.text:00406C90                 jz      loc_407329
.text:00406C96
.text:00406C96 loc_406C96:                             ; CODE XREF: sub_406A40+215↑j
.text:00406C96                                         ; sub_406A40+232↑j
.text:00406C96                 mov     eax, [esp+22Ch+arg_0]
.text:00406C9D                 lea     ebp, [esp+22Ch+var_FC]
.text:00406CA4                 mov     esi, [esp+22Ch+arg_4]
.text:00406CAB                 mov     [esp+22Ch+Buf], eax ; int
.text:00406CAE                 mov     [esp+22Ch+Value], esi ; char *
.text:00406CB2                 call    sub_4075F0
.text:00406CB7                 mov     [esp+22Ch+Value], ebp
.text:00406CBB                 mov     [esp+22Ch+Buf], offset byte_4068F7
.text:00406CC2                 call    sub_409320
.text:00406CC7                 test    eax, eax
.text:00406CC9                 jnz     loc_4072D5
.text:00406CCF
.text:00406CCF loc_406CCF:                             ; CODE XREF: sub_406A40+8E4↓j
.text:00406CCF                 mov     esi, [esp+22Ch+var_F0]
.text:00406CD6                 mov     edi, [esp+22Ch+var_F4]
.text:00406CDD                 mov     ebp, [esp+22Ch+var_84]
.text:00406CE4                 mov     ecx, [esp+22Ch+var_80]
.text:00406CEB                 mov     eax, esi
.text:00406CED                 xor     ebp, edi
.text:00406CEF                 xor     eax, ecx
.text:00406CF1                 or      eax, ebp
.text:00406CF3                 jnz     short loc_406D1B
.text:00406CF5                 mov     edx, [esp+22Ch+var_E8]
.text:00406CFC                 mov     edi, [esp+22Ch+var_EC]
.text:00406D03                 mov     ebp, [esp+22Ch+var_7C]
.text:00406D0A                 mov     ecx, [esp+22Ch+var_78]
.text:00406D11                 mov     eax, edx
.text:00406D13                 xor     ebp, edi
.text:00406D15                 xor     eax, ecx
.text:00406D17                 or      eax, ebp
.text:00406D19                 jz      short loc_406D65
.text:00406D1B
.text:00406D1B loc_406D1B:                             ; CODE XREF: sub_406A40+2B3↑j
.text:00406D1B                 mov     [esp+22Ch+Value], offset byte_4068F7 ; char *
.text:00406D23                 mov     ebx, [esp+22Ch+arg_0]
.text:00406D2A                 mov     [esp+22Ch+Buf], ebx ; int
.text:00406D2D                 call    sub_4076F0
.text:00406D32                 mov     [esp+22Ch+Buf], eax ; char *
.text:00406D35                 call    sub_40BBD0
.text:00406D3A                 mov     [esp+22Ch+Buf], offset aSChangedDevIno ; "%s changed dev/ino"
.text:00406D41                 mov     esi, eax
.text:00406D43                 call    ds:libintl_gettext
.text:00406D49                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00406D4D                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00406D55                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00406D5C                 mov     [esp+22Ch+Size], eax ; char *
.text:00406D60                 call    sub_415D50
.text:00406D65
.text:00406D65 loc_406D65:                             ; CODE XREF: sub_406A40+2D9↑j
.text:00406D65                 mov     ecx, [esp+22Ch+arg_0]
.text:00406D6C                 add     ecx, 58h ; 'X'
.text:00406D6F                 mov     ebp, [ecx+10h]
.text:00406D72                 mov     [esp+22Ch+var_1F4], ecx
.text:00406D76                 mov     edx, [ecx+0Ch]
.text:00406D79                 sub     ebp, edx
.text:00406D7B                 cmp     ebp, 18h
.text:00406D7E                 jl      loc_4072B9
.text:00406D84
.text:00406D84 loc_406D84:                             ; CODE XREF: sub_406A40+890↓j
.text:00406D84                 mov     [esp+22Ch+var_1F0], 2
.text:00406D8C                 mov     esi, [esp+22Ch+var_1F4]
.text:00406D90                 lea     ebp, [edx+18h]
.text:00406D93                 mov     eax, [esp+22Ch+arg_0]
.text:00406D9A                 mov     ecx, [esp+22Ch+var_EC]
.text:00406DA1                 mov     edi, [esp+22Ch+var_E8]
.text:00406DA8                 mov     [esi+0Ch], ebp
.text:00406DAB                 mov     ebp, [eax+64h]
.text:00406DAE                 lea     esi, [ebp-18h]
.text:00406DB1                 mov     [esi+10h], ecx
.text:00406DB4                 mov     [esi+14h], edi
.text:00406DB7                 mov     edx, [esp+22Ch+var_F4]
.text:00406DBE                 mov     dword ptr [ebp-18h], 0
.text:00406DC5                 mov     ebx, [esp+22Ch+var_F0]
.text:00406DCC                 mov     dword ptr [esi+4], 2
.text:00406DD3                 mov     [esi+8], edx
.text:00406DD6                 mov     [esi+0Ch], ebx
.text:00406DD9                 lea     esi, [esi+0]
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406A40+5D6↓j
.text:00406DE0                                         ; sub_406A40+69C↓j
.text:00406DE0                 mov     [esp+22Ch+Block], 0
.text:00406DE8                 mov     ecx, [esp+22Ch+arg_C]
.text:00406DEF                 lea     edx, [esp+22Ch+var_16C]
.text:00406DF6                 mov     [esp+22Ch+Size], edx
.text:00406DFA                 mov     ebx, [esp+22Ch+arg_0]
.text:00406E01                 lea     edi, [esp+22Ch+Block]
.text:00406E05                 mov     [esp+22Ch+Value], edi
.text:00406E09                 mov     dword ptr [esp+22Ch+var_220], ecx
.text:00406E0D                 mov     [esp+22Ch+Buf], ebx
.text:00406E10                 call    sub_4080E0
.text:00406E15                 cmp     eax, 2
.text:00406E18                 mov     esi, eax
.text:00406E1A                 jz      loc_406EF3
.text:00406E20                 cmp     eax, 4
.text:00406E23                 jz      loc_4072B0
.text:00406E29                 cmp     eax, 3
.text:00406E2C                 jz      loc_4072A0
.text:00406E32
.text:00406E32 loc_406E32:                             ; CODE XREF: sub_406A40+865↓j
.text:00406E32                                         ; sub_406A40+874↓j
.text:00406E32                 mov     edx, [esp+22Ch+arg_0]
.text:00406E39                 mov     ecx, [edx+34h]
.text:00406E3C                 mov     eax, [edx+38h]
.text:00406E3F                 mov     edi, [edx+34h]
.text:00406E42                 mov     ebp, [edx+64h]
.text:00406E45                 sub     eax, ecx
.text:00406E47                 shr     eax, 2
.text:00406E4A                 mov     ebx, [edi+eax*4-4]
.text:00406E4E                 mov     edi, [edx+0Ch]
.text:00406E51                 mov     [esp+22Ch+Buf], ebx ; size_t
.text:00406E54                 sub     edi, ebx
.text:00406E56                 mov     [esp+22Ch+Src], edi
.text:00406E5A                 call    sub_40B090
.text:00406E5F                 mov     [esp+22Ch+Buf], eax ; void *
.text:00406E62                 mov     ecx, [esp+22Ch+Src]
.text:00406E66                 mov     edi, eax
.text:00406E68                 lea     edx, [ebx-1]
.text:00406E6B                 mov     [esp+22Ch+Size], edx ; Size
.text:00406E6F                 mov     [esp+22Ch+Value], ecx ; Src
.text:00406E73                 call    memcpy
.text:00406E78                 mov     byte ptr [ebx+edi-1], 0
.text:00406E7D                 mov     ebx, [esp+22Ch+var_1F4]
.text:00406E81                 mov     eax, [ebx+8]
.text:00406E84                 mov     edx, [ebx+0Ch]
.text:00406E87                 sub     edx, eax
.text:00406E89                 mov     eax, 0AAAAAAABh
.text:00406E8E                 mul     edx
.text:00406E90                 shr     edx, 4
.text:00406E93                 cmp     edx, 1
.text:00406E96                 jbe     loc_407280
.text:00406E9C                 mov     ecx, [ebp-30h]
.text:00406E9F                 lea     ebx, [ebp-30h]
.text:00406EA2                 test    ecx, ecx
.text:00406EA4                 jnz     short loc_406EDD
.text:00406EA6                 mov     [esp+22Ch+var_21C], offset j_free
.text:00406EAE                 mov     dword ptr [esp+22Ch+var_220], offset sub_4075C0
.text:00406EB6                 mov     [esp+22Ch+Size], offset sub_40CF80
.text:00406EBE                 mov     [esp+22Ch+Value], 0
.text:00406EC6                 mov     [esp+22Ch+Buf], 0Dh
.text:00406ECD                 call    sub_40C0D0
.text:00406ED2                 mov     [ebp-30h], eax
.text:00406ED5                 test    eax, eax
.text:00406ED7                 jz      loc_4075A5
.text:00406EDD
.text:00406EDD loc_406EDD:                             ; CODE XREF: sub_406A40+464↑j
.text:00406EDD                 mov     [esp+22Ch+Value], edi
.text:00406EE1                 mov     ebp, [ebx]
.text:00406EE3                 mov     [esp+22Ch+Buf], ebp
.text:00406EE6                 call    sub_40C620
.text:00406EEB                 test    eax, eax
.text:00406EED                 jz      loc_4075A5
.text:00406EF3
.text:00406EF3 loc_406EF3:                             ; CODE XREF: sub_406A40+3DA↑j
.text:00406EF3                 mov     eax, [esp+22Ch+Block]
.text:00406EF7                 test    eax, eax
.text:00406EF9                 jz      loc_407090
.text:00406EFF                 mov     [esp+22Ch+Value], eax ; char *
.text:00406F03                 mov     esi, [esp+22Ch+arg_0]
.text:00406F0A                 lea     edi, [esp+22Ch+var_1DC]
.text:00406F0E                 mov     [esp+22Ch+Buf], esi ; int
.text:00406F11                 call    sub_4075F0
.text:00406F16                 mov     [esp+22Ch+Value], edi
.text:00406F1A                 mov     [esp+22Ch+Buf], offset byte_4068F7
.text:00406F21                 call    sub_409320
.text:00406F26                 test    eax, eax
.text:00406F28                 jnz     loc_407040
.text:00406F2E
.text:00406F2E loc_406F2E:                             ; CODE XREF: sub_406A40+648↓j
.text:00406F2E                 mov     edx, [esp+22Ch+var_1D0]
.text:00406F32                 mov     eax, [esp+22Ch+var_1D4]
.text:00406F36                 mov     esi, [esp+22Ch+var_164]
.text:00406F3D                 mov     ecx, [esp+22Ch+var_160]
.text:00406F44                 mov     edi, edx
.text:00406F46                 xor     esi, eax
.text:00406F48                 xor     edi, ecx
.text:00406F4A                 or      esi, edi
.text:00406F4C                 jnz     short loc_406F6E
.text:00406F4E                 mov     ecx, [esp+22Ch+var_1C8]
.text:00406F52                 mov     esi, [esp+22Ch+var_1CC]
.text:00406F56                 mov     edi, [esp+22Ch+var_15C]
.text:00406F5D                 mov     eax, [esp+22Ch+var_158]
.text:00406F64                 mov     ebp, ecx
.text:00406F66                 xor     edi, esi
.text:00406F68                 xor     ebp, eax
.text:00406F6A                 or      edi, ebp
.text:00406F6C                 jz      short loc_406FB8
.text:00406F6E
.text:00406F6E loc_406F6E:                             ; CODE XREF: sub_406A40+50C↑j
.text:00406F6E                 mov     [esp+22Ch+Value], offset byte_4068F7 ; char *
.text:00406F76                 mov     ebx, [esp+22Ch+arg_0]
.text:00406F7D                 mov     [esp+22Ch+Buf], ebx ; int
.text:00406F80                 call    sub_4076F0
.text:00406F85                 mov     [esp+22Ch+Buf], eax ; char *
.text:00406F88                 call    sub_40BBD0
.text:00406F8D                 mov     [esp+22Ch+Buf], offset aSChangedDevIno ; "%s changed dev/ino"
.text:00406F94                 mov     ebp, eax
.text:00406F96                 call    ds:libintl_gettext
.text:00406F9C                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:00406FA0                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00406FA8                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00406FAF                 mov     [esp+22Ch+Size], eax ; char *
.text:00406FB3                 call    sub_415D50
.text:00406FB8
.text:00406FB8 loc_406FB8:                             ; CODE XREF: sub_406A40+52C↑j
.text:00406FB8                 mov     esi, [esp+22Ch+var_1F4]
.text:00406FBC                 mov     edi, [esi+10h]
.text:00406FBF                 mov     edx, [esi+0Ch]
.text:00406FC2                 sub     edi, edx
.text:00406FC4                 cmp     edi, 18h
.text:00406FC7                 jl      short loc_407020
.text:00406FC9
.text:00406FC9 loc_406FC9:                             ; CODE XREF: sub_406A40+5F7↓j
.text:00406FC9                 mov     ebp, [esp+22Ch+var_1F4]
.text:00406FCD                 lea     edi, [edx+18h]
.text:00406FD0                 mov     eax, [esp+22Ch+arg_0]
.text:00406FD7                 mov     edx, [esp+22Ch+var_1CC]
.text:00406FDB                 mov     esi, [esp+22Ch+var_1C8]
.text:00406FDF                 mov     [ebp+0Ch], edi
.text:00406FE2                 mov     edi, [eax+64h]
.text:00406FE5                 lea     ebp, [edi-18h]
.text:00406FE8                 mov     [ebp+10h], edx
.text:00406FEB                 mov     edx, [esp+22Ch+Block]
.text:00406FEF                 mov     [ebp+14h], esi
.text:00406FF2                 mov     ebx, [esp+22Ch+var_1D4]
.text:00406FF6                 mov     dword ptr [edi-18h], 0
.text:00406FFD                 mov     ecx, [esp+22Ch+var_1D0]
.text:00407001                 mov     dword ptr [ebp+4], 2
.text:00407008                 mov     [ebp+8], ebx
.text:0040700B                 mov     [ebp+0Ch], ecx
.text:0040700E                 mov     [esp+22Ch+Buf], edx ; Block
.text:00407011                 call    free
.text:00407016                 jmp     loc_406DE0
.text:00407016 ; ---------------------------------------------------------------------------
.text:0040701B                 align 10h
.text:00407020
.text:00407020 loc_407020:                             ; CODE XREF: sub_406A40+587↑j
.text:00407020                 mov     [esp+22Ch+Value], 18h
.text:00407028                 mov     [esp+22Ch+Buf], esi
.text:0040702B                 call    sub_41DC90
.text:00407030                 mov     eax, [esp+22Ch+var_1F4]
.text:00407034                 mov     edx, [eax+0Ch]
.text:00407037                 jmp     short loc_406FC9
.text:00407037 ; ---------------------------------------------------------------------------
.text:00407039                 align 10h
.text:00407040
.text:00407040 loc_407040:                             ; CODE XREF: sub_406A40+4E8↑j
.text:00407040                 mov     [esp+22Ch+Buf], esi ; int
.text:00407043                 mov     [esp+22Ch+Value], offset byte_4068F7 ; char *
.text:0040704B                 call    sub_4076F0
.text:00407050                 mov     [esp+22Ch+Buf], eax ; char *
.text:00407053                 call    sub_40BBD0
.text:00407058                 mov     [esp+22Ch+Buf], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:0040705F                 mov     ebx, eax
.text:00407061                 call    ds:libintl_gettext
.text:00407067                 mov     ebp, eax
.text:00407069                 call    _errno
.text:0040706E                 mov     dword ptr [esp+22Ch+var_220], ebx ; char
.text:00407072                 mov     [esp+22Ch+Size], ebp ; char *
.text:00407076                 mov     esi, [eax]
.text:00407078                 mov     [esp+22Ch+Buf], 1 ; Code
.text:0040707F                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00407083                 call    sub_415D50
.text:00407088                 jmp     loc_406F2E
.text:00407088 ; ---------------------------------------------------------------------------
.text:0040708D                 align 10h
.text:00407090
.text:00407090 loc_407090:                             ; CODE XREF: sub_406A40+4B9↑j
.text:00407090                 mov     eax, [esp+22Ch+arg_8]
.text:00407097                 lea     ecx, [esp+22Ch+var_1E4]
.text:0040709B                 mov     ebx, [esp+22Ch+arg_0]
.text:004070A2                 mov     ebp, [eax]
.text:004070A4                 mov     [esp+22Ch+Value], ecx
.text:004070A8                 mov     [esp+22Ch+Buf], ebx
.text:004070AB                 mov     [esp+22Ch+Size], ebp
.text:004070AF                 call    sub_4078E0
.text:004070B4                 cmp     esi, 2
.text:004070B7                 jz      short loc_4070F0
.text:004070B9
.text:004070B9 loc_4070B9:                             ; CODE XREF: sub_406A40+709↓j
.text:004070B9                                         ; sub_406A40+749↓j ...
.text:004070B9                 mov     edx, [esp+22Ch+var_1E4]
.text:004070BD                 mov     [esp+22Ch+Buf], edx ; Block
.text:004070C0                 call    free
.text:004070C5                 mov     eax, [esp+22Ch+var_1F4]
.text:004070C9                 mov     ebp, [eax+0Ch]
.text:004070CC                 mov     esi, [eax+8]
.text:004070CF                 mov     eax, 0AAAAAAABh
.text:004070D4                 sub     ebp, esi
.text:004070D6                 mul     ebp
.text:004070D8                 shr     edx, 4
.text:004070DB                 dec     edx
.text:004070DC                 jnz     loc_406DE0
.text:004070E2                 mov     eax, [esp+22Ch+var_1F0]
.text:004070E6                 jmp     loc_406BF3
.text:004070E6 ; ---------------------------------------------------------------------------
.text:004070EB                 align 10h
.text:004070F0
.text:004070F0 loc_4070F0:                             ; CODE XREF: sub_406A40+677↑j
.text:004070F0                 mov     dword ptr [esp+22Ch+var_220], 3 ; int
.text:004070F8                 lea     esi, [esp+22Ch+var_1EC]
.text:004070FC                 mov     edi, [esp+22Ch+var_1E4]
.text:00407100                 mov     [esp+22Ch+var_21C], esi ; int
.text:00407104                 mov     edx, [esp+22Ch+arg_0]
.text:0040710B                 lea     ebx, [esp+22Ch+var_1E8]
.text:0040710F                 mov     [esp+22Ch+var_218], ebx ; int
.text:00407113                 mov     esi, [esp+22Ch+arg_C]
.text:0040711A                 mov     [esp+22Ch+Value], edi ; LPCSTR
.text:0040711E                 mov     [esp+22Ch+Buf], edx ; int
.text:00407121                 mov     [esp+22Ch+Size], esi ; int
.text:00407125                 call    sub_407C60
.text:0040712A                 cmp     eax, 2
.text:0040712D                 mov     ebx, eax
.text:0040712F                 jnz     loc_40726D
.text:00407135                 mov     ecx, [esp+22Ch+var_1E4]
.text:00407139                 mov     [esp+22Ch+Buf], ecx ; LPCSTR
.text:0040713C                 call    sub_41A4D0
.text:00407141                 test    eax, eax
.text:00407143                 jnz     short loc_40718E
.text:00407145                 cmp     byte ptr [esi+0Ah], 0
.text:00407149                 jz      loc_4070B9
.text:0040714F                 mov     edx, [esp+22Ch+var_1E4]
.text:00407153                 mov     eax, [esp+22Ch+arg_0]
.text:0040715A                 mov     [esp+22Ch+Value], edx ; char *
.text:0040715E                 mov     [esp+22Ch+Buf], eax ; int
.text:00407161                 call    sub_4076F0
.text:00407166                 mov     [esp+22Ch+Buf], eax ; char *
.text:00407169                 call    sub_40BBD0
.text:0040716E                 mov     [esp+22Ch+Buf], offset aRemovedDirecto ; "removed directory: %s\n"
.text:00407175                 mov     ebp, eax
.text:00407177                 call    ds:libintl_gettext
.text:0040717D                 mov     [esp+22Ch+Value], ebp
.text:00407181                 mov     [esp+22Ch+Buf], eax ; Format
.text:00407184                 call    printf
.text:00407189                 jmp     loc_4070B9
.text:0040718E ; ---------------------------------------------------------------------------
.text:0040718E
.text:0040718E loc_40718E:                             ; CODE XREF: sub_406A40+703↑j
.text:0040718E                 mov     edx, [esp+22Ch+var_1E4]
.text:00407192                 mov     eax, [esp+22Ch+arg_0]
.text:00407199                 mov     [esp+22Ch+Value], edx ; char *
.text:0040719D                 mov     [esp+22Ch+Buf], eax ; int
.text:004071A0                 call    sub_4076F0
.text:004071A5                 mov     [esp+22Ch+Buf], eax ; char *
.text:004071A8                 call    sub_40BBD0
.text:004071AD                 mov     [esp+22Ch+Buf], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:004071B4                 mov     esi, eax
.text:004071B6                 call    ds:libintl_gettext
.text:004071BC                 mov     ebp, eax
.text:004071BE                 call    _errno
.text:004071C3                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:004071C7                 mov     [esp+22Ch+Size], ebp ; char *
.text:004071CB                 mov     ebx, [eax]
.text:004071CD                 mov     [esp+22Ch+Buf], 0 ; Code
.text:004071D4                 mov     [esp+22Ch+Value], ebx ; ErrorMessage
.text:004071D8                 call    sub_415D50
.text:004071DD                 mov     edi, [esp+22Ch+arg_0]
.text:004071E4                 mov     esi, [esp+22Ch+var_1E4]
.text:004071E8                 mov     ebx, [edi+64h]
.text:004071EB                 mov     [esp+22Ch+Buf], esi ; char *
.text:004071EE                 call    sub_40B250
.text:004071F3                 mov     ecx, [ebx-18h]
.text:004071F6                 lea     edi, [ebx-18h]
.text:004071F9                 mov     esi, eax
.text:004071FB                 test    ecx, ecx
.text:004071FD                 jnz     short loc_407236
.text:004071FF                 mov     [esp+22Ch+var_21C], offset j_free
.text:00407207                 mov     dword ptr [esp+22Ch+var_220], offset sub_4075C0
.text:0040720F                 mov     [esp+22Ch+Size], offset sub_40CF80
.text:00407217                 mov     [esp+22Ch+Value], 0
.text:0040721F                 mov     [esp+22Ch+Buf], 0Dh
.text:00407226                 call    sub_40C0D0
.text:0040722B                 mov     [ebx-18h], eax
.text:0040722E                 test    eax, eax
.text:00407230                 jz      loc_4075A5
.text:00407236
.text:00407236 loc_407236:                             ; CODE XREF: sub_406A40+7BD↑j
.text:00407236                 mov     [esp+22Ch+Value], esi
.text:0040723A                 mov     ecx, [edi]
.text:0040723C                 mov     [esp+22Ch+Buf], ecx
.text:0040723F                 call    sub_40C620
.text:00407244                 test    eax, eax
.text:00407246                 jz      loc_4075A5
.text:0040724C                 mov     [esp+22Ch+var_1F0], 4
.text:00407254                 mov     ebx, [esp+22Ch+arg_0]
.text:0040725B                 mov     edi, [ebx+64h]
.text:0040725E                 sub     edi, 18h
.text:00407261                 mov     dword ptr [edi+4], 4
.text:00407268                 jmp     loc_4070B9
.text:0040726D ; ---------------------------------------------------------------------------
.text:0040726D
.text:0040726D loc_40726D:                             ; CODE XREF: sub_406A40+6EF↑j
.text:0040726D                 mov     edi, [esp+22Ch+var_1E4]
.text:00407271                 mov     [esp+22Ch+Buf], edi ; Block
.text:00407274                 call    free
.text:00407279                 mov     eax, ebx
.text:0040727B                 jmp     loc_406BF3
.text:00407280 ; ---------------------------------------------------------------------------
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: sub_406A40+456↑j
.text:00407280                 mov     [esp+22Ch+Size], 1CFh
.text:00407288                 mov     [esp+22Ch+Value], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00407290                 mov     [esp+22Ch+Buf], offset a1AdStackHeight ; "1 < AD_stack_height (ds)"
.text:00407297
.text:00407297 loc_407297:                             ; CODE XREF: sub_406A40+B60↓j
.text:00407297                 call    _assert
.text:00407297 ; ---------------------------------------------------------------------------
.text:0040729C                 align 10h
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: sub_406A40+3EC↑j
.text:004072A0                 cmp     [esp+22Ch+var_1F0], 2
.text:004072A5                 jnz     loc_406E32
.text:004072AB                 nop
.text:004072AC                 lea     esi, [esi+0]
.text:004072B0
.text:004072B0 loc_4072B0:                             ; CODE XREF: sub_406A40+3E3↑j
.text:004072B0                 mov     [esp+22Ch+var_1F0], esi
.text:004072B4                 jmp     loc_406E32
.text:004072B9 ; ---------------------------------------------------------------------------
.text:004072B9
.text:004072B9 loc_4072B9:                             ; CODE XREF: sub_406A40+33E↑j
.text:004072B9                 mov     [esp+22Ch+Value], 18h
.text:004072C1                 mov     [esp+22Ch+Buf], ecx
.text:004072C4                 call    sub_41DC90
.text:004072C9                 mov     eax, [esp+22Ch+var_1F4]
.text:004072CD                 mov     edx, [eax+0Ch]
.text:004072D0                 jmp     loc_406D84
.text:004072D5 ; ---------------------------------------------------------------------------
.text:004072D5
.text:004072D5 loc_4072D5:                             ; CODE XREF: sub_406A40+289↑j
.text:004072D5                 mov     [esp+22Ch+Value], offset byte_4068F7 ; char *
.text:004072DD                 mov     edx, [esp+22Ch+arg_0]
.text:004072E4                 mov     [esp+22Ch+Buf], edx ; int
.text:004072E7                 call    sub_4076F0
.text:004072EC                 mov     [esp+22Ch+Buf], eax ; char *
.text:004072EF                 call    sub_40BBD0
.text:004072F4                 mov     [esp+22Ch+Buf], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:004072FB                 mov     esi, eax
.text:004072FD                 call    ds:libintl_gettext
.text:00407303                 mov     ebp, eax
.text:00407305                 call    _errno
.text:0040730A                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:0040730E                 mov     [esp+22Ch+Size], ebp ; char *
.text:00407312                 mov     ebx, [eax]
.text:00407314                 mov     [esp+22Ch+Buf], 1 ; Code
.text:0040731B                 mov     [esp+22Ch+Value], ebx ; ErrorMessage
.text:0040731F                 call    sub_415D50
.text:00407324                 jmp     loc_406CCF
.text:00407329 ; ---------------------------------------------------------------------------
.text:00407329
.text:00407329 loc_407329:                             ; CODE XREF: sub_406A40+250↑j
.text:00407329                 mov     edi, [esp+22Ch+arg_4]
.text:00407330                 mov     ebx, [esp+22Ch+arg_0]
.text:00407337                 mov     [esp+22Ch+Value], edi ; char *
.text:0040733B                 mov     edi, offset asc_406957 ; "/"
.text:00407340                 mov     [esp+22Ch+Buf], ebx ; int
.text:00407343                 call    sub_4076F0
.text:00407348                 cld
.text:00407349                 mov     esi, eax
.text:0040734B                 mov     ecx, 2
.text:00407350                 repe cmpsb
.text:00407352                 jnz     short loc_4073D0
.text:00407354                 mov     ebp, [esp+22Ch+arg_4]
.text:0040735B                 mov     eax, [esp+22Ch+arg_0]
.text:00407362                 mov     [esp+22Ch+Value], ebp ; char *
.text:00407366                 mov     [esp+22Ch+Buf], eax ; int
.text:00407369                 call    sub_4076F0
.text:0040736E                 mov     [esp+22Ch+Buf], eax ; char *
.text:00407371                 call    sub_40BBD0
.text:00407376                 mov     [esp+22Ch+Buf], offset aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0040737D                 mov     esi, eax
.text:0040737F                 call    ds:libintl_gettext
.text:00407385                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00407389                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00407391                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00407398                 mov     [esp+22Ch+Size], eax ; char *
.text:0040739C                 call    sub_415D50
.text:004073A1
.text:004073A1 loc_4073A1:                             ; CODE XREF: sub_406A40+9FF↓j
.text:004073A1                 mov     [esp+22Ch+Buf], offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:004073A8                 call    ds:libintl_gettext
.text:004073AE                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:004073B6                 mov     [esp+22Ch+Buf], 0 ; Code
.text:004073BD                 mov     [esp+22Ch+Size], eax ; char *
.text:004073C1                 call    sub_415D50
.text:004073C6                 mov     eax, 1
.text:004073CB                 jmp     loc_406BF3
.text:004073D0 ; ---------------------------------------------------------------------------
.text:004073D0
.text:004073D0 loc_4073D0:                             ; CODE XREF: sub_406A40+912↑j
.text:004073D0                 mov     [esp+22Ch+Value], offset asc_406957 ; "/"
.text:004073D8                 mov     [esp+22Ch+Buf], 1 ; int
.text:004073DF                 call    sub_40BBA0
.text:004073E4                 mov     edx, [esp+22Ch+arg_4]
.text:004073EB                 mov     ebx, eax
.text:004073ED                 mov     ecx, [esp+22Ch+arg_0]
.text:004073F4                 mov     [esp+22Ch+Value], edx ; char *
.text:004073F8                 mov     [esp+22Ch+Buf], ecx ; int
.text:004073FB                 call    sub_4076F0
.text:00407400                 mov     [esp+22Ch+Value], eax ; char *
.text:00407404                 mov     [esp+22Ch+Buf], 0 ; int
.text:0040740B                 call    sub_40BBA0
.text:00407410                 mov     [esp+22Ch+Buf], offset aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00407417                 mov     esi, eax
.text:00407419                 call    ds:libintl_gettext
.text:0040741F                 mov     [esp+22Ch+var_21C], ebx
.text:00407423                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00407427                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:0040742F                 mov     [esp+22Ch+Size], eax ; char *
.text:00407433                 mov     [esp+22Ch+Buf], 0 ; Code
.text:0040743A                 call    sub_415D50
.text:0040743F                 jmp     loc_4073A1
.text:00407444 ; ---------------------------------------------------------------------------
.text:00407444
.text:00407444 loc_407444:                             ; CODE XREF: sub_406A40+EF↑j
.text:00407444                 mov     edx, [esp+22Ch+arg_0]
.text:0040744B                 mov     eax, [esp+22Ch+arg_4]
.text:00407452                 mov     [esp+22Ch+Buf], edx ; int
.text:00407455                 mov     [esp+22Ch+Value], eax ; char *
.text:00407459                 call    sub_4076F0
.text:0040745E                 mov     [esp+22Ch+Buf], eax ; char *
.text:00407461                 call    sub_40BBD0
.text:00407466                 mov     [esp+22Ch+Buf], offset aCannotLstatS ; "cannot lstat %s"
.text:0040746D                 mov     ebx, eax
.text:0040746F                 call    ds:libintl_gettext
.text:00407475                 mov     ebp, eax
.text:00407477                 call    _errno
.text:0040747C                 mov     dword ptr [esp+22Ch+var_220], ebx
.text:00407480                 mov     [esp+22Ch+Size], ebp
.text:00407484                 mov     esi, [eax]
.text:00407486                 mov     [esp+22Ch+Value], esi
.text:0040748A                 jmp     loc_406C3B
.text:0040748F ; ---------------------------------------------------------------------------
.text:0040748F
.text:0040748F loc_40748F:                             ; CODE XREF: sub_406A40+5C↑j
.text:0040748F                 add     edx, 2
.text:00407492                 jmp     loc_406AA2
.text:00407497 ; ---------------------------------------------------------------------------
.text:00407497
.text:00407497 loc_407497:                             ; CODE XREF: sub_406A40+3E↑j
.text:00407497                 add     edx, 2
.text:0040749A                 jmp     loc_406A84
.text:0040749F ; ---------------------------------------------------------------------------
.text:0040749F
.text:0040749F loc_40749F:                             ; CODE XREF: sub_406A40+1C↑j
.text:0040749F                 mov     [esp+22Ch+Buf], 0Ch ; size_t
.text:004074A6                 call    sub_40B090
.text:004074AB                 mov     edx, [esp+22Ch+arg_8]
.text:004074B2                 mov     [edx], eax
.text:004074B4                 add     eax, 4
.text:004074B7                 mov     [esp+22Ch+Buf], eax
.text:004074BA                 call    sub_40D170
.text:004074BF                 test    eax, eax
.text:004074C1                 jnz     loc_40754E
.text:004074C7                 mov     ebx, [esp+22Ch+arg_8]
.text:004074CE                 mov     edx, [ebx]
.text:004074D0                 mov     dword ptr [edx], 0
.text:004074D6
.text:004074D6 loc_4074D6:                             ; CODE XREF: sub_406A40+B44↓j
.text:004074D6                 mov     ebx, [esp+22Ch+arg_0]
.text:004074DD                 add     ebx, 58h ; 'X'
.text:004074E0                 mov     ecx, [ebx+10h]
.text:004074E3                 mov     edx, [ebx+0Ch]
.text:004074E6                 sub     ecx, edx
.text:004074E8                 cmp     ecx, 18h
.text:004074EB                 jl      short loc_407539
.text:004074ED
.text:004074ED loc_4074ED:                             ; CODE XREF: sub_406A40+B0C↓j
.text:004074ED                 lea     ecx, [edx+18h]
.text:004074F0                 mov     ebp, [esp+22Ch+arg_8]
.text:004074F7                 mov     edx, [esp+22Ch+arg_0]
.text:004074FE                 mov     [ebx+0Ch], ecx
.text:00407501                 mov     eax, [ebp+0]
.text:00407504                 mov     ebx, [edx+64h]
.text:00407507                 mov     dword ptr [ebx-18h], 0
.text:0040750E                 lea     edi, [ebx-18h]
.text:00407511                 mov     dword ptr [edi+10h], 0FFFFFFFFh
.text:00407518                 mov     dword ptr [edi+14h], 0FFFFFFFFh
.text:0040751F                 mov     dword ptr [edi+8], 0FFFFFFFFh
.text:00407526                 mov     dword ptr [edi+0Ch], 0FFFFFFFFh
.text:0040752D                 mov     dword ptr [edi+4], 2
.text:00407534                 jmp     loc_406A62
.text:00407539 ; ---------------------------------------------------------------------------
.text:00407539
.text:00407539 loc_407539:                             ; CODE XREF: sub_406A40+AAB↑j
.text:00407539                 mov     [esp+22Ch+Value], 18h
.text:00407541                 mov     [esp+22Ch+Buf], ebx
.text:00407544                 call    sub_41DC90
.text:00407549                 mov     edx, [ebx+0Ch]
.text:0040754C                 jmp     short loc_4074ED
.text:0040754E ; ---------------------------------------------------------------------------
.text:0040754E
.text:0040754E loc_40754E:                             ; CODE XREF: sub_406A40+A81↑j
.text:0040754E                 mov     ebp, [esp+22Ch+arg_8]
.text:00407555                 mov     edi, [ebp+0]
.text:00407558                 call    _errno
.text:0040755D                 mov     ebx, [eax]
.text:0040755F                 mov     [edi], ebx
.text:00407561                 call    _errno
.text:00407566                 mov     ecx, [eax]
.text:00407568                 test    ecx, ecx
.text:0040756A                 jz      short loc_407589
.text:0040756C                 mov     eax, [esp+22Ch+arg_8]
.text:00407573                 mov     edi, [eax]
.text:00407575                 mov     [esp+22Ch+Buf], offset asc_406957 ; "/"
.text:0040757C                 call    sub_40B250
.text:00407581                 mov     [edi+8], eax
.text:00407584                 jmp     loc_4074D6
.text:00407589 ; ---------------------------------------------------------------------------
.text:00407589
.text:00407589 loc_407589:                             ; CODE XREF: sub_406A40+B2A↑j
.text:00407589                 mov     [esp+22Ch+Size], 3F9h
.text:00407591                 mov     [esp+22Ch+Value], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00407599                 mov     [esp+22Ch+Buf], offset aErrno0 ; "errno != 0"
.text:004075A0                 jmp     loc_407297
.text:004075A5 ; ---------------------------------------------------------------------------
.text:004075A5
.text:004075A5 loc_4075A5:                             ; CODE XREF: sub_406A40+497↑j
.text:004075A5                                         ; sub_406A40+4AD↑j ...
.text:004075A5                 call    sub_40C060
.text:004075A5 sub_406A40      endp
.text:004075A5
.text:004075A5 ; ---------------------------------------------------------------------------
.text:004075AA                 align 10h
.text:004075B0
.text:004075B0 ; =============== S U B R O U T I N E =======================================
.text:004075B0
.text:004075B0 ; Attributes: thunk
.text:004075B0
.text:004075B0 ; void __cdecl j_free(void *Block)
.text:004075B0 j_free          proc near               ; DATA XREF: sub_406A40+466↑o
.text:004075B0                                         ; sub_406A40+7BF↑o ...
.text:004075B0
.text:004075B0 Block           = dword ptr  4
.text:004075B0
.text:004075B0                 jmp     free
.text:004075B0 j_free          endp
.text:004075B0
.text:004075B0 ; ---------------------------------------------------------------------------
.text:004075B5                 align 10h
.text:004075C0
.text:004075C0 ; =============== S U B R O U T I N E =======================================
.text:004075C0
.text:004075C0
.text:004075C0 ; int __cdecl sub_4075C0(char *, char *)
.text:004075C0 sub_4075C0      proc near               ; DATA XREF: sub_406A40+46E↑o
.text:004075C0                                         ; sub_406A40+7C7↑o ...
.text:004075C0
.text:004075C0 Str1            = dword ptr -0Ch
.text:004075C0 Str2            = dword ptr -8
.text:004075C0 arg_0           = dword ptr  4
.text:004075C0 arg_4           = dword ptr  8
.text:004075C0
.text:004075C0                 sub     esp, 0Ch
.text:004075C3                 mov     edx, [esp+0Ch+arg_0]
.text:004075C7                 mov     ecx, [esp+0Ch+arg_4]
.text:004075CB                 mov     [esp+0Ch+Str1], edx ; Str1
.text:004075CE                 mov     [esp+0Ch+Str2], ecx ; Str2
.text:004075D2                 call    strcmp
.text:004075D7                 test    eax, eax
.text:004075D9                 setz    dl
.text:004075DC                 add     esp, 0Ch
.text:004075DF                 movzx   eax, dl
.text:004075E2                 retn
.text:004075E2 sub_4075C0      endp
.text:004075E2
.text:004075E2 ; ---------------------------------------------------------------------------
.text:004075E3                 align 10h
.text:004075F0
.text:004075F0 ; =============== S U B R O U T I N E =======================================
.text:004075F0
.text:004075F0
.text:004075F0 ; int __cdecl sub_4075F0(int, char *)
.text:004075F0 sub_4075F0      proc near               ; CODE XREF: sub_406A40+272↑p
.text:004075F0                                         ; sub_406A40+4D1↑p
.text:004075F0
.text:004075F0 Str             = dword ptr -1Ch
.text:004075F0 Src             = dword ptr -18h
.text:004075F0 Size            = dword ptr -14h
.text:004075F0 var_10          = dword ptr -10h
.text:004075F0 arg_0           = dword ptr  4
.text:004075F0 arg_4           = dword ptr  8
.text:004075F0
.text:004075F0                 push    edi
.text:004075F1                 push    esi
.text:004075F2                 push    ebx
.text:004075F3                 sub     esp, 10h
.text:004075F6                 mov     esi, [esp+1Ch+arg_0]
.text:004075FA                 mov     edi, [esp+1Ch+arg_4]
.text:004075FE                 mov     [esp+1Ch+Str], edi ; Str
.text:00407601                 call    strlen
.text:00407606                 mov     [esp+1Ch+var_10], eax
.text:0040760A                 mov     edx, [esi+0Ch]
.text:0040760D                 mov     ebx, eax
.text:0040760F                 lea     eax, [eax+edx]
.text:00407612                 cmp     eax, [esi+10h]
.text:00407615                 ja      loc_4076A2
.text:0040761B
.text:0040761B loc_40761B:                             ; CODE XREF: sub_4075F0+C1↓j
.text:0040761B                 mov     [esp+1Ch+Str], edx ; void *
.text:0040761E                 mov     [esp+1Ch+Size], ebx ; Size
.text:00407622                 mov     [esp+1Ch+Src], edi ; Src
.text:00407626                 call    memcpy
.text:0040762B                 mov     edx, [esi+0Ch]
.text:0040762E                 add     edx, ebx
.text:00407630                 mov     [esi+0Ch], edx
.text:00407633                 inc     edx
.text:00407634                 cmp     edx, [esi+10h]
.text:00407637                 ja      short loc_407690
.text:00407639
.text:00407639 loc_407639:                             ; CODE XREF: sub_4075F0+B0↓j
.text:00407639                 mov     edx, [esi+0Ch]
.text:0040763C                 lea     ebx, [esi+2Ch]
.text:0040763F                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407642                 inc     dword ptr [esi+0Ch]
.text:00407645                 inc     [esp+1Ch+var_10]
.text:00407649                 mov     edx, [ebx+0Ch]
.text:0040764C                 lea     ecx, [edx+4]
.text:0040764F                 cmp     ecx, [ebx+10h]
.text:00407652                 ja      short loc_407677
.text:00407654
.text:00407654 loc_407654:                             ; CODE XREF: sub_4075F0+9A↓j
.text:00407654                 mov     [esp+1Ch+Size], 4 ; Size
.text:0040765C                 lea     esi, [esp+1Ch+var_10]
.text:00407660                 mov     [esp+1Ch+Src], esi ; Src
.text:00407664                 mov     [esp+1Ch+Str], edx ; void *
.text:00407667                 call    memcpy
.text:0040766C                 add     dword ptr [ebx+0Ch], 4
.text:00407670                 add     esp, 10h
.text:00407673                 pop     ebx
.text:00407674                 pop     esi
.text:00407675                 pop     edi
.text:00407676                 retn
.text:00407677 ; ---------------------------------------------------------------------------
.text:00407677
.text:00407677 loc_407677:                             ; CODE XREF: sub_4075F0+62↑j
.text:00407677                 mov     [esp+1Ch+Src], 4
.text:0040767F                 mov     [esp+1Ch+Str], ebx
.text:00407682                 call    sub_41DC90
.text:00407687                 mov     edx, [ebx+0Ch]
.text:0040768A                 jmp     short loc_407654
.text:0040768A ; ---------------------------------------------------------------------------
.text:0040768C                 align 10h
.text:00407690
.text:00407690 loc_407690:                             ; CODE XREF: sub_4075F0+47↑j
.text:00407690                 mov     [esp+1Ch+Src], 1
.text:00407698                 mov     [esp+1Ch+Str], esi
.text:0040769B                 call    sub_41DC90
.text:004076A0                 jmp     short loc_407639
.text:004076A2 ; ---------------------------------------------------------------------------
.text:004076A2
.text:004076A2 loc_4076A2:                             ; CODE XREF: sub_4075F0+25↑j
.text:004076A2                 mov     [esp+1Ch+Src], ebx
.text:004076A6                 mov     [esp+1Ch+Str], esi
.text:004076A9                 call    sub_41DC90
.text:004076AE                 mov     edx, [esi+0Ch]
.text:004076B1                 jmp     loc_40761B
.text:004076B1 sub_4075F0      endp
.text:004076B1
.text:004076B1 ; ---------------------------------------------------------------------------
.text:004076B6                 align 10h
.text:004076C0 aStrlenBuf1NByt db 'strlen (buf) + 1 == n_bytes_needed',0
.text:004076C0                                         ; DATA XREF: sub_4076F0+1A8↓o
.text:004076E3                 align 10h
.text:004076F0
.text:004076F0 ; =============== S U B R O U T I N E =======================================
.text:004076F0
.text:004076F0
.text:004076F0 ; int __cdecl sub_4076F0(int, char *)
.text:004076F0 sub_4076F0      proc near               ; CODE XREF: sub_4066D0+E6↑p
.text:004076F0                                         ; sub_4066D0+15A↑p ...
.text:004076F0
.text:004076F0 Str             = dword ptr -2Ch
.text:004076F0 Src             = dword ptr -28h
.text:004076F0 Size            = dword ptr -24h
.text:004076F0 var_15          = byte ptr -15h
.text:004076F0 var_14          = dword ptr -14h
.text:004076F0 arg_0           = dword ptr  4
.text:004076F0 arg_4           = dword ptr  8
.text:004076F0
.text:004076F0                 push    ebp
.text:004076F1                 push    edi
.text:004076F2                 push    esi
.text:004076F3                 push    ebx
.text:004076F4                 sub     esp, 1Ch
.text:004076F7                 mov     edx, [esp+2Ch+arg_0]
.text:004076FB                 mov     esi, [edx+0Ch]
.text:004076FE                 mov     ebp, [edx+8]
.text:00407701                 mov     edx, [esp+2Ch+arg_4]
.text:00407705                 sub     esi, ebp
.text:00407707                 mov     [esp+2Ch+Str], edx ; Str
.text:0040770A                 call    strlen
.text:0040770F                 lea     edi, [eax+esi+1]
.text:00407713                 mov     ebx, eax
.text:00407715                 cmp     ds:dword_422050, edi
.text:0040771B                 jb      loc_4077A2
.text:00407721
.text:00407721 loc_407721:                             ; CODE XREF: sub_4076F0+D3↓j
.text:00407721                 cmp     ebx, 1
.text:00407724                 jz      short loc_407777
.text:00407726
.text:00407726 loc_407726:                             ; CODE XREF: sub_4076F0+8E↓j
.text:00407726                                         ; sub_4076F0+92↓j
.text:00407726                 mov     [esp+2Ch+Size], esi
.text:0040772A                 mov     edx, ds:Block
.text:00407730                 lea     esi, [ebx+1]
.text:00407733                 mov     [esp+2Ch+Src], ebp
.text:00407737                 mov     [esp+2Ch+Str], edx
.text:0040773A                 call    sub_41A740
.text:0040773F                 mov     [esp+2Ch+Str], eax ; void *
.text:00407742                 mov     ecx, [esp+2Ch+arg_4]
.text:00407746                 mov     [esp+2Ch+Size], esi ; Size
.text:0040774A                 mov     [esp+2Ch+Src], ecx ; Src
.text:0040774E                 call    memcpy
.text:00407753                 mov     ebp, ds:Block
.text:00407759                 mov     [esp+2Ch+Str], ebp ; Str
.text:0040775C                 call    strlen
.text:00407761                 inc     eax
.text:00407762                 cmp     eax, edi
.text:00407764                 jnz     loc_407888
.text:0040776A
.text:0040776A loc_40776A:                             ; CODE XREF: sub_4076F0+B0↓j
.text:0040776A                 mov     eax, ds:Block
.text:0040776F
.text:0040776F loc_40776F:                             ; CODE XREF: sub_4076F0+166↓j
.text:0040776F                 add     esp, 1Ch
.text:00407772                 pop     ebx
.text:00407773                 pop     esi
.text:00407774                 pop     edi
.text:00407775                 pop     ebp
.text:00407776                 retn
.text:00407777 ; ---------------------------------------------------------------------------
.text:00407777
.text:00407777 loc_407777:                             ; CODE XREF: sub_4076F0+34↑j
.text:00407777                 mov     eax, [esp+2Ch+arg_4]
.text:0040777B                 cmp     byte ptr [eax], 2Eh ; '.'
.text:0040777E                 jnz     short loc_407726
.text:00407780                 test    esi, esi
.text:00407782                 jz      short loc_407726
.text:00407784                 mov     [esp+2Ch+Src], ebp
.text:00407788                 lea     edx, [esi-1]
.text:0040778B                 mov     esi, ds:Block
.text:00407791                 mov     [esp+2Ch+Size], edx
.text:00407795                 mov     [esp+2Ch+Str], esi
.text:00407798                 call    sub_41A740
.text:0040779D                 mov     byte ptr [eax], 0
.text:004077A0                 jmp     short loc_40776A
.text:004077A2 ; ---------------------------------------------------------------------------
.text:004077A2
.text:004077A2 loc_4077A2:                             ; CODE XREF: sub_4076F0+2B↑j
.text:004077A2                 mov     [esp+2Ch+Src], edi ; Size
.text:004077A6                 mov     ecx, ds:Block
.text:004077AC                 mov     [esp+2Ch+Str], ecx ; Block
.text:004077AF                 call    realloc
.text:004077B4                 mov     ds:dword_422050, edi
.text:004077BA                 test    eax, eax
.text:004077BC                 jz      short loc_4077C8
.text:004077BE                 mov     ds:Block, eax
.text:004077C3                 jmp     loc_407721
.text:004077C8 ; ---------------------------------------------------------------------------
.text:004077C8
.text:004077C8 loc_4077C8:                             ; CODE XREF: sub_4076F0+CC↑j
.text:004077C8                 mov     edi, ds:Block
.text:004077CE                 mov     [esp+2Ch+Str], edi ; Block
.text:004077D1                 lea     edi, [ebx+1]
.text:004077D4                 call    free
.text:004077D9                 cmp     edi, 200h
.text:004077DF                 ja      loc_40786E
.text:004077E5                 mov     eax, 200h
.text:004077EA                 mov     edx, [esp+2Ch+arg_4]
.text:004077EE                 sub     eax, edi
.text:004077F0                 add     eax, offset dword_422060
.text:004077F5
.text:004077F5 loc_4077F5:                             ; CODE XREF: sub_4076F0+193↓j
.text:004077F5                 mov     [esp+2Ch+Size], edi ; Size
.text:004077F9                 mov     [esp+2Ch+Src], edx ; Src
.text:004077FD                 mov     [esp+2Ch+Str], eax ; void *
.text:00407800                 call    memcpy
.text:00407805                 mov     [esp+2Ch+var_14], eax
.text:00407809                 mov     ecx, esi
.text:0040780B                 mov     eax, 200h
.text:00407810                 sub     eax, edi
.text:00407812                 cmp     esi, eax
.text:00407814                 ja      short loc_40785B
.text:00407816                 mov     [esp+2Ch+var_15], 0
.text:0040781B                 sub     eax, esi
.text:0040781D                 mov     ebx, ebp
.text:0040781F                 lea     edx, dword_422060[eax]
.text:00407825
.text:00407825 loc_407825:                             ; CODE XREF: sub_4076F0+17C↓j
.text:00407825                 mov     [esp+2Ch+Size], ecx ; Size
.text:00407829                 mov     [esp+2Ch+Src], ebx ; Src
.text:0040782D                 mov     [esp+2Ch+Str], edx ; void *
.text:00407830                 call    memcpy
.text:00407835                 cmp     [esp+2Ch+var_15], 0
.text:0040783A                 mov     [esp+2Ch+var_14], eax
.text:0040783E                 jz      short loc_407852
.text:00407840                 mov     ds:byte_422064, 5Dh ; ']'
.text:00407847                 mov     ebx, 2E2E2E5Bh
.text:0040784C                 mov     ds:dword_422060, ebx
.text:00407852
.text:00407852 loc_407852:                             ; CODE XREF: sub_4076F0+14E↑j
.text:00407852                 mov     eax, [esp+2Ch+var_14]
.text:00407856                 jmp     loc_40776F
.text:0040785B ; ---------------------------------------------------------------------------
.text:0040785B
.text:0040785B loc_40785B:                             ; CODE XREF: sub_4076F0+124↑j
.text:0040785B                 mov     [esp+2Ch+var_15], 1
.text:00407860                 sub     esi, eax
.text:00407862                 mov     edx, offset dword_422060
.text:00407867                 lea     ebx, [esi+ebp]
.text:0040786A                 mov     ecx, eax
.text:0040786C                 jmp     short loc_407825
.text:0040786E ; ---------------------------------------------------------------------------
.text:0040786E
.text:0040786E loc_40786E:                             ; CODE XREF: sub_4076F0+EF↑j
.text:0040786E                 mov     ecx, [esp+2Ch+arg_4]
.text:00407872                 mov     eax, offset dword_422060
.text:00407877                 mov     edi, 200h
.text:0040787C                 lea     edx, [ecx+ebx-1FFh]
.text:00407883                 jmp     loc_4077F5
.text:00407888 ; ---------------------------------------------------------------------------
.text:00407888
.text:00407888 loc_407888:                             ; CODE XREF: sub_4076F0+74↑j
.text:00407888                 mov     [esp+2Ch+Size], 151h
.text:00407890                 mov     [esp+2Ch+Src], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00407898                 mov     [esp+2Ch+Str], offset aStrlenBuf1NByt ; "strlen (buf) + 1 == n_bytes_needed"
.text:0040789F                 call    _assert
.text:0040789F sub_4076F0      endp
.text:0040789F
.text:0040789F ; ---------------------------------------------------------------------------
.text:004078A4 ; const CHAR asc_4078A4[1]
.text:004078A4 asc_4078A4      db '.'                  ; DATA XREF: sub_4078E0+E5↓o
.text:004078A5                 db 2Eh, 0, 63h
.text:004078A8 aAnnotChdirFrom db 'annot chdir from %s to ..',0
.text:004078C2 aAdStackHeightD db 'AD_stack_height (ds)',0
.text:004078D7                 align 10h
.text:004078E0
.text:004078E0 ; =============== S U B R O U T I N E =======================================
.text:004078E0
.text:004078E0
.text:004078E0 sub_4078E0      proc near               ; CODE XREF: sub_406A40+66F↑p
.text:004078E0
.text:004078E0 var_9C          = dword ptr -9Ch
.text:004078E0 Src             = dword ptr -98h
.text:004078E0 Size            = dword ptr -94h
.text:004078E0 var_90          = byte ptr -90h
.text:004078E0 var_8C          = byte ptr -8Ch
.text:004078E0 var_84          = dword ptr -84h
.text:004078E0 var_80          = dword ptr -80h
.text:004078E0 var_7C          = dword ptr -7Ch
.text:004078E0 var_78          = dword ptr -78h
.text:004078E0 arg_0           = dword ptr  4
.text:004078E0 arg_4           = dword ptr  8
.text:004078E0 arg_8           = dword ptr  0Ch
.text:004078E0
.text:004078E0                 push    ebp
.text:004078E1                 push    edi
.text:004078E2                 push    esi
.text:004078E3                 push    ebx
.text:004078E4                 sub     esp, 8Ch
.text:004078EA                 mov     esi, [esp+9Ch+arg_0]
.text:004078F1                 mov     edx, [esi+34h]
.text:004078F4                 mov     ebx, esi
.text:004078F6                 mov     eax, [esi+38h]
.text:004078F9                 mov     edi, [esi+34h]
.text:004078FC                 mov     ecx, [esi+64h]
.text:004078FF                 sub     eax, edx
.text:00407901                 shr     eax, 2
.text:00407904                 mov     esi, [edi+eax*4-4]
.text:00407908                 sub     ecx, 18h
.text:0040790B                 mov     edi, [ebx+0Ch]
.text:0040790E                 mov     ebp, [ecx+4]
.text:00407911                 mov     [esp+9Ch+var_9C], esi ; size_t
.text:00407914                 sub     edi, esi
.text:00407916                 call    sub_40B090
.text:0040791B                 mov     [esp+9Ch+var_9C], eax ; void *
.text:0040791E                 mov     ebx, eax
.text:00407920                 lea     ecx, [esi-1]
.text:00407923                 mov     [esp+9Ch+Size], ecx ; Size
.text:00407927                 mov     [esp+9Ch+Src], edi ; Src
.text:0040792B                 call    memcpy
.text:00407930                 mov     byte ptr [esi+ebx-1], 0
.text:00407935                 mov     edx, [esp+9Ch+arg_4]
.text:0040793C                 mov     eax, [esp+9Ch+arg_0]
.text:00407943                 mov     [edx], ebx
.text:00407945                 mov     ecx, [eax+64h]
.text:00407948                 mov     eax, [ecx-18h]
.text:0040794B                 test    eax, eax
.text:0040794D                 jnz     loc_407B90
.text:00407953
.text:00407953 loc_407953:                             ; CODE XREF: sub_4078E0+2B8↓j
.text:00407953                 mov     ebx, [esp+9Ch+arg_0]
.text:0040795A                 add     ebx, 58h ; 'X'
.text:0040795D                 mov     edi, [ebx+10h]
.text:00407960                 mov     edx, [ebx+0Ch]
.text:00407963                 sub     edi, edx
.text:00407965                 cmp     edi, 0FFFFFFE8h
.text:00407968                 jl      loc_407B78
.text:0040796E
.text:0040796E loc_40796E:                             ; CODE XREF: sub_4078E0+2AB↓j
.text:0040796E                 mov     eax, [esp+9Ch+arg_0]
.text:00407975                 lea     ecx, [edx-18h]
.text:00407978                 mov     [ebx+0Ch], ecx
.text:0040797B                 mov     [esp+9Ch+var_9C], eax
.text:0040797E                 call    sub_408710
.text:00407983                 mov     esi, [esp+9Ch+arg_0]
.text:0040798A                 mov     edi, [esi+64h]
.text:0040798D                 sub     edi, 18h
.text:00407990                 cmp     ebp, 4
.text:00407993                 jz      loc_407B70
.text:00407999                 cmp     ebp, 3
.text:0040799C                 jz      loc_407B57
.text:004079A2
.text:004079A2 loc_4079A2:                             ; CODE XREF: sub_4078E0+27B↓j
.text:004079A2                                         ; sub_4078E0+293↓j
.text:004079A2                 mov     edx, [ebx+8]
.text:004079A5                 mov     eax, 0AAAAAAABh
.text:004079AA                 mov     ebp, [ebx+0Ch]
.text:004079AD                 sub     ebp, edx
.text:004079AF                 mul     ebp
.text:004079B1                 mov     eax, edx
.text:004079B3                 shr     eax, 4
.text:004079B6                 jz      loc_407B9D
.text:004079BC                 cmp     eax, 1
.text:004079BF                 jbe     loc_407B28
.text:004079C5                 mov     [esp+9Ch+var_9C], offset asc_4078A4 ; "."
.text:004079CC                 call    sub_41A6F0
.text:004079D1                 test    eax, eax
.text:004079D3                 jnz     loc_407AD4
.text:004079D9
.text:004079D9 loc_4079D9:                             ; CODE XREF: sub_4078E0+243↓j
.text:004079D9                 mov     [esp+9Ch+var_9C], offset byte_4068F7
.text:004079E0                 lea     ecx, [esp+9Ch+var_8C]
.text:004079E4                 mov     [esp+9Ch+Src], ecx
.text:004079E8                 call    sub_409320
.text:004079ED                 test    eax, eax
.text:004079EF                 jnz     loc_407A80
.text:004079F5
.text:004079F5 loc_4079F5:                             ; CODE XREF: sub_4078E0+1EF↓j
.text:004079F5                 mov     edx, [esp+9Ch+var_80]
.text:004079F9                 mov     esi, [esp+9Ch+var_84]
.text:004079FD                 mov     ebp, [edi+8]
.text:00407A00                 mov     ecx, [edi+0Ch]
.text:00407A03                 mov     eax, edx
.text:00407A05                 xor     ebp, esi
.text:00407A07                 xor     eax, ecx
.text:00407A09                 or      eax, ebp
.text:00407A0B                 jnz     short loc_407A25
.text:00407A0D                 mov     ecx, [esp+9Ch+var_78]
.text:00407A11                 mov     ebp, [edi+10h]
.text:00407A14                 mov     esi, [edi+14h]
.text:00407A17                 mov     eax, [esp+9Ch+var_7C]
.text:00407A1B                 mov     edi, ecx
.text:00407A1D                 xor     edi, esi
.text:00407A1F                 xor     ebp, eax
.text:00407A21                 or      edi, ebp
.text:00407A23                 jz      short loc_407A70
.text:00407A25
.text:00407A25 loc_407A25:                             ; CODE XREF: sub_4078E0+12B↑j
.text:00407A25                 mov     [esp+9Ch+Src], offset byte_4068F7 ; char *
.text:00407A2D                 mov     ebx, [esp+9Ch+arg_0]
.text:00407A34                 mov     [esp+9Ch+var_9C], ebx ; int
.text:00407A37                 call    sub_4076F0
.text:00407A3C                 mov     [esp+9Ch+var_9C], eax ; char *
.text:00407A3F                 call    sub_40BBD0
.text:00407A44                 mov     [esp+9Ch+var_9C], offset aSChangedDevIno ; "%s changed dev/ino"
.text:00407A4B                 mov     ebp, eax
.text:00407A4D                 call    ds:libintl_gettext
.text:00407A53                 mov     dword ptr [esp+9Ch+var_90], ebp ; char
.text:00407A57                 mov     [esp+9Ch+Src], 0 ; ErrorMessage
.text:00407A5F                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:00407A66                 mov     [esp+9Ch+Size], eax ; char *
.text:00407A6A                 call    sub_415D50
.text:00407A6F                 nop
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: sub_4078E0+143↑j
.text:00407A70                                         ; sub_4078E0+25C↓j ...
.text:00407A70                 add     esp, 8Ch
.text:00407A76                 pop     ebx
.text:00407A77                 pop     esi
.text:00407A78                 pop     edi
.text:00407A79                 pop     ebp
.text:00407A7A                 retn
.text:00407A7A ; ---------------------------------------------------------------------------
.text:00407A7B                 align 10h
.text:00407A80
.text:00407A80 loc_407A80:                             ; CODE XREF: sub_4078E0+10F↑j
.text:00407A80                 mov     [esp+9Ch+Src], offset byte_4068F7 ; char *
.text:00407A88                 mov     eax, [esp+9Ch+arg_0]
.text:00407A8F                 mov     [esp+9Ch+var_9C], eax ; int
.text:00407A92                 call    sub_4076F0
.text:00407A97                 mov     [esp+9Ch+var_9C], eax ; char *
.text:00407A9A                 call    sub_40BBD0
.text:00407A9F                 mov     [esp+9Ch+var_9C], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:00407AA6                 mov     ebx, eax
.text:00407AA8                 call    ds:libintl_gettext
.text:00407AAE                 mov     ebp, eax
.text:00407AB0                 call    _errno
.text:00407AB5                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00407AB9                 mov     [esp+9Ch+Size], ebp ; char *
.text:00407ABD                 mov     edx, [eax]
.text:00407ABF                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:00407AC6                 mov     [esp+9Ch+Src], edx ; ErrorMessage
.text:00407ACA                 call    sub_415D50
.text:00407ACF                 jmp     loc_4079F5
.text:00407AD4 ; ---------------------------------------------------------------------------
.text:00407AD4
.text:00407AD4 loc_407AD4:                             ; CODE XREF: sub_4078E0+F3↑j
.text:00407AD4                 mov     [esp+9Ch+Src], offset byte_4068F7 ; char *
.text:00407ADC                 mov     esi, [esp+9Ch+arg_0]
.text:00407AE3                 mov     [esp+9Ch+var_9C], esi ; int
.text:00407AE6                 call    sub_4076F0
.text:00407AEB                 mov     [esp+9Ch+var_9C], eax ; char *
.text:00407AEE                 call    sub_40BBD0
.text:00407AF3                 mov     [esp+9Ch+var_9C], 4078A7h
.text:00407AFA                 mov     ebx, eax
.text:00407AFC                 call    ds:libintl_gettext
.text:00407B02                 mov     ebp, eax
.text:00407B04                 call    _errno
.text:00407B09                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00407B0D                 mov     [esp+9Ch+Size], ebp ; char *
.text:00407B11                 mov     ebx, [eax]
.text:00407B13                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:00407B1A                 mov     [esp+9Ch+Src], ebx ; ErrorMessage
.text:00407B1E                 call    sub_415D50
.text:00407B23                 jmp     loc_4079D9
.text:00407B28 ; ---------------------------------------------------------------------------
.text:00407B28
.text:00407B28 loc_407B28:                             ; CODE XREF: sub_4078E0+DF↑j
.text:00407B28                 mov     edx, [esp+9Ch+arg_8]
.text:00407B2F                 add     edx, 4
.text:00407B32                 mov     [esp+9Ch+var_9C], edx
.text:00407B35                 call    sub_40D1B0
.text:00407B3A                 test    eax, eax
.text:00407B3C                 jz      loc_407A70
.text:00407B42                 call    _errno
.text:00407B47                 mov     esi, [eax]
.text:00407B49                 mov     edi, [esp+9Ch+arg_8]
.text:00407B50                 mov     [edi], esi
.text:00407B52                 jmp     loc_407A70
.text:00407B57 ; ---------------------------------------------------------------------------
.text:00407B57
.text:00407B57 loc_407B57:                             ; CODE XREF: sub_4078E0+BC↑j
.text:00407B57                 cmp     dword ptr [edi+4], 2
.text:00407B5B                 jnz     loc_4079A2
.text:00407B61                 jmp     short loc_407B70
.text:00407B61 ; ---------------------------------------------------------------------------
.text:00407B63                 align 10h
.text:00407B70
.text:00407B70 loc_407B70:                             ; CODE XREF: sub_4078E0+B3↑j
.text:00407B70                                         ; sub_4078E0+281↑j
.text:00407B70                 mov     [edi+4], ebp
.text:00407B73                 jmp     loc_4079A2
.text:00407B78 ; ---------------------------------------------------------------------------
.text:00407B78
.text:00407B78 loc_407B78:                             ; CODE XREF: sub_4078E0+88↑j
.text:00407B78                 mov     [esp+9Ch+Src], 0FFFFFFE8h
.text:00407B80                 mov     [esp+9Ch+var_9C], ebx
.text:00407B83                 call    sub_41DC90
.text:00407B88                 mov     edx, [ebx+0Ch]
.text:00407B8B                 jmp     loc_40796E
.text:00407B90 ; ---------------------------------------------------------------------------
.text:00407B90
.text:00407B90 loc_407B90:                             ; CODE XREF: sub_4078E0+6D↑j
.text:00407B90                 mov     [esp+9Ch+var_9C], eax ; void *
.text:00407B93                 call    sub_40C3B0
.text:00407B98                 jmp     loc_407953
.text:00407B9D ; ---------------------------------------------------------------------------
.text:00407B9D
.text:00407B9D loc_407B9D:                             ; CODE XREF: sub_4078E0+D6↑j
.text:00407B9D                 mov     [esp+9Ch+Size], 189h
.text:00407BA5                 mov     [esp+9Ch+Src], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00407BAD                 mov     [esp+9Ch+var_9C], 4078C2h
.text:00407BB4                 call    _assert
.text:00407BB4 sub_4078E0      endp
.text:00407BB4
.text:00407BB4 ; ---------------------------------------------------------------------------
.text:00407BB9                 align 10h
.text:00407BC0
.text:00407BC0 ; =============== S U B R O U T I N E =======================================
.text:00407BC0
.text:00407BC0
.text:00407BC0 sub_407BC0      proc near               ; DATA XREF: sub_407C60+ED↓o
.text:00407BC0                 and     eax, 72203A73h
.text:00407BC5                 db      65h
.text:00407BC5                 insd
.text:00407BC7                 outsd
.text:00407BC8                 jbe     short near ptr loc_407C2B+4
.text:00407BCA                 and     [edi+72h], dh
.text:00407BCD                 imul    esi, [ebp+2Dh], 746F7270h
.text:00407BD5                 arpl    gs:[ebp+64h], si
.text:00407BDA                 and     ds:73252073h, ah
.text:00407BE0                 aas
.text:00407BE1                 and     [eax], al
.text:00407BE3
.text:00407BE3 loc_407BE3:                             ; DATA XREF: sub_407C60:loc_407DA5↓o
.text:00407BE3                 and     eax, 72203A73h
.text:00407BE8                 db      65h
.text:00407BE8                 insd
.text:00407BEA                 outsd
.text:00407BEB                 jbe     short near ptr loc_407C50+2
.text:00407BED                 and     ds:73252073h, ah
.text:00407BF3                 aas
.text:00407BF4                 and     [eax], al
.text:00407BF6                 lea     esi, [esi+0]
.text:00407BF9                 lea     edi, [edi+0]
.text:00407C00
.text:00407C00 loc_407C00:                             ; DATA XREF: sub_407C60+1DC↓o
.text:00407C00                 and     eax, 64203A73h
.text:00407C05                 db      65h
.text:00407C05                 jnb     short near ptr loc_407C66+5
.text:00407C08                 outs    dx, byte ptr gs:[esi]
.text:00407C0A                 and     fs:[ecx+6Eh], ch
.text:00407C0E                 jz      short loc_407C7F
.text:00407C10                 and     [edi+72h], dh
.text:00407C13                 imul    esi, [ebp+2Dh], 746F7270h
.text:00407C1B                 arpl    gs:[ebp+64h], si
.text:00407C20                 and     [ecx+ebp*2+72h], ah
.text:00407C24                 arpl    gs:[edi+ebp*2+72h], si
.text:00407C29                 jns     short near ptr loc_407C4A+1
.text:00407C2B
.text:00407C2B loc_407C2B:                             ; CODE XREF: sub_407BC0+8↑j
.text:00407C2B                 and     eax, 203F73h
.text:00407C30                 nop
.text:00407C31                 nop
.text:00407C32                 nop
.text:00407C33                 nop
.text:00407C34                 nop
.text:00407C35                 nop
.text:00407C36                 nop
.text:00407C37                 nop
.text:00407C38                 nop
.text:00407C39                 nop
.text:00407C3A                 nop
.text:00407C3B                 nop
.text:00407C3C                 nop
.text:00407C3D                 nop
.text:00407C3E                 nop
.text:00407C3F                 nop
.text:00407C3F sub_407BC0      endp
.text:00407C3F
.text:00407C40
.text:00407C40 ; =============== S U B R O U T I N E =======================================
.text:00407C40
.text:00407C40
.text:00407C40 sub_407C40      proc near               ; DATA XREF: sub_407C60:loc_407E77↓o
.text:00407C40                 and     eax, 64203A73h
.text:00407C45                 db      65h
.text:00407C45                 jnb     short near ptr loc_407CA9+2
.text:00407C48                 outs    dx, byte ptr gs:[esi]
.text:00407C4A
.text:00407C4A loc_407C4A:                             ; CODE XREF: sub_407BC0+69↑j
.text:00407C4A                 and     fs:[ecx+6Eh], ch
.text:00407C4E                 jz      short near ptr loc_407CBC+3
.text:00407C50
.text:00407C50 loc_407C50:                             ; CODE XREF: sub_407BC0+2B↑j
.text:00407C50                 and     [ecx+ebp*2+72h], ah
.text:00407C54                 arpl    gs:[edi+ebp*2+72h], si
.text:00407C59                 jns     short near ptr loc_407C78+3
.text:00407C5B                 and     eax, 203F73h
.text:00407C5B sub_407C40      endp
.text:00407C5B
.text:00407C60
.text:00407C60 ; =============== S U B R O U T I N E =======================================
.text:00407C60
.text:00407C60
.text:00407C60 ; int __cdecl sub_407C60(int, LPCSTR, int, int, int, int)
.text:00407C60 sub_407C60      proc near               ; CODE XREF: sub_4066D0+46↑p
.text:00407C60                                         ; sub_406A40+6E5↑p
.text:00407C60
.text:00407C60 Stream          = dword ptr -0BCh
.text:00407C60 Format          = dword ptr -0B8h
.text:00407C60 var_B4          = dword ptr -0B4h
.text:00407C60 var_B0          = byte ptr -0B0h
.text:00407C60 var_AC          = dword ptr -0ACh
.text:00407C60 var_94          = dword ptr -94h
.text:00407C60 var_8E          = byte ptr -8Eh
.text:00407C60 var_8D          = byte ptr -8Dh
.text:00407C60 var_8C          = dword ptr -8Ch
.text:00407C60 arg_0           = dword ptr  4
.text:00407C60 arg_4           = dword ptr  8
.text:00407C60 arg_8           = dword ptr  0Ch
.text:00407C60 arg_C           = dword ptr  10h
.text:00407C60 arg_10          = dword ptr  14h
.text:00407C60 arg_14          = dword ptr  18h
.text:00407C60
.text:00407C60                 push    ebp
.text:00407C61                 push    edi
.text:00407C62                 push    esi
.text:00407C63                 xor     esi, esi
.text:00407C65                 push    ebx
.text:00407C66
.text:00407C66 loc_407C66:                             ; CODE XREF: sub_407BC0+45↑j
.text:00407C66                 sub     esp, 0ACh
.text:00407C6C                 mov     ebx, [esp+0BCh+arg_8]
.text:00407C73                 mov     [esp+0BCh+var_8D], 0
.text:00407C78
.text:00407C78 loc_407C78:                             ; CODE XREF: sub_407C40+19↑j
.text:00407C78                 mov     edx, [esp+0BCh+arg_14]
.text:00407C7F
.text:00407C7F loc_407C7F:                             ; CODE XREF: sub_407BC0+4E↑j
.text:00407C7F                 mov     eax, [esp+0BCh+arg_10]
.text:00407C86                 mov     ebp, [esp+0BCh+arg_4]
.text:00407C8D                 mov     dword ptr [edx], 2
.text:00407C93                 mov     dword ptr [eax], 2
.text:00407C99                 xor     eax, eax
.text:00407C9B                 cmp     byte ptr [ebx], 0
.text:00407C9E                 setz    al
.text:00407CA1                 xor     edx, edx
.text:00407CA3                 cmp     byte ptr [ebx+8], 0
.text:00407CA7                 jnz     short loc_407CAF
.text:00407CA9
.text:00407CA9 loc_407CA9:                             ; CODE XREF: sub_407C40+5↑j
.text:00407CA9                 cmp     byte ptr [ebx+1], 0
.text:00407CAD                 jz      short loc_407CB4
.text:00407CAF
.text:00407CAF loc_407CAF:                             ; CODE XREF: sub_407C60+47↑j
.text:00407CAF                 mov     edx, 1
.text:00407CB4
.text:00407CB4 loc_407CB4:                             ; CODE XREF: sub_407C60+4D↑j
.text:00407CB4                 test    edx, eax
.text:00407CB6                 jnz     loc_407F60
.text:00407CBC
.text:00407CBC loc_407CBC:                             ; CODE XREF: sub_407C60+35C↓j
.text:00407CBC                                         ; sub_407C40+E↑j
.text:00407CBC                 cmp     byte ptr [ebx+1], 0
.text:00407CC0                 jz      loc_407D93
.text:00407CC6
.text:00407CC6 loc_407CC6:                             ; CODE XREF: sub_407C60+356↓j
.text:00407CC6                 test    esi, esi
.text:00407CC8                 jz      loc_407F00
.text:00407CCE
.text:00407CCE loc_407CCE:                             ; CODE XREF: sub_407C60+2B2↓j
.text:00407CCE                 mov     edx, [esi]
.text:00407CD0                 mov     ecx, edx
.text:00407CD2                 and     ecx, 0F000h
.text:00407CD8                 cmp     ecx, 4000h
.text:00407CDE                 jz      loc_407EA4
.text:00407CE4
.text:00407CE4 loc_407CE4:                             ; CODE XREF: sub_407C60+248↓j
.text:00407CE4                 and     edx, 0F000h
.text:00407CEA                 cmp     edx, 0A000h
.text:00407CF0                 jz      loc_407E90
.text:00407CF6
.text:00407CF6 loc_407CF6:                             ; CODE XREF: sub_407C60+23F↓j
.text:00407CF6                 mov     [esp+0BCh+Format], ebp ; char *
.text:00407CFA                 mov     eax, [esp+0BCh+arg_0]
.text:00407D01                 mov     [esp+0BCh+Stream], eax ; int
.text:00407D04                 call    sub_4076F0
.text:00407D09                 mov     [esp+0BCh+Stream], eax ; char *
.text:00407D0C                 call    sub_40BBD0
.text:00407D11                 mov     [esp+0BCh+var_94], eax
.text:00407D15                 mov     edi, [esi]
.text:00407D17                 xor     ecx, ecx
.text:00407D19                 mov     edx, [esp+0BCh+arg_10]
.text:00407D20                 and     edi, 0F000h
.text:00407D26                 cmp     edi, 4000h
.text:00407D2C                 setz    cl
.text:00407D2F                 add     ecx, 3
.text:00407D32                 cmp     edi, 4000h
.text:00407D38                 mov     [edx], ecx
.text:00407D3A                 jz      short loc_407DB0
.text:00407D3C
.text:00407D3C loc_407D3C:                             ; CODE XREF: sub_407C60+154↓j
.text:00407D3C                                         ; sub_407C60+15E↓j ...
.text:00407D3C                 mov     [esp+0BCh+Stream], esi
.text:00407D3F                 call    sub_408A00
.text:00407D44                 cmp     [esp+0BCh+var_8D], 0
.text:00407D49                 mov     ebx, eax
.text:00407D4B                 jz      short loc_407DA5
.text:00407D4D                 mov     [esp+0BCh+Stream], offset sub_407BC0
.text:00407D54
.text:00407D54 loc_407D54:                             ; CODE XREF: sub_407C60+14C↓j
.text:00407D54                 call    ds:libintl_gettext
.text:00407D5A                 mov     dword ptr [esp+0BCh+var_B0], ebx
.text:00407D5E                 mov     ecx, ds:_iob
.text:00407D64                 mov     esi, [esp+0BCh+var_94]
.text:00407D68                 mov     ebx, ds:dword_422930
.text:00407D6E                 add     ecx, 40h ; '@'
.text:00407D71                 mov     [esp+0BCh+var_AC], esi
.text:00407D75                 mov     [esp+0BCh+var_B4], ebx
.text:00407D79                 mov     [esp+0BCh+Format], eax ; Format
.text:00407D7D                 mov     [esp+0BCh+Stream], ecx ; Stream
.text:00407D80                 call    fprintf
.text:00407D85
.text:00407D85 loc_407D85:                             ; CODE XREF: sub_407C60+212↓j
.text:00407D85                 call    sub_40BF70
.text:00407D8A                 test    al, al
.text:00407D8C                 mov     edx, 3
.text:00407D91                 jz      short loc_407D98
.text:00407D93
.text:00407D93 loc_407D93:                             ; CODE XREF: sub_407C60+60↑j
.text:00407D93                                         ; sub_407C60+234↓j
.text:00407D93                 mov     edx, 2
.text:00407D98
.text:00407D98 loc_407D98:                             ; CODE XREF: sub_407C60+131↑j
.text:00407D98                                         ; sub_407C60+299↓j
.text:00407D98                 add     esp, 0ACh
.text:00407D9E                 mov     eax, edx
.text:00407DA0                 pop     ebx
.text:00407DA1                 pop     esi
.text:00407DA2                 pop     edi
.text:00407DA3                 pop     ebp
.text:00407DA4                 retn
.text:00407DA5 ; ---------------------------------------------------------------------------
.text:00407DA5
.text:00407DA5 loc_407DA5:                             ; CODE XREF: sub_407C60+EB↑j
.text:00407DA5                 mov     [esp+0BCh+Stream], offset loc_407BE3
.text:00407DAC                 jmp     short loc_407D54
.text:00407DAC ; ---------------------------------------------------------------------------
.text:00407DAE                 align 10h
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: sub_407C60+DA↑j
.text:00407DB0                 cmp     byte ptr [ebx+2], 0
.text:00407DB4                 jz      short loc_407D3C
.text:00407DB6                 cmp     [esp+0BCh+arg_C], 2
.text:00407DBE                 jnz     loc_407D3C
.text:00407DC4                 mov     [esp+0BCh+Stream], ebp ; LPCSTR
.text:00407DC7                 call    sub_41A590
.text:00407DCC                 test    eax, eax
.text:00407DCE                 mov     edi, eax
.text:00407DD0                 jz      short loc_407E1E
.text:00407DD2                 call    _errno
.text:00407DD7                 mov     dword ptr [eax], 0
.text:00407DDD                 lea     esi, [esi+0]
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: sub_407C60+198↓j
.text:00407DE0                                         ; sub_407C60+1A9↓j
.text:00407DE0                 mov     [esp+0BCh+Stream], edi
.text:00407DE3                 call    sub_418CB0
.text:00407DE8                 test    eax, eax
.text:00407DEA                 mov     ebx, eax
.text:00407DEC                 jz      short loc_407E0B
.text:00407DEE                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:00407DF2                 jnz     short loc_407E0B
.text:00407DF4                 cmp     byte ptr [eax+0Dh], 0
.text:00407DF8                 jz      short loc_407DE0
.text:00407DFA                 mov     ebp, [eax+0Ch]
.text:00407DFD                 and     ebp, 0FFFF00h
.text:00407E03                 cmp     ebp, 2E00h
.text:00407E09                 jz      short loc_407DE0
.text:00407E0B
.text:00407E0B loc_407E0B:                             ; CODE XREF: sub_407C60+18C↑j
.text:00407E0B                                         ; sub_407C60+192↑j
.text:00407E0B                 call    _errno
.text:00407E10                 mov     ebp, [eax]
.text:00407E12                 mov     [esp+0BCh+Stream], edi ; void *
.text:00407E15                 call    sub_41A520
.text:00407E1A                 test    ebx, ebx
.text:00407E1C                 jz      short loc_407E80
.text:00407E1E
.text:00407E1E loc_407E1E:                             ; CODE XREF: sub_407C60+170↑j
.text:00407E1E                                         ; sub_407C60+229↓j
.text:00407E1E                 mov     eax, 3
.text:00407E23
.text:00407E23 loc_407E23:                             ; CODE XREF: sub_407C60+227↓j
.text:00407E23                 mov     ebx, [esp+0BCh+arg_14]
.text:00407E2A                 cmp     eax, 3
.text:00407E2D                 mov     [ebx], eax
.text:00407E2F                 jnz     loc_407D3C
.text:00407E35                 cmp     [esp+0BCh+var_8D], 0
.text:00407E3A                 jz      short loc_407E77
.text:00407E3C                 mov     [esp+0BCh+Stream], offset loc_407C00
.text:00407E43
.text:00407E43 loc_407E43:                             ; CODE XREF: sub_407C60+21E↓j
.text:00407E43                 call    ds:libintl_gettext
.text:00407E49                 mov     esi, ds:_iob
.text:00407E4F                 mov     edx, ds:dword_422930
.text:00407E55                 mov     edi, eax
.text:00407E57                 mov     [esp+0BCh+var_B4], edx
.text:00407E5B                 mov     eax, [esp+0BCh+var_94]
.text:00407E5F                 add     esi, 40h ; '@'
.text:00407E62                 mov     [esp+0BCh+Format], edi ; Format
.text:00407E66                 mov     [esp+0BCh+Stream], esi ; Stream
.text:00407E69                 mov     dword ptr [esp+0BCh+var_B0], eax
.text:00407E6D                 call    fprintf
.text:00407E72                 jmp     loc_407D85
.text:00407E77 ; ---------------------------------------------------------------------------
.text:00407E77
.text:00407E77 loc_407E77:                             ; CODE XREF: sub_407C60+1DA↑j
.text:00407E77                 mov     [esp+0BCh+Stream], offset sub_407C40
.text:00407E7E                 jmp     short loc_407E43
.text:00407E80 ; ---------------------------------------------------------------------------
.text:00407E80
.text:00407E80 loc_407E80:                             ; CODE XREF: sub_407C60+1BC↑j
.text:00407E80                 test    ebp, ebp
.text:00407E82                 mov     eax, 4
.text:00407E87                 jz      short loc_407E23
.text:00407E89                 jmp     short loc_407E1E
.text:00407E89 ; ---------------------------------------------------------------------------
.text:00407E8B                 align 10h
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: sub_407C60+90↑j
.text:00407E90                 cmp     byte ptr [ebx+1], 0
.text:00407E94                 jz      loc_407D93
.text:00407E9A                 mov     [esp+0BCh+var_8D], 0
.text:00407E9F                 jmp     loc_407CF6
.text:00407EA4 ; ---------------------------------------------------------------------------
.text:00407EA4
.text:00407EA4 loc_407EA4:                             ; CODE XREF: sub_407C60+7E↑j
.text:00407EA4                 cmp     byte ptr [ebx+2], 0
.text:00407EA8                 jnz     loc_407CE4
.text:00407EAE                 mov     [esp+0BCh+Format], ebp ; char *
.text:00407EB2                 mov     edx, [esp+0BCh+arg_0]
.text:00407EB9                 mov     [esp+0BCh+Stream], edx ; int
.text:00407EBC                 call    sub_4076F0
.text:00407EC1                 mov     [esp+0BCh+Stream], eax ; char *
.text:00407EC4                 call    sub_40BBD0
.text:00407EC9                 mov     [esp+0BCh+Stream], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:00407ED0                 mov     esi, eax
.text:00407ED2                 call    ds:libintl_gettext
.text:00407ED8                 mov     dword ptr [esp+0BCh+var_B0], esi ; char
.text:00407EDC                 mov     [esp+0BCh+Format], 15h ; ErrorMessage
.text:00407EE4                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00407EE8
.text:00407EE8 loc_407EE8:                             ; CODE XREF: sub_407C60+2F7↓j
.text:00407EE8                 mov     [esp+0BCh+Stream], 0 ; Code
.text:00407EEF                 call    sub_415D50
.text:00407EF4                 mov     edx, 4
.text:00407EF9                 jmp     loc_407D98
.text:00407EF9 ; ---------------------------------------------------------------------------
.text:00407EFE                 align 10h
.text:00407F00
.text:00407F00 loc_407F00:                             ; CODE XREF: sub_407C60+68↑j
.text:00407F00                 mov     [esp+0BCh+Stream], ebp
.text:00407F03                 lea     esi, [esp+0BCh+var_8C]
.text:00407F07                 mov     [esp+0BCh+Format], esi
.text:00407F0B                 call    sub_409320
.text:00407F10                 test    eax, eax
.text:00407F12                 jz      loc_407CCE
.text:00407F18                 mov     [esp+0BCh+Format], ebp ; char *
.text:00407F1C                 mov     eax, [esp+0BCh+arg_0]
.text:00407F23                 mov     [esp+0BCh+Stream], eax ; int
.text:00407F26                 call    sub_4076F0
.text:00407F2B                 mov     [esp+0BCh+Stream], eax ; char *
.text:00407F2E                 call    sub_40BBD0
.text:00407F33                 mov     [esp+0BCh+Stream], offset aCannotLstatS ; "cannot lstat %s"
.text:00407F3A                 mov     ebp, eax
.text:00407F3C                 call    ds:libintl_gettext
.text:00407F42                 mov     edi, eax
.text:00407F44                 call    _errno
.text:00407F49                 mov     dword ptr [esp+0BCh+var_B0], ebp
.text:00407F4D                 mov     [esp+0BCh+var_B4], edi
.text:00407F51                 mov     ebx, [eax]
.text:00407F53                 mov     [esp+0BCh+Format], ebx
.text:00407F57                 jmp     short loc_407EE8
.text:00407F57 ; ---------------------------------------------------------------------------
.text:00407F59                 align 10h
.text:00407F60
.text:00407F60 loc_407F60:                             ; CODE XREF: sub_407C60+56↑j
.text:00407F60                 mov     [esp+0BCh+Stream], ebp
.text:00407F63                 lea     edi, [esp+0BCh+var_8C]
.text:00407F67                 mov     [esp+0BCh+Format], edi
.text:00407F6B                 call    sub_409320
.text:00407F70                 xor     edx, edx
.text:00407F72                 test    eax, eax
.text:00407F74                 jnz     short loc_407FB0
.text:00407F76                 mov     ecx, [esp+0BCh+var_8C]
.text:00407F7A                 mov     esi, edi
.text:00407F7C                 and     ecx, 0F000h
.text:00407F82                 cmp     ecx, 0A000h
.text:00407F88                 jz      short loc_407FB0
.text:00407F8A                 mov     [esp+0BCh+var_8E], 0
.text:00407F8F                 mov     [esp+0BCh+Format], 2 ; int
.text:00407F97                 mov     [esp+0BCh+Stream], ebp ; LPCSTR
.text:00407F9A                 call    sub_415FF0
.text:00407F9F                 inc     eax
.text:00407FA0                 jz      short loc_407FC1
.text:00407FA2
.text:00407FA2 loc_407FA2:                             ; CODE XREF: sub_407C60+369↓j
.text:00407FA2                                         ; sub_407C60+370↓j
.text:00407FA2                 movzx   edx, [esp+0BCh+var_8E]
.text:00407FA7                 mov     esi, esi
.text:00407FA9                 lea     edi, [edi+0]
.text:00407FB0
.text:00407FB0 loc_407FB0:                             ; CODE XREF: sub_407C60+314↑j
.text:00407FB0                                         ; sub_407C60+328↑j
.text:00407FB0                 mov     [esp+0BCh+var_8D], dl
.text:00407FB4                 test    dl, dl
.text:00407FB6                 jnz     loc_407CC6
.text:00407FBC                 jmp     loc_407CBC
.text:00407FC1 ; ---------------------------------------------------------------------------
.text:00407FC1
.text:00407FC1 loc_407FC1:                             ; CODE XREF: sub_407C60+340↑j
.text:00407FC1                 call    _errno
.text:00407FC6                 cmp     dword ptr [eax], 0Dh
.text:00407FC9                 jnz     short loc_407FA2
.text:00407FCB                 mov     [esp+0BCh+var_8E], 1
.text:00407FD0                 jmp     short loc_407FA2
.text:00407FD0 sub_407C60      endp
.text:00407FD0
.text:00407FD0 ; ---------------------------------------------------------------------------
.text:00407FD2 aReadingDirecto db 'reading directory %s',0
.text:00407FD2                                         ; DATA XREF: sub_4080E0+12B↓o
.text:00407FE7 aCannotOpenDire db 'cannot open directory %s',0
.text:00407FE7                                         ; DATA XREF: sub_4080E0+4CD↓o
.text:00408000 aValidStatusSta_0 db 'VALID_STATUS (status)',0
.text:00408000                                         ; DATA XREF: sub_4080E0+517↓o
.text:00408016                 align 10h
.text:00408020 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.text:00408020                                         ; DATA XREF: sub_4080E0+544↓o
.text:00408020                 db 'This almost certainly means that you have a corrupted file system'
.text:00408020                 db '.',0Ah
.text:00408020                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.text:00408020                 db 'The following directory is part of the cycle:',0Ah
.text:00408020                 db '  %s',0Ah,0
.text:004080DA                 align 10h
.text:004080E0
.text:004080E0 ; =============== S U B R O U T I N E =======================================
.text:004080E0
.text:004080E0
.text:004080E0 sub_4080E0      proc near               ; CODE XREF: sub_406A40+3D0↑p
.text:004080E0
.text:004080E0 Buf             = dword ptr -3Ch
.text:004080E0 Value           = dword ptr -38h
.text:004080E0 var_34          = dword ptr -34h
.text:004080E0 var_30          = byte ptr -30h
.text:004080E0 var_2C          = dword ptr -2Ch
.text:004080E0 ErrorMessage    = dword ptr -28h
.text:004080E0 var_24          = dword ptr -24h
.text:004080E0 var_20          = dword ptr -20h
.text:004080E0 var_19          = byte ptr -19h
.text:004080E0 var_18          = dword ptr -18h
.text:004080E0 var_14          = dword ptr -14h
.text:004080E0 arg_0           = dword ptr  4
.text:004080E0 arg_4           = dword ptr  8
.text:004080E0 arg_8           = dword ptr  0Ch
.text:004080E0 arg_C           = dword ptr  10h
.text:004080E0
.text:004080E0                 push    ebp
.text:004080E1                 push    edi
.text:004080E2                 push    esi
.text:004080E3                 push    ebx
.text:004080E4                 sub     esp, 2Ch
.text:004080E7                 mov     [esp+3Ch+Buf], offset byte_4068F7 ; LPCSTR
.text:004080EE                 call    sub_41A590
.text:004080F3                 mov     edx, [esp+3Ch+arg_0]
.text:004080F7                 mov     ebp, eax
.text:004080F9                 mov     ecx, [edx+64h]
.text:004080FC                 sub     ecx, 18h
.text:004080FF                 mov     edi, [ecx+4]
.text:00408102                 mov     [esp+3Ch+var_14], ecx
.text:00408106                 lea     edx, [edi-2]
.text:00408109                 cmp     edx, 2
.text:0040810C                 ja      loc_4085E7
.text:00408112                 mov     ebx, [esp+3Ch+arg_4]
.text:00408116                 test    eax, eax
.text:00408118                 mov     dword ptr [ebx], 0
.text:0040811E                 jz      loc_40857A
.text:00408124
.text:00408124 loc_408124:                             ; CODE XREF: sub_4080E0+A7↓j
.text:00408124                                         ; sub_4080E0+F3↓j ...
.text:00408124                 call    _errno
.text:00408129                 mov     dword ptr [eax], 0
.text:0040812F                 nop
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: sub_4080E0+6C↓j
.text:00408130                                         ; sub_4080E0+7D↓j
.text:00408130                 mov     [esp+3Ch+Buf], ebp
.text:00408133                 call    sub_418CB0
.text:00408138                 test    eax, eax
.text:0040813A                 mov     ebx, eax
.text:0040813C                 jz      loc_408550
.text:00408142                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:00408146                 jnz     short loc_40815F
.text:00408148                 cmp     byte ptr [eax+0Dh], 0
.text:0040814C                 jz      short loc_408130
.text:0040814E                 mov     edx, [eax+0Ch]
.text:00408151                 and     edx, 0FFFF00h
.text:00408157                 cmp     edx, 2E00h
.text:0040815D                 jz      short loc_408130
.text:0040815F
.text:0040815F loc_40815F:                             ; CODE XREF: sub_4080E0+66↑j
.text:0040815F                 mov     [esp+3Ch+var_19], 0
.text:00408164                 mov     ecx, [esp+3Ch+arg_0]
.text:00408168                 lea     eax, [ebx+0Ch]
.text:0040816B                 mov     [esp+3Ch+var_18], eax
.text:0040816F                 mov     eax, [ecx+64h]
.text:00408172                 mov     esi, [eax-18h]
.text:00408175                 test    esi, esi
.text:00408177                 jnz     loc_408530
.text:0040817D
.text:0040817D loc_40817D:                             ; CODE XREF: sub_4080E0+46B↓j
.text:0040817D                 mov     [esp+3Ch+var_19], 1
.text:00408182
.text:00408182 loc_408182:                             ; CODE XREF: sub_4080E0+465↓j
.text:00408182                 cmp     [esp+3Ch+var_19], 0
.text:00408187                 jz      short loc_408124
.text:00408189                 mov     dword ptr [esp+3Ch+var_30], ebx ; int
.text:0040818D                 mov     edx, [esp+3Ch+arg_C]
.text:00408191                 mov     ebx, [esp+3Ch+arg_0]
.text:00408195                 mov     ecx, [esp+3Ch+var_18]
.text:00408199                 mov     [esp+3Ch+var_34], edx ; int
.text:0040819D                 mov     [esp+3Ch+Buf], ebx ; int
.text:004081A0                 mov     [esp+3Ch+Value], ecx ; LPCSTR
.text:004081A4                 call    sub_4066D0
.text:004081A9                 cmp     eax, 4
.text:004081AC                 mov     ebx, eax
.text:004081AE                 ja      loc_4082F4
.text:004081B4                 cmp     eax, 3
.text:004081B7                 jnb     loc_40825C
.text:004081BD
.text:004081BD loc_4081BD:                             ; CODE XREF: sub_4080E0+1FE↓j
.text:004081BD                                         ; sub_4080E0+207↓j ...
.text:004081BD                 cmp     edi, 4
.text:004081C0                 jz      loc_408250
.text:004081C6                 cmp     edi, 3
.text:004081C9                 jz      short loc_408242
.text:004081CB
.text:004081CB loc_4081CB:                             ; CODE XREF: sub_4080E0+16A↓j
.text:004081CB                                         ; sub_4080E0+177↓j
.text:004081CB                 mov     ebx, [esp+3Ch+arg_4]
.text:004081CF                 mov     esi, [ebx]
.text:004081D1                 test    esi, esi
.text:004081D3                 jz      loc_408124
.text:004081D9
.text:004081D9 loc_4081D9:                             ; CODE XREF: sub_4080E0+479↓j
.text:004081D9                 test    ebp, ebp
.text:004081DB                 jz      short loc_4081EF
.text:004081DD                 mov     [esp+3Ch+Buf], ebp ; void *
.text:004081E0                 call    sub_41A520
.text:004081E5
.text:004081E5 loc_4081E5:                             ; CODE XREF: sub_4080E0+160↓j
.text:004081E5                 mov     eax, edi
.text:004081E7
.text:004081E7 loc_4081E7:                             ; CODE XREF: sub_4080E0+502↓j
.text:004081E7                 add     esp, 2Ch
.text:004081EA                 pop     ebx
.text:004081EB                 pop     esi
.text:004081EC                 pop     edi
.text:004081ED                 pop     ebp
.text:004081EE                 retn
.text:004081EF ; ---------------------------------------------------------------------------
.text:004081EF
.text:004081EF loc_4081EF:                             ; CODE XREF: sub_4080E0+FB↑j
.text:004081EF                                         ; sub_4080E0+495↓j
.text:004081EF                 mov     [esp+3Ch+Value], offset byte_4068F7 ; char *
.text:004081F7                 mov     eax, [esp+3Ch+arg_0]
.text:004081FB                 mov     [esp+3Ch+Buf], eax ; int
.text:004081FE                 call    sub_4076F0
.text:00408203                 mov     [esp+3Ch+Buf], eax ; char *
.text:00408206                 call    sub_40BBD0
.text:0040820B                 mov     [esp+3Ch+Buf], offset aReadingDirecto ; "reading directory %s"
.text:00408212                 mov     ebx, eax
.text:00408214                 call    ds:libintl_gettext
.text:0040821A                 mov     edi, eax
.text:0040821C                 call    _errno
.text:00408221                 mov     [esp+3Ch+var_34], edi ; char *
.text:00408225                 mov     edi, 4
.text:0040822A                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:0040822E                 mov     ebp, [eax]
.text:00408230                 mov     [esp+3Ch+Buf], 0 ; Code
.text:00408237                 mov     [esp+3Ch+Value], ebp ; ErrorMessage
.text:0040823B                 call    sub_415D50
.text:00408240                 jmp     short loc_4081E5
.text:00408242 ; ---------------------------------------------------------------------------
.text:00408242
.text:00408242 loc_408242:                             ; CODE XREF: sub_4080E0+E9↑j
.text:00408242                 mov     edx, [esp+3Ch+var_14]
.text:00408246                 cmp     dword ptr [edx+4], 2
.text:0040824A                 jnz     loc_4081CB
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: sub_4080E0+E0↑j
.text:00408250                                         ; sub_4080E0+34E↓j
.text:00408250                 mov     ecx, [esp+3Ch+var_14]
.text:00408254                 mov     [ecx+4], edi
.text:00408257                 jmp     loc_4081CB
.text:0040825C ; ---------------------------------------------------------------------------
.text:0040825C
.text:0040825C loc_40825C:                             ; CODE XREF: sub_4080E0+D7↑j
.text:0040825C                 mov     ecx, [esp+3Ch+arg_0]
.text:00408260                 mov     eax, [esp+3Ch+var_18]
.text:00408264                 mov     esi, [ecx+64h]
.text:00408267                 mov     [esp+3Ch+Buf], eax ; char *
.text:0040826A                 lea     edx, [esi-18h]
.text:0040826D                 mov     [esp+3Ch+var_20], edx
.text:00408271                 call    sub_40B250
.text:00408276                 mov     [esp+3Ch+var_24], eax
.text:0040827A                 mov     ecx, [esi-18h]
.text:0040827D                 test    ecx, ecx
.text:0040827F                 jnz     short loc_4082B8
.text:00408281                 mov     [esp+3Ch+var_2C], offset j_free
.text:00408289                 mov     dword ptr [esp+3Ch+var_30], offset sub_4075C0
.text:00408291                 mov     [esp+3Ch+var_34], offset sub_40CF80
.text:00408299                 mov     [esp+3Ch+Value], 0
.text:004082A1                 mov     [esp+3Ch+Buf], 0Dh
.text:004082A8                 call    sub_40C0D0
.text:004082AD                 mov     [esi-18h], eax
.text:004082B0                 test    eax, eax
.text:004082B2                 jz      loc_408603
.text:004082B8
.text:004082B8 loc_4082B8:                             ; CODE XREF: sub_4080E0+19F↑j
.text:004082B8                 mov     edx, [esp+3Ch+var_24]
.text:004082BC                 mov     eax, [esp+3Ch+var_20]
.text:004082C0                 mov     [esp+3Ch+Value], edx
.text:004082C4                 mov     esi, [eax]
.text:004082C6                 mov     [esp+3Ch+Buf], esi
.text:004082C9                 call    sub_40C620
.text:004082CE                 test    eax, eax
.text:004082D0                 jz      loc_408603
.text:004082D6                 cmp     ebx, 4
.text:004082D9                 jz      short loc_4082ED
.text:004082DB                 cmp     ebx, 3
.text:004082DE                 jnz     loc_4081BD
.text:004082E4                 cmp     edi, 2
.text:004082E7                 jnz     loc_4081BD
.text:004082ED
.text:004082ED loc_4082ED:                             ; CODE XREF: sub_4080E0+1F9↑j
.text:004082ED                 mov     edi, ebx
.text:004082EF                 jmp     loc_4081BD
.text:004082F4 ; ---------------------------------------------------------------------------
.text:004082F4
.text:004082F4 loc_4082F4:                             ; CODE XREF: sub_4080E0+CE↑j
.text:004082F4                 cmp     eax, 5
.text:004082F7                 jnz     loc_4081BD
.text:004082FD                 call    _errno
.text:00408302                 mov     esi, [eax]
.text:00408304                 mov     ecx, [esp+3Ch+arg_8]
.text:00408308                 mov     ebx, [esp+3Ch+var_18]
.text:0040830C                 mov     [esp+3Ch+ErrorMessage], esi
.text:00408310                 mov     [esp+3Ch+Value], ecx
.text:00408314                 mov     [esp+3Ch+Buf], ebx
.text:00408317                 call    sub_409320
.text:0040831C                 test    eax, eax
.text:0040831E                 jnz     loc_4084D9
.text:00408324
.text:00408324 loc_408324:                             ; CODE XREF: sub_4080E0+445↓j
.text:00408324                 call    _errno
.text:00408329                 mov     dword ptr [eax], 14h
.text:0040832F                 mov     esi, [esp+3Ch+arg_8]
.text:00408333                 mov     ecx, [esi]
.text:00408335                 and     ecx, 0F000h
.text:0040833B                 cmp     ecx, 4000h
.text:00408341                 jz      loc_40848C
.text:00408347
.text:00408347 loc_408347:                             ; CODE XREF: sub_4080E0+3BA↓j
.text:00408347                 call    _errno
.text:0040834C                 cmp     dword ptr [eax], 14h
.text:0040834F                 jz      loc_408440
.text:00408355                 mov     [esp+3Ch+Buf], 1 ; int
.text:0040835C                 mov     edx, [esp+3Ch+var_18]
.text:00408360                 mov     [esp+3Ch+Value], edx ; char *
.text:00408364                 call    sub_40BBA0
.text:00408369                 mov     [esp+3Ch+Value], offset byte_4068F7 ; char *
.text:00408371                 mov     esi, [esp+3Ch+arg_0]
.text:00408375                 mov     edi, eax
.text:00408377                 mov     [esp+3Ch+Buf], esi ; int
.text:0040837A                 call    sub_4076F0
.text:0040837F                 mov     [esp+3Ch+Value], eax ; char *
.text:00408383                 mov     [esp+3Ch+Buf], 0 ; int
.text:0040838A                 call    sub_40BBA0
.text:0040838F                 mov     [esp+3Ch+Buf], offset aCannotChdirFro ; "cannot chdir from %s to %s"
.text:00408396                 mov     esi, eax
.text:00408398                 call    ds:libintl_gettext
.text:0040839E                 mov     ebx, eax
.text:004083A0                 call    _errno
.text:004083A5                 mov     [esp+3Ch+var_2C], edi
.text:004083A9                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:004083AD                 mov     [esp+3Ch+var_34], ebx ; char *
.text:004083B1                 mov     ecx, [eax]
.text:004083B3                 mov     [esp+3Ch+Buf], 0 ; Code
.text:004083BA                 mov     [esp+3Ch+Value], ecx ; ErrorMessage
.text:004083BE                 call    sub_415D50
.text:004083C3
.text:004083C3 loc_4083C3:                             ; CODE XREF: sub_4080E0+3A7↓j
.text:004083C3                 mov     esi, [esp+3Ch+arg_0]
.text:004083C7                 mov     edi, [esp+3Ch+var_18]
.text:004083CB                 mov     ebx, [esi+64h]
.text:004083CE                 mov     [esp+3Ch+Buf], edi ; char *
.text:004083D1                 call    sub_40B250
.text:004083D6                 mov     ecx, [ebx-18h]
.text:004083D9                 lea     esi, [ebx-18h]
.text:004083DC                 mov     edi, eax
.text:004083DE                 test    ecx, ecx
.text:004083E0                 jnz     short loc_408419
.text:004083E2                 mov     [esp+3Ch+var_2C], offset j_free
.text:004083EA                 mov     dword ptr [esp+3Ch+var_30], offset sub_4075C0
.text:004083F2                 mov     [esp+3Ch+var_34], offset sub_40CF80
.text:004083FA                 mov     [esp+3Ch+Value], 0
.text:00408402                 mov     [esp+3Ch+Buf], 0Dh
.text:00408409                 call    sub_40C0D0
.text:0040840E                 mov     [ebx-18h], eax
.text:00408411                 test    eax, eax
.text:00408413                 jz      loc_408603
.text:00408419
.text:00408419 loc_408419:                             ; CODE XREF: sub_4080E0+300↑j
.text:00408419                 mov     [esp+3Ch+Value], edi
.text:0040841D                 mov     ebx, [esi]
.text:0040841F                 mov     edi, 4
.text:00408424                 mov     [esp+3Ch+Buf], ebx
.text:00408427                 call    sub_40C620
.text:0040842C                 test    eax, eax
.text:0040842E                 jnz     loc_408250
.text:00408434                 jmp     loc_408603
.text:00408434 ; ---------------------------------------------------------------------------
.text:00408439                 align 10h
.text:00408440
.text:00408440 loc_408440:                             ; CODE XREF: sub_4080E0+26F↑j
.text:00408440                 mov     eax, [esp+3Ch+var_18]
.text:00408444                 mov     ebx, [esp+3Ch+arg_0]
.text:00408448                 mov     [esp+3Ch+Value], eax ; char *
.text:0040844C                 mov     [esp+3Ch+Buf], ebx ; int
.text:0040844F                 call    sub_4076F0
.text:00408454                 mov     [esp+3Ch+Buf], eax ; char *
.text:00408457                 call    sub_40BBD0
.text:0040845C                 mov     [esp+3Ch+Buf], offset aCannotRemoveS ; "cannot remove %s"
.text:00408463                 mov     esi, eax
.text:00408465                 call    ds:libintl_gettext
.text:0040846B                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:0040846F                 mov     edi, [esp+3Ch+ErrorMessage]
.text:00408473                 mov     [esp+3Ch+Buf], 0 ; Code
.text:0040847A                 mov     [esp+3Ch+var_34], eax ; char *
.text:0040847E                 mov     [esp+3Ch+Value], edi ; ErrorMessage
.text:00408482                 call    sub_415D50
.text:00408487                 jmp     loc_4083C3
.text:0040848C ; ---------------------------------------------------------------------------
.text:0040848C
.text:0040848C loc_40848C:                             ; CODE XREF: sub_4080E0+261↑j
.text:0040848C                 mov     edx, [esp+3Ch+var_18]
.text:00408490                 mov     [esp+3Ch+Buf], edx ; LPCSTR
.text:00408493                 call    sub_41A6F0
.text:00408498                 test    eax, eax
.text:0040849A                 jnz     loc_408347
.text:004084A0                 mov     edx, [esp+3Ch+arg_0]
.text:004084A4                 mov     ecx, [esp+3Ch+arg_8]
.text:004084A8                 add     edx, 88h ; 'ˆ'
.text:004084AE                 mov     [esp+3Ch+Value], ecx
.text:004084B2                 mov     [esp+3Ch+Buf], edx
.text:004084B5                 call    sub_408890
.text:004084BA                 test    al, al
.text:004084BC                 jnz     loc_408608
.text:004084C2                 mov     ebx, [esp+3Ch+var_18]
.text:004084C6                 mov     [esp+3Ch+Buf], ebx ; char *
.text:004084C9                 call    sub_40B250
.text:004084CE                 mov     esi, [esp+3Ch+arg_4]
.text:004084D2                 mov     [esi], eax
.text:004084D4                 jmp     loc_4081BD
.text:004084D9 ; ---------------------------------------------------------------------------
.text:004084D9
.text:004084D9 loc_4084D9:                             ; CODE XREF: sub_4080E0+23E↑j
.text:004084D9                 mov     ebx, [esp+3Ch+var_18]
.text:004084DD                 mov     eax, [esp+3Ch+arg_0]
.text:004084E1                 mov     [esp+3Ch+Value], ebx ; char *
.text:004084E5                 mov     [esp+3Ch+Buf], eax ; int
.text:004084E8                 call    sub_4076F0
.text:004084ED                 mov     [esp+3Ch+Buf], eax ; char *
.text:004084F0                 call    sub_40BBD0
.text:004084F5                 mov     [esp+3Ch+Buf], offset aCannotLstatS ; "cannot lstat %s"
.text:004084FC                 mov     esi, eax
.text:004084FE                 call    ds:libintl_gettext
.text:00408504                 mov     ebx, eax
.text:00408506                 call    _errno
.text:0040850B                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:0040850F                 mov     [esp+3Ch+var_34], ebx ; char *
.text:00408513                 mov     edx, [eax]
.text:00408515                 mov     [esp+3Ch+Buf], 1 ; Code
.text:0040851C                 mov     [esp+3Ch+Value], edx ; ErrorMessage
.text:00408520                 call    sub_415D50
.text:00408525                 jmp     loc_408324
.text:00408525 ; ---------------------------------------------------------------------------
.text:0040852A                 align 10h
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: sub_4080E0+97↑j
.text:00408530                 mov     esi, [esp+3Ch+var_18]
.text:00408534                 mov     [esp+3Ch+Value], esi
.text:00408538                 mov     edx, [eax-18h]
.text:0040853B                 mov     [esp+3Ch+Buf], edx
.text:0040853E                 call    sub_40CA70
.text:00408543                 test    eax, eax
.text:00408545                 jnz     loc_408182
.text:0040854B                 jmp     loc_40817D
.text:00408550 ; ---------------------------------------------------------------------------
.text:00408550
.text:00408550 loc_408550:                             ; CODE XREF: sub_4080E0+5C↑j
.text:00408550                 call    _errno
.text:00408555                 mov     ebx, [eax]
.text:00408557                 test    ebx, ebx
.text:00408559                 jz      loc_4081D9
.text:0040855F                 call    _errno
.text:00408564                 mov     edi, [eax]
.text:00408566                 mov     [esp+3Ch+Buf], ebp ; void *
.text:00408569                 call    sub_41A520
.text:0040856E                 call    _errno
.text:00408573                 mov     [eax], edi
.text:00408575                 jmp     loc_4081EF
.text:0040857A ; ---------------------------------------------------------------------------
.text:0040857A
.text:0040857A loc_40857A:                             ; CODE XREF: sub_4080E0+3E↑j
.text:0040857A                 call    _errno
.text:0040857F                 cmp     dword ptr [eax], 2
.text:00408582                 jnz     short loc_408591
.text:00408584                 mov     eax, [esp+3Ch+arg_C]
.text:00408588                 cmp     byte ptr [eax], 0
.text:0040858B                 jnz     loc_408124
.text:00408591
.text:00408591 loc_408591:                             ; CODE XREF: sub_4080E0+4A2↑j
.text:00408591                 mov     [esp+3Ch+Value], offset byte_4068F7 ; char *
.text:00408599                 mov     ecx, [esp+3Ch+arg_0]
.text:0040859D                 mov     [esp+3Ch+Buf], ecx ; int
.text:004085A0                 call    sub_4076F0
.text:004085A5                 mov     [esp+3Ch+Buf], eax ; char *
.text:004085A8                 call    sub_40BBD0
.text:004085AD                 mov     [esp+3Ch+Buf], offset aCannotOpenDire ; "cannot open directory %s"
.text:004085B4                 mov     ebp, eax
.text:004085B6                 call    ds:libintl_gettext
.text:004085BC                 mov     edi, eax
.text:004085BE                 call    _errno
.text:004085C3                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:004085C7                 mov     [esp+3Ch+var_34], edi ; char *
.text:004085CB                 mov     esi, [eax]
.text:004085CD                 mov     [esp+3Ch+Buf], 0 ; Code
.text:004085D4                 mov     [esp+3Ch+Value], esi ; ErrorMessage
.text:004085D8                 call    sub_415D50
.text:004085DD                 mov     eax, 4
.text:004085E2                 jmp     loc_4081E7
.text:004085E7 ; ---------------------------------------------------------------------------
.text:004085E7
.text:004085E7 loc_4085E7:                             ; CODE XREF: sub_4080E0+2C↑j
.text:004085E7                 mov     [esp+3Ch+var_34], 34Bh
.text:004085EF                 mov     [esp+3Ch+Value], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004085F7                 mov     [esp+3Ch+Buf], offset aValidStatusSta_0 ; "VALID_STATUS (status)"
.text:004085FE                 call    _assert
.text:00408603 ; ---------------------------------------------------------------------------
.text:00408603
.text:00408603 loc_408603:                             ; CODE XREF: sub_4080E0+1D2↑j
.text:00408603                                         ; sub_4080E0+1F0↑j ...
.text:00408603                 call    sub_40C060
.text:00408608 ; ---------------------------------------------------------------------------
.text:00408608
.text:00408608 loc_408608:                             ; CODE XREF: sub_4080E0+3DC↑j
.text:00408608                 mov     [esp+3Ch+Value], offset byte_4068F7 ; char *
.text:00408610                 mov     eax, [esp+3Ch+arg_0]
.text:00408614                 mov     [esp+3Ch+Buf], eax ; int
.text:00408617                 call    sub_4076F0
.text:0040861C                 mov     [esp+3Ch+Buf], eax ; char *
.text:0040861F                 call    sub_40BBD0
.text:00408624                 mov     [esp+3Ch+Buf], offset aWarningCircula ; "WARNING: Circular directory structure."...
.text:0040862B                 mov     edi, eax
.text:0040862D                 call    ds:libintl_gettext
.text:00408633                 mov     dword ptr [esp+3Ch+var_30], edi ; char
.text:00408637                 mov     [esp+3Ch+Value], 0 ; ErrorMessage
.text:0040863F                 mov     [esp+3Ch+Buf], 0 ; Code
.text:00408646                 mov     [esp+3Ch+var_34], eax ; char *
.text:0040864A                 call    sub_415D50
.text:0040864F                 mov     [esp+3Ch+Value], 1 ; Value
.text:00408657                 mov     ebp, [esp+3Ch+arg_0]
.text:0040865B                 add     ebp, 0A8h ; '¨'
.text:00408661                 mov     [esp+3Ch+Buf], ebp ; Buf
.text:00408664                 call    longjmp
.text:00408664 sub_4080E0      endp
.text:00408664
.text:00408664 ; ---------------------------------------------------------------------------
.text:00408669                 align 20h
.text:00408680
.text:00408680 loc_408680:                             ; DATA XREF: sub_408710+9D↓o
.text:00408680                 outsd
.text:00408681                 bound   esi, [ebx+74h]
.text:00408684                 popa
.text:00408685                 arpl    [ebx+5Fh], bp
.text:00408688                 outsd
.text:00408689                 bound   ebp, [edx+65h]
.text:0040868C                 arpl    [edi+ebx*2+73h], si
.text:00408690                 imul    edi, [edx+65h], 64262820h
.text:00408697                 jnb     short loc_4086C6
.text:00408699                 db      3Eh
.text:00408699                 insb
.text:0040869B                 outs    dx, byte ptr gs:[esi]
.text:0040869D                 pop     edi
.text:0040869E                 jnb     short loc_408714
.text:004086A0                 popa
.text:004086A1                 arpl    [ebx+29h], bp
.text:004086A4                 and     [esi], bh
.text:004086A6                 cmp     eax, 7A697320h
.text:004086AB                 outs    dx, dword ptr gs:[esi]
.text:004086AD                 db      66h
.text:004086AD                 and     [eax], ch
.text:004086B0                 jnb     short loc_40871B
.text:004086B2                 jp      short near ptr loc_408717+2
.text:004086B4                 pop     edi
.text:004086B5                 jz      short near ptr loc_4086D9+7
.text:004086B7                 add     [eax+26B48Dh], dl
.text:004086B7 ; ---------------------------------------------------------------------------
.text:004086BD                 db 3 dup(0)
.text:004086C0 dword_4086C0    dd 7473626Fh            ; DATA XREF: sub_408710+D4↓o
.text:004086C4                 db 61h, 63h
.text:004086C6 ; ---------------------------------------------------------------------------
.text:004086C6
.text:004086C6 loc_4086C6:                             ; CODE XREF: .text:00408697↑j
.text:004086C6                 imul    ebx, [edi+6Fh], 62h ; 'b'
.text:004086CA                 push    65h ; 'e'
.text:004086CC                 arpl    [edi+ebx*2+73h], si
.text:004086D0                 imul    edi, [edx+65h], 64262820h
.text:004086D7                 jnb     short near ptr loc_408705+1
.text:004086D9
.text:004086D9 loc_4086D9:                             ; CODE XREF: .text:004086B5↑j
.text:004086D9                 db      3Eh
.text:004086D9                 imul    esi, fs:[edx+5Fh], 63617473h
.text:004086E2                 imul    ebp, [ecx], 20h ; ' '
.text:004086E5                 db      3Eh
.text:004086E5                 cmp     eax, 706F7420h
.text:004086EB                 pop     edi
.text:004086EC                 insb
.text:004086ED                 outs    dx, byte ptr gs:[esi]
.text:004086EF                 add     [edi+ebp*2+70h], dh
.text:004086F3                 pop     edi
.text:004086F4                 insb
.text:004086F5                 outs    dx, byte ptr gs:[esi]
.text:004086F7                 and     [esi], bh
.text:004086F9                 cmp     eax, 6E003220h
.text:004086FE                 pop     edi
.text:004086FF                 insb
.text:00408700                 outs    dx, byte ptr gs:[esi]
.text:00408702                 db      67h
.text:00408702                 jz      near ptr loc_40876B+2
.text:00408705
.text:00408705 loc_408705:                             ; CODE XREF: .text:004086D7↑j
.text:00408705                 jnb     short loc_408727
.text:00408707                 db      3Eh
.text:00408707                 and     [eax], dh
.text:0040870A                 add     [eax+26748Dh], dl
.text:00408710
.text:00408710 ; =============== S U B R O U T I N E =======================================
.text:00408710
.text:00408710
.text:00408710 sub_408710      proc near               ; CODE XREF: sub_4078E0+9E↑p
.text:00408710
.text:00408710 var_1C          = dword ptr -1Ch
.text:00408710 var_18          = dword ptr -18h
.text:00408710 var_14          = dword ptr -14h
.text:00408710 arg_0           = dword ptr  4
.text:00408710
.text:00408710                 push    ebp
.text:00408711                 push    edi
.text:00408712                 push    esi
.text:00408713                 push    ebx
.text:00408714
.text:00408714 loc_408714:                             ; CODE XREF: .text:0040869E↑j
.text:00408714                 sub     esp, 0Ch
.text:00408717
.text:00408717 loc_408717:                             ; CODE XREF: .text:004086B2↑j
.text:00408717                 mov     edi, [esp+1Ch+arg_0]
.text:0040871B
.text:0040871B loc_40871B:                             ; CODE XREF: .text:004086B0↑j
.text:0040871B                 lea     esi, [edi+2Ch]
.text:0040871E                 mov     edx, [edi+34h]
.text:00408721                 mov     eax, [esi+0Ch]
.text:00408724                 mov     ebp, [esi+8]
.text:00408727
.text:00408727 loc_408727:                             ; CODE XREF: .text:loc_408705↑j
.text:00408727                 sub     eax, ebp
.text:00408729                 shr     eax, 2
.text:0040872C                 jz      loc_408806
.text:00408732                 mov     edx, [edx+eax*4-4]
.text:00408736                 cmp     edx, 1
.text:00408739                 jbe     loc_4087ED
.text:0040873F                 mov     ecx, [edi+0Ch]
.text:00408742                 mov     ebx, [edi+8]
.text:00408745                 mov     eax, ecx
.text:00408747                 sub     eax, ebx
.text:00408749                 cmp     eax, edx
.text:0040874B                 jb      loc_4087D4
.text:00408751                 mov     ebx, edx
.text:00408753                 mov     edx, [edi+10h]
.text:00408756                 neg     ebx
.text:00408758                 sub     edx, ecx
.text:0040875A                 cmp     edx, ebx
.text:0040875C                 jl      short loc_4087C0
.text:0040875E
.text:0040875E loc_40875E:                             ; CODE XREF: sub_408710+C2↓j
.text:0040875E                 lea     edx, [ebx+ecx]
.text:00408761                 mov     [edi+0Ch], edx
.text:00408764                 mov     edx, [esi+0Ch]
.text:00408767                 mov     ecx, edx
.text:00408769                 sub     ecx, ebp
.text:0040876B
.text:0040876B loc_40876B:                             ; CODE XREF: .text:00408702↑j
.text:0040876B                 cmp     ecx, 3
.text:0040876E                 jbe     short loc_40879D
.text:00408770                 mov     ebx, [esi+10h]
.text:00408773                 sub     ebx, edx
.text:00408775                 cmp     ebx, 0FFFFFFFCh
.text:00408778                 jl      short loc_408788
.text:0040877A
.text:0040877A loc_40877A:                             ; CODE XREF: sub_408710+8B↓j
.text:0040877A                 lea     edi, [edx-4]
.text:0040877D                 mov     [esi+0Ch], edi
.text:00408780                 add     esp, 0Ch
.text:00408783                 pop     ebx
.text:00408784                 pop     esi
.text:00408785                 pop     edi
.text:00408786                 pop     ebp
.text:00408787                 retn
.text:00408788 ; ---------------------------------------------------------------------------
.text:00408788
.text:00408788 loc_408788:                             ; CODE XREF: sub_408710+68↑j
.text:00408788                 mov     [esp+1Ch+var_18], 0FFFFFFFCh
.text:00408790                 mov     [esp+1Ch+var_1C], esi
.text:00408793                 call    sub_41DC90
.text:00408798                 mov     edx, [esi+0Ch]
.text:0040879B                 jmp     short loc_40877A
.text:0040879D ; ---------------------------------------------------------------------------
.text:0040879D
.text:0040879D loc_40879D:                             ; CODE XREF: sub_408710+5E↑j
.text:0040879D                 mov     [esp+1Ch+var_14], 0EBh ; 'ë'
.text:004087A5                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004087AD                 mov     [esp+1Ch+var_1C], offset loc_408680
.text:004087B4
.text:004087B4 loc_4087B4:                             ; CODE XREF: sub_408710+DB↓j
.text:004087B4                                         ; sub_408710+F4↓j ...
.text:004087B4                 call    _assert
.text:004087B4 ; ---------------------------------------------------------------------------
.text:004087B9                 align 10h
.text:004087C0
.text:004087C0 loc_4087C0:                             ; CODE XREF: sub_408710+4C↑j
.text:004087C0                 mov     [esp+1Ch+var_18], ebx
.text:004087C4                 mov     [esp+1Ch+var_1C], edi
.text:004087C7                 call    sub_41DC90
.text:004087CC                 mov     ebp, [esi+8]
.text:004087CF                 mov     ecx, [edi+0Ch]
.text:004087D2                 jmp     short loc_40875E
.text:004087D4 ; ---------------------------------------------------------------------------
.text:004087D4
.text:004087D4 loc_4087D4:                             ; CODE XREF: sub_408710+3B↑j
.text:004087D4                 mov     [esp+1Ch+var_14], 0E7h ; 'ç'
.text:004087DC                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004087E4                 mov     [esp+1Ch+var_1C], offset dword_4086C0
.text:004087EB                 jmp     short loc_4087B4
.text:004087ED ; ---------------------------------------------------------------------------
.text:004087ED
.text:004087ED loc_4087ED:                             ; CODE XREF: sub_408710+29↑j
.text:004087ED                 mov     [esp+1Ch+var_14], 0E4h ; 'ä'
.text:004087F5                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004087FD                 mov     [esp+1Ch+var_1C], 4086F0h
.text:00408804                 jmp     short loc_4087B4
.text:00408806 ; ---------------------------------------------------------------------------
.text:00408806
.text:00408806 loc_408806:                             ; CODE XREF: sub_408710+1C↑j
.text:00408806                 mov     [esp+1Ch+var_14], 0E2h ; 'â'
.text:0040880E                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00408816                 mov     [esp+1Ch+var_1C], 4086FDh
.text:0040881D                 jmp     short loc_4087B4
.text:0040881D sub_408710      endp
.text:0040881D
.text:0040881D ; ---------------------------------------------------------------------------
.text:0040881F                 align 10h
.text:00408820
.text:00408820 ; =============== S U B R O U T I N E =======================================
.text:00408820
.text:00408820
.text:00408820 sub_408820      proc near               ; CODE XREF: sub_406340+150↑p
.text:00408820
.text:00408820 arg_0           = dword ptr  4
.text:00408820
.text:00408820                 mov     edx, [esp+arg_0]
.text:00408824                 mov     dword ptr [edx+10h], 0
.text:0040882B                 mov     dword ptr [edx+14h], 0
.text:00408832                 mov     dword ptr [edx+18h], 95F616h
.text:00408839                 retn
.text:00408839 sub_408820      endp
.text:00408839
.text:00408839 ; ---------------------------------------------------------------------------
.text:0040883A                 align 10h
.text:00408840 aCoreutils530Sr_2 db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:00408840                                         ; DATA XREF: sub_408890+CE↓o
.text:0040886C aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:0040886C                                         ; DATA XREF: sub_408890+D6↓o
.text:00408885                 align 10h
.text:00408890
.text:00408890 ; =============== S U B R O U T I N E =======================================
.text:00408890
.text:00408890
.text:00408890 sub_408890      proc near               ; CODE XREF: sub_4080E0+3D5↑p
.text:00408890
.text:00408890 var_1C          = dword ptr -1Ch
.text:00408890 var_18          = dword ptr -18h
.text:00408890 var_14          = dword ptr -14h
.text:00408890 arg_0           = dword ptr  4
.text:00408890 arg_4           = dword ptr  8
.text:00408890
.text:00408890                 push    ebp
.text:00408891                 push    edi
.text:00408892                 push    esi
.text:00408893                 push    ebx
.text:00408894                 sub     esp, 0Ch
.text:00408897                 mov     edx, [esp+1Ch+arg_0]
.text:0040889B                 cmp     dword ptr [edx+18h], 95F616h
.text:004088A2                 jnz     loc_408956
.text:004088A8                 mov     edx, [esp+1Ch+arg_0]
.text:004088AC                 mov     ebp, [edx+14h]
.text:004088AF                 mov     edi, [edx+10h]
.text:004088B2                 mov     eax, ebp
.text:004088B4                 or      eax, edi
.text:004088B6                 jz      short loc_408900
.text:004088B8                 mov     esi, [esp+1Ch+arg_4]
.text:004088BC                 mov     ecx, [esi+8]
.text:004088BF                 mov     ebx, [esi+0Ch]
.text:004088C2                 mov     esi, [esp+1Ch+arg_0]
.text:004088C6                 mov     eax, [esi]
.text:004088C8                 mov     edx, [esi+4]
.text:004088CB                 mov     esi, ebx
.text:004088CD                 xor     eax, ecx
.text:004088CF                 xor     esi, edx
.text:004088D1                 or      esi, eax
.text:004088D3                 jnz     short loc_408900
.text:004088D5                 mov     edx, [esp+1Ch+arg_4]
.text:004088D9                 mov     esi, [esp+1Ch+arg_0]
.text:004088DD                 mov     ebx, [edx+14h]
.text:004088E0                 mov     ecx, [edx+10h]
.text:004088E3                 mov     eax, [esi+8]
.text:004088E6                 mov     edx, [esi+0Ch]
.text:004088E9                 mov     esi, ebx
.text:004088EB                 xor     eax, ecx
.text:004088ED                 xor     esi, edx
.text:004088EF                 or      esi, eax
.text:004088F1                 mov     edx, 1
.text:004088F6                 jz      short loc_40894C
.text:004088F8                 nop
.text:004088F9                 lea     esi, [esi+0]
.text:00408900
.text:00408900 loc_408900:                             ; CODE XREF: sub_408890+26↑j
.text:00408900                                         ; sub_408890+43↑j
.text:00408900                 mov     ecx, edi
.text:00408902                 mov     ebx, ebp
.text:00408904                 mov     edx, [esp+1Ch+arg_0]
.text:00408908                 add     ecx, 1
.text:0040890B                 mov     esi, ecx
.text:0040890D                 adc     ebx, 0
.text:00408910                 and     esi, edi
.text:00408912                 mov     edi, ebx
.text:00408914                 mov     [edx+10h], ecx
.text:00408917                 and     edi, ebp
.text:00408919                 or      esi, edi
.text:0040891B                 mov     [edx+14h], ebx
.text:0040891E                 jnz     short loc_40894A
.text:00408920                 mov     ebp, ebx
.text:00408922                 mov     edx, 1
.text:00408927                 or      ebp, ecx
.text:00408929                 jz      short loc_40894C
.text:0040892B                 mov     ebp, [esp+1Ch+arg_4]
.text:0040892F                 mov     ebx, [esp+1Ch+arg_0]
.text:00408933                 mov     edx, [ebp+10h]
.text:00408936                 mov     ecx, [ebp+14h]
.text:00408939                 mov     [ebx+8], edx
.text:0040893C                 mov     [ebx+0Ch], ecx
.text:0040893F                 mov     esi, [ebp+8]
.text:00408942                 mov     edi, [ebp+0Ch]
.text:00408945                 mov     [ebx], esi
.text:00408947                 mov     [ebx+4], edi
.text:0040894A
.text:0040894A loc_40894A:                             ; CODE XREF: sub_408890+8E↑j
.text:0040894A                 xor     edx, edx
.text:0040894C
.text:0040894C loc_40894C:                             ; CODE XREF: sub_408890+66↑j
.text:0040894C                                         ; sub_408890+99↑j
.text:0040894C                 add     esp, 0Ch
.text:0040894F                 mov     eax, edx
.text:00408951                 pop     ebx
.text:00408952                 pop     esi
.text:00408953                 pop     edi
.text:00408954                 pop     ebp
.text:00408955                 retn
.text:00408956 ; ---------------------------------------------------------------------------
.text:00408956
.text:00408956 loc_408956:                             ; CODE XREF: sub_408890+12↑j
.text:00408956                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:0040895E                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:00408966                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:0040896D                 call    _assert
.text:0040896D sub_408890      endp
.text:0040896D
.text:0040896D ; ---------------------------------------------------------------------------
.text:00408972                 align 10h
.text:00408980
.text:00408980 loc_408980:                             ; DATA XREF: sub_408A00:loc_408A43↓o
.text:00408980                 ja      short loc_4089E7
.text:00408982                 imul    esi, [edx+64h], 6C696620h
.text:00408989                 add     gs:[ebx+6Fh], dh
.text:0040898D                 arpl    [ebx+65h], bp
.text:00408990                 jz      short $+2
.text:00408992
.text:00408992 loc_408992:                             ; CODE XREF: .text:00408990↑j
.text:00408992                                         ; DATA XREF: sub_408A00:loc_408A63↓o
.text:00408992                 jnb     short near ptr loc_408A09+4
.text:00408994                 insd
.text:00408995                 bound   ebp, [edi+6Ch]
.text:00408998                 imul    esp, [ebx+20h], 6B6E696Ch
.text:0040899F                 add     [esi+69h], ah
.text:004089A2                 outsw
.text:004089A4                 add     [ebx+68h], ah
.text:004089A7                 popa
.text:004089A8                 jb      short near ptr loc_408A09+2
.text:004089AA                 arpl    [ebp+72h], si
.text:004089AE                 and     [ebx+70h], dh
.text:004089B1                 arpl    gs:[ecx+61h], bp
.text:004089B5                 insb
.text:004089B6                 and     [esi+69h], ah
.text:004089B9                 insb
.text:004089BA                 add     gs:[edx+6Ch], ah
.text:004089BE                 outsd
.text:004089BF                 arpl    [ebx+20h], bp
.text:004089C2                 jnb     short near ptr loc_408A33+1
.text:004089C4                 arpl    gs:[ecx+61h], bp
.text:004089C8                 insb
.text:004089C9                 and     [esi+69h], ah
.text:004089CC                 insb
.text:004089CD                 add     gs:[ecx+ebp*2+72h], ah
.text:004089D2                 arpl    gs:[edi+ebp*2+72h], si
.text:004089D7                 jns     short $+2
.text:004089D9
.text:004089D9 loc_4089D9:                             ; CODE XREF: .text:004089D7↑j
.text:004089D9                                         ; DATA XREF: sub_408A00+AC↓o
.text:004089D9                 jb      short near ptr loc_408A3C+4
.text:004089DB                 db      67h
.text:004089DB                 jnz     near ptr loc_408A43+7
.text:004089DE                 popa
.text:004089DF                 jb      short near ptr sub_408A00+1
.text:004089E1                 db      65h
.text:004089E1                 insd
.text:004089E3                 jo      short loc_408A59
.text:004089E5                 jns     short loc_408A07
.text:004089E7
.text:004089E7 loc_4089E7:                             ; CODE XREF: .text:loc_408980↑j
.text:004089E7                 imul    bp, [ebp+0], 6572h
.text:004089EE                 db      67h
.text:004089EE                 jnz     near ptr loc_408A59+4
.text:004089F1                 popa
.text:004089F2                 jb      short near ptr loc_408A13+1
.text:004089F4                 imul    bp, [ebp+0], 0B48Dh
.text:004089FB                 add     es:[eax], al
.text:004089FB ; ---------------------------------------------------------------------------
.text:004089FE                 dw 0
.text:00408A00
.text:00408A00 ; =============== S U B R O U T I N E =======================================
.text:00408A00
.text:00408A00
.text:00408A00 sub_408A00      proc near               ; CODE XREF: sub_407C60+DF↑p
.text:00408A00                                         ; .text:004089DF↑j
.text:00408A00
.text:00408A00 var_C           = dword ptr -0Ch
.text:00408A00 arg_0           = dword ptr  4
.text:00408A00
.text:00408A00                 sub     esp, 0Ch
.text:00408A03                 mov     edx, [esp+0Ch+arg_0]
.text:00408A07
.text:00408A07 loc_408A07:                             ; CODE XREF: .text:004089E5↑j
.text:00408A07                 mov     eax, [edx]
.text:00408A09
.text:00408A09 loc_408A09:                             ; CODE XREF: .text:004089A8↑j
.text:00408A09                                         ; .text:loc_408992↑j
.text:00408A09                 and     eax, 0F000h
.text:00408A0E                 cmp     eax, 8000h
.text:00408A13
.text:00408A13 loc_408A13:                             ; CODE XREF: .text:004089F2↑j
.text:00408A13                 jz      loc_408AA0
.text:00408A19                 cmp     eax, 4000h
.text:00408A1E                 jz      short loc_408A90
.text:00408A20                 cmp     eax, 6000h
.text:00408A25                 jz      short loc_408A81
.text:00408A27                 cmp     eax, 2000h
.text:00408A2C                 jz      short loc_408A77
.text:00408A2E                 cmp     eax, 1000h
.text:00408A33
.text:00408A33 loc_408A33:                             ; CODE XREF: .text:004089C2↑j
.text:00408A33                 jz      short loc_408A6D
.text:00408A35                 cmp     eax, 0A000h
.text:00408A3A                 jz      short loc_408A63
.text:00408A3C
.text:00408A3C loc_408A3C:                             ; CODE XREF: .text:loc_4089D9↑j
.text:00408A3C                 cmp     eax, 0C000h
.text:00408A41                 jz      short loc_408A59
.text:00408A43
.text:00408A43 loc_408A43:                             ; CODE XREF: .text:004089DB↑j
.text:00408A43                 mov     [esp+0Ch+arg_0], offset loc_408980
.text:00408A4B                 nop
.text:00408A4C                 lea     esi, [esi+0]
.text:00408A50
.text:00408A50 loc_408A50:                             ; CODE XREF: sub_408A00+61↓j
.text:00408A50                                         ; sub_408A00+6B↓j ...
.text:00408A50                 add     esp, 0Ch
.text:00408A53                 jmp     ds:libintl_gettext
.text:00408A59 ; ---------------------------------------------------------------------------
.text:00408A59
.text:00408A59 loc_408A59:                             ; CODE XREF: .text:004089E3↑j
.text:00408A59                                         ; sub_408A00+41↑j ...
.text:00408A59                 mov     [esp+0Ch+arg_0], 40898Bh
.text:00408A61                 jmp     short loc_408A50
.text:00408A63 ; ---------------------------------------------------------------------------
.text:00408A63
.text:00408A63 loc_408A63:                             ; CODE XREF: sub_408A00+3A↑j
.text:00408A63                 mov     [esp+0Ch+arg_0], offset loc_408992
.text:00408A6B                 jmp     short loc_408A50
.text:00408A6D ; ---------------------------------------------------------------------------
.text:00408A6D
.text:00408A6D loc_408A6D:                             ; CODE XREF: sub_408A00:loc_408A33↑j
.text:00408A6D                 mov     [esp+0Ch+arg_0], 4089A0h
.text:00408A75                 jmp     short loc_408A50
.text:00408A77 ; ---------------------------------------------------------------------------
.text:00408A77
.text:00408A77 loc_408A77:                             ; CODE XREF: sub_408A00+2C↑j
.text:00408A77                 mov     [esp+0Ch+arg_0], 4089A5h
.text:00408A7F                 jmp     short loc_408A50
.text:00408A81 ; ---------------------------------------------------------------------------
.text:00408A81
.text:00408A81 loc_408A81:                             ; CODE XREF: sub_408A00+25↑j
.text:00408A81                 mov     [esp+0Ch+arg_0], 4089BCh
.text:00408A89                 jmp     short loc_408A50
.text:00408A89 ; ---------------------------------------------------------------------------
.text:00408A8B                 align 10h
.text:00408A90
.text:00408A90 loc_408A90:                             ; CODE XREF: sub_408A00+1E↑j
.text:00408A90                 mov     [esp+0Ch+arg_0], 4089CFh
.text:00408A98                 jmp     short loc_408A50
.text:00408A98 ; ---------------------------------------------------------------------------
.text:00408A9A                 align 10h
.text:00408AA0
.text:00408AA0 loc_408AA0:                             ; CODE XREF: sub_408A00:loc_408A13↑j
.text:00408AA0                 mov     eax, [edx+30h]
.text:00408AA3                 mov     edx, [edx+34h]
.text:00408AA6                 mov     ecx, edx
.text:00408AA8                 or      ecx, eax
.text:00408AAA                 jnz     short loc_408AC0
.text:00408AAC                 mov     [esp+0Ch+var_C], offset loc_4089D9
.text:00408AB3
.text:00408AB3 loc_408AB3:                             ; CODE XREF: sub_408A00+C7↓j
.text:00408AB3                 call    ds:libintl_gettext
.text:00408AB9                 add     esp, 0Ch
.text:00408ABC                 retn
.text:00408ABC ; ---------------------------------------------------------------------------
.text:00408ABD                 align 10h
.text:00408AC0
.text:00408AC0 loc_408AC0:                             ; CODE XREF: sub_408A00+AA↑j
.text:00408AC0                 mov     [esp+0Ch+var_C], 4089ECh
.text:00408AC7                 jmp     short loc_408AB3
.text:00408AC7 sub_408A00      endp
.text:00408AC7
.text:00408AC7 ; ---------------------------------------------------------------------------
.text:00408AC9                 align 10h
.text:00408AD0 ; const char dword_408AD0[]
.text:00408AD0 dword_408AD0    dd 8D007325h, 0B6h, 27BC8D00h, 0
.text:00408AD0                                         ; DATA XREF: sub_408AE0+1FA↓o
.text:00408AD0                                         ; sub_408AE0+225↓o ...
.text:00408AE0
.text:00408AE0 ; =============== S U B R O U T I N E =======================================
.text:00408AE0
.text:00408AE0
.text:00408AE0 ; int __cdecl sub_408AE0(void *, void *)
.text:00408AE0 sub_408AE0      proc near               ; CODE XREF: sub_403270+1182↑p
.text:00408AE0                                         ; sub_405820:loc_405A05↑p ...
.text:00408AE0
.text:00408AE0 Block           = dword ptr -12Ch
.text:00408AE0 ErrorMessage    = dword ptr -128h
.text:00408AE0 var_124         = dword ptr -124h
.text:00408AE0 var_120         = byte ptr -120h
.text:00408AE0 var_111         = byte ptr -111h
.text:00408AE0 var_110         = dword ptr -110h
.text:00408AE0 var_10C         = dword ptr -10Ch
.text:00408AE0 var_107         = byte ptr -107h
.text:00408AE0 var_106         = byte ptr -106h
.text:00408AE0 var_105         = byte ptr -105h
.text:00408AE0 var_104         = dword ptr -104h
.text:00408AE0 var_100         = dword ptr -100h
.text:00408AE0 var_FC          = dword ptr -0FCh
.text:00408AE0 var_F4          = dword ptr -0F4h
.text:00408AE0 var_F0          = dword ptr -0F0h
.text:00408AE0 var_EC          = dword ptr -0ECh
.text:00408AE0 var_E8          = dword ptr -0E8h
.text:00408AE0 var_8C          = dword ptr -8Ch
.text:00408AE0 var_84          = dword ptr -84h
.text:00408AE0 var_80          = dword ptr -80h
.text:00408AE0 var_7C          = dword ptr -7Ch
.text:00408AE0 var_78          = dword ptr -78h
.text:00408AE0 arg_0           = dword ptr  4
.text:00408AE0 arg_4           = dword ptr  8
.text:00408AE0
.text:00408AE0                 push    ebp
.text:00408AE1                 push    edi
.text:00408AE2                 push    esi
.text:00408AE3                 push    ebx
.text:00408AE4                 sub     esp, 11Ch
.text:00408AEA                 mov     ecx, [esp+12Ch+arg_0]
.text:00408AF1                 mov     [esp+12Ch+Block], ecx
.text:00408AF4                 call    sub_40BC00
.text:00408AF9                 mov     [esp+12Ch+var_100], eax
.text:00408AFD                 mov     eax, [esp+12Ch+arg_4]
.text:00408B04                 mov     [esp+12Ch+Block], eax
.text:00408B07                 call    sub_40BC00
.text:00408B0C                 mov     [esp+12Ch+var_104], eax
.text:00408B10                 mov     edx, [esp+12Ch+var_100]
.text:00408B14                 mov     [esp+12Ch+Block], edx ; char *
.text:00408B17                 call    sub_40BC60
.text:00408B1C                 mov     ebx, eax
.text:00408B1E                 mov     eax, [esp+12Ch+var_104]
.text:00408B22                 mov     [esp+12Ch+Block], eax ; char *
.text:00408B25                 call    sub_40BC60
.text:00408B2A                 mov     [esp+12Ch+var_105], 0
.text:00408B2F                 cmp     ebx, eax
.text:00408B31                 mov     ebp, eax
.text:00408B33                 jz      loc_408D58
.text:00408B39
.text:00408B39 loc_408B39:                             ; CODE XREF: sub_408AE0+287↓j
.text:00408B39                                         ; sub_408AE0+292↓j
.text:00408B39                 movzx   edx, [esp+12Ch+var_105]
.text:00408B3E                 cmp     ebp, ebx
.text:00408B40                 mov     [esp+12Ch+var_107], 0
.text:00408B45                 mov     eax, 0FFh
.text:00408B4A                 mov     [esp+12Ch+var_106], dl
.text:00408B4E                 jbe     short loc_408B52
.text:00408B50                 mov     ebp, ebx
.text:00408B52
.text:00408B52 loc_408B52:                             ; CODE XREF: sub_408AE0+6E↑j
.text:00408B52                 cmp     eax, ebp
.text:00408B54                 ja      short loc_408B80
.text:00408B56                 cld
.text:00408B57                 mov     esi, [esp+12Ch+var_100]
.text:00408B5B                 mov     ecx, 0FFh
.text:00408B60                 mov     edi, [esp+12Ch+var_104]
.text:00408B64                 cmp     eax, 0FFh
.text:00408B69                 repe cmpsb
.text:00408B6B                 jnz     short loc_408B80
.text:00408B6D                 mov     [esp+12Ch+var_106], 1
.text:00408B72                 lea     esi, [esi+0]
.text:00408B79                 lea     edi, [edi+0]
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: sub_408AE0+74↑j
.text:00408B80                                         ; sub_408AE0+8B↑j
.text:00408B80                 cmp     [esp+12Ch+var_106], 0
.text:00408B85                 jnz     short loc_408B97
.text:00408B87
.text:00408B87 loc_408B87:                             ; CODE XREF: sub_408AE0+19C↓j
.text:00408B87                 movzx   eax, [esp+12Ch+var_107]
.text:00408B8C                 add     esp, 11Ch
.text:00408B92                 pop     ebx
.text:00408B93                 pop     esi
.text:00408B94                 pop     edi
.text:00408B95                 pop     ebp
.text:00408B96                 retn
.text:00408B97 ; ---------------------------------------------------------------------------
.text:00408B97
.text:00408B97 loc_408B97:                             ; CODE XREF: sub_408AE0+A5↑j
.text:00408B97                 mov     eax, [esp+12Ch+arg_0]
.text:00408B9E                 lea     esi, [esp+12Ch+var_8C]
.text:00408BA5                 mov     [esp+12Ch+Block], eax ; void *
.text:00408BA8                 call    sub_40BEA0
.text:00408BAD                 mov     [esp+12Ch+var_10C], eax
.text:00408BB1                 mov     edi, [esp+12Ch+arg_4]
.text:00408BB8                 mov     [esp+12Ch+Block], edi ; void *
.text:00408BBB                 call    sub_40BEA0
.text:00408BC0                 mov     [esp+12Ch+var_110], eax
.text:00408BC4                 mov     ebx, [esp+12Ch+var_10C]
.text:00408BC8                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00408BCC                 mov     [esp+12Ch+Block], ebx ; char *
.text:00408BCF                 call    sub_419540
.text:00408BD4                 test    eax, eax
.text:00408BD6                 jnz     loc_408D2C
.text:00408BDC
.text:00408BDC loc_408BDC:                             ; CODE XREF: sub_408AE0+273↓j
.text:00408BDC                 mov     edx, [esp+12Ch+var_110]
.text:00408BE0                 lea     esi, [esp+12Ch+var_FC]
.text:00408BE4                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00408BE8                 mov     [esp+12Ch+Block], edx ; char *
.text:00408BEB                 call    sub_419540
.text:00408BF0                 test    eax, eax
.text:00408BF2                 jnz     loc_408D00
.text:00408BF8
.text:00408BF8 loc_408BF8:                             ; CODE XREF: sub_408AE0+247↓j
.text:00408BF8                 mov     [esp+12Ch+var_111], 0
.text:00408BFD                 mov     edx, [esp+12Ch+var_80]
.text:00408C04                 mov     esi, [esp+12Ch+var_84]
.text:00408C0B                 mov     edi, [esp+12Ch+var_F4]
.text:00408C0F                 mov     ecx, [esp+12Ch+var_F0]
.text:00408C13                 mov     eax, edx
.text:00408C15                 xor     edi, esi
.text:00408C17                 xor     eax, ecx
.text:00408C19                 or      eax, edi
.text:00408C1B                 jnz     short loc_408C50
.text:00408C1D                 mov     edx, [esp+12Ch+var_78]
.text:00408C24                 mov     esi, [esp+12Ch+var_7C]
.text:00408C2B                 mov     edi, [esp+12Ch+var_EC]
.text:00408C2F                 mov     ecx, [esp+12Ch+var_E8]
.text:00408C33                 mov     eax, edx
.text:00408C35                 xor     edi, esi
.text:00408C37                 xor     eax, ecx
.text:00408C39                 or      eax, edi
.text:00408C3B                 jnz     short loc_408C50
.text:00408C3D                 mov     [esp+12Ch+var_111], 1
.text:00408C42                 lea     esi, [esi+0]
.text:00408C49                 lea     edi, [edi+0]
.text:00408C50
.text:00408C50 loc_408C50:                             ; CODE XREF: sub_408AE0+13B↑j
.text:00408C50                                         ; sub_408AE0+15B↑j
.text:00408C50                 movzx   ebx, [esp+12Ch+var_111]
.text:00408C55                 test    bl, bl
.text:00408C57                 mov     [esp+12Ch+var_107], bl
.text:00408C5B                 jz      short loc_408C64
.text:00408C5D                 cmp     [esp+12Ch+var_105], 0
.text:00408C62                 jz      short loc_408C81
.text:00408C64
.text:00408C64 loc_408C64:                             ; CODE XREF: sub_408AE0+17B↑j
.text:00408C64                                         ; sub_408AE0+1E1↓j ...
.text:00408C64                 mov     edx, [esp+12Ch+var_10C]
.text:00408C68                 mov     [esp+12Ch+Block], edx ; Block
.text:00408C6B                 call    free
.text:00408C70                 mov     eax, [esp+12Ch+var_110]
.text:00408C74                 mov     [esp+12Ch+Block], eax ; Block
.text:00408C77                 call    free
.text:00408C7C                 jmp     loc_408B87
.text:00408C81 ; ---------------------------------------------------------------------------
.text:00408C81
.text:00408C81 loc_408C81:                             ; CODE XREF: sub_408AE0+182↑j
.text:00408C81                 call    _errno
.text:00408C86                 mov     dword ptr [eax], 0
.text:00408C8C                 mov     edi, [esp+12Ch+var_110]
.text:00408C90                 mov     [esp+12Ch+ErrorMessage], 3
.text:00408C98                 mov     [esp+12Ch+Block], edi
.text:00408C9B                 call    sub_41A7E0
.text:00408CA0                 test    eax, eax
.text:00408CA2                 js      short loc_408CC3
.text:00408CA4                 xor     ebx, ebx
.text:00408CA6                 cmp     eax, ebp
.text:00408CA8                 ja      short loc_408CBD
.text:00408CAA                 cld
.text:00408CAB                 mov     esi, [esp+12Ch+var_100]
.text:00408CAF                 cmp     eax, eax
.text:00408CB1                 mov     edi, [esp+12Ch+var_104]
.text:00408CB5                 mov     ecx, eax
.text:00408CB7                 repe cmpsb
.text:00408CB9                 jnz     short loc_408CBD
.text:00408CBB                 mov     bl, 1
.text:00408CBD
.text:00408CBD loc_408CBD:                             ; CODE XREF: sub_408AE0+1C8↑j
.text:00408CBD                                         ; sub_408AE0+1D9↑j
.text:00408CBD                 mov     [esp+12Ch+var_107], bl
.text:00408CC1                 jmp     short loc_408C64
.text:00408CC3 ; ---------------------------------------------------------------------------
.text:00408CC3
.text:00408CC3 loc_408CC3:                             ; CODE XREF: sub_408AE0+1C2↑j
.text:00408CC3                 call    _errno
.text:00408CC8                 mov     ebp, [eax]
.text:00408CCA                 test    ebp, ebp
.text:00408CCC                 jnz     short loc_408CD5
.text:00408CCE
.text:00408CCE loc_408CCE:                             ; CODE XREF: sub_408AE0+21C↓j
.text:00408CCE                 mov     [esp+12Ch+var_107], 0
.text:00408CD3                 jmp     short loc_408C64
.text:00408CD5 ; ---------------------------------------------------------------------------
.text:00408CD5
.text:00408CD5 loc_408CD5:                             ; CODE XREF: sub_408AE0+1EC↑j
.text:00408CD5                 call    _errno
.text:00408CDA                 mov     [esp+12Ch+var_124], offset dword_408AD0 ; char *
.text:00408CE2                 mov     ecx, [esp+12Ch+var_110]
.text:00408CE6                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00408CEA                 mov     esi, [eax]
.text:00408CEC                 mov     [esp+12Ch+Block], 1 ; Code
.text:00408CF3                 mov     [esp+12Ch+ErrorMessage], esi ; ErrorMessage
.text:00408CF7                 call    sub_415D50
.text:00408CFC                 jmp     short loc_408CCE
.text:00408CFC ; ---------------------------------------------------------------------------
.text:00408CFE                 align 10h
.text:00408D00
.text:00408D00 loc_408D00:                             ; CODE XREF: sub_408AE0+112↑j
.text:00408D00                 call    _errno
.text:00408D05                 mov     [esp+12Ch+var_124], offset dword_408AD0 ; char *
.text:00408D0D                 mov     ecx, [esp+12Ch+var_110]
.text:00408D11                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00408D15                 mov     edi, [eax]
.text:00408D17                 mov     [esp+12Ch+Block], 1 ; Code
.text:00408D1E                 mov     [esp+12Ch+ErrorMessage], edi ; ErrorMessage
.text:00408D22                 call    sub_415D50
.text:00408D27                 jmp     loc_408BF8
.text:00408D2C ; ---------------------------------------------------------------------------
.text:00408D2C
.text:00408D2C loc_408D2C:                             ; CODE XREF: sub_408AE0+F6↑j
.text:00408D2C                 call    _errno
.text:00408D31                 mov     [esp+12Ch+var_124], offset dword_408AD0 ; char *
.text:00408D39                 mov     ebx, [esp+12Ch+var_10C]
.text:00408D3D                 mov     dword ptr [esp+12Ch+var_120], ebx ; char
.text:00408D41                 mov     ecx, [eax]
.text:00408D43                 mov     [esp+12Ch+Block], 1 ; Code
.text:00408D4A                 mov     [esp+12Ch+ErrorMessage], ecx ; ErrorMessage
.text:00408D4E                 call    sub_415D50
.text:00408D53                 jmp     loc_408BDC
.text:00408D58 ; ---------------------------------------------------------------------------
.text:00408D58
.text:00408D58 loc_408D58:                             ; CODE XREF: sub_408AE0+53↑j
.text:00408D58                 cld
.text:00408D59                 mov     esi, [esp+12Ch+var_100]
.text:00408D5D                 cmp     ebx, ebx
.text:00408D5F                 mov     edi, [esp+12Ch+var_104]
.text:00408D63                 mov     ecx, ebx
.text:00408D65                 repe cmpsb
.text:00408D67                 jnz     loc_408B39
.text:00408D6D                 mov     [esp+12Ch+var_105], 1
.text:00408D72                 jmp     loc_408B39
.text:00408D72 sub_408AE0      endp
.text:00408D72
.text:00408D72 ; ---------------------------------------------------------------------------
.text:00408D77                 align 10h
.text:00408D80
.text:00408D80 ; =============== S U B R O U T I N E =======================================
.text:00408D80
.text:00408D80
.text:00408D80 ; int __cdecl sub_408D80(char *, int, int, char)
.text:00408D80 sub_408D80      proc near               ; CODE XREF: sub_403270+145A↑p
.text:00408D80
.text:00408D80 var_FC          = dword ptr -0FCh
.text:00408D80 var_F8          = dword ptr -0F8h
.text:00408D80 var_F4          = dword ptr -0F4h
.text:00408D80 var_F0          = dword ptr -0F0h
.text:00408D80 var_EC          = dword ptr -0ECh
.text:00408D80 var_D4          = dword ptr -0D4h
.text:00408D80 var_D0          = dword ptr -0D0h
.text:00408D80 var_C4          = dword ptr -0C4h
.text:00408D80 var_BD          = byte ptr -0BDh
.text:00408D80 var_BC          = dword ptr -0BCh
.text:00408D80 var_B8          = dword ptr -0B8h
.text:00408D80 var_B4          = dword ptr -0B4h
.text:00408D80 var_B0          = dword ptr -0B0h
.text:00408D80 var_AC          = dword ptr -0ACh
.text:00408D80 var_A8          = dword ptr -0A8h
.text:00408D80 var_A4          = dword ptr -0A4h
.text:00408D80 var_A0          = dword ptr -0A0h
.text:00408D80 var_9C          = dword ptr -9Ch
.text:00408D80 var_5C          = dword ptr -5Ch
.text:00408D80 var_58          = dword ptr -58h
.text:00408D80 var_2C          = dword ptr -2Ch
.text:00408D80 var_28          = dword ptr -28h
.text:00408D80 var_24          = dword ptr -24h
.text:00408D80 var_20          = dword ptr -20h
.text:00408D80 arg_0           = dword ptr  4
.text:00408D80 arg_4           = dword ptr  8
.text:00408D80 arg_8           = dword ptr  0Ch
.text:00408D80 arg_C           = byte ptr  10h
.text:00408D80
.text:00408D80                 push    ebp
.text:00408D81                 push    edi
.text:00408D82                 push    esi
.text:00408D83                 push    ebx
.text:00408D84                 sub     esp, 0ECh
.text:00408D8A                 mov     esi, [esp+0FCh+arg_8]
.text:00408D91                 test    [esp+0FCh+arg_C], 1
.text:00408D99                 mov     edx, [esp+0FCh+arg_4]
.text:00408DA0                 mov     edi, [esp+0FCh+arg_4]
.text:00408DA7                 mov     ebx, [esi+40h]
.text:00408DAA                 mov     eax, [edx+44h]
.text:00408DAD                 mov     ecx, [edi+40h]
.text:00408DB0                 mov     [esp+0FCh+var_A4], ebx
.text:00408DB4                 mov     edx, [esi+44h]
.text:00408DB7                 mov     [esp+0FCh+var_A8], eax
.text:00408DBB                 mov     [esp+0FCh+var_A0], ecx
.text:00408DBF                 mov     [esp+0FCh+var_AC], edx
.text:00408DC3                 jz      loc_409186
.text:00408DC9                 mov     ebp, ds:dword_422270
.text:00408DCF                 test    ebp, ebp
.text:00408DD1                 jz      loc_409283
.text:00408DD7
.text:00408DD7 loc_408DD7:                             ; CODE XREF: sub_408D80+534↓j
.text:00408DD7                 mov     ecx, ds:dword_422280
.text:00408DDD                 test    ecx, ecx
.text:00408DDF                 jz      loc_409260
.text:00408DE5
.text:00408DE5 loc_408DE5:                             ; CODE XREF: sub_408D80+4FE↓j
.text:00408DE5                 mov     eax, [esp+0FCh+arg_4]
.text:00408DEC                 mov     esi, ds:dword_422270
.text:00408DF2                 mov     edx, [eax+10h]
.text:00408DF5                 mov     edi, [eax+14h]
.text:00408DF8                 mov     [ecx], edx
.text:00408DFA                 mov     [ecx+4], edi
.text:00408DFD                 mov     [esp+0FCh+var_F8], ecx
.text:00408E01                 mov     [esp+0FCh+var_FC], esi
.text:00408E04                 call    sub_40C620
.text:00408E09                 mov     [esp+0FCh+var_B0], eax
.text:00408E0D                 test    eax, eax
.text:00408E0F                 jz      loc_4092B9
.text:00408E15                 mov     ebx, [esp+0FCh+var_B0]
.text:00408E19                 cmp     ebx, ds:dword_422280
.text:00408E1F                 jz      loc_40924C
.text:00408E25
.text:00408E25 loc_408E25:                             ; CODE XREF: sub_408D80+4D4↓j
.text:00408E25                 mov     ebp, [esp+0FCh+var_B0]
.text:00408E29                 mov     edi, [esp+0FCh+var_B0]
.text:00408E2D                 cmp     byte ptr [ebp+0Ch], 0
.text:00408E31                 mov     esi, [edi+8]
.text:00408E34                 mov     [esp+0FCh+var_B4], esi
.text:00408E38                 mov     [esp+0FCh+var_C4], esi
.text:00408E3C                 jnz     loc_40916F
.text:00408E42                 mov     [esp+0FCh+var_B4], 3E8h
.text:00408E4A                 mov     esi, [esp+0FCh+arg_4]
.text:00408E51                 mov     edx, [esp+0FCh+arg_4]
.text:00408E58                 mov     eax, [esp+0FCh+var_A0]
.text:00408E5C                 mov     edi, [esi+3Ch]
.text:00408E5F                 mov     esi, [esp+0FCh+arg_4]
.text:00408E66                 mov     ecx, [edx+38h]
.text:00408E69                 mov     [esp+0FCh+var_BC], edi
.text:00408E6D                 mov     ebp, [esi+48h]
.text:00408E70                 mov     edx, ecx
.text:00408E72                 mov     [esp+0FCh+var_B8], ecx
.text:00408E76                 mov     edi, [esi+4Ch]
.text:00408E79                 or      edx, ebp
.text:00408E7B                 or      edx, eax
.text:00408E7D                 mov     ecx, 2710h
.text:00408E82                 mov     eax, [esp+0FCh+var_BC]
.text:00408E86                 and     dl, 1
.text:00408E89                 mov     [esp+0FCh+var_BD], dl
.text:00408E8D                 cdq
.text:00408E8E                 idiv    ecx
.text:00408E90                 mov     esi, eax
.text:00408E92                 mov     ebp, edx
.text:00408E94                 mov     eax, edi
.text:00408E96                 cdq
.text:00408E97                 idiv    ecx
.text:00408E99                 mov     ebx, eax
.text:00408E9B                 or      ebp, edx
.text:00408E9D                 mov     eax, [esp+0FCh+var_A8]
.text:00408EA1                 cdq
.text:00408EA2                 idiv    ecx
.text:00408EA4                 or      ebp, edx
.text:00408EA6                 jnz     loc_408F70
.text:00408EAC                 mov     [esp+0FCh+var_B4], 2710h
.text:00408EB4                 mov     ecx, esi
.text:00408EB6                 mov     ebp, eax
.text:00408EB8                 nop
.text:00408EB9                 lea     esi, [esi+0]
.text:00408EC0
.text:00408EC0 loc_408EC0:                             ; CODE XREF: sub_408D80+1CF↓j
.text:00408EC0                 mov     edi, [esp+0FCh+var_C4]
.text:00408EC4                 cmp     [esp+0FCh+var_B4], edi
.text:00408EC8                 jge     loc_408F70
.text:00408ECE                 mov     eax, 66666667h
.text:00408ED3                 imul    ecx
.text:00408ED5                 mov     eax, 66666667h
.text:00408EDA                 mov     edi, edx
.text:00408EDC                 mov     edx, ecx
.text:00408EDE                 sar     edi, 2
.text:00408EE1                 sar     edx, 1Fh
.text:00408EE4                 sub     edi, edx
.text:00408EE6                 imul    ebx
.text:00408EE8                 lea     esi, [edi+edi*4]
.text:00408EEB                 mov     eax, 66666667h
.text:00408EF0                 add     esi, esi
.text:00408EF2                 sub     ecx, esi
.text:00408EF4                 mov     [esp+0FCh+var_D0], edx
.text:00408EF8                 mov     esi, [esp+0FCh+var_D0]
.text:00408EFC                 mov     edx, ebx
.text:00408EFE                 sar     edx, 1Fh
.text:00408F01                 sar     esi, 2
.text:00408F04                 sub     esi, edx
.text:00408F06                 lea     edx, [esi+esi*4]
.text:00408F09                 add     edx, edx
.text:00408F0B                 sub     ebx, edx
.text:00408F0D                 imul    ebp
.text:00408F0F                 or      ecx, ebx
.text:00408F11                 mov     ebx, ebp
.text:00408F13                 sar     ebx, 1Fh
.text:00408F16                 mov     [esp+0FCh+var_D0], edx
.text:00408F1A                 mov     edx, [esp+0FCh+var_D0]
.text:00408F1E                 mov     [esp+0FCh+var_D4], eax
.text:00408F22                 sar     edx, 2
.text:00408F25                 sub     edx, ebx
.text:00408F27                 lea     ebx, [edx+edx*4]
.text:00408F2A                 add     ebx, ebx
.text:00408F2C                 sub     ebp, ebx
.text:00408F2E                 or      ecx, ebp
.text:00408F30                 jnz     short loc_408F70
.text:00408F32                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:00408F3A                 jz      short loc_408F54
.text:00408F3C                 mov     eax, [esp+0FCh+var_B4]
.text:00408F40                 mov     ecx, edi
.text:00408F42                 mov     ebp, edx
.text:00408F44                 lea     ebx, [eax+eax*4]
.text:00408F47                 add     ebx, ebx
.text:00408F49                 mov     [esp+0FCh+var_B4], ebx
.text:00408F4D                 mov     ebx, esi
.text:00408F4F                 jmp     loc_408EC0
.text:00408F54 ; ---------------------------------------------------------------------------
.text:00408F54
.text:00408F54 loc_408F54:                             ; CODE XREF: sub_408D80+1BA↑j
.text:00408F54                 cmp     [esp+0FCh+var_BD], 0
.text:00408F59                 jnz     short loc_408F70
.text:00408F5B                 mov     [esp+0FCh+var_B4], 77359400h
.text:00408F63                 lea     esi, [esi+0]
.text:00408F69                 lea     edi, [edi+0]
.text:00408F70
.text:00408F70 loc_408F70:                             ; CODE XREF: sub_408D80+126↑j
.text:00408F70                                         ; sub_408D80+148↑j ...
.text:00408F70                 mov     ebp, [esp+0FCh+var_B4]
.text:00408F74                 mov     eax, [esp+0FCh+var_B0]
.text:00408F78                 cmp     ebp, 3E8h
.text:00408F7E                 mov     [eax+8], ebp
.text:00408F81                 jle     loc_409160
.text:00408F87                 mov     eax, 10624DD3h
.text:00408F8C                 mov     ecx, [esp+0FCh+var_AC]
.text:00408F90                 imul    [esp+0FCh+var_AC]
.text:00408F94                 mov     eax, [esp+0FCh+var_A4]
.text:00408F98                 sar     ecx, 1Fh
.text:00408F9B                 sar     edx, 6
.text:00408F9E                 sub     edx, ecx
.text:00408FA0                 imul    edx, 3E8h
.text:00408FA6                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00408FAE                 mov     [esp+0FCh+var_AC], edx
.text:00408FB2                 jz      loc_409244
.text:00408FB8
.text:00408FB8 loc_408FB8:                             ; CODE XREF: sub_408D80+4C7↓j
.text:00408FB8                 mov     ebx, [esp+0FCh+var_A0]
.text:00408FBC                 cmp     [esp+0FCh+var_A4], ebx
.text:00408FC0                 jl      loc_40923A
.text:00408FC6                 cmp     [esp+0FCh+var_A4], ebx
.text:00408FCA                 jz      loc_40922C
.text:00408FD0
.text:00408FD0 loc_408FD0:                             ; CODE XREF: sub_408D80+4B4↓j
.text:00408FD0                 cmp     [esp+0FCh+var_A0], eax
.text:00408FD4                 jl      loc_409222
.text:00408FDA                 cmp     [esp+0FCh+var_A0], eax
.text:00408FDE                 jz      loc_409209
.text:00408FE4
.text:00408FE4 loc_408FE4:                             ; CODE XREF: sub_408D80+49C↓j
.text:00408FE4                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00408FEC                 mov     ebp, [esp+0FCh+var_B8]
.text:00408FF0                 mov     esi, [esp+0FCh+var_BC]
.text:00408FF4                 mov     eax, [esp+0FCh+var_A0]
.text:00408FF8                 mov     [esp+0FCh+var_2C], ebp
.text:00408FFF                 mov     [esp+0FCh+var_28], esi
.text:00409006                 jz      loc_409201
.text:0040900C
.text:0040900C loc_40900C:                             ; CODE XREF: sub_408D80+484↓j
.text:0040900C                 mov     [esp+0FCh+var_24], eax
.text:00409013                 mov     esi, 38E38E39h
.text:00409018                 mov     ebx, [esp+0FCh+var_B4]
.text:0040901C                 mov     eax, [esp+0FCh+var_B4]
.text:00409020                 mov     edi, [esp+0FCh+var_A8]
.text:00409024                 sar     ebx, 1Fh
.text:00409027                 imul    esi
.text:00409029                 mov     eax, [esp+0FCh+arg_4]
.text:00409030                 mov     ecx, [eax]
.text:00409032                 sar     edx, 1
.text:00409034                 sub     edx, ebx
.text:00409036                 and     ecx, 0F000h
.text:0040903C                 add     edx, edi
.text:0040903E                 cmp     ecx, 0A000h
.text:00409044                 mov     [esp+0FCh+var_20], edx
.text:0040904B                 jz      short loc_40906B
.text:0040904D                 mov     edx, [esp+0FCh+arg_0]
.text:00409054                 lea     esi, [esp+0FCh+var_2C]
.text:0040905B                 mov     [esp+0FCh+var_F8], esi ; int
.text:0040905F                 mov     [esp+0FCh+var_FC], edx ; char *
.text:00409062                 call    sub_40BD60
.text:00409067                 test    eax, eax
.text:00409069                 jz      short loc_40907B
.text:0040906B
.text:0040906B loc_40906B:                             ; CODE XREF: sub_408D80+2CB↑j
.text:0040906B                 mov     eax, 0FFFFFFFEh
.text:00409070
.text:00409070 loc_409070:                             ; CODE XREF: sub_408D80+33F↓j
.text:00409070                                         ; sub_408D80+413↓j ...
.text:00409070                 add     esp, 0ECh
.text:00409076                 pop     ebx
.text:00409077                 pop     esi
.text:00409078                 pop     edi
.text:00409079                 pop     ebp
.text:0040907A                 retn
.text:0040907B ; ---------------------------------------------------------------------------
.text:0040907B
.text:0040907B loc_40907B:                             ; CODE XREF: sub_408D80+2E9↑j
.text:0040907B                 mov     edi, [esp+0FCh+arg_0]
.text:00409082                 lea     ebx, [esp+0FCh+var_9C]
.text:00409086                 mov     [esp+0FCh+var_F8], ebx ; int
.text:0040908A                 mov     [esp+0FCh+var_FC], edi ; char *
.text:0040908D                 call    sub_419540
.text:00409092                 mov     edx, [esp+0FCh+var_A0]
.text:00409096                 mov     ebx, eax
.text:00409098                 mov     ecx, [esp+0FCh+var_5C]
.text:0040909F                 mov     ebp, [esp+0FCh+var_A8]
.text:004090A3                 xor     edx, ecx
.text:004090A5                 or      edx, eax
.text:004090A7                 mov     eax, [esp+0FCh+var_58]
.text:004090AE                 xor     ebp, eax
.text:004090B0                 or      edx, ebp
.text:004090B2                 jnz     loc_4091D3
.text:004090B8
.text:004090B8 loc_4090B8:                             ; CODE XREF: sub_408D80+47C↓j
.text:004090B8                 test    ebx, ebx
.text:004090BA                 mov     eax, 0FFFFFFFEh
.text:004090BF                 jnz     short loc_409070
.text:004090C1                 mov     ebx, [esp+0FCh+var_5C]
.text:004090C8                 mov     ecx, [esp+0FCh+var_58]
.text:004090CF                 mov     esi, [esp+0FCh+var_B4]
.text:004090D3                 mov     [esp+0FCh+var_B4], 3E8h
.text:004090DB                 and     ebx, 1
.text:004090DE                 imul    ebx, 3B9ACA00h
.text:004090E4                 add     ebx, ecx
.text:004090E6                 mov     eax, ebx
.text:004090E8                 cdq
.text:004090E9                 idiv    [esp+0FCh+var_B4]
.text:004090ED                 mov     ecx, eax
.text:004090EF                 mov     eax, 66666667h
.text:004090F4                 imul    ecx
.text:004090F6                 mov     eax, ecx
.text:004090F8                 mov     ebp, edx
.text:004090FA                 sar     ebp, 2
.text:004090FD                 cdq
.text:004090FE                 sub     ebp, edx
.text:00409100                 lea     edi, [ebp+ebp*4+0]
.text:00409104                 add     edi, edi
.text:00409106                 cmp     ecx, edi
.text:00409108                 jz      short loc_409160
.text:0040910A                 mov     ebx, 66666667h
.text:0040910F
.text:0040910F loc_40910F:                             ; CODE XREF: sub_408D80+3D3↓j
.text:0040910F                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:00409117                 jz      loc_4091C9
.text:0040911D                 mov     eax, [esp+0FCh+var_B4]
.text:00409121                 lea     edi, [eax+eax*4]
.text:00409124                 add     edi, edi
.text:00409126                 mov     [esp+0FCh+var_B4], edi
.text:0040912A                 cmp     edi, esi
.text:0040912C                 jz      short loc_409160
.text:0040912E                 mov     eax, ecx
.text:00409130                 mov     ebp, ecx
.text:00409132                 sar     ebp, 1Fh
.text:00409135                 imul    ebx
.text:00409137                 sar     edx, 2
.text:0040913A                 sub     edx, ebp
.text:0040913C                 mov     eax, edx
.text:0040913E                 mov     ecx, edx
.text:00409140                 imul    ebx
.text:00409142                 mov     eax, ecx
.text:00409144                 mov     edi, edx
.text:00409146                 sar     edi, 2
.text:00409149                 cdq
.text:0040914A                 sub     edi, edx
.text:0040914C                 lea     edx, [edi+edi*4]
.text:0040914F                 add     edx, edx
.text:00409151                 cmp     ecx, edx
.text:00409153                 jnz     short loc_40910F
.text:00409155                 lea     esi, [esi+0]
.text:00409159                 lea     edi, [edi+0]
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: sub_408D80+201↑j
.text:00409160                                         ; sub_408D80+388↑j ...
.text:00409160                 mov     esi, [esp+0FCh+var_B0]
.text:00409164                 mov     ebx, [esp+0FCh+var_B4]
.text:00409168                 mov     byte ptr [esi+0Ch], 1
.text:0040916C                 mov     [esi+8], ebx
.text:0040916F
.text:0040916F loc_40916F:                             ; CODE XREF: sub_408D80+BC↑j
.text:0040916F                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00409177                 jz      short loc_4091C2
.text:00409179
.text:00409179 loc_409179:                             ; CODE XREF: sub_408D80+447↓j
.text:00409179                 mov     eax, [esp+0FCh+var_AC]
.text:0040917D                 cdq
.text:0040917E                 idiv    [esp+0FCh+var_B4]
.text:00409182                 sub     [esp+0FCh+var_AC], edx
.text:00409186
.text:00409186 loc_409186:                             ; CODE XREF: sub_408D80+43↑j
.text:00409186                 mov     ecx, [esp+0FCh+var_A4]
.text:0040918A                 mov     eax, 0FFFFFFFFh
.text:0040918F                 cmp     [esp+0FCh+var_A0], ecx
.text:00409193                 jl      loc_409070
.text:00409199                 mov     eax, 1
.text:0040919E                 jg      loc_409070
.text:004091A4                 mov     edi, [esp+0FCh+var_AC]
.text:004091A8                 mov     eax, 0FFFFFFFFh
.text:004091AD                 cmp     [esp+0FCh+var_A8], edi
.text:004091B1                 jl      loc_409070
.text:004091B7                 setnle  dl
.text:004091BA                 movzx   eax, dl
.text:004091BD                 jmp     loc_409070
.text:004091C2 ; ---------------------------------------------------------------------------
.text:004091C2
.text:004091C2 loc_4091C2:                             ; CODE XREF: sub_408D80+3F7↑j
.text:004091C2                 and     [esp+0FCh+var_A4], 0FFFFFFFEh
.text:004091C7                 jmp     short loc_409179
.text:004091C9 ; ---------------------------------------------------------------------------
.text:004091C9
.text:004091C9 loc_4091C9:                             ; CODE XREF: sub_408D80+397↑j
.text:004091C9                 mov     [esp+0FCh+var_B4], 77359400h
.text:004091D1                 jmp     short loc_409160
.text:004091D3 ; ---------------------------------------------------------------------------
.text:004091D3
.text:004091D3 loc_4091D3:                             ; CODE XREF: sub_408D80+332↑j
.text:004091D3                 mov     [esp+0FCh+var_F8], esi ; int
.text:004091D7                 mov     edx, [esp+0FCh+var_A0]
.text:004091DB                 mov     ebp, [esp+0FCh+var_A8]
.text:004091DF                 mov     esi, [esp+0FCh+arg_0]
.text:004091E6                 mov     [esp+0FCh+var_24], edx
.text:004091ED                 mov     [esp+0FCh+var_20], ebp
.text:004091F4                 mov     [esp+0FCh+var_FC], esi ; char *
.text:004091F7                 call    sub_40BD60
.text:004091FC                 jmp     loc_4090B8
.text:00409201 ; ---------------------------------------------------------------------------
.text:00409201
.text:00409201 loc_409201:                             ; CODE XREF: sub_408D80+286↑j
.text:00409201                 or      eax, 1
.text:00409204                 jmp     loc_40900C
.text:00409209 ; ---------------------------------------------------------------------------
.text:00409209
.text:00409209 loc_409209:                             ; CODE XREF: sub_408D80+25E↑j
.text:00409209                 mov     eax, [esp+0FCh+var_AC]
.text:0040920D                 mov     ebx, [esp+0FCh+var_AC]
.text:00409211                 cdq
.text:00409212                 idiv    [esp+0FCh+var_B4]
.text:00409216                 sub     ebx, edx
.text:00409218                 cmp     [esp+0FCh+var_A8], ebx
.text:0040921C                 jge     loc_408FE4
.text:00409222
.text:00409222 loc_409222:                             ; CODE XREF: sub_408D80+254↑j
.text:00409222                 mov     eax, 0FFFFFFFFh
.text:00409227                 jmp     loc_409070
.text:0040922C ; ---------------------------------------------------------------------------
.text:0040922C
.text:0040922C loc_40922C:                             ; CODE XREF: sub_408D80+24A↑j
.text:0040922C                 mov     edi, [esp+0FCh+var_A8]
.text:00409230                 cmp     [esp+0FCh+var_AC], edi
.text:00409234                 jg      loc_408FD0
.text:0040923A
.text:0040923A loc_40923A:                             ; CODE XREF: sub_408D80+240↑j
.text:0040923A                 mov     eax, 1
.text:0040923F                 jmp     loc_409070
.text:00409244 ; ---------------------------------------------------------------------------
.text:00409244
.text:00409244 loc_409244:                             ; CODE XREF: sub_408D80+232↑j
.text:00409244                 and     eax, 0FFFFFFFEh
.text:00409247                 jmp     loc_408FB8
.text:0040924C ; ---------------------------------------------------------------------------
.text:0040924C
.text:0040924C loc_40924C:                             ; CODE XREF: sub_408D80+9F↑j
.text:0040924C                 xor     ecx, ecx
.text:0040924E                 mov     ds:dword_422280, ecx
.text:00409254                 jmp     loc_408E25
.text:00409254 ; ---------------------------------------------------------------------------
.text:00409259                 align 10h
.text:00409260
.text:00409260 loc_409260:                             ; CODE XREF: sub_408D80+5F↑j
.text:00409260                 mov     [esp+0FCh+var_FC], 10h ; size_t
.text:00409267                 call    sub_40B090
.text:0040926C                 mov     ds:dword_422280, eax
.text:00409271                 mov     ecx, eax
.text:00409273                 mov     dword ptr [eax+8], 77359400h
.text:0040927A                 mov     byte ptr [eax+0Ch], 0
.text:0040927E                 jmp     loc_408DE5
.text:00409283 ; ---------------------------------------------------------------------------
.text:00409283
.text:00409283 loc_409283:                             ; CODE XREF: sub_408D80+51↑j
.text:00409283                 mov     [esp+0FCh+var_EC], offset free
.text:0040928B                 mov     [esp+0FCh+var_F0], offset sub_4092F0
.text:00409293                 mov     [esp+0FCh+var_F4], offset sub_4092C0
.text:0040929B                 mov     [esp+0FCh+var_F8], 0
.text:004092A3                 mov     [esp+0FCh+var_FC], 10h
.text:004092AA                 call    sub_40C0D0
.text:004092AF                 mov     ds:dword_422270, eax
.text:004092B4                 jmp     loc_408DD7
.text:004092B9 ; ---------------------------------------------------------------------------
.text:004092B9
.text:004092B9 loc_4092B9:                             ; CODE XREF: sub_408D80+8F↑j
.text:004092B9                 call    sub_40C060
.text:004092B9 sub_408D80      endp
.text:004092B9
.text:004092B9 ; ---------------------------------------------------------------------------
.text:004092BE                 align 10h
.text:004092C0
.text:004092C0 ; =============== S U B R O U T I N E =======================================
.text:004092C0
.text:004092C0
.text:004092C0 sub_4092C0      proc near               ; DATA XREF: sub_408D80+513↑o
.text:004092C0
.text:004092C0 var_1C          = dword ptr -1Ch
.text:004092C0 var_18          = dword ptr -18h
.text:004092C0 var_14          = dword ptr -14h
.text:004092C0 var_10          = dword ptr -10h
.text:004092C0 arg_0           = dword ptr  4
.text:004092C0 arg_4           = dword ptr  8
.text:004092C0
.text:004092C0                 sub     esp, 1Ch
.text:004092C3                 mov     ecx, [esp+1Ch+arg_0]
.text:004092C7                 mov     edx, [ecx+4]
.text:004092CA                 mov     eax, [ecx]
.text:004092CC                 mov     ecx, [esp+1Ch+arg_4]
.text:004092D0                 mov     [esp+1Ch+var_10], 0
.text:004092D8                 mov     [esp+1Ch+var_1C], eax
.text:004092DB                 mov     [esp+1Ch+var_14], ecx
.text:004092DF                 mov     [esp+1Ch+var_18], edx
.text:004092E3                 call    sub_41F5B0
.text:004092E8                 add     esp, 1Ch
.text:004092EB                 retn
.text:004092EB sub_4092C0      endp
.text:004092EB
.text:004092EB ; ---------------------------------------------------------------------------
.text:004092EC                 align 10h
.text:004092F0
.text:004092F0 ; =============== S U B R O U T I N E =======================================
.text:004092F0
.text:004092F0
.text:004092F0 sub_4092F0      proc near               ; DATA XREF: sub_408D80+50B↑o
.text:004092F0
.text:004092F0 arg_0           = dword ptr  4
.text:004092F0 arg_4           = dword ptr  8
.text:004092F0
.text:004092F0                 push    ebx
.text:004092F1                 mov     ecx, [esp+4+arg_0]
.text:004092F5                 mov     edx, [ecx+4]
.text:004092F8                 mov     eax, [ecx]
.text:004092FA                 mov     ecx, [esp+4+arg_4]
.text:004092FE                 mov     ebx, [ecx+4]
.text:00409301                 mov     ecx, [ecx]
.text:00409303                 xor     edx, ebx
.text:00409305                 xor     eax, ecx
.text:00409307                 pop     ebx
.text:00409308                 or      eax, edx
.text:0040930A                 setz    dl
.text:0040930D                 movzx   eax, dl
.text:00409310                 retn
.text:00409310 sub_4092F0      endp
.text:00409310
.text:00409310 ; ---------------------------------------------------------------------------
.text:00409311                 align 10h
.text:00409320
.text:00409320 ; =============== S U B R O U T I N E =======================================
.text:00409320
.text:00409320
.text:00409320 sub_409320      proc near               ; CODE XREF: sub_406A40+E8↑p
.text:00409320                                         ; sub_406A40+282↑p ...
.text:00409320
.text:00409320 arg_0           = dword ptr  4
.text:00409320 arg_4           = dword ptr  8
.text:00409320
.text:00409320                 sub     esp, 0Ch
.text:00409323                 mov     eax, [esp+0Ch+arg_0]
.text:00409327                 mov     edx, [esp+0Ch+arg_4]
.text:0040932B                 test    eax, eax
.text:0040932D                 jz      short loc_409334
.text:0040932F                 cmp     byte ptr [eax], 0
.text:00409332                 jz      short loc_409344
.text:00409334
.text:00409334 loc_409334:                             ; CODE XREF: sub_409320+D↑j
.text:00409334                 mov     [esp+0Ch+arg_4], edx
.text:00409338                 mov     [esp+0Ch+arg_0], eax
.text:0040933C                 add     esp, 0Ch
.text:0040933F                 jmp     sub_418250
.text:00409344 ; ---------------------------------------------------------------------------
.text:00409344
.text:00409344 loc_409344:                             ; CODE XREF: sub_409320+12↑j
.text:00409344                 call    _errno
.text:00409349                 mov     dword ptr [eax], 2
.text:0040934F                 mov     eax, 0FFFFFFFFh
.text:00409354                 add     esp, 0Ch
.text:00409357                 retn
.text:00409357 sub_409320      endp
.text:00409357
.text:00409357 ; ---------------------------------------------------------------------------
.text:00409358                 align 10h
.text:00409360
.text:00409360 ; =============== S U B R O U T I N E =======================================
.text:00409360
.text:00409360
.text:00409360 ; int __cdecl sub_409360(char *, int, int)
.text:00409360 sub_409360      proc near               ; CODE XREF: sub_403270+412↑p
.text:00409360
.text:00409360 FileName        = dword ptr -9Ch
.text:00409360 OpenFlag        = dword ptr -98h
.text:00409360 var_94          = dword ptr -94h
.text:00409360 var_8C          = dword ptr -8Ch
.text:00409360 var_70          = dword ptr -70h
.text:00409360 var_6C          = dword ptr -6Ch
.text:00409360 var_10          = dword ptr -10h
.text:00409360 var_C           = dword ptr -0Ch
.text:00409360 var_8           = dword ptr -8
.text:00409360 var_4           = dword ptr -4
.text:00409360 arg_0           = dword ptr  4
.text:00409360 arg_4           = dword ptr  8
.text:00409360 arg_8           = dword ptr  0Ch
.text:00409360
.text:00409360                 sub     esp, 9Ch
.text:00409366                 mov     [esp+9Ch+var_10], ebx
.text:0040936D                 mov     ebx, [esp+9Ch+arg_8]
.text:00409374                 mov     [esp+9Ch+var_8], edi
.text:0040937B                 mov     edi, [esp+9Ch+arg_4]
.text:00409382                 cmp     ebx, 0FFFFFFFFh
.text:00409385                 mov     [esp+9Ch+var_4], ebp
.text:0040938C                 mov     ebp, [esp+9Ch+arg_0]
.text:00409393                 mov     [esp+9Ch+var_C], esi
.text:0040939A                 jz      loc_409440
.text:004093A0                 cmp     edi, 0FFFFFFFFh
.text:004093A3                 jz      loc_409440
.text:004093A9
.text:004093A9 loc_4093A9:                             ; CODE XREF: sub_409360+101↓j
.text:004093A9                                         ; sub_409360+10B↓j
.text:004093A9                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:004093B1                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:004093B4                 call    _open
.text:004093B9                 test    eax, eax
.text:004093BB                 mov     esi, eax
.text:004093BD                 js      short loc_409420
.text:004093BF
.text:004093BF loc_4093BF:                             ; CODE XREF: sub_409360+D9↓j
.text:004093BF                 mov     [esp+9Ch+var_94], ebx
.text:004093C3                 mov     [esp+9Ch+OpenFlag], edi
.text:004093C7                 mov     [esp+9Ch+FileName], esi
.text:004093CA                 call    sub_41A810
.text:004093CF                 test    eax, eax
.text:004093D1                 jnz     short loc_409402
.text:004093D3                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:004093D6                 call    _close
.text:004093DB                 mov     edx, eax
.text:004093DD
.text:004093DD loc_4093DD:                             ; CODE XREF: sub_409360+BD↓j
.text:004093DD                                         ; sub_409360+DB↓j ...
.text:004093DD                 mov     ebx, [esp+9Ch+var_10]
.text:004093E4                 mov     eax, edx
.text:004093E6                 mov     esi, [esp+9Ch+var_C]
.text:004093ED                 mov     edi, [esp+9Ch+var_8]
.text:004093F4                 mov     ebp, [esp+9Ch+var_4]
.text:004093FB                 add     esp, 9Ch
.text:00409401                 retn
.text:00409402 ; ---------------------------------------------------------------------------
.text:00409402
.text:00409402 loc_409402:                             ; CODE XREF: sub_409360+71↑j
.text:00409402                 call    _errno
.text:00409407                 mov     edi, [eax]
.text:00409409                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:0040940C                 call    _close
.text:00409411                 call    _errno
.text:00409416                 mov     [eax], edi
.text:00409418                 mov     edx, 0FFFFFFFFh
.text:0040941D                 jmp     short loc_4093DD
.text:0040941D ; ---------------------------------------------------------------------------
.text:0040941F                 align 10h
.text:00409420
.text:00409420 loc_409420:                             ; CODE XREF: sub_409360+5D↑j
.text:00409420                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00409428                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:0040942B                 call    _open
.text:00409430                 test    eax, eax
.text:00409432                 mov     esi, eax
.text:00409434                 mov     edx, 0FFFFFFFFh
.text:00409439                 jns     short loc_4093BF
.text:0040943B                 jmp     short loc_4093DD
.text:0040943B ; ---------------------------------------------------------------------------
.text:0040943D                 align 10h
.text:00409440
.text:00409440 loc_409440:                             ; CODE XREF: sub_409360+3A↑j
.text:00409440                                         ; sub_409360+43↑j
.text:00409440                 mov     [esp+9Ch+FileName], ebp ; char *
.text:00409443                 lea     edx, [esp+9Ch+var_8C]
.text:00409447                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:0040944B                 call    sub_419540
.text:00409450                 test    eax, eax
.text:00409452                 mov     edx, 1
.text:00409457                 jnz     short loc_4093DD
.text:00409459                 cmp     ebx, 0FFFFFFFFh
.text:0040945C                 jz      short loc_409470
.text:0040945E
.text:0040945E loc_40945E:                             ; CODE XREF: sub_409360+114↓j
.text:0040945E                 cmp     edi, 0FFFFFFFFh
.text:00409461                 jnz     loc_4093A9
.text:00409467                 mov     edi, [esp+9Ch+var_70]
.text:0040946B                 jmp     loc_4093A9
.text:00409470 ; ---------------------------------------------------------------------------
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_409360+FC↑j
.text:00409470                 mov     ebx, [esp+9Ch+var_6C]
.text:00409474                 jmp     short loc_40945E
.text:00409474 sub_409360      endp
.text:00409474
.text:00409474 ; ---------------------------------------------------------------------------
.text:00409476                 align 10h
.text:00409480 dword_409480    dd 90002D2Dh, 7 dup(90909090h)
.text:00409480                                         ; DATA XREF: sub_4096D0+E4↓o
.text:004094A0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004094A0                                         ; DATA XREF: sub_4096D0+2FC↓o
.text:004094CD                 align 20h
.text:004094E0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004094E0                                         ; DATA XREF: sub_4096D0:loc_409A32↓o
.text:0040950D                 align 20h
.text:00409520 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00409520                                         ; DATA XREF: sub_4096D0:loc_409AD0↓o
.text:00409520                                         ; sub_4096D0:loc_409E97↓o
.text:00409546                 align 20h
.text:00409560 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00409560                                         ; DATA XREF: sub_4096D0+48E↓o
.text:00409580 dword_409580    dd 90909000h, 7 dup(90909090h)
.text:00409580                                         ; DATA XREF: sub_4096D0:loc_409BA1↓o
.text:004095A0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004095A0                                         ; DATA XREF: sub_4096D0:loc_409BBA↓o
.text:004095C0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004095C0                                         ; DATA XREF: sub_4096D0:loc_409C9F↓o
.text:004095C0                                         ; sub_4096D0:loc_409FCC↓o
.text:004095E7                 align 20h
.text:00409600 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00409600                                         ; DATA XREF: sub_4096D0:loc_409E13↓o
.text:0040962E                 align 20h
.text:00409640 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00409640                                         ; DATA XREF: sub_4096D0:loc_409EFF↓o
.text:00409661 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00409661                                         ; DATA XREF: sub_4096D0+93F↓o
.text:0040967B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040967B                                         ; DATA XREF: sub_4096D0:loc_40A047↓o
.text:00409695 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00409695                                         ; DATA XREF: sub_4096D0:loc_40A06E↓o
.text:004096B3 ; const char aPosixlyCorrect[]
.text:004096B3 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4096D0:loc_40A220↓o
.text:004096C3                 align 10h
.text:004096D0
.text:004096D0 ; =============== S U B R O U T I N E =======================================
.text:004096D0
.text:004096D0
.text:004096D0 ; int __cdecl sub_4096D0(int, int, char *Str, int, int, int, int, int)
.text:004096D0 sub_4096D0      proc near               ; CODE XREF: sub_40A260+5A↓p
.text:004096D0                                         ; .text:0040A34A↓p ...
.text:004096D0
.text:004096D0 Str1            = dword ptr -5Ch
.text:004096D0 Str2            = dword ptr -58h
.text:004096D0 MaxCount        = dword ptr -54h
.text:004096D0 var_50          = dword ptr -50h
.text:004096D0 var_4C          = dword ptr -4Ch
.text:004096D0 var_3C          = dword ptr -3Ch
.text:004096D0 var_38          = dword ptr -38h
.text:004096D0 var_34          = dword ptr -34h
.text:004096D0 var_30          = dword ptr -30h
.text:004096D0 var_2C          = dword ptr -2Ch
.text:004096D0 var_28          = dword ptr -28h
.text:004096D0 var_24          = dword ptr -24h
.text:004096D0 var_20          = dword ptr -20h
.text:004096D0 var_1C          = dword ptr -1Ch
.text:004096D0 var_18          = dword ptr -18h
.text:004096D0 var_14          = dword ptr -14h
.text:004096D0 arg_0           = dword ptr  4
.text:004096D0 arg_4           = dword ptr  8
.text:004096D0 Str             = dword ptr  0Ch
.text:004096D0 arg_C           = dword ptr  10h
.text:004096D0 arg_10          = dword ptr  14h
.text:004096D0 arg_14          = dword ptr  18h
.text:004096D0 arg_18          = dword ptr  1Ch
.text:004096D0 arg_1C          = dword ptr  20h
.text:004096D0
.text:004096D0                 push    ebp
.text:004096D1                 mov     eax, 0FFFFFFFFh
.text:004096D6                 push    edi
.text:004096D7                 push    esi
.text:004096D8                 push    ebx
.text:004096D9                 sub     esp, 4Ch
.text:004096DC                 mov     esi, [esp+5Ch+Str]
.text:004096E0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004096E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004096E7                 mov     ebx, [ebp+4]
.text:004096EA                 setz    dl
.text:004096ED                 movzx   ecx, dl
.text:004096F0                 dec     ecx
.text:004096F1                 and     ecx, ebx
.text:004096F3                 mov     [esp+5Ch+var_14], ecx
.text:004096F7                 mov     ecx, [esp+5Ch+arg_0]
.text:004096FB                 test    ecx, ecx
.text:004096FD                 jle     loc_409827
.text:00409703                 mov     dword ptr [ebp+0Ch], 0
.text:0040970A                 mov     ebx, [ebp+0]
.text:0040970D                 test    ebx, ebx
.text:0040970F                 jz      loc_40A240
.text:00409715                 mov     edi, [ebp+10h]
.text:00409718                 test    edi, edi
.text:0040971A                 jnz     short loc_409773
.text:0040971C                 lea     esi, [esi+0]
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: sub_4096D0+B7C↓j
.text:00409720                 mov     [ebp+24h], ebx
.text:00409723                 mov     esi, [esp+5Ch+Str]
.text:00409727                 mov     [ebp+20h], ebx
.text:0040972A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040972E                 xor     ebx, ebx
.text:00409730                 mov     dword ptr [ebp+14h], 0
.text:00409737                 test    ecx, ecx
.text:00409739                 jz      loc_40A220
.text:0040973F
.text:0040973F loc_40973F:                             ; CODE XREF: sub_4096D0+B64↓j
.text:0040973F                 mov     ebx, 1
.text:00409744
.text:00409744 loc_409744:                             ; CODE XREF: sub_4096D0+B5E↓j
.text:00409744                 mov     [ebp+1Ch], ebx
.text:00409747                 mov     ecx, [esp+5Ch+Str]
.text:0040974B                 movzx   eax, byte ptr [ecx]
.text:0040974E                 cmp     al, 2Dh ; '-'
.text:00409750                 jz      loc_40A210
.text:00409756                 cmp     al, 2Bh ; '+'
.text:00409758                 jz      loc_40A1F9
.text:0040975E                 xor     edx, edx
.text:00409760                 test    ebx, ebx
.text:00409762                 setz    dl
.text:00409765                 mov     [ebp+18h], edx
.text:00409768
.text:00409768 loc_409768:                             ; CODE XREF: sub_4096D0+B35↓j
.text:00409768                 mov     [esp+5Ch+Str], esi
.text:0040976C                 mov     dword ptr [ebp+10h], 1
.text:00409773
.text:00409773 loc_409773:                             ; CODE XREF: sub_4096D0+4A↑j
.text:00409773                 mov     eax, [ebp+14h]
.text:00409776                 test    eax, eax
.text:00409778                 jz      short loc_409783
.text:0040977A                 cmp     byte ptr [eax], 0
.text:0040977D                 jnz     loc_409860
.text:00409783
.text:00409783 loc_409783:                             ; CODE XREF: sub_4096D0+A8↑j
.text:00409783                 mov     ebx, [ebp+0]
.text:00409786                 cmp     [ebp+24h], ebx
.text:00409789                 jle     short loc_40978E
.text:0040978B                 mov     [ebp+24h], ebx
.text:0040978E
.text:0040978E loc_40978E:                             ; CODE XREF: sub_4096D0+B9↑j
.text:0040978E                 cmp     [ebp+20h], ebx
.text:00409791                 jle     short loc_409796
.text:00409793                 mov     [ebp+20h], ebx
.text:00409796
.text:00409796 loc_409796:                             ; CODE XREF: sub_4096D0+C1↑j
.text:00409796                 cmp     dword ptr [ebp+18h], 1
.text:0040979A                 jz      loc_40A170
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_4096D0+B13↓j
.text:004097A0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004097A4                 jz      loc_40A154
.text:004097AA                 cld
.text:004097AB                 mov     ecx, [esp+5Ch+arg_4]
.text:004097AF                 mov     edx, 3
.text:004097B4                 mov     edi, offset dword_409480
.text:004097B9                 mov     esi, [ecx+ebx*4]
.text:004097BC                 mov     ecx, edx
.text:004097BE                 repe cmpsb
.text:004097C0                 jnz     short loc_4097FC
.text:004097C2                 mov     edx, [ebp+24h]
.text:004097C5                 lea     eax, [ebx+1]
.text:004097C8                 cmp     [ebp+20h], edx
.text:004097CB                 mov     [ebp+0], eax
.text:004097CE                 jz      loc_40A168
.text:004097D4                 cmp     edx, eax
.text:004097D6                 jz      short loc_4097F0
.text:004097D8                 mov     [esp+5Ch+Str2], ebp
.text:004097DC                 mov     ebx, [esp+5Ch+arg_4]
.text:004097E0                 mov     [esp+5Ch+Str1], ebx
.text:004097E3                 call    sub_40A380
.text:004097E8                 nop
.text:004097E9                 lea     esi, [esi+0]
.text:004097F0
.text:004097F0 loc_4097F0:                             ; CODE XREF: sub_4096D0+106↑j
.text:004097F0                                         ; sub_4096D0+A9B↓j
.text:004097F0                 mov     eax, [esp+5Ch+arg_0]
.text:004097F4                 mov     ebx, eax
.text:004097F6                 mov     [ebp+24h], eax
.text:004097F9                 mov     [ebp+0], eax
.text:004097FC
.text:004097FC loc_4097FC:                             ; CODE XREF: sub_4096D0+F0↑j
.text:004097FC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00409800                 jz      loc_40A154
.text:00409806                 mov     esi, [esp+5Ch+arg_4]
.text:0040980A                 mov     eax, [esi+ebx*4]
.text:0040980D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00409810                 jz      short loc_409837
.text:00409812
.text:00409812 loc_409812:                             ; CODE XREF: sub_4096D0+16D↓j
.text:00409812                 mov     edx, [ebp+18h]
.text:00409815                 test    edx, edx
.text:00409817                 jz      short loc_409830
.text:00409819                 mov     [ebp+0Ch], eax
.text:0040981C                 lea     edi, [ebx+1]
.text:0040981F                 mov     eax, 1
.text:00409824                 mov     [ebp+0], edi
.text:00409827
.text:00409827 loc_409827:                             ; CODE XREF: sub_4096D0+2D↑j
.text:00409827                                         ; sub_4096D0+165↓j ...
.text:00409827                 add     esp, 4Ch
.text:0040982A                 pop     ebx
.text:0040982B                 pop     esi
.text:0040982C                 pop     edi
.text:0040982D                 pop     ebp
.text:0040982E                 retn
.text:0040982E ; ---------------------------------------------------------------------------
.text:0040982F                 align 10h
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_4096D0+147↑j
.text:00409830                                         ; sub_4096D0+A8A↓j ...
.text:00409830                 mov     eax, 0FFFFFFFFh
.text:00409835                 jmp     short loc_409827
.text:00409837 ; ---------------------------------------------------------------------------
.text:00409837
.text:00409837 loc_409837:                             ; CODE XREF: sub_4096D0+140↑j
.text:00409837                 movzx   edx, byte ptr [eax+1]
.text:0040983B                 test    dl, dl
.text:0040983D                 jz      short loc_409812
.text:0040983F                 mov     ebx, [esp+5Ch+arg_C]
.text:00409843                 xor     ecx, ecx
.text:00409845                 test    ebx, ebx
.text:00409847                 jz      short loc_409852
.text:00409849                 cmp     dl, 2Dh ; '-'
.text:0040984C                 jz      loc_40A14A
.text:00409852
.text:00409852 loc_409852:                             ; CODE XREF: sub_4096D0+177↑j
.text:00409852                                         ; sub_4096D0+A7F↓j
.text:00409852                 lea     esi, [ecx+eax+1]
.text:00409856                 mov     [ebp+14h], esi
.text:00409859                 lea     esi, [esi+0]
.text:00409860
.text:00409860 loc_409860:                             ; CODE XREF: sub_4096D0+AD↑j
.text:00409860                 mov     ecx, [esp+5Ch+arg_C]
.text:00409864                 test    ecx, ecx
.text:00409866                 jz      loc_409BF0
.text:0040986C                 mov     edx, [ebp+0]
.text:0040986F                 mov     edi, [esp+5Ch+arg_4]
.text:00409873                 mov     eax, [edi+edx*4]
.text:00409876                 movzx   edx, byte ptr [eax+1]
.text:0040987A                 cmp     dl, 2Dh ; '-'
.text:0040987D                 jz      short loc_409895
.text:0040987F                 mov     ebx, [esp+5Ch+arg_14]
.text:00409883                 test    ebx, ebx
.text:00409885                 jz      loc_409BF0
.text:0040988B                 cmp     byte ptr [eax+2], 0
.text:0040988F                 jz      loc_40A12A
.text:00409895
.text:00409895 loc_409895:                             ; CODE XREF: sub_4096D0+1AD↑j
.text:00409895                                         ; sub_4096D0+A75↓j
.text:00409895                 mov     [esp+5Ch+var_18], 0
.text:0040989D                 mov     ecx, [ebp+14h]
.text:004098A0                 mov     [esp+5Ch+var_1C], 0
.text:004098A8                 mov     [esp+5Ch+var_20], 0
.text:004098B0                 mov     edi, ecx
.text:004098B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004098BA                 movzx   eax, byte ptr [ecx]
.text:004098BD                 test    al, al
.text:004098BF                 jz      short loc_4098DC
.text:004098C1                 cmp     al, 3Dh ; '='
.text:004098C3                 jz      short loc_4098DC
.text:004098C5                 lea     esi, [esi+0]
.text:004098C9                 lea     edi, [edi+0]
.text:004098D0
.text:004098D0 loc_4098D0:                             ; CODE XREF: sub_4096D0+20A↓j
.text:004098D0                 inc     edi
.text:004098D1                 movzx   eax, byte ptr [edi]
.text:004098D4                 test    al, al
.text:004098D6                 jz      short loc_4098DC
.text:004098D8                 cmp     al, 3Dh ; '='
.text:004098DA                 jnz     short loc_4098D0
.text:004098DC
.text:004098DC loc_4098DC:                             ; CODE XREF: sub_4096D0+1EF↑j
.text:004098DC                                         ; sub_4096D0+1F3↑j ...
.text:004098DC                 mov     [esp+5Ch+var_28], 0
.text:004098E4                 mov     esi, [esp+5Ch+arg_C]
.text:004098E8                 mov     ebx, [esi]
.text:004098EA                 test    ebx, ebx
.text:004098EC                 mov     edx, ebx
.text:004098EE                 jz      loc_409B10
.text:004098F4                 lea     esi, [esi+0]
.text:004098FA                 lea     edi, [edi+0]
.text:00409900
.text:00409900 loc_409900:                             ; CODE XREF: sub_4096D0+25E↓j
.text:00409900                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00409904                 mov     ebx, edi
.text:00409906                 sub     ebx, ecx
.text:00409908                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040990C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040990F                 call    strncmp
.text:00409914                 test    eax, eax
.text:00409916                 jz      loc_40A0A6
.text:0040991C
.text:0040991C loc_40991C:                             ; CODE XREF: sub_4096D0+A0F↓j
.text:0040991C                                         ; sub_4096D0+A24↓j ...
.text:0040991C                 inc     [esp+5Ch+var_28]
.text:00409920                 add     esi, 10h
.text:00409923                 mov     ecx, [esi]
.text:00409925                 test    ecx, ecx
.text:00409927                 mov     edx, ecx
.text:00409929                 jz      short loc_409930
.text:0040992B                 mov     ecx, [ebp+14h]
.text:0040992E                 jmp     short loc_409900
.text:00409930 ; ---------------------------------------------------------------------------
.text:00409930
.text:00409930 loc_409930:                             ; CODE XREF: sub_4096D0+259↑j
.text:00409930                                         ; sub_4096D0+A55↓j
.text:00409930                 mov     esi, [esp+5Ch+var_20]
.text:00409934                 test    esi, esi
.text:00409936                 jz      short loc_409944
.text:00409938                 mov     edx, [esp+5Ch+var_1C]
.text:0040993C                 test    edx, edx
.text:0040993E                 jz      loc_40A050
.text:00409944
.text:00409944 loc_409944:                             ; CODE XREF: sub_4096D0+266↑j
.text:00409944                 mov     eax, [esp+5Ch+var_18]
.text:00409948                 test    eax, eax
.text:0040994A                 jz      loc_409B10
.text:00409950                 mov     ecx, [ebp+0]
.text:00409953                 lea     eax, [ecx+1]
.text:00409956                 mov     [ebp+0], eax
.text:00409959                 cmp     byte ptr [edi], 0
.text:0040995C                 jz      loc_409A70
.text:00409962                 mov     ecx, [esp+5Ch+var_18]
.text:00409966                 mov     esi, [ecx+4]
.text:00409969                 test    esi, esi
.text:0040996B                 jz      short loc_4099B6
.text:0040996D                 lea     ebx, [edi+1]
.text:00409970                 mov     [ebp+0Ch], ebx
.text:00409973
.text:00409973 loc_409973:                             ; CODE XREF: sub_4096D0+3A8↓j
.text:00409973                                         ; sub_4096D0+3C4↓j
.text:00409973                 mov     ebx, [ebp+14h]
.text:00409976                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00409979                 call    strlen
.text:0040997E                 add     [ebp+14h], eax
.text:00409981                 mov     esi, [esp+5Ch+arg_10]
.text:00409985                 test    esi, esi
.text:00409987                 jz      short loc_409993
.text:00409989                 mov     ebp, [esp+5Ch+var_24]
.text:0040998D                 mov     ecx, [esp+5Ch+arg_10]
.text:00409991                 mov     [ecx], ebp
.text:00409993
.text:00409993 loc_409993:                             ; CODE XREF: sub_4096D0+2B7↑j
.text:00409993                 mov     eax, [esp+5Ch+var_18]
.text:00409997                 mov     ecx, [eax+8]
.text:0040999A                 test    ecx, ecx
.text:0040999C                 jnz     short loc_4099AA
.text:0040999E                 mov     ecx, [esp+5Ch+var_18]
.text:004099A2
.text:004099A2 loc_4099A2:                             ; CODE XREF: sub_4096D0+723↓j
.text:004099A2                 mov     eax, [ecx+0Ch]
.text:004099A5                 jmp     loc_409827
.text:004099AA ; ---------------------------------------------------------------------------
.text:004099AA
.text:004099AA loc_4099AA:                             ; CODE XREF: sub_4096D0+2CC↑j
.text:004099AA                                         ; sub_4096D0+719↓j
.text:004099AA                 mov     esi, [eax+0Ch]
.text:004099AD                 xor     eax, eax
.text:004099AF                 mov     [ecx], esi
.text:004099B1                 jmp     loc_409827
.text:004099B6 ; ---------------------------------------------------------------------------
.text:004099B6
.text:004099B6 loc_4099B6:                             ; CODE XREF: sub_4096D0+29B↑j
.text:004099B6                 mov     edi, [esp+5Ch+var_14]
.text:004099BA                 test    edi, edi
.text:004099BC                 jz      short loc_409A10
.text:004099BE                 mov     esi, [esp+5Ch+arg_4]
.text:004099C2                 mov     edx, [esi+eax*4-4]
.text:004099C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004099CA                 jz      short loc_409A32
.text:004099CC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004099D3                 call    ds:libintl_gettext
.text:004099D9                 mov     edx, [esp+5Ch+var_18]
.text:004099DD                 mov     edi, [edx]
.text:004099DF                 mov     [esp+5Ch+var_4C], edi
.text:004099E3                 mov     ebx, [ebp+0]
.text:004099E6                 mov     edi, [esp+5Ch+arg_4]
.text:004099EA                 mov     ecx, [edi+ebx*4-4]
.text:004099EE                 movsx   esi, byte ptr [ecx]
.text:004099F1                 mov     ecx, ds:_iob
.text:004099F7                 add     ecx, 40h ; '@'
.text:004099FA                 mov     [esp+5Ch+var_50], esi
.text:004099FE                 mov     ebx, [edi]
.text:00409A00                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409A04                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409A07                 mov     [esp+5Ch+MaxCount], ebx
.text:00409A0B                 call    fprintf
.text:00409A10
.text:00409A10 loc_409A10:                             ; CODE XREF: sub_4096D0+2EC↑j
.text:00409A10                                         ; sub_4096D0+398↓j
.text:00409A10                 mov     ecx, [ebp+14h]
.text:00409A13                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409A16                 call    strlen
.text:00409A1B                 add     [ebp+14h], eax
.text:00409A1E                 mov     eax, [esp+5Ch+var_18]
.text:00409A22                 mov     esi, [eax+0Ch]
.text:00409A25                 mov     [ebp+8], esi
.text:00409A28
.text:00409A28 loc_409A28:                             ; CODE XREF: sub_4096D0+4E5↓j
.text:00409A28                                         ; sub_4096D0+73E↓j ...
.text:00409A28                 mov     eax, 3Fh ; '?'
.text:00409A2D                 jmp     loc_409827
.text:00409A32 ; ---------------------------------------------------------------------------
.text:00409A32
.text:00409A32 loc_409A32:                             ; CODE XREF: sub_4096D0+2FA↑j
.text:00409A32                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00409A39                 call    ds:libintl_gettext
.text:00409A3F                 mov     edx, [esp+5Ch+var_18]
.text:00409A43                 mov     edi, [esp+5Ch+arg_4]
.text:00409A47                 mov     ecx, ds:_iob
.text:00409A4D                 mov     esi, [edx]
.text:00409A4F                 add     ecx, 40h ; '@'
.text:00409A52                 mov     [esp+5Ch+var_50], esi
.text:00409A56                 mov     ebx, [edi]
.text:00409A58                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409A5C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409A5F                 mov     [esp+5Ch+MaxCount], ebx
.text:00409A63                 call    fprintf
.text:00409A68                 jmp     short loc_409A10
.text:00409A68 ; ---------------------------------------------------------------------------
.text:00409A6A                 align 10h
.text:00409A70
.text:00409A70 loc_409A70:                             ; CODE XREF: sub_4096D0+28C↑j
.text:00409A70                 mov     ebx, [esp+5Ch+var_18]
.text:00409A74                 cmp     dword ptr [ebx+4], 1
.text:00409A78                 jnz     loc_409973
.text:00409A7E                 cmp     eax, [esp+5Ch+arg_0]
.text:00409A82                 jge     short loc_409A99
.text:00409A84                 mov     ebx, [esp+5Ch+arg_4]
.text:00409A88                 lea     edi, [ecx+2]
.text:00409A8B                 mov     [ebp+0], edi
.text:00409A8E                 mov     esi, [ebx+eax*4]
.text:00409A91                 mov     [ebp+0Ch], esi
.text:00409A94                 jmp     loc_409973
.text:00409A99 ; ---------------------------------------------------------------------------
.text:00409A99
.text:00409A99 loc_409A99:                             ; CODE XREF: sub_4096D0+3B2↑j
.text:00409A99                 mov     edx, [esp+5Ch+var_14]
.text:00409A9D                 test    edx, edx
.text:00409A9F                 jnz     short loc_409AD0
.text:00409AA1
.text:00409AA1 loc_409AA1:                             ; CODE XREF: sub_4096D0+437↓j
.text:00409AA1                 mov     edx, [ebp+14h]
.text:00409AA4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00409AA7                 call    strlen
.text:00409AAC                 add     [ebp+14h], eax
.text:00409AAF                 mov     eax, [esp+5Ch+var_18]
.text:00409AB3                 mov     edi, [eax+0Ch]
.text:00409AB6                 mov     [ebp+8], edi
.text:00409AB9
.text:00409AB9 loc_409AB9:                             ; CODE XREF: sub_4096D0+7C2↓j
.text:00409AB9                 mov     ebp, [esp+5Ch+Str]
.text:00409ABD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00409AC1                 setnz   bl
.text:00409AC4                 movzx   esi, bl
.text:00409AC7                 lea     eax, [esi+esi*4+3Ah]
.text:00409ACB                 jmp     loc_409827
.text:00409AD0 ; ---------------------------------------------------------------------------
.text:00409AD0
.text:00409AD0 loc_409AD0:                             ; CODE XREF: sub_4096D0+3CF↑j
.text:00409AD0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00409AD7                 call    ds:libintl_gettext
.text:00409ADD                 mov     ecx, [ebp+0]
.text:00409AE0                 mov     esi, [esp+5Ch+arg_4]
.text:00409AE4                 mov     ebx, [esi+ecx*4-4]
.text:00409AE8                 mov     ecx, ds:_iob
.text:00409AEE                 mov     [esp+5Ch+var_50], ebx
.text:00409AF2                 mov     edi, [esi]
.text:00409AF4                 add     ecx, 40h ; '@'
.text:00409AF7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409AFB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409AFE                 mov     [esp+5Ch+MaxCount], edi
.text:00409B02                 call    fprintf
.text:00409B07                 jmp     short loc_409AA1
.text:00409B07 ; ---------------------------------------------------------------------------
.text:00409B09                 align 10h
.text:00409B10
.text:00409B10 loc_409B10:                             ; CODE XREF: sub_4096D0+21E↑j
.text:00409B10                                         ; sub_4096D0+27A↑j
.text:00409B10                 mov     eax, [esp+5Ch+arg_14]
.text:00409B14                 test    eax, eax
.text:00409B16                 jz      short loc_409B46
.text:00409B18                 mov     ebx, [ebp+0]
.text:00409B1B                 mov     esi, [esp+5Ch+arg_4]
.text:00409B1F                 mov     edi, [esi+ebx*4]
.text:00409B22                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00409B26                 jz      short loc_409B49
.text:00409B28                 mov     ecx, [ebp+14h]
.text:00409B2B                 mov     edx, [esp+5Ch+Str]
.text:00409B2F                 movsx   ebx, byte ptr [ecx]
.text:00409B32                 mov     [esp+5Ch+Str1], edx ; Str
.text:00409B35                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00409B39                 call    strchr
.text:00409B3E                 test    eax, eax
.text:00409B40                 jnz     loc_409BF0
.text:00409B46
.text:00409B46 loc_409B46:                             ; CODE XREF: sub_4096D0+446↑j
.text:00409B46                 mov     ebx, [ebp+0]
.text:00409B49
.text:00409B49 loc_409B49:                             ; CODE XREF: sub_4096D0+456↑j
.text:00409B49                 mov     eax, [esp+5Ch+var_14]
.text:00409B4D                 test    eax, eax
.text:00409B4F                 jz      short loc_409BA1
.text:00409B51                 mov     esi, [esp+5Ch+arg_4]
.text:00409B55                 mov     edi, [esi+ebx*4]
.text:00409B58                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00409B5C                 jz      short loc_409BBA
.text:00409B5E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00409B65                 call    ds:libintl_gettext
.text:00409B6B                 mov     edi, [ebp+14h]
.text:00409B6E                 mov     [esp+5Ch+var_4C], edi
.text:00409B72                 mov     ebx, [ebp+0]
.text:00409B75                 mov     edi, [esp+5Ch+arg_4]
.text:00409B79                 mov     esi, [edi+ebx*4]
.text:00409B7C                 movsx   ecx, byte ptr [esi]
.text:00409B7F                 mov     esi, ds:_iob
.text:00409B85                 add     esi, 40h ; '@'
.text:00409B88                 mov     [esp+5Ch+var_50], ecx
.text:00409B8C                 mov     ebx, [edi]
.text:00409B8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409B92                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00409B95                 mov     [esp+5Ch+MaxCount], ebx
.text:00409B99                 call    fprintf
.text:00409B9E
.text:00409B9E loc_409B9E:                             ; CODE XREF: sub_4096D0+51D↓j
.text:00409B9E                 mov     ebx, [ebp+0]
.text:00409BA1
.text:00409BA1 loc_409BA1:                             ; CODE XREF: sub_4096D0+47F↑j
.text:00409BA1                 mov     dword ptr [ebp+14h], offset dword_409580
.text:00409BA8                 lea     edx, [ebx+1]
.text:00409BAB                 mov     [ebp+0], edx
.text:00409BAE
.text:00409BAE loc_409BAE:                             ; CODE XREF: sub_4096D0+999↓j
.text:00409BAE                 mov     dword ptr [ebp+8], 0
.text:00409BB5                 jmp     loc_409A28
.text:00409BBA ; ---------------------------------------------------------------------------
.text:00409BBA
.text:00409BBA loc_409BBA:                             ; CODE XREF: sub_4096D0+48C↑j
.text:00409BBA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00409BC1                 call    ds:libintl_gettext
.text:00409BC7                 mov     ecx, [ebp+14h]
.text:00409BCA                 mov     edi, [esp+5Ch+arg_4]
.text:00409BCE                 mov     edx, ds:_iob
.text:00409BD4                 mov     [esp+5Ch+var_50], ecx
.text:00409BD8                 mov     ebx, [edi]
.text:00409BDA                 add     edx, 40h ; '@'
.text:00409BDD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409BE1                 mov     [esp+5Ch+MaxCount], ebx
.text:00409BE5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00409BE8                 call    fprintf
.text:00409BED                 jmp     short loc_409B9E
.text:00409BED ; ---------------------------------------------------------------------------
.text:00409BEF                 align 10h
.text:00409BF0
.text:00409BF0 loc_409BF0:                             ; CODE XREF: sub_4096D0+196↑j
.text:00409BF0                                         ; sub_4096D0+1B5↑j ...
.text:00409BF0                 mov     esi, [ebp+14h]
.text:00409BF3                 movzx   ebx, byte ptr [esi]
.text:00409BF6                 inc     esi
.text:00409BF7                 mov     [ebp+14h], esi
.text:00409BFA                 mov     ecx, [esp+5Ch+Str]
.text:00409BFE                 movsx   esi, bl
.text:00409C01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409C05                 mov     edi, esi
.text:00409C07                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409C0A                 call    strchr
.text:00409C0F                 mov     ecx, [ebp+14h]
.text:00409C12                 cmp     byte ptr [ecx], 0
.text:00409C15                 jnz     short loc_409C1A
.text:00409C17                 inc     dword ptr [ebp+0]
.text:00409C1A
.text:00409C1A loc_409C1A:                             ; CODE XREF: sub_4096D0+545↑j
.text:00409C1A                 test    eax, eax
.text:00409C1C                 jz      loc_40A000
.text:00409C22                 cmp     bl, 3Ah ; ':'
.text:00409C25                 jz      loc_40A000
.text:00409C2B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00409C2E                 jz      loc_409CE6
.text:00409C34                 movzx   edx, byte ptr [eax+1]
.text:00409C38
.text:00409C38 loc_409C38:                             ; CODE XREF: sub_4096D0+61D↓j
.text:00409C38                 cmp     dl, 3Ah ; ':'
.text:00409C3B                 jz      short loc_409C44
.text:00409C3D
.text:00409C3D loc_409C3D:                             ; CODE XREF: sub_4096D0+590↓j
.text:00409C3D                 mov     eax, esi
.text:00409C3F                 jmp     loc_409827
.text:00409C44 ; ---------------------------------------------------------------------------
.text:00409C44
.text:00409C44 loc_409C44:                             ; CODE XREF: sub_4096D0+56B↑j
.text:00409C44                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00409C48                 jz      loc_409CD1
.text:00409C4E                 cmp     byte ptr [ecx], 0
.text:00409C51                 jz      short loc_409C62
.text:00409C53
.text:00409C53 loc_409C53:                             ; CODE XREF: sub_4096D0+604↓j
.text:00409C53                 inc     dword ptr [ebp+0]
.text:00409C56                 mov     [ebp+0Ch], ecx
.text:00409C59
.text:00409C59 loc_409C59:                             ; CODE XREF: sub_4096D0+5AB↓j
.text:00409C59                                         ; sub_4096D0+5C6↓j ...
.text:00409C59                 mov     dword ptr [ebp+14h], 0
.text:00409C60                 jmp     short loc_409C3D
.text:00409C62 ; ---------------------------------------------------------------------------
.text:00409C62
.text:00409C62 loc_409C62:                             ; CODE XREF: sub_4096D0+581↑j
.text:00409C62                 mov     ecx, [ebp+0]
.text:00409C65                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409C69                 jz      short loc_409C7D
.text:00409C6B                 mov     eax, [esp+5Ch+arg_4]
.text:00409C6F                 lea     edx, [ecx+1]
.text:00409C72                 mov     [ebp+0], edx
.text:00409C75                 mov     ebx, [eax+ecx*4]
.text:00409C78                 mov     [ebp+0Ch], ebx
.text:00409C7B                 jmp     short loc_409C59
.text:00409C7D ; ---------------------------------------------------------------------------
.text:00409C7D
.text:00409C7D loc_409C7D:                             ; CODE XREF: sub_4096D0+599↑j
.text:00409C7D                 mov     ecx, [esp+5Ch+var_14]
.text:00409C81                 test    ecx, ecx
.text:00409C83                 jnz     short loc_409C9F
.text:00409C85
.text:00409C85 loc_409C85:                             ; CODE XREF: sub_4096D0+5FF↓j
.text:00409C85                 mov     [ebp+8], edi
.text:00409C88                 mov     edi, [esp+5Ch+Str]
.text:00409C8C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00409C8F                 jz      short loc_409C98
.text:00409C91                 mov     esi, 3Fh ; '?'
.text:00409C96                 jmp     short loc_409C59
.text:00409C98 ; ---------------------------------------------------------------------------
.text:00409C98
.text:00409C98 loc_409C98:                             ; CODE XREF: sub_4096D0+5BF↑j
.text:00409C98                 mov     esi, 3Ah ; ':'
.text:00409C9D                 jmp     short loc_409C59
.text:00409C9F ; ---------------------------------------------------------------------------
.text:00409C9F
.text:00409C9F loc_409C9F:                             ; CODE XREF: sub_4096D0+5B3↑j
.text:00409C9F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00409CA6                 call    ds:libintl_gettext
.text:00409CAC                 mov     [esp+5Ch+var_50], edi
.text:00409CB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00409CB4                 mov     edx, ds:_iob
.text:00409CBA                 mov     esi, [ebx]
.text:00409CBC                 add     edx, 40h ; '@'
.text:00409CBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409CC3                 mov     [esp+5Ch+MaxCount], esi
.text:00409CC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00409CCA                 call    fprintf
.text:00409CCF                 jmp     short loc_409C85
.text:00409CD1 ; ---------------------------------------------------------------------------
.text:00409CD1
.text:00409CD1 loc_409CD1:                             ; CODE XREF: sub_4096D0+578↑j
.text:00409CD1                 cmp     byte ptr [ecx], 0
.text:00409CD4                 jnz     loc_409C53
.text:00409CDA                 mov     dword ptr [ebp+0Ch], 0
.text:00409CE1                 jmp     loc_409C59
.text:00409CE6 ; ---------------------------------------------------------------------------
.text:00409CE6
.text:00409CE6 loc_409CE6:                             ; CODE XREF: sub_4096D0+55E↑j
.text:00409CE6                 movzx   edx, byte ptr [eax+1]
.text:00409CEA                 cmp     dl, 3Bh ; ';'
.text:00409CED                 jnz     loc_409C38
.text:00409CF3                 mov     [esp+5Ch+var_2C], 0
.text:00409CFB                 mov     [esp+5Ch+var_30], 0
.text:00409D03                 mov     [esp+5Ch+var_34], 0
.text:00409D0B                 mov     [esp+5Ch+var_38], 0
.text:00409D13                 cmp     byte ptr [ecx], 0
.text:00409D16                 jz      loc_409F8B
.text:00409D1C                 inc     dword ptr [ebp+0]
.text:00409D1F                 mov     [ebp+0Ch], ecx
.text:00409D22
.text:00409D22 loc_409D22:                             ; CODE XREF: sub_4096D0+8D4↓j
.text:00409D22                 mov     edi, [ebp+0Ch]
.text:00409D25                 mov     [ebp+14h], edi
.text:00409D28                 movzx   eax, byte ptr [edi]
.text:00409D2B                 test    al, al
.text:00409D2D                 jz      short loc_409D3F
.text:00409D2F                 cmp     al, 3Dh ; '='
.text:00409D31                 jz      short loc_409D3F
.text:00409D33
.text:00409D33 loc_409D33:                             ; CODE XREF: sub_4096D0+66D↓j
.text:00409D33                 inc     edi
.text:00409D34                 movzx   eax, byte ptr [edi]
.text:00409D37                 test    al, al
.text:00409D39                 jz      short loc_409D3F
.text:00409D3B                 cmp     al, 3Dh ; '='
.text:00409D3D                 jnz     short loc_409D33
.text:00409D3F
.text:00409D3F loc_409D3F:                             ; CODE XREF: sub_4096D0+65D↑j
.text:00409D3F                                         ; sub_4096D0+661↑j ...
.text:00409D3F                 mov     [esp+5Ch+var_3C], 0
.text:00409D47                 mov     esi, [esp+5Ch+arg_C]
.text:00409D4B                 mov     eax, [esi]
.text:00409D4D                 test    eax, eax
.text:00409D4F                 jz      loc_409ED0
.text:00409D55                 mov     ecx, eax
.text:00409D57
.text:00409D57 loc_409D57:                             ; CODE XREF: sub_4096D0+6B3↓j
.text:00409D57                 mov     ebx, [ebp+14h]
.text:00409D5A                 mov     eax, edi
.text:00409D5C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00409D5F                 sub     eax, ebx
.text:00409D61                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00409D65                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00409D69                 call    strncmp
.text:00409D6E                 test    eax, eax
.text:00409D70                 jz      loc_409F37
.text:00409D76
.text:00409D76 loc_409D76:                             ; CODE XREF: sub_4096D0+88C↓j
.text:00409D76                                         ; sub_4096D0+89D↓j
.text:00409D76                 inc     [esp+5Ch+var_3C]
.text:00409D7A                 add     esi, 10h
.text:00409D7D                 mov     edx, [esi]
.text:00409D7F                 test    edx, edx
.text:00409D81                 mov     ecx, edx
.text:00409D83                 jnz     short loc_409D57
.text:00409D85
.text:00409D85 loc_409D85:                             ; CODE XREF: sub_4096D0+8B6↓j
.text:00409D85                 mov     esi, [esp+5Ch+var_34]
.text:00409D89                 test    esi, esi
.text:00409D8B                 jz      short loc_409D99
.text:00409D8D                 mov     ebx, [esp+5Ch+var_30]
.text:00409D91                 test    ebx, ebx
.text:00409D93                 jz      loc_409EE1
.text:00409D99
.text:00409D99 loc_409D99:                             ; CODE XREF: sub_4096D0+6BB↑j
.text:00409D99                 mov     esi, [esp+5Ch+var_2C]
.text:00409D9D                 test    esi, esi
.text:00409D9F                 jz      loc_409ED0
.text:00409DA5                 cmp     byte ptr [edi], 0
.text:00409DA8                 jz      loc_409E50
.text:00409DAE                 mov     ecx, [esp+5Ch+var_2C]
.text:00409DB2                 mov     ebx, [ecx+4]
.text:00409DB5                 test    ebx, ebx
.text:00409DB7                 jz      short loc_409DF8
.text:00409DB9                 lea     edx, [edi+1]
.text:00409DBC                 mov     [ebp+0Ch], edx
.text:00409DBF
.text:00409DBF loc_409DBF:                             ; CODE XREF: sub_4096D0+788↓j
.text:00409DBF                                         ; sub_4096D0+7A7↓j
.text:00409DBF                 mov     edi, [ebp+14h]
.text:00409DC2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00409DC5                 call    strlen
.text:00409DCA                 add     [ebp+14h], eax
.text:00409DCD                 mov     eax, [esp+5Ch+arg_10]
.text:00409DD1                 test    eax, eax
.text:00409DD3                 jz      short loc_409DE0
.text:00409DD5                 mov     edx, [esp+5Ch+var_38]
.text:00409DD9                 mov     ebp, [esp+5Ch+arg_10]
.text:00409DDD                 mov     [ebp+0], edx
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: sub_4096D0+703↑j
.text:00409DE0                 mov     eax, [esp+5Ch+var_2C]
.text:00409DE4                 mov     ecx, [eax+8]
.text:00409DE7                 test    ecx, ecx
.text:00409DE9                 jnz     loc_4099AA
.text:00409DEF                 mov     ecx, [esp+5Ch+var_2C]
.text:00409DF3                 jmp     loc_4099A2
.text:00409DF8 ; ---------------------------------------------------------------------------
.text:00409DF8
.text:00409DF8 loc_409DF8:                             ; CODE XREF: sub_4096D0+6E7↑j
.text:00409DF8                 mov     eax, [esp+5Ch+var_14]
.text:00409DFC                 test    eax, eax
.text:00409DFE                 jnz     short loc_409E13
.text:00409E00
.text:00409E00 loc_409E00:                             ; CODE XREF: sub_4096D0+779↓j
.text:00409E00                 mov     ecx, [ebp+14h]
.text:00409E03                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409E06                 call    strlen
.text:00409E0B                 add     [ebp+14h], eax
.text:00409E0E                 jmp     loc_409A28
.text:00409E13 ; ---------------------------------------------------------------------------
.text:00409E13
.text:00409E13 loc_409E13:                             ; CODE XREF: sub_4096D0+72E↑j
.text:00409E13                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00409E1A                 call    ds:libintl_gettext
.text:00409E20                 mov     edx, [esp+5Ch+var_2C]
.text:00409E24                 mov     ebx, [esp+5Ch+arg_4]
.text:00409E28                 mov     edi, [edx]
.text:00409E2A                 mov     [esp+5Ch+var_50], edi
.text:00409E2E                 mov     edi, ds:_iob
.text:00409E34                 mov     esi, [ebx]
.text:00409E36                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409E3A                 add     edi, 40h ; '@'
.text:00409E3D                 mov     [esp+5Ch+MaxCount], esi
.text:00409E41                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00409E44                 call    fprintf
.text:00409E49                 jmp     short loc_409E00
.text:00409E49 ; ---------------------------------------------------------------------------
.text:00409E4B                 align 10h
.text:00409E50
.text:00409E50 loc_409E50:                             ; CODE XREF: sub_4096D0+6D8↑j
.text:00409E50                 mov     esi, [esp+5Ch+var_2C]
.text:00409E54                 cmp     dword ptr [esi+4], 1
.text:00409E58                 jnz     loc_409DBF
.text:00409E5E                 mov     ecx, [ebp+0]
.text:00409E61                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409E65                 jge     short loc_409E7C
.text:00409E67                 mov     eax, [esp+5Ch+arg_4]
.text:00409E6B                 lea     ebx, [ecx+1]
.text:00409E6E                 mov     [ebp+0], ebx
.text:00409E71                 mov     edi, [eax+ecx*4]
.text:00409E74                 mov     [ebp+0Ch], edi
.text:00409E77                 jmp     loc_409DBF
.text:00409E7C ; ---------------------------------------------------------------------------
.text:00409E7C
.text:00409E7C loc_409E7C:                             ; CODE XREF: sub_4096D0+795↑j
.text:00409E7C                 mov     edx, [esp+5Ch+var_14]
.text:00409E80                 test    edx, edx
.text:00409E82                 jnz     short loc_409E97
.text:00409E84
.text:00409E84 loc_409E84:                             ; CODE XREF: sub_4096D0+7FE↓j
.text:00409E84                 mov     edx, [ebp+14h]
.text:00409E87                 mov     [esp+5Ch+Str1], edx ; Str
.text:00409E8A                 call    strlen
.text:00409E8F                 add     [ebp+14h], eax
.text:00409E92                 jmp     loc_409AB9
.text:00409E97 ; ---------------------------------------------------------------------------
.text:00409E97
.text:00409E97 loc_409E97:                             ; CODE XREF: sub_4096D0+7B2↑j
.text:00409E97                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00409E9E                 call    ds:libintl_gettext
.text:00409EA4                 mov     ecx, [ebp+0]
.text:00409EA7                 mov     ebx, [esp+5Ch+arg_4]
.text:00409EAB                 mov     edi, [ebx+ecx*4-4]
.text:00409EAF                 mov     ecx, ds:_iob
.text:00409EB5                 mov     [esp+5Ch+var_50], edi
.text:00409EB9                 mov     esi, [ebx]
.text:00409EBB                 add     ecx, 40h ; '@'
.text:00409EBE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409EC2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409EC5                 mov     [esp+5Ch+MaxCount], esi
.text:00409EC9                 call    fprintf
.text:00409ECE                 jmp     short loc_409E84
.text:00409ED0 ; ---------------------------------------------------------------------------
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: sub_4096D0+67F↑j
.text:00409ED0                                         ; sub_4096D0+6CF↑j
.text:00409ED0                 mov     dword ptr [ebp+14h], 0
.text:00409ED7                 mov     eax, 57h ; 'W'
.text:00409EDC                 jmp     loc_409827
.text:00409EE1 ; ---------------------------------------------------------------------------
.text:00409EE1
.text:00409EE1 loc_409EE1:                             ; CODE XREF: sub_4096D0+6C3↑j
.text:00409EE1                 mov     edi, [esp+5Ch+var_14]
.text:00409EE5                 test    edi, edi
.text:00409EE7                 jnz     short loc_409EFF
.text:00409EE9
.text:00409EE9 loc_409EE9:                             ; CODE XREF: sub_4096D0+865↓j
.text:00409EE9                 mov     edx, [ebp+14h]
.text:00409EEC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00409EEF                 call    strlen
.text:00409EF4                 add     [ebp+14h], eax
.text:00409EF7                 inc     dword ptr [ebp+0]
.text:00409EFA                 jmp     loc_409A28
.text:00409EFF ; ---------------------------------------------------------------------------
.text:00409EFF
.text:00409EFF loc_409EFF:                             ; CODE XREF: sub_4096D0+817↑j
.text:00409EFF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00409F06                 call    ds:libintl_gettext
.text:00409F0C                 mov     ecx, [ebp+0]
.text:00409F0F                 mov     ebx, [esp+5Ch+arg_4]
.text:00409F13                 mov     edi, [ebx+ecx*4]
.text:00409F16                 mov     ecx, ds:_iob
.text:00409F1C                 mov     [esp+5Ch+var_50], edi
.text:00409F20                 mov     esi, [ebx]
.text:00409F22                 add     ecx, 40h ; '@'
.text:00409F25                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409F29                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409F2C                 mov     [esp+5Ch+MaxCount], esi
.text:00409F30                 call    fprintf
.text:00409F35                 jmp     short loc_409EE9
.text:00409F37 ; ---------------------------------------------------------------------------
.text:00409F37
.text:00409F37 loc_409F37:                             ; CODE XREF: sub_4096D0+6A0↑j
.text:00409F37                 mov     edx, [ebp+14h]
.text:00409F3A                 mov     ebx, edi
.text:00409F3C                 mov     ecx, [esi]
.text:00409F3E                 sub     ebx, edx
.text:00409F40                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409F43                 call    strlen
.text:00409F48                 cmp     ebx, eax
.text:00409F4A                 jz      short loc_409F72
.text:00409F4C                 mov     ebx, [esp+5Ch+var_2C]
.text:00409F50                 test    ebx, ebx
.text:00409F52                 jz      short loc_409F61
.text:00409F54                 mov     [esp+5Ch+var_34], 1
.text:00409F5C                 jmp     loc_409D76
.text:00409F61 ; ---------------------------------------------------------------------------
.text:00409F61
.text:00409F61 loc_409F61:                             ; CODE XREF: sub_4096D0+882↑j
.text:00409F61                 mov     [esp+5Ch+var_2C], esi
.text:00409F65                 mov     ecx, [esp+5Ch+var_3C]
.text:00409F69                 mov     [esp+5Ch+var_38], ecx
.text:00409F6D                 jmp     loc_409D76
.text:00409F72 ; ---------------------------------------------------------------------------
.text:00409F72
.text:00409F72 loc_409F72:                             ; CODE XREF: sub_4096D0+87A↑j
.text:00409F72                 mov     [esp+5Ch+var_2C], esi
.text:00409F76                 mov     eax, [esp+5Ch+var_3C]
.text:00409F7A                 mov     [esp+5Ch+var_30], 1
.text:00409F82                 mov     [esp+5Ch+var_38], eax
.text:00409F86                 jmp     loc_409D85
.text:00409F8B ; ---------------------------------------------------------------------------
.text:00409F8B
.text:00409F8B loc_409F8B:                             ; CODE XREF: sub_4096D0+646↑j
.text:00409F8B                 mov     edx, [ebp+0]
.text:00409F8E                 cmp     edx, [esp+5Ch+arg_0]
.text:00409F92                 jz      short loc_409FA9
.text:00409F94                 mov     ebx, [esp+5Ch+arg_4]
.text:00409F98                 lea     esi, [edx+1]
.text:00409F9B                 mov     [ebp+0], esi
.text:00409F9E                 mov     edi, [ebx+edx*4]
.text:00409FA1                 mov     [ebp+0Ch], edi
.text:00409FA4                 jmp     loc_409D22
.text:00409FA9 ; ---------------------------------------------------------------------------
.text:00409FA9
.text:00409FA9 loc_409FA9:                             ; CODE XREF: sub_4096D0+8C2↑j
.text:00409FA9                 mov     edi, [esp+5Ch+var_14]
.text:00409FAD                 test    edi, edi
.text:00409FAF                 jnz     short loc_409FCC
.text:00409FB1
.text:00409FB1 loc_409FB1:                             ; CODE XREF: sub_4096D0+92C↓j
.text:00409FB1                 mov     [ebp+8], esi
.text:00409FB4                 mov     ebp, [esp+5Ch+Str]
.text:00409FB8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00409FBC                 jz      short loc_409FC8
.text:00409FBE                 mov     bl, 3Fh ; '?'
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: sub_4096D0+8FA↓j
.text:00409FC0                 movsx   eax, bl
.text:00409FC3                 jmp     loc_409827
.text:00409FC8 ; ---------------------------------------------------------------------------
.text:00409FC8
.text:00409FC8 loc_409FC8:                             ; CODE XREF: sub_4096D0+8EC↑j
.text:00409FC8                 mov     bl, 3Ah ; ':'
.text:00409FCA                 jmp     short loc_409FC0
.text:00409FCC ; ---------------------------------------------------------------------------
.text:00409FCC
.text:00409FCC loc_409FCC:                             ; CODE XREF: sub_4096D0+8DF↑j
.text:00409FCC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00409FD3                 call    ds:libintl_gettext
.text:00409FD9                 mov     [esp+5Ch+var_50], esi
.text:00409FDD                 mov     edx, [esp+5Ch+arg_4]
.text:00409FE1                 mov     ecx, ds:_iob
.text:00409FE7                 mov     ebx, [edx]
.text:00409FE9                 add     ecx, 40h ; '@'
.text:00409FEC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409FF0                 mov     [esp+5Ch+MaxCount], ebx
.text:00409FF4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409FF7                 call    fprintf
.text:00409FFC                 jmp     short loc_409FB1
.text:00409FFC ; ---------------------------------------------------------------------------
.text:00409FFE                 align 10h
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_4096D0+54C↑j
.text:0040A000                                         ; sub_4096D0+555↑j
.text:0040A000                 mov     eax, [esp+5Ch+var_14]
.text:0040A004                 test    eax, eax
.text:0040A006                 jz      short loc_40A03F
.text:0040A008                 mov     ebx, [ebp+1Ch]
.text:0040A00B                 test    ebx, ebx
.text:0040A00D                 jz      short loc_40A047
.text:0040A00F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:0040A016
.text:0040A016 loc_40A016:                             ; CODE XREF: sub_4096D0+97E↓j
.text:0040A016                 call    ds:libintl_gettext
.text:0040A01C                 mov     [esp+5Ch+var_50], esi
.text:0040A020                 mov     ebx, [esp+5Ch+arg_4]
.text:0040A024                 mov     edx, ds:_iob
.text:0040A02A                 mov     esi, [ebx]
.text:0040A02C                 add     edx, 40h ; '@'
.text:0040A02F                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040A033                 mov     [esp+5Ch+MaxCount], esi
.text:0040A037                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040A03A                 call    fprintf
.text:0040A03F
.text:0040A03F loc_40A03F:                             ; CODE XREF: sub_4096D0+936↑j
.text:0040A03F                 mov     [ebp+8], edi
.text:0040A042                 jmp     loc_409A28
.text:0040A047 ; ---------------------------------------------------------------------------
.text:0040A047
.text:0040A047 loc_40A047:                             ; CODE XREF: sub_4096D0+93D↑j
.text:0040A047                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040A04E                 jmp     short loc_40A016
.text:0040A050 ; ---------------------------------------------------------------------------
.text:0040A050
.text:0040A050 loc_40A050:                             ; CODE XREF: sub_4096D0+26E↑j
.text:0040A050                 mov     edi, [esp+5Ch+var_14]
.text:0040A054                 test    edi, edi
.text:0040A056                 jnz     short loc_40A06E
.text:0040A058
.text:0040A058 loc_40A058:                             ; CODE XREF: sub_4096D0+9D4↓j
.text:0040A058                 mov     edx, [ebp+14h]
.text:0040A05B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040A05E                 call    strlen
.text:0040A063                 add     [ebp+14h], eax
.text:0040A066                 inc     dword ptr [ebp+0]
.text:0040A069                 jmp     loc_409BAE
.text:0040A06E ; ---------------------------------------------------------------------------
.text:0040A06E
.text:0040A06E loc_40A06E:                             ; CODE XREF: sub_4096D0+986↑j
.text:0040A06E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:0040A075                 call    ds:libintl_gettext
.text:0040A07B                 mov     ebx, [ebp+0]
.text:0040A07E                 mov     edi, [esp+5Ch+arg_4]
.text:0040A082                 mov     ecx, [edi+ebx*4]
.text:0040A085                 mov     ebx, ds:_iob
.text:0040A08B                 mov     [esp+5Ch+var_50], ecx
.text:0040A08F                 mov     esi, [edi]
.text:0040A091                 add     ebx, 40h ; '@'
.text:0040A094                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040A098                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040A09B                 mov     [esp+5Ch+MaxCount], esi
.text:0040A09F                 call    fprintf
.text:0040A0A4                 jmp     short loc_40A058
.text:0040A0A6 ; ---------------------------------------------------------------------------
.text:0040A0A6
.text:0040A0A6 loc_40A0A6:                             ; CODE XREF: sub_4096D0+246↑j
.text:0040A0A6                 mov     ecx, [ebp+14h]
.text:0040A0A9                 mov     ebx, edi
.text:0040A0AB                 mov     edx, [esi]
.text:0040A0AD                 sub     ebx, ecx
.text:0040A0AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040A0B2                 call    strlen
.text:0040A0B7                 cmp     ebx, eax
.text:0040A0B9                 jz      short loc_40A111
.text:0040A0BB                 mov     ebx, [esp+5Ch+var_18]
.text:0040A0BF                 test    ebx, ebx
.text:0040A0C1                 jz      short loc_40A100
.text:0040A0C3                 mov     edx, [esp+5Ch+arg_14]
.text:0040A0C7                 test    edx, edx
.text:0040A0C9                 jnz     short loc_40A0D7
.text:0040A0CB                 mov     ecx, [esp+5Ch+var_18]
.text:0040A0CF                 mov     ebx, [esi+4]
.text:0040A0D2                 cmp     [ecx+4], ebx
.text:0040A0D5                 jz      short loc_40A0E4
.text:0040A0D7
.text:0040A0D7 loc_40A0D7:                             ; CODE XREF: sub_4096D0+9F9↑j
.text:0040A0D7                                         ; sub_4096D0+A1A↓j ...
.text:0040A0D7                 mov     [esp+5Ch+var_20], 1
.text:0040A0DF                 jmp     loc_40991C
.text:0040A0E4 ; ---------------------------------------------------------------------------
.text:0040A0E4
.text:0040A0E4 loc_40A0E4:                             ; CODE XREF: sub_4096D0+A05↑j
.text:0040A0E4                 mov     edx, [esi+8]
.text:0040A0E7                 cmp     [ecx+8], edx
.text:0040A0EA                 jnz     short loc_40A0D7
.text:0040A0EC                 mov     ebx, [esi+0Ch]
.text:0040A0EF                 cmp     [ecx+0Ch], ebx
.text:0040A0F2                 jnz     short loc_40A0D7
.text:0040A0F4                 jmp     loc_40991C
.text:0040A0F4 ; ---------------------------------------------------------------------------
.text:0040A0F9                 align 10h
.text:0040A100
.text:0040A100 loc_40A100:                             ; CODE XREF: sub_4096D0+9F1↑j
.text:0040A100                 mov     [esp+5Ch+var_18], esi
.text:0040A104                 mov     eax, [esp+5Ch+var_28]
.text:0040A108                 mov     [esp+5Ch+var_24], eax
.text:0040A10C                 jmp     loc_40991C
.text:0040A111 ; ---------------------------------------------------------------------------
.text:0040A111
.text:0040A111 loc_40A111:                             ; CODE XREF: sub_4096D0+9E9↑j
.text:0040A111                 mov     [esp+5Ch+var_18], esi
.text:0040A115                 mov     ecx, [esp+5Ch+var_28]
.text:0040A119                 mov     [esp+5Ch+var_1C], 1
.text:0040A121                 mov     [esp+5Ch+var_24], ecx
.text:0040A125                 jmp     loc_409930
.text:0040A12A ; ---------------------------------------------------------------------------
.text:0040A12A
.text:0040A12A loc_40A12A:                             ; CODE XREF: sub_4096D0+1BF↑j
.text:0040A12A                 mov     eax, [esp+5Ch+Str]
.text:0040A12E                 movsx   esi, dl
.text:0040A131                 mov     [esp+5Ch+Str2], esi ; Val
.text:0040A135                 mov     [esp+5Ch+Str1], eax ; Str
.text:0040A138                 call    strchr
.text:0040A13D                 test    eax, eax
.text:0040A13F                 jnz     loc_409BF0
.text:0040A145                 jmp     loc_409895
.text:0040A14A ; ---------------------------------------------------------------------------
.text:0040A14A
.text:0040A14A loc_40A14A:                             ; CODE XREF: sub_4096D0+17C↑j
.text:0040A14A                 mov     ecx, 1
.text:0040A14F                 jmp     loc_409852
.text:0040A154 ; ---------------------------------------------------------------------------
.text:0040A154
.text:0040A154 loc_40A154:                             ; CODE XREF: sub_4096D0+D4↑j
.text:0040A154                                         ; sub_4096D0+130↑j
.text:0040A154                 mov     eax, [ebp+20h]
.text:0040A157                 cmp     eax, [ebp+24h]
.text:0040A15A                 jz      loc_409830
.text:0040A160                 mov     [ebp+0], eax
.text:0040A163                 jmp     loc_409830
.text:0040A168 ; ---------------------------------------------------------------------------
.text:0040A168
.text:0040A168 loc_40A168:                             ; CODE XREF: sub_4096D0+FE↑j
.text:0040A168                 mov     [ebp+20h], eax
.text:0040A16B                 jmp     loc_4097F0
.text:0040A170 ; ---------------------------------------------------------------------------
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: sub_4096D0+CA↑j
.text:0040A170                 mov     edx, [ebp+20h]
.text:0040A173                 mov     eax, [ebp+24h]
.text:0040A176                 cmp     edx, eax
.text:0040A178                 jz      short loc_40A1F0
.text:0040A17A                 cmp     eax, ebx
.text:0040A17C                 jz      short loc_40A191
.text:0040A17E                 mov     [esp+5Ch+Str2], ebp
.text:0040A182                 mov     ebx, [esp+5Ch+arg_4]
.text:0040A186                 mov     [esp+5Ch+Str1], ebx
.text:0040A189                 call    sub_40A380
.text:0040A18E                 mov     ebx, [ebp+0]
.text:0040A191
.text:0040A191 loc_40A191:                             ; CODE XREF: sub_4096D0+AAC↑j
.text:0040A191                                         ; sub_4096D0+B22↓j ...
.text:0040A191                 cmp     ebx, [esp+5Ch+arg_0]
.text:0040A195                 jge     short loc_40A1E0
.text:0040A197                 mov     esi, [esp+5Ch+arg_4]
.text:0040A19B                 mov     eax, [esi+ebx*4]
.text:0040A19E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040A1A1                 jz      short loc_40A1E8
.text:0040A1A3                 lea     esi, [esi+0]
.text:0040A1A9                 lea     edi, [edi+0]
.text:0040A1B0
.text:0040A1B0 loc_40A1B0:                             ; CODE XREF: sub_4096D0+AFC↓j
.text:0040A1B0                                         ; sub_4096D0+B1C↓j
.text:0040A1B0                 lea     eax, [ebx+1]
.text:0040A1B3                 mov     ebx, eax
.text:0040A1B5                 mov     [ebp+0], eax
.text:0040A1B8                 cmp     eax, [esp+5Ch+arg_0]
.text:0040A1BC                 jge     short loc_40A1E0
.text:0040A1BE                 mov     edi, [esp+5Ch+arg_4]
.text:0040A1C2                 mov     edx, [edi+eax*4]
.text:0040A1C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:0040A1C8                 jz      short loc_40A1D0
.text:0040A1CA
.text:0040A1CA loc_40A1CA:                             ; CODE XREF: sub_4096D0+B04↓j
.text:0040A1CA                 mov     ebx, eax
.text:0040A1CC                 jmp     short loc_40A1B0
.text:0040A1CC ; ---------------------------------------------------------------------------
.text:0040A1CE                 align 10h
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: sub_4096D0+AF8↑j
.text:0040A1D0                 cmp     byte ptr [edx+1], 0
.text:0040A1D4                 jz      short loc_40A1CA
.text:0040A1D6                 lea     esi, [esi+0]
.text:0040A1D9                 lea     edi, [edi+0]
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_4096D0+AC5↑j
.text:0040A1E0                                         ; sub_4096D0+AEC↑j ...
.text:0040A1E0                 mov     [ebp+24h], ebx
.text:0040A1E3                 jmp     loc_4097A0
.text:0040A1E8 ; ---------------------------------------------------------------------------
.text:0040A1E8
.text:0040A1E8 loc_40A1E8:                             ; CODE XREF: sub_4096D0+AD1↑j
.text:0040A1E8                 cmp     byte ptr [eax+1], 0
.text:0040A1EC                 jz      short loc_40A1B0
.text:0040A1EE                 jmp     short loc_40A1E0
.text:0040A1F0 ; ---------------------------------------------------------------------------
.text:0040A1F0
.text:0040A1F0 loc_40A1F0:                             ; CODE XREF: sub_4096D0+AA8↑j
.text:0040A1F0                 cmp     edx, ebx
.text:0040A1F2                 jz      short loc_40A191
.text:0040A1F4                 mov     [ebp+20h], ebx
.text:0040A1F7                 jmp     short loc_40A191
.text:0040A1F9 ; ---------------------------------------------------------------------------
.text:0040A1F9
.text:0040A1F9 loc_40A1F9:                             ; CODE XREF: sub_4096D0+88↑j
.text:0040A1F9                 mov     dword ptr [ebp+18h], 0
.text:0040A200                 mov     esi, [esp+5Ch+Str]
.text:0040A204
.text:0040A204 loc_40A204:                             ; CODE XREF: sub_4096D0+B49↓j
.text:0040A204                 inc     esi
.text:0040A205                 jmp     loc_409768
.text:0040A205 ; ---------------------------------------------------------------------------
.text:0040A20A                 align 10h
.text:0040A210
.text:0040A210 loc_40A210:                             ; CODE XREF: sub_4096D0+80↑j
.text:0040A210                 mov     dword ptr [ebp+18h], 2
.text:0040A217                 mov     esi, ecx
.text:0040A219                 jmp     short loc_40A204
.text:0040A219 ; ---------------------------------------------------------------------------
.text:0040A21B                 align 10h
.text:0040A220
.text:0040A220 loc_40A220:                             ; CODE XREF: sub_4096D0+69↑j
.text:0040A220                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0040A227                 call    getenv
.text:0040A22C                 test    eax, eax
.text:0040A22E                 jz      loc_409744
.text:0040A234                 jmp     loc_40973F
.text:0040A234 ; ---------------------------------------------------------------------------
.text:0040A239                 align 10h
.text:0040A240
.text:0040A240 loc_40A240:                             ; CODE XREF: sub_4096D0+3F↑j
.text:0040A240                 mov     dword ptr [ebp+0], 1
.text:0040A247                 mov     ebx, 1
.text:0040A24C                 jmp     loc_409720
.text:0040A24C sub_4096D0      endp
.text:0040A24C
.text:0040A251 ; ---------------------------------------------------------------------------
.text:0040A251                 jmp     short sub_40A260
.text:0040A251 ; ---------------------------------------------------------------------------
.text:0040A253                 align 10h
.text:0040A260
.text:0040A260 ; =============== S U B R O U T I N E =======================================
.text:0040A260
.text:0040A260
.text:0040A260 ; int __cdecl sub_40A260(int, int, char *, int, int, int, int)
.text:0040A260 sub_40A260      proc near               ; CODE XREF: .text:0040A251↑j
.text:0040A260                                         ; sub_40B820+3A↓p ...
.text:0040A260
.text:0040A260 var_2C          = dword ptr -2Ch
.text:0040A260 var_28          = dword ptr -28h
.text:0040A260 Str             = dword ptr -24h
.text:0040A260 var_20          = dword ptr -20h
.text:0040A260 var_1C          = dword ptr -1Ch
.text:0040A260 var_18          = dword ptr -18h
.text:0040A260 var_14          = dword ptr -14h
.text:0040A260 var_10          = dword ptr -10h
.text:0040A260 arg_0           = dword ptr  4
.text:0040A260 arg_4           = dword ptr  8
.text:0040A260 arg_8           = dword ptr  0Ch
.text:0040A260 arg_C           = dword ptr  10h
.text:0040A260 arg_10          = dword ptr  14h
.text:0040A260 arg_14          = dword ptr  18h
.text:0040A260 arg_18          = dword ptr  1Ch
.text:0040A260
.text:0040A260                 sub     esp, 2Ch
.text:0040A263                 mov     edx, dword_421020
.text:0040A269                 mov     [esp+2Ch+var_10], offset dword_422290 ; int
.text:0040A271                 mov     ecx, dword_421024
.text:0040A277                 mov     ds:dword_422290, edx
.text:0040A27D                 mov     edx, [esp+2Ch+arg_18]
.text:0040A281                 mov     ds:dword_422294, ecx
.text:0040A287                 mov     ecx, [esp+2Ch+arg_14]
.text:0040A28B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040A28F                 mov     edx, [esp+2Ch+arg_10]
.text:0040A293                 mov     [esp+2Ch+var_18], ecx ; int
.text:0040A297                 mov     ecx, [esp+2Ch+arg_C]
.text:0040A29B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040A29F                 mov     edx, [esp+2Ch+arg_8]
.text:0040A2A3                 mov     [esp+2Ch+var_20], ecx ; int
.text:0040A2A7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A2AB                 mov     [esp+2Ch+Str], edx ; Str
.text:0040A2AF                 mov     edx, [esp+2Ch+arg_0]
.text:0040A2B3                 mov     [esp+2Ch+var_28], ecx ; int
.text:0040A2B7                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040A2BA                 call    sub_4096D0
.text:0040A2BF                 mov     ecx, ds:dword_422290
.text:0040A2C5                 mov     dword_421020, ecx
.text:0040A2CB                 mov     ecx, ds:dword_42229C
.text:0040A2D1                 mov     ds:dword_422950, ecx
.text:0040A2D7                 mov     ecx, ds:dword_422298
.text:0040A2DD                 mov     dword_421028, ecx
.text:0040A2E3                 add     esp, 2Ch
.text:0040A2E6                 retn
.text:0040A2E6 sub_40A260      endp
.text:0040A2E6
.text:0040A2E6 ; ---------------------------------------------------------------------------
.text:0040A2E7                 align 10h
.text:0040A2F0                 sub     esp, 2Ch
.text:0040A2F3                 mov     edx, dword_421020
.text:0040A2F9                 mov     dword ptr [esp+1Ch], offset dword_422290
.text:0040A301                 mov     ecx, dword_421024
.text:0040A307                 mov     dword ptr [esp+18h], 1
.text:0040A30F                 mov     ds:dword_422290, edx
.text:0040A315                 mov     edx, [esp+38h]
.text:0040A319                 mov     ds:dword_422294, ecx
.text:0040A31F                 mov     ecx, [esp+34h]
.text:0040A323                 mov     [esp+8], edx
.text:0040A327                 mov     edx, [esp+30h]
.text:0040A32B                 mov     [esp+4], ecx
.text:0040A32F                 mov     dword ptr [esp+14h], 0
.text:0040A337                 mov     dword ptr [esp+10h], 0
.text:0040A33F                 mov     dword ptr [esp+0Ch], 0
.text:0040A347                 mov     [esp], edx
.text:0040A34A                 call    sub_4096D0
.text:0040A34F                 mov     ecx, ds:dword_422290
.text:0040A355                 mov     dword_421020, ecx
.text:0040A35B                 mov     ecx, ds:dword_42229C
.text:0040A361                 mov     ds:dword_422950, ecx
.text:0040A367                 mov     ecx, ds:dword_422298
.text:0040A36D                 mov     dword_421028, ecx
.text:0040A373                 add     esp, 2Ch
.text:0040A376                 retn
.text:0040A376 ; ---------------------------------------------------------------------------
.text:0040A377                 align 10h
.text:0040A380
.text:0040A380 ; =============== S U B R O U T I N E =======================================
.text:0040A380
.text:0040A380
.text:0040A380 sub_40A380      proc near               ; CODE XREF: sub_4096D0+113↑p
.text:0040A380                                         ; sub_4096D0+AB9↑p
.text:0040A380
.text:0040A380 var_2C          = dword ptr -2Ch
.text:0040A380 var_28          = dword ptr -28h
.text:0040A380 var_24          = dword ptr -24h
.text:0040A380 var_20          = dword ptr -20h
.text:0040A380 var_1C          = dword ptr -1Ch
.text:0040A380 var_18          = dword ptr -18h
.text:0040A380 var_14          = dword ptr -14h
.text:0040A380 arg_0           = dword ptr  4
.text:0040A380 arg_4           = dword ptr  8
.text:0040A380
.text:0040A380                 push    ebp
.text:0040A381                 push    edi
.text:0040A382                 push    esi
.text:0040A383                 push    ebx
.text:0040A384                 sub     esp, 1Ch
.text:0040A387                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A38B                 mov     eax, [esp+2Ch+arg_4]
.text:0040A38F                 mov     ebx, [esp+2Ch+arg_4]
.text:0040A393                 mov     edx, [ecx+20h]
.text:0040A396                 mov     edi, [esp+2Ch+arg_0]
.text:0040A39A                 mov     ecx, [ebx]
.text:0040A39C                 mov     [esp+2Ch+var_2C], edx
.text:0040A39F                 mov     [esp+2Ch+var_14], edx
.text:0040A3A3                 mov     edx, [eax+24h]
.text:0040A3A6                 mov     [esp+2Ch+var_28], ecx
.text:0040A3AA                 mov     [esp+2Ch+var_1C], ecx
.text:0040A3AE                 cmp     ecx, edx
.text:0040A3B0                 mov     [esp+2Ch+var_18], edx
.text:0040A3B4                 jle     short loc_40A430
.text:0040A3B6                 mov     esi, [esp+2Ch+var_2C]
.text:0040A3B9                 cmp     edx, esi
.text:0040A3BB                 jle     short loc_40A430
.text:0040A3BD                 lea     esi, [esi+0]
.text:0040A3C0
.text:0040A3C0 loc_40A3C0:                             ; CODE XREF: sub_40A380+A1↓j
.text:0040A3C0                 mov     ebx, [esp+2Ch+var_1C]
.text:0040A3C4                 mov     edx, [esp+2Ch+var_18]
.text:0040A3C8                 mov     ebp, [esp+2Ch+var_18]
.text:0040A3CC                 mov     eax, [esp+2Ch+var_14]
.text:0040A3D0                 sub     ebx, edx
.text:0040A3D2                 mov     [esp+2Ch+var_20], ebx
.text:0040A3D6                 sub     ebp, eax
.text:0040A3D8                 cmp     ebx, ebp
.text:0040A3DA                 jle     short loc_40A455
.text:0040A3DC                 xor     esi, esi
.text:0040A3DE                 cmp     esi, ebp
.text:0040A3E0                 jge     short loc_40A40D
.text:0040A3E2                 mov     ecx, [esp+2Ch+var_1C]
.text:0040A3E6                 sub     ecx, ebp
.text:0040A3E8                 mov     [esp+2Ch+var_24], ecx
.text:0040A3EC                 lea     esi, [esi+0]
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_40A380+8B↓j
.text:0040A3F0                 mov     ecx, [esp+2Ch+var_14]
.text:0040A3F4                 mov     edx, [esp+2Ch+var_24]
.text:0040A3F8                 add     ecx, esi
.text:0040A3FA                 add     edx, esi
.text:0040A3FC                 mov     ebx, [edi+ecx*4]
.text:0040A3FF                 mov     eax, [edi+edx*4]
.text:0040A402                 inc     esi
.text:0040A403                 cmp     esi, ebp
.text:0040A405                 mov     [edi+ecx*4], eax
.text:0040A408                 mov     [edi+edx*4], ebx
.text:0040A40B                 jl      short loc_40A3F0
.text:0040A40D
.text:0040A40D loc_40A40D:                             ; CODE XREF: sub_40A380+60↑j
.text:0040A40D                 sub     [esp+2Ch+var_1C], ebp
.text:0040A411
.text:0040A411 loc_40A411:                             ; CODE XREF: sub_40A380+107↓j
.text:0040A411                 mov     eax, [esp+2Ch+var_18]
.text:0040A415                 cmp     [esp+2Ch+var_1C], eax
.text:0040A419                 jle     short loc_40A430
.text:0040A41B                 mov     ebp, [esp+2Ch+var_14]
.text:0040A41F                 cmp     eax, ebp
.text:0040A421                 jg      short loc_40A3C0
.text:0040A423                 lea     esi, [esi+0]
.text:0040A429                 lea     edi, [edi+0]
.text:0040A430
.text:0040A430 loc_40A430:                             ; CODE XREF: sub_40A380+34↑j
.text:0040A430                                         ; sub_40A380+3B↑j ...
.text:0040A430                 mov     esi, [esp+2Ch+var_28]
.text:0040A434                 mov     ecx, [esp+2Ch+var_18]
.text:0040A438                 mov     eax, [esp+2Ch+var_2C]
.text:0040A43B                 mov     edi, [esp+2Ch+arg_4]
.text:0040A43F                 mov     edx, [esp+2Ch+var_28]
.text:0040A443                 sub     esi, ecx
.text:0040A445                 add     esi, eax
.text:0040A447                 mov     [edi+20h], esi
.text:0040A44A                 mov     [edi+24h], edx
.text:0040A44D                 add     esp, 1Ch
.text:0040A450                 pop     ebx
.text:0040A451                 pop     esi
.text:0040A452                 pop     edi
.text:0040A453                 pop     ebp
.text:0040A454                 retn
.text:0040A455 ; ---------------------------------------------------------------------------
.text:0040A455
.text:0040A455 loc_40A455:                             ; CODE XREF: sub_40A380+5A↑j
.text:0040A455                 xor     esi, esi
.text:0040A457                 cmp     esi, [esp+2Ch+var_20]
.text:0040A45B                 jge     short loc_40A47F
.text:0040A45D                 lea     esi, [esi+0]
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: sub_40A380+FD↓j
.text:0040A460                 mov     ebx, [esp+2Ch+var_14]
.text:0040A464                 mov     ebp, [esp+2Ch+var_18]
.text:0040A468                 add     ebx, esi
.text:0040A46A                 add     ebp, esi
.text:0040A46C                 mov     edx, [edi+ebx*4]
.text:0040A46F                 inc     esi
.text:0040A470                 cmp     esi, [esp+2Ch+var_20]
.text:0040A474                 mov     ecx, [edi+ebp*4]
.text:0040A477                 mov     [edi+ebx*4], ecx
.text:0040A47A                 mov     [edi+ebp*4], edx
.text:0040A47D                 jl      short loc_40A460
.text:0040A47F
.text:0040A47F loc_40A47F:                             ; CODE XREF: sub_40A380+DB↑j
.text:0040A47F                 mov     esi, [esp+2Ch+var_20]
.text:0040A483                 add     [esp+2Ch+var_14], esi
.text:0040A487                 jmp     short loc_40A411
.text:0040A487 sub_40A380      endp
.text:0040A487
.text:0040A487 ; ---------------------------------------------------------------------------
.text:0040A489                 align 20h
.text:0040A4A0
.text:0040A4A0 ; =============== S U B R O U T I N E =======================================
.text:0040A4A0
.text:0040A4A0
.text:0040A4A0 ; int __cdecl sub_40A4A0(char *, int, int, int)
.text:0040A4A0 sub_40A4A0      proc near               ; CODE XREF: sub_40A7C0+32↓p
.text:0040A4A0
.text:0040A4A0 Str             = dword ptr -2Ch
.text:0040A4A0 Str2            = dword ptr -28h
.text:0040A4A0 MaxCount        = dword ptr -24h
.text:0040A4A0 var_20          = dword ptr -20h
.text:0040A4A0 var_19          = byte ptr -19h
.text:0040A4A0 var_18          = dword ptr -18h
.text:0040A4A0 var_14          = dword ptr -14h
.text:0040A4A0 arg_0           = dword ptr  4
.text:0040A4A0 arg_4           = dword ptr  8
.text:0040A4A0 arg_8           = dword ptr  0Ch
.text:0040A4A0 arg_C           = dword ptr  10h
.text:0040A4A0
.text:0040A4A0                 push    ebp
.text:0040A4A1                 push    edi
.text:0040A4A2                 push    esi
.text:0040A4A3                 push    ebx
.text:0040A4A4                 sub     esp, 1Ch
.text:0040A4A7                 xor     ebx, ebx
.text:0040A4A9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A4B1                 mov     edx, [esp+2Ch+arg_0]
.text:0040A4B5                 mov     ebp, [esp+2Ch+arg_C]
.text:0040A4B9                 mov     [esp+2Ch+var_19], 0
.text:0040A4BE                 mov     [esp+2Ch+Str], edx ; Str
.text:0040A4C1                 call    strlen
.text:0040A4C6                 mov     [esp+2Ch+var_14], eax
.text:0040A4CA                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A4CE                 mov     eax, [ecx]
.text:0040A4D0                 test    eax, eax
.text:0040A4D2                 jz      short loc_40A518
.text:0040A4D4                 mov     [esp+2Ch+var_20], 0
.text:0040A4DC                 lea     esi, [esi+0]
.text:0040A4E0
.text:0040A4E0 loc_40A4E0:                             ; CODE XREF: sub_40A4A0+6A↓j
.text:0040A4E0                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040A4E3                 mov     esi, [esp+2Ch+var_14]
.text:0040A4E7                 mov     ecx, [esp+2Ch+arg_0]
.text:0040A4EB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040A4EF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040A4F3                 call    strncmp
.text:0040A4F8                 test    eax, eax
.text:0040A4FA                 jz      short loc_40A526
.text:0040A4FC
.text:0040A4FC loc_40A4FC:                             ; CODE XREF: sub_40A4A0+CA↓j
.text:0040A4FC                                         ; sub_40A4A0+D1↓j ...
.text:0040A4FC                 add     [esp+2Ch+var_20], ebp
.text:0040A500                 inc     ebx
.text:0040A501                 mov     esi, [esp+2Ch+arg_4]
.text:0040A505                 mov     eax, [esi+ebx*4]
.text:0040A508                 test    eax, eax
.text:0040A50A                 jnz     short loc_40A4E0
.text:0040A50C                 cmp     [esp+2Ch+var_19], 0
.text:0040A511                 mov     edx, 0FFFFFFFEh
.text:0040A516                 jnz     short loc_40A51C
.text:0040A518
.text:0040A518 loc_40A518:                             ; CODE XREF: sub_40A4A0+32↑j
.text:0040A518                 mov     edx, [esp+2Ch+var_18]
.text:0040A51C
.text:0040A51C loc_40A51C:                             ; CODE XREF: sub_40A4A0+76↑j
.text:0040A51C                                         ; sub_40A4A0+9B↓j
.text:0040A51C                 add     esp, 1Ch
.text:0040A51F                 mov     eax, edx
.text:0040A521                 pop     ebx
.text:0040A522                 pop     esi
.text:0040A523                 pop     edi
.text:0040A524                 pop     ebp
.text:0040A525                 retn
.text:0040A526 ; ---------------------------------------------------------------------------
.text:0040A526
.text:0040A526 loc_40A526:                             ; CODE XREF: sub_40A4A0+5A↑j
.text:0040A526                 mov     eax, [esp+2Ch+arg_4]
.text:0040A52A                 mov     edi, [eax+ebx*4]
.text:0040A52D                 mov     [esp+2Ch+Str], edi ; Str
.text:0040A530                 call    strlen
.text:0040A535                 cmp     eax, [esp+2Ch+var_14]
.text:0040A539                 mov     edx, ebx
.text:0040A53B                 jz      short loc_40A51C
.text:0040A53D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A542                 jz      short loc_40A573
.text:0040A544                 mov     ecx, [esp+2Ch+arg_8]
.text:0040A548                 test    ecx, ecx
.text:0040A54A                 jz      short loc_40A56C
.text:0040A54C                 cld
.text:0040A54D                 mov     edi, [esp+2Ch+var_18]
.text:0040A551                 mov     ecx, ebp
.text:0040A553                 mov     esi, [esp+2Ch+arg_8]
.text:0040A557                 mov     edx, [esp+2Ch+var_20]
.text:0040A55B                 imul    edi, ebp
.text:0040A55E                 add     esi, edi
.text:0040A560                 mov     edi, [esp+2Ch+arg_8]
.text:0040A564                 add     edi, edx
.text:0040A566                 cmp     ebp, ebp
.text:0040A568                 repe cmpsb
.text:0040A56A                 jz      short loc_40A4FC
.text:0040A56C
.text:0040A56C loc_40A56C:                             ; CODE XREF: sub_40A4A0+AA↑j
.text:0040A56C                 mov     [esp+2Ch+var_19], 1
.text:0040A571                 jmp     short loc_40A4FC
.text:0040A573 ; ---------------------------------------------------------------------------
.text:0040A573
.text:0040A573 loc_40A573:                             ; CODE XREF: sub_40A4A0+A2↑j
.text:0040A573                 mov     [esp+2Ch+var_18], ebx
.text:0040A577                 jmp     short loc_40A4FC
.text:0040A577 sub_40A4A0      endp
.text:0040A577
.text:0040A577 ; ---------------------------------------------------------------------------
.text:0040A579 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040A579                                         ; DATA XREF: .text:0040A5D2↓o
.text:0040A579                                         ; sub_40A7C0+5A↓o
.text:0040A596 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040A596                                         ; DATA XREF: .text:loc_40A640↓o
.text:0040A596                                         ; sub_40A7C0:loc_40A9B6↓o
.text:0040A5B1 ; ---------------------------------------------------------------------------
.text:0040A5B1                 jmp     short loc_40A5C0
.text:0040A5B1 ; ---------------------------------------------------------------------------
.text:0040A5B3                 align 10h
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: .text:0040A5B1↑j
.text:0040A5C0                 sub     esp, 1Ch
.text:0040A5C3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040A5C8                 mov     [esp+14h], ebx
.text:0040A5CC                 mov     [esp+18h], esi
.text:0040A5D0                 jz      short loc_40A640
.text:0040A5D2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A5D9
.text:0040A5D9 loc_40A5D9:                             ; CODE XREF: .text:0040A647↓j
.text:0040A5D9                 call    ds:libintl_gettext
.text:0040A5DF                 mov     dword ptr [esp], 1
.text:0040A5E6                 mov     edx, [esp+20h]
.text:0040A5EA                 mov     esi, eax
.text:0040A5EC                 mov     [esp+4], edx
.text:0040A5F0                 call    sub_40BBA0
.text:0040A5F5                 mov     dword ptr [esp+4], 5
.text:0040A5FD                 mov     edx, [esp+24h]
.text:0040A601                 mov     ebx, eax
.text:0040A603                 mov     dword ptr [esp], 0
.text:0040A60A                 mov     [esp+8], edx
.text:0040A60E                 call    sub_40DFE0
.text:0040A613                 mov     [esp+0Ch], eax
.text:0040A617                 mov     [esp+10h], ebx
.text:0040A61B                 mov     [esp+8], esi
.text:0040A61F                 mov     dword ptr [esp+4], 0
.text:0040A627                 mov     dword ptr [esp], 0
.text:0040A62E                 call    sub_415D50
.text:0040A633                 mov     ebx, [esp+14h]
.text:0040A637                 mov     esi, [esp+18h]
.text:0040A63B                 add     esp, 1Ch
.text:0040A63E                 retn
.text:0040A63E ; ---------------------------------------------------------------------------
.text:0040A63F                 align 10h
.text:0040A640
.text:0040A640 loc_40A640:                             ; CODE XREF: .text:0040A5D0↑j
.text:0040A640                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A647                 jmp     short loc_40A5D9
.text:0040A647 ; ---------------------------------------------------------------------------
.text:0040A649 aValidArguments db 'Valid arguments are:',0
.text:0040A649                                         ; DATA XREF: .text:0040A693↓o
.text:0040A649                                         ; sub_40A7C0+CB↓o
.text:0040A65E ; const char Format[]
.text:0040A65E Format          db 0Ah                  ; DATA XREF: .text:0040A70D↓o
.text:0040A65E                                         ; sub_40A7C0:loc_40A8F8↓o
.text:0040A65E                 db '  - `%s',27h,0
.text:0040A668 ; const char aS_0[]
.text:0040A668 aS_0            db ', `%s',27h,0        ; DATA XREF: .text:0040A79A↓o
.text:0040A668                                         ; sub_40A7C0:loc_40A990↓o
.text:0040A66F                 align 10h
.text:0040A670                 push    ebp
.text:0040A671                 push    edi
.text:0040A672                 push    esi
.text:0040A673                 push    ebx
.text:0040A674                 sub     esp, 2Ch
.text:0040A677                 mov     ecx, [esp+40h]
.text:0040A67B                 mov     dword ptr [esp+1Ch], 0
.text:0040A683                 mov     eax, [esp+44h]
.text:0040A687                 mov     ebp, [esp+48h]
.text:0040A68B                 mov     [esp+28h], ecx
.text:0040A68F                 mov     [esp+24h], eax
.text:0040A693                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040A69A                 call    ds:libintl_gettext
.text:0040A6A0                 mov     edx, ds:_iob
.text:0040A6A6                 add     edx, 40h ; '@'
.text:0040A6A9                 mov     [esp], edx
.text:0040A6AC                 mov     [esp+4], eax
.text:0040A6B0                 call    fprintf
.text:0040A6B5                 mov     dword ptr [esp+20h], 0
.text:0040A6BD                 mov     edx, [esp+28h]
.text:0040A6C1                 mov     eax, [edx]
.text:0040A6C3                 test    eax, eax
.text:0040A6C5                 jz      short loc_40A745
.text:0040A6C7                 mov     dword ptr [esp+14h], 0
.text:0040A6CF                 mov     esi, [esp+24h]
.text:0040A6D3                 mov     ebx, eax
.text:0040A6D5                 mov     [esp+18h], esi
.text:0040A6D9                 lea     esi, [esi+0]
.text:0040A6E0
.text:0040A6E0 loc_40A6E0:                             ; CODE XREF: .text:0040A743↓j
.text:0040A6E0                 mov     edi, [esp+20h]
.text:0040A6E4                 test    edi, edi
.text:0040A6E6                 jz      short loc_40A703
.text:0040A6E8                 cld
.text:0040A6E9                 mov     edi, [esp+24h]
.text:0040A6ED                 mov     ecx, ebp
.text:0040A6EF                 mov     edx, [esp+14h]
.text:0040A6F3                 mov     esi, [esp+1Ch]
.text:0040A6F7                 add     edi, edx
.text:0040A6F9                 cmp     ebp, ebp
.text:0040A6FB                 repe cmpsb
.text:0040A6FD                 jz      loc_40A790
.text:0040A703
.text:0040A703 loc_40A703:                             ; CODE XREF: .text:0040A6E6↑j
.text:0040A703                 mov     [esp+8], ebx
.text:0040A707                 mov     ecx, ds:_iob
.text:0040A70D                 mov     dword ptr [esp+4], offset Format ; "\n  - `%s'"
.text:0040A715                 add     ecx, 40h ; '@'
.text:0040A718                 mov     [esp], ecx
.text:0040A71B                 call    fprintf
.text:0040A720                 mov     ebx, [esp+18h]
.text:0040A724                 mov     [esp+1Ch], ebx
.text:0040A728
.text:0040A728 loc_40A728:                             ; CODE XREF: .text:0040A7AD↓j
.text:0040A728                 inc     dword ptr [esp+20h]
.text:0040A72C                 mov     eax, [esp+28h]
.text:0040A730                 add     [esp+14h], ebp
.text:0040A734                 mov     edx, [esp+20h]
.text:0040A738                 add     [esp+18h], ebp
.text:0040A73C                 mov     edi, [eax+edx*4]
.text:0040A73F                 test    edi, edi
.text:0040A741                 mov     ebx, edi
.text:0040A743                 jnz     short loc_40A6E0
.text:0040A745
.text:0040A745 loc_40A745:                             ; CODE XREF: .text:0040A6C5↑j
.text:0040A745                 mov     ebx, ds:_iob
.text:0040A74B                 mov     ebp, [ebx+44h]
.text:0040A74E                 dec     ebp
.text:0040A74F                 mov     [ebx+44h], ebp
.text:0040A752                 test    ebp, ebp
.text:0040A754                 js      short loc_40A76D
.text:0040A756                 mov     ecx, ds:_iob
.text:0040A75C                 mov     esi, [ecx+40h]
.text:0040A75F                 mov     byte ptr [esi], 0Ah
.text:0040A762                 inc     dword ptr [ecx+40h]
.text:0040A765                 add     esp, 2Ch
.text:0040A768                 pop     ebx
.text:0040A769                 pop     esi
.text:0040A76A                 pop     edi
.text:0040A76B                 pop     ebp
.text:0040A76C                 retn
.text:0040A76D ; ---------------------------------------------------------------------------
.text:0040A76D
.text:0040A76D loc_40A76D:                             ; CODE XREF: .text:0040A754↑j
.text:0040A76D                 mov     dword ptr [esp+40h], 0Ah
.text:0040A775                 mov     edi, ds:_iob
.text:0040A77B                 add     edi, 40h ; '@'
.text:0040A77E                 mov     [esp+44h], edi
.text:0040A782                 add     esp, 2Ch
.text:0040A785                 pop     ebx
.text:0040A786                 pop     esi
.text:0040A787                 pop     edi
.text:0040A788                 pop     ebp
.text:0040A789                 jmp     _flsbuf
.text:0040A789 ; ---------------------------------------------------------------------------
.text:0040A78E                 align 10h
.text:0040A790
.text:0040A790 loc_40A790:                             ; CODE XREF: .text:0040A6FD↑j
.text:0040A790                 mov     [esp+8], ebx
.text:0040A794                 mov     esi, ds:_iob
.text:0040A79A                 mov     dword ptr [esp+4], offset aS_0 ; ", `%s'"
.text:0040A7A2                 add     esi, 40h ; '@'
.text:0040A7A5                 mov     [esp], esi
.text:0040A7A8                 call    fprintf
.text:0040A7AD                 jmp     loc_40A728
.text:0040A7AD ; ---------------------------------------------------------------------------
.text:0040A7B2                 align 10h
.text:0040A7C0
.text:0040A7C0 ; =============== S U B R O U T I N E =======================================
.text:0040A7C0
.text:0040A7C0
.text:0040A7C0 ; int __cdecl sub_40A7C0(char *, char *, int, int, int, int)
.text:0040A7C0 sub_40A7C0      proc near               ; CODE XREF: sub_401EE0+5C2↑p
.text:0040A7C0                                         ; .text:0040AC1D↓p ...
.text:0040A7C0
.text:0040A7C0 Stream          = dword ptr -4Ch
.text:0040A7C0 Format          = dword ptr -48h
.text:0040A7C0 var_44          = dword ptr -44h
.text:0040A7C0 var_40          = byte ptr -40h
.text:0040A7C0 var_3C          = dword ptr -3Ch
.text:0040A7C0 var_2C          = dword ptr -2Ch
.text:0040A7C0 var_28          = dword ptr -28h
.text:0040A7C0 var_24          = dword ptr -24h
.text:0040A7C0 var_20          = dword ptr -20h
.text:0040A7C0 var_1C          = dword ptr -1Ch
.text:0040A7C0 var_18          = dword ptr -18h
.text:0040A7C0 var_14          = dword ptr -14h
.text:0040A7C0 var_10          = dword ptr -10h
.text:0040A7C0 var_C           = dword ptr -0Ch
.text:0040A7C0 var_8           = dword ptr -8
.text:0040A7C0 var_4           = dword ptr -4
.text:0040A7C0 arg_0           = dword ptr  4
.text:0040A7C0 arg_4           = dword ptr  8
.text:0040A7C0 arg_8           = dword ptr  0Ch
.text:0040A7C0 arg_C           = dword ptr  10h
.text:0040A7C0 arg_10          = dword ptr  14h
.text:0040A7C0 arg_14          = dword ptr  18h
.text:0040A7C0
.text:0040A7C0                 sub     esp, 4Ch
.text:0040A7C3                 mov     edx, [esp+4Ch+arg_10]
.text:0040A7C7                 mov     [esp+4Ch+var_10], ebx
.text:0040A7CB                 mov     ebx, [esp+4Ch+arg_C]
.text:0040A7CF                 mov     [esp+4Ch+var_C], esi
.text:0040A7D3                 mov     esi, [esp+4Ch+arg_4]
.text:0040A7D7                 mov     [esp+4Ch+var_4], ebp
.text:0040A7DB                 mov     ebp, [esp+4Ch+arg_8]
.text:0040A7DF                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:0040A7E3                 mov     [esp+4Ch+var_8], edi
.text:0040A7E7                 mov     [esp+4Ch+var_44], ebx ; int
.text:0040A7EB                 mov     [esp+4Ch+Format], ebp ; int
.text:0040A7EF                 mov     [esp+4Ch+Stream], esi ; char *
.text:0040A7F2                 call    sub_40A4A0
.text:0040A7F7                 test    eax, eax
.text:0040A7F9                 mov     edx, eax
.text:0040A7FB                 js      short loc_40A813
.text:0040A7FD
.text:0040A7FD loc_40A7FD:                             ; CODE XREF: sub_40A7C0+1AA↓j
.text:0040A7FD                 mov     ebx, [esp+4Ch+var_10]
.text:0040A801                 mov     eax, edx
.text:0040A803                 mov     esi, [esp+4Ch+var_C]
.text:0040A807                 mov     edi, [esp+4Ch+var_8]
.text:0040A80B                 mov     ebp, [esp+4Ch+var_4]
.text:0040A80F                 add     esp, 4Ch
.text:0040A812                 retn
.text:0040A813 ; ---------------------------------------------------------------------------
.text:0040A813
.text:0040A813 loc_40A813:                             ; CODE XREF: sub_40A7C0+3B↑j
.text:0040A813                 inc     eax
.text:0040A814                 jz      loc_40A9B6
.text:0040A81A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A821
.text:0040A821 loc_40A821:                             ; CODE XREF: sub_40A7C0+1FD↓j
.text:0040A821                 call    ds:libintl_gettext
.text:0040A827                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040A82E                 mov     edi, [esp+4Ch+arg_0]
.text:0040A832                 mov     [esp+4Ch+var_14], eax
.text:0040A836                 mov     [esp+4Ch+Format], edi ; char *
.text:0040A83A                 call    sub_40BBA0
.text:0040A83F                 mov     [esp+4Ch+var_18], eax
.text:0040A843                 mov     [esp+4Ch+var_44], esi ; char *
.text:0040A847                 mov     [esp+4Ch+Format], 5 ; int
.text:0040A84F                 mov     [esp+4Ch+Stream], 0 ; int
.text:0040A856                 call    sub_40DFE0
.text:0040A85B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040A85F                 mov     ecx, [esp+4Ch+var_18]
.text:0040A863                 mov     eax, [esp+4Ch+var_14]
.text:0040A867                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040A86F                 mov     [esp+4Ch+var_3C], ecx
.text:0040A873                 mov     [esp+4Ch+var_44], eax ; char *
.text:0040A877                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040A87E                 call    sub_415D50
.text:0040A883                 mov     [esp+4Ch+var_20], 0
.text:0040A88B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:0040A892                 call    ds:libintl_gettext
.text:0040A898                 mov     edx, ds:_iob
.text:0040A89E                 add     edx, 40h ; '@'
.text:0040A8A1                 mov     [esp+4Ch+Format], eax ; Format
.text:0040A8A5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040A8A8                 call    fprintf
.text:0040A8AD                 mov     [esp+4Ch+var_1C], 0
.text:0040A8B5                 mov     eax, [ebp+0]
.text:0040A8B8                 test    eax, eax
.text:0040A8BA                 jz      loc_40A941
.text:0040A8C0                 mov     [esp+4Ch+var_24], eax
.text:0040A8C4                 mov     [esp+4Ch+var_28], ebx
.text:0040A8C8                 mov     [esp+4Ch+var_2C], 0
.text:0040A8D0
.text:0040A8D0 loc_40A8D0:                             ; CODE XREF: sub_40A7C0+17F↓j
.text:0040A8D0                 mov     esi, [esp+4Ch+var_1C]
.text:0040A8D4                 test    esi, esi
.text:0040A8D6                 jz      short loc_40A8F8
.text:0040A8D8                 cld
.text:0040A8D9                 mov     eax, [esp+4Ch+var_2C]
.text:0040A8DD                 mov     edx, [esp+4Ch+arg_10]
.text:0040A8E1                 mov     esi, [esp+4Ch+var_20]
.text:0040A8E5                 lea     ecx, [eax+ebx]
.text:0040A8E8                 mov     edi, ecx
.text:0040A8EA                 mov     ecx, [esp+4Ch+arg_10]
.text:0040A8EE                 cmp     edx, edx
.text:0040A8F0                 repe cmpsb
.text:0040A8F2                 jz      loc_40A990
.text:0040A8F8
.text:0040A8F8 loc_40A8F8:                             ; CODE XREF: sub_40A7C0+116↑j
.text:0040A8F8                 mov     [esp+4Ch+Format], offset Format ; "\n  - `%s'"
.text:0040A900                 mov     esi, ds:_iob
.text:0040A906                 mov     ecx, [esp+4Ch+var_24]
.text:0040A90A                 add     esi, 40h ; '@'
.text:0040A90D                 mov     [esp+4Ch+var_44], ecx
.text:0040A911                 mov     [esp+4Ch+Stream], esi ; Stream
.text:0040A914                 call    fprintf
.text:0040A919                 mov     edi, [esp+4Ch+var_28]
.text:0040A91D                 mov     [esp+4Ch+var_20], edi
.text:0040A921
.text:0040A921 loc_40A921:                             ; CODE XREF: sub_40A7C0+1F1↓j
.text:0040A921                 inc     [esp+4Ch+var_1C]
.text:0040A925                 mov     ecx, [esp+4Ch+arg_10]
.text:0040A929                 add     [esp+4Ch+var_2C], ecx
.text:0040A92D                 mov     esi, [esp+4Ch+var_1C]
.text:0040A931                 add     [esp+4Ch+var_28], ecx
.text:0040A935                 mov     edi, [ebp+esi*4+0]
.text:0040A939                 test    edi, edi
.text:0040A93B                 mov     [esp+4Ch+var_24], edi
.text:0040A93F                 jnz     short loc_40A8D0
.text:0040A941
.text:0040A941 loc_40A941:                             ; CODE XREF: sub_40A7C0+FA↑j
.text:0040A941                 mov     ebp, ds:_iob
.text:0040A947                 mov     ebx, [ebp+44h]
.text:0040A94A                 dec     ebx
.text:0040A94B                 mov     [ebp+44h], ebx
.text:0040A94E                 test    ebx, ebx
.text:0040A950                 js      short loc_40A96F
.text:0040A952                 mov     edi, ds:_iob
.text:0040A958                 mov     eax, [edi+40h]
.text:0040A95B                 mov     byte ptr [eax], 0Ah
.text:0040A95E                 inc     dword ptr [edi+40h]
.text:0040A961
.text:0040A961 loc_40A961:                             ; CODE XREF: sub_40A7C0+1C8↓j
.text:0040A961                 call    [esp+4Ch+arg_14]
.text:0040A965                 mov     edx, 0FFFFFFFFh
.text:0040A96A                 jmp     loc_40A7FD
.text:0040A96F ; ---------------------------------------------------------------------------
.text:0040A96F
.text:0040A96F loc_40A96F:                             ; CODE XREF: sub_40A7C0+190↑j
.text:0040A96F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:0040A976                 mov     edx, ds:_iob
.text:0040A97C                 add     edx, 40h ; '@'
.text:0040A97F                 mov     [esp+4Ch+Format], edx ; File
.text:0040A983                 call    _flsbuf
.text:0040A988                 jmp     short loc_40A961
.text:0040A988 ; ---------------------------------------------------------------------------
.text:0040A98A                 align 10h
.text:0040A990
.text:0040A990 loc_40A990:                             ; CODE XREF: sub_40A7C0+132↑j
.text:0040A990                 mov     [esp+4Ch+Format], offset aS_0 ; ", `%s'"
.text:0040A998                 mov     edx, ds:_iob
.text:0040A99E                 mov     eax, [esp+4Ch+var_24]
.text:0040A9A2                 add     edx, 40h ; '@'
.text:0040A9A5                 mov     [esp+4Ch+var_44], eax
.text:0040A9A9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040A9AC                 call    fprintf
.text:0040A9B1                 jmp     loc_40A921
.text:0040A9B6 ; ---------------------------------------------------------------------------
.text:0040A9B6
.text:0040A9B6 loc_40A9B6:                             ; CODE XREF: sub_40A7C0+54↑j
.text:0040A9B6                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A9BD                 jmp     loc_40A821
.text:0040A9BD sub_40A7C0      endp
.text:0040A9BD
.text:0040A9BD ; ---------------------------------------------------------------------------
.text:0040A9C2                 align 10h
.text:0040A9D0                 push    ebp
.text:0040A9D1                 push    edi
.text:0040A9D2                 push    esi
.text:0040A9D3                 push    ebx
.text:0040A9D4                 sub     esp, 4
.text:0040A9D7                 mov     ecx, [esp+1Ch]
.text:0040A9DB                 mov     dword ptr [esp], 0
.text:0040A9E2                 mov     ebx, [esp+24h]
.text:0040A9E6                 mov     edx, [ecx]
.text:0040A9E8                 test    edx, edx
.text:0040A9EA                 jz      short loc_40AA15
.text:0040A9EC                 cld
.text:0040A9ED                 xor     ebp, ebp
.text:0040A9EF                 nop
.text:0040A9F0
.text:0040A9F0 loc_40A9F0:                             ; CODE XREF: .text:0040AA13↓j
.text:0040A9F0                 mov     edi, [esp+20h]
.text:0040A9F4                 mov     ecx, ebx
.text:0040A9F6                 mov     esi, [esp+18h]
.text:0040A9FA                 add     edi, ebp
.text:0040A9FC                 cmp     ebx, ebx
.text:0040A9FE                 repe cmpsb
.text:0040AA00                 jz      short loc_40AA1D
.text:0040AA02                 inc     dword ptr [esp]
.text:0040AA05                 add     ebp, ebx
.text:0040AA07                 mov     eax, [esp+1Ch]
.text:0040AA0B                 mov     ecx, [esp]
.text:0040AA0E                 mov     edi, [eax+ecx*4]
.text:0040AA11                 test    edi, edi
.text:0040AA13                 jnz     short loc_40A9F0
.text:0040AA15
.text:0040AA15 loc_40AA15:                             ; CODE XREF: .text:0040A9EA↑j
.text:0040AA15                 xor     eax, eax
.text:0040AA17
.text:0040AA17 loc_40AA17:                             ; CODE XREF: .text:0040AA27↓j
.text:0040AA17                 pop     ebp
.text:0040AA18                 pop     ebx
.text:0040AA19                 pop     esi
.text:0040AA1A                 pop     edi
.text:0040AA1B                 pop     ebp
.text:0040AA1C                 retn
.text:0040AA1D ; ---------------------------------------------------------------------------
.text:0040AA1D
.text:0040AA1D loc_40AA1D:                             ; CODE XREF: .text:0040AA00↑j
.text:0040AA1D                 mov     esi, [esp]
.text:0040AA20                 mov     ebx, [esp+1Ch]
.text:0040AA24                 mov     eax, [ebx+esi*4]
.text:0040AA27                 jmp     short loc_40AA17
.text:0040AA27 ; ---------------------------------------------------------------------------
.text:0040AA29                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30 ; Attributes: noreturn
.text:0040AA30
.text:0040AA30 sub_40AA30      proc near               ; DATA XREF: .data:off_421030↓o
.text:0040AA30
.text:0040AA30 Code            = dword ptr -0Ch
.text:0040AA30
.text:0040AA30                 sub     esp, 0Ch
.text:0040AA33                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040AA3A                 call    sub_402960
.text:0040AA3A sub_40AA30      endp
.text:0040AA3A
.text:0040AA3A ; ---------------------------------------------------------------------------
.text:0040AA3F                 db  83h ; ƒ
.text:0040AA40                 db 0C4h ; Ä
.text:0040AA41                 db  0Ch
.text:0040AA42                 db 0C3h ; Ã
.text:0040AA43                 align 10h
.text:0040AA50
.text:0040AA50 ; =============== S U B R O U T I N E =======================================
.text:0040AA50
.text:0040AA50
.text:0040AA50 sub_40AA50      proc near               ; DATA XREF: .data:Src↓o
.text:0040AA50                 jle     short $+2
.text:0040AA52
.text:0040AA52 loc_40AA52:                             ; CODE XREF: sub_40AA50↑j
.text:0040AA52                 lea     esi, [esi+0]
.text:0040AA59                 lea     edi, [edi+0]
.text:0040AA59 sub_40AA50      endp
.text:0040AA59
.text:0040AA60
.text:0040AA60 ; =============== S U B R O U T I N E =======================================
.text:0040AA60
.text:0040AA60
.text:0040AA60 ; int __cdecl sub_40AA60(char *, int)
.text:0040AA60 sub_40AA60      proc near               ; CODE XREF: sub_403270+1520↑p
.text:0040AA60
.text:0040AA60 Str             = dword ptr -2Ch
.text:0040AA60 Src             = dword ptr -28h
.text:0040AA60 Size            = dword ptr -24h
.text:0040AA60 var_14          = dword ptr -14h
.text:0040AA60 arg_0           = dword ptr  4
.text:0040AA60 arg_4           = dword ptr  8
.text:0040AA60
.text:0040AA60                 push    ebp
.text:0040AA61                 push    edi
.text:0040AA62                 push    esi
.text:0040AA63                 push    ebx
.text:0040AA64                 sub     esp, 1Ch
.text:0040AA67                 mov     ebp, [esp+2Ch+arg_0]
.text:0040AA6B                 mov     [esp+2Ch+Str], ebp ; Str
.text:0040AA6E                 call    strlen
.text:0040AA73                 mov     edx, Src
.text:0040AA79                 mov     ebx, eax
.text:0040AA7B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040AA7E                 call    strlen
.text:0040AA83                 lea     esi, [eax+1]
.text:0040AA86                 cmp     esi, 8
.text:0040AA89                 mov     eax, esi
.text:0040AA8B                 ja      short loc_40AA92
.text:0040AA8D                 mov     eax, 9
.text:0040AA92
.text:0040AA92 loc_40AA92:                             ; CODE XREF: sub_40AA60+2B↑j
.text:0040AA92                 lea     edi, [eax+ebx+1]
.text:0040AA96                 mov     [esp+2Ch+Str], edi ; size_t
.text:0040AA99                 call    sub_40B090
.text:0040AA9E                 mov     [esp+2Ch+var_14], eax
.text:0040AAA2                 lea     ecx, [ebx+1]
.text:0040AAA5                 mov     [esp+2Ch+Size], ecx ; Size
.text:0040AAA9                 mov     [esp+2Ch+Src], ebp ; Src
.text:0040AAAD                 mov     [esp+2Ch+Str], eax ; void *
.text:0040AAB0                 call    memcpy
.text:0040AAB5                 cmp     [esp+2Ch+arg_4], 1
.text:0040AABA                 jz      short loc_40AAE0
.text:0040AABC                 mov     [esp+2Ch+Size], ebx
.text:0040AAC0                 lea     edx, [esp+2Ch+var_14]
.text:0040AAC4                 mov     [esp+2Ch+Src], edi
.text:0040AAC8                 mov     [esp+2Ch+Str], edx
.text:0040AACB                 call    sub_40ADB0
.text:0040AAD0                 cmp     eax, 1
.text:0040AAD3                 jz      short loc_40AAFC
.text:0040AAD5                 cmp     eax, 1
.text:0040AAD8                 jb      short loc_40AB14
.text:0040AADA                 cmp     eax, 2
.text:0040AADD                 jz      short loc_40AB20
.text:0040AADF                 nop
.text:0040AAE0
.text:0040AAE0 loc_40AAE0:                             ; CODE XREF: sub_40AA60+5A↑j
.text:0040AAE0                                         ; sub_40AA60+C7↓j
.text:0040AAE0                 mov     [esp+2Ch+Size], esi ; Size
.text:0040AAE4                 mov     edi, [esp+2Ch+var_14]
.text:0040AAE8                 mov     esi, Src
.text:0040AAEE                 add     edi, ebx
.text:0040AAF0                 mov     [esp+2Ch+Src], esi ; Src
.text:0040AAF4                 mov     [esp+2Ch+Str], edi ; void *
.text:0040AAF7                 call    memcpy
.text:0040AAFC
.text:0040AAFC loc_40AAFC:                             ; CODE XREF: sub_40AA60+73↑j
.text:0040AAFC                                         ; sub_40AA60+C5↓j
.text:0040AAFC                 mov     [esp+2Ch+Src], ebx
.text:0040AB00                 mov     ebx, [esp+2Ch+var_14]
.text:0040AB04                 mov     [esp+2Ch+Size], 7Eh ; '~'
.text:0040AB0C                 mov     [esp+2Ch+Str], ebx
.text:0040AB0F                 call    sub_40ACF0
.text:0040AB14
.text:0040AB14 loc_40AB14:                             ; CODE XREF: sub_40AA60+78↑j
.text:0040AB14                 mov     eax, [esp+2Ch+var_14]
.text:0040AB18                 add     esp, 1Ch
.text:0040AB1B                 pop     ebx
.text:0040AB1C                 pop     esi
.text:0040AB1D                 pop     edi
.text:0040AB1E                 pop     ebp
.text:0040AB1F                 retn
.text:0040AB20 ; ---------------------------------------------------------------------------
.text:0040AB20
.text:0040AB20 loc_40AB20:                             ; CODE XREF: sub_40AA60+7D↑j
.text:0040AB20                 cmp     [esp+2Ch+arg_4], 2
.text:0040AB25                 jnz     short loc_40AAFC
.text:0040AB27                 jmp     short loc_40AAE0
.text:0040AB27 sub_40AA60      endp
.text:0040AB27
.text:0040AB27 ; ---------------------------------------------------------------------------
.text:0040AB29 aNone           db 'none',0             ; DATA XREF: .text:off_40AB70↓o
.text:0040AB2E aOff            db 'off',0              ; DATA XREF: .text:0040AB74↓o
.text:0040AB32 aSimple         db 'simple',0           ; DATA XREF: .text:0040AB78↓o
.text:0040AB39 aNever          db 'never',0            ; DATA XREF: .text:0040AB7C↓o
.text:0040AB3F aExisting       db 'existing',0         ; DATA XREF: .text:0040AB80↓o
.text:0040AB48 aNil            db 'nil',0              ; DATA XREF: .text:0040AB84↓o
.text:0040AB4C aNumbered       db 'numbered',0         ; DATA XREF: .text:0040AB88↓o
.text:0040AB55 aT              db 't',0                ; DATA XREF: .text:0040AB8C↓o
.text:0040AB57                 db 19h dup(90h)
.text:0040AB70 off_40AB70      dd offset aNone         ; DATA XREF: .text:0040AC12↓o
.text:0040AB70                                         ; sub_40AC50+46↓o ...
.text:0040AB70                                         ; "none"
.text:0040AB74                 dd offset aOff          ; "off"
.text:0040AB78                 dd offset aSimple       ; "simple"
.text:0040AB7C                 dd offset aNever        ; "never"
.text:0040AB80                 dd offset aExisting     ; "existing"
.text:0040AB84                 dd offset aNil          ; "nil"
.text:0040AB88                 dd offset aNumbered     ; "numbered"
.text:0040AB8C                 dd offset aT            ; "t"
.text:0040AB90                 dd 0
.text:0040AB94                 db 1Ch dup(90h)
.text:0040ABB0 dword_40ABB0    dd 0                    ; DATA XREF: .text:0040AC0A↓o
.text:0040ABB0                                         ; .text:0040AC22↓r ...
.text:0040ABB4                 align 8
.text:0040ABB8                 dd 2 dup(1), 2 dup(2), 2 dup(3), 8B1CEC83h, 85242454h
.text:0040ABB8                 dd 800574D2h, 1075003Ah, 2B8h
.text:0040ABE4                 db 0
.text:0040ABE5 ; ---------------------------------------------------------------------------
.text:0040ABE5
.text:0040ABE5 loc_40ABE5:                             ; CODE XREF: .text:0040AC29↓j
.text:0040ABE5                 add     esp, 1Ch
.text:0040ABE8                 retn
.text:0040ABE8 ; ---------------------------------------------------------------------------
.text:0040ABE9                 align 10h
.text:0040ABF0                 mov     [esp+4], edx
.text:0040ABF4                 mov     ecx, off_421030
.text:0040ABFA                 mov     edx, [esp+20h]
.text:0040ABFE                 mov     dword ptr [esp+10h], 4
.text:0040AC06                 mov     [esp+14h], ecx
.text:0040AC0A                 mov     dword ptr [esp+0Ch], offset dword_40ABB0
.text:0040AC12                 mov     dword ptr [esp+8], offset off_40AB70 ; "none"
.text:0040AC1A                 mov     [esp], edx
.text:0040AC1D                 call    sub_40A7C0
.text:0040AC22                 mov     eax, ds:dword_40ABB0[eax*4]
.text:0040AC29                 jmp     short loc_40ABE5
.text:0040AC29 ; ---------------------------------------------------------------------------
.text:0040AC2B ; const char aVersionControl[]
.text:0040AC2B aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: sub_40AC50:loc_40AC60↓o
.text:0040AC3B ; const char aVersionControl_0[]
.text:0040AC3B aVersionControl_0 db '$VERSION_CONTROL',0
.text:0040AC3B                                         ; DATA XREF: sub_40AC50+56↓o
.text:0040AC4C                 align 10h
.text:0040AC50
.text:0040AC50 ; =============== S U B R O U T I N E =======================================
.text:0040AC50
.text:0040AC50
.text:0040AC50 sub_40AC50      proc near               ; CODE XREF: sub_401EE0+80A↑p
.text:0040AC50
.text:0040AC50 VarName         = dword ptr -1Ch
.text:0040AC50 var_18          = dword ptr -18h
.text:0040AC50 var_14          = dword ptr -14h
.text:0040AC50 var_10          = dword ptr -10h
.text:0040AC50 var_C           = dword ptr -0Ch
.text:0040AC50 var_8           = dword ptr -8
.text:0040AC50 arg_0           = dword ptr  4
.text:0040AC50 arg_4           = dword ptr  8
.text:0040AC50
.text:0040AC50                 sub     esp, 1Ch
.text:0040AC53                 mov     edx, [esp+1Ch+arg_4]
.text:0040AC57                 test    edx, edx
.text:0040AC59                 jz      short loc_40AC60
.text:0040AC5B                 cmp     byte ptr [edx], 0
.text:0040AC5E                 jnz     short loc_40ACC0
.text:0040AC60
.text:0040AC60 loc_40AC60:                             ; CODE XREF: sub_40AC50+9↑j
.text:0040AC60                 mov     [esp+1Ch+VarName], offset aVersionControl ; "VERSION_CONTROL"
.text:0040AC67                 call    getenv
.text:0040AC6C                 test    eax, eax
.text:0040AC6E                 jz      short loc_40AC75
.text:0040AC70                 cmp     byte ptr [eax], 0
.text:0040AC73                 jnz     short loc_40AC80
.text:0040AC75
.text:0040AC75 loc_40AC75:                             ; CODE XREF: sub_40AC50+1E↑j
.text:0040AC75                 mov     eax, 2
.text:0040AC7A
.text:0040AC7A loc_40AC7A:                             ; CODE XREF: sub_40AC50+69↓j
.text:0040AC7A                 add     esp, 1Ch
.text:0040AC7D                 retn
.text:0040AC7D ; ---------------------------------------------------------------------------
.text:0040AC7E                 align 10h
.text:0040AC80
.text:0040AC80 loc_40AC80:                             ; CODE XREF: sub_40AC50+23↑j
.text:0040AC80                 mov     [esp+1Ch+var_C], 4 ; int
.text:0040AC88                 mov     ecx, off_421030
.text:0040AC8E                 mov     [esp+1Ch+var_10], offset dword_40ABB0 ; int
.text:0040AC96                 mov     [esp+1Ch+var_14], offset off_40AB70 ; int
.text:0040AC9E                 mov     [esp+1Ch+var_8], ecx ; int
.text:0040ACA2                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040ACA6                 mov     [esp+1Ch+VarName], offset aVersionControl_0 ; "$VERSION_CONTROL"
.text:0040ACAD
.text:0040ACAD loc_40ACAD:                             ; CODE XREF: sub_40AC50+9D↓j
.text:0040ACAD                 call    sub_40A7C0
.text:0040ACB2                 mov     eax, ds:dword_40ABB0[eax*4]
.text:0040ACB9                 jmp     short loc_40AC7A
.text:0040ACB9 ; ---------------------------------------------------------------------------
.text:0040ACBB                 align 10h
.text:0040ACC0
.text:0040ACC0 loc_40ACC0:                             ; CODE XREF: sub_40AC50+E↑j
.text:0040ACC0                 mov     [esp+1Ch+var_18], edx
.text:0040ACC4                 mov     ecx, off_421030
.text:0040ACCA                 mov     edx, [esp+1Ch+arg_0]
.text:0040ACCE                 mov     [esp+1Ch+var_C], 4
.text:0040ACD6                 mov     [esp+1Ch+var_8], ecx
.text:0040ACDA                 mov     [esp+1Ch+var_10], offset dword_40ABB0
.text:0040ACE2                 mov     [esp+1Ch+var_14], offset off_40AB70 ; "none"
.text:0040ACEA                 mov     [esp+1Ch+VarName], edx
.text:0040ACED                 jmp     short loc_40ACAD
.text:0040ACED sub_40AC50      endp
.text:0040ACED
.text:0040ACED ; ---------------------------------------------------------------------------
.text:0040ACEF                 align 10h
.text:0040ACF0
.text:0040ACF0 ; =============== S U B R O U T I N E =======================================
.text:0040ACF0
.text:0040ACF0
.text:0040ACF0 sub_40ACF0      proc near               ; CODE XREF: sub_40AA60+AF↑p
.text:0040ACF0
.text:0040ACF0 var_1C          = dword ptr -1Ch
.text:0040ACF0 var_18          = dword ptr -18h
.text:0040ACF0 var_14          = dword ptr -14h
.text:0040ACF0 var_10          = dword ptr -10h
.text:0040ACF0 var_C           = dword ptr -0Ch
.text:0040ACF0 var_8           = dword ptr -8
.text:0040ACF0 var_4           = dword ptr -4
.text:0040ACF0 arg_0           = dword ptr  4
.text:0040ACF0 arg_4           = dword ptr  8
.text:0040ACF0 arg_8           = byte ptr  0Ch
.text:0040ACF0
.text:0040ACF0                 sub     esp, 1Ch
.text:0040ACF3                 movzx   edx, [esp+1Ch+arg_8]
.text:0040ACF8                 mov     [esp+1Ch+var_10], ebx
.text:0040ACFC                 mov     [esp+1Ch+var_C], esi
.text:0040AD00                 mov     [esp+1Ch+var_8], edi
.text:0040AD04                 mov     edi, 0FFh
.text:0040AD09                 mov     byte ptr [esp+1Ch+var_14+3], dl
.text:0040AD0D                 mov     edx, [esp+1Ch+arg_0]
.text:0040AD11                 mov     [esp+1Ch+var_4], ebp
.text:0040AD15                 mov     [esp+1Ch+var_1C], edx
.text:0040AD18                 call    sub_40BC00
.text:0040AD1D                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040AD20                 mov     esi, eax
.text:0040AD22                 call    sub_40BC60
.text:0040AD27                 cmp     eax, 0Eh
.text:0040AD2A                 mov     ebx, eax
.text:0040AD2C                 ja      short loc_40AD66
.text:0040AD2E
.text:0040AD2E loc_40AD2E:                             ; CODE XREF: sub_40ACF0+B1↓j
.text:0040AD2E                 cmp     edi, ebx
.text:0040AD30                 jnb     short loc_40AD52
.text:0040AD32                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AD36                 mov     ebp, [esp+1Ch+arg_4]
.text:0040AD3A                 add     ebx, ebp
.text:0040AD3C                 sub     ebx, esi
.text:0040AD3E                 cmp     edi, ebx
.text:0040AD40                 ja      short loc_40AD45
.text:0040AD42                 lea     ebx, [edi-1]
.text:0040AD45
.text:0040AD45 loc_40AD45:                             ; CODE XREF: sub_40ACF0+50↑j
.text:0040AD45                 movzx   ecx, byte ptr [esp+1Ch+var_14+3]
.text:0040AD4A                 mov     byte ptr [ebx+esi+1], 0
.text:0040AD4F                 mov     [ebx+esi], cl
.text:0040AD52
.text:0040AD52 loc_40AD52:                             ; CODE XREF: sub_40ACF0+40↑j
.text:0040AD52                 mov     ebx, [esp+1Ch+var_10]
.text:0040AD56                 mov     esi, [esp+1Ch+var_C]
.text:0040AD5A                 mov     edi, [esp+1Ch+var_8]
.text:0040AD5E                 mov     ebp, [esp+1Ch+var_4]
.text:0040AD62                 add     esp, 1Ch
.text:0040AD65                 retn
.text:0040AD66 ; ---------------------------------------------------------------------------
.text:0040AD66
.text:0040AD66 loc_40AD66:                             ; CODE XREF: sub_40ACF0+3C↑j
.text:0040AD66                 movzx   ebp, word ptr [esi]
.text:0040AD69                 mov     word ptr [esp+1Ch+var_14], bp
.text:0040AD6E                 mov     word ptr [esi], 2Eh ; '.'
.text:0040AD73                 call    _errno
.text:0040AD78                 mov     dword ptr [eax], 0
.text:0040AD7E                 mov     ecx, [esp+1Ch+arg_0]
.text:0040AD82                 mov     [esp+1Ch+var_18], 3
.text:0040AD8A                 mov     [esp+1Ch+var_1C], ecx
.text:0040AD8D                 call    sub_41A7E0
.text:0040AD92                 test    eax, eax
.text:0040AD94                 mov     ebp, eax
.text:0040AD96                 js      short loc_40ADA3
.text:0040AD98
.text:0040AD98 loc_40AD98:                             ; CODE XREF: sub_40ACF0+BE↓j
.text:0040AD98                 mov     edi, ebp
.text:0040AD9A
.text:0040AD9A loc_40AD9A:                             ; CODE XREF: sub_40ACF0+BC↓j
.text:0040AD9A                 mov     edx, [esp+1Ch+var_14]
.text:0040AD9E                 mov     [esi], dx
.text:0040ADA1                 jmp     short loc_40AD2E
.text:0040ADA3 ; ---------------------------------------------------------------------------
.text:0040ADA3
.text:0040ADA3 loc_40ADA3:                             ; CODE XREF: sub_40ACF0+A6↑j
.text:0040ADA3                 call    _errno
.text:0040ADA8                 mov     ecx, [eax]
.text:0040ADAA                 test    ecx, ecx
.text:0040ADAC                 jnz     short loc_40AD9A
.text:0040ADAE                 jmp     short loc_40AD98
.text:0040ADAE sub_40ACF0      endp
.text:0040ADAE
.text:0040ADB0
.text:0040ADB0 ; =============== S U B R O U T I N E =======================================
.text:0040ADB0
.text:0040ADB0
.text:0040ADB0 sub_40ADB0      proc near               ; CODE XREF: sub_40AA60+6B↑p
.text:0040ADB0
.text:0040ADB0 var_3C          = dword ptr -3Ch
.text:0040ADB0 Src             = dword ptr -38h
.text:0040ADB0 Size            = dword ptr -34h
.text:0040ADB0 var_29          = byte ptr -29h
.text:0040ADB0 var_28          = dword ptr -28h
.text:0040ADB0 var_24          = dword ptr -24h
.text:0040ADB0 var_20          = dword ptr -20h
.text:0040ADB0 var_1C          = dword ptr -1Ch
.text:0040ADB0 var_18          = dword ptr -18h
.text:0040ADB0 var_14          = dword ptr -14h
.text:0040ADB0 arg_0           = dword ptr  4
.text:0040ADB0 arg_4           = dword ptr  8
.text:0040ADB0 arg_8           = dword ptr  0Ch
.text:0040ADB0
.text:0040ADB0                 push    ebp
.text:0040ADB1                 push    edi
.text:0040ADB2                 push    esi
.text:0040ADB3                 push    ebx
.text:0040ADB4                 sub     esp, 2Ch
.text:0040ADB7                 mov     edx, [esp+3Ch+arg_0]
.text:0040ADBB                 mov     [esp+3Ch+var_14], 2
.text:0040ADC3                 mov     [esp+3Ch+var_20], 1
.text:0040ADCB                 mov     ebp, [edx]
.text:0040ADCD                 mov     [esp+3Ch+var_1C], ebp
.text:0040ADD1                 mov     [esp+3Ch+var_3C], ebp
.text:0040ADD4                 call    sub_40BC00
.text:0040ADD9                 mov     [esp+3Ch+var_3C], eax ; char *
.text:0040ADDC                 mov     esi, [esp+3Ch+var_1C]
.text:0040ADE0                 mov     ecx, eax
.text:0040ADE2                 mov     edi, eax
.text:0040ADE4                 sub     ecx, esi
.text:0040ADE6                 mov     [esp+3Ch+var_24], ecx
.text:0040ADEA                 call    sub_40BC60
.text:0040ADEF                 mov     [esp+3Ch+var_28], eax
.text:0040ADF3                 movzx   ebx, word ptr [edi]
.text:0040ADF6                 mov     word ptr [edi], 2Eh ; '.'
.text:0040ADFB                 mov     eax, [esp+3Ch+var_1C]
.text:0040ADFF                 mov     [esp+3Ch+var_3C], eax ; LPCSTR
.text:0040AE02                 call    sub_41A590
.text:0040AE07                 mov     [esp+3Ch+var_18], eax
.text:0040AE0B                 mov     eax, 2
.text:0040AE10                 mov     [edi], bx
.text:0040AE13                 mov     edx, [esp+3Ch+var_28]
.text:0040AE17                 mov     dword ptr [edx+edi], 7E317E2Eh
.text:0040AE1E                 mov     byte ptr [edx+edi+4], 0
.text:0040AE23                 mov     edx, [esp+3Ch+var_18]
.text:0040AE27                 test    edx, edx
.text:0040AE29                 jz      loc_40B02C
.text:0040AE2F                 nop
.text:0040AE30
.text:0040AE30 loc_40AE30:                             ; CODE XREF: sub_40ADB0+9F↓j
.text:0040AE30                                         ; sub_40ADB0+E5↓j ...
.text:0040AE30                 mov     ebx, [esp+3Ch+var_18]
.text:0040AE34                 mov     [esp+3Ch+var_3C], ebx
.text:0040AE37                 call    sub_418CB0
.text:0040AE3C                 test    eax, eax
.text:0040AE3E                 mov     ebx, eax
.text:0040AE40                 jz      loc_40B011
.text:0040AE46                 mov     ecx, [ebx+4]
.text:0040AE49                 mov     edi, [ebx]
.text:0040AE4B                 mov     eax, ecx
.text:0040AE4D                 or      eax, edi
.text:0040AE4F                 jz      short loc_40AE30
.text:0040AE51                 lea     ebp, [ebx+0Ch]
.text:0040AE54                 mov     ecx, ebp
.text:0040AE56                 mov     esi, ebp
.text:0040AE58                 nop
.text:0040AE59                 lea     esi, [esi+0]
.text:0040AE60
.text:0040AE60 loc_40AE60:                             ; CODE XREF: sub_40ADB0+C5↓j
.text:0040AE60                 mov     edi, [ecx]
.text:0040AE62                 add     ecx, 4
.text:0040AE65                 lea     edx, [edi-1010101h]
.text:0040AE6B                 not     edi
.text:0040AE6D                 and     edx, edi
.text:0040AE6F                 and     edx, 80808080h
.text:0040AE75                 jz      short loc_40AE60
.text:0040AE77                 test    edx, 8080h
.text:0040AE7D                 jnz     short loc_40AE85
.text:0040AE7F                 shr     edx, 10h
.text:0040AE82                 add     ecx, 2
.text:0040AE85
.text:0040AE85 loc_40AE85:                             ; CODE XREF: sub_40ADB0+CD↑j
.text:0040AE85                 add     dl, dl
.text:0040AE87                 sbb     ecx, 3
.text:0040AE8A                 sub     ecx, esi
.text:0040AE8C                 mov     esi, [esp+3Ch+var_28]
.text:0040AE90                 add     esi, 4
.text:0040AE93                 cmp     ecx, esi
.text:0040AE95                 jb      short loc_40AE30
.text:0040AE97                 cld
.text:0040AE98                 mov     ecx, [esp+3Ch+var_28]
.text:0040AE9C                 mov     edi, ebp
.text:0040AE9E                 mov     esi, [esp+3Ch+var_1C]
.text:0040AEA2                 mov     edx, [esp+3Ch+var_24]
.text:0040AEA6                 add     ecx, 2
.text:0040AEA9                 add     esi, edx
.text:0040AEAB                 cmp     ecx, ecx
.text:0040AEAD                 repe cmpsb
.text:0040AEAF                 jnz     loc_40AE30
.text:0040AEB5                 mov     ebp, [esp+3Ch+var_28]
.text:0040AEB9                 lea     edx, [ebp+ebx+0]
.text:0040AEBD                 lea     ebp, [edx+0Eh]
.text:0040AEC0                 movzx   ecx, byte ptr [edx+0Eh]
.text:0040AEC4                 mov     bl, cl
.text:0040AEC6                 sub     bl, 31h ; '1'
.text:0040AEC9                 cmp     bl, 8
.text:0040AECC                 ja      loc_40AE30
.text:0040AED2                 cmp     cl, 39h ; '9'
.text:0040AED5                 mov     ebx, 1
.text:0040AEDA                 setz    [esp+3Ch+var_29]
.text:0040AEDF                 movsx   ecx, byte ptr [edx+0Fh]
.text:0040AEE3                 sub     ecx, 30h ; '0'
.text:0040AEE6                 cmp     ecx, 9
.text:0040AEE9                 ja      loc_40B008
.text:0040AEEF                 movzx   edx, byte ptr [ebp+1]
.text:0040AEF3
.text:0040AEF3 loc_40AEF3:                             ; CODE XREF: sub_40ADB0+160↓j
.text:0040AEF3                 xor     eax, eax
.text:0040AEF5                 cmp     dl, 39h ; '9'
.text:0040AEF8                 jz      loc_40AFF6
.text:0040AEFE
.text:0040AEFE loc_40AEFE:                             ; CODE XREF: sub_40ADB0+24B↓j
.text:0040AEFE                                         ; sub_40ADB0+253↓j
.text:0040AEFE                 mov     [esp+3Ch+var_29], al
.text:0040AF02                 inc     ebx
.text:0040AF03                 movzx   edx, byte ptr [ebx+ebp]
.text:0040AF07                 movsx   edi, dl
.text:0040AF0A                 sub     edi, 30h ; '0'
.text:0040AF0D                 cmp     edi, 9
.text:0040AF10                 jbe     short loc_40AEF3
.text:0040AF12
.text:0040AF12 loc_40AF12:                             ; CODE XREF: sub_40ADB0+25C↓j
.text:0040AF12                 cmp     dl, 7Eh ; '~'
.text:0040AF15                 jnz     loc_40AE30
.text:0040AF1B                 cmp     byte ptr [ebx+ebp+1], 0
.text:0040AF20                 jnz     loc_40AE30
.text:0040AF26                 cmp     [esp+3Ch+var_20], ebx
.text:0040AF2A                 jb      short loc_40AF5B
.text:0040AF2C                 cmp     [esp+3Ch+var_20], ebx
.text:0040AF30                 jnz     loc_40AE30
.text:0040AF36                 cld
.text:0040AF37                 mov     edi, [esp+3Ch+var_1C]
.text:0040AF3B                 mov     ecx, ebx
.text:0040AF3D                 mov     eax, [esp+3Ch+arg_8]
.text:0040AF41                 cmp     ebx, ebx
.text:0040AF43                 lea     esi, [eax+edi+2]
.text:0040AF47                 mov     edi, ebp
.text:0040AF49                 repe cmpsb
.text:0040AF4B                 setnbe  dl
.text:0040AF4E                 setb    cl
.text:0040AF51                 sub     dl, cl
.text:0040AF53                 test    dl, dl
.text:0040AF55                 jg      loc_40AE30
.text:0040AF5B
.text:0040AF5B loc_40AF5B:                             ; CODE XREF: sub_40ADB0+17A↑j
.text:0040AF5B                 movzx   edi, [esp+3Ch+var_29]
.text:0040AF60                 xor     edx, edx
.text:0040AF62                 mov     ecx, [esp+3Ch+arg_8]
.text:0040AF66                 cmp     [esp+3Ch+var_29], 0
.text:0040AF6B                 lea     esi, [ebx+edi]
.text:0040AF6E                 mov     [esp+3Ch+var_20], esi
.text:0040AF72                 mov     eax, [esp+3Ch+var_20]
.text:0040AF76                 setnz   dl
.text:0040AF79                 lea     esi, [eax+ecx+3]
.text:0040AF7D                 cmp     [esp+3Ch+arg_4], esi
.text:0040AF81                 mov     [esp+3Ch+var_14], edx
.text:0040AF85                 jbe     short loc_40AFD2
.text:0040AF87
.text:0040AF87 loc_40AF87:                             ; CODE XREF: sub_40ADB0+244↓j
.text:0040AF87                 mov     esi, [esp+3Ch+var_1C]
.text:0040AF8B                 mov     eax, [esp+3Ch+arg_8]
.text:0040AF8F                 add     esi, eax
.text:0040AF91                 mov     byte ptr [esi], 2Eh ; '.'
.text:0040AF94                 inc     esi
.text:0040AF95                 mov     byte ptr [esi], 7Eh ; '~'
.text:0040AF98                 inc     esi
.text:0040AF99                 mov     byte ptr [esi], 30h ; '0'
.text:0040AF9C                 add     esi, edi
.text:0040AF9E                 lea     edi, [ebx+2]
.text:0040AFA1                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0040AFA4                 lea     esi, [ebx+esi-1]
.text:0040AFA8                 mov     [esp+3Ch+Size], edi ; Size
.text:0040AFAC                 mov     [esp+3Ch+Src], ebp ; Src
.text:0040AFB0                 call    memcpy
.text:0040AFB5                 movzx   eax, byte ptr [esi]
.text:0040AFB8                 cmp     al, 39h ; '9'
.text:0040AFBA                 jz      short loc_40AFC5
.text:0040AFBC
.text:0040AFBC loc_40AFBC:                             ; CODE XREF: sub_40ADB0+220↓j
.text:0040AFBC                 inc     al
.text:0040AFBE                 mov     [esi], al
.text:0040AFC0                 jmp     loc_40AE30
.text:0040AFC5 ; ---------------------------------------------------------------------------
.text:0040AFC5
.text:0040AFC5 loc_40AFC5:                             ; CODE XREF: sub_40ADB0+20A↑j
.text:0040AFC5                                         ; sub_40ADB0+21E↓j
.text:0040AFC5                 mov     byte ptr [esi], 30h ; '0'
.text:0040AFC8                 dec     esi
.text:0040AFC9                 movzx   eax, byte ptr [esi]
.text:0040AFCC                 cmp     al, 39h ; '9'
.text:0040AFCE                 jz      short loc_40AFC5
.text:0040AFD0                 jmp     short loc_40AFBC
.text:0040AFD2 ; ---------------------------------------------------------------------------
.text:0040AFD2
.text:0040AFD2 loc_40AFD2:                             ; CODE XREF: sub_40ADB0+1D5↑j
.text:0040AFD2                 mov     [esp+3Ch+Size], esi ; int
.text:0040AFD6                 mov     ecx, [esp+3Ch+var_1C]
.text:0040AFDA                 add     esi, esi
.text:0040AFDC                 mov     [esp+3Ch+Src], 2 ; int
.text:0040AFE4                 mov     [esp+3Ch+var_3C], ecx ; void *
.text:0040AFE7                 call    sub_40B0C0
.text:0040AFEC                 mov     [esp+3Ch+var_1C], eax
.text:0040AFF0                 mov     [esp+3Ch+arg_4], esi
.text:0040AFF4                 jmp     short loc_40AF87
.text:0040AFF6 ; ---------------------------------------------------------------------------
.text:0040AFF6
.text:0040AFF6 loc_40AFF6:                             ; CODE XREF: sub_40ADB0+148↑j
.text:0040AFF6                 cmp     [esp+3Ch+var_29], 0
.text:0040AFFB                 jz      loc_40AEFE
.text:0040B001                 mov     al, 1
.text:0040B003                 jmp     loc_40AEFE
.text:0040B008 ; ---------------------------------------------------------------------------
.text:0040B008
.text:0040B008 loc_40B008:                             ; CODE XREF: sub_40ADB0+139↑j
.text:0040B008                 movzx   edx, byte ptr [ebp+1]
.text:0040B00C                 jmp     loc_40AF12
.text:0040B011 ; ---------------------------------------------------------------------------
.text:0040B011
.text:0040B011 loc_40B011:                             ; CODE XREF: sub_40ADB0+90↑j
.text:0040B011                 mov     edx, [esp+3Ch+var_18]
.text:0040B015                 mov     [esp+3Ch+var_3C], edx ; void *
.text:0040B018                 call    sub_41A520
.text:0040B01D                 mov     esi, [esp+3Ch+var_1C]
.text:0040B021                 mov     ebp, [esp+3Ch+arg_0]
.text:0040B025                 mov     eax, [esp+3Ch+var_14]
.text:0040B029                 mov     [ebp+0], esi
.text:0040B02C
.text:0040B02C loc_40B02C:                             ; CODE XREF: sub_40ADB0+79↑j
.text:0040B02C                 add     esp, 2Ch
.text:0040B02F                 pop     ebx
.text:0040B030                 pop     esi
.text:0040B031                 pop     edi
.text:0040B032                 pop     ebp
.text:0040B033                 retn
.text:0040B033 sub_40ADB0      endp
.text:0040B033
.text:0040B033 ; ---------------------------------------------------------------------------
.text:0040B034                 db 1Ch dup(90h)
.text:0040B050 ; ---------------------------------------------------------------------------
.text:0040B050                 sub     esp, 0Ch
.text:0040B053                 xor     edx, edx
.text:0040B055                 mov     ecx, [esp+14h]
.text:0040B059                 mov     [esp+8], ebx
.text:0040B05D                 mov     eax, 0FFFFFFFFh
.text:0040B062                 mov     ebx, [esp+10h]
.text:0040B066                 div     ecx
.text:0040B068                 cmp     eax, ebx
.text:0040B06A                 jb      short loc_40B089
.text:0040B06C                 mov     edx, ebx
.text:0040B06E                 imul    edx, ecx
.text:0040B071                 mov     [esp], edx
.text:0040B074                 call    malloc
.text:0040B079                 test    eax, eax
.text:0040B07B                 jz      short loc_40B085
.text:0040B07D
.text:0040B07D loc_40B07D:                             ; CODE XREF: .text:0040B087↓j
.text:0040B07D                 mov     ebx, [esp+8]
.text:0040B081                 add     esp, 0Ch
.text:0040B084                 retn
.text:0040B085 ; ---------------------------------------------------------------------------
.text:0040B085
.text:0040B085 loc_40B085:                             ; CODE XREF: .text:0040B07B↑j
.text:0040B085                 test    ebx, ebx
.text:0040B087                 jz      short loc_40B07D
.text:0040B089
.text:0040B089 loc_40B089:                             ; CODE XREF: .text:0040B06A↑j
.text:0040B089                 call    sub_40C060
.text:0040B089 ; ---------------------------------------------------------------------------
.text:0040B08E                 align 10h
.text:0040B090
.text:0040B090 ; =============== S U B R O U T I N E =======================================
.text:0040B090
.text:0040B090
.text:0040B090 ; int __cdecl sub_40B090(size_t)
.text:0040B090 sub_40B090      proc near               ; CODE XREF: sub_405E30+42↑p
.text:0040B090                                         ; sub_405F90+48↑p ...
.text:0040B090
.text:0040B090 Size            = dword ptr -0Ch
.text:0040B090 var_4           = dword ptr -4
.text:0040B090 arg_0           = dword ptr  4
.text:0040B090
.text:0040B090                 sub     esp, 0Ch
.text:0040B093                 mov     [esp+0Ch+var_4], ebx
.text:0040B097                 mov     ebx, [esp+0Ch+arg_0]
.text:0040B09B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040B09E                 call    malloc
.text:0040B0A3                 test    eax, eax
.text:0040B0A5                 jz      short loc_40B0B0
.text:0040B0A7
.text:0040B0A7 loc_40B0A7:                             ; CODE XREF: sub_40B090+22↓j
.text:0040B0A7                 mov     ebx, [esp+0Ch+var_4]
.text:0040B0AB                 add     esp, 0Ch
.text:0040B0AE                 retn
.text:0040B0AE ; ---------------------------------------------------------------------------
.text:0040B0AF                 align 10h
.text:0040B0B0
.text:0040B0B0 loc_40B0B0:                             ; CODE XREF: sub_40B090+15↑j
.text:0040B0B0                 test    ebx, ebx
.text:0040B0B2                 jz      short loc_40B0A7
.text:0040B0B4                 call    sub_40C060
.text:0040B0B4 sub_40B090      endp
.text:0040B0B4
.text:0040B0B4 ; ---------------------------------------------------------------------------
.text:0040B0B9                 align 10h
.text:0040B0C0
.text:0040B0C0 ; =============== S U B R O U T I N E =======================================
.text:0040B0C0
.text:0040B0C0
.text:0040B0C0 ; int __cdecl sub_40B0C0(void *, int, int)
.text:0040B0C0 sub_40B0C0      proc near               ; CODE XREF: sub_40ADB0+237↑p
.text:0040B0C0
.text:0040B0C0 Block           = dword ptr -1Ch
.text:0040B0C0 Size            = dword ptr -18h
.text:0040B0C0 var_8           = dword ptr -8
.text:0040B0C0 var_4           = dword ptr -4
.text:0040B0C0 arg_0           = dword ptr  4
.text:0040B0C0 arg_4           = dword ptr  8
.text:0040B0C0 arg_8           = dword ptr  0Ch
.text:0040B0C0
.text:0040B0C0                 sub     esp, 1Ch
.text:0040B0C3                 xor     edx, edx
.text:0040B0C5                 mov     eax, 0FFFFFFFFh
.text:0040B0CA                 mov     [esp+1Ch+var_8], ebx
.text:0040B0CE                 mov     ecx, [esp+1Ch+arg_0]
.text:0040B0D2                 mov     ebx, [esp+1Ch+arg_8]
.text:0040B0D6                 mov     [esp+1Ch+var_4], esi
.text:0040B0DA                 mov     esi, [esp+1Ch+arg_4]
.text:0040B0DE                 div     ebx
.text:0040B0E0                 cmp     eax, esi
.text:0040B0E2                 jb      short loc_40B114
.text:0040B0E4                 mov     [esp+1Ch+Block], ecx ; Block
.text:0040B0E7                 mov     edx, esi
.text:0040B0E9                 imul    edx, ebx
.text:0040B0EC                 mov     [esp+1Ch+Size], edx ; Size
.text:0040B0F0                 call    realloc
.text:0040B0F5                 test    eax, eax
.text:0040B0F7                 mov     ecx, eax
.text:0040B0F9                 jz      short loc_40B110
.text:0040B0FB
.text:0040B0FB loc_40B0FB:                             ; CODE XREF: sub_40B0C0+52↓j
.text:0040B0FB                 mov     ebx, [esp+1Ch+var_8]
.text:0040B0FF                 mov     eax, ecx
.text:0040B101                 mov     esi, [esp+1Ch+var_4]
.text:0040B105                 add     esp, 1Ch
.text:0040B108                 retn
.text:0040B108 ; ---------------------------------------------------------------------------
.text:0040B109                 align 10h
.text:0040B110
.text:0040B110 loc_40B110:                             ; CODE XREF: sub_40B0C0+39↑j
.text:0040B110                 test    esi, esi
.text:0040B112                 jz      short loc_40B0FB
.text:0040B114
.text:0040B114 loc_40B114:                             ; CODE XREF: sub_40B0C0+22↑j
.text:0040B114                 call    sub_40C060
.text:0040B114 sub_40B0C0      endp
.text:0040B114
.text:0040B114 ; ---------------------------------------------------------------------------
.text:0040B119                 align 10h
.text:0040B120
.text:0040B120 ; =============== S U B R O U T I N E =======================================
.text:0040B120
.text:0040B120
.text:0040B120 ; int __cdecl sub_40B120(void *, size_t)
.text:0040B120 sub_40B120      proc near               ; CODE XREF: sub_40D020+BC↓p
.text:0040B120                                         ; sub_40E3F0+5B↓p
.text:0040B120
.text:0040B120 Block           = dword ptr -0Ch
.text:0040B120 Size            = dword ptr -8
.text:0040B120 var_4           = dword ptr -4
.text:0040B120 arg_0           = dword ptr  4
.text:0040B120 arg_4           = dword ptr  8
.text:0040B120
.text:0040B120                 sub     esp, 0Ch
.text:0040B123                 mov     edx, [esp+0Ch+arg_0]
.text:0040B127                 mov     [esp+0Ch+var_4], ebx
.text:0040B12B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040B12F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040B132                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040B136                 call    realloc
.text:0040B13B                 test    eax, eax
.text:0040B13D                 jz      short loc_40B147
.text:0040B13F
.text:0040B13F loc_40B13F:                             ; CODE XREF: sub_40B120+29↓j
.text:0040B13F                 mov     ebx, [esp+0Ch+var_4]
.text:0040B143                 add     esp, 0Ch
.text:0040B146                 retn
.text:0040B147 ; ---------------------------------------------------------------------------
.text:0040B147
.text:0040B147 loc_40B147:                             ; CODE XREF: sub_40B120+1D↑j
.text:0040B147                 test    ebx, ebx
.text:0040B149                 jz      short loc_40B13F
.text:0040B14B                 call    sub_40C060
.text:0040B14B sub_40B120      endp
.text:0040B14B
.text:0040B150 ; ---------------------------------------------------------------------------
.text:0040B150                 jmp     sub_40B2A0
.text:0040B150 ; ---------------------------------------------------------------------------
.text:0040B155                 align 10h
.text:0040B160                 sub     esp, 0Ch
.text:0040B163                 mov     edx, [esp+14h]
.text:0040B167                 mov     dword ptr [esp+8], 1
.text:0040B16F                 mov     [esp+4], edx
.text:0040B173                 mov     edx, [esp+10h]
.text:0040B177                 mov     [esp], edx
.text:0040B17A                 call    sub_40B2A0
.text:0040B17F                 add     esp, 0Ch
.text:0040B182                 retn
.text:0040B182 ; ---------------------------------------------------------------------------
.text:0040B183                 align 10h
.text:0040B190                 sub     esp, 1Ch
.text:0040B193                 mov     [esp+18h], ebx
.text:0040B197                 mov     ebx, [esp+20h]
.text:0040B19B                 mov     [esp], ebx
.text:0040B19E                 call    malloc
.text:0040B1A3                 test    eax, eax
.text:0040B1A5                 jz      short loc_40B1C3
.text:0040B1A7
.text:0040B1A7 loc_40B1A7:                             ; CODE XREF: .text:0040B1C5↓j
.text:0040B1A7                 mov     [esp+8], ebx
.text:0040B1AB                 mov     dword ptr [esp+4], 0
.text:0040B1B3                 mov     [esp], eax
.text:0040B1B6                 call    memset
.text:0040B1BB                 mov     ebx, [esp+18h]
.text:0040B1BF                 add     esp, 1Ch
.text:0040B1C2                 retn
.text:0040B1C3 ; ---------------------------------------------------------------------------
.text:0040B1C3
.text:0040B1C3 loc_40B1C3:                             ; CODE XREF: .text:0040B1A5↑j
.text:0040B1C3                 test    ebx, ebx
.text:0040B1C5                 jz      short loc_40B1A7
.text:0040B1C7                 call    sub_40C060
.text:0040B1C7 ; ---------------------------------------------------------------------------
.text:0040B1CC                 align 10h
.text:0040B1D0                 sub     esp, 0Ch
.text:0040B1D3                 xor     edx, edx
.text:0040B1D5                 mov     ecx, [esp+14h]
.text:0040B1D9                 mov     [esp+8], ebx
.text:0040B1DD                 mov     eax, 0FFFFFFFFh
.text:0040B1E2                 mov     ebx, [esp+10h]
.text:0040B1E6                 div     ecx
.text:0040B1E8                 cmp     eax, ebx
.text:0040B1EA                 jb      short loc_40B208
.text:0040B1EC                 mov     [esp+4], ecx
.text:0040B1F0                 mov     [esp], ebx
.text:0040B1F3                 call    calloc
.text:0040B1F8                 test    eax, eax
.text:0040B1FA                 jz      short loc_40B204
.text:0040B1FC
.text:0040B1FC loc_40B1FC:                             ; CODE XREF: .text:0040B206↓j
.text:0040B1FC                 mov     ebx, [esp+8]
.text:0040B200                 add     esp, 0Ch
.text:0040B203                 retn
.text:0040B204 ; ---------------------------------------------------------------------------
.text:0040B204
.text:0040B204 loc_40B204:                             ; CODE XREF: .text:0040B1FA↑j
.text:0040B204                 test    ebx, ebx
.text:0040B206                 jz      short loc_40B1FC
.text:0040B208
.text:0040B208 loc_40B208:                             ; CODE XREF: .text:0040B1EA↑j
.text:0040B208                 call    sub_40C060
.text:0040B208 ; ---------------------------------------------------------------------------
.text:0040B20D                 align 10h
.text:0040B210                 sub     esp, 1Ch
.text:0040B213                 mov     [esp+18h], ebx
.text:0040B217                 mov     ebx, [esp+24h]
.text:0040B21B                 mov     [esp], ebx
.text:0040B21E                 call    malloc
.text:0040B223                 test    eax, eax
.text:0040B225                 mov     edx, eax
.text:0040B227                 jz      short loc_40B245
.text:0040B229
.text:0040B229 loc_40B229:                             ; CODE XREF: .text:0040B247↓j
.text:0040B229                 mov     [esp+8], ebx
.text:0040B22D                 mov     ecx, [esp+20h]
.text:0040B231                 mov     [esp], edx
.text:0040B234                 mov     [esp+4], ecx
.text:0040B238                 call    memcpy
.text:0040B23D                 mov     ebx, [esp+18h]
.text:0040B241                 add     esp, 1Ch
.text:0040B244                 retn
.text:0040B245 ; ---------------------------------------------------------------------------
.text:0040B245
.text:0040B245 loc_40B245:                             ; CODE XREF: .text:0040B227↑j
.text:0040B245                 test    ebx, ebx
.text:0040B247                 jz      short loc_40B229
.text:0040B249                 call    sub_40C060
.text:0040B249 ; ---------------------------------------------------------------------------
.text:0040B24E                 align 10h
.text:0040B250
.text:0040B250 ; =============== S U B R O U T I N E =======================================
.text:0040B250
.text:0040B250
.text:0040B250 ; int __cdecl sub_40B250(char *)
.text:0040B250 sub_40B250      proc near               ; CODE XREF: sub_401EE0+676↑p
.text:0040B250                                         ; sub_405E30+4C↑p ...
.text:0040B250
.text:0040B250 Str             = dword ptr -1Ch
.text:0040B250 Src             = dword ptr -18h
.text:0040B250 Size            = dword ptr -14h
.text:0040B250 var_8           = dword ptr -8
.text:0040B250 var_4           = dword ptr -4
.text:0040B250 arg_0           = dword ptr  4
.text:0040B250
.text:0040B250                 sub     esp, 1Ch
.text:0040B253                 mov     [esp+1Ch+var_4], esi
.text:0040B257                 mov     esi, [esp+1Ch+arg_0]
.text:0040B25B                 mov     [esp+1Ch+var_8], ebx
.text:0040B25F                 mov     [esp+1Ch+Str], esi ; Str
.text:0040B262                 call    strlen
.text:0040B267                 lea     ebx, [eax+1]
.text:0040B26A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040B26D                 call    malloc
.text:0040B272                 test    eax, eax
.text:0040B274                 jz      short loc_40B292
.text:0040B276
.text:0040B276 loc_40B276:                             ; CODE XREF: sub_40B250+44↓j
.text:0040B276                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040B27A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040B27E                 mov     [esp+1Ch+Str], eax ; void *
.text:0040B281                 call    memcpy
.text:0040B286                 mov     ebx, [esp+1Ch+var_8]
.text:0040B28A                 mov     esi, [esp+1Ch+var_4]
.text:0040B28E                 add     esp, 1Ch
.text:0040B291                 retn
.text:0040B292 ; ---------------------------------------------------------------------------
.text:0040B292
.text:0040B292 loc_40B292:                             ; CODE XREF: sub_40B250+24↑j
.text:0040B292                 test    ebx, ebx
.text:0040B294                 jz      short loc_40B276
.text:0040B296                 call    sub_40C060
.text:0040B296 sub_40B250      endp
.text:0040B296
.text:0040B296 ; ---------------------------------------------------------------------------
.text:0040B29B                 align 10h
.text:0040B2A0
.text:0040B2A0 ; =============== S U B R O U T I N E =======================================
.text:0040B2A0
.text:0040B2A0
.text:0040B2A0 ; int __cdecl sub_40B2A0(void *, int, int)
.text:0040B2A0 sub_40B2A0      proc near               ; CODE XREF: .text:0040B150↑j
.text:0040B2A0                                         ; .text:0040B17A↑p
.text:0040B2A0
.text:0040B2A0 Block           = dword ptr -1Ch
.text:0040B2A0 Size            = dword ptr -18h
.text:0040B2A0 var_C           = dword ptr -0Ch
.text:0040B2A0 var_8           = dword ptr -8
.text:0040B2A0 var_4           = dword ptr -4
.text:0040B2A0 arg_0           = dword ptr  4
.text:0040B2A0 arg_4           = dword ptr  8
.text:0040B2A0 arg_8           = dword ptr  0Ch
.text:0040B2A0
.text:0040B2A0                 sub     esp, 1Ch
.text:0040B2A3                 mov     [esp+1Ch+var_8], esi
.text:0040B2A7                 mov     esi, [esp+1Ch+arg_0]
.text:0040B2AB                 mov     [esp+1Ch+var_4], edi
.text:0040B2AF                 mov     edi, [esp+1Ch+arg_4]
.text:0040B2B3                 test    esi, esi
.text:0040B2B5                 mov     [esp+1Ch+var_C], ebx
.text:0040B2B9                 mov     ecx, [edi]
.text:0040B2BB                 mov     ebx, [esp+1Ch+arg_8]
.text:0040B2BF                 jz      short loc_40B300
.text:0040B2C1                 xor     edx, edx
.text:0040B2C3                 mov     eax, 7FFFFFFFh
.text:0040B2C8                 div     ebx
.text:0040B2CA                 cmp     eax, ecx
.text:0040B2CC                 jb      short loc_40B2F9
.text:0040B2CE                 add     ecx, ecx
.text:0040B2D0
.text:0040B2D0 loc_40B2D0:                             ; CODE XREF: sub_40B2A0+62↓j
.text:0040B2D0                                         ; sub_40B2A0+71↓j ...
.text:0040B2D0                 mov     [edi], ecx
.text:0040B2D2                 imul    ebx, ecx
.text:0040B2D5                 mov     [esp+1Ch+Block], esi ; Block
.text:0040B2D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040B2DC                 call    realloc
.text:0040B2E1                 test    eax, eax
.text:0040B2E3                 jz      short loc_40B2F5
.text:0040B2E5
.text:0040B2E5 loc_40B2E5:                             ; CODE XREF: sub_40B2A0+57↓j
.text:0040B2E5                 mov     ebx, [esp+1Ch+var_C]
.text:0040B2E9                 mov     esi, [esp+1Ch+var_8]
.text:0040B2ED                 mov     edi, [esp+1Ch+var_4]
.text:0040B2F1                 add     esp, 1Ch
.text:0040B2F4                 retn
.text:0040B2F5 ; ---------------------------------------------------------------------------
.text:0040B2F5
.text:0040B2F5 loc_40B2F5:                             ; CODE XREF: sub_40B2A0+43↑j
.text:0040B2F5                 test    ebx, ebx
.text:0040B2F7                 jz      short loc_40B2E5
.text:0040B2F9
.text:0040B2F9 loc_40B2F9:                             ; CODE XREF: sub_40B2A0+2C↑j
.text:0040B2F9                 call    sub_40C060
.text:0040B2F9 ; ---------------------------------------------------------------------------
.text:0040B2FE                 align 10h
.text:0040B300
.text:0040B300 loc_40B300:                             ; CODE XREF: sub_40B2A0+1F↑j
.text:0040B300                 test    ecx, ecx
.text:0040B302                 jnz     short loc_40B2D0
.text:0040B304                 xor     edx, edx
.text:0040B306                 mov     eax, 40h ; '@'
.text:0040B30B                 div     ebx
.text:0040B30D                 test    eax, eax
.text:0040B30F                 mov     ecx, eax
.text:0040B311                 jnz     short loc_40B2D0
.text:0040B313                 mov     ecx, 1
.text:0040B318                 jmp     short loc_40B2D0
.text:0040B318 sub_40B2A0      endp
.text:0040B318
.text:0040B318 ; ---------------------------------------------------------------------------
.text:0040B31A                 align 10h
.text:0040B320 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040B320                                         ; DATA XREF: .data:Buffer↓o
.text:0040B352 ; const char aSSS[]
.text:0040B352 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40B610+50↓o
.text:0040B35E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040B35E                                         ; DATA XREF: sub_40B610:loc_40B6B1↓o
.text:0040B36E                 align 20h
.text:0040B380 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040B380                                         ; DATA XREF: sub_40B610+100↓o
.text:0040B380                 db 'ere is NO',0Ah
.text:0040B380                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040B380                 db 'R PURPOSE.',0Ah,0
.text:0040B418 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040B418                                         ; DATA XREF: sub_40B610:loc_40B751↓o
.text:0040B42F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040B42F                                         ; DATA XREF: sub_40B610:loc_40B75D↓o
.text:0040B44B                 align 20h
.text:0040B460 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040B460                                         ; DATA XREF: sub_40B610:loc_40B769↓o
.text:0040B460                 db 'and %s.',0Ah,0
.text:0040B480 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040B480                                         ; DATA XREF: sub_40B610:loc_40B775↓o
.text:0040B480                 db '%s, and %s.',0Ah,0
.text:0040B4A4                 align 20h
.text:0040B4C0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040B4C0                                         ; DATA XREF: sub_40B610:loc_40B781↓o
.text:0040B4C0                 db '%s, %s, and %s.',0Ah,0
.text:0040B4E8                 align 20h
.text:0040B500 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040B500                                         ; DATA XREF: sub_40B610:loc_40B78D↓o
.text:0040B500                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040B52C                 align 20h
.text:0040B540 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040B540                                         ; DATA XREF: sub_40B610:loc_40B799↓o
.text:0040B540                 db '%s, %s, %s, %s,',0Ah
.text:0040B540                 db 'and %s.',0Ah,0
.text:0040B570                 align 20h
.text:0040B580 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040B580                                         ; DATA XREF: sub_40B610:loc_40B7A5↓o
.text:0040B580                 db '%s, %s, %s, %s,',0Ah
.text:0040B580                 db '%s, and %s.',0Ah,0
.text:0040B5B4                 align 10h
.text:0040B5C0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040B5C0                                         ; DATA XREF: sub_40B610:def_40B67D↓o
.text:0040B5C0                 db '%s, %s, %s, %s,',0Ah
.text:0040B5C0                 db '%s, %s, and others.',0Ah,0
.text:0040B5FC ; const char aSS[]
.text:0040B5FC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_40B610+1B5↓o
.text:0040B603                 align 10h
.text:0040B610
.text:0040B610 ; =============== S U B R O U T I N E =======================================
.text:0040B610
.text:0040B610
.text:0040B610 ; int __cdecl sub_40B610(FILE *, FILE *, int, int, va_list)
.text:0040B610 sub_40B610      proc near               ; CODE XREF: sub_40B7E0+2A↓p
.text:0040B610
.text:0040B610 Stream          = dword ptr -2Ch
.text:0040B610 Format          = dword ptr -28h
.text:0040B610 ArgList         = dword ptr -24h
.text:0040B610 var_20          = dword ptr -20h
.text:0040B610 var_1C          = dword ptr -1Ch
.text:0040B610 var_14          = dword ptr -14h
.text:0040B610 arg_0           = dword ptr  4
.text:0040B610 arg_4           = dword ptr  8
.text:0040B610 arg_8           = dword ptr  0Ch
.text:0040B610 arg_C           = dword ptr  10h
.text:0040B610 arg_10          = dword ptr  14h
.text:0040B610
.text:0040B610                 push    ebp
.text:0040B611                 push    edi
.text:0040B612                 push    esi
.text:0040B613                 push    ebx
.text:0040B614                 sub     esp, 1Ch
.text:0040B617                 xor     ebx, ebx
.text:0040B619                 mov     edi, [esp+2Ch+arg_10]
.text:0040B61D                 mov     edx, [esp+2Ch+arg_8]
.text:0040B621                 mov     esi, [esp+2Ch+arg_0]
.text:0040B625                 mov     eax, [edi]
.text:0040B627                 mov     ecx, [esp+2Ch+arg_4]
.text:0040B62B                 mov     [esp+2Ch+var_14], edx
.text:0040B62F                 mov     ebp, [esp+2Ch+arg_C]
.text:0040B633                 lea     edx, [edi+4]
.text:0040B636                 test    eax, eax
.text:0040B638                 jz      short loc_40B64C
.text:0040B63A                 lea     esi, [esi+0]
.text:0040B640
.text:0040B640 loc_40B640:                             ; CODE XREF: sub_40B610+3A↓j
.text:0040B640                 mov     eax, edx
.text:0040B642                 inc     ebx
.text:0040B643                 mov     eax, [eax]
.text:0040B645                 add     edx, 4
.text:0040B648                 test    eax, eax
.text:0040B64A                 jnz     short loc_40B640
.text:0040B64C
.text:0040B64C loc_40B64C:                             ; CODE XREF: sub_40B610+28↑j
.text:0040B64C                 test    ecx, ecx
.text:0040B64E                 jz      loc_40B7BD
.text:0040B654                 mov     [esp+2Ch+var_1C], ebp
.text:0040B658                 mov     edx, [esp+2Ch+var_14]
.text:0040B65C                 mov     [esp+2Ch+ArgList], ecx
.text:0040B660                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:0040B668                 mov     [esp+2Ch+var_20], edx
.text:0040B66C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040B66F                 call    fprintf
.text:0040B674
.text:0040B674 loc_40B674:                             ; CODE XREF: sub_40B610+1C9↓j
.text:0040B674                 cmp     ebx, 9          ; switch 10 cases
.text:0040B677                 ja      def_40B67D      ; jumptable 0040B67D default case
.text:0040B67D                 jmp     ds:jpt_40B67D[ebx*4] ; switch jump
.text:0040B67D ; ---------------------------------------------------------------------------
.text:0040B684 jpt_40B67D      dd offset loc_40B6AC    ; DATA XREF: sub_40B610+6D↑r
.text:0040B684                 dd offset loc_40B6B1    ; jump table for switch statement
.text:0040B684                 dd offset loc_40B751
.text:0040B684                 dd offset loc_40B75D
.text:0040B684                 dd offset loc_40B769
.text:0040B684                 dd offset loc_40B775
.text:0040B684                 dd offset loc_40B781
.text:0040B684                 dd offset loc_40B78D
.text:0040B684                 dd offset loc_40B799
.text:0040B684                 dd offset loc_40B7A5
.text:0040B6AC ; ---------------------------------------------------------------------------
.text:0040B6AC
.text:0040B6AC loc_40B6AC:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B6AC                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B6AC                 call    abort           ; jumptable 0040B67D case 0
.text:0040B6B1 ; ---------------------------------------------------------------------------
.text:0040B6B1
.text:0040B6B1 loc_40B6B1:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B6B1                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B6B1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040B67D case 1
.text:0040B6B8                 nop
.text:0040B6B9                 lea     esi, [esi+0]
.text:0040B6C0
.text:0040B6C0 loc_40B6C0:                             ; CODE XREF: sub_40B610+148↓j
.text:0040B6C0                                         ; sub_40B610+154↓j ...
.text:0040B6C0                 call    ds:libintl_gettext
.text:0040B6C6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040B6CA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040B6CD                 mov     [esp+2Ch+Format], eax ; Format
.text:0040B6D1                 call    vfprintf
.text:0040B6D6                 mov     ebx, [esi+4]
.text:0040B6D9                 dec     ebx
.text:0040B6DA                 test    ebx, ebx
.text:0040B6DC                 mov     [esi+4], ebx
.text:0040B6DF                 js      short loc_40B73F
.text:0040B6E1                 mov     edi, [esi]
.text:0040B6E3                 mov     byte ptr [edi], 0Ah
.text:0040B6E6                 inc     dword ptr [esi]
.text:0040B6E8
.text:0040B6E8 loc_40B6E8:                             ; CODE XREF: sub_40B610+13F↓j
.text:0040B6E8                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040B6EC                 mov     edx, Buffer
.text:0040B6F2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040B6F5                 call    fputs
.text:0040B6FA                 mov     ebp, [esi+4]
.text:0040B6FD                 dec     ebp
.text:0040B6FE                 test    ebp, ebp
.text:0040B700                 mov     [esi+4], ebp
.text:0040B703                 js      short loc_40B72D
.text:0040B705                 mov     ecx, [esi]
.text:0040B707                 mov     byte ptr [ecx], 0Ah
.text:0040B70A                 inc     dword ptr [esi]
.text:0040B70C
.text:0040B70C loc_40B70C:                             ; CODE XREF: sub_40B610+12D↓j
.text:0040B70C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040B710                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040B717                 call    ds:libintl_gettext
.text:0040B71D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040B721                 add     esp, 1Ch
.text:0040B724                 pop     ebx
.text:0040B725                 pop     esi
.text:0040B726                 pop     edi
.text:0040B727                 pop     ebp
.text:0040B728                 jmp     fputs
.text:0040B72D ; ---------------------------------------------------------------------------
.text:0040B72D
.text:0040B72D loc_40B72D:                             ; CODE XREF: sub_40B610+F3↑j
.text:0040B72D                 mov     [esp+2Ch+Format], esi ; File
.text:0040B731                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040B738                 call    _flsbuf
.text:0040B73D                 jmp     short loc_40B70C
.text:0040B73F ; ---------------------------------------------------------------------------
.text:0040B73F
.text:0040B73F loc_40B73F:                             ; CODE XREF: sub_40B610+CF↑j
.text:0040B73F                 mov     [esp+2Ch+Format], esi ; File
.text:0040B743                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040B74A                 call    _flsbuf
.text:0040B74F                 jmp     short loc_40B6E8
.text:0040B751 ; ---------------------------------------------------------------------------
.text:0040B751
.text:0040B751 loc_40B751:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B751                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B751                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040B67D case 2
.text:0040B758                 jmp     loc_40B6C0
.text:0040B75D ; ---------------------------------------------------------------------------
.text:0040B75D
.text:0040B75D loc_40B75D:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B75D                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B75D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040B67D case 3
.text:0040B764                 jmp     loc_40B6C0
.text:0040B769 ; ---------------------------------------------------------------------------
.text:0040B769
.text:0040B769 loc_40B769:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B769                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B769                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040B67D case 4
.text:0040B770                 jmp     loc_40B6C0
.text:0040B775 ; ---------------------------------------------------------------------------
.text:0040B775
.text:0040B775 loc_40B775:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B775                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B775                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040B67D case 5
.text:0040B77C                 jmp     loc_40B6C0
.text:0040B781 ; ---------------------------------------------------------------------------
.text:0040B781
.text:0040B781 loc_40B781:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B781                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B781                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040B67D case 6
.text:0040B788                 jmp     loc_40B6C0
.text:0040B78D ; ---------------------------------------------------------------------------
.text:0040B78D
.text:0040B78D loc_40B78D:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B78D                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B78D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040B67D case 7
.text:0040B794                 jmp     loc_40B6C0
.text:0040B799 ; ---------------------------------------------------------------------------
.text:0040B799
.text:0040B799 loc_40B799:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B799                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B799                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040B67D case 8
.text:0040B7A0                 jmp     loc_40B6C0
.text:0040B7A5 ; ---------------------------------------------------------------------------
.text:0040B7A5
.text:0040B7A5 loc_40B7A5:                             ; CODE XREF: sub_40B610+6D↑j
.text:0040B7A5                                         ; DATA XREF: sub_40B610:jpt_40B67D↑o
.text:0040B7A5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040B67D case 9
.text:0040B7AC                 jmp     loc_40B6C0
.text:0040B7B1 ; ---------------------------------------------------------------------------
.text:0040B7B1
.text:0040B7B1 def_40B67D:                             ; CODE XREF: sub_40B610+67↑j
.text:0040B7B1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040B67D default case
.text:0040B7B8                 jmp     loc_40B6C0
.text:0040B7BD ; ---------------------------------------------------------------------------
.text:0040B7BD
.text:0040B7BD loc_40B7BD:                             ; CODE XREF: sub_40B610+3E↑j
.text:0040B7BD                 mov     [esp+2Ch+var_20], ebp
.text:0040B7C1                 mov     ecx, [esp+2Ch+var_14]
.text:0040B7C5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040B7CD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040B7D0                 mov     [esp+2Ch+ArgList], ecx
.text:0040B7D4                 call    fprintf
.text:0040B7D9                 jmp     loc_40B674
.text:0040B7D9 sub_40B610      endp
.text:0040B7D9
.text:0040B7D9 ; ---------------------------------------------------------------------------
.text:0040B7DE                 align 10h
.text:0040B7E0
.text:0040B7E0 ; =============== S U B R O U T I N E =======================================
.text:0040B7E0
.text:0040B7E0
.text:0040B7E0 ; int __cdecl sub_40B7E0(FILE *, FILE *, int, int, char)
.text:0040B7E0 sub_40B7E0      proc near               ; CODE XREF: sub_401EE0+413↑p
.text:0040B7E0
.text:0040B7E0 var_1C          = dword ptr -1Ch
.text:0040B7E0 var_18          = dword ptr -18h
.text:0040B7E0 var_14          = dword ptr -14h
.text:0040B7E0 var_10          = dword ptr -10h
.text:0040B7E0 var_C           = dword ptr -0Ch
.text:0040B7E0 arg_0           = dword ptr  4
.text:0040B7E0 arg_4           = dword ptr  8
.text:0040B7E0 arg_8           = dword ptr  0Ch
.text:0040B7E0 arg_C           = dword ptr  10h
.text:0040B7E0 arg_10          = byte ptr  14h
.text:0040B7E0
.text:0040B7E0                 sub     esp, 1Ch
.text:0040B7E3                 mov     edx, [esp+1Ch+arg_C]
.text:0040B7E7                 lea     ecx, [esp+1Ch+arg_10]
.text:0040B7EB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040B7EF                 mov     ecx, [esp+1Ch+arg_8]
.text:0040B7F3                 mov     [esp+1Ch+var_10], edx ; int
.text:0040B7F7                 mov     edx, [esp+1Ch+arg_4]
.text:0040B7FB                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040B7FF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:0040B803                 mov     edx, [esp+1Ch+arg_0]
.text:0040B807                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040B80A                 call    sub_40B610
.text:0040B80F                 add     esp, 1Ch
.text:0040B812                 retn
.text:0040B812 sub_40B7E0      endp
.text:0040B812
.text:0040B812 ; ---------------------------------------------------------------------------
.text:0040B813                 align 10h
.text:0040B820
.text:0040B820 ; =============== S U B R O U T I N E =======================================
.text:0040B820
.text:0040B820
.text:0040B820 ; int __cdecl sub_40B820(int, int, char *, int, int)
.text:0040B820 sub_40B820      proc near               ; CODE XREF: sub_401EE0+162↑p
.text:0040B820
.text:0040B820 var_1C          = dword ptr -1Ch
.text:0040B820 var_18          = dword ptr -18h
.text:0040B820 var_14          = dword ptr -14h
.text:0040B820 var_10          = dword ptr -10h
.text:0040B820 var_C           = dword ptr -0Ch
.text:0040B820 var_8           = dword ptr -8
.text:0040B820 var_4           = dword ptr -4
.text:0040B820 arg_0           = dword ptr  4
.text:0040B820 arg_4           = dword ptr  8
.text:0040B820 arg_8           = dword ptr  0Ch
.text:0040B820 arg_C           = dword ptr  10h
.text:0040B820 arg_10          = dword ptr  14h
.text:0040B820
.text:0040B820                 sub     esp, 1Ch
.text:0040B823                 mov     edx, [esp+1Ch+arg_C]
.text:0040B827                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040B82F                 mov     ecx, [esp+1Ch+arg_10]
.text:0040B833                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040B83B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040B83F                 mov     edx, [esp+1Ch+arg_4]
.text:0040B843                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040B847                 mov     ecx, [esp+1Ch+arg_8]
.text:0040B84B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040B84F                 mov     edx, [esp+1Ch+arg_0]
.text:0040B853                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040B857                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040B85A                 call    sub_40A260
.text:0040B85F                 add     esp, 1Ch
.text:0040B862                 retn
.text:0040B862 sub_40B820      endp
.text:0040B862
.text:0040B862 ; ---------------------------------------------------------------------------
.text:0040B863                 align 10h
.text:0040B870                 sub     esp, 2Ch
.text:0040B873                 mov     edx, [esp+44h]
.text:0040B877                 mov     dword ptr [esp+18h], 0
.text:0040B87F                 mov     ecx, [esp+40h]
.text:0040B883                 mov     dword ptr [esp+14h], 0
.text:0040B88B                 mov     [esp+1Ch], edx
.text:0040B88F                 mov     edx, [esp+3Ch]
.text:0040B893                 mov     [esp+10h], ecx
.text:0040B897                 mov     ecx, [esp+38h]
.text:0040B89B                 mov     [esp+0Ch], edx
.text:0040B89F                 mov     edx, [esp+34h]
.text:0040B8A3                 mov     [esp+8], ecx
.text:0040B8A7                 mov     [esp+4], edx
.text:0040B8AB                 mov     edx, [esp+30h]
.text:0040B8AF                 mov     [esp], edx
.text:0040B8B2                 call    sub_4096D0
.text:0040B8B7                 add     esp, 2Ch
.text:0040B8BA                 retn
.text:0040B8BA ; ---------------------------------------------------------------------------
.text:0040B8BB                 align 10h
.text:0040B8C0                 sub     esp, 1Ch
.text:0040B8C3                 mov     edx, [esp+2Ch]
.text:0040B8C7                 mov     dword ptr [esp+18h], 0
.text:0040B8CF                 mov     ecx, [esp+30h]
.text:0040B8D3                 mov     dword ptr [esp+14h], 1
.text:0040B8DB                 mov     [esp+0Ch], edx
.text:0040B8DF                 mov     edx, [esp+24h]
.text:0040B8E3                 mov     [esp+10h], ecx
.text:0040B8E7                 mov     ecx, [esp+28h]
.text:0040B8EB                 mov     [esp+4], edx
.text:0040B8EF                 mov     edx, [esp+20h]
.text:0040B8F3                 mov     [esp+8], ecx
.text:0040B8F7                 mov     [esp], edx
.text:0040B8FA                 call    sub_40A260
.text:0040B8FF                 add     esp, 1Ch
.text:0040B902                 retn
.text:0040B902 ; ---------------------------------------------------------------------------
.text:0040B903                 align 10h
.text:0040B910                 sub     esp, 2Ch
.text:0040B913                 mov     edx, [esp+44h]
.text:0040B917                 mov     dword ptr [esp+18h], 0
.text:0040B91F                 mov     ecx, [esp+40h]
.text:0040B923                 mov     dword ptr [esp+14h], 1
.text:0040B92B                 mov     [esp+1Ch], edx
.text:0040B92F                 mov     edx, [esp+3Ch]
.text:0040B933                 mov     [esp+10h], ecx
.text:0040B937                 mov     ecx, [esp+38h]
.text:0040B93B                 mov     [esp+0Ch], edx
.text:0040B93F                 mov     edx, [esp+34h]
.text:0040B943                 mov     [esp+8], ecx
.text:0040B947                 mov     [esp+4], edx
.text:0040B94B                 mov     edx, [esp+30h]
.text:0040B94F                 mov     [esp], edx
.text:0040B952                 call    sub_4096D0
.text:0040B957                 add     esp, 2Ch
.text:0040B95A                 retn
.text:0040B95A ; ---------------------------------------------------------------------------
.text:0040B95B                 align 10h
.text:0040B960                 mov     edx, [esp+4]
.text:0040B964                 mov     ds:dword_4222C0, edx
.text:0040B96A                 retn
.text:0040B96A ; ---------------------------------------------------------------------------
.text:0040B96B aWriteError     db 'write error',0      ; DATA XREF: sub_40B990:loc_40B9D9↓o
.text:0040B977 ; const char aSS_0[]
.text:0040B977 aSS_0           db '%s: %s',0           ; DATA XREF: sub_40B990+77↓o
.text:0040B97E ; const char aS_4[]
.text:0040B97E aS_4            db '%s',0               ; DATA XREF: sub_40B990+A0↓o
.text:0040B981 ; ---------------------------------------------------------------------------
.text:0040B981                 jmp     short sub_40B990
.text:0040B981 ; ---------------------------------------------------------------------------
.text:0040B983                 align 10h
.text:0040B990
.text:0040B990 ; =============== S U B R O U T I N E =======================================
.text:0040B990
.text:0040B990
.text:0040B990 ; void __cdecl sub_40B990()
.text:0040B990 sub_40B990      proc near               ; CODE XREF: .text:0040B981↑j
.text:0040B990                                         ; DATA XREF: sub_401EE0+7A↑o
.text:0040B990
.text:0040B990 Stream          = dword ptr -2Ch
.text:0040B990 ErrorMessage    = dword ptr -28h
.text:0040B990 var_24          = dword ptr -24h
.text:0040B990 var_20          = byte ptr -20h
.text:0040B990 var_1C          = dword ptr -1Ch
.text:0040B990 var_9           = byte ptr -9
.text:0040B990
.text:0040B990                 push    esi
.text:0040B991                 push    ebx
.text:0040B992                 sub     esp, 24h
.text:0040B995                 mov     edx, ds:_iob
.text:0040B99B                 mov     ecx, [edx+2Ch]
.text:0040B99E                 lea     esi, [edx+20h]
.text:0040B9A1                 shr     ecx, 5
.text:0040B9A4                 mov     bl, cl
.text:0040B9A6                 mov     ecx, [edx+20h]
.text:0040B9A9                 and     bl, 1
.text:0040B9AC                 cmp     ecx, [esi+8]
.text:0040B9AF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040B9B2                 setz    [esp+2Ch+var_9]
.text:0040B9B7                 call    fclose
.text:0040B9BC                 test    eax, eax
.text:0040B9BE                 setnz   al
.text:0040B9C1                 test    bl, bl
.text:0040B9C3                 jnz     loc_40BA53
.text:0040B9C9                 test    al, al
.text:0040B9CB                 jz      short loc_40BA20
.text:0040B9CD
.text:0040B9CD loc_40B9CD:                             ; CODE XREF: sub_40B990+CD↓j
.text:0040B9CD                 call    _errno
.text:0040B9D2                 mov     esi, [eax]
.text:0040B9D4
.text:0040B9D4 loc_40B9D4:                             ; CODE XREF: sub_40B990+C7↓j
.text:0040B9D4                 cmp     esi, 9
.text:0040B9D7                 jz      short loc_40BA46
.text:0040B9D9
.text:0040B9D9 loc_40B9D9:                             ; CODE XREF: sub_40B990+B8↓j
.text:0040B9D9                                         ; sub_40B990+C1↓j
.text:0040B9D9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040B9E0                 call    ds:libintl_gettext
.text:0040B9E6                 mov     ebx, eax
.text:0040B9E8                 mov     eax, ds:dword_4222C0
.text:0040B9ED                 test    eax, eax
.text:0040B9EF                 jz      short loc_40BA26
.text:0040B9F1                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040B9F4                 call    sub_40E350
.text:0040B9F9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040B9FD                 mov     edx, dword_421070
.text:0040BA03                 mov     [esp+2Ch+var_1C], ebx
.text:0040BA07                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040BA0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040BA13                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040BA16                 call    sub_415D50
.text:0040BA1B                 nop
.text:0040BA1C                 lea     esi, [esi+0]
.text:0040BA20
.text:0040BA20 loc_40BA20:                             ; CODE XREF: sub_40B990+3B↑j
.text:0040BA20                                         ; sub_40B990+B4↓j ...
.text:0040BA20                 add     esp, 24h
.text:0040BA23                 pop     ebx
.text:0040BA24                 pop     esi
.text:0040BA25                 retn
.text:0040BA26 ; ---------------------------------------------------------------------------
.text:0040BA26
.text:0040BA26 loc_40BA26:                             ; CODE XREF: sub_40B990+5F↑j
.text:0040BA26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040BA2A                 mov     ebx, dword_421070
.text:0040BA30                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:0040BA38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040BA3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040BA3F                 call    sub_415D50
.text:0040BA44                 jmp     short loc_40BA20
.text:0040BA46 ; ---------------------------------------------------------------------------
.text:0040BA46
.text:0040BA46 loc_40BA46:                             ; CODE XREF: sub_40B990+47↑j
.text:0040BA46                 test    bl, bl
.text:0040BA48                 jnz     short loc_40B9D9
.text:0040BA4A                 cmp     [esp+2Ch+var_9], 0
.text:0040BA4F                 jnz     short loc_40BA20
.text:0040BA51                 jmp     short loc_40B9D9
.text:0040BA53 ; ---------------------------------------------------------------------------
.text:0040BA53
.text:0040BA53 loc_40BA53:                             ; CODE XREF: sub_40B990+33↑j
.text:0040BA53                 xor     esi, esi
.text:0040BA55                 test    al, al
.text:0040BA57                 jz      loc_40B9D4
.text:0040BA5D                 jmp     loc_40B9CD
.text:0040BA5D sub_40B990      endp
.text:0040BA5D
.text:0040BA5D ; ---------------------------------------------------------------------------
.text:0040BA62                 align 10h
.text:0040BA70
.text:0040BA70 ; =============== S U B R O U T I N E =======================================
.text:0040BA70
.text:0040BA70
.text:0040BA70 ; int __cdecl sub_40BA70(int, char *, int)
.text:0040BA70 sub_40BA70      proc near               ; CODE XREF: sub_401EE0+70F↑p
.text:0040BA70                                         ; sub_404F90+76↑p ...
.text:0040BA70
.text:0040BA70 Str             = dword ptr -2Ch
.text:0040BA70 var_28          = dword ptr -28h
.text:0040BA70 var_24          = dword ptr -24h
.text:0040BA70 var_18          = dword ptr -18h
.text:0040BA70 var_14          = dword ptr -14h
.text:0040BA70 arg_0           = dword ptr  4
.text:0040BA70 arg_4           = dword ptr  8
.text:0040BA70 arg_8           = dword ptr  0Ch
.text:0040BA70
.text:0040BA70                 push    ebp
.text:0040BA71                 push    edi
.text:0040BA72                 push    esi
.text:0040BA73                 push    ebx
.text:0040BA74                 sub     esp, 1Ch
.text:0040BA77                 mov     ebp, [esp+2Ch+arg_0]
.text:0040BA7B                 mov     [esp+2Ch+Str], ebp
.text:0040BA7E                 call    sub_40BC00
.text:0040BA83                 mov     [esp+2Ch+Str], eax ; char *
.text:0040BA86                 mov     ebx, eax
.text:0040BA88                 call    sub_40BC60
.text:0040BA8D                 mov     [esp+2Ch+var_18], 0
.text:0040BA95                 mov     ecx, ebx
.text:0040BA97                 sub     ecx, ebp
.text:0040BA99                 add     ecx, eax
.text:0040BA9B                 test    eax, eax
.text:0040BA9D                 mov     [esp+2Ch+var_14], ecx
.text:0040BAA1                 jz      short loc_40BAB8
.text:0040BAA3                 movzx   eax, byte ptr [eax+ebx-1]
.text:0040BAA8                 cmp     al, 2Fh ; '/'
.text:0040BAAA                 jz      short loc_40BAB8
.text:0040BAAC                 cmp     al, 5Ch ; '\'
.text:0040BAAE                 jz      short loc_40BAB8
.text:0040BAB0                 mov     [esp+2Ch+var_18], 1
.text:0040BAB8
.text:0040BAB8 loc_40BAB8:                             ; CODE XREF: sub_40BA70+31↑j
.text:0040BAB8                                         ; sub_40BA70+3A↑j ...
.text:0040BAB8                 mov     ebx, [esp+2Ch+arg_4]
.text:0040BABC                 cmp     byte ptr [ebx], 0
.text:0040BABF                 jz      short loc_40BACB
.text:0040BAC1                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040BAC5                 jz      loc_40BB4F
.text:0040BACB
.text:0040BACB loc_40BACB:                             ; CODE XREF: sub_40BA70+4F↑j
.text:0040BACB                                         ; sub_40BA70+E2↓j
.text:0040BACB                 movzx   eax, byte ptr [ebx]
.text:0040BACE                 cmp     al, 2Fh ; '/'
.text:0040BAD0                 jz      short loc_40BB41
.text:0040BAD2                 cmp     al, 5Ch ; '\'
.text:0040BAD4                 jz      short loc_40BB41
.text:0040BAD6
.text:0040BAD6 loc_40BAD6:                             ; CODE XREF: sub_40BA70+DD↓j
.text:0040BAD6                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040BAD9                 call    strlen
.text:0040BADE                 mov     esi, eax
.text:0040BAE0                 mov     edx, [esp+2Ch+var_14]
.text:0040BAE4                 mov     eax, [esp+2Ch+var_18]
.text:0040BAE8                 add     edx, eax
.text:0040BAEA                 lea     edi, [esi+edx+1]
.text:0040BAEE                 mov     [esp+2Ch+Str], edi ; size_t
.text:0040BAF1                 call    sub_40B090
.text:0040BAF6                 mov     [esp+2Ch+Str], eax
.text:0040BAF9                 mov     ecx, [esp+2Ch+var_14]
.text:0040BAFD                 mov     edi, eax
.text:0040BAFF                 mov     [esp+2Ch+var_28], ebp
.text:0040BB03                 mov     [esp+2Ch+var_24], ecx
.text:0040BB07                 call    sub_41A740
.text:0040BB0C                 mov     byte ptr [eax], 2Fh ; '/'
.text:0040BB0F                 mov     edx, [esp+2Ch+var_18]
.text:0040BB13                 mov     ecx, [esp+2Ch+arg_8]
.text:0040BB17                 add     eax, edx
.text:0040BB19                 test    ecx, ecx
.text:0040BB1B                 jz      short loc_40BB24
.text:0040BB1D                 mov     ebp, [esp+2Ch+arg_8]
.text:0040BB21                 mov     [ebp+0], eax
.text:0040BB24
.text:0040BB24 loc_40BB24:                             ; CODE XREF: sub_40BA70+AB↑j
.text:0040BB24                 mov     [esp+2Ch+var_24], esi
.text:0040BB28                 mov     [esp+2Ch+var_28], ebx
.text:0040BB2C                 mov     [esp+2Ch+Str], eax
.text:0040BB2F                 call    sub_41A740
.text:0040BB34                 mov     byte ptr [eax], 0
.text:0040BB37                 add     esp, 1Ch
.text:0040BB3A                 mov     eax, edi
.text:0040BB3C                 pop     ebx
.text:0040BB3D                 pop     esi
.text:0040BB3E                 pop     edi
.text:0040BB3F                 pop     ebp
.text:0040BB40                 retn
.text:0040BB41 ; ---------------------------------------------------------------------------
.text:0040BB41
.text:0040BB41 loc_40BB41:                             ; CODE XREF: sub_40BA70+60↑j
.text:0040BB41                                         ; sub_40BA70+64↑j ...
.text:0040BB41                 inc     ebx
.text:0040BB42                 movzx   eax, byte ptr [ebx]
.text:0040BB45                 cmp     al, 2Fh ; '/'
.text:0040BB47                 jz      short loc_40BB41
.text:0040BB49                 cmp     al, 5Ch ; '\'
.text:0040BB4B                 jz      short loc_40BB41
.text:0040BB4D                 jmp     short loc_40BAD6
.text:0040BB4F ; ---------------------------------------------------------------------------
.text:0040BB4F
.text:0040BB4F loc_40BB4F:                             ; CODE XREF: sub_40BA70+55↑j
.text:0040BB4F                 add     ebx, 2
.text:0040BB52                 jmp     loc_40BACB
.text:0040BB52 sub_40BA70      endp
.text:0040BB52
.text:0040BB52 ; ---------------------------------------------------------------------------
.text:0040BB57                 align 10h
.text:0040BB60
.text:0040BB60 ; =============== S U B R O U T I N E =======================================
.text:0040BB60
.text:0040BB60
.text:0040BB60 sub_40BB60      proc near               ; CODE XREF: sub_401EE0+6E0↑p
.text:0040BB60                                         ; sub_401EE0+71D↑p ...
.text:0040BB60
.text:0040BB60 var_C           = dword ptr -0Ch
.text:0040BB60 var_4           = dword ptr -4
.text:0040BB60 arg_0           = dword ptr  4
.text:0040BB60
.text:0040BB60                 sub     esp, 0Ch
.text:0040BB63                 mov     edx, [esp+0Ch+arg_0]
.text:0040BB67                 mov     [esp+0Ch+var_4], ebx
.text:0040BB6B                 mov     [esp+0Ch+var_C], edx
.text:0040BB6E                 call    sub_40BC00
.text:0040BB73                 mov     [esp+0Ch+var_C], eax ; char *
.text:0040BB76                 mov     ebx, eax
.text:0040BB78                 call    sub_40BC60
.text:0040BB7D                 lea     edx, [eax+ebx]
.text:0040BB80                 cmp     byte ptr [edx], 0
.text:0040BB83                 mov     byte ptr [edx], 0
.text:0040BB86                 mov     ebx, [esp+0Ch+var_4]
.text:0040BB8A                 setnz   cl
.text:0040BB8D                 add     esp, 0Ch
.text:0040BB90                 movzx   eax, cl
.text:0040BB93                 retn
.text:0040BB93 sub_40BB60      endp
.text:0040BB93
.text:0040BB93 ; ---------------------------------------------------------------------------
.text:0040BB94                 align 10h
.text:0040BBA0
.text:0040BBA0 ; =============== S U B R O U T I N E =======================================
.text:0040BBA0
.text:0040BBA0
.text:0040BBA0 ; int __cdecl sub_40BBA0(int, char *)
.text:0040BBA0 sub_40BBA0      proc near               ; CODE XREF: sub_403270+21F↑p
.text:0040BBA0                                         ; sub_403270+234↑p ...
.text:0040BBA0
.text:0040BBA0 var_C           = dword ptr -0Ch
.text:0040BBA0 var_8           = dword ptr -8
.text:0040BBA0 var_4           = dword ptr -4
.text:0040BBA0 arg_0           = dword ptr  4
.text:0040BBA0 arg_4           = dword ptr  8
.text:0040BBA0
.text:0040BBA0                 sub     esp, 0Ch
.text:0040BBA3                 mov     edx, [esp+0Ch+arg_4]
.text:0040BBA7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040BBAF                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040BBB3                 mov     edx, [esp+0Ch+arg_0]
.text:0040BBB7                 mov     [esp+0Ch+var_C], edx ; int
.text:0040BBBA                 call    sub_40DFE0
.text:0040BBBF                 add     esp, 0Ch
.text:0040BBC2                 retn
.text:0040BBC2 sub_40BBA0      endp
.text:0040BBC2
.text:0040BBC2 ; ---------------------------------------------------------------------------
.text:0040BBC3                 align 10h
.text:0040BBD0
.text:0040BBD0 ; =============== S U B R O U T I N E =======================================
.text:0040BBD0
.text:0040BBD0
.text:0040BBD0 ; int __cdecl sub_40BBD0(char *)
.text:0040BBD0 sub_40BBD0      proc near               ; CODE XREF: sub_401EE0+4CD↑p
.text:0040BBD0                                         ; sub_401EE0+508↑p ...
.text:0040BBD0
.text:0040BBD0 var_C           = dword ptr -0Ch
.text:0040BBD0 var_8           = dword ptr -8
.text:0040BBD0 var_4           = dword ptr -4
.text:0040BBD0 arg_0           = dword ptr  4
.text:0040BBD0
.text:0040BBD0                 sub     esp, 0Ch
.text:0040BBD3                 mov     edx, [esp+0Ch+arg_0]
.text:0040BBD7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040BBDF                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040BBE6                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040BBEA                 call    sub_40DFE0
.text:0040BBEF                 add     esp, 0Ch
.text:0040BBF2                 retn
.text:0040BBF2 sub_40BBD0      endp
.text:0040BBF2
.text:0040BBF2 ; ---------------------------------------------------------------------------
.text:0040BBF3                 align 10h
.text:0040BC00
.text:0040BC00 ; =============== S U B R O U T I N E =======================================
.text:0040BC00
.text:0040BC00
.text:0040BC00 sub_40BC00      proc near               ; CODE XREF: sub_401EE0+6F5↑p
.text:0040BC00                                         ; sub_401EE0+8D4↑p ...
.text:0040BC00
.text:0040BC00 arg_0           = dword ptr  4
.text:0040BC00
.text:0040BC00                 mov     ecx, [esp+arg_0]
.text:0040BC04                 movzx   eax, byte ptr [ecx]
.text:0040BC07                 test    al, al
.text:0040BC09                 jz      short loc_40BC11
.text:0040BC0B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0040BC0F                 jz      short loc_40BC57
.text:0040BC11
.text:0040BC11 loc_40BC11:                             ; CODE XREF: sub_40BC00+9↑j
.text:0040BC11                                         ; sub_40BC00+5D↓j
.text:0040BC11                 test    al, al
.text:0040BC13                 mov     edx, ecx
.text:0040BC15                 jz      short loc_40BC30
.text:0040BC17                 movzx   eax, byte ptr [ecx]
.text:0040BC1A                 lea     esi, [esi+0]
.text:0040BC20
.text:0040BC20 loc_40BC20:                             ; CODE XREF: sub_40BC00+2E↓j
.text:0040BC20                 cmp     al, 2Fh ; '/'
.text:0040BC22                 jz      short loc_40BC33
.text:0040BC24                 cmp     al, 5Ch ; '\'
.text:0040BC26                 jz      short loc_40BC33
.text:0040BC28
.text:0040BC28 loc_40BC28:                             ; CODE XREF: sub_40BC00+45↓j
.text:0040BC28                 inc     edx
.text:0040BC29                 movzx   eax, byte ptr [edx]
.text:0040BC2C                 test    al, al
.text:0040BC2E                 jnz     short loc_40BC20
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: sub_40BC00+15↑j
.text:0040BC30                                         ; sub_40BC00+50↓j ...
.text:0040BC30                 mov     eax, ecx
.text:0040BC32                 retn
.text:0040BC33 ; ---------------------------------------------------------------------------
.text:0040BC33
.text:0040BC33 loc_40BC33:                             ; CODE XREF: sub_40BC00+22↑j
.text:0040BC33                                         ; sub_40BC00+26↑j ...
.text:0040BC33                 inc     edx
.text:0040BC34                 movzx   eax, byte ptr [edx]
.text:0040BC37                 cmp     al, 2Fh ; '/'
.text:0040BC39                 jz      short loc_40BC33
.text:0040BC3B                 cmp     al, 5Ch ; '\'
.text:0040BC3D                 jz      short loc_40BC33
.text:0040BC3F                 test    al, al
.text:0040BC41                 jz      short loc_40BC47
.text:0040BC43                 mov     ecx, edx
.text:0040BC45                 jmp     short loc_40BC28
.text:0040BC47 ; ---------------------------------------------------------------------------
.text:0040BC47
.text:0040BC47 loc_40BC47:                             ; CODE XREF: sub_40BC00+41↑j
.text:0040BC47                 movzx   eax, byte ptr [ecx]
.text:0040BC4A                 cmp     al, 2Fh ; '/'
.text:0040BC4C                 jz      short loc_40BC52
.text:0040BC4E                 cmp     al, 5Ch ; '\'
.text:0040BC50                 jnz     short loc_40BC30
.text:0040BC52
.text:0040BC52 loc_40BC52:                             ; CODE XREF: sub_40BC00+4C↑j
.text:0040BC52                 lea     ecx, [edx-1]
.text:0040BC55                 jmp     short loc_40BC30
.text:0040BC57 ; ---------------------------------------------------------------------------
.text:0040BC57
.text:0040BC57 loc_40BC57:                             ; CODE XREF: sub_40BC00+F↑j
.text:0040BC57                 add     ecx, 2
.text:0040BC5A                 movzx   eax, byte ptr [ecx]
.text:0040BC5D                 jmp     short loc_40BC11
.text:0040BC5D sub_40BC00      endp
.text:0040BC5D
.text:0040BC5D ; ---------------------------------------------------------------------------
.text:0040BC5F                 align 10h
.text:0040BC60
.text:0040BC60 ; =============== S U B R O U T I N E =======================================
.text:0040BC60
.text:0040BC60
.text:0040BC60 ; int __cdecl sub_40BC60(char *)
.text:0040BC60 sub_40BC60      proc near               ; CODE XREF: sub_408AE0+37↑p
.text:0040BC60                                         ; sub_408AE0+45↑p ...
.text:0040BC60
.text:0040BC60 Str             = dword ptr -0Ch
.text:0040BC60 arg_0           = dword ptr  4
.text:0040BC60
.text:0040BC60                 push    ebx
.text:0040BC61                 sub     esp, 8
.text:0040BC64                 mov     ebx, [esp+0Ch+arg_0]
.text:0040BC68                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040BC6B                 call    strlen
.text:0040BC70                 cmp     eax, 1
.text:0040BC73                 jbe     short loc_40BC90
.text:0040BC75                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040BC7A                 cmp     dl, 2Fh ; '/'
.text:0040BC7D                 jz      short loc_40BC95
.text:0040BC7F                 cmp     dl, 5Ch ; '\'
.text:0040BC82                 jz      short loc_40BC95
.text:0040BC84                 lea     esi, [esi+0]
.text:0040BC8A                 lea     edi, [edi+0]
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: sub_40BC60+13↑j
.text:0040BC90                                         ; sub_40BC60+39↓j ...
.text:0040BC90                 add     esp, 8
.text:0040BC93                 pop     ebx
.text:0040BC94                 retn
.text:0040BC95 ; ---------------------------------------------------------------------------
.text:0040BC95
.text:0040BC95 loc_40BC95:                             ; CODE XREF: sub_40BC60+1D↑j
.text:0040BC95                                         ; sub_40BC60+22↑j ...
.text:0040BC95                 dec     eax
.text:0040BC96                 cmp     eax, 1
.text:0040BC99                 jbe     short loc_40BC90
.text:0040BC9B                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040BCA0                 cmp     dl, 2Fh ; '/'
.text:0040BCA3                 jz      short loc_40BC95
.text:0040BCA5                 cmp     dl, 5Ch ; '\'
.text:0040BCA8                 jz      short loc_40BC95
.text:0040BCAA                 jmp     short loc_40BC90
.text:0040BCAA sub_40BC60      endp
.text:0040BCAA
.text:0040BCAA ; ---------------------------------------------------------------------------
.text:0040BCAC                 align 10h
.text:0040BCB0
.text:0040BCB0 ; =============== S U B R O U T I N E =======================================
.text:0040BCB0
.text:0040BCB0
.text:0040BCB0 ; int __cdecl sub_40BCB0(int, char *, int)
.text:0040BCB0 sub_40BCB0      proc near               ; CODE XREF: sub_40BD60+1A↓p
.text:0040BCB0
.text:0040BCB0 var_2C          = dword ptr -2Ch
.text:0040BCB0 var_28          = dword ptr -28h
.text:0040BCB0 var_1C          = dword ptr -1Ch
.text:0040BCB0 var_18          = dword ptr -18h
.text:0040BCB0 var_14          = dword ptr -14h
.text:0040BCB0 var_10          = dword ptr -10h
.text:0040BCB0 arg_0           = dword ptr  4
.text:0040BCB0 arg_4           = dword ptr  8
.text:0040BCB0 arg_8           = dword ptr  0Ch
.text:0040BCB0
.text:0040BCB0                 push    edi
.text:0040BCB1                 push    esi
.text:0040BCB2                 push    ebx
.text:0040BCB3                 sub     esp, 20h
.text:0040BCB6                 xor     ebx, ebx
.text:0040BCB8                 mov     ecx, [esp+2Ch+arg_8]
.text:0040BCBC                 mov     esi, [esp+2Ch+arg_0]
.text:0040BCC0                 test    ecx, ecx
.text:0040BCC2                 jz      short loc_40BD04
.text:0040BCC4                 mov     ebx, [ecx]
.text:0040BCC6                 mov     [esp+2Ch+var_1C], ebx
.text:0040BCCA                 mov     edi, [ecx+4]
.text:0040BCCD                 mov     ebx, 10624DD3h
.text:0040BCD2                 mov     eax, edi
.text:0040BCD4                 imul    ebx
.text:0040BCD6                 mov     eax, edi
.text:0040BCD8                 sar     eax, 1Fh
.text:0040BCDB                 sar     edx, 6
.text:0040BCDE                 sub     edx, eax
.text:0040BCE0                 mov     [esp+2Ch+var_18], edx
.text:0040BCE4                 mov     edx, [ecx+8]
.text:0040BCE7                 mov     [esp+2Ch+var_14], edx
.text:0040BCEB                 mov     edi, [ecx+0Ch]
.text:0040BCEE                 mov     eax, edi
.text:0040BCF0                 imul    ebx
.text:0040BCF2                 mov     ebx, edi
.text:0040BCF4                 sar     ebx, 1Fh
.text:0040BCF7                 sar     edx, 6
.text:0040BCFA                 sub     edx, ebx
.text:0040BCFC                 lea     ebx, [esp+2Ch+var_1C]
.text:0040BD00                 mov     [esp+2Ch+var_10], edx
.text:0040BD04
.text:0040BD04 loc_40BD04:                             ; CODE XREF: sub_40BCB0+12↑j
.text:0040BD04                 test    esi, esi
.text:0040BD06                 js      short loc_40BD37
.text:0040BD08                 mov     [esp+2Ch+var_28], ebx
.text:0040BD0C                 mov     [esp+2Ch+var_2C], esi
.text:0040BD0F                 call    sub_41A840
.text:0040BD14                 xor     edx, edx
.text:0040BD16                 test    eax, eax
.text:0040BD18                 jnz     short loc_40BD23
.text:0040BD1A
.text:0040BD1A loc_40BD1A:                             ; CODE XREF: sub_40BCB0+99↓j
.text:0040BD1A                                         ; sub_40BCB0+A0↓j
.text:0040BD1A                 add     esp, 20h
.text:0040BD1D                 mov     eax, edx
.text:0040BD1F                 pop     ebx
.text:0040BD20                 pop     esi
.text:0040BD21                 pop     edi
.text:0040BD22                 retn
.text:0040BD23 ; ---------------------------------------------------------------------------
.text:0040BD23
.text:0040BD23 loc_40BD23:                             ; CODE XREF: sub_40BCB0+68↑j
.text:0040BD23                 call    _errno
.text:0040BD28                 mov     eax, [eax]
.text:0040BD2A                 cmp     eax, 5
.text:0040BD2D                 jz      short loc_40BD4B
.text:0040BD2F                 cmp     eax, 5
.text:0040BD32                 jg      short loc_40BD52
.text:0040BD34                 dec     eax
.text:0040BD35
.text:0040BD35 loc_40BD35:                             ; CODE XREF: sub_40BCB0+AA↓j
.text:0040BD35                 jz      short loc_40BD4B
.text:0040BD37
.text:0040BD37 loc_40BD37:                             ; CODE XREF: sub_40BCB0+56↑j
.text:0040BD37                 mov     [esp+2Ch+var_28], ebx ; int
.text:0040BD3B                 mov     ecx, [esp+2Ch+arg_4]
.text:0040BD3F                 mov     [esp+2Ch+var_2C], ecx ; char *
.text:0040BD42                 call    sub_41A180
.text:0040BD47                 mov     edx, eax
.text:0040BD49                 jmp     short loc_40BD1A
.text:0040BD4B ; ---------------------------------------------------------------------------
.text:0040BD4B
.text:0040BD4B loc_40BD4B:                             ; CODE XREF: sub_40BCB0+7D↑j
.text:0040BD4B                                         ; sub_40BCB0:loc_40BD35↑j ...
.text:0040BD4B                 mov     edx, 0FFFFFFFFh
.text:0040BD50                 jmp     short loc_40BD1A
.text:0040BD52 ; ---------------------------------------------------------------------------
.text:0040BD52
.text:0040BD52 loc_40BD52:                             ; CODE XREF: sub_40BCB0+82↑j
.text:0040BD52                 cmp     eax, 0Dh
.text:0040BD55                 jz      short loc_40BD4B
.text:0040BD57                 cmp     eax, 1Eh
.text:0040BD5A                 jmp     short loc_40BD35
.text:0040BD5A sub_40BCB0      endp
.text:0040BD5A
.text:0040BD5A ; ---------------------------------------------------------------------------
.text:0040BD5C                 align 10h
.text:0040BD60
.text:0040BD60 ; =============== S U B R O U T I N E =======================================
.text:0040BD60
.text:0040BD60
.text:0040BD60 ; int __cdecl sub_40BD60(char *, int)
.text:0040BD60 sub_40BD60      proc near               ; CODE XREF: sub_403270+5E2↑p
.text:0040BD60                                         ; sub_408D80+2E2↑p ...
.text:0040BD60
.text:0040BD60 var_C           = dword ptr -0Ch
.text:0040BD60 var_8           = dword ptr -8
.text:0040BD60 var_4           = dword ptr -4
.text:0040BD60 arg_0           = dword ptr  4
.text:0040BD60 arg_4           = dword ptr  8
.text:0040BD60
.text:0040BD60                 sub     esp, 0Ch
.text:0040BD63                 mov     edx, [esp+0Ch+arg_4]
.text:0040BD67                 mov     [esp+0Ch+var_C], 0FFFFFFFFh ; int
.text:0040BD6E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040BD72                 mov     edx, [esp+0Ch+arg_0]
.text:0040BD76                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040BD7A                 call    sub_40BCB0
.text:0040BD7F                 add     esp, 0Ch
.text:0040BD82                 retn
.text:0040BD82 sub_40BD60      endp
.text:0040BD82
.text:0040BD82 ; ---------------------------------------------------------------------------
.text:0040BD83                 align 10h
.text:0040BD90
.text:0040BD90 ; =============== S U B R O U T I N E =======================================
.text:0040BD90
.text:0040BD90
.text:0040BD90 ; int __cdecl sub_40BD90(char *, int)
.text:0040BD90 sub_40BD90      proc near               ; CODE XREF: sub_403270+967↑p
.text:0040BD90                                         ; sub_403270+AC6↑p
.text:0040BD90
.text:0040BD90 Block           = dword ptr -1Ch
.text:0040BD90 lpString1       = dword ptr -18h
.text:0040BD90 var_14          = dword ptr -14h
.text:0040BD90 arg_0           = dword ptr  4
.text:0040BD90 arg_4           = dword ptr  8
.text:0040BD90
.text:0040BD90                 push    ebp
.text:0040BD91                 push    edi
.text:0040BD92                 mov     edi, 7FFFFFFFh
.text:0040BD97                 push    esi
.text:0040BD98                 push    ebx
.text:0040BD99                 sub     esp, 0Ch
.text:0040BD9C                 mov     eax, [esp+1Ch+arg_4]
.text:0040BDA0                 mov     ebp, [esp+1Ch+arg_0]
.text:0040BDA4                 cmp     eax, 7FFFFFFEh
.text:0040BDA9                 ja      short loc_40BDB0
.text:0040BDAB                 lea     edi, [eax+1]
.text:0040BDAE                 mov     esi, esi
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: sub_40BD90+19↑j
.text:0040BDB0                                         ; sub_40BD90+56↓j ...
.text:0040BDB0                 mov     [esp+1Ch+Block], edi ; size_t
.text:0040BDB3                 call    sub_40B090
.text:0040BDB8                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:0040BDBC                 mov     esi, eax
.text:0040BDBE                 mov     [esp+1Ch+var_14], edi
.text:0040BDC2                 mov     [esp+1Ch+Block], ebp ; char *
.text:0040BDC5                 call    sub_419010
.text:0040BDCA                 test    eax, eax
.text:0040BDCC                 mov     ebx, eax
.text:0040BDCE                 js      short loc_40BE05
.text:0040BDD0
.text:0040BDD0 loc_40BDD0:                             ; CODE XREF: sub_40BD90+7D↓j
.text:0040BDD0                 cmp     ebx, edi
.text:0040BDD2                 jb      short loc_40BDF7
.text:0040BDD4                 mov     [esp+1Ch+Block], esi ; Block
.text:0040BDD7                 call    free
.text:0040BDDC                 cmp     edi, 3FFFFFFFh
.text:0040BDE2                 ja      short loc_40BDE8
.text:0040BDE4                 add     edi, edi
.text:0040BDE6                 jmp     short loc_40BDB0
.text:0040BDE8 ; ---------------------------------------------------------------------------
.text:0040BDE8
.text:0040BDE8 loc_40BDE8:                             ; CODE XREF: sub_40BD90+52↑j
.text:0040BDE8                 cmp     edi, 7FFFFFFEh
.text:0040BDEE                 ja      short loc_40BE29
.text:0040BDF0                 mov     edi, 7FFFFFFFh
.text:0040BDF5                 jmp     short loc_40BDB0
.text:0040BDF7 ; ---------------------------------------------------------------------------
.text:0040BDF7
.text:0040BDF7 loc_40BDF7:                             ; CODE XREF: sub_40BD90+42↑j
.text:0040BDF7                 mov     byte ptr [ebx+esi], 0
.text:0040BDFB                 mov     eax, esi
.text:0040BDFD
.text:0040BDFD loc_40BDFD:                             ; CODE XREF: sub_40BD90+97↓j
.text:0040BDFD                 add     esp, 0Ch
.text:0040BE00                 pop     ebx
.text:0040BE01                 pop     esi
.text:0040BE02                 pop     edi
.text:0040BE03                 pop     ebp
.text:0040BE04                 retn
.text:0040BE05 ; ---------------------------------------------------------------------------
.text:0040BE05
.text:0040BE05 loc_40BE05:                             ; CODE XREF: sub_40BD90+3E↑j
.text:0040BE05                 call    _errno
.text:0040BE0A                 cmp     dword ptr [eax], 22h ; '"'
.text:0040BE0D                 jz      short loc_40BDD0
.text:0040BE0F                 call    _errno
.text:0040BE14                 mov     edi, [eax]
.text:0040BE16                 mov     [esp+1Ch+Block], esi ; Block
.text:0040BE19                 call    free
.text:0040BE1E                 call    _errno
.text:0040BE23                 mov     [eax], edi
.text:0040BE25                 xor     eax, eax
.text:0040BE27                 jmp     short loc_40BDFD
.text:0040BE29 ; ---------------------------------------------------------------------------
.text:0040BE29
.text:0040BE29 loc_40BE29:                             ; CODE XREF: sub_40BD90+5E↑j
.text:0040BE29                 call    sub_40C060
.text:0040BE29 sub_40BD90      endp
.text:0040BE29
.text:0040BE29 ; ---------------------------------------------------------------------------
.text:0040BE2E                 align 10h
.text:0040BE30                 push    esi
.text:0040BE31                 push    ebx
.text:0040BE32                 sub     esp, 4
.text:0040BE35                 mov     ebx, [esp+10h]
.text:0040BE39                 cmp     byte ptr [ebx], 0
.text:0040BE3C                 jz      short loc_40BE44
.text:0040BE3E                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040BE42                 jz      short loc_40BE96
.text:0040BE44
.text:0040BE44 loc_40BE44:                             ; CODE XREF: .text:0040BE3C↑j
.text:0040BE44                 xor     esi, esi
.text:0040BE46
.text:0040BE46 loc_40BE46:                             ; CODE XREF: .text:0040BE9B↓j
.text:0040BE46                 mov     [esp], ebx
.text:0040BE49                 call    sub_40BC00
.text:0040BE4E                 sub     eax, ebx
.text:0040BE50                 cmp     esi, eax
.text:0040BE52                 jnb     short loc_40BE76
.text:0040BE54                 lea     esi, [esi+0]
.text:0040BE5A                 lea     edi, [edi+0]
.text:0040BE60
.text:0040BE60 loc_40BE60:                             ; CODE XREF: .text:0040BE74↓j
.text:0040BE60                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040BE65                 cmp     dl, 2Fh ; '/'
.text:0040BE68                 jz      short loc_40BE71
.text:0040BE6A                 cmp     dl, 5Ch ; '\'
.text:0040BE6D                 mov     ecx, eax
.text:0040BE6F                 jnz     short loc_40BE89
.text:0040BE71
.text:0040BE71 loc_40BE71:                             ; CODE XREF: .text:0040BE68↑j
.text:0040BE71                 dec     eax
.text:0040BE72                 cmp     esi, eax
.text:0040BE74                 jb      short loc_40BE60
.text:0040BE76
.text:0040BE76 loc_40BE76:                             ; CODE XREF: .text:0040BE52↑j
.text:0040BE76                 movzx   edx, byte ptr [esi+ebx]
.text:0040BE7A                 xor     eax, eax
.text:0040BE7C                 cmp     dl, 2Fh ; '/'
.text:0040BE7F                 jz      short loc_40BE8F
.text:0040BE81                 cmp     dl, 5Ch ; '\'
.text:0040BE84                 jz      short loc_40BE8F
.text:0040BE86
.text:0040BE86 loc_40BE86:                             ; CODE XREF: .text:0040BE94↓j
.text:0040BE86                 lea     ecx, [eax+esi]
.text:0040BE89
.text:0040BE89 loc_40BE89:                             ; CODE XREF: .text:0040BE6F↑j
.text:0040BE89                 pop     edx
.text:0040BE8A                 mov     eax, ecx
.text:0040BE8C                 pop     ebx
.text:0040BE8D                 pop     esi
.text:0040BE8E                 retn
.text:0040BE8F ; ---------------------------------------------------------------------------
.text:0040BE8F
.text:0040BE8F loc_40BE8F:                             ; CODE XREF: .text:0040BE7F↑j
.text:0040BE8F                                         ; .text:0040BE84↑j
.text:0040BE8F                 mov     eax, 1
.text:0040BE94                 jmp     short loc_40BE86
.text:0040BE96 ; ---------------------------------------------------------------------------
.text:0040BE96
.text:0040BE96 loc_40BE96:                             ; CODE XREF: .text:0040BE42↑j
.text:0040BE96                 mov     esi, 2
.text:0040BE9B                 jmp     short loc_40BE46
.text:0040BE9B ; ---------------------------------------------------------------------------
.text:0040BE9D                 align 10h
.text:0040BEA0
.text:0040BEA0 ; =============== S U B R O U T I N E =======================================
.text:0040BEA0
.text:0040BEA0
.text:0040BEA0 ; int __cdecl sub_40BEA0(void *)
.text:0040BEA0 sub_40BEA0      proc near               ; CODE XREF: sub_403270+349↑p
.text:0040BEA0                                         ; sub_408AE0+C8↑p ...
.text:0040BEA0
.text:0040BEA0 var_2C          = dword ptr -2Ch
.text:0040BEA0 Src             = dword ptr -28h
.text:0040BEA0 Size            = dword ptr -24h
.text:0040BEA0 var_11          = byte ptr -11h
.text:0040BEA0 arg_0           = dword ptr  4
.text:0040BEA0
.text:0040BEA0                 push    ebp
.text:0040BEA1                 push    edi
.text:0040BEA2                 push    esi
.text:0040BEA3                 push    ebx
.text:0040BEA4                 sub     esp, 1Ch
.text:0040BEA7                 mov     edi, [esp+2Ch+arg_0]
.text:0040BEAB                 cmp     byte ptr [edi], 0
.text:0040BEAE                 jz      short loc_40BEBA
.text:0040BEB0                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040BEB4                 jz      loc_40BF57
.text:0040BEBA
.text:0040BEBA loc_40BEBA:                             ; CODE XREF: sub_40BEA0+E↑j
.text:0040BEBA                 xor     esi, esi
.text:0040BEBC
.text:0040BEBC loc_40BEBC:                             ; CODE XREF: sub_40BEA0+BC↓j
.text:0040BEBC                 mov     [esp+2Ch+var_2C], edi
.text:0040BEBF                 call    sub_40BC00
.text:0040BEC4                 sub     eax, edi
.text:0040BEC6                 cmp     esi, eax
.text:0040BEC8                 jnb     short loc_40BEE6
.text:0040BECA                 lea     esi, [esi+0]
.text:0040BED0
.text:0040BED0 loc_40BED0:                             ; CODE XREF: sub_40BEA0+44↓j
.text:0040BED0                 movzx   edx, byte ptr [eax+edi-1]
.text:0040BED5                 cmp     dl, 2Fh ; '/'
.text:0040BED8                 jz      short loc_40BEE1
.text:0040BEDA                 cmp     dl, 5Ch ; '\'
.text:0040BEDD                 mov     ebx, eax
.text:0040BEDF                 jnz     short loc_40BEF7
.text:0040BEE1
.text:0040BEE1 loc_40BEE1:                             ; CODE XREF: sub_40BEA0+38↑j
.text:0040BEE1                 dec     eax
.text:0040BEE2                 cmp     esi, eax
.text:0040BEE4                 jb      short loc_40BED0
.text:0040BEE6
.text:0040BEE6 loc_40BEE6:                             ; CODE XREF: sub_40BEA0+28↑j
.text:0040BEE6                 movzx   eax, byte ptr [esi+edi]
.text:0040BEEA                 xor     edx, edx
.text:0040BEEC                 cmp     al, 2Fh ; '/'
.text:0040BEEE                 jz      short loc_40BF50
.text:0040BEF0                 cmp     al, 5Ch ; '\'
.text:0040BEF2                 jz      short loc_40BF50
.text:0040BEF4
.text:0040BEF4 loc_40BEF4:                             ; CODE XREF: sub_40BEA0+B5↓j
.text:0040BEF4                 lea     ebx, [edx+esi]
.text:0040BEF7
.text:0040BEF7 loc_40BEF7:                             ; CODE XREF: sub_40BEA0+3F↑j
.text:0040BEF7                 cmp     byte ptr [edi], 0
.text:0040BEFA                 mov     ebp, ebx
.text:0040BEFC                 jz      short loc_40BF04
.text:0040BEFE                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040BF02                 jz      short loc_40BF4B
.text:0040BF04
.text:0040BF04 loc_40BF04:                             ; CODE XREF: sub_40BEA0+5C↑j
.text:0040BF04                 test    ebx, ebx
.text:0040BF06
.text:0040BF06 loc_40BF06:                             ; CODE XREF: sub_40BEA0+AE↓j
.text:0040BF06                 setz    [esp+2Ch+var_11]
.text:0040BF0B                 movzx   ecx, [esp+2Ch+var_11]
.text:0040BF10                 lea     edx, [ecx+ebx+1]
.text:0040BF14                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:0040BF17                 call    sub_40B090
.text:0040BF1C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040BF1F                 mov     esi, eax
.text:0040BF21                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040BF25                 mov     [esp+2Ch+Src], edi ; Src
.text:0040BF29                 call    memcpy
.text:0040BF2E                 cmp     [esp+2Ch+var_11], 0
.text:0040BF33                 jz      short loc_40BF3C
.text:0040BF35                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:0040BF39                 lea     ebp, [ebx+1]
.text:0040BF3C
.text:0040BF3C loc_40BF3C:                             ; CODE XREF: sub_40BEA0+93↑j
.text:0040BF3C                 mov     byte ptr [ebp+esi+0], 0
.text:0040BF41                 mov     eax, esi
.text:0040BF43                 add     esp, 1Ch
.text:0040BF46                 pop     ebx
.text:0040BF47                 pop     esi
.text:0040BF48                 pop     edi
.text:0040BF49                 pop     ebp
.text:0040BF4A                 retn
.text:0040BF4B ; ---------------------------------------------------------------------------
.text:0040BF4B
.text:0040BF4B loc_40BF4B:                             ; CODE XREF: sub_40BEA0+62↑j
.text:0040BF4B                 cmp     ebx, 2
.text:0040BF4E                 jmp     short loc_40BF06
.text:0040BF50 ; ---------------------------------------------------------------------------
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: sub_40BEA0+4E↑j
.text:0040BF50                                         ; sub_40BEA0+52↑j
.text:0040BF50                 mov     edx, 1
.text:0040BF55                 jmp     short loc_40BEF4
.text:0040BF57 ; ---------------------------------------------------------------------------
.text:0040BF57
.text:0040BF57 loc_40BF57:                             ; CODE XREF: sub_40BEA0+14↑j
.text:0040BF57                 mov     esi, 2
.text:0040BF5C                 jmp     loc_40BEBC
.text:0040BF5C sub_40BEA0      endp
.text:0040BF5C
.text:0040BF5C ; ---------------------------------------------------------------------------
.text:0040BF61                 align 10h
.text:0040BF70
.text:0040BF70 ; =============== S U B R O U T I N E =======================================
.text:0040BF70
.text:0040BF70
.text:0040BF70 sub_40BF70      proc near               ; CODE XREF: sub_403270:loc_404A68↑p
.text:0040BF70                                         ; sub_403270:loc_404B92↑p ...
.text:0040BF70
.text:0040BF70 C               = dword ptr -9Ch
.text:0040BF70 Type            = dword ptr -98h
.text:0040BF70 var_8C          = byte ptr -8Ch
.text:0040BF70
.text:0040BF70                 push    esi
.text:0040BF71                 xor     esi, esi
.text:0040BF73                 push    ebx
.text:0040BF74                 sub     esp, 94h
.text:0040BF7A                 lea     esi, [esi+0]
.text:0040BF80
.text:0040BF80 loc_40BF80:                             ; CODE XREF: sub_40BF70+47↓j
.text:0040BF80                                         ; sub_40BF70+66↓j ...
.text:0040BF80                 mov     ecx, ds:_iob
.text:0040BF86                 mov     ebx, [ecx+4]
.text:0040BF89                 dec     ebx
.text:0040BF8A                 mov     [ecx+4], ebx
.text:0040BF8D                 test    ebx, ebx
.text:0040BF8F                 js      loc_40C020
.text:0040BF95                 mov     ecx, ds:_iob
.text:0040BF9B                 mov     edx, [ecx]
.text:0040BF9D                 movzx   ebx, byte ptr [edx]
.text:0040BFA0                 inc     edx
.text:0040BFA1                 mov     [ecx], edx
.text:0040BFA3
.text:0040BFA3 loc_40BFA3:                             ; CODE XREF: sub_40BF70+C0↓j
.text:0040BFA3                 cmp     ebx, 0FFFFFFFFh
.text:0040BFA6                 jz      short loc_40BFF8
.text:0040BFA8                 cmp     ebx, 0Ah
.text:0040BFAB                 jz      short loc_40BFF8
.text:0040BFAD                 lea     edx, [esi-1]
.text:0040BFB0                 cmp     edx, 7Dh ; '}'
.text:0040BFB3                 jbe     short loc_40BFE0
.text:0040BFB5                 test    esi, esi
.text:0040BFB7                 jnz     short loc_40BF80
.text:0040BFB9                 mov     edx, ds:__mb_cur_max
.text:0040BFBF                 cmp     dword ptr [edx], 1
.text:0040BFC2                 jz      short loc_40BFE7
.text:0040BFC4                 mov     [esp+9Ch+Type], 8 ; Type
.text:0040BFCC                 mov     [esp+9Ch+C], ebx ; C
.text:0040BFCF                 call    _isctype
.text:0040BFD4
.text:0040BFD4 loc_40BFD4:                             ; CODE XREF: sub_40BF70+86↓j
.text:0040BFD4                 test    eax, eax
.text:0040BFD6                 jnz     short loc_40BF80
.text:0040BFD8                 nop
.text:0040BFD9                 lea     esi, [esi+0]
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BF70+43↑j
.text:0040BFE0                 mov     [esp+esi+9Ch+var_8C], bl
.text:0040BFE4                 inc     esi
.text:0040BFE5                 jmp     short loc_40BF80
.text:0040BFE7 ; ---------------------------------------------------------------------------
.text:0040BFE7
.text:0040BFE7 loc_40BFE7:                             ; CODE XREF: sub_40BF70+52↑j
.text:0040BFE7                 mov     edx, ds:_pctype
.text:0040BFED                 mov     ecx, [edx]
.text:0040BFEF                 movzx   eax, word ptr [ecx+ebx*2]
.text:0040BFF3                 and     eax, 8
.text:0040BFF6                 jmp     short loc_40BFD4
.text:0040BFF8 ; ---------------------------------------------------------------------------
.text:0040BFF8
.text:0040BFF8 loc_40BFF8:                             ; CODE XREF: sub_40BF70+36↑j
.text:0040BFF8                                         ; sub_40BF70+3B↑j
.text:0040BFF8                 mov     [esp+esi+9Ch+var_8C], 0
.text:0040BFFD                 lea     esi, [esp+9Ch+var_8C]
.text:0040C001                 mov     [esp+9Ch+C], esi
.text:0040C004                 call    near ptr loc_40E5CB+5
.text:0040C009                 dec     eax
.text:0040C00A                 setz    cl
.text:0040C00D                 add     esp, 94h
.text:0040C013                 pop     ebx
.text:0040C014                 movzx   eax, cl
.text:0040C017                 pop     esi
.text:0040C018                 retn
.text:0040C018 ; ---------------------------------------------------------------------------
.text:0040C019                 align 10h
.text:0040C020
.text:0040C020 loc_40C020:                             ; CODE XREF: sub_40BF70+1F↑j
.text:0040C020                 mov     ebx, ds:_iob
.text:0040C026                 mov     [esp+9Ch+C], ebx ; File
.text:0040C029                 call    _filbuf
.text:0040C02E                 mov     ebx, eax
.text:0040C030                 jmp     loc_40BFA3
.text:0040C030 sub_40BF70      endp
.text:0040C030
.text:0040C030 ; ---------------------------------------------------------------------------
.text:0040C035                 align 10h
.text:0040C040 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40C060+3↓o
.text:0040C051 ; const char aS_1[]
.text:0040C051 aS_1            db '%s',0               ; DATA XREF: sub_40C060+10↓o
.text:0040C054                 align 10h
.text:0040C060
.text:0040C060 ; =============== S U B R O U T I N E =======================================
.text:0040C060
.text:0040C060 ; Attributes: noreturn
.text:0040C060
.text:0040C060 sub_40C060      proc near               ; CODE XREF: sub_405E30:loc_405F14↑p
.text:0040C060                                         ; sub_405F90:loc_406071↑p ...
.text:0040C060
.text:0040C060 Code            = dword ptr -1Ch
.text:0040C060 ErrorMessage    = dword ptr -18h
.text:0040C060 var_14          = dword ptr -14h
.text:0040C060 var_10          = byte ptr -10h
.text:0040C060
.text:0040C060                 sub     esp, 1Ch
.text:0040C063                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040C06A                 call    ds:libintl_gettext
.text:0040C070                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:0040C078                 mov     edx, dword_421070
.text:0040C07E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040C086                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040C08A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040C08D                 call    sub_415D50
.text:0040C092                 call    abort
.text:0040C092 sub_40C060      endp
.text:0040C092
.text:0040C092 ; ---------------------------------------------------------------------------
.text:0040C097                 align 10h
.text:0040C0A0 dword_40C0A0    dd 0                    ; DATA XREF: sub_40C0D0+D2↓o
.text:0040C0A0                                         ; sub_40C0D0:loc_40C300↓o ...
.text:0040C0A4 dword_40C0A4    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:0040C0A4                                         ; DATA XREF: .text:0040CCBC↓r
.text:0040C0A4                                         ; .text:0040CCC5↓r ...
.text:0040C0B4 flt_40C0B4      dd 0.1                  ; DATA XREF: sub_40C0D0:loc_40C11F↓r
.text:0040C0B8 flt_40C0B8      dd 4.2949673e9          ; DATA XREF: sub_40C0D0+101↓r
.text:0040C0BC flt_40C0BC      dd 0.89999998           ; DATA XREF: sub_40C0D0+66↓r
.text:0040C0C0 flt_40C0C0      dd 1.1                  ; DATA XREF: sub_40C0D0+7A↓r
.text:0040C0C4                 align 10h
.text:0040C0D0
.text:0040C0D0 ; =============== S U B R O U T I N E =======================================
.text:0040C0D0
.text:0040C0D0
.text:0040C0D0 sub_40C0D0      proc near               ; CODE XREF: sub_404D50+2A↑p
.text:0040C0D0                                         ; .text:00404DBA↑p ...
.text:0040C0D0
.text:0040C0D0 var_44          = qword ptr -44h
.text:0040C0D0 Size            = dword ptr -3Ch
.text:0040C0D0 var_38          = dword ptr -38h
.text:0040C0D0 var_28          = dword ptr -28h
.text:0040C0D0 var_24          = qword ptr -24h
.text:0040C0D0 var_18          = word ptr -18h
.text:0040C0D0 var_16          = word ptr -16h
.text:0040C0D0 var_10          = dword ptr -10h
.text:0040C0D0 var_C           = dword ptr -0Ch
.text:0040C0D0 var_8           = dword ptr -8
.text:0040C0D0 var_4           = dword ptr -4
.text:0040C0D0 arg_0           = dword ptr  4
.text:0040C0D0 arg_4           = dword ptr  8
.text:0040C0D0 arg_8           = dword ptr  0Ch
.text:0040C0D0 arg_C           = dword ptr  10h
.text:0040C0D0 arg_10          = dword ptr  14h
.text:0040C0D0
.text:0040C0D0                 sub     esp, 3Ch
.text:0040C0D3                 mov     [esp+3Ch+var_4], ebp
.text:0040C0D7                 mov     ebp, [esp+3Ch+arg_8]
.text:0040C0DB                 mov     [esp+3Ch+var_10], ebx
.text:0040C0DF                 mov     ebx, [esp+3Ch+arg_4]
.text:0040C0E3                 test    ebp, ebp
.text:0040C0E5                 mov     [esp+3Ch+var_C], esi
.text:0040C0E9                 mov     [esp+3Ch+var_8], edi
.text:0040C0ED                 jz      loc_40C1B1
.text:0040C0F3                 mov     edx, [esp+3Ch+arg_C]
.text:0040C0F7                 test    edx, edx
.text:0040C0F9                 jz      loc_40C1B1
.text:0040C0FF                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:0040C106                 call    malloc
.text:0040C10B                 mov     esi, eax
.text:0040C10D                 xor     eax, eax
.text:0040C10F                 test    esi, esi
.text:0040C111                 jz      loc_40C1B3
.text:0040C117                 test    ebx, ebx
.text:0040C119                 jz      loc_40C300
.text:0040C11F
.text:0040C11F loc_40C11F:                             ; CODE XREF: sub_40C0D0+235↓j
.text:0040C11F                 fld     ds:flt_40C0B4
.text:0040C125                 fld     dword ptr [ebx+8]
.text:0040C128                 mov     [esi+14h], ebx
.text:0040C12B                 fucom   st(1)
.text:0040C12D                 fnstsw  ax
.text:0040C12F                 sahf
.text:0040C130                 jbe     loc_40C2F0
.text:0040C136                 fld     ds:flt_40C0BC
.text:0040C13C                 fucomp  st(1)
.text:0040C13E                 fnstsw  ax
.text:0040C140                 sahf
.text:0040C141                 jbe     loc_40C2F0
.text:0040C147                 fld     dword ptr [ebx+0Ch]
.text:0040C14A                 fld     ds:flt_40C0C0
.text:0040C150                 fxch    st(1)
.text:0040C152                 fucompp
.text:0040C154                 fnstsw  ax
.text:0040C156                 sahf
.text:0040C157                 jbe     loc_40C2F0
.text:0040C15D                 fld     dword ptr [ebx]
.text:0040C15F                 fldz
.text:0040C161                 fxch    st(1)
.text:0040C163                 fucom   st(1)
.text:0040C165                 fnstsw  ax
.text:0040C167                 fstp    st(1)
.text:0040C169                 sahf
.text:0040C16A                 jb      loc_40C2F7
.text:0040C170                 faddp   st(2), st
.text:0040C172                 fld     dword ptr [ebx+4]
.text:0040C175                 fucom   st(2)
.text:0040C177                 fnstsw  ax
.text:0040C179                 sahf
.text:0040C17A                 jbe     loc_40C2F7
.text:0040C180                 fld1
.text:0040C182                 fucompp
.text:0040C184                 fnstsw  ax
.text:0040C186                 sahf
.text:0040C187                 jb      loc_40C2F0
.text:0040C18D                 fucom   st(1)
.text:0040C18F                 fnstsw  ax
.text:0040C191                 fstp    st(1)
.text:0040C193                 sahf
.text:0040C194                 ja      short loc_40C1C7
.text:0040C196                 lea     esi, [esi+0]
.text:0040C199                 lea     edi, [edi+0]
.text:0040C1A0
.text:0040C1A0 loc_40C1A0:                             ; CODE XREF: sub_40C0D0+222↓j
.text:0040C1A0                 fstp    st
.text:0040C1A2                 mov     dword ptr [esi+14h], offset dword_40C0A0
.text:0040C1A9
.text:0040C1A9 loc_40C1A9:                             ; CODE XREF: sub_40C0D0+155↓j
.text:0040C1A9                                         ; sub_40C0D0+1BF↓j ...
.text:0040C1A9                 mov     [esp+3Ch+Size], esi ; Block
.text:0040C1AC                 call    free
.text:0040C1B1
.text:0040C1B1 loc_40C1B1:                             ; CODE XREF: sub_40C0D0+1D↑j
.text:0040C1B1                                         ; sub_40C0D0+29↑j
.text:0040C1B1                 xor     eax, eax
.text:0040C1B3
.text:0040C1B3 loc_40C1B3:                             ; CODE XREF: sub_40C0D0+41↑j
.text:0040C1B3                                         ; sub_40C0D0+208↓j
.text:0040C1B3                 mov     ebx, [esp+3Ch+var_10]
.text:0040C1B7                 mov     esi, [esp+3Ch+var_C]
.text:0040C1BB                 mov     edi, [esp+3Ch+var_8]
.text:0040C1BF                 mov     ebp, [esp+3Ch+var_4]
.text:0040C1C3                 add     esp, 3Ch
.text:0040C1C6                 retn
.text:0040C1C7 ; ---------------------------------------------------------------------------
.text:0040C1C7
.text:0040C1C7 loc_40C1C7:                             ; CODE XREF: sub_40C0D0+C4↑j
.text:0040C1C7                 cmp     byte ptr [ebx+10h], 0
.text:0040C1CB                 jnz     loc_40C2E4
.text:0040C1D1                 fld     ds:flt_40C0B8
.text:0040C1D7                 xor     eax, eax
.text:0040C1D9                 mov     ecx, [esp+3Ch+arg_0]
.text:0040C1DD                 push    eax
.text:0040C1DE                 push    ecx
.text:0040C1DF                 fild    [esp+44h+var_44]
.text:0040C1E2                 add     esp, 8
.text:0040C1E5                 fdivrp  st(2), st
.text:0040C1E7                 fxch    st(1)
.text:0040C1E9                 fucom   st(1)
.text:0040C1EB                 fnstsw  ax
.text:0040C1ED                 fstp    st(1)
.text:0040C1EF                 sahf
.text:0040C1F0                 jnb     loc_40C2DD
.text:0040C1F6                 fnstcw  [esp+3Ch+var_16]
.text:0040C1FA                 movzx   ebx, [esp+3Ch+var_16]
.text:0040C1FF                 or      bx, 0C00h
.text:0040C204                 mov     [esp+3Ch+var_18], bx
.text:0040C209                 fldcw   [esp+3Ch+var_18]
.text:0040C20D                 fistp   [esp+3Ch+var_24]
.text:0040C211                 fldcw   [esp+3Ch+var_16]
.text:0040C215                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:0040C219                 mov     [esp+3Ch+arg_0], edx
.text:0040C21D
.text:0040C21D loc_40C21D:                             ; CODE XREF: sub_40C0D0+216↓j
.text:0040C21D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:0040C225                 ja      short loc_40C1A9
.text:0040C227                 mov     ecx, [esp+3Ch+arg_0]
.text:0040C22B                 cmp     ecx, 9
.text:0040C22E                 ja      short loc_40C235
.text:0040C230                 mov     ecx, 0Ah
.text:0040C235
.text:0040C235 loc_40C235:                             ; CODE XREF: sub_40C0D0+15E↑j
.text:0040C235                 or      ecx, 1
.text:0040C238
.text:0040C238 loc_40C238:                             ; CODE XREF: sub_40C0D0+1B4↓j
.text:0040C238                 mov     [esp+3Ch+var_28], 3
.text:0040C240                 mov     edi, 9
.text:0040C245                 cmp     edi, ecx
.text:0040C247                 jnb     short loc_40C275
.text:0040C249                 xor     edx, edx
.text:0040C24B                 mov     eax, ecx
.text:0040C24D                 div     [esp+3Ch+var_28]
.text:0040C251                 test    edx, edx
.text:0040C253                 jz      short loc_40C275
.text:0040C255
.text:0040C255 loc_40C255:                             ; CODE XREF: sub_40C0D0+1A3↓j
.text:0040C255                 inc     [esp+3Ch+var_28]
.text:0040C259                 mov     edx, [esp+3Ch+var_28]
.text:0040C25D                 lea     edi, [edi+edx*4]
.text:0040C260                 inc     edx
.text:0040C261                 cmp     edi, ecx
.text:0040C263                 mov     [esp+3Ch+var_28], edx
.text:0040C267                 jnb     short loc_40C275
.text:0040C269                 xor     edx, edx
.text:0040C26B                 mov     eax, ecx
.text:0040C26D                 div     [esp+3Ch+var_28]
.text:0040C271                 test    edx, edx
.text:0040C273                 jnz     short loc_40C255
.text:0040C275
.text:0040C275 loc_40C275:                             ; CODE XREF: sub_40C0D0+177↑j
.text:0040C275                                         ; sub_40C0D0+183↑j ...
.text:0040C275                 xor     edx, edx
.text:0040C277                 mov     eax, ecx
.text:0040C279                 div     [esp+3Ch+var_28]
.text:0040C27D                 test    edx, edx
.text:0040C27F                 jnz     short loc_40C286
.text:0040C281                 add     ecx, 2
.text:0040C284                 jmp     short loc_40C238
.text:0040C286 ; ---------------------------------------------------------------------------
.text:0040C286
.text:0040C286 loc_40C286:                             ; CODE XREF: sub_40C0D0+1AF↑j
.text:0040C286                 mov     [esi+8], ecx
.text:0040C289                 cmp     ecx, 1FFFFFFFh
.text:0040C28F                 ja      loc_40C1A9
.text:0040C295                 mov     [esp+3Ch+Size], ecx ; Count
.text:0040C298                 mov     [esp+3Ch+var_38], 8 ; Size
.text:0040C2A0                 call    calloc
.text:0040C2A5                 mov     [esi+18h], ebp
.text:0040C2A8                 mov     ebx, [esi+8]
.text:0040C2AB                 mov     ebp, [esp+3Ch+arg_C]
.text:0040C2AF                 mov     [esi], eax
.text:0040C2B1                 mov     edi, [esp+3Ch+arg_10]
.text:0040C2B5                 lea     ecx, [eax+ebx*8]
.text:0040C2B8                 mov     [esi+4], ecx
.text:0040C2BB                 mov     eax, esi
.text:0040C2BD                 mov     dword ptr [esi+0Ch], 0
.text:0040C2C4                 mov     dword ptr [esi+10h], 0
.text:0040C2CB                 mov     [esi+1Ch], ebp
.text:0040C2CE                 mov     [esi+20h], edi
.text:0040C2D1                 mov     dword ptr [esi+24h], 0
.text:0040C2D8                 jmp     loc_40C1B3
.text:0040C2DD ; ---------------------------------------------------------------------------
.text:0040C2DD
.text:0040C2DD loc_40C2DD:                             ; CODE XREF: sub_40C0D0+120↑j
.text:0040C2DD                 fstp    st
.text:0040C2DF                 jmp     loc_40C1A9
.text:0040C2E4 ; ---------------------------------------------------------------------------
.text:0040C2E4
.text:0040C2E4 loc_40C2E4:                             ; CODE XREF: sub_40C0D0+FB↑j
.text:0040C2E4                 fstp    st
.text:0040C2E6                 jmp     loc_40C21D
.text:0040C2E6 ; ---------------------------------------------------------------------------
.text:0040C2EB                 align 10h
.text:0040C2F0
.text:0040C2F0 loc_40C2F0:                             ; CODE XREF: sub_40C0D0+60↑j
.text:0040C2F0                                         ; sub_40C0D0+71↑j ...
.text:0040C2F0                 fstp    st
.text:0040C2F2                 jmp     loc_40C1A0
.text:0040C2F7 ; ---------------------------------------------------------------------------
.text:0040C2F7
.text:0040C2F7 loc_40C2F7:                             ; CODE XREF: sub_40C0D0+9A↑j
.text:0040C2F7                                         ; sub_40C0D0+AA↑j
.text:0040C2F7                 fstp    st
.text:0040C2F9                 jmp     short loc_40C2F0
.text:0040C2F9 ; ---------------------------------------------------------------------------
.text:0040C2FB                 align 10h
.text:0040C300
.text:0040C300 loc_40C300:                             ; CODE XREF: sub_40C0D0+49↑j
.text:0040C300                 mov     ebx, offset dword_40C0A0
.text:0040C305                 jmp     loc_40C11F
.text:0040C305 sub_40C0D0      endp
.text:0040C305
.text:0040C305 ; ---------------------------------------------------------------------------
.text:0040C30A                 align 10h
.text:0040C310                 push    edi
.text:0040C311                 push    esi
.text:0040C312                 push    ebx
.text:0040C313                 sub     esp, 10h
.text:0040C316                 mov     edi, [esp+20h]
.text:0040C31A                 mov     esi, [edi]
.text:0040C31C                 mov     eax, [edi+4]
.text:0040C31F                 cmp     esi, eax
.text:0040C321                 jnb     short loc_40C377
.text:0040C323                 lea     esi, [esi+0]
.text:0040C329                 lea     edi, [edi+0]
.text:0040C330
.text:0040C330 loc_40C330:                             ; CODE XREF: .text:0040C375↓j
.text:0040C330                 mov     ecx, [esi]
.text:0040C332                 test    ecx, ecx
.text:0040C334                 jz      short loc_40C370
.text:0040C336                 mov     ebx, [esi+4]
.text:0040C339                 test    ebx, ebx
.text:0040C33B                 jz      short loc_40C3A1
.text:0040C33D                 mov     ecx, [edi+20h]
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: .text:0040C35A↓j
.text:0040C340                 test    ecx, ecx
.text:0040C342                 jnz     short loc_40C395
.text:0040C344
.text:0040C344 loc_40C344:                             ; CODE XREF: .text:0040C39F↓j
.text:0040C344                 mov     dword ptr [ebx], 0
.text:0040C34A                 mov     edx, [ebx+4]
.text:0040C34D                 mov     eax, [edi+24h]
.text:0040C350                 test    edx, edx
.text:0040C352                 mov     [ebx+4], eax
.text:0040C355                 mov     [edi+24h], ebx
.text:0040C358                 mov     ebx, edx
.text:0040C35A                 jnz     short loc_40C340
.text:0040C35C
.text:0040C35C loc_40C35C:                             ; CODE XREF: .text:0040C3A4↓j
.text:0040C35C                 test    ecx, ecx
.text:0040C35E                 jnz     short loc_40C38C
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:0040C393↓j
.text:0040C360                 mov     dword ptr [esi+4], 0
.text:0040C367                 mov     eax, [edi+4]
.text:0040C36A                 mov     dword ptr [esi], 0
.text:0040C370
.text:0040C370 loc_40C370:                             ; CODE XREF: .text:0040C334↑j
.text:0040C370                 add     esi, 8
.text:0040C373                 cmp     esi, eax
.text:0040C375                 jb      short loc_40C330
.text:0040C377
.text:0040C377 loc_40C377:                             ; CODE XREF: .text:0040C321↑j
.text:0040C377                 mov     dword ptr [edi+0Ch], 0
.text:0040C37E                 mov     dword ptr [edi+10h], 0
.text:0040C385                 add     esp, 10h
.text:0040C388                 pop     ebx
.text:0040C389                 pop     esi
.text:0040C38A                 pop     edi
.text:0040C38B                 retn
.text:0040C38C ; ---------------------------------------------------------------------------
.text:0040C38C
.text:0040C38C loc_40C38C:                             ; CODE XREF: .text:0040C35E↑j
.text:0040C38C                 mov     ebx, [esi]
.text:0040C38E                 mov     [esp], ebx
.text:0040C391                 call    ecx
.text:0040C393                 jmp     short loc_40C360
.text:0040C395 ; ---------------------------------------------------------------------------
.text:0040C395
.text:0040C395 loc_40C395:                             ; CODE XREF: .text:0040C342↑j
.text:0040C395                 mov     edx, [ebx]
.text:0040C397                 mov     [esp], edx
.text:0040C39A                 call    ecx
.text:0040C39C                 mov     ecx, [edi+20h]
.text:0040C39F                 jmp     short loc_40C344
.text:0040C3A1 ; ---------------------------------------------------------------------------
.text:0040C3A1
.text:0040C3A1 loc_40C3A1:                             ; CODE XREF: .text:0040C33B↑j
.text:0040C3A1                 mov     ecx, [edi+20h]
.text:0040C3A4                 jmp     short loc_40C35C
.text:0040C3A4 ; ---------------------------------------------------------------------------
.text:0040C3A6                 align 10h
.text:0040C3B0
.text:0040C3B0 ; =============== S U B R O U T I N E =======================================
.text:0040C3B0
.text:0040C3B0
.text:0040C3B0 ; int __cdecl sub_40C3B0(void *)
.text:0040C3B0 sub_40C3B0      proc near               ; CODE XREF: .text:004061BC↑p
.text:0040C3B0                                         ; sub_4078E0+2B3↑p
.text:0040C3B0
.text:0040C3B0 Block           = dword ptr -1Ch
.text:0040C3B0 arg_0           = dword ptr  4
.text:0040C3B0
.text:0040C3B0                 push    ebp
.text:0040C3B1                 push    edi
.text:0040C3B2                 push    esi
.text:0040C3B3                 push    ebx
.text:0040C3B4                 sub     esp, 0Ch
.text:0040C3B7                 mov     ebp, [esp+1Ch+arg_0]
.text:0040C3BB                 mov     eax, [ebp+20h]
.text:0040C3BE                 test    eax, eax
.text:0040C3C0                 jz      loc_40C48C
.text:0040C3C6                 mov     eax, [ebp+10h]
.text:0040C3C9                 test    eax, eax
.text:0040C3CB                 jz      loc_40C48C
.text:0040C3D1                 mov     edi, [ebp+0]
.text:0040C3D4                 mov     eax, [ebp+4]
.text:0040C3D7                 cmp     edi, eax
.text:0040C3D9                 jnb     short loc_40C44B
.text:0040C3DB
.text:0040C3DB loc_40C3DB:                             ; CODE XREF: sub_40C3B0+57↓j
.text:0040C3DB                 mov     edx, [edi]
.text:0040C3DD                 test    edx, edx
.text:0040C3DF                 jz      short loc_40C402
.text:0040C3E1                 test    edi, edi
.text:0040C3E3                 mov     ebx, edi
.text:0040C3E5                 jz      short loc_40C402
.text:0040C3E7                 mov     esi, esi
.text:0040C3E9                 lea     edi, [edi+0]
.text:0040C3F0
.text:0040C3F0 loc_40C3F0:                             ; CODE XREF: sub_40C3B0+4D↓j
.text:0040C3F0                 mov     ecx, [ebx]
.text:0040C3F2                 mov     [esp+1Ch+Block], ecx
.text:0040C3F5                 call    dword ptr [ebp+20h]
.text:0040C3F8                 mov     ebx, [ebx+4]
.text:0040C3FB                 test    ebx, ebx
.text:0040C3FD                 jnz     short loc_40C3F0
.text:0040C3FF                 mov     eax, [ebp+4]
.text:0040C402
.text:0040C402 loc_40C402:                             ; CODE XREF: sub_40C3B0+2F↑j
.text:0040C402                                         ; sub_40C3B0+35↑j
.text:0040C402                 add     edi, 8
.text:0040C405                 cmp     edi, eax
.text:0040C407                 jb      short loc_40C3DB
.text:0040C409                 mov     edx, [ebp+0]
.text:0040C40C
.text:0040C40C loc_40C40C:                             ; CODE XREF: sub_40C3B0+E2↓j
.text:0040C40C                 cmp     edx, eax
.text:0040C40E                 mov     edi, edx
.text:0040C410                 jnb     short loc_40C44B
.text:0040C412                 lea     esi, [esi+0]
.text:0040C419                 lea     edi, [edi+0]
.text:0040C420
.text:0040C420 loc_40C420:                             ; CODE XREF: sub_40C3B0+99↓j
.text:0040C420                 mov     ebx, [edi+4]
.text:0040C423                 test    ebx, ebx
.text:0040C425                 jz      short loc_40C444
.text:0040C427                 mov     esi, esi
.text:0040C429                 lea     edi, [edi+0]
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: sub_40C3B0+8F↓j
.text:0040C430                 mov     esi, [ebx+4]
.text:0040C433                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040C436                 call    free
.text:0040C43B                 test    esi, esi
.text:0040C43D                 mov     ebx, esi
.text:0040C43F                 jnz     short loc_40C430
.text:0040C441                 mov     eax, [ebp+4]
.text:0040C444
.text:0040C444 loc_40C444:                             ; CODE XREF: sub_40C3B0+75↑j
.text:0040C444                 add     edi, 8
.text:0040C447                 cmp     edi, eax
.text:0040C449                 jb      short loc_40C420
.text:0040C44B
.text:0040C44B loc_40C44B:                             ; CODE XREF: sub_40C3B0+29↑j
.text:0040C44B                                         ; sub_40C3B0+60↑j
.text:0040C44B                 mov     ebx, [ebp+24h]
.text:0040C44E                 test    ebx, ebx
.text:0040C450                 jz      short loc_40C471
.text:0040C452                 lea     esi, [esi+0]
.text:0040C459                 lea     edi, [edi+0]
.text:0040C460
.text:0040C460 loc_40C460:                             ; CODE XREF: sub_40C3B0+BF↓j
.text:0040C460                 mov     edi, [ebx+4]
.text:0040C463                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040C466                 call    free
.text:0040C46B                 test    edi, edi
.text:0040C46D                 mov     ebx, edi
.text:0040C46F                 jnz     short loc_40C460
.text:0040C471
.text:0040C471 loc_40C471:                             ; CODE XREF: sub_40C3B0+A0↑j
.text:0040C471                 mov     ebx, [ebp+0]
.text:0040C474                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040C477                 call    free
.text:0040C47C                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:0040C480                 add     esp, 0Ch
.text:0040C483                 pop     ebx
.text:0040C484                 pop     esi
.text:0040C485                 pop     edi
.text:0040C486                 pop     ebp
.text:0040C487                 jmp     free
.text:0040C48C ; ---------------------------------------------------------------------------
.text:0040C48C
.text:0040C48C loc_40C48C:                             ; CODE XREF: sub_40C3B0+10↑j
.text:0040C48C                                         ; sub_40C3B0+1B↑j
.text:0040C48C                 mov     edx, [ebp+0]
.text:0040C48F                 mov     eax, [ebp+4]
.text:0040C492                 jmp     loc_40C40C
.text:0040C492 sub_40C3B0      endp
.text:0040C492
.text:0040C492 ; ---------------------------------------------------------------------------
.text:0040C497                 align 10h
.text:0040C4A0
.text:0040C4A0 ; =============== S U B R O U T I N E =======================================
.text:0040C4A0
.text:0040C4A0
.text:0040C4A0 sub_40C4A0      proc near               ; CODE XREF: sub_40C620+1B2↓p
.text:0040C4A0                                         ; sub_40CCF0+156↓p
.text:0040C4A0
.text:0040C4A0 Block           = dword ptr -2Ch
.text:0040C4A0 var_28          = dword ptr -28h
.text:0040C4A0 var_24          = dword ptr -24h
.text:0040C4A0 var_20          = dword ptr -20h
.text:0040C4A0 var_1C          = dword ptr -1Ch
.text:0040C4A0 var_18          = dword ptr -18h
.text:0040C4A0 var_14          = dword ptr -14h
.text:0040C4A0 arg_0           = dword ptr  4
.text:0040C4A0 arg_4           = dword ptr  8
.text:0040C4A0
.text:0040C4A0                 push    ebp
.text:0040C4A1                 push    edi
.text:0040C4A2                 push    esi
.text:0040C4A3                 push    ebx
.text:0040C4A4                 sub     esp, 1Ch
.text:0040C4A7                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C4AB                 mov     edi, [ebx+20h]
.text:0040C4AE                 mov     [esp+2Ch+var_1C], edi
.text:0040C4B2                 mov     esi, [ebx+1Ch]
.text:0040C4B5                 mov     [esp+2Ch+var_20], esi
.text:0040C4B9                 mov     edx, [ebx+18h]
.text:0040C4BC                 mov     [esp+2Ch+var_24], edx
.text:0040C4C0                 mov     ecx, [ebx+14h]
.text:0040C4C3                 mov     edx, [esp+2Ch+arg_4]
.text:0040C4C7                 mov     [esp+2Ch+var_28], ecx
.text:0040C4CB                 mov     [esp+2Ch+Block], edx
.text:0040C4CE                 call    sub_40C0D0
.text:0040C4D3                 mov     edi, eax
.text:0040C4D5                 xor     eax, eax
.text:0040C4D7                 test    edi, edi
.text:0040C4D9                 jz      loc_40C5A2
.text:0040C4DF                 mov     ebp, [esp+2Ch+arg_0]
.text:0040C4E3                 mov     edx, [ebp+0]
.text:0040C4E6                 mov     eax, [ebp+4]
.text:0040C4E9                 mov     ecx, [ebp+24h]
.text:0040C4EC                 mov     [esp+2Ch+var_14], edx
.text:0040C4F0                 cmp     edx, eax
.text:0040C4F2                 mov     [edi+24h], ecx
.text:0040C4F5                 jnb     short loc_40C56D
.text:0040C4F7                 mov     esi, esi
.text:0040C4F9                 lea     edi, [edi+0]
.text:0040C500
.text:0040C500 loc_40C500:                             ; CODE XREF: sub_40C4A0+C5↓j
.text:0040C500                 mov     edx, [esp+2Ch+var_14]
.text:0040C504                 mov     ebx, [edx]
.text:0040C506                 test    ebx, ebx
.text:0040C508                 jz      short loc_40C55C
.text:0040C50A                 mov     ebx, edx
.text:0040C50C                 lea     esi, [esi+0]
.text:0040C510
.text:0040C510 loc_40C510:                             ; CODE XREF: sub_40C4A0+B3↓j
.text:0040C510                 mov     ebp, [ebx]
.text:0040C512                 mov     edx, [edi+8]
.text:0040C515                 mov     [esp+2Ch+Block], ebp
.text:0040C518                 mov     [esp+2Ch+var_28], edx
.text:0040C51C                 call    dword ptr [edi+18h]
.text:0040C51F                 mov     ecx, [edi]
.text:0040C521                 lea     esi, [ecx+eax*8]
.text:0040C524                 cmp     esi, [edi+4]
.text:0040C527                 jnb     loc_40C603
.text:0040C52D                 mov     ecx, [esi]
.text:0040C52F                 mov     eax, [ebx+4]
.text:0040C532                 test    ecx, ecx
.text:0040C534                 mov     [esp+2Ch+var_18], eax
.text:0040C538                 jz      loc_40C5E0
.text:0040C53E                 cmp     ebx, [esp+2Ch+var_14]
.text:0040C542                 jz      short loc_40C5AA
.text:0040C544                 mov     edx, [esi+4]
.text:0040C547                 mov     [ebx+4], edx
.text:0040C54A                 mov     [esi+4], ebx
.text:0040C54D
.text:0040C54D loc_40C54D:                             ; CODE XREF: sub_40C4A0+12A↓j
.text:0040C54D                                         ; sub_40C4A0+149↓j ...
.text:0040C54D                 mov     ebx, [esp+2Ch+var_18]
.text:0040C551                 test    ebx, ebx
.text:0040C553                 jnz     short loc_40C510
.text:0040C555                 mov     ecx, [esp+2Ch+arg_0]
.text:0040C559                 mov     eax, [ecx+4]
.text:0040C55C
.text:0040C55C loc_40C55C:                             ; CODE XREF: sub_40C4A0+68↑j
.text:0040C55C                 add     [esp+2Ch+var_14], 8
.text:0040C561                 cmp     [esp+2Ch+var_14], eax
.text:0040C565                 jb      short loc_40C500
.text:0040C567                 mov     eax, [esp+2Ch+arg_0]
.text:0040C56B                 mov     edx, [eax]
.text:0040C56D
.text:0040C56D loc_40C56D:                             ; CODE XREF: sub_40C4A0+55↑j
.text:0040C56D                 mov     [esp+2Ch+Block], edx ; Block
.text:0040C570                 call    free
.text:0040C575                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C579                 mov     ebp, [edi]
.text:0040C57B                 mov     ecx, [edi+4]
.text:0040C57E                 mov     esi, [edi+8]
.text:0040C581                 mov     edx, [edi+0Ch]
.text:0040C584                 mov     [ebx], ebp
.text:0040C586                 mov     ebp, [edi+24h]
.text:0040C589                 mov     [ebx+4], ecx
.text:0040C58C                 mov     [ebx+8], esi
.text:0040C58F                 mov     [ebx+0Ch], edx
.text:0040C592                 mov     [ebx+24h], ebp
.text:0040C595                 mov     [esp+2Ch+Block], edi ; Block
.text:0040C598                 call    free
.text:0040C59D                 mov     eax, 1
.text:0040C5A2
.text:0040C5A2 loc_40C5A2:                             ; CODE XREF: sub_40C4A0+39↑j
.text:0040C5A2                                         ; sub_40C4A0+11D↓j
.text:0040C5A2                 add     esp, 1Ch
.text:0040C5A5                 pop     ebx
.text:0040C5A6                 pop     esi
.text:0040C5A7                 pop     edi
.text:0040C5A8                 pop     ebp
.text:0040C5A9                 retn
.text:0040C5AA ; ---------------------------------------------------------------------------
.text:0040C5AA
.text:0040C5AA loc_40C5AA:                             ; CODE XREF: sub_40C4A0+A2↑j
.text:0040C5AA                 mov     eax, [edi+24h]
.text:0040C5AD                 test    eax, eax
.text:0040C5AF                 jz      short loc_40C5CC
.text:0040C5B1                 mov     ebx, [eax+4]
.text:0040C5B4                 mov     edx, eax
.text:0040C5B6                 mov     [edi+24h], ebx
.text:0040C5B9
.text:0040C5B9 loc_40C5B9:                             ; CODE XREF: sub_40C4A0+13A↓j
.text:0040C5B9                 xor     eax, eax
.text:0040C5BB                 test    edx, edx
.text:0040C5BD                 jz      short loc_40C5A2
.text:0040C5BF                 mov     [edx], ebp
.text:0040C5C1                 mov     ebp, [esi+4]
.text:0040C5C4                 mov     [edx+4], ebp
.text:0040C5C7                 mov     [esi+4], edx
.text:0040C5CA                 jmp     short loc_40C54D
.text:0040C5CC ; ---------------------------------------------------------------------------
.text:0040C5CC
.text:0040C5CC loc_40C5CC:                             ; CODE XREF: sub_40C4A0+10F↑j
.text:0040C5CC                 mov     [esp+2Ch+Block], 8 ; Size
.text:0040C5D3                 call    malloc
.text:0040C5D8                 mov     edx, eax
.text:0040C5DA                 jmp     short loc_40C5B9
.text:0040C5DA ; ---------------------------------------------------------------------------
.text:0040C5DC                 align 10h
.text:0040C5E0
.text:0040C5E0 loc_40C5E0:                             ; CODE XREF: sub_40C4A0+98↑j
.text:0040C5E0                 inc     dword ptr [edi+0Ch]
.text:0040C5E3                 cmp     ebx, [esp+2Ch+var_14]
.text:0040C5E7                 mov     [esi], ebp
.text:0040C5E9                 jz      loc_40C54D
.text:0040C5EF                 mov     dword ptr [ebx], 0
.text:0040C5F5                 mov     esi, [edi+24h]
.text:0040C5F8                 mov     [ebx+4], esi
.text:0040C5FB                 mov     [edi+24h], ebx
.text:0040C5FE                 jmp     loc_40C54D
.text:0040C603 ; ---------------------------------------------------------------------------
.text:0040C603
.text:0040C603 loc_40C603:                             ; CODE XREF: sub_40C4A0+87↑j
.text:0040C603                 call    abort
.text:0040C603 sub_40C4A0      endp
.text:0040C603
.text:0040C603 ; ---------------------------------------------------------------------------
.text:0040C608 flt_40C608      dd 0.1                  ; DATA XREF: sub_40C620+C3↓r
.text:0040C60C flt_40C60C      dd 4.2949673e9          ; DATA XREF: sub_40C620:loc_40C797↓r
.text:0040C610 flt_40C610      dd 0.89999998           ; DATA XREF: sub_40C620+D6↓r
.text:0040C614 flt_40C614      dd 1.1                  ; DATA XREF: sub_40C620+EA↓r
.text:0040C618                 align 10h
.text:0040C620
.text:0040C620 ; =============== S U B R O U T I N E =======================================
.text:0040C620
.text:0040C620
.text:0040C620 sub_40C620      proc near               ; CODE XREF: sub_405E30+76↑p
.text:0040C620                                         ; sub_405F90+7A↑p ...
.text:0040C620
.text:0040C620 var_34          = qword ptr -34h
.text:0040C620 Size            = dword ptr -2Ch
.text:0040C620 var_28          = dword ptr -28h
.text:0040C620 var_24          = dword ptr -24h
.text:0040C620 var_20          = dword ptr -20h
.text:0040C620 var_1C          = qword ptr -1Ch
.text:0040C620 var_14          = word ptr -14h
.text:0040C620 var_12          = word ptr -12h
.text:0040C620 var_10          = dword ptr -10h
.text:0040C620 var_8           = dword ptr -8
.text:0040C620 var_4           = dword ptr -4
.text:0040C620 arg_0           = dword ptr  4
.text:0040C620 arg_4           = dword ptr  8
.text:0040C620
.text:0040C620                 sub     esp, 2Ch
.text:0040C623                 mov     [esp+2Ch+var_8], ebx
.text:0040C627                 mov     ebx, [esp+2Ch+arg_4]
.text:0040C62B                 mov     [esp+2Ch+var_4], esi
.text:0040C62F                 mov     esi, [esp+2Ch+arg_0]
.text:0040C633                 test    ebx, ebx
.text:0040C635                 jz      loc_40C80A
.text:0040C63B                 mov     [esp+2Ch+var_20], 0
.text:0040C643                 lea     edx, [esp+2Ch+var_10]
.text:0040C647                 mov     [esp+2Ch+var_24], edx
.text:0040C64B                 mov     [esp+2Ch+var_28], ebx
.text:0040C64F                 mov     [esp+2Ch+Size], esi
.text:0040C652                 call    sub_40CE80
.text:0040C657                 test    eax, eax
.text:0040C659                 jz      short loc_40C667
.text:0040C65B
.text:0040C65B loc_40C65B:                             ; CODE XREF: sub_40C620+64↓j
.text:0040C65B                                         ; sub_40C620+7A↓j ...
.text:0040C65B                 mov     ebx, [esp+2Ch+var_8]
.text:0040C65F                 mov     esi, [esp+2Ch+var_4]
.text:0040C663                 add     esp, 2Ch
.text:0040C666                 retn
.text:0040C667 ; ---------------------------------------------------------------------------
.text:0040C667
.text:0040C667 loc_40C667:                             ; CODE XREF: sub_40C620+39↑j
.text:0040C667                 mov     eax, [esp+2Ch+var_10]
.text:0040C66B                 mov     ecx, [eax]
.text:0040C66D                 test    ecx, ecx
.text:0040C66F                 jz      short loc_40C6AC
.text:0040C671                 mov     eax, [esi+24h]
.text:0040C674                 test    eax, eax
.text:0040C676                 jz      short loc_40C69C
.text:0040C678                 mov     edx, [eax+4]
.text:0040C67B                 mov     ecx, eax
.text:0040C67D                 mov     [esi+24h], edx
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: sub_40C620+8A↓j
.text:0040C680                 xor     eax, eax
.text:0040C682                 test    ecx, ecx
.text:0040C684                 jz      short loc_40C65B
.text:0040C686                 inc     dword ptr [esi+10h]
.text:0040C689                 mov     edx, [esp+2Ch+var_10]
.text:0040C68D                 mov     [ecx], ebx
.text:0040C68F                 mov     eax, [edx+4]
.text:0040C692                 mov     [ecx+4], eax
.text:0040C695                 mov     [edx+4], ecx
.text:0040C698
.text:0040C698 loc_40C698:                             ; CODE XREF: sub_40C620+1C2↓j
.text:0040C698                                         ; sub_40C620+1D8↓j
.text:0040C698                 mov     eax, ebx
.text:0040C69A                 jmp     short loc_40C65B
.text:0040C69C ; ---------------------------------------------------------------------------
.text:0040C69C
.text:0040C69C loc_40C69C:                             ; CODE XREF: sub_40C620+56↑j
.text:0040C69C                 mov     [esp+2Ch+Size], 8 ; Size
.text:0040C6A3                 call    malloc
.text:0040C6A8                 mov     ecx, eax
.text:0040C6AA                 jmp     short loc_40C680
.text:0040C6AC ; ---------------------------------------------------------------------------
.text:0040C6AC
.text:0040C6AC loc_40C6AC:                             ; CODE XREF: sub_40C620+4F↑j
.text:0040C6AC                 inc     dword ptr [esi+0Ch]
.text:0040C6AF                 xor     edx, edx
.text:0040C6B1                 mov     [eax], ebx
.text:0040C6B3                 xor     eax, eax
.text:0040C6B5                 mov     ecx, [esi+0Ch]
.text:0040C6B8                 inc     dword ptr [esi+10h]
.text:0040C6BB                 push    eax
.text:0040C6BC                 push    ecx
.text:0040C6BD                 mov     eax, [esi+8]
.text:0040C6C0                 mov     ecx, [esi+14h]
.text:0040C6C3                 fild    [esp+34h+var_34]
.text:0040C6C6                 add     esp, 8
.text:0040C6C9                 push    edx
.text:0040C6CA                 push    eax
.text:0040C6CB                 fild    [esp+34h+var_34]
.text:0040C6CE                 add     esp, 8
.text:0040C6D1                 fld     dword ptr [ecx+8]
.text:0040C6D4                 fmul    st(1), st
.text:0040C6D6                 fxch    st(2)
.text:0040C6D8                 fucompp
.text:0040C6DA                 fnstsw  ax
.text:0040C6DC                 sahf
.text:0040C6DD                 jbe     loc_40C7F6
.text:0040C6E3                 fld     ds:flt_40C608
.text:0040C6E9                 fxch    st(1)
.text:0040C6EB                 fucom   st(1)
.text:0040C6ED                 fnstsw  ax
.text:0040C6EF                 sahf
.text:0040C6F0                 jbe     loc_40C7FD
.text:0040C6F6                 fld     ds:flt_40C610
.text:0040C6FC                 fucomp  st(1)
.text:0040C6FE                 fnstsw  ax
.text:0040C700                 sahf
.text:0040C701                 jbe     loc_40C7FD
.text:0040C707                 fld     dword ptr [ecx+0Ch]
.text:0040C70A                 fld     ds:flt_40C614
.text:0040C710                 fxch    st(1)
.text:0040C712                 fucompp
.text:0040C714                 fnstsw  ax
.text:0040C716                 sahf
.text:0040C717                 jbe     loc_40C7FD
.text:0040C71D                 fld     dword ptr [ecx]
.text:0040C71F                 fldz
.text:0040C721                 fxch    st(1)
.text:0040C723                 fucom   st(1)
.text:0040C725                 fnstsw  ax
.text:0040C727                 fstp    st(1)
.text:0040C729                 sahf
.text:0040C72A                 jb      loc_40C806
.text:0040C730                 faddp   st(2), st
.text:0040C732                 fld     dword ptr [ecx+4]
.text:0040C735                 fucom   st(2)
.text:0040C737                 fnstsw  ax
.text:0040C739                 sahf
.text:0040C73A                 jbe     loc_40C806
.text:0040C740                 fld1
.text:0040C742                 fucompp
.text:0040C744                 fnstsw  ax
.text:0040C746                 sahf
.text:0040C747                 jb      loc_40C7FD
.text:0040C74D                 fucompp
.text:0040C74F                 fnstsw  ax
.text:0040C751                 sahf
.text:0040C752                 ja      short loc_40C760
.text:0040C754
.text:0040C754 loc_40C754:                             ; CODE XREF: sub_40C620+1E1↓j
.text:0040C754                 mov     dword ptr [esi+14h], offset dword_40C0A0
.text:0040C75B                 mov     ecx, offset dword_40C0A0
.text:0040C760
.text:0040C760 loc_40C760:                             ; CODE XREF: sub_40C620+132↑j
.text:0040C760                 mov     eax, [esi+0Ch]
.text:0040C763                 xor     edx, edx
.text:0040C765                 push    edx
.text:0040C766                 xor     edx, edx
.text:0040C768                 push    eax
.text:0040C769                 mov     eax, [esi+8]
.text:0040C76C                 fild    [esp+34h+var_34]
.text:0040C76F                 add     esp, 8
.text:0040C772                 push    edx
.text:0040C773                 push    eax
.text:0040C774                 fild    [esp+34h+var_34]
.text:0040C777                 add     esp, 8
.text:0040C77A                 fld     dword ptr [ecx+8]
.text:0040C77D                 fld     st
.text:0040C77F                 fmul    st, st(2)
.text:0040C781                 fxch    st(3)
.text:0040C783                 fucomp  st(3)
.text:0040C785                 fnstsw  ax
.text:0040C787                 fstp    st(2)
.text:0040C789                 sahf
.text:0040C78A                 jbe     short loc_40C7F4
.text:0040C78C                 cmp     byte ptr [ecx+10h], 0
.text:0040C790                 fmul    dword ptr [ecx+0Ch]
.text:0040C793                 jnz     short loc_40C7F0
.text:0040C795                 fmulp   st(1), st
.text:0040C797
.text:0040C797 loc_40C797:                             ; CODE XREF: sub_40C620+1D2↓j
.text:0040C797                 fld     ds:flt_40C60C
.text:0040C79D                 fxch    st(1)
.text:0040C79F                 fucom   st(1)
.text:0040C7A1                 fnstsw  ax
.text:0040C7A3                 fstp    st(1)
.text:0040C7A5                 sahf
.text:0040C7A6                 jnb     short loc_40C7E7
.text:0040C7A8                 fnstcw  [esp+2Ch+var_12]
.text:0040C7AC                 movzx   edx, [esp+2Ch+var_12]
.text:0040C7B1                 mov     [esp+2Ch+Size], esi
.text:0040C7B4                 or      dx, 0C00h
.text:0040C7B9                 mov     [esp+2Ch+var_14], dx
.text:0040C7BE                 fldcw   [esp+2Ch+var_14]
.text:0040C7C2                 fistp   [esp+2Ch+var_1C]
.text:0040C7C6                 fldcw   [esp+2Ch+var_12]
.text:0040C7CA                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:0040C7CE                 mov     [esp+2Ch+var_28], ecx
.text:0040C7D2                 call    sub_40C4A0
.text:0040C7D7                 test    al, al
.text:0040C7D9                 setz    dl
.text:0040C7DC                 movzx   esi, dl
.text:0040C7DF                 dec     esi
.text:0040C7E0                 and     ebx, esi
.text:0040C7E2                 jmp     loc_40C698
.text:0040C7E7 ; ---------------------------------------------------------------------------
.text:0040C7E7
.text:0040C7E7 loc_40C7E7:                             ; CODE XREF: sub_40C620+186↑j
.text:0040C7E7                 fstp    st
.text:0040C7E9                 xor     eax, eax
.text:0040C7EB                 jmp     loc_40C65B
.text:0040C7F0 ; ---------------------------------------------------------------------------
.text:0040C7F0
.text:0040C7F0 loc_40C7F0:                             ; CODE XREF: sub_40C620+173↑j
.text:0040C7F0                 fstp    st(1)
.text:0040C7F2                 jmp     short loc_40C797
.text:0040C7F4 ; ---------------------------------------------------------------------------
.text:0040C7F4
.text:0040C7F4 loc_40C7F4:                             ; CODE XREF: sub_40C620+16A↑j
.text:0040C7F4                 fstp    st
.text:0040C7F6
.text:0040C7F6 loc_40C7F6:                             ; CODE XREF: sub_40C620+BD↑j
.text:0040C7F6                 fstp    st
.text:0040C7F8                 jmp     loc_40C698
.text:0040C7FD ; ---------------------------------------------------------------------------
.text:0040C7FD
.text:0040C7FD loc_40C7FD:                             ; CODE XREF: sub_40C620+D0↑j
.text:0040C7FD                                         ; sub_40C620+E1↑j ...
.text:0040C7FD                 fstp    st
.text:0040C7FF                 fstp    st
.text:0040C801                 jmp     loc_40C754
.text:0040C806 ; ---------------------------------------------------------------------------
.text:0040C806
.text:0040C806 loc_40C806:                             ; CODE XREF: sub_40C620+10A↑j
.text:0040C806                                         ; sub_40C620+11A↑j
.text:0040C806                 fstp    st
.text:0040C808                 jmp     short loc_40C7FD
.text:0040C80A ; ---------------------------------------------------------------------------
.text:0040C80A
.text:0040C80A loc_40C80A:                             ; CODE XREF: sub_40C620+15↑j
.text:0040C80A                 call    abort
.text:0040C80A sub_40C620      endp
.text:0040C80A
.text:0040C80A ; ---------------------------------------------------------------------------
.text:0040C80F                 align 10h
.text:0040C810                 mov     edx, [esp+4]
.text:0040C814                 mov     eax, [edx+8]
.text:0040C817                 retn
.text:0040C817 ; ---------------------------------------------------------------------------
.text:0040C818                 align 10h
.text:0040C820                 mov     edx, [esp+4]
.text:0040C824                 mov     eax, [edx+0Ch]
.text:0040C827                 retn
.text:0040C827 ; ---------------------------------------------------------------------------
.text:0040C828                 align 10h
.text:0040C830                 mov     edx, [esp+4]
.text:0040C834                 mov     eax, [edx+10h]
.text:0040C837                 retn
.text:0040C837 ; ---------------------------------------------------------------------------
.text:0040C838                 align 10h
.text:0040C840                 push    esi
.text:0040C841                 xor     esi, esi
.text:0040C843                 push    ebx
.text:0040C844                 mov     edx, [esp+0Ch]
.text:0040C848                 mov     ecx, [edx]
.text:0040C84A                 mov     ebx, [edx+4]
.text:0040C84D                 cmp     ecx, ebx
.text:0040C84F                 jnb     short loc_40C897
.text:0040C851                 jmp     short loc_40C860
.text:0040C851 ; ---------------------------------------------------------------------------
.text:0040C853                 align 10h
.text:0040C860
.text:0040C860 loc_40C860:                             ; CODE XREF: .text:0040C851↑j
.text:0040C860                                         ; .text:0040C895↓j
.text:0040C860                 mov     edx, [ecx]
.text:0040C862                 test    edx, edx
.text:0040C864                 jz      short loc_40C890
.text:0040C866                 mov     eax, [ecx+4]
.text:0040C869                 mov     edx, 1
.text:0040C86E                 test    eax, eax
.text:0040C870                 jz      short loc_40C888
.text:0040C872                 lea     esi, [esi+0]
.text:0040C879                 lea     edi, [edi+0]
.text:0040C880
.text:0040C880 loc_40C880:                             ; CODE XREF: .text:0040C886↓j
.text:0040C880                 mov     eax, [eax+4]
.text:0040C883                 inc     edx
.text:0040C884                 test    eax, eax
.text:0040C886                 jnz     short loc_40C880
.text:0040C888
.text:0040C888 loc_40C888:                             ; CODE XREF: .text:0040C870↑j
.text:0040C888                 cmp     edx, esi
.text:0040C88A                 jbe     short loc_40C890
.text:0040C88C                 mov     esi, edx
.text:0040C88E                 mov     esi, esi
.text:0040C890
.text:0040C890 loc_40C890:                             ; CODE XREF: .text:0040C864↑j
.text:0040C890                                         ; .text:0040C88A↑j
.text:0040C890                 add     ecx, 8
.text:0040C893                 cmp     ecx, ebx
.text:0040C895                 jb      short loc_40C860
.text:0040C897
.text:0040C897 loc_40C897:                             ; CODE XREF: .text:0040C84F↑j
.text:0040C897                 pop     ebx
.text:0040C898                 mov     eax, esi
.text:0040C89A                 pop     esi
.text:0040C89B                 retn
.text:0040C89B ; ---------------------------------------------------------------------------
.text:0040C89C                 align 10h
.text:0040C8A0                 push    edi
.text:0040C8A1                 xor     ecx, ecx
.text:0040C8A3                 push    esi
.text:0040C8A4                 xor     esi, esi
.text:0040C8A6                 push    ebx
.text:0040C8A7                 mov     edi, [esp+10h]
.text:0040C8AB                 mov     edx, [edi]
.text:0040C8AD                 mov     ebx, [edi+4]
.text:0040C8B0                 cmp     edx, ebx
.text:0040C8B2                 jnb     short loc_40C8DF
.text:0040C8B4                 lea     esi, [esi+0]
.text:0040C8BA                 lea     edi, [edi+0]
.text:0040C8C0
.text:0040C8C0 loc_40C8C0:                             ; CODE XREF: .text:0040C8DD↓j
.text:0040C8C0                 mov     eax, [edx]
.text:0040C8C2                 test    eax, eax
.text:0040C8C4                 jz      short loc_40C8D8
.text:0040C8C6                 mov     eax, [edx+4]
.text:0040C8C9                 inc     esi
.text:0040C8CA                 inc     ecx
.text:0040C8CB                 test    eax, eax
.text:0040C8CD                 jz      short loc_40C8D8
.text:0040C8CF                 nop
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: .text:0040C8D6↓j
.text:0040C8D0                 mov     eax, [eax+4]
.text:0040C8D3                 inc     ecx
.text:0040C8D4                 test    eax, eax
.text:0040C8D6                 jnz     short loc_40C8D0
.text:0040C8D8
.text:0040C8D8 loc_40C8D8:                             ; CODE XREF: .text:0040C8C4↑j
.text:0040C8D8                                         ; .text:0040C8CD↑j
.text:0040C8D8                 add     edx, 8
.text:0040C8DB                 cmp     edx, ebx
.text:0040C8DD                 jb      short loc_40C8C0
.text:0040C8DF
.text:0040C8DF loc_40C8DF:                             ; CODE XREF: .text:0040C8B2↑j
.text:0040C8DF                 cmp     esi, [edi+0Ch]
.text:0040C8E2                 jz      short loc_40C8EA
.text:0040C8E4
.text:0040C8E4 loc_40C8E4:                             ; CODE XREF: .text:0040C8ED↓j
.text:0040C8E4                 xor     eax, eax
.text:0040C8E6
.text:0040C8E6 loc_40C8E6:                             ; CODE XREF: .text:0040C8F4↓j
.text:0040C8E6                 pop     ebx
.text:0040C8E7                 pop     esi
.text:0040C8E8                 pop     edi
.text:0040C8E9                 retn
.text:0040C8EA ; ---------------------------------------------------------------------------
.text:0040C8EA
.text:0040C8EA loc_40C8EA:                             ; CODE XREF: .text:0040C8E2↑j
.text:0040C8EA                 cmp     ecx, [edi+10h]
.text:0040C8ED                 jnz     short loc_40C8E4
.text:0040C8EF                 mov     eax, 1
.text:0040C8F4                 jmp     short loc_40C8E6
.text:0040C8F4 ; ---------------------------------------------------------------------------
.text:0040C8F6 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:0040C8F6                                         ; DATA XREF: .text:0040C9EE↓o
.text:0040C90E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:0040C90E                                         ; DATA XREF: .text:0040CA06↓o
.text:0040C926                 align 20h
.text:0040C940 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:0040C940                                         ; DATA XREF: .text:0040CA40↓o
.text:0040C961 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:0040C961                                         ; DATA XREF: .text:0040CA5A↓o
.text:0040C979                 db 8Dh, 76h, 0
.text:0040C97C flt_40C97C      dd 100.0                ; DATA XREF: .text:0040CA33↓r
.text:0040C980 ; ---------------------------------------------------------------------------
.text:0040C980                 push    ebp
.text:0040C981                 push    edi
.text:0040C982                 push    esi
.text:0040C983                 xor     esi, esi
.text:0040C985                 push    ebx
.text:0040C986                 sub     esp, 1Ch
.text:0040C989                 mov     ebx, [esp+30h]
.text:0040C98D                 mov     edi, [esp+34h]
.text:0040C991                 mov     ecx, [ebx+10h]
.text:0040C994                 mov     eax, [ebx+0Ch]
.text:0040C997                 mov     ebp, [ebx+8]
.text:0040C99A                 mov     [esp+18h], ecx
.text:0040C99E                 mov     ecx, [ebx]
.text:0040C9A0                 mov     [esp+14h], eax
.text:0040C9A4                 mov     eax, [ebx+4]
.text:0040C9A7                 cmp     ecx, eax
.text:0040C9A9                 jnb     short loc_40C9E7
.text:0040C9AB                 mov     ebx, eax
.text:0040C9AD                 lea     esi, [esi+0]
.text:0040C9B0
.text:0040C9B0 loc_40C9B0:                             ; CODE XREF: .text:0040C9E5↓j
.text:0040C9B0                 mov     edx, [ecx]
.text:0040C9B2                 test    edx, edx
.text:0040C9B4                 jz      short loc_40C9E0
.text:0040C9B6                 mov     eax, [ecx+4]
.text:0040C9B9                 mov     edx, 1
.text:0040C9BE                 test    eax, eax
.text:0040C9C0                 jz      short loc_40C9D8
.text:0040C9C2                 lea     esi, [esi+0]
.text:0040C9C9                 lea     edi, [edi+0]
.text:0040C9D0
.text:0040C9D0 loc_40C9D0:                             ; CODE XREF: .text:0040C9D6↓j
.text:0040C9D0                 mov     eax, [eax+4]
.text:0040C9D3                 inc     edx
.text:0040C9D4                 test    eax, eax
.text:0040C9D6                 jnz     short loc_40C9D0
.text:0040C9D8
.text:0040C9D8 loc_40C9D8:                             ; CODE XREF: .text:0040C9C0↑j
.text:0040C9D8                 cmp     edx, esi
.text:0040C9DA                 jbe     short loc_40C9E0
.text:0040C9DC                 mov     esi, edx
.text:0040C9DE                 mov     esi, esi
.text:0040C9E0
.text:0040C9E0 loc_40C9E0:                             ; CODE XREF: .text:0040C9B4↑j
.text:0040C9E0                                         ; .text:0040C9DA↑j
.text:0040C9E0                 add     ecx, 8
.text:0040C9E3                 cmp     ecx, ebx
.text:0040C9E5                 jb      short loc_40C9B0
.text:0040C9E7
.text:0040C9E7 loc_40C9E7:                             ; CODE XREF: .text:0040C9A9↑j
.text:0040C9E7                 mov     [esp], edi
.text:0040C9EA                 mov     edx, [esp+18h]
.text:0040C9EE                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:0040C9F6                 mov     [esp+8], edx
.text:0040C9FA                 call    fprintf
.text:0040C9FF                 mov     [esp+8], ebp
.text:0040CA03                 mov     [esp], edi
.text:0040CA06                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:0040CA0E                 call    fprintf
.text:0040CA13                 mov     ebx, [esp+14h]
.text:0040CA17                 xor     eax, eax
.text:0040CA19                 mov     ecx, ebp
.text:0040CA1B                 push    eax
.text:0040CA1C                 xor     ebp, ebp
.text:0040CA1E                 push    ebx
.text:0040CA1F                 fild    qword ptr [esp]
.text:0040CA22                 add     esp, 8
.text:0040CA25                 push    ebp
.text:0040CA26                 push    ecx
.text:0040CA27                 fild    qword ptr [esp]
.text:0040CA2A                 fxch    st(1)
.text:0040CA2C                 add     esp, 8
.text:0040CA2F                 mov     ebx, [esp+14h]
.text:0040CA33                 fmul    ds:flt_40C97C
.text:0040CA39                 mov     [esp], edi
.text:0040CA3C                 mov     [esp+8], ebx
.text:0040CA40                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0040CA48                 fdivrp  st(1), st
.text:0040CA4A                 fstp    qword ptr [esp+0Ch]
.text:0040CA4E                 call    fprintf
.text:0040CA53                 mov     [esp+8], esi
.text:0040CA57                 mov     [esp], edi
.text:0040CA5A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:0040CA62                 call    fprintf
.text:0040CA67                 add     esp, 1Ch
.text:0040CA6A                 pop     ebx
.text:0040CA6B                 pop     esi
.text:0040CA6C                 pop     edi
.text:0040CA6D                 pop     ebp
.text:0040CA6E                 retn
.text:0040CA6E ; ---------------------------------------------------------------------------
.text:0040CA6F                 align 10h
.text:0040CA70
.text:0040CA70 ; =============== S U B R O U T I N E =======================================
.text:0040CA70
.text:0040CA70
.text:0040CA70 sub_40CA70      proc near               ; CODE XREF: sub_403270+16C↑p
.text:0040CA70                                         ; sub_403270+13B5↑p ...
.text:0040CA70
.text:0040CA70 var_1C          = dword ptr -1Ch
.text:0040CA70 var_18          = dword ptr -18h
.text:0040CA70 arg_0           = dword ptr  4
.text:0040CA70 arg_4           = dword ptr  8
.text:0040CA70
.text:0040CA70                 push    edi
.text:0040CA71                 push    esi
.text:0040CA72                 push    ebx
.text:0040CA73                 sub     esp, 10h
.text:0040CA76                 mov     esi, [esp+1Ch+arg_0]
.text:0040CA7A                 mov     edi, [esp+1Ch+arg_4]
.text:0040CA7E                 mov     edx, [esi+8]
.text:0040CA81                 mov     [esp+1Ch+var_1C], edi
.text:0040CA84                 mov     [esp+1Ch+var_18], edx
.text:0040CA88                 call    dword ptr [esi+18h]
.text:0040CA8B                 mov     ecx, [esi]
.text:0040CA8D                 lea     eax, [ecx+eax*8]
.text:0040CA90                 cmp     eax, [esi+4]
.text:0040CA93                 jnb     short loc_40CAD4
.text:0040CA95                 mov     ecx, [eax]
.text:0040CA97                 test    ecx, ecx
.text:0040CA99                 jz      short loc_40CAC7
.text:0040CA9B                 test    eax, eax
.text:0040CA9D                 mov     ebx, eax
.text:0040CA9F                 jz      short loc_40CAC7
.text:0040CAA1                 jmp     short loc_40CAB0
.text:0040CAA1 ; ---------------------------------------------------------------------------
.text:0040CAA3                 align 10h
.text:0040CAB0
.text:0040CAB0 loc_40CAB0:                             ; CODE XREF: sub_40CA70+31↑j
.text:0040CAB0                                         ; sub_40CA70+55↓j
.text:0040CAB0                 mov     edx, [ebx]
.text:0040CAB2                 mov     [esp+1Ch+var_1C], edi
.text:0040CAB5                 mov     [esp+1Ch+var_18], edx
.text:0040CAB9                 call    dword ptr [esi+1Ch]
.text:0040CABC                 test    al, al
.text:0040CABE                 jnz     short loc_40CAD0
.text:0040CAC0                 mov     ebx, [ebx+4]
.text:0040CAC3                 test    ebx, ebx
.text:0040CAC5                 jnz     short loc_40CAB0
.text:0040CAC7
.text:0040CAC7 loc_40CAC7:                             ; CODE XREF: sub_40CA70+29↑j
.text:0040CAC7                                         ; sub_40CA70+2F↑j
.text:0040CAC7                 xor     eax, eax
.text:0040CAC9
.text:0040CAC9 loc_40CAC9:                             ; CODE XREF: sub_40CA70+62↓j
.text:0040CAC9                 add     esp, 10h
.text:0040CACC                 pop     ebx
.text:0040CACD                 pop     esi
.text:0040CACE                 pop     edi
.text:0040CACF                 retn
.text:0040CAD0 ; ---------------------------------------------------------------------------
.text:0040CAD0
.text:0040CAD0 loc_40CAD0:                             ; CODE XREF: sub_40CA70+4E↑j
.text:0040CAD0                 mov     eax, [ebx]
.text:0040CAD2                 jmp     short loc_40CAC9
.text:0040CAD4 ; ---------------------------------------------------------------------------
.text:0040CAD4
.text:0040CAD4 loc_40CAD4:                             ; CODE XREF: sub_40CA70+23↑j
.text:0040CAD4                 call    abort
.text:0040CAD4 sub_40CA70      endp
.text:0040CAD4
.text:0040CAD4 ; ---------------------------------------------------------------------------
.text:0040CAD9                 align 10h
.text:0040CAE0                 sub     esp, 0Ch
.text:0040CAE3                 mov     eax, [esp+10h]
.text:0040CAE7                 mov     edx, [eax+10h]
.text:0040CAEA                 test    edx, edx
.text:0040CAEC                 jz      short loc_40CB13
.text:0040CAEE                 mov     edx, [eax]
.text:0040CAF0                 mov     ecx, [eax+4]
.text:0040CAF3                 lea     esi, [esi+0]
.text:0040CAF9                 lea     edi, [edi+0]
.text:0040CB00
.text:0040CB00 loc_40CB00:                             ; CODE XREF: .text:0040CB0D↓j
.text:0040CB00                 cmp     edx, ecx
.text:0040CB02                 jnb     short loc_40CB17
.text:0040CB04                 mov     eax, [edx]
.text:0040CB06                 test    eax, eax
.text:0040CB08                 jnz     short loc_40CB0F
.text:0040CB0A                 add     edx, 8
.text:0040CB0D                 jmp     short loc_40CB00
.text:0040CB0F ; ---------------------------------------------------------------------------
.text:0040CB0F
.text:0040CB0F loc_40CB0F:                             ; CODE XREF: .text:0040CB08↑j
.text:0040CB0F                                         ; .text:0040CB15↓j
.text:0040CB0F                 add     esp, 0Ch
.text:0040CB12                 retn
.text:0040CB13 ; ---------------------------------------------------------------------------
.text:0040CB13
.text:0040CB13 loc_40CB13:                             ; CODE XREF: .text:0040CAEC↑j
.text:0040CB13                 xor     eax, eax
.text:0040CB15                 jmp     short loc_40CB0F
.text:0040CB17 ; ---------------------------------------------------------------------------
.text:0040CB17
.text:0040CB17 loc_40CB17:                             ; CODE XREF: .text:0040CB02↑j
.text:0040CB17                 call    abort
.text:0040CB17 ; ---------------------------------------------------------------------------
.text:0040CB1C                 align 10h
.text:0040CB20                 push    esi
.text:0040CB21                 push    ebx
.text:0040CB22                 sub     esp, 14h
.text:0040CB25                 mov     ebx, [esp+20h]
.text:0040CB29                 mov     esi, [esp+24h]
.text:0040CB2D                 mov     edx, [ebx+8]
.text:0040CB30                 mov     [esp], esi
.text:0040CB33                 mov     [esp+4], edx
.text:0040CB37                 call    dword ptr [ebx+18h]
.text:0040CB3A                 mov     ecx, [ebx]
.text:0040CB3C                 lea     edx, [ecx+eax*8]
.text:0040CB3F                 mov     ecx, [ebx+4]
.text:0040CB42                 cmp     edx, ecx
.text:0040CB44                 jnb     short loc_40CB90
.text:0040CB46                 test    edx, edx
.text:0040CB48                 mov     eax, edx
.text:0040CB4A                 jz      short loc_40CB5B
.text:0040CB4C                 lea     esi, [esi+0]
.text:0040CB50
.text:0040CB50 loc_40CB50:                             ; CODE XREF: .text:0040CB59↓j
.text:0040CB50                 cmp     [eax], esi
.text:0040CB52                 jz      short loc_40CB85
.text:0040CB54                 mov     eax, [eax+4]
.text:0040CB57
.text:0040CB57 loc_40CB57:                             ; CODE XREF: .text:0040CB8A↓j
.text:0040CB57                 test    eax, eax
.text:0040CB59                 jnz     short loc_40CB50
.text:0040CB5B
.text:0040CB5B loc_40CB5B:                             ; CODE XREF: .text:0040CB4A↑j
.text:0040CB5B                 add     edx, 8
.text:0040CB5E                 cmp     edx, ecx
.text:0040CB60                 jnb     short loc_40CB7D
.text:0040CB62                 lea     esi, [esi+0]
.text:0040CB69                 lea     edi, [edi+0]
.text:0040CB70
.text:0040CB70 loc_40CB70:                             ; CODE XREF: .text:0040CB7B↓j
.text:0040CB70                 mov     eax, [edx]
.text:0040CB72                 test    eax, eax
.text:0040CB74                 jnz     short loc_40CB7F
.text:0040CB76                 add     edx, 8
.text:0040CB79                 cmp     edx, ecx
.text:0040CB7B                 jb      short loc_40CB70
.text:0040CB7D
.text:0040CB7D loc_40CB7D:                             ; CODE XREF: .text:0040CB60↑j
.text:0040CB7D                 xor     eax, eax
.text:0040CB7F
.text:0040CB7F loc_40CB7F:                             ; CODE XREF: .text:0040CB74↑j
.text:0040CB7F                                         ; .text:0040CB8E↓j
.text:0040CB7F                 add     esp, 14h
.text:0040CB82                 pop     ebx
.text:0040CB83                 pop     esi
.text:0040CB84                 retn
.text:0040CB85 ; ---------------------------------------------------------------------------
.text:0040CB85
.text:0040CB85 loc_40CB85:                             ; CODE XREF: .text:0040CB52↑j
.text:0040CB85                 mov     eax, [eax+4]
.text:0040CB88                 test    eax, eax
.text:0040CB8A                 jz      short loc_40CB57
.text:0040CB8C                 mov     eax, [eax]
.text:0040CB8E                 jmp     short loc_40CB7F
.text:0040CB90 ; ---------------------------------------------------------------------------
.text:0040CB90
.text:0040CB90 loc_40CB90:                             ; CODE XREF: .text:0040CB44↑j
.text:0040CB90                 call    abort
.text:0040CB90 ; ---------------------------------------------------------------------------
.text:0040CB95                 align 10h
.text:0040CBA0                 push    ebp
.text:0040CBA1                 xor     ecx, ecx
.text:0040CBA3                 push    edi
.text:0040CBA4                 push    esi
.text:0040CBA5                 push    ebx
.text:0040CBA6                 mov     edx, [esp+14h]
.text:0040CBAA                 mov     ebp, [esp+18h]
.text:0040CBAE                 mov     edi, [esp+1Ch]
.text:0040CBB2                 mov     ebx, [edx]
.text:0040CBB4                 mov     esi, [edx+4]
.text:0040CBB7                 cmp     ebx, esi
.text:0040CBB9                 jnb     short loc_40CBF0
.text:0040CBBB                 nop
.text:0040CBBC                 lea     esi, [esi+0]
.text:0040CBC0
.text:0040CBC0 loc_40CBC0:                             ; CODE XREF: .text:0040CBE7↓j
.text:0040CBC0                 mov     edx, [ebx]
.text:0040CBC2                 test    edx, edx
.text:0040CBC4                 jz      short loc_40CBE2
.text:0040CBC6                 mov     edx, ebx
.text:0040CBC8                 nop
.text:0040CBC9                 lea     esi, [esi+0]
.text:0040CBD0
.text:0040CBD0 loc_40CBD0:                             ; CODE XREF: .text:0040CBE0↓j
.text:0040CBD0                 cmp     ecx, edi
.text:0040CBD2                 jnb     short loc_40CBF0
.text:0040CBD4                 mov     eax, [edx]
.text:0040CBD6                 mov     edx, [edx+4]
.text:0040CBD9                 mov     [ebp+ecx*4+0], eax
.text:0040CBDD                 inc     ecx
.text:0040CBDE                 test    edx, edx
.text:0040CBE0                 jnz     short loc_40CBD0
.text:0040CBE2
.text:0040CBE2 loc_40CBE2:                             ; CODE XREF: .text:0040CBC4↑j
.text:0040CBE2                 add     ebx, 8
.text:0040CBE5                 cmp     ebx, esi
.text:0040CBE7                 jb      short loc_40CBC0
.text:0040CBE9                 lea     esi, [esi+0]
.text:0040CBF0
.text:0040CBF0 loc_40CBF0:                             ; CODE XREF: .text:0040CBB9↑j
.text:0040CBF0                                         ; .text:0040CBD2↑j
.text:0040CBF0                 pop     ebx
.text:0040CBF1                 mov     eax, ecx
.text:0040CBF3                 pop     esi
.text:0040CBF4                 pop     edi
.text:0040CBF5                 pop     ebp
.text:0040CBF6                 retn
.text:0040CBF6 ; ---------------------------------------------------------------------------
.text:0040CBF7                 align 10h
.text:0040CC00                 push    ebp
.text:0040CC01                 push    edi
.text:0040CC02                 xor     edi, edi
.text:0040CC04                 push    esi
.text:0040CC05                 push    ebx
.text:0040CC06                 sub     esp, 0Ch
.text:0040CC09                 mov     edx, [esp+20h]
.text:0040CC0D                 mov     ebp, [esp+28h]
.text:0040CC11                 mov     esi, [edx]
.text:0040CC13                 mov     eax, [edx+4]
.text:0040CC16                 cmp     esi, eax
.text:0040CC18                 jnb     short loc_40CC60
.text:0040CC1A                 lea     esi, [esi+0]
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: .text:0040CC55↓j
.text:0040CC20                 mov     ecx, [esi]
.text:0040CC22                 test    ecx, ecx
.text:0040CC24                 jz      short loc_40CC50
.text:0040CC26                 mov     ebx, esi
.text:0040CC28                 nop
.text:0040CC29                 lea     esi, [esi+0]
.text:0040CC30
.text:0040CC30 loc_40CC30:                             ; CODE XREF: .text:0040CC47↓j
.text:0040CC30                 mov     [esp+4], ebp
.text:0040CC34                 mov     edx, [ebx]
.text:0040CC36                 mov     [esp], edx
.text:0040CC39                 call    dword ptr [esp+24h]
.text:0040CC3D                 test    al, al
.text:0040CC3F                 jz      short loc_40CC60
.text:0040CC41                 mov     ebx, [ebx+4]
.text:0040CC44                 inc     edi
.text:0040CC45                 test    ebx, ebx
.text:0040CC47                 jnz     short loc_40CC30
.text:0040CC49                 mov     ebx, [esp+20h]
.text:0040CC4D                 mov     eax, [ebx+4]
.text:0040CC50
.text:0040CC50 loc_40CC50:                             ; CODE XREF: .text:0040CC24↑j
.text:0040CC50                 add     esi, 8
.text:0040CC53                 cmp     esi, eax
.text:0040CC55                 jb      short loc_40CC20
.text:0040CC57                 mov     esi, esi
.text:0040CC59                 lea     edi, [edi+0]
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: .text:0040CC18↑j
.text:0040CC60                                         ; .text:0040CC3F↑j
.text:0040CC60                 add     esp, 0Ch
.text:0040CC63                 mov     eax, edi
.text:0040CC65                 pop     ebx
.text:0040CC66                 pop     esi
.text:0040CC67                 pop     edi
.text:0040CC68                 pop     ebp
.text:0040CC69                 retn
.text:0040CC69 ; ---------------------------------------------------------------------------
.text:0040CC6A                 align 10h
.text:0040CC70                 push    esi
.text:0040CC71                 push    ebx
.text:0040CC72                 mov     ecx, [esp+0Ch]
.text:0040CC76                 xor     ebx, ebx
.text:0040CC78                 mov     esi, [esp+10h]
.text:0040CC7C                 movzx   edx, byte ptr [ecx]
.text:0040CC7F                 test    dl, dl
.text:0040CC81                 jz      short loc_40CCAA
.text:0040CC83                 lea     esi, [esi+0]
.text:0040CC89                 lea     edi, [edi+0]
.text:0040CC90
.text:0040CC90 loc_40CC90:                             ; CODE XREF: .text:0040CCA8↓j
.text:0040CC90                 mov     eax, ebx
.text:0040CC92                 inc     ecx
.text:0040CC93                 shl     eax, 5
.text:0040CC96                 sub     eax, ebx
.text:0040CC98                 movzx   ebx, dl
.text:0040CC9B                 add     eax, ebx
.text:0040CC9D                 xor     edx, edx
.text:0040CC9F                 div     esi
.text:0040CCA1                 mov     ebx, edx
.text:0040CCA3                 movzx   edx, byte ptr [ecx]
.text:0040CCA6                 test    dl, dl
.text:0040CCA8                 jnz     short loc_40CC90
.text:0040CCAA
.text:0040CCAA loc_40CCAA:                             ; CODE XREF: .text:0040CC81↑j
.text:0040CCAA                 mov     eax, ebx
.text:0040CCAC                 pop     ebx
.text:0040CCAD                 pop     esi
.text:0040CCAE                 retn
.text:0040CCAE ; ---------------------------------------------------------------------------
.text:0040CCAF                 align 10h
.text:0040CCB0                 mov     ecx, [esp+4]
.text:0040CCB4                 mov     edx, ds:dword_40C0A0
.text:0040CCBA                 mov     [ecx], edx
.text:0040CCBC                 mov     edx, ds:dword_40C0A4
.text:0040CCC2                 mov     [ecx+4], edx
.text:0040CCC5                 mov     edx, ds:dword_40C0A4+4
.text:0040CCCB                 mov     [ecx+8], edx
.text:0040CCCE                 mov     edx, ds:dword_40C0A4+8
.text:0040CCD4                 mov     [ecx+0Ch], edx
.text:0040CCD7                 mov     edx, ds:dword_40C0A4+0Ch
.text:0040CCDD                 mov     [ecx+10h], edx
.text:0040CCE0                 retn
.text:0040CCE0 ; ---------------------------------------------------------------------------
.text:0040CCE1                 align 4
.text:0040CCE4 flt_40CCE4      dd 0.1                  ; DATA XREF: sub_40CCF0+79↓r
.text:0040CCE8 flt_40CCE8      dd 0.89999998           ; DATA XREF: sub_40CCF0+8D↓r
.text:0040CCEC flt_40CCEC      dd 1.1                  ; DATA XREF: sub_40CCF0+A1↓r
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 sub_40CCF0      proc near               ; CODE XREF: sub_405F20+40↑p
.text:0040CCF0
.text:0040CCF0 var_34          = qword ptr -34h
.text:0040CCF0 var_2C          = dword ptr -2Ch
.text:0040CCF0 var_28          = dword ptr -28h
.text:0040CCF0 var_24          = dword ptr -24h
.text:0040CCF0 var_20          = dword ptr -20h
.text:0040CCF0 var_1C          = qword ptr -1Ch
.text:0040CCF0 var_14          = word ptr -14h
.text:0040CCF0 var_12          = word ptr -12h
.text:0040CCF0 var_10          = dword ptr -10h
.text:0040CCF0 arg_0           = dword ptr  4
.text:0040CCF0 arg_4           = dword ptr  8
.text:0040CCF0
.text:0040CCF0                 push    esi
.text:0040CCF1                 push    ebx
.text:0040CCF2                 sub     esp, 24h
.text:0040CCF5                 lea     edx, [esp+2Ch+var_10]
.text:0040CCF9                 mov     [esp+2Ch+var_24], edx
.text:0040CCFD                 mov     ebx, [esp+2Ch+arg_0]
.text:0040CD01                 mov     edx, [esp+2Ch+arg_4]
.text:0040CD05                 mov     [esp+2Ch+var_20], 1
.text:0040CD0D                 mov     [esp+2Ch+var_2C], ebx
.text:0040CD10                 mov     [esp+2Ch+var_28], edx
.text:0040CD14                 call    sub_40CE80
.text:0040CD19                 mov     esi, eax
.text:0040CD1B                 xor     eax, eax
.text:0040CD1D                 test    esi, esi
.text:0040CD1F                 jz      loc_40CE52
.text:0040CD25                 dec     dword ptr [ebx+10h]
.text:0040CD28                 mov     ecx, [esp+2Ch+var_10]
.text:0040CD2C                 mov     edx, [ecx]
.text:0040CD2E                 test    edx, edx
.text:0040CD30                 jnz     loc_40CE50
.text:0040CD36                 dec     dword ptr [ebx+0Ch]
.text:0040CD39                 xor     eax, eax
.text:0040CD3B                 xor     edx, edx
.text:0040CD3D                 mov     ecx, [ebx+0Ch]
.text:0040CD40                 push    eax
.text:0040CD41                 push    ecx
.text:0040CD42                 mov     eax, [ebx+8]
.text:0040CD45                 mov     ecx, [ebx+14h]
.text:0040CD48                 fild    [esp+34h+var_34]
.text:0040CD4B                 add     esp, 8
.text:0040CD4E                 push    edx
.text:0040CD4F                 push    eax
.text:0040CD50                 fild    [esp+34h+var_34]
.text:0040CD53                 add     esp, 8
.text:0040CD56                 fld     dword ptr [ecx]
.text:0040CD58                 fmul    st(1), st
.text:0040CD5A                 fxch    st(1)
.text:0040CD5C                 fucomp  st(2)
.text:0040CD5E                 fnstsw  ax
.text:0040CD60                 fstp    st(1)
.text:0040CD62                 sahf
.text:0040CD63                 jbe     loc_40CE60
.text:0040CD69                 fld     ds:flt_40CCE4
.text:0040CD6F                 fld     dword ptr [ecx+8]
.text:0040CD72                 fucom   st(1)
.text:0040CD74                 fnstsw  ax
.text:0040CD76                 sahf
.text:0040CD77                 jbe     loc_40CE70
.text:0040CD7D                 fld     ds:flt_40CCE8
.text:0040CD83                 fucomp  st(1)
.text:0040CD85                 fnstsw  ax
.text:0040CD87                 sahf
.text:0040CD88                 jbe     loc_40CE70
.text:0040CD8E                 fld     dword ptr [ecx+0Ch]
.text:0040CD91                 fld     ds:flt_40CCEC
.text:0040CD97                 fxch    st(1)
.text:0040CD99                 fucompp
.text:0040CD9B                 fnstsw  ax
.text:0040CD9D                 sahf
.text:0040CD9E                 jbe     loc_40CE70
.text:0040CDA4                 fldz
.text:0040CDA6                 fxch    st(3)
.text:0040CDA8                 fucom   st(3)
.text:0040CDAA                 fnstsw  ax
.text:0040CDAC                 fstp    st(3)
.text:0040CDAE                 sahf
.text:0040CDAF                 jb      loc_40CE70
.text:0040CDB5                 fxch    st(1)
.text:0040CDB7                 faddp   st(2), st
.text:0040CDB9                 fld     dword ptr [ecx+4]
.text:0040CDBC                 fucom   st(2)
.text:0040CDBE                 fnstsw  ax
.text:0040CDC0                 sahf
.text:0040CDC1                 jbe     loc_40CE70
.text:0040CDC7                 fld1
.text:0040CDC9                 fucompp
.text:0040CDCB                 fnstsw  ax
.text:0040CDCD                 sahf
.text:0040CDCE                 jb      loc_40CE64
.text:0040CDD4                 fucompp
.text:0040CDD6                 fnstsw  ax
.text:0040CDD8                 sahf
.text:0040CDD9                 ja      short loc_40CDEC
.text:0040CDDB                 nop
.text:0040CDDC                 lea     esi, [esi+0]
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: sub_40CCF0+178↓j
.text:0040CDE0                 mov     dword ptr [ebx+14h], offset dword_40C0A0
.text:0040CDE7                 mov     ecx, offset dword_40C0A0
.text:0040CDEC
.text:0040CDEC loc_40CDEC:                             ; CODE XREF: sub_40CCF0+E9↑j
.text:0040CDEC                 mov     eax, [ebx+0Ch]
.text:0040CDEF                 xor     edx, edx
.text:0040CDF1                 push    edx
.text:0040CDF2                 xor     edx, edx
.text:0040CDF4                 push    eax
.text:0040CDF5                 mov     eax, [ebx+8]
.text:0040CDF8                 fild    [esp+34h+var_34]
.text:0040CDFB                 add     esp, 8
.text:0040CDFE                 push    edx
.text:0040CDFF                 push    eax
.text:0040CE00                 fild    [esp+34h+var_34]
.text:0040CE03                 add     esp, 8
.text:0040CE06                 fld     dword ptr [ecx]
.text:0040CE08                 fmul    st, st(1)
.text:0040CE0A                 fucomp  st(2)
.text:0040CE0C                 fnstsw  ax
.text:0040CE0E                 fstp    st(1)
.text:0040CE10                 sahf
.text:0040CE11                 jbe     short loc_40CE60
.text:0040CE13                 cmp     byte ptr [ecx+10h], 0
.text:0040CE17                 jz      short loc_40CE58
.text:0040CE19                 fmul    dword ptr [ecx+4]
.text:0040CE1C
.text:0040CE1C loc_40CE1C:                             ; CODE XREF: sub_40CCF0+16E↓j
.text:0040CE1C                 fnstcw  [esp+2Ch+var_12]
.text:0040CE20                 movzx   ecx, [esp+2Ch+var_12]
.text:0040CE25                 mov     [esp+2Ch+var_2C], ebx
.text:0040CE28                 or      cx, 0C00h
.text:0040CE2D                 mov     [esp+2Ch+var_14], cx
.text:0040CE32                 fldcw   [esp+2Ch+var_14]
.text:0040CE36                 fistp   [esp+2Ch+var_1C]
.text:0040CE3A                 fldcw   [esp+2Ch+var_12]
.text:0040CE3E                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:0040CE42                 mov     [esp+2Ch+var_28], edx
.text:0040CE46                 call    sub_40C4A0
.text:0040CE4B                 nop
.text:0040CE4C                 lea     esi, [esi+0]
.text:0040CE50
.text:0040CE50 loc_40CE50:                             ; CODE XREF: sub_40CCF0+40↑j
.text:0040CE50                                         ; sub_40CCF0+172↓j
.text:0040CE50                 mov     eax, esi
.text:0040CE52
.text:0040CE52 loc_40CE52:                             ; CODE XREF: sub_40CCF0+2F↑j
.text:0040CE52                 add     esp, 24h
.text:0040CE55                 pop     ebx
.text:0040CE56                 pop     esi
.text:0040CE57                 retn
.text:0040CE58 ; ---------------------------------------------------------------------------
.text:0040CE58
.text:0040CE58 loc_40CE58:                             ; CODE XREF: sub_40CCF0+127↑j
.text:0040CE58                 fmul    dword ptr [ecx+4]
.text:0040CE5B                 fmul    dword ptr [ecx+8]
.text:0040CE5E                 jmp     short loc_40CE1C
.text:0040CE60 ; ---------------------------------------------------------------------------
.text:0040CE60
.text:0040CE60 loc_40CE60:                             ; CODE XREF: sub_40CCF0+73↑j
.text:0040CE60                                         ; sub_40CCF0+121↑j
.text:0040CE60                 fstp    st
.text:0040CE62                 jmp     short loc_40CE50
.text:0040CE64 ; ---------------------------------------------------------------------------
.text:0040CE64
.text:0040CE64 loc_40CE64:                             ; CODE XREF: sub_40CCF0+DE↑j
.text:0040CE64                                         ; sub_40CCF0+182↓j
.text:0040CE64                 fstp    st
.text:0040CE66                 fstp    st
.text:0040CE68                 jmp     loc_40CDE0
.text:0040CE68 ; ---------------------------------------------------------------------------
.text:0040CE6D                 align 10h
.text:0040CE70
.text:0040CE70 loc_40CE70:                             ; CODE XREF: sub_40CCF0+87↑j
.text:0040CE70                                         ; sub_40CCF0+98↑j ...
.text:0040CE70                 fstp    st
.text:0040CE72                 jmp     short loc_40CE64
.text:0040CE72 sub_40CCF0      endp
.text:0040CE72
.text:0040CE72 ; ---------------------------------------------------------------------------
.text:0040CE74                 align 10h
.text:0040CE80
.text:0040CE80 ; =============== S U B R O U T I N E =======================================
.text:0040CE80
.text:0040CE80
.text:0040CE80 sub_40CE80      proc near               ; CODE XREF: sub_40C620+32↑p
.text:0040CE80                                         ; sub_40CCF0+24↑p
.text:0040CE80
.text:0040CE80 var_1C          = dword ptr -1Ch
.text:0040CE80 var_18          = dword ptr -18h
.text:0040CE80 var_D           = byte ptr -0Dh
.text:0040CE80 arg_0           = dword ptr  4
.text:0040CE80 arg_4           = dword ptr  8
.text:0040CE80 arg_8           = dword ptr  0Ch
.text:0040CE80 arg_C           = byte ptr  10h
.text:0040CE80
.text:0040CE80                 push    edi
.text:0040CE81                 push    esi
.text:0040CE82                 push    ebx
.text:0040CE83                 sub     esp, 10h
.text:0040CE86                 mov     esi, [esp+1Ch+arg_0]
.text:0040CE8A                 movzx   ecx, [esp+1Ch+arg_C]
.text:0040CE8F                 mov     edi, [esp+1Ch+arg_4]
.text:0040CE93                 mov     edx, [esi+8]
.text:0040CE96                 mov     [esp+1Ch+var_D], cl
.text:0040CE9A                 mov     [esp+1Ch+var_18], edx
.text:0040CE9E                 mov     [esp+1Ch+var_1C], edi
.text:0040CEA1                 call    dword ptr [esi+18h]
.text:0040CEA4                 mov     ecx, [esi]
.text:0040CEA6                 lea     ebx, [ecx+eax*8]
.text:0040CEA9                 cmp     ebx, [esi+4]
.text:0040CEAC                 jnb     loc_40CF63
.text:0040CEB2                 mov     edx, [esp+1Ch+arg_8]
.text:0040CEB6                 xor     eax, eax
.text:0040CEB8                 mov     [edx], ebx
.text:0040CEBA                 mov     edx, [ebx]
.text:0040CEBC                 test    edx, edx
.text:0040CEBE                 jz      short loc_40CF02
.text:0040CEC0                 mov     [esp+1Ch+var_18], edx
.text:0040CEC4                 mov     [esp+1Ch+var_1C], edi
.text:0040CEC7                 call    dword ptr [esi+1Ch]
.text:0040CECA                 test    al, al
.text:0040CECC                 jz      short loc_40CF11
.text:0040CECE                 cmp     [esp+1Ch+var_D], 0
.text:0040CED3                 mov     edi, [ebx]
.text:0040CED5                 jz      short loc_40CF00
.text:0040CED7                 mov     ecx, [ebx+4]
.text:0040CEDA                 test    ecx, ecx
.text:0040CEDC                 jz      short loc_40CF09
.text:0040CEDE                 mov     eax, [ecx]
.text:0040CEE0                 mov     edx, [ecx+4]
.text:0040CEE3                 mov     [ebx], eax
.text:0040CEE5                 mov     [ebx+4], edx
.text:0040CEE8                 mov     ebx, [esi+24h]
.text:0040CEEB                 mov     dword ptr [ecx], 0
.text:0040CEF1                 mov     [ecx+4], ebx
.text:0040CEF4                 mov     [esi+24h], ecx
.text:0040CEF7                 mov     esi, esi
.text:0040CEF9                 lea     edi, [edi+0]
.text:0040CF00
.text:0040CF00 loc_40CF00:                             ; CODE XREF: sub_40CE80+55↑j
.text:0040CF00                                         ; sub_40CE80+8F↓j
.text:0040CF00                 mov     eax, edi
.text:0040CF02
.text:0040CF02 loc_40CF02:                             ; CODE XREF: sub_40CE80+3E↑j
.text:0040CF02                                         ; sub_40CE80+BC↓j ...
.text:0040CF02                 add     esp, 10h
.text:0040CF05                 pop     ebx
.text:0040CF06                 pop     esi
.text:0040CF07                 pop     edi
.text:0040CF08                 retn
.text:0040CF09 ; ---------------------------------------------------------------------------
.text:0040CF09
.text:0040CF09 loc_40CF09:                             ; CODE XREF: sub_40CE80+5C↑j
.text:0040CF09                 mov     dword ptr [ebx], 0
.text:0040CF0F                 jmp     short loc_40CF00
.text:0040CF11 ; ---------------------------------------------------------------------------
.text:0040CF11
.text:0040CF11 loc_40CF11:                             ; CODE XREF: sub_40CE80+4C↑j
.text:0040CF11                 mov     eax, [ebx+4]
.text:0040CF14                 test    eax, eax
.text:0040CF16                 jz      short loc_40CF3A
.text:0040CF18                 nop
.text:0040CF19                 lea     esi, [esi+0]
.text:0040CF20
.text:0040CF20 loc_40CF20:                             ; CODE XREF: sub_40CE80+B8↓j
.text:0040CF20                 mov     ecx, [eax]
.text:0040CF22                 mov     [esp+1Ch+var_1C], edi
.text:0040CF25                 mov     [esp+1Ch+var_18], ecx
.text:0040CF29                 call    dword ptr [esi+1Ch]
.text:0040CF2C                 test    al, al
.text:0040CF2E                 jnz     short loc_40CF3E
.text:0040CF30                 mov     ebx, [ebx+4]
.text:0040CF33                 mov     eax, [ebx+4]
.text:0040CF36                 test    eax, eax
.text:0040CF38                 jnz     short loc_40CF20
.text:0040CF3A
.text:0040CF3A loc_40CF3A:                             ; CODE XREF: sub_40CE80+96↑j
.text:0040CF3A                 xor     eax, eax
.text:0040CF3C                 jmp     short loc_40CF02
.text:0040CF3E ; ---------------------------------------------------------------------------
.text:0040CF3E
.text:0040CF3E loc_40CF3E:                             ; CODE XREF: sub_40CE80+AE↑j
.text:0040CF3E                 cmp     [esp+1Ch+var_D], 0
.text:0040CF43                 mov     edx, [ebx+4]
.text:0040CF46                 mov     ecx, [edx]
.text:0040CF48                 jz      short loc_40CF5F
.text:0040CF4A                 mov     dword ptr [edx], 0
.text:0040CF50                 mov     edi, [edx+4]
.text:0040CF53                 mov     [ebx+4], edi
.text:0040CF56                 mov     edi, [esi+24h]
.text:0040CF59                 mov     [edx+4], edi
.text:0040CF5C                 mov     [esi+24h], edx
.text:0040CF5F
.text:0040CF5F loc_40CF5F:                             ; CODE XREF: sub_40CE80+C8↑j
.text:0040CF5F                 mov     eax, ecx
.text:0040CF61                 jmp     short loc_40CF02
.text:0040CF63 ; ---------------------------------------------------------------------------
.text:0040CF63
.text:0040CF63 loc_40CF63:                             ; CODE XREF: sub_40CE80+2C↑j
.text:0040CF63                 call    abort
.text:0040CF63 sub_40CE80      endp
.text:0040CF63
.text:0040CF63 ; ---------------------------------------------------------------------------
.text:0040CF68                 align 20h
.text:0040CF80
.text:0040CF80 ; =============== S U B R O U T I N E =======================================
.text:0040CF80
.text:0040CF80
.text:0040CF80 sub_40CF80      proc near               ; CODE XREF: sub_405CE0+1C↑p
.text:0040CF80                                         ; DATA XREF: sub_406A40+476↑o ...
.text:0040CF80
.text:0040CF80 arg_0           = dword ptr  4
.text:0040CF80 arg_4           = dword ptr  8
.text:0040CF80
.text:0040CF80                 push    esi
.text:0040CF81                 push    ebx
.text:0040CF82                 mov     ecx, [esp+8+arg_0]
.text:0040CF86                 xor     ebx, ebx
.text:0040CF88                 mov     esi, [esp+8+arg_4]
.text:0040CF8C                 movzx   eax, byte ptr [ecx]
.text:0040CF8F                 test    al, al
.text:0040CF91                 jz      short loc_40CFB3
.text:0040CF93                 lea     esi, [esi+0]
.text:0040CF99                 lea     edi, [edi+0]
.text:0040CFA0
.text:0040CFA0 loc_40CFA0:                             ; CODE XREF: sub_40CF80+31↓j
.text:0040CFA0                 movsx   edx, al
.text:0040CFA3                 inc     ecx
.text:0040CFA4                 mov     eax, ebx
.text:0040CFA6                 rol     eax, 9
.text:0040CFA9                 lea     ebx, [eax+edx]
.text:0040CFAC                 movzx   eax, byte ptr [ecx]
.text:0040CFAF                 test    al, al
.text:0040CFB1                 jnz     short loc_40CFA0
.text:0040CFB3
.text:0040CFB3 loc_40CFB3:                             ; CODE XREF: sub_40CF80+11↑j
.text:0040CFB3                 mov     eax, ebx
.text:0040CFB5                 xor     edx, edx
.text:0040CFB7                 div     esi
.text:0040CFB9                 pop     ebx
.text:0040CFBA                 pop     esi
.text:0040CFBB                 mov     eax, edx
.text:0040CFBD                 retn
.text:0040CFBD sub_40CF80      endp
.text:0040CFBD
.text:0040CFBD ; ---------------------------------------------------------------------------
.text:0040CFBE                 align 10h
.text:0040CFC0
.text:0040CFC0 ; =============== S U B R O U T I N E =======================================
.text:0040CFC0
.text:0040CFC0
.text:0040CFC0 sub_40CFC0      proc near               ; CODE XREF: sub_405220+2BF↑p
.text:0040CFC0                                         ; sub_405220+3CC↑p
.text:0040CFC0
.text:0040CFC0 var_1C          = dword ptr -1Ch
.text:0040CFC0 var_18          = dword ptr -18h
.text:0040CFC0 var_14          = dword ptr -14h
.text:0040CFC0 arg_0           = dword ptr  4
.text:0040CFC0 arg_4           = dword ptr  8
.text:0040CFC0 arg_8           = dword ptr  0Ch
.text:0040CFC0
.text:0040CFC0                 push    ebp
.text:0040CFC1                 push    edi
.text:0040CFC2                 xor     edi, edi
.text:0040CFC4                 push    esi
.text:0040CFC5                 push    ebx
.text:0040CFC6                 sub     esp, 0Ch
.text:0040CFC9                 mov     ebx, [esp+1Ch+arg_8]
.text:0040CFCD                 mov     ebp, [esp+1Ch+arg_0]
.text:0040CFD1                 mov     esi, [esp+1Ch+arg_4]
.text:0040CFD5                 test    ebx, ebx
.text:0040CFD7                 jnz     short loc_40CFE3
.text:0040CFD9
.text:0040CFD9 loc_40CFD9:                             ; CODE XREF: sub_40CFC0+36↓j
.text:0040CFD9                                         ; sub_40CFC0+44↓j ...
.text:0040CFD9                 add     esp, 0Ch
.text:0040CFDC                 mov     eax, edi
.text:0040CFDE                 pop     ebx
.text:0040CFDF                 pop     esi
.text:0040CFE0                 pop     edi
.text:0040CFE1                 pop     ebp
.text:0040CFE2                 retn
.text:0040CFE3 ; ---------------------------------------------------------------------------
.text:0040CFE3
.text:0040CFE3 loc_40CFE3:                             ; CODE XREF: sub_40CFC0+17↑j
.text:0040CFE3                                         ; sub_40CFC0+42↓j
.text:0040CFE3                 mov     [esp+1Ch+var_14], ebx
.text:0040CFE7                 mov     [esp+1Ch+var_18], esi
.text:0040CFEB                 mov     [esp+1Ch+var_1C], ebp
.text:0040CFEE                 call    sub_40E710
.text:0040CFF3                 cmp     eax, 0FFFFFFFFh
.text:0040CFF6                 jz      short loc_40CFD9
.text:0040CFF8                 test    eax, eax
.text:0040CFFA                 jz      short loc_40D006
.text:0040CFFC                 add     edi, eax
.text:0040CFFE                 add     esi, eax
.text:0040D000                 sub     ebx, eax
.text:0040D002                 jnz     short loc_40CFE3
.text:0040D004                 jmp     short loc_40CFD9
.text:0040D006 ; ---------------------------------------------------------------------------
.text:0040D006
.text:0040D006 loc_40D006:                             ; CODE XREF: sub_40CFC0+3A↑j
.text:0040D006                 call    _errno
.text:0040D00B                 mov     dword ptr [eax], 1Ch
.text:0040D011                 jmp     short loc_40CFD9
.text:0040D011 sub_40CFC0      endp
.text:0040D011
.text:0040D011 ; ---------------------------------------------------------------------------
.text:0040D013                 align 10h
.text:0040D020
.text:0040D020 ; =============== S U B R O U T I N E =======================================
.text:0040D020
.text:0040D020
.text:0040D020 ; int __cdecl sub_40D020(LPCSTR)
.text:0040D020 sub_40D020      proc near               ; CODE XREF: sub_404F90+3A↑p
.text:0040D020
.text:0040D020 Str             = dword ptr -2Ch
.text:0040D020 Src             = dword ptr -28h
.text:0040D020 Size            = dword ptr -24h
.text:0040D020 var_1C          = dword ptr -1Ch
.text:0040D020 Block           = dword ptr -18h
.text:0040D020 var_14          = dword ptr -14h
.text:0040D020 arg_0           = dword ptr  4
.text:0040D020
.text:0040D020                 push    ebp
.text:0040D021                 push    edi
.text:0040D022                 mov     edi, 200h
.text:0040D027                 push    esi
.text:0040D028                 push    ebx
.text:0040D029                 sub     esp, 1Ch
.text:0040D02C                 mov     edx, [esp+2Ch+arg_0]
.text:0040D030                 mov     [esp+2Ch+var_1C], 0
.text:0040D038                 mov     [esp+2Ch+Str], edx ; LPCSTR
.text:0040D03B                 call    sub_41A590
.text:0040D040                 mov     [esp+2Ch+var_14], eax
.text:0040D044                 mov     edx, [esp+2Ch+var_14]
.text:0040D048                 xor     eax, eax
.text:0040D04A                 test    edx, edx
.text:0040D04C                 jz      loc_40D145
.text:0040D052                 mov     [esp+2Ch+Str], 200h ; size_t
.text:0040D059                 call    sub_40B090
.text:0040D05E                 mov     [esp+2Ch+Block], eax
.text:0040D062                 call    _errno
.text:0040D067                 mov     dword ptr [eax], 0
.text:0040D06D                 lea     esi, [esi+0]
.text:0040D070
.text:0040D070 loc_40D070:                             ; CODE XREF: sub_40D020+72↓j
.text:0040D070                                         ; sub_40D020+E3↓j
.text:0040D070                 mov     ebx, [esp+2Ch+var_14]
.text:0040D074                 mov     [esp+2Ch+Str], ebx
.text:0040D077                 call    sub_418CB0
.text:0040D07C                 test    eax, eax
.text:0040D07E                 jz      loc_40D11E
.text:0040D084                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:0040D088                 lea     esi, [eax+0Ch]
.text:0040D08B                 jz      short loc_40D108
.text:0040D08D                 mov     eax, esi
.text:0040D08F
.text:0040D08F loc_40D08F:                             ; CODE XREF: sub_40D020+F1↓j
.text:0040D08F                                         ; sub_40D020+F9↓j
.text:0040D08F                 cmp     byte ptr [eax], 0
.text:0040D092                 jz      short loc_40D070
.text:0040D094                 mov     [esp+2Ch+Str], esi ; Str
.text:0040D097                 call    strlen
.text:0040D09C                 mov     ebx, [esp+2Ch+var_1C]
.text:0040D0A0                 lea     ebp, [eax+1]
.text:0040D0A3                 add     ebx, ebp
.text:0040D0A5                 cmp     ebx, [esp+2Ch+var_1C]
.text:0040D0A9                 jb      loc_40D160
.text:0040D0AF                 cmp     edi, ebx
.text:0040D0B1                 ja      short loc_40D0E5
.text:0040D0B3                 lea     esi, [esi+0]
.text:0040D0B9                 lea     edi, [edi+0]
.text:0040D0C0
.text:0040D0C0 loc_40D0C0:                             ; CODE XREF: sub_40D020+AF↓j
.text:0040D0C0                 lea     eax, [edi+edi]
.text:0040D0C3                 cmp     eax, edi
.text:0040D0C5                 jb      loc_40D160
.text:0040D0CB                 cmp     eax, ebx
.text:0040D0CD                 mov     edi, eax
.text:0040D0CF                 jbe     short loc_40D0C0
.text:0040D0D1                 mov     [esp+2Ch+Src], eax ; size_t
.text:0040D0D5                 mov     ecx, [esp+2Ch+Block]
.text:0040D0D9                 mov     [esp+2Ch+Str], ecx ; void *
.text:0040D0DC                 call    sub_40B120
.text:0040D0E1                 mov     [esp+2Ch+Block], eax
.text:0040D0E5
.text:0040D0E5 loc_40D0E5:                             ; CODE XREF: sub_40D020+91↑j
.text:0040D0E5                 mov     [esp+2Ch+Size], ebp ; Size
.text:0040D0E9                 mov     ecx, [esp+2Ch+Block]
.text:0040D0ED                 mov     eax, [esp+2Ch+var_1C]
.text:0040D0F1                 mov     [esp+2Ch+Src], esi ; Src
.text:0040D0F5                 add     ecx, eax
.text:0040D0F7                 mov     [esp+2Ch+Str], ecx ; void *
.text:0040D0FA                 call    memcpy
.text:0040D0FF                 mov     [esp+2Ch+var_1C], ebx
.text:0040D103                 jmp     loc_40D070
.text:0040D108 ; ---------------------------------------------------------------------------
.text:0040D108
.text:0040D108 loc_40D108:                             ; CODE XREF: sub_40D020+6B↑j
.text:0040D108                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:0040D10C                 jz      short loc_40D116
.text:0040D10E                 add     eax, 0Dh
.text:0040D111                 jmp     loc_40D08F
.text:0040D116 ; ---------------------------------------------------------------------------
.text:0040D116
.text:0040D116 loc_40D116:                             ; CODE XREF: sub_40D020+EC↑j
.text:0040D116                 add     eax, 0Eh
.text:0040D119                 jmp     loc_40D08F
.text:0040D11E ; ---------------------------------------------------------------------------
.text:0040D11E
.text:0040D11E loc_40D11E:                             ; CODE XREF: sub_40D020+5E↑j
.text:0040D11E                 mov     ebp, [esp+2Ch+Block]
.text:0040D122                 mov     edi, [esp+2Ch+var_1C]
.text:0040D126                 mov     byte ptr [edi+ebp], 0
.text:0040D12A                 call    _errno
.text:0040D12F                 mov     ebx, [eax]
.text:0040D131                 mov     esi, [esp+2Ch+var_14]
.text:0040D135                 mov     [esp+2Ch+Str], esi ; void *
.text:0040D138                 call    sub_41A520
.text:0040D13D                 test    ebx, ebx
.text:0040D13F                 mov     eax, [esp+2Ch+Block]
.text:0040D143                 jnz     short loc_40D14D
.text:0040D145
.text:0040D145 loc_40D145:                             ; CODE XREF: sub_40D020+2C↑j
.text:0040D145                                         ; sub_40D020+13E↓j
.text:0040D145                 add     esp, 1Ch
.text:0040D148                 pop     ebx
.text:0040D149                 pop     esi
.text:0040D14A                 pop     edi
.text:0040D14B                 pop     ebp
.text:0040D14C                 retn
.text:0040D14D ; ---------------------------------------------------------------------------
.text:0040D14D
.text:0040D14D loc_40D14D:                             ; CODE XREF: sub_40D020+123↑j
.text:0040D14D                 mov     [esp+2Ch+Str], eax ; Block
.text:0040D150                 call    free
.text:0040D155                 call    _errno
.text:0040D15A                 mov     [eax], ebx
.text:0040D15C                 xor     eax, eax
.text:0040D15E                 jmp     short loc_40D145
.text:0040D160 ; ---------------------------------------------------------------------------
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: sub_40D020+89↑j
.text:0040D160                                         ; sub_40D020+A5↑j
.text:0040D160                 call    sub_40C060
.text:0040D160 sub_40D020      endp
.text:0040D160
.text:0040D160 ; ---------------------------------------------------------------------------
.text:0040D165                 align 10h
.text:0040D170
.text:0040D170 ; =============== S U B R O U T I N E =======================================
.text:0040D170
.text:0040D170
.text:0040D170 sub_40D170      proc near               ; CODE XREF: sub_406A40+A7A↑p
.text:0040D170                                         ; sub_415B80+45↓p
.text:0040D170
.text:0040D170 var_4           = dword ptr -4
.text:0040D170 arg_0           = dword ptr  4
.text:0040D170
.text:0040D170                 sub     esp, 0Ch
.text:0040D173                 mov     [esp+0Ch+var_4], ebx
.text:0040D177                 mov     ebx, [esp+0Ch+arg_0]
.text:0040D17B                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040D181                 mov     dword ptr [ebx+4], 0
.text:0040D188                 call    sub_40EEA0
.text:0040D18D                 mov     [ebx+4], eax
.text:0040D190                 test    eax, eax
.text:0040D192                 mov     ebx, [esp+0Ch+var_4]
.text:0040D196                 setnz   dl
.text:0040D199                 add     esp, 0Ch
.text:0040D19C                 movzx   eax, dl
.text:0040D19F                 dec     eax
.text:0040D1A0                 retn
.text:0040D1A0 sub_40D170      endp
.text:0040D1A0
.text:0040D1A1 ; ---------------------------------------------------------------------------
.text:0040D1A1                 jmp     short sub_40D1B0
.text:0040D1A1 ; ---------------------------------------------------------------------------
.text:0040D1A3                 align 10h
.text:0040D1B0
.text:0040D1B0 ; =============== S U B R O U T I N E =======================================
.text:0040D1B0
.text:0040D1B0
.text:0040D1B0 sub_40D1B0      proc near               ; CODE XREF: sub_4078E0+255↑p
.text:0040D1B0                                         ; .text:0040D1A1↑j ...
.text:0040D1B0
.text:0040D1B0 arg_0           = dword ptr  4
.text:0040D1B0
.text:0040D1B0                 sub     esp, 0Ch
.text:0040D1B3                 mov     eax, [esp+0Ch+arg_0]
.text:0040D1B7                 mov     ecx, [eax]
.text:0040D1B9                 test    ecx, ecx
.text:0040D1BB                 jns     short loc_40D1CC
.text:0040D1BD                 mov     edx, [eax+4]
.text:0040D1C0                 mov     [esp+0Ch+arg_0], edx ; LPCSTR
.text:0040D1C4                 add     esp, 0Ch
.text:0040D1C7                 jmp     sub_40E810
.text:0040D1CC ; ---------------------------------------------------------------------------
.text:0040D1CC
.text:0040D1CC loc_40D1CC:                             ; CODE XREF: sub_40D1B0+B↑j
.text:0040D1CC                 call    abort
.text:0040D1CC sub_40D1B0      endp
.text:0040D1CC
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D1                 jmp     short sub_40D1E0
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D3                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0
.text:0040D1E0 ; int __cdecl sub_40D1E0(void *Block)
.text:0040D1E0 sub_40D1E0      proc near               ; CODE XREF: sub_406340+109↑p
.text:0040D1E0                                         ; .text:0040D1D1↑j ...
.text:0040D1E0
.text:0040D1E0 FileHandle      = dword ptr -0Ch
.text:0040D1E0 var_4           = dword ptr -4
.text:0040D1E0 Block           = dword ptr  4
.text:0040D1E0
.text:0040D1E0                 sub     esp, 0Ch
.text:0040D1E3                 mov     [esp+0Ch+var_4], ebx
.text:0040D1E7                 mov     ebx, [esp+0Ch+Block]
.text:0040D1EB                 mov     eax, [ebx]
.text:0040D1ED                 test    eax, eax
.text:0040D1EF                 js      short loc_40D1F9
.text:0040D1F1                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:0040D1F4                 call    _close
.text:0040D1F9
.text:0040D1F9 loc_40D1F9:                             ; CODE XREF: sub_40D1E0+F↑j
.text:0040D1F9                 mov     eax, [ebx+4]
.text:0040D1FC                 test    eax, eax
.text:0040D1FE                 jnz     short loc_40D208
.text:0040D200                 mov     ebx, [esp+0Ch+var_4]
.text:0040D204                 add     esp, 0Ch
.text:0040D207                 retn
.text:0040D208 ; ---------------------------------------------------------------------------
.text:0040D208
.text:0040D208 loc_40D208:                             ; CODE XREF: sub_40D1E0+1E↑j
.text:0040D208                 mov     [esp+0Ch+Block], eax ; Block
.text:0040D20C                 mov     ebx, [esp+0Ch+var_4]
.text:0040D210                 add     esp, 0Ch
.text:0040D213                 jmp     free
.text:0040D213 sub_40D1E0      endp
.text:0040D213
.text:0040D213 ; ---------------------------------------------------------------------------
.text:0040D218                 align 10h
.text:0040D220 aLiteral        db 'literal',0          ; DATA XREF: .text:0040D260↓o
.text:0040D228 aShell          db 'shell',0            ; DATA XREF: .text:0040D264↓o
.text:0040D22E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:0040D268↓o
.text:0040D23B aC              db 'c',0                ; DATA XREF: .text:0040D26C↓o
.text:0040D23D aEscape         db 'escape',0           ; DATA XREF: .text:0040D270↓o
.text:0040D244 aLocale         db 'locale',0           ; DATA XREF: .text:0040D274↓o
.text:0040D24B aClocale        db 'clocale',0          ; DATA XREF: .text:0040D278↓o
.text:0040D253                 align 10h
.text:0040D260                 dd offset aLiteral      ; "literal"
.text:0040D264                 dd offset aShell        ; "shell"
.text:0040D268                 dd offset aShellAlways  ; "shell-always"
.text:0040D26C                 dd offset aC            ; "c"
.text:0040D270                 dd offset aEscape       ; "escape"
.text:0040D274                 dd offset aLocale       ; "locale"
.text:0040D278                 dd offset aClocale      ; "clocale"
.text:0040D27C                 dd 2 dup(0)
.text:0040D284                 dd 1, 2, 3, 4, 5, 6
.text:0040D29C asc_40D29C:                             ; DATA XREF: sub_40D2B0+7E↓o
.text:0040D29C                                         ; sub_40D2B0+A39↓o ...
.text:0040D29C                 text "UTF-16LE", '"',27h,'`'
.text:0040D2A2                 align 10h
.text:0040D2B0
.text:0040D2B0 ; =============== S U B R O U T I N E =======================================
.text:0040D2B0
.text:0040D2B0
.text:0040D2B0 ; int __cdecl sub_40D2B0(int, int, char *Str, int, int, int)
.text:0040D2B0 sub_40D2B0      proc near               ; CODE XREF: sub_40D2B0+43A↓p
.text:0040D2B0                                         ; .text:0040DE73↓p ...
.text:0040D2B0
.text:0040D2B0 C               = dword ptr -4Ch
.text:0040D2B0 Type            = dword ptr -48h
.text:0040D2B0 SizeInBytes     = dword ptr -44h
.text:0040D2B0 State           = dword ptr -40h
.text:0040D2B0 var_3C          = dword ptr -3Ch
.text:0040D2B0 var_38          = dword ptr -38h
.text:0040D2B0 var_34          = dword ptr -34h
.text:0040D2B0 var_30          = dword ptr -30h
.text:0040D2B0 var_29          = byte ptr -29h
.text:0040D2B0 var_28          = dword ptr -28h
.text:0040D2B0 var_22          = byte ptr -22h
.text:0040D2B0 var_21          = byte ptr -21h
.text:0040D2B0 var_20          = dword ptr -20h
.text:0040D2B0 var_1C          = dword ptr -1Ch
.text:0040D2B0 var_18          = mbstate_t ptr -18h
.text:0040D2B0 arg_0           = dword ptr  4
.text:0040D2B0 arg_4           = dword ptr  8
.text:0040D2B0 Str             = dword ptr  0Ch
.text:0040D2B0 arg_C           = dword ptr  10h
.text:0040D2B0 arg_10          = dword ptr  14h
.text:0040D2B0 arg_14          = dword ptr  18h
.text:0040D2B0
.text:0040D2B0                 push    ebp
.text:0040D2B1                 push    edi
.text:0040D2B2                 push    esi
.text:0040D2B3                 push    ebx
.text:0040D2B4                 sub     esp, 3Ch
.text:0040D2B7                 mov     edx, ds:__mb_cur_max
.text:0040D2BD                 mov     [esp+4Ch+var_34], 0
.text:0040D2C5                 mov     [esp+4Ch+var_1C], 0
.text:0040D2CD                 cmp     dword ptr [edx], 1
.text:0040D2D0                 mov     [esp+4Ch+var_20], 0
.text:0040D2D8                 mov     [esp+4Ch+var_21], 0
.text:0040D2DD                 setz    [esp+4Ch+var_22]
.text:0040D2E2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040D2E7                 ja      short def_40D2ED ; jumptable 0040D2ED default case, cases 0,1
.text:0040D2E9                 mov     edx, [esp+4Ch+arg_10]
.text:0040D2ED                 jmp     ds:jpt_40D2ED[edx*4] ; switch jump
.text:0040D2ED ; ---------------------------------------------------------------------------
.text:0040D2F4 jpt_40D2ED      dd offset def_40D2ED    ; DATA XREF: sub_40D2B0+3D↑r
.text:0040D2F4                 dd offset def_40D2ED    ; jump table for switch statement
.text:0040D2F4                 dd offset loc_40DC35
.text:0040D2F4                 dd offset loc_40D310
.text:0040D2F4                 dd offset loc_40DC5B
.text:0040D2F4                 dd offset loc_40DC65
.text:0040D2F4                 dd offset loc_40DC65
.text:0040D310 ; ---------------------------------------------------------------------------
.text:0040D310
.text:0040D310 loc_40D310:                             ; CODE XREF: sub_40D2B0+3D↑j
.text:0040D310                                         ; DATA XREF: sub_40D2B0:jpt_40D2ED↑o
.text:0040D310                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040D2ED case 3
.text:0040D314                 cmp     [esp+4Ch+var_34], eax
.text:0040D318                 jnb     short loc_40D321
.text:0040D31A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040D31E                 mov     byte ptr [ebx], 22h ; '"'
.text:0040D321
.text:0040D321 loc_40D321:                             ; CODE XREF: sub_40D2B0+68↑j
.text:0040D321                 mov     [esp+4Ch+var_34], 1
.text:0040D329                 mov     [esp+4Ch+var_21], 1
.text:0040D32E                 mov     [esp+4Ch+var_1C], offset asc_40D29C ; "\"'`"
.text:0040D336
.text:0040D336 loc_40D336:                             ; CODE XREF: sub_40D2B0+9A6↓j
.text:0040D336                 mov     [esp+4Ch+var_20], 1
.text:0040D33E
.text:0040D33E def_40D2ED:                             ; CODE XREF: sub_40D2B0+37↑j
.text:0040D33E                                         ; sub_40D2B0+3D↑j ...
.text:0040D33E                 xor     ebp, ebp        ; jumptable 0040D2ED default case, cases 0,1
.text:0040D340
.text:0040D340 loc_40D340:                             ; CODE XREF: sub_40D2B0+3DB↓j
.text:0040D340                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040D345                 jz      loc_40DC27
.text:0040D34B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040D34F
.text:0040D34F loc_40D34F:                             ; CODE XREF: sub_40D2B0+980↓j
.text:0040D34F                 jz      loc_40DBBE
.text:0040D355                 cmp     [esp+4Ch+var_21], 0
.text:0040D35A                 jz      short loc_40D3A0
.text:0040D35C                 mov     esi, [esp+4Ch+var_20]
.text:0040D360                 test    esi, esi
.text:0040D362                 jz      short loc_40D3A0
.text:0040D364                 mov     ecx, [esp+4Ch+var_20]
.text:0040D368                 lea     edi, [ecx+ebp]
.text:0040D36B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040D36F                 ja      short loc_40D3A0
.text:0040D371                 cld
.text:0040D372                 mov     ebx, [esp+4Ch+Str]
.text:0040D376                 mov     edi, [esp+4Ch+var_1C]
.text:0040D37A                 add     ebx, ebp
.text:0040D37C                 mov     esi, ebx
.text:0040D37E                 cmp     ecx, ecx
.text:0040D380                 repe cmpsb
.text:0040D382                 jnz     short loc_40D3A0
.text:0040D384                 mov     edx, [esp+4Ch+arg_4]
.text:0040D388                 cmp     [esp+4Ch+var_34], edx
.text:0040D38C                 jnb     short loc_40D39A
.text:0040D38E                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D392                 mov     eax, [esp+4Ch+var_34]
.text:0040D396                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040D39A
.text:0040D39A loc_40D39A:                             ; CODE XREF: sub_40D2B0+DC↑j
.text:0040D39A                 inc     [esp+4Ch+var_34]
.text:0040D39E                 mov     esi, esi
.text:0040D3A0
.text:0040D3A0 loc_40D3A0:                             ; CODE XREF: sub_40D2B0+AA↑j
.text:0040D3A0                                         ; sub_40D2B0+B2↑j ...
.text:0040D3A0                 mov     edi, [esp+4Ch+Str]
.text:0040D3A4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040D3A9                 movzx   eax, bl
.text:0040D3AC                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040D3AF                 ja      def_40D3B5      ; jumptable 0040D3B5 default case, cases 1-6,14-31,64
.text:0040D3B5                 jmp     ds:jpt_40D3B5[eax*4] ; switch jump
.text:0040D3B5 ; ---------------------------------------------------------------------------
.text:0040D3BC jpt_40D3B5      dd offset loc_40D5B8, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                                         ; DATA XREF: sub_40D2B0+105↑r
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5 ; jump table for switch statement
.text:0040D3BC                 dd offset def_40D3B5, offset loc_40D690, offset loc_40D6AE
.text:0040D3BC                 dd offset loc_40D6B2, offset loc_40D6F7, offset loc_40D6FB
.text:0040D3BC                 dd offset loc_40D6FF, offset loc_40D703, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset def_40D3B5
.text:0040D3BC                 dd offset def_40D3B5, offset def_40D3B5, offset loc_40DB88
.text:0040D3BC                 dd offset loc_40DB88, offset loc_40DB88, offset loc_40DBAA
.text:0040D3BC                 dd offset loc_40DB88, offset def_40D7B2, offset loc_40DB88
.text:0040D3BC                 dd offset loc_40D707, offset loc_40DB88, offset loc_40DB88
.text:0040D3BC                 dd offset loc_40DB88, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset loc_40DB88
.text:0040D3BC                 dd offset loc_40DB88, offset loc_40DB88, offset loc_40DB88
.text:0040D3BC                 dd offset loc_40D76C, offset def_40D3B5, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset loc_40DB88, offset loc_40DB81
.text:0040D3BC                 dd offset def_40D7B2, offset loc_40DB88, offset def_40D7B2
.text:0040D3BC                 dd offset loc_40DB88, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset def_40D7B2, offset def_40D7B2, offset def_40D7B2
.text:0040D3BC                 dd offset loc_40DB98, offset loc_40DB88, offset loc_40DB98
.text:0040D3BC                 dd offset loc_40DBAA
.text:0040D5B8 ; ---------------------------------------------------------------------------
.text:0040D5B8
.text:0040D5B8 loc_40D5B8:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D5B8                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D5B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040D3B5 case 0
.text:0040D5BD                 lea     eax, [ebp+1]
.text:0040D5C0                 jz      loc_40D670
.text:0040D5C6                 mov     esi, [esp+4Ch+arg_4]
.text:0040D5CA                 cmp     [esp+4Ch+var_34], esi
.text:0040D5CE                 jnb     short loc_40D5DC
.text:0040D5D0                 mov     eax, [esp+4Ch+arg_0]
.text:0040D5D4                 mov     ebx, [esp+4Ch+var_34]
.text:0040D5D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040D5DC
.text:0040D5DC loc_40D5DC:                             ; CODE XREF: sub_40D2B0+31E↑j
.text:0040D5DC                 inc     [esp+4Ch+var_34]
.text:0040D5E0                 mov     edx, [esp+4Ch+arg_4]
.text:0040D5E4                 cmp     [esp+4Ch+var_34], edx
.text:0040D5E8                 jnb     short loc_40D5F6
.text:0040D5EA                 mov     edi, [esp+4Ch+arg_0]
.text:0040D5EE                 mov     ecx, [esp+4Ch+var_34]
.text:0040D5F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040D5F6
.text:0040D5F6 loc_40D5F6:                             ; CODE XREF: sub_40D2B0+338↑j
.text:0040D5F6                 inc     [esp+4Ch+var_34]
.text:0040D5FA                 mov     esi, [esp+4Ch+arg_4]
.text:0040D5FE                 cmp     [esp+4Ch+var_34], esi
.text:0040D602                 jnb     short loc_40D610
.text:0040D604                 mov     ebx, [esp+4Ch+arg_0]
.text:0040D608                 mov     eax, [esp+4Ch+var_34]
.text:0040D60C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: sub_40D2B0+352↑j
.text:0040D610                 inc     [esp+4Ch+var_34]
.text:0040D614                 mov     bl, 30h ; '0'
.text:0040D616                 lea     esi, [esi+0]
.text:0040D619                 lea     edi, [edi+0]
.text:0040D620
.text:0040D620 def_40D7B2:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D620                                         ; sub_40D2B0+463↓j ...
.text:0040D620                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D620                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D625                 lea     eax, [ebp+1]
.text:0040D628                 jz      short loc_40D670
.text:0040D62A                 mov     cl, bl
.text:0040D62C                 mov     edi, [esp+4Ch+arg_14]
.text:0040D630                 mov     esi, 1
.text:0040D635                 shr     cl, 5
.text:0040D638                 movzx   edx, cl
.text:0040D63B                 mov     ecx, ebx
.text:0040D63D                 and     ecx, 1Fh
.text:0040D640                 shl     esi, cl
.text:0040D642                 test    [edi+edx*4+4], esi
.text:0040D646                 jz      short loc_40D662
.text:0040D648
.text:0040D648 loc_40D648:                             ; CODE XREF: sub_40D2B0+3FC↓j
.text:0040D648                 mov     edx, [esp+4Ch+arg_4]
.text:0040D64C                 cmp     [esp+4Ch+var_34], edx
.text:0040D650                 jnb     short loc_40D65E
.text:0040D652                 mov     edi, [esp+4Ch+arg_0]
.text:0040D656                 mov     esi, [esp+4Ch+var_34]
.text:0040D65A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040D65E
.text:0040D65E loc_40D65E:                             ; CODE XREF: sub_40D2B0+3A0↑j
.text:0040D65E                 inc     [esp+4Ch+var_34]
.text:0040D662
.text:0040D662 loc_40D662:                             ; CODE XREF: sub_40D2B0+396↑j
.text:0040D662                 lea     eax, [ebp+1]
.text:0040D665                 lea     esi, [esi+0]
.text:0040D669                 lea     edi, [edi+0]
.text:0040D670
.text:0040D670 loc_40D670:                             ; CODE XREF: sub_40D2B0+310↑j
.text:0040D670                                         ; sub_40D2B0+378↑j ...
.text:0040D670                 mov     ebp, [esp+4Ch+arg_4]
.text:0040D674                 cmp     [esp+4Ch+var_34], ebp
.text:0040D678                 jnb     short loc_40D685
.text:0040D67A                 mov     edx, [esp+4Ch+arg_0]
.text:0040D67E                 mov     ecx, [esp+4Ch+var_34]
.text:0040D682                 mov     [ecx+edx], bl
.text:0040D685
.text:0040D685 loc_40D685:                             ; CODE XREF: sub_40D2B0+3C8↑j
.text:0040D685                 inc     [esp+4Ch+var_34]
.text:0040D689                 mov     ebp, eax
.text:0040D68B                 jmp     loc_40D340
.text:0040D690 ; ---------------------------------------------------------------------------
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D690                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D690                 mov     dl, 61h ; 'a'   ; jumptable 0040D3B5 case 7
.text:0040D692                 lea     esi, [esi+0]
.text:0040D699                 lea     edi, [edi+0]
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: sub_40D2B0+400↓j
.text:0040D6A0                                         ; sub_40D2B0+409↓j ...
.text:0040D6A0                 cmp     [esp+4Ch+var_21], 0
.text:0040D6A5                 lea     eax, [ebp+1]
.text:0040D6A8                 jz      short loc_40D670
.text:0040D6AA                 mov     bl, dl
.text:0040D6AC                 jmp     short loc_40D648
.text:0040D6AE ; ---------------------------------------------------------------------------
.text:0040D6AE
.text:0040D6AE loc_40D6AE:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D6AE                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D6AE                 mov     dl, 62h ; 'b'   ; jumptable 0040D3B5 case 8
.text:0040D6B0                 jmp     short loc_40D6A0
.text:0040D6B2 ; ---------------------------------------------------------------------------
.text:0040D6B2
.text:0040D6B2 loc_40D6B2:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D6B2                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D6B2                 mov     dl, 74h ; 't'   ; jumptable 0040D3B5 case 9
.text:0040D6B4
.text:0040D6B4 loc_40D6B4:                             ; CODE XREF: sub_40D2B0+449↓j
.text:0040D6B4                                         ; sub_40D2B0+455↓j ...
.text:0040D6B4                 cmp     [esp+4Ch+arg_10], 1
.text:0040D6B9                 jnz     short loc_40D6A0
.text:0040D6BB
.text:0040D6BB loc_40D6BB:                             ; CODE XREF: sub_40D2B0+45C↓j
.text:0040D6BB                                         ; sub_40D2B0+4C1↓j ...
.text:0040D6BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040DA82 cases 91,92,94,96,124
.text:0040D6C3                 mov     eax, [esp+4Ch+arg_14]
.text:0040D6C7                 mov     edx, [esp+4Ch+arg_C]
.text:0040D6CB                 mov     ecx, [esp+4Ch+Str]
.text:0040D6CF                 mov     ebx, [esp+4Ch+arg_4]
.text:0040D6D3                 mov     [esp+4Ch+var_38], eax ; int
.text:0040D6D7                 mov     ebp, [esp+4Ch+arg_0]
.text:0040D6DB                 mov     [esp+4Ch+State], edx ; int
.text:0040D6DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040D6E3                 mov     [esp+4Ch+Type], ebx ; int
.text:0040D6E7                 mov     [esp+4Ch+C], ebp ; int
.text:0040D6EA                 call    sub_40D2B0
.text:0040D6EF
.text:0040D6EF loc_40D6EF:                             ; CODE XREF: sub_40D2B0+972↓j
.text:0040D6EF                 add     esp, 3Ch
.text:0040D6F2                 pop     ebx
.text:0040D6F3                 pop     esi
.text:0040D6F4                 pop     edi
.text:0040D6F5                 pop     ebp
.text:0040D6F6                 retn
.text:0040D6F7 ; ---------------------------------------------------------------------------
.text:0040D6F7
.text:0040D6F7 loc_40D6F7:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D6F7                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D6F7                 mov     dl, 6Eh ; 'n'   ; jumptable 0040D3B5 case 10
.text:0040D6F9                 jmp     short loc_40D6B4
.text:0040D6FB ; ---------------------------------------------------------------------------
.text:0040D6FB
.text:0040D6FB loc_40D6FB:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D6FB                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D6FB                 mov     dl, 76h ; 'v'   ; jumptable 0040D3B5 case 11
.text:0040D6FD                 jmp     short loc_40D6A0
.text:0040D6FF ; ---------------------------------------------------------------------------
.text:0040D6FF
.text:0040D6FF loc_40D6FF:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D6FF                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D6FF                 mov     dl, 66h ; 'f'   ; jumptable 0040D3B5 case 12
.text:0040D701                 jmp     short loc_40D6A0
.text:0040D703 ; ---------------------------------------------------------------------------
.text:0040D703
.text:0040D703 loc_40D703:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D703                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D703                 mov     dl, 72h ; 'r'   ; jumptable 0040D3B5 case 13
.text:0040D705                 jmp     short loc_40D6B4
.text:0040D707 ; ---------------------------------------------------------------------------
.text:0040D707
.text:0040D707 loc_40D707:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D707                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D707                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040D3B5 case 39
.text:0040D70C                 jz      short loc_40D6BB ; jumptable 0040DA82 cases 91,92,94,96,124
.text:0040D70E                 cmp     [esp+4Ch+arg_10], 2
.text:0040D713                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D713                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D719                 mov     edx, [esp+4Ch+arg_4]
.text:0040D71D                 cmp     [esp+4Ch+var_34], edx
.text:0040D721                 jnb     short loc_40D72F
.text:0040D723                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D727                 mov     edi, [esp+4Ch+var_34]
.text:0040D72B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040D72F
.text:0040D72F loc_40D72F:                             ; CODE XREF: sub_40D2B0+471↑j
.text:0040D72F                 inc     [esp+4Ch+var_34]
.text:0040D733                 mov     eax, [esp+4Ch+arg_4]
.text:0040D737                 cmp     [esp+4Ch+var_34], eax
.text:0040D73B                 jnb     short loc_40D749
.text:0040D73D                 mov     esi, [esp+4Ch+arg_0]
.text:0040D741                 mov     edx, [esp+4Ch+var_34]
.text:0040D745                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040D749
.text:0040D749 loc_40D749:                             ; CODE XREF: sub_40D2B0+48B↑j
.text:0040D749                 inc     [esp+4Ch+var_34]
.text:0040D74D                 mov     edi, [esp+4Ch+arg_4]
.text:0040D751                 cmp     [esp+4Ch+var_34], edi
.text:0040D755                 jnb     short loc_40D763
.text:0040D757                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D75B                 mov     eax, [esp+4Ch+var_34]
.text:0040D75F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040D763
.text:0040D763 loc_40D763:                             ; CODE XREF: sub_40D2B0+4A5↑j
.text:0040D763                                         ; sub_40D2B0+5C4↓j ...
.text:0040D763                 inc     [esp+4Ch+var_34]
.text:0040D767                 jmp     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D767                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D76C ; ---------------------------------------------------------------------------
.text:0040D76C
.text:0040D76C loc_40D76C:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040D76C                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040D76C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040D3B5 case 63
.text:0040D771                 jz      loc_40D6BB      ; jumptable 0040DA82 cases 91,92,94,96,124
.text:0040D777                 cmp     [esp+4Ch+arg_10], 3
.text:0040D77C                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D77C                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D782                 lea     edx, [ebp+2]
.text:0040D785                 cmp     edx, [esp+4Ch+arg_C]
.text:0040D789                 jnb     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D789                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D78F                 mov     esi, [esp+4Ch+Str]
.text:0040D793                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040D798                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D798                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D79E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040D7A3                 movsx   eax, cl
.text:0040D7A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040D7A9                 cmp     eax, 1Dh
.text:0040D7AC                 ja      def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D7AC                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D7B2                 jmp     ds:jpt_40D7B2[eax*4] ; switch jump
.text:0040D7B2 ; ---------------------------------------------------------------------------
.text:0040D7B9                 align 4
.text:0040D7BC jpt_40D7B2      dd offset loc_40D834    ; DATA XREF: sub_40D2B0+502↑r
.text:0040D7BC                 dd offset def_40D7B2    ; jump table for switch statement
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset def_40D7B2
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset loc_40D834
.text:0040D7BC                 dd offset loc_40D834
.text:0040D834 ; ---------------------------------------------------------------------------
.text:0040D834
.text:0040D834 loc_40D834:                             ; CODE XREF: sub_40D2B0+502↑j
.text:0040D834                                         ; DATA XREF: sub_40D2B0:jpt_40D7B2↑o
.text:0040D834                 mov     ebp, edx        ; jumptable 0040D7B2 cases 33,39-41,45,47,60-62
.text:0040D836                 mov     bl, cl
.text:0040D838                 mov     edx, [esp+4Ch+arg_4]
.text:0040D83C                 cmp     [esp+4Ch+var_34], edx
.text:0040D840                 jnb     short loc_40D84E
.text:0040D842                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D846                 mov     edi, [esp+4Ch+var_34]
.text:0040D84A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040D84E
.text:0040D84E loc_40D84E:                             ; CODE XREF: sub_40D2B0+590↑j
.text:0040D84E                 inc     [esp+4Ch+var_34]
.text:0040D852                 mov     eax, [esp+4Ch+arg_4]
.text:0040D856                 cmp     [esp+4Ch+var_34], eax
.text:0040D85A                 jnb     short loc_40D868
.text:0040D85C                 mov     edx, [esp+4Ch+arg_0]
.text:0040D860                 mov     esi, [esp+4Ch+var_34]
.text:0040D864                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040D868
.text:0040D868 loc_40D868:                             ; CODE XREF: sub_40D2B0+5AA↑j
.text:0040D868                 inc     [esp+4Ch+var_34]
.text:0040D86C                 mov     edi, [esp+4Ch+arg_4]
.text:0040D870                 cmp     [esp+4Ch+var_34], edi
.text:0040D874                 jnb     loc_40D763
.text:0040D87A                 mov     eax, [esp+4Ch+arg_0]
.text:0040D87E                 mov     ecx, [esp+4Ch+var_34]
.text:0040D882                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040D886                 jmp     loc_40D763
.text:0040D886 ; ---------------------------------------------------------------------------
.text:0040D88B                 align 10h
.text:0040D890
.text:0040D890 def_40D3B5:                             ; CODE XREF: sub_40D2B0+FF↑j
.text:0040D890                                         ; sub_40D2B0+105↑j
.text:0040D890                                         ; DATA XREF: ...
.text:0040D890                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040D3B5 default case, cases 1-6,14-31,64
.text:0040D895                 jz      loc_40D9C0
.text:0040D89B                 mov     [esp+4Ch+var_28], 1
.text:0040D8A3                 mov     esi, ds:__mb_cur_max
.text:0040D8A9                 movzx   edx, bl
.text:0040D8AC                 cmp     dword ptr [esi], 1
.text:0040D8AF                 jz      loc_40D9A4
.text:0040D8B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040D8BD                 mov     [esp+4Ch+C], edx ; C
.text:0040D8C0                 call    _isctype
.text:0040D8C5
.text:0040D8C5 loc_40D8C5:                             ; CODE XREF: sub_40D2B0+705↓j
.text:0040D8C5                 test    eax, eax
.text:0040D8C7                 setnz   [esp+4Ch+var_29]
.text:0040D8CC
.text:0040D8CC loc_40D8CC:                             ; CODE XREF: sub_40D2B0+7A5↓j
.text:0040D8CC                 cmp     [esp+4Ch+var_21], 0
.text:0040D8D1                 lea     eax, [ebp+1]
.text:0040D8D4                 jz      loc_40D670
.text:0040D8DA                 cmp     [esp+4Ch+var_29], 0
.text:0040D8DF                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040D8DF                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040D8E5
.text:0040D8E5 loc_40D8E5:                             ; CODE XREF: sub_40D2B0+7AB↓j
.text:0040D8E5                 mov     eax, [esp+4Ch+var_28]
.text:0040D8E9                 lea     edx, [eax+ebp]
.text:0040D8EC                 lea     esi, [esi+0]
.text:0040D8F0
.text:0040D8F0 loc_40D8F0:                             ; CODE XREF: sub_40D2B0+6EF↓j
.text:0040D8F0                 cmp     [esp+4Ch+var_21], 0
.text:0040D8F5                 jz      short loc_40D970
.text:0040D8F7                 cmp     [esp+4Ch+var_29], 0
.text:0040D8FC                 jnz     short loc_40D970
.text:0040D8FE                 mov     edi, [esp+4Ch+arg_4]
.text:0040D902                 cmp     [esp+4Ch+var_34], edi
.text:0040D906                 jnb     short loc_40D914
.text:0040D908                 mov     esi, [esp+4Ch+arg_0]
.text:0040D90C                 mov     eax, [esp+4Ch+var_34]
.text:0040D910                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040D914
.text:0040D914 loc_40D914:                             ; CODE XREF: sub_40D2B0+656↑j
.text:0040D914                 inc     [esp+4Ch+var_34]
.text:0040D918                 mov     ecx, [esp+4Ch+arg_4]
.text:0040D91C                 cmp     [esp+4Ch+var_34], ecx
.text:0040D920                 jnb     short loc_40D935
.text:0040D922                 mov     cl, bl
.text:0040D924                 mov     esi, [esp+4Ch+arg_0]
.text:0040D928                 mov     edi, [esp+4Ch+var_34]
.text:0040D92C                 shr     cl, 6
.text:0040D92F                 add     cl, 30h ; '0'
.text:0040D932                 mov     [edi+esi], cl
.text:0040D935
.text:0040D935 loc_40D935:                             ; CODE XREF: sub_40D2B0+670↑j
.text:0040D935                 inc     [esp+4Ch+var_34]
.text:0040D939                 mov     edi, [esp+4Ch+arg_4]
.text:0040D93D                 cmp     [esp+4Ch+var_34], edi
.text:0040D941                 jnb     short loc_40D959
.text:0040D943                 mov     cl, bl
.text:0040D945                 mov     esi, [esp+4Ch+arg_0]
.text:0040D949                 shr     cl, 3
.text:0040D94C                 mov     edi, [esp+4Ch+var_34]
.text:0040D950                 and     cl, 7
.text:0040D953                 add     cl, 30h ; '0'
.text:0040D956                 mov     [edi+esi], cl
.text:0040D959
.text:0040D959 loc_40D959:                             ; CODE XREF: sub_40D2B0+691↑j
.text:0040D959                 inc     [esp+4Ch+var_34]
.text:0040D95D                 and     bl, 7
.text:0040D960                 add     bl, 30h ; '0'
.text:0040D963                 lea     esi, [esi+0]
.text:0040D969                 lea     edi, [edi+0]
.text:0040D970
.text:0040D970 loc_40D970:                             ; CODE XREF: sub_40D2B0+645↑j
.text:0040D970                                         ; sub_40D2B0+64C↑j
.text:0040D970                 lea     eax, [ebp+1]
.text:0040D973                 cmp     edx, eax
.text:0040D975                 jbe     loc_40D670
.text:0040D97B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040D97F                 cmp     [esp+4Ch+var_34], ebp
.text:0040D983                 jnb     short loc_40D990
.text:0040D985                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D989                 mov     edi, [esp+4Ch+var_34]
.text:0040D98D                 mov     [edi+ecx], bl
.text:0040D990
.text:0040D990 loc_40D990:                             ; CODE XREF: sub_40D2B0+6D3↑j
.text:0040D990                 inc     [esp+4Ch+var_34]
.text:0040D994                 mov     ebp, eax
.text:0040D996                 mov     eax, [esp+4Ch+Str]
.text:0040D99A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040D99F                 jmp     loc_40D8F0
.text:0040D9A4 ; ---------------------------------------------------------------------------
.text:0040D9A4
.text:0040D9A4 loc_40D9A4:                             ; CODE XREF: sub_40D2B0+5FF↑j
.text:0040D9A4                 mov     ecx, ds:_pctype
.text:0040D9AA                 mov     edi, [ecx]
.text:0040D9AC                 movzx   eax, word ptr [edi+edx*2]
.text:0040D9B0                 and     eax, 157h
.text:0040D9B5                 jmp     loc_40D8C5
.text:0040D9B5 ; ---------------------------------------------------------------------------
.text:0040D9BA                 align 10h
.text:0040D9C0
.text:0040D9C0 loc_40D9C0:                             ; CODE XREF: sub_40D2B0+5E5↑j
.text:0040D9C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040D9C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040D9CD                 mov     [esp+4Ch+var_28], 0
.text:0040D9D5                 mov     [esp+4Ch+var_29], 1
.text:0040D9DA                 jz      loc_40DB6C
.text:0040D9E0
.text:0040D9E0 loc_40D9E0:                             ; CODE XREF: sub_40D2B0+8CC↓j
.text:0040D9E0                 mov     ecx, [esp+4Ch+arg_C]
.text:0040D9E4                 lea     edx, [esp+4Ch+var_18]
.text:0040D9E8                 mov     edi, [esp+4Ch+Str]
.text:0040D9EC                 mov     [esp+4Ch+State], edx ; State
.text:0040D9F0                 lea     esi, [esp+4Ch+var_18._State]
.text:0040D9F4                 sub     ecx, ebp
.text:0040D9F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040D9FA                 add     edi, ebp
.text:0040D9FC                 mov     [esp+4Ch+var_30], edi
.text:0040DA00                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040DA04                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040DA07                 call    mbrtowc
.text:0040DA0C                 test    eax, eax
.text:0040DA0E                 mov     edi, eax
.text:0040DA10                 jz      short loc_40DA50
.text:0040DA12                 cmp     eax, 0FFFFFFFFh
.text:0040DA15                 jz      loc_40DB62
.text:0040DA1B                 cmp     eax, 0FFFFFFFEh
.text:0040DA1E                 jz      loc_40DB22
.text:0040DA24                 cmp     [esp+4Ch+arg_10], 1
.text:0040DA29                 jz      short loc_40DA60
.text:0040DA2B
.text:0040DA2B loc_40DA2B:                             ; CODE XREF: sub_40D2B0+7B9↓j
.text:0040DA2B                                         ; sub_40D2B0+86D↓j
.text:0040DA2B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040DA30                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040DA38                 mov     [esp+4Ch+C], ecx ; C
.text:0040DA3B                 call    iswctype
.text:0040DA40                 test    eax, eax
.text:0040DA42                 jnz     short loc_40DA49
.text:0040DA44                 mov     [esp+4Ch+var_29], 0
.text:0040DA49
.text:0040DA49 loc_40DA49:                             ; CODE XREF: sub_40D2B0+792↑j
.text:0040DA49                 mov     [esp+4Ch+var_28], edi
.text:0040DA4D                 lea     esi, [esi+0]
.text:0040DA50
.text:0040DA50 loc_40DA50:                             ; CODE XREF: sub_40D2B0+760↑j
.text:0040DA50                                         ; sub_40D2B0+87B↓j ...
.text:0040DA50                 cmp     [esp+4Ch+var_28], 1
.text:0040DA55                 jbe     loc_40D8CC
.text:0040DA5B                 jmp     loc_40D8E5
.text:0040DA60 ; ---------------------------------------------------------------------------
.text:0040DA60
.text:0040DA60 loc_40DA60:                             ; CODE XREF: sub_40D2B0+779↑j
.text:0040DA60                 cmp     [esp+4Ch+arg_10], eax
.text:0040DA64                 mov     edx, 1
.text:0040DA69                 jnb     short loc_40DA2B
.text:0040DA6B
.text:0040DA6B loc_40DA6B:                             ; CODE XREF: sub_40D2B0+867↓j
.text:0040DA6B                 mov     ecx, [esp+4Ch+Str]
.text:0040DA6F                 lea     esi, [edx+ebp]
.text:0040DA72                 movsx   eax, byte ptr [esi+ecx]
.text:0040DA76                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040DA79                 cmp     eax, 21h
.text:0040DA7C                 ja      def_40DA82      ; jumptable 0040DA82 default case, cases 93,95,97-123
.text:0040DA82                 jmp     ds:jpt_40DA82[eax*4] ; switch jump
.text:0040DA82 ; ---------------------------------------------------------------------------
.text:0040DA89                 align 4
.text:0040DA8C jpt_40DA82      dd offset loc_40D6BB    ; DATA XREF: sub_40D2B0+7D2↑r
.text:0040DA8C                 dd offset loc_40D6BB    ; jump table for switch statement
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset loc_40D6BB
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset loc_40D6BB
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset def_40DA82
.text:0040DA8C                 dd offset loc_40D6BB
.text:0040DB14 ; ---------------------------------------------------------------------------
.text:0040DB14
.text:0040DB14 def_40DA82:                             ; CODE XREF: sub_40D2B0+7CC↑j
.text:0040DB14                                         ; sub_40D2B0+7D2↑j
.text:0040DB14                                         ; DATA XREF: ...
.text:0040DB14                 inc     edx             ; jumptable 0040DA82 default case, cases 93,95,97-123
.text:0040DB15                 cmp     edx, edi
.text:0040DB17                 jb      loc_40DA6B
.text:0040DB1D                 jmp     loc_40DA2B
.text:0040DB22 ; ---------------------------------------------------------------------------
.text:0040DB22
.text:0040DB22 loc_40DB22:                             ; CODE XREF: sub_40D2B0+76E↑j
.text:0040DB22                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040DB26                 mov     [esp+4Ch+var_29], 0
.text:0040DB2B                 jnb     loc_40DA50
.text:0040DB31                 mov     eax, [esp+4Ch+var_30]
.text:0040DB35                 cmp     byte ptr [eax], 0
.text:0040DB38                 jz      loc_40DA50
.text:0040DB3E
.text:0040DB3E loc_40DB3E:                             ; CODE XREF: sub_40D2B0+8AB↓j
.text:0040DB3E                 inc     [esp+4Ch+var_28]
.text:0040DB42                 mov     esi, [esp+4Ch+var_28]
.text:0040DB46                 lea     eax, [esi+ebp]
.text:0040DB49                 cmp     eax, [esp+4Ch+arg_C]
.text:0040DB4D                 jnb     loc_40DA50
.text:0040DB53                 mov     edi, [esp+4Ch+Str]
.text:0040DB57                 cmp     byte ptr [eax+edi], 0
.text:0040DB5B                 jnz     short loc_40DB3E
.text:0040DB5D                 jmp     loc_40DA50
.text:0040DB62 ; ---------------------------------------------------------------------------
.text:0040DB62
.text:0040DB62 loc_40DB62:                             ; CODE XREF: sub_40D2B0+765↑j
.text:0040DB62                 mov     [esp+4Ch+var_29], 0
.text:0040DB67                 jmp     loc_40DA50
.text:0040DB6C ; ---------------------------------------------------------------------------
.text:0040DB6C
.text:0040DB6C loc_40DB6C:                             ; CODE XREF: sub_40D2B0+72A↑j
.text:0040DB6C                 mov     edx, [esp+4Ch+Str]
.text:0040DB70                 mov     [esp+4Ch+C], edx ; Str
.text:0040DB73                 call    strlen
.text:0040DB78                 mov     [esp+4Ch+arg_C], eax
.text:0040DB7C                 jmp     loc_40D9E0
.text:0040DB81 ; ---------------------------------------------------------------------------
.text:0040DB81
.text:0040DB81 loc_40DB81:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040DB81                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040DB81                 mov     dl, bl          ; jumptable 0040D3B5 case 92
.text:0040DB83                 jmp     loc_40D6B4
.text:0040DB88 ; ---------------------------------------------------------------------------
.text:0040DB88
.text:0040DB88 loc_40DB88:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040DB88                                         ; sub_40D2B0+902↓j
.text:0040DB88                                         ; DATA XREF: ...
.text:0040DB88                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040D3B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040DB8D                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040DB8D                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040DB93                 jmp     loc_40D6BB      ; jumptable 0040DA82 cases 91,92,94,96,124
.text:0040DB98 ; ---------------------------------------------------------------------------
.text:0040DB98
.text:0040DB98 loc_40DB98:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040DB98                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040DB98                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040D3B5 cases 123,125
.text:0040DB9D                 jz      short loc_40DBB4
.text:0040DB9F                 cmp     [esp+4Ch+arg_C], 1
.text:0040DBA4
.text:0040DBA4 loc_40DBA4:                             ; CODE XREF: sub_40D2B0+90C↓j
.text:0040DBA4                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040DBA4                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040DBAA
.text:0040DBAA loc_40DBAA:                             ; CODE XREF: sub_40D2B0+105↑j
.text:0040DBAA                                         ; DATA XREF: sub_40D2B0:jpt_40D3B5↑o
.text:0040DBAA                 test    ebp, ebp        ; jumptable 0040D3B5 cases 35,126
.text:0040DBAC                 jnz     def_40D7B2      ; jumptable 0040D3B5 cases 37,43-58,65-90,93,95,97-122
.text:0040DBAC                                         ; jumptable 0040D7B2 default case, cases 34-38,42-44,46,48-59
.text:0040DBB2                 jmp     short loc_40DB88 ; jumptable 0040D3B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040DBB4 ; ---------------------------------------------------------------------------
.text:0040DBB4
.text:0040DBB4 loc_40DBB4:                             ; CODE XREF: sub_40D2B0+8ED↑j
.text:0040DBB4                 mov     esi, [esp+4Ch+Str]
.text:0040DBB8                 cmp     byte ptr [esi+1], 0
.text:0040DBBC                 jmp     short loc_40DBA4
.text:0040DBBE ; ---------------------------------------------------------------------------
.text:0040DBBE
.text:0040DBBE loc_40DBBE:                             ; CODE XREF: sub_40D2B0:loc_40D34F↑j
.text:0040DBBE                 test    ebp, ebp
.text:0040DBC0                 jnz     short loc_40DBCD
.text:0040DBC2                 cmp     [esp+4Ch+arg_10], 1
.text:0040DBC7                 jz      loc_40D6BB      ; jumptable 0040DA82 cases 91,92,94,96,124
.text:0040DBCD
.text:0040DBCD loc_40DBCD:                             ; CODE XREF: sub_40D2B0+910↑j
.text:0040DBCD                 mov     esi, [esp+4Ch+var_1C]
.text:0040DBD1                 test    esi, esi
.text:0040DBD3                 jz      short loc_40DC08
.text:0040DBD5                 mov     edi, [esp+4Ch+var_1C]
.text:0040DBD9                 movzx   eax, byte ptr [edi]
.text:0040DBDC                 test    al, al
.text:0040DBDE                 jz      short loc_40DC08
.text:0040DBE0
.text:0040DBE0 loc_40DBE0:                             ; CODE XREF: sub_40D2B0+956↓j
.text:0040DBE0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040DBE4                 cmp     [esp+4Ch+var_34], ebp
.text:0040DBE8                 jnb     short loc_40DBF5
.text:0040DBEA                 mov     ecx, [esp+4Ch+arg_0]
.text:0040DBEE                 mov     ebx, [esp+4Ch+var_34]
.text:0040DBF2                 mov     [ebx+ecx], al
.text:0040DBF5
.text:0040DBF5 loc_40DBF5:                             ; CODE XREF: sub_40D2B0+938↑j
.text:0040DBF5                 inc     [esp+4Ch+var_1C]
.text:0040DBF9                 inc     [esp+4Ch+var_34]
.text:0040DBFD                 mov     edx, [esp+4Ch+var_1C]
.text:0040DC01                 movzx   eax, byte ptr [edx]
.text:0040DC04                 test    al, al
.text:0040DC06                 jnz     short loc_40DBE0
.text:0040DC08
.text:0040DC08 loc_40DC08:                             ; CODE XREF: sub_40D2B0+923↑j
.text:0040DC08                                         ; sub_40D2B0+92E↑j
.text:0040DC08                 mov     eax, [esp+4Ch+arg_4]
.text:0040DC0C                 cmp     [esp+4Ch+var_34], eax
.text:0040DC10                 jnb     short loc_40DC1E
.text:0040DC12                 mov     edi, [esp+4Ch+arg_0]
.text:0040DC16                 mov     esi, [esp+4Ch+var_34]
.text:0040DC1A                 mov     byte ptr [esi+edi], 0
.text:0040DC1E
.text:0040DC1E loc_40DC1E:                             ; CODE XREF: sub_40D2B0+960↑j
.text:0040DC1E                 mov     eax, [esp+4Ch+var_34]
.text:0040DC22                 jmp     loc_40D6EF
.text:0040DC27 ; ---------------------------------------------------------------------------
.text:0040DC27
.text:0040DC27 loc_40DC27:                             ; CODE XREF: sub_40D2B0+95↑j
.text:0040DC27                 mov     ebx, [esp+4Ch+Str]
.text:0040DC2B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040DC30                 jmp     loc_40D34F
.text:0040DC35 ; ---------------------------------------------------------------------------
.text:0040DC35
.text:0040DC35 loc_40DC35:                             ; CODE XREF: sub_40D2B0+3D↑j
.text:0040DC35                                         ; DATA XREF: sub_40D2B0:jpt_40D2ED↑o
.text:0040DC35                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040D2ED case 2
.text:0040DC39                 cmp     [esp+4Ch+var_34], edx
.text:0040DC3D                 jnb     short loc_40DC46
.text:0040DC3F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040DC43                 mov     byte ptr [ecx], 27h ; '''
.text:0040DC46
.text:0040DC46 loc_40DC46:                             ; CODE XREF: sub_40D2B0+98D↑j
.text:0040DC46                 mov     [esp+4Ch+var_34], 1
.text:0040DC4E                 mov     [esp+4Ch+var_1C], 40D29Eh
.text:0040DC56                 jmp     loc_40D336
.text:0040DC5B ; ---------------------------------------------------------------------------
.text:0040DC5B
.text:0040DC5B loc_40DC5B:                             ; CODE XREF: sub_40D2B0+3D↑j
.text:0040DC5B                                         ; DATA XREF: sub_40D2B0:jpt_40D2ED↑o
.text:0040DC5B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040D2ED case 4
.text:0040DC60                 jmp     def_40D2ED      ; jumptable 0040D2ED default case, cases 0,1
.text:0040DC65 ; ---------------------------------------------------------------------------
.text:0040DC65
.text:0040DC65 loc_40DC65:                             ; CODE XREF: sub_40D2B0+3D↑j
.text:0040DC65                                         ; DATA XREF: sub_40D2B0:jpt_40D2ED↑o
.text:0040DC65                 mov     [esp+4Ch+C], 40D2A0h ; jumptable 0040D2ED cases 5,6
.text:0040DC6C                 call    ds:libintl_gettext
.text:0040DC72                 cmp     eax, 40D2A0h
.text:0040DC77                 mov     edi, eax
.text:0040DC79                 jz      short loc_40DCF0
.text:0040DC7B
.text:0040DC7B loc_40DC7B:                             ; CODE XREF: sub_40D2B0+A45↓j
.text:0040DC7B                                         ; sub_40D2B0+A4C↓j
.text:0040DC7B                 mov     [esp+4Ch+C], 40D29Eh
.text:0040DC82                 call    ds:libintl_gettext
.text:0040DC88                 cmp     eax, 40D29Eh
.text:0040DC8D                 mov     edx, eax
.text:0040DC8F                 jz      short loc_40DCE2
.text:0040DC91
.text:0040DC91 loc_40DC91:                             ; CODE XREF: sub_40D2B0+A37↓j
.text:0040DC91                                         ; sub_40D2B0+A3E↓j
.text:0040DC91                 mov     [esp+4Ch+var_1C], edi
.text:0040DC95                 cmp     byte ptr [edi], 0
.text:0040DC98                 jz      short loc_40DCC8
.text:0040DC9A
.text:0040DC9A loc_40DC9A:                             ; CODE XREF: sub_40D2B0+A16↓j
.text:0040DC9A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040DC9E                 cmp     [esp+4Ch+var_34], ecx
.text:0040DCA2                 jnb     short loc_40DCB7
.text:0040DCA4                 mov     ebp, [esp+4Ch+var_1C]
.text:0040DCA8                 mov     edi, [esp+4Ch+arg_0]
.text:0040DCAC                 mov     esi, [esp+4Ch+var_34]
.text:0040DCB0                 movzx   ebx, byte ptr [ebp+0]
.text:0040DCB4                 mov     [esi+edi], bl
.text:0040DCB7
.text:0040DCB7 loc_40DCB7:                             ; CODE XREF: sub_40D2B0+9F2↑j
.text:0040DCB7                 inc     [esp+4Ch+var_1C]
.text:0040DCBB                 inc     [esp+4Ch+var_34]
.text:0040DCBF                 mov     eax, [esp+4Ch+var_1C]
.text:0040DCC3                 cmp     byte ptr [eax], 0
.text:0040DCC6                 jnz     short loc_40DC9A
.text:0040DCC8
.text:0040DCC8 loc_40DCC8:                             ; CODE XREF: sub_40D2B0+9E8↑j
.text:0040DCC8                 mov     [esp+4Ch+var_21], 1
.text:0040DCCD                 mov     [esp+4Ch+var_1C], edx
.text:0040DCD1                 mov     [esp+4Ch+C], edx ; Str
.text:0040DCD4                 call    strlen
.text:0040DCD9                 mov     [esp+4Ch+var_20], eax
.text:0040DCDD                 jmp     def_40D2ED      ; jumptable 0040D2ED default case, cases 0,1
.text:0040DCE2 ; ---------------------------------------------------------------------------
.text:0040DCE2
.text:0040DCE2 loc_40DCE2:                             ; CODE XREF: sub_40D2B0+9DF↑j
.text:0040DCE2                 cmp     [esp+4Ch+arg_10], 6
.text:0040DCE7                 jnz     short loc_40DC91
.text:0040DCE9                 mov     edx, offset asc_40D29C ; "\"'`"
.text:0040DCEE                 jmp     short loc_40DC91
.text:0040DCF0 ; ---------------------------------------------------------------------------
.text:0040DCF0
.text:0040DCF0 loc_40DCF0:                             ; CODE XREF: sub_40D2B0+9C9↑j
.text:0040DCF0                 cmp     [esp+4Ch+arg_10], 6
.text:0040DCF5                 jnz     short loc_40DC7B
.text:0040DCF7                 mov     edi, offset asc_40D29C ; "\"'`"
.text:0040DCFC                 jmp     loc_40DC7B
.text:0040DCFC sub_40D2B0      endp
.text:0040DCFC
.text:0040DD01 ; ---------------------------------------------------------------------------
.text:0040DD01                 jmp     short loc_40DD10
.text:0040DD01 ; ---------------------------------------------------------------------------
.text:0040DD03                 align 10h
.text:0040DD10
.text:0040DD10 loc_40DD10:                             ; CODE XREF: .text:0040DD01↑j
.text:0040DD10                 sub     esp, 0Ch
.text:0040DD13                 mov     [esp+4], ebx
.text:0040DD17                 mov     [esp+8], esi
.text:0040DD1B                 call    _errno
.text:0040DD20                 mov     esi, [eax]
.text:0040DD22                 mov     dword ptr [esp], 24h ; '$'
.text:0040DD29                 call    sub_40B090
.text:0040DD2E                 mov     edx, [esp+10h]
.text:0040DD32                 mov     ebx, eax
.text:0040DD34                 test    edx, edx
.text:0040DD36                 jz      short loc_40DD81
.text:0040DD38
.text:0040DD38 loc_40DD38:                             ; CODE XREF: .text:0040DD86↓j
.text:0040DD38                 mov     ecx, [edx]
.text:0040DD3A                 mov     [ebx], ecx
.text:0040DD3C                 mov     ecx, [edx+4]
.text:0040DD3F                 mov     [ebx+4], ecx
.text:0040DD42                 mov     ecx, [edx+8]
.text:0040DD45                 mov     [ebx+8], ecx
.text:0040DD48                 mov     ecx, [edx+0Ch]
.text:0040DD4B                 mov     [ebx+0Ch], ecx
.text:0040DD4E                 mov     ecx, [edx+10h]
.text:0040DD51                 mov     [ebx+10h], ecx
.text:0040DD54                 mov     ecx, [edx+14h]
.text:0040DD57                 mov     [ebx+14h], ecx
.text:0040DD5A                 mov     ecx, [edx+18h]
.text:0040DD5D                 mov     [ebx+18h], ecx
.text:0040DD60                 mov     ecx, [edx+1Ch]
.text:0040DD63                 mov     [ebx+1Ch], ecx
.text:0040DD66                 mov     ecx, [edx+20h]
.text:0040DD69                 mov     [ebx+20h], ecx
.text:0040DD6C                 call    _errno
.text:0040DD71                 mov     [eax], esi
.text:0040DD73                 mov     esi, [esp+8]
.text:0040DD77                 mov     eax, ebx
.text:0040DD79                 mov     ebx, [esp+4]
.text:0040DD7D                 add     esp, 0Ch
.text:0040DD80                 retn
.text:0040DD81 ; ---------------------------------------------------------------------------
.text:0040DD81
.text:0040DD81 loc_40DD81:                             ; CODE XREF: .text:0040DD36↑j
.text:0040DD81                 mov     edx, offset dword_4223D0
.text:0040DD86                 jmp     short loc_40DD38
.text:0040DD86 ; ---------------------------------------------------------------------------
.text:0040DD88                 align 10h
.text:0040DD90                 mov     eax, [esp+4]
.text:0040DD94                 test    eax, eax
.text:0040DD96                 jz      short loc_40DDA0
.text:0040DD98
.text:0040DD98 loc_40DD98:                             ; CODE XREF: .text:0040DDA5↓j
.text:0040DD98                 mov     eax, [eax]
.text:0040DD9A                 retn
.text:0040DD9A ; ---------------------------------------------------------------------------
.text:0040DD9B                 align 10h
.text:0040DDA0
.text:0040DDA0 loc_40DDA0:                             ; CODE XREF: .text:0040DD96↑j
.text:0040DDA0                 mov     eax, offset dword_4223D0
.text:0040DDA5                 jmp     short loc_40DD98
.text:0040DDA5 ; ---------------------------------------------------------------------------
.text:0040DDA7                 align 10h
.text:0040DDB0                 mov     edx, [esp+4]
.text:0040DDB4                 test    edx, edx
.text:0040DDB6                 jz      short loc_40DDC0
.text:0040DDB8
.text:0040DDB8 loc_40DDB8:                             ; CODE XREF: .text:0040DDC5↓j
.text:0040DDB8                 mov     ecx, [esp+8]
.text:0040DDBC                 mov     [edx], ecx
.text:0040DDBE                 retn
.text:0040DDBE ; ---------------------------------------------------------------------------
.text:0040DDBF                 align 10h
.text:0040DDC0
.text:0040DDC0 loc_40DDC0:                             ; CODE XREF: .text:0040DDB6↑j
.text:0040DDC0                 mov     edx, offset dword_4223D0
.text:0040DDC5                 jmp     short loc_40DDB8
.text:0040DDC5 ; ---------------------------------------------------------------------------
.text:0040DDC7                 align 10h
.text:0040DDD0                 sub     esp, 8
.text:0040DDD3                 mov     eax, [esp+0Ch]
.text:0040DDD7                 movzx   ecx, byte ptr [esp+10h]
.text:0040DDDC                 mov     [esp], ebx
.text:0040DDDF                 mov     ebx, [esp+14h]
.text:0040DDE3                 mov     [esp+4], esi
.text:0040DDE7                 mov     dl, cl
.text:0040DDE9                 shr     dl, 5
.text:0040DDEC                 movzx   edx, dl
.text:0040DDEF                 shl     edx, 2
.text:0040DDF2                 test    eax, eax
.text:0040DDF4                 lea     esi, [edx+eax+4]
.text:0040DDF8                 jz      short loc_40DE20
.text:0040DDFA
.text:0040DDFA loc_40DDFA:                             ; CODE XREF: .text:0040DE26↓j
.text:0040DDFA                 mov     edx, [esi]
.text:0040DDFC                 and     ecx, 1Fh
.text:0040DDFF                 and     ebx, 1
.text:0040DE02                 mov     eax, edx
.text:0040DE04                 shr     eax, cl
.text:0040DE06                 and     eax, 1
.text:0040DE09                 xor     ebx, eax
.text:0040DE0B                 shl     ebx, cl
.text:0040DE0D                 xor     edx, ebx
.text:0040DE0F                 mov     [esi], edx
.text:0040DE11                 mov     ebx, [esp]
.text:0040DE14                 mov     esi, [esp+4]
.text:0040DE18                 add     esp, 8
.text:0040DE1B                 retn
.text:0040DE1B ; ---------------------------------------------------------------------------
.text:0040DE1C                 align 10h
.text:0040DE20
.text:0040DE20 loc_40DE20:                             ; CODE XREF: .text:0040DDF8↑j
.text:0040DE20                 lea     esi, dword_4223D4[edx]
.text:0040DE26                 jmp     short loc_40DDFA
.text:0040DE26 ; ---------------------------------------------------------------------------
.text:0040DE28                 align 10h
.text:0040DE30                 sub     esp, 2Ch
.text:0040DE33                 mov     [esp+24h], ebx
.text:0040DE37                 mov     ebx, [esp+40h]
.text:0040DE3B                 mov     [esp+28h], esi
.text:0040DE3F                 test    ebx, ebx
.text:0040DE41                 jz      short loc_40DE90
.text:0040DE43
.text:0040DE43 loc_40DE43:                             ; CODE XREF: .text:0040DE95↓j
.text:0040DE43                 call    _errno
.text:0040DE48                 mov     esi, [eax]
.text:0040DE4A                 mov     [esp+14h], ebx
.text:0040DE4E                 mov     edx, [ebx]
.text:0040DE50                 mov     ecx, [esp+38h]
.text:0040DE54                 mov     ebx, [esp+3Ch]
.text:0040DE58                 mov     [esp+10h], edx
.text:0040DE5C                 mov     edx, [esp+34h]
.text:0040DE60                 mov     [esp+0Ch], ebx
.text:0040DE64                 mov     [esp+8], ecx
.text:0040DE68                 mov     [esp+4], edx
.text:0040DE6C                 mov     edx, [esp+30h]
.text:0040DE70                 mov     [esp], edx
.text:0040DE73                 call    sub_40D2B0
.text:0040DE78                 mov     ebx, eax
.text:0040DE7A                 call    _errno
.text:0040DE7F                 mov     [eax], esi
.text:0040DE81                 mov     esi, [esp+28h]
.text:0040DE85                 mov     eax, ebx
.text:0040DE87                 mov     ebx, [esp+24h]
.text:0040DE8B                 add     esp, 2Ch
.text:0040DE8E                 retn
.text:0040DE8E ; ---------------------------------------------------------------------------
.text:0040DE8F                 align 10h
.text:0040DE90
.text:0040DE90 loc_40DE90:                             ; CODE XREF: .text:0040DE41↑j
.text:0040DE90                 mov     ebx, offset dword_4223D0
.text:0040DE95                 jmp     short loc_40DE43
.text:0040DE95 ; ---------------------------------------------------------------------------
.text:0040DE97                 align 10h
.text:0040DEA0                 push    ebp
.text:0040DEA1                 push    edi
.text:0040DEA2                 push    esi
.text:0040DEA3                 push    ebx
.text:0040DEA4                 sub     esp, 2Ch
.text:0040DEA7                 mov     ebp, [esp+48h]
.text:0040DEAB                 call    _errno
.text:0040DEB0                 mov     edx, [eax]
.text:0040DEB2                 test    ebp, ebp
.text:0040DEB4                 mov     ebx, ebp
.text:0040DEB6                 mov     [esp+28h], edx
.text:0040DEBA                 jz      loc_40DF70
.text:0040DEC0
.text:0040DEC0 loc_40DEC0:                             ; CODE XREF: .text:0040DF75↓j
.text:0040DEC0                 call    _errno
.text:0040DEC5                 mov     edi, [eax]
.text:0040DEC7                 mov     esi, ebp
.text:0040DEC9                 mov     [esp+14h], ebx
.text:0040DECD                 mov     ecx, [ebx]
.text:0040DECF                 mov     dword ptr [esp], 0
.text:0040DED6                 mov     edx, [esp+44h]
.text:0040DEDA                 mov     dword ptr [esp+4], 0
.text:0040DEE2                 mov     eax, [esp+40h]
.text:0040DEE6                 mov     [esp+10h], ecx
.text:0040DEEA                 mov     [esp+0Ch], edx
.text:0040DEEE                 mov     [esp+8], eax
.text:0040DEF2                 call    sub_40D2B0
.text:0040DEF7                 mov     ebx, eax
.text:0040DEF9                 call    _errno
.text:0040DEFE                 mov     [eax], edi
.text:0040DF00                 lea     edi, [ebx+1]
.text:0040DF03                 mov     [esp], edi
.text:0040DF06                 call    sub_40B090
.text:0040DF0B                 mov     [esp+24h], eax
.text:0040DF0F                 test    ebp, ebp
.text:0040DF11                 jz      short loc_40DF62
.text:0040DF13
.text:0040DF13 loc_40DF13:                             ; CODE XREF: .text:0040DF67↓j
.text:0040DF13                 call    _errno
.text:0040DF18                 mov     ebp, [eax]
.text:0040DF1A                 mov     [esp+14h], esi
.text:0040DF1E                 mov     ecx, [esi]
.text:0040DF20                 mov     [esp+4], edi
.text:0040DF24                 mov     edx, [esp+44h]
.text:0040DF28                 mov     esi, [esp+24h]
.text:0040DF2C                 mov     [esp+10h], ecx
.text:0040DF30                 mov     eax, [esp+40h]
.text:0040DF34                 mov     [esp+0Ch], edx
.text:0040DF38                 mov     [esp], esi
.text:0040DF3B                 mov     [esp+8], eax
.text:0040DF3F                 call    sub_40D2B0
.text:0040DF44                 call    _errno
.text:0040DF49                 mov     [eax], ebp
.text:0040DF4B                 call    _errno
.text:0040DF50                 mov     ebx, [esp+28h]
.text:0040DF54                 mov     [eax], ebx
.text:0040DF56                 mov     eax, [esp+24h]
.text:0040DF5A                 add     esp, 2Ch
.text:0040DF5D                 pop     ebx
.text:0040DF5E                 pop     esi
.text:0040DF5F                 pop     edi
.text:0040DF60                 pop     ebp
.text:0040DF61                 retn
.text:0040DF62 ; ---------------------------------------------------------------------------
.text:0040DF62
.text:0040DF62 loc_40DF62:                             ; CODE XREF: .text:0040DF11↑j
.text:0040DF62                 mov     esi, offset dword_4223D0
.text:0040DF67                 jmp     short loc_40DF13
.text:0040DF67 ; ---------------------------------------------------------------------------
.text:0040DF69                 align 10h
.text:0040DF70
.text:0040DF70 loc_40DF70:                             ; CODE XREF: .text:0040DEBA↑j
.text:0040DF70                 mov     ebx, offset dword_4223D0
.text:0040DF75                 jmp     loc_40DEC0
.text:0040DF75 ; ---------------------------------------------------------------------------
.text:0040DF7A                 align 10h
.text:0040DF80                 sub     esp, 1Ch
.text:0040DF83                 mov     edx, [esp+24h]
.text:0040DF87                 mov     dword ptr [esp+0Ch], offset dword_4223D0
.text:0040DF8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040DF97                 mov     [esp+4], edx
.text:0040DF9B                 mov     edx, [esp+20h]
.text:0040DF9F                 mov     [esp], edx
.text:0040DFA2                 call    sub_40E3F0
.text:0040DFA7                 add     esp, 1Ch
.text:0040DFAA                 retn
.text:0040DFAA ; ---------------------------------------------------------------------------
.text:0040DFAB                 align 10h
.text:0040DFB0                 sub     esp, 1Ch
.text:0040DFB3                 mov     edx, [esp+20h]
.text:0040DFB7                 mov     dword ptr [esp+0Ch], offset dword_4223D0
.text:0040DFBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040DFC7                 mov     [esp+4], edx
.text:0040DFCB                 mov     dword ptr [esp], 0
.text:0040DFD2                 call    sub_40E3F0
.text:0040DFD7                 add     esp, 1Ch
.text:0040DFDA                 retn
.text:0040DFDA ; ---------------------------------------------------------------------------
.text:0040DFDB                 align 10h
.text:0040DFE0
.text:0040DFE0 ; =============== S U B R O U T I N E =======================================
.text:0040DFE0
.text:0040DFE0
.text:0040DFE0 ; int __cdecl sub_40DFE0(int, int, char *)
.text:0040DFE0 sub_40DFE0      proc near               ; CODE XREF: .text:0040A60E↑p
.text:0040DFE0                                         ; sub_40A7C0+96↑p ...
.text:0040DFE0
.text:0040DFE0 var_BC          = dword ptr -0BCh
.text:0040DFE0 var_B8          = dword ptr -0B8h
.text:0040DFE0 var_B4          = dword ptr -0B4h
.text:0040DFE0 var_B0          = dword ptr -0B0h
.text:0040DFE0 var_AC          = dword ptr -0ACh
.text:0040DFE0 var_A8          = dword ptr -0A8h
.text:0040DFE0 var_A4          = dword ptr -0A4h
.text:0040DFE0 var_A0          = dword ptr -0A0h
.text:0040DFE0 var_9C          = dword ptr -9Ch
.text:0040DFE0 var_98          = dword ptr -98h
.text:0040DFE0 var_94          = dword ptr -94h
.text:0040DFE0 var_90          = dword ptr -90h
.text:0040DFE0 var_8C          = dword ptr -8Ch
.text:0040DFE0 var_7C          = dword ptr -7Ch
.text:0040DFE0 var_78          = dword ptr -78h
.text:0040DFE0 var_74          = dword ptr -74h
.text:0040DFE0 var_70          = dword ptr -70h
.text:0040DFE0 var_6C          = dword ptr -6Ch
.text:0040DFE0 var_68          = dword ptr -68h
.text:0040DFE0 var_64          = dword ptr -64h
.text:0040DFE0 var_60          = dword ptr -60h
.text:0040DFE0 var_5C          = dword ptr -5Ch
.text:0040DFE0 var_4C          = dword ptr -4Ch
.text:0040DFE0 var_48          = dword ptr -48h
.text:0040DFE0 var_44          = dword ptr -44h
.text:0040DFE0 var_40          = dword ptr -40h
.text:0040DFE0 var_3C          = dword ptr -3Ch
.text:0040DFE0 var_38          = dword ptr -38h
.text:0040DFE0 var_34          = dword ptr -34h
.text:0040DFE0 var_30          = dword ptr -30h
.text:0040DFE0 var_2C          = dword ptr -2Ch
.text:0040DFE0 arg_0           = dword ptr  4
.text:0040DFE0 arg_4           = dword ptr  8
.text:0040DFE0 arg_8           = dword ptr  0Ch
.text:0040DFE0
.text:0040DFE0                 push    ebp
.text:0040DFE1                 xor     eax, eax
.text:0040DFE3                 mov     ecx, 8
.text:0040DFE8                 push    edi
.text:0040DFE9                 push    esi
.text:0040DFEA                 push    ebx
.text:0040DFEB                 sub     esp, 0ACh
.text:0040DFF1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040DFF8                 cld
.text:0040DFF9                 lea     edi, [esp+0BCh+var_A8]
.text:0040DFFD                 mov     [esp+0BCh+var_AC], ebp
.text:0040E001                 rep stosd
.text:0040E003                 mov     eax, [esp+0BCh+var_8C]
.text:0040E007                 mov     edi, [esp+0BCh+var_AC]
.text:0040E00B                 mov     esi, [esp+0BCh+var_A8]
.text:0040E00F                 mov     [esp+0BCh+var_5C], eax
.text:0040E013                 mov     ebp, [esp+0BCh+var_A4]
.text:0040E017                 mov     eax, [esp+0BCh+var_AC]
.text:0040E01B                 mov     [esp+0BCh+var_7C], edi
.text:0040E01F                 mov     ecx, [esp+0BCh+var_94]
.text:0040E023                 mov     edi, [esp+0BCh+var_A0]
.text:0040E027                 mov     [esp+0BCh+var_78], esi
.text:0040E02B                 mov     edx, [esp+0BCh+var_90]
.text:0040E02F                 mov     esi, [esp+0BCh+var_9C]
.text:0040E033                 mov     [esp+0BCh+var_4C], eax
.text:0040E037                 mov     ebx, [esp+0BCh+var_98]
.text:0040E03B                 mov     eax, [esp+0BCh+var_A8]
.text:0040E03F                 mov     [esp+0BCh+var_74], ebp
.text:0040E043                 mov     [esp+0BCh+var_70], edi
.text:0040E047                 mov     [esp+0BCh+var_6C], esi
.text:0040E04B                 mov     [esp+0BCh+var_68], ebx
.text:0040E04F                 mov     [esp+0BCh+var_64], ecx
.text:0040E053                 mov     [esp+0BCh+var_60], edx
.text:0040E057                 mov     [esp+0BCh+var_48], eax
.text:0040E05B                 mov     [esp+0BCh+var_44], ebp
.text:0040E05F                 mov     [esp+0BCh+var_40], edi
.text:0040E063                 mov     [esp+0BCh+var_3C], esi
.text:0040E06A                 mov     [esp+0BCh+var_38], ebx
.text:0040E071                 mov     ebx, [esp+0BCh+var_8C]
.text:0040E075                 mov     [esp+0BCh+var_30], edx
.text:0040E07C                 mov     edx, [esp+0BCh+arg_8]
.text:0040E083                 mov     [esp+0BCh+var_34], ecx
.text:0040E08A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040E08E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040E092                 mov     edx, [esp+0BCh+arg_0]
.text:0040E099                 mov     [esp+0BCh+var_2C], ebx
.text:0040E0A0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040E0A4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040E0AC                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040E0AF                 call    sub_40E3F0
.text:0040E0B4                 add     esp, 0ACh
.text:0040E0BA                 pop     ebx
.text:0040E0BB                 pop     esi
.text:0040E0BC                 pop     edi
.text:0040E0BD                 pop     ebp
.text:0040E0BE                 retn
.text:0040E0BE sub_40DFE0      endp
.text:0040E0BE
.text:0040E0BE ; ---------------------------------------------------------------------------
.text:0040E0BF                 align 10h
.text:0040E0C0                 push    ebp
.text:0040E0C1                 xor     eax, eax
.text:0040E0C3                 mov     ecx, 8
.text:0040E0C8                 push    edi
.text:0040E0C9                 push    esi
.text:0040E0CA                 push    ebx
.text:0040E0CB                 sub     esp, 0ACh
.text:0040E0D1                 mov     edx, [esp+0C4h]
.text:0040E0D8                 cld
.text:0040E0D9                 lea     edi, [esp+14h]
.text:0040E0DD                 mov     [esp+10h], edx
.text:0040E0E1                 rep stosd
.text:0040E0E3                 mov     eax, [esp+30h]
.text:0040E0E7                 mov     ebp, [esp+10h]
.text:0040E0EB                 mov     edi, [esp+14h]
.text:0040E0EF                 mov     [esp+60h], eax
.text:0040E0F3                 mov     esi, [esp+20h]
.text:0040E0F7                 mov     eax, [esp+10h]
.text:0040E0FB                 mov     [esp+40h], ebp
.text:0040E0FF                 mov     ecx, [esp+28h]
.text:0040E103                 mov     ebp, [esp+18h]
.text:0040E107                 mov     [esp+44h], edi
.text:0040E10B                 mov     edx, [esp+2Ch]
.text:0040E10F                 mov     edi, [esp+1Ch]
.text:0040E113                 mov     [esp+70h], eax
.text:0040E117                 mov     ebx, [esp+24h]
.text:0040E11B                 mov     eax, [esp+14h]
.text:0040E11F                 mov     [esp+48h], ebp
.text:0040E123                 mov     [esp+4Ch], edi
.text:0040E127                 mov     [esp+50h], esi
.text:0040E12B                 mov     [esp+54h], ebx
.text:0040E12F                 mov     [esp+58h], ecx
.text:0040E133                 mov     [esp+5Ch], edx
.text:0040E137                 mov     [esp+74h], eax
.text:0040E13B                 mov     [esp+78h], ebp
.text:0040E13F                 mov     [esp+7Ch], edi
.text:0040E143                 mov     [esp+80h], esi
.text:0040E14A                 mov     [esp+84h], ebx
.text:0040E151                 mov     esi, [esp+30h]
.text:0040E155                 lea     ebx, [esp+70h]
.text:0040E159                 mov     [esp+8Ch], edx
.text:0040E160                 mov     edx, [esp+0C8h]
.text:0040E167                 mov     [esp+88h], ecx
.text:0040E16E                 mov     ecx, [esp+0CCh]
.text:0040E175                 mov     [esp+4], edx
.text:0040E179                 mov     edx, [esp+0C0h]
.text:0040E180                 mov     [esp+90h], esi
.text:0040E187                 mov     [esp+0Ch], ebx
.text:0040E18B                 mov     [esp+8], ecx
.text:0040E18F                 mov     [esp], edx
.text:0040E192                 call    sub_40E3F0
.text:0040E197                 add     esp, 0ACh
.text:0040E19D                 pop     ebx
.text:0040E19E                 pop     esi
.text:0040E19F                 pop     edi
.text:0040E1A0                 pop     ebp
.text:0040E1A1                 retn
.text:0040E1A1 ; ---------------------------------------------------------------------------
.text:0040E1A2                 align 10h
.text:0040E1B0                 push    ebp
.text:0040E1B1                 xor     eax, eax
.text:0040E1B3                 mov     ecx, 8
.text:0040E1B8                 push    edi
.text:0040E1B9                 push    esi
.text:0040E1BA                 push    ebx
.text:0040E1BB                 sub     esp, 0ACh
.text:0040E1C1                 mov     edi, [esp+0C0h]
.text:0040E1C8                 cld
.text:0040E1C9                 mov     [esp+10h], edi
.text:0040E1CD                 lea     edi, [esp+14h]
.text:0040E1D1                 rep stosd
.text:0040E1D3                 mov     eax, [esp+30h]
.text:0040E1D7                 mov     esi, [esp+10h]
.text:0040E1DB                 mov     ebx, [esp+14h]
.text:0040E1DF                 mov     [esp+60h], eax
.text:0040E1E3                 mov     ebp, [esp+18h]
.text:0040E1E7                 mov     eax, [esp+10h]
.text:0040E1EB                 mov     [esp+40h], esi
.text:0040E1EF                 mov     edi, [esp+1Ch]
.text:0040E1F3                 mov     esi, [esp+20h]
.text:0040E1F7                 mov     [esp+44h], ebx
.text:0040E1FB                 mov     ecx, [esp+28h]
.text:0040E1FF                 mov     edx, [esp+2Ch]
.text:0040E203                 mov     [esp+70h], eax
.text:0040E207                 mov     ebx, [esp+24h]
.text:0040E20B                 mov     eax, [esp+14h]
.text:0040E20F                 mov     [esp+48h], ebp
.text:0040E213                 mov     [esp+4Ch], edi
.text:0040E217                 mov     [esp+50h], esi
.text:0040E21B                 mov     [esp+54h], ebx
.text:0040E21F                 mov     [esp+58h], ecx
.text:0040E223                 mov     [esp+5Ch], edx
.text:0040E227                 mov     [esp+74h], eax
.text:0040E22B                 mov     [esp+78h], ebp
.text:0040E22F                 mov     [esp+7Ch], edi
.text:0040E233                 mov     [esp+80h], esi
.text:0040E23A                 mov     [esp+84h], ebx
.text:0040E241                 mov     [esp+8Ch], edx
.text:0040E248                 lea     edx, [esp+70h]
.text:0040E24C                 mov     [esp+88h], ecx
.text:0040E253                 mov     ecx, [esp+30h]
.text:0040E257                 mov     [esp+0Ch], edx
.text:0040E25B                 mov     edx, [esp+0C4h]
.text:0040E262                 mov     [esp+90h], ecx
.text:0040E269                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040E271                 mov     [esp+4], edx
.text:0040E275                 mov     dword ptr [esp], 0
.text:0040E27C                 call    sub_40E3F0
.text:0040E281                 add     esp, 0ACh
.text:0040E287                 pop     ebx
.text:0040E288                 pop     esi
.text:0040E289                 pop     edi
.text:0040E28A                 pop     ebp
.text:0040E28B                 retn
.text:0040E28B ; ---------------------------------------------------------------------------
.text:0040E28C                 align 10h
.text:0040E290                 push    edi
.text:0040E291                 push    esi
.text:0040E292                 push    ebx
.text:0040E293                 sub     esp, 40h
.text:0040E296                 mov     edx, ds:dword_4223DC
.text:0040E29C                 mov     ebx, ds:dword_4223D0
.text:0040E2A2                 mov     esi, ds:dword_4223D8
.text:0040E2A8                 mov     edi, ds:dword_4223D4
.text:0040E2AE                 mov     [esp+1Ch], edx
.text:0040E2B2                 mov     ecx, ds:dword_4223E0
.text:0040E2B8                 mov     edx, ds:dword_4223F0
.text:0040E2BE                 mov     [esp+10h], ebx
.text:0040E2C2                 mov     ebx, ds:dword_4223E4
.text:0040E2C8                 mov     [esp+30h], edx
.text:0040E2CC                 movzx   edx, byte ptr [esp+54h]
.text:0040E2D1                 mov     [esp+18h], esi
.text:0040E2D5                 mov     esi, ds:dword_4223EC
.text:0040E2DB                 mov     [esp+14h], edi
.text:0040E2DF                 mov     edi, ds:dword_4223E8
.text:0040E2E5                 mov     [esp+20h], ecx
.text:0040E2E9                 mov     cl, dl
.text:0040E2EB                 shr     cl, 5
.text:0040E2EE                 mov     [esp+24h], ebx
.text:0040E2F2                 movzx   ebx, cl
.text:0040E2F5                 mov     [esp+2Ch], esi
.text:0040E2F9                 lea     esi, [esp+10h]
.text:0040E2FD                 mov     [esp+28h], edi
.text:0040E301                 lea     edi, [esi+ebx*4]
.text:0040E304                 mov     ebx, edx
.text:0040E306                 mov     edx, [edi+4]
.text:0040E309                 and     ebx, 1Fh
.text:0040E30C                 mov     cl, bl
.text:0040E30E                 mov     eax, edx
.text:0040E310                 shr     eax, cl
.text:0040E312                 and     eax, 1
.text:0040E315                 xor     eax, 1
.text:0040E318                 shl     eax, cl
.text:0040E31A                 xor     edx, eax
.text:0040E31C                 mov     [edi+4], edx
.text:0040E31F                 mov     edx, [esp+50h]
.text:0040E323                 mov     [esp+0Ch], esi
.text:0040E327                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040E32F                 mov     [esp+4], edx
.text:0040E333                 mov     dword ptr [esp], 0
.text:0040E33A                 call    sub_40E3F0
.text:0040E33F                 add     esp, 40h
.text:0040E342                 pop     ebx
.text:0040E343                 pop     esi
.text:0040E344                 pop     edi
.text:0040E345                 retn
.text:0040E345 ; ---------------------------------------------------------------------------
.text:0040E346                 align 10h
.text:0040E350
.text:0040E350 ; =============== S U B R O U T I N E =======================================
.text:0040E350
.text:0040E350
.text:0040E350 ; int __cdecl sub_40E350(char *)
.text:0040E350 sub_40E350      proc near               ; CODE XREF: sub_40B990+64↑p
.text:0040E350
.text:0040E350 var_4C          = dword ptr -4Ch
.text:0040E350 var_48          = dword ptr -48h
.text:0040E350 var_44          = dword ptr -44h
.text:0040E350 var_40          = dword ptr -40h
.text:0040E350 var_3C          = dword ptr -3Ch
.text:0040E350 var_38          = dword ptr -38h
.text:0040E350 var_34          = dword ptr -34h
.text:0040E350 var_30          = dword ptr -30h
.text:0040E350 var_2C          = dword ptr -2Ch
.text:0040E350 var_28          = dword ptr -28h
.text:0040E350 var_24          = dword ptr -24h
.text:0040E350 var_20          = dword ptr -20h
.text:0040E350 var_1C          = dword ptr -1Ch
.text:0040E350 arg_0           = dword ptr  4
.text:0040E350
.text:0040E350                 sub     esp, 4Ch
.text:0040E353                 mov     ecx, ds:dword_4223D0
.text:0040E359                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040E361                 mov     edx, ds:dword_4223D4
.text:0040E367                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040E36E                 mov     [esp+4Ch+var_3C], ecx
.text:0040E372                 mov     ecx, ds:dword_4223DC
.text:0040E378                 mov     [esp+4Ch+var_38], edx
.text:0040E37C                 mov     edx, ds:dword_4223D8
.text:0040E382                 mov     [esp+4Ch+var_30], ecx
.text:0040E386                 mov     ecx, ds:dword_4223E0
.text:0040E38C                 mov     eax, edx
.text:0040E38E                 shr     eax, 1Ah
.text:0040E391                 and     eax, 1
.text:0040E394                 xor     eax, 1
.text:0040E397                 mov     [esp+4Ch+var_2C], ecx
.text:0040E39B                 shl     eax, 1Ah
.text:0040E39E                 mov     ecx, ds:dword_4223E4
.text:0040E3A4                 xor     edx, eax
.text:0040E3A6                 mov     [esp+4Ch+var_34], edx
.text:0040E3AA                 mov     edx, [esp+4Ch+arg_0]
.text:0040E3AE                 mov     [esp+4Ch+var_28], ecx
.text:0040E3B2                 mov     ecx, ds:dword_4223E8
.text:0040E3B8                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040E3BC                 mov     [esp+4Ch+var_24], ecx
.text:0040E3C0                 mov     ecx, ds:dword_4223EC
.text:0040E3C6                 mov     [esp+4Ch+var_20], ecx
.text:0040E3CA                 mov     ecx, ds:dword_4223F0
.text:0040E3D0                 mov     [esp+4Ch+var_1C], ecx
.text:0040E3D4                 lea     ecx, [esp+4Ch+var_3C]
.text:0040E3D8                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040E3DC                 call    sub_40E3F0
.text:0040E3E1                 add     esp, 4Ch
.text:0040E3E4                 retn
.text:0040E3E4 sub_40E350      endp
.text:0040E3E4
.text:0040E3E4 ; ---------------------------------------------------------------------------
.text:0040E3E5                 align 10h
.text:0040E3F0
.text:0040E3F0 ; =============== S U B R O U T I N E =======================================
.text:0040E3F0
.text:0040E3F0
.text:0040E3F0 ; int __cdecl sub_40E3F0(int, char *, int, int)
.text:0040E3F0 sub_40E3F0      proc near               ; CODE XREF: .text:0040DFA2↑p
.text:0040E3F0                                         ; .text:0040DFD2↑p ...
.text:0040E3F0
.text:0040E3F0 Block           = dword ptr -2Ch
.text:0040E3F0 var_28          = dword ptr -28h
.text:0040E3F0 Str             = dword ptr -24h
.text:0040E3F0 var_20          = dword ptr -20h
.text:0040E3F0 var_1C          = dword ptr -1Ch
.text:0040E3F0 var_18          = dword ptr -18h
.text:0040E3F0 var_14          = dword ptr -14h
.text:0040E3F0 arg_0           = dword ptr  4
.text:0040E3F0 arg_4           = dword ptr  8
.text:0040E3F0 arg_8           = dword ptr  0Ch
.text:0040E3F0 arg_C           = dword ptr  10h
.text:0040E3F0
.text:0040E3F0                 push    ebp
.text:0040E3F1                 push    edi
.text:0040E3F2                 push    esi
.text:0040E3F3                 push    ebx
.text:0040E3F4                 sub     esp, 1Ch
.text:0040E3F7                 call    _errno
.text:0040E3FC                 mov     edx, [eax]
.text:0040E3FE                 mov     eax, [esp+2Ch+arg_0]
.text:0040E402                 mov     [esp+2Ch+var_14], edx
.text:0040E406                 test    eax, eax
.text:0040E408                 js      loc_40E5AA
.text:0040E40E                 mov     eax, [esp+2Ch+arg_0]
.text:0040E412                 cmp     dword_421060, eax
.text:0040E418                 ja      short loc_40E490
.text:0040E41A                 mov     esi, eax
.text:0040E41C                 inc     esi
.text:0040E41D                 cmp     esi, 1FFFFFFFh
.text:0040E423                 ja      loc_40E5AF
.text:0040E429                 mov     ebx, off_42106C
.text:0040E42F                 cmp     ebx, offset dword_421064
.text:0040E435                 jz      loc_40E581
.text:0040E43B
.text:0040E43B loc_40E43B:                             ; CODE XREF: sub_40E3F0+1B5↓j
.text:0040E43B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040E43E                 lea     ecx, ds:0[esi*8]
.text:0040E445                 mov     ebp, esi
.text:0040E447                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040E44B                 call    sub_40B120
.text:0040E450                 mov     off_42106C, eax
.text:0040E455                 mov     ebx, dword_421060
.text:0040E45B                 sub     ebp, ebx
.text:0040E45D                 lea     edi, [eax+ebx*8]
.text:0040E460                 lea     eax, ds:0[ebp*8]
.text:0040E467                 cmp     eax, 7
.text:0040E46A                 jbe     short loc_40E480
.text:0040E46C                 test    edi, 4
.text:0040E472                 jz      short loc_40E480
.text:0040E474                 mov     dword ptr [edi], 0
.text:0040E47A                 sub     eax, 4
.text:0040E47D                 add     edi, 4
.text:0040E480
.text:0040E480 loc_40E480:                             ; CODE XREF: sub_40E3F0+7A↑j
.text:0040E480                                         ; sub_40E3F0+82↑j
.text:0040E480                 cld
.text:0040E481                 mov     ecx, eax
.text:0040E483                 shr     ecx, 2
.text:0040E486                 xor     eax, eax
.text:0040E488                 rep stosd
.text:0040E48A                 mov     dword_421060, esi
.text:0040E490
.text:0040E490 loc_40E490:                             ; CODE XREF: sub_40E3F0+28↑j
.text:0040E490                 mov     esi, off_42106C
.text:0040E496                 mov     eax, [esp+2Ch+arg_0]
.text:0040E49A                 mov     ebp, [esi+eax*8]
.text:0040E49D                 mov     edi, [esi+eax*8+4]
.text:0040E4A1                 mov     esi, [esp+2Ch+arg_C]
.text:0040E4A5                 test    esi, esi
.text:0040E4A7                 jz      loc_40E577
.text:0040E4AD
.text:0040E4AD loc_40E4AD:                             ; CODE XREF: sub_40E3F0+18C↓j
.text:0040E4AD                 call    _errno
.text:0040E4B2                 mov     ebx, [eax]
.text:0040E4B4                 mov     [esp+2Ch+var_18], esi ; int
.text:0040E4B8                 mov     ecx, [esi]
.text:0040E4BA                 mov     [esp+2Ch+Block], edi ; int
.text:0040E4BD                 mov     edx, [esp+2Ch+arg_8]
.text:0040E4C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040E4C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040E4C9                 mov     ecx, [esp+2Ch+arg_4]
.text:0040E4CD                 mov     [esp+2Ch+var_20], edx ; int
.text:0040E4D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040E4D5                 call    sub_40D2B0
.text:0040E4DA                 mov     esi, eax
.text:0040E4DC                 call    _errno
.text:0040E4E1                 mov     [eax], ebx
.text:0040E4E3                 cmp     ebp, esi
.text:0040E4E5                 ja      short loc_40E55B
.text:0040E4E7                 lea     ebp, [esi+1]
.text:0040E4EA                 mov     ebx, off_42106C
.text:0040E4F0                 cmp     edi, offset unk_4222D0
.text:0040E4F6                 mov     esi, [esp+2Ch+arg_0]
.text:0040E4FA                 mov     [ebx+esi*8], ebp
.text:0040E4FD                 jz      short loc_40E50D
.text:0040E4FF                 mov     [esp+2Ch+Block], edi ; Block
.text:0040E502                 call    free
.text:0040E507                 mov     ebx, off_42106C
.text:0040E50D
.text:0040E50D loc_40E50D:                             ; CODE XREF: sub_40E3F0+10D↑j
.text:0040E50D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040E510                 call    sub_40B090
.text:0040E515                 mov     esi, [esp+2Ch+arg_C]
.text:0040E519                 mov     edi, eax
.text:0040E51B                 mov     eax, [esp+2Ch+arg_0]
.text:0040E51F                 test    esi, esi
.text:0040E521                 mov     [ebx+eax*8+4], edi
.text:0040E525                 jz      short loc_40E570
.text:0040E527
.text:0040E527 loc_40E527:                             ; CODE XREF: sub_40E3F0+185↓j
.text:0040E527                 call    _errno
.text:0040E52C                 mov     ebx, [eax]
.text:0040E52E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040E532                 mov     ecx, [esi]
.text:0040E534                 mov     [esp+2Ch+Block], edi ; int
.text:0040E537                 mov     edx, [esp+2Ch+arg_8]
.text:0040E53B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040E53F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040E543                 mov     ecx, [esp+2Ch+arg_4]
.text:0040E547                 mov     [esp+2Ch+var_20], edx ; int
.text:0040E54B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040E54F                 call    sub_40D2B0
.text:0040E554                 call    _errno
.text:0040E559                 mov     [eax], ebx
.text:0040E55B
.text:0040E55B loc_40E55B:                             ; CODE XREF: sub_40E3F0+F5↑j
.text:0040E55B                 call    _errno
.text:0040E560                 mov     ebp, [esp+2Ch+var_14]
.text:0040E564                 mov     [eax], ebp
.text:0040E566                 add     esp, 1Ch
.text:0040E569                 mov     eax, edi
.text:0040E56B                 pop     ebx
.text:0040E56C                 pop     esi
.text:0040E56D                 pop     edi
.text:0040E56E                 pop     ebp
.text:0040E56F                 retn
.text:0040E570 ; ---------------------------------------------------------------------------
.text:0040E570
.text:0040E570 loc_40E570:                             ; CODE XREF: sub_40E3F0+135↑j
.text:0040E570                 mov     esi, offset dword_4223D0
.text:0040E575                 jmp     short loc_40E527
.text:0040E577 ; ---------------------------------------------------------------------------
.text:0040E577
.text:0040E577 loc_40E577:                             ; CODE XREF: sub_40E3F0+B7↑j
.text:0040E577                 mov     esi, offset dword_4223D0
.text:0040E57C                 jmp     loc_40E4AD
.text:0040E581 ; ---------------------------------------------------------------------------
.text:0040E581
.text:0040E581 loc_40E581:                             ; CODE XREF: sub_40E3F0+45↑j
.text:0040E581                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040E588                 call    sub_40B090
.text:0040E58D                 mov     off_42106C, eax
.text:0040E592                 mov     edi, dword_421064
.text:0040E598                 mov     ebx, eax
.text:0040E59A                 mov     ecx, off_421068
.text:0040E5A0                 mov     [eax], edi
.text:0040E5A2                 mov     [eax+4], ecx
.text:0040E5A5                 jmp     loc_40E43B
.text:0040E5AA ; ---------------------------------------------------------------------------
.text:0040E5AA
.text:0040E5AA loc_40E5AA:                             ; CODE XREF: sub_40E3F0+18↑j
.text:0040E5AA                 call    abort
.text:0040E5AF ; ---------------------------------------------------------------------------
.text:0040E5AF
.text:0040E5AF loc_40E5AF:                             ; CODE XREF: sub_40E3F0+33↑j
.text:0040E5AF                 call    sub_40C060
.text:0040E5AF sub_40E3F0      endp
.text:0040E5AF
.text:0040E5AF ; ---------------------------------------------------------------------------
.text:0040E5B4                 align 10h
.text:0040E5C0
.text:0040E5C0 ; =============== S U B R O U T I N E =======================================
.text:0040E5C0
.text:0040E5C0
.text:0040E5C0 sub_40E5C0      proc near               ; DATA XREF: .text:0040E5D9↓o
.text:0040E5C0                 pop     esi
.text:0040E5C1                 pop     ebx
.text:0040E5C2                 jns     short near ptr loc_40E61A+3
.text:0040E5C4                 pop     ebp
.text:0040E5C5                 add     [esi+5Bh], bl
.text:0040E5C8                 outsb
.text:0040E5C9                 dec     esi
.text:0040E5CA                 pop     ebp
.text:0040E5CB
.text:0040E5CB loc_40E5CB:                             ; CODE XREF: sub_40BF70+94↑p
.text:0040E5CB                 add     [ebp+56002674h], cl
.text:0040E5CB sub_40E5C0      endp ; sp-analysis failed
.text:0040E5CB
.text:0040E5D1                 push    ebx
.text:0040E5D2                 sub     esp, 14h
.text:0040E5D5                 mov     esi, [esp+20h]
.text:0040E5D9                 mov     dword ptr [esp], offset sub_40E5C0
.text:0040E5E0                 call    ds:libintl_gettext
.text:0040E5E6                 mov     ebx, eax
.text:0040E5E8                 mov     eax, ds:dword_422400
.text:0040E5ED                 cmp     ebx, eax
.text:0040E5EF                 jz      short loc_40E620
.text:0040E5F1                 test    eax, eax
.text:0040E5F3                 jnz     loc_40E6F0
.text:0040E5F9
.text:0040E5F9 loc_40E5F9:                             ; CODE XREF: .text:0040E703↓j
.text:0040E5F9                 mov     dword ptr [esp+8], 1
.text:0040E601                 mov     [esp+4], ebx
.text:0040E605                 mov     dword ptr [esp], offset unk_422420
.text:0040E60C                 call    sub_411B40
.text:0040E611                 test    eax, eax
.text:0040E613                 mov     edx, 0FFFFFFFFh
.text:0040E618                 jnz     short loc_40E64F
.text:0040E61A
.text:0040E61A loc_40E61A:                             ; CODE XREF: sub_40E5C0+2↑j
.text:0040E61A                 mov     ds:dword_422400, ebx
.text:0040E620
.text:0040E620 loc_40E620:                             ; CODE XREF: .text:0040E5EF↑j
.text:0040E620                 mov     dword ptr [esp+10h], 0
.text:0040E628                 mov     dword ptr [esp+0Ch], 0
.text:0040E630                 mov     dword ptr [esp+8], 0
.text:0040E638                 mov     [esp+4], esi
.text:0040E63C                 mov     dword ptr [esp], offset unk_422420
.text:0040E643                 call    sub_411CC0
.text:0040E648                 xor     edx, edx
.text:0040E64A                 test    eax, eax
.text:0040E64C                 setz    dl
.text:0040E64F
.text:0040E64F loc_40E64F:                             ; CODE XREF: .text:0040E618↑j
.text:0040E64F                 test    edx, edx
.text:0040E651                 mov     eax, edx
.text:0040E653                 jz      short loc_40E660
.text:0040E655
.text:0040E655 loc_40E655:                             ; CODE XREF: .text:0040E6D5↓j
.text:0040E655                 add     esp, 14h
.text:0040E658                 pop     ebx
.text:0040E659                 pop     esi
.text:0040E65A                 retn
.text:0040E65A ; ---------------------------------------------------------------------------
.text:0040E65B                 align 10h
.text:0040E660
.text:0040E660 loc_40E660:                             ; CODE XREF: .text:0040E653↑j
.text:0040E660                 mov     dword ptr [esp], 40E5C6h
.text:0040E667                 call    ds:libintl_gettext
.text:0040E66D                 mov     ebx, eax
.text:0040E66F                 mov     eax, ds:dword_422410
.text:0040E674                 cmp     ebx, eax
.text:0040E676                 jz      short loc_40E6A3
.text:0040E678                 test    eax, eax
.text:0040E67A                 jnz     short loc_40E6DA
.text:0040E67C
.text:0040E67C loc_40E67C:                             ; CODE XREF: .text:0040E6EE↓j
.text:0040E67C                 mov     dword ptr [esp+8], 1
.text:0040E684                 mov     [esp+4], ebx
.text:0040E688                 mov     dword ptr [esp], offset unk_422440
.text:0040E68F                 call    sub_411B40
.text:0040E694                 test    eax, eax
.text:0040E696                 mov     edx, 0FFFFFFFFh
.text:0040E69B                 jnz     short loc_40E6D3
.text:0040E69D                 mov     ds:dword_422410, ebx
.text:0040E6A3
.text:0040E6A3 loc_40E6A3:                             ; CODE XREF: .text:0040E676↑j
.text:0040E6A3                 mov     dword ptr [esp+10h], 0
.text:0040E6AB                 mov     dword ptr [esp+0Ch], 0
.text:0040E6B3                 mov     dword ptr [esp+8], 0
.text:0040E6BB                 mov     [esp+4], esi
.text:0040E6BF                 mov     dword ptr [esp], offset unk_422440
.text:0040E6C6                 call    sub_411CC0
.text:0040E6CB                 xor     edx, edx
.text:0040E6CD                 test    eax, eax
.text:0040E6CF                 setz    dl
.text:0040E6D2                 dec     edx
.text:0040E6D3
.text:0040E6D3 loc_40E6D3:                             ; CODE XREF: .text:0040E69B↑j
.text:0040E6D3                 mov     eax, edx
.text:0040E6D5                 jmp     loc_40E655
.text:0040E6DA ; ---------------------------------------------------------------------------
.text:0040E6DA
.text:0040E6DA loc_40E6DA:                             ; CODE XREF: .text:0040E67A↑j
.text:0040E6DA                 mov     dword ptr [esp], offset unk_422440
.text:0040E6E1                 call    sub_412080
.text:0040E6E6                 xor     edx, edx
.text:0040E6E8                 mov     ds:dword_422410, edx
.text:0040E6EE                 jmp     short loc_40E67C
.text:0040E6F0 ; ---------------------------------------------------------------------------
.text:0040E6F0
.text:0040E6F0 loc_40E6F0:                             ; CODE XREF: .text:0040E5F3↑j
.text:0040E6F0                 mov     dword ptr [esp], offset unk_422420
.text:0040E6F7                 call    sub_412080
.text:0040E6FC                 xor     eax, eax
.text:0040E6FE                 mov     ds:dword_422400, eax
.text:0040E703                 jmp     loc_40E5F9
.text:0040E703 ; ---------------------------------------------------------------------------
.text:0040E708                 align 10h
.text:0040E710
.text:0040E710 ; =============== S U B R O U T I N E =======================================
.text:0040E710
.text:0040E710
.text:0040E710 sub_40E710      proc near               ; CODE XREF: sub_40CFC0+2E↑p
.text:0040E710
.text:0040E710 FileHandle      = dword ptr -1Ch
.text:0040E710 Buf             = dword ptr -18h
.text:0040E710 MaxCharCount    = dword ptr -14h
.text:0040E710 arg_0           = dword ptr  4
.text:0040E710 arg_4           = dword ptr  8
.text:0040E710 arg_8           = dword ptr  0Ch
.text:0040E710
.text:0040E710                 push    ebp
.text:0040E711                 push    edi
.text:0040E712                 push    esi
.text:0040E713                 push    ebx
.text:0040E714                 sub     esp, 0Ch
.text:0040E717                 mov     ebp, [esp+1Ch+arg_0]
.text:0040E71B                 mov     edi, [esp+1Ch+arg_4]
.text:0040E71F                 mov     ebx, [esp+1Ch+arg_8]
.text:0040E723                 lea     esi, [esi+0]
.text:0040E729                 lea     edi, [edi+0]
.text:0040E730
.text:0040E730 loc_40E730:                             ; CODE XREF: sub_40E710+3E↓j
.text:0040E730                                         ; sub_40E710+57↓j
.text:0040E730                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:0040E734                 mov     [esp+1Ch+Buf], edi ; Buf
.text:0040E738                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040E73B                 call    _write
.text:0040E740                 test    eax, eax
.text:0040E742                 mov     esi, eax
.text:0040E744                 jns     short loc_40E769
.text:0040E746                 call    _errno
.text:0040E74B                 cmp     dword ptr [eax], 4
.text:0040E74E                 jz      short loc_40E730
.text:0040E750                 call    _errno
.text:0040E755                 cmp     dword ptr [eax], 16h
.text:0040E758                 jnz     short loc_40E769
.text:0040E75A                 cmp     ebx, 7FFFE000h
.text:0040E760                 jbe     short loc_40E769
.text:0040E762                 mov     ebx, 7FFFE000h
.text:0040E767                 jmp     short loc_40E730
.text:0040E769 ; ---------------------------------------------------------------------------
.text:0040E769
.text:0040E769 loc_40E769:                             ; CODE XREF: sub_40E710+34↑j
.text:0040E769                                         ; sub_40E710+48↑j ...
.text:0040E769                 add     esp, 0Ch
.text:0040E76C                 mov     eax, esi
.text:0040E76E                 pop     ebx
.text:0040E76F                 pop     esi
.text:0040E770                 pop     edi
.text:0040E771                 pop     ebp
.text:0040E772                 retn
.text:0040E772 sub_40E710      endp
.text:0040E772
.text:0040E772 ; ---------------------------------------------------------------------------
.text:0040E773                 align 10h
.text:0040E780 ; const char Control[2]
.text:0040E780 Control         db '/',0                ; DATA XREF: sub_40E810:loc_40E890↓o
.text:0040E780                                         ; sub_40E810:loc_40E8DB↓o ...
.text:0040E782                 align 20h
.text:0040E7A0 aCoreutils530Sr_3 db '../../coreutils-5.3.0-src/lib/chdir-long.c',0
.text:0040E7A0                                         ; DATA XREF: sub_40E810+22E↓o
.text:0040E7A0                                         ; sub_40E810+5CB↓o ...
.text:0040E7CB aLenStrcspnStar db 'len == strcspn (start, "/")',0
.text:0040E7CB                                         ; DATA XREF: sub_40E810+236↓o
.text:0040E7E7 aDD0            db '*d == ',27h,'/',27h,' || *d == ',27h,'\0',27h,0
.text:0040E7E7                                         ; DATA XREF: sub_40E810+5D3↓o
.text:0040E7FF a0Len           db '0 < len',0          ; DATA XREF: sub_40E810+670↓o
.text:0040E807                 align 10h
.text:0040E810
.text:0040E810 ; =============== S U B R O U T I N E =======================================
.text:0040E810
.text:0040E810
.text:0040E810 ; int __cdecl sub_40E810(LPCSTR)
.text:0040E810 sub_40E810      proc near               ; CODE XREF: sub_40D1B0+17↑j
.text:0040E810
.text:0040E810 Str             = dword ptr -14Ch
.text:0040E810 Control         = dword ptr -148h
.text:0040E810 MaxCount        = dword ptr -144h
.text:0040E810 var_130         = dword ptr -130h
.text:0040E810 var_12C         = byte ptr -12Ch
.text:0040E810 var_29          = byte ptr -29h
.text:0040E810 var_28          = dword ptr -28h
.text:0040E810 FileHandle      = dword ptr -24h
.text:0040E810 arg_0           = dword ptr  4
.text:0040E810
.text:0040E810                 push    ebp
.text:0040E811                 push    edi
.text:0040E812                 push    esi
.text:0040E813                 push    ebx
.text:0040E814                 sub     esp, 13Ch
.text:0040E81A                 mov     esi, [esp+14Ch+arg_0]
.text:0040E821                 mov     [esp+14Ch+Str], esi ; LPCSTR
.text:0040E824                 call    sub_41A6F0
.text:0040E829                 test    eax, eax
.text:0040E82B                 mov     ebx, eax
.text:0040E82D                 jnz     short loc_40E840
.text:0040E82F
.text:0040E82F loc_40E82F:                             ; CODE XREF: sub_40E810+38↓j
.text:0040E82F                 mov     eax, ebx
.text:0040E831
.text:0040E831 loc_40E831:                             ; CODE XREF: sub_40E810+214↓j
.text:0040E831                                         ; sub_40E810+2C7↓j
.text:0040E831                 add     esp, 13Ch
.text:0040E837                 pop     ebx
.text:0040E838                 pop     esi
.text:0040E839                 pop     edi
.text:0040E83A                 pop     ebp
.text:0040E83B                 retn
.text:0040E83B ; ---------------------------------------------------------------------------
.text:0040E83C                 align 10h
.text:0040E840
.text:0040E840 loc_40E840:                             ; CODE XREF: sub_40E810+1D↑j
.text:0040E840                 call    _errno
.text:0040E845                 cmp     dword ptr [eax], 26h ; '&'
.text:0040E848                 jnz     short loc_40E82F
.text:0040E84A                 mov     [esp+14Ch+Str], esi ; Str
.text:0040E84D                 call    strlen
.text:0040E852                 lea     ecx, [eax+esi]
.text:0040E855                 test    eax, eax
.text:0040E857                 lea     edx, [esp+14Ch+var_12C]
.text:0040E85B                 mov     [esp+14Ch+var_130], ecx
.text:0040E85F                 mov     ecx, 0FFD19553h
.text:0040E864                 mov     [esp+14Ch+var_28], edx
.text:0040E86B                 mov     [esp+14Ch+FileHandle], ecx
.text:0040E872                 jz      loc_40EE70
.text:0040E878                 cmp     byte ptr [esi], 2Fh ; '/'
.text:0040E87B                 jz      loc_40EC10
.text:0040E881                 mov     ebp, esi
.text:0040E883                 lea     esi, [esi+0]
.text:0040E889                 lea     edi, [edi+0]
.text:0040E890
.text:0040E890 loc_40E890:                             ; CODE XREF: sub_40E810+16B↓j
.text:0040E890                                         ; sub_40E810+5B5↓j ...
.text:0040E890                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040E898                 mov     [esp+14Ch+Str], ebp ; Str
.text:0040E89B                 call    strspn
.text:0040E8A0                 lea     esi, [eax+ebp]
.text:0040E8A3                 cmp     byte ptr [esi], 0
.text:0040E8A6                 jz      loc_40EB80
.text:0040E8AC                 mov     eax, [esp+14Ch+var_130]
.text:0040E8B0                 sub     eax, esi
.text:0040E8B2                 cmp     eax, 103h
.text:0040E8B7                 jle     loc_40EA52
.text:0040E8BD                 mov     [esp+14Ch+MaxCount], eax ; MaxCount
.text:0040E8C1                 mov     ebx, eax
.text:0040E8C3                 mov     [esp+14Ch+Control], 2Fh ; '/' ; Val
.text:0040E8CB                 mov     [esp+14Ch+Str], esi ; Buf
.text:0040E8CE                 call    memchr
.text:0040E8D3                 test    eax, eax
.text:0040E8D5                 jz      short loc_40E8DB
.text:0040E8D7                 mov     ebx, eax
.text:0040E8D9                 sub     ebx, esi
.text:0040E8DB
.text:0040E8DB loc_40E8DB:                             ; CODE XREF: sub_40E810+C5↑j
.text:0040E8DB                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040E8E3                 mov     [esp+14Ch+Str], esi ; Str
.text:0040E8E6                 call    strcspn
.text:0040E8EB                 cmp     ebx, eax
.text:0040E8ED                 jnz     loc_40EA36
.text:0040E8F3                 mov     edx, [esp+14Ch+var_28]
.text:0040E8FA                 lea     ecx, [esp+14Ch+var_12C]
.text:0040E8FE                 xor     eax, eax
.text:0040E900                 lea     ebp, [ebx+esi]
.text:0040E903                 lea     edi, [esp+14Ch+var_29]
.text:0040E90A                 cmp     ecx, edx
.text:0040E90C                 jnb     short loc_40E916
.text:0040E90E                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040E912                 jz      short loc_40E916
.text:0040E914                 mov     al, 1
.text:0040E916
.text:0040E916 loc_40E916:                             ; CODE XREF: sub_40E810+FC↑j
.text:0040E916                                         ; sub_40E810+102↑j
.text:0040E916                 lea     edx, [ebx+1]
.text:0040E919                 mov     cl, al
.text:0040E91B                 cmp     edx, 103h
.text:0040E921                 ja      loc_40EA29
.text:0040E927                 mov     edx, [esp+14Ch+var_28]
.text:0040E92E                 movzx   eax, al
.text:0040E931                 lea     eax, [ebx+eax+1]
.text:0040E935                 sub     edi, edx
.text:0040E937                 cmp     edi, eax
.text:0040E939                 jnb     short loc_40E94C
.text:0040E93B                 lea     eax, [esp+14Ch+var_12C]
.text:0040E93F                 cmp     edx, eax
.text:0040E941                 jnz     short loc_40E980
.text:0040E943
.text:0040E943 loc_40E943:                             ; CODE XREF: sub_40E810+1BC↓j
.text:0040E943                 mov     edx, [esp+14Ch+var_28]
.text:0040E94A                 xor     ecx, ecx
.text:0040E94C
.text:0040E94C loc_40E94C:                             ; CODE XREF: sub_40E810+129↑j
.text:0040E94C                 test    cl, cl
.text:0040E94E                 jz      short loc_40E964
.text:0040E950                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E953                 mov     ecx, [esp+14Ch+var_28]
.text:0040E95A                 inc     ecx
.text:0040E95B                 mov     [esp+14Ch+var_28], ecx
.text:0040E962                 mov     edx, ecx
.text:0040E964
.text:0040E964 loc_40E964:                             ; CODE XREF: sub_40E810+13E↑j
.text:0040E964                 mov     [esp+14Ch+MaxCount], ebx
.text:0040E968                 mov     [esp+14Ch+Control], esi
.text:0040E96C
.text:0040E96C loc_40E96C:                             ; CODE XREF: sub_40E810+480↓j
.text:0040E96C                 mov     [esp+14Ch+Str], edx
.text:0040E96F                 call    sub_41A740
.text:0040E974                 mov     [esp+14Ch+var_28], eax
.text:0040E97B                 jmp     loc_40E890
.text:0040E980 ; ---------------------------------------------------------------------------
.text:0040E980
.text:0040E980 loc_40E980:                             ; CODE XREF: sub_40E810+131↑j
.text:0040E980                 mov     byte ptr [edx], 0
.text:0040E983                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040E98A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040E992                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E996                 mov     [esp+14Ch+Str], ecx ; int
.text:0040E999                 call    sub_415B80
.text:0040E99E                 test    eax, eax
.text:0040E9A0                 mov     edi, eax
.text:0040E9A2                 js      short loc_40E9D1
.text:0040E9A4
.text:0040E9A4 loc_40E9A4:                             ; CODE XREF: sub_40E810+1E4↓j
.text:0040E9A4                 mov     eax, [esp+14Ch+FileHandle]
.text:0040E9AB                 cmp     eax, 0FFD19553h
.text:0040E9B0                 jz      short loc_40E9BA
.text:0040E9B2                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040E9B5                 call    _close
.text:0040E9BA
.text:0040E9BA loc_40E9BA:                             ; CODE XREF: sub_40E810+1A0↑j
.text:0040E9BA                 mov     [esp+14Ch+FileHandle], edi
.text:0040E9C1                 lea     edx, [esp+14Ch+var_12C]
.text:0040E9C5                 mov     [esp+14Ch+var_28], edx
.text:0040E9CC                 jmp     loc_40E943
.text:0040E9D1 ; ---------------------------------------------------------------------------
.text:0040E9D1
.text:0040E9D1 loc_40E9D1:                             ; CODE XREF: sub_40E810+192↑j
.text:0040E9D1                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040E9D9                 mov     edi, [esp+14Ch+FileHandle]
.text:0040E9E0                 lea     eax, [esp+14Ch+var_12C]
.text:0040E9E4                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E9E8                 mov     [esp+14Ch+Str], edi ; int
.text:0040E9EB                 call    sub_415B80
.text:0040E9F0                 test    eax, eax
.text:0040E9F2                 mov     edi, eax
.text:0040E9F4                 jns     short loc_40E9A4
.text:0040E9F6
.text:0040E9F6 loc_40E9F6:                             ; CODE XREF: sub_40E810+224↓j
.text:0040E9F6                                         ; sub_40E810+2A4↓j ...
.text:0040E9F6                 call    _errno
.text:0040E9FB                 mov     ebx, [eax]
.text:0040E9FD                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EA04                 test    eax, eax
.text:0040EA06                 js      short loc_40EA18
.text:0040EA08                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EA0B                 call    _close
.text:0040EA10                 test    eax, eax
.text:0040EA12                 jnz     loc_40EE8C
.text:0040EA18
.text:0040EA18 loc_40EA18:                             ; CODE XREF: sub_40E810+1F6↑j
.text:0040EA18                 call    _errno
.text:0040EA1D                 mov     [eax], ebx
.text:0040EA1F                 mov     eax, 0FFFFFFFFh
.text:0040EA24                 jmp     loc_40E831
.text:0040EA29 ; ---------------------------------------------------------------------------
.text:0040EA29
.text:0040EA29 loc_40EA29:                             ; CODE XREF: sub_40E810+111↑j
.text:0040EA29                                         ; sub_40E810+54E↓j
.text:0040EA29                 call    _errno
.text:0040EA2E                 mov     dword ptr [eax], 26h ; '&'
.text:0040EA34                 jmp     short loc_40E9F6
.text:0040EA36 ; ---------------------------------------------------------------------------
.text:0040EA36
.text:0040EA36 loc_40EA36:                             ; CODE XREF: sub_40E810+DD↑j
.text:0040EA36                 mov     [esp+14Ch+MaxCount], 105h
.text:0040EA3E                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_3 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040EA46                 mov     [esp+14Ch+Str], offset aLenStrcspnStar ; "len == strcspn (start, \"/\")"
.text:0040EA4D
.text:0040EA4D loc_40EA4D:                             ; CODE XREF: sub_40E810+5DA↓j
.text:0040EA4D                                         ; sub_40E810+677↓j
.text:0040EA4D                 call    _assert
.text:0040EA52 ; ---------------------------------------------------------------------------
.text:0040EA52
.text:0040EA52 loc_40EA52:                             ; CODE XREF: sub_40E810+A7↑j
.text:0040EA52                 mov     eax, [esp+14Ch+var_28]
.text:0040EA59                 lea     edx, [esp+14Ch+var_12C]
.text:0040EA5D                 cmp     eax, edx
.text:0040EA5F                 jnz     loc_40EB02
.text:0040EA65
.text:0040EA65 loc_40EA65:                             ; CODE XREF: sub_40E810+33E↓j
.text:0040EA65                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040EA6D                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040EA74                 mov     [esp+14Ch+Control], esi ; char *
.text:0040EA78                 mov     [esp+14Ch+Str], ebx ; int
.text:0040EA7B                 call    sub_415B80
.text:0040EA80                 test    eax, eax
.text:0040EA82                 mov     ebx, eax
.text:0040EA84                 js      short loc_40EADC
.text:0040EA86
.text:0040EA86 loc_40EA86:                             ; CODE XREF: sub_40E810+2EB↓j
.text:0040EA86                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EA8D                 cmp     eax, 0FFD19553h
.text:0040EA92                 jz      short loc_40EA9C
.text:0040EA94                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EA97                 call    _close
.text:0040EA9C
.text:0040EA9C loc_40EA9C:                             ; CODE XREF: sub_40E810+282↑j
.text:0040EA9C                 mov     [esp+14Ch+FileHandle], ebx
.text:0040EAA3
.text:0040EAA3 loc_40EAA3:                             ; CODE XREF: sub_40E810+37D↓j
.text:0040EAA3                                         ; sub_40E810+3CF↓j
.text:0040EAA3                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040EAAA                 mov     [esp+14Ch+Str], ebp
.text:0040EAAD                 call    sub_415CE0
.text:0040EAB2                 test    eax, eax
.text:0040EAB4                 jnz     loc_40E9F6
.text:0040EABA                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EAC1                 test    eax, eax
.text:0040EAC3                 js      short loc_40EAD5
.text:0040EAC5                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EAC8                 call    _close
.text:0040EACD                 test    eax, eax
.text:0040EACF                 jnz     loc_40EE8C
.text:0040EAD5
.text:0040EAD5 loc_40EAD5:                             ; CODE XREF: sub_40E810+2B3↑j
.text:0040EAD5                 xor     eax, eax
.text:0040EAD7                 jmp     loc_40E831
.text:0040EADC ; ---------------------------------------------------------------------------
.text:0040EADC
.text:0040EADC loc_40EADC:                             ; CODE XREF: sub_40E810+274↑j
.text:0040EADC                 mov     [esp+14Ch+Control], esi ; char *
.text:0040EAE0                 mov     esi, [esp+14Ch+FileHandle]
.text:0040EAE7                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040EAEF                 mov     [esp+14Ch+Str], esi ; int
.text:0040EAF2                 call    sub_415B80
.text:0040EAF7                 test    eax, eax
.text:0040EAF9                 mov     ebx, eax
.text:0040EAFB                 jns     short loc_40EA86
.text:0040EAFD                 jmp     loc_40E9F6
.text:0040EB02 ; ---------------------------------------------------------------------------
.text:0040EB02
.text:0040EB02 loc_40EB02:                             ; CODE XREF: sub_40E810+24F↑j
.text:0040EB02                 mov     byte ptr [eax], 0
.text:0040EB05                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040EB0C                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040EB14                 mov     [esp+14Ch+Control], edx ; char *
.text:0040EB18                 mov     [esp+14Ch+Str], ebp ; int
.text:0040EB1B                 call    sub_415B80
.text:0040EB20                 test    eax, eax
.text:0040EB22                 mov     ebx, eax
.text:0040EB24                 js      short loc_40EB53
.text:0040EB26
.text:0040EB26 loc_40EB26:                             ; CODE XREF: sub_40E810+366↓j
.text:0040EB26                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EB2D                 cmp     eax, 0FFD19553h
.text:0040EB32                 jz      short loc_40EB3C
.text:0040EB34                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EB37                 call    _close
.text:0040EB3C
.text:0040EB3C loc_40EB3C:                             ; CODE XREF: sub_40E810+322↑j
.text:0040EB3C                 mov     [esp+14Ch+FileHandle], ebx
.text:0040EB43                 lea     edi, [esp+14Ch+var_12C]
.text:0040EB47                 mov     [esp+14Ch+var_28], edi
.text:0040EB4E                 jmp     loc_40EA65
.text:0040EB53 ; ---------------------------------------------------------------------------
.text:0040EB53
.text:0040EB53 loc_40EB53:                             ; CODE XREF: sub_40E810+314↑j
.text:0040EB53                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040EB5B                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040EB62                 lea     eax, [esp+14Ch+var_12C]
.text:0040EB66                 mov     [esp+14Ch+Control], eax ; char *
.text:0040EB6A                 mov     [esp+14Ch+Str], ecx ; int
.text:0040EB6D                 call    sub_415B80
.text:0040EB72                 test    eax, eax
.text:0040EB74                 mov     ebx, eax
.text:0040EB76                 jns     short loc_40EB26
.text:0040EB78                 jmp     loc_40E9F6
.text:0040EB78 ; ---------------------------------------------------------------------------
.text:0040EB7D                 align 10h
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: sub_40E810+96↑j
.text:0040EB80                 mov     eax, [esp+14Ch+var_28]
.text:0040EB87                 lea     edx, [esp+14Ch+var_12C]
.text:0040EB8B                 cmp     eax, edx
.text:0040EB8D                 jz      loc_40EAA3
.text:0040EB93                 mov     byte ptr [eax], 0
.text:0040EB96                 mov     esi, [esp+14Ch+FileHandle]
.text:0040EB9D                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040EBA5                 mov     [esp+14Ch+Control], edx ; char *
.text:0040EBA9                 mov     [esp+14Ch+Str], esi ; int
.text:0040EBAC                 call    sub_415B80
.text:0040EBB1                 test    eax, eax
.text:0040EBB3                 mov     ebx, eax
.text:0040EBB5                 js      short loc_40EBE4
.text:0040EBB7
.text:0040EBB7 loc_40EBB7:                             ; CODE XREF: sub_40E810+3F7↓j
.text:0040EBB7                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EBBE                 cmp     eax, 0FFD19553h
.text:0040EBC3                 jz      short loc_40EBCD
.text:0040EBC5                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EBC8                 call    _close
.text:0040EBCD
.text:0040EBCD loc_40EBCD:                             ; CODE XREF: sub_40E810+3B3↑j
.text:0040EBCD                 mov     [esp+14Ch+FileHandle], ebx
.text:0040EBD4                 lea     edx, [esp+14Ch+var_12C]
.text:0040EBD8                 mov     [esp+14Ch+var_28], edx
.text:0040EBDF                 jmp     loc_40EAA3
.text:0040EBE4 ; ---------------------------------------------------------------------------
.text:0040EBE4
.text:0040EBE4 loc_40EBE4:                             ; CODE XREF: sub_40E810+3A5↑j
.text:0040EBE4                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040EBEC                 mov     edi, [esp+14Ch+FileHandle]
.text:0040EBF3                 lea     ebx, [esp+14Ch+var_12C]
.text:0040EBF7                 mov     [esp+14Ch+Control], ebx ; char *
.text:0040EBFB                 mov     [esp+14Ch+Str], edi ; int
.text:0040EBFE                 call    sub_415B80
.text:0040EC03                 test    eax, eax
.text:0040EC05                 mov     ebx, eax
.text:0040EC07                 jns     short loc_40EBB7
.text:0040EC09                 jmp     loc_40E9F6
.text:0040EC09 ; ---------------------------------------------------------------------------
.text:0040EC0E                 align 10h
.text:0040EC10
.text:0040EC10 loc_40EC10:                             ; CODE XREF: sub_40E810+6B↑j
.text:0040EC10                 cmp     eax, 2
.text:0040EC13                 jbe     short loc_40EC1F
.text:0040EC15                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:0040EC19                 jz      loc_40ED10
.text:0040EC1F
.text:0040EC1F loc_40EC1F:                             ; CODE XREF: sub_40E810+403↑j
.text:0040EC1F                                         ; sub_40E810+504↓j
.text:0040EC1F                 mov     edx, [esp+14Ch+var_28]
.text:0040EC26                 lea     ebp, [esp+14Ch+var_12C]
.text:0040EC2A                 xor     eax, eax
.text:0040EC2C                 lea     ebx, [esp+14Ch+var_29]
.text:0040EC33                 cmp     ebp, edx
.text:0040EC35                 jnb     short loc_40EC3F
.text:0040EC37                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040EC3B                 jz      short loc_40EC3F
.text:0040EC3D                 mov     al, 1
.text:0040EC3F
.text:0040EC3F loc_40EC3F:                             ; CODE XREF: sub_40E810+425↑j
.text:0040EC3F                                         ; sub_40E810+42B↑j
.text:0040EC3F                 mov     edx, [esp+14Ch+var_28]
.text:0040EC46                 movzx   edi, al
.text:0040EC49                 mov     cl, al
.text:0040EC4B                 add     edi, 2
.text:0040EC4E                 sub     ebx, edx
.text:0040EC50                 cmp     ebx, edi
.text:0040EC52                 jnb     short loc_40EC65
.text:0040EC54                 lea     eax, [esp+14Ch+var_12C]
.text:0040EC58                 cmp     edx, eax
.text:0040EC5A                 jnz     short loc_40EC95
.text:0040EC5C
.text:0040EC5C loc_40EC5C:                             ; CODE XREF: sub_40E810+4D1↓j
.text:0040EC5C                 mov     edx, [esp+14Ch+var_28]
.text:0040EC63                 xor     ecx, ecx
.text:0040EC65
.text:0040EC65 loc_40EC65:                             ; CODE XREF: sub_40E810+442↑j
.text:0040EC65                 test    cl, cl
.text:0040EC67                 jz      short loc_40EC7D
.text:0040EC69                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040EC6C                 mov     ecx, [esp+14Ch+var_28]
.text:0040EC73                 inc     ecx
.text:0040EC74                 mov     [esp+14Ch+var_28], ecx
.text:0040EC7B                 mov     edx, ecx
.text:0040EC7D
.text:0040EC7D loc_40EC7D:                             ; CODE XREF: sub_40E810+457↑j
.text:0040EC7D                 mov     [esp+14Ch+MaxCount], 1
.text:0040EC85                 lea     ebp, [esi+1]
.text:0040EC88                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040EC90                 jmp     loc_40E96C
.text:0040EC95 ; ---------------------------------------------------------------------------
.text:0040EC95
.text:0040EC95 loc_40EC95:                             ; CODE XREF: sub_40E810+44A↑j
.text:0040EC95                 mov     byte ptr [edx], 0
.text:0040EC98                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040EC9F                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040ECA7                 mov     [esp+14Ch+Control], eax ; char *
.text:0040ECAB                 mov     [esp+14Ch+Str], ebx ; int
.text:0040ECAE                 call    sub_415B80
.text:0040ECB3                 test    eax, eax
.text:0040ECB5                 mov     ebx, eax
.text:0040ECB7                 js      short loc_40ECE6
.text:0040ECB9
.text:0040ECB9 loc_40ECB9:                             ; CODE XREF: sub_40E810+4F9↓j
.text:0040ECB9                 mov     eax, [esp+14Ch+FileHandle]
.text:0040ECC0                 cmp     eax, 0FFD19553h
.text:0040ECC5                 jz      short loc_40ECCF
.text:0040ECC7                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040ECCA                 call    _close
.text:0040ECCF
.text:0040ECCF loc_40ECCF:                             ; CODE XREF: sub_40E810+4B5↑j
.text:0040ECCF                 mov     [esp+14Ch+FileHandle], ebx
.text:0040ECD6                 lea     ebp, [esp+14Ch+var_12C]
.text:0040ECDA                 mov     [esp+14Ch+var_28], ebp
.text:0040ECE1                 jmp     loc_40EC5C
.text:0040ECE6 ; ---------------------------------------------------------------------------
.text:0040ECE6
.text:0040ECE6 loc_40ECE6:                             ; CODE XREF: sub_40E810+4A7↑j
.text:0040ECE6                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040ECEE                 mov     edx, [esp+14Ch+FileHandle]
.text:0040ECF5                 lea     eax, [esp+14Ch+var_12C]
.text:0040ECF9                 mov     [esp+14Ch+Control], eax ; char *
.text:0040ECFD                 mov     [esp+14Ch+Str], edx ; int
.text:0040ED00                 call    sub_415B80
.text:0040ED05                 test    eax, eax
.text:0040ED07                 mov     ebx, eax
.text:0040ED09                 jns     short loc_40ECB9
.text:0040ED0B                 jmp     loc_40E9F6
.text:0040ED10 ; ---------------------------------------------------------------------------
.text:0040ED10
.text:0040ED10 loc_40ED10:                             ; CODE XREF: sub_40E810+409↑j
.text:0040ED10                 cmp     byte ptr [esi+2], 2Fh ; '/'
.text:0040ED14                 jz      loc_40EC1F
.text:0040ED1A                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040ED22                 lea     ebx, [esi+3]
.text:0040ED25                 mov     [esp+14Ch+Str], ebx ; Str
.text:0040ED28                 lea     ebx, [esp+14Ch+var_29]
.text:0040ED2F                 call    strcspn
.text:0040ED34                 mov     edx, [esp+14Ch+var_28]
.text:0040ED3B                 lea     ecx, [esp+14Ch+var_12C]
.text:0040ED3F                 lea     ebp, [eax+1]
.text:0040ED42                 lea     edi, [eax+3]
.text:0040ED45                 xor     eax, eax
.text:0040ED47                 cmp     ecx, edx
.text:0040ED49                 jnb     short loc_40ED53
.text:0040ED4B                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040ED4F                 jz      short loc_40ED53
.text:0040ED51                 mov     al, 1
.text:0040ED53
.text:0040ED53 loc_40ED53:                             ; CODE XREF: sub_40E810+539↑j
.text:0040ED53                                         ; sub_40E810+53F↑j
.text:0040ED53                 lea     edx, [edi+1]
.text:0040ED56                 mov     cl, al
.text:0040ED58                 cmp     edx, 103h
.text:0040ED5E                 ja      loc_40EA29
.text:0040ED64                 mov     edx, [esp+14Ch+var_28]
.text:0040ED6B                 movzx   eax, al
.text:0040ED6E                 lea     eax, [edi+eax+1]
.text:0040ED72                 sub     ebx, edx
.text:0040ED74                 cmp     ebx, eax
.text:0040ED76                 jnb     short loc_40ED89
.text:0040ED78                 lea     eax, [esp+14Ch+var_12C]
.text:0040ED7C                 cmp     edx, eax
.text:0040ED7E                 jnz     short loc_40EDF0
.text:0040ED80
.text:0040ED80 loc_40ED80:                             ; CODE XREF: sub_40E810+62C↓j
.text:0040ED80                 mov     edx, [esp+14Ch+var_28]
.text:0040ED87                 xor     ecx, ecx
.text:0040ED89
.text:0040ED89 loc_40ED89:                             ; CODE XREF: sub_40E810+566↑j
.text:0040ED89                 test    cl, cl
.text:0040ED8B                 jz      short loc_40EDA1
.text:0040ED8D                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040ED90                 mov     ecx, [esp+14Ch+var_28]
.text:0040ED97                 inc     ecx
.text:0040ED98                 mov     [esp+14Ch+var_28], ecx
.text:0040ED9F                 mov     edx, ecx
.text:0040EDA1
.text:0040EDA1 loc_40EDA1:                             ; CODE XREF: sub_40E810+57B↑j
.text:0040EDA1                 mov     [esp+14Ch+MaxCount], edi
.text:0040EDA5                 lea     edi, [ebp+esi+0]
.text:0040EDA9                 lea     ebp, [edi+2]
.text:0040EDAC                 mov     [esp+14Ch+Control], esi
.text:0040EDB0                 mov     [esp+14Ch+Str], edx
.text:0040EDB3                 call    sub_41A740
.text:0040EDB8                 mov     [esp+14Ch+var_28], eax
.text:0040EDBF                 movzx   eax, byte ptr [edi+2]
.text:0040EDC3                 cmp     al, 2Fh ; '/'
.text:0040EDC5                 jz      loc_40E890
.text:0040EDCB                 test    al, al
.text:0040EDCD                 jz      loc_40E890
.text:0040EDD3                 mov     [esp+14Ch+MaxCount], 0E1h ; 'á'
.text:0040EDDB                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_3 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040EDE3                 mov     [esp+14Ch+Str], offset aDD0 ; "*d == '/' || *d == '\\0'"
.text:0040EDEA                 jmp     loc_40EA4D
.text:0040EDEA ; ---------------------------------------------------------------------------
.text:0040EDEF                 align 10h
.text:0040EDF0
.text:0040EDF0 loc_40EDF0:                             ; CODE XREF: sub_40E810+56E↑j
.text:0040EDF0                 mov     byte ptr [edx], 0
.text:0040EDF3                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040EDFA                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040EE02                 mov     [esp+14Ch+Control], eax ; char *
.text:0040EE06                 mov     [esp+14Ch+Str], ecx ; int
.text:0040EE09                 call    sub_415B80
.text:0040EE0E                 test    eax, eax
.text:0040EE10                 mov     ebx, eax
.text:0040EE12                 js      short loc_40EE41
.text:0040EE14
.text:0040EE14 loc_40EE14:                             ; CODE XREF: sub_40E810+654↓j
.text:0040EE14                 mov     eax, [esp+14Ch+FileHandle]
.text:0040EE1B                 cmp     eax, 0FFD19553h
.text:0040EE20                 jz      short loc_40EE2A
.text:0040EE22                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040EE25                 call    _close
.text:0040EE2A
.text:0040EE2A loc_40EE2A:                             ; CODE XREF: sub_40E810+610↑j
.text:0040EE2A                 mov     [esp+14Ch+FileHandle], ebx
.text:0040EE31                 lea     edx, [esp+14Ch+var_12C]
.text:0040EE35                 mov     [esp+14Ch+var_28], edx
.text:0040EE3C                 jmp     loc_40ED80
.text:0040EE41 ; ---------------------------------------------------------------------------
.text:0040EE41
.text:0040EE41 loc_40EE41:                             ; CODE XREF: sub_40E810+602↑j
.text:0040EE41                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040EE49                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040EE50                 lea     eax, [esp+14Ch+var_12C]
.text:0040EE54                 mov     [esp+14Ch+Control], eax ; char *
.text:0040EE58                 mov     [esp+14Ch+Str], ebx ; int
.text:0040EE5B                 call    sub_415B80
.text:0040EE60                 test    eax, eax
.text:0040EE62                 mov     ebx, eax
.text:0040EE64                 jns     short loc_40EE14
.text:0040EE66                 jmp     loc_40E9F6
.text:0040EE66 ; ---------------------------------------------------------------------------
.text:0040EE6B                 align 10h
.text:0040EE70
.text:0040EE70 loc_40EE70:                             ; CODE XREF: sub_40E810+62↑j
.text:0040EE70                 mov     [esp+14Ch+MaxCount], 0D0h ; 'Ð'
.text:0040EE78                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_3 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040EE80                 mov     [esp+14Ch+Str], offset a0Len ; "0 < len"
.text:0040EE87                 jmp     loc_40EA4D
.text:0040EE8C ; ---------------------------------------------------------------------------
.text:0040EE8C
.text:0040EE8C loc_40EE8C:                             ; CODE XREF: sub_40E810+202↑j
.text:0040EE8C                                         ; sub_40E810+2BF↑j
.text:0040EE8C                 call    abort
.text:0040EE8C sub_40E810      endp
.text:0040EE8C
.text:0040EE8C ; ---------------------------------------------------------------------------
.text:0040EE91                 align 10h
.text:0040EEA0
.text:0040EEA0 ; =============== S U B R O U T I N E =======================================
.text:0040EEA0
.text:0040EEA0
.text:0040EEA0 sub_40EEA0      proc near               ; CODE XREF: sub_40D170+18↑p
.text:0040EEA0
.text:0040EEA0 DstBuf          = dword ptr -0Ch
.text:0040EEA0 SizeInBytes     = dword ptr -8
.text:0040EEA0 var_4           = dword ptr -4
.text:0040EEA0
.text:0040EEA0                 sub     esp, 0Ch
.text:0040EEA3                 mov     [esp+0Ch+var_4], ebx
.text:0040EEA7                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:0040EEAF                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:0040EEB6                 call    j__getcwd
.text:0040EEBB                 test    eax, eax
.text:0040EEBD                 mov     ebx, eax
.text:0040EEBF                 jz      short loc_40EECB
.text:0040EEC1
.text:0040EEC1 loc_40EEC1:                             ; CODE XREF: sub_40EEA0+33↓j
.text:0040EEC1                 mov     eax, ebx
.text:0040EEC3                 mov     ebx, [esp+0Ch+var_4]
.text:0040EEC7                 add     esp, 0Ch
.text:0040EECA                 retn
.text:0040EECB ; ---------------------------------------------------------------------------
.text:0040EECB
.text:0040EECB loc_40EECB:                             ; CODE XREF: sub_40EEA0+1F↑j
.text:0040EECB                 call    _errno
.text:0040EED0                 cmp     dword ptr [eax], 0Ch
.text:0040EED3                 jnz     short loc_40EEC1
.text:0040EED5                 call    sub_40C060
.text:0040EED5 sub_40EEA0      endp
.text:0040EED5
.text:0040EED5 ; ---------------------------------------------------------------------------
.text:0040EEDA                 align 10h
.text:0040EEE0
.text:0040EEE0 ; =============== S U B R O U T I N E =======================================
.text:0040EEE0
.text:0040EEE0
.text:0040EEE0 sub_40EEE0      proc near               ; CODE XREF: sub_40EF30+3A↓j
.text:0040EEE0                                         ; sub_412110+46B↓p ...
.text:0040EEE0
.text:0040EEE0 arg_0           = dword ptr  4
.text:0040EEE0 arg_4           = dword ptr  8
.text:0040EEE0 arg_8           = dword ptr  0Ch
.text:0040EEE0
.text:0040EEE0                 mov     edx, [esp+arg_8]
.text:0040EEE4                 mov     ecx, [esp+arg_4]
.text:0040EEE8                 mov     eax, [esp+arg_0]
.text:0040EEEC                 mov     [ecx+1], dl
.text:0040EEEF                 sar     edx, 8
.text:0040EEF2                 mov     [ecx], al
.text:0040EEF4                 mov     [ecx+2], dl
.text:0040EEF7                 retn
.text:0040EEF7 sub_40EEE0      endp
.text:0040EEF7
.text:0040EEF7 ; ---------------------------------------------------------------------------
.text:0040EEF8                 align 10h
.text:0040EF00
.text:0040EF00 ; =============== S U B R O U T I N E =======================================
.text:0040EF00
.text:0040EF00
.text:0040EF00 sub_40EF00      proc near               ; CODE XREF: sub_40EF70+3F↓j
.text:0040EF00                                         ; sub_412110+313B↓p
.text:0040EF00
.text:0040EF00 arg_0           = dword ptr  4
.text:0040EF00 arg_4           = dword ptr  8
.text:0040EF00 arg_8           = dword ptr  0Ch
.text:0040EF00 arg_C           = dword ptr  10h
.text:0040EF00
.text:0040EF00                 push    ebx
.text:0040EF01                 mov     edx, [esp+4+arg_8]
.text:0040EF05                 mov     ebx, [esp+4+arg_C]
.text:0040EF09                 mov     ecx, [esp+4+arg_4]
.text:0040EF0D                 mov     eax, [esp+4+arg_0]
.text:0040EF11                 mov     [ecx+1], dl
.text:0040EF14                 sar     edx, 8
.text:0040EF17                 mov     [ecx+3], bl
.text:0040EF1A                 sar     ebx, 8
.text:0040EF1D                 mov     [ecx], al
.text:0040EF1F                 mov     [ecx+2], dl
.text:0040EF22                 mov     [ecx+4], bl
.text:0040EF25                 pop     ebx
.text:0040EF26                 retn
.text:0040EF26 sub_40EF00      endp
.text:0040EF26
.text:0040EF26 ; ---------------------------------------------------------------------------
.text:0040EF27                 align 10h
.text:0040EF30
.text:0040EF30 ; =============== S U B R O U T I N E =======================================
.text:0040EF30
.text:0040EF30
.text:0040EF30 sub_40EF30      proc near               ; CODE XREF: sub_412110+967↓p
.text:0040EF30                                         ; sub_412110+137C↓p ...
.text:0040EF30
.text:0040EF30 arg_0           = dword ptr  4
.text:0040EF30 arg_4           = dword ptr  8
.text:0040EF30 arg_8           = dword ptr  0Ch
.text:0040EF30 arg_C           = dword ptr  10h
.text:0040EF30
.text:0040EF30                 push    edi
.text:0040EF31                 push    esi
.text:0040EF32                 push    ebx
.text:0040EF33                 mov     edx, [esp+0Ch+arg_C]
.text:0040EF37                 mov     ebx, [esp+0Ch+arg_4]
.text:0040EF3B                 mov     edi, [esp+0Ch+arg_0]
.text:0040EF3F                 mov     esi, [esp+0Ch+arg_8]
.text:0040EF43                 lea     ecx, [edx+3]
.text:0040EF46                 cmp     edx, ebx
.text:0040EF48                 jz      short loc_40EF5B
.text:0040EF4A                 lea     esi, [esi+0]
.text:0040EF50
.text:0040EF50 loc_40EF50:                             ; CODE XREF: sub_40EF30+29↓j
.text:0040EF50                 dec     edx
.text:0040EF51                 dec     ecx
.text:0040EF52                 cmp     edx, ebx
.text:0040EF54                 movzx   eax, byte ptr [edx]
.text:0040EF57                 mov     [ecx], al
.text:0040EF59                 jnz     short loc_40EF50
.text:0040EF5B
.text:0040EF5B loc_40EF5B:                             ; CODE XREF: sub_40EF30+18↑j
.text:0040EF5B                 mov     [esp+0Ch+arg_8], esi
.text:0040EF5F                 mov     [esp+0Ch+arg_0], edi
.text:0040EF63                 mov     [esp+0Ch+arg_4], ebx
.text:0040EF67                 pop     ebx
.text:0040EF68                 pop     esi
.text:0040EF69                 pop     edi
.text:0040EF6A                 jmp     sub_40EEE0
.text:0040EF6A sub_40EF30      endp
.text:0040EF6A
.text:0040EF6A ; ---------------------------------------------------------------------------
.text:0040EF6F                 align 10h
.text:0040EF70
.text:0040EF70 ; =============== S U B R O U T I N E =======================================
.text:0040EF70
.text:0040EF70
.text:0040EF70 sub_40EF70      proc near               ; CODE XREF: sub_412110+30CC↓p
.text:0040EF70                                         ; sub_412110+30F8↓p ...
.text:0040EF70
.text:0040EF70 arg_0           = dword ptr  4
.text:0040EF70 arg_4           = dword ptr  8
.text:0040EF70 arg_8           = dword ptr  0Ch
.text:0040EF70 arg_C           = dword ptr  10h
.text:0040EF70 arg_10          = dword ptr  14h
.text:0040EF70
.text:0040EF70                 push    ebp
.text:0040EF71                 push    edi
.text:0040EF72                 push    esi
.text:0040EF73                 push    ebx
.text:0040EF74                 mov     edx, [esp+10h+arg_10]
.text:0040EF78                 mov     ebx, [esp+10h+arg_4]
.text:0040EF7C                 mov     ebp, [esp+10h+arg_0]
.text:0040EF80                 mov     edi, [esp+10h+arg_8]
.text:0040EF84                 lea     ecx, [edx+5]
.text:0040EF87                 cmp     edx, ebx
.text:0040EF89                 mov     esi, [esp+10h+arg_C]
.text:0040EF8D                 jz      short loc_40EF9B
.text:0040EF8F                 nop
.text:0040EF90
.text:0040EF90 loc_40EF90:                             ; CODE XREF: sub_40EF70+29↓j
.text:0040EF90                 dec     edx
.text:0040EF91                 dec     ecx
.text:0040EF92                 cmp     edx, ebx
.text:0040EF94                 movzx   eax, byte ptr [edx]
.text:0040EF97                 mov     [ecx], al
.text:0040EF99                 jnz     short loc_40EF90
.text:0040EF9B
.text:0040EF9B loc_40EF9B:                             ; CODE XREF: sub_40EF70+1D↑j
.text:0040EF9B                 mov     [esp+10h+arg_C], esi
.text:0040EF9F                 mov     [esp+10h+arg_8], edi
.text:0040EFA3                 mov     [esp+10h+arg_0], ebp
.text:0040EFA7                 mov     [esp+10h+arg_4], ebx
.text:0040EFAB                 pop     ebx
.text:0040EFAC                 pop     esi
.text:0040EFAD                 pop     edi
.text:0040EFAE                 pop     ebp
.text:0040EFAF                 jmp     sub_40EF00
.text:0040EFAF sub_40EF70      endp
.text:0040EFAF
.text:0040EFAF ; ---------------------------------------------------------------------------
.text:0040EFB4                 align 10h
.text:0040EFC0
.text:0040EFC0 ; =============== S U B R O U T I N E =======================================
.text:0040EFC0
.text:0040EFC0
.text:0040EFC0 sub_40EFC0      proc near               ; CODE XREF: sub_412110+5C6↓p
.text:0040EFC0
.text:0040EFC0 arg_0           = dword ptr  4
.text:0040EFC0 arg_4           = dword ptr  8
.text:0040EFC0 arg_8           = dword ptr  0Ch
.text:0040EFC0
.text:0040EFC0                 push    ebx
.text:0040EFC1                 mov     edx, [esp+4+arg_4]
.text:0040EFC5                 xor     ebx, ebx
.text:0040EFC7                 mov     ecx, [esp+4+arg_8]
.text:0040EFCB                 sub     edx, 2
.text:0040EFCE                 cmp     edx, [esp+4+arg_0]
.text:0040EFD2                 jbe     short loc_40EFDA
.text:0040EFD4                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:0040EFD8                 jz      short loc_40F012
.text:0040EFDA
.text:0040EFDA loc_40EFDA:                             ; CODE XREF: sub_40EFC0+12↑j
.text:0040EFDA                                         ; sub_40EFC0+54↓j
.text:0040EFDA                 movzx   edx, byte ptr [edx]
.text:0040EFDD                 xor     eax, eax
.text:0040EFDF                 cmp     dl, 28h ; '('
.text:0040EFE2                 jz      short loc_40F007
.text:0040EFE4
.text:0040EFE4 loc_40EFE4:                             ; CODE XREF: sub_40EFC0+50↓j
.text:0040EFE4                 cmp     dl, 7Ch ; '|'
.text:0040EFE7                 jz      short loc_40EFF0
.text:0040EFE9
.text:0040EFE9 loc_40EFE9:                             ; CODE XREF: sub_40EFC0+3D↓j
.text:0040EFE9                                         ; sub_40EFC0+45↓j
.text:0040EFE9                 pop     ebx
.text:0040EFEA                 retn
.text:0040EFEA ; ---------------------------------------------------------------------------
.text:0040EFEB                 align 10h
.text:0040EFF0
.text:0040EFF0 loc_40EFF0:                             ; CODE XREF: sub_40EFC0+27↑j
.text:0040EFF0                 and     ecx, 0FFFF8000h
.text:0040EFF6                 test    cx, cx
.text:0040EFF9                 jnz     short loc_40F000
.text:0040EFFB                 test    bl, bl
.text:0040EFFD                 jz      short loc_40EFE9
.text:0040EFFF                 nop
.text:0040F000
.text:0040F000 loc_40F000:                             ; CODE XREF: sub_40EFC0+39↑j
.text:0040F000                                         ; sub_40EFC0+4A↓j ...
.text:0040F000                 mov     eax, 1
.text:0040F005                 jmp     short loc_40EFE9
.text:0040F007 ; ---------------------------------------------------------------------------
.text:0040F007
.text:0040F007 loc_40F007:                             ; CODE XREF: sub_40EFC0+22↑j
.text:0040F007                 test    ch, 20h
.text:0040F00A                 jnz     short loc_40F000
.text:0040F00C                 test    bl, bl
.text:0040F00E                 jnz     short loc_40F000
.text:0040F010                 jmp     short loc_40EFE4
.text:0040F012 ; ---------------------------------------------------------------------------
.text:0040F012
.text:0040F012 loc_40F012:                             ; CODE XREF: sub_40EFC0+18↑j
.text:0040F012                 mov     bl, 1
.text:0040F014                 jmp     short loc_40EFDA
.text:0040F014 sub_40EFC0      endp
.text:0040F014
.text:0040F014 ; ---------------------------------------------------------------------------
.text:0040F016                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020
.text:0040F020 sub_40F020      proc near               ; CODE XREF: sub_412110+B9A↓p
.text:0040F020
.text:0040F020 var_9           = byte ptr -9
.text:0040F020 var_8           = dword ptr -8
.text:0040F020 var_4           = dword ptr -4
.text:0040F020 arg_0           = dword ptr  4
.text:0040F020 arg_4           = dword ptr  8
.text:0040F020 arg_8           = dword ptr  0Ch
.text:0040F020
.text:0040F020                 sub     esp, 0Ch
.text:0040F023                 mov     edx, [esp+0Ch+arg_8]
.text:0040F027                 mov     [esp+0Ch+var_4], esi
.text:0040F02B                 mov     esi, [esp+0Ch+arg_0]
.text:0040F02F                 mov     [esp+0Ch+var_8], ebx
.text:0040F033                 lea     eax, [esi+1]
.text:0040F036                 movzx   ebx, byte ptr [esi]
.text:0040F039                 cmp     bl, 5Ch ; '\'
.text:0040F03C                 setz    [esp+0Ch+var_9]
.text:0040F041                 cmp     eax, [esp+0Ch+arg_4]
.text:0040F045                 sbb     ecx, ecx
.text:0040F047                 and     ecx, eax
.text:0040F049                 xor     eax, eax
.text:0040F04B                 test    dh, 20h
.text:0040F04E                 jz      short loc_40F088
.text:0040F050                 cmp     bl, 29h ; ')'
.text:0040F053
.text:0040F053 loc_40F053:                             ; CODE XREF: sub_40F020+76↓j
.text:0040F053                 jz      short loc_40F071
.text:0040F055
.text:0040F055 loc_40F055:                             ; CODE XREF: sub_40F020+6D↓j
.text:0040F055                                         ; sub_40F020+71↓j
.text:0040F055                 and     edx, 0FFFF8000h
.text:0040F05B                 test    dx, dx
.text:0040F05E                 jz      short loc_40F078
.text:0040F060                 cmp     byte ptr [esi], 7Ch ; '|'
.text:0040F063
.text:0040F063 loc_40F063:                             ; CODE XREF: sub_40F020+66↓j
.text:0040F063                 jz      short loc_40F071
.text:0040F065
.text:0040F065 loc_40F065:                             ; CODE XREF: sub_40F020+56↓j
.text:0040F065                                         ; sub_40F020+5D↓j ...
.text:0040F065                 mov     ebx, [esp+0Ch+var_8]
.text:0040F069                 mov     esi, [esp+0Ch+var_4]
.text:0040F06D                 add     esp, 0Ch
.text:0040F070                 retn
.text:0040F071 ; ---------------------------------------------------------------------------
.text:0040F071
.text:0040F071 loc_40F071:                             ; CODE XREF: sub_40F020:loc_40F053↑j
.text:0040F071                                         ; sub_40F020:loc_40F063↑j
.text:0040F071                 mov     eax, 1
.text:0040F076                 jmp     short loc_40F065
.text:0040F078 ; ---------------------------------------------------------------------------
.text:0040F078
.text:0040F078 loc_40F078:                             ; CODE XREF: sub_40F020+3E↑j
.text:0040F078                 cmp     [esp+0Ch+var_9], 0
.text:0040F07D                 jz      short loc_40F065
.text:0040F07F                 test    ecx, ecx
.text:0040F081                 jz      short loc_40F065
.text:0040F083                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:0040F086                 jmp     short loc_40F063
.text:0040F088 ; ---------------------------------------------------------------------------
.text:0040F088
.text:0040F088 loc_40F088:                             ; CODE XREF: sub_40F020+2E↑j
.text:0040F088                 cmp     [esp+0Ch+var_9], 0
.text:0040F08D                 jz      short loc_40F055
.text:0040F08F                 test    ecx, ecx
.text:0040F091                 jz      short loc_40F055
.text:0040F093                 cmp     byte ptr [ecx], 29h ; ')'
.text:0040F096                 jmp     short loc_40F053
.text:0040F096 sub_40F020      endp
.text:0040F096
.text:0040F096 ; ---------------------------------------------------------------------------
.text:0040F098                 align 10h
.text:0040F0A0
.text:0040F0A0 ; =============== S U B R O U T I N E =======================================
.text:0040F0A0
.text:0040F0A0
.text:0040F0A0 sub_40F0A0      proc near               ; CODE XREF: sub_412110:loc_4141F3↓p
.text:0040F0A0
.text:0040F0A0 arg_0           = dword ptr  4
.text:0040F0A0 arg_4           = dword ptr  8
.text:0040F0A0 arg_8           = dword ptr  0Ch
.text:0040F0A0 arg_C           = dword ptr  10h
.text:0040F0A0 arg_10          = dword ptr  14h
.text:0040F0A0 arg_14          = dword ptr  18h
.text:0040F0A0
.text:0040F0A0                 push    ebp
.text:0040F0A1                 push    edi
.text:0040F0A2                 push    esi
.text:0040F0A3                 push    ebx
.text:0040F0A4                 mov     ecx, [esp+10h+arg_4]
.text:0040F0A8                 mov     esi, [esp+10h+arg_0]
.text:0040F0AC                 mov     ebx, [esp+10h+arg_C]
.text:0040F0B0                 mov     edx, [ecx]
.text:0040F0B2                 cmp     edx, [esp+10h+arg_8]
.text:0040F0B6                 jz      loc_40F16A
.text:0040F0BC                 lea     edi, [edx+1]
.text:0040F0BF                 mov     [ecx], edi
.text:0040F0C1                 xor     ecx, ecx
.text:0040F0C3                 test    [esp+10h+arg_10], 10000h
.text:0040F0CB                 setz    cl
.text:0040F0CE                 dec     ecx
.text:0040F0CF                 and     ecx, 0Bh
.text:0040F0D2                 test    ebx, ebx
.text:0040F0D4                 jz      loc_40F165
.text:0040F0DA                 movzx   edi, byte ptr [edx]
.text:0040F0DD                 and     esi, 0FFh
.text:0040F0E3                 movsx   esi, byte ptr [esi+ebx]
.text:0040F0E7                 movzx   ebp, byte ptr [edi+ebx]
.text:0040F0EB
.text:0040F0EB loc_40F0EB:                             ; CODE XREF: sub_40F0A0+C8↓j
.text:0040F0EB                 cmp     esi, ebp
.text:0040F0ED                 mov     edx, esi
.text:0040F0EF                 ja      short loc_40F15E
.text:0040F0F1                 jmp     short loc_40F100
.text:0040F0F1 ; ---------------------------------------------------------------------------
.text:0040F0F3                 align 10h
.text:0040F100
.text:0040F100 loc_40F100:                             ; CODE XREF: sub_40F0A0+51↑j
.text:0040F100                                         ; sub_40F0A0+BC↓j
.text:0040F100                 test    ebx, ebx
.text:0040F102                 movzx   eax, dl
.text:0040F105                 jz      short loc_40F10E
.text:0040F107                 movzx   ecx, dl
.text:0040F10A                 movzx   eax, byte ptr [ecx+ebx]
.text:0040F10E
.text:0040F10E loc_40F10E:                             ; CODE XREF: sub_40F0A0+65↑j
.text:0040F10E                 mov     edi, [esp+10h+arg_14]
.text:0040F112                 sar     eax, 3
.text:0040F115                 add     edi, eax
.text:0040F117                 test    ebx, ebx
.text:0040F119                 movzx   eax, dl
.text:0040F11C                 jz      short loc_40F125
.text:0040F11E                 movzx   esi, dl
.text:0040F121                 movzx   eax, byte ptr [esi+ebx]
.text:0040F125
.text:0040F125 loc_40F125:                             ; CODE XREF: sub_40F0A0+7C↑j
.text:0040F125                 mov     esi, [esp+10h+arg_14]
.text:0040F129                 sar     eax, 3
.text:0040F12C                 movzx   ecx, dl
.text:0040F12F                 add     eax, esi
.text:0040F131                 test    ebx, ebx
.text:0040F133                 movzx   esi, byte ptr [eax]
.text:0040F136                 jz      short loc_40F13F
.text:0040F138                 movzx   eax, dl
.text:0040F13B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040F13F
.text:0040F13F loc_40F13F:                             ; CODE XREF: sub_40F0A0+96↑j
.text:0040F13F                 mov     eax, ecx
.text:0040F141                 inc     edx
.text:0040F142                 and     eax, 1F8h
.text:0040F147                 sub     ecx, eax
.text:0040F149                 mov     eax, 1
.text:0040F14E                 shl     eax, cl
.text:0040F150                 mov     ecx, eax
.text:0040F152                 mov     eax, esi
.text:0040F154                 or      al, cl
.text:0040F156                 mov     [edi], al
.text:0040F158                 xor     ecx, ecx
.text:0040F15A                 cmp     edx, ebp
.text:0040F15C                 jbe     short loc_40F100
.text:0040F15E
.text:0040F15E loc_40F15E:                             ; CODE XREF: sub_40F0A0+4F↑j
.text:0040F15E                 mov     eax, ecx
.text:0040F160
.text:0040F160 loc_40F160:                             ; CODE XREF: sub_40F0A0+CF↓j
.text:0040F160                 pop     ebx
.text:0040F161                 pop     esi
.text:0040F162                 pop     edi
.text:0040F163                 pop     ebp
.text:0040F164                 retn
.text:0040F165 ; ---------------------------------------------------------------------------
.text:0040F165
.text:0040F165 loc_40F165:                             ; CODE XREF: sub_40F0A0+34↑j
.text:0040F165                 movzx   ebp, byte ptr [edx]
.text:0040F168                 jmp     short loc_40F0EB
.text:0040F16A ; ---------------------------------------------------------------------------
.text:0040F16A
.text:0040F16A loc_40F16A:                             ; CODE XREF: sub_40F0A0+16↑j
.text:0040F16A                 mov     eax, 0Bh
.text:0040F16F                 jmp     short loc_40F160
.text:0040F16F sub_40F0A0      endp
.text:0040F16F
.text:0040F16F ; ---------------------------------------------------------------------------
.text:0040F171                 db 0EBh, 0Dh, 90h
.text:0040F174                 align 10h
.text:0040F180 jpt_40F477      dd offset loc_40FA2B    ; DATA XREF: sub_40F200:loc_40F470↓r
.text:0040F180                                         ; sub_40F200+BEF↓r ...
.text:0040F180                 dd offset loc_40FA43    ; jump table for switch statement
.text:0040F180                 dd offset loc_40FA48
.text:0040F180                 dd offset loc_40FB43
.text:0040F180                 dd offset loc_4113A6
.text:0040F180                 dd offset loc_4112B0
.text:0040F198 jpt_40FC04      dd offset loc_4111C4    ; DATA XREF: sub_40F200+9FD↓r
.text:0040F198                 dd offset loc_410DC0    ; jump table for switch statement
.text:0040F1A0                 dd offset loc_410C23
.text:0040F1A4                 dd offset loc_410BD9
.text:0040F1A8                 dd offset loc_410B7D
.text:0040F1AC                 dd offset loc_410B40
.text:0040F1B0                 dd offset loc_410B26
.text:0040F1B4                 dd offset loc_41019A
.text:0040F1B8                 dd offset loc_410B21
.text:0040F1BC                 dd offset loc_410B1C
.text:0040F1C0                 dd offset loc_4109A1
.text:0040F1C4                 dd offset loc_4107A5
.text:0040F1C8                 dd offset loc_41070C
.text:0040F1CC                 dd offset loc_410586
.text:0040F1D0                 dd offset loc_410400
.text:0040F1D4                 dd offset loc_4101B8
.text:0040F1D8                 dd offset loc_41016F
.text:0040F1DC                 dd offset loc_410117
.text:0040F1E0                 dd offset loc_410067
.text:0040F1E4                 dd offset loc_40FFB6
.text:0040F1E8                 dd offset loc_40FECA
.text:0040F1EC                 dd offset loc_40FDF8
.text:0040F1F0                 dd offset loc_40FCF2
.text:0040F1F4                 dd offset loc_40FC06
.text:0040F1F8                 align 10h
.text:0040F200
.text:0040F200 ; =============== S U B R O U T I N E =======================================
.text:0040F200
.text:0040F200
.text:0040F200 sub_40F200      proc near               ; CODE XREF: .text:00411F5E↓p
.text:0040F200                                         ; .text:00411F70↓j ...
.text:0040F200
.text:0040F200 Size            = dword ptr -0BCh
.text:0040F200 var_B8          = dword ptr -0B8h
.text:0040F200 var_B4          = dword ptr -0B4h
.text:0040F200 var_B0          = dword ptr -0B0h
.text:0040F200 var_A5          = byte ptr -0A5h
.text:0040F200 var_A4          = dword ptr -0A4h
.text:0040F200 var_A0          = dword ptr -0A0h
.text:0040F200 var_9C          = dword ptr -9Ch
.text:0040F200 var_97          = byte ptr -97h
.text:0040F200 var_96          = byte ptr -96h
.text:0040F200 var_95          = byte ptr -95h
.text:0040F200 var_94          = dword ptr -94h
.text:0040F200 var_90          = dword ptr -90h
.text:0040F200 var_8C          = dword ptr -8Ch
.text:0040F200 var_88          = dword ptr -88h
.text:0040F200 var_84          = dword ptr -84h
.text:0040F200 var_80          = dword ptr -80h
.text:0040F200 var_7C          = dword ptr -7Ch
.text:0040F200 var_78          = dword ptr -78h
.text:0040F200 var_74          = dword ptr -74h
.text:0040F200 var_70          = dword ptr -70h
.text:0040F200 var_6C          = dword ptr -6Ch
.text:0040F200 var_68          = dword ptr -68h
.text:0040F200 var_64          = dword ptr -64h
.text:0040F200 var_60          = dword ptr -60h
.text:0040F200 var_5C          = dword ptr -5Ch
.text:0040F200 var_58          = dword ptr -58h
.text:0040F200 var_54          = dword ptr -54h
.text:0040F200 var_50          = dword ptr -50h
.text:0040F200 var_4C          = dword ptr -4Ch
.text:0040F200 var_48          = dword ptr -48h
.text:0040F200 var_44          = dword ptr -44h
.text:0040F200 var_40          = dword ptr -40h
.text:0040F200 var_3C          = dword ptr -3Ch
.text:0040F200 var_38          = dword ptr -38h
.text:0040F200 var_34          = dword ptr -34h
.text:0040F200 var_30          = dword ptr -30h
.text:0040F200 Src             = dword ptr -2Ch
.text:0040F200 var_28          = dword ptr -28h
.text:0040F200 var_24          = dword ptr -24h
.text:0040F200 arg_0           = dword ptr  4
.text:0040F200 arg_4           = dword ptr  8
.text:0040F200 arg_8           = dword ptr  0Ch
.text:0040F200 arg_C           = dword ptr  10h
.text:0040F200 arg_10          = dword ptr  14h
.text:0040F200 arg_14          = dword ptr  18h
.text:0040F200 arg_18          = dword ptr  1Ch
.text:0040F200 arg_1C          = dword ptr  20h
.text:0040F200
.text:0040F200                 push    ebp
.text:0040F201                 push    edi
.text:0040F202                 push    esi
.text:0040F203                 push    ebx
.text:0040F204                 sub     esp, 0ACh
.text:0040F20A                 mov     ebx, [esp+0BCh+arg_0]
.text:0040F211                 mov     [esp+0BCh+var_54], 0
.text:0040F219                 mov     ecx, [esp+0BCh+arg_0]
.text:0040F220                 mov     esi, [esp+0BCh+arg_1C]
.text:0040F227                 mov     [esp+0BCh+var_60], 101h
.text:0040F22F                 mov     ebp, [ebx+8]
.text:0040F232                 mov     edi, [ecx]
.text:0040F234                 mov     [esp+0BCh+var_64], 100h
.text:0040F23C                 mov     eax, [ebx+18h]
.text:0040F23F                 mov     edx, [ebx+14h]
.text:0040F242                 mov     [esp+0BCh+var_4C], edi
.text:0040F246                 inc     eax
.text:0040F247                 add     edi, ebp
.text:0040F249                 mov     [esp+0BCh+var_58], edx
.text:0040F24D                 mov     [esp+0BCh+var_50], edi
.text:0040F251                 mov     [esp+0BCh+var_5C], eax
.text:0040F255                 mov     [esp+0BCh+var_7C], 0
.text:0040F25D                 mov     [esp+0BCh+var_88], 0
.text:0040F265                 mov     [esp+0BCh+var_8C], 0
.text:0040F26D                 mov     [esp+0BCh+Size], 14h ; Size
.text:0040F274                 call    malloc
.text:0040F279                 mov     [esp+0BCh+Src], eax
.text:0040F280                 mov     edx, eax
.text:0040F282                 test    edx, edx
.text:0040F284                 mov     eax, 0FFFFFFFEh
.text:0040F289                 jz      loc_40F957
.text:0040F28F                 mov     edx, [esp+0BCh+arg_0]
.text:0040F296                 xor     edi, edi
.text:0040F298                 mov     ebp, 5
.text:0040F29D                 mov     [esp+0BCh+var_28], ebp
.text:0040F2A4                 mov     [esp+0BCh+var_24], edi
.text:0040F2AB                 mov     ebx, [edx+18h]
.text:0040F2AE                 test    ebx, ebx
.text:0040F2B0                 jnz     loc_411497
.text:0040F2B6                 mov     [esp+0BCh+var_90], 0
.text:0040F2BE                 mov     [esp+0BCh+var_84], 0
.text:0040F2C6                 mov     [esp+0BCh+var_80], 0
.text:0040F2CE                 mov     [esp+0BCh+var_74], 0
.text:0040F2D6                 mov     [esp+0BCh+var_70], 0
.text:0040F2DE                 mov     [esp+0BCh+var_6C], 0
.text:0040F2E6                 mov     [esp+0BCh+var_68], 0
.text:0040F2EE                 mov     [esp+0BCh+var_94], 0
.text:0040F2F6                 mov     [esp+0BCh+var_78], 0
.text:0040F2FE
.text:0040F2FE loc_40F2FE:                             ; CODE XREF: sub_40F200+236C↓j
.text:0040F2FE                 mov     eax, [esp+0BCh+arg_14]
.text:0040F305                 test    eax, eax
.text:0040F307                 js      loc_40F9F5
.text:0040F30D                 mov     ebp, [esp+0BCh+arg_8]
.text:0040F314                 mov     ecx, [esp+0BCh+arg_10]
.text:0040F31B                 add     ebp, ecx
.text:0040F31D                 cmp     [esp+0BCh+arg_14], ebp
.text:0040F324                 jg      loc_40F9F5
.text:0040F32A                 mov     ebp, 1
.text:0040F32F                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040F333                 jnb     short loc_40F378
.text:0040F335                 mov     eax, [esp+0BCh+var_78]
.text:0040F339                 add     eax, 4
.text:0040F33C
.text:0040F33C loc_40F33C:                             ; CODE XREF: sub_40F200+176↓j
.text:0040F33C                 mov     ecx, [esp+0BCh+var_74]
.text:0040F340                 mov     ebx, [esp+0BCh+var_70]
.text:0040F344                 mov     edx, [esp+0BCh+var_6C]
.text:0040F348                 mov     dword ptr [ecx+ebp*4], offset unk_422570
.text:0040F34F                 mov     edi, [esp+0BCh+var_68]
.text:0040F353                 mov     dword ptr [ebx+ebp*4], offset unk_422570
.text:0040F35A                 mov     dword ptr [edx+ebp*4], offset unk_422570
.text:0040F361                 mov     dword ptr [edi+ebp*4], offset unk_422570
.text:0040F368                 inc     ebp
.text:0040F369                 or      dword ptr [eax], 3
.text:0040F36C                 and     byte ptr [eax], 0E3h
.text:0040F36F                 add     eax, 4
.text:0040F372                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040F376                 jb      short loc_40F33C
.text:0040F378
.text:0040F378 loc_40F378:                             ; CODE XREF: sub_40F200+133↑j
.text:0040F378                 mov     eax, [esp+0BCh+arg_10]
.text:0040F37F                 test    eax, eax
.text:0040F381                 jnz     short loc_40F3BC
.text:0040F383                 mov     ebp, [esp+0BCh+arg_4]
.text:0040F38A                 test    ebp, ebp
.text:0040F38C                 jz      short loc_40F3BC
.text:0040F38E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040F395                 xor     edx, edx
.text:0040F397                 xor     edi, edi
.text:0040F399                 mov     [esp+0BCh+arg_4], edx
.text:0040F3A0                 mov     ecx, [esp+0BCh+arg_8]
.text:0040F3A7                 mov     [esp+0BCh+arg_8], edi
.text:0040F3AE                 mov     [esp+0BCh+arg_C], ebx
.text:0040F3B5                 mov     [esp+0BCh+arg_10], ecx
.text:0040F3BC
.text:0040F3BC loc_40F3BC:                             ; CODE XREF: sub_40F200+181↑j
.text:0040F3BC                                         ; sub_40F200+18C↑j
.text:0040F3BC                 mov     ecx, [esp+0BCh+arg_4]
.text:0040F3C3                 mov     eax, [esp+0BCh+arg_8]
.text:0040F3CA                 mov     ebp, [esp+0BCh+arg_C]
.text:0040F3D1                 mov     edi, [esp+0BCh+arg_10]
.text:0040F3D8                 add     ecx, eax
.text:0040F3DA                 mov     [esp+0BCh+var_34], ecx
.text:0040F3E1                 add     ebp, edi
.text:0040F3E3                 cmp     esi, [esp+0BCh+arg_8]
.text:0040F3EA                 mov     [esp+0BCh+var_38], ebp
.text:0040F3F1                 jg      loc_411472
.text:0040F3F7                 mov     edx, [esp+0BCh+arg_4]
.text:0040F3FE                 add     esi, edx
.text:0040F400                 mov     [esp+0BCh+var_3C], esi
.text:0040F407                 mov     esi, [esp+0BCh+arg_C]
.text:0040F40E
.text:0040F40E loc_40F40E:                             ; CODE XREF: sub_40F200+2292↓j
.text:0040F40E                 mov     [esp+0BCh+var_40], esi
.text:0040F412                 mov     ecx, [esp+0BCh+arg_8]
.text:0040F419                 test    ecx, ecx
.text:0040F41B                 jle     loc_411448
.text:0040F421                 mov     eax, [esp+0BCh+arg_8]
.text:0040F428                 cmp     [esp+0BCh+arg_14], eax
.text:0040F42F                 jg      loc_411448
.text:0040F435                 mov     edx, [esp+0BCh+arg_4]
.text:0040F43C                 mov     ebx, [esp+0BCh+arg_14]
.text:0040F443                 mov     esi, [esp+0BCh+var_3C]
.text:0040F44A                 add     edx, ebx
.text:0040F44C                 mov     [esp+0BCh+var_44], edx
.text:0040F450                 mov     [esp+0BCh+var_48], esi
.text:0040F454
.text:0040F454 loc_40F454:                             ; CODE XREF: sub_40F200+469↓j
.text:0040F454                                         ; sub_40F200+47A↓j ...
.text:0040F454                 mov     edx, [esp+0BCh+var_50]
.text:0040F458                 mov     eax, offset loc_40F479
.text:0040F45D                 cmp     [esp+0BCh+var_4C], edx
.text:0040F461                 jz      short loc_40F477
.text:0040F463
.text:0040F463 loc_40F463:                             ; CODE XREF: sub_40F200+838↓j
.text:0040F463                 mov     ebp, [esp+0BCh+var_4C]
.text:0040F467                 movzx   ebx, byte ptr [ebp+0]
.text:0040F46B                 inc     ebp
.text:0040F46C                 mov     [esp+0BCh+var_4C], ebp
.text:0040F470
.text:0040F470 loc_40F470:                             ; CODE XREF: sub_40F200+1CA0↓j
.text:0040F470                 mov     eax, ds:jpt_40F477[ebx*4] ; switch 6 cases
.text:0040F477
.text:0040F477 loc_40F477:                             ; CODE XREF: sub_40F200+261↑j
.text:0040F477                                         ; sub_40F200+83E↓j ...
.text:0040F477                 jmp     eax             ; switch jump
.text:0040F479 ; ---------------------------------------------------------------------------
.text:0040F479
.text:0040F479 loc_40F479:                             ; DATA XREF: sub_40F200+258↑o
.text:0040F479                                         ; sub_40F200+82F↓o ...
.text:0040F479                 mov     eax, [esp+0BCh+var_40]
.text:0040F47D                 cmp     [esp+0BCh+var_44], eax
.text:0040F481                 jz      loc_40F709
.text:0040F487                 mov     edi, [esp+0BCh+arg_8]
.text:0040F48E                 xor     edx, edx
.text:0040F490                 test    edi, edi
.text:0040F492                 jz      short loc_40F4AC
.text:0040F494                 mov     eax, [esp+0BCh+var_88]
.text:0040F498                 cmp     [esp+0BCh+arg_4], eax
.text:0040F49F                 ja      short loc_40F4AC
.text:0040F4A1                 mov     esi, [esp+0BCh+var_34]
.text:0040F4A8                 cmp     eax, esi
.text:0040F4AA                 jbe     short loc_40F4AE
.text:0040F4AC
.text:0040F4AC loc_40F4AC:                             ; CODE XREF: sub_40F200+292↑j
.text:0040F4AC                                         ; sub_40F200+29F↑j
.text:0040F4AC                 mov     dl, 1
.text:0040F4AE
.text:0040F4AE loc_40F4AE:                             ; CODE XREF: sub_40F200+2AA↑j
.text:0040F4AE                 mov     ebp, [esp+0BCh+var_3C]
.text:0040F4B5                 cmp     [esp+0BCh+var_48], ebp
.text:0040F4B9                 setz    cl
.text:0040F4BC                 cmp     dl, cl
.text:0040F4BE                 jz      loc_40FA18
.text:0040F4C4                 mov     edx, [esp+0BCh+var_88]
.text:0040F4C8                 cmp     [esp+0BCh+var_44], edx
.text:0040F4CC                 setnbe  al
.text:0040F4CF
.text:0040F4CF loc_40F4CF:                             ; CODE XREF: sub_40F200+826↓j
.text:0040F4CF                 mov     esi, [esp+0BCh+var_24]
.text:0040F4D6                 test    esi, esi
.text:0040F4D8                 jz      loc_40F9FF
.text:0040F4DE                 mov     ecx, [esp+0BCh+var_7C]
.text:0040F4E2                 test    ecx, ecx
.text:0040F4E4                 jz      short loc_40F4EA
.text:0040F4E6                 test    al, al
.text:0040F4E8                 jz      short loc_40F530
.text:0040F4EA
.text:0040F4EA loc_40F4EA:                             ; CODE XREF: sub_40F200+2E4↑j
.text:0040F4EA                 mov     [esp+0BCh+var_7C], 1
.text:0040F4F2                 mov     eax, [esp+0BCh+var_5C]
.text:0040F4F6                 mov     ebp, 1
.text:0040F4FB                 mov     edi, [esp+0BCh+var_44]
.text:0040F4FF                 cmp     ebp, eax
.text:0040F501                 mov     [esp+0BCh+var_88], edi
.text:0040F505                 jnb     short loc_40F530
.text:0040F507
.text:0040F507 loc_40F507:                             ; CODE XREF: sub_40F200+328↓j
.text:0040F507                 mov     edx, [esp+0BCh+var_68]
.text:0040F50B                 mov     ecx, [esp+0BCh+var_80]
.text:0040F50F                 mov     eax, [esp+0BCh+var_6C]
.text:0040F513                 mov     edi, [edx+ebp*4]
.text:0040F516                 mov     edx, [esp+0BCh+var_84]
.text:0040F51A                 mov     [ecx+ebp*4], edi
.text:0040F51D                 mov     ebx, [eax+ebp*4]
.text:0040F520                 mov     [edx+ebp*4], ebx
.text:0040F523                 inc     ebp
.text:0040F524                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040F528                 jb      short loc_40F507
.text:0040F52A                 lea     esi, [esi+0]
.text:0040F530
.text:0040F530 loc_40F530:                             ; CODE XREF: sub_40F200+2E8↑j
.text:0040F530                                         ; sub_40F200+305↑j ...
.text:0040F530                 test    esi, esi
.text:0040F532                 mov     eax, esi
.text:0040F534                 jz      loc_40F69E
.text:0040F53A                 mov     ebx, [esp+0BCh+Src]
.text:0040F541                 dec     esi
.text:0040F542                 mov     [esp+0BCh+var_24], esi
.text:0040F549                 mov     esi, [ebx+esi*4]
.text:0040F54C                 test    esi, esi
.text:0040F54E                 jz      short loc_40F554
.text:0040F550                 mov     [esp+0BCh+var_44], esi
.text:0040F554
.text:0040F554 loc_40F554:                             ; CODE XREF: sub_40F200+34E↑j
.text:0040F554                 lea     ecx, [eax-2]
.text:0040F557                 lea     edx, [eax-3]
.text:0040F55A                 mov     [esp+0BCh+var_24], ecx
.text:0040F561                 mov     ebp, [ebx+ecx*4]
.text:0040F564                 lea     ecx, [eax-4]
.text:0040F567                 mov     [esp+0BCh+var_24], edx
.text:0040F56E                 mov     [esp+0BCh+var_4C], ebp
.text:0040F572                 mov     edi, [ebx+edx*4]
.text:0040F575                 mov     [esp+0BCh+var_24], ecx
.text:0040F57C                 mov     [esp+0BCh+var_64], edi
.text:0040F580                 mov     ebp, [ebx+ecx*4]
.text:0040F583                 mov     ecx, [esp+0BCh+var_64]
.text:0040F587                 mov     [esp+0BCh+var_60], ebp
.text:0040F58B                 cmp     ecx, ebp
.text:0040F58D                 jb      short loc_40F5E9
.text:0040F58F                 nop
.text:0040F590
.text:0040F590 loc_40F590:                             ; CODE XREF: sub_40F200+3E7↓j
.text:0040F590                 mov     eax, [esp+0BCh+var_24]
.text:0040F597                 mov     ebp, [esp+0BCh+var_78]
.text:0040F59B                 dec     eax
.text:0040F59C                 mov     [esp+0BCh+var_24], eax
.text:0040F5A3                 mov     edi, [ebx+eax*4]
.text:0040F5A6                 mov     [ebp+ecx*4+0], edi
.text:0040F5AA                 mov     ebp, [esp+0BCh+var_24]
.text:0040F5B1                 mov     esi, [esp+0BCh+Src]
.text:0040F5B8                 lea     edx, [ebp-1]
.text:0040F5BB                 sub     ebp, 2
.text:0040F5BE                 mov     ebx, esi
.text:0040F5C0                 mov     [esp+0BCh+var_24], edx
.text:0040F5C7                 mov     edi, [esi+edx*4]
.text:0040F5CA                 mov     edx, [esp+0BCh+var_6C]
.text:0040F5CE                 mov     [esp+0BCh+var_24], ebp
.text:0040F5D5                 mov     [edx+ecx*4], edi
.text:0040F5D8                 mov     edi, [esi+ebp*4]
.text:0040F5DB                 mov     esi, [esp+0BCh+var_68]
.text:0040F5DF                 mov     [esi+ecx*4], edi
.text:0040F5E2                 dec     ecx
.text:0040F5E3                 cmp     ecx, [esp+0BCh+var_60]
.text:0040F5E7                 jnb     short loc_40F590
.text:0040F5E9
.text:0040F5E9 loc_40F5E9:                             ; CODE XREF: sub_40F200+38D↑j
.text:0040F5E9                 mov     [esp+0BCh+var_8C], 0
.text:0040F5F1                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F5F5                 test    ebx, ebx
.text:0040F5F7                 jz      short loc_40F652
.text:0040F5F9                 mov     edx, [esp+0BCh+var_50]
.text:0040F5FD                 cmp     [esp+0BCh+var_4C], edx
.text:0040F601                 jnb     short loc_40F65E
.text:0040F603                 mov     ecx, [esp+0BCh+var_4C]
.text:0040F607                 xor     edx, edx
.text:0040F609                 movzx   eax, byte ptr [ecx]
.text:0040F60C                 cmp     eax, 12h
.text:0040F60F                 ja      loc_40F695
.text:0040F615                 cmp     eax, 11h
.text:0040F618                 jnb     short loc_40F620
.text:0040F61A                 cmp     eax, 0Dh
.text:0040F61D                 jnz     short loc_40F65E
.text:0040F61F                 nop
.text:0040F620
.text:0040F620 loc_40F620:                             ; CODE XREF: sub_40F200+418↑j
.text:0040F620                                         ; sub_40F200+49C↓j
.text:0040F620                 mov     ebp, [esp+0BCh+var_4C]
.text:0040F624                 mov     ecx, [esp+0BCh+var_4C]
.text:0040F628                 inc     ebp
.text:0040F629                 mov     [esp+0BCh+var_30], ebp
.text:0040F630                 movsx   esi, byte ptr [ebp+1]
.text:0040F634                 movzx   eax, byte ptr [ecx+1]
.text:0040F638                 shl     esi, 8
.text:0040F63B                 lea     edi, [esi+eax]
.text:0040F63E                 lea     eax, [edi+ecx+3]
.text:0040F642                 test    dl, dl
.text:0040F644                 mov     [esp+0BCh+var_30], eax
.text:0040F64B                 jz      short loc_40F690
.text:0040F64D                 cmp     byte ptr [eax], 15h
.text:0040F650
.text:0040F650 loc_40F650:                             ; CODE XREF: sub_40F200+493↓j
.text:0040F650                 jnz     short loc_40F65E
.text:0040F652
.text:0040F652 loc_40F652:                             ; CODE XREF: sub_40F200+3F7↑j
.text:0040F652                                         ; sub_40F200+889↓j ...
.text:0040F652                 mov     esi, [esp+0BCh+var_24]
.text:0040F659                 jmp     loc_40F530
.text:0040F65E ; ---------------------------------------------------------------------------
.text:0040F65E
.text:0040F65E loc_40F65E:                             ; CODE XREF: sub_40F200+401↑j
.text:0040F65E                                         ; sub_40F200+41D↑j ...
.text:0040F65E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040F665                 cmp     [esp+0BCh+var_44], ebx
.text:0040F669                 jb      loc_40F454
.text:0040F66F                 mov     edi, [esp+0BCh+var_34]
.text:0040F676                 cmp     [esp+0BCh+var_44], edi
.text:0040F67A                 ja      loc_40F454
.text:0040F680                 mov     edx, [esp+0BCh+var_3C]
.text:0040F687                 mov     [esp+0BCh+var_48], edx
.text:0040F68B                 jmp     loc_40F454
.text:0040F690 ; ---------------------------------------------------------------------------
.text:0040F690
.text:0040F690 loc_40F690:                             ; CODE XREF: sub_40F200+44B↑j
.text:0040F690                 cmp     byte ptr [eax], 0Fh
.text:0040F693                 jmp     short loc_40F650
.text:0040F695 ; ---------------------------------------------------------------------------
.text:0040F695
.text:0040F695 loc_40F695:                             ; CODE XREF: sub_40F200+40F↑j
.text:0040F695                 cmp     eax, 16h
.text:0040F698                 jnz     short loc_40F65E
.text:0040F69A                 mov     dl, 1
.text:0040F69C                 jmp     short loc_40F620
.text:0040F69E ; ---------------------------------------------------------------------------
.text:0040F69E
.text:0040F69E loc_40F69E:                             ; CODE XREF: sub_40F200+334↑j
.text:0040F69E                 mov     ecx, [esp+0BCh+var_7C]
.text:0040F6A2                 test    ecx, ecx
.text:0040F6A4                 jz      loc_40F9F5
.text:0040F6AA
.text:0040F6AA loc_40F6AA:                             ; CODE XREF: sub_40F200+813↓j
.text:0040F6AA                 mov     esi, [esp+0BCh+var_88]
.text:0040F6AE                 mov     ebx, [esp+0BCh+arg_4]
.text:0040F6B5                 mov     [esp+0BCh+var_44], esi
.text:0040F6B9                 cmp     esi, ebx
.text:0040F6BB                 jb      short loc_40F6D3
.text:0040F6BD                 mov     eax, [esp+0BCh+var_34]
.text:0040F6C4                 mov     ecx, [esp+0BCh+var_3C]
.text:0040F6CB                 cmp     esi, eax
.text:0040F6CD                 mov     [esp+0BCh+var_48], ecx
.text:0040F6D1                 jbe     short loc_40F6DB
.text:0040F6D3
.text:0040F6D3 loc_40F6D3:                             ; CODE XREF: sub_40F200+4BB↑j
.text:0040F6D3                 mov     esi, [esp+0BCh+var_40]
.text:0040F6D7                 mov     [esp+0BCh+var_48], esi
.text:0040F6DB
.text:0040F6DB loc_40F6DB:                             ; CODE XREF: sub_40F200+4D1↑j
.text:0040F6DB                 mov     ebp, 1
.text:0040F6E0                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040F6E4                 jnb     short loc_40F709
.text:0040F6E6
.text:0040F6E6 loc_40F6E6:                             ; CODE XREF: sub_40F200+507↓j
.text:0040F6E6                 mov     eax, [esp+0BCh+var_80]
.text:0040F6EA                 mov     ecx, [esp+0BCh+var_68]
.text:0040F6EE                 mov     ebx, [esp+0BCh+var_84]
.text:0040F6F2                 mov     edi, [eax+ebp*4]
.text:0040F6F5                 mov     [ecx+ebp*4], edi
.text:0040F6F8                 mov     edx, [ebx+ebp*4]
.text:0040F6FB                 mov     edi, [esp+0BCh+var_6C]
.text:0040F6FF                 mov     [edi+ebp*4], edx
.text:0040F702                 inc     ebp
.text:0040F703                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040F707                 jb      short loc_40F6E6
.text:0040F709
.text:0040F709 loc_40F709:                             ; CODE XREF: sub_40F200+281↑j
.text:0040F709                                         ; sub_40F200+4E4↑j ...
.text:0040F709                 mov     ebp, [esp+0BCh+arg_18]
.text:0040F710                 test    ebp, ebp
.text:0040F712                 jz      loc_40F922
.text:0040F718                 mov     edx, [esp+0BCh+arg_0]
.text:0040F71F                 movzx   eax, byte ptr [edx+1Ch]
.text:0040F723                 test    al, 10h
.text:0040F725                 jnz     loc_40F922
.text:0040F72B                 shr     al, 1
.text:0040F72D                 and     eax, 3
.text:0040F730                 jnz     loc_40F988
.text:0040F736                 mov     eax, [esp+0BCh+var_5C]
.text:0040F73A                 inc     eax
.text:0040F73B                 cmp     eax, 1Eh
.text:0040F73E                 jnb     short loc_40F745
.text:0040F740                 mov     eax, 1Eh
.text:0040F745
.text:0040F745 loc_40F745:                             ; CODE XREF: sub_40F200+53E↑j
.text:0040F745                 mov     ebp, [esp+0BCh+arg_18]
.text:0040F74C                 mov     [ebp+0], eax
.text:0040F74F                 shl     eax, 2
.text:0040F752                 mov     [esp+0BCh+Size], eax ; Size
.text:0040F755                 call    malloc
.text:0040F75A                 mov     edi, [esp+0BCh+arg_18]
.text:0040F761                 mov     ebx, [edi]
.text:0040F763                 mov     [edi+4], eax
.text:0040F766                 shl     ebx, 2
.text:0040F769                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040F76C                 call    malloc
.text:0040F771                 mov     ecx, [esp+0BCh+arg_18]
.text:0040F778                 mov     esi, [ecx+4]
.text:0040F77B                 mov     [ecx+8], eax
.text:0040F77E                 test    esi, esi
.text:0040F780                 jz      loc_40F981
.text:0040F786                 test    eax, eax
.text:0040F788                 jz      loc_40F981
.text:0040F78E                 mov     edx, [esp+0BCh+arg_0]
.text:0040F795                 movzx   ecx, byte ptr [edx+1Ch]
.text:0040F799                 and     cl, 0F9h
.text:0040F79C                 or      cl, 2
.text:0040F79F                 mov     [edx+1Ch], cl
.text:0040F7A2
.text:0040F7A2 loc_40F7A2:                             ; CODE XREF: sub_40F200+7ED↓j
.text:0040F7A2                 mov     ecx, [esp+0BCh+arg_18]
.text:0040F7A9                 mov     edx, [ecx]
.text:0040F7AB
.text:0040F7AB loc_40F7AB:                             ; CODE XREF: sub_40F200+794↓j
.text:0040F7AB                                         ; sub_40F200+7A9↓j
.text:0040F7AB                 test    edx, edx
.text:0040F7AD                 jz      short loc_40F7F8
.text:0040F7AF                 mov     esi, [esp+0BCh+arg_18]
.text:0040F7B6                 mov     edi, [esp+0BCh+var_3C]
.text:0040F7BD                 mov     edx, [esp+0BCh+arg_14]
.text:0040F7C4                 cmp     [esp+0BCh+var_48], edi
.text:0040F7C8                 mov     ebp, [esi+4]
.text:0040F7CB                 mov     [ebp+0], edx
.text:0040F7CE                 mov     edx, [esi+8]
.text:0040F7D1                 jz      loc_40F96F
.text:0040F7D7                 mov     eax, [esp+0BCh+var_44]
.text:0040F7DB                 mov     esi, [esp+0BCh+arg_C]
.text:0040F7E2                 mov     ecx, [esp+0BCh+arg_8]
.text:0040F7E9                 sub     eax, esi
.text:0040F7EB                 add     eax, ecx
.text:0040F7ED
.text:0040F7ED loc_40F7ED:                             ; CODE XREF: sub_40F200+77C↓j
.text:0040F7ED                 mov     [edx], eax
.text:0040F7EF                 mov     edi, [esp+0BCh+arg_18]
.text:0040F7F6                 mov     edx, [edi]
.text:0040F7F8
.text:0040F7F8 loc_40F7F8:                             ; CODE XREF: sub_40F200+5AD↑j
.text:0040F7F8                 mov     ebp, 1
.text:0040F7FD
.text:0040F7FD loc_40F7FD:                             ; CODE XREF: sub_40F200+6A8↓j
.text:0040F7FD                 cmp     edx, [esp+0BCh+var_5C]
.text:0040F801                 mov     eax, edx
.text:0040F803                 jbe     short loc_40F809
.text:0040F805                 mov     eax, [esp+0BCh+var_5C]
.text:0040F809
.text:0040F809 loc_40F809:                             ; CODE XREF: sub_40F200+603↑j
.text:0040F809                 cmp     ebp, eax
.text:0040F80B                 jnb     loc_40F8F3
.text:0040F811                 mov     ebx, [esp+0BCh+var_68]
.text:0040F815                 mov     eax, [ebx+ebp*4]
.text:0040F818                 cmp     eax, offset unk_422570
.text:0040F81D                 jz      loc_40F8D6
.text:0040F823                 mov     esi, [esp+0BCh+var_6C]
.text:0040F827                 mov     edx, [esi+ebp*4]
.text:0040F82A                 cmp     edx, offset unk_422570
.text:0040F830                 jz      loc_40F8D6
.text:0040F836                 mov     edi, [esp+0BCh+arg_8]
.text:0040F83D                 mov     ebx, [esp+0BCh+arg_18]
.text:0040F844                 test    edi, edi
.text:0040F846                 mov     ecx, [ebx+4]
.text:0040F849                 jz      short loc_40F8C2
.text:0040F84B                 cmp     [esp+0BCh+arg_4], eax
.text:0040F852                 ja      short loc_40F8C2
.text:0040F854                 cmp     eax, [esp+0BCh+var_34]
.text:0040F85B                 ja      short loc_40F8C2
.text:0040F85D                 mov     esi, [esp+0BCh+arg_4]
.text:0040F864                 sub     eax, esi
.text:0040F866
.text:0040F866 loc_40F866:                             ; CODE XREF: sub_40F200+6D4↓j
.text:0040F866                 mov     [ecx+ebp*4], eax
.text:0040F869                 mov     esi, [esp+0BCh+arg_18]
.text:0040F870                 mov     eax, [esp+0BCh+arg_8]
.text:0040F877                 mov     ecx, [esi+8]
.text:0040F87A                 test    eax, eax
.text:0040F87C                 jz      short loc_40F8AD
.text:0040F87E                 cmp     [esp+0BCh+arg_4], edx
.text:0040F885                 ja      short loc_40F8AD
.text:0040F887                 cmp     edx, [esp+0BCh+var_34]
.text:0040F88E                 ja      short loc_40F8AD
.text:0040F890                 mov     eax, edx
.text:0040F892                 mov     edx, [esp+0BCh+arg_4]
.text:0040F899                 sub     eax, edx
.text:0040F89B
.text:0040F89B loc_40F89B:                             ; CODE XREF: sub_40F200+6C0↓j
.text:0040F89B                 mov     [ecx+ebp*4], eax
.text:0040F89E
.text:0040F89E loc_40F89E:                             ; CODE XREF: sub_40F200+6F1↓j
.text:0040F89E                 mov     ecx, [esp+0BCh+arg_18]
.text:0040F8A5                 inc     ebp
.text:0040F8A6                 mov     edx, [ecx]
.text:0040F8A8                 jmp     loc_40F7FD
.text:0040F8AD ; ---------------------------------------------------------------------------
.text:0040F8AD
.text:0040F8AD loc_40F8AD:                             ; CODE XREF: sub_40F200+67C↑j
.text:0040F8AD                                         ; sub_40F200+685↑j ...
.text:0040F8AD                 mov     eax, [esp+0BCh+arg_C]
.text:0040F8B4                 mov     edi, [esp+0BCh+arg_8]
.text:0040F8BB                 sub     edx, eax
.text:0040F8BD                 lea     eax, [edi+edx]
.text:0040F8C0                 jmp     short loc_40F89B
.text:0040F8C2 ; ---------------------------------------------------------------------------
.text:0040F8C2
.text:0040F8C2 loc_40F8C2:                             ; CODE XREF: sub_40F200+649↑j
.text:0040F8C2                                         ; sub_40F200+652↑j ...
.text:0040F8C2                 mov     ebx, [esp+0BCh+arg_C]
.text:0040F8C9                 mov     edi, [esp+0BCh+arg_8]
.text:0040F8D0                 sub     eax, ebx
.text:0040F8D2                 add     eax, edi
.text:0040F8D4                 jmp     short loc_40F866
.text:0040F8D6 ; ---------------------------------------------------------------------------
.text:0040F8D6
.text:0040F8D6 loc_40F8D6:                             ; CODE XREF: sub_40F200+61D↑j
.text:0040F8D6                                         ; sub_40F200+630↑j
.text:0040F8D6                 mov     eax, [esp+0BCh+arg_18]
.text:0040F8DD                 mov     ecx, [eax+4]
.text:0040F8E0                 mov     edx, [eax+8]
.text:0040F8E3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040F8EA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:0040F8F1                 jmp     short loc_40F89E
.text:0040F8F3 ; ---------------------------------------------------------------------------
.text:0040F8F3
.text:0040F8F3 loc_40F8F3:                             ; CODE XREF: sub_40F200+60B↑j
.text:0040F8F3                 mov     ebp, [esp+0BCh+var_5C]
.text:0040F8F7                 cmp     ebp, edx
.text:0040F8F9                 jnb     short loc_40F922
.text:0040F8FB                 mov     esi, [esp+0BCh+arg_18]
.text:0040F902                 mov     edx, [esi+4]
.text:0040F905                 mov     eax, [esi+8]
.text:0040F908
.text:0040F908 loc_40F908:                             ; CODE XREF: sub_40F200+720↓j
.text:0040F908                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:0040F90F                 mov     edi, [esp+0BCh+arg_18]
.text:0040F916                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040F91D                 inc     ebp
.text:0040F91E                 cmp     ebp, [edi]
.text:0040F920                 jb      short loc_40F908
.text:0040F922
.text:0040F922 loc_40F922:                             ; CODE XREF: sub_40F200+512↑j
.text:0040F922                                         ; sub_40F200+525↑j ...
.text:0040F922                 mov     eax, [esp+0BCh+var_44]
.text:0040F926                 mov     ecx, [esp+0BCh+arg_14]
.text:0040F92D                 mov     ebp, [esp+0BCh+var_3C]
.text:0040F934                 sub     eax, ecx
.text:0040F936                 cmp     [esp+0BCh+var_48], ebp
.text:0040F93A                 jz      short loc_40F962
.text:0040F93C                 mov     ebx, [esp+0BCh+arg_8]
.text:0040F943                 mov     ebp, eax
.text:0040F945                 sub     [esp+0BCh+arg_C], ebx
.text:0040F94C                 mov     edx, [esp+0BCh+arg_C]
.text:0040F953                 sub     ebp, edx
.text:0040F955
.text:0040F955 loc_40F955:                             ; CODE XREF: sub_40F200+76D↓j
.text:0040F955                 mov     eax, ebp
.text:0040F957
.text:0040F957 loc_40F957:                             ; CODE XREF: sub_40F200+89↑j
.text:0040F957                                         ; sub_40F200+786↓j ...
.text:0040F957                 add     esp, 0ACh
.text:0040F95D                 pop     ebx
.text:0040F95E                 pop     esi
.text:0040F95F                 pop     edi
.text:0040F960                 pop     ebp
.text:0040F961                 retn
.text:0040F962 ; ---------------------------------------------------------------------------
.text:0040F962
.text:0040F962 loc_40F962:                             ; CODE XREF: sub_40F200+73A↑j
.text:0040F962                 mov     esi, [esp+0BCh+arg_4]
.text:0040F969                 mov     ebp, eax
.text:0040F96B                 sub     ebp, esi
.text:0040F96D                 jmp     short loc_40F955
.text:0040F96F ; ---------------------------------------------------------------------------
.text:0040F96F
.text:0040F96F loc_40F96F:                             ; CODE XREF: sub_40F200+5D1↑j
.text:0040F96F                 mov     eax, [esp+0BCh+var_44]
.text:0040F973                 mov     ebx, [esp+0BCh+arg_4]
.text:0040F97A                 sub     eax, ebx
.text:0040F97C                 jmp     loc_40F7ED
.text:0040F981 ; ---------------------------------------------------------------------------
.text:0040F981
.text:0040F981 loc_40F981:                             ; CODE XREF: sub_40F200+580↑j
.text:0040F981                                         ; sub_40F200+588↑j ...
.text:0040F981                 mov     eax, 0FFFFFFFEh
.text:0040F986                 jmp     short loc_40F957
.text:0040F988 ; ---------------------------------------------------------------------------
.text:0040F988
.text:0040F988 loc_40F988:                             ; CODE XREF: sub_40F200+530↑j
.text:0040F988                 dec     eax
.text:0040F989                 jz      short loc_40F999
.text:0040F98B                 mov     eax, [esp+0BCh+arg_18]
.text:0040F992                 mov     edx, [eax]
.text:0040F994                 jmp     loc_40F7AB
.text:0040F999 ; ---------------------------------------------------------------------------
.text:0040F999
.text:0040F999 loc_40F999:                             ; CODE XREF: sub_40F200+789↑j
.text:0040F999                 mov     ecx, [esp+0BCh+arg_18]
.text:0040F9A0                 mov     eax, [esp+0BCh+var_5C]
.text:0040F9A4                 mov     edx, [ecx]
.text:0040F9A6                 inc     eax
.text:0040F9A7                 cmp     edx, eax
.text:0040F9A9                 jnb     loc_40F7AB
.text:0040F9AF                 mov     [ecx], eax
.text:0040F9B1                 shl     eax, 2
.text:0040F9B4                 mov     [esp+0BCh+var_B8], eax ; Size
.text:0040F9B8                 mov     edx, [ecx+4]
.text:0040F9BB                 mov     [esp+0BCh+Size], edx ; Block
.text:0040F9BE                 call    realloc
.text:0040F9C3                 mov     edi, [esp+0BCh+arg_18]
.text:0040F9CA                 mov     ebp, [edi]
.text:0040F9CC                 mov     [edi+4], eax
.text:0040F9CF                 shl     ebp, 2
.text:0040F9D2                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:0040F9D6                 mov     ebx, [edi+8]
.text:0040F9D9                 mov     [esp+0BCh+Size], ebx ; Block
.text:0040F9DC                 call    realloc
.text:0040F9E1                 mov     [edi+8], eax
.text:0040F9E4                 mov     esi, [edi+4]
.text:0040F9E7                 test    esi, esi
.text:0040F9E9                 jz      short loc_40F981
.text:0040F9EB                 test    eax, eax
.text:0040F9ED                 jnz     loc_40F7A2
.text:0040F9F3                 jmp     short loc_40F981
.text:0040F9F5 ; ---------------------------------------------------------------------------
.text:0040F9F5
.text:0040F9F5 loc_40F9F5:                             ; CODE XREF: sub_40F200+107↑j
.text:0040F9F5                                         ; sub_40F200+124↑j ...
.text:0040F9F5                 mov     eax, 0FFFFFFFFh
.text:0040F9FA                 jmp     loc_40F957
.text:0040F9FF ; ---------------------------------------------------------------------------
.text:0040F9FF
.text:0040F9FF loc_40F9FF:                             ; CODE XREF: sub_40F200+2D8↑j
.text:0040F9FF                 mov     ebp, [esp+0BCh+var_7C]
.text:0040FA03                 test    ebp, ebp
.text:0040FA05                 jz      loc_40F709
.text:0040FA0B                 test    al, al
.text:0040FA0D                 jnz     loc_40F709
.text:0040FA13                 jmp     loc_40F6AA
.text:0040FA18 ; ---------------------------------------------------------------------------
.text:0040FA18
.text:0040FA18 loc_40FA18:                             ; CODE XREF: sub_40F200+2BE↑j
.text:0040FA18                 mov     ebx, [esp+0BCh+var_3C]
.text:0040FA1F                 cmp     [esp+0BCh+var_48], ebx
.text:0040FA23                 setnz   al
.text:0040FA26                 jmp     loc_40F4CF
.text:0040FA2B ; ---------------------------------------------------------------------------
.text:0040FA2B
.text:0040FA2B loc_40FA2B:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:0040FA2B                                         ; sub_40F200+898↓j ...
.text:0040FA2B                 mov     edx, [esp+0BCh+var_50] ; jumptable 0040F477 case 0
.text:0040FA2B                                         ; jumptable 0040FDF6 case 0
.text:0040FA2B                                         ; jumptable 0040FEC8 case 0
.text:0040FA2F                 mov     eax, offset loc_40F479
.text:0040FA34                 cmp     [esp+0BCh+var_4C], edx
.text:0040FA38                 jnz     loc_40F463
.text:0040FA3E                 jmp     loc_40F477
.text:0040FA43 ; ---------------------------------------------------------------------------
.text:0040FA43
.text:0040FA43 loc_40FA43:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:0040FA43                                         ; sub_40F200+BF6↓j ...
.text:0040FA43                 jmp     loc_40F709      ; jumptable 0040F477 case 1
.text:0040FA43                                         ; jumptable 0040FDF6 case 1
.text:0040FA43                                         ; jumptable 0040FEC8 case 1
.text:0040FA48 ; ---------------------------------------------------------------------------
.text:0040FA48
.text:0040FA48 loc_40FA48:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:0040FA48                                         ; sub_40F200+BF6↓j ...
.text:0040FA48                 mov     eax, [esp+0BCh+var_4C] ; jumptable 0040F477 case 2
.text:0040FA48                                         ; jumptable 0040FDF6 case 2
.text:0040FA48                                         ; jumptable 0040FEC8 case 2
.text:0040FA4C                 mov     edi, [esp+0BCh+var_58]
.text:0040FA50                 movzx   ebp, byte ptr [eax]
.text:0040FA53                 inc     eax
.text:0040FA54                 test    edi, edi
.text:0040FA56                 mov     [esp+0BCh+var_4C], eax
.text:0040FA5A                 jz      loc_40FAE9
.text:0040FA60
.text:0040FA60 loc_40FA60:                             ; CODE XREF: sub_40F200+890↓j
.text:0040FA60                 mov     ecx, [esp+0BCh+var_48]
.text:0040FA64                 cmp     [esp+0BCh+var_44], ecx
.text:0040FA68                 jz      short loc_40FAC6
.text:0040FA6A
.text:0040FA6A loc_40FA6A:                             ; CODE XREF: sub_40F200+8E7↓j
.text:0040FA6A                 mov     ecx, [esp+0BCh+var_44]
.text:0040FA6E                 mov     ebx, [esp+0BCh+var_4C]
.text:0040FA72                 mov     edx, [esp+0BCh+var_58]
.text:0040FA76                 movzx   edi, byte ptr [ecx]
.text:0040FA79                 inc     ecx
.text:0040FA7A                 movzx   eax, byte ptr [ebx]
.text:0040FA7D                 inc     ebx
.text:0040FA7E                 mov     [esp+0BCh+var_4C], ebx
.text:0040FA82                 mov     [esp+0BCh+var_44], ecx
.text:0040FA86                 cmp     [edi+edx], al
.text:0040FA89                 jnz     loc_40F652
.text:0040FA8F                 dec     ebp
.text:0040FA90                 jnz     short loc_40FA60
.text:0040FA92
.text:0040FA92 loc_40FA92:                             ; CODE XREF: sub_40F200+916↓j
.text:0040FA92                 mov     ebp, [esp+0BCh+var_8C]
.text:0040FA96                 test    ebp, ebp
.text:0040FA98                 jnz     short loc_40FA2B ; jumptable 0040F477 case 0
.text:0040FA98                                         ; jumptable 0040FDF6 case 0
.text:0040FA98                                         ; jumptable 0040FEC8 case 0
.text:0040FA9A                 mov     [esp+0BCh+var_8C], 1
.text:0040FAA2                 mov     eax, [esp+0BCh+var_60]
.text:0040FAA6                 mov     edx, [esp+0BCh+var_64]
.text:0040FAAA                 cmp     eax, edx
.text:0040FAAC                 ja      loc_40FA2B      ; jumptable 0040F477 case 0
.text:0040FAAC                                         ; jumptable 0040FDF6 case 0
.text:0040FAAC                                         ; jumptable 0040FEC8 case 0
.text:0040FAB2
.text:0040FAB2 loc_40FAB2:                             ; CODE XREF: sub_40F200+8BF↓j
.text:0040FAB2                 mov     esi, [esp+0BCh+var_78]
.text:0040FAB6                 or      byte ptr [esi+eax*4], 18h
.text:0040FABA                 inc     eax
.text:0040FABB                 cmp     eax, [esp+0BCh+var_64]
.text:0040FABF                 jbe     short loc_40FAB2
.text:0040FAC1                 jmp     loc_40FA2B      ; jumptable 0040F477 case 0
.text:0040FAC1                                         ; jumptable 0040FDF6 case 0
.text:0040FAC1                                         ; jumptable 0040FEC8 case 0
.text:0040FAC6 ; ---------------------------------------------------------------------------
.text:0040FAC6
.text:0040FAC6 loc_40FAC6:                             ; CODE XREF: sub_40F200+868↑j
.text:0040FAC6                                         ; sub_40F200+8E5↓j
.text:0040FAC6                 mov     edx, [esp+0BCh+var_40]
.text:0040FACA                 cmp     [esp+0BCh+var_48], edx
.text:0040FACE                 jz      loc_40F652
.text:0040FAD4                 mov     [esp+0BCh+var_48], edx
.text:0040FAD8                 mov     ebx, [esp+0BCh+arg_C]
.text:0040FADF                 cmp     ebx, edx
.text:0040FAE1                 mov     [esp+0BCh+var_44], ebx
.text:0040FAE5                 jz      short loc_40FAC6
.text:0040FAE7                 jmp     short loc_40FA6A
.text:0040FAE9 ; ---------------------------------------------------------------------------
.text:0040FAE9
.text:0040FAE9 loc_40FAE9:                             ; CODE XREF: sub_40F200+85A↑j
.text:0040FAE9                                         ; sub_40F200+914↓j
.text:0040FAE9                 mov     esi, [esp+0BCh+var_48]
.text:0040FAED                 cmp     [esp+0BCh+var_44], esi
.text:0040FAF1                 jz      short loc_40FB20
.text:0040FAF3
.text:0040FAF3 loc_40FAF3:                             ; CODE XREF: sub_40F200+941↓j
.text:0040FAF3                 mov     ebx, [esp+0BCh+var_4C]
.text:0040FAF7                 mov     eax, [esp+0BCh+var_44]
.text:0040FAFB                 movzx   edx, byte ptr [ebx]
.text:0040FAFE                 inc     ebx
.text:0040FAFF                 mov     [esp+0BCh+var_4C], ebx
.text:0040FB03                 movzx   ecx, byte ptr [eax]
.text:0040FB06                 inc     eax
.text:0040FB07                 mov     [esp+0BCh+var_44], eax
.text:0040FB0B                 cmp     cl, dl
.text:0040FB0D                 jnz     loc_40F652
.text:0040FB13                 dec     ebp
.text:0040FB14                 jnz     short loc_40FAE9
.text:0040FB16                 jmp     loc_40FA92
.text:0040FB16 ; ---------------------------------------------------------------------------
.text:0040FB1B                 align 10h
.text:0040FB20
.text:0040FB20 loc_40FB20:                             ; CODE XREF: sub_40F200+8F1↑j
.text:0040FB20                                         ; sub_40F200+93F↓j
.text:0040FB20                 mov     esi, [esp+0BCh+var_40]
.text:0040FB24                 cmp     [esp+0BCh+var_48], esi
.text:0040FB28                 jz      loc_40F652
.text:0040FB2E                 mov     [esp+0BCh+var_48], esi
.text:0040FB32                 mov     edi, [esp+0BCh+arg_C]
.text:0040FB39                 cmp     edi, esi
.text:0040FB3B                 mov     [esp+0BCh+var_44], edi
.text:0040FB3F                 jz      short loc_40FB20
.text:0040FB41                 jmp     short loc_40FAF3
.text:0040FB43 ; ---------------------------------------------------------------------------
.text:0040FB43
.text:0040FB43 loc_40FB43:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:0040FB43                                         ; sub_40F200+BF6↓j ...
.text:0040FB43                 mov     edi, [esp+0BCh+var_48] ; jumptable 0040F477 case 3
.text:0040FB43                                         ; jumptable 0040FDF6 case 3
.text:0040FB43                                         ; jumptable 0040FEC8 case 3
.text:0040FB47                 cmp     [esp+0BCh+var_44], edi
.text:0040FB4B                 jz      loc_411422
.text:0040FB51
.text:0040FB51 loc_40FB51:                             ; CODE XREF: sub_40F200+2243↓j
.text:0040FB51                 mov     eax, [esp+0BCh+arg_0]
.text:0040FB58                 test    byte ptr [eax+0Ch], 40h
.text:0040FB5C                 jnz     short loc_40FB80
.text:0040FB5E                 mov     ebx, [esp+0BCh+var_58]
.text:0040FB62                 test    ebx, ebx
.text:0040FB64                 jz      loc_411416
.text:0040FB6A                 mov     esi, [esp+0BCh+var_44]
.text:0040FB6E                 mov     edx, [esp+0BCh+var_58]
.text:0040FB72                 movzx   ebp, byte ptr [esi]
.text:0040FB75                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:0040FB7A
.text:0040FB7A loc_40FB7A:                             ; CODE XREF: sub_40F200+221D↓j
.text:0040FB7A                 jz      loc_40F652
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: sub_40F200+95C↑j
.text:0040FB80                 mov     ecx, [esp+0BCh+arg_0]
.text:0040FB87                 cmp     byte ptr [ecx+0Ch], 0
.text:0040FB8B                 jns     short loc_40FBAF
.text:0040FB8D                 mov     ebx, [esp+0BCh+var_58]
.text:0040FB91                 test    ebx, ebx
.text:0040FB93                 jz      loc_41140A
.text:0040FB99                 mov     edx, [esp+0BCh+var_44]
.text:0040FB9D                 mov     eax, [esp+0BCh+var_58]
.text:0040FBA1                 movzx   ebp, byte ptr [edx]
.text:0040FBA4                 cmp     byte ptr [ebp+eax+0], 0
.text:0040FBA9
.text:0040FBA9 loc_40FBA9:                             ; CODE XREF: sub_40F200+2211↓j
.text:0040FBA9                 jz      loc_40F652
.text:0040FBAF
.text:0040FBAF loc_40FBAF:                             ; CODE XREF: sub_40F200+98B↑j
.text:0040FBAF                 mov     esi, [esp+0BCh+var_8C]
.text:0040FBB3                 test    esi, esi
.text:0040FBB5                 jnz     short loc_40FBDA
.text:0040FBB7                 mov     [esp+0BCh+var_8C], 1
.text:0040FBBF                 mov     eax, [esp+0BCh+var_60]
.text:0040FBC3                 mov     ecx, [esp+0BCh+var_64]
.text:0040FBC7                 cmp     eax, ecx
.text:0040FBC9                 ja      short loc_40FBDA
.text:0040FBCB
.text:0040FBCB loc_40FBCB:                             ; CODE XREF: sub_40F200+9D8↓j
.text:0040FBCB                 mov     ebx, [esp+0BCh+var_78]
.text:0040FBCF                 or      byte ptr [ebx+eax*4], 18h
.text:0040FBD3                 inc     eax
.text:0040FBD4                 cmp     eax, [esp+0BCh+var_64]
.text:0040FBD8                 jbe     short loc_40FBCB
.text:0040FBDA
.text:0040FBDA loc_40FBDA:                             ; CODE XREF: sub_40F200+9B5↑j
.text:0040FBDA                                         ; sub_40F200+9C9↑j
.text:0040FBDA                 inc     [esp+0BCh+var_44]
.text:0040FBDE
.text:0040FBDE loc_40FBDE:                             ; CODE XREF: sub_40F200:loc_40FCA4↓j
.text:0040FBDE                                         ; sub_40F200+B8C↓j ...
.text:0040FBDE                 mov     edx, [esp+0BCh+var_50]
.text:0040FBE2                 mov     eax, offset loc_40F479
.text:0040FBE7                 cmp     [esp+0BCh+var_4C], edx
.text:0040FBEB                 jz      loc_40F477
.text:0040FBF1                 mov     esi, [esp+0BCh+var_4C]
.text:0040FBF5
.text:0040FBF5 loc_40FBF5:                             ; CODE XREF: sub_40F200+F64↓j
.text:0040FBF5                 movzx   edi, byte ptr [esi]
.text:0040FBF8                 inc     esi
.text:0040FBF9                 mov     [esp+0BCh+var_4C], esi
.text:0040FBFD                 mov     eax, ds:(jpt_40FC04-18h)[edi*4] ; switch 2 cases
.text:0040FC04                 jmp     eax             ; switch jump
.text:0040FC06 ; ---------------------------------------------------------------------------
.text:0040FC06
.text:0040FC06 loc_40FC06:                             ; DATA XREF: .text:0040F1F4↑o
.text:0040FC06                 mov     edx, [esp+0BCh+arg_8]
.text:0040FC0D                 test    edx, edx
.text:0040FC0F                 jz      loc_40FCE2
.text:0040FC15                 mov     edi, [esp+0BCh+arg_4]
.text:0040FC1C                 cmp     [esp+0BCh+var_44], edi
.text:0040FC20
.text:0040FC20 loc_40FC20:                             ; CODE XREF: sub_40F200+AED↓j
.text:0040FC20                 jz      loc_40F652
.text:0040FC26                 mov     ecx, [esp+0BCh+arg_10]
.text:0040FC2D                 test    ecx, ecx
.text:0040FC2F                 jz      loc_40F652
.text:0040FC35                 mov     ebp, [esp+0BCh+var_38]
.text:0040FC3C                 cmp     [esp+0BCh+var_44], ebp
.text:0040FC40                 jz      loc_40F652
.text:0040FC46                 mov     edx, [esp+0BCh+var_44]
.text:0040FC4A                 dec     edx
.text:0040FC4B                 cmp     edx, [esp+0BCh+var_34]
.text:0040FC52                 jz      loc_40FCD6
.text:0040FC58                 mov     ebx, [esp+0BCh+arg_C]
.text:0040FC5F                 dec     ebx
.text:0040FC60                 cmp     edx, ebx
.text:0040FC62                 jz      short loc_40FCC9
.text:0040FC64                 mov     edi, [esp+0BCh+var_44]
.text:0040FC68                 movzx   eax, byte ptr [edi-1]
.text:0040FC6C
.text:0040FC6C loc_40FC6C:                             ; CODE XREF: sub_40F200+AD4↓j
.text:0040FC6C                                         ; sub_40F200+AE0↓j
.text:0040FC6C                 cmp     ds:byte_422470[eax], 1
.text:0040FC73                 mov     eax, [esp+0BCh+var_34]
.text:0040FC7A                 setz    dl
.text:0040FC7D                 cmp     [esp+0BCh+var_44], eax
.text:0040FC81                 jz      short loc_40FCBD
.text:0040FC83                 mov     ebp, [esp+0BCh+arg_C]
.text:0040FC8A                 dec     ebp
.text:0040FC8B                 cmp     [esp+0BCh+var_44], ebp
.text:0040FC8F                 jz      short loc_40FCB0
.text:0040FC91                 mov     esi, [esp+0BCh+var_44]
.text:0040FC95                 movzx   eax, byte ptr [esi]
.text:0040FC98
.text:0040FC98 loc_40FC98:                             ; CODE XREF: sub_40F200+ABB↓j
.text:0040FC98                                         ; sub_40F200+AC7↓j
.text:0040FC98                 cmp     ds:byte_422470[eax], 1
.text:0040FC9F                 setz    cl
.text:0040FCA2                 cmp     dl, cl
.text:0040FCA4
.text:0040FCA4 loc_40FCA4:                             ; CODE XREF: sub_40F200+1A07↓j
.text:0040FCA4                 jz      loc_40FBDE
.text:0040FCAA                 jmp     loc_40F652
.text:0040FCAA ; ---------------------------------------------------------------------------
.text:0040FCAF                 align 10h
.text:0040FCB0
.text:0040FCB0 loc_40FCB0:                             ; CODE XREF: sub_40F200+A8F↑j
.text:0040FCB0                 mov     ebx, [esp+0BCh+var_34]
.text:0040FCB7                 movzx   eax, byte ptr [ebx-1]
.text:0040FCBB                 jmp     short loc_40FC98
.text:0040FCBD ; ---------------------------------------------------------------------------
.text:0040FCBD
.text:0040FCBD loc_40FCBD:                             ; CODE XREF: sub_40F200+A81↑j
.text:0040FCBD                 mov     ecx, [esp+0BCh+arg_C]
.text:0040FCC4                 movzx   eax, byte ptr [ecx]
.text:0040FCC7                 jmp     short loc_40FC98
.text:0040FCC9 ; ---------------------------------------------------------------------------
.text:0040FCC9
.text:0040FCC9 loc_40FCC9:                             ; CODE XREF: sub_40F200+A62↑j
.text:0040FCC9                 mov     edx, [esp+0BCh+var_34]
.text:0040FCD0                 movzx   eax, byte ptr [edx-1]
.text:0040FCD4                 jmp     short loc_40FC6C
.text:0040FCD6 ; ---------------------------------------------------------------------------
.text:0040FCD6
.text:0040FCD6 loc_40FCD6:                             ; CODE XREF: sub_40F200+A52↑j
.text:0040FCD6                 mov     esi, [esp+0BCh+arg_C]
.text:0040FCDD                 movzx   eax, byte ptr [esi]
.text:0040FCE0                 jmp     short loc_40FC6C
.text:0040FCE2 ; ---------------------------------------------------------------------------
.text:0040FCE2
.text:0040FCE2 loc_40FCE2:                             ; CODE XREF: sub_40F200+A0F↑j
.text:0040FCE2                 mov     eax, [esp+0BCh+arg_C]
.text:0040FCE9                 cmp     [esp+0BCh+var_44], eax
.text:0040FCED                 jmp     loc_40FC20
.text:0040FCF2 ; ---------------------------------------------------------------------------
.text:0040FCF2
.text:0040FCF2 loc_40FCF2:                             ; DATA XREF: .text:0040F1F0↑o
.text:0040FCF2                 mov     esi, [esp+0BCh+arg_8]
.text:0040FCF9                 test    esi, esi
.text:0040FCFB                 jz      loc_4113FA
.text:0040FD01                 mov     ebp, [esp+0BCh+arg_4]
.text:0040FD08                 cmp     [esp+0BCh+var_44], ebp
.text:0040FD0C
.text:0040FD0C loc_40FD0C:                             ; CODE XREF: sub_40F200+2205↓j
.text:0040FD0C                 jz      loc_40FDD0
.text:0040FD12                 mov     edi, [esp+0BCh+arg_10]
.text:0040FD19                 test    edi, edi
.text:0040FD1B                 jz      loc_40FDD0
.text:0040FD21                 mov     edx, [esp+0BCh+var_38]
.text:0040FD28                 cmp     [esp+0BCh+var_44], edx
.text:0040FD2C                 jz      loc_40FDD0
.text:0040FD32                 mov     edx, [esp+0BCh+var_44]
.text:0040FD36                 dec     edx
.text:0040FD37                 cmp     edx, [esp+0BCh+var_34]
.text:0040FD3E                 jz      short loc_40FDBD
.text:0040FD40                 mov     esi, [esp+0BCh+arg_C]
.text:0040FD47                 dec     esi
.text:0040FD48                 cmp     edx, esi
.text:0040FD4A                 jz      short loc_40FDB0
.text:0040FD4C                 mov     ebx, [esp+0BCh+var_44]
.text:0040FD50                 movzx   eax, byte ptr [ebx-1]
.text:0040FD54
.text:0040FD54 loc_40FD54:                             ; CODE XREF: sub_40F200+BBB↓j
.text:0040FD54                                         ; sub_40F200+BC7↓j
.text:0040FD54                 cmp     ds:byte_422470[eax], 1
.text:0040FD5B                 mov     eax, [esp+0BCh+var_34]
.text:0040FD62                 setz    dl
.text:0040FD65                 cmp     [esp+0BCh+var_44], eax
.text:0040FD69                 jz      short loc_40FDA4
.text:0040FD6B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040FD72                 dec     ecx
.text:0040FD73                 cmp     [esp+0BCh+var_44], ecx
.text:0040FD77                 jz      short loc_40FD97
.text:0040FD79                 mov     esi, [esp+0BCh+var_44]
.text:0040FD7D                 movzx   eax, byte ptr [esi]
.text:0040FD80
.text:0040FD80 loc_40FD80:                             ; CODE XREF: sub_40F200+BA2↓j
.text:0040FD80                                         ; sub_40F200+BAE↓j
.text:0040FD80                 cmp     ds:byte_422470[eax], 1
.text:0040FD87                 setz    bl
.text:0040FD8A                 cmp     dl, bl
.text:0040FD8C                 jnz     loc_40FBDE
.text:0040FD92                 jmp     loc_40F652
.text:0040FD97 ; ---------------------------------------------------------------------------
.text:0040FD97
.text:0040FD97 loc_40FD97:                             ; CODE XREF: sub_40F200+B77↑j
.text:0040FD97                 mov     ebp, [esp+0BCh+var_34]
.text:0040FD9E                 movzx   eax, byte ptr [ebp-1]
.text:0040FDA2                 jmp     short loc_40FD80
.text:0040FDA4 ; ---------------------------------------------------------------------------
.text:0040FDA4
.text:0040FDA4 loc_40FDA4:                             ; CODE XREF: sub_40F200+B69↑j
.text:0040FDA4                 mov     edi, [esp+0BCh+arg_C]
.text:0040FDAB                 movzx   eax, byte ptr [edi]
.text:0040FDAE                 jmp     short loc_40FD80
.text:0040FDB0 ; ---------------------------------------------------------------------------
.text:0040FDB0
.text:0040FDB0 loc_40FDB0:                             ; CODE XREF: sub_40F200+B4A↑j
.text:0040FDB0                 mov     ebp, [esp+0BCh+var_34]
.text:0040FDB7                 movzx   eax, byte ptr [ebp-1]
.text:0040FDBB                 jmp     short loc_40FD54
.text:0040FDBD ; ---------------------------------------------------------------------------
.text:0040FDBD
.text:0040FDBD loc_40FDBD:                             ; CODE XREF: sub_40F200+B3E↑j
.text:0040FDBD                 mov     ecx, [esp+0BCh+arg_C]
.text:0040FDC4                 movzx   eax, byte ptr [ecx]
.text:0040FDC7                 jmp     short loc_40FD54
.text:0040FDC7 ; ---------------------------------------------------------------------------
.text:0040FDC9                 align 10h
.text:0040FDD0
.text:0040FDD0 loc_40FDD0:                             ; CODE XREF: sub_40F200:loc_40FD0C↑j
.text:0040FDD0                                         ; sub_40F200+B1B↑j ...
.text:0040FDD0                 mov     ebp, [esp+0BCh+var_50]
.text:0040FDD4                 mov     eax, offset loc_40F479
.text:0040FDD9                 cmp     [esp+0BCh+var_4C], ebp
.text:0040FDDD                 jz      loc_40F477
.text:0040FDE3                 mov     ebx, [esp+0BCh+var_4C]
.text:0040FDE7                 movzx   esi, byte ptr [ebx]
.text:0040FDEA                 inc     ebx
.text:0040FDEB                 mov     [esp+0BCh+var_4C], ebx
.text:0040FDEF                 mov     eax, ds:jpt_40F477[esi*4] ; switch 6 cases
.text:0040FDF6                 jmp     eax             ; switch jump
.text:0040FDF8 ; ---------------------------------------------------------------------------
.text:0040FDF8
.text:0040FDF8 loc_40FDF8:                             ; DATA XREF: .text:0040F1EC↑o
.text:0040FDF8                 mov     ecx, [esp+0BCh+arg_8]
.text:0040FDFF                 test    ecx, ecx
.text:0040FE01                 jz      loc_4113EA
.text:0040FE07                 mov     eax, [esp+0BCh+arg_4]
.text:0040FE0E                 cmp     [esp+0BCh+var_44], eax
.text:0040FE12
.text:0040FE12 loc_40FE12:                             ; CODE XREF: sub_40F200+21F5↓j
.text:0040FE12                 jz      loc_40F652
.text:0040FE18                 mov     edi, [esp+0BCh+arg_10]
.text:0040FE1F                 test    edi, edi
.text:0040FE21                 jz      loc_40F652
.text:0040FE27                 mov     edx, [esp+0BCh+var_44]
.text:0040FE2B                 dec     edx
.text:0040FE2C                 cmp     edx, [esp+0BCh+var_34]
.text:0040FE33                 jz      loc_4113DA
.text:0040FE39                 mov     ebx, [esp+0BCh+arg_C]
.text:0040FE40                 dec     ebx
.text:0040FE41                 cmp     edx, ebx
.text:0040FE43                 jz      loc_4113CA
.text:0040FE49                 mov     ecx, [esp+0BCh+var_44]
.text:0040FE4D                 movzx   eax, byte ptr [ecx-1]
.text:0040FE51
.text:0040FE51 loc_40FE51:                             ; CODE XREF: sub_40F200+21D5↓j
.text:0040FE51                                         ; sub_40F200+21E5↓j
.text:0040FE51                 cmp     ds:byte_422470[eax], 1
.text:0040FE58                 jnz     loc_40F652
.text:0040FE5E                 mov     eax, [esp+0BCh+var_38]
.text:0040FE65                 cmp     [esp+0BCh+var_44], eax
.text:0040FE69                 jz      short loc_40FEA2
.text:0040FE6B                 mov     edx, [esp+0BCh+var_34]
.text:0040FE72                 cmp     [esp+0BCh+var_44], edx
.text:0040FE76                 jz      loc_4113BB
.text:0040FE7C                 mov     ebp, [esp+0BCh+arg_C]
.text:0040FE83                 dec     ebp
.text:0040FE84                 cmp     [esp+0BCh+var_44], ebp
.text:0040FE88                 jz      loc_4113AB
.text:0040FE8E                 mov     esi, [esp+0BCh+var_44]
.text:0040FE92                 movzx   eax, byte ptr [esi]
.text:0040FE95
.text:0040FE95 loc_40FE95:                             ; CODE XREF: sub_40F200+21B6↓j
.text:0040FE95                                         ; sub_40F200+21C5↓j
.text:0040FE95                 cmp     ds:byte_422470[eax], 1
.text:0040FE9C                 jz      loc_40F652
.text:0040FEA2
.text:0040FEA2 loc_40FEA2:                             ; CODE XREF: sub_40F200+C69↑j
.text:0040FEA2                                         ; sub_40F200+E23↓j ...
.text:0040FEA2                 mov     ecx, [esp+0BCh+var_50]
.text:0040FEA6                 mov     eax, offset loc_40F479
.text:0040FEAB                 cmp     [esp+0BCh+var_4C], ecx
.text:0040FEAF                 jz      loc_40F477
.text:0040FEB5                 mov     edi, [esp+0BCh+var_4C]
.text:0040FEB9                 movzx   edx, byte ptr [edi]
.text:0040FEBC                 inc     edi
.text:0040FEBD                 mov     [esp+0BCh+var_4C], edi
.text:0040FEC1                 mov     eax, ds:jpt_40F477[edx*4] ; switch 6 cases
.text:0040FEC8                 jmp     eax             ; switch jump
.text:0040FECA ; ---------------------------------------------------------------------------
.text:0040FECA
.text:0040FECA loc_40FECA:                             ; DATA XREF: .text:0040F1E8↑o
.text:0040FECA                 mov     ebp, [esp+0BCh+var_38]
.text:0040FED1                 cmp     [esp+0BCh+var_44], ebp
.text:0040FED5                 jz      loc_40F652
.text:0040FEDB                 mov     eax, [esp+0BCh+var_34]
.text:0040FEE2                 cmp     [esp+0BCh+var_44], eax
.text:0040FEE6                 jz      loc_40FFA7
.text:0040FEEC                 mov     esi, [esp+0BCh+arg_C]
.text:0040FEF3                 dec     esi
.text:0040FEF4                 cmp     [esp+0BCh+var_44], esi
.text:0040FEF8                 jz      loc_40FF97
.text:0040FEFE                 mov     edx, [esp+0BCh+var_44]
.text:0040FF02                 movzx   eax, byte ptr [edx]
.text:0040FF05
.text:0040FF05 loc_40FF05:                             ; CODE XREF: sub_40F200+DA2↓j
.text:0040FF05                                         ; sub_40F200+DB1↓j
.text:0040FF05                 cmp     ds:byte_422470[eax], 1
.text:0040FF0C                 jnz     loc_40F652
.text:0040FF12                 mov     edi, [esp+0BCh+arg_8]
.text:0040FF19                 test    edi, edi
.text:0040FF1B                 jz      short loc_40FF8A
.text:0040FF1D                 mov     ebp, [esp+0BCh+arg_4]
.text:0040FF24                 cmp     [esp+0BCh+var_44], ebp
.text:0040FF28
.text:0040FF28 loc_40FF28:                             ; CODE XREF: sub_40F200+D95↓j
.text:0040FF28                 jz      loc_40FDD0
.text:0040FF2E                 mov     ebx, [esp+0BCh+arg_10]
.text:0040FF35                 test    ebx, ebx
.text:0040FF37                 jz      loc_40FDD0
.text:0040FF3D                 mov     edx, [esp+0BCh+var_44]
.text:0040FF41                 dec     edx
.text:0040FF42                 cmp     edx, [esp+0BCh+var_34]
.text:0040FF49                 jz      short loc_40FF7E
.text:0040FF4B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040FF52                 dec     ecx
.text:0040FF53                 cmp     edx, ecx
.text:0040FF55                 jz      short loc_40FF71
.text:0040FF57                 mov     edi, [esp+0BCh+var_44]
.text:0040FF5B                 movzx   eax, byte ptr [edi-1]
.text:0040FF5F
.text:0040FF5F loc_40FF5F:                             ; CODE XREF: sub_40F200+D7C↓j
.text:0040FF5F                                         ; sub_40F200+D88↓j
.text:0040FF5F                 cmp     ds:byte_422470[eax], 1
.text:0040FF66                 jnz     loc_40FDD0
.text:0040FF6C                 jmp     loc_40F652
.text:0040FF71 ; ---------------------------------------------------------------------------
.text:0040FF71
.text:0040FF71 loc_40FF71:                             ; CODE XREF: sub_40F200+D55↑j
.text:0040FF71                 mov     edx, [esp+0BCh+var_34]
.text:0040FF78                 movzx   eax, byte ptr [edx-1]
.text:0040FF7C                 jmp     short loc_40FF5F
.text:0040FF7E ; ---------------------------------------------------------------------------
.text:0040FF7E
.text:0040FF7E loc_40FF7E:                             ; CODE XREF: sub_40F200+D49↑j
.text:0040FF7E                 mov     esi, [esp+0BCh+arg_C]
.text:0040FF85                 movzx   eax, byte ptr [esi]
.text:0040FF88                 jmp     short loc_40FF5F
.text:0040FF8A ; ---------------------------------------------------------------------------
.text:0040FF8A
.text:0040FF8A loc_40FF8A:                             ; CODE XREF: sub_40F200+D1B↑j
.text:0040FF8A                 mov     eax, [esp+0BCh+arg_C]
.text:0040FF91                 cmp     [esp+0BCh+var_44], eax
.text:0040FF95                 jmp     short loc_40FF28
.text:0040FF97 ; ---------------------------------------------------------------------------
.text:0040FF97
.text:0040FF97 loc_40FF97:                             ; CODE XREF: sub_40F200+CF8↑j
.text:0040FF97                 mov     ecx, [esp+0BCh+var_34]
.text:0040FF9E                 movzx   eax, byte ptr [ecx-1]
.text:0040FFA2                 jmp     loc_40FF05
.text:0040FFA7 ; ---------------------------------------------------------------------------
.text:0040FFA7
.text:0040FFA7 loc_40FFA7:                             ; CODE XREF: sub_40F200+CE6↑j
.text:0040FFA7                 mov     ebx, [esp+0BCh+arg_C]
.text:0040FFAE                 movzx   eax, byte ptr [ebx]
.text:0040FFB1                 jmp     loc_40FF05
.text:0040FFB6 ; ---------------------------------------------------------------------------
.text:0040FFB6
.text:0040FFB6 loc_40FFB6:                             ; DATA XREF: .text:0040F1E4↑o
.text:0040FFB6                 mov     ebp, [esp+0BCh+var_48]
.text:0040FFBA                 cmp     [esp+0BCh+var_44], ebp
.text:0040FFBE                 jz      loc_410041
.text:0040FFC4
.text:0040FFC4 loc_40FFC4:                             ; CODE XREF: sub_40F200+E62↓j
.text:0040FFC4                 mov     esi, [esp+0BCh+var_34]
.text:0040FFCB                 cmp     [esp+0BCh+var_44], esi
.text:0040FFCF                 jz      short loc_410035
.text:0040FFD1                 mov     edi, [esp+0BCh+arg_C]
.text:0040FFD8                 dec     edi
.text:0040FFD9                 cmp     [esp+0BCh+var_44], edi
.text:0040FFDD                 jz      short loc_410028
.text:0040FFDF                 mov     ebp, [esp+0BCh+var_44]
.text:0040FFE3                 movzx   eax, byte ptr [ebp+0]
.text:0040FFE7
.text:0040FFE7 loc_40FFE7:                             ; CODE XREF: sub_40F200+E33↓j
.text:0040FFE7                                         ; sub_40F200+E3F↓j
.text:0040FFE7                 cmp     ds:byte_422470[eax], 1
.text:0040FFEE                 jz      loc_40F652
.text:0040FFF4                 mov     eax, [esp+0BCh+var_8C]
.text:0040FFF8                 test    eax, eax
.text:0040FFFA                 jnz     short loc_41001F
.text:0040FFFC                 mov     [esp+0BCh+var_8C], 1
.text:00410004                 mov     eax, [esp+0BCh+var_60]
.text:00410008                 mov     ebx, [esp+0BCh+var_64]
.text:0041000C                 cmp     eax, ebx
.text:0041000E                 ja      short loc_41001F
.text:00410010
.text:00410010 loc_410010:                             ; CODE XREF: sub_40F200+E1D↓j
.text:00410010                 mov     esi, [esp+0BCh+var_78]
.text:00410014                 or      byte ptr [esi+eax*4], 18h
.text:00410018                 inc     eax
.text:00410019                 cmp     eax, [esp+0BCh+var_64]
.text:0041001D                 jbe     short loc_410010
.text:0041001F
.text:0041001F loc_41001F:                             ; CODE XREF: sub_40F200+DFA↑j
.text:0041001F                                         ; sub_40F200+E0E↑j ...
.text:0041001F                 inc     [esp+0BCh+var_44]
.text:00410023                 jmp     loc_40FEA2
.text:00410028 ; ---------------------------------------------------------------------------
.text:00410028
.text:00410028 loc_410028:                             ; CODE XREF: sub_40F200+DDD↑j
.text:00410028                 mov     edx, [esp+0BCh+var_34]
.text:0041002F                 movzx   eax, byte ptr [edx-1]
.text:00410033                 jmp     short loc_40FFE7
.text:00410035 ; ---------------------------------------------------------------------------
.text:00410035
.text:00410035 loc_410035:                             ; CODE XREF: sub_40F200+DCF↑j
.text:00410035                 mov     ecx, [esp+0BCh+arg_C]
.text:0041003C                 movzx   eax, byte ptr [ecx]
.text:0041003F                 jmp     short loc_40FFE7
.text:00410041 ; ---------------------------------------------------------------------------
.text:00410041
.text:00410041 loc_410041:                             ; CODE XREF: sub_40F200+DBE↑j
.text:00410041                                         ; sub_40F200+E60↓j
.text:00410041                 mov     eax, [esp+0BCh+var_40]
.text:00410045                 cmp     [esp+0BCh+var_48], eax
.text:00410049                 jz      loc_40F652
.text:0041004F                 mov     [esp+0BCh+var_48], eax
.text:00410053                 mov     ebx, [esp+0BCh+arg_C]
.text:0041005A                 cmp     ebx, eax
.text:0041005C                 mov     [esp+0BCh+var_44], ebx
.text:00410060                 jz      short loc_410041
.text:00410062                 jmp     loc_40FFC4
.text:00410067 ; ---------------------------------------------------------------------------
.text:00410067
.text:00410067 loc_410067:                             ; DATA XREF: .text:0040F1E0↑o
.text:00410067                 mov     eax, [esp+0BCh+var_48]
.text:0041006B                 cmp     [esp+0BCh+var_44], eax
.text:0041006F                 jz      loc_4100F1
.text:00410075
.text:00410075 loc_410075:                             ; CODE XREF: sub_40F200+F12↓j
.text:00410075                 mov     edx, [esp+0BCh+var_34]
.text:0041007C                 cmp     [esp+0BCh+var_44], edx
.text:00410080                 jz      short loc_4100E5
.text:00410082                 mov     ebp, [esp+0BCh+arg_C]
.text:00410089                 dec     ebp
.text:0041008A                 cmp     [esp+0BCh+var_44], ebp
.text:0041008E                 jz      short loc_4100D8
.text:00410090                 mov     esi, [esp+0BCh+var_44]
.text:00410094                 movzx   eax, byte ptr [esi]
.text:00410097
.text:00410097 loc_410097:                             ; CODE XREF: sub_40F200+EE3↓j
.text:00410097                                         ; sub_40F200+EEF↓j
.text:00410097                 cmp     ds:byte_422470[eax], 1
.text:0041009E                 jnz     loc_40F652
.text:004100A4                 mov     eax, [esp+0BCh+var_8C]
.text:004100A8                 test    eax, eax
.text:004100AA                 jnz     short loc_4100CF
.text:004100AC                 mov     [esp+0BCh+var_8C], 1
.text:004100B4                 mov     eax, [esp+0BCh+var_60]
.text:004100B8                 mov     ecx, [esp+0BCh+var_64]
.text:004100BC                 cmp     eax, ecx
.text:004100BE                 ja      short loc_4100CF
.text:004100C0
.text:004100C0 loc_4100C0:                             ; CODE XREF: sub_40F200+ECD↓j
.text:004100C0                 mov     edi, [esp+0BCh+var_78]
.text:004100C4                 or      byte ptr [edi+eax*4], 18h
.text:004100C8                 inc     eax
.text:004100C9                 cmp     eax, [esp+0BCh+var_64]
.text:004100CD                 jbe     short loc_4100C0
.text:004100CF
.text:004100CF loc_4100CF:                             ; CODE XREF: sub_40F200+EAA↑j
.text:004100CF                                         ; sub_40F200+EBE↑j
.text:004100CF                 inc     [esp+0BCh+var_44]
.text:004100D3                 jmp     loc_40FA2B      ; jumptable 0040F477 case 0
.text:004100D3                                         ; jumptable 0040FDF6 case 0
.text:004100D3                                         ; jumptable 0040FEC8 case 0
.text:004100D8 ; ---------------------------------------------------------------------------
.text:004100D8
.text:004100D8 loc_4100D8:                             ; CODE XREF: sub_40F200+E8E↑j
.text:004100D8                 mov     ebx, [esp+0BCh+var_34]
.text:004100DF                 movzx   eax, byte ptr [ebx-1]
.text:004100E3                 jmp     short loc_410097
.text:004100E5 ; ---------------------------------------------------------------------------
.text:004100E5
.text:004100E5 loc_4100E5:                             ; CODE XREF: sub_40F200+E80↑j
.text:004100E5                 mov     edi, [esp+0BCh+arg_C]
.text:004100EC                 movzx   eax, byte ptr [edi]
.text:004100EF                 jmp     short loc_410097
.text:004100F1 ; ---------------------------------------------------------------------------
.text:004100F1
.text:004100F1 loc_4100F1:                             ; CODE XREF: sub_40F200+E6F↑j
.text:004100F1                                         ; sub_40F200+F10↓j
.text:004100F1                 mov     ebx, [esp+0BCh+var_40]
.text:004100F5                 cmp     [esp+0BCh+var_48], ebx
.text:004100F9                 jz      loc_40F652
.text:004100FF                 mov     [esp+0BCh+var_48], ebx
.text:00410103                 mov     ecx, [esp+0BCh+arg_C]
.text:0041010A                 cmp     ecx, ebx
.text:0041010C                 mov     [esp+0BCh+var_44], ecx
.text:00410110                 jz      short loc_4100F1
.text:00410112                 jmp     loc_410075
.text:00410117 ; ---------------------------------------------------------------------------
.text:00410117
.text:00410117 loc_410117:                             ; DATA XREF: .text:0040F1DC↑o
.text:00410117                 mov     esi, [esp+0BCh+var_4C]
.text:0041011B                 movsx   ecx, byte ptr [esi+1]
.text:0041011F                 movzx   eax, byte ptr [esi]
.text:00410122                 add     esi, 2
.text:00410125                 mov     ebp, esi
.text:00410127                 shl     ecx, 8
.text:0041012A                 lea     edi, [ecx+eax]
.text:0041012D                 add     ebp, edi
.text:0041012F                 mov     [esp+0BCh+var_30], ebp
.text:00410136                 mov     eax, offset loc_40F479
.text:0041013B                 movsx   edx, byte ptr [esi+1]
.text:0041013F                 movzx   ecx, byte ptr [esi]
.text:00410142                 add     esi, 2
.text:00410145                 mov     [esp+0BCh+var_4C], esi
.text:00410149                 shl     edx, 8
.text:0041014C                 add     ecx, edx
.text:0041014E                 mov     [ebp+0], cl
.text:00410151                 mov     edi, [esp+0BCh+var_30]
.text:00410158                 sar     ecx, 8
.text:0041015B                 mov     [edi+1], cl
.text:0041015E                 mov     edx, [esp+0BCh+var_50]
.text:00410162                 cmp     esi, edx
.text:00410164                 jnz     loc_40FBF5
.text:0041016A                 jmp     loc_40F477
.text:0041016F ; ---------------------------------------------------------------------------
.text:0041016F
.text:0041016F loc_41016F:                             ; DATA XREF: .text:0040F1D8↑o
.text:0041016F                 mov     esi, [esp+0BCh+var_4C]
.text:00410173                 movsx   edi, byte ptr [esi+3]
.text:00410177                 movzx   ebp, byte ptr [esi+2]
.text:0041017B                 shl     edi, 8
.text:0041017E                 add     ebp, edi
.text:00410180                 jnz     short loc_41018C
.text:00410182                 add     [esp+0BCh+var_4C], 4
.text:00410187                 jmp     loc_40FA2B      ; jumptable 0040F477 case 0
.text:00410187                                         ; jumptable 0040FDF6 case 0
.text:00410187                                         ; jumptable 0040FEC8 case 0
.text:0041018C ; ---------------------------------------------------------------------------
.text:0041018C
.text:0041018C loc_41018C:                             ; CODE XREF: sub_40F200+F80↑j
.text:0041018C                 dec     ebp
.text:0041018D                 mov     ebx, ebp
.text:0041018F                 sar     ebp, 8
.text:00410192                 mov     [esi+2], bl
.text:00410195                 mov     ecx, ebp
.text:00410197                 mov     [esi+3], cl
.text:0041019A
.text:0041019A loc_41019A:                             ; CODE XREF: sub_40F200+14FE↓j
.text:0041019A                                         ; sub_40F200+15A0↓j ...
.text:0041019A                 mov     ebx, [esp+0BCh+var_4C]
.text:0041019E                 movsx   ecx, byte ptr [ebx+1]
.text:004101A2                 movzx   edx, byte ptr [ebx]
.text:004101A5                 shl     ecx, 8
.text:004101A8                 lea     esi, [ecx+edx]
.text:004101AB                 lea     edi, [esi+ebx+2]
.text:004101AF                 mov     [esp+0BCh+var_4C], edi
.text:004101B3                 jmp     loc_40FBDE
.text:004101B8 ; ---------------------------------------------------------------------------
.text:004101B8
.text:004101B8 loc_4101B8:                             ; DATA XREF: .text:0040F1D4↑o
.text:004101B8                 mov     ecx, [esp+0BCh+var_4C]
.text:004101BC                 movsx   ebx, byte ptr [ecx+3]
.text:004101C0                 movzx   ebp, byte ptr [ecx+2]
.text:004101C4                 shl     ebx, 8
.text:004101C7                 add     ebp, ebx
.text:004101C9                 test    ebp, ebp
.text:004101CB                 jle     short loc_4101E9
.text:004101CD                 dec     ebp
.text:004101CE                 add     ecx, 2
.text:004101D1                 mov     eax, ebp
.text:004101D3                 mov     [ecx], al
.text:004101D5                 sar     ebp, 8
.text:004101D8                 mov     edx, ebp
.text:004101DA                 mov     [ecx+1], dl
.text:004101DD                 add     ecx, 2
.text:004101E0                 mov     [esp+0BCh+var_4C], ecx
.text:004101E4                 jmp     loc_40FA2B      ; jumptable 0040F477 case 0
.text:004101E4                                         ; jumptable 0040FDF6 case 0
.text:004101E4                                         ; jumptable 0040FEC8 case 0
.text:004101E9 ; ---------------------------------------------------------------------------
.text:004101E9
.text:004101E9 loc_4101E9:                             ; CODE XREF: sub_40F200+FCB↑j
.text:004101E9                 test    ebp, ebp
.text:004101EB                 jnz     loc_40FA2B      ; jumptable 0040F477 case 0
.text:004101EB                                         ; jumptable 0040FDF6 case 0
.text:004101EB                                         ; jumptable 0040FEC8 case 0
.text:004101F1                 mov     ebp, [esp+0BCh+var_4C]
.text:004101F5                 mov     byte ptr [ebp+2], 0
.text:004101F9                 mov     byte ptr [ebp+3], 0
.text:004101FD
.text:004101FD loc_4101FD:                             ; CODE XREF: sub_40F200:loc_410B1C↓j
.text:004101FD                 mov     edx, [esp+0BCh+var_4C]
.text:00410201                 movsx   ecx, byte ptr [edx+1]
.text:00410205                 movzx   ebp, byte ptr [edx]
.text:00410208                 add     edx, 2
.text:0041020B                 mov     ebx, edx
.text:0041020D                 mov     [esp+0BCh+var_4C], edx
.text:00410211                 shl     ecx, 8
.text:00410214                 add     ebp, ecx
.text:00410216                 cmp     edx, [esp+0BCh+var_50]
.text:0041021A                 mov     [esp+0BCh+var_30], edx
.text:00410221                 jnb     short loc_410252
.text:00410223                 cmp     byte ptr [edx], 0
.text:00410226                 jnz     short loc_410243
.text:00410228                 lea     eax, [edx+1]
.text:0041022B
.text:0041022B loc_41022B:                             ; CODE XREF: sub_40F200+1041↓j
.text:0041022B                 mov     [esp+0BCh+var_30], eax
.text:00410232                 mov     ebx, eax
.text:00410234                 lea     eax, [eax+1]
.text:00410237                 cmp     ebx, [esp+0BCh+var_50]
.text:0041023B                 jnb     short loc_410252
.text:0041023D                 cmp     byte ptr [eax-1], 0
.text:00410241                 jz      short loc_41022B
.text:00410243
.text:00410243 loc_410243:                             ; CODE XREF: sub_40F200+1026↑j
.text:00410243                 cmp     ebx, [esp+0BCh+var_50]
.text:00410247                 jnb     short loc_410252
.text:00410249                 cmp     byte ptr [ebx], 6
.text:0041024C                 jz      loc_4103DA
.text:00410252
.text:00410252 loc_410252:                             ; CODE XREF: sub_40F200+1021↑j
.text:00410252                                         ; sub_40F200+103B↑j ...
.text:00410252                 mov     edi, [esp+0BCh+var_60]
.text:00410256                 mov     ebx, [esp+0BCh+var_64]
.text:0041025A                 mov     ecx, [esp+0BCh+var_28]
.text:00410261                 mov     esi, [esp+0BCh+var_24]
.text:00410268                 sub     ebx, edi
.text:0041026A                 mov     edx, ecx
.text:0041026C                 lea     edi, [ebx+ebx]
.text:0041026F                 sub     edx, esi
.text:00410271                 lea     eax, [ebx+edi+7]
.text:00410275                 cmp     edx, eax
.text:00410277                 jnb     short loc_4102ED
.text:00410279                 mov     edi, eax
.text:0041027B
.text:0041027B loc_41027B:                             ; CODE XREF: sub_40F200+10EB↓j
.text:0041027B                 mov     edx, dword_421080
.text:00410281                 lea     ebx, [edx+edx*8]
.text:00410284                 lea     esi, [edx+ebx*2]
.text:00410287                 cmp     ecx, esi
.text:00410289                 ja      loc_40F981
.text:0041028F                 lea     edx, ds:0[ecx*8]
.text:00410296                 mov     [esp+0BCh+Size], edx ; Size
.text:00410299                 call    malloc
.text:0041029E                 mov     [esp+0BCh+Size], eax ; void *
.text:004102A1                 mov     ebx, [esp+0BCh+var_28]
.text:004102A8                 mov     esi, [esp+0BCh+Src]
.text:004102AF                 shl     ebx, 2
.text:004102B2                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:004102B6                 mov     [esp+0BCh+var_B8], esi ; Src
.text:004102BA                 call    memcpy
.text:004102BF                 mov     [esp+0BCh+Src], eax
.text:004102C6                 test    eax, eax
.text:004102C8                 jz      loc_40F981
.text:004102CE                 mov     ebx, [esp+0BCh+var_28]
.text:004102D5                 mov     esi, [esp+0BCh+var_24]
.text:004102DC                 add     ebx, ebx
.text:004102DE                 mov     [esp+0BCh+var_28], ebx
.text:004102E5                 mov     ecx, ebx
.text:004102E7                 sub     ebx, esi
.text:004102E9                 cmp     ebx, edi
.text:004102EB                 jb      short loc_41027B
.text:004102ED
.text:004102ED loc_4102ED:                             ; CODE XREF: sub_40F200+1077↑j
.text:004102ED                 mov     ecx, [esp+0BCh+var_60]
.text:004102F1                 mov     eax, [esp+0BCh+var_64]
.text:004102F5                 cmp     ecx, eax
.text:004102F7                 ja      loc_4103D1
.text:004102FD                 mov     ebx, [esp+0BCh+Src]
.text:00410304
.text:00410304 loc_410304:                             ; CODE XREF: sub_40F200+1162↓j
.text:00410304                 mov     eax, [esp+0BCh+var_68]
.text:00410308                 mov     edi, [eax+ecx*4]
.text:0041030B                 mov     [ebx+esi*4], edi
.text:0041030E                 mov     edx, [esp+0BCh+var_6C]
.text:00410312                 mov     edi, [esp+0BCh+var_24]
.text:00410319                 mov     ebx, [esp+0BCh+Src]
.text:00410320                 mov     esi, [edx+ecx*4]
.text:00410323                 inc     edi
.text:00410324                 mov     [esp+0BCh+var_24], edi
.text:0041032B                 mov     [ebx+edi*4], esi
.text:0041032E                 mov     edi, [esp+0BCh+var_24]
.text:00410335                 mov     eax, [esp+0BCh+var_78]
.text:00410339                 mov     ebx, [esp+0BCh+Src]
.text:00410340                 inc     edi
.text:00410341                 mov     [esp+0BCh+var_24], edi
.text:00410348                 mov     esi, [eax+ecx*4]
.text:0041034B                 inc     ecx
.text:0041034C                 mov     [ebx+edi*4], esi
.text:0041034F                 mov     esi, [esp+0BCh+var_24]
.text:00410356                 inc     esi
.text:00410357                 cmp     ecx, [esp+0BCh+var_64]
.text:0041035B                 mov     [esp+0BCh+var_24], esi
.text:00410362                 jbe     short loc_410304
.text:00410364
.text:00410364 loc_410364:                             ; CODE XREF: sub_40F200+11D8↓j
.text:00410364                 mov     eax, [esp+0BCh+var_60]
.text:00410368                 mov     [ebx+esi*4], eax
.text:0041036B                 mov     ecx, [esp+0BCh+var_24]
.text:00410372                 mov     edi, [esp+0BCh+var_64]
.text:00410376                 mov     edx, [esp+0BCh+Src]
.text:0041037D                 inc     ecx
.text:0041037E                 mov     [esp+0BCh+var_24], ecx
.text:00410385                 mov     [edx+ecx*4], edi
.text:00410388                 mov     eax, [esp+0BCh+var_24]
.text:0041038F                 mov     esi, [esp+0BCh+var_4C]
.text:00410393                 mov     edi, [esp+0BCh+Src]
.text:0041039A                 inc     eax
.text:0041039B                 add     esi, ebp
.text:0041039D                 mov     [esp+0BCh+var_24], eax
.text:004103A4                 mov     [edi+eax*4], esi
.text:004103A7                 mov     ecx, [esp+0BCh+var_24]
.text:004103AE                 mov     ebp, [esp+0BCh+Src]
.text:004103B5                 mov     ebx, [esp+0BCh+var_44]
.text:004103B9                 inc     ecx
.text:004103BA                 mov     [esp+0BCh+var_24], ecx
.text:004103C1                 mov     [ebp+ecx*4+0], ebx
.text:004103C5                 inc     [esp+0BCh+var_24]
.text:004103CC                 jmp     loc_40FA2B      ; jumptable 0040F477 case 0
.text:004103CC                                         ; jumptable 0040FDF6 case 0
.text:004103CC                                         ; jumptable 0040FEC8 case 0
.text:004103D1 ; ---------------------------------------------------------------------------
.text:004103D1
.text:004103D1 loc_4103D1:                             ; CODE XREF: sub_40F200+10F7↑j
.text:004103D1                 mov     ebx, [esp+0BCh+Src]
.text:004103D8                 jmp     short loc_410364
.text:004103DA ; ---------------------------------------------------------------------------
.text:004103DA
.text:004103DA loc_4103DA:                             ; CODE XREF: sub_40F200+104C↑j
.text:004103DA                 movzx   edx, byte ptr [ebx+1]
.text:004103DE                 movzx   edi, byte ptr [ebx+2]
.text:004103E2                 cmp     [esp+0BCh+var_60], 101h
.text:004103EA                 lea     ebx, [edi+edx]
.text:004103ED                 mov     [esp+0BCh+var_64], ebx
.text:004103F1                 jnz     loc_410252
.text:004103F7                 mov     [esp+0BCh+var_60], edx
.text:004103FB                 jmp     loc_410252
.text:00410400 ; ---------------------------------------------------------------------------
.text:00410400
.text:00410400 loc_410400:                             ; DATA XREF: .text:0040F1D0↑o
.text:00410400                 mov     eax, [esp+0BCh+var_60]
.text:00410404                 mov     edx, [esp+0BCh+var_64]
.text:00410408                 mov     ecx, [esp+0BCh+var_28]
.text:0041040F                 mov     esi, [esp+0BCh+var_24]
.text:00410416                 sub     edx, eax
.text:00410418                 mov     ebp, ecx
.text:0041041A                 lea     ebx, [edx+edx]
.text:0041041D                 sub     ebp, esi
.text:0041041F                 lea     eax, [edx+ebx+7]
.text:00410423                 cmp     ebp, eax
.text:00410425                 jnb     short loc_41049B
.text:00410427                 mov     edi, eax
.text:00410429
.text:00410429 loc_410429:                             ; CODE XREF: sub_40F200+1299↓j
.text:00410429                 mov     edx, dword_421080
.text:0041042F                 lea     ebp, [edx+edx*8]
.text:00410432                 lea     esi, [edx+ebp*2]
.text:00410435                 cmp     ecx, esi
.text:00410437                 ja      loc_40F981
.text:0041043D                 lea     ebp, ds:0[ecx*8]
.text:00410444                 mov     [esp+0BCh+Size], ebp ; Size
.text:00410447                 call    malloc
.text:0041044C                 mov     [esp+0BCh+Size], eax ; void *
.text:0041044F                 mov     esi, [esp+0BCh+var_28]
.text:00410456                 mov     ebx, [esp+0BCh+Src]
.text:0041045D                 shl     esi, 2
.text:00410460                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00410464                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00410468                 call    memcpy
.text:0041046D                 mov     [esp+0BCh+Src], eax
.text:00410474                 test    eax, eax
.text:00410476                 jz      loc_40F981
.text:0041047C                 mov     edx, [esp+0BCh+var_28]
.text:00410483                 mov     esi, [esp+0BCh+var_24]
.text:0041048A                 add     edx, edx
.text:0041048C                 mov     [esp+0BCh+var_28], edx
.text:00410493                 mov     ecx, edx
.text:00410495                 sub     edx, esi
.text:00410497                 cmp     edx, edi
.text:00410499                 jb      short loc_410429
.text:0041049B
.text:0041049B loc_41049B:                             ; CODE XREF: sub_40F200+1225↑j
.text:0041049B                 mov     ecx, [esp+0BCh+var_60]
.text:0041049F                 mov     edi, [esp+0BCh+var_64]
.text:004104A3                 cmp     ecx, edi
.text:004104A5                 ja      loc_41057D
.text:004104AB                 mov     ebx, [esp+0BCh+Src]
.text:004104B2
.text:004104B2 loc_4104B2:                             ; CODE XREF: sub_40F200+1310↓j
.text:004104B2                 mov     eax, [esp+0BCh+var_68]
.text:004104B6                 mov     edi, [eax+ecx*4]
.text:004104B9                 mov     [ebx+esi*4], edi
.text:004104BC                 mov     edx, [esp+0BCh+var_6C]
.text:004104C0                 mov     edi, [esp+0BCh+var_24]
.text:004104C7                 mov     ebx, [esp+0BCh+Src]
.text:004104CE                 mov     ebp, [edx+ecx*4]
.text:004104D1                 inc     edi
.text:004104D2                 mov     [esp+0BCh+var_24], edi
.text:004104D9                 mov     [ebx+edi*4], ebp
.text:004104DC                 mov     ebp, [esp+0BCh+var_24]
.text:004104E3                 mov     eax, [esp+0BCh+var_78]
.text:004104E7                 mov     ebx, [esp+0BCh+Src]
.text:004104EE                 inc     ebp
.text:004104EF                 mov     [esp+0BCh+var_24], ebp
.text:004104F6                 mov     esi, [eax+ecx*4]
.text:004104F9                 inc     ecx
.text:004104FA                 mov     [ebx+ebp*4], esi
.text:004104FD                 mov     esi, [esp+0BCh+var_24]
.text:00410504                 inc     esi
.text:00410505                 cmp     ecx, [esp+0BCh+var_64]
.text:00410509                 mov     [esp+0BCh+var_24], esi
.text:00410510                 jbe     short loc_4104B2
.text:00410512
.text:00410512 loc_410512:                             ; CODE XREF: sub_40F200+1384↓j
.text:00410512                 mov     edi, [esp+0BCh+var_60]
.text:00410516                 mov     [ebx+esi*4], edi
.text:00410519                 mov     edx, [esp+0BCh+var_24]
.text:00410520                 mov     ebp, [esp+0BCh+Src]
.text:00410527                 mov     esi, [esp+0BCh+var_64]
.text:0041052B                 inc     edx
.text:0041052C                 mov     [esp+0BCh+var_24], edx
.text:00410533                 mov     [ebp+edx*4+0], esi
.text:00410537                 mov     ebx, [esp+0BCh+var_24]
.text:0041053E                 mov     ecx, [esp+0BCh+Src]
.text:00410545                 inc     ebx
.text:00410546                 mov     [esp+0BCh+var_24], ebx
.text:0041054D                 mov     dword ptr [ecx+ebx*4], 0
.text:00410554
.text:00410554 loc_410554:                             ; CODE XREF: sub_40F200+190E↓j
.text:00410554                 mov     eax, [esp+0BCh+var_24]
.text:0041055B                 mov     ecx, [esp+0BCh+Src]
.text:00410562                 inc     eax
.text:00410563                 mov     [esp+0BCh+var_24], eax
.text:0041056A                 mov     dword ptr [ecx+eax*4], 0
.text:00410571                 inc     [esp+0BCh+var_24]
.text:00410578                 jmp     loc_40FEA2
.text:0041057D ; ---------------------------------------------------------------------------
.text:0041057D
.text:0041057D loc_41057D:                             ; CODE XREF: sub_40F200+12A5↑j
.text:0041057D                 mov     ebx, [esp+0BCh+Src]
.text:00410584                 jmp     short loc_410512
.text:00410586 ; ---------------------------------------------------------------------------
.text:00410586
.text:00410586 loc_410586:                             ; DATA XREF: .text:0040F1CC↑o
.text:00410586                 mov     eax, [esp+0BCh+var_60]
.text:0041058A                 mov     ebx, [esp+0BCh+var_64]
.text:0041058E                 mov     ecx, [esp+0BCh+var_28]
.text:00410595                 mov     esi, [esp+0BCh+var_24]
.text:0041059C                 sub     ebx, eax
.text:0041059E                 mov     edx, ecx
.text:004105A0                 lea     ebp, [ebx+ebx]
.text:004105A3                 sub     edx, esi
.text:004105A5                 lea     eax, [ebx+ebp+7]
.text:004105A9                 cmp     edx, eax
.text:004105AB                 jnb     short loc_410621
.text:004105AD                 mov     edi, eax
.text:004105AF
.text:004105AF loc_4105AF:                             ; CODE XREF: sub_40F200+141F↓j
.text:004105AF                 mov     edx, dword_421080
.text:004105B5                 lea     ebx, [edx+edx*8]
.text:004105B8                 lea     esi, [edx+ebx*2]
.text:004105BB                 cmp     ecx, esi
.text:004105BD                 ja      loc_40F981
.text:004105C3                 lea     ebx, ds:0[ecx*8]
.text:004105CA                 mov     [esp+0BCh+Size], ebx ; Size
.text:004105CD                 call    malloc
.text:004105D2                 mov     [esp+0BCh+Size], eax ; void *
.text:004105D5                 mov     esi, [esp+0BCh+var_28]
.text:004105DC                 mov     ebp, [esp+0BCh+Src]
.text:004105E3                 shl     esi, 2
.text:004105E6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:004105EA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:004105EE                 call    memcpy
.text:004105F3                 mov     [esp+0BCh+Src], eax
.text:004105FA                 test    eax, eax
.text:004105FC                 jz      loc_40F981
.text:00410602                 mov     edx, [esp+0BCh+var_28]
.text:00410609                 mov     esi, [esp+0BCh+var_24]
.text:00410610                 add     edx, edx
.text:00410612                 mov     [esp+0BCh+var_28], edx
.text:00410619                 mov     ecx, edx
.text:0041061B                 sub     edx, esi
.text:0041061D                 cmp     edx, edi
.text:0041061F                 jb      short loc_4105AF
.text:00410621
.text:00410621 loc_410621:                             ; CODE XREF: sub_40F200+13AB↑j
.text:00410621                 mov     ecx, [esp+0BCh+var_60]
.text:00410625                 mov     edi, [esp+0BCh+var_64]
.text:00410629                 cmp     ecx, edi
.text:0041062B                 ja      loc_410703
.text:00410631                 mov     ebx, [esp+0BCh+Src]
.text:00410638
.text:00410638 loc_410638:                             ; CODE XREF: sub_40F200+1496↓j
.text:00410638                 mov     eax, [esp+0BCh+var_68]
.text:0041063C                 mov     edi, [eax+ecx*4]
.text:0041063F                 mov     [ebx+esi*4], edi
.text:00410642                 mov     edx, [esp+0BCh+var_6C]
.text:00410646                 mov     edi, [esp+0BCh+var_24]
.text:0041064D                 mov     ebx, [esp+0BCh+Src]
.text:00410654                 mov     ebp, [edx+ecx*4]
.text:00410657                 inc     edi
.text:00410658                 mov     [esp+0BCh+var_24], edi
.text:0041065F                 mov     [ebx+edi*4], ebp
.text:00410662                 mov     ebp, [esp+0BCh+var_24]
.text:00410669                 mov     eax, [esp+0BCh+var_78]
.text:0041066D                 mov     ebx, [esp+0BCh+Src]
.text:00410674                 inc     ebp
.text:00410675                 mov     [esp+0BCh+var_24], ebp
.text:0041067C                 mov     esi, [eax+ecx*4]
.text:0041067F                 inc     ecx
.text:00410680                 mov     [ebx+ebp*4], esi
.text:00410683                 mov     esi, [esp+0BCh+var_24]
.text:0041068A                 inc     esi
.text:0041068B                 cmp     ecx, [esp+0BCh+var_64]
.text:0041068F                 mov     [esp+0BCh+var_24], esi
.text:00410696                 jbe     short loc_410638
.text:00410698
.text:00410698 loc_410698:                             ; CODE XREF: sub_40F200+150A↓j
.text:00410698                 mov     ebp, [esp+0BCh+var_60]
.text:0041069C                 mov     [ebx+esi*4], ebp
.text:0041069F                 mov     eax, [esp+0BCh+var_24]
.text:004106A6                 mov     edi, [esp+0BCh+Src]
.text:004106AD                 mov     esi, [esp+0BCh+var_64]
.text:004106B1                 inc     eax
.text:004106B2                 mov     [esp+0BCh+var_24], eax
.text:004106B9                 mov     [edi+eax*4], esi
.text:004106BC                 mov     edx, [esp+0BCh+var_24]
.text:004106C3                 mov     ebp, [esp+0BCh+Src]
.text:004106CA                 inc     edx
.text:004106CB                 mov     [esp+0BCh+var_24], edx
.text:004106D2                 mov     dword ptr [ebp+edx*4+0], 0
.text:004106DA                 mov     ebx, [esp+0BCh+var_24]
.text:004106E1                 mov     ecx, [esp+0BCh+Src]
.text:004106E8                 inc     ebx
.text:004106E9                 mov     [esp+0BCh+var_24], ebx
.text:004106F0                 mov     dword ptr [ecx+ebx*4], 0
.text:004106F7                 inc     [esp+0BCh+var_24]
.text:004106FE                 jmp     loc_41019A
.text:00410703 ; ---------------------------------------------------------------------------
.text:00410703
.text:00410703 loc_410703:                             ; CODE XREF: sub_40F200+142B↑j
.text:00410703                 mov     ebx, [esp+0BCh+Src]
.text:0041070A                 jmp     short loc_410698
.text:0041070C ; ---------------------------------------------------------------------------
.text:0041070C
.text:0041070C loc_41070C:                             ; DATA XREF: .text:0040F1C8↑o
.text:0041070C                 mov     esi, [esp+0BCh+var_4C]
.text:00410710                 movsx   ebx, byte ptr [esi+1]
.text:00410714                 movzx   ebp, byte ptr [esi]
.text:00410717                 add     esi, 2
.text:0041071A                 mov     [esp+0BCh+var_4C], esi
.text:0041071E                 shl     ebx, 8
.text:00410721                 add     ebp, ebx
.text:00410723
.text:00410723 loc_410723:                             ; CODE XREF: sub_40F200+153A↓j
.text:00410723                                         ; sub_40F200+154C↓j
.text:00410723                 lea     edx, [esi+2]
.text:00410726                 cmp     edx, [esp+0BCh+var_50]
.text:0041072A                 jnb     short def_40FC04 ; jumptable 0040FC04 default case
.text:0041072C                 movzx   ecx, byte ptr [esi]
.text:0041072F                 sub     cl, 6
.text:00410732                 cmp     cl, 1
.text:00410735                 ja      short def_40FC04 ; jumptable 0040FC04 default case
.text:00410737                 add     esi, 3
.text:0041073A                 jmp     short loc_410723
.text:0041073C ; ---------------------------------------------------------------------------
.text:0041073C
.text:0041073C def_40FC04:                             ; CODE XREF: sub_40F200+152A↑j
.text:0041073C                                         ; sub_40F200+1535↑j
.text:0041073C                 lea     eax, [esi+6]    ; jumptable 0040FC04 default case
.text:0041073F                 cmp     eax, [esp+0BCh+var_50]
.text:00410743                 jnb     short loc_41074E
.text:00410745                 cmp     byte ptr [esi], 13h
.text:00410748                 jnz     short loc_41074E
.text:0041074A                 mov     esi, eax
.text:0041074C                 jmp     short loc_410723
.text:0041074E ; ---------------------------------------------------------------------------
.text:0041074E
.text:0041074E loc_41074E:                             ; CODE XREF: sub_40F200+1543↑j
.text:0041074E                                         ; sub_40F200+1548↑j
.text:0041074E                 mov     edi, [esp+0BCh+var_4C]
.text:00410752                 add     edi, ebp
.text:00410754                 cmp     esi, [esp+0BCh+var_50]
.text:00410758                 mov     [esp+0BCh+var_30], edi
.text:0041075F                 jz      loc_4108E5
.text:00410765                 movzx   eax, byte ptr [esi]
.text:00410768                 cmp     al, 2
.text:0041076A                 jz      loc_41099B
.text:00410770                 mov     ebp, [esp+0BCh+arg_0]
.text:00410777                 test    byte ptr [ebp+1Ch], 80h
.text:0041077B                 jz      short loc_410785
.text:0041077D                 cmp     al, 0Ah
.text:0041077F                 jz      loc_41092B
.text:00410785
.text:00410785 loc_410785:                             ; CODE XREF: sub_40F200+157B↑j
.text:00410785                 cmp     al, 4
.text:00410787                 jz      loc_410835
.text:0041078D
.text:0041078D loc_41078D:                             ; CODE XREF: sub_40F200+1652↓j
.text:0041078D                                         ; sub_40F200:loc_410894↓j ...
.text:0041078D                 sub     [esp+0BCh+var_4C], 2
.text:00410792                 mov     esi, [esp+0BCh+var_4C]
.text:00410796                 cmp     byte ptr [esi-1], 11h
.text:0041079A                 jz      short loc_4107A5
.text:0041079C                 mov     byte ptr [esi-1], 0Dh
.text:004107A0                 jmp     loc_41019A
.text:004107A5 ; ---------------------------------------------------------------------------
.text:004107A5
.text:004107A5 loc_4107A5:                             ; CODE XREF: sub_40F200+159A↑j
.text:004107A5                                         ; DATA XREF: .text:0040F1C4↑o
.text:004107A5                 mov     edi, [esp+0BCh+var_24]
.text:004107AC                 mov     ebx, [esp+0BCh+Src]
.text:004107B3                 lea     eax, [edi-3]
.text:004107B6                 mov     [esp+0BCh+var_24], eax
.text:004107BD                 lea     ecx, [edi-4]
.text:004107C0                 mov     ebp, [ebx+eax*4]
.text:004107C3                 mov     [esp+0BCh+var_24], ecx
.text:004107CA                 mov     edi, [ebx+ecx*4]
.text:004107CD                 mov     ecx, ebp
.text:004107CF                 cmp     ebp, edi
.text:004107D1                 jb      short loc_410828
.text:004107D3
.text:004107D3 loc_4107D3:                             ; CODE XREF: sub_40F200+1626↓j
.text:004107D3                 mov     eax, [esp+0BCh+var_24]
.text:004107DA                 dec     eax
.text:004107DB                 mov     [esp+0BCh+var_24], eax
.text:004107E2                 mov     edx, [ebx+eax*4]
.text:004107E5                 mov     ebx, [esp+0BCh+var_94]
.text:004107E9                 mov     [ebx+ecx*4], edx
.text:004107EC                 mov     edx, [esp+0BCh+var_24]
.text:004107F3                 mov     ebx, [esp+0BCh+Src]
.text:004107FA                 mov     esi, [esp+0BCh+var_90]
.text:004107FE                 lea     ebp, [edx-1]
.text:00410801                 mov     [esp+0BCh+var_24], ebp
.text:00410808                 mov     eax, [ebx+ebp*4]
.text:0041080B                 mov     ebp, [esp+0BCh+var_90]
.text:0041080F                 mov     [ebp+ecx*4+0], eax
.text:00410813                 lea     ebp, [edx-2]
.text:00410816                 mov     [esp+0BCh+var_24], ebp
.text:0041081D                 mov     edx, [ebx+ebp*4]
.text:00410820                 mov     [esi+ecx*4], edx
.text:00410823                 dec     ecx
.text:00410824                 cmp     ecx, edi
.text:00410826                 jnb     short loc_4107D3
.text:00410828
.text:00410828 loc_410828:                             ; CODE XREF: sub_40F200+15D1↑j
.text:00410828                 mov     [esp+0BCh+var_8C], 0
.text:00410830                 jmp     loc_41019A
.text:00410835 ; ---------------------------------------------------------------------------
.text:00410835
.text:00410835 loc_410835:                             ; CODE XREF: sub_40F200+1587↑j
.text:00410835                 mov     ebx, [esp+0BCh+var_30]
.text:0041083C                 mov     edi, ebx
.text:0041083E                 cmp     byte ptr [ebx+3], 2
.text:00410842                 jz      loc_4108F2
.text:00410848
.text:00410848 loc_410848:                             ; CODE XREF: sub_40F200+1718↓j
.text:00410848                 movzx   eax, byte ptr [edi+3]
.text:0041084C                 cmp     al, 5
.text:0041084E                 jz      short loc_4108A7
.text:00410850                 cmp     al, 4
.text:00410852                 jnz     loc_41078D
.text:00410858                 movzx   eax, byte ptr [esi+1]
.text:0041085C                 xor     edx, edx
.text:0041085E                 movzx   ebx, al
.text:00410861                 mov     [esp+0BCh+var_A5], al
.text:00410865                 cmp     edx, ebx
.text:00410867                 jge     short loc_410885
.text:00410869                 movzx   ecx, byte ptr [edi+4]
.text:0041086D                 cmp     edx, ecx
.text:0041086F                 jge     short loc_410885
.text:00410871
.text:00410871 loc_410871:                             ; CODE XREF: sub_40F200+1683↓j
.text:00410871                 movzx   eax, byte ptr [edx+edi+5]
.text:00410876                 test    [edx+esi+2], al
.text:0041087A                 jnz     short loc_410885
.text:0041087C                 inc     edx
.text:0041087D                 cmp     edx, ebx
.text:0041087F                 jge     short loc_410885
.text:00410881                 cmp     edx, ecx
.text:00410883                 jl      short loc_410871
.text:00410885
.text:00410885 loc_410885:                             ; CODE XREF: sub_40F200+1667↑j
.text:00410885                                         ; sub_40F200+166F↑j ...
.text:00410885                 movzx   ebp, [esp+0BCh+var_A5]
.text:0041088A                 cmp     edx, ebp
.text:0041088C                 jz      short loc_41089A
.text:0041088E                 movzx   ebx, byte ptr [edi+4]
.text:00410892                 cmp     edx, ebx
.text:00410894
.text:00410894 loc_410894:                             ; CODE XREF: sub_40F200+1784↓j
.text:00410894                 jnz     loc_41078D
.text:0041089A
.text:0041089A loc_41089A:                             ; CODE XREF: sub_40F200+168C↑j
.text:0041089A                 mov     edx, [esp+0BCh+var_4C]
.text:0041089E                 mov     byte ptr [edx-3], 11h
.text:004108A2                 jmp     loc_41078D
.text:004108A7 ; ---------------------------------------------------------------------------
.text:004108A7
.text:004108A7 loc_4108A7:                             ; CODE XREF: sub_40F200+164E↑j
.text:004108A7                 movzx   ebx, byte ptr [esi+1]
.text:004108AB                 xor     ecx, ecx
.text:004108AD                 movzx   eax, bl
.text:004108B0                 cmp     ecx, eax
.text:004108B2                 jge     short loc_4108DA
.text:004108B4                 mov     ebp, eax
.text:004108B6
.text:004108B6 loc_4108B6:                             ; CODE XREF: sub_40F200+16D8↓j
.text:004108B6                 movzx   edx, byte ptr [ecx+esi+2]
.text:004108BB                 test    dl, dl
.text:004108BD                 jz      short loc_4108D5
.text:004108BF                 movzx   eax, byte ptr [edi+4]
.text:004108C3                 cmp     ecx, eax
.text:004108C5                 jge     short loc_4108DA
.text:004108C7                 movzx   eax, byte ptr [ecx+edi+5]
.text:004108CC                 movzx   edx, dl
.text:004108CF                 not     eax
.text:004108D1                 test    eax, edx
.text:004108D3                 jnz     short loc_4108DA
.text:004108D5
.text:004108D5 loc_4108D5:                             ; CODE XREF: sub_40F200+16BD↑j
.text:004108D5                 inc     ecx
.text:004108D6                 cmp     ecx, ebp
.text:004108D8                 jl      short loc_4108B6
.text:004108DA
.text:004108DA loc_4108DA:                             ; CODE XREF: sub_40F200+16B2↑j
.text:004108DA                                         ; sub_40F200+16C5↑j ...
.text:004108DA                 movzx   esi, bl
.text:004108DD                 cmp     ecx, esi
.text:004108DF                 jnz     loc_41078D
.text:004108E5
.text:004108E5 loc_4108E5:                             ; CODE XREF: sub_40F200+155F↑j
.text:004108E5                 mov     ecx, [esp+0BCh+var_4C]
.text:004108E9                 mov     byte ptr [ecx-3], 11h
.text:004108ED                 jmp     loc_41078D
.text:004108F2 ; ---------------------------------------------------------------------------
.text:004108F2
.text:004108F2 loc_4108F2:                             ; CODE XREF: sub_40F200+1642↑j
.text:004108F2                 movzx   edx, byte ptr [esi+1]
.text:004108F6                 movzx   ecx, byte ptr [ebx+5]
.text:004108FA                 shl     edx, 3
.text:004108FD                 movzx   ebp, cl
.text:00410900                 cmp     edx, ebp
.text:00410902                 jle     short loc_41091E
.text:00410904                 mov     dl, cl
.text:00410906                 shr     dl, 3
.text:00410909                 and     ecx, 7
.text:0041090C                 movzx   ebx, dl
.text:0041090F                 movzx   eax, byte ptr [ebx+esi+2]
.text:00410914                 sar     eax, cl
.text:00410916                 test    al, 1
.text:00410918                 jnz     loc_410848
.text:0041091E
.text:0041091E loc_41091E:                             ; CODE XREF: sub_40F200+1702↑j
.text:0041091E                 mov     edi, [esp+0BCh+var_4C]
.text:00410922                 mov     byte ptr [edi-3], 11h
.text:00410926                 jmp     loc_41078D
.text:0041092B ; ---------------------------------------------------------------------------
.text:0041092B
.text:0041092B loc_41092B:                             ; CODE XREF: sub_40F200+157F↑j
.text:0041092B                 mov     cl, 0Ah
.text:0041092D
.text:0041092D loc_41092D:                             ; CODE XREF: sub_40F200+179F↓j
.text:0041092D                 mov     ebx, [esp+0BCh+var_30]
.text:00410934                 mov     esi, ebx
.text:00410936                 cmp     byte ptr [ebx+3], 2
.text:0041093A                 jz      short loc_410989
.text:0041093C
.text:0041093C loc_41093C:                             ; CODE XREF: sub_40F200+178C↓j
.text:0041093C                 movzx   edx, byte ptr [esi+3]
.text:00410940                 mov     bl, dl
.text:00410942                 sub     bl, 4
.text:00410945                 cmp     bl, 1
.text:00410948                 ja      loc_41078D
.text:0041094E                 movzx   edi, byte ptr [esi+4]
.text:00410952                 xor     ebx, ebx
.text:00410954                 cmp     dl, 5
.text:00410957                 setz    bl
.text:0041095A                 movzx   eax, cl
.text:0041095D                 shl     edi, 3
.text:00410960                 cmp     eax, edi
.text:00410962                 jnb     short loc_410982
.text:00410964                 mov     al, cl
.text:00410966                 shr     al, 3
.text:00410969                 and     ecx, 7
.text:0041096C                 movzx   edx, al
.text:0041096F                 movzx   eax, byte ptr [edx+esi+5]
.text:00410974                 sar     eax, cl
.text:00410976                 test    al, 1
.text:00410978                 jz      short loc_410982
.text:0041097A                 test    ebx, ebx
.text:0041097C                 setz    cl
.text:0041097F                 movzx   ebx, cl
.text:00410982
.text:00410982 loc_410982:                             ; CODE XREF: sub_40F200+1762↑j
.text:00410982                                         ; sub_40F200+1778↑j
.text:00410982                 test    ebx, ebx
.text:00410984                 jmp     loc_410894
.text:00410989 ; ---------------------------------------------------------------------------
.text:00410989
.text:00410989 loc_410989:                             ; CODE XREF: sub_40F200+173A↑j
.text:00410989                 cmp     [ebx+5], cl
.text:0041098C                 jz      short loc_41093C
.text:0041098E                 mov     esi, [esp+0BCh+var_4C]
.text:00410992                 mov     byte ptr [esi-3], 11h
.text:00410996                 jmp     loc_41078D
.text:0041099B ; ---------------------------------------------------------------------------
.text:0041099B
.text:0041099B loc_41099B:                             ; CODE XREF: sub_40F200+156A↑j
.text:0041099B                 movzx   ecx, byte ptr [esi+2]
.text:0041099F                 jmp     short loc_41092D
.text:004109A1 ; ---------------------------------------------------------------------------
.text:004109A1
.text:004109A1 loc_4109A1:                             ; DATA XREF: .text:0040F1C0↑o
.text:004109A1                 mov     edx, [esp+0BCh+var_4C]
.text:004109A5                 mov     edi, [esp+0BCh+var_60]
.text:004109A9                 mov     ebx, [esp+0BCh+var_64]
.text:004109AD                 movsx   ecx, byte ptr [edx+1]
.text:004109B1                 mov     esi, [esp+0BCh+var_24]
.text:004109B8                 sub     ebx, edi
.text:004109BA                 movzx   ebp, byte ptr [edx]
.text:004109BD                 lea     edi, [ebx+ebx]
.text:004109C0                 shl     ecx, 8
.text:004109C3                 add     edx, 2
.text:004109C6                 lea     eax, [ebx+edi+7]
.text:004109CA                 mov     [esp+0BCh+var_4C], edx
.text:004109CE                 add     ebp, ecx
.text:004109D0                 mov     ecx, [esp+0BCh+var_28]
.text:004109D7                 mov     edx, ecx
.text:004109D9                 sub     edx, esi
.text:004109DB                 cmp     edx, eax
.text:004109DD                 jnb     short loc_410A53
.text:004109DF                 mov     edi, eax
.text:004109E1
.text:004109E1 loc_4109E1:                             ; CODE XREF: sub_40F200+1851↓j
.text:004109E1                 mov     edx, dword_421080
.text:004109E7                 lea     esi, [edx+edx*8]
.text:004109EA                 lea     ebx, [edx+esi*2]
.text:004109ED                 cmp     ecx, ebx
.text:004109EF                 ja      loc_40F981
.text:004109F5                 lea     edx, ds:0[ecx*8]
.text:004109FC                 mov     [esp+0BCh+Size], edx ; Size
.text:004109FF                 call    malloc
.text:00410A04                 mov     [esp+0BCh+Size], eax ; void *
.text:00410A07                 mov     esi, [esp+0BCh+var_28]
.text:00410A0E                 mov     ebx, [esp+0BCh+Src]
.text:00410A15                 shl     esi, 2
.text:00410A18                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00410A1C                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00410A20                 call    memcpy
.text:00410A25                 mov     [esp+0BCh+Src], eax
.text:00410A2C                 test    eax, eax
.text:00410A2E                 jz      loc_40F981
.text:00410A34                 mov     ebx, [esp+0BCh+var_28]
.text:00410A3B                 mov     esi, [esp+0BCh+var_24]
.text:00410A42                 add     ebx, ebx
.text:00410A44                 mov     [esp+0BCh+var_28], ebx
.text:00410A4B                 mov     ecx, ebx
.text:00410A4D                 sub     ebx, esi
.text:00410A4F                 cmp     ebx, edi
.text:00410A51                 jb      short loc_4109E1
.text:00410A53
.text:00410A53 loc_410A53:                             ; CODE XREF: sub_40F200+17DD↑j
.text:00410A53                 mov     ecx, [esp+0BCh+var_60]
.text:00410A57                 mov     eax, [esp+0BCh+var_64]
.text:00410A5B                 cmp     ecx, eax
.text:00410A5D                 ja      loc_410B13
.text:00410A63                 mov     ebx, [esp+0BCh+Src]
.text:00410A6A
.text:00410A6A loc_410A6A:                             ; CODE XREF: sub_40F200+18C8↓j
.text:00410A6A                 mov     eax, [esp+0BCh+var_68]
.text:00410A6E                 mov     edi, [eax+ecx*4]
.text:00410A71                 mov     [ebx+esi*4], edi
.text:00410A74                 mov     edx, [esp+0BCh+var_6C]
.text:00410A78                 mov     edi, [esp+0BCh+var_24]
.text:00410A7F                 mov     ebx, [esp+0BCh+Src]
.text:00410A86                 mov     esi, [edx+ecx*4]
.text:00410A89                 inc     edi
.text:00410A8A                 mov     [esp+0BCh+var_24], edi
.text:00410A91                 mov     [ebx+edi*4], esi
.text:00410A94                 mov     edi, [esp+0BCh+var_24]
.text:00410A9B                 mov     eax, [esp+0BCh+var_78]
.text:00410A9F                 mov     ebx, [esp+0BCh+Src]
.text:00410AA6                 inc     edi
.text:00410AA7                 mov     [esp+0BCh+var_24], edi
.text:00410AAE                 mov     esi, [eax+ecx*4]
.text:00410AB1                 inc     ecx
.text:00410AB2                 mov     [ebx+edi*4], esi
.text:00410AB5                 mov     esi, [esp+0BCh+var_24]
.text:00410ABC                 inc     esi
.text:00410ABD                 cmp     ecx, [esp+0BCh+var_64]
.text:00410AC1                 mov     [esp+0BCh+var_24], esi
.text:00410AC8                 jbe     short loc_410A6A
.text:00410ACA
.text:00410ACA loc_410ACA:                             ; CODE XREF: sub_40F200+191A↓j
.text:00410ACA                 mov     eax, [esp+0BCh+var_60]
.text:00410ACE                 mov     [ebx+esi*4], eax
.text:00410AD1                 mov     edi, [esp+0BCh+var_24]
.text:00410AD8                 mov     edx, [esp+0BCh+Src]
.text:00410ADF                 mov     esi, [esp+0BCh+var_64]
.text:00410AE3                 inc     edi
.text:00410AE4                 mov     [esp+0BCh+var_24], edi
.text:00410AEB                 mov     [edx+edi*4], esi
.text:00410AEE                 mov     ebx, [esp+0BCh+var_4C]
.text:00410AF2                 mov     ecx, [esp+0BCh+var_24]
.text:00410AF9                 add     ebx, ebp
.text:00410AFB                 mov     ebp, [esp+0BCh+Src]
.text:00410B02                 inc     ecx
.text:00410B03                 mov     [esp+0BCh+var_24], ecx
.text:00410B0A                 mov     [ebp+ecx*4+0], ebx
.text:00410B0E                 jmp     loc_410554
.text:00410B13 ; ---------------------------------------------------------------------------
.text:00410B13
.text:00410B13 loc_410B13:                             ; CODE XREF: sub_40F200+185D↑j
.text:00410B13                 mov     ebx, [esp+0BCh+Src]
.text:00410B1A                 jmp     short loc_410ACA
.text:00410B1C ; ---------------------------------------------------------------------------
.text:00410B1C
.text:00410B1C loc_410B1C:                             ; DATA XREF: .text:0040F1BC↑o
.text:00410B1C                 jmp     loc_4101FD
.text:00410B21 ; ---------------------------------------------------------------------------
.text:00410B21
.text:00410B21 loc_410B21:                             ; DATA XREF: .text:0040F1B8↑o
.text:00410B21                 jmp     loc_41019A
.text:00410B26 ; ---------------------------------------------------------------------------
.text:00410B26
.text:00410B26 loc_410B26:                             ; DATA XREF: .text:0040F1B0↑o
.text:00410B26                 mov     eax, [esp+0BCh+var_38]
.text:00410B2D                 cmp     [esp+0BCh+var_44], eax
.text:00410B31                 jz      loc_40FEA2
.text:00410B37                 jmp     loc_40F652
.text:00410B37 ; ---------------------------------------------------------------------------
.text:00410B3C                 align 10h
.text:00410B40
.text:00410B40 loc_410B40:                             ; DATA XREF: .text:0040F1AC↑o
.text:00410B40                 mov     ecx, [esp+0BCh+arg_8]
.text:00410B47                 test    ecx, ecx
.text:00410B49                 jz      short loc_410B70
.text:00410B4B                 mov     ebx, [esp+0BCh+arg_4]
.text:00410B52                 cmp     [esp+0BCh+var_44], ebx
.text:00410B56
.text:00410B56 loc_410B56:                             ; CODE XREF: sub_40F200+197B↓j
.text:00410B56                 jz      loc_40FDD0
.text:00410B5C                 mov     edi, [esp+0BCh+arg_10]
.text:00410B63                 test    edi, edi
.text:00410B65
.text:00410B65 loc_410B65:                             ; CODE XREF: sub_40F200+19D7↓j
.text:00410B65                 jz      loc_40FDD0
.text:00410B6B                 jmp     loc_40F652
.text:00410B70 ; ---------------------------------------------------------------------------
.text:00410B70
.text:00410B70 loc_410B70:                             ; CODE XREF: sub_40F200+1949↑j
.text:00410B70                 mov     esi, [esp+0BCh+arg_C]
.text:00410B77                 cmp     [esp+0BCh+var_44], esi
.text:00410B7B                 jmp     short loc_410B56
.text:00410B7D ; ---------------------------------------------------------------------------
.text:00410B7D
.text:00410B7D loc_410B7D:                             ; DATA XREF: .text:0040F1A8↑o
.text:00410B7D                 mov     ebx, [esp+0BCh+var_38]
.text:00410B84                 cmp     [esp+0BCh+var_44], ebx
.text:00410B88                 jz      short loc_410BCC
.text:00410B8A                 mov     edi, [esp+0BCh+var_34]
.text:00410B91                 cmp     [esp+0BCh+var_44], edi
.text:00410B95                 jz      short loc_410BC0
.text:00410B97                 mov     edx, [esp+0BCh+var_44]
.text:00410B9B                 cmp     byte ptr [edx], 0Ah
.text:00410B9E
.text:00410B9E loc_410B9E:                             ; CODE XREF: sub_40F200+19CA↓j
.text:00410B9E                                         ; sub_40F200+1A14↓j
.text:00410B9E                 jnz     loc_40F652
.text:00410BA4                 mov     ebp, [esp+0BCh+arg_0]
.text:00410BAB                 test    byte ptr [ebp+1Ch], 80h
.text:00410BAF                 jnz     loc_40FA2B      ; jumptable 0040F477 case 0
.text:00410BAF                                         ; jumptable 0040FDF6 case 0
.text:00410BAF                                         ; jumptable 0040FEC8 case 0
.text:00410BB5                 jmp     loc_40F652
.text:00410BB5 ; ---------------------------------------------------------------------------
.text:00410BBA                 align 10h
.text:00410BC0
.text:00410BC0 loc_410BC0:                             ; CODE XREF: sub_40F200+1995↑j
.text:00410BC0                 mov     eax, [esp+0BCh+arg_C]
.text:00410BC7                 cmp     byte ptr [eax], 0Ah
.text:00410BCA                 jmp     short loc_410B9E
.text:00410BCC ; ---------------------------------------------------------------------------
.text:00410BCC
.text:00410BCC loc_410BCC:                             ; CODE XREF: sub_40F200+1988↑j
.text:00410BCC                 mov     esi, [esp+0BCh+arg_0]
.text:00410BD3                 test    byte ptr [esi+1Ch], 40h
.text:00410BD7                 jmp     short loc_410B65
.text:00410BD9 ; ---------------------------------------------------------------------------
.text:00410BD9
.text:00410BD9 loc_410BD9:                             ; DATA XREF: .text:0040F1A4↑o
.text:00410BD9                 mov     ebx, [esp+0BCh+arg_8]
.text:00410BE0                 test    ebx, ebx
.text:00410BE2                 jz      short loc_410C16
.text:00410BE4                 mov     edi, [esp+0BCh+arg_4]
.text:00410BEB                 cmp     [esp+0BCh+var_44], edi
.text:00410BEF
.text:00410BEF loc_410BEF:                             ; CODE XREF: sub_40F200+1A21↓j
.text:00410BEF                 jz      short loc_410BFC
.text:00410BF1                 mov     edx, [esp+0BCh+arg_10]
.text:00410BF8                 test    edx, edx
.text:00410BFA                 jnz     short loc_410C0C
.text:00410BFC
.text:00410BFC loc_410BFC:                             ; CODE XREF: sub_40F200:loc_410BEF↑j
.text:00410BFC                 mov     ebp, [esp+0BCh+arg_0]
.text:00410C03                 test    byte ptr [ebp+1Ch], 20h
.text:00410C07                 jmp     loc_40FCA4
.text:00410C0C ; ---------------------------------------------------------------------------
.text:00410C0C
.text:00410C0C loc_410C0C:                             ; CODE XREF: sub_40F200+19FA↑j
.text:00410C0C                 mov     ecx, [esp+0BCh+var_44]
.text:00410C10                 cmp     byte ptr [ecx-1], 0Ah
.text:00410C14                 jmp     short loc_410B9E
.text:00410C16 ; ---------------------------------------------------------------------------
.text:00410C16
.text:00410C16 loc_410C16:                             ; CODE XREF: sub_40F200+19E2↑j
.text:00410C16                 mov     eax, [esp+0BCh+arg_C]
.text:00410C1D                 cmp     [esp+0BCh+var_44], eax
.text:00410C21                 jmp     short loc_410BEF
.text:00410C23 ; ---------------------------------------------------------------------------
.text:00410C23
.text:00410C23 loc_410C23:                             ; DATA XREF: .text:0040F1A0↑o
.text:00410C23                 mov     eax, [esp+0BCh+var_4C]
.text:00410C27                 mov     ecx, [esp+0BCh+var_68]
.text:00410C2B                 movzx   esi, byte ptr [eax]
.text:00410C2E                 inc     [esp+0BCh+var_4C]
.text:00410C32                 mov     edi, [ecx+esi*4]
.text:00410C35                 mov     [esp+0BCh+var_A4], esi
.text:00410C39                 cmp     edi, offset unk_422570
.text:00410C3F                 jz      loc_40F652
.text:00410C45                 mov     ebp, [esp+0BCh+var_6C]
.text:00410C49                 mov     eax, [ebp+esi*4+0]
.text:00410C4D                 cmp     eax, offset unk_422570
.text:00410C52                 jz      loc_40F652
.text:00410C58                 mov     [esp+0BCh+var_A0], edi
.text:00410C5C                 mov     esi, [esp+0BCh+arg_8]
.text:00410C63                 xor     ecx, ecx
.text:00410C65                 test    esi, esi
.text:00410C67                 jz      short loc_410C7D
.text:00410C69                 cmp     [esp+0BCh+arg_4], edi
.text:00410C70                 ja      short loc_410C7D
.text:00410C72                 mov     edx, [esp+0BCh+var_34]
.text:00410C79                 cmp     edi, edx
.text:00410C7B                 jbe     short loc_410C82
.text:00410C7D
.text:00410C7D loc_410C7D:                             ; CODE XREF: sub_40F200+1A67↑j
.text:00410C7D                                         ; sub_40F200+1A70↑j
.text:00410C7D                 mov     ecx, 1
.text:00410C82
.text:00410C82 loc_410C82:                             ; CODE XREF: sub_40F200+1A7B↑j
.text:00410C82                 mov     edi, [esp+0BCh+arg_8]
.text:00410C89                 xor     edx, edx
.text:00410C8B                 test    edi, edi
.text:00410C8D                 jz      short loc_410CA6
.text:00410C8F                 cmp     [esp+0BCh+arg_4], eax
.text:00410C96                 ja      short loc_410CA6
.text:00410C98                 cmp     eax, [esp+0BCh+var_34]
.text:00410C9F                 ja      short loc_410CA6
.text:00410CA1                 mov     edx, 1
.text:00410CA6
.text:00410CA6 loc_410CA6:                             ; CODE XREF: sub_40F200+1A8D↑j
.text:00410CA6                                         ; sub_40F200+1A96↑j ...
.text:00410CA6                 cmp     ecx, edx
.text:00410CA8                 mov     ebx, eax
.text:00410CAA                 jnz     short loc_410CB3
.text:00410CAC                 mov     ebx, [esp+0BCh+var_3C]
.text:00410CB3
.text:00410CB3 loc_410CB3:                             ; CODE XREF: sub_40F200+1AAA↑j
.text:00410CB3                                         ; sub_40F200+1B21↓j ...
.text:00410CB3                 cmp     [esp+0BCh+var_A0], ebx
.text:00410CB7                 jz      loc_410D86
.text:00410CBD
.text:00410CBD loc_410CBD:                             ; CODE XREF: sub_40F200+1BAC↓j
.text:00410CBD                                         ; sub_40F200+1BB5↓j
.text:00410CBD                 mov     eax, [esp+0BCh+var_48]
.text:00410CC1                 cmp     [esp+0BCh+var_44], eax
.text:00410CC5                 jz      loc_410D60
.text:00410CCB
.text:00410CCB loc_410CCB:                             ; CODE XREF: sub_40F200+1B81↓j
.text:00410CCB                 mov     ecx, [esp+0BCh+var_44]
.text:00410CCF                 mov     ebp, [esp+0BCh+var_48]
.text:00410CD3                 mov     edx, [esp+0BCh+var_A0]
.text:00410CD7                 sub     ebp, ecx
.text:00410CD9                 mov     ecx, ebx
.text:00410CDB                 sub     ecx, edx
.text:00410CDD                 cmp     ebp, ecx
.text:00410CDF                 jle     short loc_410CE3
.text:00410CE1                 mov     ebp, ecx
.text:00410CE3
.text:00410CE3 loc_410CE3:                             ; CODE XREF: sub_40F200+1ADF↑j
.text:00410CE3                 mov     esi, [esp+0BCh+var_58]
.text:00410CE7                 test    esi, esi
.text:00410CE9                 jz      short loc_410D4F
.text:00410CEB                 mov     [esp+0BCh+var_B4], ebp
.text:00410CEF                 mov     edx, [esp+0BCh+var_58]
.text:00410CF3                 mov     eax, [esp+0BCh+var_A0]
.text:00410CF7                 mov     edi, [esp+0BCh+var_44]
.text:00410CFB                 mov     [esp+0BCh+var_B0], edx
.text:00410CFF                 mov     [esp+0BCh+var_B8], eax
.text:00410D03                 mov     [esp+0BCh+Size], edi
.text:00410D06                 call    sub_4118C0
.text:00410D0B                 test    eax, eax
.text:00410D0D
.text:00410D0D loc_410D0D:                             ; CODE XREF: sub_40F200+1B5E↓j
.text:00410D0D                 jnz     loc_40F652
.text:00410D13                 add     [esp+0BCh+var_44], ebp
.text:00410D17                 add     [esp+0BCh+var_A0], ebp
.text:00410D1B                 mov     ebp, [esp+0BCh+var_8C]
.text:00410D1F                 test    ebp, ebp
.text:00410D21                 jnz     short loc_410CB3
.text:00410D23                 mov     [esp+0BCh+var_8C], 1
.text:00410D2B                 mov     eax, [esp+0BCh+var_60]
.text:00410D2F                 mov     ecx, [esp+0BCh+var_64]
.text:00410D33                 cmp     eax, ecx
.text:00410D35                 ja      loc_410CB3
.text:00410D3B
.text:00410D3B loc_410D3B:                             ; CODE XREF: sub_40F200+1B48↓j
.text:00410D3B                 mov     esi, [esp+0BCh+var_78]
.text:00410D3F                 or      byte ptr [esi+eax*4], 18h
.text:00410D43                 inc     eax
.text:00410D44                 cmp     eax, [esp+0BCh+var_64]
.text:00410D48                 jbe     short loc_410D3B
.text:00410D4A                 jmp     loc_410CB3
.text:00410D4F ; ---------------------------------------------------------------------------
.text:00410D4F
.text:00410D4F loc_410D4F:                             ; CODE XREF: sub_40F200+1AE9↑j
.text:00410D4F                 cld
.text:00410D50                 mov     esi, [esp+0BCh+var_44]
.text:00410D54                 cmp     ebp, ebp
.text:00410D56                 mov     edi, [esp+0BCh+var_A0]
.text:00410D5A                 mov     ecx, ebp
.text:00410D5C                 repe cmpsb
.text:00410D5E                 jmp     short loc_410D0D
.text:00410D60 ; ---------------------------------------------------------------------------
.text:00410D60
.text:00410D60 loc_410D60:                             ; CODE XREF: sub_40F200+1AC5↑j
.text:00410D60                                         ; sub_40F200+1B7F↓j
.text:00410D60                 mov     eax, [esp+0BCh+var_40]
.text:00410D64                 cmp     [esp+0BCh+var_48], eax
.text:00410D68                 jz      loc_40F652
.text:00410D6E                 mov     [esp+0BCh+var_48], eax
.text:00410D72                 mov     edi, [esp+0BCh+arg_C]
.text:00410D79                 cmp     edi, eax
.text:00410D7B                 mov     [esp+0BCh+var_44], edi
.text:00410D7F                 jz      short loc_410D60
.text:00410D81                 jmp     loc_410CCB
.text:00410D86 ; ---------------------------------------------------------------------------
.text:00410D86
.text:00410D86 loc_410D86:                             ; CODE XREF: sub_40F200+1AB7↑j
.text:00410D86                                         ; sub_40F200+1BAA↓j
.text:00410D86                 cmp     ebx, [esp+0BCh+var_40]
.text:00410D8A                 jz      short loc_410DB1
.text:00410D8C                 mov     ebp, [esp+0BCh+var_A4]
.text:00410D90                 mov     ecx, [esp+0BCh+var_6C]
.text:00410D94                 mov     eax, [ecx+ebp*4]
.text:00410D97                 cmp     ebx, eax
.text:00410D99                 jz      short loc_410DB1
.text:00410D9B                 mov     esi, [esp+0BCh+arg_C]
.text:00410DA2                 mov     ebx, eax
.text:00410DA4                 cmp     esi, eax
.text:00410DA6                 mov     [esp+0BCh+var_A0], esi
.text:00410DAA                 jz      short loc_410D86
.text:00410DAC                 jmp     loc_410CBD
.text:00410DB1 ; ---------------------------------------------------------------------------
.text:00410DB1
.text:00410DB1 loc_410DB1:                             ; CODE XREF: sub_40F200+1B8A↑j
.text:00410DB1                                         ; sub_40F200+1B99↑j
.text:00410DB1                 cmp     [esp+0BCh+var_A0], ebx
.text:00410DB5                 jnz     loc_410CBD
.text:00410DBB                 jmp     loc_40FBDE
.text:00410DC0 ; ---------------------------------------------------------------------------
.text:00410DC0
.text:00410DC0 loc_410DC0:                             ; CODE XREF: sub_40F200+A04↑j
.text:00410DC0                                         ; DATA XREF: .text:jpt_40FC04↑o
.text:00410DC0                 mov     esi, [esp+0BCh+var_4C] ; jumptable 0040FC04 case 7
.text:00410DC4                 mov     ebx, [esp+0BCh+var_78]
.text:00410DC8                 movzx   edx, byte ptr [esi]
.text:00410DCB                 test    byte ptr [ebx+edx*4], 3
.text:00410DCF                 jz      loc_4111B7
.text:00410DD5                 mov     edi, [esp+0BCh+var_6C]
.text:00410DD9                 mov     eax, [edi+edx*4]
.text:00410DDC                 cmp     eax, offset unk_422570
.text:00410DE1                 jz      loc_4111AE
.text:00410DE7
.text:00410DE7 loc_410DE7:                             ; CODE XREF: sub_40F200+1FB2↓j
.text:00410DE7                                         ; sub_40F200+1FBF↓j
.text:00410DE7                 mov     ecx, [esp+0BCh+var_74]
.text:00410DEB                 mov     edi, [esp+0BCh+var_6C]
.text:00410DEF                 mov     ebx, [esp+0BCh+var_78]
.text:00410DF3                 mov     [ecx+edx*4], eax
.text:00410DF6                 mov     edx, [esp+0BCh+var_4C]
.text:00410DFA                 mov     eax, [esp+0BCh+var_44]
.text:00410DFE                 movzx   ebp, byte ptr [edx]
.text:00410E01                 mov     [edi+ebp*4], eax
.text:00410E04                 movzx   esi, byte ptr [edx]
.text:00410E07                 and     byte ptr [ebx+esi*4], 0FBh
.text:00410E0B                 mov     [esp+0BCh+var_8C], 0
.text:00410E13                 mov     ecx, [esp+0BCh+var_64]
.text:00410E17                 cmp     [esp+0BCh+var_60], ecx
.text:00410E1B                 jz      loc_411196
.text:00410E21                 mov     ebx, [esp+0BCh+var_4C]
.text:00410E25                 movzx   ecx, byte ptr [ebx]
.text:00410E28                 mov     dl, cl
.text:00410E2A                 dec     dl
.text:00410E2C                 jz      short loc_410E55
.text:00410E2E                 mov     esi, [esp+0BCh+var_78]
.text:00410E32                 movzx   edi, dl
.text:00410E35                 test    byte ptr [esi+edi*4], 4
.text:00410E39                 jnz     short loc_410E4D
.text:00410E3B
.text:00410E3B loc_410E3B:                             ; CODE XREF: sub_40F200+1C4B↓j
.text:00410E3B                 dec     dl
.text:00410E3D                 jz      short loc_410E55
.text:00410E3F                 mov     ebp, [esp+0BCh+var_78]
.text:00410E43                 movzx   ebx, dl
.text:00410E46                 test    byte ptr [ebp+ebx*4+0], 4
.text:00410E4B                 jz      short loc_410E3B
.text:00410E4D
.text:00410E4D loc_410E4D:                             ; CODE XREF: sub_40F200+1C39↑j
.text:00410E4D                 test    dl, dl
.text:00410E4F                 jnz     loc_41118A
.text:00410E55
.text:00410E55 loc_410E55:                             ; CODE XREF: sub_40F200+1C2C↑j
.text:00410E55                                         ; sub_40F200+1C3D↑j
.text:00410E55                 mov     [esp+0BCh+var_60], 101h
.text:00410E5D                 mov     [esp+0BCh+var_64], 100h
.text:00410E65
.text:00410E65 loc_410E65:                             ; CODE XREF: sub_40F200+1F91↓j
.text:00410E65                                         ; sub_40F200+1FA9↓j
.text:00410E65                 movzx   edx, cl
.text:00410E68                 mov     ecx, [esp+0BCh+var_78]
.text:00410E6C                 test    byte ptr [ecx+edx*4], 8
.text:00410E70                 jz      short loc_410EA5
.text:00410E72                 mov     esi, [esp+0BCh+var_4C]
.text:00410E76                 mov     edi, [esp+0BCh+var_4C]
.text:00410E7A                 dec     esi
.text:00410E7B                 cmp     [esp+0BCh+var_54], esi
.text:00410E7F                 lea     ecx, [edi+2]
.text:00410E82                 jz      short loc_410EA5
.text:00410E84
.text:00410E84 loc_410E84:                             ; CODE XREF: sub_40F200+1CB0↓j
.text:00410E84                                         ; sub_40F200+1D01↓j ...
.text:00410E84                 mov     [esp+0BCh+var_4C], ecx
.text:00410E88                 mov     ebp, [esp+0BCh+var_50]
.text:00410E8C                 mov     eax, offset loc_40F479
.text:00410E91                 cmp     ecx, ebp
.text:00410E93                 jz      loc_40F477
.text:00410E99                 movzx   ebx, byte ptr [ecx]
.text:00410E9C                 inc     [esp+0BCh+var_4C]
.text:00410EA0                 jmp     loc_40F470
.text:00410EA5 ; ---------------------------------------------------------------------------
.text:00410EA5
.text:00410EA5 loc_410EA5:                             ; CODE XREF: sub_40F200+1C70↑j
.text:00410EA5                                         ; sub_40F200+1C82↑j
.text:00410EA5                 mov     ecx, [esp+0BCh+var_4C]
.text:00410EA9                 add     ecx, 2
.text:00410EAC                 cmp     ecx, [esp+0BCh+var_50]
.text:00410EB0                 jnb     short loc_410E84
.text:00410EB2                 mov     [esp+0BCh+var_30], ecx
.text:00410EB9                 mov     ebx, [esp+0BCh+var_4C]
.text:00410EBD                 xor     ebp, ebp
.text:00410EBF                 mov     [esp+0BCh+var_97], 0
.text:00410EC4                 mov     edx, ebx
.text:00410EC6                 add     edx, 3
.text:00410EC9                 movzx   eax, byte ptr [ebx+2]
.text:00410ECD                 mov     [esp+0BCh+var_30], edx
.text:00410ED4                 cmp     eax, 13h
.text:00410ED7                 ja      loc_41117A
.text:00410EDD                 cmp     eax, 11h
.text:00410EE0                 jnb     loc_411143
.text:00410EE6                 cmp     eax, 0Dh
.text:00410EE9                 jz      loc_411143
.text:00410EEF
.text:00410EEF loc_410EEF:                             ; CODE XREF: sub_40F200+1F65↓j
.text:00410EEF                                         ; sub_40F200+1F75↓j ...
.text:00410EEF                 mov     ebx, [esp+0BCh+var_30]
.text:00410EF6                 add     ebx, ebp
.text:00410EF8                 test    ebp, ebp
.text:00410EFA                 mov     [esp+0BCh+var_30], ebx
.text:00410F01                 jns     short loc_410E84
.text:00410F03                 cmp     byte ptr [ebx], 0Fh
.text:00410F06                 jnz     loc_410E84
.text:00410F0C                 cmp     byte ptr [ebx+3], 6
.text:00410F10                 jnz     loc_410E84
.text:00410F16                 movzx   eax, byte ptr [ebx+4]
.text:00410F1A                 mov     ebp, [esp+0BCh+var_4C]
.text:00410F1E                 cmp     al, [ebp+0]
.text:00410F21                 jnz     loc_410E84
.text:00410F27                 mov     ecx, [esp+0BCh+var_78]
.text:00410F2B                 movzx   edx, al
.text:00410F2E                 movzx   eax, byte ptr [ecx+edx*4]
.text:00410F32                 test    al, 10h
.text:00410F34                 jz      short loc_410F88
.text:00410F36                 and     al, 0EFh
.text:00410F38                 mov     [ecx+edx*4], al
.text:00410F3B                 mov     eax, [esp+0BCh+var_4C]
.text:00410F3F                 movzx   ecx, byte ptr [eax]
.text:00410F42                 movzx   esi, byte ptr [eax+1]
.text:00410F46                 lea     edx, [esi+ecx]
.text:00410F49                 cmp     ecx, edx
.text:00410F4B                 jnb     short loc_410F81
.text:00410F4D
.text:00410F4D loc_410F4D:                             ; CODE XREF: sub_40F200+1D7F↓j
.text:00410F4D                 mov     edx, [esp+0BCh+var_70]
.text:00410F51                 mov     ebx, [esp+0BCh+var_68]
.text:00410F55                 mov     ebp, [esp+0BCh+var_74]
.text:00410F59                 mov     edi, [edx+ecx*4]
.text:00410F5C                 mov     [ebx+ecx*4], edi
.text:00410F5F                 mov     edx, [ebp+ecx*4+0]
.text:00410F63                 cmp     edx, edi
.text:00410F65                 jb      short loc_410F6E
.text:00410F67                 mov     eax, [esp+0BCh+var_6C]
.text:00410F6B                 mov     [eax+ecx*4], edx
.text:00410F6E
.text:00410F6E loc_410F6E:                             ; CODE XREF: sub_40F200+1D65↑j
.text:00410F6E                 mov     ebp, [esp+0BCh+var_4C]
.text:00410F72                 inc     ecx
.text:00410F73                 movzx   esi, byte ptr [ebp+0]
.text:00410F77                 movzx   edi, byte ptr [ebp+1]
.text:00410F7B                 add     esi, edi
.text:00410F7D                 cmp     ecx, esi
.text:00410F7F                 jb      short loc_410F4D
.text:00410F81
.text:00410F81 loc_410F81:                             ; CODE XREF: sub_40F200+1D4B↑j
.text:00410F81                 mov     ebx, [esp+0BCh+var_30]
.text:00410F88
.text:00410F88 loc_410F88:                             ; CODE XREF: sub_40F200+1D34↑j
.text:00410F88                 mov     esi, ebx
.text:00410F8A                 mov     eax, [esp+0BCh+var_60]
.text:00410F8E                 inc     ebx
.text:00410F8F                 mov     [esp+0BCh+var_30], ebx
.text:00410F96                 lea     ecx, [esi+3]
.text:00410F99                 mov     edi, [esp+0BCh+var_28]
.text:00410FA0                 movsx   edx, byte ptr [ebx+1]
.text:00410FA4                 movzx   ebp, byte ptr [esi+1]
.text:00410FA8                 mov     esi, [esp+0BCh+var_24]
.text:00410FAF                 mov     [esp+0BCh+var_30], ecx
.text:00410FB6                 mov     ecx, [esp+0BCh+var_64]
.text:00410FBA                 shl     edx, 8
.text:00410FBD                 add     ebp, edx
.text:00410FBF                 mov     edx, edi
.text:00410FC1                 sub     ecx, eax
.text:00410FC3                 lea     ebx, [ecx+ecx]
.text:00410FC6                 sub     edx, esi
.text:00410FC8                 lea     eax, [ecx+ebx+7]
.text:00410FCC                 cmp     edx, eax
.text:00410FCE                 jnb     short loc_411048
.text:00410FD0                 mov     [esp+0BCh+var_9C], eax
.text:00410FD4
.text:00410FD4 loc_410FD4:                             ; CODE XREF: sub_40F200+1E46↓j
.text:00410FD4                 mov     edx, dword_421080
.text:00410FDA                 lea     esi, [edx+edx*8]
.text:00410FDD                 lea     ebx, [edx+esi*2]
.text:00410FE0                 cmp     edi, ebx
.text:00410FE2                 ja      loc_40F981
.text:00410FE8                 lea     esi, ds:0[edi*8]
.text:00410FEF                 mov     [esp+0BCh+Size], esi ; Size
.text:00410FF2                 call    malloc
.text:00410FF7                 mov     [esp+0BCh+Size], eax ; void *
.text:00410FFA                 mov     ebx, [esp+0BCh+var_28]
.text:00411001                 mov     ecx, [esp+0BCh+Src]
.text:00411008                 shl     ebx, 2
.text:0041100B                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0041100F                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:00411013                 call    memcpy
.text:00411018                 mov     [esp+0BCh+Src], eax
.text:0041101F                 test    eax, eax
.text:00411021                 jz      loc_40F981
.text:00411027                 mov     edx, [esp+0BCh+var_28]
.text:0041102E                 mov     esi, [esp+0BCh+var_24]
.text:00411035                 add     edx, edx
.text:00411037                 mov     [esp+0BCh+var_28], edx
.text:0041103E                 mov     edi, edx
.text:00411040                 sub     edx, esi
.text:00411042                 cmp     edx, [esp+0BCh+var_9C]
.text:00411046                 jb      short loc_410FD4
.text:00411048
.text:00411048 loc_411048:                             ; CODE XREF: sub_40F200+1DCE↑j
.text:00411048                 mov     ecx, [esp+0BCh+var_60]
.text:0041104C                 mov     eax, [esp+0BCh+var_64]
.text:00411050                 cmp     ecx, eax
.text:00411052                 ja      loc_411137
.text:00411058                 mov     ebx, [esp+0BCh+Src]
.text:0041105F
.text:0041105F loc_41105F:                             ; CODE XREF: sub_40F200+1EBD↓j
.text:0041105F                 mov     eax, [esp+0BCh+var_68]
.text:00411063                 mov     edi, [eax+ecx*4]
.text:00411066                 mov     [ebx+esi*4], edi
.text:00411069                 mov     edx, [esp+0BCh+var_6C]
.text:0041106D                 mov     edi, [esp+0BCh+var_24]
.text:00411074                 mov     ebx, [esp+0BCh+Src]
.text:0041107B                 mov     esi, [edx+ecx*4]
.text:0041107E                 inc     edi
.text:0041107F                 mov     [esp+0BCh+var_24], edi
.text:00411086                 mov     [ebx+edi*4], esi
.text:00411089                 mov     edi, [esp+0BCh+var_24]
.text:00411090                 mov     eax, [esp+0BCh+var_78]
.text:00411094                 mov     ebx, [esp+0BCh+Src]
.text:0041109B                 inc     edi
.text:0041109C                 mov     [esp+0BCh+var_24], edi
.text:004110A3                 mov     esi, [eax+ecx*4]
.text:004110A6                 inc     ecx
.text:004110A7                 mov     [ebx+edi*4], esi
.text:004110AA                 mov     esi, [esp+0BCh+var_24]
.text:004110B1                 inc     esi
.text:004110B2                 cmp     ecx, [esp+0BCh+var_64]
.text:004110B6                 mov     [esp+0BCh+var_24], esi
.text:004110BD                 jbe     short loc_41105F
.text:004110BF
.text:004110BF loc_4110BF:                             ; CODE XREF: sub_40F200+1F3E↓j
.text:004110BF                 mov     edi, [esp+0BCh+var_60]
.text:004110C3                 mov     [ebx+esi*4], edi
.text:004110C6                 mov     eax, [esp+0BCh+var_24]
.text:004110CD                 mov     ecx, [esp+0BCh+Src]
.text:004110D4                 mov     edx, [esp+0BCh+var_64]
.text:004110D8                 inc     eax
.text:004110D9                 mov     [esp+0BCh+var_24], eax
.text:004110E0                 mov     [ecx+eax*4], edx
.text:004110E3                 mov     edi, [esp+0BCh+var_24]
.text:004110EA                 mov     esi, [esp+0BCh+var_30]
.text:004110F1                 mov     edx, [esp+0BCh+Src]
.text:004110F8                 inc     edi
.text:004110F9                 add     ebp, esi
.text:004110FB                 mov     [esp+0BCh+var_24], edi
.text:00411102                 mov     [edx+edi*4], ebp
.text:00411105                 mov     ecx, [esp+0BCh+var_24]
.text:0041110C                 mov     ebp, [esp+0BCh+Src]
.text:00411113                 mov     ebx, [esp+0BCh+var_44]
.text:00411117                 inc     ecx
.text:00411118                 mov     [esp+0BCh+var_24], ecx
.text:0041111F                 mov     [ebp+ecx*4+0], ebx
.text:00411123                 mov     esi, [esp+0BCh+var_24]
.text:0041112A                 inc     esi
.text:0041112B                 mov     [esp+0BCh+var_24], esi
.text:00411132                 jmp     loc_40F530
.text:00411137 ; ---------------------------------------------------------------------------
.text:00411137
.text:00411137 loc_411137:                             ; CODE XREF: sub_40F200+1E52↑j
.text:00411137                 mov     ebx, [esp+0BCh+Src]
.text:0041113E                 jmp     loc_4110BF
.text:00411143 ; ---------------------------------------------------------------------------
.text:00411143
.text:00411143 loc_411143:                             ; CODE XREF: sub_40F200+1CE0↑j
.text:00411143                                         ; sub_40F200+1CE9↑j ...
.text:00411143                 mov     edx, [esp+0BCh+var_30]
.text:0041114A                 lea     eax, [edx+2]
.text:0041114D                 movsx   esi, byte ptr [edx+1]
.text:00411151                 movzx   ebp, byte ptr [edx]
.text:00411154                 mov     [esp+0BCh+var_30], eax
.text:0041115B                 shl     esi, 8
.text:0041115E                 add     ebp, esi
.text:00411160                 cmp     [esp+0BCh+var_97], 0
.text:00411165                 jz      loc_410EEF
.text:0041116B                 lea     edi, [edx+4]
.text:0041116E                 mov     [esp+0BCh+var_30], edi
.text:00411175                 jmp     loc_410EEF
.text:0041117A ; ---------------------------------------------------------------------------
.text:0041117A
.text:0041117A loc_41117A:                             ; CODE XREF: sub_40F200+1CD7↑j
.text:0041117A                 cmp     eax, 16h
.text:0041117D                 jnz     loc_410EEF
.text:00411183                 mov     [esp+0BCh+var_97], 1
.text:00411188                 jmp     short loc_411143
.text:0041118A ; ---------------------------------------------------------------------------
.text:0041118A
.text:0041118A loc_41118A:                             ; CODE XREF: sub_40F200+1C4F↑j
.text:0041118A                 movzx   eax, dl
.text:0041118D                 mov     [esp+0BCh+var_64], eax
.text:00411191                 jmp     loc_410E65
.text:00411196 ; ---------------------------------------------------------------------------
.text:00411196
.text:00411196 loc_411196:                             ; CODE XREF: sub_40F200+1C1B↑j
.text:00411196                 mov     [esp+0BCh+var_60], 101h
.text:0041119E                 mov     [esp+0BCh+var_64], 100h
.text:004111A6                 movzx   ecx, byte ptr [edx]
.text:004111A9                 jmp     loc_410E65
.text:004111AE ; ---------------------------------------------------------------------------
.text:004111AE
.text:004111AE loc_4111AE:                             ; CODE XREF: sub_40F200+1BE1↑j
.text:004111AE                 mov     eax, [esp+0BCh+var_44]
.text:004111B2                 jmp     loc_410DE7
.text:004111B7 ; ---------------------------------------------------------------------------
.text:004111B7
.text:004111B7 loc_4111B7:                             ; CODE XREF: sub_40F200+1BCF↑j
.text:004111B7                 mov     ebp, [esp+0BCh+var_6C]
.text:004111BB                 mov     eax, [ebp+edx*4+0]
.text:004111BF                 jmp     loc_410DE7
.text:004111C4 ; ---------------------------------------------------------------------------
.text:004111C4
.text:004111C4 loc_4111C4:                             ; CODE XREF: sub_40F200+A04↑j
.text:004111C4                                         ; DATA XREF: .text:jpt_40FC04↑o
.text:004111C4                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 0040FC04 case 6
.text:004111C8                 mov     edx, [esp+0BCh+var_78]
.text:004111CC                 mov     [esp+0BCh+var_30], ebx
.text:004111D3                 movzx   ecx, byte ptr [ebx]
.text:004111D6                 movzx   esi, cl
.text:004111D9                 movzx   ebp, byte ptr [edx+esi*4]
.text:004111DD                 and     ebp, 3
.text:004111E0                 cmp     ebp, 3
.text:004111E3                 jz      loc_411274
.text:004111E9
.text:004111E9 loc_4111E9:                             ; CODE XREF: sub_40F200+20A6↓j
.text:004111E9                 mov     esi, [esp+0BCh+var_78]
.text:004111ED                 movzx   edx, cl
.text:004111F0                 test    byte ptr [esi+edx*4], 3
.text:004111F4                 jz      short loc_41126B
.text:004111F6                 mov     ebx, [esp+0BCh+var_68]
.text:004111FA                 mov     eax, [ebx+edx*4]
.text:004111FD                 cmp     eax, offset unk_422570
.text:00411202                 jz      short loc_411265
.text:00411204
.text:00411204 loc_411204:                             ; CODE XREF: sub_40F200+2069↓j
.text:00411204                                         ; sub_40F200+2072↓j
.text:00411204                 mov     ebp, [esp+0BCh+var_70]
.text:00411208                 mov     ebx, [esp+0BCh+var_68]
.text:0041120C                 mov     ecx, [esp+0BCh+var_78]
.text:00411210                 mov     [ebp+edx*4+0], eax
.text:00411214                 mov     ebp, [esp+0BCh+var_4C]
.text:00411218                 mov     eax, [esp+0BCh+var_44]
.text:0041121C                 movzx   edi, byte ptr [ebp+0]
.text:00411220                 mov     [ebx+edi*4], eax
.text:00411223                 movzx   esi, byte ptr [ebp+0]
.text:00411227                 or      byte ptr [ecx+esi*4], 4
.text:0041122B                 movzx   edx, byte ptr [ebp+0]
.text:0041122F                 and     byte ptr [ecx+edx*4], 0F7h
.text:00411233                 mov     [esp+0BCh+var_8C], 0
.text:0041123B                 movzx   esi, byte ptr [ebp+0]
.text:0041123F                 cmp     [esp+0BCh+var_60], 101h
.text:00411247                 mov     [esp+0BCh+var_64], esi
.text:0041124B                 jz      short loc_41125F
.text:0041124D
.text:0041124D loc_41124D:                             ; CODE XREF: sub_40F200+2063↓j
.text:0041124D                 add     [esp+0BCh+var_4C], 2
.text:00411252                 mov     ecx, [esp+0BCh+var_4C]
.text:00411256                 mov     [esp+0BCh+var_54], ecx
.text:0041125A                 jmp     loc_40FDD0
.text:0041125F ; ---------------------------------------------------------------------------
.text:0041125F
.text:0041125F loc_41125F:                             ; CODE XREF: sub_40F200+204B↑j
.text:0041125F                 mov     [esp+0BCh+var_60], esi
.text:00411263                 jmp     short loc_41124D
.text:00411265 ; ---------------------------------------------------------------------------
.text:00411265
.text:00411265 loc_411265:                             ; CODE XREF: sub_40F200+2002↑j
.text:00411265                 mov     eax, [esp+0BCh+var_44]
.text:00411269                 jmp     short loc_411204
.text:0041126B ; ---------------------------------------------------------------------------
.text:0041126B
.text:0041126B loc_41126B:                             ; CODE XREF: sub_40F200+1FF4↑j
.text:0041126B                 mov     edi, [esp+0BCh+var_68]
.text:0041126F                 mov     eax, [edi+edx*4]
.text:00411272                 jmp     short loc_411204
.text:00411274 ; ---------------------------------------------------------------------------
.text:00411274
.text:00411274 loc_411274:                             ; CODE XREF: sub_40F200+1FE3↑j
.text:00411274                 mov     [esp+0BCh+var_B4], edx
.text:00411278                 mov     eax, [esp+0BCh+var_50]
.text:0041127C                 lea     edx, [esp+0BCh+var_30]
.text:00411283                 mov     [esp+0BCh+Size], edx
.text:00411286                 mov     [esp+0BCh+var_B8], eax
.text:0041128A                 call    sub_411580
.text:0041128F                 mov     edi, [esp+0BCh+var_78]
.text:00411293                 mov     ebp, eax
.text:00411295                 and     ebp, 3
.text:00411298                 mov     ecx, [edi+esi*4]
.text:0041129B                 and     ecx, 0FFFFFFFCh
.text:0041129E                 or      ecx, ebp
.text:004112A0                 mov     [edi+esi*4], ecx
.text:004112A3                 movzx   ecx, byte ptr [ebx]
.text:004112A6                 jmp     loc_4111E9
.text:004112A6 ; ---------------------------------------------------------------------------
.text:004112AB                 align 10h
.text:004112B0
.text:004112B0 loc_4112B0:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:004112B0                                         ; sub_40F200+BF6↑j ...
.text:004112B0                 mov     edx, [esp+0BCh+var_4C] ; jumptable 0040F477 case 5
.text:004112B0                                         ; jumptable 0040FDF6 case 5
.text:004112B0                                         ; jumptable 0040FEC8 case 5
.text:004112B4                 mov     ebp, [esp+0BCh+var_48]
.text:004112B8                 cmp     byte ptr [edx-1], 5
.text:004112BC                 setz    [esp+0BCh+var_95]
.text:004112C1                 cmp     [esp+0BCh+var_44], ebp
.text:004112C5                 jz      loc_411380
.text:004112CB
.text:004112CB loc_4112CB:                             ; CODE XREF: sub_40F200+21A1↓j
.text:004112CB                 mov     esi, [esp+0BCh+var_58]
.text:004112CF                 test    esi, esi
.text:004112D1                 jz      loc_41136F
.text:004112D7                 mov     ebx, [esp+0BCh+var_44]
.text:004112DB                 mov     ecx, [esp+0BCh+var_58]
.text:004112DF                 movzx   edi, byte ptr [ebx]
.text:004112E2                 movzx   ebx, byte ptr [edi+ecx]
.text:004112E6
.text:004112E6 loc_4112E6:                             ; CODE XREF: sub_40F200+2177↓j
.text:004112E6                 mov     esi, [esp+0BCh+var_4C]
.text:004112EA                 movzx   eax, bl
.text:004112ED                 movzx   edx, byte ptr [esi]
.text:004112F0                 movzx   edi, dl
.text:004112F3                 shl     edi, 3
.text:004112F6                 mov     [esp+0BCh+var_96], dl
.text:004112FA                 cmp     eax, edi
.text:004112FC                 jnb     short loc_41131B
.text:004112FE                 mov     dl, bl
.text:00411300                 shr     dl, 3
.text:00411303                 movzx   ecx, dl
.text:00411306                 movzx   eax, byte ptr [ecx+esi+1]
.text:0041130B                 mov     ecx, ebx
.text:0041130D                 and     ecx, 7
.text:00411310                 sar     eax, cl
.text:00411312                 test    al, 1
.text:00411314                 jz      short loc_41131B
.text:00411316                 xor     [esp+0BCh+var_95], 1
.text:0041131B
.text:0041131B loc_41131B:                             ; CODE XREF: sub_40F200+20FC↑j
.text:0041131B                                         ; sub_40F200+2114↑j
.text:0041131B                 movzx   ebx, [esp+0BCh+var_96]
.text:00411320                 mov     ebp, [esp+0BCh+var_4C]
.text:00411324                 cmp     [esp+0BCh+var_95], 0
.text:00411329                 lea     esi, [ebx+ebp+1]
.text:0041132D                 mov     [esp+0BCh+var_4C], esi
.text:00411331                 jz      loc_40F652
.text:00411337                 mov     edi, [esp+0BCh+var_8C]
.text:0041133B                 test    edi, edi
.text:0041133D                 jnz     loc_41001F
.text:00411343                 mov     [esp+0BCh+var_8C], 1
.text:0041134B                 mov     eax, [esp+0BCh+var_60]
.text:0041134F                 mov     edx, [esp+0BCh+var_64]
.text:00411353                 cmp     eax, edx
.text:00411355                 ja      loc_41001F
.text:0041135B
.text:0041135B loc_41135B:                             ; CODE XREF: sub_40F200+2168↓j
.text:0041135B                 mov     ecx, [esp+0BCh+var_78]
.text:0041135F                 or      byte ptr [ecx+eax*4], 18h
.text:00411363                 inc     eax
.text:00411364                 cmp     eax, [esp+0BCh+var_64]
.text:00411368                 jbe     short loc_41135B
.text:0041136A                 jmp     loc_41001F
.text:0041136F ; ---------------------------------------------------------------------------
.text:0041136F
.text:0041136F loc_41136F:                             ; CODE XREF: sub_40F200+20D1↑j
.text:0041136F                 mov     ebp, [esp+0BCh+var_44]
.text:00411373                 movzx   ebx, byte ptr [ebp+0]
.text:00411377                 jmp     loc_4112E6
.text:00411377 ; ---------------------------------------------------------------------------
.text:0041137C                 align 10h
.text:00411380
.text:00411380 loc_411380:                             ; CODE XREF: sub_40F200+20C5↑j
.text:00411380                                         ; sub_40F200+219F↓j
.text:00411380                 mov     ecx, [esp+0BCh+var_40]
.text:00411384                 cmp     [esp+0BCh+var_48], ecx
.text:00411388                 jz      loc_40F652
.text:0041138E                 mov     [esp+0BCh+var_48], ecx
.text:00411392                 mov     eax, [esp+0BCh+arg_C]
.text:00411399                 cmp     eax, ecx
.text:0041139B                 mov     [esp+0BCh+var_44], eax
.text:0041139F                 jz      short loc_411380
.text:004113A1                 jmp     loc_4112CB
.text:004113A6 ; ---------------------------------------------------------------------------
.text:004113A6
.text:004113A6 loc_4113A6:                             ; CODE XREF: sub_40F200:loc_40F477↑j
.text:004113A6                                         ; sub_40F200+BF6↑j ...
.text:004113A6                 jmp     loc_4112B0      ; jumptable 0040F477 case 4
.text:004113A6                                         ; jumptable 0040FDF6 case 4
.text:004113A6                                         ; jumptable 0040FEC8 case 4
.text:004113AB ; ---------------------------------------------------------------------------
.text:004113AB
.text:004113AB loc_4113AB:                             ; CODE XREF: sub_40F200+C88↑j
.text:004113AB                 mov     ebx, [esp+0BCh+var_34]
.text:004113B2                 movzx   eax, byte ptr [ebx-1]
.text:004113B6                 jmp     loc_40FE95
.text:004113BB ; ---------------------------------------------------------------------------
.text:004113BB
.text:004113BB loc_4113BB:                             ; CODE XREF: sub_40F200+C76↑j
.text:004113BB                 mov     edi, [esp+0BCh+arg_C]
.text:004113C2                 movzx   eax, byte ptr [edi]
.text:004113C5                 jmp     loc_40FE95
.text:004113CA ; ---------------------------------------------------------------------------
.text:004113CA
.text:004113CA loc_4113CA:                             ; CODE XREF: sub_40F200+C43↑j
.text:004113CA                 mov     esi, [esp+0BCh+var_34]
.text:004113D1                 movzx   eax, byte ptr [esi-1]
.text:004113D5                 jmp     loc_40FE51
.text:004113DA ; ---------------------------------------------------------------------------
.text:004113DA
.text:004113DA loc_4113DA:                             ; CODE XREF: sub_40F200+C33↑j
.text:004113DA                 mov     ebp, [esp+0BCh+arg_C]
.text:004113E1                 movzx   eax, byte ptr [ebp+0]
.text:004113E5                 jmp     loc_40FE51
.text:004113EA ; ---------------------------------------------------------------------------
.text:004113EA
.text:004113EA loc_4113EA:                             ; CODE XREF: sub_40F200+C01↑j
.text:004113EA                 mov     edx, [esp+0BCh+arg_C]
.text:004113F1                 cmp     [esp+0BCh+var_44], edx
.text:004113F5                 jmp     loc_40FE12
.text:004113FA ; ---------------------------------------------------------------------------
.text:004113FA
.text:004113FA loc_4113FA:                             ; CODE XREF: sub_40F200+AFB↑j
.text:004113FA                 mov     ebx, [esp+0BCh+arg_C]
.text:00411401                 cmp     [esp+0BCh+var_44], ebx
.text:00411405                 jmp     loc_40FD0C
.text:0041140A ; ---------------------------------------------------------------------------
.text:0041140A
.text:0041140A loc_41140A:                             ; CODE XREF: sub_40F200+993↑j
.text:0041140A                 mov     edi, [esp+0BCh+var_44]
.text:0041140E                 cmp     byte ptr [edi], 0
.text:00411411                 jmp     loc_40FBA9
.text:00411416 ; ---------------------------------------------------------------------------
.text:00411416
.text:00411416 loc_411416:                             ; CODE XREF: sub_40F200+964↑j
.text:00411416                 mov     edi, [esp+0BCh+var_44]
.text:0041141A                 cmp     byte ptr [edi], 0Ah
.text:0041141D                 jmp     loc_40FB7A
.text:00411422 ; ---------------------------------------------------------------------------
.text:00411422
.text:00411422 loc_411422:                             ; CODE XREF: sub_40F200+94B↑j
.text:00411422                                         ; sub_40F200+2241↓j
.text:00411422                 mov     eax, [esp+0BCh+var_40]
.text:00411426                 cmp     [esp+0BCh+var_48], eax
.text:0041142A                 jz      loc_40F652
.text:00411430                 mov     [esp+0BCh+var_48], eax
.text:00411434                 mov     ecx, [esp+0BCh+arg_C]
.text:0041143B                 cmp     ecx, eax
.text:0041143D                 mov     [esp+0BCh+var_44], ecx
.text:00411441                 jz      short loc_411422
.text:00411443                 jmp     loc_40FB51
.text:00411448 ; ---------------------------------------------------------------------------
.text:00411448
.text:00411448 loc_411448:                             ; CODE XREF: sub_40F200+21B↑j
.text:00411448                                         ; sub_40F200+22F↑j
.text:00411448                 mov     edi, [esp+0BCh+arg_C]
.text:0041144F                 mov     esi, [esp+0BCh+arg_14]
.text:00411456                 mov     ecx, [esp+0BCh+arg_8]
.text:0041145D                 mov     ebp, [esp+0BCh+var_40]
.text:00411461                 add     edi, esi
.text:00411463                 sub     edi, ecx
.text:00411465                 mov     [esp+0BCh+var_44], edi
.text:00411469                 mov     [esp+0BCh+var_48], ebp
.text:0041146D                 jmp     loc_40F454
.text:00411472 ; ---------------------------------------------------------------------------
.text:00411472
.text:00411472 loc_411472:                             ; CODE XREF: sub_40F200+1F1↑j
.text:00411472                 mov     ebp, [esp+0BCh+arg_C]
.text:00411479                 mov     ebx, [esp+0BCh+arg_8]
.text:00411480                 mov     edi, [esp+0BCh+var_34]
.text:00411487                 add     esi, ebp
.text:00411489                 sub     esi, ebx
.text:0041148B                 mov     [esp+0BCh+var_3C], edi
.text:00411492                 jmp     loc_40F40E
.text:00411497 ; ---------------------------------------------------------------------------
.text:00411497
.text:00411497 loc_411497:                             ; CODE XREF: sub_40F200+B0↑j
.text:00411497                 mov     edi, [esp+0BCh+var_5C]
.text:0041149B                 shl     edi, 2
.text:0041149E                 mov     [esp+0BCh+Size], edi ; Size
.text:004114A1                 call    malloc
.text:004114A6                 mov     [esp+0BCh+var_68], eax
.text:004114AA                 mov     [esp+0BCh+Size], edi ; Size
.text:004114AD                 call    malloc
.text:004114B2                 mov     [esp+0BCh+var_6C], eax
.text:004114B6                 mov     [esp+0BCh+Size], edi ; Size
.text:004114B9                 call    malloc
.text:004114BE                 mov     [esp+0BCh+var_70], eax
.text:004114C2                 mov     [esp+0BCh+Size], edi ; Size
.text:004114C5                 call    malloc
.text:004114CA                 mov     [esp+0BCh+var_74], eax
.text:004114CE                 mov     [esp+0BCh+Size], edi ; Size
.text:004114D1                 call    malloc
.text:004114D6                 mov     [esp+0BCh+var_80], eax
.text:004114DA                 mov     [esp+0BCh+Size], edi ; Size
.text:004114DD                 call    malloc
.text:004114E2                 mov     [esp+0BCh+var_84], eax
.text:004114E6                 mov     [esp+0BCh+Size], edi ; Size
.text:004114E9                 call    malloc
.text:004114EE                 mov     [esp+0BCh+var_78], eax
.text:004114F2                 mov     [esp+0BCh+Size], edi ; Size
.text:004114F5                 call    malloc
.text:004114FA                 mov     [esp+0BCh+var_90], eax
.text:004114FE                 mov     [esp+0BCh+Size], edi ; Size
.text:00411501                 call    malloc
.text:00411506                 mov     [esp+0BCh+var_94], eax
.text:0041150A                 mov     ecx, [esp+0BCh+var_68]
.text:0041150E                 test    ecx, ecx
.text:00411510                 jz      loc_40F981
.text:00411516                 mov     ebx, [esp+0BCh+var_6C]
.text:0041151A                 test    ebx, ebx
.text:0041151C                 jz      loc_40F981
.text:00411522                 mov     edx, [esp+0BCh+var_70]
.text:00411526                 test    edx, edx
.text:00411528                 jz      loc_40F981
.text:0041152E                 mov     ebp, [esp+0BCh+var_74]
.text:00411532                 test    ebp, ebp
.text:00411534                 jz      loc_40F981
.text:0041153A                 mov     ecx, [esp+0BCh+var_78]
.text:0041153E                 test    ecx, ecx
.text:00411540                 jz      loc_40F981
.text:00411546                 mov     edi, [esp+0BCh+var_80]
.text:0041154A                 test    edi, edi
.text:0041154C                 jz      loc_40F981
.text:00411552                 mov     ebx, [esp+0BCh+var_84]
.text:00411556                 test    ebx, ebx
.text:00411558                 jz      loc_40F981
.text:0041155E                 mov     edx, [esp+0BCh+var_90]
.text:00411562                 test    edx, edx
.text:00411564                 jz      loc_40F981
.text:0041156A                 test    eax, eax
.text:0041156C                 jnz     loc_40F2FE
.text:00411572                 jmp     loc_40F981
.text:00411572 sub_40F200      endp
.text:00411572
.text:00411572 ; ---------------------------------------------------------------------------
.text:00411577                 align 10h
.text:00411580
.text:00411580 ; =============== S U B R O U T I N E =======================================
.text:00411580
.text:00411580
.text:00411580 sub_411580      proc near               ; CODE XREF: sub_40F200+208A↑p
.text:00411580                                         ; sub_411730+CA↓p
.text:00411580
.text:00411580 var_2C          = dword ptr -2Ch
.text:00411580 var_28          = dword ptr -28h
.text:00411580 var_24          = dword ptr -24h
.text:00411580 var_14          = dword ptr -14h
.text:00411580 arg_0           = dword ptr  4
.text:00411580 arg_4           = dword ptr  8
.text:00411580 arg_8           = dword ptr  0Ch
.text:00411580
.text:00411580                 push    ebp
.text:00411581                 push    edi
.text:00411582                 push    esi
.text:00411583                 push    ebx
.text:00411584                 sub     esp, 1Ch
.text:00411587                 mov     ebp, [esp+2Ch+arg_0]
.text:0041158B                 mov     edi, [esp+2Ch+arg_4]
.text:0041158F                 mov     esi, [esp+2Ch+arg_8]
.text:00411593                 mov     eax, [ebp+0]
.text:00411596                 add     eax, 2
.text:00411599                 cmp     eax, edi
.text:0041159B                 mov     ecx, eax
.text:0041159D                 mov     [esp+2Ch+var_14], eax
.text:004115A1                 jnb     short loc_4115E3
.text:004115A3                 lea     esi, [esi+0]
.text:004115A9                 lea     edi, [edi+0]
.text:004115B0
.text:004115B0 loc_4115B0:                             ; CODE XREF: sub_411580+61↓j
.text:004115B0                 movzx   eax, byte ptr [ecx]
.text:004115B3                 cmp     eax, 7
.text:004115B6                 jz      loc_411693
.text:004115BC                 cmp     eax, 0Fh
.text:004115BF                 jz      short loc_4115F0
.text:004115C1                 mov     [esp+2Ch+var_24], esi
.text:004115C5                 lea     ebx, [esp+2Ch+var_14]
.text:004115C9                 mov     [esp+2Ch+var_28], edi
.text:004115CD                 mov     [esp+2Ch+var_2C], ebx
.text:004115D0                 call    sub_411730
.text:004115D5                 xor     edx, edx
.text:004115D7                 test    al, al
.text:004115D9                 jz      short loc_4115E5
.text:004115DB
.text:004115DB loc_4115DB:                             ; CODE XREF: sub_411580+8B↓j
.text:004115DB                                         ; sub_411580+BE↓j
.text:004115DB                 mov     ecx, [esp+2Ch+var_14]
.text:004115DF                 cmp     ecx, edi
.text:004115E1                 jb      short loc_4115B0
.text:004115E3
.text:004115E3 loc_4115E3:                             ; CODE XREF: sub_411580+21↑j
.text:004115E3                 xor     edx, edx
.text:004115E5
.text:004115E5 loc_4115E5:                             ; CODE XREF: sub_411580+59↑j
.text:004115E5                                         ; sub_411580+B8↓j ...
.text:004115E5                 add     esp, 1Ch
.text:004115E8                 mov     eax, edx
.text:004115EA                 pop     ebx
.text:004115EB                 pop     esi
.text:004115EC                 pop     edi
.text:004115ED                 pop     ebp
.text:004115EE                 retn
.text:004115EE ; ---------------------------------------------------------------------------
.text:004115EF                 align 10h
.text:004115F0
.text:004115F0 loc_4115F0:                             ; CODE XREF: sub_411580+3F↑j
.text:004115F0                 lea     edx, [ecx+1]
.text:004115F3                 mov     [esp+2Ch+var_14], edx
.text:004115F7                 movsx   eax, byte ptr [edx+1]
.text:004115FB                 lea     edx, [ecx+3]
.text:004115FE                 movzx   ebx, byte ptr [ecx+1]
.text:00411602                 mov     [esp+2Ch+var_14], edx
.text:00411606                 shl     eax, 8
.text:00411609                 add     ebx, eax
.text:0041160B                 js      short loc_4115DB
.text:0041160D                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00411612                 jz      short loc_411640
.text:00411614
.text:00411614 loc_411614:                             ; CODE XREF: sub_411580+E9↓j
.text:00411614                                         ; sub_411580+111↓j
.text:00411614                 movsx   ecx, byte ptr [edx-1]
.text:00411618                 movzx   ebx, byte ptr [edx-2]
.text:0041161C                 mov     [esp+2Ch+var_2C], edx
.text:0041161F                 mov     [esp+2Ch+var_24], esi
.text:00411623                 shl     ecx, 8
.text:00411626                 add     ebx, ecx
.text:00411628                 lea     ecx, [ebx+edx]
.text:0041162B                 mov     [esp+2Ch+var_28], ecx
.text:0041162F                 call    sub_4116B0
.text:00411634                 xor     edx, edx
.text:00411636                 test    al, al
.text:00411638                 jz      short loc_4115E5
.text:0041163A                 add     [esp+2Ch+var_14], ebx
.text:0041163E                 jmp     short loc_4115DB
.text:00411640 ; ---------------------------------------------------------------------------
.text:00411640
.text:00411640 loc_411640:                             ; CODE XREF: sub_411580+92↑j
.text:00411640                                         ; sub_411580+109↓j
.text:00411640                 mov     [esp+2Ch+var_2C], edx
.text:00411643                 lea     ecx, [ebx+edx-3]
.text:00411647                 mov     [esp+2Ch+var_24], esi
.text:0041164B                 mov     [esp+2Ch+var_28], ecx
.text:0041164F                 call    sub_4116B0
.text:00411654                 xor     edx, edx
.text:00411656                 test    al, al
.text:00411658                 jz      short loc_4115E5
.text:0041165A                 mov     ecx, [esp+2Ch+var_14]
.text:0041165E                 add     ecx, ebx
.text:00411660                 mov     edx, ecx
.text:00411662                 mov     [esp+2Ch+var_14], ecx
.text:00411666                 cmp     byte ptr [ecx], 0Fh
.text:00411669                 jnz     short loc_411614
.text:0041166B                 inc     edx
.text:0041166C                 mov     [esp+2Ch+var_14], edx
.text:00411670                 movsx   eax, byte ptr [edx+1]
.text:00411674                 lea     edx, [ecx+3]
.text:00411677                 movzx   ebx, byte ptr [ecx+1]
.text:0041167B                 mov     [esp+2Ch+var_14], edx
.text:0041167F                 shl     eax, 8
.text:00411682                 add     ebx, eax
.text:00411684                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00411689                 jz      short loc_411640
.text:0041168B                 mov     [esp+2Ch+var_14], ecx
.text:0041168F                 mov     edx, ecx
.text:00411691                 jmp     short loc_411614
.text:00411693 ; ---------------------------------------------------------------------------
.text:00411693
.text:00411693 loc_411693:                             ; CODE XREF: sub_411580+36↑j
.text:00411693                 lea     edx, [ecx+2]
.text:00411696                 mov     [ebp+0], edx
.text:00411699                 mov     edx, 1
.text:0041169E                 jmp     loc_4115E5
.text:0041169E sub_411580      endp
.text:0041169E
.text:0041169E ; ---------------------------------------------------------------------------
.text:004116A3                 align 10h
.text:004116B0
.text:004116B0 ; =============== S U B R O U T I N E =======================================
.text:004116B0
.text:004116B0
.text:004116B0 sub_4116B0      proc near               ; CODE XREF: sub_411580+AF↑p
.text:004116B0                                         ; sub_411580+CF↑p
.text:004116B0
.text:004116B0 var_1C          = dword ptr -1Ch
.text:004116B0 var_18          = dword ptr -18h
.text:004116B0 var_14          = dword ptr -14h
.text:004116B0 var_C           = dword ptr -0Ch
.text:004116B0 arg_0           = dword ptr  4
.text:004116B0 arg_4           = dword ptr  8
.text:004116B0 arg_8           = dword ptr  0Ch
.text:004116B0
.text:004116B0                 push    esi
.text:004116B1                 push    ebx
.text:004116B2                 sub     esp, 14h
.text:004116B5                 mov     edx, [esp+1Ch+arg_0]
.text:004116B9                 mov     ebx, [esp+1Ch+arg_4]
.text:004116BD                 mov     esi, [esp+1Ch+arg_8]
.text:004116C1                 mov     ecx, edx
.text:004116C3                 mov     [esp+1Ch+var_C], edx
.text:004116C7                 cmp     edx, ebx
.text:004116C9                 jnb     short loc_4116F7
.text:004116CB                 nop
.text:004116CC                 lea     esi, [esi+0]
.text:004116D0
.text:004116D0 loc_4116D0:                             ; CODE XREF: sub_4116B0+45↓j
.text:004116D0                 cmp     byte ptr [ecx], 0Fh
.text:004116D3                 jz      short loc_411704
.text:004116D5                 mov     [esp+1Ch+var_14], esi
.text:004116D9                 lea     edx, [esp+1Ch+var_C]
.text:004116DD                 mov     [esp+1Ch+var_1C], edx
.text:004116E0                 mov     [esp+1Ch+var_18], ebx
.text:004116E4                 call    sub_411730
.text:004116E9                 xor     edx, edx
.text:004116EB                 test    al, al
.text:004116ED                 jz      short loc_4116FC
.text:004116EF
.text:004116EF loc_4116EF:                             ; CODE XREF: sub_4116B0+70↓j
.text:004116EF                 mov     ecx, [esp+1Ch+var_C]
.text:004116F3                 cmp     ecx, ebx
.text:004116F5                 jb      short loc_4116D0
.text:004116F7
.text:004116F7 loc_4116F7:                             ; CODE XREF: sub_4116B0+19↑j
.text:004116F7                 mov     edx, 1
.text:004116FC
.text:004116FC loc_4116FC:                             ; CODE XREF: sub_4116B0+3D↑j
.text:004116FC                 add     esp, 14h
.text:004116FF                 mov     eax, edx
.text:00411701                 pop     ebx
.text:00411702                 pop     esi
.text:00411703                 retn
.text:00411704 ; ---------------------------------------------------------------------------
.text:00411704
.text:00411704 loc_411704:                             ; CODE XREF: sub_4116B0+23↑j
.text:00411704                 lea     eax, [ecx+1]
.text:00411707                 mov     [esp+1Ch+var_C], eax
.text:0041170B                 movsx   eax, byte ptr [eax+1]
.text:0041170F                 movzx   edx, byte ptr [ecx+1]
.text:00411713                 shl     eax, 8
.text:00411716                 add     edx, eax
.text:00411718                 lea     eax, [edx+ecx+3]
.text:0041171C                 mov     [esp+1Ch+var_C], eax
.text:00411720                 jmp     short loc_4116EF
.text:00411720 sub_4116B0      endp
.text:00411720
.text:00411720 ; ---------------------------------------------------------------------------
.text:00411722                 align 10h
.text:00411730
.text:00411730 ; =============== S U B R O U T I N E =======================================
.text:00411730
.text:00411730
.text:00411730 sub_411730      proc near               ; CODE XREF: sub_411580+50↑p
.text:00411730                                         ; sub_4116B0+34↑p
.text:00411730
.text:00411730 var_1C          = dword ptr -1Ch
.text:00411730 var_18          = dword ptr -18h
.text:00411730 var_14          = dword ptr -14h
.text:00411730 var_10          = dword ptr -10h
.text:00411730 var_C           = dword ptr -0Ch
.text:00411730 var_8           = dword ptr -8
.text:00411730 var_4           = dword ptr -4
.text:00411730 arg_0           = dword ptr  4
.text:00411730 arg_4           = dword ptr  8
.text:00411730 arg_8           = dword ptr  0Ch
.text:00411730
.text:00411730                 sub     esp, 1Ch
.text:00411733                 mov     [esp+1Ch+var_4], edi
.text:00411737                 mov     edi, [esp+1Ch+arg_0]
.text:0041173B                 mov     [esp+1Ch+var_C], ebx
.text:0041173F                 mov     ebx, [esp+1Ch+arg_8]
.text:00411743                 mov     [esp+1Ch+var_8], esi
.text:00411747                 mov     edx, [edi]
.text:00411749                 mov     [esp+1Ch+var_10], edx
.text:0041174D                 movzx   eax, byte ptr [edx]
.text:00411750                 inc     edx
.text:00411751                 mov     [esp+1Ch+var_10], edx
.text:00411755                 cmp     eax, 1Dh        ; switch 30 cases
.text:00411758                 ja      def_41175E      ; jumptable 0041175E default case, cases 1-5,7,14-20,22,24,25
.text:0041175E                 jmp     ds:jpt_41175E[eax*4] ; switch jump
.text:0041175E ; ---------------------------------------------------------------------------
.text:00411765                 align 4
.text:00411768 jpt_41175E      dd offset loc_411813    ; DATA XREF: sub_411730+2E↑r
.text:00411768                 dd offset def_41175E    ; jump table for switch statement
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset loc_4117E0
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset loc_411842
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411854
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset loc_411875
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset loc_4118B1
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset def_41175E
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:00411768                 dd offset loc_411813
.text:004117E0 ; ---------------------------------------------------------------------------
.text:004117E0
.text:004117E0 loc_4117E0:                             ; CODE XREF: sub_411730+2E↑j
.text:004117E0                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:004117E0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0041175E case 6
.text:004117E4                 mov     edx, [esp+1Ch+arg_4]
.text:004117E8                 movzx   esi, byte ptr [ecx]
.text:004117EB                 lea     ecx, [esp+1Ch+var_10]
.text:004117EF                 mov     [esp+1Ch+var_18], edx
.text:004117F3                 mov     [esp+1Ch+var_1C], ecx
.text:004117F6                 mov     [esp+1Ch+var_14], ebx
.text:004117FA                 call    sub_411580
.text:004117FF                 movzx   edx, byte ptr [ebx+esi*4]
.text:00411803                 mov     cl, al
.text:00411805                 and     edx, 3
.text:00411808                 cmp     edx, 3
.text:0041180B                 jz      short loc_411830
.text:0041180D
.text:0041180D loc_41180D:                             ; CODE XREF: sub_411730+110↓j
.text:0041180D                 xor     eax, eax
.text:0041180F                 test    cl, cl
.text:00411811                 jz      short loc_411820
.text:00411813
.text:00411813 loc_411813:                             ; CODE XREF: sub_411730+2E↑j
.text:00411813                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:00411813                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0041175E cases 0,9-12,26-29
.text:00411817
.text:00411817 loc_411817:                             ; CODE XREF: sub_411730+11D↓j
.text:00411817                                         ; sub_411730+143↓j
.text:00411817                 mov     [edi], ecx
.text:00411819                 mov     eax, 1
.text:0041181E                 mov     esi, esi
.text:00411820
.text:00411820 loc_411820:                             ; CODE XREF: sub_411730+E1↑j
.text:00411820                                         ; sub_411730+122↓j ...
.text:00411820                 mov     ebx, [esp+1Ch+var_C]
.text:00411824                 mov     esi, [esp+1Ch+var_8]
.text:00411828                 mov     edi, [esp+1Ch+var_4]
.text:0041182C                 add     esp, 1Ch
.text:0041182F                 retn
.text:00411830 ; ---------------------------------------------------------------------------
.text:00411830
.text:00411830 loc_411830:                             ; CODE XREF: sub_411730+DB↑j
.text:00411830                 mov     eax, [ebx+esi*4]
.text:00411833                 mov     edx, ecx
.text:00411835                 and     edx, 3
.text:00411838                 and     eax, 0FFFFFFFCh
.text:0041183B                 or      eax, edx
.text:0041183D                 mov     [ebx+esi*4], eax
.text:00411840                 jmp     short loc_41180D
.text:00411842 ; ---------------------------------------------------------------------------
.text:00411842
.text:00411842 loc_411842:                             ; CODE XREF: sub_411730+2E↑j
.text:00411842                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:00411842                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0041175E case 8
.text:00411846                 movzx   esi, byte ptr [ecx]
.text:00411849                 test    byte ptr [ebx+esi*4], 3
.text:0041184D                 jnz     short loc_411817
.text:0041184F                 nop
.text:00411850
.text:00411850 def_41175E:                             ; CODE XREF: sub_411730+28↑j
.text:00411850                                         ; sub_411730+2E↑j ...
.text:00411850                 xor     eax, eax        ; jumptable 0041175E default case, cases 1-5,7,14-20,22,24,25
.text:00411852                 jmp     short loc_411820
.text:00411854 ; ---------------------------------------------------------------------------
.text:00411854
.text:00411854 loc_411854:                             ; CODE XREF: sub_411730+2E↑j
.text:00411854                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:00411854                 mov     edx, [esp+1Ch+var_10] ; jumptable 0041175E case 13
.text:00411858                 lea     ecx, [edx+2]
.text:0041185B                 movsx   esi, byte ptr [edx+1]
.text:0041185F                 movzx   ebx, byte ptr [edx]
.text:00411862                 mov     [esp+1Ch+var_10], ecx
.text:00411866                 shl     esi, 8
.text:00411869                 add     ebx, esi
.text:0041186B                 js      short def_41175E ; jumptable 0041175E default case, cases 1-5,7,14-20,22,24,25
.text:0041186D                 add     ecx, ebx
.text:0041186F
.text:0041186F loc_41186F:                             ; CODE XREF: sub_411730+17F↓j
.text:0041186F                 mov     [esp+1Ch+var_10], ecx
.text:00411873                 jmp     short loc_411817
.text:00411875 ; ---------------------------------------------------------------------------
.text:00411875
.text:00411875 loc_411875:                             ; CODE XREF: sub_411730+2E↑j
.text:00411875                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:00411875                 mov     edx, [esp+1Ch+var_10] ; jumptable 0041175E case 21
.text:00411879                 lea     esi, [edx+2]
.text:0041187C                 mov     [esp+1Ch+var_10], esi
.text:00411880                 movsx   eax, byte ptr [esi+1]
.text:00411884                 movzx   ebx, byte ptr [edx+2]
.text:00411888                 shl     eax, 8
.text:0041188B                 add     ebx, eax
.text:0041188D                 lea     eax, [edx+4]
.text:00411890                 mov     [esp+1Ch+var_10], eax
.text:00411894                 xor     eax, eax
.text:00411896                 test    ebx, ebx
.text:00411898                 jnz     short loc_411820
.text:0041189A                 mov     [esp+1Ch+var_10], edx
.text:0041189E                 mov     eax, edx
.text:004118A0                 movsx   ebx, byte ptr [eax+1]
.text:004118A4                 movzx   edx, byte ptr [edx]
.text:004118A7                 shl     ebx, 8
.text:004118AA                 add     edx, ebx
.text:004118AC                 lea     ecx, [edx+esi]
.text:004118AF                 jmp     short loc_41186F
.text:004118B1 ; ---------------------------------------------------------------------------
.text:004118B1
.text:004118B1 loc_4118B1:                             ; CODE XREF: sub_411730+2E↑j
.text:004118B1                                         ; DATA XREF: sub_411730:jpt_41175E↑o
.text:004118B1                 add     [esp+1Ch+var_10], 4 ; jumptable 0041175E case 23
.text:004118B6                 jmp     short def_41175E ; jumptable 0041175E default case, cases 1-5,7,14-20,22,24,25
.text:004118B6 sub_411730      endp
.text:004118B6
.text:004118B6 ; ---------------------------------------------------------------------------
.text:004118B8                 align 10h
.text:004118C0
.text:004118C0 ; =============== S U B R O U T I N E =======================================
.text:004118C0
.text:004118C0
.text:004118C0 sub_4118C0      proc near               ; CODE XREF: sub_40F200+1B06↑p
.text:004118C0
.text:004118C0 arg_0           = dword ptr  4
.text:004118C0 arg_4           = dword ptr  8
.text:004118C0 arg_8           = dword ptr  0Ch
.text:004118C0 arg_C           = dword ptr  10h
.text:004118C0
.text:004118C0                 push    edi
.text:004118C1                 push    esi
.text:004118C2                 push    ebx
.text:004118C3                 mov     esi, [esp+0Ch+arg_8]
.text:004118C7                 mov     edi, [esp+0Ch+arg_C]
.text:004118CB                 mov     ebx, [esp+0Ch+arg_0]
.text:004118CF                 test    esi, esi
.text:004118D1                 mov     ecx, [esp+0Ch+arg_4]
.text:004118D5                 jz      short loc_4118F4
.text:004118D7                 mov     esi, esi
.text:004118D9                 lea     edi, [edi+0]
.text:004118E0
.text:004118E0 loc_4118E0:                             ; CODE XREF: sub_4118C0+32↓j
.text:004118E0                 movzx   eax, byte ptr [ecx]
.text:004118E3                 inc     ecx
.text:004118E4                 movzx   edx, byte ptr [ebx]
.text:004118E7                 inc     ebx
.text:004118E8                 movzx   eax, byte ptr [eax+edi]
.text:004118EC                 cmp     [edx+edi], al
.text:004118EF                 jnz     short loc_4118FA
.text:004118F1                 dec     esi
.text:004118F2                 jnz     short loc_4118E0
.text:004118F4
.text:004118F4 loc_4118F4:                             ; CODE XREF: sub_4118C0+15↑j
.text:004118F4                 xor     eax, eax
.text:004118F6
.text:004118F6 loc_4118F6:                             ; CODE XREF: sub_4118C0+3F↓j
.text:004118F6                 pop     ebx
.text:004118F7                 pop     esi
.text:004118F8                 pop     edi
.text:004118F9                 retn
.text:004118FA ; ---------------------------------------------------------------------------
.text:004118FA
.text:004118FA loc_4118FA:                             ; CODE XREF: sub_4118C0+2F↑j
.text:004118FA                 mov     eax, 1
.text:004118FF                 jmp     short loc_4118F6
.text:004118FF sub_4118C0      endp
.text:004118FF
.text:004118FF ; ---------------------------------------------------------------------------
.text:00411901                 align 20h
.text:00411920 aSuccess        db 'Success',0          ; DATA XREF: .text:00411FC1↓o
.text:00411920                                         ; .text:0041200B↓o
.text:00411928 aNoMatch        db 'No match',0
.text:00411931 aInvalidRegular db 'Invalid regular expression',0
.text:0041194C aInvalidCollati db 'Invalid collation character',0
.text:00411968 aInvalidCharact db 'Invalid character class name',0
.text:00411985 aTrailingBacksl db 'Trailing backslash',0
.text:00411998 aInvalidBackRef db 'Invalid back reference',0
.text:004119AF aUnmatchedOr    db 'Unmatched [ or [^',0
.text:004119C1 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:004119D3 aUnmatched      db 'Unmatched \{',0
.text:004119E0 aInvalidContent db 'Invalid content of \{\}',0
.text:004119F8 aInvalidRangeEn db 'Invalid range end',0
.text:00411A0A aMemoryExhauste_1 db 'Memory exhausted',0
.text:00411A1B aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00411A40 aPrematureEndOf db 'Premature end of regular expression',0
.text:00411A64 aRegularExpress db 'Regular expression too big',0
.text:00411A7F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00411A91                 db 0EBh, 0Dh, 90h
.text:00411A94                 db 0Ch dup(90h)
.text:00411AA0 dword_411AA0    dd 0                    ; DATA XREF: .text:00411FBA↓r
.text:00411AA0                                         ; .text:00412004↓r
.text:00411AA4                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00411AA4                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00411AF0
.text:00411AF0 ; =============== S U B R O U T I N E =======================================
.text:00411AF0
.text:00411AF0
.text:00411AF0 sub_411AF0      proc near               ; CODE XREF: sub_412110+25A0↓p
.text:00411AF0
.text:00411AF0 arg_0           = dword ptr  4
.text:00411AF0 arg_8           = dword ptr  0Ch
.text:00411AF0 arg_C           = dword ptr  10h
.text:00411AF0
.text:00411AF0                 mov     edx, [esp+arg_8]
.text:00411AF4                 mov     ecx, [esp+arg_C]
.text:00411AF8                 dec     edx
.text:00411AF9                 js      short loc_411B1A
.text:00411AFB                 lea     eax, [edx+edx*4]
.text:00411AFE                 shl     eax, 2
.text:00411B01                 add     eax, [esp+arg_0]
.text:00411B05                 add     eax, 10h
.text:00411B08                 nop
.text:00411B09                 lea     esi, [esi+0]
.text:00411B10
.text:00411B10 loc_411B10:                             ; CODE XREF: sub_411AF0+28↓j
.text:00411B10                 cmp     [eax], ecx
.text:00411B12                 jz      short loc_411B1D
.text:00411B14                 sub     eax, 14h
.text:00411B17                 dec     edx
.text:00411B18                 jns     short loc_411B10
.text:00411B1A
.text:00411B1A loc_411B1A:                             ; CODE XREF: sub_411AF0+9↑j
.text:00411B1A                 xor     eax, eax
.text:00411B1C                 retn
.text:00411B1D ; ---------------------------------------------------------------------------
.text:00411B1D
.text:00411B1D loc_411B1D:                             ; CODE XREF: sub_411AF0+22↑j
.text:00411B1D                 mov     eax, 1
.text:00411B22                 retn
.text:00411B22 sub_411AF0      endp
.text:00411B22
.text:00411B22 ; ---------------------------------------------------------------------------
.text:00411B23                 align 10h
.text:00411B30
.text:00411B30 ; =============== S U B R O U T I N E =======================================
.text:00411B30
.text:00411B30 ; Attributes: thunk
.text:00411B30
.text:00411B30 sub_411B30      proc near               ; CODE XREF: sub_411B40+D1↓p
.text:00411B30                                         ; sub_415480+258↓p
.text:00411B30                 jmp     sub_415720
.text:00411B30 sub_411B30      endp
.text:00411B30
.text:00411B30 ; ---------------------------------------------------------------------------
.text:00411B35                 align 10h
.text:00411B40
.text:00411B40 ; =============== S U B R O U T I N E =======================================
.text:00411B40
.text:00411B40
.text:00411B40 ; int __cdecl sub_411B40(int, char *Str, int)
.text:00411B40 sub_411B40      proc near               ; CODE XREF: .text:0040E60C↑p
.text:00411B40                                         ; .text:0040E68F↑p
.text:00411B40
.text:00411B40 Size            = dword ptr -2Ch
.text:00411B40 Type            = dword ptr -28h
.text:00411B40 var_24          = dword ptr -24h
.text:00411B40 var_20          = dword ptr -20h
.text:00411B40 arg_0           = dword ptr  4
.text:00411B40 Str             = dword ptr  8
.text:00411B40 arg_8           = dword ptr  0Ch
.text:00411B40
.text:00411B40                 push    ebp
.text:00411B41                 push    edi
.text:00411B42                 push    esi
.text:00411B43                 push    ebx
.text:00411B44                 sub     esp, 1Ch
.text:00411B47                 mov     edi, [esp+2Ch+arg_0]
.text:00411B4B                 test    byte ptr [esp+2Ch+arg_8], 1
.text:00411B50                 mov     dword ptr [edi], 0
.text:00411B56                 setnz   dl
.text:00411B59                 mov     dword ptr [edi+4], 0
.text:00411B60                 mov     dword ptr [edi+8], 0
.text:00411B67                 mov     [esp+2Ch+Size], 100h ; Size
.text:00411B6E                 movzx   ebp, dl
.text:00411B71                 dec     ebp
.text:00411B72                 and     ebp, 0FFFD4FCAh
.text:00411B78                 add     ebp, 3B2FCh
.text:00411B7E                 call    malloc
.text:00411B83                 test    byte ptr [esp+2Ch+arg_8], 2
.text:00411B88                 mov     [edi+10h], eax
.text:00411B8B                 jnz     loc_411C40
.text:00411B91                 mov     dword ptr [edi+14h], 0
.text:00411B98
.text:00411B98 loc_411B98:                             ; CODE XREF: sub_411B40+150↓j
.text:00411B98                 test    byte ptr [esp+2Ch+arg_8], 4
.text:00411B9D                 jz      loc_411C37
.text:00411BA3                 or      byte ptr [edi+1Ch], 80h
.text:00411BA7                 and     ebp, 0FFFFFFBFh
.text:00411BAA                 or      ebp, 100h
.text:00411BB0
.text:00411BB0 loc_411BB0:                             ; CODE XREF: sub_411B40+FB↓j
.text:00411BB0                 shr     [esp+2Ch+arg_8], 3
.text:00411BB5                 movzx   edx, byte ptr [esp+2Ch+arg_8]
.text:00411BBA                 movzx   ecx, byte ptr [edi+1Ch]
.text:00411BBE                 and     dl, 1
.text:00411BC1                 shl     dl, 4
.text:00411BC4                 and     cl, 0EFh
.text:00411BC7                 or      cl, dl
.text:00411BC9                 mov     [edi+1Ch], cl
.text:00411BCC                 mov     esi, [esp+2Ch+Str]
.text:00411BD0                 mov     [esp+2Ch+Size], esi ; Str
.text:00411BD3                 call    strlen
.text:00411BD8                 mov     [esp+2Ch+Type], eax
.text:00411BDC                 mov     ebx, [esp+2Ch+Str]
.text:00411BE0                 mov     [esp+2Ch+var_20], edi
.text:00411BE4                 mov     [esp+2Ch+var_24], ebp
.text:00411BE8                 mov     [esp+2Ch+Size], ebx
.text:00411BEB                 call    sub_412110
.text:00411BF0                 cmp     eax, 10h
.text:00411BF3                 mov     ebx, eax
.text:00411BF5                 jz      short loc_411C30
.text:00411BF7
.text:00411BF7 loc_411BF7:                             ; CODE XREF: sub_411B40+F5↓j
.text:00411BF7                 test    ebx, ebx
.text:00411BF9                 jnz     short loc_411C02
.text:00411BFB                 mov     ebp, [edi+10h]
.text:00411BFE                 test    ebp, ebp
.text:00411C00                 jnz     short loc_411C0E
.text:00411C02
.text:00411C02 loc_411C02:                             ; CODE XREF: sub_411B40+B9↑j
.text:00411C02                                         ; sub_411B40+D9↓j ...
.text:00411C02                 mov     edx, ebx
.text:00411C04
.text:00411C04 loc_411C04:                             ; CODE XREF: sub_411B40+116↓j
.text:00411C04                 add     esp, 1Ch
.text:00411C07                 mov     eax, edx
.text:00411C09                 pop     ebx
.text:00411C0A                 pop     esi
.text:00411C0B                 pop     edi
.text:00411C0C                 pop     ebp
.text:00411C0D                 retn
.text:00411C0E ; ---------------------------------------------------------------------------
.text:00411C0E
.text:00411C0E loc_411C0E:                             ; CODE XREF: sub_411B40+C0↑j
.text:00411C0E                 mov     [esp+2Ch+Size], edi
.text:00411C11                 call    sub_411B30
.text:00411C16                 cmp     eax, 0FFFFFFFEh
.text:00411C19                 jnz     short loc_411C02
.text:00411C1B                 mov     esi, [edi+10h]
.text:00411C1E                 mov     [esp+2Ch+Size], esi ; Block
.text:00411C21                 call    free
.text:00411C26                 mov     dword ptr [edi+10h], 0
.text:00411C2D                 jmp     short loc_411C02
.text:00411C2D ; ---------------------------------------------------------------------------
.text:00411C2F                 align 10h
.text:00411C30
.text:00411C30 loc_411C30:                             ; CODE XREF: sub_411B40+B5↑j
.text:00411C30                 mov     ebx, 8
.text:00411C35                 jmp     short loc_411BF7
.text:00411C37 ; ---------------------------------------------------------------------------
.text:00411C37
.text:00411C37 loc_411C37:                             ; CODE XREF: sub_411B40+5D↑j
.text:00411C37                 and     byte ptr [edi+1Ch], 7Fh
.text:00411C3B                 jmp     loc_411BB0
.text:00411C40 ; ---------------------------------------------------------------------------
.text:00411C40
.text:00411C40 loc_411C40:                             ; CODE XREF: sub_411B40+4B↑j
.text:00411C40                 mov     [esp+2Ch+Size], 100h ; Size
.text:00411C47                 call    malloc
.text:00411C4C                 mov     [edi+14h], eax
.text:00411C4F                 test    eax, eax
.text:00411C51                 mov     edx, 0Ch
.text:00411C56                 jz      short loc_411C04
.text:00411C58                 xor     ebx, ebx
.text:00411C5A                 lea     esi, [esi+0]
.text:00411C60
.text:00411C60 loc_411C60:                             ; CODE XREF: sub_411B40+14E↓j
.text:00411C60                 mov     edx, ds:__mb_cur_max
.text:00411C66                 mov     esi, [edi+14h]
.text:00411C69                 cmp     dword ptr [edx], 1
.text:00411C6C                 jz      short loc_411CA1
.text:00411C6E                 mov     [esp+2Ch+Type], 1 ; Type
.text:00411C76                 mov     [esp+2Ch+Size], ebx ; C
.text:00411C79                 call    _isctype
.text:00411C7E
.text:00411C7E loc_411C7E:                             ; CODE XREF: sub_411B40+170↓j
.text:00411C7E                 test    eax, eax
.text:00411C80                 mov     dl, bl
.text:00411C82                 jnz     short loc_411C95
.text:00411C84
.text:00411C84 loc_411C84:                             ; CODE XREF: sub_411B40+15F↓j
.text:00411C84                 mov     [ebx+esi], dl
.text:00411C87                 inc     ebx
.text:00411C88                 cmp     ebx, 0FFh
.text:00411C8E                 jbe     short loc_411C60
.text:00411C90                 jmp     loc_411B98
.text:00411C95 ; ---------------------------------------------------------------------------
.text:00411C95
.text:00411C95 loc_411C95:                             ; CODE XREF: sub_411B40+142↑j
.text:00411C95                 mov     [esp+2Ch+Size], ebx ; C
.text:00411C98                 call    tolower
.text:00411C9D                 mov     dl, al
.text:00411C9F                 jmp     short loc_411C84
.text:00411CA1 ; ---------------------------------------------------------------------------
.text:00411CA1
.text:00411CA1 loc_411CA1:                             ; CODE XREF: sub_411B40+12C↑j
.text:00411CA1                 mov     edx, ds:_pctype
.text:00411CA7                 mov     ecx, [edx]
.text:00411CA9                 movzx   eax, word ptr [ecx+ebx*2]
.text:00411CAD                 and     eax, 1
.text:00411CB0                 jmp     short loc_411C7E
.text:00411CB0 sub_411B40      endp
.text:00411CB0
.text:00411CB0 ; ---------------------------------------------------------------------------
.text:00411CB2                 align 10h
.text:00411CC0
.text:00411CC0 ; =============== S U B R O U T I N E =======================================
.text:00411CC0
.text:00411CC0
.text:00411CC0 ; int __cdecl sub_411CC0(int, char *, int, int, int)
.text:00411CC0 sub_411CC0      proc near               ; CODE XREF: .text:0040E643↑p
.text:00411CC0                                         ; .text:0040E6C6↑p
.text:00411CC0
.text:00411CC0 Str             = dword ptr -8Ch
.text:00411CC0 var_88          = dword ptr -88h
.text:00411CC0 var_84          = dword ptr -84h
.text:00411CC0 var_80          = dword ptr -80h
.text:00411CC0 var_7C          = dword ptr -7Ch
.text:00411CC0 var_78          = dword ptr -78h
.text:00411CC0 var_74          = dword ptr -74h
.text:00411CC0 var_70          = dword ptr -70h
.text:00411CC0 var_6C          = dword ptr -6Ch
.text:00411CC0 var_4D          = byte ptr -4Dh
.text:00411CC0 var_4C          = dword ptr -4Ch
.text:00411CC0 var_48          = dword ptr -48h
.text:00411CC0 var_44          = dword ptr -44h
.text:00411CC0 var_40          = dword ptr -40h
.text:00411CC0 var_3C          = dword ptr -3Ch
.text:00411CC0 var_38          = dword ptr -38h
.text:00411CC0 var_34          = dword ptr -34h
.text:00411CC0 var_30          = dword ptr -30h
.text:00411CC0 var_2C          = dword ptr -2Ch
.text:00411CC0 Block           = dword ptr -28h
.text:00411CC0 var_24          = dword ptr -24h
.text:00411CC0 arg_0           = dword ptr  4
.text:00411CC0 arg_4           = dword ptr  8
.text:00411CC0 arg_8           = dword ptr  0Ch
.text:00411CC0 arg_C           = dword ptr  10h
.text:00411CC0 arg_10          = dword ptr  14h
.text:00411CC0
.text:00411CC0                 push    ebp
.text:00411CC1                 push    edi
.text:00411CC2                 push    esi
.text:00411CC3                 push    ebx
.text:00411CC4                 sub     esp, 7Ch
.text:00411CC7                 mov     ebx, [esp+8Ch+arg_0]
.text:00411CCE                 mov     edx, [esp+8Ch+arg_4]
.text:00411CD5                 mov     ebp, [esp+8Ch+arg_8]
.text:00411CDC                 mov     esi, [esp+8Ch+arg_10]
.text:00411CE3                 mov     [esp+8Ch+Str], edx ; Str
.text:00411CE6                 call    strlen
.text:00411CEB                 test    byte ptr [ebx+1Ch], 10h
.text:00411CEF                 mov     edi, eax
.text:00411CF1                 mov     [esp+8Ch+var_4D], 0
.text:00411CF6                 jnz     short loc_411D10
.text:00411CF8                 test    ebp, ebp
.text:00411CFA                 jz      short loc_411D10
.text:00411CFC                 mov     [esp+8Ch+var_4D], 1
.text:00411D01                 jmp     short loc_411D10
.text:00411D01 ; ---------------------------------------------------------------------------
.text:00411D03                 align 10h
.text:00411D10
.text:00411D10 loc_411D10:                             ; CODE XREF: sub_411CC0+36↑j
.text:00411D10                                         ; sub_411CC0+3A↑j ...
.text:00411D10                 mov     edx, [ebx]
.text:00411D12                 mov     [esp+8Ch+var_4C], edx
.text:00411D16                 mov     ecx, [ebx+4]
.text:00411D19                 mov     [esp+8Ch+var_48], ecx
.text:00411D1D                 mov     edx, [ebx+8]
.text:00411D20                 mov     [esp+8Ch+var_44], edx
.text:00411D24                 mov     ecx, [ebx+0Ch]
.text:00411D27                 mov     [esp+8Ch+var_40], ecx
.text:00411D2B                 mov     edx, [ebx+10h]
.text:00411D2E                 mov     [esp+8Ch+var_3C], edx
.text:00411D32                 mov     ecx, [ebx+14h]
.text:00411D35                 mov     [esp+8Ch+var_38], ecx
.text:00411D39                 mov     edx, [ebx+18h]
.text:00411D3C                 mov     [esp+8Ch+var_34], edx
.text:00411D40                 mov     ecx, [ebx+1Ch]
.text:00411D43                 mov     edx, esi
.text:00411D45                 shr     esi, 1
.text:00411D47                 and     dl, 1
.text:00411D4A                 mov     eax, esi
.text:00411D4C                 mov     [esp+8Ch+var_30], ecx
.text:00411D50                 shl     dl, 5
.text:00411D53                 and     al, 1
.text:00411D55                 movzx   ebx, byte ptr [esp+8Ch+var_30]
.text:00411D5A                 shl     al, 6
.text:00411D5D                 and     bl, 9Fh
.text:00411D60                 or      bl, dl
.text:00411D62                 or      bl, al
.text:00411D64                 and     bl, 0F9h
.text:00411D67                 or      bl, 4
.text:00411D6A                 cmp     [esp+8Ch+var_4D], 0
.text:00411D6F                 mov     byte ptr [esp+8Ch+var_30], bl
.text:00411D73                 jnz     loc_411E26
.text:00411D79
.text:00411D79 loc_411D79:                             ; CODE XREF: sub_411CC0+18F↓j
.text:00411D79                 movzx   ecx, [esp+8Ch+var_4D]
.text:00411D7E                 lea     esi, [esp+8Ch+var_2C]
.text:00411D82                 mov     [esp+8Ch+var_6C], edi
.text:00411D86                 lea     ebx, [esp+8Ch+var_4C]
.text:00411D8A                 mov     [esp+8Ch+var_74], edi
.text:00411D8E                 mov     [esp+8Ch+var_78], 0
.text:00411D96                 xor     cl, 1
.text:00411D99                 movzx   edx, cl
.text:00411D9C                 mov     [esp+8Ch+var_7C], edi
.text:00411DA0                 mov     ecx, [esp+8Ch+arg_4]
.text:00411DA7                 dec     edx
.text:00411DA8                 mov     [esp+8Ch+var_84], 0
.text:00411DB0                 and     esi, edx
.text:00411DB2                 mov     [esp+8Ch+var_70], esi
.text:00411DB6                 mov     [esp+8Ch+var_80], ecx
.text:00411DBA                 mov     [esp+8Ch+var_88], 0
.text:00411DC2                 mov     [esp+8Ch+Str], ebx
.text:00411DC5                 call    sub_415480
.text:00411DCA                 cmp     [esp+8Ch+var_4D], 0
.text:00411DCF                 mov     esi, eax
.text:00411DD1                 jz      short loc_411E11
.text:00411DD3                 test    eax, eax
.text:00411DD5                 js      short loc_411E20
.text:00411DD7                 xor     edx, edx
.text:00411DD9                 cmp     edx, ebp
.text:00411DDB                 jnb     short loc_411E20
.text:00411DDD                 mov     ecx, [esp+8Ch+Block]
.text:00411DE1                 mov     ebx, [esp+8Ch+var_24]
.text:00411DE5                 lea     esi, [esi+0]
.text:00411DE9                 lea     edi, [edi+0]
.text:00411DF0
.text:00411DF0 loc_411DF0:                             ; CODE XREF: sub_411CC0+147↓j
.text:00411DF0                 mov     eax, [ecx+edx*4]
.text:00411DF3                 mov     edi, [esp+8Ch+arg_C]
.text:00411DFA                 mov     [edi+edx*8], eax
.text:00411DFD                 mov     eax, [ebx+edx*4]
.text:00411E00                 mov     [edi+edx*8+4], eax
.text:00411E04                 inc     edx
.text:00411E05                 cmp     edx, ebp
.text:00411E07                 jb      short loc_411DF0
.text:00411E09
.text:00411E09 loc_411E09:                             ; CODE XREF: sub_411CC0+164↓j
.text:00411E09                 mov     [esp+8Ch+Str], ecx ; Block
.text:00411E0C                 call    free
.text:00411E11
.text:00411E11 loc_411E11:                             ; CODE XREF: sub_411CC0+111↑j
.text:00411E11                 mov     eax, esi
.text:00411E13                 shr     eax, 1Fh
.text:00411E16
.text:00411E16 loc_411E16:                             ; CODE XREF: sub_411CC0+186↓j
.text:00411E16                 add     esp, 7Ch
.text:00411E19                 pop     ebx
.text:00411E1A                 pop     esi
.text:00411E1B                 pop     edi
.text:00411E1C                 pop     ebp
.text:00411E1D                 retn
.text:00411E1D ; ---------------------------------------------------------------------------
.text:00411E1E                 align 10h
.text:00411E20
.text:00411E20 loc_411E20:                             ; CODE XREF: sub_411CC0+115↑j
.text:00411E20                                         ; sub_411CC0+11B↑j
.text:00411E20                 mov     ecx, [esp+8Ch+Block]
.text:00411E24                 jmp     short loc_411E09
.text:00411E26 ; ---------------------------------------------------------------------------
.text:00411E26
.text:00411E26 loc_411E26:                             ; CODE XREF: sub_411CC0+B3↑j
.text:00411E26                 mov     [esp+8Ch+var_2C], ebp
.text:00411E2A                 lea     esi, ds:0[ebp*8]
.text:00411E31                 mov     [esp+8Ch+Str], esi ; Size
.text:00411E34                 call    malloc
.text:00411E39                 mov     [esp+8Ch+Block], eax
.text:00411E3D                 mov     ecx, eax
.text:00411E3F                 test    ecx, ecx
.text:00411E41                 mov     eax, 1
.text:00411E46                 jz      short loc_411E16
.text:00411E48                 lea     eax, [ecx+ebp*4]
.text:00411E4B                 mov     [esp+8Ch+var_24], eax
.text:00411E4F                 jmp     loc_411D79
.text:00411E4F sub_411CC0      endp
.text:00411E4F
.text:00411E4F ; ---------------------------------------------------------------------------
.text:00411E54                 align 10h
.text:00411E60                 mov     eax, ds:dword_422960
.text:00411E65                 mov     ecx, [esp+4]
.text:00411E69                 mov     ds:dword_422960, ecx
.text:00411E6F                 retn
.text:00411E70 ; ---------------------------------------------------------------------------
.text:00411E70                 push    ebx
.text:00411E71                 mov     ebx, [esp+10h]
.text:00411E75                 mov     edx, [esp+8]
.text:00411E79                 mov     ecx, [esp+0Ch]
.text:00411E7D                 test    ebx, ebx
.text:00411E7F                 jz      short loc_411EA0
.text:00411E81                 movzx   eax, byte ptr [edx+1Ch]
.text:00411E85                 and     al, 0F9h
.text:00411E87                 or      al, 2
.text:00411E89                 mov     [edx+1Ch], al
.text:00411E8C                 mov     edx, [esp+14h]
.text:00411E90                 mov     [ecx], ebx
.text:00411E92                 mov     [ecx+4], edx
.text:00411E95                 mov     edx, [esp+18h]
.text:00411E99                 mov     [ecx+8], edx
.text:00411E9C
.text:00411E9C loc_411E9C:                             ; CODE XREF: .text:00411EB8↓j
.text:00411E9C                 pop     ebx
.text:00411E9D                 retn
.text:00411E9D ; ---------------------------------------------------------------------------
.text:00411E9E                 align 10h
.text:00411EA0
.text:00411EA0 loc_411EA0:                             ; CODE XREF: .text:00411E7F↑j
.text:00411EA0                 and     byte ptr [edx+1Ch], 0F9h
.text:00411EA4                 mov     dword ptr [ecx], 0
.text:00411EAA                 mov     dword ptr [ecx+8], 0
.text:00411EB1                 mov     dword ptr [ecx+4], 0
.text:00411EB8                 jmp     short loc_411E9C
.text:00411EB8 ; ---------------------------------------------------------------------------
.text:00411EBA                 align 10h
.text:00411EC0                 sub     esp, 2Ch
.text:00411EC3                 mov     edx, [esp+44h]
.text:00411EC7                 mov     dword ptr [esp+8], 0
.text:00411ECF                 mov     ecx, [esp+38h]
.text:00411ED3                 mov     dword ptr [esp+4], 0
.text:00411EDB                 mov     [esp+1Ch], edx
.text:00411EDF                 mov     edx, [esp+40h]
.text:00411EE3                 mov     [esp+20h], ecx
.text:00411EE7                 mov     [esp+10h], ecx
.text:00411EEB                 mov     [esp+18h], edx
.text:00411EEF                 mov     edx, [esp+3Ch]
.text:00411EF3                 mov     [esp+14h], edx
.text:00411EF7                 mov     edx, [esp+34h]
.text:00411EFB                 mov     [esp+0Ch], edx
.text:00411EFF                 mov     edx, [esp+30h]
.text:00411F03                 mov     [esp], edx
.text:00411F06                 call    sub_415480
.text:00411F0B                 add     esp, 2Ch
.text:00411F0E                 retn
.text:00411F0E ; ---------------------------------------------------------------------------
.text:00411F0F                 align 10h
.text:00411F10                 jmp     sub_415480
.text:00411F10 ; ---------------------------------------------------------------------------
.text:00411F15                 align 10h
.text:00411F20                 sub     esp, 2Ch
.text:00411F23                 mov     edx, [esp+40h]
.text:00411F27                 mov     dword ptr [esp+8], 0
.text:00411F2F                 mov     ecx, [esp+38h]
.text:00411F33                 mov     dword ptr [esp+4], 0
.text:00411F3B                 mov     [esp+18h], edx
.text:00411F3F                 mov     edx, [esp+3Ch]
.text:00411F43                 mov     [esp+1Ch], ecx
.text:00411F47                 mov     [esp+10h], ecx
.text:00411F4B                 mov     [esp+14h], edx
.text:00411F4F                 mov     edx, [esp+34h]
.text:00411F53                 mov     [esp+0Ch], edx
.text:00411F57                 mov     edx, [esp+30h]
.text:00411F5B                 mov     [esp], edx
.text:00411F5E                 call    sub_40F200
.text:00411F63                 add     esp, 2Ch
.text:00411F66                 retn
.text:00411F66 ; ---------------------------------------------------------------------------
.text:00411F67                 align 10h
.text:00411F70                 jmp     sub_40F200
.text:00411F70 ; ---------------------------------------------------------------------------
.text:00411F75                 align 10h
.text:00411F80                 sub     esp, 1Ch
.text:00411F83                 mov     ecx, [esp+28h]
.text:00411F87                 movzx   edx, byte ptr [ecx+1Ch]
.text:00411F8B                 and     dl, 0E9h
.text:00411F8E                 or      dl, 80h
.text:00411F91                 mov     [ecx+1Ch], dl
.text:00411F94                 mov     edx, [esp+24h]
.text:00411F98                 mov     [esp+0Ch], ecx
.text:00411F9C                 mov     ecx, ds:dword_422960
.text:00411FA2                 mov     [esp+4], edx
.text:00411FA6                 mov     edx, [esp+20h]
.text:00411FAA                 mov     [esp+8], ecx
.text:00411FAE                 mov     [esp], edx
.text:00411FB1                 call    sub_412110
.text:00411FB6                 test    eax, eax
.text:00411FB8                 jz      short loc_411FD4
.text:00411FBA                 mov     ecx, ds:dword_411AA0[eax*4]
.text:00411FC1                 add     ecx, offset aSuccess ; "Success"
.text:00411FC7                 mov     [esp+20h], ecx
.text:00411FCB                 add     esp, 1Ch
.text:00411FCE                 jmp     ds:libintl_gettext
.text:00411FD4 ; ---------------------------------------------------------------------------
.text:00411FD4
.text:00411FD4 loc_411FD4:                             ; CODE XREF: .text:00411FB8↑j
.text:00411FD4                 xor     eax, eax
.text:00411FD6                 add     esp, 1Ch
.text:00411FD9                 retn
.text:00411FD9 ; ---------------------------------------------------------------------------
.text:00411FDA                 align 10h
.text:00411FE0                 sub     esp, 1Ch
.text:00411FE3                 mov     eax, [esp+20h]
.text:00411FE7                 mov     [esp+14h], edi
.text:00411FEB                 mov     edi, [esp+2Ch]
.text:00411FEF                 cmp     eax, 10h
.text:00411FF2                 mov     [esp+18h], ebp
.text:00411FF6                 mov     ebp, [esp+28h]
.text:00411FFA                 mov     [esp+0Ch], ebx
.text:00411FFE                 mov     [esp+10h], esi
.text:00412002                 ja      short loc_412078
.text:00412004                 mov     edx, ds:dword_411AA0[eax*4]
.text:0041200B                 add     edx, offset aSuccess ; "Success"
.text:00412011                 mov     [esp], edx
.text:00412014                 call    ds:libintl_gettext
.text:0041201A                 mov     [esp], eax
.text:0041201D                 mov     ebx, eax
.text:0041201F                 call    strlen
.text:00412024                 test    edi, edi
.text:00412026                 lea     esi, [eax+1]
.text:00412029                 jz      short loc_412050
.text:0041202B                 cmp     esi, edi
.text:0041202D                 jbe     short loc_412066
.text:0041202F                 mov     [esp+4], ebx
.text:00412033                 lea     edx, [edi-1]
.text:00412036                 mov     [esp+8], edx
.text:0041203A                 mov     [esp], ebp
.text:0041203D                 call    sub_41A740
.text:00412042                 mov     byte ptr [eax], 0
.text:00412045                 lea     esi, [esi+0]
.text:00412049                 lea     edi, [edi+0]
.text:00412050
.text:00412050 loc_412050:                             ; CODE XREF: .text:00412029↑j
.text:00412050                                         ; .text:00412076↓j
.text:00412050                 mov     eax, esi
.text:00412052                 mov     ebx, [esp+0Ch]
.text:00412056                 mov     esi, [esp+10h]
.text:0041205A                 mov     edi, [esp+14h]
.text:0041205E                 mov     ebp, [esp+18h]
.text:00412062                 add     esp, 1Ch
.text:00412065                 retn
.text:00412066 ; ---------------------------------------------------------------------------
.text:00412066
.text:00412066 loc_412066:                             ; CODE XREF: .text:0041202D↑j
.text:00412066                 mov     [esp+8], esi
.text:0041206A                 mov     [esp+4], ebx
.text:0041206E                 mov     [esp], ebp
.text:00412071                 call    memcpy
.text:00412076                 jmp     short loc_412050
.text:00412078 ; ---------------------------------------------------------------------------
.text:00412078
.text:00412078 loc_412078:                             ; CODE XREF: .text:00412002↑j
.text:00412078                 call    abort
.text:00412078 ; ---------------------------------------------------------------------------
.text:0041207D                 align 10h
.text:00412080
.text:00412080 ; =============== S U B R O U T I N E =======================================
.text:00412080
.text:00412080
.text:00412080 sub_412080      proc near               ; CODE XREF: .text:0040E6E1↑p
.text:00412080                                         ; .text:0040E6F7↑p
.text:00412080
.text:00412080 Block           = dword ptr -0Ch
.text:00412080 var_4           = dword ptr -4
.text:00412080 arg_0           = dword ptr  4
.text:00412080
.text:00412080                 sub     esp, 0Ch
.text:00412083                 mov     [esp+0Ch+var_4], ebx
.text:00412087                 mov     ebx, [esp+0Ch+arg_0]
.text:0041208B                 mov     eax, [ebx]
.text:0041208D                 test    eax, eax
.text:0041208F                 jnz     short loc_4120F0
.text:00412091
.text:00412091 loc_412091:                             ; CODE XREF: sub_412080+78↓j
.text:00412091                 mov     dword ptr [ebx], 0
.text:00412097                 mov     eax, [ebx+10h]
.text:0041209A                 mov     dword ptr [ebx+4], 0
.text:004120A1                 mov     dword ptr [ebx+8], 0
.text:004120A8                 test    eax, eax
.text:004120AA                 jnz     short loc_4120E0
.text:004120AC
.text:004120AC loc_4120AC:                             ; CODE XREF: sub_412080+68↓j
.text:004120AC                 and     byte ptr [ebx+1Ch], 0F7h
.text:004120B0                 mov     eax, [ebx+14h]
.text:004120B3                 mov     dword ptr [ebx+10h], 0
.text:004120BA                 test    eax, eax
.text:004120BC                 jnz     short loc_4120D0
.text:004120BE
.text:004120BE loc_4120BE:                             ; CODE XREF: sub_412080+58↓j
.text:004120BE                 mov     dword ptr [ebx+14h], 0
.text:004120C5                 mov     ebx, [esp+0Ch+var_4]
.text:004120C9                 add     esp, 0Ch
.text:004120CC                 retn
.text:004120CC ; ---------------------------------------------------------------------------
.text:004120CD                 align 10h
.text:004120D0
.text:004120D0 loc_4120D0:                             ; CODE XREF: sub_412080+3C↑j
.text:004120D0                 mov     [esp+0Ch+Block], eax ; Block
.text:004120D3                 call    free
.text:004120D8                 jmp     short loc_4120BE
.text:004120D8 ; ---------------------------------------------------------------------------
.text:004120DA                 align 10h
.text:004120E0
.text:004120E0 loc_4120E0:                             ; CODE XREF: sub_412080+2A↑j
.text:004120E0                 mov     [esp+0Ch+Block], eax ; Block
.text:004120E3                 call    free
.text:004120E8                 jmp     short loc_4120AC
.text:004120E8 ; ---------------------------------------------------------------------------
.text:004120EA                 align 10h
.text:004120F0
.text:004120F0 loc_4120F0:                             ; CODE XREF: sub_412080+F↑j
.text:004120F0                 mov     [esp+0Ch+Block], eax ; Block
.text:004120F3                 call    free
.text:004120F8                 jmp     short loc_412091
.text:004120F8 sub_412080      endp
.text:004120F8
.text:004120F8 ; ---------------------------------------------------------------------------
.text:004120FA aLower          db 'lower',0            ; DATA XREF: sub_412110+1EEB↓o
.text:00412100 aUpper          db 'upper',0            ; DATA XREF: sub_412110+1F11↓o
.text:00412106                 align 10h
.text:00412110
.text:00412110 ; =============== S U B R O U T I N E =======================================
.text:00412110
.text:00412110
.text:00412110 sub_412110      proc near               ; CODE XREF: sub_411B40+AB↑p
.text:00412110                                         ; .text:00411FB1↑p
.text:00412110
.text:00412110 Size            = dword ptr -97Ch
.text:00412110 var_978         = dword ptr -978h
.text:00412110 var_974         = dword ptr -974h
.text:00412110 var_970         = dword ptr -970h
.text:00412110 var_96C         = dword ptr -96Ch
.text:00412110 var_968         = dword ptr -968h
.text:00412110 var_950         = dword ptr -950h
.text:00412110 var_940         = dword ptr -940h
.text:00412110 var_93C         = dword ptr -93Ch
.text:00412110 var_938         = dword ptr -938h
.text:00412110 var_934         = dword ptr -934h
.text:00412110 var_930         = dword ptr -930h
.text:00412110 Type            = word ptr -92Ch
.text:00412110 var_926         = byte ptr -926h
.text:00412110 var_925         = byte ptr -925h
.text:00412110 var_924         = dword ptr -924h
.text:00412110 var_91E         = byte ptr -91Eh
.text:00412110 var_91D         = byte ptr -91Dh
.text:00412110 var_91C         = byte ptr -91Ch
.text:00412110 var_90C         = dword ptr -90Ch
.text:00412110 var_908         = dword ptr -908h
.text:00412110 var_904         = dword ptr -904h
.text:00412110 var_900         = dword ptr -900h
.text:00412110 var_8FC         = dword ptr -8FCh
.text:00412110 var_8F8         = dword ptr -8F8h
.text:00412110 var_8F4         = dword ptr -8F4h
.text:00412110 var_8F0         = dword ptr -8F0h
.text:00412110 var_8EC         = byte ptr -8ECh
.text:00412110 var_8D0         = dword ptr -8D0h
.text:00412110 var_8CC         = byte ptr -8CCh
.text:00412110 var_84C         = byte ptr -84Ch
.text:00412110 name            = byte ptr -83Ch
.text:00412110 Block           = dword ptr -2Ch
.text:00412110 var_28          = dword ptr -28h
.text:00412110 var_24          = dword ptr -24h
.text:00412110 arg_0           = dword ptr  4
.text:00412110 arg_4           = dword ptr  8
.text:00412110 arg_8           = dword ptr  0Ch
.text:00412110 arg_C           = dword ptr  10h
.text:00412110
.text:00412110                 push    ebp
.text:00412111                 mov     ebp, 0Ch
.text:00412116                 push    edi
.text:00412117                 push    esi
.text:00412118                 push    ebx
.text:00412119                 sub     esp, 96Ch
.text:0041211F                 mov     eax, [esp+97Ch+arg_0]
.text:00412126                 mov     [esp+97Ch+var_900], 0
.text:0041212E                 mov     ecx, [esp+97Ch+arg_C]
.text:00412135                 mov     ebx, [esp+97Ch+arg_4]
.text:0041213C                 mov     [esp+97Ch+var_8D0], eax
.text:00412143                 mov     edx, [ecx+14h]
.text:00412146                 add     eax, ebx
.text:00412148                 mov     [esp+97Ch+var_8F4], eax
.text:0041214F                 xor     eax, eax
.text:00412151                 mov     [esp+97Ch+var_8F8], edx
.text:00412158                 mov     [esp+97Ch+var_8FC], eax
.text:0041215F                 mov     [esp+97Ch+var_908], 0
.text:00412167                 mov     [esp+97Ch+var_90C], 0
.text:0041216F                 mov     [esp+97Ch+Size], 280h ; Size
.text:00412176                 call    malloc
.text:0041217B                 mov     [esp+97Ch+Block], eax
.text:00412182                 test    eax, eax
.text:00412184                 jz      loc_412526
.text:0041218A                 mov     edi, [esp+97Ch+arg_C]
.text:00412191                 xor     edx, edx
.text:00412193                 mov     ecx, 20h ; ' '
.text:00412198                 mov     [esp+97Ch+var_28], ecx
.text:0041219F                 mov     ebp, [esp+97Ch+arg_8]
.text:004121A6                 mov     [esp+97Ch+var_24], edx
.text:004121AD                 and     byte ptr [edi+1Ch], 97h
.text:004121B1                 mov     [edi+0Ch], ebp
.text:004121B4                 mov     dword ptr [edi+8], 0
.text:004121BB                 mov     esi, ds:dword_422460
.text:004121C1                 mov     dword ptr [edi+18h], 0
.text:004121C8                 test    esi, esi
.text:004121CA                 jz      loc_415401
.text:004121D0
.text:004121D0 loc_4121D0:                             ; CODE XREF: sub_412110+3351↓j
.text:004121D0                 mov     ebx, [esp+97Ch+arg_C]
.text:004121D7                 mov     edx, [ebx+4]
.text:004121DA                 test    edx, edx
.text:004121DC                 jnz     loc_4153F2
.text:004121E2                 mov     eax, [ebx]
.text:004121E4                 test    eax, eax
.text:004121E6                 jz      loc_4153D8
.text:004121EC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:004121F4                 mov     [esp+97Ch+Size], eax ; Block
.text:004121F7                 call    realloc
.text:004121FC                 mov     [ebx], eax
.text:004121FE
.text:004121FE loc_4121FE:                             ; CODE XREF: sub_412110+32DD↓j
.text:004121FE                 mov     esi, [esp+97Ch+arg_C]
.text:00412205                 mov     edi, [esi]
.text:00412207                 test    edi, edi
.text:00412209                 jz      loc_4153C7
.text:0041220F                 mov     eax, [esp+97Ch+arg_C]
.text:00412216                 mov     dword ptr [eax+4], 20h ; ' '
.text:0041221D
.text:0041221D loc_41221D:                             ; CODE XREF: sub_412110+32EC↓j
.text:0041221D                 mov     [esp+97Ch+var_950], edi
.text:00412221                 mov     [esp+97Ch+var_904], edi
.text:00412225                 mov     edi, [esp+97Ch+var_8D0]
.text:0041222C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412233                 jz      loc_412580
.text:00412239
.text:00412239 loc_412239:                             ; CODE XREF: sub_412110+43D↓j
.text:00412239                 movzx   ebx, byte ptr [edi]
.text:0041223C                 inc     edi
.text:0041223D                 mov     edx, [esp+97Ch+var_8F8]
.text:00412244                 mov     [esp+97Ch+var_8D0], edi
.text:0041224B                 test    edx, edx
.text:0041224D                 mov     [esp+97Ch+var_8EC], bl
.text:00412254                 jz      short loc_41226B
.text:00412256                 mov     edi, [esp+97Ch+var_8F8]
.text:0041225D                 movzx   ecx, bl
.text:00412260                 movzx   ebx, byte ptr [ecx+edi]
.text:00412264                 mov     [esp+97Ch+var_8EC], bl
.text:0041226B
.text:0041226B loc_41226B:                             ; CODE XREF: sub_412110+144↑j
.text:0041226B                 movzx   eax, [esp+97Ch+var_8EC]
.text:00412273                 sub     eax, 0Ah        ; switch 115 cases
.text:00412276                 cmp     eax, 72h
.text:00412279                 ja      def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041227F                 jmp     ds:jpt_41227F[eax*4] ; switch jump
.text:0041227F ; ---------------------------------------------------------------------------
.text:00412286                 align 4
.text:00412288 jpt_41227F      dd offset loc_412975, offset def_41227F, offset def_41227F
.text:00412288                                         ; DATA XREF: sub_412110+16F↑r
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F ; jump table for switch statement
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset loc_412BAD
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset loc_412CBC, offset loc_412EA6, offset loc_413170
.text:00412288                 dd offset loc_4137E4, offset def_41227F, offset def_41227F
.text:00412288                 dd offset loc_413700, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset loc_4137E4
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset loc_4137FA, offset loc_414386, offset def_41227F
.text:00412288                 dd offset loc_412454, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset def_41227F
.text:00412288                 dd offset def_41227F, offset def_41227F, offset loc_415394
.text:00412288                 dd offset loc_4153B2
.text:00412454 ; ---------------------------------------------------------------------------
.text:00412454
.text:00412454 loc_412454:                             ; CODE XREF: sub_412110+16F↑j
.text:00412454                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00412454                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0041227F case 94
.text:0041245B                 mov     edx, [esp+97Ch+var_8D0]
.text:00412462                 inc     esi
.text:00412463                 cmp     edx, esi
.text:00412465                 jz      short loc_412475
.text:00412467                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0041246F                 jz      loc_4126BD
.text:00412475
.text:00412475 loc_412475:                             ; CODE XREF: sub_412110+355↑j
.text:00412475                                         ; sub_412110+3D7↓j ...
.text:00412475                 mov     eax, [esp+97Ch+arg_C]
.text:0041247C                 mov     ebp, [esp+97Ch+var_950]
.text:00412480                 mov     edi, [eax]
.text:00412482                 mov     edx, [eax+4]
.text:00412485                 sub     ebp, edi
.text:00412487                 inc     ebp
.text:00412488                 cmp     ebp, edx
.text:0041248A                 jbe     loc_412533
.text:00412490                 cmp     edx, 10000h
.text:00412496                 mov     ebp, 0Fh
.text:0041249B                 jz      loc_412526
.text:004124A1                 lea     ebx, [edx+edx]
.text:004124A4                 mov     edx, [esp+97Ch+arg_C]
.text:004124AB                 cmp     ebx, 10000h
.text:004124B1                 mov     [edx+4], ebx
.text:004124B4                 jbe     short loc_4124BD
.text:004124B6                 mov     dword ptr [edx+4], 10000h
.text:004124BD
.text:004124BD loc_4124BD:                             ; CODE XREF: sub_412110+3A4↑j
.text:004124BD                 mov     ebp, [esp+97Ch+arg_C]
.text:004124C4                 mov     esi, [ebp+4]
.text:004124C7                 mov     ebp, 0Ch
.text:004124CC                 mov     [esp+97Ch+Size], edi ; Block
.text:004124CF                 mov     [esp+97Ch+var_978], esi ; Size
.text:004124D3                 call    realloc
.text:004124D8                 mov     edx, [esp+97Ch+arg_C]
.text:004124DF                 test    eax, eax
.text:004124E1                 mov     [edx], eax
.text:004124E3                 jz      short loc_412526
.text:004124E5                 cmp     edi, eax
.text:004124E7                 jz      short loc_412475
.text:004124E9                 mov     ecx, [esp+97Ch+var_908]
.text:004124ED                 sub     eax, edi
.text:004124EF                 add     [esp+97Ch+var_950], eax
.text:004124F3                 add     [esp+97Ch+var_904], eax
.text:004124F7                 test    ecx, ecx
.text:004124F9                 jz      short loc_4124FF
.text:004124FB                 add     [esp+97Ch+var_908], eax
.text:004124FF
.text:004124FF loc_4124FF:                             ; CODE XREF: sub_412110+3E9↑j
.text:004124FF                 mov     ebx, [esp+97Ch+var_900]
.text:00412503                 test    ebx, ebx
.text:00412505                 jz      short loc_41250B
.text:00412507                 add     [esp+97Ch+var_900], eax
.text:0041250B
.text:0041250B loc_41250B:                             ; CODE XREF: sub_412110+3F5↑j
.text:0041250B                 mov     edi, [esp+97Ch+var_8FC]
.text:00412512                 test    edi, edi
.text:00412514                 jz      loc_412475
.text:0041251A                 add     [esp+97Ch+var_8FC], eax
.text:00412521                 jmp     loc_412475
.text:00412526 ; ---------------------------------------------------------------------------
.text:00412526
.text:00412526 loc_412526:                             ; CODE XREF: sub_412110+74↑j
.text:00412526                                         ; sub_412110+38B↑j ...
.text:00412526                 add     esp, 96Ch
.text:0041252C                 mov     eax, ebp
.text:0041252E                 pop     ebx
.text:0041252F                 pop     esi
.text:00412530                 pop     edi
.text:00412531                 pop     ebp
.text:00412532                 retn
.text:00412533 ; ---------------------------------------------------------------------------
.text:00412533
.text:00412533 loc_412533:                             ; CODE XREF: sub_412110+37A↑j
.text:00412533                 mov     edi, [esp+97Ch+var_950]
.text:00412537                 mov     byte ptr [edi], 9
.text:0041253A
.text:0041253A loc_41253A:                             ; CODE XREF: sub_412110+16CF↓j
.text:0041253A                                         ; sub_412110+2518↓j ...
.text:0041253A                 inc     edi
.text:0041253B
.text:0041253B loc_41253B:                             ; CODE XREF: sub_412110+1496↓j
.text:0041253B                 mov     [esp+97Ch+var_950], edi
.text:0041253F
.text:0041253F loc_41253F:                             ; CODE XREF: sub_412110+7DA↓j
.text:0041253F                                         ; sub_412110+A98↓j ...
.text:0041253F                 mov     edi, [esp+97Ch+var_8D0]
.text:00412546                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041254D                 jnz     loc_412239
.text:00412553                 mov     ebx, [esp+97Ch+var_908]
.text:00412557                 test    ebx, ebx
.text:00412559                 jz      short loc_412580
.text:0041255B                 mov     [esp+97Ch+Size], 0Eh
.text:00412562                 mov     ebp, [esp+97Ch+var_950]
.text:00412566                 mov     edx, [esp+97Ch+var_908]
.text:0041256A                 mov     esi, [esp+97Ch+var_908]
.text:0041256E                 sub     ebp, edx
.text:00412570                 sub     ebp, 3
.text:00412573                 mov     [esp+97Ch+var_974], ebp
.text:00412577                 mov     [esp+97Ch+var_978], esi
.text:0041257B                 call    sub_40EEE0
.text:00412580
.text:00412580 loc_412580:                             ; CODE XREF: sub_412110+123↑j
.text:00412580                                         ; sub_412110+449↑j
.text:00412580                 mov     eax, [esp+97Ch+var_24]
.text:00412587                 test    eax, eax
.text:00412589                 jnz     loc_4126A4
.text:0041258F                 test    [esp+97Ch+arg_8], 40000h
.text:0041259A                 jz      loc_412673
.text:004125A0                 mov     ecx, [esp+97Ch+arg_C]
.text:004125A7                 mov     ebp, [esp+97Ch+var_950]
.text:004125AB                 mov     ebx, [ecx]
.text:004125AD                 mov     edx, [ecx+4]
.text:004125B0                 sub     ebp, ebx
.text:004125B2                 mov     edi, ebx
.text:004125B4                 inc     ebp
.text:004125B5                 cmp     ebp, edx
.text:004125B7                 jbe     loc_412667
.text:004125BD
.text:004125BD loc_4125BD:                             ; CODE XREF: sub_412110+551↓j
.text:004125BD                 cmp     edx, 10000h
.text:004125C3                 mov     ebp, 0Fh
.text:004125C8                 jz      loc_412526
.text:004125CE                 mov     esi, [esp+97Ch+arg_C]
.text:004125D5                 lea     ebp, [edx+edx]
.text:004125D8                 cmp     ebp, 10000h
.text:004125DE                 mov     [esi+4], ebp
.text:004125E1                 jbe     short loc_4125EA
.text:004125E3                 mov     dword ptr [esi+4], 10000h
.text:004125EA
.text:004125EA loc_4125EA:                             ; CODE XREF: sub_412110+4D1↑j
.text:004125EA                 mov     eax, [esp+97Ch+arg_C]
.text:004125F1                 mov     ebp, 0Ch
.text:004125F6                 mov     esi, [eax+4]
.text:004125F9                 mov     [esp+97Ch+Size], edi ; Block
.text:004125FC                 mov     [esp+97Ch+var_978], esi ; Size
.text:00412600                 call    realloc
.text:00412605                 mov     edx, [esp+97Ch+arg_C]
.text:0041260C                 test    eax, eax
.text:0041260E                 mov     [edx], eax
.text:00412610                 jz      loc_412526
.text:00412616                 cmp     ebx, eax
.text:00412618                 jz      short loc_41264A
.text:0041261A                 mov     edi, [esp+97Ch+var_908]
.text:0041261E                 sub     eax, ebx
.text:00412620                 add     [esp+97Ch+var_950], eax
.text:00412624                 test    edi, edi
.text:00412626                 jz      short loc_41262C
.text:00412628                 add     [esp+97Ch+var_908], eax
.text:0041262C
.text:0041262C loc_41262C:                             ; CODE XREF: sub_412110+516↑j
.text:0041262C                 mov     ebx, [esp+97Ch+var_900]
.text:00412630                 test    ebx, ebx
.text:00412632                 jz      short loc_412638
.text:00412634                 add     [esp+97Ch+var_900], eax
.text:00412638
.text:00412638 loc_412638:                             ; CODE XREF: sub_412110+522↑j
.text:00412638                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041263F                 test    ecx, ecx
.text:00412641                 jz      short loc_41264A
.text:00412643                 add     [esp+97Ch+var_8FC], eax
.text:0041264A
.text:0041264A loc_41264A:                             ; CODE XREF: sub_412110+508↑j
.text:0041264A                                         ; sub_412110+531↑j
.text:0041264A                 mov     eax, [esp+97Ch+arg_C]
.text:00412651                 mov     ebp, [esp+97Ch+var_950]
.text:00412655                 mov     ebx, [eax]
.text:00412657                 mov     edx, [eax+4]
.text:0041265A                 sub     ebp, ebx
.text:0041265C                 mov     edi, ebx
.text:0041265E                 inc     ebp
.text:0041265F                 cmp     ebp, edx
.text:00412661                 ja      loc_4125BD
.text:00412667
.text:00412667 loc_412667:                             ; CODE XREF: sub_412110+4A7↑j
.text:00412667                 mov     edx, [esp+97Ch+var_950]
.text:0041266B                 mov     byte ptr [edx], 1
.text:0041266E                 inc     edx
.text:0041266F                 mov     [esp+97Ch+var_950], edx
.text:00412673
.text:00412673 loc_412673:                             ; CODE XREF: sub_412110+48A↑j
.text:00412673                 mov     ebp, [esp+97Ch+Block]
.text:0041267A                 mov     [esp+97Ch+Size], ebp ; Block
.text:0041267D                 xor     ebp, ebp
.text:0041267F                 call    free
.text:00412684                 mov     ecx, [esp+97Ch+arg_C]
.text:0041268B                 mov     esi, [esp+97Ch+arg_C]
.text:00412692                 mov     ebx, [ecx]
.text:00412694                 sub     [esp+97Ch+var_950], ebx
.text:00412698                 mov     edi, [esp+97Ch+var_950]
.text:0041269C                 mov     [esi+8], edi
.text:0041269F                 jmp     loc_412526
.text:004126A4 ; ---------------------------------------------------------------------------
.text:004126A4
.text:004126A4 loc_4126A4:                             ; CODE XREF: sub_412110+479↑j
.text:004126A4                 mov     edi, [esp+97Ch+Block]
.text:004126AB                 mov     ebp, 8
.text:004126B0
.text:004126B0 loc_4126B0:                             ; CODE XREF: sub_412110+15BC↓j
.text:004126B0                                         ; sub_412110+32C3↓j
.text:004126B0                 mov     [esp+97Ch+Size], edi ; Block
.text:004126B3
.text:004126B3 loc_4126B3:                             ; CODE XREF: sub_412110+EDF↓j
.text:004126B3                                         ; sub_412110+1C4C↓j ...
.text:004126B3                 call    free
.text:004126B8                 jmp     loc_412526
.text:004126BD ; ---------------------------------------------------------------------------
.text:004126BD
.text:004126BD loc_4126BD:                             ; CODE XREF: sub_412110+35F↑j
.text:004126BD                 mov     [esp+97Ch+var_978], edx
.text:004126C1                 mov     eax, [esp+97Ch+arg_8]
.text:004126C8                 mov     ebp, [esp+97Ch+arg_0]
.text:004126CF                 mov     [esp+97Ch+var_974], eax
.text:004126D3                 mov     [esp+97Ch+Size], ebp
.text:004126D6                 call    sub_40EFC0
.text:004126DB                 test    al, al
.text:004126DD                 jnz     loc_412475
.text:004126E3
.text:004126E3 def_41227F:                             ; CODE XREF: sub_412110+169↑j
.text:004126E3                                         ; sub_412110+16F↑j ...
.text:004126E3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004126EA                 test    edx, edx
.text:004126EC                 jz      short loc_412709
.text:004126EE                 mov     eax, [esp+97Ch+var_8FC]
.text:004126F5                 movzx   edx, byte ptr [eax]
.text:004126F8                 movzx   ebx, dl
.text:004126FB                 lea     ebp, [ebx+eax+1]
.text:004126FF                 cmp     ebp, [esp+97Ch+var_950]
.text:00412703                 jz      loc_4128EF
.text:00412709
.text:00412709 loc_412709:                             ; CODE XREF: sub_412110+5DC↑j
.text:00412709                                         ; sub_412110+7E1↓j ...
.text:00412709                 mov     edi, [esp+97Ch+var_950]
.text:0041270D                 mov     ebp, [esp+97Ch+arg_C]
.text:00412714                 mov     ecx, [esp+97Ch+var_950]
.text:00412718                 mov     [esp+97Ch+var_900], edi
.text:0041271C                 mov     edi, [ebp+0]
.text:0041271F                 mov     edx, [ebp+4]
.text:00412722                 sub     ecx, edi
.text:00412724                 mov     ebx, edi
.text:00412726                 add     ecx, 2
.text:00412729                 cmp     ecx, edx
.text:0041272B                 jbe     loc_4127E8
.text:00412731
.text:00412731 loc_412731:                             ; CODE XREF: sub_412110+6D2↓j
.text:00412731                 cmp     edx, 10000h
.text:00412737                 mov     ebp, 0Fh
.text:0041273C                 jz      loc_412526
.text:00412742                 lea     esi, [edx+edx]
.text:00412745                 mov     edx, [esp+97Ch+arg_C]
.text:0041274C                 cmp     esi, 10000h
.text:00412752                 mov     [edx+4], esi
.text:00412755                 jbe     short loc_41275E
.text:00412757                 mov     dword ptr [edx+4], 10000h
.text:0041275E
.text:0041275E loc_41275E:                             ; CODE XREF: sub_412110+645↑j
.text:0041275E                 mov     eax, [esp+97Ch+arg_C]
.text:00412765                 mov     ebp, [eax+4]
.text:00412768                 mov     [esp+97Ch+Size], edi ; Block
.text:0041276B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0041276F                 mov     ebp, 0Ch
.text:00412774                 call    realloc
.text:00412779                 mov     edx, [esp+97Ch+arg_C]
.text:00412780                 test    eax, eax
.text:00412782                 mov     [edx], eax
.text:00412784                 jz      loc_412526
.text:0041278A                 cmp     ebx, eax
.text:0041278C                 jz      short loc_4127C2
.text:0041278E                 sub     eax, ebx
.text:00412790                 mov     ebx, [esp+97Ch+var_908]
.text:00412794                 add     [esp+97Ch+var_950], eax
.text:00412798                 add     [esp+97Ch+var_904], eax
.text:0041279C                 test    ebx, ebx
.text:0041279E                 jz      short loc_4127A4
.text:004127A0                 add     [esp+97Ch+var_908], eax
.text:004127A4
.text:004127A4 loc_4127A4:                             ; CODE XREF: sub_412110+68E↑j
.text:004127A4                 mov     ecx, [esp+97Ch+var_900]
.text:004127A8                 test    ecx, ecx
.text:004127AA                 jz      short loc_4127B0
.text:004127AC                 add     [esp+97Ch+var_900], eax
.text:004127B0
.text:004127B0 loc_4127B0:                             ; CODE XREF: sub_412110+69A↑j
.text:004127B0                 mov     edi, [esp+97Ch+var_8FC]
.text:004127B7                 test    edi, edi
.text:004127B9                 jz      short loc_4127C2
.text:004127BB                 add     [esp+97Ch+var_8FC], eax
.text:004127C2
.text:004127C2 loc_4127C2:                             ; CODE XREF: sub_412110+67C↑j
.text:004127C2                                         ; sub_412110+6A9↑j
.text:004127C2                 mov     edx, [esp+97Ch+arg_C]
.text:004127C9                 mov     ebp, [esp+97Ch+arg_C]
.text:004127D0                 mov     esi, [esp+97Ch+var_950]
.text:004127D4                 mov     edi, [edx]
.text:004127D6                 mov     edx, [ebp+4]
.text:004127D9                 sub     esi, edi
.text:004127DB                 add     esi, 2
.text:004127DE                 mov     ebx, edi
.text:004127E0                 cmp     esi, edx
.text:004127E2                 ja      loc_412731
.text:004127E8
.text:004127E8 loc_4127E8:                             ; CODE XREF: sub_412110+61B↑j
.text:004127E8                 mov     eax, [esp+97Ch+var_950]
.text:004127EC                 mov     byte ptr [eax], 2
.text:004127EF                 inc     eax
.text:004127F0                 mov     byte ptr [eax], 0
.text:004127F3                 mov     ecx, [esp+97Ch+arg_C]
.text:004127FA                 inc     eax
.text:004127FB                 mov     [esp+97Ch+var_950], eax
.text:004127FF                 dec     eax
.text:00412800                 mov     edi, [ecx]
.text:00412802                 mov     [esp+97Ch+var_8FC], eax
.text:00412809                 mov     edx, [ecx+4]
.text:0041280C                 mov     eax, [esp+97Ch+var_950]
.text:00412810                 mov     ebx, edi
.text:00412812                 sub     eax, edi
.text:00412814
.text:00412814 loc_412814:                             ; CODE XREF: sub_412110+7B9↓j
.text:00412814                 inc     eax
.text:00412815                 cmp     eax, edx
.text:00412817                 jbe     loc_4128CE
.text:0041281D                 cmp     edx, 10000h
.text:00412823                 mov     ebp, 0Fh
.text:00412828                 jz      loc_412526
.text:0041282E                 lea     esi, [edx+edx]
.text:00412831                 mov     edx, [esp+97Ch+arg_C]
.text:00412838                 cmp     esi, 10000h
.text:0041283E                 mov     [edx+4], esi
.text:00412841                 jbe     short loc_41284A
.text:00412843                 mov     dword ptr [edx+4], 10000h
.text:0041284A
.text:0041284A loc_41284A:                             ; CODE XREF: sub_412110+731↑j
.text:0041284A                 mov     edx, [esp+97Ch+arg_C]
.text:00412851                 mov     ebp, [edx+4]
.text:00412854                 mov     [esp+97Ch+Size], edi ; Block
.text:00412857                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0041285B                 mov     ebp, 0Ch
.text:00412860                 call    realloc
.text:00412865                 mov     edi, [esp+97Ch+arg_C]
.text:0041286C                 test    eax, eax
.text:0041286E                 mov     [edi], eax
.text:00412870                 jz      loc_412526
.text:00412876                 cmp     ebx, eax
.text:00412878                 jz      short loc_4128AE
.text:0041287A                 mov     ecx, [esp+97Ch+var_908]
.text:0041287E                 sub     eax, ebx
.text:00412880                 add     [esp+97Ch+var_950], eax
.text:00412884                 add     [esp+97Ch+var_904], eax
.text:00412888                 test    ecx, ecx
.text:0041288A                 jz      short loc_412890
.text:0041288C                 add     [esp+97Ch+var_908], eax
.text:00412890
.text:00412890 loc_412890:                             ; CODE XREF: sub_412110+77A↑j
.text:00412890                 mov     ebx, [esp+97Ch+var_900]
.text:00412894                 test    ebx, ebx
.text:00412896                 jz      short loc_41289C
.text:00412898                 add     [esp+97Ch+var_900], eax
.text:0041289C
.text:0041289C loc_41289C:                             ; CODE XREF: sub_412110+786↑j
.text:0041289C                 mov     esi, [esp+97Ch+var_8FC]
.text:004128A3                 test    esi, esi
.text:004128A5                 jz      short loc_4128AE
.text:004128A7                 add     [esp+97Ch+var_8FC], eax
.text:004128AE
.text:004128AE loc_4128AE:                             ; CODE XREF: sub_412110+768↑j
.text:004128AE                                         ; sub_412110+795↑j ...
.text:004128AE                 mov     edx, [esp+97Ch+arg_C]
.text:004128B5                 mov     ebp, [esp+97Ch+arg_C]
.text:004128BC                 mov     eax, [esp+97Ch+var_950]
.text:004128C0                 mov     edi, [edx]
.text:004128C2                 mov     edx, [ebp+4]
.text:004128C5                 sub     eax, edi
.text:004128C7                 mov     ebx, edi
.text:004128C9                 jmp     loc_412814
.text:004128CE ; ---------------------------------------------------------------------------
.text:004128CE
.text:004128CE loc_4128CE:                             ; CODE XREF: sub_412110+707↑j
.text:004128CE                 movzx   ecx, [esp+97Ch+var_8EC]
.text:004128D6                 mov     edi, [esp+97Ch+var_950]
.text:004128DA                 mov     [edi], cl
.text:004128DC                 mov     eax, [esp+97Ch+var_8FC]
.text:004128E3                 inc     edi
.text:004128E4                 mov     [esp+97Ch+var_950], edi
.text:004128E8                 inc     byte ptr [eax]
.text:004128EA                 jmp     loc_41253F
.text:004128EF ; ---------------------------------------------------------------------------
.text:004128EF
.text:004128EF loc_4128EF:                             ; CODE XREF: sub_412110+5F3↑j
.text:004128EF                 inc     dl
.text:004128F1                 jz      loc_412709
.text:004128F7                 mov     edi, [esp+97Ch+var_8D0]
.text:004128FE                 mov     edx, edi
.text:00412900                 movzx   eax, byte ptr [edi]
.text:00412903                 cmp     al, 2Ah ; '*'
.text:00412905                 jz      loc_412709
.text:0041290B                 cmp     al, 5Eh ; '^'
.text:0041290D                 jz      loc_412709
.text:00412913                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0041291B                 jz      short loc_412964
.text:0041291D                 cmp     al, 5Ch ; '\'
.text:0041291F                 jz      short loc_412960
.text:00412921
.text:00412921 loc_412921:                             ; CODE XREF: sub_412110+85E↓j
.text:00412921                 test    [esp+97Ch+arg_8], 200h
.text:0041292C                 jz      short loc_4128AE
.text:0041292E                 test    [esp+97Ch+arg_8], 1000h
.text:00412939                 jz      short loc_412950
.text:0041293B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0041293E
.text:0041293E loc_41293E:                             ; CODE XREF: sub_412110+84D↓j
.text:0041293E                 jnz     loc_4128AE
.text:00412944                 jmp     loc_412709
.text:00412944 ; ---------------------------------------------------------------------------
.text:00412949                 align 10h
.text:00412950
.text:00412950 loc_412950:                             ; CODE XREF: sub_412110+829↑j
.text:00412950                 cmp     byte ptr [edx], 5Ch ; '\'
.text:00412953                 jnz     loc_4128AE
.text:00412959                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:0041295D                 jmp     short loc_41293E
.text:0041295D ; ---------------------------------------------------------------------------
.text:0041295F                 align 10h
.text:00412960
.text:00412960 loc_412960:                             ; CODE XREF: sub_412110+80F↑j
.text:00412960                 movzx   eax, byte ptr [edi+1]
.text:00412964
.text:00412964 loc_412964:                             ; CODE XREF: sub_412110+80B↑j
.text:00412964                 cmp     al, 2Bh ; '+'
.text:00412966                 jz      loc_412709
.text:0041296C                 cmp     al, 3Fh ; '?'
.text:0041296E                 jnz     short loc_412921
.text:00412970                 jmp     loc_412709
.text:00412975 ; ---------------------------------------------------------------------------
.text:00412975
.text:00412975 loc_412975:                             ; CODE XREF: sub_412110+16F↑j
.text:00412975                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00412975                 test    [esp+97Ch+arg_8], 800h ; jumptable 0041227F case 10
.text:00412980
.text:00412980 loc_412980:                             ; CODE XREF: sub_412110+32B2↓j
.text:00412980                 jz      def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412986
.text:00412986 loc_412986:                             ; CODE XREF: sub_412110+3279↓j
.text:00412986                 test    [esp+97Ch+arg_8], 400h
.text:00412991                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412997
.text:00412997 loc_412997:                             ; CODE XREF: sub_412110+8FF↓j
.text:00412997                                         ; sub_412110+92C↓j ...
.text:00412997                 mov     eax, [esp+97Ch+arg_C]
.text:0041299E                 mov     ebp, [esp+97Ch+var_950]
.text:004129A2                 mov     edi, [eax]
.text:004129A4                 mov     edx, [eax+4]
.text:004129A7                 sub     ebp, edi
.text:004129A9                 add     ebp, 3
.text:004129AC                 cmp     ebp, edx
.text:004129AE                 jbe     loc_412A4E
.text:004129B4                 cmp     edx, 10000h
.text:004129BA                 mov     ebp, 0Fh
.text:004129BF                 jz      loc_412526
.text:004129C5                 lea     ebx, [edx+edx]
.text:004129C8                 mov     edx, [esp+97Ch+arg_C]
.text:004129CF                 cmp     ebx, 10000h
.text:004129D5                 mov     [edx+4], ebx
.text:004129D8                 jbe     short loc_4129E1
.text:004129DA                 mov     dword ptr [edx+4], 10000h
.text:004129E1
.text:004129E1 loc_4129E1:                             ; CODE XREF: sub_412110+8C8↑j
.text:004129E1                 mov     eax, [esp+97Ch+arg_C]
.text:004129E8                 mov     ebp, [eax+4]
.text:004129EB                 mov     [esp+97Ch+Size], edi ; Block
.text:004129EE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004129F2                 mov     ebp, 0Ch
.text:004129F7                 call    realloc
.text:004129FC                 mov     esi, [esp+97Ch+arg_C]
.text:00412A03                 test    eax, eax
.text:00412A05                 mov     [esi], eax
.text:00412A07                 jz      loc_412526
.text:00412A0D                 cmp     edi, eax
.text:00412A0F                 jz      short loc_412997
.text:00412A11                 mov     ecx, [esp+97Ch+var_908]
.text:00412A15                 sub     eax, edi
.text:00412A17                 add     [esp+97Ch+var_950], eax
.text:00412A1B                 add     [esp+97Ch+var_904], eax
.text:00412A1F                 test    ecx, ecx
.text:00412A21                 jz      short loc_412A27
.text:00412A23                 add     [esp+97Ch+var_908], eax
.text:00412A27
.text:00412A27 loc_412A27:                             ; CODE XREF: sub_412110+911↑j
.text:00412A27                 mov     edx, [esp+97Ch+var_900]
.text:00412A2B                 test    edx, edx
.text:00412A2D                 jz      short loc_412A33
.text:00412A2F                 add     [esp+97Ch+var_900], eax
.text:00412A33
.text:00412A33 loc_412A33:                             ; CODE XREF: sub_412110+91D↑j
.text:00412A33                 mov     ebx, [esp+97Ch+var_8FC]
.text:00412A3A                 test    ebx, ebx
.text:00412A3C                 jz      loc_412997
.text:00412A42                 add     [esp+97Ch+var_8FC], eax
.text:00412A49                 jmp     loc_412997
.text:00412A4E ; ---------------------------------------------------------------------------
.text:00412A4E
.text:00412A4E loc_412A4E:                             ; CODE XREF: sub_412110+89E↑j
.text:00412A4E                 mov     [esp+97Ch+Size], 0Fh
.text:00412A55                 mov     edi, [esp+97Ch+var_950]
.text:00412A59                 mov     ebp, [esp+97Ch+var_904]
.text:00412A5D                 mov     edx, [esp+97Ch+var_904]
.text:00412A61                 mov     ebx, edi
.text:00412A63                 sub     ebx, ebp
.text:00412A65                 mov     [esp+97Ch+var_970], edi
.text:00412A69                 add     ebx, 3
.text:00412A6C                 add     edi, 3
.text:00412A6F                 mov     [esp+97Ch+var_974], ebx
.text:00412A73                 mov     [esp+97Ch+var_978], edx
.text:00412A77                 call    sub_40EF30
.text:00412A7C                 mov     [esp+97Ch+var_950], edi
.text:00412A80                 mov     esi, [esp+97Ch+var_908]
.text:00412A84                 xor     ecx, ecx
.text:00412A86                 mov     [esp+97Ch+var_8FC], ecx
.text:00412A8D                 test    esi, esi
.text:00412A8F                 jz      short loc_412AB4
.text:00412A91                 mov     [esp+97Ch+Size], 0Eh
.text:00412A98                 mov     eax, [esp+97Ch+var_908]
.text:00412A9C                 mov     esi, edi
.text:00412A9E                 mov     edi, [esp+97Ch+var_908]
.text:00412AA2                 sub     esi, eax
.text:00412AA4                 sub     esi, 3
.text:00412AA7                 mov     [esp+97Ch+var_974], esi
.text:00412AAB                 mov     [esp+97Ch+var_978], edi
.text:00412AAF                 call    sub_40EEE0
.text:00412AB4
.text:00412AB4 loc_412AB4:                             ; CODE XREF: sub_412110+97F↑j
.text:00412AB4                 mov     esi, [esp+97Ch+arg_C]
.text:00412ABB                 mov     edx, [esp+97Ch+var_950]
.text:00412ABF                 mov     ecx, [esp+97Ch+arg_C]
.text:00412AC6                 mov     edi, [esi]
.text:00412AC8                 mov     ebp, edx
.text:00412ACA                 mov     [esp+97Ch+var_908], edx
.text:00412ACE                 mov     edx, [ecx+4]
.text:00412AD1                 sub     ebp, edi
.text:00412AD3                 add     ebp, 3
.text:00412AD6                 mov     ebx, edi
.text:00412AD8                 cmp     ebp, edx
.text:00412ADA                 jbe     loc_412B93
.text:00412AE0
.text:00412AE0 loc_412AE0:                             ; CODE XREF: sub_412110+A7D↓j
.text:00412AE0                 cmp     edx, 10000h
.text:00412AE6                 mov     ebp, 0Fh
.text:00412AEB                 jz      loc_412526
.text:00412AF1                 lea     ebp, [edx+edx]
.text:00412AF4                 mov     edx, [esp+97Ch+arg_C]
.text:00412AFB                 cmp     ebp, 10000h
.text:00412B01                 mov     [edx+4], ebp
.text:00412B04                 jbe     short loc_412B0D
.text:00412B06                 mov     dword ptr [edx+4], 10000h
.text:00412B0D
.text:00412B0D loc_412B0D:                             ; CODE XREF: sub_412110+9F4↑j
.text:00412B0D                 mov     eax, [esp+97Ch+arg_C]
.text:00412B14                 mov     ebp, 0Ch
.text:00412B19                 mov     edx, [eax+4]
.text:00412B1C                 mov     [esp+97Ch+Size], edi ; Block
.text:00412B1F                 mov     [esp+97Ch+var_978], edx ; Size
.text:00412B23                 call    realloc
.text:00412B28                 mov     edi, [esp+97Ch+arg_C]
.text:00412B2F                 test    eax, eax
.text:00412B31                 mov     [edi], eax
.text:00412B33                 jz      loc_412526
.text:00412B39                 cmp     ebx, eax
.text:00412B3B                 jz      short loc_412B6D
.text:00412B3D                 sub     eax, ebx
.text:00412B3F                 mov     ebx, [esp+97Ch+var_908]
.text:00412B43                 add     [esp+97Ch+var_950], eax
.text:00412B47                 test    ebx, ebx
.text:00412B49                 jz      short loc_412B4F
.text:00412B4B                 add     [esp+97Ch+var_908], eax
.text:00412B4F
.text:00412B4F loc_412B4F:                             ; CODE XREF: sub_412110+A39↑j
.text:00412B4F                 mov     ecx, [esp+97Ch+var_900]
.text:00412B53                 test    ecx, ecx
.text:00412B55                 jz      short loc_412B5B
.text:00412B57                 add     [esp+97Ch+var_900], eax
.text:00412B5B
.text:00412B5B loc_412B5B:                             ; CODE XREF: sub_412110+A45↑j
.text:00412B5B                 mov     ebp, [esp+97Ch+var_8FC]
.text:00412B62                 test    ebp, ebp
.text:00412B64                 jz      short loc_412B6D
.text:00412B66                 add     [esp+97Ch+var_8FC], eax
.text:00412B6D
.text:00412B6D loc_412B6D:                             ; CODE XREF: sub_412110+A2B↑j
.text:00412B6D                                         ; sub_412110+A54↑j
.text:00412B6D                 mov     edx, [esp+97Ch+arg_C]
.text:00412B74                 mov     eax, [esp+97Ch+arg_C]
.text:00412B7B                 mov     esi, [esp+97Ch+var_950]
.text:00412B7F                 mov     edi, [edx]
.text:00412B81                 mov     edx, [eax+4]
.text:00412B84                 sub     esi, edi
.text:00412B86                 add     esi, 3
.text:00412B89                 mov     ebx, edi
.text:00412B8B                 cmp     esi, edx
.text:00412B8D                 ja      loc_412AE0
.text:00412B93
.text:00412B93 loc_412B93:                             ; CODE XREF: sub_412110+9CA↑j
.text:00412B93                 add     [esp+97Ch+var_950], 3
.text:00412B98                 mov     [esp+97Ch+var_900], 0
.text:00412BA0                 mov     edi, [esp+97Ch+var_950]
.text:00412BA4                 mov     [esp+97Ch+var_904], edi
.text:00412BA8                 jmp     loc_41253F
.text:00412BAD ; ---------------------------------------------------------------------------
.text:00412BAD
.text:00412BAD loc_412BAD:                             ; CODE XREF: sub_412110+16F↑j
.text:00412BAD                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00412BAD                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0041227F case 36
.text:00412BB4                 cmp     eax, [esp+97Ch+var_8F4]
.text:00412BBB                 jz      short loc_412BCB
.text:00412BBD                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00412BC5                 jz      loc_412C91
.text:00412BCB
.text:00412BCB loc_412BCB:                             ; CODE XREF: sub_412110+AAB↑j
.text:00412BCB                                         ; sub_412110+B31↓j ...
.text:00412BCB                 mov     ecx, [esp+97Ch+arg_C]
.text:00412BD2                 mov     eax, [esp+97Ch+arg_C]
.text:00412BD9                 mov     ebx, [esp+97Ch+var_950]
.text:00412BDD                 mov     edi, [ecx]
.text:00412BDF                 mov     edx, [eax+4]
.text:00412BE2                 sub     ebx, edi
.text:00412BE4                 inc     ebx
.text:00412BE5                 cmp     ebx, edx
.text:00412BE7                 jbe     loc_412C80
.text:00412BED                 cmp     edx, 10000h
.text:00412BF3                 mov     ebp, 0Fh
.text:00412BF8                 jz      loc_412526
.text:00412BFE                 mov     ebx, [esp+97Ch+arg_C]
.text:00412C05                 lea     ecx, [edx+edx]
.text:00412C08                 cmp     ecx, 10000h
.text:00412C0E                 mov     [ebx+4], ecx
.text:00412C11                 jbe     short loc_412C1A
.text:00412C13                 mov     dword ptr [ebx+4], 10000h
.text:00412C1A
.text:00412C1A loc_412C1A:                             ; CODE XREF: sub_412110+B01↑j
.text:00412C1A                 mov     ebx, [esp+97Ch+arg_C]
.text:00412C21                 mov     ebp, [ebx+4]
.text:00412C24                 mov     [esp+97Ch+Size], edi ; Block
.text:00412C27                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00412C2B                 mov     ebp, 0Ch
.text:00412C30                 call    realloc
.text:00412C35                 mov     [ebx], eax
.text:00412C37                 test    eax, eax
.text:00412C39                 jz      loc_412526
.text:00412C3F                 cmp     edi, eax
.text:00412C41                 jz      short loc_412BCB
.text:00412C43                 sub     eax, edi
.text:00412C45                 mov     edi, [esp+97Ch+var_908]
.text:00412C49                 add     [esp+97Ch+var_950], eax
.text:00412C4D                 add     [esp+97Ch+var_904], eax
.text:00412C51                 test    edi, edi
.text:00412C53                 jz      short loc_412C59
.text:00412C55                 add     [esp+97Ch+var_908], eax
.text:00412C59
.text:00412C59 loc_412C59:                             ; CODE XREF: sub_412110+B43↑j
.text:00412C59                 mov     edx, [esp+97Ch+var_900]
.text:00412C5D                 test    edx, edx
.text:00412C5F                 jz      short loc_412C65
.text:00412C61                 add     [esp+97Ch+var_900], eax
.text:00412C65
.text:00412C65 loc_412C65:                             ; CODE XREF: sub_412110+B4F↑j
.text:00412C65                 mov     esi, [esp+97Ch+var_8FC]
.text:00412C6C                 test    esi, esi
.text:00412C6E                 jz      loc_412BCB
.text:00412C74                 add     [esp+97Ch+var_8FC], eax
.text:00412C7B                 jmp     loc_412BCB
.text:00412C80 ; ---------------------------------------------------------------------------
.text:00412C80
.text:00412C80 loc_412C80:                             ; CODE XREF: sub_412110+AD7↑j
.text:00412C80                 mov     ebx, [esp+97Ch+var_950]
.text:00412C84                 mov     byte ptr [ebx], 0Ah
.text:00412C87
.text:00412C87 loc_412C87:                             ; CODE XREF: sub_412110+1059↓j
.text:00412C87                 inc     ebx
.text:00412C88                 mov     [esp+97Ch+var_950], ebx
.text:00412C8C                 jmp     loc_41253F
.text:00412C91 ; ---------------------------------------------------------------------------
.text:00412C91
.text:00412C91 loc_412C91:                             ; CODE XREF: sub_412110+AB5↑j
.text:00412C91                 mov     [esp+97Ch+Size], eax
.text:00412C94                 mov     esi, [esp+97Ch+arg_8]
.text:00412C9B                 mov     edx, [esp+97Ch+var_8F4]
.text:00412CA2                 mov     [esp+97Ch+var_974], esi
.text:00412CA6                 mov     [esp+97Ch+var_978], edx
.text:00412CAA                 call    sub_40F020
.text:00412CAF                 test    al, al
.text:00412CB1                 jnz     loc_412BCB
.text:00412CB7                 jmp     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412CBC ; ---------------------------------------------------------------------------
.text:00412CBC
.text:00412CBC loc_412CBC:                             ; CODE XREF: sub_412110+16F↑j
.text:00412CBC                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00412CBC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041227F case 40
.text:00412CC7                 jz      def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412CCD
.text:00412CCD loc_412CCD:                             ; CODE XREF: sub_412110+2417↓j
.text:00412CCD                 inc     [esp+97Ch+var_90C]
.text:00412CD1                 mov     eax, [esp+97Ch+arg_C]
.text:00412CD8                 inc     dword ptr [eax+18h]
.text:00412CDB                 mov     ecx, [esp+97Ch+var_24]
.text:00412CE2                 cmp     ecx, [esp+97Ch+var_28]
.text:00412CE9                 jz      loc_412E66
.text:00412CEF
.text:00412CEF loc_412CEF:                             ; CODE XREF: sub_412110+D91↓j
.text:00412CEF                 mov     edx, [esp+97Ch+arg_C]
.text:00412CF6                 lea     edi, [ecx+ecx*4]
.text:00412CF9                 xor     eax, eax
.text:00412CFB                 lea     ebp, ds:0[edi*4]
.text:00412D02                 mov     ebx, [esp+97Ch+Block]
.text:00412D09                 mov     edi, [edx]
.text:00412D0B                 sub     [esp+97Ch+var_904], edi
.text:00412D0F                 mov     edx, edi
.text:00412D11                 mov     esi, [esp+97Ch+var_904]
.text:00412D15                 mov     [ebx+ebp], esi
.text:00412D18                 mov     esi, [esp+97Ch+var_908]
.text:00412D1C                 test    esi, esi
.text:00412D1E                 jz      short loc_412D27
.text:00412D20                 mov     eax, [esp+97Ch+var_908]
.text:00412D24                 sub     eax, edi
.text:00412D26                 inc     eax
.text:00412D27
.text:00412D27 loc_412D27:                             ; CODE XREF: sub_412110+C0E↑j
.text:00412D27                 mov     [ebx+ebp+4], eax
.text:00412D2B                 lea     esi, [ecx+ecx*4]
.text:00412D2E                 mov     ebp, [esp+97Ch+var_90C]
.text:00412D32                 mov     ecx, [esp+97Ch+var_950]
.text:00412D36                 shl     esi, 2
.text:00412D39                 mov     [ebx+esi+10h], ebp
.text:00412D3D                 sub     ecx, edx
.text:00412D3F                 cmp     ebp, 0FFh
.text:00412D45                 mov     [ebx+esi+0Ch], ecx
.text:00412D49                 ja      loc_412E39
.text:00412D4F                 mov     edx, [esp+97Ch+var_24]
.text:00412D56                 lea     esi, [ecx+2]
.text:00412D59                 mov     eax, [esp+97Ch+arg_C]
.text:00412D60                 lea     ebp, [edx+edx*4]
.text:00412D63                 lea     edx, [ecx+3]
.text:00412D66                 mov     [ebx+ebp*4+8], esi
.text:00412D6A                 mov     ecx, [eax+4]
.text:00412D6D                 cmp     edx, ecx
.text:00412D6F                 jbe     loc_412E21
.text:00412D75
.text:00412D75 loc_412D75:                             ; CODE XREF: sub_412110+D0B↓j
.text:00412D75                 cmp     ecx, 10000h
.text:00412D7B                 mov     ebp, 0Fh
.text:00412D80                 jz      loc_412526
.text:00412D86                 mov     esi, [esp+97Ch+arg_C]
.text:00412D8D                 lea     ebx, [ecx+ecx]
.text:00412D90                 cmp     ebx, 10000h
.text:00412D96                 mov     [esi+4], ebx
.text:00412D99                 jbe     short loc_412DA2
.text:00412D9B                 mov     dword ptr [esi+4], 10000h
.text:00412DA2
.text:00412DA2 loc_412DA2:                             ; CODE XREF: sub_412110+C89↑j
.text:00412DA2                 mov     eax, [esp+97Ch+arg_C]
.text:00412DA9                 mov     ecx, [eax+4]
.text:00412DAC                 mov     [esp+97Ch+Size], edi ; Block
.text:00412DAF                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00412DB3                 call    realloc
.text:00412DB8                 mov     ebp, [esp+97Ch+arg_C]
.text:00412DBF                 test    eax, eax
.text:00412DC1                 mov     [ebp+0], eax
.text:00412DC4                 mov     ebp, 0Ch
.text:00412DC9                 jz      loc_412526
.text:00412DCF                 cmp     edi, eax
.text:00412DD1                 jz      short loc_412E03
.text:00412DD3                 sub     eax, edi
.text:00412DD5                 mov     edi, [esp+97Ch+var_908]
.text:00412DD9                 add     [esp+97Ch+var_950], eax
.text:00412DDD                 test    edi, edi
.text:00412DDF                 jz      short loc_412DE5
.text:00412DE1                 add     [esp+97Ch+var_908], eax
.text:00412DE5
.text:00412DE5 loc_412DE5:                             ; CODE XREF: sub_412110+CCF↑j
.text:00412DE5                 mov     esi, [esp+97Ch+var_900]
.text:00412DE9                 test    esi, esi
.text:00412DEB                 jz      short loc_412DF1
.text:00412DED                 add     [esp+97Ch+var_900], eax
.text:00412DF1
.text:00412DF1 loc_412DF1:                             ; CODE XREF: sub_412110+CDB↑j
.text:00412DF1                 mov     ebx, [esp+97Ch+var_8FC]
.text:00412DF8                 test    ebx, ebx
.text:00412DFA                 jz      short loc_412E03
.text:00412DFC                 add     [esp+97Ch+var_8FC], eax
.text:00412E03
.text:00412E03 loc_412E03:                             ; CODE XREF: sub_412110+CC1↑j
.text:00412E03                                         ; sub_412110+CEA↑j
.text:00412E03                 mov     ebp, [esp+97Ch+arg_C]
.text:00412E0A                 mov     edx, [esp+97Ch+var_950]
.text:00412E0E                 mov     edi, [ebp+0]
.text:00412E11                 mov     ecx, [ebp+4]
.text:00412E14                 sub     edx, edi
.text:00412E16                 add     edx, 3
.text:00412E19                 cmp     edx, ecx
.text:00412E1B                 ja      loc_412D75
.text:00412E21
.text:00412E21 loc_412E21:                             ; CODE XREF: sub_412110+C5F↑j
.text:00412E21                 mov     ecx, [esp+97Ch+var_950]
.text:00412E25                 mov     byte ptr [ecx], 6
.text:00412E28                 inc     ecx
.text:00412E29                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:00412E2E                 mov     [ecx], bl
.text:00412E30                 inc     ecx
.text:00412E31                 mov     byte ptr [ecx], 0
.text:00412E34                 inc     ecx
.text:00412E35                 mov     [esp+97Ch+var_950], ecx
.text:00412E39
.text:00412E39 loc_412E39:                             ; CODE XREF: sub_412110+C39↑j
.text:00412E39                 inc     [esp+97Ch+var_24]
.text:00412E40                 mov     eax, [esp+97Ch+var_950]
.text:00412E44                 mov     [esp+97Ch+var_908], 0
.text:00412E4C                 mov     [esp+97Ch+var_900], 0
.text:00412E54                 mov     [esp+97Ch+var_904], eax
.text:00412E58
.text:00412E58 loc_412E58:                             ; CODE XREF: sub_412110+2F9A↓j
.text:00412E58                                         ; sub_412110+3107↓j ...
.text:00412E58                 xor     eax, eax
.text:00412E5A                 mov     [esp+97Ch+var_8FC], eax
.text:00412E61                 jmp     loc_41253F
.text:00412E66 ; ---------------------------------------------------------------------------
.text:00412E66
.text:00412E66 loc_412E66:                             ; CODE XREF: sub_412110+BD9↑j
.text:00412E66                 mov     ebp, [esp+97Ch+Block]
.text:00412E6D                 lea     edi, [ecx+ecx*4]
.text:00412E70                 shl     edi, 3
.text:00412E73                 mov     [esp+97Ch+var_978], edi ; Size
.text:00412E77                 mov     [esp+97Ch+Size], ebp ; Block
.text:00412E7A                 mov     ebp, 0Ch
.text:00412E7F                 call    realloc
.text:00412E84                 mov     [esp+97Ch+Block], eax
.text:00412E8B                 test    eax, eax
.text:00412E8D                 jz      loc_412526
.text:00412E93                 shl     [esp+97Ch+var_28], 1
.text:00412E9A                 mov     ecx, [esp+97Ch+var_24]
.text:00412EA1                 jmp     loc_412CEF
.text:00412EA6 ; ---------------------------------------------------------------------------
.text:00412EA6
.text:00412EA6 loc_412EA6:                             ; CODE XREF: sub_412110+16F↑j
.text:00412EA6                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00412EA6                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041227F case 41
.text:00412EB1                 jz      def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412EB7
.text:00412EB7 loc_412EB7:                             ; CODE XREF: sub_412110+2537↓j
.text:00412EB7                 mov     esi, [esp+97Ch+var_908]
.text:00412EBB                 test    esi, esi
.text:00412EBD                 jz      loc_412FC4
.text:00412EC3                 mov     eax, [esp+97Ch+arg_C]
.text:00412ECA                 mov     ebp, [esp+97Ch+var_950]
.text:00412ECE                 mov     edi, [eax]
.text:00412ED0                 mov     edx, [eax+4]
.text:00412ED3                 sub     ebp, edi
.text:00412ED5                 mov     ebx, edi
.text:00412ED7                 inc     ebp
.text:00412ED8                 cmp     ebp, edx
.text:00412EDA                 jbe     loc_412F95
.text:00412EE0
.text:00412EE0 loc_412EE0:                             ; CODE XREF: sub_412110+E7F↓j
.text:00412EE0                 cmp     edx, 10000h
.text:00412EE6                 mov     ebp, 0Fh
.text:00412EEB                 jz      loc_412526
.text:00412EF1                 mov     esi, [esp+97Ch+arg_C]
.text:00412EF8                 lea     ecx, [edx+edx]
.text:00412EFB                 cmp     ecx, 10000h
.text:00412F01                 mov     [esi+4], ecx
.text:00412F04                 jbe     short loc_412F0D
.text:00412F06                 mov     dword ptr [esi+4], 10000h
.text:00412F0D
.text:00412F0D loc_412F0D:                             ; CODE XREF: sub_412110+DF4↑j
.text:00412F0D                 mov     ebp, [esp+97Ch+arg_C]
.text:00412F14                 mov     esi, [ebp+4]
.text:00412F17                 mov     ebp, 0Ch
.text:00412F1C                 mov     [esp+97Ch+Size], edi ; Block
.text:00412F1F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00412F23                 call    realloc
.text:00412F28                 mov     edx, [esp+97Ch+arg_C]
.text:00412F2F                 test    eax, eax
.text:00412F31                 mov     [edx], eax
.text:00412F33                 jz      loc_412526
.text:00412F39                 cmp     ebx, eax
.text:00412F3B                 jz      short loc_412F71
.text:00412F3D                 sub     eax, ebx
.text:00412F3F                 mov     ebx, [esp+97Ch+var_908]
.text:00412F43                 add     [esp+97Ch+var_950], eax
.text:00412F47                 add     [esp+97Ch+var_904], eax
.text:00412F4B                 test    ebx, ebx
.text:00412F4D                 jz      short loc_412F53
.text:00412F4F                 add     [esp+97Ch+var_908], eax
.text:00412F53
.text:00412F53 loc_412F53:                             ; CODE XREF: sub_412110+E3D↑j
.text:00412F53                 mov     edi, [esp+97Ch+var_900]
.text:00412F57                 test    edi, edi
.text:00412F59                 jz      short loc_412F5F
.text:00412F5B                 add     [esp+97Ch+var_900], eax
.text:00412F5F
.text:00412F5F loc_412F5F:                             ; CODE XREF: sub_412110+E49↑j
.text:00412F5F                 mov     edx, [esp+97Ch+var_8FC]
.text:00412F66                 test    edx, edx
.text:00412F68                 jz      short loc_412F71
.text:00412F6A                 add     [esp+97Ch+var_8FC], eax
.text:00412F71
.text:00412F71 loc_412F71:                             ; CODE XREF: sub_412110+E2B↑j
.text:00412F71                                         ; sub_412110+E58↑j
.text:00412F71                 mov     esi, [esp+97Ch+arg_C]
.text:00412F78                 mov     eax, [esp+97Ch+arg_C]
.text:00412F7F                 mov     ecx, [esp+97Ch+var_950]
.text:00412F83                 mov     edi, [esi]
.text:00412F85                 mov     edx, [eax+4]
.text:00412F88                 sub     ecx, edi
.text:00412F8A                 inc     ecx
.text:00412F8B                 mov     ebx, edi
.text:00412F8D                 cmp     ecx, edx
.text:00412F8F                 ja      loc_412EE0
.text:00412F95
.text:00412F95 loc_412F95:                             ; CODE XREF: sub_412110+DCA↑j
.text:00412F95                 mov     edx, [esp+97Ch+var_950]
.text:00412F99                 mov     byte ptr [edx], 14h
.text:00412F9C                 mov     edi, [esp+97Ch+var_908]
.text:00412FA0                 inc     edx
.text:00412FA1                 mov     [esp+97Ch+var_950], edx
.text:00412FA5                 mov     ebx, edx
.text:00412FA7                 mov     ebp, [esp+97Ch+var_908]
.text:00412FAB                 mov     [esp+97Ch+Size], 0Eh
.text:00412FB2                 sub     ebx, edi
.text:00412FB4                 sub     ebx, 4
.text:00412FB7                 mov     [esp+97Ch+var_974], ebx
.text:00412FBB                 mov     [esp+97Ch+var_978], ebp
.text:00412FBF                 call    sub_40EEE0
.text:00412FC4
.text:00412FC4 loc_412FC4:                             ; CODE XREF: sub_412110+DAD↑j
.text:00412FC4                 mov     eax, [esp+97Ch+var_24]
.text:00412FCB                 test    eax, eax
.text:00412FCD                 jnz     short loc_412FF4
.text:00412FCF                 test    [esp+97Ch+arg_8], 20000h
.text:00412FDA                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412FE0
.text:00412FE0 loc_412FE0:                             ; CODE XREF: sub_412110+254E↓j
.text:00412FE0                 mov     ecx, [esp+97Ch+Block]
.text:00412FE7                 mov     ebp, 10h
.text:00412FEC
.text:00412FEC loc_412FEC:                             ; CODE XREF: sub_412110+15EA↓j
.text:00412FEC                                         ; sub_412110+21AF↓j
.text:00412FEC                 mov     [esp+97Ch+Size], ecx
.text:00412FEF                 jmp     loc_4126B3
.text:00412FF4 ; ---------------------------------------------------------------------------
.text:00412FF4
.text:00412FF4 loc_412FF4:                             ; CODE XREF: sub_412110+EBD↑j
.text:00412FF4                 dec     eax
.text:00412FF5                 mov     edx, [esp+97Ch+Block]
.text:00412FFC                 mov     ebp, [esp+97Ch+arg_C]
.text:00413003                 mov     [esp+97Ch+var_24], eax
.text:0041300A                 lea     esi, [eax+eax*4]
.text:0041300D                 shl     esi, 2
.text:00413010                 mov     ebx, [ebp+0]
.text:00413013                 mov     edi, [edx+esi]
.text:00413016                 mov     ebp, [edx+esi+4]
.text:0041301A                 mov     ecx, ebx
.text:0041301C                 add     edi, ebx
.text:0041301E                 test    ebp, ebp
.text:00413020                 mov     [esp+97Ch+var_904], edi
.text:00413024                 lea     edi, [ebp+ebx-1]
.text:00413028                 setz    bl
.text:0041302B                 movzx   esi, bl
.text:0041302E                 mov     ebx, [esp+97Ch+var_24]
.text:00413035                 dec     esi
.text:00413036                 and     edi, esi
.text:00413038                 lea     eax, [ebx+ebx*4]
.text:0041303B                 mov     [esp+97Ch+var_908], edi
.text:0041303F                 shl     eax, 2
.text:00413042                 xor     esi, esi
.text:00413044                 mov     [esp+97Ch+var_8FC], esi
.text:0041304B                 mov     ebx, [edx+eax+10h]
.text:0041304F                 mov     ebp, [edx+eax+0Ch]
.text:00413053                 mov     [esp+97Ch+var_930], ebx
.text:00413057                 add     ebp, ecx
.text:00413059                 cmp     ebx, 0FFh
.text:0041305F                 mov     [esp+97Ch+var_900], ebp
.text:00413063                 ja      loc_41253F
.text:00413069                 mov     esi, [edx+eax+8]
.text:0041306D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:00413072                 add     ecx, esi
.text:00413074                 sub     dl, bl
.text:00413076                 mov     [ecx], dl
.text:00413078                 mov     eax, [esp+97Ch+arg_C]
.text:0041307F                 mov     ecx, [esp+97Ch+var_950]
.text:00413083                 mov     edi, [eax]
.text:00413085                 mov     edx, [eax+4]
.text:00413088                 sub     ecx, edi
.text:0041308A                 add     ecx, 3
.text:0041308D                 mov     ebx, edi
.text:0041308F                 cmp     ecx, edx
.text:00413091                 jbe     loc_41314E
.text:00413097
.text:00413097 loc_413097:                             ; CODE XREF: sub_412110+1038↓j
.text:00413097                 cmp     edx, 10000h
.text:0041309D                 mov     ebp, 0Fh
.text:004130A2                 jz      loc_412526
.text:004130A8                 lea     ebp, [edx+edx]
.text:004130AB                 mov     edx, [esp+97Ch+arg_C]
.text:004130B2                 cmp     ebp, 10000h
.text:004130B8                 mov     [edx+4], ebp
.text:004130BB                 jbe     short loc_4130C4
.text:004130BD                 mov     dword ptr [edx+4], 10000h
.text:004130C4
.text:004130C4 loc_4130C4:                             ; CODE XREF: sub_412110+FAB↑j
.text:004130C4                 mov     eax, [esp+97Ch+arg_C]
.text:004130CB                 mov     ebp, 0Ch
.text:004130D0                 mov     edx, [eax+4]
.text:004130D3                 mov     [esp+97Ch+Size], edi ; Block
.text:004130D6                 mov     [esp+97Ch+var_978], edx ; Size
.text:004130DA                 call    realloc
.text:004130DF                 mov     edi, [esp+97Ch+arg_C]
.text:004130E6                 test    eax, eax
.text:004130E8                 mov     [edi], eax
.text:004130EA                 jz      loc_412526
.text:004130F0                 cmp     ebx, eax
.text:004130F2                 jz      short loc_413128
.text:004130F4                 sub     eax, ebx
.text:004130F6                 mov     ebx, [esp+97Ch+var_908]
.text:004130FA                 add     [esp+97Ch+var_950], eax
.text:004130FE                 add     [esp+97Ch+var_904], eax
.text:00413102                 test    ebx, ebx
.text:00413104                 jz      short loc_41310A
.text:00413106                 add     [esp+97Ch+var_908], eax
.text:0041310A
.text:0041310A loc_41310A:                             ; CODE XREF: sub_412110+FF4↑j
.text:0041310A                 mov     ecx, [esp+97Ch+var_900]
.text:0041310E                 test    ecx, ecx
.text:00413110                 jz      short loc_413116
.text:00413112                 add     [esp+97Ch+var_900], eax
.text:00413116
.text:00413116 loc_413116:                             ; CODE XREF: sub_412110+1000↑j
.text:00413116                 mov     esi, [esp+97Ch+var_8FC]
.text:0041311D                 test    esi, esi
.text:0041311F                 jz      short loc_413128
.text:00413121                 add     [esp+97Ch+var_8FC], eax
.text:00413128
.text:00413128 loc_413128:                             ; CODE XREF: sub_412110+FE2↑j
.text:00413128                                         ; sub_412110+100F↑j
.text:00413128                 mov     edx, [esp+97Ch+arg_C]
.text:0041312F                 mov     eax, [esp+97Ch+arg_C]
.text:00413136                 mov     ebp, [esp+97Ch+var_950]
.text:0041313A                 mov     edi, [edx]
.text:0041313C                 mov     edx, [eax+4]
.text:0041313F                 sub     ebp, edi
.text:00413141                 add     ebp, 3
.text:00413144                 mov     ebx, edi
.text:00413146                 cmp     ebp, edx
.text:00413148                 ja      loc_413097
.text:0041314E
.text:0041314E loc_41314E:                             ; CODE XREF: sub_412110+F81↑j
.text:0041314E                 mov     ebx, [esp+97Ch+var_950]
.text:00413152                 mov     byte ptr [ebx], 7
.text:00413155                 inc     ebx
.text:00413156                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:0041315B                 mov     [ebx], dl
.text:0041315D                 inc     ebx
.text:0041315E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:00413163                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:00413167                 mov     [ebx], cl
.text:00413169                 jmp     loc_412C87
.text:00413169 ; ---------------------------------------------------------------------------
.text:0041316E                 align 10h
.text:00413170
.text:00413170 loc_413170:                             ; CODE XREF: sub_412110+16F↑j
.text:00413170                                         ; sub_412110+16DF↓j ...
.text:00413170                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0041227F case 42
.text:00413174                 test    ebp, ebp
.text:00413176                 jz      loc_4136D1
.text:0041317C
.text:0041317C loc_41317C:                             ; CODE XREF: sub_412110+15D3↓j
.text:0041317C                 mov     [esp+97Ch+var_91C], 0
.text:00413181                 xor     ecx, ecx
.text:00413183                 mov     [esp+97Ch+var_91D], 0
.text:00413188
.text:00413188 loc_413188:                             ; CODE XREF: sub_412110+10ED↓j
.text:00413188                                         ; sub_412110+1105↓j ...
.text:00413188                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00413190                 movsx   eax, [esp+97Ch+var_91D]
.text:00413195                 jz      short loc_41319A
.text:00413197                 or      eax, 1
.text:0041319A
.text:0041319A loc_41319A:                             ; CODE XREF: sub_412110+1085↑j
.text:0041319A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:004131A2                 mov     [esp+97Ch+var_91D], al
.text:004131A6                 movsx   eax, cl
.text:004131A9                 jz      short loc_4131AE
.text:004131AB                 or      eax, 1
.text:004131AE
.text:004131AE loc_4131AE:                             ; CODE XREF: sub_412110+1099↑j
.text:004131AE                 mov     edx, [esp+97Ch+var_8D0]
.text:004131B5                 mov     cl, al
.text:004131B7                 cmp     edx, [esp+97Ch+var_8F4]
.text:004131BE                 jz      short loc_413230
.text:004131C0                 movzx   eax, byte ptr [edx]
.text:004131C3                 lea     edi, [edx+1]
.text:004131C6                 mov     esi, [esp+97Ch+var_8F8]
.text:004131CD                 mov     [esp+97Ch+var_8D0], edi
.text:004131D4                 test    esi, esi
.text:004131D6                 mov     [esp+97Ch+var_8EC], al
.text:004131DD                 jz      short loc_4131F5
.text:004131DF                 mov     esi, [esp+97Ch+var_8F8]
.text:004131E6                 movzx   ebp, al
.text:004131E9                 movzx   eax, byte ptr [ebp+esi+0]
.text:004131EE                 mov     [esp+97Ch+var_8EC], al
.text:004131F5
.text:004131F5 loc_4131F5:                             ; CODE XREF: sub_412110+10CD↑j
.text:004131F5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:004131FD                 jz      short loc_413188
.text:004131FF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:00413207                 jnz     loc_413660
.text:0041320D                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00413215                 jz      loc_413188
.text:0041321B                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00413223                 jz      loc_413188
.text:00413229
.text:00413229 loc_413229:                             ; CODE XREF: sub_412110+1558↓j
.text:00413229                 dec     [esp+97Ch+var_8D0]
.text:00413230
.text:00413230 loc_413230:                             ; CODE XREF: sub_412110+10AE↑j
.text:00413230                                         ; sub_412110+15AB↓j
.text:00413230                 mov     edx, [esp+97Ch+var_900]
.text:00413234                 test    edx, edx
.text:00413236                 jz      loc_41253F
.text:0041323C                 test    cl, cl
.text:0041323E                 jz      loc_413443
.text:00413244                 mov     ebx, [esp+97Ch+arg_C]
.text:0041324B                 mov     ebp, [esp+97Ch+arg_C]
.text:00413252                 mov     esi, [esp+97Ch+var_950]
.text:00413256                 mov     edi, [ebx]
.text:00413258                 mov     edx, [ebp+4]
.text:0041325B                 sub     esi, edi
.text:0041325D                 add     esi, 3
.text:00413260                 mov     ebx, edi
.text:00413262                 cmp     esi, edx
.text:00413264                 jbe     loc_413321
.text:0041326A
.text:0041326A loc_41326A:                             ; CODE XREF: sub_412110+120B↓j
.text:0041326A                 cmp     edx, 10000h
.text:00413270                 mov     ebp, 0Fh
.text:00413275                 jz      loc_412526
.text:0041327B                 mov     esi, [esp+97Ch+arg_C]
.text:00413282                 lea     ecx, [edx+edx]
.text:00413285                 cmp     ecx, 10000h
.text:0041328B                 mov     [esi+4], ecx
.text:0041328E                 jbe     short loc_413297
.text:00413290                 mov     dword ptr [esi+4], 10000h
.text:00413297
.text:00413297 loc_413297:                             ; CODE XREF: sub_412110+117E↑j
.text:00413297                 mov     eax, [esp+97Ch+arg_C]
.text:0041329E                 mov     ebp, 0Ch
.text:004132A3                 mov     esi, [eax+4]
.text:004132A6                 mov     [esp+97Ch+Size], edi ; Block
.text:004132A9                 mov     [esp+97Ch+var_978], esi ; Size
.text:004132AD                 call    realloc
.text:004132B2                 mov     edi, [esp+97Ch+arg_C]
.text:004132B9                 test    eax, eax
.text:004132BB                 mov     [edi], eax
.text:004132BD                 jz      loc_412526
.text:004132C3                 cmp     ebx, eax
.text:004132C5                 jz      short loc_4132FB
.text:004132C7                 mov     edx, [esp+97Ch+var_908]
.text:004132CB                 sub     eax, ebx
.text:004132CD                 add     [esp+97Ch+var_950], eax
.text:004132D1                 add     [esp+97Ch+var_904], eax
.text:004132D5                 test    edx, edx
.text:004132D7                 jz      short loc_4132DD
.text:004132D9                 add     [esp+97Ch+var_908], eax
.text:004132DD
.text:004132DD loc_4132DD:                             ; CODE XREF: sub_412110+11C7↑j
.text:004132DD                 mov     ebp, [esp+97Ch+var_900]
.text:004132E1                 test    ebp, ebp
.text:004132E3                 jz      short loc_4132E9
.text:004132E5                 add     [esp+97Ch+var_900], eax
.text:004132E9
.text:004132E9 loc_4132E9:                             ; CODE XREF: sub_412110+11D3↑j
.text:004132E9                 mov     ebx, [esp+97Ch+var_8FC]
.text:004132F0                 test    ebx, ebx
.text:004132F2                 jz      short loc_4132FB
.text:004132F4                 add     [esp+97Ch+var_8FC], eax
.text:004132FB
.text:004132FB loc_4132FB:                             ; CODE XREF: sub_412110+11B5↑j
.text:004132FB                                         ; sub_412110+11E2↑j
.text:004132FB                 mov     esi, [esp+97Ch+arg_C]
.text:00413302                 mov     eax, [esp+97Ch+arg_C]
.text:00413309                 mov     ecx, [esp+97Ch+var_950]
.text:0041330D                 mov     edi, [esi]
.text:0041330F                 mov     edx, [eax+4]
.text:00413312                 sub     ecx, edi
.text:00413314                 add     ecx, 3
.text:00413317                 mov     ebx, edi
.text:00413319                 cmp     ecx, edx
.text:0041331B                 ja      loc_41326A
.text:00413321
.text:00413321 loc_413321:                             ; CODE XREF: sub_412110+1154↑j
.text:00413321                 mov     edi, [esp+97Ch+var_8F8]
.text:00413328                 test    edi, edi
.text:0041332A                 jz      loc_41364A
.text:00413330                 mov     edi, [esp+97Ch+var_8D0]
.text:00413337                 mov     ebx, [esp+97Ch+var_8F8]
.text:0041333E                 movzx   ebp, byte ptr [edi-2]
.text:00413342                 movsx   edx, byte ptr [ebp+ebx+0]
.text:00413347
.text:00413347 loc_413347:                             ; CODE XREF: sub_412110+1545↓j
.text:00413347                 mov     ecx, [esp+97Ch+var_8F8]
.text:0041334E                 test    ecx, ecx
.text:00413350                 jz      loc_413642
.text:00413356                 mov     eax, [esp+97Ch+var_8F8]
.text:0041335D                 movsx   esi, byte ptr [eax+2Eh]
.text:00413361                 cmp     edx, esi
.text:00413363
.text:00413363 loc_413363:                             ; CODE XREF: sub_412110+1535↓j
.text:00413363                 jz      loc_4135AB
.text:00413369
.text:00413369 loc_413369:                             ; CODE XREF: sub_412110+14A0↓j
.text:00413369                                         ; sub_412110+14AD↓j ...
.text:00413369                 mov     [esp+97Ch+Size], 12h
.text:00413370                 mov     ebx, [esp+97Ch+var_900]
.text:00413374                 mov     ecx, [esp+97Ch+var_950]
.text:00413378                 mov     edi, [esp+97Ch+var_950]
.text:0041337C                 sub     ebx, ecx
.text:0041337E                 sub     ebx, 6
.text:00413381                 mov     [esp+97Ch+var_974], ebx
.text:00413385                 mov     [esp+97Ch+var_978], edi
.text:00413389                 call    sub_40EEE0
.text:0041338E
.text:0041338E loc_41338E:                             ; CODE XREF: sub_412110+1523↓j
.text:0041338E                 add     [esp+97Ch+var_950], 3
.text:00413393                 mov     esi, [esp+97Ch+arg_C]
.text:0041339A                 mov     eax, [esp+97Ch+var_950]
.text:0041339E                 mov     edi, [esi]
.text:004133A0                 mov     edx, [esi+4]
.text:004133A3
.text:004133A3 loc_4133A3:                             ; CODE XREF: sub_412110+134A↓j
.text:004133A3                 sub     eax, edi
.text:004133A5                 mov     ebx, edi
.text:004133A7                 add     eax, 3
.text:004133AA                 cmp     eax, edx
.text:004133AC                 jbe     loc_41345F
.text:004133B2                 cmp     edx, 10000h
.text:004133B8                 mov     ebp, 0Fh
.text:004133BD                 jz      loc_412526
.text:004133C3                 mov     esi, [esp+97Ch+arg_C]
.text:004133CA                 lea     ebp, [edx+edx]
.text:004133CD                 cmp     ebp, 10000h
.text:004133D3                 mov     [esi+4], ebp
.text:004133D6                 jbe     short loc_4133DF
.text:004133D8                 mov     dword ptr [esi+4], 10000h
.text:004133DF
.text:004133DF loc_4133DF:                             ; CODE XREF: sub_412110+12C6↑j
.text:004133DF                 mov     eax, [esp+97Ch+arg_C]
.text:004133E6                 mov     ebp, 0Ch
.text:004133EB                 mov     ecx, [eax+4]
.text:004133EE                 mov     [esp+97Ch+Size], edi ; Block
.text:004133F1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:004133F5                 call    realloc
.text:004133FA                 mov     edx, [esp+97Ch+arg_C]
.text:00413401                 test    eax, eax
.text:00413403                 mov     [edx], eax
.text:00413405                 jz      loc_412526
.text:0041340B                 cmp     ebx, eax
.text:0041340D                 jz      short loc_413443
.text:0041340F                 mov     edi, [esp+97Ch+var_908]
.text:00413413                 sub     eax, ebx
.text:00413415                 add     [esp+97Ch+var_950], eax
.text:00413419                 add     [esp+97Ch+var_904], eax
.text:0041341D                 test    edi, edi
.text:0041341F                 jz      short loc_413425
.text:00413421                 add     [esp+97Ch+var_908], eax
.text:00413425
.text:00413425 loc_413425:                             ; CODE XREF: sub_412110+130F↑j
.text:00413425                 mov     ebx, [esp+97Ch+var_900]
.text:00413429                 test    ebx, ebx
.text:0041342B                 jz      short loc_413431
.text:0041342D                 add     [esp+97Ch+var_900], eax
.text:00413431
.text:00413431 loc_413431:                             ; CODE XREF: sub_412110+131B↑j
.text:00413431                 mov     esi, [esp+97Ch+var_8FC]
.text:00413438                 test    esi, esi
.text:0041343A                 jz      short loc_413443
.text:0041343C                 add     [esp+97Ch+var_8FC], eax
.text:00413443
.text:00413443 loc_413443:                             ; CODE XREF: sub_412110+112E↑j
.text:00413443                                         ; sub_412110+12FD↑j ...
.text:00413443                 mov     edx, [esp+97Ch+arg_C]
.text:0041344A                 mov     ebp, [esp+97Ch+arg_C]
.text:00413451                 mov     eax, [esp+97Ch+var_950]
.text:00413455                 mov     edi, [edx]
.text:00413457                 mov     edx, [ebp+4]
.text:0041345A                 jmp     loc_4133A3
.text:0041345F ; ---------------------------------------------------------------------------
.text:0041345F
.text:0041345F loc_41345F:                             ; CODE XREF: sub_412110+129C↑j
.text:0041345F                 movzx   edx, [esp+97Ch+var_91C]
.text:00413464                 mov     ebx, [esp+97Ch+var_950]
.text:00413468                 mov     eax, [esp+97Ch+var_900]
.text:0041346C                 mov     edi, [esp+97Ch+var_900]
.text:00413470                 mov     esi, ebx
.text:00413472                 and     edx, 1
.text:00413475                 mov     [esp+97Ch+var_970], ebx
.text:00413479                 sub     esi, eax
.text:0041347B                 add     edx, 0Fh
.text:0041347E                 mov     [esp+97Ch+var_974], esi
.text:00413482                 add     ebx, 3
.text:00413485                 mov     [esp+97Ch+var_978], edi
.text:00413489                 mov     [esp+97Ch+Size], edx
.text:0041348C                 call    sub_40EF30
.text:00413491                 mov     [esp+97Ch+var_950], ebx
.text:00413495                 xor     ecx, ecx
.text:00413497                 cmp     [esp+97Ch+var_91D], 0
.text:0041349C                 mov     [esp+97Ch+var_8FC], ecx
.text:004134A3                 jnz     loc_41253F
.text:004134A9                 mov     ecx, [esp+97Ch+arg_C]
.text:004134B0                 mov     ebp, [esp+97Ch+var_950]
.text:004134B4                 mov     edi, [ecx]
.text:004134B6                 mov     edx, [ecx+4]
.text:004134B9                 sub     ebp, edi
.text:004134BB                 mov     ebx, edi
.text:004134BD                 add     ebp, 3
.text:004134C0                 cmp     ebp, edx
.text:004134C2                 jbe     loc_41357F
.text:004134C8
.text:004134C8 loc_4134C8:                             ; CODE XREF: sub_412110+1469↓j
.text:004134C8                 cmp     edx, 10000h
.text:004134CE                 mov     ebp, 0Fh
.text:004134D3                 jz      loc_412526
.text:004134D9                 mov     esi, [esp+97Ch+arg_C]
.text:004134E0                 lea     ebp, [edx+edx]
.text:004134E3                 cmp     ebp, 10000h
.text:004134E9                 mov     [esi+4], ebp
.text:004134EC                 jbe     short loc_4134F5
.text:004134EE                 mov     dword ptr [esi+4], 10000h
.text:004134F5
.text:004134F5 loc_4134F5:                             ; CODE XREF: sub_412110+13DC↑j
.text:004134F5                 mov     eax, [esp+97Ch+arg_C]
.text:004134FC                 mov     ebp, 0Ch
.text:00413501                 mov     esi, [eax+4]
.text:00413504                 mov     [esp+97Ch+Size], edi ; Block
.text:00413507                 mov     [esp+97Ch+var_978], esi ; Size
.text:0041350B                 call    realloc
.text:00413510                 mov     edx, [esp+97Ch+arg_C]
.text:00413517                 test    eax, eax
.text:00413519                 mov     [edx], eax
.text:0041351B                 jz      loc_412526
.text:00413521                 cmp     ebx, eax
.text:00413523                 jz      short loc_413559
.text:00413525                 mov     edi, [esp+97Ch+var_908]
.text:00413529                 sub     eax, ebx
.text:0041352B                 add     [esp+97Ch+var_950], eax
.text:0041352F                 add     [esp+97Ch+var_904], eax
.text:00413533                 test    edi, edi
.text:00413535                 jz      short loc_41353B
.text:00413537                 add     [esp+97Ch+var_908], eax
.text:0041353B
.text:0041353B loc_41353B:                             ; CODE XREF: sub_412110+1425↑j
.text:0041353B                 mov     ebx, [esp+97Ch+var_900]
.text:0041353F                 test    ebx, ebx
.text:00413541                 jz      short loc_413547
.text:00413543                 add     [esp+97Ch+var_900], eax
.text:00413547
.text:00413547 loc_413547:                             ; CODE XREF: sub_412110+1431↑j
.text:00413547                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041354E                 test    ecx, ecx
.text:00413550                 jz      short loc_413559
.text:00413552                 add     [esp+97Ch+var_8FC], eax
.text:00413559
.text:00413559 loc_413559:                             ; CODE XREF: sub_412110+1413↑j
.text:00413559                                         ; sub_412110+1440↑j
.text:00413559                 mov     edx, [esp+97Ch+arg_C]
.text:00413560                 mov     eax, [esp+97Ch+arg_C]
.text:00413567                 mov     ebp, [esp+97Ch+var_950]
.text:0041356B                 mov     edi, [edx]
.text:0041356D                 mov     edx, [eax+4]
.text:00413570                 sub     ebp, edi
.text:00413572                 add     ebp, 3
.text:00413575                 mov     ebx, edi
.text:00413577                 cmp     ebp, edx
.text:00413579                 ja      loc_4134C8
.text:0041357F
.text:0041357F loc_41357F:                             ; CODE XREF: sub_412110+13B2↑j
.text:0041357F                 mov     [esp+97Ch+var_974], 3
.text:00413587                 mov     edi, [esp+97Ch+var_950]
.text:0041358B                 mov     esi, [esp+97Ch+var_900]
.text:0041358F                 mov     [esp+97Ch+Size], 13h
.text:00413596                 mov     [esp+97Ch+var_970], edi
.text:0041359A                 add     edi, 3
.text:0041359D                 mov     [esp+97Ch+var_978], esi
.text:004135A1                 call    sub_40EF30
.text:004135A6                 jmp     loc_41253B
.text:004135AB ; ---------------------------------------------------------------------------
.text:004135AB
.text:004135AB loc_4135AB:                             ; CODE XREF: sub_412110:loc_413363↑j
.text:004135AB                 cmp     [esp+97Ch+var_91D], 0
.text:004135B0                 jz      loc_413369
.text:004135B6                 cmp     edi, [esp+97Ch+var_8F4]
.text:004135BD                 jnb     loc_413369
.text:004135C3                 mov     edx, [esp+97Ch+var_8F8]
.text:004135CA                 test    edx, edx
.text:004135CC                 jz      short loc_41363D
.text:004135CE                 movzx   ebp, byte ptr [edi]
.text:004135D1                 mov     edi, [esp+97Ch+var_8F8]
.text:004135D8                 movsx   edx, byte ptr [ebp+edi+0]
.text:004135DD
.text:004135DD loc_4135DD:                             ; CODE XREF: sub_412110+1530↓j
.text:004135DD                 mov     ebx, [esp+97Ch+var_8F8]
.text:004135E4                 test    ebx, ebx
.text:004135E6                 jz      short loc_413638
.text:004135E8                 mov     esi, [esp+97Ch+var_8F8]
.text:004135EF                 movsx   ecx, byte ptr [esi+0Ah]
.text:004135F3                 cmp     edx, ecx
.text:004135F5
.text:004135F5 loc_4135F5:                             ; CODE XREF: sub_412110+152B↓j
.text:004135F5                 jnz     loc_413369
.text:004135FB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:00413603                 jnz     loc_413369
.text:00413609                 mov     [esp+97Ch+Size], 0Dh
.text:00413610                 mov     ebp, [esp+97Ch+var_900]
.text:00413614                 mov     eax, [esp+97Ch+var_950]
.text:00413618                 mov     edx, [esp+97Ch+var_950]
.text:0041361C                 sub     ebp, eax
.text:0041361E                 sub     ebp, 3
.text:00413621                 mov     [esp+97Ch+var_974], ebp
.text:00413625                 mov     [esp+97Ch+var_978], edx
.text:00413629                 call    sub_40EEE0
.text:0041362E                 mov     [esp+97Ch+var_91C], 1
.text:00413633                 jmp     loc_41338E
.text:00413638 ; ---------------------------------------------------------------------------
.text:00413638
.text:00413638 loc_413638:                             ; CODE XREF: sub_412110+14D6↑j
.text:00413638                 cmp     edx, 0Ah
.text:0041363B                 jmp     short loc_4135F5
.text:0041363D ; ---------------------------------------------------------------------------
.text:0041363D
.text:0041363D loc_41363D:                             ; CODE XREF: sub_412110+14BC↑j
.text:0041363D                 movsx   edx, byte ptr [edi]
.text:00413640                 jmp     short loc_4135DD
.text:00413642 ; ---------------------------------------------------------------------------
.text:00413642
.text:00413642 loc_413642:                             ; CODE XREF: sub_412110+1240↑j
.text:00413642                 cmp     edx, 2Eh ; '.'
.text:00413645                 jmp     loc_413363
.text:0041364A ; ---------------------------------------------------------------------------
.text:0041364A
.text:0041364A loc_41364A:                             ; CODE XREF: sub_412110+121A↑j
.text:0041364A                 mov     edi, [esp+97Ch+var_8D0]
.text:00413651                 movsx   edx, byte ptr [edi-2]
.text:00413655                 jmp     loc_413347
.text:00413655 ; ---------------------------------------------------------------------------
.text:0041365A                 align 10h
.text:00413660
.text:00413660 loc_413660:                             ; CODE XREF: sub_412110+10F7↑j
.text:00413660                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00413668                 jnz     loc_413229
.text:0041366E                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413675                 jz      short loc_4136C0
.text:00413677                 movzx   ebx, byte ptr [edx+1]
.text:0041367B                 lea     ebp, [edx+2]
.text:0041367E                 mov     eax, [esp+97Ch+var_8F8]
.text:00413685                 mov     [esp+97Ch+var_8D0], ebp
.text:0041368C                 test    eax, eax
.text:0041368E                 jz      short loc_41369E
.text:00413690                 mov     eax, [esp+97Ch+var_8F8]
.text:00413697                 movzx   edi, bl
.text:0041369A                 movzx   ebx, byte ptr [edi+eax]
.text:0041369E
.text:0041369E loc_41369E:                             ; CODE XREF: sub_412110+157E↑j
.text:0041369E                 cmp     bl, 2Bh ; '+'
.text:004136A1                 jz      short loc_4136A8
.text:004136A3                 cmp     bl, 3Fh ; '?'
.text:004136A6                 jnz     short loc_4136B4
.text:004136A8
.text:004136A8 loc_4136A8:                             ; CODE XREF: sub_412110+1591↑j
.text:004136A8                 mov     [esp+97Ch+var_8EC], bl
.text:004136AF                 jmp     loc_413188
.text:004136B4 ; ---------------------------------------------------------------------------
.text:004136B4
.text:004136B4 loc_4136B4:                             ; CODE XREF: sub_412110+1596↑j
.text:004136B4                 mov     [esp+97Ch+var_8D0], edx
.text:004136BB                 jmp     loc_413230
.text:004136C0 ; ---------------------------------------------------------------------------
.text:004136C0
.text:004136C0 loc_4136C0:                             ; CODE XREF: sub_412110+1565↑j
.text:004136C0                                         ; sub_412110+21FF↓j ...
.text:004136C0                 mov     edi, [esp+97Ch+Block]
.text:004136C7                 mov     ebp, 5
.text:004136CC                 jmp     loc_4126B0
.text:004136D1 ; ---------------------------------------------------------------------------
.text:004136D1
.text:004136D1 loc_4136D1:                             ; CODE XREF: sub_412110+1066↑j
.text:004136D1                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:004136D9                 jnz     short loc_4136EE
.text:004136DB                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:004136E3                 jnz     loc_41317C
.text:004136E9                 jmp     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004136EE ; ---------------------------------------------------------------------------
.text:004136EE
.text:004136EE loc_4136EE:                             ; CODE XREF: sub_412110+15C9↑j
.text:004136EE                                         ; sub_412110+31A3↓j
.text:004136EE                 mov     ecx, [esp+97Ch+Block]
.text:004136F5                 mov     ebp, 0Dh
.text:004136FA                 jmp     loc_412FEC
.text:004136FA ; ---------------------------------------------------------------------------
.text:004136FF                 align 10h
.text:00413700
.text:00413700 loc_413700:                             ; CODE XREF: sub_412110+16F↑j
.text:00413700                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00413700                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0041227F case 46
.text:00413707                 mov     ecx, [esp+97Ch+var_950]
.text:0041370B                 mov     edi, [eax]
.text:0041370D                 mov     [esp+97Ch+var_900], ecx
.text:00413711                 mov     ebp, ecx
.text:00413713                 mov     edx, [eax+4]
.text:00413716                 sub     ebp, edi
.text:00413718                 mov     ebx, edi
.text:0041371A                 inc     ebp
.text:0041371B                 cmp     ebp, edx
.text:0041371D                 jbe     loc_4137D8
.text:00413723
.text:00413723 loc_413723:                             ; CODE XREF: sub_412110+16C2↓j
.text:00413723                 cmp     edx, 10000h
.text:00413729                 mov     ebp, 0Fh
.text:0041372E                 jz      loc_412526
.text:00413734                 mov     esi, [esp+97Ch+arg_C]
.text:0041373B                 lea     ebp, [edx+edx]
.text:0041373E                 cmp     ebp, 10000h
.text:00413744                 mov     [esi+4], ebp
.text:00413747                 jbe     short loc_413750
.text:00413749                 mov     dword ptr [esi+4], 10000h
.text:00413750
.text:00413750 loc_413750:                             ; CODE XREF: sub_412110+1637↑j
.text:00413750                 mov     eax, [esp+97Ch+arg_C]
.text:00413757                 mov     ebp, 0Ch
.text:0041375C                 mov     esi, [eax+4]
.text:0041375F                 mov     [esp+97Ch+Size], edi ; Block
.text:00413762                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413766                 call    realloc
.text:0041376B                 mov     edi, [esp+97Ch+arg_C]
.text:00413772                 test    eax, eax
.text:00413774                 mov     [edi], eax
.text:00413776                 jz      loc_412526
.text:0041377C                 cmp     ebx, eax
.text:0041377E                 jz      short loc_4137B4
.text:00413780                 sub     eax, ebx
.text:00413782                 mov     ebx, [esp+97Ch+var_908]
.text:00413786                 add     [esp+97Ch+var_950], eax
.text:0041378A                 add     [esp+97Ch+var_904], eax
.text:0041378E                 test    ebx, ebx
.text:00413790                 jz      short loc_413796
.text:00413792                 add     [esp+97Ch+var_908], eax
.text:00413796
.text:00413796 loc_413796:                             ; CODE XREF: sub_412110+1680↑j
.text:00413796                 mov     edx, [esp+97Ch+var_900]
.text:0041379A                 test    edx, edx
.text:0041379C                 jz      short loc_4137A2
.text:0041379E                 add     [esp+97Ch+var_900], eax
.text:004137A2
.text:004137A2 loc_4137A2:                             ; CODE XREF: sub_412110+168C↑j
.text:004137A2                 mov     ecx, [esp+97Ch+var_8FC]
.text:004137A9                 test    ecx, ecx
.text:004137AB                 jz      short loc_4137B4
.text:004137AD                 add     [esp+97Ch+var_8FC], eax
.text:004137B4
.text:004137B4 loc_4137B4:                             ; CODE XREF: sub_412110+166E↑j
.text:004137B4                                         ; sub_412110+169B↑j
.text:004137B4                 mov     esi, [esp+97Ch+arg_C]
.text:004137BB                 mov     eax, [esp+97Ch+arg_C]
.text:004137C2                 mov     ebp, [esp+97Ch+var_950]
.text:004137C6                 mov     edi, [esi]
.text:004137C8                 mov     edx, [eax+4]
.text:004137CB                 sub     ebp, edi
.text:004137CD                 inc     ebp
.text:004137CE                 mov     ebx, edi
.text:004137D0                 cmp     ebp, edx
.text:004137D2                 ja      loc_413723
.text:004137D8
.text:004137D8 loc_4137D8:                             ; CODE XREF: sub_412110+160D↑j
.text:004137D8                 mov     edi, [esp+97Ch+var_950]
.text:004137DC                 mov     byte ptr [edi], 3
.text:004137DF                 jmp     loc_41253A
.text:004137E4 ; ---------------------------------------------------------------------------
.text:004137E4
.text:004137E4 loc_4137E4:                             ; CODE XREF: sub_412110+16F↑j
.text:004137E4                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:004137E4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0041227F cases 43,63
.text:004137EF                 jz      loc_413170      ; jumptable 0041227F case 42
.text:004137F5                 jmp     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004137FA ; ---------------------------------------------------------------------------
.text:004137FA
.text:004137FA loc_4137FA:                             ; CODE XREF: sub_412110+16F↑j
.text:004137FA                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:004137FA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0041227F case 91
.text:004137FF                 mov     edi, [esp+97Ch+var_8F4]
.text:00413806                 cmp     [esp+97Ch+var_8D0], edi
.text:0041380D                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00413815                 jz      loc_413D6F
.text:0041381B
.text:0041381B loc_41381B:                             ; CODE XREF: sub_412110+1784↓j
.text:0041381B                                         ; sub_412110+17B1↓j ...
.text:0041381B                 mov     ebp, [esp+97Ch+arg_C]
.text:00413822                 mov     ecx, [esp+97Ch+var_950]
.text:00413826                 mov     edi, [ebp+0]
.text:00413829                 mov     edx, [ebp+4]
.text:0041382C                 sub     ecx, edi
.text:0041382E                 lea     ebx, [ecx+22h]
.text:00413831                 cmp     ebx, edx
.text:00413833                 jbe     loc_4138D3
.text:00413839                 cmp     edx, 10000h
.text:0041383F                 mov     ebp, 0Fh
.text:00413844                 jz      loc_412526
.text:0041384A                 lea     ebx, [edx+edx]
.text:0041384D                 mov     edx, [esp+97Ch+arg_C]
.text:00413854                 cmp     ebx, 10000h
.text:0041385A                 mov     [edx+4], ebx
.text:0041385D                 jbe     short loc_413866
.text:0041385F                 mov     dword ptr [edx+4], 10000h
.text:00413866
.text:00413866 loc_413866:                             ; CODE XREF: sub_412110+174D↑j
.text:00413866                 mov     eax, [esp+97Ch+arg_C]
.text:0041386D                 mov     ebp, [eax+4]
.text:00413870                 mov     [esp+97Ch+Size], edi ; Block
.text:00413873                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00413877                 mov     ebp, 0Ch
.text:0041387C                 call    realloc
.text:00413881                 mov     edx, [esp+97Ch+arg_C]
.text:00413888                 test    eax, eax
.text:0041388A                 mov     [edx], eax
.text:0041388C                 jz      loc_412526
.text:00413892                 cmp     edi, eax
.text:00413894                 jz      short loc_41381B
.text:00413896                 mov     ecx, [esp+97Ch+var_908]
.text:0041389A                 sub     eax, edi
.text:0041389C                 add     [esp+97Ch+var_950], eax
.text:004138A0                 add     [esp+97Ch+var_904], eax
.text:004138A4                 test    ecx, ecx
.text:004138A6                 jz      short loc_4138AC
.text:004138A8                 add     [esp+97Ch+var_908], eax
.text:004138AC
.text:004138AC loc_4138AC:                             ; CODE XREF: sub_412110+1796↑j
.text:004138AC                 mov     esi, [esp+97Ch+var_900]
.text:004138B0                 test    esi, esi
.text:004138B2                 jz      short loc_4138B8
.text:004138B4                 add     [esp+97Ch+var_900], eax
.text:004138B8
.text:004138B8 loc_4138B8:                             ; CODE XREF: sub_412110+17A2↑j
.text:004138B8                 mov     edi, [esp+97Ch+var_8FC]
.text:004138BF                 test    edi, edi
.text:004138C1                 jz      loc_41381B
.text:004138C7                 add     [esp+97Ch+var_8FC], eax
.text:004138CE                 jmp     loc_41381B
.text:004138D3 ; ---------------------------------------------------------------------------
.text:004138D3
.text:004138D3 loc_4138D3:                             ; CODE XREF: sub_412110+1723↑j
.text:004138D3                 mov     ebx, [esp+97Ch+var_950]
.text:004138D7                 lea     esi, [ecx+1]
.text:004138DA                 cmp     esi, edx
.text:004138DC                 mov     [esp+97Ch+var_900], ebx
.text:004138E0                 mov     ebx, edi
.text:004138E2                 jbe     loc_41399D
.text:004138E8
.text:004138E8 loc_4138E8:                             ; CODE XREF: sub_412110+1887↓j
.text:004138E8                 cmp     edx, 10000h
.text:004138EE                 mov     ebp, 0Fh
.text:004138F3                 jz      loc_412526
.text:004138F9                 lea     ecx, [edx+edx]
.text:004138FC                 mov     edx, [esp+97Ch+arg_C]
.text:00413903                 cmp     ecx, 10000h
.text:00413909                 mov     [edx+4], ecx
.text:0041390C                 jbe     short loc_413915
.text:0041390E                 mov     dword ptr [edx+4], 10000h
.text:00413915
.text:00413915 loc_413915:                             ; CODE XREF: sub_412110+17FC↑j
.text:00413915                 mov     eax, [esp+97Ch+arg_C]
.text:0041391C                 mov     ebp, [eax+4]
.text:0041391F                 mov     [esp+97Ch+Size], edi ; Block
.text:00413922                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00413926                 mov     ebp, 0Ch
.text:0041392B                 call    realloc
.text:00413930                 mov     edx, [esp+97Ch+arg_C]
.text:00413937                 test    eax, eax
.text:00413939                 mov     [edx], eax
.text:0041393B                 jz      loc_412526
.text:00413941                 cmp     ebx, eax
.text:00413943                 jz      short loc_413979
.text:00413945                 mov     edi, [esp+97Ch+var_908]
.text:00413949                 sub     eax, ebx
.text:0041394B                 add     [esp+97Ch+var_950], eax
.text:0041394F                 add     [esp+97Ch+var_904], eax
.text:00413953                 test    edi, edi
.text:00413955                 jz      short loc_41395B
.text:00413957                 add     [esp+97Ch+var_908], eax
.text:0041395B
.text:0041395B loc_41395B:                             ; CODE XREF: sub_412110+1845↑j
.text:0041395B                 mov     esi, [esp+97Ch+var_900]
.text:0041395F                 test    esi, esi
.text:00413961                 jz      short loc_413967
.text:00413963                 add     [esp+97Ch+var_900], eax
.text:00413967
.text:00413967 loc_413967:                             ; CODE XREF: sub_412110+1851↑j
.text:00413967                 mov     ebx, [esp+97Ch+var_8FC]
.text:0041396E                 test    ebx, ebx
.text:00413970                 jz      short loc_413979
.text:00413972                 add     [esp+97Ch+var_8FC], eax
.text:00413979
.text:00413979 loc_413979:                             ; CODE XREF: sub_412110+1833↑j
.text:00413979                                         ; sub_412110+1860↑j
.text:00413979                 mov     ecx, [esp+97Ch+arg_C]
.text:00413980                 mov     eax, [esp+97Ch+arg_C]
.text:00413987                 mov     ebp, [esp+97Ch+var_950]
.text:0041398B                 mov     edi, [ecx]
.text:0041398D                 mov     edx, [eax+4]
.text:00413990                 sub     ebp, edi
.text:00413992                 inc     ebp
.text:00413993                 mov     ebx, edi
.text:00413995                 cmp     ebp, edx
.text:00413997                 ja      loc_4138E8
.text:0041399D
.text:0041399D loc_41399D:                             ; CODE XREF: sub_412110+17D2↑j
.text:0041399D                 mov     edi, [esp+97Ch+var_950]
.text:004139A1                 mov     bl, 5
.text:004139A3                 mov     edx, [esp+97Ch+var_8D0]
.text:004139AA                 inc     [esp+97Ch+var_950]
.text:004139AE                 cmp     byte ptr [edx], 5Eh ; '^'
.text:004139B1                 setnz   al
.text:004139B4                 sub     bl, al
.text:004139B6                 mov     [edi], bl
.text:004139B8                 mov     edi, [esp+97Ch+var_8D0]
.text:004139BF                 cmp     byte ptr [edi], 5Eh ; '^'
.text:004139C2                 jz      loc_414379
.text:004139C8
.text:004139C8 loc_4139C8:                             ; CODE XREF: sub_412110+2271↓j
.text:004139C8                 mov     [esp+97Ch+var_8F0], edi
.text:004139CF                 mov     esi, [esp+97Ch+arg_C]
.text:004139D6                 mov     ecx, [esp+97Ch+arg_C]
.text:004139DD                 mov     ebp, [esp+97Ch+var_950]
.text:004139E1                 mov     edi, [esi]
.text:004139E3                 mov     edx, [ecx+4]
.text:004139E6                 sub     ebp, edi
.text:004139E8                 mov     ebx, edi
.text:004139EA                 inc     ebp
.text:004139EB                 cmp     ebp, edx
.text:004139ED                 jbe     loc_413AA8
.text:004139F3
.text:004139F3 loc_4139F3:                             ; CODE XREF: sub_412110+1992↓j
.text:004139F3                 cmp     edx, 10000h
.text:004139F9                 mov     ebp, 0Fh
.text:004139FE                 jz      loc_412526
.text:00413A04                 lea     ebp, [edx+edx]
.text:00413A07                 mov     edx, [esp+97Ch+arg_C]
.text:00413A0E                 cmp     ebp, 10000h
.text:00413A14                 mov     [edx+4], ebp
.text:00413A17                 jbe     short loc_413A20
.text:00413A19                 mov     dword ptr [edx+4], 10000h
.text:00413A20
.text:00413A20 loc_413A20:                             ; CODE XREF: sub_412110+1907↑j
.text:00413A20                 mov     eax, [esp+97Ch+arg_C]
.text:00413A27                 mov     ebp, 0Ch
.text:00413A2C                 mov     edx, [eax+4]
.text:00413A2F                 mov     [esp+97Ch+Size], edi ; Block
.text:00413A32                 mov     [esp+97Ch+var_978], edx ; Size
.text:00413A36                 call    realloc
.text:00413A3B                 mov     edi, [esp+97Ch+arg_C]
.text:00413A42                 test    eax, eax
.text:00413A44                 mov     [edi], eax
.text:00413A46                 jz      loc_412526
.text:00413A4C                 cmp     ebx, eax
.text:00413A4E                 jz      short loc_413A84
.text:00413A50                 mov     ecx, [esp+97Ch+var_908]
.text:00413A54                 sub     eax, ebx
.text:00413A56                 add     [esp+97Ch+var_950], eax
.text:00413A5A                 add     [esp+97Ch+var_904], eax
.text:00413A5E                 test    ecx, ecx
.text:00413A60                 jz      short loc_413A66
.text:00413A62                 add     [esp+97Ch+var_908], eax
.text:00413A66
.text:00413A66 loc_413A66:                             ; CODE XREF: sub_412110+1950↑j
.text:00413A66                 mov     ebx, [esp+97Ch+var_900]
.text:00413A6A                 test    ebx, ebx
.text:00413A6C                 jz      short loc_413A72
.text:00413A6E                 add     [esp+97Ch+var_900], eax
.text:00413A72
.text:00413A72 loc_413A72:                             ; CODE XREF: sub_412110+195C↑j
.text:00413A72                 mov     esi, [esp+97Ch+var_8FC]
.text:00413A79                 test    esi, esi
.text:00413A7B                 jz      short loc_413A84
.text:00413A7D                 add     [esp+97Ch+var_8FC], eax
.text:00413A84
.text:00413A84 loc_413A84:                             ; CODE XREF: sub_412110+193E↑j
.text:00413A84                                         ; sub_412110+196B↑j
.text:00413A84                 mov     edx, [esp+97Ch+arg_C]
.text:00413A8B                 mov     eax, [esp+97Ch+arg_C]
.text:00413A92                 mov     ebp, [esp+97Ch+var_950]
.text:00413A96                 mov     edi, [edx]
.text:00413A98                 mov     edx, [eax+4]
.text:00413A9B                 sub     ebp, edi
.text:00413A9D                 inc     ebp
.text:00413A9E                 mov     ebx, edi
.text:00413AA0                 cmp     ebp, edx
.text:00413AA2                 ja      loc_4139F3
.text:00413AA8
.text:00413AA8 loc_413AA8:                             ; CODE XREF: sub_412110+18DD↑j
.text:00413AA8                 cld
.text:00413AA9                 mov     ebx, [esp+97Ch+var_950]
.text:00413AAD                 xor     eax, eax
.text:00413AAF                 mov     ecx, 8
.text:00413AB4                 mov     byte ptr [ebx], 20h ; ' '
.text:00413AB7                 inc     ebx
.text:00413AB8                 mov     edi, ebx
.text:00413ABA                 mov     [esp+97Ch+var_950], ebx
.text:00413ABE                 rep stosd
.text:00413AC0                 cmp     byte ptr [ebx-2], 5
.text:00413AC4                 jz      loc_41435F
.text:00413ACA
.text:00413ACA loc_413ACA:                             ; CODE XREF: sub_412110+1ACD↓j
.text:00413ACA                                         ; sub_412110+1BD8↓j ...
.text:00413ACA                 mov     edx, [esp+97Ch+var_8D0]
.text:00413AD1                 cmp     edx, [esp+97Ch+var_8F4]
.text:00413AD8                 jz      loc_413D6F
.text:00413ADE                 movzx   eax, byte ptr [edx]
.text:00413AE1                 lea     edi, [edx+1]
.text:00413AE4                 mov     ecx, [esp+97Ch+var_8F8]
.text:00413AEB                 mov     [esp+97Ch+var_8D0], edi
.text:00413AF2                 test    ecx, ecx
.text:00413AF4                 mov     [esp+97Ch+var_8EC], al
.text:00413AFB                 jz      short loc_413B12
.text:00413AFD                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413B04                 movzx   esi, al
.text:00413B07                 movzx   ebx, byte ptr [esi+ebp]
.text:00413B0B                 mov     [esp+97Ch+var_8EC], bl
.text:00413B12
.text:00413B12 loc_413B12:                             ; CODE XREF: sub_412110+19EB↑j
.text:00413B12                 test    byte ptr [esp+97Ch+arg_8], 1
.text:00413B1A                 jz      short loc_413B2A
.text:00413B1C                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00413B24                 jz      loc_414308
.text:00413B2A
.text:00413B2A loc_413B2A:                             ; CODE XREF: sub_412110+1A0A↑j
.text:00413B2A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:00413B32                 jz      loc_4142C4
.text:00413B38                 mov     edi, [esp+97Ch+var_8D0]
.text:00413B3F
.text:00413B3F loc_413B3F:                             ; CODE XREF: sub_412110+21C5↓j
.text:00413B3F                 cmp     [esp+97Ch+var_91E], 0
.text:00413B44                 jz      loc_414229
.text:00413B4A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00413B52                 jz      loc_414220
.text:00413B58
.text:00413B58 loc_413B58:                             ; CODE XREF: sub_412110+2121↓j
.text:00413B58                                         ; sub_412110+2137↓j ...
.text:00413B58                 cmp     byte ptr [edi], 2Dh ; '-'
.text:00413B5B                 jz      loc_414190
.text:00413B61
.text:00413B61 loc_413B61:                             ; CODE XREF: sub_412110+2084↓j
.text:00413B61                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413B69                 jz      short loc_413B79
.text:00413B6B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00413B73                 jz      loc_413EF6
.text:00413B79
.text:00413B79 loc_413B79:                             ; CODE XREF: sub_412110+1A59↑j
.text:00413B79                                         ; sub_412110+1DE9↓j
.text:00413B79                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413B81                 jz      short loc_413B91
.text:00413B83                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00413B8B                 jz      loc_413D83
.text:00413B91
.text:00413B91 loc_413B91:                             ; CODE XREF: sub_412110+1A71↑j
.text:00413B91                                         ; sub_412110+1C76↓j
.text:00413B91                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413B99                 jz      short loc_413BA5
.text:00413B9B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00413BA3                 jz      short loc_413BE2
.text:00413BA5
.text:00413BA5 loc_413BA5:                             ; CODE XREF: sub_412110+1A89↑j
.text:00413BA5                                         ; sub_412110+1AD5↓j
.text:00413BA5                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00413BAD                 mov     edx, 1
.text:00413BB2                 mov     [esp+97Ch+var_91E], 0
.text:00413BB7                 mov     esi, [esp+97Ch+var_950]
.text:00413BBB                 shr     cl, 3
.text:00413BBE                 movzx   edi, cl
.text:00413BC1                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00413BC9                 and     ecx, 7
.text:00413BCC                 shl     edx, cl
.text:00413BCE                 or      [edi+esi], dl
.text:00413BD1                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00413BD9
.text:00413BD9 loc_413BD9:                             ; CODE XREF: sub_412110+224A↓j
.text:00413BD9                 mov     [esp+97Ch+var_924], ebx
.text:00413BDD                 jmp     loc_413ACA
.text:00413BE2 ; ---------------------------------------------------------------------------
.text:00413BE2
.text:00413BE2 loc_413BE2:                             ; CODE XREF: sub_412110+1A93↑j
.text:00413BE2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:00413BE5                 jnz     short loc_413BA5
.text:00413BE7                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413BEE                 mov     ebp, 0Eh
.text:00413BF3                 jz      loc_412526
.text:00413BF9                 inc     edi
.text:00413BFA                 xor     ebx, ebx
.text:00413BFC                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413C03                 mov     [esp+97Ch+var_8D0], edi
.text:00413C0A                 jz      loc_413D6F
.text:00413C10
.text:00413C10 loc_413C10:                             ; CODE XREF: sub_412110+1B75↓j
.text:00413C10                 movzx   eax, byte ptr [edi]
.text:00413C13                 inc     edi
.text:00413C14                 mov     esi, [esp+97Ch+var_8F8]
.text:00413C1B                 mov     [esp+97Ch+var_8D0], edi
.text:00413C22                 test    esi, esi
.text:00413C24                 mov     [esp+97Ch+var_8EC], al
.text:00413C2B                 jz      short loc_413C43
.text:00413C2D                 mov     esi, [esp+97Ch+var_8F8]
.text:00413C34                 movzx   ebp, al
.text:00413C37                 movzx   ecx, byte ptr [ebp+esi+0]
.text:00413C3C                 mov     [esp+97Ch+var_8EC], cl
.text:00413C43
.text:00413C43 loc_413C43:                             ; CODE XREF: sub_412110+1B1B↑j
.text:00413C43                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00413C4B                 jz      loc_413D61
.text:00413C51
.text:00413C51 loc_413C51:                             ; CODE XREF: sub_412110+1C54↓j
.text:00413C51                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413C58                 jz      short loc_413C9A
.text:00413C5A                 test    bl, bl
.text:00413C5C                 js      short loc_413C90
.text:00413C5E                 movzx   eax, [esp+97Ch+var_8EC]
.text:00413C66                 movzx   edx, bl
.text:00413C69                 inc     bl
.text:00413C6B                 mov     [esp+edx+97Ch+var_8CC], al
.text:00413C72                 mov     edi, [esp+97Ch+var_8D0]
.text:00413C79
.text:00413C79 loc_413C79:                             ; CODE XREF: sub_412110+1B88↓j
.text:00413C79                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413C80                 mov     ebp, 0Eh
.text:00413C85                 jnz     short loc_413C10
.text:00413C87                 jmp     loc_412526
.text:00413C87 ; ---------------------------------------------------------------------------
.text:00413C8C                 align 10h
.text:00413C90
.text:00413C90 loc_413C90:                             ; CODE XREF: sub_412110+1B4C↑j
.text:00413C90                 mov     [esp+97Ch+var_8CC], 0
.text:00413C98                 jmp     short loc_413C79
.text:00413C9A ; ---------------------------------------------------------------------------
.text:00413C9A
.text:00413C9A loc_413C9A:                             ; CODE XREF: sub_412110+1B48↑j
.text:00413C9A                                         ; sub_412110+1C5A↓j
.text:00413C9A                 xor     ecx, ecx
.text:00413C9C                 movzx   edi, bl
.text:00413C9F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:00413CA6                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00413CAE                 jz      short loc_413CED
.text:00413CB0
.text:00413CB0 loc_413CB0:                             ; CODE XREF: sub_412110+1BE7↓j
.text:00413CB0                                         ; sub_412110+1BF3↓j
.text:00413CB0                 cmp     bl, 0FFh
.text:00413CB3                 jz      short loc_413CCF
.text:00413CB5                 mov     eax, [esp+97Ch+var_8D0]
.text:00413CBC
.text:00413CBC loc_413CBC:                             ; CODE XREF: sub_412110+1BB6↓j
.text:00413CBC                 dec     bl
.text:00413CBE                 lea     edi, [eax-1]
.text:00413CC1                 cmp     bl, 0FFh
.text:00413CC4                 mov     eax, edi
.text:00413CC6                 jnz     short loc_413CBC
.text:00413CC8                 mov     [esp+97Ch+var_8D0], edi
.text:00413CCF
.text:00413CCF loc_413CCF:                             ; CODE XREF: sub_412110+1BA3↑j
.text:00413CCF                 mov     eax, [esp+97Ch+var_950]
.text:00413CD3                 or      byte ptr [eax+0Bh], 8
.text:00413CD7                 or      byte ptr [eax+5], 40h
.text:00413CDB                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:00413CE3
.text:00413CE3 loc_413CE3:                             ; CODE XREF: sub_412110+1C3B↓j
.text:00413CE3                                         ; sub_412110+1D73↓j ...
.text:00413CE3                 mov     [esp+97Ch+var_91E], 0
.text:00413CE8                 jmp     loc_413ACA
.text:00413CED ; ---------------------------------------------------------------------------
.text:00413CED
.text:00413CED loc_413CED:                             ; CODE XREF: sub_412110+1B9E↑j
.text:00413CED                 mov     eax, [esp+97Ch+var_8D0]
.text:00413CF4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00413CF7                 jnz     short loc_413CB0
.text:00413CF9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:00413D01                 test    cl, cl
.text:00413D03                 jz      short loc_413CB0
.text:00413D05                 dec     bl
.text:00413D07                 jnz     short loc_413D4D
.text:00413D09                 cmp     eax, [esp+97Ch+var_8F4]
.text:00413D10                 mov     ebp, 0Eh
.text:00413D15                 jz      loc_412526
.text:00413D1B                 mov     bl, cl
.text:00413D1D                 mov     esi, [esp+97Ch+var_950]
.text:00413D21                 lea     ebp, [eax+1]
.text:00413D24                 mov     [esp+97Ch+var_8D0], ebp
.text:00413D2B                 shr     bl, 3
.text:00413D2E                 and     ecx, 7
.text:00413D31                 mov     edx, 1
.text:00413D36                 movzx   ebp, bl
.text:00413D39                 shl     edx, cl
.text:00413D3B                 or      [ebp+esi+0], dl
.text:00413D3F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:00413D47                 mov     [esp+97Ch+var_924], ebx
.text:00413D4B                 jmp     short loc_413CE3
.text:00413D4D ; ---------------------------------------------------------------------------
.text:00413D4D
.text:00413D4D loc_413D4D:                             ; CODE XREF: sub_412110+1BF7↑j
.text:00413D4D                                         ; sub_412110+1D92↓j
.text:00413D4D                 mov     edx, [esp+97Ch+Block]
.text:00413D54                 mov     ebp, 3
.text:00413D59                 mov     [esp+97Ch+Size], edx
.text:00413D5C                 jmp     loc_4126B3
.text:00413D61 ; ---------------------------------------------------------------------------
.text:00413D61
.text:00413D61 loc_413D61:                             ; CODE XREF: sub_412110+1B3B↑j
.text:00413D61                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00413D64                 jnz     loc_413C51
.text:00413D6A                 jmp     loc_413C9A
.text:00413D6F ; ---------------------------------------------------------------------------
.text:00413D6F
.text:00413D6F loc_413D6F:                             ; CODE XREF: sub_412110+1705↑j
.text:00413D6F                                         ; sub_412110+19C8↑j ...
.text:00413D6F                 mov     ebp, [esp+97Ch+Block]
.text:00413D76                 mov     [esp+97Ch+Size], ebp
.text:00413D79                 mov     ebp, 7
.text:00413D7E                 jmp     loc_4126B3
.text:00413D83 ; ---------------------------------------------------------------------------
.text:00413D83
.text:00413D83 loc_413D83:                             ; CODE XREF: sub_412110+1A7B↑j
.text:00413D83                 cmp     byte ptr [edi], 3Dh ; '='
.text:00413D86                 jnz     loc_413B91
.text:00413D8C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413D93                 mov     ebp, 0Eh
.text:00413D98                 jz      loc_412526
.text:00413D9E                 inc     edi
.text:00413D9F                 xor     ebx, ebx
.text:00413DA1                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413DA8                 mov     [esp+97Ch+var_8D0], edi
.text:00413DAF                 jz      short loc_413D6F
.text:00413DB1
.text:00413DB1 loc_413DB1:                             ; CODE XREF: sub_412110+1D17↓j
.text:00413DB1                 movzx   eax, byte ptr [edi]
.text:00413DB4                 inc     edi
.text:00413DB5                 mov     esi, [esp+97Ch+var_8F8]
.text:00413DBC                 mov     [esp+97Ch+var_8D0], edi
.text:00413DC3                 test    esi, esi
.text:00413DC5                 mov     [esp+97Ch+var_8EC], al
.text:00413DCC                 jz      short loc_413DE4
.text:00413DCE                 mov     esi, [esp+97Ch+var_8F8]
.text:00413DD5                 movzx   ebp, al
.text:00413DD8                 movzx   ecx, byte ptr [ebp+esi+0]
.text:00413DDD                 mov     [esp+97Ch+var_8EC], cl
.text:00413DE4
.text:00413DE4 loc_413DE4:                             ; CODE XREF: sub_412110+1CBC↑j
.text:00413DE4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00413DEC                 jz      loc_413EE8
.text:00413DF2
.text:00413DF2 loc_413DF2:                             ; CODE XREF: sub_412110+1DDB↓j
.text:00413DF2                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413DF9                 jz      short loc_413E3A
.text:00413DFB                 cmp     bl, 1
.text:00413DFE                 ja      short loc_413E30
.text:00413E00                 movzx   edx, [esp+97Ch+var_8EC]
.text:00413E08                 movzx   edi, bl
.text:00413E0B                 inc     bl
.text:00413E0D                 mov     [esp+edi+97Ch+var_84C], dl
.text:00413E14                 mov     edi, [esp+97Ch+var_8D0]
.text:00413E1B
.text:00413E1B loc_413E1B:                             ; CODE XREF: sub_412110+1D28↓j
.text:00413E1B                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413E22                 mov     ebp, 0Eh
.text:00413E27                 jnz     short loc_413DB1
.text:00413E29                 jmp     loc_412526
.text:00413E29 ; ---------------------------------------------------------------------------
.text:00413E2E                 align 10h
.text:00413E30
.text:00413E30 loc_413E30:                             ; CODE XREF: sub_412110+1CEE↑j
.text:00413E30                 mov     [esp+97Ch+var_84C], 0
.text:00413E38                 jmp     short loc_413E1B
.text:00413E3A ; ---------------------------------------------------------------------------
.text:00413E3A
.text:00413E3A loc_413E3A:                             ; CODE XREF: sub_412110+1CE9↑j
.text:00413E3A                                         ; sub_412110+1DE1↓j
.text:00413E3A                 xor     eax, eax
.text:00413E3C                 movzx   ecx, bl
.text:00413E3F                 mov     [esp+ecx+97Ch+var_84C], al
.text:00413E46                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00413E4E                 jz      short loc_413E88
.text:00413E50
.text:00413E50 loc_413E50:                             ; CODE XREF: sub_412110+1D82↓j
.text:00413E50                                         ; sub_412110+1D8E↓j
.text:00413E50                 cmp     bl, 0FFh
.text:00413E53                 jz      short loc_413E6F
.text:00413E55                 mov     eax, [esp+97Ch+var_8D0]
.text:00413E5C
.text:00413E5C loc_413E5C:                             ; CODE XREF: sub_412110+1D56↓j
.text:00413E5C                 dec     bl
.text:00413E5E                 lea     edi, [eax-1]
.text:00413E61                 cmp     bl, 0FFh
.text:00413E64                 mov     eax, edi
.text:00413E66                 jnz     short loc_413E5C
.text:00413E68                 mov     [esp+97Ch+var_8D0], edi
.text:00413E6F
.text:00413E6F loc_413E6F:                             ; CODE XREF: sub_412110+1D43↑j
.text:00413E6F                 mov     edi, [esp+97Ch+var_950]
.text:00413E73                 or      byte ptr [edi+0Bh], 8
.text:00413E77                 or      byte ptr [edi+7], 20h
.text:00413E7B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:00413E83                 jmp     loc_413CE3
.text:00413E88 ; ---------------------------------------------------------------------------
.text:00413E88
.text:00413E88 loc_413E88:                             ; CODE XREF: sub_412110+1D3E↑j
.text:00413E88                 mov     eax, [esp+97Ch+var_8D0]
.text:00413E8F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00413E92                 jnz     short loc_413E50
.text:00413E94                 movzx   ecx, [esp+97Ch+var_84C]
.text:00413E9C                 test    cl, cl
.text:00413E9E                 jz      short loc_413E50
.text:00413EA0                 dec     bl
.text:00413EA2                 jnz     loc_413D4D
.text:00413EA8                 cmp     eax, [esp+97Ch+var_8F4]
.text:00413EAF                 mov     ebp, 0Eh
.text:00413EB4                 jz      loc_412526
.text:00413EBA                 mov     dl, cl
.text:00413EBC                 mov     esi, [esp+97Ch+var_950]
.text:00413EC0                 lea     ebp, [eax+1]
.text:00413EC3                 mov     [esp+97Ch+var_8D0], ebp
.text:00413ECA                 shr     dl, 3
.text:00413ECD                 and     ecx, 7
.text:00413ED0                 mov     ebx, 1
.text:00413ED5                 movzx   ebp, dl
.text:00413ED8                 shl     ebx, cl
.text:00413EDA                 or      [ebp+esi+0], bl
.text:00413EDE                 mov     [esp+97Ch+var_91E], 1
.text:00413EE3                 jmp     loc_413ACA
.text:00413EE8 ; ---------------------------------------------------------------------------
.text:00413EE8
.text:00413EE8 loc_413EE8:                             ; CODE XREF: sub_412110+1CDC↑j
.text:00413EE8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00413EEB                 jnz     loc_413DF2
.text:00413EF1                 jmp     loc_413E3A
.text:00413EF6 ; ---------------------------------------------------------------------------
.text:00413EF6
.text:00413EF6 loc_413EF6:                             ; CODE XREF: sub_412110+1A63↑j
.text:00413EF6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00413EF9                 jnz     loc_413B79
.text:00413EFF                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413F06                 mov     ebp, 0Eh
.text:00413F0B                 jz      loc_412526
.text:00413F11                 inc     edi
.text:00413F12                 xor     ebx, ebx
.text:00413F14                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413F1B                 mov     [esp+97Ch+var_8D0], edi
.text:00413F22                 jz      loc_413D6F
.text:00413F28
.text:00413F28 loc_413F28:                             ; CODE XREF: sub_412110+1E89↓j
.text:00413F28                 movzx   ecx, byte ptr [edi]
.text:00413F2B                 inc     edi
.text:00413F2C                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413F33                 mov     [esp+97Ch+var_8D0], edi
.text:00413F3A                 test    ebp, ebp
.text:00413F3C                 mov     [esp+97Ch+var_8EC], cl
.text:00413F43                 jz      short loc_413F5B
.text:00413F45                 movzx   ebp, cl
.text:00413F48                 mov     ecx, [esp+97Ch+var_8F8]
.text:00413F4F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:00413F54                 mov     [esp+97Ch+var_8EC], dl
.text:00413F5B
.text:00413F5B loc_413F5B:                             ; CODE XREF: sub_412110+1E33↑j
.text:00413F5B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00413F63                 jz      loc_414180
.text:00413F69
.text:00413F69 loc_413F69:                             ; CODE XREF: sub_412110+2073↓j
.text:00413F69                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413F70                 jz      short loc_413FA0
.text:00413F72                 movzx   eax, [esp+97Ch+var_8EC]
.text:00413F7A                 movzx   esi, bl
.text:00413F7D                 inc     bl
.text:00413F7F                 mov     ebp, 0Eh
.text:00413F84                 mov     [esp+esi+97Ch+name], al
.text:00413F8B                 mov     edi, [esp+97Ch+var_8D0]
.text:00413F92                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413F99                 jnz     short loc_413F28
.text:00413F9B                 jmp     loc_412526
.text:00413FA0 ; ---------------------------------------------------------------------------
.text:00413FA0
.text:00413FA0 loc_413FA0:                             ; CODE XREF: sub_412110+1E60↑j
.text:00413FA0                                         ; sub_412110+2079↓j
.text:00413FA0                 xor     eax, eax
.text:00413FA2                 movzx   edi, bl
.text:00413FA5                 mov     [esp+edi+97Ch+name], al
.text:00413FAC                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00413FB4                 jz      short loc_413FEE
.text:00413FB6
.text:00413FB6 loc_413FB6:                             ; CODE XREF: sub_412110+1EE8↓j
.text:00413FB6                 cmp     bl, 0FFh
.text:00413FB9                 jz      short loc_413FD5
.text:00413FBB                 mov     eax, [esp+97Ch+var_8D0]
.text:00413FC2
.text:00413FC2 loc_413FC2:                             ; CODE XREF: sub_412110+1EBC↓j
.text:00413FC2                 dec     bl
.text:00413FC4                 lea     edi, [eax-1]
.text:00413FC7                 cmp     bl, 0FFh
.text:00413FCA                 mov     eax, edi
.text:00413FCC                 jnz     short loc_413FC2
.text:00413FCE                 mov     [esp+97Ch+var_8D0], edi
.text:00413FD5
.text:00413FD5 loc_413FD5:                             ; CODE XREF: sub_412110+1EA9↑j
.text:00413FD5                 mov     eax, [esp+97Ch+var_950]
.text:00413FD9                 or      byte ptr [eax+0Bh], 8
.text:00413FDD                 or      byte ptr [eax+7], 4
.text:00413FE1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:00413FE9                 jmp     loc_413CE3
.text:00413FEE ; ---------------------------------------------------------------------------
.text:00413FEE
.text:00413FEE loc_413FEE:                             ; CODE XREF: sub_412110+1EA4↑j
.text:00413FEE                 mov     esi, [esp+97Ch+var_8D0]
.text:00413FF5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:00413FF8                 jnz     short loc_413FB6
.text:00413FFA                 cld
.text:00413FFB                 mov     edi, offset aLower ; "lower"
.text:00414000                 lea     ebx, [esp+97Ch+name]
.text:00414007                 mov     esi, ebx
.text:00414009                 mov     ecx, 6
.text:0041400E                 lea     ebp, [esp+97Ch+name]
.text:00414015                 repe cmpsb
.text:00414017                 setz    [esp+97Ch+var_925]
.text:0041401C                 mov     ecx, 6
.text:00414021                 mov     edi, offset aUpper ; "upper"
.text:00414026                 mov     esi, ebp
.text:00414028                 lea     edx, [esp+97Ch+name]
.text:0041402F                 repe cmpsb
.text:00414031                 setz    [esp+97Ch+var_926]
.text:00414036                 mov     [esp+97Ch+Size], edx ; name
.text:00414039                 call    wctype
.text:0041403E                 movzx   ebx, ax
.text:00414041                 test    bx, bx
.text:00414044                 mov     dword ptr [esp+97Ch+Type], ebx
.text:00414048                 jz      loc_41416C
.text:0041404E                 mov     eax, [esp+97Ch+var_8D0]
.text:00414055                 mov     ebp, 0Eh
.text:0041405A                 cmp     eax, [esp+97Ch+var_8F4]
.text:00414061                 jz      loc_412526
.text:00414067                 lea     ecx, [eax+1]
.text:0041406A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:00414071                 mov     [esp+97Ch+var_8D0], ecx
.text:00414078                 jz      loc_413D6F
.text:0041407E                 xor     edi, edi
.text:00414080
.text:00414080 loc_414080:                             ; CODE XREF: sub_412110+202E↓j
.text:00414080                 mov     [esp+97Ch+Size], edi ; Ch
.text:00414083                 call    btowc
.text:00414088                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0041408C                 movzx   esi, ax
.text:0041408F                 mov     [esp+97Ch+Size], esi ; C
.text:00414092                 mov     [esp+97Ch+var_978], ebp ; Type
.text:00414096                 call    iswctype
.text:0041409B                 test    eax, eax
.text:0041409D                 jz      short loc_4140BC
.text:0041409F                 mov     ecx, edi
.text:004140A1                 mov     ebx, edi
.text:004140A3                 mov     edx, [esp+97Ch+var_950]
.text:004140A7                 shr     cl, 3
.text:004140AA                 movzx   esi, cl
.text:004140AD                 mov     ecx, ebx
.text:004140AF                 and     ecx, 7
.text:004140B2                 mov     ebx, 1
.text:004140B7                 shl     ebx, cl
.text:004140B9                 or      [esi+edx], bl
.text:004140BC
.text:004140BC loc_4140BC:                             ; CODE XREF: sub_412110+1F8D↑j
.text:004140BC                 mov     eax, [esp+97Ch+var_8F8]
.text:004140C3                 test    eax, eax
.text:004140C5                 jz      short loc_414132
.text:004140C7                 cmp     [esp+97Ch+var_926], 0
.text:004140CC                 jnz     short loc_4140D5
.text:004140CE                 cmp     [esp+97Ch+var_925], 0
.text:004140D3                 jz      short loc_414132
.text:004140D5
.text:004140D5 loc_4140D5:                             ; CODE XREF: sub_412110+1FBC↑j
.text:004140D5                 mov     ebp, ds:__mb_cur_max
.text:004140DB                 cmp     dword ptr [ebp+0], 1
.text:004140DF                 jz      short loc_41415B
.text:004140E1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:004140E9                 mov     [esp+97Ch+Size], edi ; C
.text:004140EC                 call    _isctype
.text:004140F1
.text:004140F1 loc_4140F1:                             ; CODE XREF: sub_412110+205A↓j
.text:004140F1                 test    eax, eax
.text:004140F3                 jnz     short loc_414114
.text:004140F5                 mov     ebx, ds:__mb_cur_max
.text:004140FB                 cmp     dword ptr [ebx], 1
.text:004140FE                 jz      short loc_414149
.text:00414100                 mov     [esp+97Ch+var_978], 2 ; Type
.text:00414108                 mov     [esp+97Ch+Size], edi ; C
.text:0041410B                 call    _isctype
.text:00414110
.text:00414110 loc_414110:                             ; CODE XREF: sub_412110+2049↓j
.text:00414110                 test    eax, eax
.text:00414112                 jz      short loc_414132
.text:00414114
.text:00414114 loc_414114:                             ; CODE XREF: sub_412110+1FE3↑j
.text:00414114                 mov     ecx, edi
.text:00414116                 mov     ebx, edi
.text:00414118                 mov     edx, [esp+97Ch+var_950]
.text:0041411C                 shr     cl, 3
.text:0041411F                 movzx   ebp, cl
.text:00414122                 mov     ecx, ebx
.text:00414124                 and     ecx, 7
.text:00414127                 mov     ebx, 1
.text:0041412C                 shl     ebx, cl
.text:0041412E                 or      [ebp+edx+0], bl
.text:00414132
.text:00414132 loc_414132:                             ; CODE XREF: sub_412110+1FB5↑j
.text:00414132                                         ; sub_412110+1FC3↑j ...
.text:00414132                 mov     [esp+97Ch+var_91E], 1
.text:00414137                 inc     edi
.text:00414138                 cmp     edi, 0FFh
.text:0041413E                 jle     loc_414080
.text:00414144                 jmp     loc_413ACA
.text:00414149 ; ---------------------------------------------------------------------------
.text:00414149
.text:00414149 loc_414149:                             ; CODE XREF: sub_412110+1FEE↑j
.text:00414149                 mov     ebp, ds:_pctype
.text:0041414F                 mov     ecx, [ebp+0]
.text:00414152                 movzx   eax, word ptr [ecx+edi*2]
.text:00414156                 and     eax, 2
.text:00414159                 jmp     short loc_414110
.text:0041415B ; ---------------------------------------------------------------------------
.text:0041415B
.text:0041415B loc_41415B:                             ; CODE XREF: sub_412110+1FCF↑j
.text:0041415B                 mov     edx, ds:_pctype
.text:00414161                 mov     esi, [edx]
.text:00414163                 movzx   eax, word ptr [esi+edi*2]
.text:00414167                 and     eax, 1
.text:0041416A                 jmp     short loc_4140F1
.text:0041416C ; ---------------------------------------------------------------------------
.text:0041416C
.text:0041416C loc_41416C:                             ; CODE XREF: sub_412110+1F38↑j
.text:0041416C                 mov     ebx, [esp+97Ch+Block]
.text:00414173                 mov     ebp, 4
.text:00414178
.text:00414178 loc_414178:                             ; CODE XREF: sub_412110+26A5↓j
.text:00414178                 mov     [esp+97Ch+Size], ebx
.text:0041417B                 jmp     loc_4126B3
.text:00414180 ; ---------------------------------------------------------------------------
.text:00414180
.text:00414180 loc_414180:                             ; CODE XREF: sub_412110+1E53↑j
.text:00414180                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00414183                 jnz     loc_413F69
.text:00414189                 jmp     loc_413FA0
.text:00414189 ; ---------------------------------------------------------------------------
.text:0041418E                 align 10h
.text:00414190
.text:00414190 loc_414190:                             ; CODE XREF: sub_412110+1A4B↑j
.text:00414190                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:00414194                 jz      loc_413B61
.text:0041419A                 cmp     edi, [esp+97Ch+var_8F4]
.text:004141A1                 mov     ebp, 0Eh
.text:004141A6                 jz      loc_412526
.text:004141AC                 movzx   ebp, [esp+97Ch+var_8EC]
.text:004141B4                 inc     edi
.text:004141B5                 mov     ecx, [esp+97Ch+var_950]
.text:004141B9                 mov     [esp+97Ch+var_8D0], edi
.text:004141C0                 mov     edx, [esp+97Ch+arg_8]
.text:004141C7                 lea     edi, [esp+97Ch+var_8D0]
.text:004141CE                 mov     [esp+97Ch+var_978], edi
.text:004141D2                 mov     ebx, [esp+97Ch+var_8F8]
.text:004141D9                 mov     eax, [esp+97Ch+var_8F4]
.text:004141E0                 mov     [esp+97Ch+var_968], ecx
.text:004141E4                 mov     [esp+97Ch+var_96C], edx
.text:004141E8                 mov     [esp+97Ch+var_970], ebx
.text:004141EC                 mov     [esp+97Ch+var_974], eax
.text:004141F0                 mov     [esp+97Ch+Size], ebp
.text:004141F3
.text:004141F3 loc_4141F3:                             ; CODE XREF: sub_412110+2193↓j
.text:004141F3                 call    sub_40F0A0
.text:004141F8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00414200                 test    eax, eax
.text:00414202                 mov     ebx, eax
.text:00414204                 jz      loc_413ACA
.text:0041420A                 mov     esi, [esp+97Ch+Block]
.text:00414211                 mov     ebp, ebx
.text:00414213
.text:00414213 loc_414213:                             ; CODE XREF: sub_412110+318E↓j
.text:00414213                 mov     [esp+97Ch+Size], esi
.text:00414216                 jmp     loc_4126B3
.text:00414216 ; ---------------------------------------------------------------------------
.text:0041421B                 align 10h
.text:00414220
.text:00414220 loc_414220:                             ; CODE XREF: sub_412110+1A42↑j
.text:00414220                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00414223                 jnz     loc_4142B3
.text:00414229
.text:00414229 loc_414229:                             ; CODE XREF: sub_412110+1A34↑j
.text:00414229                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00414231                 jnz     loc_413B58
.text:00414237                 lea     esi, [edi-2]
.text:0041423A                 cmp     esi, [esp+97Ch+arg_0]
.text:00414241                 jb      short loc_41424D
.text:00414243                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:00414247                 jz      loc_413B58
.text:0041424D
.text:0041424D loc_41424D:                             ; CODE XREF: sub_412110+2131↑j
.text:0041424D                 lea     ebp, [edi-3]
.text:00414250                 cmp     ebp, [esp+97Ch+arg_0]
.text:00414257                 jb      short loc_41425F
.text:00414259                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0041425D                 jz      short loc_4142A8
.text:0041425F
.text:0041425F loc_41425F:                             ; CODE XREF: sub_412110+2147↑j
.text:0041425F                                         ; sub_412110+219C↓j
.text:0041425F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00414262                 jz      loc_413B58
.text:00414268                 mov     esi, [esp+97Ch+var_950]
.text:0041426C                 lea     edi, [esp+97Ch+var_8D0]
.text:00414273                 mov     ecx, [esp+97Ch+arg_8]
.text:0041427A                 mov     [esp+97Ch+var_978], edi
.text:0041427E                 mov     ebx, [esp+97Ch+var_8F8]
.text:00414285                 mov     edx, [esp+97Ch+var_8F4]
.text:0041428C                 mov     [esp+97Ch+var_968], esi
.text:00414290                 mov     eax, [esp+97Ch+var_924]
.text:00414294                 mov     [esp+97Ch+var_96C], ecx
.text:00414298                 mov     [esp+97Ch+var_970], ebx
.text:0041429C                 mov     [esp+97Ch+var_974], edx
.text:004142A0                 mov     [esp+97Ch+Size], eax
.text:004142A3                 jmp     loc_4141F3
.text:004142A8 ; ---------------------------------------------------------------------------
.text:004142A8
.text:004142A8 loc_4142A8:                             ; CODE XREF: sub_412110+214D↑j
.text:004142A8                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:004142AC                 jnz     short loc_41425F
.text:004142AE                 jmp     loc_413B58
.text:004142B3 ; ---------------------------------------------------------------------------
.text:004142B3
.text:004142B3 loc_4142B3:                             ; CODE XREF: sub_412110+2113↑j
.text:004142B3                 mov     ecx, [esp+97Ch+Block]
.text:004142BA                 mov     ebp, 0Bh
.text:004142BF                 jmp     loc_412FEC
.text:004142C4 ; ---------------------------------------------------------------------------
.text:004142C4
.text:004142C4 loc_4142C4:                             ; CODE XREF: sub_412110+1A22↑j
.text:004142C4                 mov     ebx, [esp+97Ch+var_8F0]
.text:004142CB                 mov     edi, [esp+97Ch+var_8D0]
.text:004142D2                 inc     ebx
.text:004142D3                 cmp     edi, ebx
.text:004142D5                 jz      loc_413B3F
.text:004142DB
.text:004142DB loc_4142DB:                             ; CODE XREF: sub_412110+21EA↓j
.text:004142DB                 mov     edi, [esp+97Ch+var_950]
.text:004142DF                 movzx   edx, byte ptr [edi-1]
.text:004142E3                 test    dl, dl
.text:004142E5                 jz      short loc_4142FC
.text:004142E7                 movzx   ebp, dl
.text:004142EA                 cmp     byte ptr [ebp+edi-1], 0
.text:004142EF                 jnz     short loc_4142FC
.text:004142F1                 mov     ebx, [esp+97Ch+var_950]
.text:004142F5                 dec     dl
.text:004142F7                 mov     [ebx-1], dl
.text:004142FA                 jmp     short loc_4142DB
.text:004142FC ; ---------------------------------------------------------------------------
.text:004142FC
.text:004142FC loc_4142FC:                             ; CODE XREF: sub_412110+21D5↑j
.text:004142FC                                         ; sub_412110+21DF↑j
.text:004142FC                 movzx   edi, dl
.text:004142FF                 add     [esp+97Ch+var_950], edi
.text:00414303                 jmp     loc_41253F
.text:00414308 ; ---------------------------------------------------------------------------
.text:00414308
.text:00414308 loc_414308:                             ; CODE XREF: sub_412110+1A14↑j
.text:00414308                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041430F                 jz      loc_4136C0
.text:00414315                 movzx   ebx, byte ptr [edx+1]
.text:00414319                 lea     ecx, [edx+2]
.text:0041431C                 mov     eax, [esp+97Ch+var_8F8]
.text:00414323                 mov     [esp+97Ch+var_8D0], ecx
.text:0041432A                 test    eax, eax
.text:0041432C                 jz      short loc_41433C
.text:0041432E                 mov     edx, [esp+97Ch+var_8F8]
.text:00414335                 movzx   edi, bl
.text:00414338                 movzx   ebx, byte ptr [edi+edx]
.text:0041433C
.text:0041433C loc_41433C:                             ; CODE XREF: sub_412110+221C↑j
.text:0041433C                 mov     cl, bl
.text:0041433E                 mov     ebp, [esp+97Ch+var_950]
.text:00414342                 mov     edx, 1
.text:00414347                 shr     cl, 3
.text:0041434A                 movzx   esi, cl
.text:0041434D                 mov     ecx, ebx
.text:0041434F                 and     ecx, 7
.text:00414352                 movzx   ebx, bl
.text:00414355                 shl     edx, cl
.text:00414357                 or      [esi+ebp], dl
.text:0041435A                 jmp     loc_413BD9
.text:0041435F ; ---------------------------------------------------------------------------
.text:0041435F
.text:0041435F loc_41435F:                             ; CODE XREF: sub_412110+19B4↑j
.text:0041435F                 test    [esp+97Ch+arg_8], 100h
.text:0041436A                 jz      loc_413ACA
.text:00414370                 or      byte ptr [ebx+1], 4
.text:00414374                 jmp     loc_413ACA
.text:00414379 ; ---------------------------------------------------------------------------
.text:00414379
.text:00414379 loc_414379:                             ; CODE XREF: sub_412110+18B2↑j
.text:00414379                 inc     edi
.text:0041437A                 mov     [esp+97Ch+var_8D0], edi
.text:00414381                 jmp     loc_4139C8
.text:00414386 ; ---------------------------------------------------------------------------
.text:00414386
.text:00414386 loc_414386:                             ; CODE XREF: sub_412110+16F↑j
.text:00414386                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00414386                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0041227F case 92
.text:0041438D                 cmp     eax, [esp+97Ch+var_8F4]
.text:00414394                 jz      loc_4136C0
.text:0041439A                 movzx   ecx, byte ptr [eax]
.text:0041439D                 lea     ebx, [eax+1]
.text:004143A0                 mov     [esp+97Ch+var_8D0], ebx
.text:004143A7                 movzx   eax, cl
.text:004143AA                 sub     eax, 27h ; '''  ; switch 86 cases
.text:004143AD                 mov     [esp+97Ch+var_8EC], cl
.text:004143B4                 cmp     eax, 55h
.text:004143B7                 ja      def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004143BD                 jmp     ds:jpt_4143BD[eax*4] ; switch jump
.text:004143BD ; ---------------------------------------------------------------------------
.text:004143C4 jpt_4143BD      dd offset loc_41455B, offset loc_41451C, offset loc_41462D
.text:004143C4                                         ; DATA XREF: sub_412110+22AD↑r
.text:004143C4                 dd offset def_4143BD, offset loc_41495E, offset def_4143BD ; jump table for switch statement
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset loc_414663, offset loc_414663
.text:004143C4                 dd offset loc_414663, offset loc_414663, offset loc_414663
.text:004143C4                 dd offset loc_414663, offset loc_414663, offset loc_414663
.text:004143C4                 dd offset loc_414663, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset loc_4147BA, offset def_4143BD, offset loc_41488C
.text:004143C4                 dd offset loc_41495E, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset loc_414971, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset loc_414A43, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset loc_414B36, offset def_4143BD, offset loc_414C08
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset loc_414CDA
.text:004143C4                 dd offset def_4143BD, offset def_4143BD, offset def_4143BD
.text:004143C4                 dd offset loc_414DCF, offset loc_415379
.text:0041451C ; ---------------------------------------------------------------------------
.text:0041451C
.text:0041451C loc_41451C:                             ; CODE XREF: sub_412110+22AD↑j
.text:0041451C                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:0041451C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 004143BD case 40
.text:00414527                 jz      loc_412CCD
.text:0041452D
.text:0041452D def_4143BD:                             ; CODE XREF: sub_412110+22A7↑j
.text:0041452D                                         ; sub_412110+22AD↑j ...
.text:0041452D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00414534                 test    ebx, ebx
.text:00414536                 jz      def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041453C                 movzx   edi, [esp+97Ch+var_8EC]
.text:00414544                 mov     esi, [esp+97Ch+var_8F8]
.text:0041454B                 movzx   ecx, byte ptr [edi+esi]
.text:0041454F                 mov     [esp+97Ch+var_8EC], cl
.text:00414556                 jmp     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041455B ; ---------------------------------------------------------------------------
.text:0041455B
.text:0041455B loc_41455B:                             ; CODE XREF: sub_412110+22AD↑j
.text:0041455B                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:0041455B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 39
.text:00414566                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041456C
.text:0041456C loc_41456C:                             ; CODE XREF: sub_412110+24D2↓j
.text:0041456C                                         ; sub_412110+24FF↓j ...
.text:0041456C                 mov     eax, [esp+97Ch+arg_C]
.text:00414573                 mov     ebp, [esp+97Ch+var_950]
.text:00414577                 mov     edi, [eax]
.text:00414579                 mov     edx, [eax+4]
.text:0041457C                 sub     ebp, edi
.text:0041457E                 inc     ebp
.text:0041457F                 cmp     ebp, edx
.text:00414581                 jbe     loc_414621
.text:00414587                 cmp     edx, 10000h
.text:0041458D                 mov     ebp, 0Fh
.text:00414592                 jz      loc_412526
.text:00414598                 lea     ebp, [edx+edx]
.text:0041459B                 mov     edx, [esp+97Ch+arg_C]
.text:004145A2                 cmp     ebp, 10000h
.text:004145A8                 mov     [edx+4], ebp
.text:004145AB                 jbe     short loc_4145B4
.text:004145AD                 mov     dword ptr [edx+4], 10000h
.text:004145B4
.text:004145B4 loc_4145B4:                             ; CODE XREF: sub_412110+249B↑j
.text:004145B4                 mov     ebx, [esp+97Ch+arg_C]
.text:004145BB                 mov     ebp, 0Ch
.text:004145C0                 mov     esi, [ebx+4]
.text:004145C3                 mov     [esp+97Ch+Size], edi ; Block
.text:004145C6                 mov     [esp+97Ch+var_978], esi ; Size
.text:004145CA                 call    realloc
.text:004145CF                 mov     edx, [esp+97Ch+arg_C]
.text:004145D6                 test    eax, eax
.text:004145D8                 mov     [edx], eax
.text:004145DA                 jz      loc_412526
.text:004145E0                 cmp     edi, eax
.text:004145E2                 jz      short loc_41456C
.text:004145E4                 sub     eax, edi
.text:004145E6                 mov     edi, [esp+97Ch+var_908]
.text:004145EA                 add     [esp+97Ch+var_950], eax
.text:004145EE                 add     [esp+97Ch+var_904], eax
.text:004145F2                 test    edi, edi
.text:004145F4                 jz      short loc_4145FA
.text:004145F6                 add     [esp+97Ch+var_908], eax
.text:004145FA
.text:004145FA loc_4145FA:                             ; CODE XREF: sub_412110+24E4↑j
.text:004145FA                 mov     ecx, [esp+97Ch+var_900]
.text:004145FE                 test    ecx, ecx
.text:00414600                 jz      short loc_414606
.text:00414602                 add     [esp+97Ch+var_900], eax
.text:00414606
.text:00414606 loc_414606:                             ; CODE XREF: sub_412110+24F0↑j
.text:00414606                 mov     edx, [esp+97Ch+var_8FC]
.text:0041460D                 test    edx, edx
.text:0041460F                 jz      loc_41456C
.text:00414615                 add     [esp+97Ch+var_8FC], eax
.text:0041461C                 jmp     loc_41456C
.text:00414621 ; ---------------------------------------------------------------------------
.text:00414621
.text:00414621 loc_414621:                             ; CODE XREF: sub_412110+2471↑j
.text:00414621                 mov     edi, [esp+97Ch+var_950]
.text:00414625                 mov     byte ptr [edi], 0Ch
.text:00414628                 jmp     loc_41253A
.text:0041462D ; ---------------------------------------------------------------------------
.text:0041462D
.text:0041462D loc_41462D:                             ; CODE XREF: sub_412110+22AD↑j
.text:0041462D                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:0041462D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 004143BD case 41
.text:00414638                 jnz     def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0041463E                 mov     edi, [esp+97Ch+var_24]
.text:00414645                 test    edi, edi
.text:00414647                 jnz     loc_412EB7
.text:0041464D                 test    [esp+97Ch+arg_8], 20000h
.text:00414658                 jnz     def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0041465E                 jmp     loc_412FE0
.text:00414663 ; ---------------------------------------------------------------------------
.text:00414663
.text:00414663 loc_414663:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414663                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414663                 test    [esp+97Ch+arg_8], 4000h ; jumptable 004143BD cases 49-57
.text:0041466E                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414674                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0041467C                 sub     bl, 30h ; '0'
.text:0041467F                 movzx   eax, bl
.text:00414682                 cmp     eax, [esp+97Ch+var_90C]
.text:00414686                 ja      loc_4147A9
.text:0041468C                 mov     [esp+97Ch+var_970], eax
.text:00414690                 mov     ecx, [esp+97Ch+Block]
.text:00414697                 mov     edi, [esp+97Ch+var_28]
.text:0041469E                 mov     esi, [esp+97Ch+var_24]
.text:004146A5                 mov     [esp+97Ch+Size], ecx
.text:004146A8                 mov     [esp+97Ch+var_978], edi
.text:004146AC                 mov     [esp+97Ch+var_974], esi
.text:004146B0                 call    sub_411AF0
.text:004146B5                 test    al, al
.text:004146B7                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004146BD                 mov     esi, [esp+97Ch+arg_C]
.text:004146C4                 mov     ebp, [esp+97Ch+var_950]
.text:004146C8                 mov     edi, [esi]
.text:004146CA                 mov     [esp+97Ch+var_900], ebp
.text:004146CE                 mov     edx, [esi+4]
.text:004146D1                 sub     ebp, edi
.text:004146D3                 mov     [esp+97Ch+var_940], edi
.text:004146D7                 add     ebp, 2
.text:004146DA                 cmp     ebp, edx
.text:004146DC                 jbe     loc_41479A
.text:004146E2
.text:004146E2 loc_4146E2:                             ; CODE XREF: sub_412110+2684↓j
.text:004146E2                 cmp     edx, 10000h
.text:004146E8                 mov     ebp, 0Fh
.text:004146ED                 jz      loc_412526
.text:004146F3                 mov     esi, [esp+97Ch+arg_C]
.text:004146FA                 lea     ecx, [edx+edx]
.text:004146FD                 cmp     ecx, 10000h
.text:00414703                 mov     [esi+4], ecx
.text:00414706                 jbe     short loc_41470F
.text:00414708                 mov     dword ptr [esi+4], 10000h
.text:0041470F
.text:0041470F loc_41470F:                             ; CODE XREF: sub_412110+25F6↑j
.text:0041470F                 mov     eax, [esp+97Ch+arg_C]
.text:00414716                 mov     ebp, [eax+4]
.text:00414719                 mov     [esp+97Ch+Size], edi ; Block
.text:0041471C                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00414720                 mov     ebp, 0Ch
.text:00414725                 call    realloc
.text:0041472A                 mov     edx, [esp+97Ch+arg_C]
.text:00414731                 test    eax, eax
.text:00414733                 mov     [edx], eax
.text:00414735                 jz      loc_412526
.text:0041473B                 cmp     [esp+97Ch+var_940], eax
.text:0041473F                 jz      short loc_414779
.text:00414741                 mov     esi, [esp+97Ch+var_940]
.text:00414745                 mov     edi, [esp+97Ch+var_908]
.text:00414749                 sub     eax, esi
.text:0041474B                 add     [esp+97Ch+var_950], eax
.text:0041474F                 add     [esp+97Ch+var_904], eax
.text:00414753                 test    edi, edi
.text:00414755                 jz      short loc_41475B
.text:00414757                 add     [esp+97Ch+var_908], eax
.text:0041475B
.text:0041475B loc_41475B:                             ; CODE XREF: sub_412110+2645↑j
.text:0041475B                 mov     edx, [esp+97Ch+var_900]
.text:0041475F                 test    edx, edx
.text:00414761                 jz      short loc_414767
.text:00414763                 add     [esp+97Ch+var_900], eax
.text:00414767
.text:00414767 loc_414767:                             ; CODE XREF: sub_412110+2651↑j
.text:00414767                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041476E                 test    ecx, ecx
.text:00414770                 jz      short loc_414779
.text:00414772                 add     [esp+97Ch+var_8FC], eax
.text:00414779
.text:00414779 loc_414779:                             ; CODE XREF: sub_412110+262F↑j
.text:00414779                                         ; sub_412110+2660↑j
.text:00414779                 mov     eax, [esp+97Ch+arg_C]
.text:00414780                 mov     ebp, [esp+97Ch+var_950]
.text:00414784                 mov     edi, [eax]
.text:00414786                 mov     edx, [eax+4]
.text:00414789                 sub     ebp, edi
.text:0041478B                 add     ebp, 2
.text:0041478E                 mov     [esp+97Ch+var_940], edi
.text:00414792                 cmp     ebp, edx
.text:00414794                 ja      loc_4146E2
.text:0041479A
.text:0041479A loc_41479A:                             ; CODE XREF: sub_412110+25CC↑j
.text:0041479A                 mov     edi, [esp+97Ch+var_950]
.text:0041479E                 mov     byte ptr [edi], 8
.text:004147A1                 inc     edi
.text:004147A2                 mov     [edi], bl
.text:004147A4                 jmp     loc_41253A
.text:004147A9 ; ---------------------------------------------------------------------------
.text:004147A9
.text:004147A9 loc_4147A9:                             ; CODE XREF: sub_412110+2576↑j
.text:004147A9                 mov     ebx, [esp+97Ch+Block]
.text:004147B0                 mov     ebp, 6
.text:004147B5                 jmp     loc_414178
.text:004147BA ; ---------------------------------------------------------------------------
.text:004147BA
.text:004147BA loc_4147BA:                             ; CODE XREF: sub_412110+22AD↑j
.text:004147BA                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:004147BA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 60
.text:004147C5                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004147CB
.text:004147CB loc_4147CB:                             ; CODE XREF: sub_412110+2731↓j
.text:004147CB                                         ; sub_412110+275E↓j ...
.text:004147CB                 mov     eax, [esp+97Ch+arg_C]
.text:004147D2                 mov     ebx, [esp+97Ch+var_950]
.text:004147D6                 mov     edi, [eax]
.text:004147D8                 mov     edx, [eax+4]
.text:004147DB                 sub     ebx, edi
.text:004147DD                 inc     ebx
.text:004147DE                 cmp     ebx, edx
.text:004147E0                 jbe     loc_414880
.text:004147E6                 cmp     edx, 10000h
.text:004147EC                 mov     ebp, 0Fh
.text:004147F1                 jz      loc_412526
.text:004147F7                 lea     ebx, [edx+edx]
.text:004147FA                 mov     edx, [esp+97Ch+arg_C]
.text:00414801                 cmp     ebx, 10000h
.text:00414807                 mov     [edx+4], ebx
.text:0041480A                 jbe     short loc_414813
.text:0041480C                 mov     dword ptr [edx+4], 10000h
.text:00414813
.text:00414813 loc_414813:                             ; CODE XREF: sub_412110+26FA↑j
.text:00414813                 mov     ebp, [esp+97Ch+arg_C]
.text:0041481A                 mov     edx, [ebp+4]
.text:0041481D                 mov     ebp, 0Ch
.text:00414822                 mov     [esp+97Ch+Size], edi ; Block
.text:00414825                 mov     [esp+97Ch+var_978], edx ; Size
.text:00414829                 call    realloc
.text:0041482E                 mov     ecx, [esp+97Ch+arg_C]
.text:00414835                 test    eax, eax
.text:00414837                 mov     [ecx], eax
.text:00414839                 jz      loc_412526
.text:0041483F                 cmp     edi, eax
.text:00414841                 jz      short loc_4147CB
.text:00414843                 mov     esi, [esp+97Ch+var_908]
.text:00414847                 sub     eax, edi
.text:00414849                 add     [esp+97Ch+var_950], eax
.text:0041484D                 add     [esp+97Ch+var_904], eax
.text:00414851                 test    esi, esi
.text:00414853                 jz      short loc_414859
.text:00414855                 add     [esp+97Ch+var_908], eax
.text:00414859
.text:00414859 loc_414859:                             ; CODE XREF: sub_412110+2743↑j
.text:00414859                 mov     edi, [esp+97Ch+var_900]
.text:0041485D                 test    edi, edi
.text:0041485F                 jz      short loc_414865
.text:00414861                 add     [esp+97Ch+var_900], eax
.text:00414865
.text:00414865 loc_414865:                             ; CODE XREF: sub_412110+274F↑j
.text:00414865                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041486C                 test    ecx, ecx
.text:0041486E                 jz      loc_4147CB
.text:00414874                 add     [esp+97Ch+var_8FC], eax
.text:0041487B                 jmp     loc_4147CB
.text:00414880 ; ---------------------------------------------------------------------------
.text:00414880
.text:00414880 loc_414880:                             ; CODE XREF: sub_412110+26D0↑j
.text:00414880                 mov     edi, [esp+97Ch+var_950]
.text:00414884                 mov     byte ptr [edi], 1Ah
.text:00414887                 jmp     loc_41253A
.text:0041488C ; ---------------------------------------------------------------------------
.text:0041488C
.text:0041488C loc_41488C:                             ; CODE XREF: sub_412110+22AD↑j
.text:0041488C                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:0041488C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 62
.text:00414897                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041489D
.text:0041489D loc_41489D:                             ; CODE XREF: sub_412110+2803↓j
.text:0041489D                                         ; sub_412110+2830↓j ...
.text:0041489D                 mov     eax, [esp+97Ch+arg_C]
.text:004148A4                 mov     ebp, [esp+97Ch+var_950]
.text:004148A8                 mov     edi, [eax]
.text:004148AA                 mov     edx, [eax+4]
.text:004148AD                 sub     ebp, edi
.text:004148AF                 inc     ebp
.text:004148B0                 cmp     ebp, edx
.text:004148B2                 jbe     loc_414952
.text:004148B8                 cmp     edx, 10000h
.text:004148BE                 mov     ebp, 0Fh
.text:004148C3                 jz      loc_412526
.text:004148C9                 lea     ebp, [edx+edx]
.text:004148CC                 mov     edx, [esp+97Ch+arg_C]
.text:004148D3                 cmp     ebp, 10000h
.text:004148D9                 mov     [edx+4], ebp
.text:004148DC                 jbe     short loc_4148E5
.text:004148DE                 mov     dword ptr [edx+4], 10000h
.text:004148E5
.text:004148E5 loc_4148E5:                             ; CODE XREF: sub_412110+27CC↑j
.text:004148E5                 mov     ebx, [esp+97Ch+arg_C]
.text:004148EC                 mov     ebp, 0Ch
.text:004148F1                 mov     esi, [ebx+4]
.text:004148F4                 mov     [esp+97Ch+Size], edi ; Block
.text:004148F7                 mov     [esp+97Ch+var_978], esi ; Size
.text:004148FB                 call    realloc
.text:00414900                 mov     edx, [esp+97Ch+arg_C]
.text:00414907                 test    eax, eax
.text:00414909                 mov     [edx], eax
.text:0041490B                 jz      loc_412526
.text:00414911                 cmp     edi, eax
.text:00414913                 jz      short loc_41489D
.text:00414915                 sub     eax, edi
.text:00414917                 mov     edi, [esp+97Ch+var_908]
.text:0041491B                 add     [esp+97Ch+var_950], eax
.text:0041491F                 add     [esp+97Ch+var_904], eax
.text:00414923                 test    edi, edi
.text:00414925                 jz      short loc_41492B
.text:00414927                 add     [esp+97Ch+var_908], eax
.text:0041492B
.text:0041492B loc_41492B:                             ; CODE XREF: sub_412110+2815↑j
.text:0041492B                 mov     ecx, [esp+97Ch+var_900]
.text:0041492F                 test    ecx, ecx
.text:00414931                 jz      short loc_414937
.text:00414933                 add     [esp+97Ch+var_900], eax
.text:00414937
.text:00414937 loc_414937:                             ; CODE XREF: sub_412110+2821↑j
.text:00414937                 mov     edx, [esp+97Ch+var_8FC]
.text:0041493E                 test    edx, edx
.text:00414940                 jz      loc_41489D
.text:00414946                 add     [esp+97Ch+var_8FC], eax
.text:0041494D                 jmp     loc_41489D
.text:00414952 ; ---------------------------------------------------------------------------
.text:00414952
.text:00414952 loc_414952:                             ; CODE XREF: sub_412110+27A2↑j
.text:00414952                 mov     edi, [esp+97Ch+var_950]
.text:00414956                 mov     byte ptr [edi], 1Bh
.text:00414959                 jmp     loc_41253A
.text:0041495E ; ---------------------------------------------------------------------------
.text:0041495E
.text:0041495E loc_41495E:                             ; CODE XREF: sub_412110+22AD↑j
.text:0041495E                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:0041495E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 004143BD cases 43,63
.text:00414966                 jz      def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0041496C                 jmp     loc_413170      ; jumptable 0041227F case 42
.text:00414971 ; ---------------------------------------------------------------------------
.text:00414971
.text:00414971 loc_414971:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414971                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414971                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 66
.text:0041497C                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414982
.text:00414982 loc_414982:                             ; CODE XREF: sub_412110+28E8↓j
.text:00414982                                         ; sub_412110+2915↓j ...
.text:00414982                 mov     eax, [esp+97Ch+arg_C]
.text:00414989                 mov     ebp, [esp+97Ch+var_950]
.text:0041498D                 mov     edi, [eax]
.text:0041498F                 mov     edx, [eax+4]
.text:00414992                 sub     ebp, edi
.text:00414994                 inc     ebp
.text:00414995                 cmp     ebp, edx
.text:00414997                 jbe     loc_414A37
.text:0041499D                 cmp     edx, 10000h
.text:004149A3                 mov     ebp, 0Fh
.text:004149A8                 jz      loc_412526
.text:004149AE                 lea     ebx, [edx+edx]
.text:004149B1                 mov     edx, [esp+97Ch+arg_C]
.text:004149B8                 cmp     ebx, 10000h
.text:004149BE                 mov     [edx+4], ebx
.text:004149C1                 jbe     short loc_4149CA
.text:004149C3                 mov     dword ptr [edx+4], 10000h
.text:004149CA
.text:004149CA loc_4149CA:                             ; CODE XREF: sub_412110+28B1↑j
.text:004149CA                 mov     esi, [esp+97Ch+arg_C]
.text:004149D1                 mov     ebp, [esi+4]
.text:004149D4                 mov     [esp+97Ch+Size], edi ; Block
.text:004149D7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004149DB                 mov     ebp, 0Ch
.text:004149E0                 call    realloc
.text:004149E5                 mov     edx, [esp+97Ch+arg_C]
.text:004149EC                 test    eax, eax
.text:004149EE                 mov     [edx], eax
.text:004149F0                 jz      loc_412526
.text:004149F6                 cmp     edi, eax
.text:004149F8                 jz      short loc_414982
.text:004149FA                 sub     eax, edi
.text:004149FC                 mov     edi, [esp+97Ch+var_908]
.text:00414A00                 add     [esp+97Ch+var_950], eax
.text:00414A04                 add     [esp+97Ch+var_904], eax
.text:00414A08                 test    edi, edi
.text:00414A0A                 jz      short loc_414A10
.text:00414A0C                 add     [esp+97Ch+var_908], eax
.text:00414A10
.text:00414A10 loc_414A10:                             ; CODE XREF: sub_412110+28FA↑j
.text:00414A10                 mov     ecx, [esp+97Ch+var_900]
.text:00414A14                 test    ecx, ecx
.text:00414A16                 jz      short loc_414A1C
.text:00414A18                 add     [esp+97Ch+var_900], eax
.text:00414A1C
.text:00414A1C loc_414A1C:                             ; CODE XREF: sub_412110+2906↑j
.text:00414A1C                 mov     ebx, [esp+97Ch+var_8FC]
.text:00414A23                 test    ebx, ebx
.text:00414A25                 jz      loc_414982
.text:00414A2B                 add     [esp+97Ch+var_8FC], eax
.text:00414A32                 jmp     loc_414982
.text:00414A37 ; ---------------------------------------------------------------------------
.text:00414A37
.text:00414A37 loc_414A37:                             ; CODE XREF: sub_412110+2887↑j
.text:00414A37                 mov     edi, [esp+97Ch+var_950]
.text:00414A3B                 mov     byte ptr [edi], 1Dh
.text:00414A3E                 jmp     loc_41253A
.text:00414A43 ; ---------------------------------------------------------------------------
.text:00414A43
.text:00414A43 loc_414A43:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414A43                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414A43                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 87
.text:00414A4E                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414A54                 mov     ecx, [esp+97Ch+arg_C]
.text:00414A5B                 mov     esi, [esp+97Ch+var_950]
.text:00414A5F                 mov     edi, [ecx]
.text:00414A61                 mov     [esp+97Ch+var_900], esi
.text:00414A65                 mov     edx, [ecx+4]
.text:00414A68                 sub     esi, edi
.text:00414A6A                 inc     esi
.text:00414A6B                 mov     ebx, edi
.text:00414A6D                 cmp     esi, edx
.text:00414A6F                 jbe     loc_414B2A
.text:00414A75
.text:00414A75 loc_414A75:                             ; CODE XREF: sub_412110+2A14↓j
.text:00414A75                 cmp     edx, 10000h
.text:00414A7B                 mov     ebp, 0Fh
.text:00414A80                 jz      loc_412526
.text:00414A86                 mov     esi, [esp+97Ch+arg_C]
.text:00414A8D                 lea     ebp, [edx+edx]
.text:00414A90                 cmp     ebp, 10000h
.text:00414A96                 mov     [esi+4], ebp
.text:00414A99                 jbe     short loc_414AA2
.text:00414A9B                 mov     dword ptr [esi+4], 10000h
.text:00414AA2
.text:00414AA2 loc_414AA2:                             ; CODE XREF: sub_412110+2989↑j
.text:00414AA2                 mov     eax, [esp+97Ch+arg_C]
.text:00414AA9                 mov     ebp, 0Ch
.text:00414AAE                 mov     esi, [eax+4]
.text:00414AB1                 mov     [esp+97Ch+Size], edi ; Block
.text:00414AB4                 mov     [esp+97Ch+var_978], esi ; Size
.text:00414AB8                 call    realloc
.text:00414ABD                 mov     edi, [esp+97Ch+arg_C]
.text:00414AC4                 test    eax, eax
.text:00414AC6                 mov     [edi], eax
.text:00414AC8                 jz      loc_412526
.text:00414ACE                 cmp     ebx, eax
.text:00414AD0                 jz      short loc_414B06
.text:00414AD2                 sub     eax, ebx
.text:00414AD4                 mov     ebx, [esp+97Ch+var_908]
.text:00414AD8                 add     [esp+97Ch+var_950], eax
.text:00414ADC                 add     [esp+97Ch+var_904], eax
.text:00414AE0                 test    ebx, ebx
.text:00414AE2                 jz      short loc_414AE8
.text:00414AE4                 add     [esp+97Ch+var_908], eax
.text:00414AE8
.text:00414AE8 loc_414AE8:                             ; CODE XREF: sub_412110+29D2↑j
.text:00414AE8                 mov     ecx, [esp+97Ch+var_900]
.text:00414AEC                 test    ecx, ecx
.text:00414AEE                 jz      short loc_414AF4
.text:00414AF0                 add     [esp+97Ch+var_900], eax
.text:00414AF4
.text:00414AF4 loc_414AF4:                             ; CODE XREF: sub_412110+29DE↑j
.text:00414AF4                 mov     edx, [esp+97Ch+var_8FC]
.text:00414AFB                 test    edx, edx
.text:00414AFD                 jz      short loc_414B06
.text:00414AFF                 add     [esp+97Ch+var_8FC], eax
.text:00414B06
.text:00414B06 loc_414B06:                             ; CODE XREF: sub_412110+29C0↑j
.text:00414B06                                         ; sub_412110+29ED↑j
.text:00414B06                 mov     esi, [esp+97Ch+arg_C]
.text:00414B0D                 mov     eax, [esp+97Ch+arg_C]
.text:00414B14                 mov     ebp, [esp+97Ch+var_950]
.text:00414B18                 mov     edi, [esi]
.text:00414B1A                 mov     edx, [eax+4]
.text:00414B1D                 sub     ebp, edi
.text:00414B1F                 inc     ebp
.text:00414B20                 mov     ebx, edi
.text:00414B22                 cmp     ebp, edx
.text:00414B24                 ja      loc_414A75
.text:00414B2A
.text:00414B2A loc_414B2A:                             ; CODE XREF: sub_412110+295F↑j
.text:00414B2A                 mov     edi, [esp+97Ch+var_950]
.text:00414B2E                 mov     byte ptr [edi], 19h
.text:00414B31                 jmp     loc_41253A
.text:00414B36 ; ---------------------------------------------------------------------------
.text:00414B36
.text:00414B36 loc_414B36:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414B36                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414B36                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 96
.text:00414B41                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414B47
.text:00414B47 loc_414B47:                             ; CODE XREF: sub_412110+2AAD↓j
.text:00414B47                                         ; sub_412110+2ADA↓j ...
.text:00414B47                 mov     eax, [esp+97Ch+arg_C]
.text:00414B4E                 mov     ebx, [esp+97Ch+var_950]
.text:00414B52                 mov     edi, [eax]
.text:00414B54                 mov     edx, [eax+4]
.text:00414B57                 sub     ebx, edi
.text:00414B59                 inc     ebx
.text:00414B5A                 cmp     ebx, edx
.text:00414B5C                 jbe     loc_414BFC
.text:00414B62                 cmp     edx, 10000h
.text:00414B68                 mov     ebp, 0Fh
.text:00414B6D                 jz      loc_412526
.text:00414B73                 lea     esi, [edx+edx]
.text:00414B76                 mov     edx, [esp+97Ch+arg_C]
.text:00414B7D                 cmp     esi, 10000h
.text:00414B83                 mov     [edx+4], esi
.text:00414B86                 jbe     short loc_414B8F
.text:00414B88                 mov     dword ptr [edx+4], 10000h
.text:00414B8F
.text:00414B8F loc_414B8F:                             ; CODE XREF: sub_412110+2A76↑j
.text:00414B8F                 mov     ebp, [esp+97Ch+arg_C]
.text:00414B96                 mov     ebx, [ebp+4]
.text:00414B99                 mov     ebp, 0Ch
.text:00414B9E                 mov     [esp+97Ch+Size], edi ; Block
.text:00414BA1                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00414BA5                 call    realloc
.text:00414BAA                 mov     edx, [esp+97Ch+arg_C]
.text:00414BB1                 test    eax, eax
.text:00414BB3                 mov     [edx], eax
.text:00414BB5                 jz      loc_412526
.text:00414BBB                 cmp     edi, eax
.text:00414BBD                 jz      short loc_414B47
.text:00414BBF                 mov     ecx, [esp+97Ch+var_908]
.text:00414BC3                 sub     eax, edi
.text:00414BC5                 add     [esp+97Ch+var_950], eax
.text:00414BC9                 add     [esp+97Ch+var_904], eax
.text:00414BCD                 test    ecx, ecx
.text:00414BCF                 jz      short loc_414BD5
.text:00414BD1                 add     [esp+97Ch+var_908], eax
.text:00414BD5
.text:00414BD5 loc_414BD5:                             ; CODE XREF: sub_412110+2ABF↑j
.text:00414BD5                 mov     edi, [esp+97Ch+var_900]
.text:00414BD9                 test    edi, edi
.text:00414BDB                 jz      short loc_414BE1
.text:00414BDD                 add     [esp+97Ch+var_900], eax
.text:00414BE1
.text:00414BE1 loc_414BE1:                             ; CODE XREF: sub_412110+2ACB↑j
.text:00414BE1                 mov     esi, [esp+97Ch+var_8FC]
.text:00414BE8                 test    esi, esi
.text:00414BEA                 jz      loc_414B47
.text:00414BF0                 add     [esp+97Ch+var_8FC], eax
.text:00414BF7                 jmp     loc_414B47
.text:00414BFC ; ---------------------------------------------------------------------------
.text:00414BFC
.text:00414BFC loc_414BFC:                             ; CODE XREF: sub_412110+2A4C↑j
.text:00414BFC                 mov     edi, [esp+97Ch+var_950]
.text:00414C00                 mov     byte ptr [edi], 0Bh
.text:00414C03                 jmp     loc_41253A
.text:00414C08 ; ---------------------------------------------------------------------------
.text:00414C08
.text:00414C08 loc_414C08:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414C08                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414C08                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 98
.text:00414C13                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414C19
.text:00414C19 loc_414C19:                             ; CODE XREF: sub_412110+2B7F↓j
.text:00414C19                                         ; sub_412110+2BAC↓j ...
.text:00414C19                 mov     eax, [esp+97Ch+arg_C]
.text:00414C20                 mov     ecx, [esp+97Ch+var_950]
.text:00414C24                 mov     edi, [eax]
.text:00414C26                 mov     edx, [eax+4]
.text:00414C29                 sub     ecx, edi
.text:00414C2B                 inc     ecx
.text:00414C2C                 cmp     ecx, edx
.text:00414C2E                 jbe     loc_414CCE
.text:00414C34                 cmp     edx, 10000h
.text:00414C3A                 mov     ebp, 0Fh
.text:00414C3F                 jz      loc_412526
.text:00414C45                 lea     esi, [edx+edx]
.text:00414C48                 mov     edx, [esp+97Ch+arg_C]
.text:00414C4F                 cmp     esi, 10000h
.text:00414C55                 mov     [edx+4], esi
.text:00414C58                 jbe     short loc_414C61
.text:00414C5A                 mov     dword ptr [edx+4], 10000h
.text:00414C61
.text:00414C61 loc_414C61:                             ; CODE XREF: sub_412110+2B48↑j
.text:00414C61                 mov     edx, [esp+97Ch+arg_C]
.text:00414C68                 mov     ebp, 0Ch
.text:00414C6D                 mov     ebx, [edx+4]
.text:00414C70                 mov     [esp+97Ch+Size], edi ; Block
.text:00414C73                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00414C77                 call    realloc
.text:00414C7C                 mov     ecx, [esp+97Ch+arg_C]
.text:00414C83                 test    eax, eax
.text:00414C85                 mov     [ecx], eax
.text:00414C87                 jz      loc_412526
.text:00414C8D                 cmp     edi, eax
.text:00414C8F                 jz      short loc_414C19
.text:00414C91                 mov     ebp, [esp+97Ch+var_908]
.text:00414C95                 sub     eax, edi
.text:00414C97                 add     [esp+97Ch+var_950], eax
.text:00414C9B                 add     [esp+97Ch+var_904], eax
.text:00414C9F                 test    ebp, ebp
.text:00414CA1                 jz      short loc_414CA7
.text:00414CA3                 add     [esp+97Ch+var_908], eax
.text:00414CA7
.text:00414CA7 loc_414CA7:                             ; CODE XREF: sub_412110+2B91↑j
.text:00414CA7                 mov     edi, [esp+97Ch+var_900]
.text:00414CAB                 test    edi, edi
.text:00414CAD                 jz      short loc_414CB3
.text:00414CAF                 add     [esp+97Ch+var_900], eax
.text:00414CB3
.text:00414CB3 loc_414CB3:                             ; CODE XREF: sub_412110+2B9D↑j
.text:00414CB3                 mov     esi, [esp+97Ch+var_8FC]
.text:00414CBA                 test    esi, esi
.text:00414CBC                 jz      loc_414C19
.text:00414CC2                 add     [esp+97Ch+var_8FC], eax
.text:00414CC9                 jmp     loc_414C19
.text:00414CCE ; ---------------------------------------------------------------------------
.text:00414CCE
.text:00414CCE loc_414CCE:                             ; CODE XREF: sub_412110+2B1E↑j
.text:00414CCE                 mov     edi, [esp+97Ch+var_950]
.text:00414CD2                 mov     byte ptr [edi], 1Ch
.text:00414CD5                 jmp     loc_41253A
.text:00414CDA ; ---------------------------------------------------------------------------
.text:00414CDA
.text:00414CDA loc_414CDA:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414CDA                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414CDA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 004143BD case 119
.text:00414CE5                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414CEB                 mov     eax, [esp+97Ch+arg_C]
.text:00414CF2                 mov     ecx, [esp+97Ch+var_950]
.text:00414CF6                 mov     edi, [eax]
.text:00414CF8                 mov     [esp+97Ch+var_900], ecx
.text:00414CFC                 mov     esi, ecx
.text:00414CFE                 mov     edx, [eax+4]
.text:00414D01                 sub     esi, edi
.text:00414D03                 mov     ebx, edi
.text:00414D05                 inc     esi
.text:00414D06                 cmp     esi, edx
.text:00414D08                 jbe     loc_414DC3
.text:00414D0E
.text:00414D0E loc_414D0E:                             ; CODE XREF: sub_412110+2CAD↓j
.text:00414D0E                 cmp     edx, 10000h
.text:00414D14                 mov     ebp, 0Fh
.text:00414D19                 jz      loc_412526
.text:00414D1F                 mov     esi, [esp+97Ch+arg_C]
.text:00414D26                 lea     ebp, [edx+edx]
.text:00414D29                 cmp     ebp, 10000h
.text:00414D2F                 mov     [esi+4], ebp
.text:00414D32                 jbe     short loc_414D3B
.text:00414D34                 mov     dword ptr [esi+4], 10000h
.text:00414D3B
.text:00414D3B loc_414D3B:                             ; CODE XREF: sub_412110+2C22↑j
.text:00414D3B                 mov     eax, [esp+97Ch+arg_C]
.text:00414D42                 mov     ebp, 0Ch
.text:00414D47                 mov     esi, [eax+4]
.text:00414D4A                 mov     [esp+97Ch+Size], edi ; Block
.text:00414D4D                 mov     [esp+97Ch+var_978], esi ; Size
.text:00414D51                 call    realloc
.text:00414D56                 mov     edx, [esp+97Ch+arg_C]
.text:00414D5D                 test    eax, eax
.text:00414D5F                 mov     [edx], eax
.text:00414D61                 jz      loc_412526
.text:00414D67                 cmp     ebx, eax
.text:00414D69                 jz      short loc_414D9F
.text:00414D6B                 sub     eax, ebx
.text:00414D6D                 mov     ebx, [esp+97Ch+var_908]
.text:00414D71                 add     [esp+97Ch+var_950], eax
.text:00414D75                 add     [esp+97Ch+var_904], eax
.text:00414D79                 test    ebx, ebx
.text:00414D7B                 jz      short loc_414D81
.text:00414D7D                 add     [esp+97Ch+var_908], eax
.text:00414D81
.text:00414D81 loc_414D81:                             ; CODE XREF: sub_412110+2C6B↑j
.text:00414D81                 mov     edi, [esp+97Ch+var_900]
.text:00414D85                 test    edi, edi
.text:00414D87                 jz      short loc_414D8D
.text:00414D89                 add     [esp+97Ch+var_900], eax
.text:00414D8D
.text:00414D8D loc_414D8D:                             ; CODE XREF: sub_412110+2C77↑j
.text:00414D8D                 mov     ecx, [esp+97Ch+var_8FC]
.text:00414D94                 test    ecx, ecx
.text:00414D96                 jz      short loc_414D9F
.text:00414D98                 add     [esp+97Ch+var_8FC], eax
.text:00414D9F
.text:00414D9F loc_414D9F:                             ; CODE XREF: sub_412110+2C59↑j
.text:00414D9F                                         ; sub_412110+2C86↑j
.text:00414D9F                 mov     edx, [esp+97Ch+arg_C]
.text:00414DA6                 mov     eax, [esp+97Ch+arg_C]
.text:00414DAD                 mov     ebp, [esp+97Ch+var_950]
.text:00414DB1                 mov     edi, [edx]
.text:00414DB3                 mov     edx, [eax+4]
.text:00414DB6                 sub     ebp, edi
.text:00414DB8                 inc     ebp
.text:00414DB9                 mov     ebx, edi
.text:00414DBB                 cmp     ebp, edx
.text:00414DBD                 ja      loc_414D0E
.text:00414DC3
.text:00414DC3 loc_414DC3:                             ; CODE XREF: sub_412110+2BF8↑j
.text:00414DC3                 mov     edi, [esp+97Ch+var_950]
.text:00414DC7                 mov     byte ptr [edi], 18h
.text:00414DCA                 jmp     loc_41253A
.text:00414DCF ; ---------------------------------------------------------------------------
.text:00414DCF
.text:00414DCF loc_414DCF:                             ; CODE XREF: sub_412110+22AD↑j
.text:00414DCF                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00414DCF                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 004143BD case 123
.text:00414DD6                 and     ebx, 1200h
.text:00414DDC                 cmp     ebx, 200h
.text:00414DE2                 jnz     def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00414DE8
.text:00414DE8 loc_414DE8:                             ; CODE XREF: sub_412110+329D↓j
.text:00414DE8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:00414DF0                 mov     edi, [esp+97Ch+var_8D0]
.text:00414DF7                 cmp     edi, [esp+97Ch+var_8F4]
.text:00414DFE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:00414E06                 mov     ecx, edi
.text:00414E08                 jz      loc_414EC9
.text:00414E0E
.text:00414E0E loc_414E0E:                             ; CODE XREF: sub_412110+2D74↓j
.text:00414E0E                 movzx   eax, byte ptr [edi]
.text:00414E11                 inc     edi
.text:00414E12                 mov     ebp, [esp+97Ch+var_8F8]
.text:00414E19                 mov     [esp+97Ch+var_8D0], edi
.text:00414E20                 test    ebp, ebp
.text:00414E22                 mov     [esp+97Ch+var_8EC], al
.text:00414E29                 jz      short loc_414E40
.text:00414E2B                 mov     ebp, [esp+97Ch+var_8F8]
.text:00414E32                 movzx   esi, al
.text:00414E35                 movzx   ebx, byte ptr [esi+ebp]
.text:00414E39                 mov     [esp+97Ch+var_8EC], bl
.text:00414E40
.text:00414E40 loc_414E40:                             ; CODE XREF: sub_412110+2D19↑j
.text:00414E40                 movzx   edx, [esp+97Ch+var_8EC]
.text:00414E48                 sub     dl, 30h ; '0'
.text:00414E4B                 cmp     dl, 9
.text:00414E4E                 ja      short loc_414E86
.text:00414E50                 cmp     [esp+97Ch+var_934], 7FFFh
.text:00414E58                 jg      short loc_414E7D
.text:00414E5A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00414E62                 mov     edx, [esp+97Ch+var_934]
.text:00414E66                 shr     edx, 1Fh
.text:00414E69                 dec     edx
.text:00414E6A                 and     [esp+97Ch+var_934], edx
.text:00414E6E                 mov     eax, [esp+97Ch+var_934]
.text:00414E72                 lea     esi, [eax+eax*4]
.text:00414E75                 lea     ebx, [ebp+esi*2-30h]
.text:00414E79                 mov     [esp+97Ch+var_934], ebx
.text:00414E7D
.text:00414E7D loc_414E7D:                             ; CODE XREF: sub_412110+2D48↑j
.text:00414E7D                 cmp     edi, [esp+97Ch+var_8F4]
.text:00414E84                 jnz     short loc_414E0E
.text:00414E86
.text:00414E86 loc_414E86:                             ; CODE XREF: sub_412110+2D3E↑j
.text:00414E86                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:00414E8E                 jz      loc_4152D4
.text:00414E94                 mov     ebx, [esp+97Ch+var_934]
.text:00414E98                 mov     [esp+97Ch+var_938], ebx
.text:00414E9C
.text:00414E9C loc_414E9C:                             ; CODE XREF: sub_412110+3256↓j
.text:00414E9C                                         ; sub_412110+3264↓j
.text:00414E9C                 mov     esi, [esp+97Ch+var_934]
.text:00414EA0                 test    esi, esi
.text:00414EA2                 js      short loc_414EC9
.text:00414EA4                 mov     ebp, [esp+97Ch+var_938]
.text:00414EA8                 cmp     [esp+97Ch+var_934], ebp
.text:00414EAC                 jg      short loc_414EC9
.text:00414EAE                 test    [esp+97Ch+arg_8], 1000h
.text:00414EB9                 jnz     loc_414F6A
.text:00414EBF                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00414EC7                 jz      short loc_414F26
.text:00414EC9
.text:00414EC9 loc_414EC9:                             ; CODE XREF: sub_412110+2CF8↑j
.text:00414EC9                                         ; sub_412110+2D92↑j ...
.text:00414EC9                 test    [esp+97Ch+arg_8], 200000h
.text:00414ED4                 jz      short loc_414EFB
.text:00414ED6
.text:00414ED6 loc_414ED6:                             ; CODE XREF: sub_412110+31B1↓j
.text:00414ED6                 test    [esp+97Ch+arg_8], 1000h
.text:00414EE1                 mov     [esp+97Ch+var_8D0], ecx
.text:00414EE8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:00414EF0                 jz      def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00414EF6                 jmp     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414EFB ; ---------------------------------------------------------------------------
.text:00414EFB
.text:00414EFB loc_414EFB:                             ; CODE XREF: sub_412110+2DC4↑j
.text:00414EFB                 mov     edi, [esp+97Ch+Block]
.text:00414F02                 mov     [esp+97Ch+Size], edi ; Block
.text:00414F05                 call    free
.text:00414F0A                 mov     ebp, [esp+97Ch+var_8F4]
.text:00414F11                 cmp     [esp+97Ch+var_8D0], ebp
.text:00414F18                 setnz   cl
.text:00414F1B                 movzx   ebx, cl
.text:00414F1E                 lea     ebp, [ebx+9]
.text:00414F21                 jmp     loc_412526
.text:00414F26 ; ---------------------------------------------------------------------------
.text:00414F26
.text:00414F26 loc_414F26:                             ; CODE XREF: sub_412110+2DB7↑j
.text:00414F26                 mov     eax, [esp+97Ch+var_8D0]
.text:00414F2D                 cmp     eax, [esp+97Ch+var_8F4]
.text:00414F34                 jz      short loc_414EC9
.text:00414F36                 movzx   edx, byte ptr [eax]
.text:00414F39                 lea     ebx, [eax+1]
.text:00414F3C                 mov     eax, [esp+97Ch+var_8F8]
.text:00414F43                 mov     [esp+97Ch+var_8D0], ebx
.text:00414F4A                 test    eax, eax
.text:00414F4C                 mov     [esp+97Ch+var_8EC], dl
.text:00414F53                 jz      short loc_414F6A
.text:00414F55                 mov     esi, [esp+97Ch+var_8F8]
.text:00414F5C                 movzx   edi, dl
.text:00414F5F                 movzx   edx, byte ptr [edi+esi]
.text:00414F63                 mov     [esp+97Ch+var_8EC], dl
.text:00414F6A
.text:00414F6A loc_414F6A:                             ; CODE XREF: sub_412110+2DA9↑j
.text:00414F6A                                         ; sub_412110+2E43↑j
.text:00414F6A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:00414F72                 jnz     loc_414EC9
.text:00414F78                 mov     ebp, [esp+97Ch+var_900]
.text:00414F7C                 test    ebp, ebp
.text:00414F7E                 jz      loc_4152A3
.text:00414F84
.text:00414F84 loc_414F84:                             ; CODE XREF: sub_412110+31BF↓j
.text:00414F84                 cmp     [esp+97Ch+var_938], 7FFFh
.text:00414F8C                 jg      loc_415292
.text:00414F92                 mov     eax, [esp+97Ch+var_938]
.text:00414F96                 test    eax, eax
.text:00414F98                 jnz     loc_4150AF
.text:00414F9E                 mov     edx, [esp+97Ch+arg_C]
.text:00414FA5                 mov     ebp, [esp+97Ch+arg_C]
.text:00414FAC                 mov     esi, [esp+97Ch+var_950]
.text:00414FB0                 mov     edi, [edx]
.text:00414FB2                 mov     edx, [ebp+4]
.text:00414FB5                 sub     esi, edi
.text:00414FB7                 add     esi, 3
.text:00414FBA                 mov     ebx, edi
.text:00414FBC                 cmp     esi, edx
.text:00414FBE                 jbe     loc_41507B
.text:00414FC4
.text:00414FC4 loc_414FC4:                             ; CODE XREF: sub_412110+2F65↓j
.text:00414FC4                 cmp     edx, 10000h
.text:00414FCA                 mov     ebp, 0Fh
.text:00414FCF                 jz      loc_412526
.text:00414FD5                 mov     esi, [esp+97Ch+arg_C]
.text:00414FDC                 lea     ecx, [edx+edx]
.text:00414FDF                 cmp     ecx, 10000h
.text:00414FE5                 mov     [esi+4], ecx
.text:00414FE8                 jbe     short loc_414FF1
.text:00414FEA                 mov     dword ptr [esi+4], 10000h
.text:00414FF1
.text:00414FF1 loc_414FF1:                             ; CODE XREF: sub_412110+2ED8↑j
.text:00414FF1                 mov     eax, [esp+97Ch+arg_C]
.text:00414FF8                 mov     ebp, 0Ch
.text:00414FFD                 mov     esi, [eax+4]
.text:00415000                 mov     [esp+97Ch+Size], edi ; Block
.text:00415003                 mov     [esp+97Ch+var_978], esi ; Size
.text:00415007                 call    realloc
.text:0041500C                 mov     edi, [esp+97Ch+arg_C]
.text:00415013                 test    eax, eax
.text:00415015                 mov     [edi], eax
.text:00415017                 jz      loc_412526
.text:0041501D                 cmp     ebx, eax
.text:0041501F                 jz      short loc_415055
.text:00415021                 sub     eax, ebx
.text:00415023                 mov     ebx, [esp+97Ch+var_908]
.text:00415027                 add     [esp+97Ch+var_950], eax
.text:0041502B                 add     [esp+97Ch+var_904], eax
.text:0041502F                 test    ebx, ebx
.text:00415031                 jz      short loc_415037
.text:00415033                 add     [esp+97Ch+var_908], eax
.text:00415037
.text:00415037 loc_415037:                             ; CODE XREF: sub_412110+2F21↑j
.text:00415037                 mov     edx, [esp+97Ch+var_900]
.text:0041503B                 test    edx, edx
.text:0041503D                 jz      short loc_415043
.text:0041503F                 add     [esp+97Ch+var_900], eax
.text:00415043
.text:00415043 loc_415043:                             ; CODE XREF: sub_412110+2F2D↑j
.text:00415043                 mov     ebp, [esp+97Ch+var_8FC]
.text:0041504A                 test    ebp, ebp
.text:0041504C                 jz      short loc_415055
.text:0041504E                 add     [esp+97Ch+var_8FC], eax
.text:00415055
.text:00415055 loc_415055:                             ; CODE XREF: sub_412110+2F0F↑j
.text:00415055                                         ; sub_412110+2F3C↑j
.text:00415055                 mov     esi, [esp+97Ch+arg_C]
.text:0041505C                 mov     eax, [esp+97Ch+arg_C]
.text:00415063                 mov     ecx, [esp+97Ch+var_950]
.text:00415067                 mov     edi, [esi]
.text:00415069                 mov     edx, [eax+4]
.text:0041506C                 sub     ecx, edi
.text:0041506E                 add     ecx, 3
.text:00415071                 mov     ebx, edi
.text:00415073                 cmp     ecx, edx
.text:00415075                 ja      loc_414FC4
.text:0041507B
.text:0041507B loc_41507B:                             ; CODE XREF: sub_412110+2EAE↑j
.text:0041507B                 mov     [esp+97Ch+Size], 0Dh
.text:00415082                 mov     ebx, [esp+97Ch+var_950]
.text:00415086                 mov     ebp, [esp+97Ch+var_900]
.text:0041508A                 mov     edi, [esp+97Ch+var_900]
.text:0041508E                 mov     edx, ebx
.text:00415090                 sub     edx, ebp
.text:00415092                 mov     [esp+97Ch+var_970], ebx
.text:00415096                 add     ebx, 3
.text:00415099                 mov     [esp+97Ch+var_974], edx
.text:0041509D                 mov     [esp+97Ch+var_978], edi
.text:004150A1                 call    sub_40EF30
.text:004150A6                 mov     [esp+97Ch+var_950], ebx
.text:004150AA                 jmp     loc_412E58
.text:004150AF ; ---------------------------------------------------------------------------
.text:004150AF
.text:004150AF loc_4150AF:                             ; CODE XREF: sub_412110+2E88↑j
.text:004150AF                 cmp     [esp+97Ch+var_938], 1
.text:004150B4                 mov     [esp+97Ch+var_93C], 14h
.text:004150BC                 jg      loc_41517A
.text:004150C2                 mov     [esp+97Ch+var_93C], 0Ah
.text:004150CA                 mov     ecx, [esp+97Ch+arg_C]
.text:004150D1                 mov     eax, [esp+97Ch+var_950]
.text:004150D5                 mov     edi, [ecx]
.text:004150D7                 mov     edx, [ecx+4]
.text:004150DA                 sub     eax, edi
.text:004150DC                 mov     ebx, edi
.text:004150DE                 add     eax, 0Ah
.text:004150E1
.text:004150E1 loc_4150E1:                             ; CODE XREF: sub_412110+308B↓j
.text:004150E1                 cmp     eax, edx
.text:004150E3                 jbe     loc_4151A0
.text:004150E9                 cmp     edx, 10000h
.text:004150EF                 mov     ebp, 0Fh
.text:004150F4                 jz      loc_412526
.text:004150FA                 mov     esi, [esp+97Ch+arg_C]
.text:00415101                 lea     ebp, [edx+edx]
.text:00415104                 cmp     ebp, 10000h
.text:0041510A                 mov     [esi+4], ebp
.text:0041510D                 jbe     short loc_415116
.text:0041510F                 mov     dword ptr [esi+4], 10000h
.text:00415116
.text:00415116 loc_415116:                             ; CODE XREF: sub_412110+2FFD↑j
.text:00415116                 mov     eax, [esp+97Ch+arg_C]
.text:0041511D                 mov     ebp, 0Ch
.text:00415122                 mov     esi, [eax+4]
.text:00415125                 mov     [esp+97Ch+Size], edi ; Block
.text:00415128                 mov     [esp+97Ch+var_978], esi ; Size
.text:0041512C                 call    realloc
.text:00415131                 mov     edi, [esp+97Ch+arg_C]
.text:00415138                 test    eax, eax
.text:0041513A                 mov     [edi], eax
.text:0041513C                 jz      loc_412526
.text:00415142                 cmp     ebx, eax
.text:00415144                 jz      short loc_41517A
.text:00415146                 mov     edx, [esp+97Ch+var_908]
.text:0041514A                 sub     eax, ebx
.text:0041514C                 add     [esp+97Ch+var_950], eax
.text:00415150                 add     [esp+97Ch+var_904], eax
.text:00415154                 test    edx, edx
.text:00415156                 jz      short loc_41515C
.text:00415158                 add     [esp+97Ch+var_908], eax
.text:0041515C
.text:0041515C loc_41515C:                             ; CODE XREF: sub_412110+3046↑j
.text:0041515C                 mov     ebx, [esp+97Ch+var_900]
.text:00415160                 test    ebx, ebx
.text:00415162                 jz      short loc_415168
.text:00415164                 add     [esp+97Ch+var_900], eax
.text:00415168
.text:00415168 loc_415168:                             ; CODE XREF: sub_412110+3052↑j
.text:00415168                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041516F                 test    ecx, ecx
.text:00415171                 jz      short loc_41517A
.text:00415173                 add     [esp+97Ch+var_8FC], eax
.text:0041517A
.text:0041517A loc_41517A:                             ; CODE XREF: sub_412110+2FAC↑j
.text:0041517A                                         ; sub_412110+3034↑j ...
.text:0041517A                 mov     eax, [esp+97Ch+arg_C]
.text:00415181                 mov     ebp, [esp+97Ch+arg_C]
.text:00415188                 mov     esi, [esp+97Ch+var_93C]
.text:0041518C                 mov     edi, [eax]
.text:0041518E                 mov     eax, [esp+97Ch+var_950]
.text:00415192                 mov     edx, [ebp+4]
.text:00415195                 mov     ebx, edi
.text:00415197                 sub     eax, edi
.text:00415199                 add     eax, esi
.text:0041519B                 jmp     loc_4150E1
.text:004151A0 ; ---------------------------------------------------------------------------
.text:004151A0
.text:004151A0 loc_4151A0:                             ; CODE XREF: sub_412110+2FD3↑j
.text:004151A0                 mov     edi, [esp+97Ch+var_950]
.text:004151A4                 mov     edx, [esp+97Ch+var_934]
.text:004151A8                 mov     [esp+97Ch+var_96C], edi
.text:004151AC                 add     edi, 5
.text:004151AF                 cmp     [esp+97Ch+var_938], 1
.text:004151B4                 mov     [esp+97Ch+var_970], edx
.text:004151B8                 jle     loc_415282
.text:004151BE                 mov     ebx, [esp+97Ch+var_900]
.text:004151C2                 mov     eax, edi
.text:004151C4                 sub     eax, ebx
.text:004151C6                 add     eax, 2
.text:004151C9
.text:004151C9 loc_4151C9:                             ; CODE XREF: sub_412110+317D↓j
.text:004151C9                 mov     [esp+97Ch+var_974], eax
.text:004151CD                 mov     esi, [esp+97Ch+var_900]
.text:004151D1                 mov     [esp+97Ch+Size], 15h
.text:004151D8                 mov     [esp+97Ch+var_978], esi
.text:004151DC                 call    sub_40EF70
.text:004151E1                 mov     [esp+97Ch+var_950], edi
.text:004151E5                 mov     ebp, [esp+97Ch+var_934]
.text:004151E9                 mov     [esp+97Ch+var_96C], edi
.text:004151ED                 mov     edi, [esp+97Ch+var_900]
.text:004151F1                 mov     [esp+97Ch+var_970], ebp
.text:004151F5                 mov     [esp+97Ch+var_974], 5
.text:004151FD                 mov     [esp+97Ch+var_978], edi
.text:00415201                 mov     [esp+97Ch+Size], 17h
.text:00415208                 call    sub_40EF70
.text:0041520D                 add     [esp+97Ch+var_950], 5
.text:00415212                 cmp     [esp+97Ch+var_938], 1
.text:00415217                 jle     loc_412E58
.text:0041521D                 mov     [esp+97Ch+Size], 16h
.text:00415224                 mov     edx, [esp+97Ch+var_900]
.text:00415228                 mov     esi, [esp+97Ch+var_950]
.text:0041522C                 mov     edi, [esp+97Ch+var_938]
.text:00415230                 mov     ebp, [esp+97Ch+var_950]
.text:00415234                 sub     edx, esi
.text:00415236                 add     edx, 2
.text:00415239                 dec     edi
.text:0041523A                 mov     [esp+97Ch+var_974], edx
.text:0041523E                 mov     [esp+97Ch+var_978], ebp
.text:00415242                 add     ebp, 5
.text:00415245                 mov     ebx, ebp
.text:00415247                 mov     [esp+97Ch+var_970], edi
.text:0041524B                 call    sub_40EF00
.text:00415250                 mov     [esp+97Ch+var_96C], ebp
.text:00415254                 mov     ecx, [esp+97Ch+var_900]
.text:00415258                 add     ebp, 5
.text:0041525B                 mov     [esp+97Ch+var_970], edi
.text:0041525F                 mov     eax, [esp+97Ch+var_900]
.text:00415263                 mov     [esp+97Ch+Size], 17h
.text:0041526A                 sub     ebx, ecx
.text:0041526C                 mov     [esp+97Ch+var_974], ebx
.text:00415270                 mov     [esp+97Ch+var_978], eax
.text:00415274                 call    sub_40EF70
.text:00415279                 mov     [esp+97Ch+var_950], ebp
.text:0041527D                 jmp     loc_412E58
.text:00415282 ; ---------------------------------------------------------------------------
.text:00415282
.text:00415282 loc_415282:                             ; CODE XREF: sub_412110+30A8↑j
.text:00415282                 mov     ecx, [esp+97Ch+var_900]
.text:00415286                 mov     eax, edi
.text:00415288                 sub     eax, ecx
.text:0041528A                 sub     eax, 3
.text:0041528D                 jmp     loc_4151C9
.text:00415292 ; ---------------------------------------------------------------------------
.text:00415292
.text:00415292 loc_415292:                             ; CODE XREF: sub_412110+2E7C↑j
.text:00415292                 mov     esi, [esp+97Ch+Block]
.text:00415299                 mov     ebp, 0Ah
.text:0041529E                 jmp     loc_414213
.text:004152A3 ; ---------------------------------------------------------------------------
.text:004152A3
.text:004152A3 loc_4152A3:                             ; CODE XREF: sub_412110+2E6E↑j
.text:004152A3                 mov     ebx, [esp+97Ch+arg_8]
.text:004152AA                 and     ebx, 200020h
.text:004152B0                 cmp     ebx, 20h ; ' '
.text:004152B3                 jz      loc_4136EE
.text:004152B9                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:004152C1                 jz      loc_414ED6
.text:004152C7                 mov     ecx, [esp+97Ch+var_950]
.text:004152CB                 mov     [esp+97Ch+var_900], ecx
.text:004152CF                 jmp     loc_414F84
.text:004152D4 ; ---------------------------------------------------------------------------
.text:004152D4
.text:004152D4 loc_4152D4:                             ; CODE XREF: sub_412110+2D7E↑j
.text:004152D4                 mov     edi, [esp+97Ch+var_8D0]
.text:004152DB                 cmp     edi, [esp+97Ch+var_8F4]
.text:004152E2                 jz      loc_41536C
.text:004152E8
.text:004152E8 loc_4152E8:                             ; CODE XREF: sub_412110+324E↓j
.text:004152E8                 movzx   eax, byte ptr [edi]
.text:004152EB                 inc     edi
.text:004152EC                 mov     ebx, [esp+97Ch+var_8F8]
.text:004152F3                 mov     [esp+97Ch+var_8D0], edi
.text:004152FA                 test    ebx, ebx
.text:004152FC                 mov     [esp+97Ch+var_8EC], al
.text:00415303                 jz      short loc_41531A
.text:00415305                 mov     ebp, [esp+97Ch+var_8F8]
.text:0041530C                 movzx   esi, al
.text:0041530F                 movzx   ebx, byte ptr [esi+ebp]
.text:00415313                 mov     [esp+97Ch+var_8EC], bl
.text:0041531A
.text:0041531A loc_41531A:                             ; CODE XREF: sub_412110+31F3↑j
.text:0041531A                 movzx   edx, [esp+97Ch+var_8EC]
.text:00415322                 sub     dl, 30h ; '0'
.text:00415325                 cmp     dl, 9
.text:00415328                 ja      short loc_415360
.text:0041532A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:00415332                 jg      short loc_415357
.text:00415334                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0041533C                 mov     edx, [esp+97Ch+var_938]
.text:00415340                 shr     edx, 1Fh
.text:00415343                 dec     edx
.text:00415344                 and     [esp+97Ch+var_938], edx
.text:00415348                 mov     eax, [esp+97Ch+var_938]
.text:0041534C                 lea     esi, [eax+eax*4]
.text:0041534F                 lea     ebx, [ebp+esi*2-30h]
.text:00415353                 mov     [esp+97Ch+var_938], ebx
.text:00415357
.text:00415357 loc_415357:                             ; CODE XREF: sub_412110+3222↑j
.text:00415357                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041535E                 jnz     short loc_4152E8
.text:00415360
.text:00415360 loc_415360:                             ; CODE XREF: sub_412110+3218↑j
.text:00415360                 mov     edi, [esp+97Ch+var_938]
.text:00415364                 test    edi, edi
.text:00415366                 jns     loc_414E9C
.text:0041536C
.text:0041536C loc_41536C:                             ; CODE XREF: sub_412110+31D2↑j
.text:0041536C                 mov     [esp+97Ch+var_938], 7FFFh
.text:00415374                 jmp     loc_414E9C
.text:00415379 ; ---------------------------------------------------------------------------
.text:00415379
.text:00415379 loc_415379:                             ; CODE XREF: sub_412110+22AD↑j
.text:00415379                                         ; DATA XREF: sub_412110:jpt_4143BD↑o
.text:00415379                 mov     edi, [esp+97Ch+arg_8] ; jumptable 004143BD case 124
.text:00415380                 and     edi, 0FFFF8400h
.text:00415386                 test    di, di
.text:00415389                 jz      loc_412986
.text:0041538F                 jmp     def_4143BD      ; jumptable 004143BD default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00415394 ; ---------------------------------------------------------------------------
.text:00415394
.text:00415394 loc_415394:                             ; CODE XREF: sub_412110+16F↑j
.text:00415394                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:00415394                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0041227F case 123
.text:0041539B                 and     edx, 1200h
.text:004153A1                 cmp     edx, 1200h
.text:004153A7                 jnz     def_41227F      ; jumptable 0041227F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004153AD                 jmp     loc_414DE8
.text:004153B2 ; ---------------------------------------------------------------------------
.text:004153B2
.text:004153B2 loc_4153B2:                             ; CODE XREF: sub_412110+16F↑j
.text:004153B2                                         ; DATA XREF: sub_412110:jpt_41227F↑o
.text:004153B2                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0041227F case 124
.text:004153B9                 and     esi, 0FFFF8000h
.text:004153BF                 test    si, si
.text:004153C2                 jmp     loc_412980
.text:004153C7 ; ---------------------------------------------------------------------------
.text:004153C7
.text:004153C7 loc_4153C7:                             ; CODE XREF: sub_412110+F9↑j
.text:004153C7                 mov     edi, [esp+97Ch+Block]
.text:004153CE                 mov     ebp, 0Ch
.text:004153D3                 jmp     loc_4126B0
.text:004153D8 ; ---------------------------------------------------------------------------
.text:004153D8
.text:004153D8 loc_4153D8:                             ; CODE XREF: sub_412110+D6↑j
.text:004153D8                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:004153DF                 call    malloc
.text:004153E4                 mov     ecx, [esp+97Ch+arg_C]
.text:004153EB                 mov     [ecx], eax
.text:004153ED                 jmp     loc_4121FE
.text:004153F2 ; ---------------------------------------------------------------------------
.text:004153F2
.text:004153F2 loc_4153F2:                             ; CODE XREF: sub_412110+CC↑j
.text:004153F2                 mov     ebp, [esp+97Ch+arg_C]
.text:004153F9                 mov     edi, [ebp+0]
.text:004153FC                 jmp     loc_41221D
.text:00415401 ; ---------------------------------------------------------------------------
.text:00415401
.text:00415401 loc_415401:                             ; CODE XREF: sub_412110+BA↑j
.text:00415401                 mov     [esp+97Ch+var_974], 100h ; Size
.text:00415409                 xor     ebx, ebx
.text:0041540B                 mov     [esp+97Ch+var_978], 0 ; Val
.text:00415413                 mov     [esp+97Ch+Size], offset byte_422470 ; void *
.text:0041541A                 call    memset
.text:0041541F                 nop
.text:00415420
.text:00415420 loc_415420:                             ; CODE XREF: sub_412110+333D↓j
.text:00415420                 mov     esi, ds:__mb_cur_max
.text:00415426                 cmp     dword ptr [esi], 1
.text:00415429                 jz      short loc_415466
.text:0041542B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:00415433                 mov     [esp+97Ch+Size], ebx ; C
.text:00415436                 call    _isctype
.text:0041543B
.text:0041543B loc_41543B:                             ; CODE XREF: sub_412110+3368↓j
.text:0041543B                 test    eax, eax
.text:0041543D                 jz      short loc_415446
.text:0041543F                 mov     ds:byte_422470[ebx], 1
.text:00415446
.text:00415446 loc_415446:                             ; CODE XREF: sub_412110+332D↑j
.text:00415446                 inc     ebx
.text:00415447                 cmp     ebx, 0FFh
.text:0041544D                 jle     short loc_415420
.text:0041544F                 mov     ds:byte_4224CF, 1
.text:00415456                 mov     ebx, 1
.text:0041545B                 mov     ds:dword_422460, ebx
.text:00415461                 jmp     loc_4121D0
.text:00415466 ; ---------------------------------------------------------------------------
.text:00415466
.text:00415466 loc_415466:                             ; CODE XREF: sub_412110+3319↑j
.text:00415466                 mov     ebp, ds:_pctype
.text:0041546C                 mov     edi, [ebp+0]
.text:0041546F                 movzx   eax, word ptr [edi+ebx*2]
.text:00415473                 and     eax, 107h
.text:00415478                 jmp     short loc_41543B
.text:00415478 sub_412110      endp
.text:00415478
.text:00415478 ; ---------------------------------------------------------------------------
.text:0041547A                 align 10h
.text:00415480
.text:00415480 ; =============== S U B R O U T I N E =======================================
.text:00415480
.text:00415480
.text:00415480 sub_415480      proc near               ; CODE XREF: sub_411CC0+105↑p
.text:00415480                                         ; .text:00411F06↑p ...
.text:00415480
.text:00415480 var_4C          = dword ptr -4Ch
.text:00415480 var_48          = dword ptr -48h
.text:00415480 var_44          = dword ptr -44h
.text:00415480 var_40          = dword ptr -40h
.text:00415480 var_3C          = dword ptr -3Ch
.text:00415480 var_38          = dword ptr -38h
.text:00415480 var_34          = dword ptr -34h
.text:00415480 var_30          = dword ptr -30h
.text:00415480 var_20          = dword ptr -20h
.text:00415480 var_1C          = dword ptr -1Ch
.text:00415480 var_18          = dword ptr -18h
.text:00415480 var_14          = dword ptr -14h
.text:00415480 arg_0           = dword ptr  4
.text:00415480 arg_4           = dword ptr  8
.text:00415480 arg_8           = dword ptr  0Ch
.text:00415480 arg_C           = dword ptr  10h
.text:00415480 arg_10          = dword ptr  14h
.text:00415480 arg_14          = dword ptr  18h
.text:00415480 arg_18          = dword ptr  1Ch
.text:00415480 arg_1C          = dword ptr  20h
.text:00415480 arg_20          = dword ptr  24h
.text:00415480
.text:00415480                 push    ebp
.text:00415481                 push    edi
.text:00415482                 push    esi
.text:00415483                 push    ebx
.text:00415484                 sub     esp, 3Ch
.text:00415487                 mov     edi, [esp+4Ch+arg_0]
.text:0041548B                 mov     ebx, [esp+4Ch+arg_14]
.text:0041548F                 mov     ecx, [esp+4Ch+arg_10]
.text:00415493                 mov     edx, [edi+14h]
.text:00415496                 mov     esi, [esp+4Ch+arg_18]
.text:0041549A                 mov     ebp, [edi+10h]
.text:0041549D                 mov     [esp+4Ch+var_14], edx
.text:004154A1                 mov     edx, [esp+4Ch+arg_8]
.text:004154A5                 lea     eax, [esi+ebx]
.text:004154A8                 add     edx, ecx
.text:004154AA                 test    ebx, ebx
.text:004154AC                 mov     [esp+4Ch+var_18], edx
.text:004154B0                 js      loc_415650
.text:004154B6                 cmp     ebx, edx
.text:004154B8                 jg      loc_415650
.text:004154BE                 test    eax, eax
.text:004154C0                 js      loc_415711
.text:004154C6                 cmp     eax, [esp+4Ch+var_18]
.text:004154CA                 jle     short loc_4154D2
.text:004154CC                 mov     esi, [esp+4Ch+var_18]
.text:004154D0                 sub     esi, ebx
.text:004154D2
.text:004154D2 loc_4154D2:                             ; CODE XREF: sub_415480+4A↑j
.text:004154D2                                         ; sub_415480+295↓j
.text:004154D2                 mov     eax, [edi+8]
.text:004154D5                 test    eax, eax
.text:004154D7                 jz      short loc_415500
.text:004154D9                 test    esi, esi
.text:004154DB                 jle     short loc_415500
.text:004154DD                 mov     ecx, [edi]
.text:004154DF                 movzx   eax, byte ptr [ecx]
.text:004154E2                 cmp     al, 0Bh
.text:004154E4                 jz      loc_4156FA
.text:004154EA                 cmp     al, 9
.text:004154EC                 jz      loc_4156F0
.text:004154F2                 lea     esi, [esi+0]
.text:004154F9                 lea     edi, [edi+0]
.text:00415500
.text:00415500 loc_415500:                             ; CODE XREF: sub_415480+57↑j
.text:00415500                                         ; sub_415480+5B↑j ...
.text:00415500                 test    ebp, ebp
.text:00415502                 jz      loc_4155C0
.text:00415508                 test    byte ptr [edi+1Ch], 8
.text:0041550C                 jz      loc_4156D5
.text:00415512
.text:00415512 loc_415512:                             ; CODE XREF: sub_415480+1AF↓j
.text:00415512                                         ; sub_415480+1B6↓j ...
.text:00415512                 test    ebp, ebp
.text:00415514                 jz      loc_4155C0
.text:0041551A                 cmp     ebx, [esp+4Ch+var_18]
.text:0041551E                 jge     loc_4155C0
.text:00415524                 test    byte ptr [edi+1Ch], 1
.text:00415528                 jnz     loc_4155C0
.text:0041552E                 test    esi, esi
.text:00415530                 jle     loc_415684
.text:00415536                 cmp     ebx, [esp+4Ch+arg_8]
.text:0041553A                 mov     [esp+4Ch+var_20], 0
.text:00415542                 mov     [esp+4Ch+var_1C], esi
.text:00415546                 jge     loc_415672
.text:0041554C                 lea     edx, [esi+ebx]
.text:0041554F                 cmp     edx, [esp+4Ch+arg_8]
.text:00415553                 jl      short loc_415563
.text:00415555                 mov     ecx, [esp+4Ch+arg_8]
.text:00415559                 mov     edx, esi
.text:0041555B                 sub     ecx, ebx
.text:0041555D                 sub     edx, ecx
.text:0041555F                 mov     [esp+4Ch+var_20], edx
.text:00415563
.text:00415563 loc_415563:                             ; CODE XREF: sub_415480+D3↑j
.text:00415563                 mov     edx, [esp+4Ch+arg_4]
.text:00415567                 add     edx, ebx
.text:00415569
.text:00415569 loc_415569:                             ; CODE XREF: sub_415480+1FF↓j
.text:00415569                 mov     ecx, [esp+4Ch+var_14]
.text:0041556D                 test    ecx, ecx
.text:0041556F                 jz      loc_415657
.text:00415575                 cmp     esi, [esp+4Ch+var_20]
.text:00415579                 jle     short loc_4155A9
.text:0041557B                 movzx   eax, byte ptr [edx]
.text:0041557E                 inc     edx
.text:0041557F                 mov     ecx, [esp+4Ch+var_14]
.text:00415583                 movzx   ecx, byte ptr [eax+ecx]
.text:00415587                 cmp     byte ptr [ecx+ebp], 0
.text:0041558B                 jnz     short loc_4155A9
.text:0041558D                 lea     esi, [esi+0]
.text:00415590
.text:00415590 loc_415590:                             ; CODE XREF: sub_415480+127↓j
.text:00415590                 dec     esi
.text:00415591                 cmp     esi, [esp+4Ch+var_20]
.text:00415595                 jle     short loc_4155A9
.text:00415597                 movzx   eax, byte ptr [edx]
.text:0041559A                 inc     edx
.text:0041559B                 mov     ecx, [esp+4Ch+var_14]
.text:0041559F                 movzx   eax, byte ptr [eax+ecx]
.text:004155A3                 cmp     byte ptr [eax+ebp], 0
.text:004155A7                 jz      short loc_415590
.text:004155A9
.text:004155A9 loc_4155A9:                             ; CODE XREF: sub_415480+F9↑j
.text:004155A9                                         ; sub_415480+10B↑j ...
.text:004155A9                 sub     [esp+4Ch+var_1C], esi
.text:004155AD                 mov     edx, [esp+4Ch+var_1C]
.text:004155B1                 add     ebx, edx
.text:004155B3                 lea     esi, [esi+0]
.text:004155B9                 lea     edi, [edi+0]
.text:004155C0
.text:004155C0 loc_4155C0:                             ; CODE XREF: sub_415480+82↑j
.text:004155C0                                         ; sub_415480+94↑j ...
.text:004155C0                 test    esi, esi
.text:004155C2                 js      short loc_4155CA
.text:004155C4                 cmp     ebx, [esp+4Ch+var_18]
.text:004155C8                 jz      short loc_415640
.text:004155CA
.text:004155CA loc_4155CA:                             ; CODE XREF: sub_415480+142↑j
.text:004155CA                                         ; sub_415480+1C2↓j ...
.text:004155CA                 mov     [esp+4Ch+var_38], ebx
.text:004155CE                 mov     edx, [esp+4Ch+arg_20]
.text:004155D2                 mov     ecx, [esp+4Ch+arg_1C]
.text:004155D6                 mov     [esp+4Ch+var_4C], edi
.text:004155D9                 mov     eax, [esp+4Ch+arg_10]
.text:004155DD                 mov     [esp+4Ch+var_30], edx
.text:004155E1                 mov     edx, [esp+4Ch+arg_C]
.text:004155E5                 mov     [esp+4Ch+var_34], ecx
.text:004155E9                 mov     ecx, [esp+4Ch+arg_8]
.text:004155ED                 mov     [esp+4Ch+var_3C], eax
.text:004155F1                 mov     eax, [esp+4Ch+arg_4]
.text:004155F5                 mov     [esp+4Ch+var_40], edx
.text:004155F9                 mov     [esp+4Ch+var_44], ecx
.text:004155FD                 mov     [esp+4Ch+var_48], eax
.text:00415601                 call    sub_40F200
.text:00415606                 test    eax, eax
.text:00415608                 mov     edx, ebx
.text:0041560A                 js      short loc_415616
.text:0041560C
.text:0041560C loc_41560C:                             ; CODE XREF: sub_415480+19E↓j
.text:0041560C                                         ; sub_415480+1A7↓j ...
.text:0041560C                 add     esp, 3Ch
.text:0041560F                 mov     eax, edx
.text:00415611                 pop     ebx
.text:00415612                 pop     esi
.text:00415613                 pop     edi
.text:00415614                 pop     ebp
.text:00415615                 retn
.text:00415616 ; ---------------------------------------------------------------------------
.text:00415616
.text:00415616 loc_415616:                             ; CODE XREF: sub_415480+18A↑j
.text:00415616                 cmp     eax, 0FFFFFFFEh
.text:00415619                 mov     edx, 0FFFFFFFEh
.text:0041561E                 jz      short loc_41560C
.text:00415620
.text:00415620 loc_415620:                             ; CODE XREF: sub_415480+241↓j
.text:00415620                 test    esi, esi
.text:00415622                 mov     edx, 0FFFFFFFFh
.text:00415627                 jz      short loc_41560C
.text:00415629                 test    esi, esi
.text:0041562B                 jle     short loc_415634
.text:0041562D                 dec     esi
.text:0041562E                 inc     ebx
.text:0041562F                 jmp     loc_415512
.text:00415634 ; ---------------------------------------------------------------------------
.text:00415634
.text:00415634 loc_415634:                             ; CODE XREF: sub_415480+1AB↑j
.text:00415634                 inc     esi
.text:00415635                 dec     ebx
.text:00415636                 jmp     loc_415512
.text:00415636 ; ---------------------------------------------------------------------------
.text:0041563B                 align 10h
.text:00415640
.text:00415640 loc_415640:                             ; CODE XREF: sub_415480+148↑j
.text:00415640                 test    ebp, ebp
.text:00415642                 jz      short loc_4155CA
.text:00415644                 test    byte ptr [edi+1Ch], 1
.text:00415648                 jnz     short loc_4155CA
.text:0041564A                 lea     esi, [esi+0]
.text:00415650
.text:00415650 loc_415650:                             ; CODE XREF: sub_415480+30↑j
.text:00415650                                         ; sub_415480+38↑j
.text:00415650                 mov     edx, 0FFFFFFFFh
.text:00415655                 jmp     short loc_41560C
.text:00415657 ; ---------------------------------------------------------------------------
.text:00415657
.text:00415657 loc_415657:                             ; CODE XREF: sub_415480+EF↑j
.text:00415657                                         ; sub_415480+1F0↓j
.text:00415657                 cmp     esi, [esp+4Ch+var_20]
.text:0041565B                 jle     loc_4155A9
.text:00415661                 movzx   ecx, byte ptr [edx]
.text:00415664                 inc     edx
.text:00415665                 cmp     byte ptr [ecx+ebp], 0
.text:00415669                 jnz     loc_4155A9
.text:0041566F                 dec     esi
.text:00415670                 jmp     short loc_415657
.text:00415672 ; ---------------------------------------------------------------------------
.text:00415672
.text:00415672 loc_415672:                             ; CODE XREF: sub_415480+C6↑j
.text:00415672                 mov     ecx, [esp+4Ch+arg_C]
.text:00415676                 mov     eax, [esp+4Ch+arg_8]
.text:0041567A                 sub     ecx, eax
.text:0041567C                 lea     edx, [ebx+ecx]
.text:0041567F                 jmp     loc_415569
.text:00415684 ; ---------------------------------------------------------------------------
.text:00415684
.text:00415684 loc_415684:                             ; CODE XREF: sub_415480+B0↑j
.text:00415684                 mov     ecx, [esp+4Ch+arg_8]
.text:00415688                 test    ecx, ecx
.text:0041568A                 jz      short loc_415692
.text:0041568C                 cmp     ebx, [esp+4Ch+arg_8]
.text:00415690                 jl      short loc_4156CB
.text:00415692
.text:00415692 loc_415692:                             ; CODE XREF: sub_415480+20A↑j
.text:00415692                 mov     edx, [esp+4Ch+arg_8]
.text:00415696                 mov     eax, ebx
.text:00415698                 mov     ecx, [esp+4Ch+arg_C]
.text:0041569C                 sub     eax, edx
.text:0041569E                 movzx   eax, byte ptr [eax+ecx]
.text:004156A2
.text:004156A2 loc_4156A2:                             ; CODE XREF: sub_415480+253↓j
.text:004156A2                 mov     ecx, [esp+4Ch+var_14]
.text:004156A6                 test    ecx, ecx
.text:004156A8                 jz      short loc_4156C6
.text:004156AA                 mov     edx, [esp+4Ch+var_14]
.text:004156AE                 movzx   ecx, al
.text:004156B1                 movzx   eax, byte ptr [ecx+edx]
.text:004156B5
.text:004156B5 loc_4156B5:                             ; CODE XREF: sub_415480+249↓j
.text:004156B5                 lea     edx, [eax+ebp]
.text:004156B8                 cmp     byte ptr [edx], 0
.text:004156BB                 jnz     loc_4155C0
.text:004156C1                 jmp     loc_415620
.text:004156C6 ; ---------------------------------------------------------------------------
.text:004156C6
.text:004156C6 loc_4156C6:                             ; CODE XREF: sub_415480+228↑j
.text:004156C6                 movzx   eax, al
.text:004156C9                 jmp     short loc_4156B5
.text:004156CB ; ---------------------------------------------------------------------------
.text:004156CB
.text:004156CB loc_4156CB:                             ; CODE XREF: sub_415480+210↑j
.text:004156CB                 mov     edx, [esp+4Ch+arg_4]
.text:004156CF                 movzx   eax, byte ptr [ebx+edx]
.text:004156D3                 jmp     short loc_4156A2
.text:004156D5 ; ---------------------------------------------------------------------------
.text:004156D5
.text:004156D5 loc_4156D5:                             ; CODE XREF: sub_415480+8C↑j
.text:004156D5                 mov     [esp+4Ch+var_4C], edi
.text:004156D8                 call    sub_411B30
.text:004156DD                 cmp     eax, 0FFFFFFFEh
.text:004156E0                 mov     edx, 0FFFFFFFEh
.text:004156E5                 jnz     loc_415512
.text:004156EB                 jmp     loc_41560C
.text:004156F0 ; ---------------------------------------------------------------------------
.text:004156F0
.text:004156F0 loc_4156F0:                             ; CODE XREF: sub_415480+6C↑j
.text:004156F0                 test    byte ptr [edi+1Ch], 80h
.text:004156F4                 jnz     loc_415500
.text:004156FA
.text:004156FA loc_4156FA:                             ; CODE XREF: sub_415480+64↑j
.text:004156FA                 test    ebx, ebx
.text:004156FC                 mov     edx, 0FFFFFFFFh
.text:00415701                 jg      loc_41560C
.text:00415707                 mov     esi, 1
.text:0041570C                 jmp     loc_415500
.text:00415711 ; ---------------------------------------------------------------------------
.text:00415711
.text:00415711 loc_415711:                             ; CODE XREF: sub_415480+40↑j
.text:00415711                 mov     esi, ebx
.text:00415713                 neg     esi
.text:00415715                 jmp     loc_4154D2
.text:00415715 sub_415480      endp
.text:00415715
.text:00415715 ; ---------------------------------------------------------------------------
.text:0041571A                 align 10h
.text:00415720
.text:00415720 ; =============== S U B R O U T I N E =======================================
.text:00415720
.text:00415720
.text:00415720 sub_415720      proc near               ; CODE XREF: sub_411B30↑j
.text:00415720
.text:00415720 Size            = dword ptr -6Ch
.text:00415720 Val             = dword ptr -68h
.text:00415720 var_64          = dword ptr -64h
.text:00415720 var_4D          = byte ptr -4Dh
.text:00415720 var_4C          = byte ptr -4Ch
.text:00415720 var_30          = dword ptr -30h
.text:00415720 Src             = dword ptr -2Ch
.text:00415720 var_28          = dword ptr -28h
.text:00415720 var_24          = dword ptr -24h
.text:00415720 arg_0           = dword ptr  4
.text:00415720
.text:00415720                 push    ebp
.text:00415721                 push    edi
.text:00415722                 push    esi
.text:00415723                 push    ebx
.text:00415724                 sub     esp, 5Ch
.text:00415727                 mov     ebp, [esp+6Ch+arg_0]
.text:0041572B                 mov     [esp+6Ch+var_4C], 1
.text:00415730                 mov     [esp+6Ch+var_4D], 0
.text:00415735                 mov     ecx, [ebp+0]
.text:00415738                 mov     eax, [ebp+8]
.text:0041573B                 mov     esi, [ebp+10h]
.text:0041573E                 mov     edi, ecx
.text:00415740                 add     eax, ecx
.text:00415742                 mov     [esp+6Ch+var_30], eax
.text:00415746                 mov     [esp+6Ch+Size], 14h ; Size
.text:0041574D                 call    malloc
.text:00415752                 mov     [esp+6Ch+Src], eax
.text:00415756                 test    eax, eax
.text:00415758                 mov     edx, 0FFFFFFFEh
.text:0041575D                 jz      loc_415842
.text:00415763                 mov     [esp+6Ch+var_28], 5
.text:0041576B                 mov     [esp+6Ch+var_24], 0
.text:00415773                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0041577B                 mov     [esp+6Ch+Val], 0 ; Val
.text:00415783                 mov     [esp+6Ch+Size], esi ; void *
.text:00415786                 call    memset
.text:0041578B                 movzx   edx, byte ptr [ebp+1Ch]
.text:0041578F                 or      dl, 8
.text:00415792                 and     dl, 0FEh
.text:00415795                 mov     [ebp+1Ch], dl
.text:00415798
.text:00415798 loc_415798:                             ; CODE XREF: sub_415720+9A↓j
.text:00415798                                         ; sub_415720+13D↓j ...
.text:00415798                 cmp     edi, [esp+6Ch+var_30] ; jumptable 004157BA cases 0,9-12,20,26-29
.text:0041579C                 jz      loc_415AA0
.text:004157A2                 movzx   eax, byte ptr [edi]
.text:004157A5                 cmp     al, 1
.text:004157A7                 jz      loc_415AA0
.text:004157AD                 movzx   eax, al
.text:004157B0                 inc     edi
.text:004157B1                 cmp     eax, 1Dh        ; switch 30 cases
.text:004157B4                 ja      def_4157BA      ; jumptable 004157BA default case, case 1
.text:004157BA                 jmp     ds:jpt_4157BA[eax*4] ; switch jump
.text:004157BA ; ---------------------------------------------------------------------------
.text:004157C1                 align 4
.text:004157C4 jpt_4157BA      dd offset loc_415798    ; DATA XREF: sub_415720+9A↑r
.text:004157C4                 dd offset def_4157BA    ; jump table for switch statement
.text:004157C4                 dd offset loc_41584C
.text:004157C4                 dd offset loc_415862
.text:004157C4                 dd offset loc_415890
.text:004157C4                 dd offset loc_4158C8
.text:004157C4                 dd offset loc_41592C
.text:004157C4                 dd offset loc_41592C
.text:004157C4                 dd offset loc_41583C
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_415934
.text:004157C4                 dd offset loc_415934
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_4159CE
.text:004157C4                 dd offset loc_4159F5
.text:004157C4                 dd offset loc_415A53
.text:004157C4                 dd offset loc_415A5B
.text:004157C4                 dd offset loc_415A7D
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:004157C4                 dd offset loc_415798
.text:0041583C ; ---------------------------------------------------------------------------
.text:0041583C
.text:0041583C loc_41583C:                             ; CODE XREF: sub_415720+9A↑j
.text:0041583C                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:0041583C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 004157BA case 8
.text:00415840
.text:00415840 loc_415840:                             ; CODE XREF: sub_415720+16E↓j
.text:00415840                                         ; sub_415720+3C8↓j
.text:00415840                 xor     edx, edx
.text:00415842
.text:00415842 loc_415842:                             ; CODE XREF: sub_415720+3D↑j
.text:00415842                                         ; sub_415720+2A3↓j
.text:00415842                 add     esp, 5Ch
.text:00415845                 mov     eax, edx
.text:00415847                 pop     ebx
.text:00415848                 pop     esi
.text:00415849                 pop     edi
.text:0041584A                 pop     ebp
.text:0041584B                 retn
.text:0041584C ; ---------------------------------------------------------------------------
.text:0041584C
.text:0041584C loc_41584C:                             ; CODE XREF: sub_415720+9A↑j
.text:0041584C                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:0041584C                 movzx   ecx, byte ptr [edi+1] ; jumptable 004157BA case 2
.text:00415850                 mov     byte ptr [ecx+esi], 1
.text:00415854
.text:00415854 loc_415854:                             ; CODE XREF: sub_415720+166↓j
.text:00415854                                         ; sub_415720+16C↓j ...
.text:00415854                 mov     [esp+6Ch+var_4C], 0
.text:00415859                 mov     edi, [esp+6Ch+var_30]
.text:0041585D                 jmp     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415862 ; ---------------------------------------------------------------------------
.text:00415862
.text:00415862 loc_415862:                             ; CODE XREF: sub_415720+9A↑j
.text:00415862                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:00415862                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 004157BA case 3
.text:00415866                 xor     ebx, ebx
.text:00415868                 nop
.text:00415869                 lea     esi, [esi+0]
.text:00415870
.text:00415870 loc_415870:                             ; CODE XREF: sub_415720+15B↓j
.text:00415870                 mov     byte ptr [ebx+esi], 1
.text:00415874                 inc     ebx
.text:00415875                 cmp     ebx, 0FFh
.text:0041587B                 jle     short loc_415870
.text:0041587D                 test    byte ptr [ebp+0Ch], 40h
.text:00415881                 jnz     short loc_415888
.text:00415883                 mov     [esi+0Ah], al
.text:00415886                 jmp     short loc_415854
.text:00415888 ; ---------------------------------------------------------------------------
.text:00415888
.text:00415888 loc_415888:                             ; CODE XREF: sub_415720+161↑j
.text:00415888                 test    byte ptr [ebp+1Ch], 1
.text:0041588C                 jz      short loc_415854
.text:0041588E                 jmp     short loc_415840
.text:00415890 ; ---------------------------------------------------------------------------
.text:00415890
.text:00415890 loc_415890:                             ; CODE XREF: sub_415720+9A↑j
.text:00415890                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:00415890                 movzx   edx, byte ptr [edi] ; jumptable 004157BA case 4
.text:00415893                 inc     edi
.text:00415894                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0041589B                 test    ebx, ebx
.text:0041589D                 js      short loc_415854
.text:0041589F
.text:0041589F loc_41589F:                             ; CODE XREF: sub_415720+19F↓j
.text:0041589F                 test    ebx, ebx
.text:004158A1                 mov     eax, ebx
.text:004158A3                 js      short loc_4158C3
.text:004158A5
.text:004158A5 loc_4158A5:                             ; CODE XREF: sub_415720+1A6↓j
.text:004158A5                 sar     eax, 3
.text:004158A8                 mov     ecx, ebx
.text:004158AA                 movzx   edx, byte ptr [eax+edi]
.text:004158AE                 shl     eax, 3
.text:004158B1                 sub     ecx, eax
.text:004158B3                 sar     edx, cl
.text:004158B5                 test    dl, 1
.text:004158B8                 jz      short loc_4158BE
.text:004158BA                 mov     byte ptr [ebx+esi], 1
.text:004158BE
.text:004158BE loc_4158BE:                             ; CODE XREF: sub_415720+198↑j
.text:004158BE                 dec     ebx
.text:004158BF                 jns     short loc_41589F
.text:004158C1                 jmp     short loc_415854
.text:004158C3 ; ---------------------------------------------------------------------------
.text:004158C3
.text:004158C3 loc_4158C3:                             ; CODE XREF: sub_415720+183↑j
.text:004158C3                 lea     eax, [ebx+7]
.text:004158C6                 jmp     short loc_4158A5
.text:004158C8 ; ---------------------------------------------------------------------------
.text:004158C8
.text:004158C8 loc_4158C8:                             ; CODE XREF: sub_415720+9A↑j
.text:004158C8                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:004158C8                 movzx   edx, byte ptr [edi] ; jumptable 004157BA case 5
.text:004158CB                 movzx   ecx, dl
.text:004158CE                 lea     ebx, ds:0[ecx*8]
.text:004158D5                 cmp     ebx, 0FFh
.text:004158DB                 jg      short loc_4158ED
.text:004158DD
.text:004158DD loc_4158DD:                             ; CODE XREF: sub_415720+1C8↓j
.text:004158DD                 mov     byte ptr [ebx+esi], 1
.text:004158E1                 inc     ebx
.text:004158E2                 cmp     ebx, 0FFh
.text:004158E8                 jle     short loc_4158DD
.text:004158EA                 movzx   edx, byte ptr [edi]
.text:004158ED
.text:004158ED loc_4158ED:                             ; CODE XREF: sub_415720+1BB↑j
.text:004158ED                 movzx   ecx, dl
.text:004158F0                 inc     edi
.text:004158F1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:004158F8                 test    ebx, ebx
.text:004158FA                 js      loc_415854
.text:00415900
.text:00415900 loc_415900:                             ; CODE XREF: sub_415720+200↓j
.text:00415900                 test    ebx, ebx
.text:00415902                 mov     eax, ebx
.text:00415904                 js      short loc_415927
.text:00415906
.text:00415906 loc_415906:                             ; CODE XREF: sub_415720+20A↓j
.text:00415906                 sar     eax, 3
.text:00415909                 mov     ecx, ebx
.text:0041590B                 movzx   edx, byte ptr [eax+edi]
.text:0041590F                 shl     eax, 3
.text:00415912                 sub     ecx, eax
.text:00415914                 sar     edx, cl
.text:00415916                 test    dl, 1
.text:00415919                 jnz     short loc_41591F
.text:0041591B                 mov     byte ptr [ebx+esi], 1
.text:0041591F
.text:0041591F loc_41591F:                             ; CODE XREF: sub_415720+1F9↑j
.text:0041591F                 dec     ebx
.text:00415920                 jns     short loc_415900
.text:00415922                 jmp     loc_415854
.text:00415927 ; ---------------------------------------------------------------------------
.text:00415927
.text:00415927 loc_415927:                             ; CODE XREF: sub_415720+1E4↑j
.text:00415927                 lea     eax, [ebx+7]
.text:0041592A                 jmp     short loc_415906
.text:0041592C ; ---------------------------------------------------------------------------
.text:0041592C
.text:0041592C loc_41592C:                             ; CODE XREF: sub_415720+9A↑j
.text:0041592C                                         ; sub_415720+251↓j
.text:0041592C                                         ; DATA XREF: ...
.text:0041592C                 add     edi, 2          ; jumptable 004157BA cases 6,7
.text:0041592F                 jmp     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415934 ; ---------------------------------------------------------------------------
.text:00415934
.text:00415934 loc_415934:                             ; CODE XREF: sub_415720+9A↑j
.text:00415934                                         ; sub_415720+2D0↓j
.text:00415934                                         ; DATA XREF: ...
.text:00415934                 movsx   ecx, byte ptr [edi+1] ; jumptable 004157BA cases 15,16
.text:00415938                 movzx   edx, byte ptr [edi]
.text:0041593B                 add     edi, 2
.text:0041593E                 shl     ecx, 8
.text:00415941                 add     edx, ecx
.text:00415943                 lea     ebx, [edx+edi]
.text:00415946                 cmp     ebx, [esp+6Ch+var_30]
.text:0041594A                 jnb     short loc_4159C8
.text:0041594C                 mov     ecx, [esp+6Ch+var_24]
.text:00415950                 cmp     ecx, [esp+6Ch+var_28]
.text:00415954                 jz      short loc_415973
.text:00415956
.text:00415956 loc_415956:                             ; CODE XREF: sub_415720+29C↓j
.text:00415956                 mov     edx, [esp+6Ch+Src]
.text:0041595A                 mov     [edx+ecx*4], ebx
.text:0041595D                 inc     [esp+6Ch+var_24]
.text:00415961
.text:00415961 loc_415961:                             ; CODE XREF: sub_415720+2AC↓j
.text:00415961                 cmp     [esp+6Ch+var_4D], 0
.text:00415966                 jz      loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:0041596C                 mov     [esp+6Ch+var_4D], 0
.text:00415971                 jmp     short loc_41592C ; jumptable 004157BA cases 6,7
.text:00415973 ; ---------------------------------------------------------------------------
.text:00415973
.text:00415973 loc_415973:                             ; CODE XREF: sub_415720+234↑j
.text:00415973                 mov     eax, dword_421080
.text:00415978                 lea     edx, [eax+eax*8]
.text:0041597B                 lea     edx, [eax+edx*2]
.text:0041597E                 cmp     ecx, edx
.text:00415980                 ja      short loc_4159BE
.text:00415982                 lea     edx, ds:0[ecx*8]
.text:00415989                 mov     [esp+6Ch+Size], edx ; Size
.text:0041598C                 call    malloc
.text:00415991                 mov     [esp+6Ch+Size], eax ; void *
.text:00415994                 mov     ecx, [esp+6Ch+var_28]
.text:00415998                 shl     ecx, 2
.text:0041599B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0041599F                 mov     ecx, [esp+6Ch+Src]
.text:004159A3                 mov     [esp+6Ch+Val], ecx ; Src
.text:004159A7                 call    memcpy
.text:004159AC                 mov     [esp+6Ch+Src], eax
.text:004159B0                 test    eax, eax
.text:004159B2                 jz      short loc_4159BE
.text:004159B4                 shl     [esp+6Ch+var_28], 1
.text:004159B8                 mov     ecx, [esp+6Ch+var_24]
.text:004159BC                 jmp     short loc_415956
.text:004159BE ; ---------------------------------------------------------------------------
.text:004159BE
.text:004159BE loc_4159BE:                             ; CODE XREF: sub_415720+260↑j
.text:004159BE                                         ; sub_415720+292↑j
.text:004159BE                 mov     edx, 0FFFFFFFEh
.text:004159C3                 jmp     loc_415842
.text:004159C8 ; ---------------------------------------------------------------------------
.text:004159C8
.text:004159C8 loc_4159C8:                             ; CODE XREF: sub_415720+22A↑j
.text:004159C8                 or      byte ptr [ebp+1Ch], 1
.text:004159CC                 jmp     short loc_415961
.text:004159CE ; ---------------------------------------------------------------------------
.text:004159CE
.text:004159CE loc_4159CE:                             ; CODE XREF: sub_415720+9A↑j
.text:004159CE                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:004159CE                 add     edi, 2          ; jumptable 004157BA case 21
.text:004159D1                 movsx   ecx, byte ptr [edi+1]
.text:004159D5                 movzx   ebx, byte ptr [edi]
.text:004159D8                 add     edi, 2
.text:004159DB                 shl     ecx, 8
.text:004159DE                 add     ebx, ecx
.text:004159E0                 test    ebx, ebx
.text:004159E2                 jnz     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:004159E8                 mov     [esp+6Ch+var_4D], 1
.text:004159ED                 sub     edi, 4
.text:004159F0                 jmp     loc_415934      ; jumptable 004157BA cases 15,16
.text:004159F5 ; ---------------------------------------------------------------------------
.text:004159F5
.text:004159F5 loc_4159F5:                             ; CODE XREF: sub_415720+9A↑j
.text:004159F5                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:004159F5                 movsx   ebx, byte ptr [edi+1] ; jumptable 004157BA cases 13,14,17-19,22
.text:004159F9                 movzx   ecx, byte ptr [edi]
.text:004159FC                 shl     ebx, 8
.text:004159FF                 add     ecx, ebx
.text:00415A01                 test    ecx, ecx
.text:00415A03                 lea     edi, [ecx+edi+2]
.text:00415A07                 jg      loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A0D                 movzx   eax, byte ptr [edi]
.text:00415A10                 cmp     al, 0Fh
.text:00415A12                 jz      short loc_415A1C
.text:00415A14                 cmp     al, 15h
.text:00415A16                 jnz     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A1C
.text:00415A1C loc_415A1C:                             ; CODE XREF: sub_415720+2F2↑j
.text:00415A1C                 inc     edi
.text:00415A1D                 movsx   ecx, byte ptr [edi+1]
.text:00415A21                 movzx   edx, byte ptr [edi]
.text:00415A24                 shl     ecx, 8
.text:00415A27                 add     edx, ecx
.text:00415A29                 lea     edi, [edx+edi+2]
.text:00415A2D                 mov     edx, [esp+6Ch+var_24]
.text:00415A31                 test    edx, edx
.text:00415A33                 jz      loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A39                 mov     ebx, [esp+6Ch+Src]
.text:00415A3D                 cmp     [ebx+edx*4-4], edi
.text:00415A41                 jnz     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A47                 lea     eax, [edx-1]
.text:00415A4A                 mov     [esp+6Ch+var_24], eax
.text:00415A4E                 jmp     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A53 ; ---------------------------------------------------------------------------
.text:00415A53
.text:00415A53 loc_415A53:                             ; CODE XREF: sub_415720+9A↑j
.text:00415A53                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:00415A53                 add     edi, 4          ; jumptable 004157BA case 23
.text:00415A56                 jmp     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415A5B ; ---------------------------------------------------------------------------
.text:00415A5B
.text:00415A5B loc_415A5B:                             ; CODE XREF: sub_415720+9A↑j
.text:00415A5B                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:00415A5B                 xor     ebx, ebx        ; jumptable 004157BA case 24
.text:00415A5D
.text:00415A5D loc_415A5D:                             ; CODE XREF: sub_415720+350↓j
.text:00415A5D                 movzx   edi, bl
.text:00415A60                 cmp     ds:byte_422470[edi], 1
.text:00415A67                 jz      short loc_415A77
.text:00415A69
.text:00415A69 loc_415A69:                             ; CODE XREF: sub_415720+35B↓j
.text:00415A69                 inc     ebx
.text:00415A6A                 cmp     ebx, 0FFh
.text:00415A70                 jle     short loc_415A5D
.text:00415A72                 jmp     loc_415854
.text:00415A77 ; ---------------------------------------------------------------------------
.text:00415A77
.text:00415A77 loc_415A77:                             ; CODE XREF: sub_415720+347↑j
.text:00415A77                 mov     byte ptr [ebx+esi], 1
.text:00415A7B                 jmp     short loc_415A69
.text:00415A7D ; ---------------------------------------------------------------------------
.text:00415A7D
.text:00415A7D loc_415A7D:                             ; CODE XREF: sub_415720+9A↑j
.text:00415A7D                                         ; DATA XREF: sub_415720:jpt_4157BA↑o
.text:00415A7D                 xor     ebx, ebx        ; jumptable 004157BA case 25
.text:00415A7F
.text:00415A7F loc_415A7F:                             ; CODE XREF: sub_415720+376↓j
.text:00415A7F                 movzx   edx, bl
.text:00415A82                 cmp     ds:byte_422470[edx], 1
.text:00415A89                 jz      short loc_415A8F
.text:00415A8B                 mov     byte ptr [ebx+esi], 1
.text:00415A8F
.text:00415A8F loc_415A8F:                             ; CODE XREF: sub_415720+369↑j
.text:00415A8F                 inc     ebx
.text:00415A90                 cmp     ebx, 0FFh
.text:00415A96                 jle     short loc_415A7F
.text:00415A98                 jmp     loc_415854
.text:00415A98 ; ---------------------------------------------------------------------------
.text:00415A9D                 align 10h
.text:00415AA0
.text:00415AA0 loc_415AA0:                             ; CODE XREF: sub_415720+7C↑j
.text:00415AA0                                         ; sub_415720+87↑j
.text:00415AA0                 mov     ecx, [esp+6Ch+var_24]
.text:00415AA4                 test    ecx, ecx
.text:00415AA6                 jz      short loc_415AD3
.text:00415AA8                 movzx   ebx, byte ptr [ebp+1Ch]
.text:00415AAC                 dec     ecx
.text:00415AAD                 movzx   eax, [esp+6Ch+var_4C]
.text:00415AB2                 or      eax, ebx
.text:00415AB4                 and     al, 1
.text:00415AB6                 and     bl, 0FEh
.text:00415AB9                 or      bl, al
.text:00415ABB                 mov     [ebp+1Ch], bl
.text:00415ABE                 mov     ebx, [esp+6Ch+Src]
.text:00415AC2                 mov     [esp+6Ch+var_4C], 1
.text:00415AC7                 mov     [esp+6Ch+var_24], ecx
.text:00415ACB                 mov     edi, [ebx+ecx*4]
.text:00415ACE                 jmp     loc_415798      ; jumptable 004157BA cases 0,9-12,20,26-29
.text:00415AD3 ; ---------------------------------------------------------------------------
.text:00415AD3
.text:00415AD3 loc_415AD3:                             ; CODE XREF: sub_415720+386↑j
.text:00415AD3                 movzx   ebx, byte ptr [ebp+1Ch]
.text:00415AD7                 movzx   eax, [esp+6Ch+var_4C]
.text:00415ADC                 or      eax, ebx
.text:00415ADE                 and     al, 1
.text:00415AE0                 and     bl, 0FEh
.text:00415AE3                 or      bl, al
.text:00415AE5                 mov     [ebp+1Ch], bl
.text:00415AE8                 jmp     loc_415840
.text:00415AED ; ---------------------------------------------------------------------------
.text:00415AED
.text:00415AED def_4157BA:                             ; CODE XREF: sub_415720+94↑j
.text:00415AED                                         ; sub_415720+9A↑j
.text:00415AED                                         ; DATA XREF: ...
.text:00415AED                 call    abort           ; jumptable 004157BA default case, case 1
.text:00415AED sub_415720      endp
.text:00415AED
.text:00415AED ; ---------------------------------------------------------------------------
.text:00415AF2                 align 10h
.text:00415B00
.text:00415B00 loc_415B00:                             ; DATA XREF: sub_415B80:loc_415C38↓o
.text:00415B00                 outsd
.text:00415B01                 jo      short near ptr loc_415B65+3
.text:00415B03                 outsb
.text:00415B04                 popa
.text:00415B05                 jz      short loc_415B41
.text:00415B07                 and     [ebp+6Eh], dh
.text:00415B0A                 popa
.text:00415B0B                 bound   ebp, [ebp+20h]
.text:00415B0F                 jz      short sub_415B80
.text:00415B11                 and     [edx+65h], dh
.text:00415B14                 jnb     short near ptr loc_415B87+3
.text:00415B16                 outsd
.text:00415B17                 jb      short near ptr loc_415B79+5
.text:00415B19                 and     [edi+6Fh], dh
.text:00415B1C                 jb      short near ptr loc_415B87+2
.text:00415B1E                 imul    ebp, [esi+67h], 72696420h
.text:00415B25                 arpl    gs:[edi+ebp*2+72h], si
.text:00415B2A                 jns     short $+2
.text:00415B2C
.text:00415B2C loc_415B2C:                             ; CODE XREF: .text:00415B2A↑j
.text:00415B2C                 nop
.text:00415B2D                 nop
.text:00415B2E                 nop
.text:00415B2F                 nop
.text:00415B30                 nop
.text:00415B31                 nop
.text:00415B32                 nop
.text:00415B33                 nop
.text:00415B34                 nop
.text:00415B35                 nop
.text:00415B36                 nop
.text:00415B37                 nop
.text:00415B38                 nop
.text:00415B39                 nop
.text:00415B3A                 nop
.text:00415B3B                 nop
.text:00415B3C                 nop
.text:00415B3D                 nop
.text:00415B3E                 nop
.text:00415B3F                 nop
.text:00415B40
.text:00415B40 loc_415B40:                             ; DATA XREF: sub_415B80:loc_415C87↓o
.text:00415B40                 outsd
.text:00415B41
.text:00415B41 loc_415B41:                             ; CODE XREF: .text:00415B05↑j
.text:00415B41                 jo      short near ptr loc_415BA7+1
.text:00415B43                 outsb
.text:00415B44                 popa
.text:00415B45                 jz      short near ptr sub_415B80+1
.text:00415B47                 and     [ebp+6Eh], dh
.text:00415B4A                 popa
.text:00415B4B                 bound   ebp, [ebp+20h]
.text:00415B4F                 jz      short near ptr loc_415BBE+2
.text:00415B51                 and     [edx+65h], dh
.text:00415B54                 arpl    [edi+72h], bp
.text:00415B57                 and     fs:[ebx+75h], ah
.text:00415B5B                 jb      short near ptr loc_415BCC+3
.text:00415B5D                 outs    dx, byte ptr gs:[esi]
.text:00415B5F                 jz      short near ptr sub_415B80+1
.text:00415B61                 ja      short loc_415BD2
.text:00415B63                 jb      short near ptr loc_415BCC+4
.text:00415B65
.text:00415B65 loc_415B65:                             ; CODE XREF: .text:00415B01↑j
.text:00415B65                 imul    ebp, [esi+67h], 72696420h
.text:00415B6C                 arpl    gs:[edi+ebp*2+72h], si
.text:00415B71                 jns     short $+2
.text:00415B73
.text:00415B73 loc_415B73:                             ; CODE XREF: .text:00415B71↑j
.text:00415B73                 lea     esi, [esi+0]
.text:00415B79
.text:00415B79 loc_415B79:                             ; CODE XREF: .text:00415B17↑j
.text:00415B79                 lea     edi, [edi+0]
.text:00415B80
.text:00415B80 ; =============== S U B R O U T I N E =======================================
.text:00415B80
.text:00415B80
.text:00415B80 ; int __cdecl sub_415B80(int, char *, int)
.text:00415B80 sub_415B80      proc near               ; CODE XREF: sub_40E810+189↑p
.text:00415B80                                         ; sub_40E810+1DB↑p ...
.text:00415B80
.text:00415B80 FileName        = dword ptr -2Ch
.text:00415B80 OpenFlag        = dword ptr -28h
.text:00415B80 var_24          = dword ptr -24h
.text:00415B80 Block           = byte ptr -1Ch
.text:00415B80 var_10          = dword ptr -10h
.text:00415B80 var_C           = dword ptr -0Ch
.text:00415B80 var_8           = dword ptr -8
.text:00415B80 var_4           = dword ptr -4
.text:00415B80 arg_0           = dword ptr  4
.text:00415B80 arg_4           = dword ptr  8
.text:00415B80 arg_8           = dword ptr  0Ch
.text:00415B80
.text:00415B80                 sub     esp, 2Ch
.text:00415B83                 mov     [esp+2Ch+var_C], esi
.text:00415B87
.text:00415B87 loc_415B87:                             ; CODE XREF: .text:00415B1C↑j
.text:00415B87                                         ; .text:00415B14↑j
.text:00415B87                 mov     esi, [esp+2Ch+arg_8]
.text:00415B8B                 mov     [esp+2Ch+var_4], ebp
.text:00415B8F                 mov     ebp, [esp+2Ch+arg_0]
.text:00415B93                 test    esi, 100h
.text:00415B99                 mov     [esp+2Ch+var_8], edi
.text:00415B9D                 mov     edi, [esp+2Ch+arg_4]
.text:00415BA1                 mov     [esp+2Ch+var_10], ebx
.text:00415BA5                 jz      short loc_415BA9
.text:00415BA7
.text:00415BA7 loc_415BA7:                             ; CODE XREF: .text:loc_415B41↑j
.text:00415BA7                 int     5               ;  - PRINT-SCREEN KEY
.text:00415BA7                                         ; automatically called by keyboard scanner when print-screen key is pressed
.text:00415BA9
.text:00415BA9 loc_415BA9:                             ; CODE XREF: sub_415B80+25↑j
.text:00415BA9                 cmp     ebp, 0FFD19553h
.text:00415BAF                 jz      loc_415CB8
.text:00415BB5                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00415BB8                 jz      loc_415CB8
.text:00415BBE
.text:00415BBE loc_415BBE:                             ; CODE XREF: .text:00415B4F↑j
.text:00415BBE                 lea     edx, [esp+2Ch+Block]
.text:00415BC2                 mov     [esp+2Ch+FileName], edx
.text:00415BC5                 call    sub_40D170
.text:00415BCA                 test    eax, eax
.text:00415BCC
.text:00415BCC loc_415BCC:                             ; CODE XREF: .text:00415B5B↑j
.text:00415BCC                                         ; .text:00415B63↑j
.text:00415BCC                 jnz     loc_415C87
.text:00415BD2
.text:00415BD2 loc_415BD2:                             ; CODE XREF: .text:00415B61↑j
.text:00415BD2                                         ; sub_415B80+133↓j
.text:00415BD2                 mov     [esp+2Ch+FileName], ebp
.text:00415BD5                 call    sub_415CE0
.text:00415BDA                 test    eax, eax
.text:00415BDC                 jnz     loc_415C66
.text:00415BE2                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00415BE6                 lea     ebp, [esp+2Ch+Block]
.text:00415BEA                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00415BED                 mov     [esp+2Ch+var_24], 0
.text:00415BF5                 call    _open
.text:00415BFA                 mov     edi, eax
.text:00415BFC                 call    _errno
.text:00415C01                 mov     esi, [eax]
.text:00415C03                 mov     [esp+2Ch+FileName], ebp
.text:00415C06                 call    sub_40D1B0
.text:00415C0B                 test    eax, eax
.text:00415C0D                 jnz     short loc_415C38
.text:00415C0F
.text:00415C0F loc_415C0F:                             ; CODE XREF: sub_415B80+E4↓j
.text:00415C0F                 lea     ebx, [esp+2Ch+Block]
.text:00415C13                 mov     [esp+2Ch+FileName], ebx ; Block
.text:00415C16                 call    sub_40D1E0
.text:00415C1B                 call    _errno
.text:00415C20                 mov     [eax], esi
.text:00415C22                 mov     eax, edi
.text:00415C24
.text:00415C24 loc_415C24:                             ; CODE XREF: sub_415B80+105↓j
.text:00415C24                                         ; sub_415B80+14C↓j
.text:00415C24                 mov     ebx, [esp+2Ch+var_10]
.text:00415C28                 mov     esi, [esp+2Ch+var_C]
.text:00415C2C                 mov     edi, [esp+2Ch+var_8]
.text:00415C30                 mov     ebp, [esp+2Ch+var_4]
.text:00415C34                 add     esp, 2Ch
.text:00415C37                 retn
.text:00415C38 ; ---------------------------------------------------------------------------
.text:00415C38
.text:00415C38 loc_415C38:                             ; CODE XREF: sub_415B80+8D↑j
.text:00415C38                 mov     [esp+2Ch+FileName], offset loc_415B00
.text:00415C3F                 call    ds:libintl_gettext
.text:00415C45                 mov     ebp, eax
.text:00415C47                 call    _errno
.text:00415C4C                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00415C50                 mov     edx, dword_421070
.text:00415C56                 mov     ecx, [eax]
.text:00415C58                 mov     [esp+2Ch+FileName], edx ; Code
.text:00415C5B                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:00415C5F                 call    sub_415D50
.text:00415C64                 jmp     short loc_415C0F
.text:00415C66 ; ---------------------------------------------------------------------------
.text:00415C66
.text:00415C66 loc_415C66:                             ; CODE XREF: sub_415B80+5C↑j
.text:00415C66                 call    _errno
.text:00415C6B                 mov     ebx, [eax]
.text:00415C6D                 lea     esi, [esp+2Ch+Block]
.text:00415C71                 mov     [esp+2Ch+FileName], esi ; Block
.text:00415C74                 call    sub_40D1E0
.text:00415C79                 call    _errno
.text:00415C7E                 mov     [eax], ebx
.text:00415C80                 mov     eax, 0FFFFFFFFh
.text:00415C85                 jmp     short loc_415C24
.text:00415C87 ; ---------------------------------------------------------------------------
.text:00415C87
.text:00415C87 loc_415C87:                             ; CODE XREF: sub_415B80:loc_415BCC↑j
.text:00415C87                 mov     [esp+2Ch+FileName], offset loc_415B40
.text:00415C8E                 call    ds:libintl_gettext
.text:00415C94                 mov     ebx, eax
.text:00415C96                 call    _errno
.text:00415C9B                 mov     [esp+2Ch+var_24], ebx ; char *
.text:00415C9F                 mov     edx, dword_421070
.text:00415CA5                 mov     ecx, [eax]
.text:00415CA7                 mov     [esp+2Ch+FileName], edx ; Code
.text:00415CAA                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:00415CAE                 call    sub_415D50
.text:00415CB3                 jmp     loc_415BD2
.text:00415CB8 ; ---------------------------------------------------------------------------
.text:00415CB8
.text:00415CB8 loc_415CB8:                             ; CODE XREF: sub_415B80+2F↑j
.text:00415CB8                                         ; sub_415B80+38↑j
.text:00415CB8                 mov     [esp+2Ch+var_24], 0
.text:00415CC0                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00415CC4                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00415CC7                 call    _open
.text:00415CCC                 jmp     loc_415C24
.text:00415CCC sub_415B80      endp
.text:00415CCC
.text:00415CCC ; ---------------------------------------------------------------------------
.text:00415CD1                 align 10h
.text:00415CE0
.text:00415CE0 ; =============== S U B R O U T I N E =======================================
.text:00415CE0
.text:00415CE0
.text:00415CE0 sub_415CE0      proc near               ; CODE XREF: sub_40E810+29D↑p
.text:00415CE0                                         ; sub_415B80+55↑p
.text:00415CE0                 sub     esp, 0Ch
.text:00415CE3                 call    _errno
.text:00415CE8                 mov     dword ptr [eax], 28h ; '('
.text:00415CEE                 mov     eax, 0FFFFFFFFh
.text:00415CF3                 add     esp, 0Ch
.text:00415CF6                 retn
.text:00415CF6 sub_415CE0      endp
.text:00415CF6
.text:00415CF6 ; ---------------------------------------------------------------------------
.text:00415CF7                 align 10h
.text:00415D00                 jmp     ds:libintl_bindtextdomain
.text:00415D00 ; ---------------------------------------------------------------------------
.text:00415D06                 align 10h
.text:00415D10                 jmp     ds:libintl_textdomain
.text:00415D10 ; ---------------------------------------------------------------------------
.text:00415D16                 align 10h
.text:00415D20                 jmp     ds:libintl_gettext
.text:00415D20 ; ---------------------------------------------------------------------------
.text:00415D26                 align 10h
.text:00415D30 ; const char aS_2[]
.text:00415D30 aS_2            db ': %s',0             ; DATA XREF: sub_415D50+B8↓o
.text:00415D30                                         ; sub_415E54+122↓o
.text:00415D35 aUnknownSystemE db 'Unknown system error',0
.text:00415D35                                         ; DATA XREF: sub_415D50:loc_415E1D↓o
.text:00415D35                                         ; sub_415E54:loc_415F8E↓o
.text:00415D4A ; const char aS_3[]
.text:00415D4A aS_3            db '%s: ',0             ; DATA XREF: sub_415D50:loc_415E24↓o
.text:00415D4F                 align 10h
.text:00415D50
.text:00415D50 ; =============== S U B R O U T I N E =======================================
.text:00415D50
.text:00415D50
.text:00415D50 ; int __cdecl sub_415D50(int Code, int ErrorMessage, char *, char)
.text:00415D50 sub_415D50      proc near               ; CODE XREF: sub_401EE0+230↑p
.text:00415D50                                         ; sub_401EE0+47F↑p ...
.text:00415D50
.text:00415D50 Stream          = dword ptr -1Ch
.text:00415D50 Format          = dword ptr -18h
.text:00415D50 ArgList         = dword ptr -14h
.text:00415D50 Code            = dword ptr  4
.text:00415D50 ErrorMessage    = dword ptr  8
.text:00415D50 arg_8           = dword ptr  0Ch
.text:00415D50 arg_C           = byte ptr  10h
.text:00415D50
.text:00415D50                 push    esi
.text:00415D51                 push    ebx
.text:00415D52                 sub     esp, 14h
.text:00415D55                 mov     edx, ds:_iob
.text:00415D5B                 mov     esi, [esp+1Ch+Code]
.text:00415D5F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00415D63                 add     edx, 20h ; ' '
.text:00415D66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415D69                 call    fflush
.text:00415D6E                 mov     eax, ds:dword_422970
.text:00415D73                 test    eax, eax
.text:00415D75                 jz      loc_415E24
.text:00415D7B                 call    eax ; dword_422970
.text:00415D7D
.text:00415D7D loc_415D7D:                             ; CODE XREF: sub_415D50+F7↓j
.text:00415D7D                 lea     edx, [esp+1Ch+arg_C]
.text:00415D81                 mov     ecx, [esp+1Ch+arg_8]
.text:00415D85                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00415D89                 mov     edx, ds:_iob
.text:00415D8F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00415D93                 add     edx, 40h ; '@'
.text:00415D96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415D99                 call    vfprintf
.text:00415D9E                 inc     ds:dword_422980
.text:00415DA4                 test    ebx, ebx
.text:00415DA6                 jnz     short loc_415DF2
.text:00415DA8
.text:00415DA8 loc_415DA8:                             ; CODE XREF: sub_415D50+CB↓j
.text:00415DA8                 mov     edx, ds:_iob
.text:00415DAE                 lea     ecx, [edx+40h]
.text:00415DB1                 mov     ebx, [ecx+4]
.text:00415DB4                 dec     ebx
.text:00415DB5                 test    ebx, ebx
.text:00415DB7                 mov     [ecx+4], ebx
.text:00415DBA                 js      short loc_415DE0
.text:00415DBC                 mov     ecx, [edx+40h]
.text:00415DBF                 mov     byte ptr [ecx], 0Ah
.text:00415DC2                 inc     dword ptr [edx+40h]
.text:00415DC5
.text:00415DC5 loc_415DC5:                             ; CODE XREF: sub_415D50+A0↓j
.text:00415DC5                 mov     edx, ds:_iob
.text:00415DCB                 add     edx, 40h ; '@'
.text:00415DCE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415DD1                 call    fflush
.text:00415DD6                 test    esi, esi
.text:00415DD8                 jnz     short loc_415E4C
.text:00415DDA                 add     esp, 14h
.text:00415DDD                 pop     ebx
.text:00415DDE                 pop     esi
.text:00415DDF                 retn
.text:00415DE0 ; ---------------------------------------------------------------------------
.text:00415DE0
.text:00415DE0 loc_415DE0:                             ; CODE XREF: sub_415D50+6A↑j
.text:00415DE0                 mov     [esp+1Ch+Format], ecx ; File
.text:00415DE4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00415DEB                 call    _flsbuf
.text:00415DF0                 jmp     short loc_415DC5
.text:00415DF2 ; ---------------------------------------------------------------------------
.text:00415DF2
.text:00415DF2 loc_415DF2:                             ; CODE XREF: sub_415D50+56↑j
.text:00415DF2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00415DF5                 call    strerror
.text:00415DFA                 test    eax, eax
.text:00415DFC                 jz      short loc_415E1D
.text:00415DFE
.text:00415DFE loc_415DFE:                             ; CODE XREF: sub_415D50+D2↓j
.text:00415DFE                 mov     [esp+1Ch+ArgList], eax
.text:00415E02                 mov     ebx, ds:_iob
.text:00415E08                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:00415E10                 add     ebx, 40h ; '@'
.text:00415E13                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00415E16                 call    fprintf
.text:00415E1B                 jmp     short loc_415DA8
.text:00415E1D ; ---------------------------------------------------------------------------
.text:00415E1D
.text:00415E1D loc_415E1D:                             ; CODE XREF: sub_415D50+AC↑j
.text:00415E1D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00415E22                 jmp     short loc_415DFE
.text:00415E24 ; ---------------------------------------------------------------------------
.text:00415E24
.text:00415E24 loc_415E24:                             ; CODE XREF: sub_415D50+25↑j
.text:00415E24                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:00415E2C                 mov     edx, ds:_iob
.text:00415E32                 mov     ecx, ds:dword_422930
.text:00415E38                 add     edx, 40h ; '@'
.text:00415E3B                 mov     [esp+1Ch+ArgList], ecx
.text:00415E3F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415E42                 call    fprintf
.text:00415E47                 jmp     loc_415D7D
.text:00415E4C ; ---------------------------------------------------------------------------
.text:00415E4C
.text:00415E4C loc_415E4C:                             ; CODE XREF: sub_415D50+88↑j
.text:00415E4C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00415E4F                 call    exit
.text:00415E4F sub_415D50      endp
.text:00415E4F
.text:00415E54
.text:00415E54 ; =============== S U B R O U T I N E =======================================
.text:00415E54
.text:00415E54
.text:00415E54 ; int __cdecl sub_415E54(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00415E54 sub_415E54      proc near               ; DATA XREF: sub_415E54+77↓o
.text:00415E54
.text:00415E54 Stream          = dword ptr -28h
.text:00415E54 Format          = dword ptr -24h
.text:00415E54 ArgList         = dword ptr -20h
.text:00415E54 var_1C          = dword ptr -1Ch
.text:00415E54 Code            = dword ptr  8
.text:00415E54 ErrorMessage    = dword ptr  0Ch
.text:00415E54 Str2            = dword ptr  10h
.text:00415E54 arg_10          = dword ptr  14h
.text:00415E54 arg_14          = dword ptr  18h
.text:00415E54 arg_18          = byte ptr  1Ch
.text:00415E54
.text:00415E54                 and     eax, 64253A73h
.text:00415E59                 cmp     ah, [eax]
.text:00415E5B
.text:00415E5B loc_415E5B:                             ; DATA XREF: sub_415E54:loc_415F95↓o
.text:00415E5B                 add     ds:55003A73h, ah
.text:00415E61                 push    edi
.text:00415E62                 push    esi
.text:00415E63                 push    ebx
.text:00415E64                 sub     esp, 1Ch
.text:00415E67                 mov     edx, ds:dword_4229B0
.text:00415E6D                 mov     ebp, [esp+28h+Code]
.text:00415E71                 mov     edi, [esp+28h+ErrorMessage]
.text:00415E75                 test    edx, edx
.text:00415E77                 mov     ebx, [esp+28h+Str2]
.text:00415E7B                 mov     esi, [esp+28h+arg_10]
.text:00415E7F                 jz      short loc_415E99
.text:00415E81                 cmp     ds:dword_422590, esi
.text:00415E87                 jz      loc_415FC0
.text:00415E8D
.text:00415E8D loc_415E8D:                             ; CODE XREF: sub_415E54+18D↓j
.text:00415E8D                 mov     ds:Str1, ebx
.text:00415E93                 mov     ds:dword_422590, esi
.text:00415E99
.text:00415E99 loc_415E99:                             ; CODE XREF: sub_415E54+2B↑j
.text:00415E99                 mov     edx, ds:_iob
.text:00415E9F                 add     edx, 20h ; ' '
.text:00415EA2                 mov     [esp+28h+Stream], edx ; Stream
.text:00415EA5                 call    fflush
.text:00415EAA                 mov     eax, ds:dword_422970
.text:00415EAF                 test    eax, eax
.text:00415EB1                 jz      loc_415F95
.text:00415EB7                 call    eax ; dword_422970
.text:00415EB9
.text:00415EB9 loc_415EB9:                             ; CODE XREF: sub_415E54+164↓j
.text:00415EB9                 test    ebx, ebx
.text:00415EBB                 jz      short loc_415EDE
.text:00415EBD                 mov     [esp+28h+ArgList], ebx
.text:00415EC1                 mov     ebx, ds:_iob
.text:00415EC7                 mov     [esp+28h+var_1C], esi
.text:00415ECB                 mov     [esp+28h+Format], offset sub_415E54 ; Format
.text:00415ED3                 add     ebx, 40h ; '@'
.text:00415ED6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00415ED9                 call    fprintf
.text:00415EDE
.text:00415EDE loc_415EDE:                             ; CODE XREF: sub_415E54+67↑j
.text:00415EDE                 mov     esi, ds:_iob
.text:00415EE4                 lea     edx, [esp+28h+arg_18]
.text:00415EE8                 mov     ecx, [esp+28h+arg_14]
.text:00415EEC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00415EF0                 add     esi, 40h ; '@'
.text:00415EF3                 mov     [esp+28h+Format], ecx ; Format
.text:00415EF7                 mov     [esp+28h+Stream], esi ; Stream
.text:00415EFA                 call    vfprintf
.text:00415EFF                 inc     ds:dword_422980
.text:00415F05                 test    edi, edi
.text:00415F07                 jnz     short loc_415F60
.text:00415F09
.text:00415F09 loc_415F09:                             ; CODE XREF: sub_415E54+135↓j
.text:00415F09                 mov     edx, ds:_iob
.text:00415F0F                 lea     ecx, [edx+40h]
.text:00415F12                 mov     ebx, [ecx+4]
.text:00415F15                 dec     ebx
.text:00415F16                 test    ebx, ebx
.text:00415F18                 mov     [ecx+4], ebx
.text:00415F1B                 js      short loc_415F47
.text:00415F1D                 mov     esi, [edx+40h]
.text:00415F20                 mov     byte ptr [esi], 0Ah
.text:00415F23                 inc     dword ptr [edx+40h]
.text:00415F26
.text:00415F26 loc_415F26:                             ; CODE XREF: sub_415E54+103↓j
.text:00415F26                 mov     ecx, ds:_iob
.text:00415F2C                 add     ecx, 40h ; '@'
.text:00415F2F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00415F32                 call    fflush
.text:00415F37                 test    ebp, ebp
.text:00415F39                 jnz     loc_415FE6
.text:00415F3F
.text:00415F3F loc_415F3F:                             ; CODE XREF: sub_415E54+173↓j
.text:00415F3F                                         ; sub_415E54+187↓j
.text:00415F3F                 add     esp, 1Ch
.text:00415F42                 pop     ebx
.text:00415F43                 pop     esi
.text:00415F44                 pop     edi
.text:00415F45                 pop     ebp
.text:00415F46                 retn
.text:00415F47 ; ---------------------------------------------------------------------------
.text:00415F47
.text:00415F47 loc_415F47:                             ; CODE XREF: sub_415E54+C7↑j
.text:00415F47                 mov     [esp+28h+Format], ecx ; File
.text:00415F4B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00415F52                 call    _flsbuf
.text:00415F57                 jmp     short loc_415F26
.text:00415F57 ; ---------------------------------------------------------------------------
.text:00415F59                 align 10h
.text:00415F60
.text:00415F60 loc_415F60:                             ; CODE XREF: sub_415E54+B3↑j
.text:00415F60                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00415F63                 call    strerror
.text:00415F68                 test    eax, eax
.text:00415F6A                 jz      short loc_415F8E
.text:00415F6C
.text:00415F6C loc_415F6C:                             ; CODE XREF: sub_415E54+13F↓j
.text:00415F6C                 mov     [esp+28h+ArgList], eax
.text:00415F70                 mov     edi, ds:_iob
.text:00415F76                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:00415F7E                 add     edi, 40h ; '@'
.text:00415F81                 mov     [esp+28h+Stream], edi ; Stream
.text:00415F84                 call    fprintf
.text:00415F89                 jmp     loc_415F09
.text:00415F8E ; ---------------------------------------------------------------------------
.text:00415F8E
.text:00415F8E loc_415F8E:                             ; CODE XREF: sub_415E54+116↑j
.text:00415F8E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00415F93                 jmp     short loc_415F6C
.text:00415F95 ; ---------------------------------------------------------------------------
.text:00415F95
.text:00415F95 loc_415F95:                             ; CODE XREF: sub_415E54+5D↑j
.text:00415F95                 mov     [esp+28h+Format], (offset loc_415E5B+1) ; Format
.text:00415F9D                 mov     ecx, ds:_iob
.text:00415FA3                 mov     edx, ds:dword_422930
.text:00415FA9                 add     ecx, 40h ; '@'
.text:00415FAC                 mov     [esp+28h+ArgList], edx
.text:00415FB0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00415FB3                 call    fprintf
.text:00415FB8                 jmp     loc_415EB9
.text:00415FB8 ; ---------------------------------------------------------------------------
.text:00415FBD                 align 10h
.text:00415FC0
.text:00415FC0 loc_415FC0:                             ; CODE XREF: sub_415E54+33↑j
.text:00415FC0                 mov     eax, ds:Str1
.text:00415FC5                 cmp     ebx, eax
.text:00415FC7                 jz      loc_415F3F
.text:00415FCD                 mov     [esp+28h+Format], ebx ; Str2
.text:00415FD1                 mov     [esp+28h+Stream], eax ; Str1
.text:00415FD4                 call    strcmp
.text:00415FD9                 test    eax, eax
.text:00415FDB                 jz      loc_415F3F
.text:00415FE1                 jmp     loc_415E8D
.text:00415FE6 ; ---------------------------------------------------------------------------
.text:00415FE6
.text:00415FE6 loc_415FE6:                             ; CODE XREF: sub_415E54+E5↑j
.text:00415FE6                 mov     [esp+28h+Stream], ebp ; Code
.text:00415FE9                 call    exit
.text:00415FE9 sub_415E54      endp ; sp-analysis failed
.text:00415FE9
.text:00415FE9 ; ---------------------------------------------------------------------------
.text:00415FEE                 align 10h
.text:00415FF0
.text:00415FF0 ; =============== S U B R O U T I N E =======================================
.text:00415FF0
.text:00415FF0
.text:00415FF0 ; int __cdecl sub_415FF0(LPCSTR, int)
.text:00415FF0 sub_415FF0      proc near               ; CODE XREF: sub_403270+1787↑p
.text:00415FF0                                         ; sub_403270+17A2↑p ...
.text:00415FF0
.text:00415FF0 lpFileName      = dword ptr -7Ch
.text:00415FF0 var_78          = dword ptr -78h
.text:00415FF0 var_74          = dword ptr -74h
.text:00415FF0 var_6C          = dword ptr -6Ch
.text:00415FF0 var_50          = dword ptr -50h
.text:00415FF0 var_4C          = dword ptr -4Ch
.text:00415FF0 var_4           = dword ptr -4
.text:00415FF0 arg_0           = dword ptr  4
.text:00415FF0 arg_4           = dword ptr  8
.text:00415FF0
.text:00415FF0                 sub     esp, 7Ch
.text:00415FF3                 mov     ecx, ds:dword_422850
.text:00415FF9                 mov     [esp+7Ch+var_4], ebx
.text:00415FFD                 mov     edx, [esp+7Ch+arg_0]
.text:00416004                 mov     ebx, [esp+7Ch+arg_4]
.text:0041600B                 test    ecx, ecx
.text:0041600D                 jnz     short loc_416027
.text:0041600F                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:00416012                 mov     [esp+7Ch+var_78], ebx ; int
.text:00416016                 call    sub_41A940
.text:0041601B                 mov     edx, eax
.text:0041601D
.text:0041601D loc_41601D:                             ; CODE XREF: sub_415FF0+56↓j
.text:0041601D                                         ; sub_415FF0+82↓j ...
.text:0041601D                 mov     ebx, [esp+7Ch+var_4]
.text:00416021                 mov     eax, edx
.text:00416023                 add     esp, 7Ch
.text:00416026                 retn
.text:00416027 ; ---------------------------------------------------------------------------
.text:00416027
.text:00416027 loc_416027:                             ; CODE XREF: sub_415FF0+1D↑j
.text:00416027                 mov     [esp+7Ch+var_78], edx ; char *
.text:0041602B                 lea     ecx, [esp+7Ch+var_6C]
.text:0041602F                 mov     [esp+7Ch+var_74], ecx ; int
.text:00416033                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:0041603A                 call    sub_41A250
.text:0041603F                 test    eax, eax
.text:00416041                 mov     edx, 0FFFFFFFFh
.text:00416046                 jnz     short loc_41601D
.text:00416048                 and     ebx, 7
.text:0041604B                 jz      short loc_416070
.text:0041604D                 mov     edx, ds:dword_4225C0
.text:00416053                 test    edx, edx
.text:00416055                 jz      loc_4160D9
.text:0041605B
.text:0041605B loc_41605B:                             ; CODE XREF: sub_415FF0+108↓j
.text:0041605B                 mov     eax, ds:dword_4225A0
.text:00416060                 test    eax, eax
.text:00416062                 jnz     short loc_416074
.text:00416064                 test    bl, 1
.text:00416067                 jz      short loc_416070
.text:00416069                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:0041606E                 jz      short loc_416074
.text:00416070
.text:00416070 loc_416070:                             ; CODE XREF: sub_415FF0+5B↑j
.text:00416070                                         ; sub_415FF0+77↑j
.text:00416070                 xor     edx, edx
.text:00416072                 jmp     short loc_41601D
.text:00416074 ; ---------------------------------------------------------------------------
.text:00416074
.text:00416074 loc_416074:                             ; CODE XREF: sub_415FF0+72↑j
.text:00416074                                         ; sub_415FF0+7E↑j
.text:00416074                 cmp     eax, [esp+7Ch+var_50]
.text:00416078                 jz      short loc_4160C9
.text:0041607A                 mov     eax, [esp+7Ch+var_4C]
.text:0041607E                 cmp     ds:dword_4225B0, eax
.text:00416084                 jz      short loc_416092
.text:00416086                 mov     [esp+7Ch+lpFileName], eax
.text:00416089                 call    sub_41A8D0
.text:0041608E                 test    eax, eax
.text:00416090                 jz      short loc_4160C1
.text:00416092
.text:00416092 loc_416092:                             ; CODE XREF: sub_415FF0+94↑j
.text:00416092                 mov     ecx, [esp+7Ch+var_6C]
.text:00416096                 lea     eax, ds:0[ebx*8]
.text:0041609D                 and     eax, ecx
.text:0041609F                 shr     eax, 3
.text:004160A2
.text:004160A2 loc_4160A2:                             ; CODE XREF: sub_415FF0+D7↓j
.text:004160A2                                         ; sub_415FF0+E7↓j
.text:004160A2                 xor     edx, edx
.text:004160A4                 cmp     eax, ebx
.text:004160A6                 jz      loc_41601D
.text:004160AC                 call    _errno
.text:004160B1                 mov     dword ptr [eax], 0Dh
.text:004160B7                 mov     edx, 0FFFFFFFFh
.text:004160BC                 jmp     loc_41601D
.text:004160C1 ; ---------------------------------------------------------------------------
.text:004160C1
.text:004160C1 loc_4160C1:                             ; CODE XREF: sub_415FF0+A0↑j
.text:004160C1                 mov     eax, [esp+7Ch+var_6C]
.text:004160C5                 and     eax, ebx
.text:004160C7                 jmp     short loc_4160A2
.text:004160C9 ; ---------------------------------------------------------------------------
.text:004160C9
.text:004160C9 loc_4160C9:                             ; CODE XREF: sub_415FF0+88↑j
.text:004160C9                 mov     edx, [esp+7Ch+var_6C]
.text:004160CD                 mov     eax, ebx
.text:004160CF                 shl     eax, 6
.text:004160D2                 and     eax, edx
.text:004160D4                 shr     eax, 6
.text:004160D7                 jmp     short loc_4160A2
.text:004160D9 ; ---------------------------------------------------------------------------
.text:004160D9
.text:004160D9 loc_4160D9:                             ; CODE XREF: sub_415FF0+65↑j
.text:004160D9                 mov     ecx, 1
.text:004160DE                 mov     ds:dword_4225C0, ecx
.text:004160E4                 call    sub_41A310
.text:004160E9                 mov     ds:dword_4225A0, eax
.text:004160EE                 call    sub_41A930
.text:004160F3                 mov     ds:dword_4225B0, eax
.text:004160F8                 jmp     loc_41605B
.text:004160F8 sub_415FF0      endp
.text:004160F8
.text:004160F8 ; ---------------------------------------------------------------------------
.text:004160FD                 align 10h
.text:00416100
.text:00416100 ; =============== S U B R O U T I N E =======================================
.text:00416100
.text:00416100
.text:00416100 sub_416100      proc near               ; CODE XREF: sub_405220+19D↑p
.text:00416100                                         ; sub_405220+44E↑p
.text:00416100
.text:00416100 hNamedPipe      = dword ptr -0Ch
.text:00416100 var_8           = dword ptr -8
.text:00416100 var_4           = dword ptr -4
.text:00416100 arg_0           = dword ptr  4
.text:00416100 arg_4           = dword ptr  8
.text:00416100
.text:00416100                 sub     esp, 0Ch
.text:00416103                 mov     edx, [esp+0Ch+arg_4]
.text:00416107                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0041610E                 mov     [esp+0Ch+var_4], edx ; int
.text:00416112                 mov     edx, [esp+0Ch+arg_0]
.text:00416116                 mov     [esp+0Ch+var_8], edx ; int
.text:0041611A                 call    sub_416370
.text:0041611F                 add     esp, 0Ch
.text:00416122                 retn
.text:00416122 sub_416100      endp
.text:00416122
.text:00416122 ; ---------------------------------------------------------------------------
.text:00416123 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00416123                                         ; DATA XREF: .text:0041620E↓o
.text:00416136 aModeO          db 'mode:      %#o',0Ah,0
.text:00416136                                         ; DATA XREF: .text:00416224↓o
.text:00416146 aUidLd          db 'uid:       %ld',0Ah,0
.text:00416146                                         ; DATA XREF: .text:00416237↓o
.text:00416156 aGidLd          db 'gid:       %ld',0Ah,0
.text:00416156                                         ; DATA XREF: .text:0041624A↓o
.text:00416166 aDevLu          db 'dev:       %lu',0Ah,0
.text:00416166                                         ; DATA XREF: .text:0041625D↓o
.text:00416176 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00416176                                         ; DATA XREF: .text:00416270↓o
.text:00416186 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00416186                                         ; DATA XREF: .text:00416286↓o
.text:00416198 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00416198                                         ; DATA XREF: .text:0041629D↓o
.text:004161A7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:004161A7                                         ; DATA XREF: .text:004162B3↓o
.text:004161B9 aAtimeLdS       db 'atime:     %ld: %s',0
.text:004161B9                                         ; DATA XREF: .text:004162D9↓o
.text:004161CC aMtimeLdS       db 'mtime:     %ld: %s',0
.text:004161CC                                         ; DATA XREF: .text:004162FB↓o
.text:004161DF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:004161DF                                         ; DATA XREF: .text:0041631D↓o
.text:004161F3                 align 10h
.text:00416200                 push    ebx
.text:00416201                 sub     esp, 18h
.text:00416204                 mov     ebx, [esp+20h]
.text:00416208                 mov     edx, [ebx+8]
.text:0041620B                 mov     ecx, [ebx+0Ch]
.text:0041620E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00416215                 mov     [esp+4], edx
.text:00416219                 mov     [esp+8], ecx
.text:0041621D                 call    printf
.text:00416222                 mov     ecx, [ebx]
.text:00416224                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0041622B                 mov     [esp+4], ecx
.text:0041622F                 call    printf
.text:00416234                 mov     edx, [ebx+1Ch]
.text:00416237                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0041623E                 mov     [esp+4], edx
.text:00416242                 call    printf
.text:00416247                 mov     ecx, [ebx+20h]
.text:0041624A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00416251                 mov     [esp+4], ecx
.text:00416255                 call    printf
.text:0041625A                 mov     edx, [ebx+10h]
.text:0041625D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00416264                 mov     [esp+4], edx
.text:00416268                 call    printf
.text:0041626D                 mov     ecx, [ebx+18h]
.text:00416270                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00416277                 mov     [esp+4], ecx
.text:0041627B                 call    printf
.text:00416280                 mov     edx, [ebx+30h]
.text:00416283                 mov     ecx, [ebx+34h]
.text:00416286                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0041628D                 mov     [esp+4], edx
.text:00416291                 mov     [esp+8], ecx
.text:00416295                 call    printf
.text:0041629A                 mov     ecx, [ebx+50h]
.text:0041629D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:004162A4                 mov     [esp+4], ecx
.text:004162A8                 call    printf
.text:004162AD                 mov     ecx, [ebx+5Ch]
.text:004162B0                 mov     edx, [ebx+58h]
.text:004162B3                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:004162BA                 mov     [esp+8], ecx
.text:004162BE                 mov     [esp+4], edx
.text:004162C2                 call    printf
.text:004162C7                 lea     edx, [ebx+38h]
.text:004162CA                 mov     [esp], edx
.text:004162CD                 call    ctime
.text:004162D2                 mov     [esp+8], eax
.text:004162D6                 mov     ecx, [ebx+38h]
.text:004162D9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:004162E0                 mov     [esp+4], ecx
.text:004162E4                 call    printf
.text:004162E9                 lea     edx, [ebx+40h]
.text:004162EC                 mov     [esp], edx
.text:004162EF                 call    ctime
.text:004162F4                 mov     [esp+8], eax
.text:004162F8                 mov     ecx, [ebx+40h]
.text:004162FB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00416302                 mov     [esp+4], ecx
.text:00416306                 call    printf
.text:0041630B                 lea     edx, [ebx+48h]
.text:0041630E                 mov     [esp], edx
.text:00416311                 call    ctime
.text:00416316                 mov     [esp+8], eax
.text:0041631A                 mov     edx, [ebx+48h]
.text:0041631D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00416324                 mov     [esp+4], edx
.text:00416328                 call    printf
.text:0041632D                 add     esp, 18h
.text:00416330                 xor     eax, eax
.text:00416332                 pop     ebx
.text:00416333                 retn
.text:00416333 ; ---------------------------------------------------------------------------
.text:00416334                 align 10h
.text:00416340 ; const char aFxstat64BadFil[]
.text:00416340 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00416340                                         ; DATA XREF: sub_416370+7B↓o
.text:00416364                 align 10h
.text:00416370
.text:00416370 ; =============== S U B R O U T I N E =======================================
.text:00416370
.text:00416370
.text:00416370 ; int __cdecl sub_416370(HANDLE hNamedPipe, int, int)
.text:00416370 sub_416370      proc near               ; CODE XREF: sub_416100+1A↑p
.text:00416370                                         ; .text:00419439↓p
.text:00416370
.text:00416370 FileHandle      = dword ptr -1Ch
.text:00416370 var_18          = dword ptr -18h
.text:00416370 var_C           = dword ptr -0Ch
.text:00416370 var_8           = dword ptr -8
.text:00416370 var_4           = dword ptr -4
.text:00416370 hNamedPipe      = dword ptr  4
.text:00416370 arg_4           = dword ptr  8
.text:00416370 arg_8           = dword ptr  0Ch
.text:00416370
.text:00416370                 sub     esp, 1Ch
.text:00416373                 mov     edx, [esp+1Ch+arg_4]
.text:00416377                 mov     [esp+1Ch+var_C], ebx
.text:0041637B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0041637F                 mov     [esp+1Ch+var_8], esi
.text:00416383                 mov     esi, [esp+1Ch+arg_8]
.text:00416387                 test    ebx, ebx
.text:00416389                 mov     [esp+1Ch+var_4], edi
.text:0041638D                 jnz     short loc_4163C7
.text:0041638F                 test    edx, edx
.text:00416391                 js      short loc_4163E7
.text:00416393                 test    esi, esi
.text:00416395                 jz      short loc_4163C7
.text:00416397                 cld
.text:00416398                 mov     eax, ebx
.text:0041639A                 mov     edi, esi
.text:0041639C                 mov     ecx, 18h
.text:004163A1                 rep stosd
.text:004163A3                 mov     [esp+1Ch+arg_4], esi ; int
.text:004163A7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:004163AA                 call    _get_osfhandle
.text:004163AF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:004163B3                 mov     ebx, [esp+1Ch+var_C]
.text:004163B7                 mov     esi, [esp+1Ch+var_8]
.text:004163BB                 mov     edi, [esp+1Ch+var_4]
.text:004163BF                 add     esp, 1Ch
.text:004163C2                 jmp     sub_416750
.text:004163C7 ; ---------------------------------------------------------------------------
.text:004163C7
.text:004163C7 loc_4163C7:                             ; CODE XREF: sub_416370+1D↑j
.text:004163C7                                         ; sub_416370+25↑j
.text:004163C7                 call    _errno
.text:004163CC                 mov     dword ptr [eax], 16h
.text:004163D2
.text:004163D2 loc_4163D2:                             ; CODE XREF: sub_416370+92↓j
.text:004163D2                 mov     ebx, [esp+1Ch+var_C]
.text:004163D6                 mov     eax, 0FFFFFFFFh
.text:004163DB                 mov     esi, [esp+1Ch+var_8]
.text:004163DF                 mov     edi, [esp+1Ch+var_4]
.text:004163E3                 add     esp, 1Ch
.text:004163E6                 retn
.text:004163E7 ; ---------------------------------------------------------------------------
.text:004163E7
.text:004163E7 loc_4163E7:                             ; CODE XREF: sub_416370+21↑j
.text:004163E7                 mov     [esp+1Ch+var_18], edx
.text:004163EB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:004163F2                 call    printf
.text:004163F7                 call    _errno
.text:004163FC                 mov     dword ptr [eax], 9
.text:00416402                 jmp     short loc_4163D2
.text:00416402 sub_416370      endp
.text:00416402
.text:00416402 ; ---------------------------------------------------------------------------
.text:00416404                 align 20h
.text:00416420 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00416420                                         ; DATA XREF: .data:off_421094↓o
.text:00416434 ; const CHAR ModuleName[]
.text:00416434 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_416460+11↓o
.text:00416434                                         ; sub_4165D0+C↓o ...
.text:00416441 ; const CHAR ProcName[]
.text:00416441 ProcName        db 'GetFileAttributesExA',0
.text:00416441                                         ; DATA XREF: sub_416460+28↓o
.text:00416456                 align 10h
.text:00416460
.text:00416460 ; =============== S U B R O U T I N E =======================================
.text:00416460
.text:00416460
.text:00416460 ; int __cdecl sub_416460(LPCSTR lpFileName, int)
.text:00416460 sub_416460      proc near               ; CODE XREF: .text:00417604↓p
.text:00416460                                         ; sub_417A00+37↓p
.text:00416460
.text:00416460 lpModuleName    = dword ptr -18Ch
.text:00416460 lpProcName      = dword ptr -188h
.text:00416460 var_184         = dword ptr -184h
.text:00416460 var_170         = dword ptr -170h
.text:00416460 var_164         = dword ptr -164h
.text:00416460 hModule         = dword ptr -160h
.text:00416460 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00416460 lpFileName      = dword ptr  4
.text:00416460 arg_4           = dword ptr  8
.text:00416460
.text:00416460                 push    ebp
.text:00416461                 push    edi
.text:00416462                 push    esi
.text:00416463                 push    ebx
.text:00416464                 sub     esp, 17Ch
.text:0041646A                 mov     ebx, [esp+18Ch+arg_4]
.text:00416471                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00416478                 call    GetModuleHandleA
.text:0041647D                 sub     esp, 4
.text:00416480                 mov     [esp+18Ch+hModule], eax
.text:00416484                 mov     edx, [esp+18Ch+hModule]
.text:00416488                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00416490                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00416493                 call    GetProcAddress
.text:00416498                 sub     esp, 8
.text:0041649B                 mov     ebp, eax
.text:0041649D                 mov     eax, [esp+18Ch+lpFileName]
.text:004164A4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:004164A7                 call    GetFileAttributesA
.text:004164AC                 sub     esp, 4
.text:004164AF                 mov     [esp+18Ch+var_164], eax
.text:004164B3                 xor     eax, eax
.text:004164B5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:004164BA                 jz      short loc_416511
.text:004164BC                 cld
.text:004164BD                 mov     ecx, 50h ; 'P'
.text:004164C2                 lea     esi, [esp+18Ch+FindFileData]
.text:004164C6                 mov     edi, esi
.text:004164C8                 test    ebp, ebp
.text:004164CA                 rep stosd
.text:004164CC                 mov     [esp+18Ch+var_170], 0
.text:004164D4                 jz      short loc_4164F5
.text:004164D6                 mov     [esp+18Ch+var_184], ebx
.text:004164DA                 mov     ecx, [esp+18Ch+lpFileName]
.text:004164E1                 mov     [esp+18Ch+lpProcName], 0
.text:004164E9                 mov     [esp+18Ch+lpModuleName], ecx
.text:004164EC                 call    ebp
.text:004164EE                 sub     esp, 0Ch
.text:004164F1                 mov     [esp+18Ch+var_170], eax
.text:004164F5
.text:004164F5 loc_4164F5:                             ; CODE XREF: sub_416460+74↑j
.text:004164F5                 mov     eax, [esp+18Ch+var_170]
.text:004164F9                 test    eax, eax
.text:004164FB                 jz      short loc_416520
.text:004164FD
.text:004164FD loc_4164FD:                             ; CODE XREF: sub_416460+131↓j
.text:004164FD                                         ; sub_416460+14B↓j
.text:004164FD                 mov     ebx, [esp+18Ch+hModule]
.text:00416501                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00416504                 call    FreeLibrary
.text:00416509                 sub     esp, 4
.text:0041650C                 mov     eax, 1
.text:00416511
.text:00416511 loc_416511:                             ; CODE XREF: sub_416460+5A↑j
.text:00416511                 add     esp, 17Ch
.text:00416517                 pop     ebx
.text:00416518                 pop     esi
.text:00416519                 pop     edi
.text:0041651A                 pop     ebp
.text:0041651B                 retn
.text:0041651B ; ---------------------------------------------------------------------------
.text:0041651C                 align 10h
.text:00416520
.text:00416520 loc_416520:                             ; CODE XREF: sub_416460+9B↑j
.text:00416520                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00416524                 mov     edx, [esp+18Ch+lpFileName]
.text:0041652B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0041652E                 call    FindFirstFileA
.text:00416533                 sub     esp, 8
.text:00416536                 xor     ecx, ecx
.text:00416538                 cmp     eax, 0FFFFFFFFh
.text:0041653B                 setnz   cl
.text:0041653E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00416542                 mov     [ebx], edi
.text:00416544                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00416548                 mov     [esp+18Ch+var_170], ecx
.text:0041654C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00416550                 mov     [ebx+8], esi
.text:00416553                 mov     [ebx+4], ecx
.text:00416556                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0041655A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0041655E                 mov     [ebx+0Ch], ebp
.text:00416561                 mov     [ebx+10h], edi
.text:00416564                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00416568                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0041656C                 mov     [ebx+18h], esi
.text:0041656F                 mov     [ebx+14h], ecx
.text:00416572                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00416576                 mov     [ebx+1Ch], ebp
.text:00416579                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0041657D                 mov     [ebx+20h], edi
.text:00416580                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00416583                 call    FindClose
.text:00416588                 sub     esp, 4
.text:0041658B                 mov     esi, [esp+18Ch+var_170]
.text:0041658F                 test    esi, esi
.text:00416591                 jnz     loc_4164FD
.text:00416597                 cld
.text:00416598                 mov     eax, [esp+18Ch+var_170]
.text:0041659C                 mov     ecx, 9
.text:004165A1                 mov     edi, ebx
.text:004165A3                 rep stosd
.text:004165A5                 mov     ebp, [esp+18Ch+var_164]
.text:004165A9                 mov     [ebx], ebp
.text:004165AB                 jmp     loc_4164FD
.text:004165AB sub_416460      endp
.text:004165AB
.text:004165AB ; ---------------------------------------------------------------------------
.text:004165B0 ; const CHAR aFindfirstfilee[]
.text:004165B0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_4165D0+23↓o
.text:004165C1 ; const char Source[]
.text:004165C1 Source          db '\*',0               ; DATA XREF: sub_4165D0:loc_41665D↓o
.text:004165C4                 align 10h
.text:004165D0
.text:004165D0 ; =============== S U B R O U T I N E =======================================
.text:004165D0
.text:004165D0
.text:004165D0 ; int __cdecl sub_4165D0(char *Str)
.text:004165D0 sub_4165D0      proc near               ; CODE XREF: .text:00417703↓p
.text:004165D0                                         ; sub_417A00+3FA↓p ...
.text:004165D0
.text:004165D0 lpLibFileName   = dword ptr -18Ch
.text:004165D0 lpProcName      = dword ptr -188h
.text:004165D0 var_184         = dword ptr -184h
.text:004165D0 var_180         = dword ptr -180h
.text:004165D0 var_17C         = dword ptr -17Ch
.text:004165D0 var_178         = dword ptr -178h
.text:004165D0 var_164         = dword ptr -164h
.text:004165D0 hModule         = dword ptr -160h
.text:004165D0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004165D0 Str             = dword ptr  4
.text:004165D0
.text:004165D0                 push    ebp
.text:004165D1                 push    edi
.text:004165D2                 xor     edi, edi
.text:004165D4                 push    esi
.text:004165D5                 push    ebx
.text:004165D6                 sub     esp, 17Ch
.text:004165DC                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; "KERNEL32.DLL"
.text:004165E3                 call    LoadLibraryA
.text:004165E8                 sub     esp, 4
.text:004165EB                 mov     [esp+18Ch+hModule], eax
.text:004165EF                 mov     ecx, [esp+18Ch+hModule]
.text:004165F3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:004165FB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:004165FE                 call    GetProcAddress
.text:00416603                 sub     esp, 8
.text:00416606                 mov     edx, [esp+18Ch+Str]
.text:0041660D                 mov     [esp+18Ch+var_164], eax
.text:00416611                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00416614                 call    strlen
.text:00416619                 lea     edx, [eax+5]
.text:0041661C                 mov     ebx, eax
.text:0041661E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00416621                 call    malloc
.text:00416626                 mov     esi, eax
.text:00416628                 test    esi, esi
.text:0041662A                 mov     eax, 1
.text:0041662F                 jz      loc_41670D
.text:00416635                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00416638                 mov     ebp, [esp+18Ch+Str]
.text:0041663F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00416643                 call    strcpy
.text:00416648                 movzx   eax, byte ptr [ebx+esi-1]
.text:0041664D                 cmp     al, 2Fh ; '/'
.text:0041664F                 jz      loc_41673B
.text:00416655                 cmp     al, 5Ch ; '\'
.text:00416657                 jz      loc_41673B
.text:0041665D
.text:0041665D loc_41665D:                             ; CODE XREF: sub_4165D0+170↓j
.text:0041665D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00416665                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00416668                 call    strcat
.text:0041666D                 mov     eax, [esp+18Ch+var_164]
.text:00416671                 test    eax, eax
.text:00416673                 jz      loc_416735
.text:00416679                 mov     [esp+18Ch+var_178], 0
.text:00416681                 lea     ebp, [esp+18Ch+FindFileData]
.text:00416685                 mov     [esp+18Ch+var_17C], 0
.text:0041668D                 mov     [esp+18Ch+var_180], 1
.text:00416695                 mov     [esp+18Ch+var_184], ebp
.text:00416699                 mov     [esp+18Ch+lpProcName], 0
.text:004166A1                 mov     [esp+18Ch+lpLibFileName], esi
.text:004166A4                 call    [esp+18Ch+var_164]
.text:004166A8                 sub     esp, 18h
.text:004166AB                 mov     ebx, eax
.text:004166AD                 cmp     eax, 0FFFFFFFFh
.text:004166B0                 jz      short loc_416718
.text:004166B2                 lea     esi, [esi+0]
.text:004166B9                 lea     edi, [edi+0]
.text:004166C0
.text:004166C0 loc_4166C0:                             ; CODE XREF: sub_4165D0+109↓j
.text:004166C0                                         ; sub_4165D0+161↓j
.text:004166C0                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:004166C5                 jz      short loc_4166C8
.text:004166C7                 inc     edi
.text:004166C8
.text:004166C8 loc_4166C8:                             ; CODE XREF: sub_4165D0+F5↑j
.text:004166C8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004166CC                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:004166CF                 call    FindNextFileA
.text:004166D4                 sub     esp, 8
.text:004166D7                 test    eax, eax
.text:004166D9                 jnz     short loc_4166C0
.text:004166DB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:004166DE                 call    FindClose
.text:004166E3                 sub     esp, 4
.text:004166E6                 mov     esi, [esp+18Ch+hModule]
.text:004166EA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:004166ED                 call    FreeLibrary
.text:004166F2                 sub     esp, 4
.text:004166F5                 mov     ebx, [esp+18Ch+Str]
.text:004166FC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:004166FF                 call    sub_4194D0
.text:00416704                 test    eax, eax
.text:00416706                 jz      short loc_41670B
.text:00416708                 add     edi, 2
.text:0041670B
.text:0041670B loc_41670B:                             ; CODE XREF: sub_4165D0+136↑j
.text:0041670B                 mov     eax, edi
.text:0041670D
.text:0041670D loc_41670D:                             ; CODE XREF: sub_4165D0+5F↑j
.text:0041670D                                         ; sub_4165D0+163↓j
.text:0041670D                 add     esp, 17Ch
.text:00416713                 pop     ebx
.text:00416714                 pop     esi
.text:00416715                 pop     edi
.text:00416716                 pop     ebp
.text:00416717                 retn
.text:00416718 ; ---------------------------------------------------------------------------
.text:00416718
.text:00416718 loc_416718:                             ; CODE XREF: sub_4165D0+E0↑j
.text:00416718                                         ; sub_4165D0+169↓j
.text:00416718                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0041671C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0041671F                 call    FindFirstFileA
.text:00416724                 mov     ebx, eax
.text:00416726                 sub     esp, 8
.text:00416729                 cmp     ebx, 0FFFFFFFFh
.text:0041672C                 mov     eax, 2
.text:00416731                 jnz     short loc_4166C0
.text:00416733                 jmp     short loc_41670D
.text:00416735 ; ---------------------------------------------------------------------------
.text:00416735
.text:00416735 loc_416735:                             ; CODE XREF: sub_4165D0+A3↑j
.text:00416735                 lea     ebp, [esp+18Ch+FindFileData]
.text:00416739                 jmp     short loc_416718
.text:0041673B ; ---------------------------------------------------------------------------
.text:0041673B
.text:0041673B loc_41673B:                             ; CODE XREF: sub_4165D0+7F↑j
.text:0041673B                                         ; sub_4165D0+87↑j
.text:0041673B                 mov     byte ptr [ebx+esi-1], 0
.text:00416740                 jmp     loc_41665D
.text:00416740 sub_4165D0      endp
.text:00416740
.text:00416740 ; ---------------------------------------------------------------------------
.text:00416745                 align 10h
.text:00416750
.text:00416750 ; =============== S U B R O U T I N E =======================================
.text:00416750
.text:00416750
.text:00416750 ; int __cdecl sub_416750(HANDLE hNamedPipe, int)
.text:00416750 sub_416750      proc near               ; CODE XREF: sub_416370+52↑j
.text:00416750                                         ; sub_418280-3B9↓p
.text:00416750
.text:00416750 hFile           = dword ptr -0ECh
.text:00416750 lpFileInformation= dword ptr -0E8h
.text:00416750 nBufferSize     = dword ptr -0E4h
.text:00416750 lpBytesRead     = dword ptr -0E0h
.text:00416750 lpTotalBytesAvail= dword ptr -0DCh
.text:00416750 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00416750 var_C4          = dword ptr -0C4h
.text:00416750 var_C0          = dword ptr -0C0h
.text:00416750 var_BC          = dword ptr -0BCh
.text:00416750 var_B8          = dword ptr -0B8h
.text:00416750 var_B4          = dword ptr -0B4h
.text:00416750 var_B0          = dword ptr -0B0h
.text:00416750 var_AC          = dword ptr -0ACh
.text:00416750 var_A8          = dword ptr -0A8h
.text:00416750 TotalBytesAvail = dword ptr -0A0h
.text:00416750 var_9C          = dword ptr -9Ch
.text:00416750 var_98          = dword ptr -98h
.text:00416750 var_94          = dword ptr -94h
.text:00416750 var_90          = dword ptr -90h
.text:00416750 var_8C          = dword ptr -8Ch
.text:00416750 var_88          = dword ptr -88h
.text:00416750 var_84          = dword ptr -84h
.text:00416750 var_80          = dword ptr -80h
.text:00416750 var_7C          = dword ptr -7Ch
.text:00416750 var_78          = dword ptr -78h
.text:00416750 var_74          = dword ptr -74h
.text:00416750 var_70          = dword ptr -70h
.text:00416750 var_6C          = dword ptr -6Ch
.text:00416750 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00416750 hNamedPipe      = dword ptr  4
.text:00416750 arg_4           = dword ptr  8
.text:00416750
.text:00416750                 push    ebp
.text:00416751                 mov     eax, 0FFFFFFFFh
.text:00416756                 push    edi
.text:00416757                 push    esi
.text:00416758                 push    ebx
.text:00416759                 sub     esp, 0DCh
.text:0041675F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00416766                 mov     ebp, [esp+0ECh+arg_4]
.text:0041676D                 cmp     esi, 0FFFFFFFFh
.text:00416770                 jz      loc_416AF1
.text:00416776                 cld
.text:00416777                 xor     eax, eax
.text:00416779                 lea     ebx, [esp+0ECh+FileInformation]
.text:00416780                 mov     ecx, 0Dh
.text:00416785                 mov     edi, ebx
.text:00416787                 rep stosd
.text:00416789                 mov     dword ptr [ebp+18h], 1
.text:00416790                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416793                 call    GetFileType
.text:00416798                 sub     esp, 4
.text:0041679B                 xor     edx, edx
.text:0041679D                 cmp     eax, 2
.text:004167A0                 jz      loc_416BD0
.text:004167A6                 cmp     eax, 3
.text:004167A9                 jz      loc_416BC0
.text:004167AF
.text:004167AF loc_4167AF:                             ; CODE XREF: sub_416750+475↓j
.text:004167AF                                         ; sub_416750+485↓j
.text:004167AF                 or      [ebp+0], edx
.text:004167B2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:004167B6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004167B9                 call    GetFileInformationByHandle
.text:004167BE                 sub     esp, 8
.text:004167C1                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:004167C8                 test    ecx, ecx
.text:004167CA                 jnz     short loc_416800
.text:004167CC                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004167D3                 test    edx, edx
.text:004167D5                 jnz     short loc_416800
.text:004167D7                 mov     edx, [ebp+0]
.text:004167DA                 and     edx, 0F000h
.text:004167E0                 cmp     edx, 1000h
.text:004167E6                 jz      loc_416B56
.text:004167EC
.text:004167EC loc_4167EC:                             ; CODE XREF: sub_416750+459↓j
.text:004167EC                                         ; sub_416750+465↓j
.text:004167EC                 test    ecx, ecx
.text:004167EE                 jnz     short loc_416800
.text:004167F0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004167F7                 test    edx, edx
.text:004167F9                 jz      loc_416B34
.text:004167FF                 nop
.text:00416800
.text:00416800 loc_416800:                             ; CODE XREF: sub_416750+7A↑j
.text:00416800                                         ; sub_416750+85↑j ...
.text:00416800                 cld
.text:00416801                 mov     esi, ebx
.text:00416803                 mov     dword ptr [ebp+14h], 0
.text:0041680A                 lea     edi, [esp+0ECh+var_9C]
.text:0041680E                 mov     ecx, 0Dh
.text:00416813                 rep movsd
.text:00416815                 xor     ebx, ebx
.text:00416817                 xor     edi, edi
.text:00416819                 mov     edx, [esp+0ECh+var_6C]
.text:00416820                 mov     esi, [esp+0ECh+var_70]
.text:00416824                 or      edx, ebx
.text:00416826                 mov     ebx, [esp+0ECh+var_9C]
.text:0041682A                 mov     [ebp+8], edx
.text:0041682D                 or      edi, esi
.text:0041682F                 xor     edx, edx
.text:00416831                 mov     [ebp+0Ch], edi
.text:00416834                 test    bl, 10h
.text:00416837                 mov     esi, [esp+0ECh+var_80]
.text:0041683B                 setz    dl
.text:0041683E                 mov     [ebp+10h], esi
.text:00416841                 dec     edx
.text:00416842                 and     edx, 0FFFFC000h
.text:00416848                 add     edx, 8000h
.text:0041684E                 or      edx, 124h
.text:00416854                 test    bl, 1
.text:00416857                 movzx   eax, dx
.text:0041685A                 jnz     short loc_416861
.text:0041685C                 or      eax, 92h
.text:00416861
.text:00416861 loc_416861:                             ; CODE XREF: sub_416750+10A↑j
.text:00416861                 or      [ebp+0], eax
.text:00416864                 xor     edx, edx
.text:00416866                 mov     ebx, [esp+0ECh+var_7C]
.text:0041686A                 mov     ecx, [esp+0ECh+var_78]
.text:0041686E                 mov     eax, edx
.text:00416870                 xor     esi, esi
.text:00416872                 mov     edx, [esp+0ECh+var_8C]
.text:00416876                 mov     edi, ebx
.text:00416878                 or      eax, edi
.text:0041687A                 mov     [esp+0ECh+var_A8], eax
.text:0041687E                 mov     ebx, ecx
.text:00416880                 mov     edi, [esp+0ECh+var_74]
.text:00416884                 or      ebx, esi
.text:00416886                 mov     esi, [esp+0ECh+var_A8]
.text:0041688A                 mov     [esp+0ECh+var_AC], ebx
.text:0041688E                 xor     ebx, ebx
.text:00416890                 mov     ecx, [esp+0ECh+var_AC]
.text:00416894                 mov     [ebp+34h], esi
.text:00416897                 mov     esi, [esp+0ECh+var_90]
.text:0041689B                 mov     [ebp+18h], edi
.text:0041689E                 xor     edi, edi
.text:004168A0                 or      esi, ebx
.text:004168A2                 mov     [ebp+30h], ecx
.text:004168A5                 or      edi, edx
.text:004168A7                 mov     edx, esi
.text:004168A9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004168B1                 sub     edx, 0D53E8000h
.text:004168B7                 mov     ebx, edi
.text:004168B9                 sbb     ebx, 19DB1DEh
.text:004168BF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:004168C3                 mov     [esp+0ECh+lpBytesRead], 0
.text:004168CB                 mov     [esp+0ECh+hFile], edx
.text:004168CE                 call    sub_41F730
.text:004168D3                 mov     ecx, eax
.text:004168D5                 shr     eax, 1Fh
.text:004168D8                 dec     eax
.text:004168D9                 and     ecx, eax
.text:004168DB                 mov     [ebp+38h], ecx
.text:004168DE                 mov     [esp+0ECh+hFile], esi
.text:004168E1                 mov     [esp+0ECh+lpFileInformation], edi
.text:004168E5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004168ED                 mov     [esp+0ECh+lpBytesRead], 0
.text:004168F5                 call    sub_41F5B0
.text:004168FA                 lea     ebx, [eax+eax*4]
.text:004168FD                 xor     ecx, ecx
.text:004168FF                 lea     esi, [ebx+ebx*4]
.text:00416902                 shl     esi, 2
.text:00416905                 mov     edi, esi
.text:00416907                 shr     edi, 1Fh
.text:0041690A                 dec     edi
.text:0041690B                 and     edi, esi
.text:0041690D                 mov     [ebp+3Ch], edi
.text:00416910                 mov     esi, [esp+0ECh+var_98]
.text:00416914                 xor     edi, edi
.text:00416916                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0041691E                 mov     edx, [esp+0ECh+var_94]
.text:00416922                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041692A                 or      esi, ecx
.text:0041692C                 or      edi, edx
.text:0041692E                 mov     edx, esi
.text:00416930                 mov     ecx, edi
.text:00416932                 sub     edx, 0D53E8000h
.text:00416938                 sbb     ecx, 19DB1DEh
.text:0041693E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00416942                 mov     [esp+0ECh+hFile], edx
.text:00416945                 call    sub_41F730
.text:0041694A                 mov     ebx, eax
.text:0041694C                 shr     eax, 1Fh
.text:0041694F                 dec     eax
.text:00416950                 and     ebx, eax
.text:00416952                 mov     [ebp+48h], ebx
.text:00416955                 xor     ebx, ebx
.text:00416957                 mov     [esp+0ECh+hFile], esi
.text:0041695A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0041695E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416966                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041696E                 call    sub_41F5B0
.text:00416973                 lea     ecx, [eax+eax*4]
.text:00416976                 lea     esi, [ecx+ecx*4]
.text:00416979                 shl     esi, 2
.text:0041697C                 mov     edi, esi
.text:0041697E                 shr     edi, 1Fh
.text:00416981                 dec     edi
.text:00416982                 and     edi, esi
.text:00416984                 mov     [ebp+4Ch], edi
.text:00416987                 mov     esi, [esp+0ECh+var_88]
.text:0041698B                 xor     edi, edi
.text:0041698D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416995                 mov     edx, [esp+0ECh+var_84]
.text:00416999                 mov     [esp+0ECh+lpBytesRead], 0
.text:004169A1                 or      esi, ebx
.text:004169A3                 or      edi, edx
.text:004169A5                 mov     edx, esi
.text:004169A7                 mov     ebx, edi
.text:004169A9                 sub     edx, 0D53E8000h
.text:004169AF                 sbb     ebx, 19DB1DEh
.text:004169B5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:004169B9                 mov     [esp+0ECh+hFile], edx
.text:004169BC                 call    sub_41F730
.text:004169C1                 mov     ecx, eax
.text:004169C3                 shr     eax, 1Fh
.text:004169C6                 dec     eax
.text:004169C7                 and     ecx, eax
.text:004169C9                 mov     [ebp+40h], ecx
.text:004169CC                 mov     [esp+0ECh+lpFileInformation], edi
.text:004169D0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004169D8                 mov     [esp+0ECh+lpBytesRead], 0
.text:004169E0                 mov     [esp+0ECh+hFile], esi
.text:004169E3                 call    sub_41F5B0
.text:004169E8                 mov     dword ptr [ebp+50h], 200h
.text:004169EF                 lea     ebx, [eax+eax*4]
.text:004169F2                 mov     edi, [esp+0ECh+var_A8]
.text:004169F6                 lea     edx, [ebx+ebx*4]
.text:004169F9                 mov     eax, [esp+0ECh+var_AC]
.text:004169FD                 shl     edx, 2
.text:00416A00                 mov     ecx, edx
.text:00416A02                 shr     ecx, 1Fh
.text:00416A05                 dec     ecx
.text:00416A06                 and     ecx, edx
.text:00416A08                 test    edi, edi
.text:00416A0A                 mov     edx, [esp+0ECh+var_A8]
.text:00416A0E                 mov     [ebp+44h], ecx
.text:00416A11                 js      loc_416B27
.text:00416A17
.text:00416A17 loc_416A17:                             ; CODE XREF: sub_416750+3DF↓j
.text:00416A17                 mov     edi, [esp+0ECh+var_AC]
.text:00416A1B                 xor     esi, esi
.text:00416A1D                 mov     ecx, eax
.text:00416A1F                 shrd    ecx, edx, 9
.text:00416A23                 mov     ebx, edx
.text:00416A25                 mov     eax, esi
.text:00416A27                 and     edi, 1FFh
.text:00416A2D                 sar     ebx, 9
.text:00416A30                 or      eax, edi
.text:00416A32                 jz      short loc_416A3A
.text:00416A34                 add     ecx, 1
.text:00416A37                 adc     ebx, 0
.text:00416A3A
.text:00416A3A loc_416A3A:                             ; CODE XREF: sub_416750+2E2↑j
.text:00416A3A                 mov     [ebp+5Ch], ebx
.text:00416A3D                 mov     esi, dword_421090
.text:00416A43                 xor     edi, edi
.text:00416A45                 mov     [ebp+58h], ecx
.text:00416A48                 mov     ebx, dword_421090
.text:00416A4E                 mov     ecx, [esp+0ECh+var_A8]
.text:00416A52                 mov     edx, [esp+0ECh+var_AC]
.text:00416A56                 mov     [ebp+50h], ebx
.text:00416A59                 shr     ebx, 9
.text:00416A5C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00416A60                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00416A64                 mov     [esp+0ECh+nBufferSize], esi
.text:00416A68                 mov     [esp+0ECh+hFile], edx
.text:00416A6B                 call    sub_41F730
.text:00416A70                 mov     [esp+0ECh+lpBytesRead], edi
.text:00416A74                 mov     ecx, [esp+0ECh+var_AC]
.text:00416A78                 mov     edi, [esp+0ECh+var_A8]
.text:00416A7C                 mov     [esp+0ECh+var_BC], ebx
.text:00416A80                 mov     [esp+0ECh+var_B4], eax
.text:00416A84                 mov     [esp+0ECh+var_B0], edx
.text:00416A88                 mov     [esp+0ECh+var_B8], 0
.text:00416A90                 mov     [esp+0ECh+nBufferSize], esi
.text:00416A94                 mov     [esp+0ECh+hFile], ecx
.text:00416A97                 mov     [esp+0ECh+lpFileInformation], edi
.text:00416A9B                 call    sub_41F5B0
.text:00416AA0                 mov     ebx, edx
.text:00416AA2                 or      ebx, eax
.text:00416AA4                 jz      short loc_416B00
.text:00416AA6                 mov     edi, [esp+0ECh+var_B4]
.text:00416AAA                 mov     esi, [esp+0ECh+var_B0]
.text:00416AAE                 mov     eax, [esp+0ECh+var_BC]
.text:00416AB2                 mov     [esp+0ECh+var_C4], edi
.text:00416AB6                 mov     ecx, [esp+0ECh+var_B8]
.text:00416ABA                 add     [esp+0ECh+var_C4], 1
.text:00416ABF                 mov     [esp+0ECh+var_C0], esi
.text:00416AC3                 adc     [esp+0ECh+var_C0], 0
.text:00416AC8                 mul     [esp+0ECh+var_C4]
.text:00416ACC                 mov     edi, [esp+0ECh+var_C0]
.text:00416AD0                 mov     ebx, edx
.text:00416AD2                 mov     edx, [esp+0ECh+var_C4]
.text:00416AD6                 mov     esi, eax
.text:00416AD8                 mov     eax, ebx
.text:00416ADA                 imul    ecx, edx
.text:00416ADD                 mov     edx, [esp+0ECh+var_BC]
.text:00416AE1                 imul    edx, edi
.text:00416AE4                 add     eax, ecx
.text:00416AE6                 lea     edi, [edx+eax]
.text:00416AE9
.text:00416AE9 loc_416AE9:                             ; CODE XREF: sub_416750+3D5↓j
.text:00416AE9                 mov     [ebp+58h], esi
.text:00416AEC                 xor     eax, eax
.text:00416AEE                 mov     [ebp+5Ch], edi
.text:00416AF1
.text:00416AF1 loc_416AF1:                             ; CODE XREF: sub_416750+20↑j
.text:00416AF1                 add     esp, 0DCh
.text:00416AF7                 pop     ebx
.text:00416AF8                 pop     esi
.text:00416AF9                 pop     edi
.text:00416AFA                 pop     ebp
.text:00416AFB                 retn
.text:00416AFB ; ---------------------------------------------------------------------------
.text:00416AFC                 align 10h
.text:00416B00
.text:00416B00 loc_416B00:                             ; CODE XREF: sub_416750+354↑j
.text:00416B00                 mov     eax, [esp+0ECh+var_B4]
.text:00416B04                 mov     edi, [esp+0ECh+var_B8]
.text:00416B08                 mov     ebx, [esp+0ECh+var_B4]
.text:00416B0C                 mul     [esp+0ECh+var_BC]
.text:00416B10                 mov     ecx, [esp+0ECh+var_BC]
.text:00416B14                 imul    ebx, edi
.text:00416B17                 mov     esi, eax
.text:00416B19                 mov     eax, [esp+0ECh+var_B0]
.text:00416B1D                 add     edx, ebx
.text:00416B1F                 imul    ecx, eax
.text:00416B22                 lea     edi, [ecx+edx]
.text:00416B25                 jmp     short loc_416AE9
.text:00416B27 ; ---------------------------------------------------------------------------
.text:00416B27
.text:00416B27 loc_416B27:                             ; CODE XREF: sub_416750+2C1↑j
.text:00416B27                 add     eax, 1FFh
.text:00416B2C                 adc     edx, 0
.text:00416B2F                 jmp     loc_416A17
.text:00416B34 ; ---------------------------------------------------------------------------
.text:00416B34
.text:00416B34 loc_416B34:                             ; CODE XREF: sub_416750+A9↑j
.text:00416B34                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416B37                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00416B3E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00416B42                 call    GetFileSize
.text:00416B47                 sub     esp, 8
.text:00416B4A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00416B51                 jmp     loc_416800
.text:00416B56 ; ---------------------------------------------------------------------------
.text:00416B56
.text:00416B56 loc_416B56:                             ; CODE XREF: sub_416750+96↑j
.text:00416B56                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00416B5E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416B62                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00416B6A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00416B6E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00416B76                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00416B7E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00416B86                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00416B89                 call    PeekNamedPipe
.text:00416B8E                 sub     esp, 18h
.text:00416B91                 test    eax, eax
.text:00416B93                 jz      short loc_416BAE
.text:00416B95                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416B99                 xor     eax, eax
.text:00416B9B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00416BA2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00416BA9                 jmp     loc_4167EC
.text:00416BAE ; ---------------------------------------------------------------------------
.text:00416BAE
.text:00416BAE loc_416BAE:                             ; CODE XREF: sub_416750+443↑j
.text:00416BAE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00416BB5                 jmp     loc_4167EC
.text:00416BB5 ; ---------------------------------------------------------------------------
.text:00416BBA                 align 10h
.text:00416BC0
.text:00416BC0 loc_416BC0:                             ; CODE XREF: sub_416750+59↑j
.text:00416BC0                 mov     edx, 1000h
.text:00416BC5                 jmp     loc_4167AF
.text:00416BC5 ; ---------------------------------------------------------------------------
.text:00416BCA                 align 10h
.text:00416BD0
.text:00416BD0 loc_416BD0:                             ; CODE XREF: sub_416750+50↑j
.text:00416BD0                 mov     edx, 2000h
.text:00416BD5                 jmp     loc_4167AF
.text:00416BD5 sub_416750      endp
.text:00416BD5
.text:00416BD5 ; ---------------------------------------------------------------------------
.text:00416BDA aLnk            db '.lnk',0             ; DATA XREF: sub_416C20+E0↓o
.text:00416BDA                                         ; sub_4172A0+2A↓o ...
.text:00416BDF ; const CHAR aKernel32_0[]
.text:00416BDF aKernel32_0     db 'KERNEL32',0         ; DATA XREF: sub_416C20+12D↓o
.text:00416BDF                                         ; .text:0041797B↓o
.text:00416BE8 ; const CHAR aGetcompressedf[]
.text:00416BE8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00416BE8                                         ; DATA XREF: sub_416C20+13E↓o
.text:00416BE8                                         ; .text:0041798C↓o
.text:00416BFF ; const CHAR aGetbinarytypea[]
.text:00416BFF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_416C20+333↓o
.text:00416BFF                                         ; .text:00417326↓o ...
.text:00416C0E ; const char aPathext[]
.text:00416C0E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_416C20:loc_417007↓o
.text:00416C0E                                         ; .text:loc_4173D0↓o ...
.text:00416C16                 align 10h
.text:00416C20
.text:00416C20 ; =============== S U B R O U T I N E =======================================
.text:00416C20
.text:00416C20
.text:00416C20 ; int __cdecl sub_416C20(char *String1, int)
.text:00416C20 sub_416C20      proc near               ; CODE XREF: sub_417A00+3CD↓p
.text:00416C20                                         ; sub_418280-39B↓p
.text:00416C20
.text:00416C20 Str             = dword ptr -6Ch
.text:00416C20 lpProcName      = dword ptr -68h
.text:00416C20 var_64          = dword ptr -64h
.text:00416C20 var_60          = dword ptr -60h
.text:00416C20 var_5C          = dword ptr -5Ch
.text:00416C20 var_4C          = dword ptr -4Ch
.text:00416C20 var_48          = dword ptr -48h
.text:00416C20 var_44          = dword ptr -44h
.text:00416C20 var_40          = dword ptr -40h
.text:00416C20 var_3C          = dword ptr -3Ch
.text:00416C20 var_38          = dword ptr -38h
.text:00416C20 lpRootPathName  = dword ptr -30h
.text:00416C20 var_2C          = byte ptr -2Ch
.text:00416C20 var_28          = dword ptr -28h
.text:00416C20 var_24          = dword ptr -24h
.text:00416C20 var_20          = dword ptr -20h
.text:00416C20 var_1C          = dword ptr -1Ch
.text:00416C20 var_18          = byte ptr -18h
.text:00416C20 String1         = dword ptr  4
.text:00416C20 arg_4           = dword ptr  8
.text:00416C20
.text:00416C20                 push    ebp
.text:00416C21                 push    edi
.text:00416C22                 push    esi
.text:00416C23                 push    ebx
.text:00416C24                 sub     esp, 5Ch
.text:00416C27                 mov     edx, [esp+6Ch+String1]
.text:00416C2B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00416C2E                 call    sub_419100
.text:00416C33                 mov     [esp+6Ch+Str], eax
.text:00416C36                 call    sub_418880
.text:00416C3B                 mov     [esp+6Ch+lpRootPathName], eax
.text:00416C3F                 test    eax, eax
.text:00416C41                 jz      loc_416E73
.text:00416C47                 mov     [esp+6Ch+Str], eax ; Str
.text:00416C4A                 call    strlen
.text:00416C4F                 mov     edx, [esp+6Ch+arg_4]
.text:00416C53                 mov     ebx, eax
.text:00416C55                 mov     esi, [edx+0Ch]
.text:00416C58                 mov     edi, [edx+8]
.text:00416C5B                 mov     eax, esi
.text:00416C5D                 or      eax, edi
.text:00416C5F                 jz      loc_417080
.text:00416C65                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00416C69                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00416C6C                 call    GetDriveTypeA
.text:00416C71                 sub     esp, 4
.text:00416C74                 cmp     eax, 4
.text:00416C77                 jz      loc_417080
.text:00416C7D
.text:00416C7D loc_416C7D:                             ; CODE XREF: sub_416C20+48A↓j
.text:00416C7D                                         ; sub_416C20+4B2↓j
.text:00416C7D                 mov     edx, [esp+6Ch+arg_4]
.text:00416C81                 mov     esi, [edx+14h]
.text:00416C84                 mov     edi, [edx+10h]
.text:00416C87                 mov     ecx, esi
.text:00416C89                 or      ecx, edi
.text:00416C8B                 jnz     short loc_416CB5
.text:00416C8D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00416C91                 xor     esi, esi
.text:00416C93                 xor     edi, edi
.text:00416C95                 test    ebp, ebp
.text:00416C97                 jz      short loc_416CA7
.text:00416C99                 movzx   ebx, byte ptr [ebp+0]
.text:00416C9D                 test    bl, bl
.text:00416C9F                 mov     cl, bl
.text:00416CA1                 jnz     loc_417031
.text:00416CA7
.text:00416CA7 loc_416CA7:                             ; CODE XREF: sub_416C20+77↑j
.text:00416CA7                 xor     eax, eax
.text:00416CA9                 xor     edx, edx
.text:00416CAB
.text:00416CAB loc_416CAB:                             ; CODE XREF: sub_416C20+458↓j
.text:00416CAB                 mov     ebp, [esp+6Ch+arg_4]
.text:00416CAF                 mov     [ebp+10h], eax
.text:00416CB2                 mov     [ebp+14h], edx
.text:00416CB5
.text:00416CB5 loc_416CB5:                             ; CODE XREF: sub_416C20+6B↑j
.text:00416CB5                 mov     edi, [esp+6Ch+String1]
.text:00416CB9                 xor     ebx, ebx
.text:00416CBB                 test    edi, edi
.text:00416CBD                 jz      loc_416F33
.text:00416CC3                 mov     esi, [esp+6Ch+String1]
.text:00416CC7                 cmp     byte ptr [esi], 0
.text:00416CCA                 jnz     loc_416F40
.text:00416CD0
.text:00416CD0 loc_416CD0:                             ; CODE XREF: sub_416C20+38C↓j
.text:00416CD0                                         ; sub_416C20+397↓j
.text:00416CD0                 mov     ebp, [esp+6Ch+String1]
.text:00416CD4                 test    ebp, ebp
.text:00416CD6                 jz      loc_416F33
.text:00416CDC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00416CE4                 mov     edi, [esp+6Ch+String1]
.text:00416CE8                 mov     [esp+6Ch+Str], edi ; Str
.text:00416CEB                 call    strrchr
.text:00416CF0                 test    eax, eax
.text:00416CF2                 jz      loc_416F33
.text:00416CF8                 cld
.text:00416CF9                 mov     ecx, 5
.text:00416CFE                 mov     esi, eax
.text:00416D00                 mov     edi, offset aLnk ; ".lnk"
.text:00416D05                 repe cmpsb
.text:00416D07                 setz    cl
.text:00416D0A                 movzx   eax, cl
.text:00416D0D                 lea     esi, [esi+0]
.text:00416D10
.text:00416D10 loc_416D10:                             ; CODE XREF: sub_416C20+315↓j
.text:00416D10                 test    eax, eax
.text:00416D12                 jz      short loc_416D1A
.text:00416D14                 or      ebx, 0A000h
.text:00416D1A
.text:00416D1A loc_416D1A:                             ; CODE XREF: sub_416C20+F2↑j
.text:00416D1A                 mov     esi, [esp+6Ch+arg_4]
.text:00416D1E                 xor     ecx, ecx
.text:00416D20                 mov     edi, ds:dword_4225D0
.text:00416D26                 or      [esi], ebx
.text:00416D28                 mov     ebx, [esi+14h]
.text:00416D2B                 mov     ebp, [esi+10h]
.text:00416D2E                 mov     eax, ebx
.text:00416D30                 xor     eax, ecx
.text:00416D32                 xor     ebp, edi
.text:00416D34                 or      eax, ebp
.text:00416D36                 jnz     loc_416EC0
.text:00416D3C
.text:00416D3C loc_416D3C:                             ; CODE XREF: sub_416C20+30E↓j
.text:00416D3C                 mov     ecx, dword_421090
.text:00416D42                 xor     esi, esi
.text:00416D44                 xor     edi, edi
.text:00416D46                 mov     edx, [esp+6Ch+arg_4]
.text:00416D4A                 mov     [edx+50h], ecx
.text:00416D4D                 mov     [esp+6Ch+Str], offset aKernel32_0 ; "KERNEL32"
.text:00416D54                 call    LoadLibraryA
.text:00416D59                 sub     esp, 4
.text:00416D5C                 mov     ebp, eax
.text:00416D5E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00416D66                 mov     [esp+6Ch+Str], eax ; hModule
.text:00416D69                 call    GetProcAddress
.text:00416D6E                 sub     esp, 8
.text:00416D71                 test    eax, eax
.text:00416D73                 jz      short loc_416DA8
.text:00416D75                 mov     ebx, [esp+6Ch+String1]
.text:00416D79                 lea     esi, [esp+6Ch+var_2C]
.text:00416D7D                 mov     [esp+6Ch+lpProcName], esi
.text:00416D81                 mov     [esp+6Ch+Str], ebx
.text:00416D84                 call    eax
.text:00416D86                 sub     esp, 8
.text:00416D89                 mov     ebx, eax
.text:00416D8B                 cmp     eax, 0FFFFFFFFh
.text:00416D8E                 jz      loc_416EA9
.text:00416D94
.text:00416D94 loc_416D94:                             ; CODE XREF: sub_416C20+29A↓j
.text:00416D94                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00416D98                 mov     ecx, ebx
.text:00416D9A                 xor     edi, edi
.text:00416D9C                 xor     ebx, ebx
.text:00416D9E                 mov     edx, esi
.text:00416DA0                 mov     esi, ecx
.text:00416DA2                 or      esi, edi
.text:00416DA4                 mov     edi, ebx
.text:00416DA6                 or      edi, edx
.text:00416DA8
.text:00416DA8 loc_416DA8:                             ; CODE XREF: sub_416C20+153↑j
.text:00416DA8                                         ; sub_416C20+294↓j
.text:00416DA8                 test    ebp, ebp
.text:00416DAA                 jz      short loc_416DB7
.text:00416DAC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00416DAF                 call    FreeLibrary
.text:00416DB4                 sub     esp, 4
.text:00416DB7
.text:00416DB7 loc_416DB7:                             ; CODE XREF: sub_416C20+18A↑j
.text:00416DB7                 mov     ebp, edi
.text:00416DB9                 mov     edx, ebp
.text:00416DBB                 mov     edi, esi
.text:00416DBD                 or      edx, esi
.text:00416DBF                 jnz     short loc_416DCB
.text:00416DC1                 mov     eax, [esp+6Ch+arg_4]
.text:00416DC5                 mov     edi, [eax+30h]
.text:00416DC8                 mov     ebp, [eax+34h]
.text:00416DCB
.text:00416DCB loc_416DCB:                             ; CODE XREF: sub_416C20+19F↑j
.text:00416DCB                 mov     [esp+6Ch+lpProcName], ebp
.text:00416DCF                 mov     ebx, dword_421090
.text:00416DD5                 xor     esi, esi
.text:00416DD7                 mov     [esp+6Ch+var_60], esi
.text:00416DDB                 mov     [esp+6Ch+Str], edi
.text:00416DDE                 mov     [esp+6Ch+var_64], ebx
.text:00416DE2                 call    sub_41F730
.text:00416DE7                 mov     [esp+6Ch+var_3C], eax
.text:00416DEB                 mov     ecx, dword_421090
.text:00416DF1                 mov     [esp+6Ch+lpProcName], ebp
.text:00416DF5                 mov     [esp+6Ch+var_38], edx
.text:00416DF9                 shr     ecx, 9
.text:00416DFC                 mov     [esp+6Ch+var_44], ecx
.text:00416E00                 mov     [esp+6Ch+var_40], 0
.text:00416E08                 mov     [esp+6Ch+var_64], ebx
.text:00416E0C                 mov     [esp+6Ch+var_60], esi
.text:00416E10                 mov     [esp+6Ch+Str], edi
.text:00416E13                 call    sub_41F5B0
.text:00416E18                 mov     ebp, edx
.text:00416E1A                 or      ebp, eax
.text:00416E1C                 jz      short loc_416E80
.text:00416E1E                 mov     ebp, [esp+6Ch+var_3C]
.text:00416E22                 mov     esi, [esp+6Ch+var_38]
.text:00416E26                 mov     eax, [esp+6Ch+var_44]
.text:00416E2A                 mov     [esp+6Ch+var_4C], ebp
.text:00416E2E                 mov     ecx, [esp+6Ch+var_40]
.text:00416E32                 mov     ebx, [esp+6Ch+var_44]
.text:00416E36                 add     [esp+6Ch+var_4C], 1
.text:00416E3B                 mov     [esp+6Ch+var_48], esi
.text:00416E3F                 mov     edi, [esp+6Ch+var_4C]
.text:00416E43                 adc     [esp+6Ch+var_48], 0
.text:00416E48                 mul     [esp+6Ch+var_4C]
.text:00416E4C                 imul    ecx, edi
.text:00416E4F                 mov     esi, eax
.text:00416E51                 mov     eax, [esp+6Ch+var_48]
.text:00416E55                 add     edx, ecx
.text:00416E57                 imul    ebx, eax
.text:00416E5A                 lea     edi, [ebx+edx]
.text:00416E5D
.text:00416E5D loc_416E5D:                             ; CODE XREF: sub_416C20+287↓j
.text:00416E5D                 mov     ebx, [esp+6Ch+arg_4]
.text:00416E61                 mov     [ebx+58h], esi
.text:00416E64                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00416E68                 mov     [ebx+5Ch], edi
.text:00416E6B                 mov     [esp+6Ch+Str], esi ; Block
.text:00416E6E                 call    free
.text:00416E73
.text:00416E73 loc_416E73:                             ; CODE XREF: sub_416C20+21↑j
.text:00416E73                 add     esp, 5Ch
.text:00416E76                 xor     eax, eax
.text:00416E78                 pop     ebx
.text:00416E79                 pop     esi
.text:00416E7A                 pop     edi
.text:00416E7B                 pop     ebp
.text:00416E7C                 retn
.text:00416E7C ; ---------------------------------------------------------------------------
.text:00416E7D                 align 10h
.text:00416E80
.text:00416E80 loc_416E80:                             ; CODE XREF: sub_416C20+1FC↑j
.text:00416E80                 mov     eax, [esp+6Ch+var_3C]
.text:00416E84                 mov     edi, [esp+6Ch+var_40]
.text:00416E88                 mov     ecx, [esp+6Ch+var_3C]
.text:00416E8C                 mul     [esp+6Ch+var_44]
.text:00416E90                 mov     ebx, [esp+6Ch+var_44]
.text:00416E94                 imul    ecx, edi
.text:00416E97                 mov     ebp, edx
.text:00416E99                 mov     esi, eax
.text:00416E9B                 mov     edx, [esp+6Ch+var_38]
.text:00416E9F                 add     ebp, ecx
.text:00416EA1                 imul    ebx, edx
.text:00416EA4                 lea     edi, [ebx+ebp]
.text:00416EA7                 jmp     short loc_416E5D
.text:00416EA9 ; ---------------------------------------------------------------------------
.text:00416EA9
.text:00416EA9 loc_416EA9:                             ; CODE XREF: sub_416C20+16E↑j
.text:00416EA9                 call    GetLastError
.text:00416EAE                 xor     esi, esi
.text:00416EB0                 xor     edi, edi
.text:00416EB2                 test    eax, eax
.text:00416EB4                 jnz     loc_416DA8
.text:00416EBA                 jmp     loc_416D94
.text:00416EBA ; ---------------------------------------------------------------------------
.text:00416EBF                 align 10h
.text:00416EC0
.text:00416EC0 loc_416EC0:                             ; CODE XREF: sub_416C20+116↑j
.text:00416EC0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00416EC4                 lea     ecx, [esp+6Ch+var_20]
.text:00416EC8                 lea     ebx, [esp+6Ch+var_1C]
.text:00416ECC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00416ED0                 lea     edi, [esp+6Ch+var_24]
.text:00416ED4                 lea     ebp, [esp+6Ch+var_28]
.text:00416ED8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00416EDC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00416EE0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00416EE4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00416EE7                 call    sub_419B50
.text:00416EEC                 test    eax, eax
.text:00416EEE                 jnz     short loc_416F10
.text:00416EF0                 mov     [esp+6Ch+var_28], 1
.text:00416EF8                 mov     [esp+6Ch+var_24], 200h
.text:00416F00                 mov     [esp+6Ch+var_20], 0
.text:00416F08                 mov     [esp+6Ch+var_1C], 0
.text:00416F10
.text:00416F10 loc_416F10:                             ; CODE XREF: sub_416C20+2CE↑j
.text:00416F10                 mov     ebp, [esp+6Ch+var_24]
.text:00416F14                 mov     edi, [esp+6Ch+var_28]
.text:00416F18                 mov     eax, [esp+6Ch+arg_4]
.text:00416F1C                 imul    ebp, edi
.text:00416F1F                 mov     esi, [eax+10h]
.text:00416F22                 mov     dword_421090, ebp
.text:00416F28                 mov     ds:dword_4225D0, esi
.text:00416F2E                 jmp     loc_416D3C
.text:00416F33 ; ---------------------------------------------------------------------------
.text:00416F33
.text:00416F33 loc_416F33:                             ; CODE XREF: sub_416C20+9D↑j
.text:00416F33                                         ; sub_416C20+B6↑j ...
.text:00416F33                 xor     eax, eax
.text:00416F35                 jmp     loc_416D10
.text:00416F35 ; ---------------------------------------------------------------------------
.text:00416F3A                 align 10h
.text:00416F40
.text:00416F40 loc_416F40:                             ; CODE XREF: sub_416C20+AA↑j
.text:00416F40                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:00416F47                 xor     ebp, ebp
.text:00416F49                 call    GetModuleHandleA
.text:00416F4E                 sub     esp, 4
.text:00416F51                 mov     edi, eax
.text:00416F53                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00416F5B                 mov     [esp+6Ch+Str], eax ; hModule
.text:00416F5E                 call    GetProcAddress
.text:00416F63                 sub     esp, 8
.text:00416F66                 mov     edx, eax
.text:00416F68                 test    eax, eax
.text:00416F6A                 jz      short loc_416F84
.text:00416F6C                 mov     eax, [esp+6Ch+String1]
.text:00416F70                 lea     ecx, [esp+6Ch+var_18]
.text:00416F74                 mov     [esp+6Ch+lpProcName], ecx
.text:00416F78                 mov     [esp+6Ch+Str], eax
.text:00416F7B                 call    edx
.text:00416F7D                 sub     esp, 8
.text:00416F80                 test    eax, eax
.text:00416F82                 jnz     short loc_416FE8
.text:00416F84
.text:00416F84 loc_416F84:                             ; CODE XREF: sub_416C20+34A↑j
.text:00416F84                 mov     edx, ds:Str
.text:00416F8A                 test    edx, edx
.text:00416F8C                 jz      short loc_417007
.text:00416F8E
.text:00416F8E loc_416F8E:                             ; CODE XREF: sub_416C20+3FA↓j
.text:00416F8E                                         ; sub_416C20+40C↓j
.text:00416F8E                 mov     eax, [esp+6Ch+String1]
.text:00416F92                 test    eax, eax
.text:00416F94                 jz      short loc_416F9F
.text:00416F96                 mov     esi, [esp+6Ch+String1]
.text:00416F9A                 cmp     byte ptr [esi], 0
.text:00416F9D                 jnz     short loc_416FBC
.text:00416F9F
.text:00416F9F loc_416F9F:                             ; CODE XREF: sub_416C20+374↑j
.text:00416F9F                                         ; sub_416C20+3B0↓j ...
.text:00416F9F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00416FA2                 call    FreeLibrary
.text:00416FA7                 sub     esp, 4
.text:00416FAA                 test    ebp, ebp
.text:00416FAC                 jz      loc_416CD0
.text:00416FB2                 mov     ebx, 49h ; 'I'
.text:00416FB7                 jmp     loc_416CD0
.text:00416FBC ; ---------------------------------------------------------------------------
.text:00416FBC
.text:00416FBC loc_416FBC:                             ; CODE XREF: sub_416C20+37D↑j
.text:00416FBC                 mov     [esp+6Ch+Str], esi ; Str
.text:00416FBF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00416FC7                 call    strrchr
.text:00416FCC                 test    eax, eax
.text:00416FCE                 mov     esi, eax
.text:00416FD0                 jz      short loc_416F9F
.text:00416FD2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00416FD6                 mov     ecx, ds:Str
.text:00416FDC                 mov     [esp+6Ch+Str], ecx ; Str
.text:00416FDF                 call    strstr
.text:00416FE4                 test    eax, eax
.text:00416FE6                 jz      short loc_416FEF
.text:00416FE8
.text:00416FE8 loc_416FE8:                             ; CODE XREF: sub_416C20+362↑j
.text:00416FE8                                         ; sub_416C20+3E5↓j
.text:00416FE8                 mov     ebp, 1
.text:00416FED                 jmp     short loc_416F9F
.text:00416FEF ; ---------------------------------------------------------------------------
.text:00416FEF
.text:00416FEF loc_416FEF:                             ; CODE XREF: sub_416C20+3C6↑j
.text:00416FEF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00416FF3                 mov     edx, off_421094 ; ".com;.exe;.bat;.cmd"
.text:00416FF9                 mov     [esp+6Ch+Str], edx ; Str
.text:00416FFC                 call    strstr
.text:00417001                 test    eax, eax
.text:00417003                 jz      short loc_416F9F
.text:00417005                 jmp     short loc_416FE8
.text:00417007 ; ---------------------------------------------------------------------------
.text:00417007
.text:00417007 loc_417007:                             ; CODE XREF: sub_416C20+36C↑j
.text:00417007                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0041700E                 call    getenv
.text:00417013                 mov     ds:Str, eax
.text:00417018                 test    eax, eax
.text:0041701A                 jnz     loc_416F8E
.text:00417020                 mov     esi, off_421094 ; ".com;.exe;.bat;.cmd"
.text:00417026                 mov     ds:Str, esi
.text:0041702C                 jmp     loc_416F8E
.text:00417031 ; ---------------------------------------------------------------------------
.text:00417031
.text:00417031 loc_417031:                             ; CODE XREF: sub_416C20+81↑j
.text:00417031                                         ; sub_416C20+452↓j
.text:00417031                 shld    edi, esi, 8
.text:00417035                 movsx   eax, cl
.text:00417038                 shl     esi, 8
.text:0041703B                 cdq
.text:0041703C                 add     esi, eax
.text:0041703E                 adc     edi, edx
.text:00417040                 mov     edx, edi
.text:00417042                 xor     ebx, ebx
.text:00417044                 and     edx, 0FF000000h
.text:0041704A                 mov     eax, edx
.text:0041704C                 or      eax, ebx
.text:0041704E                 jz      short loc_417069
.text:00417050                 mov     ecx, edx
.text:00417052                 xor     eax, eax
.text:00417054                 shr     ecx, 10h
.text:00417057                 mov     edx, esi
.text:00417059                 xor     edx, ecx
.text:0041705B                 mov     ecx, edi
.text:0041705D                 xor     ecx, eax
.text:0041705F                 mov     esi, edx
.text:00417061                 mov     edi, ecx
.text:00417063                 and     edi, 0FFFFFFh
.text:00417069
.text:00417069 loc_417069:                             ; CODE XREF: sub_416C20+42E↑j
.text:00417069                 inc     ebp
.text:0041706A                 movzx   ebx, byte ptr [ebp+0]
.text:0041706E                 test    bl, bl
.text:00417070                 mov     cl, bl
.text:00417072                 jnz     short loc_417031
.text:00417074                 mov     eax, esi
.text:00417076                 mov     edx, edi
.text:00417078                 jmp     loc_416CAB
.text:00417078 ; ---------------------------------------------------------------------------
.text:0041707D                 align 10h
.text:00417080
.text:00417080 loc_417080:                             ; CODE XREF: sub_416C20+3F↑j
.text:00417080                                         ; sub_416C20+57↑j
.text:00417080                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00417084                 mov     ebp, [esp+6Ch+String1]
.text:00417088                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0041708C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0041708F                 call    _stricmp
.text:00417094                 test    eax, eax
.text:00417096                 jnz     short loc_4170B0
.text:00417098                 mov     ebx, [esp+6Ch+arg_4]
.text:0041709C                 mov     dword ptr [ebx+8], 5
.text:004170A3                 mov     dword ptr [ebx+0Ch], 50000h
.text:004170AA                 jmp     loc_416C7D
.text:004170AA ; ---------------------------------------------------------------------------
.text:004170AF                 align 10h
.text:004170B0
.text:004170B0 loc_4170B0:                             ; CODE XREF: sub_416C20+476↑j
.text:004170B0                 mov     ebp, [esp+6Ch+String1]
.text:004170B4                 xor     esi, esi
.text:004170B6                 xor     edi, edi
.text:004170B8                 add     ebp, ebx
.text:004170BA                 jz      short loc_4170C4
.text:004170BC                 movzx   ecx, byte ptr [ebp+0]
.text:004170C0                 test    cl, cl
.text:004170C2                 jnz     short loc_4170D7
.text:004170C4
.text:004170C4 loc_4170C4:                             ; CODE XREF: sub_416C20+49A↑j
.text:004170C4                 xor     eax, eax
.text:004170C6                 xor     edx, edx
.text:004170C8
.text:004170C8 loc_4170C8:                             ; CODE XREF: sub_416C20+4FE↓j
.text:004170C8                 mov     ebp, [esp+6Ch+arg_4]
.text:004170CC                 mov     [ebp+8], eax
.text:004170CF                 mov     [ebp+0Ch], edx
.text:004170D2                 jmp     loc_416C7D
.text:004170D7 ; ---------------------------------------------------------------------------
.text:004170D7
.text:004170D7 loc_4170D7:                             ; CODE XREF: sub_416C20+4A2↑j
.text:004170D7                                         ; sub_416C20+4F8↓j
.text:004170D7                 shld    edi, esi, 8
.text:004170DB                 movsx   eax, cl
.text:004170DE                 shl     esi, 8
.text:004170E1                 cdq
.text:004170E2                 add     esi, eax
.text:004170E4                 adc     edi, edx
.text:004170E6                 mov     edx, edi
.text:004170E8                 xor     ebx, ebx
.text:004170EA                 and     edx, 0FF000000h
.text:004170F0                 mov     eax, edx
.text:004170F2                 or      eax, ebx
.text:004170F4                 jz      short loc_41710F
.text:004170F6                 mov     ecx, edx
.text:004170F8                 xor     eax, eax
.text:004170FA                 shr     ecx, 10h
.text:004170FD                 mov     edx, esi
.text:004170FF                 xor     edx, ecx
.text:00417101                 mov     ecx, edi
.text:00417103                 xor     ecx, eax
.text:00417105                 mov     esi, edx
.text:00417107                 mov     edi, ecx
.text:00417109                 and     edi, 0FFFFFFh
.text:0041710F
.text:0041710F loc_41710F:                             ; CODE XREF: sub_416C20+4D4↑j
.text:0041710F                 inc     ebp
.text:00417110                 movzx   ebx, byte ptr [ebp+0]
.text:00417114                 test    bl, bl
.text:00417116                 mov     cl, bl
.text:00417118                 jnz     short loc_4170D7
.text:0041711A                 mov     eax, esi
.text:0041711C                 mov     edx, edi
.text:0041711E                 jmp     short loc_4170C8
.text:0041711E sub_416C20      endp
.text:0041711E
.text:00417120
.text:00417120 ; =============== S U B R O U T I N E =======================================
.text:00417120
.text:00417120
.text:00417120 ; int __cdecl sub_417120(LPCSTR)
.text:00417120 sub_417120      proc near               ; CODE XREF: sub_419220+CA↓p
.text:00417120
.text:00417120 lpRootPathName  = dword ptr -83Ch
.text:00417120 lpVolumeNameBuffer= dword ptr -838h
.text:00417120 nVolumeNameSize = dword ptr -834h
.text:00417120 lpVolumeSerialNumber= dword ptr -830h
.text:00417120 lpMaximumComponentLength= dword ptr -82Ch
.text:00417120 lpFileSystemFlags= dword ptr -828h
.text:00417120 lpFileSystemNameBuffer= dword ptr -824h
.text:00417120 nFileSystemNameSize= dword ptr -820h
.text:00417120 VolumeSerialNumber= dword ptr -818h
.text:00417120 MaximumComponentLength= dword ptr -814h
.text:00417120 FileSystemFlags = dword ptr -810h
.text:00417120 FileSystemNameBuffer= byte ptr -80Ch
.text:00417120 VolumeNameBuffer= byte ptr -40Ch
.text:00417120 var_4           = dword ptr -4
.text:00417120 arg_0           = dword ptr  4
.text:00417120
.text:00417120                 sub     esp, 83Ch
.text:00417126                 mov     [esp+83Ch+var_4], ebx
.text:0041712D                 mov     ebx, [esp+83Ch+arg_0]
.text:00417134                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00417137                 call    sub_419100
.text:0041713C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0041713F                 call    sub_418880
.text:00417144                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00417147                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0041714B                 mov     ebx, eax
.text:0041714D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00417151                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00417155                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00417159                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0041715D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00417161                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00417165                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0041716C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00417170                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00417174                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0041717C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00417184                 call    GetVolumeInformationA
.text:00417189                 sub     esp, 20h
.text:0041718C                 test    eax, eax
.text:0041718E                 setz    cl
.text:00417191                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00417194                 movzx   edx, cl
.text:00417197                 dec     edx
.text:00417198                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0041719C                 call    free
.text:004171A1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:004171A5                 mov     ebx, [esp+83Ch+var_4]
.text:004171AC                 add     esp, 83Ch
.text:004171B2                 retn
.text:004171B2 sub_417120      endp
.text:004171B2
.text:004171B2 ; ---------------------------------------------------------------------------
.text:004171B3                 align 10h
.text:004171C0                 push    ebp
.text:004171C1                 push    edi
.text:004171C2                 xor     edi, edi
.text:004171C4                 push    esi
.text:004171C5                 xor     esi, esi
.text:004171C7                 push    ebx
.text:004171C8                 mov     ebp, [esp+14h]
.text:004171CC                 test    ebp, ebp
.text:004171CE                 jz      short loc_4171D8
.text:004171D0                 movzx   ecx, byte ptr [ebp+0]
.text:004171D4                 test    cl, cl
.text:004171D6                 jnz     short loc_4171E1
.text:004171D8
.text:004171D8 loc_4171D8:                             ; CODE XREF: .text:004171CE↑j
.text:004171D8                 xor     eax, eax
.text:004171DA                 xor     edx, edx
.text:004171DC
.text:004171DC loc_4171DC:                             ; CODE XREF: .text:00417228↓j
.text:004171DC                 pop     ebx
.text:004171DD                 pop     esi
.text:004171DE                 pop     edi
.text:004171DF                 pop     ebp
.text:004171E0                 retn
.text:004171E1 ; ---------------------------------------------------------------------------
.text:004171E1
.text:004171E1 loc_4171E1:                             ; CODE XREF: .text:004171D6↑j
.text:004171E1                                         ; .text:00417222↓j
.text:004171E1                 shld    edi, esi, 8
.text:004171E5                 movsx   eax, cl
.text:004171E8                 shl     esi, 8
.text:004171EB                 cdq
.text:004171EC                 add     esi, eax
.text:004171EE                 adc     edi, edx
.text:004171F0                 mov     edx, edi
.text:004171F2                 xor     ebx, ebx
.text:004171F4                 and     edx, 0FF000000h
.text:004171FA                 mov     eax, edx
.text:004171FC                 or      eax, ebx
.text:004171FE                 jz      short loc_417219
.text:00417200                 mov     ecx, edx
.text:00417202                 xor     eax, eax
.text:00417204                 shr     ecx, 10h
.text:00417207                 mov     edx, esi
.text:00417209                 xor     edx, ecx
.text:0041720B                 mov     ecx, edi
.text:0041720D                 xor     ecx, eax
.text:0041720F                 mov     esi, edx
.text:00417211                 mov     edi, ecx
.text:00417213                 and     edi, 0FFFFFFh
.text:00417219
.text:00417219 loc_417219:                             ; CODE XREF: .text:004171FE↑j
.text:00417219                 inc     ebp
.text:0041721A                 movzx   ebx, byte ptr [ebp+0]
.text:0041721E                 test    bl, bl
.text:00417220                 mov     cl, bl
.text:00417222                 jnz     short loc_4171E1
.text:00417224                 mov     eax, esi
.text:00417226                 mov     edx, edi
.text:00417228                 jmp     short loc_4171DC
.text:00417228 ; ---------------------------------------------------------------------------
.text:0041722A                 align 10h
.text:00417230                 sub     esp, 2Ch
.text:00417233                 lea     edx, [esp+24h]
.text:00417237                 lea     ecx, [esp+28h]
.text:0041723B                 mov     [esp+0Ch], edx
.text:0041723F                 lea     edx, [esp+1Ch]
.text:00417243                 mov     [esp+4], edx
.text:00417247                 mov     edx, [esp+30h]
.text:0041724B                 mov     [esp+10h], ecx
.text:0041724F                 lea     ecx, [esp+20h]
.text:00417253                 mov     [esp+8], ecx
.text:00417257                 mov     [esp], edx
.text:0041725A                 call    sub_419B50
.text:0041725F                 test    eax, eax
.text:00417261                 jnz     short loc_417283
.text:00417263                 mov     dword ptr [esp+1Ch], 1
.text:0041726B                 mov     dword ptr [esp+20h], 200h
.text:00417273                 mov     dword ptr [esp+24h], 0
.text:0041727B                 mov     dword ptr [esp+28h], 0
.text:00417283
.text:00417283 loc_417283:                             ; CODE XREF: .text:00417261↑j
.text:00417283                 mov     eax, [esp+20h]
.text:00417287                 mov     ecx, [esp+1Ch]
.text:0041728B                 add     esp, 2Ch
.text:0041728E                 imul    eax, ecx
.text:00417291                 retn
.text:00417291 ; ---------------------------------------------------------------------------
.text:00417292                 align 10h
.text:004172A0
.text:004172A0 ; =============== S U B R O U T I N E =======================================
.text:004172A0
.text:004172A0
.text:004172A0 ; int __cdecl sub_4172A0(char *)
.text:004172A0 sub_4172A0      proc near               ; CODE XREF: sub_41A180+30↓p
.text:004172A0
.text:004172A0 Str             = dword ptr -1Ch
.text:004172A0 var_18          = dword ptr -18h
.text:004172A0 var_8           = dword ptr -8
.text:004172A0 var_4           = dword ptr -4
.text:004172A0 arg_0           = dword ptr  4
.text:004172A0
.text:004172A0                 sub     esp, 1Ch
.text:004172A3                 mov     eax, [esp+1Ch+arg_0]
.text:004172A7                 mov     [esp+1Ch+var_8], esi
.text:004172AB                 mov     [esp+1Ch+var_4], edi
.text:004172AF                 test    eax, eax
.text:004172B1                 jz      short loc_4172F0
.text:004172B3                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:004172BB                 mov     [esp+1Ch+Str], eax ; Str
.text:004172BE                 call    strrchr
.text:004172C3                 test    eax, eax
.text:004172C5                 jz      short loc_4172F0
.text:004172C7                 cld
.text:004172C8                 mov     esi, eax
.text:004172CA                 mov     edi, offset aLnk ; ".lnk"
.text:004172CF                 mov     ecx, 5
.text:004172D4                 repe cmpsb
.text:004172D6                 setz    dl
.text:004172D9                 movzx   eax, dl
.text:004172DC                 lea     esi, [esi+0]
.text:004172E0
.text:004172E0 loc_4172E0:                             ; CODE XREF: sub_4172A0+52↓j
.text:004172E0                 mov     esi, [esp+1Ch+var_8]
.text:004172E4                 mov     edi, [esp+1Ch+var_4]
.text:004172E8                 add     esp, 1Ch
.text:004172EB                 retn
.text:004172EB ; ---------------------------------------------------------------------------
.text:004172EC                 align 10h
.text:004172F0
.text:004172F0 loc_4172F0:                             ; CODE XREF: sub_4172A0+11↑j
.text:004172F0                                         ; sub_4172A0+25↑j
.text:004172F0                 xor     eax, eax
.text:004172F2                 jmp     short loc_4172E0
.text:004172F2 sub_4172A0      endp
.text:004172F2
.text:004172F2 ; ---------------------------------------------------------------------------
.text:004172F4                 align 10h
.text:00417300                 sub     esp, 1Ch
.text:00417303                 mov     [esp+10h], ebx
.text:00417307                 mov     ebx, [esp+20h]
.text:0041730B                 mov     [esp+14h], esi
.text:0041730F                 mov     [esp+18h], edi
.text:00417313                 xor     edi, edi
.text:00417315                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0041731C                 call    GetModuleHandleA
.text:00417321                 sub     esp, 4
.text:00417324                 mov     esi, eax
.text:00417326                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0041732E                 mov     [esp], eax
.text:00417331                 call    GetProcAddress
.text:00417336                 sub     esp, 8
.text:00417339                 test    eax, eax
.text:0041733B                 jz      short loc_417351
.text:0041733D                 mov     [esp], ebx
.text:00417340                 lea     ecx, [esp+0Ch]
.text:00417344                 mov     [esp+4], ecx
.text:00417348                 call    eax
.text:0041734A                 sub     esp, 8
.text:0041734D                 test    eax, eax
.text:0041734F                 jnz     short loc_4173B0
.text:00417351
.text:00417351 loc_417351:                             ; CODE XREF: .text:0041733B↑j
.text:00417351                 mov     eax, ds:Str
.text:00417356                 test    eax, eax
.text:00417358                 jz      short loc_4173D0
.text:0041735A
.text:0041735A loc_41735A:                             ; CODE XREF: .text:004173E3↓j
.text:0041735A                                         ; .text:004173F5↓j
.text:0041735A                 test    ebx, ebx
.text:0041735C                 jz      short loc_417363
.text:0041735E                 cmp     byte ptr [ebx], 0
.text:00417361                 jnz     short loc_417380
.text:00417363
.text:00417363 loc_417363:                             ; CODE XREF: .text:0041735C↑j
.text:00417363                                         ; .text:00417394↓j ...
.text:00417363                 mov     [esp], esi
.text:00417366                 call    FreeLibrary
.text:0041736B                 sub     esp, 4
.text:0041736E                 mov     eax, edi
.text:00417370                 mov     ebx, [esp+10h]
.text:00417374                 mov     esi, [esp+14h]
.text:00417378                 mov     edi, [esp+18h]
.text:0041737C                 add     esp, 1Ch
.text:0041737F                 retn
.text:00417380 ; ---------------------------------------------------------------------------
.text:00417380
.text:00417380 loc_417380:                             ; CODE XREF: .text:00417361↑j
.text:00417380                 mov     [esp], ebx
.text:00417383                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041738B                 call    strrchr
.text:00417390                 test    eax, eax
.text:00417392                 mov     ebx, eax
.text:00417394                 jz      short loc_417363
.text:00417396                 mov     [esp+4], eax
.text:0041739A                 mov     ecx, ds:Str
.text:004173A0                 mov     [esp], ecx
.text:004173A3                 call    strstr
.text:004173A8                 test    eax, eax
.text:004173AA                 jz      short loc_4173B7
.text:004173AC                 lea     esi, [esi+0]
.text:004173B0
.text:004173B0 loc_4173B0:                             ; CODE XREF: .text:0041734F↑j
.text:004173B0                                         ; .text:004173CD↓j
.text:004173B0                 mov     edi, 1
.text:004173B5                 jmp     short loc_417363
.text:004173B7 ; ---------------------------------------------------------------------------
.text:004173B7
.text:004173B7 loc_4173B7:                             ; CODE XREF: .text:004173AA↑j
.text:004173B7                 mov     [esp+4], ebx
.text:004173BB                 mov     ebx, off_421094 ; ".com;.exe;.bat;.cmd"
.text:004173C1                 mov     [esp], ebx
.text:004173C4                 call    strstr
.text:004173C9                 test    eax, eax
.text:004173CB                 jz      short loc_417363
.text:004173CD                 jmp     short loc_4173B0
.text:004173CD ; ---------------------------------------------------------------------------
.text:004173CF                 align 10h
.text:004173D0
.text:004173D0 loc_4173D0:                             ; CODE XREF: .text:00417358↑j
.text:004173D0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:004173D7                 call    getenv
.text:004173DC                 mov     ds:Str, eax
.text:004173E1                 test    eax, eax
.text:004173E3                 jnz     loc_41735A
.text:004173E9                 mov     edx, off_421094 ; ".com;.exe;.bat;.cmd"
.text:004173EF                 mov     ds:Str, edx
.text:004173F5                 jmp     loc_41735A
.text:004173F5 ; ---------------------------------------------------------------------------
.text:004173FA                 align 10h
.text:00417400                 sub     esp, 0Ch
.text:00417403                 mov     edx, [esp+10h]
.text:00417407                 mov     [esp], edx
.text:0041740A                 call    GetFileType
.text:0041740F                 sub     esp, 4
.text:00417412                 xor     edx, edx
.text:00417414                 cmp     eax, 2
.text:00417417                 jz      short loc_417430
.text:00417419                 cmp     eax, 3
.text:0041741C                 jz      short loc_417424
.text:0041741E
.text:0041741E loc_41741E:                             ; CODE XREF: .text:00417429↓j
.text:0041741E                                         ; .text:00417435↓j
.text:0041741E                 mov     eax, edx
.text:00417420                 add     esp, 0Ch
.text:00417423                 retn
.text:00417424 ; ---------------------------------------------------------------------------
.text:00417424
.text:00417424 loc_417424:                             ; CODE XREF: .text:0041741C↑j
.text:00417424                 mov     edx, 1000h
.text:00417429                 jmp     short loc_41741E
.text:00417429 ; ---------------------------------------------------------------------------
.text:0041742B                 align 10h
.text:00417430
.text:00417430 loc_417430:                             ; CODE XREF: .text:00417417↑j
.text:00417430                 mov     edx, 2000h
.text:00417435                 jmp     short loc_41741E
.text:00417435 ; ---------------------------------------------------------------------------
.text:00417437                 align 10h
.text:00417440                 mov     ecx, [esp+4]
.text:00417444                 xor     edx, edx
.text:00417446                 test    cl, 10h
.text:00417449                 setz    dl
.text:0041744C                 dec     edx
.text:0041744D                 and     edx, 0FFFFC000h
.text:00417453                 add     edx, 8000h
.text:00417459                 or      edx, 124h
.text:0041745F                 test    cl, 1
.text:00417462                 movzx   eax, dx
.text:00417465                 jnz     short locret_41746C
.text:00417467                 or      eax, 92h
.text:0041746C
.text:0041746C locret_41746C:                          ; CODE XREF: .text:00417465↑j
.text:0041746C                 retn
.text:0041746C ; ---------------------------------------------------------------------------
.text:0041746D                 align 10h
.text:00417470                 sub     esp, 2Ch
.text:00417473                 mov     [esp+20h], esi
.text:00417477                 mov     esi, [esp+30h]
.text:0041747B                 mov     [esp+1Ch], ebx
.text:0041747F                 xor     ebx, ebx
.text:00417481                 test    esi, esi
.text:00417483                 mov     [esp+24h], edi
.text:00417487                 mov     [esp+28h], ebp
.text:0041748B                 jz      short loc_4174E0
.text:0041748D                 cmp     byte ptr [esi], 0
.text:00417490                 jnz     short loc_4174E4
.text:00417492
.text:00417492 loc_417492:                             ; CODE XREF: .text:0041754C↓j
.text:00417492                                         ; .text:00417557↓j
.text:00417492                 test    esi, esi
.text:00417494                 jz      short loc_4174E0
.text:00417496                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041749E                 mov     [esp], esi
.text:004174A1                 call    strrchr
.text:004174A6                 test    eax, eax
.text:004174A8                 jz      short loc_4174E0
.text:004174AA                 cld
.text:004174AB                 mov     ecx, 5
.text:004174B0                 mov     esi, eax
.text:004174B2                 mov     edi, offset aLnk ; ".lnk"
.text:004174B7                 repe cmpsb
.text:004174B9                 setz    cl
.text:004174BC                 movzx   eax, cl
.text:004174BF                 nop
.text:004174C0
.text:004174C0 loc_4174C0:                             ; CODE XREF: .text:004174E2↓j
.text:004174C0                 test    eax, eax
.text:004174C2                 jz      short loc_4174CA
.text:004174C4                 or      ebx, 0A000h
.text:004174CA
.text:004174CA loc_4174CA:                             ; CODE XREF: .text:004174C2↑j
.text:004174CA                 mov     eax, ebx
.text:004174CC                 mov     esi, [esp+20h]
.text:004174D0                 mov     ebx, [esp+1Ch]
.text:004174D4                 mov     edi, [esp+24h]
.text:004174D8                 mov     ebp, [esp+28h]
.text:004174DC                 add     esp, 2Ch
.text:004174DF                 retn
.text:004174E0 ; ---------------------------------------------------------------------------
.text:004174E0
.text:004174E0 loc_4174E0:                             ; CODE XREF: .text:0041748B↑j
.text:004174E0                                         ; .text:00417494↑j ...
.text:004174E0                 xor     eax, eax
.text:004174E2                 jmp     short loc_4174C0
.text:004174E4 ; ---------------------------------------------------------------------------
.text:004174E4
.text:004174E4 loc_4174E4:                             ; CODE XREF: .text:00417490↑j
.text:004174E4                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:004174EB                 call    GetModuleHandleA
.text:004174F0                 sub     esp, 4
.text:004174F3                 mov     ebp, eax
.text:004174F5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004174FD                 mov     [esp], eax
.text:00417500                 call    GetProcAddress
.text:00417505                 sub     esp, 8
.text:00417508                 test    eax, eax
.text:0041750A                 mov     dword ptr [esp+14h], 0
.text:00417512                 jz      short loc_417528
.text:00417514                 mov     [esp], esi
.text:00417517                 lea     ecx, [esp+18h]
.text:0041751B                 mov     [esp+4], ecx
.text:0041751F                 call    eax
.text:00417521                 sub     esp, 8
.text:00417524                 test    eax, eax
.text:00417526                 jnz     short loc_417588
.text:00417528
.text:00417528 loc_417528:                             ; CODE XREF: .text:00417512↑j
.text:00417528                 mov     edx, ds:Str
.text:0041752E                 test    edx, edx
.text:00417530                 jz      short loc_4175B0
.text:00417532
.text:00417532 loc_417532:                             ; CODE XREF: .text:004175C3↓j
.text:00417532                                         ; .text:004175D5↓j
.text:00417532                 test    esi, esi
.text:00417534                 jz      short loc_41753B
.text:00417536                 cmp     byte ptr [esi], 0
.text:00417539                 jnz     short loc_41755C
.text:0041753B
.text:0041753B loc_41753B:                             ; CODE XREF: .text:00417534↑j
.text:0041753B                                         ; .text:00417570↓j ...
.text:0041753B                 mov     [esp], ebp
.text:0041753E                 call    FreeLibrary
.text:00417543                 sub     esp, 4
.text:00417546                 mov     eax, [esp+14h]
.text:0041754A                 test    eax, eax
.text:0041754C                 jz      loc_417492
.text:00417552                 mov     ebx, 49h ; 'I'
.text:00417557                 jmp     loc_417492
.text:0041755C ; ---------------------------------------------------------------------------
.text:0041755C
.text:0041755C loc_41755C:                             ; CODE XREF: .text:00417539↑j
.text:0041755C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00417564                 mov     [esp], esi
.text:00417567                 call    strrchr
.text:0041756C                 test    eax, eax
.text:0041756E                 mov     edi, eax
.text:00417570                 jz      short loc_41753B
.text:00417572                 mov     [esp+4], eax
.text:00417576                 mov     edx, ds:Str
.text:0041757C                 mov     [esp], edx
.text:0041757F                 call    strstr
.text:00417584                 test    eax, eax
.text:00417586                 jz      short loc_417592
.text:00417588
.text:00417588 loc_417588:                             ; CODE XREF: .text:00417526↑j
.text:00417588                                         ; .text:004175A8↓j
.text:00417588                 mov     dword ptr [esp+14h], 1
.text:00417590                 jmp     short loc_41753B
.text:00417592 ; ---------------------------------------------------------------------------
.text:00417592
.text:00417592 loc_417592:                             ; CODE XREF: .text:00417586↑j
.text:00417592                 mov     [esp+4], edi
.text:00417596                 mov     edi, off_421094 ; ".com;.exe;.bat;.cmd"
.text:0041759C                 mov     [esp], edi
.text:0041759F                 call    strstr
.text:004175A4                 test    eax, eax
.text:004175A6                 jz      short loc_41753B
.text:004175A8                 jmp     short loc_417588
.text:004175A8 ; ---------------------------------------------------------------------------
.text:004175AA                 align 10h
.text:004175B0
.text:004175B0 loc_4175B0:                             ; CODE XREF: .text:00417530↑j
.text:004175B0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:004175B7                 call    getenv
.text:004175BC                 mov     ds:Str, eax
.text:004175C1                 test    eax, eax
.text:004175C3                 jnz     loc_417532
.text:004175C9                 mov     ecx, off_421094 ; ".com;.exe;.bat;.cmd"
.text:004175CF                 mov     ds:Str, ecx
.text:004175D5                 jmp     loc_417532
.text:004175D5 ; ---------------------------------------------------------------------------
.text:004175DA                 align 10h
.text:004175E0                 push    esi
.text:004175E1                 push    ebx
.text:004175E2                 sub     esp, 864h
.text:004175E8                 mov     ebx, [esp+870h]
.text:004175EF                 lea     edx, [esp+830h]
.text:004175F6                 mov     esi, [esp+874h]
.text:004175FD                 mov     [esp+4], edx
.text:00417601                 mov     [esp], ebx
.text:00417604                 call    sub_416460
.text:00417609                 xor     edx, edx
.text:0041760B                 test    eax, eax
.text:0041760D                 jz      loc_4176F5
.text:00417613                 mov     ecx, [esp+830h]
.text:0041761A                 test    cl, 10h
.text:0041761D                 mov     [esi], ecx
.text:0041761F                 mov     eax, [esp+834h]
.text:00417626                 mov     edx, [esp+838h]
.text:0041762D                 mov     [esi+4], eax
.text:00417630                 mov     [esi+8], edx
.text:00417633                 mov     eax, [esp+83Ch]
.text:0041763A                 mov     edx, [esp+840h]
.text:00417641                 mov     [esi+0Ch], eax
.text:00417644                 mov     [esi+10h], edx
.text:00417647                 mov     edx, [esp+848h]
.text:0041764E                 mov     eax, [esp+844h]
.text:00417655                 mov     [esi+18h], edx
.text:00417658                 mov     [esi+14h], eax
.text:0041765B                 mov     edx, [esp+84Ch]
.text:00417662                 mov     [esi+20h], edx
.text:00417665                 mov     edx, [esp+850h]
.text:0041766C                 mov     [esi+24h], edx
.text:0041766F                 jnz     loc_417700
.text:00417675                 mov     dword ptr [esi+28h], 1
.text:0041767C
.text:0041767C loc_41767C:                             ; CODE XREF: .text:0041770B↓j
.text:0041767C                 mov     [esp], ebx
.text:0041767F                 call    sub_419100
.text:00417684                 mov     [esp], eax
.text:00417687                 call    sub_418880
.text:0041768C                 mov     [esp], eax
.text:0041768F                 lea     edx, [esp+30h]
.text:00417693                 mov     ebx, eax
.text:00417695                 mov     [esp+18h], edx
.text:00417699                 lea     ecx, [esp+2Ch]
.text:0041769D                 lea     edx, [esp+28h]
.text:004176A1                 mov     [esp+14h], ecx
.text:004176A5                 lea     ecx, [esp+24h]
.text:004176A9                 mov     [esp+10h], edx
.text:004176AD                 lea     edx, [esp+430h]
.text:004176B4                 mov     [esp+0Ch], ecx
.text:004176B8                 mov     [esp+4], edx
.text:004176BC                 mov     dword ptr [esp+1Ch], 400h
.text:004176C4                 mov     dword ptr [esp+8], 400h
.text:004176CC                 call    GetVolumeInformationA
.text:004176D1                 sub     esp, 20h
.text:004176D4                 test    eax, eax
.text:004176D6                 setz    cl
.text:004176D9                 mov     [esp], ebx
.text:004176DC                 movzx   edx, cl
.text:004176DF                 dec     edx
.text:004176E0                 and     [esp+24h], edx
.text:004176E4                 call    free
.text:004176E9                 mov     ecx, [esp+24h]
.text:004176ED                 mov     edx, 1
.text:004176F2                 mov     [esi+1Ch], ecx
.text:004176F5
.text:004176F5 loc_4176F5:                             ; CODE XREF: .text:0041760D↑j
.text:004176F5                 add     esp, 864h
.text:004176FB                 mov     eax, edx
.text:004176FD                 pop     ebx
.text:004176FE                 pop     esi
.text:004176FF                 retn
.text:00417700 ; ---------------------------------------------------------------------------
.text:00417700
.text:00417700 loc_417700:                             ; CODE XREF: .text:0041766F↑j
.text:00417700                 mov     [esp], ebx
.text:00417703                 call    sub_4165D0
.text:00417708                 mov     [esi+28h], eax
.text:0041770B                 jmp     loc_41767C
.text:00417710 ; ---------------------------------------------------------------------------
.text:00417710                 push    ebp
.text:00417711                 xor     edx, edx
.text:00417713                 push    edi
.text:00417714                 push    esi
.text:00417715                 xor     esi, esi
.text:00417717                 push    ebx
.text:00417718                 sub     esp, 1Ch
.text:0041771B                 mov     ebx, [esp+5Ch]
.text:0041771F                 mov     ecx, [esp+30h]
.text:00417723                 mov     edi, [esp+60h]
.text:00417727                 or      esi, ebx
.text:00417729                 mov     eax, [esp+4Ch]
.text:0041772D                 or      edi, edx
.text:0041772F                 mov     ebx, [esp+64h]
.text:00417733                 xor     edx, edx
.text:00417735                 test    cl, 10h
.text:00417738                 setz    dl
.text:0041773B                 mov     [ebx+10h], eax
.text:0041773E                 mov     [ebx+8], edi
.text:00417741                 mov     [ebx+0Ch], esi
.text:00417744                 dec     edx
.text:00417745                 and     edx, 0FFFFC000h
.text:0041774B                 mov     dword ptr [ebx+14h], 0
.text:00417752                 add     edx, 8000h
.text:00417758                 or      edx, 124h
.text:0041775E                 test    cl, 1
.text:00417761                 movzx   eax, dx
.text:00417764                 jnz     short loc_41776B
.text:00417766                 or      eax, 92h
.text:0041776B
.text:0041776B loc_41776B:                             ; CODE XREF: .text:00417764↑j
.text:0041776B                 mov     ebx, [esp+54h]
.text:0041776F                 xor     edx, edx
.text:00417771                 xor     ebp, ebp
.text:00417773                 mov     edi, [esp+50h]
.text:00417777                 mov     ecx, [esp+64h]
.text:0041777B                 mov     esi, edi
.text:0041777D                 or      [ecx], eax
.text:0041777F                 mov     edi, ebx
.text:00417781                 or      edi, ebp
.text:00417783                 mov     ebp, edx
.text:00417785                 mov     ebx, [esp+64h]
.text:00417789                 or      ebp, esi
.text:0041778B                 mov     esi, [esp+58h]
.text:0041778F                 mov     edx, [esp+40h]
.text:00417793                 mov     [ebx+30h], edi
.text:00417796                 mov     [ebx+18h], esi
.text:00417799                 mov     ecx, edx
.text:0041779B                 xor     esi, esi
.text:0041779D                 mov     [ebx+34h], ebp
.text:004177A0                 xor     edx, edx
.text:004177A2                 or      esi, ecx
.text:004177A4                 mov     dword ptr [esp+8], 989680h
.text:004177AC                 mov     ebx, [esp+3Ch]
.text:004177B0                 mov     ecx, esi
.text:004177B2                 mov     dword ptr [esp+0Ch], 0
.text:004177BA                 or      ebx, edx
.text:004177BC                 mov     edx, ebx
.text:004177BE                 sub     edx, 0D53E8000h
.text:004177C4                 sbb     ecx, 19DB1DEh
.text:004177CA                 mov     [esp+4], ecx
.text:004177CE                 mov     [esp], edx
.text:004177D1                 call    sub_41F730
.text:004177D6                 mov     edx, eax
.text:004177D8                 mov     ecx, [esp+64h]
.text:004177DC                 shr     eax, 1Fh
.text:004177DF                 dec     eax
.text:004177E0                 and     edx, eax
.text:004177E2                 mov     [ecx+38h], edx
.text:004177E5                 mov     [esp], ebx
.text:004177E8                 mov     [esp+4], esi
.text:004177EC                 mov     dword ptr [esp+8], 989680h
.text:004177F4                 mov     dword ptr [esp+0Ch], 0
.text:004177FC                 call    sub_41F5B0
.text:00417801                 lea     ecx, [eax+eax*4]
.text:00417804                 lea     esi, [ecx+ecx*4]
.text:00417807                 mov     eax, [esp+64h]
.text:0041780B                 shl     esi, 2
.text:0041780E                 mov     ebx, esi
.text:00417810                 shr     ebx, 1Fh
.text:00417813                 dec     ebx
.text:00417814                 and     ebx, esi
.text:00417816                 xor     esi, esi
.text:00417818                 mov     [eax+3Ch], ebx
.text:0041781B                 mov     edx, [esp+38h]
.text:0041781F                 mov     dword ptr [esp+8], 989680h
.text:00417827                 mov     ebx, [esp+34h]
.text:0041782B                 mov     dword ptr [esp+0Ch], 0
.text:00417833                 mov     ecx, edx
.text:00417835                 xor     edx, edx
.text:00417837                 or      ebx, edx
.text:00417839                 or      esi, ecx
.text:0041783B                 mov     edx, ebx
.text:0041783D                 sub     edx, 0D53E8000h
.text:00417843                 mov     ecx, esi
.text:00417845                 sbb     ecx, 19DB1DEh
.text:0041784B                 mov     [esp+4], ecx
.text:0041784F                 mov     [esp], edx
.text:00417852                 call    sub_41F730
.text:00417857                 mov     edx, eax
.text:00417859                 mov     ecx, [esp+64h]
.text:0041785D                 shr     eax, 1Fh
.text:00417860                 dec     eax
.text:00417861                 and     edx, eax
.text:00417863                 mov     [ecx+48h], edx
.text:00417866                 mov     [esp], ebx
.text:00417869                 mov     [esp+4], esi
.text:0041786D                 mov     dword ptr [esp+8], 989680h
.text:00417875                 mov     dword ptr [esp+0Ch], 0
.text:0041787D                 call    sub_41F5B0
.text:00417882                 lea     edx, [eax+eax*4]
.text:00417885                 mov     ebx, [esp+64h]
.text:00417889                 lea     ecx, [edx+edx*4]
.text:0041788C                 shl     ecx, 2
.text:0041788F                 mov     esi, ecx
.text:00417891                 shr     esi, 1Fh
.text:00417894                 dec     esi
.text:00417895                 and     esi, ecx
.text:00417897                 mov     [ebx+4Ch], esi
.text:0041789A                 mov     edx, [esp+48h]
.text:0041789E                 xor     esi, esi
.text:004178A0                 mov     dword ptr [esp+8], 989680h
.text:004178A8                 mov     ebx, [esp+44h]
.text:004178AC                 mov     dword ptr [esp+0Ch], 0
.text:004178B4                 mov     ecx, edx
.text:004178B6                 xor     edx, edx
.text:004178B8                 or      ebx, edx
.text:004178BA                 or      esi, ecx
.text:004178BC                 mov     edx, ebx
.text:004178BE                 sub     edx, 0D53E8000h
.text:004178C4                 mov     ecx, esi
.text:004178C6                 sbb     ecx, 19DB1DEh
.text:004178CC                 mov     [esp+4], ecx
.text:004178D0                 mov     [esp], edx
.text:004178D3                 call    sub_41F730
.text:004178D8                 mov     edx, eax
.text:004178DA                 mov     ecx, [esp+64h]
.text:004178DE                 shr     eax, 1Fh
.text:004178E1                 dec     eax
.text:004178E2                 and     edx, eax
.text:004178E4                 mov     [ecx+40h], edx
.text:004178E7                 mov     [esp+4], esi
.text:004178EB                 mov     dword ptr [esp+8], 989680h
.text:004178F3                 mov     dword ptr [esp+0Ch], 0
.text:004178FB                 mov     [esp], ebx
.text:004178FE                 call    sub_41F5B0
.text:00417903                 lea     edx, [eax+eax*4]
.text:00417906                 lea     esi, [edx+edx*4]
.text:00417909                 mov     eax, [esp+64h]
.text:0041790D                 shl     esi, 2
.text:00417910                 mov     edx, ebp
.text:00417912                 mov     ecx, esi
.text:00417914                 mov     dword ptr [eax+50h], 200h
.text:0041791B                 shr     ecx, 1Fh
.text:0041791E                 dec     ecx
.text:0041791F                 and     ecx, esi
.text:00417921                 test    ebp, ebp
.text:00417923                 mov     [eax+44h], ecx
.text:00417926                 mov     eax, edi
.text:00417928                 js      short loc_417962
.text:0041792A
.text:0041792A loc_41792A:                             ; CODE XREF: .text:0041796A↓j
.text:0041792A                 xor     esi, esi
.text:0041792C                 mov     ebp, edi
.text:0041792E                 mov     ecx, eax
.text:00417930                 shrd    ecx, edx, 9
.text:00417934                 mov     ebx, edx
.text:00417936                 and     ebp, 1FFh
.text:0041793C                 mov     eax, esi
.text:0041793E                 sar     ebx, 9
.text:00417941                 or      eax, ebp
.text:00417943                 jz      short loc_41794B
.text:00417945                 add     ecx, 1
.text:00417948                 adc     ebx, 0
.text:0041794B
.text:0041794B loc_41794B:                             ; CODE XREF: .text:00417943↑j
.text:0041794B                 mov     edx, [esp+64h]
.text:0041794F                 mov     eax, 1
.text:00417954                 mov     [edx+58h], ecx
.text:00417957                 mov     [edx+5Ch], ebx
.text:0041795A                 add     esp, 1Ch
.text:0041795D                 pop     ebx
.text:0041795E                 pop     esi
.text:0041795F                 pop     edi
.text:00417960                 pop     ebp
.text:00417961                 retn
.text:00417962 ; ---------------------------------------------------------------------------
.text:00417962
.text:00417962 loc_417962:                             ; CODE XREF: .text:00417928↑j
.text:00417962                 add     eax, 1FFh
.text:00417967                 adc     edx, 0
.text:0041796A                 jmp     short loc_41792A
.text:0041796A ; ---------------------------------------------------------------------------
.text:0041796C                 align 10h
.text:00417970                 push    ebp
.text:00417971                 push    edi
.text:00417972                 xor     edi, edi
.text:00417974                 push    esi
.text:00417975                 xor     esi, esi
.text:00417977                 push    ebx
.text:00417978                 sub     esp, 0Ch
.text:0041797B                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00417982                 call    LoadLibraryA
.text:00417987                 sub     esp, 4
.text:0041798A                 mov     ebp, eax
.text:0041798C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00417994                 mov     [esp], eax
.text:00417997                 call    GetProcAddress
.text:0041799C                 sub     esp, 8
.text:0041799F                 test    eax, eax
.text:004179A1                 jz      short loc_4179D2
.text:004179A3                 lea     ecx, [esp+8]
.text:004179A7                 mov     [esp+4], ecx
.text:004179AB                 mov     ecx, [esp+20h]
.text:004179AF                 mov     [esp], ecx
.text:004179B2                 call    eax
.text:004179B4                 sub     esp, 8
.text:004179B7                 mov     ebx, eax
.text:004179B9                 cmp     eax, 0FFFFFFFFh
.text:004179BC                 jz      short loc_4179ED
.text:004179BE
.text:004179BE loc_4179BE:                             ; CODE XREF: .text:004179F6↓j
.text:004179BE                 mov     esi, [esp+8]
.text:004179C2                 mov     ecx, ebx
.text:004179C4                 xor     edi, edi
.text:004179C6                 xor     ebx, ebx
.text:004179C8                 mov     edx, esi
.text:004179CA                 mov     esi, ecx
.text:004179CC                 or      esi, edi
.text:004179CE                 mov     edi, ebx
.text:004179D0                 or      edi, edx
.text:004179D2
.text:004179D2 loc_4179D2:                             ; CODE XREF: .text:004179A1↑j
.text:004179D2                                         ; .text:004179F4↓j
.text:004179D2                 test    ebp, ebp
.text:004179D4                 jz      short loc_4179E1
.text:004179D6                 mov     [esp], ebp
.text:004179D9                 call    FreeLibrary
.text:004179DE                 sub     esp, 4
.text:004179E1
.text:004179E1 loc_4179E1:                             ; CODE XREF: .text:004179D4↑j
.text:004179E1                 add     esp, 0Ch
.text:004179E4                 mov     eax, esi
.text:004179E6                 mov     edx, edi
.text:004179E8                 pop     ebx
.text:004179E9                 pop     esi
.text:004179EA                 pop     edi
.text:004179EB                 pop     ebp
.text:004179EC                 retn
.text:004179ED ; ---------------------------------------------------------------------------
.text:004179ED
.text:004179ED loc_4179ED:                             ; CODE XREF: .text:004179BC↑j
.text:004179ED                 call    GetLastError
.text:004179F2                 test    eax, eax
.text:004179F4                 jnz     short loc_4179D2
.text:004179F6                 jmp     short loc_4179BE
.text:004179F6 ; ---------------------------------------------------------------------------
.text:004179F8                 align 10h
.text:00417A00
.text:00417A00 ; =============== S U B R O U T I N E =======================================
.text:00417A00
.text:00417A00
.text:00417A00 ; int __cdecl sub_417A00(LPCSTR lpFileName, int)
.text:00417A00 sub_417A00      proc near               ; CODE XREF: sub_418280-33F↓p
.text:00417A00
.text:00417A00 lpRootPathName  = dword ptr -8FCh
.text:00417A00 lpVolumeNameBuffer= dword ptr -8F8h
.text:00417A00 nVolumeNameSize = dword ptr -8F4h
.text:00417A00 lpVolumeSerialNumber= dword ptr -8F0h
.text:00417A00 lpMaximumComponentLength= dword ptr -8ECh
.text:00417A00 lpFileSystemFlags= dword ptr -8E8h
.text:00417A00 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00417A00 nFileSystemNameSize= dword ptr -8E0h
.text:00417A00 VolumeSerialNumber= dword ptr -8D8h
.text:00417A00 MaximumComponentLength= dword ptr -8D4h
.text:00417A00 FileSystemFlags = dword ptr -8D0h
.text:00417A00 var_8CC         = dword ptr -8CCh
.text:00417A00 var_8C8         = dword ptr -8C8h
.text:00417A00 var_8C4         = dword ptr -8C4h
.text:00417A00 var_8C0         = dword ptr -8C0h
.text:00417A00 var_8BC         = dword ptr -8BCh
.text:00417A00 var_8B8         = dword ptr -8B8h
.text:00417A00 var_8B4         = dword ptr -8B4h
.text:00417A00 var_8B0         = dword ptr -8B0h
.text:00417A00 var_8AC         = dword ptr -8ACh
.text:00417A00 var_8A8         = dword ptr -8A8h
.text:00417A00 var_8A4         = dword ptr -8A4h
.text:00417A00 var_8A0         = dword ptr -8A0h
.text:00417A00 var_89C         = dword ptr -89Ch
.text:00417A00 FileSystemNameBuffer= byte ptr -88Ch
.text:00417A00 VolumeNameBuffer= byte ptr -48Ch
.text:00417A00 var_8C          = dword ptr -8Ch
.text:00417A00 var_88          = dword ptr -88h
.text:00417A00 var_84          = dword ptr -84h
.text:00417A00 var_80          = dword ptr -80h
.text:00417A00 var_7C          = dword ptr -7Ch
.text:00417A00 var_78          = dword ptr -78h
.text:00417A00 var_74          = dword ptr -74h
.text:00417A00 var_70          = dword ptr -70h
.text:00417A00 var_6C          = dword ptr -6Ch
.text:00417A00 var_5C          = dword ptr -5Ch
.text:00417A00 var_58          = dword ptr -58h
.text:00417A00 var_54          = dword ptr -54h
.text:00417A00 var_50          = dword ptr -50h
.text:00417A00 var_4C          = dword ptr -4Ch
.text:00417A00 var_48          = dword ptr -48h
.text:00417A00 var_44          = dword ptr -44h
.text:00417A00 var_3C          = dword ptr -3Ch
.text:00417A00 var_38          = dword ptr -38h
.text:00417A00 var_34          = dword ptr -34h
.text:00417A00 lpFileName      = dword ptr  4
.text:00417A00 arg_4           = dword ptr  8
.text:00417A00
.text:00417A00                 push    ebp
.text:00417A01                 xor     eax, eax
.text:00417A03                 mov     ecx, 0Dh
.text:00417A08                 push    edi
.text:00417A09                 push    esi
.text:00417A0A                 push    ebx
.text:00417A0B                 sub     esp, 8ECh
.text:00417A11                 lea     edi, [esp+8FCh+var_5C]
.text:00417A18                 cld
.text:00417A19                 lea     edx, [esp+8FCh+var_8C]
.text:00417A20                 rep stosd
.text:00417A22                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00417A26                 lea     esi, [esp+8FCh+var_5C]
.text:00417A2D                 mov     edx, [esp+8FCh+lpFileName]
.text:00417A34                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00417A37                 call    sub_416460
.text:00417A3C                 test    eax, eax
.text:00417A3E                 mov     edx, 0FFFFFFFFh
.text:00417A43                 jz      loc_417DD4
.text:00417A49                 mov     edx, [esp+8FCh+var_88]
.text:00417A50                 mov     ebp, [esp+8FCh+var_84]
.text:00417A57                 mov     edi, [esp+8FCh+var_80]
.text:00417A5E                 mov     [esp+8FCh+var_58], edx
.text:00417A65                 mov     ecx, [esp+8FCh+var_7C]
.text:00417A6C                 mov     ebx, [esp+8FCh+var_8C]
.text:00417A73                 mov     [esp+8FCh+var_54], ebp
.text:00417A7A                 mov     edx, [esp+8FCh+var_78]
.text:00417A81                 mov     ebp, [esp+8FCh+var_74]
.text:00417A88                 mov     [esp+8FCh+var_50], edi
.text:00417A8F                 test    bl, 10h
.text:00417A92                 mov     edi, [esp+8FCh+var_70]
.text:00417A99                 mov     [esp+8FCh+var_4C], ecx
.text:00417AA0                 mov     ecx, [esp+8FCh+var_6C]
.text:00417AA7                 mov     [esp+8FCh+var_5C], ebx
.text:00417AAE                 mov     [esp+8FCh+var_48], edx
.text:00417AB5                 mov     [esp+8FCh+var_44], ebp
.text:00417ABC                 mov     [esp+8FCh+var_3C], edi
.text:00417AC3                 mov     [esp+8FCh+var_38], ecx
.text:00417ACA                 jnz     loc_417DF0
.text:00417AD0                 mov     ebx, 1
.text:00417AD5                 mov     [esp+8FCh+var_34], ebx
.text:00417ADC
.text:00417ADC loc_417ADC:                             ; CODE XREF: sub_417A00+406↓j
.text:00417ADC                 mov     eax, [esp+8FCh+lpFileName]
.text:00417AE3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00417AE7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00417AEB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00417AEE                 call    sub_419100
.text:00417AF3                 mov     [esp+8FCh+lpRootPathName], eax
.text:00417AF6                 call    sub_418880
.text:00417AFB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00417AFF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00417B03                 mov     ebp, eax
.text:00417B05                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00417B09                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00417B0D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00417B14                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00417B18                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00417B1C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00417B20                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00417B28                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00417B30                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00417B33                 call    GetVolumeInformationA
.text:00417B38                 sub     esp, 20h
.text:00417B3B                 test    eax, eax
.text:00417B3D                 lea     edi, [esp+8FCh+var_8CC]
.text:00417B41                 setz    bl
.text:00417B44                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00417B47                 xor     ebp, ebp
.text:00417B49                 movzx   edx, bl
.text:00417B4C                 dec     edx
.text:00417B4D                 xor     ebx, ebx
.text:00417B4F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00417B53                 call    free
.text:00417B58                 cld
.text:00417B59                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00417B5D                 mov     [esi+1Ch], ecx
.text:00417B60                 mov     ecx, 0Dh
.text:00417B65                 rep movsd
.text:00417B67                 mov     edi, [esp+8FCh+var_8A0]
.text:00417B6B                 mov     edx, [esp+8FCh+var_89C]
.text:00417B6F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00417B73                 or      ebp, edi
.text:00417B75                 mov     esi, [esp+8FCh+var_8B0]
.text:00417B79                 mov     edi, [esp+8FCh+arg_4]
.text:00417B80                 or      edx, ebx
.text:00417B82                 mov     [edi+8], edx
.text:00417B85                 xor     edx, edx
.text:00417B87                 test    cl, 10h
.text:00417B8A                 setz    dl
.text:00417B8D                 mov     [edi+0Ch], ebp
.text:00417B90                 mov     [edi+10h], esi
.text:00417B93                 mov     dword ptr [edi+14h], 0
.text:00417B9A                 dec     edx
.text:00417B9B                 and     edx, 0FFFFC000h
.text:00417BA1                 add     edx, 8000h
.text:00417BA7                 or      edx, 124h
.text:00417BAD                 test    cl, 1
.text:00417BB0                 movzx   eax, dx
.text:00417BB3                 jnz     short loc_417BBA
.text:00417BB5                 or      eax, 92h
.text:00417BBA
.text:00417BBA loc_417BBA:                             ; CODE XREF: sub_417A00+1B3↑j
.text:00417BBA                 mov     ebx, [esp+8FCh+var_8A8]
.text:00417BBE                 xor     edx, edx
.text:00417BC0                 xor     ebp, ebp
.text:00417BC2                 mov     edi, [esp+8FCh+var_8AC]
.text:00417BC6                 mov     ecx, [esp+8FCh+arg_4]
.text:00417BCD                 mov     esi, edi
.text:00417BCF                 or      [ecx], eax
.text:00417BD1                 mov     edi, ebx
.text:00417BD3                 or      edi, ebp
.text:00417BD5                 mov     ebp, edx
.text:00417BD7                 mov     ebx, [esp+8FCh+var_8A4]
.text:00417BDB                 or      ebp, esi
.text:00417BDD                 mov     esi, [esp+8FCh+arg_4]
.text:00417BE4                 mov     edx, [esp+8FCh+var_8BC]
.text:00417BE8                 mov     [esi+18h], ebx
.text:00417BEB                 mov     ebx, [esp+8FCh+var_8C0]
.text:00417BEF                 mov     ecx, edx
.text:00417BF1                 mov     [esi+30h], edi
.text:00417BF4                 xor     edx, edx
.text:00417BF6                 mov     [esi+34h], ebp
.text:00417BF9                 or      ebx, edx
.text:00417BFB                 xor     esi, esi
.text:00417BFD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417C05                 or      esi, ecx
.text:00417C07                 mov     edx, ebx
.text:00417C09                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417C11                 sub     edx, 0D53E8000h
.text:00417C17                 mov     ecx, esi
.text:00417C19                 sbb     ecx, 19DB1DEh
.text:00417C1F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00417C23                 mov     [esp+8FCh+lpRootPathName], edx
.text:00417C26                 call    sub_41F730
.text:00417C2B                 mov     edx, eax
.text:00417C2D                 mov     ecx, [esp+8FCh+arg_4]
.text:00417C34                 shr     eax, 1Fh
.text:00417C37                 dec     eax
.text:00417C38                 and     edx, eax
.text:00417C3A                 mov     [ecx+38h], edx
.text:00417C3D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417C40                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417C44                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417C4C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417C54                 call    sub_41F5B0
.text:00417C59                 lea     ecx, [eax+eax*4]
.text:00417C5C                 lea     ebx, [ecx+ecx*4]
.text:00417C5F                 mov     eax, [esp+8FCh+arg_4]
.text:00417C66                 shl     ebx, 2
.text:00417C69                 mov     esi, ebx
.text:00417C6B                 shr     esi, 1Fh
.text:00417C6E                 dec     esi
.text:00417C6F                 and     esi, ebx
.text:00417C71                 mov     [eax+3Ch], esi
.text:00417C74                 mov     edx, [esp+8FCh+var_8C4]
.text:00417C78                 xor     esi, esi
.text:00417C7A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417C82                 mov     ebx, [esp+8FCh+var_8C8]
.text:00417C86                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417C8E                 mov     ecx, edx
.text:00417C90                 xor     edx, edx
.text:00417C92                 or      ebx, edx
.text:00417C94                 or      esi, ecx
.text:00417C96                 mov     edx, ebx
.text:00417C98                 sub     edx, 0D53E8000h
.text:00417C9E                 mov     ecx, esi
.text:00417CA0                 sbb     ecx, 19DB1DEh
.text:00417CA6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00417CAA                 mov     [esp+8FCh+lpRootPathName], edx
.text:00417CAD                 call    sub_41F730
.text:00417CB2                 mov     edx, eax
.text:00417CB4                 mov     ecx, [esp+8FCh+arg_4]
.text:00417CBB                 shr     eax, 1Fh
.text:00417CBE                 dec     eax
.text:00417CBF                 and     edx, eax
.text:00417CC1                 mov     [ecx+48h], edx
.text:00417CC4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417CC7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417CCB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417CD3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417CDB                 call    sub_41F5B0
.text:00417CE0                 lea     ecx, [eax+eax*4]
.text:00417CE3                 lea     ebx, [ecx+ecx*4]
.text:00417CE6                 mov     eax, [esp+8FCh+arg_4]
.text:00417CED                 shl     ebx, 2
.text:00417CF0                 mov     esi, ebx
.text:00417CF2                 shr     esi, 1Fh
.text:00417CF5                 dec     esi
.text:00417CF6                 and     esi, ebx
.text:00417CF8                 mov     [eax+4Ch], esi
.text:00417CFB                 mov     edx, [esp+8FCh+var_8B4]
.text:00417CFF                 xor     esi, esi
.text:00417D01                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417D09                 mov     ebx, [esp+8FCh+var_8B8]
.text:00417D0D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417D15                 mov     ecx, edx
.text:00417D17                 xor     edx, edx
.text:00417D19                 or      ebx, edx
.text:00417D1B                 or      esi, ecx
.text:00417D1D                 mov     edx, ebx
.text:00417D1F                 sub     edx, 0D53E8000h
.text:00417D25                 mov     ecx, esi
.text:00417D27                 sbb     ecx, 19DB1DEh
.text:00417D2D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00417D31                 mov     [esp+8FCh+lpRootPathName], edx
.text:00417D34                 call    sub_41F730
.text:00417D39                 mov     edx, eax
.text:00417D3B                 mov     ecx, [esp+8FCh+arg_4]
.text:00417D42                 shr     eax, 1Fh
.text:00417D45                 dec     eax
.text:00417D46                 and     edx, eax
.text:00417D48                 mov     [ecx+40h], edx
.text:00417D4B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417D4E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417D52                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417D5A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417D62                 call    sub_41F5B0
.text:00417D67                 lea     ebx, [eax+eax*4]
.text:00417D6A                 mov     esi, [esp+8FCh+arg_4]
.text:00417D71                 lea     edx, [ebx+ebx*4]
.text:00417D74                 shl     edx, 2
.text:00417D77                 mov     eax, edi
.text:00417D79                 mov     ecx, edx
.text:00417D7B                 mov     dword ptr [esi+50h], 200h
.text:00417D82                 shr     ecx, 1Fh
.text:00417D85                 dec     ecx
.text:00417D86                 and     ecx, edx
.text:00417D88                 test    ebp, ebp
.text:00417D8A                 mov     edx, ebp
.text:00417D8C                 mov     [esi+44h], ecx
.text:00417D8F                 js      short loc_417DE1
.text:00417D91
.text:00417D91 loc_417D91:                             ; CODE XREF: sub_417A00+3E9↓j
.text:00417D91                 xor     esi, esi
.text:00417D93                 mov     ebp, edi
.text:00417D95                 mov     ecx, eax
.text:00417D97                 shrd    ecx, edx, 9
.text:00417D9B                 mov     ebx, edx
.text:00417D9D                 and     ebp, 1FFh
.text:00417DA3                 mov     eax, esi
.text:00417DA5                 sar     ebx, 9
.text:00417DA8                 or      eax, ebp
.text:00417DAA                 jz      short loc_417DB2
.text:00417DAC                 add     ecx, 1
.text:00417DAF                 adc     ebx, 0
.text:00417DB2
.text:00417DB2 loc_417DB2:                             ; CODE XREF: sub_417A00+3AA↑j
.text:00417DB2                 mov     edx, [esp+8FCh+arg_4]
.text:00417DB9                 mov     [edx+5Ch], ebx
.text:00417DBC                 mov     ebx, [esp+8FCh+lpFileName]
.text:00417DC3                 mov     [edx+58h], ecx
.text:00417DC6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00417DCA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00417DCD                 call    sub_416C20
.text:00417DD2                 xor     edx, edx
.text:00417DD4
.text:00417DD4 loc_417DD4:                             ; CODE XREF: sub_417A00+43↑j
.text:00417DD4                 add     esp, 8ECh
.text:00417DDA                 mov     eax, edx
.text:00417DDC                 pop     ebx
.text:00417DDD                 pop     esi
.text:00417DDE                 pop     edi
.text:00417DDF                 pop     ebp
.text:00417DE0                 retn
.text:00417DE1 ; ---------------------------------------------------------------------------
.text:00417DE1
.text:00417DE1 loc_417DE1:                             ; CODE XREF: sub_417A00+38F↑j
.text:00417DE1                 add     eax, 1FFh
.text:00417DE6                 adc     edx, 0
.text:00417DE9                 jmp     short loc_417D91
.text:00417DE9 ; ---------------------------------------------------------------------------
.text:00417DEB                 align 10h
.text:00417DF0
.text:00417DF0 loc_417DF0:                             ; CODE XREF: sub_417A00+CA↑j
.text:00417DF0                 mov     eax, [esp+8FCh+lpFileName]
.text:00417DF7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00417DFA                 call    sub_4165D0
.text:00417DFF                 mov     [esp+8FCh+var_34], eax
.text:00417E06                 jmp     loc_417ADC
.text:00417E06 sub_417A00      endp
.text:00417E06
.text:00417E06 ; ---------------------------------------------------------------------------
.text:00417E0B                 align 10h
.text:00417E10 ; START OF FUNCTION CHUNK FOR sub_418280
.text:00417E10
.text:00417E10 loc_417E10:                             ; CODE XREF: sub_418280+26↓j
.text:00417E10                 cld
.text:00417E11                 sub     esp, 2Ch
.text:00417E14                 xor     eax, eax
.text:00417E16                 mov     [esp+2Ch+var_10], ebx
.text:00417E1A                 mov     ecx, 18h
.text:00417E1F                 mov     ebx, [esp+2Ch+arg_0]
.text:00417E23                 mov     [esp+2Ch+var_C], esi
.text:00417E27                 mov     esi, [esp+2Ch+arg_4]
.text:00417E2B                 test    ebx, ebx
.text:00417E2D                 mov     [esp+2Ch+var_8], edi
.text:00417E31                 mov     edi, esi
.text:00417E33                 mov     [esp+2Ch+var_4], ebp
.text:00417E37                 rep stosd
.text:00417E39                 jz      short loc_417E40
.text:00417E3B                 cmp     byte ptr [ebx], 0
.text:00417E3E                 jnz     short loc_417E58
.text:00417E40
.text:00417E40 loc_417E40:                             ; CODE XREF: sub_418280-447↑j
.text:00417E40                 xor     edx, edx
.text:00417E42
.text:00417E42 loc_417E42:                             ; CODE XREF: sub_418280-411↓j
.text:00417E42                                         ; sub_418280-368↓j
.text:00417E42                 mov     ebx, [esp+2Ch+var_10]
.text:00417E46                 mov     eax, edx
.text:00417E48                 mov     esi, [esp+2Ch+var_C]
.text:00417E4C                 mov     edi, [esp+2Ch+var_8]
.text:00417E50                 mov     ebp, [esp+2Ch+var_4]
.text:00417E54                 add     esp, 2Ch
.text:00417E57                 retn
.text:00417E58 ; ---------------------------------------------------------------------------
.text:00417E58
.text:00417E58 loc_417E58:                             ; CODE XREF: sub_418280-442↑j
.text:00417E58                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00417E60                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00417E63                 call    sub_41A940
.text:00417E68                 test    eax, eax
.text:00417E6A                 mov     edx, 0FFFFFFFFh
.text:00417E6F                 jnz     short loc_417E42
.text:00417E71                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00417E74                 call    sub_41ACF0
.text:00417E79                 mov     [esp+2Ch+lpFileName], eax
.text:00417E7C                 call    sub_418880
.text:00417E81                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00417E84                 mov     ebp, eax
.text:00417E86                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00417E8E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00417E96                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00417E9E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00417EA6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00417EAE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00417EB6                 call    CreateFileA
.text:00417EBB                 sub     esp, 1Ch
.text:00417EBE                 mov     ebx, eax
.text:00417EC0                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00417EC4                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00417EC7                 call    sub_416750
.text:00417ECC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00417ECF                 mov     edi, eax
.text:00417ED1                 call    CloseHandle
.text:00417ED6                 sub     esp, 4
.text:00417ED9                 cmp     edi, 0FFFFFFFFh
.text:00417EDC                 jz      short loc_417F3A
.text:00417EDE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00417EE2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00417EE5                 call    sub_416C20
.text:00417EEA
.text:00417EEA loc_417EEA:                             ; CODE XREF: sub_418280-338↓j
.text:00417EEA                 mov     edx, [esi]
.text:00417EEC                 and     edx, 0F000h
.text:00417EF2                 cmp     edx, 4000h
.text:00417EF8                 jz      short loc_417F2D
.text:00417EFA
.text:00417EFA loc_417EFA:                             ; CODE XREF: sub_418280-348↓j
.text:00417EFA                 cmp     edi, 0FFFFFFFFh
.text:00417EFD                 jz      short loc_417F1D
.text:00417EFF
.text:00417EFF loc_417EFF:                             ; CODE XREF: sub_418280-355↓j
.text:00417EFF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00417F06                 call    SetErrorMode
.text:00417F0B                 sub     esp, 4
.text:00417F0E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00417F11                 call    free
.text:00417F16                 mov     edx, edi
.text:00417F18                 jmp     loc_417E42
.text:00417F1D ; ---------------------------------------------------------------------------
.text:00417F1D
.text:00417F1D loc_417F1D:                             ; CODE XREF: sub_418280-383↑j
.text:00417F1D                 call    sub_41ACA0
.text:00417F22                 mov     esi, eax
.text:00417F24                 call    _errno
.text:00417F29                 mov     [eax], esi
.text:00417F2B                 jmp     short loc_417EFF
.text:00417F2D ; ---------------------------------------------------------------------------
.text:00417F2D
.text:00417F2D loc_417F2D:                             ; CODE XREF: sub_418280-388↑j
.text:00417F2D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00417F30                 call    sub_4165D0
.text:00417F35                 mov     [esi+18h], eax
.text:00417F38                 jmp     short loc_417EFA
.text:00417F3A ; ---------------------------------------------------------------------------
.text:00417F3A
.text:00417F3A loc_417F3A:                             ; CODE XREF: sub_418280-3A4↑j
.text:00417F3A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00417F3E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00417F41                 call    sub_417A00
.text:00417F46                 mov     edi, eax
.text:00417F48                 jmp     short loc_417EEA
.text:00417F48 ; END OF FUNCTION CHUNK FOR sub_418280
.text:00417F48 ; ---------------------------------------------------------------------------
.text:00417F4A                 align 10h
.text:00417F50
.text:00417F50 ; =============== S U B R O U T I N E =======================================
.text:00417F50
.text:00417F50
.text:00417F50 ; int __cdecl sub_417F50(LPCSTR, LPCSTR)
.text:00417F50 sub_417F50      proc near               ; CODE XREF: sub_418130+A7↓p
.text:00417F50
.text:00417F50 lpFileName      = dword ptr -27Ch
.text:00417F50 dwDesiredAccess = dword ptr -278h
.text:00417F50 dwShareMode     = dword ptr -274h
.text:00417F50 lpSecurityAttributes= dword ptr -270h
.text:00417F50 dwCreationDisposition= dword ptr -26Ch
.text:00417F50 dwFlagsAndAttributes= dword ptr -268h
.text:00417F50 hTemplateFile   = dword ptr -264h
.text:00417F50 NumberOfBytesWritten= dword ptr -254h
.text:00417F50 Context         = dword ptr -250h
.text:00417F50 Dest            = word ptr -24Ch
.text:00417F50 Buffer          = byte ptr -3Ch
.text:00417F50 var_38          = dword ptr -38h
.text:00417F50 var_34          = dword ptr -34h
.text:00417F50 var_30          = dword ptr -30h
.text:00417F50 var_2C          = dword ptr -2Ch
.text:00417F50 arg_0           = dword ptr  4
.text:00417F50 arg_4           = dword ptr  8
.text:00417F50
.text:00417F50                 push    ebp
.text:00417F51                 push    edi
.text:00417F52                 push    esi
.text:00417F53                 push    ebx
.text:00417F54                 sub     esp, 26Ch
.text:00417F5A                 mov     edx, [esp+27Ch+arg_0]
.text:00417F61                 mov     [esp+27Ch+Context], 0
.text:00417F69                 mov     [esp+27Ch+hTemplateFile], 0 ; hTemplateFile
.text:00417F71                 mov     [esp+27Ch+dwFlagsAndAttributes], 3000000h ; dwFlagsAndAttributes
.text:00417F79                 mov     [esp+27Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00417F81                 mov     [esp+27Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00417F89                 mov     [esp+27Ch+dwShareMode], 0 ; dwShareMode
.text:00417F91                 mov     [esp+27Ch+dwDesiredAccess], 40000000h ; dwDesiredAccess
.text:00417F99                 mov     [esp+27Ch+lpFileName], edx ; lpFileName
.text:00417F9C                 call    CreateFileA
.text:00417FA1                 sub     esp, 1Ch
.text:00417FA4                 mov     ebx, eax
.text:00417FA6                 cmp     eax, 0FFFFFFFFh
.text:00417FA9                 jz      loc_418107
.text:00417FAF                 mov     edx, [esp+27Ch+arg_4]
.text:00417FB6                 lea     esi, [esp+27Ch+Dest]
.text:00417FBA                 xor     edi, edi
.text:00417FBC                 mov     ebp, 5
.text:00417FC1                 mov     [esp+27Ch+lpFileName], edx ; LPCSTR
.text:00417FC4                 call    sub_41ACF0
.text:00417FC9                 mov     [esp+27Ch+lpFileName], eax
.text:00417FCC                 call    sub_418880
.text:00417FD1                 mov     [esp+27Ch+dwDesiredAccess], eax ; Source
.text:00417FD5                 mov     [esp+27Ch+lpFileName], esi ; Dest
.text:00417FD8                 mov     [esp+27Ch+dwShareMode], 104h ; MaxCount
.text:00417FE0                 call    mbstowcs
.text:00417FE5                 mov     dword ptr [esp+27Ch+Buffer], ebp
.text:00417FEC                 lea     esi, [eax+eax]
.text:00417FEF                 xor     eax, eax
.text:00417FF1                 mov     [esp+27Ch+var_2C], edi
.text:00417FF8                 mov     ecx, esi
.text:00417FFA                 lea     ebp, [esp+27Ch+Context]
.text:00417FFE                 mov     [esp+27Ch+var_38], eax
.text:00418005                 sar     ecx, 1Fh
.text:00418008                 lea     edi, [esp+27Ch+NumberOfBytesWritten]
.text:0041800C                 mov     [esp+27Ch+var_34], esi
.text:00418013                 lea     edx, [esp+27Ch+Buffer]
.text:0041801A                 mov     [esp+27Ch+var_30], ecx
.text:00418021                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00418025                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:0041802D                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:00418035                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00418039                 mov     [esp+27Ch+dwShareMode], 14h ; nNumberOfBytesToWrite
.text:00418041                 mov     [esp+27Ch+dwDesiredAccess], edx ; lpBuffer
.text:00418045                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00418048                 call    BackupWrite
.text:0041804D                 sub     esp, 1Ch
.text:00418050                 test    eax, eax
.text:00418052                 jz      loc_4180E7
.text:00418058                 cmp     [esp+27Ch+NumberOfBytesWritten], 14h
.text:0041805D                 jnz     loc_4180E7
.text:00418063                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00418067                 lea     ecx, [esp+27Ch+Dest]
.text:0041806B                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00418073                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:0041807B                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:0041807F                 mov     [esp+27Ch+dwShareMode], esi ; nNumberOfBytesToWrite
.text:00418083                 mov     [esp+27Ch+dwDesiredAccess], ecx ; lpBuffer
.text:00418087                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:0041808A                 call    BackupWrite
.text:0041808F                 sub     esp, 1Ch
.text:00418092                 test    eax, eax
.text:00418094                 jz      short loc_4180E7
.text:00418096                 cmp     [esp+27Ch+NumberOfBytesWritten], esi
.text:0041809A                 jnz     short loc_4180E7
.text:0041809C                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:004180A0                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:004180A8                 mov     [esp+27Ch+dwCreationDisposition], 1 ; bAbort
.text:004180B0                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:004180B4                 mov     [esp+27Ch+dwShareMode], 0 ; nNumberOfBytesToWrite
.text:004180BC                 mov     [esp+27Ch+dwDesiredAccess], 0 ; lpBuffer
.text:004180C4                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:004180C7                 call    BackupWrite
.text:004180CC                 sub     esp, 1Ch
.text:004180CF                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:004180D2                 call    CloseHandle
.text:004180D7                 sub     esp, 4
.text:004180DA                 xor     eax, eax
.text:004180DC
.text:004180DC loc_4180DC:                             ; CODE XREF: sub_417F50+1B5↓j
.text:004180DC                 add     esp, 26Ch
.text:004180E2                 pop     ebx
.text:004180E3                 pop     esi
.text:004180E4                 pop     edi
.text:004180E5                 pop     ebp
.text:004180E6                 retn
.text:004180E7 ; ---------------------------------------------------------------------------
.text:004180E7
.text:004180E7 loc_4180E7:                             ; CODE XREF: sub_417F50+102↑j
.text:004180E7                                         ; sub_417F50+10D↑j ...
.text:004180E7                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:004180EA
.text:004180EA loc_4180EA:                             ; CODE XREF: sub_417F50+1BE↓j
.text:004180EA                 call    CloseHandle
.text:004180EF                 sub     esp, 4
.text:004180F2                 call    sub_41ACA0
.text:004180F7                 mov     edi, eax
.text:004180F9                 call    _errno
.text:004180FE                 mov     [eax], edi
.text:00418100                 mov     eax, 0FFFFFFFFh
.text:00418105                 jmp     short loc_4180DC
.text:00418107 ; ---------------------------------------------------------------------------
.text:00418107
.text:00418107 loc_418107:                             ; CODE XREF: sub_417F50+59↑j
.text:00418107                 mov     [esp+27Ch+lpFileName], 0FFFFFFFFh
.text:0041810E                 jmp     short loc_4180EA
.text:0041810E sub_417F50      endp
.text:0041810E
.text:0041810E ; ---------------------------------------------------------------------------
.text:00418110 ; const CHAR LibFileName[]
.text:00418110 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_418130+2C↓o
.text:00418119 ; const CHAR aCreatehardlink[]
.text:00418119 aCreatehardlink db 'CreateHardLinkA',0  ; DATA XREF: sub_418130+41↓o
.text:00418129                 align 10h
.text:00418130
.text:00418130 ; =============== S U B R O U T I N E =======================================
.text:00418130
.text:00418130
.text:00418130 ; int __cdecl sub_418130(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00418130 sub_418130      proc near               ; CODE XREF: sub_403270+C1C↑p
.text:00418130                                         ; sub_403270+10D5↑p ...
.text:00418130
.text:00418130 lpLibFileName   = dword ptr -1Ch
.text:00418130 lpProcName      = dword ptr -18h
.text:00418130 bFailIfExists   = dword ptr -14h
.text:00418130 var_C           = dword ptr -0Ch
.text:00418130 var_8           = dword ptr -8
.text:00418130 var_4           = dword ptr -4
.text:00418130 lpExistingFileName= dword ptr  4
.text:00418130 lpNewFileName   = dword ptr  8
.text:00418130
.text:00418130                 sub     esp, 1Ch
.text:00418133                 mov     [esp+1Ch+var_4], edi
.text:00418137                 mov     edi, [esp+1Ch+lpExistingFileName]
.text:0041813B                 mov     [esp+1Ch+var_C], ebx
.text:0041813F                 mov     ebx, [esp+1Ch+lpNewFileName]
.text:00418143                 test    edi, edi
.text:00418145                 mov     [esp+1Ch+var_8], esi
.text:00418149                 mov     esi, 0FFFFFFFFh
.text:0041814E                 jz      loc_418220
.text:00418154                 test    ebx, ebx
.text:00418156                 jz      loc_418220
.text:0041815C                 mov     [esp+1Ch+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:00418163                 call    LoadLibraryA
.text:00418168                 sub     esp, 4
.text:0041816B                 xor     edx, edx
.text:0041816D                 test    eax, eax
.text:0041816F                 jz      short loc_418186
.text:00418171                 mov     [esp+1Ch+lpProcName], offset aCreatehardlink ; "CreateHardLinkA"
.text:00418179                 mov     [esp+1Ch+lpLibFileName], eax ; hModule
.text:0041817C                 call    GetProcAddress
.text:00418181                 sub     esp, 8
.text:00418184                 mov     edx, eax
.text:00418186
.text:00418186 loc_418186:                             ; CODE XREF: sub_418130+3F↑j
.text:00418186                 test    edx, edx
.text:00418188                 jz      short loc_4181D0
.text:0041818A                 mov     [esp+1Ch+bFailIfExists], 0
.text:00418192                 mov     [esp+1Ch+lpProcName], edi
.text:00418196                 mov     [esp+1Ch+lpLibFileName], ebx
.text:00418199                 call    edx
.text:0041819B                 sub     esp, 0Ch
.text:0041819E                 test    eax, eax
.text:004181A0                 jz      short loc_4181C2
.text:004181A2                 xor     esi, esi
.text:004181A4                 lea     esi, [esi+0]
.text:004181AA                 lea     edi, [edi+0]
.text:004181B0
.text:004181B0 loc_4181B0:                             ; CODE XREF: sub_418130+95↓j
.text:004181B0                                         ; sub_418130+B1↓j ...
.text:004181B0                 mov     eax, esi
.text:004181B2
.text:004181B2 loc_4181B2:                             ; CODE XREF: sub_418130+100↓j
.text:004181B2                 mov     ebx, [esp+1Ch+var_C]
.text:004181B6                 mov     esi, [esp+1Ch+var_8]
.text:004181BA                 mov     edi, [esp+1Ch+var_4]
.text:004181BE                 add     esp, 1Ch
.text:004181C1                 retn
.text:004181C2 ; ---------------------------------------------------------------------------
.text:004181C2
.text:004181C2 loc_4181C2:                             ; CODE XREF: sub_418130+70↑j
.text:004181C2                 cmp     esi, 0FFFFFFFFh
.text:004181C5                 jnz     short loc_4181B0
.text:004181C7                 mov     esi, esi
.text:004181C9                 lea     edi, [edi+0]
.text:004181D0
.text:004181D0 loc_4181D0:                             ; CODE XREF: sub_418130+58↑j
.text:004181D0                 mov     [esp+1Ch+lpProcName], ebx ; LPCSTR
.text:004181D4                 mov     [esp+1Ch+lpLibFileName], edi ; LPCSTR
.text:004181D7                 call    sub_417F50
.text:004181DC                 cmp     eax, 0FFFFFFFFh
.text:004181DF                 mov     esi, eax
.text:004181E1                 jnz     short loc_4181B0
.text:004181E3                 mov     [esp+1Ch+bFailIfExists], 1 ; bFailIfExists
.text:004181EB                 mov     [esp+1Ch+lpProcName], ebx ; lpNewFileName
.text:004181EF                 mov     [esp+1Ch+lpLibFileName], edi ; lpExistingFileName
.text:004181F2                 call    CopyFileA
.text:004181F7                 sub     esp, 0Ch
.text:004181FA                 test    eax, eax
.text:004181FC                 setnz   cl
.text:004181FF                 movzx   edx, cl
.text:00418202                 lea     esi, [edx-1]
.text:00418205                 cmp     esi, 0FFFFFFFFh
.text:00418208                 jnz     short loc_4181B0
.text:0041820A                 call    sub_41ACA0
.text:0041820F                 mov     edi, eax
.text:00418211                 call    _errno
.text:00418216                 mov     [eax], edi
.text:00418218                 jmp     short loc_4181B0
.text:00418218 ; ---------------------------------------------------------------------------
.text:0041821A                 align 10h
.text:00418220
.text:00418220 loc_418220:                             ; CODE XREF: sub_418130+1E↑j
.text:00418220                                         ; sub_418130+26↑j
.text:00418220                 call    _errno
.text:00418225                 mov     dword ptr [eax], 16h
.text:0041822B                 mov     eax, 0FFFFFFFFh
.text:00418230                 jmp     short loc_4181B2
.text:00418230 sub_418130      endp
.text:00418230
.text:00418230 ; ---------------------------------------------------------------------------
.text:00418232                 align 10h
.text:00418240                 retn
.text:00418240 ; ---------------------------------------------------------------------------
.text:00418241                 align 10h
.text:00418250
.text:00418250 ; =============== S U B R O U T I N E =======================================
.text:00418250
.text:00418250
.text:00418250 sub_418250      proc near               ; CODE XREF: sub_403270+1A5D↑p
.text:00418250                                         ; sub_403270+1AD6↑p ...
.text:00418250
.text:00418250 var_C           = dword ptr -0Ch
.text:00418250 var_8           = dword ptr -8
.text:00418250 var_4           = dword ptr -4
.text:00418250 arg_0           = dword ptr  4
.text:00418250 arg_4           = dword ptr  8
.text:00418250
.text:00418250                 sub     esp, 0Ch
.text:00418253                 mov     edx, [esp+0Ch+arg_4]
.text:00418257                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0041825E                 mov     [esp+0Ch+var_4], edx ; int
.text:00418262                 mov     edx, [esp+0Ch+arg_0]
.text:00418266                 mov     [esp+0Ch+var_8], edx ; int
.text:0041826A                 call    sub_418280
.text:0041826F                 add     esp, 0Ch
.text:00418272                 retn
.text:00418272 sub_418250      endp
.text:00418272
.text:00418272 ; ---------------------------------------------------------------------------
.text:00418273                 align 10h
.text:00418280
.text:00418280 ; =============== S U B R O U T I N E =======================================
.text:00418280
.text:00418280
.text:00418280 ; int __cdecl sub_418280(LPCSTR, int, int)
.text:00418280 sub_418280      proc near               ; CODE XREF: sub_418250+1A↑p
.text:00418280                                         ; sub_418CB0+90↓p ...
.text:00418280
.text:00418280 lpFileName      = dword ptr -2Ch
.text:00418280 dwDesiredAccess = dword ptr -28h
.text:00418280 dwShareMode     = dword ptr -24h
.text:00418280 lpSecurityAttributes= dword ptr -20h
.text:00418280 dwCreationDisposition= dword ptr -1Ch
.text:00418280 dwFlagsAndAttributes= dword ptr -18h
.text:00418280 hTemplateFile   = dword ptr -14h
.text:00418280 var_10          = dword ptr -10h
.text:00418280 var_C           = dword ptr -0Ch
.text:00418280 var_8           = dword ptr -8
.text:00418280 var_4           = dword ptr -4
.text:00418280 arg_0           = dword ptr  4
.text:00418280 arg_4           = dword ptr  8
.text:00418280 arg_8           = dword ptr  0Ch
.text:00418280
.text:00418280 ; FUNCTION CHUNK AT .text:00417E10 SIZE 0000013A BYTES
.text:00418280
.text:00418280                 sub     esp, 0Ch
.text:00418283                 mov     ecx, [esp+0Ch+arg_0]
.text:00418287                 mov     edx, [esp+0Ch+arg_4]
.text:0041828B                 mov     eax, [esp+0Ch+arg_8]
.text:0041828F                 test    ecx, ecx
.text:00418291                 jnz     short loc_4182B0
.text:00418293                 test    edx, edx
.text:00418295                 jz      short loc_4182B0
.text:00418297                 test    eax, eax
.text:00418299                 jz      short loc_4182B0
.text:0041829B                 mov     [esp+0Ch+arg_4], eax
.text:0041829F                 mov     [esp+0Ch+arg_0], edx
.text:004182A3                 add     esp, 0Ch
.text:004182A6                 jmp     loc_417E10
.text:004182A6 ; ---------------------------------------------------------------------------
.text:004182AB                 align 10h
.text:004182B0
.text:004182B0 loc_4182B0:                             ; CODE XREF: sub_418280+11↑j
.text:004182B0                                         ; sub_418280+15↑j ...
.text:004182B0                 call    _errno
.text:004182B5                 mov     dword ptr [eax], 16h
.text:004182BB                 mov     eax, 0FFFFFFFFh
.text:004182C0                 add     esp, 0Ch
.text:004182C3                 retn
.text:004182C3 sub_418280      endp
.text:004182C3
.text:004182C3 ; ---------------------------------------------------------------------------
.text:004182C4                 align 10h
.text:004182D0
.text:004182D0 ; =============== S U B R O U T I N E =======================================
.text:004182D0
.text:004182D0
.text:004182D0 ; int __cdecl sub_4182D0(LPCSTR, int AccessMode)
.text:004182D0 sub_4182D0      proc near               ; CODE XREF: sub_403270+D01↑p
.text:004182D0                                         ; sub_41D5C0+349↓p
.text:004182D0
.text:004182D0 lpPathName      = dword ptr -1Ch
.text:004182D0 lpSecurityAttributes= dword ptr -18h
.text:004182D0 var_8           = dword ptr -8
.text:004182D0 var_4           = dword ptr -4
.text:004182D0 arg_0           = dword ptr  4
.text:004182D0 AccessMode      = dword ptr  8
.text:004182D0
.text:004182D0                 sub     esp, 1Ch
.text:004182D3                 mov     [esp+1Ch+var_8], ebx
.text:004182D7                 mov     ebx, [esp+1Ch+arg_0]
.text:004182DB                 mov     [esp+1Ch+var_4], esi
.text:004182DF                 mov     esi, [esp+1Ch+AccessMode]
.text:004182E3                 test    ebx, ebx
.text:004182E5                 jz      short loc_418335
.text:004182E7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004182EF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:004182F2                 call    CreateDirectoryA
.text:004182F7                 sub     esp, 8
.text:004182FA                 test    eax, eax
.text:004182FC                 jz      short loc_418316
.text:004182FE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00418302                 mov     esi, [esp+1Ch+var_4]
.text:00418306                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041830A                 mov     ebx, [esp+1Ch+var_8]
.text:0041830E                 add     esp, 1Ch
.text:00418311                 jmp     _chmod
.text:00418316 ; ---------------------------------------------------------------------------
.text:00418316
.text:00418316 loc_418316:                             ; CODE XREF: sub_4182D0+2C↑j
.text:00418316                 call    sub_41ACA0
.text:0041831B                 mov     esi, eax
.text:0041831D                 call    _errno
.text:00418322                 mov     [eax], esi
.text:00418324
.text:00418324 loc_418324:                             ; CODE XREF: sub_4182D0+70↓j
.text:00418324                 mov     ebx, [esp+1Ch+var_8]
.text:00418328                 mov     eax, 0FFFFFFFFh
.text:0041832D                 mov     esi, [esp+1Ch+var_4]
.text:00418331                 add     esp, 1Ch
.text:00418334                 retn
.text:00418335 ; ---------------------------------------------------------------------------
.text:00418335
.text:00418335 loc_418335:                             ; CODE XREF: sub_4182D0+15↑j
.text:00418335                 call    _errno
.text:0041833A                 mov     dword ptr [eax], 16h
.text:00418340                 jmp     short loc_418324
.text:00418340 sub_4182D0      endp
.text:00418340
.text:00418340 ; ---------------------------------------------------------------------------
.text:00418342                 align 10h
.text:00418350
.text:00418350 ; =============== S U B R O U T I N E =======================================
.text:00418350
.text:00418350
.text:00418350 ; int __cdecl sub_418350(char *, __int16)
.text:00418350 sub_418350      proc near               ; CODE XREF: sub_403270+BC2↑p
.text:00418350
.text:00418350 Destination     = dword ptr -13Ch
.text:00418350 Source          = dword ptr -138h
.text:00418350 dwPipeMode      = dword ptr -134h
.text:00418350 nMaxInstances   = dword ptr -130h
.text:00418350 nOutBufferSize  = dword ptr -12Ch
.text:00418350 nInBufferSize   = dword ptr -128h
.text:00418350 nDefaultTimeOut = dword ptr -124h
.text:00418350 lpSecurityAttributes= dword ptr -120h
.text:00418350 Name            = byte ptr -11Ch
.text:00418350 var_118         = dword ptr -118h
.text:00418350 var_114         = word ptr -114h
.text:00418350 var_8           = dword ptr -8
.text:00418350 var_4           = dword ptr -4
.text:00418350 arg_0           = dword ptr  4
.text:00418350 arg_4           = word ptr  8
.text:00418350
.text:00418350                 sub     esp, 13Ch
.text:00418356                 mov     eax, [esp+13Ch+arg_0]
.text:0041835D                 mov     [esp+13Ch+var_4], esi
.text:00418364                 mov     [esp+13Ch+var_8], ebx
.text:0041836B                 test    eax, eax
.text:0041836D                 movzx   esi, [esp+13Ch+arg_4]
.text:00418375                 jz      loc_41841D
.text:0041837B                 mov     dword ptr [esp+13Ch+Name], 5C2E5C5Ch
.text:00418383                 lea     ebx, [esp+13Ch+Name]
.text:00418387                 mov     [esp+13Ch+var_118], 65706970h
.text:0041838F                 mov     [esp+13Ch+var_114], 5Ch ; '\'
.text:00418396                 mov     [esp+13Ch+Source], eax ; Source
.text:0041839A                 mov     [esp+13Ch+Destination], ebx ; Destination
.text:0041839D                 call    strcat
.text:004183A2                 mov     [esp+13Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004183AA                 mov     [esp+13Ch+nDefaultTimeOut], 1388h ; nDefaultTimeOut
.text:004183B2                 mov     [esp+13Ch+nInBufferSize], 400h ; nInBufferSize
.text:004183BA                 mov     [esp+13Ch+nOutBufferSize], 400h ; nOutBufferSize
.text:004183C2                 mov     [esp+13Ch+nMaxInstances], 0FFh ; nMaxInstances
.text:004183CA                 mov     [esp+13Ch+dwPipeMode], 6 ; dwPipeMode
.text:004183D2                 mov     [esp+13Ch+Source], 3 ; dwOpenMode
.text:004183DA                 mov     [esp+13Ch+Destination], ebx ; lpName
.text:004183DD                 call    CreateNamedPipeA
.text:004183E2                 sub     esp, 20h
.text:004183E5                 cmp     eax, 0FFFFFFFFh
.text:004183E8                 jz      short loc_41840B
.text:004183EA                 mov     [esp+13Ch+Source], esi ; Flags
.text:004183EE                 mov     [esp+13Ch+Destination], eax ; OSFileHandle
.text:004183F1                 call    _open_osfhandle
.text:004183F6
.text:004183F6 loc_4183F6:                             ; CODE XREF: sub_418350+CB↓j
.text:004183F6                 mov     ebx, [esp+13Ch+var_8]
.text:004183FD                 mov     esi, [esp+13Ch+var_4]
.text:00418404                 add     esp, 13Ch
.text:0041840A                 retn
.text:0041840B ; ---------------------------------------------------------------------------
.text:0041840B
.text:0041840B loc_41840B:                             ; CODE XREF: sub_418350+98↑j
.text:0041840B                 call    _errno
.text:00418410                 mov     dword ptr [eax], 9
.text:00418416
.text:00418416 loc_418416:                             ; CODE XREF: sub_418350+D8↓j
.text:00418416                 mov     eax, 0FFFFFFFFh
.text:0041841B                 jmp     short loc_4183F6
.text:0041841D ; ---------------------------------------------------------------------------
.text:0041841D
.text:0041841D loc_41841D:                             ; CODE XREF: sub_418350+25↑j
.text:0041841D                 call    _errno
.text:00418422                 mov     dword ptr [eax], 16h
.text:00418428                 jmp     short loc_418416
.text:00418428 sub_418350      endp
.text:00418428
.text:00418428 ; ---------------------------------------------------------------------------
.text:0041842A                 align 10h
.text:00418430
.text:00418430 ; =============== S U B R O U T I N E =======================================
.text:00418430
.text:00418430 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00418430
.text:00418430 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00418430 _win32_longpath proc near               ; CODE XREF: .text:00418BF4↓p
.text:00418430
.text:00418430 C               = dword ptr -278h
.text:00418430 lpFindFileData  = dword ptr -274h
.text:00418430 Destination     = byte ptr -268h
.text:00418430 var_267         = byte ptr -267h
.text:00418430 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00418430 lpFileName      = dword ptr  8
.text:00418430
.text:00418430                 push    ebp
.text:00418431                 xor     eax, eax
.text:00418433                 push    edi
.text:00418434                 push    esi
.text:00418435                 push    ebx
.text:00418436                 sub     esp, 26Ch
.text:0041843C                 mov     esi, [esp+278h+lpFileName]
.text:00418443                 lea     ebp, [esp+278h+Destination]
.text:00418447                 test    esi, esi
.text:00418449                 jz      loc_4185A7
.text:0041844F                 movsx   edx, byte ptr [esi]
.text:00418452                 mov     [esp+278h+C], edx ; C
.text:00418455                 call    isalpha
.text:0041845A                 test    eax, eax
.text:0041845C                 jz      short loc_41846F
.text:0041845E                 mov     eax, [esp+278h+lpFileName]
.text:00418465                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00418469                 jz      loc_4187AB
.text:0041846F
.text:0041846F loc_41846F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041846F                 mov     edx, [esp+278h+lpFileName]
.text:00418476                 movzx   eax, byte ptr [edx]
.text:00418479                 cmp     al, 2Fh ; '/'
.text:0041847B                 jz      loc_41868B
.text:00418481                 cmp     al, 5Ch ; '\'
.text:00418483                 jz      loc_41868B
.text:00418489
.text:00418489 loc_418489:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00418489                                         ; _win32_longpath+2B1↓j ...
.text:00418489                 mov     [ebp+268h+Destination], 0
.text:0041848D                 movzx   ebx, byte ptr [esi]
.text:00418490                 test    bl, bl
.text:00418492                 jz      loc_418589
.text:00418498                 nop
.text:00418499                 lea     esi, [esi+0]
.text:004184A0
.text:004184A0 loc_4184A0:                             ; CODE XREF: _win32_longpath+153↓j
.text:004184A0                 cmp     bl, 2Fh ; '/'
.text:004184A3                 jz      loc_418640
.text:004184A9                 cmp     bl, 5Ch ; '\'
.text:004184AC                 jz      loc_418640
.text:004184B2
.text:004184B2 loc_4184B2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004184B2                                         ; _win32_longpath+22C↓j ...
.text:004184B2                 cmp     bl, 2Eh ; '.'
.text:004184B5                 jz      loc_4185E0
.text:004184BB
.text:004184BB loc_4184BB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004184BB                                         ; _win32_longpath+203↓j
.text:004184BB                 test    bl, bl
.text:004184BD                 jz      loc_418589
.text:004184C3                 cmp     bl, 2Fh ; '/'
.text:004184C6                 jz      short loc_4184E2
.text:004184C8                 cmp     bl, 5Ch ; '\'
.text:004184CB                 jz      short loc_4184E2
.text:004184CD                 lea     esi, [esi+0]
.text:004184D0
.text:004184D0 loc_4184D0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004184D0                 inc     esi
.text:004184D1                 movzx   ebx, byte ptr [esi]
.text:004184D4                 test    bl, bl
.text:004184D6                 jz      short loc_4184E2
.text:004184D8                 cmp     bl, 2Fh ; '/'
.text:004184DB                 jz      short loc_4184E2
.text:004184DD                 cmp     bl, 5Ch ; '\'
.text:004184E0                 jnz     short loc_4184D0
.text:004184E2
.text:004184E2 loc_4184E2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004184E2                                         ; _win32_longpath+9B↑j ...
.text:004184E2                 mov     byte ptr [esi], 0
.text:004184E5                 lea     edx, [esp+278h+FindFileData]
.text:004184EC                 mov     eax, [esp+278h+lpFileName]
.text:004184F3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004184F7                 mov     [esp+278h+C], eax ; lpFileName
.text:004184FA                 call    FindFirstFileA
.text:004184FF                 mov     [esi], bl
.text:00418501                 sub     esp, 8
.text:00418504                 mov     edi, eax
.text:00418506                 cmp     eax, 0FFFFFFFFh
.text:00418509                 jz      loc_4185CC
.text:0041850F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00418516                 mov     ecx, ebx
.text:00418518                 nop
.text:00418519                 lea     esi, [esi+0]
.text:00418520
.text:00418520 loc_418520:                             ; CODE XREF: _win32_longpath+105↓j
.text:00418520                 mov     eax, [ebx]
.text:00418522                 add     ebx, 4
.text:00418525                 lea     edx, [eax-1010101h]
.text:0041852B                 not     eax
.text:0041852D                 and     edx, eax
.text:0041852F                 and     edx, 80808080h
.text:00418535                 jz      short loc_418520
.text:00418537                 test    edx, 8080h
.text:0041853D                 jnz     short loc_418545
.text:0041853F                 shr     edx, 10h
.text:00418542                 add     ebx, 2
.text:00418545
.text:00418545 loc_418545:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00418545                 add     dl, dl
.text:00418547                 sbb     ebx, 3
.text:0041854A                 sub     ebx, ecx
.text:0041854C                 lea     ecx, [esp+278h+Destination]
.text:00418550                 sub     ecx, ebp
.text:00418552                 add     ecx, 105h
.text:00418558                 cmp     ecx, ebx
.text:0041855A                 jle     short loc_4185B2
.text:0041855C                 mov     [esp+278h+C], ebp ; Destination
.text:0041855F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00418566                 add     ebp, ebx
.text:00418568                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0041856C                 call    strcpy
.text:00418571                 mov     [esp+278h+C], edi ; hFindFile
.text:00418574                 call    FindClose
.text:00418579                 sub     esp, 4
.text:0041857C
.text:0041857C loc_41857C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0041857C                 movzx   ecx, byte ptr [esi]
.text:0041857F                 test    cl, cl
.text:00418581                 mov     bl, cl
.text:00418583                 jnz     loc_4184A0
.text:00418589
.text:00418589 loc_418589:                             ; CODE XREF: _win32_longpath+62↑j
.text:00418589                                         ; _win32_longpath+8D↑j
.text:00418589                 mov     esi, [esp+278h+lpFileName]
.text:00418590                 lea     ebp, [esp+278h+Destination]
.text:00418594                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00418598                 mov     [esp+278h+C], esi ; Destination
.text:0041859B                 call    strcpy
.text:004185A0                 mov     eax, [esp+278h+lpFileName]
.text:004185A7
.text:004185A7 loc_4185A7:                             ; CODE XREF: _win32_longpath+19↑j
.text:004185A7                                         ; _win32_longpath+19A↓j
.text:004185A7                 add     esp, 26Ch
.text:004185AD                 pop     ebx
.text:004185AE                 pop     esi
.text:004185AF                 pop     edi
.text:004185B0                 pop     ebp
.text:004185B1                 retn
.text:004185B2 ; ---------------------------------------------------------------------------
.text:004185B2
.text:004185B2 loc_4185B2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:004185B2                 mov     [esp+278h+C], edi ; hFindFile
.text:004185B5                 call    FindClose
.text:004185BA                 sub     esp, 4
.text:004185BD                 call    _errno
.text:004185C2                 mov     dword ptr [eax], 22h ; '"'
.text:004185C8
.text:004185C8 loc_4185C8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:004185C8                 xor     eax, eax
.text:004185CA                 jmp     short loc_4185A7
.text:004185CC ; ---------------------------------------------------------------------------
.text:004185CC
.text:004185CC loc_4185CC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:004185CC                 call    _errno
.text:004185D1                 mov     dword ptr [eax], 16h
.text:004185D7                 jmp     short loc_4185C8
.text:004185D7 ; ---------------------------------------------------------------------------
.text:004185D9                 align 10h
.text:004185E0
.text:004185E0 loc_4185E0:                             ; CODE XREF: _win32_longpath+85↑j
.text:004185E0                 movzx   eax, byte ptr [esi+1]
.text:004185E4                 test    al, al
.text:004185E6                 jnz     short loc_418615
.text:004185E8
.text:004185E8 loc_4185E8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:004185E8                                         ; _win32_longpath+1EB↓j ...
.text:004185E8                 test    bl, bl
.text:004185EA                 jz      short loc_41860C
.text:004185EC                 cmp     bl, 2Fh ; '/'
.text:004185EF                 jz      short loc_41860C
.text:004185F1                 cmp     bl, 5Ch ; '\'
.text:004185F4                 jz      short loc_41860C
.text:004185F6
.text:004185F6 loc_4185F6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:004185F6                 mov     [ebp+268h+Destination], bl
.text:004185F9                 inc     esi
.text:004185FA                 inc     ebp
.text:004185FB                 movzx   ebx, byte ptr [esi]
.text:004185FE                 test    bl, bl
.text:00418600                 jz      short loc_41860C
.text:00418602                 cmp     bl, 2Fh ; '/'
.text:00418605                 jz      short loc_41860C
.text:00418607                 cmp     bl, 5Ch ; '\'
.text:0041860A                 jnz     short loc_4185F6
.text:0041860C
.text:0041860C loc_41860C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0041860C                                         ; _win32_longpath+1BF↑j ...
.text:0041860C                 mov     [ebp+268h+Destination], 0
.text:00418610                 jmp     loc_41857C
.text:00418615 ; ---------------------------------------------------------------------------
.text:00418615
.text:00418615 loc_418615:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00418615                 cmp     al, 2Fh ; '/'
.text:00418617                 jz      short loc_4185E8
.text:00418619                 cmp     al, 5Ch ; '\'
.text:0041861B                 jz      short loc_4185E8
.text:0041861D                 cmp     al, 2Eh ; '.'
.text:0041861F                 jnz     loc_4184BB
.text:00418625                 movzx   eax, byte ptr [esi+2]
.text:00418629                 test    al, al
.text:0041862B                 jz      short loc_4185E8
.text:0041862D                 cmp     al, 2Fh ; '/'
.text:0041862F                 jz      short loc_4185E8
.text:00418631                 cmp     al, 5Ch ; '\'
.text:00418633                 jnz     loc_4184BB
.text:00418639                 jmp     short loc_4185E8
.text:00418639 ; ---------------------------------------------------------------------------
.text:0041863B                 align 10h
.text:00418640
.text:00418640 loc_418640:                             ; CODE XREF: _win32_longpath+73↑j
.text:00418640                                         ; _win32_longpath+7C↑j
.text:00418640                 mov     [ebp+268h+Destination], bl
.text:00418643                 inc     esi
.text:00418644                 inc     ebp
.text:00418645                 mov     [ebp+268h+Destination], 0
.text:00418649                 movzx   ebx, byte ptr [esi]
.text:0041864C                 test    bl, bl
.text:0041864E                 jz      loc_4184B2
.text:00418654                 cmp     bl, 2Fh ; '/'
.text:00418657                 jz      short loc_418670
.text:00418659                 cmp     bl, 5Ch ; '\'
.text:0041865C                 jnz     loc_4184B2
.text:00418662                 lea     esi, [esi+0]
.text:00418669                 lea     edi, [edi+0]
.text:00418670
.text:00418670 loc_418670:                             ; CODE XREF: _win32_longpath+227↑j
.text:00418670                                         ; _win32_longpath+24F↓j ...
.text:00418670                 inc     esi
.text:00418671                 movzx   ebx, byte ptr [esi]
.text:00418674                 test    bl, bl
.text:00418676                 jz      loc_4184B2
.text:0041867C                 cmp     bl, 2Fh ; '/'
.text:0041867F                 jz      short loc_418670
.text:00418681                 cmp     bl, 5Ch ; '\'
.text:00418684                 jz      short loc_418670
.text:00418686                 jmp     loc_4184B2
.text:0041868B ; ---------------------------------------------------------------------------
.text:0041868B
.text:0041868B loc_41868B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0041868B                                         ; _win32_longpath+53↑j
.text:0041868B                 mov     edi, [esp+278h+lpFileName]
.text:00418692                 movzx   edx, byte ptr [edi+1]
.text:00418696                 cmp     dl, 2Fh ; '/'
.text:00418699                 jz      short loc_4186A4
.text:0041869B                 cmp     dl, 5Ch ; '\'
.text:0041869E                 jnz     loc_418489
.text:004186A4
.text:004186A4 loc_4186A4:                             ; CODE XREF: _win32_longpath+269↑j
.text:004186A4                 mov     esi, [esp+278h+lpFileName]
.text:004186AB                 mov     [ebp+268h+Destination], al
.text:004186AE                 mov     ecx, [esp+278h+lpFileName]
.text:004186B5                 inc     ebp
.text:004186B6                 add     esi, 2
.text:004186B9                 movzx   ebx, byte ptr [ecx+1]
.text:004186BD                 mov     [ebp+268h+Destination], bl
.text:004186C0                 inc     ebp
.text:004186C1                 movzx   eax, byte ptr [ecx+2]
.text:004186C5                 test    al, al
.text:004186C7                 jz      loc_4187A3
.text:004186CD                 cmp     al, 2Fh ; '/'
.text:004186CF                 jz      loc_418788
.text:004186D5                 cmp     al, 5Ch ; '\'
.text:004186D7                 mov     bl, al
.text:004186D9                 jz      loc_418788
.text:004186DF
.text:004186DF loc_4186DF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:004186DF                                         ; _win32_longpath+376↓j
.text:004186DF                 test    bl, bl
.text:004186E1                 jz      loc_418489
.text:004186E7                 cmp     bl, 2Fh ; '/'
.text:004186EA                 jz      short loc_41870B
.text:004186EC                 cmp     bl, 5Ch ; '\'
.text:004186EF                 jz      short loc_41870B
.text:004186F1
.text:004186F1 loc_4186F1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:004186F1                 mov     [ebp+268h+Destination], bl
.text:004186F4                 inc     esi
.text:004186F5                 inc     ebp
.text:004186F6                 movzx   ebx, byte ptr [esi]
.text:004186F9                 test    bl, bl
.text:004186FB                 jz      loc_418489
.text:00418701                 cmp     bl, 2Fh ; '/'
.text:00418704                 jz      short loc_41870B
.text:00418706                 cmp     bl, 5Ch ; '\'
.text:00418709                 jnz     short loc_4186F1
.text:0041870B
.text:0041870B loc_41870B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0041870B                                         ; _win32_longpath+2BF↑j ...
.text:0041870B                 test    bl, bl
.text:0041870D                 jz      loc_418489
.text:00418713                 mov     [ebp+268h+Destination], bl
.text:00418716                 inc     esi
.text:00418717                 inc     ebp
.text:00418718                 movzx   ebx, byte ptr [esi]
.text:0041871B                 test    bl, bl
.text:0041871D                 jz      loc_418489
.text:00418723                 cmp     bl, 2Fh ; '/'
.text:00418726                 jz      short loc_418770
.text:00418728                 cmp     bl, 5Ch ; '\'
.text:0041872B                 jz      short loc_418770
.text:0041872D
.text:0041872D loc_41872D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0041872D                 test    bl, bl
.text:0041872F                 jz      loc_418489
.text:00418735                 cmp     bl, 2Fh ; '/'
.text:00418738                 jz      loc_418489
.text:0041873E                 cmp     bl, 5Ch ; '\'
.text:00418741                 jz      loc_418489
.text:00418747
.text:00418747 loc_418747:                             ; CODE XREF: _win32_longpath+333↓j
.text:00418747                 mov     [ebp+268h+Destination], bl
.text:0041874A                 inc     esi
.text:0041874B                 inc     ebp
.text:0041874C                 movzx   ebx, byte ptr [esi]
.text:0041874F                 test    bl, bl
.text:00418751                 jz      loc_418489
.text:00418757                 cmp     bl, 2Fh ; '/'
.text:0041875A                 jz      loc_418489
.text:00418760                 cmp     bl, 5Ch ; '\'
.text:00418763                 jnz     short loc_418747
.text:00418765                 jmp     loc_418489
.text:00418765 ; ---------------------------------------------------------------------------
.text:0041876A                 align 10h
.text:00418770
.text:00418770 loc_418770:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00418770                                         ; _win32_longpath+2FB↑j ...
.text:00418770                 inc     esi
.text:00418771                 movzx   ebx, byte ptr [esi]
.text:00418774                 test    bl, bl
.text:00418776                 jz      loc_418489
.text:0041877C                 cmp     bl, 2Fh ; '/'
.text:0041877F                 jz      short loc_418770
.text:00418781                 cmp     bl, 5Ch ; '\'
.text:00418784                 jz      short loc_418770
.text:00418786                 jmp     short loc_41872D
.text:00418788 ; ---------------------------------------------------------------------------
.text:00418788
.text:00418788 loc_418788:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00418788                                         ; _win32_longpath+2A9↑j ...
.text:00418788                 inc     esi
.text:00418789                 movzx   ebx, byte ptr [esi]
.text:0041878C                 test    bl, bl
.text:0041878E                 jz      loc_418489
.text:00418794                 cmp     bl, 2Fh ; '/'
.text:00418797                 jz      short loc_418788
.text:00418799                 cmp     bl, 5Ch ; '\'
.text:0041879C                 jz      short loc_418788
.text:0041879E                 jmp     loc_4186DF
.text:004187A3 ; ---------------------------------------------------------------------------
.text:004187A3
.text:004187A3 loc_4187A3:                             ; CODE XREF: _win32_longpath+297↑j
.text:004187A3                 movzx   ebx, byte ptr [esi]
.text:004187A6                 jmp     loc_4186DF
.text:004187AB ; ---------------------------------------------------------------------------
.text:004187AB
.text:004187AB loc_4187AB:                             ; CODE XREF: _win32_longpath+39↑j
.text:004187AB                 movzx   ecx, byte ptr [eax]
.text:004187AE                 mov     esi, eax
.text:004187B0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:004187B5                 add     esi, 2
.text:004187B8                 lea     ebp, [esp+12h]
.text:004187BC                 mov     [esp+278h+Destination], cl
.text:004187C0                 jmp     loc_418489
.text:004187C0 _win32_longpath endp
.text:004187C0
.text:004187C0 ; ---------------------------------------------------------------------------
.text:004187C5                 align 10h
.text:004187D0                 sub     esp, 0Ch
.text:004187D3                 mov     edx, [esp+10h]
.text:004187D7                 mov     dword ptr [esp+4], 0
.text:004187DF                 mov     [esp], edx
.text:004187E2                 call    sub_41A940
.text:004187E7                 inc     eax
.text:004187E8                 setnz   dl
.text:004187EB                 add     esp, 0Ch
.text:004187EE                 movzx   eax, dl
.text:004187F1                 retn
.text:004187F1 ; ---------------------------------------------------------------------------
.text:004187F2                 align 10h
.text:00418800
.text:00418800 ; =============== S U B R O U T I N E =======================================
.text:00418800
.text:00418800
.text:00418800 sub_418800      proc near               ; CODE XREF: sub_419010+B4↓p
.text:00418800                                         ; sub_419FB0+CE↓p ...
.text:00418800
.text:00418800 arg_0           = dword ptr  4
.text:00418800
.text:00418800                 mov     ecx, [esp+arg_0]
.text:00418804                 mov     edx, ecx
.text:00418806                 movzx   eax, byte ptr [ecx]
.text:00418809                 test    al, al
.text:0041880B                 jz      short loc_41881C
.text:0041880D                 lea     esi, [esi+0]
.text:00418810
.text:00418810 loc_418810:                             ; CODE XREF: sub_418800+1A↓j
.text:00418810                 cmp     al, 5Ch ; '\'
.text:00418812                 jz      short loc_418820
.text:00418814
.text:00418814 loc_418814:                             ; CODE XREF: sub_418800+23↓j
.text:00418814                 inc     edx
.text:00418815                 movzx   eax, byte ptr [edx]
.text:00418818                 test    al, al
.text:0041881A                 jnz     short loc_418810
.text:0041881C
.text:0041881C loc_41881C:                             ; CODE XREF: sub_418800+B↑j
.text:0041881C                 mov     eax, ecx
.text:0041881E                 retn
.text:0041881E ; ---------------------------------------------------------------------------
.text:0041881F                 align 10h
.text:00418820
.text:00418820 loc_418820:                             ; CODE XREF: sub_418800+12↑j
.text:00418820                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418823                 jmp     short loc_418814
.text:00418823 sub_418800      endp
.text:00418823
.text:00418823 ; ---------------------------------------------------------------------------
.text:00418825                 align 10h
.text:00418830                 push    ebx
.text:00418831                 sub     esp, 8
.text:00418834                 mov     ebx, [esp+14h]
.text:00418838                 mov     edx, [esp+10h]
.text:0041883C                 mov     [esp], ebx
.text:0041883F                 mov     [esp+4], edx
.text:00418843                 call    strcpy
.text:00418848                 movzx   eax, byte ptr [ebx]
.text:0041884B                 mov     edx, ebx
.text:0041884D                 test    al, al
.text:0041884F                 jz      short loc_41886C
.text:00418851                 jmp     short loc_418860
.text:00418851 ; ---------------------------------------------------------------------------
.text:00418853                 align 10h
.text:00418860
.text:00418860 loc_418860:                             ; CODE XREF: .text:00418851↑j
.text:00418860                                         ; .text:0041886A↓j
.text:00418860                 cmp     al, 5Ch ; '\'
.text:00418862                 jz      short loc_418873
.text:00418864
.text:00418864 loc_418864:                             ; CODE XREF: .text:00418876↓j
.text:00418864                 inc     edx
.text:00418865                 movzx   eax, byte ptr [edx]
.text:00418868                 test    al, al
.text:0041886A                 jnz     short loc_418860
.text:0041886C
.text:0041886C loc_41886C:                             ; CODE XREF: .text:0041884F↑j
.text:0041886C                 add     esp, 8
.text:0041886F                 xor     eax, eax
.text:00418871                 pop     ebx
.text:00418872                 retn
.text:00418873 ; ---------------------------------------------------------------------------
.text:00418873
.text:00418873 loc_418873:                             ; CODE XREF: .text:00418862↑j
.text:00418873                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418876                 jmp     short loc_418864
.text:00418876 ; ---------------------------------------------------------------------------
.text:00418878                 align 10h
.text:00418880
.text:00418880 ; =============== S U B R O U T I N E =======================================
.text:00418880
.text:00418880
.text:00418880 sub_418880      proc near               ; CODE XREF: sub_416C20+16↑p
.text:00418880                                         ; sub_417120+1F↑p ...
.text:00418880
.text:00418880 arg_0           = dword ptr  4
.text:00418880
.text:00418880                 mov     ecx, [esp+arg_0]
.text:00418884                 mov     edx, ecx
.text:00418886                 movzx   eax, byte ptr [ecx]
.text:00418889                 test    al, al
.text:0041888B                 jz      short loc_41889C
.text:0041888D                 lea     esi, [esi+0]
.text:00418890
.text:00418890 loc_418890:                             ; CODE XREF: sub_418880+1A↓j
.text:00418890                 cmp     al, 2Fh ; '/'
.text:00418892                 jz      short loc_4188A0
.text:00418894
.text:00418894 loc_418894:                             ; CODE XREF: sub_418880+23↓j
.text:00418894                 inc     edx
.text:00418895                 movzx   eax, byte ptr [edx]
.text:00418898                 test    al, al
.text:0041889A                 jnz     short loc_418890
.text:0041889C
.text:0041889C loc_41889C:                             ; CODE XREF: sub_418880+B↑j
.text:0041889C                 mov     eax, ecx
.text:0041889E                 retn
.text:0041889E ; ---------------------------------------------------------------------------
.text:0041889F                 align 10h
.text:004188A0
.text:004188A0 loc_4188A0:                             ; CODE XREF: sub_418880+12↑j
.text:004188A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:004188A3                 jmp     short loc_418894
.text:004188A3 sub_418880      endp
.text:004188A3
.text:004188A3 ; ---------------------------------------------------------------------------
.text:004188A5                 align 10h
.text:004188B0                 push    ebx
.text:004188B1                 sub     esp, 8
.text:004188B4                 mov     ebx, [esp+14h]
.text:004188B8                 mov     edx, [esp+10h]
.text:004188BC                 mov     [esp], ebx
.text:004188BF                 mov     [esp+4], edx
.text:004188C3                 call    strcpy
.text:004188C8                 movzx   eax, byte ptr [ebx]
.text:004188CB                 mov     edx, ebx
.text:004188CD                 test    al, al
.text:004188CF                 jz      short loc_4188EC
.text:004188D1                 jmp     short loc_4188E0
.text:004188D1 ; ---------------------------------------------------------------------------
.text:004188D3                 align 10h
.text:004188E0
.text:004188E0 loc_4188E0:                             ; CODE XREF: .text:004188D1↑j
.text:004188E0                                         ; .text:004188EA↓j
.text:004188E0                 cmp     al, 2Fh ; '/'
.text:004188E2                 jz      short loc_4188F3
.text:004188E4
.text:004188E4 loc_4188E4:                             ; CODE XREF: .text:004188F6↓j
.text:004188E4                 inc     edx
.text:004188E5                 movzx   eax, byte ptr [edx]
.text:004188E8                 test    al, al
.text:004188EA                 jnz     short loc_4188E0
.text:004188EC
.text:004188EC loc_4188EC:                             ; CODE XREF: .text:004188CF↑j
.text:004188EC                 add     esp, 8
.text:004188EF                 xor     eax, eax
.text:004188F1                 pop     ebx
.text:004188F2                 retn
.text:004188F3 ; ---------------------------------------------------------------------------
.text:004188F3
.text:004188F3 loc_4188F3:                             ; CODE XREF: .text:004188E2↑j
.text:004188F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004188F6                 jmp     short loc_4188E4
.text:004188F6 ; ---------------------------------------------------------------------------
.text:004188F8                 align 10h
.text:00418900                 push    ebx
.text:00418901                 sub     esp, 8
.text:00418904                 mov     ebx, [esp+14h]
.text:00418908                 mov     edx, [esp+10h]
.text:0041890C                 mov     [esp+4], ebx
.text:00418910                 mov     [esp], edx
.text:00418913                 call    sub_41ACC0
.text:00418918                 movzx   eax, byte ptr [ebx]
.text:0041891B                 mov     edx, ebx
.text:0041891D                 test    al, al
.text:0041891F                 jz      short loc_41893C
.text:00418921                 jmp     short loc_418930
.text:00418921 ; ---------------------------------------------------------------------------
.text:00418923                 align 10h
.text:00418930
.text:00418930 loc_418930:                             ; CODE XREF: .text:00418921↑j
.text:00418930                                         ; .text:0041893A↓j
.text:00418930                 cmp     al, 2Fh ; '/'
.text:00418932                 jz      short loc_418943
.text:00418934
.text:00418934 loc_418934:                             ; CODE XREF: .text:00418946↓j
.text:00418934                 inc     edx
.text:00418935                 movzx   eax, byte ptr [edx]
.text:00418938                 test    al, al
.text:0041893A                 jnz     short loc_418930
.text:0041893C
.text:0041893C loc_41893C:                             ; CODE XREF: .text:0041891F↑j
.text:0041893C                 add     esp, 8
.text:0041893F                 xor     eax, eax
.text:00418941                 pop     ebx
.text:00418942                 retn
.text:00418943 ; ---------------------------------------------------------------------------
.text:00418943
.text:00418943 loc_418943:                             ; CODE XREF: .text:00418932↑j
.text:00418943                 mov     byte ptr [edx], 5Ch ; '\'
.text:00418946                 jmp     short loc_418934
.text:00418946 ; ---------------------------------------------------------------------------
.text:00418948                 align 10h
.text:00418950                 push    ebx
.text:00418951                 sub     esp, 8
.text:00418954                 mov     ebx, [esp+14h]
.text:00418958                 mov     edx, [esp+10h]
.text:0041895C                 mov     [esp], ebx
.text:0041895F                 mov     [esp+4], edx
.text:00418963                 call    sub_41ACC0
.text:00418968                 movzx   eax, byte ptr [ebx]
.text:0041896B                 mov     edx, ebx
.text:0041896D                 test    al, al
.text:0041896F                 jz      short loc_41898C
.text:00418971                 jmp     short loc_418980
.text:00418971 ; ---------------------------------------------------------------------------
.text:00418973                 align 10h
.text:00418980
.text:00418980 loc_418980:                             ; CODE XREF: .text:00418971↑j
.text:00418980                                         ; .text:0041898A↓j
.text:00418980                 cmp     al, 5Ch ; '\'
.text:00418982                 jz      short loc_418991
.text:00418984
.text:00418984 loc_418984:                             ; CODE XREF: .text:00418994↓j
.text:00418984                 inc     edx
.text:00418985                 movzx   eax, byte ptr [edx]
.text:00418988                 test    al, al
.text:0041898A                 jnz     short loc_418980
.text:0041898C
.text:0041898C loc_41898C:                             ; CODE XREF: .text:0041896F↑j
.text:0041898C                 add     esp, 8
.text:0041898F                 pop     ebx
.text:00418990                 retn
.text:00418991 ; ---------------------------------------------------------------------------
.text:00418991
.text:00418991 loc_418991:                             ; CODE XREF: .text:00418982↑j
.text:00418991                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418994                 jmp     short loc_418984
.text:00418994 ; ---------------------------------------------------------------------------
.text:00418996                 align 10h
.text:004189A0
.text:004189A0 ; =============== S U B R O U T I N E =======================================
.text:004189A0
.text:004189A0
.text:004189A0 ; int __cdecl sub_4189A0(LPSTR)
.text:004189A0 sub_4189A0      proc near               ; CODE XREF: .text:00418A2E↓p
.text:004189A0                                         ; .text:00418A6E↓p ...
.text:004189A0
.text:004189A0 hModule         = dword ptr -1Ch
.text:004189A0 lpFilename      = dword ptr -18h
.text:004189A0 nSize           = dword ptr -14h
.text:004189A0 arg_0           = dword ptr  4
.text:004189A0
.text:004189A0                 push    esi
.text:004189A1                 push    ebx
.text:004189A2                 sub     esp, 14h
.text:004189A5                 mov     esi, [esp+1Ch+arg_0]
.text:004189A9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004189B1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004189B8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004189BC                 call    GetModuleFileNameA
.text:004189C1                 sub     esp, 0Ch
.text:004189C4                 test    eax, eax
.text:004189C6                 jz      short loc_418A08
.text:004189C8                 cmp     eax, 104h
.text:004189CD                 jg      short loc_4189F9
.text:004189CF
.text:004189CF loc_4189CF:                             ; CODE XREF: sub_4189A0+66↓j
.text:004189CF                                         ; sub_4189A0+78↓j
.text:004189CF                 movzx   eax, byte ptr [esi]
.text:004189D2                 mov     edx, esi
.text:004189D4                 test    al, al
.text:004189D6                 jz      short loc_4189EC
.text:004189D8                 nop
.text:004189D9                 lea     esi, [esi+0]
.text:004189E0
.text:004189E0 loc_4189E0:                             ; CODE XREF: sub_4189A0+4A↓j
.text:004189E0                 cmp     al, 5Ch ; '\'
.text:004189E2                 jz      short loc_4189F4
.text:004189E4
.text:004189E4 loc_4189E4:                             ; CODE XREF: sub_4189A0+57↓j
.text:004189E4                 inc     edx
.text:004189E5                 movzx   eax, byte ptr [edx]
.text:004189E8                 test    al, al
.text:004189EA                 jnz     short loc_4189E0
.text:004189EC
.text:004189EC loc_4189EC:                             ; CODE XREF: sub_4189A0+36↑j
.text:004189EC                 add     esp, 14h
.text:004189EF                 mov     eax, esi
.text:004189F1                 pop     ebx
.text:004189F2                 pop     esi
.text:004189F3                 retn
.text:004189F4 ; ---------------------------------------------------------------------------
.text:004189F4
.text:004189F4 loc_4189F4:                             ; CODE XREF: sub_4189A0+42↑j
.text:004189F4                 mov     byte ptr [edx], 2Fh ; '/'
.text:004189F7                 jmp     short loc_4189E4
.text:004189F9 ; ---------------------------------------------------------------------------
.text:004189F9
.text:004189F9 loc_4189F9:                             ; CODE XREF: sub_4189A0+2D↑j
.text:004189F9                 call    _errno
.text:004189FE                 mov     dword ptr [eax], 26h ; '&'
.text:00418A04                 xor     esi, esi
.text:00418A06                 jmp     short loc_4189CF
.text:00418A08 ; ---------------------------------------------------------------------------
.text:00418A08
.text:00418A08 loc_418A08:                             ; CODE XREF: sub_4189A0+26↑j
.text:00418A08                 call    sub_41ACA0
.text:00418A0D                 mov     ebx, eax
.text:00418A0F                 xor     esi, esi
.text:00418A11                 call    _errno
.text:00418A16                 mov     [eax], ebx
.text:00418A18                 jmp     short loc_4189CF
.text:00418A18 sub_4189A0      endp
.text:00418A18
.text:00418A18 ; ---------------------------------------------------------------------------
.text:00418A1A                 align 10h
.text:00418A20                 sub     esp, 0Ch
.text:00418A23                 mov     [esp+8], ebx
.text:00418A27                 mov     ebx, [esp+10h]
.text:00418A2B                 mov     [esp], ebx
.text:00418A2E                 call    sub_4189A0
.text:00418A33                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00418A3B                 mov     [esp], ebx
.text:00418A3E                 call    strrchr
.text:00418A43                 test    eax, eax
.text:00418A45                 jz      short loc_418A4A
.text:00418A47                 lea     ebx, [eax+1]
.text:00418A4A
.text:00418A4A loc_418A4A:                             ; CODE XREF: .text:00418A45↑j
.text:00418A4A                 mov     eax, ebx
.text:00418A4C                 mov     ebx, [esp+8]
.text:00418A50                 add     esp, 0Ch
.text:00418A53                 retn
.text:00418A53 ; ---------------------------------------------------------------------------
.text:00418A54                 align 10h
.text:00418A60                 sub     esp, 0Ch
.text:00418A63                 mov     [esp+8], ebx
.text:00418A67                 mov     ebx, [esp+10h]
.text:00418A6B                 mov     [esp], ebx
.text:00418A6E                 call    sub_4189A0
.text:00418A73                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00418A7B                 mov     [esp], ebx
.text:00418A7E                 call    strrchr
.text:00418A83                 test    eax, eax
.text:00418A85                 jz      short loc_418A8A
.text:00418A87                 mov     byte ptr [eax], 0
.text:00418A8A
.text:00418A8A loc_418A8A:                             ; CODE XREF: .text:00418A85↑j
.text:00418A8A                 mov     eax, ebx
.text:00418A8C                 mov     ebx, [esp+8]
.text:00418A90                 add     esp, 0Ch
.text:00418A93                 retn
.text:00418A93 ; ---------------------------------------------------------------------------
.text:00418A94                 align 10h
.text:00418AA0                 sub     esp, 0Ch
.text:00418AA3                 mov     [esp+8], ebx
.text:00418AA7                 mov     ebx, [esp+10h]
.text:00418AAB                 mov     [esp], ebx
.text:00418AAE                 call    sub_4189A0
.text:00418AB3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00418ABB                 mov     [esp], ebx
.text:00418ABE                 call    strrchr
.text:00418AC3                 test    eax, eax
.text:00418AC5                 jz      short loc_418ACA
.text:00418AC7                 mov     byte ptr [eax], 0
.text:00418ACA
.text:00418ACA loc_418ACA:                             ; CODE XREF: .text:00418AC5↑j
.text:00418ACA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00418AD2                 mov     [esp], ebx
.text:00418AD5                 call    strrchr
.text:00418ADA                 test    eax, eax
.text:00418ADC                 jz      short loc_418AE1
.text:00418ADE                 mov     byte ptr [eax], 0
.text:00418AE1
.text:00418AE1 loc_418AE1:                             ; CODE XREF: .text:00418ADC↑j
.text:00418AE1                 mov     eax, ebx
.text:00418AE3                 mov     ebx, [esp+8]
.text:00418AE7                 add     esp, 0Ch
.text:00418AEA                 retn
.text:00418AEA ; ---------------------------------------------------------------------------
.text:00418AEB                 align 10h
.text:00418AF0                 sub     esp, 1Ch
.text:00418AF3                 mov     edx, [esp+20h]
.text:00418AF7                 mov     [esp+10h], ebx
.text:00418AFB                 xor     ebx, ebx
.text:00418AFD                 mov     [esp+14h], esi
.text:00418B01                 mov     [esp+18h], edi
.text:00418B05                 mov     [esp], edx
.text:00418B08                 call    sub_41ACF0
.text:00418B0D                 mov     edx, [esp+24h]
.text:00418B11                 mov     edi, eax
.text:00418B13                 mov     [esp], edx
.text:00418B16                 call    sub_41ACF0
.text:00418B1B                 mov     [esp+4], eax
.text:00418B1F                 mov     esi, eax
.text:00418B21                 mov     [esp], edi
.text:00418B24                 call    _stricmp_0
.text:00418B29                 mov     [esp], edi
.text:00418B2C                 test    eax, eax
.text:00418B2E                 setz    bl
.text:00418B31                 call    free
.text:00418B36                 mov     [esp], esi
.text:00418B39                 call    free
.text:00418B3E                 mov     eax, ebx
.text:00418B40                 mov     esi, [esp+14h]
.text:00418B44                 mov     ebx, [esp+10h]
.text:00418B48                 mov     edi, [esp+18h]
.text:00418B4C                 add     esp, 1Ch
.text:00418B4F                 retn
.text:00418B50 ; ---------------------------------------------------------------------------
.text:00418B50                 xor     eax, eax
.text:00418B52                 retn
.text:00418B52 ; ---------------------------------------------------------------------------
.text:00418B53 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00418B87↓o
.text:00418B60 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00418B96↓o
.text:00418B70 ; ---------------------------------------------------------------------------
.text:00418B70                 sub     esp, 1Ch
.text:00418B73                 mov     [esp+10h], ebx
.text:00418B77                 mov     ebx, [esp+20h]
.text:00418B7B                 mov     [esp+18h], edi
.text:00418B7F                 mov     edi, [esp+24h]
.text:00418B83                 mov     [esp+14h], esi
.text:00418B87                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00418B8E                 call    GetModuleHandleA
.text:00418B93                 sub     esp, 4
.text:00418B96                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00418B9E                 mov     [esp], eax
.text:00418BA1                 call    GetProcAddress
.text:00418BA6                 sub     esp, 8
.text:00418BA9                 test    eax, eax
.text:00418BAB                 jz      short loc_418BC3
.text:00418BAD                 mov     dword ptr [esp+8], 104h
.text:00418BB5                 mov     [esp+4], ebx
.text:00418BB9                 mov     [esp], edi
.text:00418BBC                 call    eax
.text:00418BBE                 sub     esp, 0Ch
.text:00418BC1                 mov     esi, eax
.text:00418BC3
.text:00418BC3 loc_418BC3:                             ; CODE XREF: .text:00418BAB↑j
.text:00418BC3                 test    esi, esi
.text:00418BC5                 jz      short loc_418BE0
.text:00418BC7
.text:00418BC7 loc_418BC7:                             ; CODE XREF: .text:00418BFB↓j
.text:00418BC7                 mov     eax, ebx
.text:00418BC9                 mov     esi, [esp+14h]
.text:00418BCD                 mov     ebx, [esp+10h]
.text:00418BD1                 mov     edi, [esp+18h]
.text:00418BD5                 add     esp, 1Ch
.text:00418BD8                 retn
.text:00418BD8 ; ---------------------------------------------------------------------------
.text:00418BD9                 align 10h
.text:00418BE0
.text:00418BE0 loc_418BE0:                             ; CODE XREF: .text:00418BC5↑j
.text:00418BE0                 call    sub_41B6B0
.text:00418BE5                 mov     [esp], ebx
.text:00418BE8                 mov     [esp+4], edi
.text:00418BEC                 call    strcpy
.text:00418BF1                 mov     [esp], ebx
.text:00418BF4                 call    _win32_longpath
.text:00418BF9                 mov     ebx, eax
.text:00418BFB                 jmp     short loc_418BC7
.text:00418BFB ; ---------------------------------------------------------------------------
.text:00418BFD                 align 10h
.text:00418C00                 sub     esp, 1Ch
.text:00418C03                 mov     [esp+18h], edi
.text:00418C07                 mov     edi, [esp+20h]
.text:00418C0B                 mov     [esp+10h], ebx
.text:00418C0F                 mov     [esp+14h], esi
.text:00418C13                 mov     dword ptr [esp+8], 0
.text:00418C1B                 mov     dword ptr [esp+4], 0
.text:00418C23                 mov     [esp], edi
.text:00418C26                 call    GetShortPathNameA
.text:00418C2B                 sub     esp, 0Ch
.text:00418C2E                 mov     ebx, eax
.text:00418C30                 test    eax, eax
.text:00418C32                 jz      short loc_418C80
.text:00418C34                 lea     edx, [eax+1]
.text:00418C37                 mov     [esp], edx
.text:00418C3A                 call    malloc
.text:00418C3F                 test    eax, eax
.text:00418C41                 mov     esi, eax
.text:00418C43                 jz      short loc_418C80
.text:00418C45                 mov     [esp+8], ebx
.text:00418C49                 mov     [esp+4], eax
.text:00418C4D                 mov     [esp], edi
.text:00418C50                 call    GetShortPathNameA
.text:00418C55                 sub     esp, 0Ch
.text:00418C58                 mov     edx, esi
.text:00418C5A                 test    eax, eax
.text:00418C5C                 jz      short loc_418C72
.text:00418C5E                 mov     esi, esi
.text:00418C60
.text:00418C60 loc_418C60:                             ; CODE XREF: .text:00418C90↓j
.text:00418C60                 mov     ebx, [esp+10h]
.text:00418C64                 mov     eax, edx
.text:00418C66                 mov     esi, [esp+14h]
.text:00418C6A                 mov     edi, [esp+18h]
.text:00418C6E                 add     esp, 1Ch
.text:00418C71                 retn
.text:00418C72 ; ---------------------------------------------------------------------------
.text:00418C72
.text:00418C72 loc_418C72:                             ; CODE XREF: .text:00418C5C↑j
.text:00418C72                 mov     [esp], esi
.text:00418C75                 call    free
.text:00418C7A                 lea     esi, [esi+0]
.text:00418C80
.text:00418C80 loc_418C80:                             ; CODE XREF: .text:00418C32↑j
.text:00418C80                                         ; .text:00418C43↑j
.text:00418C80                 call    sub_41ACA0
.text:00418C85                 mov     esi, eax
.text:00418C87                 call    _errno
.text:00418C8C                 mov     [eax], esi
.text:00418C8E                 mov     edx, edi
.text:00418C90                 jmp     short loc_418C60
.text:00418C90 ; ---------------------------------------------------------------------------
.text:00418C92                 align 10h
.text:00418CA0
.text:00418CA0 ; =============== S U B R O U T I N E =======================================
.text:00418CA0
.text:00418CA0
.text:00418CA0 sub_418CA0      proc near               ; DATA XREF: sub_418CB0+186↓o
.text:00418CA0                 sub     al, [eax]
.text:00418CA2                 lea     esi, [esi+0]
.text:00418CA9                 lea     edi, [edi+0]
.text:00418CA9 sub_418CA0      endp
.text:00418CA9
.text:00418CB0
.text:00418CB0 ; =============== S U B R O U T I N E =======================================
.text:00418CB0
.text:00418CB0
.text:00418CB0 sub_418CB0      proc near               ; CODE XREF: sub_407C60+183↑p
.text:00418CB0                                         ; sub_4080E0+53↑p ...
.text:00418CB0
.text:00418CB0 hFindFile       = dword ptr -2DCh
.text:00418CB0 lpFindFileData  = dword ptr -2D8h
.text:00418CB0 Count           = dword ptr -2D4h
.text:00418CB0 Destination     = byte ptr -2CCh
.text:00418CB0 var_1BC         = dword ptr -1BCh
.text:00418CB0 var_1B4         = dword ptr -1B4h
.text:00418CB0 var_1B0         = dword ptr -1B0h
.text:00418CB0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00418CB0 arg_0           = dword ptr  4
.text:00418CB0
.text:00418CB0                 push    ebp
.text:00418CB1                 push    edi
.text:00418CB2                 push    esi
.text:00418CB3                 push    ebx
.text:00418CB4                 sub     esp, 2CCh
.text:00418CBA                 mov     ebp, [esp+2DCh+arg_0]
.text:00418CC1                 test    ebp, ebp
.text:00418CC3                 mov     ebx, [ebp+4]
.text:00418CC6                 jz      loc_418E7D
.text:00418CCC                 mov     edx, [ebp+0]
.text:00418CCF                 cmp     edx, 0FFFFFFFFh
.text:00418CD2                 jz      loc_418E07
.text:00418CD8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:00418CDB                 lea     ecx, [esp+2DCh+FindFileData]
.text:00418CE2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:00418CE6                 call    FindNextFileA
.text:00418CEB                 sub     esp, 8
.text:00418CEE                 test    eax, eax
.text:00418CF0                 jz      loc_418DFB
.text:00418CF6
.text:00418CF6 loc_418CF6:                             ; CODE XREF: sub_418CB0+1BC↓j
.text:00418CF6                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418CFE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:00418D05                 mov     esi, [ebx]
.text:00418D07                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:00418D0B                 lea     esi, [ebx+14h]
.text:00418D0E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418D11                 call    strncpy
.text:00418D16                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418D1E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00418D22                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418D25                 call    strncat
.text:00418D2A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:00418D2E                 lea     edx, [esp+2DCh+var_1BC]
.text:00418D35                 mov     [esp+2DCh+Count], edx ; int
.text:00418D39                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00418D40                 call    sub_418280
.text:00418D45                 test    eax, eax
.text:00418D47                 jnz     loc_418DE9
.text:00418D4D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00418D54                 and     ecx, 0F000h
.text:00418D5A                 shr     ecx, 0Ch
.text:00418D5D                 mov     [ebx+12h], cl
.text:00418D60                 mov     ecx, edi
.text:00418D62                 lea     esi, [esi+0]
.text:00418D69                 lea     edi, [edi+0]
.text:00418D70
.text:00418D70 loc_418D70:                             ; CODE XREF: sub_418CB0+D5↓j
.text:00418D70                 mov     eax, [ecx]
.text:00418D72                 add     ecx, 4
.text:00418D75                 lea     edx, [eax-1010101h]
.text:00418D7B                 not     eax
.text:00418D7D                 and     edx, eax
.text:00418D7F                 and     edx, 80808080h
.text:00418D85                 jz      short loc_418D70
.text:00418D87                 test    edx, 8080h
.text:00418D8D                 jnz     short loc_418D95
.text:00418D8F                 shr     edx, 10h
.text:00418D92                 add     ecx, 2
.text:00418D95
.text:00418D95 loc_418D95:                             ; CODE XREF: sub_418CB0+DD↑j
.text:00418D95                 mov     word ptr [ebx+10h], 110h
.text:00418D9B                 add     dl, dl
.text:00418D9D                 sbb     ecx, 3
.text:00418DA0                 sub     ecx, edi
.text:00418DA2                 mov     [ebx+13h], cl
.text:00418DA5                 mov     edx, [esp+2DCh+var_1B4]
.text:00418DAC                 mov     ecx, [esp+2DCh+var_1B0]
.text:00418DB3                 mov     [ebx+8], edx
.text:00418DB6                 mov     [ebx+0Ch], ecx
.text:00418DB9                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418DC1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00418DC5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418DC8                 call    strncpy
.text:00418DCD                 inc     dword ptr [ebp+14h]
.text:00418DD0                 call    _errno
.text:00418DD5                 mov     dword ptr [eax], 0
.text:00418DDB                 lea     eax, [ebx+8]
.text:00418DDE
.text:00418DDE loc_418DDE:                             ; CODE XREF: sub_418CB0+149↓j
.text:00418DDE                 add     esp, 2CCh
.text:00418DE4                 pop     ebx
.text:00418DE5                 pop     esi
.text:00418DE6                 pop     edi
.text:00418DE7                 pop     ebp
.text:00418DE8                 retn
.text:00418DE9 ; ---------------------------------------------------------------------------
.text:00418DE9
.text:00418DE9 loc_418DE9:                             ; CODE XREF: sub_418CB0+97↑j
.text:00418DE9                                         ; sub_418CB0+153↓j ...
.text:00418DE9                 call    sub_41ACA0
.text:00418DEE                 mov     ebp, eax
.text:00418DF0                 call    _errno
.text:00418DF5                 mov     [eax], ebp
.text:00418DF7
.text:00418DF7 loc_418DF7:                             ; CODE XREF: sub_418CB0+155↓j
.text:00418DF7                                         ; sub_418CB0+1D8↓j
.text:00418DF7                 xor     eax, eax
.text:00418DF9                 jmp     short loc_418DDE
.text:00418DFB ; ---------------------------------------------------------------------------
.text:00418DFB
.text:00418DFB loc_418DFB:                             ; CODE XREF: sub_418CB0+40↑j
.text:00418DFB                 call    GetLastError
.text:00418E00                 cmp     eax, 12h
.text:00418E03                 jnz     short loc_418DE9
.text:00418E05                 jmp     short loc_418DF7
.text:00418E07 ; ---------------------------------------------------------------------------
.text:00418E07
.text:00418E07 loc_418E07:                             ; CODE XREF: sub_418CB0+22↑j
.text:00418E07                 mov     edx, [ebx]
.text:00418E09                 lea     esi, [esp+2DCh+Destination]
.text:00418E0D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418E10                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:00418E14                 call    strcpy
.text:00418E19                 mov     ecx, esi
.text:00418E1B                 nop
.text:00418E1C                 lea     esi, [esi+0]
.text:00418E20
.text:00418E20 loc_418E20:                             ; CODE XREF: sub_418CB0+184↓j
.text:00418E20                 mov     edi, [ecx]
.text:00418E22                 add     ecx, 4
.text:00418E25                 lea     eax, [edi-1010101h]
.text:00418E2B                 not     edi
.text:00418E2D                 and     eax, edi
.text:00418E2F                 test    eax, 80808080h
.text:00418E34                 jz      short loc_418E20
.text:00418E36                 mov     [esp+2DCh+lpFindFileData], offset sub_418CA0 ; Source
.text:00418E3E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418E41                 call    strcat
.text:00418E46                 mov     [esp+2DCh+hFindFile], esi
.text:00418E49                 call    sub_418880
.text:00418E4E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00418E51                 lea     edx, [esp+2DCh+FindFileData]
.text:00418E58                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:00418E5C                 call    FindFirstFileA
.text:00418E61                 sub     esp, 8
.text:00418E64                 cmp     eax, 0FFFFFFFFh
.text:00418E67                 jz      short loc_418E71
.text:00418E69                 mov     [ebp+0], eax
.text:00418E6C                 jmp     loc_418CF6
.text:00418E71 ; ---------------------------------------------------------------------------
.text:00418E71
.text:00418E71 loc_418E71:                             ; CODE XREF: sub_418CB0+1B7↑j
.text:00418E71                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00418E78                 jmp     loc_418DE9
.text:00418E7D ; ---------------------------------------------------------------------------
.text:00418E7D
.text:00418E7D loc_418E7D:                             ; CODE XREF: sub_418CB0+16↑j
.text:00418E7D                 call    _errno
.text:00418E82                 mov     dword ptr [eax], 9
.text:00418E88                 jmp     loc_418DF7
.text:00418E88 sub_418CB0      endp
.text:00418E88
.text:00418E88 ; ---------------------------------------------------------------------------
.text:00418E8D                 align 10h
.text:00418E90
.text:00418E90 ; =============== S U B R O U T I N E =======================================
.text:00418E90
.text:00418E90
.text:00418E90 ; int __cdecl sub_418E90(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00418E90 sub_418E90      proc near               ; CODE XREF: sub_419010+93↓p
.text:00418E90
.text:00418E90 pvReserved      = dword ptr -35Ch
.text:00418E90 pUnkOuter       = dword ptr -358h
.text:00418E90 dwClsContext    = dword ptr -354h
.text:00418E90 riid            = dword ptr -350h
.text:00418E90 ppv             = dword ptr -34Ch
.text:00418E90 cchWideChar     = dword ptr -348h
.text:00418E90 var_334         = byte ptr -334h
.text:00418E90 var_330         = dword ptr -330h
.text:00418E90 String2         = byte ptr -32Ch
.text:00418E90 WideCharStr     = word ptr -21Ch
.text:00418E90 lpMultiByteStr  = dword ptr  4
.text:00418E90 lpString1       = dword ptr  8
.text:00418E90
.text:00418E90                 push    edi
.text:00418E91                 push    esi
.text:00418E92                 push    ebx
.text:00418E93                 sub     esp, 350h
.text:00418E99                 mov     edi, [esp+35Ch+lpString1]
.text:00418EA0                 mov     byte ptr [edi], 0
.text:00418EA3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00418EAA                 call    OleInitialize
.text:00418EAF                 sub     esp, 4
.text:00418EB2                 cmp     eax, 1
.text:00418EB5                 ja      loc_418FEF
.text:00418EBB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00418EC3                 lea     ecx, [esp+35Ch+var_330]
.text:00418EC7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00418ECB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00418ED3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00418EDB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00418EE2                 call    CoCreateInstance
.text:00418EE7                 sub     esp, 14h
.text:00418EEA                 test    eax, eax
.text:00418EEC                 js      loc_418FEF
.text:00418EF2                 mov     ebx, [esp+35Ch+var_330]
.text:00418EF6                 lea     edx, [esp+35Ch+var_334]
.text:00418EFA                 mov     esi, [ebx]
.text:00418EFC                 mov     [esp+35Ch+dwClsContext], edx
.text:00418F00                 mov     [esp+35Ch+pvReserved], ebx
.text:00418F03                 xor     ebx, ebx
.text:00418F05                 mov     [esp+35Ch+pUnkOuter], offset dword_41ED40
.text:00418F0D                 call    dword ptr [esi]
.text:00418F0F                 sub     esp, 0Ch
.text:00418F12                 lea     esi, [esp+35Ch+WideCharStr]
.text:00418F19                 call    AreFileApisANSI
.text:00418F1E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00418F26                 test    eax, eax
.text:00418F28                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00418F2F                 setz    bl
.text:00418F32                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00418F36                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00418F3E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00418F42                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00418F4A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00418F4D                 call    MultiByteToWideChar
.text:00418F52                 sub     esp, 18h
.text:00418F55                 test    eax, eax
.text:00418F57                 js      loc_418FEF
.text:00418F5D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00418F61                 mov     ebx, [edx]
.text:00418F63                 mov     [esp+35Ch+dwClsContext], 0
.text:00418F6B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00418F6F                 mov     [esp+35Ch+pvReserved], edx
.text:00418F72                 call    dword ptr [ebx+14h]
.text:00418F75                 sub     esp, 0Ch
.text:00418F78                 test    eax, eax
.text:00418F7A                 js      short loc_418FEF
.text:00418F7C                 mov     ebx, [esp+35Ch+var_330]
.text:00418F80                 lea     esi, [esp+35Ch+String2]
.text:00418F84                 mov     ecx, [ebx]
.text:00418F86                 mov     [esp+35Ch+pvReserved], ebx
.text:00418F89                 mov     [esp+35Ch+ppv], 0
.text:00418F91                 mov     [esp+35Ch+riid], 0
.text:00418F99                 mov     [esp+35Ch+dwClsContext], 104h
.text:00418FA1                 mov     [esp+35Ch+pUnkOuter], esi
.text:00418FA5                 call    dword ptr [ecx+0Ch]
.text:00418FA8                 sub     esp, 14h
.text:00418FAB                 mov     ebx, eax
.text:00418FAD                 test    eax, eax
.text:00418FAF                 js      short loc_418FEF
.text:00418FB1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00418FB5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00418FB8                 call    lstrcpyA
.text:00418FBD                 sub     esp, 8
.text:00418FC0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00418FC4                 mov     ecx, [edi]
.text:00418FC6                 mov     [esp+35Ch+pvReserved], edi
.text:00418FC9                 call    dword ptr [ecx+8]
.text:00418FCC                 sub     esp, 4
.text:00418FCF                 mov     edx, [esp+35Ch+var_330]
.text:00418FD3                 mov     esi, [edx]
.text:00418FD5                 mov     [esp+35Ch+pvReserved], edx
.text:00418FD8                 call    dword ptr [esi+8]
.text:00418FDB                 sub     esp, 4
.text:00418FDE                 call    CoUninitialize
.text:00418FE3                 mov     eax, ebx
.text:00418FE5
.text:00418FE5 loc_418FE5:                             ; CODE XREF: sub_418E90+177↓j
.text:00418FE5                 add     esp, 350h
.text:00418FEB                 pop     ebx
.text:00418FEC                 pop     esi
.text:00418FED                 pop     edi
.text:00418FEE                 retn
.text:00418FEF ; ---------------------------------------------------------------------------
.text:00418FEF
.text:00418FEF loc_418FEF:                             ; CODE XREF: sub_418E90+25↑j
.text:00418FEF                                         ; sub_418E90+5C↑j ...
.text:00418FEF                 call    sub_41ACA0
.text:00418FF4                 mov     edi, eax
.text:00418FF6                 call    _errno
.text:00418FFB                 mov     [eax], edi
.text:00418FFD                 call    CoUninitialize
.text:00419002                 mov     eax, 0FFFFFFFFh
.text:00419007                 jmp     short loc_418FE5
.text:00419007 sub_418E90      endp
.text:00419007
.text:00419007 ; ---------------------------------------------------------------------------
.text:00419009 ; const char aLnk_0[]
.text:00419009 aLnk_0          db '.lnk',0             ; DATA XREF: sub_419010+53↓o
.text:00419009                                         ; sub_419010:loc_419075↓o
.text:0041900E                 align 10h
.text:00419010
.text:00419010 ; =============== S U B R O U T I N E =======================================
.text:00419010
.text:00419010
.text:00419010 ; int __cdecl sub_419010(char *, LPSTR lpString1)
.text:00419010 sub_419010      proc near               ; CODE XREF: sub_40BD90+35↑p
.text:00419010                                         ; sub_41A180+4C↓p ...
.text:00419010
.text:00419010 Str             = dword ptr -1Ch
.text:00419010 Source          = dword ptr -18h
.text:00419010 Destination     = dword ptr -14h
.text:00419010 arg_0           = dword ptr  4
.text:00419010 lpString1       = dword ptr  8
.text:00419010
.text:00419010                 push    ebp
.text:00419011                 push    edi
.text:00419012                 push    esi
.text:00419013                 push    ebx
.text:00419014                 sub     esp, 0Ch
.text:00419017                 mov     ebx, [esp+1Ch+arg_0]
.text:0041901B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041901F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00419022                 call    strlen
.text:00419027                 add     eax, 5
.text:0041902A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041902D                 call    malloc
.text:00419032                 mov     [esp+1Ch+Destination], eax
.text:00419036                 test    eax, eax
.text:00419038                 jz      loc_4190E0
.text:0041903E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00419042                 mov     [esp+1Ch+Str], eax ; Destination
.text:00419045                 call    strcpy
.text:0041904A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00419052                 mov     eax, [esp+1Ch+Destination]
.text:00419056                 mov     [esp+1Ch+Str], eax ; Str
.text:00419059                 call    strrchr
.text:0041905E                 test    eax, eax
.text:00419060                 jz      short loc_419075
.text:00419062                 cld
.text:00419063                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00419068                 mov     ecx, 5
.text:0041906D                 mov     esi, eax
.text:0041906F                 mov     edi, ebx
.text:00419071                 repe cmpsb
.text:00419073                 jz      short loc_419089
.text:00419075
.text:00419075 loc_419075:                             ; CODE XREF: sub_419010+50↑j
.text:00419075                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0041907D                 mov     edx, [esp+1Ch+Destination]
.text:00419081                 mov     [esp+1Ch+Str], edx ; Destination
.text:00419084                 call    strcat
.text:00419089
.text:00419089 loc_419089:                             ; CODE XREF: sub_419010+63↑j
.text:00419089                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00419090                 call    SetErrorMode
.text:00419095                 sub     esp, 4
.text:00419098                 mov     ebx, [esp+1Ch+Destination]
.text:0041909C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004190A0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004190A3                 call    sub_418E90
.text:004190A8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004190AB                 mov     esi, eax
.text:004190AD                 call    free
.text:004190B2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004190B9                 call    SetErrorMode
.text:004190BE                 sub     esp, 4
.text:004190C1                 mov     [esp+1Ch+Str], ebp
.text:004190C4                 call    sub_418800
.text:004190C9                 inc     esi
.text:004190CA                 jz      short loc_4190E0
.text:004190CC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:004190D0                 add     esp, 0Ch
.text:004190D3                 pop     ebx
.text:004190D4                 pop     esi
.text:004190D5                 pop     edi
.text:004190D6                 pop     ebp
.text:004190D7                 jmp     strlen
.text:004190D7 ; ---------------------------------------------------------------------------
.text:004190DC                 align 10h
.text:004190E0
.text:004190E0 loc_4190E0:                             ; CODE XREF: sub_419010+28↑j
.text:004190E0                                         ; sub_419010+BA↑j
.text:004190E0                 add     esp, 0Ch
.text:004190E3                 mov     eax, 0FFFFFFFFh
.text:004190E8                 pop     ebx
.text:004190E9                 pop     esi
.text:004190EA                 pop     edi
.text:004190EB                 pop     ebp
.text:004190EC                 retn
.text:004190EC sub_419010      endp
.text:004190EC
.text:004190EC ; ---------------------------------------------------------------------------
.text:004190ED                 align 10h
.text:004190F0 ; const char String[4]
.text:004190F0 String          db ' :/',0              ; DATA XREF: sub_419100+FA↓o
.text:004190F4                 align 10h
.text:00419100
.text:00419100 ; =============== S U B R O U T I N E =======================================
.text:00419100
.text:00419100
.text:00419100 ; int __cdecl sub_419100(LPCSTR)
.text:00419100 sub_419100      proc near               ; CODE XREF: sub_416C20+E↑p
.text:00419100                                         ; sub_417120+17↑p ...
.text:00419100
.text:00419100 Str             = dword ptr -1Ch
.text:00419100 Val             = dword ptr -18h
.text:00419100 Count           = dword ptr -14h
.text:00419100 var_10          = dword ptr -10h
.text:00419100 var_C           = dword ptr -0Ch
.text:00419100 var_8           = dword ptr -8
.text:00419100 var_4           = dword ptr -4
.text:00419100 arg_0           = dword ptr  4
.text:00419100
.text:00419100                 sub     esp, 1Ch
.text:00419103                 mov     edx, [esp+1Ch+arg_0]
.text:00419107                 mov     [esp+1Ch+var_8], edi
.text:0041910B                 mov     [esp+1Ch+var_10], ebx
.text:0041910F                 mov     [esp+1Ch+var_C], esi
.text:00419113                 mov     [esp+1Ch+var_4], ebp
.text:00419117                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0041911A                 call    sub_41ACF0
.text:0041911F                 test    eax, eax
.text:00419121                 mov     edi, eax
.text:00419123                 jz      short loc_419160
.text:00419125                 mov     [esp+1Ch+Str], eax ; Str
.text:00419128                 call    strlen
.text:0041912D                 cmp     eax, 2
.text:00419130                 jbe     short loc_41913C
.text:00419132                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00419136                 jz      loc_4191F0
.text:0041913C
.text:0041913C loc_41913C:                             ; CODE XREF: sub_419100+30↑j
.text:0041913C                                         ; sub_419100+F4↓j
.text:0041913C                 test    edi, edi
.text:0041913E                 jz      short loc_419160
.text:00419140                 mov     [esp+1Ch+Str], edi ; Str
.text:00419143                 call    strlen
.text:00419148                 cmp     eax, 4
.text:0041914B                 mov     ebp, eax
.text:0041914D                 jle     short loc_419160
.text:0041914F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00419152                 jz      short loc_419180
.text:00419154                 lea     esi, [esi+0]
.text:0041915A                 lea     edi, [edi+0]
.text:00419160
.text:00419160 loc_419160:                             ; CODE XREF: sub_419100+23↑j
.text:00419160                                         ; sub_419100+3E↑j ...
.text:00419160                 xor     esi, esi
.text:00419162
.text:00419162 loc_419162:                             ; CODE XREF: sub_419100+CD↓j
.text:00419162                                         ; sub_419100+115↓j
.text:00419162                 mov     [esp+1Ch+Str], edi ; Block
.text:00419165                 call    free
.text:0041916A                 mov     eax, esi
.text:0041916C                 mov     ebx, [esp+1Ch+var_10]
.text:00419170                 mov     esi, [esp+1Ch+var_C]
.text:00419174                 mov     edi, [esp+1Ch+var_8]
.text:00419178                 mov     ebp, [esp+1Ch+var_4]
.text:0041917C                 add     esp, 1Ch
.text:0041917F                 retn
.text:00419180 ; ---------------------------------------------------------------------------
.text:00419180
.text:00419180 loc_419180:                             ; CODE XREF: sub_419100+52↑j
.text:00419180                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00419184                 jnz     short loc_419160
.text:00419186                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0041918E                 lea     ecx, [edi+2]
.text:00419191                 mov     [esp+1Ch+Str], ecx ; Str
.text:00419194                 call    strchr
.text:00419199                 test    eax, eax
.text:0041919B                 jnz     short loc_4191CF
.text:0041919D
.text:0041919D loc_41919D:                             ; CODE XREF: sub_419100+E2↓j
.text:0041919D                 inc     ebp
.text:0041919E
.text:0041919E loc_41919E:                             ; CODE XREF: sub_419100+E9↓j
.text:0041919E                 mov     [esp+1Ch+Val], 1 ; Size
.text:004191A6                 lea     ebx, [ebp+1]
.text:004191A9                 mov     [esp+1Ch+Str], ebx ; Count
.text:004191AC                 call    calloc
.text:004191B1                 mov     [esp+1Ch+Str], eax ; Destination
.text:004191B4                 mov     esi, eax
.text:004191B6                 mov     [esp+1Ch+Count], ebx ; Count
.text:004191BA                 mov     [esp+1Ch+Val], edi ; Source
.text:004191BE                 call    strncpy
.text:004191C3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:004191C8                 mov     byte ptr [ebp+esi+0], 0
.text:004191CD                 jmp     short loc_419162
.text:004191CF ; ---------------------------------------------------------------------------
.text:004191CF
.text:004191CF loc_4191CF:                             ; CODE XREF: sub_419100+9B↑j
.text:004191CF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004191D7                 inc     eax
.text:004191D8                 mov     [esp+1Ch+Str], eax ; Str
.text:004191DB                 call    strchr
.text:004191E0                 test    eax, eax
.text:004191E2                 jz      short loc_41919D
.text:004191E4                 sub     eax, edi
.text:004191E6                 lea     ebp, [eax+1]
.text:004191E9                 jmp     short loc_41919E
.text:004191E9 ; ---------------------------------------------------------------------------
.text:004191EB                 align 10h
.text:004191F0
.text:004191F0 loc_4191F0:                             ; CODE XREF: sub_419100+36↑j
.text:004191F0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:004191F4                 jnz     loc_41913C
.text:004191FA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00419201                 call    _strdup
.text:00419206                 movsx   edx, byte ptr [edi]
.text:00419209                 mov     esi, eax
.text:0041920B                 mov     [esp+1Ch+Str], edx ; C
.text:0041920E                 call    toupper
.text:00419213                 mov     [esi], al
.text:00419215                 jmp     loc_419162
.text:00419215 sub_419100      endp
.text:00419215
.text:00419215 ; ---------------------------------------------------------------------------
.text:0041921A                 align 10h
.text:00419220
.text:00419220 ; =============== S U B R O U T I N E =======================================
.text:00419220
.text:00419220
.text:00419220 sub_419220      proc near               ; CODE XREF: .text:00419374↓p
.text:00419220                                         ; .text:00419458↓p
.text:00419220
.text:00419220 Str             = dword ptr -2Ch
.text:00419220 Val             = dword ptr -28h
.text:00419220 var_18          = dword ptr -18h
.text:00419220 var_11          = byte ptr -11h
.text:00419220 arg_0           = dword ptr  4
.text:00419220
.text:00419220                 push    ebp
.text:00419221                 push    edi
.text:00419222                 push    esi
.text:00419223                 push    ebx
.text:00419224                 sub     esp, 1Ch
.text:00419227                 mov     edx, [esp+2Ch+arg_0]
.text:0041922B                 cmp     edx, ds:dword_422600
.text:00419231                 mov     [esp+2Ch+var_11], 0
.text:00419236                 jz      loc_419334
.text:0041923C                 mov     ebx, ds:dword_4225F0
.text:00419242                 test    ebx, ebx
.text:00419244                 jz      short loc_4192B2
.text:00419246
.text:00419246 loc_419246:                             ; CODE XREF: sub_419220+10F↓j
.text:00419246                 mov     ebx, [esp+2Ch+arg_0]
.text:0041924A                 xor     edi, edi
.text:0041924C                 xor     esi, esi
.text:0041924E                 mov     ebp, offset dword_422618
.text:00419253                 lea     esi, [esi+0]
.text:00419259                 lea     edi, [edi+0]
.text:00419260
.text:00419260 loc_419260:                             ; CODE XREF: sub_419220+60↓j
.text:00419260                 mov     edx, [ebp+4]
.text:00419263                 mov     ecx, edi
.text:00419265                 mov     eax, [ebp+0]
.text:00419268                 shl     ecx, 4
.text:0041926B                 mov     [esp+2Ch+var_18], ecx
.text:0041926F                 mov     ecx, edx
.text:00419271                 xor     eax, ebx
.text:00419273                 xor     ecx, esi
.text:00419275                 or      ecx, eax
.text:00419277                 jz      short loc_4192A1
.text:00419279                 inc     edi
.text:0041927A                 add     ebp, 10h
.text:0041927D                 cmp     edi, 20h ; ' '
.text:00419280                 jle     short loc_419260
.text:00419282
.text:00419282 loc_419282:                             ; CODE XREF: sub_419220+90↓j
.text:00419282                 movzx   ebx, [esp+2Ch+var_11]
.text:00419287                 mov     eax, [esp+2Ch+arg_0]
.text:0041928B                 mov     byte_4210A0, bl
.text:00419291                 mov     ds:dword_422600, eax
.text:00419296                 movsx   eax, bl
.text:00419299
.text:00419299 loc_419299:                             ; CODE XREF: sub_419220+11B↓j
.text:00419299                 add     esp, 1Ch
.text:0041929C                 pop     ebx
.text:0041929D                 pop     esi
.text:0041929E                 pop     edi
.text:0041929F                 pop     ebp
.text:004192A0                 retn
.text:004192A1 ; ---------------------------------------------------------------------------
.text:004192A1
.text:004192A1 loc_4192A1:                             ; CODE XREF: sub_419220+57↑j
.text:004192A1                 mov     edx, [esp+2Ch+var_18]
.text:004192A5                 movzx   eax, byte ptr ds:dword_422610[edx]
.text:004192AC                 mov     [esp+2Ch+var_11], al
.text:004192B0                 jmp     short loc_419282
.text:004192B2 ; ---------------------------------------------------------------------------
.text:004192B2
.text:004192B2 loc_4192B2:                             ; CODE XREF: sub_419220+24↑j
.text:004192B2                 mov     [esp+2Ch+Str], 0
.text:004192B9                 call    sub_41C490
.text:004192BE                 test    eax, eax
.text:004192C0                 mov     ebx, eax
.text:004192C2                 jz      short loc_41931C
.text:004192C4                 movzx   ecx, byte ptr [eax]
.text:004192C7                 mov     esi, 0FFFFFFF0h
.text:004192CC                 test    cl, cl
.text:004192CE                 jz      short loc_41931C
.text:004192D0
.text:004192D0 loc_4192D0:                             ; CODE XREF: sub_419220+FA↓j
.text:004192D0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004192D3                 movsx   ebp, cl
.text:004192D6                 add     esi, 10h
.text:004192D9                 mov     ds:dword_422610[esi], ebp
.text:004192DF                 mov     edi, ebp
.text:004192E1                 sar     edi, 1Fh
.text:004192E4                 mov     ds:dword_422614[esi], edi
.text:004192EA                 call    sub_417120
.text:004192EF                 mov     ds:dword_422618[esi], eax
.text:004192F5                 xor     ecx, ecx
.text:004192F7                 mov     [esp+2Ch+Str], ebx ; Str
.text:004192FA                 mov     ds:dword_42261C[esi], ecx
.text:00419300                 mov     [esp+2Ch+Val], 0 ; Val
.text:00419308                 call    strchr
.text:0041930D                 mov     ebx, eax
.text:0041930F                 inc     ebx
.text:00419310                 jz      short loc_41931C
.text:00419312                 movzx   edx, byte ptr [eax+1]
.text:00419316                 test    dl, dl
.text:00419318                 mov     cl, dl
.text:0041931A                 jnz     short loc_4192D0
.text:0041931C
.text:0041931C loc_41931C:                             ; CODE XREF: sub_419220+A2↑j
.text:0041931C                                         ; sub_419220+AE↑j ...
.text:0041931C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0041931F                 mov     esi, 1
.text:00419324                 mov     ds:dword_4225F0, esi
.text:0041932A                 call    free
.text:0041932F                 jmp     loc_419246
.text:00419334 ; ---------------------------------------------------------------------------
.text:00419334
.text:00419334 loc_419334:                             ; CODE XREF: sub_419220+16↑j
.text:00419334                 movsx   eax, byte_4210A0
.text:0041933B                 jmp     loc_419299
.text:0041933B sub_419220      endp
.text:0041933B
.text:0041933B ; ---------------------------------------------------------------------------
.text:00419340 dword_419340    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00419340                                         ; DATA XREF: .text:00419363↓o
.text:00419340                                         ; .text:00419443↓o
.text:00419350 ; ---------------------------------------------------------------------------
.text:00419350                 sub     esp, 1Ch
.text:00419353                 mov     [esp+14h], esi
.text:00419357                 mov     esi, [esp+20h]
.text:0041935B                 mov     [esp+18h], edi
.text:0041935F                 mov     [esp+10h], ebx
.text:00419363                 mov     dword ptr [esp], offset dword_419340
.text:0041936A                 call    _strdup
.text:0041936F                 mov     [esp], esi
.text:00419372                 mov     edi, eax
.text:00419374                 call    sub_419220
.text:00419379                 mov     [edi], al
.text:0041937B                 test    al, al
.text:0041937D                 jz      short loc_419391
.text:0041937F                 mov     eax, edi
.text:00419381                 mov     ebx, [esp+10h]
.text:00419385                 mov     esi, [esp+14h]
.text:00419389                 mov     edi, [esp+18h]
.text:0041938D                 add     esp, 1Ch
.text:00419390                 retn
.text:00419391 ; ---------------------------------------------------------------------------
.text:00419391
.text:00419391 loc_419391:                             ; CODE XREF: .text:0041937D↑j
.text:00419391                 mov     [esp], edi
.text:00419394                 call    free
.text:00419399                 mov     dword ptr [esp+4], 0
.text:004193A1                 mov     dword ptr [esp], 0
.text:004193A8                 call    GetCurrentDirectoryA
.text:004193AD                 sub     esp, 8
.text:004193B0                 lea     esi, [eax+1]
.text:004193B3                 mov     [esp], esi
.text:004193B6                 call    malloc
.text:004193BB                 mov     [esp+4], eax
.text:004193BF                 mov     edi, eax
.text:004193C1                 mov     [esp], esi
.text:004193C4                 call    GetCurrentDirectoryA
.text:004193C9                 sub     esp, 8
.text:004193CC                 test    eax, eax
.text:004193CE                 jnz     short loc_4193F0
.text:004193D0                 mov     dword ptr [esp+20h], 419344h
.text:004193D8                 mov     ebx, [esp+10h]
.text:004193DC                 mov     esi, [esp+14h]
.text:004193E0                 mov     edi, [esp+18h]
.text:004193E4                 add     esp, 1Ch
.text:004193E7                 jmp     _strdup
.text:004193E7 ; ---------------------------------------------------------------------------
.text:004193EC                 align 10h
.text:004193F0
.text:004193F0 loc_4193F0:                             ; CODE XREF: .text:004193CE↑j
.text:004193F0                 mov     [esp+20h], edi
.text:004193F4                 mov     ebx, [esp+10h]
.text:004193F8                 mov     esi, [esp+14h]
.text:004193FC                 mov     edi, [esp+18h]
.text:00419400                 add     esp, 1Ch
.text:00419403                 jmp     sub_419100
.text:00419403 ; ---------------------------------------------------------------------------
.text:00419408                 align 10h
.text:00419410                 sub     esp, 7Ch
.text:00419413                 lea     edx, [esp+10h]
.text:00419417                 mov     [esp+8], edx
.text:0041941B                 mov     edx, [esp+80h]
.text:00419422                 mov     [esp+70h], ebx
.text:00419426                 mov     [esp+74h], esi
.text:0041942A                 mov     [esp+4], edx
.text:0041942E                 mov     [esp+78h], edi
.text:00419432                 mov     dword ptr [esp], 0
.text:00419439                 call    sub_416370
.text:0041943E                 xor     edx, edx
.text:00419440                 inc     eax
.text:00419441                 jz      short loc_419465
.text:00419443                 mov     dword ptr [esp], offset dword_419340
.text:0041944A                 mov     esi, [esp+20h]
.text:0041944E                 call    _strdup
.text:00419453                 mov     edi, eax
.text:00419455                 mov     [esp], esi
.text:00419458                 call    sub_419220
.text:0041945D                 mov     [edi], al
.text:0041945F                 test    al, al
.text:00419461                 mov     edx, edi
.text:00419463                 jz      short loc_419477
.text:00419465
.text:00419465 loc_419465:                             ; CODE XREF: .text:00419441↑j
.text:00419465                                         ; .text:004194C4↓j
.text:00419465                 mov     ebx, [esp+70h]
.text:00419469                 mov     eax, edx
.text:0041946B                 mov     esi, [esp+74h]
.text:0041946F                 mov     edi, [esp+78h]
.text:00419473                 add     esp, 7Ch
.text:00419476                 retn
.text:00419477 ; ---------------------------------------------------------------------------
.text:00419477
.text:00419477 loc_419477:                             ; CODE XREF: .text:00419463↑j
.text:00419477                 mov     [esp], edi
.text:0041947A                 call    free
.text:0041947F                 mov     dword ptr [esp+4], 0
.text:00419487                 mov     dword ptr [esp], 0
.text:0041948E                 call    GetCurrentDirectoryA
.text:00419493                 sub     esp, 8
.text:00419496                 lea     esi, [eax+1]
.text:00419499                 mov     [esp], esi
.text:0041949C                 call    malloc
.text:004194A1                 mov     [esp+4], eax
.text:004194A5                 mov     edi, eax
.text:004194A7                 mov     [esp], esi
.text:004194AA                 call    GetCurrentDirectoryA
.text:004194AF                 sub     esp, 8
.text:004194B2                 test    eax, eax
.text:004194B4                 jnz     short loc_4194C6
.text:004194B6                 mov     dword ptr [esp], 419344h
.text:004194BD                 call    _strdup
.text:004194C2
.text:004194C2 loc_4194C2:                             ; CODE XREF: .text:004194CE↓j
.text:004194C2                 mov     edx, eax
.text:004194C4                 jmp     short loc_419465
.text:004194C6 ; ---------------------------------------------------------------------------
.text:004194C6
.text:004194C6 loc_4194C6:                             ; CODE XREF: .text:004194B4↑j
.text:004194C6                 mov     [esp], edi
.text:004194C9                 call    sub_419100
.text:004194CE                 jmp     short loc_4194C2
.text:004194D0
.text:004194D0 ; =============== S U B R O U T I N E =======================================
.text:004194D0
.text:004194D0
.text:004194D0 ; int __cdecl sub_4194D0(LPCSTR)
.text:004194D0 sub_4194D0      proc near               ; CODE XREF: sub_4165D0+12F↑p
.text:004194D0
.text:004194D0 String1         = dword ptr -1Ch
.text:004194D0 String2         = dword ptr -18h
.text:004194D0 var_C           = dword ptr -0Ch
.text:004194D0 var_8           = dword ptr -8
.text:004194D0 var_4           = dword ptr -4
.text:004194D0 arg_0           = dword ptr  4
.text:004194D0
.text:004194D0                 sub     esp, 1Ch
.text:004194D3                 mov     [esp+1Ch+var_4], edi
.text:004194D7                 mov     edi, [esp+1Ch+arg_0]
.text:004194DB                 mov     [esp+1Ch+var_C], ebx
.text:004194DF                 mov     [esp+1Ch+var_8], esi
.text:004194E3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004194E6                 call    sub_41ACF0
.text:004194EB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004194EE                 mov     esi, eax
.text:004194F0                 call    sub_419100
.text:004194F5                 mov     [esp+1Ch+String2], eax ; String2
.text:004194F9                 mov     ebx, eax
.text:004194FB                 mov     [esp+1Ch+String1], esi ; String1
.text:004194FE                 call    _stricmp
.text:00419503                 test    eax, eax
.text:00419505                 setz    dl
.text:00419508                 test    esi, esi
.text:0041950A                 movzx   edi, dl
.text:0041950D                 jz      short loc_419517
.text:0041950F                 mov     [esp+1Ch+String1], esi ; Block
.text:00419512                 call    free
.text:00419517
.text:00419517 loc_419517:                             ; CODE XREF: sub_4194D0+3D↑j
.text:00419517                 test    ebx, ebx
.text:00419519                 jz      short loc_419523
.text:0041951B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0041951E                 call    free
.text:00419523
.text:00419523 loc_419523:                             ; CODE XREF: sub_4194D0+49↑j
.text:00419523                 mov     eax, edi
.text:00419525                 mov     ebx, [esp+1Ch+var_C]
.text:00419529                 mov     esi, [esp+1Ch+var_8]
.text:0041952D                 mov     edi, [esp+1Ch+var_4]
.text:00419531                 add     esp, 1Ch
.text:00419534                 retn
.text:00419534 sub_4194D0      endp
.text:00419534
.text:00419534 ; ---------------------------------------------------------------------------
.text:00419535                 align 10h
.text:00419540
.text:00419540 ; =============== S U B R O U T I N E =======================================
.text:00419540
.text:00419540
.text:00419540 ; int __cdecl sub_419540(char *, int)
.text:00419540 sub_419540      proc near               ; CODE XREF: sub_401EE0+4A7↑p
.text:00419540                                         ; sub_401EE0+914↑p ...
.text:00419540
.text:00419540 var_C           = dword ptr -0Ch
.text:00419540 var_8           = dword ptr -8
.text:00419540 var_4           = dword ptr -4
.text:00419540 arg_0           = dword ptr  4
.text:00419540 arg_4           = dword ptr  8
.text:00419540
.text:00419540                 sub     esp, 0Ch
.text:00419543                 mov     edx, [esp+0Ch+arg_4]
.text:00419547                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0041954E                 mov     [esp+0Ch+var_4], edx ; int
.text:00419552                 mov     edx, [esp+0Ch+arg_0]
.text:00419556                 mov     [esp+0Ch+var_8], edx ; char *
.text:0041955A                 call    sub_41A250
.text:0041955F                 add     esp, 0Ch
.text:00419562                 retn
.text:00419562 sub_419540      endp
.text:00419562
.text:00419562 ; ---------------------------------------------------------------------------
.text:00419563                 align 10h
.text:00419570 aKernel32       db 'KERNEL32',0         ; DATA XREF: .text:004195C1↓o
.text:00419579 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00419579                                         ; DATA XREF: .text:004195D2↓o
.text:0041958D ; const CHAR FileName[]
.text:0041958D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0041971C↓o
.text:0041958D                                         ; sub_419B50+17C↓o
.text:00419598 ; ---------------------------------------------------------------------------
.text:00419598
.text:00419598 loc_419598:                             ; DATA XREF: .text:00419832↓o
.text:00419598                 dec     esi
.text:00419599                 push    esp
.text:0041959A                 inc     esi
.text:0041959B                 push    ebx
.text:0041959C                 add     [esi+41h], al
.text:0041959F                 push    esp
.text:004195A0                 xor     esi, [edx]
.text:004195A2                 add     [esi+41h], al
.text:004195A5                 push    esp
.text:004195A6                 add     [ebx+44h], al
.text:004195A9                 inc     esi
.text:004195AA                 push    ebx
.text:004195AB
.text:004195AB loc_4195AB:                             ; CODE XREF: sub_419B50+101↓p
.text:004195AB                 add     [ebp+55002674h], cl
.text:004195B1                 push    edi
.text:004195B2                 push    esi
.text:004195B3                 push    ebx
.text:004195B4                 sub     esp, 8BCh
.text:004195BA                 mov     ebp, [esp+8D0h]
.text:004195C1                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004195C8                 call    LoadLibraryA
.text:004195CD                 sub     esp, 4
.text:004195D0                 mov     edi, eax
.text:004195D2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:004195DA                 mov     [esp], eax
.text:004195DD                 call    GetProcAddress
.text:004195E2                 sub     esp, 8
.text:004195E5                 mov     esi, eax
.text:004195E7                 test    ebp, ebp
.text:004195E9                 mov     dword ptr [esp+20h], 0
.text:004195F1                 jz      loc_419B31
.text:004195F7                 mov     [esp], ebp
.text:004195FA                 call    sub_418880
.text:004195FF                 mov     [esp], eax
.text:00419602                 mov     ebp, eax
.text:00419604                 call    strlen
.text:00419609                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041960E                 mov     ebx, eax
.text:00419610                 jz      short loc_41962C
.text:00419612                 mov     [esp], ebp
.text:00419615                 lea     edx, [eax+1]
.text:00419618                 mov     [esp+4], edx
.text:0041961C                 call    realloc
.text:00419621                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00419625                 mov     ebp, eax
.text:00419627                 mov     byte ptr [ebx+eax+1], 0
.text:0041962C
.text:0041962C loc_41962C:                             ; CODE XREF: .text:00419610↑j
.text:0041962C                 mov     dword ptr [esp+1Ch], 400h
.text:00419634                 lea     edx, [esp+0B0h]
.text:0041963B                 lea     ebx, [esp+5Ch]
.text:0041963F                 mov     [esp+18h], edx
.text:00419643                 lea     ecx, [esp+58h]
.text:00419647                 lea     edx, [esp+54h]
.text:0041964B                 mov     [esp+14h], ebx
.text:0041964F                 lea     eax, [esp+4B0h]
.text:00419656                 mov     [esp+10h], ecx
.text:0041965A                 mov     [esp+0Ch], edx
.text:0041965E                 mov     dword ptr [esp+8], 400h
.text:00419666                 mov     [esp+4], eax
.text:0041966A                 mov     [esp], ebp
.text:0041966D                 call    GetVolumeInformationA
.text:00419672                 sub     esp, 20h
.text:00419675                 test    eax, eax
.text:00419677                 jz      loc_419B0E
.text:0041967D                 test    esi, esi
.text:0041967F                 jz      short loc_4196A5
.text:00419681                 mov     [esp], ebp
.text:00419684                 lea     edx, [esp+48h]
.text:00419688                 lea     ebx, [esp+40h]
.text:0041968C                 mov     [esp+0Ch], edx
.text:00419690                 lea     ecx, [esp+38h]
.text:00419694                 mov     [esp+8], ebx
.text:00419698                 mov     [esp+4], ecx
.text:0041969C                 call    esi
.text:0041969E                 sub     esp, 10h
.text:004196A1                 mov     [esp+20h], eax
.text:004196A5
.text:004196A5 loc_4196A5:                             ; CODE XREF: .text:0041967F↑j
.text:004196A5                 test    edi, edi
.text:004196A7                 jz      short loc_4196B4
.text:004196A9                 mov     [esp], edi
.text:004196AC                 call    FreeLibrary
.text:004196B1                 sub     esp, 4
.text:004196B4
.text:004196B4 loc_4196B4:                             ; CODE XREF: .text:004196A7↑j
.text:004196B4                 call    sub_41B6B0
.text:004196B9                 test    eax, eax
.text:004196BB                 lea     esi, [esp+28h]
.text:004196BF                 jz      loc_419AF0
.text:004196C5                 call    sub_41B6B0
.text:004196CA                 test    eax, eax
.text:004196CC                 jz      short loc_4196DC
.text:004196CE                 call    sub_41B600
.text:004196D3                 cmp     eax, 0Bh
.text:004196D6                 jle     loc_419AC4
.text:004196DC
.text:004196DC loc_4196DC:                             ; CODE XREF: .text:004196CC↑j
.text:004196DC                 cld
.text:004196DD                 xor     eax, eax
.text:004196DF                 lea     ebx, [esp+60h]
.text:004196E3                 mov     ecx, 7
.text:004196E8                 mov     edi, ebx
.text:004196EA                 rep stosd
.text:004196EC                 mov     dword ptr [esp+18h], 0
.text:004196F4                 mov     dword ptr [esp+14h], 4000000h
.text:004196FC                 mov     dword ptr [esp+10h], 0
.text:00419704                 mov     dword ptr [esp+0Ch], 0
.text:0041970C                 mov     dword ptr [esp+8], 0
.text:00419714                 mov     dword ptr [esp+4], 0
.text:0041971C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00419723                 call    CreateFileA
.text:00419728                 sub     esp, 1Ch
.text:0041972B                 mov     edi, eax
.text:0041972D                 cmp     eax, 0FFFFFFFFh
.text:00419730                 jz      short loc_4197B0
.text:00419732                 mov     [esp+10h], ebx
.text:00419736                 lea     edx, [esp+80h]
.text:0041973D                 lea     ecx, [esp+24h]
.text:00419741                 mov     [esp+70h], edx
.text:00419745                 mov     [esp+18h], ecx
.text:00419749                 mov     [esp+8], ebx
.text:0041974D                 mov     dword ptr [esp+6Ch], 7303h
.text:00419755                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041975D                 mov     [esp+64h], ebp
.text:00419761                 mov     dword ptr [esp+78h], 1
.text:00419769                 mov     dword ptr [esp+1Ch], 0
.text:00419771                 mov     dword ptr [esp+14h], 1Ch
.text:00419779                 mov     dword ptr [esp+0Ch], 1Ch
.text:00419781                 mov     dword ptr [esp+4], 6
.text:00419789                 mov     [esp], eax
.text:0041978C                 call    DeviceIoControl
.text:00419791                 sub     esp, 20h
.text:00419794                 mov     ebx, eax
.text:00419796                 mov     [esp], edi
.text:00419799                 call    CloseHandle
.text:0041979E                 sub     esp, 4
.text:004197A1                 test    ebx, ebx
.text:004197A3                 jz      short loc_4197B0
.text:004197A5                 test    byte ptr [esp+78h], 1
.text:004197AA                 jz      loc_419A90
.text:004197B0
.text:004197B0 loc_4197B0:                             ; CODE XREF: .text:00419730↑j
.text:004197B0                                         ; .text:004197A3↑j
.text:004197B0                 call    sub_41ACA0
.text:004197B5                 mov     edi, eax
.text:004197B7                 call    _errno
.text:004197BC                 mov     [eax], edi
.text:004197BE                 xor     eax, eax
.text:004197C0
.text:004197C0 loc_4197C0:                             ; CODE XREF: .text:00419ABF↓j
.text:004197C0                                         ; .text:00419AEB↓j
.text:004197C0                 test    eax, eax
.text:004197C2                 jnz     short loc_4197E4
.text:004197C4                 mov     dword ptr [esp+34h], 1
.text:004197CC                 mov     dword ptr [esp+30h], 200h
.text:004197D4                 mov     dword ptr [esp+2Ch], 0
.text:004197DC                 mov     dword ptr [esp+28h], 0
.text:004197E4
.text:004197E4 loc_4197E4:                             ; CODE XREF: .text:004197C2↑j
.text:004197E4                 mov     edx, [esp+30h]
.text:004197E8                 mov     edi, [esp+34h]
.text:004197EC                 mov     ecx, [esp+20h]
.text:004197F0                 imul    edi, edx
.text:004197F3                 test    ecx, ecx
.text:004197F5                 jnz     short loc_41981D
.text:004197F7                 mov     eax, [esp+28h]
.text:004197FB                 mul     edi
.text:004197FD                 mov     esi, eax
.text:004197FF                 mov     eax, [esp+2Ch]
.text:00419803                 mov     [esp+44h], edx
.text:00419807                 mov     [esp+40h], esi
.text:0041980B                 mul     edi
.text:0041980D                 mov     [esp+48h], eax
.text:00419811                 mov     [esp+4Ch], edx
.text:00419815                 mov     [esp+38h], eax
.text:00419819                 mov     [esp+3Ch], edx
.text:0041981D
.text:0041981D loc_41981D:                             ; CODE XREF: .text:004197F5↑j
.text:0041981D                 mov     ebx, [esp+5Ch]
.text:00419821                 lea     edx, [esp+0B0h]
.text:00419828                 mov     ecx, [esp+8D4h]
.text:0041982F                 mov     [ecx+48h], ebx
.text:00419832                 mov     dword ptr [esp+4], offset loc_419598
.text:0041983A                 mov     [esp], edx
.text:0041983D                 call    _stricmp
.text:00419842                 test    eax, eax
.text:00419844                 jnz     loc_419A00
.text:0041984A                 mov     esi, [esp+8D4h]
.text:00419851                 mov     dword ptr [esi], 5346544Eh
.text:00419857
.text:00419857 loc_419857:                             ; CODE XREF: .text:00419A28↓j
.text:00419857                                         ; .text:00419A55↓j ...
.text:00419857                 mov     ebx, [esp+30h]
.text:0041985B                 mov     esi, [esp+8D4h]
.text:00419862                 mov     [esi+4], ebx
.text:00419865                 mov     [esi+8], ebx
.text:00419868                 mov     ebx, [esi+8]
.text:0041986B                 mov     [esi+0Ch], edi
.text:0041986E                 mov     ecx, [esp+44h]
.text:00419872                 xor     esi, esi
.text:00419874                 mov     [esp+8], ebx
.text:00419878                 mov     edx, [esp+40h]
.text:0041987C                 mov     [esp+0Ch], esi
.text:00419880                 mov     [esp+4], ecx
.text:00419884                 mov     [esp], edx
.text:00419887                 call    sub_41F730
.text:0041988C                 mov     ecx, [esp+8D4h]
.text:00419893                 mov     [ecx+10h], eax
.text:00419896                 mov     [ecx+14h], edx
.text:00419899                 mov     ecx, [esp+4Ch]
.text:0041989D                 mov     [esp+8], ebx
.text:004198A1                 mov     edx, [esp+48h]
.text:004198A5                 mov     [esp+0Ch], esi
.text:004198A9                 mov     [esp+4], ecx
.text:004198AD                 mov     [esp], edx
.text:004198B0                 call    sub_41F730
.text:004198B5                 mov     ecx, [esp+8D4h]
.text:004198BC                 mov     [ecx+18h], eax
.text:004198BF                 mov     [ecx+1Ch], edx
.text:004198C2                 mov     ecx, [esp+38h]
.text:004198C6                 mov     [esp+8], ebx
.text:004198CA                 mov     ebx, [esp+3Ch]
.text:004198CE                 mov     [esp+0Ch], esi
.text:004198D2                 mov     [esp], ecx
.text:004198D5                 mov     [esp+4], ebx
.text:004198D9                 call    sub_41F730
.text:004198DE                 mov     esi, [esp+8D4h]
.text:004198E5                 mov     [esi+20h], eax
.text:004198E8                 mov     [esi+24h], edx
.text:004198EB                 mov     ecx, [esp+44h]
.text:004198EF                 mov     esi, edi
.text:004198F1                 mov     [esp+8], esi
.text:004198F5                 mov     edx, [esp+40h]
.text:004198F9                 xor     edi, edi
.text:004198FB                 mov     [esp+0Ch], edi
.text:004198FF                 mov     [esp+4], ecx
.text:00419903                 mov     [esp], edx
.text:00419906                 call    sub_41F730
.text:0041990B                 mov     ebx, [esp+8D4h]
.text:00419912                 mov     [ebx+28h], eax
.text:00419915                 mov     [ebx+2Ch], edx
.text:00419918                 mov     ecx, [esp+4Ch]
.text:0041991C                 mov     [esp+8], esi
.text:00419920                 mov     edx, [esp+48h]
.text:00419924                 mov     [esp+0Ch], edi
.text:00419928                 mov     [esp+4], ecx
.text:0041992C                 mov     [esp], edx
.text:0041992F                 call    sub_41F730
.text:00419934                 mov     ebx, [esp+8D4h]
.text:0041993B                 mov     [ebx+30h], eax
.text:0041993E                 mov     [ebx+34h], edx
.text:00419941                 mov     ecx, [esp+3Ch]
.text:00419945                 mov     [esp+8], esi
.text:00419949                 mov     edx, [esp+38h]
.text:0041994D                 mov     [esp+0Ch], edi
.text:00419951                 mov     [esp+4], ecx
.text:00419955                 mov     [esp], edx
.text:00419958                 call    sub_41F730
.text:0041995D                 mov     edx, [esp+8D4h]
.text:00419964                 lea     ecx, [esp+0B0h]
.text:0041996B                 mov     [edx+38h], eax
.text:0041996E                 mov     esi, [esp+58h]
.text:00419972                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00419979                 mov     [edx+110h], esi
.text:0041997F                 mov     esi, edx
.text:00419981                 add     esi, 4Ch ; 'L'
.text:00419984                 movzx   ebx, word ptr [esp+56h]
.text:00419989                 movzx   edi, word ptr [esp+54h]
.text:0041998E                 mov     [edx+3Ch], ebx
.text:00419991                 lea     ebx, [esp+4B0h]
.text:00419998                 mov     [edx+40h], edi
.text:0041999B                 mov     [esp+4], ecx
.text:0041999F                 mov     dword ptr [esp+8], 10h
.text:004199A7                 mov     [esp], esi
.text:004199AA                 call    strncpy
.text:004199AF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004199B7                 mov     edi, [esp+8D4h]
.text:004199BE                 mov     [esp+4], ebx
.text:004199C2                 add     edi, 5Ch ; '\'
.text:004199C5                 mov     [esp], edi
.text:004199C8                 call    strncpy
.text:004199CD                 mov     [esp+4], ebp
.text:004199D1                 mov     ebp, [esp+8D4h]
.text:004199D8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004199E0                 add     ebp, 0B6h ; '¶'
.text:004199E6                 mov     [esp], ebp
.text:004199E9                 call    strncpy
.text:004199EE                 xor     eax, eax
.text:004199F0
.text:004199F0 loc_4199F0:                             ; CODE XREF: .text:00419B2C↓j
.text:004199F0                 add     esp, 8BCh
.text:004199F6                 pop     ebx
.text:004199F7                 pop     esi
.text:004199F8                 pop     edi
.text:004199F9                 pop     ebp
.text:004199FA                 retn
.text:004199FA ; ---------------------------------------------------------------------------
.text:004199FB                 align 10h
.text:00419A00
.text:00419A00 loc_419A00:                             ; CODE XREF: .text:00419844↑j
.text:00419A00                 mov     dword ptr [esp+4], 41959Dh
.text:00419A08                 lea     eax, [esp+0B0h]
.text:00419A0F                 mov     [esp], eax
.text:00419A12                 call    _stricmp
.text:00419A17                 test    eax, eax
.text:00419A19                 jnz     short loc_419A2D
.text:00419A1B                 mov     edx, [esp+8D4h]
.text:00419A22                 mov     dword ptr [edx], 4008h
.text:00419A28                 jmp     loc_419857
.text:00419A2D ; ---------------------------------------------------------------------------
.text:00419A2D
.text:00419A2D loc_419A2D:                             ; CODE XREF: .text:00419A19↑j
.text:00419A2D                 mov     dword ptr [esp+4], 4195A3h
.text:00419A35                 lea     ecx, [esp+0B0h]
.text:00419A3C                 mov     [esp], ecx
.text:00419A3F                 call    _stricmp
.text:00419A44                 test    eax, eax
.text:00419A46                 jnz     short loc_419A5A
.text:00419A48                 mov     ebx, [esp+8D4h]
.text:00419A4F                 mov     dword ptr [ebx], 4006h
.text:00419A55                 jmp     loc_419857
.text:00419A5A ; ---------------------------------------------------------------------------
.text:00419A5A
.text:00419A5A loc_419A5A:                             ; CODE XREF: .text:00419A46↑j
.text:00419A5A                 mov     dword ptr [esp+4], 4195A7h
.text:00419A62                 lea     eax, [esp+0B0h]
.text:00419A69                 mov     [esp], eax
.text:00419A6C                 call    _stricmp
.text:00419A71                 test    eax, eax
.text:00419A73                 mov     esi, [esp+8D4h]
.text:00419A7A                 setnz   cl
.text:00419A7D                 movzx   edx, cl
.text:00419A80                 dec     edx
.text:00419A81                 and     edx, 4000h
.text:00419A87                 mov     [esi], edx
.text:00419A89                 jmp     loc_419857
.text:00419A89 ; ---------------------------------------------------------------------------
.text:00419A8E                 align 10h
.text:00419A90
.text:00419A90 loc_419A90:                             ; CODE XREF: .text:004197AA↑j
.text:00419A90                 mov     edi, [esp+84h]
.text:00419A97                 mov     eax, 1
.text:00419A9C                 mov     edx, [esp+88h]
.text:00419AA3                 mov     ecx, [esp+8Ch]
.text:00419AAA                 mov     ebx, [esp+90h]
.text:00419AB1                 mov     [esp+34h], edi
.text:00419AB5                 mov     [esp+30h], edx
.text:00419AB9                 mov     [esp+2Ch], ecx
.text:00419ABD                 mov     [esi], ebx
.text:00419ABF                 jmp     loc_4197C0
.text:00419AC4 ; ---------------------------------------------------------------------------
.text:00419AC4
.text:00419AC4 loc_419AC4:                             ; CODE XREF: .text:004196D6↑j
.text:00419AC4                 mov     [esp+10h], esi
.text:00419AC8                 lea     eax, [esp+2Ch]
.text:00419ACC                 lea     esi, [esp+30h]
.text:00419AD0                 mov     [esp+0Ch], eax
.text:00419AD4                 lea     edi, [esp+34h]
.text:00419AD8                 mov     [esp+8], esi
.text:00419ADC                 mov     [esp+4], edi
.text:00419AE0
.text:00419AE0 loc_419AE0:                             ; CODE XREF: .text:00419B0C↓j
.text:00419AE0                 mov     [esp], ebp
.text:00419AE3                 call    GetDiskFreeSpaceA
.text:00419AE8                 sub     esp, 14h
.text:00419AEB                 jmp     loc_4197C0
.text:00419AF0 ; ---------------------------------------------------------------------------
.text:00419AF0
.text:00419AF0 loc_419AF0:                             ; CODE XREF: .text:004196BF↑j
.text:00419AF0                 mov     [esp+10h], esi
.text:00419AF4                 lea     ebx, [esp+2Ch]
.text:00419AF8                 lea     eax, [esp+30h]
.text:00419AFC                 mov     [esp+0Ch], ebx
.text:00419B00                 lea     esi, [esp+34h]
.text:00419B04                 mov     [esp+8], eax
.text:00419B08                 mov     [esp+4], esi
.text:00419B0C                 jmp     short loc_419AE0
.text:00419B0E ; ---------------------------------------------------------------------------
.text:00419B0E
.text:00419B0E loc_419B0E:                             ; CODE XREF: .text:00419677↑j
.text:00419B0E                 mov     [esp], edi
.text:00419B11                 call    FreeLibrary
.text:00419B16                 sub     esp, 4
.text:00419B19                 call    sub_41ACA0
.text:00419B1E                 mov     esi, eax
.text:00419B20                 call    _errno
.text:00419B25                 mov     [eax], esi
.text:00419B27
.text:00419B27 loc_419B27:                             ; CODE XREF: .text:00419B47↓j
.text:00419B27                 mov     eax, 0FFFFFFFFh
.text:00419B2C                 jmp     loc_4199F0
.text:00419B31 ; ---------------------------------------------------------------------------
.text:00419B31
.text:00419B31 loc_419B31:                             ; CODE XREF: .text:004195F1↑j
.text:00419B31                 mov     [esp], edi
.text:00419B34                 call    FreeLibrary
.text:00419B39                 sub     esp, 4
.text:00419B3C                 call    _errno
.text:00419B41                 mov     dword ptr [eax], 2
.text:00419B47                 jmp     short loc_419B27
.text:00419B47 ; ---------------------------------------------------------------------------
.text:00419B49                 align 10h
.text:00419B50
.text:00419B50 ; =============== S U B R O U T I N E =======================================
.text:00419B50
.text:00419B50
.text:00419B50 ; int __cdecl sub_419B50(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00419B50 sub_419B50      proc near               ; CODE XREF: sub_416C20+2C7↑p
.text:00419B50                                         ; .text:0041725A↑p
.text:00419B50
.text:00419B50 lpFileName      = dword ptr -9Ch
.text:00419B50 dwDesiredAccess = dword ptr -98h
.text:00419B50 dwShareMode     = dword ptr -94h
.text:00419B50 lpSecurityAttributes= dword ptr -90h
.text:00419B50 dwCreationDisposition= dword ptr -8Ch
.text:00419B50 dwFlagsAndAttributes= dword ptr -88h
.text:00419B50 hTemplateFile   = dword ptr -84h
.text:00419B50 lpOverlapped    = dword ptr -80h
.text:00419B50 BytesReturned   = dword ptr -70h
.text:00419B50 InBuffer        = byte ptr -6Ch
.text:00419B50 var_68          = dword ptr -68h
.text:00419B50 var_64          = dword ptr -64h
.text:00419B50 var_60          = dword ptr -60h
.text:00419B50 var_5C          = dword ptr -5Ch
.text:00419B50 var_54          = dword ptr -54h
.text:00419B50 var_4C          = byte ptr -4Ch
.text:00419B50 var_48          = dword ptr -48h
.text:00419B50 var_44          = dword ptr -44h
.text:00419B50 var_40          = dword ptr -40h
.text:00419B50 var_3C          = dword ptr -3Ch
.text:00419B50 lpRootPathName  = dword ptr -2Ch
.text:00419B50 lpSectorsPerCluster= dword ptr -28h
.text:00419B50 lpBytesPerSector= dword ptr -24h
.text:00419B50 lpNumberOfFreeClusters= dword ptr -20h
.text:00419B50 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00419B50 var_18          = dword ptr -18h
.text:00419B50 var_14          = dword ptr -14h
.text:00419B50 var_10          = dword ptr -10h
.text:00419B50 var_C           = dword ptr -0Ch
.text:00419B50 var_8           = dword ptr -8
.text:00419B50 var_4           = dword ptr -4
.text:00419B50 arg_0           = dword ptr  4
.text:00419B50 arg_4           = dword ptr  8
.text:00419B50 arg_8           = dword ptr  0Ch
.text:00419B50 arg_C           = dword ptr  10h
.text:00419B50 arg_10          = dword ptr  14h
.text:00419B50
.text:00419B50                 sub     esp, 2Ch
.text:00419B53                 mov     edx, [esp+2Ch+arg_0]
.text:00419B57                 mov     [esp+2Ch+var_10], ebx
.text:00419B5B                 mov     ebx, [esp+2Ch+arg_10]
.text:00419B5F                 mov     [esp+2Ch+var_C], esi
.text:00419B63                 mov     esi, [esp+2Ch+arg_C]
.text:00419B67                 mov     [esp+2Ch+var_8], edi
.text:00419B6B                 mov     edi, [esp+2Ch+arg_8]
.text:00419B6F                 mov     [esp+2Ch+var_4], ebp
.text:00419B73                 mov     ebp, [esp+2Ch+arg_4]
.text:00419B77                 mov     [esp+2Ch+var_14], edx
.text:00419B7B                 call    sub_41B6B0
.text:00419B80                 test    eax, eax
.text:00419B82                 jz      short loc_419BB4
.text:00419B84                 mov     [esp+2Ch+arg_10], ebx
.text:00419B88                 mov     edx, [esp+2Ch+var_14]
.text:00419B8C                 mov     ebx, [esp+2Ch+var_10]
.text:00419B90                 mov     [esp+2Ch+arg_C], esi
.text:00419B94                 mov     esi, [esp+2Ch+var_C]
.text:00419B98                 mov     [esp+2Ch+arg_8], edi
.text:00419B9C                 mov     edi, [esp+2Ch+var_8]
.text:00419BA0                 mov     [esp+2Ch+arg_4], ebp
.text:00419BA4                 mov     ebp, [esp+2Ch+var_4]
.text:00419BA8                 mov     [esp+2Ch+arg_0], edx
.text:00419BAC                 add     esp, 2Ch
.text:00419BAF                 jmp     loc_419C60
.text:00419BB4 ; ---------------------------------------------------------------------------
.text:00419BB4
.text:00419BB4 loc_419BB4:                             ; CODE XREF: sub_419B50+32↑j
.text:00419BB4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00419BB8                 mov     ecx, [esp+2Ch+var_14]
.text:00419BBC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00419BC0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00419BC4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00419BC8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00419BCB                 call    GetDiskFreeSpaceA
.text:00419BD0                 sub     esp, 14h
.text:00419BD3                 mov     ebx, [esp+2Ch+var_10]
.text:00419BD7                 mov     esi, [esp+2Ch+var_C]
.text:00419BDB                 mov     edi, [esp+2Ch+var_8]
.text:00419BDF                 mov     ebp, [esp+2Ch+var_4]
.text:00419BE3                 add     esp, 2Ch
.text:00419BE6                 retn
.text:00419BE6 ; ---------------------------------------------------------------------------
.text:00419BE7                 align 10h
.text:00419BF0
.text:00419BF0 loc_419BF0:                             ; CODE XREF: .text:0041B9CD↓p
.text:00419BF0                 sub     esp, 1Ch
.text:00419BF3                 mov     [esp+1Ch+var_4], esi
.text:00419BF7                 mov     esi, [esp+1Ch+arg_0]
.text:00419BFB                 mov     [esp+1Ch+var_8], ebx
.text:00419BFF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00419C02                 call    sub_419100
.text:00419C07                 test    eax, eax
.text:00419C09                 mov     ebx, eax
.text:00419C0B                 jz      short loc_419C20
.text:00419C0D                 cmp     byte ptr [eax], 0
.text:00419C10                 jz      short loc_419C20
.text:00419C12                 test    esi, esi
.text:00419C14                 jz      short loc_419C20
.text:00419C16                 cmp     byte ptr [esi], 0
.text:00419C19                 jnz     short loc_419C46
.text:00419C1B                 nop
.text:00419C1C                 lea     esi, [esi+0]
.text:00419C20
.text:00419C20 loc_419C20:                             ; CODE XREF: sub_419B50+BB↑j
.text:00419C20                                         ; sub_419B50+C0↑j ...
.text:00419C20                 call    _errno
.text:00419C25                 mov     dword ptr [eax], 2
.text:00419C2B                 mov     esi, 0FFFFFFFFh
.text:00419C30
.text:00419C30 loc_419C30:                             ; CODE XREF: sub_419B50+108↓j
.text:00419C30                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00419C33                 call    free
.text:00419C38                 mov     eax, esi
.text:00419C3A                 mov     ebx, [esp+1Ch+var_8]
.text:00419C3E                 mov     esi, [esp+1Ch+var_4]
.text:00419C42                 add     esp, 1Ch
.text:00419C45                 retn
.text:00419C46 ; ---------------------------------------------------------------------------
.text:00419C46
.text:00419C46 loc_419C46:                             ; CODE XREF: sub_419B50+C9↑j
.text:00419C46                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00419C49                 mov     edx, [esp+1Ch+arg_4]
.text:00419C4D                 mov     [esp+1Ch+var_18], edx
.text:00419C51                 call    near ptr loc_4195AB+5
.text:00419C56                 mov     esi, eax
.text:00419C58                 jmp     short loc_419C30
.text:00419C58 ; ---------------------------------------------------------------------------
.text:00419C5A                 align 10h
.text:00419C60
.text:00419C60 loc_419C60:                             ; CODE XREF: sub_419B50+5F↑j
.text:00419C60                 push    ebp
.text:00419C61                 push    edi
.text:00419C62                 push    esi
.text:00419C63                 push    ebx
.text:00419C64                 sub     esp, 8Ch
.text:00419C6A                 mov     ebp, [esp+9Ch+arg_0]
.text:00419C71                 call    sub_41B6B0
.text:00419C76                 test    eax, eax
.text:00419C78                 jz      short loc_419C88
.text:00419C7A                 call    sub_41B600
.text:00419C7F                 cmp     eax, 0Bh
.text:00419C82                 jle     loc_419DB0
.text:00419C88
.text:00419C88 loc_419C88:                             ; CODE XREF: sub_419B50+128↑j
.text:00419C88                 cld
.text:00419C89                 xor     eax, eax
.text:00419C8B                 lea     ebx, [esp+9Ch+InBuffer]
.text:00419C8F                 mov     ecx, 7
.text:00419C94                 mov     edi, ebx
.text:00419C96                 lea     esi, [esp+9Ch+var_4C]
.text:00419C9A                 rep stosd
.text:00419C9C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00419CA4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00419CAC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00419CB4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00419CBC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00419CC4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00419CCC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00419CD3                 call    CreateFileA
.text:00419CD8                 sub     esp, 1Ch
.text:00419CDB                 mov     edi, eax
.text:00419CDD                 cmp     eax, 0FFFFFFFFh
.text:00419CE0                 jz      short loc_419D55
.text:00419CE2                 mov     [esp+9Ch+var_68], ebp
.text:00419CE6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00419CEA                 mov     [esp+9Ch+var_5C], esi
.text:00419CEE                 mov     [esp+9Ch+var_60], 7303h
.text:00419CF6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00419CFE                 mov     [esp+9Ch+var_54], 1
.text:00419D06                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00419D0E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00419D12                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00419D1A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00419D1E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00419D26                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00419D2A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00419D32                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00419D35                 call    DeviceIoControl
.text:00419D3A                 sub     esp, 20h
.text:00419D3D                 mov     esi, eax
.text:00419D3F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00419D42                 call    CloseHandle
.text:00419D47                 sub     esp, 4
.text:00419D4A                 test    esi, esi
.text:00419D4C                 jz      short loc_419D55
.text:00419D4E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00419D53                 jz      short loc_419D70
.text:00419D55
.text:00419D55 loc_419D55:                             ; CODE XREF: sub_419B50+190↑j
.text:00419D55                                         ; sub_419B50+1FC↑j
.text:00419D55                 call    sub_41ACA0
.text:00419D5A                 mov     edi, eax
.text:00419D5C                 call    _errno
.text:00419D61                 mov     [eax], edi
.text:00419D63                 xor     eax, eax
.text:00419D65
.text:00419D65 loc_419D65:                             ; CODE XREF: sub_419B50+25A↓j
.text:00419D65                                         ; sub_419B50+297↓j
.text:00419D65                 add     esp, 8Ch
.text:00419D6B                 pop     ebx
.text:00419D6C                 pop     esi
.text:00419D6D                 pop     edi
.text:00419D6E                 pop     ebp
.text:00419D6F                 retn
.text:00419D70 ; ---------------------------------------------------------------------------
.text:00419D70
.text:00419D70 loc_419D70:                             ; CODE XREF: sub_419B50+203↑j
.text:00419D70                 mov     edx, [esp+9Ch+var_48]
.text:00419D74                 mov     eax, 1
.text:00419D79                 mov     ebx, [esp+9Ch+arg_4]
.text:00419D80                 mov     ebp, [esp+9Ch+arg_8]
.text:00419D87                 mov     ecx, [esp+9Ch+arg_C]
.text:00419D8E                 mov     [ebx], edx
.text:00419D90                 mov     edi, [esp+9Ch+var_44]
.text:00419D94                 mov     ebx, [esp+9Ch+arg_10]
.text:00419D9B                 mov     [ebp+0], edi
.text:00419D9E                 mov     esi, [esp+9Ch+var_40]
.text:00419DA2                 mov     [ecx], esi
.text:00419DA4                 mov     edx, [esp+9Ch+var_3C]
.text:00419DA8                 mov     [ebx], edx
.text:00419DAA                 jmp     short loc_419D65
.text:00419DAA ; ---------------------------------------------------------------------------
.text:00419DAC                 align 10h
.text:00419DB0
.text:00419DB0 loc_419DB0:                             ; CODE XREF: sub_419B50+132↑j
.text:00419DB0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00419DB3                 mov     eax, [esp+9Ch+arg_C]
.text:00419DBA                 mov     ecx, [esp+9Ch+arg_10]
.text:00419DC1                 mov     edx, [esp+9Ch+arg_8]
.text:00419DC8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00419DCC                 mov     eax, [esp+9Ch+arg_4]
.text:00419DD3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00419DD7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00419DDB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00419DDF                 call    GetDiskFreeSpaceA
.text:00419DE4                 sub     esp, 14h
.text:00419DE7                 jmp     loc_419D65
.text:00419DE7 sub_419B50      endp ; sp-analysis failed
.text:00419DE7
.text:00419DE7 ; ---------------------------------------------------------------------------
.text:00419DEC                 align 10h
.text:00419DF0
.text:00419DF0 ; =============== S U B R O U T I N E =======================================
.text:00419DF0
.text:00419DF0
.text:00419DF0 ; int __cdecl sub_419DF0(int, LPCSTR lpMultiByteStr, int, int)
.text:00419DF0 sub_419DF0      proc near               ; CODE XREF: sub_419FB0+E8↓p
.text:00419DF0
.text:00419DF0 var_254         = dword ptr -254h
.text:00419DF0 lpFileName      = dword ptr -24Ch
.text:00419DF0 dwFileAttributes= dword ptr -248h
.text:00419DF0 dwClsContext    = dword ptr -244h
.text:00419DF0 riid            = dword ptr -240h
.text:00419DF0 ppv             = dword ptr -23Ch
.text:00419DF0 cchWideChar     = dword ptr -238h
.text:00419DF0 var_22C         = dword ptr -22Ch
.text:00419DF0 var_224         = dword ptr -224h
.text:00419DF0 var_220         = dword ptr -220h
.text:00419DF0 WideCharStr     = word ptr -21Ch
.text:00419DF0 arg_0           = dword ptr  4
.text:00419DF0 lpMultiByteStr  = dword ptr  8
.text:00419DF0 arg_C           = dword ptr  10h
.text:00419DF0
.text:00419DF0                 push    edi
.text:00419DF1                 push    esi
.text:00419DF2                 push    ebx
.text:00419DF3                 sub     esp, 240h
.text:00419DF9                 mov     edi, [esp+24Ch+lpMultiByteStr]
.text:00419E00                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419E03                 call    GetFileAttributesA
.text:00419E08                 sub     esp, 4
.text:00419E0B                 cmp     eax, 0FFFFFFFFh
.text:00419E0E                 jz      short loc_419E2A
.text:00419E10                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419E13                 and     eax, 0FFFFFFFEh
.text:00419E16                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:00419E1A                 call    SetFileAttributesA
.text:00419E1F                 sub     esp, 8
.text:00419E22                 test    eax, eax
.text:00419E24                 jz      loc_419F96
.text:00419E2A
.text:00419E2A loc_419E2A:                             ; CODE XREF: sub_419DF0+1E↑j
.text:00419E2A                                         ; sub_419DF0+1AE↓j
.text:00419E2A                 mov     [esp+24Ch+lpFileName], 0 ; pvReserved
.text:00419E31                 call    OleInitialize
.text:00419E36                 sub     esp, 4
.text:00419E39                 cmp     eax, 1
.text:00419E3C                 ja      loc_419F7C
.text:00419E42                 mov     [esp+24Ch+riid], offset riid ; riid
.text:00419E4A                 lea     ecx, [esp+24Ch+var_220]
.text:00419E4E                 mov     [esp+24Ch+ppv], ecx ; ppv
.text:00419E52                 mov     [esp+24Ch+dwClsContext], 1 ; dwClsContext
.text:00419E5A                 mov     [esp+24Ch+dwFileAttributes], 0 ; pUnkOuter
.text:00419E62                 mov     [esp+24Ch+lpFileName], offset rclsid ; rclsid
.text:00419E69                 call    CoCreateInstance
.text:00419E6E                 sub     esp, 14h
.text:00419E71                 test    eax, eax
.text:00419E73                 js      loc_419F7C
.text:00419E79                 mov     ebx, [esp+24Ch+var_220]
.text:00419E7D                 mov     edx, [esp+24Ch+arg_0]
.text:00419E84                 mov     esi, [ebx]
.text:00419E86                 mov     [esp+24Ch+dwFileAttributes], edx
.text:00419E8A                 mov     [esp+24Ch+lpFileName], ebx
.text:00419E8D                 call    dword ptr [esi+50h]
.text:00419E90                 sub     esp, 8
.text:00419E93                 mov     ebx, dword ptr [esp+248h+WideCharStr]
.text:00419E97                 mov     ecx, [esp+248h+arg_C]
.text:00419E9E                 mov     esi, [ebx]
.text:00419EA0                 mov     [esp+248h+dwClsContext], ecx
.text:00419EA4                 mov     [esp+248h+dwFileAttributes], ebx
.text:00419EA7                 call    dword ptr [esi+1Ch]
.text:00419EAA                 sub     esp, 8
.text:00419EAD                 mov     ecx, dword ptr [esp+248h+WideCharStr]
.text:00419EB1                 lea     edx, [esp+248h+var_220]
.text:00419EB5                 mov     ebx, [ecx]
.text:00419EB7                 mov     [esp+248h+riid], edx
.text:00419EBB                 mov     [esp+248h+dwClsContext], offset dword_41ED40
.text:00419EC3                 mov     [esp+248h+dwFileAttributes], ecx
.text:00419EC6                 call    dword ptr [ebx]
.text:00419EC8                 sub     esp, 0Ch
.text:00419ECB                 test    eax, eax
.text:00419ECD                 js      loc_419F7C
.text:00419ED3                 call    AreFileApisANSI
.text:00419ED8                 mov     [esp+24Ch+cchWideChar], 104h ; cchWideChar
.text:00419EE0                 test    eax, eax
.text:00419EE2                 lea     esi, [esp+24Ch+WideCharStr]
.text:00419EE6                 setz    dl
.text:00419EE9                 mov     [esp+24Ch+ppv], esi ; lpWideCharStr
.text:00419EED                 mov     [esp+24Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00419EF5                 mov     [esp+24Ch+dwClsContext], edi ; lpMultiByteStr
.text:00419EF9                 movzx   ebx, dl
.text:00419EFC                 mov     [esp+24Ch+dwFileAttributes], 0 ; dwFlags
.text:00419F04                 mov     [esp+24Ch+lpFileName], ebx ; CodePage
.text:00419F07                 call    MultiByteToWideChar
.text:00419F0C                 sub     esp, 18h
.text:00419F0F                 test    eax, eax
.text:00419F11                 js      short loc_419F7C
.text:00419F13                 mov     ecx, [esp+24Ch+var_224]
.text:00419F17                 mov     ebx, [ecx]
.text:00419F19                 mov     [esp+24Ch+dwFileAttributes], esi
.text:00419F1D                 mov     [esp+24Ch+lpFileName], ecx
.text:00419F20                 mov     [esp+24Ch+dwClsContext], 1
.text:00419F28                 call    dword ptr [ebx+18h]
.text:00419F2B                 sub     esp, 0Ch
.text:00419F2E                 mov     esi, eax
.text:00419F30                 mov     edx, [esp+254h+var_22C]
.text:00419F34                 mov     ecx, [edx]
.text:00419F36                 mov     [esp+254h+var_254], edx
.text:00419F39                 call    dword ptr [ecx+8]
.text:00419F3C                 sub     esp, 4
.text:00419F3F                 mov     ebx, [esp+24Ch+var_220]
.text:00419F43                 mov     ecx, [ebx]
.text:00419F45                 mov     [esp+24Ch+lpFileName], ebx
.text:00419F48                 call    dword ptr [ecx+8]
.text:00419F4B                 sub     esp, 4
.text:00419F4E                 call    CoUninitialize
.text:00419F53                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419F56                 call    GetFileAttributesA
.text:00419F5B                 sub     esp, 4
.text:00419F5E                 or      eax, 1
.text:00419F61                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:00419F65                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419F68                 call    SetFileAttributesA
.text:00419F6D                 sub     esp, 8
.text:00419F70                 mov     eax, esi
.text:00419F72
.text:00419F72 loc_419F72:                             ; CODE XREF: sub_419DF0+1A4↓j
.text:00419F72                 add     esp, 240h
.text:00419F78                 pop     ebx
.text:00419F79                 pop     esi
.text:00419F7A                 pop     edi
.text:00419F7B                 retn
.text:00419F7C ; ---------------------------------------------------------------------------
.text:00419F7C
.text:00419F7C loc_419F7C:                             ; CODE XREF: sub_419DF0+4C↑j
.text:00419F7C                                         ; sub_419DF0+83↑j ...
.text:00419F7C                 call    sub_41ACA0
.text:00419F81                 mov     edi, eax
.text:00419F83                 call    _errno
.text:00419F88                 mov     [eax], edi
.text:00419F8A                 call    CoUninitialize
.text:00419F8F                 mov     eax, 0FFFFFFFFh
.text:00419F94                 jmp     short loc_419F72
.text:00419F96 ; ---------------------------------------------------------------------------
.text:00419F96
.text:00419F96 loc_419F96:                             ; CODE XREF: sub_419DF0+34↑j
.text:00419F96                 mov     [esp+24Ch+lpFileName], edi
.text:00419F99                 call    sub_41C770
.text:00419F9E                 jmp     loc_419E2A
.text:00419F9E sub_419DF0      endp
.text:00419F9E
.text:00419F9E ; ---------------------------------------------------------------------------
.text:00419FA3 ; const char aLnk_1[]
.text:00419FA3 aLnk_1          db '.lnk',0             ; DATA XREF: sub_419FB0+7F↓o
.text:00419FA3                                         ; sub_419FB0:loc_41A03F↓o
.text:00419FA8                 align 10h
.text:00419FB0
.text:00419FB0 ; =============== S U B R O U T I N E =======================================
.text:00419FB0
.text:00419FB0
.text:00419FB0 ; int __cdecl sub_419FB0(char *String, char *)
.text:00419FB0 sub_419FB0      proc near               ; CODE XREF: sub_403270+39A↑p
.text:00419FB0                                         ; sub_403270+980↑p
.text:00419FB0
.text:00419FB0 Str             = dword ptr -2Ch
.text:00419FB0 Source          = dword ptr -28h
.text:00419FB0 var_24          = dword ptr -24h
.text:00419FB0 Destination     = dword ptr -18h
.text:00419FB0 Block           = dword ptr -14h
.text:00419FB0 String          = dword ptr  4
.text:00419FB0 arg_4           = dword ptr  8
.text:00419FB0
.text:00419FB0                 push    ebp
.text:00419FB1                 push    edi
.text:00419FB2                 push    esi
.text:00419FB3                 push    ebx
.text:00419FB4                 sub     esp, 1Ch
.text:00419FB7                 mov     ebp, [esp+2Ch+String]
.text:00419FBB                 mov     ebx, [esp+2Ch+arg_4]
.text:00419FBF                 mov     [esp+2Ch+Str], ebp ; LPCSTR
.text:00419FC2                 call    sub_41ACF0
.text:00419FC7                 mov     [esp+2Ch+Block], eax
.text:00419FCB                 mov     edx, [esp+2Ch+Block]
.text:00419FCF                 mov     eax, 0FFFFFFFFh
.text:00419FD4                 test    edx, edx
.text:00419FD6                 jz      loc_41A0C1
.text:00419FDC                 mov     [esp+2Ch+Str], ebx ; Str
.text:00419FDF                 call    strlen
.text:00419FE4                 add     eax, 5
.text:00419FE7                 mov     [esp+2Ch+Str], eax ; Size
.text:00419FEA                 call    malloc
.text:00419FEF                 mov     [esp+2Ch+Destination], eax
.text:00419FF3                 mov     ecx, [esp+2Ch+Destination]
.text:00419FF7                 mov     eax, 0FFFFFFFFh
.text:00419FFC                 test    ecx, ecx
.text:00419FFE                 jz      loc_41A0C1
.text:0041A004                 mov     [esp+2Ch+Source], ebx ; Source
.text:0041A008                 mov     edx, [esp+2Ch+Destination]
.text:0041A00C                 mov     [esp+2Ch+Str], edx ; Destination
.text:0041A00F                 call    strcpy
.text:0041A014                 mov     [esp+2Ch+Source], 2Eh ; '.' ; Ch
.text:0041A01C                 mov     eax, [esp+2Ch+Destination]
.text:0041A020                 mov     [esp+2Ch+Str], eax ; Str
.text:0041A023                 call    strrchr
.text:0041A028                 test    eax, eax
.text:0041A02A                 mov     esi, eax
.text:0041A02C                 jz      short loc_41A03F
.text:0041A02E                 cld
.text:0041A02F                 mov     ebx, offset aLnk_1 ; ".lnk"
.text:0041A034                 mov     ecx, 5
.text:0041A039                 mov     edi, ebx
.text:0041A03B                 repe cmpsb
.text:0041A03D                 jz      short loc_41A053
.text:0041A03F
.text:0041A03F loc_41A03F:                             ; CODE XREF: sub_419FB0+7C↑j
.text:0041A03F                 mov     [esp+2Ch+Source], offset aLnk_1 ; ".lnk"
.text:0041A047                 mov     esi, [esp+2Ch+Destination]
.text:0041A04B                 mov     [esp+2Ch+Str], esi ; Destination
.text:0041A04E                 call    strcat
.text:0041A053
.text:0041A053 loc_41A053:                             ; CODE XREF: sub_419FB0+8D↑j
.text:0041A053                 mov     esi, [esp+2Ch+Block]
.text:0041A057                 mov     [esp+2Ch+Str], esi
.text:0041A05A                 call    sub_418880
.text:0041A05F                 mov     [esp+2Ch+Block], eax
.text:0041A063                 mov     ebx, [esp+2Ch+Destination]
.text:0041A067                 mov     [esp+2Ch+Str], ebx
.text:0041A06A                 call    sub_418880
.text:0041A06F                 mov     [esp+2Ch+Destination], eax
.text:0041A073                 mov     [esp+2Ch+Str], ebp ; String
.text:0041A076                 call    _strdup
.text:0041A07B                 mov     [esp+2Ch+Str], eax
.text:0041A07E                 call    sub_418800
.text:0041A083                 mov     [esp+2Ch+var_24], eax ; int
.text:0041A087                 mov     ebp, eax
.text:0041A089                 mov     edx, [esp+2Ch+Block]
.text:0041A08D                 mov     eax, [esp+2Ch+Destination]
.text:0041A091                 mov     [esp+2Ch+Str], edx ; int
.text:0041A094                 mov     [esp+2Ch+Source], eax ; lpMultiByteStr
.text:0041A098                 call    sub_419DF0
.text:0041A09D                 mov     ecx, [esp+2Ch+Block]
.text:0041A0A1                 mov     esi, eax
.text:0041A0A3                 mov     [esp+2Ch+Str], ecx ; Block
.text:0041A0A6                 call    free
.text:0041A0AB                 mov     edi, [esp+2Ch+Destination]
.text:0041A0AF                 mov     [esp+2Ch+Str], edi ; Block
.text:0041A0B2                 call    free
.text:0041A0B7                 mov     [esp+2Ch+Str], ebp ; Block
.text:0041A0BA                 call    free
.text:0041A0BF                 mov     eax, esi
.text:0041A0C1
.text:0041A0C1 loc_41A0C1:                             ; CODE XREF: sub_419FB0+26↑j
.text:0041A0C1                                         ; sub_419FB0+4E↑j
.text:0041A0C1                 add     esp, 1Ch
.text:0041A0C4                 pop     ebx
.text:0041A0C5                 pop     esi
.text:0041A0C6                 pop     edi
.text:0041A0C7                 pop     ebp
.text:0041A0C8                 retn
.text:0041A0C8 sub_419FB0      endp
.text:0041A0C8
.text:0041A0C8 ; ---------------------------------------------------------------------------
.text:0041A0C9                 align 10h
.text:0041A0D0
.text:0041A0D0 ; =============== S U B R O U T I N E =======================================
.text:0041A0D0
.text:0041A0D0
.text:0041A0D0 ; int __cdecl sub_41A0D0(LPCSTR)
.text:0041A0D0 sub_41A0D0      proc near               ; CODE XREF: sub_403270+F98↑p
.text:0041A0D0                                         ; sub_403270+1136↑p ...
.text:0041A0D0
.text:0041A0D0 lpFileName      = dword ptr -1Ch
.text:0041A0D0 AccessMode      = dword ptr -18h
.text:0041A0D0 var_8           = dword ptr -8
.text:0041A0D0 var_4           = dword ptr -4
.text:0041A0D0 arg_0           = dword ptr  4
.text:0041A0D0
.text:0041A0D0                 sub     esp, 1Ch
.text:0041A0D3                 mov     [esp+1Ch+var_8], ebx
.text:0041A0D7                 mov     ebx, [esp+1Ch+arg_0]
.text:0041A0DB                 mov     [esp+1Ch+var_4], esi
.text:0041A0DF                 test    ebx, ebx
.text:0041A0E1                 jz      loc_41A172
.text:0041A0E7                 call    _errno
.text:0041A0EC                 mov     esi, [eax]
.text:0041A0EE                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:0041A0F6                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0041A0F9                 call    sub_41A940
.text:0041A0FE                 test    eax, eax
.text:0041A100                 jnz     short loc_41A160
.text:0041A102
.text:0041A102 loc_41A102:                             ; CODE XREF: sub_41A0D0+A0↓j
.text:0041A102                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0041A10A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0041A10D                 call    sub_41A940
.text:0041A112                 test    eax, eax
.text:0041A114                 jz      short loc_41A151
.text:0041A116                 call    _errno
.text:0041A11B                 mov     [eax], esi
.text:0041A11D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0041A120                 call    DeleteFileA
.text:0041A125                 sub     esp, 4
.text:0041A128                 xor     edx, edx
.text:0041A12A                 test    eax, eax
.text:0041A12C                 jz      short loc_41A13C
.text:0041A12E
.text:0041A12E loc_41A12E:                             ; CODE XREF: sub_41A0D0+7F↓j
.text:0041A12E                 mov     ebx, [esp+1Ch+var_8]
.text:0041A132                 mov     eax, edx
.text:0041A134                 mov     esi, [esp+1Ch+var_4]
.text:0041A138                 add     esp, 1Ch
.text:0041A13B                 retn
.text:0041A13C ; ---------------------------------------------------------------------------
.text:0041A13C
.text:0041A13C loc_41A13C:                             ; CODE XREF: sub_41A0D0+5C↑j
.text:0041A13C                 call    sub_41ACA0
.text:0041A141                 mov     esi, eax
.text:0041A143                 call    _errno
.text:0041A148                 mov     [eax], esi
.text:0041A14A
.text:0041A14A loc_41A14A:                             ; CODE XREF: sub_41A0D0+8C↓j
.text:0041A14A                                         ; sub_41A0D0+AD↓j
.text:0041A14A                 mov     edx, 0FFFFFFFFh
.text:0041A14F                 jmp     short loc_41A12E
.text:0041A151 ; ---------------------------------------------------------------------------
.text:0041A151
.text:0041A151 loc_41A151:                             ; CODE XREF: sub_41A0D0+44↑j
.text:0041A151                 call    _errno
.text:0041A156                 mov     dword ptr [eax], 15h
.text:0041A15C                 jmp     short loc_41A14A
.text:0041A15C ; ---------------------------------------------------------------------------
.text:0041A15E                 align 10h
.text:0041A160
.text:0041A160 loc_41A160:                             ; CODE XREF: sub_41A0D0+30↑j
.text:0041A160                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:0041A168                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0041A16B                 call    _chmod_0
.text:0041A170                 jmp     short loc_41A102
.text:0041A172 ; ---------------------------------------------------------------------------
.text:0041A172
.text:0041A172 loc_41A172:                             ; CODE XREF: sub_41A0D0+11↑j
.text:0041A172                 call    _errno
.text:0041A177                 mov     dword ptr [eax], 16h
.text:0041A17D                 jmp     short loc_41A14A
.text:0041A17D sub_41A0D0      endp
.text:0041A17D
.text:0041A17D ; ---------------------------------------------------------------------------
.text:0041A17F                 align 10h
.text:0041A180
.text:0041A180 ; =============== S U B R O U T I N E =======================================
.text:0041A180
.text:0041A180
.text:0041A180 ; int __cdecl sub_41A180(char *, int)
.text:0041A180 sub_41A180      proc near               ; CODE XREF: sub_40BCB0+92↑p
.text:0041A180
.text:0041A180 var_12C         = dword ptr -12Ch
.text:0041A180 lpString1       = dword ptr -128h
.text:0041A180 var_124         = dword ptr -124h
.text:0041A180 String1         = byte ptr -11Ch
.text:0041A180 var_C           = dword ptr -0Ch
.text:0041A180 var_8           = dword ptr -8
.text:0041A180 var_4           = dword ptr -4
.text:0041A180 arg_0           = dword ptr  4
.text:0041A180 arg_4           = dword ptr  8
.text:0041A180
.text:0041A180                 sub     esp, 12Ch
.text:0041A186                 mov     [esp+12Ch+var_C], ebx
.text:0041A18D                 mov     ebx, [esp+12Ch+arg_0]
.text:0041A194                 mov     [esp+12Ch+var_4], edi
.text:0041A19B                 mov     edi, [esp+12Ch+arg_4]
.text:0041A1A2                 test    ebx, ebx
.text:0041A1A4                 mov     [esp+12Ch+var_8], esi
.text:0041A1AB                 jz      short loc_41A20E
.text:0041A1AD                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0041A1B0                 call    sub_4172A0
.text:0041A1B5                 test    eax, eax
.text:0041A1B7                 jz      short loc_41A205
.text:0041A1B9                 mov     [esp+12Ch+var_124], 104h
.text:0041A1C1                 lea     esi, [esp+12Ch+String1]
.text:0041A1C5                 mov     [esp+12Ch+lpString1], esi ; lpString1
.text:0041A1C9                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0041A1CC                 call    sub_419010
.text:0041A1D1                 inc     eax
.text:0041A1D2                 mov     edx, 0FFFFFFFFh
.text:0041A1D7                 jz      short loc_41A1E7
.text:0041A1D9                 mov     [esp+12Ch+lpString1], edi ; int
.text:0041A1DD                 mov     [esp+12Ch+var_12C], esi ; LPCSTR
.text:0041A1E0
.text:0041A1E0 loc_41A1E0:                             ; CODE XREF: sub_41A180+8C↓j
.text:0041A1E0                 call    sub_41CA50
.text:0041A1E5                 mov     edx, eax
.text:0041A1E7
.text:0041A1E7 loc_41A1E7:                             ; CODE XREF: sub_41A180+57↑j
.text:0041A1E7                                         ; sub_41A180+9E↓j
.text:0041A1E7                 mov     ebx, [esp+12Ch+var_C]
.text:0041A1EE                 mov     eax, edx
.text:0041A1F0                 mov     esi, [esp+12Ch+var_8]
.text:0041A1F7                 mov     edi, [esp+12Ch+var_4]
.text:0041A1FE                 add     esp, 12Ch
.text:0041A204                 retn
.text:0041A205 ; ---------------------------------------------------------------------------
.text:0041A205
.text:0041A205 loc_41A205:                             ; CODE XREF: sub_41A180+37↑j
.text:0041A205                 mov     [esp+12Ch+lpString1], edi
.text:0041A209                 mov     [esp+12Ch+var_12C], ebx
.text:0041A20C                 jmp     short loc_41A1E0
.text:0041A20E ; ---------------------------------------------------------------------------
.text:0041A20E
.text:0041A20E loc_41A20E:                             ; CODE XREF: sub_41A180+2B↑j
.text:0041A20E                 call    _errno
.text:0041A213                 mov     dword ptr [eax], 16h
.text:0041A219                 mov     edx, 0FFFFFFFFh
.text:0041A21E                 jmp     short loc_41A1E7
.text:0041A21E sub_41A180      endp
.text:0041A21E
.text:0041A220
.text:0041A220 ; =============== S U B R O U T I N E =======================================
.text:0041A220
.text:0041A220
.text:0041A220 sub_41A220      proc near               ; CODE XREF: sub_403270+B5F↑p
.text:0041A220
.text:0041A220 arg_0           = dword ptr  4
.text:0041A220
.text:0041A220                 sub     esp, 0Ch
.text:0041A223                 mov     edx, [esp+0Ch+arg_0]
.text:0041A227                 test    edx, edx
.text:0041A229                 jz      short loc_41A240
.text:0041A22B                 call    _errno
.text:0041A230                 mov     dword ptr [eax], 16h
.text:0041A236
.text:0041A236 loc_41A236:                             ; CODE XREF: sub_41A220+2B↓j
.text:0041A236                 mov     eax, 0FFFFFFFFh
.text:0041A23B                 add     esp, 0Ch
.text:0041A23E                 retn
.text:0041A23E ; ---------------------------------------------------------------------------
.text:0041A23F                 align 10h
.text:0041A240
.text:0041A240 loc_41A240:                             ; CODE XREF: sub_41A220+9↑j
.text:0041A240                 call    _errno
.text:0041A245                 mov     dword ptr [eax], 28h ; '('
.text:0041A24B                 jmp     short loc_41A236
.text:0041A24B sub_41A220      endp
.text:0041A24B
.text:0041A24B ; ---------------------------------------------------------------------------
.text:0041A24D                 align 10h
.text:0041A250
.text:0041A250 ; =============== S U B R O U T I N E =======================================
.text:0041A250
.text:0041A250
.text:0041A250 ; int __cdecl sub_41A250(LPCSTR, char *, int)
.text:0041A250 sub_41A250      proc near               ; CODE XREF: sub_415FF0+4A↑p
.text:0041A250                                         ; sub_419540+1A↑p ...
.text:0041A250
.text:0041A250 var_13C         = dword ptr -13Ch
.text:0041A250 lpString1       = dword ptr -138h
.text:0041A250 var_134         = dword ptr -134h
.text:0041A250 String1         = byte ptr -12Ch
.text:0041A250 var_10          = dword ptr -10h
.text:0041A250 var_C           = dword ptr -0Ch
.text:0041A250 var_8           = dword ptr -8
.text:0041A250 var_4           = dword ptr -4
.text:0041A250 arg_0           = dword ptr  4
.text:0041A250 arg_4           = dword ptr  8
.text:0041A250 arg_8           = dword ptr  0Ch
.text:0041A250
.text:0041A250                 sub     esp, 13Ch
.text:0041A256                 mov     [esp+13Ch+var_10], ebx
.text:0041A25D                 mov     ebx, [esp+13Ch+arg_8]
.text:0041A264                 mov     [esp+13Ch+var_C], esi
.text:0041A26B                 mov     esi, [esp+13Ch+arg_4]
.text:0041A272                 mov     [esp+13Ch+var_8], edi
.text:0041A279                 mov     edi, [esp+13Ch+arg_0]
.text:0041A280                 mov     [esp+13Ch+var_4], ebp
.text:0041A287                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041A28B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041A28F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041A292                 call    sub_418280
.text:0041A297                 cmp     eax, 0FFFFFFFFh
.text:0041A29A                 mov     edx, eax
.text:0041A29C                 jz      short loc_41A2AE
.text:0041A29E                 mov     ecx, [ebx]
.text:0041A2A0                 and     ecx, 0F000h
.text:0041A2A6                 cmp     ecx, 0A000h
.text:0041A2AC                 jz      short loc_41A2D3
.text:0041A2AE
.text:0041A2AE loc_41A2AE:                             ; CODE XREF: sub_41A250+4C↑j
.text:0041A2AE                                         ; sub_41A250+A1↓j ...
.text:0041A2AE                 mov     ebx, [esp+13Ch+var_10]
.text:0041A2B5                 mov     eax, edx
.text:0041A2B7                 mov     esi, [esp+13Ch+var_C]
.text:0041A2BE                 mov     edi, [esp+13Ch+var_8]
.text:0041A2C5                 mov     ebp, [esp+13Ch+var_4]
.text:0041A2CC                 add     esp, 13Ch
.text:0041A2D2                 retn
.text:0041A2D3 ; ---------------------------------------------------------------------------
.text:0041A2D3
.text:0041A2D3 loc_41A2D3:                             ; CODE XREF: sub_41A250+5C↑j
.text:0041A2D3                 mov     [esp+13Ch+var_134], 104h
.text:0041A2DB                 lea     ebp, [esp+13Ch+String1]
.text:0041A2DF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0041A2E3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0041A2E6                 call    sub_419010
.text:0041A2EB                 inc     eax
.text:0041A2EC                 mov     edx, 0FFFFFFFFh
.text:0041A2F1                 jz      short loc_41A2AE
.text:0041A2F3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041A2F7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041A2FB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041A2FE                 call    sub_418280
.text:0041A303                 mov     edx, eax
.text:0041A305                 jmp     short loc_41A2AE
.text:0041A305 sub_41A250      endp
.text:0041A305
.text:0041A305 ; ---------------------------------------------------------------------------
.text:0041A307                 align 10h
.text:0041A310
.text:0041A310 ; =============== S U B R O U T I N E =======================================
.text:0041A310
.text:0041A310
.text:0041A310 sub_41A310      proc near               ; CODE XREF: sub_401EE0+A8↑p
.text:0041A310                                         ; sub_415FF0+F4↑p ...
.text:0041A310                 xor     eax, eax
.text:0041A312                 retn
.text:0041A312 sub_41A310      endp
.text:0041A312
.text:0041A312 ; ---------------------------------------------------------------------------
.text:0041A313                 align 10h
.text:0041A320
.text:0041A320 ; =============== S U B R O U T I N E =======================================
.text:0041A320
.text:0041A320
.text:0041A320 sub_41A320      proc near               ; CODE XREF: sub_405220+3EF↑p
.text:0041A320
.text:0041A320 FileHandle      = dword ptr -2Ch
.text:0041A320 Offset          = qword ptr -28h
.text:0041A320 Origin          = dword ptr -20h
.text:0041A320 var_10          = dword ptr -10h
.text:0041A320 var_C           = dword ptr -0Ch
.text:0041A320 var_8           = dword ptr -8
.text:0041A320 var_4           = dword ptr -4
.text:0041A320 arg_0           = dword ptr  4
.text:0041A320 arg_4           = qword ptr  8
.text:0041A320
.text:0041A320                 sub     esp, 2Ch
.text:0041A323                 mov     [esp+2Ch+var_4], ebp
.text:0041A327                 mov     ebp, [esp+2Ch+arg_0]
.text:0041A32B                 mov     [esp+2Ch+var_10], ebx
.text:0041A32F                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:0041A333                 mov     [esp+2Ch+var_C], esi
.text:0041A337                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0041A33B                 mov     [esp+2Ch+var_8], edi
.text:0041A33F                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0041A342                 call    _get_osfhandle
.text:0041A347                 cmp     eax, 0FFFFFFFFh
.text:0041A34A                 mov     edi, eax
.text:0041A34C                 jz      short loc_41A3B6
.text:0041A34E                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0041A351                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:0041A359                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:0041A35D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:0041A361                 call    _lseeki64
.text:0041A366                 mov     ebp, edx
.text:0041A368                 xor     eax, ebx
.text:0041A36A                 xor     ebp, esi
.text:0041A36C                 or      ebp, eax
.text:0041A36E                 jnz     short loc_41A3A9
.text:0041A370                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:0041A373                 call    SetEndOfFile
.text:0041A378                 sub     esp, 4
.text:0041A37B                 xor     edx, edx
.text:0041A37D                 test    eax, eax
.text:0041A37F                 jz      short loc_41A397
.text:0041A381
.text:0041A381 loc_41A381:                             ; CODE XREF: sub_41A320+87↓j
.text:0041A381                 mov     ebx, [esp+2Ch+var_10]
.text:0041A385                 mov     eax, edx
.text:0041A387                 mov     esi, [esp+2Ch+var_C]
.text:0041A38B                 mov     edi, [esp+2Ch+var_8]
.text:0041A38F                 mov     ebp, [esp+2Ch+var_4]
.text:0041A393                 add     esp, 2Ch
.text:0041A396                 retn
.text:0041A397 ; ---------------------------------------------------------------------------
.text:0041A397
.text:0041A397 loc_41A397:                             ; CODE XREF: sub_41A320+5F↑j
.text:0041A397                 call    _errno
.text:0041A39C                 mov     dword ptr [eax], offset sub_41ACA0
.text:0041A3A2
.text:0041A3A2 loc_41A3A2:                             ; CODE XREF: sub_41A320+94↓j
.text:0041A3A2                                         ; sub_41A320+A1↓j
.text:0041A3A2                 mov     edx, 0FFFFFFFFh
.text:0041A3A7                 jmp     short loc_41A381
.text:0041A3A9 ; ---------------------------------------------------------------------------
.text:0041A3A9
.text:0041A3A9 loc_41A3A9:                             ; CODE XREF: sub_41A320+4E↑j
.text:0041A3A9                 call    _errno
.text:0041A3AE                 mov     dword ptr [eax], 16h
.text:0041A3B4                 jmp     short loc_41A3A2
.text:0041A3B6 ; ---------------------------------------------------------------------------
.text:0041A3B6
.text:0041A3B6 loc_41A3B6:                             ; CODE XREF: sub_41A320+2C↑j
.text:0041A3B6                 call    _errno
.text:0041A3BB                 mov     dword ptr [eax], 9
.text:0041A3C1                 jmp     short loc_41A3A2
.text:0041A3C1 sub_41A320      endp
.text:0041A3C1
.text:0041A3C1 ; ---------------------------------------------------------------------------
.text:0041A3C3                 align 10h
.text:0041A3D0
.text:0041A3D0 ; =============== S U B R O U T I N E =======================================
.text:0041A3D0
.text:0041A3D0
.text:0041A3D0 sub_41A3D0      proc near               ; CODE XREF: sub_403270+9BD↑p
.text:0041A3D0
.text:0041A3D0 arg_0           = dword ptr  4
.text:0041A3D0
.text:0041A3D0                 sub     esp, 0Ch
.text:0041A3D3                 mov     edx, [esp+0Ch+arg_0]
.text:0041A3D7                 test    edx, edx
.text:0041A3D9                 jz      short loc_41A3E1
.text:0041A3DB                 xor     eax, eax
.text:0041A3DD
.text:0041A3DD loc_41A3DD:                             ; CODE XREF: sub_41A3D0+21↓j
.text:0041A3DD                 add     esp, 0Ch
.text:0041A3E0                 retn
.text:0041A3E1 ; ---------------------------------------------------------------------------
.text:0041A3E1
.text:0041A3E1 loc_41A3E1:                             ; CODE XREF: sub_41A3D0+9↑j
.text:0041A3E1                 call    _errno
.text:0041A3E6                 mov     dword ptr [eax], 16h
.text:0041A3EC                 mov     eax, 0FFFFFFFFh
.text:0041A3F1                 jmp     short loc_41A3DD
.text:0041A3F1 sub_41A3D0      endp
.text:0041A3F1
.text:0041A3F1 ; ---------------------------------------------------------------------------
.text:0041A3F3                 align 10h
.text:0041A400
.text:0041A400 ; =============== S U B R O U T I N E =======================================
.text:0041A400
.text:0041A400
.text:0041A400 ; int __cdecl sub_41A400(LPCSTR, LPCSTR lpFileName)
.text:0041A400 sub_41A400      proc near               ; CODE XREF: sub_403270+6EA↑p
.text:0041A400                                         ; sub_403270+E31↑p ...
.text:0041A400
.text:0041A400 lpExistingFileName= dword ptr -1Ch
.text:0041A400 lpNewFileName   = dword ptr -18h
.text:0041A400 var_8           = dword ptr -8
.text:0041A400 var_4           = dword ptr -4
.text:0041A400 arg_0           = dword ptr  4
.text:0041A400 lpFileName      = dword ptr  8
.text:0041A400
.text:0041A400                 sub     esp, 1Ch
.text:0041A403                 mov     [esp+1Ch+var_4], esi
.text:0041A407                 mov     esi, [esp+1Ch+arg_0]
.text:0041A40B                 mov     [esp+1Ch+var_8], ebx
.text:0041A40F                 mov     ebx, [esp+1Ch+lpFileName]
.text:0041A413                 test    esi, esi
.text:0041A415                 jz      short loc_41A471
.text:0041A417                 test    ebx, ebx
.text:0041A419                 jz      short loc_41A471
.text:0041A41B                 mov     [esp+1Ch+lpNewFileName], 0 ; int
.text:0041A423                 mov     [esp+1Ch+lpExistingFileName], ebx ; lpFileName
.text:0041A426                 call    sub_41A940
.text:0041A42B                 test    eax, eax
.text:0041A42D                 jz      short loc_41A467
.text:0041A42F
.text:0041A42F loc_41A42F:                             ; CODE XREF: sub_41A400+6F↓j
.text:0041A42F                 mov     [esp+1Ch+lpNewFileName], ebx ; lpNewFileName
.text:0041A433                 mov     [esp+1Ch+lpExistingFileName], esi ; lpExistingFileName
.text:0041A436                 call    MoveFileA
.text:0041A43B                 sub     esp, 8
.text:0041A43E                 xor     edx, edx
.text:0041A440                 test    eax, eax
.text:0041A442                 jz      short loc_41A452
.text:0041A444
.text:0041A444 loc_41A444:                             ; CODE XREF: sub_41A400+65↓j
.text:0041A444                 mov     ebx, [esp+1Ch+var_8]
.text:0041A448                 mov     eax, edx
.text:0041A44A                 mov     esi, [esp+1Ch+var_4]
.text:0041A44E                 add     esp, 1Ch
.text:0041A451                 retn
.text:0041A452 ; ---------------------------------------------------------------------------
.text:0041A452
.text:0041A452 loc_41A452:                             ; CODE XREF: sub_41A400+42↑j
.text:0041A452                 call    sub_41ACA0
.text:0041A457                 mov     esi, eax
.text:0041A459                 call    _errno
.text:0041A45E                 mov     [eax], esi
.text:0041A460
.text:0041A460 loc_41A460:                             ; CODE XREF: sub_41A400+7C↓j
.text:0041A460                 mov     edx, 0FFFFFFFFh
.text:0041A465                 jmp     short loc_41A444
.text:0041A467 ; ---------------------------------------------------------------------------
.text:0041A467
.text:0041A467 loc_41A467:                             ; CODE XREF: sub_41A400+2D↑j
.text:0041A467                 mov     [esp+1Ch+lpExistingFileName], ebx ; LPCSTR
.text:0041A46A                 call    sub_41A0D0
.text:0041A46F                 jmp     short loc_41A42F
.text:0041A471 ; ---------------------------------------------------------------------------
.text:0041A471
.text:0041A471 loc_41A471:                             ; CODE XREF: sub_41A400+15↑j
.text:0041A471                                         ; sub_41A400+19↑j
.text:0041A471                 call    _errno
.text:0041A476                 mov     dword ptr [eax], 16h
.text:0041A47C                 jmp     short loc_41A460
.text:0041A47C sub_41A400      endp
.text:0041A47C
.text:0041A47C ; ---------------------------------------------------------------------------
.text:0041A47E                 align 10h
.text:0041A480
.text:0041A480 ; =============== S U B R O U T I N E =======================================
.text:0041A480
.text:0041A480
.text:0041A480 sub_41A480      proc near               ; CODE XREF: sub_405220:loc_4053FF↑p
.text:0041A480
.text:0041A480 lpSystemInfo    = dword ptr -0Ch
.text:0041A480 var_4           = dword ptr -4
.text:0041A480
.text:0041A480                 sub     esp, 0Ch
.text:0041A483                 mov     [esp+0Ch+var_4], edi
.text:0041A487                 mov     edi, ds:dword_422810
.text:0041A48D                 test    edi, edi
.text:0041A48F                 mov     eax, edi
.text:0041A491                 jz      short loc_41A4A0
.text:0041A493
.text:0041A493 loc_41A493:                             ; CODE XREF: sub_41A480+48↓j
.text:0041A493                 mov     eax, [edi+4]
.text:0041A496                 mov     edi, [esp+0Ch+var_4]
.text:0041A49A                 add     esp, 0Ch
.text:0041A49D                 retn
.text:0041A49D ; ---------------------------------------------------------------------------
.text:0041A49E                 align 10h
.text:0041A4A0
.text:0041A4A0 loc_41A4A0:                             ; CODE XREF: sub_41A480+11↑j
.text:0041A4A0                 cld
.text:0041A4A1                 mov     edi, offset SystemInfo
.text:0041A4A6                 mov     ecx, 9
.text:0041A4AB                 mov     ds:dword_422810, edi
.text:0041A4B1                 rep stosd
.text:0041A4B3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0041A4BA                 call    GetSystemInfo
.text:0041A4BF                 mov     edi, ds:dword_422810
.text:0041A4C5                 sub     esp, 4
.text:0041A4C8                 jmp     short loc_41A493
.text:0041A4C8 sub_41A480      endp
.text:0041A4C8
.text:0041A4C8 ; ---------------------------------------------------------------------------
.text:0041A4CA                 align 10h
.text:0041A4D0
.text:0041A4D0 ; =============== S U B R O U T I N E =======================================
.text:0041A4D0
.text:0041A4D0
.text:0041A4D0 ; int __cdecl sub_41A4D0(LPCSTR)
.text:0041A4D0 sub_41A4D0      proc near               ; CODE XREF: sub_4066D0+187↑p
.text:0041A4D0                                         ; sub_406A40+6FC↑p
.text:0041A4D0
.text:0041A4D0 lpPathName      = dword ptr -0Ch
.text:0041A4D0 var_4           = dword ptr -4
.text:0041A4D0 arg_0           = dword ptr  4
.text:0041A4D0
.text:0041A4D0                 sub     esp, 0Ch
.text:0041A4D3                 mov     eax, [esp+0Ch+arg_0]
.text:0041A4D7                 mov     [esp+0Ch+var_4], ebx
.text:0041A4DB                 test    eax, eax
.text:0041A4DD                 jz      short loc_41A50F
.text:0041A4DF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:0041A4E2                 call    RemoveDirectoryA
.text:0041A4E7                 sub     esp, 4
.text:0041A4EA                 xor     edx, edx
.text:0041A4EC                 test    eax, eax
.text:0041A4EE                 jz      short loc_41A4FA
.text:0041A4F0
.text:0041A4F0 loc_41A4F0:                             ; CODE XREF: sub_41A4D0+3D↓j
.text:0041A4F0                 mov     ebx, [esp+0Ch+var_4]
.text:0041A4F4                 mov     eax, edx
.text:0041A4F6                 add     esp, 0Ch
.text:0041A4F9                 retn
.text:0041A4FA ; ---------------------------------------------------------------------------
.text:0041A4FA
.text:0041A4FA loc_41A4FA:                             ; CODE XREF: sub_41A4D0+1E↑j
.text:0041A4FA                 call    sub_41ACA0
.text:0041A4FF                 mov     ebx, eax
.text:0041A501                 call    _errno
.text:0041A506                 mov     [eax], ebx
.text:0041A508
.text:0041A508 loc_41A508:                             ; CODE XREF: sub_41A4D0+4A↓j
.text:0041A508                 mov     edx, 0FFFFFFFFh
.text:0041A50D                 jmp     short loc_41A4F0
.text:0041A50F ; ---------------------------------------------------------------------------
.text:0041A50F
.text:0041A50F loc_41A50F:                             ; CODE XREF: sub_41A4D0+D↑j
.text:0041A50F                 call    _errno
.text:0041A514                 mov     dword ptr [eax], 16h
.text:0041A51A                 jmp     short loc_41A508
.text:0041A51A sub_41A4D0      endp
.text:0041A51A
.text:0041A51A ; ---------------------------------------------------------------------------
.text:0041A51C                 align 10h
.text:0041A520
.text:0041A520 ; =============== S U B R O U T I N E =======================================
.text:0041A520
.text:0041A520
.text:0041A520 ; int __cdecl sub_41A520(void *)
.text:0041A520 sub_41A520      proc near               ; CODE XREF: sub_407C60+1B5↑p
.text:0041A520                                         ; sub_4080E0+100↑p ...
.text:0041A520
.text:0041A520 Block           = dword ptr -0Ch
.text:0041A520 var_4           = dword ptr -4
.text:0041A520 arg_0           = dword ptr  4
.text:0041A520
.text:0041A520                 sub     esp, 0Ch
.text:0041A523                 mov     [esp+0Ch+var_4], ebx
.text:0041A527                 mov     ebx, [esp+0Ch+arg_0]
.text:0041A52B                 test    ebx, ebx
.text:0041A52D                 jz      short loc_41A56B
.text:0041A52F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0041A532                 jz      short loc_41A559
.text:0041A534                 mov     [esp+0Ch+Block], ebx
.text:0041A537                 call    sub_41CAF0
.text:0041A53C                 mov     edx, [ebx+4]
.text:0041A53F                 mov     [esp+0Ch+Block], edx ; Block
.text:0041A542                 call    free
.text:0041A547                 mov     [esp+0Ch+Block], ebx ; Block
.text:0041A54A                 call    free
.text:0041A54F                 xor     eax, eax
.text:0041A551
.text:0041A551 loc_41A551:                             ; CODE XREF: sub_41A520+49↓j
.text:0041A551                 mov     ebx, [esp+0Ch+var_4]
.text:0041A555                 add     esp, 0Ch
.text:0041A558                 retn
.text:0041A559 ; ---------------------------------------------------------------------------
.text:0041A559
.text:0041A559 loc_41A559:                             ; CODE XREF: sub_41A520+12↑j
.text:0041A559                 call    _errno
.text:0041A55E                 mov     dword ptr [eax], 9
.text:0041A564
.text:0041A564 loc_41A564:                             ; CODE XREF: sub_41A520+56↓j
.text:0041A564                 mov     eax, 0FFFFFFFFh
.text:0041A569                 jmp     short loc_41A551
.text:0041A56B ; ---------------------------------------------------------------------------
.text:0041A56B
.text:0041A56B loc_41A56B:                             ; CODE XREF: sub_41A520+D↑j
.text:0041A56B                 call    _errno
.text:0041A570                 mov     dword ptr [eax], 16h
.text:0041A576                 jmp     short loc_41A564
.text:0041A576 sub_41A520      endp
.text:0041A576
.text:0041A576 ; ---------------------------------------------------------------------------
.text:0041A578                 align 10h
.text:0041A580 ; const char asc_41A580[2]
.text:0041A580 asc_41A580      db '\',0                ; DATA XREF: sub_41A590+D2↓o
.text:0041A582                 align 10h
.text:0041A590
.text:0041A590 ; =============== S U B R O U T I N E =======================================
.text:0041A590
.text:0041A590
.text:0041A590 ; int __cdecl sub_41A590(LPCSTR)
.text:0041A590 sub_41A590      proc near               ; CODE XREF: sub_407C60+167↑p
.text:0041A590                                         ; sub_4080E0+E↑p ...
.text:0041A590
.text:0041A590 lpFileName      = dword ptr -13Ch
.text:0041A590 Source          = dword ptr -138h
.text:0041A590 Destination     = byte ptr -12Ch
.text:0041A590 var_10          = dword ptr -10h
.text:0041A590 var_C           = dword ptr -0Ch
.text:0041A590 var_8           = dword ptr -8
.text:0041A590 var_4           = dword ptr -4
.text:0041A590 arg_0           = dword ptr  4
.text:0041A590
.text:0041A590                 sub     esp, 13Ch
.text:0041A596                 mov     [esp+13Ch+var_C], esi
.text:0041A59D                 mov     esi, [esp+13Ch+arg_0]
.text:0041A5A4                 mov     [esp+13Ch+var_10], ebx
.text:0041A5AB                 mov     [esp+13Ch+var_8], edi
.text:0041A5B2                 test    esi, esi
.text:0041A5B4                 mov     [esp+13Ch+var_4], ebp
.text:0041A5BB                 jz      short loc_41A5C2
.text:0041A5BD                 cmp     byte ptr [esi], 0
.text:0041A5C0                 jnz     short loc_41A5F2
.text:0041A5C2
.text:0041A5C2 loc_41A5C2:                             ; CODE XREF: sub_41A590+2B↑j
.text:0041A5C2                 call    _errno
.text:0041A5C7                 mov     dword ptr [eax], 2
.text:0041A5CD
.text:0041A5CD loc_41A5CD:                             ; CODE XREF: sub_41A590+139↓j
.text:0041A5CD                                         ; sub_41A590+14C↓j
.text:0041A5CD                 xor     eax, eax
.text:0041A5CF
.text:0041A5CF loc_41A5CF:                             ; CODE XREF: sub_41A590+90↓j
.text:0041A5CF                                         ; sub_41A590+A4↓j ...
.text:0041A5CF                 mov     ebx, [esp+13Ch+var_10]
.text:0041A5D6                 mov     esi, [esp+13Ch+var_C]
.text:0041A5DD                 mov     edi, [esp+13Ch+var_8]
.text:0041A5E4                 mov     ebp, [esp+13Ch+var_4]
.text:0041A5EB                 add     esp, 13Ch
.text:0041A5F1                 retn
.text:0041A5F2 ; ---------------------------------------------------------------------------
.text:0041A5F2
.text:0041A5F2 loc_41A5F2:                             ; CODE XREF: sub_41A590+30↑j
.text:0041A5F2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0041A5F5                 call    GetFileAttributesA
.text:0041A5FA                 sub     esp, 4
.text:0041A5FD                 cmp     eax, 0FFFFFFFFh
.text:0041A600                 jz      loc_41A6CE
.text:0041A606                 test    al, 10h
.text:0041A608                 jz      loc_41A6BE
.text:0041A60E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0041A615                 call    malloc
.text:0041A61A                 mov     ebx, eax
.text:0041A61C                 xor     eax, eax
.text:0041A61E                 test    ebx, ebx
.text:0041A620                 jz      short loc_41A5CF
.text:0041A622                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0041A629                 call    malloc
.text:0041A62E                 mov     edi, eax
.text:0041A630                 xor     eax, eax
.text:0041A632                 test    edi, edi
.text:0041A634                 jz      short loc_41A5CF
.text:0041A636                 mov     [esp+13Ch+Source], esi ; Source
.text:0041A63A                 lea     ebp, [esp+13Ch+Destination]
.text:0041A63E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041A641                 call    strcpy
.text:0041A646                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0041A649                 call    strlen
.text:0041A64E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0041A652                 jz      short loc_41A680
.text:0041A654                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0041A657                 call    strlen
.text:0041A65C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0041A660                 jz      short loc_41A680
.text:0041A662                 mov     [esp+13Ch+Source], offset asc_41A580 ; "\\"
.text:0041A66A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041A66D                 call    strcat
.text:0041A672                 lea     esi, [esi+0]
.text:0041A679                 lea     edi, [edi+0]
.text:0041A680
.text:0041A680 loc_41A680:                             ; CODE XREF: sub_41A590+C2↑j
.text:0041A680                                         ; sub_41A590+D0↑j
.text:0041A680                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0041A683                 call    sub_41ACF0
.text:0041A688                 mov     [esp+13Ch+lpFileName], eax
.text:0041A68B                 call    sub_418880
.text:0041A690                 mov     [edi], eax
.text:0041A692                 mov     eax, ebx
.text:0041A694                 mov     [ebx+4], edi
.text:0041A697                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0041A69D                 mov     dword ptr [ebx+8], 118h
.text:0041A6A4                 mov     dword ptr [ebx+0Ch], 118h
.text:0041A6AB                 mov     dword ptr [ebx+10h], 8
.text:0041A6B2                 mov     dword ptr [ebx+14h], 1
.text:0041A6B9                 jmp     loc_41A5CF
.text:0041A6BE ; ---------------------------------------------------------------------------
.text:0041A6BE
.text:0041A6BE loc_41A6BE:                             ; CODE XREF: sub_41A590+78↑j
.text:0041A6BE                 call    _errno
.text:0041A6C3                 mov     dword ptr [eax], 14h
.text:0041A6C9                 jmp     loc_41A5CD
.text:0041A6CE ; ---------------------------------------------------------------------------
.text:0041A6CE
.text:0041A6CE loc_41A6CE:                             ; CODE XREF: sub_41A590+70↑j
.text:0041A6CE                 call    sub_41ACA0
.text:0041A6D3                 mov     esi, eax
.text:0041A6D5                 call    _errno
.text:0041A6DA                 mov     [eax], esi
.text:0041A6DC                 jmp     loc_41A5CD
.text:0041A6DC sub_41A590      endp
.text:0041A6DC
.text:0041A6DC ; ---------------------------------------------------------------------------
.text:0041A6E1                 align 10h
.text:0041A6F0
.text:0041A6F0 ; =============== S U B R O U T I N E =======================================
.text:0041A6F0
.text:0041A6F0
.text:0041A6F0 ; int __cdecl sub_41A6F0(LPCSTR)
.text:0041A6F0 sub_41A6F0      proc near               ; CODE XREF: sub_406A40+11F↑p
.text:0041A6F0                                         ; sub_4078E0+EC↑p ...
.text:0041A6F0
.text:0041A6F0 lpPathName      = dword ptr -0Ch
.text:0041A6F0 var_4           = dword ptr -4
.text:0041A6F0 arg_0           = dword ptr  4
.text:0041A6F0
.text:0041A6F0                 sub     esp, 0Ch
.text:0041A6F3                 mov     eax, [esp+0Ch+arg_0]
.text:0041A6F7                 mov     [esp+0Ch+var_4], ebx
.text:0041A6FB                 test    eax, eax
.text:0041A6FD                 jz      short loc_41A72F
.text:0041A6FF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:0041A702                 call    SetCurrentDirectoryA
.text:0041A707                 sub     esp, 4
.text:0041A70A                 xor     edx, edx
.text:0041A70C                 test    eax, eax
.text:0041A70E                 jz      short loc_41A71A
.text:0041A710
.text:0041A710 loc_41A710:                             ; CODE XREF: sub_41A6F0+3D↓j
.text:0041A710                 mov     ebx, [esp+0Ch+var_4]
.text:0041A714                 mov     eax, edx
.text:0041A716                 add     esp, 0Ch
.text:0041A719                 retn
.text:0041A71A ; ---------------------------------------------------------------------------
.text:0041A71A
.text:0041A71A loc_41A71A:                             ; CODE XREF: sub_41A6F0+1E↑j
.text:0041A71A                 call    sub_41ACA0
.text:0041A71F                 mov     ebx, eax
.text:0041A721                 call    _errno
.text:0041A726                 mov     [eax], ebx
.text:0041A728
.text:0041A728 loc_41A728:                             ; CODE XREF: sub_41A6F0+4A↓j
.text:0041A728                 mov     edx, 0FFFFFFFFh
.text:0041A72D                 jmp     short loc_41A710
.text:0041A72F ; ---------------------------------------------------------------------------
.text:0041A72F
.text:0041A72F loc_41A72F:                             ; CODE XREF: sub_41A6F0+D↑j
.text:0041A72F                 call    _errno
.text:0041A734                 mov     dword ptr [eax], 16h
.text:0041A73A                 jmp     short loc_41A728
.text:0041A73A sub_41A6F0      endp
.text:0041A73A
.text:0041A73A ; ---------------------------------------------------------------------------
.text:0041A73C                 align 10h
.text:0041A740
.text:0041A740 ; =============== S U B R O U T I N E =======================================
.text:0041A740
.text:0041A740
.text:0041A740 sub_41A740      proc near               ; CODE XREF: sub_4076F0+4A↑p
.text:0041A740                                         ; sub_4076F0+A8↑p ...
.text:0041A740
.text:0041A740 var_1C          = dword ptr -1Ch
.text:0041A740 var_18          = dword ptr -18h
.text:0041A740 var_14          = dword ptr -14h
.text:0041A740 arg_0           = dword ptr  4
.text:0041A740 arg_4           = dword ptr  8
.text:0041A740 arg_8           = dword ptr  0Ch
.text:0041A740
.text:0041A740                 push    edi
.text:0041A741                 push    esi
.text:0041A742                 push    ebx
.text:0041A743                 sub     esp, 10h
.text:0041A746                 mov     edi, [esp+1Ch+arg_8]
.text:0041A74A                 mov     esi, [esp+1Ch+arg_0]
.text:0041A74E                 mov     ebx, [esp+1Ch+arg_4]
.text:0041A752                 cmp     edi, 0Fh
.text:0041A755                 jbe     short loc_41A7A0
.text:0041A757                 mov     ecx, esi
.text:0041A759                 neg     ecx
.text:0041A75B                 and     ecx, 3
.text:0041A75E                 sub     edi, ecx
.text:0041A760                 mov     edx, ecx
.text:0041A762                 test    ecx, ecx
.text:0041A764                 jz      short loc_41A77A
.text:0041A766                 lea     esi, [esi+0]
.text:0041A769                 lea     edi, [edi+0]
.text:0041A770
.text:0041A770 loc_41A770:                             ; CODE XREF: sub_41A740+38↓j
.text:0041A770                 movzx   ecx, byte ptr [ebx]
.text:0041A773                 inc     ebx
.text:0041A774                 mov     [esi], cl
.text:0041A776                 inc     esi
.text:0041A777                 dec     edx
.text:0041A778                 jnz     short loc_41A770
.text:0041A77A
.text:0041A77A loc_41A77A:                             ; CODE XREF: sub_41A740+24↑j
.text:0041A77A                 test    bl, 3
.text:0041A77D                 jnz     short loc_41A7C3
.text:0041A77F                 mov     [esp+1Ch+var_18], ebx
.text:0041A783                 mov     edx, edi
.text:0041A785                 shr     edx, 2
.text:0041A788                 mov     [esp+1Ch+var_14], edx
.text:0041A78C                 mov     [esp+1Ch+var_1C], esi
.text:0041A78F                 call    sub_41CB50
.text:0041A794
.text:0041A794 loc_41A794:                             ; CODE XREF: sub_41A740+98↓j
.text:0041A794                 mov     edx, edi
.text:0041A796                 and     edx, 0FFFFFFFCh
.text:0041A799                 and     edi, 3
.text:0041A79C                 add     ebx, edx
.text:0041A79E                 add     esi, edx
.text:0041A7A0
.text:0041A7A0 loc_41A7A0:                             ; CODE XREF: sub_41A740+15↑j
.text:0041A7A0                 test    edi, edi
.text:0041A7A2                 mov     edx, edi
.text:0041A7A4                 jz      short loc_41A7BA
.text:0041A7A6                 lea     esi, [esi+0]
.text:0041A7A9                 lea     edi, [edi+0]
.text:0041A7B0
.text:0041A7B0 loc_41A7B0:                             ; CODE XREF: sub_41A740+78↓j
.text:0041A7B0                 movzx   ecx, byte ptr [ebx]
.text:0041A7B3                 inc     ebx
.text:0041A7B4                 mov     [esi], cl
.text:0041A7B6                 inc     esi
.text:0041A7B7                 dec     edx
.text:0041A7B8                 jnz     short loc_41A7B0
.text:0041A7BA
.text:0041A7BA loc_41A7BA:                             ; CODE XREF: sub_41A740+64↑j
.text:0041A7BA                 add     esp, 10h
.text:0041A7BD                 mov     eax, esi
.text:0041A7BF                 pop     ebx
.text:0041A7C0                 pop     esi
.text:0041A7C1                 pop     edi
.text:0041A7C2                 retn
.text:0041A7C3 ; ---------------------------------------------------------------------------
.text:0041A7C3
.text:0041A7C3 loc_41A7C3:                             ; CODE XREF: sub_41A740+3D↑j
.text:0041A7C3                 mov     [esp+1Ch+var_18], ebx
.text:0041A7C7                 mov     ecx, edi
.text:0041A7C9                 shr     ecx, 2
.text:0041A7CC                 mov     [esp+1Ch+var_14], ecx
.text:0041A7D0                 mov     [esp+1Ch+var_1C], esi
.text:0041A7D3                 call    sub_41CC50
.text:0041A7D8                 jmp     short loc_41A794
.text:0041A7D8 sub_41A740      endp
.text:0041A7D8
.text:0041A7D8 ; ---------------------------------------------------------------------------
.text:0041A7DA                 align 10h
.text:0041A7E0
.text:0041A7E0 ; =============== S U B R O U T I N E =======================================
.text:0041A7E0
.text:0041A7E0
.text:0041A7E0 sub_41A7E0      proc near               ; CODE XREF: sub_408AE0+1BB↑p
.text:0041A7E0                                         ; sub_40ACF0+9D↑p
.text:0041A7E0
.text:0041A7E0 arg_0           = dword ptr  4
.text:0041A7E0
.text:0041A7E0                 sub     esp, 0Ch
.text:0041A7E3                 mov     edx, [esp+0Ch+arg_0]
.text:0041A7E7                 test    edx, edx
.text:0041A7E9                 jz      short loc_41A7FB
.text:0041A7EB                 mov     [esp+0Ch+arg_0], 0
.text:0041A7F3                 add     esp, 0Ch
.text:0041A7F6                 jmp     sub_41CFE0
.text:0041A7FB ; ---------------------------------------------------------------------------
.text:0041A7FB
.text:0041A7FB loc_41A7FB:                             ; CODE XREF: sub_41A7E0+9↑j
.text:0041A7FB                 call    _errno
.text:0041A800                 mov     dword ptr [eax], 16h
.text:0041A806                 mov     eax, 0FFFFFFFFh
.text:0041A80B                 add     esp, 0Ch
.text:0041A80E                 retn
.text:0041A80E sub_41A7E0      endp
.text:0041A80E
.text:0041A80E ; ---------------------------------------------------------------------------
.text:0041A80F                 align 10h
.text:0041A810
.text:0041A810 ; =============== S U B R O U T I N E =======================================
.text:0041A810
.text:0041A810
.text:0041A810 sub_41A810      proc near               ; CODE XREF: sub_409360+6A↑p
.text:0041A810
.text:0041A810 arg_0           = dword ptr  4
.text:0041A810
.text:0041A810                 sub     esp, 0Ch
.text:0041A813                 mov     edx, [esp+0Ch+arg_0]
.text:0041A817                 test    edx, edx
.text:0041A819                 js      short loc_41A821
.text:0041A81B                 xor     eax, eax
.text:0041A81D
.text:0041A81D loc_41A81D:                             ; CODE XREF: sub_41A810+21↓j
.text:0041A81D                 add     esp, 0Ch
.text:0041A820                 retn
.text:0041A821 ; ---------------------------------------------------------------------------
.text:0041A821
.text:0041A821 loc_41A821:                             ; CODE XREF: sub_41A810+9↑j
.text:0041A821                 call    _errno
.text:0041A826                 mov     dword ptr [eax], 16h
.text:0041A82C                 mov     eax, 0FFFFFFFFh
.text:0041A831                 jmp     short loc_41A81D
.text:0041A831 sub_41A810      endp
.text:0041A831
.text:0041A831 ; ---------------------------------------------------------------------------
.text:0041A833                 align 10h
.text:0041A840
.text:0041A840 ; =============== S U B R O U T I N E =======================================
.text:0041A840
.text:0041A840
.text:0041A840 sub_41A840      proc near               ; CODE XREF: sub_40BCB0+5F↑p
.text:0041A840
.text:0041A840 FileHandle      = dword ptr -0Ch
.text:0041A840 lpFileName      = dword ptr -8
.text:0041A840 var_4           = dword ptr -4
.text:0041A840 arg_0           = dword ptr  4
.text:0041A840 arg_4           = dword ptr  8
.text:0041A840
.text:0041A840                 sub     esp, 0Ch
.text:0041A843                 mov     edx, [esp+0Ch+arg_0]
.text:0041A847                 mov     [esp+0Ch+FileHandle], edx ; FileHandle
.text:0041A84A                 call    _get_osfhandle
.text:0041A84F                 mov     [esp+0Ch+FileHandle], eax ; HANDLE
.text:0041A852                 mov     ecx, [esp+0Ch+arg_4]
.text:0041A856                 mov     [esp+0Ch+lpFileName], 0 ; lpFileName
.text:0041A85E                 mov     [esp+0Ch+var_4], ecx ; int
.text:0041A862                 call    sub_41C950
.text:0041A867                 add     esp, 0Ch
.text:0041A86A                 retn
.text:0041A86A sub_41A840      endp
.text:0041A86A
.text:0041A86A ; ---------------------------------------------------------------------------
.text:0041A86B                 align 10h
.text:0041A870
.text:0041A870 ; =============== S U B R O U T I N E =======================================
.text:0041A870
.text:0041A870 ; Attributes: thunk
.text:0041A870
.text:0041A870 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:0041A870 j__getcwd       proc near               ; CODE XREF: sub_40EEA0+16↑p
.text:0041A870
.text:0041A870 DstBuf          = dword ptr  4
.text:0041A870 SizeInBytes     = dword ptr  8
.text:0041A870
.text:0041A870                 jmp     _getcwd
.text:0041A870 j__getcwd       endp
.text:0041A870
.text:0041A870 ; ---------------------------------------------------------------------------
.text:0041A875                 align 10h
.text:0041A880                 sub     esp, 0Ch
.text:0041A883                 mov     [esp+4], ebx
.text:0041A887                 mov     [esp+8], esi
.text:0041A88B                 xor     esi, esi
.text:0041A88D                 call    sub_41A310
.text:0041A892                 mov     ebx, eax
.text:0041A894                 call    sub_41D040
.text:0041A899                 cmp     ebx, eax
.text:0041A89B                 jz      short loc_41A8B4
.text:0041A89D
.text:0041A89D loc_41A89D:                             ; CODE XREF: .text:0041A8C2↓j
.text:0041A89D                 mov     esi, 1
.text:0041A8A2
.text:0041A8A2 loc_41A8A2:                             ; CODE XREF: .text:0041A8C4↓j
.text:0041A8A2                 mov     ds:dword_422850, esi
.text:0041A8A8                 mov     ebx, [esp+4]
.text:0041A8AC                 mov     esi, [esp+8]
.text:0041A8B0                 add     esp, 0Ch
.text:0041A8B3                 retn
.text:0041A8B4 ; ---------------------------------------------------------------------------
.text:0041A8B4
.text:0041A8B4 loc_41A8B4:                             ; CODE XREF: .text:0041A89B↑j
.text:0041A8B4                 call    sub_41A930
.text:0041A8B9                 mov     ebx, eax
.text:0041A8BB                 call    sub_41D030
.text:0041A8C0                 cmp     ebx, eax
.text:0041A8C2                 jnz     short loc_41A89D
.text:0041A8C4                 jmp     short loc_41A8A2
.text:0041A8C4 ; ---------------------------------------------------------------------------
.text:0041A8C6                 align 10h
.text:0041A8D0
.text:0041A8D0 ; =============== S U B R O U T I N E =======================================
.text:0041A8D0
.text:0041A8D0
.text:0041A8D0 sub_41A8D0      proc near               ; CODE XREF: sub_415FF0+99↑p
.text:0041A8D0
.text:0041A8D0 Size            = dword ptr -1Ch
.text:0041A8D0 var_18          = dword ptr -18h
.text:0041A8D0 arg_0           = dword ptr  4
.text:0041A8D0
.text:0041A8D0                 push    edi
.text:0041A8D1                 push    esi
.text:0041A8D2                 push    ebx
.text:0041A8D3                 sub     esp, 10h
.text:0041A8D6                 xor     ebx, ebx
.text:0041A8D8                 mov     edi, [esp+1Ch+arg_0]
.text:0041A8DC                 lea     esi, [esi+0]
.text:0041A8E0
.text:0041A8E0 loc_41A8E0:                             ; CODE XREF: sub_41A8D0+38↓j
.text:0041A8E0                 lea     edx, ds:0[ebx*4]
.text:0041A8E7                 mov     [esp+1Ch+Size], edx ; Size
.text:0041A8EA                 call    malloc
.text:0041A8EF                 mov     [esp+1Ch+var_18], eax
.text:0041A8F3                 mov     esi, eax
.text:0041A8F5                 mov     [esp+1Ch+Size], ebx
.text:0041A8F8                 call    sub_41D050
.text:0041A8FD                 lea     ecx, [ebx+ebx]
.text:0041A900                 mov     edx, eax
.text:0041A902                 mov     ebx, ecx
.text:0041A904                 sar     ecx, 1
.text:0041A906                 cmp     eax, ecx
.text:0041A908                 jz      short loc_41A8E0
.text:0041A90A                 test    eax, eax
.text:0041A90C                 js      short loc_41A91C
.text:0041A90E                 mov     esi, esi
.text:0041A910
.text:0041A910 loc_41A910:                             ; CODE XREF: sub_41A8D0+4A↓j
.text:0041A910                 mov     ecx, edx
.text:0041A912                 dec     edx
.text:0041A913                 cmp     [esi+ecx*4], edi
.text:0041A916                 jz      short loc_41A925
.text:0041A918                 test    edx, edx
.text:0041A91A                 jns     short loc_41A910
.text:0041A91C
.text:0041A91C loc_41A91C:                             ; CODE XREF: sub_41A8D0+3C↑j
.text:0041A91C                 xor     eax, eax
.text:0041A91E
.text:0041A91E loc_41A91E:                             ; CODE XREF: sub_41A8D0+5A↓j
.text:0041A91E                 add     esp, 10h
.text:0041A921                 pop     ebx
.text:0041A922                 pop     esi
.text:0041A923                 pop     edi
.text:0041A924                 retn
.text:0041A925 ; ---------------------------------------------------------------------------
.text:0041A925
.text:0041A925 loc_41A925:                             ; CODE XREF: sub_41A8D0+46↑j
.text:0041A925                 mov     eax, 1
.text:0041A92A                 jmp     short loc_41A91E
.text:0041A92A sub_41A8D0      endp
.text:0041A92A
.text:0041A92A ; ---------------------------------------------------------------------------
.text:0041A92C                 align 10h
.text:0041A930
.text:0041A930 ; =============== S U B R O U T I N E =======================================
.text:0041A930
.text:0041A930
.text:0041A930 sub_41A930      proc near               ; CODE XREF: sub_415FF0+FE↑p
.text:0041A930                                         ; .text:loc_41A8B4↑p
.text:0041A930                 xor     eax, eax
.text:0041A932                 retn
.text:0041A932 sub_41A930      endp
.text:0041A932
.text:0041A932 ; ---------------------------------------------------------------------------
.text:0041A933                 align 10h
.text:0041A940
.text:0041A940 ; =============== S U B R O U T I N E =======================================
.text:0041A940
.text:0041A940
.text:0041A940 ; int __cdecl sub_41A940(LPCSTR lpFileName, int)
.text:0041A940 sub_41A940      proc near               ; CODE XREF: sub_415FF0+26↑p
.text:0041A940                                         ; sub_418280-41D↑p ...
.text:0041A940
.text:0041A940 uMode           = dword ptr -1Ch
.text:0041A940 var_10          = dword ptr -10h
.text:0041A940 var_C           = dword ptr -0Ch
.text:0041A940 var_8           = dword ptr -8
.text:0041A940 var_4           = dword ptr -4
.text:0041A940 lpFileName      = dword ptr  4
.text:0041A940 arg_4           = dword ptr  8
.text:0041A940
.text:0041A940                 sub     esp, 1Ch
.text:0041A943                 mov     [esp+1Ch+var_10], ebx
.text:0041A947                 mov     ebx, [esp+1Ch+lpFileName]
.text:0041A94B                 mov     [esp+1Ch+var_4], ebp
.text:0041A94F                 xor     ebp, ebp
.text:0041A951                 test    ebx, ebx
.text:0041A953                 mov     [esp+1Ch+var_C], esi
.text:0041A957                 mov     esi, [esp+1Ch+arg_4]
.text:0041A95B                 mov     [esp+1Ch+var_8], edi
.text:0041A95F                 jz      short loc_41A969
.text:0041A961                 test    esi, 0FFFFFFE8h
.text:0041A967                 jz      short loc_41A990
.text:0041A969
.text:0041A969 loc_41A969:                             ; CODE XREF: sub_41A940+1F↑j
.text:0041A969                 call    _errno
.text:0041A96E                 mov     dword ptr [eax], 16h
.text:0041A974
.text:0041A974 loc_41A974:                             ; CODE XREF: sub_41A940+B1↓j
.text:0041A974                 mov     eax, 0FFFFFFFFh
.text:0041A979
.text:0041A979 loc_41A979:                             ; CODE XREF: sub_41A940+86↓j
.text:0041A979                                         ; sub_41A940+A4↓j
.text:0041A979                 mov     ebx, [esp+1Ch+var_10]
.text:0041A97D                 mov     esi, [esp+1Ch+var_C]
.text:0041A981                 mov     edi, [esp+1Ch+var_8]
.text:0041A985                 mov     ebp, [esp+1Ch+var_4]
.text:0041A989                 add     esp, 1Ch
.text:0041A98C                 retn
.text:0041A98C ; ---------------------------------------------------------------------------
.text:0041A98D                 align 10h
.text:0041A990
.text:0041A990 loc_41A990:                             ; CODE XREF: sub_41A940+27↑j
.text:0041A990                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0041A997                 call    SetErrorMode
.text:0041A99C                 sub     esp, 4
.text:0041A99F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0041A9A2                 call    GetFileAttributesA
.text:0041A9A7                 sub     esp, 4
.text:0041A9AA                 mov     edi, eax
.text:0041A9AC                 cmp     eax, 0FFFFFFFFh
.text:0041A9AF                 jz      short loc_41A9F3
.text:0041A9B1
.text:0041A9B1 loc_41A9B1:                             ; CODE XREF: sub_41A940+C6↓j
.text:0041A9B1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0041A9B8                 call    SetErrorMode
.text:0041A9BD                 sub     esp, 4
.text:0041A9C0                 mov     eax, 0FFFFFFFFh
.text:0041A9C5                 inc     ebp
.text:0041A9C6                 jz      short loc_41A979
.text:0041A9C8                 test    esi, 10h
.text:0041A9CE                 jz      short loc_41A9D8
.text:0041A9D0                 test    edi, 10h
.text:0041A9D6                 jz      short loc_41A9E6
.text:0041A9D8
.text:0041A9D8 loc_41A9D8:                             ; CODE XREF: sub_41A940+8E↑j
.text:0041A9D8                 and     esi, 2
.text:0041A9DB                 jz      short loc_41A9E2
.text:0041A9DD                 and     edi, 1
.text:0041A9E0                 jnz     short loc_41A9E6
.text:0041A9E2
.text:0041A9E2 loc_41A9E2:                             ; CODE XREF: sub_41A940+9B↑j
.text:0041A9E2                 xor     eax, eax
.text:0041A9E4                 jmp     short loc_41A979
.text:0041A9E6 ; ---------------------------------------------------------------------------
.text:0041A9E6
.text:0041A9E6 loc_41A9E6:                             ; CODE XREF: sub_41A940+96↑j
.text:0041A9E6                                         ; sub_41A940+A0↑j
.text:0041A9E6                 call    _errno
.text:0041A9EB                 mov     dword ptr [eax], 0Dh
.text:0041A9F1                 jmp     short loc_41A974
.text:0041A9F3 ; ---------------------------------------------------------------------------
.text:0041A9F3
.text:0041A9F3 loc_41A9F3:                             ; CODE XREF: sub_41A940+6F↑j
.text:0041A9F3                 call    sub_41ACA0
.text:0041A9F8                 mov     ebp, eax
.text:0041A9FA                 call    _errno
.text:0041A9FF                 mov     [eax], ebp
.text:0041AA01                 mov     ebp, 0FFFFFFFFh
.text:0041AA06                 jmp     short loc_41A9B1
.text:0041AA06 sub_41A940      endp
.text:0041AA06
.text:0041AA06 ; ---------------------------------------------------------------------------
.text:0041AA08                 align 10h
.text:0041AA10
.text:0041AA10 ; =============== S U B R O U T I N E =======================================
.text:0041AA10
.text:0041AA10 ; Attributes: info_from_lumina
.text:0041AA10
.text:0041AA10 ___get_errno    proc near               ; CODE XREF: sub_41ACA0+B↓p
.text:0041AA10
.text:0041AA10 arg_0           = dword ptr  4
.text:0041AA10
.text:0041AA10                 mov     eax, [esp+arg_0]
.text:0041AA14                 cmp     eax, 53h ; 'S'
.text:0041AA17                 jg      loc_41AB10
.text:0041AA1D                 cmp     eax, 52h ; 'R'
.text:0041AA20                 jge     short loc_41AA72
.text:0041AA22                 cmp     eax, 0Fh
.text:0041AA25                 jz      short loc_41AA40
.text:0041AA27                 cmp     eax, 0Fh
.text:0041AA2A                 jg      short loc_41AAA0
.text:0041AA2C                 cmp     eax, 9
.text:0041AA2F                 jg      short loc_41AA80
.text:0041AA31                 cmp     eax, 7
.text:0041AA34                 jge     short loc_41AA79
.text:0041AA36                 cmp     eax, 3
.text:0041AA39                 jg      short loc_41AA5A
.text:0041AA3B                 cmp     eax, 2
.text:0041AA3E                 jl      short loc_41AA53
.text:0041AA40
.text:0041AA40 loc_41AA40:                             ; CODE XREF: ___get_errno+15↑j
.text:0041AA40                                         ; ___get_errno+9D↓j ...
.text:0041AA40                 mov     edx, 2
.text:0041AA45                 lea     esi, [esi+0]
.text:0041AA49                 lea     edi, [edi+0]
.text:0041AA50
.text:0041AA50 loc_41AA50:                             ; CODE XREF: ___get_errno+48↓j
.text:0041AA50                                         ; ___get_errno+59↓j ...
.text:0041AA50                 mov     eax, edx
.text:0041AA52                 retn
.text:0041AA53 ; ---------------------------------------------------------------------------
.text:0041AA53
.text:0041AA53 loc_41AA53:                             ; CODE XREF: ___get_errno+2E↑j
.text:0041AA53                                         ; ___get_errno+78↓j ...
.text:0041AA53                 mov     edx, 16h
.text:0041AA58                 jmp     short loc_41AA50
.text:0041AA5A ; ---------------------------------------------------------------------------
.text:0041AA5A
.text:0041AA5A loc_41AA5A:                             ; CODE XREF: ___get_errno+29↑j
.text:0041AA5A                 cmp     eax, 5
.text:0041AA5D                 jz      short loc_41AA72
.text:0041AA5F                 cmp     eax, 5
.text:0041AA62                 jg      short loc_41AA6B
.text:0041AA64                 mov     edx, 18h
.text:0041AA69                 jmp     short loc_41AA50
.text:0041AA6B ; ---------------------------------------------------------------------------
.text:0041AA6B
.text:0041AA6B loc_41AA6B:                             ; CODE XREF: ___get_errno+52↑j
.text:0041AA6B                                         ; ___get_errno+180↓j
.text:0041AA6B                 mov     edx, 9
.text:0041AA70                 jmp     short loc_41AA50
.text:0041AA72 ; ---------------------------------------------------------------------------
.text:0041AA72
.text:0041AA72 loc_41AA72:                             ; CODE XREF: ___get_errno+10↑j
.text:0041AA72                                         ; ___get_errno+4D↑j ...
.text:0041AA72                 mov     edx, 0Dh
.text:0041AA77                 jmp     short loc_41AA50
.text:0041AA79 ; ---------------------------------------------------------------------------
.text:0041AA79
.text:0041AA79 loc_41AA79:                             ; CODE XREF: ___get_errno+24↑j
.text:0041AA79                                         ; ___get_errno+73↓j ...
.text:0041AA79                 mov     edx, 0Ch
.text:0041AA7E                 jmp     short loc_41AA50
.text:0041AA80 ; ---------------------------------------------------------------------------
.text:0041AA80
.text:0041AA80 loc_41AA80:                             ; CODE XREF: ___get_errno+1F↑j
.text:0041AA80                 cmp     eax, 0Dh
.text:0041AA83                 jg      short loc_41AA79
.text:0041AA85                 cmp     eax, 0Ch
.text:0041AA88                 jge     short loc_41AA53
.text:0041AA8A                 cmp     eax, 0Ah
.text:0041AA8D                 mov     edx, 7
.text:0041AA92                 jz      short loc_41AA50
.text:0041AA94                 cmp     eax, 0Bh
.text:0041AA97                 jnz     short loc_41AA53
.text:0041AA99
.text:0041AA99 loc_41AA99:                             ; CODE XREF: ___get_errno+21A↓j
.text:0041AA99                 mov     edx, 8
.text:0041AA9E                 jmp     short loc_41AA50
.text:0041AAA0 ; ---------------------------------------------------------------------------
.text:0041AAA0
.text:0041AAA0 loc_41AAA0:                             ; CODE XREF: ___get_errno+1A↑j
.text:0041AAA0                 cmp     eax, 22h ; '"'
.text:0041AAA3                 jg      short loc_41AAD4
.text:0041AAA5                 cmp     eax, 16h
.text:0041AAA8                 jge     short loc_41AA72
.text:0041AAAA                 cmp     eax, 12h
.text:0041AAAD                 jz      short loc_41AA40
.text:0041AAAF                 cmp     eax, 12h
.text:0041AAB2                 jg      short loc_41AAC5
.text:0041AAB4                 cmp     eax, 10h
.text:0041AAB7                 jz      short loc_41AA72
.text:0041AAB9                 mov     edx, 12h
.text:0041AABE                 cmp     eax, 11h
.text:0041AAC1
.text:0041AAC1 loc_41AAC1:                             ; CODE XREF: ___get_errno+172↓j
.text:0041AAC1                                         ; ___get_errno+24C↓j ...
.text:0041AAC1                 jnz     short loc_41AA53
.text:0041AAC3                 jmp     short loc_41AA50
.text:0041AAC5 ; ---------------------------------------------------------------------------
.text:0041AAC5
.text:0041AAC5 loc_41AAC5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0041AAC5                 cmp     eax, 14h
.text:0041AAC8                 jle     short loc_41AA72
.text:0041AACA
.text:0041AACA loc_41AACA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0041AACA                 mov     edx, 10h
.text:0041AACF                 jmp     loc_41AA50
.text:0041AAD4 ; ---------------------------------------------------------------------------
.text:0041AAD4
.text:0041AAD4 loc_41AAD4:                             ; CODE XREF: ___get_errno+93↑j
.text:0041AAD4                 cmp     eax, 41h ; 'A'
.text:0041AAD7                 jz      short loc_41AA72
.text:0041AAD9                 cmp     eax, 41h ; 'A'
.text:0041AADC                 jg      short loc_41AAF1
.text:0041AADE                 cmp     eax, 24h ; '$'
.text:0041AAE1                 jz      short loc_41AA72
.text:0041AAE3                 cmp     eax, 35h ; '5'
.text:0041AAE6                 jnz     loc_41AA53
.text:0041AAEC                 jmp     loc_41AA40
.text:0041AAF1 ; ---------------------------------------------------------------------------
.text:0041AAF1
.text:0041AAF1 loc_41AAF1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0041AAF1                 cmp     eax, 43h ; 'C'
.text:0041AAF4                 jz      loc_41AA40
.text:0041AAFA                 cmp     eax, 50h ; 'P'
.text:0041AAFD                 jnz     loc_41AA53
.text:0041AB03
.text:0041AB03 loc_41AB03:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0041AB03                 mov     edx, 11h
.text:0041AB08                 jmp     loc_41AA50
.text:0041AB08 ; ---------------------------------------------------------------------------
.text:0041AB0D                 align 10h
.text:0041AB10
.text:0041AB10 loc_41AB10:                             ; CODE XREF: ___get_errno+7↑j
.text:0041AB10                 cmp     eax, 0A1h ; '¡'
.text:0041AB15                 jz      loc_41AA40
.text:0041AB1B                 cmp     eax, 0A1h ; '¡'
.text:0041AB20                 jg      loc_41ABD0
.text:0041AB26                 cmp     eax, 81h
.text:0041AB2B                 jg      short loc_41AB95
.text:0041AB2D                 cmp     eax, 80h ; '€'
.text:0041AB32                 mov     edx, 0Ah
.text:0041AB37                 jge     loc_41AA50
.text:0041AB3D                 cmp     eax, 6Ch ; 'l'
.text:0041AB40                 jz      loc_41AA72
.text:0041AB46                 cmp     eax, 6Ch ; 'l'
.text:0041AB49                 jg      short loc_41AB67
.text:0041AB4B                 cmp     eax, 57h ; 'W'
.text:0041AB4E                 jz      loc_41AA53
.text:0041AB54                 cmp     eax, 59h ; 'Y'
.text:0041AB57                 jnz     loc_41AA53
.text:0041AB5D
.text:0041AB5D loc_41AB5D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0041AB5D                                         ; ___get_errno+23C↓j
.text:0041AB5D                 mov     edx, 0Bh
.text:0041AB62                 jmp     loc_41AA50
.text:0041AB67 ; ---------------------------------------------------------------------------
.text:0041AB67
.text:0041AB67 loc_41AB67:                             ; CODE XREF: ___get_errno+139↑j
.text:0041AB67                 cmp     eax, 70h ; 'p'
.text:0041AB6A                 mov     edx, 1Ch
.text:0041AB6F                 jz      loc_41AA50
.text:0041AB75                 cmp     eax, 70h ; 'p'
.text:0041AB78                 jg      short loc_41AB87
.text:0041AB7A                 mov     edx, 20h ; ' '
.text:0041AB7F                 cmp     eax, 6Dh ; 'm'
.text:0041AB82                 jmp     loc_41AAC1
.text:0041AB87 ; ---------------------------------------------------------------------------
.text:0041AB87
.text:0041AB87 loc_41AB87:                             ; CODE XREF: ___get_errno+168↑j
.text:0041AB87                 cmp     eax, 72h ; 'r'
.text:0041AB8A
.text:0041AB8A loc_41AB8A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0041AB8A                 jnz     loc_41AA53
.text:0041AB90                 jmp     loc_41AA6B
.text:0041AB95 ; ---------------------------------------------------------------------------
.text:0041AB95
.text:0041AB95 loc_41AB95:                             ; CODE XREF: ___get_errno+11B↑j
.text:0041AB95                 cmp     eax, 84h ; '„'
.text:0041AB9A                 jz      loc_41AA72
.text:0041ABA0                 cmp     eax, 84h ; '„'
.text:0041ABA5                 jg      short loc_41ABAE
.text:0041ABA7                 cmp     eax, 82h ; '‚'
.text:0041ABAC                 jmp     short loc_41AB8A
.text:0041ABAE ; ---------------------------------------------------------------------------
.text:0041ABAE
.text:0041ABAE loc_41ABAE:                             ; CODE XREF: ___get_errno+195↑j
.text:0041ABAE                 cmp     eax, 91h ; '‘'
.text:0041ABB3                 mov     edx, 29h ; ')'
.text:0041ABB8                 jz      loc_41AA50
.text:0041ABBE                 cmp     eax, 9Eh ; 'ž'
.text:0041ABC3
.text:0041ABC3 loc_41ABC3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0041ABC3                 jnz     loc_41AA53
.text:0041ABC9                 jmp     loc_41AA72
.text:0041ABC9 ; ---------------------------------------------------------------------------
.text:0041ABCE                 align 10h
.text:0041ABD0
.text:0041ABD0 loc_41ABD0:                             ; CODE XREF: ___get_errno+110↑j
.text:0041ABD0                 cmp     eax, 0CEh ; 'Î'
.text:0041ABD5                 jz      loc_41AA40
.text:0041ABDB                 cmp     eax, 0CEh ; 'Î'
.text:0041ABE0                 jg      short loc_41AC30
.text:0041ABE2                 cmp     eax, 0AAh ; 'ª'
.text:0041ABE7                 jz      loc_41AACA
.text:0041ABED                 cmp     eax, 0AAh ; 'ª'
.text:0041ABF2                 jg      short loc_41AC06
.text:0041ABF4                 cmp     eax, 0A4h ; '¤'
.text:0041ABF9                 jz      loc_41AB5D
.text:0041ABFF                 cmp     eax, 0A7h ; '§'
.text:0041AC04                 jmp     short loc_41ABC3
.text:0041AC06 ; ---------------------------------------------------------------------------
.text:0041AC06
.text:0041AC06 loc_41AC06:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0041AC06                 cmp     eax, 0B7h ; '·'
.text:0041AC0B                 jz      loc_41AB03
.text:0041AC11                 cmp     eax, 0B7h ; '·'
.text:0041AC16                 jl      loc_41AA53
.text:0041AC1C                 sub     eax, 0BCh ; '¼'
.text:0041AC21                 cmp     eax, 0Eh
.text:0041AC24                 ja      loc_41AA53
.text:0041AC2A                 jmp     loc_41AA99
.text:0041AC2A ; ---------------------------------------------------------------------------
.text:0041AC2F                 align 10h
.text:0041AC30
.text:0041AC30 loc_41AC30:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0041AC30                 cmp     eax, 46Bh
.text:0041AC35                 mov     edx, 24h ; '$'
.text:0041AC3A                 jz      loc_41AA50
.text:0041AC40                 cmp     eax, 46Bh
.text:0041AC45                 jg      short loc_41AC61
.text:0041AC47                 cmp     eax, 0D7h ; '×'
.text:0041AC4C                 jz      loc_41AB5D
.text:0041AC52                 mov     edx, 5
.text:0041AC57                 cmp     eax, 45Dh
.text:0041AC5C                 jmp     loc_41AAC1
.text:0041AC61 ; ---------------------------------------------------------------------------
.text:0041AC61
.text:0041AC61 loc_41AC61:                             ; CODE XREF: ___get_errno+235↑j
.text:0041AC61                 cmp     eax, 4D5h
.text:0041AC66                 mov     edx, 4
.text:0041AC6B                 jz      loc_41AA50
.text:0041AC71                 cmp     eax, 4D5h
.text:0041AC76                 jg      short loc_41AC87
.text:0041AC78                 mov     edx, 13h
.text:0041AC7D                 cmp     eax, 4B0h
.text:0041AC82                 jmp     loc_41AAC1
.text:0041AC87 ; ---------------------------------------------------------------------------
.text:0041AC87
.text:0041AC87 loc_41AC87:                             ; CODE XREF: ___get_errno+266↑j
.text:0041AC87                 cmp     eax, 718h
.text:0041AC8C                 jnz     loc_41AA53
.text:0041AC92                 jmp     loc_41AA79
.text:0041AC92 ___get_errno    endp
.text:0041AC92
.text:0041AC92 ; ---------------------------------------------------------------------------
.text:0041AC97                 align 10h
.text:0041ACA0
.text:0041ACA0 ; =============== S U B R O U T I N E =======================================
.text:0041ACA0
.text:0041ACA0
.text:0041ACA0 sub_41ACA0      proc near               ; CODE XREF: sub_418280:loc_417F1D↑p
.text:0041ACA0                                         ; sub_417F50+1A2↑p ...
.text:0041ACA0
.text:0041ACA0 var_C           = dword ptr -0Ch
.text:0041ACA0
.text:0041ACA0                 sub     esp, 0Ch
.text:0041ACA3                 call    GetLastError
.text:0041ACA8                 mov     [esp+0Ch+var_C], eax
.text:0041ACAB                 call    ___get_errno
.text:0041ACB0                 add     esp, 0Ch
.text:0041ACB3                 retn
.text:0041ACB3 sub_41ACA0      endp
.text:0041ACB3
.text:0041ACB3 ; ---------------------------------------------------------------------------
.text:0041ACB4                 align 10h
.text:0041ACC0
.text:0041ACC0 ; =============== S U B R O U T I N E =======================================
.text:0041ACC0
.text:0041ACC0
.text:0041ACC0 sub_41ACC0      proc near               ; CODE XREF: .text:00418913↑p
.text:0041ACC0                                         ; .text:00418963↑p
.text:0041ACC0
.text:0041ACC0 arg_4           = dword ptr  8
.text:0041ACC0
.text:0041ACC0                 sub     esp, 0Ch
.text:0041ACC3                 mov     edx, [esp+0Ch+arg_4]
.text:0041ACC7                 test    edx, edx
.text:0041ACC9                 jz      short loc_41ACD0
.text:0041ACCB                 add     esp, 0Ch
.text:0041ACCE                 jmp     short sub_41AD10
.text:0041ACD0 ; ---------------------------------------------------------------------------
.text:0041ACD0
.text:0041ACD0 loc_41ACD0:                             ; CODE XREF: sub_41ACC0+9↑j
.text:0041ACD0                 call    _errno
.text:0041ACD5                 mov     dword ptr [eax], 16h
.text:0041ACDB                 xor     eax, eax
.text:0041ACDD                 add     esp, 0Ch
.text:0041ACE0                 retn
.text:0041ACE0 sub_41ACC0      endp
.text:0041ACE0
.text:0041ACE1 ; ---------------------------------------------------------------------------
.text:0041ACE1                 jmp     short sub_41ACF0
.text:0041ACE1 ; ---------------------------------------------------------------------------
.text:0041ACE3                 align 10h
.text:0041ACF0
.text:0041ACF0 ; =============== S U B R O U T I N E =======================================
.text:0041ACF0
.text:0041ACF0
.text:0041ACF0 ; int __cdecl sub_41ACF0(LPCSTR)
.text:0041ACF0 sub_41ACF0      proc near               ; CODE XREF: sub_418280-40C↑p
.text:0041ACF0                                         ; sub_417F50+74↑p ...
.text:0041ACF0
.text:0041ACF0 lpFileName      = dword ptr -0Ch
.text:0041ACF0 Destination     = dword ptr -8
.text:0041ACF0 arg_0           = dword ptr  4
.text:0041ACF0
.text:0041ACF0                 sub     esp, 0Ch
.text:0041ACF3                 mov     edx, [esp+0Ch+arg_0]
.text:0041ACF7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0041ACFF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0041AD02                 call    sub_41AD10
.text:0041AD07                 add     esp, 0Ch
.text:0041AD0A                 retn
.text:0041AD0A sub_41ACF0      endp
.text:0041AD0A
.text:0041AD0A ; ---------------------------------------------------------------------------
.text:0041AD0B                 align 10h
.text:0041AD10
.text:0041AD10 ; =============== S U B R O U T I N E =======================================
.text:0041AD10
.text:0041AD10
.text:0041AD10 ; int __cdecl sub_41AD10(LPCSTR lpFileName, char *Destination)
.text:0041AD10 sub_41AD10      proc near               ; CODE XREF: sub_41ACC0+E↑j
.text:0041AD10                                         ; sub_41ACF0+12↑p
.text:0041AD10
.text:0041AD10 Size            = dword ptr -2Ch
.text:0041AD10 nBufferLength   = dword ptr -28h
.text:0041AD10 lpBuffer        = dword ptr -24h
.text:0041AD10 lpFilePart      = dword ptr -20h
.text:0041AD10 FilePart        = dword ptr -14h
.text:0041AD10 lpFileName      = dword ptr  4
.text:0041AD10 Destination     = dword ptr  8
.text:0041AD10
.text:0041AD10                 push    ebp
.text:0041AD11                 push    edi
.text:0041AD12                 push    esi
.text:0041AD13                 push    ebx
.text:0041AD14                 sub     esp, 1Ch
.text:0041AD17                 mov     edi, [esp+2Ch+lpFileName]
.text:0041AD1B                 mov     ebp, [esp+2Ch+Destination]
.text:0041AD1F                 test    edi, edi
.text:0041AD21                 jz      loc_41AE29
.text:0041AD27                 cmp     byte ptr [edi], 0
.text:0041AD2A                 jz      loc_41AE1C
.text:0041AD30                 mov     [esp+2Ch+Size], 104h ; Size
.text:0041AD37                 call    malloc
.text:0041AD3C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041AD40                 lea     edx, [esp+2Ch+FilePart]
.text:0041AD44                 mov     ebx, eax
.text:0041AD46                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041AD4A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0041AD52                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041AD55                 call    GetFullPathNameA
.text:0041AD5A                 sub     esp, 10h
.text:0041AD5D                 mov     esi, eax
.text:0041AD5F                 test    eax, eax
.text:0041AD61                 jz      loc_41AE0A
.text:0041AD67                 cmp     eax, 104h
.text:0041AD6C                 jle     short loc_41AD7D
.text:0041AD6E                 test    ebp, ebp
.text:0041AD70                 jz      short loc_41ADD9
.text:0041AD72                 call    _errno
.text:0041AD77                 mov     dword ptr [eax], 26h ; '&'
.text:0041AD7D
.text:0041AD7D loc_41AD7D:                             ; CODE XREF: sub_41AD10+5C↑j
.text:0041AD7D                                         ; sub_41AD10+F5↓j
.text:0041AD7D                 call    _errno
.text:0041AD82                 mov     edi, [eax]
.text:0041AD84                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041AD8C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041AD8F                 call    sub_41A940
.text:0041AD94                 test    eax, eax
.text:0041AD96                 jnz     short loc_41ADB0
.text:0041AD98                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041AD9D                 cmp     al, 2Fh ; '/'
.text:0041AD9F                 jz      short loc_41ADB0
.text:0041ADA1                 cmp     al, 5Ch ; '\'
.text:0041ADA3                 jz      short loc_41ADB0
.text:0041ADA5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0041ADA9                 mov     byte ptr [esi+ebx+1], 0
.text:0041ADAE                 mov     esi, esi
.text:0041ADB0
.text:0041ADB0 loc_41ADB0:                             ; CODE XREF: sub_41AD10+86↑j
.text:0041ADB0                                         ; sub_41AD10+8F↑j ...
.text:0041ADB0                 call    _errno
.text:0041ADB5                 mov     [eax], edi
.text:0041ADB7                 mov     [esp+2Ch+Size], ebx
.text:0041ADBA                 call    sub_418800
.text:0041ADBF                 test    ebp, ebp
.text:0041ADC1                 mov     eax, ebx
.text:0041ADC3                 jz      short loc_41ADD1
.text:0041ADC5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0041ADC9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041ADCC                 call    strcpy
.text:0041ADD1
.text:0041ADD1 loc_41ADD1:                             ; CODE XREF: sub_41AD10+B3↑j
.text:0041ADD1                                         ; sub_41AD10+10A↓j
.text:0041ADD1                 add     esp, 1Ch
.text:0041ADD4                 pop     ebx
.text:0041ADD5                 pop     esi
.text:0041ADD6                 pop     edi
.text:0041ADD7                 pop     ebp
.text:0041ADD8                 retn
.text:0041ADD9 ; ---------------------------------------------------------------------------
.text:0041ADD9
.text:0041ADD9 loc_41ADD9:                             ; CODE XREF: sub_41AD10+60↑j
.text:0041ADD9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0041ADDC                 lea     ecx, [eax+2]
.text:0041ADDF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0041ADE3                 call    realloc
.text:0041ADE8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041ADEC                 lea     edx, [esp+2Ch+FilePart]
.text:0041ADF0                 mov     ebx, eax
.text:0041ADF2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041ADF6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0041ADFA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041ADFD                 call    GetFullPathNameA
.text:0041AE02                 sub     esp, 10h
.text:0041AE05                 jmp     loc_41AD7D
.text:0041AE0A ; ---------------------------------------------------------------------------
.text:0041AE0A
.text:0041AE0A loc_41AE0A:                             ; CODE XREF: sub_41AD10+51↑j
.text:0041AE0A                 call    sub_41ACA0
.text:0041AE0F                 mov     esi, eax
.text:0041AE11                 call    _errno
.text:0041AE16                 mov     [eax], esi
.text:0041AE18
.text:0041AE18 loc_41AE18:                             ; CODE XREF: sub_41AD10+117↓j
.text:0041AE18                                         ; sub_41AD10+124↓j
.text:0041AE18                 xor     eax, eax
.text:0041AE1A                 jmp     short loc_41ADD1
.text:0041AE1C ; ---------------------------------------------------------------------------
.text:0041AE1C
.text:0041AE1C loc_41AE1C:                             ; CODE XREF: sub_41AD10+1A↑j
.text:0041AE1C                 call    _errno
.text:0041AE21                 mov     dword ptr [eax], 2
.text:0041AE27                 jmp     short loc_41AE18
.text:0041AE29 ; ---------------------------------------------------------------------------
.text:0041AE29
.text:0041AE29 loc_41AE29:                             ; CODE XREF: sub_41AD10+11↑j
.text:0041AE29                 call    _errno
.text:0041AE2E                 mov     dword ptr [eax], 16h
.text:0041AE34                 jmp     short loc_41AE18
.text:0041AE34 sub_41AD10      endp
.text:0041AE34
.text:0041AE34 ; ---------------------------------------------------------------------------
.text:0041AE36                 align 10h
.text:0041AE40 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041B05F↓o
.text:0041AE4C aLu             db '%lu',0              ; DATA XREF: .text:0041B06F↓o
.text:0041AE50 asc_41AE50      db ' ',0                ; DATA XREF: .text:loc_41B158↓o
.text:0041AE52                 align 10h
.text:0041AE60 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0041AE60                                         ; DATA XREF: .text:0041B18F↓o
.text:0041AE80 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41B19D↓o
.text:0041AE8C aServer         db ' Server',0          ; DATA XREF: .text:0041B1C6↓o
.text:0041AE8C                                         ; .text:loc_41B33E↓o
.text:0041AE94 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_41B1D8↓o
.text:0041AEA5 aDatacenterServ db ' Datacenter Server',0
.text:0041AEA5                                         ; DATA XREF: .text:loc_41B1E2↓o
.text:0041AEB8 aStandardEditio db ' Standard Edition',0
.text:0041AEB8                                         ; DATA XREF: .text:0041B20A↓o
.text:0041AECA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_41B214↓o
.text:0041AED7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0041AED7                                         ; DATA XREF: .text:loc_41B21E↓o
.text:0041AEEB aDatacenterEdit db ' Datacenter Edition',0
.text:0041AEEB                                         ; DATA XREF: .text:loc_41B228↓o
.text:0041AEFF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041B23B↓o
.text:0041AF0D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_41B245↓o
.text:0041AF0D                                         ; .text:loc_41B350↓o
.text:0041AF1B                 align 10h
.text:0041AF20 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0041AF20                                         ; DATA XREF: .text:0041B272↓o
.text:0041AF50 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0041B2B9↓o
.text:0041AF5C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0041B2F4↓o
.text:0041AF62 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0041B30B↓o
.text:0041AF6B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0041B322↓o
.text:0041AF74                 align 10h
.text:0041AF80 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0041AF80                                         ; DATA XREF: .text:0041B497↓o
.text:0041AFA3                 align 20h
.text:0041AFC0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0041AFC0                                         ; DATA XREF: .text:0041B4F6↓o
.text:0041AFE6 ; ---------------------------------------------------------------------------
.text:0041AFE6
.text:0041AFE6 loc_41AFE6:                             ; DATA XREF: .text:loc_41B561↓o
.text:0041AFE6                 and     [ebx+45h], dl
.text:0041AFE9                 add     [eax], ah
.text:0041AFEB                 push    ebx
.text:0041AFEC                 push    eax
.text:0041AFED                 xor     [eax], eax
.text:0041AFEF
.text:0041AFEF loc_41AFEF:                             ; DATA XREF: .text:loc_41B5DB↓o
.text:0041AFEF                 and     [edi+53h], cl
.text:0041AFF2                 push    edx
.text:0041AFF3                 xor     al, [eax]
.text:0041AFF5                 lea     esi, [esi+0]
.text:0041AFF9                 lea     edi, [edi+0]
.text:0041B000                 push    edi
.text:0041B001                 push    esi
.text:0041B002                 push    ebx
.text:0041B003                 sub     esp, 130h
.text:0041B009                 mov     ebx, [esp+140h]
.text:0041B010                 call    sub_41B710
.text:0041B015                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B01A                 cmp     eax, 1
.text:0041B01D                 jz      loc_41B4C0
.text:0041B023                 cmp     eax, 1
.text:0041B026                 jb      loc_41B496
.text:0041B02C                 cmp     eax, 2
.text:0041B02F                 jz      loc_41B0E0
.text:0041B035                 cmp     eax, 3
.text:0041B038                 jz      short loc_41B09F
.text:0041B03A                 lea     esi, [esi+0]
.text:0041B040
.text:0041B040 loc_41B040:                             ; CODE XREF: .text:0041B0D5↓j
.text:0041B040                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B046                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B04C
.text:0041B04C loc_41B04C:                             ; CODE XREF: .text:0041B4DF↓j
.text:0041B04C                 mov     [esp+10h], edx
.text:0041B050                 mov     ebx, [esp+144h]
.text:0041B057                 mov     [esp+0Ch], ecx
.text:0041B05B                 mov     [esp+8], eax
.text:0041B05F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0041B067                 mov     [esp], ebx
.text:0041B06A                 call    sprintf
.text:0041B06F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0041B077                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041B07D                 mov     ecx, [esp+148h]
.text:0041B084                 mov     [esp+8], edi
.text:0041B088                 mov     [esp], ecx
.text:0041B08B                 call    sprintf
.text:0041B090                 mov     eax, 1
.text:0041B095
.text:0041B095 loc_41B095:                             ; CODE XREF: .text:0041B28F↓j
.text:0041B095                                         ; .text:0041B2DC↓j
.text:0041B095                 add     esp, 130h
.text:0041B09B                 pop     ebx
.text:0041B09C                 pop     esi
.text:0041B09D                 pop     edi
.text:0041B09E                 retn
.text:0041B09F ; ---------------------------------------------------------------------------
.text:0041B09F
.text:0041B09F loc_41B09F:                             ; CODE XREF: .text:0041B038↑j
.text:0041B09F                 mov     dword ptr [ebx], 7263694Dh
.text:0041B0A5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B0AC                 mov     dword ptr [ebx+8], 69572074h
.text:0041B0B3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B0BA                 mov     dword ptr [ebx+10h], 45432073h
.text:0041B0C1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0041B0C7                 mov     esi, esi
.text:0041B0C9                 lea     edi, [edi+0]
.text:0041B0D0
.text:0041B0D0 loc_41B0D0:                             ; CODE XREF: .text:0041B178↓j
.text:0041B0D0                                         ; .text:0041B4B9↓j ...
.text:0041B0D0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B0D5                 jmp     loc_41B040
.text:0041B0D5 ; ---------------------------------------------------------------------------
.text:0041B0DA                 align 10h
.text:0041B0E0
.text:0041B0E0 loc_41B0E0:                             ; CODE XREF: .text:0041B02F↑j
.text:0041B0E0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0041B0E6                 cmp     edx, 3
.text:0041B0E9                 mov     eax, edx
.text:0041B0EB                 jz      loc_41B455
.text:0041B0F1
.text:0041B0F1 loc_41B0F1:                             ; CODE XREF: .text:0041B45C↓j
.text:0041B0F1                 cmp     eax, 4
.text:0041B0F4                 jz      loc_41B415
.text:0041B0FA
.text:0041B0FA loc_41B0FA:                             ; CODE XREF: .text:0041B41D↓j
.text:0041B0FA                 cmp     eax, 4
.text:0041B0FD                 ja      loc_41B362
.text:0041B103                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B109                 test    ecx, ecx
.text:0041B10B                 jnz     loc_41B362
.text:0041B111                 mov     dword ptr [ebx], 7263694Dh
.text:0041B117                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B11E                 mov     dword ptr [ebx+8], 69572074h
.text:0041B125                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B12C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B133
.text:0041B133 loc_41B133:                             ; CODE XREF: .text:0041B3D5↓j
.text:0041B133                 mov     byte ptr [ebx+14h], 0
.text:0041B137
.text:0041B137 loc_41B137:                             ; CODE XREF: .text:0041B365↓j
.text:0041B137                                         ; .text:0041B37C↓j ...
.text:0041B137                 mov     esi, dword_4210B0
.text:0041B13D                 test    esi, esi
.text:0041B13F                 jz      loc_41B252
.text:0041B145                 movzx   eax, ds:byte_42290A
.text:0041B14C                 cmp     al, 1
.text:0041B14E                 jz      loc_41B232
.text:0041B154                 cmp     al, 3
.text:0041B156                 jz      short loc_41B17D
.text:0041B158
.text:0041B158 loc_41B158:                             ; CODE XREF: .text:0041B19B↓j
.text:0041B158                                         ; .text:0041B1D6↓j ...
.text:0041B158                 mov     dword ptr [esp+4], offset asc_41AE50 ; " "
.text:0041B160                 mov     [esp], ebx
.text:0041B163                 call    strcat
.text:0041B168                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0041B170                 mov     [esp], ebx
.text:0041B173                 call    strcat
.text:0041B178                 jmp     loc_41B0D0
.text:0041B17D ; ---------------------------------------------------------------------------
.text:0041B17D
.text:0041B17D loc_41B17D:                             ; CODE XREF: .text:0041B156↑j
.text:0041B17D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0041B184                 jz      short loc_41B1A6
.text:0041B186
.text:0041B186 loc_41B186:                             ; CODE XREF: .text:0041B1B2↓j
.text:0041B186                 test    byte ptr ds:word_422908, 2
.text:0041B18D                 jz      short loc_41B19D
.text:0041B18F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0041B196
.text:0041B196 loc_41B196:                             ; CODE XREF: .text:0041B1A4↓j
.text:0041B196                 call    printf
.text:0041B19B                 jmp     short loc_41B158
.text:0041B19D ; ---------------------------------------------------------------------------
.text:0041B19D
.text:0041B19D loc_41B19D:                             ; CODE XREF: .text:0041B18D↑j
.text:0041B19D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0041B1A4                 jmp     short loc_41B196
.text:0041B1A6 ; ---------------------------------------------------------------------------
.text:0041B1A6
.text:0041B1A6 loc_41B1A6:                             ; CODE XREF: .text:0041B184↑j
.text:0041B1A6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B1AB                 cmp     eax, 2
.text:0041B1AE                 jz      short loc_41B1F0
.text:0041B1B0                 test    eax, eax
.text:0041B1B2                 jnz     short loc_41B186
.text:0041B1B4                 cmp     byte ptr ds:word_422908, 0
.text:0041B1BB                 js      short loc_41B1E2
.text:0041B1BD                 test    byte ptr ds:word_422908, 2
.text:0041B1C4                 jnz     short loc_41B1D8
.text:0041B1C6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041B1CE
.text:0041B1CE loc_41B1CE:                             ; CODE XREF: .text:0041B1E0↓j
.text:0041B1CE                                         ; .text:0041B1EA↓j ...
.text:0041B1CE                 mov     [esp], ebx
.text:0041B1D1                 call    strcat
.text:0041B1D6                 jmp     short loc_41B158
.text:0041B1D8 ; ---------------------------------------------------------------------------
.text:0041B1D8
.text:0041B1D8 loc_41B1D8:                             ; CODE XREF: .text:0041B1C4↑j
.text:0041B1D8                                         ; .text:0041B339↓j
.text:0041B1D8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0041B1E0                 jmp     short loc_41B1CE
.text:0041B1E2 ; ---------------------------------------------------------------------------
.text:0041B1E2
.text:0041B1E2 loc_41B1E2:                             ; CODE XREF: .text:0041B1BB↑j
.text:0041B1E2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0041B1EA                 jmp     short loc_41B1CE
.text:0041B1EA ; ---------------------------------------------------------------------------
.text:0041B1EC                 align 10h
.text:0041B1F0
.text:0041B1F0 loc_41B1F0:                             ; CODE XREF: .text:0041B1AE↑j
.text:0041B1F0                 cmp     byte ptr ds:word_422908, 0
.text:0041B1F7                 js      short loc_41B228
.text:0041B1F9                 movzx   eax, ds:word_422908
.text:0041B200                 test    al, 2
.text:0041B202                 jnz     short loc_41B21E
.text:0041B204                 cmp     ax, 400h
.text:0041B208                 jz      short loc_41B214
.text:0041B20A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0041B212                 jmp     short loc_41B1CE
.text:0041B214 ; ---------------------------------------------------------------------------
.text:0041B214
.text:0041B214 loc_41B214:                             ; CODE XREF: .text:0041B208↑j
.text:0041B214                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041B21C                 jmp     short loc_41B1CE
.text:0041B21E ; ---------------------------------------------------------------------------
.text:0041B21E
.text:0041B21E loc_41B21E:                             ; CODE XREF: .text:0041B202↑j
.text:0041B21E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0041B226                 jmp     short loc_41B1CE
.text:0041B228 ; ---------------------------------------------------------------------------
.text:0041B228
.text:0041B228 loc_41B228:                             ; CODE XREF: .text:0041B1F7↑j
.text:0041B228                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0041B230                 jmp     short loc_41B1CE
.text:0041B232 ; ---------------------------------------------------------------------------
.text:0041B232
.text:0041B232 loc_41B232:                             ; CODE XREF: .text:0041B14E↑j
.text:0041B232                 test    byte ptr ds:word_422908+1, 2
.text:0041B239                 jz      short loc_41B245
.text:0041B23B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0041B243                 jmp     short loc_41B1CE
.text:0041B245 ; ---------------------------------------------------------------------------
.text:0041B245
.text:0041B245 loc_41B245:                             ; CODE XREF: .text:0041B239↑j
.text:0041B245                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041B24D                 jmp     loc_41B1CE
.text:0041B252 ; ---------------------------------------------------------------------------
.text:0041B252
.text:0041B252 loc_41B252:                             ; CODE XREF: .text:0041B13F↑j
.text:0041B252                 mov     dword ptr [esp+28h], 0FFh
.text:0041B25A                 lea     edx, [esp+2Ch]
.text:0041B25E                 mov     [esp+10h], edx
.text:0041B262                 mov     dword ptr [esp+0Ch], 1
.text:0041B26A                 mov     dword ptr [esp+8], 0
.text:0041B272                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041B27A                 mov     dword ptr [esp], 80000002h
.text:0041B281                 call    RegOpenKeyExA
.text:0041B286                 mov     edi, eax
.text:0041B288                 sub     esp, 14h
.text:0041B28B                 xor     eax, eax
.text:0041B28D                 test    edi, edi
.text:0041B28F                 jnz     loc_41B095
.text:0041B295                 mov     dword ptr [esp+0Ch], 0
.text:0041B29D                 mov     edi, [esp+2Ch]
.text:0041B2A1                 lea     esi, [esp+28h]
.text:0041B2A5                 mov     [esp+14h], esi
.text:0041B2A9                 lea     esi, [esp+30h]
.text:0041B2AD                 mov     [esp+10h], esi
.text:0041B2B1                 mov     dword ptr [esp+8], 0
.text:0041B2B9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0041B2C1                 mov     [esp], edi
.text:0041B2C4                 call    RegQueryValueExA
.text:0041B2C9                 sub     esp, 18h
.text:0041B2CC                 test    eax, eax
.text:0041B2CE                 jnz     short loc_41B2DA
.text:0041B2D0                 cmp     dword ptr [esp+28h], 0FFh
.text:0041B2D8                 jbe     short loc_41B2E1
.text:0041B2DA
.text:0041B2DA loc_41B2DA:                             ; CODE XREF: .text:0041B2CE↑j
.text:0041B2DA                 xor     eax, eax
.text:0041B2DC                 jmp     loc_41B095
.text:0041B2E1 ; ---------------------------------------------------------------------------
.text:0041B2E1
.text:0041B2E1 loc_41B2E1:                             ; CODE XREF: .text:0041B2D8↑j
.text:0041B2E1                 mov     edx, [esp+2Ch]
.text:0041B2E5                 mov     [esp], edx
.text:0041B2E8                 call    RegCloseKey
.text:0041B2ED                 sub     esp, 4
.text:0041B2F0                 mov     [esp+4], esi
.text:0041B2F4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0041B2FB                 call    lstrcmpiA
.text:0041B300                 sub     esp, 8
.text:0041B303                 test    eax, eax
.text:0041B305                 jz      short loc_41B350
.text:0041B307
.text:0041B307 loc_41B307:                             ; CODE XREF: .text:0041B360↓j
.text:0041B307                 mov     [esp+4], esi
.text:0041B30B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0041B312                 call    lstrcmpiA
.text:0041B317                 sub     esp, 8
.text:0041B31A                 test    eax, eax
.text:0041B31C                 jz      short loc_41B33E
.text:0041B31E
.text:0041B31E loc_41B31E:                             ; CODE XREF: .text:0041B34E↓j
.text:0041B31E                 mov     [esp+4], esi
.text:0041B322                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0041B329                 call    lstrcmpiA
.text:0041B32E                 sub     esp, 8
.text:0041B331                 test    eax, eax
.text:0041B333                 jnz     loc_41B158
.text:0041B339                 jmp     loc_41B1D8
.text:0041B33E ; ---------------------------------------------------------------------------
.text:0041B33E
.text:0041B33E loc_41B33E:                             ; CODE XREF: .text:0041B31C↑j
.text:0041B33E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041B346                 mov     [esp], ebx
.text:0041B349                 call    strcat
.text:0041B34E                 jmp     short loc_41B31E
.text:0041B350 ; ---------------------------------------------------------------------------
.text:0041B350
.text:0041B350 loc_41B350:                             ; CODE XREF: .text:0041B305↑j
.text:0041B350                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041B358                 mov     [esp], ebx
.text:0041B35B                 call    strcat
.text:0041B360                 jmp     short loc_41B307
.text:0041B362 ; ---------------------------------------------------------------------------
.text:0041B362
.text:0041B362 loc_41B362:                             ; CODE XREF: .text:0041B0FD↑j
.text:0041B362                                         ; .text:0041B10B↑j
.text:0041B362                 cmp     eax, 5
.text:0041B365                 jnz     loc_41B137
.text:0041B36B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B370                 cmp     eax, 2
.text:0041B373                 jz      short loc_41B3DA
.text:0041B375                 cmp     eax, 1
.text:0041B378                 jz      short loc_41B3B3
.text:0041B37A                 test    eax, eax
.text:0041B37C                 jnz     loc_41B137
.text:0041B382                 mov     dword ptr [ebx], 7263694Dh
.text:0041B388                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B38F                 mov     dword ptr [ebx+8], 69572074h
.text:0041B396                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B39D                 mov     dword ptr [ebx+10h], 30322073h
.text:0041B3A4                 mov     word ptr [ebx+14h], 3030h
.text:0041B3AA                 mov     byte ptr [ebx+16h], 0
.text:0041B3AE                 jmp     loc_41B137
.text:0041B3B3 ; ---------------------------------------------------------------------------
.text:0041B3B3
.text:0041B3B3 loc_41B3B3:                             ; CODE XREF: .text:0041B378↑j
.text:0041B3B3                 mov     dword ptr [ebx], 7263694Dh
.text:0041B3B9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B3C0                 mov     dword ptr [ebx+8], 69572074h
.text:0041B3C7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B3CE                 mov     dword ptr [ebx+10h], 50582073h
.text:0041B3D5                 jmp     loc_41B133
.text:0041B3DA ; ---------------------------------------------------------------------------
.text:0041B3DA
.text:0041B3DA loc_41B3DA:                             ; CODE XREF: .text:0041B373↑j
.text:0041B3DA                 mov     dword ptr [ebx], 7263694Dh
.text:0041B3E0                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B3E7                 mov     dword ptr [ebx+8], 69572074h
.text:0041B3EE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B3F5                 mov     dword ptr [ebx+10h], 65532073h
.text:0041B3FC                 mov     dword ptr [ebx+14h], 72657672h
.text:0041B403                 mov     dword ptr [ebx+18h], 30303220h
.text:0041B40A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0041B410                 jmp     loc_41B137
.text:0041B415 ; ---------------------------------------------------------------------------
.text:0041B415
.text:0041B415 loc_41B415:                             ; CODE XREF: .text:0041B0F4↑j
.text:0041B415                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B41B                 test    edx, edx
.text:0041B41D                 jnz     loc_41B0FA
.text:0041B423                 mov     dword ptr [ebx], 7263694Dh
.text:0041B429                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B430                 mov     dword ptr [ebx+8], 69572074h
.text:0041B437                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B43E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B445                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041B44C                 mov     byte ptr [ebx+18h], 0
.text:0041B450                 jmp     loc_41B137
.text:0041B455 ; ---------------------------------------------------------------------------
.text:0041B455
.text:0041B455 loc_41B455:                             ; CODE XREF: .text:0041B0EB↑j
.text:0041B455                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041B45C                 jnz     loc_41B0F1
.text:0041B462                 mov     dword ptr [ebx], 7263694Dh
.text:0041B468                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B46F                 mov     dword ptr [ebx+8], 69572074h
.text:0041B476                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B47D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B484                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041B48B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0041B491                 jmp     loc_41B137
.text:0041B496 ; ---------------------------------------------------------------------------
.text:0041B496
.text:0041B496 loc_41B496:                             ; CODE XREF: .text:0041B026↑j
.text:0041B496                 cld
.text:0041B497                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0041B49C                 mov     ecx, 8
.text:0041B4A1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0041B4A8                 mov     edi, ebx
.text:0041B4AA                 rep movsd
.text:0041B4AC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0041B4B3                 mov     [edi+2], dl
.text:0041B4B6                 mov     [edi], si
.text:0041B4B9                 jmp     loc_41B0D0
.text:0041B4B9 ; ---------------------------------------------------------------------------
.text:0041B4BE                 align 10h
.text:0041B4C0
.text:0041B4C0 loc_41B4C0:                             ; CODE XREF: .text:0041B01D↑j
.text:0041B4C0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B4C6                 cmp     ecx, 4
.text:0041B4C9                 jz      loc_41B580
.text:0041B4CF
.text:0041B4CF loc_41B4CF:                             ; CODE XREF: .text:0041B5D6↓j
.text:0041B4CF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B4D5
.text:0041B4D5 loc_41B4D5:                             ; CODE XREF: .text:0041B588↓j
.text:0041B4D5                 cmp     ecx, 4
.text:0041B4D8                 jz      short loc_41B4E4
.text:0041B4DA
.text:0041B4DA loc_41B4DA:                             ; CODE XREF: .text:0041B4EC↓j
.text:0041B4DA                                         ; .text:0041B4F1↓j
.text:0041B4DA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B4DF                 jmp     loc_41B04C
.text:0041B4E4 ; ---------------------------------------------------------------------------
.text:0041B4E4
.text:0041B4E4 loc_41B4E4:                             ; CODE XREF: .text:0041B4D8↑j
.text:0041B4E4                 cmp     edx, 0Ah
.text:0041B4E7                 jz      short loc_41B511
.text:0041B4E9
.text:0041B4E9 loc_41B4E9:                             ; CODE XREF: .text:0041B55F↓j
.text:0041B4E9                 cmp     ecx, 4
.text:0041B4EC                 jnz     short loc_41B4DA
.text:0041B4EE                 cmp     edx, 5Ah ; 'Z'
.text:0041B4F1                 jnz     short loc_41B4DA
.text:0041B4F3                 cld
.text:0041B4F4                 mov     edi, ebx
.text:0041B4F6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041B4FB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0041B502                 mov     ecx, 9
.text:0041B507                 rep movsd
.text:0041B509                 mov     [edi], bx
.text:0041B50C                 jmp     loc_41B0D0
.text:0041B511 ; ---------------------------------------------------------------------------
.text:0041B511
.text:0041B511 loc_41B511:                             ; CODE XREF: .text:0041B4E7↑j
.text:0041B511                 mov     dword ptr [ebx], 7263694Dh
.text:0041B517                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B51E                 mov     dword ptr [ebx+8], 69572074h
.text:0041B525                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B52C                 mov     dword ptr [ebx+10h], 38392073h
.text:0041B533                 mov     byte ptr [ebx+14h], 0
.text:0041B537                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041B53D                 lea     edi, [edx-7CFh]
.text:0041B543                 cmp     edi, 0B7h ; '·'
.text:0041B549                 jbe     short loc_41B573
.text:0041B54B                 cmp     edx, 886h
.text:0041B551                 ja      short loc_41B561
.text:0041B553
.text:0041B553 loc_41B553:                             ; CODE XREF: .text:0041B571↓j
.text:0041B553                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B559                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B55F                 jmp     short loc_41B4E9
.text:0041B561 ; ---------------------------------------------------------------------------
.text:0041B561
.text:0041B561 loc_41B561:                             ; CODE XREF: .text:0041B551↑j
.text:0041B561                 mov     dword ptr [esp+4], offset loc_41AFE6
.text:0041B569
.text:0041B569 loc_41B569:                             ; CODE XREF: .text:0041B57B↓j
.text:0041B569                 mov     [esp], ebx
.text:0041B56C                 call    strcat
.text:0041B571                 jmp     short loc_41B553
.text:0041B573 ; ---------------------------------------------------------------------------
.text:0041B573
.text:0041B573 loc_41B573:                             ; CODE XREF: .text:0041B549↑j
.text:0041B573                 mov     dword ptr [esp+4], 41AFEAh
.text:0041B57B                 jmp     short loc_41B569
.text:0041B57B ; ---------------------------------------------------------------------------
.text:0041B57D                 align 10h
.text:0041B580
.text:0041B580 loc_41B580:                             ; CODE XREF: .text:0041B4C9↑j
.text:0041B580                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B586                 test    edx, edx
.text:0041B588                 jnz     loc_41B4D5
.text:0041B58E                 mov     dword ptr [ebx], 7263694Dh
.text:0041B594                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B59B                 mov     dword ptr [ebx+8], 69572074h
.text:0041B5A2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B5A9                 mov     dword ptr [ebx+10h], 35392073h
.text:0041B5B0                 mov     byte ptr [ebx+14h], 0
.text:0041B5B4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041B5BA                 lea     ecx, [edx-3B7h]
.text:0041B5C0                 cmp     ecx, 81h
.text:0041B5C6                 jbe     short loc_41B5ED
.text:0041B5C8                 cmp     edx, 438h
.text:0041B5CE                 ja      short loc_41B5DB
.text:0041B5D0
.text:0041B5D0 loc_41B5D0:                             ; CODE XREF: .text:0041B5EB↓j
.text:0041B5D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B5D6                 jmp     loc_41B4CF
.text:0041B5DB ; ---------------------------------------------------------------------------
.text:0041B5DB
.text:0041B5DB loc_41B5DB:                             ; CODE XREF: .text:0041B5CE↑j
.text:0041B5DB                 mov     dword ptr [esp+4], offset loc_41AFEF
.text:0041B5E3
.text:0041B5E3 loc_41B5E3:                             ; CODE XREF: .text:0041B5F5↓j
.text:0041B5E3                 mov     [esp], ebx
.text:0041B5E6                 call    strcat
.text:0041B5EB                 jmp     short loc_41B5D0
.text:0041B5ED ; ---------------------------------------------------------------------------
.text:0041B5ED
.text:0041B5ED loc_41B5ED:                             ; CODE XREF: .text:0041B5C6↑j
.text:0041B5ED                 mov     dword ptr [esp+4], 41AFEAh
.text:0041B5F5                 jmp     short loc_41B5E3
.text:0041B5F5 ; ---------------------------------------------------------------------------
.text:0041B5F7                 align 10h
.text:0041B600
.text:0041B600 ; =============== S U B R O U T I N E =======================================
.text:0041B600
.text:0041B600
.text:0041B600 sub_41B600      proc near               ; CODE XREF: .text:004196CE↑p
.text:0041B600                                         ; sub_419B50+12A↑p
.text:0041B600                 sub     esp, 0Ch
.text:0041B603                 call    sub_41B710
.text:0041B608                 mov     eax, ds:dword_422860
.text:0041B60D                 add     esp, 0Ch
.text:0041B610                 retn
.text:0041B610 sub_41B600      endp
.text:0041B610
.text:0041B611 ; ---------------------------------------------------------------------------
.text:0041B611                 jmp     short loc_41B620
.text:0041B611 ; ---------------------------------------------------------------------------
.text:0041B613                 align 10h
.text:0041B620
.text:0041B620 loc_41B620:                             ; CODE XREF: .text:0041B611↑j
.text:0041B620                 sub     esp, 0Ch
.text:0041B623                 call    sub_41B710
.text:0041B628                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B62D                 add     esp, 0Ch
.text:0041B630                 retn
.text:0041B631 ; ---------------------------------------------------------------------------
.text:0041B631                 jmp     short loc_41B640
.text:0041B631 ; ---------------------------------------------------------------------------
.text:0041B633                 align 10h
.text:0041B640
.text:0041B640 loc_41B640:                             ; CODE XREF: .text:0041B631↑j
.text:0041B640                 sub     esp, 0Ch
.text:0041B643                 call    sub_41B710
.text:0041B648                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041B64D                 add     esp, 0Ch
.text:0041B650                 retn
.text:0041B651 ; ---------------------------------------------------------------------------
.text:0041B651                 jmp     short loc_41B660
.text:0041B651 ; ---------------------------------------------------------------------------
.text:0041B653                 align 10h
.text:0041B660
.text:0041B660 loc_41B660:                             ; CODE XREF: .text:0041B651↑j
.text:0041B660                 sub     esp, 0Ch
.text:0041B663                 call    sub_41B710
.text:0041B668                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B66D                 add     esp, 0Ch
.text:0041B670                 retn
.text:0041B671 ; ---------------------------------------------------------------------------
.text:0041B671                 jmp     short loc_41B680
.text:0041B671 ; ---------------------------------------------------------------------------
.text:0041B673                 align 10h
.text:0041B680
.text:0041B680 loc_41B680:                             ; CODE XREF: .text:0041B671↑j
.text:0041B680                 sub     esp, 0Ch
.text:0041B683                 call    GetVersion
.text:0041B688                 shr     eax, 10h
.text:0041B68B                 add     esp, 0Ch
.text:0041B68E                 retn
.text:0041B68E ; ---------------------------------------------------------------------------
.text:0041B68F                 align 10h
.text:0041B690                 sub     esp, 0Ch
.text:0041B693                 call    sub_41B710
.text:0041B698                 xor     eax, eax
.text:0041B69A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0041B6A1                 setz    al
.text:0041B6A4                 add     esp, 0Ch
.text:0041B6A7                 retn
.text:0041B6A7 ; ---------------------------------------------------------------------------
.text:0041B6A8                 align 10h
.text:0041B6B0
.text:0041B6B0 ; =============== S U B R O U T I N E =======================================
.text:0041B6B0
.text:0041B6B0
.text:0041B6B0 sub_41B6B0      proc near               ; CODE XREF: .text:loc_418BE0↑p
.text:0041B6B0                                         ; .text:loc_4196B4↑p ...
.text:0041B6B0                 sub     esp, 0Ch
.text:0041B6B3                 call    sub_41B710
.text:0041B6B8                 xor     eax, eax
.text:0041B6BA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0041B6C1                 setz    al
.text:0041B6C4                 add     esp, 0Ch
.text:0041B6C7                 retn
.text:0041B6C7 sub_41B6B0      endp
.text:0041B6C7
.text:0041B6C7 ; ---------------------------------------------------------------------------
.text:0041B6C8                 align 10h
.text:0041B6D0                 sub     esp, 0Ch
.text:0041B6D3                 call    sub_41B710
.text:0041B6D8                 xor     eax, eax
.text:0041B6DA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0041B6E1                 setz    al
.text:0041B6E4                 add     esp, 0Ch
.text:0041B6E7                 retn
.text:0041B6E7 ; ---------------------------------------------------------------------------
.text:0041B6E8                 align 10h
.text:0041B6F0                 sub     esp, 0Ch
.text:0041B6F3                 call    sub_41B710
.text:0041B6F8                 xor     eax, eax
.text:0041B6FA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0041B701                 setz    al
.text:0041B704                 add     esp, 0Ch
.text:0041B707                 retn
.text:0041B707 ; ---------------------------------------------------------------------------
.text:0041B708                 align 10h
.text:0041B710
.text:0041B710 ; =============== S U B R O U T I N E =======================================
.text:0041B710
.text:0041B710
.text:0041B710 sub_41B710      proc near               ; CODE XREF: .text:0041B010↑p
.text:0041B710                                         ; sub_41B600+3↑p ...
.text:0041B710
.text:0041B710 lpVersionInformation= dword ptr -0BCh
.text:0041B710 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0041B710
.text:0041B710                 sub     esp, 0BCh
.text:0041B716                 mov     edx, ds:dword_422910
.text:0041B71C                 test    edx, edx
.text:0041B71E                 jz      short loc_41B730
.text:0041B720
.text:0041B720 loc_41B720:                             ; CODE XREF: sub_41B710+7B↓j
.text:0041B720                 mov     edx, 1
.text:0041B725
.text:0041B725 loc_41B725:                             ; CODE XREF: sub_41B710+217↓j
.text:0041B725                 mov     eax, edx
.text:0041B727                 add     esp, 0BCh
.text:0041B72D                 retn
.text:0041B72D ; ---------------------------------------------------------------------------
.text:0041B72E                 align 10h
.text:0041B730
.text:0041B730 loc_41B730:                             ; CODE XREF: sub_41B710+E↑j
.text:0041B730                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0041B737                 mov     edx, 9Ch ; 'œ'
.text:0041B73C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0041B742                 call    GetVersionExA
.text:0041B747                 sub     esp, 4
.text:0041B74A                 test    eax, eax
.text:0041B74C                 jz      loc_41B904
.text:0041B752
.text:0041B752 loc_41B752:                             ; CODE XREF: sub_41B710+245↓j
.text:0041B752                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0041B759                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B75E                 cmp     eax, 1
.text:0041B761                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041B767                 jz      loc_41B850
.text:0041B76D                 cmp     eax, 1
.text:0041B770                 jb      loc_41B840
.text:0041B776                 cmp     eax, 2
.text:0041B779                 jz      short loc_41B79A
.text:0041B77B                 cmp     eax, 3
.text:0041B77E                 jz      short loc_41B78D
.text:0041B780
.text:0041B780 loc_41B780:                             ; CODE XREF: sub_41B710+88↓j
.text:0041B780                                         ; sub_41B710+C0↓j ...
.text:0041B780                 mov     edx, 1
.text:0041B785                 mov     ds:dword_422910, edx
.text:0041B78B                 jmp     short loc_41B720
.text:0041B78D ; ---------------------------------------------------------------------------
.text:0041B78D
.text:0041B78D loc_41B78D:                             ; CODE XREF: sub_41B710+6E↑j
.text:0041B78D                 mov     ecx, 17h
.text:0041B792
.text:0041B792 loc_41B792:                             ; CODE XREF: sub_41B710+1A7↓j
.text:0041B792                 mov     ds:dword_422860, ecx
.text:0041B798                 jmp     short loc_41B780
.text:0041B79A ; ---------------------------------------------------------------------------
.text:0041B79A
.text:0041B79A loc_41B79A:                             ; CODE XREF: sub_41B710+69↑j
.text:0041B79A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041B79F                 cmp     eax, 3
.text:0041B7A2                 jz      short loc_41B81B
.text:0041B7A4                 cmp     eax, 4
.text:0041B7A7                 jz      short loc_41B80A
.text:0041B7A9
.text:0041B7A9 loc_41B7A9:                             ; CODE XREF: sub_41B710+102↓j
.text:0041B7A9                 cmp     eax, 4
.text:0041B7AC                 ja      short loc_41B7D2
.text:0041B7AE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B7B4                 test    ecx, ecx
.text:0041B7B6                 jnz     short loc_41B7D2
.text:0041B7B8                 mov     edx, 1Eh
.text:0041B7BD
.text:0041B7BD loc_41B7BD:                             ; CODE XREF: sub_41B710+DF↓j
.text:0041B7BD                 mov     ds:dword_422860, edx
.text:0041B7C3
.text:0041B7C3 loc_41B7C3:                             ; CODE XREF: sub_41B710+C5↓j
.text:0041B7C3                                         ; sub_41B710+D8↓j ...
.text:0041B7C3                 movzx   ecx, ds:word_422904
.text:0041B7CA                 add     ds:dword_422860, ecx
.text:0041B7D0                 jmp     short loc_41B780
.text:0041B7D2 ; ---------------------------------------------------------------------------
.text:0041B7D2
.text:0041B7D2 loc_41B7D2:                             ; CODE XREF: sub_41B710+9C↑j
.text:0041B7D2                                         ; sub_41B710+A6↑j
.text:0041B7D2                 cmp     eax, 5
.text:0041B7D5                 jnz     short loc_41B7C3
.text:0041B7D7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B7DC                 cmp     eax, 2
.text:0041B7DF                 jz      short loc_41B7FE
.text:0041B7E1                 cmp     eax, 1
.text:0041B7E4                 jz      short loc_41B7F1
.text:0041B7E6                 test    eax, eax
.text:0041B7E8                 jnz     short loc_41B7C3
.text:0041B7EA                 mov     edx, 32h ; '2'
.text:0041B7EF                 jmp     short loc_41B7BD
.text:0041B7F1 ; ---------------------------------------------------------------------------
.text:0041B7F1
.text:0041B7F1 loc_41B7F1:                             ; CODE XREF: sub_41B710+D4↑j
.text:0041B7F1                 mov     ecx, 3Ch ; '<'
.text:0041B7F6
.text:0041B7F6 loc_41B7F6:                             ; CODE XREF: sub_41B710+122↓j
.text:0041B7F6                 mov     ds:dword_422860, ecx
.text:0041B7FC                 jmp     short loc_41B7C3
.text:0041B7FE ; ---------------------------------------------------------------------------
.text:0041B7FE
.text:0041B7FE loc_41B7FE:                             ; CODE XREF: sub_41B710+CF↑j
.text:0041B7FE                 mov     eax, 46h ; 'F'
.text:0041B803
.text:0041B803 loc_41B803:                             ; CODE XREF: sub_41B710+109↓j
.text:0041B803                                         ; sub_41B710+129↓j
.text:0041B803                 mov     ds:dword_422860, eax
.text:0041B808                 jmp     short loc_41B7C3
.text:0041B80A ; ---------------------------------------------------------------------------
.text:0041B80A
.text:0041B80A loc_41B80A:                             ; CODE XREF: sub_41B710+97↑j
.text:0041B80A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B810                 test    ecx, ecx
.text:0041B812                 jnz     short loc_41B7A9
.text:0041B814                 mov     eax, 28h ; '('
.text:0041B819                 jmp     short loc_41B803
.text:0041B81B ; ---------------------------------------------------------------------------
.text:0041B81B
.text:0041B81B loc_41B81B:                             ; CODE XREF: sub_41B710+92↑j
.text:0041B81B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B820                 cmp     eax, 33h ; '3'
.text:0041B823                 jz      short loc_41B834
.text:0041B825                 cmp     eax, 5
.text:0041B828                 setz    cl
.text:0041B82B                 movzx   edx, cl
.text:0041B82E                 lea     ecx, [edx+edx*4+1Eh]
.text:0041B832                 jmp     short loc_41B7F6
.text:0041B834 ; ---------------------------------------------------------------------------
.text:0041B834
.text:0041B834 loc_41B834:                             ; CODE XREF: sub_41B710+113↑j
.text:0041B834                 mov     eax, 24h ; '$'
.text:0041B839                 jmp     short loc_41B803
.text:0041B839 ; ---------------------------------------------------------------------------
.text:0041B83B                 align 10h
.text:0041B840
.text:0041B840 loc_41B840:                             ; CODE XREF: sub_41B710+60↑j
.text:0041B840                 mov     edx, 2
.text:0041B845                 mov     ds:dword_422860, edx
.text:0041B84B                 jmp     loc_41B780
.text:0041B850 ; ---------------------------------------------------------------------------
.text:0041B850
.text:0041B850 loc_41B850:                             ; CODE XREF: sub_41B710+57↑j
.text:0041B850                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B856                 cmp     ecx, 4
.text:0041B859                 jnz     loc_41B780
.text:0041B85F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B864                 test    eax, eax
.text:0041B866                 jnz     short loc_41B88A
.text:0041B868                 mov     eax, 0Ah
.text:0041B86D                 mov     ds:dword_422860, eax
.text:0041B872                 lea     eax, [edx-3B7h]
.text:0041B878                 cmp     eax, 81h
.text:0041B87D                 ja      short loc_41B8F5
.text:0041B87F                 mov     edx, 0Bh
.text:0041B884
.text:0041B884 loc_41B884:                             ; CODE XREF: sub_41B710+1F2↓j
.text:0041B884                 mov     ds:dword_422860, edx
.text:0041B88A
.text:0041B88A loc_41B88A:                             ; CODE XREF: sub_41B710+156↑j
.text:0041B88A                                         ; sub_41B710+1EB↓j
.text:0041B88A                 cmp     ecx, 4
.text:0041B88D                 jnz     loc_41B780
.text:0041B893                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0041B89A                 jz      short loc_41B8BC
.text:0041B89C
.text:0041B89C loc_41B89C:                             ; CODE XREF: sub_41B710+1D4↓j
.text:0041B89C                                         ; sub_41B710+1DC↓j
.text:0041B89C                 cmp     ecx, 4
.text:0041B89F                 jnz     loc_41B780
.text:0041B8A5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041B8AC                 jnz     loc_41B780
.text:0041B8B2                 mov     ecx, 12h
.text:0041B8B7                 jmp     loc_41B792
.text:0041B8BC ; ---------------------------------------------------------------------------
.text:0041B8BC
.text:0041B8BC loc_41B8BC:                             ; CODE XREF: sub_41B710+18A↑j
.text:0041B8BC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041B8C2                 mov     eax, 0Eh
.text:0041B8C7                 mov     ds:dword_422860, eax
.text:0041B8CC                 lea     eax, [edx-7CFh]
.text:0041B8D2                 cmp     eax, 0B7h ; '·'
.text:0041B8D7                 ja      short loc_41B8E6
.text:0041B8D9                 mov     edx, 0Fh
.text:0041B8DE
.text:0041B8DE loc_41B8DE:                             ; CODE XREF: sub_41B710+1E3↓j
.text:0041B8DE                 mov     ds:dword_422860, edx
.text:0041B8E4                 jmp     short loc_41B89C
.text:0041B8E6 ; ---------------------------------------------------------------------------
.text:0041B8E6
.text:0041B8E6 loc_41B8E6:                             ; CODE XREF: sub_41B710+1C7↑j
.text:0041B8E6                 cmp     edx, 886h
.text:0041B8EC                 jbe     short loc_41B89C
.text:0041B8EE                 mov     edx, 10h
.text:0041B8F3                 jmp     short loc_41B8DE
.text:0041B8F5 ; ---------------------------------------------------------------------------
.text:0041B8F5
.text:0041B8F5 loc_41B8F5:                             ; CODE XREF: sub_41B710+16D↑j
.text:0041B8F5                 cmp     edx, 438h
.text:0041B8FB                 jbe     short loc_41B88A
.text:0041B8FD                 mov     edx, 0Ch
.text:0041B902                 jmp     short loc_41B884
.text:0041B904 ; ---------------------------------------------------------------------------
.text:0041B904
.text:0041B904 loc_41B904:                             ; CODE XREF: sub_41B710+3C↑j
.text:0041B904                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041B90C                 xor     edx, edx
.text:0041B90E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0041B912                 mov     dword_4210B0, edx
.text:0041B918                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041B91B                 call    GetVersionExA
.text:0041B920                 sub     esp, 4
.text:0041B923                 xor     edx, edx
.text:0041B925                 test    eax, eax
.text:0041B927                 jz      loc_41B725
.text:0041B92D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0041B931                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0041B935                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041B93B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041B93F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0041B945                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0041B949                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041B94F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0041B955                 jmp     loc_41B752
.text:0041B955 sub_41B710      endp
.text:0041B955
.text:0041B955 ; ---------------------------------------------------------------------------
.text:0041B95A                 align 10h
.text:0041B960 aNotset         db 'notset',0           ; DATA XREF: .data:off_4210C0↓o
.text:0041B960                                         ; .data:off_4210C4↓o
.text:0041B967 ; ---------------------------------------------------------------------------
.text:0041B967
.text:0041B967 loc_41B967:                             ; DATA XREF: .text:loc_41BA05↓o
.text:0041B967                 jb      short loc_41B9E0
.text:0041B969                 add     [eax], ah
.text:0041B96B                 or      [eax], eax
.text:0041B96D
.text:0041B96D loc_41B96D:                             ; DATA XREF: .text:0041BA58↓o
.text:0041B96D                                         ; .text:0041BABE↓o ...
.text:0041B96D                 add     [eax], ah
.text:0041B96F                 and     eax, 64252064h
.text:0041B974                 and     [eax], al
.text:0041B976                 lea     esi, [esi+0]
.text:0041B979                 lea     edi, [edi+0]
.text:0041B980                 push    ebp
.text:0041B981                 push    edi
.text:0041B982                 push    esi
.text:0041B983                 push    ebx
.text:0041B984                 sub     esp, 14Ch
.text:0041B98A                 mov     edx, off_4210C0 ; "notset"
.text:0041B990                 mov     edi, [esp+164h]
.text:0041B997                 mov     ebp, [esp+168h]
.text:0041B99E                 mov     [esp+4], edx
.text:0041B9A2                 mov     edx, off_4210C4 ; "notset"
.text:0041B9A8                 mov     [esp], edx
.text:0041B9AB                 call    strcmp
.text:0041B9B0                 test    eax, eax
.text:0041B9B2                 jz      loc_41BDA0
.text:0041B9B8
.text:0041B9B8 loc_41B9B8:                             ; CODE XREF: .text:0041BDEC↓j
.text:0041B9B8                 lea     ebx, [esp+20h]
.text:0041B9BC                 lea     esi, [esi+0]
.text:0041B9C0
.text:0041B9C0 loc_41B9C0:                             ; CODE XREF: .text:0041B9F6↓j
.text:0041B9C0                 mov     [esp+4], ebx
.text:0041B9C4                 mov     ecx, off_4210C4 ; "notset"
.text:0041B9CA                 mov     [esp], ecx
.text:0041B9CD                 call    loc_419BF0
.text:0041B9D2                 test    eax, eax
.text:0041B9D4                 jns     short loc_41BA05
.text:0041B9D6                 mov     eax, off_4210C4 ; "notset"
.text:0041B9DB                 cmp     byte ptr [eax], 0
.text:0041B9DE                 jz      short loc_41B9F8
.text:0041B9E0
.text:0041B9E0 loc_41B9E0:                             ; CODE XREF: .text:loc_41B967↑j
.text:0041B9E0                 mov     dword ptr [esp+4], 0
.text:0041B9E8                 mov     [esp], eax
.text:0041B9EB                 call    strchr
.text:0041B9F0                 inc     eax
.text:0041B9F1                 mov     off_4210C4, eax ; "notset"
.text:0041B9F6                 jmp     short loc_41B9C0
.text:0041B9F8 ; ---------------------------------------------------------------------------
.text:0041B9F8
.text:0041B9F8 loc_41B9F8:                             ; CODE XREF: .text:0041B9DE↑j
.text:0041B9F8                 xor     eax, eax
.text:0041B9FA
.text:0041B9FA loc_41B9FA:                             ; CODE XREF: .text:0041BBBC↓j
.text:0041B9FA                 add     esp, 14Ch
.text:0041BA00                 pop     ebx
.text:0041BA01                 pop     esi
.text:0041BA02                 pop     edi
.text:0041BA03                 pop     ebp
.text:0041BA04                 retn
.text:0041BA05 ; ---------------------------------------------------------------------------
.text:0041BA05
.text:0041BA05 loc_41BA05:                             ; CODE XREF: .text:0041B9D4↑j
.text:0041BA05                 mov     dword ptr [edi+0Ch], offset loc_41B967
.text:0041BA0C                 lea     ecx, [esp+0D6h]
.text:0041BA13                 lea     edx, [esp+6Ch]
.text:0041BA17                 mov     [edi+4], ecx
.text:0041BA1A                 lea     ebx, [esp+7Ch]
.text:0041BA1E                 mov     [edi+8], edx
.text:0041BA21                 mov     [edi], ebx
.text:0041BA23                 mov     [esp], ebp
.text:0041BA26                 mov     [esp+4], edi
.text:0041BA2A                 call    ___addmntentstr
.text:0041BA2F                 mov     [esp], ebp
.text:0041BA32                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BA3A                 call    strspn
.text:0041BA3F                 mov     dword ptr [esp+4], 0
.text:0041BA47                 mov     ebx, off_4210C4 ; "notset"
.text:0041BA4D                 lea     esi, [eax+ebp]
.text:0041BA50                 mov     [esp+1Ch], esi
.text:0041BA54                 lea     ebp, [esp+1Ch]
.text:0041BA58                 mov     esi, offset loc_41B96D
.text:0041BA5D                 mov     [esp], ebx
.text:0041BA60                 call    strchr
.text:0041BA65                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BA6D                 inc     eax
.text:0041BA6E                 mov     off_4210C4, eax ; "notset"
.text:0041BA73                 mov     [esp], ebp
.text:0041BA76                 call    sub_41D0D0
.text:0041BA7B                 test    eax, eax
.text:0041BA7D                 mov     ebx, eax
.text:0041BA7F                 jz      short loc_41BAA8
.text:0041BA81                 mov     edx, eax
.text:0041BA83                 mov     ecx, eax
.text:0041BA85                 lea     esi, [esi+0]
.text:0041BA89                 lea     edi, [edi+0]
.text:0041BA90
.text:0041BA90 loc_41BA90:                             ; CODE XREF: .text:0041BAA6↓j
.text:0041BA90                 movzx   eax, byte ptr [edx]
.text:0041BA93                 cmp     al, 5Ch ; '\'
.text:0041BA95                 jz      loc_41BD44
.text:0041BA9B
.text:0041BA9B loc_41BA9B:                             ; CODE XREF: .text:0041BD4C↓j
.text:0041BA9B                                         ; .text:0041BD5A↓j ...
.text:0041BA9B                 mov     [ecx], al
.text:0041BA9D
.text:0041BA9D loc_41BA9D:                             ; CODE XREF: .text:0041BD6E↓j
.text:0041BA9D                 inc     ecx
.text:0041BA9E
.text:0041BA9E loc_41BA9E:                             ; CODE XREF: .text:0041BD86↓j
.text:0041BA9E                 movzx   eax, byte ptr [edx]
.text:0041BAA1                 mov     esi, ebx
.text:0041BAA3                 inc     edx
.text:0041BAA4                 test    al, al
.text:0041BAA6                 jnz     short loc_41BA90
.text:0041BAA8
.text:0041BAA8 loc_41BAA8:                             ; CODE XREF: .text:0041BA7F↑j
.text:0041BAA8                 mov     [edi], esi
.text:0041BAAA                 mov     eax, [esp+1Ch]
.text:0041BAAE                 test    eax, eax
.text:0041BAB0                 jnz     loc_41BD2B
.text:0041BAB6
.text:0041BAB6 loc_41BAB6:                             ; CODE XREF: .text:0041BD3F↓j
.text:0041BAB6                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BABE                 mov     esi, offset loc_41B96D
.text:0041BAC3                 mov     [esp], ebp
.text:0041BAC6                 call    sub_41D0D0
.text:0041BACB                 test    eax, eax
.text:0041BACD                 mov     ebx, eax
.text:0041BACF                 jz      short loc_41BAF8
.text:0041BAD1                 mov     edx, eax
.text:0041BAD3                 mov     ecx, eax
.text:0041BAD5                 lea     esi, [esi+0]
.text:0041BAD9                 lea     edi, [edi+0]
.text:0041BAE0
.text:0041BAE0 loc_41BAE0:                             ; CODE XREF: .text:0041BAF6↓j
.text:0041BAE0                 movzx   eax, byte ptr [edx]
.text:0041BAE3                 cmp     al, 5Ch ; '\'
.text:0041BAE5                 jz      loc_41BCD3
.text:0041BAEB
.text:0041BAEB loc_41BAEB:                             ; CODE XREF: .text:0041BCDB↓j
.text:0041BAEB                                         ; .text:0041BCE9↓j ...
.text:0041BAEB                 mov     [ecx], al
.text:0041BAED
.text:0041BAED loc_41BAED:                             ; CODE XREF: .text:0041BCFD↓j
.text:0041BAED                 inc     ecx
.text:0041BAEE
.text:0041BAEE loc_41BAEE:                             ; CODE XREF: .text:0041BD15↓j
.text:0041BAEE                 movzx   eax, byte ptr [edx]
.text:0041BAF1                 mov     esi, ebx
.text:0041BAF3                 inc     edx
.text:0041BAF4                 test    al, al
.text:0041BAF6                 jnz     short loc_41BAE0
.text:0041BAF8
.text:0041BAF8 loc_41BAF8:                             ; CODE XREF: .text:0041BACF↑j
.text:0041BAF8                 mov     [edi+4], esi
.text:0041BAFB                 mov     eax, [esp+1Ch]
.text:0041BAFF                 test    eax, eax
.text:0041BB01                 jnz     loc_41BCBA
.text:0041BB07
.text:0041BB07 loc_41BB07:                             ; CODE XREF: .text:0041BCCE↓j
.text:0041BB07                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BB0F                 mov     esi, offset loc_41B96D
.text:0041BB14                 mov     [esp], ebp
.text:0041BB17                 call    sub_41D0D0
.text:0041BB1C                 test    eax, eax
.text:0041BB1E                 mov     ebx, eax
.text:0041BB20                 jz      short loc_41BB48
.text:0041BB22                 mov     edx, eax
.text:0041BB24                 mov     ecx, eax
.text:0041BB26                 lea     esi, [esi+0]
.text:0041BB29                 lea     edi, [edi+0]
.text:0041BB30
.text:0041BB30 loc_41BB30:                             ; CODE XREF: .text:0041BB46↓j
.text:0041BB30                 movzx   eax, byte ptr [edx]
.text:0041BB33                 cmp     al, 5Ch ; '\'
.text:0041BB35                 jz      loc_41BC62
.text:0041BB3B
.text:0041BB3B loc_41BB3B:                             ; CODE XREF: .text:0041BC6A↓j
.text:0041BB3B                                         ; .text:0041BC78↓j ...
.text:0041BB3B                 mov     [ecx], al
.text:0041BB3D
.text:0041BB3D loc_41BB3D:                             ; CODE XREF: .text:0041BC8C↓j
.text:0041BB3D                 inc     ecx
.text:0041BB3E
.text:0041BB3E loc_41BB3E:                             ; CODE XREF: .text:0041BCA4↓j
.text:0041BB3E                 movzx   eax, byte ptr [edx]
.text:0041BB41                 mov     esi, ebx
.text:0041BB43                 inc     edx
.text:0041BB44                 test    al, al
.text:0041BB46                 jnz     short loc_41BB30
.text:0041BB48
.text:0041BB48 loc_41BB48:                             ; CODE XREF: .text:0041BB20↑j
.text:0041BB48                 mov     [edi+8], esi
.text:0041BB4B                 mov     eax, [esp+1Ch]
.text:0041BB4F                 test    eax, eax
.text:0041BB51                 jnz     loc_41BC49
.text:0041BB57
.text:0041BB57 loc_41BB57:                             ; CODE XREF: .text:0041BC5D↓j
.text:0041BB57                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BB5F                 mov     esi, offset loc_41B96D
.text:0041BB64                 mov     [esp], ebp
.text:0041BB67                 call    sub_41D0D0
.text:0041BB6C                 test    eax, eax
.text:0041BB6E                 mov     ebx, eax
.text:0041BB70                 jz      short loc_41BB94
.text:0041BB72                 mov     edx, eax
.text:0041BB74                 mov     ecx, eax
.text:0041BB76                 lea     esi, [esi+0]
.text:0041BB79                 lea     edi, [edi+0]
.text:0041BB80
.text:0041BB80 loc_41BB80:                             ; CODE XREF: .text:0041BB92↓j
.text:0041BB80                 movzx   eax, byte ptr [edx]
.text:0041BB83                 cmp     al, 5Ch ; '\'
.text:0041BB85                 jz      short loc_41BBF5
.text:0041BB87
.text:0041BB87 loc_41BB87:                             ; CODE XREF: .text:0041BBFD↓j
.text:0041BB87                                         ; .text:0041BC07↓j ...
.text:0041BB87                 mov     [ecx], al
.text:0041BB89
.text:0041BB89 loc_41BB89:                             ; CODE XREF: .text:0041BC1B↓j
.text:0041BB89                 inc     ecx
.text:0041BB8A
.text:0041BB8A loc_41BB8A:                             ; CODE XREF: .text:0041BC33↓j
.text:0041BB8A                 movzx   eax, byte ptr [edx]
.text:0041BB8D                 mov     esi, ebx
.text:0041BB8F                 inc     edx
.text:0041BB90                 test    al, al
.text:0041BB92                 jnz     short loc_41BB80
.text:0041BB94
.text:0041BB94 loc_41BB94:                             ; CODE XREF: .text:0041BB70↑j
.text:0041BB94                 mov     [edi+0Ch], esi
.text:0041BB97                 xor     eax, eax
.text:0041BB99                 mov     edx, [esp+1Ch]
.text:0041BB9D                 test    edx, edx
.text:0041BB9F                 jnz     short loc_41BBD5
.text:0041BBA1
.text:0041BBA1 loc_41BBA1:                             ; CODE XREF: .text:0041BBF3↓j
.text:0041BBA1                 cmp     eax, 1
.text:0041BBA4                 jz      short loc_41BBCC
.text:0041BBA6                 cmp     eax, 1
.text:0041BBA9                 jle     short loc_41BBC1
.text:0041BBAB
.text:0041BBAB loc_41BBAB:                             ; CODE XREF: .text:0041BBC3↓j
.text:0041BBAB                                         ; .text:0041BBD3↓j
.text:0041BBAB                 mov     edx, [esp+160h]
.text:0041BBB2                 mov     [esp], edx
.text:0041BBB5                 call    sub_41D070
.text:0041BBBA                 mov     eax, edi
.text:0041BBBC                 jmp     loc_41B9FA
.text:0041BBC1 ; ---------------------------------------------------------------------------
.text:0041BBC1
.text:0041BBC1 loc_41BBC1:                             ; CODE XREF: .text:0041BBA9↑j
.text:0041BBC1                 test    eax, eax
.text:0041BBC3                 jnz     short loc_41BBAB
.text:0041BBC5                 mov     dword ptr [edi+10h], 0
.text:0041BBCC
.text:0041BBCC loc_41BBCC:                             ; CODE XREF: .text:0041BBA4↑j
.text:0041BBCC                 mov     dword ptr [edi+14h], 0
.text:0041BBD3                 jmp     short loc_41BBAB
.text:0041BBD5 ; ---------------------------------------------------------------------------
.text:0041BBD5
.text:0041BBD5 loc_41BBD5:                             ; CODE XREF: .text:0041BB9F↑j
.text:0041BBD5                 mov     dword ptr [esp+4], 41B96Eh
.text:0041BBDD                 lea     esi, [edi+14h]
.text:0041BBE0                 lea     ebp, [edi+10h]
.text:0041BBE3                 mov     [esp+0Ch], esi
.text:0041BBE7                 mov     [esp+8], ebp
.text:0041BBEB                 mov     [esp], edx
.text:0041BBEE                 call    sscanf
.text:0041BBF3                 jmp     short loc_41BBA1
.text:0041BBF5 ; ---------------------------------------------------------------------------
.text:0041BBF5
.text:0041BBF5 loc_41BBF5:                             ; CODE XREF: .text:0041BB85↑j
.text:0041BBF5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BBF9                 jz      short loc_41BC38
.text:0041BBFB
.text:0041BBFB loc_41BBFB:                             ; CODE XREF: .text:0041BC3C↓j
.text:0041BBFB                                         ; .text:0041BC42↓j
.text:0041BBFB                 cmp     al, 5Ch ; '\'
.text:0041BBFD                 jnz     short loc_41BB87
.text:0041BBFF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BC03                 jz      short loc_41BC20
.text:0041BC05
.text:0041BC05 loc_41BC05:                             ; CODE XREF: .text:0041BC24↓j
.text:0041BC05                                         ; .text:0041BC2A↓j
.text:0041BC05                 cmp     al, 5Ch ; '\'
.text:0041BC07                 jnz     loc_41BB87
.text:0041BC0D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BC11                 jnz     loc_41BB87
.text:0041BC17                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BC1A                 inc     edx
.text:0041BC1B                 jmp     loc_41BB89
.text:0041BC20 ; ---------------------------------------------------------------------------
.text:0041BC20
.text:0041BC20 loc_41BC20:                             ; CODE XREF: .text:0041BC03↑j
.text:0041BC20                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BC24                 jnz     short loc_41BC05
.text:0041BC26                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BC2A                 jnz     short loc_41BC05
.text:0041BC2C                 mov     byte ptr [ecx], 9
.text:0041BC2F
.text:0041BC2F loc_41BC2F:                             ; CODE XREF: .text:0041BC47↓j
.text:0041BC2F                 inc     ecx
.text:0041BC30                 add     edx, 3
.text:0041BC33                 jmp     loc_41BB8A
.text:0041BC38 ; ---------------------------------------------------------------------------
.text:0041BC38
.text:0041BC38 loc_41BC38:                             ; CODE XREF: .text:0041BBF9↑j
.text:0041BC38                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BC3C                 jnz     short loc_41BBFB
.text:0041BC3E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BC42                 jnz     short loc_41BBFB
.text:0041BC44                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BC47                 jmp     short loc_41BC2F
.text:0041BC49 ; ---------------------------------------------------------------------------
.text:0041BC49
.text:0041BC49 loc_41BC49:                             ; CODE XREF: .text:0041BB51↑j
.text:0041BC49                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BC51                 mov     [esp], eax
.text:0041BC54                 call    strspn
.text:0041BC59                 add     [esp+1Ch], eax
.text:0041BC5D                 jmp     loc_41BB57
.text:0041BC62 ; ---------------------------------------------------------------------------
.text:0041BC62
.text:0041BC62 loc_41BC62:                             ; CODE XREF: .text:0041BB35↑j
.text:0041BC62                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BC66                 jz      short loc_41BCA9
.text:0041BC68
.text:0041BC68 loc_41BC68:                             ; CODE XREF: .text:0041BCAD↓j
.text:0041BC68                                         ; .text:0041BCB3↓j
.text:0041BC68                 cmp     al, 5Ch ; '\'
.text:0041BC6A                 jnz     loc_41BB3B
.text:0041BC70                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BC74                 jz      short loc_41BC91
.text:0041BC76
.text:0041BC76 loc_41BC76:                             ; CODE XREF: .text:0041BC95↓j
.text:0041BC76                                         ; .text:0041BC9B↓j
.text:0041BC76                 cmp     al, 5Ch ; '\'
.text:0041BC78                 jnz     loc_41BB3B
.text:0041BC7E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BC82                 jnz     loc_41BB3B
.text:0041BC88                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BC8B                 inc     edx
.text:0041BC8C                 jmp     loc_41BB3D
.text:0041BC91 ; ---------------------------------------------------------------------------
.text:0041BC91
.text:0041BC91 loc_41BC91:                             ; CODE XREF: .text:0041BC74↑j
.text:0041BC91                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BC95                 jnz     short loc_41BC76
.text:0041BC97                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BC9B                 jnz     short loc_41BC76
.text:0041BC9D                 mov     byte ptr [ecx], 9
.text:0041BCA0
.text:0041BCA0 loc_41BCA0:                             ; CODE XREF: .text:0041BCB8↓j
.text:0041BCA0                 inc     ecx
.text:0041BCA1                 add     edx, 3
.text:0041BCA4                 jmp     loc_41BB3E
.text:0041BCA9 ; ---------------------------------------------------------------------------
.text:0041BCA9
.text:0041BCA9 loc_41BCA9:                             ; CODE XREF: .text:0041BC66↑j
.text:0041BCA9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BCAD                 jnz     short loc_41BC68
.text:0041BCAF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BCB3                 jnz     short loc_41BC68
.text:0041BCB5                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BCB8                 jmp     short loc_41BCA0
.text:0041BCBA ; ---------------------------------------------------------------------------
.text:0041BCBA
.text:0041BCBA loc_41BCBA:                             ; CODE XREF: .text:0041BB01↑j
.text:0041BCBA                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BCC2                 mov     [esp], eax
.text:0041BCC5                 call    strspn
.text:0041BCCA                 add     [esp+1Ch], eax
.text:0041BCCE                 jmp     loc_41BB07
.text:0041BCD3 ; ---------------------------------------------------------------------------
.text:0041BCD3
.text:0041BCD3 loc_41BCD3:                             ; CODE XREF: .text:0041BAE5↑j
.text:0041BCD3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BCD7                 jz      short loc_41BD1A
.text:0041BCD9
.text:0041BCD9 loc_41BCD9:                             ; CODE XREF: .text:0041BD1E↓j
.text:0041BCD9                                         ; .text:0041BD24↓j
.text:0041BCD9                 cmp     al, 5Ch ; '\'
.text:0041BCDB                 jnz     loc_41BAEB
.text:0041BCE1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BCE5                 jz      short loc_41BD02
.text:0041BCE7
.text:0041BCE7 loc_41BCE7:                             ; CODE XREF: .text:0041BD06↓j
.text:0041BCE7                                         ; .text:0041BD0C↓j
.text:0041BCE7                 cmp     al, 5Ch ; '\'
.text:0041BCE9                 jnz     loc_41BAEB
.text:0041BCEF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BCF3                 jnz     loc_41BAEB
.text:0041BCF9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BCFC                 inc     edx
.text:0041BCFD                 jmp     loc_41BAED
.text:0041BD02 ; ---------------------------------------------------------------------------
.text:0041BD02
.text:0041BD02 loc_41BD02:                             ; CODE XREF: .text:0041BCE5↑j
.text:0041BD02                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BD06                 jnz     short loc_41BCE7
.text:0041BD08                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BD0C                 jnz     short loc_41BCE7
.text:0041BD0E                 mov     byte ptr [ecx], 9
.text:0041BD11
.text:0041BD11 loc_41BD11:                             ; CODE XREF: .text:0041BD29↓j
.text:0041BD11                 inc     ecx
.text:0041BD12                 add     edx, 3
.text:0041BD15                 jmp     loc_41BAEE
.text:0041BD1A ; ---------------------------------------------------------------------------
.text:0041BD1A
.text:0041BD1A loc_41BD1A:                             ; CODE XREF: .text:0041BCD7↑j
.text:0041BD1A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BD1E                 jnz     short loc_41BCD9
.text:0041BD20                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BD24                 jnz     short loc_41BCD9
.text:0041BD26                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BD29                 jmp     short loc_41BD11
.text:0041BD2B ; ---------------------------------------------------------------------------
.text:0041BD2B
.text:0041BD2B loc_41BD2B:                             ; CODE XREF: .text:0041BAB0↑j
.text:0041BD2B                 mov     dword ptr [esp+4], 41B96Ah
.text:0041BD33                 mov     [esp], eax
.text:0041BD36                 call    strspn
.text:0041BD3B                 add     [esp+1Ch], eax
.text:0041BD3F                 jmp     loc_41BAB6
.text:0041BD44 ; ---------------------------------------------------------------------------
.text:0041BD44
.text:0041BD44 loc_41BD44:                             ; CODE XREF: .text:0041BA95↑j
.text:0041BD44                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BD48                 jz      short loc_41BD8B
.text:0041BD4A
.text:0041BD4A loc_41BD4A:                             ; CODE XREF: .text:0041BD8F↓j
.text:0041BD4A                                         ; .text:0041BD95↓j
.text:0041BD4A                 cmp     al, 5Ch ; '\'
.text:0041BD4C                 jnz     loc_41BA9B
.text:0041BD52                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BD56                 jz      short loc_41BD73
.text:0041BD58
.text:0041BD58 loc_41BD58:                             ; CODE XREF: .text:0041BD77↓j
.text:0041BD58                                         ; .text:0041BD7D↓j
.text:0041BD58                 cmp     al, 5Ch ; '\'
.text:0041BD5A                 jnz     loc_41BA9B
.text:0041BD60                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BD64                 jnz     loc_41BA9B
.text:0041BD6A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BD6D                 inc     edx
.text:0041BD6E                 jmp     loc_41BA9D
.text:0041BD73 ; ---------------------------------------------------------------------------
.text:0041BD73
.text:0041BD73 loc_41BD73:                             ; CODE XREF: .text:0041BD56↑j
.text:0041BD73                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BD77                 jnz     short loc_41BD58
.text:0041BD79                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BD7D                 jnz     short loc_41BD58
.text:0041BD7F                 mov     byte ptr [ecx], 9
.text:0041BD82
.text:0041BD82 loc_41BD82:                             ; CODE XREF: .text:0041BD9A↓j
.text:0041BD82                 inc     ecx
.text:0041BD83                 add     edx, 3
.text:0041BD86                 jmp     loc_41BA9E
.text:0041BD8B ; ---------------------------------------------------------------------------
.text:0041BD8B
.text:0041BD8B loc_41BD8B:                             ; CODE XREF: .text:0041BD48↑j
.text:0041BD8B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BD8F                 jnz     short loc_41BD4A
.text:0041BD91                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BD95                 jnz     short loc_41BD4A
.text:0041BD97                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BD9A                 jmp     short loc_41BD82
.text:0041BD9A ; ---------------------------------------------------------------------------
.text:0041BD9C                 align 10h
.text:0041BDA0
.text:0041BDA0 loc_41BDA0:                             ; CODE XREF: .text:0041B9B2↑j
.text:0041BDA0                 mov     dword ptr [esp+4], 0
.text:0041BDA8                 mov     dword ptr [esp], 0
.text:0041BDAF                 call    GetLogicalDriveStringsA
.text:0041BDB4                 sub     esp, 8
.text:0041BDB7                 mov     ebx, eax
.text:0041BDB9                 call    GetProcessHeap
.text:0041BDBE                 mov     [esp], eax
.text:0041BDC1                 mov     [esp+8], ebx
.text:0041BDC5                 mov     dword ptr [esp+4], 0
.text:0041BDCD                 call    HeapAlloc
.text:0041BDD2                 sub     esp, 0Ch
.text:0041BDD5                 mov     esi, eax
.text:0041BDD7                 mov     [esp+4], eax
.text:0041BDDB                 mov     [esp], ebx
.text:0041BDDE                 call    GetLogicalDriveStringsA
.text:0041BDE3                 mov     off_4210C4, esi ; "notset"
.text:0041BDE9                 sub     esp, 8
.text:0041BDEC                 jmp     loc_41B9B8
.text:0041BDEC ; ---------------------------------------------------------------------------
.text:0041BDF1 ; const char aSSSSDD[]
.text:0041BDF1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0041BDF1                                         ; DATA XREF: .text:0041BF30↓o
.text:0041BDF1                                         ; ___addmntentstr+F0↓o
.text:0041BE04                 align 10h
.text:0041BE10                 push    esi
.text:0041BE11                 push    ebx
.text:0041BE12                 sub     esp, 44h
.text:0041BE15                 mov     ebx, [esp+54h]
.text:0041BE19                 mov     esi, [esp+50h]
.text:0041BE1D                 mov     edx, [ebx]
.text:0041BE1F                 mov     [esp+20h], edx
.text:0041BE23                 mov     ecx, [ebx+4]
.text:0041BE26                 mov     [esp+24h], ecx
.text:0041BE2A                 mov     edx, [ebx+8]
.text:0041BE2D                 mov     [esp+28h], edx
.text:0041BE31                 mov     ecx, [ebx+0Ch]
.text:0041BE34                 mov     [esp+2Ch], ecx
.text:0041BE38                 mov     edx, [ebx+10h]
.text:0041BE3B                 mov     [esp+30h], edx
.text:0041BE3F                 mov     ecx, [ebx+14h]
.text:0041BE42                 mov     dword ptr [esp+8], 2
.text:0041BE4A                 mov     dword ptr [esp+4], 0
.text:0041BE52                 mov     [esp+34h], ecx
.text:0041BE56                 mov     [esp], esi
.text:0041BE59                 call    sub_41D060
.text:0041BE5E ; ---------------------------------------------------------------------------
.text:0041BE5E                 test    eax, eax
.text:0041BE60                 mov     edx, 1
.text:0041BE65                 jnz     loc_41BF65
.text:0041BE6B                 mov     ebx, [esp+20h]
.text:0041BE6F                 mov     edx, ebx
.text:0041BE71                 movzx   eax, byte ptr [ebx]
.text:0041BE74                 test    al, al
.text:0041BE76                 jz      short loc_41BEA0
.text:0041BE78                 nop
.text:0041BE79                 lea     esi, [esi+0]
.text:0041BE80
.text:0041BE80 loc_41BE80:                             ; CODE XREF: .text:0041BE9E↓j
.text:0041BE80                 cmp     al, 20h ; ' '
.text:0041BE82                 jz      loc_41C0DA
.text:0041BE88                 cmp     al, 9
.text:0041BE8A                 jz      loc_41C0DA
.text:0041BE90                 cmp     al, 5Ch ; '\'
.text:0041BE92                 jz      loc_41C0DA
.text:0041BE98                 inc     ebx
.text:0041BE99                 movzx   eax, byte ptr [ebx]
.text:0041BE9C                 test    al, al
.text:0041BE9E                 jnz     short loc_41BE80
.text:0041BEA0
.text:0041BEA0 loc_41BEA0:                             ; CODE XREF: .text:0041BE76↑j
.text:0041BEA0                                         ; .text:0041C0DC↓j ...
.text:0041BEA0                 mov     ebx, [esp+24h]
.text:0041BEA4                 mov     edx, ebx
.text:0041BEA6                 movzx   eax, byte ptr [ebx]
.text:0041BEA9                 test    al, al
.text:0041BEAB                 jz      short loc_41BED0
.text:0041BEAD                 lea     esi, [esi+0]
.text:0041BEB0
.text:0041BEB0 loc_41BEB0:                             ; CODE XREF: .text:0041BECE↓j
.text:0041BEB0                 cmp     al, 20h ; ' '
.text:0041BEB2                 jz      loc_41C05A
.text:0041BEB8                 cmp     al, 9
.text:0041BEBA                 jz      loc_41C05A
.text:0041BEC0                 cmp     al, 5Ch ; '\'
.text:0041BEC2                 jz      loc_41C05A
.text:0041BEC8                 inc     ebx
.text:0041BEC9                 movzx   eax, byte ptr [ebx]
.text:0041BECC                 test    al, al
.text:0041BECE                 jnz     short loc_41BEB0
.text:0041BED0
.text:0041BED0 loc_41BED0:                             ; CODE XREF: .text:0041BEAB↑j
.text:0041BED0                                         ; .text:0041C05C↓j ...
.text:0041BED0                 mov     ebx, [esp+28h]
.text:0041BED4                 mov     edx, ebx
.text:0041BED6                 movzx   eax, byte ptr [ebx]
.text:0041BED9                 test    al, al
.text:0041BEDB                 jz      short loc_41BF00
.text:0041BEDD                 lea     esi, [esi+0]
.text:0041BEE0
.text:0041BEE0 loc_41BEE0:                             ; CODE XREF: .text:0041BEFE↓j
.text:0041BEE0                 cmp     al, 20h ; ' '
.text:0041BEE2                 jz      loc_41BFDE
.text:0041BEE8                 cmp     al, 9
.text:0041BEEA                 jz      loc_41BFDE
.text:0041BEF0                 cmp     al, 5Ch ; '\'
.text:0041BEF2                 jz      loc_41BFDE
.text:0041BEF8                 inc     ebx
.text:0041BEF9                 movzx   eax, byte ptr [ebx]
.text:0041BEFC                 test    al, al
.text:0041BEFE                 jnz     short loc_41BEE0
.text:0041BF00
.text:0041BF00 loc_41BF00:                             ; CODE XREF: .text:0041BEDB↑j
.text:0041BF00                                         ; .text:0041BFE0↓j ...
.text:0041BF00                 mov     edx, [esp+2Ch]
.text:0041BF04                 mov     ebx, edx
.text:0041BF06                 movzx   eax, byte ptr [edx]
.text:0041BF09                 test    al, al
.text:0041BF0B                 jz      short loc_41BF24
.text:0041BF0D                 lea     esi, [esi+0]
.text:0041BF10
.text:0041BF10 loc_41BF10:                             ; CODE XREF: .text:0041BF22↓j
.text:0041BF10                 cmp     al, 20h ; ' '
.text:0041BF12                 jz      short loc_41BF6D
.text:0041BF14                 cmp     al, 9
.text:0041BF16                 jz      short loc_41BF6D
.text:0041BF18                 cmp     al, 5Ch ; '\'
.text:0041BF1A                 jz      short loc_41BF6D
.text:0041BF1C                 inc     ebx
.text:0041BF1D                 movzx   eax, byte ptr [ebx]
.text:0041BF20                 test    al, al
.text:0041BF22                 jnz     short loc_41BF10
.text:0041BF24
.text:0041BF24 loc_41BF24:                             ; CODE XREF: .text:0041BF0B↑j
.text:0041BF24                                         ; .text:0041BF6F↓j ...
.text:0041BF24                 mov     [esp+14h], edx
.text:0041BF28                 mov     ecx, [esp+34h]
.text:0041BF2C                 mov     ebx, [esp+30h]
.text:0041BF30                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041BF38                 mov     edx, [esp+24h]
.text:0041BF3C                 mov     [esp+1Ch], ecx
.text:0041BF40                 mov     ecx, [esp+28h]
.text:0041BF44                 mov     [esp+18h], ebx
.text:0041BF48                 mov     ebx, [esp+20h]
.text:0041BF4C                 mov     [esp+0Ch], edx
.text:0041BF50                 mov     [esp+10h], ecx
.text:0041BF54                 mov     [esp+8], ebx
.text:0041BF58                 mov     [esp], esi
.text:0041BF5B                 call    fprintf
.text:0041BF60                 mov     edx, eax
.text:0041BF62                 shr     edx, 1Fh
.text:0041BF65
.text:0041BF65 loc_41BF65:                             ; CODE XREF: .text:0041BE65↑j
.text:0041BF65                 add     esp, 44h
.text:0041BF68                 mov     eax, edx
.text:0041BF6A                 pop     ebx
.text:0041BF6B                 pop     esi
.text:0041BF6C                 retn
.text:0041BF6D ; ---------------------------------------------------------------------------
.text:0041BF6D
.text:0041BF6D loc_41BF6D:                             ; CODE XREF: .text:0041BF12↑j
.text:0041BF6D                                         ; .text:0041BF16↑j ...
.text:0041BF6D                 test    al, al
.text:0041BF6F                 jz      short loc_41BF24
.text:0041BF71                 mov     [esp], edx
.text:0041BF74                 mov     ebx, edx
.text:0041BF76                 call    strlen
.text:0041BF7B                 lea     edx, ds:1[eax*4]
.text:0041BF82                 mov     [esp], edx
.text:0041BF85                 call    malloc
.text:0041BF8A                 mov     [esp+2Ch], eax
.text:0041BF8E                 mov     edx, eax
.text:0041BF90
.text:0041BF90 loc_41BF90:                             ; CODE XREF: .text:0041BFA8↓j
.text:0041BF90                 movzx   eax, byte ptr [ebx]
.text:0041BF93                 cmp     al, 20h ; ' '
.text:0041BF95                 jz      short loc_41BFCD
.text:0041BF97                 cmp     al, 9
.text:0041BF99                 jz      short loc_41BFBC
.text:0041BF9B                 cmp     al, 5Ch ; '\'
.text:0041BF9D                 jz      short loc_41BFB3
.text:0041BF9F                 mov     [edx], al
.text:0041BFA1
.text:0041BFA1 loc_41BFA1:                             ; CODE XREF: .text:0041BFBA↓j
.text:0041BFA1                                         ; .text:0041BFCB↓j ...
.text:0041BFA1                 movzx   ecx, byte ptr [ebx]
.text:0041BFA4                 inc     edx
.text:0041BFA5                 inc     ebx
.text:0041BFA6                 test    cl, cl
.text:0041BFA8                 jnz     short loc_41BF90
.text:0041BFAA                 mov     edx, [esp+2Ch]
.text:0041BFAE                 jmp     loc_41BF24
.text:0041BFB3 ; ---------------------------------------------------------------------------
.text:0041BFB3
.text:0041BFB3 loc_41BFB3:                             ; CODE XREF: .text:0041BF9D↑j
.text:0041BFB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041BFB6                 inc     edx
.text:0041BFB7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041BFBA                 jmp     short loc_41BFA1
.text:0041BFBC ; ---------------------------------------------------------------------------
.text:0041BFBC
.text:0041BFBC loc_41BFBC:                             ; CODE XREF: .text:0041BF99↑j
.text:0041BFBC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041BFBF                 inc     edx
.text:0041BFC0                 mov     byte ptr [edx], 30h ; '0'
.text:0041BFC3                 inc     edx
.text:0041BFC4                 mov     byte ptr [edx], 31h ; '1'
.text:0041BFC7                 inc     edx
.text:0041BFC8                 mov     byte ptr [edx], 32h ; '2'
.text:0041BFCB                 jmp     short loc_41BFA1
.text:0041BFCD ; ---------------------------------------------------------------------------
.text:0041BFCD
.text:0041BFCD loc_41BFCD:                             ; CODE XREF: .text:0041BF95↑j
.text:0041BFCD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041BFD0                 inc     edx
.text:0041BFD1                 mov     byte ptr [edx], 30h ; '0'
.text:0041BFD4                 inc     edx
.text:0041BFD5                 mov     byte ptr [edx], 34h ; '4'
.text:0041BFD8                 inc     edx
.text:0041BFD9                 mov     byte ptr [edx], 30h ; '0'
.text:0041BFDC                 jmp     short loc_41BFA1
.text:0041BFDE ; ---------------------------------------------------------------------------
.text:0041BFDE
.text:0041BFDE loc_41BFDE:                             ; CODE XREF: .text:0041BEE2↑j
.text:0041BFDE                                         ; .text:0041BEEA↑j ...
.text:0041BFDE                 test    al, al
.text:0041BFE0                 jz      loc_41BF00
.text:0041BFE6                 mov     [esp], edx
.text:0041BFE9                 mov     ebx, edx
.text:0041BFEB                 call    strlen
.text:0041BFF0                 lea     edx, ds:1[eax*4]
.text:0041BFF7                 mov     [esp], edx
.text:0041BFFA                 call    malloc
.text:0041BFFF                 mov     [esp+28h], eax
.text:0041C003                 mov     edx, eax
.text:0041C005                 lea     esi, [esi+0]
.text:0041C009                 lea     edi, [edi+0]
.text:0041C010
.text:0041C010 loc_41C010:                             ; CODE XREF: .text:0041C028↓j
.text:0041C010                 movzx   eax, byte ptr [ebx]
.text:0041C013                 cmp     al, 20h ; ' '
.text:0041C015                 jz      short loc_41C049
.text:0041C017                 cmp     al, 9
.text:0041C019                 jz      short loc_41C038
.text:0041C01B                 cmp     al, 5Ch ; '\'
.text:0041C01D                 jz      short loc_41C02F
.text:0041C01F                 mov     [edx], al
.text:0041C021
.text:0041C021 loc_41C021:                             ; CODE XREF: .text:0041C036↓j
.text:0041C021                                         ; .text:0041C047↓j ...
.text:0041C021                 movzx   ecx, byte ptr [ebx]
.text:0041C024                 inc     edx
.text:0041C025                 inc     ebx
.text:0041C026                 test    cl, cl
.text:0041C028                 jnz     short loc_41C010
.text:0041C02A                 jmp     loc_41BF00
.text:0041C02F ; ---------------------------------------------------------------------------
.text:0041C02F
.text:0041C02F loc_41C02F:                             ; CODE XREF: .text:0041C01D↑j
.text:0041C02F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C032                 inc     edx
.text:0041C033                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C036                 jmp     short loc_41C021
.text:0041C038 ; ---------------------------------------------------------------------------
.text:0041C038
.text:0041C038 loc_41C038:                             ; CODE XREF: .text:0041C019↑j
.text:0041C038                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C03B                 inc     edx
.text:0041C03C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C03F                 inc     edx
.text:0041C040                 mov     byte ptr [edx], 31h ; '1'
.text:0041C043                 inc     edx
.text:0041C044                 mov     byte ptr [edx], 32h ; '2'
.text:0041C047                 jmp     short loc_41C021
.text:0041C049 ; ---------------------------------------------------------------------------
.text:0041C049
.text:0041C049 loc_41C049:                             ; CODE XREF: .text:0041C015↑j
.text:0041C049                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C04C                 inc     edx
.text:0041C04D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C050                 inc     edx
.text:0041C051                 mov     byte ptr [edx], 34h ; '4'
.text:0041C054                 inc     edx
.text:0041C055                 mov     byte ptr [edx], 30h ; '0'
.text:0041C058                 jmp     short loc_41C021
.text:0041C05A ; ---------------------------------------------------------------------------
.text:0041C05A
.text:0041C05A loc_41C05A:                             ; CODE XREF: .text:0041BEB2↑j
.text:0041C05A                                         ; .text:0041BEBA↑j ...
.text:0041C05A                 test    al, al
.text:0041C05C                 jz      loc_41BED0
.text:0041C062                 mov     [esp], edx
.text:0041C065                 mov     ebx, edx
.text:0041C067                 call    strlen
.text:0041C06C                 lea     edx, ds:1[eax*4]
.text:0041C073                 mov     [esp], edx
.text:0041C076                 call    malloc
.text:0041C07B                 mov     [esp+24h], eax
.text:0041C07F                 mov     edx, eax
.text:0041C081                 jmp     short loc_41C090
.text:0041C081 ; ---------------------------------------------------------------------------
.text:0041C083                 align 10h
.text:0041C090
.text:0041C090 loc_41C090:                             ; CODE XREF: .text:0041C081↑j
.text:0041C090                                         ; .text:0041C0A8↓j
.text:0041C090                 movzx   eax, byte ptr [ebx]
.text:0041C093                 cmp     al, 20h ; ' '
.text:0041C095                 jz      short loc_41C0C9
.text:0041C097                 cmp     al, 9
.text:0041C099                 jz      short loc_41C0B8
.text:0041C09B                 cmp     al, 5Ch ; '\'
.text:0041C09D                 jz      short loc_41C0AF
.text:0041C09F                 mov     [edx], al
.text:0041C0A1
.text:0041C0A1 loc_41C0A1:                             ; CODE XREF: .text:0041C0B6↓j
.text:0041C0A1                                         ; .text:0041C0C7↓j ...
.text:0041C0A1                 movzx   ecx, byte ptr [ebx]
.text:0041C0A4                 inc     edx
.text:0041C0A5                 inc     ebx
.text:0041C0A6                 test    cl, cl
.text:0041C0A8                 jnz     short loc_41C090
.text:0041C0AA                 jmp     loc_41BED0
.text:0041C0AF ; ---------------------------------------------------------------------------
.text:0041C0AF
.text:0041C0AF loc_41C0AF:                             ; CODE XREF: .text:0041C09D↑j
.text:0041C0AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C0B2                 inc     edx
.text:0041C0B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C0B6                 jmp     short loc_41C0A1
.text:0041C0B8 ; ---------------------------------------------------------------------------
.text:0041C0B8
.text:0041C0B8 loc_41C0B8:                             ; CODE XREF: .text:0041C099↑j
.text:0041C0B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C0BB                 inc     edx
.text:0041C0BC                 mov     byte ptr [edx], 30h ; '0'
.text:0041C0BF                 inc     edx
.text:0041C0C0                 mov     byte ptr [edx], 31h ; '1'
.text:0041C0C3                 inc     edx
.text:0041C0C4                 mov     byte ptr [edx], 32h ; '2'
.text:0041C0C7                 jmp     short loc_41C0A1
.text:0041C0C9 ; ---------------------------------------------------------------------------
.text:0041C0C9
.text:0041C0C9 loc_41C0C9:                             ; CODE XREF: .text:0041C095↑j
.text:0041C0C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C0CC                 inc     edx
.text:0041C0CD                 mov     byte ptr [edx], 30h ; '0'
.text:0041C0D0                 inc     edx
.text:0041C0D1                 mov     byte ptr [edx], 34h ; '4'
.text:0041C0D4                 inc     edx
.text:0041C0D5                 mov     byte ptr [edx], 30h ; '0'
.text:0041C0D8                 jmp     short loc_41C0A1
.text:0041C0DA ; ---------------------------------------------------------------------------
.text:0041C0DA
.text:0041C0DA loc_41C0DA:                             ; CODE XREF: .text:0041BE82↑j
.text:0041C0DA                                         ; .text:0041BE8A↑j ...
.text:0041C0DA                 test    al, al
.text:0041C0DC                 jz      loc_41BEA0
.text:0041C0E2                 mov     [esp], edx
.text:0041C0E5                 mov     ebx, edx
.text:0041C0E7                 call    strlen
.text:0041C0EC                 lea     ecx, ds:1[eax*4]
.text:0041C0F3                 mov     [esp], ecx
.text:0041C0F6                 call    malloc
.text:0041C0FB                 mov     [esp+20h], eax
.text:0041C0FF                 mov     edx, eax
.text:0041C101                 jmp     short loc_41C110
.text:0041C101 ; ---------------------------------------------------------------------------
.text:0041C103                 align 10h
.text:0041C110
.text:0041C110 loc_41C110:                             ; CODE XREF: .text:0041C101↑j
.text:0041C110                                         ; .text:0041C128↓j
.text:0041C110                 movzx   eax, byte ptr [ebx]
.text:0041C113                 cmp     al, 20h ; ' '
.text:0041C115                 jz      short loc_41C149
.text:0041C117                 cmp     al, 9
.text:0041C119                 jz      short loc_41C138
.text:0041C11B                 cmp     al, 5Ch ; '\'
.text:0041C11D                 jz      short loc_41C12F
.text:0041C11F                 mov     [edx], al
.text:0041C121
.text:0041C121 loc_41C121:                             ; CODE XREF: .text:0041C136↓j
.text:0041C121                                         ; .text:0041C147↓j ...
.text:0041C121                 movzx   ecx, byte ptr [ebx]
.text:0041C124                 inc     edx
.text:0041C125                 inc     ebx
.text:0041C126                 test    cl, cl
.text:0041C128                 jnz     short loc_41C110
.text:0041C12A                 jmp     loc_41BEA0
.text:0041C12F ; ---------------------------------------------------------------------------
.text:0041C12F
.text:0041C12F loc_41C12F:                             ; CODE XREF: .text:0041C11D↑j
.text:0041C12F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C132                 inc     edx
.text:0041C133                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C136                 jmp     short loc_41C121
.text:0041C138 ; ---------------------------------------------------------------------------
.text:0041C138
.text:0041C138 loc_41C138:                             ; CODE XREF: .text:0041C119↑j
.text:0041C138                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C13B                 inc     edx
.text:0041C13C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C13F                 inc     edx
.text:0041C140                 mov     byte ptr [edx], 31h ; '1'
.text:0041C143                 inc     edx
.text:0041C144                 mov     byte ptr [edx], 32h ; '2'
.text:0041C147                 jmp     short loc_41C121
.text:0041C149 ; ---------------------------------------------------------------------------
.text:0041C149
.text:0041C149 loc_41C149:                             ; CODE XREF: .text:0041C115↑j
.text:0041C149                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C14C                 inc     edx
.text:0041C14D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C150                 inc     edx
.text:0041C151                 mov     byte ptr [edx], 34h ; '4'
.text:0041C154                 inc     edx
.text:0041C155                 mov     byte ptr [edx], 30h ; '0'
.text:0041C158                 jmp     short loc_41C121
.text:0041C158 ; ---------------------------------------------------------------------------
.text:0041C15A                 align 10h
.text:0041C160
.text:0041C160 ; =============== S U B R O U T I N E =======================================
.text:0041C160
.text:0041C160 ; Attributes: info_from_lumina
.text:0041C160
.text:0041C160 ; int __cdecl __addmntentstr(char *, int)
.text:0041C160 ___addmntentstr proc near               ; CODE XREF: .text:0041BA2A↑p
.text:0041C160
.text:0041C160 Buffer          = dword ptr -4Ch
.text:0041C160 Format          = dword ptr -48h
.text:0041C160 var_44          = dword ptr -44h
.text:0041C160 var_40          = dword ptr -40h
.text:0041C160 var_3C          = dword ptr -3Ch
.text:0041C160 var_38          = dword ptr -38h
.text:0041C160 var_34          = dword ptr -34h
.text:0041C160 var_30          = dword ptr -30h
.text:0041C160 var_2C          = dword ptr -2Ch
.text:0041C160 var_28          = dword ptr -28h
.text:0041C160 var_24          = dword ptr -24h
.text:0041C160 Str             = dword ptr -20h
.text:0041C160 var_1C          = dword ptr -1Ch
.text:0041C160 var_18          = dword ptr -18h
.text:0041C160 arg_0           = dword ptr  4
.text:0041C160 arg_4           = dword ptr  8
.text:0041C160
.text:0041C160                 push    ebx
.text:0041C161                 sub     esp, 48h
.text:0041C164                 mov     edx, [esp+4Ch+arg_4]
.text:0041C168                 mov     ecx, [edx]
.text:0041C16A                 mov     [esp+4Ch+var_2C], ecx
.text:0041C16E                 mov     ebx, [edx+4]
.text:0041C171                 mov     [esp+4Ch+var_28], ebx
.text:0041C175                 mov     ebx, [edx+8]
.text:0041C178                 mov     [esp+4Ch+var_24], ebx
.text:0041C17C                 mov     ebx, [edx+0Ch]
.text:0041C17F                 mov     [esp+4Ch+Str], ebx
.text:0041C183                 mov     ebx, [edx+10h]
.text:0041C186                 mov     [esp+4Ch+var_1C], ebx
.text:0041C18A                 mov     ebx, [edx+14h]
.text:0041C18D                 mov     [esp+4Ch+var_18], ebx
.text:0041C191                 mov     ebx, ecx
.text:0041C193                 movzx   eax, byte ptr [ecx]
.text:0041C196                 test    al, al
.text:0041C198                 jz      loc_41C481
.text:0041C19E                 mov     esi, esi
.text:0041C1A0
.text:0041C1A0 loc_41C1A0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0041C1A0                 cmp     al, 20h ; ' '
.text:0041C1A2                 jz      loc_41C400
.text:0041C1A8                 cmp     al, 9
.text:0041C1AA                 jz      loc_41C400
.text:0041C1B0                 cmp     al, 5Ch ; '\'
.text:0041C1B2                 jz      loc_41C400
.text:0041C1B8                 inc     ebx
.text:0041C1B9                 movzx   eax, byte ptr [ebx]
.text:0041C1BC                 test    al, al
.text:0041C1BE                 jnz     short loc_41C1A0
.text:0041C1C0
.text:0041C1C0 loc_41C1C0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0041C1C0                                         ; ___addmntentstr+2EA↓j
.text:0041C1C0                 mov     ebx, [esp+4Ch+var_28]
.text:0041C1C4                 mov     edx, ebx
.text:0041C1C6                 movzx   eax, byte ptr [ebx]
.text:0041C1C9                 test    al, al
.text:0041C1CB                 jz      short loc_41C1F0
.text:0041C1CD                 lea     esi, [esi+0]
.text:0041C1D0
.text:0041C1D0 loc_41C1D0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0041C1D0                 cmp     al, 20h ; ' '
.text:0041C1D2                 jz      loc_41C37A
.text:0041C1D8                 cmp     al, 9
.text:0041C1DA                 jz      loc_41C37A
.text:0041C1E0                 cmp     al, 5Ch ; '\'
.text:0041C1E2                 jz      loc_41C37A
.text:0041C1E8                 inc     ebx
.text:0041C1E9                 movzx   eax, byte ptr [ebx]
.text:0041C1EC                 test    al, al
.text:0041C1EE                 jnz     short loc_41C1D0
.text:0041C1F0
.text:0041C1F0 loc_41C1F0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0041C1F0                                         ; ___addmntentstr+21C↓j ...
.text:0041C1F0                 mov     ebx, [esp+4Ch+var_24]
.text:0041C1F4                 mov     edx, ebx
.text:0041C1F6                 movzx   eax, byte ptr [ebx]
.text:0041C1F9                 test    al, al
.text:0041C1FB                 jz      short loc_41C220
.text:0041C1FD                 lea     esi, [esi+0]
.text:0041C200
.text:0041C200 loc_41C200:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0041C200                 cmp     al, 20h ; ' '
.text:0041C202                 jz      loc_41C2FE
.text:0041C208                 cmp     al, 9
.text:0041C20A                 jz      loc_41C2FE
.text:0041C210                 cmp     al, 5Ch ; '\'
.text:0041C212                 jz      loc_41C2FE
.text:0041C218                 inc     ebx
.text:0041C219                 movzx   eax, byte ptr [ebx]
.text:0041C21C                 test    al, al
.text:0041C21E                 jnz     short loc_41C200
.text:0041C220
.text:0041C220 loc_41C220:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0041C220                                         ; ___addmntentstr+1A0↓j ...
.text:0041C220                 mov     edx, [esp+4Ch+Str]
.text:0041C224                 mov     ebx, edx
.text:0041C226                 movzx   eax, byte ptr [edx]
.text:0041C229                 test    al, al
.text:0041C22B                 jz      short loc_41C244
.text:0041C22D                 lea     esi, [esi+0]
.text:0041C230
.text:0041C230 loc_41C230:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0041C230                 cmp     al, 20h ; ' '
.text:0041C232                 jz      short loc_41C28C
.text:0041C234                 cmp     al, 9
.text:0041C236                 jz      short loc_41C28C
.text:0041C238                 cmp     al, 5Ch ; '\'
.text:0041C23A                 jz      short loc_41C28C
.text:0041C23C                 inc     ebx
.text:0041C23D                 movzx   eax, byte ptr [ebx]
.text:0041C240                 test    al, al
.text:0041C242                 jnz     short loc_41C230
.text:0041C244
.text:0041C244 loc_41C244:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0041C244                                         ; ___addmntentstr+12E↓j ...
.text:0041C244                 mov     [esp+4Ch+var_38], edx
.text:0041C248                 mov     ebx, [esp+4Ch+var_18]
.text:0041C24C                 mov     ecx, [esp+4Ch+var_1C]
.text:0041C250                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041C258                 mov     edx, [esp+4Ch+var_2C]
.text:0041C25C                 mov     [esp+4Ch+var_30], ebx
.text:0041C260                 mov     ebx, [esp+4Ch+var_24]
.text:0041C264                 mov     [esp+4Ch+var_34], ecx
.text:0041C268                 mov     ecx, [esp+4Ch+var_28]
.text:0041C26C                 mov     [esp+4Ch+var_3C], ebx
.text:0041C270                 mov     ebx, [esp+4Ch+arg_0]
.text:0041C274                 mov     [esp+4Ch+var_40], ecx
.text:0041C278                 mov     [esp+4Ch+var_44], edx
.text:0041C27C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041C27F                 call    sprintf
.text:0041C284                 add     esp, 48h
.text:0041C287                 shr     eax, 1Fh
.text:0041C28A                 pop     ebx
.text:0041C28B                 retn
.text:0041C28C ; ---------------------------------------------------------------------------
.text:0041C28C
.text:0041C28C loc_41C28C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041C28C                                         ; ___addmntentstr+D6↑j ...
.text:0041C28C                 test    al, al
.text:0041C28E                 jz      short loc_41C244
.text:0041C290                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C293                 mov     ebx, edx
.text:0041C295                 call    strlen
.text:0041C29A                 lea     edx, ds:1[eax*4]
.text:0041C2A1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C2A4                 call    malloc
.text:0041C2A9                 mov     [esp+4Ch+Str], eax
.text:0041C2AD                 mov     edx, eax
.text:0041C2AF                 nop
.text:0041C2B0
.text:0041C2B0 loc_41C2B0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0041C2B0                 movzx   eax, byte ptr [ebx]
.text:0041C2B3                 cmp     al, 20h ; ' '
.text:0041C2B5                 jz      short loc_41C2ED
.text:0041C2B7                 cmp     al, 9
.text:0041C2B9                 jz      short loc_41C2DC
.text:0041C2BB                 cmp     al, 5Ch ; '\'
.text:0041C2BD                 jz      short loc_41C2D3
.text:0041C2BF                 mov     [edx], al
.text:0041C2C1
.text:0041C2C1 loc_41C2C1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0041C2C1                                         ; ___addmntentstr+18B↓j ...
.text:0041C2C1                 movzx   ecx, byte ptr [ebx]
.text:0041C2C4                 inc     edx
.text:0041C2C5                 inc     ebx
.text:0041C2C6                 test    cl, cl
.text:0041C2C8                 jnz     short loc_41C2B0
.text:0041C2CA                 mov     edx, [esp+4Ch+Str]
.text:0041C2CE                 jmp     loc_41C244
.text:0041C2D3 ; ---------------------------------------------------------------------------
.text:0041C2D3
.text:0041C2D3 loc_41C2D3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0041C2D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C2D6                 inc     edx
.text:0041C2D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C2DA                 jmp     short loc_41C2C1
.text:0041C2DC ; ---------------------------------------------------------------------------
.text:0041C2DC
.text:0041C2DC loc_41C2DC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041C2DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C2DF                 inc     edx
.text:0041C2E0                 mov     byte ptr [edx], 30h ; '0'
.text:0041C2E3                 inc     edx
.text:0041C2E4                 mov     byte ptr [edx], 31h ; '1'
.text:0041C2E7                 inc     edx
.text:0041C2E8                 mov     byte ptr [edx], 32h ; '2'
.text:0041C2EB                 jmp     short loc_41C2C1
.text:0041C2ED ; ---------------------------------------------------------------------------
.text:0041C2ED
.text:0041C2ED loc_41C2ED:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041C2ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C2F0                 inc     edx
.text:0041C2F1                 mov     byte ptr [edx], 30h ; '0'
.text:0041C2F4                 inc     edx
.text:0041C2F5                 mov     byte ptr [edx], 34h ; '4'
.text:0041C2F8                 inc     edx
.text:0041C2F9                 mov     byte ptr [edx], 30h ; '0'
.text:0041C2FC                 jmp     short loc_41C2C1
.text:0041C2FE ; ---------------------------------------------------------------------------
.text:0041C2FE
.text:0041C2FE loc_41C2FE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041C2FE                                         ; ___addmntentstr+AA↑j ...
.text:0041C2FE                 test    al, al
.text:0041C300                 jz      loc_41C220
.text:0041C306                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C309                 mov     ebx, edx
.text:0041C30B                 call    strlen
.text:0041C310                 lea     edx, ds:1[eax*4]
.text:0041C317                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C31A                 call    malloc
.text:0041C31F                 mov     [esp+4Ch+var_24], eax
.text:0041C323                 mov     edx, eax
.text:0041C325                 lea     esi, [esi+0]
.text:0041C329                 lea     edi, [edi+0]
.text:0041C330
.text:0041C330 loc_41C330:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0041C330                 movzx   eax, byte ptr [ebx]
.text:0041C333                 cmp     al, 20h ; ' '
.text:0041C335                 jz      short loc_41C369
.text:0041C337                 cmp     al, 9
.text:0041C339                 jz      short loc_41C358
.text:0041C33B                 cmp     al, 5Ch ; '\'
.text:0041C33D                 jz      short loc_41C34F
.text:0041C33F                 mov     [edx], al
.text:0041C341
.text:0041C341 loc_41C341:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0041C341                                         ; ___addmntentstr+207↓j ...
.text:0041C341                 movzx   ecx, byte ptr [ebx]
.text:0041C344                 inc     edx
.text:0041C345                 inc     ebx
.text:0041C346                 test    cl, cl
.text:0041C348                 jnz     short loc_41C330
.text:0041C34A                 jmp     loc_41C220
.text:0041C34F ; ---------------------------------------------------------------------------
.text:0041C34F
.text:0041C34F loc_41C34F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041C34F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C352                 inc     edx
.text:0041C353                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C356                 jmp     short loc_41C341
.text:0041C358 ; ---------------------------------------------------------------------------
.text:0041C358
.text:0041C358 loc_41C358:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0041C358                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C35B                 inc     edx
.text:0041C35C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C35F                 inc     edx
.text:0041C360                 mov     byte ptr [edx], 31h ; '1'
.text:0041C363                 inc     edx
.text:0041C364                 mov     byte ptr [edx], 32h ; '2'
.text:0041C367                 jmp     short loc_41C341
.text:0041C369 ; ---------------------------------------------------------------------------
.text:0041C369
.text:0041C369 loc_41C369:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0041C369                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C36C                 inc     edx
.text:0041C36D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C370                 inc     edx
.text:0041C371                 mov     byte ptr [edx], 34h ; '4'
.text:0041C374                 inc     edx
.text:0041C375                 mov     byte ptr [edx], 30h ; '0'
.text:0041C378                 jmp     short loc_41C341
.text:0041C37A ; ---------------------------------------------------------------------------
.text:0041C37A
.text:0041C37A loc_41C37A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041C37A                                         ; ___addmntentstr+7A↑j ...
.text:0041C37A                 test    al, al
.text:0041C37C                 jz      loc_41C1F0
.text:0041C382                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C385                 mov     ebx, edx
.text:0041C387                 call    strlen
.text:0041C38C                 lea     edx, ds:1[eax*4]
.text:0041C393                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C396                 call    malloc
.text:0041C39B                 mov     [esp+4Ch+var_28], eax
.text:0041C39F                 mov     edx, eax
.text:0041C3A1                 jmp     short loc_41C3B0
.text:0041C3A1 ; ---------------------------------------------------------------------------
.text:0041C3A3                 align 10h
.text:0041C3B0
.text:0041C3B0 loc_41C3B0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0041C3B0                                         ; ___addmntentstr+268↓j
.text:0041C3B0                 movzx   eax, byte ptr [ebx]
.text:0041C3B3                 cmp     al, 20h ; ' '
.text:0041C3B5                 jz      short loc_41C3E9
.text:0041C3B7                 cmp     al, 9
.text:0041C3B9                 jz      short loc_41C3D8
.text:0041C3BB                 cmp     al, 5Ch ; '\'
.text:0041C3BD                 jz      short loc_41C3CF
.text:0041C3BF                 mov     [edx], al
.text:0041C3C1
.text:0041C3C1 loc_41C3C1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0041C3C1                                         ; ___addmntentstr+287↓j ...
.text:0041C3C1                 movzx   ecx, byte ptr [ebx]
.text:0041C3C4                 inc     edx
.text:0041C3C5                 inc     ebx
.text:0041C3C6                 test    cl, cl
.text:0041C3C8                 jnz     short loc_41C3B0
.text:0041C3CA                 jmp     loc_41C1F0
.text:0041C3CF ; ---------------------------------------------------------------------------
.text:0041C3CF
.text:0041C3CF loc_41C3CF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041C3CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C3D2                 inc     edx
.text:0041C3D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C3D6                 jmp     short loc_41C3C1
.text:0041C3D8 ; ---------------------------------------------------------------------------
.text:0041C3D8
.text:0041C3D8 loc_41C3D8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0041C3D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C3DB                 inc     edx
.text:0041C3DC                 mov     byte ptr [edx], 30h ; '0'
.text:0041C3DF                 inc     edx
.text:0041C3E0                 mov     byte ptr [edx], 31h ; '1'
.text:0041C3E3                 inc     edx
.text:0041C3E4                 mov     byte ptr [edx], 32h ; '2'
.text:0041C3E7                 jmp     short loc_41C3C1
.text:0041C3E9 ; ---------------------------------------------------------------------------
.text:0041C3E9
.text:0041C3E9 loc_41C3E9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0041C3E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C3EC                 inc     edx
.text:0041C3ED                 mov     byte ptr [edx], 30h ; '0'
.text:0041C3F0                 inc     edx
.text:0041C3F1                 mov     byte ptr [edx], 34h ; '4'
.text:0041C3F4                 inc     edx
.text:0041C3F5                 mov     byte ptr [edx], 30h ; '0'
.text:0041C3F8                 jmp     short loc_41C3C1
.text:0041C3F8 ; ---------------------------------------------------------------------------
.text:0041C3FA                 align 10h
.text:0041C400
.text:0041C400 loc_41C400:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0041C400                                         ; ___addmntentstr+4A↑j ...
.text:0041C400                 test    al, al
.text:0041C402                 jz      loc_41C1C0
.text:0041C408                 mov     ebx, [esp+4Ch+var_2C]
.text:0041C40C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041C40F                 call    strlen
.text:0041C414                 lea     edx, ds:1[eax*4]
.text:0041C41B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C41E                 call    malloc
.text:0041C423                 mov     [esp+4Ch+var_2C], eax
.text:0041C427                 mov     edx, eax
.text:0041C429                 lea     esi, [esi+0]
.text:0041C430
.text:0041C430 loc_41C430:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0041C430                 movzx   eax, byte ptr [ebx]
.text:0041C433                 cmp     al, 20h ; ' '
.text:0041C435                 jz      short loc_41C470
.text:0041C437                 cmp     al, 9
.text:0041C439                 jz      short loc_41C458
.text:0041C43B                 cmp     al, 5Ch ; '\'
.text:0041C43D                 jz      short loc_41C44F
.text:0041C43F                 mov     [edx], al
.text:0041C441
.text:0041C441 loc_41C441:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0041C441                                         ; ___addmntentstr+307↓j ...
.text:0041C441                 movzx   ecx, byte ptr [ebx]
.text:0041C444                 inc     edx
.text:0041C445                 inc     ebx
.text:0041C446                 test    cl, cl
.text:0041C448                 jnz     short loc_41C430
.text:0041C44A                 jmp     loc_41C1C0
.text:0041C44F ; ---------------------------------------------------------------------------
.text:0041C44F
.text:0041C44F loc_41C44F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041C44F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C452                 inc     edx
.text:0041C453                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C456                 jmp     short loc_41C441
.text:0041C458 ; ---------------------------------------------------------------------------
.text:0041C458
.text:0041C458 loc_41C458:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0041C458                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C45B                 inc     edx
.text:0041C45C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C45F                 inc     edx
.text:0041C460                 mov     byte ptr [edx], 31h ; '1'
.text:0041C463                 inc     edx
.text:0041C464                 mov     byte ptr [edx], 32h ; '2'
.text:0041C467                 jmp     short loc_41C441
.text:0041C467 ; ---------------------------------------------------------------------------
.text:0041C469                 align 10h
.text:0041C470
.text:0041C470 loc_41C470:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0041C470                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C473                 inc     edx
.text:0041C474                 mov     byte ptr [edx], 30h ; '0'
.text:0041C477                 inc     edx
.text:0041C478                 mov     byte ptr [edx], 34h ; '4'
.text:0041C47B                 inc     edx
.text:0041C47C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C47F                 jmp     short loc_41C441
.text:0041C481 ; ---------------------------------------------------------------------------
.text:0041C481
.text:0041C481 loc_41C481:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0041C481                 movzx   eax, byte ptr [ecx]
.text:0041C484                 jmp     loc_41C400
.text:0041C484 ___addmntentstr endp
.text:0041C484
.text:0041C484 ; ---------------------------------------------------------------------------
.text:0041C489                 align 10h
.text:0041C490
.text:0041C490 ; =============== S U B R O U T I N E =======================================
.text:0041C490
.text:0041C490
.text:0041C490 sub_41C490      proc near               ; CODE XREF: sub_419220+99↑p
.text:0041C490
.text:0041C490 nBufferLength   = dword ptr -1Ch
.text:0041C490 lpBuffer        = dword ptr -18h
.text:0041C490 dwBytes         = dword ptr -14h
.text:0041C490 var_8           = dword ptr -8
.text:0041C490 var_4           = dword ptr -4
.text:0041C490
.text:0041C490                 sub     esp, 1Ch
.text:0041C493                 mov     [esp+1Ch+var_8], ebx
.text:0041C497                 mov     [esp+1Ch+var_4], esi
.text:0041C49B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0041C4A3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041C4AA                 call    GetLogicalDriveStringsA
.text:0041C4AF                 sub     esp, 8
.text:0041C4B2                 mov     ebx, eax
.text:0041C4B4                 call    GetProcessHeap
.text:0041C4B9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041C4BC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0041C4C0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0041C4C8                 call    HeapAlloc
.text:0041C4CD                 sub     esp, 0Ch
.text:0041C4D0                 mov     esi, eax
.text:0041C4D2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0041C4D5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0041C4D9                 call    GetLogicalDriveStringsA
.text:0041C4DE                 sub     esp, 8
.text:0041C4E1                 mov     eax, esi
.text:0041C4E3                 mov     ebx, [esp+1Ch+var_8]
.text:0041C4E7                 mov     esi, [esp+1Ch+var_4]
.text:0041C4EB                 add     esp, 1Ch
.text:0041C4EE                 retn
.text:0041C4EE sub_41C490      endp
.text:0041C4EE
.text:0041C4EF
.text:0041C4EF ; =============== S U B R O U T I N E =======================================
.text:0041C4EF
.text:0041C4EF
.text:0041C4EF ; int __cdecl sub_41C4EF(char *, char *)
.text:0041C4EF sub_41C4EF      proc near               ; DATA XREF: sub_41C4EF:loc_41C57D↓o
.text:0041C4EF
.text:0041C4EF FileName        = dword ptr -1Ch
.text:0041C4EF Mode            = dword ptr -18h
.text:0041C4EF dwBytes         = dword ptr -14h
.text:0041C4EF arg_0           = dword ptr  4
.text:0041C4EF arg_4           = dword ptr  8
.text:0041C4EF
.text:0041C4EF                 ja      short $+2
.text:0041C4F1
.text:0041C4F1 loc_41C4F1:                             ; CODE XREF: sub_41C4EF↑j
.text:0041C4F1                 jmp     short loc_41C500
.text:0041C4F1 ; ---------------------------------------------------------------------------
.text:0041C4F3                 align 10h
.text:0041C500
.text:0041C500 loc_41C500:                             ; CODE XREF: sub_41C4EF:loc_41C4F1↑j
.text:0041C500                 push    edi
.text:0041C501                 push    esi
.text:0041C502                 push    ebx
.text:0041C503                 sub     esp, 10h
.text:0041C506                 mov     ebx, [esp+1Ch+arg_0]
.text:0041C50A                 mov     edx, [esp+1Ch+arg_4]
.text:0041C50E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041C511                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0041C515                 call    fopen
.text:0041C51A                 test    eax, eax
.text:0041C51C                 mov     edi, eax
.text:0041C51E                 jz      short loc_41C57D
.text:0041C520
.text:0041C520 loc_41C520:                             ; CODE XREF: sub_41C4EF+A2↓j
.text:0041C520                                         ; sub_41C4EF+AB↓j
.text:0041C520                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0041C528                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041C52F                 call    GetLogicalDriveStringsA
.text:0041C534                 sub     esp, 8
.text:0041C537                 mov     esi, eax
.text:0041C539                 call    GetProcessHeap
.text:0041C53E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0041C541                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0041C545                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041C54D                 call    HeapAlloc
.text:0041C552                 sub     esp, 0Ch
.text:0041C555                 mov     ebx, eax
.text:0041C557                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041C55A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041C55E                 call    GetLogicalDriveStringsA
.text:0041C563                 mov     off_4210C4, ebx ; "notset"
.text:0041C569                 sub     esp, 8
.text:0041C56C                 xor     eax, eax
.text:0041C56E                 test    ebx, ebx
.text:0041C570                 setz    al
.text:0041C573                 add     esp, 10h
.text:0041C576                 pop     ebx
.text:0041C577                 dec     eax
.text:0041C578                 and     eax, edi
.text:0041C57A                 pop     esi
.text:0041C57B                 pop     edi
.text:0041C57C                 retn
.text:0041C57D ; ---------------------------------------------------------------------------
.text:0041C57D
.text:0041C57D loc_41C57D:                             ; CODE XREF: sub_41C4EF+2F↑j
.text:0041C57D                 mov     [esp+1Ch+Mode], offset sub_41C4EF ; Mode
.text:0041C585                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041C588                 call    fopen
.text:0041C58D                 test    eax, eax
.text:0041C58F                 mov     edi, eax
.text:0041C591                 jnz     short loc_41C520
.text:0041C593                 call    sub_41D170
.text:0041C598                 mov     edi, eax
.text:0041C59A                 jmp     short loc_41C520
.text:0041C59A sub_41C4EF      endp
.text:0041C59A
.text:0041C59A ; ---------------------------------------------------------------------------
.text:0041C59C                 align 10h
.text:0041C5A0                 sub     esp, 0Ch
.text:0041C5A3                 mov     eax, [esp+10h]
.text:0041C5A7                 test    eax, eax
.text:0041C5A9                 jz      short loc_41C5B3
.text:0041C5AB                 mov     [esp], eax
.text:0041C5AE                 call    fclose
.text:0041C5B3
.text:0041C5B3 loc_41C5B3:                             ; CODE XREF: .text:0041C5A9↑j
.text:0041C5B3                 call    GetProcessHeap
.text:0041C5B8                 mov     [esp], eax
.text:0041C5BB                 mov     ecx, off_4210C4 ; "notset"
.text:0041C5C1                 mov     dword ptr [esp+4], 0
.text:0041C5C9                 mov     [esp+8], ecx
.text:0041C5CD                 call    HeapFree
.text:0041C5D2                 mov     edx, off_4210C0 ; "notset"
.text:0041C5D8                 sub     esp, 0Ch
.text:0041C5DB                 mov     eax, 1
.text:0041C5E0                 mov     off_4210C4, edx ; "notset"
.text:0041C5E6                 add     esp, 0Ch
.text:0041C5E9                 retn
.text:0041C5E9 ; ---------------------------------------------------------------------------
.text:0041C5EA                 align 10h
.text:0041C5F0                 push    edi
.text:0041C5F1                 push    esi
.text:0041C5F2                 push    ebx
.text:0041C5F3                 sub     esp, 10h
.text:0041C5F6                 mov     edi, [esp+24h]
.text:0041C5FA                 mov     [esp], edi
.text:0041C5FD                 call    strlen
.text:0041C602                 mov     edx, [esp+20h]
.text:0041C606                 mov     esi, eax
.text:0041C608                 mov     ebx, [edx+0Ch]
.text:0041C60B                 nop
.text:0041C60C                 lea     esi, [esi+0]
.text:0041C610
.text:0041C610 loc_41C610:                             ; CODE XREF: .text:0041C641↓j
.text:0041C610                 mov     [esp+4], edi
.text:0041C614                 mov     [esp], ebx
.text:0041C617                 call    strstr
.text:0041C61C                 test    eax, eax
.text:0041C61E                 jz      short loc_41C643
.text:0041C620                 cmp     eax, ebx
.text:0041C622                 jz      short loc_41C645
.text:0041C624                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0041C628                 jz      short loc_41C650
.text:0041C62A
.text:0041C62A loc_41C62A:                             ; CODE XREF: .text:0041C660↓j
.text:0041C62A                 mov     [esp], ebx
.text:0041C62D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0041C635                 call    strchr
.text:0041C63A                 test    eax, eax
.text:0041C63C                 mov     ebx, eax
.text:0041C63E                 jz      short loc_41C643
.text:0041C640                 inc     ebx
.text:0041C641                 jmp     short loc_41C610
.text:0041C643 ; ---------------------------------------------------------------------------
.text:0041C643
.text:0041C643 loc_41C643:                             ; CODE XREF: .text:0041C61E↑j
.text:0041C643                                         ; .text:0041C63E↑j
.text:0041C643                 xor     eax, eax
.text:0041C645
.text:0041C645 loc_41C645:                             ; CODE XREF: .text:0041C622↑j
.text:0041C645                                         ; .text:0041C656↓j ...
.text:0041C645                 add     esp, 10h
.text:0041C648                 pop     ebx
.text:0041C649                 pop     esi
.text:0041C64A                 pop     edi
.text:0041C64B                 retn
.text:0041C64B ; ---------------------------------------------------------------------------
.text:0041C64C                 align 10h
.text:0041C650
.text:0041C650 loc_41C650:                             ; CODE XREF: .text:0041C628↑j
.text:0041C650                 movzx   edx, byte ptr [esi+eax]
.text:0041C654                 test    dl, dl
.text:0041C656                 jz      short loc_41C645
.text:0041C658                 cmp     dl, 3Dh ; '='
.text:0041C65B                 jz      short loc_41C645
.text:0041C65D                 cmp     dl, 2Ch ; ','
.text:0041C660                 jnz     short loc_41C62A
.text:0041C662                 jmp     short loc_41C645
.text:0041C662 ; ---------------------------------------------------------------------------
.text:0041C664                 align 10h
.text:0041C670                 sub     esp, 2Ch
.text:0041C673                 lea     edx, [esp+28h]
.text:0041C677                 mov     [esp+10h], edx
.text:0041C67B                 mov     edx, [esp+30h]
.text:0041C67F                 mov     dword ptr [esp+18h], 0
.text:0041C687                 mov     dword ptr [esp+14h], 0
.text:0041C68F                 mov     dword ptr [esp+0Ch], 400h
.text:0041C697                 mov     [esp+8], edx
.text:0041C69B                 mov     dword ptr [esp+4], 0
.text:0041C6A3                 mov     dword ptr [esp], 13FFh
.text:0041C6AA                 call    FormatMessageA
.text:0041C6AF                 sub     esp, 1Ch
.text:0041C6B2                 mov     eax, [esp+28h]
.text:0041C6B6                 add     esp, 2Ch
.text:0041C6B9                 retn
.text:0041C6B9 ; ---------------------------------------------------------------------------
.text:0041C6BA ; const char aSWindowsErrorL[]
.text:0041C6BA aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:0041C6BA                                         ; DATA XREF: .text:0041C736↓o
.text:0041C6BA                                         ; sub_41C770+59↓o ...
.text:0041C6D5                 align 10h
.text:0041C6E0                 sub     esp, 2Ch
.text:0041C6E3                 lea     ecx, [esp+20h]
.text:0041C6E7                 mov     [esp+28h], esi
.text:0041C6EB                 mov     esi, [esp+34h]
.text:0041C6EF                 mov     [esp+10h], ecx
.text:0041C6F3                 mov     [esp+24h], ebx
.text:0041C6F7                 mov     [esp+8], esi
.text:0041C6FB                 mov     dword ptr [esp+18h], 0
.text:0041C703                 mov     dword ptr [esp+14h], 0
.text:0041C70B                 mov     dword ptr [esp+0Ch], 400h
.text:0041C713                 mov     dword ptr [esp+4], 0
.text:0041C71B                 mov     dword ptr [esp], 13FFh
.text:0041C722                 call    FormatMessageA
.text:0041C727                 sub     esp, 1Ch
.text:0041C72A                 mov     edx, [esp+30h]
.text:0041C72E                 mov     [esp+0Ch], esi
.text:0041C732                 mov     ebx, [esp+20h]
.text:0041C736                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041C73E                 mov     [esp+8], edx
.text:0041C742                 mov     edx, ds:_iob
.text:0041C748                 mov     [esp+10h], ebx
.text:0041C74C                 add     edx, 40h ; '@'
.text:0041C74F                 mov     [esp], edx
.text:0041C752                 call    fprintf
.text:0041C757                 mov     [esp], ebx
.text:0041C75A                 call    LocalFree
.text:0041C75F                 sub     esp, 4
.text:0041C762                 mov     ebx, [esp+24h]
.text:0041C766                 mov     esi, [esp+28h]
.text:0041C76A                 add     esp, 2Ch
.text:0041C76D                 retn
.text:0041C76D ; ---------------------------------------------------------------------------
.text:0041C76E                 align 10h
.text:0041C770
.text:0041C770 ; =============== S U B R O U T I N E =======================================
.text:0041C770
.text:0041C770
.text:0041C770 sub_41C770      proc near               ; CODE XREF: sub_419DF0+1A9↑p
.text:0041C770
.text:0041C770 dwFlags         = dword ptr -2Ch
.text:0041C770 lpSource        = dword ptr -28h
.text:0041C770 dwMessageId     = dword ptr -24h
.text:0041C770 dwLanguageId    = dword ptr -20h
.text:0041C770 lpBuffer        = dword ptr -1Ch
.text:0041C770 nSize           = dword ptr -18h
.text:0041C770 Arguments       = dword ptr -14h
.text:0041C770 Buffer          = byte ptr -0Ch
.text:0041C770 var_8           = dword ptr -8
.text:0041C770 var_4           = dword ptr -4
.text:0041C770 arg_0           = dword ptr  4
.text:0041C770
.text:0041C770                 sub     esp, 2Ch
.text:0041C773                 mov     [esp+2Ch+var_8], ebx
.text:0041C777                 mov     [esp+2Ch+var_4], esi
.text:0041C77B                 call    GetLastError
.text:0041C780                 mov     [esp+2Ch+dwMessageId], eax ; dwMessageId
.text:0041C784                 lea     ecx, [esp+2Ch+Buffer]
.text:0041C788                 mov     esi, eax
.text:0041C78A                 mov     [esp+2Ch+lpBuffer], ecx ; lpBuffer
.text:0041C78E                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:0041C796                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:0041C79E                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:0041C7A6                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:0041C7AE                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:0041C7B5                 call    FormatMessageA
.text:0041C7BA                 sub     esp, 1Ch
.text:0041C7BD                 mov     edx, [esp+2Ch+arg_0]
.text:0041C7C1                 mov     [esp+2Ch+dwLanguageId], esi
.text:0041C7C5                 mov     ebx, dword ptr [esp+2Ch+Buffer]
.text:0041C7C9                 mov     [esp+2Ch+lpSource], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041C7D1                 mov     [esp+2Ch+dwMessageId], edx
.text:0041C7D5                 mov     edx, ds:_iob
.text:0041C7DB                 mov     [esp+2Ch+lpBuffer], ebx
.text:0041C7DF                 add     edx, 40h ; '@'
.text:0041C7E2                 mov     [esp+2Ch+dwFlags], edx ; Stream
.text:0041C7E5                 call    fprintf
.text:0041C7EA                 mov     [esp+2Ch+dwFlags], ebx ; hMem
.text:0041C7ED                 call    LocalFree
.text:0041C7F2                 sub     esp, 4
.text:0041C7F5                 mov     ebx, [esp+2Ch+var_8]
.text:0041C7F9                 mov     esi, [esp+2Ch+var_4]
.text:0041C7FD                 add     esp, 2Ch
.text:0041C800                 retn
.text:0041C800 sub_41C770      endp
.text:0041C800
.text:0041C800 ; ---------------------------------------------------------------------------
.text:0041C801 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:0041C833↓o
.text:0041C801                                         ; .text:0041C88B↓o
.text:0041C80B aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:0041C80B                                         ; DATA XREF: .text:0041C842↓o
.text:0041C80B                                         ; .text:0041C89A↓o
.text:0041C821 ; ---------------------------------------------------------------------------
.text:0041C821                 jmp     short loc_41C830
.text:0041C821 ; ---------------------------------------------------------------------------
.text:0041C823                 align 10h
.text:0041C830
.text:0041C830 loc_41C830:                             ; CODE XREF: .text:0041C821↑j
.text:0041C830                 sub     esp, 0Ch
.text:0041C833                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041C83A                 call    GetModuleHandleA
.text:0041C83F                 sub     esp, 4
.text:0041C842                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041C84A                 mov     [esp], eax
.text:0041C84D                 call    GetProcAddress
.text:0041C852                 sub     esp, 8
.text:0041C855                 test    eax, eax
.text:0041C857                 jz      short loc_41C870
.text:0041C859                 mov     ecx, [esp+10h]
.text:0041C85D                 mov     [esp], ecx
.text:0041C860                 call    eax
.text:0041C862                 sub     esp, 4
.text:0041C865                 mov     [esp], eax
.text:0041C868                 call    SetLastError
.text:0041C86D                 sub     esp, 4
.text:0041C870
.text:0041C870 loc_41C870:                             ; CODE XREF: .text:0041C857↑j
.text:0041C870                 add     esp, 0Ch
.text:0041C873                 retn
.text:0041C873 ; ---------------------------------------------------------------------------
.text:0041C874                 align 10h
.text:0041C880                 sub     esp, 2Ch
.text:0041C883                 mov     [esp+24h], ebx
.text:0041C887                 mov     [esp+28h], esi
.text:0041C88B                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041C892                 call    GetModuleHandleA
.text:0041C897                 sub     esp, 4
.text:0041C89A                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041C8A2                 mov     [esp], eax
.text:0041C8A5                 call    GetProcAddress
.text:0041C8AA                 sub     esp, 8
.text:0041C8AD                 test    eax, eax
.text:0041C8AF                 jz      loc_41C936
.text:0041C8B5                 mov     ebx, [esp+34h]
.text:0041C8B9                 mov     [esp], ebx
.text:0041C8BC                 call    eax
.text:0041C8BE                 sub     esp, 4
.text:0041C8C1                 mov     esi, eax
.text:0041C8C3                 lea     ecx, [esp+20h]
.text:0041C8C7                 mov     [esp+10h], ecx
.text:0041C8CB                 mov     dword ptr [esp+18h], 0
.text:0041C8D3                 mov     dword ptr [esp+14h], 0
.text:0041C8DB                 mov     dword ptr [esp+0Ch], 400h
.text:0041C8E3                 mov     [esp+8], eax
.text:0041C8E7                 mov     dword ptr [esp+4], 0
.text:0041C8EF                 mov     dword ptr [esp], 13FFh
.text:0041C8F6                 call    FormatMessageA
.text:0041C8FB                 sub     esp, 1Ch
.text:0041C8FE                 mov     edx, [esp+30h]
.text:0041C902                 mov     [esp+0Ch], esi
.text:0041C906                 mov     ebx, [esp+20h]
.text:0041C90A                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041C912                 mov     [esp+8], edx
.text:0041C916                 mov     edx, ds:_iob
.text:0041C91C                 mov     [esp+10h], ebx
.text:0041C920                 add     edx, 40h ; '@'
.text:0041C923                 mov     [esp], edx
.text:0041C926                 call    fprintf
.text:0041C92B                 mov     [esp], ebx
.text:0041C92E                 call    LocalFree
.text:0041C933                 sub     esp, 4
.text:0041C936
.text:0041C936 loc_41C936:                             ; CODE XREF: .text:0041C8AF↑j
.text:0041C936                 mov     ebx, [esp+24h]
.text:0041C93A                 mov     esi, [esp+28h]
.text:0041C93E                 add     esp, 2Ch
.text:0041C941                 retn
.text:0041C941 ; ---------------------------------------------------------------------------
.text:0041C942                 align 10h
.text:0041C950
.text:0041C950 ; =============== S U B R O U T I N E =======================================
.text:0041C950
.text:0041C950
.text:0041C950 ; int __cdecl sub_41C950(HANDLE, LPCSTR lpFileName, int)
.text:0041C950 sub_41C950      proc near               ; CODE XREF: sub_41A840+22↑p
.text:0041C950                                         ; sub_41CA50+5F↓p
.text:0041C950
.text:0041C950 hFile           = dword ptr -3Ch
.text:0041C950 lpCreationTime  = dword ptr -38h
.text:0041C950 lpLastAccessTime= dword ptr -34h
.text:0041C950 lpLastWriteTime = dword ptr -30h
.text:0041C950 LastWriteTime   = FILETIME ptr -24h
.text:0041C950 LastAccessTime  = FILETIME ptr -1Ch
.text:0041C950 arg_0           = dword ptr  4
.text:0041C950 lpFileName      = dword ptr  8
.text:0041C950 arg_8           = dword ptr  0Ch
.text:0041C950
.text:0041C950                 push    ebp
.text:0041C951                 push    edi
.text:0041C952                 push    esi
.text:0041C953                 push    ebx
.text:0041C954                 sub     esp, 2Ch
.text:0041C957                 mov     ebp, [esp+3Ch+arg_0]
.text:0041C95B                 mov     edi, [esp+3Ch+arg_8]
.text:0041C95F                 cmp     ebp, 0FFFFFFFFh
.text:0041C962                 jz      loc_41CA31
.text:0041C968                 test    edi, edi
.text:0041C96A                 jz      loc_41CA10
.text:0041C970                 mov     eax, [edi]
.text:0041C972                 mov     esi, 989680h
.text:0041C977                 imul    esi
.text:0041C979                 mov     ebx, edx
.text:0041C97B                 mov     ecx, eax
.text:0041C97D                 mov     edx, [edi+4]
.text:0041C980                 lea     eax, [edx+edx*4]
.text:0041C983                 add     eax, eax
.text:0041C985                 cdq
.text:0041C986                 add     ecx, eax
.text:0041C988                 adc     ebx, edx
.text:0041C98A                 add     ecx, 0D53E8000h
.text:0041C990                 adc     ebx, 19DB1DEh
.text:0041C996                 mov     [esp+3Ch+LastAccessTime.dwLowDateTime], ecx
.text:0041C99A                 mov     [esp+3Ch+LastAccessTime.dwHighDateTime], ebx
.text:0041C99E                 mov     eax, [edi+8]
.text:0041C9A1                 imul    esi
.text:0041C9A3                 mov     ecx, edx
.text:0041C9A5                 mov     esi, eax
.text:0041C9A7                 mov     edx, [edi+0Ch]
.text:0041C9AA                 lea     eax, [edx+edx*4]
.text:0041C9AD                 add     eax, eax
.text:0041C9AF                 cdq
.text:0041C9B0                 add     esi, eax
.text:0041C9B2                 adc     ecx, edx
.text:0041C9B4                 add     esi, 0D53E8000h
.text:0041C9BA                 adc     ecx, 19DB1DEh
.text:0041C9C0                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041C9C4                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], esi
.text:0041C9C8
.text:0041C9C8 loc_41C9C8:                             ; CODE XREF: sub_41C950+DF↓j
.text:0041C9C8                 mov     [esp+3Ch+lpCreationTime], 0 ; lpCreationTime
.text:0041C9D0                 lea     eax, [esp+3Ch+LastWriteTime]
.text:0041C9D4                 lea     edi, [esp+3Ch+LastAccessTime]
.text:0041C9D8                 mov     [esp+3Ch+lpLastWriteTime], eax ; lpLastWriteTime
.text:0041C9DC                 mov     [esp+3Ch+lpLastAccessTime], edi ; lpLastAccessTime
.text:0041C9E0                 mov     [esp+3Ch+hFile], ebp ; hFile
.text:0041C9E3                 call    SetFileTime
.text:0041C9E8                 sub     esp, 10h
.text:0041C9EB                 xor     edx, edx
.text:0041C9ED                 test    eax, eax
.text:0041C9EF
.text:0041C9EF loc_41C9EF:                             ; CODE XREF: sub_41C950+F4↓j
.text:0041C9EF                 jz      short loc_41C9FB
.text:0041C9F1
.text:0041C9F1 loc_41C9F1:                             ; CODE XREF: sub_41C950+BE↓j
.text:0041C9F1                 add     esp, 2Ch
.text:0041C9F4                 mov     eax, edx
.text:0041C9F6                 pop     ebx
.text:0041C9F7                 pop     esi
.text:0041C9F8                 pop     edi
.text:0041C9F9                 pop     ebp
.text:0041C9FA                 retn
.text:0041C9FB ; ---------------------------------------------------------------------------
.text:0041C9FB
.text:0041C9FB loc_41C9FB:                             ; CODE XREF: sub_41C950:loc_41C9EF↑j
.text:0041C9FB                 call    sub_41ACA0
.text:0041CA00                 mov     ebp, eax
.text:0041CA02                 call    _errno
.text:0041CA07                 mov     [eax], ebp
.text:0041CA09                 mov     edx, 0FFFFFFFFh
.text:0041CA0E                 jmp     short loc_41C9F1
.text:0041CA10 ; ---------------------------------------------------------------------------
.text:0041CA10
.text:0041CA10 loc_41CA10:                             ; CODE XREF: sub_41C950+1A↑j
.text:0041CA10                 lea     ebx, [esp+3Ch+LastAccessTime]
.text:0041CA14                 mov     [esp+3Ch+hFile], ebx ; lpSystemTimeAsFileTime
.text:0041CA17                 call    GetSystemTimeAsFileTime
.text:0041CA1C                 sub     esp, 4
.text:0041CA1F                 mov     edx, [esp+3Ch+LastAccessTime.dwLowDateTime]
.text:0041CA23                 mov     ecx, [esp+3Ch+LastAccessTime.dwHighDateTime]
.text:0041CA27                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], edx
.text:0041CA2B                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041CA2F                 jmp     short loc_41C9C8
.text:0041CA31 ; ---------------------------------------------------------------------------
.text:0041CA31
.text:0041CA31 loc_41CA31:                             ; CODE XREF: sub_41C950+12↑j
.text:0041CA31                 mov     edx, [esp+3Ch+lpFileName]
.text:0041CA35                 mov     [esp+3Ch+hFile], edx ; lpFileName
.text:0041CA38                 call    GetFileAttributesA
.text:0041CA3D                 sub     esp, 4
.text:0041CA40                 xor     edx, edx
.text:0041CA42                 test    al, 10h
.text:0041CA44                 jmp     short loc_41C9EF
.text:0041CA44 sub_41C950      endp
.text:0041CA44
.text:0041CA44 ; ---------------------------------------------------------------------------
.text:0041CA46                 align 10h
.text:0041CA50
.text:0041CA50 ; =============== S U B R O U T I N E =======================================
.text:0041CA50
.text:0041CA50
.text:0041CA50 ; int __cdecl sub_41CA50(LPCSTR, int)
.text:0041CA50 sub_41CA50      proc near               ; CODE XREF: sub_41A180:loc_41A1E0↑p
.text:0041CA50
.text:0041CA50 lpFileName      = dword ptr -2Ch
.text:0041CA50 dwDesiredAccess = dword ptr -28h
.text:0041CA50 dwShareMode     = dword ptr -24h
.text:0041CA50 lpSecurityAttributes= dword ptr -20h
.text:0041CA50 dwCreationDisposition= dword ptr -1Ch
.text:0041CA50 dwFlagsAndAttributes= dword ptr -18h
.text:0041CA50 hTemplateFile   = dword ptr -14h
.text:0041CA50 var_8           = dword ptr -8
.text:0041CA50 var_4           = dword ptr -4
.text:0041CA50 arg_0           = dword ptr  4
.text:0041CA50 arg_4           = dword ptr  8
.text:0041CA50
.text:0041CA50                 sub     esp, 2Ch
.text:0041CA53                 mov     [esp+2Ch+var_8], ebx
.text:0041CA57                 mov     ebx, [esp+2Ch+arg_0]
.text:0041CA5B                 mov     [esp+2Ch+var_4], esi
.text:0041CA5F                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041CA67                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000080h ; dwFlagsAndAttributes
.text:0041CA6F                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041CA77                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041CA7F                 mov     [esp+2Ch+dwShareMode], 3 ; dwShareMode
.text:0041CA87                 mov     [esp+2Ch+dwDesiredAccess], 100h ; dwDesiredAccess
.text:0041CA8F                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0041CA92                 call    CreateFileA
.text:0041CA97                 sub     esp, 1Ch
.text:0041CA9A                 mov     esi, eax
.text:0041CA9C                 test    ebx, ebx
.text:0041CA9E                 jz      short loc_41CACF
.text:0041CAA0                 mov     [esp+2Ch+dwDesiredAccess], ebx ; lpFileName
.text:0041CAA4                 mov     edx, [esp+2Ch+arg_4]
.text:0041CAA8                 mov     [esp+2Ch+lpFileName], eax ; HANDLE
.text:0041CAAB                 mov     [esp+2Ch+dwShareMode], edx ; int
.text:0041CAAF                 call    sub_41C950
.text:0041CAB4                 mov     [esp+2Ch+lpFileName], esi ; hObject
.text:0041CAB7                 mov     ebx, eax
.text:0041CAB9                 call    CloseHandle
.text:0041CABE                 sub     esp, 4
.text:0041CAC1                 mov     eax, ebx
.text:0041CAC3
.text:0041CAC3 loc_41CAC3:                             ; CODE XREF: sub_41CA50+8F↓j
.text:0041CAC3                 mov     ebx, [esp+2Ch+var_8]
.text:0041CAC7                 mov     esi, [esp+2Ch+var_4]
.text:0041CACB                 add     esp, 2Ch
.text:0041CACE                 retn
.text:0041CACF ; ---------------------------------------------------------------------------
.text:0041CACF
.text:0041CACF loc_41CACF:                             ; CODE XREF: sub_41CA50+4E↑j
.text:0041CACF                 call    _errno
.text:0041CAD4                 mov     dword ptr [eax], 16h
.text:0041CADA                 mov     eax, 0FFFFFFFFh
.text:0041CADF                 jmp     short loc_41CAC3
.text:0041CADF sub_41CA50      endp
.text:0041CADF
.text:0041CADF ; ---------------------------------------------------------------------------
.text:0041CAE1                 align 10h
.text:0041CAF0
.text:0041CAF0 ; =============== S U B R O U T I N E =======================================
.text:0041CAF0
.text:0041CAF0
.text:0041CAF0 sub_41CAF0      proc near               ; CODE XREF: sub_41A520+17↑p
.text:0041CAF0
.text:0041CAF0 hFindFile       = dword ptr -0Ch
.text:0041CAF0 var_8           = dword ptr -8
.text:0041CAF0 var_4           = dword ptr -4
.text:0041CAF0 arg_0           = dword ptr  4
.text:0041CAF0
.text:0041CAF0                 sub     esp, 0Ch
.text:0041CAF3                 mov     [esp+0Ch+var_4], esi
.text:0041CAF7                 mov     esi, [esp+0Ch+arg_0]
.text:0041CAFB                 mov     [esp+0Ch+var_8], ebx
.text:0041CAFF                 test    esi, esi
.text:0041CB01                 jz      short loc_41CB42
.text:0041CB03                 mov     eax, [esi]
.text:0041CB05                 cmp     eax, 0FFFFFFFFh
.text:0041CB08                 jz      short loc_41CB1F
.text:0041CB0A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041CB0D                 call    FindClose
.text:0041CB12                 sub     esp, 4
.text:0041CB15                 test    eax, eax
.text:0041CB17                 jz      short loc_41CB32
.text:0041CB19
.text:0041CB19 loc_41CB19:                             ; CODE XREF: sub_41CAF0+50↓j
.text:0041CB19                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041CB1F
.text:0041CB1F loc_41CB1F:                             ; CODE XREF: sub_41CAF0+18↑j
.text:0041CB1F                 mov     dword ptr [esi+14h], 1
.text:0041CB26
.text:0041CB26 loc_41CB26:                             ; CODE XREF: sub_41CAF0+5D↓j
.text:0041CB26                 mov     ebx, [esp+0Ch+var_8]
.text:0041CB2A                 mov     esi, [esp+0Ch+var_4]
.text:0041CB2E                 add     esp, 0Ch
.text:0041CB31                 retn
.text:0041CB32 ; ---------------------------------------------------------------------------
.text:0041CB32
.text:0041CB32 loc_41CB32:                             ; CODE XREF: sub_41CAF0+27↑j
.text:0041CB32                 call    sub_41ACA0
.text:0041CB37                 mov     ebx, eax
.text:0041CB39                 call    _errno
.text:0041CB3E                 mov     [eax], ebx
.text:0041CB40                 jmp     short loc_41CB19
.text:0041CB42 ; ---------------------------------------------------------------------------
.text:0041CB42
.text:0041CB42 loc_41CB42:                             ; CODE XREF: sub_41CAF0+11↑j
.text:0041CB42                 call    _errno
.text:0041CB47                 mov     dword ptr [eax], 16h
.text:0041CB4D                 jmp     short loc_41CB26
.text:0041CB4D sub_41CAF0      endp
.text:0041CB4D
.text:0041CB4D ; ---------------------------------------------------------------------------
.text:0041CB4F                 align 10h
.text:0041CB50
.text:0041CB50 ; =============== S U B R O U T I N E =======================================
.text:0041CB50
.text:0041CB50
.text:0041CB50 sub_41CB50      proc near               ; CODE XREF: sub_41A740+4F↑p
.text:0041CB50
.text:0041CB50 var_8           = dword ptr -8
.text:0041CB50 var_4           = dword ptr -4
.text:0041CB50 arg_0           = dword ptr  4
.text:0041CB50 arg_4           = dword ptr  8
.text:0041CB50 arg_8           = dword ptr  0Ch
.text:0041CB50
.text:0041CB50                 sub     esp, 8
.text:0041CB53                 mov     ecx, [esp+8+arg_0]
.text:0041CB57                 mov     [esp+8+var_8], ebx
.text:0041CB5A                 mov     ebx, [esp+8+arg_8]
.text:0041CB5E                 mov     [esp+8+var_4], esi
.text:0041CB62                 mov     edx, [esp+8+arg_4]
.text:0041CB66                 mov     eax, ebx
.text:0041CB68                 and     eax, 7
.text:0041CB6B                 cmp     eax, 7          ; switch 8 cases
.text:0041CB6E                 ja      short def_41CB70 ; jumptable 0041CB70 default case
.text:0041CB70                 jmp     ds:jpt_41CB70[eax*4] ; switch jump
.text:0041CB70 ; ---------------------------------------------------------------------------
.text:0041CB77                 align 4
.text:0041CB78 jpt_41CB70      dd offset loc_41CBFA    ; DATA XREF: sub_41CB50+20↑r
.text:0041CB78                 dd offset loc_41CC01    ; jump table for switch statement
.text:0041CB78                 dd offset loc_41CB98
.text:0041CB78                 dd offset loc_41CC09
.text:0041CB78                 dd offset loc_41CC16
.text:0041CB78                 dd offset loc_41CC23
.text:0041CB78                 dd offset loc_41CC30
.text:0041CB78                 dd offset loc_41CC3D
.text:0041CB98 ; ---------------------------------------------------------------------------
.text:0041CB98
.text:0041CB98 loc_41CB98:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CB98                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CB98                 mov     eax, [edx]      ; jumptable 0041CB70 case 2
.text:0041CB9A                 sub     ecx, 1Ch
.text:0041CB9D                 add     ebx, 6
.text:0041CBA0                 sub     edx, 18h
.text:0041CBA3                 lea     esi, [esi+0]
.text:0041CBA9                 lea     edi, [edi+0]
.text:0041CBB0
.text:0041CBB0 loc_41CBB0:                             ; CODE XREF: sub_41CB50+A8↓j
.text:0041CBB0                 mov     esi, [edx+1Ch]
.text:0041CBB3                 add     edx, 20h ; ' '
.text:0041CBB6                 mov     [ecx+1Ch], eax
.text:0041CBB9                 add     ecx, 20h ; ' '
.text:0041CBBC                 sub     ebx, 8
.text:0041CBBF                 jnz     short def_41CB70 ; jumptable 0041CB70 default case
.text:0041CBC1                 mov     [ecx], esi
.text:0041CBC3                 mov     ebx, [esp+8+var_8]
.text:0041CBC6                 mov     esi, [esp+8+var_4]
.text:0041CBCA                 add     esp, 8
.text:0041CBCD                 retn
.text:0041CBCD ; ---------------------------------------------------------------------------
.text:0041CBCE                 align 10h
.text:0041CBD0
.text:0041CBD0 def_41CB70:                             ; CODE XREF: sub_41CB50+1E↑j
.text:0041CBD0                                         ; sub_41CB50+6F↑j ...
.text:0041CBD0                 mov     eax, [edx]      ; jumptable 0041CB70 default case
.text:0041CBD2                 mov     [ecx], esi
.text:0041CBD4
.text:0041CBD4 loc_41CBD4:                             ; CODE XREF: sub_41CB50+AF↓j
.text:0041CBD4                 mov     esi, [edx+4]
.text:0041CBD7                 mov     [ecx+4], eax
.text:0041CBDA
.text:0041CBDA loc_41CBDA:                             ; CODE XREF: sub_41CB50+F6↓j
.text:0041CBDA                 mov     eax, [edx+8]
.text:0041CBDD                 mov     [ecx+8], esi
.text:0041CBE0
.text:0041CBE0 loc_41CBE0:                             ; CODE XREF: sub_41CB50+EB↓j
.text:0041CBE0                 mov     esi, [edx+0Ch]
.text:0041CBE3                 mov     [ecx+0Ch], eax
.text:0041CBE6
.text:0041CBE6 loc_41CBE6:                             ; CODE XREF: sub_41CB50+DE↓j
.text:0041CBE6                 mov     eax, [edx+10h]
.text:0041CBE9                 mov     [ecx+10h], esi
.text:0041CBEC
.text:0041CBEC loc_41CBEC:                             ; CODE XREF: sub_41CB50+D1↓j
.text:0041CBEC                 mov     esi, [edx+14h]
.text:0041CBEF                 mov     [ecx+14h], eax
.text:0041CBF2
.text:0041CBF2 loc_41CBF2:                             ; CODE XREF: sub_41CB50+C4↓j
.text:0041CBF2                 mov     eax, [edx+18h]
.text:0041CBF5                 mov     [ecx+18h], esi
.text:0041CBF8                 jmp     short loc_41CBB0
.text:0041CBFA ; ---------------------------------------------------------------------------
.text:0041CBFA
.text:0041CBFA loc_41CBFA:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CBFA                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CBFA                 mov     eax, [edx]      ; jumptable 0041CB70 case 0
.text:0041CBFC                 sub     ecx, 4
.text:0041CBFF                 jmp     short loc_41CBD4
.text:0041CC01 ; ---------------------------------------------------------------------------
.text:0041CC01
.text:0041CC01 loc_41CC01:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC01                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC01                 mov     esi, [edx]      ; jumptable 0041CB70 case 1
.text:0041CC03                 dec     ebx
.text:0041CC04                 add     edx, 4
.text:0041CC07                 jmp     short def_41CB70 ; jumptable 0041CB70 default case
.text:0041CC09 ; ---------------------------------------------------------------------------
.text:0041CC09
.text:0041CC09 loc_41CC09:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC09                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC09                 mov     esi, [edx]      ; jumptable 0041CB70 case 3
.text:0041CC0B                 sub     ecx, 18h
.text:0041CC0E                 add     ebx, 5
.text:0041CC11                 sub     edx, 14h
.text:0041CC14                 jmp     short loc_41CBF2
.text:0041CC16 ; ---------------------------------------------------------------------------
.text:0041CC16
.text:0041CC16 loc_41CC16:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC16                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC16                 mov     eax, [edx]      ; jumptable 0041CB70 case 4
.text:0041CC18                 sub     ecx, 14h
.text:0041CC1B                 add     ebx, 4
.text:0041CC1E                 sub     edx, 10h
.text:0041CC21                 jmp     short loc_41CBEC
.text:0041CC23 ; ---------------------------------------------------------------------------
.text:0041CC23
.text:0041CC23 loc_41CC23:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC23                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC23                 mov     esi, [edx]      ; jumptable 0041CB70 case 5
.text:0041CC25                 sub     ecx, 10h
.text:0041CC28                 add     ebx, 3
.text:0041CC2B                 sub     edx, 0Ch
.text:0041CC2E                 jmp     short loc_41CBE6
.text:0041CC30 ; ---------------------------------------------------------------------------
.text:0041CC30
.text:0041CC30 loc_41CC30:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC30                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC30                 mov     eax, [edx]      ; jumptable 0041CB70 case 6
.text:0041CC32                 sub     ecx, 0Ch
.text:0041CC35                 add     ebx, 2
.text:0041CC38                 sub     edx, 8
.text:0041CC3B                 jmp     short loc_41CBE0
.text:0041CC3D ; ---------------------------------------------------------------------------
.text:0041CC3D
.text:0041CC3D loc_41CC3D:                             ; CODE XREF: sub_41CB50+20↑j
.text:0041CC3D                                         ; DATA XREF: sub_41CB50:jpt_41CB70↑o
.text:0041CC3D                 mov     esi, [edx]      ; jumptable 0041CB70 case 7
.text:0041CC3F                 sub     ecx, 8
.text:0041CC42                 inc     ebx
.text:0041CC43                 sub     edx, 4
.text:0041CC46                 jmp     short loc_41CBDA
.text:0041CC46 sub_41CB50      endp
.text:0041CC46
.text:0041CC46 ; ---------------------------------------------------------------------------
.text:0041CC48                 align 10h
.text:0041CC50
.text:0041CC50 ; =============== S U B R O U T I N E =======================================
.text:0041CC50
.text:0041CC50
.text:0041CC50 sub_41CC50      proc near               ; CODE XREF: sub_41A740+93↑p
.text:0041CC50
.text:0041CC50 var_1C          = dword ptr -1Ch
.text:0041CC50 var_18          = dword ptr -18h
.text:0041CC50 var_14          = dword ptr -14h
.text:0041CC50 arg_0           = dword ptr  4
.text:0041CC50 arg_4           = dword ptr  8
.text:0041CC50 arg_8           = dword ptr  0Ch
.text:0041CC50
.text:0041CC50                 push    ebp
.text:0041CC51                 push    edi
.text:0041CC52                 push    esi
.text:0041CC53                 push    ebx
.text:0041CC54                 sub     esp, 0Ch
.text:0041CC57                 mov     edx, [esp+1Ch+arg_4]
.text:0041CC5B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0041CC63                 mov     eax, [esp+1Ch+arg_8]
.text:0041CC67                 mov     esi, [esp+1Ch+arg_0]
.text:0041CC6B                 mov     ecx, edx
.text:0041CC6D                 and     ecx, 3
.text:0041CC70                 and     eax, 3
.text:0041CC73                 shl     ecx, 3
.text:0041CC76                 and     edx, 0FFFFFFFCh
.text:0041CC79                 sub     [esp+1Ch+var_14], ecx
.text:0041CC7D                 cmp     eax, 1
.text:0041CC80                 mov     [esp+1Ch+var_18], ecx
.text:0041CC84                 jz      loc_41CD70
.text:0041CC8A                 cmp     eax, 1
.text:0041CC8D                 jb      loc_41CD60
.text:0041CC93                 cmp     eax, 2
.text:0041CC96                 jz      loc_41CD44
.text:0041CC9C                 cmp     eax, 3
.text:0041CC9F                 jz      loc_41CD33
.text:0041CCA5
.text:0041CCA5 loc_41CCA5:                             ; CODE XREF: sub_41CC50+C7↓j
.text:0041CCA5                                         ; sub_41CC50+12C↓j
.text:0041CCA5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041CCAA                 mov     eax, edi
.text:0041CCAC                 mov     ebx, [edx]
.text:0041CCAE                 shr     ebp, cl
.text:0041CCB0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041CCB5                 shl     eax, cl
.text:0041CCB7                 or      ebp, eax
.text:0041CCB9                 mov     [esi], ebp
.text:0041CCBB
.text:0041CCBB loc_41CCBB:                             ; CODE XREF: sub_41CC50+11B↓j
.text:0041CCBB                 mov     ecx, [edx+4]
.text:0041CCBE                 mov     ebp, ebx
.text:0041CCC0                 mov     [esp+1Ch+var_1C], ecx
.text:0041CCC3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041CCC8                 shr     edi, cl
.text:0041CCCA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041CCCF                 shl     ebp, cl
.text:0041CCD1                 or      edi, ebp
.text:0041CCD3                 mov     [esi+4], edi
.text:0041CCD6
.text:0041CCD6 loc_41CCD6:                             ; CODE XREF: sub_41CC50+F2↓j
.text:0041CCD6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041CCDB                 mov     edi, [esp+1Ch+var_1C]
.text:0041CCDE                 mov     ebp, [edx+8]
.text:0041CCE1                 shr     ebx, cl
.text:0041CCE3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041CCE8                 shl     edi, cl
.text:0041CCEA                 or      ebx, edi
.text:0041CCEC                 mov     [esi+8], ebx
.text:0041CCEF
.text:0041CCEF loc_41CCEF:                             ; CODE XREF: sub_41CC50+107↓j
.text:0041CCEF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041CCF4                 mov     ebx, ebp
.text:0041CCF6                 mov     edi, [edx+0Ch]
.text:0041CCF9                 add     edx, 10h
.text:0041CCFC                 shr     [esp+1Ch+var_1C], cl
.text:0041CCFF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041CD04                 shl     ebx, cl
.text:0041CD06                 or      [esp+1Ch+var_1C], ebx
.text:0041CD09                 mov     ebx, [esp+1Ch+var_1C]
.text:0041CD0C                 mov     [esi+0Ch], ebx
.text:0041CD0F                 add     esi, 10h
.text:0041CD12                 sub     [esp+1Ch+arg_8], 4
.text:0041CD17                 jnz     short loc_41CCA5
.text:0041CD19                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041CD1E                 shr     ebp, cl
.text:0041CD20                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041CD25                 shl     edi, cl
.text:0041CD27                 or      ebp, edi
.text:0041CD29                 mov     [esi], ebp
.text:0041CD2B                 add     esp, 0Ch
.text:0041CD2E                 pop     ebx
.text:0041CD2F                 pop     esi
.text:0041CD30                 pop     edi
.text:0041CD31                 pop     ebp
.text:0041CD32                 retn
.text:0041CD33 ; ---------------------------------------------------------------------------
.text:0041CD33
.text:0041CD33 loc_41CD33:                             ; CODE XREF: sub_41CC50+4F↑j
.text:0041CD33                 inc     [esp+1Ch+arg_8]
.text:0041CD37                 sub     esi, 8
.text:0041CD3A                 mov     eax, [edx+4]
.text:0041CD3D                 mov     ebx, [edx]
.text:0041CD3F                 mov     [esp+1Ch+var_1C], eax
.text:0041CD42                 jmp     short loc_41CCD6
.text:0041CD44 ; ---------------------------------------------------------------------------
.text:0041CD44
.text:0041CD44 loc_41CD44:                             ; CODE XREF: sub_41CC50+46↑j
.text:0041CD44                 add     [esp+1Ch+arg_8], 2
.text:0041CD49                 sub     esi, 0Ch
.text:0041CD4C                 mov     ecx, [edx]
.text:0041CD4E                 mov     ebp, [edx+4]
.text:0041CD51                 sub     edx, 4
.text:0041CD54                 mov     [esp+1Ch+var_1C], ecx
.text:0041CD57                 jmp     short loc_41CCEF
.text:0041CD57 ; ---------------------------------------------------------------------------
.text:0041CD59                 align 10h
.text:0041CD60
.text:0041CD60 loc_41CD60:                             ; CODE XREF: sub_41CC50+3D↑j
.text:0041CD60                 mov     edi, [edx]
.text:0041CD62                 sub     esi, 4
.text:0041CD65                 mov     ebx, [edx+4]
.text:0041CD68                 add     edx, 4
.text:0041CD6B                 jmp     loc_41CCBB
.text:0041CD70 ; ---------------------------------------------------------------------------
.text:0041CD70
.text:0041CD70 loc_41CD70:                             ; CODE XREF: sub_41CC50+34↑j
.text:0041CD70                 dec     [esp+1Ch+arg_8]
.text:0041CD74                 mov     ebp, [edx]
.text:0041CD76                 mov     edi, [edx+4]
.text:0041CD79                 add     edx, 8
.text:0041CD7C                 jmp     loc_41CCA5
.text:0041CD7C sub_41CC50      endp
.text:0041CD7C
.text:0041CD81 ; ---------------------------------------------------------------------------
.text:0041CD81                 jmp     short loc_41CD90
.text:0041CD81 ; ---------------------------------------------------------------------------
.text:0041CD83                 align 10h
.text:0041CD90
.text:0041CD90 loc_41CD90:                             ; CODE XREF: .text:0041CD81↑j
.text:0041CD90                 sub     esp, 8
.text:0041CD93                 mov     ecx, [esp+0Ch]
.text:0041CD97                 mov     [esp+4], esi
.text:0041CD9B                 mov     esi, [esp+14h]
.text:0041CD9F                 mov     [esp], ebx
.text:0041CDA2                 mov     edx, [esp+10h]
.text:0041CDA6                 mov     eax, esi
.text:0041CDA8                 and     eax, 7
.text:0041CDAB                 cmp     eax, 7          ; switch 8 cases
.text:0041CDAE                 ja      short def_41CDB0 ; jumptable 0041CDB0 default case
.text:0041CDB0                 jmp     ds:jpt_41CDB0[eax*4] ; switch jump
.text:0041CDB0 ; ---------------------------------------------------------------------------
.text:0041CDB7                 align 4
.text:0041CDB8 jpt_41CDB0      dd offset loc_41CE3C    ; DATA XREF: .text:0041CDB0↑r
.text:0041CDB8                 dd offset loc_41CE47    ; jump table for switch statement
.text:0041CDB8                 dd offset loc_41CDD8
.text:0041CDB8                 dd offset loc_41CE53
.text:0041CDB8                 dd offset loc_41CE61
.text:0041CDB8                 dd offset loc_41CE6F
.text:0041CDB8                 dd offset loc_41CE7D
.text:0041CDB8                 dd offset loc_41CE8B
.text:0041CDD8 ; ---------------------------------------------------------------------------
.text:0041CDD8
.text:0041CDD8 loc_41CDD8:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CDD8                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CDD8                 sub     edx, 8          ; jumptable 0041CDB0 case 2
.text:0041CDDB                 sub     ecx, 4
.text:0041CDDE                 mov     eax, [edx+4]
.text:0041CDE1                 add     esi, 6
.text:0041CDE4                 lea     esi, [esi+0]
.text:0041CDEA                 lea     edi, [edi+0]
.text:0041CDF0
.text:0041CDF0 loc_41CDF0:                             ; CODE XREF: .text:0041CE3A↓j
.text:0041CDF0                 mov     ebx, [edx]
.text:0041CDF2                 sub     edx, 20h ; ' '
.text:0041CDF5                 mov     [ecx], eax
.text:0041CDF7                 sub     ecx, 20h ; ' '
.text:0041CDFA                 sub     esi, 8
.text:0041CDFD                 jnz     short def_41CDB0 ; jumptable 0041CDB0 default case
.text:0041CDFF                 mov     [ecx+1Ch], ebx
.text:0041CE02                 mov     ebx, [esp]
.text:0041CE05                 mov     esi, [esp+4]
.text:0041CE09                 add     esp, 8
.text:0041CE0C                 retn
.text:0041CE0C ; ---------------------------------------------------------------------------
.text:0041CE0D                 align 10h
.text:0041CE10
.text:0041CE10 def_41CDB0:                             ; CODE XREF: .text:0041CDAE↑j
.text:0041CE10                                         ; .text:0041CDFD↑j ...
.text:0041CE10                 mov     eax, [edx+1Ch]  ; jumptable 0041CDB0 default case
.text:0041CE13                 mov     [ecx+1Ch], ebx
.text:0041CE16
.text:0041CE16 loc_41CE16:                             ; CODE XREF: .text:0041CE45↓j
.text:0041CE16                 mov     ebx, [edx+18h]
.text:0041CE19                 mov     [ecx+18h], eax
.text:0041CE1C
.text:0041CE1C loc_41CE1C:                             ; CODE XREF: .text:0041CE95↓j
.text:0041CE1C                 mov     eax, [edx+14h]
.text:0041CE1F                 mov     [ecx+14h], ebx
.text:0041CE22
.text:0041CE22 loc_41CE22:                             ; CODE XREF: .text:0041CE89↓j
.text:0041CE22                 mov     ebx, [edx+10h]
.text:0041CE25                 mov     [ecx+10h], eax
.text:0041CE28
.text:0041CE28 loc_41CE28:                             ; CODE XREF: .text:0041CE7B↓j
.text:0041CE28                 mov     eax, [edx+0Ch]
.text:0041CE2B                 mov     [ecx+0Ch], ebx
.text:0041CE2E
.text:0041CE2E loc_41CE2E:                             ; CODE XREF: .text:0041CE6D↓j
.text:0041CE2E                 mov     ebx, [edx+8]
.text:0041CE31                 mov     [ecx+8], eax
.text:0041CE34
.text:0041CE34 loc_41CE34:                             ; CODE XREF: .text:0041CE5F↓j
.text:0041CE34                 mov     eax, [edx+4]
.text:0041CE37                 mov     [ecx+4], ebx
.text:0041CE3A                 jmp     short loc_41CDF0
.text:0041CE3C ; ---------------------------------------------------------------------------
.text:0041CE3C
.text:0041CE3C loc_41CE3C:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE3C                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE3C                 sub     edx, 20h ; ' '  ; jumptable 0041CDB0 case 0
.text:0041CE3F                 sub     ecx, 1Ch
.text:0041CE42                 mov     eax, [edx+1Ch]
.text:0041CE45                 jmp     short loc_41CE16
.text:0041CE47 ; ---------------------------------------------------------------------------
.text:0041CE47
.text:0041CE47 loc_41CE47:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE47                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE47                 sub     edx, 24h ; '$'  ; jumptable 0041CDB0 case 1
.text:0041CE4A                 sub     ecx, 20h ; ' '
.text:0041CE4D                 mov     ebx, [edx+20h]
.text:0041CE50                 dec     esi
.text:0041CE51                 jmp     short def_41CDB0 ; jumptable 0041CDB0 default case
.text:0041CE53 ; ---------------------------------------------------------------------------
.text:0041CE53
.text:0041CE53 loc_41CE53:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE53                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE53                 sub     edx, 0Ch        ; jumptable 0041CDB0 case 3
.text:0041CE56                 sub     ecx, 8
.text:0041CE59                 mov     ebx, [edx+8]
.text:0041CE5C                 add     esi, 5
.text:0041CE5F                 jmp     short loc_41CE34
.text:0041CE61 ; ---------------------------------------------------------------------------
.text:0041CE61
.text:0041CE61 loc_41CE61:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE61                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE61                 sub     edx, 10h        ; jumptable 0041CDB0 case 4
.text:0041CE64                 sub     ecx, 0Ch
.text:0041CE67                 mov     eax, [edx+0Ch]
.text:0041CE6A                 add     esi, 4
.text:0041CE6D                 jmp     short loc_41CE2E
.text:0041CE6F ; ---------------------------------------------------------------------------
.text:0041CE6F
.text:0041CE6F loc_41CE6F:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE6F                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE6F                 sub     edx, 14h        ; jumptable 0041CDB0 case 5
.text:0041CE72                 sub     ecx, 10h
.text:0041CE75                 mov     ebx, [edx+10h]
.text:0041CE78                 add     esi, 3
.text:0041CE7B                 jmp     short loc_41CE28
.text:0041CE7D ; ---------------------------------------------------------------------------
.text:0041CE7D
.text:0041CE7D loc_41CE7D:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE7D                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE7D                 sub     edx, 18h        ; jumptable 0041CDB0 case 6
.text:0041CE80                 sub     ecx, 14h
.text:0041CE83                 mov     eax, [edx+14h]
.text:0041CE86                 add     esi, 2
.text:0041CE89                 jmp     short loc_41CE22
.text:0041CE8B ; ---------------------------------------------------------------------------
.text:0041CE8B
.text:0041CE8B loc_41CE8B:                             ; CODE XREF: .text:0041CDB0↑j
.text:0041CE8B                                         ; DATA XREF: .text:jpt_41CDB0↑o
.text:0041CE8B                 sub     edx, 1Ch        ; jumptable 0041CDB0 case 7
.text:0041CE8E                 sub     ecx, 18h
.text:0041CE91                 mov     ebx, [edx+18h]
.text:0041CE94                 inc     esi
.text:0041CE95                 jmp     short loc_41CE1C
.text:0041CE95 ; ---------------------------------------------------------------------------
.text:0041CE97                 align 10h
.text:0041CEA0                 push    ebp
.text:0041CEA1                 push    edi
.text:0041CEA2                 push    esi
.text:0041CEA3                 push    ebx
.text:0041CEA4                 sub     esp, 8
.text:0041CEA7                 mov     edx, [esp+20h]
.text:0041CEAB                 mov     dword ptr [esp+4], 20h ; ' '
.text:0041CEB3                 mov     eax, [esp+24h]
.text:0041CEB7                 mov     ecx, edx
.text:0041CEB9                 and     ecx, 3
.text:0041CEBC                 and     eax, 3
.text:0041CEBF                 shl     ecx, 3
.text:0041CEC2                 sub     [esp+4], ecx
.text:0041CEC6                 and     edx, 0FFFFFFFCh
.text:0041CEC9                 add     edx, 4
.text:0041CECC                 mov     [esp], ecx
.text:0041CECF                 cmp     eax, 1
.text:0041CED2                 jz      loc_41CFC8
.text:0041CED8                 cmp     eax, 1
.text:0041CEDB                 jb      loc_41CFB5
.text:0041CEE1                 cmp     eax, 2
.text:0041CEE4                 jz      loc_41CFA0
.text:0041CEEA                 cmp     eax, 3
.text:0041CEED                 jz      loc_41CF8C
.text:0041CEF3
.text:0041CEF3 loc_41CEF3:                             ; CODE XREF: .text:0041CF6C↓j
.text:0041CEF3                                         ; .text:0041CFDA↓j
.text:0041CEF3                 movzx   ecx, byte ptr [esp]
.text:0041CEF7                 mov     eax, edi
.text:0041CEF9                 mov     ebx, [esp+1Ch]
.text:0041CEFD                 mov     esi, [edx+0Ch]
.text:0041CF00                 shr     eax, cl
.text:0041CF02                 movzx   ecx, byte ptr [esp+4]
.text:0041CF07                 shl     ebp, cl
.text:0041CF09                 or      eax, ebp
.text:0041CF0B                 mov     [ebx+0Ch], eax
.text:0041CF0E
.text:0041CF0E loc_41CF0E:                             ; CODE XREF: .text:0041CFC3↓j
.text:0041CF0E                 movzx   ecx, byte ptr [esp]
.text:0041CF12                 mov     ebp, esi
.text:0041CF14                 mov     ebx, [edx+8]
.text:0041CF17                 shr     ebp, cl
.text:0041CF19                 movzx   ecx, byte ptr [esp+4]
.text:0041CF1E                 shl     edi, cl
.text:0041CF20                 or      ebp, edi
.text:0041CF22                 mov     edi, [esp+1Ch]
.text:0041CF26                 mov     [edi+8], ebp
.text:0041CF29
.text:0041CF29 loc_41CF29:                             ; CODE XREF: .text:0041CF9E↓j
.text:0041CF29                 movzx   ecx, byte ptr [esp]
.text:0041CF2D                 mov     edi, ebx
.text:0041CF2F                 mov     ebp, [edx+4]
.text:0041CF32                 shr     edi, cl
.text:0041CF34                 movzx   ecx, byte ptr [esp+4]
.text:0041CF39                 shl     esi, cl
.text:0041CF3B                 or      edi, esi
.text:0041CF3D                 mov     esi, [esp+1Ch]
.text:0041CF41                 mov     [esi+4], edi
.text:0041CF44
.text:0041CF44 loc_41CF44:                             ; CODE XREF: .text:0041CFB3↓j
.text:0041CF44                 movzx   ecx, byte ptr [esp]
.text:0041CF48                 mov     esi, ebp
.text:0041CF4A                 mov     edi, [edx]
.text:0041CF4C                 sub     edx, 10h
.text:0041CF4F                 shr     esi, cl
.text:0041CF51                 movzx   ecx, byte ptr [esp+4]
.text:0041CF56                 shl     ebx, cl
.text:0041CF58                 or      esi, ebx
.text:0041CF5A                 mov     ebx, [esp+1Ch]
.text:0041CF5E                 mov     [ebx], esi
.text:0041CF60                 sub     ebx, 10h
.text:0041CF63                 sub     dword ptr [esp+24h], 4
.text:0041CF68                 mov     [esp+1Ch], ebx
.text:0041CF6C                 jnz     short loc_41CEF3
.text:0041CF6E                 movzx   ecx, byte ptr [esp]
.text:0041CF72                 mov     edx, [esp+1Ch]
.text:0041CF76                 shr     edi, cl
.text:0041CF78                 movzx   ecx, byte ptr [esp+4]
.text:0041CF7D                 shl     ebp, cl
.text:0041CF7F                 or      edi, ebp
.text:0041CF81                 mov     [edx+0Ch], edi
.text:0041CF84                 add     esp, 8
.text:0041CF87                 pop     ebx
.text:0041CF88                 pop     esi
.text:0041CF89                 pop     edi
.text:0041CF8A                 pop     ebp
.text:0041CF8B                 retn
.text:0041CF8C ; ---------------------------------------------------------------------------
.text:0041CF8C
.text:0041CF8C loc_41CF8C:                             ; CODE XREF: .text:0041CEED↑j
.text:0041CF8C                 sub     dword ptr [esp+1Ch], 8
.text:0041CF91                 sub     edx, 10h
.text:0041CF94                 inc     dword ptr [esp+24h]
.text:0041CF98                 mov     esi, [edx+0Ch]
.text:0041CF9B                 mov     ebx, [edx+8]
.text:0041CF9E                 jmp     short loc_41CF29
.text:0041CFA0 ; ---------------------------------------------------------------------------
.text:0041CFA0
.text:0041CFA0 loc_41CFA0:                             ; CODE XREF: .text:0041CEE4↑j
.text:0041CFA0                 sub     dword ptr [esp+1Ch], 4
.text:0041CFA5                 sub     edx, 0Ch
.text:0041CFA8                 add     dword ptr [esp+24h], 2
.text:0041CFAD                 mov     ebx, [edx+8]
.text:0041CFB0                 mov     ebp, [edx+4]
.text:0041CFB3                 jmp     short loc_41CF44
.text:0041CFB5 ; ---------------------------------------------------------------------------
.text:0041CFB5
.text:0041CFB5 loc_41CFB5:                             ; CODE XREF: .text:0041CEDB↑j
.text:0041CFB5                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041CFBA                 sub     edx, 14h
.text:0041CFBD                 mov     edi, [edx+10h]
.text:0041CFC0                 mov     esi, [edx+0Ch]
.text:0041CFC3                 jmp     loc_41CF0E
.text:0041CFC8 ; ---------------------------------------------------------------------------
.text:0041CFC8
.text:0041CFC8 loc_41CFC8:                             ; CODE XREF: .text:0041CED2↑j
.text:0041CFC8                 sub     dword ptr [esp+1Ch], 10h
.text:0041CFCD                 sub     edx, 18h
.text:0041CFD0                 dec     dword ptr [esp+24h]
.text:0041CFD4                 mov     ebp, [edx+14h]
.text:0041CFD7                 mov     edi, [edx+10h]
.text:0041CFDA                 jmp     loc_41CEF3
.text:0041CFDA ; ---------------------------------------------------------------------------
.text:0041CFDF                 align 10h
.text:0041CFE0
.text:0041CFE0 ; =============== S U B R O U T I N E =======================================
.text:0041CFE0
.text:0041CFE0
.text:0041CFE0 sub_41CFE0      proc near               ; CODE XREF: sub_41A7E0+16↑j
.text:0041CFE0
.text:0041CFE0 arg_0           = dword ptr  4
.text:0041CFE0 arg_4           = dword ptr  8
.text:0041CFE0
.text:0041CFE0                 sub     esp, 0Ch
.text:0041CFE3                 mov     ecx, [esp+0Ch+arg_0]
.text:0041CFE7                 mov     eax, [esp+0Ch+arg_4]
.text:0041CFEB                 test    ecx, ecx
.text:0041CFED                 js      short loc_41D01E
.text:0041CFEF                 test    eax, eax
.text:0041CFF1                 js      short loc_41CFFD
.text:0041CFF3                 cmp     eax, 8
.text:0041CFF6                 jle     short loc_41D011
.text:0041CFF8                 cmp     eax, 0Ch
.text:0041CFFB                 jz      short loc_41D011
.text:0041CFFD
.text:0041CFFD loc_41CFFD:                             ; CODE XREF: sub_41CFE0+11↑j
.text:0041CFFD                 call    _errno
.text:0041D002                 mov     dword ptr [eax], 16h
.text:0041D008
.text:0041D008 loc_41D008:                             ; CODE XREF: sub_41CFE0+3C↓j
.text:0041D008                                         ; sub_41CFE0+49↓j
.text:0041D008                 mov     eax, 0FFFFFFFFh
.text:0041D00D                 add     esp, 0Ch
.text:0041D010                 retn
.text:0041D011 ; ---------------------------------------------------------------------------
.text:0041D011
.text:0041D011 loc_41D011:                             ; CODE XREF: sub_41CFE0+16↑j
.text:0041D011                                         ; sub_41CFE0+1B↑j
.text:0041D011                 call    _errno
.text:0041D016                 mov     dword ptr [eax], 28h ; '('
.text:0041D01C                 jmp     short loc_41D008
.text:0041D01E ; ---------------------------------------------------------------------------
.text:0041D01E
.text:0041D01E loc_41D01E:                             ; CODE XREF: sub_41CFE0+D↑j
.text:0041D01E                 call    _errno
.text:0041D023                 mov     dword ptr [eax], 9
.text:0041D029                 jmp     short loc_41D008
.text:0041D029 sub_41CFE0      endp
.text:0041D029
.text:0041D029 ; ---------------------------------------------------------------------------
.text:0041D02B                 align 10h
.text:0041D030
.text:0041D030 ; =============== S U B R O U T I N E =======================================
.text:0041D030
.text:0041D030
.text:0041D030 sub_41D030      proc near               ; CODE XREF: .text:0041A8BB↑p
.text:0041D030                 xor     eax, eax
.text:0041D032                 retn
.text:0041D032 sub_41D030      endp
.text:0041D032
.text:0041D032 ; ---------------------------------------------------------------------------
.text:0041D033                 align 10h
.text:0041D040
.text:0041D040 ; =============== S U B R O U T I N E =======================================
.text:0041D040
.text:0041D040
.text:0041D040 sub_41D040      proc near               ; CODE XREF: .text:0041A894↑p
.text:0041D040                 xor     eax, eax
.text:0041D042                 retn
.text:0041D042 sub_41D040      endp
.text:0041D042
.text:0041D042 ; ---------------------------------------------------------------------------
.text:0041D043                 align 10h
.text:0041D050
.text:0041D050 ; =============== S U B R O U T I N E =======================================
.text:0041D050
.text:0041D050
.text:0041D050 sub_41D050      proc near               ; CODE XREF: sub_41A8D0+28↑p
.text:0041D050                 xor     eax, eax
.text:0041D052                 retn
.text:0041D052 sub_41D050      endp
.text:0041D052
.text:0041D052 ; ---------------------------------------------------------------------------
.text:0041D053                 align 10h
.text:0041D060
.text:0041D060 ; =============== S U B R O U T I N E =======================================
.text:0041D060
.text:0041D060 ; Attributes: noreturn
.text:0041D060
.text:0041D060 sub_41D060      proc near               ; CODE XREF: .text:0041BE59↑p
.text:0041D060                                         ; sub_41D060↓j
.text:0041D060                 jmp     short sub_41D060
.text:0041D060 sub_41D060      endp
.text:0041D060
.text:0041D060 ; ---------------------------------------------------------------------------
.text:0041D062                 align 10h
.text:0041D070
.text:0041D070 ; =============== S U B R O U T I N E =======================================
.text:0041D070
.text:0041D070
.text:0041D070 sub_41D070      proc near               ; CODE XREF: .text:0041BBB5↑p
.text:0041D070
.text:0041D070 FileHandle      = dword ptr -1Ch
.text:0041D070 dwFileOffsetLow = dword ptr -18h
.text:0041D070 dwFileOffsetHigh= dword ptr -14h
.text:0041D070 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0041D070 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0041D070 var_8           = dword ptr -8
.text:0041D070 var_4           = dword ptr -4
.text:0041D070 arg_0           = dword ptr  4
.text:0041D070
.text:0041D070                 sub     esp, 1Ch
.text:0041D073                 mov     edx, [esp+1Ch+arg_0]
.text:0041D077                 mov     [esp+1Ch+var_4], esi
.text:0041D07B                 mov     [esp+1Ch+var_8], ebx
.text:0041D07F                 mov     ebx, [edx+10h]
.text:0041D082                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041D085                 call    _get_osfhandle
.text:0041D08A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041D08D                 mov     esi, eax
.text:0041D08F                 call    _filelengthi64
.text:0041D094                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0041D098                 cdq
.text:0041D099                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041D09C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0041D0A0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0041D0A8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0041D0B0                 call    UnlockFile
.text:0041D0B5                 sub     esp, 14h
.text:0041D0B8                 mov     ebx, [esp+1Ch+var_8]
.text:0041D0BC                 mov     esi, [esp+1Ch+var_4]
.text:0041D0C0                 add     esp, 1Ch
.text:0041D0C3                 retn
.text:0041D0C3 sub_41D070      endp
.text:0041D0C3
.text:0041D0C3 ; ---------------------------------------------------------------------------
.text:0041D0C4                 align 10h
.text:0041D0D0
.text:0041D0D0 ; =============== S U B R O U T I N E =======================================
.text:0041D0D0
.text:0041D0D0
.text:0041D0D0 ; int __cdecl sub_41D0D0(int, char *Control)
.text:0041D0D0 sub_41D0D0      proc near               ; CODE XREF: .text:0041BA76↑p
.text:0041D0D0                                         ; .text:0041BAC6↑p ...
.text:0041D0D0
.text:0041D0D0 Str             = dword ptr -1Ch
.text:0041D0D0 Val             = dword ptr -18h
.text:0041D0D0 var_8           = dword ptr -8
.text:0041D0D0 var_4           = dword ptr -4
.text:0041D0D0 arg_0           = dword ptr  4
.text:0041D0D0 Control         = dword ptr  8
.text:0041D0D0
.text:0041D0D0                 sub     esp, 1Ch
.text:0041D0D3                 xor     eax, eax
.text:0041D0D5                 mov     edx, [esp+1Ch+Control]
.text:0041D0D9                 mov     [esp+1Ch+var_4], esi
.text:0041D0DD                 mov     esi, [esp+1Ch+arg_0]
.text:0041D0E1                 mov     [esp+1Ch+var_8], ebx
.text:0041D0E5                 mov     ebx, [esi]
.text:0041D0E7                 test    ebx, ebx
.text:0041D0E9                 jz      short loc_41D118
.text:0041D0EB                 movzx   eax, byte ptr [edx]
.text:0041D0EE                 test    al, al
.text:0041D0F0                 jz      short loc_41D110
.text:0041D0F2                 cmp     byte ptr [edx+1], 0
.text:0041D0F6                 jnz     short loc_41D150
.text:0041D0F8                 movzx   ecx, byte ptr [ebx]
.text:0041D0FB                 mov     edx, ebx
.text:0041D0FD                 cmp     cl, al
.text:0041D0FF                 jz      short loc_41D142
.text:0041D101                 test    cl, cl
.text:0041D103                 jnz     short loc_41D124
.text:0041D105                 lea     esi, [esi+0]
.text:0041D109                 lea     edi, [edi+0]
.text:0041D110
.text:0041D110 loc_41D110:                             ; CODE XREF: sub_41D0D0+20↑j
.text:0041D110                                         ; sub_41D0D0+74↓j
.text:0041D110                 mov     dword ptr [esi], 0
.text:0041D116
.text:0041D116 loc_41D116:                             ; CODE XREF: sub_41D0D0+7C↓j
.text:0041D116                 mov     eax, ebx
.text:0041D118
.text:0041D118 loc_41D118:                             ; CODE XREF: sub_41D0D0+19↑j
.text:0041D118                 mov     ebx, [esp+1Ch+var_8]
.text:0041D11C                 mov     esi, [esp+1Ch+var_4]
.text:0041D120                 add     esp, 1Ch
.text:0041D123                 retn
.text:0041D124 ; ---------------------------------------------------------------------------
.text:0041D124
.text:0041D124 loc_41D124:                             ; CODE XREF: sub_41D0D0+33↑j
.text:0041D124                 movsx   edx, al
.text:0041D127                 mov     [esp+1Ch+Val], edx ; Val
.text:0041D12B                 lea     edx, [ebx+1]
.text:0041D12E                 mov     [esp+1Ch+Str], edx ; Str
.text:0041D131                 call    strchr
.text:0041D136                 lea     esi, [esi+0]
.text:0041D139                 lea     edi, [edi+0]
.text:0041D140
.text:0041D140 loc_41D140:                             ; CODE XREF: sub_41D0D0+8C↓j
.text:0041D140                 mov     edx, eax
.text:0041D142
.text:0041D142 loc_41D142:                             ; CODE XREF: sub_41D0D0+2F↑j
.text:0041D142                 test    edx, edx
.text:0041D144                 jz      short loc_41D110
.text:0041D146                 mov     byte ptr [edx], 0
.text:0041D149                 inc     edx
.text:0041D14A                 mov     [esi], edx
.text:0041D14C                 jmp     short loc_41D116
.text:0041D14C ; ---------------------------------------------------------------------------
.text:0041D14E                 align 10h
.text:0041D150
.text:0041D150 loc_41D150:                             ; CODE XREF: sub_41D0D0+26↑j
.text:0041D150                 mov     [esp+1Ch+Val], edx ; Control
.text:0041D154                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041D157                 call    strpbrk
.text:0041D15C                 jmp     short loc_41D140
.text:0041D15C sub_41D0D0      endp
.text:0041D15C
.text:0041D15C ; ---------------------------------------------------------------------------
.text:0041D15E                 align 10h
.text:0041D160 ; const char aTmpf[]
.text:0041D160 aTmpf           db 'tmpf',0             ; DATA XREF: sub_41D170+20↓o
.text:0041D165 ; const char aWBd[]
.text:0041D165 aWBd            db 'w+bD',0             ; DATA XREF: sub_41D170+5E↓o
.text:0041D16A                 align 10h
.text:0041D170
.text:0041D170 ; =============== S U B R O U T I N E =======================================
.text:0041D170
.text:0041D170
.text:0041D170 sub_41D170      proc near               ; CODE XREF: sub_41C4EF+A4↑p
.text:0041D170
.text:0041D170 FileHandle      = dword ptr -13Ch
.text:0041D170 Format          = dword ptr -138h
.text:0041D170 var_134         = dword ptr -134h
.text:0041D170 var_130         = dword ptr -130h
.text:0041D170 var_12C         = dword ptr -12Ch
.text:0041D170 Buffer          = byte ptr -11Ch
.text:0041D170 var_8           = dword ptr -8
.text:0041D170 var_4           = dword ptr -4
.text:0041D170
.text:0041D170                 sub     esp, 13Ch
.text:0041D176                 mov     [esp+13Ch+var_8], ebx
.text:0041D17D                 lea     ebx, [esp+13Ch+Buffer]
.text:0041D181                 mov     [esp+13Ch+var_4], esi
.text:0041D188                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0041D190                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0041D198                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0041D1A0                 mov     [esp+13Ch+Format], 104h ; int
.text:0041D1A8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041D1AB                 call    sub_41D240
.text:0041D1B0                 xor     edx, edx
.text:0041D1B2                 test    eax, eax
.text:0041D1B4                 jnz     short loc_41D1E6
.text:0041D1B6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0041D1B9                 mov     [esp+13Ch+Format], 0 ; int
.text:0041D1C1                 call    sub_41D5C0
.text:0041D1C6                 xor     edx, edx
.text:0041D1C8                 mov     ebx, eax
.text:0041D1CA                 test    eax, eax
.text:0041D1CC                 js      short loc_41D1E6
.text:0041D1CE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0041D1D6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0041D1D9                 call    _fdopen
.text:0041D1DE                 test    eax, eax
.text:0041D1E0                 mov     esi, eax
.text:0041D1E2                 jz      short loc_41D1FD
.text:0041D1E4
.text:0041D1E4 loc_41D1E4:                             ; CODE XREF: sub_41D170+95↓j
.text:0041D1E4                 mov     edx, esi
.text:0041D1E6
.text:0041D1E6 loc_41D1E6:                             ; CODE XREF: sub_41D170+44↑j
.text:0041D1E6                                         ; sub_41D170+5C↑j
.text:0041D1E6                 mov     ebx, [esp+13Ch+var_8]
.text:0041D1ED                 mov     eax, edx
.text:0041D1EF                 mov     esi, [esp+13Ch+var_4]
.text:0041D1F6                 add     esp, 13Ch
.text:0041D1FC                 retn
.text:0041D1FD ; ---------------------------------------------------------------------------
.text:0041D1FD
.text:0041D1FD loc_41D1FD:                             ; CODE XREF: sub_41D170+72↑j
.text:0041D1FD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0041D200                 call    _close_0
.text:0041D205                 jmp     short loc_41D1E4
.text:0041D205 sub_41D170      endp
.text:0041D205
.text:0041D205 ; ---------------------------------------------------------------------------
.text:0041D207                 align 10h
.text:0041D210 aFile           db 'file',0             ; DATA XREF: sub_41D240:loc_41D26C↓o
.text:0041D215 ; const char aSSxxxxxx[]
.text:0041D215 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_41D240+9B↓o
.text:0041D225 ; const char aTemp[]
.text:0041D225 aTemp           db 'TEMP',0             ; DATA XREF: sub_41D240:loc_41D322↓o
.text:0041D225                                         ; sub_41D240:loc_41D362↓o ...
.text:0041D22A ; const char aTmp[]
.text:0041D22A aTmp            db '/tmp',0             ; DATA XREF: sub_41D240+12F↓o
.text:0041D22A                                         ; sub_41D240+141↓o ...
.text:0041D22F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_41D240:loc_41D3E0↓o
.text:0041D236 aTmp_0          db 'TMP',0              ; DATA XREF: sub_41D240:loc_41D470↓o
.text:0041D23A                 align 10h
.text:0041D240
.text:0041D240 ; =============== S U B R O U T I N E =======================================
.text:0041D240
.text:0041D240
.text:0041D240 ; int __cdecl sub_41D240(char *Buffer, int, char *, char *, int)
.text:0041D240 sub_41D240      proc near               ; CODE XREF: sub_41D170+3B↑p
.text:0041D240
.text:0041D240 Str             = dword ptr -1BCh
.text:0041D240 Format          = dword ptr -1B8h
.text:0041D240 var_1B4         = dword ptr -1B4h
.text:0041D240 var_1B0         = dword ptr -1B0h
.text:0041D240 var_1AC         = dword ptr -1ACh
.text:0041D240 var_1A8         = dword ptr -1A8h
.text:0041D240 var_19C         = dword ptr -19Ch
.text:0041D240 var_13C         = dword ptr -13Ch
.text:0041D240 var_DC          = dword ptr -0DCh
.text:0041D240 var_7C          = dword ptr -7Ch
.text:0041D240 Buffer          = dword ptr  4
.text:0041D240 arg_4           = dword ptr  8
.text:0041D240 arg_8           = dword ptr  0Ch
.text:0041D240 arg_C           = dword ptr  10h
.text:0041D240 arg_10          = dword ptr  14h
.text:0041D240
.text:0041D240                 push    ebp
.text:0041D241                 push    edi
.text:0041D242                 push    esi
.text:0041D243                 push    ebx
.text:0041D244                 sub     esp, 1ACh
.text:0041D24A                 mov     eax, [esp+1BCh+arg_C]
.text:0041D251                 mov     esi, [esp+1BCh+arg_8]
.text:0041D258                 test    eax, eax
.text:0041D25A                 jz      short loc_41D26C
.text:0041D25C                 mov     edx, [esp+1BCh+arg_C]
.text:0041D263                 cmp     byte ptr [edx], 0
.text:0041D266                 jnz     loc_41D4A0
.text:0041D26C
.text:0041D26C loc_41D26C:                             ; CODE XREF: sub_41D240+1A↑j
.text:0041D26C                 mov     eax, offset aFile ; "file"
.text:0041D271                 mov     ebp, 4
.text:0041D276                 mov     [esp+1BCh+arg_C], eax
.text:0041D27D
.text:0041D27D loc_41D27D:                             ; CODE XREF: sub_41D240+274↓j
.text:0041D27D                                         ; sub_41D240+27F↓j
.text:0041D27D                 mov     ebx, [esp+1BCh+arg_10]
.text:0041D284                 test    ebx, ebx
.text:0041D286                 jnz     loc_41D3E0
.text:0041D28C
.text:0041D28C loc_41D28C:                             ; CODE XREF: sub_41D240+21C↓j
.text:0041D28C                                         ; sub_41D240+224↓j ...
.text:0041D28C                 test    esi, esi
.text:0041D28E                 jz      loc_41D322
.text:0041D294
.text:0041D294 loc_41D294:                             ; CODE XREF: sub_41D240+176↓j
.text:0041D294                                         ; sub_41D240+19A↓j
.text:0041D294                 mov     [esp+1BCh+Str], esi ; Str
.text:0041D297                 call    strlen
.text:0041D29C                 test    eax, eax
.text:0041D29E                 mov     edx, eax
.text:0041D2A0                 jz      short loc_41D2B0
.text:0041D2A2                 movzx   eax, byte ptr [eax+esi-1]
.text:0041D2A7                 cmp     al, 2Fh ; '/'
.text:0041D2A9                 jz      short loc_41D310
.text:0041D2AB                 cmp     al, 5Ch ; '\'
.text:0041D2AD                 jz      short loc_41D310
.text:0041D2AF                 nop
.text:0041D2B0
.text:0041D2B0 loc_41D2B0:                             ; CODE XREF: sub_41D240+60↑j
.text:0041D2B0                                         ; sub_41D240+D1↓j ...
.text:0041D2B0                 lea     edi, [ebp+edx+8]
.text:0041D2B4                 cmp     [esp+1BCh+arg_4], edi
.text:0041D2BB                 jb      short loc_41D2F8
.text:0041D2BD                 mov     [esp+1BCh+var_1AC], ebp
.text:0041D2C1                 mov     ecx, [esp+1BCh+arg_C]
.text:0041D2C8                 mov     ebp, [esp+1BCh+Buffer]
.text:0041D2CF                 mov     [esp+1BCh+var_1B0], esi
.text:0041D2D3                 mov     [esp+1BCh+var_1A8], ecx
.text:0041D2D7                 mov     [esp+1BCh+var_1B4], edx
.text:0041D2DB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0041D2E3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0041D2E6                 call    sprintf
.text:0041D2EB                 xor     eax, eax
.text:0041D2ED
.text:0041D2ED loc_41D2ED:                             ; CODE XREF: sub_41D240+C8↓j
.text:0041D2ED                 add     esp, 1ACh
.text:0041D2F3                 pop     ebx
.text:0041D2F4                 pop     esi
.text:0041D2F5                 pop     edi
.text:0041D2F6                 pop     ebp
.text:0041D2F7                 retn
.text:0041D2F8 ; ---------------------------------------------------------------------------
.text:0041D2F8
.text:0041D2F8 loc_41D2F8:                             ; CODE XREF: sub_41D240+7B↑j
.text:0041D2F8                 call    _errno
.text:0041D2FD                 mov     dword ptr [eax], 16h
.text:0041D303
.text:0041D303 loc_41D303:                             ; CODE XREF: sub_41D240+187↓j
.text:0041D303                 mov     eax, 0FFFFFFFFh
.text:0041D308                 jmp     short loc_41D2ED
.text:0041D308 ; ---------------------------------------------------------------------------
.text:0041D30A                 align 10h
.text:0041D310
.text:0041D310 loc_41D310:                             ; CODE XREF: sub_41D240+69↑j
.text:0041D310                                         ; sub_41D240+6D↑j ...
.text:0041D310                 dec     edx
.text:0041D311                 jz      short loc_41D2B0
.text:0041D313                 movzx   eax, byte ptr [edx+esi-1]
.text:0041D318                 cmp     al, 2Fh ; '/'
.text:0041D31A                 jz      short loc_41D310
.text:0041D31C                 cmp     al, 5Ch ; '\'
.text:0041D31E                 jz      short loc_41D310
.text:0041D320                 jmp     short loc_41D2B0
.text:0041D322 ; ---------------------------------------------------------------------------
.text:0041D322
.text:0041D322 loc_41D322:                             ; CODE XREF: sub_41D240+4E↑j
.text:0041D322                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041D329                 lea     esi, [esp+1BCh+var_13C]
.text:0041D330                 call    getenv
.text:0041D335                 mov     [esp+1BCh+Format], eax ; char *
.text:0041D339                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041D33D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041D344                 call    sub_41A250
.text:0041D349                 test    eax, eax
.text:0041D34B                 jnz     short loc_41D362
.text:0041D34D                 mov     edi, [esp+1BCh+var_13C]
.text:0041D354                 and     edi, 0F000h
.text:0041D35A                 cmp     edi, 4000h
.text:0041D360                 jz      short loc_41D3CC
.text:0041D362
.text:0041D362 loc_41D362:                             ; CODE XREF: sub_41D240+10B↑j
.text:0041D362                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041D369                 call    getenv
.text:0041D36E                 cld
.text:0041D36F                 mov     edx, offset aTmp ; "/tmp"
.text:0041D374                 mov     esi, eax
.text:0041D376                 mov     ecx, 5
.text:0041D37B                 mov     edi, edx
.text:0041D37D                 repe cmpsb
.text:0041D37F                 jz      short loc_41D3BC
.text:0041D381                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0041D389                 lea     ecx, [esp+1BCh+var_19C]
.text:0041D38D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041D391                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041D398                 call    sub_41A250
.text:0041D39D                 test    eax, eax
.text:0041D39F                 jnz     short loc_41D3BC
.text:0041D3A1                 mov     ebx, [esp+1BCh+var_19C]
.text:0041D3A5                 mov     esi, offset aTmp ; "/tmp"
.text:0041D3AA                 and     ebx, 0F000h
.text:0041D3B0                 cmp     ebx, 4000h
.text:0041D3B6                 jz      loc_41D294
.text:0041D3BC
.text:0041D3BC loc_41D3BC:                             ; CODE XREF: sub_41D240+13F↑j
.text:0041D3BC                                         ; sub_41D240+15F↑j
.text:0041D3BC                 call    _errno
.text:0041D3C1                 mov     dword ptr [eax], 2
.text:0041D3C7                 jmp     loc_41D303
.text:0041D3CC ; ---------------------------------------------------------------------------
.text:0041D3CC
.text:0041D3CC loc_41D3CC:                             ; CODE XREF: sub_41D240+120↑j
.text:0041D3CC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041D3D3                 call    getenv
.text:0041D3D8                 mov     esi, eax
.text:0041D3DA                 jmp     loc_41D294
.text:0041D3DA ; ---------------------------------------------------------------------------
.text:0041D3DF                 align 10h
.text:0041D3E0
.text:0041D3E0 loc_41D3E0:                             ; CODE XREF: sub_41D240+46↑j
.text:0041D3E0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0041D3E7                 call    sub_41DA50
.text:0041D3EC                 test    eax, eax
.text:0041D3EE                 mov     ebx, eax
.text:0041D3F0                 jz      short loc_41D470
.text:0041D3F2
.text:0041D3F2 loc_41D3F2:                             ; CODE XREF: sub_41D240+240↓j
.text:0041D3F2                                         ; sub_41D240+256↓j
.text:0041D3F2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0041D3F6                 lea     edi, [esp+1BCh+var_7C]
.text:0041D3FD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0041D401                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041D408                 call    sub_41A250
.text:0041D40D                 test    eax, eax
.text:0041D40F                 jnz     short loc_41D426
.text:0041D411                 mov     edx, [esp+1BCh+var_7C]
.text:0041D418                 and     edx, 0F000h
.text:0041D41E                 cmp     edx, 4000h
.text:0041D424                 jz      short loc_41D469
.text:0041D426
.text:0041D426 loc_41D426:                             ; CODE XREF: sub_41D240+1CF↑j
.text:0041D426                                         ; sub_41D240+25C↓j
.text:0041D426                 test    esi, esi
.text:0041D428                 jz      short loc_41D462
.text:0041D42A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041D42E                 lea     ecx, [esp+1BCh+var_DC]
.text:0041D435                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041D439                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041D440                 call    sub_41A250
.text:0041D445                 test    eax, eax
.text:0041D447                 jnz     short loc_41D462
.text:0041D449                 mov     ebx, [esp+1BCh+var_DC]
.text:0041D450                 and     ebx, 0F000h
.text:0041D456                 cmp     ebx, 4000h
.text:0041D45C                 jz      loc_41D28C
.text:0041D462
.text:0041D462 loc_41D462:                             ; CODE XREF: sub_41D240+1E8↑j
.text:0041D462                                         ; sub_41D240+207↑j
.text:0041D462                 xor     esi, esi
.text:0041D464                 jmp     loc_41D28C
.text:0041D469 ; ---------------------------------------------------------------------------
.text:0041D469
.text:0041D469 loc_41D469:                             ; CODE XREF: sub_41D240+1E4↑j
.text:0041D469                 mov     esi, ebx
.text:0041D46B                 jmp     loc_41D28C
.text:0041D470 ; ---------------------------------------------------------------------------
.text:0041D470
.text:0041D470 loc_41D470:                             ; CODE XREF: sub_41D240+1B0↑j
.text:0041D470                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0041D477                 call    sub_41DA50
.text:0041D47C                 test    eax, eax
.text:0041D47E                 mov     ebx, eax
.text:0041D480                 jnz     loc_41D3F2
.text:0041D486                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041D48D                 call    sub_41DA50
.text:0041D492                 test    eax, eax
.text:0041D494                 mov     ebx, eax
.text:0041D496                 jnz     loc_41D3F2
.text:0041D49C                 jmp     short loc_41D426
.text:0041D49C ; ---------------------------------------------------------------------------
.text:0041D49E                 align 10h
.text:0041D4A0
.text:0041D4A0 loc_41D4A0:                             ; CODE XREF: sub_41D240+26↑j
.text:0041D4A0                 mov     ecx, [esp+1BCh+arg_C]
.text:0041D4A7                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041D4AA                 call    strlen
.text:0041D4AF                 cmp     eax, 5
.text:0041D4B2                 mov     ebp, eax
.text:0041D4B4                 jbe     loc_41D27D
.text:0041D4BA                 mov     ebp, 5
.text:0041D4BF                 jmp     loc_41D27D
.text:0041D4BF sub_41D240      endp
.text:0041D4BF
.text:0041D4BF ; ---------------------------------------------------------------------------
.text:0041D4C4                 align 10h
.text:0041D4D0 byte_41D4D0     db 61h                  ; DATA XREF: sub_41D5C0+DC↓r
.text:0041D4D0                                         ; sub_41D5C0+122↓r ...
.text:0041D4D1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041D50F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_41D5C0+39↓o
.text:0041D516                 db 1Ah dup(90h)
.text:0041D530 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0041D530                                         ; DATA XREF: sub_41D5C0:loc_41D838↓o
.text:0041D54F                 align 10h
.text:0041D550 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0041D550                                         ; DATA XREF: sub_41D5C0+405↓o
.text:0041D57B                 db 15h dup(90h)
.text:0041D590 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0041D590                                         ; DATA XREF: sub_41D5C0+40D↓o
.text:0041D5B3                 align 10h
.text:0041D5C0
.text:0041D5C0 ; =============== S U B R O U T I N E =======================================
.text:0041D5C0
.text:0041D5C0
.text:0041D5C0 ; int __cdecl sub_41D5C0(char *FileName, int)
.text:0041D5C0 sub_41D5C0      proc near               ; CODE XREF: sub_41D170+51↑p
.text:0041D5C0
.text:0041D5C0 Str             = dword ptr -9Ch
.text:0041D5C0 OpenFlag        = dword ptr -98h
.text:0041D5C0 var_94          = dword ptr -94h
.text:0041D5C0 var_90          = dword ptr -90h
.text:0041D5C0 var_8C          = dword ptr -8Ch
.text:0041D5C0 var_88          = dword ptr -88h
.text:0041D5C0 var_84          = dword ptr -84h
.text:0041D5C0 var_80          = dword ptr -80h
.text:0041D5C0 var_7C          = dword ptr -7Ch
.text:0041D5C0 FileName        = dword ptr  4
.text:0041D5C0 arg_4           = dword ptr  8
.text:0041D5C0
.text:0041D5C0                 push    ebp
.text:0041D5C1                 push    edi
.text:0041D5C2                 push    esi
.text:0041D5C3                 push    ebx
.text:0041D5C4                 sub     esp, 8Ch
.text:0041D5CA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0041D5D2                 call    _errno
.text:0041D5D7                 mov     edx, [eax]
.text:0041D5D9                 mov     [esp+9Ch+var_8C], edx
.text:0041D5DD                 mov     edx, [esp+9Ch+FileName]
.text:0041D5E4                 mov     [esp+9Ch+Str], edx ; Str
.text:0041D5E7                 call    strlen
.text:0041D5EC                 cmp     eax, 5
.text:0041D5EF                 jle     short loc_41D60D
.text:0041D5F1                 cld
.text:0041D5F2                 mov     ecx, [esp+9Ch+FileName]
.text:0041D5F9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041D5FE                 lea     esi, [eax+ecx-6]
.text:0041D602                 mov     ecx, 7
.text:0041D607                 mov     ebp, esi
.text:0041D609                 repe cmpsb
.text:0041D60B                 jz      short loc_41D628
.text:0041D60D
.text:0041D60D loc_41D60D:                             ; CODE XREF: sub_41D5C0+2F↑j
.text:0041D60D                 call    _errno
.text:0041D612                 mov     dword ptr [eax], 16h
.text:0041D618
.text:0041D618 loc_41D618:                             ; CODE XREF: sub_41D5C0+295↓j
.text:0041D618                                         ; sub_41D5C0+2D8↓j ...
.text:0041D618                 mov     eax, 0FFFFFFFFh
.text:0041D61D
.text:0041D61D loc_41D61D:                             ; CODE XREF: sub_41D5C0+2EF↓j
.text:0041D61D                                         ; sub_41D5C0+332↓j
.text:0041D61D                 add     esp, 8Ch
.text:0041D623                 pop     ebx
.text:0041D624                 pop     esi
.text:0041D625                 pop     edi
.text:0041D626                 pop     ebp
.text:0041D627                 retn
.text:0041D628 ; ---------------------------------------------------------------------------
.text:0041D628
.text:0041D628 loc_41D628:                             ; CODE XREF: sub_41D5C0+4B↑j
.text:0041D628                 mov     ecx, ds:dword_422924
.text:0041D62E                 mov     edi, ds:dword_422920
.text:0041D634                 mov     eax, ecx
.text:0041D636                 or      eax, edi
.text:0041D638                 jz      loc_41D973
.text:0041D63E
.text:0041D63E loc_41D63E:                             ; CODE XREF: sub_41D5C0+3F8↓j
.text:0041D63E                 rdtsc
.text:0041D640                 mov     edi, edx
.text:0041D642                 mov     esi, eax
.text:0041D644                 call    _getpid
.text:0041D649                 mov     ebx, eax
.text:0041D64B                 mov     edx, esi
.text:0041D64D                 sar     ebx, 1Fh
.text:0041D650                 xor     edx, eax
.text:0041D652                 mov     ecx, edi
.text:0041D654                 xor     ecx, ebx
.text:0041D656                 mov     ebx, edx
.text:0041D658                 mov     esi, ecx
.text:0041D65A                 add     ebx, ds:dword_422920
.text:0041D660                 adc     esi, ds:dword_422924
.text:0041D666                 xor     edi, edi
.text:0041D668                 mov     ds:dword_422920, ebx
.text:0041D66E                 mov     ds:dword_422924, esi
.text:0041D674                 lea     esi, [esi+0]
.text:0041D67A                 lea     edi, [edi+0]
.text:0041D680
.text:0041D680 loc_41D680:                             ; CODE XREF: sub_41D5C0+2C7↓j
.text:0041D680                 mov     [esp+9Ch+Str], ebx
.text:0041D683                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D687                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D68F                 mov     [esp+9Ch+var_90], 0
.text:0041D697                 call    sub_41F5B0
.text:0041D69C                 movzx   ecx, ds:byte_41D4D0[eax]
.text:0041D6A3                 mov     [ebp+0], cl
.text:0041D6A6                 mov     [esp+9Ch+Str], ebx
.text:0041D6A9                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D6AD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D6B5                 mov     [esp+9Ch+var_90], 0
.text:0041D6BD                 call    sub_41F730
.text:0041D6C2                 mov     [esp+9Ch+Str], eax
.text:0041D6C5                 mov     ebx, eax
.text:0041D6C7                 mov     esi, edx
.text:0041D6C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D6D1                 mov     [esp+9Ch+var_90], 0
.text:0041D6D9                 mov     [esp+9Ch+OpenFlag], edx
.text:0041D6DD                 call    sub_41F5B0
.text:0041D6E2                 movzx   edx, ds:byte_41D4D0[eax]
.text:0041D6E9                 mov     [ebp+1], dl
.text:0041D6EC                 mov     [esp+9Ch+Str], ebx
.text:0041D6EF                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D6F3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D6FB                 mov     [esp+9Ch+var_90], 0
.text:0041D703                 call    sub_41F730
.text:0041D708                 mov     [esp+9Ch+Str], eax
.text:0041D70B                 mov     ebx, eax
.text:0041D70D                 mov     esi, edx
.text:0041D70F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D717                 mov     [esp+9Ch+var_90], 0
.text:0041D71F                 mov     [esp+9Ch+OpenFlag], edx
.text:0041D723                 call    sub_41F5B0
.text:0041D728                 movzx   ecx, ds:byte_41D4D0[eax]
.text:0041D72F                 mov     [ebp+2], cl
.text:0041D732                 mov     [esp+9Ch+Str], ebx
.text:0041D735                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D739                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D741                 mov     [esp+9Ch+var_90], 0
.text:0041D749                 call    sub_41F730
.text:0041D74E                 mov     [esp+9Ch+Str], eax
.text:0041D751                 mov     ebx, eax
.text:0041D753                 mov     esi, edx
.text:0041D755                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D75D                 mov     [esp+9Ch+var_90], 0
.text:0041D765                 mov     [esp+9Ch+OpenFlag], edx
.text:0041D769                 call    sub_41F5B0
.text:0041D76E                 movzx   edx, ds:byte_41D4D0[eax]
.text:0041D775                 mov     [ebp+3], dl
.text:0041D778                 mov     [esp+9Ch+Str], ebx
.text:0041D77B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D77F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D787                 mov     [esp+9Ch+var_90], 0
.text:0041D78F                 call    sub_41F730
.text:0041D794                 mov     [esp+9Ch+Str], eax
.text:0041D797                 mov     ebx, eax
.text:0041D799                 mov     esi, edx
.text:0041D79B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D7A3                 mov     [esp+9Ch+var_90], 0
.text:0041D7AB                 mov     [esp+9Ch+OpenFlag], edx
.text:0041D7AF                 call    sub_41F5B0
.text:0041D7B4                 movzx   ecx, ds:byte_41D4D0[eax]
.text:0041D7BB                 mov     [ebp+4], cl
.text:0041D7BE                 mov     [esp+9Ch+Str], ebx
.text:0041D7C1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D7C9                 mov     [esp+9Ch+var_90], 0
.text:0041D7D1                 mov     [esp+9Ch+OpenFlag], esi
.text:0041D7D5                 call    sub_41F730
.text:0041D7DA                 mov     [esp+9Ch+Str], eax
.text:0041D7DD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041D7E5                 mov     [esp+9Ch+var_90], 0
.text:0041D7ED                 mov     [esp+9Ch+OpenFlag], edx
.text:0041D7F1                 call    sub_41F5B0
.text:0041D7F6                 movzx   ebx, ds:byte_41D4D0[eax]
.text:0041D7FD                 mov     [ebp+5], bl
.text:0041D800                 cmp     [esp+9Ch+arg_4], 1
.text:0041D808                 jz      loc_41D957
.text:0041D80E                 cmp     [esp+9Ch+arg_4], 1
.text:0041D816                 jle     loc_41D920
.text:0041D81C                 cmp     [esp+9Ch+arg_4], 2
.text:0041D824                 jz      loc_41D8F7
.text:0041D82A                 cmp     [esp+9Ch+arg_4], 3
.text:0041D832                 jz      loc_41D8B4
.text:0041D838
.text:0041D838 loc_41D838:                             ; CODE XREF: sub_41D5C0+369↓j
.text:0041D838                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041D83D                 test    ebx, ebx
.text:0041D83F                 jnz     loc_41D9BD
.text:0041D845
.text:0041D845 loc_41D845:                             ; CODE XREF: sub_41D5C0+354↓j
.text:0041D845                 mov     eax, [esp+9Ch+var_88]
.text:0041D849                 test    eax, eax
.text:0041D84B                 jns     short loc_41D8A0
.text:0041D84D                 call    _errno
.text:0041D852                 cmp     dword ptr [eax], 11h
.text:0041D855                 jnz     loc_41D618
.text:0041D85B
.text:0041D85B loc_41D85B:                             ; CODE XREF: sub_41D5C0+315↓j
.text:0041D85B                 mov     edx, ds:dword_422920
.text:0041D861                 mov     ecx, ds:dword_422924
.text:0041D867                 add     edx, 1E61h
.text:0041D86D                 adc     ecx, 0
.text:0041D870                 mov     ebx, edx
.text:0041D872                 inc     edi
.text:0041D873                 mov     ds:dword_422920, edx
.text:0041D879                 cmp     edi, 3A2F8h
.text:0041D87F                 mov     esi, ecx
.text:0041D881                 mov     ds:dword_422924, ecx
.text:0041D887                 jb      loc_41D680
.text:0041D88D                 call    _errno
.text:0041D892                 mov     dword ptr [eax], 11h
.text:0041D898                 jmp     loc_41D618
.text:0041D898 ; ---------------------------------------------------------------------------
.text:0041D89D                 align 10h
.text:0041D8A0
.text:0041D8A0 loc_41D8A0:                             ; CODE XREF: sub_41D5C0+28B↑j
.text:0041D8A0                 call    _errno
.text:0041D8A5                 mov     esi, [esp+9Ch+var_8C]
.text:0041D8A9                 mov     [eax], esi
.text:0041D8AB                 mov     eax, [esp+9Ch+var_88]
.text:0041D8AF                 jmp     loc_41D61D
.text:0041D8B4 ; ---------------------------------------------------------------------------
.text:0041D8B4
.text:0041D8B4 loc_41D8B4:                             ; CODE XREF: sub_41D5C0+272↑j
.text:0041D8B4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041D8BB                 mov     ecx, [esp+9Ch+FileName]
.text:0041D8C2                 lea     esi, [esp+9Ch+var_7C]
.text:0041D8C6                 mov     [esp+9Ch+var_94], esi ; int
.text:0041D8CA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041D8CE                 call    sub_418280
.text:0041D8D3                 test    eax, eax
.text:0041D8D5                 jns     short loc_41D85B
.text:0041D8D7                 call    _errno
.text:0041D8DC                 cmp     dword ptr [eax], 2
.text:0041D8DF                 jnz     loc_41D618
.text:0041D8E5                 call    _errno
.text:0041D8EA                 mov     ebx, [esp+9Ch+var_8C]
.text:0041D8EE                 mov     [eax], ebx
.text:0041D8F0                 xor     eax, eax
.text:0041D8F2                 jmp     loc_41D61D
.text:0041D8F7 ; ---------------------------------------------------------------------------
.text:0041D8F7
.text:0041D8F7 loc_41D8F7:                             ; CODE XREF: sub_41D5C0+264↑j
.text:0041D8F7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041D8FF                 mov     edx, [esp+9Ch+FileName]
.text:0041D906                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0041D909                 call    sub_4182D0
.text:0041D90E                 mov     esi, esi
.text:0041D910
.text:0041D910 loc_41D910:                             ; CODE XREF: sub_41D5C0+395↓j
.text:0041D910                 mov     [esp+9Ch+var_88], eax
.text:0041D914                 jmp     loc_41D845
.text:0041D914 ; ---------------------------------------------------------------------------
.text:0041D919                 align 10h
.text:0041D920
.text:0041D920 loc_41D920:                             ; CODE XREF: sub_41D5C0+256↑j
.text:0041D920                 mov     eax, [esp+9Ch+arg_4]
.text:0041D927                 test    eax, eax
.text:0041D929                 jnz     loc_41D838
.text:0041D92F                 mov     [esp+9Ch+var_94], 180h
.text:0041D937                 mov     esi, [esp+9Ch+FileName]
.text:0041D93E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0041D946                 mov     [esp+9Ch+Str], esi ; FileName
.text:0041D949                 lea     esi, [esi+0]
.text:0041D950
.text:0041D950 loc_41D950:                             ; CODE XREF: sub_41D5C0+3B1↓j
.text:0041D950                 call    _open_0
.text:0041D955                 jmp     short loc_41D910
.text:0041D957 ; ---------------------------------------------------------------------------
.text:0041D957
.text:0041D957 loc_41D957:                             ; CODE XREF: sub_41D5C0+248↑j
.text:0041D957                 mov     [esp+9Ch+var_94], 180h
.text:0041D95F                 mov     ebx, [esp+9Ch+FileName]
.text:0041D966                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041D96E                 mov     [esp+9Ch+Str], ebx
.text:0041D971                 jmp     short loc_41D950
.text:0041D973 ; ---------------------------------------------------------------------------
.text:0041D973
.text:0041D973 loc_41D973:                             ; CODE XREF: sub_41D5C0+78↑j
.text:0041D973                 mov     [esp+9Ch+OpenFlag], 0
.text:0041D97B                 lea     ebx, [esp+9Ch+var_84]
.text:0041D97F                 mov     [esp+9Ch+Str], ebx
.text:0041D982                 call    sub_41D9F0
.text:0041D987                 mov     edi, [esp+9Ch+var_80]
.text:0041D98B                 mov     edx, [esp+9Ch+var_84]
.text:0041D98F                 mov     ecx, edi
.text:0041D991                 mov     ebx, edi
.text:0041D993                 shl     ecx, 10h
.text:0041D996                 sar     ebx, 1Fh
.text:0041D999                 shld    ebx, edi, 10h
.text:0041D99D                 mov     esi, edx
.text:0041D99F                 mov     edi, edx
.text:0041D9A1                 mov     edx, ecx
.text:0041D9A3                 sar     edi, 1Fh
.text:0041D9A6                 xor     edx, esi
.text:0041D9A8                 mov     ds:dword_422920, edx
.text:0041D9AE                 mov     esi, ebx
.text:0041D9B0                 xor     esi, edi
.text:0041D9B2                 mov     ds:dword_422924, esi
.text:0041D9B8                 jmp     loc_41D63E
.text:0041D9BD ; ---------------------------------------------------------------------------
.text:0041D9BD
.text:0041D9BD loc_41D9BD:                             ; CODE XREF: sub_41D5C0+27F↑j
.text:0041D9BD                 mov     [esp+9Ch+var_94], 151h
.text:0041D9C5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041D9CD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0041D9D4                 call    _assert
.text:0041D9D4 sub_41D5C0      endp
.text:0041D9D4
.text:0041D9D4 ; ---------------------------------------------------------------------------
.text:0041D9D9                 db 17h dup(90h)
.text:0041D9F0
.text:0041D9F0 ; =============== S U B R O U T I N E =======================================
.text:0041D9F0
.text:0041D9F0
.text:0041D9F0 sub_41D9F0      proc near               ; CODE XREF: sub_41D5C0+3C2↑p
.text:0041D9F0
.text:0041D9F0 var_1C          = dword ptr -1Ch
.text:0041D9F0 var_18          = dword ptr -18h
.text:0041D9F0 var_C           = dword ptr -0Ch
.text:0041D9F0 var_8           = dword ptr -8
.text:0041D9F0 var_4           = dword ptr -4
.text:0041D9F0 arg_0           = dword ptr  4
.text:0041D9F0 arg_4           = dword ptr  8
.text:0041D9F0
.text:0041D9F0                 sub     esp, 1Ch
.text:0041D9F3                 mov     edx, [esp+1Ch+arg_4]
.text:0041D9F7                 mov     [esp+1Ch+var_4], ebx
.text:0041D9FB                 mov     ebx, [esp+1Ch+arg_0]
.text:0041D9FF                 mov     [esp+1Ch+var_18], edx
.text:0041DA03                 lea     edx, [esp+1Ch+var_C]
.text:0041DA07                 mov     [esp+1Ch+var_1C], edx
.text:0041DA0A                 call    sub_41DA70
.text:0041DA0F                 test    eax, eax
.text:0041DA11                 mov     edx, 0FFFFFFFFh
.text:0041DA16                 jnz     short loc_41DA3A
.text:0041DA18                 mov     ecx, [esp+1Ch+var_C]
.text:0041DA1C                 mov     edx, 10624DD3h
.text:0041DA21                 mov     [ebx], ecx
.text:0041DA23                 mov     ecx, [esp+1Ch+var_8]
.text:0041DA27                 mov     eax, ecx
.text:0041DA29                 imul    edx
.text:0041DA2B                 mov     eax, ecx
.text:0041DA2D                 sar     eax, 1Fh
.text:0041DA30                 sar     edx, 6
.text:0041DA33                 sub     edx, eax
.text:0041DA35                 mov     [ebx+4], edx
.text:0041DA38                 xor     edx, edx
.text:0041DA3A
.text:0041DA3A loc_41DA3A:                             ; CODE XREF: sub_41D9F0+26↑j
.text:0041DA3A                 mov     ebx, [esp+1Ch+var_4]
.text:0041DA3E                 mov     eax, edx
.text:0041DA40                 add     esp, 1Ch
.text:0041DA43                 retn
.text:0041DA43 sub_41D9F0      endp
.text:0041DA43
.text:0041DA43 ; ---------------------------------------------------------------------------
.text:0041DA44                 align 10h
.text:0041DA50
.text:0041DA50 ; =============== S U B R O U T I N E =======================================
.text:0041DA50
.text:0041DA50
.text:0041DA50 sub_41DA50      proc near               ; CODE XREF: sub_41D240+1A7↑p
.text:0041DA50                                         ; sub_41D240+237↑p ...
.text:0041DA50                 mov     edx, ds:dword_422850
.text:0041DA56                 test    edx, edx
.text:0041DA58                 jnz     short loc_41DA60
.text:0041DA5A                 jmp     getenv
.text:0041DA5A ; ---------------------------------------------------------------------------
.text:0041DA5F                 align 10h
.text:0041DA60
.text:0041DA60 loc_41DA60:                             ; CODE XREF: sub_41DA50+8↑j
.text:0041DA60                 xor     eax, eax
.text:0041DA62                 retn
.text:0041DA62 sub_41DA50      endp
.text:0041DA62
.text:0041DA62 ; ---------------------------------------------------------------------------
.text:0041DA63                 align 10h
.text:0041DA70
.text:0041DA70 ; =============== S U B R O U T I N E =======================================
.text:0041DA70
.text:0041DA70
.text:0041DA70 sub_41DA70      proc near               ; CODE XREF: sub_41D9F0+1A↑p
.text:0041DA70
.text:0041DA70 lpTimeZoneInformation= dword ptr -0DCh
.text:0041DA70 var_D8          = dword ptr -0D8h
.text:0041DA70 var_D4          = dword ptr -0D4h
.text:0041DA70 var_D0          = dword ptr -0D0h
.text:0041DA70 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0041DA70 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0041DA70 arg_0           = dword ptr  4
.text:0041DA70 arg_4           = dword ptr  8
.text:0041DA70
.text:0041DA70                 push    edi
.text:0041DA71                 push    esi
.text:0041DA72                 push    ebx
.text:0041DA73                 sub     esp, 0D0h
.text:0041DA79                 mov     ebx, [esp+0DCh+arg_4]
.text:0041DA80                 mov     edi, [esp+0DCh+arg_0]
.text:0041DA87                 test    ebx, ebx
.text:0041DA89                 jz      short loc_41DAB4
.text:0041DA8B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041DA8F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0041DA92                 call    GetTimeZoneInformation
.text:0041DA97                 sub     esp, 4
.text:0041DA9A                 cmp     eax, 0FFFFFFFFh
.text:0041DA9D                 jz      loc_41DB35
.text:0041DAA3                 xor     ecx, ecx
.text:0041DAA5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0041DAA9                 cmp     eax, 2
.text:0041DAAC                 setz    cl
.text:0041DAAF                 mov     [ebx], esi
.text:0041DAB1                 mov     [ebx+4], ecx
.text:0041DAB4
.text:0041DAB4 loc_41DAB4:                             ; CODE XREF: sub_41DA70+19↑j
.text:0041DAB4                                         ; sub_41DA70+E0↓j
.text:0041DAB4                 test    edi, edi
.text:0041DAB6                 jz      short loc_41DB29
.text:0041DAB8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041DABC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041DABF                 call    GetSystemTimeAsFileTime
.text:0041DAC4                 sub     esp, 4
.text:0041DAC7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041DACB                 mov     [esp+0DCh+var_D4], 989680h
.text:0041DAD3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0041DAD7                 mov     [esp+0DCh+var_D0], 0
.text:0041DADF                 add     ebx, 2AC18000h
.text:0041DAE5                 adc     esi, 0FE624E21h
.text:0041DAEB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041DAEF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041DAF2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0041DAF6                 mov     [esp+0DCh+var_D8], esi
.text:0041DAFA                 call    sub_41F730
.text:0041DAFF                 mov     [edi], eax
.text:0041DB01                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041DB04                 mov     [esp+0DCh+var_D4], 989680h
.text:0041DB0C                 mov     [esp+0DCh+var_D0], 0
.text:0041DB14                 mov     [esp+0DCh+var_D8], esi
.text:0041DB18                 call    sub_41F5B0
.text:0041DB1D                 lea     ebx, [eax+eax*4]
.text:0041DB20                 lea     edx, [ebx+ebx*4]
.text:0041DB23                 shl     edx, 2
.text:0041DB26                 mov     [edi+4], edx
.text:0041DB29
.text:0041DB29 loc_41DB29:                             ; CODE XREF: sub_41DA70+46↑j
.text:0041DB29                 add     esp, 0D0h
.text:0041DB2F                 xor     eax, eax
.text:0041DB31                 pop     ebx
.text:0041DB32                 pop     esi
.text:0041DB33                 pop     edi
.text:0041DB34                 retn
.text:0041DB35 ; ---------------------------------------------------------------------------
.text:0041DB35
.text:0041DB35 loc_41DB35:                             ; CODE XREF: sub_41DA70+2D↑j
.text:0041DB35                 mov     dword ptr [ebx], 0
.text:0041DB3B                 mov     dword ptr [ebx+4], 0
.text:0041DB42                 call    sub_41ACA0
.text:0041DB47                 mov     esi, eax
.text:0041DB49                 call    _errno
.text:0041DB4E                 mov     [eax], esi
.text:0041DB50                 jmp     loc_41DAB4
.text:0041DB50 sub_41DA70      endp
.text:0041DB50
.text:0041DB50 ; ---------------------------------------------------------------------------
.text:0041DB55                 align 10h
.text:0041DB60
.text:0041DB60 ; =============== S U B R O U T I N E =======================================
.text:0041DB60
.text:0041DB60 ; Attributes: bp-based frame
.text:0041DB60
.text:0041DB60 sub_41DB60      proc near               ; CODE XREF: sub_406340+43↑p
.text:0041DB60                                         ; sub_406340+6B↑p ...
.text:0041DB60
.text:0041DB60 arg_0           = dword ptr  8
.text:0041DB60 arg_4           = dword ptr  0Ch
.text:0041DB60 arg_8           = dword ptr  10h
.text:0041DB60 arg_C           = dword ptr  14h
.text:0041DB60 arg_10          = dword ptr  18h
.text:0041DB60
.text:0041DB60                 push    ebp
.text:0041DB61                 mov     ebp, esp
.text:0041DB63                 push    esi
.text:0041DB64                 push    ebx
.text:0041DB65                 mov     edx, [ebp+arg_8]
.text:0041DB68                 mov     esi, [ebp+arg_0]
.text:0041DB6B                 mov     ecx, [ebp+arg_4]
.text:0041DB6E                 mov     ebx, [ebp+arg_C]
.text:0041DB71                 test    edx, edx
.text:0041DB73                 jnz     short loc_41DB7A
.text:0041DB75                 mov     edx, 8
.text:0041DB7A
.text:0041DB7A loc_41DB7A:                             ; CODE XREF: sub_41DB60+13↑j
.text:0041DB7A                 test    ecx, ecx
.text:0041DB7C                 jnz     short loc_41DB83
.text:0041DB7E                 mov     ecx, 0FE8h
.text:0041DB83
.text:0041DB83 loc_41DB83:                             ; CODE XREF: sub_41DB60+1C↑j
.text:0041DB83                 mov     eax, [ebp+arg_10]
.text:0041DB86                 sub     esp, 0Ch
.text:0041DB89                 mov     [esi+20h], eax
.text:0041DB8C                 mov     [esi+1Ch], ebx
.text:0041DB8F                 lea     eax, [edx-1]
.text:0041DB92                 mov     [esi], ecx
.text:0041DB94                 mov     [esi+18h], eax
.text:0041DB97                 mov     al, [esi+28h]
.text:0041DB9A                 and     eax, 0FFFFFFFEh
.text:0041DB9D                 mov     [esi+28h], al
.text:0041DBA0                 push    ecx
.text:0041DBA1                 call    ebx
.text:0041DBA3                 mov     ebx, eax
.text:0041DBA5                 add     esp, 10h
.text:0041DBA8                 mov     [esi+4], eax
.text:0041DBAB                 test    eax, eax
.text:0041DBAD                 jz      short loc_41DBE0
.text:0041DBAF
.text:0041DBAF loc_41DBAF:                             ; CODE XREF: .text:0041DBE6↓j
.text:0041DBAF                 lea     eax, [ebx+8]
.text:0041DBB2                 mov     edx, [esi]
.text:0041DBB4                 mov     [esi+8], eax
.text:0041DBB7                 mov     [esi+0Ch], eax
.text:0041DBBA                 mov     eax, ebx
.text:0041DBBC                 add     eax, edx
.text:0041DBBE                 mov     [ebx], eax
.text:0041DBC0                 mov     [esi+10h], eax
.text:0041DBC3                 mov     dword ptr [ebx+4], 0
.text:0041DBCA                 and     byte ptr [esi+28h], 0F9h
.text:0041DBCE                 lea     esp, [ebp-8]
.text:0041DBD1                 mov     eax, 1
.text:0041DBD6                 pop     ebx
.text:0041DBD7                 pop     esi
.text:0041DBD8                 pop     ebp
.text:0041DBD9                 retn
.text:0041DBD9 ; ---------------------------------------------------------------------------
.text:0041DBDA                 align 10h
.text:0041DBE0
.text:0041DBE0 loc_41DBE0:                             ; CODE XREF: sub_41DB60+4D↑j
.text:0041DBE0                 call    off_4210D0
.text:0041DBE0 sub_41DB60      endp
.text:0041DBE0
.text:0041DBE6 ; ---------------------------------------------------------------------------
.text:0041DBE6                 jmp     short loc_41DBAF
.text:0041DBE6 ; ---------------------------------------------------------------------------
.text:0041DBE8                 align 10h
.text:0041DBF0                 push    ebp
.text:0041DBF1                 mov     ebp, esp
.text:0041DBF3                 push    edi
.text:0041DBF4                 push    esi
.text:0041DBF5                 push    ebx
.text:0041DBF6                 sub     esp, 0Ch
.text:0041DBF9                 mov     edx, [ebp+10h]
.text:0041DBFC                 mov     esi, [ebp+8]
.text:0041DBFF                 mov     ecx, [ebp+0Ch]
.text:0041DC02                 mov     ebx, [ebp+14h]
.text:0041DC05                 mov     edi, [ebp+1Ch]
.text:0041DC08                 test    edx, edx
.text:0041DC0A                 jnz     short loc_41DC11
.text:0041DC0C                 mov     edx, 8
.text:0041DC11
.text:0041DC11 loc_41DC11:                             ; CODE XREF: .text:0041DC0A↑j
.text:0041DC11                 test    ecx, ecx
.text:0041DC13                 jnz     short loc_41DC1A
.text:0041DC15                 mov     ecx, 0FE8h
.text:0041DC1A
.text:0041DC1A loc_41DC1A:                             ; CODE XREF: .text:0041DC13↑j
.text:0041DC1A                 mov     eax, [ebp+18h]
.text:0041DC1D                 mov     [esi+1Ch], ebx
.text:0041DC20                 mov     [esi+20h], eax
.text:0041DC23                 mov     [esi], ecx
.text:0041DC25                 lea     eax, [edx-1]
.text:0041DC28                 mov     [esi+24h], edi
.text:0041DC2B                 mov     [esi+18h], eax
.text:0041DC2E                 mov     al, [esi+28h]
.text:0041DC31                 or      eax, 1
.text:0041DC34                 mov     [esi+28h], al
.text:0041DC37                 and     eax, 1
.text:0041DC3A                 jz      short loc_41DC88
.text:0041DC3C                 push    eax
.text:0041DC3D                 push    eax
.text:0041DC3E                 push    ecx
.text:0041DC3F                 push    edi
.text:0041DC40
.text:0041DC40 loc_41DC40:                             ; CODE XREF: .text:0041DC8C↓j
.text:0041DC40                 call    ebx
.text:0041DC42                 mov     ebx, eax
.text:0041DC44                 add     esp, 10h
.text:0041DC47                 mov     [esi+4], eax
.text:0041DC4A                 test    eax, eax
.text:0041DC4C                 jz      short loc_41DC80
.text:0041DC4E
.text:0041DC4E loc_41DC4E:                             ; CODE XREF: .text:0041DC86↓j
.text:0041DC4E                 lea     eax, [ebx+8]
.text:0041DC51                 mov     ecx, [esi]
.text:0041DC53                 mov     [esi+8], eax
.text:0041DC56                 mov     [esi+0Ch], eax
.text:0041DC59                 mov     eax, ebx
.text:0041DC5B                 add     eax, ecx
.text:0041DC5D                 mov     [ebx], eax
.text:0041DC5F                 mov     [esi+10h], eax
.text:0041DC62                 mov     dword ptr [ebx+4], 0
.text:0041DC69                 and     byte ptr [esi+28h], 0F9h
.text:0041DC6D                 lea     esp, [ebp-0Ch]
.text:0041DC70                 mov     eax, 1
.text:0041DC75                 pop     ebx
.text:0041DC76                 pop     esi
.text:0041DC77                 pop     edi
.text:0041DC78                 pop     ebp
.text:0041DC79                 retn
.text:0041DC79 ; ---------------------------------------------------------------------------
.text:0041DC7A                 align 10h
.text:0041DC80
.text:0041DC80 loc_41DC80:                             ; CODE XREF: .text:0041DC4C↑j
.text:0041DC80                 call    off_4210D0
.text:0041DC86 ; ---------------------------------------------------------------------------
.text:0041DC86                 jmp     short loc_41DC4E
.text:0041DC88 ; ---------------------------------------------------------------------------
.text:0041DC88
.text:0041DC88 loc_41DC88:                             ; CODE XREF: .text:0041DC3A↑j
.text:0041DC88                 sub     esp, 0Ch
.text:0041DC8B                 push    ecx
.text:0041DC8C                 jmp     short loc_41DC40
.text:0041DC8C ; ---------------------------------------------------------------------------
.text:0041DC8E                 align 10h
.text:0041DC90
.text:0041DC90 ; =============== S U B R O U T I N E =======================================
.text:0041DC90
.text:0041DC90 ; Attributes: bp-based frame
.text:0041DC90
.text:0041DC90 sub_41DC90      proc near               ; CODE XREF: sub_406A40+5EB↑p
.text:0041DC90                                         ; sub_406A40+884↑p ...
.text:0041DC90
.text:0041DC90 var_14          = dword ptr -14h
.text:0041DC90 var_10          = dword ptr -10h
.text:0041DC90 arg_0           = dword ptr  8
.text:0041DC90 arg_4           = dword ptr  0Ch
.text:0041DC90
.text:0041DC90                 push    ebp
.text:0041DC91                 mov     ebp, esp
.text:0041DC93                 push    edi
.text:0041DC94                 push    esi
.text:0041DC95                 push    ebx
.text:0041DC96                 sub     esp, 0Ch
.text:0041DC99                 mov     esi, [ebp+arg_0]
.text:0041DC9C                 mov     ebx, [ebp+arg_4]
.text:0041DC9F                 mov     eax, [esi+4]
.text:0041DCA2                 mov     edi, [esi+0Ch]
.text:0041DCA5                 mov     [ebp+var_10], eax
.text:0041DCA8                 mov     eax, [esi+8]
.text:0041DCAB                 sub     edi, eax
.text:0041DCAD                 mov     edx, edi
.text:0041DCAF                 mov     eax, edi
.text:0041DCB1                 sar     eax, 3
.text:0041DCB4                 add     edx, ebx
.text:0041DCB6                 lea     eax, [eax+edx+64h]
.text:0041DCBA                 mov     [ebp+var_14], eax
.text:0041DCBD                 mov     eax, [esi]
.text:0041DCBF                 cmp     [ebp+var_14], eax
.text:0041DCC2                 jge     short loc_41DCC7
.text:0041DCC4                 mov     [ebp+var_14], eax
.text:0041DCC7
.text:0041DCC7 loc_41DCC7:                             ; CODE XREF: sub_41DC90+32↑j
.text:0041DCC7                 test    byte ptr [esi+28h], 1
.text:0041DCCB                 jz      loc_41DDAE
.text:0041DCD1                 mov     edx, [ebp+var_14]
.text:0041DCD4                 push    ecx
.text:0041DCD5                 push    ecx
.text:0041DCD6                 push    edx
.text:0041DCD7                 mov     eax, [esi+24h]
.text:0041DCDA                 push    eax
.text:0041DCDB
.text:0041DCDB loc_41DCDB:                             ; CODE XREF: sub_41DC90+125↓j
.text:0041DCDB                 call    dword ptr [esi+1Ch]
.text:0041DCDE                 mov     ebx, eax
.text:0041DCE0                 add     esp, 10h
.text:0041DCE3                 test    eax, eax
.text:0041DCE5                 jz      loc_41DDA3
.text:0041DCEB
.text:0041DCEB loc_41DCEB:                             ; CODE XREF: sub_41DC90+119↓j
.text:0041DCEB                 mov     edx, [ebp+var_10]
.text:0041DCEE                 mov     [esi+4], ebx
.text:0041DCF1                 mov     [ebx+4], edx
.text:0041DCF4                 mov     edx, [ebp+var_14]
.text:0041DCF7                 lea     eax, [edx+ebx]
.text:0041DCFA                 mov     [esi+10h], eax
.text:0041DCFD                 mov     [ebx], eax
.text:0041DCFF                 mov     eax, [esi+18h]
.text:0041DD02                 inc     eax
.text:0041DD03                 cmp     eax, 7
.text:0041DD06                 jle     loc_41DD9C
.text:0041DD0C                 mov     eax, edi
.text:0041DD0E                 shr     eax, 2
.text:0041DD11                 mov     edx, eax
.text:0041DD13                 dec     edx
.text:0041DD14                 js      loc_41DD97
.text:0041DD1A                 mov     ecx, [esi+8]
.text:0041DD1D                 lea     esi, [esi+0]
.text:0041DD20
.text:0041DD20 loc_41DD20:                             ; CODE XREF: sub_41DC90+98↓j
.text:0041DD20                 mov     eax, [ecx+edx*4]
.text:0041DD23                 mov     [ebx+edx*4+8], eax
.text:0041DD27                 dec     edx
.text:0041DD28                 jns     short loc_41DD20
.text:0041DD2A
.text:0041DD2A loc_41DD2A:                             ; CODE XREF: sub_41DC90+10A↓j
.text:0041DD2A                 mov     eax, edi
.text:0041DD2C                 and     eax, 0FFFFFFFCh
.text:0041DD2F
.text:0041DD2F loc_41DD2F:                             ; CODE XREF: sub_41DC90+111↓j
.text:0041DD2F                 mov     edx, eax
.text:0041DD31                 cmp     eax, edi
.text:0041DD33                 jge     short loc_41DD49
.text:0041DD35
.text:0041DD35 loc_41DD35:                             ; CODE XREF: sub_41DC90+B4↓j
.text:0041DD35                 mov     al, [edx+ecx]
.text:0041DD38                 mov     [ebx+edx+8], al
.text:0041DD3C                 inc     edx
.text:0041DD3D                 cmp     edx, edi
.text:0041DD3F                 jge     short loc_41DD46
.text:0041DD41                 mov     ecx, [esi+8]
.text:0041DD44                 jmp     short loc_41DD35
.text:0041DD46 ; ---------------------------------------------------------------------------
.text:0041DD46
.text:0041DD46 loc_41DD46:                             ; CODE XREF: sub_41DC90+AF↑j
.text:0041DD46                 mov     ecx, [esi+8]
.text:0041DD49
.text:0041DD49 loc_41DD49:                             ; CODE XREF: sub_41DC90+A3↑j
.text:0041DD49                 mov     eax, [ebp+var_10]
.text:0041DD4C                 add     eax, 8
.text:0041DD4F                 cmp     ecx, eax
.text:0041DD51                 jz      short loc_41DD6A
.text:0041DD53
.text:0041DD53 loc_41DD53:                             ; CODE XREF: sub_41DC90+DE↓j
.text:0041DD53                                         ; sub_41DC90+FC↓j
.text:0041DD53                 and     byte ptr [esi+28h], 0FDh
.text:0041DD57                 lea     eax, [ebx+8]
.text:0041DD5A                 mov     [esi+8], eax
.text:0041DD5D                 add     eax, edi
.text:0041DD5F                 mov     [esi+0Ch], eax
.text:0041DD62                 lea     esp, [ebp-0Ch]
.text:0041DD65                 pop     ebx
.text:0041DD66                 pop     esi
.text:0041DD67                 pop     edi
.text:0041DD68                 pop     ebp
.text:0041DD69                 retn
.text:0041DD6A ; ---------------------------------------------------------------------------
.text:0041DD6A
.text:0041DD6A loc_41DD6A:                             ; CODE XREF: sub_41DC90+C1↑j
.text:0041DD6A                 test    byte ptr [esi+28h], 2
.text:0041DD6E                 jnz     short loc_41DD53
.text:0041DD70                 mov     edx, [ebp+var_10]
.text:0041DD73                 mov     eax, [edx+4]
.text:0041DD76                 mov     [ebx+4], eax
.text:0041DD79                 test    byte ptr [esi+28h], 1
.text:0041DD7D                 jz      short loc_41DD8E
.text:0041DD7F                 push    eax
.text:0041DD80                 push    eax
.text:0041DD81                 push    edx
.text:0041DD82                 mov     eax, [esi+24h]
.text:0041DD85                 push    eax
.text:0041DD86
.text:0041DD86 loc_41DD86:                             ; CODE XREF: sub_41DC90+105↓j
.text:0041DD86                 call    dword ptr [esi+20h]
.text:0041DD89                 add     esp, 10h
.text:0041DD8C                 jmp     short loc_41DD53
.text:0041DD8E ; ---------------------------------------------------------------------------
.text:0041DD8E
.text:0041DD8E loc_41DD8E:                             ; CODE XREF: sub_41DC90+ED↑j
.text:0041DD8E                 sub     esp, 0Ch
.text:0041DD91                 mov     eax, [ebp+var_10]
.text:0041DD94                 push    eax
.text:0041DD95                 jmp     short loc_41DD86
.text:0041DD97 ; ---------------------------------------------------------------------------
.text:0041DD97
.text:0041DD97 loc_41DD97:                             ; CODE XREF: sub_41DC90+84↑j
.text:0041DD97                 mov     ecx, [esi+8]
.text:0041DD9A                 jmp     short loc_41DD2A
.text:0041DD9C ; ---------------------------------------------------------------------------
.text:0041DD9C
.text:0041DD9C loc_41DD9C:                             ; CODE XREF: sub_41DC90+76↑j
.text:0041DD9C                 xor     eax, eax
.text:0041DD9E                 mov     ecx, [esi+8]
.text:0041DDA1                 jmp     short loc_41DD2F
.text:0041DDA3 ; ---------------------------------------------------------------------------
.text:0041DDA3
.text:0041DDA3 loc_41DDA3:                             ; CODE XREF: sub_41DC90+55↑j
.text:0041DDA3                 call    off_4210D0
.text:0041DDA9 ; ---------------------------------------------------------------------------
.text:0041DDA9                 jmp     loc_41DCEB
.text:0041DDAE ; ---------------------------------------------------------------------------
.text:0041DDAE
.text:0041DDAE loc_41DDAE:                             ; CODE XREF: sub_41DC90+3B↑j
.text:0041DDAE                 sub     esp, 0Ch
.text:0041DDB1                 mov     eax, [ebp+var_14]
.text:0041DDB4                 push    eax
.text:0041DDB5                 jmp     loc_41DCDB
.text:0041DDB5 sub_41DC90      endp ; sp-analysis failed
.text:0041DDB5
.text:0041DDB5 ; ---------------------------------------------------------------------------
.text:0041DDBA                 align 10h
.text:0041DDC0                 push    ebp
.text:0041DDC1                 mov     ebp, esp
.text:0041DDC3                 mov     eax, [ebp+8]
.text:0041DDC6                 mov     edx, [ebp+0Ch]
.text:0041DDC9                 mov     eax, [eax+4]
.text:0041DDCC                 test    eax, eax
.text:0041DDCE                 jz      short loc_41DDE3
.text:0041DDD0                 cmp     eax, edx
.text:0041DDD2                 jb      short loc_41DDEF
.text:0041DDD4
.text:0041DDD4 loc_41DDD4:                             ; CODE XREF: .text:0041DDDD↓j
.text:0041DDD4                                         ; .text:0041DDE1↓j ...
.text:0041DDD4                 mov     eax, [eax+4]
.text:0041DDD7                 test    eax, eax
.text:0041DDD9                 jz      short loc_41DDE3
.text:0041DDDB                 cmp     eax, edx
.text:0041DDDD                 jnb     short loc_41DDD4
.text:0041DDDF                 cmp     [eax], edx
.text:0041DDE1                 jb      short loc_41DDD4
.text:0041DDE3
.text:0041DDE3 loc_41DDE3:                             ; CODE XREF: .text:0041DDCE↑j
.text:0041DDE3                                         ; .text:0041DDD9↑j ...
.text:0041DDE3                 test    eax, eax
.text:0041DDE5                 pop     ebp
.text:0041DDE6                 setnz   al
.text:0041DDE9                 and     eax, 0FFh
.text:0041DDEE                 retn
.text:0041DDEF ; ---------------------------------------------------------------------------
.text:0041DDEF
.text:0041DDEF loc_41DDEF:                             ; CODE XREF: .text:0041DDD2↑j
.text:0041DDEF                 cmp     [eax], edx
.text:0041DDF1                 jb      short loc_41DDD4
.text:0041DDF3                 jmp     short loc_41DDE3
.text:0041DDF3 ; ---------------------------------------------------------------------------
.text:0041DDF5                 align 10h
.text:0041DE00                 push    ebp
.text:0041DE01                 mov     ebp, esp
.text:0041DE03                 push    edi
.text:0041DE04                 push    esi
.text:0041DE05                 push    ebx
.text:0041DE06                 sub     esp, 0Ch
.text:0041DE09                 mov     ebx, [ebp+8]
.text:0041DE0C                 mov     edi, [ebp+0Ch]
.text:0041DE0F                 mov     edx, [ebx+4]
.text:0041DE12                 test    edx, edx
.text:0041DE14                 jz      short loc_41DE5E
.text:0041DE16                 cmp     edx, edi
.text:0041DE18                 jb      short loc_41DE6A
.text:0041DE1A                 lea     esi, [esi+0]
.text:0041DE20
.text:0041DE20 loc_41DE20:                             ; CODE XREF: .text:0041DE42↓j
.text:0041DE20                                         ; .text:0041DE46↓j ...
.text:0041DE20                 mov     esi, [edx+4]
.text:0041DE23                 test    byte ptr [ebx+28h], 1
.text:0041DE27                 jz      short loc_41DE64
.text:0041DE29                 push    eax
.text:0041DE2A                 push    eax
.text:0041DE2B                 push    edx
.text:0041DE2C                 mov     eax, [ebx+24h]
.text:0041DE2F                 push    eax
.text:0041DE30
.text:0041DE30 loc_41DE30:                             ; CODE XREF: .text:0041DE68↓j
.text:0041DE30                 call    dword ptr [ebx+20h]
.text:0041DE33                 add     esp, 10h
.text:0041DE36                 mov     edx, esi
.text:0041DE38                 or      byte ptr [ebx+28h], 2
.text:0041DE3C                 test    esi, esi
.text:0041DE3E                 jz      short loc_41DE5E
.text:0041DE40                 cmp     esi, edi
.text:0041DE42                 jnb     short loc_41DE20
.text:0041DE44                 cmp     [esi], edi
.text:0041DE46                 jb      short loc_41DE20
.text:0041DE48
.text:0041DE48 loc_41DE48:                             ; CODE XREF: .text:0041DE6E↓j
.text:0041DE48                 mov     [ebx+0Ch], edi
.text:0041DE4B                 mov     [ebx+8], edi
.text:0041DE4E                 mov     eax, [edx]
.text:0041DE50                 mov     [ebx+4], edx
.text:0041DE53                 mov     [ebx+10h], eax
.text:0041DE56
.text:0041DE56 loc_41DE56:                             ; CODE XREF: .text:0041DE60↓j
.text:0041DE56                 lea     esp, [ebp-0Ch]
.text:0041DE59                 pop     ebx
.text:0041DE5A                 pop     esi
.text:0041DE5B                 pop     edi
.text:0041DE5C                 pop     ebp
.text:0041DE5D                 retn
.text:0041DE5E ; ---------------------------------------------------------------------------
.text:0041DE5E
.text:0041DE5E loc_41DE5E:                             ; CODE XREF: .text:0041DE14↑j
.text:0041DE5E                                         ; .text:0041DE3E↑j
.text:0041DE5E                 test    edi, edi
.text:0041DE60                 jz      short loc_41DE56
.text:0041DE62                 jmp     short loc_41DE70
.text:0041DE64 ; ---------------------------------------------------------------------------
.text:0041DE64
.text:0041DE64 loc_41DE64:                             ; CODE XREF: .text:0041DE27↑j
.text:0041DE64                 sub     esp, 0Ch
.text:0041DE67                 push    edx
.text:0041DE68                 jmp     short loc_41DE30
.text:0041DE6A ; ---------------------------------------------------------------------------
.text:0041DE6A
.text:0041DE6A loc_41DE6A:                             ; CODE XREF: .text:0041DE18↑j
.text:0041DE6A                 cmp     [edx], edi
.text:0041DE6C                 jb      short loc_41DE20
.text:0041DE6E                 jmp     short loc_41DE48
.text:0041DE70 ; ---------------------------------------------------------------------------
.text:0041DE70
.text:0041DE70 loc_41DE70:                             ; CODE XREF: .text:0041DE62↑j
.text:0041DE70                 call    abort
.text:0041DE70 ; ---------------------------------------------------------------------------
.text:0041DE75                 align 10h
.text:0041DE80
.text:0041DE80 ; =============== S U B R O U T I N E =======================================
.text:0041DE80
.text:0041DE80 ; Attributes: bp-based frame
.text:0041DE80
.text:0041DE80 sub_41DE80      proc near               ; CODE XREF: sub_406640+16↑p
.text:0041DE80                                         ; sub_406640+29↑p ...
.text:0041DE80
.text:0041DE80 arg_0           = dword ptr  8
.text:0041DE80 arg_4           = dword ptr  0Ch
.text:0041DE80
.text:0041DE80                 push    ebp
.text:0041DE81                 mov     ebp, esp
.text:0041DE83                 push    edi
.text:0041DE84                 push    esi
.text:0041DE85                 push    ebx
.text:0041DE86                 sub     esp, 0Ch
.text:0041DE89                 mov     ebx, [ebp+arg_0]
.text:0041DE8C                 mov     edi, [ebp+arg_4]
.text:0041DE8F                 mov     edx, [ebx+4]
.text:0041DE92                 test    edx, edx
.text:0041DE94                 jz      short loc_41DEDE
.text:0041DE96                 cmp     edx, edi
.text:0041DE98                 jb      short loc_41DEEA
.text:0041DE9A                 lea     esi, [esi+0]
.text:0041DEA0
.text:0041DEA0 loc_41DEA0:                             ; CODE XREF: sub_41DE80+42↓j
.text:0041DEA0                                         ; sub_41DE80+46↓j ...
.text:0041DEA0                 mov     esi, [edx+4]
.text:0041DEA3                 test    byte ptr [ebx+28h], 1
.text:0041DEA7                 jz      short loc_41DEE4
.text:0041DEA9                 push    eax
.text:0041DEAA                 push    eax
.text:0041DEAB                 push    edx
.text:0041DEAC                 mov     eax, [ebx+24h]
.text:0041DEAF                 push    eax
.text:0041DEB0
.text:0041DEB0 loc_41DEB0:                             ; CODE XREF: sub_41DE80+68↓j
.text:0041DEB0                 call    dword ptr [ebx+20h]
.text:0041DEB3                 add     esp, 10h
.text:0041DEB6                 mov     edx, esi
.text:0041DEB8                 or      byte ptr [ebx+28h], 2
.text:0041DEBC                 test    esi, esi
.text:0041DEBE                 jz      short loc_41DEDE
.text:0041DEC0                 cmp     esi, edi
.text:0041DEC2                 jnb     short loc_41DEA0
.text:0041DEC4                 cmp     [esi], edi
.text:0041DEC6                 jb      short loc_41DEA0
.text:0041DEC8
.text:0041DEC8 loc_41DEC8:                             ; CODE XREF: sub_41DE80+6E↓j
.text:0041DEC8                 mov     [ebx+0Ch], edi
.text:0041DECB                 mov     [ebx+8], edi
.text:0041DECE                 mov     eax, [edx]
.text:0041DED0                 mov     [ebx+4], edx
.text:0041DED3                 mov     [ebx+10h], eax
.text:0041DED6
.text:0041DED6 loc_41DED6:                             ; CODE XREF: sub_41DE80+60↓j
.text:0041DED6                 lea     esp, [ebp-0Ch]
.text:0041DED9                 pop     ebx
.text:0041DEDA                 pop     esi
.text:0041DEDB                 pop     edi
.text:0041DEDC                 pop     ebp
.text:0041DEDD                 retn
.text:0041DEDE ; ---------------------------------------------------------------------------
.text:0041DEDE
.text:0041DEDE loc_41DEDE:                             ; CODE XREF: sub_41DE80+14↑j
.text:0041DEDE                                         ; sub_41DE80+3E↑j
.text:0041DEDE                 test    edi, edi
.text:0041DEE0                 jz      short loc_41DED6
.text:0041DEE2                 jmp     short loc_41DEF0
.text:0041DEE4 ; ---------------------------------------------------------------------------
.text:0041DEE4
.text:0041DEE4 loc_41DEE4:                             ; CODE XREF: sub_41DE80+27↑j
.text:0041DEE4                 sub     esp, 0Ch
.text:0041DEE7                 push    edx
.text:0041DEE8                 jmp     short loc_41DEB0
.text:0041DEEA ; ---------------------------------------------------------------------------
.text:0041DEEA
.text:0041DEEA loc_41DEEA:                             ; CODE XREF: sub_41DE80+18↑j
.text:0041DEEA                 cmp     [edx], edi
.text:0041DEEC                 jb      short loc_41DEA0
.text:0041DEEE                 jmp     short loc_41DEC8
.text:0041DEF0 ; ---------------------------------------------------------------------------
.text:0041DEF0
.text:0041DEF0 loc_41DEF0:                             ; CODE XREF: sub_41DE80+62↑j
.text:0041DEF0                 call    abort
.text:0041DEF0 sub_41DE80      endp
.text:0041DEF0
.text:0041DEF0 ; ---------------------------------------------------------------------------
.text:0041DEF5                 align 10h
.text:0041DF00                 push    ebp
.text:0041DF01                 xor     ecx, ecx
.text:0041DF03                 mov     ebp, esp
.text:0041DF05                 mov     eax, [ebp+8]
.text:0041DF08                 mov     edx, [eax+4]
.text:0041DF0B                 test    edx, edx
.text:0041DF0D                 jz      short loc_41DF1D
.text:0041DF0F                 nop
.text:0041DF10
.text:0041DF10 loc_41DF10:                             ; CODE XREF: .text:0041DF1B↓j
.text:0041DF10                 mov     eax, [edx]
.text:0041DF12                 sub     eax, edx
.text:0041DF14                 mov     edx, [edx+4]
.text:0041DF17                 add     ecx, eax
.text:0041DF19                 test    edx, edx
.text:0041DF1B                 jnz     short loc_41DF10
.text:0041DF1D
.text:0041DF1D loc_41DF1D:                             ; CODE XREF: .text:0041DF0D↑j
.text:0041DF1D                 mov     eax, ecx
.text:0041DF1F                 pop     ebp
.text:0041DF20                 retn
.text:0041DF20 ; ---------------------------------------------------------------------------
.text:0041DF21 aMemoryExhauste_0 db 'memory exhausted',0Ah,0
.text:0041DF21                                         ; DATA XREF: sub_41DF40+12↓o
.text:0041DF33                 align 10h
.text:0041DF40
.text:0041DF40 ; =============== S U B R O U T I N E =======================================
.text:0041DF40
.text:0041DF40 ; Attributes: noreturn bp-based frame
.text:0041DF40
.text:0041DF40 sub_41DF40      proc near               ; CODE XREF: sub_41DB60:loc_41DBE0↑p
.text:0041DF40                                         ; .text:loc_41DC80↑p ...
.text:0041DF40                 push    ebp
.text:0041DF41                 mov     ebp, esp
.text:0041DF43                 push    ecx
.text:0041DF44                 push    ecx
.text:0041DF45                 mov     eax, ds:_iob
.text:0041DF4A                 add     eax, 40h ; '@'
.text:0041DF4D                 push    eax             ; Stream
.text:0041DF4E                 push    11h             ; ElementCount
.text:0041DF50                 push    1               ; ElementSize
.text:0041DF52                 push    offset aMemoryExhauste_0 ; "memory exhausted\n"
.text:0041DF57                 call    fwrite
.text:0041DF5C                 mov     eax, Code
.text:0041DF61                 pop     edx
.text:0041DF62                 push    eax             ; Code
.text:0041DF63                 call    exit
.text:0041DF63 sub_41DF40      endp
.text:0041DF63
.text:0041DF63 ; ---------------------------------------------------------------------------
.text:0041DF68                 align 10h
.text:0041DF70
.text:0041DF70 ; =============== S U B R O U T I N E =======================================
.text:0041DF70
.text:0041DF70 ; Attributes: thunk
.text:0041DF70
.text:0041DF70 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0041DF70 OleInitialize   proc near               ; CODE XREF: sub_418E90+1A↑p
.text:0041DF70                                         ; sub_419DF0+41↑p
.text:0041DF70                 jmp     ds:__imp_OleInitialize
.text:0041DF70 OleInitialize   endp
.text:0041DF70
.text:0041DF70 ; ---------------------------------------------------------------------------
.text:0041DF76                 align 10h
.text:0041DF80
.text:0041DF80 ; =============== S U B R O U T I N E =======================================
.text:0041DF80
.text:0041DF80 ; Attributes: thunk
.text:0041DF80
.text:0041DF80 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0041DF80 CoCreateInstance proc near              ; CODE XREF: sub_418E90+52↑p
.text:0041DF80                                         ; sub_419DF0+79↑p
.text:0041DF80
.text:0041DF80 rclsid          = dword ptr  4
.text:0041DF80 pUnkOuter       = dword ptr  8
.text:0041DF80 dwClsContext    = dword ptr  0Ch
.text:0041DF80 riid            = dword ptr  10h
.text:0041DF80 ppv             = dword ptr  14h
.text:0041DF80
.text:0041DF80                 jmp     ds:__imp_CoCreateInstance
.text:0041DF80 CoCreateInstance endp
.text:0041DF80
.text:0041DF80 ; ---------------------------------------------------------------------------
.text:0041DF86                 align 10h
.text:0041DF90
.text:0041DF90 ; =============== S U B R O U T I N E =======================================
.text:0041DF90
.text:0041DF90 ; Attributes: thunk
.text:0041DF90
.text:0041DF90 ; void __stdcall CoUninitialize()
.text:0041DF90 CoUninitialize  proc near               ; CODE XREF: sub_418E90+14E↑p
.text:0041DF90                                         ; sub_418E90+16D↑p ...
.text:0041DF90                 jmp     ds:__imp_CoUninitialize
.text:0041DF90 CoUninitialize  endp
.text:0041DF90
.text:0041DF90 ; ---------------------------------------------------------------------------
.text:0041DF96                 align 10h
.text:0041DFA0                 add     al, 0BAh ; 'º'
.text:0041DFA2                 retf
.text:0041DFA2 ; ---------------------------------------------------------------------------
.text:0041DFA3                 db 7Eh
.text:0041DFA4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0041DFA4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0041DFA4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0041DFA4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0041DFA4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0041DFA4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0041DFA4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0041DFA4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0041DFA4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0041DFA4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0041DFA4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0041DFA4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0041DFA4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0041DFA4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0041DFA4                 dd 0C4426C00h, 330h, 0
.text:0041E0D8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041E0D8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0041E0D8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0041E0D8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0041E128                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E128                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0041E128                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0041E128                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0041E128                 dd 0BA94B00h, 1Bh, 0
.text:0041E188                 dd 0C0h, 46000000h, 1Ch, 0
.text:0041E198                 dd 0C0h, 46000000h, 331h, 0
.text:0041E1A8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E1A8                 dd 312h, 0
.text:0041E1C8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0041E1D8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0041E1E8                 dd 0C0h, 46000000h, 311h, 0
.text:0041E1F8                 dd 0C0h, 46000000h, 313h, 0
.text:0041E208                 dd 0C0h, 46000000h, 30Ch, 0
.text:0041E218                 dd 0C0h, 46000000h, 30Fh, 0
.text:0041E228                 dd 0C0h, 46000000h, 310h, 0
.text:0041E238                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E238                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0041E268                 dd 0C0h, 46000000h, 319h, 0
.text:0041E278                 dd 0C0h, 46000000h, 315h, 0
.text:0041E288                 dd 0C0h, 46000000h, 316h, 0
.text:0041E298                 dd 0C0h, 46000000h, 315h, 0
.text:0041E2A8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0041E2B8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041E2B8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0041E2B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0041E2F8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041E2F8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0041E2F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0041E2F8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0041E2F8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0041E2F8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0041E2F8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0041E2F8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0041E2F8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0041E2F8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0041E2F8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0041E2F8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041E2F8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0041E2F8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0041E2F8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0041E2F8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041E2F8                 dd 2DE81h, 0
.text:0041E448                 dd 0C0h, 46000000h, 4 dup(0)
.text:0041E460                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0041E460                 dd 0
.text:0041E478                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041E478                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0041E478                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0041E478                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0041E478                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041E478                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0041E478                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0041E478                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0041E478                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0041E478                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0041E478                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0041E478                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0041E478                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0041E478                 dd 10Fh, 0
.text:0041E588                 dd 0C0h, 46000000h, 125h, 0
.text:0041E598                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041E598                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0041E598                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0041E5D8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0041E5D8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E5D8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0041E5D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0041E5D8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0041E638                 dd 0C0h, 46000000h, 2E012h, 0
.text:0041E648                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0041E648                 dd 140h, 0
.text:0041E668                 dd 0C0h, 46000000h, 1, 0
.text:0041E678                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0041E678                 dd 71D3400h, 13Dh, 0
.text:0041E698                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041E698                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0041E698                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0041E698                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0041E6E8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0041E6E8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041E6E8                 dd 20405h, 0
.text:0041E718                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0041E728                 dd 0C0h, 46000000h, 20406h, 0
.text:0041E738                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0041E748                 dd 0C0h, 46000000h, 110h, 0
.text:0041E758                 dd 0C0h, 46000000h, 10Eh, 0
.text:0041E768                 dd 0C0h, 46000000h, 123h, 0
.text:0041E778                 dd 0C0h, 46000000h, 124h, 0
.text:0041E788                 dd 0C0h, 46000000h, 13h, 0
.text:0041E798                 dd 0C0h, 46000000h, 14h, 0
.text:0041E7A8                 dd 0C0h, 46000000h, 15h, 0
.text:0041E7B8                 dd 0C0h, 46000000h, 20400h, 0
.text:0041E7C8                 dd 0C0h, 46000000h, 121h, 0
.text:0041E7D8                 dd 0C0h, 46000000h, 122h, 0
.text:0041E7E8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0041E7F8                 dd 0C0h, 46000000h, 108h, 0
.text:0041E808                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0041E808                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041E808                 dd 103h, 0
.text:0041E838                 dd 0C0h, 46000000h, 2E000h, 0
.text:0041E848                 dd 0C0h, 46000000h, 106h, 0
.text:0041E858                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E858                 dd 107h, 0
.text:0041E878                 dd 0C0h, 46000000h, 102h, 0
.text:0041E888                 dd 0C0h, 46000000h, 104h, 0
.text:0041E898                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0041E898                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0041E898                 dd 105h, 0
.text:0041E8C8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0041E8D8                 dd 0C0h, 46000000h, 139h, 0
.text:0041E8E8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0041E8F8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041E8F8                 dd 101h, 0
.text:0041E918                 dd 0C0h, 46000000h, 100h, 0
.text:0041E928                 dd 0C0h, 46000000h, 20404h, 0
.text:0041E938                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041E938                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0041E968                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0041E968                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0041E968                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0041E968                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0041E9B8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E9B8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0041E9B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0041E9B8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0041E9B8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041E9B8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0041EA38                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0041EA38                 dd 0Ah, 0
.text:0041EA58                 dd 0C0h, 46000000h, 2, 0
.text:0041EA68                 dd 0C0h, 46000000h, 1Dh, 0
.text:0041EA78                 dd 0C0h, 46000000h, 3, 0
.text:0041EA88                 dd 0C0h, 46000000h, 16h, 0
.text:0041EA98                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0041EA98                 dd 1608D74Fh, 0Fh, 0
.text:0041EAB8                 dd 0C0h, 46000000h, 20h, 0
.text:0041EAC8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0041EAC8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0041EAC8                 dd 0
.text:0041EAF8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0041EB08                 dd 0C0h, 46000000h, 128h, 0
.text:0041EB18                 dd 0C0h, 46000000h, 129h, 0
.text:0041EB28                 dd 0C0h, 46000000h, 118h, 0
.text:0041EB38                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0041EB38                 dd 70474000h, 11Bh, 0
.text:0041EB58                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0041EB58                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041EB58                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0041EB58                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0041EB58                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0041EBB8                 dd 0C0h, 46000000h, 116h, 0
.text:0041EBC8                 dd 0C0h, 46000000h, 113h, 0
.text:0041EBD8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0041EBD8                 dd 119h, 0
.text:0041EBF8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0041EBF8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0041EBF8                 dd 0
.text:0041EC28                 dd 0C0h, 46000000h, 11Ch, 0
.text:0041EC38                 dd 0C0h, 46000000h, 11Dh, 0
.text:0041EC48                 dd 0C0h, 46000000h, 11Fh, 0
.text:0041EC58                 dd 0C0h, 46000000h, 112h, 0
.text:0041EC68                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0041EC68                 dd 18E6000h, 120h, 0
.text:0041EC88                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0041EC88                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0041EC88                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0041ECC8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0041ECC8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0041ECF8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041ECF8                 dd 11Ah, 0
.text:0041ED18                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0041ED18                 dd 10Ch, 0
.text:0041ED38                 dd 0C0h, 46000000h
.text:0041ED40 dword_41ED40    dd 10Bh, 0              ; DATA XREF: sub_418E90+75↑o
.text:0041ED40                                         ; sub_419DF0+CB↑o
.text:0041ED48                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0041ED48                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0041ED48                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0041ED48                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0041ED98                 dd 0C0h, 46000000h, 109h, 0
.text:0041EDA8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0041EDA8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0041EDA8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0041EDA8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0041EDA8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0041EDA8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0041EDA8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0041EDA8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0041EDA8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041EDA8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0041EDA8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0041EE88                 dd 0C0h, 46000000h, 138h, 0
.text:0041EE98                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0041EE98                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0041EE98                 dd 27h, 0
.text:0041EEC8                 dd 0C0h, 46000000h, 8, 0
.text:0041EED8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0041EED8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0041EED8                 dd 20D00h, 0
.text:0041EF08                 dd 0C0h, 46000000h, 20D03h, 0
.text:0041EF18                 dd 0C0h, 46000000h, 12h, 0
.text:0041EF28                 dd 0C0h, 46000000h, 4, 0
.text:0041EF38                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041EF38                 dd 7, 0
.text:0041EF58                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041EF58                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0041EF88                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041EF88                 dd 126h, 0
.text:0041EFA8                 dd 0C0h, 46000000h, 10h, 0
.text:0041EFB8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0041EFB8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0041EFE8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0041EFE8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0041EFE8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0041F028                 dd 0C0h, 46000000h, 0Bh, 0
.text:0041F038                 dd 0C0h, 46000000h, 0Ch, 0
.text:0041F048                 dd 0C0h, 46000000h, 26h, 0
.text:0041F058                 dd 0C0h, 46000000h, 6, 0
.text:0041F068                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0041F068                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0041F068                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0041F0A8                 dd 0C0h, 46000000h, 20403h, 0
.text:0041F0B8                 dd 0C0h, 46000000h, 20401h, 0
.text:0041F0C8                 dd 0C0h, 46000000h, 20412h, 0
.text:0041F0D8                 dd 0C0h, 46000000h, 20402h, 0
.text:0041F0E8                 dd 0C0h, 46000000h, 20411h, 0
.text:0041F0F8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0041F108                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041F108                 dd 10Dh, 0
.text:0041F128                 dd 0C0h, 46000000h, 127h, 0
.text:0041F138                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041F138                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0041F138                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0041F178                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0041F178                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0041F178                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0041F1B8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0041F1C8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0041F1D8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0041F1E8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0041F1F8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0041F208                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0041F218                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0041F228                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0041F238                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0041F248                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0041F258                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0041F268                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0041F278                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0041F288                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0041F298                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0041F2A8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0041F2B8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0041F2C8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0041F2D8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0041F2E8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0041F2F8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0041F308                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0041F318                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0041F328                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0041F338                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0041F348                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0041F358                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0041F368                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0041F378                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0041F388                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0041F398                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0041F3A8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0041F3B8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0041F3C8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0041F3D8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0041F3E8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0041F3E8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0041F410
.text:0041F410 ; =============== S U B R O U T I N E =======================================
.text:0041F410
.text:0041F410 ; Attributes: thunk
.text:0041F410
.text:0041F410 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0041F410 mbrtowc         proc near               ; CODE XREF: sub_40D2B0+757↑p
.text:0041F410
.text:0041F410 DstCh           = dword ptr  4
.text:0041F410 SrcCh           = dword ptr  8
.text:0041F410 SizeInBytes     = dword ptr  0Ch
.text:0041F410 State           = dword ptr  10h
.text:0041F410
.text:0041F410                 jmp     ds:__imp_mbrtowc
.text:0041F410 mbrtowc         endp
.text:0041F410
.text:0041F410 ; ---------------------------------------------------------------------------
.text:0041F416                 align 10h
.text:0041F420
.text:0041F420 ; =============== S U B R O U T I N E =======================================
.text:0041F420
.text:0041F420 ; Attributes: thunk
.text:0041F420
.text:0041F420 ; wint_t __cdecl btowc(int Ch)
.text:0041F420 btowc           proc near               ; CODE XREF: sub_412110+1F73↑p
.text:0041F420                 jmp     ds:__imp_btowc
.text:0041F420 btowc           endp
.text:0041F420
.text:0041F420 ; ---------------------------------------------------------------------------
.text:0041F426                 align 10h
.text:0041F430
.text:0041F430 ; =============== S U B R O U T I N E =======================================
.text:0041F430
.text:0041F430 ; Attributes: thunk
.text:0041F430
.text:0041F430 ; wctype_t __cdecl wctype(const char *name)
.text:0041F430 wctype          proc near               ; CODE XREF: sub_412110+1F29↑p
.text:0041F430
.text:0041F430 name            = dword ptr  4
.text:0041F430
.text:0041F430                 jmp     ds:__imp_wctype
.text:0041F430 wctype          endp
.text:0041F430
.text:0041F430 ; ---------------------------------------------------------------------------
.text:0041F436                 align 10h
.text:0041F440
.text:0041F440 ; =============== S U B R O U T I N E =======================================
.text:0041F440
.text:0041F440 ; Attributes: bp-based frame
.text:0041F440
.text:0041F440 sub_41F440      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0041F440                 push    ebp
.text:0041F441                 mov     ecx, offset byte_422000
.text:0041F446                 cmp     ecx, offset byte_422000
.text:0041F44C                 mov     ebp, esp
.text:0041F44E                 jnb     short loc_41F466
.text:0041F450
.text:0041F450 loc_41F450:                             ; CODE XREF: sub_41F440+24↓j
.text:0041F450                 mov     edx, [ecx+4]
.text:0041F453                 mov     eax, [ecx]
.text:0041F455                 add     ecx, 8
.text:0041F458                 add     [edx+400000h], eax
.text:0041F45E                 cmp     ecx, offset byte_422000
.text:0041F464                 jb      short loc_41F450
.text:0041F466
.text:0041F466 loc_41F466:                             ; CODE XREF: sub_41F440+E↑j
.text:0041F466                 pop     ebp
.text:0041F467                 retn
.text:0041F467 sub_41F440      endp
.text:0041F467
.text:0041F467 ; ---------------------------------------------------------------------------
.text:0041F468                 align 10h
.text:0041F470
.text:0041F470 ; =============== S U B R O U T I N E =======================================
.text:0041F470
.text:0041F470 ; Attributes: bp-based frame
.text:0041F470
.text:0041F470 sub_41F470      proc near               ; CODE XREF: sub_401080+16↑p
.text:0041F470                                         ; TopLevelExceptionFilter+D7↑p
.text:0041F470                 push    ebp
.text:0041F471                 mov     ebp, esp
.text:0041F473                 fninit
.text:0041F475                 pop     ebp
.text:0041F476                 retn
.text:0041F476 sub_41F470      endp
.text:0041F476
.text:0041F476 ; ---------------------------------------------------------------------------
.text:0041F477                 align 10h
.text:0041F480
.text:0041F480 ; =============== S U B R O U T I N E =======================================
.text:0041F480
.text:0041F480 ; Attributes: bp-based frame
.text:0041F480
.text:0041F480 ; void __cdecl sub_41F480()
.text:0041F480 sub_41F480      proc near               ; DATA XREF: .text:loc_41F4C9↓o
.text:0041F480                                         ; sub_41F510:loc_41F53E↓o
.text:0041F480                 push    ebp
.text:0041F481                 mov     ebp, esp
.text:0041F483                 sub     esp, 8
.text:0041F486                 mov     eax, off_421114
.text:0041F48B                 mov     edx, [eax]
.text:0041F48D                 test    edx, edx
.text:0041F48F                 jnz     short loc_41F495
.text:0041F491
.text:0041F491 loc_41F491:                             ; CODE XREF: sub_41F480+2C↓j
.text:0041F491                 mov     esp, ebp
.text:0041F493                 pop     ebp
.text:0041F494                 retn
.text:0041F495 ; ---------------------------------------------------------------------------
.text:0041F495
.text:0041F495 loc_41F495:                             ; CODE XREF: sub_41F480+F↑j
.text:0041F495                                         ; sub_41F480+2A↓j
.text:0041F495                 call    dword ptr [eax]
.text:0041F497                 mov     edx, off_421114
.text:0041F49D                 mov     ecx, [edx+4]
.text:0041F4A0                 lea     eax, [edx+4]
.text:0041F4A3                 mov     off_421114, eax
.text:0041F4A8                 test    ecx, ecx
.text:0041F4AA                 jnz     short loc_41F495
.text:0041F4AC                 jmp     short loc_41F491
.text:0041F4AC sub_41F480      endp
.text:0041F4AC
.text:0041F4AC ; ---------------------------------------------------------------------------
.text:0041F4AE                 align 10h
.text:0041F4B0                 push    ebp
.text:0041F4B1                 mov     ebp, esp
.text:0041F4B3                 sub     esp, 8
.text:0041F4B6                 mov     [ebp-4], ebx
.text:0041F4B9                 mov     eax, ds:dword_420430
.text:0041F4BE                 cmp     eax, 0FFFFFFFFh
.text:0041F4C1                 jz      short loc_41F4EC
.text:0041F4C3
.text:0041F4C3 loc_41F4C3:                             ; CODE XREF: .text:0041F4F6↓j
.text:0041F4C3                                         ; .text:0041F509↓j
.text:0041F4C3                 test    eax, eax
.text:0041F4C5                 mov     ebx, eax
.text:0041F4C7                 jnz     short loc_41F4E0
.text:0041F4C9
.text:0041F4C9 loc_41F4C9:                             ; CODE XREF: .text:0041F4EA↓j
.text:0041F4C9                 mov     dword ptr [esp], offset sub_41F480
.text:0041F4D0                 call    sub_401040
.text:0041F4D5                 mov     ebx, [ebp-4]
.text:0041F4D8                 mov     esp, ebp
.text:0041F4DA                 pop     ebp
.text:0041F4DB                 retn
.text:0041F4DB ; ---------------------------------------------------------------------------
.text:0041F4DC                 align 10h
.text:0041F4E0
.text:0041F4E0 loc_41F4E0:                             ; CODE XREF: .text:0041F4C7↑j
.text:0041F4E0                                         ; .text:0041F4E8↓j
.text:0041F4E0                 call    ds:dword_420430[ebx*4]
.text:0041F4E7                 dec     ebx
.text:0041F4E8                 jnz     short loc_41F4E0
.text:0041F4EA                 jmp     short loc_41F4C9
.text:0041F4EC ; ---------------------------------------------------------------------------
.text:0041F4EC
.text:0041F4EC loc_41F4EC:                             ; CODE XREF: .text:0041F4C1↑j
.text:0041F4EC                 mov     ecx, ds:dword_420434
.text:0041F4F2                 xor     eax, eax
.text:0041F4F4                 test    ecx, ecx
.text:0041F4F6                 jz      short loc_41F4C3
.text:0041F4F8                 mov     edx, offset dword_420430
.text:0041F4FD                 lea     esi, [esi+0]
.text:0041F500
.text:0041F500 loc_41F500:                             ; CODE XREF: .text:0041F507↓j
.text:0041F500                 inc     eax
.text:0041F501                 mov     ecx, [edx+eax*4+4]
.text:0041F505                 test    ecx, ecx
.text:0041F507                 jnz     short loc_41F500
.text:0041F509                 jmp     short loc_41F4C3
.text:0041F509 ; ---------------------------------------------------------------------------
.text:0041F50B                 align 10h
.text:0041F510
.text:0041F510 ; =============== S U B R O U T I N E =======================================
.text:0041F510
.text:0041F510 ; Attributes: bp-based frame
.text:0041F510
.text:0041F510 sub_41F510      proc near               ; CODE XREF: sub_401EE0+19↑p
.text:0041F510
.text:0041F510 var_8           = dword ptr -8
.text:0041F510 var_4           = dword ptr -4
.text:0041F510
.text:0041F510                 push    ebp
.text:0041F511                 mov     ebp, esp
.text:0041F513                 sub     esp, 8
.text:0041F516                 mov     [ebp+var_4], ebx
.text:0041F519                 mov     edx, dword_421110
.text:0041F51F                 test    edx, edx
.text:0041F521                 jnz     short loc_41F54A
.text:0041F523                 mov     eax, ds:dword_420430
.text:0041F528                 mov     edx, 1
.text:0041F52D                 mov     dword_421110, edx
.text:0041F533                 cmp     eax, 0FFFFFFFFh
.text:0041F536                 jz      short loc_41F55D
.text:0041F538
.text:0041F538 loc_41F538:                             ; CODE XREF: sub_41F510+57↓j
.text:0041F538                                         ; sub_41F510+69↓j
.text:0041F538                 test    eax, eax
.text:0041F53A                 mov     ebx, eax
.text:0041F53C                 jnz     short loc_41F551
.text:0041F53E
.text:0041F53E loc_41F53E:                             ; CODE XREF: sub_41F510+4B↓j
.text:0041F53E                 mov     [esp+8+var_8], offset sub_41F480 ; void (__cdecl *)()
.text:0041F545                 call    sub_401040
.text:0041F54A
.text:0041F54A loc_41F54A:                             ; CODE XREF: sub_41F510+11↑j
.text:0041F54A                 mov     ebx, [ebp+var_4]
.text:0041F54D                 mov     esp, ebp
.text:0041F54F                 pop     ebp
.text:0041F550                 retn
.text:0041F551 ; ---------------------------------------------------------------------------
.text:0041F551
.text:0041F551 loc_41F551:                             ; CODE XREF: sub_41F510+2C↑j
.text:0041F551                                         ; sub_41F510+49↓j
.text:0041F551                 call    ds:dword_420430[ebx*4]
.text:0041F558                 dec     ebx
.text:0041F559                 jnz     short loc_41F551
.text:0041F55B                 jmp     short loc_41F53E
.text:0041F55D ; ---------------------------------------------------------------------------
.text:0041F55D
.text:0041F55D loc_41F55D:                             ; CODE XREF: sub_41F510+26↑j
.text:0041F55D                 mov     ecx, ds:dword_420434
.text:0041F563                 xor     eax, eax
.text:0041F565                 test    ecx, ecx
.text:0041F567                 jz      short loc_41F538
.text:0041F569                 mov     edx, offset dword_420430
.text:0041F56E                 mov     esi, esi
.text:0041F570
.text:0041F570 loc_41F570:                             ; CODE XREF: sub_41F510+67↓j
.text:0041F570                 inc     eax
.text:0041F571                 mov     ebx, [edx+eax*4+4]
.text:0041F575                 test    ebx, ebx
.text:0041F577                 jnz     short loc_41F570
.text:0041F579                 jmp     short loc_41F538
.text:0041F579 sub_41F510      endp
.text:0041F579
.text:0041F579 ; ---------------------------------------------------------------------------
.text:0041F57B                 align 10h
.text:0041F580
.text:0041F580 ; =============== S U B R O U T I N E =======================================
.text:0041F580
.text:0041F580 ; Attributes: info_from_lumina
.text:0041F580
.text:0041F580 ; void *__cdecl _alloca(size_t Size)
.text:0041F580 __alloca        proc near               ; CODE XREF: sub_401EE0+14↑p
.text:0041F580                                         ; sub_403270+15C1↑p
.text:0041F580                 push    ecx
.text:0041F581                 mov     ecx, esp
.text:0041F583                 add     ecx, 8
.text:0041F586
.text:0041F586 loc_41F586:                             ; CODE XREF: __alloca+1B↓j
.text:0041F586                 cmp     eax, 1000h
.text:0041F58B                 jb      short loc_41F59D
.text:0041F58D                 sub     ecx, 1000h
.text:0041F593                 or      dword ptr [ecx], 0
.text:0041F596                 sub     eax, 1000h
.text:0041F59B                 jmp     short loc_41F586
.text:0041F59D ; ---------------------------------------------------------------------------
.text:0041F59D
.text:0041F59D loc_41F59D:                             ; CODE XREF: __alloca+B↑j
.text:0041F59D                 sub     ecx, eax
.text:0041F59F                 or      dword ptr [ecx], 0
.text:0041F5A2                 mov     eax, esp
.text:0041F5A4                 mov     esp, ecx
.text:0041F5A6                 mov     ecx, [eax]
.text:0041F5A8                 mov     eax, [eax+4]
.text:0041F5AB                 jmp     eax
.text:0041F5AB __alloca        endp
.text:0041F5AB
.text:0041F5AB ; ---------------------------------------------------------------------------
.text:0041F5AD                 align 10h
.text:0041F5B0
.text:0041F5B0 ; =============== S U B R O U T I N E =======================================
.text:0041F5B0
.text:0041F5B0 ; Attributes: bp-based frame
.text:0041F5B0
.text:0041F5B0 sub_41F5B0      proc near               ; CODE XREF: sub_405CE0+40↑p
.text:0041F5B0                                         ; sub_405D40+24↑p ...
.text:0041F5B0
.text:0041F5B0 var_34          = dword ptr -34h
.text:0041F5B0 var_2C          = dword ptr -2Ch
.text:0041F5B0 var_28          = dword ptr -28h
.text:0041F5B0 var_24          = dword ptr -24h
.text:0041F5B0 var_20          = dword ptr -20h
.text:0041F5B0 var_1C          = dword ptr -1Ch
.text:0041F5B0 var_18          = dword ptr -18h
.text:0041F5B0 var_14          = dword ptr -14h
.text:0041F5B0 arg_0           = dword ptr  8
.text:0041F5B0 arg_4           = dword ptr  0Ch
.text:0041F5B0 arg_8           = dword ptr  10h
.text:0041F5B0 arg_C           = dword ptr  14h
.text:0041F5B0
.text:0041F5B0                 push    ebp
.text:0041F5B1                 mov     ebp, esp
.text:0041F5B3                 push    edi
.text:0041F5B4                 push    esi
.text:0041F5B5                 push    ebx
.text:0041F5B6                 sub     esp, 2Ch
.text:0041F5B9                 mov     edx, [ebp+arg_C]
.text:0041F5BC                 mov     [ebp+var_20], 0
.text:0041F5C3                 mov     ecx, [ebp+arg_0]
.text:0041F5C6                 mov     ebx, [ebp+arg_4]
.text:0041F5C9                 mov     [ebp+var_1C], 0
.text:0041F5D0                 mov     eax, [ebp+arg_8]
.text:0041F5D3                 test    edx, edx
.text:0041F5D5                 mov     [ebp+var_24], edx
.text:0041F5D8                 mov     edi, ebx
.text:0041F5DA                 mov     esi, eax
.text:0041F5DC                 mov     [ebp+var_28], ecx
.text:0041F5DF                 jnz     short loc_41F640
.text:0041F5E1                 cmp     eax, ebx
.text:0041F5E3                 jbe     short loc_41F620
.text:0041F5E5                 mov     eax, ecx
.text:0041F5E7                 mov     edx, ebx
.text:0041F5E9                 div     esi
.text:0041F5EB
.text:0041F5EB loc_41F5EB:                             ; CODE XREF: sub_41F5B0+8B↓j
.text:0041F5EB                 mov     [ebp+var_28], edx
.text:0041F5EE                 lea     ecx, [ebp+var_18]
.text:0041F5F1                 test    ecx, ecx
.text:0041F5F3                 jz      short loc_41F60E
.text:0041F5F5                 mov     [ebp+var_1C], 0
.text:0041F5FC
.text:0041F5FC loc_41F5FC:                             ; CODE XREF: sub_41F5B0+DA↓j
.text:0041F5FC                 mov     eax, [ebp+var_28]
.text:0041F5FF                 mov     [ebp+var_20], eax
.text:0041F602                 mov     edx, [ebp+var_20]
.text:0041F605                 mov     ecx, [ebp+var_1C]
.text:0041F608                 mov     [ebp+var_18], edx
.text:0041F60B                 mov     [ebp+var_14], ecx
.text:0041F60E
.text:0041F60E loc_41F60E:                             ; CODE XREF: sub_41F5B0+43↑j
.text:0041F60E                                         ; sub_41F5B0+A7↓j ...
.text:0041F60E                 mov     eax, [ebp+var_18]
.text:0041F611                 mov     edx, [ebp+var_14]
.text:0041F614                 add     esp, 2Ch
.text:0041F617                 pop     ebx
.text:0041F618                 pop     esi
.text:0041F619                 pop     edi
.text:0041F61A                 pop     ebp
.text:0041F61B                 retn
.text:0041F61B ; ---------------------------------------------------------------------------
.text:0041F61C                 align 10h
.text:0041F620
.text:0041F620 loc_41F620:                             ; CODE XREF: sub_41F5B0+33↑j
.text:0041F620                 test    eax, eax
.text:0041F622                 jnz     short loc_41F62F
.text:0041F624                 mov     eax, 1
.text:0041F629                 xor     edx, edx
.text:0041F62B                 div     esi
.text:0041F62D                 mov     esi, eax
.text:0041F62F
.text:0041F62F loc_41F62F:                             ; CODE XREF: sub_41F5B0+72↑j
.text:0041F62F                 mov     eax, edi
.text:0041F631                 mov     edx, [ebp+var_24]
.text:0041F634                 div     esi
.text:0041F636                 mov     eax, [ebp+var_28]
.text:0041F639                 div     esi
.text:0041F63B                 jmp     short loc_41F5EB
.text:0041F63B ; ---------------------------------------------------------------------------
.text:0041F63D                 align 10h
.text:0041F640
.text:0041F640 loc_41F640:                             ; CODE XREF: sub_41F5B0+2F↑j
.text:0041F640                 cmp     [ebp+var_24], ebx
.text:0041F643                 jbe     short loc_41F660
.text:0041F645                 mov     [ebp+var_20], ecx
.text:0041F648
.text:0041F648 loc_41F648:                             ; CODE XREF: sub_41F5B0+15B↓j
.text:0041F648                 mov     [ebp+var_1C], edi
.text:0041F64B                 mov     eax, [ebp+var_20]
.text:0041F64E                 mov     edx, [ebp+var_1C]
.text:0041F651                 mov     [ebp+var_18], eax
.text:0041F654                 mov     [ebp+var_14], edx
.text:0041F657                 jmp     short loc_41F60E
.text:0041F657 ; ---------------------------------------------------------------------------
.text:0041F659                 align 10h
.text:0041F660
.text:0041F660 loc_41F660:                             ; CODE XREF: sub_41F5B0+93↑j
.text:0041F660                 bsr     eax, [ebp+var_24]
.text:0041F664                 mov     ebx, eax
.text:0041F666                 xor     ebx, 1Fh
.text:0041F669                 jnz     short loc_41F690
.text:0041F66B                 cmp     edi, [ebp+var_24]
.text:0041F66E                 ja      short loc_41F675
.text:0041F670                 cmp     [ebp+var_28], esi
.text:0041F673                 jb      short loc_41F680
.text:0041F675
.text:0041F675 loc_41F675:                             ; CODE XREF: sub_41F5B0+BE↑j
.text:0041F675                 mov     edx, [ebp+var_28]
.text:0041F678                 sub     edx, esi
.text:0041F67A                 sbb     edi, [ebp+var_24]
.text:0041F67D                 mov     [ebp+var_28], edx
.text:0041F680
.text:0041F680 loc_41F680:                             ; CODE XREF: sub_41F5B0+C3↑j
.text:0041F680                 lea     ecx, [ebp+var_18]
.text:0041F683                 test    ecx, ecx
.text:0041F685                 jz      short loc_41F60E
.text:0041F687                 mov     [ebp+var_1C], edi
.text:0041F68A                 jmp     loc_41F5FC
.text:0041F68A ; ---------------------------------------------------------------------------
.text:0041F68F                 align 10h
.text:0041F690
.text:0041F690 loc_41F690:                             ; CODE XREF: sub_41F5B0+B9↑j
.text:0041F690                 mov     edx, [ebp+var_24]
.text:0041F693                 mov     eax, 20h ; ' '
.text:0041F698                 mov     cl, bl
.text:0041F69A                 sub     eax, ebx
.text:0041F69C                 mov     [ebp+var_2C], eax
.text:0041F69F                 shl     edx, cl
.text:0041F6A1                 mov     eax, esi
.text:0041F6A3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041F6A7                 shr     eax, cl
.text:0041F6A9                 mov     cl, bl
.text:0041F6AB                 shl     esi, cl
.text:0041F6AD                 or      edx, eax
.text:0041F6AF                 mov     eax, [ebp+var_28]
.text:0041F6B2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041F6B6                 mov     [ebp+var_24], edx
.text:0041F6B9                 mov     edx, edi
.text:0041F6BB                 shr     edx, cl
.text:0041F6BD                 mov     cl, bl
.text:0041F6BF                 shl     edi, cl
.text:0041F6C1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041F6C5                 shr     eax, cl
.text:0041F6C7                 or      edi, eax
.text:0041F6C9                 mov     eax, edi
.text:0041F6CB                 mov     cl, bl
.text:0041F6CD                 div     [ebp+var_24]
.text:0041F6D0                 shl     [ebp+var_28], cl
.text:0041F6D3                 mov     edi, edx
.text:0041F6D5                 mul     esi
.text:0041F6D7                 mov     [ebp+var_34], eax
.text:0041F6DA                 cmp     edx, edi
.text:0041F6DC                 ja      short loc_41F718
.text:0041F6DE                 cmp     edx, edi
.text:0041F6E0                 jz      short loc_41F710
.text:0041F6E2
.text:0041F6E2 loc_41F6E2:                             ; CODE XREF: sub_41F5B0+166↓j
.text:0041F6E2                                         ; sub_41F5B0+173↓j
.text:0041F6E2                 lea     eax, [ebp+var_18]
.text:0041F6E5                 test    eax, eax
.text:0041F6E7                 jz      loc_41F60E
.text:0041F6ED                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041F6F1                 mov     eax, [ebp+var_28]
.text:0041F6F4                 sub     eax, [ebp+var_34]
.text:0041F6F7                 sbb     edi, edx
.text:0041F6F9                 mov     [ebp+var_28], eax
.text:0041F6FC                 mov     edx, edi
.text:0041F6FE                 shl     edx, cl
.text:0041F700                 mov     cl, bl
.text:0041F702                 shr     eax, cl
.text:0041F704                 or      edx, eax
.text:0041F706                 mov     [ebp+var_20], edx
.text:0041F709                 shr     edi, cl
.text:0041F70B                 jmp     loc_41F648
.text:0041F710 ; ---------------------------------------------------------------------------
.text:0041F710
.text:0041F710 loc_41F710:                             ; CODE XREF: sub_41F5B0+130↑j
.text:0041F710                 mov     eax, [ebp+var_28]
.text:0041F713                 cmp     [ebp+var_34], eax
.text:0041F716                 jbe     short loc_41F6E2
.text:0041F718
.text:0041F718 loc_41F718:                             ; CODE XREF: sub_41F5B0+12C↑j
.text:0041F718                 mov     ecx, [ebp+var_34]
.text:0041F71B                 sub     ecx, esi
.text:0041F71D                 sbb     edx, [ebp+var_24]
.text:0041F720                 mov     [ebp+var_34], ecx
.text:0041F723                 jmp     short loc_41F6E2
.text:0041F723 sub_41F5B0      endp
.text:0041F723
.text:0041F723 ; ---------------------------------------------------------------------------
.text:0041F725                 align 10h
.text:0041F730
.text:0041F730 ; =============== S U B R O U T I N E =======================================
.text:0041F730
.text:0041F730 ; Attributes: bp-based frame
.text:0041F730
.text:0041F730 sub_41F730      proc near               ; CODE XREF: sub_416750+17E↑p
.text:0041F730                                         ; sub_416750+1F5↑p ...
.text:0041F730
.text:0041F730 var_24          = dword ptr -24h
.text:0041F730 var_20          = dword ptr -20h
.text:0041F730 var_1C          = dword ptr -1Ch
.text:0041F730 var_18          = dword ptr -18h
.text:0041F730 var_14          = dword ptr -14h
.text:0041F730 var_C           = dword ptr -0Ch
.text:0041F730 var_8           = dword ptr -8
.text:0041F730 var_4           = dword ptr -4
.text:0041F730 arg_0           = dword ptr  8
.text:0041F730 arg_4           = dword ptr  0Ch
.text:0041F730 arg_8           = dword ptr  10h
.text:0041F730 arg_C           = dword ptr  14h
.text:0041F730
.text:0041F730                 push    ebp
.text:0041F731                 mov     ebp, esp
.text:0041F733                 sub     esp, 28h
.text:0041F736                 mov     [ebp+var_C], ebx
.text:0041F739                 mov     edx, [ebp+arg_C]
.text:0041F73C                 mov     ecx, [ebp+arg_0]
.text:0041F73F                 mov     [ebp+var_8], esi
.text:0041F742                 mov     eax, [ebp+arg_8]
.text:0041F745                 test    edx, edx
.text:0041F747                 mov     [ebp+var_4], edi
.text:0041F74A                 mov     ebx, [ebp+arg_4]
.text:0041F74D                 mov     esi, eax
.text:0041F74F                 mov     [ebp+var_18], 0
.text:0041F756                 mov     [ebp+var_14], 0
.text:0041F75D                 mov     [ebp+var_1C], ecx
.text:0041F760                 jnz     short loc_41F7B2
.text:0041F762                 cmp     eax, ebx
.text:0041F764                 jbe     short loc_41F790
.text:0041F766                 mov     eax, ecx
.text:0041F768                 mov     edx, ebx
.text:0041F76A                 div     esi
.text:0041F76C                 mov     edi, eax
.text:0041F76E                 mov     esi, esi
.text:0041F770
.text:0041F770 loc_41F770:                             ; CODE XREF: sub_41F730+88↓j
.text:0041F770                                         ; sub_41F730+A4↓j ...
.text:0041F770                 xor     ecx, ecx
.text:0041F772
.text:0041F772 loc_41F772:                             ; CODE XREF: sub_41F730+80↓j
.text:0041F772                 mov     [ebp+var_18], edi
.text:0041F775                 mov     ebx, [ebp+var_C]
.text:0041F778                 mov     eax, [ebp+var_18]
.text:0041F77B                 mov     [ebp+var_14], ecx
.text:0041F77E                 mov     esi, [ebp+var_8]
.text:0041F781                 mov     edx, [ebp+var_14]
.text:0041F784                 mov     edi, [ebp+var_4]
.text:0041F787                 mov     esp, ebp
.text:0041F789                 pop     ebp
.text:0041F78A                 retn
.text:0041F78A ; ---------------------------------------------------------------------------
.text:0041F78B                 align 10h
.text:0041F790
.text:0041F790 loc_41F790:                             ; CODE XREF: sub_41F730+34↑j
.text:0041F790                 test    eax, eax
.text:0041F792                 jnz     short loc_41F7A1
.text:0041F794                 mov     eax, 1
.text:0041F799                 xor     ecx, ecx
.text:0041F79B                 xor     edx, edx
.text:0041F79D                 div     ecx
.text:0041F79F                 mov     esi, eax
.text:0041F7A1
.text:0041F7A1 loc_41F7A1:                             ; CODE XREF: sub_41F730+62↑j
.text:0041F7A1                 mov     eax, ebx
.text:0041F7A3                 xor     edx, edx
.text:0041F7A5                 div     esi
.text:0041F7A7                 mov     ecx, eax
.text:0041F7A9                 mov     eax, [ebp+var_1C]
.text:0041F7AC                 div     esi
.text:0041F7AE                 mov     edi, eax
.text:0041F7B0                 jmp     short loc_41F772
.text:0041F7B2 ; ---------------------------------------------------------------------------
.text:0041F7B2
.text:0041F7B2 loc_41F7B2:                             ; CODE XREF: sub_41F730+30↑j
.text:0041F7B2                 cmp     edx, ebx
.text:0041F7B4                 jbe     short loc_41F7C0
.text:0041F7B6                 xor     edi, edi
.text:0041F7B8                 jmp     short loc_41F770
.text:0041F7B8 ; ---------------------------------------------------------------------------
.text:0041F7BA                 align 10h
.text:0041F7C0
.text:0041F7C0 loc_41F7C0:                             ; CODE XREF: sub_41F730+84↑j
.text:0041F7C0                 bsr     eax, edx
.text:0041F7C3                 xor     eax, 1Fh
.text:0041F7C6                 mov     [ebp+var_20], eax
.text:0041F7C9                 jnz     short loc_41F7E0
.text:0041F7CB                 cmp     ebx, edx
.text:0041F7CD                 ja      short loc_41F7D6
.text:0041F7CF                 xor     edi, edi
.text:0041F7D1                 cmp     [ebp+var_1C], esi
.text:0041F7D4                 jb      short loc_41F770
.text:0041F7D6
.text:0041F7D6 loc_41F7D6:                             ; CODE XREF: sub_41F730+9D↑j
.text:0041F7D6                 mov     edi, 1
.text:0041F7DB                 jmp     short loc_41F770
.text:0041F7DB ; ---------------------------------------------------------------------------
.text:0041F7DD                 align 10h
.text:0041F7E0
.text:0041F7E0 loc_41F7E0:                             ; CODE XREF: sub_41F730+99↑j
.text:0041F7E0                 mov     eax, [ebp+var_20]
.text:0041F7E3                 mov     ecx, 20h ; ' '
.text:0041F7E8                 sub     ecx, eax
.text:0041F7EA                 mov     [ebp+var_24], ecx
.text:0041F7ED                 mov     eax, esi
.text:0041F7EF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041F7F3                 shl     edx, cl
.text:0041F7F5                 mov     edi, edx
.text:0041F7F7                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041F7FB                 mov     edx, ebx
.text:0041F7FD                 shr     eax, cl
.text:0041F7FF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041F803                 or      edi, eax
.text:0041F805                 mov     eax, [ebp+var_1C]
.text:0041F808                 shl     esi, cl
.text:0041F80A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041F80E                 shr     edx, cl
.text:0041F810                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041F814                 shl     ebx, cl
.text:0041F816                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041F81A                 shr     eax, cl
.text:0041F81C                 or      ebx, eax
.text:0041F81E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041F822                 mov     eax, ebx
.text:0041F824                 div     edi
.text:0041F826                 mov     ebx, edx
.text:0041F828                 mov     edi, eax
.text:0041F82A                 shl     [ebp+var_1C], cl
.text:0041F82D                 mul     esi
.text:0041F82F                 cmp     edx, ebx
.text:0041F831                 ja      short loc_41F844
.text:0041F833                 cmp     edx, ebx
.text:0041F835                 jnz     loc_41F770
.text:0041F83B                 cmp     eax, [ebp+var_1C]
.text:0041F83E                 jbe     loc_41F770
.text:0041F844
.text:0041F844 loc_41F844:                             ; CODE XREF: sub_41F730+101↑j
.text:0041F844                 dec     edi
.text:0041F845                 jmp     loc_41F770
.text:0041F845 sub_41F730      endp
.text:0041F845
.text:0041F845 ; ---------------------------------------------------------------------------
.text:0041F84A                 align 10h
.text:0041F850
.text:0041F850 ; =============== S U B R O U T I N E =======================================
.text:0041F850
.text:0041F850 ; Attributes: thunk
.text:0041F850
.text:0041F850 ; int __cdecl umask(int Mode)
.text:0041F850 _umask          proc near               ; CODE XREF: sub_401EE0+FA↑p
.text:0041F850
.text:0041F850 Mode            = dword ptr  4
.text:0041F850
.text:0041F850                 jmp     ds:__imp__umask
.text:0041F850 _umask          endp
.text:0041F850
.text:0041F850 ; ---------------------------------------------------------------------------
.text:0041F856                 align 10h
.text:0041F860
.text:0041F860 ; =============== S U B R O U T I N E =======================================
.text:0041F860
.text:0041F860 ; Attributes: thunk
.text:0041F860
.text:0041F860 ; int __cdecl isatty(int FileHandle)
.text:0041F860 _isatty         proc near               ; CODE XREF: sub_401EE0+E8↑p
.text:0041F860
.text:0041F860 FileHandle      = dword ptr  4
.text:0041F860
.text:0041F860                 jmp     ds:__imp__isatty
.text:0041F860 _isatty         endp
.text:0041F860
.text:0041F860 ; ---------------------------------------------------------------------------
.text:0041F866                 align 10h
.text:0041F870
.text:0041F870 ; =============== S U B R O U T I N E =======================================
.text:0041F870
.text:0041F870 ; Attributes: thunk
.text:0041F870
.text:0041F870 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0041F870 _chmod          proc near               ; CODE XREF: sub_403270+4A5↑p
.text:0041F870                                         ; sub_4182D0+41↑j
.text:0041F870
.text:0041F870 FileName        = dword ptr  4
.text:0041F870 AccessMode      = dword ptr  8
.text:0041F870
.text:0041F870                 jmp     ds:__imp__chmod
.text:0041F870 _chmod          endp
.text:0041F870
.text:0041F870 ; ---------------------------------------------------------------------------
.text:0041F876                 align 10h
.text:0041F880
.text:0041F880 ; =============== S U B R O U T I N E =======================================
.text:0041F880
.text:0041F880 ; Attributes: thunk
.text:0041F880
.text:0041F880 ; int __cdecl close(int FileHandle)
.text:0041F880 _close          proc near               ; CODE XREF: sub_405220+F4↑p
.text:0041F880                                         ; sub_405220+31C↑p ...
.text:0041F880
.text:0041F880 FileHandle      = dword ptr  4
.text:0041F880
.text:0041F880                 jmp     ds:__imp__close
.text:0041F880 _close          endp
.text:0041F880
.text:0041F880 ; ---------------------------------------------------------------------------
.text:0041F886                 align 10h
.text:0041F890
.text:0041F890 ; =============== S U B R O U T I N E =======================================
.text:0041F890
.text:0041F890 ; Attributes: thunk
.text:0041F890
.text:0041F890 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0041F890 _read           proc near               ; CODE XREF: sub_405220+24F↑p
.text:0041F890
.text:0041F890 FileHandle      = dword ptr  4
.text:0041F890 DstBuf          = dword ptr  8
.text:0041F890 MaxCharCount    = dword ptr  0Ch
.text:0041F890
.text:0041F890                 jmp     ds:__imp__read
.text:0041F890 _read           endp
.text:0041F890
.text:0041F890 ; ---------------------------------------------------------------------------
.text:0041F896                 align 10h
.text:0041F8A0
.text:0041F8A0 ; =============== S U B R O U T I N E =======================================
.text:0041F8A0
.text:0041F8A0 ; Attributes: thunk
.text:0041F8A0
.text:0041F8A0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0041F8A0 _open           proc near               ; CODE XREF: sub_405220+4A↑p
.text:0041F8A0                                         ; sub_405220+17A↑p ...
.text:0041F8A0
.text:0041F8A0 FileName        = dword ptr  4
.text:0041F8A0 OpenFlag        = dword ptr  8
.text:0041F8A0
.text:0041F8A0                 jmp     ds:__imp__open
.text:0041F8A0 _open           endp
.text:0041F8A0
.text:0041F8A0 ; ---------------------------------------------------------------------------
.text:0041F8A6                 align 10h
.text:0041F8B0
.text:0041F8B0 ; =============== S U B R O U T I N E =======================================
.text:0041F8B0
.text:0041F8B0 ; Attributes: thunk
.text:0041F8B0
.text:0041F8B0 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0041F8B0 _write          proc near               ; CODE XREF: sub_40E710+2B↑p
.text:0041F8B0
.text:0041F8B0 FileHandle      = dword ptr  4
.text:0041F8B0 Buf             = dword ptr  8
.text:0041F8B0 MaxCharCount    = dword ptr  0Ch
.text:0041F8B0
.text:0041F8B0                 jmp     ds:__imp__write
.text:0041F8B0 _write          endp
.text:0041F8B0
.text:0041F8B0 ; ---------------------------------------------------------------------------
.text:0041F8B6                 align 10h
.text:0041F8C0
.text:0041F8C0 ; =============== S U B R O U T I N E =======================================
.text:0041F8C0
.text:0041F8C0 ; Attributes: thunk
.text:0041F8C0
.text:0041F8C0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0041F8C0 _stricmp        proc near               ; CODE XREF: sub_416C20+46F↑p
.text:0041F8C0                                         ; sub_4194D0+2E↑p ...
.text:0041F8C0
.text:0041F8C0 String1         = dword ptr  4
.text:0041F8C0 String2         = dword ptr  8
.text:0041F8C0
.text:0041F8C0                 jmp     ds:__imp__stricmp
.text:0041F8C0 _stricmp        endp
.text:0041F8C0
.text:0041F8C0 ; ---------------------------------------------------------------------------
.text:0041F8C6                 align 10h
.text:0041F8D0
.text:0041F8D0 ; =============== S U B R O U T I N E =======================================
.text:0041F8D0
.text:0041F8D0 ; Attributes: thunk
.text:0041F8D0
.text:0041F8D0 ; char *__cdecl strdup(const char *String)
.text:0041F8D0 _strdup         proc near               ; CODE XREF: sub_419100+101↑p
.text:0041F8D0                                         ; .text:0041936A↑p ...
.text:0041F8D0
.text:0041F8D0 String          = dword ptr  4
.text:0041F8D0
.text:0041F8D0                 jmp     ds:__imp__strdup
.text:0041F8D0 _strdup         endp
.text:0041F8D0
.text:0041F8D0 ; ---------------------------------------------------------------------------
.text:0041F8D6                 align 10h
.text:0041F8E0
.text:0041F8E0 ; =============== S U B R O U T I N E =======================================
.text:0041F8E0
.text:0041F8E0 ; Attributes: thunk
.text:0041F8E0
.text:0041F8E0 ; int __cdecl getpid()
.text:0041F8E0 _getpid         proc near               ; CODE XREF: sub_41D5C0+84↑p
.text:0041F8E0                 jmp     ds:__imp__getpid
.text:0041F8E0 _getpid         endp
.text:0041F8E0
.text:0041F8E0 ; ---------------------------------------------------------------------------
.text:0041F8E6                 align 10h
.text:0041F8F0                 jmp     ds:__set_app_type
.text:0041F8F0 ; ---------------------------------------------------------------------------
.text:0041F8F6                 align 10h
.text:0041F900
.text:0041F900 ; =============== S U B R O U T I N E =======================================
.text:0041F900
.text:0041F900 ; Attributes: thunk
.text:0041F900
.text:0041F900 ; void __cdecl cexit()
.text:0041F900 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0041F900                 jmp     ds:__imp__cexit
.text:0041F900 _cexit          endp
.text:0041F900
.text:0041F900 ; ---------------------------------------------------------------------------
.text:0041F906                 align 10h
.text:0041F910
.text:0041F910 ; =============== S U B R O U T I N E =======================================
.text:0041F910
.text:0041F910 ; Attributes: thunk
.text:0041F910
.text:0041F910 ; char ***__cdecl _p__environ()
.text:0041F910 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0041F910                 jmp     ds:__imp___p__environ
.text:0041F910 __p__environ    endp
.text:0041F910
.text:0041F910 ; ---------------------------------------------------------------------------
.text:0041F916                 align 10h
.text:0041F920
.text:0041F920 ; =============== S U B R O U T I N E =======================================
.text:0041F920
.text:0041F920 ; Attributes: thunk
.text:0041F920
.text:0041F920 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0041F920 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0041F920                                         ; TopLevelExceptionFilter+88↑p ...
.text:0041F920
.text:0041F920 Signal          = dword ptr  4
.text:0041F920 Function        = dword ptr  8
.text:0041F920
.text:0041F920                 jmp     ds:__imp_signal
.text:0041F920 signal          endp
.text:0041F920
.text:0041F920 ; ---------------------------------------------------------------------------
.text:0041F926                 align 10h
.text:0041F930
.text:0041F930 ; =============== S U B R O U T I N E =======================================
.text:0041F930
.text:0041F930 ; Attributes: thunk
.text:0041F930
.text:0041F930 ; int *__cdecl _p__fmode()
.text:0041F930 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0041F930                 jmp     ds:__imp___p__fmode
.text:0041F930 __p__fmode      endp
.text:0041F930
.text:0041F930 ; ---------------------------------------------------------------------------
.text:0041F936                 align 10h
.text:0041F940
.text:0041F940 ; =============== S U B R O U T I N E =======================================
.text:0041F940
.text:0041F940 ; Attributes: thunk
.text:0041F940
.text:0041F940 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0041F940 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0041F940                                         ; sub_401080+90↑p ...
.text:0041F940
.text:0041F940 FileHandle      = dword ptr  4
.text:0041F940 Mode            = dword ptr  8
.text:0041F940
.text:0041F940                 jmp     ds:__imp__setmode
.text:0041F940 _setmode        endp
.text:0041F940
.text:0041F940 ; ---------------------------------------------------------------------------
.text:0041F946                 align 10h
.text:0041F950
.text:0041F950 ; =============== S U B R O U T I N E =======================================
.text:0041F950
.text:0041F950 ; Attributes: thunk
.text:0041F950
.text:0041F950 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0041F950                 jmp     ds:__imp___getmainargs
.text:0041F950 __getmainargs   endp
.text:0041F950
.text:0041F950 ; ---------------------------------------------------------------------------
.text:0041F956                 align 10h
.text:0041F960
.text:0041F960 ; =============== S U B R O U T I N E =======================================
.text:0041F960
.text:0041F960 ; Attributes: thunk
.text:0041F960
.text:0041F960 ; char *__cdecl getenv(const char *VarName)
.text:0041F960 getenv          proc near               ; CODE XREF: sub_401EE0+122↑p
.text:0041F960                                         ; sub_4096D0+B57↑p ...
.text:0041F960
.text:0041F960 VarName         = dword ptr  4
.text:0041F960
.text:0041F960                 jmp     ds:__imp_getenv
.text:0041F960 getenv          endp
.text:0041F960
.text:0041F960 ; ---------------------------------------------------------------------------
.text:0041F966                 align 10h
.text:0041F970
.text:0041F970 ; =============== S U B R O U T I N E =======================================
.text:0041F970
.text:0041F970 ; Attributes: thunk
.text:0041F970
.text:0041F970 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0041F970 setlocale       proc near               ; CODE XREF: sub_401EE0+53↑p
.text:0041F970
.text:0041F970 Category        = dword ptr  4
.text:0041F970 Locale          = dword ptr  8
.text:0041F970
.text:0041F970                 jmp     ds:__imp_setlocale
.text:0041F970 setlocale       endp
.text:0041F970
.text:0041F970 ; ---------------------------------------------------------------------------
.text:0041F976                 align 10h
.text:0041F980
.text:0041F980 ; =============== S U B R O U T I N E =======================================
.text:0041F980
.text:0041F980 ; Attributes: noreturn thunk
.text:0041F980
.text:0041F980 ; void __cdecl __noreturn exit(int Code)
.text:0041F980 exit            proc near               ; CODE XREF: sub_401EE0:loc_4020BD↑p
.text:0041F980                                         ; sub_402960+3B↑p ...
.text:0041F980
.text:0041F980 Code            = dword ptr  4
.text:0041F980
.text:0041F980                 jmp     ds:__imp_exit
.text:0041F980 exit            endp
.text:0041F980
.text:0041F980 ; ---------------------------------------------------------------------------
.text:0041F986                 align 10h
.text:0041F990
.text:0041F990 ; =============== S U B R O U T I N E =======================================
.text:0041F990
.text:0041F990 ; Attributes: thunk
.text:0041F990
.text:0041F990 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0041F990 fputs           proc near               ; CODE XREF: sub_401EE0+291↑p
.text:0041F990                                         ; sub_401EE0+2B3↑p ...
.text:0041F990
.text:0041F990 Buffer          = dword ptr  4
.text:0041F990 Stream          = dword ptr  8
.text:0041F990
.text:0041F990                 jmp     ds:__imp_fputs
.text:0041F990 fputs           endp
.text:0041F990
.text:0041F990 ; ---------------------------------------------------------------------------
.text:0041F996                 align 10h
.text:0041F9A0
.text:0041F9A0 ; =============== S U B R O U T I N E =======================================
.text:0041F9A0
.text:0041F9A0 ; Attributes: thunk
.text:0041F9A0
.text:0041F9A0 ; int printf(const char *const Format, ...)
.text:0041F9A0 printf          proc near               ; CODE XREF: sub_401EE0+26F↑p
.text:0041F9A0                                         ; sub_401EE0+3BE↑p ...
.text:0041F9A0
.text:0041F9A0 Format          = dword ptr  4
.text:0041F9A0
.text:0041F9A0                 jmp     ds:__imp_printf
.text:0041F9A0 printf          endp
.text:0041F9A0
.text:0041F9A0 ; ---------------------------------------------------------------------------
.text:0041F9A6                 align 10h
.text:0041F9B0
.text:0041F9B0 ; =============== S U B R O U T I N E =======================================
.text:0041F9B0
.text:0041F9B0 ; Attributes: thunk
.text:0041F9B0
.text:0041F9B0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0041F9B0 fprintf         proc near               ; CODE XREF: sub_401EE0+1D1↑p
.text:0041F9B0                                         ; sub_402960+33↑p ...
.text:0041F9B0
.text:0041F9B0 Stream          = dword ptr  4
.text:0041F9B0 Format          = dword ptr  8
.text:0041F9B0
.text:0041F9B0                 jmp     ds:__imp_fprintf
.text:0041F9B0 fprintf         endp
.text:0041F9B0
.text:0041F9B0 ; ---------------------------------------------------------------------------
.text:0041F9B6                 align 10h
.text:0041F9C0
.text:0041F9C0 ; =============== S U B R O U T I N E =======================================
.text:0041F9C0
.text:0041F9C0 ; Attributes: thunk
.text:0041F9C0
.text:0041F9C0 ; void __cdecl free(void *Block)
.text:0041F9C0 free            proc near               ; CODE XREF: sub_401EE0+746↑p
.text:0041F9C0                                         ; sub_403270+37B↑p ...
.text:0041F9C0
.text:0041F9C0 Block           = dword ptr  4
.text:0041F9C0
.text:0041F9C0                 jmp     ds:__imp_free
.text:0041F9C0 free            endp
.text:0041F9C0
.text:0041F9C0 ; ---------------------------------------------------------------------------
.text:0041F9C6                 align 10h
.text:0041F9D0
.text:0041F9D0 ; =============== S U B R O U T I N E =======================================
.text:0041F9D0
.text:0041F9D0 ; Attributes: noreturn thunk
.text:0041F9D0
.text:0041F9D0 _assert         proc near               ; CODE XREF: sub_402B60+103↑p
.text:0041F9D0                                         ; sub_404E90:loc_404F3F↑p ...
.text:0041F9D0                 jmp     ds:__imp__assert
.text:0041F9D0 _assert         endp
.text:0041F9D0
.text:0041F9D0 ; ---------------------------------------------------------------------------
.text:0041F9D6                 align 10h
.text:0041F9E0
.text:0041F9E0 ; =============== S U B R O U T I N E =======================================
.text:0041F9E0
.text:0041F9E0 ; Attributes: thunk
.text:0041F9E0
.text:0041F9E0 ; int *__cdecl errno()
.text:0041F9E0 _errno          proc near               ; CODE XREF: sub_401EE0+522↑p
.text:0041F9E0                                         ; sub_401EE0:loc_4028F5↑p ...
.text:0041F9E0                 jmp     ds:__imp__errno
.text:0041F9E0 _errno          endp
.text:0041F9E0
.text:0041F9E0 ; ---------------------------------------------------------------------------
.text:0041F9E6                 align 10h
.text:0041F9F0
.text:0041F9F0 ; =============== S U B R O U T I N E =======================================
.text:0041F9F0
.text:0041F9F0 ; Attributes: thunk
.text:0041F9F0
.text:0041F9F0 ; size_t __cdecl strlen(const char *Str)
.text:0041F9F0 strlen          proc near               ; CODE XREF: sub_401EE0+8DE↑p
.text:0041F9F0                                         ; sub_403270+A99↑p ...
.text:0041F9F0
.text:0041F9F0 Str             = dword ptr  4
.text:0041F9F0
.text:0041F9F0                 jmp     ds:__imp_strlen
.text:0041F9F0 strlen          endp
.text:0041F9F0
.text:0041F9F0 ; ---------------------------------------------------------------------------
.text:0041F9F6                 align 10h
.text:0041FA00
.text:0041FA00 ; =============== S U B R O U T I N E =======================================
.text:0041FA00
.text:0041FA00 ; Attributes: thunk
.text:0041FA00
.text:0041FA00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0041FA00 memcpy          proc near               ; CODE XREF: sub_403270+15D5↑p
.text:0041FA00                                         ; sub_406A40+433↑p ...
.text:0041FA00
.text:0041FA00 Src             = dword ptr  8
.text:0041FA00 Size            = dword ptr  0Ch
.text:0041FA00
.text:0041FA00                 jmp     ds:__imp_memcpy
.text:0041FA00 memcpy          endp
.text:0041FA00
.text:0041FA00 ; ---------------------------------------------------------------------------
.text:0041FA06                 align 10h
.text:0041FA10
.text:0041FA10 ; =============== S U B R O U T I N E =======================================
.text:0041FA10
.text:0041FA10 ; Attributes: thunk
.text:0041FA10
.text:0041FA10 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0041FA10 strcmp          proc near               ; CODE XREF: sub_403270+AD4↑p
.text:0041FA10                                         ; sub_403270+1531↑p ...
.text:0041FA10
.text:0041FA10 Str1            = dword ptr  4
.text:0041FA10 Str2            = dword ptr  8
.text:0041FA10
.text:0041FA10                 jmp     ds:__imp_strcmp
.text:0041FA10 strcmp          endp
.text:0041FA10
.text:0041FA10 ; ---------------------------------------------------------------------------
.text:0041FA16                 align 10h
.text:0041FA20
.text:0041FA20 ; =============== S U B R O U T I N E =======================================
.text:0041FA20
.text:0041FA20 ; Attributes: thunk
.text:0041FA20
.text:0041FA20 ; void *__cdecl malloc(size_t Size)
.text:0041FA20 malloc          proc near               ; CODE XREF: sub_403270+CA1↑p
.text:0041FA20                                         ; sub_405220+21E↑p ...
.text:0041FA20
.text:0041FA20 Size            = dword ptr  4
.text:0041FA20
.text:0041FA20                 jmp     ds:__imp_malloc
.text:0041FA20 malloc          endp
.text:0041FA20
.text:0041FA20 ; ---------------------------------------------------------------------------
.text:0041FA26                 align 10h
.text:0041FA30
.text:0041FA30 ; =============== S U B R O U T I N E =======================================
.text:0041FA30
.text:0041FA30 ; Attributes: thunk
.text:0041FA30
.text:0041FA30 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0041FA30 _lseeki64       proc near               ; CODE XREF: sub_405220+37D↑p
.text:0041FA30                                         ; sub_41A320+41↑p
.text:0041FA30
.text:0041FA30 FileHandle      = dword ptr  4
.text:0041FA30 Offset          = qword ptr  8
.text:0041FA30 Origin          = dword ptr  10h
.text:0041FA30
.text:0041FA30                 jmp     ds:__imp__lseeki64
.text:0041FA30 _lseeki64       endp
.text:0041FA30
.text:0041FA30 ; ---------------------------------------------------------------------------
.text:0041FA36                 align 10h
.text:0041FA40
.text:0041FA40 ; =============== S U B R O U T I N E =======================================
.text:0041FA40
.text:0041FA40 ; Attributes: thunk
.text:0041FA40
.text:0041FA40 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0041FA40 _flsbuf         proc near               ; CODE XREF: sub_403270+128A↑p
.text:0041FA40                                         ; .text:0040A789↑j ...
.text:0041FA40
.text:0041FA40 File            = dword ptr  8
.text:0041FA40
.text:0041FA40                 jmp     ds:__imp__flsbuf
.text:0041FA40 _flsbuf         endp
.text:0041FA40
.text:0041FA40 ; ---------------------------------------------------------------------------
.text:0041FA46                 align 10h
.text:0041FA50
.text:0041FA50 ; =============== S U B R O U T I N E =======================================
.text:0041FA50
.text:0041FA50 ; Attributes: thunk
.text:0041FA50
.text:0041FA50 ; int __cdecl setjmp(jmp_buf Buf)
.text:0041FA50 _setjmp         proc near               ; CODE XREF: sub_406340+162↑p
.text:0041FA50
.text:0041FA50 Buf             = dword ptr  4
.text:0041FA50
.text:0041FA50                 jmp     ds:__imp__setjmp
.text:0041FA50 _setjmp         endp
.text:0041FA50
.text:0041FA50 ; ---------------------------------------------------------------------------
.text:0041FA56                 align 10h
.text:0041FA60
.text:0041FA60 ; =============== S U B R O U T I N E =======================================
.text:0041FA60
.text:0041FA60 ; Attributes: noreturn thunk
.text:0041FA60
.text:0041FA60 ; void __cdecl __noreturn longjmp(jmp_buf Buf, int Value)
.text:0041FA60 longjmp         proc near               ; CODE XREF: sub_406A40+CE↑p
.text:0041FA60                                         ; sub_4080E0+584↑p
.text:0041FA60
.text:0041FA60 Buf             = dword ptr  4
.text:0041FA60 Value           = dword ptr  8
.text:0041FA60
.text:0041FA60                 jmp     ds:__imp_longjmp
.text:0041FA60 longjmp         endp
.text:0041FA60
.text:0041FA60 ; ---------------------------------------------------------------------------
.text:0041FA66                 align 10h
.text:0041FA70
.text:0041FA70 ; =============== S U B R O U T I N E =======================================
.text:0041FA70
.text:0041FA70 ; Attributes: thunk
.text:0041FA70
.text:0041FA70 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0041FA70 realloc         proc near               ; CODE XREF: sub_4076F0+BF↑p
.text:0041FA70                                         ; sub_40B0C0+30↑p ...
.text:0041FA70
.text:0041FA70 Block           = dword ptr  4
.text:0041FA70 Size            = dword ptr  8
.text:0041FA70
.text:0041FA70                 jmp     ds:__imp_realloc
.text:0041FA70 realloc         endp
.text:0041FA70
.text:0041FA70 ; ---------------------------------------------------------------------------
.text:0041FA76                 align 10h
.text:0041FA80
.text:0041FA80 ; =============== S U B R O U T I N E =======================================
.text:0041FA80
.text:0041FA80 ; Attributes: thunk
.text:0041FA80
.text:0041FA80 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0041FA80 strncmp         proc near               ; CODE XREF: sub_4096D0+23F↑p
.text:0041FA80                                         ; sub_4096D0+699↑p ...
.text:0041FA80
.text:0041FA80 Str1            = dword ptr  4
.text:0041FA80 Str2            = dword ptr  8
.text:0041FA80 MaxCount        = dword ptr  0Ch
.text:0041FA80
.text:0041FA80                 jmp     ds:__imp_strncmp
.text:0041FA80 strncmp         endp
.text:0041FA80
.text:0041FA80 ; ---------------------------------------------------------------------------
.text:0041FA86                 align 10h
.text:0041FA90
.text:0041FA90 ; =============== S U B R O U T I N E =======================================
.text:0041FA90
.text:0041FA90 ; Attributes: thunk
.text:0041FA90
.text:0041FA90 ; char *__cdecl strchr(const char *Str, int Val)
.text:0041FA90 strchr          proc near               ; CODE XREF: sub_4096D0+469↑p
.text:0041FA90                                         ; sub_4096D0+53A↑p ...
.text:0041FA90
.text:0041FA90 Str             = dword ptr  4
.text:0041FA90 Val             = dword ptr  8
.text:0041FA90
.text:0041FA90                 jmp     ds:__imp_strchr
.text:0041FA90 strchr          endp
.text:0041FA90
.text:0041FA90 ; ---------------------------------------------------------------------------
.text:0041FA96                 align 10h
.text:0041FAA0
.text:0041FAA0 ; =============== S U B R O U T I N E =======================================
.text:0041FAA0
.text:0041FAA0 ; Attributes: thunk
.text:0041FAA0
.text:0041FAA0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0041FAA0 memset          proc near               ; CODE XREF: .text:0040B1B6↑p
.text:0041FAA0                                         ; sub_412110+330A↑p ...
.text:0041FAA0
.text:0041FAA0 Val             = dword ptr  8
.text:0041FAA0 Size            = dword ptr  0Ch
.text:0041FAA0
.text:0041FAA0                 jmp     ds:__imp_memset
.text:0041FAA0 memset          endp
.text:0041FAA0
.text:0041FAA0 ; ---------------------------------------------------------------------------
.text:0041FAA6                 align 10h
.text:0041FAB0
.text:0041FAB0 ; =============== S U B R O U T I N E =======================================
.text:0041FAB0
.text:0041FAB0 ; Attributes: thunk
.text:0041FAB0
.text:0041FAB0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0041FAB0 calloc          proc near               ; CODE XREF: .text:0040B1F3↑p
.text:0041FAB0                                         ; sub_40C0D0+1D0↑p ...
.text:0041FAB0
.text:0041FAB0 Count           = dword ptr  4
.text:0041FAB0 Size            = dword ptr  8
.text:0041FAB0
.text:0041FAB0                 jmp     ds:__imp_calloc
.text:0041FAB0 calloc          endp
.text:0041FAB0
.text:0041FAB0 ; ---------------------------------------------------------------------------
.text:0041FAB6                 align 10h
.text:0041FAC0
.text:0041FAC0 ; =============== S U B R O U T I N E =======================================
.text:0041FAC0
.text:0041FAC0 ; Attributes: thunk
.text:0041FAC0
.text:0041FAC0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0041FAC0 vfprintf        proc near               ; CODE XREF: sub_40B610+C1↑p
.text:0041FAC0                                         ; sub_415D50+49↑p ...
.text:0041FAC0
.text:0041FAC0 Stream          = dword ptr  4
.text:0041FAC0 Format          = dword ptr  8
.text:0041FAC0 ArgList         = dword ptr  0Ch
.text:0041FAC0
.text:0041FAC0                 jmp     ds:__imp_vfprintf
.text:0041FAC0 vfprintf        endp
.text:0041FAC0
.text:0041FAC0 ; ---------------------------------------------------------------------------
.text:0041FAC6                 align 10h
.text:0041FAD0
.text:0041FAD0 ; =============== S U B R O U T I N E =======================================
.text:0041FAD0
.text:0041FAD0 ; Attributes: noreturn thunk
.text:0041FAD0
.text:0041FAD0 ; void __cdecl __noreturn abort()
.text:0041FAD0 abort           proc near               ; CODE XREF: sub_40B610:loc_40B6AC↑p
.text:0041FAD0                                         ; sub_40C060+32↑p ...
.text:0041FAD0                 jmp     ds:__imp_abort
.text:0041FAD0 abort           endp
.text:0041FAD0
.text:0041FAD0 ; ---------------------------------------------------------------------------
.text:0041FAD6                 align 10h
.text:0041FAE0
.text:0041FAE0 ; =============== S U B R O U T I N E =======================================
.text:0041FAE0
.text:0041FAE0 ; Attributes: thunk
.text:0041FAE0
.text:0041FAE0 ; int __cdecl fclose(FILE *Stream)
.text:0041FAE0 fclose          proc near               ; CODE XREF: sub_40B990+27↑p
.text:0041FAE0                                         ; .text:0041C5AE↑p
.text:0041FAE0
.text:0041FAE0 Stream          = dword ptr  4
.text:0041FAE0
.text:0041FAE0                 jmp     ds:__imp_fclose
.text:0041FAE0 fclose          endp
.text:0041FAE0
.text:0041FAE0 ; ---------------------------------------------------------------------------
.text:0041FAE6                 align 10h
.text:0041FAF0
.text:0041FAF0 ; =============== S U B R O U T I N E =======================================
.text:0041FAF0
.text:0041FAF0 ; Attributes: thunk
.text:0041FAF0
.text:0041FAF0 ; int __cdecl filbuf(FILE *File)
.text:0041FAF0 _filbuf         proc near               ; CODE XREF: sub_40BF70+B9↑p
.text:0041FAF0
.text:0041FAF0 File            = dword ptr  4
.text:0041FAF0
.text:0041FAF0                 jmp     ds:__imp__filbuf
.text:0041FAF0 _filbuf         endp
.text:0041FAF0
.text:0041FAF0 ; ---------------------------------------------------------------------------
.text:0041FAF6                 align 10h
.text:0041FB00
.text:0041FB00 ; =============== S U B R O U T I N E =======================================
.text:0041FB00
.text:0041FB00 ; Attributes: thunk
.text:0041FB00
.text:0041FB00 ; int __cdecl isctype(int C, int Type)
.text:0041FB00 _isctype        proc near               ; CODE XREF: sub_40BF70+5F↑p
.text:0041FB00                                         ; sub_40D2B0+610↑p ...
.text:0041FB00
.text:0041FB00 C               = dword ptr  4
.text:0041FB00 Type            = dword ptr  8
.text:0041FB00
.text:0041FB00                 jmp     ds:__imp__isctype
.text:0041FB00 _isctype        endp
.text:0041FB00
.text:0041FB00 ; ---------------------------------------------------------------------------
.text:0041FB06                 align 10h
.text:0041FB10
.text:0041FB10 ; =============== S U B R O U T I N E =======================================
.text:0041FB10
.text:0041FB10 ; Attributes: thunk
.text:0041FB10
.text:0041FB10 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0041FB10 iswctype        proc near               ; CODE XREF: sub_40D2B0+78B↑p
.text:0041FB10                                         ; sub_412110+1F86↑p
.text:0041FB10
.text:0041FB10 C               = word ptr  4
.text:0041FB10 Type            = word ptr  8
.text:0041FB10
.text:0041FB10                 jmp     ds:__imp_iswctype
.text:0041FB10 iswctype        endp
.text:0041FB10
.text:0041FB10 ; ---------------------------------------------------------------------------
.text:0041FB16                 align 10h
.text:0041FB20
.text:0041FB20 ; =============== S U B R O U T I N E =======================================
.text:0041FB20
.text:0041FB20 ; Attributes: thunk
.text:0041FB20
.text:0041FB20 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0041FB20 strspn          proc near               ; CODE XREF: sub_40E810+8B↑p
.text:0041FB20                                         ; .text:0041BA3A↑p ...
.text:0041FB20
.text:0041FB20 Str             = dword ptr  4
.text:0041FB20 Control         = dword ptr  8
.text:0041FB20
.text:0041FB20                 jmp     ds:__imp_strspn
.text:0041FB20 strspn          endp
.text:0041FB20
.text:0041FB20 ; ---------------------------------------------------------------------------
.text:0041FB26                 align 10h
.text:0041FB30
.text:0041FB30 ; =============== S U B R O U T I N E =======================================
.text:0041FB30
.text:0041FB30 ; Attributes: thunk
.text:0041FB30
.text:0041FB30 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:0041FB30 strcspn         proc near               ; CODE XREF: sub_40E810+D6↑p
.text:0041FB30                                         ; sub_40E810+51F↑p
.text:0041FB30
.text:0041FB30 Str             = dword ptr  4
.text:0041FB30 Control         = dword ptr  8
.text:0041FB30
.text:0041FB30                 jmp     ds:__imp_strcspn
.text:0041FB30 strcspn         endp
.text:0041FB30
.text:0041FB30 ; ---------------------------------------------------------------------------
.text:0041FB36                 align 10h
.text:0041FB40
.text:0041FB40 ; =============== S U B R O U T I N E =======================================
.text:0041FB40
.text:0041FB40 ; Attributes: thunk
.text:0041FB40
.text:0041FB40 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:0041FB40 memchr          proc near               ; CODE XREF: sub_40E810+BE↑p
.text:0041FB40
.text:0041FB40 Buf             = dword ptr  4
.text:0041FB40 Val             = dword ptr  8
.text:0041FB40 MaxCount        = dword ptr  0Ch
.text:0041FB40
.text:0041FB40                 jmp     ds:__imp_memchr
.text:0041FB40 memchr          endp
.text:0041FB40
.text:0041FB40 ; ---------------------------------------------------------------------------
.text:0041FB46                 align 10h
.text:0041FB50
.text:0041FB50 ; =============== S U B R O U T I N E =======================================
.text:0041FB50
.text:0041FB50 ; Attributes: thunk
.text:0041FB50
.text:0041FB50 ; int __cdecl tolower(int C)
.text:0041FB50 tolower         proc near               ; CODE XREF: sub_411B40+158↑p
.text:0041FB50
.text:0041FB50 C               = dword ptr  4
.text:0041FB50
.text:0041FB50                 jmp     ds:__imp_tolower
.text:0041FB50 tolower         endp
.text:0041FB50
.text:0041FB50 ; ---------------------------------------------------------------------------
.text:0041FB56                 align 10h
.text:0041FB60
.text:0041FB60 ; =============== S U B R O U T I N E =======================================
.text:0041FB60
.text:0041FB60 ; Attributes: thunk
.text:0041FB60
.text:0041FB60 ; int __cdecl fflush(FILE *Stream)
.text:0041FB60 fflush          proc near               ; CODE XREF: sub_415D50+19↑p
.text:0041FB60                                         ; sub_415D50+81↑p ...
.text:0041FB60
.text:0041FB60 Stream          = dword ptr  4
.text:0041FB60
.text:0041FB60                 jmp     ds:__imp_fflush
.text:0041FB60 fflush          endp
.text:0041FB60
.text:0041FB60 ; ---------------------------------------------------------------------------
.text:0041FB66                 align 10h
.text:0041FB70
.text:0041FB70 ; =============== S U B R O U T I N E =======================================
.text:0041FB70
.text:0041FB70 ; Attributes: thunk
.text:0041FB70
.text:0041FB70 ; char *__cdecl strerror(int ErrorMessage)
.text:0041FB70 strerror        proc near               ; CODE XREF: sub_415D50+A5↑p
.text:0041FB70                                         ; sub_415E54+10F↑p
.text:0041FB70
.text:0041FB70 ErrorMessage    = dword ptr  4
.text:0041FB70
.text:0041FB70                 jmp     ds:__imp_strerror
.text:0041FB70 strerror        endp
.text:0041FB70
.text:0041FB70 ; ---------------------------------------------------------------------------
.text:0041FB76                 align 10h
.text:0041FB80
.text:0041FB80 ; =============== S U B R O U T I N E =======================================
.text:0041FB80
.text:0041FB80 ; Attributes: thunk
.text:0041FB80
.text:0041FB80 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0041FB80 ctime           proc near               ; CODE XREF: .text:004162CD↑p
.text:0041FB80                                         ; .text:004162EF↑p ...
.text:0041FB80
.text:0041FB80 Time            = dword ptr  4
.text:0041FB80
.text:0041FB80                 jmp     ds:__imp_ctime
.text:0041FB80 ctime           endp
.text:0041FB80
.text:0041FB80 ; ---------------------------------------------------------------------------
.text:0041FB86                 align 10h
.text:0041FB90
.text:0041FB90 ; =============== S U B R O U T I N E =======================================
.text:0041FB90
.text:0041FB90 ; Attributes: thunk
.text:0041FB90
.text:0041FB90 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0041FB90 _get_osfhandle  proc near               ; CODE XREF: sub_416370+3A↑p
.text:0041FB90                                         ; sub_41A320+22↑p ...
.text:0041FB90
.text:0041FB90 FileHandle      = dword ptr  4
.text:0041FB90
.text:0041FB90                 jmp     ds:__imp__get_osfhandle
.text:0041FB90 _get_osfhandle  endp
.text:0041FB90
.text:0041FB90 ; ---------------------------------------------------------------------------
.text:0041FB96                 align 10h
.text:0041FBA0
.text:0041FBA0 ; =============== S U B R O U T I N E =======================================
.text:0041FBA0
.text:0041FBA0 ; Attributes: thunk
.text:0041FBA0
.text:0041FBA0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0041FBA0 strcat          proc near               ; CODE XREF: sub_4165D0+98↑p
.text:0041FBA0                                         ; sub_418350+4D↑p ...
.text:0041FBA0
.text:0041FBA0 Destination     = dword ptr  4
.text:0041FBA0 Source          = dword ptr  8
.text:0041FBA0
.text:0041FBA0                 jmp     ds:__imp_strcat
.text:0041FBA0 strcat          endp
.text:0041FBA0
.text:0041FBA0 ; ---------------------------------------------------------------------------
.text:0041FBA6                 align 10h
.text:0041FBB0
.text:0041FBB0 ; =============== S U B R O U T I N E =======================================
.text:0041FBB0
.text:0041FBB0 ; Attributes: thunk
.text:0041FBB0
.text:0041FBB0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0041FBB0 strcpy          proc near               ; CODE XREF: sub_4165D0+73↑p
.text:0041FBB0                                         ; _win32_longpath+13C↑p ...
.text:0041FBB0
.text:0041FBB0 Destination     = dword ptr  4
.text:0041FBB0 Source          = dword ptr  8
.text:0041FBB0
.text:0041FBB0                 jmp     ds:__imp_strcpy
.text:0041FBB0 strcpy          endp
.text:0041FBB0
.text:0041FBB0 ; ---------------------------------------------------------------------------
.text:0041FBB6                 align 10h
.text:0041FBC0
.text:0041FBC0 ; =============== S U B R O U T I N E =======================================
.text:0041FBC0
.text:0041FBC0 ; Attributes: thunk
.text:0041FBC0
.text:0041FBC0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0041FBC0 strstr          proc near               ; CODE XREF: sub_416C20+3BF↑p
.text:0041FBC0                                         ; sub_416C20+3DC↑p ...
.text:0041FBC0
.text:0041FBC0 Str             = dword ptr  4
.text:0041FBC0 SubStr          = dword ptr  8
.text:0041FBC0
.text:0041FBC0                 jmp     ds:__imp_strstr
.text:0041FBC0 strstr          endp
.text:0041FBC0
.text:0041FBC0 ; ---------------------------------------------------------------------------
.text:0041FBC6                 align 10h
.text:0041FBD0
.text:0041FBD0 ; =============== S U B R O U T I N E =======================================
.text:0041FBD0
.text:0041FBD0 ; Attributes: thunk
.text:0041FBD0
.text:0041FBD0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0041FBD0 strrchr         proc near               ; CODE XREF: sub_416C20+CB↑p
.text:0041FBD0                                         ; sub_416C20+3A7↑p ...
.text:0041FBD0
.text:0041FBD0 Str             = dword ptr  4
.text:0041FBD0
.text:0041FBD0                 jmp     ds:__imp_strrchr
.text:0041FBD0 strrchr         endp
.text:0041FBD0
.text:0041FBD0 ; ---------------------------------------------------------------------------
.text:0041FBD6                 align 10h
.text:0041FBE0
.text:0041FBE0 ; =============== S U B R O U T I N E =======================================
.text:0041FBE0
.text:0041FBE0 ; Attributes: thunk
.text:0041FBE0
.text:0041FBE0 ; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
.text:0041FBE0 mbstowcs        proc near               ; CODE XREF: sub_417F50+90↑p
.text:0041FBE0
.text:0041FBE0 Dest            = dword ptr  4
.text:0041FBE0 Source          = dword ptr  8
.text:0041FBE0 MaxCount        = dword ptr  0Ch
.text:0041FBE0
.text:0041FBE0                 jmp     ds:__imp_mbstowcs
.text:0041FBE0 mbstowcs        endp
.text:0041FBE0
.text:0041FBE0 ; ---------------------------------------------------------------------------
.text:0041FBE6                 align 10h
.text:0041FBF0
.text:0041FBF0 ; =============== S U B R O U T I N E =======================================
.text:0041FBF0
.text:0041FBF0 ; Attributes: thunk
.text:0041FBF0
.text:0041FBF0 ; int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags)
.text:0041FBF0 _open_osfhandle proc near               ; CODE XREF: sub_418350+A1↑p
.text:0041FBF0
.text:0041FBF0 OSFileHandle    = dword ptr  4
.text:0041FBF0 Flags           = dword ptr  8
.text:0041FBF0
.text:0041FBF0                 jmp     ds:__imp__open_osfhandle
.text:0041FBF0 _open_osfhandle endp
.text:0041FBF0
.text:0041FBF0 ; ---------------------------------------------------------------------------
.text:0041FBF6                 align 10h
.text:0041FC00
.text:0041FC00 ; =============== S U B R O U T I N E =======================================
.text:0041FC00
.text:0041FC00 ; Attributes: thunk
.text:0041FC00
.text:0041FC00 ; int __cdecl isalpha(int C)
.text:0041FC00 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0041FC00
.text:0041FC00 C               = dword ptr  4
.text:0041FC00
.text:0041FC00                 jmp     ds:__imp_isalpha
.text:0041FC00 isalpha         endp
.text:0041FC00
.text:0041FC00 ; ---------------------------------------------------------------------------
.text:0041FC06                 align 10h
.text:0041FC10
.text:0041FC10 ; =============== S U B R O U T I N E =======================================
.text:0041FC10
.text:0041FC10 ; Attributes: thunk
.text:0041FC10
.text:0041FC10 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0041FC10 _stricmp_0      proc near               ; CODE XREF: .text:00418B24↑p
.text:0041FC10
.text:0041FC10 String1         = dword ptr  4
.text:0041FC10 String2         = dword ptr  8
.text:0041FC10
.text:0041FC10                 jmp     ds:__imp__stricmp_0
.text:0041FC10 _stricmp_0      endp
.text:0041FC10
.text:0041FC10 ; ---------------------------------------------------------------------------
.text:0041FC16                 align 10h
.text:0041FC20
.text:0041FC20 ; =============== S U B R O U T I N E =======================================
.text:0041FC20
.text:0041FC20 ; Attributes: thunk
.text:0041FC20
.text:0041FC20 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0041FC20 strncat         proc near               ; CODE XREF: sub_418CB0+75↑p
.text:0041FC20
.text:0041FC20 Destination     = dword ptr  4
.text:0041FC20 Source          = dword ptr  8
.text:0041FC20 Count           = dword ptr  0Ch
.text:0041FC20
.text:0041FC20                 jmp     ds:__imp_strncat
.text:0041FC20 strncat         endp
.text:0041FC20
.text:0041FC20 ; ---------------------------------------------------------------------------
.text:0041FC26                 align 10h
.text:0041FC30
.text:0041FC30 ; =============== S U B R O U T I N E =======================================
.text:0041FC30
.text:0041FC30 ; Attributes: thunk
.text:0041FC30
.text:0041FC30 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0041FC30 strncpy         proc near               ; CODE XREF: sub_418CB0+61↑p
.text:0041FC30                                         ; sub_418CB0+118↑p ...
.text:0041FC30
.text:0041FC30 Destination     = dword ptr  4
.text:0041FC30 Source          = dword ptr  8
.text:0041FC30 Count           = dword ptr  0Ch
.text:0041FC30
.text:0041FC30                 jmp     ds:__imp_strncpy
.text:0041FC30 strncpy         endp
.text:0041FC30
.text:0041FC30 ; ---------------------------------------------------------------------------
.text:0041FC36                 align 10h
.text:0041FC40
.text:0041FC40 ; =============== S U B R O U T I N E =======================================
.text:0041FC40
.text:0041FC40 ; Attributes: thunk
.text:0041FC40
.text:0041FC40 ; int __cdecl toupper(int C)
.text:0041FC40 toupper         proc near               ; CODE XREF: sub_419100+10E↑p
.text:0041FC40
.text:0041FC40 C               = dword ptr  4
.text:0041FC40
.text:0041FC40                 jmp     ds:__imp_toupper
.text:0041FC40 toupper         endp
.text:0041FC40
.text:0041FC40 ; ---------------------------------------------------------------------------
.text:0041FC46                 align 10h
.text:0041FC50
.text:0041FC50 ; =============== S U B R O U T I N E =======================================
.text:0041FC50
.text:0041FC50 ; Attributes: thunk
.text:0041FC50
.text:0041FC50 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:0041FC50 _chmod_0        proc near               ; CODE XREF: sub_41A0D0+9B↑p
.text:0041FC50
.text:0041FC50 FileName        = dword ptr  4
.text:0041FC50 AccessMode      = dword ptr  8
.text:0041FC50
.text:0041FC50                 jmp     ds:__imp__chmod_0
.text:0041FC50 _chmod_0        endp
.text:0041FC50
.text:0041FC50 ; ---------------------------------------------------------------------------
.text:0041FC56                 align 10h
.text:0041FC60
.text:0041FC60 ; =============== S U B R O U T I N E =======================================
.text:0041FC60
.text:0041FC60 ; Attributes: thunk
.text:0041FC60
.text:0041FC60 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:0041FC60 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:0041FC60
.text:0041FC60 DstBuf          = dword ptr  4
.text:0041FC60 SizeInBytes     = dword ptr  8
.text:0041FC60
.text:0041FC60                 jmp     ds:__imp__getcwd
.text:0041FC60 _getcwd         endp
.text:0041FC60
.text:0041FC60 ; ---------------------------------------------------------------------------
.text:0041FC66                 align 10h
.text:0041FC70
.text:0041FC70 ; =============== S U B R O U T I N E =======================================
.text:0041FC70
.text:0041FC70 ; Attributes: thunk
.text:0041FC70
.text:0041FC70 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0041FC70 sprintf         proc near               ; CODE XREF: .text:0041B06A↑p
.text:0041FC70                                         ; .text:0041B08B↑p ...
.text:0041FC70
.text:0041FC70 Buffer          = dword ptr  4
.text:0041FC70 Format          = dword ptr  8
.text:0041FC70
.text:0041FC70                 jmp     ds:__imp_sprintf
.text:0041FC70 sprintf         endp
.text:0041FC70
.text:0041FC70 ; ---------------------------------------------------------------------------
.text:0041FC76                 align 10h
.text:0041FC80
.text:0041FC80 ; =============== S U B R O U T I N E =======================================
.text:0041FC80
.text:0041FC80 ; Attributes: thunk
.text:0041FC80
.text:0041FC80 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0041FC80 sscanf          proc near               ; CODE XREF: .text:0041BBEE↑p
.text:0041FC80
.text:0041FC80 Buffer          = dword ptr  4
.text:0041FC80 Format          = dword ptr  8
.text:0041FC80
.text:0041FC80                 jmp     ds:__imp_sscanf
.text:0041FC80 sscanf          endp
.text:0041FC80
.text:0041FC80 ; ---------------------------------------------------------------------------
.text:0041FC86                 align 10h
.text:0041FC90
.text:0041FC90 ; =============== S U B R O U T I N E =======================================
.text:0041FC90
.text:0041FC90 ; Attributes: thunk
.text:0041FC90
.text:0041FC90 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0041FC90 fopen           proc near               ; CODE XREF: sub_41C4EF+26↑p
.text:0041FC90                                         ; sub_41C4EF+99↑p
.text:0041FC90
.text:0041FC90 FileName        = dword ptr  4
.text:0041FC90 Mode            = dword ptr  8
.text:0041FC90
.text:0041FC90                 jmp     ds:__imp_fopen
.text:0041FC90 fopen           endp
.text:0041FC90
.text:0041FC90 ; ---------------------------------------------------------------------------
.text:0041FC96                 align 10h
.text:0041FCA0
.text:0041FCA0 ; =============== S U B R O U T I N E =======================================
.text:0041FCA0
.text:0041FCA0 ; Attributes: thunk
.text:0041FCA0
.text:0041FCA0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0041FCA0 _filelengthi64  proc near               ; CODE XREF: sub_41D070+1F↑p
.text:0041FCA0
.text:0041FCA0 FileHandle      = dword ptr  4
.text:0041FCA0
.text:0041FCA0                 jmp     ds:__imp__filelengthi64
.text:0041FCA0 _filelengthi64  endp
.text:0041FCA0
.text:0041FCA0 ; ---------------------------------------------------------------------------
.text:0041FCA6                 align 10h
.text:0041FCB0
.text:0041FCB0 ; =============== S U B R O U T I N E =======================================
.text:0041FCB0
.text:0041FCB0 ; Attributes: thunk
.text:0041FCB0
.text:0041FCB0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0041FCB0 strpbrk         proc near               ; CODE XREF: sub_41D0D0+87↑p
.text:0041FCB0
.text:0041FCB0 Str             = dword ptr  4
.text:0041FCB0 Control         = dword ptr  8
.text:0041FCB0
.text:0041FCB0                 jmp     ds:__imp_strpbrk
.text:0041FCB0 strpbrk         endp
.text:0041FCB0
.text:0041FCB0 ; ---------------------------------------------------------------------------
.text:0041FCB6                 align 10h
.text:0041FCC0
.text:0041FCC0 ; =============== S U B R O U T I N E =======================================
.text:0041FCC0
.text:0041FCC0 ; Attributes: thunk
.text:0041FCC0
.text:0041FCC0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0041FCC0 _fdopen         proc near               ; CODE XREF: sub_41D170+69↑p
.text:0041FCC0
.text:0041FCC0 FileHandle      = dword ptr  4
.text:0041FCC0 Format          = dword ptr  8
.text:0041FCC0
.text:0041FCC0                 jmp     ds:__imp__fdopen
.text:0041FCC0 _fdopen         endp
.text:0041FCC0
.text:0041FCC0 ; ---------------------------------------------------------------------------
.text:0041FCC6                 align 10h
.text:0041FCD0
.text:0041FCD0 ; =============== S U B R O U T I N E =======================================
.text:0041FCD0
.text:0041FCD0 ; Attributes: thunk
.text:0041FCD0
.text:0041FCD0 ; int __cdecl close_0(int FileHandle)
.text:0041FCD0 _close_0        proc near               ; CODE XREF: sub_41D170+90↑p
.text:0041FCD0
.text:0041FCD0 FileHandle      = dword ptr  4
.text:0041FCD0
.text:0041FCD0                 jmp     ds:__imp__close_0
.text:0041FCD0 _close_0        endp
.text:0041FCD0
.text:0041FCD0 ; ---------------------------------------------------------------------------
.text:0041FCD6                 align 10h
.text:0041FCE0
.text:0041FCE0 ; =============== S U B R O U T I N E =======================================
.text:0041FCE0
.text:0041FCE0 ; Attributes: thunk
.text:0041FCE0
.text:0041FCE0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0041FCE0 _open_0         proc near               ; CODE XREF: sub_41D5C0:loc_41D950↑p
.text:0041FCE0
.text:0041FCE0 FileName        = dword ptr  4
.text:0041FCE0 OpenFlag        = dword ptr  8
.text:0041FCE0
.text:0041FCE0                 jmp     ds:__imp__open_0
.text:0041FCE0 _open_0         endp
.text:0041FCE0
.text:0041FCE0 ; ---------------------------------------------------------------------------
.text:0041FCE6                 align 10h
.text:0041FCF0
.text:0041FCF0 ; =============== S U B R O U T I N E =======================================
.text:0041FCF0
.text:0041FCF0 ; Attributes: thunk
.text:0041FCF0
.text:0041FCF0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:0041FCF0 fwrite          proc near               ; CODE XREF: sub_41DF40+17↑p
.text:0041FCF0
.text:0041FCF0 Buffer          = dword ptr  4
.text:0041FCF0 ElementSize     = dword ptr  8
.text:0041FCF0 ElementCount    = dword ptr  0Ch
.text:0041FCF0 Stream          = dword ptr  10h
.text:0041FCF0
.text:0041FCF0                 jmp     ds:__imp_fwrite
.text:0041FCF0 fwrite          endp
.text:0041FCF0
.text:0041FCF0 ; ---------------------------------------------------------------------------
.text:0041FCF6                 align 10h
.text:0041FD00
.text:0041FD00 ; =============== S U B R O U T I N E =======================================
.text:0041FD00
.text:0041FD00 ; Attributes: thunk
.text:0041FD00
.text:0041FD00 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0041FD00 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0041FD00
.text:0041FD00 lpTopLevelExceptionFilter= dword ptr  4
.text:0041FD00
.text:0041FD00                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0041FD00 SetUnhandledExceptionFilter endp
.text:0041FD00
.text:0041FD00 ; ---------------------------------------------------------------------------
.text:0041FD06                 align 10h
.text:0041FD10
.text:0041FD10 ; =============== S U B R O U T I N E =======================================
.text:0041FD10
.text:0041FD10 ; Attributes: noreturn thunk
.text:0041FD10
.text:0041FD10 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0041FD10 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0041FD10
.text:0041FD10 uExitCode       = dword ptr  4
.text:0041FD10
.text:0041FD10                 jmp     ds:__imp_ExitProcess
.text:0041FD10 ExitProcess     endp
.text:0041FD10
.text:0041FD10 ; ---------------------------------------------------------------------------
.text:0041FD16                 align 10h
.text:0041FD20
.text:0041FD20 ; =============== S U B R O U T I N E =======================================
.text:0041FD20
.text:0041FD20 ; Attributes: thunk
.text:0041FD20
.text:0041FD20 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0041FD20 GetModuleHandleA proc near              ; CODE XREF: sub_416460+18↑p
.text:0041FD20                                         ; sub_416C20+329↑p ...
.text:0041FD20
.text:0041FD20 lpModuleName    = dword ptr  4
.text:0041FD20
.text:0041FD20                 jmp     ds:__imp_GetModuleHandleA
.text:0041FD20 GetModuleHandleA endp
.text:0041FD20
.text:0041FD20 ; ---------------------------------------------------------------------------
.text:0041FD26                 align 10h
.text:0041FD30
.text:0041FD30 ; =============== S U B R O U T I N E =======================================
.text:0041FD30
.text:0041FD30 ; Attributes: thunk
.text:0041FD30
.text:0041FD30 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0041FD30 GetProcAddress  proc near               ; CODE XREF: sub_416460+33↑p
.text:0041FD30                                         ; sub_4165D0+2E↑p ...
.text:0041FD30
.text:0041FD30 hModule         = dword ptr  4
.text:0041FD30 lpProcName      = dword ptr  8
.text:0041FD30
.text:0041FD30                 jmp     ds:__imp_GetProcAddress
.text:0041FD30 GetProcAddress  endp
.text:0041FD30
.text:0041FD30 ; ---------------------------------------------------------------------------
.text:0041FD36                 align 10h
.text:0041FD40
.text:0041FD40 ; =============== S U B R O U T I N E =======================================
.text:0041FD40
.text:0041FD40 ; Attributes: thunk
.text:0041FD40
.text:0041FD40 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0041FD40 GetFileAttributesA proc near            ; CODE XREF: sub_416460+47↑p
.text:0041FD40                                         ; sub_419DF0+13↑p ...
.text:0041FD40
.text:0041FD40 lpFileName      = dword ptr  4
.text:0041FD40
.text:0041FD40                 jmp     ds:__imp_GetFileAttributesA
.text:0041FD40 GetFileAttributesA endp
.text:0041FD40
.text:0041FD40 ; ---------------------------------------------------------------------------
.text:0041FD46                 align 10h
.text:0041FD50
.text:0041FD50 ; =============== S U B R O U T I N E =======================================
.text:0041FD50
.text:0041FD50 ; Attributes: thunk
.text:0041FD50
.text:0041FD50 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0041FD50 FreeLibrary     proc near               ; CODE XREF: sub_416460+A4↑p
.text:0041FD50                                         ; sub_4165D0+11D↑p ...
.text:0041FD50
.text:0041FD50 hLibModule      = dword ptr  4
.text:0041FD50
.text:0041FD50                 jmp     ds:__imp_FreeLibrary
.text:0041FD50 FreeLibrary     endp
.text:0041FD50
.text:0041FD50 ; ---------------------------------------------------------------------------
.text:0041FD56                 align 10h
.text:0041FD60
.text:0041FD60 ; =============== S U B R O U T I N E =======================================
.text:0041FD60
.text:0041FD60 ; Attributes: thunk
.text:0041FD60
.text:0041FD60 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041FD60 FindFirstFileA  proc near               ; CODE XREF: sub_416460+CE↑p
.text:0041FD60                                         ; sub_4165D0+14F↑p ...
.text:0041FD60
.text:0041FD60 lpFileName      = dword ptr  4
.text:0041FD60 lpFindFileData  = dword ptr  8
.text:0041FD60
.text:0041FD60                 jmp     ds:__imp_FindFirstFileA
.text:0041FD60 FindFirstFileA  endp
.text:0041FD60
.text:0041FD60 ; ---------------------------------------------------------------------------
.text:0041FD66                 align 10h
.text:0041FD70
.text:0041FD70 ; =============== S U B R O U T I N E =======================================
.text:0041FD70
.text:0041FD70 ; Attributes: thunk
.text:0041FD70
.text:0041FD70 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0041FD70 FindClose       proc near               ; CODE XREF: sub_416460+123↑p
.text:0041FD70                                         ; sub_4165D0+10E↑p ...
.text:0041FD70
.text:0041FD70 hFindFile       = dword ptr  4
.text:0041FD70
.text:0041FD70                 jmp     ds:__imp_FindClose
.text:0041FD70 FindClose       endp
.text:0041FD70
.text:0041FD70 ; ---------------------------------------------------------------------------
.text:0041FD76                 align 10h
.text:0041FD80
.text:0041FD80 ; =============== S U B R O U T I N E =======================================
.text:0041FD80
.text:0041FD80 ; Attributes: thunk
.text:0041FD80
.text:0041FD80 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0041FD80 LoadLibraryA    proc near               ; CODE XREF: sub_4165D0+13↑p
.text:0041FD80                                         ; sub_416C20+134↑p ...
.text:0041FD80
.text:0041FD80 lpLibFileName   = dword ptr  4
.text:0041FD80
.text:0041FD80                 jmp     ds:__imp_LoadLibraryA
.text:0041FD80 LoadLibraryA    endp
.text:0041FD80
.text:0041FD80 ; ---------------------------------------------------------------------------
.text:0041FD86                 align 10h
.text:0041FD90
.text:0041FD90 ; =============== S U B R O U T I N E =======================================
.text:0041FD90
.text:0041FD90 ; Attributes: thunk
.text:0041FD90
.text:0041FD90 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041FD90 FindNextFileA   proc near               ; CODE XREF: sub_4165D0+FF↑p
.text:0041FD90                                         ; sub_418CB0+36↑p
.text:0041FD90
.text:0041FD90 hFindFile       = dword ptr  4
.text:0041FD90 lpFindFileData  = dword ptr  8
.text:0041FD90
.text:0041FD90                 jmp     ds:__imp_FindNextFileA
.text:0041FD90 FindNextFileA   endp
.text:0041FD90
.text:0041FD90 ; ---------------------------------------------------------------------------
.text:0041FD96                 align 10h
.text:0041FDA0
.text:0041FDA0 ; =============== S U B R O U T I N E =======================================
.text:0041FDA0
.text:0041FDA0 ; Attributes: thunk
.text:0041FDA0
.text:0041FDA0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0041FDA0 GetFileType     proc near               ; CODE XREF: sub_416750+43↑p
.text:0041FDA0                                         ; .text:0041740A↑p
.text:0041FDA0
.text:0041FDA0 hFile           = dword ptr  4
.text:0041FDA0
.text:0041FDA0                 jmp     ds:__imp_GetFileType
.text:0041FDA0 GetFileType     endp
.text:0041FDA0
.text:0041FDA0 ; ---------------------------------------------------------------------------
.text:0041FDA6                 align 10h
.text:0041FDB0
.text:0041FDB0 ; =============== S U B R O U T I N E =======================================
.text:0041FDB0
.text:0041FDB0 ; Attributes: thunk
.text:0041FDB0
.text:0041FDB0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0041FDB0 GetFileInformationByHandle proc near    ; CODE XREF: sub_416750+69↑p
.text:0041FDB0
.text:0041FDB0 hFile           = dword ptr  4
.text:0041FDB0 lpFileInformation= dword ptr  8
.text:0041FDB0
.text:0041FDB0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0041FDB0 GetFileInformationByHandle endp
.text:0041FDB0
.text:0041FDB0 ; ---------------------------------------------------------------------------
.text:0041FDB6                 align 10h
.text:0041FDC0
.text:0041FDC0 ; =============== S U B R O U T I N E =======================================
.text:0041FDC0
.text:0041FDC0 ; Attributes: thunk
.text:0041FDC0
.text:0041FDC0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0041FDC0 GetFileSize     proc near               ; CODE XREF: sub_416750+3F2↑p
.text:0041FDC0
.text:0041FDC0 hFile           = dword ptr  4
.text:0041FDC0 lpFileSizeHigh  = dword ptr  8
.text:0041FDC0
.text:0041FDC0                 jmp     ds:__imp_GetFileSize
.text:0041FDC0 GetFileSize     endp
.text:0041FDC0
.text:0041FDC0 ; ---------------------------------------------------------------------------
.text:0041FDC6                 align 10h
.text:0041FDD0
.text:0041FDD0 ; =============== S U B R O U T I N E =======================================
.text:0041FDD0
.text:0041FDD0 ; Attributes: thunk
.text:0041FDD0
.text:0041FDD0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0041FDD0 PeekNamedPipe   proc near               ; CODE XREF: sub_416750+439↑p
.text:0041FDD0
.text:0041FDD0 hNamedPipe      = dword ptr  4
.text:0041FDD0 lpBuffer        = dword ptr  8
.text:0041FDD0 nBufferSize     = dword ptr  0Ch
.text:0041FDD0 lpBytesRead     = dword ptr  10h
.text:0041FDD0 lpTotalBytesAvail= dword ptr  14h
.text:0041FDD0 lpBytesLeftThisMessage= dword ptr  18h
.text:0041FDD0
.text:0041FDD0                 jmp     ds:__imp_PeekNamedPipe
.text:0041FDD0 PeekNamedPipe   endp
.text:0041FDD0
.text:0041FDD0 ; ---------------------------------------------------------------------------
.text:0041FDD6                 align 10h
.text:0041FDE0
.text:0041FDE0 ; =============== S U B R O U T I N E =======================================
.text:0041FDE0
.text:0041FDE0 ; Attributes: thunk
.text:0041FDE0
.text:0041FDE0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0041FDE0 GetDriveTypeA   proc near               ; CODE XREF: sub_416C20+4C↑p
.text:0041FDE0
.text:0041FDE0 lpRootPathName  = dword ptr  4
.text:0041FDE0
.text:0041FDE0                 jmp     ds:__imp_GetDriveTypeA
.text:0041FDE0 GetDriveTypeA   endp
.text:0041FDE0
.text:0041FDE0 ; ---------------------------------------------------------------------------
.text:0041FDE6                 align 10h
.text:0041FDF0
.text:0041FDF0 ; =============== S U B R O U T I N E =======================================
.text:0041FDF0
.text:0041FDF0 ; Attributes: thunk
.text:0041FDF0
.text:0041FDF0 ; DWORD __stdcall GetLastError()
.text:0041FDF0 GetLastError    proc near               ; CODE XREF: sub_416C20:loc_416EA9↑p
.text:0041FDF0                                         ; .text:loc_4179ED↑p ...
.text:0041FDF0                 jmp     ds:__imp_GetLastError
.text:0041FDF0 GetLastError    endp
.text:0041FDF0
.text:0041FDF0 ; ---------------------------------------------------------------------------
.text:0041FDF6                 align 10h
.text:0041FE00
.text:0041FE00 ; =============== S U B R O U T I N E =======================================
.text:0041FE00
.text:0041FE00 ; Attributes: thunk
.text:0041FE00
.text:0041FE00 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0041FE00 GetVolumeInformationA proc near         ; CODE XREF: sub_417120+64↑p
.text:0041FE00                                         ; .text:004176CC↑p ...
.text:0041FE00
.text:0041FE00 lpRootPathName  = dword ptr  4
.text:0041FE00 lpVolumeNameBuffer= dword ptr  8
.text:0041FE00 nVolumeNameSize = dword ptr  0Ch
.text:0041FE00 lpVolumeSerialNumber= dword ptr  10h
.text:0041FE00 lpMaximumComponentLength= dword ptr  14h
.text:0041FE00 lpFileSystemFlags= dword ptr  18h
.text:0041FE00 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0041FE00 nFileSystemNameSize= dword ptr  20h
.text:0041FE00
.text:0041FE00                 jmp     ds:__imp_GetVolumeInformationA
.text:0041FE00 GetVolumeInformationA endp
.text:0041FE00
.text:0041FE00 ; ---------------------------------------------------------------------------
.text:0041FE06                 align 10h
.text:0041FE10
.text:0041FE10 ; =============== S U B R O U T I N E =======================================
.text:0041FE10
.text:0041FE10 ; Attributes: thunk
.text:0041FE10
.text:0041FE10 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0041FE10 CreateFileA     proc near               ; CODE XREF: sub_418280-3CA↑p
.text:0041FE10                                         ; sub_417F50+4C↑p ...
.text:0041FE10
.text:0041FE10 lpFileName      = dword ptr  4
.text:0041FE10 dwDesiredAccess = dword ptr  8
.text:0041FE10 dwShareMode     = dword ptr  0Ch
.text:0041FE10 lpSecurityAttributes= dword ptr  10h
.text:0041FE10 dwCreationDisposition= dword ptr  14h
.text:0041FE10 dwFlagsAndAttributes= dword ptr  18h
.text:0041FE10 hTemplateFile   = dword ptr  1Ch
.text:0041FE10
.text:0041FE10                 jmp     ds:__imp_CreateFileA
.text:0041FE10 CreateFileA     endp
.text:0041FE10
.text:0041FE10 ; ---------------------------------------------------------------------------
.text:0041FE16                 align 10h
.text:0041FE20
.text:0041FE20 ; =============== S U B R O U T I N E =======================================
.text:0041FE20
.text:0041FE20 ; Attributes: thunk
.text:0041FE20
.text:0041FE20 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0041FE20 CloseHandle     proc near               ; CODE XREF: sub_418280-3AF↑p
.text:0041FE20                                         ; sub_417F50+182↑p ...
.text:0041FE20
.text:0041FE20 hObject         = dword ptr  4
.text:0041FE20
.text:0041FE20                 jmp     ds:__imp_CloseHandle
.text:0041FE20 CloseHandle     endp
.text:0041FE20
.text:0041FE20 ; ---------------------------------------------------------------------------
.text:0041FE26                 align 10h
.text:0041FE30
.text:0041FE30 ; =============== S U B R O U T I N E =======================================
.text:0041FE30
.text:0041FE30 ; Attributes: thunk
.text:0041FE30
.text:0041FE30 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0041FE30 SetErrorMode    proc near               ; CODE XREF: sub_418280-37A↑p
.text:0041FE30                                         ; sub_419010+80↑p ...
.text:0041FE30
.text:0041FE30 uMode           = dword ptr  4
.text:0041FE30
.text:0041FE30                 jmp     ds:__imp_SetErrorMode
.text:0041FE30 SetErrorMode    endp
.text:0041FE30
.text:0041FE30 ; ---------------------------------------------------------------------------
.text:0041FE36                 align 10h
.text:0041FE40
.text:0041FE40 ; =============== S U B R O U T I N E =======================================
.text:0041FE40
.text:0041FE40 ; Attributes: thunk
.text:0041FE40
.text:0041FE40 ; BOOL __stdcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.text:0041FE40 BackupWrite     proc near               ; CODE XREF: sub_417F50+F8↑p
.text:0041FE40                                         ; sub_417F50+13A↑p ...
.text:0041FE40
.text:0041FE40 hFile           = dword ptr  4
.text:0041FE40 lpBuffer        = dword ptr  8
.text:0041FE40 nNumberOfBytesToWrite= dword ptr  0Ch
.text:0041FE40 lpNumberOfBytesWritten= dword ptr  10h
.text:0041FE40 bAbort          = dword ptr  14h
.text:0041FE40 bProcessSecurity= dword ptr  18h
.text:0041FE40 lpContext       = dword ptr  1Ch
.text:0041FE40
.text:0041FE40                 jmp     ds:__imp_BackupWrite
.text:0041FE40 BackupWrite     endp
.text:0041FE40
.text:0041FE40 ; ---------------------------------------------------------------------------
.text:0041FE46                 align 10h
.text:0041FE50
.text:0041FE50 ; =============== S U B R O U T I N E =======================================
.text:0041FE50
.text:0041FE50 ; Attributes: thunk
.text:0041FE50
.text:0041FE50 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.text:0041FE50 CopyFileA       proc near               ; CODE XREF: sub_418130+C2↑p
.text:0041FE50
.text:0041FE50 lpExistingFileName= dword ptr  4
.text:0041FE50 lpNewFileName   = dword ptr  8
.text:0041FE50 bFailIfExists   = dword ptr  0Ch
.text:0041FE50
.text:0041FE50                 jmp     ds:__imp_CopyFileA
.text:0041FE50 CopyFileA       endp
.text:0041FE50
.text:0041FE50 ; ---------------------------------------------------------------------------
.text:0041FE56                 align 10h
.text:0041FE60
.text:0041FE60 ; =============== S U B R O U T I N E =======================================
.text:0041FE60
.text:0041FE60 ; Attributes: thunk
.text:0041FE60
.text:0041FE60 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041FE60 CreateDirectoryA proc near              ; CODE XREF: sub_4182D0+22↑p
.text:0041FE60
.text:0041FE60 lpPathName      = dword ptr  4
.text:0041FE60 lpSecurityAttributes= dword ptr  8
.text:0041FE60
.text:0041FE60                 jmp     ds:__imp_CreateDirectoryA
.text:0041FE60 CreateDirectoryA endp
.text:0041FE60
.text:0041FE60 ; ---------------------------------------------------------------------------
.text:0041FE66                 align 10h
.text:0041FE70
.text:0041FE70 ; =============== S U B R O U T I N E =======================================
.text:0041FE70
.text:0041FE70 ; Attributes: thunk
.text:0041FE70
.text:0041FE70 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041FE70 CreateNamedPipeA proc near              ; CODE XREF: sub_418350+8D↑p
.text:0041FE70
.text:0041FE70 lpName          = dword ptr  4
.text:0041FE70 dwOpenMode      = dword ptr  8
.text:0041FE70 dwPipeMode      = dword ptr  0Ch
.text:0041FE70 nMaxInstances   = dword ptr  10h
.text:0041FE70 nOutBufferSize  = dword ptr  14h
.text:0041FE70 nInBufferSize   = dword ptr  18h
.text:0041FE70 nDefaultTimeOut = dword ptr  1Ch
.text:0041FE70 lpSecurityAttributes= dword ptr  20h
.text:0041FE70
.text:0041FE70                 jmp     ds:__imp_CreateNamedPipeA
.text:0041FE70 CreateNamedPipeA endp
.text:0041FE70
.text:0041FE70 ; ---------------------------------------------------------------------------
.text:0041FE76                 align 10h
.text:0041FE80
.text:0041FE80 ; =============== S U B R O U T I N E =======================================
.text:0041FE80
.text:0041FE80 ; Attributes: thunk
.text:0041FE80
.text:0041FE80 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0041FE80 GetModuleFileNameA proc near            ; CODE XREF: sub_4189A0+1C↑p
.text:0041FE80
.text:0041FE80 hModule         = dword ptr  4
.text:0041FE80 lpFilename      = dword ptr  8
.text:0041FE80 nSize           = dword ptr  0Ch
.text:0041FE80
.text:0041FE80                 jmp     ds:__imp_GetModuleFileNameA
.text:0041FE80 GetModuleFileNameA endp
.text:0041FE80
.text:0041FE80 ; ---------------------------------------------------------------------------
.text:0041FE86                 align 10h
.text:0041FE90
.text:0041FE90 ; =============== S U B R O U T I N E =======================================
.text:0041FE90
.text:0041FE90 ; Attributes: thunk
.text:0041FE90
.text:0041FE90 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0041FE90 GetShortPathNameA proc near             ; CODE XREF: .text:00418C26↑p
.text:0041FE90                                         ; .text:00418C50↑p
.text:0041FE90
.text:0041FE90 lpszLongPath    = dword ptr  4
.text:0041FE90 lpszShortPath   = dword ptr  8
.text:0041FE90 cchBuffer       = dword ptr  0Ch
.text:0041FE90
.text:0041FE90                 jmp     ds:__imp_GetShortPathNameA
.text:0041FE90 GetShortPathNameA endp
.text:0041FE90
.text:0041FE90 ; ---------------------------------------------------------------------------
.text:0041FE96                 align 10h
.text:0041FEA0
.text:0041FEA0 ; =============== S U B R O U T I N E =======================================
.text:0041FEA0
.text:0041FEA0 ; Attributes: thunk
.text:0041FEA0
.text:0041FEA0 ; BOOL __stdcall AreFileApisANSI()
.text:0041FEA0 AreFileApisANSI proc near               ; CODE XREF: sub_418E90+89↑p
.text:0041FEA0                                         ; sub_419DF0+E3↑p
.text:0041FEA0                 jmp     ds:__imp_AreFileApisANSI
.text:0041FEA0 AreFileApisANSI endp
.text:0041FEA0
.text:0041FEA0 ; ---------------------------------------------------------------------------
.text:0041FEA6                 align 10h
.text:0041FEB0
.text:0041FEB0 ; =============== S U B R O U T I N E =======================================
.text:0041FEB0
.text:0041FEB0 ; Attributes: thunk
.text:0041FEB0
.text:0041FEB0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0041FEB0 MultiByteToWideChar proc near           ; CODE XREF: sub_418E90+BD↑p
.text:0041FEB0                                         ; sub_419DF0+117↑p
.text:0041FEB0
.text:0041FEB0 CodePage        = dword ptr  4
.text:0041FEB0 dwFlags         = dword ptr  8
.text:0041FEB0 lpMultiByteStr  = dword ptr  0Ch
.text:0041FEB0 cbMultiByte     = dword ptr  10h
.text:0041FEB0 lpWideCharStr   = dword ptr  14h
.text:0041FEB0 cchWideChar     = dword ptr  18h
.text:0041FEB0
.text:0041FEB0                 jmp     ds:__imp_MultiByteToWideChar
.text:0041FEB0 MultiByteToWideChar endp
.text:0041FEB0
.text:0041FEB0 ; ---------------------------------------------------------------------------
.text:0041FEB6                 align 10h
.text:0041FEC0
.text:0041FEC0 ; =============== S U B R O U T I N E =======================================
.text:0041FEC0
.text:0041FEC0 ; Attributes: thunk
.text:0041FEC0
.text:0041FEC0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0041FEC0 lstrcpyA        proc near               ; CODE XREF: sub_418E90+128↑p
.text:0041FEC0
.text:0041FEC0 lpString1       = dword ptr  4
.text:0041FEC0 lpString2       = dword ptr  8
.text:0041FEC0
.text:0041FEC0                 jmp     ds:__imp_lstrcpyA
.text:0041FEC0 lstrcpyA        endp
.text:0041FEC0
.text:0041FEC0 ; ---------------------------------------------------------------------------
.text:0041FEC6                 align 10h
.text:0041FED0
.text:0041FED0 ; =============== S U B R O U T I N E =======================================
.text:0041FED0
.text:0041FED0 ; Attributes: thunk
.text:0041FED0
.text:0041FED0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041FED0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:004193A8↑p
.text:0041FED0                                         ; .text:004193C4↑p ...
.text:0041FED0
.text:0041FED0 nBufferLength   = dword ptr  4
.text:0041FED0 lpBuffer        = dword ptr  8
.text:0041FED0
.text:0041FED0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0041FED0 GetCurrentDirectoryA endp
.text:0041FED0
.text:0041FED0 ; ---------------------------------------------------------------------------
.text:0041FED6                 align 10h
.text:0041FEE0
.text:0041FEE0 ; =============== S U B R O U T I N E =======================================
.text:0041FEE0
.text:0041FEE0 ; Attributes: thunk
.text:0041FEE0
.text:0041FEE0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0041FEE0 DeviceIoControl proc near               ; CODE XREF: .text:0041978C↑p
.text:0041FEE0                                         ; sub_419B50+1E5↑p
.text:0041FEE0
.text:0041FEE0 hDevice         = dword ptr  4
.text:0041FEE0 dwIoControlCode = dword ptr  8
.text:0041FEE0 lpInBuffer      = dword ptr  0Ch
.text:0041FEE0 nInBufferSize   = dword ptr  10h
.text:0041FEE0 lpOutBuffer     = dword ptr  14h
.text:0041FEE0 nOutBufferSize  = dword ptr  18h
.text:0041FEE0 lpBytesReturned = dword ptr  1Ch
.text:0041FEE0 lpOverlapped    = dword ptr  20h
.text:0041FEE0
.text:0041FEE0                 jmp     ds:__imp_DeviceIoControl
.text:0041FEE0 DeviceIoControl endp
.text:0041FEE0
.text:0041FEE0 ; ---------------------------------------------------------------------------
.text:0041FEE6                 align 10h
.text:0041FEF0
.text:0041FEF0 ; =============== S U B R O U T I N E =======================================
.text:0041FEF0
.text:0041FEF0 ; Attributes: thunk
.text:0041FEF0
.text:0041FEF0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0041FEF0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00419AE3↑p
.text:0041FEF0                                         ; sub_419B50+7B↑p ...
.text:0041FEF0
.text:0041FEF0 lpRootPathName  = dword ptr  4
.text:0041FEF0 lpSectorsPerCluster= dword ptr  8
.text:0041FEF0 lpBytesPerSector= dword ptr  0Ch
.text:0041FEF0 lpNumberOfFreeClusters= dword ptr  10h
.text:0041FEF0 lpTotalNumberOfClusters= dword ptr  14h
.text:0041FEF0
.text:0041FEF0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0041FEF0 GetDiskFreeSpaceA endp
.text:0041FEF0
.text:0041FEF0 ; ---------------------------------------------------------------------------
.text:0041FEF6                 align 10h
.text:0041FF00
.text:0041FF00 ; =============== S U B R O U T I N E =======================================
.text:0041FF00
.text:0041FF00 ; Attributes: thunk
.text:0041FF00
.text:0041FF00 ; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
.text:0041FF00 SetFileAttributesA proc near            ; CODE XREF: sub_419DF0+2A↑p
.text:0041FF00                                         ; sub_419DF0+178↑p
.text:0041FF00
.text:0041FF00 lpFileName      = dword ptr  4
.text:0041FF00 dwFileAttributes= dword ptr  8
.text:0041FF00
.text:0041FF00                 jmp     ds:__imp_SetFileAttributesA
.text:0041FF00 SetFileAttributesA endp
.text:0041FF00
.text:0041FF00 ; ---------------------------------------------------------------------------
.text:0041FF06                 align 10h
.text:0041FF10
.text:0041FF10 ; =============== S U B R O U T I N E =======================================
.text:0041FF10
.text:0041FF10 ; Attributes: thunk
.text:0041FF10
.text:0041FF10 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:0041FF10 DeleteFileA     proc near               ; CODE XREF: sub_41A0D0+50↑p
.text:0041FF10
.text:0041FF10 lpFileName      = dword ptr  4
.text:0041FF10
.text:0041FF10                 jmp     ds:__imp_DeleteFileA
.text:0041FF10 DeleteFileA     endp
.text:0041FF10
.text:0041FF10 ; ---------------------------------------------------------------------------
.text:0041FF16                 align 10h
.text:0041FF20
.text:0041FF20 ; =============== S U B R O U T I N E =======================================
.text:0041FF20
.text:0041FF20 ; Attributes: thunk
.text:0041FF20
.text:0041FF20 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:0041FF20 SetEndOfFile    proc near               ; CODE XREF: sub_41A320+53↑p
.text:0041FF20
.text:0041FF20 hFile           = dword ptr  4
.text:0041FF20
.text:0041FF20                 jmp     ds:__imp_SetEndOfFile
.text:0041FF20 SetEndOfFile    endp
.text:0041FF20
.text:0041FF20 ; ---------------------------------------------------------------------------
.text:0041FF26                 align 10h
.text:0041FF30
.text:0041FF30 ; =============== S U B R O U T I N E =======================================
.text:0041FF30
.text:0041FF30 ; Attributes: thunk
.text:0041FF30
.text:0041FF30 ; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:0041FF30 MoveFileA       proc near               ; CODE XREF: sub_41A400+36↑p
.text:0041FF30
.text:0041FF30 lpExistingFileName= dword ptr  4
.text:0041FF30 lpNewFileName   = dword ptr  8
.text:0041FF30
.text:0041FF30                 jmp     ds:__imp_MoveFileA
.text:0041FF30 MoveFileA       endp
.text:0041FF30
.text:0041FF30 ; ---------------------------------------------------------------------------
.text:0041FF36                 align 10h
.text:0041FF40
.text:0041FF40 ; =============== S U B R O U T I N E =======================================
.text:0041FF40
.text:0041FF40 ; Attributes: thunk
.text:0041FF40
.text:0041FF40 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0041FF40 GetSystemInfo   proc near               ; CODE XREF: sub_41A480+3A↑p
.text:0041FF40
.text:0041FF40 lpSystemInfo    = dword ptr  4
.text:0041FF40
.text:0041FF40                 jmp     ds:__imp_GetSystemInfo
.text:0041FF40 GetSystemInfo   endp
.text:0041FF40
.text:0041FF40 ; ---------------------------------------------------------------------------
.text:0041FF46                 align 10h
.text:0041FF50
.text:0041FF50 ; =============== S U B R O U T I N E =======================================
.text:0041FF50
.text:0041FF50 ; Attributes: thunk
.text:0041FF50
.text:0041FF50 ; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
.text:0041FF50 RemoveDirectoryA proc near              ; CODE XREF: sub_41A4D0+12↑p
.text:0041FF50
.text:0041FF50 lpPathName      = dword ptr  4
.text:0041FF50
.text:0041FF50                 jmp     ds:__imp_RemoveDirectoryA
.text:0041FF50 RemoveDirectoryA endp
.text:0041FF50
.text:0041FF50 ; ---------------------------------------------------------------------------
.text:0041FF56                 align 10h
.text:0041FF60
.text:0041FF60 ; =============== S U B R O U T I N E =======================================
.text:0041FF60
.text:0041FF60 ; Attributes: thunk
.text:0041FF60
.text:0041FF60 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:0041FF60 SetCurrentDirectoryA proc near          ; CODE XREF: sub_41A6F0+12↑p
.text:0041FF60
.text:0041FF60 lpPathName      = dword ptr  4
.text:0041FF60
.text:0041FF60                 jmp     ds:__imp_SetCurrentDirectoryA
.text:0041FF60 SetCurrentDirectoryA endp
.text:0041FF60
.text:0041FF60 ; ---------------------------------------------------------------------------
.text:0041FF66                 align 10h
.text:0041FF70
.text:0041FF70 ; =============== S U B R O U T I N E =======================================
.text:0041FF70
.text:0041FF70 ; Attributes: thunk
.text:0041FF70
.text:0041FF70 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0041FF70 GetFullPathNameA proc near              ; CODE XREF: sub_41AD10+45↑p
.text:0041FF70                                         ; sub_41AD10+ED↑p
.text:0041FF70
.text:0041FF70 lpFileName      = dword ptr  4
.text:0041FF70 nBufferLength   = dword ptr  8
.text:0041FF70 lpBuffer        = dword ptr  0Ch
.text:0041FF70 lpFilePart      = dword ptr  10h
.text:0041FF70
.text:0041FF70                 jmp     ds:__imp_GetFullPathNameA
.text:0041FF70 GetFullPathNameA endp
.text:0041FF70
.text:0041FF70 ; ---------------------------------------------------------------------------
.text:0041FF76                 align 10h
.text:0041FF80
.text:0041FF80 ; =============== S U B R O U T I N E =======================================
.text:0041FF80
.text:0041FF80 ; Attributes: thunk
.text:0041FF80
.text:0041FF80 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0041FF80 lstrcmpiA       proc near               ; CODE XREF: .text:0041B2FB↑p
.text:0041FF80                                         ; .text:0041B312↑p ...
.text:0041FF80
.text:0041FF80 lpString1       = dword ptr  4
.text:0041FF80 lpString2       = dword ptr  8
.text:0041FF80
.text:0041FF80                 jmp     ds:__imp_lstrcmpiA
.text:0041FF80 lstrcmpiA       endp
.text:0041FF80
.text:0041FF80 ; ---------------------------------------------------------------------------
.text:0041FF86                 align 10h
.text:0041FF90
.text:0041FF90 ; =============== S U B R O U T I N E =======================================
.text:0041FF90
.text:0041FF90 ; Attributes: thunk
.text:0041FF90
.text:0041FF90 ; DWORD __stdcall GetVersion()
.text:0041FF90 GetVersion      proc near               ; CODE XREF: .text:0041B683↑p
.text:0041FF90                 jmp     ds:__imp_GetVersion
.text:0041FF90 GetVersion      endp
.text:0041FF90
.text:0041FF90 ; ---------------------------------------------------------------------------
.text:0041FF96                 align 10h
.text:0041FFA0
.text:0041FFA0 ; =============== S U B R O U T I N E =======================================
.text:0041FFA0
.text:0041FFA0 ; Attributes: thunk
.text:0041FFA0
.text:0041FFA0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0041FFA0 GetVersionExA   proc near               ; CODE XREF: sub_41B710+32↑p
.text:0041FFA0                                         ; sub_41B710+20B↑p
.text:0041FFA0
.text:0041FFA0 lpVersionInformation= dword ptr  4
.text:0041FFA0
.text:0041FFA0                 jmp     ds:__imp_GetVersionExA
.text:0041FFA0 GetVersionExA   endp
.text:0041FFA0
.text:0041FFA0 ; ---------------------------------------------------------------------------
.text:0041FFA6                 align 10h
.text:0041FFB0
.text:0041FFB0 ; =============== S U B R O U T I N E =======================================
.text:0041FFB0
.text:0041FFB0 ; Attributes: thunk
.text:0041FFB0
.text:0041FFB0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041FFB0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041BDAF↑p
.text:0041FFB0                                         ; .text:0041BDDE↑p ...
.text:0041FFB0
.text:0041FFB0 nBufferLength   = dword ptr  4
.text:0041FFB0 lpBuffer        = dword ptr  8
.text:0041FFB0
.text:0041FFB0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0041FFB0 GetLogicalDriveStringsA endp
.text:0041FFB0
.text:0041FFB0 ; ---------------------------------------------------------------------------
.text:0041FFB6                 align 10h
.text:0041FFC0
.text:0041FFC0 ; =============== S U B R O U T I N E =======================================
.text:0041FFC0
.text:0041FFC0 ; Attributes: thunk
.text:0041FFC0
.text:0041FFC0 ; HANDLE __stdcall GetProcessHeap()
.text:0041FFC0 GetProcessHeap  proc near               ; CODE XREF: .text:0041BDB9↑p
.text:0041FFC0                                         ; sub_41C490+24↑p ...
.text:0041FFC0                 jmp     ds:__imp_GetProcessHeap
.text:0041FFC0 GetProcessHeap  endp
.text:0041FFC0
.text:0041FFC0 ; ---------------------------------------------------------------------------
.text:0041FFC6                 align 10h
.text:0041FFD0
.text:0041FFD0 ; =============== S U B R O U T I N E =======================================
.text:0041FFD0
.text:0041FFD0 ; Attributes: thunk
.text:0041FFD0
.text:0041FFD0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0041FFD0 HeapAlloc       proc near               ; CODE XREF: .text:0041BDCD↑p
.text:0041FFD0                                         ; sub_41C490+38↑p ...
.text:0041FFD0
.text:0041FFD0 hHeap           = dword ptr  4
.text:0041FFD0 dwFlags         = dword ptr  8
.text:0041FFD0 dwBytes         = dword ptr  0Ch
.text:0041FFD0
.text:0041FFD0                 jmp     ds:__imp_HeapAlloc
.text:0041FFD0 HeapAlloc       endp
.text:0041FFD0
.text:0041FFD0 ; ---------------------------------------------------------------------------
.text:0041FFD6                 align 10h
.text:0041FFE0
.text:0041FFE0 ; =============== S U B R O U T I N E =======================================
.text:0041FFE0
.text:0041FFE0 ; Attributes: thunk
.text:0041FFE0
.text:0041FFE0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0041FFE0 HeapFree        proc near               ; CODE XREF: .text:0041C5CD↑p
.text:0041FFE0
.text:0041FFE0 hHeap           = dword ptr  4
.text:0041FFE0 dwFlags         = dword ptr  8
.text:0041FFE0 lpMem           = dword ptr  0Ch
.text:0041FFE0
.text:0041FFE0                 jmp     ds:__imp_HeapFree
.text:0041FFE0 HeapFree        endp
.text:0041FFE0
.text:0041FFE0 ; ---------------------------------------------------------------------------
.text:0041FFE6                 align 10h
.text:0041FFF0
.text:0041FFF0 ; =============== S U B R O U T I N E =======================================
.text:0041FFF0
.text:0041FFF0 ; Attributes: thunk
.text:0041FFF0
.text:0041FFF0 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:0041FFF0 FormatMessageA  proc near               ; CODE XREF: .text:0041C6AA↑p
.text:0041FFF0                                         ; .text:0041C722↑p ...
.text:0041FFF0
.text:0041FFF0 dwFlags         = dword ptr  4
.text:0041FFF0 lpSource        = dword ptr  8
.text:0041FFF0 dwMessageId     = dword ptr  0Ch
.text:0041FFF0 dwLanguageId    = dword ptr  10h
.text:0041FFF0 lpBuffer        = dword ptr  14h
.text:0041FFF0 nSize           = dword ptr  18h
.text:0041FFF0 Arguments       = dword ptr  1Ch
.text:0041FFF0
.text:0041FFF0                 jmp     ds:__imp_FormatMessageA
.text:0041FFF0 FormatMessageA  endp
.text:0041FFF0
.text:0041FFF0 ; ---------------------------------------------------------------------------
.text:0041FFF6                 align 10h
.text:00420000
.text:00420000 ; =============== S U B R O U T I N E =======================================
.text:00420000
.text:00420000 ; Attributes: thunk
.text:00420000
.text:00420000 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:00420000 LocalFree       proc near               ; CODE XREF: .text:0041C75A↑p
.text:00420000                                         ; sub_41C770+7D↑p ...
.text:00420000
.text:00420000 hMem            = dword ptr  4
.text:00420000
.text:00420000                 jmp     ds:__imp_LocalFree
.text:00420000 LocalFree       endp
.text:00420000
.text:00420000 ; ---------------------------------------------------------------------------
.text:00420006                 align 10h
.text:00420010
.text:00420010 ; =============== S U B R O U T I N E =======================================
.text:00420010
.text:00420010 ; Attributes: thunk
.text:00420010
.text:00420010 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:00420010 SetLastError    proc near               ; CODE XREF: .text:0041C868↑p
.text:00420010
.text:00420010 dwErrCode       = dword ptr  4
.text:00420010
.text:00420010                 jmp     ds:__imp_SetLastError
.text:00420010 SetLastError    endp
.text:00420010
.text:00420010 ; ---------------------------------------------------------------------------
.text:00420016                 align 10h
.text:00420020
.text:00420020 ; =============== S U B R O U T I N E =======================================
.text:00420020
.text:00420020 ; Attributes: thunk
.text:00420020
.text:00420020 ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.text:00420020 SetFileTime     proc near               ; CODE XREF: sub_41C950+93↑p
.text:00420020
.text:00420020 hFile           = dword ptr  4
.text:00420020 lpCreationTime  = dword ptr  8
.text:00420020 lpLastAccessTime= dword ptr  0Ch
.text:00420020 lpLastWriteTime = dword ptr  10h
.text:00420020
.text:00420020                 jmp     ds:__imp_SetFileTime
.text:00420020 SetFileTime     endp
.text:00420020
.text:00420020 ; ---------------------------------------------------------------------------
.text:00420026                 align 10h
.text:00420030
.text:00420030 ; =============== S U B R O U T I N E =======================================
.text:00420030
.text:00420030 ; Attributes: thunk
.text:00420030
.text:00420030 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00420030 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_41C950+C7↑p
.text:00420030                                         ; sub_41DA70+4F↑p
.text:00420030
.text:00420030 lpSystemTimeAsFileTime= dword ptr  4
.text:00420030
.text:00420030                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00420030 GetSystemTimeAsFileTime endp
.text:00420030
.text:00420030 ; ---------------------------------------------------------------------------
.text:00420036                 align 10h
.text:00420040
.text:00420040 ; =============== S U B R O U T I N E =======================================
.text:00420040
.text:00420040 ; Attributes: thunk
.text:00420040
.text:00420040 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00420040 UnlockFile      proc near               ; CODE XREF: sub_41D070+40↑p
.text:00420040
.text:00420040 hFile           = dword ptr  4
.text:00420040 dwFileOffsetLow = dword ptr  8
.text:00420040 dwFileOffsetHigh= dword ptr  0Ch
.text:00420040 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00420040 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00420040
.text:00420040                 jmp     ds:__imp_UnlockFile
.text:00420040 UnlockFile      endp
.text:00420040
.text:00420040 ; ---------------------------------------------------------------------------
.text:00420046                 align 10h
.text:00420050
.text:00420050 ; =============== S U B R O U T I N E =======================================
.text:00420050
.text:00420050 ; Attributes: thunk
.text:00420050
.text:00420050 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00420050 GetTimeZoneInformation proc near        ; CODE XREF: sub_41DA70+22↑p
.text:00420050
.text:00420050 lpTimeZoneInformation= dword ptr  4
.text:00420050
.text:00420050                 jmp     ds:__imp_GetTimeZoneInformation
.text:00420050 GetTimeZoneInformation endp
.text:00420050
.text:00420050 ; ---------------------------------------------------------------------------
.text:00420056                 align 10h
.text:00420060
.text:00420060 ; =============== S U B R O U T I N E =======================================
.text:00420060
.text:00420060 ; Attributes: thunk
.text:00420060
.text:00420060 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00420060 RegOpenKeyExA   proc near               ; CODE XREF: .text:0041B281↑p
.text:00420060
.text:00420060 hKey            = dword ptr  4
.text:00420060 lpSubKey        = dword ptr  8
.text:00420060 ulOptions       = dword ptr  0Ch
.text:00420060 samDesired      = dword ptr  10h
.text:00420060 phkResult       = dword ptr  14h
.text:00420060
.text:00420060                 jmp     ds:__imp_RegOpenKeyExA
.text:00420060 RegOpenKeyExA   endp
.text:00420060
.text:00420060 ; ---------------------------------------------------------------------------
.text:00420066                 align 10h
.text:00420070
.text:00420070 ; =============== S U B R O U T I N E =======================================
.text:00420070
.text:00420070 ; Attributes: thunk
.text:00420070
.text:00420070 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00420070 RegQueryValueExA proc near              ; CODE XREF: .text:0041B2C4↑p
.text:00420070
.text:00420070 hKey            = dword ptr  4
.text:00420070 lpValueName     = dword ptr  8
.text:00420070 lpReserved      = dword ptr  0Ch
.text:00420070 lpType          = dword ptr  10h
.text:00420070 lpData          = dword ptr  14h
.text:00420070 lpcbData        = dword ptr  18h
.text:00420070
.text:00420070                 jmp     ds:__imp_RegQueryValueExA
.text:00420070 RegQueryValueExA endp
.text:00420070
.text:00420070 ; ---------------------------------------------------------------------------
.text:00420076                 align 10h
.text:00420080
.text:00420080 ; =============== S U B R O U T I N E =======================================
.text:00420080
.text:00420080 ; Attributes: thunk
.text:00420080
.text:00420080 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00420080 RegCloseKey     proc near               ; CODE XREF: .text:0041B2E8↑p
.text:00420080
.text:00420080 hKey            = dword ptr  4
.text:00420080
.text:00420080                 jmp     ds:__imp_RegCloseKey
.text:00420080 RegCloseKey     endp
.text:00420080
.text:00420080 ; ---------------------------------------------------------------------------
.text:00420086                 db 2 dup(90h)
.text:00420088                 dd 2 dup(0)
.text:00420090                 dd 21400h, 0
.text:00420098                 dd 0C0h, 46000000h
.text:004200A0 ; const IID rclsid
.text:004200A0 rclsid          dd 21401h               ; Data1
.text:004200A0                                         ; DATA XREF: sub_418E90+4B↑o
.text:004200A0                                         ; sub_419DF0+72↑o
.text:004200A0                 dw 0                    ; Data2
.text:004200A0                 dw 0                    ; Data3
.text:004200A0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004200B0                 dd 214A0h, 0
.text:004200B8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004200C8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004200D8                 dd 0C0h, 46000000h, 214D1h, 0
.text:004200E8                 dd 0C0h, 46000000h, 214D2h, 0
.text:004200F8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00420108                 dd 0C0h, 46000000h, 214E2h, 0
.text:00420118                 dd 0C0h, 46000000h, 214E3h, 0
.text:00420128                 dd 0C0h, 46000000h, 214E4h, 0
.text:00420138                 dd 0C0h, 46000000h, 21500h, 0
.text:00420148                 dd 0C0h, 46000000h, 214E5h, 0
.text:00420158                 dd 0C0h, 46000000h, 214E6h, 0
.text:00420168                 dd 0C0h, 46000000h, 214E8h, 0
.text:00420178                 dd 0C0h, 46000000h, 214E9h, 0
.text:00420188                 dd 0C0h, 46000000h, 214EAh, 0
.text:00420198                 dd 0C0h, 46000000h, 214EBh, 0
.text:004201A8                 dd 0C0h, 46000000h
.text:004201B0 ; const IID riid
.text:004201B0 riid            dd 214EEh               ; Data1
.text:004201B0                                         ; DATA XREF: sub_418E90+2B↑o
.text:004201B0                                         ; sub_419DF0+52↑o
.text:004201B0                 dw 0                    ; Data2
.text:004201B0                 dw 0                    ; Data3
.text:004201B0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004201C0                 dd 214EFh, 0
.text:004201C8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004201D8                 dd 0C0h, 46000000h, 214F1h, 0
.text:004201E8                 dd 0C0h, 46000000h, 214F2h, 0
.text:004201F8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00420208                 dd 0C0h, 46000000h, 214F4h, 0
.text:00420218                 dd 0C0h, 46000000h, 214F5h, 0
.text:00420228                 dd 0C0h, 46000000h, 214F6h, 0
.text:00420238                 dd 0C0h, 46000000h, 214F7h, 0
.text:00420248                 dd 0C0h, 46000000h, 214F8h, 0
.text:00420258                 dd 0C0h, 46000000h, 214F9h, 0
.text:00420268                 dd 0C0h, 46000000h, 214FAh, 0
.text:00420278                 dd 0C0h, 46000000h, 214FBh, 0
.text:00420288                 dd 0C0h, 46000000h, 214FCh, 0
.text:00420298                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00420298                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00420298                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00420298                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00420298                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00420298                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00420298                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00420298                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00420298                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00420298                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00420368                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00420378                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00420388                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00420398                 dd 0C0h, 46000000h, 2DF09h, 0
.text:004203A8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:004203A8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:004203A8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:004203A8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:004203A8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:004203A8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:004203A8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00420430 dword_420430    dd 0FFFFFFFFh           ; DATA XREF: .text:0041F4B9↑r
.text:00420430                                         ; .text:loc_41F4E0↑r ...
.text:00420434 dword_420434    dd 0                    ; DATA XREF: .text:loc_41F4EC↑r
.text:00420434                                         ; sub_41F510:loc_41F55D↑r
.text:00420438                 dd 0FFFFFFFFh
.text:0042043C dword_42043C    dd 71h dup(0)           ; DATA XREF: .data:off_421114↓o
.text:00420600                 dd 280h dup(?)
.text:00420600 _text           ends
.text:00420600
.data:00421000 ; Section 2. (virtual address 00021000)
.data:00421000 ; Virtual size                  : 00000130 (    304.)
.data:00421000 ; Section size in file          : 00000200 (    512.)
.data:00421000 ; Offset to raw data for section: 0001FA00
.data:00421000 ; Flags C0000040: Data Readable Writable
.data:00421000 ; Alignment     : default
.data:00421000 ; ===========================================================================
.data:00421000
.data:00421000 ; Segment type: Pure data
.data:00421000 ; Segment permissions: Read/Write
.data:00421000 _data           segment para public 'DATA' use32
.data:00421000                 assume cs:_data
.data:00421000                 ;org 421000h
.data:00421000 dword_421000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00421000                                         ; sub_401080+CC↑r
.data:00421004 dword_421004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00421004                                         ; sub_401080+D4↑r
.data:00421008                 align 10h
.data:00421010 dword_421010    dd 2                    ; DATA XREF: sub_406340+F6↑r
.data:00421010                                         ; sub_406340+13C↑w ...
.data:00421014                 align 10h
.data:00421020 dword_421020    dd 1                    ; DATA XREF: sub_401EE0:loc_4024CC↑r
.data:00421020                                         ; sub_40A260+3↑r ...
.data:00421024 dword_421024    dd 1                    ; DATA XREF: sub_40A260+11↑r
.data:00421024                                         ; .text:0040A301↑r
.data:00421028 dword_421028    dd 3Fh                  ; DATA XREF: sub_40A260+7D↑w
.data:00421028                                         ; .text:0040A36D↑w
.data:0042102C                 align 10h
.data:00421030 ; int off_421030
.data:00421030 off_421030      dd offset sub_40AA30    ; DATA XREF: sub_401EE0+597↑r
.data:00421030                                         ; .text:0040ABF4↑r ...
.data:00421034                 align 10h
.data:00421040 ; char *Src
.data:00421040 Src             dd offset sub_40AA50    ; DATA XREF: sub_401EE0+67B↑w
.data:00421040                                         ; sub_40AA60+13↑r ...
.data:00421044                 align 10h
.data:00421050 ; char *Buffer
.data:00421050 Buffer          dd offset aCopyrightC2005
.data:00421050                                         ; DATA XREF: sub_40B610+DC↑r
.data:00421050                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00421054                 align 10h
.data:00421060 dword_421060    dd 1                    ; DATA XREF: sub_40E3F0+22↑r
.data:00421060                                         ; sub_40E3F0+65↑r ...
.data:00421064 dword_421064    dd 100h                 ; DATA XREF: sub_40E3F0+3F↑o
.data:00421064                                         ; sub_40E3F0+1A2↑r ...
.data:00421068 off_421068      dd offset unk_4222D0    ; DATA XREF: sub_40E3F0+1AA↑r
.data:0042106C ; void *off_42106C
.data:0042106C off_42106C      dd offset dword_421064  ; DATA XREF: sub_40E3F0+39↑r
.data:0042106C                                         ; sub_40E3F0+60↑w ...
.data:00421070 ; int dword_421070
.data:00421070 dword_421070    dd 1                    ; DATA XREF: sub_40B990+6D↑r
.data:00421070                                         ; sub_40B990+9A↑r ...
.data:00421074                 align 10h
.data:00421080 dword_421080    dd 0FA0h                ; DATA XREF: sub_40F200:loc_41027B↑r
.data:00421080                                         ; sub_40F200:loc_410429↑r ...
.data:00421084                 align 10h
.data:00421090 dword_421090    dd 200h                 ; DATA XREF: sub_416750+2ED↑r
.data:00421090                                         ; sub_416750+2F8↑r ...
.data:00421094 ; char *off_421094
.data:00421094 off_421094      dd offset aComExeBatCmd ; DATA XREF: sub_416C20+3D3↑r
.data:00421094                                         ; sub_416C20+400↑r ...
.data:00421094                                         ; ".com;.exe;.bat;.cmd"
.data:00421098                 align 10h
.data:004210A0 byte_4210A0     db 41h                  ; DATA XREF: sub_419220+6B↑w
.data:004210A0                                         ; sub_419220:loc_419334↑r
.data:004210A1                 align 10h
.data:004210B0 dword_4210B0    dd 1                    ; DATA XREF: .text:loc_41B137↑r
.data:004210B0                                         ; sub_41B710+202↑w
.data:004210B4                 align 10h
.data:004210C0 off_4210C0      dd offset aNotset       ; DATA XREF: .text:0041B98A↑r
.data:004210C0                                         ; .text:0041C5D2↑r
.data:004210C0                                         ; "notset"
.data:004210C4 off_4210C4      dd offset aNotset       ; DATA XREF: .text:0041B9A2↑r
.data:004210C4                                         ; .text:0041B9C4↑r ...
.data:004210C4                                         ; "notset"
.data:004210C8                 align 10h
.data:004210D0 off_4210D0      dd offset sub_41DF40    ; DATA XREF: sub_41DB60:loc_41DBE0↑r
.data:004210D0                                         ; .text:loc_41DC80↑r ...
.data:004210D4 ; int Code
.data:004210D4 Code            dd 1                    ; DATA XREF: sub_41DF40+1C↑r
.data:004210D8                 align 10h
.data:004210E0 dword_4210E0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004210E4                 align 10h
.data:004210F0 ; int Mode
.data:004210F0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004210F0                                         ; sub_401080+80↑r ...
.data:004210F4                 align 10h
.data:00421100 dword_421100    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00421100                                         ; sub_401080+BA↑r
.data:00421104                 align 10h
.data:00421110 dword_421110    dd 0                    ; DATA XREF: sub_41F510+9↑r
.data:00421110                                         ; sub_41F510+1D↑w
.data:00421114 off_421114      dd offset dword_42043C  ; DATA XREF: sub_41F480+6↑r
.data:00421114                                         ; sub_41F480+17↑r ...
.data:00421118                 align 1000h
.data:00421118 _data           ends
.data:00421118
.bss:00422000 ; Section 3. (virtual address 00022000)
.bss:00422000 ; Virtual size                  : 000009F0 (   2544.)
.bss:00422000 ; Section size in file          : 00000000 (      0.)
.bss:00422000 ; Offset to raw data for section: 00000000
.bss:00422000 ; Flags C0000080: Bss Readable Writable
.bss:00422000 ; Alignment     : default
.bss:00422000 ; ===========================================================================
.bss:00422000
.bss:00422000 ; Segment type: Uninitialized
.bss:00422000 ; Segment permissions: Read/Write
.bss:00422000 _bss            segment para public 'BSS' use32
.bss:00422000                 assume cs:_bss
.bss:00422000                 ;org 422000h
.bss:00422000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00422000 byte_422000     db ?                    ; DATA XREF: sub_401EE0+583↑w
.bss:00422000                                         ; sub_401EE0+6E5↑r ...
.bss:00422001                 align 10h
.bss:00422010 ; char *dword_422010
.bss:00422010 dword_422010    dd ?                    ; DATA XREF: sub_403270+101F↑r
.bss:00422010                                         ; sub_403270+11A8↑r ...
.bss:00422014                 align 10h
.bss:00422020 ; char *dword_422020
.bss:00422020 dword_422020    dd ?                    ; DATA XREF: sub_403270+1009↑r
.bss:00422020                                         ; sub_403270+1192↑r ...
.bss:00422024                 align 10h
.bss:00422030 dword_422030    dd ?                    ; DATA XREF: sub_405F20+2F↑r
.bss:00422030                                         ; sub_405F90+64↑r ...
.bss:00422034                 align 10h
.bss:00422040 ; char *Block
.bss:00422040 Block           dd ?                    ; DATA XREF: sub_4076F0+3A↑r
.bss:00422040                                         ; sub_4076F0+63↑r ...
.bss:00422044                 align 10h
.bss:00422050 dword_422050    dd ?                    ; DATA XREF: sub_4076F0+25↑r
.bss:00422050                                         ; sub_4076F0+C4↑w
.bss:00422054                 align 10h
.bss:00422060 dword_422060    dd ?                    ; DATA XREF: sub_4076F0+100↑o
.bss:00422060                                         ; sub_4076F0+12F↑o ...
.bss:00422064 byte_422064     db ?                    ; DATA XREF: sub_4076F0+150↑w
.bss:00422065                 db    ? ;
.bss:00422066                 db    ? ;
.bss:00422067                 db    ? ;
.bss:00422068                 db    ? ;
.bss:00422069                 db    ? ;
.bss:0042206A                 db    ? ;
.bss:0042206B                 db    ? ;
.bss:0042206C                 db    ? ;
.bss:0042206D                 db    ? ;
.bss:0042206E                 db    ? ;
.bss:0042206F                 db    ? ;
.bss:00422070                 db    ? ;
.bss:00422071                 db    ? ;
.bss:00422072                 db    ? ;
.bss:00422073                 db    ? ;
.bss:00422074                 db    ? ;
.bss:00422075                 db    ? ;
.bss:00422076                 db    ? ;
.bss:00422077                 db    ? ;
.bss:00422078                 db    ? ;
.bss:00422079                 db    ? ;
.bss:0042207A                 db    ? ;
.bss:0042207B                 db    ? ;
.bss:0042207C                 db    ? ;
.bss:0042207D                 db    ? ;
.bss:0042207E                 db    ? ;
.bss:0042207F                 db    ? ;
.bss:00422080                 db    ? ;
.bss:00422081                 db    ? ;
.bss:00422082                 db    ? ;
.bss:00422083                 db    ? ;
.bss:00422084                 db    ? ;
.bss:00422085                 db    ? ;
.bss:00422086                 db    ? ;
.bss:00422087                 db    ? ;
.bss:00422088                 db    ? ;
.bss:00422089                 db    ? ;
.bss:0042208A                 db    ? ;
.bss:0042208B                 db    ? ;
.bss:0042208C                 db    ? ;
.bss:0042208D                 db    ? ;
.bss:0042208E                 db    ? ;
.bss:0042208F                 db    ? ;
.bss:00422090                 db    ? ;
.bss:00422091                 db    ? ;
.bss:00422092                 db    ? ;
.bss:00422093                 db    ? ;
.bss:00422094                 db    ? ;
.bss:00422095                 db    ? ;
.bss:00422096                 db    ? ;
.bss:00422097                 db    ? ;
.bss:00422098                 db    ? ;
.bss:00422099                 db    ? ;
.bss:0042209A                 db    ? ;
.bss:0042209B                 db    ? ;
.bss:0042209C                 db    ? ;
.bss:0042209D                 db    ? ;
.bss:0042209E                 db    ? ;
.bss:0042209F                 db    ? ;
.bss:004220A0                 db    ? ;
.bss:004220A1                 db    ? ;
.bss:004220A2                 db    ? ;
.bss:004220A3                 db    ? ;
.bss:004220A4                 db    ? ;
.bss:004220A5                 db    ? ;
.bss:004220A6                 db    ? ;
.bss:004220A7                 db    ? ;
.bss:004220A8                 db    ? ;
.bss:004220A9                 db    ? ;
.bss:004220AA                 db    ? ;
.bss:004220AB                 db    ? ;
.bss:004220AC                 db    ? ;
.bss:004220AD                 db    ? ;
.bss:004220AE                 db    ? ;
.bss:004220AF                 db    ? ;
.bss:004220B0                 db    ? ;
.bss:004220B1                 db    ? ;
.bss:004220B2                 db    ? ;
.bss:004220B3                 db    ? ;
.bss:004220B4                 db    ? ;
.bss:004220B5                 db    ? ;
.bss:004220B6                 db    ? ;
.bss:004220B7                 db    ? ;
.bss:004220B8                 db    ? ;
.bss:004220B9                 db    ? ;
.bss:004220BA                 db    ? ;
.bss:004220BB                 db    ? ;
.bss:004220BC                 db    ? ;
.bss:004220BD                 db    ? ;
.bss:004220BE                 db    ? ;
.bss:004220BF                 db    ? ;
.bss:004220C0                 db    ? ;
.bss:004220C1                 db    ? ;
.bss:004220C2                 db    ? ;
.bss:004220C3                 db    ? ;
.bss:004220C4                 db    ? ;
.bss:004220C5                 db    ? ;
.bss:004220C6                 db    ? ;
.bss:004220C7                 db    ? ;
.bss:004220C8                 db    ? ;
.bss:004220C9                 db    ? ;
.bss:004220CA                 db    ? ;
.bss:004220CB                 db    ? ;
.bss:004220CC                 db    ? ;
.bss:004220CD                 db    ? ;
.bss:004220CE                 db    ? ;
.bss:004220CF                 db    ? ;
.bss:004220D0                 db    ? ;
.bss:004220D1                 db    ? ;
.bss:004220D2                 db    ? ;
.bss:004220D3                 db    ? ;
.bss:004220D4                 db    ? ;
.bss:004220D5                 db    ? ;
.bss:004220D6                 db    ? ;
.bss:004220D7                 db    ? ;
.bss:004220D8                 db    ? ;
.bss:004220D9                 db    ? ;
.bss:004220DA                 db    ? ;
.bss:004220DB                 db    ? ;
.bss:004220DC                 db    ? ;
.bss:004220DD                 db    ? ;
.bss:004220DE                 db    ? ;
.bss:004220DF                 db    ? ;
.bss:004220E0                 db    ? ;
.bss:004220E1                 db    ? ;
.bss:004220E2                 db    ? ;
.bss:004220E3                 db    ? ;
.bss:004220E4                 db    ? ;
.bss:004220E5                 db    ? ;
.bss:004220E6                 db    ? ;
.bss:004220E7                 db    ? ;
.bss:004220E8                 db    ? ;
.bss:004220E9                 db    ? ;
.bss:004220EA                 db    ? ;
.bss:004220EB                 db    ? ;
.bss:004220EC                 db    ? ;
.bss:004220ED                 db    ? ;
.bss:004220EE                 db    ? ;
.bss:004220EF                 db    ? ;
.bss:004220F0                 db    ? ;
.bss:004220F1                 db    ? ;
.bss:004220F2                 db    ? ;
.bss:004220F3                 db    ? ;
.bss:004220F4                 db    ? ;
.bss:004220F5                 db    ? ;
.bss:004220F6                 db    ? ;
.bss:004220F7                 db    ? ;
.bss:004220F8                 db    ? ;
.bss:004220F9                 db    ? ;
.bss:004220FA                 db    ? ;
.bss:004220FB                 db    ? ;
.bss:004220FC                 db    ? ;
.bss:004220FD                 db    ? ;
.bss:004220FE                 db    ? ;
.bss:004220FF                 db    ? ;
.bss:00422100                 db    ? ;
.bss:00422101                 db    ? ;
.bss:00422102                 db    ? ;
.bss:00422103                 db    ? ;
.bss:00422104                 db    ? ;
.bss:00422105                 db    ? ;
.bss:00422106                 db    ? ;
.bss:00422107                 db    ? ;
.bss:00422108                 db    ? ;
.bss:00422109                 db    ? ;
.bss:0042210A                 db    ? ;
.bss:0042210B                 db    ? ;
.bss:0042210C                 db    ? ;
.bss:0042210D                 db    ? ;
.bss:0042210E                 db    ? ;
.bss:0042210F                 db    ? ;
.bss:00422110                 db    ? ;
.bss:00422111                 db    ? ;
.bss:00422112                 db    ? ;
.bss:00422113                 db    ? ;
.bss:00422114                 db    ? ;
.bss:00422115                 db    ? ;
.bss:00422116                 db    ? ;
.bss:00422117                 db    ? ;
.bss:00422118                 db    ? ;
.bss:00422119                 db    ? ;
.bss:0042211A                 db    ? ;
.bss:0042211B                 db    ? ;
.bss:0042211C                 db    ? ;
.bss:0042211D                 db    ? ;
.bss:0042211E                 db    ? ;
.bss:0042211F                 db    ? ;
.bss:00422120                 db    ? ;
.bss:00422121                 db    ? ;
.bss:00422122                 db    ? ;
.bss:00422123                 db    ? ;
.bss:00422124                 db    ? ;
.bss:00422125                 db    ? ;
.bss:00422126                 db    ? ;
.bss:00422127                 db    ? ;
.bss:00422128                 db    ? ;
.bss:00422129                 db    ? ;
.bss:0042212A                 db    ? ;
.bss:0042212B                 db    ? ;
.bss:0042212C                 db    ? ;
.bss:0042212D                 db    ? ;
.bss:0042212E                 db    ? ;
.bss:0042212F                 db    ? ;
.bss:00422130                 db    ? ;
.bss:00422131                 db    ? ;
.bss:00422132                 db    ? ;
.bss:00422133                 db    ? ;
.bss:00422134                 db    ? ;
.bss:00422135                 db    ? ;
.bss:00422136                 db    ? ;
.bss:00422137                 db    ? ;
.bss:00422138                 db    ? ;
.bss:00422139                 db    ? ;
.bss:0042213A                 db    ? ;
.bss:0042213B                 db    ? ;
.bss:0042213C                 db    ? ;
.bss:0042213D                 db    ? ;
.bss:0042213E                 db    ? ;
.bss:0042213F                 db    ? ;
.bss:00422140                 db    ? ;
.bss:00422141                 db    ? ;
.bss:00422142                 db    ? ;
.bss:00422143                 db    ? ;
.bss:00422144                 db    ? ;
.bss:00422145                 db    ? ;
.bss:00422146                 db    ? ;
.bss:00422147                 db    ? ;
.bss:00422148                 db    ? ;
.bss:00422149                 db    ? ;
.bss:0042214A                 db    ? ;
.bss:0042214B                 db    ? ;
.bss:0042214C                 db    ? ;
.bss:0042214D                 db    ? ;
.bss:0042214E                 db    ? ;
.bss:0042214F                 db    ? ;
.bss:00422150                 db    ? ;
.bss:00422151                 db    ? ;
.bss:00422152                 db    ? ;
.bss:00422153                 db    ? ;
.bss:00422154                 db    ? ;
.bss:00422155                 db    ? ;
.bss:00422156                 db    ? ;
.bss:00422157                 db    ? ;
.bss:00422158                 db    ? ;
.bss:00422159                 db    ? ;
.bss:0042215A                 db    ? ;
.bss:0042215B                 db    ? ;
.bss:0042215C                 db    ? ;
.bss:0042215D                 db    ? ;
.bss:0042215E                 db    ? ;
.bss:0042215F                 db    ? ;
.bss:00422160                 db    ? ;
.bss:00422161                 db    ? ;
.bss:00422162                 db    ? ;
.bss:00422163                 db    ? ;
.bss:00422164                 db    ? ;
.bss:00422165                 db    ? ;
.bss:00422166                 db    ? ;
.bss:00422167                 db    ? ;
.bss:00422168                 db    ? ;
.bss:00422169                 db    ? ;
.bss:0042216A                 db    ? ;
.bss:0042216B                 db    ? ;
.bss:0042216C                 db    ? ;
.bss:0042216D                 db    ? ;
.bss:0042216E                 db    ? ;
.bss:0042216F                 db    ? ;
.bss:00422170                 db    ? ;
.bss:00422171                 db    ? ;
.bss:00422172                 db    ? ;
.bss:00422173                 db    ? ;
.bss:00422174                 db    ? ;
.bss:00422175                 db    ? ;
.bss:00422176                 db    ? ;
.bss:00422177                 db    ? ;
.bss:00422178                 db    ? ;
.bss:00422179                 db    ? ;
.bss:0042217A                 db    ? ;
.bss:0042217B                 db    ? ;
.bss:0042217C                 db    ? ;
.bss:0042217D                 db    ? ;
.bss:0042217E                 db    ? ;
.bss:0042217F                 db    ? ;
.bss:00422180                 db    ? ;
.bss:00422181                 db    ? ;
.bss:00422182                 db    ? ;
.bss:00422183                 db    ? ;
.bss:00422184                 db    ? ;
.bss:00422185                 db    ? ;
.bss:00422186                 db    ? ;
.bss:00422187                 db    ? ;
.bss:00422188                 db    ? ;
.bss:00422189                 db    ? ;
.bss:0042218A                 db    ? ;
.bss:0042218B                 db    ? ;
.bss:0042218C                 db    ? ;
.bss:0042218D                 db    ? ;
.bss:0042218E                 db    ? ;
.bss:0042218F                 db    ? ;
.bss:00422190                 db    ? ;
.bss:00422191                 db    ? ;
.bss:00422192                 db    ? ;
.bss:00422193                 db    ? ;
.bss:00422194                 db    ? ;
.bss:00422195                 db    ? ;
.bss:00422196                 db    ? ;
.bss:00422197                 db    ? ;
.bss:00422198                 db    ? ;
.bss:00422199                 db    ? ;
.bss:0042219A                 db    ? ;
.bss:0042219B                 db    ? ;
.bss:0042219C                 db    ? ;
.bss:0042219D                 db    ? ;
.bss:0042219E                 db    ? ;
.bss:0042219F                 db    ? ;
.bss:004221A0                 db    ? ;
.bss:004221A1                 db    ? ;
.bss:004221A2                 db    ? ;
.bss:004221A3                 db    ? ;
.bss:004221A4                 db    ? ;
.bss:004221A5                 db    ? ;
.bss:004221A6                 db    ? ;
.bss:004221A7                 db    ? ;
.bss:004221A8                 db    ? ;
.bss:004221A9                 db    ? ;
.bss:004221AA                 db    ? ;
.bss:004221AB                 db    ? ;
.bss:004221AC                 db    ? ;
.bss:004221AD                 db    ? ;
.bss:004221AE                 db    ? ;
.bss:004221AF                 db    ? ;
.bss:004221B0                 db    ? ;
.bss:004221B1                 db    ? ;
.bss:004221B2                 db    ? ;
.bss:004221B3                 db    ? ;
.bss:004221B4                 db    ? ;
.bss:004221B5                 db    ? ;
.bss:004221B6                 db    ? ;
.bss:004221B7                 db    ? ;
.bss:004221B8                 db    ? ;
.bss:004221B9                 db    ? ;
.bss:004221BA                 db    ? ;
.bss:004221BB                 db    ? ;
.bss:004221BC                 db    ? ;
.bss:004221BD                 db    ? ;
.bss:004221BE                 db    ? ;
.bss:004221BF                 db    ? ;
.bss:004221C0                 db    ? ;
.bss:004221C1                 db    ? ;
.bss:004221C2                 db    ? ;
.bss:004221C3                 db    ? ;
.bss:004221C4                 db    ? ;
.bss:004221C5                 db    ? ;
.bss:004221C6                 db    ? ;
.bss:004221C7                 db    ? ;
.bss:004221C8                 db    ? ;
.bss:004221C9                 db    ? ;
.bss:004221CA                 db    ? ;
.bss:004221CB                 db    ? ;
.bss:004221CC                 db    ? ;
.bss:004221CD                 db    ? ;
.bss:004221CE                 db    ? ;
.bss:004221CF                 db    ? ;
.bss:004221D0                 db    ? ;
.bss:004221D1                 db    ? ;
.bss:004221D2                 db    ? ;
.bss:004221D3                 db    ? ;
.bss:004221D4                 db    ? ;
.bss:004221D5                 db    ? ;
.bss:004221D6                 db    ? ;
.bss:004221D7                 db    ? ;
.bss:004221D8                 db    ? ;
.bss:004221D9                 db    ? ;
.bss:004221DA                 db    ? ;
.bss:004221DB                 db    ? ;
.bss:004221DC                 db    ? ;
.bss:004221DD                 db    ? ;
.bss:004221DE                 db    ? ;
.bss:004221DF                 db    ? ;
.bss:004221E0                 db    ? ;
.bss:004221E1                 db    ? ;
.bss:004221E2                 db    ? ;
.bss:004221E3                 db    ? ;
.bss:004221E4                 db    ? ;
.bss:004221E5                 db    ? ;
.bss:004221E6                 db    ? ;
.bss:004221E7                 db    ? ;
.bss:004221E8                 db    ? ;
.bss:004221E9                 db    ? ;
.bss:004221EA                 db    ? ;
.bss:004221EB                 db    ? ;
.bss:004221EC                 db    ? ;
.bss:004221ED                 db    ? ;
.bss:004221EE                 db    ? ;
.bss:004221EF                 db    ? ;
.bss:004221F0                 db    ? ;
.bss:004221F1                 db    ? ;
.bss:004221F2                 db    ? ;
.bss:004221F3                 db    ? ;
.bss:004221F4                 db    ? ;
.bss:004221F5                 db    ? ;
.bss:004221F6                 db    ? ;
.bss:004221F7                 db    ? ;
.bss:004221F8                 db    ? ;
.bss:004221F9                 db    ? ;
.bss:004221FA                 db    ? ;
.bss:004221FB                 db    ? ;
.bss:004221FC                 db    ? ;
.bss:004221FD                 db    ? ;
.bss:004221FE                 db    ? ;
.bss:004221FF                 db    ? ;
.bss:00422200                 db    ? ;
.bss:00422201                 db    ? ;
.bss:00422202                 db    ? ;
.bss:00422203                 db    ? ;
.bss:00422204                 db    ? ;
.bss:00422205                 db    ? ;
.bss:00422206                 db    ? ;
.bss:00422207                 db    ? ;
.bss:00422208                 db    ? ;
.bss:00422209                 db    ? ;
.bss:0042220A                 db    ? ;
.bss:0042220B                 db    ? ;
.bss:0042220C                 db    ? ;
.bss:0042220D                 db    ? ;
.bss:0042220E                 db    ? ;
.bss:0042220F                 db    ? ;
.bss:00422210                 db    ? ;
.bss:00422211                 db    ? ;
.bss:00422212                 db    ? ;
.bss:00422213                 db    ? ;
.bss:00422214                 db    ? ;
.bss:00422215                 db    ? ;
.bss:00422216                 db    ? ;
.bss:00422217                 db    ? ;
.bss:00422218                 db    ? ;
.bss:00422219                 db    ? ;
.bss:0042221A                 db    ? ;
.bss:0042221B                 db    ? ;
.bss:0042221C                 db    ? ;
.bss:0042221D                 db    ? ;
.bss:0042221E                 db    ? ;
.bss:0042221F                 db    ? ;
.bss:00422220                 db    ? ;
.bss:00422221                 db    ? ;
.bss:00422222                 db    ? ;
.bss:00422223                 db    ? ;
.bss:00422224                 db    ? ;
.bss:00422225                 db    ? ;
.bss:00422226                 db    ? ;
.bss:00422227                 db    ? ;
.bss:00422228                 db    ? ;
.bss:00422229                 db    ? ;
.bss:0042222A                 db    ? ;
.bss:0042222B                 db    ? ;
.bss:0042222C                 db    ? ;
.bss:0042222D                 db    ? ;
.bss:0042222E                 db    ? ;
.bss:0042222F                 db    ? ;
.bss:00422230                 db    ? ;
.bss:00422231                 db    ? ;
.bss:00422232                 db    ? ;
.bss:00422233                 db    ? ;
.bss:00422234                 db    ? ;
.bss:00422235                 db    ? ;
.bss:00422236                 db    ? ;
.bss:00422237                 db    ? ;
.bss:00422238                 db    ? ;
.bss:00422239                 db    ? ;
.bss:0042223A                 db    ? ;
.bss:0042223B                 db    ? ;
.bss:0042223C                 db    ? ;
.bss:0042223D                 db    ? ;
.bss:0042223E                 db    ? ;
.bss:0042223F                 db    ? ;
.bss:00422240                 db    ? ;
.bss:00422241                 db    ? ;
.bss:00422242                 db    ? ;
.bss:00422243                 db    ? ;
.bss:00422244                 db    ? ;
.bss:00422245                 db    ? ;
.bss:00422246                 db    ? ;
.bss:00422247                 db    ? ;
.bss:00422248                 db    ? ;
.bss:00422249                 db    ? ;
.bss:0042224A                 db    ? ;
.bss:0042224B                 db    ? ;
.bss:0042224C                 db    ? ;
.bss:0042224D                 db    ? ;
.bss:0042224E                 db    ? ;
.bss:0042224F                 db    ? ;
.bss:00422250                 db    ? ;
.bss:00422251                 db    ? ;
.bss:00422252                 db    ? ;
.bss:00422253                 db    ? ;
.bss:00422254                 db    ? ;
.bss:00422255                 db    ? ;
.bss:00422256                 db    ? ;
.bss:00422257                 db    ? ;
.bss:00422258                 db    ? ;
.bss:00422259                 db    ? ;
.bss:0042225A                 db    ? ;
.bss:0042225B                 db    ? ;
.bss:0042225C                 db    ? ;
.bss:0042225D                 db    ? ;
.bss:0042225E                 db    ? ;
.bss:0042225F                 db    ? ;
.bss:00422260 dword_422260    dd ?                    ; DATA XREF: sub_406340+A1↑w
.bss:00422260                                         ; sub_406340:loc_4064C6↑r ...
.bss:00422264                 align 10h
.bss:00422270 dword_422270    dd ?                    ; DATA XREF: sub_408D80+49↑r
.bss:00422270                                         ; sub_408D80+6C↑r ...
.bss:00422274                 align 10h
.bss:00422280 dword_422280    dd ?                    ; DATA XREF: sub_408D80:loc_408DD7↑r
.bss:00422280                                         ; sub_408D80+99↑r ...
.bss:00422284                 align 10h
.bss:00422290 dword_422290    dd ?                    ; DATA XREF: sub_40A260+9↑o
.bss:00422290                                         ; sub_40A260+17↑w ...
.bss:00422294 dword_422294    dd ?                    ; DATA XREF: sub_40A260+21↑w
.bss:00422294                                         ; .text:0040A319↑w
.bss:00422298 dword_422298    dd ?                    ; DATA XREF: sub_40A260+77↑r
.bss:00422298                                         ; .text:0040A367↑r
.bss:0042229C dword_42229C    dd ?                    ; DATA XREF: sub_40A260+6B↑r
.bss:0042229C                                         ; .text:0040A35B↑r
.bss:004222A0                 align 40h
.bss:004222C0 ; char *dword_4222C0
.bss:004222C0 dword_4222C0    dd ?                    ; DATA XREF: .text:0040B964↑w
.bss:004222C0                                         ; sub_40B990+58↑r
.bss:004222C4                 align 10h
.bss:004222D0 unk_4222D0      db    ? ;               ; DATA XREF: sub_40E3F0+100↑o
.bss:004222D0                                         ; .data:off_421068↑o
.bss:004222D1                 db    ? ;
.bss:004222D2                 db    ? ;
.bss:004222D3                 db    ? ;
.bss:004222D4                 db    ? ;
.bss:004222D5                 db    ? ;
.bss:004222D6                 db    ? ;
.bss:004222D7                 db    ? ;
.bss:004222D8                 db    ? ;
.bss:004222D9                 db    ? ;
.bss:004222DA                 db    ? ;
.bss:004222DB                 db    ? ;
.bss:004222DC                 db    ? ;
.bss:004222DD                 db    ? ;
.bss:004222DE                 db    ? ;
.bss:004222DF                 db    ? ;
.bss:004222E0                 db    ? ;
.bss:004222E1                 db    ? ;
.bss:004222E2                 db    ? ;
.bss:004222E3                 db    ? ;
.bss:004222E4                 db    ? ;
.bss:004222E5                 db    ? ;
.bss:004222E6                 db    ? ;
.bss:004222E7                 db    ? ;
.bss:004222E8                 db    ? ;
.bss:004222E9                 db    ? ;
.bss:004222EA                 db    ? ;
.bss:004222EB                 db    ? ;
.bss:004222EC                 db    ? ;
.bss:004222ED                 db    ? ;
.bss:004222EE                 db    ? ;
.bss:004222EF                 db    ? ;
.bss:004222F0                 db    ? ;
.bss:004222F1                 db    ? ;
.bss:004222F2                 db    ? ;
.bss:004222F3                 db    ? ;
.bss:004222F4                 db    ? ;
.bss:004222F5                 db    ? ;
.bss:004222F6                 db    ? ;
.bss:004222F7                 db    ? ;
.bss:004222F8                 db    ? ;
.bss:004222F9                 db    ? ;
.bss:004222FA                 db    ? ;
.bss:004222FB                 db    ? ;
.bss:004222FC                 db    ? ;
.bss:004222FD                 db    ? ;
.bss:004222FE                 db    ? ;
.bss:004222FF                 db    ? ;
.bss:00422300                 db    ? ;
.bss:00422301                 db    ? ;
.bss:00422302                 db    ? ;
.bss:00422303                 db    ? ;
.bss:00422304                 db    ? ;
.bss:00422305                 db    ? ;
.bss:00422306                 db    ? ;
.bss:00422307                 db    ? ;
.bss:00422308                 db    ? ;
.bss:00422309                 db    ? ;
.bss:0042230A                 db    ? ;
.bss:0042230B                 db    ? ;
.bss:0042230C                 db    ? ;
.bss:0042230D                 db    ? ;
.bss:0042230E                 db    ? ;
.bss:0042230F                 db    ? ;
.bss:00422310                 db    ? ;
.bss:00422311                 db    ? ;
.bss:00422312                 db    ? ;
.bss:00422313                 db    ? ;
.bss:00422314                 db    ? ;
.bss:00422315                 db    ? ;
.bss:00422316                 db    ? ;
.bss:00422317                 db    ? ;
.bss:00422318                 db    ? ;
.bss:00422319                 db    ? ;
.bss:0042231A                 db    ? ;
.bss:0042231B                 db    ? ;
.bss:0042231C                 db    ? ;
.bss:0042231D                 db    ? ;
.bss:0042231E                 db    ? ;
.bss:0042231F                 db    ? ;
.bss:00422320                 db    ? ;
.bss:00422321                 db    ? ;
.bss:00422322                 db    ? ;
.bss:00422323                 db    ? ;
.bss:00422324                 db    ? ;
.bss:00422325                 db    ? ;
.bss:00422326                 db    ? ;
.bss:00422327                 db    ? ;
.bss:00422328                 db    ? ;
.bss:00422329                 db    ? ;
.bss:0042232A                 db    ? ;
.bss:0042232B                 db    ? ;
.bss:0042232C                 db    ? ;
.bss:0042232D                 db    ? ;
.bss:0042232E                 db    ? ;
.bss:0042232F                 db    ? ;
.bss:00422330                 db    ? ;
.bss:00422331                 db    ? ;
.bss:00422332                 db    ? ;
.bss:00422333                 db    ? ;
.bss:00422334                 db    ? ;
.bss:00422335                 db    ? ;
.bss:00422336                 db    ? ;
.bss:00422337                 db    ? ;
.bss:00422338                 db    ? ;
.bss:00422339                 db    ? ;
.bss:0042233A                 db    ? ;
.bss:0042233B                 db    ? ;
.bss:0042233C                 db    ? ;
.bss:0042233D                 db    ? ;
.bss:0042233E                 db    ? ;
.bss:0042233F                 db    ? ;
.bss:00422340                 db    ? ;
.bss:00422341                 db    ? ;
.bss:00422342                 db    ? ;
.bss:00422343                 db    ? ;
.bss:00422344                 db    ? ;
.bss:00422345                 db    ? ;
.bss:00422346                 db    ? ;
.bss:00422347                 db    ? ;
.bss:00422348                 db    ? ;
.bss:00422349                 db    ? ;
.bss:0042234A                 db    ? ;
.bss:0042234B                 db    ? ;
.bss:0042234C                 db    ? ;
.bss:0042234D                 db    ? ;
.bss:0042234E                 db    ? ;
.bss:0042234F                 db    ? ;
.bss:00422350                 db    ? ;
.bss:00422351                 db    ? ;
.bss:00422352                 db    ? ;
.bss:00422353                 db    ? ;
.bss:00422354                 db    ? ;
.bss:00422355                 db    ? ;
.bss:00422356                 db    ? ;
.bss:00422357                 db    ? ;
.bss:00422358                 db    ? ;
.bss:00422359                 db    ? ;
.bss:0042235A                 db    ? ;
.bss:0042235B                 db    ? ;
.bss:0042235C                 db    ? ;
.bss:0042235D                 db    ? ;
.bss:0042235E                 db    ? ;
.bss:0042235F                 db    ? ;
.bss:00422360                 db    ? ;
.bss:00422361                 db    ? ;
.bss:00422362                 db    ? ;
.bss:00422363                 db    ? ;
.bss:00422364                 db    ? ;
.bss:00422365                 db    ? ;
.bss:00422366                 db    ? ;
.bss:00422367                 db    ? ;
.bss:00422368                 db    ? ;
.bss:00422369                 db    ? ;
.bss:0042236A                 db    ? ;
.bss:0042236B                 db    ? ;
.bss:0042236C                 db    ? ;
.bss:0042236D                 db    ? ;
.bss:0042236E                 db    ? ;
.bss:0042236F                 db    ? ;
.bss:00422370                 db    ? ;
.bss:00422371                 db    ? ;
.bss:00422372                 db    ? ;
.bss:00422373                 db    ? ;
.bss:00422374                 db    ? ;
.bss:00422375                 db    ? ;
.bss:00422376                 db    ? ;
.bss:00422377                 db    ? ;
.bss:00422378                 db    ? ;
.bss:00422379                 db    ? ;
.bss:0042237A                 db    ? ;
.bss:0042237B                 db    ? ;
.bss:0042237C                 db    ? ;
.bss:0042237D                 db    ? ;
.bss:0042237E                 db    ? ;
.bss:0042237F                 db    ? ;
.bss:00422380                 db    ? ;
.bss:00422381                 db    ? ;
.bss:00422382                 db    ? ;
.bss:00422383                 db    ? ;
.bss:00422384                 db    ? ;
.bss:00422385                 db    ? ;
.bss:00422386                 db    ? ;
.bss:00422387                 db    ? ;
.bss:00422388                 db    ? ;
.bss:00422389                 db    ? ;
.bss:0042238A                 db    ? ;
.bss:0042238B                 db    ? ;
.bss:0042238C                 db    ? ;
.bss:0042238D                 db    ? ;
.bss:0042238E                 db    ? ;
.bss:0042238F                 db    ? ;
.bss:00422390                 db    ? ;
.bss:00422391                 db    ? ;
.bss:00422392                 db    ? ;
.bss:00422393                 db    ? ;
.bss:00422394                 db    ? ;
.bss:00422395                 db    ? ;
.bss:00422396                 db    ? ;
.bss:00422397                 db    ? ;
.bss:00422398                 db    ? ;
.bss:00422399                 db    ? ;
.bss:0042239A                 db    ? ;
.bss:0042239B                 db    ? ;
.bss:0042239C                 db    ? ;
.bss:0042239D                 db    ? ;
.bss:0042239E                 db    ? ;
.bss:0042239F                 db    ? ;
.bss:004223A0                 db    ? ;
.bss:004223A1                 db    ? ;
.bss:004223A2                 db    ? ;
.bss:004223A3                 db    ? ;
.bss:004223A4                 db    ? ;
.bss:004223A5                 db    ? ;
.bss:004223A6                 db    ? ;
.bss:004223A7                 db    ? ;
.bss:004223A8                 db    ? ;
.bss:004223A9                 db    ? ;
.bss:004223AA                 db    ? ;
.bss:004223AB                 db    ? ;
.bss:004223AC                 db    ? ;
.bss:004223AD                 db    ? ;
.bss:004223AE                 db    ? ;
.bss:004223AF                 db    ? ;
.bss:004223B0                 db    ? ;
.bss:004223B1                 db    ? ;
.bss:004223B2                 db    ? ;
.bss:004223B3                 db    ? ;
.bss:004223B4                 db    ? ;
.bss:004223B5                 db    ? ;
.bss:004223B6                 db    ? ;
.bss:004223B7                 db    ? ;
.bss:004223B8                 db    ? ;
.bss:004223B9                 db    ? ;
.bss:004223BA                 db    ? ;
.bss:004223BB                 db    ? ;
.bss:004223BC                 db    ? ;
.bss:004223BD                 db    ? ;
.bss:004223BE                 db    ? ;
.bss:004223BF                 db    ? ;
.bss:004223C0                 db    ? ;
.bss:004223C1                 db    ? ;
.bss:004223C2                 db    ? ;
.bss:004223C3                 db    ? ;
.bss:004223C4                 db    ? ;
.bss:004223C5                 db    ? ;
.bss:004223C6                 db    ? ;
.bss:004223C7                 db    ? ;
.bss:004223C8                 db    ? ;
.bss:004223C9                 db    ? ;
.bss:004223CA                 db    ? ;
.bss:004223CB                 db    ? ;
.bss:004223CC                 db    ? ;
.bss:004223CD                 db    ? ;
.bss:004223CE                 db    ? ;
.bss:004223CF                 db    ? ;
.bss:004223D0 dword_4223D0    dd ?                    ; DATA XREF: .text:loc_40DD81↑o
.bss:004223D0                                         ; .text:loc_40DDA0↑o ...
.bss:004223D4 dword_4223D4    dd ?                    ; DATA XREF: .text:loc_40DE20↑o
.bss:004223D4                                         ; .text:0040E2A8↑r ...
.bss:004223D8 dword_4223D8    dd ?                    ; DATA XREF: .text:0040E2A2↑r
.bss:004223D8                                         ; sub_40E350+2C↑r
.bss:004223DC dword_4223DC    dd ?                    ; DATA XREF: .text:0040E296↑r
.bss:004223DC                                         ; sub_40E350+22↑r
.bss:004223E0 dword_4223E0    dd ?                    ; DATA XREF: .text:0040E2B2↑r
.bss:004223E0                                         ; sub_40E350+36↑r
.bss:004223E4 dword_4223E4    dd ?                    ; DATA XREF: .text:0040E2C2↑r
.bss:004223E4                                         ; sub_40E350+4E↑r
.bss:004223E8 dword_4223E8    dd ?                    ; DATA XREF: .text:0040E2DF↑r
.bss:004223E8                                         ; sub_40E350+62↑r
.bss:004223EC dword_4223EC    dd ?                    ; DATA XREF: .text:0040E2D5↑r
.bss:004223EC                                         ; sub_40E350+70↑r
.bss:004223F0 dword_4223F0    dd ?                    ; DATA XREF: .text:0040E2B8↑r
.bss:004223F0                                         ; sub_40E350+7A↑r
.bss:004223F4                 align 10h
.bss:00422400 dword_422400    dd ?                    ; DATA XREF: .text:0040E5E8↑r
.bss:00422400                                         ; .text:loc_40E61A↑w ...
.bss:00422404                 align 10h
.bss:00422410 dword_422410    dd ?                    ; DATA XREF: .text:0040E66F↑r
.bss:00422410                                         ; .text:0040E69D↑w ...
.bss:00422414                 align 10h
.bss:00422420 unk_422420      db    ? ;               ; DATA XREF: .text:0040E605↑o
.bss:00422420                                         ; .text:0040E63C↑o ...
.bss:00422421                 db    ? ;
.bss:00422422                 db    ? ;
.bss:00422423                 db    ? ;
.bss:00422424                 db    ? ;
.bss:00422425                 db    ? ;
.bss:00422426                 db    ? ;
.bss:00422427                 db    ? ;
.bss:00422428                 db    ? ;
.bss:00422429                 db    ? ;
.bss:0042242A                 db    ? ;
.bss:0042242B                 db    ? ;
.bss:0042242C                 db    ? ;
.bss:0042242D                 db    ? ;
.bss:0042242E                 db    ? ;
.bss:0042242F                 db    ? ;
.bss:00422430                 db    ? ;
.bss:00422431                 db    ? ;
.bss:00422432                 db    ? ;
.bss:00422433                 db    ? ;
.bss:00422434                 db    ? ;
.bss:00422435                 db    ? ;
.bss:00422436                 db    ? ;
.bss:00422437                 db    ? ;
.bss:00422438                 db    ? ;
.bss:00422439                 db    ? ;
.bss:0042243A                 db    ? ;
.bss:0042243B                 db    ? ;
.bss:0042243C                 db    ? ;
.bss:0042243D                 db    ? ;
.bss:0042243E                 db    ? ;
.bss:0042243F                 db    ? ;
.bss:00422440 unk_422440      db    ? ;               ; DATA XREF: .text:0040E688↑o
.bss:00422440                                         ; .text:0040E6BF↑o ...
.bss:00422441                 db    ? ;
.bss:00422442                 db    ? ;
.bss:00422443                 db    ? ;
.bss:00422444                 db    ? ;
.bss:00422445                 db    ? ;
.bss:00422446                 db    ? ;
.bss:00422447                 db    ? ;
.bss:00422448                 db    ? ;
.bss:00422449                 db    ? ;
.bss:0042244A                 db    ? ;
.bss:0042244B                 db    ? ;
.bss:0042244C                 db    ? ;
.bss:0042244D                 db    ? ;
.bss:0042244E                 db    ? ;
.bss:0042244F                 db    ? ;
.bss:00422450                 db    ? ;
.bss:00422451                 db    ? ;
.bss:00422452                 db    ? ;
.bss:00422453                 db    ? ;
.bss:00422454                 db    ? ;
.bss:00422455                 db    ? ;
.bss:00422456                 db    ? ;
.bss:00422457                 db    ? ;
.bss:00422458                 db    ? ;
.bss:00422459                 db    ? ;
.bss:0042245A                 db    ? ;
.bss:0042245B                 db    ? ;
.bss:0042245C                 db    ? ;
.bss:0042245D                 db    ? ;
.bss:0042245E                 db    ? ;
.bss:0042245F                 db    ? ;
.bss:00422460 dword_422460    dd ?                    ; DATA XREF: sub_412110+AB↑r
.bss:00422460                                         ; sub_412110+334B↑w
.bss:00422464                 align 10h
.bss:00422470 byte_422470     db ?                    ; DATA XREF: sub_40F200:loc_40FC6C↑r
.bss:00422470                                         ; sub_40F200:loc_40FC98↑r ...
.bss:00422471                 db    ? ;
.bss:00422472                 db    ? ;
.bss:00422473                 db    ? ;
.bss:00422474                 db    ? ;
.bss:00422475                 db    ? ;
.bss:00422476                 db    ? ;
.bss:00422477                 db    ? ;
.bss:00422478                 db    ? ;
.bss:00422479                 db    ? ;
.bss:0042247A                 db    ? ;
.bss:0042247B                 db    ? ;
.bss:0042247C                 db    ? ;
.bss:0042247D                 db    ? ;
.bss:0042247E                 db    ? ;
.bss:0042247F                 db    ? ;
.bss:00422480                 db    ? ;
.bss:00422481                 db    ? ;
.bss:00422482                 db    ? ;
.bss:00422483                 db    ? ;
.bss:00422484                 db    ? ;
.bss:00422485                 db    ? ;
.bss:00422486                 db    ? ;
.bss:00422487                 db    ? ;
.bss:00422488                 db    ? ;
.bss:00422489                 db    ? ;
.bss:0042248A                 db    ? ;
.bss:0042248B                 db    ? ;
.bss:0042248C                 db    ? ;
.bss:0042248D                 db    ? ;
.bss:0042248E                 db    ? ;
.bss:0042248F                 db    ? ;
.bss:00422490                 db    ? ;
.bss:00422491                 db    ? ;
.bss:00422492                 db    ? ;
.bss:00422493                 db    ? ;
.bss:00422494                 db    ? ;
.bss:00422495                 db    ? ;
.bss:00422496                 db    ? ;
.bss:00422497                 db    ? ;
.bss:00422498                 db    ? ;
.bss:00422499                 db    ? ;
.bss:0042249A                 db    ? ;
.bss:0042249B                 db    ? ;
.bss:0042249C                 db    ? ;
.bss:0042249D                 db    ? ;
.bss:0042249E                 db    ? ;
.bss:0042249F                 db    ? ;
.bss:004224A0                 db    ? ;
.bss:004224A1                 db    ? ;
.bss:004224A2                 db    ? ;
.bss:004224A3                 db    ? ;
.bss:004224A4                 db    ? ;
.bss:004224A5                 db    ? ;
.bss:004224A6                 db    ? ;
.bss:004224A7                 db    ? ;
.bss:004224A8                 db    ? ;
.bss:004224A9                 db    ? ;
.bss:004224AA                 db    ? ;
.bss:004224AB                 db    ? ;
.bss:004224AC                 db    ? ;
.bss:004224AD                 db    ? ;
.bss:004224AE                 db    ? ;
.bss:004224AF                 db    ? ;
.bss:004224B0                 db    ? ;
.bss:004224B1                 db    ? ;
.bss:004224B2                 db    ? ;
.bss:004224B3                 db    ? ;
.bss:004224B4                 db    ? ;
.bss:004224B5                 db    ? ;
.bss:004224B6                 db    ? ;
.bss:004224B7                 db    ? ;
.bss:004224B8                 db    ? ;
.bss:004224B9                 db    ? ;
.bss:004224BA                 db    ? ;
.bss:004224BB                 db    ? ;
.bss:004224BC                 db    ? ;
.bss:004224BD                 db    ? ;
.bss:004224BE                 db    ? ;
.bss:004224BF                 db    ? ;
.bss:004224C0                 db    ? ;
.bss:004224C1                 db    ? ;
.bss:004224C2                 db    ? ;
.bss:004224C3                 db    ? ;
.bss:004224C4                 db    ? ;
.bss:004224C5                 db    ? ;
.bss:004224C6                 db    ? ;
.bss:004224C7                 db    ? ;
.bss:004224C8                 db    ? ;
.bss:004224C9                 db    ? ;
.bss:004224CA                 db    ? ;
.bss:004224CB                 db    ? ;
.bss:004224CC                 db    ? ;
.bss:004224CD                 db    ? ;
.bss:004224CE                 db    ? ;
.bss:004224CF byte_4224CF     db ?                    ; DATA XREF: sub_412110+333F↑w
.bss:004224D0                 db    ? ;
.bss:004224D1                 db    ? ;
.bss:004224D2                 db    ? ;
.bss:004224D3                 db    ? ;
.bss:004224D4                 db    ? ;
.bss:004224D5                 db    ? ;
.bss:004224D6                 db    ? ;
.bss:004224D7                 db    ? ;
.bss:004224D8                 db    ? ;
.bss:004224D9                 db    ? ;
.bss:004224DA                 db    ? ;
.bss:004224DB                 db    ? ;
.bss:004224DC                 db    ? ;
.bss:004224DD                 db    ? ;
.bss:004224DE                 db    ? ;
.bss:004224DF                 db    ? ;
.bss:004224E0                 db    ? ;
.bss:004224E1                 db    ? ;
.bss:004224E2                 db    ? ;
.bss:004224E3                 db    ? ;
.bss:004224E4                 db    ? ;
.bss:004224E5                 db    ? ;
.bss:004224E6                 db    ? ;
.bss:004224E7                 db    ? ;
.bss:004224E8                 db    ? ;
.bss:004224E9                 db    ? ;
.bss:004224EA                 db    ? ;
.bss:004224EB                 db    ? ;
.bss:004224EC                 db    ? ;
.bss:004224ED                 db    ? ;
.bss:004224EE                 db    ? ;
.bss:004224EF                 db    ? ;
.bss:004224F0                 db    ? ;
.bss:004224F1                 db    ? ;
.bss:004224F2                 db    ? ;
.bss:004224F3                 db    ? ;
.bss:004224F4                 db    ? ;
.bss:004224F5                 db    ? ;
.bss:004224F6                 db    ? ;
.bss:004224F7                 db    ? ;
.bss:004224F8                 db    ? ;
.bss:004224F9                 db    ? ;
.bss:004224FA                 db    ? ;
.bss:004224FB                 db    ? ;
.bss:004224FC                 db    ? ;
.bss:004224FD                 db    ? ;
.bss:004224FE                 db    ? ;
.bss:004224FF                 db    ? ;
.bss:00422500                 db    ? ;
.bss:00422501                 db    ? ;
.bss:00422502                 db    ? ;
.bss:00422503                 db    ? ;
.bss:00422504                 db    ? ;
.bss:00422505                 db    ? ;
.bss:00422506                 db    ? ;
.bss:00422507                 db    ? ;
.bss:00422508                 db    ? ;
.bss:00422509                 db    ? ;
.bss:0042250A                 db    ? ;
.bss:0042250B                 db    ? ;
.bss:0042250C                 db    ? ;
.bss:0042250D                 db    ? ;
.bss:0042250E                 db    ? ;
.bss:0042250F                 db    ? ;
.bss:00422510                 db    ? ;
.bss:00422511                 db    ? ;
.bss:00422512                 db    ? ;
.bss:00422513                 db    ? ;
.bss:00422514                 db    ? ;
.bss:00422515                 db    ? ;
.bss:00422516                 db    ? ;
.bss:00422517                 db    ? ;
.bss:00422518                 db    ? ;
.bss:00422519                 db    ? ;
.bss:0042251A                 db    ? ;
.bss:0042251B                 db    ? ;
.bss:0042251C                 db    ? ;
.bss:0042251D                 db    ? ;
.bss:0042251E                 db    ? ;
.bss:0042251F                 db    ? ;
.bss:00422520                 db    ? ;
.bss:00422521                 db    ? ;
.bss:00422522                 db    ? ;
.bss:00422523                 db    ? ;
.bss:00422524                 db    ? ;
.bss:00422525                 db    ? ;
.bss:00422526                 db    ? ;
.bss:00422527                 db    ? ;
.bss:00422528                 db    ? ;
.bss:00422529                 db    ? ;
.bss:0042252A                 db    ? ;
.bss:0042252B                 db    ? ;
.bss:0042252C                 db    ? ;
.bss:0042252D                 db    ? ;
.bss:0042252E                 db    ? ;
.bss:0042252F                 db    ? ;
.bss:00422530                 db    ? ;
.bss:00422531                 db    ? ;
.bss:00422532                 db    ? ;
.bss:00422533                 db    ? ;
.bss:00422534                 db    ? ;
.bss:00422535                 db    ? ;
.bss:00422536                 db    ? ;
.bss:00422537                 db    ? ;
.bss:00422538                 db    ? ;
.bss:00422539                 db    ? ;
.bss:0042253A                 db    ? ;
.bss:0042253B                 db    ? ;
.bss:0042253C                 db    ? ;
.bss:0042253D                 db    ? ;
.bss:0042253E                 db    ? ;
.bss:0042253F                 db    ? ;
.bss:00422540                 db    ? ;
.bss:00422541                 db    ? ;
.bss:00422542                 db    ? ;
.bss:00422543                 db    ? ;
.bss:00422544                 db    ? ;
.bss:00422545                 db    ? ;
.bss:00422546                 db    ? ;
.bss:00422547                 db    ? ;
.bss:00422548                 db    ? ;
.bss:00422549                 db    ? ;
.bss:0042254A                 db    ? ;
.bss:0042254B                 db    ? ;
.bss:0042254C                 db    ? ;
.bss:0042254D                 db    ? ;
.bss:0042254E                 db    ? ;
.bss:0042254F                 db    ? ;
.bss:00422550                 db    ? ;
.bss:00422551                 db    ? ;
.bss:00422552                 db    ? ;
.bss:00422553                 db    ? ;
.bss:00422554                 db    ? ;
.bss:00422555                 db    ? ;
.bss:00422556                 db    ? ;
.bss:00422557                 db    ? ;
.bss:00422558                 db    ? ;
.bss:00422559                 db    ? ;
.bss:0042255A                 db    ? ;
.bss:0042255B                 db    ? ;
.bss:0042255C                 db    ? ;
.bss:0042255D                 db    ? ;
.bss:0042255E                 db    ? ;
.bss:0042255F                 db    ? ;
.bss:00422560                 db    ? ;
.bss:00422561                 db    ? ;
.bss:00422562                 db    ? ;
.bss:00422563                 db    ? ;
.bss:00422564                 db    ? ;
.bss:00422565                 db    ? ;
.bss:00422566                 db    ? ;
.bss:00422567                 db    ? ;
.bss:00422568                 db    ? ;
.bss:00422569                 db    ? ;
.bss:0042256A                 db    ? ;
.bss:0042256B                 db    ? ;
.bss:0042256C                 db    ? ;
.bss:0042256D                 db    ? ;
.bss:0042256E                 db    ? ;
.bss:0042256F                 db    ? ;
.bss:00422570 unk_422570      db    ? ;               ; DATA XREF: sub_40F200+148↑o
.bss:00422570                                         ; sub_40F200+153↑o ...
.bss:00422571                 db    ? ;
.bss:00422572                 db    ? ;
.bss:00422573                 db    ? ;
.bss:00422574                 db    ? ;
.bss:00422575                 db    ? ;
.bss:00422576                 db    ? ;
.bss:00422577                 db    ? ;
.bss:00422578                 db    ? ;
.bss:00422579                 db    ? ;
.bss:0042257A                 db    ? ;
.bss:0042257B                 db    ? ;
.bss:0042257C                 db    ? ;
.bss:0042257D                 db    ? ;
.bss:0042257E                 db    ? ;
.bss:0042257F                 db    ? ;
.bss:00422580 ; char *Str1
.bss:00422580 Str1            dd ?                    ; DATA XREF: sub_415E54:loc_415E8D↑w
.bss:00422580                                         ; sub_415E54:loc_415FC0↑r
.bss:00422584                 align 10h
.bss:00422590 dword_422590    dd ?                    ; DATA XREF: sub_415E54+2D↑r
.bss:00422590                                         ; sub_415E54+3F↑w
.bss:00422594                 align 10h
.bss:004225A0 dword_4225A0    dd ?                    ; DATA XREF: sub_415FF0:loc_41605B↑r
.bss:004225A0                                         ; sub_415FF0+F9↑w
.bss:004225A4                 align 10h
.bss:004225B0 dword_4225B0    dd ?                    ; DATA XREF: sub_415FF0+8E↑r
.bss:004225B0                                         ; sub_415FF0+103↑w
.bss:004225B4                 align 10h
.bss:004225C0 dword_4225C0    dd ?                    ; DATA XREF: sub_415FF0+5D↑r
.bss:004225C0                                         ; sub_415FF0+EE↑w
.bss:004225C4                 align 10h
.bss:004225D0 dword_4225D0    dd ?                    ; DATA XREF: sub_416C20+100↑r
.bss:004225D0                                         ; sub_416C20+308↑w
.bss:004225D4                 align 10h
.bss:004225E0 ; char *Str
.bss:004225E0 Str             dd ?                    ; DATA XREF: sub_416C20:loc_416F84↑r
.bss:004225E0                                         ; sub_416C20+3B6↑r ...
.bss:004225E4                 align 10h
.bss:004225F0 dword_4225F0    dd ?                    ; DATA XREF: sub_419220+1C↑r
.bss:004225F0                                         ; sub_419220+104↑w
.bss:004225F4                 align 10h
.bss:00422600 dword_422600    dd ?                    ; DATA XREF: sub_419220+B↑r
.bss:00422600                                         ; sub_419220+71↑w
.bss:00422604                 align 10h
.bss:00422610 dword_422610    dd ?                    ; DATA XREF: sub_419220+85↑r
.bss:00422610                                         ; sub_419220+B9↑w
.bss:00422614 dword_422614    dd ?                    ; DATA XREF: sub_419220+C4↑w
.bss:00422618 dword_422618    dd ?                    ; DATA XREF: sub_419220+2E↑o
.bss:00422618                                         ; sub_419220+CF↑w
.bss:0042261C dword_42261C    dd ?                    ; DATA XREF: sub_419220+DA↑w
.bss:00422620                 db    ? ;
.bss:00422621                 db    ? ;
.bss:00422622                 db    ? ;
.bss:00422623                 db    ? ;
.bss:00422624                 db    ? ;
.bss:00422625                 db    ? ;
.bss:00422626                 db    ? ;
.bss:00422627                 db    ? ;
.bss:00422628                 db    ? ;
.bss:00422629                 db    ? ;
.bss:0042262A                 db    ? ;
.bss:0042262B                 db    ? ;
.bss:0042262C                 db    ? ;
.bss:0042262D                 db    ? ;
.bss:0042262E                 db    ? ;
.bss:0042262F                 db    ? ;
.bss:00422630                 db    ? ;
.bss:00422631                 db    ? ;
.bss:00422632                 db    ? ;
.bss:00422633                 db    ? ;
.bss:00422634                 db    ? ;
.bss:00422635                 db    ? ;
.bss:00422636                 db    ? ;
.bss:00422637                 db    ? ;
.bss:00422638                 db    ? ;
.bss:00422639                 db    ? ;
.bss:0042263A                 db    ? ;
.bss:0042263B                 db    ? ;
.bss:0042263C                 db    ? ;
.bss:0042263D                 db    ? ;
.bss:0042263E                 db    ? ;
.bss:0042263F                 db    ? ;
.bss:00422640                 db    ? ;
.bss:00422641                 db    ? ;
.bss:00422642                 db    ? ;
.bss:00422643                 db    ? ;
.bss:00422644                 db    ? ;
.bss:00422645                 db    ? ;
.bss:00422646                 db    ? ;
.bss:00422647                 db    ? ;
.bss:00422648                 db    ? ;
.bss:00422649                 db    ? ;
.bss:0042264A                 db    ? ;
.bss:0042264B                 db    ? ;
.bss:0042264C                 db    ? ;
.bss:0042264D                 db    ? ;
.bss:0042264E                 db    ? ;
.bss:0042264F                 db    ? ;
.bss:00422650                 db    ? ;
.bss:00422651                 db    ? ;
.bss:00422652                 db    ? ;
.bss:00422653                 db    ? ;
.bss:00422654                 db    ? ;
.bss:00422655                 db    ? ;
.bss:00422656                 db    ? ;
.bss:00422657                 db    ? ;
.bss:00422658                 db    ? ;
.bss:00422659                 db    ? ;
.bss:0042265A                 db    ? ;
.bss:0042265B                 db    ? ;
.bss:0042265C                 db    ? ;
.bss:0042265D                 db    ? ;
.bss:0042265E                 db    ? ;
.bss:0042265F                 db    ? ;
.bss:00422660                 db    ? ;
.bss:00422661                 db    ? ;
.bss:00422662                 db    ? ;
.bss:00422663                 db    ? ;
.bss:00422664                 db    ? ;
.bss:00422665                 db    ? ;
.bss:00422666                 db    ? ;
.bss:00422667                 db    ? ;
.bss:00422668                 db    ? ;
.bss:00422669                 db    ? ;
.bss:0042266A                 db    ? ;
.bss:0042266B                 db    ? ;
.bss:0042266C                 db    ? ;
.bss:0042266D                 db    ? ;
.bss:0042266E                 db    ? ;
.bss:0042266F                 db    ? ;
.bss:00422670                 db    ? ;
.bss:00422671                 db    ? ;
.bss:00422672                 db    ? ;
.bss:00422673                 db    ? ;
.bss:00422674                 db    ? ;
.bss:00422675                 db    ? ;
.bss:00422676                 db    ? ;
.bss:00422677                 db    ? ;
.bss:00422678                 db    ? ;
.bss:00422679                 db    ? ;
.bss:0042267A                 db    ? ;
.bss:0042267B                 db    ? ;
.bss:0042267C                 db    ? ;
.bss:0042267D                 db    ? ;
.bss:0042267E                 db    ? ;
.bss:0042267F                 db    ? ;
.bss:00422680                 db    ? ;
.bss:00422681                 db    ? ;
.bss:00422682                 db    ? ;
.bss:00422683                 db    ? ;
.bss:00422684                 db    ? ;
.bss:00422685                 db    ? ;
.bss:00422686                 db    ? ;
.bss:00422687                 db    ? ;
.bss:00422688                 db    ? ;
.bss:00422689                 db    ? ;
.bss:0042268A                 db    ? ;
.bss:0042268B                 db    ? ;
.bss:0042268C                 db    ? ;
.bss:0042268D                 db    ? ;
.bss:0042268E                 db    ? ;
.bss:0042268F                 db    ? ;
.bss:00422690                 db    ? ;
.bss:00422691                 db    ? ;
.bss:00422692                 db    ? ;
.bss:00422693                 db    ? ;
.bss:00422694                 db    ? ;
.bss:00422695                 db    ? ;
.bss:00422696                 db    ? ;
.bss:00422697                 db    ? ;
.bss:00422698                 db    ? ;
.bss:00422699                 db    ? ;
.bss:0042269A                 db    ? ;
.bss:0042269B                 db    ? ;
.bss:0042269C                 db    ? ;
.bss:0042269D                 db    ? ;
.bss:0042269E                 db    ? ;
.bss:0042269F                 db    ? ;
.bss:004226A0                 db    ? ;
.bss:004226A1                 db    ? ;
.bss:004226A2                 db    ? ;
.bss:004226A3                 db    ? ;
.bss:004226A4                 db    ? ;
.bss:004226A5                 db    ? ;
.bss:004226A6                 db    ? ;
.bss:004226A7                 db    ? ;
.bss:004226A8                 db    ? ;
.bss:004226A9                 db    ? ;
.bss:004226AA                 db    ? ;
.bss:004226AB                 db    ? ;
.bss:004226AC                 db    ? ;
.bss:004226AD                 db    ? ;
.bss:004226AE                 db    ? ;
.bss:004226AF                 db    ? ;
.bss:004226B0                 db    ? ;
.bss:004226B1                 db    ? ;
.bss:004226B2                 db    ? ;
.bss:004226B3                 db    ? ;
.bss:004226B4                 db    ? ;
.bss:004226B5                 db    ? ;
.bss:004226B6                 db    ? ;
.bss:004226B7                 db    ? ;
.bss:004226B8                 db    ? ;
.bss:004226B9                 db    ? ;
.bss:004226BA                 db    ? ;
.bss:004226BB                 db    ? ;
.bss:004226BC                 db    ? ;
.bss:004226BD                 db    ? ;
.bss:004226BE                 db    ? ;
.bss:004226BF                 db    ? ;
.bss:004226C0                 db    ? ;
.bss:004226C1                 db    ? ;
.bss:004226C2                 db    ? ;
.bss:004226C3                 db    ? ;
.bss:004226C4                 db    ? ;
.bss:004226C5                 db    ? ;
.bss:004226C6                 db    ? ;
.bss:004226C7                 db    ? ;
.bss:004226C8                 db    ? ;
.bss:004226C9                 db    ? ;
.bss:004226CA                 db    ? ;
.bss:004226CB                 db    ? ;
.bss:004226CC                 db    ? ;
.bss:004226CD                 db    ? ;
.bss:004226CE                 db    ? ;
.bss:004226CF                 db    ? ;
.bss:004226D0                 db    ? ;
.bss:004226D1                 db    ? ;
.bss:004226D2                 db    ? ;
.bss:004226D3                 db    ? ;
.bss:004226D4                 db    ? ;
.bss:004226D5                 db    ? ;
.bss:004226D6                 db    ? ;
.bss:004226D7                 db    ? ;
.bss:004226D8                 db    ? ;
.bss:004226D9                 db    ? ;
.bss:004226DA                 db    ? ;
.bss:004226DB                 db    ? ;
.bss:004226DC                 db    ? ;
.bss:004226DD                 db    ? ;
.bss:004226DE                 db    ? ;
.bss:004226DF                 db    ? ;
.bss:004226E0                 db    ? ;
.bss:004226E1                 db    ? ;
.bss:004226E2                 db    ? ;
.bss:004226E3                 db    ? ;
.bss:004226E4                 db    ? ;
.bss:004226E5                 db    ? ;
.bss:004226E6                 db    ? ;
.bss:004226E7                 db    ? ;
.bss:004226E8                 db    ? ;
.bss:004226E9                 db    ? ;
.bss:004226EA                 db    ? ;
.bss:004226EB                 db    ? ;
.bss:004226EC                 db    ? ;
.bss:004226ED                 db    ? ;
.bss:004226EE                 db    ? ;
.bss:004226EF                 db    ? ;
.bss:004226F0                 db    ? ;
.bss:004226F1                 db    ? ;
.bss:004226F2                 db    ? ;
.bss:004226F3                 db    ? ;
.bss:004226F4                 db    ? ;
.bss:004226F5                 db    ? ;
.bss:004226F6                 db    ? ;
.bss:004226F7                 db    ? ;
.bss:004226F8                 db    ? ;
.bss:004226F9                 db    ? ;
.bss:004226FA                 db    ? ;
.bss:004226FB                 db    ? ;
.bss:004226FC                 db    ? ;
.bss:004226FD                 db    ? ;
.bss:004226FE                 db    ? ;
.bss:004226FF                 db    ? ;
.bss:00422700                 db    ? ;
.bss:00422701                 db    ? ;
.bss:00422702                 db    ? ;
.bss:00422703                 db    ? ;
.bss:00422704                 db    ? ;
.bss:00422705                 db    ? ;
.bss:00422706                 db    ? ;
.bss:00422707                 db    ? ;
.bss:00422708                 db    ? ;
.bss:00422709                 db    ? ;
.bss:0042270A                 db    ? ;
.bss:0042270B                 db    ? ;
.bss:0042270C                 db    ? ;
.bss:0042270D                 db    ? ;
.bss:0042270E                 db    ? ;
.bss:0042270F                 db    ? ;
.bss:00422710                 db    ? ;
.bss:00422711                 db    ? ;
.bss:00422712                 db    ? ;
.bss:00422713                 db    ? ;
.bss:00422714                 db    ? ;
.bss:00422715                 db    ? ;
.bss:00422716                 db    ? ;
.bss:00422717                 db    ? ;
.bss:00422718                 db    ? ;
.bss:00422719                 db    ? ;
.bss:0042271A                 db    ? ;
.bss:0042271B                 db    ? ;
.bss:0042271C                 db    ? ;
.bss:0042271D                 db    ? ;
.bss:0042271E                 db    ? ;
.bss:0042271F                 db    ? ;
.bss:00422720                 db    ? ;
.bss:00422721                 db    ? ;
.bss:00422722                 db    ? ;
.bss:00422723                 db    ? ;
.bss:00422724                 db    ? ;
.bss:00422725                 db    ? ;
.bss:00422726                 db    ? ;
.bss:00422727                 db    ? ;
.bss:00422728                 db    ? ;
.bss:00422729                 db    ? ;
.bss:0042272A                 db    ? ;
.bss:0042272B                 db    ? ;
.bss:0042272C                 db    ? ;
.bss:0042272D                 db    ? ;
.bss:0042272E                 db    ? ;
.bss:0042272F                 db    ? ;
.bss:00422730                 db    ? ;
.bss:00422731                 db    ? ;
.bss:00422732                 db    ? ;
.bss:00422733                 db    ? ;
.bss:00422734                 db    ? ;
.bss:00422735                 db    ? ;
.bss:00422736                 db    ? ;
.bss:00422737                 db    ? ;
.bss:00422738                 db    ? ;
.bss:00422739                 db    ? ;
.bss:0042273A                 db    ? ;
.bss:0042273B                 db    ? ;
.bss:0042273C                 db    ? ;
.bss:0042273D                 db    ? ;
.bss:0042273E                 db    ? ;
.bss:0042273F                 db    ? ;
.bss:00422740                 db    ? ;
.bss:00422741                 db    ? ;
.bss:00422742                 db    ? ;
.bss:00422743                 db    ? ;
.bss:00422744                 db    ? ;
.bss:00422745                 db    ? ;
.bss:00422746                 db    ? ;
.bss:00422747                 db    ? ;
.bss:00422748                 db    ? ;
.bss:00422749                 db    ? ;
.bss:0042274A                 db    ? ;
.bss:0042274B                 db    ? ;
.bss:0042274C                 db    ? ;
.bss:0042274D                 db    ? ;
.bss:0042274E                 db    ? ;
.bss:0042274F                 db    ? ;
.bss:00422750                 db    ? ;
.bss:00422751                 db    ? ;
.bss:00422752                 db    ? ;
.bss:00422753                 db    ? ;
.bss:00422754                 db    ? ;
.bss:00422755                 db    ? ;
.bss:00422756                 db    ? ;
.bss:00422757                 db    ? ;
.bss:00422758                 db    ? ;
.bss:00422759                 db    ? ;
.bss:0042275A                 db    ? ;
.bss:0042275B                 db    ? ;
.bss:0042275C                 db    ? ;
.bss:0042275D                 db    ? ;
.bss:0042275E                 db    ? ;
.bss:0042275F                 db    ? ;
.bss:00422760                 db    ? ;
.bss:00422761                 db    ? ;
.bss:00422762                 db    ? ;
.bss:00422763                 db    ? ;
.bss:00422764                 db    ? ;
.bss:00422765                 db    ? ;
.bss:00422766                 db    ? ;
.bss:00422767                 db    ? ;
.bss:00422768                 db    ? ;
.bss:00422769                 db    ? ;
.bss:0042276A                 db    ? ;
.bss:0042276B                 db    ? ;
.bss:0042276C                 db    ? ;
.bss:0042276D                 db    ? ;
.bss:0042276E                 db    ? ;
.bss:0042276F                 db    ? ;
.bss:00422770                 db    ? ;
.bss:00422771                 db    ? ;
.bss:00422772                 db    ? ;
.bss:00422773                 db    ? ;
.bss:00422774                 db    ? ;
.bss:00422775                 db    ? ;
.bss:00422776                 db    ? ;
.bss:00422777                 db    ? ;
.bss:00422778                 db    ? ;
.bss:00422779                 db    ? ;
.bss:0042277A                 db    ? ;
.bss:0042277B                 db    ? ;
.bss:0042277C                 db    ? ;
.bss:0042277D                 db    ? ;
.bss:0042277E                 db    ? ;
.bss:0042277F                 db    ? ;
.bss:00422780                 db    ? ;
.bss:00422781                 db    ? ;
.bss:00422782                 db    ? ;
.bss:00422783                 db    ? ;
.bss:00422784                 db    ? ;
.bss:00422785                 db    ? ;
.bss:00422786                 db    ? ;
.bss:00422787                 db    ? ;
.bss:00422788                 db    ? ;
.bss:00422789                 db    ? ;
.bss:0042278A                 db    ? ;
.bss:0042278B                 db    ? ;
.bss:0042278C                 db    ? ;
.bss:0042278D                 db    ? ;
.bss:0042278E                 db    ? ;
.bss:0042278F                 db    ? ;
.bss:00422790                 db    ? ;
.bss:00422791                 db    ? ;
.bss:00422792                 db    ? ;
.bss:00422793                 db    ? ;
.bss:00422794                 db    ? ;
.bss:00422795                 db    ? ;
.bss:00422796                 db    ? ;
.bss:00422797                 db    ? ;
.bss:00422798                 db    ? ;
.bss:00422799                 db    ? ;
.bss:0042279A                 db    ? ;
.bss:0042279B                 db    ? ;
.bss:0042279C                 db    ? ;
.bss:0042279D                 db    ? ;
.bss:0042279E                 db    ? ;
.bss:0042279F                 db    ? ;
.bss:004227A0                 db    ? ;
.bss:004227A1                 db    ? ;
.bss:004227A2                 db    ? ;
.bss:004227A3                 db    ? ;
.bss:004227A4                 db    ? ;
.bss:004227A5                 db    ? ;
.bss:004227A6                 db    ? ;
.bss:004227A7                 db    ? ;
.bss:004227A8                 db    ? ;
.bss:004227A9                 db    ? ;
.bss:004227AA                 db    ? ;
.bss:004227AB                 db    ? ;
.bss:004227AC                 db    ? ;
.bss:004227AD                 db    ? ;
.bss:004227AE                 db    ? ;
.bss:004227AF                 db    ? ;
.bss:004227B0                 db    ? ;
.bss:004227B1                 db    ? ;
.bss:004227B2                 db    ? ;
.bss:004227B3                 db    ? ;
.bss:004227B4                 db    ? ;
.bss:004227B5                 db    ? ;
.bss:004227B6                 db    ? ;
.bss:004227B7                 db    ? ;
.bss:004227B8                 db    ? ;
.bss:004227B9                 db    ? ;
.bss:004227BA                 db    ? ;
.bss:004227BB                 db    ? ;
.bss:004227BC                 db    ? ;
.bss:004227BD                 db    ? ;
.bss:004227BE                 db    ? ;
.bss:004227BF                 db    ? ;
.bss:004227C0                 db    ? ;
.bss:004227C1                 db    ? ;
.bss:004227C2                 db    ? ;
.bss:004227C3                 db    ? ;
.bss:004227C4                 db    ? ;
.bss:004227C5                 db    ? ;
.bss:004227C6                 db    ? ;
.bss:004227C7                 db    ? ;
.bss:004227C8                 db    ? ;
.bss:004227C9                 db    ? ;
.bss:004227CA                 db    ? ;
.bss:004227CB                 db    ? ;
.bss:004227CC                 db    ? ;
.bss:004227CD                 db    ? ;
.bss:004227CE                 db    ? ;
.bss:004227CF                 db    ? ;
.bss:004227D0                 db    ? ;
.bss:004227D1                 db    ? ;
.bss:004227D2                 db    ? ;
.bss:004227D3                 db    ? ;
.bss:004227D4                 db    ? ;
.bss:004227D5                 db    ? ;
.bss:004227D6                 db    ? ;
.bss:004227D7                 db    ? ;
.bss:004227D8                 db    ? ;
.bss:004227D9                 db    ? ;
.bss:004227DA                 db    ? ;
.bss:004227DB                 db    ? ;
.bss:004227DC                 db    ? ;
.bss:004227DD                 db    ? ;
.bss:004227DE                 db    ? ;
.bss:004227DF                 db    ? ;
.bss:004227E0                 db    ? ;
.bss:004227E1                 db    ? ;
.bss:004227E2                 db    ? ;
.bss:004227E3                 db    ? ;
.bss:004227E4                 db    ? ;
.bss:004227E5                 db    ? ;
.bss:004227E6                 db    ? ;
.bss:004227E7                 db    ? ;
.bss:004227E8                 db    ? ;
.bss:004227E9                 db    ? ;
.bss:004227EA                 db    ? ;
.bss:004227EB                 db    ? ;
.bss:004227EC                 db    ? ;
.bss:004227ED                 db    ? ;
.bss:004227EE                 db    ? ;
.bss:004227EF                 db    ? ;
.bss:004227F0                 db    ? ;
.bss:004227F1                 db    ? ;
.bss:004227F2                 db    ? ;
.bss:004227F3                 db    ? ;
.bss:004227F4                 db    ? ;
.bss:004227F5                 db    ? ;
.bss:004227F6                 db    ? ;
.bss:004227F7                 db    ? ;
.bss:004227F8                 db    ? ;
.bss:004227F9                 db    ? ;
.bss:004227FA                 db    ? ;
.bss:004227FB                 db    ? ;
.bss:004227FC                 db    ? ;
.bss:004227FD                 db    ? ;
.bss:004227FE                 db    ? ;
.bss:004227FF                 db    ? ;
.bss:00422800                 db    ? ;
.bss:00422801                 db    ? ;
.bss:00422802                 db    ? ;
.bss:00422803                 db    ? ;
.bss:00422804                 db    ? ;
.bss:00422805                 db    ? ;
.bss:00422806                 db    ? ;
.bss:00422807                 db    ? ;
.bss:00422808                 db    ? ;
.bss:00422809                 db    ? ;
.bss:0042280A                 db    ? ;
.bss:0042280B                 db    ? ;
.bss:0042280C                 db    ? ;
.bss:0042280D                 db    ? ;
.bss:0042280E                 db    ? ;
.bss:0042280F                 db    ? ;
.bss:00422810 dword_422810    dd ?                    ; DATA XREF: sub_41A480+7↑r
.bss:00422810                                         ; sub_41A480+2B↑w ...
.bss:00422814                 align 10h
.bss:00422820 ; struct _SYSTEM_INFO SystemInfo
.bss:00422820 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_41A480+21↑o
.bss:00422820                                         ; sub_41A480+33↑o
.bss:00422844                 align 10h
.bss:00422850 dword_422850    dd ?                    ; DATA XREF: sub_415FF0+3↑r
.bss:00422850                                         ; .text:loc_41A8A2↑w ...
.bss:00422854                 align 10h
.bss:00422860 dword_422860    dd ?                    ; DATA XREF: sub_41B600+8↑r
.bss:00422860                                         ; sub_41B710:loc_41B792↑w ...
.bss:00422864                 align 10h
.bss:00422870 ; struct _OSVERSIONINFOA VersionInformation
.bss:00422870 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_41B710:loc_41B730↑o
.bss:00422870                                         ; sub_41B710+2C↑w ...
.bss:00422904 word_422904     dw ?                    ; DATA XREF: sub_41B710:loc_41B7C3↑r
.bss:00422906                 align 4
.bss:00422908 word_422908     dw ?                    ; DATA XREF: .text:loc_41B186↑r
.bss:00422908                                         ; .text:0041B1B4↑r ...
.bss:0042290A byte_42290A     db ?                    ; DATA XREF: .text:0041B145↑r
.bss:0042290B                 align 10h
.bss:00422910 dword_422910    dd ?                    ; DATA XREF: sub_41B710+6↑r
.bss:00422910                                         ; sub_41B710+75↑w
.bss:00422914                 align 10h
.bss:00422920 dword_422920    dd ?                    ; DATA XREF: sub_41D5C0+6E↑r
.bss:00422920                                         ; sub_41D5C0+9A↑r ...
.bss:00422924 dword_422924    dd ?                    ; DATA XREF: sub_41D5C0:loc_41D628↑r
.bss:00422924                                         ; sub_41D5C0+A0↑r ...
.bss:00422928                 align 10h
.bss:00422930 dword_422930    dd ?                    ; DATA XREF: sub_401EE0+3E↑w
.bss:00422930                                         ; sub_401EE0+1BD↑r ...
.bss:00422934                 db    ? ;
.bss:00422935                 db    ? ;
.bss:00422936                 db    ? ;
.bss:00422937                 db    ? ;
.bss:00422938                 db    ? ;
.bss:00422939                 db    ? ;
.bss:0042293A                 db    ? ;
.bss:0042293B                 db    ? ;
.bss:0042293C                 db    ? ;
.bss:0042293D                 db    ? ;
.bss:0042293E                 db    ? ;
.bss:0042293F                 db    ? ;
.bss:00422940                 db    ? ;
.bss:00422941                 db    ? ;
.bss:00422942                 db    ? ;
.bss:00422943                 db    ? ;
.bss:00422944                 db    ? ;
.bss:00422945                 db    ? ;
.bss:00422946                 db    ? ;
.bss:00422947                 db    ? ;
.bss:00422948                 db    ? ;
.bss:00422949                 db    ? ;
.bss:0042294A                 db    ? ;
.bss:0042294B                 db    ? ;
.bss:0042294C                 db    ? ;
.bss:0042294D                 db    ? ;
.bss:0042294E                 db    ? ;
.bss:0042294F                 db    ? ;
.bss:00422950 ; char dword_422950[]
.bss:00422950 dword_422950    dd ?                    ; DATA XREF: sub_401EE0+1EE↑r
.bss:00422950                                         ; sub_401EE0+21B↑r ...
.bss:00422954                 align 10h
.bss:00422960 dword_422960    dd ?                    ; DATA XREF: .text:00411E60↑r
.bss:00422960                                         ; .text:00411E69↑w ...
.bss:00422964                 align 10h
.bss:00422970 dword_422970    dd ?                    ; CODE XREF: sub_415E54+63↑p
.bss:00422970                                         ; DATA XREF: sub_415D50+1E↑r ...
.bss:00422974                 align 10h
.bss:00422980 dword_422980    dd ?                    ; DATA XREF: sub_415D50+4E↑w
.bss:00422980                                         ; sub_415E54+AB↑w
.bss:00422984                 db    ? ;
.bss:00422985                 db    ? ;
.bss:00422986                 db    ? ;
.bss:00422987                 db    ? ;
.bss:00422988                 db    ? ;
.bss:00422989                 db    ? ;
.bss:0042298A                 db    ? ;
.bss:0042298B                 db    ? ;
.bss:0042298C                 db    ? ;
.bss:0042298D                 db    ? ;
.bss:0042298E                 db    ? ;
.bss:0042298F                 db    ? ;
.bss:00422990                 db    ? ;
.bss:00422991                 db    ? ;
.bss:00422992                 db    ? ;
.bss:00422993                 db    ? ;
.bss:00422994                 db    ? ;
.bss:00422995                 db    ? ;
.bss:00422996                 db    ? ;
.bss:00422997                 db    ? ;
.bss:00422998                 db    ? ;
.bss:00422999                 db    ? ;
.bss:0042299A                 db    ? ;
.bss:0042299B                 db    ? ;
.bss:0042299C                 db    ? ;
.bss:0042299D                 db    ? ;
.bss:0042299E                 db    ? ;
.bss:0042299F                 db    ? ;
.bss:004229A0                 db    ? ;
.bss:004229A1                 db    ? ;
.bss:004229A2                 db    ? ;
.bss:004229A3                 db    ? ;
.bss:004229A4                 db    ? ;
.bss:004229A5                 db    ? ;
.bss:004229A6                 db    ? ;
.bss:004229A7                 db    ? ;
.bss:004229A8                 db    ? ;
.bss:004229A9                 db    ? ;
.bss:004229AA                 db    ? ;
.bss:004229AB                 db    ? ;
.bss:004229AC                 db    ? ;
.bss:004229AD                 db    ? ;
.bss:004229AE                 db    ? ;
.bss:004229AF                 db    ? ;
.bss:004229B0 dword_4229B0    dd ?                    ; DATA XREF: sub_415E54+13↑r
.bss:004229B4                 align 800h
.bss:004229B4 _bss            ends
.bss:004229B4
.idata:00423000 ; Section 4. (virtual address 00023000)
.idata:00423000 ; Virtual size                  : 000010D4 (   4308.)
.idata:00423000 ; Section size in file          : 00001200 (   4608.)
.idata:00423000 ; Offset to raw data for section: 0001FC00
.idata:00423000 ; Flags C0000040: Data Readable Writable
.idata:00423000 ; Alignment     : default
.idata:00423000 ; ===========================================================================
.idata:00423000
.idata:00423000 ; Segment type: Externs
.idata:00423000 ; _idata
.idata:00423000
.idata:00423001
.idata:00423324 ;
.idata:00423324 ; Imports from libintl3.dll
.idata:00423324 ;
.idata:00423324                 extrn libintl_bindtextdomain:dword
.idata:00423324                                         ; CODE XREF: sub_401EE0+67↑p
.idata:00423324                                         ; DATA XREF: sub_401EE0+67↑r ...
.idata:00423328                 extrn libintl_gettext:dword
.idata:00423328                                         ; CODE XREF: sub_401EE0+1B1↑p
.idata:00423328                                         ; sub_401EE0+20D↑p ...
.idata:0042332C                 extrn libintl_textdomain:dword
.idata:0042332C                                         ; CODE XREF: sub_401EE0+74↑p
.idata:0042332C                                         ; DATA XREF: sub_401EE0+74↑r ...
.idata:00423330
.idata:00423338 ;
.idata:00423338 ; Imports from ADVAPI32.DLL
.idata:00423338 ;
.idata:00423338 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00423338                 extrn __imp_RegCloseKey:dword
.idata:00423338                                         ; DATA XREF: RegCloseKey↑r
.idata:0042333C ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0042333C                 extrn __imp_RegOpenKeyExA:dword
.idata:0042333C                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00423340 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00423340                 extrn __imp_RegQueryValueExA:dword
.idata:00423340                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00423344
.idata:0042334C ;
.idata:0042334C ; Imports from KERNEL32.dll
.idata:0042334C ;
.idata:0042334C ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0042334C                 extrn __imp_AreFileApisANSI:dword
.idata:0042334C                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00423350 ; BOOL (__stdcall *BackupWrite)(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.idata:00423350                 extrn __imp_BackupWrite:dword
.idata:00423350                                         ; DATA XREF: BackupWrite↑r
.idata:00423354 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00423354                 extrn __imp_CloseHandle:dword
.idata:00423354                                         ; DATA XREF: CloseHandle↑r
.idata:00423358 ; BOOL (__stdcall *CopyFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:00423358                 extrn __imp_CopyFileA:dword
.idata:00423358                                         ; DATA XREF: CopyFileA↑r
.idata:0042335C ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0042335C                 extrn __imp_CreateDirectoryA:dword
.idata:0042335C                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00423360 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00423360                 extrn __imp_CreateFileA:dword
.idata:00423360                                         ; DATA XREF: CreateFileA↑r
.idata:00423364 ; HANDLE (__stdcall *CreateNamedPipeA)(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00423364                 extrn __imp_CreateNamedPipeA:dword
.idata:00423364                                         ; DATA XREF: CreateNamedPipeA↑r
.idata:00423368 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:00423368                 extrn __imp_DeleteFileA:dword
.idata:00423368                                         ; DATA XREF: DeleteFileA↑r
.idata:0042336C ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0042336C                 extrn __imp_DeviceIoControl:dword
.idata:0042336C                                         ; DATA XREF: DeviceIoControl↑r
.idata:00423370 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00423370                 extrn __imp_ExitProcess:dword
.idata:00423370                                         ; DATA XREF: ExitProcess↑r
.idata:00423374 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00423374                 extrn __imp_FindClose:dword
.idata:00423374                                         ; DATA XREF: FindClose↑r
.idata:00423378 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00423378                 extrn __imp_FindFirstFileA:dword
.idata:00423378                                         ; DATA XREF: FindFirstFileA↑r
.idata:0042337C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0042337C                 extrn __imp_FindNextFileA:dword
.idata:0042337C                                         ; DATA XREF: FindNextFileA↑r
.idata:00423380 ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:00423380                 extrn __imp_FormatMessageA:dword
.idata:00423380                                         ; DATA XREF: FormatMessageA↑r
.idata:00423384 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00423384                 extrn __imp_FreeLibrary:dword
.idata:00423384                                         ; DATA XREF: FreeLibrary↑r
.idata:00423388 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00423388                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00423388                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0042338C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0042338C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0042338C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00423390 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00423390                 extrn __imp_GetDriveTypeA:dword
.idata:00423390                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00423394 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00423394                 extrn __imp_GetFileAttributesA:dword
.idata:00423394                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00423398 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00423398                 extrn __imp_GetFileInformationByHandle:dword
.idata:00423398                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0042339C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0042339C                 extrn __imp_GetFileSize:dword
.idata:0042339C                                         ; DATA XREF: GetFileSize↑r
.idata:004233A0 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:004233A0                 extrn __imp_GetFileType:dword
.idata:004233A0                                         ; DATA XREF: GetFileType↑r
.idata:004233A4 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:004233A4                 extrn __imp_GetFullPathNameA:dword
.idata:004233A4                                         ; DATA XREF: GetFullPathNameA↑r
.idata:004233A8 ; DWORD (__stdcall *GetLastError)()
.idata:004233A8                 extrn __imp_GetLastError:dword
.idata:004233A8                                         ; DATA XREF: GetLastError↑r
.idata:004233AC ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004233AC                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:004233AC                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:004233B0 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:004233B0                 extrn __imp_GetModuleFileNameA:dword
.idata:004233B0                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:004233B4 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:004233B4                 extrn __imp_GetModuleHandleA:dword
.idata:004233B4                                         ; DATA XREF: GetModuleHandleA↑r
.idata:004233B8 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:004233B8                 extrn __imp_GetProcAddress:dword
.idata:004233B8                                         ; DATA XREF: GetProcAddress↑r
.idata:004233BC ; HANDLE (__stdcall *GetProcessHeap)()
.idata:004233BC                 extrn __imp_GetProcessHeap:dword
.idata:004233BC                                         ; DATA XREF: GetProcessHeap↑r
.idata:004233C0 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:004233C0                 extrn __imp_GetShortPathNameA:dword
.idata:004233C0                                         ; DATA XREF: GetShortPathNameA↑r
.idata:004233C4 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:004233C4                 extrn __imp_GetSystemInfo:dword
.idata:004233C4                                         ; DATA XREF: GetSystemInfo↑r
.idata:004233C8 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:004233C8                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:004233C8                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:004233CC ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:004233CC                 extrn __imp_GetTimeZoneInformation:dword
.idata:004233CC                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:004233D0 ; DWORD (__stdcall *GetVersion)()
.idata:004233D0                 extrn __imp_GetVersion:dword
.idata:004233D0                                         ; DATA XREF: GetVersion↑r
.idata:004233D4 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:004233D4                 extrn __imp_GetVersionExA:dword
.idata:004233D4                                         ; DATA XREF: GetVersionExA↑r
.idata:004233D8 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:004233D8                 extrn __imp_GetVolumeInformationA:dword
.idata:004233D8                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:004233DC ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:004233DC                 extrn __imp_HeapAlloc:dword
.idata:004233DC                                         ; DATA XREF: HeapAlloc↑r
.idata:004233E0 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:004233E0                 extrn __imp_HeapFree:dword
.idata:004233E0                                         ; DATA XREF: HeapFree↑r
.idata:004233E4 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004233E4                 extrn __imp_LoadLibraryA:dword
.idata:004233E4                                         ; DATA XREF: LoadLibraryA↑r
.idata:004233E8 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004233E8                 extrn __imp_LocalFree:dword
.idata:004233E8                                         ; DATA XREF: LocalFree↑r
.idata:004233EC ; BOOL (__stdcall *MoveFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.idata:004233EC                 extrn __imp_MoveFileA:dword
.idata:004233EC                                         ; DATA XREF: MoveFileA↑r
.idata:004233F0 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004233F0                 extrn __imp_MultiByteToWideChar:dword
.idata:004233F0                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004233F4 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004233F4                 extrn __imp_PeekNamedPipe:dword
.idata:004233F4                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004233F8 ; BOOL (__stdcall *RemoveDirectoryA)(LPCSTR lpPathName)
.idata:004233F8                 extrn __imp_RemoveDirectoryA:dword
.idata:004233F8                                         ; DATA XREF: RemoveDirectoryA↑r
.idata:004233FC ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:004233FC                 extrn __imp_SetCurrentDirectoryA:dword
.idata:004233FC                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:00423400 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:00423400                 extrn __imp_SetEndOfFile:dword
.idata:00423400                                         ; DATA XREF: SetEndOfFile↑r
.idata:00423404 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00423404                 extrn __imp_SetErrorMode:dword
.idata:00423404                                         ; DATA XREF: SetErrorMode↑r
.idata:00423408 ; BOOL (__stdcall *SetFileAttributesA)(LPCSTR lpFileName, DWORD dwFileAttributes)
.idata:00423408                 extrn __imp_SetFileAttributesA:dword
.idata:00423408                                         ; DATA XREF: SetFileAttributesA↑r
.idata:0042340C ; BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.idata:0042340C                 extrn __imp_SetFileTime:dword
.idata:0042340C                                         ; DATA XREF: SetFileTime↑r
.idata:00423410 ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:00423410                 extrn __imp_SetLastError:dword
.idata:00423410                                         ; DATA XREF: SetLastError↑r
.idata:00423414 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00423414                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00423414                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00423418 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00423418                 extrn __imp_UnlockFile:dword
.idata:00423418                                         ; DATA XREF: UnlockFile↑r
.idata:0042341C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0042341C                 extrn __imp_lstrcmpiA:dword
.idata:0042341C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00423420 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00423420                 extrn __imp_lstrcpyA:dword
.idata:00423420                                         ; DATA XREF: lstrcpyA↑r
.idata:00423424
.idata:0042342C ;
.idata:0042342C ; Imports from msvcrt.dll
.idata:0042342C ;
.idata:0042342C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0042342C                 extrn __imp__chmod:dword
.idata:0042342C                                         ; DATA XREF: _chmod↑r
.idata:00423430 ; int (__cdecl *_close)(int FileHandle)
.idata:00423430                 extrn __imp__close:dword
.idata:00423430                                         ; DATA XREF: _close↑r
.idata:00423434 ; int (__cdecl *_getpid)()
.idata:00423434                 extrn __imp__getpid:dword
.idata:00423434                                         ; DATA XREF: _getpid↑r
.idata:00423438 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00423438                 extrn __imp__isatty:dword
.idata:00423438                                         ; DATA XREF: _isatty↑r
.idata:0042343C ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0042343C                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00423440 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00423440                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:00423444 ; char *(__cdecl *_strdup)(const char *String)
.idata:00423444                 extrn __imp__strdup:dword
.idata:00423444                                         ; DATA XREF: _strdup↑r
.idata:00423448 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00423448                 extrn __imp__stricmp:dword
.idata:00423448                                         ; DATA XREF: _stricmp↑r
.idata:0042344C ; int (__cdecl *_umask)(int Mode)
.idata:0042344C                 extrn __imp__umask:dword
.idata:0042344C                                         ; DATA XREF: _umask↑r
.idata:00423450 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:00423450                 extrn __imp__write:dword
.idata:00423450                                         ; DATA XREF: _write↑r
.idata:00423454
.idata:0042345C ;
.idata:0042345C ; Imports from MSVCP60.DLL
.idata:0042345C ;
.idata:0042345C ; wint_t (__cdecl *btowc)(int Ch)
.idata:0042345C                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:00423460 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00423460                 extrn __imp_mbrtowc:dword
.idata:00423460                                         ; DATA XREF: mbrtowc↑r
.idata:00423464 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:00423464                 extrn __imp_wctype:dword
.idata:00423464                                         ; DATA XREF: wctype↑r
.idata:00423468
.idata:00423470 ;
.idata:00423470 ; Imports from msvcrt.dll
.idata:00423470 ;
.idata:00423470                 extrn __imp___getmainargs:dword
.idata:00423470                                         ; DATA XREF: __getmainargs↑r
.idata:00423474 ; int _mb_cur_max
.idata:00423474                 extrn __mb_cur_max:dword
.idata:00423474                                         ; DATA XREF: sub_40BF70+49↑r
.idata:00423474                                         ; sub_40D2B0+7↑r ...
.idata:00423478 ; char ***(__cdecl *__p__environ)()
.idata:00423478                 extrn __imp___p__environ:dword
.idata:00423478                                         ; DATA XREF: __p__environ↑r
.idata:0042347C ; int *(__cdecl *__p__fmode)()
.idata:0042347C                 extrn __imp___p__fmode:dword
.idata:0042347C                                         ; DATA XREF: __p__fmode↑r
.idata:00423480 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00423480                 extrn __set_app_type:dword
.idata:00423480                                         ; CODE XREF: start+D↑p
.idata:00423480                                         ; .text:0040102D↑p
.idata:00423480                                         ; DATA XREF: ...
.idata:00423484                 extrn __imp__assert:dword
.idata:00423484                                         ; DATA XREF: _assert↑r
.idata:00423488 ; void (__cdecl *_cexit)()
.idata:00423488                 extrn __imp__cexit:dword
.idata:00423488                                         ; DATA XREF: _cexit↑r
.idata:0042348C ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:0042348C                 extrn __imp__chmod_0:dword
.idata:0042348C                                         ; DATA XREF: _chmod_0↑r
.idata:00423490 ; int (__cdecl *_close_0)(int FileHandle)
.idata:00423490                 extrn __imp__close_0:dword
.idata:00423490                                         ; DATA XREF: _close_0↑r
.idata:00423494 ; int *(__cdecl *_errno)()
.idata:00423494                 extrn __imp__errno:dword
.idata:00423494                                         ; DATA XREF: _errno↑r
.idata:00423498 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00423498                 extrn __imp__fdopen:dword
.idata:00423498                                         ; DATA XREF: _fdopen↑r
.idata:0042349C ; int (__cdecl *_filbuf)(FILE *File)
.idata:0042349C                 extrn __imp__filbuf:dword
.idata:0042349C                                         ; DATA XREF: _filbuf↑r
.idata:004234A0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004234A0                 extrn __imp__filelengthi64:dword
.idata:004234A0                                         ; DATA XREF: _filelengthi64↑r
.idata:004234A4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004234A4                 extrn __imp__flsbuf:dword
.idata:004234A4                                         ; DATA XREF: _flsbuf↑r
.idata:004234A8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004234A8                 extrn __imp__get_osfhandle:dword
.idata:004234A8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004234AC ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004234AC                 extrn __imp__getcwd:dword
.idata:004234AC                                         ; DATA XREF: _getcwd↑r
.idata:004234B0 ; FILE iob[]
.idata:004234B0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004234B0                                         ; sub_401080+75↑r ...
.idata:004234B4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004234B4                 extrn __imp__isctype:dword
.idata:004234B4                                         ; DATA XREF: _isctype↑r
.idata:004234B8 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:004234B8                 extrn __imp__lseeki64:dword
.idata:004234B8                                         ; DATA XREF: _lseeki64↑r
.idata:004234BC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004234BC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004234BC                                         ; DATA XREF: .text:0040106C↑r
.idata:004234C0 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004234C0                 extrn __imp__open_0:dword
.idata:004234C0                                         ; DATA XREF: _open_0↑r
.idata:004234C4 ; int (__cdecl *_open_osfhandle)(intptr_t OSFileHandle, int Flags)
.idata:004234C4                 extrn __imp__open_osfhandle:dword
.idata:004234C4                                         ; DATA XREF: _open_osfhandle↑r
.idata:004234C8 ; const unsigned __int16 *pctype
.idata:004234C8                 extrn _pctype:dword     ; DATA XREF: sub_40BF70:loc_40BFE7↑r
.idata:004234C8                                         ; sub_40D2B0:loc_40D9A4↑r ...
.idata:004234CC ; int (__cdecl *_setjmp)(jmp_buf Buf)
.idata:004234CC                 extrn __imp__setjmp:dword
.idata:004234CC                                         ; DATA XREF: _setjmp↑r
.idata:004234D0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004234D0                 extrn __imp__setmode:dword
.idata:004234D0                                         ; DATA XREF: _setmode↑r
.idata:004234D4 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004234D4                 extrn __imp__stricmp_0:dword
.idata:004234D4                                         ; DATA XREF: _stricmp_0↑r
.idata:004234D8 ; void (__cdecl __noreturn *abort)()
.idata:004234D8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004234DC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004234DC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004234DC                                         ; DATA XREF: sub_401040+C↑r
.idata:004234E0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004234E0                 extrn __imp_calloc:dword
.idata:004234E0                                         ; DATA XREF: calloc↑r
.idata:004234E4 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:004234E4                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:004234E8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004234E8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004234EC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004234EC                 extrn __imp_fclose:dword
.idata:004234EC                                         ; DATA XREF: fclose↑r
.idata:004234F0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004234F0                 extrn __imp_fflush:dword
.idata:004234F0                                         ; DATA XREF: fflush↑r
.idata:004234F4 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004234F4                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004234F8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004234F8                 extrn __imp_fprintf:dword
.idata:004234F8                                         ; DATA XREF: fprintf↑r
.idata:004234FC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004234FC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00423500 ; void (__cdecl *free)(void *Block)
.idata:00423500                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00423504 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00423504                 extrn __imp_fwrite:dword
.idata:00423504                                         ; DATA XREF: fwrite↑r
.idata:00423508 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00423508                 extrn __imp_getenv:dword
.idata:00423508                                         ; DATA XREF: getenv↑r
.idata:0042350C ; int (__cdecl *isalpha)(int C)
.idata:0042350C                 extrn __imp_isalpha:dword
.idata:0042350C                                         ; DATA XREF: isalpha↑r
.idata:00423510 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00423510                 extrn __imp_iswctype:dword
.idata:00423510                                         ; DATA XREF: iswctype↑r
.idata:00423514 ; void (__cdecl __noreturn *longjmp)(jmp_buf Buf, int Value)
.idata:00423514                 extrn __imp_longjmp:dword
.idata:00423514                                         ; DATA XREF: longjmp↑r
.idata:00423518 ; void *(__cdecl *malloc)(size_t Size)
.idata:00423518                 extrn __imp_malloc:dword
.idata:00423518                                         ; DATA XREF: malloc↑r
.idata:0042351C ; size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount)
.idata:0042351C                 extrn __imp_mbstowcs:dword
.idata:0042351C                                         ; DATA XREF: mbstowcs↑r
.idata:00423520 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00423520                 extrn __imp_memchr:dword
.idata:00423520                                         ; DATA XREF: memchr↑r
.idata:00423524 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00423524                 extrn __imp_memcpy:dword
.idata:00423524                                         ; DATA XREF: memcpy↑r
.idata:00423528 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00423528                 extrn __imp_memset:dword
.idata:00423528                                         ; DATA XREF: memset↑r
.idata:0042352C ; int (*printf)(const char *const Format, ...)
.idata:0042352C                 extrn __imp_printf:dword
.idata:0042352C                                         ; DATA XREF: printf↑r
.idata:00423530 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00423530                 extrn __imp_realloc:dword
.idata:00423530                                         ; DATA XREF: realloc↑r
.idata:00423534 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00423534                 extrn __imp_setlocale:dword
.idata:00423534                                         ; DATA XREF: setlocale↑r
.idata:00423538 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00423538                 extrn __imp_signal:dword
.idata:00423538                                         ; DATA XREF: signal↑r
.idata:0042353C ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0042353C                 extrn __imp_sprintf:dword
.idata:0042353C                                         ; DATA XREF: sprintf↑r
.idata:00423540 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00423540                 extrn __imp_sscanf:dword
.idata:00423540                                         ; DATA XREF: sscanf↑r
.idata:00423544 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00423544                 extrn __imp_strcat:dword
.idata:00423544                                         ; DATA XREF: strcat↑r
.idata:00423548 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00423548                 extrn __imp_strchr:dword
.idata:00423548                                         ; DATA XREF: strchr↑r
.idata:0042354C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0042354C                 extrn __imp_strcmp:dword
.idata:0042354C                                         ; DATA XREF: strcmp↑r
.idata:00423550 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00423550                 extrn __imp_strcpy:dword
.idata:00423550                                         ; DATA XREF: strcpy↑r
.idata:00423554 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:00423554                 extrn __imp_strcspn:dword
.idata:00423554                                         ; DATA XREF: strcspn↑r
.idata:00423558 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00423558                 extrn __imp_strerror:dword
.idata:00423558                                         ; DATA XREF: strerror↑r
.idata:0042355C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0042355C                 extrn __imp_strlen:dword
.idata:0042355C                                         ; DATA XREF: strlen↑r
.idata:00423560 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00423560                 extrn __imp_strncat:dword
.idata:00423560                                         ; DATA XREF: strncat↑r
.idata:00423564 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00423564                 extrn __imp_strncmp:dword
.idata:00423564                                         ; DATA XREF: strncmp↑r
.idata:00423568 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00423568                 extrn __imp_strncpy:dword
.idata:00423568                                         ; DATA XREF: strncpy↑r
.idata:0042356C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0042356C                 extrn __imp_strpbrk:dword
.idata:0042356C                                         ; DATA XREF: strpbrk↑r
.idata:00423570 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00423570                 extrn __imp_strrchr:dword
.idata:00423570                                         ; DATA XREF: strrchr↑r
.idata:00423574 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00423574                 extrn __imp_strspn:dword
.idata:00423574                                         ; DATA XREF: strspn↑r
.idata:00423578 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00423578                 extrn __imp_strstr:dword
.idata:00423578                                         ; DATA XREF: strstr↑r
.idata:0042357C ; int (__cdecl *tolower)(int C)
.idata:0042357C                 extrn __imp_tolower:dword
.idata:0042357C                                         ; DATA XREF: tolower↑r
.idata:00423580 ; int (__cdecl *toupper)(int C)
.idata:00423580                 extrn __imp_toupper:dword
.idata:00423580                                         ; DATA XREF: toupper↑r
.idata:00423584 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00423584                 extrn __imp_vfprintf:dword
.idata:00423584                                         ; DATA XREF: vfprintf↑r
.idata:00423588
.idata:00423590 ;
.idata:00423590 ; Imports from OLE32.dll
.idata:00423590 ;
.idata:00423590 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00423590                 extrn __imp_CoCreateInstance:dword
.idata:00423590                                         ; DATA XREF: CoCreateInstance↑r
.idata:00423594 ; void (__stdcall *CoUninitialize)()
.idata:00423594                 extrn __imp_CoUninitialize:dword
.idata:00423594                                         ; DATA XREF: CoUninitialize↑r
.idata:00423598 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00423598                 extrn __imp_OleInitialize:dword
.idata:00423598                                         ; DATA XREF: OleInitialize↑r
.idata:0042359C
.idata:0042359C
.idata:0042359C
.idata:0042359C                 end start
