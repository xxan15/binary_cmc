.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 8B57B585CAC740F496D3AF0900C00D1A19234987C0493C3B8C38B1254BE76D7F
.text:00401000 ; Input MD5    : E8B873DEA00223CD2A72C6D8146998F2
.text:00401000 ; Input CRC32  : 49632E69
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/gecho.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A266 (Wed Apr 20 18:41:42 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000045E0 (  17888.)
.text:00401000 ; Section size in file          : 00004600 (  17920.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401300+99↓p
.text:00401040                                         ; .text:004052D0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405270
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405240
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401300
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405270
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char VarName[]
.text:00401280 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401300+1E↓o
.text:00401290 aN              db '-n',0               ; DATA XREF: sub_401300+40↓o
.text:00401293 ; const char Locale
.text:00401293 Locale          db 0                    ; DATA XREF: sub_401300+56↓o
.text:00401294                 align 10h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401300+70↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401300+78↓o
.text:004012C3                                         ; sub_401300+85↓o
.text:004012CD aFixmeUnknown   db 'FIXME unknown',0    ; DATA XREF: sub_401300+7B9↓o
.text:004012DB a530            db '5.3.0',0            ; DATA XREF: sub_401300+7C9↓o
.text:004012E1 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401300+7D1↓o
.text:004012EF ; const FILE aEcho
.text:004012EF aEcho           db 'echo',0             ; DATA XREF: sub_401300+7D9↓o
.text:004012F4                 db  8Dh
.text:004012F5                 db 0B6h ; ¶
.text:004012F6                 db    0
.text:004012F7                 db    0
.text:004012F8                 db    0
.text:004012F9                 db    0
.text:004012FA                 db  8Dh
.text:004012FB                 db 0BFh ; ¿
.text:004012FC                 db    0
.text:004012FD                 db    0
.text:004012FE                 db    0
.text:004012FF                 db    0
.text:00401300
.text:00401300 ; =============== S U B R O U T I N E =======================================
.text:00401300
.text:00401300 ; Attributes: bp-based frame fuzzy-sp
.text:00401300
.text:00401300 sub_401300      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401300
.text:00401300 VarName         = dword ptr -38h
.text:00401300 Locale          = dword ptr -34h
.text:00401300 var_30          = dword ptr -30h
.text:00401300 var_2C          = dword ptr -2Ch
.text:00401300 var_28          = dword ptr -28h
.text:00401300 var_24          = dword ptr -24h
.text:00401300 var_20          = byte ptr -20h
.text:00401300 var_1C          = dword ptr -1Ch
.text:00401300 var_F           = byte ptr -0Fh
.text:00401300 var_E           = byte ptr -0Eh
.text:00401300 var_D           = byte ptr -0Dh
.text:00401300 arg_0           = dword ptr  8
.text:00401300 arg_4           = dword ptr  0Ch
.text:00401300
.text:00401300                 push    ebp
.text:00401301                 xor     eax, eax
.text:00401303                 mov     ebp, esp
.text:00401305                 push    edi
.text:00401306                 push    esi
.text:00401307                 push    ebx
.text:00401308                 sub     esp, 2Ch
.text:0040130B                 xor     ebx, ebx
.text:0040130D                 and     esp, 0FFFFFFF0h
.text:00401310                 call    __alloca
.text:00401315                 call    sub_405310
.text:0040131A                 mov     [ebp+var_D], 1
.text:0040131E                 mov     [esp+38h+VarName], offset VarName ; "POSIXLY_CORRECT"
.text:00401325                 call    getenv
.text:0040132A                 test    eax, eax
.text:0040132C                 jz      short loc_40134B
.text:0040132E                 cmp     [ebp+arg_0], 1
.text:00401332                 jle     short loc_40134D
.text:00401334                 cld
.text:00401335                 mov     edx, [ebp+arg_4]
.text:00401338                 mov     ecx, 3
.text:0040133D                 mov     esi, [edx+4]
.text:00401340                 mov     edx, offset aN  ; "-n"
.text:00401345                 mov     edi, edx
.text:00401347                 repe cmpsb
.text:00401349                 jnz     short loc_40134D
.text:0040134B
.text:0040134B loc_40134B:                             ; CODE XREF: sub_401300+2C↑j
.text:0040134B                 mov     bl, 1
.text:0040134D
.text:0040134D loc_40134D:                             ; CODE XREF: sub_401300+32↑j
.text:0040134D                                         ; sub_401300+49↑j
.text:0040134D                 mov     [ebp+var_E], 0
.text:00401351                 mov     eax, [ebp+arg_4]
.text:00401354                 mov     ecx, [eax]
.text:00401356                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:0040135E                 mov     [esp+38h+VarName], 0 ; Category
.text:00401365                 mov     ds:dword_407190, ecx
.text:0040136B                 call    setlocale
.text:00401370                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401378                 mov     [esp+38h+VarName], offset aCoreutils ; "coreutils"
.text:0040137F                 call    ds:__imp_libintl_bindtextdomain
.text:00401385                 mov     [esp+38h+VarName], offset aCoreutils ; "coreutils"
.text:0040138C                 call    ds:libintl_textdomain
.text:00401392                 mov     [esp+38h+VarName], offset sub_402130 ; void (__cdecl *)()
.text:00401399                 call    sub_401040
.text:0040139E                 test    bl, bl
.text:004013A0                 jnz     loc_401AAB
.text:004013A6
.text:004013A6 loc_4013A6:                             ; CODE XREF: sub_401300+7ED↓j
.text:004013A6                 dec     [ebp+arg_0]
.text:004013A9                 add     [ebp+arg_4], 4
.text:004013AD                 test    bl, bl
.text:004013AF                 jz      loc_401960
.text:004013B5                 mov     ebx, [ebp+arg_0]
.text:004013B8                 test    ebx, ebx
.text:004013BA                 jle     short loc_4013CA
.text:004013BC                 mov     edi, [ebp+arg_4]
.text:004013BF                 mov     eax, [edi]
.text:004013C1                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004013C4                 jz      loc_4019E3
.text:004013CA
.text:004013CA loc_4013CA:                             ; CODE XREF: sub_401300+BA↑j
.text:004013CA                                         ; sub_401300+6EE↓j ...
.text:004013CA                 cmp     [ebp+var_E], 0
.text:004013CE                 jz      loc_401960
.text:004013D4                 mov     eax, [ebp+arg_0]
.text:004013D7                 test    eax, eax
.text:004013D9                 jle     short loc_401459
.text:004013DB                 nop
.text:004013DC                 lea     esi, [esi+0]
.text:004013E0
.text:004013E0 loc_4013E0:                             ; CODE XREF: sub_401300+157↓j
.text:004013E0                 mov     edx, [ebp+arg_4]
.text:004013E3                 mov     esi, [edx]
.text:004013E5                 movzx   ebx, byte ptr [esi]
.text:004013E8                 inc     esi
.text:004013E9                 test    bl, bl
.text:004013EB                 jz      short loc_401424
.text:004013ED                 lea     esi, [esi+0]
.text:004013F0
.text:004013F0 loc_4013F0:                             ; CODE XREF: sub_401300+122↓j
.text:004013F0                 cmp     bl, 5Ch ; '\'
.text:004013F3                 jz      loc_4014E0
.text:004013F9
.text:004013F9 loc_4013F9:                             ; CODE XREF: sub_401300+1E5↓j
.text:004013F9                                         ; sub_401300+1FD↓j ...
.text:004013F9                 mov     edx, ds:_iob    ; jumptable 004014FD case 92
.text:004013FF                 mov     ecx, [edx+24h]
.text:00401402                 dec     ecx
.text:00401403                 mov     [edx+24h], ecx
.text:00401406                 test    ecx, ecx
.text:00401408                 js      loc_4014C1
.text:0040140E                 mov     edi, ds:_iob
.text:00401414                 mov     eax, [edi+20h]
.text:00401417                 mov     [eax], bl
.text:00401419                 inc     dword ptr [edi+20h]
.text:0040141C
.text:0040141C loc_40141C:                             ; CODE XREF: sub_401300+1D9↓j
.text:0040141C                 movzx   ebx, byte ptr [esi]
.text:0040141F                 inc     esi
.text:00401420                 test    bl, bl
.text:00401422                 jnz     short loc_4013F0
.text:00401424
.text:00401424 loc_401424:                             ; CODE XREF: sub_401300+EB↑j
.text:00401424                 dec     [ebp+arg_0]
.text:00401427                 add     [ebp+arg_4], 4
.text:0040142B                 mov     ebx, [ebp+arg_0]
.text:0040142E                 test    ebx, ebx
.text:00401430                 jle     short loc_401459
.text:00401432                 mov     edi, ds:_iob
.text:00401438                 mov     esi, [edi+24h]
.text:0040143B                 dec     esi
.text:0040143C                 mov     [edi+24h], esi
.text:0040143F                 test    esi, esi
.text:00401441                 js      short loc_4014A6
.text:00401443                 mov     ecx, ds:_iob
.text:00401449                 mov     eax, [ecx+20h]
.text:0040144C                 mov     byte ptr [eax], 20h ; ' '
.text:0040144F                 inc     dword ptr [ecx+20h]
.text:00401452
.text:00401452 loc_401452:                             ; CODE XREF: sub_401300+1BF↓j
.text:00401452                 mov     esi, [ebp+arg_0]
.text:00401455                 test    esi, esi
.text:00401457                 jg      short loc_4013E0
.text:00401459
.text:00401459 loc_401459:                             ; CODE XREF: sub_401300+D9↑j
.text:00401459                                         ; sub_401300+130↑j ...
.text:00401459                 cmp     [ebp+var_D], 0
.text:0040145D                 jz      short loc_40147F ; jumptable 004014FD case 99
.text:0040145F                 mov     edi, ds:_iob
.text:00401465                 mov     ebx, [edi+24h]
.text:00401468                 dec     ebx
.text:00401469                 mov     [edi+24h], ebx
.text:0040146C                 test    ebx, ebx
.text:0040146E                 js      short loc_40148B
.text:00401470                 mov     ecx, ds:_iob
.text:00401476                 mov     eax, [ecx+20h]
.text:00401479                 mov     byte ptr [eax], 0Ah
.text:0040147C                 inc     dword ptr [ecx+20h]
.text:0040147F
.text:0040147F loc_40147F:                             ; CODE XREF: sub_401300+15D↑j
.text:0040147F                                         ; sub_401300+1A4↓j ...
.text:0040147F                 mov     [esp+38h+VarName], 0 ; jumptable 004014FD case 99
.text:00401486                 call    exit
.text:0040148B ; ---------------------------------------------------------------------------
.text:0040148B
.text:0040148B loc_40148B:                             ; CODE XREF: sub_401300+16E↑j
.text:0040148B                 mov     [esp+38h+VarName], 0Ah ; Ch
.text:00401492                 mov     edx, ds:_iob
.text:00401498                 add     edx, 20h ; ' '
.text:0040149B                 mov     [esp+38h+Locale], edx ; File
.text:0040149F                 call    _flsbuf
.text:004014A4                 jmp     short loc_40147F ; jumptable 004014FD case 99
.text:004014A6 ; ---------------------------------------------------------------------------
.text:004014A6
.text:004014A6 loc_4014A6:                             ; CODE XREF: sub_401300+141↑j
.text:004014A6                 mov     [esp+38h+VarName], 20h ; ' ' ; Ch
.text:004014AD                 mov     edx, ds:_iob
.text:004014B3                 add     edx, 20h ; ' '
.text:004014B6                 mov     [esp+38h+Locale], edx ; File
.text:004014BA                 call    _flsbuf
.text:004014BF                 jmp     short loc_401452
.text:004014C1 ; ---------------------------------------------------------------------------
.text:004014C1
.text:004014C1 loc_4014C1:                             ; CODE XREF: sub_401300+108↑j
.text:004014C1                 mov     edx, ds:_iob
.text:004014C7                 movzx   ecx, bl
.text:004014CA                 mov     [esp+38h+VarName], ecx ; Ch
.text:004014CD                 add     edx, 20h ; ' '
.text:004014D0                 mov     [esp+38h+Locale], edx ; File
.text:004014D4                 call    _flsbuf
.text:004014D9                 jmp     loc_40141C
.text:004014D9 ; ---------------------------------------------------------------------------
.text:004014DE                 align 10h
.text:004014E0
.text:004014E0 loc_4014E0:                             ; CODE XREF: sub_401300+F3↑j
.text:004014E0                 movzx   eax, byte ptr [esi]
.text:004014E3                 test    al, al
.text:004014E5                 jz      loc_4013F9      ; jumptable 004014FD case 92
.text:004014EB                 mov     bl, al
.text:004014ED                 inc     esi
.text:004014EE                 movzx   eax, al
.text:004014F1                 sub     eax, 30h ; '0'  ; switch 73 cases
.text:004014F4                 cmp     eax, 48h
.text:004014F7                 ja      def_4014FD      ; jumptable 004014FD default case, cases 56-91,93-96,100,101,103-109,111-113,115,117,119
.text:004014FD                 jmp     ds:jpt_4014FD[eax*4] ; switch jump
.text:004014FD ; ---------------------------------------------------------------------------
.text:00401504 jpt_4014FD      dd offset loc_40162F, offset loc_401645, offset loc_401645
.text:00401504                                         ; DATA XREF: sub_401300+1FD↑r
.text:00401504                 dd offset loc_401645, offset loc_401645, offset loc_401645 ; jump table for switch statement
.text:00401504                 dd offset loc_401645, offset loc_401645, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset loc_4013F9
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset loc_401628, offset loc_40167D
.text:00401504                 dd offset loc_40147F, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset loc_401684, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset loc_40168B
.text:00401504                 dd offset def_4014FD, offset def_4014FD, offset def_4014FD
.text:00401504                 dd offset loc_401692, offset def_4014FD, offset loc_401699
.text:00401504                 dd offset def_4014FD, offset loc_4016A0, offset def_4014FD
.text:00401504                 dd offset loc_4016EA
.text:00401628 ; ---------------------------------------------------------------------------
.text:00401628
.text:00401628 loc_401628:                             ; CODE XREF: sub_401300+1FD↑j
.text:00401628                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:00401628                 mov     bl, 7           ; jumptable 004014FD case 97
.text:0040162A                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:0040162F ; ---------------------------------------------------------------------------
.text:0040162F
.text:0040162F loc_40162F:                             ; CODE XREF: sub_401300+1FD↑j
.text:0040162F                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:0040162F                 movzx   edx, byte ptr [esi] ; jumptable 004014FD case 48
.text:00401632                 xor     ebx, ebx
.text:00401634                 mov     cl, dl
.text:00401636                 sub     cl, 30h ; '0'
.text:00401639                 cmp     cl, 7
.text:0040163C                 ja      loc_4013F9      ; jumptable 004014FD case 92
.text:00401642                 mov     bl, dl
.text:00401644                 inc     esi
.text:00401645
.text:00401645 loc_401645:                             ; CODE XREF: sub_401300+1FD↑j
.text:00401645                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:00401645                 movzx   edx, byte ptr [esi] ; jumptable 004014FD cases 49-55
.text:00401648                 sub     bl, 30h ; '0'
.text:0040164B                 mov     cl, dl
.text:0040164D                 sub     cl, 30h ; '0'
.text:00401650                 cmp     cl, 7
.text:00401653                 ja      short loc_401661
.text:00401655                 shl     bl, 3
.text:00401658                 inc     esi
.text:00401659                 add     bl, dl
.text:0040165B                 movzx   edx, byte ptr [esi]
.text:0040165E                 sub     bl, 30h ; '0'
.text:00401661
.text:00401661 loc_401661:                             ; CODE XREF: sub_401300+353↑j
.text:00401661                 mov     cl, dl
.text:00401663                 sub     cl, 30h ; '0'
.text:00401666                 cmp     cl, 7
.text:00401669                 ja      loc_4013F9      ; jumptable 004014FD case 92
.text:0040166F                 shl     bl, 3
.text:00401672                 inc     esi
.text:00401673                 add     bl, dl
.text:00401675                 sub     bl, 30h ; '0'
.text:00401678                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:0040167D ; ---------------------------------------------------------------------------
.text:0040167D
.text:0040167D loc_40167D:                             ; CODE XREF: sub_401300+1FD↑j
.text:0040167D                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:0040167D                 mov     bl, 8           ; jumptable 004014FD case 98
.text:0040167F                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:00401684 ; ---------------------------------------------------------------------------
.text:00401684
.text:00401684 loc_401684:                             ; CODE XREF: sub_401300+1FD↑j
.text:00401684                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:00401684                 mov     bl, 0Ch         ; jumptable 004014FD case 102
.text:00401686                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:0040168B ; ---------------------------------------------------------------------------
.text:0040168B
.text:0040168B loc_40168B:                             ; CODE XREF: sub_401300+1FD↑j
.text:0040168B                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:0040168B                 mov     bl, 0Ah         ; jumptable 004014FD case 110
.text:0040168D                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:00401692 ; ---------------------------------------------------------------------------
.text:00401692
.text:00401692 loc_401692:                             ; CODE XREF: sub_401300+1FD↑j
.text:00401692                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:00401692                 mov     bl, 0Dh         ; jumptable 004014FD case 114
.text:00401694                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:00401699 ; ---------------------------------------------------------------------------
.text:00401699
.text:00401699 loc_401699:                             ; CODE XREF: sub_401300+1FD↑j
.text:00401699                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:00401699                 mov     bl, 9           ; jumptable 004014FD case 116
.text:0040169B                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:004016A0 ; ---------------------------------------------------------------------------
.text:004016A0
.text:004016A0 loc_4016A0:                             ; CODE XREF: sub_401300+1FD↑j
.text:004016A0                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:004016A0                 mov     bl, 0Bh         ; jumptable 004014FD case 118
.text:004016A2                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:004016A7 ; ---------------------------------------------------------------------------
.text:004016A7
.text:004016A7 def_4014FD:                             ; CODE XREF: sub_401300+1F7↑j
.text:004016A7                                         ; sub_401300+1FD↑j ...
.text:004016A7                 mov     edx, ds:_iob    ; jumptable 004014FD default case, cases 56-91,93-96,100,101,103-109,111-113,115,117,119
.text:004016AD                 mov     edi, [edx+24h]
.text:004016B0                 dec     edi
.text:004016B1                 mov     [edx+24h], edi
.text:004016B4                 test    edi, edi
.text:004016B6                 js      short loc_4016CC
.text:004016B8                 mov     ecx, ds:_iob
.text:004016BE                 mov     eax, [ecx+20h]
.text:004016C1                 mov     byte ptr [eax], 5Ch ; '\'
.text:004016C4                 inc     dword ptr [ecx+20h]
.text:004016C7                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:004016CC ; ---------------------------------------------------------------------------
.text:004016CC
.text:004016CC loc_4016CC:                             ; CODE XREF: sub_401300+3B6↑j
.text:004016CC                 mov     [esp+38h+VarName], 5Ch ; '\' ; Ch
.text:004016D3                 mov     edi, ds:_iob
.text:004016D9                 add     edi, 20h ; ' '
.text:004016DC                 mov     [esp+38h+Locale], edi ; File
.text:004016E0                 call    _flsbuf
.text:004016E5                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:004016EA ; ---------------------------------------------------------------------------
.text:004016EA
.text:004016EA loc_4016EA:                             ; CODE XREF: sub_401300+1FD↑j
.text:004016EA                                         ; DATA XREF: sub_401300:jpt_4014FD↑o
.text:004016EA                 movzx   ecx, byte ptr [esi] ; jumptable 004014FD case 120
.text:004016ED                 mov     edi, ds:__mb_cur_max
.text:004016F3                 movzx   edx, cl
.text:004016F6                 cmp     dword ptr [edi], 1
.text:004016F9                 mov     [ebp+var_F], cl
.text:004016FC                 jz      loc_401944
.text:00401702                 mov     [esp+38h+Locale], 80h ; '€' ; Type
.text:0040170A                 mov     [esp+38h+VarName], edx ; C
.text:0040170D                 call    _isctype
.text:00401712
.text:00401712 loc_401712:                             ; CODE XREF: sub_401300+655↓j
.text:00401712                 test    eax, eax
.text:00401714                 jz      short def_4014FD ; jumptable 004014FD default case, cases 56-91,93-96,100,101,103-109,111-113,115,117,119
.text:00401716                 movzx   eax, [ebp+var_F]
.text:0040171A                 inc     esi
.text:0040171B                 sub     eax, 41h ; 'A'  ; switch 38 cases
.text:0040171E                 cmp     eax, 25h
.text:00401721                 ja      def_401727      ; jumptable 00401727 default case, cases 71-96
.text:00401727                 jmp     ds:jpt_401727[eax*4] ; switch jump
.text:00401727 ; ---------------------------------------------------------------------------
.text:0040172E                 align 10h
.text:00401730 jpt_401727      dd offset loc_401908    ; DATA XREF: sub_401300+427↑r
.text:00401730                 dd offset loc_401912    ; jump table for switch statement
.text:00401730                 dd offset loc_40191C
.text:00401730                 dd offset loc_401926
.text:00401730                 dd offset loc_401930
.text:00401730                 dd offset loc_40193A
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset def_401727
.text:00401730                 dd offset loc_401908
.text:00401730                 dd offset loc_401912
.text:00401730                 dd offset loc_40191C
.text:00401730                 dd offset loc_401926
.text:00401730                 dd offset loc_401930
.text:00401730                 dd offset loc_40193A
.text:004017C8 ; ---------------------------------------------------------------------------
.text:004017C8
.text:004017C8 def_401727:                             ; CODE XREF: sub_401300+421↑j
.text:004017C8                                         ; sub_401300+427↑j
.text:004017C8                                         ; DATA XREF: ...
.text:004017C8                 movzx   eax, [ebp+var_F] ; jumptable 00401727 default case, cases 71-96
.text:004017CC                 sub     eax, 30h ; '0'
.text:004017CF
.text:004017CF loc_4017CF:                             ; CODE XREF: sub_401300+60D↓j
.text:004017CF                                         ; sub_401300+617↓j ...
.text:004017CF                 movzx   ecx, byte ptr [esi]
.text:004017D2                 mov     bl, al
.text:004017D4                 mov     edi, ds:__mb_cur_max
.text:004017DA                 cmp     dword ptr [edi], 1
.text:004017DD                 movzx   edx, cl
.text:004017E0                 mov     [ebp+var_F], cl
.text:004017E3                 jz      loc_4018F2
.text:004017E9                 mov     [esp+38h+Locale], 80h ; '€' ; Type
.text:004017F1                 mov     [esp+38h+VarName], edx ; C
.text:004017F4                 call    _isctype
.text:004017F9
.text:004017F9 loc_4017F9:                             ; CODE XREF: sub_401300+603↓j
.text:004017F9                 test    eax, eax
.text:004017FB                 jz      loc_4013F9      ; jumptable 004014FD case 92
.text:00401801                 movzx   eax, [ebp+var_F]
.text:00401805                 movzx   edx, bl
.text:00401808                 inc     esi
.text:00401809                 shl     edx, 4
.text:0040180C                 sub     eax, 41h ; 'A'  ; switch 38 cases
.text:0040180F                 cmp     eax, 25h
.text:00401812                 ja      def_401818      ; jumptable 00401818 default case, cases 71-96
.text:00401818                 jmp     ds:jpt_401818[eax*4] ; switch jump
.text:00401818 ; ---------------------------------------------------------------------------
.text:0040181F                 align 10h
.text:00401820 jpt_401818      dd offset loc_4018C8    ; DATA XREF: sub_401300+518↑r
.text:00401820                 dd offset loc_4018CF    ; jump table for switch statement
.text:00401820                 dd offset loc_4018D6
.text:00401820                 dd offset loc_4018DD
.text:00401820                 dd offset loc_4018E4
.text:00401820                 dd offset loc_4018EB
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset def_401818
.text:00401820                 dd offset loc_4018C8
.text:00401820                 dd offset loc_4018CF
.text:00401820                 dd offset loc_4018D6
.text:00401820                 dd offset loc_4018DD
.text:00401820                 dd offset loc_4018E4
.text:00401820                 dd offset loc_4018EB
.text:004018B8 ; ---------------------------------------------------------------------------
.text:004018B8
.text:004018B8 def_401818:                             ; CODE XREF: sub_401300+512↑j
.text:004018B8                                         ; sub_401300+518↑j
.text:004018B8                                         ; DATA XREF: ...
.text:004018B8                 movzx   eax, [ebp+var_F] ; jumptable 00401818 default case, cases 71-96
.text:004018BC                 sub     eax, 30h ; '0'
.text:004018BF
.text:004018BF loc_4018BF:                             ; CODE XREF: sub_401300+5CD↓j
.text:004018BF                                         ; sub_401300+5D4↓j ...
.text:004018BF                 mov     bl, dl
.text:004018C1                 add     bl, al
.text:004018C3                 jmp     loc_4013F9      ; jumptable 004014FD case 92
.text:004018C8 ; ---------------------------------------------------------------------------
.text:004018C8
.text:004018C8 loc_4018C8:                             ; CODE XREF: sub_401300+518↑j
.text:004018C8                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018C8                 mov     eax, 0Ah        ; jumptable 00401818 cases 65,97
.text:004018CD                 jmp     short loc_4018BF
.text:004018CF ; ---------------------------------------------------------------------------
.text:004018CF
.text:004018CF loc_4018CF:                             ; CODE XREF: sub_401300+518↑j
.text:004018CF                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018CF                 mov     eax, 0Bh        ; jumptable 00401818 cases 66,98
.text:004018D4                 jmp     short loc_4018BF
.text:004018D6 ; ---------------------------------------------------------------------------
.text:004018D6
.text:004018D6 loc_4018D6:                             ; CODE XREF: sub_401300+518↑j
.text:004018D6                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018D6                 mov     eax, 0Ch        ; jumptable 00401818 cases 67,99
.text:004018DB                 jmp     short loc_4018BF
.text:004018DD ; ---------------------------------------------------------------------------
.text:004018DD
.text:004018DD loc_4018DD:                             ; CODE XREF: sub_401300+518↑j
.text:004018DD                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018DD                 mov     eax, 0Dh        ; jumptable 00401818 cases 68,100
.text:004018E2                 jmp     short loc_4018BF
.text:004018E4 ; ---------------------------------------------------------------------------
.text:004018E4
.text:004018E4 loc_4018E4:                             ; CODE XREF: sub_401300+518↑j
.text:004018E4                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018E4                 mov     eax, 0Eh        ; jumptable 00401818 cases 69,101
.text:004018E9                 jmp     short loc_4018BF
.text:004018EB ; ---------------------------------------------------------------------------
.text:004018EB
.text:004018EB loc_4018EB:                             ; CODE XREF: sub_401300+518↑j
.text:004018EB                                         ; DATA XREF: sub_401300:jpt_401818↑o
.text:004018EB                 mov     eax, 0Fh        ; jumptable 00401818 cases 70,102
.text:004018F0                 jmp     short loc_4018BF
.text:004018F2 ; ---------------------------------------------------------------------------
.text:004018F2
.text:004018F2 loc_4018F2:                             ; CODE XREF: sub_401300+4E3↑j
.text:004018F2                 mov     ecx, ds:_pctype
.text:004018F8                 mov     edi, [ecx]
.text:004018FA                 movzx   eax, word ptr [edi+edx*2]
.text:004018FE                 and     eax, 80h
.text:00401903                 jmp     loc_4017F9
.text:00401908 ; ---------------------------------------------------------------------------
.text:00401908
.text:00401908 loc_401908:                             ; CODE XREF: sub_401300+427↑j
.text:00401908                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:00401908                 mov     eax, 0Ah        ; jumptable 00401727 cases 65,97
.text:0040190D                 jmp     loc_4017CF
.text:00401912 ; ---------------------------------------------------------------------------
.text:00401912
.text:00401912 loc_401912:                             ; CODE XREF: sub_401300+427↑j
.text:00401912                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:00401912                 mov     eax, 0Bh        ; jumptable 00401727 cases 66,98
.text:00401917                 jmp     loc_4017CF
.text:0040191C ; ---------------------------------------------------------------------------
.text:0040191C
.text:0040191C loc_40191C:                             ; CODE XREF: sub_401300+427↑j
.text:0040191C                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:0040191C                 mov     eax, 0Ch        ; jumptable 00401727 cases 67,99
.text:00401921                 jmp     loc_4017CF
.text:00401926 ; ---------------------------------------------------------------------------
.text:00401926
.text:00401926 loc_401926:                             ; CODE XREF: sub_401300+427↑j
.text:00401926                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:00401926                 mov     eax, 0Dh        ; jumptable 00401727 cases 68,100
.text:0040192B                 jmp     loc_4017CF
.text:00401930 ; ---------------------------------------------------------------------------
.text:00401930
.text:00401930 loc_401930:                             ; CODE XREF: sub_401300+427↑j
.text:00401930                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:00401930                 mov     eax, 0Eh        ; jumptable 00401727 cases 69,101
.text:00401935                 jmp     loc_4017CF
.text:0040193A ; ---------------------------------------------------------------------------
.text:0040193A
.text:0040193A loc_40193A:                             ; CODE XREF: sub_401300+427↑j
.text:0040193A                                         ; DATA XREF: sub_401300:jpt_401727↑o
.text:0040193A                 mov     eax, 0Fh        ; jumptable 00401727 cases 70,102
.text:0040193F                 jmp     loc_4017CF
.text:00401944 ; ---------------------------------------------------------------------------
.text:00401944
.text:00401944 loc_401944:                             ; CODE XREF: sub_401300+3FC↑j
.text:00401944                 mov     ecx, ds:_pctype
.text:0040194A                 mov     edi, [ecx]
.text:0040194C                 movzx   eax, word ptr [edi+edx*2]
.text:00401950                 and     eax, 80h
.text:00401955                 jmp     loc_401712
.text:00401955 ; ---------------------------------------------------------------------------
.text:0040195A                 align 10h
.text:00401960
.text:00401960 loc_401960:                             ; CODE XREF: sub_401300+AF↑j
.text:00401960                                         ; sub_401300+CE↑j
.text:00401960                 mov     ebx, [ebp+arg_0]
.text:00401963                 test    ebx, ebx
.text:00401965                 jle     loc_401459
.text:0040196B                 nop
.text:0040196C                 lea     esi, [esi+0]
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_401300+6C1↓j
.text:00401970                 mov     edx, ds:_iob
.text:00401976                 mov     eax, [ebp+arg_4]
.text:00401979                 add     edx, 20h ; ' '
.text:0040197C                 mov     [esp+38h+Locale], edx ; Stream
.text:00401980                 mov     ecx, [eax]
.text:00401982                 mov     [esp+38h+VarName], ecx ; Buffer
.text:00401985                 call    fputs
.text:0040198A                 dec     [ebp+arg_0]
.text:0040198D                 add     [ebp+arg_4], 4
.text:00401991                 mov     edi, [ebp+arg_0]
.text:00401994                 test    edi, edi
.text:00401996                 jle     loc_401459
.text:0040199C                 mov     ebx, ds:_iob
.text:004019A2                 mov     esi, [ebx+24h]
.text:004019A5                 dec     esi
.text:004019A6                 mov     [ebx+24h], esi
.text:004019A9                 test    esi, esi
.text:004019AB                 js      short loc_4019C8
.text:004019AD                 mov     edi, ds:_iob
.text:004019B3                 mov     ecx, [edi+20h]
.text:004019B6                 mov     byte ptr [ecx], 20h ; ' '
.text:004019B9                 inc     dword ptr [edi+20h]
.text:004019BC
.text:004019BC loc_4019BC:                             ; CODE XREF: sub_401300+6E1↓j
.text:004019BC                 mov     esi, [ebp+arg_0]
.text:004019BF                 test    esi, esi
.text:004019C1                 jg      short loc_401970
.text:004019C3                 jmp     loc_401459
.text:004019C8 ; ---------------------------------------------------------------------------
.text:004019C8
.text:004019C8 loc_4019C8:                             ; CODE XREF: sub_401300+6AB↑j
.text:004019C8                 mov     [esp+38h+VarName], 20h ; ' ' ; Ch
.text:004019CF                 mov     edx, ds:_iob
.text:004019D5                 add     edx, 20h ; ' '
.text:004019D8                 mov     [esp+38h+Locale], edx ; File
.text:004019DC                 call    _flsbuf
.text:004019E1                 jmp     short loc_4019BC
.text:004019E3 ; ---------------------------------------------------------------------------
.text:004019E3
.text:004019E3 loc_4019E3:                             ; CODE XREF: sub_401300+C4↑j
.text:004019E3                                         ; sub_401300+781↓j
.text:004019E3                 lea     ecx, [eax+1]
.text:004019E6                 xor     edx, edx
.text:004019E8                 movzx   eax, byte ptr [eax+1]
.text:004019EC                 test    al, al
.text:004019EE                 jz      loc_4013CA
.text:004019F4                 lea     esi, [esi+0]
.text:004019FA                 lea     edi, [edi+0]
.text:00401A00
.text:00401A00 loc_401A00:                             ; CODE XREF: sub_401300+721↓j
.text:00401A00                 movsx   eax, al
.text:00401A03                 cmp     eax, 65h ; 'e'
.text:00401A06                 jz      short loc_401A1A
.text:00401A08                 cmp     eax, 65h ; 'e'
.text:00401A0B                 jg      loc_401AA3
.text:00401A11                 cmp     eax, 45h ; 'E'
.text:00401A14
.text:00401A14 loc_401A14:                             ; CODE XREF: sub_401300+7A6↓j
.text:00401A14                 jnz     loc_4013CA
.text:00401A1A
.text:00401A1A loc_401A1A:                             ; CODE XREF: sub_401300+706↑j
.text:00401A1A                 inc     edx
.text:00401A1B                 movzx   eax, byte ptr [edx+ecx]
.text:00401A1F                 test    al, al
.text:00401A21                 jnz     short loc_401A00
.text:00401A23                 test    edx, edx
.text:00401A25                 jz      loc_4013CA
.text:00401A2B                 movzx   eax, byte ptr [ecx]
.text:00401A2E                 test    al, al
.text:00401A30                 jz      short loc_401A67
.text:00401A32                 lea     esi, [esi+0]
.text:00401A39                 lea     edi, [edi+0]
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_401300+765↓j
.text:00401A40                 movsx   eax, al
.text:00401A43                 inc     ecx
.text:00401A44                 cmp     eax, 65h ; 'e'
.text:00401A47                 jz      short loc_401A9D
.text:00401A49                 cmp     eax, 65h ; 'e'
.text:00401A4C                 jg      short loc_401A92
.text:00401A4E                 cmp     eax, 45h ; 'E'
.text:00401A51                 jz      short loc_401A8C
.text:00401A53                 lea     esi, [esi+0]
.text:00401A59                 lea     edi, [edi+0]
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_401300+790↓j
.text:00401A60                                         ; sub_401300+795↓j ...
.text:00401A60                 movzx   eax, byte ptr [ecx]
.text:00401A63                 test    al, al
.text:00401A65                 jnz     short loc_401A40
.text:00401A67
.text:00401A67 loc_401A67:                             ; CODE XREF: sub_401300+730↑j
.text:00401A67                 dec     [ebp+arg_0]
.text:00401A6A                 add     [ebp+arg_4], 4
.text:00401A6E                 mov     ecx, [ebp+arg_0]
.text:00401A71                 test    ecx, ecx
.text:00401A73                 jle     loc_4013CA
.text:00401A79                 mov     esi, [ebp+arg_4]
.text:00401A7C                 mov     eax, [esi]
.text:00401A7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401A81                 jz      loc_4019E3
.text:00401A87                 jmp     loc_4013CA
.text:00401A8C ; ---------------------------------------------------------------------------
.text:00401A8C
.text:00401A8C loc_401A8C:                             ; CODE XREF: sub_401300+751↑j
.text:00401A8C                 mov     [ebp+var_E], 0
.text:00401A90                 jmp     short loc_401A60
.text:00401A92 ; ---------------------------------------------------------------------------
.text:00401A92
.text:00401A92 loc_401A92:                             ; CODE XREF: sub_401300+74C↑j
.text:00401A92                 cmp     eax, 6Eh ; 'n'
.text:00401A95                 jnz     short loc_401A60
.text:00401A97                 mov     [ebp+var_D], 0
.text:00401A9B                 jmp     short loc_401A60
.text:00401A9D ; ---------------------------------------------------------------------------
.text:00401A9D
.text:00401A9D loc_401A9D:                             ; CODE XREF: sub_401300+747↑j
.text:00401A9D                 mov     [ebp+var_E], 1
.text:00401AA1                 jmp     short loc_401A60
.text:00401AA3 ; ---------------------------------------------------------------------------
.text:00401AA3
.text:00401AA3 loc_401AA3:                             ; CODE XREF: sub_401300+70B↑j
.text:00401AA3                 cmp     eax, 6Eh ; 'n'
.text:00401AA6                 jmp     loc_401A14
.text:00401AAB ; ---------------------------------------------------------------------------
.text:00401AAB
.text:00401AAB loc_401AAB:                             ; CODE XREF: sub_401300+A0↑j
.text:00401AAB                 mov     [esp+38h+var_1C], 0
.text:00401AB3                 mov     edx, [ebp+arg_4]
.text:00401AB6                 mov     esi, [ebp+arg_0]
.text:00401AB9                 mov     dword ptr [esp+38h+var_20], offset aFixmeUnknown ; "FIXME unknown"
.text:00401AC1                 mov     [esp+38h+var_24], offset sub_401E80 ; int
.text:00401AC9                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:00401AD1                 mov     [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401AD9                 mov     [esp+38h+var_30], offset aEcho ; FILE *
.text:00401AE1                 mov     [esp+38h+Locale], edx ; int
.text:00401AE5                 mov     [esp+38h+VarName], esi ; int
.text:00401AE8                 call    sub_402040
.text:00401AED                 jmp     loc_4013A6
.text:00401AED sub_401300      endp
.text:00401AED
.text:00401AED ; ---------------------------------------------------------------------------
.text:00401AF2                 align 10h
.text:00401B00 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401B00                                         ; DATA XREF: sub_401E80+C↓o
.text:00401B27                 align 20h
.text:00401B40 aUsageSOptionSt db 'Usage: %s [OPTION]... [STRING]...',0Ah,0
.text:00401B40                                         ; DATA XREF: sub_401E80:loc_401EC0↓o
.text:00401B63                 align 20h
.text:00401B80 aEchoTheStringS db 'Echo the STRING(s) to standard output.',0Ah
.text:00401B80                                         ; DATA XREF: sub_401E80+5F↓o
.text:00401B80                 db 0Ah
.text:00401B80                 db '  -n             do not output the trailing newline',0Ah,0
.text:00401BDD                 align 10h
.text:00401BE0 aEEnableInterpr db '  -e             enable interpretation of backslash escapes',0Ah
.text:00401BE0                                         ; DATA XREF: sub_401E80+81↓o
.text:00401BE0                 db '  -E             disable interpretation of backslash escapes (def'
.text:00401BE0                 db 'ault)',0Ah,0
.text:00401C64                 align 20h
.text:00401C80 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401C80                                         ; DATA XREF: sub_401E80+A3↓o
.text:00401CAD                 align 20h
.text:00401CC0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401CC0                                         ; DATA XREF: sub_401E80+C5↓o
.text:00401CF6                 align 10h
.text:00401D00 aIfEIsInEffectT db 0Ah                  ; DATA XREF: sub_401E80+E7↓o
.text:00401D00                 db 'If -e is in effect, the following sequences are recognized:',0Ah
.text:00401D00                 db 0Ah
.text:00401D00                 db '  \0NNN   the character whose ASCII code is NNN (octal)',0Ah
.text:00401D00                 db '  \\     backslash',0Ah
.text:00401D00                 db '  \a     alert (BEL)',0Ah
.text:00401D00                 db '  \b     backspace',0Ah,0
.text:00401DB2                 align 10h
.text:00401DC0 aCSuppressTrail db '  \c     suppress trailing newline',0Ah
.text:00401DC0                                         ; DATA XREF: sub_401E80+109↓o
.text:00401DC0                 db '  \f     form feed',0Ah
.text:00401DC0                 db '  \n     new line',0Ah
.text:00401DC0                 db '  \r     carriage return',0Ah
.text:00401DC0                 db '  \t     horizontal tab',0Ah
.text:00401DC0                 db '  \v     vertical tab',0Ah,0
.text:00401E50 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401E80+12B↓o
.text:00401E50                 db 'Report bugs to <%s>.',0Ah,0
.text:00401E67 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401E67                                         ; DATA XREF: sub_401E80+138↓o
.text:00401E7D                 align 10h
.text:00401E80
.text:00401E80 ; =============== S U B R O U T I N E =======================================
.text:00401E80
.text:00401E80 ; Attributes: noreturn
.text:00401E80
.text:00401E80 ; void __cdecl __noreturn sub_401E80(int Code)
.text:00401E80 sub_401E80      proc near               ; DATA XREF: sub_401300+7C1↑o
.text:00401E80
.text:00401E80 Stream          = dword ptr -1Ch
.text:00401E80 Format          = dword ptr -18h
.text:00401E80 var_14          = dword ptr -14h
.text:00401E80 Code            = dword ptr  4
.text:00401E80
.text:00401E80                 push    ebx
.text:00401E81                 sub     esp, 18h
.text:00401E84                 mov     ebx, [esp+1Ch+Code]
.text:00401E88                 test    ebx, ebx
.text:00401E8A                 jz      short loc_401EC0
.text:00401E8C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401E93                 call    ds:libintl_gettext
.text:00401E99                 mov     edx, ds:_iob
.text:00401E9F                 mov     ecx, ds:dword_407190
.text:00401EA5                 add     edx, 40h ; '@'
.text:00401EA8                 mov     [esp+1Ch+var_14], ecx
.text:00401EAC                 mov     [esp+1Ch+Format], eax ; Format
.text:00401EB0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401EB3                 call    fprintf
.text:00401EB8
.text:00401EB8 loc_401EB8:                             ; CODE XREF: sub_401E80+148↓j
.text:00401EB8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401EBB                 call    exit
.text:00401EC0 ; ---------------------------------------------------------------------------
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401E80+A↑j
.text:00401EC0                 mov     [esp+1Ch+Stream], offset aUsageSOptionSt ; "Usage: %s [OPTION]... [STRING]...\n"
.text:00401EC7                 call    ds:libintl_gettext
.text:00401ECD                 mov     ecx, ds:dword_407190
.text:00401ED3                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401ED6                 mov     [esp+1Ch+Format], ecx
.text:00401EDA                 call    printf
.text:00401EDF                 mov     [esp+1Ch+Stream], offset aEchoTheStringS ; "Echo the STRING(s) to standard output."...
.text:00401EE6                 call    ds:libintl_gettext
.text:00401EEC                 mov     ecx, ds:_iob
.text:00401EF2                 add     ecx, 20h ; ' '
.text:00401EF5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401EF9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401EFC                 call    fputs
.text:00401F01                 mov     [esp+1Ch+Stream], offset aEEnableInterpr ; "  -e             enable interpretation "...
.text:00401F08                 call    ds:libintl_gettext
.text:00401F0E                 mov     ecx, ds:_iob
.text:00401F14                 add     ecx, 20h ; ' '
.text:00401F17                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401F1B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401F1E                 call    fputs
.text:00401F23                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401F2A                 call    ds:libintl_gettext
.text:00401F30                 mov     ecx, ds:_iob
.text:00401F36                 add     ecx, 20h ; ' '
.text:00401F39                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401F3D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401F40                 call    fputs
.text:00401F45                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401F4C                 call    ds:libintl_gettext
.text:00401F52                 mov     ecx, ds:_iob
.text:00401F58                 add     ecx, 20h ; ' '
.text:00401F5B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401F5F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401F62                 call    fputs
.text:00401F67                 mov     [esp+1Ch+Stream], offset aIfEIsInEffectT ; "\nIf -e is in effect, the following seq"...
.text:00401F6E                 call    ds:libintl_gettext
.text:00401F74                 mov     ecx, ds:_iob
.text:00401F7A                 add     ecx, 20h ; ' '
.text:00401F7D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401F81                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401F84                 call    fputs
.text:00401F89                 mov     [esp+1Ch+Stream], offset aCSuppressTrail ; "  \\c     suppress trailing newline\n  "...
.text:00401F90                 call    ds:libintl_gettext
.text:00401F96                 mov     ecx, ds:_iob
.text:00401F9C                 add     ecx, 20h ; ' '
.text:00401F9F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401FA3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401FA6                 call    fputs
.text:00401FAB                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401FB2                 call    ds:libintl_gettext
.text:00401FB8                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401FC0                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401FC3                 call    printf
.text:00401FC8                 jmp     loc_401EB8
.text:00401FC8 sub_401E80      endp
.text:00401FC8
.text:00401FC8 ; ---------------------------------------------------------------------------
.text:00401FCD                 align 20h
.text:00401FE0 aHelp           db 'help',0             ; DATA XREF: .text:off_402000↓o
.text:00401FE5 aVersion        db 'version',0          ; DATA XREF: .text:00402010↓o
.text:00401FED                 align 20h
.text:00402000 off_402000      dd offset aHelp         ; DATA XREF: sub_402040+3D↓o
.text:00402000                                         ; "help"
.text:00402004                 dd 2 dup(0)
.text:0040200C                 dd 68h
.text:00402010                 dd offset aVersion      ; "version"
.text:00402014                 dd 2 dup(0)
.text:0040201C                 dd 76h, 4 dup(0)
.text:00402030 ; ---------------------------------------------------------------------------
.text:00402030
.text:00402030 loc_402030:                             ; DATA XREF: sub_402040+45↓o
.text:00402030                 sub     eax, [eax]
.text:00402032                 lea     esi, [esi+0]
.text:00402039                 lea     edi, [edi+0]
.text:00402040
.text:00402040 ; =============== S U B R O U T I N E =======================================
.text:00402040
.text:00402040
.text:00402040 ; int __cdecl sub_402040(int, int, FILE *, int, int, int, char)
.text:00402040 sub_402040      proc near               ; CODE XREF: sub_401300+7E8↑p
.text:00402040
.text:00402040 Code            = dword ptr -1Ch
.text:00402040 var_18          = dword ptr -18h
.text:00402040 var_14          = dword ptr -14h
.text:00402040 var_10          = dword ptr -10h
.text:00402040 var_C           = dword ptr -0Ch
.text:00402040 var_4           = dword ptr -4
.text:00402040 arg_0           = dword ptr  4
.text:00402040 arg_4           = dword ptr  8
.text:00402040 arg_8           = dword ptr  0Ch
.text:00402040 arg_C           = dword ptr  10h
.text:00402040 arg_10          = dword ptr  14h
.text:00402040 arg_14          = dword ptr  18h
.text:00402040 arg_18          = byte ptr  1Ch
.text:00402040
.text:00402040                 sub     esp, 1Ch
.text:00402043                 xor     eax, eax
.text:00402045                 cmp     [esp+1Ch+arg_0], 2
.text:0040204A                 mov     [esp+1Ch+var_4], ebx
.text:0040204E                 mov     ebx, dword_406014
.text:00402054                 mov     dword_406014, eax
.text:00402059                 jz      short loc_402071
.text:0040205B
.text:0040205B loc_40205B:                             ; CODE XREF: sub_402040+60↓j
.text:0040205B                                         ; sub_402040+6A↓j
.text:0040205B                 mov     dword_406014, ebx
.text:00402061                 xor     edx, edx
.text:00402063                 mov     ebx, [esp+1Ch+var_4]
.text:00402067                 mov     dword_406010, edx
.text:0040206D                 add     esp, 1Ch
.text:00402070                 retn
.text:00402071 ; ---------------------------------------------------------------------------
.text:00402071
.text:00402071 loc_402071:                             ; CODE XREF: sub_402040+19↑j
.text:00402071                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402079                 mov     edx, [esp+1Ch+arg_4]
.text:0040207D                 mov     [esp+1Ch+var_10], offset off_402000 ; int
.text:00402085                 mov     [esp+1Ch+var_14], offset loc_402030 ; char *
.text:0040208D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402091                 mov     [esp+1Ch+Code], 2 ; int
.text:00402098                 call    sub_403730
.text:0040209D                 cmp     eax, 0FFFFFFFFh
.text:004020A0                 jz      short loc_40205B
.text:004020A2                 cmp     eax, 68h ; 'h'
.text:004020A5                 jz      short loc_4020AE
.text:004020A7                 cmp     eax, 76h ; 'v'
.text:004020AA                 jnz     short loc_40205B
.text:004020AC                 jmp     short loc_4020B9
.text:004020AE ; ---------------------------------------------------------------------------
.text:004020AE
.text:004020AE loc_4020AE:                             ; CODE XREF: sub_402040+65↑j
.text:004020AE                 mov     [esp+1Ch+Code], 0
.text:004020B5                 call    [esp+1Ch+arg_14]
.text:004020B9
.text:004020B9 loc_4020B9:                             ; CODE XREF: sub_402040+6C↑j
.text:004020B9                 mov     ecx, [esp+1Ch+arg_10]
.text:004020BD                 lea     ebx, [esp+1Ch+arg_18]
.text:004020C1                 mov     edx, [esp+1Ch+arg_C]
.text:004020C5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004020C9                 mov     ebx, [esp+1Ch+arg_8]
.text:004020CD                 mov     [esp+1Ch+var_10], ecx ; int
.text:004020D1                 mov     ecx, ds:_iob
.text:004020D7                 mov     [esp+1Ch+var_14], edx ; int
.text:004020DB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004020DF                 add     ecx, 20h ; ' '
.text:004020E2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004020E5                 call    sub_403520
.text:004020EA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004020F1                 call    exit
.text:004020F1 sub_402040      endp
.text:004020F1
.text:004020F1 ; ---------------------------------------------------------------------------
.text:004020F6                 align 10h
.text:00402100                 mov     edx, [esp+4]
.text:00402104                 mov     ds:dword_407000, edx
.text:0040210A                 retn
.text:0040210A ; ---------------------------------------------------------------------------
.text:0040210B aWriteError     db 'write error',0      ; DATA XREF: sub_402130:loc_402179↓o
.text:00402117 ; const char aSS_0[]
.text:00402117 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402130+77↓o
.text:0040211E ; const char aS[]
.text:0040211E aS              db '%s',0               ; DATA XREF: sub_402130+A0↓o
.text:00402121 ; ---------------------------------------------------------------------------
.text:00402121                 jmp     short sub_402130
.text:00402121 ; ---------------------------------------------------------------------------
.text:00402123                 align 10h
.text:00402130
.text:00402130 ; =============== S U B R O U T I N E =======================================
.text:00402130
.text:00402130
.text:00402130 ; void __cdecl sub_402130()
.text:00402130 sub_402130      proc near               ; CODE XREF: .text:00402121↑j
.text:00402130                                         ; DATA XREF: sub_401300+92↑o
.text:00402130
.text:00402130 Stream          = dword ptr -2Ch
.text:00402130 ErrorMessage    = dword ptr -28h
.text:00402130 var_24          = dword ptr -24h
.text:00402130 var_20          = byte ptr -20h
.text:00402130 var_1C          = dword ptr -1Ch
.text:00402130 var_9           = byte ptr -9
.text:00402130
.text:00402130                 push    esi
.text:00402131                 push    ebx
.text:00402132                 sub     esp, 24h
.text:00402135                 mov     edx, ds:_iob
.text:0040213B                 mov     ecx, [edx+2Ch]
.text:0040213E                 lea     esi, [edx+20h]
.text:00402141                 shr     ecx, 5
.text:00402144                 mov     bl, cl
.text:00402146                 mov     ecx, [edx+20h]
.text:00402149                 and     bl, 1
.text:0040214C                 cmp     ecx, [esi+8]
.text:0040214F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402152                 setz    [esp+2Ch+var_9]
.text:00402157                 call    fclose
.text:0040215C                 test    eax, eax
.text:0040215E                 setnz   al
.text:00402161                 test    bl, bl
.text:00402163                 jnz     loc_4021F3
.text:00402169                 test    al, al
.text:0040216B                 jz      short loc_4021C0
.text:0040216D
.text:0040216D loc_40216D:                             ; CODE XREF: sub_402130+CD↓j
.text:0040216D                 call    _errno
.text:00402172                 mov     esi, [eax]
.text:00402174
.text:00402174 loc_402174:                             ; CODE XREF: sub_402130+C7↓j
.text:00402174                 cmp     esi, 9
.text:00402177                 jz      short loc_4021E6
.text:00402179
.text:00402179 loc_402179:                             ; CODE XREF: sub_402130+B8↓j
.text:00402179                                         ; sub_402130+C1↓j
.text:00402179                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402180                 call    ds:libintl_gettext
.text:00402186                 mov     ebx, eax
.text:00402188                 mov     eax, ds:dword_407000
.text:0040218D                 test    eax, eax
.text:0040218F                 jz      short loc_4021C6
.text:00402191                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402194                 call    sub_4049A0
.text:00402199                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040219D                 mov     edx, Code
.text:004021A3                 mov     [esp+2Ch+var_1C], ebx
.text:004021A7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004021AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004021B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004021B6                 call    sub_404F90
.text:004021BB                 nop
.text:004021BC                 lea     esi, [esi+0]
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_402130+3B↑j
.text:004021C0                                         ; sub_402130+B4↓j ...
.text:004021C0                 add     esp, 24h
.text:004021C3                 pop     ebx
.text:004021C4                 pop     esi
.text:004021C5                 retn
.text:004021C6 ; ---------------------------------------------------------------------------
.text:004021C6
.text:004021C6 loc_4021C6:                             ; CODE XREF: sub_402130+5F↑j
.text:004021C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004021CA                 mov     ebx, Code
.text:004021D0                 mov     [esp+2Ch+var_24], offset aS ; "%s"
.text:004021D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004021DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004021DF                 call    sub_404F90
.text:004021E4                 jmp     short loc_4021C0
.text:004021E6 ; ---------------------------------------------------------------------------
.text:004021E6
.text:004021E6 loc_4021E6:                             ; CODE XREF: sub_402130+47↑j
.text:004021E6                 test    bl, bl
.text:004021E8                 jnz     short loc_402179
.text:004021EA                 cmp     [esp+2Ch+var_9], 0
.text:004021EF                 jnz     short loc_4021C0
.text:004021F1                 jmp     short loc_402179
.text:004021F3 ; ---------------------------------------------------------------------------
.text:004021F3
.text:004021F3 loc_4021F3:                             ; CODE XREF: sub_402130+33↑j
.text:004021F3                 xor     esi, esi
.text:004021F5                 test    al, al
.text:004021F7                 jz      loc_402174
.text:004021FD                 jmp     loc_40216D
.text:004021FD sub_402130      endp
.text:004021FD
.text:004021FD ; ---------------------------------------------------------------------------
.text:00402202                 align 10h
.text:00402210 dword_402210    dd 90002D2Dh, 7 dup(90909090h)
.text:00402210                                         ; DATA XREF: sub_402460+E4↓o
.text:00402230 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402230                                         ; DATA XREF: sub_402460+2FC↓o
.text:0040225D                 db 13h dup(90h)
.text:00402270 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402270                                         ; DATA XREF: sub_402460:loc_4027C2↓o
.text:0040229D                 db 13h dup(90h)
.text:004022B0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004022B0                                         ; DATA XREF: sub_402460:loc_402860↓o
.text:004022B0                                         ; sub_402460:loc_402C27↓o
.text:004022D6                 db 1Ah dup(90h)
.text:004022F0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004022F0                                         ; DATA XREF: sub_402460+48E↓o
.text:00402310 dword_402310    dd 90909000h, 7 dup(90909090h)
.text:00402310                                         ; DATA XREF: sub_402460:loc_402931↓o
.text:00402330 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402330                                         ; DATA XREF: sub_402460:loc_40294A↓o
.text:00402350 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402350                                         ; DATA XREF: sub_402460:loc_402A2F↓o
.text:00402350                                         ; sub_402460:loc_402D5C↓o
.text:00402377                 db 19h dup(90h)
.text:00402390 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402390                                         ; DATA XREF: sub_402460:loc_402BA3↓o
.text:004023BE                 db 12h dup(90h)
.text:004023D0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004023D0                                         ; DATA XREF: sub_402460:loc_402C8F↓o
.text:004023F1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004023F1                                         ; DATA XREF: sub_402460+93F↓o
.text:0040240B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040240B                                         ; DATA XREF: sub_402460:loc_402DD7↓o
.text:00402425 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402425                                         ; DATA XREF: sub_402460:loc_402DFE↓o
.text:00402443 ; const char aPosixlyCorrect[]
.text:00402443 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402460:loc_402FB0↓o
.text:00402453                 align 10h
.text:00402460
.text:00402460 ; =============== S U B R O U T I N E =======================================
.text:00402460
.text:00402460
.text:00402460 ; int __cdecl sub_402460(int, int, char *Str, int, int, int, int, int)
.text:00402460 sub_402460      proc near               ; CODE XREF: sub_402FF0+5A↓p
.text:00402460                                         ; .text:004030DA↓p ...
.text:00402460
.text:00402460 Str1            = dword ptr -5Ch
.text:00402460 Str2            = dword ptr -58h
.text:00402460 MaxCount        = dword ptr -54h
.text:00402460 var_50          = dword ptr -50h
.text:00402460 var_4C          = dword ptr -4Ch
.text:00402460 var_3C          = dword ptr -3Ch
.text:00402460 var_38          = dword ptr -38h
.text:00402460 var_34          = dword ptr -34h
.text:00402460 var_30          = dword ptr -30h
.text:00402460 var_2C          = dword ptr -2Ch
.text:00402460 var_28          = dword ptr -28h
.text:00402460 var_24          = dword ptr -24h
.text:00402460 var_20          = dword ptr -20h
.text:00402460 var_1C          = dword ptr -1Ch
.text:00402460 var_18          = dword ptr -18h
.text:00402460 var_14          = dword ptr -14h
.text:00402460 arg_0           = dword ptr  4
.text:00402460 arg_4           = dword ptr  8
.text:00402460 Str             = dword ptr  0Ch
.text:00402460 arg_C           = dword ptr  10h
.text:00402460 arg_10          = dword ptr  14h
.text:00402460 arg_14          = dword ptr  18h
.text:00402460 arg_18          = dword ptr  1Ch
.text:00402460 arg_1C          = dword ptr  20h
.text:00402460
.text:00402460                 push    ebp
.text:00402461                 mov     eax, 0FFFFFFFFh
.text:00402466                 push    edi
.text:00402467                 push    esi
.text:00402468                 push    ebx
.text:00402469                 sub     esp, 4Ch
.text:0040246C                 mov     esi, [esp+5Ch+Str]
.text:00402470                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402474                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402477                 mov     ebx, [ebp+4]
.text:0040247A                 setz    dl
.text:0040247D                 movzx   ecx, dl
.text:00402480                 dec     ecx
.text:00402481                 and     ecx, ebx
.text:00402483                 mov     [esp+5Ch+var_14], ecx
.text:00402487                 mov     ecx, [esp+5Ch+arg_0]
.text:0040248B                 test    ecx, ecx
.text:0040248D                 jle     loc_4025B7
.text:00402493                 mov     dword ptr [ebp+0Ch], 0
.text:0040249A                 mov     ebx, [ebp+0]
.text:0040249D                 test    ebx, ebx
.text:0040249F                 jz      loc_402FD0
.text:004024A5                 mov     edi, [ebp+10h]
.text:004024A8                 test    edi, edi
.text:004024AA                 jnz     short loc_402503
.text:004024AC                 lea     esi, [esi+0]
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_402460+B7C↓j
.text:004024B0                 mov     [ebp+24h], ebx
.text:004024B3                 mov     esi, [esp+5Ch+Str]
.text:004024B7                 mov     [ebp+20h], ebx
.text:004024BA                 mov     ecx, [esp+5Ch+arg_18]
.text:004024BE                 xor     ebx, ebx
.text:004024C0                 mov     dword ptr [ebp+14h], 0
.text:004024C7                 test    ecx, ecx
.text:004024C9                 jz      loc_402FB0
.text:004024CF
.text:004024CF loc_4024CF:                             ; CODE XREF: sub_402460+B64↓j
.text:004024CF                 mov     ebx, 1
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_402460+B5E↓j
.text:004024D4                 mov     [ebp+1Ch], ebx
.text:004024D7                 mov     ecx, [esp+5Ch+Str]
.text:004024DB                 movzx   eax, byte ptr [ecx]
.text:004024DE                 cmp     al, 2Dh ; '-'
.text:004024E0                 jz      loc_402FA0
.text:004024E6                 cmp     al, 2Bh ; '+'
.text:004024E8                 jz      loc_402F89
.text:004024EE                 xor     edx, edx
.text:004024F0                 test    ebx, ebx
.text:004024F2                 setz    dl
.text:004024F5                 mov     [ebp+18h], edx
.text:004024F8
.text:004024F8 loc_4024F8:                             ; CODE XREF: sub_402460+B35↓j
.text:004024F8                 mov     [esp+5Ch+Str], esi
.text:004024FC                 mov     dword ptr [ebp+10h], 1
.text:00402503
.text:00402503 loc_402503:                             ; CODE XREF: sub_402460+4A↑j
.text:00402503                 mov     eax, [ebp+14h]
.text:00402506                 test    eax, eax
.text:00402508                 jz      short loc_402513
.text:0040250A                 cmp     byte ptr [eax], 0
.text:0040250D                 jnz     loc_4025F0
.text:00402513
.text:00402513 loc_402513:                             ; CODE XREF: sub_402460+A8↑j
.text:00402513                 mov     ebx, [ebp+0]
.text:00402516                 cmp     [ebp+24h], ebx
.text:00402519                 jle     short loc_40251E
.text:0040251B                 mov     [ebp+24h], ebx
.text:0040251E
.text:0040251E loc_40251E:                             ; CODE XREF: sub_402460+B9↑j
.text:0040251E                 cmp     [ebp+20h], ebx
.text:00402521                 jle     short loc_402526
.text:00402523                 mov     [ebp+20h], ebx
.text:00402526
.text:00402526 loc_402526:                             ; CODE XREF: sub_402460+C1↑j
.text:00402526                 cmp     dword ptr [ebp+18h], 1
.text:0040252A                 jz      loc_402F00
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_402460+B13↓j
.text:00402530                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402534                 jz      loc_402EE4
.text:0040253A                 cld
.text:0040253B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040253F                 mov     edx, 3
.text:00402544                 mov     edi, offset dword_402210
.text:00402549                 mov     esi, [ecx+ebx*4]
.text:0040254C                 mov     ecx, edx
.text:0040254E                 repe cmpsb
.text:00402550                 jnz     short loc_40258C
.text:00402552                 mov     edx, [ebp+24h]
.text:00402555                 lea     eax, [ebx+1]
.text:00402558                 cmp     [ebp+20h], edx
.text:0040255B                 mov     [ebp+0], eax
.text:0040255E                 jz      loc_402EF8
.text:00402564                 cmp     edx, eax
.text:00402566                 jz      short loc_402580
.text:00402568                 mov     [esp+5Ch+Str2], ebp
.text:0040256C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402570                 mov     [esp+5Ch+Str1], ebx
.text:00402573                 call    sub_403110
.text:00402578                 nop
.text:00402579                 lea     esi, [esi+0]
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_402460+106↑j
.text:00402580                                         ; sub_402460+A9B↓j
.text:00402580                 mov     eax, [esp+5Ch+arg_0]
.text:00402584                 mov     ebx, eax
.text:00402586                 mov     [ebp+24h], eax
.text:00402589                 mov     [ebp+0], eax
.text:0040258C
.text:0040258C loc_40258C:                             ; CODE XREF: sub_402460+F0↑j
.text:0040258C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402590                 jz      loc_402EE4
.text:00402596                 mov     esi, [esp+5Ch+arg_4]
.text:0040259A                 mov     eax, [esi+ebx*4]
.text:0040259D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004025A0                 jz      short loc_4025C7
.text:004025A2
.text:004025A2 loc_4025A2:                             ; CODE XREF: sub_402460+16D↓j
.text:004025A2                 mov     edx, [ebp+18h]
.text:004025A5                 test    edx, edx
.text:004025A7                 jz      short loc_4025C0
.text:004025A9                 mov     [ebp+0Ch], eax
.text:004025AC                 lea     edi, [ebx+1]
.text:004025AF                 mov     eax, 1
.text:004025B4                 mov     [ebp+0], edi
.text:004025B7
.text:004025B7 loc_4025B7:                             ; CODE XREF: sub_402460+2D↑j
.text:004025B7                                         ; sub_402460+165↓j ...
.text:004025B7                 add     esp, 4Ch
.text:004025BA                 pop     ebx
.text:004025BB                 pop     esi
.text:004025BC                 pop     edi
.text:004025BD                 pop     ebp
.text:004025BE                 retn
.text:004025BE ; ---------------------------------------------------------------------------
.text:004025BF                 align 10h
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402460+147↑j
.text:004025C0                                         ; sub_402460+A8A↓j ...
.text:004025C0                 mov     eax, 0FFFFFFFFh
.text:004025C5                 jmp     short loc_4025B7
.text:004025C7 ; ---------------------------------------------------------------------------
.text:004025C7
.text:004025C7 loc_4025C7:                             ; CODE XREF: sub_402460+140↑j
.text:004025C7                 movzx   edx, byte ptr [eax+1]
.text:004025CB                 test    dl, dl
.text:004025CD                 jz      short loc_4025A2
.text:004025CF                 mov     ebx, [esp+5Ch+arg_C]
.text:004025D3                 xor     ecx, ecx
.text:004025D5                 test    ebx, ebx
.text:004025D7                 jz      short loc_4025E2
.text:004025D9                 cmp     dl, 2Dh ; '-'
.text:004025DC                 jz      loc_402EDA
.text:004025E2
.text:004025E2 loc_4025E2:                             ; CODE XREF: sub_402460+177↑j
.text:004025E2                                         ; sub_402460+A7F↓j
.text:004025E2                 lea     esi, [ecx+eax+1]
.text:004025E6                 mov     [ebp+14h], esi
.text:004025E9                 lea     esi, [esi+0]
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_402460+AD↑j
.text:004025F0                 mov     ecx, [esp+5Ch+arg_C]
.text:004025F4                 test    ecx, ecx
.text:004025F6                 jz      loc_402980
.text:004025FC                 mov     edx, [ebp+0]
.text:004025FF                 mov     edi, [esp+5Ch+arg_4]
.text:00402603                 mov     eax, [edi+edx*4]
.text:00402606                 movzx   edx, byte ptr [eax+1]
.text:0040260A                 cmp     dl, 2Dh ; '-'
.text:0040260D                 jz      short loc_402625
.text:0040260F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402613                 test    ebx, ebx
.text:00402615                 jz      loc_402980
.text:0040261B                 cmp     byte ptr [eax+2], 0
.text:0040261F                 jz      loc_402EBA
.text:00402625
.text:00402625 loc_402625:                             ; CODE XREF: sub_402460+1AD↑j
.text:00402625                                         ; sub_402460+A75↓j
.text:00402625                 mov     [esp+5Ch+var_18], 0
.text:0040262D                 mov     ecx, [ebp+14h]
.text:00402630                 mov     [esp+5Ch+var_1C], 0
.text:00402638                 mov     [esp+5Ch+var_20], 0
.text:00402640                 mov     edi, ecx
.text:00402642                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040264A                 movzx   eax, byte ptr [ecx]
.text:0040264D                 test    al, al
.text:0040264F                 jz      short loc_40266C
.text:00402651                 cmp     al, 3Dh ; '='
.text:00402653                 jz      short loc_40266C
.text:00402655                 lea     esi, [esi+0]
.text:00402659                 lea     edi, [edi+0]
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402460+20A↓j
.text:00402660                 inc     edi
.text:00402661                 movzx   eax, byte ptr [edi]
.text:00402664                 test    al, al
.text:00402666                 jz      short loc_40266C
.text:00402668                 cmp     al, 3Dh ; '='
.text:0040266A                 jnz     short loc_402660
.text:0040266C
.text:0040266C loc_40266C:                             ; CODE XREF: sub_402460+1EF↑j
.text:0040266C                                         ; sub_402460+1F3↑j ...
.text:0040266C                 mov     [esp+5Ch+var_28], 0
.text:00402674                 mov     esi, [esp+5Ch+arg_C]
.text:00402678                 mov     ebx, [esi]
.text:0040267A                 test    ebx, ebx
.text:0040267C                 mov     edx, ebx
.text:0040267E                 jz      loc_4028A0
.text:00402684                 lea     esi, [esi+0]
.text:0040268A                 lea     edi, [edi+0]
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_402460+25E↓j
.text:00402690                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402694                 mov     ebx, edi
.text:00402696                 sub     ebx, ecx
.text:00402698                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040269C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040269F                 call    strncmp
.text:004026A4                 test    eax, eax
.text:004026A6                 jz      loc_402E36
.text:004026AC
.text:004026AC loc_4026AC:                             ; CODE XREF: sub_402460+A0F↓j
.text:004026AC                                         ; sub_402460+A24↓j ...
.text:004026AC                 inc     [esp+5Ch+var_28]
.text:004026B0                 add     esi, 10h
.text:004026B3                 mov     ecx, [esi]
.text:004026B5                 test    ecx, ecx
.text:004026B7                 mov     edx, ecx
.text:004026B9                 jz      short loc_4026C0
.text:004026BB                 mov     ecx, [ebp+14h]
.text:004026BE                 jmp     short loc_402690
.text:004026C0 ; ---------------------------------------------------------------------------
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402460+259↑j
.text:004026C0                                         ; sub_402460+A55↓j
.text:004026C0                 mov     esi, [esp+5Ch+var_20]
.text:004026C4                 test    esi, esi
.text:004026C6                 jz      short loc_4026D4
.text:004026C8                 mov     edx, [esp+5Ch+var_1C]
.text:004026CC                 test    edx, edx
.text:004026CE                 jz      loc_402DE0
.text:004026D4
.text:004026D4 loc_4026D4:                             ; CODE XREF: sub_402460+266↑j
.text:004026D4                 mov     eax, [esp+5Ch+var_18]
.text:004026D8                 test    eax, eax
.text:004026DA                 jz      loc_4028A0
.text:004026E0                 mov     ecx, [ebp+0]
.text:004026E3                 lea     eax, [ecx+1]
.text:004026E6                 mov     [ebp+0], eax
.text:004026E9                 cmp     byte ptr [edi], 0
.text:004026EC                 jz      loc_402800
.text:004026F2                 mov     ecx, [esp+5Ch+var_18]
.text:004026F6                 mov     esi, [ecx+4]
.text:004026F9                 test    esi, esi
.text:004026FB                 jz      short loc_402746
.text:004026FD                 lea     ebx, [edi+1]
.text:00402700                 mov     [ebp+0Ch], ebx
.text:00402703
.text:00402703 loc_402703:                             ; CODE XREF: sub_402460+3A8↓j
.text:00402703                                         ; sub_402460+3C4↓j
.text:00402703                 mov     ebx, [ebp+14h]
.text:00402706                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402709                 call    strlen
.text:0040270E                 add     [ebp+14h], eax
.text:00402711                 mov     esi, [esp+5Ch+arg_10]
.text:00402715                 test    esi, esi
.text:00402717                 jz      short loc_402723
.text:00402719                 mov     ebp, [esp+5Ch+var_24]
.text:0040271D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402721                 mov     [ecx], ebp
.text:00402723
.text:00402723 loc_402723:                             ; CODE XREF: sub_402460+2B7↑j
.text:00402723                 mov     eax, [esp+5Ch+var_18]
.text:00402727                 mov     ecx, [eax+8]
.text:0040272A                 test    ecx, ecx
.text:0040272C                 jnz     short loc_40273A
.text:0040272E                 mov     ecx, [esp+5Ch+var_18]
.text:00402732
.text:00402732 loc_402732:                             ; CODE XREF: sub_402460+723↓j
.text:00402732                 mov     eax, [ecx+0Ch]
.text:00402735                 jmp     loc_4025B7
.text:0040273A ; ---------------------------------------------------------------------------
.text:0040273A
.text:0040273A loc_40273A:                             ; CODE XREF: sub_402460+2CC↑j
.text:0040273A                                         ; sub_402460+719↓j
.text:0040273A                 mov     esi, [eax+0Ch]
.text:0040273D                 xor     eax, eax
.text:0040273F                 mov     [ecx], esi
.text:00402741                 jmp     loc_4025B7
.text:00402746 ; ---------------------------------------------------------------------------
.text:00402746
.text:00402746 loc_402746:                             ; CODE XREF: sub_402460+29B↑j
.text:00402746                 mov     edi, [esp+5Ch+var_14]
.text:0040274A                 test    edi, edi
.text:0040274C                 jz      short loc_4027A0
.text:0040274E                 mov     esi, [esp+5Ch+arg_4]
.text:00402752                 mov     edx, [esi+eax*4-4]
.text:00402756                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040275A                 jz      short loc_4027C2
.text:0040275C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402763                 call    ds:libintl_gettext
.text:00402769                 mov     edx, [esp+5Ch+var_18]
.text:0040276D                 mov     edi, [edx]
.text:0040276F                 mov     [esp+5Ch+var_4C], edi
.text:00402773                 mov     ebx, [ebp+0]
.text:00402776                 mov     edi, [esp+5Ch+arg_4]
.text:0040277A                 mov     ecx, [edi+ebx*4-4]
.text:0040277E                 movsx   esi, byte ptr [ecx]
.text:00402781                 mov     ecx, ds:_iob
.text:00402787                 add     ecx, 40h ; '@'
.text:0040278A                 mov     [esp+5Ch+var_50], esi
.text:0040278E                 mov     ebx, [edi]
.text:00402790                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402794                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402797                 mov     [esp+5Ch+MaxCount], ebx
.text:0040279B                 call    fprintf
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_402460+2EC↑j
.text:004027A0                                         ; sub_402460+398↓j
.text:004027A0                 mov     ecx, [ebp+14h]
.text:004027A3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004027A6                 call    strlen
.text:004027AB                 add     [ebp+14h], eax
.text:004027AE                 mov     eax, [esp+5Ch+var_18]
.text:004027B2                 mov     esi, [eax+0Ch]
.text:004027B5                 mov     [ebp+8], esi
.text:004027B8
.text:004027B8 loc_4027B8:                             ; CODE XREF: sub_402460+4E5↓j
.text:004027B8                                         ; sub_402460+73E↓j ...
.text:004027B8                 mov     eax, 3Fh ; '?'
.text:004027BD                 jmp     loc_4025B7
.text:004027C2 ; ---------------------------------------------------------------------------
.text:004027C2
.text:004027C2 loc_4027C2:                             ; CODE XREF: sub_402460+2FA↑j
.text:004027C2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004027C9                 call    ds:libintl_gettext
.text:004027CF                 mov     edx, [esp+5Ch+var_18]
.text:004027D3                 mov     edi, [esp+5Ch+arg_4]
.text:004027D7                 mov     ecx, ds:_iob
.text:004027DD                 mov     esi, [edx]
.text:004027DF                 add     ecx, 40h ; '@'
.text:004027E2                 mov     [esp+5Ch+var_50], esi
.text:004027E6                 mov     ebx, [edi]
.text:004027E8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027EC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004027EF                 mov     [esp+5Ch+MaxCount], ebx
.text:004027F3                 call    fprintf
.text:004027F8                 jmp     short loc_4027A0
.text:004027F8 ; ---------------------------------------------------------------------------
.text:004027FA                 align 10h
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_402460+28C↑j
.text:00402800                 mov     ebx, [esp+5Ch+var_18]
.text:00402804                 cmp     dword ptr [ebx+4], 1
.text:00402808                 jnz     loc_402703
.text:0040280E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402812                 jge     short loc_402829
.text:00402814                 mov     ebx, [esp+5Ch+arg_4]
.text:00402818                 lea     edi, [ecx+2]
.text:0040281B                 mov     [ebp+0], edi
.text:0040281E                 mov     esi, [ebx+eax*4]
.text:00402821                 mov     [ebp+0Ch], esi
.text:00402824                 jmp     loc_402703
.text:00402829 ; ---------------------------------------------------------------------------
.text:00402829
.text:00402829 loc_402829:                             ; CODE XREF: sub_402460+3B2↑j
.text:00402829                 mov     edx, [esp+5Ch+var_14]
.text:0040282D                 test    edx, edx
.text:0040282F                 jnz     short loc_402860
.text:00402831
.text:00402831 loc_402831:                             ; CODE XREF: sub_402460+437↓j
.text:00402831                 mov     edx, [ebp+14h]
.text:00402834                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402837                 call    strlen
.text:0040283C                 add     [ebp+14h], eax
.text:0040283F                 mov     eax, [esp+5Ch+var_18]
.text:00402843                 mov     edi, [eax+0Ch]
.text:00402846                 mov     [ebp+8], edi
.text:00402849
.text:00402849 loc_402849:                             ; CODE XREF: sub_402460+7C2↓j
.text:00402849                 mov     ebp, [esp+5Ch+Str]
.text:0040284D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402851                 setnz   bl
.text:00402854                 movzx   esi, bl
.text:00402857                 lea     eax, [esi+esi*4+3Ah]
.text:0040285B                 jmp     loc_4025B7
.text:00402860 ; ---------------------------------------------------------------------------
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_402460+3CF↑j
.text:00402860                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402867                 call    ds:libintl_gettext
.text:0040286D                 mov     ecx, [ebp+0]
.text:00402870                 mov     esi, [esp+5Ch+arg_4]
.text:00402874                 mov     ebx, [esi+ecx*4-4]
.text:00402878                 mov     ecx, ds:_iob
.text:0040287E                 mov     [esp+5Ch+var_50], ebx
.text:00402882                 mov     edi, [esi]
.text:00402884                 add     ecx, 40h ; '@'
.text:00402887                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040288B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040288E                 mov     [esp+5Ch+MaxCount], edi
.text:00402892                 call    fprintf
.text:00402897                 jmp     short loc_402831
.text:00402897 ; ---------------------------------------------------------------------------
.text:00402899                 align 10h
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_402460+21E↑j
.text:004028A0                                         ; sub_402460+27A↑j
.text:004028A0                 mov     eax, [esp+5Ch+arg_14]
.text:004028A4                 test    eax, eax
.text:004028A6                 jz      short loc_4028D6
.text:004028A8                 mov     ebx, [ebp+0]
.text:004028AB                 mov     esi, [esp+5Ch+arg_4]
.text:004028AF                 mov     edi, [esi+ebx*4]
.text:004028B2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004028B6                 jz      short loc_4028D9
.text:004028B8                 mov     ecx, [ebp+14h]
.text:004028BB                 mov     edx, [esp+5Ch+Str]
.text:004028BF                 movsx   ebx, byte ptr [ecx]
.text:004028C2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004028C5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004028C9                 call    strchr
.text:004028CE                 test    eax, eax
.text:004028D0                 jnz     loc_402980
.text:004028D6
.text:004028D6 loc_4028D6:                             ; CODE XREF: sub_402460+446↑j
.text:004028D6                 mov     ebx, [ebp+0]
.text:004028D9
.text:004028D9 loc_4028D9:                             ; CODE XREF: sub_402460+456↑j
.text:004028D9                 mov     eax, [esp+5Ch+var_14]
.text:004028DD                 test    eax, eax
.text:004028DF                 jz      short loc_402931
.text:004028E1                 mov     esi, [esp+5Ch+arg_4]
.text:004028E5                 mov     edi, [esi+ebx*4]
.text:004028E8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004028EC                 jz      short loc_40294A
.text:004028EE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004028F5                 call    ds:libintl_gettext
.text:004028FB                 mov     edi, [ebp+14h]
.text:004028FE                 mov     [esp+5Ch+var_4C], edi
.text:00402902                 mov     ebx, [ebp+0]
.text:00402905                 mov     edi, [esp+5Ch+arg_4]
.text:00402909                 mov     esi, [edi+ebx*4]
.text:0040290C                 movsx   ecx, byte ptr [esi]
.text:0040290F                 mov     esi, ds:_iob
.text:00402915                 add     esi, 40h ; '@'
.text:00402918                 mov     [esp+5Ch+var_50], ecx
.text:0040291C                 mov     ebx, [edi]
.text:0040291E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402922                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402925                 mov     [esp+5Ch+MaxCount], ebx
.text:00402929                 call    fprintf
.text:0040292E
.text:0040292E loc_40292E:                             ; CODE XREF: sub_402460+51D↓j
.text:0040292E                 mov     ebx, [ebp+0]
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402460+47F↑j
.text:00402931                 mov     dword ptr [ebp+14h], offset dword_402310
.text:00402938                 lea     edx, [ebx+1]
.text:0040293B                 mov     [ebp+0], edx
.text:0040293E
.text:0040293E loc_40293E:                             ; CODE XREF: sub_402460+999↓j
.text:0040293E                 mov     dword ptr [ebp+8], 0
.text:00402945                 jmp     loc_4027B8
.text:0040294A ; ---------------------------------------------------------------------------
.text:0040294A
.text:0040294A loc_40294A:                             ; CODE XREF: sub_402460+48C↑j
.text:0040294A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402951                 call    ds:libintl_gettext
.text:00402957                 mov     ecx, [ebp+14h]
.text:0040295A                 mov     edi, [esp+5Ch+arg_4]
.text:0040295E                 mov     edx, ds:_iob
.text:00402964                 mov     [esp+5Ch+var_50], ecx
.text:00402968                 mov     ebx, [edi]
.text:0040296A                 add     edx, 40h ; '@'
.text:0040296D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402971                 mov     [esp+5Ch+MaxCount], ebx
.text:00402975                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402978                 call    fprintf
.text:0040297D                 jmp     short loc_40292E
.text:0040297D ; ---------------------------------------------------------------------------
.text:0040297F                 align 10h
.text:00402980
.text:00402980 loc_402980:                             ; CODE XREF: sub_402460+196↑j
.text:00402980                                         ; sub_402460+1B5↑j ...
.text:00402980                 mov     esi, [ebp+14h]
.text:00402983                 movzx   ebx, byte ptr [esi]
.text:00402986                 inc     esi
.text:00402987                 mov     [ebp+14h], esi
.text:0040298A                 mov     ecx, [esp+5Ch+Str]
.text:0040298E                 movsx   esi, bl
.text:00402991                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402995                 mov     edi, esi
.text:00402997                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040299A                 call    strchr
.text:0040299F                 mov     ecx, [ebp+14h]
.text:004029A2                 cmp     byte ptr [ecx], 0
.text:004029A5                 jnz     short loc_4029AA
.text:004029A7                 inc     dword ptr [ebp+0]
.text:004029AA
.text:004029AA loc_4029AA:                             ; CODE XREF: sub_402460+545↑j
.text:004029AA                 test    eax, eax
.text:004029AC                 jz      loc_402D90
.text:004029B2                 cmp     bl, 3Ah ; ':'
.text:004029B5                 jz      loc_402D90
.text:004029BB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004029BE                 jz      loc_402A76
.text:004029C4                 movzx   edx, byte ptr [eax+1]
.text:004029C8
.text:004029C8 loc_4029C8:                             ; CODE XREF: sub_402460+61D↓j
.text:004029C8                 cmp     dl, 3Ah ; ':'
.text:004029CB                 jz      short loc_4029D4
.text:004029CD
.text:004029CD loc_4029CD:                             ; CODE XREF: sub_402460+590↓j
.text:004029CD                 mov     eax, esi
.text:004029CF                 jmp     loc_4025B7
.text:004029D4 ; ---------------------------------------------------------------------------
.text:004029D4
.text:004029D4 loc_4029D4:                             ; CODE XREF: sub_402460+56B↑j
.text:004029D4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004029D8                 jz      loc_402A61
.text:004029DE                 cmp     byte ptr [ecx], 0
.text:004029E1                 jz      short loc_4029F2
.text:004029E3
.text:004029E3 loc_4029E3:                             ; CODE XREF: sub_402460+604↓j
.text:004029E3                 inc     dword ptr [ebp+0]
.text:004029E6                 mov     [ebp+0Ch], ecx
.text:004029E9
.text:004029E9 loc_4029E9:                             ; CODE XREF: sub_402460+5AB↓j
.text:004029E9                                         ; sub_402460+5C6↓j ...
.text:004029E9                 mov     dword ptr [ebp+14h], 0
.text:004029F0                 jmp     short loc_4029CD
.text:004029F2 ; ---------------------------------------------------------------------------
.text:004029F2
.text:004029F2 loc_4029F2:                             ; CODE XREF: sub_402460+581↑j
.text:004029F2                 mov     ecx, [ebp+0]
.text:004029F5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004029F9                 jz      short loc_402A0D
.text:004029FB                 mov     eax, [esp+5Ch+arg_4]
.text:004029FF                 lea     edx, [ecx+1]
.text:00402A02                 mov     [ebp+0], edx
.text:00402A05                 mov     ebx, [eax+ecx*4]
.text:00402A08                 mov     [ebp+0Ch], ebx
.text:00402A0B                 jmp     short loc_4029E9
.text:00402A0D ; ---------------------------------------------------------------------------
.text:00402A0D
.text:00402A0D loc_402A0D:                             ; CODE XREF: sub_402460+599↑j
.text:00402A0D                 mov     ecx, [esp+5Ch+var_14]
.text:00402A11                 test    ecx, ecx
.text:00402A13                 jnz     short loc_402A2F
.text:00402A15
.text:00402A15 loc_402A15:                             ; CODE XREF: sub_402460+5FF↓j
.text:00402A15                 mov     [ebp+8], edi
.text:00402A18                 mov     edi, [esp+5Ch+Str]
.text:00402A1C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402A1F                 jz      short loc_402A28
.text:00402A21                 mov     esi, 3Fh ; '?'
.text:00402A26                 jmp     short loc_4029E9
.text:00402A28 ; ---------------------------------------------------------------------------
.text:00402A28
.text:00402A28 loc_402A28:                             ; CODE XREF: sub_402460+5BF↑j
.text:00402A28                 mov     esi, 3Ah ; ':'
.text:00402A2D                 jmp     short loc_4029E9
.text:00402A2F ; ---------------------------------------------------------------------------
.text:00402A2F
.text:00402A2F loc_402A2F:                             ; CODE XREF: sub_402460+5B3↑j
.text:00402A2F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402A36                 call    ds:libintl_gettext
.text:00402A3C                 mov     [esp+5Ch+var_50], edi
.text:00402A40                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A44                 mov     edx, ds:_iob
.text:00402A4A                 mov     esi, [ebx]
.text:00402A4C                 add     edx, 40h ; '@'
.text:00402A4F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A53                 mov     [esp+5Ch+MaxCount], esi
.text:00402A57                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A5A                 call    fprintf
.text:00402A5F                 jmp     short loc_402A15
.text:00402A61 ; ---------------------------------------------------------------------------
.text:00402A61
.text:00402A61 loc_402A61:                             ; CODE XREF: sub_402460+578↑j
.text:00402A61                 cmp     byte ptr [ecx], 0
.text:00402A64                 jnz     loc_4029E3
.text:00402A6A                 mov     dword ptr [ebp+0Ch], 0
.text:00402A71                 jmp     loc_4029E9
.text:00402A76 ; ---------------------------------------------------------------------------
.text:00402A76
.text:00402A76 loc_402A76:                             ; CODE XREF: sub_402460+55E↑j
.text:00402A76                 movzx   edx, byte ptr [eax+1]
.text:00402A7A                 cmp     dl, 3Bh ; ';'
.text:00402A7D                 jnz     loc_4029C8
.text:00402A83                 mov     [esp+5Ch+var_2C], 0
.text:00402A8B                 mov     [esp+5Ch+var_30], 0
.text:00402A93                 mov     [esp+5Ch+var_34], 0
.text:00402A9B                 mov     [esp+5Ch+var_38], 0
.text:00402AA3                 cmp     byte ptr [ecx], 0
.text:00402AA6                 jz      loc_402D1B
.text:00402AAC                 inc     dword ptr [ebp+0]
.text:00402AAF                 mov     [ebp+0Ch], ecx
.text:00402AB2
.text:00402AB2 loc_402AB2:                             ; CODE XREF: sub_402460+8D4↓j
.text:00402AB2                 mov     edi, [ebp+0Ch]
.text:00402AB5                 mov     [ebp+14h], edi
.text:00402AB8                 movzx   eax, byte ptr [edi]
.text:00402ABB                 test    al, al
.text:00402ABD                 jz      short loc_402ACF
.text:00402ABF                 cmp     al, 3Dh ; '='
.text:00402AC1                 jz      short loc_402ACF
.text:00402AC3
.text:00402AC3 loc_402AC3:                             ; CODE XREF: sub_402460+66D↓j
.text:00402AC3                 inc     edi
.text:00402AC4                 movzx   eax, byte ptr [edi]
.text:00402AC7                 test    al, al
.text:00402AC9                 jz      short loc_402ACF
.text:00402ACB                 cmp     al, 3Dh ; '='
.text:00402ACD                 jnz     short loc_402AC3
.text:00402ACF
.text:00402ACF loc_402ACF:                             ; CODE XREF: sub_402460+65D↑j
.text:00402ACF                                         ; sub_402460+661↑j ...
.text:00402ACF                 mov     [esp+5Ch+var_3C], 0
.text:00402AD7                 mov     esi, [esp+5Ch+arg_C]
.text:00402ADB                 mov     eax, [esi]
.text:00402ADD                 test    eax, eax
.text:00402ADF                 jz      loc_402C60
.text:00402AE5                 mov     ecx, eax
.text:00402AE7
.text:00402AE7 loc_402AE7:                             ; CODE XREF: sub_402460+6B3↓j
.text:00402AE7                 mov     ebx, [ebp+14h]
.text:00402AEA                 mov     eax, edi
.text:00402AEC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00402AEF                 sub     eax, ebx
.text:00402AF1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402AF5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402AF9                 call    strncmp
.text:00402AFE                 test    eax, eax
.text:00402B00                 jz      loc_402CC7
.text:00402B06
.text:00402B06 loc_402B06:                             ; CODE XREF: sub_402460+88C↓j
.text:00402B06                                         ; sub_402460+89D↓j
.text:00402B06                 inc     [esp+5Ch+var_3C]
.text:00402B0A                 add     esi, 10h
.text:00402B0D                 mov     edx, [esi]
.text:00402B0F                 test    edx, edx
.text:00402B11                 mov     ecx, edx
.text:00402B13                 jnz     short loc_402AE7
.text:00402B15
.text:00402B15 loc_402B15:                             ; CODE XREF: sub_402460+8B6↓j
.text:00402B15                 mov     esi, [esp+5Ch+var_34]
.text:00402B19                 test    esi, esi
.text:00402B1B                 jz      short loc_402B29
.text:00402B1D                 mov     ebx, [esp+5Ch+var_30]
.text:00402B21                 test    ebx, ebx
.text:00402B23                 jz      loc_402C71
.text:00402B29
.text:00402B29 loc_402B29:                             ; CODE XREF: sub_402460+6BB↑j
.text:00402B29                 mov     esi, [esp+5Ch+var_2C]
.text:00402B2D                 test    esi, esi
.text:00402B2F                 jz      loc_402C60
.text:00402B35                 cmp     byte ptr [edi], 0
.text:00402B38                 jz      loc_402BE0
.text:00402B3E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402B42                 mov     ebx, [ecx+4]
.text:00402B45                 test    ebx, ebx
.text:00402B47                 jz      short loc_402B88
.text:00402B49                 lea     edx, [edi+1]
.text:00402B4C                 mov     [ebp+0Ch], edx
.text:00402B4F
.text:00402B4F loc_402B4F:                             ; CODE XREF: sub_402460+788↓j
.text:00402B4F                                         ; sub_402460+7A7↓j
.text:00402B4F                 mov     edi, [ebp+14h]
.text:00402B52                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402B55                 call    strlen
.text:00402B5A                 add     [ebp+14h], eax
.text:00402B5D                 mov     eax, [esp+5Ch+arg_10]
.text:00402B61                 test    eax, eax
.text:00402B63                 jz      short loc_402B70
.text:00402B65                 mov     edx, [esp+5Ch+var_38]
.text:00402B69                 mov     ebp, [esp+5Ch+arg_10]
.text:00402B6D                 mov     [ebp+0], edx
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_402460+703↑j
.text:00402B70                 mov     eax, [esp+5Ch+var_2C]
.text:00402B74                 mov     ecx, [eax+8]
.text:00402B77                 test    ecx, ecx
.text:00402B79                 jnz     loc_40273A
.text:00402B7F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402B83                 jmp     loc_402732
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_402460+6E7↑j
.text:00402B88                 mov     eax, [esp+5Ch+var_14]
.text:00402B8C                 test    eax, eax
.text:00402B8E                 jnz     short loc_402BA3
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_402460+779↓j
.text:00402B90                 mov     ecx, [ebp+14h]
.text:00402B93                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B96                 call    strlen
.text:00402B9B                 add     [ebp+14h], eax
.text:00402B9E                 jmp     loc_4027B8
.text:00402BA3 ; ---------------------------------------------------------------------------
.text:00402BA3
.text:00402BA3 loc_402BA3:                             ; CODE XREF: sub_402460+72E↑j
.text:00402BA3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402BAA                 call    ds:libintl_gettext
.text:00402BB0                 mov     edx, [esp+5Ch+var_2C]
.text:00402BB4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BB8                 mov     edi, [edx]
.text:00402BBA                 mov     [esp+5Ch+var_50], edi
.text:00402BBE                 mov     edi, ds:_iob
.text:00402BC4                 mov     esi, [ebx]
.text:00402BC6                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BCA                 add     edi, 40h ; '@'
.text:00402BCD                 mov     [esp+5Ch+MaxCount], esi
.text:00402BD1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402BD4                 call    fprintf
.text:00402BD9                 jmp     short loc_402B90
.text:00402BD9 ; ---------------------------------------------------------------------------
.text:00402BDB                 align 10h
.text:00402BE0
.text:00402BE0 loc_402BE0:                             ; CODE XREF: sub_402460+6D8↑j
.text:00402BE0                 mov     esi, [esp+5Ch+var_2C]
.text:00402BE4                 cmp     dword ptr [esi+4], 1
.text:00402BE8                 jnz     loc_402B4F
.text:00402BEE                 mov     ecx, [ebp+0]
.text:00402BF1                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402BF5                 jge     short loc_402C0C
.text:00402BF7                 mov     eax, [esp+5Ch+arg_4]
.text:00402BFB                 lea     ebx, [ecx+1]
.text:00402BFE                 mov     [ebp+0], ebx
.text:00402C01                 mov     edi, [eax+ecx*4]
.text:00402C04                 mov     [ebp+0Ch], edi
.text:00402C07                 jmp     loc_402B4F
.text:00402C0C ; ---------------------------------------------------------------------------
.text:00402C0C
.text:00402C0C loc_402C0C:                             ; CODE XREF: sub_402460+795↑j
.text:00402C0C                 mov     edx, [esp+5Ch+var_14]
.text:00402C10                 test    edx, edx
.text:00402C12                 jnz     short loc_402C27
.text:00402C14
.text:00402C14 loc_402C14:                             ; CODE XREF: sub_402460+7FE↓j
.text:00402C14                 mov     edx, [ebp+14h]
.text:00402C17                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C1A                 call    strlen
.text:00402C1F                 add     [ebp+14h], eax
.text:00402C22                 jmp     loc_402849
.text:00402C27 ; ---------------------------------------------------------------------------
.text:00402C27
.text:00402C27 loc_402C27:                             ; CODE XREF: sub_402460+7B2↑j
.text:00402C27                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402C2E                 call    ds:libintl_gettext
.text:00402C34                 mov     ecx, [ebp+0]
.text:00402C37                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C3B                 mov     edi, [ebx+ecx*4-4]
.text:00402C3F                 mov     ecx, ds:_iob
.text:00402C45                 mov     [esp+5Ch+var_50], edi
.text:00402C49                 mov     esi, [ebx]
.text:00402C4B                 add     ecx, 40h ; '@'
.text:00402C4E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C52                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402C55                 mov     [esp+5Ch+MaxCount], esi
.text:00402C59                 call    fprintf
.text:00402C5E                 jmp     short loc_402C14
.text:00402C60 ; ---------------------------------------------------------------------------
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402460+67F↑j
.text:00402C60                                         ; sub_402460+6CF↑j
.text:00402C60                 mov     dword ptr [ebp+14h], 0
.text:00402C67                 mov     eax, 57h ; 'W'
.text:00402C6C                 jmp     loc_4025B7
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71
.text:00402C71 loc_402C71:                             ; CODE XREF: sub_402460+6C3↑j
.text:00402C71                 mov     edi, [esp+5Ch+var_14]
.text:00402C75                 test    edi, edi
.text:00402C77                 jnz     short loc_402C8F
.text:00402C79
.text:00402C79 loc_402C79:                             ; CODE XREF: sub_402460+865↓j
.text:00402C79                 mov     edx, [ebp+14h]
.text:00402C7C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C7F                 call    strlen
.text:00402C84                 add     [ebp+14h], eax
.text:00402C87                 inc     dword ptr [ebp+0]
.text:00402C8A                 jmp     loc_4027B8
.text:00402C8F ; ---------------------------------------------------------------------------
.text:00402C8F
.text:00402C8F loc_402C8F:                             ; CODE XREF: sub_402460+817↑j
.text:00402C8F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402C96                 call    ds:libintl_gettext
.text:00402C9C                 mov     ecx, [ebp+0]
.text:00402C9F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402CA3                 mov     edi, [ebx+ecx*4]
.text:00402CA6                 mov     ecx, ds:_iob
.text:00402CAC                 mov     [esp+5Ch+var_50], edi
.text:00402CB0                 mov     esi, [ebx]
.text:00402CB2                 add     ecx, 40h ; '@'
.text:00402CB5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402CB9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402CBC                 mov     [esp+5Ch+MaxCount], esi
.text:00402CC0                 call    fprintf
.text:00402CC5                 jmp     short loc_402C79
.text:00402CC7 ; ---------------------------------------------------------------------------
.text:00402CC7
.text:00402CC7 loc_402CC7:                             ; CODE XREF: sub_402460+6A0↑j
.text:00402CC7                 mov     edx, [ebp+14h]
.text:00402CCA                 mov     ebx, edi
.text:00402CCC                 mov     ecx, [esi]
.text:00402CCE                 sub     ebx, edx
.text:00402CD0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402CD3                 call    strlen
.text:00402CD8                 cmp     ebx, eax
.text:00402CDA                 jz      short loc_402D02
.text:00402CDC                 mov     ebx, [esp+5Ch+var_2C]
.text:00402CE0                 test    ebx, ebx
.text:00402CE2                 jz      short loc_402CF1
.text:00402CE4                 mov     [esp+5Ch+var_34], 1
.text:00402CEC                 jmp     loc_402B06
.text:00402CF1 ; ---------------------------------------------------------------------------
.text:00402CF1
.text:00402CF1 loc_402CF1:                             ; CODE XREF: sub_402460+882↑j
.text:00402CF1                 mov     [esp+5Ch+var_2C], esi
.text:00402CF5                 mov     ecx, [esp+5Ch+var_3C]
.text:00402CF9                 mov     [esp+5Ch+var_38], ecx
.text:00402CFD                 jmp     loc_402B06
.text:00402D02 ; ---------------------------------------------------------------------------
.text:00402D02
.text:00402D02 loc_402D02:                             ; CODE XREF: sub_402460+87A↑j
.text:00402D02                 mov     [esp+5Ch+var_2C], esi
.text:00402D06                 mov     eax, [esp+5Ch+var_3C]
.text:00402D0A                 mov     [esp+5Ch+var_30], 1
.text:00402D12                 mov     [esp+5Ch+var_38], eax
.text:00402D16                 jmp     loc_402B15
.text:00402D1B ; ---------------------------------------------------------------------------
.text:00402D1B
.text:00402D1B loc_402D1B:                             ; CODE XREF: sub_402460+646↑j
.text:00402D1B                 mov     edx, [ebp+0]
.text:00402D1E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402D22                 jz      short loc_402D39
.text:00402D24                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D28                 lea     esi, [edx+1]
.text:00402D2B                 mov     [ebp+0], esi
.text:00402D2E                 mov     edi, [ebx+edx*4]
.text:00402D31                 mov     [ebp+0Ch], edi
.text:00402D34                 jmp     loc_402AB2
.text:00402D39 ; ---------------------------------------------------------------------------
.text:00402D39
.text:00402D39 loc_402D39:                             ; CODE XREF: sub_402460+8C2↑j
.text:00402D39                 mov     edi, [esp+5Ch+var_14]
.text:00402D3D                 test    edi, edi
.text:00402D3F                 jnz     short loc_402D5C
.text:00402D41
.text:00402D41 loc_402D41:                             ; CODE XREF: sub_402460+92C↓j
.text:00402D41                 mov     [ebp+8], esi
.text:00402D44                 mov     ebp, [esp+5Ch+Str]
.text:00402D48                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402D4C                 jz      short loc_402D58
.text:00402D4E                 mov     bl, 3Fh ; '?'
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402460+8FA↓j
.text:00402D50                 movsx   eax, bl
.text:00402D53                 jmp     loc_4025B7
.text:00402D58 ; ---------------------------------------------------------------------------
.text:00402D58
.text:00402D58 loc_402D58:                             ; CODE XREF: sub_402460+8EC↑j
.text:00402D58                 mov     bl, 3Ah ; ':'
.text:00402D5A                 jmp     short loc_402D50
.text:00402D5C ; ---------------------------------------------------------------------------
.text:00402D5C
.text:00402D5C loc_402D5C:                             ; CODE XREF: sub_402460+8DF↑j
.text:00402D5C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402D63                 call    ds:libintl_gettext
.text:00402D69                 mov     [esp+5Ch+var_50], esi
.text:00402D6D                 mov     edx, [esp+5Ch+arg_4]
.text:00402D71                 mov     ecx, ds:_iob
.text:00402D77                 mov     ebx, [edx]
.text:00402D79                 add     ecx, 40h ; '@'
.text:00402D7C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402D80                 mov     [esp+5Ch+MaxCount], ebx
.text:00402D84                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402D87                 call    fprintf
.text:00402D8C                 jmp     short loc_402D41
.text:00402D8C ; ---------------------------------------------------------------------------
.text:00402D8E                 align 10h
.text:00402D90
.text:00402D90 loc_402D90:                             ; CODE XREF: sub_402460+54C↑j
.text:00402D90                                         ; sub_402460+555↑j
.text:00402D90                 mov     eax, [esp+5Ch+var_14]
.text:00402D94                 test    eax, eax
.text:00402D96                 jz      short loc_402DCF
.text:00402D98                 mov     ebx, [ebp+1Ch]
.text:00402D9B                 test    ebx, ebx
.text:00402D9D                 jz      short loc_402DD7
.text:00402D9F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402DA6
.text:00402DA6 loc_402DA6:                             ; CODE XREF: sub_402460+97E↓j
.text:00402DA6                 call    ds:libintl_gettext
.text:00402DAC                 mov     [esp+5Ch+var_50], esi
.text:00402DB0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DB4                 mov     edx, ds:_iob
.text:00402DBA                 mov     esi, [ebx]
.text:00402DBC                 add     edx, 40h ; '@'
.text:00402DBF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DC3                 mov     [esp+5Ch+MaxCount], esi
.text:00402DC7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402DCA                 call    fprintf
.text:00402DCF
.text:00402DCF loc_402DCF:                             ; CODE XREF: sub_402460+936↑j
.text:00402DCF                 mov     [ebp+8], edi
.text:00402DD2                 jmp     loc_4027B8
.text:00402DD7 ; ---------------------------------------------------------------------------
.text:00402DD7
.text:00402DD7 loc_402DD7:                             ; CODE XREF: sub_402460+93D↑j
.text:00402DD7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402DDE                 jmp     short loc_402DA6
.text:00402DE0 ; ---------------------------------------------------------------------------
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402460+26E↑j
.text:00402DE0                 mov     edi, [esp+5Ch+var_14]
.text:00402DE4                 test    edi, edi
.text:00402DE6                 jnz     short loc_402DFE
.text:00402DE8
.text:00402DE8 loc_402DE8:                             ; CODE XREF: sub_402460+9D4↓j
.text:00402DE8                 mov     edx, [ebp+14h]
.text:00402DEB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402DEE                 call    strlen
.text:00402DF3                 add     [ebp+14h], eax
.text:00402DF6                 inc     dword ptr [ebp+0]
.text:00402DF9                 jmp     loc_40293E
.text:00402DFE ; ---------------------------------------------------------------------------
.text:00402DFE
.text:00402DFE loc_402DFE:                             ; CODE XREF: sub_402460+986↑j
.text:00402DFE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402E05                 call    ds:libintl_gettext
.text:00402E0B                 mov     ebx, [ebp+0]
.text:00402E0E                 mov     edi, [esp+5Ch+arg_4]
.text:00402E12                 mov     ecx, [edi+ebx*4]
.text:00402E15                 mov     ebx, ds:_iob
.text:00402E1B                 mov     [esp+5Ch+var_50], ecx
.text:00402E1F                 mov     esi, [edi]
.text:00402E21                 add     ebx, 40h ; '@'
.text:00402E24                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E28                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402E2B                 mov     [esp+5Ch+MaxCount], esi
.text:00402E2F                 call    fprintf
.text:00402E34                 jmp     short loc_402DE8
.text:00402E36 ; ---------------------------------------------------------------------------
.text:00402E36
.text:00402E36 loc_402E36:                             ; CODE XREF: sub_402460+246↑j
.text:00402E36                 mov     ecx, [ebp+14h]
.text:00402E39                 mov     ebx, edi
.text:00402E3B                 mov     edx, [esi]
.text:00402E3D                 sub     ebx, ecx
.text:00402E3F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402E42                 call    strlen
.text:00402E47                 cmp     ebx, eax
.text:00402E49                 jz      short loc_402EA1
.text:00402E4B                 mov     ebx, [esp+5Ch+var_18]
.text:00402E4F                 test    ebx, ebx
.text:00402E51                 jz      short loc_402E90
.text:00402E53                 mov     edx, [esp+5Ch+arg_14]
.text:00402E57                 test    edx, edx
.text:00402E59                 jnz     short loc_402E67
.text:00402E5B                 mov     ecx, [esp+5Ch+var_18]
.text:00402E5F                 mov     ebx, [esi+4]
.text:00402E62                 cmp     [ecx+4], ebx
.text:00402E65                 jz      short loc_402E74
.text:00402E67
.text:00402E67 loc_402E67:                             ; CODE XREF: sub_402460+9F9↑j
.text:00402E67                                         ; sub_402460+A1A↓j ...
.text:00402E67                 mov     [esp+5Ch+var_20], 1
.text:00402E6F                 jmp     loc_4026AC
.text:00402E74 ; ---------------------------------------------------------------------------
.text:00402E74
.text:00402E74 loc_402E74:                             ; CODE XREF: sub_402460+A05↑j
.text:00402E74                 mov     edx, [esi+8]
.text:00402E77                 cmp     [ecx+8], edx
.text:00402E7A                 jnz     short loc_402E67
.text:00402E7C                 mov     ebx, [esi+0Ch]
.text:00402E7F                 cmp     [ecx+0Ch], ebx
.text:00402E82                 jnz     short loc_402E67
.text:00402E84                 jmp     loc_4026AC
.text:00402E84 ; ---------------------------------------------------------------------------
.text:00402E89                 align 10h
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402460+9F1↑j
.text:00402E90                 mov     [esp+5Ch+var_18], esi
.text:00402E94                 mov     eax, [esp+5Ch+var_28]
.text:00402E98                 mov     [esp+5Ch+var_24], eax
.text:00402E9C                 jmp     loc_4026AC
.text:00402EA1 ; ---------------------------------------------------------------------------
.text:00402EA1
.text:00402EA1 loc_402EA1:                             ; CODE XREF: sub_402460+9E9↑j
.text:00402EA1                 mov     [esp+5Ch+var_18], esi
.text:00402EA5                 mov     ecx, [esp+5Ch+var_28]
.text:00402EA9                 mov     [esp+5Ch+var_1C], 1
.text:00402EB1                 mov     [esp+5Ch+var_24], ecx
.text:00402EB5                 jmp     loc_4026C0
.text:00402EBA ; ---------------------------------------------------------------------------
.text:00402EBA
.text:00402EBA loc_402EBA:                             ; CODE XREF: sub_402460+1BF↑j
.text:00402EBA                 mov     eax, [esp+5Ch+Str]
.text:00402EBE                 movsx   esi, dl
.text:00402EC1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402EC5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402EC8                 call    strchr
.text:00402ECD                 test    eax, eax
.text:00402ECF                 jnz     loc_402980
.text:00402ED5                 jmp     loc_402625
.text:00402EDA ; ---------------------------------------------------------------------------
.text:00402EDA
.text:00402EDA loc_402EDA:                             ; CODE XREF: sub_402460+17C↑j
.text:00402EDA                 mov     ecx, 1
.text:00402EDF                 jmp     loc_4025E2
.text:00402EE4 ; ---------------------------------------------------------------------------
.text:00402EE4
.text:00402EE4 loc_402EE4:                             ; CODE XREF: sub_402460+D4↑j
.text:00402EE4                                         ; sub_402460+130↑j
.text:00402EE4                 mov     eax, [ebp+20h]
.text:00402EE7                 cmp     eax, [ebp+24h]
.text:00402EEA                 jz      loc_4025C0
.text:00402EF0                 mov     [ebp+0], eax
.text:00402EF3                 jmp     loc_4025C0
.text:00402EF8 ; ---------------------------------------------------------------------------
.text:00402EF8
.text:00402EF8 loc_402EF8:                             ; CODE XREF: sub_402460+FE↑j
.text:00402EF8                 mov     [ebp+20h], eax
.text:00402EFB                 jmp     loc_402580
.text:00402F00 ; ---------------------------------------------------------------------------
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402460+CA↑j
.text:00402F00                 mov     edx, [ebp+20h]
.text:00402F03                 mov     eax, [ebp+24h]
.text:00402F06                 cmp     edx, eax
.text:00402F08                 jz      short loc_402F80
.text:00402F0A                 cmp     eax, ebx
.text:00402F0C                 jz      short loc_402F21
.text:00402F0E                 mov     [esp+5Ch+Str2], ebp
.text:00402F12                 mov     ebx, [esp+5Ch+arg_4]
.text:00402F16                 mov     [esp+5Ch+Str1], ebx
.text:00402F19                 call    sub_403110
.text:00402F1E                 mov     ebx, [ebp+0]
.text:00402F21
.text:00402F21 loc_402F21:                             ; CODE XREF: sub_402460+AAC↑j
.text:00402F21                                         ; sub_402460+B22↓j ...
.text:00402F21                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402F25                 jge     short loc_402F70
.text:00402F27                 mov     esi, [esp+5Ch+arg_4]
.text:00402F2B                 mov     eax, [esi+ebx*4]
.text:00402F2E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402F31                 jz      short loc_402F78
.text:00402F33                 lea     esi, [esi+0]
.text:00402F39                 lea     edi, [edi+0]
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: sub_402460+AFC↓j
.text:00402F40                                         ; sub_402460+B1C↓j
.text:00402F40                 lea     eax, [ebx+1]
.text:00402F43                 mov     ebx, eax
.text:00402F45                 mov     [ebp+0], eax
.text:00402F48                 cmp     eax, [esp+5Ch+arg_0]
.text:00402F4C                 jge     short loc_402F70
.text:00402F4E                 mov     edi, [esp+5Ch+arg_4]
.text:00402F52                 mov     edx, [edi+eax*4]
.text:00402F55                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402F58                 jz      short loc_402F60
.text:00402F5A
.text:00402F5A loc_402F5A:                             ; CODE XREF: sub_402460+B04↓j
.text:00402F5A                 mov     ebx, eax
.text:00402F5C                 jmp     short loc_402F40
.text:00402F5C ; ---------------------------------------------------------------------------
.text:00402F5E                 align 10h
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402460+AF8↑j
.text:00402F60                 cmp     byte ptr [edx+1], 0
.text:00402F64                 jz      short loc_402F5A
.text:00402F66                 lea     esi, [esi+0]
.text:00402F69                 lea     edi, [edi+0]
.text:00402F70
.text:00402F70 loc_402F70:                             ; CODE XREF: sub_402460+AC5↑j
.text:00402F70                                         ; sub_402460+AEC↑j ...
.text:00402F70                 mov     [ebp+24h], ebx
.text:00402F73                 jmp     loc_402530
.text:00402F78 ; ---------------------------------------------------------------------------
.text:00402F78
.text:00402F78 loc_402F78:                             ; CODE XREF: sub_402460+AD1↑j
.text:00402F78                 cmp     byte ptr [eax+1], 0
.text:00402F7C                 jz      short loc_402F40
.text:00402F7E                 jmp     short loc_402F70
.text:00402F80 ; ---------------------------------------------------------------------------
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402460+AA8↑j
.text:00402F80                 cmp     edx, ebx
.text:00402F82                 jz      short loc_402F21
.text:00402F84                 mov     [ebp+20h], ebx
.text:00402F87                 jmp     short loc_402F21
.text:00402F89 ; ---------------------------------------------------------------------------
.text:00402F89
.text:00402F89 loc_402F89:                             ; CODE XREF: sub_402460+88↑j
.text:00402F89                 mov     dword ptr [ebp+18h], 0
.text:00402F90                 mov     esi, [esp+5Ch+Str]
.text:00402F94
.text:00402F94 loc_402F94:                             ; CODE XREF: sub_402460+B49↓j
.text:00402F94                 inc     esi
.text:00402F95                 jmp     loc_4024F8
.text:00402F95 ; ---------------------------------------------------------------------------
.text:00402F9A                 align 10h
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402460+80↑j
.text:00402FA0                 mov     dword ptr [ebp+18h], 2
.text:00402FA7                 mov     esi, ecx
.text:00402FA9                 jmp     short loc_402F94
.text:00402FA9 ; ---------------------------------------------------------------------------
.text:00402FAB                 align 10h
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402460+69↑j
.text:00402FB0                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00402FB7                 call    getenv
.text:00402FBC                 test    eax, eax
.text:00402FBE                 jz      loc_4024D4
.text:00402FC4                 jmp     loc_4024CF
.text:00402FC4 ; ---------------------------------------------------------------------------
.text:00402FC9                 align 10h
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402460+3F↑j
.text:00402FD0                 mov     dword ptr [ebp+0], 1
.text:00402FD7                 mov     ebx, 1
.text:00402FDC                 jmp     loc_4024B0
.text:00402FDC sub_402460      endp
.text:00402FDC
.text:00402FE1 ; ---------------------------------------------------------------------------
.text:00402FE1                 jmp     short sub_402FF0
.text:00402FE1 ; ---------------------------------------------------------------------------
.text:00402FE3                 align 10h
.text:00402FF0
.text:00402FF0 ; =============== S U B R O U T I N E =======================================
.text:00402FF0
.text:00402FF0
.text:00402FF0 ; int __cdecl sub_402FF0(int, int, char *, int, int, int, int)
.text:00402FF0 sub_402FF0      proc near               ; CODE XREF: .text:00402FE1↑j
.text:00402FF0                                         ; sub_403730+3A↓p ...
.text:00402FF0
.text:00402FF0 var_2C          = dword ptr -2Ch
.text:00402FF0 var_28          = dword ptr -28h
.text:00402FF0 Str             = dword ptr -24h
.text:00402FF0 var_20          = dword ptr -20h
.text:00402FF0 var_1C          = dword ptr -1Ch
.text:00402FF0 var_18          = dword ptr -18h
.text:00402FF0 var_14          = dword ptr -14h
.text:00402FF0 var_10          = dword ptr -10h
.text:00402FF0 arg_0           = dword ptr  4
.text:00402FF0 arg_4           = dword ptr  8
.text:00402FF0 arg_8           = dword ptr  0Ch
.text:00402FF0 arg_C           = dword ptr  10h
.text:00402FF0 arg_10          = dword ptr  14h
.text:00402FF0 arg_14          = dword ptr  18h
.text:00402FF0 arg_18          = dword ptr  1Ch
.text:00402FF0
.text:00402FF0                 sub     esp, 2Ch
.text:00402FF3                 mov     edx, dword_406010
.text:00402FF9                 mov     [esp+2Ch+var_10], offset dword_407010 ; int
.text:00403001                 mov     ecx, dword_406014
.text:00403007                 mov     ds:dword_407010, edx
.text:0040300D                 mov     edx, [esp+2Ch+arg_18]
.text:00403011                 mov     ds:dword_407014, ecx
.text:00403017                 mov     ecx, [esp+2Ch+arg_14]
.text:0040301B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040301F                 mov     edx, [esp+2Ch+arg_10]
.text:00403023                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403027                 mov     ecx, [esp+2Ch+arg_C]
.text:0040302B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040302F                 mov     edx, [esp+2Ch+arg_8]
.text:00403033                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403037                 mov     ecx, [esp+2Ch+arg_4]
.text:0040303B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040303F                 mov     edx, [esp+2Ch+arg_0]
.text:00403043                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403047                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040304A                 call    sub_402460
.text:0040304F                 mov     ecx, ds:dword_407010
.text:00403055                 mov     dword_406010, ecx
.text:0040305B                 mov     ecx, ds:dword_40701C
.text:00403061                 mov     ds:dword_4071B0, ecx
.text:00403067                 mov     ecx, ds:dword_407018
.text:0040306D                 mov     dword_406018, ecx
.text:00403073                 add     esp, 2Ch
.text:00403076                 retn
.text:00403076 sub_402FF0      endp
.text:00403076
.text:00403076 ; ---------------------------------------------------------------------------
.text:00403077                 align 10h
.text:00403080                 sub     esp, 2Ch
.text:00403083                 mov     edx, dword_406010
.text:00403089                 mov     dword ptr [esp+1Ch], offset dword_407010
.text:00403091                 mov     ecx, dword_406014
.text:00403097                 mov     dword ptr [esp+18h], 1
.text:0040309F                 mov     ds:dword_407010, edx
.text:004030A5                 mov     edx, [esp+38h]
.text:004030A9                 mov     ds:dword_407014, ecx
.text:004030AF                 mov     ecx, [esp+34h]
.text:004030B3                 mov     [esp+8], edx
.text:004030B7                 mov     edx, [esp+30h]
.text:004030BB                 mov     [esp+4], ecx
.text:004030BF                 mov     dword ptr [esp+14h], 0
.text:004030C7                 mov     dword ptr [esp+10h], 0
.text:004030CF                 mov     dword ptr [esp+0Ch], 0
.text:004030D7                 mov     [esp], edx
.text:004030DA                 call    sub_402460
.text:004030DF                 mov     ecx, ds:dword_407010
.text:004030E5                 mov     dword_406010, ecx
.text:004030EB                 mov     ecx, ds:dword_40701C
.text:004030F1                 mov     ds:dword_4071B0, ecx
.text:004030F7                 mov     ecx, ds:dword_407018
.text:004030FD                 mov     dword_406018, ecx
.text:00403103                 add     esp, 2Ch
.text:00403106                 retn
.text:00403106 ; ---------------------------------------------------------------------------
.text:00403107                 align 10h
.text:00403110
.text:00403110 ; =============== S U B R O U T I N E =======================================
.text:00403110
.text:00403110
.text:00403110 sub_403110      proc near               ; CODE XREF: sub_402460+113↑p
.text:00403110                                         ; sub_402460+AB9↑p
.text:00403110
.text:00403110 var_2C          = dword ptr -2Ch
.text:00403110 var_28          = dword ptr -28h
.text:00403110 var_24          = dword ptr -24h
.text:00403110 var_20          = dword ptr -20h
.text:00403110 var_1C          = dword ptr -1Ch
.text:00403110 var_18          = dword ptr -18h
.text:00403110 var_14          = dword ptr -14h
.text:00403110 arg_0           = dword ptr  4
.text:00403110 arg_4           = dword ptr  8
.text:00403110
.text:00403110                 push    ebp
.text:00403111                 push    edi
.text:00403112                 push    esi
.text:00403113                 push    ebx
.text:00403114                 sub     esp, 1Ch
.text:00403117                 mov     ecx, [esp+2Ch+arg_4]
.text:0040311B                 mov     eax, [esp+2Ch+arg_4]
.text:0040311F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403123                 mov     edx, [ecx+20h]
.text:00403126                 mov     edi, [esp+2Ch+arg_0]
.text:0040312A                 mov     ecx, [ebx]
.text:0040312C                 mov     [esp+2Ch+var_2C], edx
.text:0040312F                 mov     [esp+2Ch+var_14], edx
.text:00403133                 mov     edx, [eax+24h]
.text:00403136                 mov     [esp+2Ch+var_28], ecx
.text:0040313A                 mov     [esp+2Ch+var_1C], ecx
.text:0040313E                 cmp     ecx, edx
.text:00403140                 mov     [esp+2Ch+var_18], edx
.text:00403144                 jle     short loc_4031C0
.text:00403146                 mov     esi, [esp+2Ch+var_2C]
.text:00403149                 cmp     edx, esi
.text:0040314B                 jle     short loc_4031C0
.text:0040314D                 lea     esi, [esi+0]
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_403110+A1↓j
.text:00403150                 mov     ebx, [esp+2Ch+var_1C]
.text:00403154                 mov     edx, [esp+2Ch+var_18]
.text:00403158                 mov     ebp, [esp+2Ch+var_18]
.text:0040315C                 mov     eax, [esp+2Ch+var_14]
.text:00403160                 sub     ebx, edx
.text:00403162                 mov     [esp+2Ch+var_20], ebx
.text:00403166                 sub     ebp, eax
.text:00403168                 cmp     ebx, ebp
.text:0040316A                 jle     short loc_4031E5
.text:0040316C                 xor     esi, esi
.text:0040316E                 cmp     esi, ebp
.text:00403170                 jge     short loc_40319D
.text:00403172                 mov     ecx, [esp+2Ch+var_1C]
.text:00403176                 sub     ecx, ebp
.text:00403178                 mov     [esp+2Ch+var_24], ecx
.text:0040317C                 lea     esi, [esi+0]
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_403110+8B↓j
.text:00403180                 mov     ecx, [esp+2Ch+var_14]
.text:00403184                 mov     edx, [esp+2Ch+var_24]
.text:00403188                 add     ecx, esi
.text:0040318A                 add     edx, esi
.text:0040318C                 mov     ebx, [edi+ecx*4]
.text:0040318F                 mov     eax, [edi+edx*4]
.text:00403192                 inc     esi
.text:00403193                 cmp     esi, ebp
.text:00403195                 mov     [edi+ecx*4], eax
.text:00403198                 mov     [edi+edx*4], ebx
.text:0040319B                 jl      short loc_403180
.text:0040319D
.text:0040319D loc_40319D:                             ; CODE XREF: sub_403110+60↑j
.text:0040319D                 sub     [esp+2Ch+var_1C], ebp
.text:004031A1
.text:004031A1 loc_4031A1:                             ; CODE XREF: sub_403110+107↓j
.text:004031A1                 mov     eax, [esp+2Ch+var_18]
.text:004031A5                 cmp     [esp+2Ch+var_1C], eax
.text:004031A9                 jle     short loc_4031C0
.text:004031AB                 mov     ebp, [esp+2Ch+var_14]
.text:004031AF                 cmp     eax, ebp
.text:004031B1                 jg      short loc_403150
.text:004031B3                 lea     esi, [esi+0]
.text:004031B9                 lea     edi, [edi+0]
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403110+34↑j
.text:004031C0                                         ; sub_403110+3B↑j ...
.text:004031C0                 mov     esi, [esp+2Ch+var_28]
.text:004031C4                 mov     ecx, [esp+2Ch+var_18]
.text:004031C8                 mov     eax, [esp+2Ch+var_2C]
.text:004031CB                 mov     edi, [esp+2Ch+arg_4]
.text:004031CF                 mov     edx, [esp+2Ch+var_28]
.text:004031D3                 sub     esi, ecx
.text:004031D5                 add     esi, eax
.text:004031D7                 mov     [edi+20h], esi
.text:004031DA                 mov     [edi+24h], edx
.text:004031DD                 add     esp, 1Ch
.text:004031E0                 pop     ebx
.text:004031E1                 pop     esi
.text:004031E2                 pop     edi
.text:004031E3                 pop     ebp
.text:004031E4                 retn
.text:004031E5 ; ---------------------------------------------------------------------------
.text:004031E5
.text:004031E5 loc_4031E5:                             ; CODE XREF: sub_403110+5A↑j
.text:004031E5                 xor     esi, esi
.text:004031E7                 cmp     esi, [esp+2Ch+var_20]
.text:004031EB                 jge     short loc_40320F
.text:004031ED                 lea     esi, [esi+0]
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_403110+FD↓j
.text:004031F0                 mov     ebx, [esp+2Ch+var_14]
.text:004031F4                 mov     ebp, [esp+2Ch+var_18]
.text:004031F8                 add     ebx, esi
.text:004031FA                 add     ebp, esi
.text:004031FC                 mov     edx, [edi+ebx*4]
.text:004031FF                 inc     esi
.text:00403200                 cmp     esi, [esp+2Ch+var_20]
.text:00403204                 mov     ecx, [edi+ebp*4]
.text:00403207                 mov     [edi+ebx*4], ecx
.text:0040320A                 mov     [edi+ebp*4], edx
.text:0040320D                 jl      short loc_4031F0
.text:0040320F
.text:0040320F loc_40320F:                             ; CODE XREF: sub_403110+DB↑j
.text:0040320F                 mov     esi, [esp+2Ch+var_20]
.text:00403213                 add     [esp+2Ch+var_14], esi
.text:00403217                 jmp     short loc_4031A1
.text:00403217 sub_403110      endp
.text:00403217
.text:00403217 ; ---------------------------------------------------------------------------
.text:00403219                 db 17h dup(90h)
.text:00403230 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403230                                         ; DATA XREF: .data:Buffer↓o
.text:00403262 ; const char Format[]
.text:00403262 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403520+50↓o
.text:0040326E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040326E                                         ; DATA XREF: sub_403520:loc_4035C1↓o
.text:0040327E                 db 12h dup(90h)
.text:00403290 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403290                                         ; DATA XREF: sub_403520+100↓o
.text:00403290                 db 'ere is NO',0Ah
.text:00403290                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403290                 db 'R PURPOSE.',0Ah,0
.text:00403328 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403328                                         ; DATA XREF: sub_403520:loc_403661↓o
.text:0040333F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040333F                                         ; DATA XREF: sub_403520:loc_40366D↓o
.text:0040335B                 db 15h dup(90h)
.text:00403370 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403370                                         ; DATA XREF: sub_403520:loc_403679↓o
.text:00403370                 db 'and %s.',0Ah,0
.text:00403390 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403390                                         ; DATA XREF: sub_403520:loc_403685↓o
.text:00403390                 db '%s, and %s.',0Ah,0
.text:004033B4                 db 1Ch dup(90h)
.text:004033D0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004033D0                                         ; DATA XREF: sub_403520:loc_403691↓o
.text:004033D0                 db '%s, %s, and %s.',0Ah,0
.text:004033F8                 db 18h dup(90h)
.text:00403410 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403410                                         ; DATA XREF: sub_403520:loc_40369D↓o
.text:00403410                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040343C                 db 14h dup(90h)
.text:00403450 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403450                                         ; DATA XREF: sub_403520:loc_4036A9↓o
.text:00403450                 db '%s, %s, %s, %s,',0Ah
.text:00403450                 db 'and %s.',0Ah,0
.text:00403480                 db 10h dup(90h)
.text:00403490 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403490                                         ; DATA XREF: sub_403520:loc_4036B5↓o
.text:00403490                 db '%s, %s, %s, %s,',0Ah
.text:00403490                 db '%s, and %s.',0Ah,0
.text:004034C4                 align 10h
.text:004034D0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004034D0                                         ; DATA XREF: sub_403520:def_40358D↓o
.text:004034D0                 db '%s, %s, %s, %s,',0Ah
.text:004034D0                 db '%s, %s, and others.',0Ah,0
.text:0040350C ; const char aSS[]
.text:0040350C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403520+1B5↓o
.text:00403513                 align 10h
.text:00403520
.text:00403520 ; =============== S U B R O U T I N E =======================================
.text:00403520
.text:00403520
.text:00403520 ; int __cdecl sub_403520(FILE *, FILE *, int, int, va_list)
.text:00403520 sub_403520      proc near               ; CODE XREF: sub_402040+A5↑p
.text:00403520                                         ; .text:0040371A↓p
.text:00403520
.text:00403520 Stream          = dword ptr -2Ch
.text:00403520 Format          = dword ptr -28h
.text:00403520 ArgList         = dword ptr -24h
.text:00403520 var_20          = dword ptr -20h
.text:00403520 var_1C          = dword ptr -1Ch
.text:00403520 var_14          = dword ptr -14h
.text:00403520 arg_0           = dword ptr  4
.text:00403520 arg_4           = dword ptr  8
.text:00403520 arg_8           = dword ptr  0Ch
.text:00403520 arg_C           = dword ptr  10h
.text:00403520 arg_10          = dword ptr  14h
.text:00403520
.text:00403520                 push    ebp
.text:00403521                 push    edi
.text:00403522                 push    esi
.text:00403523                 push    ebx
.text:00403524                 sub     esp, 1Ch
.text:00403527                 xor     ebx, ebx
.text:00403529                 mov     edi, [esp+2Ch+arg_10]
.text:0040352D                 mov     edx, [esp+2Ch+arg_8]
.text:00403531                 mov     esi, [esp+2Ch+arg_0]
.text:00403535                 mov     eax, [edi]
.text:00403537                 mov     ecx, [esp+2Ch+arg_4]
.text:0040353B                 mov     [esp+2Ch+var_14], edx
.text:0040353F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403543                 lea     edx, [edi+4]
.text:00403546                 test    eax, eax
.text:00403548                 jz      short loc_40355C
.text:0040354A                 lea     esi, [esi+0]
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_403520+3A↓j
.text:00403550                 mov     eax, edx
.text:00403552                 inc     ebx
.text:00403553                 mov     eax, [eax]
.text:00403555                 add     edx, 4
.text:00403558                 test    eax, eax
.text:0040355A                 jnz     short loc_403550
.text:0040355C
.text:0040355C loc_40355C:                             ; CODE XREF: sub_403520+28↑j
.text:0040355C                 test    ecx, ecx
.text:0040355E                 jz      loc_4036CD
.text:00403564                 mov     [esp+2Ch+var_1C], ebp
.text:00403568                 mov     edx, [esp+2Ch+var_14]
.text:0040356C                 mov     [esp+2Ch+ArgList], ecx
.text:00403570                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403578                 mov     [esp+2Ch+var_20], edx
.text:0040357C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040357F                 call    fprintf
.text:00403584
.text:00403584 loc_403584:                             ; CODE XREF: sub_403520+1C9↓j
.text:00403584                 cmp     ebx, 9          ; switch 10 cases
.text:00403587                 ja      def_40358D      ; jumptable 0040358D default case
.text:0040358D                 jmp     ds:jpt_40358D[ebx*4] ; switch jump
.text:0040358D ; ---------------------------------------------------------------------------
.text:00403594 jpt_40358D      dd offset loc_4035BC    ; DATA XREF: sub_403520+6D↑r
.text:00403594                 dd offset loc_4035C1    ; jump table for switch statement
.text:00403594                 dd offset loc_403661
.text:00403594                 dd offset loc_40366D
.text:00403594                 dd offset loc_403679
.text:00403594                 dd offset loc_403685
.text:00403594                 dd offset loc_403691
.text:00403594                 dd offset loc_40369D
.text:00403594                 dd offset loc_4036A9
.text:00403594                 dd offset loc_4036B5
.text:004035BC ; ---------------------------------------------------------------------------
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_403520+6D↑j
.text:004035BC                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:004035BC                 call    abort           ; jumptable 0040358D case 0
.text:004035C1 ; ---------------------------------------------------------------------------
.text:004035C1
.text:004035C1 loc_4035C1:                             ; CODE XREF: sub_403520+6D↑j
.text:004035C1                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:004035C1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040358D case 1
.text:004035C8                 nop
.text:004035C9                 lea     esi, [esi+0]
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_403520+148↓j
.text:004035D0                                         ; sub_403520+154↓j ...
.text:004035D0                 call    ds:libintl_gettext
.text:004035D6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004035DA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004035DD                 mov     [esp+2Ch+Format], eax ; Format
.text:004035E1                 call    vfprintf
.text:004035E6                 mov     ebx, [esi+4]
.text:004035E9                 dec     ebx
.text:004035EA                 test    ebx, ebx
.text:004035EC                 mov     [esi+4], ebx
.text:004035EF                 js      short loc_40364F
.text:004035F1                 mov     edi, [esi]
.text:004035F3                 mov     byte ptr [edi], 0Ah
.text:004035F6                 inc     dword ptr [esi]
.text:004035F8
.text:004035F8 loc_4035F8:                             ; CODE XREF: sub_403520+13F↓j
.text:004035F8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004035FC                 mov     edx, Buffer
.text:00403602                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403605                 call    fputs
.text:0040360A                 mov     ebp, [esi+4]
.text:0040360D                 dec     ebp
.text:0040360E                 test    ebp, ebp
.text:00403610                 mov     [esi+4], ebp
.text:00403613                 js      short loc_40363D
.text:00403615                 mov     ecx, [esi]
.text:00403617                 mov     byte ptr [ecx], 0Ah
.text:0040361A                 inc     dword ptr [esi]
.text:0040361C
.text:0040361C loc_40361C:                             ; CODE XREF: sub_403520+12D↓j
.text:0040361C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403620                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403627                 call    ds:libintl_gettext
.text:0040362D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403631                 add     esp, 1Ch
.text:00403634                 pop     ebx
.text:00403635                 pop     esi
.text:00403636                 pop     edi
.text:00403637                 pop     ebp
.text:00403638                 jmp     fputs
.text:0040363D ; ---------------------------------------------------------------------------
.text:0040363D
.text:0040363D loc_40363D:                             ; CODE XREF: sub_403520+F3↑j
.text:0040363D                 mov     [esp+2Ch+Format], esi ; File
.text:00403641                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403648                 call    _flsbuf
.text:0040364D                 jmp     short loc_40361C
.text:0040364F ; ---------------------------------------------------------------------------
.text:0040364F
.text:0040364F loc_40364F:                             ; CODE XREF: sub_403520+CF↑j
.text:0040364F                 mov     [esp+2Ch+Format], esi ; File
.text:00403653                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040365A                 call    _flsbuf
.text:0040365F                 jmp     short loc_4035F8
.text:00403661 ; ---------------------------------------------------------------------------
.text:00403661
.text:00403661 loc_403661:                             ; CODE XREF: sub_403520+6D↑j
.text:00403661                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:00403661                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040358D case 2
.text:00403668                 jmp     loc_4035D0
.text:0040366D ; ---------------------------------------------------------------------------
.text:0040366D
.text:0040366D loc_40366D:                             ; CODE XREF: sub_403520+6D↑j
.text:0040366D                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:0040366D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040358D case 3
.text:00403674                 jmp     loc_4035D0
.text:00403679 ; ---------------------------------------------------------------------------
.text:00403679
.text:00403679 loc_403679:                             ; CODE XREF: sub_403520+6D↑j
.text:00403679                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:00403679                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040358D case 4
.text:00403680                 jmp     loc_4035D0
.text:00403685 ; ---------------------------------------------------------------------------
.text:00403685
.text:00403685 loc_403685:                             ; CODE XREF: sub_403520+6D↑j
.text:00403685                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:00403685                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040358D case 5
.text:0040368C                 jmp     loc_4035D0
.text:00403691 ; ---------------------------------------------------------------------------
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: sub_403520+6D↑j
.text:00403691                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:00403691                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040358D case 6
.text:00403698                 jmp     loc_4035D0
.text:0040369D ; ---------------------------------------------------------------------------
.text:0040369D
.text:0040369D loc_40369D:                             ; CODE XREF: sub_403520+6D↑j
.text:0040369D                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:0040369D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040358D case 7
.text:004036A4                 jmp     loc_4035D0
.text:004036A9 ; ---------------------------------------------------------------------------
.text:004036A9
.text:004036A9 loc_4036A9:                             ; CODE XREF: sub_403520+6D↑j
.text:004036A9                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:004036A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040358D case 8
.text:004036B0                 jmp     loc_4035D0
.text:004036B5 ; ---------------------------------------------------------------------------
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_403520+6D↑j
.text:004036B5                                         ; DATA XREF: sub_403520:jpt_40358D↑o
.text:004036B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040358D case 9
.text:004036BC                 jmp     loc_4035D0
.text:004036C1 ; ---------------------------------------------------------------------------
.text:004036C1
.text:004036C1 def_40358D:                             ; CODE XREF: sub_403520+67↑j
.text:004036C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040358D default case
.text:004036C8                 jmp     loc_4035D0
.text:004036CD ; ---------------------------------------------------------------------------
.text:004036CD
.text:004036CD loc_4036CD:                             ; CODE XREF: sub_403520+3E↑j
.text:004036CD                 mov     [esp+2Ch+var_20], ebp
.text:004036D1                 mov     ecx, [esp+2Ch+var_14]
.text:004036D5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004036DD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004036E0                 mov     [esp+2Ch+ArgList], ecx
.text:004036E4                 call    fprintf
.text:004036E9                 jmp     loc_403584
.text:004036E9 sub_403520      endp
.text:004036E9
.text:004036E9 ; ---------------------------------------------------------------------------
.text:004036EE                 align 10h
.text:004036F0                 sub     esp, 1Ch
.text:004036F3                 mov     edx, [esp+2Ch]
.text:004036F7                 lea     ecx, [esp+30h]
.text:004036FB                 mov     [esp+10h], ecx
.text:004036FF                 mov     ecx, [esp+28h]
.text:00403703                 mov     [esp+0Ch], edx
.text:00403707                 mov     edx, [esp+24h]
.text:0040370B                 mov     [esp+8], ecx
.text:0040370F                 mov     [esp+4], edx
.text:00403713                 mov     edx, [esp+20h]
.text:00403717                 mov     [esp], edx
.text:0040371A                 call    sub_403520
.text:0040371F                 add     esp, 1Ch
.text:00403722                 retn
.text:00403722 ; ---------------------------------------------------------------------------
.text:00403723                 align 10h
.text:00403730
.text:00403730 ; =============== S U B R O U T I N E =======================================
.text:00403730
.text:00403730
.text:00403730 ; int __cdecl sub_403730(int, int, char *, int, int)
.text:00403730 sub_403730      proc near               ; CODE XREF: sub_402040+58↑p
.text:00403730
.text:00403730 var_1C          = dword ptr -1Ch
.text:00403730 var_18          = dword ptr -18h
.text:00403730 var_14          = dword ptr -14h
.text:00403730 var_10          = dword ptr -10h
.text:00403730 var_C           = dword ptr -0Ch
.text:00403730 var_8           = dword ptr -8
.text:00403730 var_4           = dword ptr -4
.text:00403730 arg_0           = dword ptr  4
.text:00403730 arg_4           = dword ptr  8
.text:00403730 arg_8           = dword ptr  0Ch
.text:00403730 arg_C           = dword ptr  10h
.text:00403730 arg_10          = dword ptr  14h
.text:00403730
.text:00403730                 sub     esp, 1Ch
.text:00403733                 mov     edx, [esp+1Ch+arg_C]
.text:00403737                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040373F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403743                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040374B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040374F                 mov     edx, [esp+1Ch+arg_4]
.text:00403753                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403757                 mov     ecx, [esp+1Ch+arg_8]
.text:0040375B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040375F                 mov     edx, [esp+1Ch+arg_0]
.text:00403763                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403767                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040376A                 call    sub_402FF0
.text:0040376F                 add     esp, 1Ch
.text:00403772                 retn
.text:00403772 sub_403730      endp
.text:00403772
.text:00403772 ; ---------------------------------------------------------------------------
.text:00403773                 align 10h
.text:00403780                 sub     esp, 2Ch
.text:00403783                 mov     edx, [esp+44h]
.text:00403787                 mov     dword ptr [esp+18h], 0
.text:0040378F                 mov     ecx, [esp+40h]
.text:00403793                 mov     dword ptr [esp+14h], 0
.text:0040379B                 mov     [esp+1Ch], edx
.text:0040379F                 mov     edx, [esp+3Ch]
.text:004037A3                 mov     [esp+10h], ecx
.text:004037A7                 mov     ecx, [esp+38h]
.text:004037AB                 mov     [esp+0Ch], edx
.text:004037AF                 mov     edx, [esp+34h]
.text:004037B3                 mov     [esp+8], ecx
.text:004037B7                 mov     [esp+4], edx
.text:004037BB                 mov     edx, [esp+30h]
.text:004037BF                 mov     [esp], edx
.text:004037C2                 call    sub_402460
.text:004037C7                 add     esp, 2Ch
.text:004037CA                 retn
.text:004037CA ; ---------------------------------------------------------------------------
.text:004037CB                 align 10h
.text:004037D0                 sub     esp, 1Ch
.text:004037D3                 mov     edx, [esp+2Ch]
.text:004037D7                 mov     dword ptr [esp+18h], 0
.text:004037DF                 mov     ecx, [esp+30h]
.text:004037E3                 mov     dword ptr [esp+14h], 1
.text:004037EB                 mov     [esp+0Ch], edx
.text:004037EF                 mov     edx, [esp+24h]
.text:004037F3                 mov     [esp+10h], ecx
.text:004037F7                 mov     ecx, [esp+28h]
.text:004037FB                 mov     [esp+4], edx
.text:004037FF                 mov     edx, [esp+20h]
.text:00403803                 mov     [esp+8], ecx
.text:00403807                 mov     [esp], edx
.text:0040380A                 call    sub_402FF0
.text:0040380F                 add     esp, 1Ch
.text:00403812                 retn
.text:00403812 ; ---------------------------------------------------------------------------
.text:00403813                 align 10h
.text:00403820                 sub     esp, 2Ch
.text:00403823                 mov     edx, [esp+44h]
.text:00403827                 mov     dword ptr [esp+18h], 0
.text:0040382F                 mov     ecx, [esp+40h]
.text:00403833                 mov     dword ptr [esp+14h], 1
.text:0040383B                 mov     [esp+1Ch], edx
.text:0040383F                 mov     edx, [esp+3Ch]
.text:00403843                 mov     [esp+10h], ecx
.text:00403847                 mov     ecx, [esp+38h]
.text:0040384B                 mov     [esp+0Ch], edx
.text:0040384F                 mov     edx, [esp+34h]
.text:00403853                 mov     [esp+8], ecx
.text:00403857                 mov     [esp+4], edx
.text:0040385B                 mov     edx, [esp+30h]
.text:0040385F                 mov     [esp], edx
.text:00403862                 call    sub_402460
.text:00403867                 add     esp, 2Ch
.text:0040386A                 retn
.text:0040386A ; ---------------------------------------------------------------------------
.text:0040386B                 align 10h
.text:00403870 aLiteral        db 'literal',0          ; DATA XREF: .text:004038B0↓o
.text:00403878 aShell          db 'shell',0            ; DATA XREF: .text:004038B4↓o
.text:0040387E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004038B8↓o
.text:0040388B aC              db 'c',0                ; DATA XREF: .text:004038BC↓o
.text:0040388D aEscape         db 'escape',0           ; DATA XREF: .text:004038C0↓o
.text:00403894 aLocale         db 'locale',0           ; DATA XREF: .text:004038C4↓o
.text:0040389B aClocale        db 'clocale',0          ; DATA XREF: .text:004038C8↓o
.text:004038A3                 align 10h
.text:004038B0                 dd offset aLiteral      ; "literal"
.text:004038B4                 dd offset aShell        ; "shell"
.text:004038B8                 dd offset aShellAlways  ; "shell-always"
.text:004038BC                 dd offset aC            ; "c"
.text:004038C0                 dd offset aEscape       ; "escape"
.text:004038C4                 dd offset aLocale       ; "locale"
.text:004038C8                 dd offset aClocale      ; "clocale"
.text:004038CC                 dd 2 dup(0)
.text:004038D4                 dd 1, 2, 3, 4, 5, 6
.text:004038EC asc_4038EC:                             ; DATA XREF: sub_403900+7E↓o
.text:004038EC                                         ; sub_403900+A39↓o ...
.text:004038EC                 text "UTF-16LE", '"',27h,'`'
.text:004038F2                 align 10h
.text:00403900
.text:00403900 ; =============== S U B R O U T I N E =======================================
.text:00403900
.text:00403900
.text:00403900 ; int __cdecl sub_403900(int, int, char *Str, int, int, int)
.text:00403900 sub_403900      proc near               ; CODE XREF: sub_403900+43A↓p
.text:00403900                                         ; .text:004044C3↓p ...
.text:00403900
.text:00403900 C               = dword ptr -4Ch
.text:00403900 Type            = dword ptr -48h
.text:00403900 SizeInBytes     = dword ptr -44h
.text:00403900 State           = dword ptr -40h
.text:00403900 var_3C          = dword ptr -3Ch
.text:00403900 var_38          = dword ptr -38h
.text:00403900 var_34          = dword ptr -34h
.text:00403900 var_30          = dword ptr -30h
.text:00403900 var_29          = byte ptr -29h
.text:00403900 var_28          = dword ptr -28h
.text:00403900 var_22          = byte ptr -22h
.text:00403900 var_21          = byte ptr -21h
.text:00403900 var_20          = dword ptr -20h
.text:00403900 var_1C          = dword ptr -1Ch
.text:00403900 var_18          = mbstate_t ptr -18h
.text:00403900 arg_0           = dword ptr  4
.text:00403900 arg_4           = dword ptr  8
.text:00403900 Str             = dword ptr  0Ch
.text:00403900 arg_C           = dword ptr  10h
.text:00403900 arg_10          = dword ptr  14h
.text:00403900 arg_14          = dword ptr  18h
.text:00403900
.text:00403900                 push    ebp
.text:00403901                 push    edi
.text:00403902                 push    esi
.text:00403903                 push    ebx
.text:00403904                 sub     esp, 3Ch
.text:00403907                 mov     edx, ds:__mb_cur_max
.text:0040390D                 mov     [esp+4Ch+var_34], 0
.text:00403915                 mov     [esp+4Ch+var_1C], 0
.text:0040391D                 cmp     dword ptr [edx], 1
.text:00403920                 mov     [esp+4Ch+var_20], 0
.text:00403928                 mov     [esp+4Ch+var_21], 0
.text:0040392D                 setz    [esp+4Ch+var_22]
.text:00403932                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403937                 ja      short def_40393D ; jumptable 0040393D default case, cases 0,1
.text:00403939                 mov     edx, [esp+4Ch+arg_10]
.text:0040393D                 jmp     ds:jpt_40393D[edx*4] ; switch jump
.text:0040393D ; ---------------------------------------------------------------------------
.text:00403944 jpt_40393D      dd offset def_40393D    ; DATA XREF: sub_403900+3D↑r
.text:00403944                 dd offset def_40393D    ; jump table for switch statement
.text:00403944                 dd offset loc_404285
.text:00403944                 dd offset loc_403960
.text:00403944                 dd offset loc_4042AB
.text:00403944                 dd offset loc_4042B5
.text:00403944                 dd offset loc_4042B5
.text:00403960 ; ---------------------------------------------------------------------------
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_403900+3D↑j
.text:00403960                                         ; DATA XREF: sub_403900:jpt_40393D↑o
.text:00403960                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040393D case 3
.text:00403964                 cmp     [esp+4Ch+var_34], eax
.text:00403968                 jnb     short loc_403971
.text:0040396A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040396E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403971
.text:00403971 loc_403971:                             ; CODE XREF: sub_403900+68↑j
.text:00403971                 mov     [esp+4Ch+var_34], 1
.text:00403979                 mov     [esp+4Ch+var_21], 1
.text:0040397E                 mov     [esp+4Ch+var_1C], offset asc_4038EC ; "\"'`"
.text:00403986
.text:00403986 loc_403986:                             ; CODE XREF: sub_403900+9A6↓j
.text:00403986                 mov     [esp+4Ch+var_20], 1
.text:0040398E
.text:0040398E def_40393D:                             ; CODE XREF: sub_403900+37↑j
.text:0040398E                                         ; sub_403900+3D↑j ...
.text:0040398E                 xor     ebp, ebp        ; jumptable 0040393D default case, cases 0,1
.text:00403990
.text:00403990 loc_403990:                             ; CODE XREF: sub_403900+3DB↓j
.text:00403990                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403995                 jz      loc_404277
.text:0040399B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403900+980↓j
.text:0040399F                 jz      loc_40420E
.text:004039A5                 cmp     [esp+4Ch+var_21], 0
.text:004039AA                 jz      short loc_4039F0
.text:004039AC                 mov     esi, [esp+4Ch+var_20]
.text:004039B0                 test    esi, esi
.text:004039B2                 jz      short loc_4039F0
.text:004039B4                 mov     ecx, [esp+4Ch+var_20]
.text:004039B8                 lea     edi, [ecx+ebp]
.text:004039BB                 cmp     edi, [esp+4Ch+arg_C]
.text:004039BF                 ja      short loc_4039F0
.text:004039C1                 cld
.text:004039C2                 mov     ebx, [esp+4Ch+Str]
.text:004039C6                 mov     edi, [esp+4Ch+var_1C]
.text:004039CA                 add     ebx, ebp
.text:004039CC                 mov     esi, ebx
.text:004039CE                 cmp     ecx, ecx
.text:004039D0                 repe cmpsb
.text:004039D2                 jnz     short loc_4039F0
.text:004039D4                 mov     edx, [esp+4Ch+arg_4]
.text:004039D8                 cmp     [esp+4Ch+var_34], edx
.text:004039DC                 jnb     short loc_4039EA
.text:004039DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004039E2                 mov     eax, [esp+4Ch+var_34]
.text:004039E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004039EA
.text:004039EA loc_4039EA:                             ; CODE XREF: sub_403900+DC↑j
.text:004039EA                 inc     [esp+4Ch+var_34]
.text:004039EE                 mov     esi, esi
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_403900+AA↑j
.text:004039F0                                         ; sub_403900+B2↑j ...
.text:004039F0                 mov     edi, [esp+4Ch+Str]
.text:004039F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004039F9                 movzx   eax, bl
.text:004039FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004039FF                 ja      def_403A05      ; jumptable 00403A05 default case, cases 1-6,14-31,64
.text:00403A05                 jmp     ds:jpt_403A05[eax*4] ; switch jump
.text:00403A05 ; ---------------------------------------------------------------------------
.text:00403A0C jpt_403A05      dd offset loc_403C08, offset def_403A05, offset def_403A05
.text:00403A0C                                         ; DATA XREF: sub_403900+105↑r
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05 ; jump table for switch statement
.text:00403A0C                 dd offset def_403A05, offset loc_403CE0, offset loc_403CFE
.text:00403A0C                 dd offset loc_403D02, offset loc_403D47, offset loc_403D4B
.text:00403A0C                 dd offset loc_403D4F, offset loc_403D53, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset def_403A05
.text:00403A0C                 dd offset def_403A05, offset def_403A05, offset loc_4041D8
.text:00403A0C                 dd offset loc_4041D8, offset loc_4041D8, offset loc_4041FA
.text:00403A0C                 dd offset loc_4041D8, offset def_403E02, offset loc_4041D8
.text:00403A0C                 dd offset loc_403D57, offset loc_4041D8, offset loc_4041D8
.text:00403A0C                 dd offset loc_4041D8, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset loc_4041D8
.text:00403A0C                 dd offset loc_4041D8, offset loc_4041D8, offset loc_4041D8
.text:00403A0C                 dd offset loc_403DBC, offset def_403A05, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset loc_4041D8, offset loc_4041D1
.text:00403A0C                 dd offset def_403E02, offset loc_4041D8, offset def_403E02
.text:00403A0C                 dd offset loc_4041D8, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset def_403E02, offset def_403E02, offset def_403E02
.text:00403A0C                 dd offset loc_4041E8, offset loc_4041D8, offset loc_4041E8
.text:00403A0C                 dd offset loc_4041FA
.text:00403C08 ; ---------------------------------------------------------------------------
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: sub_403900+105↑j
.text:00403C08                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403C08                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403A05 case 0
.text:00403C0D                 lea     eax, [ebp+1]
.text:00403C10                 jz      loc_403CC0
.text:00403C16                 mov     esi, [esp+4Ch+arg_4]
.text:00403C1A                 cmp     [esp+4Ch+var_34], esi
.text:00403C1E                 jnb     short loc_403C2C
.text:00403C20                 mov     eax, [esp+4Ch+arg_0]
.text:00403C24                 mov     ebx, [esp+4Ch+var_34]
.text:00403C28                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403C2C
.text:00403C2C loc_403C2C:                             ; CODE XREF: sub_403900+31E↑j
.text:00403C2C                 inc     [esp+4Ch+var_34]
.text:00403C30                 mov     edx, [esp+4Ch+arg_4]
.text:00403C34                 cmp     [esp+4Ch+var_34], edx
.text:00403C38                 jnb     short loc_403C46
.text:00403C3A                 mov     edi, [esp+4Ch+arg_0]
.text:00403C3E                 mov     ecx, [esp+4Ch+var_34]
.text:00403C42                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403C46
.text:00403C46 loc_403C46:                             ; CODE XREF: sub_403900+338↑j
.text:00403C46                 inc     [esp+4Ch+var_34]
.text:00403C4A                 mov     esi, [esp+4Ch+arg_4]
.text:00403C4E                 cmp     [esp+4Ch+var_34], esi
.text:00403C52                 jnb     short loc_403C60
.text:00403C54                 mov     ebx, [esp+4Ch+arg_0]
.text:00403C58                 mov     eax, [esp+4Ch+var_34]
.text:00403C5C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403900+352↑j
.text:00403C60                 inc     [esp+4Ch+var_34]
.text:00403C64                 mov     bl, 30h ; '0'
.text:00403C66                 lea     esi, [esi+0]
.text:00403C69                 lea     edi, [edi+0]
.text:00403C70
.text:00403C70 def_403E02:                             ; CODE XREF: sub_403900+105↑j
.text:00403C70                                         ; sub_403900+463↓j ...
.text:00403C70                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403C70                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403C75                 lea     eax, [ebp+1]
.text:00403C78                 jz      short loc_403CC0
.text:00403C7A                 mov     cl, bl
.text:00403C7C                 mov     edi, [esp+4Ch+arg_14]
.text:00403C80                 mov     esi, 1
.text:00403C85                 shr     cl, 5
.text:00403C88                 movzx   edx, cl
.text:00403C8B                 mov     ecx, ebx
.text:00403C8D                 and     ecx, 1Fh
.text:00403C90                 shl     esi, cl
.text:00403C92                 test    [edi+edx*4+4], esi
.text:00403C96                 jz      short loc_403CB2
.text:00403C98
.text:00403C98 loc_403C98:                             ; CODE XREF: sub_403900+3FC↓j
.text:00403C98                 mov     edx, [esp+4Ch+arg_4]
.text:00403C9C                 cmp     [esp+4Ch+var_34], edx
.text:00403CA0                 jnb     short loc_403CAE
.text:00403CA2                 mov     edi, [esp+4Ch+arg_0]
.text:00403CA6                 mov     esi, [esp+4Ch+var_34]
.text:00403CAA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403CAE
.text:00403CAE loc_403CAE:                             ; CODE XREF: sub_403900+3A0↑j
.text:00403CAE                 inc     [esp+4Ch+var_34]
.text:00403CB2
.text:00403CB2 loc_403CB2:                             ; CODE XREF: sub_403900+396↑j
.text:00403CB2                 lea     eax, [ebp+1]
.text:00403CB5                 lea     esi, [esi+0]
.text:00403CB9                 lea     edi, [edi+0]
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403900+310↑j
.text:00403CC0                                         ; sub_403900+378↑j ...
.text:00403CC0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403CC4                 cmp     [esp+4Ch+var_34], ebp
.text:00403CC8                 jnb     short loc_403CD5
.text:00403CCA                 mov     edx, [esp+4Ch+arg_0]
.text:00403CCE                 mov     ecx, [esp+4Ch+var_34]
.text:00403CD2                 mov     [ecx+edx], bl
.text:00403CD5
.text:00403CD5 loc_403CD5:                             ; CODE XREF: sub_403900+3C8↑j
.text:00403CD5                 inc     [esp+4Ch+var_34]
.text:00403CD9                 mov     ebp, eax
.text:00403CDB                 jmp     loc_403990
.text:00403CE0 ; ---------------------------------------------------------------------------
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_403900+105↑j
.text:00403CE0                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403CE0                 mov     dl, 61h ; 'a'   ; jumptable 00403A05 case 7
.text:00403CE2                 lea     esi, [esi+0]
.text:00403CE9                 lea     edi, [edi+0]
.text:00403CF0
.text:00403CF0 loc_403CF0:                             ; CODE XREF: sub_403900+400↓j
.text:00403CF0                                         ; sub_403900+409↓j ...
.text:00403CF0                 cmp     [esp+4Ch+var_21], 0
.text:00403CF5                 lea     eax, [ebp+1]
.text:00403CF8                 jz      short loc_403CC0
.text:00403CFA                 mov     bl, dl
.text:00403CFC                 jmp     short loc_403C98
.text:00403CFE ; ---------------------------------------------------------------------------
.text:00403CFE
.text:00403CFE loc_403CFE:                             ; CODE XREF: sub_403900+105↑j
.text:00403CFE                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403CFE                 mov     dl, 62h ; 'b'   ; jumptable 00403A05 case 8
.text:00403D00                 jmp     short loc_403CF0
.text:00403D02 ; ---------------------------------------------------------------------------
.text:00403D02
.text:00403D02 loc_403D02:                             ; CODE XREF: sub_403900+105↑j
.text:00403D02                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D02                 mov     dl, 74h ; 't'   ; jumptable 00403A05 case 9
.text:00403D04
.text:00403D04 loc_403D04:                             ; CODE XREF: sub_403900+449↓j
.text:00403D04                                         ; sub_403900+455↓j ...
.text:00403D04                 cmp     [esp+4Ch+arg_10], 1
.text:00403D09                 jnz     short loc_403CF0
.text:00403D0B
.text:00403D0B loc_403D0B:                             ; CODE XREF: sub_403900+45C↓j
.text:00403D0B                                         ; sub_403900+4C1↓j ...
.text:00403D0B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004040D2 cases 91,92,94,96,124
.text:00403D13                 mov     eax, [esp+4Ch+arg_14]
.text:00403D17                 mov     edx, [esp+4Ch+arg_C]
.text:00403D1B                 mov     ecx, [esp+4Ch+Str]
.text:00403D1F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403D23                 mov     [esp+4Ch+var_38], eax ; int
.text:00403D27                 mov     ebp, [esp+4Ch+arg_0]
.text:00403D2B                 mov     [esp+4Ch+State], edx ; int
.text:00403D2F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403D33                 mov     [esp+4Ch+Type], ebx ; int
.text:00403D37                 mov     [esp+4Ch+C], ebp ; int
.text:00403D3A                 call    sub_403900
.text:00403D3F
.text:00403D3F loc_403D3F:                             ; CODE XREF: sub_403900+972↓j
.text:00403D3F                 add     esp, 3Ch
.text:00403D42                 pop     ebx
.text:00403D43                 pop     esi
.text:00403D44                 pop     edi
.text:00403D45                 pop     ebp
.text:00403D46                 retn
.text:00403D47 ; ---------------------------------------------------------------------------
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_403900+105↑j
.text:00403D47                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D47                 mov     dl, 6Eh ; 'n'   ; jumptable 00403A05 case 10
.text:00403D49                 jmp     short loc_403D04
.text:00403D4B ; ---------------------------------------------------------------------------
.text:00403D4B
.text:00403D4B loc_403D4B:                             ; CODE XREF: sub_403900+105↑j
.text:00403D4B                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D4B                 mov     dl, 76h ; 'v'   ; jumptable 00403A05 case 11
.text:00403D4D                 jmp     short loc_403CF0
.text:00403D4F ; ---------------------------------------------------------------------------
.text:00403D4F
.text:00403D4F loc_403D4F:                             ; CODE XREF: sub_403900+105↑j
.text:00403D4F                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D4F                 mov     dl, 66h ; 'f'   ; jumptable 00403A05 case 12
.text:00403D51                 jmp     short loc_403CF0
.text:00403D53 ; ---------------------------------------------------------------------------
.text:00403D53
.text:00403D53 loc_403D53:                             ; CODE XREF: sub_403900+105↑j
.text:00403D53                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D53                 mov     dl, 72h ; 'r'   ; jumptable 00403A05 case 13
.text:00403D55                 jmp     short loc_403D04
.text:00403D57 ; ---------------------------------------------------------------------------
.text:00403D57
.text:00403D57 loc_403D57:                             ; CODE XREF: sub_403900+105↑j
.text:00403D57                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403D57                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403A05 case 39
.text:00403D5C                 jz      short loc_403D0B ; jumptable 004040D2 cases 91,92,94,96,124
.text:00403D5E                 cmp     [esp+4Ch+arg_10], 2
.text:00403D63                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403D63                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403D69                 mov     edx, [esp+4Ch+arg_4]
.text:00403D6D                 cmp     [esp+4Ch+var_34], edx
.text:00403D71                 jnb     short loc_403D7F
.text:00403D73                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D77                 mov     edi, [esp+4Ch+var_34]
.text:00403D7B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403D7F
.text:00403D7F loc_403D7F:                             ; CODE XREF: sub_403900+471↑j
.text:00403D7F                 inc     [esp+4Ch+var_34]
.text:00403D83                 mov     eax, [esp+4Ch+arg_4]
.text:00403D87                 cmp     [esp+4Ch+var_34], eax
.text:00403D8B                 jnb     short loc_403D99
.text:00403D8D                 mov     esi, [esp+4Ch+arg_0]
.text:00403D91                 mov     edx, [esp+4Ch+var_34]
.text:00403D95                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403D99
.text:00403D99 loc_403D99:                             ; CODE XREF: sub_403900+48B↑j
.text:00403D99                 inc     [esp+4Ch+var_34]
.text:00403D9D                 mov     edi, [esp+4Ch+arg_4]
.text:00403DA1                 cmp     [esp+4Ch+var_34], edi
.text:00403DA5                 jnb     short loc_403DB3
.text:00403DA7                 mov     ecx, [esp+4Ch+arg_0]
.text:00403DAB                 mov     eax, [esp+4Ch+var_34]
.text:00403DAF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403DB3
.text:00403DB3 loc_403DB3:                             ; CODE XREF: sub_403900+4A5↑j
.text:00403DB3                                         ; sub_403900+5C4↓j ...
.text:00403DB3                 inc     [esp+4Ch+var_34]
.text:00403DB7                 jmp     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403DB7                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403DBC ; ---------------------------------------------------------------------------
.text:00403DBC
.text:00403DBC loc_403DBC:                             ; CODE XREF: sub_403900+105↑j
.text:00403DBC                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:00403DBC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403A05 case 63
.text:00403DC1                 jz      loc_403D0B      ; jumptable 004040D2 cases 91,92,94,96,124
.text:00403DC7                 cmp     [esp+4Ch+arg_10], 3
.text:00403DCC                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403DCC                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403DD2                 lea     edx, [ebp+2]
.text:00403DD5                 cmp     edx, [esp+4Ch+arg_C]
.text:00403DD9                 jnb     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403DD9                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403DDF                 mov     esi, [esp+4Ch+Str]
.text:00403DE3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403DE8                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403DE8                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403DEE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403DF3                 movsx   eax, cl
.text:00403DF6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403DF9                 cmp     eax, 1Dh
.text:00403DFC                 ja      def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403DFC                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403E02                 jmp     ds:jpt_403E02[eax*4] ; switch jump
.text:00403E02 ; ---------------------------------------------------------------------------
.text:00403E09                 align 4
.text:00403E0C jpt_403E02      dd offset loc_403E84    ; DATA XREF: sub_403900+502↑r
.text:00403E0C                 dd offset def_403E02    ; jump table for switch statement
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset def_403E02
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset loc_403E84
.text:00403E0C                 dd offset loc_403E84
.text:00403E84 ; ---------------------------------------------------------------------------
.text:00403E84
.text:00403E84 loc_403E84:                             ; CODE XREF: sub_403900+502↑j
.text:00403E84                                         ; DATA XREF: sub_403900:jpt_403E02↑o
.text:00403E84                 mov     ebp, edx        ; jumptable 00403E02 cases 33,39-41,45,47,60-62
.text:00403E86                 mov     bl, cl
.text:00403E88                 mov     edx, [esp+4Ch+arg_4]
.text:00403E8C                 cmp     [esp+4Ch+var_34], edx
.text:00403E90                 jnb     short loc_403E9E
.text:00403E92                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E96                 mov     edi, [esp+4Ch+var_34]
.text:00403E9A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403E9E
.text:00403E9E loc_403E9E:                             ; CODE XREF: sub_403900+590↑j
.text:00403E9E                 inc     [esp+4Ch+var_34]
.text:00403EA2                 mov     eax, [esp+4Ch+arg_4]
.text:00403EA6                 cmp     [esp+4Ch+var_34], eax
.text:00403EAA                 jnb     short loc_403EB8
.text:00403EAC                 mov     edx, [esp+4Ch+arg_0]
.text:00403EB0                 mov     esi, [esp+4Ch+var_34]
.text:00403EB4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403EB8
.text:00403EB8 loc_403EB8:                             ; CODE XREF: sub_403900+5AA↑j
.text:00403EB8                 inc     [esp+4Ch+var_34]
.text:00403EBC                 mov     edi, [esp+4Ch+arg_4]
.text:00403EC0                 cmp     [esp+4Ch+var_34], edi
.text:00403EC4                 jnb     loc_403DB3
.text:00403ECA                 mov     eax, [esp+4Ch+arg_0]
.text:00403ECE                 mov     ecx, [esp+4Ch+var_34]
.text:00403ED2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403ED6                 jmp     loc_403DB3
.text:00403ED6 ; ---------------------------------------------------------------------------
.text:00403EDB                 align 10h
.text:00403EE0
.text:00403EE0 def_403A05:                             ; CODE XREF: sub_403900+FF↑j
.text:00403EE0                                         ; sub_403900+105↑j
.text:00403EE0                                         ; DATA XREF: ...
.text:00403EE0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403A05 default case, cases 1-6,14-31,64
.text:00403EE5                 jz      loc_404010
.text:00403EEB                 mov     [esp+4Ch+var_28], 1
.text:00403EF3                 mov     esi, ds:__mb_cur_max
.text:00403EF9                 movzx   edx, bl
.text:00403EFC                 cmp     dword ptr [esi], 1
.text:00403EFF                 jz      loc_403FF4
.text:00403F05                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403F0D                 mov     [esp+4Ch+C], edx ; C
.text:00403F10                 call    _isctype
.text:00403F15
.text:00403F15 loc_403F15:                             ; CODE XREF: sub_403900+705↓j
.text:00403F15                 test    eax, eax
.text:00403F17                 setnz   [esp+4Ch+var_29]
.text:00403F1C
.text:00403F1C loc_403F1C:                             ; CODE XREF: sub_403900+7A5↓j
.text:00403F1C                 cmp     [esp+4Ch+var_21], 0
.text:00403F21                 lea     eax, [ebp+1]
.text:00403F24                 jz      loc_403CC0
.text:00403F2A                 cmp     [esp+4Ch+var_29], 0
.text:00403F2F                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:00403F2F                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00403F35
.text:00403F35 loc_403F35:                             ; CODE XREF: sub_403900+7AB↓j
.text:00403F35                 mov     eax, [esp+4Ch+var_28]
.text:00403F39                 lea     edx, [eax+ebp]
.text:00403F3C                 lea     esi, [esi+0]
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: sub_403900+6EF↓j
.text:00403F40                 cmp     [esp+4Ch+var_21], 0
.text:00403F45                 jz      short loc_403FC0
.text:00403F47                 cmp     [esp+4Ch+var_29], 0
.text:00403F4C                 jnz     short loc_403FC0
.text:00403F4E                 mov     edi, [esp+4Ch+arg_4]
.text:00403F52                 cmp     [esp+4Ch+var_34], edi
.text:00403F56                 jnb     short loc_403F64
.text:00403F58                 mov     esi, [esp+4Ch+arg_0]
.text:00403F5C                 mov     eax, [esp+4Ch+var_34]
.text:00403F60                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403F64
.text:00403F64 loc_403F64:                             ; CODE XREF: sub_403900+656↑j
.text:00403F64                 inc     [esp+4Ch+var_34]
.text:00403F68                 mov     ecx, [esp+4Ch+arg_4]
.text:00403F6C                 cmp     [esp+4Ch+var_34], ecx
.text:00403F70                 jnb     short loc_403F85
.text:00403F72                 mov     cl, bl
.text:00403F74                 mov     esi, [esp+4Ch+arg_0]
.text:00403F78                 mov     edi, [esp+4Ch+var_34]
.text:00403F7C                 shr     cl, 6
.text:00403F7F                 add     cl, 30h ; '0'
.text:00403F82                 mov     [edi+esi], cl
.text:00403F85
.text:00403F85 loc_403F85:                             ; CODE XREF: sub_403900+670↑j
.text:00403F85                 inc     [esp+4Ch+var_34]
.text:00403F89                 mov     edi, [esp+4Ch+arg_4]
.text:00403F8D                 cmp     [esp+4Ch+var_34], edi
.text:00403F91                 jnb     short loc_403FA9
.text:00403F93                 mov     cl, bl
.text:00403F95                 mov     esi, [esp+4Ch+arg_0]
.text:00403F99                 shr     cl, 3
.text:00403F9C                 mov     edi, [esp+4Ch+var_34]
.text:00403FA0                 and     cl, 7
.text:00403FA3                 add     cl, 30h ; '0'
.text:00403FA6                 mov     [edi+esi], cl
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403900+691↑j
.text:00403FA9                 inc     [esp+4Ch+var_34]
.text:00403FAD                 and     bl, 7
.text:00403FB0                 add     bl, 30h ; '0'
.text:00403FB3                 lea     esi, [esi+0]
.text:00403FB9                 lea     edi, [edi+0]
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403900+645↑j
.text:00403FC0                                         ; sub_403900+64C↑j
.text:00403FC0                 lea     eax, [ebp+1]
.text:00403FC3                 cmp     edx, eax
.text:00403FC5                 jbe     loc_403CC0
.text:00403FCB                 mov     ebp, [esp+4Ch+arg_4]
.text:00403FCF                 cmp     [esp+4Ch+var_34], ebp
.text:00403FD3                 jnb     short loc_403FE0
.text:00403FD5                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FD9                 mov     edi, [esp+4Ch+var_34]
.text:00403FDD                 mov     [edi+ecx], bl
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403900+6D3↑j
.text:00403FE0                 inc     [esp+4Ch+var_34]
.text:00403FE4                 mov     ebp, eax
.text:00403FE6                 mov     eax, [esp+4Ch+Str]
.text:00403FEA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403FEF                 jmp     loc_403F40
.text:00403FF4 ; ---------------------------------------------------------------------------
.text:00403FF4
.text:00403FF4 loc_403FF4:                             ; CODE XREF: sub_403900+5FF↑j
.text:00403FF4                 mov     ecx, ds:_pctype
.text:00403FFA                 mov     edi, [ecx]
.text:00403FFC                 movzx   eax, word ptr [edi+edx*2]
.text:00404000                 and     eax, 157h
.text:00404005                 jmp     loc_403F15
.text:00404005 ; ---------------------------------------------------------------------------
.text:0040400A                 align 10h
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403900+5E5↑j
.text:00404010                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404015                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040401D                 mov     [esp+4Ch+var_28], 0
.text:00404025                 mov     [esp+4Ch+var_29], 1
.text:0040402A                 jz      loc_4041BC
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_403900+8CC↓j
.text:00404030                 mov     ecx, [esp+4Ch+arg_C]
.text:00404034                 lea     edx, [esp+4Ch+var_18]
.text:00404038                 mov     edi, [esp+4Ch+Str]
.text:0040403C                 mov     [esp+4Ch+State], edx ; State
.text:00404040                 lea     esi, [esp+4Ch+var_18._State]
.text:00404044                 sub     ecx, ebp
.text:00404046                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040404A                 add     edi, ebp
.text:0040404C                 mov     [esp+4Ch+var_30], edi
.text:00404050                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404054                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404057                 call    mbrtowc
.text:0040405C                 test    eax, eax
.text:0040405E                 mov     edi, eax
.text:00404060                 jz      short loc_4040A0
.text:00404062                 cmp     eax, 0FFFFFFFFh
.text:00404065                 jz      loc_4041B2
.text:0040406B                 cmp     eax, 0FFFFFFFEh
.text:0040406E                 jz      loc_404172
.text:00404074                 cmp     [esp+4Ch+arg_10], 1
.text:00404079                 jz      short loc_4040B0
.text:0040407B
.text:0040407B loc_40407B:                             ; CODE XREF: sub_403900+7B9↓j
.text:0040407B                                         ; sub_403900+86D↓j
.text:0040407B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404080                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404088                 mov     [esp+4Ch+C], ecx ; C
.text:0040408B                 call    iswctype
.text:00404090                 test    eax, eax
.text:00404092                 jnz     short loc_404099
.text:00404094                 mov     [esp+4Ch+var_29], 0
.text:00404099
.text:00404099 loc_404099:                             ; CODE XREF: sub_403900+792↑j
.text:00404099                 mov     [esp+4Ch+var_28], edi
.text:0040409D                 lea     esi, [esi+0]
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_403900+760↑j
.text:004040A0                                         ; sub_403900+87B↓j ...
.text:004040A0                 cmp     [esp+4Ch+var_28], 1
.text:004040A5                 jbe     loc_403F1C
.text:004040AB                 jmp     loc_403F35
.text:004040B0 ; ---------------------------------------------------------------------------
.text:004040B0
.text:004040B0 loc_4040B0:                             ; CODE XREF: sub_403900+779↑j
.text:004040B0                 cmp     [esp+4Ch+arg_10], eax
.text:004040B4                 mov     edx, 1
.text:004040B9                 jnb     short loc_40407B
.text:004040BB
.text:004040BB loc_4040BB:                             ; CODE XREF: sub_403900+867↓j
.text:004040BB                 mov     ecx, [esp+4Ch+Str]
.text:004040BF                 lea     esi, [edx+ebp]
.text:004040C2                 movsx   eax, byte ptr [esi+ecx]
.text:004040C6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004040C9                 cmp     eax, 21h
.text:004040CC                 ja      def_4040D2      ; jumptable 004040D2 default case, cases 93,95,97-123
.text:004040D2                 jmp     ds:jpt_4040D2[eax*4] ; switch jump
.text:004040D2 ; ---------------------------------------------------------------------------
.text:004040D9                 align 4
.text:004040DC jpt_4040D2      dd offset loc_403D0B    ; DATA XREF: sub_403900+7D2↑r
.text:004040DC                 dd offset loc_403D0B    ; jump table for switch statement
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset loc_403D0B
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset loc_403D0B
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset def_4040D2
.text:004040DC                 dd offset loc_403D0B
.text:00404164 ; ---------------------------------------------------------------------------
.text:00404164
.text:00404164 def_4040D2:                             ; CODE XREF: sub_403900+7CC↑j
.text:00404164                                         ; sub_403900+7D2↑j
.text:00404164                                         ; DATA XREF: ...
.text:00404164                 inc     edx             ; jumptable 004040D2 default case, cases 93,95,97-123
.text:00404165                 cmp     edx, edi
.text:00404167                 jb      loc_4040BB
.text:0040416D                 jmp     loc_40407B
.text:00404172 ; ---------------------------------------------------------------------------
.text:00404172
.text:00404172 loc_404172:                             ; CODE XREF: sub_403900+76E↑j
.text:00404172                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404176                 mov     [esp+4Ch+var_29], 0
.text:0040417B                 jnb     loc_4040A0
.text:00404181                 mov     eax, [esp+4Ch+var_30]
.text:00404185                 cmp     byte ptr [eax], 0
.text:00404188                 jz      loc_4040A0
.text:0040418E
.text:0040418E loc_40418E:                             ; CODE XREF: sub_403900+8AB↓j
.text:0040418E                 inc     [esp+4Ch+var_28]
.text:00404192                 mov     esi, [esp+4Ch+var_28]
.text:00404196                 lea     eax, [esi+ebp]
.text:00404199                 cmp     eax, [esp+4Ch+arg_C]
.text:0040419D                 jnb     loc_4040A0
.text:004041A3                 mov     edi, [esp+4Ch+Str]
.text:004041A7                 cmp     byte ptr [eax+edi], 0
.text:004041AB                 jnz     short loc_40418E
.text:004041AD                 jmp     loc_4040A0
.text:004041B2 ; ---------------------------------------------------------------------------
.text:004041B2
.text:004041B2 loc_4041B2:                             ; CODE XREF: sub_403900+765↑j
.text:004041B2                 mov     [esp+4Ch+var_29], 0
.text:004041B7                 jmp     loc_4040A0
.text:004041BC ; ---------------------------------------------------------------------------
.text:004041BC
.text:004041BC loc_4041BC:                             ; CODE XREF: sub_403900+72A↑j
.text:004041BC                 mov     edx, [esp+4Ch+Str]
.text:004041C0                 mov     [esp+4Ch+C], edx ; Str
.text:004041C3                 call    strlen
.text:004041C8                 mov     [esp+4Ch+arg_C], eax
.text:004041CC                 jmp     loc_404030
.text:004041D1 ; ---------------------------------------------------------------------------
.text:004041D1
.text:004041D1 loc_4041D1:                             ; CODE XREF: sub_403900+105↑j
.text:004041D1                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:004041D1                 mov     dl, bl          ; jumptable 00403A05 case 92
.text:004041D3                 jmp     loc_403D04
.text:004041D8 ; ---------------------------------------------------------------------------
.text:004041D8
.text:004041D8 loc_4041D8:                             ; CODE XREF: sub_403900+105↑j
.text:004041D8                                         ; sub_403900+902↓j
.text:004041D8                                         ; DATA XREF: ...
.text:004041D8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403A05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004041DD                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:004041DD                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:004041E3                 jmp     loc_403D0B      ; jumptable 004040D2 cases 91,92,94,96,124
.text:004041E8 ; ---------------------------------------------------------------------------
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403900+105↑j
.text:004041E8                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:004041E8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403A05 cases 123,125
.text:004041ED                 jz      short loc_404204
.text:004041EF                 cmp     [esp+4Ch+arg_C], 1
.text:004041F4
.text:004041F4 loc_4041F4:                             ; CODE XREF: sub_403900+90C↓j
.text:004041F4                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:004041F4                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:004041FA
.text:004041FA loc_4041FA:                             ; CODE XREF: sub_403900+105↑j
.text:004041FA                                         ; DATA XREF: sub_403900:jpt_403A05↑o
.text:004041FA                 test    ebp, ebp        ; jumptable 00403A05 cases 35,126
.text:004041FC                 jnz     def_403E02      ; jumptable 00403A05 cases 37,43-58,65-90,93,95,97-122
.text:004041FC                                         ; jumptable 00403E02 default case, cases 34-38,42-44,46,48-59
.text:00404202                 jmp     short loc_4041D8 ; jumptable 00403A05 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404204 ; ---------------------------------------------------------------------------
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: sub_403900+8ED↑j
.text:00404204                 mov     esi, [esp+4Ch+Str]
.text:00404208                 cmp     byte ptr [esi+1], 0
.text:0040420C                 jmp     short loc_4041F4
.text:0040420E ; ---------------------------------------------------------------------------
.text:0040420E
.text:0040420E loc_40420E:                             ; CODE XREF: sub_403900:loc_40399F↑j
.text:0040420E                 test    ebp, ebp
.text:00404210                 jnz     short loc_40421D
.text:00404212                 cmp     [esp+4Ch+arg_10], 1
.text:00404217                 jz      loc_403D0B      ; jumptable 004040D2 cases 91,92,94,96,124
.text:0040421D
.text:0040421D loc_40421D:                             ; CODE XREF: sub_403900+910↑j
.text:0040421D                 mov     esi, [esp+4Ch+var_1C]
.text:00404221                 test    esi, esi
.text:00404223                 jz      short loc_404258
.text:00404225                 mov     edi, [esp+4Ch+var_1C]
.text:00404229                 movzx   eax, byte ptr [edi]
.text:0040422C                 test    al, al
.text:0040422E                 jz      short loc_404258
.text:00404230
.text:00404230 loc_404230:                             ; CODE XREF: sub_403900+956↓j
.text:00404230                 mov     ebp, [esp+4Ch+arg_4]
.text:00404234                 cmp     [esp+4Ch+var_34], ebp
.text:00404238                 jnb     short loc_404245
.text:0040423A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040423E                 mov     ebx, [esp+4Ch+var_34]
.text:00404242                 mov     [ebx+ecx], al
.text:00404245
.text:00404245 loc_404245:                             ; CODE XREF: sub_403900+938↑j
.text:00404245                 inc     [esp+4Ch+var_1C]
.text:00404249                 inc     [esp+4Ch+var_34]
.text:0040424D                 mov     edx, [esp+4Ch+var_1C]
.text:00404251                 movzx   eax, byte ptr [edx]
.text:00404254                 test    al, al
.text:00404256                 jnz     short loc_404230
.text:00404258
.text:00404258 loc_404258:                             ; CODE XREF: sub_403900+923↑j
.text:00404258                                         ; sub_403900+92E↑j
.text:00404258                 mov     eax, [esp+4Ch+arg_4]
.text:0040425C                 cmp     [esp+4Ch+var_34], eax
.text:00404260                 jnb     short loc_40426E
.text:00404262                 mov     edi, [esp+4Ch+arg_0]
.text:00404266                 mov     esi, [esp+4Ch+var_34]
.text:0040426A                 mov     byte ptr [esi+edi], 0
.text:0040426E
.text:0040426E loc_40426E:                             ; CODE XREF: sub_403900+960↑j
.text:0040426E                 mov     eax, [esp+4Ch+var_34]
.text:00404272                 jmp     loc_403D3F
.text:00404277 ; ---------------------------------------------------------------------------
.text:00404277
.text:00404277 loc_404277:                             ; CODE XREF: sub_403900+95↑j
.text:00404277                 mov     ebx, [esp+4Ch+Str]
.text:0040427B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404280                 jmp     loc_40399F
.text:00404285 ; ---------------------------------------------------------------------------
.text:00404285
.text:00404285 loc_404285:                             ; CODE XREF: sub_403900+3D↑j
.text:00404285                                         ; DATA XREF: sub_403900:jpt_40393D↑o
.text:00404285                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040393D case 2
.text:00404289                 cmp     [esp+4Ch+var_34], edx
.text:0040428D                 jnb     short loc_404296
.text:0040428F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404293                 mov     byte ptr [ecx], 27h ; '''
.text:00404296
.text:00404296 loc_404296:                             ; CODE XREF: sub_403900+98D↑j
.text:00404296                 mov     [esp+4Ch+var_34], 1
.text:0040429E                 mov     [esp+4Ch+var_1C], 4038EEh
.text:004042A6                 jmp     loc_403986
.text:004042AB ; ---------------------------------------------------------------------------
.text:004042AB
.text:004042AB loc_4042AB:                             ; CODE XREF: sub_403900+3D↑j
.text:004042AB                                         ; DATA XREF: sub_403900:jpt_40393D↑o
.text:004042AB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040393D case 4
.text:004042B0                 jmp     def_40393D      ; jumptable 0040393D default case, cases 0,1
.text:004042B5 ; ---------------------------------------------------------------------------
.text:004042B5
.text:004042B5 loc_4042B5:                             ; CODE XREF: sub_403900+3D↑j
.text:004042B5                                         ; DATA XREF: sub_403900:jpt_40393D↑o
.text:004042B5                 mov     [esp+4Ch+C], 4038F0h ; jumptable 0040393D cases 5,6
.text:004042BC                 call    ds:libintl_gettext
.text:004042C2                 cmp     eax, 4038F0h
.text:004042C7                 mov     edi, eax
.text:004042C9                 jz      short loc_404340
.text:004042CB
.text:004042CB loc_4042CB:                             ; CODE XREF: sub_403900+A45↓j
.text:004042CB                                         ; sub_403900+A4C↓j
.text:004042CB                 mov     [esp+4Ch+C], 4038EEh
.text:004042D2                 call    ds:libintl_gettext
.text:004042D8                 cmp     eax, 4038EEh
.text:004042DD                 mov     edx, eax
.text:004042DF                 jz      short loc_404332
.text:004042E1
.text:004042E1 loc_4042E1:                             ; CODE XREF: sub_403900+A37↓j
.text:004042E1                                         ; sub_403900+A3E↓j
.text:004042E1                 mov     [esp+4Ch+var_1C], edi
.text:004042E5                 cmp     byte ptr [edi], 0
.text:004042E8                 jz      short loc_404318
.text:004042EA
.text:004042EA loc_4042EA:                             ; CODE XREF: sub_403900+A16↓j
.text:004042EA                 mov     ecx, [esp+4Ch+arg_4]
.text:004042EE                 cmp     [esp+4Ch+var_34], ecx
.text:004042F2                 jnb     short loc_404307
.text:004042F4                 mov     ebp, [esp+4Ch+var_1C]
.text:004042F8                 mov     edi, [esp+4Ch+arg_0]
.text:004042FC                 mov     esi, [esp+4Ch+var_34]
.text:00404300                 movzx   ebx, byte ptr [ebp+0]
.text:00404304                 mov     [esi+edi], bl
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_403900+9F2↑j
.text:00404307                 inc     [esp+4Ch+var_1C]
.text:0040430B                 inc     [esp+4Ch+var_34]
.text:0040430F                 mov     eax, [esp+4Ch+var_1C]
.text:00404313                 cmp     byte ptr [eax], 0
.text:00404316                 jnz     short loc_4042EA
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: sub_403900+9E8↑j
.text:00404318                 mov     [esp+4Ch+var_21], 1
.text:0040431D                 mov     [esp+4Ch+var_1C], edx
.text:00404321                 mov     [esp+4Ch+C], edx ; Str
.text:00404324                 call    strlen
.text:00404329                 mov     [esp+4Ch+var_20], eax
.text:0040432D                 jmp     def_40393D      ; jumptable 0040393D default case, cases 0,1
.text:00404332 ; ---------------------------------------------------------------------------
.text:00404332
.text:00404332 loc_404332:                             ; CODE XREF: sub_403900+9DF↑j
.text:00404332                 cmp     [esp+4Ch+arg_10], 6
.text:00404337                 jnz     short loc_4042E1
.text:00404339                 mov     edx, offset asc_4038EC ; "\"'`"
.text:0040433E                 jmp     short loc_4042E1
.text:00404340 ; ---------------------------------------------------------------------------
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403900+9C9↑j
.text:00404340                 cmp     [esp+4Ch+arg_10], 6
.text:00404345                 jnz     short loc_4042CB
.text:00404347                 mov     edi, offset asc_4038EC ; "\"'`"
.text:0040434C                 jmp     loc_4042CB
.text:0040434C sub_403900      endp
.text:0040434C
.text:00404351 ; ---------------------------------------------------------------------------
.text:00404351                 jmp     short loc_404360
.text:00404351 ; ---------------------------------------------------------------------------
.text:00404353                 align 10h
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: .text:00404351↑j
.text:00404360                 sub     esp, 0Ch
.text:00404363                 mov     [esp+4], ebx
.text:00404367                 mov     [esp+8], esi
.text:0040436B                 call    _errno
.text:00404370                 mov     esi, [eax]
.text:00404372                 mov     dword ptr [esp], 24h ; '$'
.text:00404379                 call    sub_404C50
.text:0040437E                 mov     edx, [esp+10h]
.text:00404382                 mov     ebx, eax
.text:00404384                 test    edx, edx
.text:00404386                 jz      short loc_4043D1
.text:00404388
.text:00404388 loc_404388:                             ; CODE XREF: .text:004043D6↓j
.text:00404388                 mov     ecx, [edx]
.text:0040438A                 mov     [ebx], ecx
.text:0040438C                 mov     ecx, [edx+4]
.text:0040438F                 mov     [ebx+4], ecx
.text:00404392                 mov     ecx, [edx+8]
.text:00404395                 mov     [ebx+8], ecx
.text:00404398                 mov     ecx, [edx+0Ch]
.text:0040439B                 mov     [ebx+0Ch], ecx
.text:0040439E                 mov     ecx, [edx+10h]
.text:004043A1                 mov     [ebx+10h], ecx
.text:004043A4                 mov     ecx, [edx+14h]
.text:004043A7                 mov     [ebx+14h], ecx
.text:004043AA                 mov     ecx, [edx+18h]
.text:004043AD                 mov     [ebx+18h], ecx
.text:004043B0                 mov     ecx, [edx+1Ch]
.text:004043B3                 mov     [ebx+1Ch], ecx
.text:004043B6                 mov     ecx, [edx+20h]
.text:004043B9                 mov     [ebx+20h], ecx
.text:004043BC                 call    _errno
.text:004043C1                 mov     [eax], esi
.text:004043C3                 mov     esi, [esp+8]
.text:004043C7                 mov     eax, ebx
.text:004043C9                 mov     ebx, [esp+4]
.text:004043CD                 add     esp, 0Ch
.text:004043D0                 retn
.text:004043D1 ; ---------------------------------------------------------------------------
.text:004043D1
.text:004043D1 loc_4043D1:                             ; CODE XREF: .text:00404386↑j
.text:004043D1                 mov     edx, offset dword_407140
.text:004043D6                 jmp     short loc_404388
.text:004043D6 ; ---------------------------------------------------------------------------
.text:004043D8                 align 10h
.text:004043E0                 mov     eax, [esp+4]
.text:004043E4                 test    eax, eax
.text:004043E6                 jz      short loc_4043F0
.text:004043E8
.text:004043E8 loc_4043E8:                             ; CODE XREF: .text:004043F5↓j
.text:004043E8                 mov     eax, [eax]
.text:004043EA                 retn
.text:004043EA ; ---------------------------------------------------------------------------
.text:004043EB                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: .text:004043E6↑j
.text:004043F0                 mov     eax, offset dword_407140
.text:004043F5                 jmp     short loc_4043E8
.text:004043F5 ; ---------------------------------------------------------------------------
.text:004043F7                 align 10h
.text:00404400                 mov     edx, [esp+4]
.text:00404404                 test    edx, edx
.text:00404406                 jz      short loc_404410
.text:00404408
.text:00404408 loc_404408:                             ; CODE XREF: .text:00404415↓j
.text:00404408                 mov     ecx, [esp+8]
.text:0040440C                 mov     [edx], ecx
.text:0040440E                 retn
.text:0040440E ; ---------------------------------------------------------------------------
.text:0040440F                 align 10h
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: .text:00404406↑j
.text:00404410                 mov     edx, offset dword_407140
.text:00404415                 jmp     short loc_404408
.text:00404415 ; ---------------------------------------------------------------------------
.text:00404417                 align 10h
.text:00404420                 sub     esp, 8
.text:00404423                 mov     eax, [esp+0Ch]
.text:00404427                 movzx   ecx, byte ptr [esp+10h]
.text:0040442C                 mov     [esp], ebx
.text:0040442F                 mov     ebx, [esp+14h]
.text:00404433                 mov     [esp+4], esi
.text:00404437                 mov     dl, cl
.text:00404439                 shr     dl, 5
.text:0040443C                 movzx   edx, dl
.text:0040443F                 shl     edx, 2
.text:00404442                 test    eax, eax
.text:00404444                 lea     esi, [edx+eax+4]
.text:00404448                 jz      short loc_404470
.text:0040444A
.text:0040444A loc_40444A:                             ; CODE XREF: .text:00404476↓j
.text:0040444A                 mov     edx, [esi]
.text:0040444C                 and     ecx, 1Fh
.text:0040444F                 and     ebx, 1
.text:00404452                 mov     eax, edx
.text:00404454                 shr     eax, cl
.text:00404456                 and     eax, 1
.text:00404459                 xor     ebx, eax
.text:0040445B                 shl     ebx, cl
.text:0040445D                 xor     edx, ebx
.text:0040445F                 mov     [esi], edx
.text:00404461                 mov     ebx, [esp]
.text:00404464                 mov     esi, [esp+4]
.text:00404468                 add     esp, 8
.text:0040446B                 retn
.text:0040446B ; ---------------------------------------------------------------------------
.text:0040446C                 align 10h
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: .text:00404448↑j
.text:00404470                 lea     esi, dword_407144[edx]
.text:00404476                 jmp     short loc_40444A
.text:00404476 ; ---------------------------------------------------------------------------
.text:00404478                 align 10h
.text:00404480                 sub     esp, 2Ch
.text:00404483                 mov     [esp+24h], ebx
.text:00404487                 mov     ebx, [esp+40h]
.text:0040448B                 mov     [esp+28h], esi
.text:0040448F                 test    ebx, ebx
.text:00404491                 jz      short loc_4044E0
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: .text:004044E5↓j
.text:00404493                 call    _errno
.text:00404498                 mov     esi, [eax]
.text:0040449A                 mov     [esp+14h], ebx
.text:0040449E                 mov     edx, [ebx]
.text:004044A0                 mov     ecx, [esp+38h]
.text:004044A4                 mov     ebx, [esp+3Ch]
.text:004044A8                 mov     [esp+10h], edx
.text:004044AC                 mov     edx, [esp+34h]
.text:004044B0                 mov     [esp+0Ch], ebx
.text:004044B4                 mov     [esp+8], ecx
.text:004044B8                 mov     [esp+4], edx
.text:004044BC                 mov     edx, [esp+30h]
.text:004044C0                 mov     [esp], edx
.text:004044C3                 call    sub_403900
.text:004044C8                 mov     ebx, eax
.text:004044CA                 call    _errno
.text:004044CF                 mov     [eax], esi
.text:004044D1                 mov     esi, [esp+28h]
.text:004044D5                 mov     eax, ebx
.text:004044D7                 mov     ebx, [esp+24h]
.text:004044DB                 add     esp, 2Ch
.text:004044DE                 retn
.text:004044DE ; ---------------------------------------------------------------------------
.text:004044DF                 align 10h
.text:004044E0
.text:004044E0 loc_4044E0:                             ; CODE XREF: .text:00404491↑j
.text:004044E0                 mov     ebx, offset dword_407140
.text:004044E5                 jmp     short loc_404493
.text:004044E5 ; ---------------------------------------------------------------------------
.text:004044E7                 align 10h
.text:004044F0                 push    ebp
.text:004044F1                 push    edi
.text:004044F2                 push    esi
.text:004044F3                 push    ebx
.text:004044F4                 sub     esp, 2Ch
.text:004044F7                 mov     ebp, [esp+48h]
.text:004044FB                 call    _errno
.text:00404500                 mov     edx, [eax]
.text:00404502                 test    ebp, ebp
.text:00404504                 mov     ebx, ebp
.text:00404506                 mov     [esp+28h], edx
.text:0040450A                 jz      loc_4045C0
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: .text:004045C5↓j
.text:00404510                 call    _errno
.text:00404515                 mov     edi, [eax]
.text:00404517                 mov     esi, ebp
.text:00404519                 mov     [esp+14h], ebx
.text:0040451D                 mov     ecx, [ebx]
.text:0040451F                 mov     dword ptr [esp], 0
.text:00404526                 mov     edx, [esp+44h]
.text:0040452A                 mov     dword ptr [esp+4], 0
.text:00404532                 mov     eax, [esp+40h]
.text:00404536                 mov     [esp+10h], ecx
.text:0040453A                 mov     [esp+0Ch], edx
.text:0040453E                 mov     [esp+8], eax
.text:00404542                 call    sub_403900
.text:00404547                 mov     ebx, eax
.text:00404549                 call    _errno
.text:0040454E                 mov     [eax], edi
.text:00404550                 lea     edi, [ebx+1]
.text:00404553                 mov     [esp], edi
.text:00404556                 call    sub_404C50
.text:0040455B                 mov     [esp+24h], eax
.text:0040455F                 test    ebp, ebp
.text:00404561                 jz      short loc_4045B2
.text:00404563
.text:00404563 loc_404563:                             ; CODE XREF: .text:004045B7↓j
.text:00404563                 call    _errno
.text:00404568                 mov     ebp, [eax]
.text:0040456A                 mov     [esp+14h], esi
.text:0040456E                 mov     ecx, [esi]
.text:00404570                 mov     [esp+4], edi
.text:00404574                 mov     edx, [esp+44h]
.text:00404578                 mov     esi, [esp+24h]
.text:0040457C                 mov     [esp+10h], ecx
.text:00404580                 mov     eax, [esp+40h]
.text:00404584                 mov     [esp+0Ch], edx
.text:00404588                 mov     [esp], esi
.text:0040458B                 mov     [esp+8], eax
.text:0040458F                 call    sub_403900
.text:00404594                 call    _errno
.text:00404599                 mov     [eax], ebp
.text:0040459B                 call    _errno
.text:004045A0                 mov     ebx, [esp+28h]
.text:004045A4                 mov     [eax], ebx
.text:004045A6                 mov     eax, [esp+24h]
.text:004045AA                 add     esp, 2Ch
.text:004045AD                 pop     ebx
.text:004045AE                 pop     esi
.text:004045AF                 pop     edi
.text:004045B0                 pop     ebp
.text:004045B1                 retn
.text:004045B2 ; ---------------------------------------------------------------------------
.text:004045B2
.text:004045B2 loc_4045B2:                             ; CODE XREF: .text:00404561↑j
.text:004045B2                 mov     esi, offset dword_407140
.text:004045B7                 jmp     short loc_404563
.text:004045B7 ; ---------------------------------------------------------------------------
.text:004045B9                 align 10h
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: .text:0040450A↑j
.text:004045C0                 mov     ebx, offset dword_407140
.text:004045C5                 jmp     loc_404510
.text:004045C5 ; ---------------------------------------------------------------------------
.text:004045CA                 align 10h
.text:004045D0                 sub     esp, 1Ch
.text:004045D3                 mov     edx, [esp+24h]
.text:004045D7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:004045DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045E7                 mov     [esp+4], edx
.text:004045EB                 mov     edx, [esp+20h]
.text:004045EF                 mov     [esp], edx
.text:004045F2                 call    sub_404A40
.text:004045F7                 add     esp, 1Ch
.text:004045FA                 retn
.text:004045FA ; ---------------------------------------------------------------------------
.text:004045FB                 align 10h
.text:00404600                 sub     esp, 1Ch
.text:00404603                 mov     edx, [esp+20h]
.text:00404607                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040460F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404617                 mov     [esp+4], edx
.text:0040461B                 mov     dword ptr [esp], 0
.text:00404622                 call    sub_404A40
.text:00404627                 add     esp, 1Ch
.text:0040462A                 retn
.text:0040462A ; ---------------------------------------------------------------------------
.text:0040462B                 align 10h
.text:00404630                 push    ebp
.text:00404631                 xor     eax, eax
.text:00404633                 mov     ecx, 8
.text:00404638                 push    edi
.text:00404639                 push    esi
.text:0040463A                 push    ebx
.text:0040463B                 sub     esp, 0ACh
.text:00404641                 mov     ebp, [esp+0C4h]
.text:00404648                 cld
.text:00404649                 lea     edi, [esp+14h]
.text:0040464D                 mov     [esp+10h], ebp
.text:00404651                 rep stosd
.text:00404653                 mov     eax, [esp+30h]
.text:00404657                 mov     edi, [esp+10h]
.text:0040465B                 mov     esi, [esp+14h]
.text:0040465F                 mov     [esp+60h], eax
.text:00404663                 mov     ebp, [esp+18h]
.text:00404667                 mov     eax, [esp+10h]
.text:0040466B                 mov     [esp+40h], edi
.text:0040466F                 mov     ecx, [esp+28h]
.text:00404673                 mov     edi, [esp+1Ch]
.text:00404677                 mov     [esp+44h], esi
.text:0040467B                 mov     edx, [esp+2Ch]
.text:0040467F                 mov     esi, [esp+20h]
.text:00404683                 mov     [esp+70h], eax
.text:00404687                 mov     ebx, [esp+24h]
.text:0040468B                 mov     eax, [esp+14h]
.text:0040468F                 mov     [esp+48h], ebp
.text:00404693                 mov     [esp+4Ch], edi
.text:00404697                 mov     [esp+50h], esi
.text:0040469B                 mov     [esp+54h], ebx
.text:0040469F                 mov     [esp+58h], ecx
.text:004046A3                 mov     [esp+5Ch], edx
.text:004046A7                 mov     [esp+74h], eax
.text:004046AB                 mov     [esp+78h], ebp
.text:004046AF                 mov     [esp+7Ch], edi
.text:004046B3                 mov     [esp+80h], esi
.text:004046BA                 mov     [esp+84h], ebx
.text:004046C1                 mov     ebx, [esp+30h]
.text:004046C5                 mov     [esp+8Ch], edx
.text:004046CC                 mov     edx, [esp+0C8h]
.text:004046D3                 mov     [esp+88h], ecx
.text:004046DA                 lea     ecx, [esp+70h]
.text:004046DE                 mov     [esp+4], edx
.text:004046E2                 mov     edx, [esp+0C0h]
.text:004046E9                 mov     [esp+90h], ebx
.text:004046F0                 mov     [esp+0Ch], ecx
.text:004046F4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004046FC                 mov     [esp], edx
.text:004046FF                 call    sub_404A40
.text:00404704                 add     esp, 0ACh
.text:0040470A                 pop     ebx
.text:0040470B                 pop     esi
.text:0040470C                 pop     edi
.text:0040470D                 pop     ebp
.text:0040470E                 retn
.text:0040470E ; ---------------------------------------------------------------------------
.text:0040470F                 align 10h
.text:00404710                 push    ebp
.text:00404711                 xor     eax, eax
.text:00404713                 mov     ecx, 8
.text:00404718                 push    edi
.text:00404719                 push    esi
.text:0040471A                 push    ebx
.text:0040471B                 sub     esp, 0ACh
.text:00404721                 mov     edx, [esp+0C4h]
.text:00404728                 cld
.text:00404729                 lea     edi, [esp+14h]
.text:0040472D                 mov     [esp+10h], edx
.text:00404731                 rep stosd
.text:00404733                 mov     eax, [esp+30h]
.text:00404737                 mov     ebp, [esp+10h]
.text:0040473B                 mov     edi, [esp+14h]
.text:0040473F                 mov     [esp+60h], eax
.text:00404743                 mov     esi, [esp+20h]
.text:00404747                 mov     eax, [esp+10h]
.text:0040474B                 mov     [esp+40h], ebp
.text:0040474F                 mov     ecx, [esp+28h]
.text:00404753                 mov     ebp, [esp+18h]
.text:00404757                 mov     [esp+44h], edi
.text:0040475B                 mov     edx, [esp+2Ch]
.text:0040475F                 mov     edi, [esp+1Ch]
.text:00404763                 mov     [esp+70h], eax
.text:00404767                 mov     ebx, [esp+24h]
.text:0040476B                 mov     eax, [esp+14h]
.text:0040476F                 mov     [esp+48h], ebp
.text:00404773                 mov     [esp+4Ch], edi
.text:00404777                 mov     [esp+50h], esi
.text:0040477B                 mov     [esp+54h], ebx
.text:0040477F                 mov     [esp+58h], ecx
.text:00404783                 mov     [esp+5Ch], edx
.text:00404787                 mov     [esp+74h], eax
.text:0040478B                 mov     [esp+78h], ebp
.text:0040478F                 mov     [esp+7Ch], edi
.text:00404793                 mov     [esp+80h], esi
.text:0040479A                 mov     [esp+84h], ebx
.text:004047A1                 mov     esi, [esp+30h]
.text:004047A5                 lea     ebx, [esp+70h]
.text:004047A9                 mov     [esp+8Ch], edx
.text:004047B0                 mov     edx, [esp+0C8h]
.text:004047B7                 mov     [esp+88h], ecx
.text:004047BE                 mov     ecx, [esp+0CCh]
.text:004047C5                 mov     [esp+4], edx
.text:004047C9                 mov     edx, [esp+0C0h]
.text:004047D0                 mov     [esp+90h], esi
.text:004047D7                 mov     [esp+0Ch], ebx
.text:004047DB                 mov     [esp+8], ecx
.text:004047DF                 mov     [esp], edx
.text:004047E2                 call    sub_404A40
.text:004047E7                 add     esp, 0ACh
.text:004047ED                 pop     ebx
.text:004047EE                 pop     esi
.text:004047EF                 pop     edi
.text:004047F0                 pop     ebp
.text:004047F1                 retn
.text:004047F1 ; ---------------------------------------------------------------------------
.text:004047F2                 align 10h
.text:00404800                 push    ebp
.text:00404801                 xor     eax, eax
.text:00404803                 mov     ecx, 8
.text:00404808                 push    edi
.text:00404809                 push    esi
.text:0040480A                 push    ebx
.text:0040480B                 sub     esp, 0ACh
.text:00404811                 mov     edi, [esp+0C0h]
.text:00404818                 cld
.text:00404819                 mov     [esp+10h], edi
.text:0040481D                 lea     edi, [esp+14h]
.text:00404821                 rep stosd
.text:00404823                 mov     eax, [esp+30h]
.text:00404827                 mov     esi, [esp+10h]
.text:0040482B                 mov     ebx, [esp+14h]
.text:0040482F                 mov     [esp+60h], eax
.text:00404833                 mov     ebp, [esp+18h]
.text:00404837                 mov     eax, [esp+10h]
.text:0040483B                 mov     [esp+40h], esi
.text:0040483F                 mov     edi, [esp+1Ch]
.text:00404843                 mov     esi, [esp+20h]
.text:00404847                 mov     [esp+44h], ebx
.text:0040484B                 mov     ecx, [esp+28h]
.text:0040484F                 mov     edx, [esp+2Ch]
.text:00404853                 mov     [esp+70h], eax
.text:00404857                 mov     ebx, [esp+24h]
.text:0040485B                 mov     eax, [esp+14h]
.text:0040485F                 mov     [esp+48h], ebp
.text:00404863                 mov     [esp+4Ch], edi
.text:00404867                 mov     [esp+50h], esi
.text:0040486B                 mov     [esp+54h], ebx
.text:0040486F                 mov     [esp+58h], ecx
.text:00404873                 mov     [esp+5Ch], edx
.text:00404877                 mov     [esp+74h], eax
.text:0040487B                 mov     [esp+78h], ebp
.text:0040487F                 mov     [esp+7Ch], edi
.text:00404883                 mov     [esp+80h], esi
.text:0040488A                 mov     [esp+84h], ebx
.text:00404891                 mov     [esp+8Ch], edx
.text:00404898                 lea     edx, [esp+70h]
.text:0040489C                 mov     [esp+88h], ecx
.text:004048A3                 mov     ecx, [esp+30h]
.text:004048A7                 mov     [esp+0Ch], edx
.text:004048AB                 mov     edx, [esp+0C4h]
.text:004048B2                 mov     [esp+90h], ecx
.text:004048B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004048C1                 mov     [esp+4], edx
.text:004048C5                 mov     dword ptr [esp], 0
.text:004048CC                 call    sub_404A40
.text:004048D1                 add     esp, 0ACh
.text:004048D7                 pop     ebx
.text:004048D8                 pop     esi
.text:004048D9                 pop     edi
.text:004048DA                 pop     ebp
.text:004048DB                 retn
.text:004048DB ; ---------------------------------------------------------------------------
.text:004048DC                 align 10h
.text:004048E0                 push    edi
.text:004048E1                 push    esi
.text:004048E2                 push    ebx
.text:004048E3                 sub     esp, 40h
.text:004048E6                 mov     edx, ds:dword_40714C
.text:004048EC                 mov     ebx, ds:dword_407140
.text:004048F2                 mov     esi, ds:dword_407148
.text:004048F8                 mov     edi, ds:dword_407144
.text:004048FE                 mov     [esp+1Ch], edx
.text:00404902                 mov     ecx, ds:dword_407150
.text:00404908                 mov     edx, ds:dword_407160
.text:0040490E                 mov     [esp+10h], ebx
.text:00404912                 mov     ebx, ds:dword_407154
.text:00404918                 mov     [esp+30h], edx
.text:0040491C                 movzx   edx, byte ptr [esp+54h]
.text:00404921                 mov     [esp+18h], esi
.text:00404925                 mov     esi, ds:dword_40715C
.text:0040492B                 mov     [esp+14h], edi
.text:0040492F                 mov     edi, ds:dword_407158
.text:00404935                 mov     [esp+20h], ecx
.text:00404939                 mov     cl, dl
.text:0040493B                 shr     cl, 5
.text:0040493E                 mov     [esp+24h], ebx
.text:00404942                 movzx   ebx, cl
.text:00404945                 mov     [esp+2Ch], esi
.text:00404949                 lea     esi, [esp+10h]
.text:0040494D                 mov     [esp+28h], edi
.text:00404951                 lea     edi, [esi+ebx*4]
.text:00404954                 mov     ebx, edx
.text:00404956                 mov     edx, [edi+4]
.text:00404959                 and     ebx, 1Fh
.text:0040495C                 mov     cl, bl
.text:0040495E                 mov     eax, edx
.text:00404960                 shr     eax, cl
.text:00404962                 and     eax, 1
.text:00404965                 xor     eax, 1
.text:00404968                 shl     eax, cl
.text:0040496A                 xor     edx, eax
.text:0040496C                 mov     [edi+4], edx
.text:0040496F                 mov     edx, [esp+50h]
.text:00404973                 mov     [esp+0Ch], esi
.text:00404977                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040497F                 mov     [esp+4], edx
.text:00404983                 mov     dword ptr [esp], 0
.text:0040498A                 call    sub_404A40
.text:0040498F                 add     esp, 40h
.text:00404992                 pop     ebx
.text:00404993                 pop     esi
.text:00404994                 pop     edi
.text:00404995                 retn
.text:00404995 ; ---------------------------------------------------------------------------
.text:00404996                 align 10h
.text:004049A0
.text:004049A0 ; =============== S U B R O U T I N E =======================================
.text:004049A0
.text:004049A0
.text:004049A0 ; int __cdecl sub_4049A0(char *)
.text:004049A0 sub_4049A0      proc near               ; CODE XREF: sub_402130+64↑p
.text:004049A0
.text:004049A0 var_4C          = dword ptr -4Ch
.text:004049A0 var_48          = dword ptr -48h
.text:004049A0 var_44          = dword ptr -44h
.text:004049A0 var_40          = dword ptr -40h
.text:004049A0 var_3C          = dword ptr -3Ch
.text:004049A0 var_38          = dword ptr -38h
.text:004049A0 var_34          = dword ptr -34h
.text:004049A0 var_30          = dword ptr -30h
.text:004049A0 var_2C          = dword ptr -2Ch
.text:004049A0 var_28          = dword ptr -28h
.text:004049A0 var_24          = dword ptr -24h
.text:004049A0 var_20          = dword ptr -20h
.text:004049A0 var_1C          = dword ptr -1Ch
.text:004049A0 arg_0           = dword ptr  4
.text:004049A0
.text:004049A0                 sub     esp, 4Ch
.text:004049A3                 mov     ecx, ds:dword_407140
.text:004049A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004049B1                 mov     edx, ds:dword_407144
.text:004049B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004049BE                 mov     [esp+4Ch+var_3C], ecx
.text:004049C2                 mov     ecx, ds:dword_40714C
.text:004049C8                 mov     [esp+4Ch+var_38], edx
.text:004049CC                 mov     edx, ds:dword_407148
.text:004049D2                 mov     [esp+4Ch+var_30], ecx
.text:004049D6                 mov     ecx, ds:dword_407150
.text:004049DC                 mov     eax, edx
.text:004049DE                 shr     eax, 1Ah
.text:004049E1                 and     eax, 1
.text:004049E4                 xor     eax, 1
.text:004049E7                 mov     [esp+4Ch+var_2C], ecx
.text:004049EB                 shl     eax, 1Ah
.text:004049EE                 mov     ecx, ds:dword_407154
.text:004049F4                 xor     edx, eax
.text:004049F6                 mov     [esp+4Ch+var_34], edx
.text:004049FA                 mov     edx, [esp+4Ch+arg_0]
.text:004049FE                 mov     [esp+4Ch+var_28], ecx
.text:00404A02                 mov     ecx, ds:dword_407158
.text:00404A08                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404A0C                 mov     [esp+4Ch+var_24], ecx
.text:00404A10                 mov     ecx, ds:dword_40715C
.text:00404A16                 mov     [esp+4Ch+var_20], ecx
.text:00404A1A                 mov     ecx, ds:dword_407160
.text:00404A20                 mov     [esp+4Ch+var_1C], ecx
.text:00404A24                 lea     ecx, [esp+4Ch+var_3C]
.text:00404A28                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404A2C                 call    sub_404A40
.text:00404A31                 add     esp, 4Ch
.text:00404A34                 retn
.text:00404A34 sub_4049A0      endp
.text:00404A34
.text:00404A34 ; ---------------------------------------------------------------------------
.text:00404A35                 align 10h
.text:00404A40
.text:00404A40 ; =============== S U B R O U T I N E =======================================
.text:00404A40
.text:00404A40
.text:00404A40 ; int __cdecl sub_404A40(int, char *, int, int)
.text:00404A40 sub_404A40      proc near               ; CODE XREF: .text:004045F2↑p
.text:00404A40                                         ; .text:00404622↑p ...
.text:00404A40
.text:00404A40 Block           = dword ptr -2Ch
.text:00404A40 var_28          = dword ptr -28h
.text:00404A40 Str             = dword ptr -24h
.text:00404A40 var_20          = dword ptr -20h
.text:00404A40 var_1C          = dword ptr -1Ch
.text:00404A40 var_18          = dword ptr -18h
.text:00404A40 var_14          = dword ptr -14h
.text:00404A40 arg_0           = dword ptr  4
.text:00404A40 arg_4           = dword ptr  8
.text:00404A40 arg_8           = dword ptr  0Ch
.text:00404A40 arg_C           = dword ptr  10h
.text:00404A40
.text:00404A40                 push    ebp
.text:00404A41                 push    edi
.text:00404A42                 push    esi
.text:00404A43                 push    ebx
.text:00404A44                 sub     esp, 1Ch
.text:00404A47                 call    _errno
.text:00404A4C                 mov     edx, [eax]
.text:00404A4E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A52                 mov     [esp+2Ch+var_14], edx
.text:00404A56                 test    eax, eax
.text:00404A58                 js      loc_404BFA
.text:00404A5E                 mov     eax, [esp+2Ch+arg_0]
.text:00404A62                 cmp     dword_406040, eax
.text:00404A68                 ja      short loc_404AE0
.text:00404A6A                 mov     esi, eax
.text:00404A6C                 inc     esi
.text:00404A6D                 cmp     esi, 1FFFFFFFh
.text:00404A73                 ja      loc_404BFF
.text:00404A79                 mov     ebx, off_40604C
.text:00404A7F                 cmp     ebx, offset dword_406044
.text:00404A85                 jz      loc_404BD1
.text:00404A8B
.text:00404A8B loc_404A8B:                             ; CODE XREF: sub_404A40+1B5↓j
.text:00404A8B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404A8E                 lea     ecx, ds:0[esi*8]
.text:00404A95                 mov     ebp, esi
.text:00404A97                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404A9B                 call    sub_404CE0
.text:00404AA0                 mov     off_40604C, eax
.text:00404AA5                 mov     ebx, dword_406040
.text:00404AAB                 sub     ebp, ebx
.text:00404AAD                 lea     edi, [eax+ebx*8]
.text:00404AB0                 lea     eax, ds:0[ebp*8]
.text:00404AB7                 cmp     eax, 7
.text:00404ABA                 jbe     short loc_404AD0
.text:00404ABC                 test    edi, 4
.text:00404AC2                 jz      short loc_404AD0
.text:00404AC4                 mov     dword ptr [edi], 0
.text:00404ACA                 sub     eax, 4
.text:00404ACD                 add     edi, 4
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: sub_404A40+7A↑j
.text:00404AD0                                         ; sub_404A40+82↑j
.text:00404AD0                 cld
.text:00404AD1                 mov     ecx, eax
.text:00404AD3                 shr     ecx, 2
.text:00404AD6                 xor     eax, eax
.text:00404AD8                 rep stosd
.text:00404ADA                 mov     dword_406040, esi
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404A40+28↑j
.text:00404AE0                 mov     esi, off_40604C
.text:00404AE6                 mov     eax, [esp+2Ch+arg_0]
.text:00404AEA                 mov     ebp, [esi+eax*8]
.text:00404AED                 mov     edi, [esi+eax*8+4]
.text:00404AF1                 mov     esi, [esp+2Ch+arg_C]
.text:00404AF5                 test    esi, esi
.text:00404AF7                 jz      loc_404BC7
.text:00404AFD
.text:00404AFD loc_404AFD:                             ; CODE XREF: sub_404A40+18C↓j
.text:00404AFD                 call    _errno
.text:00404B02                 mov     ebx, [eax]
.text:00404B04                 mov     [esp+2Ch+var_18], esi ; int
.text:00404B08                 mov     ecx, [esi]
.text:00404B0A                 mov     [esp+2Ch+Block], edi ; int
.text:00404B0D                 mov     edx, [esp+2Ch+arg_8]
.text:00404B11                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404B15                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404B19                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B1D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B21                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B25                 call    sub_403900
.text:00404B2A                 mov     esi, eax
.text:00404B2C                 call    _errno
.text:00404B31                 mov     [eax], ebx
.text:00404B33                 cmp     ebp, esi
.text:00404B35                 ja      short loc_404BAB
.text:00404B37                 lea     ebp, [esi+1]
.text:00404B3A                 mov     ebx, off_40604C
.text:00404B40                 cmp     edi, offset unk_407040
.text:00404B46                 mov     esi, [esp+2Ch+arg_0]
.text:00404B4A                 mov     [ebx+esi*8], ebp
.text:00404B4D                 jz      short loc_404B5D
.text:00404B4F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404B52                 call    free
.text:00404B57                 mov     ebx, off_40604C
.text:00404B5D
.text:00404B5D loc_404B5D:                             ; CODE XREF: sub_404A40+10D↑j
.text:00404B5D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404B60                 call    sub_404C50
.text:00404B65                 mov     esi, [esp+2Ch+arg_C]
.text:00404B69                 mov     edi, eax
.text:00404B6B                 mov     eax, [esp+2Ch+arg_0]
.text:00404B6F                 test    esi, esi
.text:00404B71                 mov     [ebx+eax*8+4], edi
.text:00404B75                 jz      short loc_404BC0
.text:00404B77
.text:00404B77 loc_404B77:                             ; CODE XREF: sub_404A40+185↓j
.text:00404B77                 call    _errno
.text:00404B7C                 mov     ebx, [eax]
.text:00404B7E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404B82                 mov     ecx, [esi]
.text:00404B84                 mov     [esp+2Ch+Block], edi ; int
.text:00404B87                 mov     edx, [esp+2Ch+arg_8]
.text:00404B8B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404B8F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404B93                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B97                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B9B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B9F                 call    sub_403900
.text:00404BA4                 call    _errno
.text:00404BA9                 mov     [eax], ebx
.text:00404BAB
.text:00404BAB loc_404BAB:                             ; CODE XREF: sub_404A40+F5↑j
.text:00404BAB                 call    _errno
.text:00404BB0                 mov     ebp, [esp+2Ch+var_14]
.text:00404BB4                 mov     [eax], ebp
.text:00404BB6                 add     esp, 1Ch
.text:00404BB9                 mov     eax, edi
.text:00404BBB                 pop     ebx
.text:00404BBC                 pop     esi
.text:00404BBD                 pop     edi
.text:00404BBE                 pop     ebp
.text:00404BBF                 retn
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: sub_404A40+135↑j
.text:00404BC0                 mov     esi, offset dword_407140
.text:00404BC5                 jmp     short loc_404B77
.text:00404BC7 ; ---------------------------------------------------------------------------
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_404A40+B7↑j
.text:00404BC7                 mov     esi, offset dword_407140
.text:00404BCC                 jmp     loc_404AFD
.text:00404BD1 ; ---------------------------------------------------------------------------
.text:00404BD1
.text:00404BD1 loc_404BD1:                             ; CODE XREF: sub_404A40+45↑j
.text:00404BD1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404BD8                 call    sub_404C50
.text:00404BDD                 mov     off_40604C, eax
.text:00404BE2                 mov     edi, dword_406044
.text:00404BE8                 mov     ebx, eax
.text:00404BEA                 mov     ecx, off_406048
.text:00404BF0                 mov     [eax], edi
.text:00404BF2                 mov     [eax+4], ecx
.text:00404BF5                 jmp     loc_404A8B
.text:00404BFA ; ---------------------------------------------------------------------------
.text:00404BFA
.text:00404BFA loc_404BFA:                             ; CODE XREF: sub_404A40+18↑j
.text:00404BFA                 call    abort
.text:00404BFF ; ---------------------------------------------------------------------------
.text:00404BFF
.text:00404BFF loc_404BFF:                             ; CODE XREF: sub_404A40+33↑j
.text:00404BFF                 call    sub_404F00
.text:00404BFF sub_404A40      endp
.text:00404BFF
.text:00404BFF ; ---------------------------------------------------------------------------
.text:00404C04                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 sub_404C10      proc near
.text:00404C10
.text:00404C10 Size            = dword ptr -0Ch
.text:00404C10 var_4           = dword ptr -4
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10 arg_4           = dword ptr  8
.text:00404C10
.text:00404C10                 sub     esp, 0Ch
.text:00404C13                 xor     edx, edx
.text:00404C15                 mov     ecx, [esp+0Ch+arg_4]
.text:00404C19                 mov     [esp+0Ch+var_4], ebx
.text:00404C1D                 mov     eax, 0FFFFFFFFh
.text:00404C22                 mov     ebx, [esp+0Ch+arg_0]
.text:00404C26                 div     ecx
.text:00404C28                 cmp     eax, ebx
.text:00404C2A                 jb      short loc_404C49
.text:00404C2C                 mov     edx, ebx
.text:00404C2E                 imul    edx, ecx
.text:00404C31                 mov     [esp+0Ch+Size], edx ; Size
.text:00404C34                 call    malloc
.text:00404C39                 test    eax, eax
.text:00404C3B                 jz      short loc_404C45
.text:00404C3D
.text:00404C3D loc_404C3D:                             ; CODE XREF: sub_404C10+37↓j
.text:00404C3D                 mov     ebx, [esp+0Ch+var_4]
.text:00404C41                 add     esp, 0Ch
.text:00404C44                 retn
.text:00404C45 ; ---------------------------------------------------------------------------
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: sub_404C10+2B↑j
.text:00404C45                 test    ebx, ebx
.text:00404C47                 jz      short loc_404C3D
.text:00404C49
.text:00404C49 loc_404C49:                             ; CODE XREF: sub_404C10+1A↑j
.text:00404C49                 call    sub_404F00
.text:00404C49 sub_404C10      endp
.text:00404C49
.text:00404C49 ; ---------------------------------------------------------------------------
.text:00404C4E                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50
.text:00404C50 ; int __cdecl sub_404C50(size_t)
.text:00404C50 sub_404C50      proc near               ; CODE XREF: .text:00404379↑p
.text:00404C50                                         ; .text:00404556↑p ...
.text:00404C50
.text:00404C50 Size            = dword ptr -0Ch
.text:00404C50 var_4           = dword ptr -4
.text:00404C50 arg_0           = dword ptr  4
.text:00404C50
.text:00404C50                 sub     esp, 0Ch
.text:00404C53                 mov     [esp+0Ch+var_4], ebx
.text:00404C57                 mov     ebx, [esp+0Ch+arg_0]
.text:00404C5B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404C5E                 call    malloc
.text:00404C63                 test    eax, eax
.text:00404C65                 jz      short loc_404C70
.text:00404C67
.text:00404C67 loc_404C67:                             ; CODE XREF: sub_404C50+22↓j
.text:00404C67                 mov     ebx, [esp+0Ch+var_4]
.text:00404C6B                 add     esp, 0Ch
.text:00404C6E                 retn
.text:00404C6E ; ---------------------------------------------------------------------------
.text:00404C6F                 align 10h
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_404C50+15↑j
.text:00404C70                 test    ebx, ebx
.text:00404C72                 jz      short loc_404C67
.text:00404C74                 call    sub_404F00
.text:00404C74 sub_404C50      endp
.text:00404C74
.text:00404C74 ; ---------------------------------------------------------------------------
.text:00404C79                 align 10h
.text:00404C80                 sub     esp, 1Ch
.text:00404C83                 xor     edx, edx
.text:00404C85                 mov     eax, 0FFFFFFFFh
.text:00404C8A                 mov     [esp+14h], ebx
.text:00404C8E                 mov     ecx, [esp+20h]
.text:00404C92                 mov     ebx, [esp+28h]
.text:00404C96                 mov     [esp+18h], esi
.text:00404C9A                 mov     esi, [esp+24h]
.text:00404C9E                 div     ebx
.text:00404CA0                 cmp     eax, esi
.text:00404CA2                 jb      short loc_404CD4
.text:00404CA4                 mov     [esp], ecx
.text:00404CA7                 mov     edx, esi
.text:00404CA9                 imul    edx, ebx
.text:00404CAC                 mov     [esp+4], edx
.text:00404CB0                 call    realloc
.text:00404CB5                 test    eax, eax
.text:00404CB7                 mov     ecx, eax
.text:00404CB9                 jz      short loc_404CD0
.text:00404CBB
.text:00404CBB loc_404CBB:                             ; CODE XREF: .text:00404CD2↓j
.text:00404CBB                 mov     ebx, [esp+14h]
.text:00404CBF                 mov     eax, ecx
.text:00404CC1                 mov     esi, [esp+18h]
.text:00404CC5                 add     esp, 1Ch
.text:00404CC8                 retn
.text:00404CC8 ; ---------------------------------------------------------------------------
.text:00404CC9                 align 10h
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: .text:00404CB9↑j
.text:00404CD0                 test    esi, esi
.text:00404CD2                 jz      short loc_404CBB
.text:00404CD4
.text:00404CD4 loc_404CD4:                             ; CODE XREF: .text:00404CA2↑j
.text:00404CD4                 call    sub_404F00
.text:00404CD4 ; ---------------------------------------------------------------------------
.text:00404CD9                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0
.text:00404CE0 ; int __cdecl sub_404CE0(void *, size_t)
.text:00404CE0 sub_404CE0      proc near               ; CODE XREF: sub_404A40+5B↑p
.text:00404CE0
.text:00404CE0 Block           = dword ptr -0Ch
.text:00404CE0 Size            = dword ptr -8
.text:00404CE0 var_4           = dword ptr -4
.text:00404CE0 arg_0           = dword ptr  4
.text:00404CE0 arg_4           = dword ptr  8
.text:00404CE0
.text:00404CE0                 sub     esp, 0Ch
.text:00404CE3                 mov     edx, [esp+0Ch+arg_0]
.text:00404CE7                 mov     [esp+0Ch+var_4], ebx
.text:00404CEB                 mov     ebx, [esp+0Ch+arg_4]
.text:00404CEF                 mov     [esp+0Ch+Block], edx ; Block
.text:00404CF2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404CF6                 call    realloc
.text:00404CFB                 test    eax, eax
.text:00404CFD                 jz      short loc_404D07
.text:00404CFF
.text:00404CFF loc_404CFF:                             ; CODE XREF: sub_404CE0+29↓j
.text:00404CFF                 mov     ebx, [esp+0Ch+var_4]
.text:00404D03                 add     esp, 0Ch
.text:00404D06                 retn
.text:00404D07 ; ---------------------------------------------------------------------------
.text:00404D07
.text:00404D07 loc_404D07:                             ; CODE XREF: sub_404CE0+1D↑j
.text:00404D07                 test    ebx, ebx
.text:00404D09                 jz      short loc_404CFF
.text:00404D0B                 call    sub_404F00
.text:00404D0B sub_404CE0      endp
.text:00404D0B
.text:00404D10 ; ---------------------------------------------------------------------------
.text:00404D10                 jmp     sub_404E60
.text:00404D10 ; ---------------------------------------------------------------------------
.text:00404D15                 align 10h
.text:00404D20                 sub     esp, 0Ch
.text:00404D23                 mov     edx, [esp+14h]
.text:00404D27                 mov     dword ptr [esp+8], 1
.text:00404D2F                 mov     [esp+4], edx
.text:00404D33                 mov     edx, [esp+10h]
.text:00404D37                 mov     [esp], edx
.text:00404D3A                 call    sub_404E60
.text:00404D3F                 add     esp, 0Ch
.text:00404D42                 retn
.text:00404D42 ; ---------------------------------------------------------------------------
.text:00404D43                 align 10h
.text:00404D50                 sub     esp, 1Ch
.text:00404D53                 mov     [esp+18h], ebx
.text:00404D57                 mov     ebx, [esp+20h]
.text:00404D5B                 mov     [esp], ebx
.text:00404D5E                 call    malloc
.text:00404D63                 test    eax, eax
.text:00404D65                 jz      short loc_404D83
.text:00404D67
.text:00404D67 loc_404D67:                             ; CODE XREF: .text:00404D85↓j
.text:00404D67                 mov     [esp+8], ebx
.text:00404D6B                 mov     dword ptr [esp+4], 0
.text:00404D73                 mov     [esp], eax
.text:00404D76                 call    memset
.text:00404D7B                 mov     ebx, [esp+18h]
.text:00404D7F                 add     esp, 1Ch
.text:00404D82                 retn
.text:00404D83 ; ---------------------------------------------------------------------------
.text:00404D83
.text:00404D83 loc_404D83:                             ; CODE XREF: .text:00404D65↑j
.text:00404D83                 test    ebx, ebx
.text:00404D85                 jz      short loc_404D67
.text:00404D87                 call    sub_404F00
.text:00404D87 ; ---------------------------------------------------------------------------
.text:00404D8C                 align 10h
.text:00404D90                 sub     esp, 0Ch
.text:00404D93                 xor     edx, edx
.text:00404D95                 mov     ecx, [esp+14h]
.text:00404D99                 mov     [esp+8], ebx
.text:00404D9D                 mov     eax, 0FFFFFFFFh
.text:00404DA2                 mov     ebx, [esp+10h]
.text:00404DA6                 div     ecx
.text:00404DA8                 cmp     eax, ebx
.text:00404DAA                 jb      short loc_404DC8
.text:00404DAC                 mov     [esp+4], ecx
.text:00404DB0                 mov     [esp], ebx
.text:00404DB3                 call    calloc
.text:00404DB8                 test    eax, eax
.text:00404DBA                 jz      short loc_404DC4
.text:00404DBC
.text:00404DBC loc_404DBC:                             ; CODE XREF: .text:00404DC6↓j
.text:00404DBC                 mov     ebx, [esp+8]
.text:00404DC0                 add     esp, 0Ch
.text:00404DC3                 retn
.text:00404DC4 ; ---------------------------------------------------------------------------
.text:00404DC4
.text:00404DC4 loc_404DC4:                             ; CODE XREF: .text:00404DBA↑j
.text:00404DC4                 test    ebx, ebx
.text:00404DC6                 jz      short loc_404DBC
.text:00404DC8
.text:00404DC8 loc_404DC8:                             ; CODE XREF: .text:00404DAA↑j
.text:00404DC8                 call    sub_404F00
.text:00404DC8 ; ---------------------------------------------------------------------------
.text:00404DCD                 align 10h
.text:00404DD0                 sub     esp, 1Ch
.text:00404DD3                 mov     [esp+18h], ebx
.text:00404DD7                 mov     ebx, [esp+24h]
.text:00404DDB                 mov     [esp], ebx
.text:00404DDE                 call    malloc
.text:00404DE3                 test    eax, eax
.text:00404DE5                 mov     edx, eax
.text:00404DE7                 jz      short loc_404E05
.text:00404DE9
.text:00404DE9 loc_404DE9:                             ; CODE XREF: .text:00404E07↓j
.text:00404DE9                 mov     [esp+8], ebx
.text:00404DED                 mov     ecx, [esp+20h]
.text:00404DF1                 mov     [esp], edx
.text:00404DF4                 mov     [esp+4], ecx
.text:00404DF8                 call    memcpy
.text:00404DFD                 mov     ebx, [esp+18h]
.text:00404E01                 add     esp, 1Ch
.text:00404E04                 retn
.text:00404E05 ; ---------------------------------------------------------------------------
.text:00404E05
.text:00404E05 loc_404E05:                             ; CODE XREF: .text:00404DE7↑j
.text:00404E05                 test    ebx, ebx
.text:00404E07                 jz      short loc_404DE9
.text:00404E09                 call    sub_404F00
.text:00404E09 ; ---------------------------------------------------------------------------
.text:00404E0E                 align 10h
.text:00404E10                 sub     esp, 1Ch
.text:00404E13                 mov     [esp+18h], esi
.text:00404E17                 mov     esi, [esp+20h]
.text:00404E1B                 mov     [esp+14h], ebx
.text:00404E1F                 mov     [esp], esi
.text:00404E22                 call    strlen
.text:00404E27                 lea     ebx, [eax+1]
.text:00404E2A                 mov     [esp], ebx
.text:00404E2D                 call    malloc
.text:00404E32                 test    eax, eax
.text:00404E34                 jz      short loc_404E52
.text:00404E36
.text:00404E36 loc_404E36:                             ; CODE XREF: .text:00404E54↓j
.text:00404E36                 mov     [esp+8], ebx
.text:00404E3A                 mov     [esp+4], esi
.text:00404E3E                 mov     [esp], eax
.text:00404E41                 call    memcpy
.text:00404E46                 mov     ebx, [esp+14h]
.text:00404E4A                 mov     esi, [esp+18h]
.text:00404E4E                 add     esp, 1Ch
.text:00404E51                 retn
.text:00404E52 ; ---------------------------------------------------------------------------
.text:00404E52
.text:00404E52 loc_404E52:                             ; CODE XREF: .text:00404E34↑j
.text:00404E52                 test    ebx, ebx
.text:00404E54                 jz      short loc_404E36
.text:00404E56                 call    sub_404F00
.text:00404E56 ; ---------------------------------------------------------------------------
.text:00404E5B                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60
.text:00404E60 ; int __cdecl sub_404E60(void *, int, int)
.text:00404E60 sub_404E60      proc near               ; CODE XREF: .text:00404D10↑j
.text:00404E60                                         ; .text:00404D3A↑p
.text:00404E60
.text:00404E60 Block           = dword ptr -1Ch
.text:00404E60 Size            = dword ptr -18h
.text:00404E60 var_C           = dword ptr -0Ch
.text:00404E60 var_8           = dword ptr -8
.text:00404E60 var_4           = dword ptr -4
.text:00404E60 arg_0           = dword ptr  4
.text:00404E60 arg_4           = dword ptr  8
.text:00404E60 arg_8           = dword ptr  0Ch
.text:00404E60
.text:00404E60                 sub     esp, 1Ch
.text:00404E63                 mov     [esp+1Ch+var_8], esi
.text:00404E67                 mov     esi, [esp+1Ch+arg_0]
.text:00404E6B                 mov     [esp+1Ch+var_4], edi
.text:00404E6F                 mov     edi, [esp+1Ch+arg_4]
.text:00404E73                 test    esi, esi
.text:00404E75                 mov     [esp+1Ch+var_C], ebx
.text:00404E79                 mov     ecx, [edi]
.text:00404E7B                 mov     ebx, [esp+1Ch+arg_8]
.text:00404E7F                 jz      short loc_404EC0
.text:00404E81                 xor     edx, edx
.text:00404E83                 mov     eax, 7FFFFFFFh
.text:00404E88                 div     ebx
.text:00404E8A                 cmp     eax, ecx
.text:00404E8C                 jb      short loc_404EB9
.text:00404E8E                 add     ecx, ecx
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404E60+62↓j
.text:00404E90                                         ; sub_404E60+71↓j ...
.text:00404E90                 mov     [edi], ecx
.text:00404E92                 imul    ebx, ecx
.text:00404E95                 mov     [esp+1Ch+Block], esi ; Block
.text:00404E98                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404E9C                 call    realloc
.text:00404EA1                 test    eax, eax
.text:00404EA3                 jz      short loc_404EB5
.text:00404EA5
.text:00404EA5 loc_404EA5:                             ; CODE XREF: sub_404E60+57↓j
.text:00404EA5                 mov     ebx, [esp+1Ch+var_C]
.text:00404EA9                 mov     esi, [esp+1Ch+var_8]
.text:00404EAD                 mov     edi, [esp+1Ch+var_4]
.text:00404EB1                 add     esp, 1Ch
.text:00404EB4                 retn
.text:00404EB5 ; ---------------------------------------------------------------------------
.text:00404EB5
.text:00404EB5 loc_404EB5:                             ; CODE XREF: sub_404E60+43↑j
.text:00404EB5                 test    ebx, ebx
.text:00404EB7                 jz      short loc_404EA5
.text:00404EB9
.text:00404EB9 loc_404EB9:                             ; CODE XREF: sub_404E60+2C↑j
.text:00404EB9                 call    sub_404F00
.text:00404EB9 ; ---------------------------------------------------------------------------
.text:00404EBE                 align 10h
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_404E60+1F↑j
.text:00404EC0                 test    ecx, ecx
.text:00404EC2                 jnz     short loc_404E90
.text:00404EC4                 xor     edx, edx
.text:00404EC6                 mov     eax, 40h ; '@'
.text:00404ECB                 div     ebx
.text:00404ECD                 test    eax, eax
.text:00404ECF                 mov     ecx, eax
.text:00404ED1                 jnz     short loc_404E90
.text:00404ED3                 mov     ecx, 1
.text:00404ED8                 jmp     short loc_404E90
.text:00404ED8 sub_404E60      endp
.text:00404ED8
.text:00404ED8 ; ---------------------------------------------------------------------------
.text:00404EDA                 align 10h
.text:00404EE0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404F00+3↓o
.text:00404EF1 ; const char aS_0[]
.text:00404EF1 aS_0            db '%s',0               ; DATA XREF: sub_404F00+10↓o
.text:00404EF4                 align 10h
.text:00404F00
.text:00404F00 ; =============== S U B R O U T I N E =======================================
.text:00404F00
.text:00404F00 ; Attributes: noreturn
.text:00404F00
.text:00404F00 sub_404F00      proc near               ; CODE XREF: sub_404A40:loc_404BFF↑p
.text:00404F00                                         ; sub_404C10:loc_404C49↑p ...
.text:00404F00
.text:00404F00 Code            = dword ptr -1Ch
.text:00404F00 ErrorMessage    = dword ptr -18h
.text:00404F00 var_14          = dword ptr -14h
.text:00404F00 var_10          = byte ptr -10h
.text:00404F00
.text:00404F00                 sub     esp, 1Ch
.text:00404F03                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404F0A                 call    ds:libintl_gettext
.text:00404F10                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404F18                 mov     edx, Code
.text:00404F1E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404F26                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404F2A                 mov     [esp+1Ch+Code], edx ; Code
.text:00404F2D                 call    sub_404F90
.text:00404F32                 call    abort
.text:00404F32 sub_404F00      endp
.text:00404F32
.text:00404F32 ; ---------------------------------------------------------------------------
.text:00404F37                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: thunk
.text:00404F40
.text:00404F40 libintl_bindtextdomain proc near
.text:00404F40                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404F40 libintl_bindtextdomain endp
.text:00404F40
.text:00404F40 ; ---------------------------------------------------------------------------
.text:00404F46                 align 10h
.text:00404F50                 jmp     ds:libintl_textdomain
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F56                 align 10h
.text:00404F60                 jmp     ds:libintl_gettext
.text:00404F60 ; ---------------------------------------------------------------------------
.text:00404F66                 align 10h
.text:00404F70 ; const char aS_1[]
.text:00404F70 aS_1            db ': %s',0             ; DATA XREF: sub_404F90+B8↓o
.text:00404F70                                         ; sub_405094+122↓o
.text:00404F75 aUnknownSystemE db 'Unknown system error',0
.text:00404F75                                         ; DATA XREF: sub_404F90:loc_40505D↓o
.text:00404F75                                         ; sub_405094:loc_4051CE↓o
.text:00404F8A ; const char aS_2[]
.text:00404F8A aS_2            db '%s: ',0             ; DATA XREF: sub_404F90:loc_405064↓o
.text:00404F8F                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 ; int __cdecl sub_404F90(int Code, int ErrorMessage, char *, char)
.text:00404F90 sub_404F90      proc near               ; CODE XREF: sub_402130+86↑p
.text:00404F90                                         ; sub_402130+AF↑p ...
.text:00404F90
.text:00404F90 Stream          = dword ptr -1Ch
.text:00404F90 Format          = dword ptr -18h
.text:00404F90 ArgList         = dword ptr -14h
.text:00404F90 Code            = dword ptr  4
.text:00404F90 ErrorMessage    = dword ptr  8
.text:00404F90 arg_8           = dword ptr  0Ch
.text:00404F90 arg_C           = byte ptr  10h
.text:00404F90
.text:00404F90                 push    esi
.text:00404F91                 push    ebx
.text:00404F92                 sub     esp, 14h
.text:00404F95                 mov     edx, ds:_iob
.text:00404F9B                 mov     esi, [esp+1Ch+Code]
.text:00404F9F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404FA3                 add     edx, 20h ; ' '
.text:00404FA6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FA9                 call    fflush
.text:00404FAE                 mov     eax, ds:dword_4071C0
.text:00404FB3                 test    eax, eax
.text:00404FB5                 jz      loc_405064
.text:00404FBB                 call    eax ; dword_4071C0
.text:00404FBD
.text:00404FBD loc_404FBD:                             ; CODE XREF: sub_404F90+F7↓j
.text:00404FBD                 lea     edx, [esp+1Ch+arg_C]
.text:00404FC1                 mov     ecx, [esp+1Ch+arg_8]
.text:00404FC5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404FC9                 mov     edx, ds:_iob
.text:00404FCF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404FD3                 add     edx, 40h ; '@'
.text:00404FD6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FD9                 call    vfprintf
.text:00404FDE                 inc     ds:dword_4071D0
.text:00404FE4                 test    ebx, ebx
.text:00404FE6                 jnz     short loc_405032
.text:00404FE8
.text:00404FE8 loc_404FE8:                             ; CODE XREF: sub_404F90+CB↓j
.text:00404FE8                 mov     edx, ds:_iob
.text:00404FEE                 lea     ecx, [edx+40h]
.text:00404FF1                 mov     ebx, [ecx+4]
.text:00404FF4                 dec     ebx
.text:00404FF5                 test    ebx, ebx
.text:00404FF7                 mov     [ecx+4], ebx
.text:00404FFA                 js      short loc_405020
.text:00404FFC                 mov     ecx, [edx+40h]
.text:00404FFF                 mov     byte ptr [ecx], 0Ah
.text:00405002                 inc     dword ptr [edx+40h]
.text:00405005
.text:00405005 loc_405005:                             ; CODE XREF: sub_404F90+A0↓j
.text:00405005                 mov     edx, ds:_iob
.text:0040500B                 add     edx, 40h ; '@'
.text:0040500E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405011                 call    fflush
.text:00405016                 test    esi, esi
.text:00405018                 jnz     short loc_40508C
.text:0040501A                 add     esp, 14h
.text:0040501D                 pop     ebx
.text:0040501E                 pop     esi
.text:0040501F                 retn
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404F90+6A↑j
.text:00405020                 mov     [esp+1Ch+Format], ecx ; File
.text:00405024                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040502B                 call    _flsbuf
.text:00405030                 jmp     short loc_405005
.text:00405032 ; ---------------------------------------------------------------------------
.text:00405032
.text:00405032 loc_405032:                             ; CODE XREF: sub_404F90+56↑j
.text:00405032                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405035                 call    strerror
.text:0040503A                 test    eax, eax
.text:0040503C                 jz      short loc_40505D
.text:0040503E
.text:0040503E loc_40503E:                             ; CODE XREF: sub_404F90+D2↓j
.text:0040503E                 mov     [esp+1Ch+ArgList], eax
.text:00405042                 mov     ebx, ds:_iob
.text:00405048                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00405050                 add     ebx, 40h ; '@'
.text:00405053                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405056                 call    fprintf
.text:0040505B                 jmp     short loc_404FE8
.text:0040505D ; ---------------------------------------------------------------------------
.text:0040505D
.text:0040505D loc_40505D:                             ; CODE XREF: sub_404F90+AC↑j
.text:0040505D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405062                 jmp     short loc_40503E
.text:00405064 ; ---------------------------------------------------------------------------
.text:00405064
.text:00405064 loc_405064:                             ; CODE XREF: sub_404F90+25↑j
.text:00405064                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040506C                 mov     edx, ds:_iob
.text:00405072                 mov     ecx, ds:dword_407190
.text:00405078                 add     edx, 40h ; '@'
.text:0040507B                 mov     [esp+1Ch+ArgList], ecx
.text:0040507F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405082                 call    fprintf
.text:00405087                 jmp     loc_404FBD
.text:0040508C ; ---------------------------------------------------------------------------
.text:0040508C
.text:0040508C loc_40508C:                             ; CODE XREF: sub_404F90+88↑j
.text:0040508C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040508F                 call    exit
.text:0040508F sub_404F90      endp
.text:0040508F
.text:00405094
.text:00405094 ; =============== S U B R O U T I N E =======================================
.text:00405094
.text:00405094
.text:00405094 ; int __cdecl sub_405094(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405094 sub_405094      proc near               ; DATA XREF: sub_405094+77↓o
.text:00405094
.text:00405094 Stream          = dword ptr -28h
.text:00405094 Format          = dword ptr -24h
.text:00405094 ArgList         = dword ptr -20h
.text:00405094 var_1C          = dword ptr -1Ch
.text:00405094 Code            = dword ptr  8
.text:00405094 ErrorMessage    = dword ptr  0Ch
.text:00405094 Str2            = dword ptr  10h
.text:00405094 arg_10          = dword ptr  14h
.text:00405094 arg_14          = dword ptr  18h
.text:00405094 arg_18          = byte ptr  1Ch
.text:00405094
.text:00405094                 and     eax, 64253A73h
.text:00405099                 cmp     ah, [eax]
.text:0040509B
.text:0040509B loc_40509B:                             ; DATA XREF: sub_405094:loc_4051D5↓o
.text:0040509B                 add     ds:55003A73h, ah
.text:004050A1                 push    edi
.text:004050A2                 push    esi
.text:004050A3                 push    ebx
.text:004050A4                 sub     esp, 1Ch
.text:004050A7                 mov     edx, ds:dword_407200
.text:004050AD                 mov     ebp, [esp+28h+Code]
.text:004050B1                 mov     edi, [esp+28h+ErrorMessage]
.text:004050B5                 test    edx, edx
.text:004050B7                 mov     ebx, [esp+28h+Str2]
.text:004050BB                 mov     esi, [esp+28h+arg_10]
.text:004050BF                 jz      short loc_4050D9
.text:004050C1                 cmp     ds:dword_407180, esi
.text:004050C7                 jz      loc_405200
.text:004050CD
.text:004050CD loc_4050CD:                             ; CODE XREF: sub_405094+18D↓j
.text:004050CD                 mov     ds:Str1, ebx
.text:004050D3                 mov     ds:dword_407180, esi
.text:004050D9
.text:004050D9 loc_4050D9:                             ; CODE XREF: sub_405094+2B↑j
.text:004050D9                 mov     edx, ds:_iob
.text:004050DF                 add     edx, 20h ; ' '
.text:004050E2                 mov     [esp+28h+Stream], edx ; Stream
.text:004050E5                 call    fflush
.text:004050EA                 mov     eax, ds:dword_4071C0
.text:004050EF                 test    eax, eax
.text:004050F1                 jz      loc_4051D5
.text:004050F7                 call    eax ; dword_4071C0
.text:004050F9
.text:004050F9 loc_4050F9:                             ; CODE XREF: sub_405094+164↓j
.text:004050F9                 test    ebx, ebx
.text:004050FB                 jz      short loc_40511E
.text:004050FD                 mov     [esp+28h+ArgList], ebx
.text:00405101                 mov     ebx, ds:_iob
.text:00405107                 mov     [esp+28h+var_1C], esi
.text:0040510B                 mov     [esp+28h+Format], offset sub_405094 ; Format
.text:00405113                 add     ebx, 40h ; '@'
.text:00405116                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405119                 call    fprintf
.text:0040511E
.text:0040511E loc_40511E:                             ; CODE XREF: sub_405094+67↑j
.text:0040511E                 mov     esi, ds:_iob
.text:00405124                 lea     edx, [esp+28h+arg_18]
.text:00405128                 mov     ecx, [esp+28h+arg_14]
.text:0040512C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405130                 add     esi, 40h ; '@'
.text:00405133                 mov     [esp+28h+Format], ecx ; Format
.text:00405137                 mov     [esp+28h+Stream], esi ; Stream
.text:0040513A                 call    vfprintf
.text:0040513F                 inc     ds:dword_4071D0
.text:00405145                 test    edi, edi
.text:00405147                 jnz     short loc_4051A0
.text:00405149
.text:00405149 loc_405149:                             ; CODE XREF: sub_405094+135↓j
.text:00405149                 mov     edx, ds:_iob
.text:0040514F                 lea     ecx, [edx+40h]
.text:00405152                 mov     ebx, [ecx+4]
.text:00405155                 dec     ebx
.text:00405156                 test    ebx, ebx
.text:00405158                 mov     [ecx+4], ebx
.text:0040515B                 js      short loc_405187
.text:0040515D                 mov     esi, [edx+40h]
.text:00405160                 mov     byte ptr [esi], 0Ah
.text:00405163                 inc     dword ptr [edx+40h]
.text:00405166
.text:00405166 loc_405166:                             ; CODE XREF: sub_405094+103↓j
.text:00405166                 mov     ecx, ds:_iob
.text:0040516C                 add     ecx, 40h ; '@'
.text:0040516F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405172                 call    fflush
.text:00405177                 test    ebp, ebp
.text:00405179                 jnz     loc_405226
.text:0040517F
.text:0040517F loc_40517F:                             ; CODE XREF: sub_405094+173↓j
.text:0040517F                                         ; sub_405094+187↓j
.text:0040517F                 add     esp, 1Ch
.text:00405182                 pop     ebx
.text:00405183                 pop     esi
.text:00405184                 pop     edi
.text:00405185                 pop     ebp
.text:00405186                 retn
.text:00405187 ; ---------------------------------------------------------------------------
.text:00405187
.text:00405187 loc_405187:                             ; CODE XREF: sub_405094+C7↑j
.text:00405187                 mov     [esp+28h+Format], ecx ; File
.text:0040518B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405192                 call    _flsbuf
.text:00405197                 jmp     short loc_405166
.text:00405197 ; ---------------------------------------------------------------------------
.text:00405199                 align 10h
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_405094+B3↑j
.text:004051A0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004051A3                 call    strerror
.text:004051A8                 test    eax, eax
.text:004051AA                 jz      short loc_4051CE
.text:004051AC
.text:004051AC loc_4051AC:                             ; CODE XREF: sub_405094+13F↓j
.text:004051AC                 mov     [esp+28h+ArgList], eax
.text:004051B0                 mov     edi, ds:_iob
.text:004051B6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004051BE                 add     edi, 40h ; '@'
.text:004051C1                 mov     [esp+28h+Stream], edi ; Stream
.text:004051C4                 call    fprintf
.text:004051C9                 jmp     loc_405149
.text:004051CE ; ---------------------------------------------------------------------------
.text:004051CE
.text:004051CE loc_4051CE:                             ; CODE XREF: sub_405094+116↑j
.text:004051CE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004051D3                 jmp     short loc_4051AC
.text:004051D5 ; ---------------------------------------------------------------------------
.text:004051D5
.text:004051D5 loc_4051D5:                             ; CODE XREF: sub_405094+5D↑j
.text:004051D5                 mov     [esp+28h+Format], (offset loc_40509B+1) ; Format
.text:004051DD                 mov     ecx, ds:_iob
.text:004051E3                 mov     edx, ds:dword_407190
.text:004051E9                 add     ecx, 40h ; '@'
.text:004051EC                 mov     [esp+28h+ArgList], edx
.text:004051F0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004051F3                 call    fprintf
.text:004051F8                 jmp     loc_4050F9
.text:004051F8 ; ---------------------------------------------------------------------------
.text:004051FD                 align 10h
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_405094+33↑j
.text:00405200                 mov     eax, ds:Str1
.text:00405205                 cmp     ebx, eax
.text:00405207                 jz      loc_40517F
.text:0040520D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405211                 mov     [esp+28h+Stream], eax ; Str1
.text:00405214                 call    strcmp
.text:00405219                 test    eax, eax
.text:0040521B                 jz      loc_40517F
.text:00405221                 jmp     loc_4050CD
.text:00405226 ; ---------------------------------------------------------------------------
.text:00405226
.text:00405226 loc_405226:                             ; CODE XREF: sub_405094+E5↑j
.text:00405226                 mov     [esp+28h+Stream], ebp ; Code
.text:00405229                 call    exit
.text:00405229 sub_405094      endp ; sp-analysis failed
.text:00405229
.text:00405229 ; ---------------------------------------------------------------------------
.text:0040522E                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: thunk
.text:00405230
.text:00405230 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405230 mbrtowc         proc near               ; CODE XREF: sub_403900+757↑p
.text:00405230                 jmp     ds:__imp_mbrtowc
.text:00405230 mbrtowc         endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405236                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: bp-based frame
.text:00405240
.text:00405240 sub_405240      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405240                 push    ebp
.text:00405241                 mov     ecx, offset dword_407000
.text:00405246                 cmp     ecx, offset dword_407000
.text:0040524C                 mov     ebp, esp
.text:0040524E                 jnb     short loc_405266
.text:00405250
.text:00405250 loc_405250:                             ; CODE XREF: sub_405240+24↓j
.text:00405250                 mov     edx, [ecx+4]
.text:00405253                 mov     eax, [ecx]
.text:00405255                 add     ecx, 8
.text:00405258                 add     [edx+400000h], eax
.text:0040525E                 cmp     ecx, offset dword_407000
.text:00405264                 jb      short loc_405250
.text:00405266
.text:00405266 loc_405266:                             ; CODE XREF: sub_405240+E↑j
.text:00405266                 pop     ebp
.text:00405267                 retn
.text:00405267 sub_405240      endp
.text:00405267
.text:00405267 ; ---------------------------------------------------------------------------
.text:00405268                 align 10h
.text:00405270
.text:00405270 ; =============== S U B R O U T I N E =======================================
.text:00405270
.text:00405270 ; Attributes: bp-based frame
.text:00405270
.text:00405270 sub_405270      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405270                                         ; TopLevelExceptionFilter+D7↑p
.text:00405270                 push    ebp
.text:00405271                 mov     ebp, esp
.text:00405273                 fninit
.text:00405275                 pop     ebp
.text:00405276                 retn
.text:00405276 sub_405270      endp
.text:00405276
.text:00405276 ; ---------------------------------------------------------------------------
.text:00405277                 align 10h
.text:00405280
.text:00405280 ; =============== S U B R O U T I N E =======================================
.text:00405280
.text:00405280 ; Attributes: bp-based frame
.text:00405280
.text:00405280 ; void __cdecl sub_405280()
.text:00405280 sub_405280      proc near               ; DATA XREF: .text:loc_4052C9↓o
.text:00405280                                         ; sub_405310:loc_40533E↓o
.text:00405280                 push    ebp
.text:00405281                 mov     ebp, esp
.text:00405283                 sub     esp, 8
.text:00405286                 mov     eax, off_406084
.text:0040528B                 mov     edx, [eax]
.text:0040528D                 test    edx, edx
.text:0040528F                 jnz     short loc_405295
.text:00405291
.text:00405291 loc_405291:                             ; CODE XREF: sub_405280+2C↓j
.text:00405291                 mov     esp, ebp
.text:00405293                 pop     ebp
.text:00405294                 retn
.text:00405295 ; ---------------------------------------------------------------------------
.text:00405295
.text:00405295 loc_405295:                             ; CODE XREF: sub_405280+F↑j
.text:00405295                                         ; sub_405280+2A↓j
.text:00405295                 call    dword ptr [eax]
.text:00405297                 mov     edx, off_406084
.text:0040529D                 mov     ecx, [edx+4]
.text:004052A0                 lea     eax, [edx+4]
.text:004052A3                 mov     off_406084, eax
.text:004052A8                 test    ecx, ecx
.text:004052AA                 jnz     short loc_405295
.text:004052AC                 jmp     short loc_405291
.text:004052AC sub_405280      endp
.text:004052AC
.text:004052AC ; ---------------------------------------------------------------------------
.text:004052AE                 align 10h
.text:004052B0                 push    ebp
.text:004052B1                 mov     ebp, esp
.text:004052B3                 sub     esp, 8
.text:004052B6                 mov     [ebp-4], ebx
.text:004052B9                 mov     eax, ds:dword_4055D0
.text:004052BE                 cmp     eax, 0FFFFFFFFh
.text:004052C1                 jz      short loc_4052EC
.text:004052C3
.text:004052C3 loc_4052C3:                             ; CODE XREF: .text:004052F6↓j
.text:004052C3                                         ; .text:00405309↓j
.text:004052C3                 test    eax, eax
.text:004052C5                 mov     ebx, eax
.text:004052C7                 jnz     short loc_4052E0
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: .text:004052EA↓j
.text:004052C9                 mov     dword ptr [esp], offset sub_405280
.text:004052D0                 call    sub_401040
.text:004052D5                 mov     ebx, [ebp-4]
.text:004052D8                 mov     esp, ebp
.text:004052DA                 pop     ebp
.text:004052DB                 retn
.text:004052DB ; ---------------------------------------------------------------------------
.text:004052DC                 align 10h
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: .text:004052C7↑j
.text:004052E0                                         ; .text:004052E8↓j
.text:004052E0                 call    ds:dword_4055D0[ebx*4]
.text:004052E7                 dec     ebx
.text:004052E8                 jnz     short loc_4052E0
.text:004052EA                 jmp     short loc_4052C9
.text:004052EC ; ---------------------------------------------------------------------------
.text:004052EC
.text:004052EC loc_4052EC:                             ; CODE XREF: .text:004052C1↑j
.text:004052EC                 mov     ecx, ds:dword_4055D4
.text:004052F2                 xor     eax, eax
.text:004052F4                 test    ecx, ecx
.text:004052F6                 jz      short loc_4052C3
.text:004052F8                 mov     edx, offset dword_4055D0
.text:004052FD                 lea     esi, [esi+0]
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: .text:00405307↓j
.text:00405300                 inc     eax
.text:00405301                 mov     ecx, [edx+eax*4+4]
.text:00405305                 test    ecx, ecx
.text:00405307                 jnz     short loc_405300
.text:00405309                 jmp     short loc_4052C3
.text:00405309 ; ---------------------------------------------------------------------------
.text:0040530B                 align 10h
.text:00405310
.text:00405310 ; =============== S U B R O U T I N E =======================================
.text:00405310
.text:00405310 ; Attributes: bp-based frame
.text:00405310
.text:00405310 sub_405310      proc near               ; CODE XREF: sub_401300+15↑p
.text:00405310
.text:00405310 var_8           = dword ptr -8
.text:00405310 var_4           = dword ptr -4
.text:00405310
.text:00405310                 push    ebp
.text:00405311                 mov     ebp, esp
.text:00405313                 sub     esp, 8
.text:00405316                 mov     [ebp+var_4], ebx
.text:00405319                 mov     edx, dword_406080
.text:0040531F                 test    edx, edx
.text:00405321                 jnz     short loc_40534A
.text:00405323                 mov     eax, ds:dword_4055D0
.text:00405328                 mov     edx, 1
.text:0040532D                 mov     dword_406080, edx
.text:00405333                 cmp     eax, 0FFFFFFFFh
.text:00405336                 jz      short loc_40535D
.text:00405338
.text:00405338 loc_405338:                             ; CODE XREF: sub_405310+57↓j
.text:00405338                                         ; sub_405310+69↓j
.text:00405338                 test    eax, eax
.text:0040533A                 mov     ebx, eax
.text:0040533C                 jnz     short loc_405351
.text:0040533E
.text:0040533E loc_40533E:                             ; CODE XREF: sub_405310+4B↓j
.text:0040533E                 mov     [esp+8+var_8], offset sub_405280 ; void (__cdecl *)()
.text:00405345                 call    sub_401040
.text:0040534A
.text:0040534A loc_40534A:                             ; CODE XREF: sub_405310+11↑j
.text:0040534A                 mov     ebx, [ebp+var_4]
.text:0040534D                 mov     esp, ebp
.text:0040534F                 pop     ebp
.text:00405350                 retn
.text:00405351 ; ---------------------------------------------------------------------------
.text:00405351
.text:00405351 loc_405351:                             ; CODE XREF: sub_405310+2C↑j
.text:00405351                                         ; sub_405310+49↓j
.text:00405351                 call    ds:dword_4055D0[ebx*4]
.text:00405358                 dec     ebx
.text:00405359                 jnz     short loc_405351
.text:0040535B                 jmp     short loc_40533E
.text:0040535D ; ---------------------------------------------------------------------------
.text:0040535D
.text:0040535D loc_40535D:                             ; CODE XREF: sub_405310+26↑j
.text:0040535D                 mov     ecx, ds:dword_4055D4
.text:00405363                 xor     eax, eax
.text:00405365                 test    ecx, ecx
.text:00405367                 jz      short loc_405338
.text:00405369                 mov     edx, offset dword_4055D0
.text:0040536E                 mov     esi, esi
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_405310+67↓j
.text:00405370                 inc     eax
.text:00405371                 mov     ebx, [edx+eax*4+4]
.text:00405375                 test    ebx, ebx
.text:00405377                 jnz     short loc_405370
.text:00405379                 jmp     short loc_405338
.text:00405379 sub_405310      endp
.text:00405379
.text:00405379 ; ---------------------------------------------------------------------------
.text:0040537B                 align 10h
.text:00405380
.text:00405380 ; =============== S U B R O U T I N E =======================================
.text:00405380
.text:00405380 ; Attributes: info_from_lumina
.text:00405380
.text:00405380 ; void *__cdecl _alloca(size_t Size)
.text:00405380 __alloca        proc near               ; CODE XREF: sub_401300+10↑p
.text:00405380                 push    ecx
.text:00405381                 mov     ecx, esp
.text:00405383                 add     ecx, 8
.text:00405386
.text:00405386 loc_405386:                             ; CODE XREF: __alloca+1B↓j
.text:00405386                 cmp     eax, 1000h
.text:0040538B                 jb      short loc_40539D
.text:0040538D                 sub     ecx, 1000h
.text:00405393                 or      dword ptr [ecx], 0
.text:00405396                 sub     eax, 1000h
.text:0040539B                 jmp     short loc_405386
.text:0040539D ; ---------------------------------------------------------------------------
.text:0040539D
.text:0040539D loc_40539D:                             ; CODE XREF: __alloca+B↑j
.text:0040539D                 sub     ecx, eax
.text:0040539F                 or      dword ptr [ecx], 0
.text:004053A2                 mov     eax, esp
.text:004053A4                 mov     esp, ecx
.text:004053A6                 mov     ecx, [eax]
.text:004053A8                 mov     eax, [eax+4]
.text:004053AB                 jmp     eax
.text:004053AB __alloca        endp
.text:004053AB
.text:004053AB ; ---------------------------------------------------------------------------
.text:004053AD                 align 10h
.text:004053B0                 jmp     ds:__set_app_type
.text:004053B0 ; ---------------------------------------------------------------------------
.text:004053B6                 align 10h
.text:004053C0
.text:004053C0 ; =============== S U B R O U T I N E =======================================
.text:004053C0
.text:004053C0 ; Attributes: thunk
.text:004053C0
.text:004053C0 ; void __cdecl cexit()
.text:004053C0 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:004053C0                 jmp     ds:__imp__cexit
.text:004053C0 _cexit          endp
.text:004053C0
.text:004053C0 ; ---------------------------------------------------------------------------
.text:004053C6                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0 ; Attributes: thunk
.text:004053D0
.text:004053D0 ; char ***__cdecl _p__environ()
.text:004053D0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004053D0                 jmp     ds:__imp___p__environ
.text:004053D0 __p__environ    endp
.text:004053D0
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D6                 align 10h
.text:004053E0
.text:004053E0 ; =============== S U B R O U T I N E =======================================
.text:004053E0
.text:004053E0 ; Attributes: thunk
.text:004053E0
.text:004053E0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004053E0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004053E0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004053E0
.text:004053E0 Signal          = dword ptr  4
.text:004053E0 Function        = dword ptr  8
.text:004053E0
.text:004053E0                 jmp     ds:__imp_signal
.text:004053E0 signal          endp
.text:004053E0
.text:004053E0 ; ---------------------------------------------------------------------------
.text:004053E6                 align 10h
.text:004053F0
.text:004053F0 ; =============== S U B R O U T I N E =======================================
.text:004053F0
.text:004053F0 ; Attributes: thunk
.text:004053F0
.text:004053F0 ; int *__cdecl _p__fmode()
.text:004053F0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004053F0                 jmp     ds:__imp___p__fmode
.text:004053F0 __p__fmode      endp
.text:004053F0
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F6                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400 ; Attributes: thunk
.text:00405400
.text:00405400 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405400 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405400                                         ; sub_401080+90↑p ...
.text:00405400
.text:00405400 FileHandle      = dword ptr  4
.text:00405400 Mode            = dword ptr  8
.text:00405400
.text:00405400                 jmp     ds:__imp__setmode
.text:00405400 _setmode        endp
.text:00405400
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405406                 align 10h
.text:00405410
.text:00405410 ; =============== S U B R O U T I N E =======================================
.text:00405410
.text:00405410 ; Attributes: thunk
.text:00405410
.text:00405410 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405410                 jmp     ds:__imp___getmainargs
.text:00405410 __getmainargs   endp
.text:00405410
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405416                 align 10h
.text:00405420
.text:00405420 ; =============== S U B R O U T I N E =======================================
.text:00405420
.text:00405420 ; Attributes: thunk
.text:00405420
.text:00405420 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405420 setlocale       proc near               ; CODE XREF: sub_401300+6B↑p
.text:00405420
.text:00405420 Category        = dword ptr  4
.text:00405420 Locale          = dword ptr  8
.text:00405420
.text:00405420                 jmp     ds:__imp_setlocale
.text:00405420 setlocale       endp
.text:00405420
.text:00405420 ; ---------------------------------------------------------------------------
.text:00405426                 align 10h
.text:00405430
.text:00405430 ; =============== S U B R O U T I N E =======================================
.text:00405430
.text:00405430 ; Attributes: thunk
.text:00405430
.text:00405430 ; char *__cdecl getenv(const char *VarName)
.text:00405430 getenv          proc near               ; CODE XREF: sub_401300+25↑p
.text:00405430                                         ; sub_402460+B57↑p
.text:00405430
.text:00405430 VarName         = dword ptr  4
.text:00405430
.text:00405430                 jmp     ds:__imp_getenv
.text:00405430 getenv          endp
.text:00405430
.text:00405430 ; ---------------------------------------------------------------------------
.text:00405436                 align 10h
.text:00405440
.text:00405440 ; =============== S U B R O U T I N E =======================================
.text:00405440
.text:00405440 ; Attributes: noreturn thunk
.text:00405440
.text:00405440 ; void __cdecl __noreturn exit(int Code)
.text:00405440 exit            proc near               ; CODE XREF: sub_401300+186↑p
.text:00405440                                         ; sub_401E80+3B↑p ...
.text:00405440
.text:00405440 Code            = dword ptr  4
.text:00405440
.text:00405440                 jmp     ds:__imp_exit
.text:00405440 exit            endp
.text:00405440
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405446                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450 ; Attributes: thunk
.text:00405450
.text:00405450 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405450 fputs           proc near               ; CODE XREF: sub_401300+685↑p
.text:00405450                                         ; sub_401E80+7C↑p ...
.text:00405450
.text:00405450 Buffer          = dword ptr  4
.text:00405450 Stream          = dword ptr  8
.text:00405450
.text:00405450                 jmp     ds:__imp_fputs
.text:00405450 fputs           endp
.text:00405450
.text:00405450 ; ---------------------------------------------------------------------------
.text:00405456                 align 10h
.text:00405460
.text:00405460 ; =============== S U B R O U T I N E =======================================
.text:00405460
.text:00405460 ; Attributes: thunk
.text:00405460
.text:00405460 ; int printf(const char *const Format, ...)
.text:00405460 printf          proc near               ; CODE XREF: sub_401E80+5A↑p
.text:00405460                                         ; sub_401E80+143↑p
.text:00405460
.text:00405460 Format          = dword ptr  4
.text:00405460
.text:00405460                 jmp     ds:__imp_printf
.text:00405460 printf          endp
.text:00405460
.text:00405460 ; ---------------------------------------------------------------------------
.text:00405466                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470 ; Attributes: thunk
.text:00405470
.text:00405470 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405470 fprintf         proc near               ; CODE XREF: sub_401E80+33↑p
.text:00405470                                         ; sub_402460+33B↑p ...
.text:00405470
.text:00405470 Stream          = dword ptr  4
.text:00405470 Format          = dword ptr  8
.text:00405470
.text:00405470                 jmp     ds:__imp_fprintf
.text:00405470 fprintf         endp
.text:00405470
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405476                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: thunk
.text:00405480
.text:00405480 ; int __cdecl isctype(int C, int Type)
.text:00405480 _isctype        proc near               ; CODE XREF: sub_401300+40D↑p
.text:00405480                                         ; sub_401300+4F4↑p ...
.text:00405480
.text:00405480 C               = dword ptr  4
.text:00405480 Type            = dword ptr  8
.text:00405480
.text:00405480                 jmp     ds:__imp__isctype
.text:00405480 _isctype        endp
.text:00405480
.text:00405480 ; ---------------------------------------------------------------------------
.text:00405486                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: thunk
.text:00405490
.text:00405490 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405490 _flsbuf         proc near               ; CODE XREF: sub_401300+19F↑p
.text:00405490                                         ; sub_401300+1BA↑p ...
.text:00405490
.text:00405490 File            = dword ptr  8
.text:00405490
.text:00405490                 jmp     ds:__imp__flsbuf
.text:00405490 _flsbuf         endp
.text:00405490
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405496                 align 10h
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0 ; Attributes: thunk
.text:004054A0
.text:004054A0 ; int *__cdecl errno()
.text:004054A0 _errno          proc near               ; CODE XREF: sub_402130:loc_40216D↑p
.text:004054A0                                         ; .text:0040436B↑p ...
.text:004054A0                 jmp     ds:__imp__errno
.text:004054A0 _errno          endp
.text:004054A0
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A6                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0 ; Attributes: thunk
.text:004054B0
.text:004054B0 ; int __cdecl fclose(FILE *Stream)
.text:004054B0 fclose          proc near               ; CODE XREF: sub_402130+27↑p
.text:004054B0
.text:004054B0 Stream          = dword ptr  4
.text:004054B0
.text:004054B0                 jmp     ds:__imp_fclose
.text:004054B0 fclose          endp
.text:004054B0
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B6                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: thunk
.text:004054C0
.text:004054C0 ; size_t __cdecl strlen(const char *Str)
.text:004054C0 strlen          proc near               ; CODE XREF: sub_402460+2A9↑p
.text:004054C0                                         ; sub_402460+346↑p ...
.text:004054C0
.text:004054C0 Str             = dword ptr  4
.text:004054C0
.text:004054C0                 jmp     ds:__imp_strlen
.text:004054C0 strlen          endp
.text:004054C0
.text:004054C0 ; ---------------------------------------------------------------------------
.text:004054C6                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0 ; Attributes: thunk
.text:004054D0
.text:004054D0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004054D0 strncmp         proc near               ; CODE XREF: sub_402460+23F↑p
.text:004054D0                                         ; sub_402460+699↑p
.text:004054D0
.text:004054D0 Str1            = dword ptr  4
.text:004054D0 Str2            = dword ptr  8
.text:004054D0 MaxCount        = dword ptr  0Ch
.text:004054D0
.text:004054D0                 jmp     ds:__imp_strncmp
.text:004054D0 strncmp         endp
.text:004054D0
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0 ; Attributes: thunk
.text:004054E0
.text:004054E0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004054E0 strchr          proc near               ; CODE XREF: sub_402460+469↑p
.text:004054E0                                         ; sub_402460+53A↑p ...
.text:004054E0
.text:004054E0 Str             = dword ptr  4
.text:004054E0 Val             = dword ptr  8
.text:004054E0
.text:004054E0                 jmp     ds:__imp_strchr
.text:004054E0 strchr          endp
.text:004054E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0 ; Attributes: thunk
.text:004054F0
.text:004054F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004054F0 vfprintf        proc near               ; CODE XREF: sub_403520+C1↑p
.text:004054F0                                         ; sub_404F90+49↑p ...
.text:004054F0
.text:004054F0 Stream          = dword ptr  4
.text:004054F0 Format          = dword ptr  8
.text:004054F0 ArgList         = dword ptr  0Ch
.text:004054F0
.text:004054F0                 jmp     ds:__imp_vfprintf
.text:004054F0 vfprintf        endp
.text:004054F0
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500 ; Attributes: noreturn thunk
.text:00405500
.text:00405500 ; void __cdecl __noreturn abort()
.text:00405500 abort           proc near               ; CODE XREF: sub_403520:loc_4035BC↑p
.text:00405500                                         ; sub_404A40:loc_404BFA↑p ...
.text:00405500                 jmp     ds:__imp_abort
.text:00405500 abort           endp
.text:00405500
.text:00405500 ; ---------------------------------------------------------------------------
.text:00405506                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510 ; Attributes: thunk
.text:00405510
.text:00405510 ; void __cdecl free(void *Block)
.text:00405510 free            proc near               ; CODE XREF: sub_404A40+112↑p
.text:00405510
.text:00405510 Block           = dword ptr  4
.text:00405510
.text:00405510                 jmp     ds:__imp_free
.text:00405510 free            endp
.text:00405510
.text:00405510 ; ---------------------------------------------------------------------------
.text:00405516                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: thunk
.text:00405520
.text:00405520 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405520 iswctype        proc near               ; CODE XREF: sub_403900+78B↑p
.text:00405520
.text:00405520 C               = word ptr  4
.text:00405520 Type            = word ptr  8
.text:00405520
.text:00405520                 jmp     ds:__imp_iswctype
.text:00405520 iswctype        endp
.text:00405520
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405526                 align 10h
.text:00405530
.text:00405530 ; =============== S U B R O U T I N E =======================================
.text:00405530
.text:00405530 ; Attributes: thunk
.text:00405530
.text:00405530 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405530 memcpy          proc near               ; CODE XREF: .text:00404DF8↑p
.text:00405530                                         ; .text:00404E41↑p
.text:00405530
.text:00405530 Src             = dword ptr  8
.text:00405530 Size            = dword ptr  0Ch
.text:00405530
.text:00405530                 jmp     ds:__imp_memcpy
.text:00405530 memcpy          endp
.text:00405530
.text:00405530 ; ---------------------------------------------------------------------------
.text:00405536                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540 ; Attributes: thunk
.text:00405540
.text:00405540 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405540 memset          proc near               ; CODE XREF: .text:00404D76↑p
.text:00405540
.text:00405540 Val             = dword ptr  8
.text:00405540 Size            = dword ptr  0Ch
.text:00405540
.text:00405540                 jmp     ds:__imp_memset
.text:00405540 memset          endp
.text:00405540
.text:00405540 ; ---------------------------------------------------------------------------
.text:00405546                 align 10h
.text:00405550
.text:00405550 ; =============== S U B R O U T I N E =======================================
.text:00405550
.text:00405550 ; Attributes: thunk
.text:00405550
.text:00405550 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405550 calloc          proc near               ; CODE XREF: .text:00404DB3↑p
.text:00405550
.text:00405550 Count           = dword ptr  4
.text:00405550 Size            = dword ptr  8
.text:00405550
.text:00405550                 jmp     ds:__imp_calloc
.text:00405550 calloc          endp
.text:00405550
.text:00405550 ; ---------------------------------------------------------------------------
.text:00405556                 align 10h
.text:00405560
.text:00405560 ; =============== S U B R O U T I N E =======================================
.text:00405560
.text:00405560 ; Attributes: thunk
.text:00405560
.text:00405560 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405560 realloc         proc near               ; CODE XREF: .text:00404CB0↑p
.text:00405560                                         ; sub_404CE0+16↑p ...
.text:00405560
.text:00405560 Block           = dword ptr  4
.text:00405560 Size            = dword ptr  8
.text:00405560
.text:00405560                 jmp     ds:__imp_realloc
.text:00405560 realloc         endp
.text:00405560
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405566                 align 10h
.text:00405570
.text:00405570 ; =============== S U B R O U T I N E =======================================
.text:00405570
.text:00405570 ; Attributes: thunk
.text:00405570
.text:00405570 ; void *__cdecl malloc(size_t Size)
.text:00405570 malloc          proc near               ; CODE XREF: sub_404C10+24↑p
.text:00405570                                         ; sub_404C50+E↑p ...
.text:00405570
.text:00405570 Size            = dword ptr  4
.text:00405570
.text:00405570                 jmp     ds:__imp_malloc
.text:00405570 malloc          endp
.text:00405570
.text:00405570 ; ---------------------------------------------------------------------------
.text:00405576                 align 10h
.text:00405580
.text:00405580 ; =============== S U B R O U T I N E =======================================
.text:00405580
.text:00405580 ; Attributes: thunk
.text:00405580
.text:00405580 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405580 strcmp          proc near               ; CODE XREF: sub_405094+180↑p
.text:00405580
.text:00405580 Str1            = dword ptr  4
.text:00405580 Str2            = dword ptr  8
.text:00405580
.text:00405580                 jmp     ds:__imp_strcmp
.text:00405580 strcmp          endp
.text:00405580
.text:00405580 ; ---------------------------------------------------------------------------
.text:00405586                 align 10h
.text:00405590
.text:00405590 ; =============== S U B R O U T I N E =======================================
.text:00405590
.text:00405590 ; Attributes: thunk
.text:00405590
.text:00405590 ; int __cdecl fflush(FILE *Stream)
.text:00405590 fflush          proc near               ; CODE XREF: sub_404F90+19↑p
.text:00405590                                         ; sub_404F90+81↑p ...
.text:00405590
.text:00405590 Stream          = dword ptr  4
.text:00405590
.text:00405590                 jmp     ds:__imp_fflush
.text:00405590 fflush          endp
.text:00405590
.text:00405590 ; ---------------------------------------------------------------------------
.text:00405596                 align 10h
.text:004055A0
.text:004055A0 ; =============== S U B R O U T I N E =======================================
.text:004055A0
.text:004055A0 ; Attributes: thunk
.text:004055A0
.text:004055A0 ; char *__cdecl strerror(int ErrorMessage)
.text:004055A0 strerror        proc near               ; CODE XREF: sub_404F90+A5↑p
.text:004055A0                                         ; sub_405094+10F↑p
.text:004055A0
.text:004055A0 ErrorMessage    = dword ptr  4
.text:004055A0
.text:004055A0                 jmp     ds:__imp_strerror
.text:004055A0 strerror        endp
.text:004055A0
.text:004055A0 ; ---------------------------------------------------------------------------
.text:004055A6                 align 10h
.text:004055B0
.text:004055B0 ; =============== S U B R O U T I N E =======================================
.text:004055B0
.text:004055B0 ; Attributes: thunk
.text:004055B0
.text:004055B0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004055B0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004055B0
.text:004055B0 lpTopLevelExceptionFilter= dword ptr  4
.text:004055B0
.text:004055B0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004055B0 SetUnhandledExceptionFilter endp
.text:004055B0
.text:004055B0 ; ---------------------------------------------------------------------------
.text:004055B6                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0 ; Attributes: noreturn thunk
.text:004055C0
.text:004055C0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004055C0 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:004055C0
.text:004055C0 uExitCode       = dword ptr  4
.text:004055C0
.text:004055C0                 jmp     ds:__imp_ExitProcess
.text:004055C0 ExitProcess     endp
.text:004055C0
.text:004055C0 ; ---------------------------------------------------------------------------
.text:004055C6                 align 10h
.text:004055D0 dword_4055D0    dd 0FFFFFFFFh           ; DATA XREF: .text:004052B9↑r
.text:004055D0                                         ; .text:loc_4052E0↑r ...
.text:004055D4 dword_4055D4    dd 0                    ; DATA XREF: .text:loc_4052EC↑r
.text:004055D4                                         ; sub_405310:loc_40535D↑r
.text:004055D8                 dd 0FFFFFFFFh
.text:004055DC dword_4055DC    dd 9 dup(0)             ; DATA XREF: .data:off_406084↓o
.text:00405600                 dd 280h dup(?)
.text:00405600 _text           ends
.text:00405600
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004A00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_402040+27↑w
.data:00406010                                         ; sub_402FF0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402040+E↑r
.data:00406014                                         ; sub_402040+14↑w ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402FF0+7D↑w
.data:00406018                                         ; .text:004030FD↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403520+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_402130+6D↑r
.data:00406030                                         ; sub_402130+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404A40+22↑r
.data:00406040                                         ; sub_404A40+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404A40+3F↑o
.data:00406044                                         ; sub_404A40+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407040    ; DATA XREF: sub_404A40+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404A40+39↑r
.data:0040604C                                         ; sub_404A40+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405310+9↑r
.data:00406080                                         ; sub_405310+1D↑w
.data:00406084 off_406084      dd offset dword_4055DC  ; DATA XREF: sub_405280+6↑r
.data:00406084                                         ; sub_405280+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 ; char *dword_407000
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: .text:00402104↑w
.bss:00407000                                         ; sub_402130+58↑r ...
.bss:00407004                 align 10h
.bss:00407010 dword_407010    dd ?                    ; DATA XREF: sub_402FF0+9↑o
.bss:00407010                                         ; sub_402FF0+17↑w ...
.bss:00407014 dword_407014    dd ?                    ; DATA XREF: sub_402FF0+21↑w
.bss:00407014                                         ; .text:004030A9↑w
.bss:00407018 dword_407018    dd ?                    ; DATA XREF: sub_402FF0+77↑r
.bss:00407018                                         ; .text:004030F7↑r
.bss:0040701C dword_40701C    dd ?                    ; DATA XREF: sub_402FF0+6B↑r
.bss:0040701C                                         ; .text:004030EB↑r
.bss:00407020                 align 40h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404A40+100↑o
.bss:00407040                                         ; .data:off_406048↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_4043D1↑o
.bss:00407140                                         ; .text:loc_4043F0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_404470↑o
.bss:00407144                                         ; .text:004048F8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:004048F2↑r
.bss:00407148                                         ; sub_4049A0+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:004048E6↑r
.bss:0040714C                                         ; sub_4049A0+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00404902↑r
.bss:00407150                                         ; sub_4049A0+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00404912↑r
.bss:00407154                                         ; sub_4049A0+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:0040492F↑r
.bss:00407158                                         ; sub_4049A0+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404925↑r
.bss:0040715C                                         ; sub_4049A0+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00404908↑r
.bss:00407160                                         ; sub_4049A0+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_405094:loc_4050CD↑w
.bss:00407170                                         ; sub_405094:loc_405200↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_405094+2D↑r
.bss:00407180                                         ; sub_405094+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_401300+65↑w
.bss:00407190                                         ; sub_401E80+1F↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_402FF0+71↑w
.bss:004071B0                                         ; .text:004030F1↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_405094+63↑p
.bss:004071C0                                         ; DATA XREF: sub_404F90+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_404F90+4E↑w
.bss:004071D0                                         ; sub_405094+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_405094+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000524 (   1316.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004C00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408134 ;
.idata:00408134 ; Imports from libintl3.dll
.idata:00408134 ;
.idata:00408134                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408134                                         ; CODE XREF: sub_401300+7F↑p
.idata:00408134                                         ; DATA XREF: sub_401300+7F↑r ...
.idata:00408138                 extrn libintl_gettext:dword
.idata:00408138                                         ; CODE XREF: sub_401E80+13↑p
.idata:00408138                                         ; sub_401E80+47↑p ...
.idata:0040813C                 extrn libintl_textdomain:dword
.idata:0040813C                                         ; CODE XREF: sub_401300+8C↑p
.idata:0040813C                                         ; DATA XREF: sub_401300+8C↑r ...
.idata:00408140
.idata:00408148 ;
.idata:00408148 ; Imports from KERNEL32.dll
.idata:00408148 ;
.idata:00408148 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408148                 extrn __imp_ExitProcess:dword
.idata:00408148                                         ; DATA XREF: ExitProcess↑r
.idata:0040814C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040814C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040814C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408150
.idata:00408158 ;
.idata:00408158 ; Imports from MSVCP60.DLL
.idata:00408158 ;
.idata:00408158 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408158                 extrn __imp_mbrtowc:dword
.idata:00408158                                         ; DATA XREF: mbrtowc↑r
.idata:0040815C
.idata:00408164 ;
.idata:00408164 ; Imports from msvcrt.dll
.idata:00408164 ;
.idata:00408164                 extrn __imp___getmainargs:dword
.idata:00408164                                         ; DATA XREF: __getmainargs↑r
.idata:00408168 ; int _mb_cur_max
.idata:00408168                 extrn __mb_cur_max:dword
.idata:00408168                                         ; DATA XREF: sub_401300+3ED↑r
.idata:00408168                                         ; sub_401300+4D4↑r ...
.idata:0040816C ; char ***(__cdecl *__p__environ)()
.idata:0040816C                 extrn __imp___p__environ:dword
.idata:0040816C                                         ; DATA XREF: __p__environ↑r
.idata:00408170 ; int *(__cdecl *__p__fmode)()
.idata:00408170                 extrn __imp___p__fmode:dword
.idata:00408170                                         ; DATA XREF: __p__fmode↑r
.idata:00408174 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408174                 extrn __set_app_type:dword
.idata:00408174                                         ; CODE XREF: start+D↑p
.idata:00408174                                         ; .text:0040102D↑p
.idata:00408174                                         ; DATA XREF: ...
.idata:00408178 ; void (__cdecl *_cexit)()
.idata:00408178                 extrn __imp__cexit:dword
.idata:00408178                                         ; DATA XREF: _cexit↑r
.idata:0040817C ; int *(__cdecl *_errno)()
.idata:0040817C                 extrn __imp__errno:dword
.idata:0040817C                                         ; DATA XREF: _errno↑r
.idata:00408180 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408180                 extrn __imp__flsbuf:dword
.idata:00408180                                         ; DATA XREF: _flsbuf↑r
.idata:00408184 ; FILE iob[]
.idata:00408184                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408184                                         ; sub_401080+75↑r ...
.idata:00408188 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00408188                 extrn __imp__isctype:dword
.idata:00408188                                         ; DATA XREF: _isctype↑r
.idata:0040818C ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040818C                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040818C                                         ; DATA XREF: .text:0040106C↑r
.idata:00408190 ; const unsigned __int16 *pctype
.idata:00408190                 extrn _pctype:dword     ; DATA XREF: sub_401300:loc_4018F2↑r
.idata:00408190                                         ; sub_401300:loc_401944↑r ...
.idata:00408194 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00408194                 extrn __imp__setmode:dword
.idata:00408194                                         ; DATA XREF: _setmode↑r
.idata:00408198 ; void (__cdecl __noreturn *abort)()
.idata:00408198                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040819C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040819C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040819C                                         ; DATA XREF: sub_401040+C↑r
.idata:004081A0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081A0                 extrn __imp_calloc:dword
.idata:004081A0                                         ; DATA XREF: calloc↑r
.idata:004081A4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081A4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081A8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081A8                 extrn __imp_fclose:dword
.idata:004081A8                                         ; DATA XREF: fclose↑r
.idata:004081AC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081AC                 extrn __imp_fflush:dword
.idata:004081AC                                         ; DATA XREF: fflush↑r
.idata:004081B0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081B0                 extrn __imp_fprintf:dword
.idata:004081B0                                         ; DATA XREF: fprintf↑r
.idata:004081B4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081B4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081B8 ; void (__cdecl *free)(void *Block)
.idata:004081B8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081BC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081BC                 extrn __imp_getenv:dword
.idata:004081BC                                         ; DATA XREF: getenv↑r
.idata:004081C0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081C0                 extrn __imp_iswctype:dword
.idata:004081C0                                         ; DATA XREF: iswctype↑r
.idata:004081C4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081C4                 extrn __imp_malloc:dword
.idata:004081C4                                         ; DATA XREF: malloc↑r
.idata:004081C8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081C8                 extrn __imp_memcpy:dword
.idata:004081C8                                         ; DATA XREF: memcpy↑r
.idata:004081CC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081CC                 extrn __imp_memset:dword
.idata:004081CC                                         ; DATA XREF: memset↑r
.idata:004081D0 ; int (*printf)(const char *const Format, ...)
.idata:004081D0                 extrn __imp_printf:dword
.idata:004081D0                                         ; DATA XREF: printf↑r
.idata:004081D4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081D4                 extrn __imp_realloc:dword
.idata:004081D4                                         ; DATA XREF: realloc↑r
.idata:004081D8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081D8                 extrn __imp_setlocale:dword
.idata:004081D8                                         ; DATA XREF: setlocale↑r
.idata:004081DC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081DC                 extrn __imp_signal:dword
.idata:004081DC                                         ; DATA XREF: signal↑r
.idata:004081E0 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004081E0                 extrn __imp_strchr:dword
.idata:004081E0                                         ; DATA XREF: strchr↑r
.idata:004081E4 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004081E4                 extrn __imp_strcmp:dword
.idata:004081E4                                         ; DATA XREF: strcmp↑r
.idata:004081E8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004081E8                 extrn __imp_strerror:dword
.idata:004081E8                                         ; DATA XREF: strerror↑r
.idata:004081EC ; size_t (__cdecl *strlen)(const char *Str)
.idata:004081EC                 extrn __imp_strlen:dword
.idata:004081EC                                         ; DATA XREF: strlen↑r
.idata:004081F0 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004081F0                 extrn __imp_strncmp:dword
.idata:004081F0                                         ; DATA XREF: strncmp↑r
.idata:004081F4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004081F4                 extrn __imp_vfprintf:dword
.idata:004081F4                                         ; DATA XREF: vfprintf↑r
.idata:004081F8
.idata:004081F8
.idata:004081F8
.idata:004081F8                 end start
