.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : DC93A384D2306F774A9D4FE6357EBCCD335CF1F598D78275EEAC82E043F0AD55
.text:00401000 ; Input MD5    : 959312470E74C3B2220E74FF181ABECE
.text:00401000 ; Input CRC32  : 23562B9E
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/uniq.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A263 (Wed Apr 20 18:41:39 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000062A0 (  25248.)
.text:00401000 ; Section size in file          : 00006400 (  25600.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401AF0+99↓p
.text:00401040                                         ; .text:00406F10↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_406EB0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_408000
.text:004010A2                 mov     edx, dword_408060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_408004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_408080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_408080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_406E80
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_408000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_408004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401AF0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_406EB0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aNone           db 'none',0             ; DATA XREF: .text:off_401298↓o
.text:00401285 aPrepend        db 'prepend',0          ; DATA XREF: .text:0040129C↓o
.text:0040128D aSeparate       db 'separate',0         ; DATA XREF: .text:004012A0↓o
.text:00401296                 align 4
.text:00401298 off_401298      dd offset aNone         ; DATA XREF: sub_401AF0+19A↓o
.text:00401298                                         ; "none"
.text:0040129C                 dd offset aPrepend      ; "prepend"
.text:004012A0                 dd offset aSeparate     ; "separate"
.text:004012A4                 align 8
.text:004012A8 dword_4012A8    dd 0                    ; DATA XREF: sub_401AF0+18E↓o
.text:004012A8                                         ; sub_401AF0+1AE↓r
.text:004012AC                 dd 1, 2
.text:004012B4 aCount          db 'count',0            ; DATA XREF: .text:off_401320↓o
.text:004012BA aRepeated       db 'repeated',0         ; DATA XREF: .text:00401330↓o
.text:004012C3 aAllRepeated_0  db 'all-repeated',0
.text:004012D0 aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .text:00401350↓o
.text:004012DC aUnique         db 'unique',0           ; DATA XREF: .text:00401360↓o
.text:004012E3 aSkipFields     db 'skip-fields',0      ; DATA XREF: .text:00401370↓o
.text:004012EF aSkipChars      db 'skip-chars',0       ; DATA XREF: .text:00401380↓o
.text:004012FA aCheckChars     db 'check-chars',0      ; DATA XREF: .text:00401390↓o
.text:00401306 aHelp           db 'help',0             ; DATA XREF: .text:004013A0↓o
.text:0040130B aVersion        db 'version',0          ; DATA XREF: .text:004013B0↓o
.text:00401313                 align 10h
.text:00401320 off_401320      dd offset aCount        ; DATA XREF: sub_401AF0+102↓o
.text:00401320                                         ; "count"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 63h
.text:00401330                 dd offset aRepeated     ; "repeated"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 64h
.text:00401340 ; ---------------------------------------------------------------------------
.text:00401340                 retn
.text:00401340 ; ---------------------------------------------------------------------------
.text:00401341                 db 12h, 40h, 0
.text:00401344                 dd 2, 0
.text:0040134C                 dd 44h
.text:00401350                 dd offset aIgnoreCase   ; "ignore-case"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 69h
.text:00401360                 dd offset aUnique       ; "unique"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 75h
.text:00401370                 dd offset aSkipFields   ; "skip-fields"
.text:00401374                 dd 1, 0
.text:0040137C                 dd 66h
.text:00401380                 dd offset aSkipChars    ; "skip-chars"
.text:00401384                 dd 1, 0
.text:0040138C                 dd 73h
.text:00401390                 dd offset aCheckChars   ; "check-chars"
.text:00401394                 dd 1, 0
.text:0040139C                 dd 77h
.text:004013A0                 dd offset aHelp         ; "help"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 0FFFFFF7Eh
.text:004013B0                 dd offset aVersion      ; "version"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013D0 ; const char VarName[]
.text:004013D0 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401AF0+1D↓o
.text:004013E0 asc_4013E0      db '-',0                ; DATA XREF: sub_401AF0+29↓o
.text:004013E0                                         ; sub_401AF0+32↓o ...
.text:004013E2 ; const char Str
.text:004013E2 Str             db 0                    ; DATA XREF: sub_401AF0+4B↓o
.text:004013E2                                         ; sub_401AF0:loc_401F61↓o ...
.text:004013E3                 align 20h
.text:00401400 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401400                                         ; DATA XREF: sub_401AF0+5F↓o
.text:00401423 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401AF0+67↓o
.text:00401423                                         ; sub_401AF0+74↓o
.text:0040142D ; const char a0123456789dcdf[]
.text:0040142D a0123456789dcdf db '-0123456789Dcdf:is:uw:',0
.text:0040142D                                         ; DATA XREF: sub_401AF0+10A↓o
.text:00401444 ; const char aAllRepeated[]
.text:00401444 aAllRepeated    db '--all-repeated',0   ; DATA XREF: sub_401AF0+1A2↓o
.text:00401453                 align 10h
.text:00401460 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401460                                         ; DATA XREF: sub_401AF0:loc_401CB0↓o
.text:00401460                                         ; sub_402250+C↓o
.text:00401487                 align 20h
.text:004014A0 aInvalidNumberO_0 db 'invalid number of fields to skip',0
.text:004014A0                                         ; DATA XREF: sub_401AF0:loc_401D06↓o
.text:004014A0                                         ; sub_401AF0:loc_402009↓o
.text:004014C1 ; const char aS_5[]
.text:004014C1 aS_5            db '%s',0               ; DATA XREF: sub_401AF0+223↓o
.text:004014C1                                         ; sub_402410+7D1↓o ...
.text:004014C4                 align 20h
.text:004014E0 aUsageSOptionIn db 'Usage: %s [OPTION]... [INPUT [OUTPUT]]',0Ah,0
.text:004014E0                                         ; DATA XREF: sub_401AF0+262↓o
.text:004014E0                                         ; sub_402250:loc_402290↓o
.text:00401508                 align 20h
.text:00401520 aDiscardAllButO db 'Discard all but one of successive identical lines from INPUT (or',0Ah
.text:00401520                                         ; DATA XREF: sub_401AF0+281↓o
.text:00401520                                         ; sub_402250+5F↓o
.text:00401520                 db 'standard input), writing to OUTPUT (or standard output).',0Ah
.text:00401520                 db 0Ah,0
.text:0040159C                 align 10h
.text:004015A0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004015A0                                         ; DATA XREF: sub_401AF0+2A3↓o
.text:004015A0                                         ; sub_402250+81↓o
.text:004015A0                 db 'ns too.',0Ah,0
.text:004015EA                 align 20h
.text:00401600 aCCountPrefixLi db '  -c, --count           prefix lines by the number of occurrences'
.text:00401600                                         ; DATA XREF: sub_401AF0+2C5↓o
.text:00401600                                         ; sub_402250+A3↓o
.text:00401600                 db 0Ah
.text:00401600                 db '  -d, --repeated        only print duplicate lines',0Ah,0
.text:00401676                 align 10h
.text:00401680 aDAllRepeatedDe db '  -D, --all-repeated[=delimit-method] print all duplicate lines',0Ah
.text:00401680                                         ; DATA XREF: sub_401AF0+2E7↓o
.text:00401680                                         ; sub_402250+C5↓o
.text:00401680                 db '                        delimit-method={none(default),prepend,sep'
.text:00401680                 db 'arate}',0Ah
.text:00401680                 db '                        Delimiting is done with blank lines.',0Ah
.text:00401680                 db '  -f, --skip-fields=N   avoid comparing the first N fields',0Ah
.text:00401680                 db '  -i, --ignore-case     ignore differences in case when comparing'
.text:00401680                 db 0Ah
.text:00401680                 db '  -s, --skip-chars=N    avoid comparing the first N characters',0Ah
.text:00401680                 db '  -u, --unique          only print unique lines',0Ah,0
.text:00401832                 align 10h
.text:00401840 aWCheckCharsNCo db '  -w, --check-chars=N   compare no more than N characters in line'
.text:00401840                                         ; DATA XREF: sub_401AF0+309↓o
.text:00401840                                         ; sub_402250+E7↓o
.text:00401840                 db 's',0Ah,0
.text:00401884                 align 20h
.text:004018A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401AF0+32B↓o
.text:004018A0                                         ; sub_402250+109↓o
.text:004018CD                 align 20h
.text:004018E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401AF0+34D↓o
.text:004018E0                                         ; sub_402250+12B↓o
.text:00401916                 align 10h
.text:00401920 aAFieldIsARunOf db 0Ah                  ; DATA XREF: sub_401AF0+36F↓o
.text:00401920                                         ; sub_402250+14D↓o
.text:00401920                 db 'A field is a run of whitespace, then non-whitespace characters.',0Ah
.text:00401920                 db 'Fields are skipped before chars.',0Ah,0
.text:00401983 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401AF0+391↓o
.text:00401983                                         ; sub_402250+16F↓o
.text:00401983                 db 'Report bugs to <%s>.',0Ah,0
.text:0040199A aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040199A                                         ; DATA XREF: sub_401AF0+39E↓o
.text:0040199A                                         ; sub_402250+17C↓o
.text:004019B0 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401AF0+3C8↓o
.text:004019C0 aRichardStallma db 'Richard Stallman',0 ; DATA XREF: sub_401AF0+3D0↓o
.text:004019D1 a530            db '5.3.0',0            ; DATA XREF: sub_401AF0+3DB↓o
.text:004019D7 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401AF0+3E3↓o
.text:004019E5 ; const FILE stru_4019E5
.text:004019E5 stru_4019E5     FILE <71696E75h, 74786500h, 6F206172h, 61726570h, 2520646Eh, \
.text:004019E5                                         ; DATA XREF: sub_401AF0+3EB↓o
.text:004019E5                                         ; sub_401AF0+42E↓o
.text:004019E5                       73250073h, 7325203Ah, 90909000h>
.text:00401A05                 db  90h
.text:00401A06                 db  90h
.text:00401A07                 db  90h
.text:00401A08                 db  90h
.text:00401A09                 db  90h
.text:00401A0A                 db  90h
.text:00401A0B                 db  90h
.text:00401A0C                 db  90h
.text:00401A0D                 db  90h
.text:00401A0E                 db  90h
.text:00401A0F                 db  90h
.text:00401A10                 db  90h
.text:00401A11                 db  90h
.text:00401A12                 db  90h
.text:00401A13                 db  90h
.text:00401A14                 db  90h
.text:00401A15                 db  90h
.text:00401A16                 db  90h
.text:00401A17                 db  90h
.text:00401A18                 db  90h
.text:00401A19                 db  90h
.text:00401A1A                 db  90h
.text:00401A1B                 db  90h
.text:00401A1C                 db  90h
.text:00401A1D                 db  90h
.text:00401A1E                 db  90h
.text:00401A1F                 db  90h
.text:00401A20 aInvalidNumberO_1 db 'invalid number of bytes to skip',0
.text:00401A20                                         ; DATA XREF: sub_401AF0:loc_4020A1↓o
.text:00401A40 aInvalidNumberO db 'invalid number of bytes to compare',0
.text:00401A40                                         ; DATA XREF: sub_401AF0:loc_402125↓o
.text:00401A63                 align 20h
.text:00401A80 aPrintingAllDup db 'printing all duplicated lines and repeat counts is meaningless',0
.text:00401A80                                         ; DATA XREF: sub_401AF0:loc_4021DD↓o
.text:00401ABF                 align 10h
.text:00401AC0 aLuOptionIsObso db '`-%lu',27h,' option is obsolete; use `-f %lu',27h,0
.text:00401AC0                                         ; DATA XREF: sub_401AF0+723↓o
.text:00401AE8                 align 10h
.text:00401AF0
.text:00401AF0 ; =============== S U B R O U T I N E =======================================
.text:00401AF0
.text:00401AF0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401AF0
.text:00401AF0 sub_401AF0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401AF0
.text:00401AF0 VarName         = dword ptr -58h
.text:00401AF0 Locale          = dword ptr -54h
.text:00401AF0 var_50          = dword ptr -50h
.text:00401AF0 var_4C          = byte ptr -4Ch
.text:00401AF0 Str             = dword ptr -48h
.text:00401AF0 var_44          = dword ptr -44h
.text:00401AF0 var_40          = dword ptr -40h
.text:00401AF0 var_38          = byte ptr -38h
.text:00401AF0 var_34          = byte ptr -34h
.text:00401AF0 var_30          = byte ptr -30h
.text:00401AF0 var_2A          = byte ptr -2Ah
.text:00401AF0 var_29          = byte ptr -29h
.text:00401AF0 var_28          = dword ptr -28h
.text:00401AF0 var_24          = dword ptr -24h
.text:00401AF0 var_20          = dword ptr -20h
.text:00401AF0 var_1C          = dword ptr -1Ch
.text:00401AF0 var_18          = dword ptr -18h
.text:00401AF0 FileName        = dword ptr -14h
.text:00401AF0 arg_0           = dword ptr  8
.text:00401AF0 arg_4           = dword ptr  0Ch
.text:00401AF0
.text:00401AF0                 push    ebp
.text:00401AF1                 xor     eax, eax
.text:00401AF3                 mov     ebp, esp
.text:00401AF5                 push    edi
.text:00401AF6                 push    esi
.text:00401AF7                 push    ebx
.text:00401AF8                 sub     esp, 4Ch
.text:00401AFB                 xor     ebx, ebx
.text:00401AFD                 mov     edi, [ebp+arg_4]
.text:00401B00                 and     esp, 0FFFFFFF0h
.text:00401B03                 call    __alloca
.text:00401B08                 call    sub_406F50
.text:00401B0D                 mov     [esp+58h+VarName], offset VarName ; "POSIXLY_CORRECT"
.text:00401B14                 call    getenv
.text:00401B19                 mov     [ebp+FileName], offset asc_4013E0 ; "-"
.text:00401B20                 test    eax, eax
.text:00401B22                 mov     [ebp+var_18], offset asc_4013E0 ; "-"
.text:00401B29                 mov     ecx, [edi]
.text:00401B2B                 setnz   [ebp+var_29]
.text:00401B2F                 xor     esi, esi
.text:00401B31                 mov     ds:dword_409230, ecx
.text:00401B37                 mov     [ebp+var_2A], 0
.text:00401B3B                 mov     [esp+58h+Locale], offset Str ; Locale
.text:00401B43                 mov     [esp+58h+VarName], 0 ; Category
.text:00401B4A                 call    setlocale
.text:00401B4F                 mov     [esp+58h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401B57                 mov     [esp+58h+VarName], offset aCoreutils ; "coreutils"
.text:00401B5E                 call    ds:__imp_libintl_bindtextdomain
.text:00401B64                 mov     [esp+58h+VarName], offset aCoreutils ; "coreutils"
.text:00401B6B                 call    ds:libintl_textdomain
.text:00401B71                 mov     [esp+58h+VarName], 1
.text:00401B78                 call    sub_404A80
.text:00401B7D                 mov     ds:byte_409000, al
.text:00401B82                 mov     [esp+58h+VarName], offset sub_404990 ; void (__cdecl *)()
.text:00401B89                 call    sub_401040
.text:00401B8E                 mov     ds:byte_409060, 1
.text:00401B95                 xor     edx, edx
.text:00401B97                 xor     ecx, ecx
.text:00401B99                 mov     ds:dword_409020, edx
.text:00401B9F                 mov     edx, 0FFFFFFFFh
.text:00401BA4                 mov     ds:dword_409030, edx
.text:00401BAA                 mov     edx, 1
.text:00401BAF                 mov     ds:dword_409010, ecx
.text:00401BB5                 mov     ds:byte_409050, 1
.text:00401BBC                 mov     ds:byte_409070, 0
.text:00401BC3                 mov     ds:dword_409040, edx
.text:00401BC9
.text:00401BC9 loc_401BC9:                             ; CODE XREF: sub_401AF0+176↓j
.text:00401BC9                 xor     eax, eax
.text:00401BCB                 mov     ds:dword_409090, eax
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_401AF0+1BB↓j
.text:00401BD0                                         ; sub_401AF0+247↓j ...
.text:00401BD0                 cmp     ebx, 0FFFFFFFFh
.text:00401BD3                 jz      loc_402180
.text:00401BD9                 cmp     [ebp+var_29], 0
.text:00401BDD                 jz      short loc_401BE7
.text:00401BDF                 test    esi, esi
.text:00401BE1                 jnz     loc_402180
.text:00401BE7
.text:00401BE7 loc_401BE7:                             ; CODE XREF: sub_401AF0+ED↑j
.text:00401BE7                 mov     [esp+58h+Str], 0 ; int
.text:00401BEF                 mov     ebx, [ebp+arg_0]
.text:00401BF2                 mov     dword ptr [esp+58h+var_4C], offset off_401320 ; int
.text:00401BFA                 mov     [esp+58h+var_50], offset a0123456789dcdf ; "-0123456789Dcdf:is:uw:"
.text:00401C02                 mov     [esp+58h+VarName], ebx ; int
.text:00401C05                 mov     [esp+58h+Locale], edi ; int
.text:00401C09                 call    sub_404820
.text:00401C0E                 cmp     eax, 0FFFFFFFFh
.text:00401C11                 mov     ebx, eax
.text:00401C13                 jz      loc_402180
.text:00401C19                 cmp     eax, 63h ; 'c'
.text:00401C1C                 jz      loc_402173
.text:00401C22                 cmp     eax, 63h ; 'c'
.text:00401C25                 jg      loc_401FA0
.text:00401C2B                 cmp     eax, 1
.text:00401C2E                 jz      loc_401EF0
.text:00401C34                 cmp     eax, 1
.text:00401C37                 jle     loc_401D3C
.text:00401C3D                 cmp     eax, 30h ; '0'
.text:00401C40                 jl      short loc_401CB0
.text:00401C42                 cmp     eax, 39h ; '9'
.text:00401C45                 jle     loc_401CE8
.text:00401C4B                 cmp     eax, 44h ; 'D'
.text:00401C4E                 jnz     short loc_401CB0
.text:00401C50                 mov     ds:byte_409050, 0
.text:00401C57                 mov     edx, ds:dword_409250
.text:00401C5D                 mov     ds:byte_409070, 1
.text:00401C64                 test    edx, edx
.text:00401C66                 jz      loc_401BC9
.text:00401C6C                 mov     [esp+58h+Locale], edx ; char *
.text:00401C70                 mov     ecx, off_408020
.text:00401C76                 mov     [esp+58h+Str], 4 ; int
.text:00401C7E                 mov     dword ptr [esp+58h+var_4C], offset dword_4012A8 ; int
.text:00401C86                 mov     [esp+58h+var_44], ecx ; int
.text:00401C8A                 mov     [esp+58h+var_50], offset off_401298 ; int
.text:00401C92                 mov     [esp+58h+VarName], offset aAllRepeated ; "--all-repeated"
.text:00401C99                 call    sub_403FC0
.text:00401C9E                 mov     edx, ds:dword_4012A8[eax*4]
.text:00401CA5                 mov     ds:dword_409090, edx
.text:00401CAB                 jmp     loc_401BD0
.text:00401CB0 ; ---------------------------------------------------------------------------
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_401AF0+150↑j
.text:00401CB0                                         ; sub_401AF0+15E↑j ...
.text:00401CB0                 mov     [esp+58h+VarName], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401CB7                 call    ds:libintl_gettext
.text:00401CBD                 mov     esi, ds:_iob
.text:00401CC3                 mov     ecx, ds:dword_409230
.text:00401CC9                 add     esi, 40h ; '@'
.text:00401CCC                 mov     [esp+58h+var_50], ecx
.text:00401CD0                 mov     [esp+58h+Locale], eax ; Format
.text:00401CD4                 mov     [esp+58h+VarName], esi ; Stream
.text:00401CD7                 call    fprintf
.text:00401CDC                 mov     [esp+58h+VarName], 1 ; Code
.text:00401CE3
.text:00401CE3 loc_401CE3:                             ; CODE XREF: sub_401AF0+3B5↓j
.text:00401CE3                 call    exit
.text:00401CE8 ; ---------------------------------------------------------------------------
.text:00401CE8
.text:00401CE8 loc_401CE8:                             ; CODE XREF: sub_401AF0+155↑j
.text:00401CE8                 mov     edx, ds:dword_409010
.text:00401CEE                 lea     ecx, [edx+edx*4]
.text:00401CF1                 cmp     edx, 19999999h
.text:00401CF7                 lea     eax, [eax+ecx*2-30h]
.text:00401CFB                 mov     ds:dword_409010, eax
.text:00401D00                 ja      short loc_401D06
.text:00401D02                 cmp     eax, edx
.text:00401D04                 jnb     short loc_401D33
.text:00401D06
.text:00401D06 loc_401D06:                             ; CODE XREF: sub_401AF0+210↑j
.text:00401D06                 mov     [esp+58h+VarName], offset aInvalidNumberO_0 ; "invalid number of fields to skip"
.text:00401D0D                 call    ds:libintl_gettext
.text:00401D13                 mov     [esp+58h+var_50], offset aS_5 ; "%s"
.text:00401D1B                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401D23                 mov     [esp+58h+VarName], 1 ; Code
.text:00401D2A                 mov     dword ptr [esp+58h+var_4C], eax ; char
.text:00401D2E                 call    sub_406BD0
.text:00401D33
.text:00401D33 loc_401D33:                             ; CODE XREF: sub_401AF0+214↑j
.text:00401D33                 mov     [ebp+var_2A], 1
.text:00401D37                 jmp     loc_401BD0
.text:00401D3C ; ---------------------------------------------------------------------------
.text:00401D3C
.text:00401D3C loc_401D3C:                             ; CODE XREF: sub_401AF0+147↑j
.text:00401D3C                 cmp     eax, 0FFFFFF7Dh
.text:00401D41                 jz      loc_401EAA
.text:00401D47                 cmp     eax, 0FFFFFF7Eh
.text:00401D4C                 jnz     loc_401CB0
.text:00401D52                 mov     [esp+58h+VarName], offset aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT [OUTPUT]]"...
.text:00401D59                 call    ds:libintl_gettext
.text:00401D5F                 mov     edi, ds:dword_409230
.text:00401D65                 mov     [esp+58h+VarName], eax ; Format
.text:00401D68                 mov     [esp+58h+Locale], edi
.text:00401D6C                 call    printf
.text:00401D71                 mov     [esp+58h+VarName], offset aDiscardAllButO ; "Discard all but one of successive ident"...
.text:00401D78                 call    ds:libintl_gettext
.text:00401D7E                 mov     ecx, ds:_iob
.text:00401D84                 add     ecx, 20h ; ' '
.text:00401D87                 mov     [esp+58h+Locale], ecx ; Stream
.text:00401D8B                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401D8E                 call    fputs
.text:00401D93                 mov     [esp+58h+VarName], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401D9A                 call    ds:libintl_gettext
.text:00401DA0                 mov     esi, ds:_iob
.text:00401DA6                 add     esi, 20h ; ' '
.text:00401DA9                 mov     [esp+58h+Locale], esi ; Stream
.text:00401DAD                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401DB0                 call    fputs
.text:00401DB5                 mov     [esp+58h+VarName], offset aCCountPrefixLi ; "  -c, --count           prefix lines by"...
.text:00401DBC                 call    ds:libintl_gettext
.text:00401DC2                 mov     ebx, ds:_iob
.text:00401DC8                 add     ebx, 20h ; ' '
.text:00401DCB                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401DCF                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401DD2                 call    fputs
.text:00401DD7                 mov     [esp+58h+VarName], offset aDAllRepeatedDe ; "  -D, --all-repeated[=delimit-method] p"...
.text:00401DDE                 call    ds:libintl_gettext
.text:00401DE4                 mov     edi, ds:_iob
.text:00401DEA                 add     edi, 20h ; ' '
.text:00401DED                 mov     [esp+58h+Locale], edi ; Stream
.text:00401DF1                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401DF4                 call    fputs
.text:00401DF9                 mov     [esp+58h+VarName], offset aWCheckCharsNCo ; "  -w, --check-chars=N   compare no more"...
.text:00401E00                 call    ds:libintl_gettext
.text:00401E06                 mov     ecx, ds:_iob
.text:00401E0C                 add     ecx, 20h ; ' '
.text:00401E0F                 mov     [esp+58h+Locale], ecx ; Stream
.text:00401E13                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401E16                 call    fputs
.text:00401E1B                 mov     [esp+58h+VarName], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E22                 call    ds:libintl_gettext
.text:00401E28                 mov     esi, ds:_iob
.text:00401E2E                 add     esi, 20h ; ' '
.text:00401E31                 mov     [esp+58h+Locale], esi ; Stream
.text:00401E35                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401E38                 call    fputs
.text:00401E3D                 mov     [esp+58h+VarName], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401E44                 call    ds:libintl_gettext
.text:00401E4A                 mov     ebx, ds:_iob
.text:00401E50                 add     ebx, 20h ; ' '
.text:00401E53                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401E57                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401E5A                 call    fputs
.text:00401E5F                 mov     [esp+58h+VarName], offset aAFieldIsARunOf ; "\nA field is a run of whitespace, then "...
.text:00401E66                 call    ds:libintl_gettext
.text:00401E6C                 mov     edi, ds:_iob
.text:00401E72                 add     edi, 20h ; ' '
.text:00401E75                 mov     [esp+58h+Locale], edi ; Stream
.text:00401E79                 mov     [esp+58h+VarName], eax ; Buffer
.text:00401E7C                 call    fputs
.text:00401E81                 mov     [esp+58h+VarName], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401E88                 call    ds:libintl_gettext
.text:00401E8E                 mov     [esp+58h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401E96                 mov     [esp+58h+VarName], eax ; Format
.text:00401E99                 call    printf
.text:00401E9E
.text:00401E9E loc_401E9E:                             ; CODE XREF: sub_401AF0+3FB↓j
.text:00401E9E                                         ; sub_401AF0+6E8↓j
.text:00401E9E                 mov     [esp+58h+VarName], 0
.text:00401EA5                 jmp     loc_401CE3
.text:00401EAA ; ---------------------------------------------------------------------------
.text:00401EAA
.text:00401EAA loc_401EAA:                             ; CODE XREF: sub_401AF0+251↑j
.text:00401EAA                 mov     [esp+58h+var_40], 0
.text:00401EB2                 mov     edx, ds:_iob
.text:00401EB8                 mov     [esp+58h+var_44], offset aDavidMackenzie ; "David MacKenzie"
.text:00401EC0                 mov     [esp+58h+Str], offset aRichardStallma ; "Richard Stallman"
.text:00401EC8                 add     edx, 20h ; ' '
.text:00401ECB                 mov     dword ptr [esp+58h+var_4C], offset a530 ; "5.3.0"
.text:00401ED3                 mov     [esp+58h+var_50], offset aGnuCoreutils ; "GNU coreutils"
.text:00401EDB                 mov     [esp+58h+Locale], offset stru_4019E5 ; FILE *
.text:00401EE3                 mov     [esp+58h+VarName], edx ; FILE *
.text:00401EE6                 call    sub_404710
.text:00401EEB                 jmp     short loc_401E9E
.text:00401EEB ; ---------------------------------------------------------------------------
.text:00401EED                 align 10h
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401AF0+13E↑j
.text:00401EF0                 mov     eax, ds:dword_409250
.text:00401EF5                 cmp     byte ptr [eax], 2Bh ; '+'
.text:00401EF8                 jz      short loc_401F4E
.text:00401EFA
.text:00401EFA loc_401EFA:                             ; CODE XREF: sub_401AF0+46F↓j
.text:00401EFA                 cmp     esi, 2
.text:00401EFD                 jz      short loc_401F16
.text:00401EFF                 mov     [ebp+esi*4+var_18], eax
.text:00401F03                 lea     esi, [esi+0]
.text:00401F09                 lea     edi, [edi+0]
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401AF0+6B0↓j
.text:00401F10                 inc     esi
.text:00401F11                 jmp     loc_401BD0
.text:00401F16 ; ---------------------------------------------------------------------------
.text:00401F16
.text:00401F16 loc_401F16:                             ; CODE XREF: sub_401AF0+40D↑j
.text:00401F16                                         ; sub_401AF0+6B8↓j
.text:00401F16                 mov     [esp+58h+VarName], eax ; char *
.text:00401F19                 call    sub_4047F0
.text:00401F1E                 mov     [esp+58h+VarName], (offset stru_4019E5._cnt+1)
.text:00401F25                 mov     esi, eax
.text:00401F27                 call    ds:libintl_gettext
.text:00401F2D                 mov     dword ptr [esp+58h+var_4C], esi ; char
.text:00401F31                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401F39                 mov     [esp+58h+VarName], 0 ; Code
.text:00401F40                 mov     [esp+58h+var_50], eax ; char *
.text:00401F44                 call    sub_406BD0
.text:00401F49                 jmp     loc_401CB0
.text:00401F4E ; ---------------------------------------------------------------------------
.text:00401F4E
.text:00401F4E loc_401F4E:                             ; CODE XREF: sub_401AF0+408↑j
.text:00401F4E                 call    sub_404760
.text:00401F53                 cmp     eax, 30DAFh
.text:00401F58                 jle     short loc_401F61
.text:00401F5A
.text:00401F5A loc_401F5A:                             ; CODE XREF: sub_401AF0+4A0↓j
.text:00401F5A                 mov     eax, ds:dword_409250
.text:00401F5F                 jmp     short loc_401EFA
.text:00401F61 ; ---------------------------------------------------------------------------
.text:00401F61
.text:00401F61 loc_401F61:                             ; CODE XREF: sub_401AF0+468↑j
.text:00401F61                 mov     [esp+58h+Str], offset Str ; Str
.text:00401F69                 mov     edx, ds:dword_409250
.text:00401F6F                 lea     ecx, [ebp+var_1C]
.text:00401F72                 mov     dword ptr [esp+58h+var_4C], ecx ; int
.text:00401F76                 mov     [esp+58h+var_50], 0Ah ; int
.text:00401F7E                 mov     [esp+58h+Locale], 0 ; int
.text:00401F86                 mov     [esp+58h+VarName], edx ; int
.text:00401F89                 call    sub_404E70
.text:00401F8E                 test    eax, eax
.text:00401F90                 jnz     short loc_401F5A
.text:00401F92                 mov     eax, [ebp+var_1C]
.text:00401F95
.text:00401F95 loc_401F95:                             ; CODE XREF: sub_401AF0+5AC↓j
.text:00401F95                 mov     ds:dword_409020, eax
.text:00401F9A                 jmp     loc_401BD0
.text:00401F9A ; ---------------------------------------------------------------------------
.text:00401F9F                 align 10h
.text:00401FA0
.text:00401FA0 loc_401FA0:                             ; CODE XREF: sub_401AF0+135↑j
.text:00401FA0                 cmp     eax, 69h ; 'i'
.text:00401FA3                 jz      loc_402167
.text:00401FA9                 cmp     eax, 69h ; 'i'
.text:00401FAC                 jg      loc_40204B
.text:00401FB2                 cmp     eax, 64h ; 'd'
.text:00401FB5                 jz      loc_40203F
.text:00401FBB                 cmp     eax, 66h ; 'f'
.text:00401FBE                 jnz     loc_401CB0
.text:00401FC4                 mov     [esp+58h+Str], offset Str ; Str
.text:00401FCC                 mov     edx, ds:dword_409250
.text:00401FD2                 lea     ecx, [ebp+var_20]
.text:00401FD5                 mov     dword ptr [esp+58h+var_4C], ecx ; int
.text:00401FD9                 mov     [esp+58h+var_50], 0Ah ; int
.text:00401FE1                 mov     dword ptr [ebp+var_30], edx
.text:00401FE4                 mov     edx, dword ptr [ebp+var_30]
.text:00401FE7                 mov     [esp+58h+Locale], 0 ; int
.text:00401FEF                 mov     [esp+58h+VarName], edx ; int
.text:00401FF2                 call    sub_404E70
.text:00401FF7                 test    eax, eax
.text:00401FF9                 jnz     short loc_402009
.text:00401FFB
.text:00401FFB loc_401FFB:                             ; CODE XREF: sub_401AF0+54D↓j
.text:00401FFB                 mov     edx, [ebp+var_20]
.text:00401FFE                 mov     ds:dword_409010, edx
.text:00402004                 jmp     loc_401BD0
.text:00402009 ; ---------------------------------------------------------------------------
.text:00402009
.text:00402009 loc_402009:                             ; CODE XREF: sub_401AF0+509↑j
.text:00402009                 mov     [esp+58h+VarName], offset aInvalidNumberO_0 ; "invalid number of fields to skip"
.text:00402010                 call    ds:libintl_gettext
.text:00402016                 mov     [esp+58h+var_50], (offset stru_4019E5._charbuf+2) ; char *
.text:0040201E                 mov     ecx, dword ptr [ebp+var_30]
.text:00402021                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00402029                 mov     [esp+58h+VarName], 1 ; Code
.text:00402030                 mov     [esp+58h+Str], eax
.text:00402034                 mov     dword ptr [esp+58h+var_4C], ecx ; char
.text:00402038                 call    sub_406BD0
.text:0040203D                 jmp     short loc_401FFB
.text:0040203F ; ---------------------------------------------------------------------------
.text:0040203F
.text:0040203F loc_40203F:                             ; CODE XREF: sub_401AF0+4C5↑j
.text:0040203F                 mov     ds:byte_409050, 0
.text:00402046                 jmp     loc_401BD0
.text:0040204B ; ---------------------------------------------------------------------------
.text:0040204B
.text:0040204B loc_40204B:                             ; CODE XREF: sub_401AF0+4BC↑j
.text:0040204B                 cmp     eax, 75h ; 'u'
.text:0040204E                 jz      loc_40215B
.text:00402054                 cmp     eax, 75h ; 'u'
.text:00402057                 jg      short loc_4020D7
.text:00402059                 cmp     eax, 73h ; 's'
.text:0040205C                 jnz     loc_401CB0
.text:00402062                 mov     [esp+58h+Str], offset Str ; Str
.text:0040206A                 mov     ecx, ds:dword_409250
.text:00402070                 lea     edx, [ebp+var_24]
.text:00402073                 mov     dword ptr [esp+58h+var_4C], edx ; int
.text:00402077                 mov     [esp+58h+var_50], 0Ah ; int
.text:0040207F                 mov     dword ptr [ebp+var_34], ecx
.text:00402082                 mov     ecx, dword ptr [ebp+var_34]
.text:00402085                 mov     [esp+58h+Locale], 0 ; int
.text:0040208D                 mov     [esp+58h+VarName], ecx ; int
.text:00402090                 call    sub_404E70
.text:00402095                 test    eax, eax
.text:00402097                 jnz     short loc_4020A1
.text:00402099
.text:00402099 loc_402099:                             ; CODE XREF: sub_401AF0+5E5↓j
.text:00402099                 mov     eax, [ebp+var_24]
.text:0040209C                 jmp     loc_401F95
.text:004020A1 ; ---------------------------------------------------------------------------
.text:004020A1
.text:004020A1 loc_4020A1:                             ; CODE XREF: sub_401AF0+5A7↑j
.text:004020A1                 mov     [esp+58h+VarName], offset aInvalidNumberO_1 ; "invalid number of bytes to skip"
.text:004020A8                 call    ds:libintl_gettext
.text:004020AE                 mov     [esp+58h+var_50], (offset stru_4019E5._charbuf+2) ; char *
.text:004020B6                 mov     edx, dword ptr [ebp+var_34]
.text:004020B9                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:004020C1                 mov     [esp+58h+VarName], 1 ; Code
.text:004020C8                 mov     [esp+58h+Str], eax
.text:004020CC                 mov     dword ptr [esp+58h+var_4C], edx ; char
.text:004020D0                 call    sub_406BD0
.text:004020D5                 jmp     short loc_402099
.text:004020D7 ; ---------------------------------------------------------------------------
.text:004020D7
.text:004020D7 loc_4020D7:                             ; CODE XREF: sub_401AF0+567↑j
.text:004020D7                 cmp     eax, 77h ; 'w'
.text:004020DA                 jnz     loc_401CB0
.text:004020E0                 mov     [esp+58h+Str], offset Str ; Str
.text:004020E8                 mov     ecx, ds:dword_409250
.text:004020EE                 lea     edx, [ebp+var_28]
.text:004020F1                 mov     dword ptr [esp+58h+var_4C], edx ; int
.text:004020F5                 mov     [esp+58h+var_50], 0Ah ; int
.text:004020FD                 mov     dword ptr [ebp+var_38], ecx
.text:00402100                 mov     ecx, dword ptr [ebp+var_38]
.text:00402103                 mov     [esp+58h+Locale], 0 ; int
.text:0040210B                 mov     [esp+58h+VarName], ecx ; int
.text:0040210E                 call    sub_404E70
.text:00402113                 test    eax, eax
.text:00402115                 jnz     short loc_402125
.text:00402117
.text:00402117 loc_402117:                             ; CODE XREF: sub_401AF0+669↓j
.text:00402117                 mov     ecx, [ebp+var_28]
.text:0040211A                 mov     ds:dword_409030, ecx
.text:00402120                 jmp     loc_401BD0
.text:00402125 ; ---------------------------------------------------------------------------
.text:00402125
.text:00402125 loc_402125:                             ; CODE XREF: sub_401AF0+625↑j
.text:00402125                 mov     [esp+58h+VarName], offset aInvalidNumberO ; "invalid number of bytes to compare"
.text:0040212C                 call    ds:libintl_gettext
.text:00402132                 mov     [esp+58h+var_50], (offset stru_4019E5._charbuf+2) ; char *
.text:0040213A                 mov     edx, dword ptr [ebp+var_38]
.text:0040213D                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00402145                 mov     [esp+58h+VarName], 1 ; Code
.text:0040214C                 mov     [esp+58h+Str], eax
.text:00402150                 mov     dword ptr [esp+58h+var_4C], edx ; char
.text:00402154                 call    sub_406BD0
.text:00402159                 jmp     short loc_402117
.text:0040215B ; ---------------------------------------------------------------------------
.text:0040215B
.text:0040215B loc_40215B:                             ; CODE XREF: sub_401AF0+55E↑j
.text:0040215B                 mov     ds:byte_409060, 0
.text:00402162                 jmp     loc_401BD0
.text:00402167 ; ---------------------------------------------------------------------------
.text:00402167
.text:00402167 loc_402167:                             ; CODE XREF: sub_401AF0+4B3↑j
.text:00402167                 mov     ds:byte_409080, 1
.text:0040216E                 jmp     loc_401BD0
.text:00402173 ; ---------------------------------------------------------------------------
.text:00402173
.text:00402173 loc_402173:                             ; CODE XREF: sub_401AF0+12C↑j
.text:00402173                 xor     eax, eax
.text:00402175                 mov     ds:dword_409040, eax
.text:0040217A                 jmp     loc_401BD0
.text:0040217A ; ---------------------------------------------------------------------------
.text:0040217F                 align 10h
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: sub_401AF0+E3↑j
.text:00402180                                         ; sub_401AF0+F1↑j ...
.text:00402180                 mov     edx, dword_408010
.text:00402186                 cmp     [ebp+arg_0], edx
.text:00402189                 jle     short loc_4021AD
.text:0040218B                 cmp     esi, 2
.text:0040218E                 jz      short loc_4021A5
.text:00402190                 mov     ecx, [edi+edx*4]
.text:00402193                 mov     [ebp+esi*4+var_18], ecx
.text:00402197                 lea     ecx, [edx+1]
.text:0040219A                 mov     dword_408010, ecx
.text:004021A0                 jmp     loc_401F10
.text:004021A5 ; ---------------------------------------------------------------------------
.text:004021A5
.text:004021A5 loc_4021A5:                             ; CODE XREF: sub_401AF0+69E↑j
.text:004021A5                 mov     eax, [edi+edx*4]
.text:004021A8                 jmp     loc_401F16
.text:004021AD ; ---------------------------------------------------------------------------
.text:004021AD
.text:004021AD loc_4021AD:                             ; CODE XREF: sub_401AF0+699↑j
.text:004021AD                 cmp     [ebp+var_2A], 0
.text:004021B1                 jnz     short loc_402207
.text:004021B3
.text:004021B3 loc_4021B3:                             ; CODE XREF: sub_401AF0+721↓j
.text:004021B3                 mov     edi, ds:dword_409040
.text:004021B9                 test    edi, edi
.text:004021BB                 jnz     short loc_4021C6
.text:004021BD                 cmp     ds:byte_409070, 0
.text:004021C4                 jnz     short loc_4021DD
.text:004021C6
.text:004021C6 loc_4021C6:                             ; CODE XREF: sub_401AF0+6CB↑j
.text:004021C6                 mov     ebx, [ebp+FileName]
.text:004021C9                 mov     edx, [ebp+var_18]
.text:004021CC                 mov     [esp+58h+Locale], ebx ; FileName
.text:004021D0                 mov     [esp+58h+VarName], edx ; char *
.text:004021D3                 call    sub_402410
.text:004021D8                 jmp     loc_401E9E
.text:004021DD ; ---------------------------------------------------------------------------
.text:004021DD
.text:004021DD loc_4021DD:                             ; CODE XREF: sub_401AF0+6D4↑j
.text:004021DD                 mov     [esp+58h+VarName], offset aPrintingAllDup ; "printing all duplicated lines and repea"...
.text:004021E4                 call    ds:libintl_gettext
.text:004021EA                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:004021F2                 mov     [esp+58h+VarName], 0 ; Code
.text:004021F9                 mov     [esp+58h+var_50], eax ; char *
.text:004021FD                 call    sub_406BD0
.text:00402202                 jmp     loc_401CB0
.text:00402207 ; ---------------------------------------------------------------------------
.text:00402207
.text:00402207 loc_402207:                             ; CODE XREF: sub_401AF0+6C1↑j
.text:00402207                 call    sub_404760
.text:0040220C                 cmp     eax, 30DAFh
.text:00402211                 jle     short loc_4021B3
.text:00402213                 mov     [esp+58h+VarName], offset aLuOptionIsObso ; "`-%lu' option is obsolete; use `-f %lu'"
.text:0040221A                 call    ds:libintl_gettext
.text:00402220                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00402228                 mov     ebx, ds:dword_409010
.text:0040222E                 mov     [esp+58h+VarName], 0 ; Code
.text:00402235                 mov     [esp+58h+Str], ebx
.text:00402239                 mov     dword ptr [esp+58h+var_4C], ebx ; char
.text:0040223D                 mov     [esp+58h+var_50], eax ; char *
.text:00402241                 call    sub_406BD0
.text:00402246                 jmp     loc_401CB0
.text:00402246 sub_401AF0      endp
.text:00402246
.text:00402246 ; ---------------------------------------------------------------------------
.text:0040224B                 align 10h
.text:00402250
.text:00402250 ; =============== S U B R O U T I N E =======================================
.text:00402250
.text:00402250 ; Attributes: noreturn
.text:00402250
.text:00402250 ; void __cdecl __noreturn sub_402250(int Code)
.text:00402250 sub_402250      proc near               ; CODE XREF: sub_404230+A↓p
.text:00402250
.text:00402250 Stream          = dword ptr -1Ch
.text:00402250 Format          = dword ptr -18h
.text:00402250 var_14          = dword ptr -14h
.text:00402250 Code            = dword ptr  4
.text:00402250
.text:00402250                 push    ebx
.text:00402251                 sub     esp, 18h
.text:00402254                 mov     ebx, [esp+1Ch+Code]
.text:00402258                 test    ebx, ebx
.text:0040225A                 jz      short loc_402290
.text:0040225C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402263                 call    ds:libintl_gettext
.text:00402269                 mov     edx, ds:_iob
.text:0040226F                 mov     ecx, ds:dword_409230
.text:00402275                 add     edx, 40h ; '@'
.text:00402278                 mov     [esp+1Ch+var_14], ecx
.text:0040227C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402280                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402283                 call    fprintf
.text:00402288
.text:00402288 loc_402288:                             ; CODE XREF: sub_402250+18C↓j
.text:00402288                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040228B                 call    exit
.text:00402290 ; ---------------------------------------------------------------------------
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_402250+A↑j
.text:00402290                 mov     [esp+1Ch+Stream], offset aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT [OUTPUT]]"...
.text:00402297                 call    ds:libintl_gettext
.text:0040229D                 mov     ecx, ds:dword_409230
.text:004022A3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004022A6                 mov     [esp+1Ch+Format], ecx
.text:004022AA                 call    printf
.text:004022AF                 mov     [esp+1Ch+Stream], offset aDiscardAllButO ; "Discard all but one of successive ident"...
.text:004022B6                 call    ds:libintl_gettext
.text:004022BC                 mov     ecx, ds:_iob
.text:004022C2                 add     ecx, 20h ; ' '
.text:004022C5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022C9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022CC                 call    fputs
.text:004022D1                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004022D8                 call    ds:libintl_gettext
.text:004022DE                 mov     ecx, ds:_iob
.text:004022E4                 add     ecx, 20h ; ' '
.text:004022E7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022EB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022EE                 call    fputs
.text:004022F3                 mov     [esp+1Ch+Stream], offset aCCountPrefixLi ; "  -c, --count           prefix lines by"...
.text:004022FA                 call    ds:libintl_gettext
.text:00402300                 mov     ecx, ds:_iob
.text:00402306                 add     ecx, 20h ; ' '
.text:00402309                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040230D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402310                 call    fputs
.text:00402315                 mov     [esp+1Ch+Stream], offset aDAllRepeatedDe ; "  -D, --all-repeated[=delimit-method] p"...
.text:0040231C                 call    ds:libintl_gettext
.text:00402322                 mov     ecx, ds:_iob
.text:00402328                 add     ecx, 20h ; ' '
.text:0040232B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040232F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402332                 call    fputs
.text:00402337                 mov     [esp+1Ch+Stream], offset aWCheckCharsNCo ; "  -w, --check-chars=N   compare no more"...
.text:0040233E                 call    ds:libintl_gettext
.text:00402344                 mov     ecx, ds:_iob
.text:0040234A                 add     ecx, 20h ; ' '
.text:0040234D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402351                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402354                 call    fputs
.text:00402359                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402360                 call    ds:libintl_gettext
.text:00402366                 mov     ecx, ds:_iob
.text:0040236C                 add     ecx, 20h ; ' '
.text:0040236F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402373                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402376                 call    fputs
.text:0040237B                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402382                 call    ds:libintl_gettext
.text:00402388                 mov     ecx, ds:_iob
.text:0040238E                 add     ecx, 20h ; ' '
.text:00402391                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402395                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402398                 call    fputs
.text:0040239D                 mov     [esp+1Ch+Stream], offset aAFieldIsARunOf ; "\nA field is a run of whitespace, then "...
.text:004023A4                 call    ds:libintl_gettext
.text:004023AA                 mov     ecx, ds:_iob
.text:004023B0                 add     ecx, 20h ; ' '
.text:004023B3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004023B7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023BA                 call    fputs
.text:004023BF                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004023C6                 call    ds:libintl_gettext
.text:004023CC                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004023D4                 mov     [esp+1Ch+Stream], eax ; Format
.text:004023D7                 call    printf
.text:004023DC                 jmp     loc_402288
.text:004023DC sub_402250      endp
.text:004023DC
.text:004023DC ; ---------------------------------------------------------------------------
.text:004023E1 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: sub_402410:loc_402603↓o
.text:004023E1                                         ; sub_402410:loc_40263A↓o
.text:004023F2 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sub_402410:loc_402675↓o
.text:00402403 ; const char Format[]
.text:00402403 Format          db '%7I64u ',0          ; DATA XREF: sub_402410+2A8↓o
.text:00402403                                         ; sub_402410:loc_40286C↓o
.text:0040240B ; const char aW[]
.text:0040240B aW              db 'w',0                ; DATA XREF: sub_402410:loc_402C0B↓o
.text:0040240D ; const char aR[]
.text:0040240D aR              db 'r',0                ; DATA XREF: sub_402410:loc_402C56↓o
.text:0040240F                 align 10h
.text:00402410
.text:00402410 ; =============== S U B R O U T I N E =======================================
.text:00402410
.text:00402410
.text:00402410 ; int __cdecl sub_402410(char *, char *FileName)
.text:00402410 sub_402410      proc near               ; CODE XREF: sub_401AF0+6E3↑p
.text:00402410
.text:00402410 Buffer          = dword ptr -8Ch
.text:00402410 ElementSize     = dword ptr -88h
.text:00402410 ElementCount    = dword ptr -84h
.text:00402410 Stream          = dword ptr -80h
.text:00402410 var_74          = dword ptr -74h
.text:00402410 var_6D          = byte ptr -6Dh
.text:00402410 var_6C          = dword ptr -6Ch
.text:00402410 var_68          = dword ptr -68h
.text:00402410 var_60          = byte ptr -60h
.text:00402410 var_5C          = dword ptr -5Ch
.text:00402410 var_56          = byte ptr -56h
.text:00402410 var_55          = byte ptr -55h
.text:00402410 var_54          = byte ptr -54h
.text:00402410 var_50          = dword ptr -50h
.text:00402410 var_4C          = dword ptr -4Ch
.text:00402410 var_48          = dword ptr -48h
.text:00402410 File            = dword ptr -44h
.text:00402410 var_40          = dword ptr -40h
.text:00402410 var_3C          = byte ptr -3Ch
.text:00402410 var_34          = dword ptr -34h
.text:00402410 var_2C          = byte ptr -2Ch
.text:00402410 Block           = dword ptr -24h
.text:00402410 arg_0           = dword ptr  4
.text:00402410 FileName        = dword ptr  8
.text:00402410
.text:00402410                 push    ebp
.text:00402411                 mov     ecx, 2
.text:00402416                 push    edi
.text:00402417                 mov     edi, offset asc_4013E0 ; "-"
.text:0040241C                 push    esi
.text:0040241D                 push    ebx
.text:0040241E                 sub     esp, 7Ch
.text:00402421                 mov     esi, [esp+8Ch+arg_0]
.text:00402428                 cld
.text:00402429                 repe cmpsb
.text:0040242B                 jnz     loc_402C56
.text:00402431                 mov     eax, ds:_iob
.text:00402436
.text:00402436 loc_402436:                             ; CODE XREF: sub_402410+85D↓j
.text:00402436                 mov     [esp+8Ch+var_40], eax
.text:0040243A                 mov     eax, [esp+8Ch+var_40]
.text:0040243E                 test    eax, eax
.text:00402440                 jz      loc_402C27
.text:00402446
.text:00402446 loc_402446:                             ; CODE XREF: sub_402410+841↓j
.text:00402446                 cld
.text:00402447                 mov     esi, [esp+8Ch+FileName]
.text:0040244E                 mov     ecx, 2
.text:00402453                 mov     edi, offset asc_4013E0 ; "-"
.text:00402458                 repe cmpsb
.text:0040245A                 jnz     loc_402C0B
.text:00402460                 mov     eax, ds:_iob
.text:00402465                 add     eax, 20h ; ' '
.text:00402468
.text:00402468 loc_402468:                             ; CODE XREF: sub_402410+812↓j
.text:00402468                 mov     [esp+8Ch+File], eax
.text:0040246C                 mov     esi, [esp+8Ch+File]
.text:00402470                 test    esi, esi
.text:00402472                 jz      loc_402BDC
.text:00402478
.text:00402478 loc_402478:                             ; CODE XREF: sub_402410+7F6↓j
.text:00402478                 lea     ecx, [esp+8Ch+var_2C]
.text:0040247C                 lea     eax, [esp+8Ch+var_3C]
.text:00402480                 mov     [esp+8Ch+var_48], ecx
.text:00402484                 mov     [esp+8Ch+var_4C], eax
.text:00402488                 mov     [esp+8Ch+Buffer], ecx
.text:0040248B                 call    sub_404BB0
.text:00402490                 mov     edx, [esp+8Ch+var_4C]
.text:00402494                 mov     [esp+8Ch+Buffer], edx
.text:00402497                 call    sub_404BB0
.text:0040249C                 cmp     ds:byte_409050, 0
.text:004024A3                 jz      short loc_4024BB
.text:004024A5                 cmp     ds:byte_409060, 0
.text:004024AC                 jz      short loc_4024BB
.text:004024AE                 cmp     ds:dword_409040, 1
.text:004024B5                 jz      loc_402A1C
.text:004024BB
.text:004024BB loc_4024BB:                             ; CODE XREF: sub_402410+93↑j
.text:004024BB                                         ; sub_402410+9C↑j
.text:004024BB                 mov     [esp+8Ch+var_6C], 0
.text:004024C3                 mov     ecx, [esp+8Ch+var_40]
.text:004024C7                 mov     ebp, [esp+8Ch+var_4C]
.text:004024CB                 mov     [esp+8Ch+var_68], 0
.text:004024D3                 mov     [esp+8Ch+var_6D], 1
.text:004024D8                 mov     [esp+8Ch+ElementSize], ecx
.text:004024DC                 mov     [esp+8Ch+Buffer], ebp
.text:004024DF                 call    sub_404AF0
.text:004024E4                 test    eax, eax
.text:004024E6                 jz      loc_40258F
.text:004024EC                 mov     esi, [esp+8Ch+var_4C]
.text:004024F0                 xor     edx, edx
.text:004024F2                 mov     ebp, ds:dword_409010
.text:004024F8                 mov     edi, [esi+4]
.text:004024FB                 mov     ebx, [esi+8]
.text:004024FE                 xor     esi, esi
.text:00402500                 cmp     edx, ebp
.text:00402502                 lea     ecx, [edi-1]
.text:00402505                 jnb     short loc_40250F
.text:00402507                 cmp     edx, ecx
.text:00402509                 jb      loc_4029E0
.text:0040250F
.text:0040250F loc_40250F:                             ; CODE XREF: sub_402410+F5↑j
.text:0040250F                                         ; sub_402410+5F6↓j ...
.text:0040250F                 mov     eax, ds:dword_409020
.text:00402514                 xor     esi, esi
.text:00402516                 cmp     esi, eax
.text:00402518                 jnb     short loc_402528
.text:0040251A                 cmp     edx, ecx
.text:0040251C                 jnb     short loc_402528
.text:0040251E
.text:0040251E loc_40251E:                             ; CODE XREF: sub_402410+116↓j
.text:0040251E                 inc     esi
.text:0040251F                 inc     edx
.text:00402520                 cmp     esi, eax
.text:00402522                 jnb     short loc_402528
.text:00402524                 cmp     edx, ecx
.text:00402526                 jb      short loc_40251E
.text:00402528
.text:00402528 loc_402528:                             ; CODE XREF: sub_402410+108↑j
.text:00402528                                         ; sub_402410+10C↑j ...
.text:00402528                 sub     edi, edx
.text:0040252A                 add     ebx, edx
.text:0040252C                 dec     edi
.text:0040252D                 mov     dword ptr [esp+8Ch+var_60], edi
.text:00402531                 mov     edi, [esp+8Ch+var_40]
.text:00402535                 mov     [esp+8Ch+var_5C], ebx
.text:00402539                 mov     eax, [edi+0Ch]
.text:0040253C                 test    al, 10h
.text:0040253E                 jz      loc_4026EE
.text:00402544
.text:00402544 loc_402544:                             ; CODE XREF: sub_402410+457↓j
.text:00402544                                         ; sub_402410+5C5↓j
.text:00402544                 mov     ebx, [esp+8Ch+var_68]
.text:00402548                 or      ebx, [esp+8Ch+var_6C]
.text:0040254C                 jnz     loc_4026E2
.text:00402552                 cmp     ds:byte_409050, 0
.text:00402559
.text:00402559 loc_402559:                             ; CODE XREF: sub_402410+2D9↓j
.text:00402559                 jz      short loc_402596
.text:0040255B                 mov     edi, ds:dword_409040
.text:00402561                 test    edi, edi
.text:00402563                 jz      loc_4026AF
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_402410+2CD↓j
.text:00402569                 mov     edi, [esp+8Ch+File]
.text:0040256D                 mov     ebp, [esp+8Ch+var_4C]
.text:00402571                 mov     [esp+8Ch+Stream], edi ; Stream
.text:00402575                 mov     ebx, [ebp+4]
.text:00402578                 mov     [esp+8Ch+ElementSize], 1 ; ElementSize
.text:00402580                 mov     [esp+8Ch+ElementCount], ebx ; ElementCount
.text:00402584                 mov     esi, [ebp+8]
.text:00402587                 mov     [esp+8Ch+Buffer], esi ; Buffer
.text:0040258A                 call    fwrite
.text:0040258F
.text:0040258F loc_40258F:                             ; CODE XREF: sub_402410+D6↑j
.text:0040258F                                         ; sub_402410+631↓j
.text:0040258F                 mov     ecx, [esp+8Ch+var_40]
.text:00402593                 mov     eax, [ecx+0Ch]
.text:00402596
.text:00402596 loc_402596:                             ; CODE XREF: sub_402410:loc_402559↑j
.text:00402596                                         ; sub_402410+5CB↓j ...
.text:00402596                 test    al, 20h
.text:00402598                 jnz     loc_402675
.text:0040259E                 mov     edx, [esp+8Ch+var_40]
.text:004025A2                 mov     [esp+8Ch+Buffer], edx ; Stream
.text:004025A5                 call    fclose
.text:004025AA                 inc     eax
.text:004025AB                 jz      loc_402675
.text:004025B1
.text:004025B1 loc_4025B1:                             ; CODE XREF: sub_402410+29A↓j
.text:004025B1                 mov     edx, ds:_iob
.text:004025B7                 lea     edi, [edx+20h]
.text:004025BA                 cmp     [esp+8Ch+File], edi
.text:004025BE                 jz      short loc_4025E3
.text:004025C0                 mov     ecx, [esp+8Ch+File]
.text:004025C4                 test    byte ptr [ecx+0Ch], 20h
.text:004025C8                 jnz     short loc_40263A
.text:004025CA
.text:004025CA loc_4025CA:                             ; CODE XREF: sub_402410+260↓j
.text:004025CA                 lea     ebp, [edx+20h]
.text:004025CD                 cmp     [esp+8Ch+File], ebp
.text:004025D1                 jz      short loc_4025E3
.text:004025D3                 mov     edx, [esp+8Ch+File]
.text:004025D7                 mov     [esp+8Ch+Buffer], edx ; Stream
.text:004025DA                 call    fclose
.text:004025DF                 test    eax, eax
.text:004025E1                 jnz     short loc_402603
.text:004025E3
.text:004025E3 loc_4025E3:                             ; CODE XREF: sub_402410+1AE↑j
.text:004025E3                                         ; sub_402410+1C1↑j ...
.text:004025E3                 mov     ebp, [esp+8Ch+Block]
.text:004025E7                 mov     [esp+8Ch+Buffer], ebp ; Block
.text:004025EA                 call    free
.text:004025EF                 mov     esi, [esp+8Ch+var_34]
.text:004025F3                 mov     [esp+8Ch+Buffer], esi ; Block
.text:004025F6                 call    free
.text:004025FB                 add     esp, 7Ch
.text:004025FE                 pop     ebx
.text:004025FF                 pop     esi
.text:00402600                 pop     edi
.text:00402601                 pop     ebp
.text:00402602                 retn
.text:00402603 ; ---------------------------------------------------------------------------
.text:00402603
.text:00402603 loc_402603:                             ; CODE XREF: sub_402410+1D1↑j
.text:00402603                 mov     [esp+8Ch+Buffer], offset aErrorWritingS ; "error writing %s"
.text:0040260A                 call    ds:libintl_gettext
.text:00402610                 mov     edi, eax
.text:00402612                 call    _errno
.text:00402617                 mov     [esp+8Ch+ElementCount], edi ; char *
.text:0040261B                 mov     ecx, [esp+8Ch+FileName]
.text:00402622                 mov     [esp+8Ch+Stream], ecx ; char
.text:00402626                 mov     ebx, [eax]
.text:00402628                 mov     [esp+8Ch+Buffer], 1 ; Code
.text:0040262F                 mov     [esp+8Ch+ElementSize], ebx ; ErrorMessage
.text:00402633                 call    sub_406BD0
.text:00402638                 jmp     short loc_4025E3
.text:0040263A ; ---------------------------------------------------------------------------
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_402410+1B8↑j
.text:0040263A                 mov     [esp+8Ch+Buffer], offset aErrorWritingS ; "error writing %s"
.text:00402641                 call    ds:libintl_gettext
.text:00402647                 mov     [esp+8Ch+ElementSize], 0 ; ErrorMessage
.text:0040264F                 mov     esi, [esp+8Ch+FileName]
.text:00402656                 mov     [esp+8Ch+Buffer], 1 ; Code
.text:0040265D                 mov     [esp+8Ch+Stream], esi ; char
.text:00402661                 mov     [esp+8Ch+ElementCount], eax ; char *
.text:00402665                 call    sub_406BD0
.text:0040266A                 mov     edx, ds:_iob
.text:00402670                 jmp     loc_4025CA
.text:00402675 ; ---------------------------------------------------------------------------
.text:00402675
.text:00402675 loc_402675:                             ; CODE XREF: sub_402410+188↑j
.text:00402675                                         ; sub_402410+19B↑j
.text:00402675                 mov     [esp+8Ch+Buffer], offset aErrorReadingS ; "error reading %s"
.text:0040267C                 call    ds:libintl_gettext
.text:00402682                 mov     ebp, eax
.text:00402684                 call    _errno
.text:00402689                 mov     [esp+8Ch+ElementCount], ebp ; char *
.text:0040268D                 mov     ebx, [esp+8Ch+arg_0]
.text:00402694                 mov     [esp+8Ch+Stream], ebx ; char
.text:00402698                 mov     esi, [eax]
.text:0040269A                 mov     [esp+8Ch+Buffer], 1 ; Code
.text:004026A1                 mov     [esp+8Ch+ElementSize], esi ; ErrorMessage
.text:004026A5                 call    sub_406BD0
.text:004026AA                 jmp     loc_4025B1
.text:004026AF ; ---------------------------------------------------------------------------
.text:004026AF
.text:004026AF loc_4026AF:                             ; CODE XREF: sub_402410+153↑j
.text:004026AF                 add     [esp+8Ch+var_6C], 1
.text:004026B4                 mov     eax, [esp+8Ch+File]
.text:004026B8                 mov     [esp+8Ch+ElementSize], offset Format ; "%7I64u "
.text:004026C0                 mov     edx, [esp+8Ch+var_6C]
.text:004026C4                 adc     [esp+8Ch+var_68], 0
.text:004026C9                 mov     [esp+8Ch+Buffer], eax ; Stream
.text:004026CC                 mov     [esp+8Ch+ElementCount], edx
.text:004026D0                 mov     ecx, [esp+8Ch+var_68]
.text:004026D4                 mov     [esp+8Ch+Stream], ecx
.text:004026D8                 call    fprintf
.text:004026DD                 jmp     loc_402569
.text:004026E2 ; ---------------------------------------------------------------------------
.text:004026E2
.text:004026E2 loc_4026E2:                             ; CODE XREF: sub_402410+13C↑j
.text:004026E2                 cmp     ds:byte_409060, 0
.text:004026E9                 jmp     loc_402559
.text:004026EE ; ---------------------------------------------------------------------------
.text:004026EE
.text:004026EE loc_4026EE:                             ; CODE XREF: sub_402410+12E↑j
.text:004026EE                                         ; sub_402410+451↓j
.text:004026EE                 mov     edx, [esp+8Ch+var_40]
.text:004026F2                 mov     eax, [esp+8Ch+var_48]
.text:004026F6                 mov     [esp+8Ch+ElementSize], edx
.text:004026FA                 mov     [esp+8Ch+Buffer], eax
.text:004026FD                 call    sub_404AF0
.text:00402702                 test    eax, eax
.text:00402704                 jz      loc_4029CC
.text:0040270A                 mov     ebp, [esp+8Ch+var_48]
.text:0040270E                 xor     edx, edx
.text:00402710                 xor     esi, esi
.text:00402712                 mov     edi, [ebp+4]
.text:00402715                 mov     ebx, [ebp+8]
.text:00402718                 mov     ebp, ds:dword_409010
.text:0040271E                 lea     ecx, [edi-1]
.text:00402721                 cmp     edx, ebp
.text:00402723                 jnb     short loc_40272D
.text:00402725                 cmp     edx, ecx
.text:00402727                 jb      loc_402987
.text:0040272D
.text:0040272D loc_40272D:                             ; CODE XREF: sub_402410+313↑j
.text:0040272D                                         ; sub_402410+5A6↓j ...
.text:0040272D                 mov     eax, ds:dword_409020
.text:00402732                 xor     esi, esi
.text:00402734                 cmp     esi, eax
.text:00402736                 jnb     short loc_40274A
.text:00402738                 cmp     edx, ecx
.text:0040273A                 jnb     short loc_40274A
.text:0040273C                 lea     esi, [esi+0]
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402410+338↓j
.text:00402740                 inc     esi
.text:00402741                 inc     edx
.text:00402742                 cmp     esi, eax
.text:00402744                 jnb     short loc_40274A
.text:00402746                 cmp     edx, ecx
.text:00402748                 jb      short loc_402740
.text:0040274A
.text:0040274A loc_40274A:                             ; CODE XREF: sub_402410+326↑j
.text:0040274A                                         ; sub_402410+32A↑j ...
.text:0040274A                 mov     eax, ds:dword_409030
.text:0040274F                 sub     edi, edx
.text:00402751                 add     ebx, edx
.text:00402753                 mov     [esp+8Ch+var_74], ebx
.text:00402757                 lea     ebp, [edi-1]
.text:0040275A                 mov     ecx, dword ptr [esp+8Ch+var_60]
.text:0040275E                 mov     edx, ebp
.text:00402760                 cmp     eax, ebp
.text:00402762                 jnb     short loc_402766
.text:00402764                 mov     edx, eax
.text:00402766
.text:00402766 loc_402766:                             ; CODE XREF: sub_402410+352↑j
.text:00402766                 cmp     eax, dword ptr [esp+8Ch+var_60]
.text:0040276A                 jnb     short loc_40276E
.text:0040276C                 mov     ecx, eax
.text:0040276E
.text:0040276E loc_40276E:                             ; CODE XREF: sub_402410+35A↑j
.text:0040276E                 cmp     ds:byte_409080, 0
.text:00402775                 jz      loc_40293A
.text:0040277B                 xor     ebx, ebx
.text:0040277D                 cmp     edx, ecx
.text:0040277F                 jz      loc_402915
.text:00402785
.text:00402785 loc_402785:                             ; CODE XREF: sub_402410+525↓j
.text:00402785                                         ; sub_402410+537↓j
.text:00402785                 mov     bl, 1
.text:00402787
.text:00402787 loc_402787:                             ; CODE XREF: sub_402410:loc_40292F↓j
.text:00402787                 movzx   eax, bl
.text:0040278A
.text:0040278A loc_40278A:                             ; CODE XREF: sub_402410+572↓j
.text:0040278A                 test    al, al
.text:0040278C                 setz    bl
.text:0040278F                 xor     esi, esi
.text:00402791                 movzx   edx, bl
.text:00402794                 add     [esp+8Ch+var_6C], edx
.text:00402798                 mov     ecx, [esp+8Ch+var_6C]
.text:0040279C                 adc     [esp+8Ch+var_68], esi
.text:004027A0                 mov     eax, [esp+8Ch+var_68]
.text:004027A4                 and     ecx, eax
.text:004027A6                 inc     ecx
.text:004027A7                 jnz     short loc_4027B3
.text:004027A9                 add     [esp+8Ch+var_6C], 0FFFFFFFFh
.text:004027AE                 adc     [esp+8Ch+var_68], 0FFFFFFFFh
.text:004027B3
.text:004027B3 loc_4027B3:                             ; CODE XREF: sub_402410+397↑j
.text:004027B3                 mov     edx, ds:dword_409090
.text:004027B9                 test    edx, edx
.text:004027BB                 jz      short loc_4027D4
.text:004027BD                 test    bl, bl
.text:004027BF                 jnz     loc_4028B7
.text:004027C5                 mov     edi, [esp+8Ch+var_68]
.text:004027C9                 or      edi, [esp+8Ch+var_6C]
.text:004027CD                 jz      short loc_4027D4
.text:004027CF                 mov     [esp+8Ch+var_6D], 0
.text:004027D4
.text:004027D4 loc_4027D4:                             ; CODE XREF: sub_402410+3AB↑j
.text:004027D4                                         ; sub_402410+3BD↑j ...
.text:004027D4                 test    bl, bl
.text:004027D6                 jz      short loc_4027E1
.text:004027D8                 cmp     ds:byte_409070, 0
.text:004027DF                 jz      short loc_402858
.text:004027E1
.text:004027E1 loc_4027E1:                             ; CODE XREF: sub_402410+3C6↑j
.text:004027E1                 mov     eax, [esp+8Ch+var_68]
.text:004027E5                 or      eax, [esp+8Ch+var_6C]
.text:004027E9                 jnz     loc_40289B
.text:004027EF                 cmp     ds:byte_409050, 0
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_402410+496↓j
.text:004027F6                                         ; sub_402410+4A2↓j
.text:004027F6                 jz      short loc_402828
.text:004027F8                 mov     ecx, ds:dword_409040
.text:004027FE                 test    ecx, ecx
.text:00402800                 jz      short loc_40286C
.text:00402802
.text:00402802 loc_402802:                             ; CODE XREF: sub_402410+486↓j
.text:00402802                 mov     eax, [esp+8Ch+File]
.text:00402806                 mov     esi, [esp+8Ch+var_4C]
.text:0040280A                 mov     [esp+8Ch+Stream], eax ; Stream
.text:0040280E                 mov     edi, [esi+4]
.text:00402811                 mov     [esp+8Ch+ElementSize], 1 ; ElementSize
.text:00402819                 mov     [esp+8Ch+ElementCount], edi ; ElementCount
.text:0040281D                 mov     ecx, [esi+8]
.text:00402820                 mov     [esp+8Ch+Buffer], ecx ; Buffer
.text:00402823                 call    fwrite
.text:00402828
.text:00402828 loc_402828:                             ; CODE XREF: sub_402410:loc_4027F6↑j
.text:00402828                 mov     dword ptr [esp+8Ch+var_60], ebp
.text:0040282C                 mov     ecx, [esp+8Ch+var_4C]
.text:00402830                 test    bl, bl
.text:00402832                 mov     esi, [esp+8Ch+var_48]
.text:00402836                 mov     edx, [esp+8Ch+var_74]
.text:0040283A                 mov     [esp+8Ch+var_48], ecx
.text:0040283E                 mov     [esp+8Ch+var_4C], esi
.text:00402842                 mov     [esp+8Ch+var_5C], edx
.text:00402846                 jnz     short loc_402858
.text:00402848                 mov     [esp+8Ch+var_6C], 0
.text:00402850                 mov     [esp+8Ch+var_68], 0
.text:00402858
.text:00402858 loc_402858:                             ; CODE XREF: sub_402410+3CF↑j
.text:00402858                                         ; sub_402410+436↑j
.text:00402858                 mov     ebp, [esp+8Ch+var_40]
.text:0040285C                 mov     eax, [ebp+0Ch]
.text:0040285F                 test    al, 10h
.text:00402861                 jz      loc_4026EE
.text:00402867                 jmp     loc_402544
.text:0040286C ; ---------------------------------------------------------------------------
.text:0040286C
.text:0040286C loc_40286C:                             ; CODE XREF: sub_402410+3F0↑j
.text:0040286C                 mov     [esp+8Ch+ElementSize], offset Format ; "%7I64u "
.text:00402874                 mov     edx, [esp+8Ch+var_6C]
.text:00402878                 mov     edi, [esp+8Ch+var_68]
.text:0040287C                 mov     esi, [esp+8Ch+File]
.text:00402880                 add     edx, 1
.text:00402883                 adc     edi, 0
.text:00402886                 mov     [esp+8Ch+ElementCount], edx
.text:0040288A                 mov     [esp+8Ch+Stream], edi
.text:0040288E                 mov     [esp+8Ch+Buffer], esi ; Stream
.text:00402891                 call    fprintf
.text:00402896                 jmp     loc_402802
.text:0040289B ; ---------------------------------------------------------------------------
.text:0040289B
.text:0040289B loc_40289B:                             ; CODE XREF: sub_402410+3D9↑j
.text:0040289B                 test    bl, bl
.text:0040289D                 jnz     short loc_4028AB
.text:0040289F                 cmp     ds:byte_409060, 0
.text:004028A6                 jmp     loc_4027F6
.text:004028AB ; ---------------------------------------------------------------------------
.text:004028AB
.text:004028AB loc_4028AB:                             ; CODE XREF: sub_402410+48D↑j
.text:004028AB                 cmp     ds:byte_409070, 0
.text:004028B2                 jmp     loc_4027F6
.text:004028B7 ; ---------------------------------------------------------------------------
.text:004028B7
.text:004028B7 loc_4028B7:                             ; CODE XREF: sub_402410+3AF↑j
.text:004028B7                 mov     ecx, [esp+8Ch+var_6C]
.text:004028BB                 xor     ecx, 1
.text:004028BE                 or      ecx, [esp+8Ch+var_68]
.text:004028C2                 jnz     loc_4027D4
.text:004028C8                 cmp     edx, 1
.text:004028CB                 jz      short loc_4028E1
.text:004028CD                 cmp     edx, 2
.text:004028D0                 jnz     loc_4027D4
.text:004028D6                 cmp     [esp+8Ch+var_6D], 0
.text:004028DB                 jnz     loc_4027D4
.text:004028E1
.text:004028E1 loc_4028E1:                             ; CODE XREF: sub_402410+4BB↑j
.text:004028E1                 mov     edx, [esp+8Ch+File]
.text:004028E5                 mov     esi, [edx+4]
.text:004028E8                 dec     esi
.text:004028E9                 mov     [edx+4], esi
.text:004028EC                 test    esi, esi
.text:004028EE                 js      short loc_4028FC
.text:004028F0                 mov     edi, [edx]
.text:004028F2                 mov     byte ptr [edi], 0Ah
.text:004028F5                 inc     dword ptr [edx]
.text:004028F7                 jmp     loc_4027D4
.text:004028FC ; ---------------------------------------------------------------------------
.text:004028FC
.text:004028FC loc_4028FC:                             ; CODE XREF: sub_402410+4DE↑j
.text:004028FC                 mov     [esp+8Ch+Buffer], 0Ah ; Ch
.text:00402903                 mov     edx, [esp+8Ch+File]
.text:00402907                 mov     [esp+8Ch+ElementSize], edx ; File
.text:0040290B                 call    _flsbuf
.text:00402910                 jmp     loc_4027D4
.text:00402915 ; ---------------------------------------------------------------------------
.text:00402915
.text:00402915 loc_402915:                             ; CODE XREF: sub_402410+36F↑j
.text:00402915                 mov     [esp+8Ch+ElementCount], edx
.text:00402919                 mov     esi, [esp+8Ch+var_5C]
.text:0040291D                 mov     ecx, [esp+8Ch+var_74]
.text:00402921                 mov     [esp+8Ch+ElementSize], esi
.text:00402925                 mov     [esp+8Ch+Buffer], ecx
.text:00402928                 call    sub_404DA0
.text:0040292D                 test    eax, eax
.text:0040292F
.text:0040292F loc_40292F:                             ; CODE XREF: sub_402410+54C↓j
.text:0040292F                 jz      loc_402787
.text:00402935                 jmp     loc_402785
.text:0040293A ; ---------------------------------------------------------------------------
.text:0040293A
.text:0040293A loc_40293A:                             ; CODE XREF: sub_402410+365↑j
.text:0040293A                 cmp     ds:byte_409000, 0
.text:00402941                 jnz     short loc_40295E
.text:00402943                 xor     ebx, ebx
.text:00402945                 cmp     edx, ecx
.text:00402947                 jnz     loc_402785
.text:0040294D                 cld
.text:0040294E                 mov     esi, [esp+8Ch+var_74]
.text:00402952                 cmp     edx, edx
.text:00402954                 mov     edi, [esp+8Ch+var_5C]
.text:00402958                 mov     ecx, edx
.text:0040295A                 repe cmpsb
.text:0040295C                 jmp     short loc_40292F
.text:0040295E ; ---------------------------------------------------------------------------
.text:0040295E
.text:0040295E loc_40295E:                             ; CODE XREF: sub_402410+531↑j
.text:0040295E                 mov     [esp+8Ch+ElementSize], edx ; int
.text:00402962                 mov     ebx, [esp+8Ch+var_5C]
.text:00402966                 mov     edi, [esp+8Ch+var_74]
.text:0040296A                 mov     [esp+8Ch+Stream], ecx ; char
.text:0040296E                 mov     [esp+8Ch+ElementCount], ebx ; char *
.text:00402972                 mov     [esp+8Ch+Buffer], edi ; char *
.text:00402975                 call    sub_404C70
.text:0040297A                 test    eax, eax
.text:0040297C                 setnz   dl
.text:0040297F                 movzx   eax, dl
.text:00402982                 jmp     loc_40278A
.text:00402987 ; ---------------------------------------------------------------------------
.text:00402987
.text:00402987 loc_402987:                             ; CODE XREF: sub_402410+317↑j
.text:00402987                                         ; sub_402410+5AE↓j ...
.text:00402987                 movzx   eax, byte ptr [edx+ebx]
.text:0040298B                 cmp     al, 20h ; ' '
.text:0040298D                 jz      short loc_4029C5
.text:0040298F                 cmp     al, 9
.text:00402991                 jz      short loc_4029C5
.text:00402993                 lea     esi, [esi+0]
.text:00402999                 lea     edi, [edi+0]
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_402410+5A1↓j
.text:004029A0                 cmp     edx, ecx
.text:004029A2                 jnb     short loc_4029B3
.text:004029A4                 movzx   eax, byte ptr [edx+ebx]
.text:004029A8                 cmp     al, 20h ; ' '
.text:004029AA                 jz      short loc_4029B3
.text:004029AC                 cmp     al, 9
.text:004029AE                 jz      short loc_4029B3
.text:004029B0                 inc     edx
.text:004029B1                 jmp     short loc_4029A0
.text:004029B3 ; ---------------------------------------------------------------------------
.text:004029B3
.text:004029B3 loc_4029B3:                             ; CODE XREF: sub_402410+592↑j
.text:004029B3                                         ; sub_402410+59A↑j ...
.text:004029B3                 inc     esi
.text:004029B4                 cmp     esi, ebp
.text:004029B6                 jnb     loc_40272D
.text:004029BC                 cmp     edx, ecx
.text:004029BE                 jb      short loc_402987
.text:004029C0                 jmp     loc_40272D
.text:004029C5 ; ---------------------------------------------------------------------------
.text:004029C5
.text:004029C5 loc_4029C5:                             ; CODE XREF: sub_402410+57D↑j
.text:004029C5                                         ; sub_402410+581↑j
.text:004029C5                 inc     edx
.text:004029C6                 cmp     edx, ecx
.text:004029C8                 jnb     short loc_4029B3
.text:004029CA                 jmp     short loc_402987
.text:004029CC ; ---------------------------------------------------------------------------
.text:004029CC
.text:004029CC loc_4029CC:                             ; CODE XREF: sub_402410+2F4↑j
.text:004029CC                 mov     ebx, [esp+8Ch+var_40]
.text:004029D0                 mov     eax, [ebx+0Ch]
.text:004029D3                 test    al, 20h
.text:004029D5                 jz      loc_402544
.text:004029DB                 jmp     loc_402596
.text:004029E0 ; ---------------------------------------------------------------------------
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_402410+F9↑j
.text:004029E0                                         ; sub_402410+5FE↓j ...
.text:004029E0                 movzx   eax, byte ptr [edx+ebx]
.text:004029E4                 cmp     al, 20h ; ' '
.text:004029E6                 jz      short loc_402A15
.text:004029E8                 cmp     al, 9
.text:004029EA                 jz      short loc_402A15
.text:004029EC                 lea     esi, [esi+0]
.text:004029F0
.text:004029F0 loc_4029F0:                             ; CODE XREF: sub_402410+5F1↓j
.text:004029F0                 cmp     edx, ecx
.text:004029F2                 jnb     short loc_402A03
.text:004029F4                 movzx   eax, byte ptr [edx+ebx]
.text:004029F8                 cmp     al, 20h ; ' '
.text:004029FA                 jz      short loc_402A03
.text:004029FC                 cmp     al, 9
.text:004029FE                 jz      short loc_402A03
.text:00402A00                 inc     edx
.text:00402A01                 jmp     short loc_4029F0
.text:00402A03 ; ---------------------------------------------------------------------------
.text:00402A03
.text:00402A03 loc_402A03:                             ; CODE XREF: sub_402410+5E2↑j
.text:00402A03                                         ; sub_402410+5EA↑j ...
.text:00402A03                 inc     esi
.text:00402A04                 cmp     esi, ebp
.text:00402A06                 jnb     loc_40250F
.text:00402A0C                 cmp     edx, ecx
.text:00402A0E                 jb      short loc_4029E0
.text:00402A10                 jmp     loc_40250F
.text:00402A15 ; ---------------------------------------------------------------------------
.text:00402A15
.text:00402A15 loc_402A15:                             ; CODE XREF: sub_402410+5D6↑j
.text:00402A15                                         ; sub_402410+5DA↑j
.text:00402A15                 inc     edx
.text:00402A16                 cmp     edx, ecx
.text:00402A18                 jnb     short loc_402A03
.text:00402A1A                 jmp     short loc_4029E0
.text:00402A1C ; ---------------------------------------------------------------------------
.text:00402A1C
.text:00402A1C loc_402A1C:                             ; CODE XREF: sub_402410+A5↑j
.text:00402A1C                 mov     ebx, [esp+8Ch+var_40]
.text:00402A20                 mov     eax, [ebx+0Ch]
.text:00402A23                 test    al, 10h
.text:00402A25                 jnz     loc_402596
.text:00402A2B
.text:00402A2B loc_402A2B:                             ; CODE XREF: sub_402410+70A↓j
.text:00402A2B                 mov     edi, [esp+8Ch+var_40]
.text:00402A2F                 mov     esi, [esp+8Ch+var_48]
.text:00402A33                 mov     [esp+8Ch+ElementSize], edi
.text:00402A37                 mov     [esp+8Ch+Buffer], esi
.text:00402A3A                 call    sub_404AF0
.text:00402A3F                 test    eax, eax
.text:00402A41                 jz      loc_40258F
.text:00402A47                 mov     ebp, [esp+8Ch+var_48]
.text:00402A4B                 xor     edx, edx
.text:00402A4D                 xor     esi, esi
.text:00402A4F                 mov     edi, [ebp+4]
.text:00402A52                 mov     ebx, [ebp+8]
.text:00402A55                 mov     ebp, ds:dword_409010
.text:00402A5B                 lea     ecx, [edi-1]
.text:00402A5E                 cmp     edx, ebp
.text:00402A60                 jnb     short loc_402A6A
.text:00402A62                 cmp     edx, ecx
.text:00402A64                 jb      loc_402B97
.text:00402A6A
.text:00402A6A loc_402A6A:                             ; CODE XREF: sub_402410+650↑j
.text:00402A6A                                         ; sub_402410+7B6↓j ...
.text:00402A6A                 mov     eax, ds:dword_409020
.text:00402A6F                 xor     esi, esi
.text:00402A71                 cmp     esi, eax
.text:00402A73                 jnb     short loc_402A83
.text:00402A75                 cmp     edx, ecx
.text:00402A77                 jnb     short loc_402A83
.text:00402A79
.text:00402A79 loc_402A79:                             ; CODE XREF: sub_402410+671↓j
.text:00402A79                 inc     esi
.text:00402A7A                 inc     edx
.text:00402A7B                 cmp     esi, eax
.text:00402A7D                 jnb     short loc_402A83
.text:00402A7F                 cmp     edx, ecx
.text:00402A81                 jb      short loc_402A79
.text:00402A83
.text:00402A83 loc_402A83:                             ; CODE XREF: sub_402410+663↑j
.text:00402A83                                         ; sub_402410+667↑j ...
.text:00402A83                 mov     ecx, [esp+8Ch+var_4C]
.text:00402A87                 sub     edi, edx
.text:00402A89                 lea     ebp, [edx+ebx]
.text:00402A8C                 lea     ebx, [edi-1]
.text:00402A8F                 mov     eax, [ecx+4]
.text:00402A92                 test    eax, eax
.text:00402A94                 jz      short loc_402AD3
.text:00402A96                 mov     eax, ds:dword_409030
.text:00402A9B                 mov     edx, ebx
.text:00402A9D                 mov     ecx, dword ptr [esp+8Ch+var_54]
.text:00402AA1                 cmp     eax, ebx
.text:00402AA3                 jnb     short loc_402AA7
.text:00402AA5                 mov     edx, eax
.text:00402AA7
.text:00402AA7 loc_402AA7:                             ; CODE XREF: sub_402410+693↑j
.text:00402AA7                 cmp     eax, dword ptr [esp+8Ch+var_54]
.text:00402AAB                 jnb     short loc_402AAF
.text:00402AAD                 mov     ecx, eax
.text:00402AAF
.text:00402AAF loc_402AAF:                             ; CODE XREF: sub_402410+69B↑j
.text:00402AAF                 cmp     ds:byte_409080, 0
.text:00402AB6                 jz      loc_402B40
.text:00402ABC                 mov     [esp+8Ch+var_55], 0
.text:00402AC1                 cmp     edx, ecx
.text:00402AC3                 jz      short loc_402B25
.text:00402AC5
.text:00402AC5 loc_402AC5:                             ; CODE XREF: sub_402410+72D↓j
.text:00402AC5                 mov     [esp+8Ch+var_55], 1
.text:00402ACA
.text:00402ACA loc_402ACA:                             ; CODE XREF: sub_402410+72B↓j
.text:00402ACA                 movzx   eax, [esp+8Ch+var_55]
.text:00402ACF
.text:00402ACF loc_402ACF:                             ; CODE XREF: sub_402410+74C↓j
.text:00402ACF                                         ; sub_402410+782↓j
.text:00402ACF                 test    al, al
.text:00402AD1                 jz      short loc_402B11
.text:00402AD3
.text:00402AD3 loc_402AD3:                             ; CODE XREF: sub_402410+684↑j
.text:00402AD3                 mov     edi, [esp+8Ch+File]
.text:00402AD7                 mov     esi, [esp+8Ch+var_48]
.text:00402ADB                 mov     [esp+8Ch+Stream], edi ; Stream
.text:00402ADF                 mov     edx, [esi+4]
.text:00402AE2                 mov     [esp+8Ch+ElementSize], 1 ; ElementSize
.text:00402AEA                 mov     [esp+8Ch+ElementCount], edx ; ElementCount
.text:00402AEE                 mov     ecx, [esi+8]
.text:00402AF1                 mov     [esp+8Ch+Buffer], ecx ; Buffer
.text:00402AF4                 call    fwrite
.text:00402AF9                 mov     [esp+8Ch+var_50], ebp
.text:00402AFD                 mov     edi, [esp+8Ch+var_4C]
.text:00402B01                 mov     eax, [esp+8Ch+var_48]
.text:00402B05                 mov     dword ptr [esp+8Ch+var_54], ebx
.text:00402B09                 mov     [esp+8Ch+var_48], edi
.text:00402B0D                 mov     [esp+8Ch+var_4C], eax
.text:00402B11
.text:00402B11 loc_402B11:                             ; CODE XREF: sub_402410+6C1↑j
.text:00402B11                 mov     ebx, [esp+8Ch+var_40]
.text:00402B15                 mov     eax, [ebx+0Ch]
.text:00402B18                 test    al, 10h
.text:00402B1A                 jz      loc_402A2B
.text:00402B20                 jmp     loc_402596
.text:00402B25 ; ---------------------------------------------------------------------------
.text:00402B25
.text:00402B25 loc_402B25:                             ; CODE XREF: sub_402410+6B3↑j
.text:00402B25                 mov     [esp+8Ch+ElementCount], edx
.text:00402B29                 mov     edx, [esp+8Ch+var_50]
.text:00402B2D                 mov     [esp+8Ch+Buffer], ebp
.text:00402B30                 mov     [esp+8Ch+ElementSize], edx
.text:00402B34                 call    sub_404DA0
.text:00402B39                 test    eax, eax
.text:00402B3B                 jz      short loc_402ACA
.text:00402B3D                 jmp     short loc_402AC5
.text:00402B3D ; ---------------------------------------------------------------------------
.text:00402B3F                 align 10h
.text:00402B40
.text:00402B40 loc_402B40:                             ; CODE XREF: sub_402410+6A6↑j
.text:00402B40                 cmp     ds:byte_409000, 0
.text:00402B47                 jnz     short loc_402B72
.text:00402B49                 mov     [esp+8Ch+var_56], 0
.text:00402B4E                 cmp     edx, ecx
.text:00402B50                 jz      short loc_402B61
.text:00402B52
.text:00402B52 loc_402B52:                             ; CODE XREF: sub_402410+760↓j
.text:00402B52                 mov     [esp+8Ch+var_56], 1
.text:00402B57
.text:00402B57 loc_402B57:                             ; CODE XREF: sub_402410+75E↓j
.text:00402B57                 movzx   eax, [esp+8Ch+var_56]
.text:00402B5C                 jmp     loc_402ACF
.text:00402B61 ; ---------------------------------------------------------------------------
.text:00402B61
.text:00402B61 loc_402B61:                             ; CODE XREF: sub_402410+740↑j
.text:00402B61                 cld
.text:00402B62                 mov     edi, [esp+8Ch+var_50]
.text:00402B66                 cmp     edx, edx
.text:00402B68                 mov     esi, ebp
.text:00402B6A                 mov     ecx, edx
.text:00402B6C                 repe cmpsb
.text:00402B6E                 jz      short loc_402B57
.text:00402B70                 jmp     short loc_402B52
.text:00402B72 ; ---------------------------------------------------------------------------
.text:00402B72
.text:00402B72 loc_402B72:                             ; CODE XREF: sub_402410+737↑j
.text:00402B72                 mov     [esp+8Ch+Stream], ecx ; char
.text:00402B76                 mov     esi, [esp+8Ch+var_50]
.text:00402B7A                 mov     [esp+8Ch+ElementSize], edx ; int
.text:00402B7E                 mov     [esp+8Ch+Buffer], ebp ; char *
.text:00402B81                 mov     [esp+8Ch+ElementCount], esi ; char *
.text:00402B85                 call    sub_404C70
.text:00402B8A                 test    eax, eax
.text:00402B8C                 setnz   cl
.text:00402B8F                 movzx   eax, cl
.text:00402B92                 jmp     loc_402ACF
.text:00402B97 ; ---------------------------------------------------------------------------
.text:00402B97
.text:00402B97 loc_402B97:                             ; CODE XREF: sub_402410+654↑j
.text:00402B97                                         ; sub_402410+7BE↓j ...
.text:00402B97                 movzx   eax, byte ptr [edx+ebx]
.text:00402B9B                 cmp     al, 20h ; ' '
.text:00402B9D                 jz      short loc_402BD5
.text:00402B9F                 cmp     al, 9
.text:00402BA1                 jz      short loc_402BD5
.text:00402BA3                 lea     esi, [esi+0]
.text:00402BA9                 lea     edi, [edi+0]
.text:00402BB0
.text:00402BB0 loc_402BB0:                             ; CODE XREF: sub_402410+7B1↓j
.text:00402BB0                 cmp     edx, ecx
.text:00402BB2                 jnb     short loc_402BC3
.text:00402BB4                 movzx   eax, byte ptr [edx+ebx]
.text:00402BB8                 cmp     al, 20h ; ' '
.text:00402BBA                 jz      short loc_402BC3
.text:00402BBC                 cmp     al, 9
.text:00402BBE                 jz      short loc_402BC3
.text:00402BC0                 inc     edx
.text:00402BC1                 jmp     short loc_402BB0
.text:00402BC3 ; ---------------------------------------------------------------------------
.text:00402BC3
.text:00402BC3 loc_402BC3:                             ; CODE XREF: sub_402410+7A2↑j
.text:00402BC3                                         ; sub_402410+7AA↑j ...
.text:00402BC3                 inc     esi
.text:00402BC4                 cmp     esi, ebp
.text:00402BC6                 jnb     loc_402A6A
.text:00402BCC                 cmp     edx, ecx
.text:00402BCE                 jb      short loc_402B97
.text:00402BD0                 jmp     loc_402A6A
.text:00402BD5 ; ---------------------------------------------------------------------------
.text:00402BD5
.text:00402BD5 loc_402BD5:                             ; CODE XREF: sub_402410+78D↑j
.text:00402BD5                                         ; sub_402410+791↑j
.text:00402BD5                 inc     edx
.text:00402BD6                 cmp     edx, ecx
.text:00402BD8                 jnb     short loc_402BC3
.text:00402BDA                 jmp     short loc_402B97
.text:00402BDC ; ---------------------------------------------------------------------------
.text:00402BDC
.text:00402BDC loc_402BDC:                             ; CODE XREF: sub_402410+62↑j
.text:00402BDC                 call    _errno
.text:00402BE1                 mov     [esp+8Ch+ElementCount], offset aS_5 ; "%s"
.text:00402BE9                 mov     ebp, [esp+8Ch+FileName]
.text:00402BF0                 mov     [esp+8Ch+Stream], ebp ; char
.text:00402BF4                 mov     edi, [eax]
.text:00402BF6                 mov     [esp+8Ch+Buffer], 1 ; Code
.text:00402BFD                 mov     [esp+8Ch+ElementSize], edi ; ErrorMessage
.text:00402C01                 call    sub_406BD0
.text:00402C06                 jmp     loc_402478
.text:00402C0B ; ---------------------------------------------------------------------------
.text:00402C0B
.text:00402C0B loc_402C0B:                             ; CODE XREF: sub_402410+4A↑j
.text:00402C0B                 mov     [esp+8Ch+ElementSize], offset aW ; "w"
.text:00402C13                 mov     ebx, [esp+8Ch+FileName]
.text:00402C1A                 mov     [esp+8Ch+Buffer], ebx ; FileName
.text:00402C1D                 call    fopen
.text:00402C22                 jmp     loc_402468
.text:00402C27 ; ---------------------------------------------------------------------------
.text:00402C27
.text:00402C27 loc_402C27:                             ; CODE XREF: sub_402410+30↑j
.text:00402C27                 call    _errno
.text:00402C2C                 mov     [esp+8Ch+ElementCount], offset aS_5 ; "%s"
.text:00402C34                 mov     ecx, [esp+8Ch+arg_0]
.text:00402C3B                 mov     [esp+8Ch+Stream], ecx ; char
.text:00402C3F                 mov     edx, [eax]
.text:00402C41                 mov     [esp+8Ch+Buffer], 1 ; Code
.text:00402C48                 mov     [esp+8Ch+ElementSize], edx ; ErrorMessage
.text:00402C4C                 call    sub_406BD0
.text:00402C51                 jmp     loc_402446
.text:00402C56 ; ---------------------------------------------------------------------------
.text:00402C56
.text:00402C56 loc_402C56:                             ; CODE XREF: sub_402410+1B↑j
.text:00402C56                 mov     [esp+8Ch+ElementSize], offset aR ; "r"
.text:00402C5E                 mov     eax, [esp+8Ch+arg_0]
.text:00402C65                 mov     [esp+8Ch+Buffer], eax ; FileName
.text:00402C68                 call    fopen
.text:00402C6D                 jmp     loc_402436
.text:00402C6D sub_402410      endp
.text:00402C6D
.text:00402C6D ; ---------------------------------------------------------------------------
.text:00402C72                 align 10h
.text:00402C80 dword_402C80    dd 90002D2Dh, 7 dup(90909090h)
.text:00402C80                                         ; DATA XREF: sub_402ED0+E4↓o
.text:00402CA0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402CA0                                         ; DATA XREF: sub_402ED0+2FC↓o
.text:00402CCD                 align 20h
.text:00402CE0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402CE0                                         ; DATA XREF: sub_402ED0:loc_403232↓o
.text:00402D0D                 align 20h
.text:00402D20 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402D20                                         ; DATA XREF: sub_402ED0:loc_4032D0↓o
.text:00402D20                                         ; sub_402ED0:loc_403697↓o
.text:00402D46                 align 20h
.text:00402D60 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402D60                                         ; DATA XREF: sub_402ED0+48E↓o
.text:00402D80 dword_402D80    dd 90909000h, 7 dup(90909090h)
.text:00402D80                                         ; DATA XREF: sub_402ED0:loc_4033A1↓o
.text:00402DA0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402DA0                                         ; DATA XREF: sub_402ED0:loc_4033BA↓o
.text:00402DC0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402DC0                                         ; DATA XREF: sub_402ED0:loc_40349F↓o
.text:00402DC0                                         ; sub_402ED0:loc_4037CC↓o
.text:00402DE7                 align 20h
.text:00402E00 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402E00                                         ; DATA XREF: sub_402ED0:loc_403613↓o
.text:00402E2E                 align 20h
.text:00402E40 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402E40                                         ; DATA XREF: sub_402ED0:loc_4036FF↓o
.text:00402E61 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402E61                                         ; DATA XREF: sub_402ED0+93F↓o
.text:00402E7B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402E7B                                         ; DATA XREF: sub_402ED0:loc_403847↓o
.text:00402E95 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402E95                                         ; DATA XREF: sub_402ED0:loc_40386E↓o
.text:00402EB3 ; const char aPosixlyCorrect_0[]
.text:00402EB3 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00402EB3                                         ; DATA XREF: sub_402ED0:loc_403A20↓o
.text:00402EC3                 align 10h
.text:00402ED0
.text:00402ED0 ; =============== S U B R O U T I N E =======================================
.text:00402ED0
.text:00402ED0
.text:00402ED0 ; int __cdecl sub_402ED0(int, int, char *Str, int, int, int, int, int)
.text:00402ED0 sub_402ED0      proc near               ; CODE XREF: sub_403A60+5A↓p
.text:00402ED0                                         ; .text:00403B4A↓p ...
.text:00402ED0
.text:00402ED0 Str1            = dword ptr -5Ch
.text:00402ED0 Str2            = dword ptr -58h
.text:00402ED0 MaxCount        = dword ptr -54h
.text:00402ED0 var_50          = dword ptr -50h
.text:00402ED0 var_4C          = dword ptr -4Ch
.text:00402ED0 var_3C          = dword ptr -3Ch
.text:00402ED0 var_38          = dword ptr -38h
.text:00402ED0 var_34          = dword ptr -34h
.text:00402ED0 var_30          = dword ptr -30h
.text:00402ED0 var_2C          = dword ptr -2Ch
.text:00402ED0 var_28          = dword ptr -28h
.text:00402ED0 var_24          = dword ptr -24h
.text:00402ED0 var_20          = dword ptr -20h
.text:00402ED0 var_1C          = dword ptr -1Ch
.text:00402ED0 var_18          = dword ptr -18h
.text:00402ED0 var_14          = dword ptr -14h
.text:00402ED0 arg_0           = dword ptr  4
.text:00402ED0 arg_4           = dword ptr  8
.text:00402ED0 Str             = dword ptr  0Ch
.text:00402ED0 arg_C           = dword ptr  10h
.text:00402ED0 arg_10          = dword ptr  14h
.text:00402ED0 arg_14          = dword ptr  18h
.text:00402ED0 arg_18          = dword ptr  1Ch
.text:00402ED0 arg_1C          = dword ptr  20h
.text:00402ED0
.text:00402ED0                 push    ebp
.text:00402ED1                 mov     eax, 0FFFFFFFFh
.text:00402ED6                 push    edi
.text:00402ED7                 push    esi
.text:00402ED8                 push    ebx
.text:00402ED9                 sub     esp, 4Ch
.text:00402EDC                 mov     esi, [esp+5Ch+Str]
.text:00402EE0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402EE4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402EE7                 mov     ebx, [ebp+4]
.text:00402EEA                 setz    dl
.text:00402EED                 movzx   ecx, dl
.text:00402EF0                 dec     ecx
.text:00402EF1                 and     ecx, ebx
.text:00402EF3                 mov     [esp+5Ch+var_14], ecx
.text:00402EF7                 mov     ecx, [esp+5Ch+arg_0]
.text:00402EFB                 test    ecx, ecx
.text:00402EFD                 jle     loc_403027
.text:00402F03                 mov     dword ptr [ebp+0Ch], 0
.text:00402F0A                 mov     ebx, [ebp+0]
.text:00402F0D                 test    ebx, ebx
.text:00402F0F                 jz      loc_403A40
.text:00402F15                 mov     edi, [ebp+10h]
.text:00402F18                 test    edi, edi
.text:00402F1A                 jnz     short loc_402F73
.text:00402F1C                 lea     esi, [esi+0]
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402ED0+B7C↓j
.text:00402F20                 mov     [ebp+24h], ebx
.text:00402F23                 mov     esi, [esp+5Ch+Str]
.text:00402F27                 mov     [ebp+20h], ebx
.text:00402F2A                 mov     ecx, [esp+5Ch+arg_18]
.text:00402F2E                 xor     ebx, ebx
.text:00402F30                 mov     dword ptr [ebp+14h], 0
.text:00402F37                 test    ecx, ecx
.text:00402F39                 jz      loc_403A20
.text:00402F3F
.text:00402F3F loc_402F3F:                             ; CODE XREF: sub_402ED0+B64↓j
.text:00402F3F                 mov     ebx, 1
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_402ED0+B5E↓j
.text:00402F44                 mov     [ebp+1Ch], ebx
.text:00402F47                 mov     ecx, [esp+5Ch+Str]
.text:00402F4B                 movzx   eax, byte ptr [ecx]
.text:00402F4E                 cmp     al, 2Dh ; '-'
.text:00402F50                 jz      loc_403A10
.text:00402F56                 cmp     al, 2Bh ; '+'
.text:00402F58                 jz      loc_4039F9
.text:00402F5E                 xor     edx, edx
.text:00402F60                 test    ebx, ebx
.text:00402F62                 setz    dl
.text:00402F65                 mov     [ebp+18h], edx
.text:00402F68
.text:00402F68 loc_402F68:                             ; CODE XREF: sub_402ED0+B35↓j
.text:00402F68                 mov     [esp+5Ch+Str], esi
.text:00402F6C                 mov     dword ptr [ebp+10h], 1
.text:00402F73
.text:00402F73 loc_402F73:                             ; CODE XREF: sub_402ED0+4A↑j
.text:00402F73                 mov     eax, [ebp+14h]
.text:00402F76                 test    eax, eax
.text:00402F78                 jz      short loc_402F83
.text:00402F7A                 cmp     byte ptr [eax], 0
.text:00402F7D                 jnz     loc_403060
.text:00402F83
.text:00402F83 loc_402F83:                             ; CODE XREF: sub_402ED0+A8↑j
.text:00402F83                 mov     ebx, [ebp+0]
.text:00402F86                 cmp     [ebp+24h], ebx
.text:00402F89                 jle     short loc_402F8E
.text:00402F8B                 mov     [ebp+24h], ebx
.text:00402F8E
.text:00402F8E loc_402F8E:                             ; CODE XREF: sub_402ED0+B9↑j
.text:00402F8E                 cmp     [ebp+20h], ebx
.text:00402F91                 jle     short loc_402F96
.text:00402F93                 mov     [ebp+20h], ebx
.text:00402F96
.text:00402F96 loc_402F96:                             ; CODE XREF: sub_402ED0+C1↑j
.text:00402F96                 cmp     dword ptr [ebp+18h], 1
.text:00402F9A                 jz      loc_403970
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402ED0+B13↓j
.text:00402FA0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402FA4                 jz      loc_403954
.text:00402FAA                 cld
.text:00402FAB                 mov     ecx, [esp+5Ch+arg_4]
.text:00402FAF                 mov     edx, 3
.text:00402FB4                 mov     edi, offset dword_402C80
.text:00402FB9                 mov     esi, [ecx+ebx*4]
.text:00402FBC                 mov     ecx, edx
.text:00402FBE                 repe cmpsb
.text:00402FC0                 jnz     short loc_402FFC
.text:00402FC2                 mov     edx, [ebp+24h]
.text:00402FC5                 lea     eax, [ebx+1]
.text:00402FC8                 cmp     [ebp+20h], edx
.text:00402FCB                 mov     [ebp+0], eax
.text:00402FCE                 jz      loc_403968
.text:00402FD4                 cmp     edx, eax
.text:00402FD6                 jz      short loc_402FF0
.text:00402FD8                 mov     [esp+5Ch+Str2], ebp
.text:00402FDC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FE0                 mov     [esp+5Ch+Str1], ebx
.text:00402FE3                 call    sub_403B80
.text:00402FE8                 nop
.text:00402FE9                 lea     esi, [esi+0]
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402ED0+106↑j
.text:00402FF0                                         ; sub_402ED0+A9B↓j
.text:00402FF0                 mov     eax, [esp+5Ch+arg_0]
.text:00402FF4                 mov     ebx, eax
.text:00402FF6                 mov     [ebp+24h], eax
.text:00402FF9                 mov     [ebp+0], eax
.text:00402FFC
.text:00402FFC loc_402FFC:                             ; CODE XREF: sub_402ED0+F0↑j
.text:00402FFC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403000                 jz      loc_403954
.text:00403006                 mov     esi, [esp+5Ch+arg_4]
.text:0040300A                 mov     eax, [esi+ebx*4]
.text:0040300D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403010                 jz      short loc_403037
.text:00403012
.text:00403012 loc_403012:                             ; CODE XREF: sub_402ED0+16D↓j
.text:00403012                 mov     edx, [ebp+18h]
.text:00403015                 test    edx, edx
.text:00403017                 jz      short loc_403030
.text:00403019                 mov     [ebp+0Ch], eax
.text:0040301C                 lea     edi, [ebx+1]
.text:0040301F                 mov     eax, 1
.text:00403024                 mov     [ebp+0], edi
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402ED0+2D↑j
.text:00403027                                         ; sub_402ED0+165↓j ...
.text:00403027                 add     esp, 4Ch
.text:0040302A                 pop     ebx
.text:0040302B                 pop     esi
.text:0040302C                 pop     edi
.text:0040302D                 pop     ebp
.text:0040302E                 retn
.text:0040302E ; ---------------------------------------------------------------------------
.text:0040302F                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402ED0+147↑j
.text:00403030                                         ; sub_402ED0+A8A↓j ...
.text:00403030                 mov     eax, 0FFFFFFFFh
.text:00403035                 jmp     short loc_403027
.text:00403037 ; ---------------------------------------------------------------------------
.text:00403037
.text:00403037 loc_403037:                             ; CODE XREF: sub_402ED0+140↑j
.text:00403037                 movzx   edx, byte ptr [eax+1]
.text:0040303B                 test    dl, dl
.text:0040303D                 jz      short loc_403012
.text:0040303F                 mov     ebx, [esp+5Ch+arg_C]
.text:00403043                 xor     ecx, ecx
.text:00403045                 test    ebx, ebx
.text:00403047                 jz      short loc_403052
.text:00403049                 cmp     dl, 2Dh ; '-'
.text:0040304C                 jz      loc_40394A
.text:00403052
.text:00403052 loc_403052:                             ; CODE XREF: sub_402ED0+177↑j
.text:00403052                                         ; sub_402ED0+A7F↓j
.text:00403052                 lea     esi, [ecx+eax+1]
.text:00403056                 mov     [ebp+14h], esi
.text:00403059                 lea     esi, [esi+0]
.text:00403060
.text:00403060 loc_403060:                             ; CODE XREF: sub_402ED0+AD↑j
.text:00403060                 mov     ecx, [esp+5Ch+arg_C]
.text:00403064                 test    ecx, ecx
.text:00403066                 jz      loc_4033F0
.text:0040306C                 mov     edx, [ebp+0]
.text:0040306F                 mov     edi, [esp+5Ch+arg_4]
.text:00403073                 mov     eax, [edi+edx*4]
.text:00403076                 movzx   edx, byte ptr [eax+1]
.text:0040307A                 cmp     dl, 2Dh ; '-'
.text:0040307D                 jz      short loc_403095
.text:0040307F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403083                 test    ebx, ebx
.text:00403085                 jz      loc_4033F0
.text:0040308B                 cmp     byte ptr [eax+2], 0
.text:0040308F                 jz      loc_40392A
.text:00403095
.text:00403095 loc_403095:                             ; CODE XREF: sub_402ED0+1AD↑j
.text:00403095                                         ; sub_402ED0+A75↓j
.text:00403095                 mov     [esp+5Ch+var_18], 0
.text:0040309D                 mov     ecx, [ebp+14h]
.text:004030A0                 mov     [esp+5Ch+var_1C], 0
.text:004030A8                 mov     [esp+5Ch+var_20], 0
.text:004030B0                 mov     edi, ecx
.text:004030B2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004030BA                 movzx   eax, byte ptr [ecx]
.text:004030BD                 test    al, al
.text:004030BF                 jz      short loc_4030DC
.text:004030C1                 cmp     al, 3Dh ; '='
.text:004030C3                 jz      short loc_4030DC
.text:004030C5                 lea     esi, [esi+0]
.text:004030C9                 lea     edi, [edi+0]
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_402ED0+20A↓j
.text:004030D0                 inc     edi
.text:004030D1                 movzx   eax, byte ptr [edi]
.text:004030D4                 test    al, al
.text:004030D6                 jz      short loc_4030DC
.text:004030D8                 cmp     al, 3Dh ; '='
.text:004030DA                 jnz     short loc_4030D0
.text:004030DC
.text:004030DC loc_4030DC:                             ; CODE XREF: sub_402ED0+1EF↑j
.text:004030DC                                         ; sub_402ED0+1F3↑j ...
.text:004030DC                 mov     [esp+5Ch+var_28], 0
.text:004030E4                 mov     esi, [esp+5Ch+arg_C]
.text:004030E8                 mov     ebx, [esi]
.text:004030EA                 test    ebx, ebx
.text:004030EC                 mov     edx, ebx
.text:004030EE                 jz      loc_403310
.text:004030F4                 lea     esi, [esi+0]
.text:004030FA                 lea     edi, [edi+0]
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_402ED0+25E↓j
.text:00403100                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00403104                 mov     ebx, edi
.text:00403106                 sub     ebx, ecx
.text:00403108                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040310C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040310F                 call    strncmp
.text:00403114                 test    eax, eax
.text:00403116                 jz      loc_4038A6
.text:0040311C
.text:0040311C loc_40311C:                             ; CODE XREF: sub_402ED0+A0F↓j
.text:0040311C                                         ; sub_402ED0+A24↓j ...
.text:0040311C                 inc     [esp+5Ch+var_28]
.text:00403120                 add     esi, 10h
.text:00403123                 mov     ecx, [esi]
.text:00403125                 test    ecx, ecx
.text:00403127                 mov     edx, ecx
.text:00403129                 jz      short loc_403130
.text:0040312B                 mov     ecx, [ebp+14h]
.text:0040312E                 jmp     short loc_403100
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402ED0+259↑j
.text:00403130                                         ; sub_402ED0+A55↓j
.text:00403130                 mov     esi, [esp+5Ch+var_20]
.text:00403134                 test    esi, esi
.text:00403136                 jz      short loc_403144
.text:00403138                 mov     edx, [esp+5Ch+var_1C]
.text:0040313C                 test    edx, edx
.text:0040313E                 jz      loc_403850
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_402ED0+266↑j
.text:00403144                 mov     eax, [esp+5Ch+var_18]
.text:00403148                 test    eax, eax
.text:0040314A                 jz      loc_403310
.text:00403150                 mov     ecx, [ebp+0]
.text:00403153                 lea     eax, [ecx+1]
.text:00403156                 mov     [ebp+0], eax
.text:00403159                 cmp     byte ptr [edi], 0
.text:0040315C                 jz      loc_403270
.text:00403162                 mov     ecx, [esp+5Ch+var_18]
.text:00403166                 mov     esi, [ecx+4]
.text:00403169                 test    esi, esi
.text:0040316B                 jz      short loc_4031B6
.text:0040316D                 lea     ebx, [edi+1]
.text:00403170                 mov     [ebp+0Ch], ebx
.text:00403173
.text:00403173 loc_403173:                             ; CODE XREF: sub_402ED0+3A8↓j
.text:00403173                                         ; sub_402ED0+3C4↓j
.text:00403173                 mov     ebx, [ebp+14h]
.text:00403176                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403179                 call    strlen
.text:0040317E                 add     [ebp+14h], eax
.text:00403181                 mov     esi, [esp+5Ch+arg_10]
.text:00403185                 test    esi, esi
.text:00403187                 jz      short loc_403193
.text:00403189                 mov     ebp, [esp+5Ch+var_24]
.text:0040318D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403191                 mov     [ecx], ebp
.text:00403193
.text:00403193 loc_403193:                             ; CODE XREF: sub_402ED0+2B7↑j
.text:00403193                 mov     eax, [esp+5Ch+var_18]
.text:00403197                 mov     ecx, [eax+8]
.text:0040319A                 test    ecx, ecx
.text:0040319C                 jnz     short loc_4031AA
.text:0040319E                 mov     ecx, [esp+5Ch+var_18]
.text:004031A2
.text:004031A2 loc_4031A2:                             ; CODE XREF: sub_402ED0+723↓j
.text:004031A2                 mov     eax, [ecx+0Ch]
.text:004031A5                 jmp     loc_403027
.text:004031AA ; ---------------------------------------------------------------------------
.text:004031AA
.text:004031AA loc_4031AA:                             ; CODE XREF: sub_402ED0+2CC↑j
.text:004031AA                                         ; sub_402ED0+719↓j
.text:004031AA                 mov     esi, [eax+0Ch]
.text:004031AD                 xor     eax, eax
.text:004031AF                 mov     [ecx], esi
.text:004031B1                 jmp     loc_403027
.text:004031B6 ; ---------------------------------------------------------------------------
.text:004031B6
.text:004031B6 loc_4031B6:                             ; CODE XREF: sub_402ED0+29B↑j
.text:004031B6                 mov     edi, [esp+5Ch+var_14]
.text:004031BA                 test    edi, edi
.text:004031BC                 jz      short loc_403210
.text:004031BE                 mov     esi, [esp+5Ch+arg_4]
.text:004031C2                 mov     edx, [esi+eax*4-4]
.text:004031C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004031CA                 jz      short loc_403232
.text:004031CC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004031D3                 call    ds:libintl_gettext
.text:004031D9                 mov     edx, [esp+5Ch+var_18]
.text:004031DD                 mov     edi, [edx]
.text:004031DF                 mov     [esp+5Ch+var_4C], edi
.text:004031E3                 mov     ebx, [ebp+0]
.text:004031E6                 mov     edi, [esp+5Ch+arg_4]
.text:004031EA                 mov     ecx, [edi+ebx*4-4]
.text:004031EE                 movsx   esi, byte ptr [ecx]
.text:004031F1                 mov     ecx, ds:_iob
.text:004031F7                 add     ecx, 40h ; '@'
.text:004031FA                 mov     [esp+5Ch+var_50], esi
.text:004031FE                 mov     ebx, [edi]
.text:00403200                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403204                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403207                 mov     [esp+5Ch+MaxCount], ebx
.text:0040320B                 call    fprintf
.text:00403210
.text:00403210 loc_403210:                             ; CODE XREF: sub_402ED0+2EC↑j
.text:00403210                                         ; sub_402ED0+398↓j
.text:00403210                 mov     ecx, [ebp+14h]
.text:00403213                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403216                 call    strlen
.text:0040321B                 add     [ebp+14h], eax
.text:0040321E                 mov     eax, [esp+5Ch+var_18]
.text:00403222                 mov     esi, [eax+0Ch]
.text:00403225                 mov     [ebp+8], esi
.text:00403228
.text:00403228 loc_403228:                             ; CODE XREF: sub_402ED0+4E5↓j
.text:00403228                                         ; sub_402ED0+73E↓j ...
.text:00403228                 mov     eax, 3Fh ; '?'
.text:0040322D                 jmp     loc_403027
.text:00403232 ; ---------------------------------------------------------------------------
.text:00403232
.text:00403232 loc_403232:                             ; CODE XREF: sub_402ED0+2FA↑j
.text:00403232                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403239                 call    ds:libintl_gettext
.text:0040323F                 mov     edx, [esp+5Ch+var_18]
.text:00403243                 mov     edi, [esp+5Ch+arg_4]
.text:00403247                 mov     ecx, ds:_iob
.text:0040324D                 mov     esi, [edx]
.text:0040324F                 add     ecx, 40h ; '@'
.text:00403252                 mov     [esp+5Ch+var_50], esi
.text:00403256                 mov     ebx, [edi]
.text:00403258                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040325C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040325F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403263                 call    fprintf
.text:00403268                 jmp     short loc_403210
.text:00403268 ; ---------------------------------------------------------------------------
.text:0040326A                 align 10h
.text:00403270
.text:00403270 loc_403270:                             ; CODE XREF: sub_402ED0+28C↑j
.text:00403270                 mov     ebx, [esp+5Ch+var_18]
.text:00403274                 cmp     dword ptr [ebx+4], 1
.text:00403278                 jnz     loc_403173
.text:0040327E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403282                 jge     short loc_403299
.text:00403284                 mov     ebx, [esp+5Ch+arg_4]
.text:00403288                 lea     edi, [ecx+2]
.text:0040328B                 mov     [ebp+0], edi
.text:0040328E                 mov     esi, [ebx+eax*4]
.text:00403291                 mov     [ebp+0Ch], esi
.text:00403294                 jmp     loc_403173
.text:00403299 ; ---------------------------------------------------------------------------
.text:00403299
.text:00403299 loc_403299:                             ; CODE XREF: sub_402ED0+3B2↑j
.text:00403299                 mov     edx, [esp+5Ch+var_14]
.text:0040329D                 test    edx, edx
.text:0040329F                 jnz     short loc_4032D0
.text:004032A1
.text:004032A1 loc_4032A1:                             ; CODE XREF: sub_402ED0+437↓j
.text:004032A1                 mov     edx, [ebp+14h]
.text:004032A4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004032A7                 call    strlen
.text:004032AC                 add     [ebp+14h], eax
.text:004032AF                 mov     eax, [esp+5Ch+var_18]
.text:004032B3                 mov     edi, [eax+0Ch]
.text:004032B6                 mov     [ebp+8], edi
.text:004032B9
.text:004032B9 loc_4032B9:                             ; CODE XREF: sub_402ED0+7C2↓j
.text:004032B9                 mov     ebp, [esp+5Ch+Str]
.text:004032BD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004032C1                 setnz   bl
.text:004032C4                 movzx   esi, bl
.text:004032C7                 lea     eax, [esi+esi*4+3Ah]
.text:004032CB                 jmp     loc_403027
.text:004032D0 ; ---------------------------------------------------------------------------
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_402ED0+3CF↑j
.text:004032D0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004032D7                 call    ds:libintl_gettext
.text:004032DD                 mov     ecx, [ebp+0]
.text:004032E0                 mov     esi, [esp+5Ch+arg_4]
.text:004032E4                 mov     ebx, [esi+ecx*4-4]
.text:004032E8                 mov     ecx, ds:_iob
.text:004032EE                 mov     [esp+5Ch+var_50], ebx
.text:004032F2                 mov     edi, [esi]
.text:004032F4                 add     ecx, 40h ; '@'
.text:004032F7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032FB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004032FE                 mov     [esp+5Ch+MaxCount], edi
.text:00403302                 call    fprintf
.text:00403307                 jmp     short loc_4032A1
.text:00403307 ; ---------------------------------------------------------------------------
.text:00403309                 align 10h
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_402ED0+21E↑j
.text:00403310                                         ; sub_402ED0+27A↑j
.text:00403310                 mov     eax, [esp+5Ch+arg_14]
.text:00403314                 test    eax, eax
.text:00403316                 jz      short loc_403346
.text:00403318                 mov     ebx, [ebp+0]
.text:0040331B                 mov     esi, [esp+5Ch+arg_4]
.text:0040331F                 mov     edi, [esi+ebx*4]
.text:00403322                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403326                 jz      short loc_403349
.text:00403328                 mov     ecx, [ebp+14h]
.text:0040332B                 mov     edx, [esp+5Ch+Str]
.text:0040332F                 movsx   ebx, byte ptr [ecx]
.text:00403332                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403335                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403339                 call    strchr
.text:0040333E                 test    eax, eax
.text:00403340                 jnz     loc_4033F0
.text:00403346
.text:00403346 loc_403346:                             ; CODE XREF: sub_402ED0+446↑j
.text:00403346                 mov     ebx, [ebp+0]
.text:00403349
.text:00403349 loc_403349:                             ; CODE XREF: sub_402ED0+456↑j
.text:00403349                 mov     eax, [esp+5Ch+var_14]
.text:0040334D                 test    eax, eax
.text:0040334F                 jz      short loc_4033A1
.text:00403351                 mov     esi, [esp+5Ch+arg_4]
.text:00403355                 mov     edi, [esi+ebx*4]
.text:00403358                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040335C                 jz      short loc_4033BA
.text:0040335E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403365                 call    ds:libintl_gettext
.text:0040336B                 mov     edi, [ebp+14h]
.text:0040336E                 mov     [esp+5Ch+var_4C], edi
.text:00403372                 mov     ebx, [ebp+0]
.text:00403375                 mov     edi, [esp+5Ch+arg_4]
.text:00403379                 mov     esi, [edi+ebx*4]
.text:0040337C                 movsx   ecx, byte ptr [esi]
.text:0040337F                 mov     esi, ds:_iob
.text:00403385                 add     esi, 40h ; '@'
.text:00403388                 mov     [esp+5Ch+var_50], ecx
.text:0040338C                 mov     ebx, [edi]
.text:0040338E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403392                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403395                 mov     [esp+5Ch+MaxCount], ebx
.text:00403399                 call    fprintf
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_402ED0+51D↓j
.text:0040339E                 mov     ebx, [ebp+0]
.text:004033A1
.text:004033A1 loc_4033A1:                             ; CODE XREF: sub_402ED0+47F↑j
.text:004033A1                 mov     dword ptr [ebp+14h], offset dword_402D80
.text:004033A8                 lea     edx, [ebx+1]
.text:004033AB                 mov     [ebp+0], edx
.text:004033AE
.text:004033AE loc_4033AE:                             ; CODE XREF: sub_402ED0+999↓j
.text:004033AE                 mov     dword ptr [ebp+8], 0
.text:004033B5                 jmp     loc_403228
.text:004033BA ; ---------------------------------------------------------------------------
.text:004033BA
.text:004033BA loc_4033BA:                             ; CODE XREF: sub_402ED0+48C↑j
.text:004033BA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004033C1                 call    ds:libintl_gettext
.text:004033C7                 mov     ecx, [ebp+14h]
.text:004033CA                 mov     edi, [esp+5Ch+arg_4]
.text:004033CE                 mov     edx, ds:_iob
.text:004033D4                 mov     [esp+5Ch+var_50], ecx
.text:004033D8                 mov     ebx, [edi]
.text:004033DA                 add     edx, 40h ; '@'
.text:004033DD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033E1                 mov     [esp+5Ch+MaxCount], ebx
.text:004033E5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004033E8                 call    fprintf
.text:004033ED                 jmp     short loc_40339E
.text:004033ED ; ---------------------------------------------------------------------------
.text:004033EF                 align 10h
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: sub_402ED0+196↑j
.text:004033F0                                         ; sub_402ED0+1B5↑j ...
.text:004033F0                 mov     esi, [ebp+14h]
.text:004033F3                 movzx   ebx, byte ptr [esi]
.text:004033F6                 inc     esi
.text:004033F7                 mov     [ebp+14h], esi
.text:004033FA                 mov     ecx, [esp+5Ch+Str]
.text:004033FE                 movsx   esi, bl
.text:00403401                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403405                 mov     edi, esi
.text:00403407                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040340A                 call    strchr
.text:0040340F                 mov     ecx, [ebp+14h]
.text:00403412                 cmp     byte ptr [ecx], 0
.text:00403415                 jnz     short loc_40341A
.text:00403417                 inc     dword ptr [ebp+0]
.text:0040341A
.text:0040341A loc_40341A:                             ; CODE XREF: sub_402ED0+545↑j
.text:0040341A                 test    eax, eax
.text:0040341C                 jz      loc_403800
.text:00403422                 cmp     bl, 3Ah ; ':'
.text:00403425                 jz      loc_403800
.text:0040342B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040342E                 jz      loc_4034E6
.text:00403434                 movzx   edx, byte ptr [eax+1]
.text:00403438
.text:00403438 loc_403438:                             ; CODE XREF: sub_402ED0+61D↓j
.text:00403438                 cmp     dl, 3Ah ; ':'
.text:0040343B                 jz      short loc_403444
.text:0040343D
.text:0040343D loc_40343D:                             ; CODE XREF: sub_402ED0+590↓j
.text:0040343D                 mov     eax, esi
.text:0040343F                 jmp     loc_403027
.text:00403444 ; ---------------------------------------------------------------------------
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_402ED0+56B↑j
.text:00403444                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403448                 jz      loc_4034D1
.text:0040344E                 cmp     byte ptr [ecx], 0
.text:00403451                 jz      short loc_403462
.text:00403453
.text:00403453 loc_403453:                             ; CODE XREF: sub_402ED0+604↓j
.text:00403453                 inc     dword ptr [ebp+0]
.text:00403456                 mov     [ebp+0Ch], ecx
.text:00403459
.text:00403459 loc_403459:                             ; CODE XREF: sub_402ED0+5AB↓j
.text:00403459                                         ; sub_402ED0+5C6↓j ...
.text:00403459                 mov     dword ptr [ebp+14h], 0
.text:00403460                 jmp     short loc_40343D
.text:00403462 ; ---------------------------------------------------------------------------
.text:00403462
.text:00403462 loc_403462:                             ; CODE XREF: sub_402ED0+581↑j
.text:00403462                 mov     ecx, [ebp+0]
.text:00403465                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403469                 jz      short loc_40347D
.text:0040346B                 mov     eax, [esp+5Ch+arg_4]
.text:0040346F                 lea     edx, [ecx+1]
.text:00403472                 mov     [ebp+0], edx
.text:00403475                 mov     ebx, [eax+ecx*4]
.text:00403478                 mov     [ebp+0Ch], ebx
.text:0040347B                 jmp     short loc_403459
.text:0040347D ; ---------------------------------------------------------------------------
.text:0040347D
.text:0040347D loc_40347D:                             ; CODE XREF: sub_402ED0+599↑j
.text:0040347D                 mov     ecx, [esp+5Ch+var_14]
.text:00403481                 test    ecx, ecx
.text:00403483                 jnz     short loc_40349F
.text:00403485
.text:00403485 loc_403485:                             ; CODE XREF: sub_402ED0+5FF↓j
.text:00403485                 mov     [ebp+8], edi
.text:00403488                 mov     edi, [esp+5Ch+Str]
.text:0040348C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040348F                 jz      short loc_403498
.text:00403491                 mov     esi, 3Fh ; '?'
.text:00403496                 jmp     short loc_403459
.text:00403498 ; ---------------------------------------------------------------------------
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: sub_402ED0+5BF↑j
.text:00403498                 mov     esi, 3Ah ; ':'
.text:0040349D                 jmp     short loc_403459
.text:0040349F ; ---------------------------------------------------------------------------
.text:0040349F
.text:0040349F loc_40349F:                             ; CODE XREF: sub_402ED0+5B3↑j
.text:0040349F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004034A6                 call    ds:libintl_gettext
.text:004034AC                 mov     [esp+5Ch+var_50], edi
.text:004034B0                 mov     ebx, [esp+5Ch+arg_4]
.text:004034B4                 mov     edx, ds:_iob
.text:004034BA                 mov     esi, [ebx]
.text:004034BC                 add     edx, 40h ; '@'
.text:004034BF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034C3                 mov     [esp+5Ch+MaxCount], esi
.text:004034C7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004034CA                 call    fprintf
.text:004034CF                 jmp     short loc_403485
.text:004034D1 ; ---------------------------------------------------------------------------
.text:004034D1
.text:004034D1 loc_4034D1:                             ; CODE XREF: sub_402ED0+578↑j
.text:004034D1                 cmp     byte ptr [ecx], 0
.text:004034D4                 jnz     loc_403453
.text:004034DA                 mov     dword ptr [ebp+0Ch], 0
.text:004034E1                 jmp     loc_403459
.text:004034E6 ; ---------------------------------------------------------------------------
.text:004034E6
.text:004034E6 loc_4034E6:                             ; CODE XREF: sub_402ED0+55E↑j
.text:004034E6                 movzx   edx, byte ptr [eax+1]
.text:004034EA                 cmp     dl, 3Bh ; ';'
.text:004034ED                 jnz     loc_403438
.text:004034F3                 mov     [esp+5Ch+var_2C], 0
.text:004034FB                 mov     [esp+5Ch+var_30], 0
.text:00403503                 mov     [esp+5Ch+var_34], 0
.text:0040350B                 mov     [esp+5Ch+var_38], 0
.text:00403513                 cmp     byte ptr [ecx], 0
.text:00403516                 jz      loc_40378B
.text:0040351C                 inc     dword ptr [ebp+0]
.text:0040351F                 mov     [ebp+0Ch], ecx
.text:00403522
.text:00403522 loc_403522:                             ; CODE XREF: sub_402ED0+8D4↓j
.text:00403522                 mov     edi, [ebp+0Ch]
.text:00403525                 mov     [ebp+14h], edi
.text:00403528                 movzx   eax, byte ptr [edi]
.text:0040352B                 test    al, al
.text:0040352D                 jz      short loc_40353F
.text:0040352F                 cmp     al, 3Dh ; '='
.text:00403531                 jz      short loc_40353F
.text:00403533
.text:00403533 loc_403533:                             ; CODE XREF: sub_402ED0+66D↓j
.text:00403533                 inc     edi
.text:00403534                 movzx   eax, byte ptr [edi]
.text:00403537                 test    al, al
.text:00403539                 jz      short loc_40353F
.text:0040353B                 cmp     al, 3Dh ; '='
.text:0040353D                 jnz     short loc_403533
.text:0040353F
.text:0040353F loc_40353F:                             ; CODE XREF: sub_402ED0+65D↑j
.text:0040353F                                         ; sub_402ED0+661↑j ...
.text:0040353F                 mov     [esp+5Ch+var_3C], 0
.text:00403547                 mov     esi, [esp+5Ch+arg_C]
.text:0040354B                 mov     eax, [esi]
.text:0040354D                 test    eax, eax
.text:0040354F                 jz      loc_4036D0
.text:00403555                 mov     ecx, eax
.text:00403557
.text:00403557 loc_403557:                             ; CODE XREF: sub_402ED0+6B3↓j
.text:00403557                 mov     ebx, [ebp+14h]
.text:0040355A                 mov     eax, edi
.text:0040355C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040355F                 sub     eax, ebx
.text:00403561                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403565                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403569                 call    strncmp
.text:0040356E                 test    eax, eax
.text:00403570                 jz      loc_403737
.text:00403576
.text:00403576 loc_403576:                             ; CODE XREF: sub_402ED0+88C↓j
.text:00403576                                         ; sub_402ED0+89D↓j
.text:00403576                 inc     [esp+5Ch+var_3C]
.text:0040357A                 add     esi, 10h
.text:0040357D                 mov     edx, [esi]
.text:0040357F                 test    edx, edx
.text:00403581                 mov     ecx, edx
.text:00403583                 jnz     short loc_403557
.text:00403585
.text:00403585 loc_403585:                             ; CODE XREF: sub_402ED0+8B6↓j
.text:00403585                 mov     esi, [esp+5Ch+var_34]
.text:00403589                 test    esi, esi
.text:0040358B                 jz      short loc_403599
.text:0040358D                 mov     ebx, [esp+5Ch+var_30]
.text:00403591                 test    ebx, ebx
.text:00403593                 jz      loc_4036E1
.text:00403599
.text:00403599 loc_403599:                             ; CODE XREF: sub_402ED0+6BB↑j
.text:00403599                 mov     esi, [esp+5Ch+var_2C]
.text:0040359D                 test    esi, esi
.text:0040359F                 jz      loc_4036D0
.text:004035A5                 cmp     byte ptr [edi], 0
.text:004035A8                 jz      loc_403650
.text:004035AE                 mov     ecx, [esp+5Ch+var_2C]
.text:004035B2                 mov     ebx, [ecx+4]
.text:004035B5                 test    ebx, ebx
.text:004035B7                 jz      short loc_4035F8
.text:004035B9                 lea     edx, [edi+1]
.text:004035BC                 mov     [ebp+0Ch], edx
.text:004035BF
.text:004035BF loc_4035BF:                             ; CODE XREF: sub_402ED0+788↓j
.text:004035BF                                         ; sub_402ED0+7A7↓j
.text:004035BF                 mov     edi, [ebp+14h]
.text:004035C2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004035C5                 call    strlen
.text:004035CA                 add     [ebp+14h], eax
.text:004035CD                 mov     eax, [esp+5Ch+arg_10]
.text:004035D1                 test    eax, eax
.text:004035D3                 jz      short loc_4035E0
.text:004035D5                 mov     edx, [esp+5Ch+var_38]
.text:004035D9                 mov     ebp, [esp+5Ch+arg_10]
.text:004035DD                 mov     [ebp+0], edx
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_402ED0+703↑j
.text:004035E0                 mov     eax, [esp+5Ch+var_2C]
.text:004035E4                 mov     ecx, [eax+8]
.text:004035E7                 test    ecx, ecx
.text:004035E9                 jnz     loc_4031AA
.text:004035EF                 mov     ecx, [esp+5Ch+var_2C]
.text:004035F3                 jmp     loc_4031A2
.text:004035F8 ; ---------------------------------------------------------------------------
.text:004035F8
.text:004035F8 loc_4035F8:                             ; CODE XREF: sub_402ED0+6E7↑j
.text:004035F8                 mov     eax, [esp+5Ch+var_14]
.text:004035FC                 test    eax, eax
.text:004035FE                 jnz     short loc_403613
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_402ED0+779↓j
.text:00403600                 mov     ecx, [ebp+14h]
.text:00403603                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403606                 call    strlen
.text:0040360B                 add     [ebp+14h], eax
.text:0040360E                 jmp     loc_403228
.text:00403613 ; ---------------------------------------------------------------------------
.text:00403613
.text:00403613 loc_403613:                             ; CODE XREF: sub_402ED0+72E↑j
.text:00403613                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040361A                 call    ds:libintl_gettext
.text:00403620                 mov     edx, [esp+5Ch+var_2C]
.text:00403624                 mov     ebx, [esp+5Ch+arg_4]
.text:00403628                 mov     edi, [edx]
.text:0040362A                 mov     [esp+5Ch+var_50], edi
.text:0040362E                 mov     edi, ds:_iob
.text:00403634                 mov     esi, [ebx]
.text:00403636                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040363A                 add     edi, 40h ; '@'
.text:0040363D                 mov     [esp+5Ch+MaxCount], esi
.text:00403641                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403644                 call    fprintf
.text:00403649                 jmp     short loc_403600
.text:00403649 ; ---------------------------------------------------------------------------
.text:0040364B                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: sub_402ED0+6D8↑j
.text:00403650                 mov     esi, [esp+5Ch+var_2C]
.text:00403654                 cmp     dword ptr [esi+4], 1
.text:00403658                 jnz     loc_4035BF
.text:0040365E                 mov     ecx, [ebp+0]
.text:00403661                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403665                 jge     short loc_40367C
.text:00403667                 mov     eax, [esp+5Ch+arg_4]
.text:0040366B                 lea     ebx, [ecx+1]
.text:0040366E                 mov     [ebp+0], ebx
.text:00403671                 mov     edi, [eax+ecx*4]
.text:00403674                 mov     [ebp+0Ch], edi
.text:00403677                 jmp     loc_4035BF
.text:0040367C ; ---------------------------------------------------------------------------
.text:0040367C
.text:0040367C loc_40367C:                             ; CODE XREF: sub_402ED0+795↑j
.text:0040367C                 mov     edx, [esp+5Ch+var_14]
.text:00403680                 test    edx, edx
.text:00403682                 jnz     short loc_403697
.text:00403684
.text:00403684 loc_403684:                             ; CODE XREF: sub_402ED0+7FE↓j
.text:00403684                 mov     edx, [ebp+14h]
.text:00403687                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040368A                 call    strlen
.text:0040368F                 add     [ebp+14h], eax
.text:00403692                 jmp     loc_4032B9
.text:00403697 ; ---------------------------------------------------------------------------
.text:00403697
.text:00403697 loc_403697:                             ; CODE XREF: sub_402ED0+7B2↑j
.text:00403697                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040369E                 call    ds:libintl_gettext
.text:004036A4                 mov     ecx, [ebp+0]
.text:004036A7                 mov     ebx, [esp+5Ch+arg_4]
.text:004036AB                 mov     edi, [ebx+ecx*4-4]
.text:004036AF                 mov     ecx, ds:_iob
.text:004036B5                 mov     [esp+5Ch+var_50], edi
.text:004036B9                 mov     esi, [ebx]
.text:004036BB                 add     ecx, 40h ; '@'
.text:004036BE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004036C2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004036C5                 mov     [esp+5Ch+MaxCount], esi
.text:004036C9                 call    fprintf
.text:004036CE                 jmp     short loc_403684
.text:004036D0 ; ---------------------------------------------------------------------------
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_402ED0+67F↑j
.text:004036D0                                         ; sub_402ED0+6CF↑j
.text:004036D0                 mov     dword ptr [ebp+14h], 0
.text:004036D7                 mov     eax, 57h ; 'W'
.text:004036DC                 jmp     loc_403027
.text:004036E1 ; ---------------------------------------------------------------------------
.text:004036E1
.text:004036E1 loc_4036E1:                             ; CODE XREF: sub_402ED0+6C3↑j
.text:004036E1                 mov     edi, [esp+5Ch+var_14]
.text:004036E5                 test    edi, edi
.text:004036E7                 jnz     short loc_4036FF
.text:004036E9
.text:004036E9 loc_4036E9:                             ; CODE XREF: sub_402ED0+865↓j
.text:004036E9                 mov     edx, [ebp+14h]
.text:004036EC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004036EF                 call    strlen
.text:004036F4                 add     [ebp+14h], eax
.text:004036F7                 inc     dword ptr [ebp+0]
.text:004036FA                 jmp     loc_403228
.text:004036FF ; ---------------------------------------------------------------------------
.text:004036FF
.text:004036FF loc_4036FF:                             ; CODE XREF: sub_402ED0+817↑j
.text:004036FF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00403706                 call    ds:libintl_gettext
.text:0040370C                 mov     ecx, [ebp+0]
.text:0040370F                 mov     ebx, [esp+5Ch+arg_4]
.text:00403713                 mov     edi, [ebx+ecx*4]
.text:00403716                 mov     ecx, ds:_iob
.text:0040371C                 mov     [esp+5Ch+var_50], edi
.text:00403720                 mov     esi, [ebx]
.text:00403722                 add     ecx, 40h ; '@'
.text:00403725                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403729                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040372C                 mov     [esp+5Ch+MaxCount], esi
.text:00403730                 call    fprintf
.text:00403735                 jmp     short loc_4036E9
.text:00403737 ; ---------------------------------------------------------------------------
.text:00403737
.text:00403737 loc_403737:                             ; CODE XREF: sub_402ED0+6A0↑j
.text:00403737                 mov     edx, [ebp+14h]
.text:0040373A                 mov     ebx, edi
.text:0040373C                 mov     ecx, [esi]
.text:0040373E                 sub     ebx, edx
.text:00403740                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403743                 call    strlen
.text:00403748                 cmp     ebx, eax
.text:0040374A                 jz      short loc_403772
.text:0040374C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403750                 test    ebx, ebx
.text:00403752                 jz      short loc_403761
.text:00403754                 mov     [esp+5Ch+var_34], 1
.text:0040375C                 jmp     loc_403576
.text:00403761 ; ---------------------------------------------------------------------------
.text:00403761
.text:00403761 loc_403761:                             ; CODE XREF: sub_402ED0+882↑j
.text:00403761                 mov     [esp+5Ch+var_2C], esi
.text:00403765                 mov     ecx, [esp+5Ch+var_3C]
.text:00403769                 mov     [esp+5Ch+var_38], ecx
.text:0040376D                 jmp     loc_403576
.text:00403772 ; ---------------------------------------------------------------------------
.text:00403772
.text:00403772 loc_403772:                             ; CODE XREF: sub_402ED0+87A↑j
.text:00403772                 mov     [esp+5Ch+var_2C], esi
.text:00403776                 mov     eax, [esp+5Ch+var_3C]
.text:0040377A                 mov     [esp+5Ch+var_30], 1
.text:00403782                 mov     [esp+5Ch+var_38], eax
.text:00403786                 jmp     loc_403585
.text:0040378B ; ---------------------------------------------------------------------------
.text:0040378B
.text:0040378B loc_40378B:                             ; CODE XREF: sub_402ED0+646↑j
.text:0040378B                 mov     edx, [ebp+0]
.text:0040378E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403792                 jz      short loc_4037A9
.text:00403794                 mov     ebx, [esp+5Ch+arg_4]
.text:00403798                 lea     esi, [edx+1]
.text:0040379B                 mov     [ebp+0], esi
.text:0040379E                 mov     edi, [ebx+edx*4]
.text:004037A1                 mov     [ebp+0Ch], edi
.text:004037A4                 jmp     loc_403522
.text:004037A9 ; ---------------------------------------------------------------------------
.text:004037A9
.text:004037A9 loc_4037A9:                             ; CODE XREF: sub_402ED0+8C2↑j
.text:004037A9                 mov     edi, [esp+5Ch+var_14]
.text:004037AD                 test    edi, edi
.text:004037AF                 jnz     short loc_4037CC
.text:004037B1
.text:004037B1 loc_4037B1:                             ; CODE XREF: sub_402ED0+92C↓j
.text:004037B1                 mov     [ebp+8], esi
.text:004037B4                 mov     ebp, [esp+5Ch+Str]
.text:004037B8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004037BC                 jz      short loc_4037C8
.text:004037BE                 mov     bl, 3Fh ; '?'
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_402ED0+8FA↓j
.text:004037C0                 movsx   eax, bl
.text:004037C3                 jmp     loc_403027
.text:004037C8 ; ---------------------------------------------------------------------------
.text:004037C8
.text:004037C8 loc_4037C8:                             ; CODE XREF: sub_402ED0+8EC↑j
.text:004037C8                 mov     bl, 3Ah ; ':'
.text:004037CA                 jmp     short loc_4037C0
.text:004037CC ; ---------------------------------------------------------------------------
.text:004037CC
.text:004037CC loc_4037CC:                             ; CODE XREF: sub_402ED0+8DF↑j
.text:004037CC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004037D3                 call    ds:libintl_gettext
.text:004037D9                 mov     [esp+5Ch+var_50], esi
.text:004037DD                 mov     edx, [esp+5Ch+arg_4]
.text:004037E1                 mov     ecx, ds:_iob
.text:004037E7                 mov     ebx, [edx]
.text:004037E9                 add     ecx, 40h ; '@'
.text:004037EC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004037F0                 mov     [esp+5Ch+MaxCount], ebx
.text:004037F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004037F7                 call    fprintf
.text:004037FC                 jmp     short loc_4037B1
.text:004037FC ; ---------------------------------------------------------------------------
.text:004037FE                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_402ED0+54C↑j
.text:00403800                                         ; sub_402ED0+555↑j
.text:00403800                 mov     eax, [esp+5Ch+var_14]
.text:00403804                 test    eax, eax
.text:00403806                 jz      short loc_40383F
.text:00403808                 mov     ebx, [ebp+1Ch]
.text:0040380B                 test    ebx, ebx
.text:0040380D                 jz      short loc_403847
.text:0040380F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403816
.text:00403816 loc_403816:                             ; CODE XREF: sub_402ED0+97E↓j
.text:00403816                 call    ds:libintl_gettext
.text:0040381C                 mov     [esp+5Ch+var_50], esi
.text:00403820                 mov     ebx, [esp+5Ch+arg_4]
.text:00403824                 mov     edx, ds:_iob
.text:0040382A                 mov     esi, [ebx]
.text:0040382C                 add     edx, 40h ; '@'
.text:0040382F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403833                 mov     [esp+5Ch+MaxCount], esi
.text:00403837                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040383A                 call    fprintf
.text:0040383F
.text:0040383F loc_40383F:                             ; CODE XREF: sub_402ED0+936↑j
.text:0040383F                 mov     [ebp+8], edi
.text:00403842                 jmp     loc_403228
.text:00403847 ; ---------------------------------------------------------------------------
.text:00403847
.text:00403847 loc_403847:                             ; CODE XREF: sub_402ED0+93D↑j
.text:00403847                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040384E                 jmp     short loc_403816
.text:00403850 ; ---------------------------------------------------------------------------
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_402ED0+26E↑j
.text:00403850                 mov     edi, [esp+5Ch+var_14]
.text:00403854                 test    edi, edi
.text:00403856                 jnz     short loc_40386E
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_402ED0+9D4↓j
.text:00403858                 mov     edx, [ebp+14h]
.text:0040385B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040385E                 call    strlen
.text:00403863                 add     [ebp+14h], eax
.text:00403866                 inc     dword ptr [ebp+0]
.text:00403869                 jmp     loc_4033AE
.text:0040386E ; ---------------------------------------------------------------------------
.text:0040386E
.text:0040386E loc_40386E:                             ; CODE XREF: sub_402ED0+986↑j
.text:0040386E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403875                 call    ds:libintl_gettext
.text:0040387B                 mov     ebx, [ebp+0]
.text:0040387E                 mov     edi, [esp+5Ch+arg_4]
.text:00403882                 mov     ecx, [edi+ebx*4]
.text:00403885                 mov     ebx, ds:_iob
.text:0040388B                 mov     [esp+5Ch+var_50], ecx
.text:0040388F                 mov     esi, [edi]
.text:00403891                 add     ebx, 40h ; '@'
.text:00403894                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403898                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040389B                 mov     [esp+5Ch+MaxCount], esi
.text:0040389F                 call    fprintf
.text:004038A4                 jmp     short loc_403858
.text:004038A6 ; ---------------------------------------------------------------------------
.text:004038A6
.text:004038A6 loc_4038A6:                             ; CODE XREF: sub_402ED0+246↑j
.text:004038A6                 mov     ecx, [ebp+14h]
.text:004038A9                 mov     ebx, edi
.text:004038AB                 mov     edx, [esi]
.text:004038AD                 sub     ebx, ecx
.text:004038AF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004038B2                 call    strlen
.text:004038B7                 cmp     ebx, eax
.text:004038B9                 jz      short loc_403911
.text:004038BB                 mov     ebx, [esp+5Ch+var_18]
.text:004038BF                 test    ebx, ebx
.text:004038C1                 jz      short loc_403900
.text:004038C3                 mov     edx, [esp+5Ch+arg_14]
.text:004038C7                 test    edx, edx
.text:004038C9                 jnz     short loc_4038D7
.text:004038CB                 mov     ecx, [esp+5Ch+var_18]
.text:004038CF                 mov     ebx, [esi+4]
.text:004038D2                 cmp     [ecx+4], ebx
.text:004038D5                 jz      short loc_4038E4
.text:004038D7
.text:004038D7 loc_4038D7:                             ; CODE XREF: sub_402ED0+9F9↑j
.text:004038D7                                         ; sub_402ED0+A1A↓j ...
.text:004038D7                 mov     [esp+5Ch+var_20], 1
.text:004038DF                 jmp     loc_40311C
.text:004038E4 ; ---------------------------------------------------------------------------
.text:004038E4
.text:004038E4 loc_4038E4:                             ; CODE XREF: sub_402ED0+A05↑j
.text:004038E4                 mov     edx, [esi+8]
.text:004038E7                 cmp     [ecx+8], edx
.text:004038EA                 jnz     short loc_4038D7
.text:004038EC                 mov     ebx, [esi+0Ch]
.text:004038EF                 cmp     [ecx+0Ch], ebx
.text:004038F2                 jnz     short loc_4038D7
.text:004038F4                 jmp     loc_40311C
.text:004038F4 ; ---------------------------------------------------------------------------
.text:004038F9                 align 10h
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_402ED0+9F1↑j
.text:00403900                 mov     [esp+5Ch+var_18], esi
.text:00403904                 mov     eax, [esp+5Ch+var_28]
.text:00403908                 mov     [esp+5Ch+var_24], eax
.text:0040390C                 jmp     loc_40311C
.text:00403911 ; ---------------------------------------------------------------------------
.text:00403911
.text:00403911 loc_403911:                             ; CODE XREF: sub_402ED0+9E9↑j
.text:00403911                 mov     [esp+5Ch+var_18], esi
.text:00403915                 mov     ecx, [esp+5Ch+var_28]
.text:00403919                 mov     [esp+5Ch+var_1C], 1
.text:00403921                 mov     [esp+5Ch+var_24], ecx
.text:00403925                 jmp     loc_403130
.text:0040392A ; ---------------------------------------------------------------------------
.text:0040392A
.text:0040392A loc_40392A:                             ; CODE XREF: sub_402ED0+1BF↑j
.text:0040392A                 mov     eax, [esp+5Ch+Str]
.text:0040392E                 movsx   esi, dl
.text:00403931                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403935                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403938                 call    strchr
.text:0040393D                 test    eax, eax
.text:0040393F                 jnz     loc_4033F0
.text:00403945                 jmp     loc_403095
.text:0040394A ; ---------------------------------------------------------------------------
.text:0040394A
.text:0040394A loc_40394A:                             ; CODE XREF: sub_402ED0+17C↑j
.text:0040394A                 mov     ecx, 1
.text:0040394F                 jmp     loc_403052
.text:00403954 ; ---------------------------------------------------------------------------
.text:00403954
.text:00403954 loc_403954:                             ; CODE XREF: sub_402ED0+D4↑j
.text:00403954                                         ; sub_402ED0+130↑j
.text:00403954                 mov     eax, [ebp+20h]
.text:00403957                 cmp     eax, [ebp+24h]
.text:0040395A                 jz      loc_403030
.text:00403960                 mov     [ebp+0], eax
.text:00403963                 jmp     loc_403030
.text:00403968 ; ---------------------------------------------------------------------------
.text:00403968
.text:00403968 loc_403968:                             ; CODE XREF: sub_402ED0+FE↑j
.text:00403968                 mov     [ebp+20h], eax
.text:0040396B                 jmp     loc_402FF0
.text:00403970 ; ---------------------------------------------------------------------------
.text:00403970
.text:00403970 loc_403970:                             ; CODE XREF: sub_402ED0+CA↑j
.text:00403970                 mov     edx, [ebp+20h]
.text:00403973                 mov     eax, [ebp+24h]
.text:00403976                 cmp     edx, eax
.text:00403978                 jz      short loc_4039F0
.text:0040397A                 cmp     eax, ebx
.text:0040397C                 jz      short loc_403991
.text:0040397E                 mov     [esp+5Ch+Str2], ebp
.text:00403982                 mov     ebx, [esp+5Ch+arg_4]
.text:00403986                 mov     [esp+5Ch+Str1], ebx
.text:00403989                 call    sub_403B80
.text:0040398E                 mov     ebx, [ebp+0]
.text:00403991
.text:00403991 loc_403991:                             ; CODE XREF: sub_402ED0+AAC↑j
.text:00403991                                         ; sub_402ED0+B22↓j ...
.text:00403991                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403995                 jge     short loc_4039E0
.text:00403997                 mov     esi, [esp+5Ch+arg_4]
.text:0040399B                 mov     eax, [esi+ebx*4]
.text:0040399E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004039A1                 jz      short loc_4039E8
.text:004039A3                 lea     esi, [esi+0]
.text:004039A9                 lea     edi, [edi+0]
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_402ED0+AFC↓j
.text:004039B0                                         ; sub_402ED0+B1C↓j
.text:004039B0                 lea     eax, [ebx+1]
.text:004039B3                 mov     ebx, eax
.text:004039B5                 mov     [ebp+0], eax
.text:004039B8                 cmp     eax, [esp+5Ch+arg_0]
.text:004039BC                 jge     short loc_4039E0
.text:004039BE                 mov     edi, [esp+5Ch+arg_4]
.text:004039C2                 mov     edx, [edi+eax*4]
.text:004039C5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004039C8                 jz      short loc_4039D0
.text:004039CA
.text:004039CA loc_4039CA:                             ; CODE XREF: sub_402ED0+B04↓j
.text:004039CA                 mov     ebx, eax
.text:004039CC                 jmp     short loc_4039B0
.text:004039CC ; ---------------------------------------------------------------------------
.text:004039CE                 align 10h
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: sub_402ED0+AF8↑j
.text:004039D0                 cmp     byte ptr [edx+1], 0
.text:004039D4                 jz      short loc_4039CA
.text:004039D6                 lea     esi, [esi+0]
.text:004039D9                 lea     edi, [edi+0]
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_402ED0+AC5↑j
.text:004039E0                                         ; sub_402ED0+AEC↑j ...
.text:004039E0                 mov     [ebp+24h], ebx
.text:004039E3                 jmp     loc_402FA0
.text:004039E8 ; ---------------------------------------------------------------------------
.text:004039E8
.text:004039E8 loc_4039E8:                             ; CODE XREF: sub_402ED0+AD1↑j
.text:004039E8                 cmp     byte ptr [eax+1], 0
.text:004039EC                 jz      short loc_4039B0
.text:004039EE                 jmp     short loc_4039E0
.text:004039F0 ; ---------------------------------------------------------------------------
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_402ED0+AA8↑j
.text:004039F0                 cmp     edx, ebx
.text:004039F2                 jz      short loc_403991
.text:004039F4                 mov     [ebp+20h], ebx
.text:004039F7                 jmp     short loc_403991
.text:004039F9 ; ---------------------------------------------------------------------------
.text:004039F9
.text:004039F9 loc_4039F9:                             ; CODE XREF: sub_402ED0+88↑j
.text:004039F9                 mov     dword ptr [ebp+18h], 0
.text:00403A00                 mov     esi, [esp+5Ch+Str]
.text:00403A04
.text:00403A04 loc_403A04:                             ; CODE XREF: sub_402ED0+B49↓j
.text:00403A04                 inc     esi
.text:00403A05                 jmp     loc_402F68
.text:00403A05 ; ---------------------------------------------------------------------------
.text:00403A0A                 align 10h
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_402ED0+80↑j
.text:00403A10                 mov     dword ptr [ebp+18h], 2
.text:00403A17                 mov     esi, ecx
.text:00403A19                 jmp     short loc_403A04
.text:00403A19 ; ---------------------------------------------------------------------------
.text:00403A1B                 align 10h
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_402ED0+69↑j
.text:00403A20                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00403A27                 call    getenv
.text:00403A2C                 test    eax, eax
.text:00403A2E                 jz      loc_402F44
.text:00403A34                 jmp     loc_402F3F
.text:00403A34 ; ---------------------------------------------------------------------------
.text:00403A39                 align 10h
.text:00403A40
.text:00403A40 loc_403A40:                             ; CODE XREF: sub_402ED0+3F↑j
.text:00403A40                 mov     dword ptr [ebp+0], 1
.text:00403A47                 mov     ebx, 1
.text:00403A4C                 jmp     loc_402F20
.text:00403A4C sub_402ED0      endp
.text:00403A4C
.text:00403A51 ; ---------------------------------------------------------------------------
.text:00403A51                 jmp     short sub_403A60
.text:00403A51 ; ---------------------------------------------------------------------------
.text:00403A53                 align 10h
.text:00403A60
.text:00403A60 ; =============== S U B R O U T I N E =======================================
.text:00403A60
.text:00403A60
.text:00403A60 ; int __cdecl sub_403A60(int, int, char *, int, int, int, int)
.text:00403A60 sub_403A60      proc near               ; CODE XREF: .text:00403A51↑j
.text:00403A60                                         ; sub_404820+3A↓p ...
.text:00403A60
.text:00403A60 var_2C          = dword ptr -2Ch
.text:00403A60 var_28          = dword ptr -28h
.text:00403A60 Str             = dword ptr -24h
.text:00403A60 var_20          = dword ptr -20h
.text:00403A60 var_1C          = dword ptr -1Ch
.text:00403A60 var_18          = dword ptr -18h
.text:00403A60 var_14          = dword ptr -14h
.text:00403A60 var_10          = dword ptr -10h
.text:00403A60 arg_0           = dword ptr  4
.text:00403A60 arg_4           = dword ptr  8
.text:00403A60 arg_8           = dword ptr  0Ch
.text:00403A60 arg_C           = dword ptr  10h
.text:00403A60 arg_10          = dword ptr  14h
.text:00403A60 arg_14          = dword ptr  18h
.text:00403A60 arg_18          = dword ptr  1Ch
.text:00403A60
.text:00403A60                 sub     esp, 2Ch
.text:00403A63                 mov     edx, dword_408010
.text:00403A69                 mov     [esp+2Ch+var_10], offset dword_4090A0 ; int
.text:00403A71                 mov     ecx, dword_408014
.text:00403A77                 mov     ds:dword_4090A0, edx
.text:00403A7D                 mov     edx, [esp+2Ch+arg_18]
.text:00403A81                 mov     ds:dword_4090A4, ecx
.text:00403A87                 mov     ecx, [esp+2Ch+arg_14]
.text:00403A8B                 mov     [esp+2Ch+var_14], edx ; int
.text:00403A8F                 mov     edx, [esp+2Ch+arg_10]
.text:00403A93                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403A97                 mov     ecx, [esp+2Ch+arg_C]
.text:00403A9B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00403A9F                 mov     edx, [esp+2Ch+arg_8]
.text:00403AA3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403AA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00403AAB                 mov     [esp+2Ch+Str], edx ; Str
.text:00403AAF                 mov     edx, [esp+2Ch+arg_0]
.text:00403AB3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403AB7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00403ABA                 call    sub_402ED0
.text:00403ABF                 mov     ecx, ds:dword_4090A0
.text:00403AC5                 mov     dword_408010, ecx
.text:00403ACB                 mov     ecx, ds:dword_4090AC
.text:00403AD1                 mov     ds:dword_409250, ecx
.text:00403AD7                 mov     ecx, ds:dword_4090A8
.text:00403ADD                 mov     dword_408018, ecx
.text:00403AE3                 add     esp, 2Ch
.text:00403AE6                 retn
.text:00403AE6 sub_403A60      endp
.text:00403AE6
.text:00403AE6 ; ---------------------------------------------------------------------------
.text:00403AE7                 align 10h
.text:00403AF0                 sub     esp, 2Ch
.text:00403AF3                 mov     edx, dword_408010
.text:00403AF9                 mov     dword ptr [esp+1Ch], offset dword_4090A0
.text:00403B01                 mov     ecx, dword_408014
.text:00403B07                 mov     dword ptr [esp+18h], 1
.text:00403B0F                 mov     ds:dword_4090A0, edx
.text:00403B15                 mov     edx, [esp+38h]
.text:00403B19                 mov     ds:dword_4090A4, ecx
.text:00403B1F                 mov     ecx, [esp+34h]
.text:00403B23                 mov     [esp+8], edx
.text:00403B27                 mov     edx, [esp+30h]
.text:00403B2B                 mov     [esp+4], ecx
.text:00403B2F                 mov     dword ptr [esp+14h], 0
.text:00403B37                 mov     dword ptr [esp+10h], 0
.text:00403B3F                 mov     dword ptr [esp+0Ch], 0
.text:00403B47                 mov     [esp], edx
.text:00403B4A                 call    sub_402ED0
.text:00403B4F                 mov     ecx, ds:dword_4090A0
.text:00403B55                 mov     dword_408010, ecx
.text:00403B5B                 mov     ecx, ds:dword_4090AC
.text:00403B61                 mov     ds:dword_409250, ecx
.text:00403B67                 mov     ecx, ds:dword_4090A8
.text:00403B6D                 mov     dword_408018, ecx
.text:00403B73                 add     esp, 2Ch
.text:00403B76                 retn
.text:00403B76 ; ---------------------------------------------------------------------------
.text:00403B77                 align 10h
.text:00403B80
.text:00403B80 ; =============== S U B R O U T I N E =======================================
.text:00403B80
.text:00403B80
.text:00403B80 sub_403B80      proc near               ; CODE XREF: sub_402ED0+113↑p
.text:00403B80                                         ; sub_402ED0+AB9↑p
.text:00403B80
.text:00403B80 var_2C          = dword ptr -2Ch
.text:00403B80 var_28          = dword ptr -28h
.text:00403B80 var_24          = dword ptr -24h
.text:00403B80 var_20          = dword ptr -20h
.text:00403B80 var_1C          = dword ptr -1Ch
.text:00403B80 var_18          = dword ptr -18h
.text:00403B80 var_14          = dword ptr -14h
.text:00403B80 arg_0           = dword ptr  4
.text:00403B80 arg_4           = dword ptr  8
.text:00403B80
.text:00403B80                 push    ebp
.text:00403B81                 push    edi
.text:00403B82                 push    esi
.text:00403B83                 push    ebx
.text:00403B84                 sub     esp, 1Ch
.text:00403B87                 mov     ecx, [esp+2Ch+arg_4]
.text:00403B8B                 mov     eax, [esp+2Ch+arg_4]
.text:00403B8F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403B93                 mov     edx, [ecx+20h]
.text:00403B96                 mov     edi, [esp+2Ch+arg_0]
.text:00403B9A                 mov     ecx, [ebx]
.text:00403B9C                 mov     [esp+2Ch+var_2C], edx
.text:00403B9F                 mov     [esp+2Ch+var_14], edx
.text:00403BA3                 mov     edx, [eax+24h]
.text:00403BA6                 mov     [esp+2Ch+var_28], ecx
.text:00403BAA                 mov     [esp+2Ch+var_1C], ecx
.text:00403BAE                 cmp     ecx, edx
.text:00403BB0                 mov     [esp+2Ch+var_18], edx
.text:00403BB4                 jle     short loc_403C30
.text:00403BB6                 mov     esi, [esp+2Ch+var_2C]
.text:00403BB9                 cmp     edx, esi
.text:00403BBB                 jle     short loc_403C30
.text:00403BBD                 lea     esi, [esi+0]
.text:00403BC0
.text:00403BC0 loc_403BC0:                             ; CODE XREF: sub_403B80+A1↓j
.text:00403BC0                 mov     ebx, [esp+2Ch+var_1C]
.text:00403BC4                 mov     edx, [esp+2Ch+var_18]
.text:00403BC8                 mov     ebp, [esp+2Ch+var_18]
.text:00403BCC                 mov     eax, [esp+2Ch+var_14]
.text:00403BD0                 sub     ebx, edx
.text:00403BD2                 mov     [esp+2Ch+var_20], ebx
.text:00403BD6                 sub     ebp, eax
.text:00403BD8                 cmp     ebx, ebp
.text:00403BDA                 jle     short loc_403C55
.text:00403BDC                 xor     esi, esi
.text:00403BDE                 cmp     esi, ebp
.text:00403BE0                 jge     short loc_403C0D
.text:00403BE2                 mov     ecx, [esp+2Ch+var_1C]
.text:00403BE6                 sub     ecx, ebp
.text:00403BE8                 mov     [esp+2Ch+var_24], ecx
.text:00403BEC                 lea     esi, [esi+0]
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403B80+8B↓j
.text:00403BF0                 mov     ecx, [esp+2Ch+var_14]
.text:00403BF4                 mov     edx, [esp+2Ch+var_24]
.text:00403BF8                 add     ecx, esi
.text:00403BFA                 add     edx, esi
.text:00403BFC                 mov     ebx, [edi+ecx*4]
.text:00403BFF                 mov     eax, [edi+edx*4]
.text:00403C02                 inc     esi
.text:00403C03                 cmp     esi, ebp
.text:00403C05                 mov     [edi+ecx*4], eax
.text:00403C08                 mov     [edi+edx*4], ebx
.text:00403C0B                 jl      short loc_403BF0
.text:00403C0D
.text:00403C0D loc_403C0D:                             ; CODE XREF: sub_403B80+60↑j
.text:00403C0D                 sub     [esp+2Ch+var_1C], ebp
.text:00403C11
.text:00403C11 loc_403C11:                             ; CODE XREF: sub_403B80+107↓j
.text:00403C11                 mov     eax, [esp+2Ch+var_18]
.text:00403C15                 cmp     [esp+2Ch+var_1C], eax
.text:00403C19                 jle     short loc_403C30
.text:00403C1B                 mov     ebp, [esp+2Ch+var_14]
.text:00403C1F                 cmp     eax, ebp
.text:00403C21                 jg      short loc_403BC0
.text:00403C23                 lea     esi, [esi+0]
.text:00403C29                 lea     edi, [edi+0]
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403B80+34↑j
.text:00403C30                                         ; sub_403B80+3B↑j ...
.text:00403C30                 mov     esi, [esp+2Ch+var_28]
.text:00403C34                 mov     ecx, [esp+2Ch+var_18]
.text:00403C38                 mov     eax, [esp+2Ch+var_2C]
.text:00403C3B                 mov     edi, [esp+2Ch+arg_4]
.text:00403C3F                 mov     edx, [esp+2Ch+var_28]
.text:00403C43                 sub     esi, ecx
.text:00403C45                 add     esi, eax
.text:00403C47                 mov     [edi+20h], esi
.text:00403C4A                 mov     [edi+24h], edx
.text:00403C4D                 add     esp, 1Ch
.text:00403C50                 pop     ebx
.text:00403C51                 pop     esi
.text:00403C52                 pop     edi
.text:00403C53                 pop     ebp
.text:00403C54                 retn
.text:00403C55 ; ---------------------------------------------------------------------------
.text:00403C55
.text:00403C55 loc_403C55:                             ; CODE XREF: sub_403B80+5A↑j
.text:00403C55                 xor     esi, esi
.text:00403C57                 cmp     esi, [esp+2Ch+var_20]
.text:00403C5B                 jge     short loc_403C7F
.text:00403C5D                 lea     esi, [esi+0]
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403B80+FD↓j
.text:00403C60                 mov     ebx, [esp+2Ch+var_14]
.text:00403C64                 mov     ebp, [esp+2Ch+var_18]
.text:00403C68                 add     ebx, esi
.text:00403C6A                 add     ebp, esi
.text:00403C6C                 mov     edx, [edi+ebx*4]
.text:00403C6F                 inc     esi
.text:00403C70                 cmp     esi, [esp+2Ch+var_20]
.text:00403C74                 mov     ecx, [edi+ebp*4]
.text:00403C77                 mov     [edi+ebx*4], ecx
.text:00403C7A                 mov     [edi+ebp*4], edx
.text:00403C7D                 jl      short loc_403C60
.text:00403C7F
.text:00403C7F loc_403C7F:                             ; CODE XREF: sub_403B80+DB↑j
.text:00403C7F                 mov     esi, [esp+2Ch+var_20]
.text:00403C83                 add     [esp+2Ch+var_14], esi
.text:00403C87                 jmp     short loc_403C11
.text:00403C87 sub_403B80      endp
.text:00403C87
.text:00403C87 ; ---------------------------------------------------------------------------
.text:00403C89                 align 20h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 ; int __cdecl sub_403CA0(char *, int, int, int)
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: sub_403FC0+32↓p
.text:00403CA0
.text:00403CA0 Str             = dword ptr -2Ch
.text:00403CA0 Str2            = dword ptr -28h
.text:00403CA0 MaxCount        = dword ptr -24h
.text:00403CA0 var_20          = dword ptr -20h
.text:00403CA0 var_19          = byte ptr -19h
.text:00403CA0 var_18          = dword ptr -18h
.text:00403CA0 var_14          = dword ptr -14h
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0 arg_4           = dword ptr  8
.text:00403CA0 arg_8           = dword ptr  0Ch
.text:00403CA0 arg_C           = dword ptr  10h
.text:00403CA0
.text:00403CA0                 push    ebp
.text:00403CA1                 push    edi
.text:00403CA2                 push    esi
.text:00403CA3                 push    ebx
.text:00403CA4                 sub     esp, 1Ch
.text:00403CA7                 xor     ebx, ebx
.text:00403CA9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00403CB1                 mov     edx, [esp+2Ch+arg_0]
.text:00403CB5                 mov     ebp, [esp+2Ch+arg_C]
.text:00403CB9                 mov     [esp+2Ch+var_19], 0
.text:00403CBE                 mov     [esp+2Ch+Str], edx ; Str
.text:00403CC1                 call    strlen
.text:00403CC6                 mov     [esp+2Ch+var_14], eax
.text:00403CCA                 mov     ecx, [esp+2Ch+arg_4]
.text:00403CCE                 mov     eax, [ecx]
.text:00403CD0                 test    eax, eax
.text:00403CD2                 jz      short loc_403D18
.text:00403CD4                 mov     [esp+2Ch+var_20], 0
.text:00403CDC                 lea     esi, [esi+0]
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_403CA0+6A↓j
.text:00403CE0                 mov     [esp+2Ch+Str], eax ; Str1
.text:00403CE3                 mov     esi, [esp+2Ch+var_14]
.text:00403CE7                 mov     ecx, [esp+2Ch+arg_0]
.text:00403CEB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:00403CEF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00403CF3                 call    strncmp
.text:00403CF8                 test    eax, eax
.text:00403CFA                 jz      short loc_403D26
.text:00403CFC
.text:00403CFC loc_403CFC:                             ; CODE XREF: sub_403CA0+CA↓j
.text:00403CFC                                         ; sub_403CA0+D1↓j ...
.text:00403CFC                 add     [esp+2Ch+var_20], ebp
.text:00403D00                 inc     ebx
.text:00403D01                 mov     esi, [esp+2Ch+arg_4]
.text:00403D05                 mov     eax, [esi+ebx*4]
.text:00403D08                 test    eax, eax
.text:00403D0A                 jnz     short loc_403CE0
.text:00403D0C                 cmp     [esp+2Ch+var_19], 0
.text:00403D11                 mov     edx, 0FFFFFFFEh
.text:00403D16                 jnz     short loc_403D1C
.text:00403D18
.text:00403D18 loc_403D18:                             ; CODE XREF: sub_403CA0+32↑j
.text:00403D18                 mov     edx, [esp+2Ch+var_18]
.text:00403D1C
.text:00403D1C loc_403D1C:                             ; CODE XREF: sub_403CA0+76↑j
.text:00403D1C                                         ; sub_403CA0+9B↓j
.text:00403D1C                 add     esp, 1Ch
.text:00403D1F                 mov     eax, edx
.text:00403D21                 pop     ebx
.text:00403D22                 pop     esi
.text:00403D23                 pop     edi
.text:00403D24                 pop     ebp
.text:00403D25                 retn
.text:00403D26 ; ---------------------------------------------------------------------------
.text:00403D26
.text:00403D26 loc_403D26:                             ; CODE XREF: sub_403CA0+5A↑j
.text:00403D26                 mov     eax, [esp+2Ch+arg_4]
.text:00403D2A                 mov     edi, [eax+ebx*4]
.text:00403D2D                 mov     [esp+2Ch+Str], edi ; Str
.text:00403D30                 call    strlen
.text:00403D35                 cmp     eax, [esp+2Ch+var_14]
.text:00403D39                 mov     edx, ebx
.text:00403D3B                 jz      short loc_403D1C
.text:00403D3D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00403D42                 jz      short loc_403D73
.text:00403D44                 mov     ecx, [esp+2Ch+arg_8]
.text:00403D48                 test    ecx, ecx
.text:00403D4A                 jz      short loc_403D6C
.text:00403D4C                 cld
.text:00403D4D                 mov     edi, [esp+2Ch+var_18]
.text:00403D51                 mov     ecx, ebp
.text:00403D53                 mov     esi, [esp+2Ch+arg_8]
.text:00403D57                 mov     edx, [esp+2Ch+var_20]
.text:00403D5B                 imul    edi, ebp
.text:00403D5E                 add     esi, edi
.text:00403D60                 mov     edi, [esp+2Ch+arg_8]
.text:00403D64                 add     edi, edx
.text:00403D66                 cmp     ebp, ebp
.text:00403D68                 repe cmpsb
.text:00403D6A                 jz      short loc_403CFC
.text:00403D6C
.text:00403D6C loc_403D6C:                             ; CODE XREF: sub_403CA0+AA↑j
.text:00403D6C                 mov     [esp+2Ch+var_19], 1
.text:00403D71                 jmp     short loc_403CFC
.text:00403D73 ; ---------------------------------------------------------------------------
.text:00403D73
.text:00403D73 loc_403D73:                             ; CODE XREF: sub_403CA0+A2↑j
.text:00403D73                 mov     [esp+2Ch+var_18], ebx
.text:00403D77                 jmp     short loc_403CFC
.text:00403D77 sub_403CA0      endp
.text:00403D77
.text:00403D77 ; ---------------------------------------------------------------------------
.text:00403D79 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:00403D79                                         ; DATA XREF: .text:00403DD2↓o
.text:00403D79                                         ; sub_403FC0+5A↓o
.text:00403D96 aInvalidArgumen db 'invalid argument %s for %s',0
.text:00403D96                                         ; DATA XREF: .text:loc_403E40↓o
.text:00403D96                                         ; sub_403FC0:loc_4041B6↓o
.text:00403DB1 ; ---------------------------------------------------------------------------
.text:00403DB1                 jmp     short loc_403DC0
.text:00403DB1 ; ---------------------------------------------------------------------------
.text:00403DB3                 align 10h
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: .text:00403DB1↑j
.text:00403DC0                 sub     esp, 1Ch
.text:00403DC3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00403DC8                 mov     [esp+14h], ebx
.text:00403DCC                 mov     [esp+18h], esi
.text:00403DD0                 jz      short loc_403E40
.text:00403DD2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00403DD9
.text:00403DD9 loc_403DD9:                             ; CODE XREF: .text:00403E47↓j
.text:00403DD9                 call    ds:libintl_gettext
.text:00403DDF                 mov     dword ptr [esp], 1
.text:00403DE6                 mov     edx, [esp+20h]
.text:00403DEA                 mov     esi, eax
.text:00403DEC                 mov     [esp+4], edx
.text:00403DF0                 call    sub_4047C0
.text:00403DF5                 mov     dword ptr [esp+4], 5
.text:00403DFD                 mov     edx, [esp+24h]
.text:00403E01                 mov     ebx, eax
.text:00403E03                 mov     dword ptr [esp], 0
.text:00403E0A                 mov     [esp+8], edx
.text:00403E0E                 call    sub_4061A0
.text:00403E13                 mov     [esp+0Ch], eax
.text:00403E17                 mov     [esp+10h], ebx
.text:00403E1B                 mov     [esp+8], esi
.text:00403E1F                 mov     dword ptr [esp+4], 0
.text:00403E27                 mov     dword ptr [esp], 0
.text:00403E2E                 call    sub_406BD0
.text:00403E33                 mov     ebx, [esp+14h]
.text:00403E37                 mov     esi, [esp+18h]
.text:00403E3B                 add     esp, 1Ch
.text:00403E3E                 retn
.text:00403E3E ; ---------------------------------------------------------------------------
.text:00403E3F                 align 10h
.text:00403E40
.text:00403E40 loc_403E40:                             ; CODE XREF: .text:00403DD0↑j
.text:00403E40                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00403E47                 jmp     short loc_403DD9
.text:00403E47 ; ---------------------------------------------------------------------------
.text:00403E49 aValidArguments db 'Valid arguments are:',0
.text:00403E49                                         ; DATA XREF: .text:00403E93↓o
.text:00403E49                                         ; sub_403FC0+CB↓o
.text:00403E5E ; const char aS[]
.text:00403E5E aS              db 0Ah                  ; DATA XREF: .text:00403F0D↓o
.text:00403E5E                                         ; sub_403FC0:loc_4040F8↓o
.text:00403E5E                 db '  - `%s',27h,0
.text:00403E68 ; const char aS_0[]
.text:00403E68 aS_0            db ', `%s',27h,0        ; DATA XREF: .text:00403F9A↓o
.text:00403E68                                         ; sub_403FC0:loc_404190↓o
.text:00403E6F                 align 10h
.text:00403E70                 push    ebp
.text:00403E71                 push    edi
.text:00403E72                 push    esi
.text:00403E73                 push    ebx
.text:00403E74                 sub     esp, 2Ch
.text:00403E77                 mov     ecx, [esp+40h]
.text:00403E7B                 mov     dword ptr [esp+1Ch], 0
.text:00403E83                 mov     eax, [esp+44h]
.text:00403E87                 mov     ebp, [esp+48h]
.text:00403E8B                 mov     [esp+28h], ecx
.text:00403E8F                 mov     [esp+24h], eax
.text:00403E93                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:00403E9A                 call    ds:libintl_gettext
.text:00403EA0                 mov     edx, ds:_iob
.text:00403EA6                 add     edx, 40h ; '@'
.text:00403EA9                 mov     [esp], edx
.text:00403EAC                 mov     [esp+4], eax
.text:00403EB0                 call    fprintf
.text:00403EB5                 mov     dword ptr [esp+20h], 0
.text:00403EBD                 mov     edx, [esp+28h]
.text:00403EC1                 mov     eax, [edx]
.text:00403EC3                 test    eax, eax
.text:00403EC5                 jz      short loc_403F45
.text:00403EC7                 mov     dword ptr [esp+14h], 0
.text:00403ECF                 mov     esi, [esp+24h]
.text:00403ED3                 mov     ebx, eax
.text:00403ED5                 mov     [esp+18h], esi
.text:00403ED9                 lea     esi, [esi+0]
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: .text:00403F43↓j
.text:00403EE0                 mov     edi, [esp+20h]
.text:00403EE4                 test    edi, edi
.text:00403EE6                 jz      short loc_403F03
.text:00403EE8                 cld
.text:00403EE9                 mov     edi, [esp+24h]
.text:00403EED                 mov     ecx, ebp
.text:00403EEF                 mov     edx, [esp+14h]
.text:00403EF3                 mov     esi, [esp+1Ch]
.text:00403EF7                 add     edi, edx
.text:00403EF9                 cmp     ebp, ebp
.text:00403EFB                 repe cmpsb
.text:00403EFD                 jz      loc_403F90
.text:00403F03
.text:00403F03 loc_403F03:                             ; CODE XREF: .text:00403EE6↑j
.text:00403F03                 mov     [esp+8], ebx
.text:00403F07                 mov     ecx, ds:_iob
.text:00403F0D                 mov     dword ptr [esp+4], offset aS ; "\n  - `%s'"
.text:00403F15                 add     ecx, 40h ; '@'
.text:00403F18                 mov     [esp], ecx
.text:00403F1B                 call    fprintf
.text:00403F20                 mov     ebx, [esp+18h]
.text:00403F24                 mov     [esp+1Ch], ebx
.text:00403F28
.text:00403F28 loc_403F28:                             ; CODE XREF: .text:00403FAD↓j
.text:00403F28                 inc     dword ptr [esp+20h]
.text:00403F2C                 mov     eax, [esp+28h]
.text:00403F30                 add     [esp+14h], ebp
.text:00403F34                 mov     edx, [esp+20h]
.text:00403F38                 add     [esp+18h], ebp
.text:00403F3C                 mov     edi, [eax+edx*4]
.text:00403F3F                 test    edi, edi
.text:00403F41                 mov     ebx, edi
.text:00403F43                 jnz     short loc_403EE0
.text:00403F45
.text:00403F45 loc_403F45:                             ; CODE XREF: .text:00403EC5↑j
.text:00403F45                 mov     ebx, ds:_iob
.text:00403F4B                 mov     ebp, [ebx+44h]
.text:00403F4E                 dec     ebp
.text:00403F4F                 mov     [ebx+44h], ebp
.text:00403F52                 test    ebp, ebp
.text:00403F54                 js      short loc_403F6D
.text:00403F56                 mov     ecx, ds:_iob
.text:00403F5C                 mov     esi, [ecx+40h]
.text:00403F5F                 mov     byte ptr [esi], 0Ah
.text:00403F62                 inc     dword ptr [ecx+40h]
.text:00403F65                 add     esp, 2Ch
.text:00403F68                 pop     ebx
.text:00403F69                 pop     esi
.text:00403F6A                 pop     edi
.text:00403F6B                 pop     ebp
.text:00403F6C                 retn
.text:00403F6D ; ---------------------------------------------------------------------------
.text:00403F6D
.text:00403F6D loc_403F6D:                             ; CODE XREF: .text:00403F54↑j
.text:00403F6D                 mov     dword ptr [esp+40h], 0Ah
.text:00403F75                 mov     edi, ds:_iob
.text:00403F7B                 add     edi, 40h ; '@'
.text:00403F7E                 mov     [esp+44h], edi
.text:00403F82                 add     esp, 2Ch
.text:00403F85                 pop     ebx
.text:00403F86                 pop     esi
.text:00403F87                 pop     edi
.text:00403F88                 pop     ebp
.text:00403F89                 jmp     _flsbuf
.text:00403F89 ; ---------------------------------------------------------------------------
.text:00403F8E                 align 10h
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: .text:00403EFD↑j
.text:00403F90                 mov     [esp+8], ebx
.text:00403F94                 mov     esi, ds:_iob
.text:00403F9A                 mov     dword ptr [esp+4], offset aS_0 ; ", `%s'"
.text:00403FA2                 add     esi, 40h ; '@'
.text:00403FA5                 mov     [esp], esi
.text:00403FA8                 call    fprintf
.text:00403FAD                 jmp     loc_403F28
.text:00403FAD ; ---------------------------------------------------------------------------
.text:00403FB2                 align 10h
.text:00403FC0
.text:00403FC0 ; =============== S U B R O U T I N E =======================================
.text:00403FC0
.text:00403FC0
.text:00403FC0 ; int __cdecl sub_403FC0(char *, char *, int, int, int, int)
.text:00403FC0 sub_403FC0      proc near               ; CODE XREF: sub_401AF0+1A9↑p
.text:00403FC0
.text:00403FC0 Stream          = dword ptr -4Ch
.text:00403FC0 Format          = dword ptr -48h
.text:00403FC0 var_44          = dword ptr -44h
.text:00403FC0 var_40          = byte ptr -40h
.text:00403FC0 var_3C          = dword ptr -3Ch
.text:00403FC0 var_2C          = dword ptr -2Ch
.text:00403FC0 var_28          = dword ptr -28h
.text:00403FC0 var_24          = dword ptr -24h
.text:00403FC0 var_20          = dword ptr -20h
.text:00403FC0 var_1C          = dword ptr -1Ch
.text:00403FC0 var_18          = dword ptr -18h
.text:00403FC0 var_14          = dword ptr -14h
.text:00403FC0 var_10          = dword ptr -10h
.text:00403FC0 var_C           = dword ptr -0Ch
.text:00403FC0 var_8           = dword ptr -8
.text:00403FC0 var_4           = dword ptr -4
.text:00403FC0 arg_0           = dword ptr  4
.text:00403FC0 arg_4           = dword ptr  8
.text:00403FC0 arg_8           = dword ptr  0Ch
.text:00403FC0 arg_C           = dword ptr  10h
.text:00403FC0 arg_10          = dword ptr  14h
.text:00403FC0 arg_14          = dword ptr  18h
.text:00403FC0
.text:00403FC0                 sub     esp, 4Ch
.text:00403FC3                 mov     edx, [esp+4Ch+arg_10]
.text:00403FC7                 mov     [esp+4Ch+var_10], ebx
.text:00403FCB                 mov     ebx, [esp+4Ch+arg_C]
.text:00403FCF                 mov     [esp+4Ch+var_C], esi
.text:00403FD3                 mov     esi, [esp+4Ch+arg_4]
.text:00403FD7                 mov     [esp+4Ch+var_4], ebp
.text:00403FDB                 mov     ebp, [esp+4Ch+arg_8]
.text:00403FDF                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00403FE3                 mov     [esp+4Ch+var_8], edi
.text:00403FE7                 mov     [esp+4Ch+var_44], ebx ; int
.text:00403FEB                 mov     [esp+4Ch+Format], ebp ; int
.text:00403FEF                 mov     [esp+4Ch+Stream], esi ; char *
.text:00403FF2                 call    sub_403CA0
.text:00403FF7                 test    eax, eax
.text:00403FF9                 mov     edx, eax
.text:00403FFB                 js      short loc_404013
.text:00403FFD
.text:00403FFD loc_403FFD:                             ; CODE XREF: sub_403FC0+1AA↓j
.text:00403FFD                 mov     ebx, [esp+4Ch+var_10]
.text:00404001                 mov     eax, edx
.text:00404003                 mov     esi, [esp+4Ch+var_C]
.text:00404007                 mov     edi, [esp+4Ch+var_8]
.text:0040400B                 mov     ebp, [esp+4Ch+var_4]
.text:0040400F                 add     esp, 4Ch
.text:00404012                 retn
.text:00404013 ; ---------------------------------------------------------------------------
.text:00404013
.text:00404013 loc_404013:                             ; CODE XREF: sub_403FC0+3B↑j
.text:00404013                 inc     eax
.text:00404014                 jz      loc_4041B6
.text:0040401A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00404021
.text:00404021 loc_404021:                             ; CODE XREF: sub_403FC0+1FD↓j
.text:00404021                 call    ds:libintl_gettext
.text:00404027                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040402E                 mov     edi, [esp+4Ch+arg_0]
.text:00404032                 mov     [esp+4Ch+var_14], eax
.text:00404036                 mov     [esp+4Ch+Format], edi ; char *
.text:0040403A                 call    sub_4047C0
.text:0040403F                 mov     [esp+4Ch+var_18], eax
.text:00404043                 mov     [esp+4Ch+var_44], esi ; char *
.text:00404047                 mov     [esp+4Ch+Format], 5 ; int
.text:0040404F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00404056                 call    sub_4061A0
.text:0040405B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040405F                 mov     ecx, [esp+4Ch+var_18]
.text:00404063                 mov     eax, [esp+4Ch+var_14]
.text:00404067                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040406F                 mov     [esp+4Ch+var_3C], ecx
.text:00404073                 mov     [esp+4Ch+var_44], eax ; char *
.text:00404077                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040407E                 call    sub_406BD0
.text:00404083                 mov     [esp+4Ch+var_20], 0
.text:0040408B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00404092                 call    ds:libintl_gettext
.text:00404098                 mov     edx, ds:_iob
.text:0040409E                 add     edx, 40h ; '@'
.text:004040A1                 mov     [esp+4Ch+Format], eax ; Format
.text:004040A5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004040A8                 call    fprintf
.text:004040AD                 mov     [esp+4Ch+var_1C], 0
.text:004040B5                 mov     eax, [ebp+0]
.text:004040B8                 test    eax, eax
.text:004040BA                 jz      loc_404141
.text:004040C0                 mov     [esp+4Ch+var_24], eax
.text:004040C4                 mov     [esp+4Ch+var_28], ebx
.text:004040C8                 mov     [esp+4Ch+var_2C], 0
.text:004040D0
.text:004040D0 loc_4040D0:                             ; CODE XREF: sub_403FC0+17F↓j
.text:004040D0                 mov     esi, [esp+4Ch+var_1C]
.text:004040D4                 test    esi, esi
.text:004040D6                 jz      short loc_4040F8
.text:004040D8                 cld
.text:004040D9                 mov     eax, [esp+4Ch+var_2C]
.text:004040DD                 mov     edx, [esp+4Ch+arg_10]
.text:004040E1                 mov     esi, [esp+4Ch+var_20]
.text:004040E5                 lea     ecx, [eax+ebx]
.text:004040E8                 mov     edi, ecx
.text:004040EA                 mov     ecx, [esp+4Ch+arg_10]
.text:004040EE                 cmp     edx, edx
.text:004040F0                 repe cmpsb
.text:004040F2                 jz      loc_404190
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_403FC0+116↑j
.text:004040F8                 mov     [esp+4Ch+Format], offset aS ; "\n  - `%s'"
.text:00404100                 mov     esi, ds:_iob
.text:00404106                 mov     ecx, [esp+4Ch+var_24]
.text:0040410A                 add     esi, 40h ; '@'
.text:0040410D                 mov     [esp+4Ch+var_44], ecx
.text:00404111                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00404114                 call    fprintf
.text:00404119                 mov     edi, [esp+4Ch+var_28]
.text:0040411D                 mov     [esp+4Ch+var_20], edi
.text:00404121
.text:00404121 loc_404121:                             ; CODE XREF: sub_403FC0+1F1↓j
.text:00404121                 inc     [esp+4Ch+var_1C]
.text:00404125                 mov     ecx, [esp+4Ch+arg_10]
.text:00404129                 add     [esp+4Ch+var_2C], ecx
.text:0040412D                 mov     esi, [esp+4Ch+var_1C]
.text:00404131                 add     [esp+4Ch+var_28], ecx
.text:00404135                 mov     edi, [ebp+esi*4+0]
.text:00404139                 test    edi, edi
.text:0040413B                 mov     [esp+4Ch+var_24], edi
.text:0040413F                 jnz     short loc_4040D0
.text:00404141
.text:00404141 loc_404141:                             ; CODE XREF: sub_403FC0+FA↑j
.text:00404141                 mov     ebp, ds:_iob
.text:00404147                 mov     ebx, [ebp+44h]
.text:0040414A                 dec     ebx
.text:0040414B                 mov     [ebp+44h], ebx
.text:0040414E                 test    ebx, ebx
.text:00404150                 js      short loc_40416F
.text:00404152                 mov     edi, ds:_iob
.text:00404158                 mov     eax, [edi+40h]
.text:0040415B                 mov     byte ptr [eax], 0Ah
.text:0040415E                 inc     dword ptr [edi+40h]
.text:00404161
.text:00404161 loc_404161:                             ; CODE XREF: sub_403FC0+1C8↓j
.text:00404161                 call    [esp+4Ch+arg_14]
.text:00404165                 mov     edx, 0FFFFFFFFh
.text:0040416A                 jmp     loc_403FFD
.text:0040416F ; ---------------------------------------------------------------------------
.text:0040416F
.text:0040416F loc_40416F:                             ; CODE XREF: sub_403FC0+190↑j
.text:0040416F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00404176                 mov     edx, ds:_iob
.text:0040417C                 add     edx, 40h ; '@'
.text:0040417F                 mov     [esp+4Ch+Format], edx ; File
.text:00404183                 call    _flsbuf
.text:00404188                 jmp     short loc_404161
.text:00404188 ; ---------------------------------------------------------------------------
.text:0040418A                 align 10h
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_403FC0+132↑j
.text:00404190                 mov     [esp+4Ch+Format], offset aS_0 ; ", `%s'"
.text:00404198                 mov     edx, ds:_iob
.text:0040419E                 mov     eax, [esp+4Ch+var_24]
.text:004041A2                 add     edx, 40h ; '@'
.text:004041A5                 mov     [esp+4Ch+var_44], eax
.text:004041A9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004041AC                 call    fprintf
.text:004041B1                 jmp     loc_404121
.text:004041B6 ; ---------------------------------------------------------------------------
.text:004041B6
.text:004041B6 loc_4041B6:                             ; CODE XREF: sub_403FC0+54↑j
.text:004041B6                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:004041BD                 jmp     loc_404021
.text:004041BD sub_403FC0      endp
.text:004041BD
.text:004041BD ; ---------------------------------------------------------------------------
.text:004041C2                 align 10h
.text:004041D0                 push    ebp
.text:004041D1                 push    edi
.text:004041D2                 push    esi
.text:004041D3                 push    ebx
.text:004041D4                 sub     esp, 4
.text:004041D7                 mov     ecx, [esp+1Ch]
.text:004041DB                 mov     dword ptr [esp], 0
.text:004041E2                 mov     ebx, [esp+24h]
.text:004041E6                 mov     edx, [ecx]
.text:004041E8                 test    edx, edx
.text:004041EA                 jz      short loc_404215
.text:004041EC                 cld
.text:004041ED                 xor     ebp, ebp
.text:004041EF                 nop
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: .text:00404213↓j
.text:004041F0                 mov     edi, [esp+20h]
.text:004041F4                 mov     ecx, ebx
.text:004041F6                 mov     esi, [esp+18h]
.text:004041FA                 add     edi, ebp
.text:004041FC                 cmp     ebx, ebx
.text:004041FE                 repe cmpsb
.text:00404200                 jz      short loc_40421D
.text:00404202                 inc     dword ptr [esp]
.text:00404205                 add     ebp, ebx
.text:00404207                 mov     eax, [esp+1Ch]
.text:0040420B                 mov     ecx, [esp]
.text:0040420E                 mov     edi, [eax+ecx*4]
.text:00404211                 test    edi, edi
.text:00404213                 jnz     short loc_4041F0
.text:00404215
.text:00404215 loc_404215:                             ; CODE XREF: .text:004041EA↑j
.text:00404215                 xor     eax, eax
.text:00404217
.text:00404217 loc_404217:                             ; CODE XREF: .text:00404227↓j
.text:00404217                 pop     ebp
.text:00404218                 pop     ebx
.text:00404219                 pop     esi
.text:0040421A                 pop     edi
.text:0040421B                 pop     ebp
.text:0040421C                 retn
.text:0040421D ; ---------------------------------------------------------------------------
.text:0040421D
.text:0040421D loc_40421D:                             ; CODE XREF: .text:00404200↑j
.text:0040421D                 mov     esi, [esp]
.text:00404220                 mov     ebx, [esp+1Ch]
.text:00404224                 mov     eax, [ebx+esi*4]
.text:00404227                 jmp     short loc_404217
.text:00404227 ; ---------------------------------------------------------------------------
.text:00404229                 align 10h
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230 ; Attributes: noreturn
.text:00404230
.text:00404230 sub_404230      proc near               ; DATA XREF: .data:off_408020↓o
.text:00404230
.text:00404230 Code            = dword ptr -0Ch
.text:00404230
.text:00404230                 sub     esp, 0Ch
.text:00404233                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040423A                 call    sub_402250
.text:0040423A sub_404230      endp
.text:0040423A
.text:0040423A ; ---------------------------------------------------------------------------
.text:0040423F                 db  83h ; ƒ
.text:00404240                 db 0C4h ; Ä
.text:00404241                 db  0Ch
.text:00404242                 db 0C3h ; Ã
.text:00404243                 align 10h
.text:00404250 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404250                                         ; DATA XREF: .data:Buffer↓o
.text:00404282 ; const char aSSS[]
.text:00404282 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404540+50↓o
.text:0040428E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040428E                                         ; DATA XREF: sub_404540:loc_4045E1↓o
.text:0040429E                 db 12h dup(90h)
.text:004042B0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004042B0                                         ; DATA XREF: sub_404540+100↓o
.text:004042B0                 db 'ere is NO',0Ah
.text:004042B0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004042B0                 db 'R PURPOSE.',0Ah,0
.text:00404348 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404348                                         ; DATA XREF: sub_404540:loc_404681↓o
.text:0040435F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040435F                                         ; DATA XREF: sub_404540:loc_40468D↓o
.text:0040437B                 db 15h dup(90h)
.text:00404390 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404390                                         ; DATA XREF: sub_404540:loc_404699↓o
.text:00404390                 db 'and %s.',0Ah,0
.text:004043B0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004043B0                                         ; DATA XREF: sub_404540:loc_4046A5↓o
.text:004043B0                 db '%s, and %s.',0Ah,0
.text:004043D4                 db 1Ch dup(90h)
.text:004043F0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004043F0                                         ; DATA XREF: sub_404540:loc_4046B1↓o
.text:004043F0                 db '%s, %s, and %s.',0Ah,0
.text:00404418                 db 18h dup(90h)
.text:00404430 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404430                                         ; DATA XREF: sub_404540:loc_4046BD↓o
.text:00404430                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040445C                 db 14h dup(90h)
.text:00404470 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404470                                         ; DATA XREF: sub_404540:loc_4046C9↓o
.text:00404470                 db '%s, %s, %s, %s,',0Ah
.text:00404470                 db 'and %s.',0Ah,0
.text:004044A0                 db 10h dup(90h)
.text:004044B0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004044B0                                         ; DATA XREF: sub_404540:loc_4046D5↓o
.text:004044B0                 db '%s, %s, %s, %s,',0Ah
.text:004044B0                 db '%s, and %s.',0Ah,0
.text:004044E4                 align 10h
.text:004044F0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004044F0                                         ; DATA XREF: sub_404540:def_4045AD↓o
.text:004044F0                 db '%s, %s, %s, %s,',0Ah
.text:004044F0                 db '%s, %s, and others.',0Ah,0
.text:0040452C ; const char aSS_0[]
.text:0040452C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_404540+1B5↓o
.text:00404533                 align 10h
.text:00404540
.text:00404540 ; =============== S U B R O U T I N E =======================================
.text:00404540
.text:00404540
.text:00404540 ; int __cdecl sub_404540(FILE *, FILE *, int, int, va_list)
.text:00404540 sub_404540      proc near               ; CODE XREF: sub_404710+2A↓p
.text:00404540
.text:00404540 Stream          = dword ptr -2Ch
.text:00404540 Format          = dword ptr -28h
.text:00404540 ArgList         = dword ptr -24h
.text:00404540 var_20          = dword ptr -20h
.text:00404540 var_1C          = dword ptr -1Ch
.text:00404540 var_14          = dword ptr -14h
.text:00404540 arg_0           = dword ptr  4
.text:00404540 arg_4           = dword ptr  8
.text:00404540 arg_8           = dword ptr  0Ch
.text:00404540 arg_C           = dword ptr  10h
.text:00404540 arg_10          = dword ptr  14h
.text:00404540
.text:00404540                 push    ebp
.text:00404541                 push    edi
.text:00404542                 push    esi
.text:00404543                 push    ebx
.text:00404544                 sub     esp, 1Ch
.text:00404547                 xor     ebx, ebx
.text:00404549                 mov     edi, [esp+2Ch+arg_10]
.text:0040454D                 mov     edx, [esp+2Ch+arg_8]
.text:00404551                 mov     esi, [esp+2Ch+arg_0]
.text:00404555                 mov     eax, [edi]
.text:00404557                 mov     ecx, [esp+2Ch+arg_4]
.text:0040455B                 mov     [esp+2Ch+var_14], edx
.text:0040455F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404563                 lea     edx, [edi+4]
.text:00404566                 test    eax, eax
.text:00404568                 jz      short loc_40457C
.text:0040456A                 lea     esi, [esi+0]
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_404540+3A↓j
.text:00404570                 mov     eax, edx
.text:00404572                 inc     ebx
.text:00404573                 mov     eax, [eax]
.text:00404575                 add     edx, 4
.text:00404578                 test    eax, eax
.text:0040457A                 jnz     short loc_404570
.text:0040457C
.text:0040457C loc_40457C:                             ; CODE XREF: sub_404540+28↑j
.text:0040457C                 test    ecx, ecx
.text:0040457E                 jz      loc_4046ED
.text:00404584                 mov     [esp+2Ch+var_1C], ebp
.text:00404588                 mov     edx, [esp+2Ch+var_14]
.text:0040458C                 mov     [esp+2Ch+ArgList], ecx
.text:00404590                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00404598                 mov     [esp+2Ch+var_20], edx
.text:0040459C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040459F                 call    fprintf
.text:004045A4
.text:004045A4 loc_4045A4:                             ; CODE XREF: sub_404540+1C9↓j
.text:004045A4                 cmp     ebx, 9          ; switch 10 cases
.text:004045A7                 ja      def_4045AD      ; jumptable 004045AD default case
.text:004045AD                 jmp     ds:jpt_4045AD[ebx*4] ; switch jump
.text:004045AD ; ---------------------------------------------------------------------------
.text:004045B4 jpt_4045AD      dd offset loc_4045DC    ; DATA XREF: sub_404540+6D↑r
.text:004045B4                 dd offset loc_4045E1    ; jump table for switch statement
.text:004045B4                 dd offset loc_404681
.text:004045B4                 dd offset loc_40468D
.text:004045B4                 dd offset loc_404699
.text:004045B4                 dd offset loc_4046A5
.text:004045B4                 dd offset loc_4046B1
.text:004045B4                 dd offset loc_4046BD
.text:004045B4                 dd offset loc_4046C9
.text:004045B4                 dd offset loc_4046D5
.text:004045DC ; ---------------------------------------------------------------------------
.text:004045DC
.text:004045DC loc_4045DC:                             ; CODE XREF: sub_404540+6D↑j
.text:004045DC                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004045DC                 call    abort           ; jumptable 004045AD case 0
.text:004045E1 ; ---------------------------------------------------------------------------
.text:004045E1
.text:004045E1 loc_4045E1:                             ; CODE XREF: sub_404540+6D↑j
.text:004045E1                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004045E1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004045AD case 1
.text:004045E8                 nop
.text:004045E9                 lea     esi, [esi+0]
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_404540+148↓j
.text:004045F0                                         ; sub_404540+154↓j ...
.text:004045F0                 call    ds:libintl_gettext
.text:004045F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004045FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004045FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00404601                 call    vfprintf
.text:00404606                 mov     ebx, [esi+4]
.text:00404609                 dec     ebx
.text:0040460A                 test    ebx, ebx
.text:0040460C                 mov     [esi+4], ebx
.text:0040460F                 js      short loc_40466F
.text:00404611                 mov     edi, [esi]
.text:00404613                 mov     byte ptr [edi], 0Ah
.text:00404616                 inc     dword ptr [esi]
.text:00404618
.text:00404618 loc_404618:                             ; CODE XREF: sub_404540+13F↓j
.text:00404618                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040461C                 mov     edx, Buffer
.text:00404622                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404625                 call    fputs
.text:0040462A                 mov     ebp, [esi+4]
.text:0040462D                 dec     ebp
.text:0040462E                 test    ebp, ebp
.text:00404630                 mov     [esi+4], ebp
.text:00404633                 js      short loc_40465D
.text:00404635                 mov     ecx, [esi]
.text:00404637                 mov     byte ptr [ecx], 0Ah
.text:0040463A                 inc     dword ptr [esi]
.text:0040463C
.text:0040463C loc_40463C:                             ; CODE XREF: sub_404540+12D↓j
.text:0040463C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404640                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404647                 call    ds:libintl_gettext
.text:0040464D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404651                 add     esp, 1Ch
.text:00404654                 pop     ebx
.text:00404655                 pop     esi
.text:00404656                 pop     edi
.text:00404657                 pop     ebp
.text:00404658                 jmp     fputs
.text:0040465D ; ---------------------------------------------------------------------------
.text:0040465D
.text:0040465D loc_40465D:                             ; CODE XREF: sub_404540+F3↑j
.text:0040465D                 mov     [esp+2Ch+Format], esi ; File
.text:00404661                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404668                 call    _flsbuf
.text:0040466D                 jmp     short loc_40463C
.text:0040466F ; ---------------------------------------------------------------------------
.text:0040466F
.text:0040466F loc_40466F:                             ; CODE XREF: sub_404540+CF↑j
.text:0040466F                 mov     [esp+2Ch+Format], esi ; File
.text:00404673                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040467A                 call    _flsbuf
.text:0040467F                 jmp     short loc_404618
.text:00404681 ; ---------------------------------------------------------------------------
.text:00404681
.text:00404681 loc_404681:                             ; CODE XREF: sub_404540+6D↑j
.text:00404681                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:00404681                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004045AD case 2
.text:00404688                 jmp     loc_4045F0
.text:0040468D ; ---------------------------------------------------------------------------
.text:0040468D
.text:0040468D loc_40468D:                             ; CODE XREF: sub_404540+6D↑j
.text:0040468D                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:0040468D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004045AD case 3
.text:00404694                 jmp     loc_4045F0
.text:00404699 ; ---------------------------------------------------------------------------
.text:00404699
.text:00404699 loc_404699:                             ; CODE XREF: sub_404540+6D↑j
.text:00404699                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:00404699                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004045AD case 4
.text:004046A0                 jmp     loc_4045F0
.text:004046A5 ; ---------------------------------------------------------------------------
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404540+6D↑j
.text:004046A5                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004046A5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004045AD case 5
.text:004046AC                 jmp     loc_4045F0
.text:004046B1 ; ---------------------------------------------------------------------------
.text:004046B1
.text:004046B1 loc_4046B1:                             ; CODE XREF: sub_404540+6D↑j
.text:004046B1                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004046B1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004045AD case 6
.text:004046B8                 jmp     loc_4045F0
.text:004046BD ; ---------------------------------------------------------------------------
.text:004046BD
.text:004046BD loc_4046BD:                             ; CODE XREF: sub_404540+6D↑j
.text:004046BD                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004046BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004045AD case 7
.text:004046C4                 jmp     loc_4045F0
.text:004046C9 ; ---------------------------------------------------------------------------
.text:004046C9
.text:004046C9 loc_4046C9:                             ; CODE XREF: sub_404540+6D↑j
.text:004046C9                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004046C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004045AD case 8
.text:004046D0                 jmp     loc_4045F0
.text:004046D5 ; ---------------------------------------------------------------------------
.text:004046D5
.text:004046D5 loc_4046D5:                             ; CODE XREF: sub_404540+6D↑j
.text:004046D5                                         ; DATA XREF: sub_404540:jpt_4045AD↑o
.text:004046D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004045AD case 9
.text:004046DC                 jmp     loc_4045F0
.text:004046E1 ; ---------------------------------------------------------------------------
.text:004046E1
.text:004046E1 def_4045AD:                             ; CODE XREF: sub_404540+67↑j
.text:004046E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004045AD default case
.text:004046E8                 jmp     loc_4045F0
.text:004046ED ; ---------------------------------------------------------------------------
.text:004046ED
.text:004046ED loc_4046ED:                             ; CODE XREF: sub_404540+3E↑j
.text:004046ED                 mov     [esp+2Ch+var_20], ebp
.text:004046F1                 mov     ecx, [esp+2Ch+var_14]
.text:004046F5                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:004046FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404700                 mov     [esp+2Ch+ArgList], ecx
.text:00404704                 call    fprintf
.text:00404709                 jmp     loc_4045A4
.text:00404709 sub_404540      endp
.text:00404709
.text:00404709 ; ---------------------------------------------------------------------------
.text:0040470E                 align 10h
.text:00404710
.text:00404710 ; =============== S U B R O U T I N E =======================================
.text:00404710
.text:00404710
.text:00404710 ; int __cdecl sub_404710(FILE *, FILE *, int, int, char)
.text:00404710 sub_404710      proc near               ; CODE XREF: sub_401AF0+3F6↑p
.text:00404710
.text:00404710 var_1C          = dword ptr -1Ch
.text:00404710 var_18          = dword ptr -18h
.text:00404710 var_14          = dword ptr -14h
.text:00404710 var_10          = dword ptr -10h
.text:00404710 var_C           = dword ptr -0Ch
.text:00404710 arg_0           = dword ptr  4
.text:00404710 arg_4           = dword ptr  8
.text:00404710 arg_8           = dword ptr  0Ch
.text:00404710 arg_C           = dword ptr  10h
.text:00404710 arg_10          = byte ptr  14h
.text:00404710
.text:00404710                 sub     esp, 1Ch
.text:00404713                 mov     edx, [esp+1Ch+arg_C]
.text:00404717                 lea     ecx, [esp+1Ch+arg_10]
.text:0040471B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040471F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404723                 mov     [esp+1Ch+var_10], edx ; int
.text:00404727                 mov     edx, [esp+1Ch+arg_4]
.text:0040472B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040472F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404733                 mov     edx, [esp+1Ch+arg_0]
.text:00404737                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040473A                 call    sub_404540
.text:0040473F                 add     esp, 1Ch
.text:00404742                 retn
.text:00404742 sub_404710      endp
.text:00404742
.text:00404742 ; ---------------------------------------------------------------------------
.text:00404743                 align 10h
.text:00404750 ; const char aPosix2Version[]
.text:00404750 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_404760+C↓o
.text:00404760
.text:00404760 ; =============== S U B R O U T I N E =======================================
.text:00404760
.text:00404760
.text:00404760 sub_404760      proc near               ; CODE XREF: sub_401AF0:loc_401F4E↑p
.text:00404760                                         ; sub_401AF0:loc_402207↑p
.text:00404760
.text:00404760 VarName         = dword ptr -1Ch
.text:00404760 EndPtr          = dword ptr -18h
.text:00404760 Radix           = dword ptr -14h
.text:00404760 var_8           = dword ptr -8
.text:00404760 var_4           = dword ptr -4
.text:00404760
.text:00404760                 sub     esp, 1Ch
.text:00404763                 mov     [esp+1Ch+var_4], ebx
.text:00404767                 mov     ebx, 30A29h
.text:0040476C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00404773                 call    getenv
.text:00404778                 test    eax, eax
.text:0040477A                 jz      short loc_404781
.text:0040477C                 cmp     byte ptr [eax], 0
.text:0040477F                 jnz     short loc_404790
.text:00404781
.text:00404781 loc_404781:                             ; CODE XREF: sub_404760+1A↑j
.text:00404781                                         ; sub_404760+4F↓j ...
.text:00404781                 mov     eax, ebx
.text:00404783                 mov     ebx, [esp+1Ch+var_4]
.text:00404787                 add     esp, 1Ch
.text:0040478A                 retn
.text:0040478A ; ---------------------------------------------------------------------------
.text:0040478B                 align 10h
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_404760+1F↑j
.text:00404790                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00404798                 lea     ecx, [esp+1Ch+var_8]
.text:0040479C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:004047A0                 mov     [esp+1Ch+VarName], eax ; String
.text:004047A3                 call    strtol
.text:004047A8                 mov     ecx, [esp+1Ch+var_8]
.text:004047AC                 cmp     byte ptr [ecx], 0
.text:004047AF                 jnz     short loc_404781
.text:004047B1                 mov     ebx, eax
.text:004047B3                 jmp     short loc_404781
.text:004047B3 sub_404760      endp
.text:004047B3
.text:004047B3 ; ---------------------------------------------------------------------------
.text:004047B5                 align 10h
.text:004047C0
.text:004047C0 ; =============== S U B R O U T I N E =======================================
.text:004047C0
.text:004047C0
.text:004047C0 ; int __cdecl sub_4047C0(int, char *)
.text:004047C0 sub_4047C0      proc near               ; CODE XREF: .text:00403DF0↑p
.text:004047C0                                         ; sub_403FC0+7A↑p
.text:004047C0
.text:004047C0 var_C           = dword ptr -0Ch
.text:004047C0 var_8           = dword ptr -8
.text:004047C0 var_4           = dword ptr -4
.text:004047C0 arg_0           = dword ptr  4
.text:004047C0 arg_4           = dword ptr  8
.text:004047C0
.text:004047C0                 sub     esp, 0Ch
.text:004047C3                 mov     edx, [esp+0Ch+arg_4]
.text:004047C7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004047CF                 mov     [esp+0Ch+var_4], edx ; char *
.text:004047D3                 mov     edx, [esp+0Ch+arg_0]
.text:004047D7                 mov     [esp+0Ch+var_C], edx ; int
.text:004047DA                 call    sub_4061A0
.text:004047DF                 add     esp, 0Ch
.text:004047E2                 retn
.text:004047E2 sub_4047C0      endp
.text:004047E2
.text:004047E2 ; ---------------------------------------------------------------------------
.text:004047E3                 align 10h
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0
.text:004047F0 ; int __cdecl sub_4047F0(char *)
.text:004047F0 sub_4047F0      proc near               ; CODE XREF: sub_401AF0+429↑p
.text:004047F0
.text:004047F0 var_C           = dword ptr -0Ch
.text:004047F0 var_8           = dword ptr -8
.text:004047F0 var_4           = dword ptr -4
.text:004047F0 arg_0           = dword ptr  4
.text:004047F0
.text:004047F0                 sub     esp, 0Ch
.text:004047F3                 mov     edx, [esp+0Ch+arg_0]
.text:004047F7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004047FF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404806                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040480A                 call    sub_4061A0
.text:0040480F                 add     esp, 0Ch
.text:00404812                 retn
.text:00404812 sub_4047F0      endp
.text:00404812
.text:00404812 ; ---------------------------------------------------------------------------
.text:00404813                 align 10h
.text:00404820
.text:00404820 ; =============== S U B R O U T I N E =======================================
.text:00404820
.text:00404820
.text:00404820 ; int __cdecl sub_404820(int, int, char *, int, int)
.text:00404820 sub_404820      proc near               ; CODE XREF: sub_401AF0+119↑p
.text:00404820
.text:00404820 var_1C          = dword ptr -1Ch
.text:00404820 var_18          = dword ptr -18h
.text:00404820 var_14          = dword ptr -14h
.text:00404820 var_10          = dword ptr -10h
.text:00404820 var_C           = dword ptr -0Ch
.text:00404820 var_8           = dword ptr -8
.text:00404820 var_4           = dword ptr -4
.text:00404820 arg_0           = dword ptr  4
.text:00404820 arg_4           = dword ptr  8
.text:00404820 arg_8           = dword ptr  0Ch
.text:00404820 arg_C           = dword ptr  10h
.text:00404820 arg_10          = dword ptr  14h
.text:00404820
.text:00404820                 sub     esp, 1Ch
.text:00404823                 mov     edx, [esp+1Ch+arg_C]
.text:00404827                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040482F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404833                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040483B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040483F                 mov     edx, [esp+1Ch+arg_4]
.text:00404843                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404847                 mov     ecx, [esp+1Ch+arg_8]
.text:0040484B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040484F                 mov     edx, [esp+1Ch+arg_0]
.text:00404853                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404857                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040485A                 call    sub_403A60
.text:0040485F                 add     esp, 1Ch
.text:00404862                 retn
.text:00404862 sub_404820      endp
.text:00404862
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404863                 align 10h
.text:00404870                 sub     esp, 2Ch
.text:00404873                 mov     edx, [esp+44h]
.text:00404877                 mov     dword ptr [esp+18h], 0
.text:0040487F                 mov     ecx, [esp+40h]
.text:00404883                 mov     dword ptr [esp+14h], 0
.text:0040488B                 mov     [esp+1Ch], edx
.text:0040488F                 mov     edx, [esp+3Ch]
.text:00404893                 mov     [esp+10h], ecx
.text:00404897                 mov     ecx, [esp+38h]
.text:0040489B                 mov     [esp+0Ch], edx
.text:0040489F                 mov     edx, [esp+34h]
.text:004048A3                 mov     [esp+8], ecx
.text:004048A7                 mov     [esp+4], edx
.text:004048AB                 mov     edx, [esp+30h]
.text:004048AF                 mov     [esp], edx
.text:004048B2                 call    sub_402ED0
.text:004048B7                 add     esp, 2Ch
.text:004048BA                 retn
.text:004048BA ; ---------------------------------------------------------------------------
.text:004048BB                 align 10h
.text:004048C0                 sub     esp, 1Ch
.text:004048C3                 mov     edx, [esp+2Ch]
.text:004048C7                 mov     dword ptr [esp+18h], 0
.text:004048CF                 mov     ecx, [esp+30h]
.text:004048D3                 mov     dword ptr [esp+14h], 1
.text:004048DB                 mov     [esp+0Ch], edx
.text:004048DF                 mov     edx, [esp+24h]
.text:004048E3                 mov     [esp+10h], ecx
.text:004048E7                 mov     ecx, [esp+28h]
.text:004048EB                 mov     [esp+4], edx
.text:004048EF                 mov     edx, [esp+20h]
.text:004048F3                 mov     [esp+8], ecx
.text:004048F7                 mov     [esp], edx
.text:004048FA                 call    sub_403A60
.text:004048FF                 add     esp, 1Ch
.text:00404902                 retn
.text:00404902 ; ---------------------------------------------------------------------------
.text:00404903                 align 10h
.text:00404910                 sub     esp, 2Ch
.text:00404913                 mov     edx, [esp+44h]
.text:00404917                 mov     dword ptr [esp+18h], 0
.text:0040491F                 mov     ecx, [esp+40h]
.text:00404923                 mov     dword ptr [esp+14h], 1
.text:0040492B                 mov     [esp+1Ch], edx
.text:0040492F                 mov     edx, [esp+3Ch]
.text:00404933                 mov     [esp+10h], ecx
.text:00404937                 mov     ecx, [esp+38h]
.text:0040493B                 mov     [esp+0Ch], edx
.text:0040493F                 mov     edx, [esp+34h]
.text:00404943                 mov     [esp+8], ecx
.text:00404947                 mov     [esp+4], edx
.text:0040494B                 mov     edx, [esp+30h]
.text:0040494F                 mov     [esp], edx
.text:00404952                 call    sub_402ED0
.text:00404957                 add     esp, 2Ch
.text:0040495A                 retn
.text:0040495A ; ---------------------------------------------------------------------------
.text:0040495B                 align 10h
.text:00404960                 mov     edx, [esp+4]
.text:00404964                 mov     ds:dword_4090D0, edx
.text:0040496A                 retn
.text:0040496A ; ---------------------------------------------------------------------------
.text:0040496B aWriteError     db 'write error',0      ; DATA XREF: sub_404990:loc_4049D9↓o
.text:00404977 ; const char aSS_1[]
.text:00404977 aSS_1           db '%s: %s',0           ; DATA XREF: sub_404990+77↓o
.text:0040497E ; const char aS_4[]
.text:0040497E aS_4            db '%s',0               ; DATA XREF: sub_404990+A0↓o
.text:00404981 ; ---------------------------------------------------------------------------
.text:00404981                 jmp     short sub_404990
.text:00404981 ; ---------------------------------------------------------------------------
.text:00404983                 align 10h
.text:00404990
.text:00404990 ; =============== S U B R O U T I N E =======================================
.text:00404990
.text:00404990
.text:00404990 ; void __cdecl sub_404990()
.text:00404990 sub_404990      proc near               ; CODE XREF: .text:00404981↑j
.text:00404990                                         ; DATA XREF: sub_401AF0+92↑o
.text:00404990
.text:00404990 Stream          = dword ptr -2Ch
.text:00404990 ErrorMessage    = dword ptr -28h
.text:00404990 var_24          = dword ptr -24h
.text:00404990 var_20          = byte ptr -20h
.text:00404990 var_1C          = dword ptr -1Ch
.text:00404990 var_9           = byte ptr -9
.text:00404990
.text:00404990                 push    esi
.text:00404991                 push    ebx
.text:00404992                 sub     esp, 24h
.text:00404995                 mov     edx, ds:_iob
.text:0040499B                 mov     ecx, [edx+2Ch]
.text:0040499E                 lea     esi, [edx+20h]
.text:004049A1                 shr     ecx, 5
.text:004049A4                 mov     bl, cl
.text:004049A6                 mov     ecx, [edx+20h]
.text:004049A9                 and     bl, 1
.text:004049AC                 cmp     ecx, [esi+8]
.text:004049AF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004049B2                 setz    [esp+2Ch+var_9]
.text:004049B7                 call    fclose
.text:004049BC                 test    eax, eax
.text:004049BE                 setnz   al
.text:004049C1                 test    bl, bl
.text:004049C3                 jnz     loc_404A53
.text:004049C9                 test    al, al
.text:004049CB                 jz      short loc_404A20
.text:004049CD
.text:004049CD loc_4049CD:                             ; CODE XREF: sub_404990+CD↓j
.text:004049CD                 call    _errno
.text:004049D2                 mov     esi, [eax]
.text:004049D4
.text:004049D4 loc_4049D4:                             ; CODE XREF: sub_404990+C7↓j
.text:004049D4                 cmp     esi, 9
.text:004049D7                 jz      short loc_404A46
.text:004049D9
.text:004049D9 loc_4049D9:                             ; CODE XREF: sub_404990+B8↓j
.text:004049D9                                         ; sub_404990+C1↓j
.text:004049D9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004049E0                 call    ds:libintl_gettext
.text:004049E6                 mov     ebx, eax
.text:004049E8                 mov     eax, ds:dword_4090D0
.text:004049ED                 test    eax, eax
.text:004049EF                 jz      short loc_404A26
.text:004049F1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004049F4                 call    sub_406510
.text:004049F9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004049FD                 mov     edx, Code
.text:00404A03                 mov     [esp+2Ch+var_1C], ebx
.text:00404A07                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:00404A0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404A13                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404A16                 call    sub_406BD0
.text:00404A1B                 nop
.text:00404A1C                 lea     esi, [esi+0]
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_404990+3B↑j
.text:00404A20                                         ; sub_404990+B4↓j ...
.text:00404A20                 add     esp, 24h
.text:00404A23                 pop     ebx
.text:00404A24                 pop     esi
.text:00404A25                 retn
.text:00404A26 ; ---------------------------------------------------------------------------
.text:00404A26
.text:00404A26 loc_404A26:                             ; CODE XREF: sub_404990+5F↑j
.text:00404A26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00404A2A                 mov     ebx, Code
.text:00404A30                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:00404A38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404A3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00404A3F                 call    sub_406BD0
.text:00404A44                 jmp     short loc_404A20
.text:00404A46 ; ---------------------------------------------------------------------------
.text:00404A46
.text:00404A46 loc_404A46:                             ; CODE XREF: sub_404990+47↑j
.text:00404A46                 test    bl, bl
.text:00404A48                 jnz     short loc_4049D9
.text:00404A4A                 cmp     [esp+2Ch+var_9], 0
.text:00404A4F                 jnz     short loc_404A20
.text:00404A51                 jmp     short loc_4049D9
.text:00404A53 ; ---------------------------------------------------------------------------
.text:00404A53
.text:00404A53 loc_404A53:                             ; CODE XREF: sub_404990+33↑j
.text:00404A53                 xor     esi, esi
.text:00404A55                 test    al, al
.text:00404A57                 jz      loc_4049D4
.text:00404A5D                 jmp     loc_4049CD
.text:00404A5D sub_404990      endp
.text:00404A5D
.text:00404A5D ; ---------------------------------------------------------------------------
.text:00404A62                 align 10h
.text:00404A70 byte_404A70     db 43h, 0               ; DATA XREF: sub_404A80+33↓o
.text:00404A72 aPosix          db 'POSIX',0            ; DATA XREF: sub_404A80+45↓o
.text:00404A78                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 sub_404A80      proc near               ; CODE XREF: sub_401AF0+88↑p
.text:00404A80
.text:00404A80 Category        = dword ptr -1Ch
.text:00404A80 Locale          = dword ptr -18h
.text:00404A80 var_10          = dword ptr -10h
.text:00404A80 var_C           = dword ptr -0Ch
.text:00404A80 var_8           = dword ptr -8
.text:00404A80 var_4           = dword ptr -4
.text:00404A80 arg_0           = dword ptr  4
.text:00404A80
.text:00404A80                 sub     esp, 1Ch
.text:00404A83                 mov     edx, [esp+1Ch+arg_0]
.text:00404A87                 mov     [esp+1Ch+var_10], ebx
.text:00404A8B                 mov     bl, 1
.text:00404A8D                 mov     [esp+1Ch+var_C], esi
.text:00404A91                 mov     [esp+1Ch+var_8], edi
.text:00404A95                 mov     [esp+1Ch+var_4], ebp
.text:00404A99                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00404AA1                 mov     [esp+1Ch+Category], edx ; Category
.text:00404AA4                 call    setlocale
.text:00404AA9                 test    eax, eax
.text:00404AAB                 jz      short loc_404AD4
.text:00404AAD                 cld
.text:00404AAE                 mov     edx, 2
.text:00404AB3                 mov     edi, offset byte_404A70
.text:00404AB8                 mov     esi, eax
.text:00404ABA                 mov     ecx, edx
.text:00404ABC                 repe cmpsb
.text:00404ABE                 jz      short loc_404AD2
.text:00404AC0                 mov     edx, 6
.text:00404AC5                 mov     edi, offset aPosix ; "POSIX"
.text:00404ACA                 mov     esi, eax
.text:00404ACC                 mov     ecx, edx
.text:00404ACE                 repe cmpsb
.text:00404AD0                 jnz     short loc_404AD4
.text:00404AD2
.text:00404AD2 loc_404AD2:                             ; CODE XREF: sub_404A80+3E↑j
.text:00404AD2                 xor     ebx, ebx
.text:00404AD4
.text:00404AD4 loc_404AD4:                             ; CODE XREF: sub_404A80+2B↑j
.text:00404AD4                                         ; sub_404A80+50↑j
.text:00404AD4                 movzx   eax, bl
.text:00404AD7                 mov     esi, [esp+1Ch+var_C]
.text:00404ADB                 mov     ebx, [esp+1Ch+var_10]
.text:00404ADF                 mov     edi, [esp+1Ch+var_8]
.text:00404AE3                 mov     ebp, [esp+1Ch+var_4]
.text:00404AE7                 add     esp, 1Ch
.text:00404AEA                 retn
.text:00404AEA sub_404A80      endp
.text:00404AEA
.text:00404AEA ; ---------------------------------------------------------------------------
.text:00404AEB                 align 10h
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0
.text:00404AF0 sub_404AF0      proc near               ; CODE XREF: sub_402410+CF↑p
.text:00404AF0                                         ; sub_402410+2ED↑p ...
.text:00404AF0
.text:00404AF0 File            = dword ptr -1Ch
.text:00404AF0 var_18          = dword ptr -18h
.text:00404AF0 var_14          = dword ptr -14h
.text:00404AF0 arg_0           = dword ptr  4
.text:00404AF0 arg_4           = dword ptr  8
.text:00404AF0
.text:00404AF0                 push    ebp
.text:00404AF1                 push    edi
.text:00404AF2                 push    esi
.text:00404AF3                 push    ebx
.text:00404AF4                 sub     esp, 0Ch
.text:00404AF7                 mov     edx, [esp+1Ch+arg_0]
.text:00404AFB                 mov     edi, [esp+1Ch+arg_4]
.text:00404AFF                 mov     ebp, [edx+8]
.text:00404B02                 mov     ecx, [edx]
.text:00404B04                 mov     ebx, ebp
.text:00404B06                 add     ecx, ebp
.text:00404B08                 test    byte ptr [edi+0Ch], 10h
.text:00404B0C                 mov     [esp+1Ch+var_14], ecx
.text:00404B10                 jnz     loc_404B98
.text:00404B16                 lea     esi, [esi+0]
.text:00404B19                 lea     edi, [edi+0]
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404AF0+56↓j
.text:00404B20                 mov     ecx, [edi+4]
.text:00404B23                 dec     ecx
.text:00404B24                 test    ecx, ecx
.text:00404B26                 mov     [edi+4], ecx
.text:00404B29                 js      short loc_404BA0
.text:00404B2B                 mov     edx, [edi]
.text:00404B2D                 movzx   esi, byte ptr [edx]
.text:00404B30                 inc     edx
.text:00404B31                 mov     [edi], edx
.text:00404B33
.text:00404B33 loc_404B33:                             ; CODE XREF: sub_404AF0+BA↓j
.text:00404B33                 cmp     esi, 0FFFFFFFFh
.text:00404B36                 jz      short loc_404B81
.text:00404B38
.text:00404B38 loc_404B38:                             ; CODE XREF: sub_404AF0+A6↓j
.text:00404B38                 cmp     ebx, [esp+1Ch+var_14]
.text:00404B3C                 jz      short loc_404B59
.text:00404B3E
.text:00404B3E loc_404B3E:                             ; CODE XREF: sub_404AF0+8F↓j
.text:00404B3E                 mov     ecx, esi
.text:00404B40                 mov     [ebx], cl
.text:00404B42                 inc     ebx
.text:00404B43                 cmp     esi, 0Ah
.text:00404B46                 jnz     short loc_404B20
.text:00404B48
.text:00404B48 loc_404B48:                             ; CODE XREF: sub_404AF0+9F↓j
.text:00404B48                 mov     eax, [esp+1Ch+arg_0]
.text:00404B4C                 sub     ebx, ebp
.text:00404B4E                 mov     [eax+4], ebx
.text:00404B51
.text:00404B51 loc_404B51:                             ; CODE XREF: sub_404AF0+AA↓j
.text:00404B51                 add     esp, 0Ch
.text:00404B54                 pop     ebx
.text:00404B55                 pop     esi
.text:00404B56                 pop     edi
.text:00404B57                 pop     ebp
.text:00404B58                 retn
.text:00404B59 ; ---------------------------------------------------------------------------
.text:00404B59
.text:00404B59 loc_404B59:                             ; CODE XREF: sub_404AF0+4C↑j
.text:00404B59                 mov     edx, [esp+1Ch+arg_0]
.text:00404B5D                 mov     ebx, [edx]
.text:00404B5F                 mov     [esp+1Ch+File], ebp ; void *
.text:00404B62                 mov     [esp+1Ch+var_18], edx ; int
.text:00404B66                 call    sub_406890
.text:00404B6B                 mov     ebp, eax
.text:00404B6D                 lea     ebx, [ebx+eax]
.text:00404B70                 mov     eax, [esp+1Ch+arg_0]
.text:00404B74                 mov     [eax+8], ebp
.text:00404B77                 mov     ecx, [eax]
.text:00404B79                 add     ecx, ebp
.text:00404B7B                 mov     [esp+1Ch+var_14], ecx
.text:00404B7F                 jmp     short loc_404B3E
.text:00404B81 ; ---------------------------------------------------------------------------
.text:00404B81
.text:00404B81 loc_404B81:                             ; CODE XREF: sub_404AF0+46↑j
.text:00404B81                 cmp     ebx, ebp
.text:00404B83                 jz      short loc_404B98
.text:00404B85                 test    byte ptr [edi+0Ch], 20h
.text:00404B89                 jnz     short loc_404B98
.text:00404B8B                 cmp     byte ptr [ebx-1], 0Ah
.text:00404B8F                 jz      short loc_404B48
.text:00404B91                 mov     esi, 0Ah
.text:00404B96                 jmp     short loc_404B38
.text:00404B98 ; ---------------------------------------------------------------------------
.text:00404B98
.text:00404B98 loc_404B98:                             ; CODE XREF: sub_404AF0+20↑j
.text:00404B98                                         ; sub_404AF0+93↑j ...
.text:00404B98                 xor     eax, eax
.text:00404B9A                 jmp     short loc_404B51
.text:00404B9A ; ---------------------------------------------------------------------------
.text:00404B9C                 align 10h
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_404AF0+39↑j
.text:00404BA0                 mov     [esp+1Ch+File], edi ; File
.text:00404BA3                 call    _filbuf
.text:00404BA8                 mov     esi, eax
.text:00404BAA                 jmp     short loc_404B33
.text:00404BAA sub_404AF0      endp
.text:00404BAA
.text:00404BAA ; ---------------------------------------------------------------------------
.text:00404BAC                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0
.text:00404BB0 sub_404BB0      proc near               ; CODE XREF: sub_402410+7B↑p
.text:00404BB0                                         ; sub_402410+87↑p
.text:00404BB0
.text:00404BB0 arg_0           = dword ptr  4
.text:00404BB0
.text:00404BB0                 push    edi
.text:00404BB1                 mov     ecx, 3
.text:00404BB6                 mov     edi, [esp+4+arg_0]
.text:00404BBA                 cld
.text:00404BBB                 xor     eax, eax
.text:00404BBD                 rep stosd
.text:00404BBF                 pop     edi
.text:00404BC0                 retn
.text:00404BC0 sub_404BB0      endp
.text:00404BC0
.text:00404BC1 ; ---------------------------------------------------------------------------
.text:00404BC1                 jmp     short loc_404BD0
.text:00404BC1 ; ---------------------------------------------------------------------------
.text:00404BC3                 align 10h
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: .text:00404BC1↑j
.text:00404BD0                 mov     ecx, [esp+4]
.text:00404BD4                 mov     edx, [ecx+8]
.text:00404BD7                 mov     [esp+4], edx
.text:00404BDB                 jmp     free
.text:00404BDB ; ---------------------------------------------------------------------------
.text:00404BE0 aStringComparis db 'string comparison failed',0
.text:00404BE0                                         ; DATA XREF: sub_404C70:loc_404CD0↓o
.text:00404BF9                 align 10h
.text:00404C00 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.text:00404C00                                         ; DATA XREF: sub_404C70+81↓o
.text:00404C2B                 align 20h
.text:00404C40 aTheStringsComp db 'The strings compared were %s and %s.',0
.text:00404C40                                         ; DATA XREF: sub_404C70+E8↓o
.text:00404C65                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70
.text:00404C70 ; int __cdecl sub_404C70(char *, int, char *, char)
.text:00404C70 sub_404C70      proc near               ; CODE XREF: sub_402410+565↑p
.text:00404C70                                         ; sub_402410+775↑p
.text:00404C70
.text:00404C70 Str             = dword ptr -2Ch
.text:00404C70 ErrorMessage    = dword ptr -28h
.text:00404C70 var_24          = dword ptr -24h
.text:00404C70 var_20          = byte ptr -20h
.text:00404C70 var_1C          = dword ptr -1Ch
.text:00404C70 var_10          = dword ptr -10h
.text:00404C70 var_C           = dword ptr -0Ch
.text:00404C70 var_8           = dword ptr -8
.text:00404C70 var_4           = dword ptr -4
.text:00404C70 arg_0           = dword ptr  4
.text:00404C70 arg_4           = dword ptr  8
.text:00404C70 arg_8           = dword ptr  0Ch
.text:00404C70 arg_C           = byte ptr  10h
.text:00404C70
.text:00404C70                 sub     esp, 2Ch
.text:00404C73                 mov     edx, [esp+2Ch+arg_4]
.text:00404C77                 mov     [esp+2Ch+var_C], esi
.text:00404C7B                 mov     esi, dword ptr [esp+2Ch+arg_C]
.text:00404C7F                 mov     [esp+2Ch+var_4], ebp
.text:00404C83                 mov     ebp, [esp+2Ch+arg_8]
.text:00404C87                 mov     [esp+2Ch+ErrorMessage], edx ; int
.text:00404C8B                 mov     edx, [esp+2Ch+arg_0]
.text:00404C8F                 mov     [esp+2Ch+var_10], ebx
.text:00404C93                 mov     [esp+2Ch+var_8], edi
.text:00404C97                 mov     [esp+2Ch+Str], edx ; Str
.text:00404C9A                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00404C9E                 mov     [esp+2Ch+var_24], ebp ; int
.text:00404CA2                 call    sub_406A50
.text:00404CA7                 mov     edi, eax
.text:00404CA9                 call    _errno
.text:00404CAE                 mov     ebx, [eax]
.text:00404CB0                 test    ebx, ebx
.text:00404CB2                 jnz     short loc_404CD0
.text:00404CB4
.text:00404CB4 loc_404CB4:                             ; CODE XREF: sub_404C70+119↓j
.text:00404CB4                 mov     eax, edi
.text:00404CB6                 mov     ebx, [esp+2Ch+var_10]
.text:00404CBA                 mov     esi, [esp+2Ch+var_C]
.text:00404CBE                 mov     edi, [esp+2Ch+var_8]
.text:00404CC2                 mov     ebp, [esp+2Ch+var_4]
.text:00404CC6                 add     esp, 2Ch
.text:00404CC9                 retn
.text:00404CC9 ; ---------------------------------------------------------------------------
.text:00404CCA                 align 10h
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404C70+42↑j
.text:00404CD0                 mov     [esp+2Ch+Str], offset aStringComparis ; "string comparison failed"
.text:00404CD7                 call    ds:libintl_gettext
.text:00404CDD                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00404CE1                 mov     [esp+2Ch+Str], 0 ; Code
.text:00404CE8                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404CEC                 call    sub_406BD0
.text:00404CF1                 mov     [esp+2Ch+Str], offset aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:00404CF8                 call    ds:libintl_gettext
.text:00404CFE                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404D06                 mov     [esp+2Ch+Str], 0 ; Code
.text:00404D0D                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404D11                 call    sub_406BD0
.text:00404D16                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:00404D1A                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00404D1E                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:00404D26                 mov     [esp+2Ch+Str], 1 ; int
.text:00404D2D                 call    sub_406280
.text:00404D32                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:00404D3A                 mov     edx, [esp+2Ch+arg_4]
.text:00404D3E                 mov     ebx, eax
.text:00404D40                 mov     [esp+2Ch+Str], 0 ; int
.text:00404D47                 mov     esi, [esp+2Ch+arg_0]
.text:00404D4B                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:00404D4F                 mov     [esp+2Ch+var_24], esi ; char *
.text:00404D53                 call    sub_406280
.text:00404D58                 mov     [esp+2Ch+Str], offset aTheStringsComp ; "The strings compared were %s and %s."
.text:00404D5F                 mov     ebp, eax
.text:00404D61                 call    ds:libintl_gettext
.text:00404D67                 mov     [esp+2Ch+var_1C], ebx
.text:00404D6B                 mov     ecx, Code
.text:00404D71                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00404D75                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404D7D                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404D81                 mov     [esp+2Ch+Str], ecx ; Code
.text:00404D84                 call    sub_406BD0
.text:00404D89                 jmp     loc_404CB4
.text:00404D89 sub_404C70      endp
.text:00404D89
.text:00404D89 ; ---------------------------------------------------------------------------
.text:00404D8E                 align 20h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0
.text:00404DA0 sub_404DA0      proc near               ; CODE XREF: sub_402410+518↑p
.text:00404DA0                                         ; sub_402410+724↑p
.text:00404DA0
.text:00404DA0 C               = dword ptr -1Ch
.text:00404DA0 var_11          = byte ptr -11h
.text:00404DA0 arg_0           = dword ptr  4
.text:00404DA0 arg_4           = dword ptr  8
.text:00404DA0 arg_8           = dword ptr  0Ch
.text:00404DA0
.text:00404DA0                 push    ebp
.text:00404DA1                 push    edi
.text:00404DA2                 push    esi
.text:00404DA3                 xor     esi, esi
.text:00404DA5                 push    ebx
.text:00404DA6                 sub     esp, 0Ch
.text:00404DA9                 mov     edi, [esp+1Ch+arg_8]
.text:00404DAD                 mov     ebp, [esp+1Ch+arg_4]
.text:00404DB1                 cmp     esi, edi
.text:00404DB3                 jb      short loc_404DC0
.text:00404DB5
.text:00404DB5 loc_404DB5:                             ; CODE XREF: sub_404DA0+52↓j
.text:00404DB5                 xor     eax, eax
.text:00404DB7
.text:00404DB7 loc_404DB7:                             ; CODE XREF: sub_404DA0+4B↓j
.text:00404DB7                 add     esp, 0Ch
.text:00404DBA                 pop     ebx
.text:00404DBB                 pop     esi
.text:00404DBC                 pop     edi
.text:00404DBD                 pop     ebp
.text:00404DBE                 retn
.text:00404DBE ; ---------------------------------------------------------------------------
.text:00404DBF                 align 10h
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404DA0+13↑j
.text:00404DC0                                         ; sub_404DA0+50↓j
.text:00404DC0                 movzx   edx, byte ptr [esi+ebp]
.text:00404DC4                 mov     eax, [esp+1Ch+arg_0]
.text:00404DC8                 mov     [esp+1Ch+var_11], dl
.text:00404DCC                 movzx   ecx, byte ptr [esi+eax]
.text:00404DD0                 mov     [esp+1Ch+C], ecx ; C
.text:00404DD3                 call    toupper
.text:00404DD8                 movzx   edx, [esp+1Ch+var_11]
.text:00404DDD                 mov     ebx, eax
.text:00404DDF                 mov     [esp+1Ch+C], edx ; C
.text:00404DE2                 call    toupper
.text:00404DE7                 sub     ebx, eax
.text:00404DE9                 mov     eax, ebx
.text:00404DEB                 jnz     short loc_404DB7
.text:00404DED                 inc     esi
.text:00404DEE                 cmp     esi, edi
.text:00404DF0                 jb      short loc_404DC0
.text:00404DF2                 jmp     short loc_404DB5
.text:00404DF2 sub_404DA0      endp
.text:00404DF2
.text:00404DF2 ; ---------------------------------------------------------------------------
.text:00404DF4                 align 10h
.text:00404E00 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00404E00                                         ; DATA XREF: sub_404E70+544↓o
.text:00404E28                 align 20h
.text:00404E40 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00404E40                                         ; DATA XREF: sub_404E70+54C↓o
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70
.text:00404E70 ; int __cdecl sub_404E70(int, int, int, int, char *Str)
.text:00404E70 sub_404E70      proc near               ; CODE XREF: sub_401AF0+499↑p
.text:00404E70                                         ; sub_401AF0+502↑p ...
.text:00404E70
.text:00404E70 C               = dword ptr -3Ch
.text:00404E70 Type            = dword ptr -38h
.text:00404E70 Radix           = dword ptr -34h
.text:00404E70 var_28          = dword ptr -28h
.text:00404E70 var_24          = dword ptr -24h
.text:00404E70 var_1D          = byte ptr -1Dh
.text:00404E70 var_1C          = dword ptr -1Ch
.text:00404E70 var_18          = dword ptr -18h
.text:00404E70 var_14          = byte ptr -14h
.text:00404E70 arg_0           = dword ptr  4
.text:00404E70 arg_4           = dword ptr  8
.text:00404E70 arg_8           = dword ptr  0Ch
.text:00404E70 arg_C           = dword ptr  10h
.text:00404E70 Str             = dword ptr  14h
.text:00404E70
.text:00404E70                 push    ebp
.text:00404E71                 push    edi
.text:00404E72                 push    esi
.text:00404E73                 push    ebx
.text:00404E74                 sub     esp, 2Ch
.text:00404E77                 mov     ebp, [esp+3Ch+arg_8]
.text:00404E7B                 mov     [esp+3Ch+var_1C], 0
.text:00404E83                 mov     esi, [esp+3Ch+arg_0]
.text:00404E87                 cmp     ebp, 24h ; '$'
.text:00404E8A                 ja      loc_4053AC
.text:00404E90                 mov     edi, [esp+3Ch+arg_4]
.text:00404E94                 test    edi, edi
.text:00404E96                 jz      loc_4053A3
.text:00404E9C
.text:00404E9C loc_404E9C:                             ; CODE XREF: sub_404E70+537↓j
.text:00404E9C                 movzx   edx, byte ptr [esi]
.text:00404E9F                 mov     ebx, esi
.text:00404EA1                 mov     [esp+3Ch+var_1D], dl
.text:00404EA5                 lea     esi, [esi+0]
.text:00404EA9                 lea     edi, [edi+0]
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404E70+70↓j
.text:00404EB0                 movzx   edx, [esp+3Ch+var_1D]
.text:00404EB5                 mov     ecx, ds:__mb_cur_max
.text:00404EBB                 cmp     dword ptr [ecx], 1
.text:00404EBE                 jz      loc_405390
.text:00404EC4                 mov     [esp+3Ch+Type], 8 ; Type
.text:00404ECC                 mov     [esp+3Ch+C], edx ; C
.text:00404ECF                 call    _isctype
.text:00404ED4
.text:00404ED4 loc_404ED4:                             ; CODE XREF: sub_404E70+52E↓j
.text:00404ED4                 test    eax, eax
.text:00404ED6                 jz      short loc_404EE2
.text:00404ED8                 inc     ebx
.text:00404ED9                 movzx   eax, byte ptr [ebx]
.text:00404EDC                 mov     [esp+3Ch+var_1D], al
.text:00404EE0                 jmp     short loc_404EB0
.text:00404EE2 ; ---------------------------------------------------------------------------
.text:00404EE2
.text:00404EE2 loc_404EE2:                             ; CODE XREF: sub_404E70+66↑j
.text:00404EE2                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00404EE7                 mov     eax, 4
.text:00404EEC                 jz      short loc_404F45
.text:00404EEE                 call    _errno
.text:00404EF3                 mov     dword ptr [eax], 0
.text:00404EF9                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00404EFD                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00404F01                 mov     [esp+3Ch+C], esi ; String
.text:00404F04                 call    strtoul
.text:00404F09                 mov     [esp+3Ch+var_18], eax
.text:00404F0D                 mov     eax, [edi]
.text:00404F0F                 cmp     eax, esi
.text:00404F11                 jz      loc_40535C
.text:00404F17                 call    _errno
.text:00404F1C                 mov     ebp, [eax]
.text:00404F1E                 test    ebp, ebp
.text:00404F20                 jnz     loc_40533B
.text:00404F26
.text:00404F26 loc_404F26:                             ; CODE XREF: sub_404E70+4DD↓j
.text:00404F26                                         ; sub_404E70+51A↓j
.text:00404F26                 mov     eax, [esp+3Ch+Str]
.text:00404F2A                 test    eax, eax
.text:00404F2C                 jz      short loc_404F37
.text:00404F2E                 mov     ecx, [edi]
.text:00404F30                 movzx   eax, byte ptr [ecx]
.text:00404F33                 test    al, al
.text:00404F35                 jnz     short loc_404F4D
.text:00404F37
.text:00404F37 loc_404F37:                             ; CODE XREF: sub_404E70+BC↑j
.text:00404F37                                         ; sub_404E70+26C↓j ...
.text:00404F37                 mov     edx, [esp+3Ch+var_18]
.text:00404F3B                 mov     esi, [esp+3Ch+arg_C]
.text:00404F3F                 mov     eax, [esp+3Ch+var_1C]
.text:00404F43                 mov     [esi], edx
.text:00404F45
.text:00404F45 loc_404F45:                             ; CODE XREF: sub_404E70+7C↑j
.text:00404F45                                         ; sub_404E70+112↓j ...
.text:00404F45                 add     esp, 2Ch
.text:00404F48                 pop     ebx
.text:00404F49                 pop     esi
.text:00404F4A                 pop     edi
.text:00404F4B                 pop     ebp
.text:00404F4C                 retn
.text:00404F4D ; ---------------------------------------------------------------------------
.text:00404F4D
.text:00404F4D loc_404F4D:                             ; CODE XREF: sub_404E70+C5↑j
.text:00404F4D                 mov     [esp+3Ch+var_24], 1
.text:00404F55                 mov     edx, [esp+3Ch+Str]
.text:00404F59                 movsx   esi, al
.text:00404F5C                 mov     [esp+3Ch+Type], esi ; Val
.text:00404F60                 mov     ebx, 400h
.text:00404F65                 mov     [esp+3Ch+C], edx ; Str
.text:00404F68                 call    strchr
.text:00404F6D                 test    eax, eax
.text:00404F6F                 jnz     short loc_404F84
.text:00404F71
.text:00404F71 def_404FD4:                             ; CODE XREF: sub_404E70+162↓j
.text:00404F71                                         ; sub_404E70+164↓j
.text:00404F71                                         ; DATA XREF: ...
.text:00404F71                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00404FD4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404F75                 mov     ebx, [esp+3Ch+var_18]
.text:00404F79                 mov     edi, [esp+3Ch+arg_C]
.text:00404F7D                 or      eax, 2
.text:00404F80                 mov     [edi], ebx
.text:00404F82                 jmp     short loc_404F45
.text:00404F84 ; ---------------------------------------------------------------------------
.text:00404F84
.text:00404F84 loc_404F84:                             ; CODE XREF: sub_404E70+FF↑j
.text:00404F84                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00404F8C                 mov     ebp, [esp+3Ch+Str]
.text:00404F90                 mov     [esp+3Ch+C], ebp ; Str
.text:00404F93                 call    strchr
.text:00404F98                 test    eax, eax
.text:00404F9A                 jz      loc_405330
.text:00404FA0                 mov     ecx, [edi]
.text:00404FA2                 mov     [esp+3Ch+var_28], ecx
.text:00404FA6                 movsx   eax, byte ptr [ecx+1]
.text:00404FAA                 cmp     eax, 44h ; 'D'
.text:00404FAD                 jz      loc_4052F9
.text:00404FB3                 cmp     eax, 44h ; 'D'
.text:00404FB6                 jg      loc_40530B
.text:00404FBC                 cmp     eax, 42h ; 'B'
.text:00404FBF                 jz      loc_4052F9
.text:00404FC5
.text:00404FC5 loc_404FC5:                             ; CODE XREF: sub_404E70+496↓j
.text:00404FC5                                         ; sub_404E70+49E↓j ...
.text:00404FC5                 mov     esi, [esp+3Ch+var_28]
.text:00404FC9                 movsx   eax, byte ptr [esi]
.text:00404FCC                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00404FCF                 cmp     eax, 35h
.text:00404FD2                 ja      short def_404FD4 ; jumptable 00404FD4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404FD4                 jmp     ds:jpt_404FD4[eax*4] ; switch jump
.text:00404FD4 ; ---------------------------------------------------------------------------
.text:00404FDB                 align 4
.text:00404FDC jpt_404FD4      dd offset loc_4050FB, offset def_404FD4, offset def_404FD4
.text:00404FDC                                         ; DATA XREF: sub_404E70+164↑r
.text:00404FDC                 dd offset loc_40510B, offset def_404FD4, offset loc_4051FC ; jump table for switch statement
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset loc_405239, offset def_404FD4, offset loc_40526B
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_405145
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset loc_4052A9, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_405182
.text:00404FDC                 dd offset loc_4051BF, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_4050B4
.text:00404FDC                 dd offset loc_4050C6, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset loc_4051FC, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_405239
.text:00404FDC                 dd offset def_404FD4, offset loc_40526B, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset def_404FD4
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_4052A9
.text:00404FDC                 dd offset def_404FD4, offset def_404FD4, offset loc_4052E6
.text:004050B4 ; ---------------------------------------------------------------------------
.text:004050B4
.text:004050B4 loc_4050B4:                             ; CODE XREF: sub_404E70+164↑j
.text:004050B4                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004050B4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404FD4 case 98
.text:004050B8                 cmp     eax, 7FFFFFh
.text:004050BD                 ja      short loc_4050EC
.text:004050BF                 shl     eax, 9
.text:004050C2
.text:004050C2 loc_4050C2:                             ; CODE XREF: sub_404E70+299↓j
.text:004050C2                                         ; sub_404E70+484↓j
.text:004050C2                 mov     [esp+3Ch+var_18], eax
.text:004050C6
.text:004050C6 loc_4050C6:                             ; CODE XREF: sub_404E70+164↑j
.text:004050C6                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004050C6                 xor     eax, eax        ; jumptable 00404FD4 case 99
.text:004050C8
.text:004050C8 loc_4050C8:                             ; CODE XREF: sub_404E70+289↓j
.text:004050C8                                         ; sub_404E70+2CA↓j ...
.text:004050C8                 or      [esp+3Ch+var_1C], eax
.text:004050CC                 mov     ebp, [esp+3Ch+var_28]
.text:004050D0                 mov     ecx, [esp+3Ch+var_24]
.text:004050D4                 add     ebp, ecx
.text:004050D6                 mov     [edi], ebp
.text:004050D8                 cmp     byte ptr [ebp+0], 0
.text:004050DC                 jz      loc_404F37
.text:004050E2                 or      [esp+3Ch+var_1C], 2
.text:004050E7                 jmp     loc_404F37
.text:004050EC ; ---------------------------------------------------------------------------
.text:004050EC
.text:004050EC loc_4050EC:                             ; CODE XREF: sub_404E70+24D↑j
.text:004050EC                                         ; sub_404E70+294↓j ...
.text:004050EC                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004050F4                 mov     eax, 1
.text:004050F9                 jmp     short loc_4050C8
.text:004050FB ; ---------------------------------------------------------------------------
.text:004050FB
.text:004050FB loc_4050FB:                             ; CODE XREF: sub_404E70+164↑j
.text:004050FB                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004050FB                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404FD4 case 66
.text:004050FF                 cmp     eax, 3FFFFFh
.text:00405104                 ja      short loc_4050EC
.text:00405106                 shl     eax, 0Ah
.text:00405109                 jmp     short loc_4050C2
.text:0040510B ; ---------------------------------------------------------------------------
.text:0040510B
.text:0040510B loc_40510B:                             ; CODE XREF: sub_404E70+164↑j
.text:0040510B                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:0040510B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 case 69
.text:0040510F                 xor     ebp, ebp
.text:00405111                 mov     esi, 5
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_404E70+2C8↓j
.text:00405116                 xor     edx, edx
.text:00405118                 mov     eax, 0FFFFFFFFh
.text:0040511D                 div     ebx
.text:0040511F                 mov     edx, [ecx]
.text:00405121                 cmp     eax, edx
.text:00405123                 jnb     short loc_40513C
.text:00405125                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040512B                 mov     eax, 1
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_404E70+2D3↓j
.text:00405130                 dec     esi
.text:00405131                 or      ebp, eax
.text:00405133                 cmp     esi, 0FFFFFFFFh
.text:00405136                 mov     eax, ebp
.text:00405138                 jnz     short loc_405116
.text:0040513A                 jmp     short loc_4050C8
.text:0040513C ; ---------------------------------------------------------------------------
.text:0040513C
.text:0040513C loc_40513C:                             ; CODE XREF: sub_404E70+2B3↑j
.text:0040513C                 imul    edx, ebx
.text:0040513F                 xor     eax, eax
.text:00405141                 mov     [ecx], edx
.text:00405143                 jmp     short loc_405130
.text:00405145 ; ---------------------------------------------------------------------------
.text:00405145
.text:00405145 loc_405145:                             ; CODE XREF: sub_404E70+164↑j
.text:00405145                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:00405145                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 case 80
.text:00405149                 xor     ebp, ebp
.text:0040514B                 mov     esi, 4
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_404E70+302↓j
.text:00405150                 xor     edx, edx
.text:00405152                 mov     eax, 0FFFFFFFFh
.text:00405157                 div     ebx
.text:00405159                 mov     edx, [ecx]
.text:0040515B                 cmp     eax, edx
.text:0040515D                 jnb     short loc_405179
.text:0040515F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00405165                 mov     eax, 1
.text:0040516A
.text:0040516A loc_40516A:                             ; CODE XREF: sub_404E70+310↓j
.text:0040516A                 dec     esi
.text:0040516B                 or      ebp, eax
.text:0040516D                 cmp     esi, 0FFFFFFFFh
.text:00405170                 mov     eax, ebp
.text:00405172                 jnz     short loc_405150
.text:00405174                 jmp     loc_4050C8
.text:00405179 ; ---------------------------------------------------------------------------
.text:00405179
.text:00405179 loc_405179:                             ; CODE XREF: sub_404E70+2ED↑j
.text:00405179                 imul    edx, ebx
.text:0040517C                 xor     eax, eax
.text:0040517E                 mov     [ecx], edx
.text:00405180                 jmp     short loc_40516A
.text:00405182 ; ---------------------------------------------------------------------------
.text:00405182
.text:00405182 loc_405182:                             ; CODE XREF: sub_404E70+164↑j
.text:00405182                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:00405182                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 case 89
.text:00405186                 xor     ebp, ebp
.text:00405188                 mov     esi, 7
.text:0040518D
.text:0040518D loc_40518D:                             ; CODE XREF: sub_404E70+33F↓j
.text:0040518D                 xor     edx, edx
.text:0040518F                 mov     eax, 0FFFFFFFFh
.text:00405194                 div     ebx
.text:00405196                 mov     edx, [ecx]
.text:00405198                 cmp     eax, edx
.text:0040519A                 jnb     short loc_4051B6
.text:0040519C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004051A2                 mov     eax, 1
.text:004051A7
.text:004051A7 loc_4051A7:                             ; CODE XREF: sub_404E70+34D↓j
.text:004051A7                 dec     esi
.text:004051A8                 or      ebp, eax
.text:004051AA                 cmp     esi, 0FFFFFFFFh
.text:004051AD                 mov     eax, ebp
.text:004051AF                 jnz     short loc_40518D
.text:004051B1                 jmp     loc_4050C8
.text:004051B6 ; ---------------------------------------------------------------------------
.text:004051B6
.text:004051B6 loc_4051B6:                             ; CODE XREF: sub_404E70+32A↑j
.text:004051B6                 imul    edx, ebx
.text:004051B9                 xor     eax, eax
.text:004051BB                 mov     [ecx], edx
.text:004051BD                 jmp     short loc_4051A7
.text:004051BF ; ---------------------------------------------------------------------------
.text:004051BF
.text:004051BF loc_4051BF:                             ; CODE XREF: sub_404E70+164↑j
.text:004051BF                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004051BF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 case 90
.text:004051C3                 xor     ebp, ebp
.text:004051C5                 mov     esi, 6
.text:004051CA
.text:004051CA loc_4051CA:                             ; CODE XREF: sub_404E70+37C↓j
.text:004051CA                 xor     edx, edx
.text:004051CC                 mov     eax, 0FFFFFFFFh
.text:004051D1                 div     ebx
.text:004051D3                 mov     edx, [ecx]
.text:004051D5                 cmp     eax, edx
.text:004051D7                 jnb     short loc_4051F3
.text:004051D9                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004051DF                 mov     eax, 1
.text:004051E4
.text:004051E4 loc_4051E4:                             ; CODE XREF: sub_404E70+38A↓j
.text:004051E4                 dec     esi
.text:004051E5                 or      ebp, eax
.text:004051E7                 cmp     esi, 0FFFFFFFFh
.text:004051EA                 mov     eax, ebp
.text:004051EC                 jnz     short loc_4051CA
.text:004051EE                 jmp     loc_4050C8
.text:004051F3 ; ---------------------------------------------------------------------------
.text:004051F3
.text:004051F3 loc_4051F3:                             ; CODE XREF: sub_404E70+367↑j
.text:004051F3                 imul    edx, ebx
.text:004051F6                 xor     eax, eax
.text:004051F8                 mov     [ecx], edx
.text:004051FA                 jmp     short loc_4051E4
.text:004051FC ; ---------------------------------------------------------------------------
.text:004051FC
.text:004051FC loc_4051FC:                             ; CODE XREF: sub_404E70+164↑j
.text:004051FC                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004051FC                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 cases 71,103
.text:00405200                 xor     ebp, ebp
.text:00405202                 mov     esi, 2
.text:00405207
.text:00405207 loc_405207:                             ; CODE XREF: sub_404E70+3B9↓j
.text:00405207                 xor     edx, edx
.text:00405209                 mov     eax, 0FFFFFFFFh
.text:0040520E                 div     ebx
.text:00405210                 mov     edx, [ecx]
.text:00405212                 cmp     eax, edx
.text:00405214                 jnb     short loc_405230
.text:00405216                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040521C                 mov     eax, 1
.text:00405221
.text:00405221 loc_405221:                             ; CODE XREF: sub_404E70+3C7↓j
.text:00405221                 dec     esi
.text:00405222                 or      ebp, eax
.text:00405224                 cmp     esi, 0FFFFFFFFh
.text:00405227                 mov     eax, ebp
.text:00405229                 jnz     short loc_405207
.text:0040522B                 jmp     loc_4050C8
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: sub_404E70+3A4↑j
.text:00405230                 imul    edx, ebx
.text:00405233                 xor     eax, eax
.text:00405235                 mov     [ecx], edx
.text:00405237                 jmp     short loc_405221
.text:00405239 ; ---------------------------------------------------------------------------
.text:00405239
.text:00405239 loc_405239:                             ; CODE XREF: sub_404E70+164↑j
.text:00405239                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:00405239                 xor     edx, edx        ; jumptable 00404FD4 cases 75,107
.text:0040523B                 mov     eax, 0FFFFFFFFh
.text:00405240                 div     ebx
.text:00405242                 mov     edx, [esp+3Ch+var_18]
.text:00405246                 cmp     eax, edx
.text:00405248                 jnb     short loc_405260
.text:0040524A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00405252                 mov     edx, 1
.text:00405257
.text:00405257 loc_405257:                             ; CODE XREF: sub_404E70+3F9↓j
.text:00405257                 xor     eax, eax
.text:00405259                 or      eax, edx
.text:0040525B                 jmp     loc_4050C8
.text:00405260 ; ---------------------------------------------------------------------------
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: sub_404E70+3D8↑j
.text:00405260                 imul    edx, ebx
.text:00405263                 mov     [esp+3Ch+var_18], edx
.text:00405267                 xor     edx, edx
.text:00405269                 jmp     short loc_405257
.text:0040526B ; ---------------------------------------------------------------------------
.text:0040526B
.text:0040526B loc_40526B:                             ; CODE XREF: sub_404E70+164↑j
.text:0040526B                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:0040526B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 cases 77,109
.text:0040526F                 xor     ebp, ebp
.text:00405271                 mov     esi, 1
.text:00405276
.text:00405276 loc_405276:                             ; CODE XREF: sub_404E70+42E↓j
.text:00405276                 xor     edx, edx
.text:00405278                 mov     eax, 0FFFFFFFFh
.text:0040527D                 div     ebx
.text:0040527F                 mov     edx, [ecx]
.text:00405281                 cmp     eax, edx
.text:00405283                 jnb     short loc_4052A0
.text:00405285                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040528B                 mov     eax, 1
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: sub_404E70+437↓j
.text:00405290                 dec     esi
.text:00405291                 or      ebp, eax
.text:00405293                 cmp     esi, 0FFFFFFFFh
.text:00405296                 mov     eax, ebp
.text:00405298                 jz      loc_4050C8
.text:0040529E                 jmp     short loc_405276
.text:004052A0 ; ---------------------------------------------------------------------------
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_404E70+413↑j
.text:004052A0                 imul    edx, ebx
.text:004052A3                 xor     eax, eax
.text:004052A5                 mov     [ecx], edx
.text:004052A7                 jmp     short loc_405290
.text:004052A9 ; ---------------------------------------------------------------------------
.text:004052A9
.text:004052A9 loc_4052A9:                             ; CODE XREF: sub_404E70+164↑j
.text:004052A9                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004052A9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00404FD4 cases 84,116
.text:004052AD                 xor     ebp, ebp
.text:004052AF                 mov     esi, 3
.text:004052B4
.text:004052B4 loc_4052B4:                             ; CODE XREF: sub_404E70+466↓j
.text:004052B4                 xor     edx, edx
.text:004052B6                 mov     eax, 0FFFFFFFFh
.text:004052BB                 div     ebx
.text:004052BD                 mov     edx, [ecx]
.text:004052BF                 cmp     eax, edx
.text:004052C1                 jnb     short loc_4052DD
.text:004052C3                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004052C9                 mov     eax, 1
.text:004052CE
.text:004052CE loc_4052CE:                             ; CODE XREF: sub_404E70+474↓j
.text:004052CE                 dec     esi
.text:004052CF                 or      ebp, eax
.text:004052D1                 cmp     esi, 0FFFFFFFFh
.text:004052D4                 mov     eax, ebp
.text:004052D6                 jnz     short loc_4052B4
.text:004052D8                 jmp     loc_4050C8
.text:004052DD ; ---------------------------------------------------------------------------
.text:004052DD
.text:004052DD loc_4052DD:                             ; CODE XREF: sub_404E70+451↑j
.text:004052DD                 imul    edx, ebx
.text:004052E0                 xor     eax, eax
.text:004052E2                 mov     [ecx], edx
.text:004052E4                 jmp     short loc_4052CE
.text:004052E6 ; ---------------------------------------------------------------------------
.text:004052E6
.text:004052E6 loc_4052E6:                             ; CODE XREF: sub_404E70+164↑j
.text:004052E6                                         ; DATA XREF: sub_404E70:jpt_404FD4↑o
.text:004052E6                 mov     eax, [esp+3Ch+var_18] ; jumptable 00404FD4 case 119
.text:004052EA                 test    eax, eax
.text:004052EC                 js      loc_4050EC
.text:004052F2                 add     eax, eax
.text:004052F4                 jmp     loc_4050C2
.text:004052F9 ; ---------------------------------------------------------------------------
.text:004052F9
.text:004052F9 loc_4052F9:                             ; CODE XREF: sub_404E70+13D↑j
.text:004052F9                                         ; sub_404E70+14F↑j
.text:004052F9                 mov     [esp+3Ch+var_24], 2
.text:00405301                 mov     ebx, 3E8h
.text:00405306                 jmp     loc_404FC5
.text:0040530B ; ---------------------------------------------------------------------------
.text:0040530B
.text:0040530B loc_40530B:                             ; CODE XREF: sub_404E70+146↑j
.text:0040530B                 cmp     eax, 69h ; 'i'
.text:0040530E                 jnz     loc_404FC5
.text:00405314                 mov     edx, [esp+3Ch+var_28]
.text:00405318                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040531C                 jnz     loc_404FC5
.text:00405322                 mov     [esp+3Ch+var_24], 3
.text:0040532A                 jmp     loc_404FC5
.text:0040532A ; ---------------------------------------------------------------------------
.text:0040532F                 align 10h
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: sub_404E70+12A↑j
.text:00405330                 mov     eax, [edi]
.text:00405332                 mov     [esp+3Ch+var_28], eax
.text:00405336                 jmp     loc_404FC5
.text:0040533B ; ---------------------------------------------------------------------------
.text:0040533B
.text:0040533B loc_40533B:                             ; CODE XREF: sub_404E70+B0↑j
.text:0040533B                 call    _errno
.text:00405340                 cmp     dword ptr [eax], 22h ; '"'
.text:00405343                 jnz     short loc_405352
.text:00405345                 mov     [esp+3Ch+var_1C], 1
.text:0040534D                 jmp     loc_404F26
.text:00405352 ; ---------------------------------------------------------------------------
.text:00405352
.text:00405352 loc_405352:                             ; CODE XREF: sub_404E70+4D3↑j
.text:00405352                                         ; sub_404E70+4F2↓j ...
.text:00405352                 mov     eax, 4
.text:00405357                 jmp     loc_404F45
.text:0040535C ; ---------------------------------------------------------------------------
.text:0040535C
.text:0040535C loc_40535C:                             ; CODE XREF: sub_404E70+A1↑j
.text:0040535C                 mov     edx, [esp+3Ch+Str]
.text:00405360                 test    edx, edx
.text:00405362                 jz      short loc_405352
.text:00405364                 movzx   eax, byte ptr [eax]
.text:00405367                 test    al, al
.text:00405369                 jz      short loc_405352
.text:0040536B                 mov     ebx, [esp+3Ch+Str]
.text:0040536F                 movsx   esi, al
.text:00405372                 mov     [esp+3Ch+Type], esi ; Val
.text:00405376                 mov     [esp+3Ch+C], ebx ; Str
.text:00405379                 call    strchr
.text:0040537E                 test    eax, eax
.text:00405380                 jz      short loc_405352
.text:00405382                 mov     [esp+3Ch+var_18], 1
.text:0040538A                 jmp     loc_404F26
.text:0040538A ; ---------------------------------------------------------------------------
.text:0040538F                 align 10h
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: sub_404E70+4E↑j
.text:00405390                 mov     eax, ds:_pctype
.text:00405395                 mov     ecx, [eax]
.text:00405397                 movzx   eax, word ptr [ecx+edx*2]
.text:0040539B                 and     eax, 8
.text:0040539E                 jmp     loc_404ED4
.text:004053A3 ; ---------------------------------------------------------------------------
.text:004053A3
.text:004053A3 loc_4053A3:                             ; CODE XREF: sub_404E70+26↑j
.text:004053A3                 lea     edi, [esp+3Ch+var_14]
.text:004053A7                 jmp     loc_404E9C
.text:004053AC ; ---------------------------------------------------------------------------
.text:004053AC
.text:004053AC loc_4053AC:                             ; CODE XREF: sub_404E70+1A↑j
.text:004053AC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004053B4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004053BC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004053C3                 call    _assert
.text:004053C3 sub_404E70      endp
.text:004053C3
.text:004053C3 ; ---------------------------------------------------------------------------
.text:004053C8                 align 20h
.text:004053E0 aLiteral        db 'literal',0          ; DATA XREF: .text:00405420↓o
.text:004053E8 aShell          db 'shell',0            ; DATA XREF: .text:00405424↓o
.text:004053EE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405428↓o
.text:004053FB aC              db 'c',0                ; DATA XREF: .text:0040542C↓o
.text:004053FD aEscape         db 'escape',0           ; DATA XREF: .text:00405430↓o
.text:00405404 aLocale         db 'locale',0           ; DATA XREF: .text:00405434↓o
.text:0040540B aClocale        db 'clocale',0          ; DATA XREF: .text:00405438↓o
.text:00405413                 align 10h
.text:00405420                 dd offset aLiteral      ; "literal"
.text:00405424                 dd offset aShell        ; "shell"
.text:00405428                 dd offset aShellAlways  ; "shell-always"
.text:0040542C                 dd offset aC            ; "c"
.text:00405430                 dd offset aEscape       ; "escape"
.text:00405434                 dd offset aLocale       ; "locale"
.text:00405438                 dd offset aClocale      ; "clocale"
.text:0040543C                 dd 2 dup(0)
.text:00405444                 dd 1, 2, 3, 4, 5, 6
.text:0040545C asc_40545C:                             ; DATA XREF: sub_405470+7E↓o
.text:0040545C                                         ; sub_405470+A39↓o ...
.text:0040545C                 text "UTF-16LE", '"',27h,'`'
.text:00405462                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470
.text:00405470 ; int __cdecl sub_405470(int, int, char *Str, int, int, int)
.text:00405470 sub_405470      proc near               ; CODE XREF: sub_405470+43A↓p
.text:00405470                                         ; .text:00406033↓p ...
.text:00405470
.text:00405470 C               = dword ptr -4Ch
.text:00405470 Type            = dword ptr -48h
.text:00405470 SizeInBytes     = dword ptr -44h
.text:00405470 State           = dword ptr -40h
.text:00405470 var_3C          = dword ptr -3Ch
.text:00405470 var_38          = dword ptr -38h
.text:00405470 var_34          = dword ptr -34h
.text:00405470 var_30          = dword ptr -30h
.text:00405470 var_29          = byte ptr -29h
.text:00405470 var_28          = dword ptr -28h
.text:00405470 var_22          = byte ptr -22h
.text:00405470 var_21          = byte ptr -21h
.text:00405470 var_20          = dword ptr -20h
.text:00405470 var_1C          = dword ptr -1Ch
.text:00405470 var_18          = mbstate_t ptr -18h
.text:00405470 arg_0           = dword ptr  4
.text:00405470 arg_4           = dword ptr  8
.text:00405470 Str             = dword ptr  0Ch
.text:00405470 arg_C           = dword ptr  10h
.text:00405470 arg_10          = dword ptr  14h
.text:00405470 arg_14          = dword ptr  18h
.text:00405470
.text:00405470                 push    ebp
.text:00405471                 push    edi
.text:00405472                 push    esi
.text:00405473                 push    ebx
.text:00405474                 sub     esp, 3Ch
.text:00405477                 mov     edx, ds:__mb_cur_max
.text:0040547D                 mov     [esp+4Ch+var_34], 0
.text:00405485                 mov     [esp+4Ch+var_1C], 0
.text:0040548D                 cmp     dword ptr [edx], 1
.text:00405490                 mov     [esp+4Ch+var_20], 0
.text:00405498                 mov     [esp+4Ch+var_21], 0
.text:0040549D                 setz    [esp+4Ch+var_22]
.text:004054A2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004054A7                 ja      short def_4054AD ; jumptable 004054AD default case, cases 0,1
.text:004054A9                 mov     edx, [esp+4Ch+arg_10]
.text:004054AD                 jmp     ds:jpt_4054AD[edx*4] ; switch jump
.text:004054AD ; ---------------------------------------------------------------------------
.text:004054B4 jpt_4054AD      dd offset def_4054AD    ; DATA XREF: sub_405470+3D↑r
.text:004054B4                 dd offset def_4054AD    ; jump table for switch statement
.text:004054B4                 dd offset loc_405DF5
.text:004054B4                 dd offset loc_4054D0
.text:004054B4                 dd offset loc_405E1B
.text:004054B4                 dd offset loc_405E25
.text:004054B4                 dd offset loc_405E25
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405470+3D↑j
.text:004054D0                                         ; DATA XREF: sub_405470:jpt_4054AD↑o
.text:004054D0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004054AD case 3
.text:004054D4                 cmp     [esp+4Ch+var_34], eax
.text:004054D8                 jnb     short loc_4054E1
.text:004054DA                 mov     ebx, [esp+4Ch+arg_0]
.text:004054DE                 mov     byte ptr [ebx], 22h ; '"'
.text:004054E1
.text:004054E1 loc_4054E1:                             ; CODE XREF: sub_405470+68↑j
.text:004054E1                 mov     [esp+4Ch+var_34], 1
.text:004054E9                 mov     [esp+4Ch+var_21], 1
.text:004054EE                 mov     [esp+4Ch+var_1C], offset asc_40545C ; "\"'`"
.text:004054F6
.text:004054F6 loc_4054F6:                             ; CODE XREF: sub_405470+9A6↓j
.text:004054F6                 mov     [esp+4Ch+var_20], 1
.text:004054FE
.text:004054FE def_4054AD:                             ; CODE XREF: sub_405470+37↑j
.text:004054FE                                         ; sub_405470+3D↑j ...
.text:004054FE                 xor     ebp, ebp        ; jumptable 004054AD default case, cases 0,1
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_405470+3DB↓j
.text:00405500                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405505                 jz      loc_405DE7
.text:0040550B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040550F
.text:0040550F loc_40550F:                             ; CODE XREF: sub_405470+980↓j
.text:0040550F                 jz      loc_405D7E
.text:00405515                 cmp     [esp+4Ch+var_21], 0
.text:0040551A                 jz      short loc_405560
.text:0040551C                 mov     esi, [esp+4Ch+var_20]
.text:00405520                 test    esi, esi
.text:00405522                 jz      short loc_405560
.text:00405524                 mov     ecx, [esp+4Ch+var_20]
.text:00405528                 lea     edi, [ecx+ebp]
.text:0040552B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040552F                 ja      short loc_405560
.text:00405531                 cld
.text:00405532                 mov     ebx, [esp+4Ch+Str]
.text:00405536                 mov     edi, [esp+4Ch+var_1C]
.text:0040553A                 add     ebx, ebp
.text:0040553C                 mov     esi, ebx
.text:0040553E                 cmp     ecx, ecx
.text:00405540                 repe cmpsb
.text:00405542                 jnz     short loc_405560
.text:00405544                 mov     edx, [esp+4Ch+arg_4]
.text:00405548                 cmp     [esp+4Ch+var_34], edx
.text:0040554C                 jnb     short loc_40555A
.text:0040554E                 mov     ecx, [esp+4Ch+arg_0]
.text:00405552                 mov     eax, [esp+4Ch+var_34]
.text:00405556                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040555A
.text:0040555A loc_40555A:                             ; CODE XREF: sub_405470+DC↑j
.text:0040555A                 inc     [esp+4Ch+var_34]
.text:0040555E                 mov     esi, esi
.text:00405560
.text:00405560 loc_405560:                             ; CODE XREF: sub_405470+AA↑j
.text:00405560                                         ; sub_405470+B2↑j ...
.text:00405560                 mov     edi, [esp+4Ch+Str]
.text:00405564                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00405569                 movzx   eax, bl
.text:0040556C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040556F                 ja      def_405575      ; jumptable 00405575 default case, cases 1-6,14-31,64
.text:00405575                 jmp     ds:jpt_405575[eax*4] ; switch jump
.text:00405575 ; ---------------------------------------------------------------------------
.text:0040557C jpt_405575      dd offset loc_405778, offset def_405575, offset def_405575
.text:0040557C                                         ; DATA XREF: sub_405470+105↑r
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575 ; jump table for switch statement
.text:0040557C                 dd offset def_405575, offset loc_405850, offset loc_40586E
.text:0040557C                 dd offset loc_405872, offset loc_4058B7, offset loc_4058BB
.text:0040557C                 dd offset loc_4058BF, offset loc_4058C3, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset def_405575
.text:0040557C                 dd offset def_405575, offset def_405575, offset loc_405D48
.text:0040557C                 dd offset loc_405D48, offset loc_405D48, offset loc_405D6A
.text:0040557C                 dd offset loc_405D48, offset def_405972, offset loc_405D48
.text:0040557C                 dd offset loc_4058C7, offset loc_405D48, offset loc_405D48
.text:0040557C                 dd offset loc_405D48, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset loc_405D48
.text:0040557C                 dd offset loc_405D48, offset loc_405D48, offset loc_405D48
.text:0040557C                 dd offset loc_40592C, offset def_405575, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset loc_405D48, offset loc_405D41
.text:0040557C                 dd offset def_405972, offset loc_405D48, offset def_405972
.text:0040557C                 dd offset loc_405D48, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset def_405972, offset def_405972, offset def_405972
.text:0040557C                 dd offset loc_405D58, offset loc_405D48, offset loc_405D58
.text:0040557C                 dd offset loc_405D6A
.text:00405778 ; ---------------------------------------------------------------------------
.text:00405778
.text:00405778 loc_405778:                             ; CODE XREF: sub_405470+105↑j
.text:00405778                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405778                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405575 case 0
.text:0040577D                 lea     eax, [ebp+1]
.text:00405780                 jz      loc_405830
.text:00405786                 mov     esi, [esp+4Ch+arg_4]
.text:0040578A                 cmp     [esp+4Ch+var_34], esi
.text:0040578E                 jnb     short loc_40579C
.text:00405790                 mov     eax, [esp+4Ch+arg_0]
.text:00405794                 mov     ebx, [esp+4Ch+var_34]
.text:00405798                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040579C
.text:0040579C loc_40579C:                             ; CODE XREF: sub_405470+31E↑j
.text:0040579C                 inc     [esp+4Ch+var_34]
.text:004057A0                 mov     edx, [esp+4Ch+arg_4]
.text:004057A4                 cmp     [esp+4Ch+var_34], edx
.text:004057A8                 jnb     short loc_4057B6
.text:004057AA                 mov     edi, [esp+4Ch+arg_0]
.text:004057AE                 mov     ecx, [esp+4Ch+var_34]
.text:004057B2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004057B6
.text:004057B6 loc_4057B6:                             ; CODE XREF: sub_405470+338↑j
.text:004057B6                 inc     [esp+4Ch+var_34]
.text:004057BA                 mov     esi, [esp+4Ch+arg_4]
.text:004057BE                 cmp     [esp+4Ch+var_34], esi
.text:004057C2                 jnb     short loc_4057D0
.text:004057C4                 mov     ebx, [esp+4Ch+arg_0]
.text:004057C8                 mov     eax, [esp+4Ch+var_34]
.text:004057CC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: sub_405470+352↑j
.text:004057D0                 inc     [esp+4Ch+var_34]
.text:004057D4                 mov     bl, 30h ; '0'
.text:004057D6                 lea     esi, [esi+0]
.text:004057D9                 lea     edi, [edi+0]
.text:004057E0
.text:004057E0 def_405972:                             ; CODE XREF: sub_405470+105↑j
.text:004057E0                                         ; sub_405470+463↓j ...
.text:004057E0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:004057E0                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:004057E5                 lea     eax, [ebp+1]
.text:004057E8                 jz      short loc_405830
.text:004057EA                 mov     cl, bl
.text:004057EC                 mov     edi, [esp+4Ch+arg_14]
.text:004057F0                 mov     esi, 1
.text:004057F5                 shr     cl, 5
.text:004057F8                 movzx   edx, cl
.text:004057FB                 mov     ecx, ebx
.text:004057FD                 and     ecx, 1Fh
.text:00405800                 shl     esi, cl
.text:00405802                 test    [edi+edx*4+4], esi
.text:00405806                 jz      short loc_405822
.text:00405808
.text:00405808 loc_405808:                             ; CODE XREF: sub_405470+3FC↓j
.text:00405808                 mov     edx, [esp+4Ch+arg_4]
.text:0040580C                 cmp     [esp+4Ch+var_34], edx
.text:00405810                 jnb     short loc_40581E
.text:00405812                 mov     edi, [esp+4Ch+arg_0]
.text:00405816                 mov     esi, [esp+4Ch+var_34]
.text:0040581A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040581E
.text:0040581E loc_40581E:                             ; CODE XREF: sub_405470+3A0↑j
.text:0040581E                 inc     [esp+4Ch+var_34]
.text:00405822
.text:00405822 loc_405822:                             ; CODE XREF: sub_405470+396↑j
.text:00405822                 lea     eax, [ebp+1]
.text:00405825                 lea     esi, [esi+0]
.text:00405829                 lea     edi, [edi+0]
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_405470+310↑j
.text:00405830                                         ; sub_405470+378↑j ...
.text:00405830                 mov     ebp, [esp+4Ch+arg_4]
.text:00405834                 cmp     [esp+4Ch+var_34], ebp
.text:00405838                 jnb     short loc_405845
.text:0040583A                 mov     edx, [esp+4Ch+arg_0]
.text:0040583E                 mov     ecx, [esp+4Ch+var_34]
.text:00405842                 mov     [ecx+edx], bl
.text:00405845
.text:00405845 loc_405845:                             ; CODE XREF: sub_405470+3C8↑j
.text:00405845                 inc     [esp+4Ch+var_34]
.text:00405849                 mov     ebp, eax
.text:0040584B                 jmp     loc_405500
.text:00405850 ; ---------------------------------------------------------------------------
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_405470+105↑j
.text:00405850                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405850                 mov     dl, 61h ; 'a'   ; jumptable 00405575 case 7
.text:00405852                 lea     esi, [esi+0]
.text:00405859                 lea     edi, [edi+0]
.text:00405860
.text:00405860 loc_405860:                             ; CODE XREF: sub_405470+400↓j
.text:00405860                                         ; sub_405470+409↓j ...
.text:00405860                 cmp     [esp+4Ch+var_21], 0
.text:00405865                 lea     eax, [ebp+1]
.text:00405868                 jz      short loc_405830
.text:0040586A                 mov     bl, dl
.text:0040586C                 jmp     short loc_405808
.text:0040586E ; ---------------------------------------------------------------------------
.text:0040586E
.text:0040586E loc_40586E:                             ; CODE XREF: sub_405470+105↑j
.text:0040586E                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:0040586E                 mov     dl, 62h ; 'b'   ; jumptable 00405575 case 8
.text:00405870                 jmp     short loc_405860
.text:00405872 ; ---------------------------------------------------------------------------
.text:00405872
.text:00405872 loc_405872:                             ; CODE XREF: sub_405470+105↑j
.text:00405872                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405872                 mov     dl, 74h ; 't'   ; jumptable 00405575 case 9
.text:00405874
.text:00405874 loc_405874:                             ; CODE XREF: sub_405470+449↓j
.text:00405874                                         ; sub_405470+455↓j ...
.text:00405874                 cmp     [esp+4Ch+arg_10], 1
.text:00405879                 jnz     short loc_405860
.text:0040587B
.text:0040587B loc_40587B:                             ; CODE XREF: sub_405470+45C↓j
.text:0040587B                                         ; sub_405470+4C1↓j ...
.text:0040587B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405C42 cases 91,92,94,96,124
.text:00405883                 mov     eax, [esp+4Ch+arg_14]
.text:00405887                 mov     edx, [esp+4Ch+arg_C]
.text:0040588B                 mov     ecx, [esp+4Ch+Str]
.text:0040588F                 mov     ebx, [esp+4Ch+arg_4]
.text:00405893                 mov     [esp+4Ch+var_38], eax ; int
.text:00405897                 mov     ebp, [esp+4Ch+arg_0]
.text:0040589B                 mov     [esp+4Ch+State], edx ; int
.text:0040589F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004058A3                 mov     [esp+4Ch+Type], ebx ; int
.text:004058A7                 mov     [esp+4Ch+C], ebp ; int
.text:004058AA                 call    sub_405470
.text:004058AF
.text:004058AF loc_4058AF:                             ; CODE XREF: sub_405470+972↓j
.text:004058AF                 add     esp, 3Ch
.text:004058B2                 pop     ebx
.text:004058B3                 pop     esi
.text:004058B4                 pop     edi
.text:004058B5                 pop     ebp
.text:004058B6                 retn
.text:004058B7 ; ---------------------------------------------------------------------------
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: sub_405470+105↑j
.text:004058B7                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:004058B7                 mov     dl, 6Eh ; 'n'   ; jumptable 00405575 case 10
.text:004058B9                 jmp     short loc_405874
.text:004058BB ; ---------------------------------------------------------------------------
.text:004058BB
.text:004058BB loc_4058BB:                             ; CODE XREF: sub_405470+105↑j
.text:004058BB                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:004058BB                 mov     dl, 76h ; 'v'   ; jumptable 00405575 case 11
.text:004058BD                 jmp     short loc_405860
.text:004058BF ; ---------------------------------------------------------------------------
.text:004058BF
.text:004058BF loc_4058BF:                             ; CODE XREF: sub_405470+105↑j
.text:004058BF                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:004058BF                 mov     dl, 66h ; 'f'   ; jumptable 00405575 case 12
.text:004058C1                 jmp     short loc_405860
.text:004058C3 ; ---------------------------------------------------------------------------
.text:004058C3
.text:004058C3 loc_4058C3:                             ; CODE XREF: sub_405470+105↑j
.text:004058C3                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:004058C3                 mov     dl, 72h ; 'r'   ; jumptable 00405575 case 13
.text:004058C5                 jmp     short loc_405874
.text:004058C7 ; ---------------------------------------------------------------------------
.text:004058C7
.text:004058C7 loc_4058C7:                             ; CODE XREF: sub_405470+105↑j
.text:004058C7                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:004058C7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405575 case 39
.text:004058CC                 jz      short loc_40587B ; jumptable 00405C42 cases 91,92,94,96,124
.text:004058CE                 cmp     [esp+4Ch+arg_10], 2
.text:004058D3                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:004058D3                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:004058D9                 mov     edx, [esp+4Ch+arg_4]
.text:004058DD                 cmp     [esp+4Ch+var_34], edx
.text:004058E1                 jnb     short loc_4058EF
.text:004058E3                 mov     ecx, [esp+4Ch+arg_0]
.text:004058E7                 mov     edi, [esp+4Ch+var_34]
.text:004058EB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004058EF
.text:004058EF loc_4058EF:                             ; CODE XREF: sub_405470+471↑j
.text:004058EF                 inc     [esp+4Ch+var_34]
.text:004058F3                 mov     eax, [esp+4Ch+arg_4]
.text:004058F7                 cmp     [esp+4Ch+var_34], eax
.text:004058FB                 jnb     short loc_405909
.text:004058FD                 mov     esi, [esp+4Ch+arg_0]
.text:00405901                 mov     edx, [esp+4Ch+var_34]
.text:00405905                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405909
.text:00405909 loc_405909:                             ; CODE XREF: sub_405470+48B↑j
.text:00405909                 inc     [esp+4Ch+var_34]
.text:0040590D                 mov     edi, [esp+4Ch+arg_4]
.text:00405911                 cmp     [esp+4Ch+var_34], edi
.text:00405915                 jnb     short loc_405923
.text:00405917                 mov     ecx, [esp+4Ch+arg_0]
.text:0040591B                 mov     eax, [esp+4Ch+var_34]
.text:0040591F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00405923
.text:00405923 loc_405923:                             ; CODE XREF: sub_405470+4A5↑j
.text:00405923                                         ; sub_405470+5C4↓j ...
.text:00405923                 inc     [esp+4Ch+var_34]
.text:00405927                 jmp     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405927                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:0040592C ; ---------------------------------------------------------------------------
.text:0040592C
.text:0040592C loc_40592C:                             ; CODE XREF: sub_405470+105↑j
.text:0040592C                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:0040592C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405575 case 63
.text:00405931                 jz      loc_40587B      ; jumptable 00405C42 cases 91,92,94,96,124
.text:00405937                 cmp     [esp+4Ch+arg_10], 3
.text:0040593C                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:0040593C                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405942                 lea     edx, [ebp+2]
.text:00405945                 cmp     edx, [esp+4Ch+arg_C]
.text:00405949                 jnb     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405949                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:0040594F                 mov     esi, [esp+4Ch+Str]
.text:00405953                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00405958                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405958                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:0040595E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00405963                 movsx   eax, cl
.text:00405966                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00405969                 cmp     eax, 1Dh
.text:0040596C                 ja      def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:0040596C                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405972                 jmp     ds:jpt_405972[eax*4] ; switch jump
.text:00405972 ; ---------------------------------------------------------------------------
.text:00405979                 align 4
.text:0040597C jpt_405972      dd offset loc_4059F4    ; DATA XREF: sub_405470+502↑r
.text:0040597C                 dd offset def_405972    ; jump table for switch statement
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset def_405972
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset loc_4059F4
.text:0040597C                 dd offset loc_4059F4
.text:004059F4 ; ---------------------------------------------------------------------------
.text:004059F4
.text:004059F4 loc_4059F4:                             ; CODE XREF: sub_405470+502↑j
.text:004059F4                                         ; DATA XREF: sub_405470:jpt_405972↑o
.text:004059F4                 mov     ebp, edx        ; jumptable 00405972 cases 33,39-41,45,47,60-62
.text:004059F6                 mov     bl, cl
.text:004059F8                 mov     edx, [esp+4Ch+arg_4]
.text:004059FC                 cmp     [esp+4Ch+var_34], edx
.text:00405A00                 jnb     short loc_405A0E
.text:00405A02                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A06                 mov     edi, [esp+4Ch+var_34]
.text:00405A0A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00405A0E
.text:00405A0E loc_405A0E:                             ; CODE XREF: sub_405470+590↑j
.text:00405A0E                 inc     [esp+4Ch+var_34]
.text:00405A12                 mov     eax, [esp+4Ch+arg_4]
.text:00405A16                 cmp     [esp+4Ch+var_34], eax
.text:00405A1A                 jnb     short loc_405A28
.text:00405A1C                 mov     edx, [esp+4Ch+arg_0]
.text:00405A20                 mov     esi, [esp+4Ch+var_34]
.text:00405A24                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405A28
.text:00405A28 loc_405A28:                             ; CODE XREF: sub_405470+5AA↑j
.text:00405A28                 inc     [esp+4Ch+var_34]
.text:00405A2C                 mov     edi, [esp+4Ch+arg_4]
.text:00405A30                 cmp     [esp+4Ch+var_34], edi
.text:00405A34                 jnb     loc_405923
.text:00405A3A                 mov     eax, [esp+4Ch+arg_0]
.text:00405A3E                 mov     ecx, [esp+4Ch+var_34]
.text:00405A42                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00405A46                 jmp     loc_405923
.text:00405A46 ; ---------------------------------------------------------------------------
.text:00405A4B                 align 10h
.text:00405A50
.text:00405A50 def_405575:                             ; CODE XREF: sub_405470+FF↑j
.text:00405A50                                         ; sub_405470+105↑j
.text:00405A50                                         ; DATA XREF: ...
.text:00405A50                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00405575 default case, cases 1-6,14-31,64
.text:00405A55                 jz      loc_405B80
.text:00405A5B                 mov     [esp+4Ch+var_28], 1
.text:00405A63                 mov     esi, ds:__mb_cur_max
.text:00405A69                 movzx   edx, bl
.text:00405A6C                 cmp     dword ptr [esi], 1
.text:00405A6F                 jz      loc_405B64
.text:00405A75                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405A7D                 mov     [esp+4Ch+C], edx ; C
.text:00405A80                 call    _isctype
.text:00405A85
.text:00405A85 loc_405A85:                             ; CODE XREF: sub_405470+705↓j
.text:00405A85                 test    eax, eax
.text:00405A87                 setnz   [esp+4Ch+var_29]
.text:00405A8C
.text:00405A8C loc_405A8C:                             ; CODE XREF: sub_405470+7A5↓j
.text:00405A8C                 cmp     [esp+4Ch+var_21], 0
.text:00405A91                 lea     eax, [ebp+1]
.text:00405A94                 jz      loc_405830
.text:00405A9A                 cmp     [esp+4Ch+var_29], 0
.text:00405A9F                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405A9F                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405AA5
.text:00405AA5 loc_405AA5:                             ; CODE XREF: sub_405470+7AB↓j
.text:00405AA5                 mov     eax, [esp+4Ch+var_28]
.text:00405AA9                 lea     edx, [eax+ebp]
.text:00405AAC                 lea     esi, [esi+0]
.text:00405AB0
.text:00405AB0 loc_405AB0:                             ; CODE XREF: sub_405470+6EF↓j
.text:00405AB0                 cmp     [esp+4Ch+var_21], 0
.text:00405AB5                 jz      short loc_405B30
.text:00405AB7                 cmp     [esp+4Ch+var_29], 0
.text:00405ABC                 jnz     short loc_405B30
.text:00405ABE                 mov     edi, [esp+4Ch+arg_4]
.text:00405AC2                 cmp     [esp+4Ch+var_34], edi
.text:00405AC6                 jnb     short loc_405AD4
.text:00405AC8                 mov     esi, [esp+4Ch+arg_0]
.text:00405ACC                 mov     eax, [esp+4Ch+var_34]
.text:00405AD0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405AD4
.text:00405AD4 loc_405AD4:                             ; CODE XREF: sub_405470+656↑j
.text:00405AD4                 inc     [esp+4Ch+var_34]
.text:00405AD8                 mov     ecx, [esp+4Ch+arg_4]
.text:00405ADC                 cmp     [esp+4Ch+var_34], ecx
.text:00405AE0                 jnb     short loc_405AF5
.text:00405AE2                 mov     cl, bl
.text:00405AE4                 mov     esi, [esp+4Ch+arg_0]
.text:00405AE8                 mov     edi, [esp+4Ch+var_34]
.text:00405AEC                 shr     cl, 6
.text:00405AEF                 add     cl, 30h ; '0'
.text:00405AF2                 mov     [edi+esi], cl
.text:00405AF5
.text:00405AF5 loc_405AF5:                             ; CODE XREF: sub_405470+670↑j
.text:00405AF5                 inc     [esp+4Ch+var_34]
.text:00405AF9                 mov     edi, [esp+4Ch+arg_4]
.text:00405AFD                 cmp     [esp+4Ch+var_34], edi
.text:00405B01                 jnb     short loc_405B19
.text:00405B03                 mov     cl, bl
.text:00405B05                 mov     esi, [esp+4Ch+arg_0]
.text:00405B09                 shr     cl, 3
.text:00405B0C                 mov     edi, [esp+4Ch+var_34]
.text:00405B10                 and     cl, 7
.text:00405B13                 add     cl, 30h ; '0'
.text:00405B16                 mov     [edi+esi], cl
.text:00405B19
.text:00405B19 loc_405B19:                             ; CODE XREF: sub_405470+691↑j
.text:00405B19                 inc     [esp+4Ch+var_34]
.text:00405B1D                 and     bl, 7
.text:00405B20                 add     bl, 30h ; '0'
.text:00405B23                 lea     esi, [esi+0]
.text:00405B29                 lea     edi, [edi+0]
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405470+645↑j
.text:00405B30                                         ; sub_405470+64C↑j
.text:00405B30                 lea     eax, [ebp+1]
.text:00405B33                 cmp     edx, eax
.text:00405B35                 jbe     loc_405830
.text:00405B3B                 mov     ebp, [esp+4Ch+arg_4]
.text:00405B3F                 cmp     [esp+4Ch+var_34], ebp
.text:00405B43                 jnb     short loc_405B50
.text:00405B45                 mov     ecx, [esp+4Ch+arg_0]
.text:00405B49                 mov     edi, [esp+4Ch+var_34]
.text:00405B4D                 mov     [edi+ecx], bl
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_405470+6D3↑j
.text:00405B50                 inc     [esp+4Ch+var_34]
.text:00405B54                 mov     ebp, eax
.text:00405B56                 mov     eax, [esp+4Ch+Str]
.text:00405B5A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00405B5F                 jmp     loc_405AB0
.text:00405B64 ; ---------------------------------------------------------------------------
.text:00405B64
.text:00405B64 loc_405B64:                             ; CODE XREF: sub_405470+5FF↑j
.text:00405B64                 mov     ecx, ds:_pctype
.text:00405B6A                 mov     edi, [ecx]
.text:00405B6C                 movzx   eax, word ptr [edi+edx*2]
.text:00405B70                 and     eax, 157h
.text:00405B75                 jmp     loc_405A85
.text:00405B75 ; ---------------------------------------------------------------------------
.text:00405B7A                 align 10h
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: sub_405470+5E5↑j
.text:00405B80                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405B85                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00405B8D                 mov     [esp+4Ch+var_28], 0
.text:00405B95                 mov     [esp+4Ch+var_29], 1
.text:00405B9A                 jz      loc_405D2C
.text:00405BA0
.text:00405BA0 loc_405BA0:                             ; CODE XREF: sub_405470+8CC↓j
.text:00405BA0                 mov     ecx, [esp+4Ch+arg_C]
.text:00405BA4                 lea     edx, [esp+4Ch+var_18]
.text:00405BA8                 mov     edi, [esp+4Ch+Str]
.text:00405BAC                 mov     [esp+4Ch+State], edx ; State
.text:00405BB0                 lea     esi, [esp+4Ch+var_18._State]
.text:00405BB4                 sub     ecx, ebp
.text:00405BB6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00405BBA                 add     edi, ebp
.text:00405BBC                 mov     [esp+4Ch+var_30], edi
.text:00405BC0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405BC4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405BC7                 call    mbrtowc
.text:00405BCC                 test    eax, eax
.text:00405BCE                 mov     edi, eax
.text:00405BD0                 jz      short loc_405C10
.text:00405BD2                 cmp     eax, 0FFFFFFFFh
.text:00405BD5                 jz      loc_405D22
.text:00405BDB                 cmp     eax, 0FFFFFFFEh
.text:00405BDE                 jz      loc_405CE2
.text:00405BE4                 cmp     [esp+4Ch+arg_10], 1
.text:00405BE9                 jz      short loc_405C20
.text:00405BEB
.text:00405BEB loc_405BEB:                             ; CODE XREF: sub_405470+7B9↓j
.text:00405BEB                                         ; sub_405470+86D↓j
.text:00405BEB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405BF0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405BF8                 mov     [esp+4Ch+C], ecx ; C
.text:00405BFB                 call    iswctype
.text:00405C00                 test    eax, eax
.text:00405C02                 jnz     short loc_405C09
.text:00405C04                 mov     [esp+4Ch+var_29], 0
.text:00405C09
.text:00405C09 loc_405C09:                             ; CODE XREF: sub_405470+792↑j
.text:00405C09                 mov     [esp+4Ch+var_28], edi
.text:00405C0D                 lea     esi, [esi+0]
.text:00405C10
.text:00405C10 loc_405C10:                             ; CODE XREF: sub_405470+760↑j
.text:00405C10                                         ; sub_405470+87B↓j ...
.text:00405C10                 cmp     [esp+4Ch+var_28], 1
.text:00405C15                 jbe     loc_405A8C
.text:00405C1B                 jmp     loc_405AA5
.text:00405C20 ; ---------------------------------------------------------------------------
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: sub_405470+779↑j
.text:00405C20                 cmp     [esp+4Ch+arg_10], eax
.text:00405C24                 mov     edx, 1
.text:00405C29                 jnb     short loc_405BEB
.text:00405C2B
.text:00405C2B loc_405C2B:                             ; CODE XREF: sub_405470+867↓j
.text:00405C2B                 mov     ecx, [esp+4Ch+Str]
.text:00405C2F                 lea     esi, [edx+ebp]
.text:00405C32                 movsx   eax, byte ptr [esi+ecx]
.text:00405C36                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405C39                 cmp     eax, 21h
.text:00405C3C                 ja      def_405C42      ; jumptable 00405C42 default case, cases 93,95,97-123
.text:00405C42                 jmp     ds:jpt_405C42[eax*4] ; switch jump
.text:00405C42 ; ---------------------------------------------------------------------------
.text:00405C49                 align 4
.text:00405C4C jpt_405C42      dd offset loc_40587B    ; DATA XREF: sub_405470+7D2↑r
.text:00405C4C                 dd offset loc_40587B    ; jump table for switch statement
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset loc_40587B
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset loc_40587B
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset def_405C42
.text:00405C4C                 dd offset loc_40587B
.text:00405CD4 ; ---------------------------------------------------------------------------
.text:00405CD4
.text:00405CD4 def_405C42:                             ; CODE XREF: sub_405470+7CC↑j
.text:00405CD4                                         ; sub_405470+7D2↑j
.text:00405CD4                                         ; DATA XREF: ...
.text:00405CD4                 inc     edx             ; jumptable 00405C42 default case, cases 93,95,97-123
.text:00405CD5                 cmp     edx, edi
.text:00405CD7                 jb      loc_405C2B
.text:00405CDD                 jmp     loc_405BEB
.text:00405CE2 ; ---------------------------------------------------------------------------
.text:00405CE2
.text:00405CE2 loc_405CE2:                             ; CODE XREF: sub_405470+76E↑j
.text:00405CE2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405CE6                 mov     [esp+4Ch+var_29], 0
.text:00405CEB                 jnb     loc_405C10
.text:00405CF1                 mov     eax, [esp+4Ch+var_30]
.text:00405CF5                 cmp     byte ptr [eax], 0
.text:00405CF8                 jz      loc_405C10
.text:00405CFE
.text:00405CFE loc_405CFE:                             ; CODE XREF: sub_405470+8AB↓j
.text:00405CFE                 inc     [esp+4Ch+var_28]
.text:00405D02                 mov     esi, [esp+4Ch+var_28]
.text:00405D06                 lea     eax, [esi+ebp]
.text:00405D09                 cmp     eax, [esp+4Ch+arg_C]
.text:00405D0D                 jnb     loc_405C10
.text:00405D13                 mov     edi, [esp+4Ch+Str]
.text:00405D17                 cmp     byte ptr [eax+edi], 0
.text:00405D1B                 jnz     short loc_405CFE
.text:00405D1D                 jmp     loc_405C10
.text:00405D22 ; ---------------------------------------------------------------------------
.text:00405D22
.text:00405D22 loc_405D22:                             ; CODE XREF: sub_405470+765↑j
.text:00405D22                 mov     [esp+4Ch+var_29], 0
.text:00405D27                 jmp     loc_405C10
.text:00405D2C ; ---------------------------------------------------------------------------
.text:00405D2C
.text:00405D2C loc_405D2C:                             ; CODE XREF: sub_405470+72A↑j
.text:00405D2C                 mov     edx, [esp+4Ch+Str]
.text:00405D30                 mov     [esp+4Ch+C], edx ; Str
.text:00405D33                 call    strlen
.text:00405D38                 mov     [esp+4Ch+arg_C], eax
.text:00405D3C                 jmp     loc_405BA0
.text:00405D41 ; ---------------------------------------------------------------------------
.text:00405D41
.text:00405D41 loc_405D41:                             ; CODE XREF: sub_405470+105↑j
.text:00405D41                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405D41                 mov     dl, bl          ; jumptable 00405575 case 92
.text:00405D43                 jmp     loc_405874
.text:00405D48 ; ---------------------------------------------------------------------------
.text:00405D48
.text:00405D48 loc_405D48:                             ; CODE XREF: sub_405470+105↑j
.text:00405D48                                         ; sub_405470+902↓j
.text:00405D48                                         ; DATA XREF: ...
.text:00405D48                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405575 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405D4D                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405D4D                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405D53                 jmp     loc_40587B      ; jumptable 00405C42 cases 91,92,94,96,124
.text:00405D58 ; ---------------------------------------------------------------------------
.text:00405D58
.text:00405D58 loc_405D58:                             ; CODE XREF: sub_405470+105↑j
.text:00405D58                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405D58                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00405575 cases 123,125
.text:00405D5D                 jz      short loc_405D74
.text:00405D5F                 cmp     [esp+4Ch+arg_C], 1
.text:00405D64
.text:00405D64 loc_405D64:                             ; CODE XREF: sub_405470+90C↓j
.text:00405D64                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405D64                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405D6A
.text:00405D6A loc_405D6A:                             ; CODE XREF: sub_405470+105↑j
.text:00405D6A                                         ; DATA XREF: sub_405470:jpt_405575↑o
.text:00405D6A                 test    ebp, ebp        ; jumptable 00405575 cases 35,126
.text:00405D6C                 jnz     def_405972      ; jumptable 00405575 cases 37,43-58,65-90,93,95,97-122
.text:00405D6C                                         ; jumptable 00405972 default case, cases 34-38,42-44,46,48-59
.text:00405D72                 jmp     short loc_405D48 ; jumptable 00405575 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405D74 ; ---------------------------------------------------------------------------
.text:00405D74
.text:00405D74 loc_405D74:                             ; CODE XREF: sub_405470+8ED↑j
.text:00405D74                 mov     esi, [esp+4Ch+Str]
.text:00405D78                 cmp     byte ptr [esi+1], 0
.text:00405D7C                 jmp     short loc_405D64
.text:00405D7E ; ---------------------------------------------------------------------------
.text:00405D7E
.text:00405D7E loc_405D7E:                             ; CODE XREF: sub_405470:loc_40550F↑j
.text:00405D7E                 test    ebp, ebp
.text:00405D80                 jnz     short loc_405D8D
.text:00405D82                 cmp     [esp+4Ch+arg_10], 1
.text:00405D87                 jz      loc_40587B      ; jumptable 00405C42 cases 91,92,94,96,124
.text:00405D8D
.text:00405D8D loc_405D8D:                             ; CODE XREF: sub_405470+910↑j
.text:00405D8D                 mov     esi, [esp+4Ch+var_1C]
.text:00405D91                 test    esi, esi
.text:00405D93                 jz      short loc_405DC8
.text:00405D95                 mov     edi, [esp+4Ch+var_1C]
.text:00405D99                 movzx   eax, byte ptr [edi]
.text:00405D9C                 test    al, al
.text:00405D9E                 jz      short loc_405DC8
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_405470+956↓j
.text:00405DA0                 mov     ebp, [esp+4Ch+arg_4]
.text:00405DA4                 cmp     [esp+4Ch+var_34], ebp
.text:00405DA8                 jnb     short loc_405DB5
.text:00405DAA                 mov     ecx, [esp+4Ch+arg_0]
.text:00405DAE                 mov     ebx, [esp+4Ch+var_34]
.text:00405DB2                 mov     [ebx+ecx], al
.text:00405DB5
.text:00405DB5 loc_405DB5:                             ; CODE XREF: sub_405470+938↑j
.text:00405DB5                 inc     [esp+4Ch+var_1C]
.text:00405DB9                 inc     [esp+4Ch+var_34]
.text:00405DBD                 mov     edx, [esp+4Ch+var_1C]
.text:00405DC1                 movzx   eax, byte ptr [edx]
.text:00405DC4                 test    al, al
.text:00405DC6                 jnz     short loc_405DA0
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: sub_405470+923↑j
.text:00405DC8                                         ; sub_405470+92E↑j
.text:00405DC8                 mov     eax, [esp+4Ch+arg_4]
.text:00405DCC                 cmp     [esp+4Ch+var_34], eax
.text:00405DD0                 jnb     short loc_405DDE
.text:00405DD2                 mov     edi, [esp+4Ch+arg_0]
.text:00405DD6                 mov     esi, [esp+4Ch+var_34]
.text:00405DDA                 mov     byte ptr [esi+edi], 0
.text:00405DDE
.text:00405DDE loc_405DDE:                             ; CODE XREF: sub_405470+960↑j
.text:00405DDE                 mov     eax, [esp+4Ch+var_34]
.text:00405DE2                 jmp     loc_4058AF
.text:00405DE7 ; ---------------------------------------------------------------------------
.text:00405DE7
.text:00405DE7 loc_405DE7:                             ; CODE XREF: sub_405470+95↑j
.text:00405DE7                 mov     ebx, [esp+4Ch+Str]
.text:00405DEB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405DF0                 jmp     loc_40550F
.text:00405DF5 ; ---------------------------------------------------------------------------
.text:00405DF5
.text:00405DF5 loc_405DF5:                             ; CODE XREF: sub_405470+3D↑j
.text:00405DF5                                         ; DATA XREF: sub_405470:jpt_4054AD↑o
.text:00405DF5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004054AD case 2
.text:00405DF9                 cmp     [esp+4Ch+var_34], edx
.text:00405DFD                 jnb     short loc_405E06
.text:00405DFF                 mov     ecx, [esp+4Ch+arg_0]
.text:00405E03                 mov     byte ptr [ecx], 27h ; '''
.text:00405E06
.text:00405E06 loc_405E06:                             ; CODE XREF: sub_405470+98D↑j
.text:00405E06                 mov     [esp+4Ch+var_34], 1
.text:00405E0E                 mov     [esp+4Ch+var_1C], 40545Eh
.text:00405E16                 jmp     loc_4054F6
.text:00405E1B ; ---------------------------------------------------------------------------
.text:00405E1B
.text:00405E1B loc_405E1B:                             ; CODE XREF: sub_405470+3D↑j
.text:00405E1B                                         ; DATA XREF: sub_405470:jpt_4054AD↑o
.text:00405E1B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004054AD case 4
.text:00405E20                 jmp     def_4054AD      ; jumptable 004054AD default case, cases 0,1
.text:00405E25 ; ---------------------------------------------------------------------------
.text:00405E25
.text:00405E25 loc_405E25:                             ; CODE XREF: sub_405470+3D↑j
.text:00405E25                                         ; DATA XREF: sub_405470:jpt_4054AD↑o
.text:00405E25                 mov     [esp+4Ch+C], 405460h ; jumptable 004054AD cases 5,6
.text:00405E2C                 call    ds:libintl_gettext
.text:00405E32                 cmp     eax, 405460h
.text:00405E37                 mov     edi, eax
.text:00405E39                 jz      short loc_405EB0
.text:00405E3B
.text:00405E3B loc_405E3B:                             ; CODE XREF: sub_405470+A45↓j
.text:00405E3B                                         ; sub_405470+A4C↓j
.text:00405E3B                 mov     [esp+4Ch+C], 40545Eh
.text:00405E42                 call    ds:libintl_gettext
.text:00405E48                 cmp     eax, 40545Eh
.text:00405E4D                 mov     edx, eax
.text:00405E4F                 jz      short loc_405EA2
.text:00405E51
.text:00405E51 loc_405E51:                             ; CODE XREF: sub_405470+A37↓j
.text:00405E51                                         ; sub_405470+A3E↓j
.text:00405E51                 mov     [esp+4Ch+var_1C], edi
.text:00405E55                 cmp     byte ptr [edi], 0
.text:00405E58                 jz      short loc_405E88
.text:00405E5A
.text:00405E5A loc_405E5A:                             ; CODE XREF: sub_405470+A16↓j
.text:00405E5A                 mov     ecx, [esp+4Ch+arg_4]
.text:00405E5E                 cmp     [esp+4Ch+var_34], ecx
.text:00405E62                 jnb     short loc_405E77
.text:00405E64                 mov     ebp, [esp+4Ch+var_1C]
.text:00405E68                 mov     edi, [esp+4Ch+arg_0]
.text:00405E6C                 mov     esi, [esp+4Ch+var_34]
.text:00405E70                 movzx   ebx, byte ptr [ebp+0]
.text:00405E74                 mov     [esi+edi], bl
.text:00405E77
.text:00405E77 loc_405E77:                             ; CODE XREF: sub_405470+9F2↑j
.text:00405E77                 inc     [esp+4Ch+var_1C]
.text:00405E7B                 inc     [esp+4Ch+var_34]
.text:00405E7F                 mov     eax, [esp+4Ch+var_1C]
.text:00405E83                 cmp     byte ptr [eax], 0
.text:00405E86                 jnz     short loc_405E5A
.text:00405E88
.text:00405E88 loc_405E88:                             ; CODE XREF: sub_405470+9E8↑j
.text:00405E88                 mov     [esp+4Ch+var_21], 1
.text:00405E8D                 mov     [esp+4Ch+var_1C], edx
.text:00405E91                 mov     [esp+4Ch+C], edx ; Str
.text:00405E94                 call    strlen
.text:00405E99                 mov     [esp+4Ch+var_20], eax
.text:00405E9D                 jmp     def_4054AD      ; jumptable 004054AD default case, cases 0,1
.text:00405EA2 ; ---------------------------------------------------------------------------
.text:00405EA2
.text:00405EA2 loc_405EA2:                             ; CODE XREF: sub_405470+9DF↑j
.text:00405EA2                 cmp     [esp+4Ch+arg_10], 6
.text:00405EA7                 jnz     short loc_405E51
.text:00405EA9                 mov     edx, offset asc_40545C ; "\"'`"
.text:00405EAE                 jmp     short loc_405E51
.text:00405EB0 ; ---------------------------------------------------------------------------
.text:00405EB0
.text:00405EB0 loc_405EB0:                             ; CODE XREF: sub_405470+9C9↑j
.text:00405EB0                 cmp     [esp+4Ch+arg_10], 6
.text:00405EB5                 jnz     short loc_405E3B
.text:00405EB7                 mov     edi, offset asc_40545C ; "\"'`"
.text:00405EBC                 jmp     loc_405E3B
.text:00405EBC sub_405470      endp
.text:00405EBC
.text:00405EC1 ; ---------------------------------------------------------------------------
.text:00405EC1                 jmp     short loc_405ED0
.text:00405EC1 ; ---------------------------------------------------------------------------
.text:00405EC3                 align 10h
.text:00405ED0
.text:00405ED0 loc_405ED0:                             ; CODE XREF: .text:00405EC1↑j
.text:00405ED0                 sub     esp, 0Ch
.text:00405ED3                 mov     [esp+4], ebx
.text:00405ED7                 mov     [esp+8], esi
.text:00405EDB                 call    _errno
.text:00405EE0                 mov     esi, [eax]
.text:00405EE2                 mov     dword ptr [esp], 24h ; '$'
.text:00405EE9                 call    sub_4067C0
.text:00405EEE                 mov     edx, [esp+10h]
.text:00405EF2                 mov     ebx, eax
.text:00405EF4                 test    edx, edx
.text:00405EF6                 jz      short loc_405F41
.text:00405EF8
.text:00405EF8 loc_405EF8:                             ; CODE XREF: .text:00405F46↓j
.text:00405EF8                 mov     ecx, [edx]
.text:00405EFA                 mov     [ebx], ecx
.text:00405EFC                 mov     ecx, [edx+4]
.text:00405EFF                 mov     [ebx+4], ecx
.text:00405F02                 mov     ecx, [edx+8]
.text:00405F05                 mov     [ebx+8], ecx
.text:00405F08                 mov     ecx, [edx+0Ch]
.text:00405F0B                 mov     [ebx+0Ch], ecx
.text:00405F0E                 mov     ecx, [edx+10h]
.text:00405F11                 mov     [ebx+10h], ecx
.text:00405F14                 mov     ecx, [edx+14h]
.text:00405F17                 mov     [ebx+14h], ecx
.text:00405F1A                 mov     ecx, [edx+18h]
.text:00405F1D                 mov     [ebx+18h], ecx
.text:00405F20                 mov     ecx, [edx+1Ch]
.text:00405F23                 mov     [ebx+1Ch], ecx
.text:00405F26                 mov     ecx, [edx+20h]
.text:00405F29                 mov     [ebx+20h], ecx
.text:00405F2C                 call    _errno
.text:00405F31                 mov     [eax], esi
.text:00405F33                 mov     esi, [esp+8]
.text:00405F37                 mov     eax, ebx
.text:00405F39                 mov     ebx, [esp+4]
.text:00405F3D                 add     esp, 0Ch
.text:00405F40                 retn
.text:00405F41 ; ---------------------------------------------------------------------------
.text:00405F41
.text:00405F41 loc_405F41:                             ; CODE XREF: .text:00405EF6↑j
.text:00405F41                 mov     edx, offset dword_4091E0
.text:00405F46                 jmp     short loc_405EF8
.text:00405F46 ; ---------------------------------------------------------------------------
.text:00405F48                 align 10h
.text:00405F50                 mov     eax, [esp+4]
.text:00405F54                 test    eax, eax
.text:00405F56                 jz      short loc_405F60
.text:00405F58
.text:00405F58 loc_405F58:                             ; CODE XREF: .text:00405F65↓j
.text:00405F58                 mov     eax, [eax]
.text:00405F5A                 retn
.text:00405F5A ; ---------------------------------------------------------------------------
.text:00405F5B                 align 10h
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: .text:00405F56↑j
.text:00405F60                 mov     eax, offset dword_4091E0
.text:00405F65                 jmp     short loc_405F58
.text:00405F65 ; ---------------------------------------------------------------------------
.text:00405F67                 align 10h
.text:00405F70                 mov     edx, [esp+4]
.text:00405F74                 test    edx, edx
.text:00405F76                 jz      short loc_405F80
.text:00405F78
.text:00405F78 loc_405F78:                             ; CODE XREF: .text:00405F85↓j
.text:00405F78                 mov     ecx, [esp+8]
.text:00405F7C                 mov     [edx], ecx
.text:00405F7E                 retn
.text:00405F7E ; ---------------------------------------------------------------------------
.text:00405F7F                 align 10h
.text:00405F80
.text:00405F80 loc_405F80:                             ; CODE XREF: .text:00405F76↑j
.text:00405F80                 mov     edx, offset dword_4091E0
.text:00405F85                 jmp     short loc_405F78
.text:00405F85 ; ---------------------------------------------------------------------------
.text:00405F87                 align 10h
.text:00405F90                 sub     esp, 8
.text:00405F93                 mov     eax, [esp+0Ch]
.text:00405F97                 movzx   ecx, byte ptr [esp+10h]
.text:00405F9C                 mov     [esp], ebx
.text:00405F9F                 mov     ebx, [esp+14h]
.text:00405FA3                 mov     [esp+4], esi
.text:00405FA7                 mov     dl, cl
.text:00405FA9                 shr     dl, 5
.text:00405FAC                 movzx   edx, dl
.text:00405FAF                 shl     edx, 2
.text:00405FB2                 test    eax, eax
.text:00405FB4                 lea     esi, [edx+eax+4]
.text:00405FB8                 jz      short loc_405FE0
.text:00405FBA
.text:00405FBA loc_405FBA:                             ; CODE XREF: .text:00405FE6↓j
.text:00405FBA                 mov     edx, [esi]
.text:00405FBC                 and     ecx, 1Fh
.text:00405FBF                 and     ebx, 1
.text:00405FC2                 mov     eax, edx
.text:00405FC4                 shr     eax, cl
.text:00405FC6                 and     eax, 1
.text:00405FC9                 xor     ebx, eax
.text:00405FCB                 shl     ebx, cl
.text:00405FCD                 xor     edx, ebx
.text:00405FCF                 mov     [esi], edx
.text:00405FD1                 mov     ebx, [esp]
.text:00405FD4                 mov     esi, [esp+4]
.text:00405FD8                 add     esp, 8
.text:00405FDB                 retn
.text:00405FDB ; ---------------------------------------------------------------------------
.text:00405FDC                 align 10h
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: .text:00405FB8↑j
.text:00405FE0                 lea     esi, dword_4091E4[edx]
.text:00405FE6                 jmp     short loc_405FBA
.text:00405FE6 ; ---------------------------------------------------------------------------
.text:00405FE8                 align 10h
.text:00405FF0                 sub     esp, 2Ch
.text:00405FF3                 mov     [esp+24h], ebx
.text:00405FF7                 mov     ebx, [esp+40h]
.text:00405FFB                 mov     [esp+28h], esi
.text:00405FFF                 test    ebx, ebx
.text:00406001                 jz      short loc_406050
.text:00406003
.text:00406003 loc_406003:                             ; CODE XREF: .text:00406055↓j
.text:00406003                 call    _errno
.text:00406008                 mov     esi, [eax]
.text:0040600A                 mov     [esp+14h], ebx
.text:0040600E                 mov     edx, [ebx]
.text:00406010                 mov     ecx, [esp+38h]
.text:00406014                 mov     ebx, [esp+3Ch]
.text:00406018                 mov     [esp+10h], edx
.text:0040601C                 mov     edx, [esp+34h]
.text:00406020                 mov     [esp+0Ch], ebx
.text:00406024                 mov     [esp+8], ecx
.text:00406028                 mov     [esp+4], edx
.text:0040602C                 mov     edx, [esp+30h]
.text:00406030                 mov     [esp], edx
.text:00406033                 call    sub_405470
.text:00406038                 mov     ebx, eax
.text:0040603A                 call    _errno
.text:0040603F                 mov     [eax], esi
.text:00406041                 mov     esi, [esp+28h]
.text:00406045                 mov     eax, ebx
.text:00406047                 mov     ebx, [esp+24h]
.text:0040604B                 add     esp, 2Ch
.text:0040604E                 retn
.text:0040604E ; ---------------------------------------------------------------------------
.text:0040604F                 align 10h
.text:00406050
.text:00406050 loc_406050:                             ; CODE XREF: .text:00406001↑j
.text:00406050                 mov     ebx, offset dword_4091E0
.text:00406055                 jmp     short loc_406003
.text:00406055 ; ---------------------------------------------------------------------------
.text:00406057                 align 10h
.text:00406060                 push    ebp
.text:00406061                 push    edi
.text:00406062                 push    esi
.text:00406063                 push    ebx
.text:00406064                 sub     esp, 2Ch
.text:00406067                 mov     ebp, [esp+48h]
.text:0040606B                 call    _errno
.text:00406070                 mov     edx, [eax]
.text:00406072                 test    ebp, ebp
.text:00406074                 mov     ebx, ebp
.text:00406076                 mov     [esp+28h], edx
.text:0040607A                 jz      loc_406130
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: .text:00406135↓j
.text:00406080                 call    _errno
.text:00406085                 mov     edi, [eax]
.text:00406087                 mov     esi, ebp
.text:00406089                 mov     [esp+14h], ebx
.text:0040608D                 mov     ecx, [ebx]
.text:0040608F                 mov     dword ptr [esp], 0
.text:00406096                 mov     edx, [esp+44h]
.text:0040609A                 mov     dword ptr [esp+4], 0
.text:004060A2                 mov     eax, [esp+40h]
.text:004060A6                 mov     [esp+10h], ecx
.text:004060AA                 mov     [esp+0Ch], edx
.text:004060AE                 mov     [esp+8], eax
.text:004060B2                 call    sub_405470
.text:004060B7                 mov     ebx, eax
.text:004060B9                 call    _errno
.text:004060BE                 mov     [eax], edi
.text:004060C0                 lea     edi, [ebx+1]
.text:004060C3                 mov     [esp], edi
.text:004060C6                 call    sub_4067C0
.text:004060CB                 mov     [esp+24h], eax
.text:004060CF                 test    ebp, ebp
.text:004060D1                 jz      short loc_406122
.text:004060D3
.text:004060D3 loc_4060D3:                             ; CODE XREF: .text:00406127↓j
.text:004060D3                 call    _errno
.text:004060D8                 mov     ebp, [eax]
.text:004060DA                 mov     [esp+14h], esi
.text:004060DE                 mov     ecx, [esi]
.text:004060E0                 mov     [esp+4], edi
.text:004060E4                 mov     edx, [esp+44h]
.text:004060E8                 mov     esi, [esp+24h]
.text:004060EC                 mov     [esp+10h], ecx
.text:004060F0                 mov     eax, [esp+40h]
.text:004060F4                 mov     [esp+0Ch], edx
.text:004060F8                 mov     [esp], esi
.text:004060FB                 mov     [esp+8], eax
.text:004060FF                 call    sub_405470
.text:00406104                 call    _errno
.text:00406109                 mov     [eax], ebp
.text:0040610B                 call    _errno
.text:00406110                 mov     ebx, [esp+28h]
.text:00406114                 mov     [eax], ebx
.text:00406116                 mov     eax, [esp+24h]
.text:0040611A                 add     esp, 2Ch
.text:0040611D                 pop     ebx
.text:0040611E                 pop     esi
.text:0040611F                 pop     edi
.text:00406120                 pop     ebp
.text:00406121                 retn
.text:00406122 ; ---------------------------------------------------------------------------
.text:00406122
.text:00406122 loc_406122:                             ; CODE XREF: .text:004060D1↑j
.text:00406122                 mov     esi, offset dword_4091E0
.text:00406127                 jmp     short loc_4060D3
.text:00406127 ; ---------------------------------------------------------------------------
.text:00406129                 align 10h
.text:00406130
.text:00406130 loc_406130:                             ; CODE XREF: .text:0040607A↑j
.text:00406130                 mov     ebx, offset dword_4091E0
.text:00406135                 jmp     loc_406080
.text:00406135 ; ---------------------------------------------------------------------------
.text:0040613A                 align 10h
.text:00406140                 sub     esp, 1Ch
.text:00406143                 mov     edx, [esp+24h]
.text:00406147                 mov     dword ptr [esp+0Ch], offset dword_4091E0
.text:0040614F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406157                 mov     [esp+4], edx
.text:0040615B                 mov     edx, [esp+20h]
.text:0040615F                 mov     [esp], edx
.text:00406162                 call    sub_4065B0
.text:00406167                 add     esp, 1Ch
.text:0040616A                 retn
.text:0040616A ; ---------------------------------------------------------------------------
.text:0040616B                 align 10h
.text:00406170                 sub     esp, 1Ch
.text:00406173                 mov     edx, [esp+20h]
.text:00406177                 mov     dword ptr [esp+0Ch], offset dword_4091E0
.text:0040617F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406187                 mov     [esp+4], edx
.text:0040618B                 mov     dword ptr [esp], 0
.text:00406192                 call    sub_4065B0
.text:00406197                 add     esp, 1Ch
.text:0040619A                 retn
.text:0040619A ; ---------------------------------------------------------------------------
.text:0040619B                 align 10h
.text:004061A0
.text:004061A0 ; =============== S U B R O U T I N E =======================================
.text:004061A0
.text:004061A0
.text:004061A0 ; int __cdecl sub_4061A0(int, int, char *)
.text:004061A0 sub_4061A0      proc near               ; CODE XREF: .text:00403E0E↑p
.text:004061A0                                         ; sub_403FC0+96↑p ...
.text:004061A0
.text:004061A0 var_BC          = dword ptr -0BCh
.text:004061A0 var_B8          = dword ptr -0B8h
.text:004061A0 var_B4          = dword ptr -0B4h
.text:004061A0 var_B0          = dword ptr -0B0h
.text:004061A0 var_AC          = dword ptr -0ACh
.text:004061A0 var_A8          = dword ptr -0A8h
.text:004061A0 var_A4          = dword ptr -0A4h
.text:004061A0 var_A0          = dword ptr -0A0h
.text:004061A0 var_9C          = dword ptr -9Ch
.text:004061A0 var_98          = dword ptr -98h
.text:004061A0 var_94          = dword ptr -94h
.text:004061A0 var_90          = dword ptr -90h
.text:004061A0 var_8C          = dword ptr -8Ch
.text:004061A0 var_7C          = dword ptr -7Ch
.text:004061A0 var_78          = dword ptr -78h
.text:004061A0 var_74          = dword ptr -74h
.text:004061A0 var_70          = dword ptr -70h
.text:004061A0 var_6C          = dword ptr -6Ch
.text:004061A0 var_68          = dword ptr -68h
.text:004061A0 var_64          = dword ptr -64h
.text:004061A0 var_60          = dword ptr -60h
.text:004061A0 var_5C          = dword ptr -5Ch
.text:004061A0 var_4C          = dword ptr -4Ch
.text:004061A0 var_48          = dword ptr -48h
.text:004061A0 var_44          = dword ptr -44h
.text:004061A0 var_40          = dword ptr -40h
.text:004061A0 var_3C          = dword ptr -3Ch
.text:004061A0 var_38          = dword ptr -38h
.text:004061A0 var_34          = dword ptr -34h
.text:004061A0 var_30          = dword ptr -30h
.text:004061A0 var_2C          = dword ptr -2Ch
.text:004061A0 arg_0           = dword ptr  4
.text:004061A0 arg_4           = dword ptr  8
.text:004061A0 arg_8           = dword ptr  0Ch
.text:004061A0
.text:004061A0                 push    ebp
.text:004061A1                 xor     eax, eax
.text:004061A3                 mov     ecx, 8
.text:004061A8                 push    edi
.text:004061A9                 push    esi
.text:004061AA                 push    ebx
.text:004061AB                 sub     esp, 0ACh
.text:004061B1                 mov     ebp, [esp+0BCh+arg_4]
.text:004061B8                 cld
.text:004061B9                 lea     edi, [esp+0BCh+var_A8]
.text:004061BD                 mov     [esp+0BCh+var_AC], ebp
.text:004061C1                 rep stosd
.text:004061C3                 mov     eax, [esp+0BCh+var_8C]
.text:004061C7                 mov     edi, [esp+0BCh+var_AC]
.text:004061CB                 mov     esi, [esp+0BCh+var_A8]
.text:004061CF                 mov     [esp+0BCh+var_5C], eax
.text:004061D3                 mov     ebp, [esp+0BCh+var_A4]
.text:004061D7                 mov     eax, [esp+0BCh+var_AC]
.text:004061DB                 mov     [esp+0BCh+var_7C], edi
.text:004061DF                 mov     ecx, [esp+0BCh+var_94]
.text:004061E3                 mov     edi, [esp+0BCh+var_A0]
.text:004061E7                 mov     [esp+0BCh+var_78], esi
.text:004061EB                 mov     edx, [esp+0BCh+var_90]
.text:004061EF                 mov     esi, [esp+0BCh+var_9C]
.text:004061F3                 mov     [esp+0BCh+var_4C], eax
.text:004061F7                 mov     ebx, [esp+0BCh+var_98]
.text:004061FB                 mov     eax, [esp+0BCh+var_A8]
.text:004061FF                 mov     [esp+0BCh+var_74], ebp
.text:00406203                 mov     [esp+0BCh+var_70], edi
.text:00406207                 mov     [esp+0BCh+var_6C], esi
.text:0040620B                 mov     [esp+0BCh+var_68], ebx
.text:0040620F                 mov     [esp+0BCh+var_64], ecx
.text:00406213                 mov     [esp+0BCh+var_60], edx
.text:00406217                 mov     [esp+0BCh+var_48], eax
.text:0040621B                 mov     [esp+0BCh+var_44], ebp
.text:0040621F                 mov     [esp+0BCh+var_40], edi
.text:00406223                 mov     [esp+0BCh+var_3C], esi
.text:0040622A                 mov     [esp+0BCh+var_38], ebx
.text:00406231                 mov     ebx, [esp+0BCh+var_8C]
.text:00406235                 mov     [esp+0BCh+var_30], edx
.text:0040623C                 mov     edx, [esp+0BCh+arg_8]
.text:00406243                 mov     [esp+0BCh+var_34], ecx
.text:0040624A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040624E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00406252                 mov     edx, [esp+0BCh+arg_0]
.text:00406259                 mov     [esp+0BCh+var_2C], ebx
.text:00406260                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00406264                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040626C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040626F                 call    sub_4065B0
.text:00406274                 add     esp, 0ACh
.text:0040627A                 pop     ebx
.text:0040627B                 pop     esi
.text:0040627C                 pop     edi
.text:0040627D                 pop     ebp
.text:0040627E                 retn
.text:0040627E sub_4061A0      endp
.text:0040627E
.text:0040627E ; ---------------------------------------------------------------------------
.text:0040627F                 align 10h
.text:00406280
.text:00406280 ; =============== S U B R O U T I N E =======================================
.text:00406280
.text:00406280
.text:00406280 ; int __cdecl sub_406280(int, int, char *, int)
.text:00406280 sub_406280      proc near               ; CODE XREF: sub_404C70+BD↑p
.text:00406280                                         ; sub_404C70+E3↑p
.text:00406280
.text:00406280 var_BC          = dword ptr -0BCh
.text:00406280 var_B8          = dword ptr -0B8h
.text:00406280 var_B4          = dword ptr -0B4h
.text:00406280 var_B0          = dword ptr -0B0h
.text:00406280 var_AC          = dword ptr -0ACh
.text:00406280 var_A8          = dword ptr -0A8h
.text:00406280 var_A4          = dword ptr -0A4h
.text:00406280 var_A0          = dword ptr -0A0h
.text:00406280 var_9C          = dword ptr -9Ch
.text:00406280 var_98          = dword ptr -98h
.text:00406280 var_94          = dword ptr -94h
.text:00406280 var_90          = dword ptr -90h
.text:00406280 var_8C          = dword ptr -8Ch
.text:00406280 var_7C          = dword ptr -7Ch
.text:00406280 var_78          = dword ptr -78h
.text:00406280 var_74          = dword ptr -74h
.text:00406280 var_70          = dword ptr -70h
.text:00406280 var_6C          = dword ptr -6Ch
.text:00406280 var_68          = dword ptr -68h
.text:00406280 var_64          = dword ptr -64h
.text:00406280 var_60          = dword ptr -60h
.text:00406280 var_5C          = dword ptr -5Ch
.text:00406280 var_4C          = dword ptr -4Ch
.text:00406280 var_48          = dword ptr -48h
.text:00406280 var_44          = dword ptr -44h
.text:00406280 var_40          = dword ptr -40h
.text:00406280 var_3C          = dword ptr -3Ch
.text:00406280 var_38          = dword ptr -38h
.text:00406280 var_34          = dword ptr -34h
.text:00406280 var_30          = dword ptr -30h
.text:00406280 var_2C          = dword ptr -2Ch
.text:00406280 arg_0           = dword ptr  4
.text:00406280 arg_4           = dword ptr  8
.text:00406280 arg_8           = dword ptr  0Ch
.text:00406280 arg_C           = dword ptr  10h
.text:00406280
.text:00406280                 push    ebp
.text:00406281                 xor     eax, eax
.text:00406283                 mov     ecx, 8
.text:00406288                 push    edi
.text:00406289                 push    esi
.text:0040628A                 push    ebx
.text:0040628B                 sub     esp, 0ACh
.text:00406291                 mov     edx, [esp+0BCh+arg_4]
.text:00406298                 cld
.text:00406299                 lea     edi, [esp+0BCh+var_A8]
.text:0040629D                 mov     [esp+0BCh+var_AC], edx
.text:004062A1                 rep stosd
.text:004062A3                 mov     eax, [esp+0BCh+var_8C]
.text:004062A7                 mov     ebp, [esp+0BCh+var_AC]
.text:004062AB                 mov     edi, [esp+0BCh+var_A8]
.text:004062AF                 mov     [esp+0BCh+var_5C], eax
.text:004062B3                 mov     esi, [esp+0BCh+var_9C]
.text:004062B7                 mov     eax, [esp+0BCh+var_AC]
.text:004062BB                 mov     [esp+0BCh+var_7C], ebp
.text:004062BF                 mov     ecx, [esp+0BCh+var_94]
.text:004062C3                 mov     ebp, [esp+0BCh+var_A4]
.text:004062C7                 mov     [esp+0BCh+var_78], edi
.text:004062CB                 mov     edx, [esp+0BCh+var_90]
.text:004062CF                 mov     edi, [esp+0BCh+var_A0]
.text:004062D3                 mov     [esp+0BCh+var_4C], eax
.text:004062D7                 mov     ebx, [esp+0BCh+var_98]
.text:004062DB                 mov     eax, [esp+0BCh+var_A8]
.text:004062DF                 mov     [esp+0BCh+var_74], ebp
.text:004062E3                 mov     [esp+0BCh+var_70], edi
.text:004062E7                 mov     [esp+0BCh+var_6C], esi
.text:004062EB                 mov     [esp+0BCh+var_68], ebx
.text:004062EF                 mov     [esp+0BCh+var_64], ecx
.text:004062F3                 mov     [esp+0BCh+var_60], edx
.text:004062F7                 mov     [esp+0BCh+var_48], eax
.text:004062FB                 mov     [esp+0BCh+var_44], ebp
.text:004062FF                 mov     [esp+0BCh+var_40], edi
.text:00406303                 mov     [esp+0BCh+var_3C], esi
.text:0040630A                 mov     [esp+0BCh+var_38], ebx
.text:00406311                 mov     esi, [esp+0BCh+var_8C]
.text:00406315                 lea     ebx, [esp+0BCh+var_4C]
.text:00406319                 mov     [esp+0BCh+var_30], edx
.text:00406320                 mov     edx, [esp+0BCh+arg_8]
.text:00406327                 mov     [esp+0BCh+var_34], ecx
.text:0040632E                 mov     ecx, [esp+0BCh+arg_C]
.text:00406335                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00406339                 mov     edx, [esp+0BCh+arg_0]
.text:00406340                 mov     [esp+0BCh+var_2C], esi
.text:00406347                 mov     [esp+0BCh+var_B0], ebx ; int
.text:0040634B                 mov     [esp+0BCh+var_B4], ecx ; int
.text:0040634F                 mov     [esp+0BCh+var_BC], edx ; int
.text:00406352                 call    sub_4065B0
.text:00406357                 add     esp, 0ACh
.text:0040635D                 pop     ebx
.text:0040635E                 pop     esi
.text:0040635F                 pop     edi
.text:00406360                 pop     ebp
.text:00406361                 retn
.text:00406361 sub_406280      endp
.text:00406361
.text:00406361 ; ---------------------------------------------------------------------------
.text:00406362                 align 10h
.text:00406370                 push    ebp
.text:00406371                 xor     eax, eax
.text:00406373                 mov     ecx, 8
.text:00406378                 push    edi
.text:00406379                 push    esi
.text:0040637A                 push    ebx
.text:0040637B                 sub     esp, 0ACh
.text:00406381                 mov     edi, [esp+0C0h]
.text:00406388                 cld
.text:00406389                 mov     [esp+10h], edi
.text:0040638D                 lea     edi, [esp+14h]
.text:00406391                 rep stosd
.text:00406393                 mov     eax, [esp+30h]
.text:00406397                 mov     esi, [esp+10h]
.text:0040639B                 mov     ebx, [esp+14h]
.text:0040639F                 mov     [esp+60h], eax
.text:004063A3                 mov     ebp, [esp+18h]
.text:004063A7                 mov     eax, [esp+10h]
.text:004063AB                 mov     [esp+40h], esi
.text:004063AF                 mov     edi, [esp+1Ch]
.text:004063B3                 mov     esi, [esp+20h]
.text:004063B7                 mov     [esp+44h], ebx
.text:004063BB                 mov     ecx, [esp+28h]
.text:004063BF                 mov     edx, [esp+2Ch]
.text:004063C3                 mov     [esp+70h], eax
.text:004063C7                 mov     ebx, [esp+24h]
.text:004063CB                 mov     eax, [esp+14h]
.text:004063CF                 mov     [esp+48h], ebp
.text:004063D3                 mov     [esp+4Ch], edi
.text:004063D7                 mov     [esp+50h], esi
.text:004063DB                 mov     [esp+54h], ebx
.text:004063DF                 mov     [esp+58h], ecx
.text:004063E3                 mov     [esp+5Ch], edx
.text:004063E7                 mov     [esp+74h], eax
.text:004063EB                 mov     [esp+78h], ebp
.text:004063EF                 mov     [esp+7Ch], edi
.text:004063F3                 mov     [esp+80h], esi
.text:004063FA                 mov     [esp+84h], ebx
.text:00406401                 mov     [esp+8Ch], edx
.text:00406408                 lea     edx, [esp+70h]
.text:0040640C                 mov     [esp+88h], ecx
.text:00406413                 mov     ecx, [esp+30h]
.text:00406417                 mov     [esp+0Ch], edx
.text:0040641B                 mov     edx, [esp+0C4h]
.text:00406422                 mov     [esp+90h], ecx
.text:00406429                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406431                 mov     [esp+4], edx
.text:00406435                 mov     dword ptr [esp], 0
.text:0040643C                 call    sub_4065B0
.text:00406441                 add     esp, 0ACh
.text:00406447                 pop     ebx
.text:00406448                 pop     esi
.text:00406449                 pop     edi
.text:0040644A                 pop     ebp
.text:0040644B                 retn
.text:0040644B ; ---------------------------------------------------------------------------
.text:0040644C                 align 10h
.text:00406450                 push    edi
.text:00406451                 push    esi
.text:00406452                 push    ebx
.text:00406453                 sub     esp, 40h
.text:00406456                 mov     edx, ds:dword_4091EC
.text:0040645C                 mov     ebx, ds:dword_4091E0
.text:00406462                 mov     esi, ds:dword_4091E8
.text:00406468                 mov     edi, ds:dword_4091E4
.text:0040646E                 mov     [esp+1Ch], edx
.text:00406472                 mov     ecx, ds:dword_4091F0
.text:00406478                 mov     edx, ds:dword_409200
.text:0040647E                 mov     [esp+10h], ebx
.text:00406482                 mov     ebx, ds:dword_4091F4
.text:00406488                 mov     [esp+30h], edx
.text:0040648C                 movzx   edx, byte ptr [esp+54h]
.text:00406491                 mov     [esp+18h], esi
.text:00406495                 mov     esi, ds:dword_4091FC
.text:0040649B                 mov     [esp+14h], edi
.text:0040649F                 mov     edi, ds:dword_4091F8
.text:004064A5                 mov     [esp+20h], ecx
.text:004064A9                 mov     cl, dl
.text:004064AB                 shr     cl, 5
.text:004064AE                 mov     [esp+24h], ebx
.text:004064B2                 movzx   ebx, cl
.text:004064B5                 mov     [esp+2Ch], esi
.text:004064B9                 lea     esi, [esp+10h]
.text:004064BD                 mov     [esp+28h], edi
.text:004064C1                 lea     edi, [esi+ebx*4]
.text:004064C4                 mov     ebx, edx
.text:004064C6                 mov     edx, [edi+4]
.text:004064C9                 and     ebx, 1Fh
.text:004064CC                 mov     cl, bl
.text:004064CE                 mov     eax, edx
.text:004064D0                 shr     eax, cl
.text:004064D2                 and     eax, 1
.text:004064D5                 xor     eax, 1
.text:004064D8                 shl     eax, cl
.text:004064DA                 xor     edx, eax
.text:004064DC                 mov     [edi+4], edx
.text:004064DF                 mov     edx, [esp+50h]
.text:004064E3                 mov     [esp+0Ch], esi
.text:004064E7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004064EF                 mov     [esp+4], edx
.text:004064F3                 mov     dword ptr [esp], 0
.text:004064FA                 call    sub_4065B0
.text:004064FF                 add     esp, 40h
.text:00406502                 pop     ebx
.text:00406503                 pop     esi
.text:00406504                 pop     edi
.text:00406505                 retn
.text:00406505 ; ---------------------------------------------------------------------------
.text:00406506                 align 10h
.text:00406510
.text:00406510 ; =============== S U B R O U T I N E =======================================
.text:00406510
.text:00406510
.text:00406510 ; int __cdecl sub_406510(char *)
.text:00406510 sub_406510      proc near               ; CODE XREF: sub_404990+64↑p
.text:00406510
.text:00406510 var_4C          = dword ptr -4Ch
.text:00406510 var_48          = dword ptr -48h
.text:00406510 var_44          = dword ptr -44h
.text:00406510 var_40          = dword ptr -40h
.text:00406510 var_3C          = dword ptr -3Ch
.text:00406510 var_38          = dword ptr -38h
.text:00406510 var_34          = dword ptr -34h
.text:00406510 var_30          = dword ptr -30h
.text:00406510 var_2C          = dword ptr -2Ch
.text:00406510 var_28          = dword ptr -28h
.text:00406510 var_24          = dword ptr -24h
.text:00406510 var_20          = dword ptr -20h
.text:00406510 var_1C          = dword ptr -1Ch
.text:00406510 arg_0           = dword ptr  4
.text:00406510
.text:00406510                 sub     esp, 4Ch
.text:00406513                 mov     ecx, ds:dword_4091E0
.text:00406519                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406521                 mov     edx, ds:dword_4091E4
.text:00406527                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040652E                 mov     [esp+4Ch+var_3C], ecx
.text:00406532                 mov     ecx, ds:dword_4091EC
.text:00406538                 mov     [esp+4Ch+var_38], edx
.text:0040653C                 mov     edx, ds:dword_4091E8
.text:00406542                 mov     [esp+4Ch+var_30], ecx
.text:00406546                 mov     ecx, ds:dword_4091F0
.text:0040654C                 mov     eax, edx
.text:0040654E                 shr     eax, 1Ah
.text:00406551                 and     eax, 1
.text:00406554                 xor     eax, 1
.text:00406557                 mov     [esp+4Ch+var_2C], ecx
.text:0040655B                 shl     eax, 1Ah
.text:0040655E                 mov     ecx, ds:dword_4091F4
.text:00406564                 xor     edx, eax
.text:00406566                 mov     [esp+4Ch+var_34], edx
.text:0040656A                 mov     edx, [esp+4Ch+arg_0]
.text:0040656E                 mov     [esp+4Ch+var_28], ecx
.text:00406572                 mov     ecx, ds:dword_4091F8
.text:00406578                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040657C                 mov     [esp+4Ch+var_24], ecx
.text:00406580                 mov     ecx, ds:dword_4091FC
.text:00406586                 mov     [esp+4Ch+var_20], ecx
.text:0040658A                 mov     ecx, ds:dword_409200
.text:00406590                 mov     [esp+4Ch+var_1C], ecx
.text:00406594                 lea     ecx, [esp+4Ch+var_3C]
.text:00406598                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040659C                 call    sub_4065B0
.text:004065A1                 add     esp, 4Ch
.text:004065A4                 retn
.text:004065A4 sub_406510      endp
.text:004065A4
.text:004065A4 ; ---------------------------------------------------------------------------
.text:004065A5                 align 10h
.text:004065B0
.text:004065B0 ; =============== S U B R O U T I N E =======================================
.text:004065B0
.text:004065B0
.text:004065B0 ; int __cdecl sub_4065B0(int, char *, int, int)
.text:004065B0 sub_4065B0      proc near               ; CODE XREF: .text:00406162↑p
.text:004065B0                                         ; .text:00406192↑p ...
.text:004065B0
.text:004065B0 Block           = dword ptr -2Ch
.text:004065B0 var_28          = dword ptr -28h
.text:004065B0 Str             = dword ptr -24h
.text:004065B0 var_20          = dword ptr -20h
.text:004065B0 var_1C          = dword ptr -1Ch
.text:004065B0 var_18          = dword ptr -18h
.text:004065B0 var_14          = dword ptr -14h
.text:004065B0 arg_0           = dword ptr  4
.text:004065B0 arg_4           = dword ptr  8
.text:004065B0 arg_8           = dword ptr  0Ch
.text:004065B0 arg_C           = dword ptr  10h
.text:004065B0
.text:004065B0                 push    ebp
.text:004065B1                 push    edi
.text:004065B2                 push    esi
.text:004065B3                 push    ebx
.text:004065B4                 sub     esp, 1Ch
.text:004065B7                 call    _errno
.text:004065BC                 mov     edx, [eax]
.text:004065BE                 mov     eax, [esp+2Ch+arg_0]
.text:004065C2                 mov     [esp+2Ch+var_14], edx
.text:004065C6                 test    eax, eax
.text:004065C8                 js      loc_40676A
.text:004065CE                 mov     eax, [esp+2Ch+arg_0]
.text:004065D2                 cmp     dword_408040, eax
.text:004065D8                 ja      short loc_406650
.text:004065DA                 mov     esi, eax
.text:004065DC                 inc     esi
.text:004065DD                 cmp     esi, 1FFFFFFFh
.text:004065E3                 ja      loc_40676F
.text:004065E9                 mov     ebx, off_40804C
.text:004065EF                 cmp     ebx, offset dword_408044
.text:004065F5                 jz      loc_406741
.text:004065FB
.text:004065FB loc_4065FB:                             ; CODE XREF: sub_4065B0+1B5↓j
.text:004065FB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004065FE                 lea     ecx, ds:0[esi*8]
.text:00406605                 mov     ebp, esi
.text:00406607                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040660B                 call    sub_406850
.text:00406610                 mov     off_40804C, eax
.text:00406615                 mov     ebx, dword_408040
.text:0040661B                 sub     ebp, ebx
.text:0040661D                 lea     edi, [eax+ebx*8]
.text:00406620                 lea     eax, ds:0[ebp*8]
.text:00406627                 cmp     eax, 7
.text:0040662A                 jbe     short loc_406640
.text:0040662C                 test    edi, 4
.text:00406632                 jz      short loc_406640
.text:00406634                 mov     dword ptr [edi], 0
.text:0040663A                 sub     eax, 4
.text:0040663D                 add     edi, 4
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: sub_4065B0+7A↑j
.text:00406640                                         ; sub_4065B0+82↑j
.text:00406640                 cld
.text:00406641                 mov     ecx, eax
.text:00406643                 shr     ecx, 2
.text:00406646                 xor     eax, eax
.text:00406648                 rep stosd
.text:0040664A                 mov     dword_408040, esi
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_4065B0+28↑j
.text:00406650                 mov     esi, off_40804C
.text:00406656                 mov     eax, [esp+2Ch+arg_0]
.text:0040665A                 mov     ebp, [esi+eax*8]
.text:0040665D                 mov     edi, [esi+eax*8+4]
.text:00406661                 mov     esi, [esp+2Ch+arg_C]
.text:00406665                 test    esi, esi
.text:00406667                 jz      loc_406737
.text:0040666D
.text:0040666D loc_40666D:                             ; CODE XREF: sub_4065B0+18C↓j
.text:0040666D                 call    _errno
.text:00406672                 mov     ebx, [eax]
.text:00406674                 mov     [esp+2Ch+var_18], esi ; int
.text:00406678                 mov     ecx, [esi]
.text:0040667A                 mov     [esp+2Ch+Block], edi ; int
.text:0040667D                 mov     edx, [esp+2Ch+arg_8]
.text:00406681                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406685                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406689                 mov     ecx, [esp+2Ch+arg_4]
.text:0040668D                 mov     [esp+2Ch+var_20], edx ; int
.text:00406691                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406695                 call    sub_405470
.text:0040669A                 mov     esi, eax
.text:0040669C                 call    _errno
.text:004066A1                 mov     [eax], ebx
.text:004066A3                 cmp     ebp, esi
.text:004066A5                 ja      short loc_40671B
.text:004066A7                 lea     ebp, [esi+1]
.text:004066AA                 mov     ebx, off_40804C
.text:004066B0                 cmp     edi, offset unk_4090E0
.text:004066B6                 mov     esi, [esp+2Ch+arg_0]
.text:004066BA                 mov     [ebx+esi*8], ebp
.text:004066BD                 jz      short loc_4066CD
.text:004066BF                 mov     [esp+2Ch+Block], edi ; Block
.text:004066C2                 call    free
.text:004066C7                 mov     ebx, off_40804C
.text:004066CD
.text:004066CD loc_4066CD:                             ; CODE XREF: sub_4065B0+10D↑j
.text:004066CD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004066D0                 call    sub_4067C0
.text:004066D5                 mov     esi, [esp+2Ch+arg_C]
.text:004066D9                 mov     edi, eax
.text:004066DB                 mov     eax, [esp+2Ch+arg_0]
.text:004066DF                 test    esi, esi
.text:004066E1                 mov     [ebx+eax*8+4], edi
.text:004066E5                 jz      short loc_406730
.text:004066E7
.text:004066E7 loc_4066E7:                             ; CODE XREF: sub_4065B0+185↓j
.text:004066E7                 call    _errno
.text:004066EC                 mov     ebx, [eax]
.text:004066EE                 mov     [esp+2Ch+var_18], esi ; int
.text:004066F2                 mov     ecx, [esi]
.text:004066F4                 mov     [esp+2Ch+Block], edi ; int
.text:004066F7                 mov     edx, [esp+2Ch+arg_8]
.text:004066FB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004066FF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406703                 mov     ecx, [esp+2Ch+arg_4]
.text:00406707                 mov     [esp+2Ch+var_20], edx ; int
.text:0040670B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040670F                 call    sub_405470
.text:00406714                 call    _errno
.text:00406719                 mov     [eax], ebx
.text:0040671B
.text:0040671B loc_40671B:                             ; CODE XREF: sub_4065B0+F5↑j
.text:0040671B                 call    _errno
.text:00406720                 mov     ebp, [esp+2Ch+var_14]
.text:00406724                 mov     [eax], ebp
.text:00406726                 add     esp, 1Ch
.text:00406729                 mov     eax, edi
.text:0040672B                 pop     ebx
.text:0040672C                 pop     esi
.text:0040672D                 pop     edi
.text:0040672E                 pop     ebp
.text:0040672F                 retn
.text:00406730 ; ---------------------------------------------------------------------------
.text:00406730
.text:00406730 loc_406730:                             ; CODE XREF: sub_4065B0+135↑j
.text:00406730                 mov     esi, offset dword_4091E0
.text:00406735                 jmp     short loc_4066E7
.text:00406737 ; ---------------------------------------------------------------------------
.text:00406737
.text:00406737 loc_406737:                             ; CODE XREF: sub_4065B0+B7↑j
.text:00406737                 mov     esi, offset dword_4091E0
.text:0040673C                 jmp     loc_40666D
.text:00406741 ; ---------------------------------------------------------------------------
.text:00406741
.text:00406741 loc_406741:                             ; CODE XREF: sub_4065B0+45↑j
.text:00406741                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00406748                 call    sub_4067C0
.text:0040674D                 mov     off_40804C, eax
.text:00406752                 mov     edi, dword_408044
.text:00406758                 mov     ebx, eax
.text:0040675A                 mov     ecx, off_408048
.text:00406760                 mov     [eax], edi
.text:00406762                 mov     [eax+4], ecx
.text:00406765                 jmp     loc_4065FB
.text:0040676A ; ---------------------------------------------------------------------------
.text:0040676A
.text:0040676A loc_40676A:                             ; CODE XREF: sub_4065B0+18↑j
.text:0040676A                 call    abort
.text:0040676F ; ---------------------------------------------------------------------------
.text:0040676F
.text:0040676F loc_40676F:                             ; CODE XREF: sub_4065B0+33↑j
.text:0040676F                 call    sub_406B40
.text:0040676F sub_4065B0      endp
.text:0040676F
.text:0040676F ; ---------------------------------------------------------------------------
.text:00406774                 align 10h
.text:00406780
.text:00406780 ; =============== S U B R O U T I N E =======================================
.text:00406780
.text:00406780
.text:00406780 sub_406780      proc near
.text:00406780
.text:00406780 Size            = dword ptr -0Ch
.text:00406780 var_4           = dword ptr -4
.text:00406780 arg_0           = dword ptr  4
.text:00406780 arg_4           = dword ptr  8
.text:00406780
.text:00406780                 sub     esp, 0Ch
.text:00406783                 xor     edx, edx
.text:00406785                 mov     ecx, [esp+0Ch+arg_4]
.text:00406789                 mov     [esp+0Ch+var_4], ebx
.text:0040678D                 mov     eax, 0FFFFFFFFh
.text:00406792                 mov     ebx, [esp+0Ch+arg_0]
.text:00406796                 div     ecx
.text:00406798                 cmp     eax, ebx
.text:0040679A                 jb      short loc_4067B9
.text:0040679C                 mov     edx, ebx
.text:0040679E                 imul    edx, ecx
.text:004067A1                 mov     [esp+0Ch+Size], edx ; Size
.text:004067A4                 call    malloc
.text:004067A9                 test    eax, eax
.text:004067AB                 jz      short loc_4067B5
.text:004067AD
.text:004067AD loc_4067AD:                             ; CODE XREF: sub_406780+37↓j
.text:004067AD                 mov     ebx, [esp+0Ch+var_4]
.text:004067B1                 add     esp, 0Ch
.text:004067B4                 retn
.text:004067B5 ; ---------------------------------------------------------------------------
.text:004067B5
.text:004067B5 loc_4067B5:                             ; CODE XREF: sub_406780+2B↑j
.text:004067B5                 test    ebx, ebx
.text:004067B7                 jz      short loc_4067AD
.text:004067B9
.text:004067B9 loc_4067B9:                             ; CODE XREF: sub_406780+1A↑j
.text:004067B9                 call    sub_406B40
.text:004067B9 sub_406780      endp
.text:004067B9
.text:004067B9 ; ---------------------------------------------------------------------------
.text:004067BE                 align 10h
.text:004067C0
.text:004067C0 ; =============== S U B R O U T I N E =======================================
.text:004067C0
.text:004067C0
.text:004067C0 ; int __cdecl sub_4067C0(size_t)
.text:004067C0 sub_4067C0      proc near               ; CODE XREF: .text:00405EE9↑p
.text:004067C0                                         ; .text:004060C6↑p ...
.text:004067C0
.text:004067C0 Size            = dword ptr -0Ch
.text:004067C0 var_4           = dword ptr -4
.text:004067C0 arg_0           = dword ptr  4
.text:004067C0
.text:004067C0                 sub     esp, 0Ch
.text:004067C3                 mov     [esp+0Ch+var_4], ebx
.text:004067C7                 mov     ebx, [esp+0Ch+arg_0]
.text:004067CB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004067CE                 call    malloc
.text:004067D3                 test    eax, eax
.text:004067D5                 jz      short loc_4067E0
.text:004067D7
.text:004067D7 loc_4067D7:                             ; CODE XREF: sub_4067C0+22↓j
.text:004067D7                 mov     ebx, [esp+0Ch+var_4]
.text:004067DB                 add     esp, 0Ch
.text:004067DE                 retn
.text:004067DE ; ---------------------------------------------------------------------------
.text:004067DF                 align 10h
.text:004067E0
.text:004067E0 loc_4067E0:                             ; CODE XREF: sub_4067C0+15↑j
.text:004067E0                 test    ebx, ebx
.text:004067E2                 jz      short loc_4067D7
.text:004067E4                 call    sub_406B40
.text:004067E4 sub_4067C0      endp
.text:004067E4
.text:004067E4 ; ---------------------------------------------------------------------------
.text:004067E9                 align 10h
.text:004067F0                 sub     esp, 1Ch
.text:004067F3                 xor     edx, edx
.text:004067F5                 mov     eax, 0FFFFFFFFh
.text:004067FA                 mov     [esp+14h], ebx
.text:004067FE                 mov     ecx, [esp+20h]
.text:00406802                 mov     ebx, [esp+28h]
.text:00406806                 mov     [esp+18h], esi
.text:0040680A                 mov     esi, [esp+24h]
.text:0040680E                 div     ebx
.text:00406810                 cmp     eax, esi
.text:00406812                 jb      short loc_406844
.text:00406814                 mov     [esp], ecx
.text:00406817                 mov     edx, esi
.text:00406819                 imul    edx, ebx
.text:0040681C                 mov     [esp+4], edx
.text:00406820                 call    realloc
.text:00406825                 test    eax, eax
.text:00406827                 mov     ecx, eax
.text:00406829                 jz      short loc_406840
.text:0040682B
.text:0040682B loc_40682B:                             ; CODE XREF: .text:00406842↓j
.text:0040682B                 mov     ebx, [esp+14h]
.text:0040682F                 mov     eax, ecx
.text:00406831                 mov     esi, [esp+18h]
.text:00406835                 add     esp, 1Ch
.text:00406838                 retn
.text:00406838 ; ---------------------------------------------------------------------------
.text:00406839                 align 10h
.text:00406840
.text:00406840 loc_406840:                             ; CODE XREF: .text:00406829↑j
.text:00406840                 test    esi, esi
.text:00406842                 jz      short loc_40682B
.text:00406844
.text:00406844 loc_406844:                             ; CODE XREF: .text:00406812↑j
.text:00406844                 call    sub_406B40
.text:00406844 ; ---------------------------------------------------------------------------
.text:00406849                 align 10h
.text:00406850
.text:00406850 ; =============== S U B R O U T I N E =======================================
.text:00406850
.text:00406850
.text:00406850 ; int __cdecl sub_406850(void *, size_t)
.text:00406850 sub_406850      proc near               ; CODE XREF: sub_4065B0+5B↑p
.text:00406850
.text:00406850 Block           = dword ptr -0Ch
.text:00406850 Size            = dword ptr -8
.text:00406850 var_4           = dword ptr -4
.text:00406850 arg_0           = dword ptr  4
.text:00406850 arg_4           = dword ptr  8
.text:00406850
.text:00406850                 sub     esp, 0Ch
.text:00406853                 mov     edx, [esp+0Ch+arg_0]
.text:00406857                 mov     [esp+0Ch+var_4], ebx
.text:0040685B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040685F                 mov     [esp+0Ch+Block], edx ; Block
.text:00406862                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406866                 call    realloc
.text:0040686B                 test    eax, eax
.text:0040686D                 jz      short loc_406877
.text:0040686F
.text:0040686F loc_40686F:                             ; CODE XREF: sub_406850+29↓j
.text:0040686F                 mov     ebx, [esp+0Ch+var_4]
.text:00406873                 add     esp, 0Ch
.text:00406876                 retn
.text:00406877 ; ---------------------------------------------------------------------------
.text:00406877
.text:00406877 loc_406877:                             ; CODE XREF: sub_406850+1D↑j
.text:00406877                 test    ebx, ebx
.text:00406879                 jz      short loc_40686F
.text:0040687B                 call    sub_406B40
.text:0040687B sub_406850      endp
.text:0040687B
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406880                 jmp     sub_4069D0
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406885                 align 10h
.text:00406890
.text:00406890 ; =============== S U B R O U T I N E =======================================
.text:00406890
.text:00406890
.text:00406890 ; int __cdecl sub_406890(void *, int)
.text:00406890 sub_406890      proc near               ; CODE XREF: sub_404AF0+76↑p
.text:00406890
.text:00406890 var_C           = dword ptr -0Ch
.text:00406890 var_8           = dword ptr -8
.text:00406890 var_4           = dword ptr -4
.text:00406890 arg_0           = dword ptr  4
.text:00406890 arg_4           = dword ptr  8
.text:00406890
.text:00406890                 sub     esp, 0Ch
.text:00406893                 mov     edx, [esp+0Ch+arg_4]
.text:00406897                 mov     [esp+0Ch+var_4], 1 ; int
.text:0040689F                 mov     [esp+0Ch+var_8], edx ; int
.text:004068A3                 mov     edx, [esp+0Ch+arg_0]
.text:004068A7                 mov     [esp+0Ch+var_C], edx ; void *
.text:004068AA                 call    sub_4069D0
.text:004068AF                 add     esp, 0Ch
.text:004068B2                 retn
.text:004068B2 sub_406890      endp
.text:004068B2
.text:004068B2 ; ---------------------------------------------------------------------------
.text:004068B3                 align 10h
.text:004068C0                 sub     esp, 1Ch
.text:004068C3                 mov     [esp+18h], ebx
.text:004068C7                 mov     ebx, [esp+20h]
.text:004068CB                 mov     [esp], ebx
.text:004068CE                 call    malloc
.text:004068D3                 test    eax, eax
.text:004068D5                 jz      short loc_4068F3
.text:004068D7
.text:004068D7 loc_4068D7:                             ; CODE XREF: .text:004068F5↓j
.text:004068D7                 mov     [esp+8], ebx
.text:004068DB                 mov     dword ptr [esp+4], 0
.text:004068E3                 mov     [esp], eax
.text:004068E6                 call    memset
.text:004068EB                 mov     ebx, [esp+18h]
.text:004068EF                 add     esp, 1Ch
.text:004068F2                 retn
.text:004068F3 ; ---------------------------------------------------------------------------
.text:004068F3
.text:004068F3 loc_4068F3:                             ; CODE XREF: .text:004068D5↑j
.text:004068F3                 test    ebx, ebx
.text:004068F5                 jz      short loc_4068D7
.text:004068F7                 call    sub_406B40
.text:004068F7 ; ---------------------------------------------------------------------------
.text:004068FC                 align 10h
.text:00406900                 sub     esp, 0Ch
.text:00406903                 xor     edx, edx
.text:00406905                 mov     ecx, [esp+14h]
.text:00406909                 mov     [esp+8], ebx
.text:0040690D                 mov     eax, 0FFFFFFFFh
.text:00406912                 mov     ebx, [esp+10h]
.text:00406916                 div     ecx
.text:00406918                 cmp     eax, ebx
.text:0040691A                 jb      short loc_406938
.text:0040691C                 mov     [esp+4], ecx
.text:00406920                 mov     [esp], ebx
.text:00406923                 call    calloc
.text:00406928                 test    eax, eax
.text:0040692A                 jz      short loc_406934
.text:0040692C
.text:0040692C loc_40692C:                             ; CODE XREF: .text:00406936↓j
.text:0040692C                 mov     ebx, [esp+8]
.text:00406930                 add     esp, 0Ch
.text:00406933                 retn
.text:00406934 ; ---------------------------------------------------------------------------
.text:00406934
.text:00406934 loc_406934:                             ; CODE XREF: .text:0040692A↑j
.text:00406934                 test    ebx, ebx
.text:00406936                 jz      short loc_40692C
.text:00406938
.text:00406938 loc_406938:                             ; CODE XREF: .text:0040691A↑j
.text:00406938                 call    sub_406B40
.text:00406938 ; ---------------------------------------------------------------------------
.text:0040693D                 align 10h
.text:00406940                 sub     esp, 1Ch
.text:00406943                 mov     [esp+18h], ebx
.text:00406947                 mov     ebx, [esp+24h]
.text:0040694B                 mov     [esp], ebx
.text:0040694E                 call    malloc
.text:00406953                 test    eax, eax
.text:00406955                 mov     edx, eax
.text:00406957                 jz      short loc_406975
.text:00406959
.text:00406959 loc_406959:                             ; CODE XREF: .text:00406977↓j
.text:00406959                 mov     [esp+8], ebx
.text:0040695D                 mov     ecx, [esp+20h]
.text:00406961                 mov     [esp], edx
.text:00406964                 mov     [esp+4], ecx
.text:00406968                 call    memcpy
.text:0040696D                 mov     ebx, [esp+18h]
.text:00406971                 add     esp, 1Ch
.text:00406974                 retn
.text:00406975 ; ---------------------------------------------------------------------------
.text:00406975
.text:00406975 loc_406975:                             ; CODE XREF: .text:00406957↑j
.text:00406975                 test    ebx, ebx
.text:00406977                 jz      short loc_406959
.text:00406979                 call    sub_406B40
.text:00406979 ; ---------------------------------------------------------------------------
.text:0040697E                 align 10h
.text:00406980                 sub     esp, 1Ch
.text:00406983                 mov     [esp+18h], esi
.text:00406987                 mov     esi, [esp+20h]
.text:0040698B                 mov     [esp+14h], ebx
.text:0040698F                 mov     [esp], esi
.text:00406992                 call    strlen
.text:00406997                 lea     ebx, [eax+1]
.text:0040699A                 mov     [esp], ebx
.text:0040699D                 call    malloc
.text:004069A2                 test    eax, eax
.text:004069A4                 jz      short loc_4069C2
.text:004069A6
.text:004069A6 loc_4069A6:                             ; CODE XREF: .text:004069C4↓j
.text:004069A6                 mov     [esp+8], ebx
.text:004069AA                 mov     [esp+4], esi
.text:004069AE                 mov     [esp], eax
.text:004069B1                 call    memcpy
.text:004069B6                 mov     ebx, [esp+14h]
.text:004069BA                 mov     esi, [esp+18h]
.text:004069BE                 add     esp, 1Ch
.text:004069C1                 retn
.text:004069C2 ; ---------------------------------------------------------------------------
.text:004069C2
.text:004069C2 loc_4069C2:                             ; CODE XREF: .text:004069A4↑j
.text:004069C2                 test    ebx, ebx
.text:004069C4                 jz      short loc_4069A6
.text:004069C6                 call    sub_406B40
.text:004069C6 ; ---------------------------------------------------------------------------
.text:004069CB                 align 10h
.text:004069D0
.text:004069D0 ; =============== S U B R O U T I N E =======================================
.text:004069D0
.text:004069D0
.text:004069D0 ; int __cdecl sub_4069D0(void *, int, int)
.text:004069D0 sub_4069D0      proc near               ; CODE XREF: .text:00406880↑j
.text:004069D0                                         ; sub_406890+1A↑p
.text:004069D0
.text:004069D0 Block           = dword ptr -1Ch
.text:004069D0 Size            = dword ptr -18h
.text:004069D0 var_C           = dword ptr -0Ch
.text:004069D0 var_8           = dword ptr -8
.text:004069D0 var_4           = dword ptr -4
.text:004069D0 arg_0           = dword ptr  4
.text:004069D0 arg_4           = dword ptr  8
.text:004069D0 arg_8           = dword ptr  0Ch
.text:004069D0
.text:004069D0                 sub     esp, 1Ch
.text:004069D3                 mov     [esp+1Ch+var_8], esi
.text:004069D7                 mov     esi, [esp+1Ch+arg_0]
.text:004069DB                 mov     [esp+1Ch+var_4], edi
.text:004069DF                 mov     edi, [esp+1Ch+arg_4]
.text:004069E3                 test    esi, esi
.text:004069E5                 mov     [esp+1Ch+var_C], ebx
.text:004069E9                 mov     ecx, [edi]
.text:004069EB                 mov     ebx, [esp+1Ch+arg_8]
.text:004069EF                 jz      short loc_406A30
.text:004069F1                 xor     edx, edx
.text:004069F3                 mov     eax, 7FFFFFFFh
.text:004069F8                 div     ebx
.text:004069FA                 cmp     eax, ecx
.text:004069FC                 jb      short loc_406A29
.text:004069FE                 add     ecx, ecx
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: sub_4069D0+62↓j
.text:00406A00                                         ; sub_4069D0+71↓j ...
.text:00406A00                 mov     [edi], ecx
.text:00406A02                 imul    ebx, ecx
.text:00406A05                 mov     [esp+1Ch+Block], esi ; Block
.text:00406A08                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406A0C                 call    realloc
.text:00406A11                 test    eax, eax
.text:00406A13                 jz      short loc_406A25
.text:00406A15
.text:00406A15 loc_406A15:                             ; CODE XREF: sub_4069D0+57↓j
.text:00406A15                 mov     ebx, [esp+1Ch+var_C]
.text:00406A19                 mov     esi, [esp+1Ch+var_8]
.text:00406A1D                 mov     edi, [esp+1Ch+var_4]
.text:00406A21                 add     esp, 1Ch
.text:00406A24                 retn
.text:00406A25 ; ---------------------------------------------------------------------------
.text:00406A25
.text:00406A25 loc_406A25:                             ; CODE XREF: sub_4069D0+43↑j
.text:00406A25                 test    ebx, ebx
.text:00406A27                 jz      short loc_406A15
.text:00406A29
.text:00406A29 loc_406A29:                             ; CODE XREF: sub_4069D0+2C↑j
.text:00406A29                 call    sub_406B40
.text:00406A29 ; ---------------------------------------------------------------------------
.text:00406A2E                 align 10h
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: sub_4069D0+1F↑j
.text:00406A30                 test    ecx, ecx
.text:00406A32                 jnz     short loc_406A00
.text:00406A34                 xor     edx, edx
.text:00406A36                 mov     eax, 40h ; '@'
.text:00406A3B                 div     ebx
.text:00406A3D                 test    eax, eax
.text:00406A3F                 mov     ecx, eax
.text:00406A41                 jnz     short loc_406A00
.text:00406A43                 mov     ecx, 1
.text:00406A48                 jmp     short loc_406A00
.text:00406A48 sub_4069D0      endp
.text:00406A48
.text:00406A48 ; ---------------------------------------------------------------------------
.text:00406A4A                 align 10h
.text:00406A50
.text:00406A50 ; =============== S U B R O U T I N E =======================================
.text:00406A50
.text:00406A50
.text:00406A50 ; int __cdecl sub_406A50(char *Str, int, int, int)
.text:00406A50 sub_406A50      proc near               ; CODE XREF: sub_404C70+32↑p
.text:00406A50
.text:00406A50 String1         = dword ptr -2Ch
.text:00406A50 String2         = dword ptr -28h
.text:00406A50 var_16          = byte ptr -16h
.text:00406A50 var_15          = byte ptr -15h
.text:00406A50 var_14          = dword ptr -14h
.text:00406A50 Str             = dword ptr  4
.text:00406A50 arg_4           = dword ptr  8
.text:00406A50 arg_8           = dword ptr  0Ch
.text:00406A50 arg_C           = dword ptr  10h
.text:00406A50
.text:00406A50                 push    ebp
.text:00406A51                 push    edi
.text:00406A52                 push    esi
.text:00406A53                 push    ebx
.text:00406A54                 sub     esp, 1Ch
.text:00406A57                 mov     ecx, [esp+2Ch+arg_4]
.text:00406A5B                 mov     edi, [esp+2Ch+Str]
.text:00406A5F                 mov     ebp, [esp+2Ch+arg_C]
.text:00406A63                 mov     esi, [esp+2Ch+arg_8]
.text:00406A67                 movzx   edx, byte ptr [ecx+edi]
.text:00406A6B                 mov     [esp+2Ch+var_15], dl
.text:00406A6F                 mov     edx, [esp+2Ch+arg_4]
.text:00406A73                 movzx   eax, byte ptr [ebp+esi+0]
.text:00406A78                 mov     [esp+2Ch+var_16], al
.text:00406A7C                 mov     byte ptr [edx+edi], 0
.text:00406A80                 inc     edx
.text:00406A81                 mov     [esp+2Ch+arg_4], edx
.text:00406A85                 mov     byte ptr [ebp+esi+0], 0
.text:00406A8A                 inc     ebp
.text:00406A8B                 nop
.text:00406A8C                 lea     esi, [esi+0]
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: sub_406A50+94↓j
.text:00406A90                 call    _errno
.text:00406A95                 mov     dword ptr [eax], 0
.text:00406A9B                 mov     [esp+2Ch+String2], esi ; String2
.text:00406A9F                 mov     [esp+2Ch+String1], edi ; String1
.text:00406AA2                 call    strcoll
.text:00406AA7                 mov     [esp+2Ch+var_14], eax
.text:00406AAB                 test    eax, eax
.text:00406AAD                 jnz     short loc_406AE6
.text:00406AAF                 call    _errno
.text:00406AB4                 mov     ebx, [eax]
.text:00406AB6                 test    ebx, ebx
.text:00406AB8                 jnz     short loc_406AE6
.text:00406ABA                 mov     [esp+2Ch+String1], edi ; Str
.text:00406ABD                 call    strlen
.text:00406AC2                 mov     [esp+2Ch+String1], esi ; Str
.text:00406AC5                 lea     ebx, [eax+1]
.text:00406AC8                 add     edi, ebx
.text:00406ACA                 call    strlen
.text:00406ACF                 inc     eax
.text:00406AD0                 add     esi, eax
.text:00406AD2                 sub     ebp, eax
.text:00406AD4                 sub     [esp+2Ch+arg_4], ebx
.text:00406AD8                 jz      short loc_406B08
.text:00406ADA                 mov     [esp+2Ch+var_14], 1
.text:00406AE2                 test    ebp, ebp
.text:00406AE4                 jnz     short loc_406A90
.text:00406AE6
.text:00406AE6 loc_406AE6:                             ; CODE XREF: sub_406A50+5D↑j
.text:00406AE6                                         ; sub_406A50+68↑j ...
.text:00406AE6                 movzx   ebx, [esp+2Ch+var_15]
.text:00406AEB                 mov     ecx, [esp+2Ch+arg_4]
.text:00406AEF                 mov     [ecx+edi-1], bl
.text:00406AF3                 movzx   eax, [esp+2Ch+var_16]
.text:00406AF8                 mov     [ebp+esi-1], al
.text:00406AFC                 mov     eax, [esp+2Ch+var_14]
.text:00406B00                 add     esp, 1Ch
.text:00406B03                 pop     ebx
.text:00406B04                 pop     esi
.text:00406B05                 pop     edi
.text:00406B06                 pop     ebp
.text:00406B07                 retn
.text:00406B08 ; ---------------------------------------------------------------------------
.text:00406B08
.text:00406B08 loc_406B08:                             ; CODE XREF: sub_406A50+88↑j
.text:00406B08                 test    ebp, ebp
.text:00406B0A                 jz      short loc_406AE6
.text:00406B0C                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:00406B14                 jmp     short loc_406AE6
.text:00406B14 sub_406A50      endp
.text:00406B14
.text:00406B14 ; ---------------------------------------------------------------------------
.text:00406B16                 align 10h
.text:00406B20 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_406B40+3↓o
.text:00406B31 ; const char aS_1[]
.text:00406B31 aS_1            db '%s',0               ; DATA XREF: sub_406B40+10↓o
.text:00406B34                 align 10h
.text:00406B40
.text:00406B40 ; =============== S U B R O U T I N E =======================================
.text:00406B40
.text:00406B40 ; Attributes: noreturn
.text:00406B40
.text:00406B40 sub_406B40      proc near               ; CODE XREF: sub_4065B0:loc_40676F↑p
.text:00406B40                                         ; sub_406780:loc_4067B9↑p ...
.text:00406B40
.text:00406B40 Code            = dword ptr -1Ch
.text:00406B40 ErrorMessage    = dword ptr -18h
.text:00406B40 var_14          = dword ptr -14h
.text:00406B40 var_10          = byte ptr -10h
.text:00406B40
.text:00406B40                 sub     esp, 1Ch
.text:00406B43                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00406B4A                 call    ds:libintl_gettext
.text:00406B50                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:00406B58                 mov     edx, Code
.text:00406B5E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406B66                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00406B6A                 mov     [esp+1Ch+Code], edx ; Code
.text:00406B6D                 call    sub_406BD0
.text:00406B72                 call    abort
.text:00406B72 sub_406B40      endp
.text:00406B72
.text:00406B72 ; ---------------------------------------------------------------------------
.text:00406B77                 align 10h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80 ; Attributes: thunk
.text:00406B80
.text:00406B80 libintl_bindtextdomain proc near
.text:00406B80                 jmp     ds:__imp_libintl_bindtextdomain
.text:00406B80 libintl_bindtextdomain endp
.text:00406B80
.text:00406B80 ; ---------------------------------------------------------------------------
.text:00406B86                 align 10h
.text:00406B90                 jmp     ds:libintl_textdomain
.text:00406B90 ; ---------------------------------------------------------------------------
.text:00406B96                 align 10h
.text:00406BA0                 jmp     ds:libintl_gettext
.text:00406BA0 ; ---------------------------------------------------------------------------
.text:00406BA6                 align 10h
.text:00406BB0 ; const char aS_2[]
.text:00406BB0 aS_2            db ': %s',0             ; DATA XREF: sub_406BD0+B8↓o
.text:00406BB0                                         ; sub_406CD4+122↓o
.text:00406BB5 aUnknownSystemE db 'Unknown system error',0
.text:00406BB5                                         ; DATA XREF: sub_406BD0:loc_406C9D↓o
.text:00406BB5                                         ; sub_406CD4:loc_406E0E↓o
.text:00406BCA ; const char aS_3[]
.text:00406BCA aS_3            db '%s: ',0             ; DATA XREF: sub_406BD0:loc_406CA4↓o
.text:00406BCF                 align 10h
.text:00406BD0
.text:00406BD0 ; =============== S U B R O U T I N E =======================================
.text:00406BD0
.text:00406BD0
.text:00406BD0 ; int __cdecl sub_406BD0(int Code, int ErrorMessage, char *, char)
.text:00406BD0 sub_406BD0      proc near               ; CODE XREF: sub_401AF0+23E↑p
.text:00406BD0                                         ; sub_401AF0+454↑p ...
.text:00406BD0
.text:00406BD0 Stream          = dword ptr -1Ch
.text:00406BD0 Format          = dword ptr -18h
.text:00406BD0 ArgList         = dword ptr -14h
.text:00406BD0 Code            = dword ptr  4
.text:00406BD0 ErrorMessage    = dword ptr  8
.text:00406BD0 arg_8           = dword ptr  0Ch
.text:00406BD0 arg_C           = byte ptr  10h
.text:00406BD0
.text:00406BD0                 push    esi
.text:00406BD1                 push    ebx
.text:00406BD2                 sub     esp, 14h
.text:00406BD5                 mov     edx, ds:_iob
.text:00406BDB                 mov     esi, [esp+1Ch+Code]
.text:00406BDF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00406BE3                 add     edx, 20h ; ' '
.text:00406BE6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406BE9                 call    fflush
.text:00406BEE                 mov     eax, ds:dword_409260
.text:00406BF3                 test    eax, eax
.text:00406BF5                 jz      loc_406CA4
.text:00406BFB                 call    eax ; dword_409260
.text:00406BFD
.text:00406BFD loc_406BFD:                             ; CODE XREF: sub_406BD0+F7↓j
.text:00406BFD                 lea     edx, [esp+1Ch+arg_C]
.text:00406C01                 mov     ecx, [esp+1Ch+arg_8]
.text:00406C05                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00406C09                 mov     edx, ds:_iob
.text:00406C0F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00406C13                 add     edx, 40h ; '@'
.text:00406C16                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406C19                 call    vfprintf
.text:00406C1E                 inc     ds:dword_409270
.text:00406C24                 test    ebx, ebx
.text:00406C26                 jnz     short loc_406C72
.text:00406C28
.text:00406C28 loc_406C28:                             ; CODE XREF: sub_406BD0+CB↓j
.text:00406C28                 mov     edx, ds:_iob
.text:00406C2E                 lea     ecx, [edx+40h]
.text:00406C31                 mov     ebx, [ecx+4]
.text:00406C34                 dec     ebx
.text:00406C35                 test    ebx, ebx
.text:00406C37                 mov     [ecx+4], ebx
.text:00406C3A                 js      short loc_406C60
.text:00406C3C                 mov     ecx, [edx+40h]
.text:00406C3F                 mov     byte ptr [ecx], 0Ah
.text:00406C42                 inc     dword ptr [edx+40h]
.text:00406C45
.text:00406C45 loc_406C45:                             ; CODE XREF: sub_406BD0+A0↓j
.text:00406C45                 mov     edx, ds:_iob
.text:00406C4B                 add     edx, 40h ; '@'
.text:00406C4E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406C51                 call    fflush
.text:00406C56                 test    esi, esi
.text:00406C58                 jnz     short loc_406CCC
.text:00406C5A                 add     esp, 14h
.text:00406C5D                 pop     ebx
.text:00406C5E                 pop     esi
.text:00406C5F                 retn
.text:00406C60 ; ---------------------------------------------------------------------------
.text:00406C60
.text:00406C60 loc_406C60:                             ; CODE XREF: sub_406BD0+6A↑j
.text:00406C60                 mov     [esp+1Ch+Format], ecx ; File
.text:00406C64                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00406C6B                 call    _flsbuf
.text:00406C70                 jmp     short loc_406C45
.text:00406C72 ; ---------------------------------------------------------------------------
.text:00406C72
.text:00406C72 loc_406C72:                             ; CODE XREF: sub_406BD0+56↑j
.text:00406C72                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00406C75                 call    strerror
.text:00406C7A                 test    eax, eax
.text:00406C7C                 jz      short loc_406C9D
.text:00406C7E
.text:00406C7E loc_406C7E:                             ; CODE XREF: sub_406BD0+D2↓j
.text:00406C7E                 mov     [esp+1Ch+ArgList], eax
.text:00406C82                 mov     ebx, ds:_iob
.text:00406C88                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:00406C90                 add     ebx, 40h ; '@'
.text:00406C93                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00406C96                 call    fprintf
.text:00406C9B                 jmp     short loc_406C28
.text:00406C9D ; ---------------------------------------------------------------------------
.text:00406C9D
.text:00406C9D loc_406C9D:                             ; CODE XREF: sub_406BD0+AC↑j
.text:00406C9D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406CA2                 jmp     short loc_406C7E
.text:00406CA4 ; ---------------------------------------------------------------------------
.text:00406CA4
.text:00406CA4 loc_406CA4:                             ; CODE XREF: sub_406BD0+25↑j
.text:00406CA4                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:00406CAC                 mov     edx, ds:_iob
.text:00406CB2                 mov     ecx, ds:dword_409230
.text:00406CB8                 add     edx, 40h ; '@'
.text:00406CBB                 mov     [esp+1Ch+ArgList], ecx
.text:00406CBF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406CC2                 call    fprintf
.text:00406CC7                 jmp     loc_406BFD
.text:00406CCC ; ---------------------------------------------------------------------------
.text:00406CCC
.text:00406CCC loc_406CCC:                             ; CODE XREF: sub_406BD0+88↑j
.text:00406CCC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00406CCF                 call    exit
.text:00406CCF sub_406BD0      endp
.text:00406CCF
.text:00406CD4
.text:00406CD4 ; =============== S U B R O U T I N E =======================================
.text:00406CD4
.text:00406CD4
.text:00406CD4 ; int __cdecl sub_406CD4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406CD4 sub_406CD4      proc near               ; DATA XREF: sub_406CD4+77↓o
.text:00406CD4
.text:00406CD4 Stream          = dword ptr -28h
.text:00406CD4 Format          = dword ptr -24h
.text:00406CD4 ArgList         = dword ptr -20h
.text:00406CD4 var_1C          = dword ptr -1Ch
.text:00406CD4 Code            = dword ptr  8
.text:00406CD4 ErrorMessage    = dword ptr  0Ch
.text:00406CD4 Str2            = dword ptr  10h
.text:00406CD4 arg_10          = dword ptr  14h
.text:00406CD4 arg_14          = dword ptr  18h
.text:00406CD4 arg_18          = byte ptr  1Ch
.text:00406CD4
.text:00406CD4                 and     eax, 64253A73h
.text:00406CD9                 cmp     ah, [eax]
.text:00406CDB
.text:00406CDB loc_406CDB:                             ; DATA XREF: sub_406CD4:loc_406E15↓o
.text:00406CDB                 add     ds:55003A73h, ah
.text:00406CE1                 push    edi
.text:00406CE2                 push    esi
.text:00406CE3                 push    ebx
.text:00406CE4                 sub     esp, 1Ch
.text:00406CE7                 mov     edx, ds:dword_4092A0
.text:00406CED                 mov     ebp, [esp+28h+Code]
.text:00406CF1                 mov     edi, [esp+28h+ErrorMessage]
.text:00406CF5                 test    edx, edx
.text:00406CF7                 mov     ebx, [esp+28h+Str2]
.text:00406CFB                 mov     esi, [esp+28h+arg_10]
.text:00406CFF                 jz      short loc_406D19
.text:00406D01                 cmp     ds:dword_409220, esi
.text:00406D07                 jz      loc_406E40
.text:00406D0D
.text:00406D0D loc_406D0D:                             ; CODE XREF: sub_406CD4+18D↓j
.text:00406D0D                 mov     ds:Str1, ebx
.text:00406D13                 mov     ds:dword_409220, esi
.text:00406D19
.text:00406D19 loc_406D19:                             ; CODE XREF: sub_406CD4+2B↑j
.text:00406D19                 mov     edx, ds:_iob
.text:00406D1F                 add     edx, 20h ; ' '
.text:00406D22                 mov     [esp+28h+Stream], edx ; Stream
.text:00406D25                 call    fflush
.text:00406D2A                 mov     eax, ds:dword_409260
.text:00406D2F                 test    eax, eax
.text:00406D31                 jz      loc_406E15
.text:00406D37                 call    eax ; dword_409260
.text:00406D39
.text:00406D39 loc_406D39:                             ; CODE XREF: sub_406CD4+164↓j
.text:00406D39                 test    ebx, ebx
.text:00406D3B                 jz      short loc_406D5E
.text:00406D3D                 mov     [esp+28h+ArgList], ebx
.text:00406D41                 mov     ebx, ds:_iob
.text:00406D47                 mov     [esp+28h+var_1C], esi
.text:00406D4B                 mov     [esp+28h+Format], offset sub_406CD4 ; Format
.text:00406D53                 add     ebx, 40h ; '@'
.text:00406D56                 mov     [esp+28h+Stream], ebx ; Stream
.text:00406D59                 call    fprintf
.text:00406D5E
.text:00406D5E loc_406D5E:                             ; CODE XREF: sub_406CD4+67↑j
.text:00406D5E                 mov     esi, ds:_iob
.text:00406D64                 lea     edx, [esp+28h+arg_18]
.text:00406D68                 mov     ecx, [esp+28h+arg_14]
.text:00406D6C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00406D70                 add     esi, 40h ; '@'
.text:00406D73                 mov     [esp+28h+Format], ecx ; Format
.text:00406D77                 mov     [esp+28h+Stream], esi ; Stream
.text:00406D7A                 call    vfprintf
.text:00406D7F                 inc     ds:dword_409270
.text:00406D85                 test    edi, edi
.text:00406D87                 jnz     short loc_406DE0
.text:00406D89
.text:00406D89 loc_406D89:                             ; CODE XREF: sub_406CD4+135↓j
.text:00406D89                 mov     edx, ds:_iob
.text:00406D8F                 lea     ecx, [edx+40h]
.text:00406D92                 mov     ebx, [ecx+4]
.text:00406D95                 dec     ebx
.text:00406D96                 test    ebx, ebx
.text:00406D98                 mov     [ecx+4], ebx
.text:00406D9B                 js      short loc_406DC7
.text:00406D9D                 mov     esi, [edx+40h]
.text:00406DA0                 mov     byte ptr [esi], 0Ah
.text:00406DA3                 inc     dword ptr [edx+40h]
.text:00406DA6
.text:00406DA6 loc_406DA6:                             ; CODE XREF: sub_406CD4+103↓j
.text:00406DA6                 mov     ecx, ds:_iob
.text:00406DAC                 add     ecx, 40h ; '@'
.text:00406DAF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406DB2                 call    fflush
.text:00406DB7                 test    ebp, ebp
.text:00406DB9                 jnz     loc_406E66
.text:00406DBF
.text:00406DBF loc_406DBF:                             ; CODE XREF: sub_406CD4+173↓j
.text:00406DBF                                         ; sub_406CD4+187↓j
.text:00406DBF                 add     esp, 1Ch
.text:00406DC2                 pop     ebx
.text:00406DC3                 pop     esi
.text:00406DC4                 pop     edi
.text:00406DC5                 pop     ebp
.text:00406DC6                 retn
.text:00406DC7 ; ---------------------------------------------------------------------------
.text:00406DC7
.text:00406DC7 loc_406DC7:                             ; CODE XREF: sub_406CD4+C7↑j
.text:00406DC7                 mov     [esp+28h+Format], ecx ; File
.text:00406DCB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00406DD2                 call    _flsbuf
.text:00406DD7                 jmp     short loc_406DA6
.text:00406DD7 ; ---------------------------------------------------------------------------
.text:00406DD9                 align 10h
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406CD4+B3↑j
.text:00406DE0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00406DE3                 call    strerror
.text:00406DE8                 test    eax, eax
.text:00406DEA                 jz      short loc_406E0E
.text:00406DEC
.text:00406DEC loc_406DEC:                             ; CODE XREF: sub_406CD4+13F↓j
.text:00406DEC                 mov     [esp+28h+ArgList], eax
.text:00406DF0                 mov     edi, ds:_iob
.text:00406DF6                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:00406DFE                 add     edi, 40h ; '@'
.text:00406E01                 mov     [esp+28h+Stream], edi ; Stream
.text:00406E04                 call    fprintf
.text:00406E09                 jmp     loc_406D89
.text:00406E0E ; ---------------------------------------------------------------------------
.text:00406E0E
.text:00406E0E loc_406E0E:                             ; CODE XREF: sub_406CD4+116↑j
.text:00406E0E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406E13                 jmp     short loc_406DEC
.text:00406E15 ; ---------------------------------------------------------------------------
.text:00406E15
.text:00406E15 loc_406E15:                             ; CODE XREF: sub_406CD4+5D↑j
.text:00406E15                 mov     [esp+28h+Format], (offset loc_406CDB+1) ; Format
.text:00406E1D                 mov     ecx, ds:_iob
.text:00406E23                 mov     edx, ds:dword_409230
.text:00406E29                 add     ecx, 40h ; '@'
.text:00406E2C                 mov     [esp+28h+ArgList], edx
.text:00406E30                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406E33                 call    fprintf
.text:00406E38                 jmp     loc_406D39
.text:00406E38 ; ---------------------------------------------------------------------------
.text:00406E3D                 align 10h
.text:00406E40
.text:00406E40 loc_406E40:                             ; CODE XREF: sub_406CD4+33↑j
.text:00406E40                 mov     eax, ds:Str1
.text:00406E45                 cmp     ebx, eax
.text:00406E47                 jz      loc_406DBF
.text:00406E4D                 mov     [esp+28h+Format], ebx ; Str2
.text:00406E51                 mov     [esp+28h+Stream], eax ; Str1
.text:00406E54                 call    strcmp
.text:00406E59                 test    eax, eax
.text:00406E5B                 jz      loc_406DBF
.text:00406E61                 jmp     loc_406D0D
.text:00406E66 ; ---------------------------------------------------------------------------
.text:00406E66
.text:00406E66 loc_406E66:                             ; CODE XREF: sub_406CD4+E5↑j
.text:00406E66                 mov     [esp+28h+Stream], ebp ; Code
.text:00406E69                 call    exit
.text:00406E69 sub_406CD4      endp ; sp-analysis failed
.text:00406E69
.text:00406E69 ; ---------------------------------------------------------------------------
.text:00406E6E                 align 10h
.text:00406E70
.text:00406E70 ; =============== S U B R O U T I N E =======================================
.text:00406E70
.text:00406E70 ; Attributes: thunk
.text:00406E70
.text:00406E70 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00406E70 mbrtowc         proc near               ; CODE XREF: sub_405470+757↑p
.text:00406E70                 jmp     ds:__imp_mbrtowc
.text:00406E70 mbrtowc         endp
.text:00406E70
.text:00406E70 ; ---------------------------------------------------------------------------
.text:00406E76                 align 10h
.text:00406E80
.text:00406E80 ; =============== S U B R O U T I N E =======================================
.text:00406E80
.text:00406E80 ; Attributes: bp-based frame
.text:00406E80
.text:00406E80 sub_406E80      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00406E80                 push    ebp
.text:00406E81                 mov     ecx, offset byte_409000
.text:00406E86                 cmp     ecx, offset byte_409000
.text:00406E8C                 mov     ebp, esp
.text:00406E8E                 jnb     short loc_406EA6
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: sub_406E80+24↓j
.text:00406E90                 mov     edx, [ecx+4]
.text:00406E93                 mov     eax, [ecx]
.text:00406E95                 add     ecx, 8
.text:00406E98                 add     [edx+400000h], eax
.text:00406E9E                 cmp     ecx, offset byte_409000
.text:00406EA4                 jb      short loc_406E90
.text:00406EA6
.text:00406EA6 loc_406EA6:                             ; CODE XREF: sub_406E80+E↑j
.text:00406EA6                 pop     ebp
.text:00406EA7                 retn
.text:00406EA7 sub_406E80      endp
.text:00406EA7
.text:00406EA7 ; ---------------------------------------------------------------------------
.text:00406EA8                 align 10h
.text:00406EB0
.text:00406EB0 ; =============== S U B R O U T I N E =======================================
.text:00406EB0
.text:00406EB0 ; Attributes: bp-based frame
.text:00406EB0
.text:00406EB0 sub_406EB0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00406EB0                                         ; TopLevelExceptionFilter+D7↑p
.text:00406EB0                 push    ebp
.text:00406EB1                 mov     ebp, esp
.text:00406EB3                 fninit
.text:00406EB5                 pop     ebp
.text:00406EB6                 retn
.text:00406EB6 sub_406EB0      endp
.text:00406EB6
.text:00406EB6 ; ---------------------------------------------------------------------------
.text:00406EB7                 align 10h
.text:00406EC0
.text:00406EC0 ; =============== S U B R O U T I N E =======================================
.text:00406EC0
.text:00406EC0 ; Attributes: bp-based frame
.text:00406EC0
.text:00406EC0 ; void __cdecl sub_406EC0()
.text:00406EC0 sub_406EC0      proc near               ; DATA XREF: .text:loc_406F09↓o
.text:00406EC0                                         ; sub_406F50:loc_406F7E↓o
.text:00406EC0                 push    ebp
.text:00406EC1                 mov     ebp, esp
.text:00406EC3                 sub     esp, 8
.text:00406EC6                 mov     eax, off_408094
.text:00406ECB                 mov     edx, [eax]
.text:00406ECD                 test    edx, edx
.text:00406ECF                 jnz     short loc_406ED5
.text:00406ED1
.text:00406ED1 loc_406ED1:                             ; CODE XREF: sub_406EC0+2C↓j
.text:00406ED1                 mov     esp, ebp
.text:00406ED3                 pop     ebp
.text:00406ED4                 retn
.text:00406ED5 ; ---------------------------------------------------------------------------
.text:00406ED5
.text:00406ED5 loc_406ED5:                             ; CODE XREF: sub_406EC0+F↑j
.text:00406ED5                                         ; sub_406EC0+2A↓j
.text:00406ED5                 call    dword ptr [eax]
.text:00406ED7                 mov     edx, off_408094
.text:00406EDD                 mov     ecx, [edx+4]
.text:00406EE0                 lea     eax, [edx+4]
.text:00406EE3                 mov     off_408094, eax
.text:00406EE8                 test    ecx, ecx
.text:00406EEA                 jnz     short loc_406ED5
.text:00406EEC                 jmp     short loc_406ED1
.text:00406EEC sub_406EC0      endp
.text:00406EEC
.text:00406EEC ; ---------------------------------------------------------------------------
.text:00406EEE                 align 10h
.text:00406EF0                 push    ebp
.text:00406EF1                 mov     ebp, esp
.text:00406EF3                 sub     esp, 8
.text:00406EF6                 mov     [ebp-4], ebx
.text:00406EF9                 mov     eax, ds:dword_407290
.text:00406EFE                 cmp     eax, 0FFFFFFFFh
.text:00406F01                 jz      short loc_406F2C
.text:00406F03
.text:00406F03 loc_406F03:                             ; CODE XREF: .text:00406F36↓j
.text:00406F03                                         ; .text:00406F49↓j
.text:00406F03                 test    eax, eax
.text:00406F05                 mov     ebx, eax
.text:00406F07                 jnz     short loc_406F20
.text:00406F09
.text:00406F09 loc_406F09:                             ; CODE XREF: .text:00406F2A↓j
.text:00406F09                 mov     dword ptr [esp], offset sub_406EC0
.text:00406F10                 call    sub_401040
.text:00406F15                 mov     ebx, [ebp-4]
.text:00406F18                 mov     esp, ebp
.text:00406F1A                 pop     ebp
.text:00406F1B                 retn
.text:00406F1B ; ---------------------------------------------------------------------------
.text:00406F1C                 align 10h
.text:00406F20
.text:00406F20 loc_406F20:                             ; CODE XREF: .text:00406F07↑j
.text:00406F20                                         ; .text:00406F28↓j
.text:00406F20                 call    ds:dword_407290[ebx*4]
.text:00406F27                 dec     ebx
.text:00406F28                 jnz     short loc_406F20
.text:00406F2A                 jmp     short loc_406F09
.text:00406F2C ; ---------------------------------------------------------------------------
.text:00406F2C
.text:00406F2C loc_406F2C:                             ; CODE XREF: .text:00406F01↑j
.text:00406F2C                 mov     ecx, ds:dword_407294
.text:00406F32                 xor     eax, eax
.text:00406F34                 test    ecx, ecx
.text:00406F36                 jz      short loc_406F03
.text:00406F38                 mov     edx, offset dword_407290
.text:00406F3D                 lea     esi, [esi+0]
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: .text:00406F47↓j
.text:00406F40                 inc     eax
.text:00406F41                 mov     ecx, [edx+eax*4+4]
.text:00406F45                 test    ecx, ecx
.text:00406F47                 jnz     short loc_406F40
.text:00406F49                 jmp     short loc_406F03
.text:00406F49 ; ---------------------------------------------------------------------------
.text:00406F4B                 align 10h
.text:00406F50
.text:00406F50 ; =============== S U B R O U T I N E =======================================
.text:00406F50
.text:00406F50 ; Attributes: bp-based frame
.text:00406F50
.text:00406F50 sub_406F50      proc near               ; CODE XREF: sub_401AF0+18↑p
.text:00406F50
.text:00406F50 var_8           = dword ptr -8
.text:00406F50 var_4           = dword ptr -4
.text:00406F50
.text:00406F50                 push    ebp
.text:00406F51                 mov     ebp, esp
.text:00406F53                 sub     esp, 8
.text:00406F56                 mov     [ebp+var_4], ebx
.text:00406F59                 mov     edx, dword_408090
.text:00406F5F                 test    edx, edx
.text:00406F61                 jnz     short loc_406F8A
.text:00406F63                 mov     eax, ds:dword_407290
.text:00406F68                 mov     edx, 1
.text:00406F6D                 mov     dword_408090, edx
.text:00406F73                 cmp     eax, 0FFFFFFFFh
.text:00406F76                 jz      short loc_406F9D
.text:00406F78
.text:00406F78 loc_406F78:                             ; CODE XREF: sub_406F50+57↓j
.text:00406F78                                         ; sub_406F50+69↓j
.text:00406F78                 test    eax, eax
.text:00406F7A                 mov     ebx, eax
.text:00406F7C                 jnz     short loc_406F91
.text:00406F7E
.text:00406F7E loc_406F7E:                             ; CODE XREF: sub_406F50+4B↓j
.text:00406F7E                 mov     [esp+8+var_8], offset sub_406EC0 ; void (__cdecl *)()
.text:00406F85                 call    sub_401040
.text:00406F8A
.text:00406F8A loc_406F8A:                             ; CODE XREF: sub_406F50+11↑j
.text:00406F8A                 mov     ebx, [ebp+var_4]
.text:00406F8D                 mov     esp, ebp
.text:00406F8F                 pop     ebp
.text:00406F90                 retn
.text:00406F91 ; ---------------------------------------------------------------------------
.text:00406F91
.text:00406F91 loc_406F91:                             ; CODE XREF: sub_406F50+2C↑j
.text:00406F91                                         ; sub_406F50+49↓j
.text:00406F91                 call    ds:dword_407290[ebx*4]
.text:00406F98                 dec     ebx
.text:00406F99                 jnz     short loc_406F91
.text:00406F9B                 jmp     short loc_406F7E
.text:00406F9D ; ---------------------------------------------------------------------------
.text:00406F9D
.text:00406F9D loc_406F9D:                             ; CODE XREF: sub_406F50+26↑j
.text:00406F9D                 mov     ecx, ds:dword_407294
.text:00406FA3                 xor     eax, eax
.text:00406FA5                 test    ecx, ecx
.text:00406FA7                 jz      short loc_406F78
.text:00406FA9                 mov     edx, offset dword_407290
.text:00406FAE                 mov     esi, esi
.text:00406FB0
.text:00406FB0 loc_406FB0:                             ; CODE XREF: sub_406F50+67↓j
.text:00406FB0                 inc     eax
.text:00406FB1                 mov     ebx, [edx+eax*4+4]
.text:00406FB5                 test    ebx, ebx
.text:00406FB7                 jnz     short loc_406FB0
.text:00406FB9                 jmp     short loc_406F78
.text:00406FB9 sub_406F50      endp
.text:00406FB9
.text:00406FB9 ; ---------------------------------------------------------------------------
.text:00406FBB                 align 10h
.text:00406FC0
.text:00406FC0 ; =============== S U B R O U T I N E =======================================
.text:00406FC0
.text:00406FC0 ; Attributes: info_from_lumina
.text:00406FC0
.text:00406FC0 ; void *__cdecl _alloca(size_t Size)
.text:00406FC0 __alloca        proc near               ; CODE XREF: sub_401AF0+13↑p
.text:00406FC0                 push    ecx
.text:00406FC1                 mov     ecx, esp
.text:00406FC3                 add     ecx, 8
.text:00406FC6
.text:00406FC6 loc_406FC6:                             ; CODE XREF: __alloca+1B↓j
.text:00406FC6                 cmp     eax, 1000h
.text:00406FCB                 jb      short loc_406FDD
.text:00406FCD                 sub     ecx, 1000h
.text:00406FD3                 or      dword ptr [ecx], 0
.text:00406FD6                 sub     eax, 1000h
.text:00406FDB                 jmp     short loc_406FC6
.text:00406FDD ; ---------------------------------------------------------------------------
.text:00406FDD
.text:00406FDD loc_406FDD:                             ; CODE XREF: __alloca+B↑j
.text:00406FDD                 sub     ecx, eax
.text:00406FDF                 or      dword ptr [ecx], 0
.text:00406FE2                 mov     eax, esp
.text:00406FE4                 mov     esp, ecx
.text:00406FE6                 mov     ecx, [eax]
.text:00406FE8                 mov     eax, [eax+4]
.text:00406FEB                 jmp     eax
.text:00406FEB __alloca        endp
.text:00406FEB
.text:00406FEB ; ---------------------------------------------------------------------------
.text:00406FED                 align 10h
.text:00406FF0                 jmp     ds:__set_app_type
.text:00406FF0 ; ---------------------------------------------------------------------------
.text:00406FF6                 align 10h
.text:00407000
.text:00407000 ; =============== S U B R O U T I N E =======================================
.text:00407000
.text:00407000 ; Attributes: thunk
.text:00407000
.text:00407000 ; void __cdecl cexit()
.text:00407000 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00407000                 jmp     ds:__imp__cexit
.text:00407000 _cexit          endp
.text:00407000
.text:00407000 ; ---------------------------------------------------------------------------
.text:00407006                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010 ; Attributes: thunk
.text:00407010
.text:00407010 ; char ***__cdecl _p__environ()
.text:00407010 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00407010                 jmp     ds:__imp___p__environ
.text:00407010 __p__environ    endp
.text:00407010
.text:00407010 ; ---------------------------------------------------------------------------
.text:00407016                 align 10h
.text:00407020
.text:00407020 ; =============== S U B R O U T I N E =======================================
.text:00407020
.text:00407020 ; Attributes: thunk
.text:00407020
.text:00407020 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00407020 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00407020                                         ; TopLevelExceptionFilter+88↑p ...
.text:00407020
.text:00407020 Signal          = dword ptr  4
.text:00407020 Function        = dword ptr  8
.text:00407020
.text:00407020                 jmp     ds:__imp_signal
.text:00407020 signal          endp
.text:00407020
.text:00407020 ; ---------------------------------------------------------------------------
.text:00407026                 align 10h
.text:00407030
.text:00407030 ; =============== S U B R O U T I N E =======================================
.text:00407030
.text:00407030 ; Attributes: thunk
.text:00407030
.text:00407030 ; int *__cdecl _p__fmode()
.text:00407030 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00407030                 jmp     ds:__imp___p__fmode
.text:00407030 __p__fmode      endp
.text:00407030
.text:00407030 ; ---------------------------------------------------------------------------
.text:00407036                 align 10h
.text:00407040
.text:00407040 ; =============== S U B R O U T I N E =======================================
.text:00407040
.text:00407040 ; Attributes: thunk
.text:00407040
.text:00407040 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00407040 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00407040                                         ; sub_401080+90↑p ...
.text:00407040
.text:00407040 FileHandle      = dword ptr  4
.text:00407040 Mode            = dword ptr  8
.text:00407040
.text:00407040                 jmp     ds:__imp__setmode
.text:00407040 _setmode        endp
.text:00407040
.text:00407040 ; ---------------------------------------------------------------------------
.text:00407046                 align 10h
.text:00407050
.text:00407050 ; =============== S U B R O U T I N E =======================================
.text:00407050
.text:00407050 ; Attributes: thunk
.text:00407050
.text:00407050 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00407050                 jmp     ds:__imp___getmainargs
.text:00407050 __getmainargs   endp
.text:00407050
.text:00407050 ; ---------------------------------------------------------------------------
.text:00407056                 align 10h
.text:00407060
.text:00407060 ; =============== S U B R O U T I N E =======================================
.text:00407060
.text:00407060 ; Attributes: thunk
.text:00407060
.text:00407060 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00407060 setlocale       proc near               ; CODE XREF: sub_401AF0+5A↑p
.text:00407060                                         ; sub_404A80+24↑p
.text:00407060
.text:00407060 Category        = dword ptr  4
.text:00407060 Locale          = dword ptr  8
.text:00407060
.text:00407060                 jmp     ds:__imp_setlocale
.text:00407060 setlocale       endp
.text:00407060
.text:00407060 ; ---------------------------------------------------------------------------
.text:00407066                 align 10h
.text:00407070
.text:00407070 ; =============== S U B R O U T I N E =======================================
.text:00407070
.text:00407070 ; Attributes: thunk
.text:00407070
.text:00407070 ; char *__cdecl getenv(const char *VarName)
.text:00407070 getenv          proc near               ; CODE XREF: sub_401AF0+24↑p
.text:00407070                                         ; sub_402ED0+B57↑p ...
.text:00407070
.text:00407070 VarName         = dword ptr  4
.text:00407070
.text:00407070                 jmp     ds:__imp_getenv
.text:00407070 getenv          endp
.text:00407070
.text:00407070 ; ---------------------------------------------------------------------------
.text:00407076                 align 10h
.text:00407080
.text:00407080 ; =============== S U B R O U T I N E =======================================
.text:00407080
.text:00407080 ; Attributes: thunk
.text:00407080
.text:00407080 ; void __cdecl free(void *Block)
.text:00407080 free            proc near               ; CODE XREF: sub_402410+1DA↑p
.text:00407080                                         ; sub_402410+1E6↑p ...
.text:00407080
.text:00407080 Block           = dword ptr  4
.text:00407080
.text:00407080                 jmp     ds:__imp_free
.text:00407080 free            endp
.text:00407080
.text:00407080 ; ---------------------------------------------------------------------------
.text:00407086                 align 10h
.text:00407090
.text:00407090 ; =============== S U B R O U T I N E =======================================
.text:00407090
.text:00407090 ; Attributes: thunk
.text:00407090
.text:00407090 ; int __cdecl fclose(FILE *Stream)
.text:00407090 fclose          proc near               ; CODE XREF: sub_402410+195↑p
.text:00407090                                         ; sub_402410+1CA↑p ...
.text:00407090
.text:00407090 Stream          = dword ptr  4
.text:00407090
.text:00407090                 jmp     ds:__imp_fclose
.text:00407090 fclose          endp
.text:00407090
.text:00407090 ; ---------------------------------------------------------------------------
.text:00407096                 align 10h
.text:004070A0
.text:004070A0 ; =============== S U B R O U T I N E =======================================
.text:004070A0
.text:004070A0 ; Attributes: thunk
.text:004070A0
.text:004070A0 ; int *__cdecl errno()
.text:004070A0 _errno          proc near               ; CODE XREF: sub_402410+202↑p
.text:004070A0                                         ; sub_402410+274↑p ...
.text:004070A0                 jmp     ds:__imp__errno
.text:004070A0 _errno          endp
.text:004070A0
.text:004070A0 ; ---------------------------------------------------------------------------
.text:004070A6                 align 10h
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0 ; Attributes: thunk
.text:004070B0
.text:004070B0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004070B0 fwrite          proc near               ; CODE XREF: sub_402410+17A↑p
.text:004070B0                                         ; sub_402410+413↑p ...
.text:004070B0
.text:004070B0 Buffer          = dword ptr  4
.text:004070B0 ElementSize     = dword ptr  8
.text:004070B0 ElementCount    = dword ptr  0Ch
.text:004070B0 Stream          = dword ptr  10h
.text:004070B0
.text:004070B0                 jmp     ds:__imp_fwrite
.text:004070B0 fwrite          endp
.text:004070B0
.text:004070B0 ; ---------------------------------------------------------------------------
.text:004070B6                 align 10h
.text:004070C0
.text:004070C0 ; =============== S U B R O U T I N E =======================================
.text:004070C0
.text:004070C0 ; Attributes: noreturn thunk
.text:004070C0
.text:004070C0 ; void __cdecl __noreturn exit(int Code)
.text:004070C0 exit            proc near               ; CODE XREF: sub_401AF0:loc_401CE3↑p
.text:004070C0                                         ; sub_402250+3B↑p ...
.text:004070C0
.text:004070C0 Code            = dword ptr  4
.text:004070C0
.text:004070C0                 jmp     ds:__imp_exit
.text:004070C0 exit            endp
.text:004070C0
.text:004070C0 ; ---------------------------------------------------------------------------
.text:004070C6                 align 10h
.text:004070D0
.text:004070D0 ; =============== S U B R O U T I N E =======================================
.text:004070D0
.text:004070D0 ; Attributes: thunk
.text:004070D0
.text:004070D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004070D0 fputs           proc near               ; CODE XREF: sub_401AF0+29E↑p
.text:004070D0                                         ; sub_401AF0+2C0↑p ...
.text:004070D0
.text:004070D0 Buffer          = dword ptr  4
.text:004070D0 Stream          = dword ptr  8
.text:004070D0
.text:004070D0                 jmp     ds:__imp_fputs
.text:004070D0 fputs           endp
.text:004070D0
.text:004070D0 ; ---------------------------------------------------------------------------
.text:004070D6                 align 10h
.text:004070E0
.text:004070E0 ; =============== S U B R O U T I N E =======================================
.text:004070E0
.text:004070E0 ; Attributes: thunk
.text:004070E0
.text:004070E0 ; int printf(const char *const Format, ...)
.text:004070E0 printf          proc near               ; CODE XREF: sub_401AF0+27C↑p
.text:004070E0                                         ; sub_401AF0+3A9↑p ...
.text:004070E0
.text:004070E0 Format          = dword ptr  4
.text:004070E0
.text:004070E0                 jmp     ds:__imp_printf
.text:004070E0 printf          endp
.text:004070E0
.text:004070E0 ; ---------------------------------------------------------------------------
.text:004070E6                 align 10h
.text:004070F0
.text:004070F0 ; =============== S U B R O U T I N E =======================================
.text:004070F0
.text:004070F0 ; Attributes: thunk
.text:004070F0
.text:004070F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004070F0 fprintf         proc near               ; CODE XREF: sub_401AF0+1E7↑p
.text:004070F0                                         ; sub_402250+33↑p ...
.text:004070F0
.text:004070F0 Stream          = dword ptr  4
.text:004070F0 Format          = dword ptr  8
.text:004070F0
.text:004070F0                 jmp     ds:__imp_fprintf
.text:004070F0 fprintf         endp
.text:004070F0
.text:004070F0 ; ---------------------------------------------------------------------------
.text:004070F6                 align 10h
.text:00407100
.text:00407100 ; =============== S U B R O U T I N E =======================================
.text:00407100
.text:00407100 ; Attributes: thunk
.text:00407100
.text:00407100 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00407100 fopen           proc near               ; CODE XREF: sub_402410+80D↑p
.text:00407100                                         ; sub_402410+858↑p
.text:00407100
.text:00407100 FileName        = dword ptr  4
.text:00407100 Mode            = dword ptr  8
.text:00407100
.text:00407100                 jmp     ds:__imp_fopen
.text:00407100 fopen           endp
.text:00407100
.text:00407100 ; ---------------------------------------------------------------------------
.text:00407106                 align 10h
.text:00407110
.text:00407110 ; =============== S U B R O U T I N E =======================================
.text:00407110
.text:00407110 ; Attributes: thunk
.text:00407110
.text:00407110 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00407110 _flsbuf         proc near               ; CODE XREF: sub_402410+4FB↑p
.text:00407110                                         ; .text:00403F89↑j ...
.text:00407110
.text:00407110 File            = dword ptr  8
.text:00407110
.text:00407110                 jmp     ds:__imp__flsbuf
.text:00407110 _flsbuf         endp
.text:00407110
.text:00407110 ; ---------------------------------------------------------------------------
.text:00407116                 align 10h
.text:00407120
.text:00407120 ; =============== S U B R O U T I N E =======================================
.text:00407120
.text:00407120 ; Attributes: thunk
.text:00407120
.text:00407120 ; size_t __cdecl strlen(const char *Str)
.text:00407120 strlen          proc near               ; CODE XREF: sub_402ED0+2A9↑p
.text:00407120                                         ; sub_402ED0+346↑p ...
.text:00407120
.text:00407120 Str             = dword ptr  4
.text:00407120
.text:00407120                 jmp     ds:__imp_strlen
.text:00407120 strlen          endp
.text:00407120
.text:00407120 ; ---------------------------------------------------------------------------
.text:00407126                 align 10h
.text:00407130
.text:00407130 ; =============== S U B R O U T I N E =======================================
.text:00407130
.text:00407130 ; Attributes: thunk
.text:00407130
.text:00407130 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00407130 strncmp         proc near               ; CODE XREF: sub_402ED0+23F↑p
.text:00407130                                         ; sub_402ED0+699↑p ...
.text:00407130
.text:00407130 Str1            = dword ptr  4
.text:00407130 Str2            = dword ptr  8
.text:00407130 MaxCount        = dword ptr  0Ch
.text:00407130
.text:00407130                 jmp     ds:__imp_strncmp
.text:00407130 strncmp         endp
.text:00407130
.text:00407130 ; ---------------------------------------------------------------------------
.text:00407136                 align 10h
.text:00407140
.text:00407140 ; =============== S U B R O U T I N E =======================================
.text:00407140
.text:00407140 ; Attributes: thunk
.text:00407140
.text:00407140 ; char *__cdecl strchr(const char *Str, int Val)
.text:00407140 strchr          proc near               ; CODE XREF: sub_402ED0+469↑p
.text:00407140                                         ; sub_402ED0+53A↑p ...
.text:00407140
.text:00407140 Str             = dword ptr  4
.text:00407140 Val             = dword ptr  8
.text:00407140
.text:00407140                 jmp     ds:__imp_strchr
.text:00407140 strchr          endp
.text:00407140
.text:00407140 ; ---------------------------------------------------------------------------
.text:00407146                 align 10h
.text:00407150
.text:00407150 ; =============== S U B R O U T I N E =======================================
.text:00407150
.text:00407150 ; Attributes: thunk
.text:00407150
.text:00407150 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00407150 vfprintf        proc near               ; CODE XREF: sub_404540+C1↑p
.text:00407150                                         ; sub_406BD0+49↑p ...
.text:00407150
.text:00407150 Stream          = dword ptr  4
.text:00407150 Format          = dword ptr  8
.text:00407150 ArgList         = dword ptr  0Ch
.text:00407150
.text:00407150                 jmp     ds:__imp_vfprintf
.text:00407150 vfprintf        endp
.text:00407150
.text:00407150 ; ---------------------------------------------------------------------------
.text:00407156                 align 10h
.text:00407160
.text:00407160 ; =============== S U B R O U T I N E =======================================
.text:00407160
.text:00407160 ; Attributes: noreturn thunk
.text:00407160
.text:00407160 ; void __cdecl __noreturn abort()
.text:00407160 abort           proc near               ; CODE XREF: sub_404540:loc_4045DC↑p
.text:00407160                                         ; sub_4065B0:loc_40676A↑p ...
.text:00407160                 jmp     ds:__imp_abort
.text:00407160 abort           endp
.text:00407160
.text:00407160 ; ---------------------------------------------------------------------------
.text:00407166                 align 10h
.text:00407170
.text:00407170 ; =============== S U B R O U T I N E =======================================
.text:00407170
.text:00407170 ; Attributes: thunk
.text:00407170
.text:00407170 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00407170 strtol          proc near               ; CODE XREF: sub_404760+43↑p
.text:00407170
.text:00407170 String          = dword ptr  4
.text:00407170 EndPtr          = dword ptr  8
.text:00407170 Radix           = dword ptr  0Ch
.text:00407170
.text:00407170                 jmp     ds:__imp_strtol
.text:00407170 strtol          endp
.text:00407170
.text:00407170 ; ---------------------------------------------------------------------------
.text:00407176                 align 10h
.text:00407180
.text:00407180 ; =============== S U B R O U T I N E =======================================
.text:00407180
.text:00407180 ; Attributes: thunk
.text:00407180
.text:00407180 ; int __cdecl filbuf(FILE *File)
.text:00407180 _filbuf         proc near               ; CODE XREF: sub_404AF0+B3↑p
.text:00407180
.text:00407180 File            = dword ptr  4
.text:00407180
.text:00407180                 jmp     ds:__imp__filbuf
.text:00407180 _filbuf         endp
.text:00407180
.text:00407180 ; ---------------------------------------------------------------------------
.text:00407186                 align 10h
.text:00407190
.text:00407190 ; =============== S U B R O U T I N E =======================================
.text:00407190
.text:00407190 ; Attributes: thunk
.text:00407190
.text:00407190 ; int __cdecl toupper(int C)
.text:00407190 toupper         proc near               ; CODE XREF: sub_404DA0+33↑p
.text:00407190                                         ; sub_404DA0+42↑p
.text:00407190
.text:00407190 C               = dword ptr  4
.text:00407190
.text:00407190                 jmp     ds:__imp_toupper
.text:00407190 toupper         endp
.text:00407190
.text:00407190 ; ---------------------------------------------------------------------------
.text:00407196                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0 ; Attributes: thunk
.text:004071A0
.text:004071A0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:004071A0 strtoul         proc near               ; CODE XREF: sub_404E70+94↑p
.text:004071A0
.text:004071A0 String          = dword ptr  4
.text:004071A0 EndPtr          = dword ptr  8
.text:004071A0 Radix           = dword ptr  0Ch
.text:004071A0
.text:004071A0                 jmp     ds:__imp_strtoul
.text:004071A0 strtoul         endp
.text:004071A0
.text:004071A0 ; ---------------------------------------------------------------------------
.text:004071A6                 align 10h
.text:004071B0
.text:004071B0 ; =============== S U B R O U T I N E =======================================
.text:004071B0
.text:004071B0 ; Attributes: noreturn thunk
.text:004071B0
.text:004071B0 _assert         proc near               ; CODE XREF: sub_404E70+553↑p
.text:004071B0                 jmp     ds:__imp__assert
.text:004071B0 _assert         endp
.text:004071B0
.text:004071B0 ; ---------------------------------------------------------------------------
.text:004071B6                 align 10h
.text:004071C0
.text:004071C0 ; =============== S U B R O U T I N E =======================================
.text:004071C0
.text:004071C0 ; Attributes: thunk
.text:004071C0
.text:004071C0 ; int __cdecl isctype(int C, int Type)
.text:004071C0 _isctype        proc near               ; CODE XREF: sub_404E70+5F↑p
.text:004071C0                                         ; sub_405470+610↑p
.text:004071C0
.text:004071C0 C               = dword ptr  4
.text:004071C0 Type            = dword ptr  8
.text:004071C0
.text:004071C0                 jmp     ds:__imp__isctype
.text:004071C0 _isctype        endp
.text:004071C0
.text:004071C0 ; ---------------------------------------------------------------------------
.text:004071C6                 align 10h
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0 ; Attributes: thunk
.text:004071D0
.text:004071D0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004071D0 iswctype        proc near               ; CODE XREF: sub_405470+78B↑p
.text:004071D0
.text:004071D0 C               = word ptr  4
.text:004071D0 Type            = word ptr  8
.text:004071D0
.text:004071D0                 jmp     ds:__imp_iswctype
.text:004071D0 iswctype        endp
.text:004071D0
.text:004071D0 ; ---------------------------------------------------------------------------
.text:004071D6                 align 10h
.text:004071E0
.text:004071E0 ; =============== S U B R O U T I N E =======================================
.text:004071E0
.text:004071E0 ; Attributes: thunk
.text:004071E0
.text:004071E0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004071E0 memcpy          proc near               ; CODE XREF: .text:00406968↑p
.text:004071E0                                         ; .text:004069B1↑p
.text:004071E0
.text:004071E0 Src             = dword ptr  8
.text:004071E0 Size            = dword ptr  0Ch
.text:004071E0
.text:004071E0                 jmp     ds:__imp_memcpy
.text:004071E0 memcpy          endp
.text:004071E0
.text:004071E0 ; ---------------------------------------------------------------------------
.text:004071E6                 align 10h
.text:004071F0
.text:004071F0 ; =============== S U B R O U T I N E =======================================
.text:004071F0
.text:004071F0 ; Attributes: thunk
.text:004071F0
.text:004071F0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004071F0 memset          proc near               ; CODE XREF: .text:004068E6↑p
.text:004071F0
.text:004071F0 Val             = dword ptr  8
.text:004071F0 Size            = dword ptr  0Ch
.text:004071F0
.text:004071F0                 jmp     ds:__imp_memset
.text:004071F0 memset          endp
.text:004071F0
.text:004071F0 ; ---------------------------------------------------------------------------
.text:004071F6                 align 10h
.text:00407200
.text:00407200 ; =============== S U B R O U T I N E =======================================
.text:00407200
.text:00407200 ; Attributes: thunk
.text:00407200
.text:00407200 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00407200 calloc          proc near               ; CODE XREF: .text:00406923↑p
.text:00407200
.text:00407200 Count           = dword ptr  4
.text:00407200 Size            = dword ptr  8
.text:00407200
.text:00407200                 jmp     ds:__imp_calloc
.text:00407200 calloc          endp
.text:00407200
.text:00407200 ; ---------------------------------------------------------------------------
.text:00407206                 align 10h
.text:00407210
.text:00407210 ; =============== S U B R O U T I N E =======================================
.text:00407210
.text:00407210 ; Attributes: thunk
.text:00407210
.text:00407210 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00407210 realloc         proc near               ; CODE XREF: .text:00406820↑p
.text:00407210                                         ; sub_406850+16↑p ...
.text:00407210
.text:00407210 Block           = dword ptr  4
.text:00407210 Size            = dword ptr  8
.text:00407210
.text:00407210                 jmp     ds:__imp_realloc
.text:00407210 realloc         endp
.text:00407210
.text:00407210 ; ---------------------------------------------------------------------------
.text:00407216                 align 10h
.text:00407220
.text:00407220 ; =============== S U B R O U T I N E =======================================
.text:00407220
.text:00407220 ; Attributes: thunk
.text:00407220
.text:00407220 ; void *__cdecl malloc(size_t Size)
.text:00407220 malloc          proc near               ; CODE XREF: sub_406780+24↑p
.text:00407220                                         ; sub_4067C0+E↑p ...
.text:00407220
.text:00407220 Size            = dword ptr  4
.text:00407220
.text:00407220                 jmp     ds:__imp_malloc
.text:00407220 malloc          endp
.text:00407220
.text:00407220 ; ---------------------------------------------------------------------------
.text:00407226                 align 10h
.text:00407230
.text:00407230 ; =============== S U B R O U T I N E =======================================
.text:00407230
.text:00407230 ; Attributes: thunk
.text:00407230
.text:00407230 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:00407230 strcoll         proc near               ; CODE XREF: sub_406A50+52↑p
.text:00407230
.text:00407230 String1         = dword ptr  4
.text:00407230 String2         = dword ptr  8
.text:00407230
.text:00407230                 jmp     ds:__imp_strcoll
.text:00407230 strcoll         endp
.text:00407230
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407236                 align 10h
.text:00407240
.text:00407240 ; =============== S U B R O U T I N E =======================================
.text:00407240
.text:00407240 ; Attributes: thunk
.text:00407240
.text:00407240 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00407240 strcmp          proc near               ; CODE XREF: sub_406CD4+180↑p
.text:00407240
.text:00407240 Str1            = dword ptr  4
.text:00407240 Str2            = dword ptr  8
.text:00407240
.text:00407240                 jmp     ds:__imp_strcmp
.text:00407240 strcmp          endp
.text:00407240
.text:00407240 ; ---------------------------------------------------------------------------
.text:00407246                 align 10h
.text:00407250
.text:00407250 ; =============== S U B R O U T I N E =======================================
.text:00407250
.text:00407250 ; Attributes: thunk
.text:00407250
.text:00407250 ; int __cdecl fflush(FILE *Stream)
.text:00407250 fflush          proc near               ; CODE XREF: sub_406BD0+19↑p
.text:00407250                                         ; sub_406BD0+81↑p ...
.text:00407250
.text:00407250 Stream          = dword ptr  4
.text:00407250
.text:00407250                 jmp     ds:__imp_fflush
.text:00407250 fflush          endp
.text:00407250
.text:00407250 ; ---------------------------------------------------------------------------
.text:00407256                 align 10h
.text:00407260
.text:00407260 ; =============== S U B R O U T I N E =======================================
.text:00407260
.text:00407260 ; Attributes: thunk
.text:00407260
.text:00407260 ; char *__cdecl strerror(int ErrorMessage)
.text:00407260 strerror        proc near               ; CODE XREF: sub_406BD0+A5↑p
.text:00407260                                         ; sub_406CD4+10F↑p
.text:00407260
.text:00407260 ErrorMessage    = dword ptr  4
.text:00407260
.text:00407260                 jmp     ds:__imp_strerror
.text:00407260 strerror        endp
.text:00407260
.text:00407260 ; ---------------------------------------------------------------------------
.text:00407266                 align 10h
.text:00407270
.text:00407270 ; =============== S U B R O U T I N E =======================================
.text:00407270
.text:00407270 ; Attributes: thunk
.text:00407270
.text:00407270 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00407270 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00407270
.text:00407270 lpTopLevelExceptionFilter= dword ptr  4
.text:00407270
.text:00407270                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00407270 SetUnhandledExceptionFilter endp
.text:00407270
.text:00407270 ; ---------------------------------------------------------------------------
.text:00407276                 align 10h
.text:00407280
.text:00407280 ; =============== S U B R O U T I N E =======================================
.text:00407280
.text:00407280 ; Attributes: noreturn thunk
.text:00407280
.text:00407280 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00407280 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00407280
.text:00407280 uExitCode       = dword ptr  4
.text:00407280
.text:00407280                 jmp     ds:__imp_ExitProcess
.text:00407280 ExitProcess     endp
.text:00407280
.text:00407280 ; ---------------------------------------------------------------------------
.text:00407286                 align 10h
.text:00407290 dword_407290    dd 0FFFFFFFFh           ; DATA XREF: .text:00406EF9↑r
.text:00407290                                         ; .text:loc_406F20↑r ...
.text:00407294 dword_407294    dd 0                    ; DATA XREF: .text:loc_406F2C↑r
.text:00407294                                         ; sub_406F50:loc_406F9D↑r
.text:00407298                 dd 0FFFFFFFFh
.text:0040729C dword_40729C    dd 59h dup(0)           ; DATA XREF: .data:off_408094↓o
.text:00407400                 dd 300h dup(?)
.text:00407400 _text           ends
.text:00407400
.data:00408000 ; Section 2. (virtual address 00008000)
.data:00408000 ; Virtual size                  : 000000B0 (    176.)
.data:00408000 ; Section size in file          : 00000200 (    512.)
.data:00408000 ; Offset to raw data for section: 00006800
.data:00408000 ; Flags C0000040: Data Readable Writable
.data:00408000 ; Alignment     : default
.data:00408000 ; ===========================================================================
.data:00408000
.data:00408000 ; Segment type: Pure data
.data:00408000 ; Segment permissions: Read/Write
.data:00408000 _data           segment para public 'DATA' use32
.data:00408000                 assume cs:_data
.data:00408000                 ;org 408000h
.data:00408000 dword_408000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00408000                                         ; sub_401080+CC↑r
.data:00408004 dword_408004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00408004                                         ; sub_401080+D4↑r
.data:00408008                 align 10h
.data:00408010 dword_408010    dd 1                    ; DATA XREF: sub_401AF0:loc_402180↑r
.data:00408010                                         ; sub_401AF0+6AA↑w ...
.data:00408014 dword_408014    dd 1                    ; DATA XREF: sub_403A60+11↑r
.data:00408014                                         ; .text:00403B01↑r
.data:00408018 dword_408018    dd 3Fh                  ; DATA XREF: sub_403A60+7D↑w
.data:00408018                                         ; .text:00403B6D↑w
.data:0040801C                 align 10h
.data:00408020 ; int off_408020
.data:00408020 off_408020      dd offset sub_404230    ; DATA XREF: sub_401AF0+180↑r
.data:00408024                 align 10h
.data:00408030 ; char *Buffer
.data:00408030 Buffer          dd offset aCopyrightC2005
.data:00408030                                         ; DATA XREF: sub_404540+DC↑r
.data:00408030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00408034                 align 10h
.data:00408040 dword_408040    dd 1                    ; DATA XREF: sub_4065B0+22↑r
.data:00408040                                         ; sub_4065B0+65↑r ...
.data:00408044 dword_408044    dd 100h                 ; DATA XREF: sub_4065B0+3F↑o
.data:00408044                                         ; sub_4065B0+1A2↑r ...
.data:00408048 off_408048      dd offset unk_4090E0    ; DATA XREF: sub_4065B0+1AA↑r
.data:0040804C ; void *off_40804C
.data:0040804C off_40804C      dd offset dword_408044  ; DATA XREF: sub_4065B0+39↑r
.data:0040804C                                         ; sub_4065B0+60↑w ...
.data:00408050 ; int Code
.data:00408050 Code            dd 1                    ; DATA XREF: sub_404990+6D↑r
.data:00408050                                         ; sub_404990+9A↑r ...
.data:00408054                 align 10h
.data:00408060 dword_408060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00408064                 align 10h
.data:00408070 ; int Mode
.data:00408070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00408070                                         ; sub_401080+80↑r ...
.data:00408074                 align 10h
.data:00408080 dword_408080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00408080                                         ; sub_401080+BA↑r
.data:00408084                 align 10h
.data:00408090 dword_408090    dd 0                    ; DATA XREF: sub_406F50+9↑r
.data:00408090                                         ; sub_406F50+1D↑w
.data:00408094 off_408094      dd offset dword_40729C  ; DATA XREF: sub_406EC0+6↑r
.data:00408094                                         ; sub_406EC0+17↑r ...
.data:00408098                 align 1000h
.data:00408098 _data           ends
.data:00408098
.bss:00409000 ; Section 3. (virtual address 00009000)
.bss:00409000 ; Virtual size                  : 000002D0 (    720.)
.bss:00409000 ; Section size in file          : 00000000 (      0.)
.bss:00409000 ; Offset to raw data for section: 00000000
.bss:00409000 ; Flags C0000080: Bss Readable Writable
.bss:00409000 ; Alignment     : default
.bss:00409000 ; ===========================================================================
.bss:00409000
.bss:00409000 ; Segment type: Uninitialized
.bss:00409000 ; Segment permissions: Read/Write
.bss:00409000 _bss            segment para public 'BSS' use32
.bss:00409000                 assume cs:_bss
.bss:00409000                 ;org 409000h
.bss:00409000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00409000 byte_409000     db ?                    ; DATA XREF: sub_401AF0+8D↑w
.bss:00409000                                         ; sub_402410:loc_40293A↑r ...
.bss:00409001                 align 10h
.bss:00409010 ; char dword_409010[]
.bss:00409010 dword_409010    dd ?                    ; DATA XREF: sub_401AF0+BF↑w
.bss:00409010                                         ; sub_401AF0:loc_401CE8↑r ...
.bss:00409014                 align 10h
.bss:00409020 dword_409020    dd ?                    ; DATA XREF: sub_401AF0+A9↑w
.bss:00409020                                         ; sub_401AF0:loc_401F95↑w ...
.bss:00409024                 align 10h
.bss:00409030 dword_409030    dd ?                    ; DATA XREF: sub_401AF0+B4↑w
.bss:00409030                                         ; sub_401AF0+62A↑w ...
.bss:00409034                 align 10h
.bss:00409040 dword_409040    dd ?                    ; DATA XREF: sub_401AF0+D3↑w
.bss:00409040                                         ; sub_401AF0+685↑w ...
.bss:00409044                 align 10h
.bss:00409050 byte_409050     db ?                    ; DATA XREF: sub_401AF0+C5↑w
.bss:00409050                                         ; sub_401AF0+160↑w ...
.bss:00409051                 align 10h
.bss:00409060 byte_409060     db ?                    ; DATA XREF: sub_401AF0+9E↑w
.bss:00409060                                         ; sub_401AF0:loc_40215B↑w ...
.bss:00409061                 align 10h
.bss:00409070 byte_409070     db ?                    ; DATA XREF: sub_401AF0+CC↑w
.bss:00409070                                         ; sub_401AF0+16D↑w ...
.bss:00409071                 align 10h
.bss:00409080 byte_409080     db ?                    ; DATA XREF: sub_401AF0:loc_402167↑w
.bss:00409080                                         ; sub_402410:loc_40276E↑r ...
.bss:00409081                 align 10h
.bss:00409090 dword_409090    dd ?                    ; DATA XREF: sub_401AF0+DB↑w
.bss:00409090                                         ; sub_401AF0+1B5↑w ...
.bss:00409094                 align 10h
.bss:004090A0 dword_4090A0    dd ?                    ; DATA XREF: sub_403A60+9↑o
.bss:004090A0                                         ; sub_403A60+17↑w ...
.bss:004090A4 dword_4090A4    dd ?                    ; DATA XREF: sub_403A60+21↑w
.bss:004090A4                                         ; .text:00403B19↑w
.bss:004090A8 dword_4090A8    dd ?                    ; DATA XREF: sub_403A60+77↑r
.bss:004090A8                                         ; .text:00403B67↑r
.bss:004090AC dword_4090AC    dd ?                    ; DATA XREF: sub_403A60+6B↑r
.bss:004090AC                                         ; .text:00403B5B↑r
.bss:004090B0                 db    ? ;
.bss:004090B1                 db    ? ;
.bss:004090B2                 db    ? ;
.bss:004090B3                 db    ? ;
.bss:004090B4                 db    ? ;
.bss:004090B5                 db    ? ;
.bss:004090B6                 db    ? ;
.bss:004090B7                 db    ? ;
.bss:004090B8                 db    ? ;
.bss:004090B9                 db    ? ;
.bss:004090BA                 db    ? ;
.bss:004090BB                 db    ? ;
.bss:004090BC                 db    ? ;
.bss:004090BD                 db    ? ;
.bss:004090BE                 db    ? ;
.bss:004090BF                 db    ? ;
.bss:004090C0                 db    ? ;
.bss:004090C1                 db    ? ;
.bss:004090C2                 db    ? ;
.bss:004090C3                 db    ? ;
.bss:004090C4                 db    ? ;
.bss:004090C5                 db    ? ;
.bss:004090C6                 db    ? ;
.bss:004090C7                 db    ? ;
.bss:004090C8                 db    ? ;
.bss:004090C9                 db    ? ;
.bss:004090CA                 db    ? ;
.bss:004090CB                 db    ? ;
.bss:004090CC                 db    ? ;
.bss:004090CD                 db    ? ;
.bss:004090CE                 db    ? ;
.bss:004090CF                 db    ? ;
.bss:004090D0 ; char *dword_4090D0
.bss:004090D0 dword_4090D0    dd ?                    ; DATA XREF: .text:00404964↑w
.bss:004090D0                                         ; sub_404990+58↑r
.bss:004090D4                 align 10h
.bss:004090E0 unk_4090E0      db    ? ;               ; DATA XREF: sub_4065B0+100↑o
.bss:004090E0                                         ; .data:off_408048↑o
.bss:004090E1                 db    ? ;
.bss:004090E2                 db    ? ;
.bss:004090E3                 db    ? ;
.bss:004090E4                 db    ? ;
.bss:004090E5                 db    ? ;
.bss:004090E6                 db    ? ;
.bss:004090E7                 db    ? ;
.bss:004090E8                 db    ? ;
.bss:004090E9                 db    ? ;
.bss:004090EA                 db    ? ;
.bss:004090EB                 db    ? ;
.bss:004090EC                 db    ? ;
.bss:004090ED                 db    ? ;
.bss:004090EE                 db    ? ;
.bss:004090EF                 db    ? ;
.bss:004090F0                 db    ? ;
.bss:004090F1                 db    ? ;
.bss:004090F2                 db    ? ;
.bss:004090F3                 db    ? ;
.bss:004090F4                 db    ? ;
.bss:004090F5                 db    ? ;
.bss:004090F6                 db    ? ;
.bss:004090F7                 db    ? ;
.bss:004090F8                 db    ? ;
.bss:004090F9                 db    ? ;
.bss:004090FA                 db    ? ;
.bss:004090FB                 db    ? ;
.bss:004090FC                 db    ? ;
.bss:004090FD                 db    ? ;
.bss:004090FE                 db    ? ;
.bss:004090FF                 db    ? ;
.bss:00409100                 db    ? ;
.bss:00409101                 db    ? ;
.bss:00409102                 db    ? ;
.bss:00409103                 db    ? ;
.bss:00409104                 db    ? ;
.bss:00409105                 db    ? ;
.bss:00409106                 db    ? ;
.bss:00409107                 db    ? ;
.bss:00409108                 db    ? ;
.bss:00409109                 db    ? ;
.bss:0040910A                 db    ? ;
.bss:0040910B                 db    ? ;
.bss:0040910C                 db    ? ;
.bss:0040910D                 db    ? ;
.bss:0040910E                 db    ? ;
.bss:0040910F                 db    ? ;
.bss:00409110                 db    ? ;
.bss:00409111                 db    ? ;
.bss:00409112                 db    ? ;
.bss:00409113                 db    ? ;
.bss:00409114                 db    ? ;
.bss:00409115                 db    ? ;
.bss:00409116                 db    ? ;
.bss:00409117                 db    ? ;
.bss:00409118                 db    ? ;
.bss:00409119                 db    ? ;
.bss:0040911A                 db    ? ;
.bss:0040911B                 db    ? ;
.bss:0040911C                 db    ? ;
.bss:0040911D                 db    ? ;
.bss:0040911E                 db    ? ;
.bss:0040911F                 db    ? ;
.bss:00409120                 db    ? ;
.bss:00409121                 db    ? ;
.bss:00409122                 db    ? ;
.bss:00409123                 db    ? ;
.bss:00409124                 db    ? ;
.bss:00409125                 db    ? ;
.bss:00409126                 db    ? ;
.bss:00409127                 db    ? ;
.bss:00409128                 db    ? ;
.bss:00409129                 db    ? ;
.bss:0040912A                 db    ? ;
.bss:0040912B                 db    ? ;
.bss:0040912C                 db    ? ;
.bss:0040912D                 db    ? ;
.bss:0040912E                 db    ? ;
.bss:0040912F                 db    ? ;
.bss:00409130                 db    ? ;
.bss:00409131                 db    ? ;
.bss:00409132                 db    ? ;
.bss:00409133                 db    ? ;
.bss:00409134                 db    ? ;
.bss:00409135                 db    ? ;
.bss:00409136                 db    ? ;
.bss:00409137                 db    ? ;
.bss:00409138                 db    ? ;
.bss:00409139                 db    ? ;
.bss:0040913A                 db    ? ;
.bss:0040913B                 db    ? ;
.bss:0040913C                 db    ? ;
.bss:0040913D                 db    ? ;
.bss:0040913E                 db    ? ;
.bss:0040913F                 db    ? ;
.bss:00409140                 db    ? ;
.bss:00409141                 db    ? ;
.bss:00409142                 db    ? ;
.bss:00409143                 db    ? ;
.bss:00409144                 db    ? ;
.bss:00409145                 db    ? ;
.bss:00409146                 db    ? ;
.bss:00409147                 db    ? ;
.bss:00409148                 db    ? ;
.bss:00409149                 db    ? ;
.bss:0040914A                 db    ? ;
.bss:0040914B                 db    ? ;
.bss:0040914C                 db    ? ;
.bss:0040914D                 db    ? ;
.bss:0040914E                 db    ? ;
.bss:0040914F                 db    ? ;
.bss:00409150                 db    ? ;
.bss:00409151                 db    ? ;
.bss:00409152                 db    ? ;
.bss:00409153                 db    ? ;
.bss:00409154                 db    ? ;
.bss:00409155                 db    ? ;
.bss:00409156                 db    ? ;
.bss:00409157                 db    ? ;
.bss:00409158                 db    ? ;
.bss:00409159                 db    ? ;
.bss:0040915A                 db    ? ;
.bss:0040915B                 db    ? ;
.bss:0040915C                 db    ? ;
.bss:0040915D                 db    ? ;
.bss:0040915E                 db    ? ;
.bss:0040915F                 db    ? ;
.bss:00409160                 db    ? ;
.bss:00409161                 db    ? ;
.bss:00409162                 db    ? ;
.bss:00409163                 db    ? ;
.bss:00409164                 db    ? ;
.bss:00409165                 db    ? ;
.bss:00409166                 db    ? ;
.bss:00409167                 db    ? ;
.bss:00409168                 db    ? ;
.bss:00409169                 db    ? ;
.bss:0040916A                 db    ? ;
.bss:0040916B                 db    ? ;
.bss:0040916C                 db    ? ;
.bss:0040916D                 db    ? ;
.bss:0040916E                 db    ? ;
.bss:0040916F                 db    ? ;
.bss:00409170                 db    ? ;
.bss:00409171                 db    ? ;
.bss:00409172                 db    ? ;
.bss:00409173                 db    ? ;
.bss:00409174                 db    ? ;
.bss:00409175                 db    ? ;
.bss:00409176                 db    ? ;
.bss:00409177                 db    ? ;
.bss:00409178                 db    ? ;
.bss:00409179                 db    ? ;
.bss:0040917A                 db    ? ;
.bss:0040917B                 db    ? ;
.bss:0040917C                 db    ? ;
.bss:0040917D                 db    ? ;
.bss:0040917E                 db    ? ;
.bss:0040917F                 db    ? ;
.bss:00409180                 db    ? ;
.bss:00409181                 db    ? ;
.bss:00409182                 db    ? ;
.bss:00409183                 db    ? ;
.bss:00409184                 db    ? ;
.bss:00409185                 db    ? ;
.bss:00409186                 db    ? ;
.bss:00409187                 db    ? ;
.bss:00409188                 db    ? ;
.bss:00409189                 db    ? ;
.bss:0040918A                 db    ? ;
.bss:0040918B                 db    ? ;
.bss:0040918C                 db    ? ;
.bss:0040918D                 db    ? ;
.bss:0040918E                 db    ? ;
.bss:0040918F                 db    ? ;
.bss:00409190                 db    ? ;
.bss:00409191                 db    ? ;
.bss:00409192                 db    ? ;
.bss:00409193                 db    ? ;
.bss:00409194                 db    ? ;
.bss:00409195                 db    ? ;
.bss:00409196                 db    ? ;
.bss:00409197                 db    ? ;
.bss:00409198                 db    ? ;
.bss:00409199                 db    ? ;
.bss:0040919A                 db    ? ;
.bss:0040919B                 db    ? ;
.bss:0040919C                 db    ? ;
.bss:0040919D                 db    ? ;
.bss:0040919E                 db    ? ;
.bss:0040919F                 db    ? ;
.bss:004091A0                 db    ? ;
.bss:004091A1                 db    ? ;
.bss:004091A2                 db    ? ;
.bss:004091A3                 db    ? ;
.bss:004091A4                 db    ? ;
.bss:004091A5                 db    ? ;
.bss:004091A6                 db    ? ;
.bss:004091A7                 db    ? ;
.bss:004091A8                 db    ? ;
.bss:004091A9                 db    ? ;
.bss:004091AA                 db    ? ;
.bss:004091AB                 db    ? ;
.bss:004091AC                 db    ? ;
.bss:004091AD                 db    ? ;
.bss:004091AE                 db    ? ;
.bss:004091AF                 db    ? ;
.bss:004091B0                 db    ? ;
.bss:004091B1                 db    ? ;
.bss:004091B2                 db    ? ;
.bss:004091B3                 db    ? ;
.bss:004091B4                 db    ? ;
.bss:004091B5                 db    ? ;
.bss:004091B6                 db    ? ;
.bss:004091B7                 db    ? ;
.bss:004091B8                 db    ? ;
.bss:004091B9                 db    ? ;
.bss:004091BA                 db    ? ;
.bss:004091BB                 db    ? ;
.bss:004091BC                 db    ? ;
.bss:004091BD                 db    ? ;
.bss:004091BE                 db    ? ;
.bss:004091BF                 db    ? ;
.bss:004091C0                 db    ? ;
.bss:004091C1                 db    ? ;
.bss:004091C2                 db    ? ;
.bss:004091C3                 db    ? ;
.bss:004091C4                 db    ? ;
.bss:004091C5                 db    ? ;
.bss:004091C6                 db    ? ;
.bss:004091C7                 db    ? ;
.bss:004091C8                 db    ? ;
.bss:004091C9                 db    ? ;
.bss:004091CA                 db    ? ;
.bss:004091CB                 db    ? ;
.bss:004091CC                 db    ? ;
.bss:004091CD                 db    ? ;
.bss:004091CE                 db    ? ;
.bss:004091CF                 db    ? ;
.bss:004091D0                 db    ? ;
.bss:004091D1                 db    ? ;
.bss:004091D2                 db    ? ;
.bss:004091D3                 db    ? ;
.bss:004091D4                 db    ? ;
.bss:004091D5                 db    ? ;
.bss:004091D6                 db    ? ;
.bss:004091D7                 db    ? ;
.bss:004091D8                 db    ? ;
.bss:004091D9                 db    ? ;
.bss:004091DA                 db    ? ;
.bss:004091DB                 db    ? ;
.bss:004091DC                 db    ? ;
.bss:004091DD                 db    ? ;
.bss:004091DE                 db    ? ;
.bss:004091DF                 db    ? ;
.bss:004091E0 dword_4091E0    dd ?                    ; DATA XREF: .text:loc_405F41↑o
.bss:004091E0                                         ; .text:loc_405F60↑o ...
.bss:004091E4 dword_4091E4    dd ?                    ; DATA XREF: .text:loc_405FE0↑o
.bss:004091E4                                         ; .text:00406468↑r ...
.bss:004091E8 dword_4091E8    dd ?                    ; DATA XREF: .text:00406462↑r
.bss:004091E8                                         ; sub_406510+2C↑r
.bss:004091EC dword_4091EC    dd ?                    ; DATA XREF: .text:00406456↑r
.bss:004091EC                                         ; sub_406510+22↑r
.bss:004091F0 dword_4091F0    dd ?                    ; DATA XREF: .text:00406472↑r
.bss:004091F0                                         ; sub_406510+36↑r
.bss:004091F4 dword_4091F4    dd ?                    ; DATA XREF: .text:00406482↑r
.bss:004091F4                                         ; sub_406510+4E↑r
.bss:004091F8 dword_4091F8    dd ?                    ; DATA XREF: .text:0040649F↑r
.bss:004091F8                                         ; sub_406510+62↑r
.bss:004091FC dword_4091FC    dd ?                    ; DATA XREF: .text:00406495↑r
.bss:004091FC                                         ; sub_406510+70↑r
.bss:00409200 dword_409200    dd ?                    ; DATA XREF: .text:00406478↑r
.bss:00409200                                         ; sub_406510+7A↑r
.bss:00409204                 align 10h
.bss:00409210 ; char *Str1
.bss:00409210 Str1            dd ?                    ; DATA XREF: sub_406CD4:loc_406D0D↑w
.bss:00409210                                         ; sub_406CD4:loc_406E40↑r
.bss:00409214                 align 10h
.bss:00409220 dword_409220    dd ?                    ; DATA XREF: sub_406CD4+2D↑r
.bss:00409220                                         ; sub_406CD4+3F↑w
.bss:00409224                 align 10h
.bss:00409230 dword_409230    dd ?                    ; DATA XREF: sub_401AF0+41↑w
.bss:00409230                                         ; sub_401AF0+1D3↑r ...
.bss:00409234                 db    ? ;
.bss:00409235                 db    ? ;
.bss:00409236                 db    ? ;
.bss:00409237                 db    ? ;
.bss:00409238                 db    ? ;
.bss:00409239                 db    ? ;
.bss:0040923A                 db    ? ;
.bss:0040923B                 db    ? ;
.bss:0040923C                 db    ? ;
.bss:0040923D                 db    ? ;
.bss:0040923E                 db    ? ;
.bss:0040923F                 db    ? ;
.bss:00409240                 db    ? ;
.bss:00409241                 db    ? ;
.bss:00409242                 db    ? ;
.bss:00409243                 db    ? ;
.bss:00409244                 db    ? ;
.bss:00409245                 db    ? ;
.bss:00409246                 db    ? ;
.bss:00409247                 db    ? ;
.bss:00409248                 db    ? ;
.bss:00409249                 db    ? ;
.bss:0040924A                 db    ? ;
.bss:0040924B                 db    ? ;
.bss:0040924C                 db    ? ;
.bss:0040924D                 db    ? ;
.bss:0040924E                 db    ? ;
.bss:0040924F                 db    ? ;
.bss:00409250 ; char *dword_409250
.bss:00409250 dword_409250    dd ?                    ; DATA XREF: sub_401AF0+167↑r
.bss:00409250                                         ; sub_401AF0:loc_401EF0↑r ...
.bss:00409254                 align 10h
.bss:00409260 dword_409260    dd ?                    ; CODE XREF: sub_406CD4+63↑p
.bss:00409260                                         ; DATA XREF: sub_406BD0+1E↑r ...
.bss:00409264                 align 10h
.bss:00409270 dword_409270    dd ?                    ; DATA XREF: sub_406BD0+4E↑w
.bss:00409270                                         ; sub_406CD4+AB↑w
.bss:00409274                 db    ? ;
.bss:00409275                 db    ? ;
.bss:00409276                 db    ? ;
.bss:00409277                 db    ? ;
.bss:00409278                 db    ? ;
.bss:00409279                 db    ? ;
.bss:0040927A                 db    ? ;
.bss:0040927B                 db    ? ;
.bss:0040927C                 db    ? ;
.bss:0040927D                 db    ? ;
.bss:0040927E                 db    ? ;
.bss:0040927F                 db    ? ;
.bss:00409280                 db    ? ;
.bss:00409281                 db    ? ;
.bss:00409282                 db    ? ;
.bss:00409283                 db    ? ;
.bss:00409284                 db    ? ;
.bss:00409285                 db    ? ;
.bss:00409286                 db    ? ;
.bss:00409287                 db    ? ;
.bss:00409288                 db    ? ;
.bss:00409289                 db    ? ;
.bss:0040928A                 db    ? ;
.bss:0040928B                 db    ? ;
.bss:0040928C                 db    ? ;
.bss:0040928D                 db    ? ;
.bss:0040928E                 db    ? ;
.bss:0040928F                 db    ? ;
.bss:00409290                 db    ? ;
.bss:00409291                 db    ? ;
.bss:00409292                 db    ? ;
.bss:00409293                 db    ? ;
.bss:00409294                 db    ? ;
.bss:00409295                 db    ? ;
.bss:00409296                 db    ? ;
.bss:00409297                 db    ? ;
.bss:00409298                 db    ? ;
.bss:00409299                 db    ? ;
.bss:0040929A                 db    ? ;
.bss:0040929B                 db    ? ;
.bss:0040929C                 db    ? ;
.bss:0040929D                 db    ? ;
.bss:0040929E                 db    ? ;
.bss:0040929F                 db    ? ;
.bss:004092A0 dword_4092A0    dd ?                    ; DATA XREF: sub_406CD4+13↑r
.bss:004092A4                 align 1000h
.bss:004092A4 _bss            ends
.bss:004092A4
.idata:0040A000 ; Section 4. (virtual address 0000A000)
.idata:0040A000 ; Virtual size                  : 000005E0 (   1504.)
.idata:0040A000 ; Section size in file          : 00000600 (   1536.)
.idata:0040A000 ; Offset to raw data for section: 00006A00
.idata:0040A000 ; Flags C0000040: Data Readable Writable
.idata:0040A000 ; Alignment     : default
.idata:0040A000 ; ===========================================================================
.idata:0040A000
.idata:0040A000 ; Segment type: Externs
.idata:0040A000 ; _idata
.idata:0040A000
.idata:0040A001
.idata:0040A154 ;
.idata:0040A154 ; Imports from libintl3.dll
.idata:0040A154 ;
.idata:0040A154                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040A154                                         ; CODE XREF: sub_401AF0+6E↑p
.idata:0040A154                                         ; DATA XREF: sub_401AF0+6E↑r ...
.idata:0040A158                 extrn libintl_gettext:dword
.idata:0040A158                                         ; CODE XREF: sub_401AF0+1C7↑p
.idata:0040A158                                         ; sub_401AF0+21D↑p ...
.idata:0040A15C                 extrn libintl_textdomain:dword
.idata:0040A15C                                         ; CODE XREF: sub_401AF0+7B↑p
.idata:0040A15C                                         ; DATA XREF: sub_401AF0+7B↑r ...
.idata:0040A160
.idata:0040A168 ;
.idata:0040A168 ; Imports from KERNEL32.dll
.idata:0040A168 ;
.idata:0040A168 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040A168                 extrn __imp_ExitProcess:dword
.idata:0040A168                                         ; DATA XREF: ExitProcess↑r
.idata:0040A16C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040A16C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040A16C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040A170
.idata:0040A178 ;
.idata:0040A178 ; Imports from MSVCP60.DLL
.idata:0040A178 ;
.idata:0040A178 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040A178                 extrn __imp_mbrtowc:dword
.idata:0040A178                                         ; DATA XREF: mbrtowc↑r
.idata:0040A17C
.idata:0040A184 ;
.idata:0040A184 ; Imports from msvcrt.dll
.idata:0040A184 ;
.idata:0040A184                 extrn __imp___getmainargs:dword
.idata:0040A184                                         ; DATA XREF: __getmainargs↑r
.idata:0040A188 ; int _mb_cur_max
.idata:0040A188                 extrn __mb_cur_max:dword
.idata:0040A188                                         ; DATA XREF: sub_404E70+45↑r
.idata:0040A188                                         ; sub_405470+7↑r ...
.idata:0040A18C ; char ***(__cdecl *__p__environ)()
.idata:0040A18C                 extrn __imp___p__environ:dword
.idata:0040A18C                                         ; DATA XREF: __p__environ↑r
.idata:0040A190 ; int *(__cdecl *__p__fmode)()
.idata:0040A190                 extrn __imp___p__fmode:dword
.idata:0040A190                                         ; DATA XREF: __p__fmode↑r
.idata:0040A194 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040A194                 extrn __set_app_type:dword
.idata:0040A194                                         ; CODE XREF: start+D↑p
.idata:0040A194                                         ; .text:0040102D↑p
.idata:0040A194                                         ; DATA XREF: ...
.idata:0040A198                 extrn __imp__assert:dword
.idata:0040A198                                         ; DATA XREF: _assert↑r
.idata:0040A19C ; void (__cdecl *_cexit)()
.idata:0040A19C                 extrn __imp__cexit:dword
.idata:0040A19C                                         ; DATA XREF: _cexit↑r
.idata:0040A1A0 ; int *(__cdecl *_errno)()
.idata:0040A1A0                 extrn __imp__errno:dword
.idata:0040A1A0                                         ; DATA XREF: _errno↑r
.idata:0040A1A4 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040A1A4                 extrn __imp__filbuf:dword
.idata:0040A1A4                                         ; DATA XREF: _filbuf↑r
.idata:0040A1A8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040A1A8                 extrn __imp__flsbuf:dword
.idata:0040A1A8                                         ; DATA XREF: _flsbuf↑r
.idata:0040A1AC ; FILE iob[]
.idata:0040A1AC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040A1AC                                         ; sub_401080+75↑r ...
.idata:0040A1B0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040A1B0                 extrn __imp__isctype:dword
.idata:0040A1B0                                         ; DATA XREF: _isctype↑r
.idata:0040A1B4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040A1B4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040A1B4                                         ; DATA XREF: .text:0040106C↑r
.idata:0040A1B8 ; const unsigned __int16 *pctype
.idata:0040A1B8                 extrn _pctype:dword     ; DATA XREF: sub_404E70:loc_405390↑r
.idata:0040A1B8                                         ; sub_405470:loc_405B64↑r
.idata:0040A1BC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040A1BC                 extrn __imp__setmode:dword
.idata:0040A1BC                                         ; DATA XREF: _setmode↑r
.idata:0040A1C0 ; void (__cdecl __noreturn *abort)()
.idata:0040A1C0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040A1C4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040A1C4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040A1C4                                         ; DATA XREF: sub_401040+C↑r
.idata:0040A1C8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040A1C8                 extrn __imp_calloc:dword
.idata:0040A1C8                                         ; DATA XREF: calloc↑r
.idata:0040A1CC ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040A1CC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040A1D0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040A1D0                 extrn __imp_fclose:dword
.idata:0040A1D0                                         ; DATA XREF: fclose↑r
.idata:0040A1D4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040A1D4                 extrn __imp_fflush:dword
.idata:0040A1D4                                         ; DATA XREF: fflush↑r
.idata:0040A1D8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0040A1D8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0040A1DC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040A1DC                 extrn __imp_fprintf:dword
.idata:0040A1DC                                         ; DATA XREF: fprintf↑r
.idata:0040A1E0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040A1E0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040A1E4 ; void (__cdecl *free)(void *Block)
.idata:0040A1E4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040A1E8 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040A1E8                 extrn __imp_fwrite:dword
.idata:0040A1E8                                         ; DATA XREF: fwrite↑r
.idata:0040A1EC ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040A1EC                 extrn __imp_getenv:dword
.idata:0040A1EC                                         ; DATA XREF: getenv↑r
.idata:0040A1F0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040A1F0                 extrn __imp_iswctype:dword
.idata:0040A1F0                                         ; DATA XREF: iswctype↑r
.idata:0040A1F4 ; void *(__cdecl *malloc)(size_t Size)
.idata:0040A1F4                 extrn __imp_malloc:dword
.idata:0040A1F4                                         ; DATA XREF: malloc↑r
.idata:0040A1F8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040A1F8                 extrn __imp_memcpy:dword
.idata:0040A1F8                                         ; DATA XREF: memcpy↑r
.idata:0040A1FC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040A1FC                 extrn __imp_memset:dword
.idata:0040A1FC                                         ; DATA XREF: memset↑r
.idata:0040A200 ; int (*printf)(const char *const Format, ...)
.idata:0040A200                 extrn __imp_printf:dword
.idata:0040A200                                         ; DATA XREF: printf↑r
.idata:0040A204 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040A204                 extrn __imp_realloc:dword
.idata:0040A204                                         ; DATA XREF: realloc↑r
.idata:0040A208 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040A208                 extrn __imp_setlocale:dword
.idata:0040A208                                         ; DATA XREF: setlocale↑r
.idata:0040A20C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040A20C                 extrn __imp_signal:dword
.idata:0040A20C                                         ; DATA XREF: signal↑r
.idata:0040A210 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040A210                 extrn __imp_strchr:dword
.idata:0040A210                                         ; DATA XREF: strchr↑r
.idata:0040A214 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040A214                 extrn __imp_strcmp:dword
.idata:0040A214                                         ; DATA XREF: strcmp↑r
.idata:0040A218 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:0040A218                 extrn __imp_strcoll:dword
.idata:0040A218                                         ; DATA XREF: strcoll↑r
.idata:0040A21C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040A21C                 extrn __imp_strerror:dword
.idata:0040A21C                                         ; DATA XREF: strerror↑r
.idata:0040A220 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040A220                 extrn __imp_strlen:dword
.idata:0040A220                                         ; DATA XREF: strlen↑r
.idata:0040A224 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040A224                 extrn __imp_strncmp:dword
.idata:0040A224                                         ; DATA XREF: strncmp↑r
.idata:0040A228 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0040A228                 extrn __imp_strtol:dword
.idata:0040A228                                         ; DATA XREF: strtol↑r
.idata:0040A22C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0040A22C                 extrn __imp_strtoul:dword
.idata:0040A22C                                         ; DATA XREF: strtoul↑r
.idata:0040A230 ; int (__cdecl *toupper)(int C)
.idata:0040A230                 extrn __imp_toupper:dword
.idata:0040A230                                         ; DATA XREF: toupper↑r
.idata:0040A234 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040A234                 extrn __imp_vfprintf:dword
.idata:0040A234                                         ; DATA XREF: vfprintf↑r
.idata:0040A238
.idata:0040A238
.idata:0040A238
.idata:0040A238                 end start
