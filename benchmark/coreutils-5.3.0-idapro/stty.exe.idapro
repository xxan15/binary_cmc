.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 58E13758BA2B676B6A1344E16987A9D9DC4BB740EAF4B6BB37CCE1E13D10265D
.text:00401000 ; Input MD5    : 228AA4D4287E01BFDB1F1EB0B88A4255
.text:00401000 ; Input CRC32  : 844BDE7B
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/stty.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A279 (Wed Apr 20 18:42:01 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00009A30 (  39472.)
.text:00401000 ; Section size in file          : 00009C00 (  39936.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_403B10+73↓p
.text:00401040                                         ; .text:0040A650↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40A5F0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40B000
.text:004010A2                 mov     edx, dword_40B870
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40B004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40B890, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40B890
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40A5C0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40B000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40B004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_403B10
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40A5F0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aParenb         db 'parenb',0           ; DATA XREF: .data:off_40B010↓o
.text:00401287 aParodd         db 'parodd',0           ; DATA XREF: .data:0040B024↓o
.text:0040128E aCs5            db 'cs5',0
.text:00401292 aCs6            db 'cs6',0
.text:00401296 aCs7            db 'cs7',0
.text:0040129A aCs8            db 'cs8',0
.text:0040129E aHupcl          db 'hupcl',0
.text:004012A4 aHup            db 'hup',0
.text:004012A8 aCstopb         db 'cstopb',0
.text:004012AF aCread          db 'cread',0
.text:004012B5 aClocal         db 'clocal',0
.text:004012BC aCrtscts        db 'crtscts',0
.text:004012C4 aIgnbrk         db 'ignbrk',0
.text:004012CB aBrkint         db 'brkint',0
.text:004012D2 aIgnpar         db 'ignpar',0
.text:004012D9 aParmrk         db 'parmrk',0
.text:004012E0 aInpck          db 'inpck',0
.text:004012E6 aIstrip         db 'istrip',0
.text:004012ED aInlcr          db 'inlcr',0
.text:004012F3 aIgncr          db 'igncr',0
.text:004012F9 aIcrnl          db 'icrnl',0
.text:004012FF aIxon           db 'ixon',0
.text:00401304 aIxoff          db 'ixoff',0
.text:0040130A aTandem         db 'tandem',0
.text:00401311 aIuclc          db 'iuclc',0
.text:00401317 aIxany          db 'ixany',0
.text:0040131D aImaxbel        db 'imaxbel',0
.text:00401325 aOpost          db 'opost',0
.text:0040132B aOlcuc          db 'olcuc',0
.text:00401331 aOnlcr          db 'onlcr',0
.text:00401337 aTab3           db 'tab3',0
.text:0040133C aIsig           db 'isig',0
.text:00401341 aIcanon         db 'icanon',0
.text:00401348 aIexten         db 'iexten',0
.text:0040134F aEcho           db 'echo',0
.text:00401354 aEchoe          db 'echoe',0
.text:0040135A aCrterase       db 'crterase',0
.text:00401363 aEchok          db 'echok',0
.text:00401369 aEchonl         db 'echonl',0
.text:00401370 aNoflsh         db 'noflsh',0
.text:00401377 aTostop         db 'tostop',0
.text:0040137E aEchoprt        db 'echoprt',0
.text:00401386 aPrterase       db 'prterase',0
.text:0040138F aEchoctl        db 'echoctl',0
.text:00401397 aCtlecho        db 'ctlecho',0
.text:0040139F aEchoke         db 'echoke',0
.text:004013A6 aCrtkill        db 'crtkill',0
.text:004013AE aEvenp          db 'evenp',0            ; DATA XREF: sub_404570+87↓o
.text:004013B4 aParity         db 'parity',0           ; DATA XREF: sub_404570+9D↓o
.text:004013BB aOddp           db 'oddp',0             ; DATA XREF: sub_404570+D5↓o
.text:004013C0 aNl             db 'nl',0               ; DATA XREF: sub_404570+FB↓o
.text:004013C3 aEk             db 'ek',0               ; DATA XREF: sub_404570+13D↓o
.text:004013C6 aSane           db 'sane',0             ; DATA XREF: sub_404570+15D↓o
.text:004013CB aCooked         db 'cooked',0           ; DATA XREF: sub_404570+257↓o
.text:004013D2 aRaw            db 'raw',0              ; DATA XREF: sub_404570+245↓o
.text:004013D6 aPass8          db 'pass8',0            ; DATA XREF: sub_404570+1A3↓o
.text:004013DC aLitout         db 'litout',0           ; DATA XREF: sub_404570+1F0↓o
.text:004013E3 aCbreak         db 'cbreak',0           ; DATA XREF: sub_404570+174↓o
.text:004013EA aDecctlq        db 'decctlq',0          ; DATA XREF: sub_404570+2B9↓o
.text:004013F2 aTabs           db 'tabs',0             ; DATA XREF: sub_404570+2E8↓o
.text:004013F7 aCrt            db 'crt',0              ; DATA XREF: sub_404570+311↓o
.text:004013FB aDec            db 'dec',0              ; DATA XREF: sub_404570+32D↓o
.text:004013FF aIntr           db 'intr',0             ; DATA XREF: .data:off_40B510↓o
.text:00401404 aQuit           db 'quit',0             ; DATA XREF: .data:0040B51C↓o
.text:00401409 aErase          db 'erase',0
.text:0040140F aKill           db 'kill',0
.text:00401414 aEof            db 'eof',0
.text:00401418 aEol            db 'eol',0
.text:0040141C aEol2           db 'eol2',0
.text:00401421 aSwtch          db 'swtch',0            ; DATA XREF: sub_404DF0+102↓o
.text:00401421                                         ; sub_404DF0+430↓o
.text:00401427 aStart          db 'start',0
.text:0040142D aStop           db 'stop',0
.text:00401432 aSusp           db 'susp',0
.text:00401437 aDsusp          db 'dsusp',0
.text:0040143D aRprnt          db 'rprnt',0
.text:00401443 aWerase         db 'werase',0
.text:0040144A aLnext          db 'lnext',0
.text:00401450 aFlush          db 'flush',0
.text:00401456 aStatus         db 'status',0
.text:0040145D aMin            db 'min',0              ; DATA XREF: sub_4048E0+15↓o
.text:0040145D                                         ; sub_404DF0+CF↓o ...
.text:00401461 aTime           db 'time',0             ; DATA XREF: sub_4048E0+32↓o
.text:00401466 aAll            db 'all',0              ; DATA XREF: .data:off_40B610↓o
.text:0040146A aSave           db 'save',0
.text:0040146F aFile           db 'file',0
.text:00401474 aHelp           db 'help',0
.text:00401479 aVersion        db 'version',0
.text:00401481                 align 20h
.text:004014A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004014A0                                         ; DATA XREF: sub_403430+C↓o
.text:004014C7                 align 20h
.text:004014E0 aUsageSFDeviceF db 'Usage: %s [-F DEVICE] [--file=DEVICE] [SETTING]...',0Ah
.text:004014E0                                         ; DATA XREF: sub_403430:loc_403470↓o
.text:004014E0                 db '  or:  %s [-F DEVICE] [--file=DEVICE] [-a|--all]',0Ah
.text:004014E0                 db '  or:  %s [-F DEVICE] [--file=DEVICE] [-g|--save]',0Ah,0
.text:00401577                 align 10h
.text:00401580 aPrintOrChangeT db 'Print or change terminal characteristics.',0Ah
.text:00401580                                         ; DATA XREF: sub_403430+67↓o
.text:00401580                 db 0Ah
.text:00401580                 db '  -a, --all          print all current settings in human-readable'
.text:00401580                 db ' form',0Ah
.text:00401580                 db '  -g, --save         print all current settings in a stty-readabl'
.text:00401580                 db 'e form',0Ah
.text:00401580                 db '  -F, --file=DEVICE  open and use the specified DEVICE instead of'
.text:00401580                 db ' stdin',0Ah,0
.text:00401683                 align 20h
.text:004016A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016A0                                         ; DATA XREF: sub_403430+89↓o
.text:004016CD                 align 20h
.text:004016E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_403430+AB↓o
.text:00401716                 align 10h
.text:00401720 aOptionalBefore db 0Ah                  ; DATA XREF: sub_403430+CD↓o
.text:00401720                 db 'Optional - before SETTING indicates negation.  An * marks non-POS'
.text:00401720                 db 'IX',0Ah
.text:00401720                 db 'settings.  The underlying system defines which settings are avail'
.text:00401720                 db 'able.',0Ah,0
.text:004017AD                 align 20h
.text:004017C0 aSpecialCharact db 0Ah                  ; DATA XREF: sub_403430+EF↓o
.text:004017C0                 db 'Special characters:',0Ah
.text:004017C0                 db ' * dsusp CHAR    CHAR will send a terminal stop signal once input'
.text:004017C0                 db ' flushed',0Ah
.text:004017C0                 db '   eof CHAR      CHAR will send an end of file (terminate the inp'
.text:004017C0                 db 'ut)',0Ah
.text:004017C0                 db '   eol CHAR      CHAR will end the line',0Ah,0
.text:0040188D                 align 20h
.text:004018A0 aEol2CharAltern db ' * eol2 CHAR     alternate CHAR for ending the line',0Ah
.text:004018A0                                         ; DATA XREF: sub_403430+111↓o
.text:004018A0                 db '   erase CHAR    CHAR will erase the last character typed',0Ah
.text:004018A0                 db '   intr CHAR     CHAR will send an interrupt signal',0Ah
.text:004018A0                 db '   kill CHAR     CHAR will erase the current line',0Ah,0
.text:00401975                 align 10h
.text:00401980 aLnextCharCharW db ' * lnext CHAR    CHAR will enter the next character quoted',0Ah
.text:00401980                                         ; DATA XREF: sub_403430+133↓o
.text:00401980                 db '   quit CHAR     CHAR will send a quit signal',0Ah
.text:00401980                 db ' * rprnt CHAR    CHAR will redraw the current line',0Ah
.text:00401980                 db '   start CHAR    CHAR will restart the output after stopping it',0Ah
.text:00401980                 db 0
.text:00401A5D                 align 10h
.text:00401A60 aStopCharCharWi db '   stop CHAR     CHAR will stop the output',0Ah
.text:00401A60                                         ; DATA XREF: sub_403430+155↓o
.text:00401A60                 db '   susp CHAR     CHAR will send a terminal stop signal',0Ah
.text:00401A60                 db ' * swtch CHAR    CHAR will switch to a different shell layer',0Ah
.text:00401A60                 db ' * werase CHAR   CHAR will erase the last word typed',0Ah,0
.text:00401B35                 align 10h
.text:00401B40 aSpecialSetting db 0Ah                  ; DATA XREF: sub_403430+177↓o
.text:00401B40                 db 'Special settings:',0Ah
.text:00401B40                 db '  N             set the input and output speeds to N bauds',0Ah
.text:00401B40                 db ' * cols N        tell the kernel that the terminal has N columns',0Ah
.text:00401B40                 db ' * columns N     same as cols N',0Ah,0
.text:00401BF0                 align 20h
.text:00401C00 aIspeedNSetTheI db '   ispeed N      set the input speed to N',0Ah
.text:00401C00                                         ; DATA XREF: sub_403430+199↓o
.text:00401C00                 db ' * line N        use line discipline N',0Ah
.text:00401C00                 db '   min N         with -icanon, set N characters minimum for a com'
.text:00401C00                 db 'pleted read',0Ah
.text:00401C00                 db '   ospeed N      set the output speed to N',0Ah,0
.text:00401CCA                 align 20h
.text:00401CE0 aRowsNTellTheKe db ' * rows N        tell the kernel that the terminal has N rows',0Ah
.text:00401CE0                                         ; DATA XREF: sub_403430+1BB↓o
.text:00401CE0                 db ' * size          print the number of rows and columns according t'
.text:00401CE0                 db 'o the kernel',0Ah
.text:00401CE0                 db '   speed         print the terminal speed',0Ah
.text:00401CE0                 db '   time N        with -icanon, set read timeout of N tenths of a '
.text:00401CE0                 db 'second',0Ah,0
.text:00401DDF                 align 10h
.text:00401DE0 aControlSetting db 0Ah                  ; DATA XREF: sub_403430+1DD↓o
.text:00401DE0                 db 'Control settings:',0Ah
.text:00401DE0                 db '   [-]clocal     disable modem control signals',0Ah
.text:00401DE0                 db '   [-]cread      allow input to be received',0Ah
.text:00401DE0                 db ' * [-]crtscts    enable RTS/CTS handshaking',0Ah
.text:00401DE0                 db '   csN           set character size to N bits, N in [5..8]',0Ah,0
.text:00401EB6                 align 10h
.text:00401EC0 aCstopbUseTwoSt db '   [-]cstopb     use two stop bits per character (one with `-',27h
.text:00401EC0                                         ; DATA XREF: sub_403430+1FF↓o
.text:00401EC0                 db ')',0Ah
.text:00401EC0                 db '   [-]hup        send a hangup signal when the last process close'
.text:00401EC0                 db 's the tty',0Ah
.text:00401EC0                 db '   [-]hupcl      same as [-]hup',0Ah
.text:00401EC0                 db '   [-]parenb     generate parity bit in output and expect parity '
.text:00401EC0                 db 'bit in input',0Ah
.text:00401EC0                 db '   [-]parodd     set odd parity (even with `-',27h,')',0Ah,0
.text:00401FEA                 align 20h
.text:00402000 aInputSettingsB db 0Ah                  ; DATA XREF: sub_403430+221↓o
.text:00402000                 db 'Input settings:',0Ah
.text:00402000                 db '   [-]brkint     breaks cause an interrupt signal',0Ah
.text:00402000                 db '   [-]icrnl      translate carriage return to newline',0Ah
.text:00402000                 db '   [-]ignbrk     ignore break characters',0Ah
.text:00402000                 db '   [-]igncr      ignore carriage return',0Ah,0
.text:004020CB                 align 20h
.text:004020E0 aIgnparIgnoreCh db '   [-]ignpar     ignore characters with parity errors',0Ah
.text:004020E0                                         ; DATA XREF: sub_403430+243↓o
.text:004020E0                 db ' * [-]imaxbel    beep and do not flush a full input buffer on a c'
.text:004020E0                 db 'haracter',0Ah
.text:004020E0                 db '   [-]inlcr      translate newline to carriage return',0Ah
.text:004020E0                 db '   [-]inpck      enable input parity checking',0Ah
.text:004020E0                 db '   [-]istrip     clear high (8th) bit of input characters',0Ah,0
.text:004021FF                 align 10h
.text:00402200 aIutf8AssumeInp db ' * [-]iutf8      assume input characters are UTF-8 encoded',0Ah,0
.text:00402200                                         ; DATA XREF: sub_403430+265↓o
.text:0040223C                 align 10h
.text:00402240 aIuclcTranslate db ' * [-]iuclc      translate uppercase characters to lowercase',0Ah
.text:00402240                                         ; DATA XREF: sub_403430+287↓o
.text:00402240                 db ' * [-]ixany      let any character restart output, not only start'
.text:00402240                 db ' character',0Ah
.text:00402240                 db '   [-]ixoff      enable sending of start/stop characters',0Ah
.text:00402240                 db '   [-]ixon       enable XON/XOFF flow control',0Ah
.text:00402240                 db '   [-]parmrk     mark parity errors (with a 255-0-character seque'
.text:00402240                 db 'nce)',0Ah
.text:00402240                 db '   [-]tandem     same as [-]ixoff',0Ah,0
.text:00402399                 align 10h
.text:004023A0 aOutputSettings db 0Ah                  ; DATA XREF: sub_403430+2A9↓o
.text:004023A0                 db 'Output settings:',0Ah
.text:004023A0                 db ' * bsN           backspace delay style, N in [0..1]',0Ah
.text:004023A0                 db ' * crN           carriage return delay style, N in [0..3]',0Ah
.text:004023A0                 db ' * ffN           form feed delay style, N in [0..1]',0Ah
.text:004023A0                 db ' * nlN           newline delay style, N in [0..1]',0Ah,0
.text:00402487                 align 20h
.text:004024A0 aOcrnlTranslate db ' * [-]ocrnl      translate carriage return to newline',0Ah
.text:004024A0                                         ; DATA XREF: sub_403430+2CB↓o
.text:004024A0                 db ' * [-]ofdel      use delete characters for fill instead of null c'
.text:004024A0                 db 'haracters',0Ah
.text:004024A0                 db ' * [-]ofill      use fill (padding) characters instead of timing '
.text:004024A0                 db 'for delays',0Ah
.text:004024A0                 db ' * [-]olcuc      translate lowercase characters to uppercase',0Ah
.text:004024A0                 db ' * [-]onlcr      translate newline to carriage return-newline',0Ah
.text:004024A0                 db ' * [-]onlret     newline performs a carriage return',0Ah,0
.text:0040261D                 align 10h
.text:00402620 aOnocrDoNotPrin db ' * [-]onocr      do not print carriage returns in the first colum'
.text:00402620                                         ; DATA XREF: sub_403430+2ED↓o
.text:00402620                 db 'n',0Ah
.text:00402620                 db '   [-]opost      postprocess output',0Ah
.text:00402620                 db ' * tabN          horizontal tab delay style, N in [0..3]',0Ah
.text:00402620                 db ' * tabs          same as tab0',0Ah
.text:00402620                 db ' * -tabs         same as tab3',0Ah
.text:00402620                 db ' * vtN           vertical tab delay style, N in [0..1]',0Ah,0
.text:00402734                 align 10h
.text:00402740 aLocalSettingsC db 0Ah                  ; DATA XREF: sub_403430+30F↓o
.text:00402740                 db 'Local settings:',0Ah
.text:00402740                 db '   [-]crterase   echo erase characters as backspace-space-backspa'
.text:00402740                 db 'ce',0Ah
.text:00402740                 db ' * crtkill       kill all line by obeying the echoprt and echoe s'
.text:00402740                 db 'ettings',0Ah
.text:00402740                 db ' * -crtkill      kill all line by obeying the echoctl and echok s'
.text:00402740                 db 'ettings',0Ah,0
.text:00402828                 align 20h
.text:00402840 aCtlechoEchoCon db ' * [-]ctlecho    echo control characters in hat notation (`^c',27h
.text:00402840                                         ; DATA XREF: sub_403430+331↓o
.text:00402840                 db ')',0Ah
.text:00402840                 db '   [-]echo       echo input characters',0Ah
.text:00402840                 db ' * [-]echoctl    same as [-]ctlecho',0Ah
.text:00402840                 db '   [-]echoe      same as [-]crterase',0Ah
.text:00402840                 db '   [-]echok      echo a newline after a kill character',0Ah,0
.text:00402928                 align 20h
.text:00402940 aEchokeSameAsCr db ' * [-]echoke     same as [-]crtkill',0Ah
.text:00402940                                         ; DATA XREF: sub_403430+353↓o
.text:00402940                 db '   [-]echonl     echo newline even if not echoing other character'
.text:00402940                 db 's',0Ah
.text:00402940                 db ' * [-]echoprt    echo erased characters backward, between `\',27h
.text:00402940                 db ' and ',27h,'/',27h,0Ah
.text:00402940                 db '   [-]icanon     enable erase, kill, werase, and rprnt special ch'
.text:00402940                 db 'aracters',0Ah
.text:00402940                 db '   [-]iexten     enable non-POSIX special characters',0Ah,0
.text:00402A6D                 align 20h
.text:00402A80 aIsigEnableInte db '   [-]isig       enable interrupt, quit, and suspend special char'
.text:00402A80                                         ; DATA XREF: sub_403430+375↓o
.text:00402A80                 db 'acters',0Ah
.text:00402A80                 db '   [-]noflsh     disable flushing after interrupt and quit specia'
.text:00402A80                 db 'l characters',0Ah
.text:00402A80                 db ' * [-]prterase   same as [-]echoprt',0Ah
.text:00402A80                 db ' * [-]tostop     stop background jobs that try to write to the te'
.text:00402A80                 db 'rminal',0Ah
.text:00402A80                 db ' * [-]xcase      with icanon, escape with `\',27h,' for uppercase'
.text:00402A80                 db ' characters',0Ah,0
.text:00402BCA                 align 20h
.text:00402BE0 aCombinationSet db 0Ah                  ; DATA XREF: sub_403430+397↓o
.text:00402BE0                 db 'Combination settings:',0Ah
.text:00402BE0                 db ' * [-]LCASE      same as [-]lcase',0Ah
.text:00402BE0                 db '   cbreak        same as -icanon',0Ah
.text:00402BE0                 db '   -cbreak       same as icanon',0Ah,0
.text:00402C5B                 align 10h
.text:00402C60 aCookedSameAsBr db '   cooked        same as brkint ignpar istrip icrnl ixon opost is'
.text:00402C60                                         ; DATA XREF: sub_403430+3B9↓o
.text:00402C60                 db 'ig',0Ah
.text:00402C60                 db '                 icanon, eof and eol characters to their default '
.text:00402C60                 db 'values',0Ah
.text:00402C60                 db '   -cooked       same as raw',0Ah
.text:00402C60                 db '   crt           same as echoe echoctl echoke',0Ah,0
.text:00402D38                 align 10h
.text:00402D40 aDecSameAsEchoe db '   dec           same as echoe echoctl echoke -ixany intr ^c eras'
.text:00402D40                                         ; DATA XREF: sub_403430+3DB↓o
.text:00402D40                 db 'e 0177',0Ah
.text:00402D40                 db '                 kill ^u',0Ah
.text:00402D40                 db ' * [-]decctlq    same as [-]ixany',0Ah
.text:00402D40                 db '   ek            erase and kill characters to their default value'
.text:00402D40                 db 's',0Ah
.text:00402D40                 db '   evenp         same as parenb -parodd cs7',0Ah,0
.text:00402E33                 align 10h
.text:00402E40 aEvenpSameAsPar db '   -evenp        same as -parenb cs8',0Ah
.text:00402E40                                         ; DATA XREF: sub_403430+3FD↓o
.text:00402E40                 db ' * [-]lcase      same as xcase iuclc olcuc',0Ah
.text:00402E40                 db '   litout        same as -parenb -istrip -opost cs8',0Ah
.text:00402E40                 db '   -litout       same as parenb istrip opost cs7',0Ah
.text:00402E40                 db '   nl            same as -icrnl -onlcr',0Ah
.text:00402E40                 db '   -nl           same as icrnl -inlcr -igncr onlcr -ocrnl -onlret'
.text:00402E40                 db 0Ah,0
.text:00402F5F                 align 10h
.text:00402F60 aOddpSameAsPare db '   oddp          same as parenb parodd cs7',0Ah
.text:00402F60                                         ; DATA XREF: sub_403430+41F↓o
.text:00402F60                 db '   -oddp         same as -parenb cs8',0Ah
.text:00402F60                 db '   [-]parity     same as [-]evenp',0Ah
.text:00402F60                 db '   pass8         same as -parenb -istrip cs8',0Ah
.text:00402F60                 db '   -pass8        same as parenb istrip cs7',0Ah,0
.text:0040302B                 align 20h
.text:00403040 aRawSameAsIgnbr db '   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -'
.text:00403040                                         ; DATA XREF: sub_403430+441↓o
.text:00403040                 db 'istrip',0Ah
.text:00403040                 db '                 -inlcr -igncr -icrnl  -ixon  -ixoff  -iuclc  -ix'
.text:00403040                 db 'any',0Ah
.text:00403040                 db '                 -imaxbel -opost -isig -icanon -xcase min 1 time '
.text:00403040                 db '0',0Ah
.text:00403040                 db '   -raw          same as cooked',0Ah,0
.text:00403131                 db 0EBh, 0Dh, 90h
.text:00403134                 align 10h
.text:00403140 aSaneSameAsCrea db '   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl'
.text:00403140                                         ; DATA XREF: sub_403430+463↓o
.text:00403140                 db ' -iutf8',0Ah
.text:00403140                 db '                 -ixoff -iuclc -ixany imaxbel opost -olcuc -ocrnl'
.text:00403140                 db ' onlcr',0Ah
.text:00403140                 db '                 -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt'
.text:00403140                 db '0 ff0',0Ah
.text:00403140                 db '                 isig icanon iexten echo echoe echok -echonl -nof'
.text:00403140                 db 'lsh',0Ah
.text:00403140                 db '                 -xcase -tostop -echoprt echoctl echoke, all spec'
.text:00403140                 db 'ial',0Ah
.text:00403140                 db '                 characters to their default values.',0Ah,0
.text:004032D8                 align 10h
.text:004032E0 aHandleTheTtyLi db 0Ah                  ; DATA XREF: sub_403430+485↓o
.text:004032E0                 db 'Handle the tty line connected to standard input.  Without argumen'
.text:004032E0                 db 'ts,',0Ah
.text:004032E0                 db 'prints baud rate, line discipline, and deviations from stty sane.'
.text:004032E0                 db '  In',0Ah
.text:004032E0                 db 'settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 '
.text:004032E0                 db 'or',0Ah
.text:004032E0                 db '127; special values ^- or undef used to disable special character'
.text:004032E0                 db 's.',0Ah,0
.text:004033F5 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_403430+4A7↓o
.text:004033F5                 db 'Report bugs to <%s>.',0Ah,0
.text:0040340C aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040340C                                         ; DATA XREF: sub_403430+4B4↓o
.text:00403422                 align 10h
.text:00403430
.text:00403430 ; =============== S U B R O U T I N E =======================================
.text:00403430
.text:00403430 ; Attributes: noreturn
.text:00403430
.text:00403430 ; void __cdecl __noreturn sub_403430(int Code)
.text:00403430 sub_403430      proc near               ; CODE XREF: sub_403B10+13A↓p
.text:00403430                                         ; sub_403B10+58D↓p ...
.text:00403430
.text:00403430 Stream          = dword ptr -1Ch
.text:00403430 Format          = dword ptr -18h
.text:00403430 var_14          = dword ptr -14h
.text:00403430 var_10          = dword ptr -10h
.text:00403430 Code            = dword ptr  4
.text:00403430
.text:00403430                 push    ebx
.text:00403431                 sub     esp, 18h
.text:00403434                 mov     ebx, [esp+1Ch+Code]
.text:00403438                 test    ebx, ebx
.text:0040343A                 jz      short loc_403470
.text:0040343C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403443                 call    ds:libintl_gettext
.text:00403449                 mov     edx, ds:_iob
.text:0040344F                 mov     ecx, ds:dword_40C1C0
.text:00403455                 add     edx, 40h ; '@'
.text:00403458                 mov     [esp+1Ch+var_14], ecx
.text:0040345C                 mov     [esp+1Ch+Format], eax ; Format
.text:00403460                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00403463                 call    fprintf
.text:00403468
.text:00403468 loc_403468:                             ; CODE XREF: sub_403430+4C4↓j
.text:00403468                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040346B                 call    exit
.text:00403470 ; ---------------------------------------------------------------------------
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_403430+A↑j
.text:00403470                 mov     [esp+1Ch+Stream], offset aUsageSFDeviceF ; "Usage: %s [-F DEVICE] [--file=DEVICE] ["...
.text:00403477                 call    ds:libintl_gettext
.text:0040347D                 mov     ecx, ds:dword_40C1C0
.text:00403483                 mov     [esp+1Ch+Stream], eax ; Format
.text:00403486                 mov     [esp+1Ch+var_10], ecx
.text:0040348A                 mov     [esp+1Ch+var_14], ecx
.text:0040348E                 mov     [esp+1Ch+Format], ecx
.text:00403492                 call    printf
.text:00403497                 mov     [esp+1Ch+Stream], offset aPrintOrChangeT ; "Print or change terminal characteristic"...
.text:0040349E                 call    ds:libintl_gettext
.text:004034A4                 mov     ecx, ds:_iob
.text:004034AA                 add     ecx, 20h ; ' '
.text:004034AD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004034B1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004034B4                 call    fputs
.text:004034B9                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004034C0                 call    ds:libintl_gettext
.text:004034C6                 mov     ecx, ds:_iob
.text:004034CC                 add     ecx, 20h ; ' '
.text:004034CF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004034D3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004034D6                 call    fputs
.text:004034DB                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004034E2                 call    ds:libintl_gettext
.text:004034E8                 mov     ecx, ds:_iob
.text:004034EE                 add     ecx, 20h ; ' '
.text:004034F1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004034F5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004034F8                 call    fputs
.text:004034FD                 mov     [esp+1Ch+Stream], offset aOptionalBefore ; "\nOptional - before SETTING indicates n"...
.text:00403504                 call    ds:libintl_gettext
.text:0040350A                 mov     ecx, ds:_iob
.text:00403510                 add     ecx, 20h ; ' '
.text:00403513                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403517                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040351A                 call    fputs
.text:0040351F                 mov     [esp+1Ch+Stream], offset aSpecialCharact ; "\nSpecial characters:\n * dsusp CHAR   "...
.text:00403526                 call    ds:libintl_gettext
.text:0040352C                 mov     ecx, ds:_iob
.text:00403532                 add     ecx, 20h ; ' '
.text:00403535                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403539                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040353C                 call    fputs
.text:00403541                 mov     [esp+1Ch+Stream], offset aEol2CharAltern ; " * eol2 CHAR     alternate CHAR for end"...
.text:00403548                 call    ds:libintl_gettext
.text:0040354E                 mov     ecx, ds:_iob
.text:00403554                 add     ecx, 20h ; ' '
.text:00403557                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040355B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040355E                 call    fputs
.text:00403563                 mov     [esp+1Ch+Stream], offset aLnextCharCharW ; " * lnext CHAR    CHAR will enter the ne"...
.text:0040356A                 call    ds:libintl_gettext
.text:00403570                 mov     ecx, ds:_iob
.text:00403576                 add     ecx, 20h ; ' '
.text:00403579                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040357D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403580                 call    fputs
.text:00403585                 mov     [esp+1Ch+Stream], offset aStopCharCharWi ; "   stop CHAR     CHAR will stop the out"...
.text:0040358C                 call    ds:libintl_gettext
.text:00403592                 mov     ecx, ds:_iob
.text:00403598                 add     ecx, 20h ; ' '
.text:0040359B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040359F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004035A2                 call    fputs
.text:004035A7                 mov     [esp+1Ch+Stream], offset aSpecialSetting ; "\nSpecial settings:\n  N             se"...
.text:004035AE                 call    ds:libintl_gettext
.text:004035B4                 mov     ecx, ds:_iob
.text:004035BA                 add     ecx, 20h ; ' '
.text:004035BD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004035C1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004035C4                 call    fputs
.text:004035C9                 mov     [esp+1Ch+Stream], offset aIspeedNSetTheI ; "   ispeed N      set the input speed to"...
.text:004035D0                 call    ds:libintl_gettext
.text:004035D6                 mov     ecx, ds:_iob
.text:004035DC                 add     ecx, 20h ; ' '
.text:004035DF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004035E3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004035E6                 call    fputs
.text:004035EB                 mov     [esp+1Ch+Stream], offset aRowsNTellTheKe ; " * rows N        tell the kernel that t"...
.text:004035F2                 call    ds:libintl_gettext
.text:004035F8                 mov     ecx, ds:_iob
.text:004035FE                 add     ecx, 20h ; ' '
.text:00403601                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403605                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403608                 call    fputs
.text:0040360D                 mov     [esp+1Ch+Stream], offset aControlSetting ; "\nControl settings:\n   [-]clocal     d"...
.text:00403614                 call    ds:libintl_gettext
.text:0040361A                 mov     ecx, ds:_iob
.text:00403620                 add     ecx, 20h ; ' '
.text:00403623                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403627                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040362A                 call    fputs
.text:0040362F                 mov     [esp+1Ch+Stream], offset aCstopbUseTwoSt ; "   [-]cstopb     use two stop bits per "...
.text:00403636                 call    ds:libintl_gettext
.text:0040363C                 mov     ecx, ds:_iob
.text:00403642                 add     ecx, 20h ; ' '
.text:00403645                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403649                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040364C                 call    fputs
.text:00403651                 mov     [esp+1Ch+Stream], offset aInputSettingsB ; "\nInput settings:\n   [-]brkint     bre"...
.text:00403658                 call    ds:libintl_gettext
.text:0040365E                 mov     ecx, ds:_iob
.text:00403664                 add     ecx, 20h ; ' '
.text:00403667                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040366B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040366E                 call    fputs
.text:00403673                 mov     [esp+1Ch+Stream], offset aIgnparIgnoreCh ; "   [-]ignpar     ignore characters with"...
.text:0040367A                 call    ds:libintl_gettext
.text:00403680                 mov     ecx, ds:_iob
.text:00403686                 add     ecx, 20h ; ' '
.text:00403689                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040368D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403690                 call    fputs
.text:00403695                 mov     [esp+1Ch+Stream], offset aIutf8AssumeInp ; " * [-]iutf8      assume input character"...
.text:0040369C                 call    ds:libintl_gettext
.text:004036A2                 mov     ecx, ds:_iob
.text:004036A8                 add     ecx, 20h ; ' '
.text:004036AB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036AF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036B2                 call    fputs
.text:004036B7                 mov     [esp+1Ch+Stream], offset aIuclcTranslate ; " * [-]iuclc      translate uppercase ch"...
.text:004036BE                 call    ds:libintl_gettext
.text:004036C4                 mov     ecx, ds:_iob
.text:004036CA                 add     ecx, 20h ; ' '
.text:004036CD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036D1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036D4                 call    fputs
.text:004036D9                 mov     [esp+1Ch+Stream], offset aOutputSettings ; "\nOutput settings:\n * bsN           ba"...
.text:004036E0                 call    ds:libintl_gettext
.text:004036E6                 mov     ecx, ds:_iob
.text:004036EC                 add     ecx, 20h ; ' '
.text:004036EF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036F3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036F6                 call    fputs
.text:004036FB                 mov     [esp+1Ch+Stream], offset aOcrnlTranslate ; " * [-]ocrnl      translate carriage ret"...
.text:00403702                 call    ds:libintl_gettext
.text:00403708                 mov     ecx, ds:_iob
.text:0040370E                 add     ecx, 20h ; ' '
.text:00403711                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403715                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403718                 call    fputs
.text:0040371D                 mov     [esp+1Ch+Stream], offset aOnocrDoNotPrin ; " * [-]onocr      do not print carriage "...
.text:00403724                 call    ds:libintl_gettext
.text:0040372A                 mov     ecx, ds:_iob
.text:00403730                 add     ecx, 20h ; ' '
.text:00403733                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403737                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040373A                 call    fputs
.text:0040373F                 mov     [esp+1Ch+Stream], offset aLocalSettingsC ; "\nLocal settings:\n   [-]crterase   ech"...
.text:00403746                 call    ds:libintl_gettext
.text:0040374C                 mov     ecx, ds:_iob
.text:00403752                 add     ecx, 20h ; ' '
.text:00403755                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403759                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040375C                 call    fputs
.text:00403761                 mov     [esp+1Ch+Stream], offset aCtlechoEchoCon ; " * [-]ctlecho    echo control character"...
.text:00403768                 call    ds:libintl_gettext
.text:0040376E                 mov     ecx, ds:_iob
.text:00403774                 add     ecx, 20h ; ' '
.text:00403777                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040377B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040377E                 call    fputs
.text:00403783                 mov     [esp+1Ch+Stream], offset aEchokeSameAsCr ; " * [-]echoke     same as [-]crtkill\n  "...
.text:0040378A                 call    ds:libintl_gettext
.text:00403790                 mov     ecx, ds:_iob
.text:00403796                 add     ecx, 20h ; ' '
.text:00403799                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040379D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004037A0                 call    fputs
.text:004037A5                 mov     [esp+1Ch+Stream], offset aIsigEnableInte ; "   [-]isig       enable interrupt, quit"...
.text:004037AC                 call    ds:libintl_gettext
.text:004037B2                 mov     ecx, ds:_iob
.text:004037B8                 add     ecx, 20h ; ' '
.text:004037BB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004037BF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004037C2                 call    fputs
.text:004037C7                 mov     [esp+1Ch+Stream], offset aCombinationSet ; "\nCombination settings:\n * [-]LCASE   "...
.text:004037CE                 call    ds:libintl_gettext
.text:004037D4                 mov     ecx, ds:_iob
.text:004037DA                 add     ecx, 20h ; ' '
.text:004037DD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004037E1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004037E4                 call    fputs
.text:004037E9                 mov     [esp+1Ch+Stream], offset aCookedSameAsBr ; "   cooked        same as brkint ignpar "...
.text:004037F0                 call    ds:libintl_gettext
.text:004037F6                 mov     ecx, ds:_iob
.text:004037FC                 add     ecx, 20h ; ' '
.text:004037FF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403803                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403806                 call    fputs
.text:0040380B                 mov     [esp+1Ch+Stream], offset aDecSameAsEchoe ; "   dec           same as echoe echoctl "...
.text:00403812                 call    ds:libintl_gettext
.text:00403818                 mov     ecx, ds:_iob
.text:0040381E                 add     ecx, 20h ; ' '
.text:00403821                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403825                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403828                 call    fputs
.text:0040382D                 mov     [esp+1Ch+Stream], offset aEvenpSameAsPar ; "   -evenp        same as -parenb cs8\n "...
.text:00403834                 call    ds:libintl_gettext
.text:0040383A                 mov     ecx, ds:_iob
.text:00403840                 add     ecx, 20h ; ' '
.text:00403843                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403847                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040384A                 call    fputs
.text:0040384F                 mov     [esp+1Ch+Stream], offset aOddpSameAsPare ; "   oddp          same as parenb parodd "...
.text:00403856                 call    ds:libintl_gettext
.text:0040385C                 mov     ecx, ds:_iob
.text:00403862                 add     ecx, 20h ; ' '
.text:00403865                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403869                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040386C                 call    fputs
.text:00403871                 mov     [esp+1Ch+Stream], offset aRawSameAsIgnbr ; "   raw           same as -ignbrk -brkin"...
.text:00403878                 call    ds:libintl_gettext
.text:0040387E                 mov     ecx, ds:_iob
.text:00403884                 add     ecx, 20h ; ' '
.text:00403887                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040388B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040388E                 call    fputs
.text:00403893                 mov     [esp+1Ch+Stream], offset aSaneSameAsCrea ; "   sane          same as cread -ignbrk "...
.text:0040389A                 call    ds:libintl_gettext
.text:004038A0                 mov     ecx, ds:_iob
.text:004038A6                 add     ecx, 20h ; ' '
.text:004038A9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004038AD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004038B0                 call    fputs
.text:004038B5                 mov     [esp+1Ch+Stream], offset aHandleTheTtyLi ; "\nHandle the tty line connected to stan"...
.text:004038BC                 call    ds:libintl_gettext
.text:004038C2                 mov     ecx, ds:_iob
.text:004038C8                 add     ecx, 20h ; ' '
.text:004038CB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004038CF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004038D2                 call    fputs
.text:004038D7                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004038DE                 call    ds:libintl_gettext
.text:004038E4                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004038EC                 mov     [esp+1Ch+Stream], eax ; Format
.text:004038EF                 call    printf
.text:004038F4                 jmp     loc_403468
.text:004038F4 sub_403430      endp
.text:004038F4
.text:004038F4 ; ---------------------------------------------------------------------------
.text:004038F9 ; const char Locale
.text:004038F9 Locale          db 0                    ; DATA XREF: sub_403B10+30↓o
.text:004038F9                                         ; sub_404CF0+40↓o
.text:004038FA                 align 10h
.text:00403900 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00403900                                         ; DATA XREF: sub_403B10+4A↓o
.text:00403923 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_403B10+52↓o
.text:00403923                                         ; sub_403B10+5F↓o
.text:0040392D aAgf            db '-agF:',0            ; DATA XREF: sub_403B10+AB↓o
.text:00403933 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_403B10+14F↓o
.text:00403943 a530            db '5.3.0',0            ; DATA XREF: sub_403B10+157↓o
.text:00403949 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_403B10+162↓o
.text:00403957 ; const FILE stru_403957
.text:00403957 stru_403957     FILE <79747473h, 26748D00h, 6C6E6F00h, 6E6F2079h, 65642065h, \
.text:00403957                                         ; DATA XREF: sub_403B10+16A↓o
.text:00403957                                         ; sub_403B10+1B8↓o
.text:00403957                       65636976h, 79616D20h, 20656220h>
.text:00403977                 db  73h ; s
.text:00403978                 db  70h ; p
.text:00403979                 db  65h ; e
.text:0040397A                 db  63h ; c
.text:0040397B                 db  69h ; i
.text:0040397C                 db  66h ; f
.text:0040397D                 db  69h ; i
.text:0040397E                 db  65h ; e
.text:0040397F                 db  64h ; d
.text:00403980                 db    0
.text:00403981 aIspeed         db 'ispeed',0           ; DATA XREF: sub_403B10+400↓o
.text:00403988                 align 20h
.text:004039A0 aSUnableToPerfo db '%s: unable to perform all requested operations',0
.text:004039A0                                         ; DATA XREF: sub_403B10+4D0↓o
.text:004039CF ; const char aS_3[]
.text:004039CF aS_3            db '%s',0               ; DATA XREF: sub_403B10+509↓o
.text:004039CF                                         ; sub_403B10+534↓o ...
.text:004039D2 aMissingArgumen db 'missing argument to `%s',27h,0
.text:004039D2                                         ; DATA XREF: sub_403B10:loc_40406D↓o
.text:004039D2                                         ; sub_403B10:loc_4040EF↓o ...
.text:004039EB aOspeed         db 'ospeed',0           ; DATA XREF: sub_403B10+598↓o
.text:004039F2 aRows           db 'rows',0             ; DATA XREF: sub_403B10+617↓o
.text:004039F7 aCols           db 'cols',0             ; DATA XREF: sub_403B10+6BF↓o
.text:004039FC aColumns        db 'columns',0          ; DATA XREF: sub_403B10+6CF↓o
.text:00403A04 aSize           db 'size',0             ; DATA XREF: sub_403B10+767↓o
.text:00403A09 aSpeed          db 'speed',0            ; DATA XREF: sub_403B10+77C↓o
.text:00403A0F aInvalidArgumen db 'invalid argument `%s',27h,0
.text:00403A0F                                         ; DATA XREF: sub_403B10+7E7↓o
.text:00403A0F                                         ; sub_403B10:loc_4043E0↓o
.text:00403A25                 align 20h
.text:00403A40 aSCouldnTResetN db '%s: couldn',27h,'t reset non-blocking mode',0
.text:00403A40                                         ; DATA XREF: sub_403B10:loc_40448E↓o
.text:00403A65 aStandardInput  db 'standard input',0   ; DATA XREF: sub_403B10:loc_4044F5↓o
.text:00403A74                 align 10h
.text:00403A80 aWhenSpecifying db 'when specifying an output style, modes may not be set',0
.text:00403A80                                         ; DATA XREF: sub_403B10:loc_404515↓o
.text:00403AB6                 align 10h
.text:00403AC0 aTheOptionsForV db 'the options for verbose and stty-readable output styles are',0Ah
.text:00403AC0                                         ; DATA XREF: sub_403B10:loc_40453F↓o
.text:00403AC0                 db 'mutually exclusive',0
.text:00403B0F                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00403B10
.text:00403B10 sub_403B10      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00403B10
.text:00403B10 Category        = dword ptr -0C8h
.text:00403B10 Locale          = dword ptr -0C4h
.text:00403B10 var_C0          = dword ptr -0C0h
.text:00403B10 var_BC          = byte ptr -0BCh
.text:00403B10 var_B8          = byte ptr -0B8h
.text:00403B10 var_B4          = dword ptr -0B4h
.text:00403B10 var_9C          = dword ptr -9Ch
.text:00403B10 var_98          = dword ptr -98h
.text:00403B10 var_92          = byte ptr -92h
.text:00403B10 var_91          = byte ptr -91h
.text:00403B10 var_90          = byte ptr -90h
.text:00403B10 var_8C          = dword ptr -8Ch
.text:00403B10 var_85          = byte ptr -85h
.text:00403B10 var_84          = dword ptr -84h
.text:00403B10 var_7F          = byte ptr -7Fh
.text:00403B10 var_7E          = byte ptr -7Eh
.text:00403B10 var_7D          = byte ptr -7Dh
.text:00403B10 var_7C          = dword ptr -7Ch
.text:00403B10 var_78          = byte ptr -78h
.text:00403B10 var_48          = dword ptr -48h
.text:00403B10 arg_0           = dword ptr  8
.text:00403B10 arg_4           = dword ptr  0Ch
.text:00403B10
.text:00403B10                 push    ebp
.text:00403B11                 xor     eax, eax
.text:00403B13                 mov     ebp, esp
.text:00403B15                 push    edi
.text:00403B16                 xor     edi, edi
.text:00403B18                 push    esi
.text:00403B19                 xor     esi, esi
.text:00403B1B                 push    ebx
.text:00403B1C                 sub     esp, 0BCh
.text:00403B22                 mov     ebx, 1
.text:00403B27                 and     esp, 0FFFFFFF0h
.text:00403B2A                 call    __alloca
.text:00403B2F                 call    sub_40A690
.text:00403B34                 mov     [ebp+var_85], 1
.text:00403B3B                 mov     eax, [ebp+arg_4]
.text:00403B3E                 mov     ecx, [eax]
.text:00403B40                 mov     [esp+0C8h+Locale], offset Locale ; Locale
.text:00403B48                 mov     [esp+0C8h+Category], 0 ; Category
.text:00403B4F                 mov     ds:dword_40C1C0, ecx
.text:00403B55                 call    setlocale
.text:00403B5A                 mov     [esp+0C8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00403B62                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:00403B69                 call    ds:libintl_bindtextdomain
.text:00403B6F                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:00403B76                 call    ds:libintl_textdomain
.text:00403B7C                 mov     [esp+0C8h+Category], offset sub_407F70 ; void (__cdecl *)()
.text:00403B83                 call    sub_401040
.text:00403B88                 mov     [ebp+var_7C], 0
.text:00403B8F                 xor     eax, eax
.text:00403B91                 mov     [ebp+var_7E], 0
.text:00403B95                 mov     [ebp+var_7F], 0
.text:00403B99                 mov     dword_40B834, eax
.text:00403B9E                 mov     esi, esi
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403B10+106↓j
.text:00403BA0                                         ; sub_403B10+12E↓j
.text:00403BA0                 mov     dword ptr [esp+0C8h+var_B8], 0
.text:00403BA8                 mov     eax, [ebp+arg_4]
.text:00403BAB                 mov     edx, [ebp+arg_0]
.text:00403BAE                 mov     dword ptr [esp+0C8h+var_BC], offset off_40B610 ; char
.text:00403BB6                 lea     ecx, [eax+esi*4]
.text:00403BB9                 sub     edx, esi
.text:00403BBB                 mov     [esp+0C8h+var_C0], offset aAgf ; "-agF:"
.text:00403BC3                 mov     [esp+0C8h+Locale], ecx
.text:00403BC7                 mov     [esp+0C8h+Category], edx
.text:00403BCA                 call    sub_407E00
.text:00403BCF                 cmp     eax, 0FFFFFFFFh
.text:00403BD2                 jz      loc_403CF8
.text:00403BD8                 cmp     eax, 46h ; 'F'
.text:00403BDB                 jz      loc_403CC4
.text:00403BE1                 cmp     eax, 46h ; 'F'
.text:00403BE4                 jg      loc_403C96
.text:00403BEA                 cmp     eax, 0FFFFFF7Dh
.text:00403BEF                 jz      short loc_403C51
.text:00403BF1                 cmp     eax, 0FFFFFF7Eh
.text:00403BF6                 jz      short loc_403C43
.text:00403BF8
.text:00403BF8 loc_403BF8:                             ; CODE XREF: sub_403B10+18E↓j
.text:00403BF8                 mov     [ebp+var_85], 0
.text:00403BFF                 xor     ecx, ecx
.text:00403C01                 add     esi, ebx
.text:00403C03                 mov     dword_40B830, ecx
.text:00403C09                 mov     ebx, 1
.text:00403C0E
.text:00403C0E loc_403C0E:                             ; CODE XREF: sub_403B10+19F↓j
.text:00403C0E                                         ; sub_403B10+1AF↓j ...
.text:00403C0E                 mov     edx, dword_40B830
.text:00403C14                 cmp     ebx, edx
.text:00403C16                 jge     short loc_403BA0
.text:00403C18                 mov     ecx, [ebp+arg_4]
.text:00403C1B                 lea     eax, [ebx+esi]
.text:00403C1E                 lea     eax, [ecx+eax*4]
.text:00403C21                 mov     ecx, edx
.text:00403C23                 sub     ecx, ebx
.text:00403C25                 mov     ebx, ecx
.text:00403C27                 mov     esi, esi
.text:00403C29                 lea     edi, [edi+0]
.text:00403C30
.text:00403C30 loc_403C30:                             ; CODE XREF: sub_403B10+12A↓j
.text:00403C30                 mov     dword ptr [eax], 0
.text:00403C36                 add     eax, 4
.text:00403C39                 dec     ebx
.text:00403C3A                 jnz     short loc_403C30
.text:00403C3C                 mov     ebx, edx
.text:00403C3E                 jmp     loc_403BA0
.text:00403C43 ; ---------------------------------------------------------------------------
.text:00403C43
.text:00403C43 loc_403C43:                             ; CODE XREF: sub_403B10+E6↑j
.text:00403C43                 mov     [esp+0C8h+Category], 0 ; Code
.text:00403C4A                 call    sub_403430
.text:00403C4A ; ---------------------------------------------------------------------------
.text:00403C4F                 db 0EBh ; ë
.text:00403C50                 db 0BDh ; ½
.text:00403C51 ; ---------------------------------------------------------------------------
.text:00403C51
.text:00403C51 loc_403C51:                             ; CODE XREF: sub_403B10+DF↑j
.text:00403C51                 mov     [esp+0C8h+var_B4], 0
.text:00403C59                 mov     edx, ds:_iob
.text:00403C5F                 mov     dword ptr [esp+0C8h+var_B8], offset aDavidMackenzie ; "David MacKenzie"
.text:00403C67                 mov     dword ptr [esp+0C8h+var_BC], offset a530 ; "5.3.0"
.text:00403C6F                 add     edx, 20h ; ' '
.text:00403C72                 mov     [esp+0C8h+var_C0], offset aGnuCoreutils ; "GNU coreutils"
.text:00403C7A                 mov     [esp+0C8h+Locale], offset stru_403957 ; FILE *
.text:00403C82                 mov     [esp+0C8h+Category], edx ; FILE *
.text:00403C85                 call    sub_407DC0
.text:00403C8A
.text:00403C8A loc_403C8A:                             ; CODE XREF: sub_403B10+310↓j
.text:00403C8A                                         ; sub_403B10+32D↓j ...
.text:00403C8A                 mov     [esp+0C8h+Category], 0 ; Code
.text:00403C91                 call    exit
.text:00403C96 ; ---------------------------------------------------------------------------
.text:00403C96
.text:00403C96 loc_403C96:                             ; CODE XREF: sub_403B10+D4↑j
.text:00403C96                 cmp     eax, 61h ; 'a'
.text:00403C99                 jz      short loc_403CB4
.text:00403C9B                 cmp     eax, 67h ; 'g'
.text:00403C9E                 jnz     loc_403BF8
.text:00403CA4                 mov     [ebp+var_7F], 1
.text:00403CA8                 mov     [ebp+var_7C], 2
.text:00403CAF                 jmp     loc_403C0E
.text:00403CB4 ; ---------------------------------------------------------------------------
.text:00403CB4
.text:00403CB4 loc_403CB4:                             ; CODE XREF: sub_403B10+189↑j
.text:00403CB4                 mov     [ebp+var_7E], 1
.text:00403CB8                 mov     [ebp+var_7C], 1
.text:00403CBF                 jmp     loc_403C0E
.text:00403CC4 ; ---------------------------------------------------------------------------
.text:00403CC4
.text:00403CC4 loc_403CC4:                             ; CODE XREF: sub_403B10+CB↑j
.text:00403CC4                 test    edi, edi
.text:00403CC6                 jz      short loc_403CED
.text:00403CC8                 mov     [esp+0C8h+Category], (offset stru_403957._base+1)
.text:00403CCF                 call    ds:libintl_gettext
.text:00403CD5                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00403CDD                 mov     [esp+0C8h+Category], 1 ; Code
.text:00403CE4                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00403CE8                 call    sub_409770
.text:00403CED
.text:00403CED loc_403CED:                             ; CODE XREF: sub_403B10+1B6↑j
.text:00403CED                 mov     edi, ds:dword_40C1E0
.text:00403CF3                 jmp     loc_403C0E
.text:00403CF8 ; ---------------------------------------------------------------------------
.text:00403CF8
.text:00403CF8 loc_403CF8:                             ; CODE XREF: sub_403B10+C2↑j
.text:00403CF8                 cmp     [ebp+var_7F], 0
.text:00403CFC                 jz      short loc_403D08
.text:00403CFE                 cmp     [ebp+var_7E], 0
.text:00403D02                 jnz     loc_40453F
.text:00403D08
.text:00403D08 loc_403D08:                             ; CODE XREF: sub_403B10+1EC↑j
.text:00403D08                                         ; sub_403B10+A54↓j
.text:00403D08                 movzx   ebx, [ebp+var_85]
.text:00403D0F                 xor     edx, edx
.text:00403D11                 xor     bl, 1
.text:00403D14                 cmp     [ebp+var_7F], 0
.text:00403D18                 movzx   eax, bl
.text:00403D1B                 jnz     short loc_403D23
.text:00403D1D                 cmp     [ebp+var_7E], 0
.text:00403D21                 jz      short loc_403D28
.text:00403D23
.text:00403D23 loc_403D23:                             ; CODE XREF: sub_403B10+20B↑j
.text:00403D23                 mov     edx, 1
.text:00403D28
.text:00403D28 loc_403D28:                             ; CODE XREF: sub_403B10+211↑j
.text:00403D28                 test    edx, eax
.text:00403D2A                 jnz     loc_404515
.text:00403D30
.text:00403D30 loc_403D30:                             ; CODE XREF: sub_403B10+A2A↓j
.text:00403D30                 test    edi, edi
.text:00403D32                 jz      loc_4044F5
.text:00403D38                 mov     dword ptr [ebp+var_90], edi
.text:00403D3E                 mov     [esp+0C8h+Locale], 4 ; OpenFlag
.text:00403D46                 mov     [esp+0C8h+Category], edi ; FileName
.text:00403D49                 call    _open
.text:00403D4E                 mov     [ebp+var_8C], eax
.text:00403D54                 test    eax, eax
.text:00403D56                 js      loc_4044C7
.text:00403D5C
.text:00403D5C loc_403D5C:                             ; CODE XREF: sub_403B10+9E0↓j
.text:00403D5C                 mov     [esp+0C8h+Locale], 3
.text:00403D64                 mov     edx, [ebp+var_8C]
.text:00403D6A                 mov     [esp+0C8h+Category], edx
.text:00403D6D                 call    sub_409E30
.text:00403D72                 cmp     eax, 0FFFFFFFFh
.text:00403D75                 jz      loc_40448E
.text:00403D7B                 mov     [esp+0C8h+Locale], 4
.text:00403D83                 mov     ebx, [ebp+var_8C]
.text:00403D89                 and     eax, 0FFFFFFFBh
.text:00403D8C                 mov     [esp+0C8h+var_C0], eax
.text:00403D90                 mov     [esp+0C8h+Category], ebx
.text:00403D93                 call    sub_409E30
.text:00403D98                 test    eax, eax
.text:00403D9A                 js      loc_40448E
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403B10+9B2↓j
.text:00403DA0                                         ; sub_403B10+A00↓j
.text:00403DA0                 cld
.text:00403DA1                 xor     eax, eax
.text:00403DA3                 lea     edi, [ebp+var_48]
.text:00403DA6                 mov     ecx, 0Bh
.text:00403DAB                 rep stosd
.text:00403DAD                 mov     ebx, [ebp+var_8C]
.text:00403DB3                 lea     eax, [ebp+var_48]
.text:00403DB6                 mov     [esp+0C8h+Locale], eax
.text:00403DBA                 mov     [esp+0C8h+Category], ebx
.text:00403DBD                 call    sub_409CC0
.text:00403DC2                 test    eax, eax
.text:00403DC4                 jnz     loc_404460
.text:00403DCA
.text:00403DCA loc_403DCA:                             ; CODE XREF: sub_403B10+979↓j
.text:00403DCA                 xor     edx, edx
.text:00403DCC                 cmp     [ebp+var_7F], 0
.text:00403DD0                 jnz     short loc_403DD8
.text:00403DD2                 cmp     [ebp+var_7E], 0
.text:00403DD6                 jz      short loc_403DDD
.text:00403DD8
.text:00403DD8 loc_403DD8:                             ; CODE XREF: sub_403B10+2C0↑j
.text:00403DD8                 mov     edx, 1
.text:00403DDD
.text:00403DDD loc_403DDD:                             ; CODE XREF: sub_403B10+2C6↑j
.text:00403DDD                 movzx   ecx, [ebp+var_85]
.text:00403DE4                 or      edx, ecx
.text:00403DE6                 jz      short loc_403E25
.text:00403DE8                 call    sub_404CF0
.text:00403DED                 mov     ds:dword_40C010, eax
.text:00403DF2                 mov     esi, [ebp+var_8C]
.text:00403DF8                 xor     edi, edi
.text:00403DFA                 mov     ds:dword_40C020, edi
.text:00403E00                 mov     eax, dword ptr [ebp+var_90]
.text:00403E06                 lea     ebx, [ebp+var_48]
.text:00403E09                 mov     [esp+0C8h+Locale], ebx
.text:00403E0D                 mov     edx, [ebp+var_7C]
.text:00403E10                 mov     [esp+0C8h+var_C0], esi
.text:00403E14                 mov     dword ptr [esp+0C8h+var_BC], eax
.text:00403E18                 mov     [esp+0C8h+Category], edx
.text:00403E1B                 call    sub_404DF0
.text:00403E20                 jmp     loc_403C8A
.text:00403E25 ; ---------------------------------------------------------------------------
.text:00403E25
.text:00403E25 loc_403E25:                             ; CODE XREF: sub_403B10+2D6↑j
.text:00403E25                 mov     [ebp+var_7D], 0
.text:00403E29                 mov     ecx, 1
.text:00403E2E                 mov     eax, [ebp+arg_0]
.text:00403E31                 mov     [ebp+var_84], ecx
.text:00403E37                 cmp     [ebp+var_84], eax
.text:00403E3D                 jge     loc_403C8A
.text:00403E43                 dec     eax
.text:00403E44                 mov     [ebp+var_98], eax
.text:00403E4A
.text:00403E4A loc_403E4A:                             ; CODE XREF: sub_403B10+462↓j
.text:00403E4A                 mov     [ebp+var_91], 0
.text:00403E51                 mov     eax, [ebp+var_84]
.text:00403E57                 mov     esi, [ebp+arg_4]
.text:00403E5A                 mov     [ebp+var_92], 0
.text:00403E61                 mov     ebx, [esi+eax*4]
.text:00403E64                 test    ebx, ebx
.text:00403E66                 jz      loc_403F63
.text:00403E6C                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:00403E6F                 jz      loc_404452
.text:00403E75
.text:00403E75 loc_403E75:                             ; CODE XREF: sub_403B10+94A↓j
.text:00403E75                 mov     edx, off_40B010 ; "parenb"
.text:00403E7B                 test    edx, edx
.text:00403E7D                 jz      short loc_403EC7
.text:00403E7F                 xor     edi, edi
.text:00403E81                 mov     esi, offset off_40B010 ; "parenb"
.text:00403E86                 mov     [ebp+var_9C], edi
.text:00403E8C
.text:00403E8C loc_403E8C:                             ; CODE XREF: sub_403B10+3A8↓j
.text:00403E8C                 mov     ecx, [esi]
.text:00403E8E                 mov     [esp+0C8h+Category], ebx ; Str1
.text:00403E91                 mov     edi, [ebp+var_9C]
.text:00403E97                 mov     [esp+0C8h+Locale], ecx ; Str2
.text:00403E9B                 call    strcmp
.text:00403EA0                 test    eax, eax
.text:00403EA2                 jz      loc_40441D
.text:00403EA8                 add     esi, 14h
.text:00403EAB                 add     edi, 14h
.text:00403EAE                 mov     eax, [esi]
.text:00403EB0                 mov     [ebp+var_9C], edi
.text:00403EB6                 test    eax, eax
.text:00403EB8                 jnz     short loc_403E8C
.text:00403EBA
.text:00403EBA loc_403EBA:                             ; CODE XREF: sub_403B10+93D↓j
.text:00403EBA                 cmp     [ebp+var_91], 0
.text:00403EC1                 jnz     loc_403F63
.text:00403EC7
.text:00403EC7 loc_403EC7:                             ; CODE XREF: sub_403B10+36D↑j
.text:00403EC7                 cmp     [ebp+var_92], 0
.text:00403ECE                 jnz     loc_4043E0
.text:00403ED4                 mov     eax, off_40B510 ; "intr"
.text:00403ED9                 test    eax, eax
.text:00403EDB                 jz      short loc_403F06
.text:00403EDD                 xor     esi, esi
.text:00403EDF
.text:00403EDF loc_403EDF:                             ; CODE XREF: sub_403B10+3F4↓j
.text:00403EDF                 mov     [esp+0C8h+Category], ebx ; Str1
.text:00403EE2                 mov     edx, off_40B510[esi] ; "intr"
.text:00403EE8                 mov     [esp+0C8h+Locale], edx ; Str2
.text:00403EEC                 call    strcmp
.text:00403EF1                 test    eax, eax
.text:00403EF3                 jz      loc_404368
.text:00403EF9                 add     esi, 0Ch
.text:00403EFC                 mov     edi, off_40B510[esi] ; "intr"
.text:00403F02                 test    edi, edi
.text:00403F04                 jnz     short loc_403EDF
.text:00403F06
.text:00403F06 loc_403F06:                             ; CODE XREF: sub_403B10+3CB↑j
.text:00403F06                 cmp     [ebp+var_91], 0
.text:00403F0D                 jnz     short loc_403F63
.text:00403F0F                 cld
.text:00403F10                 mov     edi, offset aIspeed ; "ispeed"
.text:00403F15                 mov     ecx, 7
.text:00403F1A                 mov     esi, ebx
.text:00403F1C                 repe cmpsb
.text:00403F1E                 jnz     loc_4040A7
.text:00403F24                 mov     esi, [ebp+var_98]
.text:00403F2A                 cmp     [ebp+var_84], esi
.text:00403F30                 jz      loc_40406D
.text:00403F36                 inc     [ebp+var_84]
.text:00403F3C                 lea     ecx, [ebp+var_48]
.text:00403F3F                 mov     eax, [ebp+arg_4]
.text:00403F42                 mov     [esp+0C8h+var_C0], ecx
.text:00403F46                 mov     edx, [ebp+var_84]
.text:00403F4C                 mov     ebx, [eax+edx*4]
.text:00403F4F                 mov     [esp+0C8h+Category], 0
.text:00403F56                 mov     [esp+0C8h+Locale], ebx
.text:00403F5A
.text:00403F5A loc_403F5A:                             ; CODE XREF: sub_403B10+5DA↓j
.text:00403F5A                                         ; sub_403B10+7CB↓j
.text:00403F5A                 call    sub_4049D0
.text:00403F5F
.text:00403F5F loc_403F5F:                             ; CODE XREF: sub_403B10+7E1↓j
.text:00403F5F                                         ; sub_403B10+891↓j
.text:00403F5F                 mov     [ebp+var_7D], 1
.text:00403F63
.text:00403F63 loc_403F63:                             ; CODE XREF: sub_403B10+356↑j
.text:00403F63                                         ; sub_403B10+3B1↑j ...
.text:00403F63                 inc     [ebp+var_84]
.text:00403F69                 mov     edi, [ebp+arg_0]
.text:00403F6C                 cmp     [ebp+var_84], edi
.text:00403F72                 jl      loc_403E4A
.text:00403F78                 cmp     [ebp+var_7D], 0
.text:00403F7C                 jz      loc_403C8A
.text:00403F82                 mov     [esp+0C8h+Locale], 1
.text:00403F8A                 mov     esi, [ebp+var_8C]
.text:00403F90                 lea     edx, [ebp+var_48]
.text:00403F93                 mov     [esp+0C8h+var_C0], edx
.text:00403F97                 mov     [esp+0C8h+Category], esi
.text:00403F9A                 call    sub_409AB0
.text:00403F9F                 test    eax, eax
.text:00403FA1                 jnz     loc_40403F
.text:00403FA7
.text:00403FA7 loc_403FA7:                             ; CODE XREF: sub_403B10+558↓j
.text:00403FA7                 cld
.text:00403FA8                 xor     eax, eax
.text:00403FAA                 lea     edi, [ebp+var_78]
.text:00403FAD                 mov     ecx, 0Bh
.text:00403FB2                 lea     ebx, [ebp+var_78]
.text:00403FB5                 rep stosd
.text:00403FB7                 mov     [esp+0C8h+Locale], ebx
.text:00403FBB                 mov     ecx, [ebp+var_8C]
.text:00403FC1                 mov     [esp+0C8h+Category], ecx
.text:00403FC4                 call    sub_409CC0
.text:00403FC9                 test    eax, eax
.text:00403FCB                 jnz     short loc_404014
.text:00403FCD
.text:00403FCD loc_403FCD:                             ; CODE XREF: sub_403B10+52D↓j
.text:00403FCD                 cld
.text:00403FCE                 mov     ecx, 2Ch ; ','
.text:00403FD3                 lea     esi, [ebp+var_48]
.text:00403FD6                 mov     edi, ebx
.text:00403FD8                 repe cmpsb
.text:00403FDA                 jz      loc_403C8A
.text:00403FE0                 mov     [esp+0C8h+Category], offset aSUnableToPerfo ; "%s: unable to perform all requested ope"...
.text:00403FE7                 call    ds:libintl_gettext
.text:00403FED                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00403FF5                 mov     edx, dword ptr [ebp+var_90]
.text:00403FFB                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404002                 mov     dword ptr [esp+0C8h+var_BC], edx ; char
.text:00404006                 mov     [esp+0C8h+var_C0], eax ; char *
.text:0040400A                 call    sub_409770
.text:0040400F                 jmp     loc_403C8A
.text:00404014 ; ---------------------------------------------------------------------------
.text:00404014
.text:00404014 loc_404014:                             ; CODE XREF: sub_403B10+4BB↑j
.text:00404014                 call    _errno
.text:00404019                 mov     [esp+0C8h+var_C0], offset aS_3 ; "%s"
.text:00404021                 mov     edi, dword ptr [ebp+var_90]
.text:00404027                 mov     dword ptr [esp+0C8h+var_BC], edi ; char
.text:0040402B                 mov     esi, [eax]
.text:0040402D                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404034                 mov     [esp+0C8h+Locale], esi ; ErrorMessage
.text:00404038                 call    sub_409770
.text:0040403D                 jmp     short loc_403FCD
.text:0040403F ; ---------------------------------------------------------------------------
.text:0040403F
.text:0040403F loc_40403F:                             ; CODE XREF: sub_403B10+491↑j
.text:0040403F                 call    _errno
.text:00404044                 mov     [esp+0C8h+var_C0], offset aS_3 ; "%s"
.text:0040404C                 mov     edi, dword ptr [ebp+var_90]
.text:00404052                 mov     dword ptr [esp+0C8h+var_BC], edi ; char
.text:00404056                 mov     ebx, [eax]
.text:00404058                 mov     [esp+0C8h+Category], 1 ; Code
.text:0040405F                 mov     [esp+0C8h+Locale], ebx ; ErrorMessage
.text:00404063                 call    sub_409770
.text:00404068                 jmp     loc_403FA7
.text:0040406D ; ---------------------------------------------------------------------------
.text:0040406D
.text:0040406D loc_40406D:                             ; CODE XREF: sub_403B10+420↑j
.text:0040406D                 mov     [esp+0C8h+Category], offset aMissingArgumen ; "missing argument to `%s'"
.text:00404074                 call    ds:libintl_gettext
.text:0040407A                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:0040407E                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404086                 mov     [esp+0C8h+Category], 0 ; Code
.text:0040408D                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404091                 call    sub_409770
.text:00404096                 mov     [esp+0C8h+Category], 1 ; Code
.text:0040409D                 call    sub_403430
.text:0040409D ; ---------------------------------------------------------------------------
.text:004040A2                 db 0E9h ; é
.text:004040A3                 db  8Fh
.text:004040A4                 db 0FEh ; þ
.text:004040A5                 db 0FFh ; ÿ
.text:004040A6                 db 0FFh ; ÿ
.text:004040A7 ; ---------------------------------------------------------------------------
.text:004040A7
.text:004040A7 loc_4040A7:                             ; CODE XREF: sub_403B10+40E↑j
.text:004040A7                 cld
.text:004040A8                 mov     edi, offset aOspeed ; "ospeed"
.text:004040AD                 mov     ecx, 7
.text:004040B2                 mov     esi, ebx
.text:004040B4                 repe cmpsb
.text:004040B6                 jnz     short loc_404126
.text:004040B8                 mov     edi, [ebp+var_98]
.text:004040BE                 cmp     [ebp+var_84], edi
.text:004040C4                 jz      short loc_4040EF
.text:004040C6                 inc     [ebp+var_84]
.text:004040CC                 lea     edx, [ebp+var_48]
.text:004040CF                 mov     ebx, [ebp+arg_4]
.text:004040D2                 mov     [esp+0C8h+var_C0], edx
.text:004040D6                 mov     eax, [ebp+var_84]
.text:004040DC                 mov     esi, [ebx+eax*4]
.text:004040DF                 mov     [esp+0C8h+Category], 1
.text:004040E6                 mov     [esp+0C8h+Locale], esi
.text:004040EA                 jmp     loc_403F5A
.text:004040EF ; ---------------------------------------------------------------------------
.text:004040EF
.text:004040EF loc_4040EF:                             ; CODE XREF: sub_403B10+5B4↑j
.text:004040EF                 mov     [esp+0C8h+Category], offset aMissingArgumen ; "missing argument to `%s'"
.text:004040F6                 call    ds:libintl_gettext
.text:004040FC                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:00404100                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404108                 mov     [esp+0C8h+Category], 0 ; Code
.text:0040410F                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404113                 call    sub_409770
.text:00404118                 mov     [esp+0C8h+Category], 1 ; Code
.text:0040411F                 call    sub_403430
.text:0040411F ; ---------------------------------------------------------------------------
.text:00404124                 db 0EBh ; ë
.text:00404125                 db 0A0h ;  
.text:00404126 ; ---------------------------------------------------------------------------
.text:00404126
.text:00404126 loc_404126:                             ; CODE XREF: sub_403B10+5A6↑j
.text:00404126                 cld
.text:00404127                 mov     edi, offset aRows ; "rows"
.text:0040412C                 mov     ecx, 5
.text:00404131                 mov     esi, ebx
.text:00404133                 repe cmpsb
.text:00404135                 jnz     loc_4041CE
.text:0040413B                 mov     ecx, [ebp+var_98]
.text:00404141                 cmp     [ebp+var_84], ecx
.text:00404147                 jz      short loc_404194
.text:00404149                 inc     [ebp+var_84]
.text:0040414F                 mov     eax, [ebp+arg_4]
.text:00404152                 mov     [esp+0C8h+Locale], 7FFFFFFFh
.text:0040415A                 mov     ecx, [ebp+var_84]
.text:00404160                 mov     ebx, [eax+ecx*4]
.text:00404163                 mov     [esp+0C8h+Category], ebx
.text:00404166                 call    sub_405A80
.text:0040416B                 mov     [esp+0C8h+Category], eax
.text:0040416E                 mov     esi, dword ptr [ebp+var_90]
.text:00404174                 mov     edi, [ebp+var_8C]
.text:0040417A                 mov     [esp+0C8h+Locale], 0FFFFFFFFh
.text:00404182
.text:00404182 loc_404182:                             ; CODE XREF: sub_403B10+72A↓j
.text:00404182                 mov     dword ptr [esp+0C8h+var_BC], esi
.text:00404186                 mov     [esp+0C8h+var_C0], edi
.text:0040418A                 call    sub_404A40
.text:0040418F                 jmp     loc_403F63
.text:00404194 ; ---------------------------------------------------------------------------
.text:00404194
.text:00404194 loc_404194:                             ; CODE XREF: sub_403B10+637↑j
.text:00404194                 mov     [esp+0C8h+Category], offset aMissingArgumen ; "missing argument to `%s'"
.text:0040419B                 call    ds:libintl_gettext
.text:004041A1                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:004041A5                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004041AD                 mov     [esp+0C8h+Category], 0 ; Code
.text:004041B4                 mov     [esp+0C8h+var_C0], eax ; char *
.text:004041B8                 call    sub_409770
.text:004041BD                 mov     [esp+0C8h+Category], 1 ; Code
.text:004041C4                 call    sub_403430
.text:004041C4 ; ---------------------------------------------------------------------------
.text:004041C9                 db 0E9h ; é
.text:004041CA                 db  7Bh ; {
.text:004041CB                 db 0FFh ; ÿ
.text:004041CC                 db 0FFh ; ÿ
.text:004041CD                 db 0FFh ; ÿ
.text:004041CE ; ---------------------------------------------------------------------------
.text:004041CE
.text:004041CE loc_4041CE:                             ; CODE XREF: sub_403B10+625↑j
.text:004041CE                 cld
.text:004041CF                 mov     edi, offset aCols ; "cols"
.text:004041D4                 mov     ecx, 5
.text:004041D9                 mov     esi, ebx
.text:004041DB                 repe cmpsb
.text:004041DD                 jz      short loc_4041F3
.text:004041DF                 mov     edi, offset aColumns ; "columns"
.text:004041E4                 mov     ecx, 8
.text:004041E9                 mov     esi, ebx
.text:004041EB                 repe cmpsb
.text:004041ED                 jnz     loc_404276
.text:004041F3
.text:004041F3 loc_4041F3:                             ; CODE XREF: sub_403B10+6CD↑j
.text:004041F3                 mov     edx, [ebp+var_98]
.text:004041F9                 cmp     [ebp+var_84], edx
.text:004041FF                 jz      short loc_40423F
.text:00404201                 inc     [ebp+var_84]
.text:00404207                 mov     eax, [ebp+arg_4]
.text:0040420A                 mov     [esp+0C8h+Locale], 7FFFFFFFh
.text:00404212                 mov     ecx, [ebp+var_84]
.text:00404218                 mov     ebx, [eax+ecx*4]
.text:0040421B                 mov     [esp+0C8h+Category], ebx
.text:0040421E                 call    sub_405A80
.text:00404223                 mov     [esp+0C8h+Locale], eax
.text:00404227                 mov     esi, dword ptr [ebp+var_90]
.text:0040422D                 mov     edi, [ebp+var_8C]
.text:00404233                 mov     [esp+0C8h+Category], 0FFFFFFFFh
.text:0040423A                 jmp     loc_404182
.text:0040423F ; ---------------------------------------------------------------------------
.text:0040423F
.text:0040423F loc_40423F:                             ; CODE XREF: sub_403B10+6EF↑j
.text:0040423F                 mov     [esp+0C8h+Category], offset aMissingArgumen ; "missing argument to `%s'"
.text:00404246                 call    ds:libintl_gettext
.text:0040424C                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:00404250                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404258                 mov     [esp+0C8h+Category], 0 ; Code
.text:0040425F                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404263                 call    sub_409770
.text:00404268                 mov     [esp+0C8h+Category], 1 ; Code
.text:0040426F                 call    sub_403430
.text:0040426F ; ---------------------------------------------------------------------------
.text:00404274                 db 0EBh ; ë
.text:00404275                 db  8Bh ; ‹
.text:00404276 ; ---------------------------------------------------------------------------
.text:00404276
.text:00404276 loc_404276:                             ; CODE XREF: sub_403B10+6DD↑j
.text:00404276                 cld
.text:00404277                 mov     edi, offset aSize ; "size"
.text:0040427C                 mov     ecx, 5
.text:00404281                 mov     esi, ebx
.text:00404283                 repe cmpsb
.text:00404285                 jz      loc_404331
.text:0040428B                 cld
.text:0040428C                 mov     edi, offset aSpeed ; "speed"
.text:00404291                 mov     ecx, 6
.text:00404296                 mov     esi, ebx
.text:00404298                 repe cmpsb
.text:0040429A                 jnz     short loc_4042BE
.text:0040429C                 call    sub_404CF0
.text:004042A1                 mov     ds:dword_40C010, eax
.text:004042A6                 lea     ebx, [ebp+var_48]
.text:004042A9                 mov     [esp+0C8h+Locale], 0
.text:004042B1                 mov     [esp+0C8h+Category], ebx
.text:004042B4                 call    sub_4054C0
.text:004042B9                 jmp     loc_403F63
.text:004042BE ; ---------------------------------------------------------------------------
.text:004042BE
.text:004042BE loc_4042BE:                             ; CODE XREF: sub_403B10+78A↑j
.text:004042BE                 mov     [esp+0C8h+Category], ebx
.text:004042C1                 call    sub_405810
.text:004042C6                 inc     eax
.text:004042C7                 jz      short loc_4042E0
.text:004042C9                 mov     [esp+0C8h+Locale], ebx
.text:004042CD                 lea     ecx, [ebp+var_48]
.text:004042D0                 mov     [esp+0C8h+var_C0], ecx
.text:004042D4                 mov     [esp+0C8h+Category], 2
.text:004042DB                 jmp     loc_403F5A
.text:004042E0 ; ---------------------------------------------------------------------------
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_403B10+7B7↑j
.text:004042E0                 mov     [esp+0C8h+Category], ebx ; char *
.text:004042E3                 lea     eax, [ebp+var_48]
.text:004042E6                 mov     [esp+0C8h+Locale], eax ; int
.text:004042EA                 call    sub_405670
.text:004042EF                 test    al, al
.text:004042F1                 jnz     loc_403F5F
.text:004042F7                 mov     [esp+0C8h+Category], offset aInvalidArgumen ; "invalid argument `%s'"
.text:004042FE                 call    ds:libintl_gettext
.text:00404304                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:00404308                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404310                 mov     [esp+0C8h+Category], 0 ; Code
.text:00404317                 mov     [esp+0C8h+var_C0], eax ; char *
.text:0040431B                 call    sub_409770
.text:00404320                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404327                 call    sub_403430
.text:00404327 ; ---------------------------------------------------------------------------
.text:0040432C                 db 0E9h ; é
.text:0040432D                 db  2Eh ; .
.text:0040432E                 db 0FCh ; ü
.text:0040432F                 db 0FFh ; ÿ
.text:00404330                 db 0FFh ; ÿ
.text:00404331 ; ---------------------------------------------------------------------------
.text:00404331
.text:00404331 loc_404331:                             ; CODE XREF: sub_403B10+775↑j
.text:00404331                 call    sub_404CF0
.text:00404336                 mov     ds:dword_40C010, eax
.text:0040433B                 mov     edx, dword ptr [ebp+var_90]
.text:00404341                 xor     esi, esi
.text:00404343                 mov     ds:dword_40C020, esi
.text:00404349                 mov     edi, [ebp+var_8C]
.text:0040434F                 mov     [esp+0C8h+Category], 0
.text:00404356                 mov     [esp+0C8h+var_C0], edx
.text:0040435A                 mov     [esp+0C8h+Locale], edi
.text:0040435E                 call    sub_404C10
.text:00404363                 jmp     loc_403F63
.text:00404368 ; ---------------------------------------------------------------------------
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: sub_403B10+3E3↑j
.text:00404368                 mov     edi, [ebp+var_98]
.text:0040436E                 cmp     [ebp+var_84], edi
.text:00404374                 jz      short loc_4043A6
.text:00404376                 inc     [ebp+var_84]
.text:0040437C                 lea     edx, [ebp+var_48]
.text:0040437F                 mov     eax, [ebp+arg_4]
.text:00404382                 mov     [esp+0C8h+var_C0], edx
.text:00404386                 lea     ebx, off_40B510[esi] ; "intr"
.text:0040438C                 mov     ecx, [ebp+var_84]
.text:00404392                 mov     edi, [eax+ecx*4]
.text:00404395                 mov     [esp+0C8h+Category], ebx
.text:00404398                 mov     [esp+0C8h+Locale], edi
.text:0040439C                 call    sub_4048E0
.text:004043A1                 jmp     loc_403F5F
.text:004043A6 ; ---------------------------------------------------------------------------
.text:004043A6
.text:004043A6 loc_4043A6:                             ; CODE XREF: sub_403B10+864↑j
.text:004043A6                 mov     [esp+0C8h+Category], offset aMissingArgumen ; "missing argument to `%s'"
.text:004043AD                 call    ds:libintl_gettext
.text:004043B3                 mov     dword ptr [esp+0C8h+var_BC], ebx ; char
.text:004043B7                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004043BF                 mov     [esp+0C8h+Category], 0 ; Code
.text:004043C6                 mov     [esp+0C8h+var_C0], eax ; char *
.text:004043CA                 call    sub_409770
.text:004043CF                 mov     [esp+0C8h+Category], 1 ; Code
.text:004043D6                 call    sub_403430
.text:004043D6 ; ---------------------------------------------------------------------------
.text:004043DB                 db 0EBh ; ë
.text:004043DC                 db  99h ; ™
.text:004043DD                 align 10h
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_403B10+3BE↑j
.text:004043E0                 mov     [esp+0C8h+Category], offset aInvalidArgumen ; "invalid argument `%s'"
.text:004043E7                 call    ds:libintl_gettext
.text:004043ED                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:004043F5                 lea     ecx, [ebx-1]
.text:004043F8                 mov     dword ptr [esp+0C8h+var_BC], ecx ; char
.text:004043FC                 mov     [esp+0C8h+Category], 0 ; Code
.text:00404403                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404407                 call    sub_409770
.text:0040440C                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404413                 call    sub_403430
.text:00404413 ; ---------------------------------------------------------------------------
.text:00404418                 db 0E9h ; é
.text:00404419                 db 0B7h ; ·
.text:0040441A                 db 0FAh ; ú
.text:0040441B                 db 0FFh ; ÿ
.text:0040441C                 db 0FFh ; ÿ
.text:0040441D ; ---------------------------------------------------------------------------
.text:0040441D
.text:0040441D loc_40441D:                             ; CODE XREF: sub_403B10+392↑j
.text:0040441D                 movzx   edx, [ebp+var_92]
.text:00404424                 lea     edi, [ebp+var_48]
.text:00404427                 mov     esi, [ebp+var_9C]
.text:0040442D                 mov     [esp+0C8h+var_C0], edi
.text:00404431                 add     esi, offset off_40B010 ; "parenb"
.text:00404437                 mov     [esp+0C8h+Locale], edx
.text:0040443B                 mov     [esp+0C8h+Category], esi
.text:0040443E                 call    sub_404570
.text:00404443                 mov     [ebp+var_91], al
.text:00404449                 mov     [ebp+var_7D], 1
.text:0040444D                 jmp     loc_403EBA
.text:00404452 ; ---------------------------------------------------------------------------
.text:00404452
.text:00404452 loc_404452:                             ; CODE XREF: sub_403B10+35F↑j
.text:00404452                 mov     [ebp+var_92], 1
.text:00404459                 inc     ebx
.text:0040445A                 jmp     loc_403E75
.text:0040445A ; ---------------------------------------------------------------------------
.text:0040445F                 align 10h
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_403B10+2B4↑j
.text:00404460                 call    _errno
.text:00404465                 mov     [esp+0C8h+var_C0], offset aS_3 ; "%s"
.text:0040446D                 mov     edi, dword ptr [ebp+var_90]
.text:00404473                 mov     dword ptr [esp+0C8h+var_BC], edi ; char
.text:00404477                 mov     esi, [eax]
.text:00404479                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404480                 mov     [esp+0C8h+Locale], esi ; ErrorMessage
.text:00404484                 call    sub_409770
.text:00404489                 jmp     loc_403DCA
.text:0040448E ; ---------------------------------------------------------------------------
.text:0040448E
.text:0040448E loc_40448E:                             ; CODE XREF: sub_403B10+265↑j
.text:0040448E                                         ; sub_403B10+28A↑j
.text:0040448E                 mov     [esp+0C8h+Category], offset aSCouldnTResetN ; "%s: couldn't reset non-blocking mode"
.text:00404495                 call    ds:libintl_gettext
.text:0040449B                 mov     edi, eax
.text:0040449D                 call    _errno
.text:004044A2                 mov     [esp+0C8h+var_C0], edi ; char *
.text:004044A6                 mov     ecx, dword ptr [ebp+var_90]
.text:004044AC                 mov     dword ptr [esp+0C8h+var_BC], ecx ; char
.text:004044B0                 mov     esi, [eax]
.text:004044B2                 mov     [esp+0C8h+Category], 1 ; Code
.text:004044B9                 mov     [esp+0C8h+Locale], esi ; ErrorMessage
.text:004044BD                 call    sub_409770
.text:004044C2                 jmp     loc_403DA0
.text:004044C7 ; ---------------------------------------------------------------------------
.text:004044C7
.text:004044C7 loc_4044C7:                             ; CODE XREF: sub_403B10+246↑j
.text:004044C7                 call    _errno
.text:004044CC                 mov     [esp+0C8h+var_C0], offset aS_3 ; "%s"
.text:004044D4                 mov     ecx, dword ptr [ebp+var_90]
.text:004044DA                 mov     dword ptr [esp+0C8h+var_BC], ecx ; char
.text:004044DE                 mov     edi, [eax]
.text:004044E0                 mov     [esp+0C8h+Category], 1 ; Code
.text:004044E7                 mov     [esp+0C8h+Locale], edi ; ErrorMessage
.text:004044EB                 call    sub_409770
.text:004044F0                 jmp     loc_403D5C
.text:004044F5 ; ---------------------------------------------------------------------------
.text:004044F5
.text:004044F5 loc_4044F5:                             ; CODE XREF: sub_403B10+222↑j
.text:004044F5                 mov     [esp+0C8h+Category], offset aStandardInput ; "standard input"
.text:004044FC                 xor     edx, edx
.text:004044FE                 mov     [ebp+var_8C], edx
.text:00404504                 call    ds:libintl_gettext
.text:0040450A                 mov     dword ptr [ebp+var_90], eax
.text:00404510                 jmp     loc_403DA0
.text:00404515 ; ---------------------------------------------------------------------------
.text:00404515
.text:00404515 loc_404515:                             ; CODE XREF: sub_403B10+21A↑j
.text:00404515                 mov     [esp+0C8h+Category], offset aWhenSpecifying ; "when specifying an output style, modes "...
.text:0040451C                 call    ds:libintl_gettext
.text:00404522                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:0040452A                 mov     [esp+0C8h+Category], 1 ; Code
.text:00404531                 mov     [esp+0C8h+var_C0], eax ; char *
.text:00404535                 call    sub_409770
.text:0040453A                 jmp     loc_403D30
.text:0040453F ; ---------------------------------------------------------------------------
.text:0040453F
.text:0040453F loc_40453F:                             ; CODE XREF: sub_403B10+1F2↑j
.text:0040453F                 mov     [esp+0C8h+Category], offset aTheOptionsForV ; "the options for verbose and stty-readab"...
.text:00404546                 call    ds:libintl_gettext
.text:0040454C                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:00404554                 mov     [esp+0C8h+Category], 1 ; Code
.text:0040455B                 mov     [esp+0C8h+var_C0], eax ; char *
.text:0040455F                 call    sub_409770
.text:00404564                 jmp     loc_403D08
.text:00404564 sub_403B10      endp
.text:00404564
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404569                 align 10h
.text:00404570
.text:00404570 ; =============== S U B R O U T I N E =======================================
.text:00404570
.text:00404570
.text:00404570 sub_404570      proc near               ; CODE XREF: sub_403B10+92E↑p
.text:00404570
.text:00404570 var_1C          = dword ptr -1Ch
.text:00404570 var_18          = dword ptr -18h
.text:00404570 var_14          = dword ptr -14h
.text:00404570 var_10          = dword ptr -10h
.text:00404570 var_C           = dword ptr -0Ch
.text:00404570 var_8           = dword ptr -8
.text:00404570 var_4           = dword ptr -4
.text:00404570 arg_0           = dword ptr  4
.text:00404570 arg_4           = byte ptr  8
.text:00404570 arg_8           = dword ptr  0Ch
.text:00404570
.text:00404570                 sub     esp, 1Ch
.text:00404573                 mov     [esp+1Ch+var_10], ebx
.text:00404577                 movzx   ebx, [esp+1Ch+arg_4]
.text:0040457C                 mov     [esp+1Ch+var_C], esi
.text:00404580                 mov     esi, [esp+1Ch+arg_0]
.text:00404584                 mov     [esp+1Ch+var_4], ebp
.text:00404588                 test    bl, bl
.text:0040458A                 mov     ebp, [esp+1Ch+arg_8]
.text:0040458E                 mov     [esp+1Ch+var_8], edi
.text:00404592                 jz      short loc_4045B0
.text:00404594                 test    byte ptr [esi+8], 4
.text:00404598                 jnz     short loc_4045B0
.text:0040459A                 xor     eax, eax
.text:0040459C
.text:0040459C loc_40459C:                             ; CODE XREF: sub_404570+70↓j
.text:0040459C                 mov     ebx, [esp+1Ch+var_10]
.text:004045A0                 mov     esi, [esp+1Ch+var_C]
.text:004045A4                 mov     edi, [esp+1Ch+var_8]
.text:004045A8                 mov     ebp, [esp+1Ch+var_4]
.text:004045AC                 add     esp, 1Ch
.text:004045AF                 retn
.text:004045B0 ; ---------------------------------------------------------------------------
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_404570+22↑j
.text:004045B0                                         ; sub_404570+28↑j
.text:004045B0                 mov     [esp+1Ch+var_18], ebp
.text:004045B4                 mov     edx, [esi+4]
.text:004045B7                 mov     [esp+1Ch+var_1C], edx
.text:004045BA                 call    sub_404D90
.text:004045BF                 test    eax, eax
.text:004045C1                 mov     ecx, eax
.text:004045C3                 jz      short loc_4045F4
.text:004045C5                 test    bl, bl
.text:004045C7                 jz      short loc_4045E2
.text:004045C9                 mov     ebx, [esi+10h]
.text:004045CC                 mov     eax, [eax]
.text:004045CE                 mov     ebp, [esi+0Ch]
.text:004045D1                 not     ebx
.text:004045D3                 and     ebx, eax
.text:004045D5                 not     ebp
.text:004045D7                 and     ebx, ebp
.text:004045D9                 mov     [ecx], ebx
.text:004045DB
.text:004045DB loc_4045DB:                             ; CODE XREF: sub_404570+82↓j
.text:004045DB                                         ; sub_404570+BF↓j ...
.text:004045DB                 mov     eax, 1
.text:004045E0                 jmp     short loc_40459C
.text:004045E2 ; ---------------------------------------------------------------------------
.text:004045E2
.text:004045E2 loc_4045E2:                             ; CODE XREF: sub_404570+57↑j
.text:004045E2                 mov     edx, [esi+10h]
.text:004045E5                 mov     ebx, [eax]
.text:004045E7                 mov     edi, [esi+0Ch]
.text:004045EA                 not     edx
.text:004045EC                 and     edx, ebx
.text:004045EE                 or      edx, edi
.text:004045F0                 mov     [eax], edx
.text:004045F2                 jmp     short loc_4045DB
.text:004045F4 ; ---------------------------------------------------------------------------
.text:004045F4
.text:004045F4 loc_4045F4:                             ; CODE XREF: sub_404570+53↑j
.text:004045F4                 cld
.text:004045F5                 mov     esi, [esi]
.text:004045F7                 mov     edi, offset aEvenp ; "evenp"
.text:004045FC                 mov     ecx, 6
.text:00404601                 mov     [esp+1Ch+var_14], esi
.text:00404605                 repe cmpsb
.text:00404607                 jz      short loc_40461B
.text:00404609                 mov     esi, [esp+1Ch+var_14]
.text:0040460D                 mov     edi, offset aParity ; "parity"
.text:00404612                 mov     ecx, 7
.text:00404617                 repe cmpsb
.text:00404619                 jnz     short loc_404640
.text:0040461B
.text:0040461B loc_40461B:                             ; CODE XREF: sub_404570+97↑j
.text:0040461B                 test    bl, bl
.text:0040461D                 jnz     short loc_404631
.text:0040461F                 mov     eax, [ebp+8]
.text:00404622                 and     eax, 0FFFFDCFFh
.text:00404627                 or      eax, 1200h
.text:0040462C
.text:0040462C loc_40462C:                             ; CODE XREF: sub_404570+CE↓j
.text:0040462C                                         ; sub_404570+F4↓j
.text:0040462C                 mov     [ebp+8], eax
.text:0040462F                 jmp     short loc_4045DB
.text:00404631 ; ---------------------------------------------------------------------------
.text:00404631
.text:00404631 loc_404631:                             ; CODE XREF: sub_404570+AD↑j
.text:00404631                                         ; sub_404570+E5↓j
.text:00404631                 mov     eax, [ebp+8]
.text:00404634                 and     eax, 0FFFFECFFh
.text:00404639                 or      eax, 300h
.text:0040463E                 jmp     short loc_40462C
.text:00404640 ; ---------------------------------------------------------------------------
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_404570+A9↑j
.text:00404640                 cld
.text:00404641                 mov     esi, [esp+1Ch+var_14]
.text:00404645                 mov     edi, offset aOddp ; "oddp"
.text:0040464A                 mov     ecx, 5
.text:0040464F                 repe cmpsb
.text:00404651                 jnz     short loc_404666
.text:00404653                 test    bl, bl
.text:00404655                 jnz     short loc_404631
.text:00404657                 mov     eax, [ebp+8]
.text:0040465A                 and     eax, 0FFFFFCFFh
.text:0040465F                 or      eax, 3200h
.text:00404664                 jmp     short loc_40462C
.text:00404666 ; ---------------------------------------------------------------------------
.text:00404666
.text:00404666 loc_404666:                             ; CODE XREF: sub_404570+E1↑j
.text:00404666                 cld
.text:00404667                 mov     esi, [esp+1Ch+var_14]
.text:0040466B                 mov     edi, offset aNl ; "nl"
.text:00404670                 mov     ecx, 3
.text:00404675                 repe cmpsb
.text:00404677                 jnz     short loc_4046A8
.text:00404679                 test    bl, bl
.text:0040467B                 jz      short loc_404698
.text:0040467D                 or      dword ptr [ebp+4], 2
.text:00404681                 mov     edx, [ebp+0]
.text:00404684                 or      edx, 100h
.text:0040468A                 and     edx, 0FFFFFF3Fh
.text:00404690                 mov     [ebp+0], edx
.text:00404693                 jmp     loc_4045DB
.text:00404698 ; ---------------------------------------------------------------------------
.text:00404698
.text:00404698 loc_404698:                             ; CODE XREF: sub_404570+10B↑j
.text:00404698                 and     dword ptr [ebp+0], 0FFFFFEFFh
.text:0040469F                 and     dword ptr [ebp+4], 0FFFFFFFDh
.text:004046A3                 jmp     loc_4045DB
.text:004046A8 ; ---------------------------------------------------------------------------
.text:004046A8
.text:004046A8 loc_4046A8:                             ; CODE XREF: sub_404570+107↑j
.text:004046A8                 cld
.text:004046A9                 mov     esi, [esp+1Ch+var_14]
.text:004046AD                 mov     edi, offset aEk ; "ek"
.text:004046B2                 mov     ecx, 3
.text:004046B7                 repe cmpsb
.text:004046B9                 jnz     short loc_4046C8
.text:004046BB                 mov     byte ptr [ebp+13h], 7Fh
.text:004046BF                 mov     byte ptr [ebp+15h], 15h
.text:004046C3                 jmp     loc_4045DB
.text:004046C8 ; ---------------------------------------------------------------------------
.text:004046C8
.text:004046C8 loc_4046C8:                             ; CODE XREF: sub_404570+149↑j
.text:004046C8                 cld
.text:004046C9                 mov     esi, [esp+1Ch+var_14]
.text:004046CD                 mov     edi, offset aSane ; "sane"
.text:004046D2                 mov     ecx, 5
.text:004046D7                 repe cmpsb
.text:004046D9                 jz      loc_4048C1
.text:004046DF                 cld
.text:004046E0                 mov     esi, [esp+1Ch+var_14]
.text:004046E4                 mov     edi, offset aCbreak ; "cbreak"
.text:004046E9                 mov     ecx, 7
.text:004046EE                 repe cmpsb
.text:004046F0                 jnz     short loc_40470E
.text:004046F2                 test    bl, bl
.text:004046F4                 jz      short loc_404702
.text:004046F6                 or      dword ptr [ebp+0Ch], 100h
.text:004046FD                 jmp     loc_4045DB
.text:00404702 ; ---------------------------------------------------------------------------
.text:00404702
.text:00404702 loc_404702:                             ; CODE XREF: sub_404570+184↑j
.text:00404702                 and     dword ptr [ebp+0Ch], 0FFFFFEFFh
.text:00404709                 jmp     loc_4045DB
.text:0040470E ; ---------------------------------------------------------------------------
.text:0040470E
.text:0040470E loc_40470E:                             ; CODE XREF: sub_404570+180↑j
.text:0040470E                 cld
.text:0040470F                 mov     esi, [esp+1Ch+var_14]
.text:00404713                 mov     edi, offset aPass8 ; "pass8"
.text:00404718                 mov     ecx, 6
.text:0040471D                 repe cmpsb
.text:0040471F                 jnz     short loc_40475B
.text:00404721                 test    bl, bl
.text:00404723                 jz      short loc_404740
.text:00404725                 or      dword ptr [ebp+0], 20h
.text:00404729                 mov     ecx, [ebp+8]
.text:0040472C                 and     ecx, 0FFFFFCFFh
.text:00404732                 or      ecx, 1200h
.text:00404738                 mov     [ebp+8], ecx
.text:0040473B                 jmp     loc_4045DB
.text:00404740 ; ---------------------------------------------------------------------------
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_404570+1B3↑j
.text:00404740                 and     dword ptr [ebp+0], 0FFFFFFDFh
.text:00404744                 mov     ebx, [ebp+8]
.text:00404747                 and     ebx, 0FFFFECFFh
.text:0040474D                 or      ebx, 300h
.text:00404753                 mov     [ebp+8], ebx
.text:00404756                 jmp     loc_4045DB
.text:0040475B ; ---------------------------------------------------------------------------
.text:0040475B
.text:0040475B loc_40475B:                             ; CODE XREF: sub_404570+1AF↑j
.text:0040475B                 cld
.text:0040475C                 mov     esi, [esp+1Ch+var_14]
.text:00404760                 mov     edi, offset aLitout ; "litout"
.text:00404765                 mov     ecx, 7
.text:0040476A                 repe cmpsb
.text:0040476C                 jnz     short loc_4047B0
.text:0040476E                 test    bl, bl
.text:00404770                 jz      short loc_404791
.text:00404772                 or      dword ptr [ebp+0], 20h
.text:00404776                 mov     esi, [ebp+8]
.text:00404779                 or      dword ptr [ebp+4], 1
.text:0040477D                 and     esi, 0FFFFFCFFh
.text:00404783                 or      esi, 1200h
.text:00404789                 mov     [ebp+8], esi
.text:0040478C                 jmp     loc_4045DB
.text:00404791 ; ---------------------------------------------------------------------------
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_404570+200↑j
.text:00404791                 and     dword ptr [ebp+0], 0FFFFFFDFh
.text:00404795                 mov     edi, [ebp+8]
.text:00404798                 and     dword ptr [ebp+4], 0FFFFFFFEh
.text:0040479C                 and     edi, 0FFFFECFFh
.text:004047A2                 or      edi, 300h
.text:004047A8                 mov     [ebp+8], edi
.text:004047AB                 jmp     loc_4045DB
.text:004047B0 ; ---------------------------------------------------------------------------
.text:004047B0
.text:004047B0 loc_4047B0:                             ; CODE XREF: sub_404570+1FC↑j
.text:004047B0                 cld
.text:004047B1                 mov     esi, [esp+1Ch+var_14]
.text:004047B5                 mov     edi, offset aRaw ; "raw"
.text:004047BA                 mov     ecx, 4
.text:004047BF                 repe cmpsb
.text:004047C1                 jz      short loc_4047D5
.text:004047C3                 mov     esi, [esp+1Ch+var_14]
.text:004047C7                 mov     edi, offset aCooked ; "cooked"
.text:004047CC                 mov     ecx, 7
.text:004047D1                 repe cmpsb
.text:004047D3                 jnz     short loc_404824
.text:004047D5
.text:004047D5 loc_4047D5:                             ; CODE XREF: sub_404570+251↑j
.text:004047D5                 mov     ecx, [esp+1Ch+var_14]
.text:004047D9                 movzx   eax, byte ptr [ecx]
.text:004047DC                 cmp     al, 72h ; 'r'
.text:004047DE                 jz      short loc_40481E
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_404570+2B2↓j
.text:004047E0                 cmp     al, 63h ; 'c'
.text:004047E2                 jz      short loc_404803
.text:004047E4
.text:004047E4 loc_4047E4:                             ; CODE XREF: sub_404570+295↓j
.text:004047E4                 and     dword ptr [ebp+4], 0FFFFFFFEh
.text:004047E8                 and     dword ptr [ebp+0Ch], 0FFFFFE7Fh
.text:004047EF                 mov     dword ptr [ebp+0], 0
.text:004047F6                 mov     byte ptr [ebp+20h], 1
.text:004047FA                 mov     byte ptr [ebp+21h], 0
.text:004047FE                 jmp     loc_4045DB
.text:00404803 ; ---------------------------------------------------------------------------
.text:00404803
.text:00404803 loc_404803:                             ; CODE XREF: sub_404570+272↑j
.text:00404803                 test    bl, bl
.text:00404805                 jnz     short loc_4047E4
.text:00404807
.text:00404807 loc_404807:                             ; CODE XREF: sub_404570+2B0↓j
.text:00404807                 or      dword ptr [ebp+0], 326h
.text:0040480E                 or      dword ptr [ebp+4], 1
.text:00404812                 or      dword ptr [ebp+0Ch], 180h
.text:00404819                 jmp     loc_4045DB
.text:0040481E ; ---------------------------------------------------------------------------
.text:0040481E
.text:0040481E loc_40481E:                             ; CODE XREF: sub_404570+26E↑j
.text:0040481E                 test    bl, bl
.text:00404820                 jnz     short loc_404807
.text:00404822                 jmp     short loc_4047E0
.text:00404824 ; ---------------------------------------------------------------------------
.text:00404824
.text:00404824 loc_404824:                             ; CODE XREF: sub_404570+263↑j
.text:00404824                 cld
.text:00404825                 mov     esi, [esp+1Ch+var_14]
.text:00404829                 mov     edi, offset aDecctlq ; "decctlq"
.text:0040482E                 mov     ecx, 8
.text:00404833                 repe cmpsb
.text:00404835                 jnz     short loc_404853
.text:00404837                 test    bl, bl
.text:00404839                 jz      short loc_404847
.text:0040483B                 or      dword ptr [ebp+0], 800h
.text:00404842                 jmp     loc_4045DB
.text:00404847 ; ---------------------------------------------------------------------------
.text:00404847
.text:00404847 loc_404847:                             ; CODE XREF: sub_404570+2C9↑j
.text:00404847                                         ; sub_404570+34F↓j
.text:00404847                 and     dword ptr [ebp+0], 0FFFFF7FFh
.text:0040484E                 jmp     loc_4045DB
.text:00404853 ; ---------------------------------------------------------------------------
.text:00404853
.text:00404853 loc_404853:                             ; CODE XREF: sub_404570+2C5↑j
.text:00404853                 cld
.text:00404854                 mov     esi, [esp+1Ch+var_14]
.text:00404858                 mov     edi, offset aTabs ; "tabs"
.text:0040485D                 mov     ecx, 5
.text:00404862                 repe cmpsb
.text:00404864                 jnz     short loc_40487C
.text:00404866                 test    bl, bl
.text:00404868                 jz      short loc_404873
.text:0040486A                 or      dword ptr [ebp+4], 4
.text:0040486E                 jmp     loc_4045DB
.text:00404873 ; ---------------------------------------------------------------------------
.text:00404873
.text:00404873 loc_404873:                             ; CODE XREF: sub_404570+2F8↑j
.text:00404873                 and     dword ptr [ebp+4], 0FFFFFFFBh
.text:00404877                 jmp     loc_4045DB
.text:0040487C ; ---------------------------------------------------------------------------
.text:0040487C
.text:0040487C loc_40487C:                             ; CODE XREF: sub_404570+2F4↑j
.text:0040487C                 cld
.text:0040487D                 mov     esi, [esp+1Ch+var_14]
.text:00404881                 mov     edi, offset aCrt ; "crt"
.text:00404886                 mov     ecx, 4
.text:0040488B                 repe cmpsb
.text:0040488D                 jnz     short loc_404898
.text:0040488F                 or      dword ptr [ebp+0Ch], 43h
.text:00404893                 jmp     loc_4045DB
.text:00404898 ; ---------------------------------------------------------------------------
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_404570+31D↑j
.text:00404898                 cld
.text:00404899                 mov     esi, [esp+1Ch+var_14]
.text:0040489D                 mov     edi, offset aDec ; "dec"
.text:004048A2                 mov     ecx, 4
.text:004048A7                 repe cmpsb
.text:004048A9                 jnz     loc_4045DB
.text:004048AF                 or      dword ptr [ebp+0Ch], 43h
.text:004048B3                 mov     byte ptr [ebp+18h], 3
.text:004048B7                 mov     byte ptr [ebp+13h], 7Fh
.text:004048BB                 mov     byte ptr [ebp+15h], 15h
.text:004048BF                 jmp     short loc_404847
.text:004048C1 ; ---------------------------------------------------------------------------
.text:004048C1
.text:004048C1 loc_4048C1:                             ; CODE XREF: sub_404570+169↑j
.text:004048C1                 mov     [esp+1Ch+var_1C], ebp
.text:004048C4                 call    sub_4058A0
.text:004048C9                 jmp     loc_4045DB
.text:004048C9 sub_404570      endp
.text:004048C9
.text:004048C9 ; ---------------------------------------------------------------------------
.text:004048CE word_4048CE     dw 2D5Eh                ; DATA XREF: sub_4048E0+89↓o
.text:004048D0                 db 0
.text:004048D1 aUndef          db 'undef',0            ; DATA XREF: sub_4048E0+9B↓o
.text:004048D7                 align 10h
.text:004048E0
.text:004048E0 ; =============== S U B R O U T I N E =======================================
.text:004048E0
.text:004048E0
.text:004048E0 sub_4048E0      proc near               ; CODE XREF: sub_403B10+88C↑p
.text:004048E0
.text:004048E0 var_1C          = dword ptr -1Ch
.text:004048E0 var_18          = dword ptr -18h
.text:004048E0 var_11          = byte ptr -11h
.text:004048E0 var_10          = dword ptr -10h
.text:004048E0 var_C           = dword ptr -0Ch
.text:004048E0 var_8           = dword ptr -8
.text:004048E0 var_4           = dword ptr -4
.text:004048E0 arg_0           = dword ptr  4
.text:004048E0 arg_4           = dword ptr  8
.text:004048E0 arg_8           = dword ptr  0Ch
.text:004048E0
.text:004048E0                 cld
.text:004048E1                 sub     esp, 1Ch
.text:004048E4                 mov     edx, [esp+1Ch+arg_0]
.text:004048E8                 mov     [esp+1Ch+var_C], esi
.text:004048EC                 mov     ecx, 4
.text:004048F1                 mov     [esp+1Ch+var_8], edi
.text:004048F5                 mov     edi, offset aMin ; "min"
.text:004048FA                 mov     [esp+1Ch+var_4], ebp
.text:004048FE                 mov     ebp, [esp+1Ch+arg_4]
.text:00404902                 mov     [esp+1Ch+var_10], ebx
.text:00404906                 mov     ebx, [edx]
.text:00404908                 mov     esi, ebx
.text:0040490A                 repe cmpsb
.text:0040490C                 jz      loc_4049A0
.text:00404912                 mov     edi, offset aTime ; "time"
.text:00404917                 mov     ecx, 5
.text:0040491C                 mov     esi, ebx
.text:0040491E                 repe cmpsb
.text:00404920                 jz      loc_4049A0
.text:00404926                 movzx   eax, byte ptr [ebp+0]
.text:0040492A                 test    al, al
.text:0040492C                 mov     [esp+1Ch+var_11], al
.text:00404930                 jz      short loc_40493A
.text:00404932                 movzx   ebx, byte ptr [ebp+1]
.text:00404936                 test    bl, bl
.text:00404938                 jnz     short loc_404963
.text:0040493A
.text:0040493A loc_40493A:                             ; CODE XREF: sub_4048E0+50↑j
.text:0040493A                 movzx   ecx, [esp+1Ch+var_11]
.text:0040493F                 nop
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_4048E0+AA↓j
.text:00404940                                         ; sub_4048E0+D2↓j ...
.text:00404940                 mov     edi, [esp+1Ch+arg_0]
.text:00404944                 mov     esi, [esp+1Ch+arg_8]
.text:00404948                 mov     ebx, [edi+8]
.text:0040494B                 mov     [ebx+esi+10h], cl
.text:0040494F                 mov     ebx, [esp+1Ch+var_10]
.text:00404953                 mov     esi, [esp+1Ch+var_C]
.text:00404957                 mov     edi, [esp+1Ch+var_8]
.text:0040495B                 mov     ebp, [esp+1Ch+var_4]
.text:0040495F                 add     esp, 1Ch
.text:00404962                 retn
.text:00404963 ; ---------------------------------------------------------------------------
.text:00404963
.text:00404963 loc_404963:                             ; CODE XREF: sub_4048E0+58↑j
.text:00404963                 cld
.text:00404964                 mov     edx, 3
.text:00404969                 mov     edi, offset word_4048CE
.text:0040496E                 mov     esi, ebp
.text:00404970                 mov     ecx, edx
.text:00404972                 repe cmpsb
.text:00404974                 jz      short loc_404988
.text:00404976                 mov     edx, 6
.text:0040497B                 mov     edi, offset aUndef ; "undef"
.text:00404980                 mov     esi, ebp
.text:00404982                 mov     ecx, edx
.text:00404984                 repe cmpsb
.text:00404986                 jnz     short loc_40498C
.text:00404988
.text:00404988 loc_404988:                             ; CODE XREF: sub_4048E0+94↑j
.text:00404988                 xor     ecx, ecx
.text:0040498A                 jmp     short loc_404940
.text:0040498C ; ---------------------------------------------------------------------------
.text:0040498C
.text:0040498C loc_40498C:                             ; CODE XREF: sub_4048E0+A6↑j
.text:0040498C                 cmp     [esp+1Ch+var_11], 5Eh ; '^'
.text:00404991                 jz      short loc_4049B4
.text:00404993                 lea     esi, [esi+0]
.text:00404999                 lea     edi, [edi+0]
.text:004049A0
.text:004049A0 loc_4049A0:                             ; CODE XREF: sub_4048E0+2C↑j
.text:004049A0                                         ; sub_4048E0+40↑j
.text:004049A0                 mov     [esp+1Ch+var_18], 0FFh
.text:004049A8                 mov     [esp+1Ch+var_1C], ebp
.text:004049AB                 call    sub_405A80
.text:004049B0                 mov     ecx, eax
.text:004049B2                 jmp     short loc_404940
.text:004049B4 ; ---------------------------------------------------------------------------
.text:004049B4
.text:004049B4 loc_4049B4:                             ; CODE XREF: sub_4048E0+B1↑j
.text:004049B4                 cmp     bl, 3Fh ; '?'
.text:004049B7                 mov     ecx, 7Fh
.text:004049BC                 jz      short loc_404940
.text:004049BE                 mov     ecx, ebx
.text:004049C0                 and     ecx, 9Fh
.text:004049C6                 jmp     loc_404940
.text:004049C6 sub_4048E0      endp
.text:004049C6
.text:004049C6 ; ---------------------------------------------------------------------------
.text:004049CB                 align 10h
.text:004049D0
.text:004049D0 ; =============== S U B R O U T I N E =======================================
.text:004049D0
.text:004049D0
.text:004049D0 sub_4049D0      proc near               ; CODE XREF: sub_403B10:loc_403F5A↑p
.text:004049D0
.text:004049D0 var_1C          = dword ptr -1Ch
.text:004049D0 var_18          = dword ptr -18h
.text:004049D0 var_C           = dword ptr -0Ch
.text:004049D0 var_8           = dword ptr -8
.text:004049D0 var_4           = dword ptr -4
.text:004049D0 arg_0           = dword ptr  4
.text:004049D0 arg_4           = dword ptr  8
.text:004049D0 arg_8           = dword ptr  0Ch
.text:004049D0
.text:004049D0                 sub     esp, 1Ch
.text:004049D3                 mov     edx, [esp+1Ch+arg_4]
.text:004049D7                 mov     [esp+1Ch+var_C], ebx
.text:004049DB                 mov     ebx, [esp+1Ch+arg_0]
.text:004049DF                 mov     [esp+1Ch+var_8], esi
.text:004049E3                 mov     [esp+1Ch+var_4], edi
.text:004049E7                 mov     edi, [esp+1Ch+arg_8]
.text:004049EB                 mov     [esp+1Ch+var_1C], edx
.text:004049EE                 call    sub_405810
.text:004049F3                 test    ebx, ebx
.text:004049F5                 mov     esi, eax
.text:004049F7                 jz      short loc_404A32
.text:004049F9                 cmp     ebx, 2
.text:004049FC                 jz      short loc_404A32
.text:004049FE
.text:004049FE loc_4049FE:                             ; CODE XREF: sub_4049D0+6E↓j
.text:004049FE                 lea     edx, [ebx-1]
.text:00404A01                 cmp     edx, 1
.text:00404A04                 jbe     short loc_404A16
.text:00404A06                 mov     ebx, [esp+1Ch+var_C]
.text:00404A0A                 mov     esi, [esp+1Ch+var_8]
.text:00404A0E                 mov     edi, [esp+1Ch+var_4]
.text:00404A12                 add     esp, 1Ch
.text:00404A15                 retn
.text:00404A16 ; ---------------------------------------------------------------------------
.text:00404A16
.text:00404A16 loc_404A16:                             ; CODE XREF: sub_4049D0+34↑j
.text:00404A16                 mov     [esp+1Ch+arg_4], esi
.text:00404A1A                 mov     ebx, [esp+1Ch+var_C]
.text:00404A1E                 mov     esi, [esp+1Ch+var_8]
.text:00404A22                 mov     [esp+1Ch+arg_0], edi
.text:00404A26                 mov     edi, [esp+1Ch+var_4]
.text:00404A2A                 add     esp, 1Ch
.text:00404A2D                 jmp     sub_409A30
.text:00404A32 ; ---------------------------------------------------------------------------
.text:00404A32
.text:00404A32 loc_404A32:                             ; CODE XREF: sub_4049D0+27↑j
.text:00404A32                                         ; sub_4049D0+2C↑j
.text:00404A32                 mov     [esp+1Ch+var_18], esi
.text:00404A36                 mov     [esp+1Ch+var_1C], edi
.text:00404A39                 call    sub_409A60
.text:00404A3E                 jmp     short loc_4049FE
.text:00404A3E sub_4049D0      endp
.text:00404A3E
.text:00404A40
.text:00404A40 ; =============== S U B R O U T I N E =======================================
.text:00404A40
.text:00404A40
.text:00404A40 sub_404A40      proc near               ; CODE XREF: sub_403B10+67A↑p
.text:00404A40
.text:00404A40 Code            = dword ptr -3Ch
.text:00404A40 ErrorMessage    = dword ptr -38h
.text:00404A40 var_34          = dword ptr -34h
.text:00404A40 var_30          = byte ptr -30h
.text:00404A40 var_24          = word ptr -24h
.text:00404A40 var_22          = word ptr -22h
.text:00404A40 var_1C          = dword ptr -1Ch
.text:00404A40 var_18          = dword ptr -18h
.text:00404A40 arg_0           = dword ptr  4
.text:00404A40 arg_4           = dword ptr  8
.text:00404A40 arg_8           = dword ptr  0Ch
.text:00404A40 arg_C           = byte ptr  10h
.text:00404A40
.text:00404A40                 push    ebp
.text:00404A41                 push    edi
.text:00404A42                 push    esi
.text:00404A43                 push    ebx
.text:00404A44                 sub     esp, 2Ch
.text:00404A47                 mov     esi, [esp+3Ch+arg_8]
.text:00404A4B                 mov     [esp+3Ch+ErrorMessage], 40087468h
.text:00404A53                 lea     ebx, [esp+3Ch+var_1C]
.text:00404A57                 mov     edi, [esp+3Ch+arg_0]
.text:00404A5B                 mov     [esp+3Ch+var_34], ebx
.text:00404A5F                 mov     ebp, [esp+3Ch+arg_4]
.text:00404A63                 mov     [esp+3Ch+Code], esi
.text:00404A66                 call    sub_409A90
.text:00404A6B                 test    eax, eax
.text:00404A6D                 jnz     loc_404B60
.text:00404A73
.text:00404A73 loc_404A73:                             ; CODE XREF: sub_404A40+161↓j
.text:00404A73                 test    edi, edi
.text:00404A75                 js      short loc_404A7C
.text:00404A77                 mov     word ptr [esp+3Ch+var_1C], di
.text:00404A7C
.text:00404A7C loc_404A7C:                             ; CODE XREF: sub_404A40+35↑j
.text:00404A7C                 test    ebp, ebp
.text:00404A7E                 js      short loc_404A84
.text:00404A80                 mov     [ebx+2], bp
.text:00404A84
.text:00404A84 loc_404A84:                             ; CODE XREF: sub_404A40+3E↑j
.text:00404A84                 mov     eax, [esp+3Ch+var_1C]
.text:00404A88                 test    ax, ax
.text:00404A8B                 jz      short loc_404A98
.text:00404A8D                 cmp     word ptr [ebx+2], 0
.text:00404A92                 jnz     loc_404B50
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: sub_404A40+4B↑j
.text:00404A98                 mov     [esp+3Ch+var_24], ax
.text:00404A9D                 movzx   edx, word ptr [ebx+2]
.text:00404AA1                 mov     word ptr [esp+3Ch+var_1C], 1
.text:00404AA8                 mov     [esp+3Ch+var_22], dx
.text:00404AAD                 mov     word ptr [ebx+2], 1
.text:00404AB3                 mov     [esp+3Ch+var_34], ebx
.text:00404AB7                 mov     [esp+3Ch+ErrorMessage], 80087467h
.text:00404ABF                 mov     [esp+3Ch+Code], esi
.text:00404AC2                 call    sub_409A90
.text:00404AC7                 test    eax, eax
.text:00404AC9                 jnz     short loc_404B20
.text:00404ACB
.text:00404ACB loc_404ACB:                             ; CODE XREF: sub_404A40+107↓j
.text:00404ACB                 lea     ebp, [esp+3Ch+var_24]
.text:00404ACF                 mov     [esp+3Ch+var_34], ebp
.text:00404AD3
.text:00404AD3 loc_404AD3:                             ; CODE XREF: sub_404A40+114↓j
.text:00404AD3                 mov     [esp+3Ch+ErrorMessage], 80087467h
.text:00404ADB                 mov     [esp+3Ch+Code], esi
.text:00404ADE                 call    sub_409A90
.text:00404AE3                 test    eax, eax
.text:00404AE5                 jnz     short loc_404AF0
.text:00404AE7
.text:00404AE7 loc_404AE7:                             ; CODE XREF: sub_404A40+D7↓j
.text:00404AE7                 add     esp, 2Ch
.text:00404AEA                 pop     ebx
.text:00404AEB                 pop     esi
.text:00404AEC                 pop     edi
.text:00404AED                 pop     ebp
.text:00404AEE                 retn
.text:00404AEE ; ---------------------------------------------------------------------------
.text:00404AEF                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404A40+A5↑j
.text:00404AF0                 call    _errno
.text:00404AF5                 mov     [esp+3Ch+var_34], offset aS_3 ; "%s"
.text:00404AFD                 mov     ecx, dword ptr [esp+3Ch+arg_C]
.text:00404B01                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00404B05                 mov     esi, [eax]
.text:00404B07                 mov     [esp+3Ch+Code], 1 ; Code
.text:00404B0E                 mov     [esp+3Ch+ErrorMessage], esi ; ErrorMessage
.text:00404B12                 call    sub_409770
.text:00404B17                 jmp     short loc_404AE7
.text:00404B17 ; ---------------------------------------------------------------------------
.text:00404B19                 align 10h
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404A40+89↑j
.text:00404B20                 call    _errno
.text:00404B25                 mov     [esp+3Ch+var_34], offset aS_3 ; "%s"
.text:00404B2D                 mov     edi, dword ptr [esp+3Ch+arg_C]
.text:00404B31                 mov     dword ptr [esp+3Ch+var_30], edi ; char
.text:00404B35                 mov     ebx, [eax]
.text:00404B37                 mov     [esp+3Ch+Code], 1 ; Code
.text:00404B3E                 mov     [esp+3Ch+ErrorMessage], ebx ; ErrorMessage
.text:00404B42                 call    sub_409770
.text:00404B47                 jmp     short loc_404ACB
.text:00404B47 ; ---------------------------------------------------------------------------
.text:00404B49                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_404A40+52↑j
.text:00404B50                 mov     [esp+3Ch+var_34], ebx
.text:00404B54                 jmp     loc_404AD3
.text:00404B54 ; ---------------------------------------------------------------------------
.text:00404B59                 align 10h
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: sub_404A40+2D↑j
.text:00404B60                 call    _errno
.text:00404B65                 cmp     dword ptr [eax], 16h
.text:00404B68                 jz      short loc_404B91
.text:00404B6A                 call    _errno
.text:00404B6F                 mov     [esp+3Ch+var_34], offset aS_3 ; "%s"
.text:00404B77                 mov     ecx, dword ptr [esp+3Ch+arg_C]
.text:00404B7B                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00404B7F                 mov     edx, [eax]
.text:00404B81                 mov     [esp+3Ch+Code], 1 ; Code
.text:00404B88                 mov     [esp+3Ch+ErrorMessage], edx ; ErrorMessage
.text:00404B8C                 call    sub_409770
.text:00404B91
.text:00404B91 loc_404B91:                             ; CODE XREF: sub_404A40+128↑j
.text:00404B91                 mov     [esp+3Ch+var_1C], 0
.text:00404B99                 mov     [esp+3Ch+var_18], 0
.text:00404BA1                 jmp     loc_404A73
.text:00404BA1 sub_404A40      endp
.text:00404BA1
.text:00404BA1 ; ---------------------------------------------------------------------------
.text:00404BA6 ; const char aRowsDColumnsD[]
.text:00404BA6 aRowsDColumnsD  db 'rows %d; columns %d;',0
.text:00404BA6                                         ; DATA XREF: sub_404C10+3B↓o
.text:00404BBB aDD             db '%d %d',0Ah,0        ; DATA XREF: sub_404C10+4F↓o
.text:00404BC2                 align 20h
.text:00404BE0 aSNoSizeInforma db '%s: no size information for this device',0
.text:00404BE0                                         ; DATA XREF: sub_404C10+A7↓o
.text:00404C08                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_403B10+84E↑p
.text:00404C10                                         ; sub_404DF0+3EA↓p
.text:00404C10
.text:00404C10 Code            = dword ptr -2Ch
.text:00404C10 ErrorMessage    = dword ptr -28h
.text:00404C10 var_24          = dword ptr -24h
.text:00404C10 var_20          = byte ptr -20h
.text:00404C10 var_14          = word ptr -14h
.text:00404C10 var_12          = word ptr -12h
.text:00404C10 var_8           = dword ptr -8
.text:00404C10 var_4           = dword ptr -4
.text:00404C10 arg_0           = byte ptr  4
.text:00404C10 arg_4           = dword ptr  8
.text:00404C10 arg_8           = byte ptr  0Ch
.text:00404C10
.text:00404C10                 sub     esp, 2Ch
.text:00404C13                 lea     edx, [esp+2Ch+var_14]
.text:00404C17                 mov     [esp+2Ch+var_24], edx
.text:00404C1B                 mov     edx, [esp+2Ch+arg_4]
.text:00404C1F                 mov     [esp+2Ch+var_8], ebx
.text:00404C23                 mov     [esp+2Ch+var_4], esi
.text:00404C27                 mov     esi, dword ptr [esp+2Ch+arg_8]
.text:00404C2B                 movzx   ebx, [esp+2Ch+arg_0]
.text:00404C30                 mov     [esp+2Ch+ErrorMessage], 40087468h
.text:00404C38                 mov     [esp+2Ch+Code], edx
.text:00404C3B                 call    sub_409A90
.text:00404C40                 test    eax, eax
.text:00404C42                 jnz     short loc_404C86
.text:00404C44                 movzx   edx, [esp+2Ch+var_12]
.text:00404C49                 test    bl, bl
.text:00404C4B                 mov     eax, offset aRowsDColumnsD ; "rows %d; columns %d;"
.text:00404C50                 movzx   esi, [esp+2Ch+var_14]
.text:00404C55                 mov     [esp+2Ch+var_24], edx
.text:00404C59                 mov     [esp+2Ch+ErrorMessage], esi ; int
.text:00404C5D                 jnz     short loc_404C64
.text:00404C5F                 mov     eax, offset aDD ; "%d %d\n"
.text:00404C64
.text:00404C64 loc_404C64:                             ; CODE XREF: sub_404C10+4D↑j
.text:00404C64                 mov     [esp+2Ch+Code], eax ; Str
.text:00404C67                 call    sub_405B10
.text:00404C6C                 xor     ecx, ecx
.text:00404C6E                 test    bl, bl
.text:00404C70                 setz    cl
.text:00404C73                 dec     ecx
.text:00404C74                 and     ds:dword_40C020, ecx
.text:00404C7A
.text:00404C7A loc_404C7A:                             ; CODE XREF: sub_404C10+A5↓j
.text:00404C7A                                         ; sub_404C10+D0↓j
.text:00404C7A                 mov     ebx, [esp+2Ch+var_8]
.text:00404C7E                 mov     esi, [esp+2Ch+var_4]
.text:00404C82                 add     esp, 2Ch
.text:00404C85                 retn
.text:00404C86 ; ---------------------------------------------------------------------------
.text:00404C86
.text:00404C86 loc_404C86:                             ; CODE XREF: sub_404C10+32↑j
.text:00404C86                 call    _errno
.text:00404C8B                 cmp     dword ptr [eax], 16h
.text:00404C8E                 jz      short loc_404CB3
.text:00404C90                 call    _errno
.text:00404C95                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00404C99                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404CA1                 mov     ecx, [eax]
.text:00404CA3                 mov     [esp+2Ch+Code], 1 ; Code
.text:00404CAA                 mov     [esp+2Ch+ErrorMessage], ecx ; ErrorMessage
.text:00404CAE                 call    sub_409770
.text:00404CB3
.text:00404CB3 loc_404CB3:                             ; CODE XREF: sub_404C10+7E↑j
.text:00404CB3                 test    bl, bl
.text:00404CB5                 jnz     short loc_404C7A
.text:00404CB7                 mov     [esp+2Ch+Code], offset aSNoSizeInforma ; "%s: no size information for this device"
.text:00404CBE                 call    ds:libintl_gettext
.text:00404CC4                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00404CC8                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404CD0                 mov     [esp+2Ch+Code], 1 ; Code
.text:00404CD7                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404CDB                 call    sub_409770
.text:00404CE0                 jmp     short loc_404C7A
.text:00404CE0 sub_404C10      endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE2 ; const char VarName[]
.text:00404CE2 VarName         db 'COLUMNS',0          ; DATA XREF: sub_404CF0:loc_404D20↓o
.text:00404CEA                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0
.text:00404CF0 sub_404CF0      proc near               ; CODE XREF: sub_403B10+2D8↑p
.text:00404CF0                                         ; sub_403B10+78C↑p ...
.text:00404CF0
.text:00404CF0 VarName         = dword ptr -2Ch
.text:00404CF0 var_28          = dword ptr -28h
.text:00404CF0 var_24          = dword ptr -24h
.text:00404CF0 var_20          = dword ptr -20h
.text:00404CF0 Str             = dword ptr -1Ch
.text:00404CF0 var_10          = dword ptr -10h
.text:00404CF0 var_C           = byte ptr -0Ch
.text:00404CF0 var_A           = word ptr -0Ah
.text:00404CF0
.text:00404CF0                 sub     esp, 2Ch
.text:00404CF3                 lea     edx, [esp+2Ch+var_C]
.text:00404CF7                 mov     [esp+2Ch+var_24], edx
.text:00404CFB                 mov     [esp+2Ch+var_28], 40087468h
.text:00404D03                 mov     [esp+2Ch+VarName], 1
.text:00404D0A                 call    sub_409A90
.text:00404D0F                 test    eax, eax
.text:00404D11                 jnz     short loc_404D20
.text:00404D13                 movzx   ecx, [esp+2Ch+var_A]
.text:00404D18                 test    cx, cx
.text:00404D1B                 movzx   edx, cx
.text:00404D1E                 jnz     short loc_404D72
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404CF0+21↑j
.text:00404D20                 mov     [esp+2Ch+VarName], offset VarName ; "COLUMNS"
.text:00404D27                 call    getenv
.text:00404D2C                 test    eax, eax
.text:00404D2E                 jz      short loc_404D78
.text:00404D30                 mov     [esp+2Ch+Str], offset Locale ; Str
.text:00404D38                 lea     ecx, [esp+2Ch+var_10]
.text:00404D3C                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404D40                 mov     [esp+2Ch+var_24], 0 ; int
.text:00404D48                 mov     [esp+2Ch+var_28], 0 ; char **
.text:00404D50                 mov     [esp+2Ch+VarName], eax ; char *
.text:00404D53                 call    sub_407290
.text:00404D58                 test    eax, eax
.text:00404D5A                 jnz     short loc_404D78
.text:00404D5C                 mov     eax, [esp+2Ch+var_10]
.text:00404D60                 test    eax, eax
.text:00404D62                 jle     short loc_404D78
.text:00404D64                 lea     esi, [esi+0]
.text:00404D6A                 lea     edi, [edi+0]
.text:00404D70
.text:00404D70 loc_404D70:                             ; CODE XREF: sub_404CF0+95↓j
.text:00404D70                 mov     edx, eax
.text:00404D72
.text:00404D72 loc_404D72:                             ; CODE XREF: sub_404CF0+2E↑j
.text:00404D72                 mov     eax, edx
.text:00404D74                 add     esp, 2Ch
.text:00404D77                 retn
.text:00404D78 ; ---------------------------------------------------------------------------
.text:00404D78
.text:00404D78 loc_404D78:                             ; CODE XREF: sub_404CF0+3E↑j
.text:00404D78                                         ; sub_404CF0+6A↑j ...
.text:00404D78                 mov     [esp+2Ch+var_10], 50h ; 'P'
.text:00404D80                 mov     eax, 50h ; 'P'
.text:00404D85                 jmp     short loc_404D70
.text:00404D85 sub_404CF0      endp
.text:00404D85
.text:00404D85 ; ---------------------------------------------------------------------------
.text:00404D87                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90
.text:00404D90 sub_404D90      proc near               ; CODE XREF: sub_404570+4A↑p
.text:00404D90                                         ; sub_404DF0+261↓p ...
.text:00404D90
.text:00404D90 arg_0           = dword ptr  4
.text:00404D90 arg_4           = dword ptr  8
.text:00404D90
.text:00404D90                 sub     esp, 0Ch
.text:00404D93                 mov     edx, [esp+0Ch+arg_0]
.text:00404D97                 mov     eax, [esp+0Ch+arg_4]
.text:00404D9B                 cmp     edx, 4          ; switch 5 cases
.text:00404D9E                 ja      short def_404DA0 ; jumptable 00404DA0 default case
.text:00404DA0                 jmp     ds:jpt_404DA0[edx*4] ; switch jump
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA7                 align 4
.text:00404DA8 jpt_404DA0      dd offset loc_404DC0    ; DATA XREF: sub_404D90+10↑r
.text:00404DA8                 dd offset loc_404DD0    ; jump table for switch statement
.text:00404DA8                 dd offset loc_404DD4
.text:00404DA8                 dd offset loc_404DE0
.text:00404DA8                 dd offset loc_404DE5
.text:00404DBC                 align 10h
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404D90+10↑j
.text:00404DC0                                         ; DATA XREF: sub_404D90:jpt_404DA0↑o
.text:00404DC0                 add     eax, 8          ; jumptable 00404DA0 case 0
.text:00404DC3                 lea     esi, [esi+0]
.text:00404DC9                 lea     edi, [edi+0]
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404D90+10↑j
.text:00404DD0                                         ; sub_404D90+47↓j ...
.text:00404DD0                 add     esp, 0Ch        ; jumptable 00404DA0 case 1
.text:00404DD3                 retn
.text:00404DD4 ; ---------------------------------------------------------------------------
.text:00404DD4
.text:00404DD4 loc_404DD4:                             ; CODE XREF: sub_404D90+10↑j
.text:00404DD4                                         ; DATA XREF: sub_404D90:jpt_404DA0↑o
.text:00404DD4                 add     eax, 4          ; jumptable 00404DA0 case 2
.text:00404DD7                 jmp     short loc_404DD0 ; jumptable 00404DA0 case 1
.text:00404DD7 ; ---------------------------------------------------------------------------
.text:00404DD9                 align 10h
.text:00404DE0
.text:00404DE0 loc_404DE0:                             ; CODE XREF: sub_404D90+10↑j
.text:00404DE0                                         ; DATA XREF: sub_404D90:jpt_404DA0↑o
.text:00404DE0                 add     eax, 0Ch        ; jumptable 00404DA0 case 3
.text:00404DE3                 jmp     short loc_404DD0 ; jumptable 00404DA0 case 1
.text:00404DE5 ; ---------------------------------------------------------------------------
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404D90+10↑j
.text:00404DE5                                         ; DATA XREF: sub_404D90:jpt_404DA0↑o
.text:00404DE5                 xor     eax, eax        ; jumptable 00404DA0 case 4
.text:00404DE7                 jmp     short loc_404DD0 ; jumptable 00404DA0 case 1
.text:00404DE9 ; ---------------------------------------------------------------------------
.text:00404DE9
.text:00404DE9 def_404DA0:                             ; CODE XREF: sub_404D90+E↑j
.text:00404DE9                 call    abort           ; jumptable 00404DA0 default case
.text:00404DE9 sub_404D90      endp
.text:00404DE9
.text:00404DE9 ; ---------------------------------------------------------------------------
.text:00404DEE                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0
.text:00404DF0 sub_404DF0      proc near               ; CODE XREF: sub_403B10+30B↑p
.text:00404DF0
.text:00404DF0 Str             = dword ptr -2Ch
.text:00404DF0 File            = dword ptr -28h
.text:00404DF0 var_24          = dword ptr -24h
.text:00404DF0 var_19          = byte ptr -19h
.text:00404DF0 var_18          = dword ptr -18h
.text:00404DF0 var_11          = byte ptr -11h
.text:00404DF0 var_10          = dword ptr -10h
.text:00404DF0 var_C           = dword ptr -0Ch
.text:00404DF0 arg_0           = dword ptr  4
.text:00404DF0 arg_4           = dword ptr  8
.text:00404DF0 arg_8           = dword ptr  0Ch
.text:00404DF0 arg_C           = dword ptr  10h
.text:00404DF0
.text:00404DF0 ; FUNCTION CHUNK AT .text:004055B0 SIZE 0000009C BYTES
.text:00404DF0
.text:00404DF0                 push    ebx
.text:00404DF1                 mov     eax, [esp+4+arg_0]
.text:00404DF5                 mov     ecx, [esp+4+arg_4]
.text:00404DF9                 mov     ebx, [esp+4+arg_8]
.text:00404DFD                 cmp     eax, 1
.text:00404E00                 mov     edx, [esp+4+arg_C]
.text:00404E04                 jz      short loc_404E27
.text:00404E06                 cmp     eax, 1
.text:00404E09                 jb      short loc_404E20
.text:00404E0B                 cmp     eax, 2
.text:00404E0E                 jz      short loc_404E12
.text:00404E10                 pop     ebx
.text:00404E11                 retn
.text:00404E12 ; ---------------------------------------------------------------------------
.text:00404E12
.text:00404E12 loc_404E12:                             ; CODE XREF: sub_404DF0+1E↑j
.text:00404E12                 mov     [esp+4+arg_0], ecx
.text:00404E16                 pop     ebx
.text:00404E17                 jmp     loc_4055B0
.text:00404E17 ; ---------------------------------------------------------------------------
.text:00404E1C                 align 10h
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: sub_404DF0+19↑j
.text:00404E20                 mov     [esp+4+arg_0], ecx
.text:00404E24                 pop     ebx
.text:00404E25                 jmp     short loc_404E60
.text:00404E27 ; ---------------------------------------------------------------------------
.text:00404E27
.text:00404E27 loc_404E27:                             ; CODE XREF: sub_404DF0+14↑j
.text:00404E27                 mov     [esp+4+arg_8], edx
.text:00404E2B                 mov     [esp+4+arg_4], ebx
.text:00404E2F                 mov     [esp+4+arg_0], ecx
.text:00404E33                 pop     ebx
.text:00404E34                 jmp     loc_4051A0
.text:00404E34 ; ---------------------------------------------------------------------------
.text:00404E39 ; const char byte_404E39[]
.text:00404E39 byte_404E39     db 2Dh, 25h, 73h        ; DATA XREF: sub_404DF0+293↓o
.text:00404E39                                         ; sub_404DF0+5B2↓o
.text:00404E3C                 db 0
.text:00404E3D ; const char aMinLuTimeLu[]
.text:00404E3D aMinLuTimeLu    db 'min = %lu; time = %lu;',0Ah,0
.text:00404E3D                                         ; DATA XREF: sub_404DF0+327↓o
.text:00404E55 ; const char aSS[]
.text:00404E55 aSS             db '%s = %s;',0         ; DATA XREF: sub_404DF0+35C↓o
.text:00404E55                                         ; sub_404DF0+645↓o
.text:00404E5E                 align 10h
.text:00404E60
.text:00404E60 loc_404E60:                             ; CODE XREF: sub_404DF0+35↑j
.text:00404E60                 push    ebp
.text:00404E61                 push    edi
.text:00404E62                 push    esi
.text:00404E63                 push    ebx
.text:00404E64                 sub     esp, 1Ch
.text:00404E67                 mov     ecx, [esp+2Ch+arg_0]
.text:00404E6B                 mov     [esp+2Ch+var_18], 0
.text:00404E73                 mov     [esp+2Ch+File], 1
.text:00404E7B                 mov     [esp+2Ch+Str], ecx
.text:00404E7E                 call    sub_4054C0
.text:00404E83                 mov     edx, ds:_iob
.text:00404E89                 mov     ecx, [edx+24h]
.text:00404E8C                 dec     ecx
.text:00404E8D                 mov     [edx+24h], ecx
.text:00404E90                 test    ecx, ecx
.text:00404E92                 js      loc_405161
.text:00404E98                 mov     ebx, ds:_iob
.text:00404E9E                 mov     eax, [ebx+20h]
.text:00404EA1                 mov     byte ptr [eax], 0Ah
.text:00404EA4                 inc     dword ptr [ebx+20h]
.text:00404EA7
.text:00404EA7 loc_404EA7:                             ; CODE XREF: sub_404DF0+38A↓j
.text:00404EA7                 mov     [esp+2Ch+var_11], 1
.text:00404EAC                 mov     esi, off_40B510 ; "intr"
.text:00404EB2                 xor     edi, edi
.text:00404EB4                 mov     ds:dword_40C020, edi
.text:00404EBA                 mov     ecx, 4
.text:00404EBF                 mov     edi, offset aMin ; "min"
.text:00404EC4                 cld
.text:00404EC5                 mov     ebp, edi
.text:00404EC7                 repe cmpsb
.text:00404EC9                 jz      short loc_404F19
.text:00404ECB                 xor     ebx, ebx
.text:00404ECD                 lea     esi, [esi+0]
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404DF0+127↓j
.text:00404ED0                 mov     esi, dword_40B518[ebx]
.text:00404ED6                 mov     eax, [esp+2Ch+arg_0]
.text:00404EDA                 movzx   ecx, byte ptr [esi+eax+10h]
.text:00404EDF                 cmp     cl, byte_40B514[ebx]
.text:00404EE5                 mov     [esp+2Ch+var_19], cl
.text:00404EE9                 jz      short loc_404F04
.text:00404EEB                 cld
.text:00404EEC                 mov     esi, off_40B510[ebx] ; "intr"
.text:00404EF2                 mov     edi, offset aSwtch ; "swtch"
.text:00404EF7                 mov     ecx, 6
.text:00404EFC                 repe cmpsb
.text:00404EFE                 jnz     loc_405130
.text:00404F04
.text:00404F04 loc_404F04:                             ; CODE XREF: sub_404DF0+F9↑j
.text:00404F04                                         ; sub_404DF0+36C↓j
.text:00404F04                 cld
.text:00404F05                 add     ebx, 0Ch
.text:00404F08                 mov     esi, off_40B510[ebx] ; "intr"
.text:00404F0E                 mov     ecx, 4
.text:00404F13                 mov     edi, ebp
.text:00404F15                 repe cmpsb
.text:00404F17                 jnz     short loc_404ED0
.text:00404F19
.text:00404F19 loc_404F19:                             ; CODE XREF: sub_404DF0+D9↑j
.text:00404F19                 mov     eax, [esp+2Ch+arg_0]
.text:00404F1D                 test    byte ptr [eax+0Dh], 1
.text:00404F21                 jz      loc_405107
.text:00404F27                 cmp     [esp+2Ch+var_11], 0
.text:00404F2C                 jnz     short loc_404F60
.text:00404F2E                 mov     edx, ds:_iob
.text:00404F34                 mov     esi, [edx+24h]
.text:00404F37                 dec     esi
.text:00404F38                 mov     [edx+24h], esi
.text:00404F3B                 test    esi, esi
.text:00404F3D                 js      loc_4050E9
.text:00404F43                 mov     edi, ds:_iob
.text:00404F49                 mov     eax, [edi+20h]
.text:00404F4C                 mov     byte ptr [eax], 0Ah
.text:00404F4F                 inc     dword ptr [edi+20h]
.text:00404F52                 lea     esi, [esi+0]
.text:00404F59                 lea     edi, [edi+0]
.text:00404F60
.text:00404F60 loc_404F60:                             ; CODE XREF: sub_404DF0+13C↑j
.text:00404F60                                         ; sub_404DF0+312↓j ...
.text:00404F60                 mov     [esp+2Ch+var_11], 1
.text:00404F65                 mov     ebx, off_40B010 ; "parenb"
.text:00404F6B                 xor     ecx, ecx
.text:00404F6D                 mov     ds:dword_40C020, ecx
.text:00404F73                 test    ebx, ebx
.text:00404F75                 jz      short loc_404FC0
.text:00404F77                 xor     ebx, ebx
.text:00404F79                 lea     esi, [esi+0]
.text:00404F80
.text:00404F80 loc_404F80:                             ; CODE XREF: sub_404DF0+1A4↓j
.text:00404F80                 test    byte_40B018[ebx], 8
.text:00404F87                 jz      short loc_404FF0
.text:00404F89
.text:00404F89 loc_404F89:                             ; CODE XREF: sub_404DF0+28D↓j
.text:00404F89                                         ; sub_404DF0+2AE↓j ...
.text:00404F89                 add     ebx, 14h
.text:00404F8C                 mov     esi, off_40B010[ebx] ; "parenb"
.text:00404F92                 test    esi, esi
.text:00404F94                 jnz     short loc_404F80
.text:00404F96                 cmp     [esp+2Ch+var_11], 0
.text:00404F9B                 jnz     short loc_404FC0
.text:00404F9D                 mov     ebp, ds:_iob
.text:00404FA3                 mov     ebx, [ebp+24h]
.text:00404FA6                 dec     ebx
.text:00404FA7                 mov     [ebp+24h], ebx
.text:00404FAA                 test    ebx, ebx
.text:00404FAC                 js      short loc_404FD0
.text:00404FAE                 mov     ecx, ds:_iob
.text:00404FB4                 mov     eax, [ecx+20h]
.text:00404FB7                 mov     byte ptr [eax], 0Ah
.text:00404FBA                 inc     dword ptr [ecx+20h]
.text:00404FBD                 lea     esi, [esi+0]
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: sub_404DF0+185↑j
.text:00404FC0                                         ; sub_404DF0+1AB↑j ...
.text:00404FC0                 xor     edx, edx
.text:00404FC2                 mov     ds:dword_40C020, edx
.text:00404FC8                 add     esp, 1Ch
.text:00404FCB                 pop     ebx
.text:00404FCC                 pop     esi
.text:00404FCD                 pop     edi
.text:00404FCE                 pop     ebp
.text:00404FCF                 retn
.text:00404FD0 ; ---------------------------------------------------------------------------
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: sub_404DF0+1BC↑j
.text:00404FD0                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:00404FD7                 mov     edi, ds:_iob
.text:00404FDD                 add     edi, 20h ; ' '
.text:00404FE0                 mov     [esp+2Ch+File], edi ; File
.text:00404FE4                 call    _flsbuf
.text:00404FE9                 jmp     short loc_404FC0
.text:00404FE9 ; ---------------------------------------------------------------------------
.text:00404FEB                 align 10h
.text:00404FF0
.text:00404FF0 loc_404FF0:                             ; CODE XREF: sub_404DF0+197↑j
.text:00404FF0                 mov     esi, [esp+2Ch+var_18]
.text:00404FF4                 cmp     dword_40B014[ebx], esi
.text:00404FFA                 jz      short loc_40503E
.text:00404FFC                 cmp     [esp+2Ch+var_11], 0
.text:00405001                 jnz     short loc_405034
.text:00405003                 mov     edx, ds:_iob
.text:00405009                 mov     edi, [edx+24h]
.text:0040500C                 dec     edi
.text:0040500D                 mov     [edx+24h], edi
.text:00405010                 test    edi, edi
.text:00405012                 js      loc_4050CB
.text:00405018                 mov     ebp, ds:_iob
.text:0040501E                 mov     eax, [ebp+20h]
.text:00405021                 mov     byte ptr [eax], 0Ah
.text:00405024                 inc     dword ptr [ebp+20h]
.text:00405027
.text:00405027 loc_405027:                             ; CODE XREF: sub_404DF0+2F4↓j
.text:00405027                 mov     [esp+2Ch+var_11], 1
.text:0040502C                 xor     esi, esi
.text:0040502E                 mov     ds:dword_40C020, esi
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: sub_404DF0+211↑j
.text:00405034                 mov     edi, dword_40B014[ebx]
.text:0040503A                 mov     [esp+2Ch+var_18], edi
.text:0040503E
.text:0040503E loc_40503E:                             ; CODE XREF: sub_404DF0+20A↑j
.text:0040503E                 mov     edx, dword_40B014[ebx]
.text:00405044                 mov     esi, ebx
.text:00405046                 mov     ebp, [esp+2Ch+arg_0]
.text:0040504A                 mov     [esp+2Ch+Str], edx
.text:0040504D                 mov     [esp+2Ch+File], ebp
.text:00405051                 call    sub_404D90
.text:00405056                 mov     edx, dword_40B020[ebx]
.text:0040505C                 test    edx, edx
.text:0040505E                 jnz     short loc_4050C3
.text:00405060                 mov     ecx, dword_40B01C[ebx]
.text:00405066                 mov     edx, ecx
.text:00405068
.text:00405068 loc_405068:                             ; CODE XREF: sub_404DF0+2D9↓j
.text:00405068                 mov     ebp, [eax]
.text:0040506A                 and     edx, ebp
.text:0040506C                 cmp     edx, ecx
.text:0040506E                 jz      short loc_4050A3
.text:00405070                 movsx   edi, byte_40B018[esi]
.text:00405077                 and     edi, 5
.text:0040507A                 cmp     edi, 5
.text:0040507D                 jnz     loc_404F89
.text:00405083                 mov     [esp+2Ch+Str], offset byte_404E39 ; Str
.text:0040508A                 mov     edx, off_40B010[esi] ; "parenb"
.text:00405090                 mov     [esp+2Ch+File], edx ; int
.text:00405094
.text:00405094 loc_405094:                             ; CODE XREF: sub_404DF0+2D1↓j
.text:00405094                 call    sub_405B10
.text:00405099                 mov     [esp+2Ch+var_11], 0
.text:0040509E                 jmp     loc_404F89
.text:004050A3 ; ---------------------------------------------------------------------------
.text:004050A3
.text:004050A3 loc_4050A3:                             ; CODE XREF: sub_404DF0+27E↑j
.text:004050A3                 test    byte_40B018[esi], 2
.text:004050AA                 jz      loc_404F89
.text:004050B0                 mov     [esp+2Ch+Str], offset aS_3 ; "%s"
.text:004050B7                 mov     ecx, off_40B010[esi] ; "parenb"
.text:004050BD                 mov     [esp+2Ch+File], ecx
.text:004050C1                 jmp     short loc_405094
.text:004050C3 ; ---------------------------------------------------------------------------
.text:004050C3
.text:004050C3 loc_4050C3:                             ; CODE XREF: sub_404DF0+26E↑j
.text:004050C3                 mov     ecx, dword_40B01C[ebx]
.text:004050C9                 jmp     short loc_405068
.text:004050CB ; ---------------------------------------------------------------------------
.text:004050CB
.text:004050CB loc_4050CB:                             ; CODE XREF: sub_404DF0+222↑j
.text:004050CB                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:004050D2                 mov     ecx, ds:_iob
.text:004050D8                 add     ecx, 20h ; ' '
.text:004050DB                 mov     [esp+2Ch+File], ecx ; File
.text:004050DF                 call    _flsbuf
.text:004050E4                 jmp     loc_405027
.text:004050E9 ; ---------------------------------------------------------------------------
.text:004050E9
.text:004050E9 loc_4050E9:                             ; CODE XREF: sub_404DF0+14D↑j
.text:004050E9                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:004050F0                 mov     ebp, ds:_iob
.text:004050F6                 add     ebp, 20h ; ' '
.text:004050F9                 mov     [esp+2Ch+File], ebp ; File
.text:004050FD                 call    _flsbuf
.text:00405102                 jmp     loc_404F60
.text:00405107 ; ---------------------------------------------------------------------------
.text:00405107
.text:00405107 loc_405107:                             ; CODE XREF: sub_404DF0+131↑j
.text:00405107                 movzx   ecx, byte ptr [eax+21h]
.text:0040510B                 mov     ebx, [esp+2Ch+arg_0]
.text:0040510F                 mov     [esp+2Ch+var_24], ecx
.text:00405113                 movzx   ebp, byte ptr [ebx+20h]
.text:00405117                 mov     [esp+2Ch+Str], offset aMinLuTimeLu ; "min = %lu; time = %lu;\n"
.text:0040511E                 mov     [esp+2Ch+File], ebp ; int
.text:00405122                 call    sub_405B10
.text:00405127                 jmp     loc_404F60
.text:00405127 ; ---------------------------------------------------------------------------
.text:0040512C                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_404DF0+10E↑j
.text:00405130                 movzx   edi, [esp+2Ch+var_19]
.text:00405135                 mov     [esp+2Ch+var_11], 0
.text:0040513A                 mov     [esp+2Ch+Str], edi
.text:0040513D                 call    sub_405980
.text:00405142                 mov     [esp+2Ch+var_24], eax
.text:00405146                 mov     edx, off_40B510[ebx] ; "intr"
.text:0040514C                 mov     [esp+2Ch+Str], offset aSS ; "%s = %s;"
.text:00405153                 mov     [esp+2Ch+File], edx ; int
.text:00405157                 call    sub_405B10
.text:0040515C                 jmp     loc_404F04
.text:00405161 ; ---------------------------------------------------------------------------
.text:00405161
.text:00405161 loc_405161:                             ; CODE XREF: sub_404DF0+A2↑j
.text:00405161                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:00405168                 mov     esi, ds:_iob
.text:0040516E                 add     esi, 20h ; ' '
.text:00405171                 mov     [esp+2Ch+File], esi ; File
.text:00405175                 call    _flsbuf
.text:0040517A                 jmp     loc_404EA7
.text:0040517A ; ---------------------------------------------------------------------------
.text:0040517F ; const char aMinLuTimeLu_0[]
.text:0040517F aMinLuTimeLu_0  db 'min = %lu; time = %lu;',0
.text:0040517F                                         ; DATA XREF: sub_404DF0+47E↓o
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_404DF0+44↑j
.text:004051A0                 push    ebp
.text:004051A1                 push    edi
.text:004051A2                 push    esi
.text:004051A3                 push    ebx
.text:004051A4                 sub     esp, 1Ch
.text:004051A7                 mov     esi, [esp+2Ch+arg_0]
.text:004051AB                 mov     dword ptr [esp+18h], 0
.text:004051B3                 mov     [esp+2Ch+File], 1
.text:004051BB                 mov     [esp+2Ch+Str], esi
.text:004051BE                 call    sub_4054C0
.text:004051C3                 mov     [esp+2Ch+Str], 1
.text:004051CA                 mov     ecx, [esp+2Ch+arg_4]
.text:004051CE                 mov     ebx, [esp+2Ch+arg_8]
.text:004051D2                 mov     [esp+2Ch+File], ecx
.text:004051D6                 mov     [esp+2Ch+var_24], ebx
.text:004051DA                 call    sub_404C10
.text:004051DF                 mov     edx, ds:_iob
.text:004051E5                 mov     ecx, [edx+24h]
.text:004051E8                 dec     ecx
.text:004051E9                 mov     [edx+24h], ecx
.text:004051EC                 test    ecx, ecx
.text:004051EE                 js      loc_40544A
.text:004051F4                 mov     edi, ds:_iob
.text:004051FA                 mov     eax, [edi+20h]
.text:004051FD                 mov     byte ptr [eax], 0Ah
.text:00405200                 inc     dword ptr [edi+20h]
.text:00405203
.text:00405203 loc_405203:                             ; CODE XREF: sub_404DF0+673↓j
.text:00405203                 cld
.text:00405204                 mov     esi, off_40B510 ; "intr"
.text:0040520A                 xor     edx, edx
.text:0040520C                 mov     ds:dword_40C020, edx
.text:00405212                 mov     edi, offset aMin ; "min"
.text:00405217                 mov     ecx, 4
.text:0040521C                 repe cmpsb
.text:0040521E                 jz      short loc_40525E
.text:00405220                 mov     ebp, offset aSwtch ; "swtch"
.text:00405225                 xor     ebx, ebx
.text:00405227                 mov     esi, esi
.text:00405229                 lea     edi, [edi+0]
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: sub_404DF0+46C↓j
.text:00405230                 cld
.text:00405231                 mov     esi, off_40B510[ebx] ; "intr"
.text:00405237                 mov     ecx, 6
.text:0040523C                 mov     edi, ebp
.text:0040523E                 repe cmpsb
.text:00405240                 jnz     loc_405414
.text:00405246
.text:00405246 loc_405246:                             ; CODE XREF: sub_404DF0+655↓j
.text:00405246                 cld
.text:00405247                 add     ebx, 0Ch
.text:0040524A                 mov     esi, off_40B510[ebx] ; "intr"
.text:00405250                 mov     ecx, 4
.text:00405255                 mov     edi, offset aMin ; "min"
.text:0040525A                 repe cmpsb
.text:0040525C                 jnz     short loc_405230
.text:0040525E
.text:0040525E loc_40525E:                             ; CODE XREF: sub_404DF0+42E↑j
.text:0040525E                 mov     ecx, [esp+2Ch+arg_0]
.text:00405262                 movzx   edx, byte ptr [ecx+21h]
.text:00405266                 mov     [esp+2Ch+var_24], edx
.text:0040526A                 movzx   ebp, byte ptr [ecx+20h]
.text:0040526E                 mov     [esp+2Ch+Str], offset aMinLuTimeLu_0 ; "min = %lu; time = %lu;"
.text:00405275                 mov     [esp+2Ch+File], ebp ; int
.text:00405279                 call    sub_405B10
.text:0040527E                 mov     ebx, ds:dword_40C020
.text:00405284                 test    ebx, ebx
.text:00405286                 jz      short loc_4052AC
.text:00405288                 mov     edi, ds:_iob
.text:0040528E                 mov     esi, [edi+24h]
.text:00405291                 dec     esi
.text:00405292                 mov     [edi+24h], esi
.text:00405295                 test    esi, esi
.text:00405297                 js      loc_4053F6
.text:0040529D                 mov     ebx, ds:_iob
.text:004052A3                 mov     eax, [ebx+20h]
.text:004052A6                 mov     byte ptr [eax], 0Ah
.text:004052A9                 inc     dword ptr [ebx+20h]
.text:004052AC
.text:004052AC loc_4052AC:                             ; CODE XREF: sub_404DF0+496↑j
.text:004052AC                                         ; sub_404DF0+61F↓j
.text:004052AC                 mov     ecx, off_40B010 ; "parenb"
.text:004052B2                 xor     edx, edx
.text:004052B4                 mov     ds:dword_40C020, edx
.text:004052BA                 test    ecx, ecx
.text:004052BC                 jz      short loc_4052D6
.text:004052BE                 xor     esi, esi
.text:004052C0
.text:004052C0 loc_4052C0:                             ; CODE XREF: sub_404DF0+4E4↓j
.text:004052C0                 test    byte_40B018[esi], 8
.text:004052C7                 jz      short loc_405321
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: sub_404DF0+5AC↓j
.text:004052C9                                         ; sub_404DF0+5C8↓j
.text:004052C9                 add     esi, 14h
.text:004052CC                 mov     ebx, off_40B010[esi] ; "parenb"
.text:004052D2                 test    ebx, ebx
.text:004052D4                 jnz     short loc_4052C0
.text:004052D6
.text:004052D6 loc_4052D6:                             ; CODE XREF: sub_404DF0+4CC↑j
.text:004052D6                 mov     ecx, ds:_iob
.text:004052DC                 mov     esi, [ecx+24h]
.text:004052DF                 dec     esi
.text:004052E0                 mov     [ecx+24h], esi
.text:004052E3                 test    esi, esi
.text:004052E5                 js      short loc_405306
.text:004052E7                 mov     ebp, ds:_iob
.text:004052ED                 mov     eax, [ebp+20h]
.text:004052F0                 mov     byte ptr [eax], 0Ah
.text:004052F3                 inc     dword ptr [ebp+20h]
.text:004052F6
.text:004052F6 loc_4052F6:                             ; CODE XREF: sub_404DF0+52F↓j
.text:004052F6                 xor     edi, edi
.text:004052F8                 mov     ds:dword_40C020, edi
.text:004052FE                 add     esp, 1Ch
.text:00405301                 pop     ebx
.text:00405302                 pop     esi
.text:00405303                 pop     edi
.text:00405304                 pop     ebp
.text:00405305                 retn
.text:00405306 ; ---------------------------------------------------------------------------
.text:00405306
.text:00405306 loc_405306:                             ; CODE XREF: sub_404DF0+4F5↑j
.text:00405306                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:0040530D                 mov     edx, ds:_iob
.text:00405313                 add     edx, 20h ; ' '
.text:00405316                 mov     [esp+2Ch+File], edx ; File
.text:0040531A                 call    _flsbuf
.text:0040531F                 jmp     short loc_4052F6
.text:00405321 ; ---------------------------------------------------------------------------
.text:00405321
.text:00405321 loc_405321:                             ; CODE XREF: sub_404DF0+4D7↑j
.text:00405321                 mov     edi, [esp+18h]
.text:00405325                 cmp     dword_40B014[esi], edi
.text:0040532B                 jz      short loc_405363
.text:0040532D                 mov     ebp, ds:_iob
.text:00405333                 mov     ebx, [ebp+24h]
.text:00405336                 dec     ebx
.text:00405337                 mov     [ebp+24h], ebx
.text:0040533A                 test    ebx, ebx
.text:0040533C                 js      loc_4053D8
.text:00405342                 mov     ecx, ds:_iob
.text:00405348                 mov     eax, [ecx+20h]
.text:0040534B                 mov     byte ptr [eax], 0Ah
.text:0040534E                 inc     dword ptr [ecx+20h]
.text:00405351
.text:00405351 loc_405351:                             ; CODE XREF: sub_404DF0+601↓j
.text:00405351                 mov     edi, dword_40B014[esi]
.text:00405357                 xor     ebx, ebx
.text:00405359                 mov     ds:dword_40C020, ebx
.text:0040535F                 mov     [esp+18h], edi
.text:00405363
.text:00405363 loc_405363:                             ; CODE XREF: sub_404DF0+53B↑j
.text:00405363                 mov     ecx, [esp+2Ch+arg_0]
.text:00405367                 mov     ebx, esi
.text:00405369                 mov     ebp, dword_40B014[esi]
.text:0040536F                 mov     [esp+2Ch+File], ecx
.text:00405373                 mov     [esp+2Ch+Str], ebp
.text:00405376                 call    sub_404D90
.text:0040537B                 mov     edx, dword_40B020[esi]
.text:00405381                 test    edx, edx
.text:00405383                 jnz     short loc_4053D0
.text:00405385                 mov     ecx, dword_40B01C[esi]
.text:0040538B                 mov     edx, ecx
.text:0040538D
.text:0040538D loc_40538D:                             ; CODE XREF: sub_404DF0+5E6↓j
.text:0040538D                 mov     ebp, [eax]
.text:0040538F                 and     edx, ebp
.text:00405391                 cmp     edx, ecx
.text:00405393                 jz      short loc_4053BD
.text:00405395                 test    byte_40B018[ebx], 4
.text:0040539C                 jz      loc_4052C9
.text:004053A2                 mov     [esp+2Ch+Str], offset byte_404E39 ; Str
.text:004053A9                 mov     edi, off_40B010[ebx] ; "parenb"
.text:004053AF                 mov     [esp+2Ch+File], edi ; int
.text:004053B3
.text:004053B3 loc_4053B3:                             ; CODE XREF: sub_404DF0+5DE↓j
.text:004053B3                 call    sub_405B10
.text:004053B8                 jmp     loc_4052C9
.text:004053BD ; ---------------------------------------------------------------------------
.text:004053BD
.text:004053BD loc_4053BD:                             ; CODE XREF: sub_404DF0+5A3↑j
.text:004053BD                 mov     [esp+2Ch+Str], offset aS_3 ; "%s"
.text:004053C4                 mov     edx, off_40B010[ebx] ; "parenb"
.text:004053CA                 mov     [esp+2Ch+File], edx
.text:004053CE                 jmp     short loc_4053B3
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D0
.text:004053D0 loc_4053D0:                             ; CODE XREF: sub_404DF0+593↑j
.text:004053D0                 mov     ecx, dword_40B01C[esi]
.text:004053D6                 jmp     short loc_40538D
.text:004053D8 ; ---------------------------------------------------------------------------
.text:004053D8
.text:004053D8 loc_4053D8:                             ; CODE XREF: sub_404DF0+54C↑j
.text:004053D8                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:004053DF                 mov     edx, ds:_iob
.text:004053E5                 add     edx, 20h ; ' '
.text:004053E8                 mov     [esp+2Ch+File], edx ; File
.text:004053EC                 call    _flsbuf
.text:004053F1                 jmp     loc_405351
.text:004053F6 ; ---------------------------------------------------------------------------
.text:004053F6
.text:004053F6 loc_4053F6:                             ; CODE XREF: sub_404DF0+4A7↑j
.text:004053F6                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:004053FD                 mov     ebp, ds:_iob
.text:00405403                 add     ebp, 20h ; ' '
.text:00405406                 mov     [esp+2Ch+File], ebp ; File
.text:0040540A                 call    _flsbuf
.text:0040540F                 jmp     loc_4052AC
.text:00405414 ; ---------------------------------------------------------------------------
.text:00405414
.text:00405414 loc_405414:                             ; CODE XREF: sub_404DF0+450↑j
.text:00405414                 mov     edi, dword_40B518[ebx]
.text:0040541A                 mov     eax, [esp+2Ch+arg_0]
.text:0040541E                 movzx   esi, byte ptr [edi+eax+10h]
.text:00405423                 mov     [esp+2Ch+Str], esi
.text:00405426                 call    sub_405980
.text:0040542B                 mov     [esp+2Ch+var_24], eax
.text:0040542F                 mov     ecx, off_40B510[ebx] ; "intr"
.text:00405435                 mov     [esp+2Ch+Str], offset aSS ; "%s = %s;"
.text:0040543C                 mov     [esp+2Ch+File], ecx ; int
.text:00405440                 call    sub_405B10
.text:00405445                 jmp     loc_405246
.text:0040544A ; ---------------------------------------------------------------------------
.text:0040544A
.text:0040544A loc_40544A:                             ; CODE XREF: sub_404DF0+3FE↑j
.text:0040544A                 mov     [esp+2Ch+Str], 0Ah ; Ch
.text:00405451                 mov     ebp, ds:_iob
.text:00405457                 add     ebp, 20h ; ' '
.text:0040545A                 mov     [esp+2Ch+File], ebp ; File
.text:0040545E                 call    _flsbuf
.text:00405463                 jmp     loc_405203
.text:00405463 sub_404DF0      endp
.text:00405463
.text:00405463 ; ---------------------------------------------------------------------------
.text:00405468                 align 20h
.text:00405480 ; const char aIspeedLuBaudOs[]
.text:00405480 aIspeedLuBaudOs db 'ispeed %lu baud; ospeed %lu baud;',0
.text:00405480                                         ; DATA XREF: sub_4054C0+65↓o
.text:004054A2 aLuLu           db '%lu %lu',0Ah,0      ; DATA XREF: sub_4054C0+70↓o
.text:004054AB ; const char aSpeedLuBaud[]
.text:004054AB aSpeedLuBaud    db 'speed %lu baud;',0  ; DATA XREF: sub_4054C0+B9↓o
.text:004054BB aLu             db '%lu',0Ah,0          ; DATA XREF: sub_4054C0+C0↓o
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0
.text:004054C0 sub_4054C0      proc near               ; CODE XREF: sub_403B10+7A4↑p
.text:004054C0                                         ; sub_404DF0+8E↑p ...
.text:004054C0
.text:004054C0 Str             = dword ptr -1Ch
.text:004054C0 var_18          = dword ptr -18h
.text:004054C0 var_14          = dword ptr -14h
.text:004054C0 var_9           = byte ptr -9
.text:004054C0 var_8           = dword ptr -8
.text:004054C0 var_4           = dword ptr -4
.text:004054C0 arg_0           = dword ptr  4
.text:004054C0 arg_4           = byte ptr  8
.text:004054C0
.text:004054C0                 sub     esp, 1Ch
.text:004054C3                 movzx   edx, [esp+1Ch+arg_4]
.text:004054C8                 mov     [esp+1Ch+var_4], esi
.text:004054CC                 mov     esi, [esp+1Ch+arg_0]
.text:004054D0                 mov     [esp+1Ch+var_8], ebx
.text:004054D4                 mov     [esp+1Ch+var_9], dl
.text:004054D8                 mov     [esp+1Ch+Str], esi
.text:004054DB                 call    sub_409A20
.text:004054E0                 test    eax, eax
.text:004054E2                 jz      short loc_405560
.text:004054E4                 mov     [esp+1Ch+Str], esi
.text:004054E7                 call    sub_409A20
.text:004054EC                 mov     [esp+1Ch+Str], esi
.text:004054EF                 mov     ebx, eax
.text:004054F1                 call    sub_409A10
.text:004054F6                 cmp     ebx, eax
.text:004054F8                 jz      short loc_405560
.text:004054FA                 mov     [esp+1Ch+Str], esi
.text:004054FD                 call    sub_409A10
.text:00405502                 mov     [esp+1Ch+Str], eax
.text:00405505                 call    sub_405870
.text:0040550A                 mov     [esp+1Ch+Str], esi
.text:0040550D                 mov     ebx, eax
.text:0040550F                 call    sub_409A20
.text:00405514                 mov     [esp+1Ch+Str], eax
.text:00405517                 call    sub_405870
.text:0040551C                 cmp     [esp+1Ch+var_9], 0
.text:00405521                 mov     [esp+1Ch+var_18], eax ; int
.text:00405525                 mov     eax, offset aIspeedLuBaudOs ; "ispeed %lu baud; ospeed %lu baud;"
.text:0040552A                 mov     [esp+1Ch+var_14], ebx
.text:0040552E                 jnz     short loc_405535
.text:00405530                 mov     eax, offset aLuLu ; "%lu %lu\n"
.text:00405535
.text:00405535 loc_405535:                             ; CODE XREF: sub_4054C0+6E↑j
.text:00405535                 mov     [esp+1Ch+Str], eax ; Str
.text:00405538                 call    sub_405B10
.text:0040553D                 lea     esi, [esi+0]
.text:00405540
.text:00405540 loc_405540:                             ; CODE XREF: sub_4054C0+CD↓j
.text:00405540                 xor     edx, edx
.text:00405542                 mov     ebx, [esp+1Ch+var_8]
.text:00405546                 mov     esi, [esp+1Ch+var_4]
.text:0040554A                 cmp     [esp+1Ch+var_9], 0
.text:0040554F                 setz    dl
.text:00405552                 dec     edx
.text:00405553                 and     ds:dword_40C020, edx
.text:00405559                 add     esp, 1Ch
.text:0040555C                 retn
.text:0040555C ; ---------------------------------------------------------------------------
.text:0040555D                 align 10h
.text:00405560
.text:00405560 loc_405560:                             ; CODE XREF: sub_4054C0+22↑j
.text:00405560                                         ; sub_4054C0+38↑j
.text:00405560                 mov     [esp+1Ch+Str], esi
.text:00405563                 call    sub_409A10
.text:00405568                 mov     [esp+1Ch+Str], eax
.text:0040556B                 call    sub_405870
.text:00405570                 cmp     [esp+1Ch+var_9], 0
.text:00405575                 mov     [esp+1Ch+var_18], eax ; int
.text:00405579                 mov     eax, offset aSpeedLuBaud ; "speed %lu baud;"
.text:0040557E                 jnz     short loc_405585
.text:00405580                 mov     eax, offset aLu ; "%lu\n"
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_4054C0+BE↑j
.text:00405585                 mov     [esp+1Ch+Str], eax ; Str
.text:00405588                 call    sub_405B10
.text:0040558D                 jmp     short loc_405540
.text:0040558D sub_4054C0      endp
.text:0040558D
.text:0040558D ; ---------------------------------------------------------------------------
.text:0040558F ; const char Format[]
.text:0040558F Format          db '%lx:%lx:%lx:%lx',0  ; DATA XREF: sub_404DF0+7E2↓o
.text:0040559F ; const char aLx[]
.text:0040559F aLx             db ':%lx',0             ; DATA XREF: sub_404DF0+806↓o
.text:004055A4                 align 10h
.text:004055B0 ; START OF FUNCTION CHUNK FOR sub_404DF0
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_404DF0+27↑j
.text:004055B0                 push    esi
.text:004055B1                 push    ebx
.text:004055B2                 sub     esp, 14h
.text:004055B5                 mov     esi, [esp+1Ch+arg_0]
.text:004055B9                 mov     ebx, [esi+0Ch]
.text:004055BC                 mov     [esp+1Ch+var_C], ebx
.text:004055C0                 mov     ecx, [esi+8]
.text:004055C3                 xor     ebx, ebx
.text:004055C5                 mov     [esp+1Ch+var_10], ecx
.text:004055C9                 mov     edx, [esi+4]
.text:004055CC                 mov     [esp+8], edx
.text:004055D0                 mov     edx, [esi]
.text:004055D2                 mov     dword ptr [esp], offset Format ; "%lx:%lx:%lx:%lx"
.text:004055D9                 mov     [esp+1Ch+var_18], edx
.text:004055DD                 call    printf
.text:004055E2                 lea     esi, [esi+0]
.text:004055E9                 lea     edi, [edi+0]
.text:004055F0
.text:004055F0 loc_4055F0:                             ; CODE XREF: sub_404DF0+819↓j
.text:004055F0                 movzx   edx, byte ptr [ebx+esi+10h]
.text:004055F5                 inc     ebx
.text:004055F6                 mov     dword ptr [esp], offset aLx ; ":%lx"
.text:004055FD                 mov     [esp+1Ch+var_18], edx
.text:00405601                 call    printf
.text:00405606                 cmp     ebx, 13h
.text:00405609                 jbe     short loc_4055F0
.text:0040560B                 mov     ecx, ds:_iob
.text:00405611                 mov     esi, [ecx+24h]
.text:00405614                 dec     esi
.text:00405615                 mov     [ecx+24h], esi
.text:00405618                 test    esi, esi
.text:0040561A                 js      short loc_405631
.text:0040561C                 mov     ebx, ds:_iob
.text:00405622                 mov     eax, [ebx+20h]
.text:00405625                 mov     byte ptr [eax], 0Ah
.text:00405628                 inc     dword ptr [ebx+20h]
.text:0040562B
.text:0040562B loc_40562B:                             ; CODE XREF: sub_404DF0+85A↓j
.text:0040562B                 add     esp, 14h
.text:0040562E                 pop     ebx
.text:0040562F                 pop     esi
.text:00405630                 retn
.text:00405631 ; ---------------------------------------------------------------------------
.text:00405631
.text:00405631 loc_405631:                             ; CODE XREF: sub_404DF0+82A↑j
.text:00405631                 mov     dword ptr [esp], 0Ah ; Ch
.text:00405638                 mov     edx, ds:_iob
.text:0040563E                 add     edx, 20h ; ' '
.text:00405641                 mov     [esp+1Ch+var_18], edx ; File
.text:00405645                 call    _flsbuf
.text:0040564A                 jmp     short loc_40562B
.text:0040564A ; END OF FUNCTION CHUNK FOR sub_404DF0
.text:0040564A ; ---------------------------------------------------------------------------
.text:0040564C ; const char aLxLxLxLxN[]
.text:0040564C aLxLxLxLxN      db '%lx:%lx:%lx:%lx%n',0
.text:0040564C                                         ; DATA XREF: sub_405670+B↓o
.text:0040565E ; const char aLxN[]
.text:0040565E aLxN            db ':%lx%n',0           ; DATA XREF: sub_405670+8C↓o
.text:00405665                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670 ; Attributes: bp-based frame fpd=10h
.text:00405670
.text:00405670 ; int __cdecl sub_405670(char *, int)
.text:00405670 sub_405670      proc near               ; CODE XREF: sub_403B10+7DA↑p
.text:00405670
.text:00405670 Buffer          = dword ptr -48h
.text:00405670 Format          = dword ptr -44h
.text:00405670 var_40          = dword ptr -40h
.text:00405670 var_3C          = dword ptr -3Ch
.text:00405670 var_38          = dword ptr -38h
.text:00405670 var_34          = dword ptr -34h
.text:00405670 var_30          = dword ptr -30h
.text:00405670 var_24          = dword ptr -24h
.text:00405670 var_20          = dword ptr -20h
.text:00405670 var_1C          = dword ptr -1Ch
.text:00405670 var_18          = dword ptr -18h
.text:00405670 var_14          = dword ptr -14h
.text:00405670 var_10          = dword ptr -10h
.text:00405670 arg_0           = dword ptr  8
.text:00405670 arg_4           = dword ptr  0Ch
.text:00405670
.text:00405670                 push    ebp
.text:00405671                 push    edi
.text:00405672                 push    esi
.text:00405673                 push    ebx
.text:00405674                 sub     esp, 3Ch
.text:00405677                 mov     ebx, [esp+48h+arg_0]
.text:0040567B                 mov     [esp+48h+Format], offset aLxLxLxLxN ; "%lx:%lx:%lx:%lx%n"
.text:00405683                 lea     edx, [esp+48h+var_1C]
.text:00405687                 mov     edi, [esp+48h+arg_4]
.text:0040568B                 mov     [esp+48h+var_3C], edx
.text:0040568F                 lea     ecx, [esp+48h+var_18]
.text:00405693                 lea     edx, [esp+48h+var_20]
.text:00405697                 mov     [esp+48h+var_40], edx
.text:0040569B                 lea     ebp, [esp+38h]
.text:0040569F                 lea     esi, [esp+48h+var_14]
.text:004056A3                 mov     [esp+48h+var_30], ebp
.text:004056A7                 mov     [esp+48h+var_34], esi
.text:004056AB                 mov     [esp+48h+var_38], ecx
.text:004056AF                 mov     [esp+48h+Buffer], ebx ; Buffer
.text:004056B2                 call    sscanf
.text:004056B7                 xor     edx, edx
.text:004056B9                 cmp     eax, 4
.text:004056BC                 jz      short loc_4056C8
.text:004056BE
.text:004056BE loc_4056BE:                             ; CODE XREF: sub_405670+9F↓j
.text:004056BE                                         ; sub_405670+C2↓j ...
.text:004056BE                 add     esp, 3Ch
.text:004056C1                 mov     eax, edx
.text:004056C3                 pop     ebx
.text:004056C4                 pop     esi
.text:004056C5                 pop     edi
.text:004056C6                 pop     ebp
.text:004056C7                 retn
.text:004056C8 ; ---------------------------------------------------------------------------
.text:004056C8
.text:004056C8 loc_4056C8:                             ; CODE XREF: sub_405670+4C↑j
.text:004056C8                 mov     edx, [esp+48h+var_20]
.text:004056CC                 mov     [edi], edx
.text:004056CE                 mov     ebp, [esp+48h+var_1C]
.text:004056D2                 mov     edx, [esp+48h+var_10]
.text:004056D6                 mov     [edi+4], ebp
.text:004056D9                 mov     esi, [esp+48h+var_18]
.text:004056DD                 add     ebx, edx
.text:004056DF                 lea     ebp, [esp+24h]
.text:004056E3                 mov     [edi+8], esi
.text:004056E6                 mov     ecx, [esp+48h+var_14]
.text:004056EA                 xor     esi, esi
.text:004056EC                 mov     [edi+0Ch], ecx
.text:004056EF                 nop
.text:004056F0
.text:004056F0 loc_4056F0:                             ; CODE XREF: sub_405670+BD↓j
.text:004056F0                 mov     [esp+48h+var_40], ebp
.text:004056F4                 lea     ecx, [esp+48h+var_10]
.text:004056F8                 mov     [esp+48h+var_3C], ecx
.text:004056FC                 mov     [esp+48h+Format], offset aLxN ; ":%lx%n"
.text:00405704                 mov     [esp+48h+Buffer], ebx ; Buffer
.text:00405707                 call    sscanf
.text:0040570C                 xor     edx, edx
.text:0040570E                 dec     eax
.text:0040570F                 jnz     short loc_4056BE
.text:00405711                 movzx   eax, byte ptr [esp+48h+var_24]
.text:00405716                 movzx   ecx, al
.text:00405719                 mov     [esi+edi+10h], al
.text:0040571D                 cmp     ecx, [esp+48h+var_24]
.text:00405721                 jnz     short loc_40573B
.text:00405723                 mov     ecx, [esp+48h+var_10]
.text:00405727                 inc     esi
.text:00405728                 add     ebx, ecx
.text:0040572A                 cmp     esi, 13h
.text:0040572D                 jbe     short loc_4056F0
.text:0040572F                 cmp     byte ptr [ebx], 0
.text:00405732                 jnz     short loc_4056BE
.text:00405734                 mov     edx, 1
.text:00405739                 jmp     short loc_4056BE
.text:0040573B ; ---------------------------------------------------------------------------
.text:0040573B
.text:0040573B loc_40573B:                             ; CODE XREF: sub_405670+B1↑j
.text:0040573B                 xor     edx, edx
.text:0040573D                 jmp     loc_4056BE
.text:0040573D sub_405670      endp
.text:0040573D
.text:0040573D ; ---------------------------------------------------------------------------
.text:00405742 word_405742     dw 30h                  ; DATA XREF: .data:off_40B670↓o
.text:00405744 dword_405744    dd 37003035h, 31310035h, 33310030h, 33310034h, 352E34h
.text:00405744                                         ; DATA XREF: .data:0040B67C↓o
.text:00405744                 dd 303531h, 303032h, 303033h, 303036h, 30303231h, 30383100h
.text:00405744                 dd 34320030h, 34003030h, 303038h, 30303639h, 32393100h
.text:00405744                 dd 33003030h, 30303438h, 74786500h, 78650061h, 35006274h
.text:00405744                 dd 30303637h, 35313100h, 303032h, 34303332h, 34003030h
.text:00405744                 dd 30383036h, 30350030h, 30303030h, 36373500h, 303030h
.text:00405744                 dd 36313239h, 31003030h, 30303030h, 31003030h, 30323531h
.text:00405744                 dd 31003030h, 30303035h, 32003030h, 30303030h, 32003030h
.text:00405744                 dd 30303035h, 33003030h, 30303030h, 33003030h, 30303035h
.text:00405744                 dd 34003030h, 30303030h, 89003030h, 27BC8DF6h, 0
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810
.text:00405810 sub_405810      proc near               ; CODE XREF: sub_403B10+7B1↑p
.text:00405810                                         ; sub_4049D0+1E↑p
.text:00405810
.text:00405810 Str1            = dword ptr -1Ch
.text:00405810 Str2            = dword ptr -18h
.text:00405810 arg_0           = dword ptr  4
.text:00405810
.text:00405810                 push    esi
.text:00405811                 push    ebx
.text:00405812                 sub     esp, 14h
.text:00405815                 mov     eax, off_40B670
.text:0040581A                 mov     esi, [esp+1Ch+arg_0]
.text:0040581E                 test    eax, eax
.text:00405820                 jz      short loc_405853
.text:00405822                 xor     ebx, ebx
.text:00405824                 lea     esi, [esi+0]
.text:0040582A                 lea     edi, [edi+0]
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_405810+41↓j
.text:00405830                 mov     [esp+1Ch+Str1], esi ; Str1
.text:00405833                 mov     edx, off_40B670[ebx]
.text:00405839                 mov     [esp+1Ch+Str2], edx ; Str2
.text:0040583D                 call    strcmp
.text:00405842                 test    eax, eax
.text:00405844                 jz      short loc_40585E
.text:00405846                 add     ebx, 0Ch
.text:00405849                 mov     eax, off_40B670[ebx]
.text:0040584F                 test    eax, eax
.text:00405851                 jnz     short loc_405830
.text:00405853
.text:00405853 loc_405853:                             ; CODE XREF: sub_405810+10↑j
.text:00405853                 mov     eax, 0FFFFFFFFh
.text:00405858
.text:00405858 loc_405858:                             ; CODE XREF: sub_405810+54↓j
.text:00405858                 add     esp, 14h
.text:0040585B                 pop     ebx
.text:0040585C                 pop     esi
.text:0040585D                 retn
.text:0040585E ; ---------------------------------------------------------------------------
.text:0040585E
.text:0040585E loc_40585E:                             ; CODE XREF: sub_405810+34↑j
.text:0040585E                 mov     eax, dword_40B674[ebx]
.text:00405864                 jmp     short loc_405858
.text:00405864 sub_405810      endp
.text:00405864
.text:00405864 ; ---------------------------------------------------------------------------
.text:00405866                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870
.text:00405870 sub_405870      proc near               ; CODE XREF: sub_4054C0+45↑p
.text:00405870                                         ; sub_4054C0+57↑p ...
.text:00405870
.text:00405870 arg_0           = dword ptr  4
.text:00405870
.text:00405870                 mov     ecx, off_40B670
.text:00405876                 mov     edx, [esp+arg_0]
.text:0040587A                 test    ecx, ecx
.text:0040587C                 jz      short loc_405895
.text:0040587E                 xor     eax, eax
.text:00405880
.text:00405880 loc_405880:                             ; CODE XREF: sub_405870+23↓j
.text:00405880                 cmp     edx, dword_40B674[eax]
.text:00405886                 jz      short loc_405898
.text:00405888                 add     eax, 0Ch
.text:0040588B                 mov     ecx, off_40B670[eax]
.text:00405891                 test    ecx, ecx
.text:00405893                 jnz     short loc_405880
.text:00405895
.text:00405895 loc_405895:                             ; CODE XREF: sub_405870+C↑j
.text:00405895                 xor     eax, eax
.text:00405897                 retn
.text:00405898 ; ---------------------------------------------------------------------------
.text:00405898
.text:00405898 loc_405898:                             ; CODE XREF: sub_405870+16↑j
.text:00405898                 mov     eax, dword_40B678[eax]
.text:0040589E                 retn
.text:0040589E sub_405870      endp
.text:0040589E
.text:0040589E ; ---------------------------------------------------------------------------
.text:0040589F                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0
.text:004058A0 sub_4058A0      proc near               ; CODE XREF: sub_404570+354↑p
.text:004058A0
.text:004058A0 var_1C          = dword ptr -1Ch
.text:004058A0 var_18          = dword ptr -18h
.text:004058A0 arg_0           = dword ptr  4
.text:004058A0
.text:004058A0                 push    esi
.text:004058A1                 push    ebx
.text:004058A2                 sub     esp, 14h
.text:004058A5                 mov     edx, off_40B510 ; "intr"
.text:004058AB                 mov     esi, [esp+1Ch+arg_0]
.text:004058AF                 test    edx, edx
.text:004058B1                 jz      short loc_4058DE
.text:004058B3                 xor     ecx, ecx
.text:004058B5                 lea     esi, [esi+0]
.text:004058B9                 lea     edi, [edi+0]
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_4058A0+3C↓j
.text:004058C0                 movzx   edx, byte_40B514[ecx]
.text:004058C7                 mov     ebx, dword_40B518[ecx]
.text:004058CD                 add     ecx, 0Ch
.text:004058D0                 mov     [ebx+esi+10h], dl
.text:004058D4                 mov     eax, off_40B510[ecx] ; "intr"
.text:004058DA                 test    eax, eax
.text:004058DC                 jnz     short loc_4058C0
.text:004058DE
.text:004058DE loc_4058DE:                             ; CODE XREF: sub_4058A0+11↑j
.text:004058DE                 mov     eax, off_40B010 ; "parenb"
.text:004058E3                 test    eax, eax
.text:004058E5                 jz      short loc_40590C
.text:004058E7                 xor     ebx, ebx
.text:004058E9                 lea     esi, [esi+0]
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_4058A0+6A↓j
.text:004058F0                 movsx   eax, byte_40B018[ebx]
.text:004058F7                 test    al, 1
.text:004058F9                 jnz     short loc_405940
.text:004058FB                 test    al, 2
.text:004058FD                 jnz     short loc_405912
.text:004058FF
.text:004058FF loc_4058FF:                             ; CODE XREF: sub_4058A0+9E↓j
.text:004058FF                                         ; sub_4058A0+CA↓j
.text:004058FF                 add     ebx, 14h
.text:00405902                 mov     ecx, off_40B010[ebx] ; "parenb"
.text:00405908                 test    ecx, ecx
.text:0040590A                 jnz     short loc_4058F0
.text:0040590C
.text:0040590C loc_40590C:                             ; CODE XREF: sub_4058A0+45↑j
.text:0040590C                 add     esp, 14h
.text:0040590F                 pop     ebx
.text:00405910                 pop     esi
.text:00405911                 retn
.text:00405912 ; ---------------------------------------------------------------------------
.text:00405912
.text:00405912 loc_405912:                             ; CODE XREF: sub_4058A0+5D↑j
.text:00405912                 mov     [esp+1Ch+var_18], esi
.text:00405916                 mov     edx, dword_40B014[ebx]
.text:0040591C                 mov     [esp+1Ch+var_1C], edx
.text:0040591F                 call    sub_404D90
.text:00405924                 mov     edx, dword_40B020[ebx]
.text:0040592A                 mov     ecx, eax
.text:0040592C                 mov     eax, [eax]
.text:0040592E                 not     edx
.text:00405930                 and     edx, eax
.text:00405932                 mov     eax, dword_40B01C[ebx]
.text:00405938                 not     eax
.text:0040593A                 and     edx, eax
.text:0040593C                 mov     [ecx], edx
.text:0040593E                 jmp     short loc_4058FF
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405940
.text:00405940 loc_405940:                             ; CODE XREF: sub_4058A0+59↑j
.text:00405940                 mov     [esp+1Ch+var_18], esi
.text:00405944                 mov     ecx, dword_40B014[ebx]
.text:0040594A                 mov     [esp+1Ch+var_1C], ecx
.text:0040594D                 call    sub_404D90
.text:00405952                 mov     ecx, eax
.text:00405954                 mov     eax, dword_40B020[ebx]
.text:0040595A                 mov     edx, [ecx]
.text:0040595C                 not     eax
.text:0040595E                 and     eax, edx
.text:00405960                 mov     edx, dword_40B01C[ebx]
.text:00405966                 or      eax, edx
.text:00405968                 mov     [ecx], eax
.text:0040596A                 jmp     short loc_4058FF
.text:0040596A sub_4058A0      endp
.text:0040596A
.text:0040596A ; ---------------------------------------------------------------------------
.text:0040596C aUndef_0        db '<undef>',0          ; DATA XREF: sub_405980+4↓o
.text:00405974                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980
.text:00405980 sub_405980      proc near               ; CODE XREF: sub_404DF0+34D↑p
.text:00405980                                         ; sub_404DF0+636↑p
.text:00405980
.text:00405980 arg_0           = dword ptr  4
.text:00405980
.text:00405980                 mov     ecx, [esp+arg_0]
.text:00405984                 mov     eax, offset aUndef_0 ; "<undef>"
.text:00405989                 test    cl, cl
.text:0040598B                 mov     dl, cl
.text:0040598D                 jz      short locret_4059B8
.text:0040598F                 cmp     cl, 1Fh
.text:00405992                 jbe     loc_405A40
.text:00405998                 cmp     cl, 7Eh ; '~'
.text:0040599B                 ja      short loc_4059C0
.text:0040599D                 mov     ds:byte_40C000, cl
.text:004059A3                 mov     eax, offset byte_40C001
.text:004059A8                 nop
.text:004059A9                 lea     esi, [esi+0]
.text:004059B0
.text:004059B0 loc_4059B0:                             ; CODE XREF: sub_405980+6B↓j
.text:004059B0                                         ; sub_405980+80↓j ...
.text:004059B0                 mov     byte ptr [eax], 0
.text:004059B3                 mov     eax, offset byte_40C000
.text:004059B8
.text:004059B8 locret_4059B8:                          ; CODE XREF: sub_405980+D↑j
.text:004059B8                 retn
.text:004059B8 ; ---------------------------------------------------------------------------
.text:004059B9                 align 10h
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_405980+1B↑j
.text:004059C0                 cmp     cl, 7Fh
.text:004059C3                 jz      short loc_405A14
.text:004059C5                 mov     ds:byte_40C000, 4Dh ; 'M'
.text:004059CC                 cmp     cl, 9Fh ; 'Ÿ'
.text:004059CF                 mov     ds:byte_40C001, 2Dh ; '-'
.text:004059D6                 jbe     short loc_405A02
.text:004059D8                 cmp     cl, 0FFh
.text:004059DB                 jz      short loc_4059ED
.text:004059DD                 add     dl, 80h ; '€'
.text:004059E0                 mov     eax, offset byte_40C003
.text:004059E5                 mov     ds:byte_40C002, dl
.text:004059EB                 jmp     short loc_4059B0
.text:004059ED ; ---------------------------------------------------------------------------
.text:004059ED
.text:004059ED loc_4059ED:                             ; CODE XREF: sub_405980+5B↑j
.text:004059ED                 mov     ds:byte_40C002, 5Eh ; '^'
.text:004059F4                 mov     ds:byte_40C003, 3Fh ; '?'
.text:004059FB
.text:004059FB loc_4059FB:                             ; CODE XREF: sub_405980+92↓j
.text:004059FB                 mov     eax, offset unk_40C004
.text:00405A00                 jmp     short loc_4059B0
.text:00405A02 ; ---------------------------------------------------------------------------
.text:00405A02
.text:00405A02 loc_405A02:                             ; CODE XREF: sub_405980+56↑j
.text:00405A02                 mov     ds:byte_40C002, 5Eh ; '^'
.text:00405A09                 sub     dl, 40h ; '@'
.text:00405A0C                 mov     ds:byte_40C003, dl
.text:00405A12                 jmp     short loc_4059FB
.text:00405A14 ; ---------------------------------------------------------------------------
.text:00405A14
.text:00405A14 loc_405A14:                             ; CODE XREF: sub_405980+43↑j
.text:00405A14                 mov     ds:byte_40C000, 5Eh ; '^'
.text:00405A1B                 mov     ds:byte_40C001, 3Fh ; '?'
.text:00405A22                 lea     esi, [esi+0]
.text:00405A29                 lea     edi, [edi+0]
.text:00405A30
.text:00405A30 loc_405A30:                             ; CODE XREF: sub_405980+D0↓j
.text:00405A30                 mov     eax, offset byte_40C002
.text:00405A35                 jmp     loc_4059B0
.text:00405A35 ; ---------------------------------------------------------------------------
.text:00405A3A                 align 10h
.text:00405A40
.text:00405A40 loc_405A40:                             ; CODE XREF: sub_405980+12↑j
.text:00405A40                 mov     ds:byte_40C000, 5Eh ; '^'
.text:00405A47                 add     dl, 40h ; '@'
.text:00405A4A                 mov     ds:byte_40C001, dl
.text:00405A50                 jmp     short loc_405A30
.text:00405A50 sub_405980      endp
.text:00405A50
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A52 ; const char word_405A52[]
.text:00405A52 word_405A52     dw 4262h                ; DATA XREF: sub_405A80+F↓o
.text:00405A54                 db 0
.text:00405A55 aInvalidInteger db 'invalid integer argument `%s',27h,0
.text:00405A55                                         ; DATA XREF: sub_405A80:loc_405AC1↓o
.text:00405A73                 align 10h
.text:00405A80
.text:00405A80 ; =============== S U B R O U T I N E =======================================
.text:00405A80
.text:00405A80
.text:00405A80 sub_405A80      proc near               ; CODE XREF: sub_403B10+656↑p
.text:00405A80                                         ; sub_403B10+70E↑p ...
.text:00405A80
.text:00405A80 Code            = dword ptr -1Ch
.text:00405A80 ErrorMessage    = dword ptr -18h
.text:00405A80 var_14          = dword ptr -14h
.text:00405A80 var_10          = byte ptr -10h
.text:00405A80 Str             = dword ptr -0Ch
.text:00405A80 var_8           = dword ptr -8
.text:00405A80 var_4           = dword ptr -4
.text:00405A80 arg_0           = byte ptr  4
.text:00405A80 arg_4           = dword ptr  8
.text:00405A80
.text:00405A80                 sub     esp, 1Ch
.text:00405A83                 lea     edx, [esp+1Ch+var_8]
.text:00405A87                 mov     [esp+1Ch+var_4], ebx
.text:00405A8B                 mov     ebx, dword ptr [esp+1Ch+arg_0]
.text:00405A8F                 mov     [esp+1Ch+Str], offset word_405A52 ; Str
.text:00405A97                 mov     dword ptr [esp+1Ch+var_10], edx ; int
.text:00405A9B                 mov     [esp+1Ch+var_14], 0 ; int
.text:00405AA3                 mov     [esp+1Ch+ErrorMessage], 0 ; int
.text:00405AAB                 mov     [esp+1Ch+Code], ebx ; int
.text:00405AAE                 call    sub_406CB0
.text:00405AB3                 test    eax, eax
.text:00405AB5                 jnz     short loc_405AC1
.text:00405AB7                 mov     eax, [esp+1Ch+var_8]
.text:00405ABB                 cmp     [esp+1Ch+arg_4], eax
.text:00405ABF                 jnb     short loc_405AFA
.text:00405AC1
.text:00405AC1 loc_405AC1:                             ; CODE XREF: sub_405A80+35↑j
.text:00405AC1                 mov     [esp+1Ch+Code], offset aInvalidInteger ; "invalid integer argument `%s'"
.text:00405AC8                 call    ds:libintl_gettext
.text:00405ACE                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00405AD2                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405ADA                 mov     [esp+1Ch+Code], 0 ; Code
.text:00405AE1                 mov     [esp+1Ch+var_14], eax ; char *
.text:00405AE5                 call    sub_409770
.text:00405AEA                 mov     [esp+1Ch+Code], 1 ; Code
.text:00405AF1                 call    sub_403430
.text:00405AF1 ; ---------------------------------------------------------------------------
.text:00405AF6                 db  8Bh ; ‹
.text:00405AF7                 db  44h ; D
.text:00405AF8                 db  24h ; $
.text:00405AF9                 db  14h
.text:00405AFA ; ---------------------------------------------------------------------------
.text:00405AFA
.text:00405AFA loc_405AFA:                             ; CODE XREF: sub_405A80+3F↑j
.text:00405AFA                 mov     ebx, [esp+1Ch+var_4]
.text:00405AFE                 add     esp, 1Ch
.text:00405B01                 retn
.text:00405B01 sub_405A80      endp
.text:00405B01
.text:00405B01 ; ---------------------------------------------------------------------------
.text:00405B02                 align 10h
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10
.text:00405B10 ; int __cdecl sub_405B10(char *Str, int)
.text:00405B10 sub_405B10      proc near               ; CODE XREF: sub_404C10+57↑p
.text:00405B10                                         ; sub_404DF0:loc_405094↑p ...
.text:00405B10
.text:00405B10 Buffer          = dword ptr -1Ch
.text:00405B10 Stream          = dword ptr -18h
.text:00405B10 var_14          = dword ptr -14h
.text:00405B10 var_8           = dword ptr -8
.text:00405B10 Str             = dword ptr  4
.text:00405B10 arg_4           = dword ptr  8
.text:00405B10
.text:00405B10                 push    ebx
.text:00405B11                 sub     esp, 18h
.text:00405B14                 mov     edx, [esp+1Ch+Str]
.text:00405B18                 lea     ecx, [esp+1Ch+arg_4]
.text:00405B1C                 mov     [esp+1Ch+var_14], ecx ; int
.text:00405B20                 mov     [esp+1Ch+Stream], edx ; Str
.text:00405B24                 lea     edx, [esp+1Ch+var_8]
.text:00405B28                 mov     [esp+1Ch+Buffer], edx ; int
.text:00405B2B                 call    sub_40A590
.text:00405B30                 test    eax, eax
.text:00405B32                 mov     ebx, eax
.text:00405B34                 js      loc_405C06
.text:00405B3A                 mov     edx, ds:dword_40C020
.text:00405B40                 test    edx, edx
.text:00405B42                 jle     short loc_405B78
.text:00405B44                 mov     ecx, ds:dword_40C010
.text:00405B4A                 sub     ecx, edx
.text:00405B4C                 cmp     ecx, eax
.text:00405B4E                 jge     short loc_405BC3
.text:00405B50                 mov     edx, ds:_iob
.text:00405B56                 mov     ecx, [edx+24h]
.text:00405B59                 dec     ecx
.text:00405B5A                 mov     [edx+24h], ecx
.text:00405B5D                 test    ecx, ecx
.text:00405B5F                 js      short loc_405BA8
.text:00405B61                 mov     ecx, ds:_iob
.text:00405B67                 mov     eax, [ecx+20h]
.text:00405B6A                 mov     byte ptr [eax], 0Ah
.text:00405B6D                 inc     dword ptr [ecx+20h]
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405B10+B1↓j
.text:00405B70                 xor     ecx, ecx
.text:00405B72                 mov     ds:dword_40C020, ecx
.text:00405B78
.text:00405B78 loc_405B78:                             ; CODE XREF: sub_405B10+32↑j
.text:00405B78                                         ; sub_405B10+D9↓j
.text:00405B78                 mov     ecx, ds:_iob
.text:00405B7E                 mov     edx, [esp+1Ch+var_8]
.text:00405B82                 add     ecx, 20h ; ' '
.text:00405B85                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:00405B89                 mov     [esp+1Ch+Buffer], edx ; Buffer
.text:00405B8C                 call    fputs
.text:00405B91                 mov     ecx, [esp+1Ch+var_8]
.text:00405B95                 mov     [esp+1Ch+Buffer], ecx ; Block
.text:00405B98                 call    free
.text:00405B9D                 add     ds:dword_40C020, ebx
.text:00405BA3                 add     esp, 18h
.text:00405BA6                 pop     ebx
.text:00405BA7                 retn
.text:00405BA8 ; ---------------------------------------------------------------------------
.text:00405BA8
.text:00405BA8 loc_405BA8:                             ; CODE XREF: sub_405B10+4F↑j
.text:00405BA8                 mov     [esp+1Ch+Buffer], 0Ah ; Ch
.text:00405BAF                 mov     edx, ds:_iob
.text:00405BB5                 add     edx, 20h ; ' '
.text:00405BB8                 mov     [esp+1Ch+Stream], edx ; File
.text:00405BBC                 call    _flsbuf
.text:00405BC1                 jmp     short loc_405B70
.text:00405BC3 ; ---------------------------------------------------------------------------
.text:00405BC3
.text:00405BC3 loc_405BC3:                             ; CODE XREF: sub_405B10+3E↑j
.text:00405BC3                 mov     edx, ds:_iob
.text:00405BC9                 mov     ecx, [edx+24h]
.text:00405BCC                 dec     ecx
.text:00405BCD                 mov     [edx+24h], ecx
.text:00405BD0                 test    ecx, ecx
.text:00405BD2                 js      short loc_405BEB
.text:00405BD4                 mov     ecx, ds:_iob
.text:00405BDA                 mov     eax, [ecx+20h]
.text:00405BDD                 mov     byte ptr [eax], 20h ; ' '
.text:00405BE0                 inc     dword ptr [ecx+20h]
.text:00405BE3
.text:00405BE3 loc_405BE3:                             ; CODE XREF: sub_405B10+F4↓j
.text:00405BE3                 inc     ds:dword_40C020
.text:00405BE9                 jmp     short loc_405B78
.text:00405BEB ; ---------------------------------------------------------------------------
.text:00405BEB
.text:00405BEB loc_405BEB:                             ; CODE XREF: sub_405B10+C2↑j
.text:00405BEB                 mov     [esp+1Ch+Buffer], 20h ; ' ' ; Ch
.text:00405BF2                 mov     edx, ds:_iob
.text:00405BF8                 add     edx, 20h ; ' '
.text:00405BFB                 mov     [esp+1Ch+Stream], edx ; File
.text:00405BFF                 call    _flsbuf
.text:00405C04                 jmp     short loc_405BE3
.text:00405C06 ; ---------------------------------------------------------------------------
.text:00405C06
.text:00405C06 loc_405C06:                             ; CODE XREF: sub_405B10+24↑j
.text:00405C06                 call    sub_408070
.text:00405C06 sub_405B10      endp
.text:00405C06
.text:00405C06 ; ---------------------------------------------------------------------------
.text:00405C0B                 align 20h
.text:00405C20
.text:00405C20 ; =============== S U B R O U T I N E =======================================
.text:00405C20
.text:00405C20
.text:00405C20 sub_405C20      proc near               ; DATA XREF: sub_405DA0+1B4↓o
.text:00405C20                 sub     eax, 9090002Dh
.text:00405C25                 nop
.text:00405C26                 nop
.text:00405C27                 nop
.text:00405C28                 nop
.text:00405C29                 nop
.text:00405C2A                 nop
.text:00405C2B                 nop
.text:00405C2C                 nop
.text:00405C2D                 nop
.text:00405C2E                 nop
.text:00405C2F                 nop
.text:00405C30                 nop
.text:00405C31                 nop
.text:00405C32                 nop
.text:00405C33                 nop
.text:00405C34                 nop
.text:00405C35                 nop
.text:00405C36                 nop
.text:00405C37                 nop
.text:00405C38                 nop
.text:00405C39                 nop
.text:00405C3A                 nop
.text:00405C3B                 nop
.text:00405C3C                 nop
.text:00405C3D                 nop
.text:00405C3E                 nop
.text:00405C3F                 nop
.text:00405C3F sub_405C20      endp
.text:00405C3F
.text:00405C40
.text:00405C40 ; =============== S U B R O U T I N E =======================================
.text:00405C40
.text:00405C40
.text:00405C40 sub_405C40      proc near               ; DATA XREF: sub_405DA0+3CC↓o
.text:00405C40                 and     eax, 6F203A73h
.text:00405C45                 jo      short loc_405CBB
.text:00405C47                 imul    ebp, [edi+6Eh], 63256020h
.text:00405C4E                 and     eax, 64202773h
.text:00405C53                 outsd
.text:00405C54                 db      65h
.text:00405C54                 jnb     short loc_405CC5
.text:00405C57                 daa
.text:00405C58                 jz      short loc_405C7A
.text:00405C5A                 popa
.text:00405C5B                 insb
.text:00405C5C                 insb
.text:00405C5D                 outsd
.text:00405C5E                 ja      short sub_405C80
.text:00405C60                 popa
.text:00405C61                 outsb
.text:00405C62                 and     [ecx+72h], ah
.text:00405C65                 db      67h
.text:00405C65                 jnz     near ptr loc_405CD4+1
.text:00405C68                 outs    dx, byte ptr gs:[esi]
.text:00405C6A                 jz      short loc_405C76
.text:00405C6C                 add     [eax-6F6F6F70h], dl
.text:00405C72                 nop
.text:00405C73                 nop
.text:00405C74                 nop
.text:00405C75                 nop
.text:00405C76
.text:00405C76 loc_405C76:                             ; CODE XREF: sub_405C40+2A↑j
.text:00405C76                 nop
.text:00405C77                 nop
.text:00405C78                 nop
.text:00405C79                 nop
.text:00405C7A
.text:00405C7A loc_405C7A:                             ; CODE XREF: sub_405C40+18↑j
.text:00405C7A                 nop
.text:00405C7B                 nop
.text:00405C7C                 nop
.text:00405C7D                 nop
.text:00405C7E                 nop
.text:00405C7F                 nop
.text:00405C7F sub_405C40      endp ; sp-analysis failed
.text:00405C7F
.text:00405C80
.text:00405C80 ; =============== S U B R O U T I N E =======================================
.text:00405C80
.text:00405C80
.text:00405C80 sub_405C80      proc near               ; CODE XREF: sub_405C40+1E↑j
.text:00405C80                                         ; DATA XREF: sub_405DA0:loc_4061D2↓o
.text:00405C80                 and     eax, 6F203A73h
.text:00405C85                 jo      short loc_405CFB
.text:00405C87                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:00405C8E                 and     eax, 64202773h
.text:00405C93                 outsd
.text:00405C94                 db      65h
.text:00405C94                 jnb     short loc_405D05
.text:00405C97                 daa
.text:00405C98                 jz      short loc_405CBA
.text:00405C9A                 popa
.text:00405C9B                 insb
.text:00405C9C                 insb
.text:00405C9D                 outsd
.text:00405C9E                 ja      short sub_405CC0
.text:00405CA0                 popa
.text:00405CA1                 outsb
.text:00405CA2                 and     [ecx+72h], ah
.text:00405CA5                 db      67h
.text:00405CA5                 jnz     loc_405D15
.text:00405CA8                 outs    dx, byte ptr gs:[esi]
.text:00405CAA                 jz      short loc_405CB6
.text:00405CAC                 add     [eax-6F6F6F70h], dl
.text:00405CB2                 nop
.text:00405CB3                 nop
.text:00405CB4                 nop
.text:00405CB5                 nop
.text:00405CB6
.text:00405CB6 loc_405CB6:                             ; CODE XREF: sub_405C80+2A↑j
.text:00405CB6                 nop
.text:00405CB7                 nop
.text:00405CB8                 nop
.text:00405CB9                 nop
.text:00405CBA
.text:00405CBA loc_405CBA:                             ; CODE XREF: sub_405C80+18↑j
.text:00405CBA                 nop
.text:00405CBB
.text:00405CBB loc_405CBB:                             ; CODE XREF: sub_405C40+5↑j
.text:00405CBB                 nop
.text:00405CBC                 nop
.text:00405CBD                 nop
.text:00405CBE                 nop
.text:00405CBF                 nop
.text:00405CBF sub_405C80      endp ; sp-analysis failed
.text:00405CBF
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0
.text:00405CC0 sub_405CC0      proc near               ; CODE XREF: sub_405C80+1E↑j
.text:00405CC0                                         ; DATA XREF: sub_405DA0:loc_406270↓o ...
.text:00405CC0                 and     eax, 6F203A73h
.text:00405CC5
.text:00405CC5 loc_405CC5:                             ; CODE XREF: sub_405C40+14↑j
.text:00405CC5                 jo      short loc_405D3B
.text:00405CC7                 imul    ebp, [edi+6Eh], 73256020h
.text:00405CCE                 daa
.text:00405CCF                 and     [edx+65h], dh
.text:00405CD2                 jno     short near ptr loc_405D48+1
.text:00405CD4
.text:00405CD4 loc_405CD4:                             ; CODE XREF: sub_405C40+25↑j
.text:00405CD4                 imul    esi, [edx+65h], 6E612073h
.text:00405CDB                 and     [ecx+72h], ah
.text:00405CDE                 db      67h
.text:00405CDE                 jnz     near ptr loc_405D4C+2
.text:00405CE1                 outs    dx, byte ptr gs:[esi]
.text:00405CE3                 jz      short loc_405CEF
.text:00405CE5                 add     [eax-6F6F6F70h], dl
.text:00405CEB                 nop
.text:00405CEC                 nop
.text:00405CED                 nop
.text:00405CEE                 nop
.text:00405CEF
.text:00405CEF loc_405CEF:                             ; CODE XREF: sub_405CC0+23↑j
.text:00405CEF                 nop
.text:00405CF0                 nop
.text:00405CF1                 nop
.text:00405CF2                 nop
.text:00405CF3                 nop
.text:00405CF4                 nop
.text:00405CF5                 nop
.text:00405CF6                 nop
.text:00405CF7                 nop
.text:00405CF8                 nop
.text:00405CF9                 nop
.text:00405CFA                 nop
.text:00405CFB
.text:00405CFB loc_405CFB:                             ; CODE XREF: sub_405C80+5↑j
.text:00405CFB                 nop
.text:00405CFC                 nop
.text:00405CFD                 nop
.text:00405CFE                 nop
.text:00405CFF                 nop
.text:00405CFF sub_405CC0      endp
.text:00405CFF
.text:00405D00
.text:00405D00 ; =============== S U B R O U T I N E =======================================
.text:00405D00
.text:00405D00
.text:00405D00 sub_405D00      proc near               ; DATA XREF: sub_405DA0+55E↓o
.text:00405D00                 and     eax, 75203A73h
.text:00405D05
.text:00405D05 loc_405D05:                             ; CODE XREF: sub_405C80+14↑j
.text:00405D05                 outsb
.text:00405D06                 jb      short near ptr loc_405D67+6
.text:00405D08                 arpl    [edi+67h], bp
.text:00405D0B                 outsb
.text:00405D0C                 imul    edi, [edx+65h], 706F2064h
.text:00405D13                 jz      short loc_405D7E
.text:00405D15
.text:00405D15 loc_405D15:                             ; CODE XREF: sub_405C80+25↑j
.text:00405D15                 outsd
.text:00405D16                 outsb
.text:00405D17                 and     [eax+25h], ah
.text:00405D1A                 arpl    ds:0A2773h, sp
.text:00405D20
.text:00405D20 loc_405D20:                             ; DATA XREF: sub_405DA0:loc_406341↓o
.text:00405D20                 add     [eax-6F6F6F70h], dl
.text:00405D26                 nop
.text:00405D27                 nop
.text:00405D28                 nop
.text:00405D29                 nop
.text:00405D2A                 nop
.text:00405D2B                 nop
.text:00405D2C                 nop
.text:00405D2D                 nop
.text:00405D2E                 nop
.text:00405D2F                 nop
.text:00405D30                 nop
.text:00405D31                 nop
.text:00405D32                 nop
.text:00405D33                 nop
.text:00405D34                 nop
.text:00405D35                 nop
.text:00405D36                 nop
.text:00405D37                 nop
.text:00405D38                 nop
.text:00405D39                 nop
.text:00405D3A                 nop
.text:00405D3B
.text:00405D3B loc_405D3B:                             ; CODE XREF: sub_405CC0:loc_405CC5↑j
.text:00405D3B                 nop
.text:00405D3C                 nop
.text:00405D3D                 nop
.text:00405D3E                 nop
.text:00405D3F                 nop
.text:00405D3F sub_405D00      endp
.text:00405D3F
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40
.text:00405D40 sub_405D40      proc near               ; DATA XREF: sub_405DA0:loc_40635A↓o
.text:00405D40                 and     eax, 75203A73h
.text:00405D45                 outsb
.text:00405D46                 jb      short near ptr loc_405DA7+6
.text:00405D48
.text:00405D48 loc_405D48:                             ; CODE XREF: sub_405CC0+12↑j
.text:00405D48                 arpl    [edi+67h], bp
.text:00405D4B                 outsb
.text:00405D4C
.text:00405D4C loc_405D4C:                             ; CODE XREF: sub_405CC0+1E↑j
.text:00405D4C                 imul    edi, [edx+65h], 706F2064h
.text:00405D53                 jz      short loc_405DBE
.text:00405D55                 outsd
.text:00405D56                 outsb
.text:00405D57                 and     [eax+2Dh], ah
.text:00405D5A                 sub     eax, 0A277325h
.text:00405D5F                 add     ds:6F203A73h, ah
.text:00405D65                 jo      short loc_405DDB
.text:00405D67
.text:00405D67 loc_405D67:                             ; CODE XREF: sub_405D00+6↑j
.text:00405D67                 imul    ebp, [edi+6Eh], 71657220h
.text:00405D6E                 jnz     short loc_405DD9
.text:00405D70                 jb      short loc_405DD7
.text:00405D72                 jnb     short loc_405D94
.text:00405D74                 popa
.text:00405D75                 outsb
.text:00405D76                 and     [ecx+72h], ah
.text:00405D79                 db      67h
.text:00405D79                 jnz     near ptr loc_405DE7+2
.text:00405D7C                 outs    dx, byte ptr gs:[esi]
.text:00405D7E
.text:00405D7E loc_405D7E:                             ; CODE XREF: sub_405D00+13↑j
.text:00405D7E                 jz      short sub_405DA0
.text:00405D80                 sub     eax, 6325202Dh
.text:00405D85                 or      al, [eax]
.text:00405D87                 nop
.text:00405D88                 nop
.text:00405D89                 nop
.text:00405D8A                 nop
.text:00405D8B                 nop
.text:00405D8C                 nop
.text:00405D8D                 nop
.text:00405D8E                 nop
.text:00405D8F                 nop
.text:00405D90                 nop
.text:00405D91                 nop
.text:00405D92                 nop
.text:00405D93                 nop
.text:00405D94
.text:00405D94 loc_405D94:                             ; CODE XREF: sub_405D40+32↑j
.text:00405D94                 nop
.text:00405D95                 nop
.text:00405D96                 nop
.text:00405D97                 nop
.text:00405D98                 nop
.text:00405D99                 nop
.text:00405D9A                 nop
.text:00405D9B                 nop
.text:00405D9C                 nop
.text:00405D9D                 nop
.text:00405D9E                 nop
.text:00405D9F                 nop
.text:00405D9F sub_405D40      endp ; sp-analysis failed
.text:00405D9F
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0
.text:00405DA0 ; int __cdecl sub_405DA0(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00405DA0 sub_405DA0      proc near               ; CODE XREF: sub_405D40:loc_405D7E↑j
.text:00405DA0                                         ; DATA XREF: sub_405DA0:loc_4065B3↓o
.text:00405DA0
.text:00405DA0 Str2            = dword ptr  4
.text:00405DA0 MaxCount        = dword ptr  8
.text:00405DA0 arg_8           = dword ptr  0Ch
.text:00405DA0 arg_C           = dword ptr  10h
.text:00405DA0 arg_1C          = dword ptr  20h
.text:00405DA0 arg_20          = dword ptr  24h
.text:00405DA0 arg_24          = dword ptr  28h
.text:00405DA0 arg_28          = dword ptr  2Ch
.text:00405DA0 arg_2C          = dword ptr  30h
.text:00405DA0 arg_30          = dword ptr  34h
.text:00405DA0 arg_34          = dword ptr  38h
.text:00405DA0 arg_38          = dword ptr  3Ch
.text:00405DA0 arg_3C          = dword ptr  40h
.text:00405DA0 arg_40          = dword ptr  44h
.text:00405DA0 arg_44          = dword ptr  48h
.text:00405DA0 arg_5C          = dword ptr  60h
.text:00405DA0 arg_60          = dword ptr  64h
.text:00405DA0 Str             = dword ptr  68h
.text:00405DA0 arg_68          = dword ptr  6Ch
.text:00405DA0 arg_6C          = dword ptr  70h
.text:00405DA0 arg_70          = dword ptr  74h
.text:00405DA0 arg_74          = dword ptr  78h
.text:00405DA0
.text:00405DA0 ; FUNCTION CHUNK AT .text:00405E1B SIZE 00000053 BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:00405E84 SIZE 0000014B BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:00405FD0 SIZE 0000023A BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:00406210 SIZE 00000099 BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004062B0 SIZE 000000DF BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:00406390 SIZE 0000025B BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004065F0 SIZE 000001AE BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004067A0 SIZE 000000F9 BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004068A0 SIZE 000000CE BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:00406970 SIZE 0000003A BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004069B0 SIZE 0000000B BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004069C0 SIZE 00000019 BYTES
.text:00405DA0 ; FUNCTION CHUNK AT .text:004069E0 SIZE 00000011 BYTES
.text:00405DA0
.text:00405DA0                 and     eax, 6F203A73h
.text:00405DA5                 jo      short loc_405E1B
.text:00405DA7
.text:00405DA7 loc_405DA7:                             ; CODE XREF: sub_405D40+6↑j
.text:00405DA7                 imul    ebp, [edi+6Eh], 572D6020h
.text:00405DAE                 and     ds:64202773h, ah
.text:00405DB4                 outsd
.text:00405DB5                 db      65h
.text:00405DB5                 jnb     short near ptr loc_405E24+2
.text:00405DB8                 daa
.text:00405DB9                 jz      short loc_405DDB
.text:00405DBB                 popa
.text:00405DBC                 insb
.text:00405DBD                 insb
.text:00405DBE
.text:00405DBE loc_405DBE:                             ; CODE XREF: sub_405D40+13↑j
.text:00405DBE                 outsd
.text:00405DBF                 ja      short near ptr sub_405DE0+1
.text:00405DC1                 popa
.text:00405DC2                 outsb
.text:00405DC3                 and     [ecx+72h], ah
.text:00405DC6                 db      67h
.text:00405DC6                 jnz     near ptr loc_405E35+1
.text:00405DC9                 outs    dx, byte ptr gs:[esi]
.text:00405DCB                 jz      short loc_405DD7
.text:00405DCD                 add     [eax-6F6F6F70h], dl
.text:00405DD3                 nop
.text:00405DD4                 nop
.text:00405DD5                 nop
.text:00405DD6                 nop
.text:00405DD7
.text:00405DD7 loc_405DD7:                             ; CODE XREF: sub_405D40+30↑j
.text:00405DD7                                         ; sub_405DA0+2B↑j
.text:00405DD7                 nop
.text:00405DD8                 nop
.text:00405DD9
.text:00405DD9 loc_405DD9:                             ; CODE XREF: sub_405D40+2E↑j
.text:00405DD9                 nop
.text:00405DDA                 nop
.text:00405DDB
.text:00405DDB loc_405DDB:                             ; CODE XREF: sub_405D40+25↑j
.text:00405DDB                                         ; sub_405DA0+19↑j
.text:00405DDB                 nop
.text:00405DDC                 nop
.text:00405DDD                 nop
.text:00405DDE                 nop
.text:00405DDF                 nop
.text:00405DDF sub_405DA0      endp ; sp-analysis failed
.text:00405DDF
.text:00405DE0
.text:00405DE0 ; =============== S U B R O U T I N E =======================================
.text:00405DE0
.text:00405DE0
.text:00405DE0 sub_405DE0      proc near               ; CODE XREF: sub_405DA0+1F↑j
.text:00405DE0                                         ; DATA XREF: sub_405DA0:loc_40669F↓o
.text:00405DE0
.text:00405DE0 arg_A4          = dword ptr  0A8h
.text:00405DE0 arg_B8          = dword ptr  0BCh
.text:00405DE0
.text:00405DE0 ; FUNCTION CHUNK AT .text:00405E7A SIZE 0000000A BYTES
.text:00405DE0
.text:00405DE0                 and     eax, 6F203A73h
.text:00405DE5                 jo      short loc_405E5B
.text:00405DE7
.text:00405DE7 loc_405DE7:                             ; CODE XREF: sub_405D40+39↑j
.text:00405DE7                 imul    ebp, [edi+6Eh], 572D6020h
.text:00405DEE                 and     ds:69202773h, ah
.text:00405DF4                 jnb     short near ptr loc_405E13+3
.text:00405DF6                 popa
.text:00405DF7                 insd
.text:00405DF8                 bound   ebp, [ecx+67h]
.text:00405DFB                 jnz     short near ptr loc_405E68+4
.text:00405DFD                 jnz     short near ptr loc_405E71+1
.text:00405DFF                 or      al, [eax]
.text:00405E01
.text:00405E01 loc_405E01:                             ; DATA XREF: sub_405DA0+A0F↓o
.text:00405E01                 and     eax, 69203A73h
.text:00405E06                 insb
.text:00405E07                 insb
.text:00405E08                 db      65h, 67h
.text:00405E08                 popa
.text:00405E0B                 insb
.text:00405E0C                 and     [edi+70h], ch
.text:00405E0F                 jz      short loc_405E7A
.text:00405E11                 outsd
.text:00405E12                 outsb
.text:00405E13
.text:00405E13 loc_405E13:                             ; CODE XREF: sub_405DE0+14↑j
.text:00405E13                 and     ds:6325202Dh, ch
.text:00405E19                 or      al, [eax]
.text:00405E19 sub_405DE0      endp ; sp-analysis failed
.text:00405E19
.text:00405E1B ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00405E1B
.text:00405E1B loc_405E1B:                             ; CODE XREF: sub_405DA0+5↑j
.text:00405E1B                                         ; DATA XREF: sub_405DA0:loc_4067E7↓o
.text:00405E1B                 and     eax, 69203A73h
.text:00405E20                 outsb
.text:00405E21                 jbe     short loc_405E84
.text:00405E23                 insb
.text:00405E24
.text:00405E24 loc_405E24:                             ; CODE XREF: sub_405DA0+15↑j
.text:00405E24                 imul    esp, [eax+6Fh], 6F697470h
.text:00405E2C                 outsb
.text:00405E2D                 and     ds:6325202Dh, ch
.text:00405E33                 or      al, [eax]
.text:00405E35
.text:00405E35 loc_405E35:                             ; CODE XREF: sub_405DA0+26↑j
.text:00405E35                                         ; DATA XREF: sub_405DA0:loc_40680E↓o
.text:00405E35                 and     eax, 6F203A73h
.text:00405E3A                 jo      short near ptr loc_405EAF+1
.text:00405E3C                 imul    ebp, [edi+6Eh], 73256020h
.text:00405E43                 daa
.text:00405E44                 and     [ecx+73h], ch
.text:00405E47                 and     [ecx+6Dh], ah
.text:00405E4A                 bound   ebp, [ecx+67h]
.text:00405E4D                 jnz     short near ptr loc_405EBC+2
.text:00405E4F                 jnz     short near ptr loc_405EC3+1
.text:00405E51                 or      al, [eax]
.text:00405E53
.text:00405E53 loc_405E53:                             ; DATA XREF: sub_405DA0:loc_4069C0↓o
.text:00405E53                 push    eax
.text:00405E54                 dec     edi
.text:00405E55                 push    ebx
.text:00405E56                 dec     ecx
.text:00405E57                 pop     eax
.text:00405E58                 dec     esp
.text:00405E59                 pop     ecx
.text:00405E5A                 pop     edi
.text:00405E5B
.text:00405E5B loc_405E5B:                             ; CODE XREF: sub_405DE0+5↑j
.text:00405E5B                 inc     ebx
.text:00405E5C                 dec     edi
.text:00405E5D                 push    edx
.text:00405E5E                 push    edx
.text:00405E5F                 inc     ebp
.text:00405E60                 inc     ebx
.text:00405E61                 push    esp
.text:00405E62                 add     [ebp+0B6h], cl
.text:00405E68
.text:00405E68 loc_405E68:                             ; CODE XREF: sub_405DE0+1B↑j
.text:00405E68                 add     [ebp+27BCh], cl
.text:00405E68 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:00405E68 ; ---------------------------------------------------------------------------
.text:00405E6E                 dw 0
.text:00405E70 ; ---------------------------------------------------------------------------
.text:00405E70
.text:00405E70 loc_405E70:                             ; CODE XREF: sub_406A00+5A↓p
.text:00405E70                                         ; .text:00406AEA↓p ...
.text:00405E70                 push    ebp
.text:00405E71
.text:00405E71 loc_405E71:                             ; CODE XREF: sub_405DE0+1D↑j
.text:00405E71                 mov     eax, 0FFFFFFFFh
.text:00405E76                 push    edi
.text:00405E77                 push    esi
.text:00405E78                 push    ebx
.text:00405E78 ; ---------------------------------------------------------------------------
.text:00405E79                 db 83h
.text:00405E7A ; ---------------------------------------------------------------------------
.text:00405E7A ; START OF FUNCTION CHUNK FOR sub_405DE0
.text:00405E7A
.text:00405E7A loc_405E7A:                             ; CODE XREF: sub_405DE0+2F↑j
.text:00405E7A                 in      al, dx
.text:00405E7B                 dec     esp
.text:00405E7C                 mov     esi, [esp-40h+arg_A4]
.text:00405E80                 mov     ebp, [esp-40h+arg_B8]
.text:00405E80 ; END OF FUNCTION CHUNK FOR sub_405DE0
.text:00405E84 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00405E84
.text:00405E84 loc_405E84:                             ; CODE XREF: sub_405DA0+81↑j
.text:00405E84                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00405E87                 mov     ebx, [ebp+4]
.text:00405E8A                 setz    dl
.text:00405E8D                 movzx   ecx, dl
.text:00405E90                 dec     ecx
.text:00405E91                 and     ecx, ebx
.text:00405E93                 mov     [esp+arg_44], ecx
.text:00405E97                 mov     ecx, [esp+arg_5C]
.text:00405E9B                 test    ecx, ecx
.text:00405E9D                 jle     loc_405FC7
.text:00405EA3                 mov     dword ptr [ebp+0Ch], 0
.text:00405EAA                 mov     ebx, [ebp+0]
.text:00405EAD                 test    ebx, ebx
.text:00405EAF
.text:00405EAF loc_405EAF:                             ; CODE XREF: sub_405DA0+9A↑j
.text:00405EAF                 jz      loc_4069E0
.text:00405EB5                 mov     edi, [ebp+10h]
.text:00405EB8                 test    edi, edi
.text:00405EBA                 jnz     short loc_405F13
.text:00405EBC
.text:00405EBC loc_405EBC:                             ; CODE XREF: sub_405DA0+AD↑j
.text:00405EBC                 lea     esi, [esi+0]
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: sub_405DA0+C4C↓j
.text:00405EC0                 mov     [ebp+24h], ebx
.text:00405EC3
.text:00405EC3 loc_405EC3:                             ; CODE XREF: sub_405DA0+AF↑j
.text:00405EC3                 mov     esi, [esp+Str]
.text:00405EC7                 mov     [ebp+20h], ebx
.text:00405ECA                 mov     ecx, [esp+arg_74]
.text:00405ECE                 xor     ebx, ebx
.text:00405ED0                 mov     dword ptr [ebp+14h], 0
.text:00405ED7                 test    ecx, ecx
.text:00405ED9                 jz      loc_4069C0
.text:00405EDF
.text:00405EDF loc_405EDF:                             ; CODE XREF: sub_405DA0+C34↓j
.text:00405EDF                 mov     ebx, 1
.text:00405EE4
.text:00405EE4 loc_405EE4:                             ; CODE XREF: sub_405DA0+C2E↓j
.text:00405EE4                 mov     [ebp+1Ch], ebx
.text:00405EE7                 mov     ecx, [esp+Str]
.text:00405EEB                 movzx   eax, byte ptr [ecx]
.text:00405EEE                 cmp     al, 2Dh ; '-'
.text:00405EF0                 jz      loc_4069B0
.text:00405EF6                 cmp     al, 2Bh ; '+'
.text:00405EF8                 jz      loc_406999
.text:00405EFE                 xor     edx, edx
.text:00405F00                 test    ebx, ebx
.text:00405F02                 setz    dl
.text:00405F05                 mov     [ebp+18h], edx
.text:00405F08
.text:00405F08 loc_405F08:                             ; CODE XREF: sub_405DA0+C05↓j
.text:00405F08                 mov     [esp+Str], esi
.text:00405F0C                 mov     dword ptr [ebp+10h], 1
.text:00405F13
.text:00405F13 loc_405F13:                             ; CODE XREF: sub_405DA0+11A↑j
.text:00405F13                 mov     eax, [ebp+14h]
.text:00405F16                 test    eax, eax
.text:00405F18                 jz      short loc_405F23
.text:00405F1A                 cmp     byte ptr [eax], 0
.text:00405F1D                 jnz     loc_406000
.text:00405F23
.text:00405F23 loc_405F23:                             ; CODE XREF: sub_405DA0+178↑j
.text:00405F23                 mov     ebx, [ebp+0]
.text:00405F26                 cmp     [ebp+24h], ebx
.text:00405F29                 jle     short loc_405F2E
.text:00405F2B                 mov     [ebp+24h], ebx
.text:00405F2E
.text:00405F2E loc_405F2E:                             ; CODE XREF: sub_405DA0+189↑j
.text:00405F2E                 cmp     [ebp+20h], ebx
.text:00405F31                 jle     short loc_405F36
.text:00405F33                 mov     [ebp+20h], ebx
.text:00405F36
.text:00405F36 loc_405F36:                             ; CODE XREF: sub_405DA0+191↑j
.text:00405F36                 cmp     dword ptr [ebp+18h], 1
.text:00405F3A                 jz      loc_406910
.text:00405F40
.text:00405F40 loc_405F40:                             ; CODE XREF: sub_405DA0+BE3↓j
.text:00405F40                 cmp     ebx, [esp+arg_5C]
.text:00405F44                 jz      loc_4068F4
.text:00405F4A                 cld
.text:00405F4B                 mov     ecx, [esp+arg_60]
.text:00405F4F                 mov     edx, 3
.text:00405F54                 mov     edi, offset sub_405C20
.text:00405F59                 mov     esi, [ecx+ebx*4]
.text:00405F5C                 mov     ecx, edx
.text:00405F5E                 repe cmpsb
.text:00405F60                 jnz     short loc_405F9C
.text:00405F62                 mov     edx, [ebp+24h]
.text:00405F65                 lea     eax, [ebx+1]
.text:00405F68                 cmp     [ebp+20h], edx
.text:00405F6B                 mov     [ebp+0], eax
.text:00405F6E                 jz      loc_406908
.text:00405F74                 cmp     edx, eax
.text:00405F76                 jz      short loc_405F90
.text:00405F78                 mov     [esp+Str2], ebp
.text:00405F7C                 mov     ebx, [esp+arg_60]
.text:00405F80                 mov     [esp+0], ebx
.text:00405F83                 call    sub_406B20
.text:00405F88                 nop
.text:00405F89                 lea     esi, [esi+0]
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_405DA0+1D6↑j
.text:00405F90                                         ; sub_405DA0+B6B↓j
.text:00405F90                 mov     eax, [esp+arg_5C]
.text:00405F94                 mov     ebx, eax
.text:00405F96                 mov     [ebp+24h], eax
.text:00405F99                 mov     [ebp+0], eax
.text:00405F9C
.text:00405F9C loc_405F9C:                             ; CODE XREF: sub_405DA0+1C0↑j
.text:00405F9C                 cmp     ebx, [esp+arg_5C]
.text:00405FA0                 jz      loc_4068F4
.text:00405FA6                 mov     esi, [esp+arg_60]
.text:00405FAA                 mov     eax, [esi+ebx*4]
.text:00405FAD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405FB0                 jz      short loc_405FD7
.text:00405FB2
.text:00405FB2 loc_405FB2:                             ; CODE XREF: sub_405DA0+23D↓j
.text:00405FB2                 mov     edx, [ebp+18h]
.text:00405FB5                 test    edx, edx
.text:00405FB7                 jz      short loc_405FD0
.text:00405FB9                 mov     [ebp+0Ch], eax
.text:00405FBC                 lea     edi, [ebx+1]
.text:00405FBF                 mov     eax, 1
.text:00405FC4                 mov     [ebp+0], edi
.text:00405FC7
.text:00405FC7 loc_405FC7:                             ; CODE XREF: sub_405DA0+FD↑j
.text:00405FC7                                         ; sub_405DA0+235↓j ...
.text:00405FC7                 add     esp, 4Ch
.text:00405FCA                 pop     ebx
.text:00405FCB                 pop     esi
.text:00405FCC                 pop     edi
.text:00405FCD                 pop     ebp
.text:00405FCE                 retn
.text:00405FCE ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:00405FCE ; ---------------------------------------------------------------------------
.text:00405FCF                 align 10h
.text:00405FD0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: sub_405DA0+217↑j
.text:00405FD0                                         ; sub_405DA0+B5A↓j ...
.text:00405FD0                 mov     eax, 0FFFFFFFFh
.text:00405FD5                 jmp     short loc_405FC7
.text:00405FD7 ; ---------------------------------------------------------------------------
.text:00405FD7
.text:00405FD7 loc_405FD7:                             ; CODE XREF: sub_405DA0+210↑j
.text:00405FD7                 movzx   edx, byte ptr [eax+1]
.text:00405FDB                 test    dl, dl
.text:00405FDD                 jz      short loc_405FB2
.text:00405FDF                 mov     ebx, [esp+arg_68]
.text:00405FE3                 xor     ecx, ecx
.text:00405FE5                 test    ebx, ebx
.text:00405FE7                 jz      short loc_405FF2
.text:00405FE9                 cmp     dl, 2Dh ; '-'
.text:00405FEC                 jz      loc_4068EA
.text:00405FF2
.text:00405FF2 loc_405FF2:                             ; CODE XREF: sub_405DA0+247↑j
.text:00405FF2                                         ; sub_405DA0+B4F↓j
.text:00405FF2                 lea     esi, [ecx+eax+1]
.text:00405FF6                 mov     [ebp+14h], esi
.text:00405FF9                 lea     esi, [esi+0]
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: sub_405DA0+17D↑j
.text:00406000                 mov     ecx, [esp+arg_68]
.text:00406004                 test    ecx, ecx
.text:00406006                 jz      loc_406390
.text:0040600C                 mov     edx, [ebp+0]
.text:0040600F                 mov     edi, [esp+arg_60]
.text:00406013                 mov     eax, [edi+edx*4]
.text:00406016                 movzx   edx, byte ptr [eax+1]
.text:0040601A                 cmp     dl, 2Dh ; '-'
.text:0040601D                 jz      short loc_406035
.text:0040601F                 mov     ebx, [esp+arg_70]
.text:00406023                 test    ebx, ebx
.text:00406025                 jz      loc_406390
.text:0040602B                 cmp     byte ptr [eax+2], 0
.text:0040602F                 jz      loc_4068CA
.text:00406035
.text:00406035 loc_406035:                             ; CODE XREF: sub_405DA0+27D↑j
.text:00406035                                         ; sub_405DA0+B45↓j
.text:00406035                 mov     [esp+arg_40], 0
.text:0040603D                 mov     ecx, [ebp+14h]
.text:00406040                 mov     [esp+arg_3C], 0
.text:00406048                 mov     [esp+arg_38], 0
.text:00406050                 mov     edi, ecx
.text:00406052                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040605A                 movzx   eax, byte ptr [ecx]
.text:0040605D                 test    al, al
.text:0040605F                 jz      short loc_40607C
.text:00406061                 cmp     al, 3Dh ; '='
.text:00406063                 jz      short loc_40607C
.text:00406065                 lea     esi, [esi+0]
.text:00406069                 lea     edi, [edi+0]
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405DA0+2DA↓j
.text:00406070                 inc     edi
.text:00406071                 movzx   eax, byte ptr [edi]
.text:00406074                 test    al, al
.text:00406076                 jz      short loc_40607C
.text:00406078                 cmp     al, 3Dh ; '='
.text:0040607A                 jnz     short loc_406070
.text:0040607C
.text:0040607C loc_40607C:                             ; CODE XREF: sub_405DA0+2BF↑j
.text:0040607C                                         ; sub_405DA0+2C3↑j ...
.text:0040607C                 mov     [esp+arg_30], 0
.text:00406084                 mov     esi, [esp+arg_68]
.text:00406088                 mov     ebx, [esi]
.text:0040608A                 test    ebx, ebx
.text:0040608C                 mov     edx, ebx
.text:0040608E                 jz      loc_4062B0
.text:00406094                 lea     esi, [esi+0]
.text:0040609A                 lea     edi, [edi+0]
.text:004060A0
.text:004060A0 loc_4060A0:                             ; CODE XREF: sub_405DA0+32E↓j
.text:004060A0                 mov     [esp+Str2], ecx ; Str2
.text:004060A4                 mov     ebx, edi
.text:004060A6                 sub     ebx, ecx
.text:004060A8                 mov     [esp+MaxCount], ebx ; MaxCount
.text:004060AC                 mov     [esp+0], edx    ; Str1
.text:004060AF                 call    strncmp
.text:004060B4                 test    eax, eax
.text:004060B6                 jz      loc_406846
.text:004060BC
.text:004060BC loc_4060BC:                             ; CODE XREF: sub_405DA0+ADF↓j
.text:004060BC                                         ; sub_405DA0+AF4↓j ...
.text:004060BC                 inc     [esp+arg_30]
.text:004060C0                 add     esi, 10h
.text:004060C3                 mov     ecx, [esi]
.text:004060C5                 test    ecx, ecx
.text:004060C7                 mov     edx, ecx
.text:004060C9                 jz      short loc_4060D0
.text:004060CB                 mov     ecx, [ebp+14h]
.text:004060CE                 jmp     short loc_4060A0
.text:004060D0 ; ---------------------------------------------------------------------------
.text:004060D0
.text:004060D0 loc_4060D0:                             ; CODE XREF: sub_405DA0+329↑j
.text:004060D0                                         ; sub_405DA0+B25↓j
.text:004060D0                 mov     esi, [esp+arg_38]
.text:004060D4                 test    esi, esi
.text:004060D6                 jz      short loc_4060E4
.text:004060D8                 mov     edx, [esp+arg_3C]
.text:004060DC                 test    edx, edx
.text:004060DE                 jz      loc_4067F0
.text:004060E4
.text:004060E4 loc_4060E4:                             ; CODE XREF: sub_405DA0+336↑j
.text:004060E4                 mov     eax, [esp+arg_40]
.text:004060E8                 test    eax, eax
.text:004060EA                 jz      loc_4062B0
.text:004060F0                 mov     ecx, [ebp+0]
.text:004060F3                 lea     eax, [ecx+1]
.text:004060F6                 mov     [ebp+0], eax
.text:004060F9                 cmp     byte ptr [edi], 0
.text:004060FC                 jz      loc_406210
.text:00406102                 mov     ecx, [esp+arg_40]
.text:00406106                 mov     esi, [ecx+4]
.text:00406109                 test    esi, esi
.text:0040610B                 jz      short loc_406156
.text:0040610D                 lea     ebx, [edi+1]
.text:00406110                 mov     [ebp+0Ch], ebx
.text:00406113
.text:00406113 loc_406113:                             ; CODE XREF: sub_405DA0+478↓j
.text:00406113                                         ; sub_405DA0+494↓j
.text:00406113                 mov     ebx, [ebp+14h]
.text:00406116                 mov     [esp+0], ebx    ; Str
.text:00406119                 call    strlen
.text:0040611E                 add     [ebp+14h], eax
.text:00406121                 mov     esi, [esp+arg_6C]
.text:00406125                 test    esi, esi
.text:00406127                 jz      short loc_406133
.text:00406129                 mov     ebp, [esp+arg_34]
.text:0040612D                 mov     ecx, [esp+arg_6C]
.text:00406131                 mov     [ecx], ebp
.text:00406133
.text:00406133 loc_406133:                             ; CODE XREF: sub_405DA0+387↑j
.text:00406133                 mov     eax, [esp+arg_40]
.text:00406137                 mov     ecx, [eax+8]
.text:0040613A                 test    ecx, ecx
.text:0040613C                 jnz     short loc_40614A
.text:0040613E                 mov     ecx, [esp+arg_40]
.text:00406142
.text:00406142 loc_406142:                             ; CODE XREF: sub_405DA0+7F3↓j
.text:00406142                 mov     eax, [ecx+0Ch]
.text:00406145                 jmp     loc_405FC7
.text:0040614A ; ---------------------------------------------------------------------------
.text:0040614A
.text:0040614A loc_40614A:                             ; CODE XREF: sub_405DA0+39C↑j
.text:0040614A                                         ; sub_405DA0+7E9↓j
.text:0040614A                 mov     esi, [eax+0Ch]
.text:0040614D                 xor     eax, eax
.text:0040614F                 mov     [ecx], esi
.text:00406151                 jmp     loc_405FC7
.text:00406156 ; ---------------------------------------------------------------------------
.text:00406156
.text:00406156 loc_406156:                             ; CODE XREF: sub_405DA0+36B↑j
.text:00406156                 mov     edi, [esp+arg_44]
.text:0040615A                 test    edi, edi
.text:0040615C                 jz      short loc_4061B0
.text:0040615E                 mov     esi, [esp+arg_60]
.text:00406162                 mov     edx, [esi+eax*4-4]
.text:00406166                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040616A                 jz      short loc_4061D2
.text:0040616C                 mov     dword ptr [esp+0], offset sub_405C40
.text:00406173                 call    ds:libintl_gettext
.text:00406179                 mov     edx, [esp+arg_40]
.text:0040617D                 mov     edi, [edx]
.text:0040617F                 mov     [esp+arg_C], edi
.text:00406183                 mov     ebx, [ebp+0]
.text:00406186                 mov     edi, [esp+arg_60]
.text:0040618A                 mov     ecx, [edi+ebx*4-4]
.text:0040618E                 movsx   esi, byte ptr [ecx]
.text:00406191                 mov     ecx, ds:_iob
.text:00406197                 add     ecx, 40h ; '@'
.text:0040619A                 mov     [esp+arg_8], esi
.text:0040619E                 mov     ebx, [edi]
.text:004061A0                 mov     [esp+Str2], eax ; Format
.text:004061A4                 mov     [esp+0], ecx    ; Stream
.text:004061A7                 mov     [esp+MaxCount], ebx
.text:004061AB                 call    fprintf
.text:004061B0
.text:004061B0 loc_4061B0:                             ; CODE XREF: sub_405DA0+3BC↑j
.text:004061B0                                         ; sub_405DA0+468↓j
.text:004061B0                 mov     ecx, [ebp+14h]
.text:004061B3                 mov     [esp+0], ecx    ; Str
.text:004061B6                 call    strlen
.text:004061BB                 add     [ebp+14h], eax
.text:004061BE                 mov     eax, [esp+arg_40]
.text:004061C2                 mov     esi, [eax+0Ch]
.text:004061C5                 mov     [ebp+8], esi
.text:004061C8
.text:004061C8 loc_4061C8:                             ; CODE XREF: sub_405DA0+5B5↓j
.text:004061C8                                         ; sub_405DA0+80E↓j ...
.text:004061C8                 mov     eax, 3Fh ; '?'
.text:004061CD                 jmp     loc_405FC7
.text:004061D2 ; ---------------------------------------------------------------------------
.text:004061D2
.text:004061D2 loc_4061D2:                             ; CODE XREF: sub_405DA0+3CA↑j
.text:004061D2                 mov     dword ptr [esp+0], offset sub_405C80
.text:004061D9                 call    ds:libintl_gettext
.text:004061DF                 mov     edx, [esp+arg_40]
.text:004061E3                 mov     edi, [esp+arg_60]
.text:004061E7                 mov     ecx, ds:_iob
.text:004061ED                 mov     esi, [edx]
.text:004061EF                 add     ecx, 40h ; '@'
.text:004061F2                 mov     [esp+arg_8], esi
.text:004061F6                 mov     ebx, [edi]
.text:004061F8                 mov     [esp+Str2], eax ; Format
.text:004061FC                 mov     [esp+0], ecx    ; Stream
.text:004061FF                 mov     [esp+MaxCount], ebx
.text:00406203                 call    fprintf
.text:00406208                 jmp     short loc_4061B0
.text:00406208 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:00406208 ; ---------------------------------------------------------------------------
.text:0040620A                 align 10h
.text:00406210 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_405DA0+35C↑j
.text:00406210                 mov     ebx, [esp+arg_40]
.text:00406214                 cmp     dword ptr [ebx+4], 1
.text:00406218                 jnz     loc_406113
.text:0040621E                 cmp     eax, [esp+arg_5C]
.text:00406222                 jge     short loc_406239
.text:00406224                 mov     ebx, [esp+arg_60]
.text:00406228                 lea     edi, [ecx+2]
.text:0040622B                 mov     [ebp+0], edi
.text:0040622E                 mov     esi, [ebx+eax*4]
.text:00406231                 mov     [ebp+0Ch], esi
.text:00406234                 jmp     loc_406113
.text:00406239 ; ---------------------------------------------------------------------------
.text:00406239
.text:00406239 loc_406239:                             ; CODE XREF: sub_405DA0+482↑j
.text:00406239                 mov     edx, [esp+arg_44]
.text:0040623D                 test    edx, edx
.text:0040623F                 jnz     short loc_406270
.text:00406241
.text:00406241 loc_406241:                             ; CODE XREF: sub_405DA0+507↓j
.text:00406241                 mov     edx, [ebp+14h]
.text:00406244                 mov     [esp+0], edx    ; Str
.text:00406247                 call    strlen
.text:0040624C                 add     [ebp+14h], eax
.text:0040624F                 mov     eax, [esp+arg_40]
.text:00406253                 mov     edi, [eax+0Ch]
.text:00406256                 mov     [ebp+8], edi
.text:00406259
.text:00406259 loc_406259:                             ; CODE XREF: sub_405DA0+892↓j
.text:00406259                 mov     ebp, [esp+Str]
.text:0040625D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00406261                 setnz   bl
.text:00406264                 movzx   esi, bl
.text:00406267                 lea     eax, [esi+esi*4+3Ah]
.text:0040626B                 jmp     loc_405FC7
.text:00406270 ; ---------------------------------------------------------------------------
.text:00406270
.text:00406270 loc_406270:                             ; CODE XREF: sub_405DA0+49F↑j
.text:00406270                 mov     dword ptr [esp+0], offset sub_405CC0
.text:00406277                 call    ds:libintl_gettext
.text:0040627D                 mov     ecx, [ebp+0]
.text:00406280                 mov     esi, [esp+arg_60]
.text:00406284                 mov     ebx, [esi+ecx*4-4]
.text:00406288                 mov     ecx, ds:_iob
.text:0040628E                 mov     [esp+arg_8], ebx
.text:00406292                 mov     edi, [esi]
.text:00406294                 add     ecx, 40h ; '@'
.text:00406297                 mov     [esp+Str2], eax ; Format
.text:0040629B                 mov     [esp+0], ecx    ; Stream
.text:0040629E                 mov     [esp+MaxCount], edi
.text:004062A2                 call    fprintf
.text:004062A7                 jmp     short loc_406241
.text:004062A7 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004062A7 ; ---------------------------------------------------------------------------
.text:004062A9                 align 10h
.text:004062B0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_405DA0+2EE↑j
.text:004062B0                                         ; sub_405DA0+34A↑j
.text:004062B0                 mov     eax, [esp+arg_70]
.text:004062B4                 test    eax, eax
.text:004062B6                 jz      short loc_4062E6
.text:004062B8                 mov     ebx, [ebp+0]
.text:004062BB                 mov     esi, [esp+arg_60]
.text:004062BF                 mov     edi, [esi+ebx*4]
.text:004062C2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004062C6                 jz      short loc_4062E9
.text:004062C8                 mov     ecx, [ebp+14h]
.text:004062CB                 mov     edx, [esp+Str]
.text:004062CF                 movsx   ebx, byte ptr [ecx]
.text:004062D2                 mov     [esp+0], edx    ; Str
.text:004062D5                 mov     [esp+Str2], ebx ; Val
.text:004062D9                 call    strchr
.text:004062DE                 test    eax, eax
.text:004062E0                 jnz     loc_406390
.text:004062E6
.text:004062E6 loc_4062E6:                             ; CODE XREF: sub_405DA0+516↑j
.text:004062E6                 mov     ebx, [ebp+0]
.text:004062E9
.text:004062E9 loc_4062E9:                             ; CODE XREF: sub_405DA0+526↑j
.text:004062E9                 mov     eax, [esp+arg_44]
.text:004062ED                 test    eax, eax
.text:004062EF                 jz      short loc_406341
.text:004062F1                 mov     esi, [esp+arg_60]
.text:004062F5                 mov     edi, [esi+ebx*4]
.text:004062F8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004062FC                 jz      short loc_40635A
.text:004062FE                 mov     dword ptr [esp+0], offset sub_405D00
.text:00406305                 call    ds:libintl_gettext
.text:0040630B                 mov     edi, [ebp+14h]
.text:0040630E                 mov     [esp+arg_C], edi
.text:00406312                 mov     ebx, [ebp+0]
.text:00406315                 mov     edi, [esp+arg_60]
.text:00406319                 mov     esi, [edi+ebx*4]
.text:0040631C                 movsx   ecx, byte ptr [esi]
.text:0040631F                 mov     esi, ds:_iob
.text:00406325                 add     esi, 40h ; '@'
.text:00406328                 mov     [esp+arg_8], ecx
.text:0040632C                 mov     ebx, [edi]
.text:0040632E                 mov     [esp+Str2], eax ; Format
.text:00406332                 mov     [esp+0], esi    ; Stream
.text:00406335                 mov     [esp+MaxCount], ebx
.text:00406339                 call    fprintf
.text:0040633E
.text:0040633E loc_40633E:                             ; CODE XREF: sub_405DA0+5ED↓j
.text:0040633E                 mov     ebx, [ebp+0]
.text:00406341
.text:00406341 loc_406341:                             ; CODE XREF: sub_405DA0+54F↑j
.text:00406341                 mov     dword ptr [ebp+14h], offset loc_405D20
.text:00406348                 lea     edx, [ebx+1]
.text:0040634B                 mov     [ebp+0], edx
.text:0040634E
.text:0040634E loc_40634E:                             ; CODE XREF: sub_405DA0+A69↓j
.text:0040634E                 mov     dword ptr [ebp+8], 0
.text:00406355                 jmp     loc_4061C8
.text:0040635A ; ---------------------------------------------------------------------------
.text:0040635A
.text:0040635A loc_40635A:                             ; CODE XREF: sub_405DA0+55C↑j
.text:0040635A                 mov     dword ptr [esp+0], offset sub_405D40
.text:00406361                 call    ds:libintl_gettext
.text:00406367                 mov     ecx, [ebp+14h]
.text:0040636A                 mov     edi, [esp+arg_60]
.text:0040636E                 mov     edx, ds:_iob
.text:00406374                 mov     [esp+arg_8], ecx
.text:00406378                 mov     ebx, [edi]
.text:0040637A                 add     edx, 40h ; '@'
.text:0040637D                 mov     [esp+Str2], eax ; Format
.text:00406381                 mov     [esp+MaxCount], ebx
.text:00406385                 mov     [esp+0], edx    ; Stream
.text:00406388                 call    fprintf
.text:0040638D                 jmp     short loc_40633E
.text:0040638D ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:0040638D ; ---------------------------------------------------------------------------
.text:0040638F                 align 10h
.text:00406390 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00406390
.text:00406390 loc_406390:                             ; CODE XREF: sub_405DA0+266↑j
.text:00406390                                         ; sub_405DA0+285↑j ...
.text:00406390                 mov     esi, [ebp+14h]
.text:00406393                 movzx   ebx, byte ptr [esi]
.text:00406396                 inc     esi
.text:00406397                 mov     [ebp+14h], esi
.text:0040639A                 mov     ecx, [esp+Str]
.text:0040639E                 movsx   esi, bl
.text:004063A1                 mov     [esp+Str2], esi ; Val
.text:004063A5                 mov     edi, esi
.text:004063A7                 mov     [esp+0], ecx    ; Str
.text:004063AA                 call    strchr
.text:004063AF                 mov     ecx, [ebp+14h]
.text:004063B2                 cmp     byte ptr [ecx], 0
.text:004063B5                 jnz     short loc_4063BA
.text:004063B7                 inc     dword ptr [ebp+0]
.text:004063BA
.text:004063BA loc_4063BA:                             ; CODE XREF: sub_405DA0+615↑j
.text:004063BA                 test    eax, eax
.text:004063BC                 jz      loc_4067A0
.text:004063C2                 cmp     bl, 3Ah ; ':'
.text:004063C5                 jz      loc_4067A0
.text:004063CB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004063CE                 jz      loc_406486
.text:004063D4                 movzx   edx, byte ptr [eax+1]
.text:004063D8
.text:004063D8 loc_4063D8:                             ; CODE XREF: sub_405DA0+6ED↓j
.text:004063D8                 cmp     dl, 3Ah ; ':'
.text:004063DB                 jz      short loc_4063E4
.text:004063DD
.text:004063DD loc_4063DD:                             ; CODE XREF: sub_405DA0+660↓j
.text:004063DD                 mov     eax, esi
.text:004063DF                 jmp     loc_405FC7
.text:004063E4 ; ---------------------------------------------------------------------------
.text:004063E4
.text:004063E4 loc_4063E4:                             ; CODE XREF: sub_405DA0+63B↑j
.text:004063E4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004063E8                 jz      loc_406471
.text:004063EE                 cmp     byte ptr [ecx], 0
.text:004063F1                 jz      short loc_406402
.text:004063F3
.text:004063F3 loc_4063F3:                             ; CODE XREF: sub_405DA0+6D4↓j
.text:004063F3                 inc     dword ptr [ebp+0]
.text:004063F6                 mov     [ebp+0Ch], ecx
.text:004063F9
.text:004063F9 loc_4063F9:                             ; CODE XREF: sub_405DA0+67B↓j
.text:004063F9                                         ; sub_405DA0+696↓j ...
.text:004063F9                 mov     dword ptr [ebp+14h], 0
.text:00406400                 jmp     short loc_4063DD
.text:00406402 ; ---------------------------------------------------------------------------
.text:00406402
.text:00406402 loc_406402:                             ; CODE XREF: sub_405DA0+651↑j
.text:00406402                 mov     ecx, [ebp+0]
.text:00406405                 cmp     ecx, [esp+arg_5C]
.text:00406409                 jz      short loc_40641D
.text:0040640B                 mov     eax, [esp+arg_60]
.text:0040640F                 lea     edx, [ecx+1]
.text:00406412                 mov     [ebp+0], edx
.text:00406415                 mov     ebx, [eax+ecx*4]
.text:00406418                 mov     [ebp+0Ch], ebx
.text:0040641B                 jmp     short loc_4063F9
.text:0040641D ; ---------------------------------------------------------------------------
.text:0040641D
.text:0040641D loc_40641D:                             ; CODE XREF: sub_405DA0+669↑j
.text:0040641D                 mov     ecx, [esp+arg_44]
.text:00406421                 test    ecx, ecx
.text:00406423                 jnz     short loc_40643F
.text:00406425
.text:00406425 loc_406425:                             ; CODE XREF: sub_405DA0+6CF↓j
.text:00406425                 mov     [ebp+8], edi
.text:00406428                 mov     edi, [esp+Str]
.text:0040642C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040642F                 jz      short loc_406438
.text:00406431                 mov     esi, 3Fh ; '?'
.text:00406436                 jmp     short loc_4063F9
.text:00406438 ; ---------------------------------------------------------------------------
.text:00406438
.text:00406438 loc_406438:                             ; CODE XREF: sub_405DA0+68F↑j
.text:00406438                 mov     esi, 3Ah ; ':'
.text:0040643D                 jmp     short loc_4063F9
.text:0040643F ; ---------------------------------------------------------------------------
.text:0040643F
.text:0040643F loc_40643F:                             ; CODE XREF: sub_405DA0+683↑j
.text:0040643F                 mov     dword ptr [esp+0], 405D60h
.text:00406446                 call    ds:libintl_gettext
.text:0040644C                 mov     [esp+arg_8], edi
.text:00406450                 mov     ebx, [esp+arg_60]
.text:00406454                 mov     edx, ds:_iob
.text:0040645A                 mov     esi, [ebx]
.text:0040645C                 add     edx, 40h ; '@'
.text:0040645F                 mov     [esp+Str2], eax ; Format
.text:00406463                 mov     [esp+MaxCount], esi
.text:00406467                 mov     [esp+0], edx    ; Stream
.text:0040646A                 call    fprintf
.text:0040646F                 jmp     short loc_406425
.text:00406471 ; ---------------------------------------------------------------------------
.text:00406471
.text:00406471 loc_406471:                             ; CODE XREF: sub_405DA0+648↑j
.text:00406471                 cmp     byte ptr [ecx], 0
.text:00406474                 jnz     loc_4063F3
.text:0040647A                 mov     dword ptr [ebp+0Ch], 0
.text:00406481                 jmp     loc_4063F9
.text:00406486 ; ---------------------------------------------------------------------------
.text:00406486
.text:00406486 loc_406486:                             ; CODE XREF: sub_405DA0+62E↑j
.text:00406486                 movzx   edx, byte ptr [eax+1]
.text:0040648A                 cmp     dl, 3Bh ; ';'
.text:0040648D                 jnz     loc_4063D8
.text:00406493                 mov     [esp+arg_2C], 0
.text:0040649B                 mov     [esp+arg_28], 0
.text:004064A3                 mov     [esp+arg_24], 0
.text:004064AB                 mov     [esp+arg_20], 0
.text:004064B3                 cmp     byte ptr [ecx], 0
.text:004064B6                 jz      loc_40672B
.text:004064BC                 inc     dword ptr [ebp+0]
.text:004064BF                 mov     [ebp+0Ch], ecx
.text:004064C2
.text:004064C2 loc_4064C2:                             ; CODE XREF: sub_405DA0+9A4↓j
.text:004064C2                 mov     edi, [ebp+0Ch]
.text:004064C5                 mov     [ebp+14h], edi
.text:004064C8                 movzx   eax, byte ptr [edi]
.text:004064CB                 test    al, al
.text:004064CD                 jz      short loc_4064DF
.text:004064CF                 cmp     al, 3Dh ; '='
.text:004064D1                 jz      short loc_4064DF
.text:004064D3
.text:004064D3 loc_4064D3:                             ; CODE XREF: sub_405DA0+73D↓j
.text:004064D3                 inc     edi
.text:004064D4                 movzx   eax, byte ptr [edi]
.text:004064D7                 test    al, al
.text:004064D9                 jz      short loc_4064DF
.text:004064DB                 cmp     al, 3Dh ; '='
.text:004064DD                 jnz     short loc_4064D3
.text:004064DF
.text:004064DF loc_4064DF:                             ; CODE XREF: sub_405DA0+72D↑j
.text:004064DF                                         ; sub_405DA0+731↑j ...
.text:004064DF                 mov     [esp+arg_1C], 0
.text:004064E7                 mov     esi, [esp+arg_68]
.text:004064EB                 mov     eax, [esi]
.text:004064ED                 test    eax, eax
.text:004064EF                 jz      loc_406670
.text:004064F5                 mov     ecx, eax
.text:004064F7
.text:004064F7 loc_4064F7:                             ; CODE XREF: sub_405DA0+783↓j
.text:004064F7                 mov     ebx, [ebp+14h]
.text:004064FA                 mov     eax, edi
.text:004064FC                 mov     [esp+0], ecx    ; Str1
.text:004064FF                 sub     eax, ebx
.text:00406501                 mov     [esp+MaxCount], eax ; MaxCount
.text:00406505                 mov     [esp+Str2], ebx ; Str2
.text:00406509                 call    strncmp
.text:0040650E                 test    eax, eax
.text:00406510                 jz      loc_4066D7
.text:00406516
.text:00406516 loc_406516:                             ; CODE XREF: sub_405DA0+95C↓j
.text:00406516                                         ; sub_405DA0+96D↓j
.text:00406516                 inc     [esp+arg_1C]
.text:0040651A                 add     esi, 10h
.text:0040651D                 mov     edx, [esi]
.text:0040651F                 test    edx, edx
.text:00406521                 mov     ecx, edx
.text:00406523                 jnz     short loc_4064F7
.text:00406525
.text:00406525 loc_406525:                             ; CODE XREF: sub_405DA0+986↓j
.text:00406525                 mov     esi, [esp+arg_24]
.text:00406529                 test    esi, esi
.text:0040652B                 jz      short loc_406539
.text:0040652D                 mov     ebx, [esp+arg_28]
.text:00406531                 test    ebx, ebx
.text:00406533                 jz      loc_406681
.text:00406539
.text:00406539 loc_406539:                             ; CODE XREF: sub_405DA0+78B↑j
.text:00406539                 mov     esi, [esp+arg_2C]
.text:0040653D                 test    esi, esi
.text:0040653F                 jz      loc_406670
.text:00406545                 cmp     byte ptr [edi], 0
.text:00406548                 jz      loc_4065F0
.text:0040654E                 mov     ecx, [esp+arg_2C]
.text:00406552                 mov     ebx, [ecx+4]
.text:00406555                 test    ebx, ebx
.text:00406557                 jz      short loc_406598
.text:00406559                 lea     edx, [edi+1]
.text:0040655C                 mov     [ebp+0Ch], edx
.text:0040655F
.text:0040655F loc_40655F:                             ; CODE XREF: sub_405DA0+858↓j
.text:0040655F                                         ; sub_405DA0+877↓j
.text:0040655F                 mov     edi, [ebp+14h]
.text:00406562                 mov     [esp+0], edi    ; Str
.text:00406565                 call    strlen
.text:0040656A                 add     [ebp+14h], eax
.text:0040656D                 mov     eax, [esp+arg_6C]
.text:00406571                 test    eax, eax
.text:00406573                 jz      short loc_406580
.text:00406575                 mov     edx, [esp+arg_20]
.text:00406579                 mov     ebp, [esp+arg_6C]
.text:0040657D                 mov     [ebp+0], edx
.text:00406580
.text:00406580 loc_406580:                             ; CODE XREF: sub_405DA0+7D3↑j
.text:00406580                 mov     eax, [esp+arg_2C]
.text:00406584                 mov     ecx, [eax+8]
.text:00406587                 test    ecx, ecx
.text:00406589                 jnz     loc_40614A
.text:0040658F                 mov     ecx, [esp+arg_2C]
.text:00406593                 jmp     loc_406142
.text:00406598 ; ---------------------------------------------------------------------------
.text:00406598
.text:00406598 loc_406598:                             ; CODE XREF: sub_405DA0+7B7↑j
.text:00406598                 mov     eax, [esp+arg_44]
.text:0040659C                 test    eax, eax
.text:0040659E                 jnz     short loc_4065B3
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_405DA0+849↓j
.text:004065A0                 mov     ecx, [ebp+14h]
.text:004065A3                 mov     [esp+0], ecx    ; Str
.text:004065A6                 call    strlen
.text:004065AB                 add     [ebp+14h], eax
.text:004065AE                 jmp     loc_4061C8
.text:004065B3 ; ---------------------------------------------------------------------------
.text:004065B3
.text:004065B3 loc_4065B3:                             ; CODE XREF: sub_405DA0+7FE↑j
.text:004065B3                 mov     dword ptr [esp+0], offset sub_405DA0
.text:004065BA                 call    ds:libintl_gettext
.text:004065C0                 mov     edx, [esp+arg_2C]
.text:004065C4                 mov     ebx, [esp+arg_60]
.text:004065C8                 mov     edi, [edx]
.text:004065CA                 mov     [esp+arg_8], edi
.text:004065CE                 mov     edi, ds:_iob
.text:004065D4                 mov     esi, [ebx]
.text:004065D6                 mov     [esp+Str2], eax ; Format
.text:004065DA                 add     edi, 40h ; '@'
.text:004065DD                 mov     [esp+MaxCount], esi
.text:004065E1                 mov     [esp+0], edi    ; Stream
.text:004065E4                 call    fprintf
.text:004065E9                 jmp     short loc_4065A0
.text:004065E9 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004065E9 ; ---------------------------------------------------------------------------
.text:004065EB                 align 10h
.text:004065F0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: sub_405DA0+7A8↑j
.text:004065F0                 mov     esi, [esp+arg_2C]
.text:004065F4                 cmp     dword ptr [esi+4], 1
.text:004065F8                 jnz     loc_40655F
.text:004065FE                 mov     ecx, [ebp+0]
.text:00406601                 cmp     ecx, [esp+arg_5C]
.text:00406605                 jge     short loc_40661C
.text:00406607                 mov     eax, [esp+arg_60]
.text:0040660B                 lea     ebx, [ecx+1]
.text:0040660E                 mov     [ebp+0], ebx
.text:00406611                 mov     edi, [eax+ecx*4]
.text:00406614                 mov     [ebp+0Ch], edi
.text:00406617                 jmp     loc_40655F
.text:0040661C ; ---------------------------------------------------------------------------
.text:0040661C
.text:0040661C loc_40661C:                             ; CODE XREF: sub_405DA0+865↑j
.text:0040661C                 mov     edx, [esp+arg_44]
.text:00406620                 test    edx, edx
.text:00406622                 jnz     short loc_406637
.text:00406624
.text:00406624 loc_406624:                             ; CODE XREF: sub_405DA0+8CE↓j
.text:00406624                 mov     edx, [ebp+14h]
.text:00406627                 mov     [esp+0], edx    ; Str
.text:0040662A                 call    strlen
.text:0040662F                 add     [ebp+14h], eax
.text:00406632                 jmp     loc_406259
.text:00406637 ; ---------------------------------------------------------------------------
.text:00406637
.text:00406637 loc_406637:                             ; CODE XREF: sub_405DA0+882↑j
.text:00406637                 mov     dword ptr [esp+0], offset sub_405CC0
.text:0040663E                 call    ds:libintl_gettext
.text:00406644                 mov     ecx, [ebp+0]
.text:00406647                 mov     ebx, [esp+arg_60]
.text:0040664B                 mov     edi, [ebx+ecx*4-4]
.text:0040664F                 mov     ecx, ds:_iob
.text:00406655                 mov     [esp+arg_8], edi
.text:00406659                 mov     esi, [ebx]
.text:0040665B                 add     ecx, 40h ; '@'
.text:0040665E                 mov     [esp+Str2], eax ; Format
.text:00406662                 mov     [esp+0], ecx    ; Stream
.text:00406665                 mov     [esp+MaxCount], esi
.text:00406669                 call    fprintf
.text:0040666E                 jmp     short loc_406624
.text:00406670 ; ---------------------------------------------------------------------------
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: sub_405DA0+74F↑j
.text:00406670                                         ; sub_405DA0+79F↑j
.text:00406670                 mov     dword ptr [ebp+14h], 0
.text:00406677                 mov     eax, 57h ; 'W'
.text:0040667C                 jmp     loc_405FC7
.text:00406681 ; ---------------------------------------------------------------------------
.text:00406681
.text:00406681 loc_406681:                             ; CODE XREF: sub_405DA0+793↑j
.text:00406681                 mov     edi, [esp+arg_44]
.text:00406685                 test    edi, edi
.text:00406687                 jnz     short loc_40669F
.text:00406689
.text:00406689 loc_406689:                             ; CODE XREF: sub_405DA0+935↓j
.text:00406689                 mov     edx, [ebp+14h]
.text:0040668C                 mov     [esp+0], edx    ; Str
.text:0040668F                 call    strlen
.text:00406694                 add     [ebp+14h], eax
.text:00406697                 inc     dword ptr [ebp+0]
.text:0040669A                 jmp     loc_4061C8
.text:0040669F ; ---------------------------------------------------------------------------
.text:0040669F
.text:0040669F loc_40669F:                             ; CODE XREF: sub_405DA0+8E7↑j
.text:0040669F                 mov     dword ptr [esp+0], offset sub_405DE0
.text:004066A6                 call    ds:libintl_gettext
.text:004066AC                 mov     ecx, [ebp+0]
.text:004066AF                 mov     ebx, [esp+arg_60]
.text:004066B3                 mov     edi, [ebx+ecx*4]
.text:004066B6                 mov     ecx, ds:_iob
.text:004066BC                 mov     [esp+arg_8], edi
.text:004066C0                 mov     esi, [ebx]
.text:004066C2                 add     ecx, 40h ; '@'
.text:004066C5                 mov     [esp+Str2], eax ; Format
.text:004066C9                 mov     [esp+0], ecx    ; Stream
.text:004066CC                 mov     [esp+MaxCount], esi
.text:004066D0                 call    fprintf
.text:004066D5                 jmp     short loc_406689
.text:004066D7 ; ---------------------------------------------------------------------------
.text:004066D7
.text:004066D7 loc_4066D7:                             ; CODE XREF: sub_405DA0+770↑j
.text:004066D7                 mov     edx, [ebp+14h]
.text:004066DA                 mov     ebx, edi
.text:004066DC                 mov     ecx, [esi]
.text:004066DE                 sub     ebx, edx
.text:004066E0                 mov     [esp+0], ecx    ; Str
.text:004066E3                 call    strlen
.text:004066E8                 cmp     ebx, eax
.text:004066EA                 jz      short loc_406712
.text:004066EC                 mov     ebx, [esp+arg_2C]
.text:004066F0                 test    ebx, ebx
.text:004066F2                 jz      short loc_406701
.text:004066F4                 mov     [esp+arg_24], 1
.text:004066FC                 jmp     loc_406516
.text:00406701 ; ---------------------------------------------------------------------------
.text:00406701
.text:00406701 loc_406701:                             ; CODE XREF: sub_405DA0+952↑j
.text:00406701                 mov     [esp+arg_2C], esi
.text:00406705                 mov     ecx, [esp+arg_1C]
.text:00406709                 mov     [esp+arg_20], ecx
.text:0040670D                 jmp     loc_406516
.text:00406712 ; ---------------------------------------------------------------------------
.text:00406712
.text:00406712 loc_406712:                             ; CODE XREF: sub_405DA0+94A↑j
.text:00406712                 mov     [esp+arg_2C], esi
.text:00406716                 mov     eax, [esp+arg_1C]
.text:0040671A                 mov     [esp+arg_28], 1
.text:00406722                 mov     [esp+arg_20], eax
.text:00406726                 jmp     loc_406525
.text:0040672B ; ---------------------------------------------------------------------------
.text:0040672B
.text:0040672B loc_40672B:                             ; CODE XREF: sub_405DA0+716↑j
.text:0040672B                 mov     edx, [ebp+0]
.text:0040672E                 cmp     edx, [esp+arg_5C]
.text:00406732                 jz      short loc_406749
.text:00406734                 mov     ebx, [esp+arg_60]
.text:00406738                 lea     esi, [edx+1]
.text:0040673B                 mov     [ebp+0], esi
.text:0040673E                 mov     edi, [ebx+edx*4]
.text:00406741                 mov     [ebp+0Ch], edi
.text:00406744                 jmp     loc_4064C2
.text:00406749 ; ---------------------------------------------------------------------------
.text:00406749
.text:00406749 loc_406749:                             ; CODE XREF: sub_405DA0+992↑j
.text:00406749                 mov     edi, [esp+arg_44]
.text:0040674D                 test    edi, edi
.text:0040674F                 jnz     short loc_40676C
.text:00406751
.text:00406751 loc_406751:                             ; CODE XREF: sub_405DA0+9FC↓j
.text:00406751                 mov     [ebp+8], esi
.text:00406754                 mov     ebp, [esp+Str]
.text:00406758                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040675C                 jz      short loc_406768
.text:0040675E                 mov     bl, 3Fh ; '?'
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: sub_405DA0+9CA↓j
.text:00406760                 movsx   eax, bl
.text:00406763                 jmp     loc_405FC7
.text:00406768 ; ---------------------------------------------------------------------------
.text:00406768
.text:00406768 loc_406768:                             ; CODE XREF: sub_405DA0+9BC↑j
.text:00406768                 mov     bl, 3Ah ; ':'
.text:0040676A                 jmp     short loc_406760
.text:0040676C ; ---------------------------------------------------------------------------
.text:0040676C
.text:0040676C loc_40676C:                             ; CODE XREF: sub_405DA0+9AF↑j
.text:0040676C                 mov     dword ptr [esp+0], 405D60h
.text:00406773                 call    ds:libintl_gettext
.text:00406779                 mov     [esp+arg_8], esi
.text:0040677D                 mov     edx, [esp+arg_60]
.text:00406781                 mov     ecx, ds:_iob
.text:00406787                 mov     ebx, [edx]
.text:00406789                 add     ecx, 40h ; '@'
.text:0040678C                 mov     [esp+Str2], eax ; Format
.text:00406790                 mov     [esp+MaxCount], ebx
.text:00406794                 mov     [esp+0], ecx    ; Stream
.text:00406797                 call    fprintf
.text:0040679C                 jmp     short loc_406751
.text:0040679C ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:0040679C ; ---------------------------------------------------------------------------
.text:0040679E                 align 10h
.text:004067A0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004067A0
.text:004067A0 loc_4067A0:                             ; CODE XREF: sub_405DA0+61C↑j
.text:004067A0                                         ; sub_405DA0+625↑j
.text:004067A0                 mov     eax, [esp+arg_44]
.text:004067A4                 test    eax, eax
.text:004067A6                 jz      short loc_4067DF
.text:004067A8                 mov     ebx, [ebp+1Ch]
.text:004067AB                 test    ebx, ebx
.text:004067AD                 jz      short loc_4067E7
.text:004067AF                 mov     dword ptr [esp+0], offset loc_405E01
.text:004067B6
.text:004067B6 loc_4067B6:                             ; CODE XREF: sub_405DA0+A4E↓j
.text:004067B6                 call    ds:libintl_gettext
.text:004067BC                 mov     [esp+arg_8], esi
.text:004067C0                 mov     ebx, [esp+arg_60]
.text:004067C4                 mov     edx, ds:_iob
.text:004067CA                 mov     esi, [ebx]
.text:004067CC                 add     edx, 40h ; '@'
.text:004067CF                 mov     [esp+Str2], eax ; Format
.text:004067D3                 mov     [esp+MaxCount], esi
.text:004067D7                 mov     [esp+0], edx    ; Stream
.text:004067DA                 call    fprintf
.text:004067DF
.text:004067DF loc_4067DF:                             ; CODE XREF: sub_405DA0+A06↑j
.text:004067DF                 mov     [ebp+8], edi
.text:004067E2                 jmp     loc_4061C8
.text:004067E7 ; ---------------------------------------------------------------------------
.text:004067E7
.text:004067E7 loc_4067E7:                             ; CODE XREF: sub_405DA0+A0D↑j
.text:004067E7                 mov     dword ptr [esp+0], offset loc_405E1B
.text:004067EE                 jmp     short loc_4067B6
.text:004067F0 ; ---------------------------------------------------------------------------
.text:004067F0
.text:004067F0 loc_4067F0:                             ; CODE XREF: sub_405DA0+33E↑j
.text:004067F0                 mov     edi, [esp+arg_44]
.text:004067F4                 test    edi, edi
.text:004067F6                 jnz     short loc_40680E
.text:004067F8
.text:004067F8 loc_4067F8:                             ; CODE XREF: sub_405DA0+AA4↓j
.text:004067F8                 mov     edx, [ebp+14h]
.text:004067FB                 mov     [esp+0], edx    ; Str
.text:004067FE                 call    strlen
.text:00406803                 add     [ebp+14h], eax
.text:00406806                 inc     dword ptr [ebp+0]
.text:00406809                 jmp     loc_40634E
.text:0040680E ; ---------------------------------------------------------------------------
.text:0040680E
.text:0040680E loc_40680E:                             ; CODE XREF: sub_405DA0+A56↑j
.text:0040680E                 mov     dword ptr [esp+0], offset loc_405E35
.text:00406815                 call    ds:libintl_gettext
.text:0040681B                 mov     ebx, [ebp+0]
.text:0040681E                 mov     edi, [esp+arg_60]
.text:00406822                 mov     ecx, [edi+ebx*4]
.text:00406825                 mov     ebx, ds:_iob
.text:0040682B                 mov     [esp+arg_8], ecx
.text:0040682F                 mov     esi, [edi]
.text:00406831                 add     ebx, 40h ; '@'
.text:00406834                 mov     [esp+Str2], eax ; Format
.text:00406838                 mov     [esp+0], ebx    ; Stream
.text:0040683B                 mov     [esp+MaxCount], esi
.text:0040683F                 call    fprintf
.text:00406844                 jmp     short loc_4067F8
.text:00406846 ; ---------------------------------------------------------------------------
.text:00406846
.text:00406846 loc_406846:                             ; CODE XREF: sub_405DA0+316↑j
.text:00406846                 mov     ecx, [ebp+14h]
.text:00406849                 mov     ebx, edi
.text:0040684B                 mov     edx, [esi]
.text:0040684D                 sub     ebx, ecx
.text:0040684F                 mov     [esp+0], edx    ; Str
.text:00406852                 call    strlen
.text:00406857                 cmp     ebx, eax
.text:00406859                 jz      short loc_4068B1
.text:0040685B                 mov     ebx, [esp+arg_40]
.text:0040685F                 test    ebx, ebx
.text:00406861                 jz      short loc_4068A0
.text:00406863                 mov     edx, [esp+arg_70]
.text:00406867                 test    edx, edx
.text:00406869                 jnz     short loc_406877
.text:0040686B                 mov     ecx, [esp+arg_40]
.text:0040686F                 mov     ebx, [esi+4]
.text:00406872                 cmp     [ecx+4], ebx
.text:00406875                 jz      short loc_406884
.text:00406877
.text:00406877 loc_406877:                             ; CODE XREF: sub_405DA0+AC9↑j
.text:00406877                                         ; sub_405DA0+AEA↓j ...
.text:00406877                 mov     [esp+arg_38], 1
.text:0040687F                 jmp     loc_4060BC
.text:00406884 ; ---------------------------------------------------------------------------
.text:00406884
.text:00406884 loc_406884:                             ; CODE XREF: sub_405DA0+AD5↑j
.text:00406884                 mov     edx, [esi+8]
.text:00406887                 cmp     [ecx+8], edx
.text:0040688A                 jnz     short loc_406877
.text:0040688C                 mov     ebx, [esi+0Ch]
.text:0040688F                 cmp     [ecx+0Ch], ebx
.text:00406892                 jnz     short loc_406877
.text:00406894                 jmp     loc_4060BC
.text:00406894 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:00406894 ; ---------------------------------------------------------------------------
.text:00406899                 align 10h
.text:004068A0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_405DA0+AC1↑j
.text:004068A0                 mov     [esp+arg_40], esi
.text:004068A4                 mov     eax, [esp+arg_30]
.text:004068A8                 mov     [esp+arg_34], eax
.text:004068AC                 jmp     loc_4060BC
.text:004068B1 ; ---------------------------------------------------------------------------
.text:004068B1
.text:004068B1 loc_4068B1:                             ; CODE XREF: sub_405DA0+AB9↑j
.text:004068B1                 mov     [esp+arg_40], esi
.text:004068B5                 mov     ecx, [esp+arg_30]
.text:004068B9                 mov     [esp+arg_3C], 1
.text:004068C1                 mov     [esp+arg_34], ecx
.text:004068C5                 jmp     loc_4060D0
.text:004068CA ; ---------------------------------------------------------------------------
.text:004068CA
.text:004068CA loc_4068CA:                             ; CODE XREF: sub_405DA0+28F↑j
.text:004068CA                 mov     eax, [esp+Str]
.text:004068CE                 movsx   esi, dl
.text:004068D1                 mov     [esp+Str2], esi ; Val
.text:004068D5                 mov     [esp+0], eax    ; Str
.text:004068D8                 call    strchr
.text:004068DD                 test    eax, eax
.text:004068DF                 jnz     loc_406390
.text:004068E5                 jmp     loc_406035
.text:004068EA ; ---------------------------------------------------------------------------
.text:004068EA
.text:004068EA loc_4068EA:                             ; CODE XREF: sub_405DA0+24C↑j
.text:004068EA                 mov     ecx, 1
.text:004068EF                 jmp     loc_405FF2
.text:004068F4 ; ---------------------------------------------------------------------------
.text:004068F4
.text:004068F4 loc_4068F4:                             ; CODE XREF: sub_405DA0+1A4↑j
.text:004068F4                                         ; sub_405DA0+200↑j
.text:004068F4                 mov     eax, [ebp+20h]
.text:004068F7                 cmp     eax, [ebp+24h]
.text:004068FA                 jz      loc_405FD0
.text:00406900                 mov     [ebp+0], eax
.text:00406903                 jmp     loc_405FD0
.text:00406908 ; ---------------------------------------------------------------------------
.text:00406908
.text:00406908 loc_406908:                             ; CODE XREF: sub_405DA0+1CE↑j
.text:00406908                 mov     [ebp+20h], eax
.text:0040690B                 jmp     loc_405F90
.text:00406910 ; ---------------------------------------------------------------------------
.text:00406910
.text:00406910 loc_406910:                             ; CODE XREF: sub_405DA0+19A↑j
.text:00406910                 mov     edx, [ebp+20h]
.text:00406913                 mov     eax, [ebp+24h]
.text:00406916                 cmp     edx, eax
.text:00406918                 jz      short loc_406990
.text:0040691A                 cmp     eax, ebx
.text:0040691C                 jz      short loc_406931
.text:0040691E                 mov     [esp+Str2], ebp
.text:00406922                 mov     ebx, [esp+arg_60]
.text:00406926                 mov     [esp+0], ebx
.text:00406929                 call    sub_406B20
.text:0040692E                 mov     ebx, [ebp+0]
.text:00406931
.text:00406931 loc_406931:                             ; CODE XREF: sub_405DA0+B7C↑j
.text:00406931                                         ; sub_405DA0+BF2↓j ...
.text:00406931                 cmp     ebx, [esp+arg_5C]
.text:00406935                 jge     short loc_406980
.text:00406937                 mov     esi, [esp+arg_60]
.text:0040693B                 mov     eax, [esi+ebx*4]
.text:0040693E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406941                 jz      short loc_406988
.text:00406943                 lea     esi, [esi+0]
.text:00406949                 lea     edi, [edi+0]
.text:00406950
.text:00406950 loc_406950:                             ; CODE XREF: sub_405DA0+BCC↓j
.text:00406950                                         ; sub_405DA0+BEC↓j
.text:00406950                 lea     eax, [ebx+1]
.text:00406953                 mov     ebx, eax
.text:00406955                 mov     [ebp+0], eax
.text:00406958                 cmp     eax, [esp+arg_5C]
.text:0040695C                 jge     short loc_406980
.text:0040695E                 mov     edi, [esp+arg_60]
.text:00406962                 mov     edx, [edi+eax*4]
.text:00406965                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00406968                 jz      short loc_406970
.text:0040696A
.text:0040696A loc_40696A:                             ; CODE XREF: sub_405DA0+BD4↓j
.text:0040696A                 mov     ebx, eax
.text:0040696C                 jmp     short loc_406950
.text:0040696C ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:0040696C ; ---------------------------------------------------------------------------
.text:0040696E                 align 10h
.text:00406970 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: sub_405DA0+BC8↑j
.text:00406970                 cmp     byte ptr [edx+1], 0
.text:00406974                 jz      short loc_40696A
.text:00406976                 lea     esi, [esi+0]
.text:00406979                 lea     edi, [edi+0]
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: sub_405DA0+B95↑j
.text:00406980                                         ; sub_405DA0+BBC↑j ...
.text:00406980                 mov     [ebp+24h], ebx
.text:00406983                 jmp     loc_405F40
.text:00406988 ; ---------------------------------------------------------------------------
.text:00406988
.text:00406988 loc_406988:                             ; CODE XREF: sub_405DA0+BA1↑j
.text:00406988                 cmp     byte ptr [eax+1], 0
.text:0040698C                 jz      short loc_406950
.text:0040698E                 jmp     short loc_406980
.text:00406990 ; ---------------------------------------------------------------------------
.text:00406990
.text:00406990 loc_406990:                             ; CODE XREF: sub_405DA0+B78↑j
.text:00406990                 cmp     edx, ebx
.text:00406992                 jz      short loc_406931
.text:00406994                 mov     [ebp+20h], ebx
.text:00406997                 jmp     short loc_406931
.text:00406999 ; ---------------------------------------------------------------------------
.text:00406999
.text:00406999 loc_406999:                             ; CODE XREF: sub_405DA0+158↑j
.text:00406999                 mov     dword ptr [ebp+18h], 0
.text:004069A0                 mov     esi, [esp+Str]
.text:004069A4
.text:004069A4 loc_4069A4:                             ; CODE XREF: sub_405DA0+C19↓j
.text:004069A4                 inc     esi
.text:004069A5                 jmp     loc_405F08
.text:004069A5 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004069A5 ; ---------------------------------------------------------------------------
.text:004069AA                 align 10h
.text:004069B0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_405DA0+150↑j
.text:004069B0                 mov     dword ptr [ebp+18h], 2
.text:004069B7                 mov     esi, ecx
.text:004069B9                 jmp     short loc_4069A4
.text:004069B9 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004069B9 ; ---------------------------------------------------------------------------
.text:004069BB                 align 10h
.text:004069C0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004069C0
.text:004069C0 loc_4069C0:                             ; CODE XREF: sub_405DA0+139↑j
.text:004069C0                 mov     dword ptr [esp+0], offset loc_405E53 ; VarName
.text:004069C7                 call    getenv
.text:004069CC                 test    eax, eax
.text:004069CE                 jz      loc_405EE4
.text:004069D4                 jmp     loc_405EDF
.text:004069D4 ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004069D4 ; ---------------------------------------------------------------------------
.text:004069D9                 align 10h
.text:004069E0 ; START OF FUNCTION CHUNK FOR sub_405DA0
.text:004069E0
.text:004069E0 loc_4069E0:                             ; CODE XREF: sub_405DA0:loc_405EAF↑j
.text:004069E0                 mov     dword ptr [ebp+0], 1
.text:004069E7                 mov     ebx, 1
.text:004069EC                 jmp     loc_405EC0
.text:004069EC ; END OF FUNCTION CHUNK FOR sub_405DA0
.text:004069F1 ; ---------------------------------------------------------------------------
.text:004069F1                 jmp     short sub_406A00
.text:004069F1 ; ---------------------------------------------------------------------------
.text:004069F3                 align 10h
.text:00406A00
.text:00406A00 ; =============== S U B R O U T I N E =======================================
.text:00406A00
.text:00406A00
.text:00406A00 sub_406A00      proc near               ; CODE XREF: .text:004069F1↑j
.text:00406A00                                         ; sub_407E00+3A↓p ...
.text:00406A00
.text:00406A00 var_2C          = dword ptr -2Ch
.text:00406A00 var_28          = dword ptr -28h
.text:00406A00 var_24          = dword ptr -24h
.text:00406A00 var_20          = dword ptr -20h
.text:00406A00 var_1C          = dword ptr -1Ch
.text:00406A00 var_18          = dword ptr -18h
.text:00406A00 var_14          = dword ptr -14h
.text:00406A00 var_10          = dword ptr -10h
.text:00406A00 arg_0           = dword ptr  4
.text:00406A00 arg_4           = dword ptr  8
.text:00406A00 arg_8           = dword ptr  0Ch
.text:00406A00 arg_C           = dword ptr  10h
.text:00406A00 arg_10          = dword ptr  14h
.text:00406A00 arg_14          = dword ptr  18h
.text:00406A00 arg_18          = dword ptr  1Ch
.text:00406A00
.text:00406A00                 sub     esp, 2Ch
.text:00406A03                 mov     edx, dword_40B830
.text:00406A09                 mov     [esp+2Ch+var_10], offset dword_40C030
.text:00406A11                 mov     ecx, dword_40B834
.text:00406A17                 mov     ds:dword_40C030, edx
.text:00406A1D                 mov     edx, [esp+2Ch+arg_18]
.text:00406A21                 mov     ds:dword_40C034, ecx
.text:00406A27                 mov     ecx, [esp+2Ch+arg_14]
.text:00406A2B                 mov     [esp+2Ch+var_14], edx
.text:00406A2F                 mov     edx, [esp+2Ch+arg_10]
.text:00406A33                 mov     [esp+2Ch+var_18], ecx
.text:00406A37                 mov     ecx, [esp+2Ch+arg_C]
.text:00406A3B                 mov     [esp+2Ch+var_1C], edx
.text:00406A3F                 mov     edx, [esp+2Ch+arg_8]
.text:00406A43                 mov     [esp+2Ch+var_20], ecx
.text:00406A47                 mov     ecx, [esp+2Ch+arg_4]
.text:00406A4B                 mov     [esp+2Ch+var_24], edx
.text:00406A4F                 mov     edx, [esp+2Ch+arg_0]
.text:00406A53                 mov     [esp+2Ch+var_28], ecx
.text:00406A57                 mov     [esp+2Ch+var_2C], edx
.text:00406A5A                 call    loc_405E70
.text:00406A5F                 mov     ecx, ds:dword_40C030
.text:00406A65                 mov     dword_40B830, ecx
.text:00406A6B                 mov     ecx, ds:dword_40C03C
.text:00406A71                 mov     ds:dword_40C1E0, ecx
.text:00406A77                 mov     ecx, ds:dword_40C038
.text:00406A7D                 mov     dword_40B838, ecx
.text:00406A83                 add     esp, 2Ch
.text:00406A86                 retn
.text:00406A86 sub_406A00      endp
.text:00406A86
.text:00406A86 ; ---------------------------------------------------------------------------
.text:00406A87                 align 10h
.text:00406A90                 sub     esp, 2Ch
.text:00406A93                 mov     edx, dword_40B830
.text:00406A99                 mov     dword ptr [esp+1Ch], offset dword_40C030
.text:00406AA1                 mov     ecx, dword_40B834
.text:00406AA7                 mov     dword ptr [esp+18h], 1
.text:00406AAF                 mov     ds:dword_40C030, edx
.text:00406AB5                 mov     edx, [esp+38h]
.text:00406AB9                 mov     ds:dword_40C034, ecx
.text:00406ABF                 mov     ecx, [esp+34h]
.text:00406AC3                 mov     [esp+8], edx
.text:00406AC7                 mov     edx, [esp+30h]
.text:00406ACB                 mov     [esp+4], ecx
.text:00406ACF                 mov     dword ptr [esp+14h], 0
.text:00406AD7                 mov     dword ptr [esp+10h], 0
.text:00406ADF                 mov     dword ptr [esp+0Ch], 0
.text:00406AE7                 mov     [esp], edx
.text:00406AEA                 call    loc_405E70
.text:00406AEF                 mov     ecx, ds:dword_40C030
.text:00406AF5                 mov     dword_40B830, ecx
.text:00406AFB                 mov     ecx, ds:dword_40C03C
.text:00406B01                 mov     ds:dword_40C1E0, ecx
.text:00406B07                 mov     ecx, ds:dword_40C038
.text:00406B0D                 mov     dword_40B838, ecx
.text:00406B13                 add     esp, 2Ch
.text:00406B16                 retn
.text:00406B16 ; ---------------------------------------------------------------------------
.text:00406B17                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20
.text:00406B20 sub_406B20      proc near               ; CODE XREF: sub_405DA0+1E3↑p
.text:00406B20                                         ; sub_405DA0+B89↑p
.text:00406B20
.text:00406B20 var_2C          = dword ptr -2Ch
.text:00406B20 var_28          = dword ptr -28h
.text:00406B20 var_24          = dword ptr -24h
.text:00406B20 var_20          = dword ptr -20h
.text:00406B20 var_1C          = dword ptr -1Ch
.text:00406B20 var_18          = dword ptr -18h
.text:00406B20 var_14          = dword ptr -14h
.text:00406B20 arg_0           = dword ptr  4
.text:00406B20 arg_4           = dword ptr  8
.text:00406B20
.text:00406B20                 push    ebp
.text:00406B21                 push    edi
.text:00406B22                 push    esi
.text:00406B23                 push    ebx
.text:00406B24                 sub     esp, 1Ch
.text:00406B27                 mov     ecx, [esp+2Ch+arg_4]
.text:00406B2B                 mov     eax, [esp+2Ch+arg_4]
.text:00406B2F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406B33                 mov     edx, [ecx+20h]
.text:00406B36                 mov     edi, [esp+2Ch+arg_0]
.text:00406B3A                 mov     ecx, [ebx]
.text:00406B3C                 mov     [esp+2Ch+var_2C], edx
.text:00406B3F                 mov     [esp+2Ch+var_14], edx
.text:00406B43                 mov     edx, [eax+24h]
.text:00406B46                 mov     [esp+2Ch+var_28], ecx
.text:00406B4A                 mov     [esp+2Ch+var_1C], ecx
.text:00406B4E                 cmp     ecx, edx
.text:00406B50                 mov     [esp+2Ch+var_18], edx
.text:00406B54                 jle     short loc_406BD0
.text:00406B56                 mov     esi, [esp+2Ch+var_2C]
.text:00406B59                 cmp     edx, esi
.text:00406B5B                 jle     short loc_406BD0
.text:00406B5D                 lea     esi, [esi+0]
.text:00406B60
.text:00406B60 loc_406B60:                             ; CODE XREF: sub_406B20+A1↓j
.text:00406B60                 mov     ebx, [esp+2Ch+var_1C]
.text:00406B64                 mov     edx, [esp+2Ch+var_18]
.text:00406B68                 mov     ebp, [esp+2Ch+var_18]
.text:00406B6C                 mov     eax, [esp+2Ch+var_14]
.text:00406B70                 sub     ebx, edx
.text:00406B72                 mov     [esp+2Ch+var_20], ebx
.text:00406B76                 sub     ebp, eax
.text:00406B78                 cmp     ebx, ebp
.text:00406B7A                 jle     short loc_406BF5
.text:00406B7C                 xor     esi, esi
.text:00406B7E                 cmp     esi, ebp
.text:00406B80                 jge     short loc_406BAD
.text:00406B82                 mov     ecx, [esp+2Ch+var_1C]
.text:00406B86                 sub     ecx, ebp
.text:00406B88                 mov     [esp+2Ch+var_24], ecx
.text:00406B8C                 lea     esi, [esi+0]
.text:00406B90
.text:00406B90 loc_406B90:                             ; CODE XREF: sub_406B20+8B↓j
.text:00406B90                 mov     ecx, [esp+2Ch+var_14]
.text:00406B94                 mov     edx, [esp+2Ch+var_24]
.text:00406B98                 add     ecx, esi
.text:00406B9A                 add     edx, esi
.text:00406B9C                 mov     ebx, [edi+ecx*4]
.text:00406B9F                 mov     eax, [edi+edx*4]
.text:00406BA2                 inc     esi
.text:00406BA3                 cmp     esi, ebp
.text:00406BA5                 mov     [edi+ecx*4], eax
.text:00406BA8                 mov     [edi+edx*4], ebx
.text:00406BAB                 jl      short loc_406B90
.text:00406BAD
.text:00406BAD loc_406BAD:                             ; CODE XREF: sub_406B20+60↑j
.text:00406BAD                 sub     [esp+2Ch+var_1C], ebp
.text:00406BB1
.text:00406BB1 loc_406BB1:                             ; CODE XREF: sub_406B20+107↓j
.text:00406BB1                 mov     eax, [esp+2Ch+var_18]
.text:00406BB5                 cmp     [esp+2Ch+var_1C], eax
.text:00406BB9                 jle     short loc_406BD0
.text:00406BBB                 mov     ebp, [esp+2Ch+var_14]
.text:00406BBF                 cmp     eax, ebp
.text:00406BC1                 jg      short loc_406B60
.text:00406BC3                 lea     esi, [esi+0]
.text:00406BC9                 lea     edi, [edi+0]
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; CODE XREF: sub_406B20+34↑j
.text:00406BD0                                         ; sub_406B20+3B↑j ...
.text:00406BD0                 mov     esi, [esp+2Ch+var_28]
.text:00406BD4                 mov     ecx, [esp+2Ch+var_18]
.text:00406BD8                 mov     eax, [esp+2Ch+var_2C]
.text:00406BDB                 mov     edi, [esp+2Ch+arg_4]
.text:00406BDF                 mov     edx, [esp+2Ch+var_28]
.text:00406BE3                 sub     esi, ecx
.text:00406BE5                 add     esi, eax
.text:00406BE7                 mov     [edi+20h], esi
.text:00406BEA                 mov     [edi+24h], edx
.text:00406BED                 add     esp, 1Ch
.text:00406BF0                 pop     ebx
.text:00406BF1                 pop     esi
.text:00406BF2                 pop     edi
.text:00406BF3                 pop     ebp
.text:00406BF4                 retn
.text:00406BF5 ; ---------------------------------------------------------------------------
.text:00406BF5
.text:00406BF5 loc_406BF5:                             ; CODE XREF: sub_406B20+5A↑j
.text:00406BF5                 xor     esi, esi
.text:00406BF7                 cmp     esi, [esp+2Ch+var_20]
.text:00406BFB                 jge     short loc_406C1F
.text:00406BFD                 lea     esi, [esi+0]
.text:00406C00
.text:00406C00 loc_406C00:                             ; CODE XREF: sub_406B20+FD↓j
.text:00406C00                 mov     ebx, [esp+2Ch+var_14]
.text:00406C04                 mov     ebp, [esp+2Ch+var_18]
.text:00406C08                 add     ebx, esi
.text:00406C0A                 add     ebp, esi
.text:00406C0C                 mov     edx, [edi+ebx*4]
.text:00406C0F                 inc     esi
.text:00406C10                 cmp     esi, [esp+2Ch+var_20]
.text:00406C14                 mov     ecx, [edi+ebp*4]
.text:00406C17                 mov     [edi+ebx*4], ecx
.text:00406C1A                 mov     [edi+ebp*4], edx
.text:00406C1D                 jl      short loc_406C00
.text:00406C1F
.text:00406C1F loc_406C1F:                             ; CODE XREF: sub_406B20+DB↑j
.text:00406C1F                 mov     esi, [esp+2Ch+var_20]
.text:00406C23                 add     [esp+2Ch+var_14], esi
.text:00406C27                 jmp     short loc_406BB1
.text:00406C27 sub_406B20      endp
.text:00406C27
.text:00406C27 ; ---------------------------------------------------------------------------
.text:00406C29                 align 20h
.text:00406C40 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00406C40                                         ; DATA XREF: sub_406CB0+544↓o
.text:00406C68                 align 20h
.text:00406C80 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00406C80                                         ; DATA XREF: sub_406CB0+54C↓o
.text:00406CA6                 align 10h
.text:00406CB0
.text:00406CB0 ; =============== S U B R O U T I N E =======================================
.text:00406CB0
.text:00406CB0
.text:00406CB0 ; int __cdecl sub_406CB0(int, int, int, int, char *Str)
.text:00406CB0 sub_406CB0      proc near               ; CODE XREF: sub_405A80+2E↑p
.text:00406CB0
.text:00406CB0 C               = dword ptr -3Ch
.text:00406CB0 Type            = dword ptr -38h
.text:00406CB0 Radix           = dword ptr -34h
.text:00406CB0 var_28          = dword ptr -28h
.text:00406CB0 var_24          = dword ptr -24h
.text:00406CB0 var_1D          = byte ptr -1Dh
.text:00406CB0 var_1C          = dword ptr -1Ch
.text:00406CB0 var_18          = dword ptr -18h
.text:00406CB0 var_14          = byte ptr -14h
.text:00406CB0 arg_0           = dword ptr  4
.text:00406CB0 arg_4           = dword ptr  8
.text:00406CB0 arg_8           = dword ptr  0Ch
.text:00406CB0 arg_C           = dword ptr  10h
.text:00406CB0 Str             = dword ptr  14h
.text:00406CB0
.text:00406CB0                 push    ebp
.text:00406CB1                 push    edi
.text:00406CB2                 push    esi
.text:00406CB3                 push    ebx
.text:00406CB4                 sub     esp, 2Ch
.text:00406CB7                 mov     ebp, [esp+3Ch+arg_8]
.text:00406CBB                 mov     [esp+3Ch+var_1C], 0
.text:00406CC3                 mov     esi, [esp+3Ch+arg_0]
.text:00406CC7                 cmp     ebp, 24h ; '$'
.text:00406CCA                 ja      loc_4071EC
.text:00406CD0                 mov     edi, [esp+3Ch+arg_4]
.text:00406CD4                 test    edi, edi
.text:00406CD6                 jz      loc_4071E3
.text:00406CDC
.text:00406CDC loc_406CDC:                             ; CODE XREF: sub_406CB0+537↓j
.text:00406CDC                 movzx   edx, byte ptr [esi]
.text:00406CDF                 mov     ebx, esi
.text:00406CE1                 mov     [esp+3Ch+var_1D], dl
.text:00406CE5                 lea     esi, [esi+0]
.text:00406CE9                 lea     edi, [edi+0]
.text:00406CF0
.text:00406CF0 loc_406CF0:                             ; CODE XREF: sub_406CB0+70↓j
.text:00406CF0                 movzx   edx, [esp+3Ch+var_1D]
.text:00406CF5                 mov     ecx, ds:__mb_cur_max
.text:00406CFB                 cmp     dword ptr [ecx], 1
.text:00406CFE                 jz      loc_4071D0
.text:00406D04                 mov     [esp+3Ch+Type], 8 ; Type
.text:00406D0C                 mov     [esp+3Ch+C], edx ; C
.text:00406D0F                 call    _isctype
.text:00406D14
.text:00406D14 loc_406D14:                             ; CODE XREF: sub_406CB0+52E↓j
.text:00406D14                 test    eax, eax
.text:00406D16                 jz      short loc_406D22
.text:00406D18                 inc     ebx
.text:00406D19                 movzx   eax, byte ptr [ebx]
.text:00406D1C                 mov     [esp+3Ch+var_1D], al
.text:00406D20                 jmp     short loc_406CF0
.text:00406D22 ; ---------------------------------------------------------------------------
.text:00406D22
.text:00406D22 loc_406D22:                             ; CODE XREF: sub_406CB0+66↑j
.text:00406D22                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00406D27                 mov     eax, 4
.text:00406D2C                 jz      short loc_406D85
.text:00406D2E                 call    _errno
.text:00406D33                 mov     dword ptr [eax], 0
.text:00406D39                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00406D3D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00406D41                 mov     [esp+3Ch+C], esi ; String
.text:00406D44                 call    strtoul
.text:00406D49                 mov     [esp+3Ch+var_18], eax
.text:00406D4D                 mov     eax, [edi]
.text:00406D4F                 cmp     eax, esi
.text:00406D51                 jz      loc_40719C
.text:00406D57                 call    _errno
.text:00406D5C                 mov     ebp, [eax]
.text:00406D5E                 test    ebp, ebp
.text:00406D60                 jnz     loc_40717B
.text:00406D66
.text:00406D66 loc_406D66:                             ; CODE XREF: sub_406CB0+4DD↓j
.text:00406D66                                         ; sub_406CB0+51A↓j
.text:00406D66                 mov     eax, [esp+3Ch+Str]
.text:00406D6A                 test    eax, eax
.text:00406D6C                 jz      short loc_406D77
.text:00406D6E                 mov     ecx, [edi]
.text:00406D70                 movzx   eax, byte ptr [ecx]
.text:00406D73                 test    al, al
.text:00406D75                 jnz     short loc_406D8D
.text:00406D77
.text:00406D77 loc_406D77:                             ; CODE XREF: sub_406CB0+BC↑j
.text:00406D77                                         ; sub_406CB0+26C↓j ...
.text:00406D77                 mov     edx, [esp+3Ch+var_18]
.text:00406D7B                 mov     esi, [esp+3Ch+arg_C]
.text:00406D7F                 mov     eax, [esp+3Ch+var_1C]
.text:00406D83                 mov     [esi], edx
.text:00406D85
.text:00406D85 loc_406D85:                             ; CODE XREF: sub_406CB0+7C↑j
.text:00406D85                                         ; sub_406CB0+112↓j ...
.text:00406D85                 add     esp, 2Ch
.text:00406D88                 pop     ebx
.text:00406D89                 pop     esi
.text:00406D8A                 pop     edi
.text:00406D8B                 pop     ebp
.text:00406D8C                 retn
.text:00406D8D ; ---------------------------------------------------------------------------
.text:00406D8D
.text:00406D8D loc_406D8D:                             ; CODE XREF: sub_406CB0+C5↑j
.text:00406D8D                 mov     [esp+3Ch+var_24], 1
.text:00406D95                 mov     edx, [esp+3Ch+Str]
.text:00406D99                 movsx   esi, al
.text:00406D9C                 mov     [esp+3Ch+Type], esi ; Val
.text:00406DA0                 mov     ebx, 400h
.text:00406DA5                 mov     [esp+3Ch+C], edx ; Str
.text:00406DA8                 call    strchr
.text:00406DAD                 test    eax, eax
.text:00406DAF                 jnz     short loc_406DC4
.text:00406DB1
.text:00406DB1 def_406E14:                             ; CODE XREF: sub_406CB0+162↓j
.text:00406DB1                                         ; sub_406CB0+164↓j
.text:00406DB1                                         ; DATA XREF: ...
.text:00406DB1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00406E14 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406DB5                 mov     ebx, [esp+3Ch+var_18]
.text:00406DB9                 mov     edi, [esp+3Ch+arg_C]
.text:00406DBD                 or      eax, 2
.text:00406DC0                 mov     [edi], ebx
.text:00406DC2                 jmp     short loc_406D85
.text:00406DC4 ; ---------------------------------------------------------------------------
.text:00406DC4
.text:00406DC4 loc_406DC4:                             ; CODE XREF: sub_406CB0+FF↑j
.text:00406DC4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00406DCC                 mov     ebp, [esp+3Ch+Str]
.text:00406DD0                 mov     [esp+3Ch+C], ebp ; Str
.text:00406DD3                 call    strchr
.text:00406DD8                 test    eax, eax
.text:00406DDA                 jz      loc_407170
.text:00406DE0                 mov     ecx, [edi]
.text:00406DE2                 mov     [esp+3Ch+var_28], ecx
.text:00406DE6                 movsx   eax, byte ptr [ecx+1]
.text:00406DEA                 cmp     eax, 44h ; 'D'
.text:00406DED                 jz      loc_407139
.text:00406DF3                 cmp     eax, 44h ; 'D'
.text:00406DF6                 jg      loc_40714B
.text:00406DFC                 cmp     eax, 42h ; 'B'
.text:00406DFF                 jz      loc_407139
.text:00406E05
.text:00406E05 loc_406E05:                             ; CODE XREF: sub_406CB0+496↓j
.text:00406E05                                         ; sub_406CB0+49E↓j ...
.text:00406E05                 mov     esi, [esp+3Ch+var_28]
.text:00406E09                 movsx   eax, byte ptr [esi]
.text:00406E0C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00406E0F                 cmp     eax, 35h
.text:00406E12                 ja      short def_406E14 ; jumptable 00406E14 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406E14                 jmp     ds:jpt_406E14[eax*4] ; switch jump
.text:00406E14 ; ---------------------------------------------------------------------------
.text:00406E1B                 align 4
.text:00406E1C jpt_406E14      dd offset loc_406F3B, offset def_406E14, offset def_406E14
.text:00406E1C                                         ; DATA XREF: sub_406CB0+164↑r
.text:00406E1C                 dd offset loc_406F4B, offset def_406E14, offset loc_40703C ; jump table for switch statement
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset loc_407079, offset def_406E14, offset loc_4070AB
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_406F85
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset loc_4070E9, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_406FC2
.text:00406E1C                 dd offset loc_406FFF, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_406EF4
.text:00406E1C                 dd offset loc_406F06, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset loc_40703C, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_407079
.text:00406E1C                 dd offset def_406E14, offset loc_4070AB, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset def_406E14
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_4070E9
.text:00406E1C                 dd offset def_406E14, offset def_406E14, offset loc_407126
.text:00406EF4 ; ---------------------------------------------------------------------------
.text:00406EF4
.text:00406EF4 loc_406EF4:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406EF4                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406EF4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406E14 case 98
.text:00406EF8                 cmp     eax, 7FFFFFh
.text:00406EFD                 ja      short loc_406F2C
.text:00406EFF                 shl     eax, 9
.text:00406F02
.text:00406F02 loc_406F02:                             ; CODE XREF: sub_406CB0+299↓j
.text:00406F02                                         ; sub_406CB0+484↓j
.text:00406F02                 mov     [esp+3Ch+var_18], eax
.text:00406F06
.text:00406F06 loc_406F06:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406F06                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406F06                 xor     eax, eax        ; jumptable 00406E14 case 99
.text:00406F08
.text:00406F08 loc_406F08:                             ; CODE XREF: sub_406CB0+289↓j
.text:00406F08                                         ; sub_406CB0+2CA↓j ...
.text:00406F08                 or      [esp+3Ch+var_1C], eax
.text:00406F0C                 mov     ebp, [esp+3Ch+var_28]
.text:00406F10                 mov     ecx, [esp+3Ch+var_24]
.text:00406F14                 add     ebp, ecx
.text:00406F16                 mov     [edi], ebp
.text:00406F18                 cmp     byte ptr [ebp+0], 0
.text:00406F1C                 jz      loc_406D77
.text:00406F22                 or      [esp+3Ch+var_1C], 2
.text:00406F27                 jmp     loc_406D77
.text:00406F2C ; ---------------------------------------------------------------------------
.text:00406F2C
.text:00406F2C loc_406F2C:                             ; CODE XREF: sub_406CB0+24D↑j
.text:00406F2C                                         ; sub_406CB0+294↓j ...
.text:00406F2C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00406F34                 mov     eax, 1
.text:00406F39                 jmp     short loc_406F08
.text:00406F3B ; ---------------------------------------------------------------------------
.text:00406F3B
.text:00406F3B loc_406F3B:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406F3B                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406F3B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406E14 case 66
.text:00406F3F                 cmp     eax, 3FFFFFh
.text:00406F44                 ja      short loc_406F2C
.text:00406F46                 shl     eax, 0Ah
.text:00406F49                 jmp     short loc_406F02
.text:00406F4B ; ---------------------------------------------------------------------------
.text:00406F4B
.text:00406F4B loc_406F4B:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406F4B                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406F4B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 case 69
.text:00406F4F                 xor     ebp, ebp
.text:00406F51                 mov     esi, 5
.text:00406F56
.text:00406F56 loc_406F56:                             ; CODE XREF: sub_406CB0+2C8↓j
.text:00406F56                 xor     edx, edx
.text:00406F58                 mov     eax, 0FFFFFFFFh
.text:00406F5D                 div     ebx
.text:00406F5F                 mov     edx, [ecx]
.text:00406F61                 cmp     eax, edx
.text:00406F63                 jnb     short loc_406F7C
.text:00406F65                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00406F6B                 mov     eax, 1
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: sub_406CB0+2D3↓j
.text:00406F70                 dec     esi
.text:00406F71                 or      ebp, eax
.text:00406F73                 cmp     esi, 0FFFFFFFFh
.text:00406F76                 mov     eax, ebp
.text:00406F78                 jnz     short loc_406F56
.text:00406F7A                 jmp     short loc_406F08
.text:00406F7C ; ---------------------------------------------------------------------------
.text:00406F7C
.text:00406F7C loc_406F7C:                             ; CODE XREF: sub_406CB0+2B3↑j
.text:00406F7C                 imul    edx, ebx
.text:00406F7F                 xor     eax, eax
.text:00406F81                 mov     [ecx], edx
.text:00406F83                 jmp     short loc_406F70
.text:00406F85 ; ---------------------------------------------------------------------------
.text:00406F85
.text:00406F85 loc_406F85:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406F85                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406F85                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 case 80
.text:00406F89                 xor     ebp, ebp
.text:00406F8B                 mov     esi, 4
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: sub_406CB0+302↓j
.text:00406F90                 xor     edx, edx
.text:00406F92                 mov     eax, 0FFFFFFFFh
.text:00406F97                 div     ebx
.text:00406F99                 mov     edx, [ecx]
.text:00406F9B                 cmp     eax, edx
.text:00406F9D                 jnb     short loc_406FB9
.text:00406F9F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00406FA5                 mov     eax, 1
.text:00406FAA
.text:00406FAA loc_406FAA:                             ; CODE XREF: sub_406CB0+310↓j
.text:00406FAA                 dec     esi
.text:00406FAB                 or      ebp, eax
.text:00406FAD                 cmp     esi, 0FFFFFFFFh
.text:00406FB0                 mov     eax, ebp
.text:00406FB2                 jnz     short loc_406F90
.text:00406FB4                 jmp     loc_406F08
.text:00406FB9 ; ---------------------------------------------------------------------------
.text:00406FB9
.text:00406FB9 loc_406FB9:                             ; CODE XREF: sub_406CB0+2ED↑j
.text:00406FB9                 imul    edx, ebx
.text:00406FBC                 xor     eax, eax
.text:00406FBE                 mov     [ecx], edx
.text:00406FC0                 jmp     short loc_406FAA
.text:00406FC2 ; ---------------------------------------------------------------------------
.text:00406FC2
.text:00406FC2 loc_406FC2:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406FC2                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406FC2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 case 89
.text:00406FC6                 xor     ebp, ebp
.text:00406FC8                 mov     esi, 7
.text:00406FCD
.text:00406FCD loc_406FCD:                             ; CODE XREF: sub_406CB0+33F↓j
.text:00406FCD                 xor     edx, edx
.text:00406FCF                 mov     eax, 0FFFFFFFFh
.text:00406FD4                 div     ebx
.text:00406FD6                 mov     edx, [ecx]
.text:00406FD8                 cmp     eax, edx
.text:00406FDA                 jnb     short loc_406FF6
.text:00406FDC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00406FE2                 mov     eax, 1
.text:00406FE7
.text:00406FE7 loc_406FE7:                             ; CODE XREF: sub_406CB0+34D↓j
.text:00406FE7                 dec     esi
.text:00406FE8                 or      ebp, eax
.text:00406FEA                 cmp     esi, 0FFFFFFFFh
.text:00406FED                 mov     eax, ebp
.text:00406FEF                 jnz     short loc_406FCD
.text:00406FF1                 jmp     loc_406F08
.text:00406FF6 ; ---------------------------------------------------------------------------
.text:00406FF6
.text:00406FF6 loc_406FF6:                             ; CODE XREF: sub_406CB0+32A↑j
.text:00406FF6                 imul    edx, ebx
.text:00406FF9                 xor     eax, eax
.text:00406FFB                 mov     [ecx], edx
.text:00406FFD                 jmp     short loc_406FE7
.text:00406FFF ; ---------------------------------------------------------------------------
.text:00406FFF
.text:00406FFF loc_406FFF:                             ; CODE XREF: sub_406CB0+164↑j
.text:00406FFF                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00406FFF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 case 90
.text:00407003                 xor     ebp, ebp
.text:00407005                 mov     esi, 6
.text:0040700A
.text:0040700A loc_40700A:                             ; CODE XREF: sub_406CB0+37C↓j
.text:0040700A                 xor     edx, edx
.text:0040700C                 mov     eax, 0FFFFFFFFh
.text:00407011                 div     ebx
.text:00407013                 mov     edx, [ecx]
.text:00407015                 cmp     eax, edx
.text:00407017                 jnb     short loc_407033
.text:00407019                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040701F                 mov     eax, 1
.text:00407024
.text:00407024 loc_407024:                             ; CODE XREF: sub_406CB0+38A↓j
.text:00407024                 dec     esi
.text:00407025                 or      ebp, eax
.text:00407027                 cmp     esi, 0FFFFFFFFh
.text:0040702A                 mov     eax, ebp
.text:0040702C                 jnz     short loc_40700A
.text:0040702E                 jmp     loc_406F08
.text:00407033 ; ---------------------------------------------------------------------------
.text:00407033
.text:00407033 loc_407033:                             ; CODE XREF: sub_406CB0+367↑j
.text:00407033                 imul    edx, ebx
.text:00407036                 xor     eax, eax
.text:00407038                 mov     [ecx], edx
.text:0040703A                 jmp     short loc_407024
.text:0040703C ; ---------------------------------------------------------------------------
.text:0040703C
.text:0040703C loc_40703C:                             ; CODE XREF: sub_406CB0+164↑j
.text:0040703C                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:0040703C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 cases 71,103
.text:00407040                 xor     ebp, ebp
.text:00407042                 mov     esi, 2
.text:00407047
.text:00407047 loc_407047:                             ; CODE XREF: sub_406CB0+3B9↓j
.text:00407047                 xor     edx, edx
.text:00407049                 mov     eax, 0FFFFFFFFh
.text:0040704E                 div     ebx
.text:00407050                 mov     edx, [ecx]
.text:00407052                 cmp     eax, edx
.text:00407054                 jnb     short loc_407070
.text:00407056                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040705C                 mov     eax, 1
.text:00407061
.text:00407061 loc_407061:                             ; CODE XREF: sub_406CB0+3C7↓j
.text:00407061                 dec     esi
.text:00407062                 or      ebp, eax
.text:00407064                 cmp     esi, 0FFFFFFFFh
.text:00407067                 mov     eax, ebp
.text:00407069                 jnz     short loc_407047
.text:0040706B                 jmp     loc_406F08
.text:00407070 ; ---------------------------------------------------------------------------
.text:00407070
.text:00407070 loc_407070:                             ; CODE XREF: sub_406CB0+3A4↑j
.text:00407070                 imul    edx, ebx
.text:00407073                 xor     eax, eax
.text:00407075                 mov     [ecx], edx
.text:00407077                 jmp     short loc_407061
.text:00407079 ; ---------------------------------------------------------------------------
.text:00407079
.text:00407079 loc_407079:                             ; CODE XREF: sub_406CB0+164↑j
.text:00407079                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00407079                 xor     edx, edx        ; jumptable 00406E14 cases 75,107
.text:0040707B                 mov     eax, 0FFFFFFFFh
.text:00407080                 div     ebx
.text:00407082                 mov     edx, [esp+3Ch+var_18]
.text:00407086                 cmp     eax, edx
.text:00407088                 jnb     short loc_4070A0
.text:0040708A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00407092                 mov     edx, 1
.text:00407097
.text:00407097 loc_407097:                             ; CODE XREF: sub_406CB0+3F9↓j
.text:00407097                 xor     eax, eax
.text:00407099                 or      eax, edx
.text:0040709B                 jmp     loc_406F08
.text:004070A0 ; ---------------------------------------------------------------------------
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_406CB0+3D8↑j
.text:004070A0                 imul    edx, ebx
.text:004070A3                 mov     [esp+3Ch+var_18], edx
.text:004070A7                 xor     edx, edx
.text:004070A9                 jmp     short loc_407097
.text:004070AB ; ---------------------------------------------------------------------------
.text:004070AB
.text:004070AB loc_4070AB:                             ; CODE XREF: sub_406CB0+164↑j
.text:004070AB                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:004070AB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 cases 77,109
.text:004070AF                 xor     ebp, ebp
.text:004070B1                 mov     esi, 1
.text:004070B6
.text:004070B6 loc_4070B6:                             ; CODE XREF: sub_406CB0+42E↓j
.text:004070B6                 xor     edx, edx
.text:004070B8                 mov     eax, 0FFFFFFFFh
.text:004070BD                 div     ebx
.text:004070BF                 mov     edx, [ecx]
.text:004070C1                 cmp     eax, edx
.text:004070C3                 jnb     short loc_4070E0
.text:004070C5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004070CB                 mov     eax, 1
.text:004070D0
.text:004070D0 loc_4070D0:                             ; CODE XREF: sub_406CB0+437↓j
.text:004070D0                 dec     esi
.text:004070D1                 or      ebp, eax
.text:004070D3                 cmp     esi, 0FFFFFFFFh
.text:004070D6                 mov     eax, ebp
.text:004070D8                 jz      loc_406F08
.text:004070DE                 jmp     short loc_4070B6
.text:004070E0 ; ---------------------------------------------------------------------------
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_406CB0+413↑j
.text:004070E0                 imul    edx, ebx
.text:004070E3                 xor     eax, eax
.text:004070E5                 mov     [ecx], edx
.text:004070E7                 jmp     short loc_4070D0
.text:004070E9 ; ---------------------------------------------------------------------------
.text:004070E9
.text:004070E9 loc_4070E9:                             ; CODE XREF: sub_406CB0+164↑j
.text:004070E9                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:004070E9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00406E14 cases 84,116
.text:004070ED                 xor     ebp, ebp
.text:004070EF                 mov     esi, 3
.text:004070F4
.text:004070F4 loc_4070F4:                             ; CODE XREF: sub_406CB0+466↓j
.text:004070F4                 xor     edx, edx
.text:004070F6                 mov     eax, 0FFFFFFFFh
.text:004070FB                 div     ebx
.text:004070FD                 mov     edx, [ecx]
.text:004070FF                 cmp     eax, edx
.text:00407101                 jnb     short loc_40711D
.text:00407103                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00407109                 mov     eax, 1
.text:0040710E
.text:0040710E loc_40710E:                             ; CODE XREF: sub_406CB0+474↓j
.text:0040710E                 dec     esi
.text:0040710F                 or      ebp, eax
.text:00407111                 cmp     esi, 0FFFFFFFFh
.text:00407114                 mov     eax, ebp
.text:00407116                 jnz     short loc_4070F4
.text:00407118                 jmp     loc_406F08
.text:0040711D ; ---------------------------------------------------------------------------
.text:0040711D
.text:0040711D loc_40711D:                             ; CODE XREF: sub_406CB0+451↑j
.text:0040711D                 imul    edx, ebx
.text:00407120                 xor     eax, eax
.text:00407122                 mov     [ecx], edx
.text:00407124                 jmp     short loc_40710E
.text:00407126 ; ---------------------------------------------------------------------------
.text:00407126
.text:00407126 loc_407126:                             ; CODE XREF: sub_406CB0+164↑j
.text:00407126                                         ; DATA XREF: sub_406CB0:jpt_406E14↑o
.text:00407126                 mov     eax, [esp+3Ch+var_18] ; jumptable 00406E14 case 119
.text:0040712A                 test    eax, eax
.text:0040712C                 js      loc_406F2C
.text:00407132                 add     eax, eax
.text:00407134                 jmp     loc_406F02
.text:00407139 ; ---------------------------------------------------------------------------
.text:00407139
.text:00407139 loc_407139:                             ; CODE XREF: sub_406CB0+13D↑j
.text:00407139                                         ; sub_406CB0+14F↑j
.text:00407139                 mov     [esp+3Ch+var_24], 2
.text:00407141                 mov     ebx, 3E8h
.text:00407146                 jmp     loc_406E05
.text:0040714B ; ---------------------------------------------------------------------------
.text:0040714B
.text:0040714B loc_40714B:                             ; CODE XREF: sub_406CB0+146↑j
.text:0040714B                 cmp     eax, 69h ; 'i'
.text:0040714E                 jnz     loc_406E05
.text:00407154                 mov     edx, [esp+3Ch+var_28]
.text:00407158                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040715C                 jnz     loc_406E05
.text:00407162                 mov     [esp+3Ch+var_24], 3
.text:0040716A                 jmp     loc_406E05
.text:0040716A ; ---------------------------------------------------------------------------
.text:0040716F                 align 10h
.text:00407170
.text:00407170 loc_407170:                             ; CODE XREF: sub_406CB0+12A↑j
.text:00407170                 mov     eax, [edi]
.text:00407172                 mov     [esp+3Ch+var_28], eax
.text:00407176                 jmp     loc_406E05
.text:0040717B ; ---------------------------------------------------------------------------
.text:0040717B
.text:0040717B loc_40717B:                             ; CODE XREF: sub_406CB0+B0↑j
.text:0040717B                 call    _errno
.text:00407180                 cmp     dword ptr [eax], 22h ; '"'
.text:00407183                 jnz     short loc_407192
.text:00407185                 mov     [esp+3Ch+var_1C], 1
.text:0040718D                 jmp     loc_406D66
.text:00407192 ; ---------------------------------------------------------------------------
.text:00407192
.text:00407192 loc_407192:                             ; CODE XREF: sub_406CB0+4D3↑j
.text:00407192                                         ; sub_406CB0+4F2↓j ...
.text:00407192                 mov     eax, 4
.text:00407197                 jmp     loc_406D85
.text:0040719C ; ---------------------------------------------------------------------------
.text:0040719C
.text:0040719C loc_40719C:                             ; CODE XREF: sub_406CB0+A1↑j
.text:0040719C                 mov     edx, [esp+3Ch+Str]
.text:004071A0                 test    edx, edx
.text:004071A2                 jz      short loc_407192
.text:004071A4                 movzx   eax, byte ptr [eax]
.text:004071A7                 test    al, al
.text:004071A9                 jz      short loc_407192
.text:004071AB                 mov     ebx, [esp+3Ch+Str]
.text:004071AF                 movsx   esi, al
.text:004071B2                 mov     [esp+3Ch+Type], esi ; Val
.text:004071B6                 mov     [esp+3Ch+C], ebx ; Str
.text:004071B9                 call    strchr
.text:004071BE                 test    eax, eax
.text:004071C0                 jz      short loc_407192
.text:004071C2                 mov     [esp+3Ch+var_18], 1
.text:004071CA                 jmp     loc_406D66
.text:004071CA ; ---------------------------------------------------------------------------
.text:004071CF                 align 10h
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: sub_406CB0+4E↑j
.text:004071D0                 mov     eax, ds:_pctype
.text:004071D5                 mov     ecx, [eax]
.text:004071D7                 movzx   eax, word ptr [ecx+edx*2]
.text:004071DB                 and     eax, 8
.text:004071DE                 jmp     loc_406D14
.text:004071E3 ; ---------------------------------------------------------------------------
.text:004071E3
.text:004071E3 loc_4071E3:                             ; CODE XREF: sub_406CB0+26↑j
.text:004071E3                 lea     edi, [esp+3Ch+var_14]
.text:004071E7                 jmp     loc_406CDC
.text:004071EC ; ---------------------------------------------------------------------------
.text:004071EC
.text:004071EC loc_4071EC:                             ; CODE XREF: sub_406CB0+1A↑j
.text:004071EC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004071F4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004071FC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00407203                 call    _assert
.text:00407203 sub_406CB0      endp
.text:00407203
.text:00407203 ; ---------------------------------------------------------------------------
.text:00407208                 align 20h
.text:00407220
.text:00407220 loc_407220:                             ; DATA XREF: sub_407290+651↓o
.text:00407220                 db      2Eh, 2Eh
.text:00407220                 das
.text:00407223                 db      2Eh, 2Eh
.text:00407223                 das
.text:00407226                 arpl    [edi+72h], bp
.text:00407229                 db      65h
.text:00407229                 jnz     short near ptr loc_40729B+5
.text:0040722C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00407234                 xor     ds:2F637273h, ch
.text:0040723A                 insb
.text:0040723B                 imul    esp, [edx+2Fh], 72747378h
.text:00407242                 jz      short near ptr loc_4072AE+5
.text:00407244                 insb
.text:00407245                 arpl    cs:[eax], ax
.text:00407248                 nop
.text:00407249                 nop
.text:0040724A                 nop
.text:0040724B                 nop
.text:0040724C                 nop
.text:0040724D                 nop
.text:0040724E                 nop
.text:0040724F                 nop
.text:00407250                 nop
.text:00407251                 nop
.text:00407252                 nop
.text:00407253                 nop
.text:00407254                 nop
.text:00407255                 nop
.text:00407256                 nop
.text:00407257                 nop
.text:00407258                 nop
.text:00407259                 nop
.text:0040725A                 nop
.text:0040725B                 nop
.text:0040725C                 nop
.text:0040725D                 nop
.text:0040725E                 nop
.text:0040725F                 nop
.text:00407260
.text:00407260 loc_407260:                             ; DATA XREF: sub_407290+659↓o
.text:00407260                 xor     [eax], ah
.text:00407262                 cmp     al, 3Dh ; '='
.text:00407264                 and     [ebx+74h], dh
.text:00407267                 jb      short near ptr loc_4072DB+2
.text:00407269                 outsd
.text:0040726A                 insb
.text:0040726B                 pop     edi
.text:0040726C                 bound   esp, [ecx+73h]
.text:0040726F                 and     gs:[esi], ah
.text:00407272                 and     es:[ebx+74h], dh
.text:00407276                 jb      short near ptr loc_4072E9+3
.text:00407278                 outsd
.text:00407279                 insb
.text:0040727A                 pop     edi
.text:0040727B                 bound   esp, [ecx+73h]
.text:0040727E                 and     gs:363320h[edi], bh
.text:00407286                 lea     esi, [esi+0]
.text:00407289                 lea     edi, [edi+0]
.text:00407290
.text:00407290 ; =============== S U B R O U T I N E =======================================
.text:00407290
.text:00407290
.text:00407290 ; int __cdecl sub_407290(char *, char **, int, int, char *Str)
.text:00407290 sub_407290      proc near               ; CODE XREF: sub_404CF0+63↑p
.text:00407290
.text:00407290 String          = dword ptr -3Ch
.text:00407290 EndPtr          = dword ptr -38h
.text:00407290 Radix           = dword ptr -34h
.text:00407290 var_28          = dword ptr -28h
.text:00407290 var_24          = dword ptr -24h
.text:00407290 var_20          = dword ptr -20h
.text:00407290 var_1C          = dword ptr -1Ch
.text:00407290 var_18          = dword ptr -18h
.text:00407290 var_14          = byte ptr -14h
.text:00407290 arg_0           = dword ptr  4
.text:00407290 arg_4           = dword ptr  8
.text:00407290 arg_8           = dword ptr  0Ch
.text:00407290 arg_C           = dword ptr  10h
.text:00407290 Str             = dword ptr  14h
.text:00407290
.text:00407290                 push    ebp
.text:00407291                 push    edi
.text:00407292                 push    esi
.text:00407293                 push    ebx
.text:00407294                 sub     esp, 2Ch
.text:00407297                 mov     ebx, [esp+3Ch+arg_8]
.text:0040729B
.text:0040729B loc_40729B:                             ; CODE XREF: .text:00407229↑j
.text:0040729B                 mov     [esp+3Ch+var_1C], 0
.text:004072A3                 mov     esi, [esp+3Ch+arg_0]
.text:004072A7                 mov     ebp, [esp+3Ch+Str]
.text:004072AB                 cmp     ebx, 24h ; '$'
.text:004072AE
.text:004072AE loc_4072AE:                             ; CODE XREF: .text:00407242↑j
.text:004072AE                 ja      loc_4078D9
.text:004072B4                 mov     edi, [esp+3Ch+arg_4]
.text:004072B8                 test    edi, edi
.text:004072BA                 jz      loc_4078D0
.text:004072C0
.text:004072C0 loc_4072C0:                             ; CODE XREF: sub_407290+644↓j
.text:004072C0                 call    _errno
.text:004072C5                 mov     dword ptr [eax], 0
.text:004072CB                 mov     [esp+3Ch+Radix], ebx ; Radix
.text:004072CF                 mov     [esp+3Ch+EndPtr], edi ; EndPtr
.text:004072D3                 mov     [esp+3Ch+String], esi ; String
.text:004072D6                 call    strtol
.text:004072DB
.text:004072DB loc_4072DB:                             ; CODE XREF: .text:00407267↑j
.text:004072DB                 mov     [esp+3Ch+var_18], eax
.text:004072DF                 mov     eax, [edi]
.text:004072E1                 cmp     eax, esi
.text:004072E3                 jz      loc_4078A0
.text:004072E9
.text:004072E9 loc_4072E9:                             ; CODE XREF: .text:00407276↑j
.text:004072E9                 call    _errno
.text:004072EE                 mov     edx, [eax]
.text:004072F0                 test    edx, edx
.text:004072F2                 jnz     loc_407872
.text:004072F8
.text:004072F8 loc_4072F8:                             ; CODE XREF: sub_407290+5F4↓j
.text:004072F8                                         ; sub_407290+636↓j
.text:004072F8                 test    ebp, ebp
.text:004072FA                 jz      loc_407863
.text:00407300                 mov     esi, [edi]
.text:00407302                 movzx   eax, byte ptr [esi]
.text:00407305                 test    al, al
.text:00407307                 jnz     short loc_407320
.text:00407309
.text:00407309 loc_407309:                             ; CODE XREF: sub_407290+230↓j
.text:00407309                                         ; sub_407290+23B↓j
.text:00407309                 mov     esi, [esp+3Ch+var_18]
.text:0040730D                 mov     edx, [esp+3Ch+arg_C]
.text:00407311                 mov     [edx], esi
.text:00407313
.text:00407313 loc_407313:                             ; CODE XREF: sub_407290+5DD↓j
.text:00407313                 mov     eax, [esp+3Ch+var_1C]
.text:00407317
.text:00407317 loc_407317:                             ; CODE XREF: sub_407290+C1↓j
.text:00407317                                         ; sub_407290+605↓j
.text:00407317                 add     esp, 2Ch
.text:0040731A                 pop     ebx
.text:0040731B                 pop     esi
.text:0040731C                 pop     edi
.text:0040731D                 pop     ebp
.text:0040731E                 retn
.text:0040731E ; ---------------------------------------------------------------------------
.text:0040731F                 align 10h
.text:00407320
.text:00407320 loc_407320:                             ; CODE XREF: sub_407290+77↑j
.text:00407320                 mov     [esp+3Ch+var_20], 1
.text:00407328                 movsx   edx, al
.text:0040732B                 mov     ebx, 400h
.text:00407330                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:00407334                 mov     [esp+3Ch+String], ebp ; Str
.text:00407337                 call    strchr
.text:0040733C                 test    eax, eax
.text:0040733E                 jnz     short loc_407353
.text:00407340                 mov     ebp, [esp+3Ch+var_18]
.text:00407344                 mov     edi, [esp+3Ch+arg_C]
.text:00407348                 mov     [edi], ebp
.text:0040734A
.text:0040734A loc_40734A:                             ; CODE XREF: sub_407290+55A↓j
.text:0040734A                 mov     eax, [esp+3Ch+var_1C]
.text:0040734E                 or      eax, 2
.text:00407351                 jmp     short loc_407317
.text:00407353 ; ---------------------------------------------------------------------------
.text:00407353
.text:00407353 loc_407353:                             ; CODE XREF: sub_407290+AE↑j
.text:00407353                 mov     [esp+3Ch+EndPtr], 30h ; '0' ; Val
.text:0040735B                 mov     [esp+3Ch+String], ebp ; Str
.text:0040735E                 call    strchr
.text:00407363                 test    eax, eax
.text:00407365                 jz      loc_407858
.text:0040736B                 mov     ecx, [edi]
.text:0040736D                 mov     [esp+3Ch+var_24], ecx
.text:00407371                 movsx   eax, byte ptr [ecx+1]
.text:00407375                 cmp     eax, 44h ; 'D'
.text:00407378                 jz      loc_407822
.text:0040737E                 cmp     eax, 44h ; 'D'
.text:00407381                 jg      loc_407834
.text:00407387                 cmp     eax, 42h ; 'B'
.text:0040738A                 jz      loc_407822
.text:00407390
.text:00407390 loc_407390:                             ; CODE XREF: sub_407290+59F↓j
.text:00407390                                         ; sub_407290+5A7↓j ...
.text:00407390                 mov     ebp, [esp+3Ch+var_24]
.text:00407394                 movsx   eax, byte ptr [ebp+0]
.text:00407398                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040739B                 cmp     eax, 35h
.text:0040739E                 ja      def_4073A4      ; jumptable 004073A4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004073A4                 jmp     ds:jpt_4073A4[eax*4] ; switch jump
.text:004073A4 ; ---------------------------------------------------------------------------
.text:004073AB                 align 4
.text:004073AC jpt_4073A4      dd offset loc_4074E9, offset def_4073A4, offset def_4073A4
.text:004073AC                                         ; DATA XREF: sub_407290+114↑r
.text:004073AC                 dd offset loc_40750D, offset def_4073A4, offset loc_40767D ; jump table for switch statement
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset loc_4076D9, offset def_4073A4, offset loc_407724
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_407569
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset loc_407781, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_4075C5
.text:004073AC                 dd offset loc_407621, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_407484
.text:004073AC                 dd offset loc_4074AA, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset loc_40767D, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_4076D9
.text:004073AC                 dd offset def_4073A4, offset loc_407724, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset def_4073A4
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_407781
.text:004073AC                 dd offset def_4073A4, offset def_4073A4, offset loc_4077EF
.text:00407484 ; ---------------------------------------------------------------------------
.text:00407484
.text:00407484 loc_407484:                             ; CODE XREF: sub_407290+114↑j
.text:00407484                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:00407484                 mov     ecx, [esp+3Ch+var_18] ; jumptable 004073A4 case 98
.text:00407488                 mov     edx, 200h
.text:0040748D                 cmp     ecx, 0FFC00000h
.text:00407493                 jl      short loc_4074DF
.text:00407495                 mov     eax, 7FFFFFFFh
.text:0040749A                 mov     esi, edx
.text:0040749C                 cdq
.text:0040749D                 idiv    esi
.text:0040749F                 cmp     eax, ecx
.text:004074A1                 jl      short loc_4074D0
.text:004074A3                 shl     ecx, 9
.text:004074A6
.text:004074A6 loc_4074A6:                             ; CODE XREF: sub_407290+27B↓j
.text:004074A6                 mov     [esp+3Ch+var_18], ecx
.text:004074AA
.text:004074AA loc_4074AA:                             ; CODE XREF: sub_407290+114↑j
.text:004074AA                                         ; sub_407290+58D↓j
.text:004074AA                                         ; DATA XREF: ...
.text:004074AA                 xor     eax, eax        ; jumptable 004073A4 case 99
.text:004074AC
.text:004074AC loc_4074AC:                             ; CODE XREF: sub_407290+24D↓j
.text:004074AC                                         ; sub_407290+2AF↓j ...
.text:004074AC                 or      [esp+3Ch+var_1C], eax
.text:004074B0                 mov     ebp, [esp+3Ch+var_24]
.text:004074B4                 mov     eax, [esp+3Ch+var_20]
.text:004074B8                 add     ebp, eax
.text:004074BA                 mov     [edi], ebp
.text:004074BC                 cmp     byte ptr [ebp+0], 0
.text:004074C0                 jz      loc_407309
.text:004074C6                 or      [esp+3Ch+var_1C], 2
.text:004074CB                 jmp     loc_407309
.text:004074D0 ; ---------------------------------------------------------------------------
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_407290+211↑j
.text:004074D0                                         ; sub_407290+276↓j ...
.text:004074D0                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004074D8
.text:004074D8 loc_4074D8:                             ; CODE XREF: sub_407290+257↓j
.text:004074D8                 mov     eax, 1
.text:004074DD                 jmp     short loc_4074AC
.text:004074DF ; ---------------------------------------------------------------------------
.text:004074DF
.text:004074DF loc_4074DF:                             ; CODE XREF: sub_407290+203↑j
.text:004074DF                                         ; sub_407290+268↓j ...
.text:004074DF                 mov     [esp+3Ch+var_18], 80000000h
.text:004074E7                 jmp     short loc_4074D8
.text:004074E9 ; ---------------------------------------------------------------------------
.text:004074E9
.text:004074E9 loc_4074E9:                             ; CODE XREF: sub_407290+114↑j
.text:004074E9                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:004074E9                 mov     ecx, [esp+3Ch+var_18] ; jumptable 004073A4 case 66
.text:004074ED                 mov     edx, 400h
.text:004074F2                 cmp     ecx, 0FFE00000h
.text:004074F8                 jl      short loc_4074DF
.text:004074FA                 mov     eax, 7FFFFFFFh
.text:004074FF                 mov     ebp, edx
.text:00407501                 cdq
.text:00407502                 idiv    ebp
.text:00407504                 cmp     eax, ecx
.text:00407506                 jl      short loc_4074D0
.text:00407508                 shl     ecx, 0Ah
.text:0040750B                 jmp     short loc_4074A6
.text:0040750D ; ---------------------------------------------------------------------------
.text:0040750D
.text:0040750D loc_40750D:                             ; CODE XREF: sub_407290+114↑j
.text:0040750D                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:0040750D                 xor     ebp, ebp        ; jumptable 004073A4 case 69
.text:0040750F                 mov     esi, 5
.text:00407514
.text:00407514 loc_407514:                             ; CODE XREF: sub_407290+2AD↓j
.text:00407514                 mov     eax, 80000000h
.text:00407519                 mov     ecx, [esp+3Ch+var_18]
.text:0040751D                 cdq
.text:0040751E                 idiv    ebx
.text:00407520                 cmp     ecx, eax
.text:00407522                 mov     [esp+3Ch+var_28], eax
.text:00407526                 jge     short loc_407544
.text:00407528                 mov     [esp+3Ch+var_18], 80000000h
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: sub_407290+2CC↓j
.text:00407530                 mov     eax, 1
.text:00407535
.text:00407535 loc_407535:                             ; CODE XREF: sub_407290+2D7↓j
.text:00407535                 dec     esi
.text:00407536                 or      ebp, eax
.text:00407538                 cmp     esi, 0FFFFFFFFh
.text:0040753B                 mov     eax, ebp
.text:0040753D                 jnz     short loc_407514
.text:0040753F                 jmp     loc_4074AC
.text:00407544 ; ---------------------------------------------------------------------------
.text:00407544
.text:00407544 loc_407544:                             ; CODE XREF: sub_407290+296↑j
.text:00407544                 mov     eax, 7FFFFFFFh
.text:00407549                 cdq
.text:0040754A                 idiv    ebx
.text:0040754C                 cmp     eax, ecx
.text:0040754E                 mov     [esp+3Ch+var_28], eax
.text:00407552                 jge     short loc_40755E
.text:00407554                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:0040755C                 jmp     short loc_407530
.text:0040755E ; ---------------------------------------------------------------------------
.text:0040755E
.text:0040755E loc_40755E:                             ; CODE XREF: sub_407290+2C2↑j
.text:0040755E                 imul    ecx, ebx
.text:00407561                 xor     eax, eax
.text:00407563                 mov     [esp+3Ch+var_18], ecx
.text:00407567                 jmp     short loc_407535
.text:00407569 ; ---------------------------------------------------------------------------
.text:00407569
.text:00407569 loc_407569:                             ; CODE XREF: sub_407290+114↑j
.text:00407569                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:00407569                 xor     ebp, ebp        ; jumptable 004073A4 case 80
.text:0040756B                 mov     esi, 4
.text:00407570
.text:00407570 loc_407570:                             ; CODE XREF: sub_407290+309↓j
.text:00407570                 mov     eax, 80000000h
.text:00407575                 mov     ecx, [esp+3Ch+var_18]
.text:00407579                 cdq
.text:0040757A                 idiv    ebx
.text:0040757C                 cmp     ecx, eax
.text:0040757E                 mov     [esp+3Ch+var_28], eax
.text:00407582                 jge     short loc_4075A0
.text:00407584                 mov     [esp+3Ch+var_18], 80000000h
.text:0040758C
.text:0040758C loc_40758C:                             ; CODE XREF: sub_407290+328↓j
.text:0040758C                 mov     eax, 1
.text:00407591
.text:00407591 loc_407591:                             ; CODE XREF: sub_407290+333↓j
.text:00407591                 dec     esi
.text:00407592                 or      ebp, eax
.text:00407594                 cmp     esi, 0FFFFFFFFh
.text:00407597                 mov     eax, ebp
.text:00407599                 jnz     short loc_407570
.text:0040759B                 jmp     loc_4074AC
.text:004075A0 ; ---------------------------------------------------------------------------
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_407290+2F2↑j
.text:004075A0                 mov     eax, 7FFFFFFFh
.text:004075A5                 cdq
.text:004075A6                 idiv    ebx
.text:004075A8                 cmp     eax, ecx
.text:004075AA                 mov     [esp+3Ch+var_28], eax
.text:004075AE                 jge     short loc_4075BA
.text:004075B0                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004075B8                 jmp     short loc_40758C
.text:004075BA ; ---------------------------------------------------------------------------
.text:004075BA
.text:004075BA loc_4075BA:                             ; CODE XREF: sub_407290+31E↑j
.text:004075BA                 imul    ecx, ebx
.text:004075BD                 xor     eax, eax
.text:004075BF                 mov     [esp+3Ch+var_18], ecx
.text:004075C3                 jmp     short loc_407591
.text:004075C5 ; ---------------------------------------------------------------------------
.text:004075C5
.text:004075C5 loc_4075C5:                             ; CODE XREF: sub_407290+114↑j
.text:004075C5                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:004075C5                 xor     ebp, ebp        ; jumptable 004073A4 case 89
.text:004075C7                 mov     esi, 7
.text:004075CC
.text:004075CC loc_4075CC:                             ; CODE XREF: sub_407290+365↓j
.text:004075CC                 mov     eax, 80000000h
.text:004075D1                 mov     ecx, [esp+3Ch+var_18]
.text:004075D5                 cdq
.text:004075D6                 idiv    ebx
.text:004075D8                 cmp     ecx, eax
.text:004075DA                 mov     [esp+3Ch+var_28], eax
.text:004075DE                 jge     short loc_4075FC
.text:004075E0                 mov     [esp+3Ch+var_18], 80000000h
.text:004075E8
.text:004075E8 loc_4075E8:                             ; CODE XREF: sub_407290+384↓j
.text:004075E8                 mov     eax, 1
.text:004075ED
.text:004075ED loc_4075ED:                             ; CODE XREF: sub_407290+38F↓j
.text:004075ED                 dec     esi
.text:004075EE                 or      ebp, eax
.text:004075F0                 cmp     esi, 0FFFFFFFFh
.text:004075F3                 mov     eax, ebp
.text:004075F5                 jnz     short loc_4075CC
.text:004075F7                 jmp     loc_4074AC
.text:004075FC ; ---------------------------------------------------------------------------
.text:004075FC
.text:004075FC loc_4075FC:                             ; CODE XREF: sub_407290+34E↑j
.text:004075FC                 mov     eax, 7FFFFFFFh
.text:00407601                 cdq
.text:00407602                 idiv    ebx
.text:00407604                 cmp     eax, ecx
.text:00407606                 mov     [esp+3Ch+var_28], eax
.text:0040760A                 jge     short loc_407616
.text:0040760C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00407614                 jmp     short loc_4075E8
.text:00407616 ; ---------------------------------------------------------------------------
.text:00407616
.text:00407616 loc_407616:                             ; CODE XREF: sub_407290+37A↑j
.text:00407616                 imul    ecx, ebx
.text:00407619                 xor     eax, eax
.text:0040761B                 mov     [esp+3Ch+var_18], ecx
.text:0040761F                 jmp     short loc_4075ED
.text:00407621 ; ---------------------------------------------------------------------------
.text:00407621
.text:00407621 loc_407621:                             ; CODE XREF: sub_407290+114↑j
.text:00407621                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:00407621                 xor     ebp, ebp        ; jumptable 004073A4 case 90
.text:00407623                 mov     esi, 6
.text:00407628
.text:00407628 loc_407628:                             ; CODE XREF: sub_407290+3C1↓j
.text:00407628                 mov     eax, 80000000h
.text:0040762D                 mov     ecx, [esp+3Ch+var_18]
.text:00407631                 cdq
.text:00407632                 idiv    ebx
.text:00407634                 cmp     ecx, eax
.text:00407636                 mov     [esp+3Ch+var_28], eax
.text:0040763A                 jge     short loc_407658
.text:0040763C                 mov     [esp+3Ch+var_18], 80000000h
.text:00407644
.text:00407644 loc_407644:                             ; CODE XREF: sub_407290+3E0↓j
.text:00407644                 mov     eax, 1
.text:00407649
.text:00407649 loc_407649:                             ; CODE XREF: sub_407290+3EB↓j
.text:00407649                 dec     esi
.text:0040764A                 or      ebp, eax
.text:0040764C                 cmp     esi, 0FFFFFFFFh
.text:0040764F                 mov     eax, ebp
.text:00407651                 jnz     short loc_407628
.text:00407653                 jmp     loc_4074AC
.text:00407658 ; ---------------------------------------------------------------------------
.text:00407658
.text:00407658 loc_407658:                             ; CODE XREF: sub_407290+3AA↑j
.text:00407658                 mov     eax, 7FFFFFFFh
.text:0040765D                 cdq
.text:0040765E                 idiv    ebx
.text:00407660                 cmp     eax, ecx
.text:00407662                 mov     [esp+3Ch+var_28], eax
.text:00407666                 jge     short loc_407672
.text:00407668                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00407670                 jmp     short loc_407644
.text:00407672 ; ---------------------------------------------------------------------------
.text:00407672
.text:00407672 loc_407672:                             ; CODE XREF: sub_407290+3D6↑j
.text:00407672                 imul    ecx, ebx
.text:00407675                 xor     eax, eax
.text:00407677                 mov     [esp+3Ch+var_18], ecx
.text:0040767B                 jmp     short loc_407649
.text:0040767D ; ---------------------------------------------------------------------------
.text:0040767D
.text:0040767D loc_40767D:                             ; CODE XREF: sub_407290+114↑j
.text:0040767D                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:0040767D                 xor     ebp, ebp        ; jumptable 004073A4 cases 71,103
.text:0040767F                 mov     esi, 2
.text:00407684
.text:00407684 loc_407684:                             ; CODE XREF: sub_407290+41D↓j
.text:00407684                 mov     eax, 80000000h
.text:00407689                 mov     ecx, [esp+3Ch+var_18]
.text:0040768D                 cdq
.text:0040768E                 idiv    ebx
.text:00407690                 cmp     ecx, eax
.text:00407692                 mov     [esp+3Ch+var_28], eax
.text:00407696                 jge     short loc_4076B4
.text:00407698                 mov     [esp+3Ch+var_18], 80000000h
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_407290+43C↓j
.text:004076A0                 mov     eax, 1
.text:004076A5
.text:004076A5 loc_4076A5:                             ; CODE XREF: sub_407290+447↓j
.text:004076A5                 dec     esi
.text:004076A6                 or      ebp, eax
.text:004076A8                 cmp     esi, 0FFFFFFFFh
.text:004076AB                 mov     eax, ebp
.text:004076AD                 jnz     short loc_407684
.text:004076AF                 jmp     loc_4074AC
.text:004076B4 ; ---------------------------------------------------------------------------
.text:004076B4
.text:004076B4 loc_4076B4:                             ; CODE XREF: sub_407290+406↑j
.text:004076B4                 mov     eax, 7FFFFFFFh
.text:004076B9                 cdq
.text:004076BA                 idiv    ebx
.text:004076BC                 cmp     eax, ecx
.text:004076BE                 mov     [esp+3Ch+var_28], eax
.text:004076C2                 jge     short loc_4076CE
.text:004076C4                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004076CC                 jmp     short loc_4076A0
.text:004076CE ; ---------------------------------------------------------------------------
.text:004076CE
.text:004076CE loc_4076CE:                             ; CODE XREF: sub_407290+432↑j
.text:004076CE                 imul    ecx, ebx
.text:004076D1                 xor     eax, eax
.text:004076D3                 mov     [esp+3Ch+var_18], ecx
.text:004076D7                 jmp     short loc_4076A5
.text:004076D9 ; ---------------------------------------------------------------------------
.text:004076D9
.text:004076D9 loc_4076D9:                             ; CODE XREF: sub_407290+114↑j
.text:004076D9                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:004076D9                 mov     eax, 80000000h  ; jumptable 004073A4 cases 75,107
.text:004076DE                 mov     ecx, [esp+3Ch+var_18]
.text:004076E2                 lea     ebp, [esp+3Ch+var_18]
.text:004076E6                 cdq
.text:004076E7                 mov     esi, 7FFFFFFFh
.text:004076EC                 idiv    ebx
.text:004076EE                 cmp     ecx, eax
.text:004076F0                 jge     short loc_407708
.text:004076F2                 mov     [esp+3Ch+var_18], 80000000h
.text:004076FA
.text:004076FA loc_4076FA:                             ; CODE XREF: sub_407290+488↓j
.text:004076FA                 mov     edx, 1
.text:004076FF
.text:004076FF loc_4076FF:                             ; CODE XREF: sub_407290+492↓j
.text:004076FF                 xor     eax, eax
.text:00407701                 or      eax, edx
.text:00407703                 jmp     loc_4074AC
.text:00407708 ; ---------------------------------------------------------------------------
.text:00407708
.text:00407708 loc_407708:                             ; CODE XREF: sub_407290+460↑j
.text:00407708                 mov     eax, esi
.text:0040770A                 cdq
.text:0040770B                 idiv    ebx
.text:0040770D                 cmp     eax, ecx
.text:0040770F                 jge     short loc_40771A
.text:00407711                 mov     dword ptr [ebp+0], 7FFFFFFFh
.text:00407718                 jmp     short loc_4076FA
.text:0040771A ; ---------------------------------------------------------------------------
.text:0040771A
.text:0040771A loc_40771A:                             ; CODE XREF: sub_407290+47F↑j
.text:0040771A                 imul    ecx, ebx
.text:0040771D                 xor     edx, edx
.text:0040771F                 mov     [ebp+0], ecx
.text:00407722                 jmp     short loc_4076FF
.text:00407724 ; ---------------------------------------------------------------------------
.text:00407724
.text:00407724 loc_407724:                             ; CODE XREF: sub_407290+114↑j
.text:00407724                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:00407724                 xor     ebp, ebp        ; jumptable 004073A4 cases 77,109
.text:00407726                 mov     esi, 1
.text:0040772B
.text:0040772B loc_40772B:                             ; CODE XREF: sub_407290+4CA↓j
.text:0040772B                 mov     eax, 80000000h
.text:00407730                 mov     ecx, [esp+3Ch+var_18]
.text:00407734                 cdq
.text:00407735                 idiv    ebx
.text:00407737                 cmp     ecx, eax
.text:00407739                 mov     [esp+3Ch+var_28], eax
.text:0040773D                 jge     short loc_40775C
.text:0040773F                 mov     [esp+3Ch+var_18], 80000000h
.text:00407747
.text:00407747 loc_407747:                             ; CODE XREF: sub_407290+4E4↓j
.text:00407747                 mov     eax, 1
.text:0040774C
.text:0040774C loc_40774C:                             ; CODE XREF: sub_407290+4EF↓j
.text:0040774C                 dec     esi
.text:0040774D                 or      ebp, eax
.text:0040774F                 cmp     esi, 0FFFFFFFFh
.text:00407752                 mov     eax, ebp
.text:00407754                 jz      loc_4074AC
.text:0040775A                 jmp     short loc_40772B
.text:0040775C ; ---------------------------------------------------------------------------
.text:0040775C
.text:0040775C loc_40775C:                             ; CODE XREF: sub_407290+4AD↑j
.text:0040775C                 mov     eax, 7FFFFFFFh
.text:00407761                 cdq
.text:00407762                 idiv    ebx
.text:00407764                 cmp     eax, ecx
.text:00407766                 mov     [esp+3Ch+var_28], eax
.text:0040776A                 jge     short loc_407776
.text:0040776C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00407774                 jmp     short loc_407747
.text:00407776 ; ---------------------------------------------------------------------------
.text:00407776
.text:00407776 loc_407776:                             ; CODE XREF: sub_407290+4DA↑j
.text:00407776                 imul    ecx, ebx
.text:00407779                 xor     eax, eax
.text:0040777B                 mov     [esp+3Ch+var_18], ecx
.text:0040777F                 jmp     short loc_40774C
.text:00407781 ; ---------------------------------------------------------------------------
.text:00407781
.text:00407781 loc_407781:                             ; CODE XREF: sub_407290+114↑j
.text:00407781                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:00407781                 xor     ebp, ebp        ; jumptable 004073A4 cases 84,116
.text:00407783                 mov     esi, 3
.text:00407788
.text:00407788 loc_407788:                             ; CODE XREF: sub_407290+521↓j
.text:00407788                 mov     eax, 80000000h
.text:0040778D                 mov     ecx, [esp+3Ch+var_18]
.text:00407791                 cdq
.text:00407792                 idiv    ebx
.text:00407794                 cmp     ecx, eax
.text:00407796                 mov     [esp+3Ch+var_28], eax
.text:0040779A                 jge     short loc_4077B8
.text:0040779C                 mov     [esp+3Ch+var_18], 80000000h
.text:004077A4
.text:004077A4 loc_4077A4:                             ; CODE XREF: sub_407290+540↓j
.text:004077A4                 mov     eax, 1
.text:004077A9
.text:004077A9 loc_4077A9:                             ; CODE XREF: sub_407290+54B↓j
.text:004077A9                 dec     esi
.text:004077AA                 or      ebp, eax
.text:004077AC                 cmp     esi, 0FFFFFFFFh
.text:004077AF                 mov     eax, ebp
.text:004077B1                 jnz     short loc_407788
.text:004077B3                 jmp     loc_4074AC
.text:004077B8 ; ---------------------------------------------------------------------------
.text:004077B8
.text:004077B8 loc_4077B8:                             ; CODE XREF: sub_407290+50A↑j
.text:004077B8                 mov     eax, 7FFFFFFFh
.text:004077BD                 cdq
.text:004077BE                 idiv    ebx
.text:004077C0                 cmp     eax, ecx
.text:004077C2                 mov     [esp+3Ch+var_28], eax
.text:004077C6                 jge     short loc_4077D2
.text:004077C8                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004077D0                 jmp     short loc_4077A4
.text:004077D2 ; ---------------------------------------------------------------------------
.text:004077D2
.text:004077D2 loc_4077D2:                             ; CODE XREF: sub_407290+536↑j
.text:004077D2                 imul    ecx, ebx
.text:004077D5                 xor     eax, eax
.text:004077D7                 mov     [esp+3Ch+var_18], ecx
.text:004077DB                 jmp     short loc_4077A9
.text:004077DB ; ---------------------------------------------------------------------------
.text:004077DD                 align 10h
.text:004077E0
.text:004077E0 def_4073A4:                             ; CODE XREF: sub_407290+10E↑j
.text:004077E0                                         ; sub_407290+114↑j
.text:004077E0                                         ; DATA XREF: ...
.text:004077E0                 mov     ecx, [esp+3Ch+var_18] ; jumptable 004073A4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004077E4                 mov     edi, [esp+3Ch+arg_C]
.text:004077E8                 mov     [edi], ecx
.text:004077EA                 jmp     loc_40734A
.text:004077EF ; ---------------------------------------------------------------------------
.text:004077EF
.text:004077EF loc_4077EF:                             ; CODE XREF: sub_407290+114↑j
.text:004077EF                                         ; DATA XREF: sub_407290:jpt_4073A4↑o
.text:004077EF                 mov     ecx, [esp+3Ch+var_18] ; jumptable 004073A4 case 119
.text:004077F3                 mov     edx, 2
.text:004077F8                 cmp     ecx, 0C0000000h
.text:004077FE                 jl      loc_4074DF
.text:00407804                 mov     eax, 7FFFFFFFh
.text:00407809                 mov     esi, edx
.text:0040780B                 cdq
.text:0040780C                 idiv    esi
.text:0040780E                 cmp     eax, ecx
.text:00407810                 jl      loc_4074D0
.text:00407816                 lea     ebx, [ecx+ecx]
.text:00407819                 mov     [esp+3Ch+var_18], ebx
.text:0040781D                 jmp     loc_4074AA      ; jumptable 004073A4 case 99
.text:00407822 ; ---------------------------------------------------------------------------
.text:00407822
.text:00407822 loc_407822:                             ; CODE XREF: sub_407290+E8↑j
.text:00407822                                         ; sub_407290+FA↑j
.text:00407822                 mov     [esp+3Ch+var_20], 2
.text:0040782A                 mov     ebx, 3E8h
.text:0040782F                 jmp     loc_407390
.text:00407834 ; ---------------------------------------------------------------------------
.text:00407834
.text:00407834 loc_407834:                             ; CODE XREF: sub_407290+F1↑j
.text:00407834                 cmp     eax, 69h ; 'i'
.text:00407837                 jnz     loc_407390
.text:0040783D                 mov     eax, [esp+3Ch+var_24]
.text:00407841                 cmp     byte ptr [eax+2], 42h ; 'B'
.text:00407845                 jnz     loc_407390
.text:0040784B                 mov     [esp+3Ch+var_20], 3
.text:00407853                 jmp     loc_407390
.text:00407858 ; ---------------------------------------------------------------------------
.text:00407858
.text:00407858 loc_407858:                             ; CODE XREF: sub_407290+D5↑j
.text:00407858                 mov     esi, [edi]
.text:0040785A                 mov     [esp+3Ch+var_24], esi
.text:0040785E                 jmp     loc_407390
.text:00407863 ; ---------------------------------------------------------------------------
.text:00407863
.text:00407863 loc_407863:                             ; CODE XREF: sub_407290+6A↑j
.text:00407863                 mov     ebx, [esp+3Ch+var_18]
.text:00407867                 mov     ecx, [esp+3Ch+arg_C]
.text:0040786B                 mov     [ecx], ebx
.text:0040786D                 jmp     loc_407313
.text:00407872 ; ---------------------------------------------------------------------------
.text:00407872
.text:00407872 loc_407872:                             ; CODE XREF: sub_407290+62↑j
.text:00407872                 call    _errno
.text:00407877                 cmp     dword ptr [eax], 22h ; '"'
.text:0040787A                 jnz     short loc_407890
.text:0040787C                 mov     [esp+3Ch+var_1C], 1
.text:00407884                 jmp     loc_4072F8
.text:00407884 ; ---------------------------------------------------------------------------
.text:00407889                 align 10h
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_407290+5EA↑j
.text:00407890                                         ; sub_407290+612↓j ...
.text:00407890                 mov     eax, 4
.text:00407895                 jmp     loc_407317
.text:00407895 ; ---------------------------------------------------------------------------
.text:0040789A                 align 10h
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: sub_407290+53↑j
.text:004078A0                 test    ebp, ebp
.text:004078A2                 jz      short loc_407890
.text:004078A4                 movzx   eax, byte ptr [eax]
.text:004078A7                 test    al, al
.text:004078A9                 jz      short loc_407890
.text:004078AB                 mov     [esp+3Ch+String], ebp ; Str
.text:004078AE                 movsx   edx, al
.text:004078B1                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:004078B5                 call    strchr
.text:004078BA                 test    eax, eax
.text:004078BC                 jz      short loc_407890
.text:004078BE                 mov     [esp+3Ch+var_18], 1
.text:004078C6                 jmp     loc_4072F8
.text:004078C6 ; ---------------------------------------------------------------------------
.text:004078CB                 align 10h
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_407290+2A↑j
.text:004078D0                 lea     edi, [esp+3Ch+var_14]
.text:004078D4                 jmp     loc_4072C0
.text:004078D9 ; ---------------------------------------------------------------------------
.text:004078D9
.text:004078D9 loc_4078D9:                             ; CODE XREF: sub_407290:loc_4072AE↑j
.text:004078D9                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004078E1                 mov     [esp+3Ch+EndPtr], offset loc_407220
.text:004078E9                 mov     [esp+3Ch+String], offset loc_407260
.text:004078F0                 call    _assert
.text:004078F0 sub_407290      endp
.text:004078F0
.text:004078F0 ; ---------------------------------------------------------------------------
.text:004078F5                 align 10h
.text:00407900 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00407900                                         ; DATA XREF: .data:Buffer↓o
.text:00407932 ; const char aSSS[12]
.text:00407932 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_407BF0+50↓o
.text:0040793E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040794E                 align 20h
.text:00407960
.text:00407960 ; =============== S U B R O U T I N E =======================================
.text:00407960
.text:00407960
.text:00407960 sub_407960      proc near               ; DATA XREF: sub_407BF0+100↓o
.text:00407960                 push    esp
.text:00407961                 push    69207369h
.text:00407966                 jnb     short loc_407988
.text:00407968                 db      66h
.text:00407968                 jb      short near ptr 79D0h
.text:0040796B                 and     gs:[ebx+6Fh], dh
.text:0040796F                 db      66h
.text:0040796F                 jz      short near ptr 79E9h
.text:00407972                 popa
.text:00407973                 jb      short loc_4079DA
.text:00407975                 cmp     esp, [eax]
.text:00407977                 jnb     short near ptr loc_4079DC+2
.text:00407979                 and     gs:[eax+ebp*2+65h], dh
.text:0040797E                 and     [ebx+6Fh], dh
.text:00407981                 jnz     short loc_4079F5
.text:00407983                 arpl    [ebp+20h], sp
.text:00407986                 outsw
.text:00407988
.text:00407988 loc_407988:                             ; CODE XREF: sub_407960+6↑j
.text:00407988                 jb      short loc_4079AA
.text:0040798A                 arpl    [edi+70h], bp
.text:0040798D                 jns     short loc_4079F8
.text:0040798F                 outsb
.text:00407990                 and     [bp+di+6Fh], ah
.text:00407994                 outsb
.text:00407995                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040799E                 and     [eax+ebp*2+65h], dl
.text:004079A2                 jb      short near ptr loc_407A08+1
.text:004079A4                 and     [ecx+73h], ch
.text:004079A7                 and     [esi+4Fh], cl
.text:004079AA
.text:004079AA loc_4079AA:                             ; CODE XREF: sub_407960:loc_407988↑j
.text:004079AA                 or      dh, [edi+61h]
.text:004079AD                 jb      short loc_407A21
.text:004079AF                 popa
.text:004079B0                 outsb
.text:004079B1                 jz      short loc_407A2C
.text:004079B3                 cmp     esp, [eax]
.text:004079B5                 outsb
.text:004079B6                 outsd
.text:004079B7                 jz      short loc_4079D9
.text:004079B9                 db      65h
.text:004079B9                 jbe     short loc_407A21
.text:004079BC                 outsb
.text:004079BD                 and     [esi+6Fh], ah
.text:004079C0                 jb      short near ptr loc_4079E0+2
.text:004079C2                 dec     ebp
.text:004079C3                 inc     ebp
.text:004079C4                 push    edx
.text:004079C5                 inc     ebx
.text:004079C6                 dec     eax
.text:004079C7                 inc     ecx
.text:004079C8                 dec     esi
.text:004079C9                 push    esp
.text:004079CA                 inc     ecx
.text:004079CB                 inc     edx
.text:004079CC                 dec     ecx
.text:004079CD                 dec     esp
.text:004079CE                 dec     ecx
.text:004079CF                 push    esp
.text:004079D0                 pop     ecx
.text:004079D1                 and     [edi+72h], ch
.text:004079D4                 and     [esi+49h], al
.text:004079D7                 push    esp
.text:004079D8                 dec     esi
.text:004079D9
.text:004079D9 loc_4079D9:                             ; CODE XREF: sub_407960+57↑j
.text:004079D9                 inc     ebp
.text:004079DA
.text:004079DA loc_4079DA:                             ; CODE XREF: sub_407960+13↑j
.text:004079DA                 push    ebx
.text:004079DB                 push    ebx
.text:004079DC
.text:004079DC loc_4079DC:                             ; CODE XREF: sub_407960+17↑j
.text:004079DC                 and     [esi+4Fh], al
.text:004079DF                 push    edx
.text:004079E0
.text:004079E0 loc_4079E0:                             ; CODE XREF: sub_407960+60↑j
.text:004079E0                 and     [ecx+20h], al
.text:004079E3                 push    eax
.text:004079E4                 inc     ecx
.text:004079E5                 push    edx
.text:004079E6                 push    esp
.text:004079E7                 dec     ecx
.text:004079E8                 inc     ebx
.text:004079E9                 push    ebp
.text:004079EA                 dec     esp
.text:004079EB                 inc     ecx
.text:004079EC                 push    edx
.text:004079ED                 and     [eax+55h], dl
.text:004079F0                 push    edx
.text:004079F1                 push    eax
.text:004079F2                 dec     edi
.text:004079F3                 push    ebx
.text:004079F4                 inc     ebp
.text:004079F5
.text:004079F5 loc_4079F5:                             ; CODE XREF: sub_407960+21↑j
.text:004079F5                 or      al, cs:[eax]
.text:004079F8
.text:004079F8 loc_4079F8:                             ; CODE XREF: sub_407960+2D↑j
.text:004079F8                                         ; DATA XREF: sub_407BF0:loc_407D31↓o
.text:004079F8                 push    edi
.text:004079F9                 jb      short near ptr loc_407A63+1
.text:004079FB                 jz      short near ptr loc_407A70+1
.text:004079FD                 outs    dx, byte ptr gs:[esi]
.text:004079FF                 and     [edx+79h], ah
.text:00407A02                 and     ds:6E612073h, ah
.text:00407A08
.text:00407A08 loc_407A08:                             ; CODE XREF: sub_407960+42↑j
.text:00407A08                 and     fs:0A2E73h, ah
.text:00407A0F
.text:00407A0F loc_407A0F:                             ; DATA XREF: sub_407BF0:loc_407D3D↓o
.text:00407A0F                 push    edi
.text:00407A10                 jb      short near ptr loc_407A7A+1
.text:00407A12                 jz      short loc_407A88
.text:00407A14                 outs    dx, byte ptr gs:[esi]
.text:00407A16                 and     [edx+79h], ah
.text:00407A19                 and     ds:25202C73h, ah
.text:00407A1F                 jnb     short near ptr loc_407A4A+3
.text:00407A21
.text:00407A21 loc_407A21:                             ; CODE XREF: sub_407960+4D↑j
.text:00407A21                                         ; sub_407960+59↑j
.text:00407A21                 and     [ecx+6Eh], ah
.text:00407A24                 and     fs:0A2E73h, ah
.text:00407A2B                 nop
.text:00407A2C
.text:00407A2C loc_407A2C:                             ; CODE XREF: sub_407960+51↑j
.text:00407A2C                 nop
.text:00407A2D                 nop
.text:00407A2E                 nop
.text:00407A2F                 nop
.text:00407A30                 nop
.text:00407A31                 nop
.text:00407A32                 nop
.text:00407A33                 nop
.text:00407A34                 nop
.text:00407A35                 nop
.text:00407A36                 nop
.text:00407A37                 nop
.text:00407A38                 nop
.text:00407A39                 nop
.text:00407A3A                 nop
.text:00407A3B                 nop
.text:00407A3C                 nop
.text:00407A3D                 nop
.text:00407A3E                 nop
.text:00407A3F                 nop
.text:00407A3F sub_407960      endp ; sp-analysis failed
.text:00407A3F
.text:00407A40
.text:00407A40 ; =============== S U B R O U T I N E =======================================
.text:00407A40
.text:00407A40
.text:00407A40 sub_407A40      proc near               ; DATA XREF: sub_407BF0:loc_407D49↓o
.text:00407A40                 push    edi
.text:00407A41                 jb      short near ptr loc_407AAA+2
.text:00407A43                 jz      short near ptr loc_407AB8+1
.text:00407A45                 outs    dx, byte ptr gs:[esi]
.text:00407A47                 and     [edx+79h], ah
.text:00407A4A
.text:00407A4A loc_407A4A:                             ; CODE XREF: sub_407960+BF↑j
.text:00407A4A                 and     ds:25202C73h, ah
.text:00407A50                 jnb     short near ptr loc_407A7D+1
.text:00407A52                 and     ds:610A2C73h, ah
.text:00407A58                 outsb
.text:00407A59                 and     fs:0A2E73h, ah
.text:00407A60
.text:00407A60 loc_407A60:                             ; DATA XREF: sub_407BF0:loc_407D55↓o
.text:00407A60                 push    edi
.text:00407A61                 jb      short loc_407ACC
.text:00407A63
.text:00407A63 loc_407A63:                             ; CODE XREF: sub_407960+99↑j
.text:00407A63                 jz      short loc_407AD9
.text:00407A65                 outs    dx, byte ptr gs:[esi]
.text:00407A67                 and     [edx+79h], ah
.text:00407A6A                 and     ds:25202C73h, ah
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: sub_407960+9B↑j
.text:00407A70                 jnb     short loc_407A9E
.text:00407A72                 and     ds:250A2C73h, ah
.text:00407A78                 jnb     short near ptr loc_407AA5+1
.text:00407A7A
.text:00407A7A loc_407A7A:                             ; CODE XREF: sub_407960+B0↑j
.text:00407A7A                 and     [ecx+6Eh], ah
.text:00407A7D
.text:00407A7D loc_407A7D:                             ; CODE XREF: sub_407A40+10↑j
.text:00407A7D                 and     fs:0A2E73h, ah
.text:00407A84                 nop
.text:00407A85                 nop
.text:00407A86                 nop
.text:00407A87                 nop
.text:00407A88
.text:00407A88 loc_407A88:                             ; CODE XREF: sub_407960+B2↑j
.text:00407A88                 nop
.text:00407A89                 nop
.text:00407A8A                 nop
.text:00407A8B                 nop
.text:00407A8C                 nop
.text:00407A8D                 nop
.text:00407A8E                 nop
.text:00407A8F                 nop
.text:00407A90                 nop
.text:00407A91                 nop
.text:00407A92                 nop
.text:00407A93                 nop
.text:00407A94                 nop
.text:00407A95                 nop
.text:00407A96                 nop
.text:00407A97                 nop
.text:00407A98                 nop
.text:00407A99                 nop
.text:00407A9A                 nop
.text:00407A9B                 nop
.text:00407A9C                 nop
.text:00407A9D                 nop
.text:00407A9E
.text:00407A9E loc_407A9E:                             ; CODE XREF: sub_407A40:loc_407A70↑j
.text:00407A9E                 nop
.text:00407A9F                 nop
.text:00407A9F sub_407A40      endp ; sp-analysis failed
.text:00407A9F
.text:00407AA0
.text:00407AA0 ; =============== S U B R O U T I N E =======================================
.text:00407AA0
.text:00407AA0
.text:00407AA0 sub_407AA0      proc near               ; DATA XREF: sub_407BF0:loc_407D61↓o
.text:00407AA0                 push    edi
.text:00407AA1                 jb      short loc_407B0C
.text:00407AA3                 jz      short loc_407B19
.text:00407AA5
.text:00407AA5 loc_407AA5:                             ; CODE XREF: sub_407A40+38↑j
.text:00407AA5                 outs    dx, byte ptr gs:[esi]
.text:00407AA7                 and     [edx+79h], ah
.text:00407AAA
.text:00407AAA loc_407AAA:                             ; CODE XREF: sub_407A40+1↑j
.text:00407AAA                 and     ds:25202C73h, ah
.text:00407AB0                 jnb     short loc_407ADE
.text:00407AB2                 and     ds:250A2C73h, ah
.text:00407AB8
.text:00407AB8 loc_407AB8:                             ; CODE XREF: sub_407A40+3↑j
.text:00407AB8                 jnb     short near ptr loc_407AE5+1
.text:00407ABA                 and     ds:61202C73h, ah
.text:00407AC0                 outsb
.text:00407AC1                 and     fs:0A2E73h, ah
.text:00407AC8                 nop
.text:00407AC9                 nop
.text:00407ACA                 nop
.text:00407ACB                 nop
.text:00407ACC
.text:00407ACC loc_407ACC:                             ; CODE XREF: sub_407A40+21↑j
.text:00407ACC                 nop
.text:00407ACD                 nop
.text:00407ACE                 nop
.text:00407ACF                 nop
.text:00407AD0                 nop
.text:00407AD1                 nop
.text:00407AD2                 nop
.text:00407AD3                 nop
.text:00407AD4                 nop
.text:00407AD5                 nop
.text:00407AD6                 nop
.text:00407AD7                 nop
.text:00407AD8                 nop
.text:00407AD9
.text:00407AD9 loc_407AD9:                             ; CODE XREF: sub_407A40:loc_407A63↑j
.text:00407AD9                 nop
.text:00407ADA                 nop
.text:00407ADB                 nop
.text:00407ADC                 nop
.text:00407ADD                 nop
.text:00407ADE
.text:00407ADE loc_407ADE:                             ; CODE XREF: sub_407AA0+10↑j
.text:00407ADE                 nop
.text:00407ADF                 nop
.text:00407ADF sub_407AA0      endp ; sp-analysis failed
.text:00407ADF
.text:00407AE0
.text:00407AE0 ; =============== S U B R O U T I N E =======================================
.text:00407AE0
.text:00407AE0
.text:00407AE0 sub_407AE0      proc near               ; DATA XREF: sub_407BF0:loc_407D6D↓o
.text:00407AE0                 push    edi
.text:00407AE1                 jb      short near ptr loc_407B49+3
.text:00407AE3                 jz      short loc_407B59
.text:00407AE5
.text:00407AE5 loc_407AE5:                             ; CODE XREF: sub_407AA0:loc_407AB8↑j
.text:00407AE5                 outs    dx, byte ptr gs:[esi]
.text:00407AE7                 and     [edx+79h], ah
.text:00407AEA                 and     ds:25202C73h, ah
.text:00407AF0                 jnb     short loc_407B1E
.text:00407AF2                 and     ds:250A2C73h, ah
.text:00407AF8                 jnb     short near ptr loc_407B25+1
.text:00407AFA                 and     ds:25202C73h, ah
.text:00407B00                 jnb     short near ptr loc_407B2A+4
.text:00407B02                 and     [ecx+6Eh], ah
.text:00407B05                 and     fs:0A2E73h, ah
.text:00407B0C
.text:00407B0C loc_407B0C:                             ; CODE XREF: sub_407AA0+1↑j
.text:00407B0C                 nop
.text:00407B0D                 nop
.text:00407B0E                 nop
.text:00407B0F                 nop
.text:00407B10                 nop
.text:00407B11                 nop
.text:00407B12                 nop
.text:00407B13                 nop
.text:00407B14                 nop
.text:00407B15                 nop
.text:00407B16                 nop
.text:00407B17                 nop
.text:00407B18                 nop
.text:00407B19
.text:00407B19 loc_407B19:                             ; CODE XREF: sub_407AA0+3↑j
.text:00407B19                 nop
.text:00407B1A                 nop
.text:00407B1B                 nop
.text:00407B1C                 nop
.text:00407B1D                 nop
.text:00407B1E
.text:00407B1E loc_407B1E:                             ; CODE XREF: sub_407AE0+10↑j
.text:00407B1E                 nop
.text:00407B1F                 nop
.text:00407B1F sub_407AE0      endp ; sp-analysis failed
.text:00407B1F
.text:00407B20
.text:00407B20 ; =============== S U B R O U T I N E =======================================
.text:00407B20
.text:00407B20
.text:00407B20 sub_407B20      proc near               ; DATA XREF: sub_407BF0:loc_407D79↓o
.text:00407B20                 push    edi
.text:00407B21                 jb      short near ptr loc_407B8A+2
.text:00407B23                 jz      short near ptr loc_407B94+5
.text:00407B25
.text:00407B25 loc_407B25:                             ; CODE XREF: sub_407AE0+18↑j
.text:00407B25                 outs    dx, byte ptr gs:[esi]
.text:00407B27                 and     [edx+79h], ah
.text:00407B2A
.text:00407B2A loc_407B2A:                             ; CODE XREF: sub_407AE0+20↑j
.text:00407B2A                 and     ds:25202C73h, ah
.text:00407B30                 jnb     short loc_407B5E
.text:00407B32                 and     ds:250A2C73h, ah
.text:00407B38                 jnb     short near ptr loc_407B65+1
.text:00407B3A                 and     ds:25202C73h, ah
.text:00407B40                 jnb     short near ptr loc_407B6A+4
.text:00407B42                 and     ds:610A2C73h, ah
.text:00407B48                 outsb
.text:00407B49
.text:00407B49 loc_407B49:                             ; CODE XREF: sub_407AE0+1↑j
.text:00407B49                 and     fs:0A2E73h, ah
.text:00407B50                 nop
.text:00407B51                 nop
.text:00407B52                 nop
.text:00407B53                 nop
.text:00407B54                 nop
.text:00407B55                 nop
.text:00407B56                 nop
.text:00407B57                 nop
.text:00407B58                 nop
.text:00407B59
.text:00407B59 loc_407B59:                             ; CODE XREF: sub_407AE0+3↑j
.text:00407B59                 nop
.text:00407B5A                 nop
.text:00407B5B                 nop
.text:00407B5C                 nop
.text:00407B5D                 nop
.text:00407B5E
.text:00407B5E loc_407B5E:                             ; CODE XREF: sub_407B20+10↑j
.text:00407B5E                 nop
.text:00407B5F                 nop
.text:00407B5F sub_407B20      endp ; sp-analysis failed
.text:00407B5F
.text:00407B60
.text:00407B60 ; =============== S U B R O U T I N E =======================================
.text:00407B60
.text:00407B60
.text:00407B60 sub_407B60      proc near               ; DATA XREF: sub_407BF0:loc_407D85↓o
.text:00407B60                 push    edi
.text:00407B61                 jb      short near ptr loc_407BCA+2
.text:00407B63                 jz      short near ptr loc_407BD5+4
.text:00407B65
.text:00407B65 loc_407B65:                             ; CODE XREF: sub_407B20+18↑j
.text:00407B65                 outs    dx, byte ptr gs:[esi]
.text:00407B67                 and     [edx+79h], ah
.text:00407B6A
.text:00407B6A loc_407B6A:                             ; CODE XREF: sub_407B20+20↑j
.text:00407B6A                 and     ds:25202C73h, ah
.text:00407B70                 jnb     short near ptr loc_407B9A+4
.text:00407B72                 and     ds:250A2C73h, ah
.text:00407B78                 jnb     short near ptr loc_407BA5+1
.text:00407B7A                 and     ds:25202C73h, ah
.text:00407B80                 jnb     short near ptr loc_407BAA+4
.text:00407B82                 and     ds:250A2C73h, ah
.text:00407B88                 jnb     short near ptr loc_407BB2+4
.text:00407B8A
.text:00407B8A loc_407B8A:                             ; CODE XREF: sub_407B20+1↑j
.text:00407B8A                 and     [ecx+6Eh], ah
.text:00407B8D                 and     fs:0A2E73h, ah
.text:00407B94
.text:00407B94 loc_407B94:                             ; CODE XREF: sub_407B20+3↑j
.text:00407B94                 lea     esi, [esi+0]
.text:00407B9A
.text:00407B9A loc_407B9A:                             ; CODE XREF: sub_407B60+10↑j
.text:00407B9A                 lea     edi, [edi+0]
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; DATA XREF: sub_407BF0:def_407C5D↓o
.text:00407BA0                 push    edi
.text:00407BA1                 jb      short near ptr loc_407C0B+1
.text:00407BA3                 jz      short near ptr loc_407C18+1
.text:00407BA5
.text:00407BA5 loc_407BA5:                             ; CODE XREF: sub_407B60+18↑j
.text:00407BA5                 outs    dx, byte ptr gs:[esi]
.text:00407BA7                 and     [edx+79h], ah
.text:00407BAA
.text:00407BAA loc_407BAA:                             ; CODE XREF: sub_407B60+20↑j
.text:00407BAA                 and     ds:25202C73h, ah
.text:00407BB0                 jnb     short near ptr loc_407BDC+2
.text:00407BB2
.text:00407BB2 loc_407BB2:                             ; CODE XREF: sub_407B60+28↑j
.text:00407BB2                 and     ds:250A2C73h, ah
.text:00407BB8                 jnb     short near ptr loc_407BE3+3
.text:00407BBA                 and     ds:25202C73h, ah
.text:00407BC0                 jnb     short near ptr loc_407BE9+5
.text:00407BC2                 and     ds:250A2C73h, ah
.text:00407BC8                 jnb     short near ptr loc_407BF4+2
.text:00407BCA
.text:00407BCA loc_407BCA:                             ; CODE XREF: sub_407B60+1↑j
.text:00407BCA                 and     ds:61202C73h, ah
.text:00407BD0                 outsb
.text:00407BD1                 and     fs:[edi+74h], ch
.text:00407BD5
.text:00407BD5 loc_407BD5:                             ; CODE XREF: sub_407B60+3↑j
.text:00407BD5                 push    2E737265h
.text:00407BDA                 or      al, [eax]
.text:00407BDC
.text:00407BDC loc_407BDC:                             ; CODE XREF: sub_407B60+50↑j
.text:00407BDC                                         ; DATA XREF: sub_407BF0+1B5↓o
.text:00407BDC                 and     eax, 73252073h
.text:00407BE1                 or      al, [eax]
.text:00407BE3
.text:00407BE3 loc_407BE3:                             ; CODE XREF: sub_407B60+58↑j
.text:00407BE3                 lea     esi, [esi+0]
.text:00407BE9
.text:00407BE9 loc_407BE9:                             ; CODE XREF: sub_407B60+60↑j
.text:00407BE9                 lea     edi, [edi+0]
.text:00407BE9 sub_407B60      endp ; sp-analysis failed
.text:00407BE9
.text:00407BF0
.text:00407BF0 ; =============== S U B R O U T I N E =======================================
.text:00407BF0
.text:00407BF0
.text:00407BF0 ; int __cdecl sub_407BF0(FILE *, FILE *, int, int, va_list)
.text:00407BF0 sub_407BF0      proc near               ; CODE XREF: sub_407DC0+2A↓p
.text:00407BF0
.text:00407BF0 Stream          = dword ptr -2Ch
.text:00407BF0 Format          = dword ptr -28h
.text:00407BF0 ArgList         = dword ptr -24h
.text:00407BF0 var_20          = dword ptr -20h
.text:00407BF0 var_1C          = dword ptr -1Ch
.text:00407BF0 var_14          = dword ptr -14h
.text:00407BF0 arg_0           = dword ptr  4
.text:00407BF0 arg_4           = dword ptr  8
.text:00407BF0 arg_8           = dword ptr  0Ch
.text:00407BF0 arg_C           = dword ptr  10h
.text:00407BF0 arg_10          = dword ptr  14h
.text:00407BF0
.text:00407BF0                 push    ebp
.text:00407BF1                 push    edi
.text:00407BF2                 push    esi
.text:00407BF3                 push    ebx
.text:00407BF4
.text:00407BF4 loc_407BF4:                             ; CODE XREF: sub_407B60+68↑j
.text:00407BF4                 sub     esp, 1Ch
.text:00407BF7                 xor     ebx, ebx
.text:00407BF9                 mov     edi, [esp+2Ch+arg_10]
.text:00407BFD                 mov     edx, [esp+2Ch+arg_8]
.text:00407C01                 mov     esi, [esp+2Ch+arg_0]
.text:00407C05                 mov     eax, [edi]
.text:00407C07                 mov     ecx, [esp+2Ch+arg_4]
.text:00407C0B
.text:00407C0B loc_407C0B:                             ; CODE XREF: sub_407B60+41↑j
.text:00407C0B                 mov     [esp+2Ch+var_14], edx
.text:00407C0F                 mov     ebp, [esp+2Ch+arg_C]
.text:00407C13                 lea     edx, [edi+4]
.text:00407C16                 test    eax, eax
.text:00407C18
.text:00407C18 loc_407C18:                             ; CODE XREF: sub_407B60+43↑j
.text:00407C18                 jz      short loc_407C2C
.text:00407C1A                 lea     esi, [esi+0]
.text:00407C20
.text:00407C20 loc_407C20:                             ; CODE XREF: sub_407BF0+3A↓j
.text:00407C20                 mov     eax, edx
.text:00407C22                 inc     ebx
.text:00407C23                 mov     eax, [eax]
.text:00407C25                 add     edx, 4
.text:00407C28                 test    eax, eax
.text:00407C2A                 jnz     short loc_407C20
.text:00407C2C
.text:00407C2C loc_407C2C:                             ; CODE XREF: sub_407BF0:loc_407C18↑j
.text:00407C2C                 test    ecx, ecx
.text:00407C2E                 jz      loc_407D9D
.text:00407C34                 mov     [esp+2Ch+var_1C], ebp
.text:00407C38                 mov     edx, [esp+2Ch+var_14]
.text:00407C3C                 mov     [esp+2Ch+ArgList], ecx
.text:00407C40                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00407C48                 mov     [esp+2Ch+var_20], edx
.text:00407C4C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407C4F                 call    fprintf
.text:00407C54
.text:00407C54 loc_407C54:                             ; CODE XREF: sub_407BF0+1C9↓j
.text:00407C54                 cmp     ebx, 9          ; switch 10 cases
.text:00407C57                 ja      def_407C5D      ; jumptable 00407C5D default case
.text:00407C5D                 jmp     ds:jpt_407C5D[ebx*4] ; switch jump
.text:00407C5D ; ---------------------------------------------------------------------------
.text:00407C64 jpt_407C5D      dd offset loc_407C8C    ; DATA XREF: sub_407BF0+6D↑r
.text:00407C64                 dd offset loc_407C91    ; jump table for switch statement
.text:00407C64                 dd offset loc_407D31
.text:00407C64                 dd offset loc_407D3D
.text:00407C64                 dd offset loc_407D49
.text:00407C64                 dd offset loc_407D55
.text:00407C64                 dd offset loc_407D61
.text:00407C64                 dd offset loc_407D6D
.text:00407C64                 dd offset loc_407D79
.text:00407C64                 dd offset loc_407D85
.text:00407C8C ; ---------------------------------------------------------------------------
.text:00407C8C
.text:00407C8C loc_407C8C:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407C8C                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407C8C                 call    abort           ; jumptable 00407C5D case 0
.text:00407C91 ; ---------------------------------------------------------------------------
.text:00407C91
.text:00407C91 loc_407C91:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407C91                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407C91                 mov     [esp+2Ch+Stream], 40793Eh ; jumptable 00407C5D case 1
.text:00407C98                 nop
.text:00407C99                 lea     esi, [esi+0]
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: sub_407BF0+148↓j
.text:00407CA0                                         ; sub_407BF0+154↓j ...
.text:00407CA0                 call    ds:libintl_gettext
.text:00407CA6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00407CAA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407CAD                 mov     [esp+2Ch+Format], eax ; Format
.text:00407CB1                 call    vfprintf
.text:00407CB6                 mov     ebx, [esi+4]
.text:00407CB9                 dec     ebx
.text:00407CBA                 test    ebx, ebx
.text:00407CBC                 mov     [esi+4], ebx
.text:00407CBF                 js      short loc_407D1F
.text:00407CC1                 mov     edi, [esi]
.text:00407CC3                 mov     byte ptr [edi], 0Ah
.text:00407CC6                 inc     dword ptr [esi]
.text:00407CC8
.text:00407CC8 loc_407CC8:                             ; CODE XREF: sub_407BF0+13F↓j
.text:00407CC8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00407CCC                 mov     edx, Buffer
.text:00407CD2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00407CD5                 call    fputs
.text:00407CDA                 mov     ebp, [esi+4]
.text:00407CDD                 dec     ebp
.text:00407CDE                 test    ebp, ebp
.text:00407CE0                 mov     [esi+4], ebp
.text:00407CE3                 js      short loc_407D0D
.text:00407CE5                 mov     ecx, [esi]
.text:00407CE7                 mov     byte ptr [ecx], 0Ah
.text:00407CEA                 inc     dword ptr [esi]
.text:00407CEC
.text:00407CEC loc_407CEC:                             ; CODE XREF: sub_407BF0+12D↓j
.text:00407CEC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00407CF0                 mov     [esp+2Ch+Stream], offset sub_407960
.text:00407CF7                 call    ds:libintl_gettext
.text:00407CFD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00407D01                 add     esp, 1Ch
.text:00407D04                 pop     ebx
.text:00407D05                 pop     esi
.text:00407D06                 pop     edi
.text:00407D07                 pop     ebp
.text:00407D08                 jmp     fputs
.text:00407D0D ; ---------------------------------------------------------------------------
.text:00407D0D
.text:00407D0D loc_407D0D:                             ; CODE XREF: sub_407BF0+F3↑j
.text:00407D0D                 mov     [esp+2Ch+Format], esi ; File
.text:00407D11                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407D18                 call    _flsbuf
.text:00407D1D                 jmp     short loc_407CEC
.text:00407D1F ; ---------------------------------------------------------------------------
.text:00407D1F
.text:00407D1F loc_407D1F:                             ; CODE XREF: sub_407BF0+CF↑j
.text:00407D1F                 mov     [esp+2Ch+Format], esi ; File
.text:00407D23                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407D2A                 call    _flsbuf
.text:00407D2F                 jmp     short loc_407CC8
.text:00407D31 ; ---------------------------------------------------------------------------
.text:00407D31
.text:00407D31 loc_407D31:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D31                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D31                 mov     [esp+2Ch+Stream], offset loc_4079F8 ; jumptable 00407C5D case 2
.text:00407D38                 jmp     loc_407CA0
.text:00407D3D ; ---------------------------------------------------------------------------
.text:00407D3D
.text:00407D3D loc_407D3D:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D3D                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D3D                 mov     [esp+2Ch+Stream], offset loc_407A0F ; jumptable 00407C5D case 3
.text:00407D44                 jmp     loc_407CA0
.text:00407D49 ; ---------------------------------------------------------------------------
.text:00407D49
.text:00407D49 loc_407D49:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D49                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D49                 mov     [esp+2Ch+Stream], offset sub_407A40 ; jumptable 00407C5D case 4
.text:00407D50                 jmp     loc_407CA0
.text:00407D55 ; ---------------------------------------------------------------------------
.text:00407D55
.text:00407D55 loc_407D55:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D55                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D55                 mov     [esp+2Ch+Stream], offset loc_407A60 ; jumptable 00407C5D case 5
.text:00407D5C                 jmp     loc_407CA0
.text:00407D61 ; ---------------------------------------------------------------------------
.text:00407D61
.text:00407D61 loc_407D61:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D61                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D61                 mov     [esp+2Ch+Stream], offset sub_407AA0 ; jumptable 00407C5D case 6
.text:00407D68                 jmp     loc_407CA0
.text:00407D6D ; ---------------------------------------------------------------------------
.text:00407D6D
.text:00407D6D loc_407D6D:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D6D                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D6D                 mov     [esp+2Ch+Stream], offset sub_407AE0 ; jumptable 00407C5D case 7
.text:00407D74                 jmp     loc_407CA0
.text:00407D79 ; ---------------------------------------------------------------------------
.text:00407D79
.text:00407D79 loc_407D79:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D79                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D79                 mov     [esp+2Ch+Stream], offset sub_407B20 ; jumptable 00407C5D case 8
.text:00407D80                 jmp     loc_407CA0
.text:00407D85 ; ---------------------------------------------------------------------------
.text:00407D85
.text:00407D85 loc_407D85:                             ; CODE XREF: sub_407BF0+6D↑j
.text:00407D85                                         ; DATA XREF: sub_407BF0:jpt_407C5D↑o
.text:00407D85                 mov     [esp+2Ch+Stream], offset sub_407B60 ; jumptable 00407C5D case 9
.text:00407D8C                 jmp     loc_407CA0
.text:00407D91 ; ---------------------------------------------------------------------------
.text:00407D91
.text:00407D91 def_407C5D:                             ; CODE XREF: sub_407BF0+67↑j
.text:00407D91                 mov     [esp+2Ch+Stream], offset loc_407BA0 ; jumptable 00407C5D default case
.text:00407D98                 jmp     loc_407CA0
.text:00407D9D ; ---------------------------------------------------------------------------
.text:00407D9D
.text:00407D9D loc_407D9D:                             ; CODE XREF: sub_407BF0+3E↑j
.text:00407D9D                 mov     [esp+2Ch+var_20], ebp
.text:00407DA1                 mov     ecx, [esp+2Ch+var_14]
.text:00407DA5                 mov     [esp+2Ch+Format], offset loc_407BDC ; Format
.text:00407DAD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407DB0                 mov     [esp+2Ch+ArgList], ecx
.text:00407DB4                 call    fprintf
.text:00407DB9                 jmp     loc_407C54
.text:00407DB9 sub_407BF0      endp
.text:00407DB9
.text:00407DB9 ; ---------------------------------------------------------------------------
.text:00407DBE                 align 10h
.text:00407DC0
.text:00407DC0 ; =============== S U B R O U T I N E =======================================
.text:00407DC0
.text:00407DC0
.text:00407DC0 ; int __cdecl sub_407DC0(FILE *, FILE *, int, int, char)
.text:00407DC0 sub_407DC0      proc near               ; CODE XREF: sub_403B10+175↑p
.text:00407DC0
.text:00407DC0 var_1C          = dword ptr -1Ch
.text:00407DC0 var_18          = dword ptr -18h
.text:00407DC0 var_14          = dword ptr -14h
.text:00407DC0 var_10          = dword ptr -10h
.text:00407DC0 var_C           = dword ptr -0Ch
.text:00407DC0 arg_0           = dword ptr  4
.text:00407DC0 arg_4           = dword ptr  8
.text:00407DC0 arg_8           = dword ptr  0Ch
.text:00407DC0 arg_C           = dword ptr  10h
.text:00407DC0 arg_10          = byte ptr  14h
.text:00407DC0
.text:00407DC0                 sub     esp, 1Ch
.text:00407DC3                 mov     edx, [esp+1Ch+arg_C]
.text:00407DC7                 lea     ecx, [esp+1Ch+arg_10]
.text:00407DCB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00407DCF                 mov     ecx, [esp+1Ch+arg_8]
.text:00407DD3                 mov     [esp+1Ch+var_10], edx ; int
.text:00407DD7                 mov     edx, [esp+1Ch+arg_4]
.text:00407DDB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00407DDF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00407DE3                 mov     edx, [esp+1Ch+arg_0]
.text:00407DE7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00407DEA                 call    sub_407BF0
.text:00407DEF                 add     esp, 1Ch
.text:00407DF2                 retn
.text:00407DF2 sub_407DC0      endp
.text:00407DF2
.text:00407DF2 ; ---------------------------------------------------------------------------
.text:00407DF3                 align 10h
.text:00407E00
.text:00407E00 ; =============== S U B R O U T I N E =======================================
.text:00407E00
.text:00407E00
.text:00407E00 sub_407E00      proc near               ; CODE XREF: sub_403B10+BA↑p
.text:00407E00
.text:00407E00 var_1C          = dword ptr -1Ch
.text:00407E00 var_18          = dword ptr -18h
.text:00407E00 var_14          = dword ptr -14h
.text:00407E00 var_10          = dword ptr -10h
.text:00407E00 var_C           = dword ptr -0Ch
.text:00407E00 var_8           = dword ptr -8
.text:00407E00 var_4           = dword ptr -4
.text:00407E00 arg_0           = dword ptr  4
.text:00407E00 arg_4           = dword ptr  8
.text:00407E00 arg_8           = dword ptr  0Ch
.text:00407E00 arg_C           = dword ptr  10h
.text:00407E00 arg_10          = dword ptr  14h
.text:00407E00
.text:00407E00                 sub     esp, 1Ch
.text:00407E03                 mov     edx, [esp+1Ch+arg_C]
.text:00407E07                 mov     [esp+1Ch+var_4], 0
.text:00407E0F                 mov     ecx, [esp+1Ch+arg_10]
.text:00407E13                 mov     [esp+1Ch+var_8], 0
.text:00407E1B                 mov     [esp+1Ch+var_10], edx
.text:00407E1F                 mov     edx, [esp+1Ch+arg_4]
.text:00407E23                 mov     [esp+1Ch+var_C], ecx
.text:00407E27                 mov     ecx, [esp+1Ch+arg_8]
.text:00407E2B                 mov     [esp+1Ch+var_18], edx
.text:00407E2F                 mov     edx, [esp+1Ch+arg_0]
.text:00407E33                 mov     [esp+1Ch+var_14], ecx
.text:00407E37                 mov     [esp+1Ch+var_1C], edx
.text:00407E3A                 call    sub_406A00
.text:00407E3F                 add     esp, 1Ch
.text:00407E42                 retn
.text:00407E42 sub_407E00      endp
.text:00407E42
.text:00407E42 ; ---------------------------------------------------------------------------
.text:00407E43                 align 10h
.text:00407E50                 sub     esp, 2Ch
.text:00407E53                 mov     edx, [esp+44h]
.text:00407E57                 mov     dword ptr [esp+18h], 0
.text:00407E5F                 mov     ecx, [esp+40h]
.text:00407E63                 mov     dword ptr [esp+14h], 0
.text:00407E6B                 mov     [esp+1Ch], edx
.text:00407E6F                 mov     edx, [esp+3Ch]
.text:00407E73                 mov     [esp+10h], ecx
.text:00407E77                 mov     ecx, [esp+38h]
.text:00407E7B                 mov     [esp+0Ch], edx
.text:00407E7F                 mov     edx, [esp+34h]
.text:00407E83                 mov     [esp+8], ecx
.text:00407E87                 mov     [esp+4], edx
.text:00407E8B                 mov     edx, [esp+30h]
.text:00407E8F                 mov     [esp], edx
.text:00407E92                 call    loc_405E70
.text:00407E97                 add     esp, 2Ch
.text:00407E9A                 retn
.text:00407E9A ; ---------------------------------------------------------------------------
.text:00407E9B                 align 10h
.text:00407EA0                 sub     esp, 1Ch
.text:00407EA3                 mov     edx, [esp+2Ch]
.text:00407EA7                 mov     dword ptr [esp+18h], 0
.text:00407EAF                 mov     ecx, [esp+30h]
.text:00407EB3                 mov     dword ptr [esp+14h], 1
.text:00407EBB                 mov     [esp+0Ch], edx
.text:00407EBF                 mov     edx, [esp+24h]
.text:00407EC3                 mov     [esp+10h], ecx
.text:00407EC7                 mov     ecx, [esp+28h]
.text:00407ECB                 mov     [esp+4], edx
.text:00407ECF                 mov     edx, [esp+20h]
.text:00407ED3                 mov     [esp+8], ecx
.text:00407ED7                 mov     [esp], edx
.text:00407EDA                 call    sub_406A00
.text:00407EDF                 add     esp, 1Ch
.text:00407EE2                 retn
.text:00407EE2 ; ---------------------------------------------------------------------------
.text:00407EE3                 align 10h
.text:00407EF0                 sub     esp, 2Ch
.text:00407EF3                 mov     edx, [esp+44h]
.text:00407EF7                 mov     dword ptr [esp+18h], 0
.text:00407EFF                 mov     ecx, [esp+40h]
.text:00407F03                 mov     dword ptr [esp+14h], 1
.text:00407F0B                 mov     [esp+1Ch], edx
.text:00407F0F                 mov     edx, [esp+3Ch]
.text:00407F13                 mov     [esp+10h], ecx
.text:00407F17                 mov     ecx, [esp+38h]
.text:00407F1B                 mov     [esp+0Ch], edx
.text:00407F1F                 mov     edx, [esp+34h]
.text:00407F23                 mov     [esp+8], ecx
.text:00407F27                 mov     [esp+4], edx
.text:00407F2B                 mov     edx, [esp+30h]
.text:00407F2F                 mov     [esp], edx
.text:00407F32                 call    loc_405E70
.text:00407F37                 add     esp, 2Ch
.text:00407F3A                 retn
.text:00407F3A ; ---------------------------------------------------------------------------
.text:00407F3B                 align 10h
.text:00407F40                 mov     edx, [esp+4]
.text:00407F44                 mov     ds:dword_40C060, edx
.text:00407F4A                 retn
.text:00407F4A ; ---------------------------------------------------------------------------
.text:00407F4B aWriteError     db 'write error',0      ; DATA XREF: sub_407F70:loc_407FB9↓o
.text:00407F57 ; const char aSS_0[]
.text:00407F57 aSS_0           db '%s: %s',0           ; DATA XREF: sub_407F70+77↓o
.text:00407F5E ; const char aS_2[]
.text:00407F5E aS_2            db '%s',0               ; DATA XREF: sub_407F70+A0↓o
.text:00407F61 ; ---------------------------------------------------------------------------
.text:00407F61                 jmp     short sub_407F70
.text:00407F61 ; ---------------------------------------------------------------------------
.text:00407F63                 align 10h
.text:00407F70
.text:00407F70 ; =============== S U B R O U T I N E =======================================
.text:00407F70
.text:00407F70
.text:00407F70 ; void __cdecl sub_407F70()
.text:00407F70 sub_407F70      proc near               ; CODE XREF: .text:00407F61↑j
.text:00407F70                                         ; DATA XREF: sub_403B10+6C↑o
.text:00407F70
.text:00407F70 Stream          = dword ptr -2Ch
.text:00407F70 ErrorMessage    = dword ptr -28h
.text:00407F70 var_24          = dword ptr -24h
.text:00407F70 var_20          = byte ptr -20h
.text:00407F70 var_1C          = dword ptr -1Ch
.text:00407F70 var_9           = byte ptr -9
.text:00407F70
.text:00407F70                 push    esi
.text:00407F71                 push    ebx
.text:00407F72                 sub     esp, 24h
.text:00407F75                 mov     edx, ds:_iob
.text:00407F7B                 mov     ecx, [edx+2Ch]
.text:00407F7E                 lea     esi, [edx+20h]
.text:00407F81                 shr     ecx, 5
.text:00407F84                 mov     bl, cl
.text:00407F86                 mov     ecx, [edx+20h]
.text:00407F89                 and     bl, 1
.text:00407F8C                 cmp     ecx, [esi+8]
.text:00407F8F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407F92                 setz    [esp+2Ch+var_9]
.text:00407F97                 call    fclose
.text:00407F9C                 test    eax, eax
.text:00407F9E                 setnz   al
.text:00407FA1                 test    bl, bl
.text:00407FA3                 jnz     loc_408033
.text:00407FA9                 test    al, al
.text:00407FAB                 jz      short loc_408000
.text:00407FAD
.text:00407FAD loc_407FAD:                             ; CODE XREF: sub_407F70+CD↓j
.text:00407FAD                 call    _errno
.text:00407FB2                 mov     esi, [eax]
.text:00407FB4
.text:00407FB4 loc_407FB4:                             ; CODE XREF: sub_407F70+C7↓j
.text:00407FB4                 cmp     esi, 9
.text:00407FB7                 jz      short loc_408026
.text:00407FB9
.text:00407FB9 loc_407FB9:                             ; CODE XREF: sub_407F70+B8↓j
.text:00407FB9                                         ; sub_407F70+C1↓j
.text:00407FB9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00407FC0                 call    ds:libintl_gettext
.text:00407FC6                 mov     ebx, eax
.text:00407FC8                 mov     eax, ds:dword_40C060
.text:00407FCD                 test    eax, eax
.text:00407FCF                 jz      short loc_408006
.text:00407FD1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00407FD4                 call    sub_4091E0
.text:00407FD9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00407FDD                 mov     edx, Code
.text:00407FE3                 mov     [esp+2Ch+var_1C], ebx
.text:00407FE7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00407FEF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00407FF3                 mov     [esp+2Ch+Stream], edx ; Code
.text:00407FF6                 call    sub_409770
.text:00407FFB                 nop
.text:00407FFC                 lea     esi, [esi+0]
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: sub_407F70+3B↑j
.text:00408000                                         ; sub_407F70+B4↓j ...
.text:00408000                 add     esp, 24h
.text:00408003                 pop     ebx
.text:00408004                 pop     esi
.text:00408005                 retn
.text:00408006 ; ---------------------------------------------------------------------------
.text:00408006
.text:00408006 loc_408006:                             ; CODE XREF: sub_407F70+5F↑j
.text:00408006                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040800A                 mov     ebx, Code
.text:00408010                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00408018                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040801C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040801F                 call    sub_409770
.text:00408024                 jmp     short loc_408000
.text:00408026 ; ---------------------------------------------------------------------------
.text:00408026
.text:00408026 loc_408026:                             ; CODE XREF: sub_407F70+47↑j
.text:00408026                 test    bl, bl
.text:00408028                 jnz     short loc_407FB9
.text:0040802A                 cmp     [esp+2Ch+var_9], 0
.text:0040802F                 jnz     short loc_408000
.text:00408031                 jmp     short loc_407FB9
.text:00408033 ; ---------------------------------------------------------------------------
.text:00408033
.text:00408033 loc_408033:                             ; CODE XREF: sub_407F70+33↑j
.text:00408033                 xor     esi, esi
.text:00408035                 test    al, al
.text:00408037                 jz      loc_407FB4
.text:0040803D                 jmp     loc_407FAD
.text:0040803D sub_407F70      endp
.text:0040803D
.text:0040803D ; ---------------------------------------------------------------------------
.text:00408042                 align 10h
.text:00408050 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_408070+3↓o
.text:00408061 ; const char aS[]
.text:00408061 aS              db '%s',0               ; DATA XREF: sub_408070+10↓o
.text:00408064                 align 10h
.text:00408070
.text:00408070 ; =============== S U B R O U T I N E =======================================
.text:00408070
.text:00408070 ; Attributes: noreturn
.text:00408070
.text:00408070 sub_408070      proc near               ; CODE XREF: sub_405B10:loc_405C06↑p
.text:00408070                                         ; sub_409280:loc_40943F↓p ...
.text:00408070
.text:00408070 Code            = dword ptr -1Ch
.text:00408070 ErrorMessage    = dword ptr -18h
.text:00408070 var_14          = dword ptr -14h
.text:00408070 var_10          = byte ptr -10h
.text:00408070
.text:00408070                 sub     esp, 1Ch
.text:00408073                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040807A                 call    ds:libintl_gettext
.text:00408080                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00408088                 mov     edx, Code
.text:0040808E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408096                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040809A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040809D                 call    sub_409770
.text:004080A2                 call    abort
.text:004080A2 sub_408070      endp
.text:004080A2
.text:004080A2 ; ---------------------------------------------------------------------------
.text:004080A7                 align 10h
.text:004080B0 aLiteral        db 'literal',0          ; DATA XREF: .text:004080F0↓o
.text:004080B8 aShell          db 'shell',0            ; DATA XREF: .text:004080F4↓o
.text:004080BE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004080F8↓o
.text:004080CB aC              db 'c',0
.text:004080CD aEscape         db 'escape',0           ; DATA XREF: .text:00408100↓o
.text:004080D4 aLocale         db 'locale',0           ; DATA XREF: .text:00408104↓o
.text:004080DB aClocale        db 'clocale',0          ; DATA XREF: .text:00408108↓o
.text:004080E3                 align 10h
.text:004080F0                 dd offset aLiteral      ; "literal"
.text:004080F4                 dd offset aShell        ; "shell"
.text:004080F8                 dd offset aShellAlways  ; "shell-always"
.text:004080FC ; ---------------------------------------------------------------------------
.text:004080FC                 retf
.text:004080FC ; ---------------------------------------------------------------------------
.text:004080FD                 db 80h, 40h, 0
.text:00408100                 dd offset aEscape       ; "escape"
.text:00408104                 dd offset aLocale       ; "locale"
.text:00408108                 dd offset aClocale      ; "clocale"
.text:0040810C                 dd 2 dup(0)
.text:00408114                 dd 1, 2, 3, 4, 5, 6
.text:0040812C asc_40812C:                             ; DATA XREF: sub_408140+7E↓o
.text:0040812C                                         ; sub_408140+A39↓o ...
.text:0040812C                 text "UTF-16LE", '"',27h,'`'
.text:00408132                 align 10h
.text:00408140
.text:00408140 ; =============== S U B R O U T I N E =======================================
.text:00408140
.text:00408140
.text:00408140 ; int __cdecl sub_408140(int, int, char *Str, int, int, int)
.text:00408140 sub_408140      proc near               ; CODE XREF: sub_408140+43A↓p
.text:00408140                                         ; .text:00408D03↓p ...
.text:00408140
.text:00408140 C               = dword ptr -4Ch
.text:00408140 Type            = dword ptr -48h
.text:00408140 SizeInBytes     = dword ptr -44h
.text:00408140 State           = dword ptr -40h
.text:00408140 var_3C          = dword ptr -3Ch
.text:00408140 var_38          = dword ptr -38h
.text:00408140 var_34          = dword ptr -34h
.text:00408140 var_30          = dword ptr -30h
.text:00408140 var_29          = byte ptr -29h
.text:00408140 var_28          = dword ptr -28h
.text:00408140 var_22          = byte ptr -22h
.text:00408140 var_21          = byte ptr -21h
.text:00408140 var_20          = dword ptr -20h
.text:00408140 var_1C          = dword ptr -1Ch
.text:00408140 var_18          = mbstate_t ptr -18h
.text:00408140 arg_0           = dword ptr  4
.text:00408140 arg_4           = dword ptr  8
.text:00408140 Str             = dword ptr  0Ch
.text:00408140 arg_C           = dword ptr  10h
.text:00408140 arg_10          = dword ptr  14h
.text:00408140 arg_14          = dword ptr  18h
.text:00408140
.text:00408140                 push    ebp
.text:00408141                 push    edi
.text:00408142                 push    esi
.text:00408143                 push    ebx
.text:00408144                 sub     esp, 3Ch
.text:00408147                 mov     edx, ds:__mb_cur_max
.text:0040814D                 mov     [esp+4Ch+var_34], 0
.text:00408155                 mov     [esp+4Ch+var_1C], 0
.text:0040815D                 cmp     dword ptr [edx], 1
.text:00408160                 mov     [esp+4Ch+var_20], 0
.text:00408168                 mov     [esp+4Ch+var_21], 0
.text:0040816D                 setz    [esp+4Ch+var_22]
.text:00408172                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00408177                 ja      short def_40817D ; jumptable 0040817D default case, cases 0,1
.text:00408179                 mov     edx, [esp+4Ch+arg_10]
.text:0040817D                 jmp     ds:jpt_40817D[edx*4] ; switch jump
.text:0040817D ; ---------------------------------------------------------------------------
.text:00408184 jpt_40817D      dd offset def_40817D    ; DATA XREF: sub_408140+3D↑r
.text:00408184                 dd offset def_40817D    ; jump table for switch statement
.text:00408184                 dd offset loc_408AC5
.text:00408184                 dd offset loc_4081A0
.text:00408184                 dd offset loc_408AEB
.text:00408184                 dd offset loc_408AF5
.text:00408184                 dd offset loc_408AF5
.text:004081A0 ; ---------------------------------------------------------------------------
.text:004081A0
.text:004081A0 loc_4081A0:                             ; CODE XREF: sub_408140+3D↑j
.text:004081A0                                         ; DATA XREF: sub_408140:jpt_40817D↑o
.text:004081A0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040817D case 3
.text:004081A4                 cmp     [esp+4Ch+var_34], eax
.text:004081A8                 jnb     short loc_4081B1
.text:004081AA                 mov     ebx, [esp+4Ch+arg_0]
.text:004081AE                 mov     byte ptr [ebx], 22h ; '"'
.text:004081B1
.text:004081B1 loc_4081B1:                             ; CODE XREF: sub_408140+68↑j
.text:004081B1                 mov     [esp+4Ch+var_34], 1
.text:004081B9                 mov     [esp+4Ch+var_21], 1
.text:004081BE                 mov     [esp+4Ch+var_1C], offset asc_40812C ; "\"'`"
.text:004081C6
.text:004081C6 loc_4081C6:                             ; CODE XREF: sub_408140+9A6↓j
.text:004081C6                 mov     [esp+4Ch+var_20], 1
.text:004081CE
.text:004081CE def_40817D:                             ; CODE XREF: sub_408140+37↑j
.text:004081CE                                         ; sub_408140+3D↑j ...
.text:004081CE                 xor     ebp, ebp        ; jumptable 0040817D default case, cases 0,1
.text:004081D0
.text:004081D0 loc_4081D0:                             ; CODE XREF: sub_408140+3DB↓j
.text:004081D0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004081D5                 jz      loc_408AB7
.text:004081DB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004081DF
.text:004081DF loc_4081DF:                             ; CODE XREF: sub_408140+980↓j
.text:004081DF                 jz      loc_408A4E
.text:004081E5                 cmp     [esp+4Ch+var_21], 0
.text:004081EA                 jz      short loc_408230
.text:004081EC                 mov     esi, [esp+4Ch+var_20]
.text:004081F0                 test    esi, esi
.text:004081F2                 jz      short loc_408230
.text:004081F4                 mov     ecx, [esp+4Ch+var_20]
.text:004081F8                 lea     edi, [ecx+ebp]
.text:004081FB                 cmp     edi, [esp+4Ch+arg_C]
.text:004081FF                 ja      short loc_408230
.text:00408201                 cld
.text:00408202                 mov     ebx, [esp+4Ch+Str]
.text:00408206                 mov     edi, [esp+4Ch+var_1C]
.text:0040820A                 add     ebx, ebp
.text:0040820C                 mov     esi, ebx
.text:0040820E                 cmp     ecx, ecx
.text:00408210                 repe cmpsb
.text:00408212                 jnz     short loc_408230
.text:00408214                 mov     edx, [esp+4Ch+arg_4]
.text:00408218                 cmp     [esp+4Ch+var_34], edx
.text:0040821C                 jnb     short loc_40822A
.text:0040821E                 mov     ecx, [esp+4Ch+arg_0]
.text:00408222                 mov     eax, [esp+4Ch+var_34]
.text:00408226                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040822A
.text:0040822A loc_40822A:                             ; CODE XREF: sub_408140+DC↑j
.text:0040822A                 inc     [esp+4Ch+var_34]
.text:0040822E                 mov     esi, esi
.text:00408230
.text:00408230 loc_408230:                             ; CODE XREF: sub_408140+AA↑j
.text:00408230                                         ; sub_408140+B2↑j ...
.text:00408230                 mov     edi, [esp+4Ch+Str]
.text:00408234                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00408239                 movzx   eax, bl
.text:0040823C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040823F                 ja      def_408245      ; jumptable 00408245 default case, cases 1-6,14-31,64
.text:00408245                 jmp     ds:jpt_408245[eax*4] ; switch jump
.text:00408245 ; ---------------------------------------------------------------------------
.text:0040824C jpt_408245      dd offset loc_408448, offset def_408245, offset def_408245
.text:0040824C                                         ; DATA XREF: sub_408140+105↑r
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245 ; jump table for switch statement
.text:0040824C                 dd offset def_408245, offset loc_408520, offset loc_40853E
.text:0040824C                 dd offset loc_408542, offset loc_408587, offset loc_40858B
.text:0040824C                 dd offset loc_40858F, offset loc_408593, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset def_408245
.text:0040824C                 dd offset def_408245, offset def_408245, offset loc_408A18
.text:0040824C                 dd offset loc_408A18, offset loc_408A18, offset loc_408A3A
.text:0040824C                 dd offset loc_408A18, offset def_408642, offset loc_408A18
.text:0040824C                 dd offset loc_408597, offset loc_408A18, offset loc_408A18
.text:0040824C                 dd offset loc_408A18, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset loc_408A18
.text:0040824C                 dd offset loc_408A18, offset loc_408A18, offset loc_408A18
.text:0040824C                 dd offset loc_4085FC, offset def_408245, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset loc_408A18, offset loc_408A11
.text:0040824C                 dd offset def_408642, offset loc_408A18, offset def_408642
.text:0040824C                 dd offset loc_408A18, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset def_408642, offset def_408642, offset def_408642
.text:0040824C                 dd offset loc_408A28, offset loc_408A18, offset loc_408A28
.text:0040824C                 dd offset loc_408A3A
.text:00408448 ; ---------------------------------------------------------------------------
.text:00408448
.text:00408448 loc_408448:                             ; CODE XREF: sub_408140+105↑j
.text:00408448                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408448                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00408245 case 0
.text:0040844D                 lea     eax, [ebp+1]
.text:00408450                 jz      loc_408500
.text:00408456                 mov     esi, [esp+4Ch+arg_4]
.text:0040845A                 cmp     [esp+4Ch+var_34], esi
.text:0040845E                 jnb     short loc_40846C
.text:00408460                 mov     eax, [esp+4Ch+arg_0]
.text:00408464                 mov     ebx, [esp+4Ch+var_34]
.text:00408468                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040846C
.text:0040846C loc_40846C:                             ; CODE XREF: sub_408140+31E↑j
.text:0040846C                 inc     [esp+4Ch+var_34]
.text:00408470                 mov     edx, [esp+4Ch+arg_4]
.text:00408474                 cmp     [esp+4Ch+var_34], edx
.text:00408478                 jnb     short loc_408486
.text:0040847A                 mov     edi, [esp+4Ch+arg_0]
.text:0040847E                 mov     ecx, [esp+4Ch+var_34]
.text:00408482                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00408486
.text:00408486 loc_408486:                             ; CODE XREF: sub_408140+338↑j
.text:00408486                 inc     [esp+4Ch+var_34]
.text:0040848A                 mov     esi, [esp+4Ch+arg_4]
.text:0040848E                 cmp     [esp+4Ch+var_34], esi
.text:00408492                 jnb     short loc_4084A0
.text:00408494                 mov     ebx, [esp+4Ch+arg_0]
.text:00408498                 mov     eax, [esp+4Ch+var_34]
.text:0040849C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004084A0
.text:004084A0 loc_4084A0:                             ; CODE XREF: sub_408140+352↑j
.text:004084A0                 inc     [esp+4Ch+var_34]
.text:004084A4                 mov     bl, 30h ; '0'
.text:004084A6                 lea     esi, [esi+0]
.text:004084A9                 lea     edi, [edi+0]
.text:004084B0
.text:004084B0 def_408642:                             ; CODE XREF: sub_408140+105↑j
.text:004084B0                                         ; sub_408140+463↓j ...
.text:004084B0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:004084B0                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:004084B5                 lea     eax, [ebp+1]
.text:004084B8                 jz      short loc_408500
.text:004084BA                 mov     cl, bl
.text:004084BC                 mov     edi, [esp+4Ch+arg_14]
.text:004084C0                 mov     esi, 1
.text:004084C5                 shr     cl, 5
.text:004084C8                 movzx   edx, cl
.text:004084CB                 mov     ecx, ebx
.text:004084CD                 and     ecx, 1Fh
.text:004084D0                 shl     esi, cl
.text:004084D2                 test    [edi+edx*4+4], esi
.text:004084D6                 jz      short loc_4084F2
.text:004084D8
.text:004084D8 loc_4084D8:                             ; CODE XREF: sub_408140+3FC↓j
.text:004084D8                 mov     edx, [esp+4Ch+arg_4]
.text:004084DC                 cmp     [esp+4Ch+var_34], edx
.text:004084E0                 jnb     short loc_4084EE
.text:004084E2                 mov     edi, [esp+4Ch+arg_0]
.text:004084E6                 mov     esi, [esp+4Ch+var_34]
.text:004084EA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004084EE
.text:004084EE loc_4084EE:                             ; CODE XREF: sub_408140+3A0↑j
.text:004084EE                 inc     [esp+4Ch+var_34]
.text:004084F2
.text:004084F2 loc_4084F2:                             ; CODE XREF: sub_408140+396↑j
.text:004084F2                 lea     eax, [ebp+1]
.text:004084F5                 lea     esi, [esi+0]
.text:004084F9                 lea     edi, [edi+0]
.text:00408500
.text:00408500 loc_408500:                             ; CODE XREF: sub_408140+310↑j
.text:00408500                                         ; sub_408140+378↑j ...
.text:00408500                 mov     ebp, [esp+4Ch+arg_4]
.text:00408504                 cmp     [esp+4Ch+var_34], ebp
.text:00408508                 jnb     short loc_408515
.text:0040850A                 mov     edx, [esp+4Ch+arg_0]
.text:0040850E                 mov     ecx, [esp+4Ch+var_34]
.text:00408512                 mov     [ecx+edx], bl
.text:00408515
.text:00408515 loc_408515:                             ; CODE XREF: sub_408140+3C8↑j
.text:00408515                 inc     [esp+4Ch+var_34]
.text:00408519                 mov     ebp, eax
.text:0040851B                 jmp     loc_4081D0
.text:00408520 ; ---------------------------------------------------------------------------
.text:00408520
.text:00408520 loc_408520:                             ; CODE XREF: sub_408140+105↑j
.text:00408520                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408520                 mov     dl, 61h ; 'a'   ; jumptable 00408245 case 7
.text:00408522                 lea     esi, [esi+0]
.text:00408529                 lea     edi, [edi+0]
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: sub_408140+400↓j
.text:00408530                                         ; sub_408140+409↓j ...
.text:00408530                 cmp     [esp+4Ch+var_21], 0
.text:00408535                 lea     eax, [ebp+1]
.text:00408538                 jz      short loc_408500
.text:0040853A                 mov     bl, dl
.text:0040853C                 jmp     short loc_4084D8
.text:0040853E ; ---------------------------------------------------------------------------
.text:0040853E
.text:0040853E loc_40853E:                             ; CODE XREF: sub_408140+105↑j
.text:0040853E                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:0040853E                 mov     dl, 62h ; 'b'   ; jumptable 00408245 case 8
.text:00408540                 jmp     short loc_408530
.text:00408542 ; ---------------------------------------------------------------------------
.text:00408542
.text:00408542 loc_408542:                             ; CODE XREF: sub_408140+105↑j
.text:00408542                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408542                 mov     dl, 74h ; 't'   ; jumptable 00408245 case 9
.text:00408544
.text:00408544 loc_408544:                             ; CODE XREF: sub_408140+449↓j
.text:00408544                                         ; sub_408140+455↓j ...
.text:00408544                 cmp     [esp+4Ch+arg_10], 1
.text:00408549                 jnz     short loc_408530
.text:0040854B
.text:0040854B loc_40854B:                             ; CODE XREF: sub_408140+45C↓j
.text:0040854B                                         ; sub_408140+4C1↓j ...
.text:0040854B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408912 cases 91,92,94,96,124
.text:00408553                 mov     eax, [esp+4Ch+arg_14]
.text:00408557                 mov     edx, [esp+4Ch+arg_C]
.text:0040855B                 mov     ecx, [esp+4Ch+Str]
.text:0040855F                 mov     ebx, [esp+4Ch+arg_4]
.text:00408563                 mov     [esp+4Ch+var_38], eax ; int
.text:00408567                 mov     ebp, [esp+4Ch+arg_0]
.text:0040856B                 mov     [esp+4Ch+State], edx ; int
.text:0040856F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00408573                 mov     [esp+4Ch+Type], ebx ; int
.text:00408577                 mov     [esp+4Ch+C], ebp ; int
.text:0040857A                 call    sub_408140
.text:0040857F
.text:0040857F loc_40857F:                             ; CODE XREF: sub_408140+972↓j
.text:0040857F                 add     esp, 3Ch
.text:00408582                 pop     ebx
.text:00408583                 pop     esi
.text:00408584                 pop     edi
.text:00408585                 pop     ebp
.text:00408586                 retn
.text:00408587 ; ---------------------------------------------------------------------------
.text:00408587
.text:00408587 loc_408587:                             ; CODE XREF: sub_408140+105↑j
.text:00408587                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408587                 mov     dl, 6Eh ; 'n'   ; jumptable 00408245 case 10
.text:00408589                 jmp     short loc_408544
.text:0040858B ; ---------------------------------------------------------------------------
.text:0040858B
.text:0040858B loc_40858B:                             ; CODE XREF: sub_408140+105↑j
.text:0040858B                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:0040858B                 mov     dl, 76h ; 'v'   ; jumptable 00408245 case 11
.text:0040858D                 jmp     short loc_408530
.text:0040858F ; ---------------------------------------------------------------------------
.text:0040858F
.text:0040858F loc_40858F:                             ; CODE XREF: sub_408140+105↑j
.text:0040858F                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:0040858F                 mov     dl, 66h ; 'f'   ; jumptable 00408245 case 12
.text:00408591                 jmp     short loc_408530
.text:00408593 ; ---------------------------------------------------------------------------
.text:00408593
.text:00408593 loc_408593:                             ; CODE XREF: sub_408140+105↑j
.text:00408593                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408593                 mov     dl, 72h ; 'r'   ; jumptable 00408245 case 13
.text:00408595                 jmp     short loc_408544
.text:00408597 ; ---------------------------------------------------------------------------
.text:00408597
.text:00408597 loc_408597:                             ; CODE XREF: sub_408140+105↑j
.text:00408597                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408597                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408245 case 39
.text:0040859C                 jz      short loc_40854B ; jumptable 00408912 cases 91,92,94,96,124
.text:0040859E                 cmp     [esp+4Ch+arg_10], 2
.text:004085A3                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:004085A3                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:004085A9                 mov     edx, [esp+4Ch+arg_4]
.text:004085AD                 cmp     [esp+4Ch+var_34], edx
.text:004085B1                 jnb     short loc_4085BF
.text:004085B3                 mov     ecx, [esp+4Ch+arg_0]
.text:004085B7                 mov     edi, [esp+4Ch+var_34]
.text:004085BB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004085BF
.text:004085BF loc_4085BF:                             ; CODE XREF: sub_408140+471↑j
.text:004085BF                 inc     [esp+4Ch+var_34]
.text:004085C3                 mov     eax, [esp+4Ch+arg_4]
.text:004085C7                 cmp     [esp+4Ch+var_34], eax
.text:004085CB                 jnb     short loc_4085D9
.text:004085CD                 mov     esi, [esp+4Ch+arg_0]
.text:004085D1                 mov     edx, [esp+4Ch+var_34]
.text:004085D5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004085D9
.text:004085D9 loc_4085D9:                             ; CODE XREF: sub_408140+48B↑j
.text:004085D9                 inc     [esp+4Ch+var_34]
.text:004085DD                 mov     edi, [esp+4Ch+arg_4]
.text:004085E1                 cmp     [esp+4Ch+var_34], edi
.text:004085E5                 jnb     short loc_4085F3
.text:004085E7                 mov     ecx, [esp+4Ch+arg_0]
.text:004085EB                 mov     eax, [esp+4Ch+var_34]
.text:004085EF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004085F3
.text:004085F3 loc_4085F3:                             ; CODE XREF: sub_408140+4A5↑j
.text:004085F3                                         ; sub_408140+5C4↓j ...
.text:004085F3                 inc     [esp+4Ch+var_34]
.text:004085F7                 jmp     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:004085F7                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:004085FC ; ---------------------------------------------------------------------------
.text:004085FC
.text:004085FC loc_4085FC:                             ; CODE XREF: sub_408140+105↑j
.text:004085FC                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:004085FC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408245 case 63
.text:00408601                 jz      loc_40854B      ; jumptable 00408912 cases 91,92,94,96,124
.text:00408607                 cmp     [esp+4Ch+arg_10], 3
.text:0040860C                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:0040860C                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408612                 lea     edx, [ebp+2]
.text:00408615                 cmp     edx, [esp+4Ch+arg_C]
.text:00408619                 jnb     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:00408619                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:0040861F                 mov     esi, [esp+4Ch+Str]
.text:00408623                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00408628                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:00408628                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:0040862E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00408633                 movsx   eax, cl
.text:00408636                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00408639                 cmp     eax, 1Dh
.text:0040863C                 ja      def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:0040863C                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408642                 jmp     ds:jpt_408642[eax*4] ; switch jump
.text:00408642 ; ---------------------------------------------------------------------------
.text:00408649                 align 4
.text:0040864C jpt_408642      dd offset loc_4086C4    ; DATA XREF: sub_408140+502↑r
.text:0040864C                 dd offset def_408642    ; jump table for switch statement
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset def_408642
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset loc_4086C4
.text:0040864C                 dd offset loc_4086C4
.text:004086C4 ; ---------------------------------------------------------------------------
.text:004086C4
.text:004086C4 loc_4086C4:                             ; CODE XREF: sub_408140+502↑j
.text:004086C4                                         ; DATA XREF: sub_408140:jpt_408642↑o
.text:004086C4                 mov     ebp, edx        ; jumptable 00408642 cases 33,39-41,45,47,60-62
.text:004086C6                 mov     bl, cl
.text:004086C8                 mov     edx, [esp+4Ch+arg_4]
.text:004086CC                 cmp     [esp+4Ch+var_34], edx
.text:004086D0                 jnb     short loc_4086DE
.text:004086D2                 mov     ecx, [esp+4Ch+arg_0]
.text:004086D6                 mov     edi, [esp+4Ch+var_34]
.text:004086DA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004086DE
.text:004086DE loc_4086DE:                             ; CODE XREF: sub_408140+590↑j
.text:004086DE                 inc     [esp+4Ch+var_34]
.text:004086E2                 mov     eax, [esp+4Ch+arg_4]
.text:004086E6                 cmp     [esp+4Ch+var_34], eax
.text:004086EA                 jnb     short loc_4086F8
.text:004086EC                 mov     edx, [esp+4Ch+arg_0]
.text:004086F0                 mov     esi, [esp+4Ch+var_34]
.text:004086F4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004086F8
.text:004086F8 loc_4086F8:                             ; CODE XREF: sub_408140+5AA↑j
.text:004086F8                 inc     [esp+4Ch+var_34]
.text:004086FC                 mov     edi, [esp+4Ch+arg_4]
.text:00408700                 cmp     [esp+4Ch+var_34], edi
.text:00408704                 jnb     loc_4085F3
.text:0040870A                 mov     eax, [esp+4Ch+arg_0]
.text:0040870E                 mov     ecx, [esp+4Ch+var_34]
.text:00408712                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00408716                 jmp     loc_4085F3
.text:00408716 ; ---------------------------------------------------------------------------
.text:0040871B                 align 10h
.text:00408720
.text:00408720 def_408245:                             ; CODE XREF: sub_408140+FF↑j
.text:00408720                                         ; sub_408140+105↑j
.text:00408720                                         ; DATA XREF: ...
.text:00408720                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00408245 default case, cases 1-6,14-31,64
.text:00408725                 jz      loc_408850
.text:0040872B                 mov     [esp+4Ch+var_28], 1
.text:00408733                 mov     esi, ds:__mb_cur_max
.text:00408739                 movzx   edx, bl
.text:0040873C                 cmp     dword ptr [esi], 1
.text:0040873F                 jz      loc_408834
.text:00408745                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040874D                 mov     [esp+4Ch+C], edx ; C
.text:00408750                 call    _isctype
.text:00408755
.text:00408755 loc_408755:                             ; CODE XREF: sub_408140+705↓j
.text:00408755                 test    eax, eax
.text:00408757                 setnz   [esp+4Ch+var_29]
.text:0040875C
.text:0040875C loc_40875C:                             ; CODE XREF: sub_408140+7A5↓j
.text:0040875C                 cmp     [esp+4Ch+var_21], 0
.text:00408761                 lea     eax, [ebp+1]
.text:00408764                 jz      loc_408500
.text:0040876A                 cmp     [esp+4Ch+var_29], 0
.text:0040876F                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:0040876F                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408775
.text:00408775 loc_408775:                             ; CODE XREF: sub_408140+7AB↓j
.text:00408775                 mov     eax, [esp+4Ch+var_28]
.text:00408779                 lea     edx, [eax+ebp]
.text:0040877C                 lea     esi, [esi+0]
.text:00408780
.text:00408780 loc_408780:                             ; CODE XREF: sub_408140+6EF↓j
.text:00408780                 cmp     [esp+4Ch+var_21], 0
.text:00408785                 jz      short loc_408800
.text:00408787                 cmp     [esp+4Ch+var_29], 0
.text:0040878C                 jnz     short loc_408800
.text:0040878E                 mov     edi, [esp+4Ch+arg_4]
.text:00408792                 cmp     [esp+4Ch+var_34], edi
.text:00408796                 jnb     short loc_4087A4
.text:00408798                 mov     esi, [esp+4Ch+arg_0]
.text:0040879C                 mov     eax, [esp+4Ch+var_34]
.text:004087A0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004087A4
.text:004087A4 loc_4087A4:                             ; CODE XREF: sub_408140+656↑j
.text:004087A4                 inc     [esp+4Ch+var_34]
.text:004087A8                 mov     ecx, [esp+4Ch+arg_4]
.text:004087AC                 cmp     [esp+4Ch+var_34], ecx
.text:004087B0                 jnb     short loc_4087C5
.text:004087B2                 mov     cl, bl
.text:004087B4                 mov     esi, [esp+4Ch+arg_0]
.text:004087B8                 mov     edi, [esp+4Ch+var_34]
.text:004087BC                 shr     cl, 6
.text:004087BF                 add     cl, 30h ; '0'
.text:004087C2                 mov     [edi+esi], cl
.text:004087C5
.text:004087C5 loc_4087C5:                             ; CODE XREF: sub_408140+670↑j
.text:004087C5                 inc     [esp+4Ch+var_34]
.text:004087C9                 mov     edi, [esp+4Ch+arg_4]
.text:004087CD                 cmp     [esp+4Ch+var_34], edi
.text:004087D1                 jnb     short loc_4087E9
.text:004087D3                 mov     cl, bl
.text:004087D5                 mov     esi, [esp+4Ch+arg_0]
.text:004087D9                 shr     cl, 3
.text:004087DC                 mov     edi, [esp+4Ch+var_34]
.text:004087E0                 and     cl, 7
.text:004087E3                 add     cl, 30h ; '0'
.text:004087E6                 mov     [edi+esi], cl
.text:004087E9
.text:004087E9 loc_4087E9:                             ; CODE XREF: sub_408140+691↑j
.text:004087E9                 inc     [esp+4Ch+var_34]
.text:004087ED                 and     bl, 7
.text:004087F0                 add     bl, 30h ; '0'
.text:004087F3                 lea     esi, [esi+0]
.text:004087F9                 lea     edi, [edi+0]
.text:00408800
.text:00408800 loc_408800:                             ; CODE XREF: sub_408140+645↑j
.text:00408800                                         ; sub_408140+64C↑j
.text:00408800                 lea     eax, [ebp+1]
.text:00408803                 cmp     edx, eax
.text:00408805                 jbe     loc_408500
.text:0040880B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040880F                 cmp     [esp+4Ch+var_34], ebp
.text:00408813                 jnb     short loc_408820
.text:00408815                 mov     ecx, [esp+4Ch+arg_0]
.text:00408819                 mov     edi, [esp+4Ch+var_34]
.text:0040881D                 mov     [edi+ecx], bl
.text:00408820
.text:00408820 loc_408820:                             ; CODE XREF: sub_408140+6D3↑j
.text:00408820                 inc     [esp+4Ch+var_34]
.text:00408824                 mov     ebp, eax
.text:00408826                 mov     eax, [esp+4Ch+Str]
.text:0040882A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040882F                 jmp     loc_408780
.text:00408834 ; ---------------------------------------------------------------------------
.text:00408834
.text:00408834 loc_408834:                             ; CODE XREF: sub_408140+5FF↑j
.text:00408834                 mov     ecx, ds:_pctype
.text:0040883A                 mov     edi, [ecx]
.text:0040883C                 movzx   eax, word ptr [edi+edx*2]
.text:00408840                 and     eax, 157h
.text:00408845                 jmp     loc_408755
.text:00408845 ; ---------------------------------------------------------------------------
.text:0040884A                 align 10h
.text:00408850
.text:00408850 loc_408850:                             ; CODE XREF: sub_408140+5E5↑j
.text:00408850                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408855                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040885D                 mov     [esp+4Ch+var_28], 0
.text:00408865                 mov     [esp+4Ch+var_29], 1
.text:0040886A                 jz      loc_4089FC
.text:00408870
.text:00408870 loc_408870:                             ; CODE XREF: sub_408140+8CC↓j
.text:00408870                 mov     ecx, [esp+4Ch+arg_C]
.text:00408874                 lea     edx, [esp+4Ch+var_18]
.text:00408878                 mov     edi, [esp+4Ch+Str]
.text:0040887C                 mov     [esp+4Ch+State], edx ; State
.text:00408880                 lea     esi, [esp+4Ch+var_18._State]
.text:00408884                 sub     ecx, ebp
.text:00408886                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040888A                 add     edi, ebp
.text:0040888C                 mov     [esp+4Ch+var_30], edi
.text:00408890                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00408894                 mov     [esp+4Ch+C], esi ; DstCh
.text:00408897                 call    mbrtowc
.text:0040889C                 test    eax, eax
.text:0040889E                 mov     edi, eax
.text:004088A0                 jz      short loc_4088E0
.text:004088A2                 cmp     eax, 0FFFFFFFFh
.text:004088A5                 jz      loc_4089F2
.text:004088AB                 cmp     eax, 0FFFFFFFEh
.text:004088AE                 jz      loc_4089B2
.text:004088B4                 cmp     [esp+4Ch+arg_10], 1
.text:004088B9                 jz      short loc_4088F0
.text:004088BB
.text:004088BB loc_4088BB:                             ; CODE XREF: sub_408140+7B9↓j
.text:004088BB                                         ; sub_408140+86D↓j
.text:004088BB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004088C0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004088C8                 mov     [esp+4Ch+C], ecx ; C
.text:004088CB                 call    iswctype
.text:004088D0                 test    eax, eax
.text:004088D2                 jnz     short loc_4088D9
.text:004088D4                 mov     [esp+4Ch+var_29], 0
.text:004088D9
.text:004088D9 loc_4088D9:                             ; CODE XREF: sub_408140+792↑j
.text:004088D9                 mov     [esp+4Ch+var_28], edi
.text:004088DD                 lea     esi, [esi+0]
.text:004088E0
.text:004088E0 loc_4088E0:                             ; CODE XREF: sub_408140+760↑j
.text:004088E0                                         ; sub_408140+87B↓j ...
.text:004088E0                 cmp     [esp+4Ch+var_28], 1
.text:004088E5                 jbe     loc_40875C
.text:004088EB                 jmp     loc_408775
.text:004088F0 ; ---------------------------------------------------------------------------
.text:004088F0
.text:004088F0 loc_4088F0:                             ; CODE XREF: sub_408140+779↑j
.text:004088F0                 cmp     [esp+4Ch+arg_10], eax
.text:004088F4                 mov     edx, 1
.text:004088F9                 jnb     short loc_4088BB
.text:004088FB
.text:004088FB loc_4088FB:                             ; CODE XREF: sub_408140+867↓j
.text:004088FB                 mov     ecx, [esp+4Ch+Str]
.text:004088FF                 lea     esi, [edx+ebp]
.text:00408902                 movsx   eax, byte ptr [esi+ecx]
.text:00408906                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408909                 cmp     eax, 21h
.text:0040890C                 ja      def_408912      ; jumptable 00408912 default case, cases 93,95,97-123
.text:00408912                 jmp     ds:jpt_408912[eax*4] ; switch jump
.text:00408912 ; ---------------------------------------------------------------------------
.text:00408919                 align 4
.text:0040891C jpt_408912      dd offset loc_40854B    ; DATA XREF: sub_408140+7D2↑r
.text:0040891C                 dd offset loc_40854B    ; jump table for switch statement
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset loc_40854B
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset loc_40854B
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset def_408912
.text:0040891C                 dd offset loc_40854B
.text:004089A4 ; ---------------------------------------------------------------------------
.text:004089A4
.text:004089A4 def_408912:                             ; CODE XREF: sub_408140+7CC↑j
.text:004089A4                                         ; sub_408140+7D2↑j
.text:004089A4                                         ; DATA XREF: ...
.text:004089A4                 inc     edx             ; jumptable 00408912 default case, cases 93,95,97-123
.text:004089A5                 cmp     edx, edi
.text:004089A7                 jb      loc_4088FB
.text:004089AD                 jmp     loc_4088BB
.text:004089B2 ; ---------------------------------------------------------------------------
.text:004089B2
.text:004089B2 loc_4089B2:                             ; CODE XREF: sub_408140+76E↑j
.text:004089B2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004089B6                 mov     [esp+4Ch+var_29], 0
.text:004089BB                 jnb     loc_4088E0
.text:004089C1                 mov     eax, [esp+4Ch+var_30]
.text:004089C5                 cmp     byte ptr [eax], 0
.text:004089C8                 jz      loc_4088E0
.text:004089CE
.text:004089CE loc_4089CE:                             ; CODE XREF: sub_408140+8AB↓j
.text:004089CE                 inc     [esp+4Ch+var_28]
.text:004089D2                 mov     esi, [esp+4Ch+var_28]
.text:004089D6                 lea     eax, [esi+ebp]
.text:004089D9                 cmp     eax, [esp+4Ch+arg_C]
.text:004089DD                 jnb     loc_4088E0
.text:004089E3                 mov     edi, [esp+4Ch+Str]
.text:004089E7                 cmp     byte ptr [eax+edi], 0
.text:004089EB                 jnz     short loc_4089CE
.text:004089ED                 jmp     loc_4088E0
.text:004089F2 ; ---------------------------------------------------------------------------
.text:004089F2
.text:004089F2 loc_4089F2:                             ; CODE XREF: sub_408140+765↑j
.text:004089F2                 mov     [esp+4Ch+var_29], 0
.text:004089F7                 jmp     loc_4088E0
.text:004089FC ; ---------------------------------------------------------------------------
.text:004089FC
.text:004089FC loc_4089FC:                             ; CODE XREF: sub_408140+72A↑j
.text:004089FC                 mov     edx, [esp+4Ch+Str]
.text:00408A00                 mov     [esp+4Ch+C], edx ; Str
.text:00408A03                 call    strlen
.text:00408A08                 mov     [esp+4Ch+arg_C], eax
.text:00408A0C                 jmp     loc_408870
.text:00408A11 ; ---------------------------------------------------------------------------
.text:00408A11
.text:00408A11 loc_408A11:                             ; CODE XREF: sub_408140+105↑j
.text:00408A11                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408A11                 mov     dl, bl          ; jumptable 00408245 case 92
.text:00408A13                 jmp     loc_408544
.text:00408A18 ; ---------------------------------------------------------------------------
.text:00408A18
.text:00408A18 loc_408A18:                             ; CODE XREF: sub_408140+105↑j
.text:00408A18                                         ; sub_408140+902↓j
.text:00408A18                                         ; DATA XREF: ...
.text:00408A18                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00408245 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408A1D                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:00408A1D                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408A23                 jmp     loc_40854B      ; jumptable 00408912 cases 91,92,94,96,124
.text:00408A28 ; ---------------------------------------------------------------------------
.text:00408A28
.text:00408A28 loc_408A28:                             ; CODE XREF: sub_408140+105↑j
.text:00408A28                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408A28                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00408245 cases 123,125
.text:00408A2D                 jz      short loc_408A44
.text:00408A2F                 cmp     [esp+4Ch+arg_C], 1
.text:00408A34
.text:00408A34 loc_408A34:                             ; CODE XREF: sub_408140+90C↓j
.text:00408A34                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:00408A34                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408A3A
.text:00408A3A loc_408A3A:                             ; CODE XREF: sub_408140+105↑j
.text:00408A3A                                         ; DATA XREF: sub_408140:jpt_408245↑o
.text:00408A3A                 test    ebp, ebp        ; jumptable 00408245 cases 35,126
.text:00408A3C                 jnz     def_408642      ; jumptable 00408245 cases 37,43-58,65-90,93,95,97-122
.text:00408A3C                                         ; jumptable 00408642 default case, cases 34-38,42-44,46,48-59
.text:00408A42                 jmp     short loc_408A18 ; jumptable 00408245 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408A44 ; ---------------------------------------------------------------------------
.text:00408A44
.text:00408A44 loc_408A44:                             ; CODE XREF: sub_408140+8ED↑j
.text:00408A44                 mov     esi, [esp+4Ch+Str]
.text:00408A48                 cmp     byte ptr [esi+1], 0
.text:00408A4C                 jmp     short loc_408A34
.text:00408A4E ; ---------------------------------------------------------------------------
.text:00408A4E
.text:00408A4E loc_408A4E:                             ; CODE XREF: sub_408140:loc_4081DF↑j
.text:00408A4E                 test    ebp, ebp
.text:00408A50                 jnz     short loc_408A5D
.text:00408A52                 cmp     [esp+4Ch+arg_10], 1
.text:00408A57                 jz      loc_40854B      ; jumptable 00408912 cases 91,92,94,96,124
.text:00408A5D
.text:00408A5D loc_408A5D:                             ; CODE XREF: sub_408140+910↑j
.text:00408A5D                 mov     esi, [esp+4Ch+var_1C]
.text:00408A61                 test    esi, esi
.text:00408A63                 jz      short loc_408A98
.text:00408A65                 mov     edi, [esp+4Ch+var_1C]
.text:00408A69                 movzx   eax, byte ptr [edi]
.text:00408A6C                 test    al, al
.text:00408A6E                 jz      short loc_408A98
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_408140+956↓j
.text:00408A70                 mov     ebp, [esp+4Ch+arg_4]
.text:00408A74                 cmp     [esp+4Ch+var_34], ebp
.text:00408A78                 jnb     short loc_408A85
.text:00408A7A                 mov     ecx, [esp+4Ch+arg_0]
.text:00408A7E                 mov     ebx, [esp+4Ch+var_34]
.text:00408A82                 mov     [ebx+ecx], al
.text:00408A85
.text:00408A85 loc_408A85:                             ; CODE XREF: sub_408140+938↑j
.text:00408A85                 inc     [esp+4Ch+var_1C]
.text:00408A89                 inc     [esp+4Ch+var_34]
.text:00408A8D                 mov     edx, [esp+4Ch+var_1C]
.text:00408A91                 movzx   eax, byte ptr [edx]
.text:00408A94                 test    al, al
.text:00408A96                 jnz     short loc_408A70
.text:00408A98
.text:00408A98 loc_408A98:                             ; CODE XREF: sub_408140+923↑j
.text:00408A98                                         ; sub_408140+92E↑j
.text:00408A98                 mov     eax, [esp+4Ch+arg_4]
.text:00408A9C                 cmp     [esp+4Ch+var_34], eax
.text:00408AA0                 jnb     short loc_408AAE
.text:00408AA2                 mov     edi, [esp+4Ch+arg_0]
.text:00408AA6                 mov     esi, [esp+4Ch+var_34]
.text:00408AAA                 mov     byte ptr [esi+edi], 0
.text:00408AAE
.text:00408AAE loc_408AAE:                             ; CODE XREF: sub_408140+960↑j
.text:00408AAE                 mov     eax, [esp+4Ch+var_34]
.text:00408AB2                 jmp     loc_40857F
.text:00408AB7 ; ---------------------------------------------------------------------------
.text:00408AB7
.text:00408AB7 loc_408AB7:                             ; CODE XREF: sub_408140+95↑j
.text:00408AB7                 mov     ebx, [esp+4Ch+Str]
.text:00408ABB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00408AC0                 jmp     loc_4081DF
.text:00408AC5 ; ---------------------------------------------------------------------------
.text:00408AC5
.text:00408AC5 loc_408AC5:                             ; CODE XREF: sub_408140+3D↑j
.text:00408AC5                                         ; DATA XREF: sub_408140:jpt_40817D↑o
.text:00408AC5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040817D case 2
.text:00408AC9                 cmp     [esp+4Ch+var_34], edx
.text:00408ACD                 jnb     short loc_408AD6
.text:00408ACF                 mov     ecx, [esp+4Ch+arg_0]
.text:00408AD3                 mov     byte ptr [ecx], 27h ; '''
.text:00408AD6
.text:00408AD6 loc_408AD6:                             ; CODE XREF: sub_408140+98D↑j
.text:00408AD6                 mov     [esp+4Ch+var_34], 1
.text:00408ADE                 mov     [esp+4Ch+var_1C], 40812Eh
.text:00408AE6                 jmp     loc_4081C6
.text:00408AEB ; ---------------------------------------------------------------------------
.text:00408AEB
.text:00408AEB loc_408AEB:                             ; CODE XREF: sub_408140+3D↑j
.text:00408AEB                                         ; DATA XREF: sub_408140:jpt_40817D↑o
.text:00408AEB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040817D case 4
.text:00408AF0                 jmp     def_40817D      ; jumptable 0040817D default case, cases 0,1
.text:00408AF5 ; ---------------------------------------------------------------------------
.text:00408AF5
.text:00408AF5 loc_408AF5:                             ; CODE XREF: sub_408140+3D↑j
.text:00408AF5                                         ; DATA XREF: sub_408140:jpt_40817D↑o
.text:00408AF5                 mov     [esp+4Ch+C], 408130h ; jumptable 0040817D cases 5,6
.text:00408AFC                 call    ds:libintl_gettext
.text:00408B02                 cmp     eax, 408130h
.text:00408B07                 mov     edi, eax
.text:00408B09                 jz      short loc_408B80
.text:00408B0B
.text:00408B0B loc_408B0B:                             ; CODE XREF: sub_408140+A45↓j
.text:00408B0B                                         ; sub_408140+A4C↓j
.text:00408B0B                 mov     [esp+4Ch+C], 40812Eh
.text:00408B12                 call    ds:libintl_gettext
.text:00408B18                 cmp     eax, 40812Eh
.text:00408B1D                 mov     edx, eax
.text:00408B1F                 jz      short loc_408B72
.text:00408B21
.text:00408B21 loc_408B21:                             ; CODE XREF: sub_408140+A37↓j
.text:00408B21                                         ; sub_408140+A3E↓j
.text:00408B21                 mov     [esp+4Ch+var_1C], edi
.text:00408B25                 cmp     byte ptr [edi], 0
.text:00408B28                 jz      short loc_408B58
.text:00408B2A
.text:00408B2A loc_408B2A:                             ; CODE XREF: sub_408140+A16↓j
.text:00408B2A                 mov     ecx, [esp+4Ch+arg_4]
.text:00408B2E                 cmp     [esp+4Ch+var_34], ecx
.text:00408B32                 jnb     short loc_408B47
.text:00408B34                 mov     ebp, [esp+4Ch+var_1C]
.text:00408B38                 mov     edi, [esp+4Ch+arg_0]
.text:00408B3C                 mov     esi, [esp+4Ch+var_34]
.text:00408B40                 movzx   ebx, byte ptr [ebp+0]
.text:00408B44                 mov     [esi+edi], bl
.text:00408B47
.text:00408B47 loc_408B47:                             ; CODE XREF: sub_408140+9F2↑j
.text:00408B47                 inc     [esp+4Ch+var_1C]
.text:00408B4B                 inc     [esp+4Ch+var_34]
.text:00408B4F                 mov     eax, [esp+4Ch+var_1C]
.text:00408B53                 cmp     byte ptr [eax], 0
.text:00408B56                 jnz     short loc_408B2A
.text:00408B58
.text:00408B58 loc_408B58:                             ; CODE XREF: sub_408140+9E8↑j
.text:00408B58                 mov     [esp+4Ch+var_21], 1
.text:00408B5D                 mov     [esp+4Ch+var_1C], edx
.text:00408B61                 mov     [esp+4Ch+C], edx ; Str
.text:00408B64                 call    strlen
.text:00408B69                 mov     [esp+4Ch+var_20], eax
.text:00408B6D                 jmp     def_40817D      ; jumptable 0040817D default case, cases 0,1
.text:00408B72 ; ---------------------------------------------------------------------------
.text:00408B72
.text:00408B72 loc_408B72:                             ; CODE XREF: sub_408140+9DF↑j
.text:00408B72                 cmp     [esp+4Ch+arg_10], 6
.text:00408B77                 jnz     short loc_408B21
.text:00408B79                 mov     edx, offset asc_40812C ; "\"'`"
.text:00408B7E                 jmp     short loc_408B21
.text:00408B80 ; ---------------------------------------------------------------------------
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: sub_408140+9C9↑j
.text:00408B80                 cmp     [esp+4Ch+arg_10], 6
.text:00408B85                 jnz     short loc_408B0B
.text:00408B87                 mov     edi, offset asc_40812C ; "\"'`"
.text:00408B8C                 jmp     loc_408B0B
.text:00408B8C sub_408140      endp
.text:00408B8C
.text:00408B91 ; ---------------------------------------------------------------------------
.text:00408B91                 jmp     short loc_408BA0
.text:00408B91 ; ---------------------------------------------------------------------------
.text:00408B93                 align 10h
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: .text:00408B91↑j
.text:00408BA0                 sub     esp, 0Ch
.text:00408BA3                 mov     [esp+4], ebx
.text:00408BA7                 mov     [esp+8], esi
.text:00408BAB                 call    _errno
.text:00408BB0                 mov     esi, [eax]
.text:00408BB2                 mov     dword ptr [esp], 24h ; '$'
.text:00408BB9                 call    sub_409490
.text:00408BBE                 mov     edx, [esp+10h]
.text:00408BC2                 mov     ebx, eax
.text:00408BC4                 test    edx, edx
.text:00408BC6                 jz      short loc_408C11
.text:00408BC8
.text:00408BC8 loc_408BC8:                             ; CODE XREF: .text:00408C16↓j
.text:00408BC8                 mov     ecx, [edx]
.text:00408BCA                 mov     [ebx], ecx
.text:00408BCC                 mov     ecx, [edx+4]
.text:00408BCF                 mov     [ebx+4], ecx
.text:00408BD2                 mov     ecx, [edx+8]
.text:00408BD5                 mov     [ebx+8], ecx
.text:00408BD8                 mov     ecx, [edx+0Ch]
.text:00408BDB                 mov     [ebx+0Ch], ecx
.text:00408BDE                 mov     ecx, [edx+10h]
.text:00408BE1                 mov     [ebx+10h], ecx
.text:00408BE4                 mov     ecx, [edx+14h]
.text:00408BE7                 mov     [ebx+14h], ecx
.text:00408BEA                 mov     ecx, [edx+18h]
.text:00408BED                 mov     [ebx+18h], ecx
.text:00408BF0                 mov     ecx, [edx+1Ch]
.text:00408BF3                 mov     [ebx+1Ch], ecx
.text:00408BF6                 mov     ecx, [edx+20h]
.text:00408BF9                 mov     [ebx+20h], ecx
.text:00408BFC                 call    _errno
.text:00408C01                 mov     [eax], esi
.text:00408C03                 mov     esi, [esp+8]
.text:00408C07                 mov     eax, ebx
.text:00408C09                 mov     ebx, [esp+4]
.text:00408C0D                 add     esp, 0Ch
.text:00408C10                 retn
.text:00408C11 ; ---------------------------------------------------------------------------
.text:00408C11
.text:00408C11 loc_408C11:                             ; CODE XREF: .text:00408BC6↑j
.text:00408C11                 mov     edx, offset dword_40C170
.text:00408C16                 jmp     short loc_408BC8
.text:00408C16 ; ---------------------------------------------------------------------------
.text:00408C18                 align 10h
.text:00408C20                 mov     eax, [esp+4]
.text:00408C24                 test    eax, eax
.text:00408C26                 jz      short loc_408C30
.text:00408C28
.text:00408C28 loc_408C28:                             ; CODE XREF: .text:00408C35↓j
.text:00408C28                 mov     eax, [eax]
.text:00408C2A                 retn
.text:00408C2A ; ---------------------------------------------------------------------------
.text:00408C2B                 align 10h
.text:00408C30
.text:00408C30 loc_408C30:                             ; CODE XREF: .text:00408C26↑j
.text:00408C30                 mov     eax, offset dword_40C170
.text:00408C35                 jmp     short loc_408C28
.text:00408C35 ; ---------------------------------------------------------------------------
.text:00408C37                 align 10h
.text:00408C40                 mov     edx, [esp+4]
.text:00408C44                 test    edx, edx
.text:00408C46                 jz      short loc_408C50
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: .text:00408C55↓j
.text:00408C48                 mov     ecx, [esp+8]
.text:00408C4C                 mov     [edx], ecx
.text:00408C4E                 retn
.text:00408C4E ; ---------------------------------------------------------------------------
.text:00408C4F                 align 10h
.text:00408C50
.text:00408C50 loc_408C50:                             ; CODE XREF: .text:00408C46↑j
.text:00408C50                 mov     edx, offset dword_40C170
.text:00408C55                 jmp     short loc_408C48
.text:00408C55 ; ---------------------------------------------------------------------------
.text:00408C57                 align 10h
.text:00408C60                 sub     esp, 8
.text:00408C63                 mov     eax, [esp+0Ch]
.text:00408C67                 movzx   ecx, byte ptr [esp+10h]
.text:00408C6C                 mov     [esp], ebx
.text:00408C6F                 mov     ebx, [esp+14h]
.text:00408C73                 mov     [esp+4], esi
.text:00408C77                 mov     dl, cl
.text:00408C79                 shr     dl, 5
.text:00408C7C                 movzx   edx, dl
.text:00408C7F                 shl     edx, 2
.text:00408C82                 test    eax, eax
.text:00408C84                 lea     esi, [edx+eax+4]
.text:00408C88                 jz      short loc_408CB0
.text:00408C8A
.text:00408C8A loc_408C8A:                             ; CODE XREF: .text:00408CB6↓j
.text:00408C8A                 mov     edx, [esi]
.text:00408C8C                 and     ecx, 1Fh
.text:00408C8F                 and     ebx, 1
.text:00408C92                 mov     eax, edx
.text:00408C94                 shr     eax, cl
.text:00408C96                 and     eax, 1
.text:00408C99                 xor     ebx, eax
.text:00408C9B                 shl     ebx, cl
.text:00408C9D                 xor     edx, ebx
.text:00408C9F                 mov     [esi], edx
.text:00408CA1                 mov     ebx, [esp]
.text:00408CA4                 mov     esi, [esp+4]
.text:00408CA8                 add     esp, 8
.text:00408CAB                 retn
.text:00408CAB ; ---------------------------------------------------------------------------
.text:00408CAC                 align 10h
.text:00408CB0
.text:00408CB0 loc_408CB0:                             ; CODE XREF: .text:00408C88↑j
.text:00408CB0                 lea     esi, dword_40C174[edx]
.text:00408CB6                 jmp     short loc_408C8A
.text:00408CB6 ; ---------------------------------------------------------------------------
.text:00408CB8                 align 10h
.text:00408CC0                 sub     esp, 2Ch
.text:00408CC3                 mov     [esp+24h], ebx
.text:00408CC7                 mov     ebx, [esp+40h]
.text:00408CCB                 mov     [esp+28h], esi
.text:00408CCF                 test    ebx, ebx
.text:00408CD1                 jz      short loc_408D20
.text:00408CD3
.text:00408CD3 loc_408CD3:                             ; CODE XREF: .text:00408D25↓j
.text:00408CD3                 call    _errno
.text:00408CD8                 mov     esi, [eax]
.text:00408CDA                 mov     [esp+14h], ebx
.text:00408CDE                 mov     edx, [ebx]
.text:00408CE0                 mov     ecx, [esp+38h]
.text:00408CE4                 mov     ebx, [esp+3Ch]
.text:00408CE8                 mov     [esp+10h], edx
.text:00408CEC                 mov     edx, [esp+34h]
.text:00408CF0                 mov     [esp+0Ch], ebx
.text:00408CF4                 mov     [esp+8], ecx
.text:00408CF8                 mov     [esp+4], edx
.text:00408CFC                 mov     edx, [esp+30h]
.text:00408D00                 mov     [esp], edx
.text:00408D03                 call    sub_408140
.text:00408D08                 mov     ebx, eax
.text:00408D0A                 call    _errno
.text:00408D0F                 mov     [eax], esi
.text:00408D11                 mov     esi, [esp+28h]
.text:00408D15                 mov     eax, ebx
.text:00408D17                 mov     ebx, [esp+24h]
.text:00408D1B                 add     esp, 2Ch
.text:00408D1E                 retn
.text:00408D1E ; ---------------------------------------------------------------------------
.text:00408D1F                 align 10h
.text:00408D20
.text:00408D20 loc_408D20:                             ; CODE XREF: .text:00408CD1↑j
.text:00408D20                 mov     ebx, offset dword_40C170
.text:00408D25                 jmp     short loc_408CD3
.text:00408D25 ; ---------------------------------------------------------------------------
.text:00408D27                 align 10h
.text:00408D30                 push    ebp
.text:00408D31                 push    edi
.text:00408D32                 push    esi
.text:00408D33                 push    ebx
.text:00408D34                 sub     esp, 2Ch
.text:00408D37                 mov     ebp, [esp+48h]
.text:00408D3B                 call    _errno
.text:00408D40                 mov     edx, [eax]
.text:00408D42                 test    ebp, ebp
.text:00408D44                 mov     ebx, ebp
.text:00408D46                 mov     [esp+28h], edx
.text:00408D4A                 jz      loc_408E00
.text:00408D50
.text:00408D50 loc_408D50:                             ; CODE XREF: .text:00408E05↓j
.text:00408D50                 call    _errno
.text:00408D55                 mov     edi, [eax]
.text:00408D57                 mov     esi, ebp
.text:00408D59                 mov     [esp+14h], ebx
.text:00408D5D                 mov     ecx, [ebx]
.text:00408D5F                 mov     dword ptr [esp], 0
.text:00408D66                 mov     edx, [esp+44h]
.text:00408D6A                 mov     dword ptr [esp+4], 0
.text:00408D72                 mov     eax, [esp+40h]
.text:00408D76                 mov     [esp+10h], ecx
.text:00408D7A                 mov     [esp+0Ch], edx
.text:00408D7E                 mov     [esp+8], eax
.text:00408D82                 call    sub_408140
.text:00408D87                 mov     ebx, eax
.text:00408D89                 call    _errno
.text:00408D8E                 mov     [eax], edi
.text:00408D90                 lea     edi, [ebx+1]
.text:00408D93                 mov     [esp], edi
.text:00408D96                 call    sub_409490
.text:00408D9B                 mov     [esp+24h], eax
.text:00408D9F                 test    ebp, ebp
.text:00408DA1                 jz      short loc_408DF2
.text:00408DA3
.text:00408DA3 loc_408DA3:                             ; CODE XREF: .text:00408DF7↓j
.text:00408DA3                 call    _errno
.text:00408DA8                 mov     ebp, [eax]
.text:00408DAA                 mov     [esp+14h], esi
.text:00408DAE                 mov     ecx, [esi]
.text:00408DB0                 mov     [esp+4], edi
.text:00408DB4                 mov     edx, [esp+44h]
.text:00408DB8                 mov     esi, [esp+24h]
.text:00408DBC                 mov     [esp+10h], ecx
.text:00408DC0                 mov     eax, [esp+40h]
.text:00408DC4                 mov     [esp+0Ch], edx
.text:00408DC8                 mov     [esp], esi
.text:00408DCB                 mov     [esp+8], eax
.text:00408DCF                 call    sub_408140
.text:00408DD4                 call    _errno
.text:00408DD9                 mov     [eax], ebp
.text:00408DDB                 call    _errno
.text:00408DE0                 mov     ebx, [esp+28h]
.text:00408DE4                 mov     [eax], ebx
.text:00408DE6                 mov     eax, [esp+24h]
.text:00408DEA                 add     esp, 2Ch
.text:00408DED                 pop     ebx
.text:00408DEE                 pop     esi
.text:00408DEF                 pop     edi
.text:00408DF0                 pop     ebp
.text:00408DF1                 retn
.text:00408DF2 ; ---------------------------------------------------------------------------
.text:00408DF2
.text:00408DF2 loc_408DF2:                             ; CODE XREF: .text:00408DA1↑j
.text:00408DF2                 mov     esi, offset dword_40C170
.text:00408DF7                 jmp     short loc_408DA3
.text:00408DF7 ; ---------------------------------------------------------------------------
.text:00408DF9                 align 10h
.text:00408E00
.text:00408E00 loc_408E00:                             ; CODE XREF: .text:00408D4A↑j
.text:00408E00                 mov     ebx, offset dword_40C170
.text:00408E05                 jmp     loc_408D50
.text:00408E05 ; ---------------------------------------------------------------------------
.text:00408E0A                 align 10h
.text:00408E10                 sub     esp, 1Ch
.text:00408E13                 mov     edx, [esp+24h]
.text:00408E17                 mov     dword ptr [esp+0Ch], offset dword_40C170
.text:00408E1F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408E27                 mov     [esp+4], edx
.text:00408E2B                 mov     edx, [esp+20h]
.text:00408E2F                 mov     [esp], edx
.text:00408E32                 call    sub_409280
.text:00408E37                 add     esp, 1Ch
.text:00408E3A                 retn
.text:00408E3A ; ---------------------------------------------------------------------------
.text:00408E3B                 align 10h
.text:00408E40                 sub     esp, 1Ch
.text:00408E43                 mov     edx, [esp+20h]
.text:00408E47                 mov     dword ptr [esp+0Ch], offset dword_40C170
.text:00408E4F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408E57                 mov     [esp+4], edx
.text:00408E5B                 mov     dword ptr [esp], 0
.text:00408E62                 call    sub_409280
.text:00408E67                 add     esp, 1Ch
.text:00408E6A                 retn
.text:00408E6A ; ---------------------------------------------------------------------------
.text:00408E6B                 align 10h
.text:00408E70                 push    ebp
.text:00408E71                 xor     eax, eax
.text:00408E73                 mov     ecx, 8
.text:00408E78                 push    edi
.text:00408E79                 push    esi
.text:00408E7A                 push    ebx
.text:00408E7B                 sub     esp, 0ACh
.text:00408E81                 mov     ebp, [esp+0C4h]
.text:00408E88                 cld
.text:00408E89                 lea     edi, [esp+14h]
.text:00408E8D                 mov     [esp+10h], ebp
.text:00408E91                 rep stosd
.text:00408E93                 mov     eax, [esp+30h]
.text:00408E97                 mov     edi, [esp+10h]
.text:00408E9B                 mov     esi, [esp+14h]
.text:00408E9F                 mov     [esp+60h], eax
.text:00408EA3                 mov     ebp, [esp+18h]
.text:00408EA7                 mov     eax, [esp+10h]
.text:00408EAB                 mov     [esp+40h], edi
.text:00408EAF                 mov     ecx, [esp+28h]
.text:00408EB3                 mov     edi, [esp+1Ch]
.text:00408EB7                 mov     [esp+44h], esi
.text:00408EBB                 mov     edx, [esp+2Ch]
.text:00408EBF                 mov     esi, [esp+20h]
.text:00408EC3                 mov     [esp+70h], eax
.text:00408EC7                 mov     ebx, [esp+24h]
.text:00408ECB                 mov     eax, [esp+14h]
.text:00408ECF                 mov     [esp+48h], ebp
.text:00408ED3                 mov     [esp+4Ch], edi
.text:00408ED7                 mov     [esp+50h], esi
.text:00408EDB                 mov     [esp+54h], ebx
.text:00408EDF                 mov     [esp+58h], ecx
.text:00408EE3                 mov     [esp+5Ch], edx
.text:00408EE7                 mov     [esp+74h], eax
.text:00408EEB                 mov     [esp+78h], ebp
.text:00408EEF                 mov     [esp+7Ch], edi
.text:00408EF3                 mov     [esp+80h], esi
.text:00408EFA                 mov     [esp+84h], ebx
.text:00408F01                 mov     ebx, [esp+30h]
.text:00408F05                 mov     [esp+8Ch], edx
.text:00408F0C                 mov     edx, [esp+0C8h]
.text:00408F13                 mov     [esp+88h], ecx
.text:00408F1A                 lea     ecx, [esp+70h]
.text:00408F1E                 mov     [esp+4], edx
.text:00408F22                 mov     edx, [esp+0C0h]
.text:00408F29                 mov     [esp+90h], ebx
.text:00408F30                 mov     [esp+0Ch], ecx
.text:00408F34                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408F3C                 mov     [esp], edx
.text:00408F3F                 call    sub_409280
.text:00408F44                 add     esp, 0ACh
.text:00408F4A                 pop     ebx
.text:00408F4B                 pop     esi
.text:00408F4C                 pop     edi
.text:00408F4D                 pop     ebp
.text:00408F4E                 retn
.text:00408F4E ; ---------------------------------------------------------------------------
.text:00408F4F                 align 10h
.text:00408F50                 push    ebp
.text:00408F51                 xor     eax, eax
.text:00408F53                 mov     ecx, 8
.text:00408F58                 push    edi
.text:00408F59                 push    esi
.text:00408F5A                 push    ebx
.text:00408F5B                 sub     esp, 0ACh
.text:00408F61                 mov     edx, [esp+0C4h]
.text:00408F68                 cld
.text:00408F69                 lea     edi, [esp+14h]
.text:00408F6D                 mov     [esp+10h], edx
.text:00408F71                 rep stosd
.text:00408F73                 mov     eax, [esp+30h]
.text:00408F77                 mov     ebp, [esp+10h]
.text:00408F7B                 mov     edi, [esp+14h]
.text:00408F7F                 mov     [esp+60h], eax
.text:00408F83                 mov     esi, [esp+20h]
.text:00408F87                 mov     eax, [esp+10h]
.text:00408F8B                 mov     [esp+40h], ebp
.text:00408F8F                 mov     ecx, [esp+28h]
.text:00408F93                 mov     ebp, [esp+18h]
.text:00408F97                 mov     [esp+44h], edi
.text:00408F9B                 mov     edx, [esp+2Ch]
.text:00408F9F                 mov     edi, [esp+1Ch]
.text:00408FA3                 mov     [esp+70h], eax
.text:00408FA7                 mov     ebx, [esp+24h]
.text:00408FAB                 mov     eax, [esp+14h]
.text:00408FAF                 mov     [esp+48h], ebp
.text:00408FB3                 mov     [esp+4Ch], edi
.text:00408FB7                 mov     [esp+50h], esi
.text:00408FBB                 mov     [esp+54h], ebx
.text:00408FBF                 mov     [esp+58h], ecx
.text:00408FC3                 mov     [esp+5Ch], edx
.text:00408FC7                 mov     [esp+74h], eax
.text:00408FCB                 mov     [esp+78h], ebp
.text:00408FCF                 mov     [esp+7Ch], edi
.text:00408FD3                 mov     [esp+80h], esi
.text:00408FDA                 mov     [esp+84h], ebx
.text:00408FE1                 mov     esi, [esp+30h]
.text:00408FE5                 lea     ebx, [esp+70h]
.text:00408FE9                 mov     [esp+8Ch], edx
.text:00408FF0                 mov     edx, [esp+0C8h]
.text:00408FF7                 mov     [esp+88h], ecx
.text:00408FFE                 mov     ecx, [esp+0CCh]
.text:00409005                 mov     [esp+4], edx
.text:00409009                 mov     edx, [esp+0C0h]
.text:00409010                 mov     [esp+90h], esi
.text:00409017                 mov     [esp+0Ch], ebx
.text:0040901B                 mov     [esp+8], ecx
.text:0040901F                 mov     [esp], edx
.text:00409022                 call    sub_409280
.text:00409027                 add     esp, 0ACh
.text:0040902D                 pop     ebx
.text:0040902E                 pop     esi
.text:0040902F                 pop     edi
.text:00409030                 pop     ebp
.text:00409031                 retn
.text:00409031 ; ---------------------------------------------------------------------------
.text:00409032                 align 10h
.text:00409040                 push    ebp
.text:00409041                 xor     eax, eax
.text:00409043                 mov     ecx, 8
.text:00409048                 push    edi
.text:00409049                 push    esi
.text:0040904A                 push    ebx
.text:0040904B                 sub     esp, 0ACh
.text:00409051                 mov     edi, [esp+0C0h]
.text:00409058                 cld
.text:00409059                 mov     [esp+10h], edi
.text:0040905D                 lea     edi, [esp+14h]
.text:00409061                 rep stosd
.text:00409063                 mov     eax, [esp+30h]
.text:00409067                 mov     esi, [esp+10h]
.text:0040906B                 mov     ebx, [esp+14h]
.text:0040906F                 mov     [esp+60h], eax
.text:00409073                 mov     ebp, [esp+18h]
.text:00409077                 mov     eax, [esp+10h]
.text:0040907B                 mov     [esp+40h], esi
.text:0040907F                 mov     edi, [esp+1Ch]
.text:00409083                 mov     esi, [esp+20h]
.text:00409087                 mov     [esp+44h], ebx
.text:0040908B                 mov     ecx, [esp+28h]
.text:0040908F                 mov     edx, [esp+2Ch]
.text:00409093                 mov     [esp+70h], eax
.text:00409097                 mov     ebx, [esp+24h]
.text:0040909B                 mov     eax, [esp+14h]
.text:0040909F                 mov     [esp+48h], ebp
.text:004090A3                 mov     [esp+4Ch], edi
.text:004090A7                 mov     [esp+50h], esi
.text:004090AB                 mov     [esp+54h], ebx
.text:004090AF                 mov     [esp+58h], ecx
.text:004090B3                 mov     [esp+5Ch], edx
.text:004090B7                 mov     [esp+74h], eax
.text:004090BB                 mov     [esp+78h], ebp
.text:004090BF                 mov     [esp+7Ch], edi
.text:004090C3                 mov     [esp+80h], esi
.text:004090CA                 mov     [esp+84h], ebx
.text:004090D1                 mov     [esp+8Ch], edx
.text:004090D8                 lea     edx, [esp+70h]
.text:004090DC                 mov     [esp+88h], ecx
.text:004090E3                 mov     ecx, [esp+30h]
.text:004090E7                 mov     [esp+0Ch], edx
.text:004090EB                 mov     edx, [esp+0C4h]
.text:004090F2                 mov     [esp+90h], ecx
.text:004090F9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00409101                 mov     [esp+4], edx
.text:00409105                 mov     dword ptr [esp], 0
.text:0040910C                 call    sub_409280
.text:00409111                 add     esp, 0ACh
.text:00409117                 pop     ebx
.text:00409118                 pop     esi
.text:00409119                 pop     edi
.text:0040911A                 pop     ebp
.text:0040911B                 retn
.text:0040911B ; ---------------------------------------------------------------------------
.text:0040911C                 align 10h
.text:00409120                 push    edi
.text:00409121                 push    esi
.text:00409122                 push    ebx
.text:00409123                 sub     esp, 40h
.text:00409126                 mov     edx, ds:dword_40C17C
.text:0040912C                 mov     ebx, ds:dword_40C170
.text:00409132                 mov     esi, ds:dword_40C178
.text:00409138                 mov     edi, ds:dword_40C174
.text:0040913E                 mov     [esp+1Ch], edx
.text:00409142                 mov     ecx, ds:dword_40C180
.text:00409148                 mov     edx, ds:dword_40C190
.text:0040914E                 mov     [esp+10h], ebx
.text:00409152                 mov     ebx, ds:dword_40C184
.text:00409158                 mov     [esp+30h], edx
.text:0040915C                 movzx   edx, byte ptr [esp+54h]
.text:00409161                 mov     [esp+18h], esi
.text:00409165                 mov     esi, ds:dword_40C18C
.text:0040916B                 mov     [esp+14h], edi
.text:0040916F                 mov     edi, ds:dword_40C188
.text:00409175                 mov     [esp+20h], ecx
.text:00409179                 mov     cl, dl
.text:0040917B                 shr     cl, 5
.text:0040917E                 mov     [esp+24h], ebx
.text:00409182                 movzx   ebx, cl
.text:00409185                 mov     [esp+2Ch], esi
.text:00409189                 lea     esi, [esp+10h]
.text:0040918D                 mov     [esp+28h], edi
.text:00409191                 lea     edi, [esi+ebx*4]
.text:00409194                 mov     ebx, edx
.text:00409196                 mov     edx, [edi+4]
.text:00409199                 and     ebx, 1Fh
.text:0040919C                 mov     cl, bl
.text:0040919E                 mov     eax, edx
.text:004091A0                 shr     eax, cl
.text:004091A2                 and     eax, 1
.text:004091A5                 xor     eax, 1
.text:004091A8                 shl     eax, cl
.text:004091AA                 xor     edx, eax
.text:004091AC                 mov     [edi+4], edx
.text:004091AF                 mov     edx, [esp+50h]
.text:004091B3                 mov     [esp+0Ch], esi
.text:004091B7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004091BF                 mov     [esp+4], edx
.text:004091C3                 mov     dword ptr [esp], 0
.text:004091CA                 call    sub_409280
.text:004091CF                 add     esp, 40h
.text:004091D2                 pop     ebx
.text:004091D3                 pop     esi
.text:004091D4                 pop     edi
.text:004091D5                 retn
.text:004091D5 ; ---------------------------------------------------------------------------
.text:004091D6                 align 10h
.text:004091E0
.text:004091E0 ; =============== S U B R O U T I N E =======================================
.text:004091E0
.text:004091E0
.text:004091E0 ; int __cdecl sub_4091E0(char *)
.text:004091E0 sub_4091E0      proc near               ; CODE XREF: sub_407F70+64↑p
.text:004091E0
.text:004091E0 var_4C          = dword ptr -4Ch
.text:004091E0 var_48          = dword ptr -48h
.text:004091E0 var_44          = dword ptr -44h
.text:004091E0 var_40          = dword ptr -40h
.text:004091E0 var_3C          = dword ptr -3Ch
.text:004091E0 var_38          = dword ptr -38h
.text:004091E0 var_34          = dword ptr -34h
.text:004091E0 var_30          = dword ptr -30h
.text:004091E0 var_2C          = dword ptr -2Ch
.text:004091E0 var_28          = dword ptr -28h
.text:004091E0 var_24          = dword ptr -24h
.text:004091E0 var_20          = dword ptr -20h
.text:004091E0 var_1C          = dword ptr -1Ch
.text:004091E0 arg_0           = dword ptr  4
.text:004091E0
.text:004091E0                 sub     esp, 4Ch
.text:004091E3                 mov     ecx, ds:dword_40C170
.text:004091E9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004091F1                 mov     edx, ds:dword_40C174
.text:004091F7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004091FE                 mov     [esp+4Ch+var_3C], ecx
.text:00409202                 mov     ecx, ds:dword_40C17C
.text:00409208                 mov     [esp+4Ch+var_38], edx
.text:0040920C                 mov     edx, ds:dword_40C178
.text:00409212                 mov     [esp+4Ch+var_30], ecx
.text:00409216                 mov     ecx, ds:dword_40C180
.text:0040921C                 mov     eax, edx
.text:0040921E                 shr     eax, 1Ah
.text:00409221                 and     eax, 1
.text:00409224                 xor     eax, 1
.text:00409227                 mov     [esp+4Ch+var_2C], ecx
.text:0040922B                 shl     eax, 1Ah
.text:0040922E                 mov     ecx, ds:dword_40C184
.text:00409234                 xor     edx, eax
.text:00409236                 mov     [esp+4Ch+var_34], edx
.text:0040923A                 mov     edx, [esp+4Ch+arg_0]
.text:0040923E                 mov     [esp+4Ch+var_28], ecx
.text:00409242                 mov     ecx, ds:dword_40C188
.text:00409248                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040924C                 mov     [esp+4Ch+var_24], ecx
.text:00409250                 mov     ecx, ds:dword_40C18C
.text:00409256                 mov     [esp+4Ch+var_20], ecx
.text:0040925A                 mov     ecx, ds:dword_40C190
.text:00409260                 mov     [esp+4Ch+var_1C], ecx
.text:00409264                 lea     ecx, [esp+4Ch+var_3C]
.text:00409268                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040926C                 call    sub_409280
.text:00409271                 add     esp, 4Ch
.text:00409274                 retn
.text:00409274 sub_4091E0      endp
.text:00409274
.text:00409274 ; ---------------------------------------------------------------------------
.text:00409275                 align 10h
.text:00409280
.text:00409280 ; =============== S U B R O U T I N E =======================================
.text:00409280
.text:00409280
.text:00409280 ; int __cdecl sub_409280(int, char *, int, int)
.text:00409280 sub_409280      proc near               ; CODE XREF: .text:00408E32↑p
.text:00409280                                         ; .text:00408E62↑p ...
.text:00409280
.text:00409280 Block           = dword ptr -2Ch
.text:00409280 var_28          = dword ptr -28h
.text:00409280 Str             = dword ptr -24h
.text:00409280 var_20          = dword ptr -20h
.text:00409280 var_1C          = dword ptr -1Ch
.text:00409280 var_18          = dword ptr -18h
.text:00409280 var_14          = dword ptr -14h
.text:00409280 arg_0           = dword ptr  4
.text:00409280 arg_4           = dword ptr  8
.text:00409280 arg_8           = dword ptr  0Ch
.text:00409280 arg_C           = dword ptr  10h
.text:00409280
.text:00409280                 push    ebp
.text:00409281                 push    edi
.text:00409282                 push    esi
.text:00409283                 push    ebx
.text:00409284                 sub     esp, 1Ch
.text:00409287                 call    _errno
.text:0040928C                 mov     edx, [eax]
.text:0040928E                 mov     eax, [esp+2Ch+arg_0]
.text:00409292                 mov     [esp+2Ch+var_14], edx
.text:00409296                 test    eax, eax
.text:00409298                 js      loc_40943A
.text:0040929E                 mov     eax, [esp+2Ch+arg_0]
.text:004092A2                 cmp     dword_40B860, eax
.text:004092A8                 ja      short loc_409320
.text:004092AA                 mov     esi, eax
.text:004092AC                 inc     esi
.text:004092AD                 cmp     esi, 1FFFFFFFh
.text:004092B3                 ja      loc_40943F
.text:004092B9                 mov     ebx, off_40B86C
.text:004092BF                 cmp     ebx, offset dword_40B864
.text:004092C5                 jz      loc_409411
.text:004092CB
.text:004092CB loc_4092CB:                             ; CODE XREF: sub_409280+1B5↓j
.text:004092CB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004092CE                 lea     ecx, ds:0[esi*8]
.text:004092D5                 mov     ebp, esi
.text:004092D7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004092DB                 call    sub_409520
.text:004092E0                 mov     off_40B86C, eax
.text:004092E5                 mov     ebx, dword_40B860
.text:004092EB                 sub     ebp, ebx
.text:004092ED                 lea     edi, [eax+ebx*8]
.text:004092F0                 lea     eax, ds:0[ebp*8]
.text:004092F7                 cmp     eax, 7
.text:004092FA                 jbe     short loc_409310
.text:004092FC                 test    edi, 4
.text:00409302                 jz      short loc_409310
.text:00409304                 mov     dword ptr [edi], 0
.text:0040930A                 sub     eax, 4
.text:0040930D                 add     edi, 4
.text:00409310
.text:00409310 loc_409310:                             ; CODE XREF: sub_409280+7A↑j
.text:00409310                                         ; sub_409280+82↑j
.text:00409310                 cld
.text:00409311                 mov     ecx, eax
.text:00409313                 shr     ecx, 2
.text:00409316                 xor     eax, eax
.text:00409318                 rep stosd
.text:0040931A                 mov     dword_40B860, esi
.text:00409320
.text:00409320 loc_409320:                             ; CODE XREF: sub_409280+28↑j
.text:00409320                 mov     esi, off_40B86C
.text:00409326                 mov     eax, [esp+2Ch+arg_0]
.text:0040932A                 mov     ebp, [esi+eax*8]
.text:0040932D                 mov     edi, [esi+eax*8+4]
.text:00409331                 mov     esi, [esp+2Ch+arg_C]
.text:00409335                 test    esi, esi
.text:00409337                 jz      loc_409407
.text:0040933D
.text:0040933D loc_40933D:                             ; CODE XREF: sub_409280+18C↓j
.text:0040933D                 call    _errno
.text:00409342                 mov     ebx, [eax]
.text:00409344                 mov     [esp+2Ch+var_18], esi ; int
.text:00409348                 mov     ecx, [esi]
.text:0040934A                 mov     [esp+2Ch+Block], edi ; int
.text:0040934D                 mov     edx, [esp+2Ch+arg_8]
.text:00409351                 mov     [esp+2Ch+var_28], ebp ; int
.text:00409355                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00409359                 mov     ecx, [esp+2Ch+arg_4]
.text:0040935D                 mov     [esp+2Ch+var_20], edx ; int
.text:00409361                 mov     [esp+2Ch+Str], ecx ; Str
.text:00409365                 call    sub_408140
.text:0040936A                 mov     esi, eax
.text:0040936C                 call    _errno
.text:00409371                 mov     [eax], ebx
.text:00409373                 cmp     ebp, esi
.text:00409375                 ja      short loc_4093EB
.text:00409377                 lea     ebp, [esi+1]
.text:0040937A                 mov     ebx, off_40B86C
.text:00409380                 cmp     edi, offset unk_40C070
.text:00409386                 mov     esi, [esp+2Ch+arg_0]
.text:0040938A                 mov     [ebx+esi*8], ebp
.text:0040938D                 jz      short loc_40939D
.text:0040938F                 mov     [esp+2Ch+Block], edi ; Block
.text:00409392                 call    free
.text:00409397                 mov     ebx, off_40B86C
.text:0040939D
.text:0040939D loc_40939D:                             ; CODE XREF: sub_409280+10D↑j
.text:0040939D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004093A0                 call    sub_409490
.text:004093A5                 mov     esi, [esp+2Ch+arg_C]
.text:004093A9                 mov     edi, eax
.text:004093AB                 mov     eax, [esp+2Ch+arg_0]
.text:004093AF                 test    esi, esi
.text:004093B1                 mov     [ebx+eax*8+4], edi
.text:004093B5                 jz      short loc_409400
.text:004093B7
.text:004093B7 loc_4093B7:                             ; CODE XREF: sub_409280+185↓j
.text:004093B7                 call    _errno
.text:004093BC                 mov     ebx, [eax]
.text:004093BE                 mov     [esp+2Ch+var_18], esi ; int
.text:004093C2                 mov     ecx, [esi]
.text:004093C4                 mov     [esp+2Ch+Block], edi ; int
.text:004093C7                 mov     edx, [esp+2Ch+arg_8]
.text:004093CB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004093CF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004093D3                 mov     ecx, [esp+2Ch+arg_4]
.text:004093D7                 mov     [esp+2Ch+var_20], edx ; int
.text:004093DB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004093DF                 call    sub_408140
.text:004093E4                 call    _errno
.text:004093E9                 mov     [eax], ebx
.text:004093EB
.text:004093EB loc_4093EB:                             ; CODE XREF: sub_409280+F5↑j
.text:004093EB                 call    _errno
.text:004093F0                 mov     ebp, [esp+2Ch+var_14]
.text:004093F4                 mov     [eax], ebp
.text:004093F6                 add     esp, 1Ch
.text:004093F9                 mov     eax, edi
.text:004093FB                 pop     ebx
.text:004093FC                 pop     esi
.text:004093FD                 pop     edi
.text:004093FE                 pop     ebp
.text:004093FF                 retn
.text:00409400 ; ---------------------------------------------------------------------------
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: sub_409280+135↑j
.text:00409400                 mov     esi, offset dword_40C170
.text:00409405                 jmp     short loc_4093B7
.text:00409407 ; ---------------------------------------------------------------------------
.text:00409407
.text:00409407 loc_409407:                             ; CODE XREF: sub_409280+B7↑j
.text:00409407                 mov     esi, offset dword_40C170
.text:0040940C                 jmp     loc_40933D
.text:00409411 ; ---------------------------------------------------------------------------
.text:00409411
.text:00409411 loc_409411:                             ; CODE XREF: sub_409280+45↑j
.text:00409411                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00409418                 call    sub_409490
.text:0040941D                 mov     off_40B86C, eax
.text:00409422                 mov     edi, dword_40B864
.text:00409428                 mov     ebx, eax
.text:0040942A                 mov     ecx, off_40B868
.text:00409430                 mov     [eax], edi
.text:00409432                 mov     [eax+4], ecx
.text:00409435                 jmp     loc_4092CB
.text:0040943A ; ---------------------------------------------------------------------------
.text:0040943A
.text:0040943A loc_40943A:                             ; CODE XREF: sub_409280+18↑j
.text:0040943A                 call    abort
.text:0040943F ; ---------------------------------------------------------------------------
.text:0040943F
.text:0040943F loc_40943F:                             ; CODE XREF: sub_409280+33↑j
.text:0040943F                 call    sub_408070
.text:0040943F sub_409280      endp
.text:0040943F
.text:0040943F ; ---------------------------------------------------------------------------
.text:00409444                 align 10h
.text:00409450
.text:00409450 ; =============== S U B R O U T I N E =======================================
.text:00409450
.text:00409450
.text:00409450 sub_409450      proc near
.text:00409450
.text:00409450 Size            = dword ptr -0Ch
.text:00409450 var_4           = dword ptr -4
.text:00409450 arg_0           = dword ptr  4
.text:00409450 arg_4           = dword ptr  8
.text:00409450
.text:00409450                 sub     esp, 0Ch
.text:00409453                 xor     edx, edx
.text:00409455                 mov     ecx, [esp+0Ch+arg_4]
.text:00409459                 mov     [esp+0Ch+var_4], ebx
.text:0040945D                 mov     eax, 0FFFFFFFFh
.text:00409462                 mov     ebx, [esp+0Ch+arg_0]
.text:00409466                 div     ecx
.text:00409468                 cmp     eax, ebx
.text:0040946A                 jb      short loc_409489
.text:0040946C                 mov     edx, ebx
.text:0040946E                 imul    edx, ecx
.text:00409471                 mov     [esp+0Ch+Size], edx ; Size
.text:00409474                 call    malloc
.text:00409479                 test    eax, eax
.text:0040947B                 jz      short loc_409485
.text:0040947D
.text:0040947D loc_40947D:                             ; CODE XREF: sub_409450+37↓j
.text:0040947D                 mov     ebx, [esp+0Ch+var_4]
.text:00409481                 add     esp, 0Ch
.text:00409484                 retn
.text:00409485 ; ---------------------------------------------------------------------------
.text:00409485
.text:00409485 loc_409485:                             ; CODE XREF: sub_409450+2B↑j
.text:00409485                 test    ebx, ebx
.text:00409487                 jz      short loc_40947D
.text:00409489
.text:00409489 loc_409489:                             ; CODE XREF: sub_409450+1A↑j
.text:00409489                 call    sub_408070
.text:00409489 sub_409450      endp
.text:00409489
.text:00409489 ; ---------------------------------------------------------------------------
.text:0040948E                 align 10h
.text:00409490
.text:00409490 ; =============== S U B R O U T I N E =======================================
.text:00409490
.text:00409490
.text:00409490 ; int __cdecl sub_409490(size_t)
.text:00409490 sub_409490      proc near               ; CODE XREF: .text:00408BB9↑p
.text:00409490                                         ; .text:00408D96↑p ...
.text:00409490
.text:00409490 Size            = dword ptr -0Ch
.text:00409490 var_4           = dword ptr -4
.text:00409490 arg_0           = dword ptr  4
.text:00409490
.text:00409490                 sub     esp, 0Ch
.text:00409493                 mov     [esp+0Ch+var_4], ebx
.text:00409497                 mov     ebx, [esp+0Ch+arg_0]
.text:0040949B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040949E                 call    malloc
.text:004094A3                 test    eax, eax
.text:004094A5                 jz      short loc_4094B0
.text:004094A7
.text:004094A7 loc_4094A7:                             ; CODE XREF: sub_409490+22↓j
.text:004094A7                 mov     ebx, [esp+0Ch+var_4]
.text:004094AB                 add     esp, 0Ch
.text:004094AE                 retn
.text:004094AE ; ---------------------------------------------------------------------------
.text:004094AF                 align 10h
.text:004094B0
.text:004094B0 loc_4094B0:                             ; CODE XREF: sub_409490+15↑j
.text:004094B0                 test    ebx, ebx
.text:004094B2                 jz      short loc_4094A7
.text:004094B4                 call    sub_408070
.text:004094B4 sub_409490      endp
.text:004094B4
.text:004094B4 ; ---------------------------------------------------------------------------
.text:004094B9                 align 10h
.text:004094C0                 sub     esp, 1Ch
.text:004094C3                 xor     edx, edx
.text:004094C5                 mov     eax, 0FFFFFFFFh
.text:004094CA                 mov     [esp+14h], ebx
.text:004094CE                 mov     ecx, [esp+20h]
.text:004094D2                 mov     ebx, [esp+28h]
.text:004094D6                 mov     [esp+18h], esi
.text:004094DA                 mov     esi, [esp+24h]
.text:004094DE                 div     ebx
.text:004094E0                 cmp     eax, esi
.text:004094E2                 jb      short loc_409514
.text:004094E4                 mov     [esp], ecx
.text:004094E7                 mov     edx, esi
.text:004094E9                 imul    edx, ebx
.text:004094EC                 mov     [esp+4], edx
.text:004094F0                 call    realloc
.text:004094F5                 test    eax, eax
.text:004094F7                 mov     ecx, eax
.text:004094F9                 jz      short loc_409510
.text:004094FB
.text:004094FB loc_4094FB:                             ; CODE XREF: .text:00409512↓j
.text:004094FB                 mov     ebx, [esp+14h]
.text:004094FF                 mov     eax, ecx
.text:00409501                 mov     esi, [esp+18h]
.text:00409505                 add     esp, 1Ch
.text:00409508                 retn
.text:00409508 ; ---------------------------------------------------------------------------
.text:00409509                 align 10h
.text:00409510
.text:00409510 loc_409510:                             ; CODE XREF: .text:004094F9↑j
.text:00409510                 test    esi, esi
.text:00409512                 jz      short loc_4094FB
.text:00409514
.text:00409514 loc_409514:                             ; CODE XREF: .text:004094E2↑j
.text:00409514                 call    sub_408070
.text:00409514 ; ---------------------------------------------------------------------------
.text:00409519                 align 10h
.text:00409520
.text:00409520 ; =============== S U B R O U T I N E =======================================
.text:00409520
.text:00409520
.text:00409520 ; int __cdecl sub_409520(void *, size_t)
.text:00409520 sub_409520      proc near               ; CODE XREF: sub_409280+5B↑p
.text:00409520
.text:00409520 Block           = dword ptr -0Ch
.text:00409520 Size            = dword ptr -8
.text:00409520 var_4           = dword ptr -4
.text:00409520 arg_0           = dword ptr  4
.text:00409520 arg_4           = dword ptr  8
.text:00409520
.text:00409520                 sub     esp, 0Ch
.text:00409523                 mov     edx, [esp+0Ch+arg_0]
.text:00409527                 mov     [esp+0Ch+var_4], ebx
.text:0040952B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040952F                 mov     [esp+0Ch+Block], edx ; Block
.text:00409532                 mov     [esp+0Ch+Size], ebx ; Size
.text:00409536                 call    realloc
.text:0040953B                 test    eax, eax
.text:0040953D                 jz      short loc_409547
.text:0040953F
.text:0040953F loc_40953F:                             ; CODE XREF: sub_409520+29↓j
.text:0040953F                 mov     ebx, [esp+0Ch+var_4]
.text:00409543                 add     esp, 0Ch
.text:00409546                 retn
.text:00409547 ; ---------------------------------------------------------------------------
.text:00409547
.text:00409547 loc_409547:                             ; CODE XREF: sub_409520+1D↑j
.text:00409547                 test    ebx, ebx
.text:00409549                 jz      short loc_40953F
.text:0040954B                 call    sub_408070
.text:0040954B sub_409520      endp
.text:0040954B
.text:00409550 ; ---------------------------------------------------------------------------
.text:00409550                 jmp     sub_4096A0
.text:00409550 ; ---------------------------------------------------------------------------
.text:00409555                 align 10h
.text:00409560                 sub     esp, 0Ch
.text:00409563                 mov     edx, [esp+14h]
.text:00409567                 mov     dword ptr [esp+8], 1
.text:0040956F                 mov     [esp+4], edx
.text:00409573                 mov     edx, [esp+10h]
.text:00409577                 mov     [esp], edx
.text:0040957A                 call    sub_4096A0
.text:0040957F                 add     esp, 0Ch
.text:00409582                 retn
.text:00409582 ; ---------------------------------------------------------------------------
.text:00409583                 align 10h
.text:00409590                 sub     esp, 1Ch
.text:00409593                 mov     [esp+18h], ebx
.text:00409597                 mov     ebx, [esp+20h]
.text:0040959B                 mov     [esp], ebx
.text:0040959E                 call    malloc
.text:004095A3                 test    eax, eax
.text:004095A5                 jz      short loc_4095C3
.text:004095A7
.text:004095A7 loc_4095A7:                             ; CODE XREF: .text:004095C5↓j
.text:004095A7                 mov     [esp+8], ebx
.text:004095AB                 mov     dword ptr [esp+4], 0
.text:004095B3                 mov     [esp], eax
.text:004095B6                 call    memset
.text:004095BB                 mov     ebx, [esp+18h]
.text:004095BF                 add     esp, 1Ch
.text:004095C2                 retn
.text:004095C3 ; ---------------------------------------------------------------------------
.text:004095C3
.text:004095C3 loc_4095C3:                             ; CODE XREF: .text:004095A5↑j
.text:004095C3                 test    ebx, ebx
.text:004095C5                 jz      short loc_4095A7
.text:004095C7                 call    sub_408070
.text:004095C7 ; ---------------------------------------------------------------------------
.text:004095CC                 align 10h
.text:004095D0                 sub     esp, 0Ch
.text:004095D3                 xor     edx, edx
.text:004095D5                 mov     ecx, [esp+14h]
.text:004095D9                 mov     [esp+8], ebx
.text:004095DD                 mov     eax, 0FFFFFFFFh
.text:004095E2                 mov     ebx, [esp+10h]
.text:004095E6                 div     ecx
.text:004095E8                 cmp     eax, ebx
.text:004095EA                 jb      short loc_409608
.text:004095EC                 mov     [esp+4], ecx
.text:004095F0                 mov     [esp], ebx
.text:004095F3                 call    calloc
.text:004095F8                 test    eax, eax
.text:004095FA                 jz      short loc_409604
.text:004095FC
.text:004095FC loc_4095FC:                             ; CODE XREF: .text:00409606↓j
.text:004095FC                 mov     ebx, [esp+8]
.text:00409600                 add     esp, 0Ch
.text:00409603                 retn
.text:00409604 ; ---------------------------------------------------------------------------
.text:00409604
.text:00409604 loc_409604:                             ; CODE XREF: .text:004095FA↑j
.text:00409604                 test    ebx, ebx
.text:00409606                 jz      short loc_4095FC
.text:00409608
.text:00409608 loc_409608:                             ; CODE XREF: .text:004095EA↑j
.text:00409608                 call    sub_408070
.text:00409608 ; ---------------------------------------------------------------------------
.text:0040960D                 align 10h
.text:00409610                 sub     esp, 1Ch
.text:00409613                 mov     [esp+18h], ebx
.text:00409617                 mov     ebx, [esp+24h]
.text:0040961B                 mov     [esp], ebx
.text:0040961E                 call    malloc
.text:00409623                 test    eax, eax
.text:00409625                 mov     edx, eax
.text:00409627                 jz      short loc_409645
.text:00409629
.text:00409629 loc_409629:                             ; CODE XREF: .text:00409647↓j
.text:00409629                 mov     [esp+8], ebx
.text:0040962D                 mov     ecx, [esp+20h]
.text:00409631                 mov     [esp], edx
.text:00409634                 mov     [esp+4], ecx
.text:00409638                 call    memcpy
.text:0040963D                 mov     ebx, [esp+18h]
.text:00409641                 add     esp, 1Ch
.text:00409644                 retn
.text:00409645 ; ---------------------------------------------------------------------------
.text:00409645
.text:00409645 loc_409645:                             ; CODE XREF: .text:00409627↑j
.text:00409645                 test    ebx, ebx
.text:00409647                 jz      short loc_409629
.text:00409649                 call    sub_408070
.text:00409649 ; ---------------------------------------------------------------------------
.text:0040964E                 align 10h
.text:00409650                 sub     esp, 1Ch
.text:00409653                 mov     [esp+18h], esi
.text:00409657                 mov     esi, [esp+20h]
.text:0040965B                 mov     [esp+14h], ebx
.text:0040965F                 mov     [esp], esi
.text:00409662                 call    strlen
.text:00409667                 lea     ebx, [eax+1]
.text:0040966A                 mov     [esp], ebx
.text:0040966D                 call    malloc
.text:00409672                 test    eax, eax
.text:00409674                 jz      short loc_409692
.text:00409676
.text:00409676 loc_409676:                             ; CODE XREF: .text:00409694↓j
.text:00409676                 mov     [esp+8], ebx
.text:0040967A                 mov     [esp+4], esi
.text:0040967E                 mov     [esp], eax
.text:00409681                 call    memcpy
.text:00409686                 mov     ebx, [esp+14h]
.text:0040968A                 mov     esi, [esp+18h]
.text:0040968E                 add     esp, 1Ch
.text:00409691                 retn
.text:00409692 ; ---------------------------------------------------------------------------
.text:00409692
.text:00409692 loc_409692:                             ; CODE XREF: .text:00409674↑j
.text:00409692                 test    ebx, ebx
.text:00409694                 jz      short loc_409676
.text:00409696                 call    sub_408070
.text:00409696 ; ---------------------------------------------------------------------------
.text:0040969B                 align 10h
.text:004096A0
.text:004096A0 ; =============== S U B R O U T I N E =======================================
.text:004096A0
.text:004096A0
.text:004096A0 ; int __cdecl sub_4096A0(void *, int, int)
.text:004096A0 sub_4096A0      proc near               ; CODE XREF: .text:00409550↑j
.text:004096A0                                         ; .text:0040957A↑p
.text:004096A0
.text:004096A0 Block           = dword ptr -1Ch
.text:004096A0 Size            = dword ptr -18h
.text:004096A0 var_C           = dword ptr -0Ch
.text:004096A0 var_8           = dword ptr -8
.text:004096A0 var_4           = dword ptr -4
.text:004096A0 arg_0           = dword ptr  4
.text:004096A0 arg_4           = dword ptr  8
.text:004096A0 arg_8           = dword ptr  0Ch
.text:004096A0
.text:004096A0                 sub     esp, 1Ch
.text:004096A3                 mov     [esp+1Ch+var_8], esi
.text:004096A7                 mov     esi, [esp+1Ch+arg_0]
.text:004096AB                 mov     [esp+1Ch+var_4], edi
.text:004096AF                 mov     edi, [esp+1Ch+arg_4]
.text:004096B3                 test    esi, esi
.text:004096B5                 mov     [esp+1Ch+var_C], ebx
.text:004096B9                 mov     ecx, [edi]
.text:004096BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004096BF                 jz      short loc_409700
.text:004096C1                 xor     edx, edx
.text:004096C3                 mov     eax, 7FFFFFFFh
.text:004096C8                 div     ebx
.text:004096CA                 cmp     eax, ecx
.text:004096CC                 jb      short loc_4096F9
.text:004096CE                 add     ecx, ecx
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: sub_4096A0+62↓j
.text:004096D0                                         ; sub_4096A0+71↓j ...
.text:004096D0                 mov     [edi], ecx
.text:004096D2                 imul    ebx, ecx
.text:004096D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004096D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004096DC                 call    realloc
.text:004096E1                 test    eax, eax
.text:004096E3                 jz      short loc_4096F5
.text:004096E5
.text:004096E5 loc_4096E5:                             ; CODE XREF: sub_4096A0+57↓j
.text:004096E5                 mov     ebx, [esp+1Ch+var_C]
.text:004096E9                 mov     esi, [esp+1Ch+var_8]
.text:004096ED                 mov     edi, [esp+1Ch+var_4]
.text:004096F1                 add     esp, 1Ch
.text:004096F4                 retn
.text:004096F5 ; ---------------------------------------------------------------------------
.text:004096F5
.text:004096F5 loc_4096F5:                             ; CODE XREF: sub_4096A0+43↑j
.text:004096F5                 test    ebx, ebx
.text:004096F7                 jz      short loc_4096E5
.text:004096F9
.text:004096F9 loc_4096F9:                             ; CODE XREF: sub_4096A0+2C↑j
.text:004096F9                 call    sub_408070
.text:004096F9 ; ---------------------------------------------------------------------------
.text:004096FE                 align 10h
.text:00409700
.text:00409700 loc_409700:                             ; CODE XREF: sub_4096A0+1F↑j
.text:00409700                 test    ecx, ecx
.text:00409702                 jnz     short loc_4096D0
.text:00409704                 xor     edx, edx
.text:00409706                 mov     eax, 40h ; '@'
.text:0040970B                 div     ebx
.text:0040970D                 test    eax, eax
.text:0040970F                 mov     ecx, eax
.text:00409711                 jnz     short loc_4096D0
.text:00409713                 mov     ecx, 1
.text:00409718                 jmp     short loc_4096D0
.text:00409718 sub_4096A0      endp
.text:00409718
.text:00409718 ; ---------------------------------------------------------------------------
.text:0040971A                 align 10h
.text:00409720                 jmp     ds:libintl_gettext
.text:00409720 ; ---------------------------------------------------------------------------
.text:00409726                 align 10h
.text:00409730                 jmp     ds:libintl_bindtextdomain
.text:00409730 ; ---------------------------------------------------------------------------
.text:00409736                 align 10h
.text:00409740                 jmp     ds:libintl_textdomain
.text:00409740 ; ---------------------------------------------------------------------------
.text:00409746                 align 10h
.text:00409750 ; const char aS_0[]
.text:00409750 aS_0            db ': %s',0             ; DATA XREF: sub_409770+B8↓o
.text:00409750                                         ; sub_409874+122↓o
.text:00409755 aUnknownSystemE db 'Unknown system error',0
.text:00409755                                         ; DATA XREF: sub_409770:loc_40983D↓o
.text:00409755                                         ; sub_409874:loc_4099AE↓o
.text:0040976A ; const char aS_1[]
.text:0040976A aS_1            db '%s: ',0             ; DATA XREF: sub_409770:loc_409844↓o
.text:0040976F                 align 10h
.text:00409770
.text:00409770 ; =============== S U B R O U T I N E =======================================
.text:00409770
.text:00409770
.text:00409770 ; int __cdecl sub_409770(int Code, int ErrorMessage, char *, char)
.text:00409770 sub_409770      proc near               ; CODE XREF: sub_403B10+1D8↑p
.text:00409770                                         ; sub_403B10+4FA↑p ...
.text:00409770
.text:00409770 Stream          = dword ptr -1Ch
.text:00409770 Format          = dword ptr -18h
.text:00409770 ArgList         = dword ptr -14h
.text:00409770 Code            = dword ptr  4
.text:00409770 ErrorMessage    = dword ptr  8
.text:00409770 arg_8           = dword ptr  0Ch
.text:00409770 arg_C           = byte ptr  10h
.text:00409770
.text:00409770                 push    esi
.text:00409771                 push    ebx
.text:00409772                 sub     esp, 14h
.text:00409775                 mov     edx, ds:_iob
.text:0040977B                 mov     esi, [esp+1Ch+Code]
.text:0040977F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00409783                 add     edx, 20h ; ' '
.text:00409786                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409789                 call    fflush
.text:0040978E                 mov     eax, ds:dword_40C1F0
.text:00409793                 test    eax, eax
.text:00409795                 jz      loc_409844
.text:0040979B                 call    eax ; dword_40C1F0
.text:0040979D
.text:0040979D loc_40979D:                             ; CODE XREF: sub_409770+F7↓j
.text:0040979D                 lea     edx, [esp+1Ch+arg_C]
.text:004097A1                 mov     ecx, [esp+1Ch+arg_8]
.text:004097A5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004097A9                 mov     edx, ds:_iob
.text:004097AF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004097B3                 add     edx, 40h ; '@'
.text:004097B6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004097B9                 call    vfprintf
.text:004097BE                 inc     ds:dword_40C200
.text:004097C4                 test    ebx, ebx
.text:004097C6                 jnz     short loc_409812
.text:004097C8
.text:004097C8 loc_4097C8:                             ; CODE XREF: sub_409770+CB↓j
.text:004097C8                 mov     edx, ds:_iob
.text:004097CE                 lea     ecx, [edx+40h]
.text:004097D1                 mov     ebx, [ecx+4]
.text:004097D4                 dec     ebx
.text:004097D5                 test    ebx, ebx
.text:004097D7                 mov     [ecx+4], ebx
.text:004097DA                 js      short loc_409800
.text:004097DC                 mov     ecx, [edx+40h]
.text:004097DF                 mov     byte ptr [ecx], 0Ah
.text:004097E2                 inc     dword ptr [edx+40h]
.text:004097E5
.text:004097E5 loc_4097E5:                             ; CODE XREF: sub_409770+A0↓j
.text:004097E5                 mov     edx, ds:_iob
.text:004097EB                 add     edx, 40h ; '@'
.text:004097EE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004097F1                 call    fflush
.text:004097F6                 test    esi, esi
.text:004097F8                 jnz     short loc_40986C
.text:004097FA                 add     esp, 14h
.text:004097FD                 pop     ebx
.text:004097FE                 pop     esi
.text:004097FF                 retn
.text:00409800 ; ---------------------------------------------------------------------------
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: sub_409770+6A↑j
.text:00409800                 mov     [esp+1Ch+Format], ecx ; File
.text:00409804                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040980B                 call    _flsbuf
.text:00409810                 jmp     short loc_4097E5
.text:00409812 ; ---------------------------------------------------------------------------
.text:00409812
.text:00409812 loc_409812:                             ; CODE XREF: sub_409770+56↑j
.text:00409812                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00409815                 call    strerror
.text:0040981A                 test    eax, eax
.text:0040981C                 jz      short loc_40983D
.text:0040981E
.text:0040981E loc_40981E:                             ; CODE XREF: sub_409770+D2↓j
.text:0040981E                 mov     [esp+1Ch+ArgList], eax
.text:00409822                 mov     ebx, ds:_iob
.text:00409828                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00409830                 add     ebx, 40h ; '@'
.text:00409833                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00409836                 call    fprintf
.text:0040983B                 jmp     short loc_4097C8
.text:0040983D ; ---------------------------------------------------------------------------
.text:0040983D
.text:0040983D loc_40983D:                             ; CODE XREF: sub_409770+AC↑j
.text:0040983D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409842                 jmp     short loc_40981E
.text:00409844 ; ---------------------------------------------------------------------------
.text:00409844
.text:00409844 loc_409844:                             ; CODE XREF: sub_409770+25↑j
.text:00409844                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040984C                 mov     edx, ds:_iob
.text:00409852                 mov     ecx, ds:dword_40C1C0
.text:00409858                 add     edx, 40h ; '@'
.text:0040985B                 mov     [esp+1Ch+ArgList], ecx
.text:0040985F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409862                 call    fprintf
.text:00409867                 jmp     loc_40979D
.text:0040986C ; ---------------------------------------------------------------------------
.text:0040986C
.text:0040986C loc_40986C:                             ; CODE XREF: sub_409770+88↑j
.text:0040986C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040986F                 call    exit
.text:0040986F sub_409770      endp
.text:0040986F
.text:00409874
.text:00409874 ; =============== S U B R O U T I N E =======================================
.text:00409874
.text:00409874
.text:00409874 ; int __cdecl sub_409874(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409874 sub_409874      proc near               ; DATA XREF: sub_409874+77↓o
.text:00409874
.text:00409874 Stream          = dword ptr -28h
.text:00409874 Format          = dword ptr -24h
.text:00409874 ArgList         = dword ptr -20h
.text:00409874 var_1C          = dword ptr -1Ch
.text:00409874 Code            = dword ptr  8
.text:00409874 ErrorMessage    = dword ptr  0Ch
.text:00409874 Str2            = dword ptr  10h
.text:00409874 arg_10          = dword ptr  14h
.text:00409874 arg_14          = dword ptr  18h
.text:00409874 arg_18          = byte ptr  1Ch
.text:00409874
.text:00409874                 and     eax, 64253A73h
.text:00409879                 cmp     ah, [eax]
.text:0040987B
.text:0040987B loc_40987B:                             ; DATA XREF: sub_409874:loc_4099B5↓o
.text:0040987B                 add     ds:55003A73h, ah
.text:00409881                 push    edi
.text:00409882                 push    esi
.text:00409883                 push    ebx
.text:00409884                 sub     esp, 1Ch
.text:00409887                 mov     edx, ds:dword_40C230
.text:0040988D                 mov     ebp, [esp+28h+Code]
.text:00409891                 mov     edi, [esp+28h+ErrorMessage]
.text:00409895                 test    edx, edx
.text:00409897                 mov     ebx, [esp+28h+Str2]
.text:0040989B                 mov     esi, [esp+28h+arg_10]
.text:0040989F                 jz      short loc_4098B9
.text:004098A1                 cmp     ds:dword_40C1B0, esi
.text:004098A7                 jz      loc_4099E0
.text:004098AD
.text:004098AD loc_4098AD:                             ; CODE XREF: sub_409874+18D↓j
.text:004098AD                 mov     ds:Str1, ebx
.text:004098B3                 mov     ds:dword_40C1B0, esi
.text:004098B9
.text:004098B9 loc_4098B9:                             ; CODE XREF: sub_409874+2B↑j
.text:004098B9                 mov     edx, ds:_iob
.text:004098BF                 add     edx, 20h ; ' '
.text:004098C2                 mov     [esp+28h+Stream], edx ; Stream
.text:004098C5                 call    fflush
.text:004098CA                 mov     eax, ds:dword_40C1F0
.text:004098CF                 test    eax, eax
.text:004098D1                 jz      loc_4099B5
.text:004098D7                 call    eax ; dword_40C1F0
.text:004098D9
.text:004098D9 loc_4098D9:                             ; CODE XREF: sub_409874+164↓j
.text:004098D9                 test    ebx, ebx
.text:004098DB                 jz      short loc_4098FE
.text:004098DD                 mov     [esp+28h+ArgList], ebx
.text:004098E1                 mov     ebx, ds:_iob
.text:004098E7                 mov     [esp+28h+var_1C], esi
.text:004098EB                 mov     [esp+28h+Format], offset sub_409874 ; Format
.text:004098F3                 add     ebx, 40h ; '@'
.text:004098F6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004098F9                 call    fprintf
.text:004098FE
.text:004098FE loc_4098FE:                             ; CODE XREF: sub_409874+67↑j
.text:004098FE                 mov     esi, ds:_iob
.text:00409904                 lea     edx, [esp+28h+arg_18]
.text:00409908                 mov     ecx, [esp+28h+arg_14]
.text:0040990C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00409910                 add     esi, 40h ; '@'
.text:00409913                 mov     [esp+28h+Format], ecx ; Format
.text:00409917                 mov     [esp+28h+Stream], esi ; Stream
.text:0040991A                 call    vfprintf
.text:0040991F                 inc     ds:dword_40C200
.text:00409925                 test    edi, edi
.text:00409927                 jnz     short loc_409980
.text:00409929
.text:00409929 loc_409929:                             ; CODE XREF: sub_409874+135↓j
.text:00409929                 mov     edx, ds:_iob
.text:0040992F                 lea     ecx, [edx+40h]
.text:00409932                 mov     ebx, [ecx+4]
.text:00409935                 dec     ebx
.text:00409936                 test    ebx, ebx
.text:00409938                 mov     [ecx+4], ebx
.text:0040993B                 js      short loc_409967
.text:0040993D                 mov     esi, [edx+40h]
.text:00409940                 mov     byte ptr [esi], 0Ah
.text:00409943                 inc     dword ptr [edx+40h]
.text:00409946
.text:00409946 loc_409946:                             ; CODE XREF: sub_409874+103↓j
.text:00409946                 mov     ecx, ds:_iob
.text:0040994C                 add     ecx, 40h ; '@'
.text:0040994F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409952                 call    fflush
.text:00409957                 test    ebp, ebp
.text:00409959                 jnz     loc_409A06
.text:0040995F
.text:0040995F loc_40995F:                             ; CODE XREF: sub_409874+173↓j
.text:0040995F                                         ; sub_409874+187↓j
.text:0040995F                 add     esp, 1Ch
.text:00409962                 pop     ebx
.text:00409963                 pop     esi
.text:00409964                 pop     edi
.text:00409965                 pop     ebp
.text:00409966                 retn
.text:00409967 ; ---------------------------------------------------------------------------
.text:00409967
.text:00409967 loc_409967:                             ; CODE XREF: sub_409874+C7↑j
.text:00409967                 mov     [esp+28h+Format], ecx ; File
.text:0040996B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409972                 call    _flsbuf
.text:00409977                 jmp     short loc_409946
.text:00409977 ; ---------------------------------------------------------------------------
.text:00409979                 align 10h
.text:00409980
.text:00409980 loc_409980:                             ; CODE XREF: sub_409874+B3↑j
.text:00409980                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409983                 call    strerror
.text:00409988                 test    eax, eax
.text:0040998A                 jz      short loc_4099AE
.text:0040998C
.text:0040998C loc_40998C:                             ; CODE XREF: sub_409874+13F↓j
.text:0040998C                 mov     [esp+28h+ArgList], eax
.text:00409990                 mov     edi, ds:_iob
.text:00409996                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040999E                 add     edi, 40h ; '@'
.text:004099A1                 mov     [esp+28h+Stream], edi ; Stream
.text:004099A4                 call    fprintf
.text:004099A9                 jmp     loc_409929
.text:004099AE ; ---------------------------------------------------------------------------
.text:004099AE
.text:004099AE loc_4099AE:                             ; CODE XREF: sub_409874+116↑j
.text:004099AE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004099B3                 jmp     short loc_40998C
.text:004099B5 ; ---------------------------------------------------------------------------
.text:004099B5
.text:004099B5 loc_4099B5:                             ; CODE XREF: sub_409874+5D↑j
.text:004099B5                 mov     [esp+28h+Format], (offset loc_40987B+1) ; Format
.text:004099BD                 mov     ecx, ds:_iob
.text:004099C3                 mov     edx, ds:dword_40C1C0
.text:004099C9                 add     ecx, 40h ; '@'
.text:004099CC                 mov     [esp+28h+ArgList], edx
.text:004099D0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004099D3                 call    fprintf
.text:004099D8                 jmp     loc_4098D9
.text:004099D8 ; ---------------------------------------------------------------------------
.text:004099DD                 align 10h
.text:004099E0
.text:004099E0 loc_4099E0:                             ; CODE XREF: sub_409874+33↑j
.text:004099E0                 mov     eax, ds:Str1
.text:004099E5                 cmp     ebx, eax
.text:004099E7                 jz      loc_40995F
.text:004099ED                 mov     [esp+28h+Format], ebx ; Str2
.text:004099F1                 mov     [esp+28h+Stream], eax ; Str1
.text:004099F4                 call    strcmp
.text:004099F9                 test    eax, eax
.text:004099FB                 jz      loc_40995F
.text:00409A01                 jmp     loc_4098AD
.text:00409A06 ; ---------------------------------------------------------------------------
.text:00409A06
.text:00409A06 loc_409A06:                             ; CODE XREF: sub_409874+E5↑j
.text:00409A06                 mov     [esp+28h+Stream], ebp ; Code
.text:00409A09                 call    exit
.text:00409A09 sub_409874      endp ; sp-analysis failed
.text:00409A09
.text:00409A09 ; ---------------------------------------------------------------------------
.text:00409A0E                 align 10h
.text:00409A10
.text:00409A10 ; =============== S U B R O U T I N E =======================================
.text:00409A10
.text:00409A10
.text:00409A10 sub_409A10      proc near               ; CODE XREF: sub_4054C0+31↑p
.text:00409A10                                         ; sub_4054C0+3D↑p ...
.text:00409A10
.text:00409A10 arg_0           = dword ptr  4
.text:00409A10
.text:00409A10                 mov     edx, [esp+arg_0]
.text:00409A14                 mov     eax, [edx+28h]
.text:00409A17                 retn
.text:00409A17 sub_409A10      endp
.text:00409A17
.text:00409A17 ; ---------------------------------------------------------------------------
.text:00409A18                 align 10h
.text:00409A20
.text:00409A20 ; =============== S U B R O U T I N E =======================================
.text:00409A20
.text:00409A20
.text:00409A20 sub_409A20      proc near               ; CODE XREF: sub_4054C0+1B↑p
.text:00409A20                                         ; sub_4054C0+27↑p ...
.text:00409A20
.text:00409A20 arg_0           = dword ptr  4
.text:00409A20
.text:00409A20                 mov     edx, [esp+arg_0]
.text:00409A24                 mov     eax, [edx+24h]
.text:00409A27                 retn
.text:00409A27 sub_409A20      endp
.text:00409A27
.text:00409A27 ; ---------------------------------------------------------------------------
.text:00409A28                 align 10h
.text:00409A30
.text:00409A30 ; =============== S U B R O U T I N E =======================================
.text:00409A30
.text:00409A30
.text:00409A30 sub_409A30      proc near               ; CODE XREF: sub_4049D0+5D↑j
.text:00409A30
.text:00409A30 arg_0           = dword ptr  4
.text:00409A30 arg_4           = dword ptr  8
.text:00409A30
.text:00409A30                 sub     esp, 0Ch
.text:00409A33                 mov     edx, [esp+0Ch+arg_0]
.text:00409A37                 test    edx, edx
.text:00409A39                 jz      short loc_409A48
.text:00409A3B                 mov     ecx, [esp+0Ch+arg_4]
.text:00409A3F                 xor     eax, eax
.text:00409A41                 mov     [edx+28h], ecx
.text:00409A44
.text:00409A44 loc_409A44:                             ; CODE XREF: sub_409A30+28↓j
.text:00409A44                 add     esp, 0Ch
.text:00409A47                 retn
.text:00409A48 ; ---------------------------------------------------------------------------
.text:00409A48
.text:00409A48 loc_409A48:                             ; CODE XREF: sub_409A30+9↑j
.text:00409A48                 call    _errno
.text:00409A4D                 mov     dword ptr [eax], 16h
.text:00409A53                 mov     eax, 0FFFFFFFFh
.text:00409A58                 jmp     short loc_409A44
.text:00409A58 sub_409A30      endp
.text:00409A58
.text:00409A58 ; ---------------------------------------------------------------------------
.text:00409A5A                 align 10h
.text:00409A60
.text:00409A60 ; =============== S U B R O U T I N E =======================================
.text:00409A60
.text:00409A60
.text:00409A60 sub_409A60      proc near               ; CODE XREF: sub_4049D0+69↑p
.text:00409A60
.text:00409A60 arg_0           = dword ptr  4
.text:00409A60 arg_4           = dword ptr  8
.text:00409A60
.text:00409A60                 sub     esp, 0Ch
.text:00409A63                 mov     edx, [esp+0Ch+arg_0]
.text:00409A67                 test    edx, edx
.text:00409A69                 jz      short loc_409A78
.text:00409A6B                 mov     ecx, [esp+0Ch+arg_4]
.text:00409A6F                 xor     eax, eax
.text:00409A71                 mov     [edx+24h], ecx
.text:00409A74
.text:00409A74 loc_409A74:                             ; CODE XREF: sub_409A60+28↓j
.text:00409A74                 add     esp, 0Ch
.text:00409A77                 retn
.text:00409A78 ; ---------------------------------------------------------------------------
.text:00409A78
.text:00409A78 loc_409A78:                             ; CODE XREF: sub_409A60+9↑j
.text:00409A78                 call    _errno
.text:00409A7D                 mov     dword ptr [eax], 16h
.text:00409A83                 mov     eax, 0FFFFFFFFh
.text:00409A88                 jmp     short loc_409A74
.text:00409A88 sub_409A60      endp
.text:00409A88
.text:00409A88 ; ---------------------------------------------------------------------------
.text:00409A8A                 align 10h
.text:00409A90
.text:00409A90 ; =============== S U B R O U T I N E =======================================
.text:00409A90
.text:00409A90
.text:00409A90 sub_409A90      proc near               ; CODE XREF: sub_404A40+26↑p
.text:00409A90                                         ; sub_404A40+82↑p ...
.text:00409A90                 sub     esp, 0Ch
.text:00409A93                 call    _errno
.text:00409A98                 mov     dword ptr [eax], 28h ; '('
.text:00409A9E                 mov     eax, 0FFFFFFFFh
.text:00409AA3                 add     esp, 0Ch
.text:00409AA6                 retn
.text:00409AA6 sub_409A90      endp
.text:00409AA6
.text:00409AA6 ; ---------------------------------------------------------------------------
.text:00409AA7                 align 10h
.text:00409AB0
.text:00409AB0 ; =============== S U B R O U T I N E =======================================
.text:00409AB0
.text:00409AB0
.text:00409AB0 sub_409AB0      proc near               ; CODE XREF: sub_403B10+48A↑p
.text:00409AB0
.text:00409AB0 var_C           = dword ptr -0Ch
.text:00409AB0 var_4           = dword ptr -4
.text:00409AB0 arg_0           = dword ptr  4
.text:00409AB0 arg_4           = dword ptr  8
.text:00409AB0 arg_8           = dword ptr  0Ch
.text:00409AB0
.text:00409AB0                 sub     esp, 0Ch
.text:00409AB3                 mov     edx, [esp+0Ch+arg_0]
.text:00409AB7                 mov     [esp+0Ch+var_4], ebx
.text:00409ABB                 mov     ebx, [esp+0Ch+arg_8]
.text:00409ABF                 test    edx, edx
.text:00409AC1                 js      short loc_409B2D
.text:00409AC3                 test    ebx, ebx
.text:00409AC5                 jz      short loc_409B08
.text:00409AC7                 cmp     [esp+0Ch+arg_4], 2
.text:00409ACC                 jbe     short loc_409AE3
.text:00409ACE                 call    _errno
.text:00409AD3                 mov     dword ptr [eax], 16h
.text:00409AD9
.text:00409AD9 loc_409AD9:                             ; CODE XREF: sub_409AB0+7B↓j
.text:00409AD9                 xor     eax, eax
.text:00409ADB
.text:00409ADB loc_409ADB:                             ; CODE XREF: sub_409AB0+68↓j
.text:00409ADB                 mov     ebx, [esp+0Ch+var_4]
.text:00409ADF                 add     esp, 0Ch
.text:00409AE2                 retn
.text:00409AE3 ; ---------------------------------------------------------------------------
.text:00409AE3
.text:00409AE3 loc_409AE3:                             ; CODE XREF: sub_409AB0+1C↑j
.text:00409AE3                 mov     edx, [ebx+28h]
.text:00409AE6                 mov     [esp+0Ch+var_C], edx
.text:00409AE9                 call    sub_409B40
.text:00409AEE                 test    eax, eax
.text:00409AF0                 jnz     short loc_409B08
.text:00409AF2                 mov     eax, [ebx+24h]
.text:00409AF5                 test    eax, eax
.text:00409AF7                 jnz     short loc_409AFC
.text:00409AF9                 mov     eax, [ebx+28h]
.text:00409AFC
.text:00409AFC loc_409AFC:                             ; CODE XREF: sub_409AB0+47↑j
.text:00409AFC                 mov     [esp+0Ch+var_C], eax
.text:00409AFF                 call    sub_409B40
.text:00409B04                 test    eax, eax
.text:00409B06                 jz      short loc_409B20
.text:00409B08
.text:00409B08 loc_409B08:                             ; CODE XREF: sub_409AB0+15↑j
.text:00409B08                                         ; sub_409AB0+40↑j
.text:00409B08                 call    _errno
.text:00409B0D                 mov     dword ptr [eax], 16h
.text:00409B13
.text:00409B13 loc_409B13:                             ; CODE XREF: sub_409AB0+88↓j
.text:00409B13                 mov     eax, 0FFFFFFFFh
.text:00409B18                 jmp     short loc_409ADB
.text:00409B18 ; ---------------------------------------------------------------------------
.text:00409B1A                 align 10h
.text:00409B20
.text:00409B20 loc_409B20:                             ; CODE XREF: sub_409AB0+56↑j
.text:00409B20                 call    _errno
.text:00409B25                 mov     dword ptr [eax], 28h ; '('
.text:00409B2B                 jmp     short loc_409AD9
.text:00409B2D ; ---------------------------------------------------------------------------
.text:00409B2D
.text:00409B2D loc_409B2D:                             ; CODE XREF: sub_409AB0+11↑j
.text:00409B2D                 call    _errno
.text:00409B32                 mov     dword ptr [eax], 9
.text:00409B38                 jmp     short loc_409B13
.text:00409B38 sub_409AB0      endp
.text:00409B38
.text:00409B38 ; ---------------------------------------------------------------------------
.text:00409B3A                 align 10h
.text:00409B40
.text:00409B40 ; =============== S U B R O U T I N E =======================================
.text:00409B40
.text:00409B40
.text:00409B40 sub_409B40      proc near               ; CODE XREF: sub_409AB0+39↑p
.text:00409B40                                         ; sub_409AB0+4F↑p
.text:00409B40
.text:00409B40 arg_0           = dword ptr  4
.text:00409B40
.text:00409B40                 mov     eax, [esp+arg_0]
.text:00409B44                 cmp     eax, 9600h
.text:00409B49                 jz      short loc_409B88
.text:00409B4B                 cmp     eax, 9600h
.text:00409B50                 jg      loc_409BF6
.text:00409B56                 cmp     eax, 12Ch
.text:00409B5B                 jz      short loc_409B88
.text:00409B5D                 cmp     eax, 12Ch
.text:00409B62                 jg      short loc_409BB0
.text:00409B64                 cmp     eax, 6Eh ; 'n'
.text:00409B67                 jz      short loc_409B88
.text:00409B69                 cmp     eax, 6Eh ; 'n'
.text:00409B6C                 jg      short loc_409B90
.text:00409B6E                 cmp     eax, 32h ; '2'
.text:00409B71                 jz      short loc_409B88
.text:00409B73                 cmp     eax, 32h ; '2'
.text:00409B76                 jg      short loc_409B8B
.text:00409B78                 test    eax, eax
.text:00409B7A                 lea     esi, [esi+0]
.text:00409B80
.text:00409B80 loc_409B80:                             ; CODE XREF: sub_409B40+4E↓j
.text:00409B80                                         ; sub_409B40+63↓j ...
.text:00409B80                 jz      short loc_409B88
.text:00409B82                 mov     eax, 1
.text:00409B87                 retn
.text:00409B88 ; ---------------------------------------------------------------------------
.text:00409B88
.text:00409B88 loc_409B88:                             ; CODE XREF: sub_409B40+9↑j
.text:00409B88                                         ; sub_409B40+1B↑j ...
.text:00409B88                 xor     eax, eax
.text:00409B8A                 retn
.text:00409B8B ; ---------------------------------------------------------------------------
.text:00409B8B
.text:00409B8B loc_409B8B:                             ; CODE XREF: sub_409B40+36↑j
.text:00409B8B                 cmp     eax, 4Bh ; 'K'
.text:00409B8E                 jmp     short loc_409B80
.text:00409B90 ; ---------------------------------------------------------------------------
.text:00409B90
.text:00409B90 loc_409B90:                             ; CODE XREF: sub_409B40+2C↑j
.text:00409B90                 cmp     eax, 96h ; '–'
.text:00409B95                 jz      short loc_409B88
.text:00409B97                 cmp     eax, 96h ; '–'
.text:00409B9C                 jg      short loc_409BA5
.text:00409B9E                 cmp     eax, 86h ; '†'
.text:00409BA3                 jmp     short loc_409B80
.text:00409BA5 ; ---------------------------------------------------------------------------
.text:00409BA5
.text:00409BA5 loc_409BA5:                             ; CODE XREF: sub_409B40+5C↑j
.text:00409BA5                 cmp     eax, 0C8h ; 'È'
.text:00409BAA                 jmp     short loc_409B80
.text:00409BAA ; ---------------------------------------------------------------------------
.text:00409BAC                 align 10h
.text:00409BB0
.text:00409BB0 loc_409BB0:                             ; CODE XREF: sub_409B40+22↑j
.text:00409BB0                 cmp     eax, 960h
.text:00409BB5                 jz      short loc_409B88
.text:00409BB7                 cmp     eax, 960h
.text:00409BBC                 jg      short loc_409BDA
.text:00409BBE                 cmp     eax, 4B0h
.text:00409BC3                 jz      short loc_409B88
.text:00409BC5                 cmp     eax, 4B0h
.text:00409BCA                 jg      short loc_409BD3
.text:00409BCC                 cmp     eax, 258h
.text:00409BD1                 jmp     short loc_409B80
.text:00409BD3 ; ---------------------------------------------------------------------------
.text:00409BD3
.text:00409BD3 loc_409BD3:                             ; CODE XREF: sub_409B40+8A↑j
.text:00409BD3                 cmp     eax, 708h
.text:00409BD8                 jmp     short loc_409B80
.text:00409BDA ; ---------------------------------------------------------------------------
.text:00409BDA
.text:00409BDA loc_409BDA:                             ; CODE XREF: sub_409B40+7C↑j
.text:00409BDA                 cmp     eax, 2580h
.text:00409BDF                 jz      short loc_409B88
.text:00409BE1                 cmp     eax, 2580h
.text:00409BE6                 jg      short loc_409BEF
.text:00409BE8                 cmp     eax, 12C0h
.text:00409BED                 jmp     short loc_409B80
.text:00409BEF ; ---------------------------------------------------------------------------
.text:00409BEF
.text:00409BEF loc_409BEF:                             ; CODE XREF: sub_409B40+A6↑j
.text:00409BEF                 cmp     eax, 4B00h
.text:00409BF4                 jmp     short loc_409B80
.text:00409BF6 ; ---------------------------------------------------------------------------
.text:00409BF6
.text:00409BF6 loc_409BF6:                             ; CODE XREF: sub_409B40+10↑j
.text:00409BF6                 cmp     eax, 0F4240h
.text:00409BFB                 jz      short loc_409B88
.text:00409BFD                 cmp     eax, 0F4240h
.text:00409C02                 jg      short loc_409C62
.text:00409C04                 cmp     eax, 70800h
.text:00409C09                 jz      loc_409B88
.text:00409C0F                 cmp     eax, 70800h
.text:00409C14                 jg      short loc_409C3C
.text:00409C16                 cmp     eax, 1C200h
.text:00409C1B                 jz      loc_409B88
.text:00409C21                 cmp     eax, 1C200h
.text:00409C26                 jg      short loc_409C32
.text:00409C28                 cmp     eax, 0E100h
.text:00409C2D                 jmp     loc_409B80
.text:00409C32 ; ---------------------------------------------------------------------------
.text:00409C32
.text:00409C32 loc_409C32:                             ; CODE XREF: sub_409B40+E6↑j
.text:00409C32                 cmp     eax, 38400h
.text:00409C37                 jmp     loc_409B80
.text:00409C3C ; ---------------------------------------------------------------------------
.text:00409C3C
.text:00409C3C loc_409C3C:                             ; CODE XREF: sub_409B40+D4↑j
.text:00409C3C                 cmp     eax, 8CA00h
.text:00409C41                 jz      loc_409B88
.text:00409C47                 cmp     eax, 8CA00h
.text:00409C4C                 jg      short loc_409C58
.text:00409C4E                 cmp     eax, 7A120h
.text:00409C53                 jmp     loc_409B80
.text:00409C58 ; ---------------------------------------------------------------------------
.text:00409C58
.text:00409C58 loc_409C58:                             ; CODE XREF: sub_409B40+10C↑j
.text:00409C58                 cmp     eax, 0E1000h
.text:00409C5D                 jmp     loc_409B80
.text:00409C62 ; ---------------------------------------------------------------------------
.text:00409C62
.text:00409C62 loc_409C62:                             ; CODE XREF: sub_409B40+C2↑j
.text:00409C62                 cmp     eax, 2625A0h
.text:00409C67                 jz      loc_409B88
.text:00409C6D                 cmp     eax, 2625A0h
.text:00409C72                 jg      short loc_409C9A
.text:00409C74                 cmp     eax, 16E360h
.text:00409C79                 jz      loc_409B88
.text:00409C7F                 cmp     eax, 16E360h
.text:00409C84                 jg      short loc_409C90
.text:00409C86                 cmp     eax, 119400h
.text:00409C8B                 jmp     loc_409B80
.text:00409C90 ; ---------------------------------------------------------------------------
.text:00409C90
.text:00409C90 loc_409C90:                             ; CODE XREF: sub_409B40+144↑j
.text:00409C90                 cmp     eax, 1E8480h
.text:00409C95                 jmp     loc_409B80
.text:00409C9A ; ---------------------------------------------------------------------------
.text:00409C9A
.text:00409C9A loc_409C9A:                             ; CODE XREF: sub_409B40+132↑j
.text:00409C9A                 cmp     eax, 3567E0h
.text:00409C9F                 jz      loc_409B88
.text:00409CA5                 cmp     eax, 3567E0h
.text:00409CAA                 jg      short loc_409CB6
.text:00409CAC                 cmp     eax, 2DC6C0h
.text:00409CB1                 jmp     loc_409B80
.text:00409CB6 ; ---------------------------------------------------------------------------
.text:00409CB6
.text:00409CB6 loc_409CB6:                             ; CODE XREF: sub_409B40+16A↑j
.text:00409CB6                 cmp     eax, 3D0900h
.text:00409CBB                 jmp     loc_409B80
.text:00409CBB sub_409B40      endp
.text:00409CBB
.text:00409CC0
.text:00409CC0 ; =============== S U B R O U T I N E =======================================
.text:00409CC0
.text:00409CC0
.text:00409CC0 sub_409CC0      proc near               ; CODE XREF: sub_403B10+2AD↑p
.text:00409CC0                                         ; sub_403B10+4B4↑p
.text:00409CC0
.text:00409CC0 arg_0           = dword ptr  4
.text:00409CC0 arg_4           = dword ptr  8
.text:00409CC0
.text:00409CC0                 sub     esp, 0Ch
.text:00409CC3                 mov     eax, [esp+0Ch+arg_0]
.text:00409CC7                 test    eax, eax
.text:00409CC9                 js      short loc_409CF1
.text:00409CCB                 mov     edx, [esp+0Ch+arg_4]
.text:00409CCF                 test    edx, edx
.text:00409CD1                 jz      short loc_409CE4
.text:00409CD3                 call    _errno
.text:00409CD8                 mov     dword ptr [eax], 28h ; '('
.text:00409CDE
.text:00409CDE loc_409CDE:                             ; CODE XREF: sub_409CC0+2F↓j
.text:00409CDE                 xor     eax, eax
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409CC0+41↓j
.text:00409CE0                 add     esp, 0Ch
.text:00409CE3                 retn
.text:00409CE4 ; ---------------------------------------------------------------------------
.text:00409CE4
.text:00409CE4 loc_409CE4:                             ; CODE XREF: sub_409CC0+11↑j
.text:00409CE4                 call    _errno
.text:00409CE9                 mov     dword ptr [eax], 16h
.text:00409CEF                 jmp     short loc_409CDE
.text:00409CF1 ; ---------------------------------------------------------------------------
.text:00409CF1
.text:00409CF1 loc_409CF1:                             ; CODE XREF: sub_409CC0+9↑j
.text:00409CF1                 call    _errno
.text:00409CF6                 mov     dword ptr [eax], 9
.text:00409CFC                 mov     eax, 0FFFFFFFFh
.text:00409D01                 jmp     short loc_409CE0
.text:00409D01 sub_409CC0      endp
.text:00409D01
.text:00409D01 ; ---------------------------------------------------------------------------
.text:00409D03                 align 10h
.text:00409D10
.text:00409D10 ; =============== S U B R O U T I N E =======================================
.text:00409D10
.text:00409D10
.text:00409D10 sub_409D10      proc near               ; CODE XREF: sub_409E30+152↓p
.text:00409D10                                         ; .text:00409FFB↓p
.text:00409D10
.text:00409D10 FileHandle      = dword ptr -2Ch
.text:00409D10 Offset          = qword ptr -28h
.text:00409D10 Origin          = dword ptr -20h
.text:00409D10 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:00409D10 hFile           = dword ptr -14h
.text:00409D10 arg_0           = dword ptr  4
.text:00409D10 arg_4           = dword ptr  8
.text:00409D10 arg_8           = dword ptr  0Ch
.text:00409D10
.text:00409D10                 push    ebp
.text:00409D11                 push    edi
.text:00409D12                 push    esi
.text:00409D13                 push    ebx
.text:00409D14                 sub     esp, 1Ch
.text:00409D17                 mov     ebp, [esp+2Ch+arg_8]
.text:00409D1B                 mov     edi, [esp+2Ch+arg_0]
.text:00409D1F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00409D22                 call    _get_osfhandle
.text:00409D27                 movsx   edx, word ptr [ebp+2]
.text:00409D2B                 mov     [esp+2Ch+hFile], eax
.text:00409D2F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00409D37                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:00409D3F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:00409D43                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00409D46                 call    _lseeki64
.text:00409D4B                 mov     ebx, eax
.text:00409D4D                 mov     esi, edx
.text:00409D4F                 mov     edx, [ebp+14h]
.text:00409D52                 add     ebx, [ebp+8]
.text:00409D55                 mov     eax, [ebp+10h]
.text:00409D58                 mov     ecx, edx
.text:00409D5A                 adc     esi, [ebp+0Ch]
.text:00409D5D                 or      ecx, eax
.text:00409D5F                 jz      loc_409E20
.text:00409D65                 add     eax, ebx
.text:00409D67                 adc     edx, esi
.text:00409D69
.text:00409D69 loc_409D69:                             ; CODE XREF: sub_409D10+118↓j
.text:00409D69                 cmp     [esp+2Ch+arg_4], 7
.text:00409D6E                 jz      loc_409E0E
.text:00409D74                 cmp     [esp+2Ch+arg_4], 7
.text:00409D79                 jl      short loc_409D95
.text:00409D7B                 cmp     [esp+2Ch+arg_4], 9
.text:00409D80                 jg      short loc_409D95
.text:00409D82                 movsx   ecx, word ptr [ebp+0]
.text:00409D86                 cmp     ecx, 1
.text:00409D89                 jl      short loc_409D95
.text:00409D8B                 cmp     ecx, 2
.text:00409D8E                 jle     short loc_409DF0
.text:00409D90                 cmp     ecx, 3
.text:00409D93                 jz      short loc_409DAD
.text:00409D95
.text:00409D95 loc_409D95:                             ; CODE XREF: sub_409D10+69↑j
.text:00409D95                                         ; sub_409D10+70↑j ...
.text:00409D95                 call    _errno
.text:00409D9A                 mov     dword ptr [eax], 16h
.text:00409DA0
.text:00409DA0 loc_409DA0:                             ; CODE XREF: sub_409D10+D9↓j
.text:00409DA0                                         ; sub_409D10+109↓j
.text:00409DA0                 mov     eax, 0FFFFFFFFh
.text:00409DA5
.text:00409DA5 loc_409DA5:                             ; CODE XREF: sub_409D10+C9↓j
.text:00409DA5                 add     esp, 1Ch
.text:00409DA8                 pop     ebx
.text:00409DA9                 pop     esi
.text:00409DAA                 pop     edi
.text:00409DAB                 pop     ebp
.text:00409DAC                 retn
.text:00409DAD ; ---------------------------------------------------------------------------
.text:00409DAD
.text:00409DAD loc_409DAD:                             ; CODE XREF: sub_409D10+83↑j
.text:00409DAD                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:00409DB1                 mov     eax, [esp+2Ch+hFile]
.text:00409DB5                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00409DB9                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:00409DBD                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00409DC1                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:00409DC4                 call    UnlockFile
.text:00409DC9                 lea     esi, [esi+0]
.text:00409DD0
.text:00409DD0 loc_409DD0:                             ; CODE XREF: sub_409D10+FC↓j
.text:00409DD0                 mov     ecx, eax
.text:00409DD2                 sub     esp, 14h
.text:00409DD5                 xor     eax, eax
.text:00409DD7                 test    ecx, ecx
.text:00409DD9                 jnz     short loc_409DA5
.text:00409DDB                 call    sub_40A300
.text:00409DE0                 mov     esi, eax
.text:00409DE2                 call    _errno
.text:00409DE7                 mov     [eax], esi
.text:00409DE9                 jmp     short loc_409DA0
.text:00409DE9 ; ---------------------------------------------------------------------------
.text:00409DEB                 align 10h
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409D10+7E↑j
.text:00409DF0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:00409DF4                 mov     edx, [esp+2Ch+hFile]
.text:00409DF8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:00409DFC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00409E00                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:00409E03                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:00409E07                 call    LockFile
.text:00409E0C                 jmp     short loc_409DD0
.text:00409E0E ; ---------------------------------------------------------------------------
.text:00409E0E
.text:00409E0E loc_409E0E:                             ; CODE XREF: sub_409D10+5E↑j
.text:00409E0E                 call    _errno
.text:00409E13                 mov     dword ptr [eax], 28h ; '('
.text:00409E19                 jmp     short loc_409DA0
.text:00409E19 ; ---------------------------------------------------------------------------
.text:00409E1B                 align 10h
.text:00409E20
.text:00409E20 loc_409E20:                             ; CODE XREF: sub_409D10+4F↑j
.text:00409E20                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00409E23                 call    _filelengthi64
.text:00409E28                 jmp     loc_409D69
.text:00409E28 sub_409D10      endp
.text:00409E28
.text:00409E28 ; ---------------------------------------------------------------------------
.text:00409E2D                 align 10h
.text:00409E30
.text:00409E30 ; =============== S U B R O U T I N E =======================================
.text:00409E30
.text:00409E30
.text:00409E30 sub_409E30      proc near               ; CODE XREF: sub_403B10+25D↑p
.text:00409E30                                         ; sub_403B10+283↑p
.text:00409E30
.text:00409E30 FileHandle      = dword ptr -1Ch
.text:00409E30 var_18          = dword ptr -18h
.text:00409E30 var_14          = dword ptr -14h
.text:00409E30 var_4           = dword ptr -4
.text:00409E30 arg_0           = dword ptr  4
.text:00409E30 arg_4           = dword ptr  8
.text:00409E30 arg_8           = byte ptr  0Ch
.text:00409E30
.text:00409E30                 sub     esp, 1Ch
.text:00409E33                 mov     ecx, [esp+1Ch+arg_0]
.text:00409E37                 mov     [esp+1Ch+var_4], ebx
.text:00409E3B                 mov     edx, [esp+1Ch+arg_4]
.text:00409E3F                 test    ecx, ecx
.text:00409E41                 js      loc_409F99
.text:00409E47                 cmp     edx, 9          ; switch 10 cases
.text:00409E4A                 lea     eax, [esp+1Ch+arg_8]
.text:00409E4E                 ja      def_409E54      ; jumptable 00409E54 default case
.text:00409E54                 jmp     ds:jpt_409E54[edx*4] ; switch jump
.text:00409E54 ; ---------------------------------------------------------------------------
.text:00409E5B                 align 4
.text:00409E5C jpt_409E54      dd offset loc_409E84    ; DATA XREF: sub_409E30+24↑r
.text:00409E5C                 dd offset loc_409E98    ; jump table for switch statement
.text:00409E5C                 dd offset loc_409EB8
.text:00409E5C                 dd offset loc_409EE0
.text:00409E5C                 dd offset loc_409F28
.text:00409E5C                 dd offset loc_409F60
.text:00409E5C                 dd offset loc_409F60
.text:00409E5C                 dd offset loc_409F60
.text:00409E5C                 dd offset loc_409F75
.text:00409E5C                 dd offset loc_409F75
.text:00409E84 ; ---------------------------------------------------------------------------
.text:00409E84
.text:00409E84 loc_409E84:                             ; CODE XREF: sub_409E30+24↑j
.text:00409E84                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409E84                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 00409E54 case 0
.text:00409E87                 call    _dup
.text:00409E8C                 lea     esi, [esi+0]
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: sub_409E30+86↓j
.text:00409E90                                         ; sub_409E30+AC↓j ...
.text:00409E90                 mov     ebx, [esp+1Ch+var_4]
.text:00409E94                 add     esp, 1Ch
.text:00409E97                 retn
.text:00409E98 ; ---------------------------------------------------------------------------
.text:00409E98
.text:00409E98 loc_409E98:                             ; CODE XREF: sub_409E30+24↑j
.text:00409E98                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409E98                 mov     eax, ds:__pioinfo ; jumptable 00409E54 case 1
.text:00409E9D                 mov     edx, ecx
.text:00409E9F                 sar     edx, 5
.text:00409EA2                 and     ecx, 1Fh
.text:00409EA5                 mov     ebx, [eax+edx*4]
.text:00409EA8                 lea     eax, [ecx+ecx*8]
.text:00409EAB                 test    byte ptr [ebx+eax*4+4], 10h
.text:00409EB0                 setnz   dl
.text:00409EB3                 movzx   eax, dl
.text:00409EB6                 jmp     short loc_409E90
.text:00409EB8 ; ---------------------------------------------------------------------------
.text:00409EB8
.text:00409EB8 loc_409EB8:                             ; CODE XREF: sub_409E30+24↑j
.text:00409EB8                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409EB8                 test    bl, 1           ; jumptable 00409E54 case 2
.text:00409EBB                 jz      short loc_409EC3
.text:00409EBD                 and     ebx, 0FFFFFFFEh
.text:00409EC0                 or      ebx, 10h
.text:00409EC3
.text:00409EC3 loc_409EC3:                             ; CODE XREF: sub_409E30+8B↑j
.text:00409EC3                 mov     eax, ds:__pioinfo
.text:00409EC8                 mov     edx, ecx
.text:00409ECA                 sar     edx, 5
.text:00409ECD                 and     ecx, 1Fh
.text:00409ED0                 mov     edx, [eax+edx*4]
.text:00409ED3                 lea     eax, [ecx+ecx*8]
.text:00409ED6                 mov     [edx+eax*4+4], bl
.text:00409EDA
.text:00409EDA loc_409EDA:                             ; CODE XREF: sub_409E30+121↓j
.text:00409EDA                 xor     eax, eax
.text:00409EDC                 jmp     short loc_409E90
.text:00409EDC ; ---------------------------------------------------------------------------
.text:00409EDE                 align 10h
.text:00409EE0
.text:00409EE0 loc_409EE0:                             ; CODE XREF: sub_409E30+24↑j
.text:00409EE0                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409EE0                 mov     eax, ds:__pioinfo ; jumptable 00409E54 case 3
.text:00409EE5                 mov     ebx, ecx
.text:00409EE7                 sar     ebx, 5
.text:00409EEA                 and     ecx, 1Fh
.text:00409EED                 mov     edx, [eax+ebx*4]
.text:00409EF0                 lea     ebx, [ecx+ecx*8]
.text:00409EF3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:00409EF8                 xor     edx, edx
.text:00409EFA                 test    al, 1
.text:00409EFC                 jz      short loc_409F07
.text:00409EFE                 mov     edx, 2
.text:00409F03
.text:00409F03 loc_409F03:                             ; CODE XREF: sub_409E30+E0↓j
.text:00409F03                                         ; sub_409E30+EB↓j ...
.text:00409F03                 mov     eax, edx
.text:00409F05                 jmp     short loc_409E90
.text:00409F07 ; ---------------------------------------------------------------------------
.text:00409F07
.text:00409F07 loc_409F07:                             ; CODE XREF: sub_409E30+CC↑j
.text:00409F07                 test    al, 20h
.text:00409F09                 jz      short loc_409F12
.text:00409F0B                 mov     edx, 8
.text:00409F10                 jmp     short loc_409F03
.text:00409F12 ; ---------------------------------------------------------------------------
.text:00409F12
.text:00409F12 loc_409F12:                             ; CODE XREF: sub_409E30+D9↑j
.text:00409F12                 test    al, 10h
.text:00409F14                 jz      short loc_409F1D
.text:00409F16                 mov     edx, 80h ; '€'
.text:00409F1B                 jmp     short loc_409F03
.text:00409F1D ; ---------------------------------------------------------------------------
.text:00409F1D
.text:00409F1D loc_409F1D:                             ; CODE XREF: sub_409E30+E4↑j
.text:00409F1D                 test    al, al
.text:00409F1F                 jns     short loc_409F03
.text:00409F21                 mov     edx, 4000h
.text:00409F26                 jmp     short loc_409F03
.text:00409F28 ; ---------------------------------------------------------------------------
.text:00409F28
.text:00409F28 loc_409F28:                             ; CODE XREF: sub_409E30+24↑j
.text:00409F28                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409F28                 mov     edx, ds:__pioinfo ; jumptable 00409E54 case 4
.text:00409F2E                 mov     ebx, [eax]
.text:00409F30                 mov     eax, ecx
.text:00409F32                 sar     eax, 5
.text:00409F35                 and     ecx, 1Fh
.text:00409F38                 mov     edx, [edx+eax*4]
.text:00409F3B                 lea     eax, [ecx+ecx*8]
.text:00409F3E                 shl     eax, 2
.text:00409F41                 xor     ecx, ecx
.text:00409F43                 test    bl, 8
.text:00409F46                 jz      short loc_409F53
.text:00409F48                 mov     ecx, 20h ; ' '
.text:00409F4D
.text:00409F4D loc_409F4D:                             ; CODE XREF: sub_409E30+126↓j
.text:00409F4D                                         ; sub_409E30+12D↓j
.text:00409F4D                 mov     [edx+eax+4], cl
.text:00409F51                 jmp     short loc_409EDA
.text:00409F53 ; ---------------------------------------------------------------------------
.text:00409F53
.text:00409F53 loc_409F53:                             ; CODE XREF: sub_409E30+116↑j
.text:00409F53                 test    bh, 40h
.text:00409F56                 jz      short loc_409F4D
.text:00409F58                 mov     ecx, 80h ; '€'
.text:00409F5D                 jmp     short loc_409F4D
.text:00409F5D ; ---------------------------------------------------------------------------
.text:00409F5F                 align 10h
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: sub_409E30+24↑j
.text:00409F60                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409F60                 call    _errno          ; jumptable 00409E54 cases 5-7
.text:00409F65                 mov     dword ptr [eax], 28h ; '('
.text:00409F6B
.text:00409F6B loc_409F6B:                             ; CODE XREF: sub_409E30+167↓j
.text:00409F6B                                         ; sub_409E30+174↓j
.text:00409F6B                 mov     eax, 0FFFFFFFFh
.text:00409F70                 jmp     loc_409E90
.text:00409F75 ; ---------------------------------------------------------------------------
.text:00409F75
.text:00409F75 loc_409F75:                             ; CODE XREF: sub_409E30+24↑j
.text:00409F75                                         ; DATA XREF: sub_409E30:jpt_409E54↑o
.text:00409F75                 mov     ebx, [eax]      ; jumptable 00409E54 cases 8,9
.text:00409F77                 mov     [esp+1Ch+var_18], edx
.text:00409F7B                 mov     [esp+1Ch+FileHandle], ecx
.text:00409F7E                 mov     [esp+1Ch+var_14], ebx
.text:00409F82                 call    sub_409D10
.text:00409F87                 jmp     loc_409E90
.text:00409F8C ; ---------------------------------------------------------------------------
.text:00409F8C
.text:00409F8C def_409E54:                             ; CODE XREF: sub_409E30+1E↑j
.text:00409F8C                 call    _errno          ; jumptable 00409E54 default case
.text:00409F91                 mov     dword ptr [eax], 16h
.text:00409F97                 jmp     short loc_409F6B
.text:00409F99 ; ---------------------------------------------------------------------------
.text:00409F99
.text:00409F99 loc_409F99:                             ; CODE XREF: sub_409E30+11↑j
.text:00409F99                 call    _errno
.text:00409F9E                 mov     dword ptr [eax], 9
.text:00409FA4                 jmp     short loc_409F6B
.text:00409FA4 sub_409E30      endp
.text:00409FA4
.text:00409FA4 ; ---------------------------------------------------------------------------
.text:00409FA6                 align 10h
.text:00409FB0                 sub     esp, 3Ch
.text:00409FB3                 mov     edx, [esp+48h]
.text:00409FB7                 mov     eax, [edx+4]
.text:00409FBA                 movzx   ecx, word ptr [edx]
.text:00409FBD                 mov     [esp+18h], eax
.text:00409FC1                 mov     [esp+10h], cx
.text:00409FC6                 movzx   ecx, word ptr [edx+2]
.text:00409FCA                 mov     [esp+12h], cx
.text:00409FCF                 mov     ecx, eax
.text:00409FD1                 mov     eax, [edx+8]
.text:00409FD4                 sar     ecx, 1Fh
.text:00409FD7                 mov     [esp+1Ch], ecx
.text:00409FDB                 cdq
.text:00409FDC                 lea     ecx, [esp+10h]
.text:00409FE0                 mov     [esp+24h], edx
.text:00409FE4                 mov     edx, [esp+44h]
.text:00409FE8                 mov     [esp+20h], eax
.text:00409FEC                 mov     [esp+8], ecx
.text:00409FF0                 mov     [esp+4], edx
.text:00409FF4                 mov     edx, [esp+40h]
.text:00409FF8                 mov     [esp], edx
.text:00409FFB                 call    sub_409D10
.text:0040A000                 add     esp, 3Ch
.text:0040A003                 retn
.text:0040A003 ; ---------------------------------------------------------------------------
.text:0040A004                 align 10h
.text:0040A010                 mov     edx, [esp+4]
.text:0040A014                 xor     eax, eax
.text:0040A016                 test    dl, 1
.text:0040A019                 jz      short loc_40A021
.text:0040A01B                 mov     eax, 2
.text:0040A020                 retn
.text:0040A021 ; ---------------------------------------------------------------------------
.text:0040A021
.text:0040A021 loc_40A021:                             ; CODE XREF: .text:0040A019↑j
.text:0040A021                 test    dl, 20h
.text:0040A024                 jz      short loc_40A030
.text:0040A026                 mov     eax, 8
.text:0040A02B                 retn
.text:0040A02B ; ---------------------------------------------------------------------------
.text:0040A02C                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: .text:0040A024↑j
.text:0040A030                 test    dl, 10h
.text:0040A033                 jz      short loc_40A040
.text:0040A035                 mov     eax, 80h ; '€'
.text:0040A03A                 retn
.text:0040A03A ; ---------------------------------------------------------------------------
.text:0040A03B                 align 10h
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: .text:0040A033↑j
.text:0040A040                 test    dl, dl
.text:0040A042                 jns     short locret_40A049
.text:0040A044                 mov     eax, 4000h
.text:0040A049
.text:0040A049 locret_40A049:                          ; CODE XREF: .text:0040A042↑j
.text:0040A049                 retn
.text:0040A049 ; ---------------------------------------------------------------------------
.text:0040A04A                 align 10h
.text:0040A050                 mov     edx, [esp+4]
.text:0040A054                 xor     eax, eax
.text:0040A056                 test    dl, 8
.text:0040A059                 jz      short loc_40A061
.text:0040A05B                 mov     eax, 20h ; ' '
.text:0040A060                 retn
.text:0040A061 ; ---------------------------------------------------------------------------
.text:0040A061
.text:0040A061 loc_40A061:                             ; CODE XREF: .text:0040A059↑j
.text:0040A061                 test    dh, 40h
.text:0040A064                 jz      short locret_40A06B
.text:0040A066                 mov     eax, 80h ; '€'
.text:0040A06B
.text:0040A06B locret_40A06B:                          ; CODE XREF: .text:0040A064↑j
.text:0040A06B                 retn
.text:0040A06B ; ---------------------------------------------------------------------------
.text:0040A06C                 align 10h
.text:0040A070
.text:0040A070 ; =============== S U B R O U T I N E =======================================
.text:0040A070
.text:0040A070 ; Attributes: info_from_lumina
.text:0040A070
.text:0040A070 ___get_errno    proc near               ; CODE XREF: sub_40A300+B↓p
.text:0040A070
.text:0040A070 arg_0           = dword ptr  4
.text:0040A070
.text:0040A070                 mov     eax, [esp+arg_0]
.text:0040A074                 cmp     eax, 53h ; 'S'
.text:0040A077                 jg      loc_40A170
.text:0040A07D                 cmp     eax, 52h ; 'R'
.text:0040A080                 jge     short loc_40A0D2
.text:0040A082                 cmp     eax, 0Fh
.text:0040A085                 jz      short loc_40A0A0
.text:0040A087                 cmp     eax, 0Fh
.text:0040A08A                 jg      short loc_40A100
.text:0040A08C                 cmp     eax, 9
.text:0040A08F                 jg      short loc_40A0E0
.text:0040A091                 cmp     eax, 7
.text:0040A094                 jge     short loc_40A0D9
.text:0040A096                 cmp     eax, 3
.text:0040A099                 jg      short loc_40A0BA
.text:0040A09B                 cmp     eax, 2
.text:0040A09E                 jl      short loc_40A0B3
.text:0040A0A0
.text:0040A0A0 loc_40A0A0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040A0A0                                         ; ___get_errno+9D↓j ...
.text:0040A0A0                 mov     edx, 2
.text:0040A0A5                 lea     esi, [esi+0]
.text:0040A0A9                 lea     edi, [edi+0]
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040A0B0                                         ; ___get_errno+59↓j ...
.text:0040A0B0                 mov     eax, edx
.text:0040A0B2                 retn
.text:0040A0B3 ; ---------------------------------------------------------------------------
.text:0040A0B3
.text:0040A0B3 loc_40A0B3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040A0B3                                         ; ___get_errno+78↓j ...
.text:0040A0B3                 mov     edx, 16h
.text:0040A0B8                 jmp     short loc_40A0B0
.text:0040A0BA ; ---------------------------------------------------------------------------
.text:0040A0BA
.text:0040A0BA loc_40A0BA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040A0BA                 cmp     eax, 5
.text:0040A0BD                 jz      short loc_40A0D2
.text:0040A0BF                 cmp     eax, 5
.text:0040A0C2                 jg      short loc_40A0CB
.text:0040A0C4                 mov     edx, 18h
.text:0040A0C9                 jmp     short loc_40A0B0
.text:0040A0CB ; ---------------------------------------------------------------------------
.text:0040A0CB
.text:0040A0CB loc_40A0CB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040A0CB                                         ; ___get_errno+180↓j
.text:0040A0CB                 mov     edx, 9
.text:0040A0D0                 jmp     short loc_40A0B0
.text:0040A0D2 ; ---------------------------------------------------------------------------
.text:0040A0D2
.text:0040A0D2 loc_40A0D2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040A0D2                                         ; ___get_errno+4D↑j ...
.text:0040A0D2                 mov     edx, 0Dh
.text:0040A0D7                 jmp     short loc_40A0B0
.text:0040A0D9 ; ---------------------------------------------------------------------------
.text:0040A0D9
.text:0040A0D9 loc_40A0D9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040A0D9                                         ; ___get_errno+73↓j ...
.text:0040A0D9                 mov     edx, 0Ch
.text:0040A0DE                 jmp     short loc_40A0B0
.text:0040A0E0 ; ---------------------------------------------------------------------------
.text:0040A0E0
.text:0040A0E0 loc_40A0E0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040A0E0                 cmp     eax, 0Dh
.text:0040A0E3                 jg      short loc_40A0D9
.text:0040A0E5                 cmp     eax, 0Ch
.text:0040A0E8                 jge     short loc_40A0B3
.text:0040A0EA                 cmp     eax, 0Ah
.text:0040A0ED                 mov     edx, 7
.text:0040A0F2                 jz      short loc_40A0B0
.text:0040A0F4                 cmp     eax, 0Bh
.text:0040A0F7                 jnz     short loc_40A0B3
.text:0040A0F9
.text:0040A0F9 loc_40A0F9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040A0F9                 mov     edx, 8
.text:0040A0FE                 jmp     short loc_40A0B0
.text:0040A100 ; ---------------------------------------------------------------------------
.text:0040A100
.text:0040A100 loc_40A100:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040A100                 cmp     eax, 22h ; '"'
.text:0040A103                 jg      short loc_40A134
.text:0040A105                 cmp     eax, 16h
.text:0040A108                 jge     short loc_40A0D2
.text:0040A10A                 cmp     eax, 12h
.text:0040A10D                 jz      short loc_40A0A0
.text:0040A10F                 cmp     eax, 12h
.text:0040A112                 jg      short loc_40A125
.text:0040A114                 cmp     eax, 10h
.text:0040A117                 jz      short loc_40A0D2
.text:0040A119                 mov     edx, 12h
.text:0040A11E                 cmp     eax, 11h
.text:0040A121
.text:0040A121 loc_40A121:                             ; CODE XREF: ___get_errno+172↓j
.text:0040A121                                         ; ___get_errno+24C↓j ...
.text:0040A121                 jnz     short loc_40A0B3
.text:0040A123                 jmp     short loc_40A0B0
.text:0040A125 ; ---------------------------------------------------------------------------
.text:0040A125
.text:0040A125 loc_40A125:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040A125                 cmp     eax, 14h
.text:0040A128                 jle     short loc_40A0D2
.text:0040A12A
.text:0040A12A loc_40A12A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040A12A                 mov     edx, 10h
.text:0040A12F                 jmp     loc_40A0B0
.text:0040A134 ; ---------------------------------------------------------------------------
.text:0040A134
.text:0040A134 loc_40A134:                             ; CODE XREF: ___get_errno+93↑j
.text:0040A134                 cmp     eax, 41h ; 'A'
.text:0040A137                 jz      short loc_40A0D2
.text:0040A139                 cmp     eax, 41h ; 'A'
.text:0040A13C                 jg      short loc_40A151
.text:0040A13E                 cmp     eax, 24h ; '$'
.text:0040A141                 jz      short loc_40A0D2
.text:0040A143                 cmp     eax, 35h ; '5'
.text:0040A146                 jnz     loc_40A0B3
.text:0040A14C                 jmp     loc_40A0A0
.text:0040A151 ; ---------------------------------------------------------------------------
.text:0040A151
.text:0040A151 loc_40A151:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040A151                 cmp     eax, 43h ; 'C'
.text:0040A154                 jz      loc_40A0A0
.text:0040A15A                 cmp     eax, 50h ; 'P'
.text:0040A15D                 jnz     loc_40A0B3
.text:0040A163
.text:0040A163 loc_40A163:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040A163                 mov     edx, 11h
.text:0040A168                 jmp     loc_40A0B0
.text:0040A168 ; ---------------------------------------------------------------------------
.text:0040A16D                 align 10h
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: ___get_errno+7↑j
.text:0040A170                 cmp     eax, 0A1h ; '¡'
.text:0040A175                 jz      loc_40A0A0
.text:0040A17B                 cmp     eax, 0A1h ; '¡'
.text:0040A180                 jg      loc_40A230
.text:0040A186                 cmp     eax, 81h
.text:0040A18B                 jg      short loc_40A1F5
.text:0040A18D                 cmp     eax, 80h ; '€'
.text:0040A192                 mov     edx, 0Ah
.text:0040A197                 jge     loc_40A0B0
.text:0040A19D                 cmp     eax, 6Ch ; 'l'
.text:0040A1A0                 jz      loc_40A0D2
.text:0040A1A6                 cmp     eax, 6Ch ; 'l'
.text:0040A1A9                 jg      short loc_40A1C7
.text:0040A1AB                 cmp     eax, 57h ; 'W'
.text:0040A1AE                 jz      loc_40A0B3
.text:0040A1B4                 cmp     eax, 59h ; 'Y'
.text:0040A1B7                 jnz     loc_40A0B3
.text:0040A1BD
.text:0040A1BD loc_40A1BD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040A1BD                                         ; ___get_errno+23C↓j
.text:0040A1BD                 mov     edx, 0Bh
.text:0040A1C2                 jmp     loc_40A0B0
.text:0040A1C7 ; ---------------------------------------------------------------------------
.text:0040A1C7
.text:0040A1C7 loc_40A1C7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040A1C7                 cmp     eax, 70h ; 'p'
.text:0040A1CA                 mov     edx, 1Ch
.text:0040A1CF                 jz      loc_40A0B0
.text:0040A1D5                 cmp     eax, 70h ; 'p'
.text:0040A1D8                 jg      short loc_40A1E7
.text:0040A1DA                 mov     edx, 20h ; ' '
.text:0040A1DF                 cmp     eax, 6Dh ; 'm'
.text:0040A1E2                 jmp     loc_40A121
.text:0040A1E7 ; ---------------------------------------------------------------------------
.text:0040A1E7
.text:0040A1E7 loc_40A1E7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040A1E7                 cmp     eax, 72h ; 'r'
.text:0040A1EA
.text:0040A1EA loc_40A1EA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040A1EA                 jnz     loc_40A0B3
.text:0040A1F0                 jmp     loc_40A0CB
.text:0040A1F5 ; ---------------------------------------------------------------------------
.text:0040A1F5
.text:0040A1F5 loc_40A1F5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040A1F5                 cmp     eax, 84h ; '„'
.text:0040A1FA                 jz      loc_40A0D2
.text:0040A200                 cmp     eax, 84h ; '„'
.text:0040A205                 jg      short loc_40A20E
.text:0040A207                 cmp     eax, 82h ; '‚'
.text:0040A20C                 jmp     short loc_40A1EA
.text:0040A20E ; ---------------------------------------------------------------------------
.text:0040A20E
.text:0040A20E loc_40A20E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040A20E                 cmp     eax, 91h ; '‘'
.text:0040A213                 mov     edx, 29h ; ')'
.text:0040A218                 jz      loc_40A0B0
.text:0040A21E                 cmp     eax, 9Eh ; 'ž'
.text:0040A223
.text:0040A223 loc_40A223:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040A223                 jnz     loc_40A0B3
.text:0040A229                 jmp     loc_40A0D2
.text:0040A229 ; ---------------------------------------------------------------------------
.text:0040A22E                 align 10h
.text:0040A230
.text:0040A230 loc_40A230:                             ; CODE XREF: ___get_errno+110↑j
.text:0040A230                 cmp     eax, 0CEh ; 'Î'
.text:0040A235                 jz      loc_40A0A0
.text:0040A23B                 cmp     eax, 0CEh ; 'Î'
.text:0040A240                 jg      short loc_40A290
.text:0040A242                 cmp     eax, 0AAh ; 'ª'
.text:0040A247                 jz      loc_40A12A
.text:0040A24D                 cmp     eax, 0AAh ; 'ª'
.text:0040A252                 jg      short loc_40A266
.text:0040A254                 cmp     eax, 0A4h ; '¤'
.text:0040A259                 jz      loc_40A1BD
.text:0040A25F                 cmp     eax, 0A7h ; '§'
.text:0040A264                 jmp     short loc_40A223
.text:0040A266 ; ---------------------------------------------------------------------------
.text:0040A266
.text:0040A266 loc_40A266:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040A266                 cmp     eax, 0B7h ; '·'
.text:0040A26B                 jz      loc_40A163
.text:0040A271                 cmp     eax, 0B7h ; '·'
.text:0040A276                 jl      loc_40A0B3
.text:0040A27C                 sub     eax, 0BCh ; '¼'
.text:0040A281                 cmp     eax, 0Eh
.text:0040A284                 ja      loc_40A0B3
.text:0040A28A                 jmp     loc_40A0F9
.text:0040A28A ; ---------------------------------------------------------------------------
.text:0040A28F                 align 10h
.text:0040A290
.text:0040A290 loc_40A290:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040A290                 cmp     eax, 46Bh
.text:0040A295                 mov     edx, 24h ; '$'
.text:0040A29A                 jz      loc_40A0B0
.text:0040A2A0                 cmp     eax, 46Bh
.text:0040A2A5                 jg      short loc_40A2C1
.text:0040A2A7                 cmp     eax, 0D7h ; '×'
.text:0040A2AC                 jz      loc_40A1BD
.text:0040A2B2                 mov     edx, 5
.text:0040A2B7                 cmp     eax, 45Dh
.text:0040A2BC                 jmp     loc_40A121
.text:0040A2C1 ; ---------------------------------------------------------------------------
.text:0040A2C1
.text:0040A2C1 loc_40A2C1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040A2C1                 cmp     eax, 4D5h
.text:0040A2C6                 mov     edx, 4
.text:0040A2CB                 jz      loc_40A0B0
.text:0040A2D1                 cmp     eax, 4D5h
.text:0040A2D6                 jg      short loc_40A2E7
.text:0040A2D8                 mov     edx, 13h
.text:0040A2DD                 cmp     eax, 4B0h
.text:0040A2E2                 jmp     loc_40A121
.text:0040A2E7 ; ---------------------------------------------------------------------------
.text:0040A2E7
.text:0040A2E7 loc_40A2E7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040A2E7                 cmp     eax, 718h
.text:0040A2EC                 jnz     loc_40A0B3
.text:0040A2F2                 jmp     loc_40A0D9
.text:0040A2F2 ___get_errno    endp
.text:0040A2F2
.text:0040A2F2 ; ---------------------------------------------------------------------------
.text:0040A2F7                 align 10h
.text:0040A300
.text:0040A300 ; =============== S U B R O U T I N E =======================================
.text:0040A300
.text:0040A300
.text:0040A300 sub_40A300      proc near               ; CODE XREF: sub_409D10+CB↑p
.text:0040A300
.text:0040A300 var_C           = dword ptr -0Ch
.text:0040A300
.text:0040A300                 sub     esp, 0Ch
.text:0040A303                 call    GetLastError
.text:0040A308                 mov     [esp+0Ch+var_C], eax
.text:0040A30B                 call    ___get_errno
.text:0040A310                 add     esp, 0Ch
.text:0040A313                 retn
.text:0040A313 sub_40A300      endp
.text:0040A313
.text:0040A313 ; ---------------------------------------------------------------------------
.text:0040A314                 align 10h
.text:0040A320 ; const char Str[]
.text:0040A320 Str             db '-+ #0',0            ; DATA XREF: sub_40A330+79↓o
.text:0040A326 ; const char aHll[]
.text:0040A326 aHll            db 'hlL',0              ; DATA XREF: sub_40A330+C6↓o
.text:0040A32A                 align 10h
.text:0040A330
.text:0040A330 ; =============== S U B R O U T I N E =======================================
.text:0040A330
.text:0040A330 ; Attributes: bp-based frame
.text:0040A330
.text:0040A330 ; int __cdecl sub_40A330(int, char *Str, int)
.text:0040A330 sub_40A330      proc near               ; CODE XREF: sub_40A590+12↓p
.text:0040A330
.text:0040A330 String          = dword ptr -10h
.text:0040A330 arg_0           = dword ptr  8
.text:0040A330 Str             = dword ptr  0Ch
.text:0040A330 arg_8           = dword ptr  10h
.text:0040A330
.text:0040A330                 push    ebp
.text:0040A331                 mov     ebp, esp
.text:0040A333                 push    edi
.text:0040A334                 push    esi
.text:0040A335                 push    ebx
.text:0040A336                 sub     esp, 18h
.text:0040A339                 mov     edi, [ebp+Str]
.text:0040A33C                 push    edi             ; Str
.text:0040A33D                 mov     [ebp+String], edi
.text:0040A340                 call    strlen
.text:0040A345                 mov     edx, [ebp+String]
.text:0040A348                 add     esp, 10h
.text:0040A34B                 lea     ebx, [eax+1]
.text:0040A34E                 cmp     byte ptr [edx], 0
.text:0040A351                 mov     eax, [ebp+arg_8]
.text:0040A354                 mov     esi, [eax]
.text:0040A356                 jz      short loc_40A36B
.text:0040A358
.text:0040A358 loc_40A358:                             ; CODE XREF: sub_40A330+39↓j
.text:0040A358                 mov     eax, edx
.text:0040A35A                 inc     edx
.text:0040A35B                 mov     [ebp+String], edx
.text:0040A35E                 cmp     byte ptr [eax], 25h ; '%'
.text:0040A361                 jz      short loc_40A3A0
.text:0040A363
.text:0040A363 loc_40A363:                             ; CODE XREF: sub_40A330+1D9↓j
.text:0040A363                 mov     edx, [ebp+String]
.text:0040A366                 cmp     byte ptr [edx], 0
.text:0040A369                 jnz     short loc_40A358
.text:0040A36B
.text:0040A36B loc_40A36B:                             ; CODE XREF: sub_40A330+26↑j
.text:0040A36B                 sub     esp, 0Ch
.text:0040A36E                 push    ebx             ; Size
.text:0040A36F                 call    malloc
.text:0040A374                 add     esp, 10h
.text:0040A377                 mov     edx, eax
.text:0040A379                 mov     eax, [ebp+arg_0]
.text:0040A37C                 test    edx, edx
.text:0040A37E                 mov     [eax], edx
.text:0040A380                 jz      short loc_40A398
.text:0040A382                 mov     eax, [ebp+arg_8]
.text:0040A385                 push    ecx
.text:0040A386                 mov     eax, [eax]
.text:0040A388                 push    eax             ; ArgList
.text:0040A389                 push    edi             ; Format
.text:0040A38A                 push    edx             ; Buffer
.text:0040A38B                 call    vsprintf
.text:0040A390
.text:0040A390 loc_40A390:                             ; CODE XREF: sub_40A330+6A↓j
.text:0040A390                 lea     esp, [ebp-0Ch]
.text:0040A393                 pop     ebx
.text:0040A394                 pop     esi
.text:0040A395                 pop     edi
.text:0040A396                 pop     ebp
.text:0040A397                 retn
.text:0040A398 ; ---------------------------------------------------------------------------
.text:0040A398
.text:0040A398 loc_40A398:                             ; CODE XREF: sub_40A330+50↑j
.text:0040A398                 xor     eax, eax
.text:0040A39A                 jmp     short loc_40A390
.text:0040A39A ; ---------------------------------------------------------------------------
.text:0040A39C                 align 10h
.text:0040A3A0
.text:0040A3A0 loc_40A3A0:                             ; CODE XREF: sub_40A330+31↑j
.text:0040A3A0                                         ; sub_40A330+91↓j
.text:0040A3A0                 push    eax
.text:0040A3A1                 push    eax
.text:0040A3A2                 mov     eax, [ebp+String]
.text:0040A3A5                 movsx   eax, byte ptr [eax]
.text:0040A3A8                 push    eax             ; Val
.text:0040A3A9                 push    offset Str      ; "-+ #0"
.text:0040A3AE                 call    strchr
.text:0040A3B3                 add     esp, 10h
.text:0040A3B6                 test    eax, eax
.text:0040A3B8                 jz      short loc_40A3C3
.text:0040A3BA                 mov     eax, [ebp+String]
.text:0040A3BD                 inc     eax
.text:0040A3BE                 mov     [ebp+String], eax
.text:0040A3C1                 jmp     short loc_40A3A0
.text:0040A3C3 ; ---------------------------------------------------------------------------
.text:0040A3C3
.text:0040A3C3 loc_40A3C3:                             ; CODE XREF: sub_40A330+88↑j
.text:0040A3C3                 mov     edx, [ebp+String]
.text:0040A3C6                 cmp     byte ptr [edx], 2Ah ; '*'
.text:0040A3C9                 jz      loc_40A570
.text:0040A3CF                 push    eax
.text:0040A3D0                 lea     eax, [ebp+String]
.text:0040A3D3                 push    0Ah             ; Radix
.text:0040A3D5                 push    eax             ; EndPtr
.text:0040A3D6                 push    edx             ; String
.text:0040A3D7                 call    strtoul
.text:0040A3DC                 add     esp, 10h
.text:0040A3DF                 add     ebx, eax
.text:0040A3E1
.text:0040A3E1 loc_40A3E1:                             ; CODE XREF: sub_40A330+251↓j
.text:0040A3E1                 mov     edx, [ebp+String]
.text:0040A3E4                 mov     eax, edx
.text:0040A3E6                 cmp     byte ptr [edx], 2Eh ; '.'
.text:0040A3E9                 jz      loc_40A52D
.text:0040A3EF                 nop
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_40A330+DE↓j
.text:0040A3F0                                         ; sub_40A330+21C↓j ...
.text:0040A3F0                 push    eax
.text:0040A3F1                 push    eax
.text:0040A3F2                 movsx   eax, byte ptr [edx]
.text:0040A3F5                 push    eax             ; Val
.text:0040A3F6                 push    offset aHll     ; "hlL"
.text:0040A3FB                 call    strchr
.text:0040A400                 add     esp, 10h
.text:0040A403                 test    eax, eax
.text:0040A405                 jz      short loc_40A410
.text:0040A407                 mov     edx, [ebp+String]
.text:0040A40A                 inc     edx
.text:0040A40B                 mov     [ebp+String], edx
.text:0040A40E                 jmp     short loc_40A3F0
.text:0040A410 ; ---------------------------------------------------------------------------
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: sub_40A330+D5↑j
.text:0040A410                 mov     edx, [ebp+String]
.text:0040A413                 add     ebx, 1Eh
.text:0040A416                 movsx   eax, byte ptr [edx]
.text:0040A419                 sub     eax, 45h ; 'E'  ; switch 52 cases
.text:0040A41C                 cmp     eax, 33h
.text:0040A41F                 ja      def_40A425      ; jumptable 0040A425 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040A425                 jmp     ds:jpt_40A425[eax*4] ; switch jump
.text:0040A425 ; ---------------------------------------------------------------------------
.text:0040A42C jpt_40A425      dd offset loc_40A4FC, offset def_40A425, offset loc_40A4FC
.text:0040A42C                                         ; DATA XREF: sub_40A330+F5↑r
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425 ; jump table for switch statement
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset loc_40A50E, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset loc_40A50E, offset loc_40A50E, offset loc_40A4FC
.text:0040A42C                 dd offset loc_40A4FC, offset loc_40A4FC, offset def_40A425
.text:0040A42C                 dd offset loc_40A50E, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset def_40A425, offset loc_40A50E
.text:0040A42C                 dd offset loc_40A50E, offset loc_40A50E, offset def_40A425
.text:0040A42C                 dd offset def_40A425, offset loc_40A513, offset def_40A425
.text:0040A42C                 dd offset loc_40A50E, offset def_40A425, offset def_40A425
.text:0040A42C                 dd offset loc_40A50E
.text:0040A4FC ; ---------------------------------------------------------------------------
.text:0040A4FC
.text:0040A4FC loc_40A4FC:                             ; CODE XREF: sub_40A330+F5↑j
.text:0040A4FC                                         ; DATA XREF: sub_40A330:jpt_40A425↑o
.text:0040A4FC                 add     esi, 8          ; jumptable 0040A425 cases 69,71,101-103
.text:0040A4FF                 add     ebx, 133h
.text:0040A505
.text:0040A505 def_40A425:                             ; CODE XREF: sub_40A330+EF↑j
.text:0040A505                                         ; sub_40A330+F5↑j ...
.text:0040A505                 inc     edx             ; jumptable 0040A425 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040A506                 mov     [ebp+String], edx
.text:0040A509                 jmp     loc_40A363
.text:0040A50E ; ---------------------------------------------------------------------------
.text:0040A50E
.text:0040A50E loc_40A50E:                             ; CODE XREF: sub_40A330+F5↑j
.text:0040A50E                                         ; DATA XREF: sub_40A330:jpt_40A425↑o
.text:0040A50E                 add     esi, 4          ; jumptable 0040A425 cases 88,99,100,105,110-112,117,120
.text:0040A511                 jmp     short def_40A425 ; jumptable 0040A425 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040A513 ; ---------------------------------------------------------------------------
.text:0040A513
.text:0040A513 loc_40A513:                             ; CODE XREF: sub_40A330+F5↑j
.text:0040A513                                         ; DATA XREF: sub_40A330:jpt_40A425↑o
.text:0040A513                 mov     eax, esi        ; jumptable 0040A425 case 115
.text:0040A515                 sub     esp, 0Ch
.text:0040A518                 add     esi, 4
.text:0040A51B                 mov     eax, [eax]
.text:0040A51D                 push    eax             ; Str
.text:0040A51E                 call    strlen
.text:0040A523                 mov     edx, [ebp+String]
.text:0040A526                 add     ebx, eax
.text:0040A528                 add     esp, 10h
.text:0040A52B                 jmp     short def_40A425 ; jumptable 0040A425 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040A52D ; ---------------------------------------------------------------------------
.text:0040A52D
.text:0040A52D loc_40A52D:                             ; CODE XREF: sub_40A330+B9↑j
.text:0040A52D                 inc     edx
.text:0040A52E                 mov     [ebp+String], edx
.text:0040A531                 cmp     byte ptr [eax+1], 2Ah ; '*'
.text:0040A535                 jz      short loc_40A551
.text:0040A537                 push    eax
.text:0040A538                 lea     eax, [ebp+String]
.text:0040A53B                 push    0Ah             ; Radix
.text:0040A53D                 push    eax             ; EndPtr
.text:0040A53E                 push    edx             ; String
.text:0040A53F                 call    strtoul
.text:0040A544                 mov     edx, [ebp+String]
.text:0040A547                 add     ebx, eax
.text:0040A549                 add     esp, 10h
.text:0040A54C                 jmp     loc_40A3F0
.text:0040A551 ; ---------------------------------------------------------------------------
.text:0040A551
.text:0040A551 loc_40A551:                             ; CODE XREF: sub_40A330+205↑j
.text:0040A551                 lea     edx, [eax+2]
.text:0040A554                 mov     eax, esi
.text:0040A556                 mov     [ebp+String], edx
.text:0040A559                 add     esi, 4
.text:0040A55C                 mov     eax, [eax]
.text:0040A55E                 test    eax, eax
.text:0040A560                 js      short loc_40A569
.text:0040A562
.text:0040A562 loc_40A562:                             ; CODE XREF: sub_40A330+23B↓j
.text:0040A562                 add     ebx, eax
.text:0040A564                 jmp     loc_40A3F0
.text:0040A569 ; ---------------------------------------------------------------------------
.text:0040A569
.text:0040A569 loc_40A569:                             ; CODE XREF: sub_40A330+230↑j
.text:0040A569                 neg     eax
.text:0040A56B                 jmp     short loc_40A562
.text:0040A56B ; ---------------------------------------------------------------------------
.text:0040A56D                 align 10h
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: sub_40A330+99↑j
.text:0040A570                 mov     eax, esi
.text:0040A572                 inc     edx
.text:0040A573                 add     esi, 4
.text:0040A576                 mov     [ebp+String], edx
.text:0040A579                 mov     eax, [eax]
.text:0040A57B                 test    eax, eax
.text:0040A57D                 js      short loc_40A586
.text:0040A57F
.text:0040A57F loc_40A57F:                             ; CODE XREF: sub_40A330+258↓j
.text:0040A57F                 add     ebx, eax
.text:0040A581                 jmp     loc_40A3E1
.text:0040A586 ; ---------------------------------------------------------------------------
.text:0040A586
.text:0040A586 loc_40A586:                             ; CODE XREF: sub_40A330+24D↑j
.text:0040A586                 neg     eax
.text:0040A588                 jmp     short loc_40A57F
.text:0040A588 sub_40A330      endp
.text:0040A588
.text:0040A588 ; ---------------------------------------------------------------------------
.text:0040A58A                 align 10h
.text:0040A590
.text:0040A590 ; =============== S U B R O U T I N E =======================================
.text:0040A590
.text:0040A590 ; Attributes: bp-based frame
.text:0040A590
.text:0040A590 ; int __cdecl sub_40A590(int, char *Str, int)
.text:0040A590 sub_40A590      proc near               ; CODE XREF: sub_405B10+1B↑p
.text:0040A590
.text:0040A590 arg_0           = dword ptr  8
.text:0040A590 Str             = dword ptr  0Ch
.text:0040A590 arg_8           = dword ptr  10h
.text:0040A590
.text:0040A590                 push    ebp
.text:0040A591                 mov     ebp, esp
.text:0040A593                 sub     esp, 0Ch
.text:0040A596                 lea     eax, [ebp+arg_8]
.text:0040A599                 mov     ecx, [ebp+Str]
.text:0040A59C                 push    eax             ; int
.text:0040A59D                 mov     edx, [ebp+arg_0]
.text:0040A5A0                 push    ecx             ; Str
.text:0040A5A1                 push    edx             ; int
.text:0040A5A2                 call    sub_40A330
.text:0040A5A7                 mov     esp, ebp
.text:0040A5A9                 pop     ebp
.text:0040A5AA                 retn
.text:0040A5AA sub_40A590      endp
.text:0040A5AA
.text:0040A5AA ; ---------------------------------------------------------------------------
.text:0040A5AB                 align 10h
.text:0040A5B0
.text:0040A5B0 ; =============== S U B R O U T I N E =======================================
.text:0040A5B0
.text:0040A5B0 ; Attributes: thunk
.text:0040A5B0
.text:0040A5B0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040A5B0 mbrtowc         proc near               ; CODE XREF: sub_408140+757↑p
.text:0040A5B0
.text:0040A5B0 DstCh           = dword ptr  4
.text:0040A5B0 SrcCh           = dword ptr  8
.text:0040A5B0 SizeInBytes     = dword ptr  0Ch
.text:0040A5B0 State           = dword ptr  10h
.text:0040A5B0
.text:0040A5B0                 jmp     ds:__imp_mbrtowc
.text:0040A5B0 mbrtowc         endp
.text:0040A5B0
.text:0040A5B0 ; ---------------------------------------------------------------------------
.text:0040A5B6                 align 10h
.text:0040A5C0
.text:0040A5C0 ; =============== S U B R O U T I N E =======================================
.text:0040A5C0
.text:0040A5C0 ; Attributes: bp-based frame
.text:0040A5C0
.text:0040A5C0 sub_40A5C0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040A5C0                 push    ebp
.text:0040A5C1                 mov     ecx, offset byte_40C000
.text:0040A5C6                 cmp     ecx, offset byte_40C000
.text:0040A5CC                 mov     ebp, esp
.text:0040A5CE                 jnb     short loc_40A5E6
.text:0040A5D0
.text:0040A5D0 loc_40A5D0:                             ; CODE XREF: sub_40A5C0+24↓j
.text:0040A5D0                 mov     edx, [ecx+4]
.text:0040A5D3                 mov     eax, [ecx]
.text:0040A5D5                 add     ecx, 8
.text:0040A5D8                 add     [edx+400000h], eax
.text:0040A5DE                 cmp     ecx, offset byte_40C000
.text:0040A5E4                 jb      short loc_40A5D0
.text:0040A5E6
.text:0040A5E6 loc_40A5E6:                             ; CODE XREF: sub_40A5C0+E↑j
.text:0040A5E6                 pop     ebp
.text:0040A5E7                 retn
.text:0040A5E7 sub_40A5C0      endp
.text:0040A5E7
.text:0040A5E7 ; ---------------------------------------------------------------------------
.text:0040A5E8                 align 10h
.text:0040A5F0
.text:0040A5F0 ; =============== S U B R O U T I N E =======================================
.text:0040A5F0
.text:0040A5F0 ; Attributes: bp-based frame
.text:0040A5F0
.text:0040A5F0 sub_40A5F0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040A5F0                                         ; TopLevelExceptionFilter+D7↑p
.text:0040A5F0                 push    ebp
.text:0040A5F1                 mov     ebp, esp
.text:0040A5F3                 fninit
.text:0040A5F5                 pop     ebp
.text:0040A5F6                 retn
.text:0040A5F6 sub_40A5F0      endp
.text:0040A5F6
.text:0040A5F6 ; ---------------------------------------------------------------------------
.text:0040A5F7                 align 10h
.text:0040A600
.text:0040A600 ; =============== S U B R O U T I N E =======================================
.text:0040A600
.text:0040A600 ; Attributes: bp-based frame
.text:0040A600
.text:0040A600 ; void __cdecl sub_40A600()
.text:0040A600 sub_40A600      proc near               ; DATA XREF: .text:loc_40A649↓o
.text:0040A600                                         ; sub_40A690:loc_40A6BE↓o
.text:0040A600                 push    ebp
.text:0040A601                 mov     ebp, esp
.text:0040A603                 sub     esp, 8
.text:0040A606                 mov     eax, off_40B8A4
.text:0040A60B                 mov     edx, [eax]
.text:0040A60D                 test    edx, edx
.text:0040A60F                 jnz     short loc_40A615
.text:0040A611
.text:0040A611 loc_40A611:                             ; CODE XREF: sub_40A600+2C↓j
.text:0040A611                 mov     esp, ebp
.text:0040A613                 pop     ebp
.text:0040A614                 retn
.text:0040A615 ; ---------------------------------------------------------------------------
.text:0040A615
.text:0040A615 loc_40A615:                             ; CODE XREF: sub_40A600+F↑j
.text:0040A615                                         ; sub_40A600+2A↓j
.text:0040A615                 call    dword ptr [eax]
.text:0040A617                 mov     edx, off_40B8A4
.text:0040A61D                 mov     ecx, [edx+4]
.text:0040A620                 lea     eax, [edx+4]
.text:0040A623                 mov     off_40B8A4, eax
.text:0040A628                 test    ecx, ecx
.text:0040A62A                 jnz     short loc_40A615
.text:0040A62C                 jmp     short loc_40A611
.text:0040A62C sub_40A600      endp
.text:0040A62C
.text:0040A62C ; ---------------------------------------------------------------------------
.text:0040A62E                 align 10h
.text:0040A630                 push    ebp
.text:0040A631                 mov     ebp, esp
.text:0040A633                 sub     esp, 8
.text:0040A636                 mov     [ebp-4], ebx
.text:0040A639                 mov     eax, ds:dword_40AA20
.text:0040A63E                 cmp     eax, 0FFFFFFFFh
.text:0040A641                 jz      short loc_40A66C
.text:0040A643
.text:0040A643 loc_40A643:                             ; CODE XREF: .text:0040A676↓j
.text:0040A643                                         ; .text:0040A689↓j
.text:0040A643                 test    eax, eax
.text:0040A645                 mov     ebx, eax
.text:0040A647                 jnz     short loc_40A660
.text:0040A649
.text:0040A649 loc_40A649:                             ; CODE XREF: .text:0040A66A↓j
.text:0040A649                 mov     dword ptr [esp], offset sub_40A600
.text:0040A650                 call    sub_401040
.text:0040A655                 mov     ebx, [ebp-4]
.text:0040A658                 mov     esp, ebp
.text:0040A65A                 pop     ebp
.text:0040A65B                 retn
.text:0040A65B ; ---------------------------------------------------------------------------
.text:0040A65C                 align 10h
.text:0040A660
.text:0040A660 loc_40A660:                             ; CODE XREF: .text:0040A647↑j
.text:0040A660                                         ; .text:0040A668↓j
.text:0040A660                 call    ds:dword_40AA20[ebx*4]
.text:0040A667                 dec     ebx
.text:0040A668                 jnz     short loc_40A660
.text:0040A66A                 jmp     short loc_40A649
.text:0040A66C ; ---------------------------------------------------------------------------
.text:0040A66C
.text:0040A66C loc_40A66C:                             ; CODE XREF: .text:0040A641↑j
.text:0040A66C                 mov     ecx, ds:dword_40AA24
.text:0040A672                 xor     eax, eax
.text:0040A674                 test    ecx, ecx
.text:0040A676                 jz      short loc_40A643
.text:0040A678                 mov     edx, offset dword_40AA20
.text:0040A67D                 lea     esi, [esi+0]
.text:0040A680
.text:0040A680 loc_40A680:                             ; CODE XREF: .text:0040A687↓j
.text:0040A680                 inc     eax
.text:0040A681                 mov     ecx, [edx+eax*4+4]
.text:0040A685                 test    ecx, ecx
.text:0040A687                 jnz     short loc_40A680
.text:0040A689                 jmp     short loc_40A643
.text:0040A689 ; ---------------------------------------------------------------------------
.text:0040A68B                 align 10h
.text:0040A690
.text:0040A690 ; =============== S U B R O U T I N E =======================================
.text:0040A690
.text:0040A690 ; Attributes: bp-based frame
.text:0040A690
.text:0040A690 sub_40A690      proc near               ; CODE XREF: sub_403B10+1F↑p
.text:0040A690
.text:0040A690 var_8           = dword ptr -8
.text:0040A690 var_4           = dword ptr -4
.text:0040A690
.text:0040A690                 push    ebp
.text:0040A691                 mov     ebp, esp
.text:0040A693                 sub     esp, 8
.text:0040A696                 mov     [ebp+var_4], ebx
.text:0040A699                 mov     edx, dword_40B8A0
.text:0040A69F                 test    edx, edx
.text:0040A6A1                 jnz     short loc_40A6CA
.text:0040A6A3                 mov     eax, ds:dword_40AA20
.text:0040A6A8                 mov     edx, 1
.text:0040A6AD                 mov     dword_40B8A0, edx
.text:0040A6B3                 cmp     eax, 0FFFFFFFFh
.text:0040A6B6                 jz      short loc_40A6DD
.text:0040A6B8
.text:0040A6B8 loc_40A6B8:                             ; CODE XREF: sub_40A690+57↓j
.text:0040A6B8                                         ; sub_40A690+69↓j
.text:0040A6B8                 test    eax, eax
.text:0040A6BA                 mov     ebx, eax
.text:0040A6BC                 jnz     short loc_40A6D1
.text:0040A6BE
.text:0040A6BE loc_40A6BE:                             ; CODE XREF: sub_40A690+4B↓j
.text:0040A6BE                 mov     [esp+8+var_8], offset sub_40A600 ; void (__cdecl *)()
.text:0040A6C5                 call    sub_401040
.text:0040A6CA
.text:0040A6CA loc_40A6CA:                             ; CODE XREF: sub_40A690+11↑j
.text:0040A6CA                 mov     ebx, [ebp+var_4]
.text:0040A6CD                 mov     esp, ebp
.text:0040A6CF                 pop     ebp
.text:0040A6D0                 retn
.text:0040A6D1 ; ---------------------------------------------------------------------------
.text:0040A6D1
.text:0040A6D1 loc_40A6D1:                             ; CODE XREF: sub_40A690+2C↑j
.text:0040A6D1                                         ; sub_40A690+49↓j
.text:0040A6D1                 call    ds:dword_40AA20[ebx*4]
.text:0040A6D8                 dec     ebx
.text:0040A6D9                 jnz     short loc_40A6D1
.text:0040A6DB                 jmp     short loc_40A6BE
.text:0040A6DD ; ---------------------------------------------------------------------------
.text:0040A6DD
.text:0040A6DD loc_40A6DD:                             ; CODE XREF: sub_40A690+26↑j
.text:0040A6DD                 mov     ecx, ds:dword_40AA24
.text:0040A6E3                 xor     eax, eax
.text:0040A6E5                 test    ecx, ecx
.text:0040A6E7                 jz      short loc_40A6B8
.text:0040A6E9                 mov     edx, offset dword_40AA20
.text:0040A6EE                 mov     esi, esi
.text:0040A6F0
.text:0040A6F0 loc_40A6F0:                             ; CODE XREF: sub_40A690+67↓j
.text:0040A6F0                 inc     eax
.text:0040A6F1                 mov     ebx, [edx+eax*4+4]
.text:0040A6F5                 test    ebx, ebx
.text:0040A6F7                 jnz     short loc_40A6F0
.text:0040A6F9                 jmp     short loc_40A6B8
.text:0040A6F9 sub_40A690      endp
.text:0040A6F9
.text:0040A6F9 ; ---------------------------------------------------------------------------
.text:0040A6FB                 align 10h
.text:0040A700
.text:0040A700 ; =============== S U B R O U T I N E =======================================
.text:0040A700
.text:0040A700 ; Attributes: info_from_lumina
.text:0040A700
.text:0040A700 ; void *__cdecl _alloca(size_t Size)
.text:0040A700 __alloca        proc near               ; CODE XREF: sub_403B10+1A↑p
.text:0040A700                 push    ecx
.text:0040A701                 mov     ecx, esp
.text:0040A703                 add     ecx, 8
.text:0040A706
.text:0040A706 loc_40A706:                             ; CODE XREF: __alloca+1B↓j
.text:0040A706                 cmp     eax, 1000h
.text:0040A70B                 jb      short loc_40A71D
.text:0040A70D                 sub     ecx, 1000h
.text:0040A713                 or      dword ptr [ecx], 0
.text:0040A716                 sub     eax, 1000h
.text:0040A71B                 jmp     short loc_40A706
.text:0040A71D ; ---------------------------------------------------------------------------
.text:0040A71D
.text:0040A71D loc_40A71D:                             ; CODE XREF: __alloca+B↑j
.text:0040A71D                 sub     ecx, eax
.text:0040A71F                 or      dword ptr [ecx], 0
.text:0040A722                 mov     eax, esp
.text:0040A724                 mov     esp, ecx
.text:0040A726                 mov     ecx, [eax]
.text:0040A728                 mov     eax, [eax+4]
.text:0040A72B                 jmp     eax
.text:0040A72B __alloca        endp
.text:0040A72B
.text:0040A72B ; ---------------------------------------------------------------------------
.text:0040A72D                 align 10h
.text:0040A730
.text:0040A730 ; =============== S U B R O U T I N E =======================================
.text:0040A730
.text:0040A730 ; Attributes: thunk
.text:0040A730
.text:0040A730 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040A730 _open           proc near               ; CODE XREF: sub_403B10+239↑p
.text:0040A730
.text:0040A730 FileName        = dword ptr  4
.text:0040A730 OpenFlag        = dword ptr  8
.text:0040A730
.text:0040A730                 jmp     ds:__imp__open
.text:0040A730 _open           endp
.text:0040A730
.text:0040A730 ; ---------------------------------------------------------------------------
.text:0040A736                 align 10h
.text:0040A740
.text:0040A740 ; =============== S U B R O U T I N E =======================================
.text:0040A740
.text:0040A740 ; Attributes: thunk
.text:0040A740
.text:0040A740 ; int __cdecl dup(int FileHandle)
.text:0040A740 _dup            proc near               ; CODE XREF: sub_409E30+57↑p
.text:0040A740
.text:0040A740 FileHandle      = dword ptr  4
.text:0040A740
.text:0040A740                 jmp     ds:__imp__dup
.text:0040A740 _dup            endp
.text:0040A740
.text:0040A740 ; ---------------------------------------------------------------------------
.text:0040A746                 align 10h
.text:0040A750                 jmp     ds:__set_app_type
.text:0040A750 ; ---------------------------------------------------------------------------
.text:0040A756                 align 10h
.text:0040A760
.text:0040A760 ; =============== S U B R O U T I N E =======================================
.text:0040A760
.text:0040A760 ; Attributes: thunk
.text:0040A760
.text:0040A760 ; void __cdecl cexit()
.text:0040A760 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040A760                 jmp     ds:__imp__cexit
.text:0040A760 _cexit          endp
.text:0040A760
.text:0040A760 ; ---------------------------------------------------------------------------
.text:0040A766                 align 10h
.text:0040A770
.text:0040A770 ; =============== S U B R O U T I N E =======================================
.text:0040A770
.text:0040A770 ; Attributes: thunk
.text:0040A770
.text:0040A770 ; char ***__cdecl _p__environ()
.text:0040A770 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040A770                 jmp     ds:__imp___p__environ
.text:0040A770 __p__environ    endp
.text:0040A770
.text:0040A770 ; ---------------------------------------------------------------------------
.text:0040A776                 align 10h
.text:0040A780
.text:0040A780 ; =============== S U B R O U T I N E =======================================
.text:0040A780
.text:0040A780 ; Attributes: thunk
.text:0040A780
.text:0040A780 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040A780 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040A780                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040A780
.text:0040A780 Signal          = dword ptr  4
.text:0040A780 Function        = dword ptr  8
.text:0040A780
.text:0040A780                 jmp     ds:__imp_signal
.text:0040A780 signal          endp
.text:0040A780
.text:0040A780 ; ---------------------------------------------------------------------------
.text:0040A786                 align 10h
.text:0040A790
.text:0040A790 ; =============== S U B R O U T I N E =======================================
.text:0040A790
.text:0040A790 ; Attributes: thunk
.text:0040A790
.text:0040A790 ; int *__cdecl _p__fmode()
.text:0040A790 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040A790                 jmp     ds:__imp___p__fmode
.text:0040A790 __p__fmode      endp
.text:0040A790
.text:0040A790 ; ---------------------------------------------------------------------------
.text:0040A796                 align 10h
.text:0040A7A0
.text:0040A7A0 ; =============== S U B R O U T I N E =======================================
.text:0040A7A0
.text:0040A7A0 ; Attributes: thunk
.text:0040A7A0
.text:0040A7A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040A7A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040A7A0                                         ; sub_401080+90↑p ...
.text:0040A7A0
.text:0040A7A0 FileHandle      = dword ptr  4
.text:0040A7A0 Mode            = dword ptr  8
.text:0040A7A0
.text:0040A7A0                 jmp     ds:__imp__setmode
.text:0040A7A0 _setmode        endp
.text:0040A7A0
.text:0040A7A0 ; ---------------------------------------------------------------------------
.text:0040A7A6                 align 10h
.text:0040A7B0
.text:0040A7B0 ; =============== S U B R O U T I N E =======================================
.text:0040A7B0
.text:0040A7B0 ; Attributes: thunk
.text:0040A7B0
.text:0040A7B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040A7B0                 jmp     ds:__imp___getmainargs
.text:0040A7B0 __getmainargs   endp
.text:0040A7B0
.text:0040A7B0 ; ---------------------------------------------------------------------------
.text:0040A7B6                 align 10h
.text:0040A7C0
.text:0040A7C0 ; =============== S U B R O U T I N E =======================================
.text:0040A7C0
.text:0040A7C0 ; Attributes: thunk
.text:0040A7C0
.text:0040A7C0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040A7C0 sscanf          proc near               ; CODE XREF: sub_405670+42↑p
.text:0040A7C0                                         ; sub_405670+97↑p
.text:0040A7C0
.text:0040A7C0 Buffer          = dword ptr  4
.text:0040A7C0 Format          = dword ptr  8
.text:0040A7C0
.text:0040A7C0                 jmp     ds:__imp_sscanf
.text:0040A7C0 sscanf          endp
.text:0040A7C0
.text:0040A7C0 ; ---------------------------------------------------------------------------
.text:0040A7C6                 align 10h
.text:0040A7D0
.text:0040A7D0 ; =============== S U B R O U T I N E =======================================
.text:0040A7D0
.text:0040A7D0 ; Attributes: noreturn thunk
.text:0040A7D0
.text:0040A7D0 ; void __cdecl __noreturn abort()
.text:0040A7D0 abort           proc near               ; CODE XREF: sub_404D90:def_404DA0↑p
.text:0040A7D0                                         ; sub_407BF0:loc_407C8C↑p ...
.text:0040A7D0                 jmp     ds:__imp_abort
.text:0040A7D0 abort           endp
.text:0040A7D0
.text:0040A7D0 ; ---------------------------------------------------------------------------
.text:0040A7D6                 align 10h
.text:0040A7E0
.text:0040A7E0 ; =============== S U B R O U T I N E =======================================
.text:0040A7E0
.text:0040A7E0 ; Attributes: thunk
.text:0040A7E0
.text:0040A7E0 ; char *__cdecl getenv(const char *VarName)
.text:0040A7E0 getenv          proc near               ; CODE XREF: sub_404CF0+37↑p
.text:0040A7E0                                         ; sub_405DA0+C27↑p
.text:0040A7E0
.text:0040A7E0 VarName         = dword ptr  4
.text:0040A7E0
.text:0040A7E0                 jmp     ds:__imp_getenv
.text:0040A7E0 getenv          endp
.text:0040A7E0
.text:0040A7E0 ; ---------------------------------------------------------------------------
.text:0040A7E6                 align 10h
.text:0040A7F0
.text:0040A7F0 ; =============== S U B R O U T I N E =======================================
.text:0040A7F0
.text:0040A7F0 ; Attributes: thunk
.text:0040A7F0
.text:0040A7F0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040A7F0 strcmp          proc near               ; CODE XREF: sub_403B10+38B↑p
.text:0040A7F0                                         ; sub_403B10+3DC↑p ...
.text:0040A7F0
.text:0040A7F0 Str1            = dword ptr  4
.text:0040A7F0 Str2            = dword ptr  8
.text:0040A7F0
.text:0040A7F0                 jmp     ds:__imp_strcmp
.text:0040A7F0 strcmp          endp
.text:0040A7F0
.text:0040A7F0 ; ---------------------------------------------------------------------------
.text:0040A7F6                 align 10h
.text:0040A800
.text:0040A800 ; =============== S U B R O U T I N E =======================================
.text:0040A800
.text:0040A800 ; Attributes: thunk
.text:0040A800
.text:0040A800 ; int *__cdecl errno()
.text:0040A800 _errno          proc near               ; CODE XREF: sub_403B10:loc_404014↑p
.text:0040A800                                         ; sub_403B10:loc_40403F↑p ...
.text:0040A800                 jmp     ds:__imp__errno
.text:0040A800 _errno          endp
.text:0040A800
.text:0040A800 ; ---------------------------------------------------------------------------
.text:0040A806                 align 10h
.text:0040A810
.text:0040A810 ; =============== S U B R O U T I N E =======================================
.text:0040A810
.text:0040A810 ; Attributes: thunk
.text:0040A810
.text:0040A810 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040A810 setlocale       proc near               ; CODE XREF: sub_403B10+45↑p
.text:0040A810
.text:0040A810 Category        = dword ptr  4
.text:0040A810 Locale          = dword ptr  8
.text:0040A810
.text:0040A810                 jmp     ds:__imp_setlocale
.text:0040A810 setlocale       endp
.text:0040A810
.text:0040A810 ; ---------------------------------------------------------------------------
.text:0040A816                 align 10h
.text:0040A820
.text:0040A820 ; =============== S U B R O U T I N E =======================================
.text:0040A820
.text:0040A820 ; Attributes: noreturn thunk
.text:0040A820
.text:0040A820 ; void __cdecl __noreturn exit(int Code)
.text:0040A820 exit            proc near               ; CODE XREF: sub_403430+3B↑p
.text:0040A820                                         ; sub_403B10+181↑p ...
.text:0040A820
.text:0040A820 Code            = dword ptr  4
.text:0040A820
.text:0040A820                 jmp     ds:__imp_exit
.text:0040A820 exit            endp
.text:0040A820
.text:0040A820 ; ---------------------------------------------------------------------------
.text:0040A826                 align 10h
.text:0040A830
.text:0040A830 ; =============== S U B R O U T I N E =======================================
.text:0040A830
.text:0040A830 ; Attributes: thunk
.text:0040A830
.text:0040A830 ; int printf(const char *const Format, ...)
.text:0040A830 printf          proc near               ; CODE XREF: sub_403430+62↑p
.text:0040A830                                         ; sub_403430+4BF↑p ...
.text:0040A830
.text:0040A830 Format          = dword ptr  4
.text:0040A830
.text:0040A830                 jmp     ds:__imp_printf
.text:0040A830 printf          endp
.text:0040A830
.text:0040A830 ; ---------------------------------------------------------------------------
.text:0040A836                 align 10h
.text:0040A840
.text:0040A840 ; =============== S U B R O U T I N E =======================================
.text:0040A840
.text:0040A840 ; Attributes: thunk
.text:0040A840
.text:0040A840 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040A840 fprintf         proc near               ; CODE XREF: sub_403430+33↑p
.text:0040A840                                         ; sub_405DA0+40B↑p ...
.text:0040A840
.text:0040A840 Stream          = dword ptr  4
.text:0040A840 Format          = dword ptr  8
.text:0040A840
.text:0040A840                 jmp     ds:__imp_fprintf
.text:0040A840 fprintf         endp
.text:0040A840
.text:0040A840 ; ---------------------------------------------------------------------------
.text:0040A846                 align 10h
.text:0040A850
.text:0040A850 ; =============== S U B R O U T I N E =======================================
.text:0040A850
.text:0040A850 ; Attributes: thunk
.text:0040A850
.text:0040A850 ; void __cdecl free(void *Block)
.text:0040A850 free            proc near               ; CODE XREF: sub_405B10+88↑p
.text:0040A850                                         ; sub_409280+112↑p
.text:0040A850
.text:0040A850 Block           = dword ptr  4
.text:0040A850
.text:0040A850                 jmp     ds:__imp_free
.text:0040A850 free            endp
.text:0040A850
.text:0040A850 ; ---------------------------------------------------------------------------
.text:0040A856                 align 10h
.text:0040A860
.text:0040A860 ; =============== S U B R O U T I N E =======================================
.text:0040A860
.text:0040A860 ; Attributes: thunk
.text:0040A860
.text:0040A860 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040A860 fputs           proc near               ; CODE XREF: sub_403430+84↑p
.text:0040A860                                         ; sub_403430+A6↑p ...
.text:0040A860
.text:0040A860 Buffer          = dword ptr  4
.text:0040A860 Stream          = dword ptr  8
.text:0040A860
.text:0040A860                 jmp     ds:__imp_fputs
.text:0040A860 fputs           endp
.text:0040A860
.text:0040A860 ; ---------------------------------------------------------------------------
.text:0040A866                 align 10h
.text:0040A870
.text:0040A870 ; =============== S U B R O U T I N E =======================================
.text:0040A870
.text:0040A870 ; Attributes: thunk
.text:0040A870
.text:0040A870 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040A870 _flsbuf         proc near               ; CODE XREF: sub_404DF0+1F4↑p
.text:0040A870                                         ; sub_404DF0+2EF↑p ...
.text:0040A870
.text:0040A870 File            = dword ptr  8
.text:0040A870
.text:0040A870                 jmp     ds:__imp__flsbuf
.text:0040A870 _flsbuf         endp
.text:0040A870
.text:0040A870 ; ---------------------------------------------------------------------------
.text:0040A876                 align 10h
.text:0040A880
.text:0040A880 ; =============== S U B R O U T I N E =======================================
.text:0040A880
.text:0040A880 ; Attributes: thunk
.text:0040A880
.text:0040A880 ; size_t __cdecl strlen(const char *Str)
.text:0040A880 strlen          proc near               ; CODE XREF: sub_405DA0+379↑p
.text:0040A880                                         ; sub_405DA0+416↑p ...
.text:0040A880
.text:0040A880 Str             = dword ptr  4
.text:0040A880
.text:0040A880                 jmp     ds:__imp_strlen
.text:0040A880 strlen          endp
.text:0040A880
.text:0040A880 ; ---------------------------------------------------------------------------
.text:0040A886                 align 10h
.text:0040A890
.text:0040A890 ; =============== S U B R O U T I N E =======================================
.text:0040A890
.text:0040A890 ; Attributes: thunk
.text:0040A890
.text:0040A890 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040A890 strncmp         proc near               ; CODE XREF: sub_405DA0+30F↑p
.text:0040A890                                         ; sub_405DA0+769↑p
.text:0040A890
.text:0040A890 Str1            = dword ptr  4
.text:0040A890 Str2            = dword ptr  8
.text:0040A890 MaxCount        = dword ptr  0Ch
.text:0040A890
.text:0040A890                 jmp     ds:__imp_strncmp
.text:0040A890 strncmp         endp
.text:0040A890
.text:0040A890 ; ---------------------------------------------------------------------------
.text:0040A896                 align 10h
.text:0040A8A0
.text:0040A8A0 ; =============== S U B R O U T I N E =======================================
.text:0040A8A0
.text:0040A8A0 ; Attributes: thunk
.text:0040A8A0
.text:0040A8A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040A8A0 strchr          proc near               ; CODE XREF: sub_405DA0+539↑p
.text:0040A8A0                                         ; sub_405DA0+60A↑p ...
.text:0040A8A0
.text:0040A8A0 Str             = dword ptr  4
.text:0040A8A0 Val             = dword ptr  8
.text:0040A8A0
.text:0040A8A0                 jmp     ds:__imp_strchr
.text:0040A8A0 strchr          endp
.text:0040A8A0
.text:0040A8A0 ; ---------------------------------------------------------------------------
.text:0040A8A6                 align 10h
.text:0040A8B0
.text:0040A8B0 ; =============== S U B R O U T I N E =======================================
.text:0040A8B0
.text:0040A8B0 ; Attributes: thunk
.text:0040A8B0
.text:0040A8B0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040A8B0 strtoul         proc near               ; CODE XREF: sub_406CB0+94↑p
.text:0040A8B0                                         ; sub_40A330+A7↑p ...
.text:0040A8B0
.text:0040A8B0 String          = dword ptr  4
.text:0040A8B0 EndPtr          = dword ptr  8
.text:0040A8B0 Radix           = dword ptr  0Ch
.text:0040A8B0
.text:0040A8B0                 jmp     ds:__imp_strtoul
.text:0040A8B0 strtoul         endp
.text:0040A8B0
.text:0040A8B0 ; ---------------------------------------------------------------------------
.text:0040A8B6                 align 10h
.text:0040A8C0
.text:0040A8C0 ; =============== S U B R O U T I N E =======================================
.text:0040A8C0
.text:0040A8C0 ; Attributes: noreturn thunk
.text:0040A8C0
.text:0040A8C0 _assert         proc near               ; CODE XREF: sub_406CB0+553↑p
.text:0040A8C0                                         ; sub_407290+660↑p
.text:0040A8C0                 jmp     ds:__imp__assert
.text:0040A8C0 _assert         endp
.text:0040A8C0
.text:0040A8C0 ; ---------------------------------------------------------------------------
.text:0040A8C6                 align 10h
.text:0040A8D0
.text:0040A8D0 ; =============== S U B R O U T I N E =======================================
.text:0040A8D0
.text:0040A8D0 ; Attributes: thunk
.text:0040A8D0
.text:0040A8D0 ; int __cdecl isctype(int C, int Type)
.text:0040A8D0 _isctype        proc near               ; CODE XREF: sub_406CB0+5F↑p
.text:0040A8D0                                         ; sub_408140+610↑p
.text:0040A8D0
.text:0040A8D0 C               = dword ptr  4
.text:0040A8D0 Type            = dword ptr  8
.text:0040A8D0
.text:0040A8D0                 jmp     ds:__imp__isctype
.text:0040A8D0 _isctype        endp
.text:0040A8D0
.text:0040A8D0 ; ---------------------------------------------------------------------------
.text:0040A8D6                 align 10h
.text:0040A8E0
.text:0040A8E0 ; =============== S U B R O U T I N E =======================================
.text:0040A8E0
.text:0040A8E0 ; Attributes: thunk
.text:0040A8E0
.text:0040A8E0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:0040A8E0 strtol          proc near               ; CODE XREF: sub_407290+46↑p
.text:0040A8E0
.text:0040A8E0 String          = dword ptr  4
.text:0040A8E0 EndPtr          = dword ptr  8
.text:0040A8E0 Radix           = dword ptr  0Ch
.text:0040A8E0
.text:0040A8E0                 jmp     ds:__imp_strtol
.text:0040A8E0 strtol          endp
.text:0040A8E0
.text:0040A8E0 ; ---------------------------------------------------------------------------
.text:0040A8E6                 align 10h
.text:0040A8F0
.text:0040A8F0 ; =============== S U B R O U T I N E =======================================
.text:0040A8F0
.text:0040A8F0 ; Attributes: thunk
.text:0040A8F0
.text:0040A8F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040A8F0 vfprintf        proc near               ; CODE XREF: sub_407BF0+C1↑p
.text:0040A8F0                                         ; sub_409770+49↑p ...
.text:0040A8F0
.text:0040A8F0 Stream          = dword ptr  4
.text:0040A8F0 Format          = dword ptr  8
.text:0040A8F0 ArgList         = dword ptr  0Ch
.text:0040A8F0
.text:0040A8F0                 jmp     ds:__imp_vfprintf
.text:0040A8F0 vfprintf        endp
.text:0040A8F0
.text:0040A8F0 ; ---------------------------------------------------------------------------
.text:0040A8F6                 align 10h
.text:0040A900
.text:0040A900 ; =============== S U B R O U T I N E =======================================
.text:0040A900
.text:0040A900 ; Attributes: thunk
.text:0040A900
.text:0040A900 ; int __cdecl fclose(FILE *Stream)
.text:0040A900 fclose          proc near               ; CODE XREF: sub_407F70+27↑p
.text:0040A900
.text:0040A900 Stream          = dword ptr  4
.text:0040A900
.text:0040A900                 jmp     ds:__imp_fclose
.text:0040A900 fclose          endp
.text:0040A900
.text:0040A900 ; ---------------------------------------------------------------------------
.text:0040A906                 align 10h
.text:0040A910
.text:0040A910 ; =============== S U B R O U T I N E =======================================
.text:0040A910
.text:0040A910 ; Attributes: thunk
.text:0040A910
.text:0040A910 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040A910 iswctype        proc near               ; CODE XREF: sub_408140+78B↑p
.text:0040A910
.text:0040A910 C               = word ptr  4
.text:0040A910 Type            = word ptr  8
.text:0040A910
.text:0040A910                 jmp     ds:__imp_iswctype
.text:0040A910 iswctype        endp
.text:0040A910
.text:0040A910 ; ---------------------------------------------------------------------------
.text:0040A916                 align 10h
.text:0040A920
.text:0040A920 ; =============== S U B R O U T I N E =======================================
.text:0040A920
.text:0040A920 ; Attributes: thunk
.text:0040A920
.text:0040A920 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040A920 memcpy          proc near               ; CODE XREF: .text:00409638↑p
.text:0040A920                                         ; .text:00409681↑p
.text:0040A920
.text:0040A920 Src             = dword ptr  8
.text:0040A920 Size            = dword ptr  0Ch
.text:0040A920
.text:0040A920                 jmp     ds:__imp_memcpy
.text:0040A920 memcpy          endp
.text:0040A920
.text:0040A920 ; ---------------------------------------------------------------------------
.text:0040A926                 align 10h
.text:0040A930
.text:0040A930 ; =============== S U B R O U T I N E =======================================
.text:0040A930
.text:0040A930 ; Attributes: thunk
.text:0040A930
.text:0040A930 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040A930 memset          proc near               ; CODE XREF: .text:004095B6↑p
.text:0040A930
.text:0040A930 Val             = dword ptr  8
.text:0040A930 Size            = dword ptr  0Ch
.text:0040A930
.text:0040A930                 jmp     ds:__imp_memset
.text:0040A930 memset          endp
.text:0040A930
.text:0040A930 ; ---------------------------------------------------------------------------
.text:0040A936                 align 10h
.text:0040A940
.text:0040A940 ; =============== S U B R O U T I N E =======================================
.text:0040A940
.text:0040A940 ; Attributes: thunk
.text:0040A940
.text:0040A940 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040A940 calloc          proc near               ; CODE XREF: .text:004095F3↑p
.text:0040A940
.text:0040A940 Count           = dword ptr  4
.text:0040A940 Size            = dword ptr  8
.text:0040A940
.text:0040A940                 jmp     ds:__imp_calloc
.text:0040A940 calloc          endp
.text:0040A940
.text:0040A940 ; ---------------------------------------------------------------------------
.text:0040A946                 align 10h
.text:0040A950
.text:0040A950 ; =============== S U B R O U T I N E =======================================
.text:0040A950
.text:0040A950 ; Attributes: thunk
.text:0040A950
.text:0040A950 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040A950 realloc         proc near               ; CODE XREF: .text:004094F0↑p
.text:0040A950                                         ; sub_409520+16↑p ...
.text:0040A950
.text:0040A950 Block           = dword ptr  4
.text:0040A950 Size            = dword ptr  8
.text:0040A950
.text:0040A950                 jmp     ds:__imp_realloc
.text:0040A950 realloc         endp
.text:0040A950
.text:0040A950 ; ---------------------------------------------------------------------------
.text:0040A956                 align 10h
.text:0040A960
.text:0040A960 ; =============== S U B R O U T I N E =======================================
.text:0040A960
.text:0040A960 ; Attributes: thunk
.text:0040A960
.text:0040A960 ; void *__cdecl malloc(size_t Size)
.text:0040A960 malloc          proc near               ; CODE XREF: sub_409450+24↑p
.text:0040A960                                         ; sub_409490+E↑p ...
.text:0040A960
.text:0040A960 Size            = dword ptr  4
.text:0040A960
.text:0040A960                 jmp     ds:__imp_malloc
.text:0040A960 malloc          endp
.text:0040A960
.text:0040A960 ; ---------------------------------------------------------------------------
.text:0040A966                 align 10h
.text:0040A970
.text:0040A970 ; =============== S U B R O U T I N E =======================================
.text:0040A970
.text:0040A970 ; Attributes: thunk
.text:0040A970
.text:0040A970 ; int __cdecl fflush(FILE *Stream)
.text:0040A970 fflush          proc near               ; CODE XREF: sub_409770+19↑p
.text:0040A970                                         ; sub_409770+81↑p ...
.text:0040A970
.text:0040A970 Stream          = dword ptr  4
.text:0040A970
.text:0040A970                 jmp     ds:__imp_fflush
.text:0040A970 fflush          endp
.text:0040A970
.text:0040A970 ; ---------------------------------------------------------------------------
.text:0040A976                 align 10h
.text:0040A980
.text:0040A980 ; =============== S U B R O U T I N E =======================================
.text:0040A980
.text:0040A980 ; Attributes: thunk
.text:0040A980
.text:0040A980 ; char *__cdecl strerror(int ErrorMessage)
.text:0040A980 strerror        proc near               ; CODE XREF: sub_409770+A5↑p
.text:0040A980                                         ; sub_409874+10F↑p
.text:0040A980
.text:0040A980 ErrorMessage    = dword ptr  4
.text:0040A980
.text:0040A980                 jmp     ds:__imp_strerror
.text:0040A980 strerror        endp
.text:0040A980
.text:0040A980 ; ---------------------------------------------------------------------------
.text:0040A986                 align 10h
.text:0040A990
.text:0040A990 ; =============== S U B R O U T I N E =======================================
.text:0040A990
.text:0040A990 ; Attributes: thunk
.text:0040A990
.text:0040A990 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040A990 _filelengthi64  proc near               ; CODE XREF: sub_409D10+113↑p
.text:0040A990
.text:0040A990 FileHandle      = dword ptr  4
.text:0040A990
.text:0040A990                 jmp     ds:__imp__filelengthi64
.text:0040A990 _filelengthi64  endp
.text:0040A990
.text:0040A990 ; ---------------------------------------------------------------------------
.text:0040A996                 align 10h
.text:0040A9A0
.text:0040A9A0 ; =============== S U B R O U T I N E =======================================
.text:0040A9A0
.text:0040A9A0 ; Attributes: thunk
.text:0040A9A0
.text:0040A9A0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040A9A0 _get_osfhandle  proc near               ; CODE XREF: sub_409D10+12↑p
.text:0040A9A0
.text:0040A9A0 FileHandle      = dword ptr  4
.text:0040A9A0
.text:0040A9A0                 jmp     ds:__imp__get_osfhandle
.text:0040A9A0 _get_osfhandle  endp
.text:0040A9A0
.text:0040A9A0 ; ---------------------------------------------------------------------------
.text:0040A9A6                 align 10h
.text:0040A9B0
.text:0040A9B0 ; =============== S U B R O U T I N E =======================================
.text:0040A9B0
.text:0040A9B0 ; Attributes: thunk
.text:0040A9B0
.text:0040A9B0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0040A9B0 _lseeki64       proc near               ; CODE XREF: sub_409D10+36↑p
.text:0040A9B0
.text:0040A9B0 FileHandle      = dword ptr  4
.text:0040A9B0 Offset          = qword ptr  8
.text:0040A9B0 Origin          = dword ptr  10h
.text:0040A9B0
.text:0040A9B0                 jmp     ds:__imp__lseeki64
.text:0040A9B0 _lseeki64       endp
.text:0040A9B0
.text:0040A9B0 ; ---------------------------------------------------------------------------
.text:0040A9B6                 align 10h
.text:0040A9C0
.text:0040A9C0 ; =============== S U B R O U T I N E =======================================
.text:0040A9C0
.text:0040A9C0 ; Attributes: thunk
.text:0040A9C0
.text:0040A9C0 ; int __cdecl vsprintf(char *const Buffer, const char *const Format, va_list ArgList)
.text:0040A9C0 vsprintf        proc near               ; CODE XREF: sub_40A330+5B↑p
.text:0040A9C0
.text:0040A9C0 Buffer          = dword ptr  4
.text:0040A9C0 Format          = dword ptr  8
.text:0040A9C0 ArgList         = dword ptr  0Ch
.text:0040A9C0
.text:0040A9C0                 jmp     ds:__imp_vsprintf
.text:0040A9C0 vsprintf        endp
.text:0040A9C0
.text:0040A9C0 ; ---------------------------------------------------------------------------
.text:0040A9C6                 align 10h
.text:0040A9D0
.text:0040A9D0 ; =============== S U B R O U T I N E =======================================
.text:0040A9D0
.text:0040A9D0 ; Attributes: thunk
.text:0040A9D0
.text:0040A9D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040A9D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040A9D0
.text:0040A9D0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040A9D0
.text:0040A9D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040A9D0 SetUnhandledExceptionFilter endp
.text:0040A9D0
.text:0040A9D0 ; ---------------------------------------------------------------------------
.text:0040A9D6                 align 10h
.text:0040A9E0
.text:0040A9E0 ; =============== S U B R O U T I N E =======================================
.text:0040A9E0
.text:0040A9E0 ; Attributes: noreturn thunk
.text:0040A9E0
.text:0040A9E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040A9E0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040A9E0
.text:0040A9E0 uExitCode       = dword ptr  4
.text:0040A9E0
.text:0040A9E0                 jmp     ds:__imp_ExitProcess
.text:0040A9E0 ExitProcess     endp
.text:0040A9E0
.text:0040A9E0 ; ---------------------------------------------------------------------------
.text:0040A9E6                 align 10h
.text:0040A9F0
.text:0040A9F0 ; =============== S U B R O U T I N E =======================================
.text:0040A9F0
.text:0040A9F0 ; Attributes: thunk
.text:0040A9F0
.text:0040A9F0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040A9F0 UnlockFile      proc near               ; CODE XREF: sub_409D10+B4↑p
.text:0040A9F0
.text:0040A9F0 hFile           = dword ptr  4
.text:0040A9F0 dwFileOffsetLow = dword ptr  8
.text:0040A9F0 dwFileOffsetHigh= dword ptr  0Ch
.text:0040A9F0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040A9F0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040A9F0
.text:0040A9F0                 jmp     ds:__imp_UnlockFile
.text:0040A9F0 UnlockFile      endp
.text:0040A9F0
.text:0040A9F0 ; ---------------------------------------------------------------------------
.text:0040A9F6                 align 10h
.text:0040AA00
.text:0040AA00 ; =============== S U B R O U T I N E =======================================
.text:0040AA00
.text:0040AA00 ; Attributes: thunk
.text:0040AA00
.text:0040AA00 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:0040AA00 LockFile        proc near               ; CODE XREF: sub_409D10+F7↑p
.text:0040AA00
.text:0040AA00 hFile           = dword ptr  4
.text:0040AA00 dwFileOffsetLow = dword ptr  8
.text:0040AA00 dwFileOffsetHigh= dword ptr  0Ch
.text:0040AA00 nNumberOfBytesToLockLow= dword ptr  10h
.text:0040AA00 nNumberOfBytesToLockHigh= dword ptr  14h
.text:0040AA00
.text:0040AA00                 jmp     ds:__imp_LockFile
.text:0040AA00 LockFile        endp
.text:0040AA00
.text:0040AA00 ; ---------------------------------------------------------------------------
.text:0040AA06                 align 10h
.text:0040AA10
.text:0040AA10 ; =============== S U B R O U T I N E =======================================
.text:0040AA10
.text:0040AA10 ; Attributes: thunk
.text:0040AA10
.text:0040AA10 ; DWORD __stdcall GetLastError()
.text:0040AA10 GetLastError    proc near               ; CODE XREF: sub_40A300+3↑p
.text:0040AA10                 jmp     ds:__imp_GetLastError
.text:0040AA10 GetLastError    endp
.text:0040AA10
.text:0040AA10 ; ---------------------------------------------------------------------------
.text:0040AA16                 align 10h
.text:0040AA20 dword_40AA20    dd 0FFFFFFFFh           ; DATA XREF: .text:0040A639↑r
.text:0040AA20                                         ; .text:loc_40A660↑r ...
.text:0040AA24 dword_40AA24    dd 0                    ; DATA XREF: .text:loc_40A66C↑r
.text:0040AA24                                         ; sub_40A690:loc_40A6DD↑r
.text:0040AA28                 dd 0FFFFFFFFh
.text:0040AA2C dword_40AA2C    dd 75h dup(0)           ; DATA XREF: .data:off_40B8A4↓o
.text:0040AC00                 dd 100h dup(?)
.text:0040AC00 _text           ends
.text:0040AC00
.data:0040B000 ; Section 2. (virtual address 0000B000)
.data:0040B000 ; Virtual size                  : 000008C0 (   2240.)
.data:0040B000 ; Section size in file          : 00000A00 (   2560.)
.data:0040B000 ; Offset to raw data for section: 0000A000
.data:0040B000 ; Flags C0000040: Data Readable Writable
.data:0040B000 ; Alignment     : default
.data:0040B000 ; ===========================================================================
.data:0040B000
.data:0040B000 ; Segment type: Pure data
.data:0040B000 ; Segment permissions: Read/Write
.data:0040B000 _data           segment para public 'DATA' use32
.data:0040B000                 assume cs:_data
.data:0040B000                 ;org 40B000h
.data:0040B000 dword_40B000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040B000                                         ; sub_401080+CC↑r
.data:0040B004 dword_40B004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040B004                                         ; sub_401080+D4↑r
.data:0040B008                 align 10h
.data:0040B010 off_40B010      dd offset aParenb       ; DATA XREF: sub_403B10:loc_403E75↑r
.data:0040B010                                         ; sub_403B10+371↑o ...
.data:0040B010                                         ; "parenb"
.data:0040B014 dword_40B014    dd 0                    ; DATA XREF: sub_404DF0+204↑r
.data:0040B014                                         ; sub_404DF0:loc_405034↑r ...
.data:0040B018 byte_40B018     db 4                    ; DATA XREF: sub_404DF0:loc_404F80↑r
.data:0040B018                                         ; sub_404DF0+280↑r ...
.data:0040B019                 align 4
.data:0040B01C dword_40B01C    dd 1000h                ; DATA XREF: sub_404DF0+270↑r
.data:0040B01C                                         ; sub_404DF0:loc_4050C3↑r ...
.data:0040B020 dword_40B020    dd 0                    ; DATA XREF: sub_404DF0+266↑r
.data:0040B020                                         ; sub_404DF0+58B↑r ...
.data:0040B024                 dd offset aParodd       ; "parodd"
.data:0040B028                 db    0
.data:0040B029                 db    0
.data:0040B02A                 db    0
.data:0040B02B                 db    0
.data:0040B02C                 db    4
.data:0040B02D                 db    0
.data:0040B02E                 db    0
.data:0040B02F                 db    0
.data:0040B030                 db    0
.data:0040B031                 db  20h
.data:0040B032                 db    0
.data:0040B033                 db    0
.data:0040B034                 db    0
.data:0040B035                 db    0
.data:0040B036                 db    0
.data:0040B037                 db    0
.data:0040B038                 db  8Eh ; Ž
.data:0040B039                 db  12h
.data:0040B03A                 db  40h ; @
.data:0040B03B                 db    0
.data:0040B03C                 db    0
.data:0040B03D                 db    0
.data:0040B03E                 db    0
.data:0040B03F                 db    0
.data:0040B040                 db    0
.data:0040B041                 db    0
.data:0040B042                 db    0
.data:0040B043                 db    0
.data:0040B044                 db    0
.data:0040B045                 db    0
.data:0040B046                 db    0
.data:0040B047                 db    0
.data:0040B048                 db    0
.data:0040B049                 db    3
.data:0040B04A                 db    0
.data:0040B04B                 db    0
.data:0040B04C                 db  92h ; ’
.data:0040B04D                 db  12h
.data:0040B04E                 db  40h ; @
.data:0040B04F                 db    0
.data:0040B050                 db    0
.data:0040B051                 db    0
.data:0040B052                 db    0
.data:0040B053                 db    0
.data:0040B054                 db    0
.data:0040B055                 db    0
.data:0040B056                 db    0
.data:0040B057                 db    0
.data:0040B058                 db    0
.data:0040B059                 db    1
.data:0040B05A                 db    0
.data:0040B05B                 db    0
.data:0040B05C                 db    0
.data:0040B05D                 db    3
.data:0040B05E                 db    0
.data:0040B05F                 db    0
.data:0040B060                 db  96h ; –
.data:0040B061                 db  12h
.data:0040B062                 db  40h ; @
.data:0040B063                 db    0
.data:0040B064                 db    0
.data:0040B065                 db    0
.data:0040B066                 db    0
.data:0040B067                 db    0
.data:0040B068                 db    0
.data:0040B069                 db    0
.data:0040B06A                 db    0
.data:0040B06B                 db    0
.data:0040B06C                 db    0
.data:0040B06D                 db    2
.data:0040B06E                 db    0
.data:0040B06F                 db    0
.data:0040B070                 db    0
.data:0040B071                 db    3
.data:0040B072                 db    0
.data:0040B073                 db    0
.data:0040B074                 db  9Ah ; š
.data:0040B075                 db  12h
.data:0040B076                 db  40h ; @
.data:0040B077                 db    0
.data:0040B078                 db    0
.data:0040B079                 db    0
.data:0040B07A                 db    0
.data:0040B07B                 db    0
.data:0040B07C                 db    0
.data:0040B07D                 db    0
.data:0040B07E                 db    0
.data:0040B07F                 db    0
.data:0040B080                 db    0
.data:0040B081                 db    3
.data:0040B082                 db    0
.data:0040B083                 db    0
.data:0040B084                 db    0
.data:0040B085                 db    3
.data:0040B086                 db    0
.data:0040B087                 db    0
.data:0040B088                 db  9Eh ; ž
.data:0040B089                 db  12h
.data:0040B08A                 db  40h ; @
.data:0040B08B                 db    0
.data:0040B08C                 db    0
.data:0040B08D                 db    0
.data:0040B08E                 db    0
.data:0040B08F                 db    0
.data:0040B090                 db    4
.data:0040B091                 db    0
.data:0040B092                 db    0
.data:0040B093                 db    0
.data:0040B094                 db    0
.data:0040B095                 db  40h ; @
.data:0040B096                 db    0
.data:0040B097                 db    0
.data:0040B098                 db    0
.data:0040B099                 db    0
.data:0040B09A                 db    0
.data:0040B09B                 db    0
.data:0040B09C                 db 0A4h ; ¤
.data:0040B09D                 db  12h
.data:0040B09E                 db  40h ; @
.data:0040B09F                 db    0
.data:0040B0A0                 db    0
.data:0040B0A1                 db    0
.data:0040B0A2                 db    0
.data:0040B0A3                 db    0
.data:0040B0A4                 db  0Ch
.data:0040B0A5                 db    0
.data:0040B0A6                 db    0
.data:0040B0A7                 db    0
.data:0040B0A8                 db    0
.data:0040B0A9                 db  40h ; @
.data:0040B0AA                 db    0
.data:0040B0AB                 db    0
.data:0040B0AC                 db    0
.data:0040B0AD                 db    0
.data:0040B0AE                 db    0
.data:0040B0AF                 db    0
.data:0040B0B0                 db 0A8h ; ¨
.data:0040B0B1                 db  12h
.data:0040B0B2                 db  40h ; @
.data:0040B0B3                 db    0
.data:0040B0B4                 db    0
.data:0040B0B5                 db    0
.data:0040B0B6                 db    0
.data:0040B0B7                 db    0
.data:0040B0B8                 db    4
.data:0040B0B9                 db    0
.data:0040B0BA                 db    0
.data:0040B0BB                 db    0
.data:0040B0BC                 db    0
.data:0040B0BD                 db    4
.data:0040B0BE                 db    0
.data:0040B0BF                 db    0
.data:0040B0C0                 db    0
.data:0040B0C1                 db    0
.data:0040B0C2                 db    0
.data:0040B0C3                 db    0
.data:0040B0C4                 db 0AFh ; ¯
.data:0040B0C5                 db  12h
.data:0040B0C6                 db  40h ; @
.data:0040B0C7                 db    0
.data:0040B0C8                 db    0
.data:0040B0C9                 db    0
.data:0040B0CA                 db    0
.data:0040B0CB                 db    0
.data:0040B0CC                 db    5
.data:0040B0CD                 db    0
.data:0040B0CE                 db    0
.data:0040B0CF                 db    0
.data:0040B0D0                 db    0
.data:0040B0D1                 db    8
.data:0040B0D2                 db    0
.data:0040B0D3                 db    0
.data:0040B0D4                 db    0
.data:0040B0D5                 db    0
.data:0040B0D6                 db    0
.data:0040B0D7                 db    0
.data:0040B0D8                 db 0B5h ; µ
.data:0040B0D9                 db  12h
.data:0040B0DA                 db  40h ; @
.data:0040B0DB                 db    0
.data:0040B0DC                 db    0
.data:0040B0DD                 db    0
.data:0040B0DE                 db    0
.data:0040B0DF                 db    0
.data:0040B0E0                 db    4
.data:0040B0E1                 db    0
.data:0040B0E2                 db    0
.data:0040B0E3                 db    0
.data:0040B0E4                 db    0
.data:0040B0E5                 db  80h ; €
.data:0040B0E6                 db    0
.data:0040B0E7                 db    0
.data:0040B0E8                 db    0
.data:0040B0E9                 db    0
.data:0040B0EA                 db    0
.data:0040B0EB                 db    0
.data:0040B0EC                 db 0BCh ; ¼
.data:0040B0ED                 db  12h
.data:0040B0EE                 db  40h ; @
.data:0040B0EF                 db    0
.data:0040B0F0                 db    0
.data:0040B0F1                 db    0
.data:0040B0F2                 db    0
.data:0040B0F3                 db    0
.data:0040B0F4                 db    4
.data:0040B0F5                 db    0
.data:0040B0F6                 db    0
.data:0040B0F7                 db    0
.data:0040B0F8                 db    0
.data:0040B0F9                 db    0
.data:0040B0FA                 db    3
.data:0040B0FB                 db    0
.data:0040B0FC                 db    0
.data:0040B0FD                 db    0
.data:0040B0FE                 db    0
.data:0040B0FF                 db    0
.data:0040B100                 db 0C4h ; Ä
.data:0040B101                 db  12h
.data:0040B102                 db  40h ; @
.data:0040B103                 db    0
.data:0040B104                 db    1
.data:0040B105                 db    0
.data:0040B106                 db    0
.data:0040B107                 db    0
.data:0040B108                 db    6
.data:0040B109                 db    0
.data:0040B10A                 db    0
.data:0040B10B                 db    0
.data:0040B10C                 db    1
.data:0040B10D                 db    0
.data:0040B10E                 db    0
.data:0040B10F                 db    0
.data:0040B110                 db    0
.data:0040B111                 db    0
.data:0040B112                 db    0
.data:0040B113                 db    0
.data:0040B114                 db 0CBh ; Ë
.data:0040B115                 db  12h
.data:0040B116                 db  40h ; @
.data:0040B117                 db    0
.data:0040B118                 db    1
.data:0040B119                 db    0
.data:0040B11A                 db    0
.data:0040B11B                 db    0
.data:0040B11C                 db    5
.data:0040B11D                 db    0
.data:0040B11E                 db    0
.data:0040B11F                 db    0
.data:0040B120                 db    2
.data:0040B121                 db    0
.data:0040B122                 db    0
.data:0040B123                 db    0
.data:0040B124                 db    0
.data:0040B125                 db    0
.data:0040B126                 db    0
.data:0040B127                 db    0
.data:0040B128                 db 0D2h ; Ò
.data:0040B129                 db  12h
.data:0040B12A                 db  40h ; @
.data:0040B12B                 db    0
.data:0040B12C                 db    1
.data:0040B12D                 db    0
.data:0040B12E                 db    0
.data:0040B12F                 db    0
.data:0040B130                 db    4
.data:0040B131                 db    0
.data:0040B132                 db    0
.data:0040B133                 db    0
.data:0040B134                 db    4
.data:0040B135                 db    0
.data:0040B136                 db    0
.data:0040B137                 db    0
.data:0040B138                 db    0
.data:0040B139                 db    0
.data:0040B13A                 db    0
.data:0040B13B                 db    0
.data:0040B13C                 db 0D9h ; Ù
.data:0040B13D                 db  12h
.data:0040B13E                 db  40h ; @
.data:0040B13F                 db    0
.data:0040B140                 db    1
.data:0040B141                 db    0
.data:0040B142                 db    0
.data:0040B143                 db    0
.data:0040B144                 db    4
.data:0040B145                 db    0
.data:0040B146                 db    0
.data:0040B147                 db    0
.data:0040B148                 db    8
.data:0040B149                 db    0
.data:0040B14A                 db    0
.data:0040B14B                 db    0
.data:0040B14C                 db    0
.data:0040B14D                 db    0
.data:0040B14E                 db    0
.data:0040B14F                 db    0
.data:0040B150                 db 0E0h ; à
.data:0040B151                 db  12h
.data:0040B152                 db  40h ; @
.data:0040B153                 db    0
.data:0040B154                 db    1
.data:0040B155                 db    0
.data:0040B156                 db    0
.data:0040B157                 db    0
.data:0040B158                 db    4
.data:0040B159                 db    0
.data:0040B15A                 db    0
.data:0040B15B                 db    0
.data:0040B15C                 db  10h
.data:0040B15D                 db    0
.data:0040B15E                 db    0
.data:0040B15F                 db    0
.data:0040B160                 db    0
.data:0040B161                 db    0
.data:0040B162                 db    0
.data:0040B163                 db    0
.data:0040B164                 db 0E6h ; æ
.data:0040B165                 db  12h
.data:0040B166                 db  40h ; @
.data:0040B167                 db    0
.data:0040B168                 db    1
.data:0040B169                 db    0
.data:0040B16A                 db    0
.data:0040B16B                 db    0
.data:0040B16C                 db    4
.data:0040B16D                 db    0
.data:0040B16E                 db    0
.data:0040B16F                 db    0
.data:0040B170                 db  20h
.data:0040B171                 db    0
.data:0040B172                 db    0
.data:0040B173                 db    0
.data:0040B174                 db    0
.data:0040B175                 db    0
.data:0040B176                 db    0
.data:0040B177                 db    0
.data:0040B178                 db 0EDh ; í
.data:0040B179                 db  12h
.data:0040B17A                 db  40h ; @
.data:0040B17B                 db    0
.data:0040B17C                 db    1
.data:0040B17D                 db    0
.data:0040B17E                 db    0
.data:0040B17F                 db    0
.data:0040B180                 db    6
.data:0040B181                 db    0
.data:0040B182                 db    0
.data:0040B183                 db    0
.data:0040B184                 db  40h ; @
.data:0040B185                 db    0
.data:0040B186                 db    0
.data:0040B187                 db    0
.data:0040B188                 db    0
.data:0040B189                 db    0
.data:0040B18A                 db    0
.data:0040B18B                 db    0
.data:0040B18C                 db 0F3h ; ó
.data:0040B18D                 db  12h
.data:0040B18E                 db  40h ; @
.data:0040B18F                 db    0
.data:0040B190                 db    1
.data:0040B191                 db    0
.data:0040B192                 db    0
.data:0040B193                 db    0
.data:0040B194                 db    6
.data:0040B195                 db    0
.data:0040B196                 db    0
.data:0040B197                 db    0
.data:0040B198                 db  80h ; €
.data:0040B199                 db    0
.data:0040B19A                 db    0
.data:0040B19B                 db    0
.data:0040B19C                 db    0
.data:0040B19D                 db    0
.data:0040B19E                 db    0
.data:0040B19F                 db    0
.data:0040B1A0                 db 0F9h ; ù
.data:0040B1A1                 db  12h
.data:0040B1A2                 db  40h ; @
.data:0040B1A3                 db    0
.data:0040B1A4                 db    1
.data:0040B1A5                 db    0
.data:0040B1A6                 db    0
.data:0040B1A7                 db    0
.data:0040B1A8                 db    5
.data:0040B1A9                 db    0
.data:0040B1AA                 db    0
.data:0040B1AB                 db    0
.data:0040B1AC                 db    0
.data:0040B1AD                 db    1
.data:0040B1AE                 db    0
.data:0040B1AF                 db    0
.data:0040B1B0                 db    0
.data:0040B1B1                 db    0
.data:0040B1B2                 db    0
.data:0040B1B3                 db    0
.data:0040B1B4                 db 0FFh ; ÿ
.data:0040B1B5                 db  12h
.data:0040B1B6                 db  40h ; @
.data:0040B1B7                 db    0
.data:0040B1B8                 db    1
.data:0040B1B9                 db    0
.data:0040B1BA                 db    0
.data:0040B1BB                 db    0
.data:0040B1BC                 db    4
.data:0040B1BD                 db    0
.data:0040B1BE                 db    0
.data:0040B1BF                 db    0
.data:0040B1C0                 db    0
.data:0040B1C1                 db    2
.data:0040B1C2                 db    0
.data:0040B1C3                 db    0
.data:0040B1C4                 db    0
.data:0040B1C5                 db    0
.data:0040B1C6                 db    0
.data:0040B1C7                 db    0
.data:0040B1C8                 db    4
.data:0040B1C9                 db  13h
.data:0040B1CA                 db  40h ; @
.data:0040B1CB                 db    0
.data:0040B1CC                 db    1
.data:0040B1CD                 db    0
.data:0040B1CE                 db    0
.data:0040B1CF                 db    0
.data:0040B1D0                 db    6
.data:0040B1D1                 db    0
.data:0040B1D2                 db    0
.data:0040B1D3                 db    0
.data:0040B1D4                 db    0
.data:0040B1D5                 db    4
.data:0040B1D6                 db    0
.data:0040B1D7                 db    0
.data:0040B1D8                 db    0
.data:0040B1D9                 db    0
.data:0040B1DA                 db    0
.data:0040B1DB                 db    0
.data:0040B1DC                 db  0Ah
.data:0040B1DD                 db  13h
.data:0040B1DE                 db  40h ; @
.data:0040B1DF                 db    0
.data:0040B1E0                 db    1
.data:0040B1E1                 db    0
.data:0040B1E2                 db    0
.data:0040B1E3                 db    0
.data:0040B1E4                 db  0Ch
.data:0040B1E5                 db    0
.data:0040B1E6                 db    0
.data:0040B1E7                 db    0
.data:0040B1E8                 db    0
.data:0040B1E9                 db    4
.data:0040B1EA                 db    0
.data:0040B1EB                 db    0
.data:0040B1EC                 db    0
.data:0040B1ED                 db    0
.data:0040B1EE                 db    0
.data:0040B1EF                 db    0
.data:0040B1F0                 db  11h
.data:0040B1F1                 db  13h
.data:0040B1F2                 db  40h ; @
.data:0040B1F3                 db    0
.data:0040B1F4                 db    1
.data:0040B1F5                 db    0
.data:0040B1F6                 db    0
.data:0040B1F7                 db    0
.data:0040B1F8                 db    6
.data:0040B1F9                 db    0
.data:0040B1FA                 db    0
.data:0040B1FB                 db    0
.data:0040B1FC                 db    0
.data:0040B1FD                 db  40h ; @
.data:0040B1FE                 db    0
.data:0040B1FF                 db    0
.data:0040B200                 db    0
.data:0040B201                 db    0
.data:0040B202                 db    0
.data:0040B203                 db    0
.data:0040B204                 db  17h
.data:0040B205                 db  13h
.data:0040B206                 db  40h ; @
.data:0040B207                 db    0
.data:0040B208                 db    1
.data:0040B209                 db    0
.data:0040B20A                 db    0
.data:0040B20B                 db    0
.data:0040B20C                 db    6
.data:0040B20D                 db    0
.data:0040B20E                 db    0
.data:0040B20F                 db    0
.data:0040B210                 db    0
.data:0040B211                 db    8
.data:0040B212                 db    0
.data:0040B213                 db    0
.data:0040B214                 db    0
.data:0040B215                 db    0
.data:0040B216                 db    0
.data:0040B217                 db    0
.data:0040B218                 db  1Dh
.data:0040B219                 db  13h
.data:0040B21A                 db  40h ; @
.data:0040B21B                 db    0
.data:0040B21C                 db    1
.data:0040B21D                 db    0
.data:0040B21E                 db    0
.data:0040B21F                 db    0
.data:0040B220                 db    5
.data:0040B221                 db    0
.data:0040B222                 db    0
.data:0040B223                 db    0
.data:0040B224                 db    0
.data:0040B225                 db  20h
.data:0040B226                 db    0
.data:0040B227                 db    0
.data:0040B228                 db    0
.data:0040B229                 db    0
.data:0040B22A                 db    0
.data:0040B22B                 db    0
.data:0040B22C                 db  25h ; %
.data:0040B22D                 db  13h
.data:0040B22E                 db  40h ; @
.data:0040B22F                 db    0
.data:0040B230                 db    2
.data:0040B231                 db    0
.data:0040B232                 db    0
.data:0040B233                 db    0
.data:0040B234                 db    5
.data:0040B235                 db    0
.data:0040B236                 db    0
.data:0040B237                 db    0
.data:0040B238                 db    1
.data:0040B239                 db    0
.data:0040B23A                 db    0
.data:0040B23B                 db    0
.data:0040B23C                 db    0
.data:0040B23D                 db    0
.data:0040B23E                 db    0
.data:0040B23F                 db    0
.data:0040B240                 db  2Bh ; +
.data:0040B241                 db  13h
.data:0040B242                 db  40h ; @
.data:0040B243                 db    0
.data:0040B244                 db    2
.data:0040B245                 db    0
.data:0040B246                 db    0
.data:0040B247                 db    0
.data:0040B248                 db    6
.data:0040B249                 db    0
.data:0040B24A                 db    0
.data:0040B24B                 db    0
.data:0040B24C                 db    0
.data:0040B24D                 db    2
.data:0040B24E                 db    0
.data:0040B24F                 db    0
.data:0040B250                 db    0
.data:0040B251                 db    0
.data:0040B252                 db    0
.data:0040B253                 db    0
.data:0040B254                 db  31h ; 1
.data:0040B255                 db  13h
.data:0040B256                 db  40h ; @
.data:0040B257                 db    0
.data:0040B258                 db    2
.data:0040B259                 db    0
.data:0040B25A                 db    0
.data:0040B25B                 db    0
.data:0040B25C                 db    5
.data:0040B25D                 db    0
.data:0040B25E                 db    0
.data:0040B25F                 db    0
.data:0040B260                 db    2
.data:0040B261                 db    0
.data:0040B262                 db    0
.data:0040B263                 db    0
.data:0040B264                 db    0
.data:0040B265                 db    0
.data:0040B266                 db    0
.data:0040B267                 db    0
.data:0040B268                 db  37h ; 7
.data:0040B269                 db  13h
.data:0040B26A                 db  40h ; @
.data:0040B26B                 db    0
.data:0040B26C                 db    2
.data:0040B26D                 db    0
.data:0040B26E                 db    0
.data:0040B26F                 db    0
.data:0040B270                 db    2
.data:0040B271                 db    0
.data:0040B272                 db    0
.data:0040B273                 db    0
.data:0040B274                 db    4
.data:0040B275                 db    0
.data:0040B276                 db    0
.data:0040B277                 db    0
.data:0040B278                 db    0
.data:0040B279                 db    0
.data:0040B27A                 db    0
.data:0040B27B                 db    0
.data:0040B27C                 db  3Ch ; <
.data:0040B27D                 db  13h
.data:0040B27E                 db  40h ; @
.data:0040B27F                 db    0
.data:0040B280                 db    3
.data:0040B281                 db    0
.data:0040B282                 db    0
.data:0040B283                 db    0
.data:0040B284                 db    5
.data:0040B285                 db    0
.data:0040B286                 db    0
.data:0040B287                 db    0
.data:0040B288                 db  80h ; €
.data:0040B289                 db    0
.data:0040B28A                 db    0
.data:0040B28B                 db    0
.data:0040B28C                 db    0
.data:0040B28D                 db    0
.data:0040B28E                 db    0
.data:0040B28F                 db    0
.data:0040B290                 db  41h ; A
.data:0040B291                 db  13h
.data:0040B292                 db  40h ; @
.data:0040B293                 db    0
.data:0040B294                 db    3
.data:0040B295                 db    0
.data:0040B296                 db    0
.data:0040B297                 db    0
.data:0040B298                 db    5
.data:0040B299                 db    0
.data:0040B29A                 db    0
.data:0040B29B                 db    0
.data:0040B29C                 db    0
.data:0040B29D                 db    1
.data:0040B29E                 db    0
.data:0040B29F                 db    0
.data:0040B2A0                 db    0
.data:0040B2A1                 db    0
.data:0040B2A2                 db    0
.data:0040B2A3                 db    0
.data:0040B2A4                 db  48h ; H
.data:0040B2A5                 db  13h
.data:0040B2A6                 db  40h ; @
.data:0040B2A7                 db    0
.data:0040B2A8                 db    3
.data:0040B2A9                 db    0
.data:0040B2AA                 db    0
.data:0040B2AB                 db    0
.data:0040B2AC                 db    5
.data:0040B2AD                 db    0
.data:0040B2AE                 db    0
.data:0040B2AF                 db    0
.data:0040B2B0                 db    0
.data:0040B2B1                 db    4
.data:0040B2B2                 db    0
.data:0040B2B3                 db    0
.data:0040B2B4                 db    0
.data:0040B2B5                 db    0
.data:0040B2B6                 db    0
.data:0040B2B7                 db    0
.data:0040B2B8                 db  4Fh ; O
.data:0040B2B9                 db  13h
.data:0040B2BA                 db  40h ; @
.data:0040B2BB                 db    0
.data:0040B2BC                 db    3
.data:0040B2BD                 db    0
.data:0040B2BE                 db    0
.data:0040B2BF                 db    0
.data:0040B2C0                 db    5
.data:0040B2C1                 db    0
.data:0040B2C2                 db    0
.data:0040B2C3                 db    0
.data:0040B2C4                 db    8
.data:0040B2C5                 db    0
.data:0040B2C6                 db    0
.data:0040B2C7                 db    0
.data:0040B2C8                 db    0
.data:0040B2C9                 db    0
.data:0040B2CA                 db    0
.data:0040B2CB                 db    0
.data:0040B2CC                 db  54h ; T
.data:0040B2CD                 db  13h
.data:0040B2CE                 db  40h ; @
.data:0040B2CF                 db    0
.data:0040B2D0                 db    3
.data:0040B2D1                 db    0
.data:0040B2D2                 db    0
.data:0040B2D3                 db    0
.data:0040B2D4                 db    5
.data:0040B2D5                 db    0
.data:0040B2D6                 db    0
.data:0040B2D7                 db    0
.data:0040B2D8                 db    2
.data:0040B2D9                 db    0
.data:0040B2DA                 db    0
.data:0040B2DB                 db    0
.data:0040B2DC                 db    0
.data:0040B2DD                 db    0
.data:0040B2DE                 db    0
.data:0040B2DF                 db    0
.data:0040B2E0                 db  5Ah ; Z
.data:0040B2E1                 db  13h
.data:0040B2E2                 db  40h ; @
.data:0040B2E3                 db    0
.data:0040B2E4                 db    3
.data:0040B2E5                 db    0
.data:0040B2E6                 db    0
.data:0040B2E7                 db    0
.data:0040B2E8                 db  0Ch
.data:0040B2E9                 db    0
.data:0040B2EA                 db    0
.data:0040B2EB                 db    0
.data:0040B2EC                 db    2
.data:0040B2ED                 db    0
.data:0040B2EE                 db    0
.data:0040B2EF                 db    0
.data:0040B2F0                 db    0
.data:0040B2F1                 db    0
.data:0040B2F2                 db    0
.data:0040B2F3                 db    0
.data:0040B2F4                 db  63h ; c
.data:0040B2F5                 db  13h
.data:0040B2F6                 db  40h ; @
.data:0040B2F7                 db    0
.data:0040B2F8                 db    3
.data:0040B2F9                 db    0
.data:0040B2FA                 db    0
.data:0040B2FB                 db    0
.data:0040B2FC                 db    5
.data:0040B2FD                 db    0
.data:0040B2FE                 db    0
.data:0040B2FF                 db    0
.data:0040B300                 db    4
.data:0040B301                 db    0
.data:0040B302                 db    0
.data:0040B303                 db    0
.data:0040B304                 db    0
.data:0040B305                 db    0
.data:0040B306                 db    0
.data:0040B307                 db    0
.data:0040B308                 db  69h ; i
.data:0040B309                 db  13h
.data:0040B30A                 db  40h ; @
.data:0040B30B                 db    0
.data:0040B30C                 db    3
.data:0040B30D                 db    0
.data:0040B30E                 db    0
.data:0040B30F                 db    0
.data:0040B310                 db    6
.data:0040B311                 db    0
.data:0040B312                 db    0
.data:0040B313                 db    0
.data:0040B314                 db  10h
.data:0040B315                 db    0
.data:0040B316                 db    0
.data:0040B317                 db    0
.data:0040B318                 db    0
.data:0040B319                 db    0
.data:0040B31A                 db    0
.data:0040B31B                 db    0
.data:0040B31C                 db  70h ; p
.data:0040B31D                 db  13h
.data:0040B31E                 db  40h ; @
.data:0040B31F                 db    0
.data:0040B320                 db    3
.data:0040B321                 db    0
.data:0040B322                 db    0
.data:0040B323                 db    0
.data:0040B324                 db    6
.data:0040B325                 db    0
.data:0040B326                 db    0
.data:0040B327                 db    0
.data:0040B328                 db    0
.data:0040B329                 db    0
.data:0040B32A                 db    0
.data:0040B32B                 db  80h ; €
.data:0040B32C                 db    0
.data:0040B32D                 db    0
.data:0040B32E                 db    0
.data:0040B32F                 db    0
.data:0040B330                 db  77h ; w
.data:0040B331                 db  13h
.data:0040B332                 db  40h ; @
.data:0040B333                 db    0
.data:0040B334                 db    3
.data:0040B335                 db    0
.data:0040B336                 db    0
.data:0040B337                 db    0
.data:0040B338                 db    6
.data:0040B339                 db    0
.data:0040B33A                 db    0
.data:0040B33B                 db    0
.data:0040B33C                 db    0
.data:0040B33D                 db    0
.data:0040B33E                 db  40h ; @
.data:0040B33F                 db    0
.data:0040B340                 db    0
.data:0040B341                 db    0
.data:0040B342                 db    0
.data:0040B343                 db    0
.data:0040B344                 db  7Eh ; ~
.data:0040B345                 db  13h
.data:0040B346                 db  40h ; @
.data:0040B347                 db    0
.data:0040B348                 db    3
.data:0040B349                 db    0
.data:0040B34A                 db    0
.data:0040B34B                 db    0
.data:0040B34C                 db    6
.data:0040B34D                 db    0
.data:0040B34E                 db    0
.data:0040B34F                 db    0
.data:0040B350                 db  20h
.data:0040B351                 db    0
.data:0040B352                 db    0
.data:0040B353                 db    0
.data:0040B354                 db    0
.data:0040B355                 db    0
.data:0040B356                 db    0
.data:0040B357                 db    0
.data:0040B358                 db  86h ; †
.data:0040B359                 db  13h
.data:0040B35A                 db  40h ; @
.data:0040B35B                 db    0
.data:0040B35C                 db    3
.data:0040B35D                 db    0
.data:0040B35E                 db    0
.data:0040B35F                 db    0
.data:0040B360                 db  0Ch
.data:0040B361                 db    0
.data:0040B362                 db    0
.data:0040B363                 db    0
.data:0040B364                 db  20h
.data:0040B365                 db    0
.data:0040B366                 db    0
.data:0040B367                 db    0
.data:0040B368                 db    0
.data:0040B369                 db    0
.data:0040B36A                 db    0
.data:0040B36B                 db    0
.data:0040B36C                 db  8Fh
.data:0040B36D                 db  13h
.data:0040B36E                 db  40h ; @
.data:0040B36F                 db    0
.data:0040B370                 db    3
.data:0040B371                 db    0
.data:0040B372                 db    0
.data:0040B373                 db    0
.data:0040B374                 db    5
.data:0040B375                 db    0
.data:0040B376                 db    0
.data:0040B377                 db    0
.data:0040B378                 db  40h ; @
.data:0040B379                 db    0
.data:0040B37A                 db    0
.data:0040B37B                 db    0
.data:0040B37C                 db    0
.data:0040B37D                 db    0
.data:0040B37E                 db    0
.data:0040B37F                 db    0
.data:0040B380                 db  97h ; —
.data:0040B381                 db  13h
.data:0040B382                 db  40h ; @
.data:0040B383                 db    0
.data:0040B384                 db    3
.data:0040B385                 db    0
.data:0040B386                 db    0
.data:0040B387                 db    0
.data:0040B388                 db  0Ch
.data:0040B389                 db    0
.data:0040B38A                 db    0
.data:0040B38B                 db    0
.data:0040B38C                 db  40h ; @
.data:0040B38D                 db    0
.data:0040B38E                 db    0
.data:0040B38F                 db    0
.data:0040B390                 db    0
.data:0040B391                 db    0
.data:0040B392                 db    0
.data:0040B393                 db    0
.data:0040B394                 db  9Fh ; Ÿ
.data:0040B395                 db  13h
.data:0040B396                 db  40h ; @
.data:0040B397                 db    0
.data:0040B398                 db    3
.data:0040B399                 db    0
.data:0040B39A                 db    0
.data:0040B39B                 db    0
.data:0040B39C                 db    5
.data:0040B39D                 db    0
.data:0040B39E                 db    0
.data:0040B39F                 db    0
.data:0040B3A0                 db    1
.data:0040B3A1                 db    0
.data:0040B3A2                 db    0
.data:0040B3A3                 db    0
.data:0040B3A4                 db    0
.data:0040B3A5                 db    0
.data:0040B3A6                 db    0
.data:0040B3A7                 db    0
.data:0040B3A8                 db 0A6h ; ¦
.data:0040B3A9                 db  13h
.data:0040B3AA                 db  40h ; @
.data:0040B3AB                 db    0
.data:0040B3AC                 db    3
.data:0040B3AD                 db    0
.data:0040B3AE                 db    0
.data:0040B3AF                 db    0
.data:0040B3B0                 db  0Ch
.data:0040B3B1                 db    0
.data:0040B3B2                 db    0
.data:0040B3B3                 db    0
.data:0040B3B4                 db    1
.data:0040B3B5                 db    0
.data:0040B3B6                 db    0
.data:0040B3B7                 db    0
.data:0040B3B8                 db    0
.data:0040B3B9                 db    0
.data:0040B3BA                 db    0
.data:0040B3BB                 db    0
.data:0040B3BC                 db 0AEh ; ®
.data:0040B3BD                 db  13h
.data:0040B3BE                 db  40h ; @
.data:0040B3BF                 db    0
.data:0040B3C0                 db    4
.data:0040B3C1                 db    0
.data:0040B3C2                 db    0
.data:0040B3C3                 db    0
.data:0040B3C4                 db  0Ch
.data:0040B3C5                 db    0
.data:0040B3C6                 db    0
.data:0040B3C7                 db    0
.data:0040B3C8                 db    0
.data:0040B3C9                 db    0
.data:0040B3CA                 db    0
.data:0040B3CB                 db    0
.data:0040B3CC                 db    0
.data:0040B3CD                 db    0
.data:0040B3CE                 db    0
.data:0040B3CF                 db    0
.data:0040B3D0                 db 0B4h ; ´
.data:0040B3D1                 db  13h
.data:0040B3D2                 db  40h ; @
.data:0040B3D3                 db    0
.data:0040B3D4                 db    4
.data:0040B3D5                 db    0
.data:0040B3D6                 db    0
.data:0040B3D7                 db    0
.data:0040B3D8                 db  0Ch
.data:0040B3D9                 db    0
.data:0040B3DA                 db    0
.data:0040B3DB                 db    0
.data:0040B3DC                 db    0
.data:0040B3DD                 db    0
.data:0040B3DE                 db    0
.data:0040B3DF                 db    0
.data:0040B3E0                 db    0
.data:0040B3E1                 db    0
.data:0040B3E2                 db    0
.data:0040B3E3                 db    0
.data:0040B3E4                 db 0BBh ; »
.data:0040B3E5                 db  13h
.data:0040B3E6                 db  40h ; @
.data:0040B3E7                 db    0
.data:0040B3E8                 db    4
.data:0040B3E9                 db    0
.data:0040B3EA                 db    0
.data:0040B3EB                 db    0
.data:0040B3EC                 db  0Ch
.data:0040B3ED                 db    0
.data:0040B3EE                 db    0
.data:0040B3EF                 db    0
.data:0040B3F0                 db    0
.data:0040B3F1                 db    0
.data:0040B3F2                 db    0
.data:0040B3F3                 db    0
.data:0040B3F4                 db    0
.data:0040B3F5                 db    0
.data:0040B3F6                 db    0
.data:0040B3F7                 db    0
.data:0040B3F8                 db 0C0h ; À
.data:0040B3F9                 db  13h
.data:0040B3FA                 db  40h ; @
.data:0040B3FB                 db    0
.data:0040B3FC                 db    4
.data:0040B3FD                 db    0
.data:0040B3FE                 db    0
.data:0040B3FF                 db    0
.data:0040B400                 db  0Ch
.data:0040B401                 db    0
.data:0040B402                 db    0
.data:0040B403                 db    0
.data:0040B404                 db    0
.data:0040B405                 db    0
.data:0040B406                 db    0
.data:0040B407                 db    0
.data:0040B408                 db    0
.data:0040B409                 db    0
.data:0040B40A                 db    0
.data:0040B40B                 db    0
.data:0040B40C                 db 0C3h ; Ã
.data:0040B40D                 db  13h
.data:0040B40E                 db  40h ; @
.data:0040B40F                 db    0
.data:0040B410                 db    4
.data:0040B411                 db    0
.data:0040B412                 db    0
.data:0040B413                 db    0
.data:0040B414                 db    8
.data:0040B415                 db    0
.data:0040B416                 db    0
.data:0040B417                 db    0
.data:0040B418                 db    0
.data:0040B419                 db    0
.data:0040B41A                 db    0
.data:0040B41B                 db    0
.data:0040B41C                 db    0
.data:0040B41D                 db    0
.data:0040B41E                 db    0
.data:0040B41F                 db    0
.data:0040B420                 db 0C6h ; Æ
.data:0040B421                 db  13h
.data:0040B422                 db  40h ; @
.data:0040B423                 db    0
.data:0040B424                 db    4
.data:0040B425                 db    0
.data:0040B426                 db    0
.data:0040B427                 db    0
.data:0040B428                 db    8
.data:0040B429                 db    0
.data:0040B42A                 db    0
.data:0040B42B                 db    0
.data:0040B42C                 db    0
.data:0040B42D                 db    0
.data:0040B42E                 db    0
.data:0040B42F                 db    0
.data:0040B430                 db    0
.data:0040B431                 db    0
.data:0040B432                 db    0
.data:0040B433                 db    0
.data:0040B434                 db 0CBh ; Ë
.data:0040B435                 db  13h
.data:0040B436                 db  40h ; @
.data:0040B437                 db    0
.data:0040B438                 db    4
.data:0040B439                 db    0
.data:0040B43A                 db    0
.data:0040B43B                 db    0
.data:0040B43C                 db  0Ch
.data:0040B43D                 db    0
.data:0040B43E                 db    0
.data:0040B43F                 db    0
.data:0040B440                 db    0
.data:0040B441                 db    0
.data:0040B442                 db    0
.data:0040B443                 db    0
.data:0040B444                 db    0
.data:0040B445                 db    0
.data:0040B446                 db    0
.data:0040B447                 db    0
.data:0040B448                 db 0D2h ; Ò
.data:0040B449                 db  13h
.data:0040B44A                 db  40h ; @
.data:0040B44B                 db    0
.data:0040B44C                 db    4
.data:0040B44D                 db    0
.data:0040B44E                 db    0
.data:0040B44F                 db    0
.data:0040B450                 db  0Ch
.data:0040B451                 db    0
.data:0040B452                 db    0
.data:0040B453                 db    0
.data:0040B454                 db    0
.data:0040B455                 db    0
.data:0040B456                 db    0
.data:0040B457                 db    0
.data:0040B458                 db    0
.data:0040B459                 db    0
.data:0040B45A                 db    0
.data:0040B45B                 db    0
.data:0040B45C                 db 0D6h ; Ö
.data:0040B45D                 db  13h
.data:0040B45E                 db  40h ; @
.data:0040B45F                 db    0
.data:0040B460                 db    4
.data:0040B461                 db    0
.data:0040B462                 db    0
.data:0040B463                 db    0
.data:0040B464                 db  0Ch
.data:0040B465                 db    0
.data:0040B466                 db    0
.data:0040B467                 db    0
.data:0040B468                 db    0
.data:0040B469                 db    0
.data:0040B46A                 db    0
.data:0040B46B                 db    0
.data:0040B46C                 db    0
.data:0040B46D                 db    0
.data:0040B46E                 db    0
.data:0040B46F                 db    0
.data:0040B470                 db 0DCh ; Ü
.data:0040B471                 db  13h
.data:0040B472                 db  40h ; @
.data:0040B473                 db    0
.data:0040B474                 db    4
.data:0040B475                 db    0
.data:0040B476                 db    0
.data:0040B477                 db    0
.data:0040B478                 db  0Ch
.data:0040B479                 db    0
.data:0040B47A                 db    0
.data:0040B47B                 db    0
.data:0040B47C                 db    0
.data:0040B47D                 db    0
.data:0040B47E                 db    0
.data:0040B47F                 db    0
.data:0040B480                 db    0
.data:0040B481                 db    0
.data:0040B482                 db    0
.data:0040B483                 db    0
.data:0040B484                 db 0E3h ; ã
.data:0040B485                 db  13h
.data:0040B486                 db  40h ; @
.data:0040B487                 db    0
.data:0040B488                 db    4
.data:0040B489                 db    0
.data:0040B48A                 db    0
.data:0040B48B                 db    0
.data:0040B48C                 db  0Ch
.data:0040B48D                 db    0
.data:0040B48E                 db    0
.data:0040B48F                 db    0
.data:0040B490                 db    0
.data:0040B491                 db    0
.data:0040B492                 db    0
.data:0040B493                 db    0
.data:0040B494                 db    0
.data:0040B495                 db    0
.data:0040B496                 db    0
.data:0040B497                 db    0
.data:0040B498                 db 0EAh ; ê
.data:0040B499                 db  13h
.data:0040B49A                 db  40h ; @
.data:0040B49B                 db    0
.data:0040B49C                 db    4
.data:0040B49D                 db    0
.data:0040B49E                 db    0
.data:0040B49F                 db    0
.data:0040B4A0                 db  0Ch
.data:0040B4A1                 db    0
.data:0040B4A2                 db    0
.data:0040B4A3                 db    0
.data:0040B4A4                 db    0
.data:0040B4A5                 db    0
.data:0040B4A6                 db    0
.data:0040B4A7                 db    0
.data:0040B4A8                 db    0
.data:0040B4A9                 db    0
.data:0040B4AA                 db    0
.data:0040B4AB                 db    0
.data:0040B4AC                 db 0F2h ; ò
.data:0040B4AD                 db  13h
.data:0040B4AE                 db  40h ; @
.data:0040B4AF                 db    0
.data:0040B4B0                 db    4
.data:0040B4B1                 db    0
.data:0040B4B2                 db    0
.data:0040B4B3                 db    0
.data:0040B4B4                 db  0Ch
.data:0040B4B5                 db    0
.data:0040B4B6                 db    0
.data:0040B4B7                 db    0
.data:0040B4B8                 db    0
.data:0040B4B9                 db    0
.data:0040B4BA                 db    0
.data:0040B4BB                 db    0
.data:0040B4BC                 db    0
.data:0040B4BD                 db    0
.data:0040B4BE                 db    0
.data:0040B4BF                 db    0
.data:0040B4C0                 db 0F7h ; ÷
.data:0040B4C1                 db  13h
.data:0040B4C2                 db  40h ; @
.data:0040B4C3                 db    0
.data:0040B4C4                 db    4
.data:0040B4C5                 db    0
.data:0040B4C6                 db    0
.data:0040B4C7                 db    0
.data:0040B4C8                 db    8
.data:0040B4C9                 db    0
.data:0040B4CA                 db    0
.data:0040B4CB                 db    0
.data:0040B4CC                 db    0
.data:0040B4CD                 db    0
.data:0040B4CE                 db    0
.data:0040B4CF                 db    0
.data:0040B4D0                 db    0
.data:0040B4D1                 db    0
.data:0040B4D2                 db    0
.data:0040B4D3                 db    0
.data:0040B4D4                 db 0FBh ; û
.data:0040B4D5                 db  13h
.data:0040B4D6                 db  40h ; @
.data:0040B4D7                 db    0
.data:0040B4D8                 db    4
.data:0040B4D9                 db    0
.data:0040B4DA                 db    0
.data:0040B4DB                 db    0
.data:0040B4DC                 db    8
.data:0040B4DD                 db    0
.data:0040B4DE                 db    0
.data:0040B4DF                 db    0
.data:0040B4E0                 db    0
.data:0040B4E1                 db    0
.data:0040B4E2                 db    0
.data:0040B4E3                 db    0
.data:0040B4E4                 db    0
.data:0040B4E5                 db    0
.data:0040B4E6                 db    0
.data:0040B4E7                 db    0
.data:0040B4E8                 db    0
.data:0040B4E9                 db    0
.data:0040B4EA                 db    0
.data:0040B4EB                 db    0
.data:0040B4EC                 db    0
.data:0040B4ED                 db    0
.data:0040B4EE                 db    0
.data:0040B4EF                 db    0
.data:0040B4F0                 db    0
.data:0040B4F1                 db    0
.data:0040B4F2                 db    0
.data:0040B4F3                 db    0
.data:0040B4F4                 db    0
.data:0040B4F5                 db    0
.data:0040B4F6                 db    0
.data:0040B4F7                 db    0
.data:0040B4F8                 db    0
.data:0040B4F9                 db    0
.data:0040B4FA                 db    0
.data:0040B4FB                 db    0
.data:0040B4FC                 db    0
.data:0040B4FD                 db    0
.data:0040B4FE                 db    0
.data:0040B4FF                 db    0
.data:0040B500                 db    0
.data:0040B501                 db    0
.data:0040B502                 db    0
.data:0040B503                 db    0
.data:0040B504                 db    0
.data:0040B505                 db    0
.data:0040B506                 db    0
.data:0040B507                 db    0
.data:0040B508                 db    0
.data:0040B509                 db    0
.data:0040B50A                 db    0
.data:0040B50B                 db    0
.data:0040B50C                 db    0
.data:0040B50D                 db    0
.data:0040B50E                 db    0
.data:0040B50F                 db    0
.data:0040B510 off_40B510      dd offset aIntr         ; DATA XREF: sub_403B10+3C4↑r
.data:0040B510                                         ; sub_403B10+3D2↑r ...
.data:0040B510                                         ; "intr"
.data:0040B514 byte_40B514     db 3                    ; DATA XREF: sub_404DF0+EF↑r
.data:0040B514                                         ; sub_4058A0:loc_4058C0↑r
.data:0040B515                 align 4
.data:0040B518 dword_40B518    dd 8                    ; DATA XREF: sub_404DF0:loc_404ED0↑r
.data:0040B518                                         ; sub_404DF0:loc_405414↑r ...
.data:0040B51C                 dd offset aQuit         ; "quit"
.data:0040B520                 db  1Ch
.data:0040B521                 db    0
.data:0040B522                 db    0
.data:0040B523                 db    0
.data:0040B524                 db    9
.data:0040B525                 db    0
.data:0040B526                 db    0
.data:0040B527                 db    0
.data:0040B528                 db    9
.data:0040B529                 db  14h
.data:0040B52A                 db  40h ; @
.data:0040B52B                 db    0
.data:0040B52C                 db  7Fh ; 
.data:0040B52D                 db    0
.data:0040B52E                 db    0
.data:0040B52F                 db    0
.data:0040B530                 db    3
.data:0040B531                 db    0
.data:0040B532                 db    0
.data:0040B533                 db    0
.data:0040B534                 db  0Fh
.data:0040B535                 db  14h
.data:0040B536                 db  40h ; @
.data:0040B537                 db    0
.data:0040B538                 db  15h
.data:0040B539                 db    0
.data:0040B53A                 db    0
.data:0040B53B                 db    0
.data:0040B53C                 db    5
.data:0040B53D                 db    0
.data:0040B53E                 db    0
.data:0040B53F                 db    0
.data:0040B540                 db  14h
.data:0040B541                 db  14h
.data:0040B542                 db  40h ; @
.data:0040B543                 db    0
.data:0040B544                 db    4
.data:0040B545                 db    0
.data:0040B546                 db    0
.data:0040B547                 db    0
.data:0040B548                 db    0
.data:0040B549                 db    0
.data:0040B54A                 db    0
.data:0040B54B                 db    0
.data:0040B54C                 db  18h
.data:0040B54D                 db  14h
.data:0040B54E                 db  40h ; @
.data:0040B54F                 db    0
.data:0040B550                 db 0FFh ; ÿ
.data:0040B551                 db    0
.data:0040B552                 db    0
.data:0040B553                 db    0
.data:0040B554                 db    1
.data:0040B555                 db    0
.data:0040B556                 db    0
.data:0040B557                 db    0
.data:0040B558                 db  1Ch
.data:0040B559                 db  14h
.data:0040B55A                 db  40h ; @
.data:0040B55B                 db    0
.data:0040B55C                 db    0
.data:0040B55D                 db    0
.data:0040B55E                 db    0
.data:0040B55F                 db    0
.data:0040B560                 db    2
.data:0040B561                 db    0
.data:0040B562                 db    0
.data:0040B563                 db    0
.data:0040B564                 db  21h ; !
.data:0040B565                 db  14h
.data:0040B566                 db  40h ; @
.data:0040B567                 db    0
.data:0040B568                 db  1Ah
.data:0040B569                 db    0
.data:0040B56A                 db    0
.data:0040B56B                 db    0
.data:0040B56C                 db  0Ah
.data:0040B56D                 db    0
.data:0040B56E                 db    0
.data:0040B56F                 db    0
.data:0040B570                 db  27h ; '
.data:0040B571                 db  14h
.data:0040B572                 db  40h ; @
.data:0040B573                 db    0
.data:0040B574                 db  11h
.data:0040B575                 db    0
.data:0040B576                 db    0
.data:0040B577                 db    0
.data:0040B578                 db  0Ch
.data:0040B579                 db    0
.data:0040B57A                 db    0
.data:0040B57B                 db    0
.data:0040B57C                 db  2Dh ; -
.data:0040B57D                 db  14h
.data:0040B57E                 db  40h ; @
.data:0040B57F                 db    0
.data:0040B580                 db  13h
.data:0040B581                 db    0
.data:0040B582                 db    0
.data:0040B583                 db    0
.data:0040B584                 db  0Dh
.data:0040B585                 db    0
.data:0040B586                 db    0
.data:0040B587                 db    0
.data:0040B588                 db  32h ; 2
.data:0040B589                 db  14h
.data:0040B58A                 db  40h ; @
.data:0040B58B                 db    0
.data:0040B58C                 db  1Ah
.data:0040B58D                 db    0
.data:0040B58E                 db    0
.data:0040B58F                 db    0
.data:0040B590                 db  0Ah
.data:0040B591                 db    0
.data:0040B592                 db    0
.data:0040B593                 db    0
.data:0040B594                 db  37h ; 7
.data:0040B595                 db  14h
.data:0040B596                 db  40h ; @
.data:0040B597                 db    0
.data:0040B598                 db  19h
.data:0040B599                 db    0
.data:0040B59A                 db    0
.data:0040B59B                 db    0
.data:0040B59C                 db  0Bh
.data:0040B59D                 db    0
.data:0040B59E                 db    0
.data:0040B59F                 db    0
.data:0040B5A0                 db  3Dh ; =
.data:0040B5A1                 db  14h
.data:0040B5A2                 db  40h ; @
.data:0040B5A3                 db    0
.data:0040B5A4                 db  12h
.data:0040B5A5                 db    0
.data:0040B5A6                 db    0
.data:0040B5A7                 db    0
.data:0040B5A8                 db    6
.data:0040B5A9                 db    0
.data:0040B5AA                 db    0
.data:0040B5AB                 db    0
.data:0040B5AC                 db  43h ; C
.data:0040B5AD                 db  14h
.data:0040B5AE                 db  40h ; @
.data:0040B5AF                 db    0
.data:0040B5B0                 db  17h
.data:0040B5B1                 db    0
.data:0040B5B2                 db    0
.data:0040B5B3                 db    0
.data:0040B5B4                 db    4
.data:0040B5B5                 db    0
.data:0040B5B6                 db    0
.data:0040B5B7                 db    0
.data:0040B5B8                 db  4Ah ; J
.data:0040B5B9                 db  14h
.data:0040B5BA                 db  40h ; @
.data:0040B5BB                 db    0
.data:0040B5BC                 db  16h
.data:0040B5BD                 db    0
.data:0040B5BE                 db    0
.data:0040B5BF                 db    0
.data:0040B5C0                 db  0Eh
.data:0040B5C1                 db    0
.data:0040B5C2                 db    0
.data:0040B5C3                 db    0
.data:0040B5C4                 db  50h ; P
.data:0040B5C5                 db  14h
.data:0040B5C6                 db  40h ; @
.data:0040B5C7                 db    0
.data:0040B5C8                 db  0Fh
.data:0040B5C9                 db    0
.data:0040B5CA                 db    0
.data:0040B5CB                 db    0
.data:0040B5CC                 db  0Fh
.data:0040B5CD                 db    0
.data:0040B5CE                 db    0
.data:0040B5CF                 db    0
.data:0040B5D0                 db  56h ; V
.data:0040B5D1                 db  14h
.data:0040B5D2                 db  40h ; @
.data:0040B5D3                 db    0
.data:0040B5D4                 db 0FFh ; ÿ
.data:0040B5D5                 db    0
.data:0040B5D6                 db    0
.data:0040B5D7                 db    0
.data:0040B5D8                 db  12h
.data:0040B5D9                 db    0
.data:0040B5DA                 db    0
.data:0040B5DB                 db    0
.data:0040B5DC                 db  5Dh ; ]
.data:0040B5DD                 db  14h
.data:0040B5DE                 db  40h ; @
.data:0040B5DF                 db    0
.data:0040B5E0                 db    1
.data:0040B5E1                 db    0
.data:0040B5E2                 db    0
.data:0040B5E3                 db    0
.data:0040B5E4                 db  10h
.data:0040B5E5                 db    0
.data:0040B5E6                 db    0
.data:0040B5E7                 db    0
.data:0040B5E8                 db  61h ; a
.data:0040B5E9                 db  14h
.data:0040B5EA                 db  40h ; @
.data:0040B5EB                 db    0
.data:0040B5EC                 db    0
.data:0040B5ED                 db    0
.data:0040B5EE                 db    0
.data:0040B5EF                 db    0
.data:0040B5F0                 db  11h
.data:0040B5F1                 db    0
.data:0040B5F2                 db    0
.data:0040B5F3                 db    0
.data:0040B5F4                 db    0
.data:0040B5F5                 db    0
.data:0040B5F6                 db    0
.data:0040B5F7                 db    0
.data:0040B5F8                 db    0
.data:0040B5F9                 db    0
.data:0040B5FA                 db    0
.data:0040B5FB                 db    0
.data:0040B5FC                 db    0
.data:0040B5FD                 db    0
.data:0040B5FE                 db    0
.data:0040B5FF                 db    0
.data:0040B600                 db    0
.data:0040B601                 db    0
.data:0040B602                 db    0
.data:0040B603                 db    0
.data:0040B604                 db    0
.data:0040B605                 db    0
.data:0040B606                 db    0
.data:0040B607                 db    0
.data:0040B608                 db    0
.data:0040B609                 db    0
.data:0040B60A                 db    0
.data:0040B60B                 db    0
.data:0040B60C                 db    0
.data:0040B60D                 db    0
.data:0040B60E                 db    0
.data:0040B60F                 db    0
.data:0040B610 off_40B610      dd offset aAll          ; DATA XREF: sub_403B10+9E↑o
.data:0040B610                                         ; "all"
.data:0040B614                 db    0
.data:0040B615                 db    0
.data:0040B616                 db    0
.data:0040B617                 db    0
.data:0040B618                 db    0
.data:0040B619                 db    0
.data:0040B61A                 db    0
.data:0040B61B                 db    0
.data:0040B61C                 db  61h ; a
.data:0040B61D                 db    0
.data:0040B61E                 db    0
.data:0040B61F                 db    0
.data:0040B620                 db  6Ah ; j
.data:0040B621                 db  14h
.data:0040B622                 db  40h ; @
.data:0040B623                 db    0
.data:0040B624                 db    0
.data:0040B625                 db    0
.data:0040B626                 db    0
.data:0040B627                 db    0
.data:0040B628                 db    0
.data:0040B629                 db    0
.data:0040B62A                 db    0
.data:0040B62B                 db    0
.data:0040B62C                 db  67h ; g
.data:0040B62D                 db    0
.data:0040B62E                 db    0
.data:0040B62F                 db    0
.data:0040B630                 db  6Fh ; o
.data:0040B631                 db  14h
.data:0040B632                 db  40h ; @
.data:0040B633                 db    0
.data:0040B634                 db    1
.data:0040B635                 db    0
.data:0040B636                 db    0
.data:0040B637                 db    0
.data:0040B638                 db    0
.data:0040B639                 db    0
.data:0040B63A                 db    0
.data:0040B63B                 db    0
.data:0040B63C                 db  46h ; F
.data:0040B63D                 db    0
.data:0040B63E                 db    0
.data:0040B63F                 db    0
.data:0040B640                 db  74h ; t
.data:0040B641                 db  14h
.data:0040B642                 db  40h ; @
.data:0040B643                 db    0
.data:0040B644                 db    0
.data:0040B645                 db    0
.data:0040B646                 db    0
.data:0040B647                 db    0
.data:0040B648                 db    0
.data:0040B649                 db    0
.data:0040B64A                 db    0
.data:0040B64B                 db    0
.data:0040B64C                 db  7Eh ; ~
.data:0040B64D                 db 0FFh ; ÿ
.data:0040B64E                 db 0FFh ; ÿ
.data:0040B64F                 db 0FFh ; ÿ
.data:0040B650                 db  79h ; y
.data:0040B651                 db  14h
.data:0040B652                 db  40h ; @
.data:0040B653                 db    0
.data:0040B654                 db    0
.data:0040B655                 db    0
.data:0040B656                 db    0
.data:0040B657                 db    0
.data:0040B658                 db    0
.data:0040B659                 db    0
.data:0040B65A                 db    0
.data:0040B65B                 db    0
.data:0040B65C                 db  7Dh ; }
.data:0040B65D                 db 0FFh ; ÿ
.data:0040B65E                 db 0FFh ; ÿ
.data:0040B65F                 db 0FFh ; ÿ
.data:0040B660                 db    0
.data:0040B661                 db    0
.data:0040B662                 db    0
.data:0040B663                 db    0
.data:0040B664                 db    0
.data:0040B665                 db    0
.data:0040B666                 db    0
.data:0040B667                 db    0
.data:0040B668                 db    0
.data:0040B669                 db    0
.data:0040B66A                 db    0
.data:0040B66B                 db    0
.data:0040B66C                 db    0
.data:0040B66D                 db    0
.data:0040B66E                 db    0
.data:0040B66F                 db    0
.data:0040B670 off_40B670      dd offset word_405742   ; DATA XREF: sub_405810+5↑r
.data:0040B670                                         ; sub_405810+23↑r ...
.data:0040B674 dword_40B674    dd 0                    ; DATA XREF: sub_405810:loc_40585E↑r
.data:0040B674                                         ; sub_405870:loc_405880↑r
.data:0040B678 dword_40B678    dd 0                    ; DATA XREF: sub_405870:loc_405898↑r
.data:0040B67C                 dd offset dword_405744
.data:0040B680                 db  32h ; 2
.data:0040B681                 db    0
.data:0040B682                 db    0
.data:0040B683                 db    0
.data:0040B684                 db  32h ; 2
.data:0040B685                 db    0
.data:0040B686                 db    0
.data:0040B687                 db    0
.data:0040B688                 db  47h ; G
.data:0040B689                 db  57h ; W
.data:0040B68A                 db  40h ; @
.data:0040B68B                 db    0
.data:0040B68C                 db  4Bh ; K
.data:0040B68D                 db    0
.data:0040B68E                 db    0
.data:0040B68F                 db    0
.data:0040B690                 db  4Bh ; K
.data:0040B691                 db    0
.data:0040B692                 db    0
.data:0040B693                 db    0
.data:0040B694                 db  4Ah ; J
.data:0040B695                 db  57h ; W
.data:0040B696                 db  40h ; @
.data:0040B697                 db    0
.data:0040B698                 db  6Eh ; n
.data:0040B699                 db    0
.data:0040B69A                 db    0
.data:0040B69B                 db    0
.data:0040B69C                 db  6Eh ; n
.data:0040B69D                 db    0
.data:0040B69E                 db    0
.data:0040B69F                 db    0
.data:0040B6A0                 db  4Eh ; N
.data:0040B6A1                 db  57h ; W
.data:0040B6A2                 db  40h ; @
.data:0040B6A3                 db    0
.data:0040B6A4                 db  86h ; †
.data:0040B6A5                 db    0
.data:0040B6A6                 db    0
.data:0040B6A7                 db    0
.data:0040B6A8                 db  86h ; †
.data:0040B6A9                 db    0
.data:0040B6AA                 db    0
.data:0040B6AB                 db    0
.data:0040B6AC                 db  52h ; R
.data:0040B6AD                 db  57h ; W
.data:0040B6AE                 db  40h ; @
.data:0040B6AF                 db    0
.data:0040B6B0                 db  86h ; †
.data:0040B6B1                 db    0
.data:0040B6B2                 db    0
.data:0040B6B3                 db    0
.data:0040B6B4                 db  86h ; †
.data:0040B6B5                 db    0
.data:0040B6B6                 db    0
.data:0040B6B7                 db    0
.data:0040B6B8                 db  58h ; X
.data:0040B6B9                 db  57h ; W
.data:0040B6BA                 db  40h ; @
.data:0040B6BB                 db    0
.data:0040B6BC                 db  96h ; –
.data:0040B6BD                 db    0
.data:0040B6BE                 db    0
.data:0040B6BF                 db    0
.data:0040B6C0                 db  96h ; –
.data:0040B6C1                 db    0
.data:0040B6C2                 db    0
.data:0040B6C3                 db    0
.data:0040B6C4                 db  5Ch ; \
.data:0040B6C5                 db  57h ; W
.data:0040B6C6                 db  40h ; @
.data:0040B6C7                 db    0
.data:0040B6C8                 db 0C8h ; È
.data:0040B6C9                 db    0
.data:0040B6CA                 db    0
.data:0040B6CB                 db    0
.data:0040B6CC                 db 0C8h ; È
.data:0040B6CD                 db    0
.data:0040B6CE                 db    0
.data:0040B6CF                 db    0
.data:0040B6D0                 db  60h ; `
.data:0040B6D1                 db  57h ; W
.data:0040B6D2                 db  40h ; @
.data:0040B6D3                 db    0
.data:0040B6D4                 db  2Ch ; ,
.data:0040B6D5                 db    1
.data:0040B6D6                 db    0
.data:0040B6D7                 db    0
.data:0040B6D8                 db  2Ch ; ,
.data:0040B6D9                 db    1
.data:0040B6DA                 db    0
.data:0040B6DB                 db    0
.data:0040B6DC                 db  64h ; d
.data:0040B6DD                 db  57h ; W
.data:0040B6DE                 db  40h ; @
.data:0040B6DF                 db    0
.data:0040B6E0                 db  58h ; X
.data:0040B6E1                 db    2
.data:0040B6E2                 db    0
.data:0040B6E3                 db    0
.data:0040B6E4                 db  58h ; X
.data:0040B6E5                 db    2
.data:0040B6E6                 db    0
.data:0040B6E7                 db    0
.data:0040B6E8                 db  68h ; h
.data:0040B6E9                 db  57h ; W
.data:0040B6EA                 db  40h ; @
.data:0040B6EB                 db    0
.data:0040B6EC                 db 0B0h ; °
.data:0040B6ED                 db    4
.data:0040B6EE                 db    0
.data:0040B6EF                 db    0
.data:0040B6F0                 db 0B0h ; °
.data:0040B6F1                 db    4
.data:0040B6F2                 db    0
.data:0040B6F3                 db    0
.data:0040B6F4                 db  6Dh ; m
.data:0040B6F5                 db  57h ; W
.data:0040B6F6                 db  40h ; @
.data:0040B6F7                 db    0
.data:0040B6F8                 db    8
.data:0040B6F9                 db    7
.data:0040B6FA                 db    0
.data:0040B6FB                 db    0
.data:0040B6FC                 db    8
.data:0040B6FD                 db    7
.data:0040B6FE                 db    0
.data:0040B6FF                 db    0
.data:0040B700                 db  72h ; r
.data:0040B701                 db  57h ; W
.data:0040B702                 db  40h ; @
.data:0040B703                 db    0
.data:0040B704                 db  60h ; `
.data:0040B705                 db    9
.data:0040B706                 db    0
.data:0040B707                 db    0
.data:0040B708                 db  60h ; `
.data:0040B709                 db    9
.data:0040B70A                 db    0
.data:0040B70B                 db    0
.data:0040B70C                 db  77h ; w
.data:0040B70D                 db  57h ; W
.data:0040B70E                 db  40h ; @
.data:0040B70F                 db    0
.data:0040B710                 db 0C0h ; À
.data:0040B711                 db  12h
.data:0040B712                 db    0
.data:0040B713                 db    0
.data:0040B714                 db 0C0h ; À
.data:0040B715                 db  12h
.data:0040B716                 db    0
.data:0040B717                 db    0
.data:0040B718                 db  7Ch ; |
.data:0040B719                 db  57h ; W
.data:0040B71A                 db  40h ; @
.data:0040B71B                 db    0
.data:0040B71C                 db  80h ; €
.data:0040B71D                 db  25h ; %
.data:0040B71E                 db    0
.data:0040B71F                 db    0
.data:0040B720                 db  80h ; €
.data:0040B721                 db  25h ; %
.data:0040B722                 db    0
.data:0040B723                 db    0
.data:0040B724                 db  81h
.data:0040B725                 db  57h ; W
.data:0040B726                 db  40h ; @
.data:0040B727                 db    0
.data:0040B728                 db    0
.data:0040B729                 db  4Bh ; K
.data:0040B72A                 db    0
.data:0040B72B                 db    0
.data:0040B72C                 db    0
.data:0040B72D                 db  4Bh ; K
.data:0040B72E                 db    0
.data:0040B72F                 db    0
.data:0040B730                 db  87h ; ‡
.data:0040B731                 db  57h ; W
.data:0040B732                 db  40h ; @
.data:0040B733                 db    0
.data:0040B734                 db    0
.data:0040B735                 db  96h ; –
.data:0040B736                 db    0
.data:0040B737                 db    0
.data:0040B738                 db    0
.data:0040B739                 db  96h ; –
.data:0040B73A                 db    0
.data:0040B73B                 db    0
.data:0040B73C                 db  8Dh
.data:0040B73D                 db  57h ; W
.data:0040B73E                 db  40h ; @
.data:0040B73F                 db    0
.data:0040B740                 db    0
.data:0040B741                 db  4Bh ; K
.data:0040B742                 db    0
.data:0040B743                 db    0
.data:0040B744                 db    0
.data:0040B745                 db  4Bh ; K
.data:0040B746                 db    0
.data:0040B747                 db    0
.data:0040B748                 db  92h ; ’
.data:0040B749                 db  57h ; W
.data:0040B74A                 db  40h ; @
.data:0040B74B                 db    0
.data:0040B74C                 db    0
.data:0040B74D                 db  96h ; –
.data:0040B74E                 db    0
.data:0040B74F                 db    0
.data:0040B750                 db    0
.data:0040B751                 db  96h ; –
.data:0040B752                 db    0
.data:0040B753                 db    0
.data:0040B754                 db  97h ; —
.data:0040B755                 db  57h ; W
.data:0040B756                 db  40h ; @
.data:0040B757                 db    0
.data:0040B758                 db    0
.data:0040B759                 db 0E1h ; á
.data:0040B75A                 db    0
.data:0040B75B                 db    0
.data:0040B75C                 db    0
.data:0040B75D                 db 0E1h ; á
.data:0040B75E                 db    0
.data:0040B75F                 db    0
.data:0040B760                 db  9Dh
.data:0040B761                 db  57h ; W
.data:0040B762                 db  40h ; @
.data:0040B763                 db    0
.data:0040B764                 db    0
.data:0040B765                 db 0C2h ; Â
.data:0040B766                 db    1
.data:0040B767                 db    0
.data:0040B768                 db    0
.data:0040B769                 db 0C2h ; Â
.data:0040B76A                 db    1
.data:0040B76B                 db    0
.data:0040B76C                 db 0A4h ; ¤
.data:0040B76D                 db  57h ; W
.data:0040B76E                 db  40h ; @
.data:0040B76F                 db    0
.data:0040B770                 db    0
.data:0040B771                 db  84h ; „
.data:0040B772                 db    3
.data:0040B773                 db    0
.data:0040B774                 db    0
.data:0040B775                 db  84h ; „
.data:0040B776                 db    3
.data:0040B777                 db    0
.data:0040B778                 db 0ABh ; «
.data:0040B779                 db  57h ; W
.data:0040B77A                 db  40h ; @
.data:0040B77B                 db    0
.data:0040B77C                 db    0
.data:0040B77D                 db    8
.data:0040B77E                 db    7
.data:0040B77F                 db    0
.data:0040B780                 db    0
.data:0040B781                 db    8
.data:0040B782                 db    7
.data:0040B783                 db    0
.data:0040B784                 db 0B2h ; ²
.data:0040B785                 db  57h ; W
.data:0040B786                 db  40h ; @
.data:0040B787                 db    0
.data:0040B788                 db  20h
.data:0040B789                 db 0A1h ; ¡
.data:0040B78A                 db    7
.data:0040B78B                 db    0
.data:0040B78C                 db  20h
.data:0040B78D                 db 0A1h ; ¡
.data:0040B78E                 db    7
.data:0040B78F                 db    0
.data:0040B790                 db 0B9h ; ¹
.data:0040B791                 db  57h ; W
.data:0040B792                 db  40h ; @
.data:0040B793                 db    0
.data:0040B794                 db    0
.data:0040B795                 db 0CAh ; Ê
.data:0040B796                 db    8
.data:0040B797                 db    0
.data:0040B798                 db    0
.data:0040B799                 db 0CAh ; Ê
.data:0040B79A                 db    8
.data:0040B79B                 db    0
.data:0040B79C                 db 0C0h ; À
.data:0040B79D                 db  57h ; W
.data:0040B79E                 db  40h ; @
.data:0040B79F                 db    0
.data:0040B7A0                 db    0
.data:0040B7A1                 db  10h
.data:0040B7A2                 db  0Eh
.data:0040B7A3                 db    0
.data:0040B7A4                 db    0
.data:0040B7A5                 db  10h
.data:0040B7A6                 db  0Eh
.data:0040B7A7                 db    0
.data:0040B7A8                 db 0C7h ; Ç
.data:0040B7A9                 db  57h ; W
.data:0040B7AA                 db  40h ; @
.data:0040B7AB                 db    0
.data:0040B7AC                 db  40h ; @
.data:0040B7AD                 db  42h ; B
.data:0040B7AE                 db  0Fh
.data:0040B7AF                 db    0
.data:0040B7B0                 db  40h ; @
.data:0040B7B1                 db  42h ; B
.data:0040B7B2                 db  0Fh
.data:0040B7B3                 db    0
.data:0040B7B4                 db 0CFh ; Ï
.data:0040B7B5                 db  57h ; W
.data:0040B7B6                 db  40h ; @
.data:0040B7B7                 db    0
.data:0040B7B8                 db    0
.data:0040B7B9                 db  94h ; ”
.data:0040B7BA                 db  11h
.data:0040B7BB                 db    0
.data:0040B7BC                 db    0
.data:0040B7BD                 db  94h ; ”
.data:0040B7BE                 db  11h
.data:0040B7BF                 db    0
.data:0040B7C0                 db 0D7h ; ×
.data:0040B7C1                 db  57h ; W
.data:0040B7C2                 db  40h ; @
.data:0040B7C3                 db    0
.data:0040B7C4                 db  60h ; `
.data:0040B7C5                 db 0E3h ; ã
.data:0040B7C6                 db  16h
.data:0040B7C7                 db    0
.data:0040B7C8                 db  60h ; `
.data:0040B7C9                 db 0E3h ; ã
.data:0040B7CA                 db  16h
.data:0040B7CB                 db    0
.data:0040B7CC                 db 0DFh ; ß
.data:0040B7CD                 db  57h ; W
.data:0040B7CE                 db  40h ; @
.data:0040B7CF                 db    0
.data:0040B7D0                 db  80h ; €
.data:0040B7D1                 db  84h ; „
.data:0040B7D2                 db  1Eh
.data:0040B7D3                 db    0
.data:0040B7D4                 db  80h ; €
.data:0040B7D5                 db  84h ; „
.data:0040B7D6                 db  1Eh
.data:0040B7D7                 db    0
.data:0040B7D8                 db 0E7h ; ç
.data:0040B7D9                 db  57h ; W
.data:0040B7DA                 db  40h ; @
.data:0040B7DB                 db    0
.data:0040B7DC                 db 0A0h ;  
.data:0040B7DD                 db  25h ; %
.data:0040B7DE                 db  26h ; &
.data:0040B7DF                 db    0
.data:0040B7E0                 db 0A0h ;  
.data:0040B7E1                 db  25h ; %
.data:0040B7E2                 db  26h ; &
.data:0040B7E3                 db    0
.data:0040B7E4                 db 0EFh ; ï
.data:0040B7E5                 db  57h ; W
.data:0040B7E6                 db  40h ; @
.data:0040B7E7                 db    0
.data:0040B7E8                 db 0C0h ; À
.data:0040B7E9                 db 0C6h ; Æ
.data:0040B7EA                 db  2Dh ; -
.data:0040B7EB                 db    0
.data:0040B7EC                 db 0C0h ; À
.data:0040B7ED                 db 0C6h ; Æ
.data:0040B7EE                 db  2Dh ; -
.data:0040B7EF                 db    0
.data:0040B7F0                 db 0F7h ; ÷
.data:0040B7F1                 db  57h ; W
.data:0040B7F2                 db  40h ; @
.data:0040B7F3                 db    0
.data:0040B7F4                 db 0E0h ; à
.data:0040B7F5                 db  67h ; g
.data:0040B7F6                 db  35h ; 5
.data:0040B7F7                 db    0
.data:0040B7F8                 db 0E0h ; à
.data:0040B7F9                 db  67h ; g
.data:0040B7FA                 db  35h ; 5
.data:0040B7FB                 db    0
.data:0040B7FC                 db 0FFh ; ÿ
.data:0040B7FD                 db  57h ; W
.data:0040B7FE                 db  40h ; @
.data:0040B7FF                 db    0
.data:0040B800                 db    0
.data:0040B801                 db    9
.data:0040B802                 db  3Dh ; =
.data:0040B803                 db    0
.data:0040B804                 db    0
.data:0040B805                 db    9
.data:0040B806                 db  3Dh ; =
.data:0040B807                 db    0
.data:0040B808                 db    0
.data:0040B809                 db    0
.data:0040B80A                 db    0
.data:0040B80B                 db    0
.data:0040B80C                 db    0
.data:0040B80D                 db    0
.data:0040B80E                 db    0
.data:0040B80F                 db    0
.data:0040B810                 db    0
.data:0040B811                 db    0
.data:0040B812                 db    0
.data:0040B813                 db    0
.data:0040B814                 db    0
.data:0040B815                 db    0
.data:0040B816                 db    0
.data:0040B817                 db    0
.data:0040B818                 db    0
.data:0040B819                 db    0
.data:0040B81A                 db    0
.data:0040B81B                 db    0
.data:0040B81C                 db    0
.data:0040B81D                 db    0
.data:0040B81E                 db    0
.data:0040B81F                 db    0
.data:0040B820                 db    0
.data:0040B821                 db    0
.data:0040B822                 db    0
.data:0040B823                 db    0
.data:0040B824                 db    0
.data:0040B825                 db    0
.data:0040B826                 db    0
.data:0040B827                 db    0
.data:0040B828                 db    0
.data:0040B829                 db    0
.data:0040B82A                 db    0
.data:0040B82B                 db    0
.data:0040B82C                 db    0
.data:0040B82D                 db    0
.data:0040B82E                 db    0
.data:0040B82F                 db    0
.data:0040B830 dword_40B830    dd 1                    ; DATA XREF: sub_403B10+F3↑w
.data:0040B830                                         ; sub_403B10:loc_403C0E↑r ...
.data:0040B834 dword_40B834    dd 1                    ; DATA XREF: sub_403B10+89↑w
.data:0040B834                                         ; sub_406A00+11↑r ...
.data:0040B838 dword_40B838    dd 3Fh                  ; DATA XREF: sub_406A00+7D↑w
.data:0040B838                                         ; .text:00406B0D↑w
.data:0040B83C                 align 10h
.data:0040B840 ; char *Buffer
.data:0040B840 Buffer          dd offset aCopyrightC2005
.data:0040B840                                         ; DATA XREF: sub_407BF0+DC↑r
.data:0040B840                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040B844                 align 10h
.data:0040B850 ; int Code
.data:0040B850 Code            dd 1                    ; DATA XREF: sub_407F70+6D↑r
.data:0040B850                                         ; sub_407F70+9A↑r ...
.data:0040B854                 align 10h
.data:0040B860 dword_40B860    dd 1                    ; DATA XREF: sub_409280+22↑r
.data:0040B860                                         ; sub_409280+65↑r ...
.data:0040B864 dword_40B864    dd 100h                 ; DATA XREF: sub_409280+3F↑o
.data:0040B864                                         ; sub_409280+1A2↑r ...
.data:0040B868 off_40B868      dd offset unk_40C070    ; DATA XREF: sub_409280+1AA↑r
.data:0040B86C ; void *off_40B86C
.data:0040B86C off_40B86C      dd offset dword_40B864  ; DATA XREF: sub_409280+39↑r
.data:0040B86C                                         ; sub_409280+60↑w ...
.data:0040B870 dword_40B870    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040B874                 align 10h
.data:0040B880 ; int Mode
.data:0040B880 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040B880                                         ; sub_401080+80↑r ...
.data:0040B884                 align 10h
.data:0040B890 dword_40B890    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040B890                                         ; sub_401080+BA↑r
.data:0040B894                 align 10h
.data:0040B8A0 dword_40B8A0    dd 0                    ; DATA XREF: sub_40A690+9↑r
.data:0040B8A0                                         ; sub_40A690+1D↑w
.data:0040B8A4 off_40B8A4      dd offset dword_40AA2C  ; DATA XREF: sub_40A600+6↑r
.data:0040B8A4                                         ; sub_40A600+17↑r ...
.data:0040B8A8                 align 800h
.data:0040B8A8 _data           ends
.data:0040B8A8
.bss:0040C000 ; Section 3. (virtual address 0000C000)
.bss:0040C000 ; Virtual size                  : 00000260 (    608.)
.bss:0040C000 ; Section size in file          : 00000000 (      0.)
.bss:0040C000 ; Offset to raw data for section: 00000000
.bss:0040C000 ; Flags C0000080: Bss Readable Writable
.bss:0040C000 ; Alignment     : default
.bss:0040C000 ; ===========================================================================
.bss:0040C000
.bss:0040C000 ; Segment type: Uninitialized
.bss:0040C000 ; Segment permissions: Read/Write
.bss:0040C000 _bss            segment para public 'BSS' use32
.bss:0040C000                 assume cs:_bss
.bss:0040C000                 ;org 40C000h
.bss:0040C000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040C000 byte_40C000     db ?                    ; DATA XREF: sub_405980+1D↑w
.bss:0040C000                                         ; sub_405980+33↑o ...
.bss:0040C001 byte_40C001     db ?                    ; DATA XREF: sub_405980+23↑o
.bss:0040C001                                         ; sub_405980+4F↑w ...
.bss:0040C002 byte_40C002     db ?                    ; DATA XREF: sub_405980+65↑w
.bss:0040C002                                         ; sub_405980:loc_4059ED↑w ...
.bss:0040C003 byte_40C003     db ?                    ; DATA XREF: sub_405980+60↑o
.bss:0040C003                                         ; sub_405980+74↑w ...
.bss:0040C004 unk_40C004      db    ? ;               ; DATA XREF: sub_405980:loc_4059FB↑o
.bss:0040C005                 db    ? ;
.bss:0040C006                 db    ? ;
.bss:0040C007                 db    ? ;
.bss:0040C008                 db    ? ;
.bss:0040C009                 db    ? ;
.bss:0040C00A                 db    ? ;
.bss:0040C00B                 db    ? ;
.bss:0040C00C                 db    ? ;
.bss:0040C00D                 db    ? ;
.bss:0040C00E                 db    ? ;
.bss:0040C00F                 db    ? ;
.bss:0040C010 dword_40C010    dd ?                    ; DATA XREF: sub_403B10+2DD↑w
.bss:0040C010                                         ; sub_403B10+791↑w ...
.bss:0040C014                 align 10h
.bss:0040C020 dword_40C020    dd ?                    ; DATA XREF: sub_403B10+2EA↑w
.bss:0040C020                                         ; sub_403B10+833↑w ...
.bss:0040C024                 align 10h
.bss:0040C030 dword_40C030    dd ?                    ; DATA XREF: sub_406A00+9↑o
.bss:0040C030                                         ; sub_406A00+17↑w ...
.bss:0040C034 dword_40C034    dd ?                    ; DATA XREF: sub_406A00+21↑w
.bss:0040C034                                         ; .text:00406AB9↑w
.bss:0040C038 dword_40C038    dd ?                    ; DATA XREF: sub_406A00+77↑r
.bss:0040C038                                         ; .text:00406B07↑r
.bss:0040C03C dword_40C03C    dd ?                    ; DATA XREF: sub_406A00+6B↑r
.bss:0040C03C                                         ; .text:00406AFB↑r
.bss:0040C040                 db    ? ;
.bss:0040C041                 db    ? ;
.bss:0040C042                 db    ? ;
.bss:0040C043                 db    ? ;
.bss:0040C044                 db    ? ;
.bss:0040C045                 db    ? ;
.bss:0040C046                 db    ? ;
.bss:0040C047                 db    ? ;
.bss:0040C048                 db    ? ;
.bss:0040C049                 db    ? ;
.bss:0040C04A                 db    ? ;
.bss:0040C04B                 db    ? ;
.bss:0040C04C                 db    ? ;
.bss:0040C04D                 db    ? ;
.bss:0040C04E                 db    ? ;
.bss:0040C04F                 db    ? ;
.bss:0040C050                 db    ? ;
.bss:0040C051                 db    ? ;
.bss:0040C052                 db    ? ;
.bss:0040C053                 db    ? ;
.bss:0040C054                 db    ? ;
.bss:0040C055                 db    ? ;
.bss:0040C056                 db    ? ;
.bss:0040C057                 db    ? ;
.bss:0040C058                 db    ? ;
.bss:0040C059                 db    ? ;
.bss:0040C05A                 db    ? ;
.bss:0040C05B                 db    ? ;
.bss:0040C05C                 db    ? ;
.bss:0040C05D                 db    ? ;
.bss:0040C05E                 db    ? ;
.bss:0040C05F                 db    ? ;
.bss:0040C060 ; char *dword_40C060
.bss:0040C060 dword_40C060    dd ?                    ; DATA XREF: .text:00407F44↑w
.bss:0040C060                                         ; sub_407F70+58↑r
.bss:0040C064                 align 10h
.bss:0040C070 unk_40C070      db    ? ;               ; DATA XREF: sub_409280+100↑o
.bss:0040C070                                         ; .data:off_40B868↑o
.bss:0040C071                 db    ? ;
.bss:0040C072                 db    ? ;
.bss:0040C073                 db    ? ;
.bss:0040C074                 db    ? ;
.bss:0040C075                 db    ? ;
.bss:0040C076                 db    ? ;
.bss:0040C077                 db    ? ;
.bss:0040C078                 db    ? ;
.bss:0040C079                 db    ? ;
.bss:0040C07A                 db    ? ;
.bss:0040C07B                 db    ? ;
.bss:0040C07C                 db    ? ;
.bss:0040C07D                 db    ? ;
.bss:0040C07E                 db    ? ;
.bss:0040C07F                 db    ? ;
.bss:0040C080                 db    ? ;
.bss:0040C081                 db    ? ;
.bss:0040C082                 db    ? ;
.bss:0040C083                 db    ? ;
.bss:0040C084                 db    ? ;
.bss:0040C085                 db    ? ;
.bss:0040C086                 db    ? ;
.bss:0040C087                 db    ? ;
.bss:0040C088                 db    ? ;
.bss:0040C089                 db    ? ;
.bss:0040C08A                 db    ? ;
.bss:0040C08B                 db    ? ;
.bss:0040C08C                 db    ? ;
.bss:0040C08D                 db    ? ;
.bss:0040C08E                 db    ? ;
.bss:0040C08F                 db    ? ;
.bss:0040C090                 db    ? ;
.bss:0040C091                 db    ? ;
.bss:0040C092                 db    ? ;
.bss:0040C093                 db    ? ;
.bss:0040C094                 db    ? ;
.bss:0040C095                 db    ? ;
.bss:0040C096                 db    ? ;
.bss:0040C097                 db    ? ;
.bss:0040C098                 db    ? ;
.bss:0040C099                 db    ? ;
.bss:0040C09A                 db    ? ;
.bss:0040C09B                 db    ? ;
.bss:0040C09C                 db    ? ;
.bss:0040C09D                 db    ? ;
.bss:0040C09E                 db    ? ;
.bss:0040C09F                 db    ? ;
.bss:0040C0A0                 db    ? ;
.bss:0040C0A1                 db    ? ;
.bss:0040C0A2                 db    ? ;
.bss:0040C0A3                 db    ? ;
.bss:0040C0A4                 db    ? ;
.bss:0040C0A5                 db    ? ;
.bss:0040C0A6                 db    ? ;
.bss:0040C0A7                 db    ? ;
.bss:0040C0A8                 db    ? ;
.bss:0040C0A9                 db    ? ;
.bss:0040C0AA                 db    ? ;
.bss:0040C0AB                 db    ? ;
.bss:0040C0AC                 db    ? ;
.bss:0040C0AD                 db    ? ;
.bss:0040C0AE                 db    ? ;
.bss:0040C0AF                 db    ? ;
.bss:0040C0B0                 db    ? ;
.bss:0040C0B1                 db    ? ;
.bss:0040C0B2                 db    ? ;
.bss:0040C0B3                 db    ? ;
.bss:0040C0B4                 db    ? ;
.bss:0040C0B5                 db    ? ;
.bss:0040C0B6                 db    ? ;
.bss:0040C0B7                 db    ? ;
.bss:0040C0B8                 db    ? ;
.bss:0040C0B9                 db    ? ;
.bss:0040C0BA                 db    ? ;
.bss:0040C0BB                 db    ? ;
.bss:0040C0BC                 db    ? ;
.bss:0040C0BD                 db    ? ;
.bss:0040C0BE                 db    ? ;
.bss:0040C0BF                 db    ? ;
.bss:0040C0C0                 db    ? ;
.bss:0040C0C1                 db    ? ;
.bss:0040C0C2                 db    ? ;
.bss:0040C0C3                 db    ? ;
.bss:0040C0C4                 db    ? ;
.bss:0040C0C5                 db    ? ;
.bss:0040C0C6                 db    ? ;
.bss:0040C0C7                 db    ? ;
.bss:0040C0C8                 db    ? ;
.bss:0040C0C9                 db    ? ;
.bss:0040C0CA                 db    ? ;
.bss:0040C0CB                 db    ? ;
.bss:0040C0CC                 db    ? ;
.bss:0040C0CD                 db    ? ;
.bss:0040C0CE                 db    ? ;
.bss:0040C0CF                 db    ? ;
.bss:0040C0D0                 db    ? ;
.bss:0040C0D1                 db    ? ;
.bss:0040C0D2                 db    ? ;
.bss:0040C0D3                 db    ? ;
.bss:0040C0D4                 db    ? ;
.bss:0040C0D5                 db    ? ;
.bss:0040C0D6                 db    ? ;
.bss:0040C0D7                 db    ? ;
.bss:0040C0D8                 db    ? ;
.bss:0040C0D9                 db    ? ;
.bss:0040C0DA                 db    ? ;
.bss:0040C0DB                 db    ? ;
.bss:0040C0DC                 db    ? ;
.bss:0040C0DD                 db    ? ;
.bss:0040C0DE                 db    ? ;
.bss:0040C0DF                 db    ? ;
.bss:0040C0E0                 db    ? ;
.bss:0040C0E1                 db    ? ;
.bss:0040C0E2                 db    ? ;
.bss:0040C0E3                 db    ? ;
.bss:0040C0E4                 db    ? ;
.bss:0040C0E5                 db    ? ;
.bss:0040C0E6                 db    ? ;
.bss:0040C0E7                 db    ? ;
.bss:0040C0E8                 db    ? ;
.bss:0040C0E9                 db    ? ;
.bss:0040C0EA                 db    ? ;
.bss:0040C0EB                 db    ? ;
.bss:0040C0EC                 db    ? ;
.bss:0040C0ED                 db    ? ;
.bss:0040C0EE                 db    ? ;
.bss:0040C0EF                 db    ? ;
.bss:0040C0F0                 db    ? ;
.bss:0040C0F1                 db    ? ;
.bss:0040C0F2                 db    ? ;
.bss:0040C0F3                 db    ? ;
.bss:0040C0F4                 db    ? ;
.bss:0040C0F5                 db    ? ;
.bss:0040C0F6                 db    ? ;
.bss:0040C0F7                 db    ? ;
.bss:0040C0F8                 db    ? ;
.bss:0040C0F9                 db    ? ;
.bss:0040C0FA                 db    ? ;
.bss:0040C0FB                 db    ? ;
.bss:0040C0FC                 db    ? ;
.bss:0040C0FD                 db    ? ;
.bss:0040C0FE                 db    ? ;
.bss:0040C0FF                 db    ? ;
.bss:0040C100                 db    ? ;
.bss:0040C101                 db    ? ;
.bss:0040C102                 db    ? ;
.bss:0040C103                 db    ? ;
.bss:0040C104                 db    ? ;
.bss:0040C105                 db    ? ;
.bss:0040C106                 db    ? ;
.bss:0040C107                 db    ? ;
.bss:0040C108                 db    ? ;
.bss:0040C109                 db    ? ;
.bss:0040C10A                 db    ? ;
.bss:0040C10B                 db    ? ;
.bss:0040C10C                 db    ? ;
.bss:0040C10D                 db    ? ;
.bss:0040C10E                 db    ? ;
.bss:0040C10F                 db    ? ;
.bss:0040C110                 db    ? ;
.bss:0040C111                 db    ? ;
.bss:0040C112                 db    ? ;
.bss:0040C113                 db    ? ;
.bss:0040C114                 db    ? ;
.bss:0040C115                 db    ? ;
.bss:0040C116                 db    ? ;
.bss:0040C117                 db    ? ;
.bss:0040C118                 db    ? ;
.bss:0040C119                 db    ? ;
.bss:0040C11A                 db    ? ;
.bss:0040C11B                 db    ? ;
.bss:0040C11C                 db    ? ;
.bss:0040C11D                 db    ? ;
.bss:0040C11E                 db    ? ;
.bss:0040C11F                 db    ? ;
.bss:0040C120                 db    ? ;
.bss:0040C121                 db    ? ;
.bss:0040C122                 db    ? ;
.bss:0040C123                 db    ? ;
.bss:0040C124                 db    ? ;
.bss:0040C125                 db    ? ;
.bss:0040C126                 db    ? ;
.bss:0040C127                 db    ? ;
.bss:0040C128                 db    ? ;
.bss:0040C129                 db    ? ;
.bss:0040C12A                 db    ? ;
.bss:0040C12B                 db    ? ;
.bss:0040C12C                 db    ? ;
.bss:0040C12D                 db    ? ;
.bss:0040C12E                 db    ? ;
.bss:0040C12F                 db    ? ;
.bss:0040C130                 db    ? ;
.bss:0040C131                 db    ? ;
.bss:0040C132                 db    ? ;
.bss:0040C133                 db    ? ;
.bss:0040C134                 db    ? ;
.bss:0040C135                 db    ? ;
.bss:0040C136                 db    ? ;
.bss:0040C137                 db    ? ;
.bss:0040C138                 db    ? ;
.bss:0040C139                 db    ? ;
.bss:0040C13A                 db    ? ;
.bss:0040C13B                 db    ? ;
.bss:0040C13C                 db    ? ;
.bss:0040C13D                 db    ? ;
.bss:0040C13E                 db    ? ;
.bss:0040C13F                 db    ? ;
.bss:0040C140                 db    ? ;
.bss:0040C141                 db    ? ;
.bss:0040C142                 db    ? ;
.bss:0040C143                 db    ? ;
.bss:0040C144                 db    ? ;
.bss:0040C145                 db    ? ;
.bss:0040C146                 db    ? ;
.bss:0040C147                 db    ? ;
.bss:0040C148                 db    ? ;
.bss:0040C149                 db    ? ;
.bss:0040C14A                 db    ? ;
.bss:0040C14B                 db    ? ;
.bss:0040C14C                 db    ? ;
.bss:0040C14D                 db    ? ;
.bss:0040C14E                 db    ? ;
.bss:0040C14F                 db    ? ;
.bss:0040C150                 db    ? ;
.bss:0040C151                 db    ? ;
.bss:0040C152                 db    ? ;
.bss:0040C153                 db    ? ;
.bss:0040C154                 db    ? ;
.bss:0040C155                 db    ? ;
.bss:0040C156                 db    ? ;
.bss:0040C157                 db    ? ;
.bss:0040C158                 db    ? ;
.bss:0040C159                 db    ? ;
.bss:0040C15A                 db    ? ;
.bss:0040C15B                 db    ? ;
.bss:0040C15C                 db    ? ;
.bss:0040C15D                 db    ? ;
.bss:0040C15E                 db    ? ;
.bss:0040C15F                 db    ? ;
.bss:0040C160                 db    ? ;
.bss:0040C161                 db    ? ;
.bss:0040C162                 db    ? ;
.bss:0040C163                 db    ? ;
.bss:0040C164                 db    ? ;
.bss:0040C165                 db    ? ;
.bss:0040C166                 db    ? ;
.bss:0040C167                 db    ? ;
.bss:0040C168                 db    ? ;
.bss:0040C169                 db    ? ;
.bss:0040C16A                 db    ? ;
.bss:0040C16B                 db    ? ;
.bss:0040C16C                 db    ? ;
.bss:0040C16D                 db    ? ;
.bss:0040C16E                 db    ? ;
.bss:0040C16F                 db    ? ;
.bss:0040C170 dword_40C170    dd ?                    ; DATA XREF: .text:loc_408C11↑o
.bss:0040C170                                         ; .text:loc_408C30↑o ...
.bss:0040C174 dword_40C174    dd ?                    ; DATA XREF: .text:loc_408CB0↑o
.bss:0040C174                                         ; .text:00409138↑r ...
.bss:0040C178 dword_40C178    dd ?                    ; DATA XREF: .text:00409132↑r
.bss:0040C178                                         ; sub_4091E0+2C↑r
.bss:0040C17C dword_40C17C    dd ?                    ; DATA XREF: .text:00409126↑r
.bss:0040C17C                                         ; sub_4091E0+22↑r
.bss:0040C180 dword_40C180    dd ?                    ; DATA XREF: .text:00409142↑r
.bss:0040C180                                         ; sub_4091E0+36↑r
.bss:0040C184 dword_40C184    dd ?                    ; DATA XREF: .text:00409152↑r
.bss:0040C184                                         ; sub_4091E0+4E↑r
.bss:0040C188 dword_40C188    dd ?                    ; DATA XREF: .text:0040916F↑r
.bss:0040C188                                         ; sub_4091E0+62↑r
.bss:0040C18C dword_40C18C    dd ?                    ; DATA XREF: .text:00409165↑r
.bss:0040C18C                                         ; sub_4091E0+70↑r
.bss:0040C190 dword_40C190    dd ?                    ; DATA XREF: .text:00409148↑r
.bss:0040C190                                         ; sub_4091E0+7A↑r
.bss:0040C194                 align 10h
.bss:0040C1A0 ; char *Str1
.bss:0040C1A0 Str1            dd ?                    ; DATA XREF: sub_409874:loc_4098AD↑w
.bss:0040C1A0                                         ; sub_409874:loc_4099E0↑r
.bss:0040C1A4                 align 10h
.bss:0040C1B0 dword_40C1B0    dd ?                    ; DATA XREF: sub_409874+2D↑r
.bss:0040C1B0                                         ; sub_409874+3F↑w
.bss:0040C1B4                 align 10h
.bss:0040C1C0 dword_40C1C0    dd ?                    ; DATA XREF: sub_403430+1F↑r
.bss:0040C1C0                                         ; sub_403430+4D↑r ...
.bss:0040C1C4                 align 20h
.bss:0040C1E0 dword_40C1E0    dd ?                    ; DATA XREF: sub_403B10:loc_403CED↑r
.bss:0040C1E0                                         ; sub_406A00+71↑w ...
.bss:0040C1E4                 align 10h
.bss:0040C1F0 dword_40C1F0    dd ?                    ; CODE XREF: sub_409874+63↑p
.bss:0040C1F0                                         ; DATA XREF: sub_409770+1E↑r ...
.bss:0040C1F4                 align 10h
.bss:0040C200 dword_40C200    dd ?                    ; DATA XREF: sub_409770+4E↑w
.bss:0040C200                                         ; sub_409874+AB↑w
.bss:0040C204                 db    ? ;
.bss:0040C205                 db    ? ;
.bss:0040C206                 db    ? ;
.bss:0040C207                 db    ? ;
.bss:0040C208                 db    ? ;
.bss:0040C209                 db    ? ;
.bss:0040C20A                 db    ? ;
.bss:0040C20B                 db    ? ;
.bss:0040C20C                 db    ? ;
.bss:0040C20D                 db    ? ;
.bss:0040C20E                 db    ? ;
.bss:0040C20F                 db    ? ;
.bss:0040C210                 db    ? ;
.bss:0040C211                 db    ? ;
.bss:0040C212                 db    ? ;
.bss:0040C213                 db    ? ;
.bss:0040C214                 db    ? ;
.bss:0040C215                 db    ? ;
.bss:0040C216                 db    ? ;
.bss:0040C217                 db    ? ;
.bss:0040C218                 db    ? ;
.bss:0040C219                 db    ? ;
.bss:0040C21A                 db    ? ;
.bss:0040C21B                 db    ? ;
.bss:0040C21C                 db    ? ;
.bss:0040C21D                 db    ? ;
.bss:0040C21E                 db    ? ;
.bss:0040C21F                 db    ? ;
.bss:0040C220                 db    ? ;
.bss:0040C221                 db    ? ;
.bss:0040C222                 db    ? ;
.bss:0040C223                 db    ? ;
.bss:0040C224                 db    ? ;
.bss:0040C225                 db    ? ;
.bss:0040C226                 db    ? ;
.bss:0040C227                 db    ? ;
.bss:0040C228                 db    ? ;
.bss:0040C229                 db    ? ;
.bss:0040C22A                 db    ? ;
.bss:0040C22B                 db    ? ;
.bss:0040C22C                 db    ? ;
.bss:0040C22D                 db    ? ;
.bss:0040C22E                 db    ? ;
.bss:0040C22F                 db    ? ;
.bss:0040C230 dword_40C230    dd ?                    ; DATA XREF: sub_409874+13↑r
.bss:0040C234                 align 1000h
.bss:0040C234 _bss            ends
.bss:0040C234
.idata:0040D000 ; Section 4. (virtual address 0000D000)
.idata:0040D000 ; Virtual size                  : 000006B4 (   1716.)
.idata:0040D000 ; Section size in file          : 00000800 (   2048.)
.idata:0040D000 ; Offset to raw data for section: 0000AA00
.idata:0040D000 ; Flags C0000040: Data Readable Writable
.idata:0040D000 ; Alignment     : default
.idata:0040D000 ; ===========================================================================
.idata:0040D000
.idata:0040D000 ; Segment type: Externs
.idata:0040D000 ; _idata
.idata:0040D000
.idata:0040D001
.idata:0040D188 ;
.idata:0040D188 ; Imports from libintl3.dll
.idata:0040D188 ;
.idata:0040D188                 extrn libintl_bindtextdomain:dword
.idata:0040D188                                         ; CODE XREF: sub_403B10+59↑p
.idata:0040D188                                         ; DATA XREF: sub_403B10+59↑r ...
.idata:0040D18C                 extrn libintl_gettext:dword
.idata:0040D18C                                         ; CODE XREF: sub_403430+13↑p
.idata:0040D18C                                         ; sub_403430+47↑p ...
.idata:0040D190                 extrn libintl_textdomain:dword
.idata:0040D190                                         ; CODE XREF: sub_403B10+66↑p
.idata:0040D190                                         ; DATA XREF: sub_403B10+66↑r ...
.idata:0040D194
.idata:0040D19C ;
.idata:0040D19C ; Imports from KERNEL32.dll
.idata:0040D19C ;
.idata:0040D19C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040D19C                 extrn __imp_ExitProcess:dword
.idata:0040D19C                                         ; DATA XREF: ExitProcess↑r
.idata:0040D1A0 ; DWORD (__stdcall *GetLastError)()
.idata:0040D1A0                 extrn __imp_GetLastError:dword
.idata:0040D1A0                                         ; DATA XREF: GetLastError↑r
.idata:0040D1A4 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:0040D1A4                 extrn __imp_LockFile:dword
.idata:0040D1A4                                         ; DATA XREF: LockFile↑r
.idata:0040D1A8 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040D1A8                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040D1A8                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040D1AC ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0040D1AC                 extrn __imp_UnlockFile:dword
.idata:0040D1AC                                         ; DATA XREF: UnlockFile↑r
.idata:0040D1B0
.idata:0040D1B8 ;
.idata:0040D1B8 ; Imports from msvcrt.dll
.idata:0040D1B8 ;
.idata:0040D1B8 ; int (__cdecl *_dup)(int FileHandle)
.idata:0040D1B8                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:0040D1BC ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0040D1BC                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0040D1C0
.idata:0040D1C8 ;
.idata:0040D1C8 ; Imports from MSVCP60.DLL
.idata:0040D1C8 ;
.idata:0040D1C8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040D1C8                 extrn __imp_mbrtowc:dword
.idata:0040D1C8                                         ; DATA XREF: mbrtowc↑r
.idata:0040D1CC
.idata:0040D1D4 ;
.idata:0040D1D4 ; Imports from msvcrt.dll
.idata:0040D1D4 ;
.idata:0040D1D4                 extrn __imp___getmainargs:dword
.idata:0040D1D4                                         ; DATA XREF: __getmainargs↑r
.idata:0040D1D8 ; int _mb_cur_max
.idata:0040D1D8                 extrn __mb_cur_max:dword
.idata:0040D1D8                                         ; DATA XREF: sub_406CB0+45↑r
.idata:0040D1D8                                         ; sub_408140+7↑r ...
.idata:0040D1DC ; char ***(__cdecl *__p__environ)()
.idata:0040D1DC                 extrn __imp___p__environ:dword
.idata:0040D1DC                                         ; DATA XREF: __p__environ↑r
.idata:0040D1E0 ; int *(__cdecl *__p__fmode)()
.idata:0040D1E0                 extrn __imp___p__fmode:dword
.idata:0040D1E0                                         ; DATA XREF: __p__fmode↑r
.idata:0040D1E4                 extrn __pioinfo:dword   ; DATA XREF: sub_409E30:loc_409E98↑r
.idata:0040D1E4                                         ; sub_409E30:loc_409EC3↑r ...
.idata:0040D1E8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040D1E8                 extrn __set_app_type:dword
.idata:0040D1E8                                         ; CODE XREF: start+D↑p
.idata:0040D1E8                                         ; .text:0040102D↑p
.idata:0040D1E8                                         ; DATA XREF: ...
.idata:0040D1EC                 extrn __imp__assert:dword
.idata:0040D1EC                                         ; DATA XREF: _assert↑r
.idata:0040D1F0 ; void (__cdecl *_cexit)()
.idata:0040D1F0                 extrn __imp__cexit:dword
.idata:0040D1F0                                         ; DATA XREF: _cexit↑r
.idata:0040D1F4 ; int *(__cdecl *_errno)()
.idata:0040D1F4                 extrn __imp__errno:dword
.idata:0040D1F4                                         ; DATA XREF: _errno↑r
.idata:0040D1F8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0040D1F8                 extrn __imp__filelengthi64:dword
.idata:0040D1F8                                         ; DATA XREF: _filelengthi64↑r
.idata:0040D1FC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040D1FC                 extrn __imp__flsbuf:dword
.idata:0040D1FC                                         ; DATA XREF: _flsbuf↑r
.idata:0040D200 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0040D200                 extrn __imp__get_osfhandle:dword
.idata:0040D200                                         ; DATA XREF: _get_osfhandle↑r
.idata:0040D204 ; FILE iob[]
.idata:0040D204                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040D204                                         ; sub_401080+75↑r ...
.idata:0040D208 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040D208                 extrn __imp__isctype:dword
.idata:0040D208                                         ; DATA XREF: _isctype↑r
.idata:0040D20C ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0040D20C                 extrn __imp__lseeki64:dword
.idata:0040D20C                                         ; DATA XREF: _lseeki64↑r
.idata:0040D210 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040D210                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040D210                                         ; DATA XREF: .text:0040106C↑r
.idata:0040D214 ; const unsigned __int16 *pctype
.idata:0040D214                 extrn _pctype:dword     ; DATA XREF: sub_406CB0:loc_4071D0↑r
.idata:0040D214                                         ; sub_408140:loc_408834↑r
.idata:0040D218 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040D218                 extrn __imp__setmode:dword
.idata:0040D218                                         ; DATA XREF: _setmode↑r
.idata:0040D21C ; void (__cdecl __noreturn *abort)()
.idata:0040D21C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040D220 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040D220                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040D220                                         ; DATA XREF: sub_401040+C↑r
.idata:0040D224 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040D224                 extrn __imp_calloc:dword
.idata:0040D224                                         ; DATA XREF: calloc↑r
.idata:0040D228 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040D228                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040D22C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040D22C                 extrn __imp_fclose:dword
.idata:0040D22C                                         ; DATA XREF: fclose↑r
.idata:0040D230 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040D230                 extrn __imp_fflush:dword
.idata:0040D230                                         ; DATA XREF: fflush↑r
.idata:0040D234 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040D234                 extrn __imp_fprintf:dword
.idata:0040D234                                         ; DATA XREF: fprintf↑r
.idata:0040D238 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040D238                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040D23C ; void (__cdecl *free)(void *Block)
.idata:0040D23C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040D240 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040D240                 extrn __imp_getenv:dword
.idata:0040D240                                         ; DATA XREF: getenv↑r
.idata:0040D244 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040D244                 extrn __imp_iswctype:dword
.idata:0040D244                                         ; DATA XREF: iswctype↑r
.idata:0040D248 ; void *(__cdecl *malloc)(size_t Size)
.idata:0040D248                 extrn __imp_malloc:dword
.idata:0040D248                                         ; DATA XREF: malloc↑r
.idata:0040D24C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040D24C                 extrn __imp_memcpy:dword
.idata:0040D24C                                         ; DATA XREF: memcpy↑r
.idata:0040D250 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040D250                 extrn __imp_memset:dword
.idata:0040D250                                         ; DATA XREF: memset↑r
.idata:0040D254 ; int (*printf)(const char *const Format, ...)
.idata:0040D254                 extrn __imp_printf:dword
.idata:0040D254                                         ; DATA XREF: printf↑r
.idata:0040D258 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040D258                 extrn __imp_realloc:dword
.idata:0040D258                                         ; DATA XREF: realloc↑r
.idata:0040D25C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040D25C                 extrn __imp_setlocale:dword
.idata:0040D25C                                         ; DATA XREF: setlocale↑r
.idata:0040D260 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040D260                 extrn __imp_signal:dword
.idata:0040D260                                         ; DATA XREF: signal↑r
.idata:0040D264 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0040D264                 extrn __imp_sscanf:dword
.idata:0040D264                                         ; DATA XREF: sscanf↑r
.idata:0040D268 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040D268                 extrn __imp_strchr:dword
.idata:0040D268                                         ; DATA XREF: strchr↑r
.idata:0040D26C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040D26C                 extrn __imp_strcmp:dword
.idata:0040D26C                                         ; DATA XREF: strcmp↑r
.idata:0040D270 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040D270                 extrn __imp_strerror:dword
.idata:0040D270                                         ; DATA XREF: strerror↑r
.idata:0040D274 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040D274                 extrn __imp_strlen:dword
.idata:0040D274                                         ; DATA XREF: strlen↑r
.idata:0040D278 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040D278                 extrn __imp_strncmp:dword
.idata:0040D278                                         ; DATA XREF: strncmp↑r
.idata:0040D27C ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0040D27C                 extrn __imp_strtol:dword
.idata:0040D27C                                         ; DATA XREF: strtol↑r
.idata:0040D280 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0040D280                 extrn __imp_strtoul:dword
.idata:0040D280                                         ; DATA XREF: strtoul↑r
.idata:0040D284 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040D284                 extrn __imp_vfprintf:dword
.idata:0040D284                                         ; DATA XREF: vfprintf↑r
.idata:0040D288 ; int (__cdecl *vsprintf)(char *const Buffer, const char *const Format, va_list ArgList)
.idata:0040D288                 extrn __imp_vsprintf:dword
.idata:0040D288                                         ; DATA XREF: vsprintf↑r
.idata:0040D28C
.idata:0040D28C
.idata:0040D28C
.idata:0040D28C                 end start
