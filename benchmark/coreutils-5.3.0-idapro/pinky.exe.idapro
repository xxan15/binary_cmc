.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : E1CC4B1F1CCE31721A1999E7654350E912931B56C3F0171FF5E8F57A953CBEF5
.text:00401000 ; Input MD5    : 700EB8C579F1A43EF7851D46BD52489F
.text:00401000 ; Input CRC32  : 00C83091
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/pinky.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A277 (Wed Apr 20 18:41:59 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000E7B0 (  59312.)
.text:00401000 ; Section size in file          : 0000E800 (  59392.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4017F0+63↓p
.text:00401040                                         ; .text:0040E670↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40E610
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_410000
.text:004010A2                 mov     edx, dword_410100
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_410004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_410120, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_410120
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40E5E0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_410000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_410004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4017F0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40E610
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aHelp           db 'help',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401285 aVersion        db 'version',0          ; DATA XREF: .text:004012B0↓o
.text:0040128D                 align 20h
.text:004012A0 off_4012A0      dd offset aHelp         ; DATA XREF: sub_4017F0+78↓o
.text:004012A0                                         ; "help"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 0FFFFFF7Eh
.text:004012B0                 dd offset aVersion      ; "version"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012D0 ; const char Locale
.text:004012D0 Locale          db 0                    ; DATA XREF: sub_4017F0+20↓o
.text:004012D1                 db 0EBh, 0Dh, 90h
.text:004012D4                 align 10h
.text:004012E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012E0                                         ; DATA XREF: sub_4017F0+3A↓o
.text:00401303 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4017F0+42↓o
.text:00401303                                         ; sub_4017F0+4F↓o
.text:0040130D ; const char aSfwiqbhlp[]
.text:0040130D aSfwiqbhlp      db 'sfwiqbhlp',0        ; DATA XREF: sub_4017F0+80↓o
.text:00401317                 align 10h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_4017F0:loc_4018C0↓o
.text:00401320                                         ; .text:00401BBC↓o
.text:00401347                 align 20h
.text:00401360 aUsageSOptionUs db 'Usage: %s [OPTION]... [USER]...',0Ah,0
.text:00401360                                         ; DATA XREF: sub_4017F0+126↓o
.text:00401360                                         ; .text:loc_401BF0↓o
.text:00401381                 align 20h
.text:004013A0 aLProduceLongFo db 0Ah                  ; DATA XREF: sub_4017F0+145↓o
.text:004013A0                                         ; .text:00401C0F↓o
.text:004013A0                 db '  -l              produce long format output for the specified US'
.text:004013A0                 db 'ERs',0Ah
.text:004013A0                 db '  -b              omit the user',27h,'s home directory and shell '
.text:004013A0                 db 'in long format',0Ah
.text:004013A0                 db '  -h              omit the user',27h,'s project file in long form'
.text:004013A0                 db 'at',0Ah
.text:004013A0                 db '  -p              omit the user',27h,'s plan file in long format',0Ah
.text:004013A0                 db '  -s              do short format output, this is the default',0Ah
.text:004013A0                 db 0
.text:004014E8                 align 20h
.text:00401500 aFOmitTheLineOf db '  -f              omit the line of column headings in short forma'
.text:00401500                                         ; DATA XREF: sub_4017F0+167↓o
.text:00401500                                         ; .text:00401C31↓o
.text:00401500                 db 't',0Ah
.text:00401500                 db '  -w              omit the user',27h,'s full name in short format'
.text:00401500                 db 0Ah
.text:00401500                 db '  -i              omit the user',27h,'s full name and remote host'
.text:00401500                 db ' in short format',0Ah
.text:00401500                 db '  -q              omit the user',27h,'s full name, remote host an'
.text:00401500                 db 'd idle time',0Ah
.text:00401500                 db '                  in short format',0Ah,0
.text:00401635                 align 10h
.text:00401640 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401640                                         ; DATA XREF: sub_4017F0+189↓o
.text:00401640                                         ; .text:00401C53↓o
.text:0040166D                 align 20h
.text:00401680 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401680                                         ; DATA XREF: sub_4017F0+1AB↓o
.text:00401680                                         ; .text:00401C75↓o
.text:004016B6                 align 10h
.text:004016C0 aALightweightFi db 0Ah                  ; DATA XREF: sub_4017F0+1CD↓o
.text:004016C0                                         ; .text:00401C97↓o
.text:004016C0                 db 'A lightweight `finger',27h,' program;  print user information.',0Ah
.text:004016C0                 db 'The utmp file will be %s.',0Ah,0
.text:00401715 ; const char aVarRunUtmp[]
.text:00401715 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: sub_4017F0+1DA↓o
.text:00401715                                         ; sub_4017F0:loc_401B43↓o ...
.text:00401723 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4017F0+1EA↓o
.text:00401723                                         ; .text:00401CB4↓o
.text:00401723                 db 'Report bugs to <%s>.',0Ah,0
.text:0040173A aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040173A                                         ; DATA XREF: sub_4017F0+1F7↓o
.text:0040173A                                         ; .text:00401CC1↓o
.text:00401750 aKavehGhazi     db 'Kaveh Ghazi',0      ; DATA XREF: sub_4017F0+221↓o
.text:0040175C aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4017F0+229↓o
.text:0040176C aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: sub_4017F0+234↓o
.text:0040177D a530            db '5.3.0',0            ; DATA XREF: sub_4017F0+23C↓o
.text:00401783 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4017F0+244↓o
.text:00401791 ; const FILE stru_401791
.text:00401791 stru_401791     FILE <6B6E6970h, 0F6890079h, 27BC8Dh, 6E000000h, 7375206Fh, 616E7265h,\
.text:00401791                                         ; DATA XREF: sub_4017F0+24C↓o
.text:00401791                                         ; sub_4017F0:loc_401B19↓o
.text:00401791                       7320656Dh, 69636570h>
.text:004017B1                 db  66h ; f
.text:004017B2                 db  69h ; i
.text:004017B3                 db  65h ; e
.text:004017B4                 db  64h ; d
.text:004017B5                 db  3Bh ; ;
.text:004017B6                 db  20h
.text:004017B7                 db  61h ; a
.text:004017B8                 db  74h ; t
.text:004017B9                 db  20h
.text:004017BA                 db  6Ch ; l
.text:004017BB                 db  65h ; e
.text:004017BC                 db  61h ; a
.text:004017BD                 db  73h ; s
.text:004017BE                 db  74h ; t
.text:004017BF                 db  20h
.text:004017C0                 db  6Fh ; o
.text:004017C1                 db  6Eh ; n
.text:004017C2                 db  65h ; e
.text:004017C3                 db  20h
.text:004017C4                 db  6Dh ; m
.text:004017C5                 db  75h ; u
.text:004017C6                 db  73h ; s
.text:004017C7                 db  74h ; t
.text:004017C8                 db  20h
.text:004017C9                 db  62h ; b
.text:004017CA                 db  65h ; e
.text:004017CB                 db  20h
.text:004017CC                 db  73h ; s
.text:004017CD                 db  70h ; p
.text:004017CE                 db  65h ; e
.text:004017CF                 db  63h ; c
.text:004017D0                 db  69h ; i
.text:004017D1                 db  66h ; f
.text:004017D2                 db  69h ; i
.text:004017D3                 db  65h ; e
.text:004017D4                 db  64h ; d
.text:004017D5                 db  20h
.text:004017D6                 db  77h ; w
.text:004017D7                 db  68h ; h
.text:004017D8                 db  65h ; e
.text:004017D9                 db  6Eh ; n
.text:004017DA                 db  20h
.text:004017DB                 db  75h ; u
.text:004017DC                 db  73h ; s
.text:004017DD                 db  69h ; i
.text:004017DE                 db  6Eh ; n
.text:004017DF                 db  67h ; g
.text:004017E0                 db  20h
.text:004017E1                 db  2Dh ; -
.text:004017E2                 db  6Ch ; l
.text:004017E3                 db    0
.text:004017E4 ; const char aS[]
.text:004017E4 aS              db '%s',0               ; DATA XREF: sub_4017F0+3A0↓o
.text:004017E7                 align 10h
.text:004017F0
.text:004017F0 ; =============== S U B R O U T I N E =======================================
.text:004017F0
.text:004017F0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004017F0
.text:004017F0 sub_4017F0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004017F0
.text:004017F0 Category        = dword ptr -38h
.text:004017F0 Locale          = dword ptr -34h
.text:004017F0 var_30          = dword ptr -30h
.text:004017F0 var_2C          = byte ptr -2Ch
.text:004017F0 var_28          = byte ptr -28h
.text:004017F0 var_24          = dword ptr -24h
.text:004017F0 var_20          = dword ptr -20h
.text:004017F0 var_1C          = dword ptr -1Ch
.text:004017F0 var_14          = dword ptr -14h
.text:004017F0 var_10          = dword ptr -10h
.text:004017F0 arg_0           = dword ptr  8
.text:004017F0 arg_4           = dword ptr  0Ch
.text:004017F0
.text:004017F0                 push    ebp
.text:004017F1                 xor     eax, eax
.text:004017F3                 mov     ebp, esp
.text:004017F5                 push    edi
.text:004017F6                 push    esi
.text:004017F7                 push    ebx
.text:004017F8                 sub     esp, 2Ch
.text:004017FB                 mov     ebx, [ebp+arg_4]
.text:004017FE                 and     esp, 0FFFFFFF0h
.text:00401801                 mov     esi, [ebp+arg_0]
.text:00401804                 call    __alloca
.text:00401809                 call    sub_40E6B0
.text:0040180E                 mov     edx, [ebx]
.text:00401810                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401818                 mov     [esp+38h+Category], 0 ; Category
.text:0040181F                 mov     ds:dword_411BF0, edx
.text:00401825                 call    setlocale
.text:0040182A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401832                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401839                 call    ds:__imp_libintl_bindtextdomain
.text:0040183F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401846                 call    ds:libintl_textdomain
.text:0040184C                 mov     [esp+38h+Category], offset sub_4040D0 ; void (__cdecl *)()
.text:00401853                 call    sub_401040
.text:00401858                 nop
.text:00401859                 lea     esi, [esi+0]
.text:00401860
.text:00401860 loc_401860:                             ; CODE XREF: sub_4017F0+CE↓j
.text:00401860                                         ; sub_4017F0+10F↓j ...
.text:00401860                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401868                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; char
.text:00401870                 mov     [esp+38h+var_30], offset aSfwiqbhlp ; "sfwiqbhlp"
.text:00401878                 mov     [esp+38h+Locale], ebx ; int
.text:0040187C                 mov     [esp+38h+Category], esi ; int
.text:0040187F                 call    sub_403F60
.text:00401884                 cmp     eax, 0FFFFFFFFh
.text:00401887                 jz      loc_401AE3
.text:0040188D                 cmp     eax, 69h ; 'i'
.text:00401890                 jz      loc_401AD0
.text:00401896                 cmp     eax, 69h ; 'i'
.text:00401899                 jg      loc_401A60
.text:0040189F                 cmp     eax, 62h ; 'b'
.text:004018A2                 jz      loc_401A50
.text:004018A8                 cmp     eax, 62h ; 'b'
.text:004018AB                 jle     short loc_401904
.text:004018AD                 cmp     eax, 66h ; 'f'
.text:004018B0                 jz      short loc_4018F8
.text:004018B2                 cmp     eax, 68h ; 'h'
.text:004018B5                 jnz     short loc_4018C0
.text:004018B7                 mov     byte_410013, 0
.text:004018BE                 jmp     short loc_401860
.text:004018C0 ; ---------------------------------------------------------------------------
.text:004018C0
.text:004018C0 loc_4018C0:                             ; CODE XREF: sub_4017F0+C5↑j
.text:004018C0                                         ; sub_4017F0+124↓j ...
.text:004018C0                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004018C7                 call    ds:libintl_gettext
.text:004018CD                 mov     ebx, ds:_iob
.text:004018D3                 mov     esi, ds:dword_411BF0
.text:004018D9                 add     ebx, 40h ; '@'
.text:004018DC                 mov     [esp+38h+var_30], esi
.text:004018E0                 mov     [esp+38h+Locale], eax ; Format
.text:004018E4                 mov     [esp+38h+Category], ebx ; Stream
.text:004018E7                 call    fprintf
.text:004018EC                 mov     [esp+38h+Category], 1 ; Code
.text:004018F3
.text:004018F3 loc_4018F3:                             ; CODE XREF: sub_4017F0+20E↓j
.text:004018F3                 call    exit
.text:004018F8 ; ---------------------------------------------------------------------------
.text:004018F8
.text:004018F8 loc_4018F8:                             ; CODE XREF: sub_4017F0+C0↑j
.text:004018F8                 mov     byte_410011, 0
.text:004018FF                 jmp     loc_401860
.text:00401904 ; ---------------------------------------------------------------------------
.text:00401904
.text:00401904 loc_401904:                             ; CODE XREF: sub_4017F0+BB↑j
.text:00401904                 cmp     eax, 0FFFFFF7Dh
.text:00401909                 jz      loc_401A03
.text:0040190F                 cmp     eax, 0FFFFFF7Eh
.text:00401914                 jnz     short loc_4018C0
.text:00401916                 mov     [esp+38h+Category], offset aUsageSOptionUs ; "Usage: %s [OPTION]... [USER]...\n"
.text:0040191D                 call    ds:libintl_gettext
.text:00401923                 mov     ecx, ds:dword_411BF0
.text:00401929                 mov     [esp+38h+Category], eax ; Format
.text:0040192C                 mov     [esp+38h+Locale], ecx
.text:00401930                 call    printf
.text:00401935                 mov     [esp+38h+Category], offset aLProduceLongFo ; "\n  -l              produce long format"...
.text:0040193C                 call    ds:libintl_gettext
.text:00401942                 mov     edi, ds:_iob
.text:00401948                 add     edi, 20h ; ' '
.text:0040194B                 mov     [esp+38h+Locale], edi ; Stream
.text:0040194F                 mov     [esp+38h+Category], eax ; Buffer
.text:00401952                 call    fputs
.text:00401957                 mov     [esp+38h+Category], offset aFOmitTheLineOf ; "  -f              omit the line of colu"...
.text:0040195E                 call    ds:libintl_gettext
.text:00401964                 mov     esi, ds:_iob
.text:0040196A                 add     esi, 20h ; ' '
.text:0040196D                 mov     [esp+38h+Locale], esi ; Stream
.text:00401971                 mov     [esp+38h+Category], eax ; Buffer
.text:00401974                 call    fputs
.text:00401979                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401980                 call    ds:libintl_gettext
.text:00401986                 mov     ebx, ds:_iob
.text:0040198C                 add     ebx, 20h ; ' '
.text:0040198F                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401993                 mov     [esp+38h+Category], eax ; Buffer
.text:00401996                 call    fputs
.text:0040199B                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004019A2                 call    ds:libintl_gettext
.text:004019A8                 mov     ecx, ds:_iob
.text:004019AE                 add     ecx, 20h ; ' '
.text:004019B1                 mov     [esp+38h+Locale], ecx ; Stream
.text:004019B5                 mov     [esp+38h+Category], eax ; Buffer
.text:004019B8                 call    fputs
.text:004019BD                 mov     [esp+38h+Category], offset aALightweightFi ; "\nA lightweight `finger' program;  prin"...
.text:004019C4                 call    ds:libintl_gettext
.text:004019CA                 mov     [esp+38h+Locale], offset aVarRunUtmp ; "/var/run/utmp"
.text:004019D2                 mov     [esp+38h+Category], eax ; Format
.text:004019D5                 call    printf
.text:004019DA                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004019E1                 call    ds:libintl_gettext
.text:004019E7                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004019EF                 mov     [esp+38h+Category], eax ; Format
.text:004019F2                 call    printf
.text:004019F7
.text:004019F7 loc_4019F7:                             ; CODE XREF: sub_4017F0+25C↓j
.text:004019F7                                         ; sub_4017F0+30E↓j ...
.text:004019F7                 mov     [esp+38h+Category], 0
.text:004019FE                 jmp     loc_4018F3
.text:00401A03 ; ---------------------------------------------------------------------------
.text:00401A03
.text:00401A03 loc_401A03:                             ; CODE XREF: sub_4017F0+119↑j
.text:00401A03                 mov     [esp+38h+var_1C], 0
.text:00401A0B                 mov     edx, ds:_iob
.text:00401A11                 mov     [esp+38h+var_20], offset aKavehGhazi ; "Kaveh Ghazi"
.text:00401A19                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:00401A21                 add     edx, 20h ; ' '
.text:00401A24                 mov     dword ptr [esp+38h+var_28], offset aJosephArceneau ; "Joseph Arceneaux"
.text:00401A2C                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401A34                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:00401A3C                 mov     [esp+38h+Locale], offset stru_401791 ; FILE *
.text:00401A44                 mov     [esp+38h+Category], edx ; FILE *
.text:00401A47                 call    sub_403F20
.text:00401A4C                 jmp     short loc_4019F7
.text:00401A4C ; ---------------------------------------------------------------------------
.text:00401A4E                 align 10h
.text:00401A50
.text:00401A50 loc_401A50:                             ; CODE XREF: sub_4017F0+B2↑j
.text:00401A50                 mov     byte_410015, 0
.text:00401A57                 jmp     loc_401860
.text:00401A57 ; ---------------------------------------------------------------------------
.text:00401A5C                 align 10h
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_4017F0+A9↑j
.text:00401A60                 cmp     eax, 71h ; 'q'
.text:00401A63                 jz      short loc_401AB6
.text:00401A65                 cmp     eax, 71h ; 'q'
.text:00401A68                 jg      short loc_401A90
.text:00401A6A                 cmp     eax, 6Ch ; 'l'
.text:00401A6D                 jz      short loc_401A84
.text:00401A6F                 cmp     eax, 70h ; 'p'
.text:00401A72                 jnz     loc_4018C0
.text:00401A78                 mov     byte_410014, 0
.text:00401A7F                 jmp     loc_401860
.text:00401A84 ; ---------------------------------------------------------------------------
.text:00401A84
.text:00401A84 loc_401A84:                             ; CODE XREF: sub_4017F0+27D↑j
.text:00401A84                 mov     byte_410016, 0
.text:00401A8B                 jmp     loc_401860
.text:00401A90 ; ---------------------------------------------------------------------------
.text:00401A90
.text:00401A90 loc_401A90:                             ; CODE XREF: sub_4017F0+278↑j
.text:00401A90                 cmp     eax, 73h ; 's'
.text:00401A93                 jz      short loc_401AAA
.text:00401A95                 cmp     eax, 77h ; 'w'
.text:00401A98                 jnz     loc_4018C0
.text:00401A9E                 mov     byte_410012, 0
.text:00401AA5                 jmp     loc_401860
.text:00401AAA ; ---------------------------------------------------------------------------
.text:00401AAA
.text:00401AAA loc_401AAA:                             ; CODE XREF: sub_4017F0+2A3↑j
.text:00401AAA                 mov     byte_410016, 1
.text:00401AB1                 jmp     loc_401860
.text:00401AB6 ; ---------------------------------------------------------------------------
.text:00401AB6
.text:00401AB6 loc_401AB6:                             ; CODE XREF: sub_4017F0+273↑j
.text:00401AB6                 mov     byte_410012, 0
.text:00401ABD                 mov     byte_410017, 0
.text:00401AC4                 mov     byte_410010, 0
.text:00401ACB                 jmp     loc_401860
.text:00401AD0 ; ---------------------------------------------------------------------------
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_4017F0+A0↑j
.text:00401AD0                 mov     byte_410012, 0
.text:00401AD7                 mov     byte_410017, 0
.text:00401ADE                 jmp     loc_401860
.text:00401AE3 ; ---------------------------------------------------------------------------
.text:00401AE3
.text:00401AE3 loc_401AE3:                             ; CODE XREF: sub_4017F0+97↑j
.text:00401AE3                 mov     eax, dword_410020
.text:00401AE8                 sub     esi, eax
.text:00401AEA                 cmp     byte_410016, 0
.text:00401AF1                 jnz     short loc_401B43
.text:00401AF3                 test    esi, esi
.text:00401AF5                 jz      short loc_401B19
.text:00401AF7                 lea     edi, [ebx+eax*4]
.text:00401AFA                 xor     ebx, ebx
.text:00401AFC                 cmp     ebx, esi
.text:00401AFE                 jge     loc_4019F7
.text:00401B04
.text:00401B04 loc_401B04:                             ; CODE XREF: sub_4017F0+322↓j
.text:00401B04                 mov     ecx, [edi+ebx*4]
.text:00401B07                 inc     ebx
.text:00401B08                 mov     [esp+38h+Category], ecx ; char *
.text:00401B0B                 call    sub_401D40
.text:00401B10                 cmp     ebx, esi
.text:00401B12                 jl      short loc_401B04
.text:00401B14                 jmp     loc_4019F7
.text:00401B19 ; ---------------------------------------------------------------------------
.text:00401B19
.text:00401B19 loc_401B19:                             ; CODE XREF: sub_4017F0+305↑j
.text:00401B19                 mov     [esp+38h+Category], (offset stru_401791._flag+3)
.text:00401B20                 call    ds:libintl_gettext
.text:00401B26                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401B2E                 mov     [esp+38h+Category], 0 ; Code
.text:00401B35                 mov     [esp+38h+var_30], eax ; char *
.text:00401B39                 call    sub_405AE0
.text:00401B3E                 jmp     loc_4018C0
.text:00401B43 ; ---------------------------------------------------------------------------
.text:00401B43
.text:00401B43 loc_401B43:                             ; CODE XREF: sub_4017F0+301↑j
.text:00401B43                 mov     [esp+38h+Category], offset aVarRunUtmp ; "/var/run/utmp"
.text:00401B4A                 lea     ecx, [ebp+var_10]
.text:00401B4D                 lea     edi, [ebp+var_14]
.text:00401B50                 mov     [esp+38h+var_30], ecx ; int
.text:00401B54                 lea     ebx, [ebx+eax*4]
.text:00401B57                 mov     [esp+38h+Locale], edi ; int
.text:00401B5B                 call    sub_402950
.text:00401B60                 test    eax, eax
.text:00401B62                 jnz     short loc_401B83
.text:00401B64
.text:00401B64 loc_401B64:                             ; CODE XREF: sub_4017F0+3BA↓j
.text:00401B64                 mov     dword ptr [esp+38h+var_2C], ebx
.text:00401B68                 mov     ebx, [ebp+var_14]
.text:00401B6B                 mov     [esp+38h+var_30], esi
.text:00401B6F                 mov     esi, [ebp+var_10]
.text:00401B72                 mov     [esp+38h+Category], ebx
.text:00401B75                 mov     [esp+38h+Locale], esi
.text:00401B79                 call    sub_402140
.text:00401B7E                 jmp     loc_4019F7
.text:00401B83 ; ---------------------------------------------------------------------------
.text:00401B83
.text:00401B83 loc_401B83:                             ; CODE XREF: sub_4017F0+372↑j
.text:00401B83                 call    _errno
.text:00401B88                 mov     dword ptr [esp+38h+var_2C], offset aVarRunUtmp ; "/var/run/utmp"
.text:00401B90                 mov     [esp+38h+var_30], offset aS ; "%s"
.text:00401B98                 mov     edx, [eax]
.text:00401B9A                 mov     [esp+38h+Category], 1 ; Code
.text:00401BA1                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:00401BA5                 call    sub_405AE0
.text:00401BAA                 jmp     short loc_401B64
.text:00401BAA sub_4017F0      endp
.text:00401BAA
.text:00401BAA ; ---------------------------------------------------------------------------
.text:00401BAC                 align 10h
.text:00401BB0                 push    ebx
.text:00401BB1                 sub     esp, 18h
.text:00401BB4                 mov     ebx, [esp+20h]
.text:00401BB8                 test    ebx, ebx
.text:00401BBA                 jz      short loc_401BF0
.text:00401BBC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401BC3                 call    ds:libintl_gettext
.text:00401BC9                 mov     edx, ds:_iob
.text:00401BCF                 mov     ecx, ds:dword_411BF0
.text:00401BD5                 add     edx, 40h ; '@'
.text:00401BD8                 mov     [esp+8], ecx
.text:00401BDC                 mov     [esp+4], eax
.text:00401BE0                 mov     [esp], edx
.text:00401BE3                 call    fprintf
.text:00401BE8
.text:00401BE8 loc_401BE8:                             ; CODE XREF: .text:00401CD1↓j
.text:00401BE8                 mov     [esp], ebx
.text:00401BEB                 call    exit
.text:00401BF0 ; ---------------------------------------------------------------------------
.text:00401BF0
.text:00401BF0 loc_401BF0:                             ; CODE XREF: .text:00401BBA↑j
.text:00401BF0                 mov     dword ptr [esp], offset aUsageSOptionUs ; "Usage: %s [OPTION]... [USER]...\n"
.text:00401BF7                 call    ds:libintl_gettext
.text:00401BFD                 mov     ecx, ds:dword_411BF0
.text:00401C03                 mov     [esp], eax
.text:00401C06                 mov     [esp+4], ecx
.text:00401C0A                 call    printf
.text:00401C0F                 mov     dword ptr [esp], offset aLProduceLongFo ; "\n  -l              produce long format"...
.text:00401C16                 call    ds:libintl_gettext
.text:00401C1C                 mov     ecx, ds:_iob
.text:00401C22                 add     ecx, 20h ; ' '
.text:00401C25                 mov     [esp+4], ecx
.text:00401C29                 mov     [esp], eax
.text:00401C2C                 call    fputs
.text:00401C31                 mov     dword ptr [esp], offset aFOmitTheLineOf ; "  -f              omit the line of colu"...
.text:00401C38                 call    ds:libintl_gettext
.text:00401C3E                 mov     ecx, ds:_iob
.text:00401C44                 add     ecx, 20h ; ' '
.text:00401C47                 mov     [esp+4], ecx
.text:00401C4B                 mov     [esp], eax
.text:00401C4E                 call    fputs
.text:00401C53                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401C5A                 call    ds:libintl_gettext
.text:00401C60                 mov     ecx, ds:_iob
.text:00401C66                 add     ecx, 20h ; ' '
.text:00401C69                 mov     [esp+4], ecx
.text:00401C6D                 mov     [esp], eax
.text:00401C70                 call    fputs
.text:00401C75                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401C7C                 call    ds:libintl_gettext
.text:00401C82                 mov     ecx, ds:_iob
.text:00401C88                 add     ecx, 20h ; ' '
.text:00401C8B                 mov     [esp+4], ecx
.text:00401C8F                 mov     [esp], eax
.text:00401C92                 call    fputs
.text:00401C97                 mov     dword ptr [esp], offset aALightweightFi ; "\nA lightweight `finger' program;  prin"...
.text:00401C9E                 call    ds:libintl_gettext
.text:00401CA4                 mov     dword ptr [esp+4], offset aVarRunUtmp ; "/var/run/utmp"
.text:00401CAC                 mov     [esp], eax
.text:00401CAF                 call    printf
.text:00401CB4                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401CBB                 call    ds:libintl_gettext
.text:00401CC1                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401CC9                 mov     [esp], eax
.text:00401CCC                 call    printf
.text:00401CD1                 jmp     loc_401BE8
.text:00401CD1 ; ---------------------------------------------------------------------------
.text:00401CD6 aLoginName      db 'Login name: ',0     ; DATA XREF: sub_401D40+19↓o
.text:00401CE3 ; const char Format[]
.text:00401CE3 Format          db '%-28s',0            ; DATA XREF: sub_401D40+34↓o
.text:00401CE9 aInRealLife     db 'In real life: ',0   ; DATA XREF: sub_401D40+40↓o
.text:00401CF8 ; const char aS_0[]
.text:00401CF8 aS_0            db ' %s',0              ; DATA XREF: sub_401D40+8E↓o
.text:00401CF8                                         ; sub_401D40+310↓o ...
.text:00401CFC ; const char Source[]
.text:00401CFC Source          db '/.plan',0           ; DATA XREF: sub_401D40+157↓o
.text:00401D03 ; const char aR[]
.text:00401D03 aR              db 'r',0                ; DATA XREF: sub_401D40+167↓o
.text:00401D03                                         ; sub_401D40+237↓o
.text:00401D05 aPlan_0         db 'Plan:',0Ah,0        ; DATA XREF: sub_401D40+17D↓o
.text:00401D0C ; const char aProject[]
.text:00401D0C aProject        db '/.project',0        ; DATA XREF: sub_401D40+227↓o
.text:00401D16 aProject_0      db 'Project: ',0        ; DATA XREF: sub_401D40+24D↓o
.text:00401D20 aDirectory      db 'Directory: ',0      ; DATA XREF: sub_401D40:loc_402010↓o
.text:00401D2C ; const char a29s[]
.text:00401D2C a29s            db '%-29s',0            ; DATA XREF: sub_401D40+2E8↓o
.text:00401D32 aShell          db 'Shell: ',0          ; DATA XREF: sub_401D40+2F8↓o
.text:00401D3A asc_401D3A      db '???',0Ah,0          ; DATA XREF: sub_401D40:loc_4020C1↓o
.text:00401D3F                 align 10h
.text:00401D40
.text:00401D40 ; =============== S U B R O U T I N E =======================================
.text:00401D40
.text:00401D40
.text:00401D40 ; int __cdecl sub_401D40(char *)
.text:00401D40 sub_401D40      proc near               ; CODE XREF: sub_4017F0+31B↑p
.text:00401D40
.text:00401D40 Format          = dword ptr -82Ch
.text:00401D40 Val             = dword ptr -828h
.text:00401D40 ElementCount    = dword ptr -824h
.text:00401D40 Stream          = dword ptr -820h
.text:00401D40 var_81C         = byte ptr -81Ch
.text:00401D40 Buffer          = byte ptr -41Ch
.text:00401D40 arg_0           = dword ptr  4
.text:00401D40
.text:00401D40                 push    ebp
.text:00401D41                 push    edi
.text:00401D42                 push    esi
.text:00401D43                 push    ebx
.text:00401D44                 sub     esp, 81Ch
.text:00401D4A                 mov     edi, [esp+82Ch+arg_0]
.text:00401D51                 mov     [esp+82Ch+Format], edi ; char *
.text:00401D54                 call    sub_405E70
.text:00401D59                 mov     [esp+82Ch+Format], offset aLoginName ; "Login name: "
.text:00401D60                 mov     esi, eax
.text:00401D62                 call    ds:libintl_gettext
.text:00401D68                 mov     [esp+82Ch+Format], eax ; Format
.text:00401D6B                 call    printf
.text:00401D70                 mov     [esp+82Ch+Val], edi
.text:00401D74                 mov     [esp+82Ch+Format], offset Format ; "%-28s"
.text:00401D7B                 call    printf
.text:00401D80                 mov     [esp+82Ch+Format], offset aInRealLife ; "In real life: "
.text:00401D87                 call    ds:libintl_gettext
.text:00401D8D                 mov     [esp+82Ch+Format], eax ; Format
.text:00401D90                 call    printf
.text:00401D95                 test    esi, esi
.text:00401D97                 jz      loc_4020C1
.text:00401D9D                 mov     [esp+82Ch+Val], 2Ch ; ',' ; Val
.text:00401DA5                 mov     edx, [esi+10h]
.text:00401DA8                 mov     [esp+82Ch+Format], edx ; Str
.text:00401DAB                 call    strchr
.text:00401DB0                 test    eax, eax
.text:00401DB2                 jz      short loc_401DB7
.text:00401DB4                 mov     byte ptr [eax], 0
.text:00401DB7
.text:00401DB7 loc_401DB7:                             ; CODE XREF: sub_401D40+72↑j
.text:00401DB7                 mov     edx, [esi]
.text:00401DB9                 mov     [esp+82Ch+Val], edx ; char *
.text:00401DBD                 mov     ebp, [esi+10h]
.text:00401DC0                 mov     [esp+82Ch+Format], ebp ; char *
.text:00401DC3                 call    sub_402350
.text:00401DC8                 mov     [esp+82Ch+Val], eax
.text:00401DCC                 mov     edi, eax
.text:00401DCE                 mov     [esp+82Ch+Format], offset aS_0 ; " %s"
.text:00401DD5                 call    printf
.text:00401DDA                 mov     [esp+82Ch+Format], edi ; Block
.text:00401DDD                 call    free
.text:00401DE2                 mov     ebx, ds:_iob
.text:00401DE8                 mov     ecx, [ebx+24h]
.text:00401DEB                 dec     ecx
.text:00401DEC                 mov     [ebx+24h], ecx
.text:00401DEF                 test    ecx, ecx
.text:00401DF1                 js      loc_4020A3
.text:00401DF7                 mov     ecx, ds:_iob
.text:00401DFD                 mov     eax, [ecx+20h]
.text:00401E00                 mov     byte ptr [eax], 0Ah
.text:00401E03                 inc     dword ptr [ecx+20h]
.text:00401E06
.text:00401E06 loc_401E06:                             ; CODE XREF: sub_401D40+37C↓j
.text:00401E06                 cmp     byte_410015, 0
.text:00401E0D                 jnz     loc_402010
.text:00401E13
.text:00401E13 loc_401E13:                             ; CODE XREF: sub_401D40+340↓j
.text:00401E13                                         ; sub_401D40+35E↓j
.text:00401E13                 cmp     byte_410013, 0
.text:00401E1A                 jnz     loc_401F40
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401D40+2C5↓j
.text:00401E20                 cmp     byte_410014, 0
.text:00401E27                 jnz     short loc_401E70
.text:00401E29
.text:00401E29 loc_401E29:                             ; CODE XREF: sub_401D40+1F5↓j
.text:00401E29                 mov     edx, ds:_iob
.text:00401E2F                 mov     esi, [edx+24h]
.text:00401E32                 dec     esi
.text:00401E33                 mov     [edx+24h], esi
.text:00401E36                 test    esi, esi
.text:00401E38                 js      short loc_401E54
.text:00401E3A                 mov     ecx, ds:_iob
.text:00401E40                 mov     eax, [ecx+20h]
.text:00401E43                 mov     byte ptr [eax], 0Ah
.text:00401E46                 inc     dword ptr [ecx+20h]
.text:00401E49
.text:00401E49 loc_401E49:                             ; CODE XREF: sub_401D40+12D↓j
.text:00401E49                                         ; sub_401D40+39E↓j
.text:00401E49                 add     esp, 81Ch
.text:00401E4F                 pop     ebx
.text:00401E50                 pop     esi
.text:00401E51                 pop     edi
.text:00401E52                 pop     ebp
.text:00401E53                 retn
.text:00401E54 ; ---------------------------------------------------------------------------
.text:00401E54
.text:00401E54 loc_401E54:                             ; CODE XREF: sub_401D40+F8↑j
.text:00401E54                 mov     [esp+82Ch+Format], 0Ah ; Ch
.text:00401E5B                 mov     ebx, ds:_iob
.text:00401E61                 add     ebx, 20h ; ' '
.text:00401E64                 mov     [esp+82Ch+Val], ebx ; File
.text:00401E68                 call    _flsbuf
.text:00401E6D                 jmp     short loc_401E49
.text:00401E6D ; ---------------------------------------------------------------------------
.text:00401E6F                 align 10h
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: sub_401D40+E7↑j
.text:00401E70                 mov     edi, [esi+14h]
.text:00401E73                 mov     [esp+82Ch+Format], edi ; Str
.text:00401E76                 call    strlen
.text:00401E7B                 add     eax, 7
.text:00401E7E                 mov     [esp+82Ch+Format], eax ; size_t
.text:00401E81                 call    sub_404400
.text:00401E86                 mov     ebx, [esi+14h]
.text:00401E89                 mov     edi, eax
.text:00401E8B                 mov     [esp+82Ch+Format], eax ; Destination
.text:00401E8E                 mov     [esp+82Ch+Val], ebx ; Source
.text:00401E92                 call    strcpy
.text:00401E97                 mov     [esp+82Ch+Val], offset Source ; "/.plan"
.text:00401E9F                 mov     [esp+82Ch+Format], edi ; Destination
.text:00401EA2                 call    strcat
.text:00401EA7                 mov     [esp+82Ch+Val], offset aR ; "r"
.text:00401EAF                 mov     [esp+82Ch+Format], edi ; FileName
.text:00401EB2                 call    fopen
.text:00401EB7                 test    eax, eax
.text:00401EB9                 mov     ebx, eax
.text:00401EBB                 jz      short loc_401F2D
.text:00401EBD                 mov     [esp+82Ch+Format], offset aPlan_0 ; "Plan:\n"
.text:00401EC4                 lea     esi, [esp+82Ch+var_81C]
.text:00401EC8                 call    ds:libintl_gettext
.text:00401ECE                 mov     [esp+82Ch+Format], eax ; Format
.text:00401ED1                 call    printf
.text:00401ED6                 lea     esi, [esi+0]
.text:00401ED9                 lea     edi, [edi+0]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401D40+1E3↓j
.text:00401EE0                 mov     [esp+82Ch+Stream], ebx ; Stream
.text:00401EE4                 mov     [esp+82Ch+ElementCount], 400h ; ElementCount
.text:00401EEC                 mov     [esp+82Ch+Val], 1 ; ElementSize
.text:00401EF4                 mov     [esp+82Ch+Format], esi ; Buffer
.text:00401EF7                 call    fread
.text:00401EFC                 test    eax, eax
.text:00401EFE                 mov     edx, eax
.text:00401F00                 jz      short loc_401F25
.text:00401F02                 mov     [esp+82Ch+ElementCount], edx ; ElementCount
.text:00401F06                 mov     ebp, ds:_iob
.text:00401F0C                 mov     [esp+82Ch+Val], 1 ; ElementSize
.text:00401F14                 mov     [esp+82Ch+Format], esi ; Buffer
.text:00401F17                 add     ebp, 20h ; ' '
.text:00401F1A                 mov     [esp+82Ch+Stream], ebp ; Stream
.text:00401F1E                 call    fwrite
.text:00401F23                 jmp     short loc_401EE0
.text:00401F25 ; ---------------------------------------------------------------------------
.text:00401F25
.text:00401F25 loc_401F25:                             ; CODE XREF: sub_401D40+1C0↑j
.text:00401F25                 mov     [esp+82Ch+Format], ebx ; Stream
.text:00401F28                 call    fclose
.text:00401F2D
.text:00401F2D loc_401F2D:                             ; CODE XREF: sub_401D40+17B↑j
.text:00401F2D                 mov     [esp+82Ch+Format], edi ; Block
.text:00401F30                 call    free
.text:00401F35                 jmp     loc_401E29
.text:00401F35 ; ---------------------------------------------------------------------------
.text:00401F3A                 align 10h
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_401D40+DA↑j
.text:00401F40                 mov     ebp, [esi+14h]
.text:00401F43                 mov     [esp+82Ch+Format], ebp ; Str
.text:00401F46                 call    strlen
.text:00401F4B                 add     eax, 0Ah
.text:00401F4E                 mov     [esp+82Ch+Format], eax ; size_t
.text:00401F51                 call    sub_404400
.text:00401F56                 mov     edx, [esi+14h]
.text:00401F59                 mov     ebp, eax
.text:00401F5B                 mov     [esp+82Ch+Format], eax ; Destination
.text:00401F5E                 mov     [esp+82Ch+Val], edx ; Source
.text:00401F62                 call    strcpy
.text:00401F67                 mov     [esp+82Ch+Val], offset aProject ; "/.project"
.text:00401F6F                 mov     [esp+82Ch+Format], ebp ; Destination
.text:00401F72                 call    strcat
.text:00401F77                 mov     [esp+82Ch+Val], offset aR ; "r"
.text:00401F7F                 mov     [esp+82Ch+Format], ebp ; FileName
.text:00401F82                 call    fopen
.text:00401F87                 test    eax, eax
.text:00401F89                 mov     ebx, eax
.text:00401F8B                 jz      short loc_401FFD
.text:00401F8D                 mov     [esp+82Ch+Format], offset aProject_0 ; "Project: "
.text:00401F94                 lea     edi, [esp+82Ch+Buffer]
.text:00401F9B                 call    ds:libintl_gettext
.text:00401FA1                 mov     [esp+82Ch+Format], eax ; Format
.text:00401FA4                 call    printf
.text:00401FA9                 lea     esi, [esi+0]
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401D40+2B3↓j
.text:00401FB0                 mov     [esp+82Ch+Stream], ebx ; Stream
.text:00401FB4                 mov     [esp+82Ch+ElementCount], 400h ; ElementCount
.text:00401FBC                 mov     [esp+82Ch+Val], 1 ; ElementSize
.text:00401FC4                 mov     [esp+82Ch+Format], edi ; Buffer
.text:00401FC7                 call    fread
.text:00401FCC                 test    eax, eax
.text:00401FCE                 mov     edx, eax
.text:00401FD0                 jz      short loc_401FF5
.text:00401FD2                 mov     [esp+82Ch+ElementCount], edx ; ElementCount
.text:00401FD6                 mov     ecx, ds:_iob
.text:00401FDC                 mov     [esp+82Ch+Val], 1 ; ElementSize
.text:00401FE4                 mov     [esp+82Ch+Format], edi ; Buffer
.text:00401FE7                 add     ecx, 20h ; ' '
.text:00401FEA                 mov     [esp+82Ch+Stream], ecx ; Stream
.text:00401FEE                 call    fwrite
.text:00401FF3                 jmp     short loc_401FB0
.text:00401FF5 ; ---------------------------------------------------------------------------
.text:00401FF5
.text:00401FF5 loc_401FF5:                             ; CODE XREF: sub_401D40+290↑j
.text:00401FF5                 mov     [esp+82Ch+Format], ebx ; Stream
.text:00401FF8                 call    fclose
.text:00401FFD
.text:00401FFD loc_401FFD:                             ; CODE XREF: sub_401D40+24B↑j
.text:00401FFD                 mov     [esp+82Ch+Format], ebp ; Block
.text:00402000                 call    free
.text:00402005                 jmp     loc_401E20
.text:00402005 ; ---------------------------------------------------------------------------
.text:0040200A                 align 10h
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401D40+CD↑j
.text:00402010                 mov     [esp+82Ch+Format], offset aDirectory ; "Directory: "
.text:00402017                 call    ds:libintl_gettext
.text:0040201D                 mov     [esp+82Ch+Format], eax ; Format
.text:00402020                 call    printf
.text:00402025                 mov     ecx, [esi+14h]
.text:00402028                 mov     [esp+82Ch+Format], offset a29s ; "%-29s"
.text:0040202F                 mov     [esp+82Ch+Val], ecx
.text:00402033                 call    printf
.text:00402038                 mov     [esp+82Ch+Format], offset aShell ; "Shell: "
.text:0040203F                 call    ds:libintl_gettext
.text:00402045                 mov     [esp+82Ch+Format], eax ; Format
.text:00402048                 call    printf
.text:0040204D                 mov     edx, [esi+18h]
.text:00402050                 mov     [esp+82Ch+Format], offset aS_0 ; " %s"
.text:00402057                 mov     [esp+82Ch+Val], edx
.text:0040205B                 call    printf
.text:00402060                 mov     ebp, ds:_iob
.text:00402066                 mov     edi, [ebp+24h]
.text:00402069                 dec     edi
.text:0040206A                 mov     [ebp+24h], edi
.text:0040206D                 test    edi, edi
.text:0040206F                 js      short loc_402085
.text:00402071                 mov     ebx, ds:_iob
.text:00402077                 mov     eax, [ebx+20h]
.text:0040207A                 mov     byte ptr [eax], 0Ah
.text:0040207D                 inc     dword ptr [ebx+20h]
.text:00402080                 jmp     loc_401E13
.text:00402085 ; ---------------------------------------------------------------------------
.text:00402085
.text:00402085 loc_402085:                             ; CODE XREF: sub_401D40+32F↑j
.text:00402085                 mov     [esp+82Ch+Format], 0Ah ; Ch
.text:0040208C                 mov     edi, ds:_iob
.text:00402092                 add     edi, 20h ; ' '
.text:00402095                 mov     [esp+82Ch+Val], edi ; File
.text:00402099                 call    _flsbuf
.text:0040209E                 jmp     loc_401E13
.text:004020A3 ; ---------------------------------------------------------------------------
.text:004020A3
.text:004020A3 loc_4020A3:                             ; CODE XREF: sub_401D40+B1↑j
.text:004020A3                 mov     [esp+82Ch+Format], 0Ah ; Ch
.text:004020AA                 mov     ebx, ds:_iob
.text:004020B0                 add     ebx, 20h ; ' '
.text:004020B3                 mov     [esp+82Ch+Val], ebx ; File
.text:004020B7                 call    _flsbuf
.text:004020BC                 jmp     loc_401E06
.text:004020C1 ; ---------------------------------------------------------------------------
.text:004020C1
.text:004020C1 loc_4020C1:                             ; CODE XREF: sub_401D40+57↑j
.text:004020C1                 mov     [esp+82Ch+Format], offset asc_401D3A ; "???\n"
.text:004020C8                 call    ds:libintl_gettext
.text:004020CE                 mov     [esp+82Ch+Format], offset aS_0 ; " %s"
.text:004020D5                 mov     [esp+82Ch+Val], eax
.text:004020D9                 call    printf
.text:004020DE                 jmp     loc_401E49
.text:004020DE sub_401D40      endp
.text:004020DE
.text:004020DE ; ---------------------------------------------------------------------------
.text:004020E3 aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: sub_402140+23↓o
.text:004020F2 aLogin          db 'Login',0            ; DATA XREF: sub_402140:loc_402200↓o
.text:004020F8 ; const char a8s[]
.text:004020F8 a8s             db '%-8s',0             ; DATA XREF: sub_402140+CD↓o
.text:004020FD aTty            db ' TTY',0             ; DATA XREF: sub_402140:loc_40222A↓o
.text:00402102 ; const char a9s[]
.text:00402102 a9s             db ' %-9s',0            ; DATA XREF: sub_402140+F7↓o
.text:00402108 aWhen           db 'When',0             ; DATA XREF: sub_402140:loc_402254↓o
.text:0040210D ; const char aS_1[]
.text:0040210D aS_1            db ' %-*s',0            ; DATA XREF: sub_402140+121↓o
.text:00402113 aWhere          db 'Where',0            ; DATA XREF: sub_402140:loc_4022C7↓o
.text:00402119 aIdle           db 'Idle',0             ; DATA XREF: sub_402140:loc_4022E6↓o
.text:0040211E ; const char a6s[]
.text:0040211E a6s             db ' %-6s',0            ; DATA XREF: sub_402140+1B3↓o
.text:0040211E                                         ; sub_4024B0:loc_402623↓o
.text:00402124 aName           db 'Name',0             ; DATA XREF: sub_402140:loc_402308↓o
.text:00402129 ; const char a19s[]
.text:00402129 a19s            db ' %-19s',0           ; DATA XREF: sub_402140+1D5↓o
.text:00402130 aBEHM           db '%b %e %H:%M',0      ; DATA XREF: sub_402140:loc_402330↓o
.text:0040213C                 align 10h
.text:00402140
.text:00402140 ; =============== S U B R O U T I N E =======================================
.text:00402140
.text:00402140
.text:00402140 sub_402140      proc near               ; CODE XREF: sub_4017F0+389↑p
.text:00402140
.text:00402140 Str1            = dword ptr -1Ch
.text:00402140 Str2            = dword ptr -18h
.text:00402140 MaxCount        = dword ptr -14h
.text:00402140 arg_0           = dword ptr  4
.text:00402140 arg_4           = dword ptr  8
.text:00402140 arg_8           = dword ptr  0Ch
.text:00402140 arg_C           = dword ptr  10h
.text:00402140
.text:00402140                 push    ebp
.text:00402141                 push    edi
.text:00402142                 push    esi
.text:00402143                 push    ebx
.text:00402144                 sub     esp, 0Ch
.text:00402147                 mov     edi, [esp+1Ch+arg_0]
.text:0040214B                 mov     [esp+1Ch+Str1], 5
.text:00402152                 mov     ebx, [esp+1Ch+arg_4]
.text:00402156                 call    sub_4041C0
.text:0040215B                 test    al, al
.text:0040215D                 jz      loc_402330
.text:00402163                 mov     eax, offset aYMDHM ; "%Y-%m-%d %H:%M"
.text:00402168                 mov     ds:dword_411050, eax
.text:0040216D                 mov     eax, 10h
.text:00402172                 mov     ds:dword_411060, eax
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_402140+206↓j
.text:00402177                 cmp     byte_410011, 0
.text:0040217E                 jnz     loc_402200
.text:00402184
.text:00402184 loc_402184:                             ; CODE XREF: sub_402140+5C↓j
.text:00402184                                         ; sub_402140+164↓j ...
.text:00402184                 dec     edi
.text:00402185                 cmp     edi, 0FFFFFFFFh
.text:00402188                 jz      short loc_4021F2
.text:0040218A                 cmp     byte ptr [ebx+2Ch], 0
.text:0040218E                 jz      short loc_402196
.text:00402190                 cmp     word ptr [ebx], 7
.text:00402194                 jz      short loc_4021A0
.text:00402196
.text:00402196 loc_402196:                             ; CODE XREF: sub_402140+4E↑j
.text:00402196                                         ; sub_402140+6E↓j ...
.text:00402196                 add     ebx, 180h
.text:0040219C                 jmp     short loc_402184
.text:0040219C ; ---------------------------------------------------------------------------
.text:0040219E                 align 10h
.text:004021A0
.text:004021A0 loc_4021A0:                             ; CODE XREF: sub_402140+54↑j
.text:004021A0                 mov     ebp, [esp+1Ch+arg_8]
.text:004021A4                 test    ebp, ebp
.text:004021A6                 jz      short loc_4021E8
.text:004021A8                 xor     esi, esi
.text:004021AA                 cmp     esi, [esp+1Ch+arg_8]
.text:004021AE                 jge     short loc_402196
.text:004021B0                 lea     ebp, [ebx+2Ch]
.text:004021B3                 lea     esi, [esi+0]
.text:004021B9                 lea     edi, [edi+0]
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_402140+A4↓j
.text:004021C0                 mov     [esp+1Ch+MaxCount], 20h ; ' ' ; MaxCount
.text:004021C8                 mov     eax, [esp+1Ch+arg_C]
.text:004021CC                 mov     ecx, [eax+esi*4]
.text:004021CF                 mov     [esp+1Ch+Str1], ebp ; Str1
.text:004021D2                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:004021D6                 call    strncmp
.text:004021DB                 test    eax, eax
.text:004021DD                 jz      short loc_4021E8
.text:004021DF                 inc     esi
.text:004021E0                 cmp     esi, [esp+1Ch+arg_8]
.text:004021E4                 jl      short loc_4021C0
.text:004021E6                 jmp     short loc_402196
.text:004021E8 ; ---------------------------------------------------------------------------
.text:004021E8
.text:004021E8 loc_4021E8:                             ; CODE XREF: sub_402140+66↑j
.text:004021E8                                         ; sub_402140+9D↑j
.text:004021E8                 mov     [esp+1Ch+Str1], ebx
.text:004021EB                 call    sub_4024B0
.text:004021F0                 jmp     short loc_402196
.text:004021F2 ; ---------------------------------------------------------------------------
.text:004021F2
.text:004021F2 loc_4021F2:                             ; CODE XREF: sub_402140+48↑j
.text:004021F2                 add     esp, 0Ch
.text:004021F5                 pop     ebx
.text:004021F6                 pop     esi
.text:004021F7                 pop     edi
.text:004021F8                 pop     ebp
.text:004021F9                 retn
.text:004021F9 ; ---------------------------------------------------------------------------
.text:004021FA                 align 10h
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_402140+3E↑j
.text:00402200                 mov     [esp+1Ch+Str1], offset aLogin ; "Login"
.text:00402207                 call    ds:libintl_gettext
.text:0040220D                 mov     [esp+1Ch+Str1], offset a8s ; "%-8s"
.text:00402214                 mov     [esp+1Ch+Str2], eax
.text:00402218                 call    printf
.text:0040221D                 cmp     byte_410012, 0
.text:00402224                 jnz     loc_402308
.text:0040222A
.text:0040222A loc_40222A:                             ; CODE XREF: sub_402140+1E5↓j
.text:0040222A                 mov     [esp+1Ch+Str1], offset aTty ; " TTY"
.text:00402231                 call    ds:libintl_gettext
.text:00402237                 mov     [esp+1Ch+Str1], offset a9s ; " %-9s"
.text:0040223E                 mov     [esp+1Ch+Str2], eax
.text:00402242                 call    printf
.text:00402247                 cmp     byte_410010, 0
.text:0040224E                 jnz     loc_4022E6
.text:00402254
.text:00402254 loc_402254:                             ; CODE XREF: sub_402140+1C3↓j
.text:00402254                 mov     [esp+1Ch+Str1], offset aWhen ; "When"
.text:0040225B                 call    ds:libintl_gettext
.text:00402261                 mov     [esp+1Ch+Str1], offset aS_1 ; " %-*s"
.text:00402268                 mov     esi, ds:dword_411060
.text:0040226E                 mov     [esp+1Ch+MaxCount], eax
.text:00402272                 mov     [esp+1Ch+Str2], esi
.text:00402276                 call    printf
.text:0040227B                 cmp     byte_410017, 0
.text:00402282                 jnz     short loc_4022C7
.text:00402284
.text:00402284 loc_402284:                             ; CODE XREF: sub_402140+1A4↓j
.text:00402284                 mov     ecx, ds:_iob
.text:0040228A                 mov     ebp, [ecx+24h]
.text:0040228D                 dec     ebp
.text:0040228E                 mov     [ecx+24h], ebp
.text:00402291                 test    ebp, ebp
.text:00402293                 js      short loc_4022A9
.text:00402295                 mov     esi, ds:_iob
.text:0040229B                 mov     eax, [esi+20h]
.text:0040229E                 mov     byte ptr [eax], 0Ah
.text:004022A1                 inc     dword ptr [esi+20h]
.text:004022A4                 jmp     loc_402184
.text:004022A9 ; ---------------------------------------------------------------------------
.text:004022A9
.text:004022A9 loc_4022A9:                             ; CODE XREF: sub_402140+153↑j
.text:004022A9                 mov     [esp+1Ch+Str1], 0Ah ; Ch
.text:004022B0                 mov     edx, ds:_iob
.text:004022B6                 add     edx, 20h ; ' '
.text:004022B9                 mov     [esp+1Ch+Str2], edx ; File
.text:004022BD                 call    _flsbuf
.text:004022C2                 jmp     loc_402184
.text:004022C7 ; ---------------------------------------------------------------------------
.text:004022C7
.text:004022C7 loc_4022C7:                             ; CODE XREF: sub_402140+142↑j
.text:004022C7                 mov     [esp+1Ch+Str1], offset aWhere ; "Where"
.text:004022CE                 call    ds:libintl_gettext
.text:004022D4                 mov     [esp+1Ch+Str1], offset aS_0 ; " %s"
.text:004022DB                 mov     [esp+1Ch+Str2], eax
.text:004022DF                 call    printf
.text:004022E4                 jmp     short loc_402284
.text:004022E6 ; ---------------------------------------------------------------------------
.text:004022E6
.text:004022E6 loc_4022E6:                             ; CODE XREF: sub_402140+10E↑j
.text:004022E6                 mov     [esp+1Ch+Str1], offset aIdle ; "Idle"
.text:004022ED                 call    ds:libintl_gettext
.text:004022F3                 mov     [esp+1Ch+Str1], offset a6s ; " %-6s"
.text:004022FA                 mov     [esp+1Ch+Str2], eax
.text:004022FE                 call    printf
.text:00402303                 jmp     loc_402254
.text:00402308 ; ---------------------------------------------------------------------------
.text:00402308
.text:00402308 loc_402308:                             ; CODE XREF: sub_402140+E4↑j
.text:00402308                 mov     [esp+1Ch+Str1], offset aName ; "Name"
.text:0040230F                 call    ds:libintl_gettext
.text:00402315                 mov     [esp+1Ch+Str1], offset a19s ; " %-19s"
.text:0040231C                 mov     [esp+1Ch+Str2], eax
.text:00402320                 call    printf
.text:00402325                 jmp     loc_40222A
.text:00402325 ; ---------------------------------------------------------------------------
.text:0040232A                 align 10h
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_402140+1D↑j
.text:00402330                 mov     edx, offset aBEHM ; "%b %e %H:%M"
.text:00402335                 mov     ecx, 0Ch
.text:0040233A                 mov     ds:dword_411050, edx
.text:00402340                 mov     ds:dword_411060, ecx
.text:00402346                 jmp     loc_402177
.text:00402346 sub_402140      endp
.text:00402346
.text:00402346 ; ---------------------------------------------------------------------------
.text:0040234B                 align 10h
.text:00402350
.text:00402350 ; =============== S U B R O U T I N E =======================================
.text:00402350
.text:00402350
.text:00402350 ; int __cdecl sub_402350(char *, char *)
.text:00402350 sub_402350      proc near               ; CODE XREF: sub_401D40+83↑p
.text:00402350                                         ; sub_4024B0+397↓p
.text:00402350
.text:00402350 Str             = dword ptr -2Ch
.text:00402350 Type            = dword ptr -28h
.text:00402350 var_18          = dword ptr -18h
.text:00402350 var_14          = dword ptr -14h
.text:00402350 arg_0           = dword ptr  4
.text:00402350 arg_4           = dword ptr  8
.text:00402350
.text:00402350                 push    ebp
.text:00402351                 push    edi
.text:00402352                 push    esi
.text:00402353                 push    ebx
.text:00402354                 sub     esp, 1Ch
.text:00402357                 xor     ebx, ebx
.text:00402359                 mov     edi, [esp+2Ch+arg_0]
.text:0040235D                 mov     [esp+2Ch+Str], edi ; Str
.text:00402360                 call    strlen
.text:00402365                 lea     esi, [eax+1]
.text:00402368                 mov     eax, edi
.text:0040236A                 lea     esi, [esi+0]
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_402350+2F↓j
.text:00402370                 movzx   edx, byte ptr [eax]
.text:00402373                 cmp     dl, 26h ; '&'
.text:00402376                 jz      loc_402455
.text:0040237C
.text:0040237C loc_40237C:                             ; CODE XREF: sub_402350+106↓j
.text:0040237C                 inc     eax
.text:0040237D                 test    dl, dl
.text:0040237F                 jnz     short loc_402370
.text:00402381                 test    ebx, ebx
.text:00402383                 jz      short loc_4023BA
.text:00402385                 mov     ecx, [esp+2Ch+arg_4]
.text:00402389                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040238C                 call    strlen
.text:00402391                 mov     [esp+2Ch+var_18], eax
.text:00402395                 mov     ebp, eax
.text:00402397                 mov     edx, 0FFFFFFFFh
.text:0040239C                 imul    ebp, ebx
.text:0040239F                 mov     eax, ebp
.text:004023A1                 sub     eax, ebx
.text:004023A3                 add     esi, eax
.text:004023A5                 mov     eax, edx
.text:004023A7                 xor     edx, edx
.text:004023A9                 div     ebx
.text:004023AB                 cmp     eax, [esp+2Ch+var_18]
.text:004023AF                 jb      short loc_4023B5
.text:004023B1                 cmp     esi, ebp
.text:004023B3                 jnb     short loc_4023BA
.text:004023B5
.text:004023B5 loc_4023B5:                             ; CODE XREF: sub_402350+5F↑j
.text:004023B5                 call    sub_4046B0
.text:004023BA ; ---------------------------------------------------------------------------
.text:004023BA
.text:004023BA loc_4023BA:                             ; CODE XREF: sub_402350+33↑j
.text:004023BA                                         ; sub_402350+63↑j
.text:004023BA                 mov     [esp+2Ch+Str], esi ; size_t
.text:004023BD                 call    sub_404400
.text:004023C2                 mov     [esp+2Ch+var_14], eax
.text:004023C6                 mov     esi, eax
.text:004023C8                 movzx   eax, byte ptr [edi]
.text:004023CB                 test    al, al
.text:004023CD                 jz      short loc_4023DF
.text:004023CF                 nop
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_402350+8D↓j
.text:004023D0                 cmp     al, 26h ; '&'
.text:004023D2                 jz      short loc_4023EE
.text:004023D4                 mov     [esi], al
.text:004023D6                 inc     esi
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_402350+CB↓j
.text:004023D7                 inc     edi
.text:004023D8                 movzx   eax, byte ptr [edi]
.text:004023DB                 test    al, al
.text:004023DD                 jnz     short loc_4023D0
.text:004023DF
.text:004023DF loc_4023DF:                             ; CODE XREF: sub_402350+7D↑j
.text:004023DF                 mov     byte ptr [esi], 0
.text:004023E2                 mov     eax, [esp+2Ch+var_14]
.text:004023E6                 add     esp, 1Ch
.text:004023E9                 pop     ebx
.text:004023EA                 pop     esi
.text:004023EB                 pop     edi
.text:004023EC                 pop     ebp
.text:004023ED                 retn
.text:004023EE ; ---------------------------------------------------------------------------
.text:004023EE
.text:004023EE loc_4023EE:                             ; CODE XREF: sub_402350+82↑j
.text:004023EE                 mov     ebx, ds:__mb_cur_max
.text:004023F4                 mov     ebp, [esp+2Ch+arg_4]
.text:004023F8                 cmp     dword ptr [ebx], 1
.text:004023FB                 movsx   edx, byte ptr [ebp+0]
.text:004023FF                 jz      short loc_402444
.text:00402401                 mov     [esp+2Ch+Type], 2 ; Type
.text:00402409                 mov     [esp+2Ch+Str], edx ; C
.text:0040240C                 call    _isctype
.text:00402411
.text:00402411 loc_402411:                             ; CODE XREF: sub_402350+103↓j
.text:00402411                 test    eax, eax
.text:00402413                 jnz     short loc_402423
.text:00402415
.text:00402415 loc_402415:                             ; CODE XREF: sub_402350+D1↓j
.text:00402415                 movzx   eax, byte ptr [ebp+0]
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_402350+F2↓j
.text:00402419                 test    al, al
.text:0040241B                 jz      short loc_4023D7
.text:0040241D                 mov     [esi], al
.text:0040241F                 inc     ebp
.text:00402420                 inc     esi
.text:00402421                 jmp     short loc_402415
.text:00402423 ; ---------------------------------------------------------------------------
.text:00402423
.text:00402423 loc_402423:                             ; CODE XREF: sub_402350+C3↑j
.text:00402423                 mov     ecx, [esp+2Ch+arg_4]
.text:00402427                 mov     ebx, esi
.text:00402429                 inc     esi
.text:0040242A                 movsx   ebp, byte ptr [ecx]
.text:0040242D                 mov     [esp+2Ch+Str], ebp ; C
.text:00402430                 mov     ebp, ecx
.text:00402432                 inc     ebp
.text:00402433                 call    toupper
.text:00402438                 mov     [ebx], al
.text:0040243A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040243E                 movzx   eax, byte ptr [ecx+1]
.text:00402442                 jmp     short loc_402419
.text:00402444 ; ---------------------------------------------------------------------------
.text:00402444
.text:00402444 loc_402444:                             ; CODE XREF: sub_402350+AF↑j
.text:00402444                 mov     ebx, ds:_pctype
.text:0040244A                 mov     ecx, [ebx]
.text:0040244C                 movzx   eax, word ptr [ecx+edx*2]
.text:00402450                 and     eax, 2
.text:00402453                 jmp     short loc_402411
.text:00402455 ; ---------------------------------------------------------------------------
.text:00402455
.text:00402455 loc_402455:                             ; CODE XREF: sub_402350+26↑j
.text:00402455                 inc     ebx
.text:00402456                 jmp     loc_40237C
.text:00402456 sub_402350      endp
.text:00402456
.text:00402456 ; ---------------------------------------------------------------------------
.text:0040245B ; const char a8S[]
.text:0040245B a8S             db '%-8.*s',0           ; DATA XREF: sub_4024B0+A5↓o
.text:00402462 ; const char aC8S[]
.text:00402462 aC8S            db ' %c%-8.*s',0        ; DATA XREF: sub_4024B0+CF↓o
.text:0040246C asc_40246C      db '     ',0            ; DATA XREF: sub_4024B0+105↓o
.text:00402472 ; const char a02d02d[]
.text:00402472 a02d02d         db '%02d:%02d',0        ; DATA XREF: sub_4024B0+11B↓o
.text:0040247C ; const char aSS[]
.text:0040247C aSS             db ' %s:%s',0           ; DATA XREF: sub_4024B0+282↓o
.text:00402483 ; const char aLud[]
.text:00402483 aLud            db '%lud',0             ; DATA XREF: sub_4024B0:loc_402793↓o
.text:00402488 asc_402488      db '???',0              ; DATA XREF: sub_4024B0:loc_4027E0↓o
.text:0040248C ; const char a1919s[]
.text:0040248C a1919s          db ' %-19.19s',0        ; DATA XREF: sub_4024B0+3A2↓o
.text:00402496 asc_402496      db '        ???',0      ; DATA XREF: sub_4024B0:loc_40286B↓o
.text:004024A2 ; const char a19s_0[]
.text:004024A2 a19s_0          db ' %19s',0            ; DATA XREF: sub_4024B0+3C3↓o
.text:004024A8                 align 10h
.text:004024B0
.text:004024B0 ; =============== S U B R O U T I N E =======================================
.text:004024B0
.text:004024B0
.text:004024B0 sub_4024B0      proc near               ; CODE XREF: sub_402140+AB↑p
.text:004024B0
.text:004024B0 Destination     = dword ptr -21Ch
.text:004024B0 Source          = dword ptr -218h
.text:004024B0 Count           = dword ptr -214h
.text:004024B0 Tm              = dword ptr -210h
.text:004024B0 var_201         = byte ptr -201h
.text:004024B0 Time            = dword ptr -200h
.text:004024B0 Str             = byte ptr -1FCh
.text:004024B0 var_FC          = byte ptr -0FCh
.text:004024B0 var_EC          = byte ptr -0ECh
.text:004024B0 var_CC          = byte ptr -0CCh
.text:004024B0 var_BC          = byte ptr -0BCh
.text:004024B0 var_B8          = byte ptr -0B8h
.text:004024B0 var_9C          = byte ptr -9Ch
.text:004024B0 var_97          = byte ptr -97h
.text:004024B0 var_8C          = dword ptr -8Ch
.text:004024B0 var_54          = dword ptr -54h
.text:004024B0 arg_0           = dword ptr  4
.text:004024B0
.text:004024B0                 push    ebp
.text:004024B1                 push    edi
.text:004024B2                 push    esi
.text:004024B3                 push    ebx
.text:004024B4                 sub     esp, 20Ch
.text:004024BA                 mov     ebp, [esp+21Ch+arg_0]
.text:004024C1                 cmp     byte ptr [ebp+8], 2Fh ; '/'
.text:004024C5                 jz      loc_4028A0
.text:004024CB                 mov     [esp+21Ch+Count], 20h ; ' ' ; Count
.text:004024D3                 mov     edx, 2Fh ; '/'
.text:004024D8                 mov     ecx, 7665642Fh
.text:004024DD                 mov     word ptr [esp+21Ch+var_B8], dx
.text:004024E5                 lea     esi, [ebp+8]
.text:004024E8                 lea     edx, [esp+21Ch+var_B8+1]
.text:004024EF                 mov     dword ptr [esp+21Ch+var_BC], ecx
.text:004024F6                 lea     ebx, [esp+21Ch+var_BC]
.text:004024FD                 mov     [esp+21Ch+Source], esi ; Source
.text:00402501                 mov     [esp+21Ch+Destination], edx ; Destination
.text:00402504                 call    strncpy
.text:00402509                 mov     [esp+21Ch+var_97], 0
.text:00402511
.text:00402511 loc_402511:                             ; CODE XREF: sub_4024B0+416↓j
.text:00402511                 mov     [esp+21Ch+Destination], ebx ; char *
.text:00402514                 lea     edi, [esp+21Ch+var_8C]
.text:0040251B                 mov     [esp+21Ch+Source], edi ; int
.text:0040251F                 call    sub_405D80
.text:00402524                 test    eax, eax
.text:00402526                 jnz     loc_402890
.text:0040252C                 test    byte ptr [esp+21Ch+var_8C], 10h
.text:00402534                 jz      loc_402884
.text:0040253A                 mov     [esp+21Ch+var_201], 20h ; ' '
.text:0040253F
.text:0040253F loc_40253F:                             ; CODE XREF: sub_4024B0+3D9↓j
.text:0040253F                 mov     edi, [esp+21Ch+var_54]
.text:00402546
.text:00402546 loc_402546:                             ; CODE XREF: sub_4024B0+3E7↓j
.text:00402546                 mov     [esp+21Ch+Source], 20h ; ' '
.text:0040254E                 lea     ebx, [ebp+2Ch]
.text:00402551                 mov     [esp+21Ch+Count], ebx
.text:00402555                 mov     [esp+21Ch+Destination], offset a8S ; "%-8.*s"
.text:0040255C                 call    printf
.text:00402561                 cmp     byte_410012, 0
.text:00402568                 jnz     loc_4027F0
.text:0040256E
.text:0040256E loc_40256E:                             ; CODE XREF: sub_4024B0+3B6↓j
.text:0040256E                                         ; sub_4024B0+3CF↓j
.text:0040256E                 movsx   ebx, [esp+21Ch+var_201]
.text:00402573                 mov     [esp+21Ch+Tm], esi
.text:00402577                 mov     [esp+21Ch+Count], 20h ; ' '
.text:0040257F                 mov     [esp+21Ch+Destination], offset aC8S ; " %c%-8.*s"
.text:00402586                 mov     [esp+21Ch+Source], ebx
.text:0040258A                 call    printf
.text:0040258F                 cmp     byte_410010, 0
.text:00402596                 jz      loc_40262F
.text:0040259C                 test    edi, edi
.text:0040259E                 jz      loc_4027E0
.text:004025A4                 mov     eax, ds:Time
.text:004025A9                 test    eax, eax
.text:004025AB                 jz      loc_4027C5
.text:004025B1
.text:004025B1 loc_4025B1:                             ; CODE XREF: sub_4024B0+326↓j
.text:004025B1                 mov     ecx, eax
.text:004025B3                 sub     ecx, edi
.text:004025B5                 mov     eax, offset asc_40246C ; "     "
.text:004025BA                 cmp     ecx, 3Bh ; ';'
.text:004025BD                 jle     short loc_40261F
.text:004025BF                 cmp     ecx, 1517Fh
.text:004025C5                 jg      loc_402793
.text:004025CB                 mov     [esp+21Ch+Source], offset a02d02d ; "%02d:%02d"
.text:004025D3                 mov     eax, 91A2B3C5h
.text:004025D8                 mov     edi, ecx
.text:004025DA                 imul    ecx
.text:004025DC                 mov     ebx, 88888889h
.text:004025E1                 mov     [esp+21Ch+Destination], offset Buffer ; Buffer
.text:004025E8                 sar     edi, 1Fh
.text:004025EB                 lea     esi, [ecx+edx]
.text:004025EE                 sar     esi, 0Bh
.text:004025F1                 sub     esi, edi
.text:004025F3                 mov     edx, esi
.text:004025F5                 mov     [esp+21Ch+Count], esi
.text:004025F9                 imul    edx, 0E10h
.text:004025FF                 sub     ecx, edx
.text:00402601                 mov     eax, ecx
.text:00402603                 mov     edi, ecx
.text:00402605                 sar     edi, 1Fh
.text:00402608                 imul    ebx
.text:0040260A                 add     edx, ecx
.text:0040260C                 sar     edx, 5
.text:0040260F                 sub     edx, edi
.text:00402611                 mov     [esp+21Ch+Tm], edx
.text:00402615                 call    sprintf
.text:0040261A
.text:0040261A loc_40261A:                             ; CODE XREF: sub_4024B0+310↓j
.text:0040261A                 mov     eax, offset Buffer
.text:0040261F
.text:0040261F loc_40261F:                             ; CODE XREF: sub_4024B0+10D↑j
.text:0040261F                 mov     [esp+21Ch+Source], eax
.text:00402623
.text:00402623 loc_402623:                             ; CODE XREF: sub_4024B0+338↓j
.text:00402623                 mov     [esp+21Ch+Destination], offset a6s ; " %-6s"
.text:0040262A                 call    printf
.text:0040262F
.text:0040262F loc_40262F:                             ; CODE XREF: sub_4024B0+E6↑j
.text:0040262F                 mov     edx, [ebp+154h]
.text:00402635                 lea     ecx, [esp+21Ch+Time]
.text:00402639                 mov     [esp+21Ch+Destination], ecx ; Time
.text:0040263C                 mov     [esp+21Ch+Time], edx
.text:00402640                 call    localtime
.text:00402645                 test    eax, eax
.text:00402647                 jz      loc_402775
.text:0040264D                 mov     [esp+21Ch+Tm], eax ; Tm
.text:00402651                 mov     edi, ds:dword_411050
.text:00402657                 mov     [esp+21Ch+Source], 22h ; '"' ; SizeInBytes
.text:0040265F                 mov     [esp+21Ch+Destination], offset byte_411020 ; Buffer
.text:00402666                 mov     [esp+21Ch+Count], edi ; Format
.text:0040266A                 call    strftime
.text:0040266F                 mov     eax, offset byte_411020
.text:00402674
.text:00402674 loc_402674:                             ; CODE XREF: sub_4024B0+2DE↓j
.text:00402674                 mov     [esp+21Ch+Source], eax
.text:00402678                 mov     [esp+21Ch+Destination], offset aS_0 ; " %s"
.text:0040267F                 call    printf
.text:00402684                 cmp     byte_410017, 0
.text:0040268B                 jz      short loc_402693
.text:0040268D                 cmp     byte ptr [ebp+4Ch], 0
.text:00402691                 jnz     short loc_4026E0
.text:00402693
.text:00402693 loc_402693:                             ; CODE XREF: sub_4024B0+1DB↑j
.text:00402693                                         ; sub_4024B0+290↓j ...
.text:00402693                 mov     ebx, ds:_iob
.text:00402699                 mov     ebp, [ebx+24h]
.text:0040269C                 dec     ebp
.text:0040269D                 mov     [ebx+24h], ebp
.text:004026A0                 test    ebp, ebp
.text:004026A2                 js      short loc_4026C0
.text:004026A4                 mov     ecx, ds:_iob
.text:004026AA                 mov     eax, [ecx+20h]
.text:004026AD                 mov     byte ptr [eax], 0Ah
.text:004026B0                 inc     dword ptr [ecx+20h]
.text:004026B3
.text:004026B3 loc_4026B3:                             ; CODE XREF: sub_4024B0+229↓j
.text:004026B3                 add     esp, 20Ch
.text:004026B9                 pop     ebx
.text:004026BA                 pop     esi
.text:004026BB                 pop     edi
.text:004026BC                 pop     ebp
.text:004026BD                 retn
.text:004026BD ; ---------------------------------------------------------------------------
.text:004026BE                 align 10h
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_4024B0+1F2↑j
.text:004026C0                 mov     [esp+21Ch+Destination], 0Ah ; Ch
.text:004026C7                 mov     edx, ds:_iob
.text:004026CD                 add     edx, 20h ; ' '
.text:004026D0                 mov     [esp+21Ch+Source], edx ; File
.text:004026D4                 call    _flsbuf
.text:004026D9                 jmp     short loc_4026B3
.text:004026D9 ; ---------------------------------------------------------------------------
.text:004026DB                 align 10h
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_4024B0+1E1↑j
.text:004026E0                 mov     [esp+21Ch+Count], 100h ; Count
.text:004026E8                 lea     edi, [esp+21Ch+Str]
.text:004026EC                 lea     esi, [ebp+4Ch]
.text:004026EF                 mov     [esp+21Ch+Source], esi ; Source
.text:004026F3                 mov     [esp+21Ch+Destination], edi ; Destination
.text:004026F6                 call    strncpy
.text:004026FB                 mov     [esp+21Ch+var_FC], 0
.text:00402703                 mov     [esp+21Ch+Source], 3Ah ; ':' ; Val
.text:0040270B                 mov     [esp+21Ch+Destination], edi ; Str
.text:0040270E                 call    strchr
.text:00402713                 test    eax, eax
.text:00402715                 mov     ebx, eax
.text:00402717                 jz      short loc_40271D
.text:00402719                 mov     byte ptr [eax], 0
.text:0040271C                 inc     ebx
.text:0040271D
.text:0040271D loc_40271D:                             ; CODE XREF: sub_4024B0+267↑j
.text:0040271D                 cmp     [esp+21Ch+Str], 0
.text:00402722                 jnz     short loc_402765
.text:00402724
.text:00402724 loc_402724:                             ; CODE XREF: sub_4024B0+2C3↓j
.text:00402724                 mov     esi, edi
.text:00402726
.text:00402726 loc_402726:                             ; CODE XREF: sub_4024B0+2C1↓j
.text:00402726                 test    ebx, ebx
.text:00402728                 jz      short loc_402753
.text:0040272A                 mov     [esp+21Ch+Count], ebx
.text:0040272E                 mov     [esp+21Ch+Source], esi
.text:00402732                 mov     [esp+21Ch+Destination], offset aSS ; " %s:%s"
.text:00402739                 call    printf
.text:0040273E
.text:0040273E loc_40273E:                             ; CODE XREF: sub_4024B0+2B3↓j
.text:0040273E                 cmp     esi, edi
.text:00402740                 jz      loc_402693
.text:00402746                 mov     [esp+21Ch+Destination], esi ; Block
.text:00402749                 call    free
.text:0040274E                 jmp     loc_402693
.text:00402753 ; ---------------------------------------------------------------------------
.text:00402753
.text:00402753 loc_402753:                             ; CODE XREF: sub_4024B0+278↑j
.text:00402753                 mov     [esp+21Ch+Source], esi
.text:00402757                 mov     [esp+21Ch+Destination], offset aS_0 ; " %s"
.text:0040275E                 call    printf
.text:00402763                 jmp     short loc_40273E
.text:00402765 ; ---------------------------------------------------------------------------
.text:00402765
.text:00402765 loc_402765:                             ; CODE XREF: sub_4024B0+272↑j
.text:00402765                 mov     [esp+21Ch+Destination], edi ; char *
.text:00402768                 call    sub_404230
.text:0040276D                 test    eax, eax
.text:0040276F                 mov     esi, eax
.text:00402771                 jnz     short loc_402726
.text:00402773                 jmp     short loc_402724
.text:00402775 ; ---------------------------------------------------------------------------
.text:00402775
.text:00402775 loc_402775:                             ; CODE XREF: sub_4024B0+197↑j
.text:00402775                 mov     [esp+21Ch+Count], offset byte_411020
.text:0040277D                 mov     eax, [esp+21Ch+Time]
.text:00402781                 cdq
.text:00402782                 mov     [esp+21Ch+Destination], eax
.text:00402785                 mov     [esp+21Ch+Source], edx
.text:00402789                 call    sub_404300
.text:0040278E                 jmp     loc_402674
.text:00402793 ; ---------------------------------------------------------------------------
.text:00402793
.text:00402793 loc_402793:                             ; CODE XREF: sub_4024B0+115↑j
.text:00402793                 mov     [esp+21Ch+Source], offset aLud ; "%lud"
.text:0040279B                 mov     ebx, 0C22E4507h
.text:004027A0                 mov     eax, ecx
.text:004027A2                 imul    ebx
.text:004027A4                 mov     esi, ecx
.text:004027A6                 sar     esi, 1Fh
.text:004027A9                 mov     [esp+21Ch+Destination], offset Buffer ; Buffer
.text:004027B0                 add     edx, ecx
.text:004027B2                 sar     edx, 10h
.text:004027B5                 sub     edx, esi
.text:004027B7                 mov     [esp+21Ch+Count], edx
.text:004027BB                 call    sprintf
.text:004027C0                 jmp     loc_40261A
.text:004027C5 ; ---------------------------------------------------------------------------
.text:004027C5
.text:004027C5 loc_4027C5:                             ; CODE XREF: sub_4024B0+FB↑j
.text:004027C5                 mov     [esp+21Ch+Destination], offset Time ; Time
.text:004027CC                 call    time
.text:004027D1                 mov     eax, ds:Time
.text:004027D6                 jmp     loc_4025B1
.text:004027D6 ; ---------------------------------------------------------------------------
.text:004027DB                 align 10h
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_4024B0+EE↑j
.text:004027E0                 mov     [esp+21Ch+Source], offset asc_402488 ; "???"
.text:004027E8                 jmp     loc_402623
.text:004027E8 ; ---------------------------------------------------------------------------
.text:004027ED                 align 10h
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_4024B0+B8↑j
.text:004027F0                 mov     [esp+21Ch+Source], ebx ; Source
.text:004027F4                 lea     ebx, [esp+21Ch+var_EC]
.text:004027FB                 mov     [esp+21Ch+Destination], ebx ; Destination
.text:004027FE                 mov     [esp+21Ch+Count], 20h ; ' ' ; Count
.text:00402806                 call    strncpy
.text:0040280B                 mov     [esp+21Ch+Destination], ebx ; char *
.text:0040280E                 mov     [esp+21Ch+var_CC], 0
.text:00402816                 call    sub_405E70
.text:0040281B                 test    eax, eax
.text:0040281D                 mov     ebx, eax
.text:0040281F                 jz      short loc_40286B
.text:00402821                 mov     [esp+21Ch+Source], 2Ch ; ',' ; Val
.text:00402829                 mov     edx, [eax+10h]
.text:0040282C                 mov     [esp+21Ch+Destination], edx ; Str
.text:0040282F                 call    strchr
.text:00402834                 test    eax, eax
.text:00402836                 jz      short loc_40283B
.text:00402838                 mov     byte ptr [eax], 0
.text:0040283B
.text:0040283B loc_40283B:                             ; CODE XREF: sub_4024B0+386↑j
.text:0040283B                 mov     edx, [ebx]
.text:0040283D                 mov     [esp+21Ch+Source], edx ; char *
.text:00402841                 mov     ecx, [ebx+10h]
.text:00402844                 mov     [esp+21Ch+Destination], ecx ; char *
.text:00402847                 call    sub_402350
.text:0040284C                 mov     [esp+21Ch+Source], eax
.text:00402850                 mov     ebx, eax
.text:00402852                 mov     [esp+21Ch+Destination], offset a1919s ; " %-19.19s"
.text:00402859                 call    printf
.text:0040285E                 mov     [esp+21Ch+Destination], ebx ; Block
.text:00402861                 call    free
.text:00402866                 jmp     loc_40256E
.text:0040286B ; ---------------------------------------------------------------------------
.text:0040286B
.text:0040286B loc_40286B:                             ; CODE XREF: sub_4024B0+36F↑j
.text:0040286B                 mov     [esp+21Ch+Source], offset asc_402496 ; "        ???"
.text:00402873                 mov     [esp+21Ch+Destination], offset a19s_0 ; " %19s"
.text:0040287A                 call    printf
.text:0040287F                 jmp     loc_40256E
.text:00402884 ; ---------------------------------------------------------------------------
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_4024B0+84↑j
.text:00402884                 mov     [esp+21Ch+var_201], 2Ah ; '*'
.text:00402889                 jmp     loc_40253F
.text:00402889 ; ---------------------------------------------------------------------------
.text:0040288E                 align 10h
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_4024B0+76↑j
.text:00402890                 mov     [esp+21Ch+var_201], 3Fh ; '?'
.text:00402895                 xor     edi, edi
.text:00402897                 jmp     loc_402546
.text:00402897 ; ---------------------------------------------------------------------------
.text:0040289C                 align 10h
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_4024B0+15↑j
.text:004028A0                 mov     [esp+21Ch+Count], 20h ; ' ' ; Count
.text:004028A8                 lea     esi, [ebp+8]
.text:004028AB                 lea     ebx, [esp+21Ch+var_BC]
.text:004028B2                 mov     [esp+21Ch+Source], esi ; Source
.text:004028B6                 mov     [esp+21Ch+Destination], ebx ; Destination
.text:004028B9                 call    strncpy
.text:004028BE                 mov     [esp+21Ch+var_9C], 0
.text:004028C6                 jmp     loc_402511
.text:004028C6 sub_4024B0      endp
.text:004028C6
.text:004028C6 ; ---------------------------------------------------------------------------
.text:004028CB                 align 20h
.text:004028E0                 sub     esp, 1Ch
.text:004028E3                 mov     [esp+18h], ebx
.text:004028E7                 mov     dword ptr [esp], 21h ; '!'
.text:004028EE                 call    sub_404400
.text:004028F3                 mov     [esp], eax
.text:004028F6                 mov     edx, [esp+20h]
.text:004028FA                 mov     ebx, eax
.text:004028FC                 mov     dword ptr [esp+8], 20h ; ' '
.text:00402904                 add     edx, 2Ch ; ','
.text:00402907                 mov     [esp+4], edx
.text:0040290B                 call    strncpy
.text:00402910                 mov     byte ptr [ebx+20h], 0
.text:00402914                 mov     [esp], ebx
.text:00402917                 call    strlen
.text:0040291C                 lea     eax, [eax+ebx]
.text:0040291F                 cmp     ebx, eax
.text:00402921                 jnb     short loc_402930
.text:00402923                 cmp     byte ptr [eax-1], 20h ; ' '
.text:00402927                 jz      short loc_402940
.text:00402929                 lea     esi, [esi+0]
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: .text:00402921↑j
.text:00402930                                         ; .text:00402946↓j ...
.text:00402930                 mov     eax, ebx
.text:00402932                 mov     ebx, [esp+18h]
.text:00402936                 add     esp, 1Ch
.text:00402939                 retn
.text:00402939 ; ---------------------------------------------------------------------------
.text:0040293A                 align 10h
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: .text:00402927↑j
.text:00402940                                         ; .text:0040294E↓j
.text:00402940                 dec     eax
.text:00402941                 cmp     ebx, eax
.text:00402943                 mov     byte ptr [eax], 0
.text:00402946                 jnb     short loc_402930
.text:00402948                 cmp     byte ptr [eax-1], 20h ; ' '
.text:0040294C                 jnz     short loc_402930
.text:0040294E                 jmp     short loc_402940
.text:00402950
.text:00402950 ; =============== S U B R O U T I N E =======================================
.text:00402950
.text:00402950
.text:00402950 ; int __cdecl sub_402950(char *, int, int)
.text:00402950 sub_402950      proc near               ; CODE XREF: sub_4017F0+36B↑p
.text:00402950
.text:00402950 String          = dword ptr -2Ch
.text:00402950 var_28          = dword ptr -28h
.text:00402950 var_24          = dword ptr -24h
.text:00402950 var_1C          = dword ptr -1Ch
.text:00402950 var_18          = dword ptr -18h
.text:00402950 var_14          = dword ptr -14h
.text:00402950 arg_0           = dword ptr  4
.text:00402950 arg_4           = dword ptr  8
.text:00402950 arg_8           = dword ptr  0Ch
.text:00402950
.text:00402950                 push    ebp
.text:00402951                 xor     ebp, ebp
.text:00402953                 push    edi
.text:00402954                 push    esi
.text:00402955                 push    ebx
.text:00402956                 sub     esp, 1Ch
.text:00402959                 mov     [esp+2Ch+var_18], 4
.text:00402961                 mov     [esp+2Ch+String], 600h ; size_t
.text:00402968                 call    sub_404400
.text:0040296D                 mov     [esp+2Ch+var_1C], eax
.text:00402971                 mov     edx, [esp+2Ch+arg_0]
.text:00402975                 mov     [esp+2Ch+String], edx ; String
.text:00402978                 call    sub_405EF0
.text:0040297D                 call    sub_405EE0
.text:00402982                 mov     [esp+2Ch+var_14], 0
.text:0040298A                 lea     esi, [esi+0]
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_402950+9D↓j
.text:00402990                 call    sub_405ED0
.text:00402995                 test    eax, eax
.text:00402997                 mov     ebx, eax
.text:00402999                 jz      loc_402A1C
.text:0040299F                 mov     edx, [esp+2Ch+var_18]
.text:004029A3                 cmp     [esp+2Ch+var_14], edx
.text:004029A7                 jz      short loc_4029F0
.text:004029A9
.text:004029A9 loc_4029A9:                             ; CODE XREF: sub_402950+CA↓j
.text:004029A9                 inc     [esp+2Ch+var_14]
.text:004029AD                 add     ebp, 180h
.text:004029B3                 mov     edi, [esp+2Ch+var_1C]
.text:004029B7                 mov     esi, ebx
.text:004029B9                 mov     eax, 180h
.text:004029BE                 lea     edx, [edi+ebp]
.text:004029C1                 lea     edi, [edx-180h]
.text:004029C7                 test    edi, 4
.text:004029CD                 jz      short loc_4029E5
.text:004029CF                 mov     ecx, [ebx]
.text:004029D1                 lea     edi, [edx-17Ch]
.text:004029D7                 mov     eax, 17Ch
.text:004029DC                 lea     esi, [ebx+4]
.text:004029DF                 mov     [edx-180h], ecx
.text:004029E5
.text:004029E5 loc_4029E5:                             ; CODE XREF: sub_402950+7D↑j
.text:004029E5                 cld
.text:004029E6                 mov     ecx, eax
.text:004029E8                 shr     ecx, 2
.text:004029EB                 rep movsd
.text:004029ED                 jmp     short loc_402990
.text:004029ED ; ---------------------------------------------------------------------------
.text:004029EF                 align 10h
.text:004029F0
.text:004029F0 loc_4029F0:                             ; CODE XREF: sub_402950+57↑j
.text:004029F0                 mov     [esp+2Ch+var_24], 300h ; int
.text:004029F8                 mov     esi, [esp+2Ch+var_14]
.text:004029FC                 mov     ecx, [esp+2Ch+var_1C]
.text:00402A00                 mov     [esp+2Ch+var_28], esi ; int
.text:00402A04                 mov     [esp+2Ch+String], ecx ; void *
.text:00402A07                 call    sub_404430
.text:00402A0C                 mov     [esp+2Ch+var_1C], eax
.text:00402A10                 mov     eax, [esp+2Ch+var_14]
.text:00402A14                 add     eax, eax
.text:00402A16                 mov     [esp+2Ch+var_18], eax
.text:00402A1A                 jmp     short loc_4029A9
.text:00402A1C ; ---------------------------------------------------------------------------
.text:00402A1C
.text:00402A1C loc_402A1C:                             ; CODE XREF: sub_402950+49↑j
.text:00402A1C                 call    sub_405EC0
.text:00402A21                 mov     esi, [esp+2Ch+arg_4]
.text:00402A25                 mov     eax, [esp+2Ch+var_14]
.text:00402A29                 mov     ebx, [esp+2Ch+arg_8]
.text:00402A2D                 mov     ebp, [esp+2Ch+var_1C]
.text:00402A31                 mov     [esi], eax
.text:00402A33                 xor     eax, eax
.text:00402A35                 mov     [ebx], ebp
.text:00402A37                 add     esp, 1Ch
.text:00402A3A                 pop     ebx
.text:00402A3B                 pop     esi
.text:00402A3C                 pop     edi
.text:00402A3D                 pop     ebp
.text:00402A3E                 retn
.text:00402A3E sub_402950      endp
.text:00402A3E
.text:00402A3E ; ---------------------------------------------------------------------------
.text:00402A3F                 align 10h
.text:00402A40 dword_402A40    dd 90002D2Dh, 7 dup(90909090h)
.text:00402A40                                         ; DATA XREF: sub_402C90+E4↓o
.text:00402A60 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402A60                                         ; DATA XREF: sub_402C90+2FC↓o
.text:00402A8D                 align 20h
.text:00402AA0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402AA0                                         ; DATA XREF: sub_402C90:loc_402FF2↓o
.text:00402ACD                 align 20h
.text:00402AE0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402AE0                                         ; DATA XREF: sub_402C90:loc_403090↓o
.text:00402AE0                                         ; sub_402C90:loc_403457↓o
.text:00402B06                 align 20h
.text:00402B20 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402B20                                         ; DATA XREF: sub_402C90+48E↓o
.text:00402B40 dword_402B40    dd 90909000h, 7 dup(90909090h)
.text:00402B40                                         ; DATA XREF: sub_402C90:loc_403161↓o
.text:00402B60 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402B60                                         ; DATA XREF: sub_402C90:loc_40317A↓o
.text:00402B80 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402B80                                         ; DATA XREF: sub_402C90:loc_40325F↓o
.text:00402B80                                         ; sub_402C90:loc_40358C↓o
.text:00402BA7                 align 20h
.text:00402BC0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402BC0                                         ; DATA XREF: sub_402C90:loc_4033D3↓o
.text:00402BEE                 align 20h
.text:00402C00 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402C00                                         ; DATA XREF: sub_402C90:loc_4034BF↓o
.text:00402C21 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402C21                                         ; DATA XREF: sub_402C90+93F↓o
.text:00402C3B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402C3B                                         ; DATA XREF: sub_402C90:loc_403607↓o
.text:00402C55 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402C55                                         ; DATA XREF: sub_402C90:loc_40362E↓o
.text:00402C73 ; const char VarName[]
.text:00402C73 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402C90:loc_4037E0↓o
.text:00402C83                 align 10h
.text:00402C90
.text:00402C90 ; =============== S U B R O U T I N E =======================================
.text:00402C90
.text:00402C90
.text:00402C90 ; int __cdecl sub_402C90(int, int, char *Str, int, int, int, int, int)
.text:00402C90 sub_402C90      proc near               ; CODE XREF: sub_403820+5A↓p
.text:00402C90                                         ; .text:0040390A↓p ...
.text:00402C90
.text:00402C90 Str1            = dword ptr -5Ch
.text:00402C90 Str2            = dword ptr -58h
.text:00402C90 MaxCount        = dword ptr -54h
.text:00402C90 var_50          = dword ptr -50h
.text:00402C90 var_4C          = dword ptr -4Ch
.text:00402C90 var_3C          = dword ptr -3Ch
.text:00402C90 var_38          = dword ptr -38h
.text:00402C90 var_34          = dword ptr -34h
.text:00402C90 var_30          = dword ptr -30h
.text:00402C90 var_2C          = dword ptr -2Ch
.text:00402C90 var_28          = dword ptr -28h
.text:00402C90 var_24          = dword ptr -24h
.text:00402C90 var_20          = dword ptr -20h
.text:00402C90 var_1C          = dword ptr -1Ch
.text:00402C90 var_18          = dword ptr -18h
.text:00402C90 var_14          = dword ptr -14h
.text:00402C90 arg_0           = dword ptr  4
.text:00402C90 arg_4           = dword ptr  8
.text:00402C90 Str             = dword ptr  0Ch
.text:00402C90 arg_C           = dword ptr  10h
.text:00402C90 arg_10          = dword ptr  14h
.text:00402C90 arg_14          = dword ptr  18h
.text:00402C90 arg_18          = dword ptr  1Ch
.text:00402C90 arg_1C          = dword ptr  20h
.text:00402C90
.text:00402C90                 push    ebp
.text:00402C91                 mov     eax, 0FFFFFFFFh
.text:00402C96                 push    edi
.text:00402C97                 push    esi
.text:00402C98                 push    ebx
.text:00402C99                 sub     esp, 4Ch
.text:00402C9C                 mov     esi, [esp+5Ch+Str]
.text:00402CA0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402CA4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402CA7                 mov     ebx, [ebp+4]
.text:00402CAA                 setz    dl
.text:00402CAD                 movzx   ecx, dl
.text:00402CB0                 dec     ecx
.text:00402CB1                 and     ecx, ebx
.text:00402CB3                 mov     [esp+5Ch+var_14], ecx
.text:00402CB7                 mov     ecx, [esp+5Ch+arg_0]
.text:00402CBB                 test    ecx, ecx
.text:00402CBD                 jle     loc_402DE7
.text:00402CC3                 mov     dword ptr [ebp+0Ch], 0
.text:00402CCA                 mov     ebx, [ebp+0]
.text:00402CCD                 test    ebx, ebx
.text:00402CCF                 jz      loc_403800
.text:00402CD5                 mov     edi, [ebp+10h]
.text:00402CD8                 test    edi, edi
.text:00402CDA                 jnz     short loc_402D33
.text:00402CDC                 lea     esi, [esi+0]
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_402C90+B7C↓j
.text:00402CE0                 mov     [ebp+24h], ebx
.text:00402CE3                 mov     esi, [esp+5Ch+Str]
.text:00402CE7                 mov     [ebp+20h], ebx
.text:00402CEA                 mov     ecx, [esp+5Ch+arg_18]
.text:00402CEE                 xor     ebx, ebx
.text:00402CF0                 mov     dword ptr [ebp+14h], 0
.text:00402CF7                 test    ecx, ecx
.text:00402CF9                 jz      loc_4037E0
.text:00402CFF
.text:00402CFF loc_402CFF:                             ; CODE XREF: sub_402C90+B64↓j
.text:00402CFF                 mov     ebx, 1
.text:00402D04
.text:00402D04 loc_402D04:                             ; CODE XREF: sub_402C90+B5E↓j
.text:00402D04                 mov     [ebp+1Ch], ebx
.text:00402D07                 mov     ecx, [esp+5Ch+Str]
.text:00402D0B                 movzx   eax, byte ptr [ecx]
.text:00402D0E                 cmp     al, 2Dh ; '-'
.text:00402D10                 jz      loc_4037D0
.text:00402D16                 cmp     al, 2Bh ; '+'
.text:00402D18                 jz      loc_4037B9
.text:00402D1E                 xor     edx, edx
.text:00402D20                 test    ebx, ebx
.text:00402D22                 setz    dl
.text:00402D25                 mov     [ebp+18h], edx
.text:00402D28
.text:00402D28 loc_402D28:                             ; CODE XREF: sub_402C90+B35↓j
.text:00402D28                 mov     [esp+5Ch+Str], esi
.text:00402D2C                 mov     dword ptr [ebp+10h], 1
.text:00402D33
.text:00402D33 loc_402D33:                             ; CODE XREF: sub_402C90+4A↑j
.text:00402D33                 mov     eax, [ebp+14h]
.text:00402D36                 test    eax, eax
.text:00402D38                 jz      short loc_402D43
.text:00402D3A                 cmp     byte ptr [eax], 0
.text:00402D3D                 jnz     loc_402E20
.text:00402D43
.text:00402D43 loc_402D43:                             ; CODE XREF: sub_402C90+A8↑j
.text:00402D43                 mov     ebx, [ebp+0]
.text:00402D46                 cmp     [ebp+24h], ebx
.text:00402D49                 jle     short loc_402D4E
.text:00402D4B                 mov     [ebp+24h], ebx
.text:00402D4E
.text:00402D4E loc_402D4E:                             ; CODE XREF: sub_402C90+B9↑j
.text:00402D4E                 cmp     [ebp+20h], ebx
.text:00402D51                 jle     short loc_402D56
.text:00402D53                 mov     [ebp+20h], ebx
.text:00402D56
.text:00402D56 loc_402D56:                             ; CODE XREF: sub_402C90+C1↑j
.text:00402D56                 cmp     dword ptr [ebp+18h], 1
.text:00402D5A                 jz      loc_403730
.text:00402D60
.text:00402D60 loc_402D60:                             ; CODE XREF: sub_402C90+B13↓j
.text:00402D60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402D64                 jz      loc_403714
.text:00402D6A                 cld
.text:00402D6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00402D6F                 mov     edx, 3
.text:00402D74                 mov     edi, offset dword_402A40
.text:00402D79                 mov     esi, [ecx+ebx*4]
.text:00402D7C                 mov     ecx, edx
.text:00402D7E                 repe cmpsb
.text:00402D80                 jnz     short loc_402DBC
.text:00402D82                 mov     edx, [ebp+24h]
.text:00402D85                 lea     eax, [ebx+1]
.text:00402D88                 cmp     [ebp+20h], edx
.text:00402D8B                 mov     [ebp+0], eax
.text:00402D8E                 jz      loc_403728
.text:00402D94                 cmp     edx, eax
.text:00402D96                 jz      short loc_402DB0
.text:00402D98                 mov     [esp+5Ch+Str2], ebp
.text:00402D9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DA0                 mov     [esp+5Ch+Str1], ebx
.text:00402DA3                 call    sub_403940
.text:00402DA8                 nop
.text:00402DA9                 lea     esi, [esi+0]
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402C90+106↑j
.text:00402DB0                                         ; sub_402C90+A9B↓j
.text:00402DB0                 mov     eax, [esp+5Ch+arg_0]
.text:00402DB4                 mov     ebx, eax
.text:00402DB6                 mov     [ebp+24h], eax
.text:00402DB9                 mov     [ebp+0], eax
.text:00402DBC
.text:00402DBC loc_402DBC:                             ; CODE XREF: sub_402C90+F0↑j
.text:00402DBC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402DC0                 jz      loc_403714
.text:00402DC6                 mov     esi, [esp+5Ch+arg_4]
.text:00402DCA                 mov     eax, [esi+ebx*4]
.text:00402DCD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402DD0                 jz      short loc_402DF7
.text:00402DD2
.text:00402DD2 loc_402DD2:                             ; CODE XREF: sub_402C90+16D↓j
.text:00402DD2                 mov     edx, [ebp+18h]
.text:00402DD5                 test    edx, edx
.text:00402DD7                 jz      short loc_402DF0
.text:00402DD9                 mov     [ebp+0Ch], eax
.text:00402DDC                 lea     edi, [ebx+1]
.text:00402DDF                 mov     eax, 1
.text:00402DE4                 mov     [ebp+0], edi
.text:00402DE7
.text:00402DE7 loc_402DE7:                             ; CODE XREF: sub_402C90+2D↑j
.text:00402DE7                                         ; sub_402C90+165↓j ...
.text:00402DE7                 add     esp, 4Ch
.text:00402DEA                 pop     ebx
.text:00402DEB                 pop     esi
.text:00402DEC                 pop     edi
.text:00402DED                 pop     ebp
.text:00402DEE                 retn
.text:00402DEE ; ---------------------------------------------------------------------------
.text:00402DEF                 align 10h
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402C90+147↑j
.text:00402DF0                                         ; sub_402C90+A8A↓j ...
.text:00402DF0                 mov     eax, 0FFFFFFFFh
.text:00402DF5                 jmp     short loc_402DE7
.text:00402DF7 ; ---------------------------------------------------------------------------
.text:00402DF7
.text:00402DF7 loc_402DF7:                             ; CODE XREF: sub_402C90+140↑j
.text:00402DF7                 movzx   edx, byte ptr [eax+1]
.text:00402DFB                 test    dl, dl
.text:00402DFD                 jz      short loc_402DD2
.text:00402DFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00402E03                 xor     ecx, ecx
.text:00402E05                 test    ebx, ebx
.text:00402E07                 jz      short loc_402E12
.text:00402E09                 cmp     dl, 2Dh ; '-'
.text:00402E0C                 jz      loc_40370A
.text:00402E12
.text:00402E12 loc_402E12:                             ; CODE XREF: sub_402C90+177↑j
.text:00402E12                                         ; sub_402C90+A7F↓j
.text:00402E12                 lea     esi, [ecx+eax+1]
.text:00402E16                 mov     [ebp+14h], esi
.text:00402E19                 lea     esi, [esi+0]
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402C90+AD↑j
.text:00402E20                 mov     ecx, [esp+5Ch+arg_C]
.text:00402E24                 test    ecx, ecx
.text:00402E26                 jz      loc_4031B0
.text:00402E2C                 mov     edx, [ebp+0]
.text:00402E2F                 mov     edi, [esp+5Ch+arg_4]
.text:00402E33                 mov     eax, [edi+edx*4]
.text:00402E36                 movzx   edx, byte ptr [eax+1]
.text:00402E3A                 cmp     dl, 2Dh ; '-'
.text:00402E3D                 jz      short loc_402E55
.text:00402E3F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402E43                 test    ebx, ebx
.text:00402E45                 jz      loc_4031B0
.text:00402E4B                 cmp     byte ptr [eax+2], 0
.text:00402E4F                 jz      loc_4036EA
.text:00402E55
.text:00402E55 loc_402E55:                             ; CODE XREF: sub_402C90+1AD↑j
.text:00402E55                                         ; sub_402C90+A75↓j
.text:00402E55                 mov     [esp+5Ch+var_18], 0
.text:00402E5D                 mov     ecx, [ebp+14h]
.text:00402E60                 mov     [esp+5Ch+var_1C], 0
.text:00402E68                 mov     [esp+5Ch+var_20], 0
.text:00402E70                 mov     edi, ecx
.text:00402E72                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00402E7A                 movzx   eax, byte ptr [ecx]
.text:00402E7D                 test    al, al
.text:00402E7F                 jz      short loc_402E9C
.text:00402E81                 cmp     al, 3Dh ; '='
.text:00402E83                 jz      short loc_402E9C
.text:00402E85                 lea     esi, [esi+0]
.text:00402E89                 lea     edi, [edi+0]
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402C90+20A↓j
.text:00402E90                 inc     edi
.text:00402E91                 movzx   eax, byte ptr [edi]
.text:00402E94                 test    al, al
.text:00402E96                 jz      short loc_402E9C
.text:00402E98                 cmp     al, 3Dh ; '='
.text:00402E9A                 jnz     short loc_402E90
.text:00402E9C
.text:00402E9C loc_402E9C:                             ; CODE XREF: sub_402C90+1EF↑j
.text:00402E9C                                         ; sub_402C90+1F3↑j ...
.text:00402E9C                 mov     [esp+5Ch+var_28], 0
.text:00402EA4                 mov     esi, [esp+5Ch+arg_C]
.text:00402EA8                 mov     ebx, [esi]
.text:00402EAA                 test    ebx, ebx
.text:00402EAC                 mov     edx, ebx
.text:00402EAE                 jz      loc_4030D0
.text:00402EB4                 lea     esi, [esi+0]
.text:00402EBA                 lea     edi, [edi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402C90+25E↓j
.text:00402EC0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402EC4                 mov     ebx, edi
.text:00402EC6                 sub     ebx, ecx
.text:00402EC8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402ECC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402ECF                 call    strncmp
.text:00402ED4                 test    eax, eax
.text:00402ED6                 jz      loc_403666
.text:00402EDC
.text:00402EDC loc_402EDC:                             ; CODE XREF: sub_402C90+A0F↓j
.text:00402EDC                                         ; sub_402C90+A24↓j ...
.text:00402EDC                 inc     [esp+5Ch+var_28]
.text:00402EE0                 add     esi, 10h
.text:00402EE3                 mov     ecx, [esi]
.text:00402EE5                 test    ecx, ecx
.text:00402EE7                 mov     edx, ecx
.text:00402EE9                 jz      short loc_402EF0
.text:00402EEB                 mov     ecx, [ebp+14h]
.text:00402EEE                 jmp     short loc_402EC0
.text:00402EF0 ; ---------------------------------------------------------------------------
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402C90+259↑j
.text:00402EF0                                         ; sub_402C90+A55↓j
.text:00402EF0                 mov     esi, [esp+5Ch+var_20]
.text:00402EF4                 test    esi, esi
.text:00402EF6                 jz      short loc_402F04
.text:00402EF8                 mov     edx, [esp+5Ch+var_1C]
.text:00402EFC                 test    edx, edx
.text:00402EFE                 jz      loc_403610
.text:00402F04
.text:00402F04 loc_402F04:                             ; CODE XREF: sub_402C90+266↑j
.text:00402F04                 mov     eax, [esp+5Ch+var_18]
.text:00402F08                 test    eax, eax
.text:00402F0A                 jz      loc_4030D0
.text:00402F10                 mov     ecx, [ebp+0]
.text:00402F13                 lea     eax, [ecx+1]
.text:00402F16                 mov     [ebp+0], eax
.text:00402F19                 cmp     byte ptr [edi], 0
.text:00402F1C                 jz      loc_403030
.text:00402F22                 mov     ecx, [esp+5Ch+var_18]
.text:00402F26                 mov     esi, [ecx+4]
.text:00402F29                 test    esi, esi
.text:00402F2B                 jz      short loc_402F76
.text:00402F2D                 lea     ebx, [edi+1]
.text:00402F30                 mov     [ebp+0Ch], ebx
.text:00402F33
.text:00402F33 loc_402F33:                             ; CODE XREF: sub_402C90+3A8↓j
.text:00402F33                                         ; sub_402C90+3C4↓j
.text:00402F33                 mov     ebx, [ebp+14h]
.text:00402F36                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402F39                 call    strlen
.text:00402F3E                 add     [ebp+14h], eax
.text:00402F41                 mov     esi, [esp+5Ch+arg_10]
.text:00402F45                 test    esi, esi
.text:00402F47                 jz      short loc_402F53
.text:00402F49                 mov     ebp, [esp+5Ch+var_24]
.text:00402F4D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402F51                 mov     [ecx], ebp
.text:00402F53
.text:00402F53 loc_402F53:                             ; CODE XREF: sub_402C90+2B7↑j
.text:00402F53                 mov     eax, [esp+5Ch+var_18]
.text:00402F57                 mov     ecx, [eax+8]
.text:00402F5A                 test    ecx, ecx
.text:00402F5C                 jnz     short loc_402F6A
.text:00402F5E                 mov     ecx, [esp+5Ch+var_18]
.text:00402F62
.text:00402F62 loc_402F62:                             ; CODE XREF: sub_402C90+723↓j
.text:00402F62                 mov     eax, [ecx+0Ch]
.text:00402F65                 jmp     loc_402DE7
.text:00402F6A ; ---------------------------------------------------------------------------
.text:00402F6A
.text:00402F6A loc_402F6A:                             ; CODE XREF: sub_402C90+2CC↑j
.text:00402F6A                                         ; sub_402C90+719↓j
.text:00402F6A                 mov     esi, [eax+0Ch]
.text:00402F6D                 xor     eax, eax
.text:00402F6F                 mov     [ecx], esi
.text:00402F71                 jmp     loc_402DE7
.text:00402F76 ; ---------------------------------------------------------------------------
.text:00402F76
.text:00402F76 loc_402F76:                             ; CODE XREF: sub_402C90+29B↑j
.text:00402F76                 mov     edi, [esp+5Ch+var_14]
.text:00402F7A                 test    edi, edi
.text:00402F7C                 jz      short loc_402FD0
.text:00402F7E                 mov     esi, [esp+5Ch+arg_4]
.text:00402F82                 mov     edx, [esi+eax*4-4]
.text:00402F86                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402F8A                 jz      short loc_402FF2
.text:00402F8C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402F93                 call    ds:libintl_gettext
.text:00402F99                 mov     edx, [esp+5Ch+var_18]
.text:00402F9D                 mov     edi, [edx]
.text:00402F9F                 mov     [esp+5Ch+var_4C], edi
.text:00402FA3                 mov     ebx, [ebp+0]
.text:00402FA6                 mov     edi, [esp+5Ch+arg_4]
.text:00402FAA                 mov     ecx, [edi+ebx*4-4]
.text:00402FAE                 movsx   esi, byte ptr [ecx]
.text:00402FB1                 mov     ecx, ds:_iob
.text:00402FB7                 add     ecx, 40h ; '@'
.text:00402FBA                 mov     [esp+5Ch+var_50], esi
.text:00402FBE                 mov     ebx, [edi]
.text:00402FC0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402FC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402FC7                 mov     [esp+5Ch+MaxCount], ebx
.text:00402FCB                 call    fprintf
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402C90+2EC↑j
.text:00402FD0                                         ; sub_402C90+398↓j
.text:00402FD0                 mov     ecx, [ebp+14h]
.text:00402FD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402FD6                 call    strlen
.text:00402FDB                 add     [ebp+14h], eax
.text:00402FDE                 mov     eax, [esp+5Ch+var_18]
.text:00402FE2                 mov     esi, [eax+0Ch]
.text:00402FE5                 mov     [ebp+8], esi
.text:00402FE8
.text:00402FE8 loc_402FE8:                             ; CODE XREF: sub_402C90+4E5↓j
.text:00402FE8                                         ; sub_402C90+73E↓j ...
.text:00402FE8                 mov     eax, 3Fh ; '?'
.text:00402FED                 jmp     loc_402DE7
.text:00402FF2 ; ---------------------------------------------------------------------------
.text:00402FF2
.text:00402FF2 loc_402FF2:                             ; CODE XREF: sub_402C90+2FA↑j
.text:00402FF2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402FF9                 call    ds:libintl_gettext
.text:00402FFF                 mov     edx, [esp+5Ch+var_18]
.text:00403003                 mov     edi, [esp+5Ch+arg_4]
.text:00403007                 mov     ecx, ds:_iob
.text:0040300D                 mov     esi, [edx]
.text:0040300F                 add     ecx, 40h ; '@'
.text:00403012                 mov     [esp+5Ch+var_50], esi
.text:00403016                 mov     ebx, [edi]
.text:00403018                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040301C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040301F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403023                 call    fprintf
.text:00403028                 jmp     short loc_402FD0
.text:00403028 ; ---------------------------------------------------------------------------
.text:0040302A                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402C90+28C↑j
.text:00403030                 mov     ebx, [esp+5Ch+var_18]
.text:00403034                 cmp     dword ptr [ebx+4], 1
.text:00403038                 jnz     loc_402F33
.text:0040303E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403042                 jge     short loc_403059
.text:00403044                 mov     ebx, [esp+5Ch+arg_4]
.text:00403048                 lea     edi, [ecx+2]
.text:0040304B                 mov     [ebp+0], edi
.text:0040304E                 mov     esi, [ebx+eax*4]
.text:00403051                 mov     [ebp+0Ch], esi
.text:00403054                 jmp     loc_402F33
.text:00403059 ; ---------------------------------------------------------------------------
.text:00403059
.text:00403059 loc_403059:                             ; CODE XREF: sub_402C90+3B2↑j
.text:00403059                 mov     edx, [esp+5Ch+var_14]
.text:0040305D                 test    edx, edx
.text:0040305F                 jnz     short loc_403090
.text:00403061
.text:00403061 loc_403061:                             ; CODE XREF: sub_402C90+437↓j
.text:00403061                 mov     edx, [ebp+14h]
.text:00403064                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403067                 call    strlen
.text:0040306C                 add     [ebp+14h], eax
.text:0040306F                 mov     eax, [esp+5Ch+var_18]
.text:00403073                 mov     edi, [eax+0Ch]
.text:00403076                 mov     [ebp+8], edi
.text:00403079
.text:00403079 loc_403079:                             ; CODE XREF: sub_402C90+7C2↓j
.text:00403079                 mov     ebp, [esp+5Ch+Str]
.text:0040307D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403081                 setnz   bl
.text:00403084                 movzx   esi, bl
.text:00403087                 lea     eax, [esi+esi*4+3Ah]
.text:0040308B                 jmp     loc_402DE7
.text:00403090 ; ---------------------------------------------------------------------------
.text:00403090
.text:00403090 loc_403090:                             ; CODE XREF: sub_402C90+3CF↑j
.text:00403090                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403097                 call    ds:libintl_gettext
.text:0040309D                 mov     ecx, [ebp+0]
.text:004030A0                 mov     esi, [esp+5Ch+arg_4]
.text:004030A4                 mov     ebx, [esi+ecx*4-4]
.text:004030A8                 mov     ecx, ds:_iob
.text:004030AE                 mov     [esp+5Ch+var_50], ebx
.text:004030B2                 mov     edi, [esi]
.text:004030B4                 add     ecx, 40h ; '@'
.text:004030B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004030BE                 mov     [esp+5Ch+MaxCount], edi
.text:004030C2                 call    fprintf
.text:004030C7                 jmp     short loc_403061
.text:004030C7 ; ---------------------------------------------------------------------------
.text:004030C9                 align 10h
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_402C90+21E↑j
.text:004030D0                                         ; sub_402C90+27A↑j
.text:004030D0                 mov     eax, [esp+5Ch+arg_14]
.text:004030D4                 test    eax, eax
.text:004030D6                 jz      short loc_403106
.text:004030D8                 mov     ebx, [ebp+0]
.text:004030DB                 mov     esi, [esp+5Ch+arg_4]
.text:004030DF                 mov     edi, [esi+ebx*4]
.text:004030E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004030E6                 jz      short loc_403109
.text:004030E8                 mov     ecx, [ebp+14h]
.text:004030EB                 mov     edx, [esp+5Ch+Str]
.text:004030EF                 movsx   ebx, byte ptr [ecx]
.text:004030F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004030F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004030F9                 call    strchr
.text:004030FE                 test    eax, eax
.text:00403100                 jnz     loc_4031B0
.text:00403106
.text:00403106 loc_403106:                             ; CODE XREF: sub_402C90+446↑j
.text:00403106                 mov     ebx, [ebp+0]
.text:00403109
.text:00403109 loc_403109:                             ; CODE XREF: sub_402C90+456↑j
.text:00403109                 mov     eax, [esp+5Ch+var_14]
.text:0040310D                 test    eax, eax
.text:0040310F                 jz      short loc_403161
.text:00403111                 mov     esi, [esp+5Ch+arg_4]
.text:00403115                 mov     edi, [esi+ebx*4]
.text:00403118                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040311C                 jz      short loc_40317A
.text:0040311E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403125                 call    ds:libintl_gettext
.text:0040312B                 mov     edi, [ebp+14h]
.text:0040312E                 mov     [esp+5Ch+var_4C], edi
.text:00403132                 mov     ebx, [ebp+0]
.text:00403135                 mov     edi, [esp+5Ch+arg_4]
.text:00403139                 mov     esi, [edi+ebx*4]
.text:0040313C                 movsx   ecx, byte ptr [esi]
.text:0040313F                 mov     esi, ds:_iob
.text:00403145                 add     esi, 40h ; '@'
.text:00403148                 mov     [esp+5Ch+var_50], ecx
.text:0040314C                 mov     ebx, [edi]
.text:0040314E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403152                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403155                 mov     [esp+5Ch+MaxCount], ebx
.text:00403159                 call    fprintf
.text:0040315E
.text:0040315E loc_40315E:                             ; CODE XREF: sub_402C90+51D↓j
.text:0040315E                 mov     ebx, [ebp+0]
.text:00403161
.text:00403161 loc_403161:                             ; CODE XREF: sub_402C90+47F↑j
.text:00403161                 mov     dword ptr [ebp+14h], offset dword_402B40
.text:00403168                 lea     edx, [ebx+1]
.text:0040316B                 mov     [ebp+0], edx
.text:0040316E
.text:0040316E loc_40316E:                             ; CODE XREF: sub_402C90+999↓j
.text:0040316E                 mov     dword ptr [ebp+8], 0
.text:00403175                 jmp     loc_402FE8
.text:0040317A ; ---------------------------------------------------------------------------
.text:0040317A
.text:0040317A loc_40317A:                             ; CODE XREF: sub_402C90+48C↑j
.text:0040317A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403181                 call    ds:libintl_gettext
.text:00403187                 mov     ecx, [ebp+14h]
.text:0040318A                 mov     edi, [esp+5Ch+arg_4]
.text:0040318E                 mov     edx, ds:_iob
.text:00403194                 mov     [esp+5Ch+var_50], ecx
.text:00403198                 mov     ebx, [edi]
.text:0040319A                 add     edx, 40h ; '@'
.text:0040319D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004031A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004031A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004031A8                 call    fprintf
.text:004031AD                 jmp     short loc_40315E
.text:004031AD ; ---------------------------------------------------------------------------
.text:004031AF                 align 10h
.text:004031B0
.text:004031B0 loc_4031B0:                             ; CODE XREF: sub_402C90+196↑j
.text:004031B0                                         ; sub_402C90+1B5↑j ...
.text:004031B0                 mov     esi, [ebp+14h]
.text:004031B3                 movzx   ebx, byte ptr [esi]
.text:004031B6                 inc     esi
.text:004031B7                 mov     [ebp+14h], esi
.text:004031BA                 mov     ecx, [esp+5Ch+Str]
.text:004031BE                 movsx   esi, bl
.text:004031C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004031C5                 mov     edi, esi
.text:004031C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004031CA                 call    strchr
.text:004031CF                 mov     ecx, [ebp+14h]
.text:004031D2                 cmp     byte ptr [ecx], 0
.text:004031D5                 jnz     short loc_4031DA
.text:004031D7                 inc     dword ptr [ebp+0]
.text:004031DA
.text:004031DA loc_4031DA:                             ; CODE XREF: sub_402C90+545↑j
.text:004031DA                 test    eax, eax
.text:004031DC                 jz      loc_4035C0
.text:004031E2                 cmp     bl, 3Ah ; ':'
.text:004031E5                 jz      loc_4035C0
.text:004031EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004031EE                 jz      loc_4032A6
.text:004031F4                 movzx   edx, byte ptr [eax+1]
.text:004031F8
.text:004031F8 loc_4031F8:                             ; CODE XREF: sub_402C90+61D↓j
.text:004031F8                 cmp     dl, 3Ah ; ':'
.text:004031FB                 jz      short loc_403204
.text:004031FD
.text:004031FD loc_4031FD:                             ; CODE XREF: sub_402C90+590↓j
.text:004031FD                 mov     eax, esi
.text:004031FF                 jmp     loc_402DE7
.text:00403204 ; ---------------------------------------------------------------------------
.text:00403204
.text:00403204 loc_403204:                             ; CODE XREF: sub_402C90+56B↑j
.text:00403204                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403208                 jz      loc_403291
.text:0040320E                 cmp     byte ptr [ecx], 0
.text:00403211                 jz      short loc_403222
.text:00403213
.text:00403213 loc_403213:                             ; CODE XREF: sub_402C90+604↓j
.text:00403213                 inc     dword ptr [ebp+0]
.text:00403216                 mov     [ebp+0Ch], ecx
.text:00403219
.text:00403219 loc_403219:                             ; CODE XREF: sub_402C90+5AB↓j
.text:00403219                                         ; sub_402C90+5C6↓j ...
.text:00403219                 mov     dword ptr [ebp+14h], 0
.text:00403220                 jmp     short loc_4031FD
.text:00403222 ; ---------------------------------------------------------------------------
.text:00403222
.text:00403222 loc_403222:                             ; CODE XREF: sub_402C90+581↑j
.text:00403222                 mov     ecx, [ebp+0]
.text:00403225                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403229                 jz      short loc_40323D
.text:0040322B                 mov     eax, [esp+5Ch+arg_4]
.text:0040322F                 lea     edx, [ecx+1]
.text:00403232                 mov     [ebp+0], edx
.text:00403235                 mov     ebx, [eax+ecx*4]
.text:00403238                 mov     [ebp+0Ch], ebx
.text:0040323B                 jmp     short loc_403219
.text:0040323D ; ---------------------------------------------------------------------------
.text:0040323D
.text:0040323D loc_40323D:                             ; CODE XREF: sub_402C90+599↑j
.text:0040323D                 mov     ecx, [esp+5Ch+var_14]
.text:00403241                 test    ecx, ecx
.text:00403243                 jnz     short loc_40325F
.text:00403245
.text:00403245 loc_403245:                             ; CODE XREF: sub_402C90+5FF↓j
.text:00403245                 mov     [ebp+8], edi
.text:00403248                 mov     edi, [esp+5Ch+Str]
.text:0040324C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040324F                 jz      short loc_403258
.text:00403251                 mov     esi, 3Fh ; '?'
.text:00403256                 jmp     short loc_403219
.text:00403258 ; ---------------------------------------------------------------------------
.text:00403258
.text:00403258 loc_403258:                             ; CODE XREF: sub_402C90+5BF↑j
.text:00403258                 mov     esi, 3Ah ; ':'
.text:0040325D                 jmp     short loc_403219
.text:0040325F ; ---------------------------------------------------------------------------
.text:0040325F
.text:0040325F loc_40325F:                             ; CODE XREF: sub_402C90+5B3↑j
.text:0040325F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403266                 call    ds:libintl_gettext
.text:0040326C                 mov     [esp+5Ch+var_50], edi
.text:00403270                 mov     ebx, [esp+5Ch+arg_4]
.text:00403274                 mov     edx, ds:_iob
.text:0040327A                 mov     esi, [ebx]
.text:0040327C                 add     edx, 40h ; '@'
.text:0040327F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403283                 mov     [esp+5Ch+MaxCount], esi
.text:00403287                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040328A                 call    fprintf
.text:0040328F                 jmp     short loc_403245
.text:00403291 ; ---------------------------------------------------------------------------
.text:00403291
.text:00403291 loc_403291:                             ; CODE XREF: sub_402C90+578↑j
.text:00403291                 cmp     byte ptr [ecx], 0
.text:00403294                 jnz     loc_403213
.text:0040329A                 mov     dword ptr [ebp+0Ch], 0
.text:004032A1                 jmp     loc_403219
.text:004032A6 ; ---------------------------------------------------------------------------
.text:004032A6
.text:004032A6 loc_4032A6:                             ; CODE XREF: sub_402C90+55E↑j
.text:004032A6                 movzx   edx, byte ptr [eax+1]
.text:004032AA                 cmp     dl, 3Bh ; ';'
.text:004032AD                 jnz     loc_4031F8
.text:004032B3                 mov     [esp+5Ch+var_2C], 0
.text:004032BB                 mov     [esp+5Ch+var_30], 0
.text:004032C3                 mov     [esp+5Ch+var_34], 0
.text:004032CB                 mov     [esp+5Ch+var_38], 0
.text:004032D3                 cmp     byte ptr [ecx], 0
.text:004032D6                 jz      loc_40354B
.text:004032DC                 inc     dword ptr [ebp+0]
.text:004032DF                 mov     [ebp+0Ch], ecx
.text:004032E2
.text:004032E2 loc_4032E2:                             ; CODE XREF: sub_402C90+8D4↓j
.text:004032E2                 mov     edi, [ebp+0Ch]
.text:004032E5                 mov     [ebp+14h], edi
.text:004032E8                 movzx   eax, byte ptr [edi]
.text:004032EB                 test    al, al
.text:004032ED                 jz      short loc_4032FF
.text:004032EF                 cmp     al, 3Dh ; '='
.text:004032F1                 jz      short loc_4032FF
.text:004032F3
.text:004032F3 loc_4032F3:                             ; CODE XREF: sub_402C90+66D↓j
.text:004032F3                 inc     edi
.text:004032F4                 movzx   eax, byte ptr [edi]
.text:004032F7                 test    al, al
.text:004032F9                 jz      short loc_4032FF
.text:004032FB                 cmp     al, 3Dh ; '='
.text:004032FD                 jnz     short loc_4032F3
.text:004032FF
.text:004032FF loc_4032FF:                             ; CODE XREF: sub_402C90+65D↑j
.text:004032FF                                         ; sub_402C90+661↑j ...
.text:004032FF                 mov     [esp+5Ch+var_3C], 0
.text:00403307                 mov     esi, [esp+5Ch+arg_C]
.text:0040330B                 mov     eax, [esi]
.text:0040330D                 test    eax, eax
.text:0040330F                 jz      loc_403490
.text:00403315                 mov     ecx, eax
.text:00403317
.text:00403317 loc_403317:                             ; CODE XREF: sub_402C90+6B3↓j
.text:00403317                 mov     ebx, [ebp+14h]
.text:0040331A                 mov     eax, edi
.text:0040331C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040331F                 sub     eax, ebx
.text:00403321                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403325                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403329                 call    strncmp
.text:0040332E                 test    eax, eax
.text:00403330                 jz      loc_4034F7
.text:00403336
.text:00403336 loc_403336:                             ; CODE XREF: sub_402C90+88C↓j
.text:00403336                                         ; sub_402C90+89D↓j
.text:00403336                 inc     [esp+5Ch+var_3C]
.text:0040333A                 add     esi, 10h
.text:0040333D                 mov     edx, [esi]
.text:0040333F                 test    edx, edx
.text:00403341                 mov     ecx, edx
.text:00403343                 jnz     short loc_403317
.text:00403345
.text:00403345 loc_403345:                             ; CODE XREF: sub_402C90+8B6↓j
.text:00403345                 mov     esi, [esp+5Ch+var_34]
.text:00403349                 test    esi, esi
.text:0040334B                 jz      short loc_403359
.text:0040334D                 mov     ebx, [esp+5Ch+var_30]
.text:00403351                 test    ebx, ebx
.text:00403353                 jz      loc_4034A1
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_402C90+6BB↑j
.text:00403359                 mov     esi, [esp+5Ch+var_2C]
.text:0040335D                 test    esi, esi
.text:0040335F                 jz      loc_403490
.text:00403365                 cmp     byte ptr [edi], 0
.text:00403368                 jz      loc_403410
.text:0040336E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403372                 mov     ebx, [ecx+4]
.text:00403375                 test    ebx, ebx
.text:00403377                 jz      short loc_4033B8
.text:00403379                 lea     edx, [edi+1]
.text:0040337C                 mov     [ebp+0Ch], edx
.text:0040337F
.text:0040337F loc_40337F:                             ; CODE XREF: sub_402C90+788↓j
.text:0040337F                                         ; sub_402C90+7A7↓j
.text:0040337F                 mov     edi, [ebp+14h]
.text:00403382                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403385                 call    strlen
.text:0040338A                 add     [ebp+14h], eax
.text:0040338D                 mov     eax, [esp+5Ch+arg_10]
.text:00403391                 test    eax, eax
.text:00403393                 jz      short loc_4033A0
.text:00403395                 mov     edx, [esp+5Ch+var_38]
.text:00403399                 mov     ebp, [esp+5Ch+arg_10]
.text:0040339D                 mov     [ebp+0], edx
.text:004033A0
.text:004033A0 loc_4033A0:                             ; CODE XREF: sub_402C90+703↑j
.text:004033A0                 mov     eax, [esp+5Ch+var_2C]
.text:004033A4                 mov     ecx, [eax+8]
.text:004033A7                 test    ecx, ecx
.text:004033A9                 jnz     loc_402F6A
.text:004033AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004033B3                 jmp     loc_402F62
.text:004033B8 ; ---------------------------------------------------------------------------
.text:004033B8
.text:004033B8 loc_4033B8:                             ; CODE XREF: sub_402C90+6E7↑j
.text:004033B8                 mov     eax, [esp+5Ch+var_14]
.text:004033BC                 test    eax, eax
.text:004033BE                 jnz     short loc_4033D3
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_402C90+779↓j
.text:004033C0                 mov     ecx, [ebp+14h]
.text:004033C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004033C6                 call    strlen
.text:004033CB                 add     [ebp+14h], eax
.text:004033CE                 jmp     loc_402FE8
.text:004033D3 ; ---------------------------------------------------------------------------
.text:004033D3
.text:004033D3 loc_4033D3:                             ; CODE XREF: sub_402C90+72E↑j
.text:004033D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004033DA                 call    ds:libintl_gettext
.text:004033E0                 mov     edx, [esp+5Ch+var_2C]
.text:004033E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004033E8                 mov     edi, [edx]
.text:004033EA                 mov     [esp+5Ch+var_50], edi
.text:004033EE                 mov     edi, ds:_iob
.text:004033F4                 mov     esi, [ebx]
.text:004033F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033FA                 add     edi, 40h ; '@'
.text:004033FD                 mov     [esp+5Ch+MaxCount], esi
.text:00403401                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403404                 call    fprintf
.text:00403409                 jmp     short loc_4033C0
.text:00403409 ; ---------------------------------------------------------------------------
.text:0040340B                 align 10h
.text:00403410
.text:00403410 loc_403410:                             ; CODE XREF: sub_402C90+6D8↑j
.text:00403410                 mov     esi, [esp+5Ch+var_2C]
.text:00403414                 cmp     dword ptr [esi+4], 1
.text:00403418                 jnz     loc_40337F
.text:0040341E                 mov     ecx, [ebp+0]
.text:00403421                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403425                 jge     short loc_40343C
.text:00403427                 mov     eax, [esp+5Ch+arg_4]
.text:0040342B                 lea     ebx, [ecx+1]
.text:0040342E                 mov     [ebp+0], ebx
.text:00403431                 mov     edi, [eax+ecx*4]
.text:00403434                 mov     [ebp+0Ch], edi
.text:00403437                 jmp     loc_40337F
.text:0040343C ; ---------------------------------------------------------------------------
.text:0040343C
.text:0040343C loc_40343C:                             ; CODE XREF: sub_402C90+795↑j
.text:0040343C                 mov     edx, [esp+5Ch+var_14]
.text:00403440                 test    edx, edx
.text:00403442                 jnz     short loc_403457
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_402C90+7FE↓j
.text:00403444                 mov     edx, [ebp+14h]
.text:00403447                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040344A                 call    strlen
.text:0040344F                 add     [ebp+14h], eax
.text:00403452                 jmp     loc_403079
.text:00403457 ; ---------------------------------------------------------------------------
.text:00403457
.text:00403457 loc_403457:                             ; CODE XREF: sub_402C90+7B2↑j
.text:00403457                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040345E                 call    ds:libintl_gettext
.text:00403464                 mov     ecx, [ebp+0]
.text:00403467                 mov     ebx, [esp+5Ch+arg_4]
.text:0040346B                 mov     edi, [ebx+ecx*4-4]
.text:0040346F                 mov     ecx, ds:_iob
.text:00403475                 mov     [esp+5Ch+var_50], edi
.text:00403479                 mov     esi, [ebx]
.text:0040347B                 add     ecx, 40h ; '@'
.text:0040347E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403482                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403485                 mov     [esp+5Ch+MaxCount], esi
.text:00403489                 call    fprintf
.text:0040348E                 jmp     short loc_403444
.text:00403490 ; ---------------------------------------------------------------------------
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_402C90+67F↑j
.text:00403490                                         ; sub_402C90+6CF↑j
.text:00403490                 mov     dword ptr [ebp+14h], 0
.text:00403497                 mov     eax, 57h ; 'W'
.text:0040349C                 jmp     loc_402DE7
.text:004034A1 ; ---------------------------------------------------------------------------
.text:004034A1
.text:004034A1 loc_4034A1:                             ; CODE XREF: sub_402C90+6C3↑j
.text:004034A1                 mov     edi, [esp+5Ch+var_14]
.text:004034A5                 test    edi, edi
.text:004034A7                 jnz     short loc_4034BF
.text:004034A9
.text:004034A9 loc_4034A9:                             ; CODE XREF: sub_402C90+865↓j
.text:004034A9                 mov     edx, [ebp+14h]
.text:004034AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004034AF                 call    strlen
.text:004034B4                 add     [ebp+14h], eax
.text:004034B7                 inc     dword ptr [ebp+0]
.text:004034BA                 jmp     loc_402FE8
.text:004034BF ; ---------------------------------------------------------------------------
.text:004034BF
.text:004034BF loc_4034BF:                             ; CODE XREF: sub_402C90+817↑j
.text:004034BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004034C6                 call    ds:libintl_gettext
.text:004034CC                 mov     ecx, [ebp+0]
.text:004034CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004034D3                 mov     edi, [ebx+ecx*4]
.text:004034D6                 mov     ecx, ds:_iob
.text:004034DC                 mov     [esp+5Ch+var_50], edi
.text:004034E0                 mov     esi, [ebx]
.text:004034E2                 add     ecx, 40h ; '@'
.text:004034E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004034EC                 mov     [esp+5Ch+MaxCount], esi
.text:004034F0                 call    fprintf
.text:004034F5                 jmp     short loc_4034A9
.text:004034F7 ; ---------------------------------------------------------------------------
.text:004034F7
.text:004034F7 loc_4034F7:                             ; CODE XREF: sub_402C90+6A0↑j
.text:004034F7                 mov     edx, [ebp+14h]
.text:004034FA                 mov     ebx, edi
.text:004034FC                 mov     ecx, [esi]
.text:004034FE                 sub     ebx, edx
.text:00403500                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403503                 call    strlen
.text:00403508                 cmp     ebx, eax
.text:0040350A                 jz      short loc_403532
.text:0040350C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403510                 test    ebx, ebx
.text:00403512                 jz      short loc_403521
.text:00403514                 mov     [esp+5Ch+var_34], 1
.text:0040351C                 jmp     loc_403336
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403521
.text:00403521 loc_403521:                             ; CODE XREF: sub_402C90+882↑j
.text:00403521                 mov     [esp+5Ch+var_2C], esi
.text:00403525                 mov     ecx, [esp+5Ch+var_3C]
.text:00403529                 mov     [esp+5Ch+var_38], ecx
.text:0040352D                 jmp     loc_403336
.text:00403532 ; ---------------------------------------------------------------------------
.text:00403532
.text:00403532 loc_403532:                             ; CODE XREF: sub_402C90+87A↑j
.text:00403532                 mov     [esp+5Ch+var_2C], esi
.text:00403536                 mov     eax, [esp+5Ch+var_3C]
.text:0040353A                 mov     [esp+5Ch+var_30], 1
.text:00403542                 mov     [esp+5Ch+var_38], eax
.text:00403546                 jmp     loc_403345
.text:0040354B ; ---------------------------------------------------------------------------
.text:0040354B
.text:0040354B loc_40354B:                             ; CODE XREF: sub_402C90+646↑j
.text:0040354B                 mov     edx, [ebp+0]
.text:0040354E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403552                 jz      short loc_403569
.text:00403554                 mov     ebx, [esp+5Ch+arg_4]
.text:00403558                 lea     esi, [edx+1]
.text:0040355B                 mov     [ebp+0], esi
.text:0040355E                 mov     edi, [ebx+edx*4]
.text:00403561                 mov     [ebp+0Ch], edi
.text:00403564                 jmp     loc_4032E2
.text:00403569 ; ---------------------------------------------------------------------------
.text:00403569
.text:00403569 loc_403569:                             ; CODE XREF: sub_402C90+8C2↑j
.text:00403569                 mov     edi, [esp+5Ch+var_14]
.text:0040356D                 test    edi, edi
.text:0040356F                 jnz     short loc_40358C
.text:00403571
.text:00403571 loc_403571:                             ; CODE XREF: sub_402C90+92C↓j
.text:00403571                 mov     [ebp+8], esi
.text:00403574                 mov     ebp, [esp+5Ch+Str]
.text:00403578                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040357C                 jz      short loc_403588
.text:0040357E                 mov     bl, 3Fh ; '?'
.text:00403580
.text:00403580 loc_403580:                             ; CODE XREF: sub_402C90+8FA↓j
.text:00403580                 movsx   eax, bl
.text:00403583                 jmp     loc_402DE7
.text:00403588 ; ---------------------------------------------------------------------------
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: sub_402C90+8EC↑j
.text:00403588                 mov     bl, 3Ah ; ':'
.text:0040358A                 jmp     short loc_403580
.text:0040358C ; ---------------------------------------------------------------------------
.text:0040358C
.text:0040358C loc_40358C:                             ; CODE XREF: sub_402C90+8DF↑j
.text:0040358C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403593                 call    ds:libintl_gettext
.text:00403599                 mov     [esp+5Ch+var_50], esi
.text:0040359D                 mov     edx, [esp+5Ch+arg_4]
.text:004035A1                 mov     ecx, ds:_iob
.text:004035A7                 mov     ebx, [edx]
.text:004035A9                 add     ecx, 40h ; '@'
.text:004035AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004035B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004035B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004035B7                 call    fprintf
.text:004035BC                 jmp     short loc_403571
.text:004035BC ; ---------------------------------------------------------------------------
.text:004035BE                 align 10h
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_402C90+54C↑j
.text:004035C0                                         ; sub_402C90+555↑j
.text:004035C0                 mov     eax, [esp+5Ch+var_14]
.text:004035C4                 test    eax, eax
.text:004035C6                 jz      short loc_4035FF
.text:004035C8                 mov     ebx, [ebp+1Ch]
.text:004035CB                 test    ebx, ebx
.text:004035CD                 jz      short loc_403607
.text:004035CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004035D6
.text:004035D6 loc_4035D6:                             ; CODE XREF: sub_402C90+97E↓j
.text:004035D6                 call    ds:libintl_gettext
.text:004035DC                 mov     [esp+5Ch+var_50], esi
.text:004035E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004035E4                 mov     edx, ds:_iob
.text:004035EA                 mov     esi, [ebx]
.text:004035EC                 add     edx, 40h ; '@'
.text:004035EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004035F3                 mov     [esp+5Ch+MaxCount], esi
.text:004035F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004035FA                 call    fprintf
.text:004035FF
.text:004035FF loc_4035FF:                             ; CODE XREF: sub_402C90+936↑j
.text:004035FF                 mov     [ebp+8], edi
.text:00403602                 jmp     loc_402FE8
.text:00403607 ; ---------------------------------------------------------------------------
.text:00403607
.text:00403607 loc_403607:                             ; CODE XREF: sub_402C90+93D↑j
.text:00403607                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040360E                 jmp     short loc_4035D6
.text:00403610 ; ---------------------------------------------------------------------------
.text:00403610
.text:00403610 loc_403610:                             ; CODE XREF: sub_402C90+26E↑j
.text:00403610                 mov     edi, [esp+5Ch+var_14]
.text:00403614                 test    edi, edi
.text:00403616                 jnz     short loc_40362E
.text:00403618
.text:00403618 loc_403618:                             ; CODE XREF: sub_402C90+9D4↓j
.text:00403618                 mov     edx, [ebp+14h]
.text:0040361B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040361E                 call    strlen
.text:00403623                 add     [ebp+14h], eax
.text:00403626                 inc     dword ptr [ebp+0]
.text:00403629                 jmp     loc_40316E
.text:0040362E ; ---------------------------------------------------------------------------
.text:0040362E
.text:0040362E loc_40362E:                             ; CODE XREF: sub_402C90+986↑j
.text:0040362E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403635                 call    ds:libintl_gettext
.text:0040363B                 mov     ebx, [ebp+0]
.text:0040363E                 mov     edi, [esp+5Ch+arg_4]
.text:00403642                 mov     ecx, [edi+ebx*4]
.text:00403645                 mov     ebx, ds:_iob
.text:0040364B                 mov     [esp+5Ch+var_50], ecx
.text:0040364F                 mov     esi, [edi]
.text:00403651                 add     ebx, 40h ; '@'
.text:00403654                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403658                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040365B                 mov     [esp+5Ch+MaxCount], esi
.text:0040365F                 call    fprintf
.text:00403664                 jmp     short loc_403618
.text:00403666 ; ---------------------------------------------------------------------------
.text:00403666
.text:00403666 loc_403666:                             ; CODE XREF: sub_402C90+246↑j
.text:00403666                 mov     ecx, [ebp+14h]
.text:00403669                 mov     ebx, edi
.text:0040366B                 mov     edx, [esi]
.text:0040366D                 sub     ebx, ecx
.text:0040366F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403672                 call    strlen
.text:00403677                 cmp     ebx, eax
.text:00403679                 jz      short loc_4036D1
.text:0040367B                 mov     ebx, [esp+5Ch+var_18]
.text:0040367F                 test    ebx, ebx
.text:00403681                 jz      short loc_4036C0
.text:00403683                 mov     edx, [esp+5Ch+arg_14]
.text:00403687                 test    edx, edx
.text:00403689                 jnz     short loc_403697
.text:0040368B                 mov     ecx, [esp+5Ch+var_18]
.text:0040368F                 mov     ebx, [esi+4]
.text:00403692                 cmp     [ecx+4], ebx
.text:00403695                 jz      short loc_4036A4
.text:00403697
.text:00403697 loc_403697:                             ; CODE XREF: sub_402C90+9F9↑j
.text:00403697                                         ; sub_402C90+A1A↓j ...
.text:00403697                 mov     [esp+5Ch+var_20], 1
.text:0040369F                 jmp     loc_402EDC
.text:004036A4 ; ---------------------------------------------------------------------------
.text:004036A4
.text:004036A4 loc_4036A4:                             ; CODE XREF: sub_402C90+A05↑j
.text:004036A4                 mov     edx, [esi+8]
.text:004036A7                 cmp     [ecx+8], edx
.text:004036AA                 jnz     short loc_403697
.text:004036AC                 mov     ebx, [esi+0Ch]
.text:004036AF                 cmp     [ecx+0Ch], ebx
.text:004036B2                 jnz     short loc_403697
.text:004036B4                 jmp     loc_402EDC
.text:004036B4 ; ---------------------------------------------------------------------------
.text:004036B9                 align 10h
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_402C90+9F1↑j
.text:004036C0                 mov     [esp+5Ch+var_18], esi
.text:004036C4                 mov     eax, [esp+5Ch+var_28]
.text:004036C8                 mov     [esp+5Ch+var_24], eax
.text:004036CC                 jmp     loc_402EDC
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: sub_402C90+9E9↑j
.text:004036D1                 mov     [esp+5Ch+var_18], esi
.text:004036D5                 mov     ecx, [esp+5Ch+var_28]
.text:004036D9                 mov     [esp+5Ch+var_1C], 1
.text:004036E1                 mov     [esp+5Ch+var_24], ecx
.text:004036E5                 jmp     loc_402EF0
.text:004036EA ; ---------------------------------------------------------------------------
.text:004036EA
.text:004036EA loc_4036EA:                             ; CODE XREF: sub_402C90+1BF↑j
.text:004036EA                 mov     eax, [esp+5Ch+Str]
.text:004036EE                 movsx   esi, dl
.text:004036F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004036F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004036F8                 call    strchr
.text:004036FD                 test    eax, eax
.text:004036FF                 jnz     loc_4031B0
.text:00403705                 jmp     loc_402E55
.text:0040370A ; ---------------------------------------------------------------------------
.text:0040370A
.text:0040370A loc_40370A:                             ; CODE XREF: sub_402C90+17C↑j
.text:0040370A                 mov     ecx, 1
.text:0040370F                 jmp     loc_402E12
.text:00403714 ; ---------------------------------------------------------------------------
.text:00403714
.text:00403714 loc_403714:                             ; CODE XREF: sub_402C90+D4↑j
.text:00403714                                         ; sub_402C90+130↑j
.text:00403714                 mov     eax, [ebp+20h]
.text:00403717                 cmp     eax, [ebp+24h]
.text:0040371A                 jz      loc_402DF0
.text:00403720                 mov     [ebp+0], eax
.text:00403723                 jmp     loc_402DF0
.text:00403728 ; ---------------------------------------------------------------------------
.text:00403728
.text:00403728 loc_403728:                             ; CODE XREF: sub_402C90+FE↑j
.text:00403728                 mov     [ebp+20h], eax
.text:0040372B                 jmp     loc_402DB0
.text:00403730 ; ---------------------------------------------------------------------------
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_402C90+CA↑j
.text:00403730                 mov     edx, [ebp+20h]
.text:00403733                 mov     eax, [ebp+24h]
.text:00403736                 cmp     edx, eax
.text:00403738                 jz      short loc_4037B0
.text:0040373A                 cmp     eax, ebx
.text:0040373C                 jz      short loc_403751
.text:0040373E                 mov     [esp+5Ch+Str2], ebp
.text:00403742                 mov     ebx, [esp+5Ch+arg_4]
.text:00403746                 mov     [esp+5Ch+Str1], ebx
.text:00403749                 call    sub_403940
.text:0040374E                 mov     ebx, [ebp+0]
.text:00403751
.text:00403751 loc_403751:                             ; CODE XREF: sub_402C90+AAC↑j
.text:00403751                                         ; sub_402C90+B22↓j ...
.text:00403751                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403755                 jge     short loc_4037A0
.text:00403757                 mov     esi, [esp+5Ch+arg_4]
.text:0040375B                 mov     eax, [esi+ebx*4]
.text:0040375E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403761                 jz      short loc_4037A8
.text:00403763                 lea     esi, [esi+0]
.text:00403769                 lea     edi, [edi+0]
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_402C90+AFC↓j
.text:00403770                                         ; sub_402C90+B1C↓j
.text:00403770                 lea     eax, [ebx+1]
.text:00403773                 mov     ebx, eax
.text:00403775                 mov     [ebp+0], eax
.text:00403778                 cmp     eax, [esp+5Ch+arg_0]
.text:0040377C                 jge     short loc_4037A0
.text:0040377E                 mov     edi, [esp+5Ch+arg_4]
.text:00403782                 mov     edx, [edi+eax*4]
.text:00403785                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403788                 jz      short loc_403790
.text:0040378A
.text:0040378A loc_40378A:                             ; CODE XREF: sub_402C90+B04↓j
.text:0040378A                 mov     ebx, eax
.text:0040378C                 jmp     short loc_403770
.text:0040378C ; ---------------------------------------------------------------------------
.text:0040378E                 align 10h
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_402C90+AF8↑j
.text:00403790                 cmp     byte ptr [edx+1], 0
.text:00403794                 jz      short loc_40378A
.text:00403796                 lea     esi, [esi+0]
.text:00403799                 lea     edi, [edi+0]
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: sub_402C90+AC5↑j
.text:004037A0                                         ; sub_402C90+AEC↑j ...
.text:004037A0                 mov     [ebp+24h], ebx
.text:004037A3                 jmp     loc_402D60
.text:004037A8 ; ---------------------------------------------------------------------------
.text:004037A8
.text:004037A8 loc_4037A8:                             ; CODE XREF: sub_402C90+AD1↑j
.text:004037A8                 cmp     byte ptr [eax+1], 0
.text:004037AC                 jz      short loc_403770
.text:004037AE                 jmp     short loc_4037A0
.text:004037B0 ; ---------------------------------------------------------------------------
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_402C90+AA8↑j
.text:004037B0                 cmp     edx, ebx
.text:004037B2                 jz      short loc_403751
.text:004037B4                 mov     [ebp+20h], ebx
.text:004037B7                 jmp     short loc_403751
.text:004037B9 ; ---------------------------------------------------------------------------
.text:004037B9
.text:004037B9 loc_4037B9:                             ; CODE XREF: sub_402C90+88↑j
.text:004037B9                 mov     dword ptr [ebp+18h], 0
.text:004037C0                 mov     esi, [esp+5Ch+Str]
.text:004037C4
.text:004037C4 loc_4037C4:                             ; CODE XREF: sub_402C90+B49↓j
.text:004037C4                 inc     esi
.text:004037C5                 jmp     loc_402D28
.text:004037C5 ; ---------------------------------------------------------------------------
.text:004037CA                 align 10h
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_402C90+80↑j
.text:004037D0                 mov     dword ptr [ebp+18h], 2
.text:004037D7                 mov     esi, ecx
.text:004037D9                 jmp     short loc_4037C4
.text:004037D9 ; ---------------------------------------------------------------------------
.text:004037DB                 align 10h
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_402C90+69↑j
.text:004037E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004037E7                 call    getenv
.text:004037EC                 test    eax, eax
.text:004037EE                 jz      loc_402D04
.text:004037F4                 jmp     loc_402CFF
.text:004037F4 ; ---------------------------------------------------------------------------
.text:004037F9                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_402C90+3F↑j
.text:00403800                 mov     dword ptr [ebp+0], 1
.text:00403807                 mov     ebx, 1
.text:0040380C                 jmp     loc_402CE0
.text:0040380C sub_402C90      endp
.text:0040380C
.text:00403811 ; ---------------------------------------------------------------------------
.text:00403811                 jmp     short sub_403820
.text:00403811 ; ---------------------------------------------------------------------------
.text:00403813                 align 10h
.text:00403820
.text:00403820 ; =============== S U B R O U T I N E =======================================
.text:00403820
.text:00403820
.text:00403820 ; int __cdecl sub_403820(int, int, char *, int, int, int, int)
.text:00403820 sub_403820      proc near               ; CODE XREF: .text:00403811↑j
.text:00403820                                         ; sub_403F60+3A↓p ...
.text:00403820
.text:00403820 var_2C          = dword ptr -2Ch
.text:00403820 var_28          = dword ptr -28h
.text:00403820 Str             = dword ptr -24h
.text:00403820 var_20          = dword ptr -20h
.text:00403820 var_1C          = dword ptr -1Ch
.text:00403820 var_18          = dword ptr -18h
.text:00403820 var_14          = dword ptr -14h
.text:00403820 var_10          = dword ptr -10h
.text:00403820 arg_0           = dword ptr  4
.text:00403820 arg_4           = dword ptr  8
.text:00403820 arg_8           = dword ptr  0Ch
.text:00403820 arg_C           = dword ptr  10h
.text:00403820 arg_10          = dword ptr  14h
.text:00403820 arg_14          = dword ptr  18h
.text:00403820 arg_18          = dword ptr  1Ch
.text:00403820
.text:00403820                 sub     esp, 2Ch
.text:00403823                 mov     edx, dword_410020
.text:00403829                 mov     [esp+2Ch+var_10], offset dword_411070 ; int
.text:00403831                 mov     ecx, dword_410024
.text:00403837                 mov     ds:dword_411070, edx
.text:0040383D                 mov     edx, [esp+2Ch+arg_18]
.text:00403841                 mov     ds:dword_411074, ecx
.text:00403847                 mov     ecx, [esp+2Ch+arg_14]
.text:0040384B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040384F                 mov     edx, [esp+2Ch+arg_10]
.text:00403853                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403857                 mov     ecx, [esp+2Ch+arg_C]
.text:0040385B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040385F                 mov     edx, [esp+2Ch+arg_8]
.text:00403863                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403867                 mov     ecx, [esp+2Ch+arg_4]
.text:0040386B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040386F                 mov     edx, [esp+2Ch+arg_0]
.text:00403873                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403877                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040387A                 call    sub_402C90
.text:0040387F                 mov     ecx, ds:dword_411070
.text:00403885                 mov     dword_410020, ecx
.text:0040388B                 mov     ecx, ds:dword_41107C
.text:00403891                 mov     ds:dword_411C10, ecx
.text:00403897                 mov     ecx, ds:dword_411078
.text:0040389D                 mov     dword_410028, ecx
.text:004038A3                 add     esp, 2Ch
.text:004038A6                 retn
.text:004038A6 sub_403820      endp
.text:004038A6
.text:004038A6 ; ---------------------------------------------------------------------------
.text:004038A7                 align 10h
.text:004038B0                 sub     esp, 2Ch
.text:004038B3                 mov     edx, dword_410020
.text:004038B9                 mov     dword ptr [esp+1Ch], offset dword_411070
.text:004038C1                 mov     ecx, dword_410024
.text:004038C7                 mov     dword ptr [esp+18h], 1
.text:004038CF                 mov     ds:dword_411070, edx
.text:004038D5                 mov     edx, [esp+38h]
.text:004038D9                 mov     ds:dword_411074, ecx
.text:004038DF                 mov     ecx, [esp+34h]
.text:004038E3                 mov     [esp+8], edx
.text:004038E7                 mov     edx, [esp+30h]
.text:004038EB                 mov     [esp+4], ecx
.text:004038EF                 mov     dword ptr [esp+14h], 0
.text:004038F7                 mov     dword ptr [esp+10h], 0
.text:004038FF                 mov     dword ptr [esp+0Ch], 0
.text:00403907                 mov     [esp], edx
.text:0040390A                 call    sub_402C90
.text:0040390F                 mov     ecx, ds:dword_411070
.text:00403915                 mov     dword_410020, ecx
.text:0040391B                 mov     ecx, ds:dword_41107C
.text:00403921                 mov     ds:dword_411C10, ecx
.text:00403927                 mov     ecx, ds:dword_411078
.text:0040392D                 mov     dword_410028, ecx
.text:00403933                 add     esp, 2Ch
.text:00403936                 retn
.text:00403936 ; ---------------------------------------------------------------------------
.text:00403937                 align 10h
.text:00403940
.text:00403940 ; =============== S U B R O U T I N E =======================================
.text:00403940
.text:00403940
.text:00403940 sub_403940      proc near               ; CODE XREF: sub_402C90+113↑p
.text:00403940                                         ; sub_402C90+AB9↑p
.text:00403940
.text:00403940 var_2C          = dword ptr -2Ch
.text:00403940 var_28          = dword ptr -28h
.text:00403940 var_24          = dword ptr -24h
.text:00403940 var_20          = dword ptr -20h
.text:00403940 var_1C          = dword ptr -1Ch
.text:00403940 var_18          = dword ptr -18h
.text:00403940 var_14          = dword ptr -14h
.text:00403940 arg_0           = dword ptr  4
.text:00403940 arg_4           = dword ptr  8
.text:00403940
.text:00403940                 push    ebp
.text:00403941                 push    edi
.text:00403942                 push    esi
.text:00403943                 push    ebx
.text:00403944                 sub     esp, 1Ch
.text:00403947                 mov     ecx, [esp+2Ch+arg_4]
.text:0040394B                 mov     eax, [esp+2Ch+arg_4]
.text:0040394F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403953                 mov     edx, [ecx+20h]
.text:00403956                 mov     edi, [esp+2Ch+arg_0]
.text:0040395A                 mov     ecx, [ebx]
.text:0040395C                 mov     [esp+2Ch+var_2C], edx
.text:0040395F                 mov     [esp+2Ch+var_14], edx
.text:00403963                 mov     edx, [eax+24h]
.text:00403966                 mov     [esp+2Ch+var_28], ecx
.text:0040396A                 mov     [esp+2Ch+var_1C], ecx
.text:0040396E                 cmp     ecx, edx
.text:00403970                 mov     [esp+2Ch+var_18], edx
.text:00403974                 jle     short loc_4039F0
.text:00403976                 mov     esi, [esp+2Ch+var_2C]
.text:00403979                 cmp     edx, esi
.text:0040397B                 jle     short loc_4039F0
.text:0040397D                 lea     esi, [esi+0]
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_403940+A1↓j
.text:00403980                 mov     ebx, [esp+2Ch+var_1C]
.text:00403984                 mov     edx, [esp+2Ch+var_18]
.text:00403988                 mov     ebp, [esp+2Ch+var_18]
.text:0040398C                 mov     eax, [esp+2Ch+var_14]
.text:00403990                 sub     ebx, edx
.text:00403992                 mov     [esp+2Ch+var_20], ebx
.text:00403996                 sub     ebp, eax
.text:00403998                 cmp     ebx, ebp
.text:0040399A                 jle     short loc_403A15
.text:0040399C                 xor     esi, esi
.text:0040399E                 cmp     esi, ebp
.text:004039A0                 jge     short loc_4039CD
.text:004039A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004039A6                 sub     ecx, ebp
.text:004039A8                 mov     [esp+2Ch+var_24], ecx
.text:004039AC                 lea     esi, [esi+0]
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403940+8B↓j
.text:004039B0                 mov     ecx, [esp+2Ch+var_14]
.text:004039B4                 mov     edx, [esp+2Ch+var_24]
.text:004039B8                 add     ecx, esi
.text:004039BA                 add     edx, esi
.text:004039BC                 mov     ebx, [edi+ecx*4]
.text:004039BF                 mov     eax, [edi+edx*4]
.text:004039C2                 inc     esi
.text:004039C3                 cmp     esi, ebp
.text:004039C5                 mov     [edi+ecx*4], eax
.text:004039C8                 mov     [edi+edx*4], ebx
.text:004039CB                 jl      short loc_4039B0
.text:004039CD
.text:004039CD loc_4039CD:                             ; CODE XREF: sub_403940+60↑j
.text:004039CD                 sub     [esp+2Ch+var_1C], ebp
.text:004039D1
.text:004039D1 loc_4039D1:                             ; CODE XREF: sub_403940+107↓j
.text:004039D1                 mov     eax, [esp+2Ch+var_18]
.text:004039D5                 cmp     [esp+2Ch+var_1C], eax
.text:004039D9                 jle     short loc_4039F0
.text:004039DB                 mov     ebp, [esp+2Ch+var_14]
.text:004039DF                 cmp     eax, ebp
.text:004039E1                 jg      short loc_403980
.text:004039E3                 lea     esi, [esi+0]
.text:004039E9                 lea     edi, [edi+0]
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_403940+34↑j
.text:004039F0                                         ; sub_403940+3B↑j ...
.text:004039F0                 mov     esi, [esp+2Ch+var_28]
.text:004039F4                 mov     ecx, [esp+2Ch+var_18]
.text:004039F8                 mov     eax, [esp+2Ch+var_2C]
.text:004039FB                 mov     edi, [esp+2Ch+arg_4]
.text:004039FF                 mov     edx, [esp+2Ch+var_28]
.text:00403A03                 sub     esi, ecx
.text:00403A05                 add     esi, eax
.text:00403A07                 mov     [edi+20h], esi
.text:00403A0A                 mov     [edi+24h], edx
.text:00403A0D                 add     esp, 1Ch
.text:00403A10                 pop     ebx
.text:00403A11                 pop     esi
.text:00403A12                 pop     edi
.text:00403A13                 pop     ebp
.text:00403A14                 retn
.text:00403A15 ; ---------------------------------------------------------------------------
.text:00403A15
.text:00403A15 loc_403A15:                             ; CODE XREF: sub_403940+5A↑j
.text:00403A15                 xor     esi, esi
.text:00403A17                 cmp     esi, [esp+2Ch+var_20]
.text:00403A1B                 jge     short loc_403A3F
.text:00403A1D                 lea     esi, [esi+0]
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403940+FD↓j
.text:00403A20                 mov     ebx, [esp+2Ch+var_14]
.text:00403A24                 mov     ebp, [esp+2Ch+var_18]
.text:00403A28                 add     ebx, esi
.text:00403A2A                 add     ebp, esi
.text:00403A2C                 mov     edx, [edi+ebx*4]
.text:00403A2F                 inc     esi
.text:00403A30                 cmp     esi, [esp+2Ch+var_20]
.text:00403A34                 mov     ecx, [edi+ebp*4]
.text:00403A37                 mov     [edi+ebx*4], ecx
.text:00403A3A                 mov     [edi+ebp*4], edx
.text:00403A3D                 jl      short loc_403A20
.text:00403A3F
.text:00403A3F loc_403A3F:                             ; CODE XREF: sub_403940+DB↑j
.text:00403A3F                 mov     esi, [esp+2Ch+var_20]
.text:00403A43                 add     [esp+2Ch+var_14], esi
.text:00403A47                 jmp     short loc_4039D1
.text:00403A47 sub_403940      endp
.text:00403A47
.text:00403A47 ; ---------------------------------------------------------------------------
.text:00403A49                 align 20h
.text:00403A60 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403A60                                         ; DATA XREF: .data:off_410030↓o
.text:00403A92 ; const char aSSS[]
.text:00403A92 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403D50+50↓o
.text:00403A9E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403A9E                                         ; DATA XREF: sub_403D50:loc_403DF1↓o
.text:00403AAE                 align 20h
.text:00403AC0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403AC0                                         ; DATA XREF: sub_403D50+100↓o
.text:00403AC0                 db 'ere is NO',0Ah
.text:00403AC0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403AC0                 db 'R PURPOSE.',0Ah,0
.text:00403B58 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403B58                                         ; DATA XREF: sub_403D50:loc_403E91↓o
.text:00403B6F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403B6F                                         ; DATA XREF: sub_403D50:loc_403E9D↓o
.text:00403B8B                 align 20h
.text:00403BA0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403BA0                                         ; DATA XREF: sub_403D50:loc_403EA9↓o
.text:00403BA0                 db 'and %s.',0Ah,0
.text:00403BC0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403BC0                                         ; DATA XREF: sub_403D50:loc_403EB5↓o
.text:00403BC0                 db '%s, and %s.',0Ah,0
.text:00403BE4                 align 20h
.text:00403C00 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403C00                                         ; DATA XREF: sub_403D50:loc_403EC1↓o
.text:00403C00                 db '%s, %s, and %s.',0Ah,0
.text:00403C28                 align 20h
.text:00403C40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403C40                                         ; DATA XREF: sub_403D50:loc_403ECD↓o
.text:00403C40                 db '%s, %s, %s, and %s.',0Ah,0
.text:00403C6C                 align 20h
.text:00403C80 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403C80                                         ; DATA XREF: sub_403D50:loc_403ED9↓o
.text:00403C80                 db '%s, %s, %s, %s,',0Ah
.text:00403C80                 db 'and %s.',0Ah,0
.text:00403CB0                 align 20h
.text:00403CC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403CC0                                         ; DATA XREF: sub_403D50:loc_403EE5↓o
.text:00403CC0                 db '%s, %s, %s, %s,',0Ah
.text:00403CC0                 db '%s, and %s.',0Ah,0
.text:00403CF4                 align 10h
.text:00403D00 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403D00                                         ; DATA XREF: sub_403D50:def_403DBD↓o
.text:00403D00                 db '%s, %s, %s, %s,',0Ah
.text:00403D00                 db '%s, %s, and others.',0Ah,0
.text:00403D3C ; const char aSS_0[]
.text:00403D3C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_403D50+1B5↓o
.text:00403D43                 align 10h
.text:00403D50
.text:00403D50 ; =============== S U B R O U T I N E =======================================
.text:00403D50
.text:00403D50
.text:00403D50 ; int __cdecl sub_403D50(FILE *, FILE *, int, int, va_list)
.text:00403D50 sub_403D50      proc near               ; CODE XREF: sub_403F20+2A↓p
.text:00403D50
.text:00403D50 Stream          = dword ptr -2Ch
.text:00403D50 Format          = dword ptr -28h
.text:00403D50 ArgList         = dword ptr -24h
.text:00403D50 var_20          = dword ptr -20h
.text:00403D50 var_1C          = dword ptr -1Ch
.text:00403D50 var_14          = dword ptr -14h
.text:00403D50 arg_0           = dword ptr  4
.text:00403D50 arg_4           = dword ptr  8
.text:00403D50 arg_8           = dword ptr  0Ch
.text:00403D50 arg_C           = dword ptr  10h
.text:00403D50 arg_10          = dword ptr  14h
.text:00403D50
.text:00403D50                 push    ebp
.text:00403D51                 push    edi
.text:00403D52                 push    esi
.text:00403D53                 push    ebx
.text:00403D54                 sub     esp, 1Ch
.text:00403D57                 xor     ebx, ebx
.text:00403D59                 mov     edi, [esp+2Ch+arg_10]
.text:00403D5D                 mov     edx, [esp+2Ch+arg_8]
.text:00403D61                 mov     esi, [esp+2Ch+arg_0]
.text:00403D65                 mov     eax, [edi]
.text:00403D67                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D6B                 mov     [esp+2Ch+var_14], edx
.text:00403D6F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403D73                 lea     edx, [edi+4]
.text:00403D76                 test    eax, eax
.text:00403D78                 jz      short loc_403D8C
.text:00403D7A                 lea     esi, [esi+0]
.text:00403D80
.text:00403D80 loc_403D80:                             ; CODE XREF: sub_403D50+3A↓j
.text:00403D80                 mov     eax, edx
.text:00403D82                 inc     ebx
.text:00403D83                 mov     eax, [eax]
.text:00403D85                 add     edx, 4
.text:00403D88                 test    eax, eax
.text:00403D8A                 jnz     short loc_403D80
.text:00403D8C
.text:00403D8C loc_403D8C:                             ; CODE XREF: sub_403D50+28↑j
.text:00403D8C                 test    ecx, ecx
.text:00403D8E                 jz      loc_403EFD
.text:00403D94                 mov     [esp+2Ch+var_1C], ebp
.text:00403D98                 mov     edx, [esp+2Ch+var_14]
.text:00403D9C                 mov     [esp+2Ch+ArgList], ecx
.text:00403DA0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403DA8                 mov     [esp+2Ch+var_20], edx
.text:00403DAC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403DAF                 call    fprintf
.text:00403DB4
.text:00403DB4 loc_403DB4:                             ; CODE XREF: sub_403D50+1C9↓j
.text:00403DB4                 cmp     ebx, 9          ; switch 10 cases
.text:00403DB7                 ja      def_403DBD      ; jumptable 00403DBD default case
.text:00403DBD                 jmp     ds:jpt_403DBD[ebx*4] ; switch jump
.text:00403DBD ; ---------------------------------------------------------------------------
.text:00403DC4 jpt_403DBD      dd offset loc_403DEC    ; DATA XREF: sub_403D50+6D↑r
.text:00403DC4                 dd offset loc_403DF1    ; jump table for switch statement
.text:00403DC4                 dd offset loc_403E91
.text:00403DC4                 dd offset loc_403E9D
.text:00403DC4                 dd offset loc_403EA9
.text:00403DC4                 dd offset loc_403EB5
.text:00403DC4                 dd offset loc_403EC1
.text:00403DC4                 dd offset loc_403ECD
.text:00403DC4                 dd offset loc_403ED9
.text:00403DC4                 dd offset loc_403EE5
.text:00403DEC ; ---------------------------------------------------------------------------
.text:00403DEC
.text:00403DEC loc_403DEC:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403DEC                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403DEC                 call    abort           ; jumptable 00403DBD case 0
.text:00403DF1 ; ---------------------------------------------------------------------------
.text:00403DF1
.text:00403DF1 loc_403DF1:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403DF1                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403DF1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00403DBD case 1
.text:00403DF8                 nop
.text:00403DF9                 lea     esi, [esi+0]
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_403D50+148↓j
.text:00403E00                                         ; sub_403D50+154↓j ...
.text:00403E00                 call    ds:libintl_gettext
.text:00403E06                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403E0A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403E0D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403E11                 call    vfprintf
.text:00403E16                 mov     ebx, [esi+4]
.text:00403E19                 dec     ebx
.text:00403E1A                 test    ebx, ebx
.text:00403E1C                 mov     [esi+4], ebx
.text:00403E1F                 js      short loc_403E7F
.text:00403E21                 mov     edi, [esi]
.text:00403E23                 mov     byte ptr [edi], 0Ah
.text:00403E26                 inc     dword ptr [esi]
.text:00403E28
.text:00403E28 loc_403E28:                             ; CODE XREF: sub_403D50+13F↓j
.text:00403E28                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403E2C                 mov     edx, off_410030 ; "Copyright (C) 2005 Free Software Founda"...
.text:00403E32                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403E35                 call    fputs
.text:00403E3A                 mov     ebp, [esi+4]
.text:00403E3D                 dec     ebp
.text:00403E3E                 test    ebp, ebp
.text:00403E40                 mov     [esi+4], ebp
.text:00403E43                 js      short loc_403E6D
.text:00403E45                 mov     ecx, [esi]
.text:00403E47                 mov     byte ptr [ecx], 0Ah
.text:00403E4A                 inc     dword ptr [esi]
.text:00403E4C
.text:00403E4C loc_403E4C:                             ; CODE XREF: sub_403D50+12D↓j
.text:00403E4C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403E50                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403E57                 call    ds:libintl_gettext
.text:00403E5D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403E61                 add     esp, 1Ch
.text:00403E64                 pop     ebx
.text:00403E65                 pop     esi
.text:00403E66                 pop     edi
.text:00403E67                 pop     ebp
.text:00403E68                 jmp     fputs
.text:00403E6D ; ---------------------------------------------------------------------------
.text:00403E6D
.text:00403E6D loc_403E6D:                             ; CODE XREF: sub_403D50+F3↑j
.text:00403E6D                 mov     [esp+2Ch+Format], esi ; File
.text:00403E71                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403E78                 call    _flsbuf
.text:00403E7D                 jmp     short loc_403E4C
.text:00403E7F ; ---------------------------------------------------------------------------
.text:00403E7F
.text:00403E7F loc_403E7F:                             ; CODE XREF: sub_403D50+CF↑j
.text:00403E7F                 mov     [esp+2Ch+Format], esi ; File
.text:00403E83                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403E8A                 call    _flsbuf
.text:00403E8F                 jmp     short loc_403E28
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403E91                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403E91                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00403DBD case 2
.text:00403E98                 jmp     loc_403E00
.text:00403E9D ; ---------------------------------------------------------------------------
.text:00403E9D
.text:00403E9D loc_403E9D:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403E9D                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403E9D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00403DBD case 3
.text:00403EA4                 jmp     loc_403E00
.text:00403EA9 ; ---------------------------------------------------------------------------
.text:00403EA9
.text:00403EA9 loc_403EA9:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403EA9                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403EA9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00403DBD case 4
.text:00403EB0                 jmp     loc_403E00
.text:00403EB5 ; ---------------------------------------------------------------------------
.text:00403EB5
.text:00403EB5 loc_403EB5:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403EB5                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403EB5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00403DBD case 5
.text:00403EBC                 jmp     loc_403E00
.text:00403EC1 ; ---------------------------------------------------------------------------
.text:00403EC1
.text:00403EC1 loc_403EC1:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403EC1                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403EC1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00403DBD case 6
.text:00403EC8                 jmp     loc_403E00
.text:00403ECD ; ---------------------------------------------------------------------------
.text:00403ECD
.text:00403ECD loc_403ECD:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403ECD                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403ECD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00403DBD case 7
.text:00403ED4                 jmp     loc_403E00
.text:00403ED9 ; ---------------------------------------------------------------------------
.text:00403ED9
.text:00403ED9 loc_403ED9:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403ED9                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403ED9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00403DBD case 8
.text:00403EE0                 jmp     loc_403E00
.text:00403EE5 ; ---------------------------------------------------------------------------
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: sub_403D50+6D↑j
.text:00403EE5                                         ; DATA XREF: sub_403D50:jpt_403DBD↑o
.text:00403EE5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00403DBD case 9
.text:00403EEC                 jmp     loc_403E00
.text:00403EF1 ; ---------------------------------------------------------------------------
.text:00403EF1
.text:00403EF1 def_403DBD:                             ; CODE XREF: sub_403D50+67↑j
.text:00403EF1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00403DBD default case
.text:00403EF8                 jmp     loc_403E00
.text:00403EFD ; ---------------------------------------------------------------------------
.text:00403EFD
.text:00403EFD loc_403EFD:                             ; CODE XREF: sub_403D50+3E↑j
.text:00403EFD                 mov     [esp+2Ch+var_20], ebp
.text:00403F01                 mov     ecx, [esp+2Ch+var_14]
.text:00403F05                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:00403F0D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403F10                 mov     [esp+2Ch+ArgList], ecx
.text:00403F14                 call    fprintf
.text:00403F19                 jmp     loc_403DB4
.text:00403F19 sub_403D50      endp
.text:00403F19
.text:00403F19 ; ---------------------------------------------------------------------------
.text:00403F1E                 align 10h
.text:00403F20
.text:00403F20 ; =============== S U B R O U T I N E =======================================
.text:00403F20
.text:00403F20
.text:00403F20 ; int __cdecl sub_403F20(FILE *, FILE *, int, int, char)
.text:00403F20 sub_403F20      proc near               ; CODE XREF: sub_4017F0+257↑p
.text:00403F20
.text:00403F20 var_1C          = dword ptr -1Ch
.text:00403F20 var_18          = dword ptr -18h
.text:00403F20 var_14          = dword ptr -14h
.text:00403F20 var_10          = dword ptr -10h
.text:00403F20 var_C           = dword ptr -0Ch
.text:00403F20 arg_0           = dword ptr  4
.text:00403F20 arg_4           = dword ptr  8
.text:00403F20 arg_8           = dword ptr  0Ch
.text:00403F20 arg_C           = dword ptr  10h
.text:00403F20 arg_10          = byte ptr  14h
.text:00403F20
.text:00403F20                 sub     esp, 1Ch
.text:00403F23                 mov     edx, [esp+1Ch+arg_C]
.text:00403F27                 lea     ecx, [esp+1Ch+arg_10]
.text:00403F2B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00403F2F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403F33                 mov     [esp+1Ch+var_10], edx ; int
.text:00403F37                 mov     edx, [esp+1Ch+arg_4]
.text:00403F3B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00403F3F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403F43                 mov     edx, [esp+1Ch+arg_0]
.text:00403F47                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00403F4A                 call    sub_403D50
.text:00403F4F                 add     esp, 1Ch
.text:00403F52                 retn
.text:00403F52 sub_403F20      endp
.text:00403F52
.text:00403F52 ; ---------------------------------------------------------------------------
.text:00403F53                 align 10h
.text:00403F60
.text:00403F60 ; =============== S U B R O U T I N E =======================================
.text:00403F60
.text:00403F60
.text:00403F60 ; int __cdecl sub_403F60(int, int, char *, int, int)
.text:00403F60 sub_403F60      proc near               ; CODE XREF: sub_4017F0+8F↑p
.text:00403F60
.text:00403F60 var_1C          = dword ptr -1Ch
.text:00403F60 var_18          = dword ptr -18h
.text:00403F60 var_14          = dword ptr -14h
.text:00403F60 var_10          = dword ptr -10h
.text:00403F60 var_C           = dword ptr -0Ch
.text:00403F60 var_8           = dword ptr -8
.text:00403F60 var_4           = dword ptr -4
.text:00403F60 arg_0           = dword ptr  4
.text:00403F60 arg_4           = dword ptr  8
.text:00403F60 arg_8           = dword ptr  0Ch
.text:00403F60 arg_C           = dword ptr  10h
.text:00403F60 arg_10          = dword ptr  14h
.text:00403F60
.text:00403F60                 sub     esp, 1Ch
.text:00403F63                 mov     edx, [esp+1Ch+arg_C]
.text:00403F67                 mov     [esp+1Ch+var_4], 0 ; int
.text:00403F6F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403F73                 mov     [esp+1Ch+var_8], 0 ; int
.text:00403F7B                 mov     [esp+1Ch+var_10], edx ; int
.text:00403F7F                 mov     edx, [esp+1Ch+arg_4]
.text:00403F83                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403F87                 mov     ecx, [esp+1Ch+arg_8]
.text:00403F8B                 mov     [esp+1Ch+var_18], edx ; int
.text:00403F8F                 mov     edx, [esp+1Ch+arg_0]
.text:00403F93                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403F97                 mov     [esp+1Ch+var_1C], edx ; int
.text:00403F9A                 call    sub_403820
.text:00403F9F                 add     esp, 1Ch
.text:00403FA2                 retn
.text:00403FA2 sub_403F60      endp
.text:00403FA2
.text:00403FA2 ; ---------------------------------------------------------------------------
.text:00403FA3                 align 10h
.text:00403FB0                 sub     esp, 2Ch
.text:00403FB3                 mov     edx, [esp+44h]
.text:00403FB7                 mov     dword ptr [esp+18h], 0
.text:00403FBF                 mov     ecx, [esp+40h]
.text:00403FC3                 mov     dword ptr [esp+14h], 0
.text:00403FCB                 mov     [esp+1Ch], edx
.text:00403FCF                 mov     edx, [esp+3Ch]
.text:00403FD3                 mov     [esp+10h], ecx
.text:00403FD7                 mov     ecx, [esp+38h]
.text:00403FDB                 mov     [esp+0Ch], edx
.text:00403FDF                 mov     edx, [esp+34h]
.text:00403FE3                 mov     [esp+8], ecx
.text:00403FE7                 mov     [esp+4], edx
.text:00403FEB                 mov     edx, [esp+30h]
.text:00403FEF                 mov     [esp], edx
.text:00403FF2                 call    sub_402C90
.text:00403FF7                 add     esp, 2Ch
.text:00403FFA                 retn
.text:00403FFA ; ---------------------------------------------------------------------------
.text:00403FFB                 align 10h
.text:00404000                 sub     esp, 1Ch
.text:00404003                 mov     edx, [esp+2Ch]
.text:00404007                 mov     dword ptr [esp+18h], 0
.text:0040400F                 mov     ecx, [esp+30h]
.text:00404013                 mov     dword ptr [esp+14h], 1
.text:0040401B                 mov     [esp+0Ch], edx
.text:0040401F                 mov     edx, [esp+24h]
.text:00404023                 mov     [esp+10h], ecx
.text:00404027                 mov     ecx, [esp+28h]
.text:0040402B                 mov     [esp+4], edx
.text:0040402F                 mov     edx, [esp+20h]
.text:00404033                 mov     [esp+8], ecx
.text:00404037                 mov     [esp], edx
.text:0040403A                 call    sub_403820
.text:0040403F                 add     esp, 1Ch
.text:00404042                 retn
.text:00404042 ; ---------------------------------------------------------------------------
.text:00404043                 align 10h
.text:00404050                 sub     esp, 2Ch
.text:00404053                 mov     edx, [esp+44h]
.text:00404057                 mov     dword ptr [esp+18h], 0
.text:0040405F                 mov     ecx, [esp+40h]
.text:00404063                 mov     dword ptr [esp+14h], 1
.text:0040406B                 mov     [esp+1Ch], edx
.text:0040406F                 mov     edx, [esp+3Ch]
.text:00404073                 mov     [esp+10h], ecx
.text:00404077                 mov     ecx, [esp+38h]
.text:0040407B                 mov     [esp+0Ch], edx
.text:0040407F                 mov     edx, [esp+34h]
.text:00404083                 mov     [esp+8], ecx
.text:00404087                 mov     [esp+4], edx
.text:0040408B                 mov     edx, [esp+30h]
.text:0040408F                 mov     [esp], edx
.text:00404092                 call    sub_402C90
.text:00404097                 add     esp, 2Ch
.text:0040409A                 retn
.text:0040409A ; ---------------------------------------------------------------------------
.text:0040409B                 align 10h
.text:004040A0                 mov     edx, [esp+4]
.text:004040A4                 mov     ds:dword_4110A0, edx
.text:004040AA                 retn
.text:004040AA ; ---------------------------------------------------------------------------
.text:004040AB aWriteError     db 'write error',0      ; DATA XREF: sub_4040D0:loc_404119↓o
.text:004040B7 ; const char aSS_1[]
.text:004040B7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_4040D0+77↓o
.text:004040BE ; const char aS_5[]
.text:004040BE aS_5            db '%s',0               ; DATA XREF: sub_4040D0+A0↓o
.text:004040C1 ; ---------------------------------------------------------------------------
.text:004040C1                 jmp     short sub_4040D0
.text:004040C1 ; ---------------------------------------------------------------------------
.text:004040C3                 align 10h
.text:004040D0
.text:004040D0 ; =============== S U B R O U T I N E =======================================
.text:004040D0
.text:004040D0
.text:004040D0 ; void __cdecl sub_4040D0()
.text:004040D0 sub_4040D0      proc near               ; CODE XREF: .text:004040C1↑j
.text:004040D0                                         ; DATA XREF: sub_4017F0+5C↑o
.text:004040D0
.text:004040D0 Stream          = dword ptr -2Ch
.text:004040D0 ErrorMessage    = dword ptr -28h
.text:004040D0 var_24          = dword ptr -24h
.text:004040D0 var_20          = byte ptr -20h
.text:004040D0 var_1C          = dword ptr -1Ch
.text:004040D0 var_9           = byte ptr -9
.text:004040D0
.text:004040D0                 push    esi
.text:004040D1                 push    ebx
.text:004040D2                 sub     esp, 24h
.text:004040D5                 mov     edx, ds:_iob
.text:004040DB                 mov     ecx, [edx+2Ch]
.text:004040DE                 lea     esi, [edx+20h]
.text:004040E1                 shr     ecx, 5
.text:004040E4                 mov     bl, cl
.text:004040E6                 mov     ecx, [edx+20h]
.text:004040E9                 and     bl, 1
.text:004040EC                 cmp     ecx, [esi+8]
.text:004040EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004040F2                 setz    [esp+2Ch+var_9]
.text:004040F7                 call    fclose
.text:004040FC                 test    eax, eax
.text:004040FE                 setnz   al
.text:00404101                 test    bl, bl
.text:00404103                 jnz     loc_404193
.text:00404109                 test    al, al
.text:0040410B                 jz      short loc_404160
.text:0040410D
.text:0040410D loc_40410D:                             ; CODE XREF: sub_4040D0+CD↓j
.text:0040410D                 call    _errno
.text:00404112                 mov     esi, [eax]
.text:00404114
.text:00404114 loc_404114:                             ; CODE XREF: sub_4040D0+C7↓j
.text:00404114                 cmp     esi, 9
.text:00404117                 jz      short loc_404186
.text:00404119
.text:00404119 loc_404119:                             ; CODE XREF: sub_4040D0+B8↓j
.text:00404119                                         ; sub_4040D0+C1↓j
.text:00404119                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404120                 call    ds:libintl_gettext
.text:00404126                 mov     ebx, eax
.text:00404128                 mov     eax, ds:dword_4110A0
.text:0040412D                 test    eax, eax
.text:0040412F                 jz      short loc_404166
.text:00404131                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404134                 call    sub_405820
.text:00404139                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040413D                 mov     edx, Code
.text:00404143                 mov     [esp+2Ch+var_1C], ebx
.text:00404147                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040414F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404153                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404156                 call    sub_405AE0
.text:0040415B                 nop
.text:0040415C                 lea     esi, [esi+0]
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: sub_4040D0+3B↑j
.text:00404160                                         ; sub_4040D0+B4↓j ...
.text:00404160                 add     esp, 24h
.text:00404163                 pop     ebx
.text:00404164                 pop     esi
.text:00404165                 retn
.text:00404166 ; ---------------------------------------------------------------------------
.text:00404166
.text:00404166 loc_404166:                             ; CODE XREF: sub_4040D0+5F↑j
.text:00404166                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040416A                 mov     ebx, Code
.text:00404170                 mov     [esp+2Ch+var_24], offset aS_5 ; "%s"
.text:00404178                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040417C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040417F                 call    sub_405AE0
.text:00404184                 jmp     short loc_404160
.text:00404186 ; ---------------------------------------------------------------------------
.text:00404186
.text:00404186 loc_404186:                             ; CODE XREF: sub_4040D0+47↑j
.text:00404186                 test    bl, bl
.text:00404188                 jnz     short loc_404119
.text:0040418A                 cmp     [esp+2Ch+var_9], 0
.text:0040418F                 jnz     short loc_404160
.text:00404191                 jmp     short loc_404119
.text:00404193 ; ---------------------------------------------------------------------------
.text:00404193
.text:00404193 loc_404193:                             ; CODE XREF: sub_4040D0+33↑j
.text:00404193                 xor     esi, esi
.text:00404195                 test    al, al
.text:00404197                 jz      loc_404114
.text:0040419D                 jmp     loc_40410D
.text:0040419D sub_4040D0      endp
.text:0040419D
.text:0040419D ; ---------------------------------------------------------------------------
.text:004041A2                 align 10h
.text:004041B0 byte_4041B0     db 43h, 0               ; DATA XREF: sub_4041C0+33↓o
.text:004041B2 aPosix          db 'POSIX',0            ; DATA XREF: sub_4041C0+45↓o
.text:004041B8                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: sub_402140+16↑p
.text:004041C0
.text:004041C0 Category        = dword ptr -1Ch
.text:004041C0 Locale          = dword ptr -18h
.text:004041C0 var_10          = dword ptr -10h
.text:004041C0 var_C           = dword ptr -0Ch
.text:004041C0 var_8           = dword ptr -8
.text:004041C0 var_4           = dword ptr -4
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0
.text:004041C0                 sub     esp, 1Ch
.text:004041C3                 mov     edx, [esp+1Ch+arg_0]
.text:004041C7                 mov     [esp+1Ch+var_10], ebx
.text:004041CB                 mov     bl, 1
.text:004041CD                 mov     [esp+1Ch+var_C], esi
.text:004041D1                 mov     [esp+1Ch+var_8], edi
.text:004041D5                 mov     [esp+1Ch+var_4], ebp
.text:004041D9                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:004041E1                 mov     [esp+1Ch+Category], edx ; Category
.text:004041E4                 call    setlocale
.text:004041E9                 test    eax, eax
.text:004041EB                 jz      short loc_404214
.text:004041ED                 cld
.text:004041EE                 mov     edx, 2
.text:004041F3                 mov     edi, offset byte_4041B0
.text:004041F8                 mov     esi, eax
.text:004041FA                 mov     ecx, edx
.text:004041FC                 repe cmpsb
.text:004041FE                 jz      short loc_404212
.text:00404200                 mov     edx, 6
.text:00404205                 mov     edi, offset aPosix ; "POSIX"
.text:0040420A                 mov     esi, eax
.text:0040420C                 mov     ecx, edx
.text:0040420E                 repe cmpsb
.text:00404210                 jnz     short loc_404214
.text:00404212
.text:00404212 loc_404212:                             ; CODE XREF: sub_4041C0+3E↑j
.text:00404212                 xor     ebx, ebx
.text:00404214
.text:00404214 loc_404214:                             ; CODE XREF: sub_4041C0+2B↑j
.text:00404214                                         ; sub_4041C0+50↑j
.text:00404214                 movzx   eax, bl
.text:00404217                 mov     esi, [esp+1Ch+var_C]
.text:0040421B                 mov     ebx, [esp+1Ch+var_10]
.text:0040421F                 mov     edi, [esp+1Ch+var_8]
.text:00404223                 mov     ebp, [esp+1Ch+var_4]
.text:00404227                 add     esp, 1Ch
.text:0040422A                 retn
.text:0040422A sub_4041C0      endp
.text:0040422A
.text:0040422A ; ---------------------------------------------------------------------------
.text:0040422B                 align 10h
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 ; int __cdecl sub_404230(char *)
.text:00404230 sub_404230      proc near               ; CODE XREF: sub_4024B0+2B8↑p
.text:00404230
.text:00404230 name            = dword ptr -1Ch
.text:00404230 Str2            = dword ptr -18h
.text:00404230 Size            = dword ptr -14h
.text:00404230 var_8           = dword ptr -8
.text:00404230 var_4           = dword ptr -4
.text:00404230 arg_0           = dword ptr  4
.text:00404230
.text:00404230                 sub     esp, 1Ch
.text:00404233                 mov     edx, [esp+1Ch+arg_0]
.text:00404237                 mov     [esp+1Ch+var_8], ebx
.text:0040423B                 mov     [esp+1Ch+var_4], esi
.text:0040423F                 xor     esi, esi
.text:00404241                 mov     [esp+1Ch+name], edx ; name
.text:00404244                 call    gethostbyname
.text:00404249                 sub     esp, 4
.text:0040424C                 mov     ebx, eax
.text:0040424E                 test    eax, eax
.text:00404250                 jz      short loc_404269
.text:00404252                 cmp     word ptr [eax+8], 2
.text:00404257                 jz      short loc_404277
.text:00404259
.text:00404259 loc_404259:                             ; CODE XREF: sub_404230+5B↓j
.text:00404259                                         ; sub_404230+6D↓j ...
.text:00404259                 test    ebx, ebx
.text:0040425B                 jz      short loc_404269
.text:0040425D                 mov     esi, [ebx]
.text:0040425F                 mov     [esp+1Ch+name], esi ; String
.text:00404262                 call    _strdup
.text:00404267                 mov     esi, eax
.text:00404269
.text:00404269 loc_404269:                             ; CODE XREF: sub_404230+20↑j
.text:00404269                                         ; sub_404230+2B↑j ...
.text:00404269                 mov     eax, esi
.text:0040426B                 mov     ebx, [esp+1Ch+var_8]
.text:0040426F                 mov     esi, [esp+1Ch+var_4]
.text:00404273                 add     esp, 1Ch
.text:00404276                 retn
.text:00404277 ; ---------------------------------------------------------------------------
.text:00404277
.text:00404277 loc_404277:                             ; CODE XREF: sub_404230+27↑j
.text:00404277                 mov     edx, [eax+0Ch]
.text:0040427A                 mov     ecx, [edx]
.text:0040427C                 mov     edx, [ecx]
.text:0040427E                 mov     [esp+1Ch+name], edx ; in
.text:00404281                 call    inet_ntoa
.text:00404286                 sub     esp, 4
.text:00404289                 test    eax, eax
.text:0040428B                 jz      short loc_404259
.text:0040428D                 mov     [esp+1Ch+Str2], eax ; Str2
.text:00404291                 mov     ecx, [ebx]
.text:00404293                 mov     [esp+1Ch+name], ecx ; Str1
.text:00404296                 call    strcmp
.text:0040429B                 test    eax, eax
.text:0040429D                 jnz     short loc_404259
.text:0040429F                 movsx   esi, word ptr [ebx+0Ah]
.text:004042A3                 mov     [esp+1Ch+name], esi ; Size
.text:004042A6                 call    malloc
.text:004042AB                 test    eax, eax
.text:004042AD                 mov     esi, eax
.text:004042AF                 jz      short loc_404269
.text:004042B1                 movsx   edx, word ptr [ebx+0Ah]
.text:004042B5                 mov     eax, [ebx+0Ch]
.text:004042B8                 mov     ecx, [eax]
.text:004042BA                 mov     [esp+1Ch+Size], edx ; Size
.text:004042BE                 mov     [esp+1Ch+name], esi ; void *
.text:004042C1                 mov     [esp+1Ch+Str2], ecx ; Src
.text:004042C5                 call    memcpy
.text:004042CA                 movsx   ecx, word ptr [ebx+8]
.text:004042CE                 mov     [esp+1Ch+Size], ecx ; type
.text:004042D2                 movsx   edx, word ptr [ebx+0Ah]
.text:004042D6                 mov     [esp+1Ch+name], esi ; addr
.text:004042D9                 mov     [esp+1Ch+Str2], edx ; len
.text:004042DD                 call    gethostbyaddr
.text:004042E2                 sub     esp, 0Ch
.text:004042E5                 mov     ebx, eax
.text:004042E7                 mov     [esp+1Ch+name], esi ; Block
.text:004042EA                 call    free
.text:004042EF                 jmp     loc_404259
.text:004042EF sub_404230      endp
.text:004042EF
.text:004042EF ; ---------------------------------------------------------------------------
.text:004042F4                 align 10h
.text:00404300
.text:00404300 ; =============== S U B R O U T I N E =======================================
.text:00404300
.text:00404300
.text:00404300 sub_404300      proc near               ; CODE XREF: sub_4024B0+2D9↑p
.text:00404300
.text:00404300 var_1C          = dword ptr -1Ch
.text:00404300 var_18          = dword ptr -18h
.text:00404300 var_14          = dword ptr -14h
.text:00404300 var_10          = dword ptr -10h
.text:00404300 arg_0           = dword ptr  4
.text:00404300 arg_4           = dword ptr  8
.text:00404300 arg_8           = dword ptr  0Ch
.text:00404300
.text:00404300                 push    edi
.text:00404301                 push    esi
.text:00404302                 push    ebx
.text:00404303                 sub     esp, 10h
.text:00404306                 mov     esi, [esp+1Ch+arg_4]
.text:0040430A                 mov     edx, [esp+1Ch+arg_8]
.text:0040430E                 mov     ebx, [esp+1Ch+arg_0]
.text:00404312                 test    esi, esi
.text:00404314                 mov     byte ptr [edx+15h], 0
.text:00404318                 lea     edi, [edx+15h]
.text:0040431B                 js      short loc_404370
.text:0040431D                 lea     esi, [esi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_404300+65↓j
.text:00404320                 mov     [esp+1Ch+var_1C], ebx
.text:00404323                 dec     edi
.text:00404324                 mov     [esp+1Ch+var_18], esi
.text:00404328                 mov     [esp+1Ch+var_14], 0Ah
.text:00404330                 mov     [esp+1Ch+var_10], 0
.text:00404338                 call    sub_40E750
.text:0040433D                 add     al, 30h ; '0'
.text:0040433F                 mov     [edi], al
.text:00404341                 mov     [esp+1Ch+var_1C], ebx
.text:00404344                 mov     [esp+1Ch+var_18], esi
.text:00404348                 mov     [esp+1Ch+var_14], 0Ah
.text:00404350                 mov     [esp+1Ch+var_10], 0
.text:00404358                 call    sub_40E910
.text:0040435D                 mov     ebx, eax
.text:0040435F                 mov     esi, edx
.text:00404361                 mov     eax, edx
.text:00404363                 or      eax, ebx
.text:00404365                 jnz     short loc_404320
.text:00404367
.text:00404367 loc_404367:                             ; CODE XREF: sub_404300+BB↓j
.text:00404367                 add     esp, 10h
.text:0040436A                 mov     eax, edi
.text:0040436C                 pop     ebx
.text:0040436D                 pop     esi
.text:0040436E                 pop     edi
.text:0040436F                 retn
.text:00404370 ; ---------------------------------------------------------------------------
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_404300+1B↑j
.text:00404370                                         ; sub_404300+B5↓j
.text:00404370                 mov     [esp+1Ch+var_1C], ebx
.text:00404373                 dec     edi
.text:00404374                 mov     [esp+1Ch+var_18], esi
.text:00404378                 mov     [esp+1Ch+var_14], 0Ah
.text:00404380                 mov     [esp+1Ch+var_10], 0
.text:00404388                 call    sub_40E750
.text:0040438D                 mov     cl, 30h ; '0'
.text:0040438F                 sub     cl, al
.text:00404391                 mov     [edi], cl
.text:00404393                 mov     [esp+1Ch+var_1C], ebx
.text:00404396                 mov     [esp+1Ch+var_18], esi
.text:0040439A                 mov     [esp+1Ch+var_14], 0Ah
.text:004043A2                 mov     [esp+1Ch+var_10], 0
.text:004043AA                 call    sub_40E910
.text:004043AF                 mov     ebx, eax
.text:004043B1                 mov     esi, edx
.text:004043B3                 or      edx, ebx
.text:004043B5                 jnz     short loc_404370
.text:004043B7                 dec     edi
.text:004043B8                 mov     byte ptr [edi], 2Dh ; '-'
.text:004043BB                 jmp     short loc_404367
.text:004043BB sub_404300      endp
.text:004043BB
.text:004043BB ; ---------------------------------------------------------------------------
.text:004043BD                 align 10h
.text:004043C0                 sub     esp, 0Ch
.text:004043C3                 xor     edx, edx
.text:004043C5                 mov     ecx, [esp+14h]
.text:004043C9                 mov     [esp+8], ebx
.text:004043CD                 mov     eax, 0FFFFFFFFh
.text:004043D2                 mov     ebx, [esp+10h]
.text:004043D6                 div     ecx
.text:004043D8                 cmp     eax, ebx
.text:004043DA                 jb      short loc_4043F9
.text:004043DC                 mov     edx, ebx
.text:004043DE                 imul    edx, ecx
.text:004043E1                 mov     [esp], edx
.text:004043E4                 call    malloc
.text:004043E9                 test    eax, eax
.text:004043EB                 jz      short loc_4043F5
.text:004043ED
.text:004043ED loc_4043ED:                             ; CODE XREF: .text:004043F7↓j
.text:004043ED                 mov     ebx, [esp+8]
.text:004043F1                 add     esp, 0Ch
.text:004043F4                 retn
.text:004043F5 ; ---------------------------------------------------------------------------
.text:004043F5
.text:004043F5 loc_4043F5:                             ; CODE XREF: .text:004043EB↑j
.text:004043F5                 test    ebx, ebx
.text:004043F7                 jz      short loc_4043ED
.text:004043F9
.text:004043F9 loc_4043F9:                             ; CODE XREF: .text:004043DA↑j
.text:004043F9                 call    sub_4046B0
.text:004043F9 ; ---------------------------------------------------------------------------
.text:004043FE                 align 10h
.text:00404400
.text:00404400 ; =============== S U B R O U T I N E =======================================
.text:00404400
.text:00404400
.text:00404400 ; int __cdecl sub_404400(size_t)
.text:00404400 sub_404400      proc near               ; CODE XREF: sub_401D40+141↑p
.text:00404400                                         ; sub_401D40+211↑p ...
.text:00404400
.text:00404400 Size            = dword ptr -0Ch
.text:00404400 var_4           = dword ptr -4
.text:00404400 arg_0           = dword ptr  4
.text:00404400
.text:00404400                 sub     esp, 0Ch
.text:00404403                 mov     [esp+0Ch+var_4], ebx
.text:00404407                 mov     ebx, [esp+0Ch+arg_0]
.text:0040440B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040440E                 call    malloc
.text:00404413                 test    eax, eax
.text:00404415                 jz      short loc_404420
.text:00404417
.text:00404417 loc_404417:                             ; CODE XREF: sub_404400+22↓j
.text:00404417                 mov     ebx, [esp+0Ch+var_4]
.text:0040441B                 add     esp, 0Ch
.text:0040441E                 retn
.text:0040441E ; ---------------------------------------------------------------------------
.text:0040441F                 align 10h
.text:00404420
.text:00404420 loc_404420:                             ; CODE XREF: sub_404400+15↑j
.text:00404420                 test    ebx, ebx
.text:00404422                 jz      short loc_404417
.text:00404424                 call    sub_4046B0
.text:00404424 sub_404400      endp
.text:00404424
.text:00404424 ; ---------------------------------------------------------------------------
.text:00404429                 align 10h
.text:00404430
.text:00404430 ; =============== S U B R O U T I N E =======================================
.text:00404430
.text:00404430
.text:00404430 ; int __cdecl sub_404430(void *, int, int)
.text:00404430 sub_404430      proc near               ; CODE XREF: sub_402950+B7↑p
.text:00404430
.text:00404430 Block           = dword ptr -1Ch
.text:00404430 Size            = dword ptr -18h
.text:00404430 var_8           = dword ptr -8
.text:00404430 var_4           = dword ptr -4
.text:00404430 arg_0           = dword ptr  4
.text:00404430 arg_4           = dword ptr  8
.text:00404430 arg_8           = dword ptr  0Ch
.text:00404430
.text:00404430                 sub     esp, 1Ch
.text:00404433                 xor     edx, edx
.text:00404435                 mov     eax, 0FFFFFFFFh
.text:0040443A                 mov     [esp+1Ch+var_8], ebx
.text:0040443E                 mov     ecx, [esp+1Ch+arg_0]
.text:00404442                 mov     ebx, [esp+1Ch+arg_8]
.text:00404446                 mov     [esp+1Ch+var_4], esi
.text:0040444A                 mov     esi, [esp+1Ch+arg_4]
.text:0040444E                 div     ebx
.text:00404450                 cmp     eax, esi
.text:00404452                 jb      short loc_404484
.text:00404454                 mov     [esp+1Ch+Block], ecx ; Block
.text:00404457                 mov     edx, esi
.text:00404459                 imul    edx, ebx
.text:0040445C                 mov     [esp+1Ch+Size], edx ; Size
.text:00404460                 call    realloc
.text:00404465                 test    eax, eax
.text:00404467                 mov     ecx, eax
.text:00404469                 jz      short loc_404480
.text:0040446B
.text:0040446B loc_40446B:                             ; CODE XREF: sub_404430+52↓j
.text:0040446B                 mov     ebx, [esp+1Ch+var_8]
.text:0040446F                 mov     eax, ecx
.text:00404471                 mov     esi, [esp+1Ch+var_4]
.text:00404475                 add     esp, 1Ch
.text:00404478                 retn
.text:00404478 ; ---------------------------------------------------------------------------
.text:00404479                 align 10h
.text:00404480
.text:00404480 loc_404480:                             ; CODE XREF: sub_404430+39↑j
.text:00404480                 test    esi, esi
.text:00404482                 jz      short loc_40446B
.text:00404484
.text:00404484 loc_404484:                             ; CODE XREF: sub_404430+22↑j
.text:00404484                 call    sub_4046B0
.text:00404484 sub_404430      endp
.text:00404484
.text:00404484 ; ---------------------------------------------------------------------------
.text:00404489                 align 10h
.text:00404490
.text:00404490 ; =============== S U B R O U T I N E =======================================
.text:00404490
.text:00404490
.text:00404490 ; int __cdecl sub_404490(void *, size_t)
.text:00404490 sub_404490      proc near               ; CODE XREF: sub_4058C0+5B↓p
.text:00404490
.text:00404490 Block           = dword ptr -0Ch
.text:00404490 Size            = dword ptr -8
.text:00404490 var_4           = dword ptr -4
.text:00404490 arg_0           = dword ptr  4
.text:00404490 arg_4           = dword ptr  8
.text:00404490
.text:00404490                 sub     esp, 0Ch
.text:00404493                 mov     edx, [esp+0Ch+arg_0]
.text:00404497                 mov     [esp+0Ch+var_4], ebx
.text:0040449B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040449F                 mov     [esp+0Ch+Block], edx ; Block
.text:004044A2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044A6                 call    realloc
.text:004044AB                 test    eax, eax
.text:004044AD                 jz      short loc_4044B7
.text:004044AF
.text:004044AF loc_4044AF:                             ; CODE XREF: sub_404490+29↓j
.text:004044AF                 mov     ebx, [esp+0Ch+var_4]
.text:004044B3                 add     esp, 0Ch
.text:004044B6                 retn
.text:004044B7 ; ---------------------------------------------------------------------------
.text:004044B7
.text:004044B7 loc_4044B7:                             ; CODE XREF: sub_404490+1D↑j
.text:004044B7                 test    ebx, ebx
.text:004044B9                 jz      short loc_4044AF
.text:004044BB                 call    sub_4046B0
.text:004044BB sub_404490      endp
.text:004044BB
.text:004044C0 ; ---------------------------------------------------------------------------
.text:004044C0                 jmp     sub_404610
.text:004044C0 ; ---------------------------------------------------------------------------
.text:004044C5                 align 10h
.text:004044D0                 sub     esp, 0Ch
.text:004044D3                 mov     edx, [esp+14h]
.text:004044D7                 mov     dword ptr [esp+8], 1
.text:004044DF                 mov     [esp+4], edx
.text:004044E3                 mov     edx, [esp+10h]
.text:004044E7                 mov     [esp], edx
.text:004044EA                 call    sub_404610
.text:004044EF                 add     esp, 0Ch
.text:004044F2                 retn
.text:004044F2 ; ---------------------------------------------------------------------------
.text:004044F3                 align 10h
.text:00404500                 sub     esp, 1Ch
.text:00404503                 mov     [esp+18h], ebx
.text:00404507                 mov     ebx, [esp+20h]
.text:0040450B                 mov     [esp], ebx
.text:0040450E                 call    malloc
.text:00404513                 test    eax, eax
.text:00404515                 jz      short loc_404533
.text:00404517
.text:00404517 loc_404517:                             ; CODE XREF: .text:00404535↓j
.text:00404517                 mov     [esp+8], ebx
.text:0040451B                 mov     dword ptr [esp+4], 0
.text:00404523                 mov     [esp], eax
.text:00404526                 call    memset
.text:0040452B                 mov     ebx, [esp+18h]
.text:0040452F                 add     esp, 1Ch
.text:00404532                 retn
.text:00404533 ; ---------------------------------------------------------------------------
.text:00404533
.text:00404533 loc_404533:                             ; CODE XREF: .text:00404515↑j
.text:00404533                 test    ebx, ebx
.text:00404535                 jz      short loc_404517
.text:00404537                 call    sub_4046B0
.text:00404537 ; ---------------------------------------------------------------------------
.text:0040453C                 align 10h
.text:00404540                 sub     esp, 0Ch
.text:00404543                 xor     edx, edx
.text:00404545                 mov     ecx, [esp+14h]
.text:00404549                 mov     [esp+8], ebx
.text:0040454D                 mov     eax, 0FFFFFFFFh
.text:00404552                 mov     ebx, [esp+10h]
.text:00404556                 div     ecx
.text:00404558                 cmp     eax, ebx
.text:0040455A                 jb      short loc_404578
.text:0040455C                 mov     [esp+4], ecx
.text:00404560                 mov     [esp], ebx
.text:00404563                 call    calloc
.text:00404568                 test    eax, eax
.text:0040456A                 jz      short loc_404574
.text:0040456C
.text:0040456C loc_40456C:                             ; CODE XREF: .text:00404576↓j
.text:0040456C                 mov     ebx, [esp+8]
.text:00404570                 add     esp, 0Ch
.text:00404573                 retn
.text:00404574 ; ---------------------------------------------------------------------------
.text:00404574
.text:00404574 loc_404574:                             ; CODE XREF: .text:0040456A↑j
.text:00404574                 test    ebx, ebx
.text:00404576                 jz      short loc_40456C
.text:00404578
.text:00404578 loc_404578:                             ; CODE XREF: .text:0040455A↑j
.text:00404578                 call    sub_4046B0
.text:00404578 ; ---------------------------------------------------------------------------
.text:0040457D                 align 10h
.text:00404580                 sub     esp, 1Ch
.text:00404583                 mov     [esp+18h], ebx
.text:00404587                 mov     ebx, [esp+24h]
.text:0040458B                 mov     [esp], ebx
.text:0040458E                 call    malloc
.text:00404593                 test    eax, eax
.text:00404595                 mov     edx, eax
.text:00404597                 jz      short loc_4045B5
.text:00404599
.text:00404599 loc_404599:                             ; CODE XREF: .text:004045B7↓j
.text:00404599                 mov     [esp+8], ebx
.text:0040459D                 mov     ecx, [esp+20h]
.text:004045A1                 mov     [esp], edx
.text:004045A4                 mov     [esp+4], ecx
.text:004045A8                 call    memcpy
.text:004045AD                 mov     ebx, [esp+18h]
.text:004045B1                 add     esp, 1Ch
.text:004045B4                 retn
.text:004045B5 ; ---------------------------------------------------------------------------
.text:004045B5
.text:004045B5 loc_4045B5:                             ; CODE XREF: .text:00404597↑j
.text:004045B5                 test    ebx, ebx
.text:004045B7                 jz      short loc_404599
.text:004045B9                 call    sub_4046B0
.text:004045B9 ; ---------------------------------------------------------------------------
.text:004045BE                 align 10h
.text:004045C0                 sub     esp, 1Ch
.text:004045C3                 mov     [esp+18h], esi
.text:004045C7                 mov     esi, [esp+20h]
.text:004045CB                 mov     [esp+14h], ebx
.text:004045CF                 mov     [esp], esi
.text:004045D2                 call    strlen
.text:004045D7                 lea     ebx, [eax+1]
.text:004045DA                 mov     [esp], ebx
.text:004045DD                 call    malloc
.text:004045E2                 test    eax, eax
.text:004045E4                 jz      short loc_404602
.text:004045E6
.text:004045E6 loc_4045E6:                             ; CODE XREF: .text:00404604↓j
.text:004045E6                 mov     [esp+8], ebx
.text:004045EA                 mov     [esp+4], esi
.text:004045EE                 mov     [esp], eax
.text:004045F1                 call    memcpy
.text:004045F6                 mov     ebx, [esp+14h]
.text:004045FA                 mov     esi, [esp+18h]
.text:004045FE                 add     esp, 1Ch
.text:00404601                 retn
.text:00404602 ; ---------------------------------------------------------------------------
.text:00404602
.text:00404602 loc_404602:                             ; CODE XREF: .text:004045E4↑j
.text:00404602                 test    ebx, ebx
.text:00404604                 jz      short loc_4045E6
.text:00404606                 call    sub_4046B0
.text:00404606 ; ---------------------------------------------------------------------------
.text:0040460B                 align 10h
.text:00404610
.text:00404610 ; =============== S U B R O U T I N E =======================================
.text:00404610
.text:00404610
.text:00404610 ; int __cdecl sub_404610(void *, int, int)
.text:00404610 sub_404610      proc near               ; CODE XREF: .text:004044C0↑j
.text:00404610                                         ; .text:004044EA↑p
.text:00404610
.text:00404610 Block           = dword ptr -1Ch
.text:00404610 Size            = dword ptr -18h
.text:00404610 var_C           = dword ptr -0Ch
.text:00404610 var_8           = dword ptr -8
.text:00404610 var_4           = dword ptr -4
.text:00404610 arg_0           = dword ptr  4
.text:00404610 arg_4           = dword ptr  8
.text:00404610 arg_8           = dword ptr  0Ch
.text:00404610
.text:00404610                 sub     esp, 1Ch
.text:00404613                 mov     [esp+1Ch+var_8], esi
.text:00404617                 mov     esi, [esp+1Ch+arg_0]
.text:0040461B                 mov     [esp+1Ch+var_4], edi
.text:0040461F                 mov     edi, [esp+1Ch+arg_4]
.text:00404623                 test    esi, esi
.text:00404625                 mov     [esp+1Ch+var_C], ebx
.text:00404629                 mov     ecx, [edi]
.text:0040462B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040462F                 jz      short loc_404670
.text:00404631                 xor     edx, edx
.text:00404633                 mov     eax, 7FFFFFFFh
.text:00404638                 div     ebx
.text:0040463A                 cmp     eax, ecx
.text:0040463C                 jb      short loc_404669
.text:0040463E                 add     ecx, ecx
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_404610+62↓j
.text:00404640                                         ; sub_404610+71↓j ...
.text:00404640                 mov     [edi], ecx
.text:00404642                 imul    ebx, ecx
.text:00404645                 mov     [esp+1Ch+Block], esi ; Block
.text:00404648                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040464C                 call    realloc
.text:00404651                 test    eax, eax
.text:00404653                 jz      short loc_404665
.text:00404655
.text:00404655 loc_404655:                             ; CODE XREF: sub_404610+57↓j
.text:00404655                 mov     ebx, [esp+1Ch+var_C]
.text:00404659                 mov     esi, [esp+1Ch+var_8]
.text:0040465D                 mov     edi, [esp+1Ch+var_4]
.text:00404661                 add     esp, 1Ch
.text:00404664                 retn
.text:00404665 ; ---------------------------------------------------------------------------
.text:00404665
.text:00404665 loc_404665:                             ; CODE XREF: sub_404610+43↑j
.text:00404665                 test    ebx, ebx
.text:00404667                 jz      short loc_404655
.text:00404669
.text:00404669 loc_404669:                             ; CODE XREF: sub_404610+2C↑j
.text:00404669                 call    sub_4046B0
.text:00404669 ; ---------------------------------------------------------------------------
.text:0040466E                 align 10h
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_404610+1F↑j
.text:00404670                 test    ecx, ecx
.text:00404672                 jnz     short loc_404640
.text:00404674                 xor     edx, edx
.text:00404676                 mov     eax, 40h ; '@'
.text:0040467B                 div     ebx
.text:0040467D                 test    eax, eax
.text:0040467F                 mov     ecx, eax
.text:00404681                 jnz     short loc_404640
.text:00404683                 mov     ecx, 1
.text:00404688                 jmp     short loc_404640
.text:00404688 sub_404610      endp
.text:00404688
.text:00404688 ; ---------------------------------------------------------------------------
.text:0040468A                 align 10h
.text:00404690 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4046B0+3↓o
.text:004046A1 ; const char aS_2[]
.text:004046A1 aS_2            db '%s',0               ; DATA XREF: sub_4046B0+10↓o
.text:004046A4                 align 10h
.text:004046B0
.text:004046B0 ; =============== S U B R O U T I N E =======================================
.text:004046B0
.text:004046B0 ; Attributes: noreturn
.text:004046B0
.text:004046B0 sub_4046B0      proc near               ; CODE XREF: sub_402350:loc_4023B5↑p
.text:004046B0                                         ; .text:loc_4043F9↑p ...
.text:004046B0
.text:004046B0 Code            = dword ptr -1Ch
.text:004046B0 ErrorMessage    = dword ptr -18h
.text:004046B0 var_14          = dword ptr -14h
.text:004046B0 var_10          = byte ptr -10h
.text:004046B0
.text:004046B0                 sub     esp, 1Ch
.text:004046B3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004046BA                 call    ds:libintl_gettext
.text:004046C0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004046C8                 mov     edx, Code
.text:004046CE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004046D6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004046DA                 mov     [esp+1Ch+Code], edx ; Code
.text:004046DD                 call    sub_405AE0
.text:004046E2                 call    abort
.text:004046E2 sub_4046B0      endp
.text:004046E2
.text:004046E2 ; ---------------------------------------------------------------------------
.text:004046E7                 align 10h
.text:004046F0 aLiteral        db 'literal',0          ; DATA XREF: .text:00404730↓o
.text:004046F8 aShell_1        db 'shell',0            ; DATA XREF: .text:00404734↓o
.text:004046FE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404738↓o
.text:0040470B aC_0            db 'c',0                ; DATA XREF: .text:0040473C↓o
.text:0040470D aEscape         db 'escape',0           ; DATA XREF: .text:00404740↓o
.text:00404714 aLocale         db 'locale',0           ; DATA XREF: .text:00404744↓o
.text:0040471B aClocale        db 'clocale',0          ; DATA XREF: .text:00404748↓o
.text:00404723                 align 10h
.text:00404730                 dd offset aLiteral      ; "literal"
.text:00404734                 dd offset aShell_1      ; "shell"
.text:00404738                 dd offset aShellAlways  ; "shell-always"
.text:0040473C                 dd offset aC_0          ; "c"
.text:00404740                 dd offset aEscape       ; "escape"
.text:00404744                 dd offset aLocale       ; "locale"
.text:00404748                 dd offset aClocale      ; "clocale"
.text:0040474C                 dd 2 dup(0)
.text:00404754                 dd 1, 2, 3, 4, 5, 6
.text:0040476C asc_40476C:                             ; DATA XREF: sub_404780+7E↓o
.text:0040476C                                         ; sub_404780+A39↓o ...
.text:0040476C                 text "UTF-16LE", '"',27h,'`'
.text:00404772                 align 10h
.text:00404780
.text:00404780 ; =============== S U B R O U T I N E =======================================
.text:00404780
.text:00404780
.text:00404780 ; int __cdecl sub_404780(int, int, char *Str, int, int, int)
.text:00404780 sub_404780      proc near               ; CODE XREF: sub_404780+43A↓p
.text:00404780                                         ; .text:00405343↓p ...
.text:00404780
.text:00404780 C               = dword ptr -4Ch
.text:00404780 Type            = dword ptr -48h
.text:00404780 SizeInBytes     = dword ptr -44h
.text:00404780 State           = dword ptr -40h
.text:00404780 var_3C          = dword ptr -3Ch
.text:00404780 var_38          = dword ptr -38h
.text:00404780 var_34          = dword ptr -34h
.text:00404780 var_30          = dword ptr -30h
.text:00404780 var_29          = byte ptr -29h
.text:00404780 var_28          = dword ptr -28h
.text:00404780 var_22          = byte ptr -22h
.text:00404780 var_21          = byte ptr -21h
.text:00404780 var_20          = dword ptr -20h
.text:00404780 var_1C          = dword ptr -1Ch
.text:00404780 var_18          = mbstate_t ptr -18h
.text:00404780 arg_0           = dword ptr  4
.text:00404780 arg_4           = dword ptr  8
.text:00404780 Str             = dword ptr  0Ch
.text:00404780 arg_C           = dword ptr  10h
.text:00404780 arg_10          = dword ptr  14h
.text:00404780 arg_14          = dword ptr  18h
.text:00404780
.text:00404780                 push    ebp
.text:00404781                 push    edi
.text:00404782                 push    esi
.text:00404783                 push    ebx
.text:00404784                 sub     esp, 3Ch
.text:00404787                 mov     edx, ds:__mb_cur_max
.text:0040478D                 mov     [esp+4Ch+var_34], 0
.text:00404795                 mov     [esp+4Ch+var_1C], 0
.text:0040479D                 cmp     dword ptr [edx], 1
.text:004047A0                 mov     [esp+4Ch+var_20], 0
.text:004047A8                 mov     [esp+4Ch+var_21], 0
.text:004047AD                 setz    [esp+4Ch+var_22]
.text:004047B2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004047B7                 ja      short def_4047BD ; jumptable 004047BD default case, cases 0,1
.text:004047B9                 mov     edx, [esp+4Ch+arg_10]
.text:004047BD                 jmp     ds:jpt_4047BD[edx*4] ; switch jump
.text:004047BD ; ---------------------------------------------------------------------------
.text:004047C4 jpt_4047BD      dd offset def_4047BD    ; DATA XREF: sub_404780+3D↑r
.text:004047C4                 dd offset def_4047BD    ; jump table for switch statement
.text:004047C4                 dd offset loc_405105
.text:004047C4                 dd offset loc_4047E0
.text:004047C4                 dd offset loc_40512B
.text:004047C4                 dd offset loc_405135
.text:004047C4                 dd offset loc_405135
.text:004047E0 ; ---------------------------------------------------------------------------
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_404780+3D↑j
.text:004047E0                                         ; DATA XREF: sub_404780:jpt_4047BD↑o
.text:004047E0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004047BD case 3
.text:004047E4                 cmp     [esp+4Ch+var_34], eax
.text:004047E8                 jnb     short loc_4047F1
.text:004047EA                 mov     ebx, [esp+4Ch+arg_0]
.text:004047EE                 mov     byte ptr [ebx], 22h ; '"'
.text:004047F1
.text:004047F1 loc_4047F1:                             ; CODE XREF: sub_404780+68↑j
.text:004047F1                 mov     [esp+4Ch+var_34], 1
.text:004047F9                 mov     [esp+4Ch+var_21], 1
.text:004047FE                 mov     [esp+4Ch+var_1C], offset asc_40476C ; "\"'`"
.text:00404806
.text:00404806 loc_404806:                             ; CODE XREF: sub_404780+9A6↓j
.text:00404806                 mov     [esp+4Ch+var_20], 1
.text:0040480E
.text:0040480E def_4047BD:                             ; CODE XREF: sub_404780+37↑j
.text:0040480E                                         ; sub_404780+3D↑j ...
.text:0040480E                 xor     ebp, ebp        ; jumptable 004047BD default case, cases 0,1
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: sub_404780+3DB↓j
.text:00404810                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404815                 jz      loc_4050F7
.text:0040481B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: sub_404780+980↓j
.text:0040481F                 jz      loc_40508E
.text:00404825                 cmp     [esp+4Ch+var_21], 0
.text:0040482A                 jz      short loc_404870
.text:0040482C                 mov     esi, [esp+4Ch+var_20]
.text:00404830                 test    esi, esi
.text:00404832                 jz      short loc_404870
.text:00404834                 mov     ecx, [esp+4Ch+var_20]
.text:00404838                 lea     edi, [ecx+ebp]
.text:0040483B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040483F                 ja      short loc_404870
.text:00404841                 cld
.text:00404842                 mov     ebx, [esp+4Ch+Str]
.text:00404846                 mov     edi, [esp+4Ch+var_1C]
.text:0040484A                 add     ebx, ebp
.text:0040484C                 mov     esi, ebx
.text:0040484E                 cmp     ecx, ecx
.text:00404850                 repe cmpsb
.text:00404852                 jnz     short loc_404870
.text:00404854                 mov     edx, [esp+4Ch+arg_4]
.text:00404858                 cmp     [esp+4Ch+var_34], edx
.text:0040485C                 jnb     short loc_40486A
.text:0040485E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404862                 mov     eax, [esp+4Ch+var_34]
.text:00404866                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040486A
.text:0040486A loc_40486A:                             ; CODE XREF: sub_404780+DC↑j
.text:0040486A                 inc     [esp+4Ch+var_34]
.text:0040486E                 mov     esi, esi
.text:00404870
.text:00404870 loc_404870:                             ; CODE XREF: sub_404780+AA↑j
.text:00404870                                         ; sub_404780+B2↑j ...
.text:00404870                 mov     edi, [esp+4Ch+Str]
.text:00404874                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404879                 movzx   eax, bl
.text:0040487C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040487F                 ja      def_404885      ; jumptable 00404885 default case, cases 1-6,14-31,64
.text:00404885                 jmp     ds:jpt_404885[eax*4] ; switch jump
.text:00404885 ; ---------------------------------------------------------------------------
.text:0040488C jpt_404885      dd offset loc_404A88, offset def_404885, offset def_404885
.text:0040488C                                         ; DATA XREF: sub_404780+105↑r
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885 ; jump table for switch statement
.text:0040488C                 dd offset def_404885, offset loc_404B60, offset loc_404B7E
.text:0040488C                 dd offset loc_404B82, offset loc_404BC7, offset loc_404BCB
.text:0040488C                 dd offset loc_404BCF, offset loc_404BD3, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset def_404885
.text:0040488C                 dd offset def_404885, offset def_404885, offset loc_405058
.text:0040488C                 dd offset loc_405058, offset loc_405058, offset loc_40507A
.text:0040488C                 dd offset loc_405058, offset def_404C82, offset loc_405058
.text:0040488C                 dd offset loc_404BD7, offset loc_405058, offset loc_405058
.text:0040488C                 dd offset loc_405058, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset loc_405058
.text:0040488C                 dd offset loc_405058, offset loc_405058, offset loc_405058
.text:0040488C                 dd offset loc_404C3C, offset def_404885, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset loc_405058, offset loc_405051
.text:0040488C                 dd offset def_404C82, offset loc_405058, offset def_404C82
.text:0040488C                 dd offset loc_405058, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset def_404C82, offset def_404C82, offset def_404C82
.text:0040488C                 dd offset loc_405068, offset loc_405058, offset loc_405068
.text:0040488C                 dd offset loc_40507A
.text:00404A88 ; ---------------------------------------------------------------------------
.text:00404A88
.text:00404A88 loc_404A88:                             ; CODE XREF: sub_404780+105↑j
.text:00404A88                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404A88                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404885 case 0
.text:00404A8D                 lea     eax, [ebp+1]
.text:00404A90                 jz      loc_404B40
.text:00404A96                 mov     esi, [esp+4Ch+arg_4]
.text:00404A9A                 cmp     [esp+4Ch+var_34], esi
.text:00404A9E                 jnb     short loc_404AAC
.text:00404AA0                 mov     eax, [esp+4Ch+arg_0]
.text:00404AA4                 mov     ebx, [esp+4Ch+var_34]
.text:00404AA8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00404AAC
.text:00404AAC loc_404AAC:                             ; CODE XREF: sub_404780+31E↑j
.text:00404AAC                 inc     [esp+4Ch+var_34]
.text:00404AB0                 mov     edx, [esp+4Ch+arg_4]
.text:00404AB4                 cmp     [esp+4Ch+var_34], edx
.text:00404AB8                 jnb     short loc_404AC6
.text:00404ABA                 mov     edi, [esp+4Ch+arg_0]
.text:00404ABE                 mov     ecx, [esp+4Ch+var_34]
.text:00404AC2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404AC6
.text:00404AC6 loc_404AC6:                             ; CODE XREF: sub_404780+338↑j
.text:00404AC6                 inc     [esp+4Ch+var_34]
.text:00404ACA                 mov     esi, [esp+4Ch+arg_4]
.text:00404ACE                 cmp     [esp+4Ch+var_34], esi
.text:00404AD2                 jnb     short loc_404AE0
.text:00404AD4                 mov     ebx, [esp+4Ch+arg_0]
.text:00404AD8                 mov     eax, [esp+4Ch+var_34]
.text:00404ADC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404780+352↑j
.text:00404AE0                 inc     [esp+4Ch+var_34]
.text:00404AE4                 mov     bl, 30h ; '0'
.text:00404AE6                 lea     esi, [esi+0]
.text:00404AE9                 lea     edi, [edi+0]
.text:00404AF0
.text:00404AF0 def_404C82:                             ; CODE XREF: sub_404780+105↑j
.text:00404AF0                                         ; sub_404780+463↓j ...
.text:00404AF0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404AF0                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404AF5                 lea     eax, [ebp+1]
.text:00404AF8                 jz      short loc_404B40
.text:00404AFA                 mov     cl, bl
.text:00404AFC                 mov     edi, [esp+4Ch+arg_14]
.text:00404B00                 mov     esi, 1
.text:00404B05                 shr     cl, 5
.text:00404B08                 movzx   edx, cl
.text:00404B0B                 mov     ecx, ebx
.text:00404B0D                 and     ecx, 1Fh
.text:00404B10                 shl     esi, cl
.text:00404B12                 test    [edi+edx*4+4], esi
.text:00404B16                 jz      short loc_404B32
.text:00404B18
.text:00404B18 loc_404B18:                             ; CODE XREF: sub_404780+3FC↓j
.text:00404B18                 mov     edx, [esp+4Ch+arg_4]
.text:00404B1C                 cmp     [esp+4Ch+var_34], edx
.text:00404B20                 jnb     short loc_404B2E
.text:00404B22                 mov     edi, [esp+4Ch+arg_0]
.text:00404B26                 mov     esi, [esp+4Ch+var_34]
.text:00404B2A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00404B2E
.text:00404B2E loc_404B2E:                             ; CODE XREF: sub_404780+3A0↑j
.text:00404B2E                 inc     [esp+4Ch+var_34]
.text:00404B32
.text:00404B32 loc_404B32:                             ; CODE XREF: sub_404780+396↑j
.text:00404B32                 lea     eax, [ebp+1]
.text:00404B35                 lea     esi, [esi+0]
.text:00404B39                 lea     edi, [edi+0]
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404780+310↑j
.text:00404B40                                         ; sub_404780+378↑j ...
.text:00404B40                 mov     ebp, [esp+4Ch+arg_4]
.text:00404B44                 cmp     [esp+4Ch+var_34], ebp
.text:00404B48                 jnb     short loc_404B55
.text:00404B4A                 mov     edx, [esp+4Ch+arg_0]
.text:00404B4E                 mov     ecx, [esp+4Ch+var_34]
.text:00404B52                 mov     [ecx+edx], bl
.text:00404B55
.text:00404B55 loc_404B55:                             ; CODE XREF: sub_404780+3C8↑j
.text:00404B55                 inc     [esp+4Ch+var_34]
.text:00404B59                 mov     ebp, eax
.text:00404B5B                 jmp     loc_404810
.text:00404B60 ; ---------------------------------------------------------------------------
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: sub_404780+105↑j
.text:00404B60                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404B60                 mov     dl, 61h ; 'a'   ; jumptable 00404885 case 7
.text:00404B62                 lea     esi, [esi+0]
.text:00404B69                 lea     edi, [edi+0]
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_404780+400↓j
.text:00404B70                                         ; sub_404780+409↓j ...
.text:00404B70                 cmp     [esp+4Ch+var_21], 0
.text:00404B75                 lea     eax, [ebp+1]
.text:00404B78                 jz      short loc_404B40
.text:00404B7A                 mov     bl, dl
.text:00404B7C                 jmp     short loc_404B18
.text:00404B7E ; ---------------------------------------------------------------------------
.text:00404B7E
.text:00404B7E loc_404B7E:                             ; CODE XREF: sub_404780+105↑j
.text:00404B7E                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404B7E                 mov     dl, 62h ; 'b'   ; jumptable 00404885 case 8
.text:00404B80                 jmp     short loc_404B70
.text:00404B82 ; ---------------------------------------------------------------------------
.text:00404B82
.text:00404B82 loc_404B82:                             ; CODE XREF: sub_404780+105↑j
.text:00404B82                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404B82                 mov     dl, 74h ; 't'   ; jumptable 00404885 case 9
.text:00404B84
.text:00404B84 loc_404B84:                             ; CODE XREF: sub_404780+449↓j
.text:00404B84                                         ; sub_404780+455↓j ...
.text:00404B84                 cmp     [esp+4Ch+arg_10], 1
.text:00404B89                 jnz     short loc_404B70
.text:00404B8B
.text:00404B8B loc_404B8B:                             ; CODE XREF: sub_404780+45C↓j
.text:00404B8B                                         ; sub_404780+4C1↓j ...
.text:00404B8B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404F52 cases 91,92,94,96,124
.text:00404B93                 mov     eax, [esp+4Ch+arg_14]
.text:00404B97                 mov     edx, [esp+4Ch+arg_C]
.text:00404B9B                 mov     ecx, [esp+4Ch+Str]
.text:00404B9F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404BA3                 mov     [esp+4Ch+var_38], eax ; int
.text:00404BA7                 mov     ebp, [esp+4Ch+arg_0]
.text:00404BAB                 mov     [esp+4Ch+State], edx ; int
.text:00404BAF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404BB3                 mov     [esp+4Ch+Type], ebx ; int
.text:00404BB7                 mov     [esp+4Ch+C], ebp ; int
.text:00404BBA                 call    sub_404780
.text:00404BBF
.text:00404BBF loc_404BBF:                             ; CODE XREF: sub_404780+972↓j
.text:00404BBF                 add     esp, 3Ch
.text:00404BC2                 pop     ebx
.text:00404BC3                 pop     esi
.text:00404BC4                 pop     edi
.text:00404BC5                 pop     ebp
.text:00404BC6                 retn
.text:00404BC7 ; ---------------------------------------------------------------------------
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_404780+105↑j
.text:00404BC7                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404BC7                 mov     dl, 6Eh ; 'n'   ; jumptable 00404885 case 10
.text:00404BC9                 jmp     short loc_404B84
.text:00404BCB ; ---------------------------------------------------------------------------
.text:00404BCB
.text:00404BCB loc_404BCB:                             ; CODE XREF: sub_404780+105↑j
.text:00404BCB                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404BCB                 mov     dl, 76h ; 'v'   ; jumptable 00404885 case 11
.text:00404BCD                 jmp     short loc_404B70
.text:00404BCF ; ---------------------------------------------------------------------------
.text:00404BCF
.text:00404BCF loc_404BCF:                             ; CODE XREF: sub_404780+105↑j
.text:00404BCF                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404BCF                 mov     dl, 66h ; 'f'   ; jumptable 00404885 case 12
.text:00404BD1                 jmp     short loc_404B70
.text:00404BD3 ; ---------------------------------------------------------------------------
.text:00404BD3
.text:00404BD3 loc_404BD3:                             ; CODE XREF: sub_404780+105↑j
.text:00404BD3                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404BD3                 mov     dl, 72h ; 'r'   ; jumptable 00404885 case 13
.text:00404BD5                 jmp     short loc_404B84
.text:00404BD7 ; ---------------------------------------------------------------------------
.text:00404BD7
.text:00404BD7 loc_404BD7:                             ; CODE XREF: sub_404780+105↑j
.text:00404BD7                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404BD7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404885 case 39
.text:00404BDC                 jz      short loc_404B8B ; jumptable 00404F52 cases 91,92,94,96,124
.text:00404BDE                 cmp     [esp+4Ch+arg_10], 2
.text:00404BE3                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404BE3                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404BE9                 mov     edx, [esp+4Ch+arg_4]
.text:00404BED                 cmp     [esp+4Ch+var_34], edx
.text:00404BF1                 jnb     short loc_404BFF
.text:00404BF3                 mov     ecx, [esp+4Ch+arg_0]
.text:00404BF7                 mov     edi, [esp+4Ch+var_34]
.text:00404BFB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404BFF
.text:00404BFF loc_404BFF:                             ; CODE XREF: sub_404780+471↑j
.text:00404BFF                 inc     [esp+4Ch+var_34]
.text:00404C03                 mov     eax, [esp+4Ch+arg_4]
.text:00404C07                 cmp     [esp+4Ch+var_34], eax
.text:00404C0B                 jnb     short loc_404C19
.text:00404C0D                 mov     esi, [esp+4Ch+arg_0]
.text:00404C11                 mov     edx, [esp+4Ch+var_34]
.text:00404C15                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404C19
.text:00404C19 loc_404C19:                             ; CODE XREF: sub_404780+48B↑j
.text:00404C19                 inc     [esp+4Ch+var_34]
.text:00404C1D                 mov     edi, [esp+4Ch+arg_4]
.text:00404C21                 cmp     [esp+4Ch+var_34], edi
.text:00404C25                 jnb     short loc_404C33
.text:00404C27                 mov     ecx, [esp+4Ch+arg_0]
.text:00404C2B                 mov     eax, [esp+4Ch+var_34]
.text:00404C2F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404C33
.text:00404C33 loc_404C33:                             ; CODE XREF: sub_404780+4A5↑j
.text:00404C33                                         ; sub_404780+5C4↓j ...
.text:00404C33                 inc     [esp+4Ch+var_34]
.text:00404C37                 jmp     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404C37                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404C3C ; ---------------------------------------------------------------------------
.text:00404C3C
.text:00404C3C loc_404C3C:                             ; CODE XREF: sub_404780+105↑j
.text:00404C3C                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00404C3C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404885 case 63
.text:00404C41                 jz      loc_404B8B      ; jumptable 00404F52 cases 91,92,94,96,124
.text:00404C47                 cmp     [esp+4Ch+arg_10], 3
.text:00404C4C                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404C4C                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404C52                 lea     edx, [ebp+2]
.text:00404C55                 cmp     edx, [esp+4Ch+arg_C]
.text:00404C59                 jnb     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404C59                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404C5F                 mov     esi, [esp+4Ch+Str]
.text:00404C63                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404C68                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404C68                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404C6E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404C73                 movsx   eax, cl
.text:00404C76                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404C79                 cmp     eax, 1Dh
.text:00404C7C                 ja      def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404C7C                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404C82                 jmp     ds:jpt_404C82[eax*4] ; switch jump
.text:00404C82 ; ---------------------------------------------------------------------------
.text:00404C89                 align 4
.text:00404C8C jpt_404C82      dd offset loc_404D04    ; DATA XREF: sub_404780+502↑r
.text:00404C8C                 dd offset def_404C82    ; jump table for switch statement
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset def_404C82
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset loc_404D04
.text:00404C8C                 dd offset loc_404D04
.text:00404D04 ; ---------------------------------------------------------------------------
.text:00404D04
.text:00404D04 loc_404D04:                             ; CODE XREF: sub_404780+502↑j
.text:00404D04                                         ; DATA XREF: sub_404780:jpt_404C82↑o
.text:00404D04                 mov     ebp, edx        ; jumptable 00404C82 cases 33,39-41,45,47,60-62
.text:00404D06                 mov     bl, cl
.text:00404D08                 mov     edx, [esp+4Ch+arg_4]
.text:00404D0C                 cmp     [esp+4Ch+var_34], edx
.text:00404D10                 jnb     short loc_404D1E
.text:00404D12                 mov     ecx, [esp+4Ch+arg_0]
.text:00404D16                 mov     edi, [esp+4Ch+var_34]
.text:00404D1A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404D1E
.text:00404D1E loc_404D1E:                             ; CODE XREF: sub_404780+590↑j
.text:00404D1E                 inc     [esp+4Ch+var_34]
.text:00404D22                 mov     eax, [esp+4Ch+arg_4]
.text:00404D26                 cmp     [esp+4Ch+var_34], eax
.text:00404D2A                 jnb     short loc_404D38
.text:00404D2C                 mov     edx, [esp+4Ch+arg_0]
.text:00404D30                 mov     esi, [esp+4Ch+var_34]
.text:00404D34                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404D38
.text:00404D38 loc_404D38:                             ; CODE XREF: sub_404780+5AA↑j
.text:00404D38                 inc     [esp+4Ch+var_34]
.text:00404D3C                 mov     edi, [esp+4Ch+arg_4]
.text:00404D40                 cmp     [esp+4Ch+var_34], edi
.text:00404D44                 jnb     loc_404C33
.text:00404D4A                 mov     eax, [esp+4Ch+arg_0]
.text:00404D4E                 mov     ecx, [esp+4Ch+var_34]
.text:00404D52                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404D56                 jmp     loc_404C33
.text:00404D56 ; ---------------------------------------------------------------------------
.text:00404D5B                 align 10h
.text:00404D60
.text:00404D60 def_404885:                             ; CODE XREF: sub_404780+FF↑j
.text:00404D60                                         ; sub_404780+105↑j
.text:00404D60                                         ; DATA XREF: ...
.text:00404D60                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404885 default case, cases 1-6,14-31,64
.text:00404D65                 jz      loc_404E90
.text:00404D6B                 mov     [esp+4Ch+var_28], 1
.text:00404D73                 mov     esi, ds:__mb_cur_max
.text:00404D79                 movzx   edx, bl
.text:00404D7C                 cmp     dword ptr [esi], 1
.text:00404D7F                 jz      loc_404E74
.text:00404D85                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404D8D                 mov     [esp+4Ch+C], edx ; C
.text:00404D90                 call    _isctype
.text:00404D95
.text:00404D95 loc_404D95:                             ; CODE XREF: sub_404780+705↓j
.text:00404D95                 test    eax, eax
.text:00404D97                 setnz   [esp+4Ch+var_29]
.text:00404D9C
.text:00404D9C loc_404D9C:                             ; CODE XREF: sub_404780+7A5↓j
.text:00404D9C                 cmp     [esp+4Ch+var_21], 0
.text:00404DA1                 lea     eax, [ebp+1]
.text:00404DA4                 jz      loc_404B40
.text:00404DAA                 cmp     [esp+4Ch+var_29], 0
.text:00404DAF                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00404DAF                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00404DB5
.text:00404DB5 loc_404DB5:                             ; CODE XREF: sub_404780+7AB↓j
.text:00404DB5                 mov     eax, [esp+4Ch+var_28]
.text:00404DB9                 lea     edx, [eax+ebp]
.text:00404DBC                 lea     esi, [esi+0]
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404780+6EF↓j
.text:00404DC0                 cmp     [esp+4Ch+var_21], 0
.text:00404DC5                 jz      short loc_404E40
.text:00404DC7                 cmp     [esp+4Ch+var_29], 0
.text:00404DCC                 jnz     short loc_404E40
.text:00404DCE                 mov     edi, [esp+4Ch+arg_4]
.text:00404DD2                 cmp     [esp+4Ch+var_34], edi
.text:00404DD6                 jnb     short loc_404DE4
.text:00404DD8                 mov     esi, [esp+4Ch+arg_0]
.text:00404DDC                 mov     eax, [esp+4Ch+var_34]
.text:00404DE0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404DE4
.text:00404DE4 loc_404DE4:                             ; CODE XREF: sub_404780+656↑j
.text:00404DE4                 inc     [esp+4Ch+var_34]
.text:00404DE8                 mov     ecx, [esp+4Ch+arg_4]
.text:00404DEC                 cmp     [esp+4Ch+var_34], ecx
.text:00404DF0                 jnb     short loc_404E05
.text:00404DF2                 mov     cl, bl
.text:00404DF4                 mov     esi, [esp+4Ch+arg_0]
.text:00404DF8                 mov     edi, [esp+4Ch+var_34]
.text:00404DFC                 shr     cl, 6
.text:00404DFF                 add     cl, 30h ; '0'
.text:00404E02                 mov     [edi+esi], cl
.text:00404E05
.text:00404E05 loc_404E05:                             ; CODE XREF: sub_404780+670↑j
.text:00404E05                 inc     [esp+4Ch+var_34]
.text:00404E09                 mov     edi, [esp+4Ch+arg_4]
.text:00404E0D                 cmp     [esp+4Ch+var_34], edi
.text:00404E11                 jnb     short loc_404E29
.text:00404E13                 mov     cl, bl
.text:00404E15                 mov     esi, [esp+4Ch+arg_0]
.text:00404E19                 shr     cl, 3
.text:00404E1C                 mov     edi, [esp+4Ch+var_34]
.text:00404E20                 and     cl, 7
.text:00404E23                 add     cl, 30h ; '0'
.text:00404E26                 mov     [edi+esi], cl
.text:00404E29
.text:00404E29 loc_404E29:                             ; CODE XREF: sub_404780+691↑j
.text:00404E29                 inc     [esp+4Ch+var_34]
.text:00404E2D                 and     bl, 7
.text:00404E30                 add     bl, 30h ; '0'
.text:00404E33                 lea     esi, [esi+0]
.text:00404E39                 lea     edi, [edi+0]
.text:00404E40
.text:00404E40 loc_404E40:                             ; CODE XREF: sub_404780+645↑j
.text:00404E40                                         ; sub_404780+64C↑j
.text:00404E40                 lea     eax, [ebp+1]
.text:00404E43                 cmp     edx, eax
.text:00404E45                 jbe     loc_404B40
.text:00404E4B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404E4F                 cmp     [esp+4Ch+var_34], ebp
.text:00404E53                 jnb     short loc_404E60
.text:00404E55                 mov     ecx, [esp+4Ch+arg_0]
.text:00404E59                 mov     edi, [esp+4Ch+var_34]
.text:00404E5D                 mov     [edi+ecx], bl
.text:00404E60
.text:00404E60 loc_404E60:                             ; CODE XREF: sub_404780+6D3↑j
.text:00404E60                 inc     [esp+4Ch+var_34]
.text:00404E64                 mov     ebp, eax
.text:00404E66                 mov     eax, [esp+4Ch+Str]
.text:00404E6A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404E6F                 jmp     loc_404DC0
.text:00404E74 ; ---------------------------------------------------------------------------
.text:00404E74
.text:00404E74 loc_404E74:                             ; CODE XREF: sub_404780+5FF↑j
.text:00404E74                 mov     ecx, ds:_pctype
.text:00404E7A                 mov     edi, [ecx]
.text:00404E7C                 movzx   eax, word ptr [edi+edx*2]
.text:00404E80                 and     eax, 157h
.text:00404E85                 jmp     loc_404D95
.text:00404E85 ; ---------------------------------------------------------------------------
.text:00404E8A                 align 10h
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404780+5E5↑j
.text:00404E90                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404E95                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404E9D                 mov     [esp+4Ch+var_28], 0
.text:00404EA5                 mov     [esp+4Ch+var_29], 1
.text:00404EAA                 jz      loc_40503C
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404780+8CC↓j
.text:00404EB0                 mov     ecx, [esp+4Ch+arg_C]
.text:00404EB4                 lea     edx, [esp+4Ch+var_18]
.text:00404EB8                 mov     edi, [esp+4Ch+Str]
.text:00404EBC                 mov     [esp+4Ch+State], edx ; State
.text:00404EC0                 lea     esi, [esp+4Ch+var_18._State]
.text:00404EC4                 sub     ecx, ebp
.text:00404EC6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404ECA                 add     edi, ebp
.text:00404ECC                 mov     [esp+4Ch+var_30], edi
.text:00404ED0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404ED4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404ED7                 call    mbrtowc
.text:00404EDC                 test    eax, eax
.text:00404EDE                 mov     edi, eax
.text:00404EE0                 jz      short loc_404F20
.text:00404EE2                 cmp     eax, 0FFFFFFFFh
.text:00404EE5                 jz      loc_405032
.text:00404EEB                 cmp     eax, 0FFFFFFFEh
.text:00404EEE                 jz      loc_404FF2
.text:00404EF4                 cmp     [esp+4Ch+arg_10], 1
.text:00404EF9                 jz      short loc_404F30
.text:00404EFB
.text:00404EFB loc_404EFB:                             ; CODE XREF: sub_404780+7B9↓j
.text:00404EFB                                         ; sub_404780+86D↓j
.text:00404EFB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404F00                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404F08                 mov     [esp+4Ch+C], ecx ; C
.text:00404F0B                 call    iswctype
.text:00404F10                 test    eax, eax
.text:00404F12                 jnz     short loc_404F19
.text:00404F14                 mov     [esp+4Ch+var_29], 0
.text:00404F19
.text:00404F19 loc_404F19:                             ; CODE XREF: sub_404780+792↑j
.text:00404F19                 mov     [esp+4Ch+var_28], edi
.text:00404F1D                 lea     esi, [esi+0]
.text:00404F20
.text:00404F20 loc_404F20:                             ; CODE XREF: sub_404780+760↑j
.text:00404F20                                         ; sub_404780+87B↓j ...
.text:00404F20                 cmp     [esp+4Ch+var_28], 1
.text:00404F25                 jbe     loc_404D9C
.text:00404F2B                 jmp     loc_404DB5
.text:00404F30 ; ---------------------------------------------------------------------------
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: sub_404780+779↑j
.text:00404F30                 cmp     [esp+4Ch+arg_10], eax
.text:00404F34                 mov     edx, 1
.text:00404F39                 jnb     short loc_404EFB
.text:00404F3B
.text:00404F3B loc_404F3B:                             ; CODE XREF: sub_404780+867↓j
.text:00404F3B                 mov     ecx, [esp+4Ch+Str]
.text:00404F3F                 lea     esi, [edx+ebp]
.text:00404F42                 movsx   eax, byte ptr [esi+ecx]
.text:00404F46                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404F49                 cmp     eax, 21h
.text:00404F4C                 ja      def_404F52      ; jumptable 00404F52 default case, cases 93,95,97-123
.text:00404F52                 jmp     ds:jpt_404F52[eax*4] ; switch jump
.text:00404F52 ; ---------------------------------------------------------------------------
.text:00404F59                 align 4
.text:00404F5C jpt_404F52      dd offset loc_404B8B    ; DATA XREF: sub_404780+7D2↑r
.text:00404F5C                 dd offset loc_404B8B    ; jump table for switch statement
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset loc_404B8B
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset loc_404B8B
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset def_404F52
.text:00404F5C                 dd offset loc_404B8B
.text:00404FE4 ; ---------------------------------------------------------------------------
.text:00404FE4
.text:00404FE4 def_404F52:                             ; CODE XREF: sub_404780+7CC↑j
.text:00404FE4                                         ; sub_404780+7D2↑j
.text:00404FE4                                         ; DATA XREF: ...
.text:00404FE4                 inc     edx             ; jumptable 00404F52 default case, cases 93,95,97-123
.text:00404FE5                 cmp     edx, edi
.text:00404FE7                 jb      loc_404F3B
.text:00404FED                 jmp     loc_404EFB
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF2
.text:00404FF2 loc_404FF2:                             ; CODE XREF: sub_404780+76E↑j
.text:00404FF2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404FF6                 mov     [esp+4Ch+var_29], 0
.text:00404FFB                 jnb     loc_404F20
.text:00405001                 mov     eax, [esp+4Ch+var_30]
.text:00405005                 cmp     byte ptr [eax], 0
.text:00405008                 jz      loc_404F20
.text:0040500E
.text:0040500E loc_40500E:                             ; CODE XREF: sub_404780+8AB↓j
.text:0040500E                 inc     [esp+4Ch+var_28]
.text:00405012                 mov     esi, [esp+4Ch+var_28]
.text:00405016                 lea     eax, [esi+ebp]
.text:00405019                 cmp     eax, [esp+4Ch+arg_C]
.text:0040501D                 jnb     loc_404F20
.text:00405023                 mov     edi, [esp+4Ch+Str]
.text:00405027                 cmp     byte ptr [eax+edi], 0
.text:0040502B                 jnz     short loc_40500E
.text:0040502D                 jmp     loc_404F20
.text:00405032 ; ---------------------------------------------------------------------------
.text:00405032
.text:00405032 loc_405032:                             ; CODE XREF: sub_404780+765↑j
.text:00405032                 mov     [esp+4Ch+var_29], 0
.text:00405037                 jmp     loc_404F20
.text:0040503C ; ---------------------------------------------------------------------------
.text:0040503C
.text:0040503C loc_40503C:                             ; CODE XREF: sub_404780+72A↑j
.text:0040503C                 mov     edx, [esp+4Ch+Str]
.text:00405040                 mov     [esp+4Ch+C], edx ; Str
.text:00405043                 call    strlen
.text:00405048                 mov     [esp+4Ch+arg_C], eax
.text:0040504C                 jmp     loc_404EB0
.text:00405051 ; ---------------------------------------------------------------------------
.text:00405051
.text:00405051 loc_405051:                             ; CODE XREF: sub_404780+105↑j
.text:00405051                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00405051                 mov     dl, bl          ; jumptable 00404885 case 92
.text:00405053                 jmp     loc_404B84
.text:00405058 ; ---------------------------------------------------------------------------
.text:00405058
.text:00405058 loc_405058:                             ; CODE XREF: sub_404780+105↑j
.text:00405058                                         ; sub_404780+902↓j
.text:00405058                                         ; DATA XREF: ...
.text:00405058                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404885 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040505D                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:0040505D                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00405063                 jmp     loc_404B8B      ; jumptable 00404F52 cases 91,92,94,96,124
.text:00405068 ; ---------------------------------------------------------------------------
.text:00405068
.text:00405068 loc_405068:                             ; CODE XREF: sub_404780+105↑j
.text:00405068                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:00405068                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404885 cases 123,125
.text:0040506D                 jz      short loc_405084
.text:0040506F                 cmp     [esp+4Ch+arg_C], 1
.text:00405074
.text:00405074 loc_405074:                             ; CODE XREF: sub_404780+90C↓j
.text:00405074                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:00405074                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:0040507A
.text:0040507A loc_40507A:                             ; CODE XREF: sub_404780+105↑j
.text:0040507A                                         ; DATA XREF: sub_404780:jpt_404885↑o
.text:0040507A                 test    ebp, ebp        ; jumptable 00404885 cases 35,126
.text:0040507C                 jnz     def_404C82      ; jumptable 00404885 cases 37,43-58,65-90,93,95,97-122
.text:0040507C                                         ; jumptable 00404C82 default case, cases 34-38,42-44,46,48-59
.text:00405082                 jmp     short loc_405058 ; jumptable 00404885 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405084 ; ---------------------------------------------------------------------------
.text:00405084
.text:00405084 loc_405084:                             ; CODE XREF: sub_404780+8ED↑j
.text:00405084                 mov     esi, [esp+4Ch+Str]
.text:00405088                 cmp     byte ptr [esi+1], 0
.text:0040508C                 jmp     short loc_405074
.text:0040508E ; ---------------------------------------------------------------------------
.text:0040508E
.text:0040508E loc_40508E:                             ; CODE XREF: sub_404780:loc_40481F↑j
.text:0040508E                 test    ebp, ebp
.text:00405090                 jnz     short loc_40509D
.text:00405092                 cmp     [esp+4Ch+arg_10], 1
.text:00405097                 jz      loc_404B8B      ; jumptable 00404F52 cases 91,92,94,96,124
.text:0040509D
.text:0040509D loc_40509D:                             ; CODE XREF: sub_404780+910↑j
.text:0040509D                 mov     esi, [esp+4Ch+var_1C]
.text:004050A1                 test    esi, esi
.text:004050A3                 jz      short loc_4050D8
.text:004050A5                 mov     edi, [esp+4Ch+var_1C]
.text:004050A9                 movzx   eax, byte ptr [edi]
.text:004050AC                 test    al, al
.text:004050AE                 jz      short loc_4050D8
.text:004050B0
.text:004050B0 loc_4050B0:                             ; CODE XREF: sub_404780+956↓j
.text:004050B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004050B4                 cmp     [esp+4Ch+var_34], ebp
.text:004050B8                 jnb     short loc_4050C5
.text:004050BA                 mov     ecx, [esp+4Ch+arg_0]
.text:004050BE                 mov     ebx, [esp+4Ch+var_34]
.text:004050C2                 mov     [ebx+ecx], al
.text:004050C5
.text:004050C5 loc_4050C5:                             ; CODE XREF: sub_404780+938↑j
.text:004050C5                 inc     [esp+4Ch+var_1C]
.text:004050C9                 inc     [esp+4Ch+var_34]
.text:004050CD                 mov     edx, [esp+4Ch+var_1C]
.text:004050D1                 movzx   eax, byte ptr [edx]
.text:004050D4                 test    al, al
.text:004050D6                 jnz     short loc_4050B0
.text:004050D8
.text:004050D8 loc_4050D8:                             ; CODE XREF: sub_404780+923↑j
.text:004050D8                                         ; sub_404780+92E↑j
.text:004050D8                 mov     eax, [esp+4Ch+arg_4]
.text:004050DC                 cmp     [esp+4Ch+var_34], eax
.text:004050E0                 jnb     short loc_4050EE
.text:004050E2                 mov     edi, [esp+4Ch+arg_0]
.text:004050E6                 mov     esi, [esp+4Ch+var_34]
.text:004050EA                 mov     byte ptr [esi+edi], 0
.text:004050EE
.text:004050EE loc_4050EE:                             ; CODE XREF: sub_404780+960↑j
.text:004050EE                 mov     eax, [esp+4Ch+var_34]
.text:004050F2                 jmp     loc_404BBF
.text:004050F7 ; ---------------------------------------------------------------------------
.text:004050F7
.text:004050F7 loc_4050F7:                             ; CODE XREF: sub_404780+95↑j
.text:004050F7                 mov     ebx, [esp+4Ch+Str]
.text:004050FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405100                 jmp     loc_40481F
.text:00405105 ; ---------------------------------------------------------------------------
.text:00405105
.text:00405105 loc_405105:                             ; CODE XREF: sub_404780+3D↑j
.text:00405105                                         ; DATA XREF: sub_404780:jpt_4047BD↑o
.text:00405105                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004047BD case 2
.text:00405109                 cmp     [esp+4Ch+var_34], edx
.text:0040510D                 jnb     short loc_405116
.text:0040510F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405113                 mov     byte ptr [ecx], 27h ; '''
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_404780+98D↑j
.text:00405116                 mov     [esp+4Ch+var_34], 1
.text:0040511E                 mov     [esp+4Ch+var_1C], 40476Eh
.text:00405126                 jmp     loc_404806
.text:0040512B ; ---------------------------------------------------------------------------
.text:0040512B
.text:0040512B loc_40512B:                             ; CODE XREF: sub_404780+3D↑j
.text:0040512B                                         ; DATA XREF: sub_404780:jpt_4047BD↑o
.text:0040512B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004047BD case 4
.text:00405130                 jmp     def_4047BD      ; jumptable 004047BD default case, cases 0,1
.text:00405135 ; ---------------------------------------------------------------------------
.text:00405135
.text:00405135 loc_405135:                             ; CODE XREF: sub_404780+3D↑j
.text:00405135                                         ; DATA XREF: sub_404780:jpt_4047BD↑o
.text:00405135                 mov     [esp+4Ch+C], 404770h ; jumptable 004047BD cases 5,6
.text:0040513C                 call    ds:libintl_gettext
.text:00405142                 cmp     eax, 404770h
.text:00405147                 mov     edi, eax
.text:00405149                 jz      short loc_4051C0
.text:0040514B
.text:0040514B loc_40514B:                             ; CODE XREF: sub_404780+A45↓j
.text:0040514B                                         ; sub_404780+A4C↓j
.text:0040514B                 mov     [esp+4Ch+C], 40476Eh
.text:00405152                 call    ds:libintl_gettext
.text:00405158                 cmp     eax, 40476Eh
.text:0040515D                 mov     edx, eax
.text:0040515F                 jz      short loc_4051B2
.text:00405161
.text:00405161 loc_405161:                             ; CODE XREF: sub_404780+A37↓j
.text:00405161                                         ; sub_404780+A3E↓j
.text:00405161                 mov     [esp+4Ch+var_1C], edi
.text:00405165                 cmp     byte ptr [edi], 0
.text:00405168                 jz      short loc_405198
.text:0040516A
.text:0040516A loc_40516A:                             ; CODE XREF: sub_404780+A16↓j
.text:0040516A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040516E                 cmp     [esp+4Ch+var_34], ecx
.text:00405172                 jnb     short loc_405187
.text:00405174                 mov     ebp, [esp+4Ch+var_1C]
.text:00405178                 mov     edi, [esp+4Ch+arg_0]
.text:0040517C                 mov     esi, [esp+4Ch+var_34]
.text:00405180                 movzx   ebx, byte ptr [ebp+0]
.text:00405184                 mov     [esi+edi], bl
.text:00405187
.text:00405187 loc_405187:                             ; CODE XREF: sub_404780+9F2↑j
.text:00405187                 inc     [esp+4Ch+var_1C]
.text:0040518B                 inc     [esp+4Ch+var_34]
.text:0040518F                 mov     eax, [esp+4Ch+var_1C]
.text:00405193                 cmp     byte ptr [eax], 0
.text:00405196                 jnz     short loc_40516A
.text:00405198
.text:00405198 loc_405198:                             ; CODE XREF: sub_404780+9E8↑j
.text:00405198                 mov     [esp+4Ch+var_21], 1
.text:0040519D                 mov     [esp+4Ch+var_1C], edx
.text:004051A1                 mov     [esp+4Ch+C], edx ; Str
.text:004051A4                 call    strlen
.text:004051A9                 mov     [esp+4Ch+var_20], eax
.text:004051AD                 jmp     def_4047BD      ; jumptable 004047BD default case, cases 0,1
.text:004051B2 ; ---------------------------------------------------------------------------
.text:004051B2
.text:004051B2 loc_4051B2:                             ; CODE XREF: sub_404780+9DF↑j
.text:004051B2                 cmp     [esp+4Ch+arg_10], 6
.text:004051B7                 jnz     short loc_405161
.text:004051B9                 mov     edx, offset asc_40476C ; "\"'`"
.text:004051BE                 jmp     short loc_405161
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_404780+9C9↑j
.text:004051C0                 cmp     [esp+4Ch+arg_10], 6
.text:004051C5                 jnz     short loc_40514B
.text:004051C7                 mov     edi, offset asc_40476C ; "\"'`"
.text:004051CC                 jmp     loc_40514B
.text:004051CC sub_404780      endp
.text:004051CC
.text:004051D1 ; ---------------------------------------------------------------------------
.text:004051D1                 jmp     short loc_4051E0
.text:004051D1 ; ---------------------------------------------------------------------------
.text:004051D3                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: .text:004051D1↑j
.text:004051E0                 sub     esp, 0Ch
.text:004051E3                 mov     [esp+4], ebx
.text:004051E7                 mov     [esp+8], esi
.text:004051EB                 call    _errno
.text:004051F0                 mov     esi, [eax]
.text:004051F2                 mov     dword ptr [esp], 24h ; '$'
.text:004051F9                 call    sub_404400
.text:004051FE                 mov     edx, [esp+10h]
.text:00405202                 mov     ebx, eax
.text:00405204                 test    edx, edx
.text:00405206                 jz      short loc_405251
.text:00405208
.text:00405208 loc_405208:                             ; CODE XREF: .text:00405256↓j
.text:00405208                 mov     ecx, [edx]
.text:0040520A                 mov     [ebx], ecx
.text:0040520C                 mov     ecx, [edx+4]
.text:0040520F                 mov     [ebx+4], ecx
.text:00405212                 mov     ecx, [edx+8]
.text:00405215                 mov     [ebx+8], ecx
.text:00405218                 mov     ecx, [edx+0Ch]
.text:0040521B                 mov     [ebx+0Ch], ecx
.text:0040521E                 mov     ecx, [edx+10h]
.text:00405221                 mov     [ebx+10h], ecx
.text:00405224                 mov     ecx, [edx+14h]
.text:00405227                 mov     [ebx+14h], ecx
.text:0040522A                 mov     ecx, [edx+18h]
.text:0040522D                 mov     [ebx+18h], ecx
.text:00405230                 mov     ecx, [edx+1Ch]
.text:00405233                 mov     [ebx+1Ch], ecx
.text:00405236                 mov     ecx, [edx+20h]
.text:00405239                 mov     [ebx+20h], ecx
.text:0040523C                 call    _errno
.text:00405241                 mov     [eax], esi
.text:00405243                 mov     esi, [esp+8]
.text:00405247                 mov     eax, ebx
.text:00405249                 mov     ebx, [esp+4]
.text:0040524D                 add     esp, 0Ch
.text:00405250                 retn
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: .text:00405206↑j
.text:00405251                 mov     edx, offset dword_4111B0
.text:00405256                 jmp     short loc_405208
.text:00405256 ; ---------------------------------------------------------------------------
.text:00405258                 align 10h
.text:00405260                 mov     eax, [esp+4]
.text:00405264                 test    eax, eax
.text:00405266                 jz      short loc_405270
.text:00405268
.text:00405268 loc_405268:                             ; CODE XREF: .text:00405275↓j
.text:00405268                 mov     eax, [eax]
.text:0040526A                 retn
.text:0040526A ; ---------------------------------------------------------------------------
.text:0040526B                 align 10h
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: .text:00405266↑j
.text:00405270                 mov     eax, offset dword_4111B0
.text:00405275                 jmp     short loc_405268
.text:00405275 ; ---------------------------------------------------------------------------
.text:00405277                 align 10h
.text:00405280                 mov     edx, [esp+4]
.text:00405284                 test    edx, edx
.text:00405286                 jz      short loc_405290
.text:00405288
.text:00405288 loc_405288:                             ; CODE XREF: .text:00405295↓j
.text:00405288                 mov     ecx, [esp+8]
.text:0040528C                 mov     [edx], ecx
.text:0040528E                 retn
.text:0040528E ; ---------------------------------------------------------------------------
.text:0040528F                 align 10h
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: .text:00405286↑j
.text:00405290                 mov     edx, offset dword_4111B0
.text:00405295                 jmp     short loc_405288
.text:00405295 ; ---------------------------------------------------------------------------
.text:00405297                 align 10h
.text:004052A0                 sub     esp, 8
.text:004052A3                 mov     eax, [esp+0Ch]
.text:004052A7                 movzx   ecx, byte ptr [esp+10h]
.text:004052AC                 mov     [esp], ebx
.text:004052AF                 mov     ebx, [esp+14h]
.text:004052B3                 mov     [esp+4], esi
.text:004052B7                 mov     dl, cl
.text:004052B9                 shr     dl, 5
.text:004052BC                 movzx   edx, dl
.text:004052BF                 shl     edx, 2
.text:004052C2                 test    eax, eax
.text:004052C4                 lea     esi, [edx+eax+4]
.text:004052C8                 jz      short loc_4052F0
.text:004052CA
.text:004052CA loc_4052CA:                             ; CODE XREF: .text:004052F6↓j
.text:004052CA                 mov     edx, [esi]
.text:004052CC                 and     ecx, 1Fh
.text:004052CF                 and     ebx, 1
.text:004052D2                 mov     eax, edx
.text:004052D4                 shr     eax, cl
.text:004052D6                 and     eax, 1
.text:004052D9                 xor     ebx, eax
.text:004052DB                 shl     ebx, cl
.text:004052DD                 xor     edx, ebx
.text:004052DF                 mov     [esi], edx
.text:004052E1                 mov     ebx, [esp]
.text:004052E4                 mov     esi, [esp+4]
.text:004052E8                 add     esp, 8
.text:004052EB                 retn
.text:004052EB ; ---------------------------------------------------------------------------
.text:004052EC                 align 10h
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: .text:004052C8↑j
.text:004052F0                 lea     esi, dword_4111B4[edx]
.text:004052F6                 jmp     short loc_4052CA
.text:004052F6 ; ---------------------------------------------------------------------------
.text:004052F8                 align 10h
.text:00405300                 sub     esp, 2Ch
.text:00405303                 mov     [esp+24h], ebx
.text:00405307                 mov     ebx, [esp+40h]
.text:0040530B                 mov     [esp+28h], esi
.text:0040530F                 test    ebx, ebx
.text:00405311                 jz      short loc_405360
.text:00405313
.text:00405313 loc_405313:                             ; CODE XREF: .text:00405365↓j
.text:00405313                 call    _errno
.text:00405318                 mov     esi, [eax]
.text:0040531A                 mov     [esp+14h], ebx
.text:0040531E                 mov     edx, [ebx]
.text:00405320                 mov     ecx, [esp+38h]
.text:00405324                 mov     ebx, [esp+3Ch]
.text:00405328                 mov     [esp+10h], edx
.text:0040532C                 mov     edx, [esp+34h]
.text:00405330                 mov     [esp+0Ch], ebx
.text:00405334                 mov     [esp+8], ecx
.text:00405338                 mov     [esp+4], edx
.text:0040533C                 mov     edx, [esp+30h]
.text:00405340                 mov     [esp], edx
.text:00405343                 call    sub_404780
.text:00405348                 mov     ebx, eax
.text:0040534A                 call    _errno
.text:0040534F                 mov     [eax], esi
.text:00405351                 mov     esi, [esp+28h]
.text:00405355                 mov     eax, ebx
.text:00405357                 mov     ebx, [esp+24h]
.text:0040535B                 add     esp, 2Ch
.text:0040535E                 retn
.text:0040535E ; ---------------------------------------------------------------------------
.text:0040535F                 align 10h
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: .text:00405311↑j
.text:00405360                 mov     ebx, offset dword_4111B0
.text:00405365                 jmp     short loc_405313
.text:00405365 ; ---------------------------------------------------------------------------
.text:00405367                 align 10h
.text:00405370                 push    ebp
.text:00405371                 push    edi
.text:00405372                 push    esi
.text:00405373                 push    ebx
.text:00405374                 sub     esp, 2Ch
.text:00405377                 mov     ebp, [esp+48h]
.text:0040537B                 call    _errno
.text:00405380                 mov     edx, [eax]
.text:00405382                 test    ebp, ebp
.text:00405384                 mov     ebx, ebp
.text:00405386                 mov     [esp+28h], edx
.text:0040538A                 jz      loc_405440
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: .text:00405445↓j
.text:00405390                 call    _errno
.text:00405395                 mov     edi, [eax]
.text:00405397                 mov     esi, ebp
.text:00405399                 mov     [esp+14h], ebx
.text:0040539D                 mov     ecx, [ebx]
.text:0040539F                 mov     dword ptr [esp], 0
.text:004053A6                 mov     edx, [esp+44h]
.text:004053AA                 mov     dword ptr [esp+4], 0
.text:004053B2                 mov     eax, [esp+40h]
.text:004053B6                 mov     [esp+10h], ecx
.text:004053BA                 mov     [esp+0Ch], edx
.text:004053BE                 mov     [esp+8], eax
.text:004053C2                 call    sub_404780
.text:004053C7                 mov     ebx, eax
.text:004053C9                 call    _errno
.text:004053CE                 mov     [eax], edi
.text:004053D0                 lea     edi, [ebx+1]
.text:004053D3                 mov     [esp], edi
.text:004053D6                 call    sub_404400
.text:004053DB                 mov     [esp+24h], eax
.text:004053DF                 test    ebp, ebp
.text:004053E1                 jz      short loc_405432
.text:004053E3
.text:004053E3 loc_4053E3:                             ; CODE XREF: .text:00405437↓j
.text:004053E3                 call    _errno
.text:004053E8                 mov     ebp, [eax]
.text:004053EA                 mov     [esp+14h], esi
.text:004053EE                 mov     ecx, [esi]
.text:004053F0                 mov     [esp+4], edi
.text:004053F4                 mov     edx, [esp+44h]
.text:004053F8                 mov     esi, [esp+24h]
.text:004053FC                 mov     [esp+10h], ecx
.text:00405400                 mov     eax, [esp+40h]
.text:00405404                 mov     [esp+0Ch], edx
.text:00405408                 mov     [esp], esi
.text:0040540B                 mov     [esp+8], eax
.text:0040540F                 call    sub_404780
.text:00405414                 call    _errno
.text:00405419                 mov     [eax], ebp
.text:0040541B                 call    _errno
.text:00405420                 mov     ebx, [esp+28h]
.text:00405424                 mov     [eax], ebx
.text:00405426                 mov     eax, [esp+24h]
.text:0040542A                 add     esp, 2Ch
.text:0040542D                 pop     ebx
.text:0040542E                 pop     esi
.text:0040542F                 pop     edi
.text:00405430                 pop     ebp
.text:00405431                 retn
.text:00405432 ; ---------------------------------------------------------------------------
.text:00405432
.text:00405432 loc_405432:                             ; CODE XREF: .text:004053E1↑j
.text:00405432                 mov     esi, offset dword_4111B0
.text:00405437                 jmp     short loc_4053E3
.text:00405437 ; ---------------------------------------------------------------------------
.text:00405439                 align 10h
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: .text:0040538A↑j
.text:00405440                 mov     ebx, offset dword_4111B0
.text:00405445                 jmp     loc_405390
.text:00405445 ; ---------------------------------------------------------------------------
.text:0040544A                 align 10h
.text:00405450                 sub     esp, 1Ch
.text:00405453                 mov     edx, [esp+24h]
.text:00405457                 mov     dword ptr [esp+0Ch], offset dword_4111B0
.text:0040545F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405467                 mov     [esp+4], edx
.text:0040546B                 mov     edx, [esp+20h]
.text:0040546F                 mov     [esp], edx
.text:00405472                 call    sub_4058C0
.text:00405477                 add     esp, 1Ch
.text:0040547A                 retn
.text:0040547A ; ---------------------------------------------------------------------------
.text:0040547B                 align 10h
.text:00405480                 sub     esp, 1Ch
.text:00405483                 mov     edx, [esp+20h]
.text:00405487                 mov     dword ptr [esp+0Ch], offset dword_4111B0
.text:0040548F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405497                 mov     [esp+4], edx
.text:0040549B                 mov     dword ptr [esp], 0
.text:004054A2                 call    sub_4058C0
.text:004054A7                 add     esp, 1Ch
.text:004054AA                 retn
.text:004054AA ; ---------------------------------------------------------------------------
.text:004054AB                 align 10h
.text:004054B0                 push    ebp
.text:004054B1                 xor     eax, eax
.text:004054B3                 mov     ecx, 8
.text:004054B8                 push    edi
.text:004054B9                 push    esi
.text:004054BA                 push    ebx
.text:004054BB                 sub     esp, 0ACh
.text:004054C1                 mov     ebp, [esp+0C4h]
.text:004054C8                 cld
.text:004054C9                 lea     edi, [esp+14h]
.text:004054CD                 mov     [esp+10h], ebp
.text:004054D1                 rep stosd
.text:004054D3                 mov     eax, [esp+30h]
.text:004054D7                 mov     edi, [esp+10h]
.text:004054DB                 mov     esi, [esp+14h]
.text:004054DF                 mov     [esp+60h], eax
.text:004054E3                 mov     ebp, [esp+18h]
.text:004054E7                 mov     eax, [esp+10h]
.text:004054EB                 mov     [esp+40h], edi
.text:004054EF                 mov     ecx, [esp+28h]
.text:004054F3                 mov     edi, [esp+1Ch]
.text:004054F7                 mov     [esp+44h], esi
.text:004054FB                 mov     edx, [esp+2Ch]
.text:004054FF                 mov     esi, [esp+20h]
.text:00405503                 mov     [esp+70h], eax
.text:00405507                 mov     ebx, [esp+24h]
.text:0040550B                 mov     eax, [esp+14h]
.text:0040550F                 mov     [esp+48h], ebp
.text:00405513                 mov     [esp+4Ch], edi
.text:00405517                 mov     [esp+50h], esi
.text:0040551B                 mov     [esp+54h], ebx
.text:0040551F                 mov     [esp+58h], ecx
.text:00405523                 mov     [esp+5Ch], edx
.text:00405527                 mov     [esp+74h], eax
.text:0040552B                 mov     [esp+78h], ebp
.text:0040552F                 mov     [esp+7Ch], edi
.text:00405533                 mov     [esp+80h], esi
.text:0040553A                 mov     [esp+84h], ebx
.text:00405541                 mov     ebx, [esp+30h]
.text:00405545                 mov     [esp+8Ch], edx
.text:0040554C                 mov     edx, [esp+0C8h]
.text:00405553                 mov     [esp+88h], ecx
.text:0040555A                 lea     ecx, [esp+70h]
.text:0040555E                 mov     [esp+4], edx
.text:00405562                 mov     edx, [esp+0C0h]
.text:00405569                 mov     [esp+90h], ebx
.text:00405570                 mov     [esp+0Ch], ecx
.text:00405574                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040557C                 mov     [esp], edx
.text:0040557F                 call    sub_4058C0
.text:00405584                 add     esp, 0ACh
.text:0040558A                 pop     ebx
.text:0040558B                 pop     esi
.text:0040558C                 pop     edi
.text:0040558D                 pop     ebp
.text:0040558E                 retn
.text:0040558E ; ---------------------------------------------------------------------------
.text:0040558F                 align 10h
.text:00405590                 push    ebp
.text:00405591                 xor     eax, eax
.text:00405593                 mov     ecx, 8
.text:00405598                 push    edi
.text:00405599                 push    esi
.text:0040559A                 push    ebx
.text:0040559B                 sub     esp, 0ACh
.text:004055A1                 mov     edx, [esp+0C4h]
.text:004055A8                 cld
.text:004055A9                 lea     edi, [esp+14h]
.text:004055AD                 mov     [esp+10h], edx
.text:004055B1                 rep stosd
.text:004055B3                 mov     eax, [esp+30h]
.text:004055B7                 mov     ebp, [esp+10h]
.text:004055BB                 mov     edi, [esp+14h]
.text:004055BF                 mov     [esp+60h], eax
.text:004055C3                 mov     esi, [esp+20h]
.text:004055C7                 mov     eax, [esp+10h]
.text:004055CB                 mov     [esp+40h], ebp
.text:004055CF                 mov     ecx, [esp+28h]
.text:004055D3                 mov     ebp, [esp+18h]
.text:004055D7                 mov     [esp+44h], edi
.text:004055DB                 mov     edx, [esp+2Ch]
.text:004055DF                 mov     edi, [esp+1Ch]
.text:004055E3                 mov     [esp+70h], eax
.text:004055E7                 mov     ebx, [esp+24h]
.text:004055EB                 mov     eax, [esp+14h]
.text:004055EF                 mov     [esp+48h], ebp
.text:004055F3                 mov     [esp+4Ch], edi
.text:004055F7                 mov     [esp+50h], esi
.text:004055FB                 mov     [esp+54h], ebx
.text:004055FF                 mov     [esp+58h], ecx
.text:00405603                 mov     [esp+5Ch], edx
.text:00405607                 mov     [esp+74h], eax
.text:0040560B                 mov     [esp+78h], ebp
.text:0040560F                 mov     [esp+7Ch], edi
.text:00405613                 mov     [esp+80h], esi
.text:0040561A                 mov     [esp+84h], ebx
.text:00405621                 mov     esi, [esp+30h]
.text:00405625                 lea     ebx, [esp+70h]
.text:00405629                 mov     [esp+8Ch], edx
.text:00405630                 mov     edx, [esp+0C8h]
.text:00405637                 mov     [esp+88h], ecx
.text:0040563E                 mov     ecx, [esp+0CCh]
.text:00405645                 mov     [esp+4], edx
.text:00405649                 mov     edx, [esp+0C0h]
.text:00405650                 mov     [esp+90h], esi
.text:00405657                 mov     [esp+0Ch], ebx
.text:0040565B                 mov     [esp+8], ecx
.text:0040565F                 mov     [esp], edx
.text:00405662                 call    sub_4058C0
.text:00405667                 add     esp, 0ACh
.text:0040566D                 pop     ebx
.text:0040566E                 pop     esi
.text:0040566F                 pop     edi
.text:00405670                 pop     ebp
.text:00405671                 retn
.text:00405671 ; ---------------------------------------------------------------------------
.text:00405672                 align 10h
.text:00405680                 push    ebp
.text:00405681                 xor     eax, eax
.text:00405683                 mov     ecx, 8
.text:00405688                 push    edi
.text:00405689                 push    esi
.text:0040568A                 push    ebx
.text:0040568B                 sub     esp, 0ACh
.text:00405691                 mov     edi, [esp+0C0h]
.text:00405698                 cld
.text:00405699                 mov     [esp+10h], edi
.text:0040569D                 lea     edi, [esp+14h]
.text:004056A1                 rep stosd
.text:004056A3                 mov     eax, [esp+30h]
.text:004056A7                 mov     esi, [esp+10h]
.text:004056AB                 mov     ebx, [esp+14h]
.text:004056AF                 mov     [esp+60h], eax
.text:004056B3                 mov     ebp, [esp+18h]
.text:004056B7                 mov     eax, [esp+10h]
.text:004056BB                 mov     [esp+40h], esi
.text:004056BF                 mov     edi, [esp+1Ch]
.text:004056C3                 mov     esi, [esp+20h]
.text:004056C7                 mov     [esp+44h], ebx
.text:004056CB                 mov     ecx, [esp+28h]
.text:004056CF                 mov     edx, [esp+2Ch]
.text:004056D3                 mov     [esp+70h], eax
.text:004056D7                 mov     ebx, [esp+24h]
.text:004056DB                 mov     eax, [esp+14h]
.text:004056DF                 mov     [esp+48h], ebp
.text:004056E3                 mov     [esp+4Ch], edi
.text:004056E7                 mov     [esp+50h], esi
.text:004056EB                 mov     [esp+54h], ebx
.text:004056EF                 mov     [esp+58h], ecx
.text:004056F3                 mov     [esp+5Ch], edx
.text:004056F7                 mov     [esp+74h], eax
.text:004056FB                 mov     [esp+78h], ebp
.text:004056FF                 mov     [esp+7Ch], edi
.text:00405703                 mov     [esp+80h], esi
.text:0040570A                 mov     [esp+84h], ebx
.text:00405711                 mov     [esp+8Ch], edx
.text:00405718                 lea     edx, [esp+70h]
.text:0040571C                 mov     [esp+88h], ecx
.text:00405723                 mov     ecx, [esp+30h]
.text:00405727                 mov     [esp+0Ch], edx
.text:0040572B                 mov     edx, [esp+0C4h]
.text:00405732                 mov     [esp+90h], ecx
.text:00405739                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405741                 mov     [esp+4], edx
.text:00405745                 mov     dword ptr [esp], 0
.text:0040574C                 call    sub_4058C0
.text:00405751                 add     esp, 0ACh
.text:00405757                 pop     ebx
.text:00405758                 pop     esi
.text:00405759                 pop     edi
.text:0040575A                 pop     ebp
.text:0040575B                 retn
.text:0040575B ; ---------------------------------------------------------------------------
.text:0040575C                 align 10h
.text:00405760                 push    edi
.text:00405761                 push    esi
.text:00405762                 push    ebx
.text:00405763                 sub     esp, 40h
.text:00405766                 mov     edx, ds:dword_4111BC
.text:0040576C                 mov     ebx, ds:dword_4111B0
.text:00405772                 mov     esi, ds:dword_4111B8
.text:00405778                 mov     edi, ds:dword_4111B4
.text:0040577E                 mov     [esp+1Ch], edx
.text:00405782                 mov     ecx, ds:dword_4111C0
.text:00405788                 mov     edx, ds:dword_4111D0
.text:0040578E                 mov     [esp+10h], ebx
.text:00405792                 mov     ebx, ds:dword_4111C4
.text:00405798                 mov     [esp+30h], edx
.text:0040579C                 movzx   edx, byte ptr [esp+54h]
.text:004057A1                 mov     [esp+18h], esi
.text:004057A5                 mov     esi, ds:dword_4111CC
.text:004057AB                 mov     [esp+14h], edi
.text:004057AF                 mov     edi, ds:dword_4111C8
.text:004057B5                 mov     [esp+20h], ecx
.text:004057B9                 mov     cl, dl
.text:004057BB                 shr     cl, 5
.text:004057BE                 mov     [esp+24h], ebx
.text:004057C2                 movzx   ebx, cl
.text:004057C5                 mov     [esp+2Ch], esi
.text:004057C9                 lea     esi, [esp+10h]
.text:004057CD                 mov     [esp+28h], edi
.text:004057D1                 lea     edi, [esi+ebx*4]
.text:004057D4                 mov     ebx, edx
.text:004057D6                 mov     edx, [edi+4]
.text:004057D9                 and     ebx, 1Fh
.text:004057DC                 mov     cl, bl
.text:004057DE                 mov     eax, edx
.text:004057E0                 shr     eax, cl
.text:004057E2                 and     eax, 1
.text:004057E5                 xor     eax, 1
.text:004057E8                 shl     eax, cl
.text:004057EA                 xor     edx, eax
.text:004057EC                 mov     [edi+4], edx
.text:004057EF                 mov     edx, [esp+50h]
.text:004057F3                 mov     [esp+0Ch], esi
.text:004057F7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004057FF                 mov     [esp+4], edx
.text:00405803                 mov     dword ptr [esp], 0
.text:0040580A                 call    sub_4058C0
.text:0040580F                 add     esp, 40h
.text:00405812                 pop     ebx
.text:00405813                 pop     esi
.text:00405814                 pop     edi
.text:00405815                 retn
.text:00405815 ; ---------------------------------------------------------------------------
.text:00405816                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820
.text:00405820 ; int __cdecl sub_405820(char *)
.text:00405820 sub_405820      proc near               ; CODE XREF: sub_4040D0+64↑p
.text:00405820
.text:00405820 var_4C          = dword ptr -4Ch
.text:00405820 var_48          = dword ptr -48h
.text:00405820 var_44          = dword ptr -44h
.text:00405820 var_40          = dword ptr -40h
.text:00405820 var_3C          = dword ptr -3Ch
.text:00405820 var_38          = dword ptr -38h
.text:00405820 var_34          = dword ptr -34h
.text:00405820 var_30          = dword ptr -30h
.text:00405820 var_2C          = dword ptr -2Ch
.text:00405820 var_28          = dword ptr -28h
.text:00405820 var_24          = dword ptr -24h
.text:00405820 var_20          = dword ptr -20h
.text:00405820 var_1C          = dword ptr -1Ch
.text:00405820 arg_0           = dword ptr  4
.text:00405820
.text:00405820                 sub     esp, 4Ch
.text:00405823                 mov     ecx, ds:dword_4111B0
.text:00405829                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405831                 mov     edx, ds:dword_4111B4
.text:00405837                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040583E                 mov     [esp+4Ch+var_3C], ecx
.text:00405842                 mov     ecx, ds:dword_4111BC
.text:00405848                 mov     [esp+4Ch+var_38], edx
.text:0040584C                 mov     edx, ds:dword_4111B8
.text:00405852                 mov     [esp+4Ch+var_30], ecx
.text:00405856                 mov     ecx, ds:dword_4111C0
.text:0040585C                 mov     eax, edx
.text:0040585E                 shr     eax, 1Ah
.text:00405861                 and     eax, 1
.text:00405864                 xor     eax, 1
.text:00405867                 mov     [esp+4Ch+var_2C], ecx
.text:0040586B                 shl     eax, 1Ah
.text:0040586E                 mov     ecx, ds:dword_4111C4
.text:00405874                 xor     edx, eax
.text:00405876                 mov     [esp+4Ch+var_34], edx
.text:0040587A                 mov     edx, [esp+4Ch+arg_0]
.text:0040587E                 mov     [esp+4Ch+var_28], ecx
.text:00405882                 mov     ecx, ds:dword_4111C8
.text:00405888                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040588C                 mov     [esp+4Ch+var_24], ecx
.text:00405890                 mov     ecx, ds:dword_4111CC
.text:00405896                 mov     [esp+4Ch+var_20], ecx
.text:0040589A                 mov     ecx, ds:dword_4111D0
.text:004058A0                 mov     [esp+4Ch+var_1C], ecx
.text:004058A4                 lea     ecx, [esp+4Ch+var_3C]
.text:004058A8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004058AC                 call    sub_4058C0
.text:004058B1                 add     esp, 4Ch
.text:004058B4                 retn
.text:004058B4 sub_405820      endp
.text:004058B4
.text:004058B4 ; ---------------------------------------------------------------------------
.text:004058B5                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0
.text:004058C0 ; int __cdecl sub_4058C0(int, char *, int, int)
.text:004058C0 sub_4058C0      proc near               ; CODE XREF: .text:00405472↑p
.text:004058C0                                         ; .text:004054A2↑p ...
.text:004058C0
.text:004058C0 Block           = dword ptr -2Ch
.text:004058C0 var_28          = dword ptr -28h
.text:004058C0 Str             = dword ptr -24h
.text:004058C0 var_20          = dword ptr -20h
.text:004058C0 var_1C          = dword ptr -1Ch
.text:004058C0 var_18          = dword ptr -18h
.text:004058C0 var_14          = dword ptr -14h
.text:004058C0 arg_0           = dword ptr  4
.text:004058C0 arg_4           = dword ptr  8
.text:004058C0 arg_8           = dword ptr  0Ch
.text:004058C0 arg_C           = dword ptr  10h
.text:004058C0
.text:004058C0                 push    ebp
.text:004058C1                 push    edi
.text:004058C2                 push    esi
.text:004058C3                 push    ebx
.text:004058C4                 sub     esp, 1Ch
.text:004058C7                 call    _errno
.text:004058CC                 mov     edx, [eax]
.text:004058CE                 mov     eax, [esp+2Ch+arg_0]
.text:004058D2                 mov     [esp+2Ch+var_14], edx
.text:004058D6                 test    eax, eax
.text:004058D8                 js      loc_405A7A
.text:004058DE                 mov     eax, [esp+2Ch+arg_0]
.text:004058E2                 cmp     dword_410050, eax
.text:004058E8                 ja      short loc_405960
.text:004058EA                 mov     esi, eax
.text:004058EC                 inc     esi
.text:004058ED                 cmp     esi, 1FFFFFFFh
.text:004058F3                 ja      loc_405A7F
.text:004058F9                 mov     ebx, off_41005C
.text:004058FF                 cmp     ebx, offset dword_410054
.text:00405905                 jz      loc_405A51
.text:0040590B
.text:0040590B loc_40590B:                             ; CODE XREF: sub_4058C0+1B5↓j
.text:0040590B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040590E                 lea     ecx, ds:0[esi*8]
.text:00405915                 mov     ebp, esi
.text:00405917                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040591B                 call    sub_404490
.text:00405920                 mov     off_41005C, eax
.text:00405925                 mov     ebx, dword_410050
.text:0040592B                 sub     ebp, ebx
.text:0040592D                 lea     edi, [eax+ebx*8]
.text:00405930                 lea     eax, ds:0[ebp*8]
.text:00405937                 cmp     eax, 7
.text:0040593A                 jbe     short loc_405950
.text:0040593C                 test    edi, 4
.text:00405942                 jz      short loc_405950
.text:00405944                 mov     dword ptr [edi], 0
.text:0040594A                 sub     eax, 4
.text:0040594D                 add     edi, 4
.text:00405950
.text:00405950 loc_405950:                             ; CODE XREF: sub_4058C0+7A↑j
.text:00405950                                         ; sub_4058C0+82↑j
.text:00405950                 cld
.text:00405951                 mov     ecx, eax
.text:00405953                 shr     ecx, 2
.text:00405956                 xor     eax, eax
.text:00405958                 rep stosd
.text:0040595A                 mov     dword_410050, esi
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_4058C0+28↑j
.text:00405960                 mov     esi, off_41005C
.text:00405966                 mov     eax, [esp+2Ch+arg_0]
.text:0040596A                 mov     ebp, [esi+eax*8]
.text:0040596D                 mov     edi, [esi+eax*8+4]
.text:00405971                 mov     esi, [esp+2Ch+arg_C]
.text:00405975                 test    esi, esi
.text:00405977                 jz      loc_405A47
.text:0040597D
.text:0040597D loc_40597D:                             ; CODE XREF: sub_4058C0+18C↓j
.text:0040597D                 call    _errno
.text:00405982                 mov     ebx, [eax]
.text:00405984                 mov     [esp+2Ch+var_18], esi ; int
.text:00405988                 mov     ecx, [esi]
.text:0040598A                 mov     [esp+2Ch+Block], edi ; int
.text:0040598D                 mov     edx, [esp+2Ch+arg_8]
.text:00405991                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405995                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405999                 mov     ecx, [esp+2Ch+arg_4]
.text:0040599D                 mov     [esp+2Ch+var_20], edx ; int
.text:004059A1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004059A5                 call    sub_404780
.text:004059AA                 mov     esi, eax
.text:004059AC                 call    _errno
.text:004059B1                 mov     [eax], ebx
.text:004059B3                 cmp     ebp, esi
.text:004059B5                 ja      short loc_405A2B
.text:004059B7                 lea     ebp, [esi+1]
.text:004059BA                 mov     ebx, off_41005C
.text:004059C0                 cmp     edi, offset unk_4110B0
.text:004059C6                 mov     esi, [esp+2Ch+arg_0]
.text:004059CA                 mov     [ebx+esi*8], ebp
.text:004059CD                 jz      short loc_4059DD
.text:004059CF                 mov     [esp+2Ch+Block], edi ; Block
.text:004059D2                 call    free
.text:004059D7                 mov     ebx, off_41005C
.text:004059DD
.text:004059DD loc_4059DD:                             ; CODE XREF: sub_4058C0+10D↑j
.text:004059DD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004059E0                 call    sub_404400
.text:004059E5                 mov     esi, [esp+2Ch+arg_C]
.text:004059E9                 mov     edi, eax
.text:004059EB                 mov     eax, [esp+2Ch+arg_0]
.text:004059EF                 test    esi, esi
.text:004059F1                 mov     [ebx+eax*8+4], edi
.text:004059F5                 jz      short loc_405A40
.text:004059F7
.text:004059F7 loc_4059F7:                             ; CODE XREF: sub_4058C0+185↓j
.text:004059F7                 call    _errno
.text:004059FC                 mov     ebx, [eax]
.text:004059FE                 mov     [esp+2Ch+var_18], esi ; int
.text:00405A02                 mov     ecx, [esi]
.text:00405A04                 mov     [esp+2Ch+Block], edi ; int
.text:00405A07                 mov     edx, [esp+2Ch+arg_8]
.text:00405A0B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405A0F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405A13                 mov     ecx, [esp+2Ch+arg_4]
.text:00405A17                 mov     [esp+2Ch+var_20], edx ; int
.text:00405A1B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405A1F                 call    sub_404780
.text:00405A24                 call    _errno
.text:00405A29                 mov     [eax], ebx
.text:00405A2B
.text:00405A2B loc_405A2B:                             ; CODE XREF: sub_4058C0+F5↑j
.text:00405A2B                 call    _errno
.text:00405A30                 mov     ebp, [esp+2Ch+var_14]
.text:00405A34                 mov     [eax], ebp
.text:00405A36                 add     esp, 1Ch
.text:00405A39                 mov     eax, edi
.text:00405A3B                 pop     ebx
.text:00405A3C                 pop     esi
.text:00405A3D                 pop     edi
.text:00405A3E                 pop     ebp
.text:00405A3F                 retn
.text:00405A40 ; ---------------------------------------------------------------------------
.text:00405A40
.text:00405A40 loc_405A40:                             ; CODE XREF: sub_4058C0+135↑j
.text:00405A40                 mov     esi, offset dword_4111B0
.text:00405A45                 jmp     short loc_4059F7
.text:00405A47 ; ---------------------------------------------------------------------------
.text:00405A47
.text:00405A47 loc_405A47:                             ; CODE XREF: sub_4058C0+B7↑j
.text:00405A47                 mov     esi, offset dword_4111B0
.text:00405A4C                 jmp     loc_40597D
.text:00405A51 ; ---------------------------------------------------------------------------
.text:00405A51
.text:00405A51 loc_405A51:                             ; CODE XREF: sub_4058C0+45↑j
.text:00405A51                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405A58                 call    sub_404400
.text:00405A5D                 mov     off_41005C, eax
.text:00405A62                 mov     edi, dword_410054
.text:00405A68                 mov     ebx, eax
.text:00405A6A                 mov     ecx, off_410058
.text:00405A70                 mov     [eax], edi
.text:00405A72                 mov     [eax+4], ecx
.text:00405A75                 jmp     loc_40590B
.text:00405A7A ; ---------------------------------------------------------------------------
.text:00405A7A
.text:00405A7A loc_405A7A:                             ; CODE XREF: sub_4058C0+18↑j
.text:00405A7A                 call    abort
.text:00405A7F ; ---------------------------------------------------------------------------
.text:00405A7F
.text:00405A7F loc_405A7F:                             ; CODE XREF: sub_4058C0+33↑j
.text:00405A7F                 call    sub_4046B0
.text:00405A7F sub_4058C0      endp
.text:00405A7F
.text:00405A7F ; ---------------------------------------------------------------------------
.text:00405A84                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90 ; Attributes: thunk
.text:00405A90
.text:00405A90 libintl_bindtextdomain proc near
.text:00405A90                 jmp     ds:__imp_libintl_bindtextdomain
.text:00405A90 libintl_bindtextdomain endp
.text:00405A90
.text:00405A90 ; ---------------------------------------------------------------------------
.text:00405A96                 align 10h
.text:00405AA0                 jmp     ds:libintl_textdomain
.text:00405AA0 ; ---------------------------------------------------------------------------
.text:00405AA6                 align 10h
.text:00405AB0                 jmp     ds:libintl_gettext
.text:00405AB0 ; ---------------------------------------------------------------------------
.text:00405AB6                 align 10h
.text:00405AC0 ; const char aS_3[]
.text:00405AC0 aS_3            db ': %s',0             ; DATA XREF: sub_405AE0+B8↓o
.text:00405AC0                                         ; sub_405BE4+122↓o
.text:00405AC5 aUnknownSystemE db 'Unknown system error',0
.text:00405AC5                                         ; DATA XREF: sub_405AE0:loc_405BAD↓o
.text:00405AC5                                         ; sub_405BE4:loc_405D1E↓o
.text:00405ADA ; const char aS_4[]
.text:00405ADA aS_4            db '%s: ',0             ; DATA XREF: sub_405AE0:loc_405BB4↓o
.text:00405ADF                 align 10h
.text:00405AE0
.text:00405AE0 ; =============== S U B R O U T I N E =======================================
.text:00405AE0
.text:00405AE0
.text:00405AE0 ; int __cdecl sub_405AE0(int Code, int ErrorMessage, char *, char)
.text:00405AE0 sub_405AE0      proc near               ; CODE XREF: sub_4017F0+349↑p
.text:00405AE0                                         ; sub_4017F0+3B5↑p ...
.text:00405AE0
.text:00405AE0 Stream          = dword ptr -1Ch
.text:00405AE0 Format          = dword ptr -18h
.text:00405AE0 ArgList         = dword ptr -14h
.text:00405AE0 Code            = dword ptr  4
.text:00405AE0 ErrorMessage    = dword ptr  8
.text:00405AE0 arg_8           = dword ptr  0Ch
.text:00405AE0 arg_C           = byte ptr  10h
.text:00405AE0
.text:00405AE0                 push    esi
.text:00405AE1                 push    ebx
.text:00405AE2                 sub     esp, 14h
.text:00405AE5                 mov     edx, ds:_iob
.text:00405AEB                 mov     esi, [esp+1Ch+Code]
.text:00405AEF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405AF3                 add     edx, 20h ; ' '
.text:00405AF6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405AF9                 call    fflush
.text:00405AFE                 mov     eax, ds:dword_411C20
.text:00405B03                 test    eax, eax
.text:00405B05                 jz      loc_405BB4
.text:00405B0B                 call    eax ; dword_411C20
.text:00405B0D
.text:00405B0D loc_405B0D:                             ; CODE XREF: sub_405AE0+F7↓j
.text:00405B0D                 lea     edx, [esp+1Ch+arg_C]
.text:00405B11                 mov     ecx, [esp+1Ch+arg_8]
.text:00405B15                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405B19                 mov     edx, ds:_iob
.text:00405B1F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405B23                 add     edx, 40h ; '@'
.text:00405B26                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405B29                 call    vfprintf
.text:00405B2E                 inc     ds:dword_411C30
.text:00405B34                 test    ebx, ebx
.text:00405B36                 jnz     short loc_405B82
.text:00405B38
.text:00405B38 loc_405B38:                             ; CODE XREF: sub_405AE0+CB↓j
.text:00405B38                 mov     edx, ds:_iob
.text:00405B3E                 lea     ecx, [edx+40h]
.text:00405B41                 mov     ebx, [ecx+4]
.text:00405B44                 dec     ebx
.text:00405B45                 test    ebx, ebx
.text:00405B47                 mov     [ecx+4], ebx
.text:00405B4A                 js      short loc_405B70
.text:00405B4C                 mov     ecx, [edx+40h]
.text:00405B4F                 mov     byte ptr [ecx], 0Ah
.text:00405B52                 inc     dword ptr [edx+40h]
.text:00405B55
.text:00405B55 loc_405B55:                             ; CODE XREF: sub_405AE0+A0↓j
.text:00405B55                 mov     edx, ds:_iob
.text:00405B5B                 add     edx, 40h ; '@'
.text:00405B5E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405B61                 call    fflush
.text:00405B66                 test    esi, esi
.text:00405B68                 jnz     short loc_405BDC
.text:00405B6A                 add     esp, 14h
.text:00405B6D                 pop     ebx
.text:00405B6E                 pop     esi
.text:00405B6F                 retn
.text:00405B70 ; ---------------------------------------------------------------------------
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405AE0+6A↑j
.text:00405B70                 mov     [esp+1Ch+Format], ecx ; File
.text:00405B74                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00405B7B                 call    _flsbuf
.text:00405B80                 jmp     short loc_405B55
.text:00405B82 ; ---------------------------------------------------------------------------
.text:00405B82
.text:00405B82 loc_405B82:                             ; CODE XREF: sub_405AE0+56↑j
.text:00405B82                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405B85                 call    strerror
.text:00405B8A                 test    eax, eax
.text:00405B8C                 jz      short loc_405BAD
.text:00405B8E
.text:00405B8E loc_405B8E:                             ; CODE XREF: sub_405AE0+D2↓j
.text:00405B8E                 mov     [esp+1Ch+ArgList], eax
.text:00405B92                 mov     ebx, ds:_iob
.text:00405B98                 mov     [esp+1Ch+Format], offset aS_3 ; ": %s"
.text:00405BA0                 add     ebx, 40h ; '@'
.text:00405BA3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405BA6                 call    fprintf
.text:00405BAB                 jmp     short loc_405B38
.text:00405BAD ; ---------------------------------------------------------------------------
.text:00405BAD
.text:00405BAD loc_405BAD:                             ; CODE XREF: sub_405AE0+AC↑j
.text:00405BAD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405BB2                 jmp     short loc_405B8E
.text:00405BB4 ; ---------------------------------------------------------------------------
.text:00405BB4
.text:00405BB4 loc_405BB4:                             ; CODE XREF: sub_405AE0+25↑j
.text:00405BB4                 mov     [esp+1Ch+Format], offset aS_4 ; "%s: "
.text:00405BBC                 mov     edx, ds:_iob
.text:00405BC2                 mov     ecx, ds:dword_411BF0
.text:00405BC8                 add     edx, 40h ; '@'
.text:00405BCB                 mov     [esp+1Ch+ArgList], ecx
.text:00405BCF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405BD2                 call    fprintf
.text:00405BD7                 jmp     loc_405B0D
.text:00405BDC ; ---------------------------------------------------------------------------
.text:00405BDC
.text:00405BDC loc_405BDC:                             ; CODE XREF: sub_405AE0+88↑j
.text:00405BDC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00405BDF                 call    exit
.text:00405BDF sub_405AE0      endp
.text:00405BDF
.text:00405BE4
.text:00405BE4 ; =============== S U B R O U T I N E =======================================
.text:00405BE4
.text:00405BE4
.text:00405BE4 ; int __cdecl sub_405BE4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405BE4 sub_405BE4      proc near               ; DATA XREF: sub_405BE4+77↓o
.text:00405BE4
.text:00405BE4 Stream          = dword ptr -28h
.text:00405BE4 Format          = dword ptr -24h
.text:00405BE4 ArgList         = dword ptr -20h
.text:00405BE4 var_1C          = dword ptr -1Ch
.text:00405BE4 Code            = dword ptr  8
.text:00405BE4 ErrorMessage    = dword ptr  0Ch
.text:00405BE4 Str2            = dword ptr  10h
.text:00405BE4 arg_10          = dword ptr  14h
.text:00405BE4 arg_14          = dword ptr  18h
.text:00405BE4 arg_18          = byte ptr  1Ch
.text:00405BE4
.text:00405BE4                 and     eax, 64253A73h
.text:00405BE9                 cmp     ah, [eax]
.text:00405BEB
.text:00405BEB loc_405BEB:                             ; DATA XREF: sub_405BE4:loc_405D25↓o
.text:00405BEB                 add     ds:55003A73h, ah
.text:00405BF1                 push    edi
.text:00405BF2                 push    esi
.text:00405BF3                 push    ebx
.text:00405BF4                 sub     esp, 1Ch
.text:00405BF7                 mov     edx, ds:dword_411C60
.text:00405BFD                 mov     ebp, [esp+28h+Code]
.text:00405C01                 mov     edi, [esp+28h+ErrorMessage]
.text:00405C05                 test    edx, edx
.text:00405C07                 mov     ebx, [esp+28h+Str2]
.text:00405C0B                 mov     esi, [esp+28h+arg_10]
.text:00405C0F                 jz      short loc_405C29
.text:00405C11                 cmp     ds:dword_4111F0, esi
.text:00405C17                 jz      loc_405D50
.text:00405C1D
.text:00405C1D loc_405C1D:                             ; CODE XREF: sub_405BE4+18D↓j
.text:00405C1D                 mov     ds:Str1, ebx
.text:00405C23                 mov     ds:dword_4111F0, esi
.text:00405C29
.text:00405C29 loc_405C29:                             ; CODE XREF: sub_405BE4+2B↑j
.text:00405C29                 mov     edx, ds:_iob
.text:00405C2F                 add     edx, 20h ; ' '
.text:00405C32                 mov     [esp+28h+Stream], edx ; Stream
.text:00405C35                 call    fflush
.text:00405C3A                 mov     eax, ds:dword_411C20
.text:00405C3F                 test    eax, eax
.text:00405C41                 jz      loc_405D25
.text:00405C47                 call    eax ; dword_411C20
.text:00405C49
.text:00405C49 loc_405C49:                             ; CODE XREF: sub_405BE4+164↓j
.text:00405C49                 test    ebx, ebx
.text:00405C4B                 jz      short loc_405C6E
.text:00405C4D                 mov     [esp+28h+ArgList], ebx
.text:00405C51                 mov     ebx, ds:_iob
.text:00405C57                 mov     [esp+28h+var_1C], esi
.text:00405C5B                 mov     [esp+28h+Format], offset sub_405BE4 ; Format
.text:00405C63                 add     ebx, 40h ; '@'
.text:00405C66                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405C69                 call    fprintf
.text:00405C6E
.text:00405C6E loc_405C6E:                             ; CODE XREF: sub_405BE4+67↑j
.text:00405C6E                 mov     esi, ds:_iob
.text:00405C74                 lea     edx, [esp+28h+arg_18]
.text:00405C78                 mov     ecx, [esp+28h+arg_14]
.text:00405C7C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405C80                 add     esi, 40h ; '@'
.text:00405C83                 mov     [esp+28h+Format], ecx ; Format
.text:00405C87                 mov     [esp+28h+Stream], esi ; Stream
.text:00405C8A                 call    vfprintf
.text:00405C8F                 inc     ds:dword_411C30
.text:00405C95                 test    edi, edi
.text:00405C97                 jnz     short loc_405CF0
.text:00405C99
.text:00405C99 loc_405C99:                             ; CODE XREF: sub_405BE4+135↓j
.text:00405C99                 mov     edx, ds:_iob
.text:00405C9F                 lea     ecx, [edx+40h]
.text:00405CA2                 mov     ebx, [ecx+4]
.text:00405CA5                 dec     ebx
.text:00405CA6                 test    ebx, ebx
.text:00405CA8                 mov     [ecx+4], ebx
.text:00405CAB                 js      short loc_405CD7
.text:00405CAD                 mov     esi, [edx+40h]
.text:00405CB0                 mov     byte ptr [esi], 0Ah
.text:00405CB3                 inc     dword ptr [edx+40h]
.text:00405CB6
.text:00405CB6 loc_405CB6:                             ; CODE XREF: sub_405BE4+103↓j
.text:00405CB6                 mov     ecx, ds:_iob
.text:00405CBC                 add     ecx, 40h ; '@'
.text:00405CBF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405CC2                 call    fflush
.text:00405CC7                 test    ebp, ebp
.text:00405CC9                 jnz     loc_405D76
.text:00405CCF
.text:00405CCF loc_405CCF:                             ; CODE XREF: sub_405BE4+173↓j
.text:00405CCF                                         ; sub_405BE4+187↓j
.text:00405CCF                 add     esp, 1Ch
.text:00405CD2                 pop     ebx
.text:00405CD3                 pop     esi
.text:00405CD4                 pop     edi
.text:00405CD5                 pop     ebp
.text:00405CD6                 retn
.text:00405CD7 ; ---------------------------------------------------------------------------
.text:00405CD7
.text:00405CD7 loc_405CD7:                             ; CODE XREF: sub_405BE4+C7↑j
.text:00405CD7                 mov     [esp+28h+Format], ecx ; File
.text:00405CDB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405CE2                 call    _flsbuf
.text:00405CE7                 jmp     short loc_405CB6
.text:00405CE7 ; ---------------------------------------------------------------------------
.text:00405CE9                 align 10h
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; CODE XREF: sub_405BE4+B3↑j
.text:00405CF0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405CF3                 call    strerror
.text:00405CF8                 test    eax, eax
.text:00405CFA                 jz      short loc_405D1E
.text:00405CFC
.text:00405CFC loc_405CFC:                             ; CODE XREF: sub_405BE4+13F↓j
.text:00405CFC                 mov     [esp+28h+ArgList], eax
.text:00405D00                 mov     edi, ds:_iob
.text:00405D06                 mov     [esp+28h+Format], offset aS_3 ; ": %s"
.text:00405D0E                 add     edi, 40h ; '@'
.text:00405D11                 mov     [esp+28h+Stream], edi ; Stream
.text:00405D14                 call    fprintf
.text:00405D19                 jmp     loc_405C99
.text:00405D1E ; ---------------------------------------------------------------------------
.text:00405D1E
.text:00405D1E loc_405D1E:                             ; CODE XREF: sub_405BE4+116↑j
.text:00405D1E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405D23                 jmp     short loc_405CFC
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405BE4+5D↑j
.text:00405D25                 mov     [esp+28h+Format], (offset loc_405BEB+1) ; Format
.text:00405D2D                 mov     ecx, ds:_iob
.text:00405D33                 mov     edx, ds:dword_411BF0
.text:00405D39                 add     ecx, 40h ; '@'
.text:00405D3C                 mov     [esp+28h+ArgList], edx
.text:00405D40                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405D43                 call    fprintf
.text:00405D48                 jmp     loc_405C49
.text:00405D48 ; ---------------------------------------------------------------------------
.text:00405D4D                 align 10h
.text:00405D50
.text:00405D50 loc_405D50:                             ; CODE XREF: sub_405BE4+33↑j
.text:00405D50                 mov     eax, ds:Str1
.text:00405D55                 cmp     ebx, eax
.text:00405D57                 jz      loc_405CCF
.text:00405D5D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405D61                 mov     [esp+28h+Stream], eax ; Str1
.text:00405D64                 call    strcmp
.text:00405D69                 test    eax, eax
.text:00405D6B                 jz      loc_405CCF
.text:00405D71                 jmp     loc_405C1D
.text:00405D76 ; ---------------------------------------------------------------------------
.text:00405D76
.text:00405D76 loc_405D76:                             ; CODE XREF: sub_405BE4+E5↑j
.text:00405D76                 mov     [esp+28h+Stream], ebp ; Code
.text:00405D79                 call    exit
.text:00405D79 sub_405BE4      endp ; sp-analysis failed
.text:00405D79
.text:00405D79 ; ---------------------------------------------------------------------------
.text:00405D7E                 align 10h
.text:00405D80
.text:00405D80 ; =============== S U B R O U T I N E =======================================
.text:00405D80
.text:00405D80
.text:00405D80 ; int __cdecl sub_405D80(char *, int)
.text:00405D80 sub_405D80      proc near               ; CODE XREF: sub_4024B0+6F↑p
.text:00405D80
.text:00405D80 var_C           = dword ptr -0Ch
.text:00405D80 var_8           = dword ptr -8
.text:00405D80 var_4           = dword ptr -4
.text:00405D80 arg_0           = dword ptr  4
.text:00405D80 arg_4           = dword ptr  8
.text:00405D80
.text:00405D80                 sub     esp, 0Ch
.text:00405D83                 mov     edx, [esp+0Ch+arg_4]
.text:00405D87                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00405D8E                 mov     [esp+0Ch+var_4], edx ; int
.text:00405D92                 mov     edx, [esp+0Ch+arg_0]
.text:00405D96                 mov     [esp+0Ch+var_8], edx ; char *
.text:00405D9A                 call    sub_405DB0
.text:00405D9F                 add     esp, 0Ch
.text:00405DA2                 retn
.text:00405DA2 sub_405D80      endp
.text:00405DA2
.text:00405DA2 ; ---------------------------------------------------------------------------
.text:00405DA3                 align 10h
.text:00405DB0
.text:00405DB0 ; =============== S U B R O U T I N E =======================================
.text:00405DB0
.text:00405DB0
.text:00405DB0 ; int __cdecl sub_405DB0(LPCSTR, char *, int)
.text:00405DB0 sub_405DB0      proc near               ; CODE XREF: sub_405D80+1A↑p
.text:00405DB0                                         ; sub_40C6F0+104↓p ...
.text:00405DB0
.text:00405DB0 var_13C         = dword ptr -13Ch
.text:00405DB0 lpString1       = dword ptr -138h
.text:00405DB0 var_134         = dword ptr -134h
.text:00405DB0 String1         = byte ptr -12Ch
.text:00405DB0 var_10          = dword ptr -10h
.text:00405DB0 var_C           = dword ptr -0Ch
.text:00405DB0 var_8           = dword ptr -8
.text:00405DB0 var_4           = dword ptr -4
.text:00405DB0 arg_0           = dword ptr  4
.text:00405DB0 arg_4           = dword ptr  8
.text:00405DB0 arg_8           = dword ptr  0Ch
.text:00405DB0
.text:00405DB0                 sub     esp, 13Ch
.text:00405DB6                 mov     [esp+13Ch+var_10], ebx
.text:00405DBD                 mov     ebx, [esp+13Ch+arg_8]
.text:00405DC4                 mov     [esp+13Ch+var_C], esi
.text:00405DCB                 mov     esi, [esp+13Ch+arg_4]
.text:00405DD2                 mov     [esp+13Ch+var_8], edi
.text:00405DD9                 mov     edi, [esp+13Ch+arg_0]
.text:00405DE0                 mov     [esp+13Ch+var_4], ebp
.text:00405DE7                 mov     [esp+13Ch+var_134], ebx ; int
.text:00405DEB                 mov     [esp+13Ch+lpString1], esi ; int
.text:00405DEF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00405DF2                 call    sub_406160
.text:00405DF7                 cmp     eax, 0FFFFFFFFh
.text:00405DFA                 mov     edx, eax
.text:00405DFC                 jz      short loc_405E0E
.text:00405DFE                 mov     ecx, [ebx]
.text:00405E00                 and     ecx, 0F000h
.text:00405E06                 cmp     ecx, 0A000h
.text:00405E0C                 jz      short loc_405E33
.text:00405E0E
.text:00405E0E loc_405E0E:                             ; CODE XREF: sub_405DB0+4C↑j
.text:00405E0E                                         ; sub_405DB0+A1↓j ...
.text:00405E0E                 mov     ebx, [esp+13Ch+var_10]
.text:00405E15                 mov     eax, edx
.text:00405E17                 mov     esi, [esp+13Ch+var_C]
.text:00405E1E                 mov     edi, [esp+13Ch+var_8]
.text:00405E25                 mov     ebp, [esp+13Ch+var_4]
.text:00405E2C                 add     esp, 13Ch
.text:00405E32                 retn
.text:00405E33 ; ---------------------------------------------------------------------------
.text:00405E33
.text:00405E33 loc_405E33:                             ; CODE XREF: sub_405DB0+5C↑j
.text:00405E33                 mov     [esp+13Ch+var_134], 104h
.text:00405E3B                 lea     ebp, [esp+13Ch+String1]
.text:00405E3F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00405E43                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00405E46                 call    sub_406080
.text:00405E4B                 inc     eax
.text:00405E4C                 mov     edx, 0FFFFFFFFh
.text:00405E51                 jz      short loc_405E0E
.text:00405E53                 mov     [esp+13Ch+var_134], ebx ; int
.text:00405E57                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00405E5B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00405E5E                 call    sub_406160
.text:00405E63                 mov     edx, eax
.text:00405E65                 jmp     short loc_405E0E
.text:00405E65 sub_405DB0      endp
.text:00405E65
.text:00405E65 ; ---------------------------------------------------------------------------
.text:00405E67                 align 10h
.text:00405E70
.text:00405E70 ; =============== S U B R O U T I N E =======================================
.text:00405E70
.text:00405E70
.text:00405E70 ; int __cdecl sub_405E70(char *)
.text:00405E70 sub_405E70      proc near               ; CODE XREF: sub_401D40+14↑p
.text:00405E70                                         ; sub_4024B0+366↑p
.text:00405E70
.text:00405E70 var_1C          = dword ptr -1Ch
.text:00405E70 var_18          = dword ptr -18h
.text:00405E70 var_14          = dword ptr -14h
.text:00405E70 var_10          = dword ptr -10h
.text:00405E70 var_C           = dword ptr -0Ch
.text:00405E70 var_4           = dword ptr -4
.text:00405E70 arg_0           = dword ptr  4
.text:00405E70
.text:00405E70                 sub     esp, 1Ch
.text:00405E73                 mov     ecx, [esp+1Ch+arg_0]
.text:00405E77                 lea     edx, [esp+1Ch+var_4]
.text:00405E7B                 mov     [esp+1Ch+var_C], edx ; int
.text:00405E7F                 mov     [esp+1Ch+var_10], 400h ; int
.text:00405E87                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:00405E8A                 mov     [esp+1Ch+var_14], offset byte_411220 ; char *
.text:00405E92                 mov     [esp+1Ch+var_18], offset unk_411200 ; int
.text:00405E9A                 call    sub_4061D0
.text:00405E9F                 test    eax, eax
.text:00405EA1                 mov     ecx, [esp+1Ch+var_4]
.text:00405EA5                 setnz   dl
.text:00405EA8                 add     esp, 1Ch
.text:00405EAB                 movzx   eax, dl
.text:00405EAE                 dec     eax
.text:00405EAF                 and     eax, ecx
.text:00405EB1                 retn
.text:00405EB1 sub_405E70      endp
.text:00405EB1
.text:00405EB1 ; ---------------------------------------------------------------------------
.text:00405EB2                 align 10h
.text:00405EC0
.text:00405EC0 ; =============== S U B R O U T I N E =======================================
.text:00405EC0
.text:00405EC0 ; Attributes: thunk
.text:00405EC0
.text:00405EC0 sub_405EC0      proc near               ; CODE XREF: sub_402950:loc_402A1C↑p
.text:00405EC0                 jmp     sub_406410
.text:00405EC0 sub_405EC0      endp
.text:00405EC0
.text:00405EC0 ; ---------------------------------------------------------------------------
.text:00405EC5                 align 10h
.text:00405ED0
.text:00405ED0 ; =============== S U B R O U T I N E =======================================
.text:00405ED0
.text:00405ED0 ; Attributes: thunk
.text:00405ED0
.text:00405ED0 sub_405ED0      proc near               ; CODE XREF: sub_402950:loc_402990↑p
.text:00405ED0                 jmp     sub_406580
.text:00405ED0 sub_405ED0      endp
.text:00405ED0
.text:00405ED0 ; ---------------------------------------------------------------------------
.text:00405ED5                 align 10h
.text:00405EE0
.text:00405EE0 ; =============== S U B R O U T I N E =======================================
.text:00405EE0
.text:00405EE0 ; Attributes: thunk
.text:00405EE0
.text:00405EE0 sub_405EE0      proc near               ; CODE XREF: sub_402950+2D↑p
.text:00405EE0                 jmp     sub_4063C0
.text:00405EE0 sub_405EE0      endp
.text:00405EE0
.text:00405EE0 ; ---------------------------------------------------------------------------
.text:00405EE5                 align 10h
.text:00405EF0
.text:00405EF0 ; =============== S U B R O U T I N E =======================================
.text:00405EF0
.text:00405EF0 ; Attributes: thunk
.text:00405EF0
.text:00405EF0 ; int __cdecl sub_405EF0(char *String)
.text:00405EF0 sub_405EF0      proc near               ; CODE XREF: sub_402950+28↑p
.text:00405EF0
.text:00405EF0 String          = dword ptr  4
.text:00405EF0
.text:00405EF0                 jmp     sub_4065E0
.text:00405EF0 sub_405EF0      endp
.text:00405EF0
.text:00405EF0 ; ---------------------------------------------------------------------------
.text:00405EF5                 align 10h
.text:00405F00
.text:00405F00 ; =============== S U B R O U T I N E =======================================
.text:00405F00
.text:00405F00
.text:00405F00 ; int __cdecl sub_405F00(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00405F00 sub_405F00      proc near               ; CODE XREF: sub_406080+93↓p
.text:00405F00
.text:00405F00 pvReserved      = dword ptr -35Ch
.text:00405F00 pUnkOuter       = dword ptr -358h
.text:00405F00 dwClsContext    = dword ptr -354h
.text:00405F00 riid            = dword ptr -350h
.text:00405F00 ppv             = dword ptr -34Ch
.text:00405F00 cchWideChar     = dword ptr -348h
.text:00405F00 var_334         = byte ptr -334h
.text:00405F00 var_330         = dword ptr -330h
.text:00405F00 String2         = byte ptr -32Ch
.text:00405F00 WideCharStr     = word ptr -21Ch
.text:00405F00 lpMultiByteStr  = dword ptr  4
.text:00405F00 lpString1       = dword ptr  8
.text:00405F00
.text:00405F00                 push    edi
.text:00405F01                 push    esi
.text:00405F02                 push    ebx
.text:00405F03                 sub     esp, 350h
.text:00405F09                 mov     edi, [esp+35Ch+lpString1]
.text:00405F10                 mov     byte ptr [edi], 0
.text:00405F13                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00405F1A                 call    OleInitialize
.text:00405F1F                 sub     esp, 4
.text:00405F22                 cmp     eax, 1
.text:00405F25                 ja      loc_40605F
.text:00405F2B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00405F33                 lea     ecx, [esp+35Ch+var_330]
.text:00405F37                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00405F3B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00405F43                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00405F4B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00405F52                 call    CoCreateInstance
.text:00405F57                 sub     esp, 14h
.text:00405F5A                 test    eax, eax
.text:00405F5C                 js      loc_40605F
.text:00405F62                 mov     ebx, [esp+35Ch+var_330]
.text:00405F66                 lea     edx, [esp+35Ch+var_334]
.text:00405F6A                 mov     esi, [ebx]
.text:00405F6C                 mov     [esp+35Ch+dwClsContext], edx
.text:00405F70                 mov     [esp+35Ch+pvReserved], ebx
.text:00405F73                 xor     ebx, ebx
.text:00405F75                 mov     [esp+35Ch+pUnkOuter], offset dword_40DF00
.text:00405F7D                 call    dword ptr [esi]
.text:00405F7F                 sub     esp, 0Ch
.text:00405F82                 lea     esi, [esp+35Ch+WideCharStr]
.text:00405F89                 call    AreFileApisANSI
.text:00405F8E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00405F96                 test    eax, eax
.text:00405F98                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00405F9F                 setz    bl
.text:00405FA2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00405FA6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00405FAE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00405FB2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00405FBA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00405FBD                 call    MultiByteToWideChar
.text:00405FC2                 sub     esp, 18h
.text:00405FC5                 test    eax, eax
.text:00405FC7                 js      loc_40605F
.text:00405FCD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00405FD1                 mov     ebx, [edx]
.text:00405FD3                 mov     [esp+35Ch+dwClsContext], 0
.text:00405FDB                 mov     [esp+35Ch+pUnkOuter], esi
.text:00405FDF                 mov     [esp+35Ch+pvReserved], edx
.text:00405FE2                 call    dword ptr [ebx+14h]
.text:00405FE5                 sub     esp, 0Ch
.text:00405FE8                 test    eax, eax
.text:00405FEA                 js      short loc_40605F
.text:00405FEC                 mov     ebx, [esp+35Ch+var_330]
.text:00405FF0                 lea     esi, [esp+35Ch+String2]
.text:00405FF4                 mov     ecx, [ebx]
.text:00405FF6                 mov     [esp+35Ch+pvReserved], ebx
.text:00405FF9                 mov     [esp+35Ch+ppv], 0
.text:00406001                 mov     [esp+35Ch+riid], 0
.text:00406009                 mov     [esp+35Ch+dwClsContext], 104h
.text:00406011                 mov     [esp+35Ch+pUnkOuter], esi
.text:00406015                 call    dword ptr [ecx+0Ch]
.text:00406018                 sub     esp, 14h
.text:0040601B                 mov     ebx, eax
.text:0040601D                 test    eax, eax
.text:0040601F                 js      short loc_40605F
.text:00406021                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00406025                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00406028                 call    lstrcpyA
.text:0040602D                 sub     esp, 8
.text:00406030                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00406034                 mov     ecx, [edi]
.text:00406036                 mov     [esp+35Ch+pvReserved], edi
.text:00406039                 call    dword ptr [ecx+8]
.text:0040603C                 sub     esp, 4
.text:0040603F                 mov     edx, [esp+35Ch+var_330]
.text:00406043                 mov     esi, [edx]
.text:00406045                 mov     [esp+35Ch+pvReserved], edx
.text:00406048                 call    dword ptr [esi+8]
.text:0040604B                 sub     esp, 4
.text:0040604E                 call    CoUninitialize
.text:00406053                 mov     eax, ebx
.text:00406055
.text:00406055 loc_406055:                             ; CODE XREF: sub_405F00+177↓j
.text:00406055                 add     esp, 350h
.text:0040605B                 pop     ebx
.text:0040605C                 pop     esi
.text:0040605D                 pop     edi
.text:0040605E                 retn
.text:0040605F ; ---------------------------------------------------------------------------
.text:0040605F
.text:0040605F loc_40605F:                             ; CODE XREF: sub_405F00+25↑j
.text:0040605F                                         ; sub_405F00+5C↑j ...
.text:0040605F                 call    sub_407190
.text:00406064                 mov     edi, eax
.text:00406066                 call    _errno
.text:0040606B                 mov     [eax], edi
.text:0040606D                 call    CoUninitialize
.text:00406072                 mov     eax, 0FFFFFFFFh
.text:00406077                 jmp     short loc_406055
.text:00406077 sub_405F00      endp
.text:00406077
.text:00406077 ; ---------------------------------------------------------------------------
.text:00406079 ; const char aLnk[]
.text:00406079 aLnk            db '.lnk',0             ; DATA XREF: sub_406080+53↓o
.text:00406079                                         ; sub_406080:loc_4060E5↓o
.text:0040607E                 align 10h
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080
.text:00406080 ; int __cdecl sub_406080(char *, LPSTR lpString1)
.text:00406080 sub_406080      proc near               ; CODE XREF: sub_405DB0+96↑p
.text:00406080
.text:00406080 Str             = dword ptr -1Ch
.text:00406080 Source          = dword ptr -18h
.text:00406080 Destination     = dword ptr -14h
.text:00406080 arg_0           = dword ptr  4
.text:00406080 lpString1       = dword ptr  8
.text:00406080
.text:00406080                 push    ebp
.text:00406081                 push    edi
.text:00406082                 push    esi
.text:00406083                 push    ebx
.text:00406084                 sub     esp, 0Ch
.text:00406087                 mov     ebx, [esp+1Ch+arg_0]
.text:0040608B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040608F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00406092                 call    strlen
.text:00406097                 add     eax, 5
.text:0040609A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040609D                 call    malloc
.text:004060A2                 mov     [esp+1Ch+Destination], eax
.text:004060A6                 test    eax, eax
.text:004060A8                 jz      loc_406150
.text:004060AE                 mov     [esp+1Ch+Source], ebx ; Source
.text:004060B2                 mov     [esp+1Ch+Str], eax ; Destination
.text:004060B5                 call    strcpy
.text:004060BA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004060C2                 mov     eax, [esp+1Ch+Destination]
.text:004060C6                 mov     [esp+1Ch+Str], eax ; Str
.text:004060C9                 call    strrchr
.text:004060CE                 test    eax, eax
.text:004060D0                 jz      short loc_4060E5
.text:004060D2                 cld
.text:004060D3                 mov     ebx, offset aLnk ; ".lnk"
.text:004060D8                 mov     ecx, 5
.text:004060DD                 mov     esi, eax
.text:004060DF                 mov     edi, ebx
.text:004060E1                 repe cmpsb
.text:004060E3                 jz      short loc_4060F9
.text:004060E5
.text:004060E5 loc_4060E5:                             ; CODE XREF: sub_406080+50↑j
.text:004060E5                 mov     [esp+1Ch+Source], offset aLnk ; ".lnk"
.text:004060ED                 mov     edx, [esp+1Ch+Destination]
.text:004060F1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004060F4                 call    strcat
.text:004060F9
.text:004060F9 loc_4060F9:                             ; CODE XREF: sub_406080+63↑j
.text:004060F9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00406100                 call    SetErrorMode
.text:00406105                 sub     esp, 4
.text:00406108                 mov     ebx, [esp+1Ch+Destination]
.text:0040610C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00406110                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00406113                 call    sub_405F00
.text:00406118                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040611B                 mov     esi, eax
.text:0040611D                 call    free
.text:00406122                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00406129                 call    SetErrorMode
.text:0040612E                 sub     esp, 4
.text:00406131                 mov     [esp+1Ch+Str], ebp
.text:00406134                 call    sub_406A60
.text:00406139                 inc     esi
.text:0040613A                 jz      short loc_406150
.text:0040613C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00406140                 add     esp, 0Ch
.text:00406143                 pop     ebx
.text:00406144                 pop     esi
.text:00406145                 pop     edi
.text:00406146                 pop     ebp
.text:00406147                 jmp     strlen
.text:00406147 ; ---------------------------------------------------------------------------
.text:0040614C                 align 10h
.text:00406150
.text:00406150 loc_406150:                             ; CODE XREF: sub_406080+28↑j
.text:00406150                                         ; sub_406080+BA↑j
.text:00406150                 add     esp, 0Ch
.text:00406153                 mov     eax, 0FFFFFFFFh
.text:00406158                 pop     ebx
.text:00406159                 pop     esi
.text:0040615A                 pop     edi
.text:0040615B                 pop     ebp
.text:0040615C                 retn
.text:0040615C sub_406080      endp
.text:0040615C
.text:0040615C ; ---------------------------------------------------------------------------
.text:0040615D                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 ; int __cdecl sub_406160(LPCSTR, int, int)
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_405DB0+42↑p
.text:00406160                                         ; sub_405DB0+AE↑p ...
.text:00406160
.text:00406160 lpFileName      = dword ptr -2Ch
.text:00406160 dwDesiredAccess = dword ptr -28h
.text:00406160 dwShareMode     = dword ptr -24h
.text:00406160 lpSecurityAttributes= dword ptr -20h
.text:00406160 dwCreationDisposition= dword ptr -1Ch
.text:00406160 dwFlagsAndAttributes= dword ptr -18h
.text:00406160 hTemplateFile   = dword ptr -14h
.text:00406160 var_10          = dword ptr -10h
.text:00406160 var_C           = dword ptr -0Ch
.text:00406160 var_8           = dword ptr -8
.text:00406160 var_4           = dword ptr -4
.text:00406160 arg_0           = dword ptr  4
.text:00406160 arg_4           = dword ptr  8
.text:00406160 arg_8           = dword ptr  0Ch
.text:00406160
.text:00406160 ; FUNCTION CHUNK AT .text:00408BA0 SIZE 0000013A BYTES
.text:00406160
.text:00406160                 sub     esp, 0Ch
.text:00406163                 mov     ecx, [esp+0Ch+arg_0]
.text:00406167                 mov     edx, [esp+0Ch+arg_4]
.text:0040616B                 mov     eax, [esp+0Ch+arg_8]
.text:0040616F                 test    ecx, ecx
.text:00406171                 jnz     short loc_406190
.text:00406173                 test    edx, edx
.text:00406175                 jz      short loc_406190
.text:00406177                 test    eax, eax
.text:00406179                 jz      short loc_406190
.text:0040617B                 mov     [esp+0Ch+arg_4], eax
.text:0040617F                 mov     [esp+0Ch+arg_0], edx
.text:00406183                 add     esp, 0Ch
.text:00406186                 jmp     loc_408BA0
.text:00406186 ; ---------------------------------------------------------------------------
.text:0040618B                 align 10h
.text:00406190
.text:00406190 loc_406190:                             ; CODE XREF: sub_406160+11↑j
.text:00406190                                         ; sub_406160+15↑j ...
.text:00406190                 call    _errno
.text:00406195                 mov     dword ptr [eax], 16h
.text:0040619B                 mov     eax, 0FFFFFFFFh
.text:004061A0                 add     esp, 0Ch
.text:004061A3                 retn
.text:004061A3 sub_406160      endp
.text:004061A3
.text:004061A3 ; ---------------------------------------------------------------------------
.text:004061A4                 align 10h
.text:004061B0 byte_4061B0     db 0                    ; DATA XREF: .data:Src↓o
.text:004061B1 byte_4061B1     db 73h, 68h, 0          ; DATA XREF: .data:off_410064↓o
.text:004061B4 ; const char aHome[]
.text:004061B4 aHome           db 'HOME',0             ; DATA XREF: sub_4061D0+96↓o
.text:004061B9 ; const char aShell_0[]
.text:004061B9 aShell_0        db 'SHELL',0            ; DATA XREF: sub_4061D0+E2↓o
.text:004061BF ; const char aComspec[]
.text:004061BF aComspec        db 'COMSPEC',0          ; DATA XREF: sub_4061D0:loc_406394↓o
.text:004061C7 aC              db 'C:/',0              ; DATA XREF: sub_4061D0:loc_4063B5↓o
.text:004061CB                 align 10h
.text:004061D0
.text:004061D0 ; =============== S U B R O U T I N E =======================================
.text:004061D0
.text:004061D0
.text:004061D0 ; int __cdecl sub_4061D0(char *, int, char *, int, int)
.text:004061D0 sub_4061D0      proc near               ; CODE XREF: sub_405E70+2A↑p
.text:004061D0
.text:004061D0 Str             = dword ptr -1Ch
.text:004061D0 Src             = dword ptr -18h
.text:004061D0 Size            = dword ptr -14h
.text:004061D0 var_10          = dword ptr -10h
.text:004061D0 var_C           = dword ptr -0Ch
.text:004061D0 var_8           = dword ptr -8
.text:004061D0 var_4           = dword ptr -4
.text:004061D0 arg_0           = dword ptr  4
.text:004061D0 arg_4           = dword ptr  8
.text:004061D0 arg_8           = dword ptr  0Ch
.text:004061D0 arg_C           = dword ptr  10h
.text:004061D0 arg_10          = dword ptr  14h
.text:004061D0
.text:004061D0                 sub     esp, 1Ch
.text:004061D3                 mov     eax, [esp+1Ch+arg_0]
.text:004061D7                 mov     [esp+1Ch+var_10], ebx
.text:004061DB                 mov     [esp+1Ch+var_C], esi
.text:004061DF                 test    eax, eax
.text:004061E1                 mov     [esp+1Ch+var_8], edi
.text:004061E5                 mov     [esp+1Ch+var_4], ebp
.text:004061E9                 jz      short loc_4061F8
.text:004061EB                 cmp     byte ptr [eax], 0
.text:004061EE                 jz      short loc_4061F8
.text:004061F0                 mov     ecx, [esp+1Ch+arg_C]
.text:004061F4                 test    ecx, ecx
.text:004061F6                 jnz     short loc_406220
.text:004061F8
.text:004061F8 loc_4061F8:                             ; CODE XREF: sub_4061D0+19↑j
.text:004061F8                                         ; sub_4061D0+1E↑j ...
.text:004061F8                 call    _errno
.text:004061FD                 mov     dword ptr [eax], 22h ; '"'
.text:00406203                 mov     eax, 0FFFFFFFFh
.text:00406208
.text:00406208 loc_406208:                             ; CODE XREF: sub_4061D0+1BF↓j
.text:00406208                 mov     ebx, [esp+1Ch+var_10]
.text:0040620C                 mov     esi, [esp+1Ch+var_C]
.text:00406210                 mov     edi, [esp+1Ch+var_8]
.text:00406214                 mov     ebp, [esp+1Ch+var_4]
.text:00406218                 add     esp, 1Ch
.text:0040621B                 retn
.text:0040621B ; ---------------------------------------------------------------------------
.text:0040621C                 align 10h
.text:00406220
.text:00406220 loc_406220:                             ; CODE XREF: sub_4061D0+26↑j
.text:00406220                 mov     [esp+1Ch+Str], eax ; Str
.text:00406223                 mov     ebx, eax
.text:00406225                 call    strlen
.text:0040622A                 lea     esi, [eax+1]
.text:0040622D                 cmp     esi, [esp+1Ch+arg_C]
.text:00406231                 ja      short loc_4061F8
.text:00406233                 mov     [esp+1Ch+Src], ebx ; Src
.text:00406237                 mov     edx, [esp+1Ch+arg_8]
.text:0040623B                 mov     [esp+1Ch+Size], esi ; Size
.text:0040623F                 mov     [esp+1Ch+Str], edx ; void *
.text:00406242                 call    memcpy
.text:00406247                 mov     ebp, [esp+1Ch+arg_4]
.text:0040624B                 mov     [ebp+0], eax
.text:0040624E                 call    sub_408D40
.text:00406253                 mov     edi, [esp+1Ch+arg_4]
.text:00406257                 mov     [edi+8], eax
.text:0040625A                 call    sub_408D30
.text:0040625F                 mov     ebx, [esp+1Ch+arg_4]
.text:00406263                 mov     [ebx+0Ch], eax
.text:00406266                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0040626D                 call    getenv
.text:00406272                 test    eax, eax
.text:00406274                 mov     ebx, eax
.text:00406276                 jz      loc_4063B5
.text:0040627C
.text:0040627C loc_40627C:                             ; CODE XREF: sub_4061D0+1EA↓j
.text:0040627C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040627F                 call    strlen
.text:00406284                 lea     ebp, [eax+esi+1]
.text:00406288                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040628C                 ja      loc_4061F8
.text:00406292                 mov     [esp+1Ch+Src], ebx ; Src
.text:00406296                 mov     ecx, [esp+1Ch+arg_8]
.text:0040629A                 lea     edi, [eax+1]
.text:0040629D                 mov     [esp+1Ch+Size], edi ; Size
.text:004062A1                 add     ecx, esi
.text:004062A3                 mov     [esp+1Ch+Str], ecx ; void *
.text:004062A6                 call    memcpy
.text:004062AB                 mov     esi, [esp+1Ch+arg_4]
.text:004062AF                 mov     [esi+14h], eax
.text:004062B2                 mov     [esp+1Ch+Str], offset aShell_0 ; "SHELL"
.text:004062B9                 call    getenv
.text:004062BE                 test    eax, eax
.text:004062C0                 mov     ebx, eax
.text:004062C2                 jz      loc_406394
.text:004062C8
.text:004062C8 loc_4062C8:                             ; CODE XREF: sub_4061D0+1D4↓j
.text:004062C8                                         ; sub_4061D0+1E0↓j
.text:004062C8                 mov     [esp+1Ch+Str], ebx ; Str
.text:004062CB                 call    strlen
.text:004062D0                 lea     edi, [eax+ebp+1]
.text:004062D4                 cmp     edi, [esp+1Ch+arg_C]
.text:004062D8                 ja      loc_4061F8
.text:004062DE                 mov     [esp+1Ch+Src], ebx ; Src
.text:004062E2                 mov     esi, [esp+1Ch+arg_8]
.text:004062E6                 lea     ecx, [eax+1]
.text:004062E9                 mov     [esp+1Ch+Size], ecx ; Size
.text:004062ED                 add     esi, ebp
.text:004062EF                 mov     [esp+1Ch+Str], esi ; void *
.text:004062F2                 call    memcpy
.text:004062F7                 mov     ebx, [esp+1Ch+arg_4]
.text:004062FB                 mov     [ebx+18h], eax
.text:004062FE                 call    sub_408CE0
.text:00406303                 mov     [esp+1Ch+Str], eax ; Str
.text:00406306                 mov     ebx, eax
.text:00406308                 call    strlen
.text:0040630D                 lea     esi, [eax+edi+1]
.text:00406311                 cmp     esi, [esp+1Ch+arg_C]
.text:00406315                 ja      loc_4061F8
.text:0040631B                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040631F                 mov     ecx, [esp+1Ch+arg_8]
.text:00406323                 lea     ebp, [eax+1]
.text:00406326                 mov     [esp+1Ch+Size], ebp ; Size
.text:0040632A                 add     ecx, edi
.text:0040632C                 mov     [esp+1Ch+Str], ecx ; void *
.text:0040632F                 call    memcpy
.text:00406334                 mov     edi, [esp+1Ch+arg_4]
.text:00406338                 mov     ebx, Src
.text:0040633E                 mov     [edi+10h], eax
.text:00406341                 mov     [esp+1Ch+Str], ebx ; Str
.text:00406344                 call    strlen
.text:00406349                 lea     ebp, [eax+esi+1]
.text:0040634D                 cmp     ebp, [esp+1Ch+arg_C]
.text:00406351                 ja      loc_4061F8
.text:00406357                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040635B                 mov     edi, [esp+1Ch+arg_8]
.text:0040635F                 lea     ecx, [eax+1]
.text:00406362                 mov     [esp+1Ch+Size], ecx ; Size
.text:00406366                 add     edi, esi
.text:00406368                 mov     [esp+1Ch+Str], edi ; void *
.text:0040636B                 call    memcpy
.text:00406370                 mov     esi, [esp+1Ch+arg_4]
.text:00406374                 mov     [esi+4], eax
.text:00406377                 mov     edx, [esp+1Ch+arg_8]
.text:0040637B                 mov     [esp+1Ch+Str], edx ; Str
.text:0040637E                 call    strlen
.text:00406383                 mov     eax, [esp+1Ch+arg_4]
.text:00406387                 mov     ebx, [esp+1Ch+arg_10]
.text:0040638B                 mov     [ebx], eax
.text:0040638D                 xor     eax, eax
.text:0040638F                 jmp     loc_406208
.text:00406394 ; ---------------------------------------------------------------------------
.text:00406394
.text:00406394 loc_406394:                             ; CODE XREF: sub_4061D0+F2↑j
.text:00406394                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0040639B                 call    getenv
.text:004063A0                 test    eax, eax
.text:004063A2                 mov     ebx, eax
.text:004063A4                 jnz     loc_4062C8
.text:004063AA                 mov     ebx, off_410064
.text:004063B0                 jmp     loc_4062C8
.text:004063B5 ; ---------------------------------------------------------------------------
.text:004063B5
.text:004063B5 loc_4063B5:                             ; CODE XREF: sub_4061D0+A6↑j
.text:004063B5                 mov     ebx, offset aC  ; "C:/"
.text:004063BA                 jmp     loc_40627C
.text:004063BA sub_4061D0      endp
.text:004063BA
.text:004063BA ; ---------------------------------------------------------------------------
.text:004063BF                 align 10h
.text:004063C0
.text:004063C0 ; =============== S U B R O U T I N E =======================================
.text:004063C0
.text:004063C0
.text:004063C0 sub_4063C0      proc near               ; CODE XREF: sub_405EE0↑j
.text:004063C0                 sub     esp, 0Ch
.text:004063C3                 mov     eax, off_41008C
.text:004063C8                 call    dword ptr [eax]
.text:004063CA                 add     esp, 0Ch
.text:004063CD                 retn
.text:004063CD sub_4063C0      endp
.text:004063CD
.text:004063CD ; ---------------------------------------------------------------------------
.text:004063CE                 align 10h
.text:004063D0
.text:004063D0 ; =============== S U B R O U T I N E =======================================
.text:004063D0
.text:004063D0
.text:004063D0 sub_4063D0      proc near               ; CODE XREF: sub_406580+31↓p
.text:004063D0
.text:004063D0 var_C           = dword ptr -0Ch
.text:004063D0 var_8           = dword ptr -8
.text:004063D0 arg_0           = dword ptr  4
.text:004063D0 arg_4           = dword ptr  8
.text:004063D0
.text:004063D0                 sub     esp, 0Ch
.text:004063D3                 mov     edx, [esp+0Ch+arg_4]
.text:004063D7                 mov     eax, off_41008C
.text:004063DC                 mov     [esp+0Ch+var_8], edx
.text:004063E0                 mov     edx, [esp+0Ch+arg_0]
.text:004063E4                 mov     [esp+0Ch+var_C], edx
.text:004063E7                 call    dword ptr [eax+4]
.text:004063EA                 add     esp, 0Ch
.text:004063ED                 retn
.text:004063ED sub_4063D0      endp
.text:004063ED
.text:004063ED ; ---------------------------------------------------------------------------
.text:004063EE                 align 10h
.text:004063F0                 sub     esp, 0Ch
.text:004063F3                 mov     edx, [esp+10h]
.text:004063F7                 mov     eax, off_41008C
.text:004063FC                 mov     [esp], edx
.text:004063FF                 call    dword ptr [eax+10h]
.text:00406402                 add     esp, 0Ch
.text:00406405                 retn
.text:00406405 ; ---------------------------------------------------------------------------
.text:00406406                 align 10h
.text:00406410
.text:00406410 ; =============== S U B R O U T I N E =======================================
.text:00406410
.text:00406410
.text:00406410 sub_406410      proc near               ; CODE XREF: sub_405EC0↑j
.text:00406410                 sub     esp, 0Ch
.text:00406413                 mov     edx, off_41008C
.text:00406419                 call    dword ptr [edx+14h]
.text:0040641C                 mov     edx, offset off_410070
.text:00406421                 mov     off_41008C, edx
.text:00406427                 add     esp, 0Ch
.text:0040642A                 retn
.text:0040642A sub_406410      endp
.text:0040642A
.text:0040642A ; ---------------------------------------------------------------------------
.text:0040642B                 align 10h
.text:00406430
.text:00406430 ; =============== S U B R O U T I N E =======================================
.text:00406430
.text:00406430
.text:00406430 sub_406430      proc near               ; DATA XREF: .data:off_410070↓o
.text:00406430                 sub     esp, 0Ch
.text:00406433                 call    off_4100B4
.text:00406439                 test    eax, eax
.text:0040643B                 jz      short loc_406448
.text:0040643D                 mov     ecx, offset off_4100B4
.text:00406442                 mov     off_41008C, ecx
.text:00406448
.text:00406448 loc_406448:                             ; CODE XREF: sub_406430+B↑j
.text:00406448                 add     esp, 0Ch
.text:0040644B                 retn
.text:0040644B sub_406430      endp
.text:0040644B
.text:0040644B ; ---------------------------------------------------------------------------
.text:0040644C                 align 10h
.text:00406450
.text:00406450 ; =============== S U B R O U T I N E =======================================
.text:00406450
.text:00406450
.text:00406450 sub_406450      proc near               ; DATA XREF: .data:00410074↓o
.text:00406450
.text:00406450 var_C           = dword ptr -0Ch
.text:00406450 var_8           = dword ptr -8
.text:00406450 var_4           = dword ptr -4
.text:00406450 arg_0           = dword ptr  4
.text:00406450 arg_4           = dword ptr  8
.text:00406450
.text:00406450                 sub     esp, 0Ch
.text:00406453                 mov     [esp+0Ch+var_4], ebx
.text:00406457                 mov     ebx, [esp+0Ch+arg_4]
.text:0040645B                 call    off_4100B4
.text:00406461                 test    eax, eax
.text:00406463                 jz      short loc_406488
.text:00406465                 mov     [esp+0Ch+var_8], ebx
.text:00406469                 mov     edx, [esp+0Ch+arg_0]
.text:0040646D                 mov     eax, offset off_4100B4
.text:00406472                 mov     off_41008C, eax
.text:00406477                 mov     [esp+0Ch+var_C], edx
.text:0040647A                 call    off_4100B8
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_406450+43↓j
.text:00406480                 mov     ebx, [esp+0Ch+var_4]
.text:00406484                 add     esp, 0Ch
.text:00406487                 retn
.text:00406488 ; ---------------------------------------------------------------------------
.text:00406488
.text:00406488 loc_406488:                             ; CODE XREF: sub_406450+13↑j
.text:00406488                 mov     dword ptr [ebx], 0
.text:0040648E                 mov     eax, 0FFFFFFFFh
.text:00406493                 jmp     short loc_406480
.text:00406493 sub_406450      endp
.text:00406493
.text:00406493 ; ---------------------------------------------------------------------------
.text:00406495                 align 10h
.text:004064A0
.text:004064A0 ; =============== S U B R O U T I N E =======================================
.text:004064A0
.text:004064A0
.text:004064A0 sub_4064A0      proc near               ; DATA XREF: .data:00410078↓o
.text:004064A0
.text:004064A0 var_1C          = dword ptr -1Ch
.text:004064A0 var_18          = dword ptr -18h
.text:004064A0 var_14          = dword ptr -14h
.text:004064A0 var_4           = dword ptr -4
.text:004064A0 arg_0           = dword ptr  4
.text:004064A0 arg_4           = dword ptr  8
.text:004064A0 arg_8           = dword ptr  0Ch
.text:004064A0
.text:004064A0                 sub     esp, 1Ch
.text:004064A3                 mov     [esp+1Ch+var_4], ebx
.text:004064A7                 mov     ebx, [esp+1Ch+arg_8]
.text:004064AB                 call    off_4100B4
.text:004064B1                 test    eax, eax
.text:004064B3                 jz      short loc_4064E1
.text:004064B5                 mov     [esp+1Ch+var_14], ebx
.text:004064B9                 mov     edx, [esp+1Ch+arg_4]
.text:004064BD                 mov     ecx, offset off_4100B4
.text:004064C2                 mov     off_41008C, ecx
.text:004064C8                 mov     [esp+1Ch+var_18], edx
.text:004064CC                 mov     edx, [esp+1Ch+arg_0]
.text:004064D0                 mov     [esp+1Ch+var_1C], edx
.text:004064D3                 call    off_4100BC
.text:004064D9
.text:004064D9 loc_4064D9:                             ; CODE XREF: sub_4064A0+4C↓j
.text:004064D9                 mov     ebx, [esp+1Ch+var_4]
.text:004064DD                 add     esp, 1Ch
.text:004064E0                 retn
.text:004064E1 ; ---------------------------------------------------------------------------
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: sub_4064A0+13↑j
.text:004064E1                 mov     dword ptr [ebx], 0
.text:004064E7                 mov     eax, 0FFFFFFFFh
.text:004064EC                 jmp     short loc_4064D9
.text:004064EC sub_4064A0      endp
.text:004064EC
.text:004064EC ; ---------------------------------------------------------------------------
.text:004064EE                 align 10h
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0
.text:004064F0 sub_4064F0      proc near               ; DATA XREF: .data:0041007C↓o
.text:004064F0
.text:004064F0 var_1C          = dword ptr -1Ch
.text:004064F0 var_18          = dword ptr -18h
.text:004064F0 var_14          = dword ptr -14h
.text:004064F0 var_4           = dword ptr -4
.text:004064F0 arg_0           = dword ptr  4
.text:004064F0 arg_4           = dword ptr  8
.text:004064F0 arg_8           = dword ptr  0Ch
.text:004064F0
.text:004064F0                 sub     esp, 1Ch
.text:004064F3                 mov     [esp+1Ch+var_4], ebx
.text:004064F7                 mov     ebx, [esp+1Ch+arg_8]
.text:004064FB                 call    off_4100B4
.text:00406501                 test    eax, eax
.text:00406503                 jz      short loc_406531
.text:00406505                 mov     [esp+1Ch+var_14], ebx
.text:00406509                 mov     edx, [esp+1Ch+arg_4]
.text:0040650D                 mov     ecx, offset off_4100B4
.text:00406512                 mov     off_41008C, ecx
.text:00406518                 mov     [esp+1Ch+var_18], edx
.text:0040651C                 mov     edx, [esp+1Ch+arg_0]
.text:00406520                 mov     [esp+1Ch+var_1C], edx
.text:00406523                 call    off_4100C0
.text:00406529
.text:00406529 loc_406529:                             ; CODE XREF: sub_4064F0+4C↓j
.text:00406529                 mov     ebx, [esp+1Ch+var_4]
.text:0040652D                 add     esp, 1Ch
.text:00406530                 retn
.text:00406531 ; ---------------------------------------------------------------------------
.text:00406531
.text:00406531 loc_406531:                             ; CODE XREF: sub_4064F0+13↑j
.text:00406531                 mov     dword ptr [ebx], 0
.text:00406537                 mov     eax, 0FFFFFFFFh
.text:0040653C                 jmp     short loc_406529
.text:0040653C sub_4064F0      endp
.text:0040653C
.text:0040653C ; ---------------------------------------------------------------------------
.text:0040653E                 align 10h
.text:00406540
.text:00406540 ; =============== S U B R O U T I N E =======================================
.text:00406540
.text:00406540
.text:00406540 ; int __cdecl sub_406540(void *)
.text:00406540 sub_406540      proc near               ; DATA XREF: .data:00410080↓o
.text:00406540
.text:00406540 Buf             = dword ptr -0Ch
.text:00406540 arg_0           = dword ptr  4
.text:00406540
.text:00406540                 sub     esp, 0Ch
.text:00406543                 call    off_4100B4
.text:00406549                 xor     edx, edx
.text:0040654B                 test    eax, eax
.text:0040654D                 jz      short loc_406569
.text:0040654F                 mov     edx, offset off_4100B4
.text:00406554                 mov     off_41008C, edx
.text:0040655A                 mov     edx, [esp+0Ch+arg_0]
.text:0040655E                 mov     [esp+0Ch+Buf], edx ; Buf
.text:00406561                 call    off_4100C4
.text:00406567                 mov     edx, eax
.text:00406569
.text:00406569 loc_406569:                             ; CODE XREF: sub_406540+D↑j
.text:00406569                 mov     eax, edx
.text:0040656B                 add     esp, 0Ch
.text:0040656E                 retn
.text:0040656E sub_406540      endp
.text:0040656E
.text:0040656E ; ---------------------------------------------------------------------------
.text:0040656F                 align 10h
.text:00406570
.text:00406570 ; =============== S U B R O U T I N E =======================================
.text:00406570
.text:00406570
.text:00406570 nullsub_1       proc near               ; DATA XREF: .data:00410084↓o
.text:00406570                 retn
.text:00406570 nullsub_1       endp
.text:00406570
.text:00406570 ; ---------------------------------------------------------------------------
.text:00406571                 align 10h
.text:00406580
.text:00406580 ; =============== S U B R O U T I N E =======================================
.text:00406580
.text:00406580
.text:00406580 sub_406580      proc near               ; CODE XREF: sub_405ED0↑j
.text:00406580
.text:00406580 Size            = dword ptr -0Ch
.text:00406580 var_8           = dword ptr -8
.text:00406580 var_4           = dword ptr -4
.text:00406580
.text:00406580                 sub     esp, 0Ch
.text:00406583                 mov     edx, ds:dword_411620
.text:00406589                 test    edx, edx
.text:0040658B                 jnz     short loc_4065A6
.text:0040658D                 mov     [esp+0Ch+Size], 180h ; Size
.text:00406594                 call    malloc
.text:00406599                 mov     ds:dword_411620, eax
.text:0040659E                 mov     edx, eax
.text:004065A0                 xor     eax, eax
.text:004065A2                 test    edx, edx
.text:004065A4                 jz      short loc_4065C0
.text:004065A6
.text:004065A6 loc_4065A6:                             ; CODE XREF: sub_406580+B↑j
.text:004065A6                 mov     [esp+0Ch+Size], edx
.text:004065A9                 lea     ecx, [esp+0Ch+var_4]
.text:004065AD                 mov     [esp+0Ch+var_8], ecx
.text:004065B1                 call    sub_4063D0
.text:004065B6                 mov     ecx, [esp+0Ch+var_4]
.text:004065BA                 shr     eax, 1Fh
.text:004065BD                 dec     eax
.text:004065BE                 and     eax, ecx
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: sub_406580+24↑j
.text:004065C0                 add     esp, 0Ch
.text:004065C3                 retn
.text:004065C3 sub_406580      endp
.text:004065C3
.text:004065C3 ; ---------------------------------------------------------------------------
.text:004065C4                 align 10h
.text:004065D0 ; const char aVarRunUtmp_0[]
.text:004065D0 aVarRunUtmp_0   db '/var/run/utmp',0    ; DATA XREF: sub_4065E0:loc_406630↓o
.text:004065D0                                         ; sub_4065E0+69↓o ...
.text:004065DE                 align 10h
.text:004065E0
.text:004065E0 ; =============== S U B R O U T I N E =======================================
.text:004065E0
.text:004065E0
.text:004065E0 ; int __cdecl sub_4065E0(char *String)
.text:004065E0 sub_4065E0      proc near               ; CODE XREF: sub_405EF0↑j
.text:004065E0
.text:004065E0 Str1            = dword ptr -1Ch
.text:004065E0 Str2            = dword ptr -18h
.text:004065E0 var_8           = dword ptr -8
.text:004065E0 var_4           = dword ptr -4
.text:004065E0 String          = dword ptr  4
.text:004065E0
.text:004065E0                 sub     esp, 1Ch
.text:004065E3                 mov     edx, off_41008C
.text:004065E9                 mov     [esp+1Ch+var_8], ebx
.text:004065ED                 mov     ebx, [esp+1Ch+String]
.text:004065F1                 mov     [esp+1Ch+var_4], esi
.text:004065F5                 mov     esi, 0FFFFFFFFh
.text:004065FA                 call    dword ptr [edx+14h]
.text:004065FD                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:00406600                 mov     edx, FileName
.text:00406606                 mov     eax, offset off_410070
.text:0040660B                 mov     off_41008C, eax
.text:00406610                 mov     [esp+1Ch+Str2], edx ; Str2
.text:00406614                 call    strcmp
.text:00406619                 test    eax, eax
.text:0040661B                 jnz     short loc_406630
.text:0040661D
.text:0040661D loc_40661D:                             ; CODE XREF: sub_4065E0+83↓j
.text:0040661D                                         ; sub_4065E0+AD↓j
.text:0040661D                 xor     esi, esi
.text:0040661F
.text:0040661F loc_40661F:                             ; CODE XREF: sub_4065E0+91↓j
.text:0040661F                 mov     eax, esi
.text:00406621                 mov     ebx, [esp+1Ch+var_8]
.text:00406625                 mov     esi, [esp+1Ch+var_4]
.text:00406629                 add     esp, 1Ch
.text:0040662C                 retn
.text:0040662C ; ---------------------------------------------------------------------------
.text:0040662D                 align 10h
.text:00406630
.text:00406630 loc_406630:                             ; CODE XREF: sub_4065E0+3B↑j
.text:00406630                 mov     [esp+1Ch+Str2], offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00406638                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:0040663B                 call    strcmp
.text:00406640                 test    eax, eax
.text:00406642                 jnz     short loc_406665
.text:00406644                 mov     eax, FileName
.text:00406649                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040664E                 jz      short loc_406658
.text:00406650                 mov     [esp+1Ch+Str1], eax ; Block
.text:00406653                 call    free
.text:00406658
.text:00406658 loc_406658:                             ; CODE XREF: sub_4065E0+6E↑j
.text:00406658                 mov     ecx, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040665D                 mov     FileName, ecx
.text:00406663                 jmp     short loc_40661D
.text:00406665 ; ---------------------------------------------------------------------------
.text:00406665
.text:00406665 loc_406665:                             ; CODE XREF: sub_4065E0+62↑j
.text:00406665                 mov     [esp+1Ch+Str1], ebx ; String
.text:00406668                 call    _strdup_0
.text:0040666D                 test    eax, eax
.text:0040666F                 mov     ebx, eax
.text:00406671                 jz      short loc_40661F
.text:00406673                 mov     eax, FileName
.text:00406678                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040667D                 jz      short loc_406687
.text:0040667F                 mov     [esp+1Ch+Str1], eax ; Block
.text:00406682                 call    free
.text:00406687
.text:00406687 loc_406687:                             ; CODE XREF: sub_4065E0+9D↑j
.text:00406687                 mov     FileName, ebx
.text:0040668D                 jmp     short loc_40661D
.text:0040668D sub_4065E0      endp
.text:0040668D
.text:0040668D ; ---------------------------------------------------------------------------
.text:0040668F                 align 10h
.text:00406690
.text:00406690 ; =============== S U B R O U T I N E =======================================
.text:00406690
.text:00406690 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00406690
.text:00406690 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00406690 _win32_longpath proc near               ; CODE XREF: .text:00406E54↓p
.text:00406690
.text:00406690 C               = dword ptr -278h
.text:00406690 lpFindFileData  = dword ptr -274h
.text:00406690 Destination     = byte ptr -268h
.text:00406690 var_267         = byte ptr -267h
.text:00406690 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00406690 lpFileName      = dword ptr  8
.text:00406690
.text:00406690                 push    ebp
.text:00406691                 xor     eax, eax
.text:00406693                 push    edi
.text:00406694                 push    esi
.text:00406695                 push    ebx
.text:00406696                 sub     esp, 26Ch
.text:0040669C                 mov     esi, [esp+278h+lpFileName]
.text:004066A3                 lea     ebp, [esp+278h+Destination]
.text:004066A7                 test    esi, esi
.text:004066A9                 jz      loc_406807
.text:004066AF                 movsx   edx, byte ptr [esi]
.text:004066B2                 mov     [esp+278h+C], edx ; C
.text:004066B5                 call    isalpha
.text:004066BA                 test    eax, eax
.text:004066BC                 jz      short loc_4066CF
.text:004066BE                 mov     eax, [esp+278h+lpFileName]
.text:004066C5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:004066C9                 jz      loc_406A0B
.text:004066CF
.text:004066CF loc_4066CF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:004066CF                 mov     edx, [esp+278h+lpFileName]
.text:004066D6                 movzx   eax, byte ptr [edx]
.text:004066D9                 cmp     al, 2Fh ; '/'
.text:004066DB                 jz      loc_4068EB
.text:004066E1                 cmp     al, 5Ch ; '\'
.text:004066E3                 jz      loc_4068EB
.text:004066E9
.text:004066E9 loc_4066E9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:004066E9                                         ; _win32_longpath+2B1↓j ...
.text:004066E9                 mov     [ebp+268h+Destination], 0
.text:004066ED                 movzx   ebx, byte ptr [esi]
.text:004066F0                 test    bl, bl
.text:004066F2                 jz      loc_4067E9
.text:004066F8                 nop
.text:004066F9                 lea     esi, [esi+0]
.text:00406700
.text:00406700 loc_406700:                             ; CODE XREF: _win32_longpath+153↓j
.text:00406700                 cmp     bl, 2Fh ; '/'
.text:00406703                 jz      loc_4068A0
.text:00406709                 cmp     bl, 5Ch ; '\'
.text:0040670C                 jz      loc_4068A0
.text:00406712
.text:00406712 loc_406712:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00406712                                         ; _win32_longpath+22C↓j ...
.text:00406712                 cmp     bl, 2Eh ; '.'
.text:00406715                 jz      loc_406840
.text:0040671B
.text:0040671B loc_40671B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040671B                                         ; _win32_longpath+203↓j
.text:0040671B                 test    bl, bl
.text:0040671D                 jz      loc_4067E9
.text:00406723                 cmp     bl, 2Fh ; '/'
.text:00406726                 jz      short loc_406742
.text:00406728                 cmp     bl, 5Ch ; '\'
.text:0040672B                 jz      short loc_406742
.text:0040672D                 lea     esi, [esi+0]
.text:00406730
.text:00406730 loc_406730:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00406730                 inc     esi
.text:00406731                 movzx   ebx, byte ptr [esi]
.text:00406734                 test    bl, bl
.text:00406736                 jz      short loc_406742
.text:00406738                 cmp     bl, 2Fh ; '/'
.text:0040673B                 jz      short loc_406742
.text:0040673D                 cmp     bl, 5Ch ; '\'
.text:00406740                 jnz     short loc_406730
.text:00406742
.text:00406742 loc_406742:                             ; CODE XREF: _win32_longpath+96↑j
.text:00406742                                         ; _win32_longpath+9B↑j ...
.text:00406742                 mov     byte ptr [esi], 0
.text:00406745                 lea     edx, [esp+278h+FindFileData]
.text:0040674C                 mov     eax, [esp+278h+lpFileName]
.text:00406753                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00406757                 mov     [esp+278h+C], eax ; lpFileName
.text:0040675A                 call    FindFirstFileA
.text:0040675F                 mov     [esi], bl
.text:00406761                 sub     esp, 8
.text:00406764                 mov     edi, eax
.text:00406766                 cmp     eax, 0FFFFFFFFh
.text:00406769                 jz      loc_40682C
.text:0040676F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00406776                 mov     ecx, ebx
.text:00406778                 nop
.text:00406779                 lea     esi, [esi+0]
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: _win32_longpath+105↓j
.text:00406780                 mov     eax, [ebx]
.text:00406782                 add     ebx, 4
.text:00406785                 lea     edx, [eax-1010101h]
.text:0040678B                 not     eax
.text:0040678D                 and     edx, eax
.text:0040678F                 and     edx, 80808080h
.text:00406795                 jz      short loc_406780
.text:00406797                 test    edx, 8080h
.text:0040679D                 jnz     short loc_4067A5
.text:0040679F                 shr     edx, 10h
.text:004067A2                 add     ebx, 2
.text:004067A5
.text:004067A5 loc_4067A5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:004067A5                 add     dl, dl
.text:004067A7                 sbb     ebx, 3
.text:004067AA                 sub     ebx, ecx
.text:004067AC                 lea     ecx, [esp+278h+Destination]
.text:004067B0                 sub     ecx, ebp
.text:004067B2                 add     ecx, 105h
.text:004067B8                 cmp     ecx, ebx
.text:004067BA                 jle     short loc_406812
.text:004067BC                 mov     [esp+278h+C], ebp ; Destination
.text:004067BF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:004067C6                 add     ebp, ebx
.text:004067C8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:004067CC                 call    strcpy
.text:004067D1                 mov     [esp+278h+C], edi ; hFindFile
.text:004067D4                 call    FindClose
.text:004067D9                 sub     esp, 4
.text:004067DC
.text:004067DC loc_4067DC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:004067DC                 movzx   ecx, byte ptr [esi]
.text:004067DF                 test    cl, cl
.text:004067E1                 mov     bl, cl
.text:004067E3                 jnz     loc_406700
.text:004067E9
.text:004067E9 loc_4067E9:                             ; CODE XREF: _win32_longpath+62↑j
.text:004067E9                                         ; _win32_longpath+8D↑j
.text:004067E9                 mov     esi, [esp+278h+lpFileName]
.text:004067F0                 lea     ebp, [esp+278h+Destination]
.text:004067F4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:004067F8                 mov     [esp+278h+C], esi ; Destination
.text:004067FB                 call    strcpy
.text:00406800                 mov     eax, [esp+278h+lpFileName]
.text:00406807
.text:00406807 loc_406807:                             ; CODE XREF: _win32_longpath+19↑j
.text:00406807                                         ; _win32_longpath+19A↓j
.text:00406807                 add     esp, 26Ch
.text:0040680D                 pop     ebx
.text:0040680E                 pop     esi
.text:0040680F                 pop     edi
.text:00406810                 pop     ebp
.text:00406811                 retn
.text:00406812 ; ---------------------------------------------------------------------------
.text:00406812
.text:00406812 loc_406812:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00406812                 mov     [esp+278h+C], edi ; hFindFile
.text:00406815                 call    FindClose
.text:0040681A                 sub     esp, 4
.text:0040681D                 call    _errno
.text:00406822                 mov     dword ptr [eax], 22h ; '"'
.text:00406828
.text:00406828 loc_406828:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00406828                 xor     eax, eax
.text:0040682A                 jmp     short loc_406807
.text:0040682C ; ---------------------------------------------------------------------------
.text:0040682C
.text:0040682C loc_40682C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040682C                 call    _errno
.text:00406831                 mov     dword ptr [eax], 16h
.text:00406837                 jmp     short loc_406828
.text:00406837 ; ---------------------------------------------------------------------------
.text:00406839                 align 10h
.text:00406840
.text:00406840 loc_406840:                             ; CODE XREF: _win32_longpath+85↑j
.text:00406840                 movzx   eax, byte ptr [esi+1]
.text:00406844                 test    al, al
.text:00406846                 jnz     short loc_406875
.text:00406848
.text:00406848 loc_406848:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00406848                                         ; _win32_longpath+1EB↓j ...
.text:00406848                 test    bl, bl
.text:0040684A                 jz      short loc_40686C
.text:0040684C                 cmp     bl, 2Fh ; '/'
.text:0040684F                 jz      short loc_40686C
.text:00406851                 cmp     bl, 5Ch ; '\'
.text:00406854                 jz      short loc_40686C
.text:00406856
.text:00406856 loc_406856:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00406856                 mov     [ebp+268h+Destination], bl
.text:00406859                 inc     esi
.text:0040685A                 inc     ebp
.text:0040685B                 movzx   ebx, byte ptr [esi]
.text:0040685E                 test    bl, bl
.text:00406860                 jz      short loc_40686C
.text:00406862                 cmp     bl, 2Fh ; '/'
.text:00406865                 jz      short loc_40686C
.text:00406867                 cmp     bl, 5Ch ; '\'
.text:0040686A                 jnz     short loc_406856
.text:0040686C
.text:0040686C loc_40686C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040686C                                         ; _win32_longpath+1BF↑j ...
.text:0040686C                 mov     [ebp+268h+Destination], 0
.text:00406870                 jmp     loc_4067DC
.text:00406875 ; ---------------------------------------------------------------------------
.text:00406875
.text:00406875 loc_406875:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00406875                 cmp     al, 2Fh ; '/'
.text:00406877                 jz      short loc_406848
.text:00406879                 cmp     al, 5Ch ; '\'
.text:0040687B                 jz      short loc_406848
.text:0040687D                 cmp     al, 2Eh ; '.'
.text:0040687F                 jnz     loc_40671B
.text:00406885                 movzx   eax, byte ptr [esi+2]
.text:00406889                 test    al, al
.text:0040688B                 jz      short loc_406848
.text:0040688D                 cmp     al, 2Fh ; '/'
.text:0040688F                 jz      short loc_406848
.text:00406891                 cmp     al, 5Ch ; '\'
.text:00406893                 jnz     loc_40671B
.text:00406899                 jmp     short loc_406848
.text:00406899 ; ---------------------------------------------------------------------------
.text:0040689B                 align 10h
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: _win32_longpath+73↑j
.text:004068A0                                         ; _win32_longpath+7C↑j
.text:004068A0                 mov     [ebp+268h+Destination], bl
.text:004068A3                 inc     esi
.text:004068A4                 inc     ebp
.text:004068A5                 mov     [ebp+268h+Destination], 0
.text:004068A9                 movzx   ebx, byte ptr [esi]
.text:004068AC                 test    bl, bl
.text:004068AE                 jz      loc_406712
.text:004068B4                 cmp     bl, 2Fh ; '/'
.text:004068B7                 jz      short loc_4068D0
.text:004068B9                 cmp     bl, 5Ch ; '\'
.text:004068BC                 jnz     loc_406712
.text:004068C2                 lea     esi, [esi+0]
.text:004068C9                 lea     edi, [edi+0]
.text:004068D0
.text:004068D0 loc_4068D0:                             ; CODE XREF: _win32_longpath+227↑j
.text:004068D0                                         ; _win32_longpath+24F↓j ...
.text:004068D0                 inc     esi
.text:004068D1                 movzx   ebx, byte ptr [esi]
.text:004068D4                 test    bl, bl
.text:004068D6                 jz      loc_406712
.text:004068DC                 cmp     bl, 2Fh ; '/'
.text:004068DF                 jz      short loc_4068D0
.text:004068E1                 cmp     bl, 5Ch ; '\'
.text:004068E4                 jz      short loc_4068D0
.text:004068E6                 jmp     loc_406712
.text:004068EB ; ---------------------------------------------------------------------------
.text:004068EB
.text:004068EB loc_4068EB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:004068EB                                         ; _win32_longpath+53↑j
.text:004068EB                 mov     edi, [esp+278h+lpFileName]
.text:004068F2                 movzx   edx, byte ptr [edi+1]
.text:004068F6                 cmp     dl, 2Fh ; '/'
.text:004068F9                 jz      short loc_406904
.text:004068FB                 cmp     dl, 5Ch ; '\'
.text:004068FE                 jnz     loc_4066E9
.text:00406904
.text:00406904 loc_406904:                             ; CODE XREF: _win32_longpath+269↑j
.text:00406904                 mov     esi, [esp+278h+lpFileName]
.text:0040690B                 mov     [ebp+268h+Destination], al
.text:0040690E                 mov     ecx, [esp+278h+lpFileName]
.text:00406915                 inc     ebp
.text:00406916                 add     esi, 2
.text:00406919                 movzx   ebx, byte ptr [ecx+1]
.text:0040691D                 mov     [ebp+268h+Destination], bl
.text:00406920                 inc     ebp
.text:00406921                 movzx   eax, byte ptr [ecx+2]
.text:00406925                 test    al, al
.text:00406927                 jz      loc_406A03
.text:0040692D                 cmp     al, 2Fh ; '/'
.text:0040692F                 jz      loc_4069E8
.text:00406935                 cmp     al, 5Ch ; '\'
.text:00406937                 mov     bl, al
.text:00406939                 jz      loc_4069E8
.text:0040693F
.text:0040693F loc_40693F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040693F                                         ; _win32_longpath+376↓j
.text:0040693F                 test    bl, bl
.text:00406941                 jz      loc_4066E9
.text:00406947                 cmp     bl, 2Fh ; '/'
.text:0040694A                 jz      short loc_40696B
.text:0040694C                 cmp     bl, 5Ch ; '\'
.text:0040694F                 jz      short loc_40696B
.text:00406951
.text:00406951 loc_406951:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00406951                 mov     [ebp+268h+Destination], bl
.text:00406954                 inc     esi
.text:00406955                 inc     ebp
.text:00406956                 movzx   ebx, byte ptr [esi]
.text:00406959                 test    bl, bl
.text:0040695B                 jz      loc_4066E9
.text:00406961                 cmp     bl, 2Fh ; '/'
.text:00406964                 jz      short loc_40696B
.text:00406966                 cmp     bl, 5Ch ; '\'
.text:00406969                 jnz     short loc_406951
.text:0040696B
.text:0040696B loc_40696B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040696B                                         ; _win32_longpath+2BF↑j ...
.text:0040696B                 test    bl, bl
.text:0040696D                 jz      loc_4066E9
.text:00406973                 mov     [ebp+268h+Destination], bl
.text:00406976                 inc     esi
.text:00406977                 inc     ebp
.text:00406978                 movzx   ebx, byte ptr [esi]
.text:0040697B                 test    bl, bl
.text:0040697D                 jz      loc_4066E9
.text:00406983                 cmp     bl, 2Fh ; '/'
.text:00406986                 jz      short loc_4069D0
.text:00406988                 cmp     bl, 5Ch ; '\'
.text:0040698B                 jz      short loc_4069D0
.text:0040698D
.text:0040698D loc_40698D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040698D                 test    bl, bl
.text:0040698F                 jz      loc_4066E9
.text:00406995                 cmp     bl, 2Fh ; '/'
.text:00406998                 jz      loc_4066E9
.text:0040699E                 cmp     bl, 5Ch ; '\'
.text:004069A1                 jz      loc_4066E9
.text:004069A7
.text:004069A7 loc_4069A7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004069A7                 mov     [ebp+268h+Destination], bl
.text:004069AA                 inc     esi
.text:004069AB                 inc     ebp
.text:004069AC                 movzx   ebx, byte ptr [esi]
.text:004069AF                 test    bl, bl
.text:004069B1                 jz      loc_4066E9
.text:004069B7                 cmp     bl, 2Fh ; '/'
.text:004069BA                 jz      loc_4066E9
.text:004069C0                 cmp     bl, 5Ch ; '\'
.text:004069C3                 jnz     short loc_4069A7
.text:004069C5                 jmp     loc_4066E9
.text:004069C5 ; ---------------------------------------------------------------------------
.text:004069CA                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:004069D0                                         ; _win32_longpath+2FB↑j ...
.text:004069D0                 inc     esi
.text:004069D1                 movzx   ebx, byte ptr [esi]
.text:004069D4                 test    bl, bl
.text:004069D6                 jz      loc_4066E9
.text:004069DC                 cmp     bl, 2Fh ; '/'
.text:004069DF                 jz      short loc_4069D0
.text:004069E1                 cmp     bl, 5Ch ; '\'
.text:004069E4                 jz      short loc_4069D0
.text:004069E6                 jmp     short loc_40698D
.text:004069E8 ; ---------------------------------------------------------------------------
.text:004069E8
.text:004069E8 loc_4069E8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:004069E8                                         ; _win32_longpath+2A9↑j ...
.text:004069E8                 inc     esi
.text:004069E9                 movzx   ebx, byte ptr [esi]
.text:004069EC                 test    bl, bl
.text:004069EE                 jz      loc_4066E9
.text:004069F4                 cmp     bl, 2Fh ; '/'
.text:004069F7                 jz      short loc_4069E8
.text:004069F9                 cmp     bl, 5Ch ; '\'
.text:004069FC                 jz      short loc_4069E8
.text:004069FE                 jmp     loc_40693F
.text:00406A03 ; ---------------------------------------------------------------------------
.text:00406A03
.text:00406A03 loc_406A03:                             ; CODE XREF: _win32_longpath+297↑j
.text:00406A03                 movzx   ebx, byte ptr [esi]
.text:00406A06                 jmp     loc_40693F
.text:00406A0B ; ---------------------------------------------------------------------------
.text:00406A0B
.text:00406A0B loc_406A0B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00406A0B                 movzx   ecx, byte ptr [eax]
.text:00406A0E                 mov     esi, eax
.text:00406A10                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00406A15                 add     esi, 2
.text:00406A18                 lea     ebp, [esp+12h]
.text:00406A1C                 mov     [esp+278h+Destination], cl
.text:00406A20                 jmp     loc_4066E9
.text:00406A20 _win32_longpath endp
.text:00406A20
.text:00406A20 ; ---------------------------------------------------------------------------
.text:00406A25                 align 10h
.text:00406A30                 sub     esp, 0Ch
.text:00406A33                 mov     edx, [esp+10h]
.text:00406A37                 mov     dword ptr [esp+4], 0
.text:00406A3F                 mov     [esp], edx
.text:00406A42                 call    sub_40A570
.text:00406A47                 inc     eax
.text:00406A48                 setnz   dl
.text:00406A4B                 add     esp, 0Ch
.text:00406A4E                 movzx   eax, dl
.text:00406A51                 retn
.text:00406A51 ; ---------------------------------------------------------------------------
.text:00406A52                 align 10h
.text:00406A60
.text:00406A60 ; =============== S U B R O U T I N E =======================================
.text:00406A60
.text:00406A60
.text:00406A60 sub_406A60      proc near               ; CODE XREF: sub_406080+B4↑p
.text:00406A60                                         ; sub_40A440+AA↓p
.text:00406A60
.text:00406A60 arg_0           = dword ptr  4
.text:00406A60
.text:00406A60                 mov     ecx, [esp+arg_0]
.text:00406A64                 mov     edx, ecx
.text:00406A66                 movzx   eax, byte ptr [ecx]
.text:00406A69                 test    al, al
.text:00406A6B                 jz      short loc_406A7C
.text:00406A6D                 lea     esi, [esi+0]
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_406A60+1A↓j
.text:00406A70                 cmp     al, 5Ch ; '\'
.text:00406A72                 jz      short loc_406A80
.text:00406A74
.text:00406A74 loc_406A74:                             ; CODE XREF: sub_406A60+23↓j
.text:00406A74                 inc     edx
.text:00406A75                 movzx   eax, byte ptr [edx]
.text:00406A78                 test    al, al
.text:00406A7A                 jnz     short loc_406A70
.text:00406A7C
.text:00406A7C loc_406A7C:                             ; CODE XREF: sub_406A60+B↑j
.text:00406A7C                 mov     eax, ecx
.text:00406A7E                 retn
.text:00406A7E ; ---------------------------------------------------------------------------
.text:00406A7F                 align 10h
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: sub_406A60+12↑j
.text:00406A80                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406A83                 jmp     short loc_406A74
.text:00406A83 sub_406A60      endp
.text:00406A83
.text:00406A83 ; ---------------------------------------------------------------------------
.text:00406A85                 align 10h
.text:00406A90                 push    ebx
.text:00406A91                 sub     esp, 8
.text:00406A94                 mov     ebx, [esp+14h]
.text:00406A98                 mov     edx, [esp+10h]
.text:00406A9C                 mov     [esp], ebx
.text:00406A9F                 mov     [esp+4], edx
.text:00406AA3                 call    strcpy
.text:00406AA8                 movzx   eax, byte ptr [ebx]
.text:00406AAB                 mov     edx, ebx
.text:00406AAD                 test    al, al
.text:00406AAF                 jz      short loc_406ACC
.text:00406AB1                 jmp     short loc_406AC0
.text:00406AB1 ; ---------------------------------------------------------------------------
.text:00406AB3                 align 10h
.text:00406AC0
.text:00406AC0 loc_406AC0:                             ; CODE XREF: .text:00406AB1↑j
.text:00406AC0                                         ; .text:00406ACA↓j
.text:00406AC0                 cmp     al, 5Ch ; '\'
.text:00406AC2                 jz      short loc_406AD3
.text:00406AC4
.text:00406AC4 loc_406AC4:                             ; CODE XREF: .text:00406AD6↓j
.text:00406AC4                 inc     edx
.text:00406AC5                 movzx   eax, byte ptr [edx]
.text:00406AC8                 test    al, al
.text:00406ACA                 jnz     short loc_406AC0
.text:00406ACC
.text:00406ACC loc_406ACC:                             ; CODE XREF: .text:00406AAF↑j
.text:00406ACC                 add     esp, 8
.text:00406ACF                 xor     eax, eax
.text:00406AD1                 pop     ebx
.text:00406AD2                 retn
.text:00406AD3 ; ---------------------------------------------------------------------------
.text:00406AD3
.text:00406AD3 loc_406AD3:                             ; CODE XREF: .text:00406AC2↑j
.text:00406AD3                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406AD6                 jmp     short loc_406AC4
.text:00406AD6 ; ---------------------------------------------------------------------------
.text:00406AD8                 align 10h
.text:00406AE0
.text:00406AE0 ; =============== S U B R O U T I N E =======================================
.text:00406AE0
.text:00406AE0
.text:00406AE0 sub_406AE0      proc near               ; CODE XREF: sub_4079B0+16↓p
.text:00406AE0                                         ; sub_407EB0+1F↓p ...
.text:00406AE0
.text:00406AE0 arg_0           = dword ptr  4
.text:00406AE0
.text:00406AE0                 mov     ecx, [esp+arg_0]
.text:00406AE4                 mov     edx, ecx
.text:00406AE6                 movzx   eax, byte ptr [ecx]
.text:00406AE9                 test    al, al
.text:00406AEB                 jz      short loc_406AFC
.text:00406AED                 lea     esi, [esi+0]
.text:00406AF0
.text:00406AF0 loc_406AF0:                             ; CODE XREF: sub_406AE0+1A↓j
.text:00406AF0                 cmp     al, 2Fh ; '/'
.text:00406AF2                 jz      short loc_406B00
.text:00406AF4
.text:00406AF4 loc_406AF4:                             ; CODE XREF: sub_406AE0+23↓j
.text:00406AF4                 inc     edx
.text:00406AF5                 movzx   eax, byte ptr [edx]
.text:00406AF8                 test    al, al
.text:00406AFA                 jnz     short loc_406AF0
.text:00406AFC
.text:00406AFC loc_406AFC:                             ; CODE XREF: sub_406AE0+B↑j
.text:00406AFC                 mov     eax, ecx
.text:00406AFE                 retn
.text:00406AFE ; ---------------------------------------------------------------------------
.text:00406AFF                 align 10h
.text:00406B00
.text:00406B00 loc_406B00:                             ; CODE XREF: sub_406AE0+12↑j
.text:00406B00                 mov     byte ptr [edx], 5Ch ; '\'
.text:00406B03                 jmp     short loc_406AF4
.text:00406B03 sub_406AE0      endp
.text:00406B03
.text:00406B03 ; ---------------------------------------------------------------------------
.text:00406B05                 align 10h
.text:00406B10                 push    ebx
.text:00406B11                 sub     esp, 8
.text:00406B14                 mov     ebx, [esp+14h]
.text:00406B18                 mov     edx, [esp+10h]
.text:00406B1C                 mov     [esp], ebx
.text:00406B1F                 mov     [esp+4], edx
.text:00406B23                 call    strcpy
.text:00406B28                 movzx   eax, byte ptr [ebx]
.text:00406B2B                 mov     edx, ebx
.text:00406B2D                 test    al, al
.text:00406B2F                 jz      short loc_406B4C
.text:00406B31                 jmp     short loc_406B40
.text:00406B31 ; ---------------------------------------------------------------------------
.text:00406B33                 align 10h
.text:00406B40
.text:00406B40 loc_406B40:                             ; CODE XREF: .text:00406B31↑j
.text:00406B40                                         ; .text:00406B4A↓j
.text:00406B40                 cmp     al, 2Fh ; '/'
.text:00406B42                 jz      short loc_406B53
.text:00406B44
.text:00406B44 loc_406B44:                             ; CODE XREF: .text:00406B56↓j
.text:00406B44                 inc     edx
.text:00406B45                 movzx   eax, byte ptr [edx]
.text:00406B48                 test    al, al
.text:00406B4A                 jnz     short loc_406B40
.text:00406B4C
.text:00406B4C loc_406B4C:                             ; CODE XREF: .text:00406B2F↑j
.text:00406B4C                 add     esp, 8
.text:00406B4F                 xor     eax, eax
.text:00406B51                 pop     ebx
.text:00406B52                 retn
.text:00406B53 ; ---------------------------------------------------------------------------
.text:00406B53
.text:00406B53 loc_406B53:                             ; CODE XREF: .text:00406B42↑j
.text:00406B53                 mov     byte ptr [edx], 5Ch ; '\'
.text:00406B56                 jmp     short loc_406B44
.text:00406B56 ; ---------------------------------------------------------------------------
.text:00406B58                 align 10h
.text:00406B60                 push    ebx
.text:00406B61                 sub     esp, 8
.text:00406B64                 mov     ebx, [esp+14h]
.text:00406B68                 mov     edx, [esp+10h]
.text:00406B6C                 mov     [esp+4], ebx
.text:00406B70                 mov     [esp], edx
.text:00406B73                 call    sub_40A3F0
.text:00406B78                 movzx   eax, byte ptr [ebx]
.text:00406B7B                 mov     edx, ebx
.text:00406B7D                 test    al, al
.text:00406B7F                 jz      short loc_406B9C
.text:00406B81                 jmp     short loc_406B90
.text:00406B81 ; ---------------------------------------------------------------------------
.text:00406B83                 align 10h
.text:00406B90
.text:00406B90 loc_406B90:                             ; CODE XREF: .text:00406B81↑j
.text:00406B90                                         ; .text:00406B9A↓j
.text:00406B90                 cmp     al, 2Fh ; '/'
.text:00406B92                 jz      short loc_406BA3
.text:00406B94
.text:00406B94 loc_406B94:                             ; CODE XREF: .text:00406BA6↓j
.text:00406B94                 inc     edx
.text:00406B95                 movzx   eax, byte ptr [edx]
.text:00406B98                 test    al, al
.text:00406B9A                 jnz     short loc_406B90
.text:00406B9C
.text:00406B9C loc_406B9C:                             ; CODE XREF: .text:00406B7F↑j
.text:00406B9C                 add     esp, 8
.text:00406B9F                 xor     eax, eax
.text:00406BA1                 pop     ebx
.text:00406BA2                 retn
.text:00406BA3 ; ---------------------------------------------------------------------------
.text:00406BA3
.text:00406BA3 loc_406BA3:                             ; CODE XREF: .text:00406B92↑j
.text:00406BA3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00406BA6                 jmp     short loc_406B94
.text:00406BA6 ; ---------------------------------------------------------------------------
.text:00406BA8                 align 10h
.text:00406BB0                 push    ebx
.text:00406BB1                 sub     esp, 8
.text:00406BB4                 mov     ebx, [esp+14h]
.text:00406BB8                 mov     edx, [esp+10h]
.text:00406BBC                 mov     [esp], ebx
.text:00406BBF                 mov     [esp+4], edx
.text:00406BC3                 call    sub_40A3F0
.text:00406BC8                 movzx   eax, byte ptr [ebx]
.text:00406BCB                 mov     edx, ebx
.text:00406BCD                 test    al, al
.text:00406BCF                 jz      short loc_406BEC
.text:00406BD1                 jmp     short loc_406BE0
.text:00406BD1 ; ---------------------------------------------------------------------------
.text:00406BD3                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: .text:00406BD1↑j
.text:00406BE0                                         ; .text:00406BEA↓j
.text:00406BE0                 cmp     al, 5Ch ; '\'
.text:00406BE2                 jz      short loc_406BF1
.text:00406BE4
.text:00406BE4 loc_406BE4:                             ; CODE XREF: .text:00406BF4↓j
.text:00406BE4                 inc     edx
.text:00406BE5                 movzx   eax, byte ptr [edx]
.text:00406BE8                 test    al, al
.text:00406BEA                 jnz     short loc_406BE0
.text:00406BEC
.text:00406BEC loc_406BEC:                             ; CODE XREF: .text:00406BCF↑j
.text:00406BEC                 add     esp, 8
.text:00406BEF                 pop     ebx
.text:00406BF0                 retn
.text:00406BF1 ; ---------------------------------------------------------------------------
.text:00406BF1
.text:00406BF1 loc_406BF1:                             ; CODE XREF: .text:00406BE2↑j
.text:00406BF1                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406BF4                 jmp     short loc_406BE4
.text:00406BF4 ; ---------------------------------------------------------------------------
.text:00406BF6                 align 10h
.text:00406C00
.text:00406C00 ; =============== S U B R O U T I N E =======================================
.text:00406C00
.text:00406C00
.text:00406C00 ; int __cdecl sub_406C00(LPSTR)
.text:00406C00 sub_406C00      proc near               ; CODE XREF: .text:00406C8E↓p
.text:00406C00                                         ; .text:00406CCE↓p ...
.text:00406C00
.text:00406C00 hModule         = dword ptr -1Ch
.text:00406C00 lpFilename      = dword ptr -18h
.text:00406C00 nSize           = dword ptr -14h
.text:00406C00 arg_0           = dword ptr  4
.text:00406C00
.text:00406C00                 push    esi
.text:00406C01                 push    ebx
.text:00406C02                 sub     esp, 14h
.text:00406C05                 mov     esi, [esp+1Ch+arg_0]
.text:00406C09                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00406C11                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00406C18                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00406C1C                 call    GetModuleFileNameA
.text:00406C21                 sub     esp, 0Ch
.text:00406C24                 test    eax, eax
.text:00406C26                 jz      short loc_406C68
.text:00406C28                 cmp     eax, 104h
.text:00406C2D                 jg      short loc_406C59
.text:00406C2F
.text:00406C2F loc_406C2F:                             ; CODE XREF: sub_406C00+66↓j
.text:00406C2F                                         ; sub_406C00+78↓j
.text:00406C2F                 movzx   eax, byte ptr [esi]
.text:00406C32                 mov     edx, esi
.text:00406C34                 test    al, al
.text:00406C36                 jz      short loc_406C4C
.text:00406C38                 nop
.text:00406C39                 lea     esi, [esi+0]
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: sub_406C00+4A↓j
.text:00406C40                 cmp     al, 5Ch ; '\'
.text:00406C42                 jz      short loc_406C54
.text:00406C44
.text:00406C44 loc_406C44:                             ; CODE XREF: sub_406C00+57↓j
.text:00406C44                 inc     edx
.text:00406C45                 movzx   eax, byte ptr [edx]
.text:00406C48                 test    al, al
.text:00406C4A                 jnz     short loc_406C40
.text:00406C4C
.text:00406C4C loc_406C4C:                             ; CODE XREF: sub_406C00+36↑j
.text:00406C4C                 add     esp, 14h
.text:00406C4F                 mov     eax, esi
.text:00406C51                 pop     ebx
.text:00406C52                 pop     esi
.text:00406C53                 retn
.text:00406C54 ; ---------------------------------------------------------------------------
.text:00406C54
.text:00406C54 loc_406C54:                             ; CODE XREF: sub_406C00+42↑j
.text:00406C54                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406C57                 jmp     short loc_406C44
.text:00406C59 ; ---------------------------------------------------------------------------
.text:00406C59
.text:00406C59 loc_406C59:                             ; CODE XREF: sub_406C00+2D↑j
.text:00406C59                 call    _errno
.text:00406C5E                 mov     dword ptr [eax], 26h ; '&'
.text:00406C64                 xor     esi, esi
.text:00406C66                 jmp     short loc_406C2F
.text:00406C68 ; ---------------------------------------------------------------------------
.text:00406C68
.text:00406C68 loc_406C68:                             ; CODE XREF: sub_406C00+26↑j
.text:00406C68                 call    sub_407190
.text:00406C6D                 mov     ebx, eax
.text:00406C6F                 xor     esi, esi
.text:00406C71                 call    _errno
.text:00406C76                 mov     [eax], ebx
.text:00406C78                 jmp     short loc_406C2F
.text:00406C78 sub_406C00      endp
.text:00406C78
.text:00406C78 ; ---------------------------------------------------------------------------
.text:00406C7A                 align 10h
.text:00406C80                 sub     esp, 0Ch
.text:00406C83                 mov     [esp+8], ebx
.text:00406C87                 mov     ebx, [esp+10h]
.text:00406C8B                 mov     [esp], ebx
.text:00406C8E                 call    sub_406C00
.text:00406C93                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00406C9B                 mov     [esp], ebx
.text:00406C9E                 call    strrchr
.text:00406CA3                 test    eax, eax
.text:00406CA5                 jz      short loc_406CAA
.text:00406CA7                 lea     ebx, [eax+1]
.text:00406CAA
.text:00406CAA loc_406CAA:                             ; CODE XREF: .text:00406CA5↑j
.text:00406CAA                 mov     eax, ebx
.text:00406CAC                 mov     ebx, [esp+8]
.text:00406CB0                 add     esp, 0Ch
.text:00406CB3                 retn
.text:00406CB3 ; ---------------------------------------------------------------------------
.text:00406CB4                 align 10h
.text:00406CC0                 sub     esp, 0Ch
.text:00406CC3                 mov     [esp+8], ebx
.text:00406CC7                 mov     ebx, [esp+10h]
.text:00406CCB                 mov     [esp], ebx
.text:00406CCE                 call    sub_406C00
.text:00406CD3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00406CDB                 mov     [esp], ebx
.text:00406CDE                 call    strrchr
.text:00406CE3                 test    eax, eax
.text:00406CE5                 jz      short loc_406CEA
.text:00406CE7                 mov     byte ptr [eax], 0
.text:00406CEA
.text:00406CEA loc_406CEA:                             ; CODE XREF: .text:00406CE5↑j
.text:00406CEA                 mov     eax, ebx
.text:00406CEC                 mov     ebx, [esp+8]
.text:00406CF0                 add     esp, 0Ch
.text:00406CF3                 retn
.text:00406CF3 ; ---------------------------------------------------------------------------
.text:00406CF4                 align 10h
.text:00406D00                 sub     esp, 0Ch
.text:00406D03                 mov     [esp+8], ebx
.text:00406D07                 mov     ebx, [esp+10h]
.text:00406D0B                 mov     [esp], ebx
.text:00406D0E                 call    sub_406C00
.text:00406D13                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00406D1B                 mov     [esp], ebx
.text:00406D1E                 call    strrchr
.text:00406D23                 test    eax, eax
.text:00406D25                 jz      short loc_406D2A
.text:00406D27                 mov     byte ptr [eax], 0
.text:00406D2A
.text:00406D2A loc_406D2A:                             ; CODE XREF: .text:00406D25↑j
.text:00406D2A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00406D32                 mov     [esp], ebx
.text:00406D35                 call    strrchr
.text:00406D3A                 test    eax, eax
.text:00406D3C                 jz      short loc_406D41
.text:00406D3E                 mov     byte ptr [eax], 0
.text:00406D41
.text:00406D41 loc_406D41:                             ; CODE XREF: .text:00406D3C↑j
.text:00406D41                 mov     eax, ebx
.text:00406D43                 mov     ebx, [esp+8]
.text:00406D47                 add     esp, 0Ch
.text:00406D4A                 retn
.text:00406D4A ; ---------------------------------------------------------------------------
.text:00406D4B                 align 10h
.text:00406D50                 sub     esp, 1Ch
.text:00406D53                 mov     edx, [esp+20h]
.text:00406D57                 mov     [esp+10h], ebx
.text:00406D5B                 xor     ebx, ebx
.text:00406D5D                 mov     [esp+14h], esi
.text:00406D61                 mov     [esp+18h], edi
.text:00406D65                 mov     [esp], edx
.text:00406D68                 call    sub_40A420
.text:00406D6D                 mov     edx, [esp+24h]
.text:00406D71                 mov     edi, eax
.text:00406D73                 mov     [esp], edx
.text:00406D76                 call    sub_40A420
.text:00406D7B                 mov     [esp+4], eax
.text:00406D7F                 mov     esi, eax
.text:00406D81                 mov     [esp], edi
.text:00406D84                 call    _stricmp_0
.text:00406D89                 mov     [esp], edi
.text:00406D8C                 test    eax, eax
.text:00406D8E                 setz    bl
.text:00406D91                 call    free
.text:00406D96                 mov     [esp], esi
.text:00406D99                 call    free
.text:00406D9E                 mov     eax, ebx
.text:00406DA0                 mov     esi, [esp+14h]
.text:00406DA4                 mov     ebx, [esp+10h]
.text:00406DA8                 mov     edi, [esp+18h]
.text:00406DAC                 add     esp, 1Ch
.text:00406DAF                 retn
.text:00406DB0 ; ---------------------------------------------------------------------------
.text:00406DB0                 xor     eax, eax
.text:00406DB2                 retn
.text:00406DB2 ; ---------------------------------------------------------------------------
.text:00406DB3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00406DE7↓o
.text:00406DC0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00406DF6↓o
.text:00406DD0 ; ---------------------------------------------------------------------------
.text:00406DD0                 sub     esp, 1Ch
.text:00406DD3                 mov     [esp+10h], ebx
.text:00406DD7                 mov     ebx, [esp+20h]
.text:00406DDB                 mov     [esp+18h], edi
.text:00406DDF                 mov     edi, [esp+24h]
.text:00406DE3                 mov     [esp+14h], esi
.text:00406DE7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00406DEE                 call    GetModuleHandleA
.text:00406DF3                 sub     esp, 4
.text:00406DF6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00406DFE                 mov     [esp], eax
.text:00406E01                 call    GetProcAddress
.text:00406E06                 sub     esp, 8
.text:00406E09                 test    eax, eax
.text:00406E0B                 jz      short loc_406E23
.text:00406E0D                 mov     dword ptr [esp+8], 104h
.text:00406E15                 mov     [esp+4], ebx
.text:00406E19                 mov     [esp], edi
.text:00406E1C                 call    eax
.text:00406E1E                 sub     esp, 0Ch
.text:00406E21                 mov     esi, eax
.text:00406E23
.text:00406E23 loc_406E23:                             ; CODE XREF: .text:00406E0B↑j
.text:00406E23                 test    esi, esi
.text:00406E25                 jz      short loc_406E40
.text:00406E27
.text:00406E27 loc_406E27:                             ; CODE XREF: .text:00406E5B↓j
.text:00406E27                 mov     eax, ebx
.text:00406E29                 mov     esi, [esp+14h]
.text:00406E2D                 mov     ebx, [esp+10h]
.text:00406E31                 mov     edi, [esp+18h]
.text:00406E35                 add     esp, 1Ch
.text:00406E38                 retn
.text:00406E38 ; ---------------------------------------------------------------------------
.text:00406E39                 align 10h
.text:00406E40
.text:00406E40 loc_406E40:                             ; CODE XREF: .text:00406E25↑j
.text:00406E40                 call    sub_40A140
.text:00406E45                 mov     [esp], ebx
.text:00406E48                 mov     [esp+4], edi
.text:00406E4C                 call    strcpy
.text:00406E51                 mov     [esp], ebx
.text:00406E54                 call    _win32_longpath
.text:00406E59                 mov     ebx, eax
.text:00406E5B                 jmp     short loc_406E27
.text:00406E5B ; ---------------------------------------------------------------------------
.text:00406E5D                 align 10h
.text:00406E60                 sub     esp, 1Ch
.text:00406E63                 mov     [esp+18h], edi
.text:00406E67                 mov     edi, [esp+20h]
.text:00406E6B                 mov     [esp+10h], ebx
.text:00406E6F                 mov     [esp+14h], esi
.text:00406E73                 mov     dword ptr [esp+8], 0
.text:00406E7B                 mov     dword ptr [esp+4], 0
.text:00406E83                 mov     [esp], edi
.text:00406E86                 call    GetShortPathNameA
.text:00406E8B                 sub     esp, 0Ch
.text:00406E8E                 mov     ebx, eax
.text:00406E90                 test    eax, eax
.text:00406E92                 jz      short loc_406EE0
.text:00406E94                 lea     edx, [eax+1]
.text:00406E97                 mov     [esp], edx
.text:00406E9A                 call    malloc
.text:00406E9F                 test    eax, eax
.text:00406EA1                 mov     esi, eax
.text:00406EA3                 jz      short loc_406EE0
.text:00406EA5                 mov     [esp+8], ebx
.text:00406EA9                 mov     [esp+4], eax
.text:00406EAD                 mov     [esp], edi
.text:00406EB0                 call    GetShortPathNameA
.text:00406EB5                 sub     esp, 0Ch
.text:00406EB8                 mov     edx, esi
.text:00406EBA                 test    eax, eax
.text:00406EBC                 jz      short loc_406ED2
.text:00406EBE                 mov     esi, esi
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: .text:00406EF0↓j
.text:00406EC0                 mov     ebx, [esp+10h]
.text:00406EC4                 mov     eax, edx
.text:00406EC6                 mov     esi, [esp+14h]
.text:00406ECA                 mov     edi, [esp+18h]
.text:00406ECE                 add     esp, 1Ch
.text:00406ED1                 retn
.text:00406ED2 ; ---------------------------------------------------------------------------
.text:00406ED2
.text:00406ED2 loc_406ED2:                             ; CODE XREF: .text:00406EBC↑j
.text:00406ED2                 mov     [esp], esi
.text:00406ED5                 call    free
.text:00406EDA                 lea     esi, [esi+0]
.text:00406EE0
.text:00406EE0 loc_406EE0:                             ; CODE XREF: .text:00406E92↑j
.text:00406EE0                                         ; .text:00406EA3↑j
.text:00406EE0                 call    sub_407190
.text:00406EE5                 mov     esi, eax
.text:00406EE7                 call    _errno
.text:00406EEC                 mov     [eax], esi
.text:00406EEE                 mov     edx, edi
.text:00406EF0                 jmp     short loc_406EC0
.text:00406EF0 ; ---------------------------------------------------------------------------
.text:00406EF2                 align 10h
.text:00406F00
.text:00406F00 ; =============== S U B R O U T I N E =======================================
.text:00406F00
.text:00406F00 ; Attributes: info_from_lumina
.text:00406F00
.text:00406F00 ___get_errno    proc near               ; CODE XREF: sub_407190+B↓p
.text:00406F00
.text:00406F00 arg_0           = dword ptr  4
.text:00406F00
.text:00406F00                 mov     eax, [esp+arg_0]
.text:00406F04                 cmp     eax, 53h ; 'S'
.text:00406F07                 jg      loc_407000
.text:00406F0D                 cmp     eax, 52h ; 'R'
.text:00406F10                 jge     short loc_406F62
.text:00406F12                 cmp     eax, 0Fh
.text:00406F15                 jz      short loc_406F30
.text:00406F17                 cmp     eax, 0Fh
.text:00406F1A                 jg      short loc_406F90
.text:00406F1C                 cmp     eax, 9
.text:00406F1F                 jg      short loc_406F70
.text:00406F21                 cmp     eax, 7
.text:00406F24                 jge     short loc_406F69
.text:00406F26                 cmp     eax, 3
.text:00406F29                 jg      short loc_406F4A
.text:00406F2B                 cmp     eax, 2
.text:00406F2E                 jl      short loc_406F43
.text:00406F30
.text:00406F30 loc_406F30:                             ; CODE XREF: ___get_errno+15↑j
.text:00406F30                                         ; ___get_errno+9D↓j ...
.text:00406F30                 mov     edx, 2
.text:00406F35                 lea     esi, [esi+0]
.text:00406F39                 lea     edi, [edi+0]
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: ___get_errno+48↓j
.text:00406F40                                         ; ___get_errno+59↓j ...
.text:00406F40                 mov     eax, edx
.text:00406F42                 retn
.text:00406F43 ; ---------------------------------------------------------------------------
.text:00406F43
.text:00406F43 loc_406F43:                             ; CODE XREF: ___get_errno+2E↑j
.text:00406F43                                         ; ___get_errno+78↓j ...
.text:00406F43                 mov     edx, 16h
.text:00406F48                 jmp     short loc_406F40
.text:00406F4A ; ---------------------------------------------------------------------------
.text:00406F4A
.text:00406F4A loc_406F4A:                             ; CODE XREF: ___get_errno+29↑j
.text:00406F4A                 cmp     eax, 5
.text:00406F4D                 jz      short loc_406F62
.text:00406F4F                 cmp     eax, 5
.text:00406F52                 jg      short loc_406F5B
.text:00406F54                 mov     edx, 18h
.text:00406F59                 jmp     short loc_406F40
.text:00406F5B ; ---------------------------------------------------------------------------
.text:00406F5B
.text:00406F5B loc_406F5B:                             ; CODE XREF: ___get_errno+52↑j
.text:00406F5B                                         ; ___get_errno+180↓j
.text:00406F5B                 mov     edx, 9
.text:00406F60                 jmp     short loc_406F40
.text:00406F62 ; ---------------------------------------------------------------------------
.text:00406F62
.text:00406F62 loc_406F62:                             ; CODE XREF: ___get_errno+10↑j
.text:00406F62                                         ; ___get_errno+4D↑j ...
.text:00406F62                 mov     edx, 0Dh
.text:00406F67                 jmp     short loc_406F40
.text:00406F69 ; ---------------------------------------------------------------------------
.text:00406F69
.text:00406F69 loc_406F69:                             ; CODE XREF: ___get_errno+24↑j
.text:00406F69                                         ; ___get_errno+73↓j ...
.text:00406F69                 mov     edx, 0Ch
.text:00406F6E                 jmp     short loc_406F40
.text:00406F70 ; ---------------------------------------------------------------------------
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: ___get_errno+1F↑j
.text:00406F70                 cmp     eax, 0Dh
.text:00406F73                 jg      short loc_406F69
.text:00406F75                 cmp     eax, 0Ch
.text:00406F78                 jge     short loc_406F43
.text:00406F7A                 cmp     eax, 0Ah
.text:00406F7D                 mov     edx, 7
.text:00406F82                 jz      short loc_406F40
.text:00406F84                 cmp     eax, 0Bh
.text:00406F87                 jnz     short loc_406F43
.text:00406F89
.text:00406F89 loc_406F89:                             ; CODE XREF: ___get_errno+21A↓j
.text:00406F89                 mov     edx, 8
.text:00406F8E                 jmp     short loc_406F40
.text:00406F90 ; ---------------------------------------------------------------------------
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: ___get_errno+1A↑j
.text:00406F90                 cmp     eax, 22h ; '"'
.text:00406F93                 jg      short loc_406FC4
.text:00406F95                 cmp     eax, 16h
.text:00406F98                 jge     short loc_406F62
.text:00406F9A                 cmp     eax, 12h
.text:00406F9D                 jz      short loc_406F30
.text:00406F9F                 cmp     eax, 12h
.text:00406FA2                 jg      short loc_406FB5
.text:00406FA4                 cmp     eax, 10h
.text:00406FA7                 jz      short loc_406F62
.text:00406FA9                 mov     edx, 12h
.text:00406FAE                 cmp     eax, 11h
.text:00406FB1
.text:00406FB1 loc_406FB1:                             ; CODE XREF: ___get_errno+172↓j
.text:00406FB1                                         ; ___get_errno+24C↓j ...
.text:00406FB1                 jnz     short loc_406F43
.text:00406FB3                 jmp     short loc_406F40
.text:00406FB5 ; ---------------------------------------------------------------------------
.text:00406FB5
.text:00406FB5 loc_406FB5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00406FB5                 cmp     eax, 14h
.text:00406FB8                 jle     short loc_406F62
.text:00406FBA
.text:00406FBA loc_406FBA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00406FBA                 mov     edx, 10h
.text:00406FBF                 jmp     loc_406F40
.text:00406FC4 ; ---------------------------------------------------------------------------
.text:00406FC4
.text:00406FC4 loc_406FC4:                             ; CODE XREF: ___get_errno+93↑j
.text:00406FC4                 cmp     eax, 41h ; 'A'
.text:00406FC7                 jz      short loc_406F62
.text:00406FC9                 cmp     eax, 41h ; 'A'
.text:00406FCC                 jg      short loc_406FE1
.text:00406FCE                 cmp     eax, 24h ; '$'
.text:00406FD1                 jz      short loc_406F62
.text:00406FD3                 cmp     eax, 35h ; '5'
.text:00406FD6                 jnz     loc_406F43
.text:00406FDC                 jmp     loc_406F30
.text:00406FE1 ; ---------------------------------------------------------------------------
.text:00406FE1
.text:00406FE1 loc_406FE1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00406FE1                 cmp     eax, 43h ; 'C'
.text:00406FE4                 jz      loc_406F30
.text:00406FEA                 cmp     eax, 50h ; 'P'
.text:00406FED                 jnz     loc_406F43
.text:00406FF3
.text:00406FF3 loc_406FF3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00406FF3                 mov     edx, 11h
.text:00406FF8                 jmp     loc_406F40
.text:00406FF8 ; ---------------------------------------------------------------------------
.text:00406FFD                 align 10h
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: ___get_errno+7↑j
.text:00407000                 cmp     eax, 0A1h ; '¡'
.text:00407005                 jz      loc_406F30
.text:0040700B                 cmp     eax, 0A1h ; '¡'
.text:00407010                 jg      loc_4070C0
.text:00407016                 cmp     eax, 81h
.text:0040701B                 jg      short loc_407085
.text:0040701D                 cmp     eax, 80h ; '€'
.text:00407022                 mov     edx, 0Ah
.text:00407027                 jge     loc_406F40
.text:0040702D                 cmp     eax, 6Ch ; 'l'
.text:00407030                 jz      loc_406F62
.text:00407036                 cmp     eax, 6Ch ; 'l'
.text:00407039                 jg      short loc_407057
.text:0040703B                 cmp     eax, 57h ; 'W'
.text:0040703E                 jz      loc_406F43
.text:00407044                 cmp     eax, 59h ; 'Y'
.text:00407047                 jnz     loc_406F43
.text:0040704D
.text:0040704D loc_40704D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040704D                                         ; ___get_errno+23C↓j
.text:0040704D                 mov     edx, 0Bh
.text:00407052                 jmp     loc_406F40
.text:00407057 ; ---------------------------------------------------------------------------
.text:00407057
.text:00407057 loc_407057:                             ; CODE XREF: ___get_errno+139↑j
.text:00407057                 cmp     eax, 70h ; 'p'
.text:0040705A                 mov     edx, 1Ch
.text:0040705F                 jz      loc_406F40
.text:00407065                 cmp     eax, 70h ; 'p'
.text:00407068                 jg      short loc_407077
.text:0040706A                 mov     edx, 20h ; ' '
.text:0040706F                 cmp     eax, 6Dh ; 'm'
.text:00407072                 jmp     loc_406FB1
.text:00407077 ; ---------------------------------------------------------------------------
.text:00407077
.text:00407077 loc_407077:                             ; CODE XREF: ___get_errno+168↑j
.text:00407077                 cmp     eax, 72h ; 'r'
.text:0040707A
.text:0040707A loc_40707A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040707A                 jnz     loc_406F43
.text:00407080                 jmp     loc_406F5B
.text:00407085 ; ---------------------------------------------------------------------------
.text:00407085
.text:00407085 loc_407085:                             ; CODE XREF: ___get_errno+11B↑j
.text:00407085                 cmp     eax, 84h ; '„'
.text:0040708A                 jz      loc_406F62
.text:00407090                 cmp     eax, 84h ; '„'
.text:00407095                 jg      short loc_40709E
.text:00407097                 cmp     eax, 82h ; '‚'
.text:0040709C                 jmp     short loc_40707A
.text:0040709E ; ---------------------------------------------------------------------------
.text:0040709E
.text:0040709E loc_40709E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040709E                 cmp     eax, 91h ; '‘'
.text:004070A3                 mov     edx, 29h ; ')'
.text:004070A8                 jz      loc_406F40
.text:004070AE                 cmp     eax, 9Eh ; 'ž'
.text:004070B3
.text:004070B3 loc_4070B3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004070B3                 jnz     loc_406F43
.text:004070B9                 jmp     loc_406F62
.text:004070B9 ; ---------------------------------------------------------------------------
.text:004070BE                 align 10h
.text:004070C0
.text:004070C0 loc_4070C0:                             ; CODE XREF: ___get_errno+110↑j
.text:004070C0                 cmp     eax, 0CEh ; 'Î'
.text:004070C5                 jz      loc_406F30
.text:004070CB                 cmp     eax, 0CEh ; 'Î'
.text:004070D0                 jg      short loc_407120
.text:004070D2                 cmp     eax, 0AAh ; 'ª'
.text:004070D7                 jz      loc_406FBA
.text:004070DD                 cmp     eax, 0AAh ; 'ª'
.text:004070E2                 jg      short loc_4070F6
.text:004070E4                 cmp     eax, 0A4h ; '¤'
.text:004070E9                 jz      loc_40704D
.text:004070EF                 cmp     eax, 0A7h ; '§'
.text:004070F4                 jmp     short loc_4070B3
.text:004070F6 ; ---------------------------------------------------------------------------
.text:004070F6
.text:004070F6 loc_4070F6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004070F6                 cmp     eax, 0B7h ; '·'
.text:004070FB                 jz      loc_406FF3
.text:00407101                 cmp     eax, 0B7h ; '·'
.text:00407106                 jl      loc_406F43
.text:0040710C                 sub     eax, 0BCh ; '¼'
.text:00407111                 cmp     eax, 0Eh
.text:00407114                 ja      loc_406F43
.text:0040711A                 jmp     loc_406F89
.text:0040711A ; ---------------------------------------------------------------------------
.text:0040711F                 align 10h
.text:00407120
.text:00407120 loc_407120:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407120                 cmp     eax, 46Bh
.text:00407125                 mov     edx, 24h ; '$'
.text:0040712A                 jz      loc_406F40
.text:00407130                 cmp     eax, 46Bh
.text:00407135                 jg      short loc_407151
.text:00407137                 cmp     eax, 0D7h ; '×'
.text:0040713C                 jz      loc_40704D
.text:00407142                 mov     edx, 5
.text:00407147                 cmp     eax, 45Dh
.text:0040714C                 jmp     loc_406FB1
.text:00407151 ; ---------------------------------------------------------------------------
.text:00407151
.text:00407151 loc_407151:                             ; CODE XREF: ___get_errno+235↑j
.text:00407151                 cmp     eax, 4D5h
.text:00407156                 mov     edx, 4
.text:0040715B                 jz      loc_406F40
.text:00407161                 cmp     eax, 4D5h
.text:00407166                 jg      short loc_407177
.text:00407168                 mov     edx, 13h
.text:0040716D                 cmp     eax, 4B0h
.text:00407172                 jmp     loc_406FB1
.text:00407177 ; ---------------------------------------------------------------------------
.text:00407177
.text:00407177 loc_407177:                             ; CODE XREF: ___get_errno+266↑j
.text:00407177                 cmp     eax, 718h
.text:0040717C                 jnz     loc_406F43
.text:00407182                 jmp     loc_406F69
.text:00407182 ___get_errno    endp
.text:00407182
.text:00407182 ; ---------------------------------------------------------------------------
.text:00407187                 align 10h
.text:00407190
.text:00407190 ; =============== S U B R O U T I N E =======================================
.text:00407190
.text:00407190
.text:00407190 sub_407190      proc near               ; CODE XREF: sub_405F00:loc_40605F↑p
.text:00407190                                         ; sub_406C00:loc_406C68↑p ...
.text:00407190
.text:00407190 var_C           = dword ptr -0Ch
.text:00407190
.text:00407190                 sub     esp, 0Ch
.text:00407193                 call    GetLastError
.text:00407198                 mov     [esp+0Ch+var_C], eax
.text:0040719B                 call    ___get_errno
.text:004071A0                 add     esp, 0Ch
.text:004071A3                 retn
.text:004071A3 sub_407190      endp
.text:004071A3
.text:004071A3 ; ---------------------------------------------------------------------------
.text:004071A4                 align 10h
.text:004071B0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004071B0                                         ; DATA XREF: .data:off_4100A4↓o
.text:004071C4 ; const CHAR LibFileName[]
.text:004071C4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4071F0+11↓o
.text:004071C4                                         ; sub_407360+C↓o ...
.text:004071D1 ; const CHAR ProcName[]
.text:004071D1 ProcName        db 'GetFileAttributesExA',0
.text:004071D1                                         ; DATA XREF: sub_4071F0+28↓o
.text:004071E6                 align 10h
.text:004071F0
.text:004071F0 ; =============== S U B R O U T I N E =======================================
.text:004071F0
.text:004071F0
.text:004071F0 ; int __cdecl sub_4071F0(LPCSTR lpFileName, int)
.text:004071F0 sub_4071F0      proc near               ; CODE XREF: .text:00408394↓p
.text:004071F0                                         ; sub_408790+37↓p
.text:004071F0
.text:004071F0 lpModuleName    = dword ptr -18Ch
.text:004071F0 lpProcName      = dword ptr -188h
.text:004071F0 var_184         = dword ptr -184h
.text:004071F0 var_170         = dword ptr -170h
.text:004071F0 var_164         = dword ptr -164h
.text:004071F0 hModule         = dword ptr -160h
.text:004071F0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004071F0 lpFileName      = dword ptr  4
.text:004071F0 arg_4           = dword ptr  8
.text:004071F0
.text:004071F0                 push    ebp
.text:004071F1                 push    edi
.text:004071F2                 push    esi
.text:004071F3                 push    ebx
.text:004071F4                 sub     esp, 17Ch
.text:004071FA                 mov     ebx, [esp+18Ch+arg_4]
.text:00407201                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00407208                 call    GetModuleHandleA
.text:0040720D                 sub     esp, 4
.text:00407210                 mov     [esp+18Ch+hModule], eax
.text:00407214                 mov     edx, [esp+18Ch+hModule]
.text:00407218                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00407220                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00407223                 call    GetProcAddress
.text:00407228                 sub     esp, 8
.text:0040722B                 mov     ebp, eax
.text:0040722D                 mov     eax, [esp+18Ch+lpFileName]
.text:00407234                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00407237                 call    GetFileAttributesA
.text:0040723C                 sub     esp, 4
.text:0040723F                 mov     [esp+18Ch+var_164], eax
.text:00407243                 xor     eax, eax
.text:00407245                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040724A                 jz      short loc_4072A1
.text:0040724C                 cld
.text:0040724D                 mov     ecx, 50h ; 'P'
.text:00407252                 lea     esi, [esp+18Ch+FindFileData]
.text:00407256                 mov     edi, esi
.text:00407258                 test    ebp, ebp
.text:0040725A                 rep stosd
.text:0040725C                 mov     [esp+18Ch+var_170], 0
.text:00407264                 jz      short loc_407285
.text:00407266                 mov     [esp+18Ch+var_184], ebx
.text:0040726A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00407271                 mov     [esp+18Ch+lpProcName], 0
.text:00407279                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040727C                 call    ebp
.text:0040727E                 sub     esp, 0Ch
.text:00407281                 mov     [esp+18Ch+var_170], eax
.text:00407285
.text:00407285 loc_407285:                             ; CODE XREF: sub_4071F0+74↑j
.text:00407285                 mov     eax, [esp+18Ch+var_170]
.text:00407289                 test    eax, eax
.text:0040728B                 jz      short loc_4072B0
.text:0040728D
.text:0040728D loc_40728D:                             ; CODE XREF: sub_4071F0+131↓j
.text:0040728D                                         ; sub_4071F0+14B↓j
.text:0040728D                 mov     ebx, [esp+18Ch+hModule]
.text:00407291                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00407294                 call    FreeLibrary
.text:00407299                 sub     esp, 4
.text:0040729C                 mov     eax, 1
.text:004072A1
.text:004072A1 loc_4072A1:                             ; CODE XREF: sub_4071F0+5A↑j
.text:004072A1                 add     esp, 17Ch
.text:004072A7                 pop     ebx
.text:004072A8                 pop     esi
.text:004072A9                 pop     edi
.text:004072AA                 pop     ebp
.text:004072AB                 retn
.text:004072AB ; ---------------------------------------------------------------------------
.text:004072AC                 align 10h
.text:004072B0
.text:004072B0 loc_4072B0:                             ; CODE XREF: sub_4071F0+9B↑j
.text:004072B0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004072B4                 mov     edx, [esp+18Ch+lpFileName]
.text:004072BB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004072BE                 call    FindFirstFileA
.text:004072C3                 sub     esp, 8
.text:004072C6                 xor     ecx, ecx
.text:004072C8                 cmp     eax, 0FFFFFFFFh
.text:004072CB                 setnz   cl
.text:004072CE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004072D2                 mov     [ebx], edi
.text:004072D4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004072D8                 mov     [esp+18Ch+var_170], ecx
.text:004072DC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004072E0                 mov     [ebx+8], esi
.text:004072E3                 mov     [ebx+4], ecx
.text:004072E6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004072EA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004072EE                 mov     [ebx+0Ch], ebp
.text:004072F1                 mov     [ebx+10h], edi
.text:004072F4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004072F8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004072FC                 mov     [ebx+18h], esi
.text:004072FF                 mov     [ebx+14h], ecx
.text:00407302                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00407306                 mov     [ebx+1Ch], ebp
.text:00407309                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040730D                 mov     [ebx+20h], edi
.text:00407310                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00407313                 call    FindClose
.text:00407318                 sub     esp, 4
.text:0040731B                 mov     esi, [esp+18Ch+var_170]
.text:0040731F                 test    esi, esi
.text:00407321                 jnz     loc_40728D
.text:00407327                 cld
.text:00407328                 mov     eax, [esp+18Ch+var_170]
.text:0040732C                 mov     ecx, 9
.text:00407331                 mov     edi, ebx
.text:00407333                 rep stosd
.text:00407335                 mov     ebp, [esp+18Ch+var_164]
.text:00407339                 mov     [ebx], ebp
.text:0040733B                 jmp     loc_40728D
.text:0040733B sub_4071F0      endp
.text:0040733B
.text:0040733B ; ---------------------------------------------------------------------------
.text:00407340 ; const CHAR aFindfirstfilee[]
.text:00407340 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407360+23↓o
.text:00407351 ; const char asc_407351[]
.text:00407351 asc_407351      db '\*',0               ; DATA XREF: sub_407360:loc_4073ED↓o
.text:00407354                 align 10h
.text:00407360
.text:00407360 ; =============== S U B R O U T I N E =======================================
.text:00407360
.text:00407360
.text:00407360 ; int __cdecl sub_407360(char *Str)
.text:00407360 sub_407360      proc near               ; CODE XREF: .text:00408493↓p
.text:00407360                                         ; sub_408790+3FA↓p ...
.text:00407360
.text:00407360 lpLibFileName   = dword ptr -18Ch
.text:00407360 lpProcName      = dword ptr -188h
.text:00407360 var_184         = dword ptr -184h
.text:00407360 var_180         = dword ptr -180h
.text:00407360 var_17C         = dword ptr -17Ch
.text:00407360 var_178         = dword ptr -178h
.text:00407360 var_164         = dword ptr -164h
.text:00407360 hModule         = dword ptr -160h
.text:00407360 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407360 Str             = dword ptr  4
.text:00407360
.text:00407360                 push    ebp
.text:00407361                 push    edi
.text:00407362                 xor     edi, edi
.text:00407364                 push    esi
.text:00407365                 push    ebx
.text:00407366                 sub     esp, 17Ch
.text:0040736C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00407373                 call    LoadLibraryA
.text:00407378                 sub     esp, 4
.text:0040737B                 mov     [esp+18Ch+hModule], eax
.text:0040737F                 mov     ecx, [esp+18Ch+hModule]
.text:00407383                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040738B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040738E                 call    GetProcAddress
.text:00407393                 sub     esp, 8
.text:00407396                 mov     edx, [esp+18Ch+Str]
.text:0040739D                 mov     [esp+18Ch+var_164], eax
.text:004073A1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:004073A4                 call    strlen
.text:004073A9                 lea     edx, [eax+5]
.text:004073AC                 mov     ebx, eax
.text:004073AE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:004073B1                 call    malloc
.text:004073B6                 mov     esi, eax
.text:004073B8                 test    esi, esi
.text:004073BA                 mov     eax, 1
.text:004073BF                 jz      loc_40749D
.text:004073C5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004073C8                 mov     ebp, [esp+18Ch+Str]
.text:004073CF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004073D3                 call    strcpy
.text:004073D8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004073DD                 cmp     al, 2Fh ; '/'
.text:004073DF                 jz      loc_4074CB
.text:004073E5                 cmp     al, 5Ch ; '\'
.text:004073E7                 jz      loc_4074CB
.text:004073ED
.text:004073ED loc_4073ED:                             ; CODE XREF: sub_407360+170↓j
.text:004073ED                 mov     [esp+18Ch+lpProcName], offset asc_407351 ; "\\*"
.text:004073F5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004073F8                 call    strcat
.text:004073FD                 mov     eax, [esp+18Ch+var_164]
.text:00407401                 test    eax, eax
.text:00407403                 jz      loc_4074C5
.text:00407409                 mov     [esp+18Ch+var_178], 0
.text:00407411                 lea     ebp, [esp+18Ch+FindFileData]
.text:00407415                 mov     [esp+18Ch+var_17C], 0
.text:0040741D                 mov     [esp+18Ch+var_180], 1
.text:00407425                 mov     [esp+18Ch+var_184], ebp
.text:00407429                 mov     [esp+18Ch+lpProcName], 0
.text:00407431                 mov     [esp+18Ch+lpLibFileName], esi
.text:00407434                 call    [esp+18Ch+var_164]
.text:00407438                 sub     esp, 18h
.text:0040743B                 mov     ebx, eax
.text:0040743D                 cmp     eax, 0FFFFFFFFh
.text:00407440                 jz      short loc_4074A8
.text:00407442                 lea     esi, [esi+0]
.text:00407449                 lea     edi, [edi+0]
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_407360+109↓j
.text:00407450                                         ; sub_407360+161↓j
.text:00407450                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00407455                 jz      short loc_407458
.text:00407457                 inc     edi
.text:00407458
.text:00407458 loc_407458:                             ; CODE XREF: sub_407360+F5↑j
.text:00407458                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040745C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040745F                 call    FindNextFileA
.text:00407464                 sub     esp, 8
.text:00407467                 test    eax, eax
.text:00407469                 jnz     short loc_407450
.text:0040746B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040746E                 call    FindClose
.text:00407473                 sub     esp, 4
.text:00407476                 mov     esi, [esp+18Ch+hModule]
.text:0040747A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040747D                 call    FreeLibrary
.text:00407482                 sub     esp, 4
.text:00407485                 mov     ebx, [esp+18Ch+Str]
.text:0040748C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040748F                 call    sub_40AA20
.text:00407494                 test    eax, eax
.text:00407496                 jz      short loc_40749B
.text:00407498                 add     edi, 2
.text:0040749B
.text:0040749B loc_40749B:                             ; CODE XREF: sub_407360+136↑j
.text:0040749B                 mov     eax, edi
.text:0040749D
.text:0040749D loc_40749D:                             ; CODE XREF: sub_407360+5F↑j
.text:0040749D                                         ; sub_407360+163↓j
.text:0040749D                 add     esp, 17Ch
.text:004074A3                 pop     ebx
.text:004074A4                 pop     esi
.text:004074A5                 pop     edi
.text:004074A6                 pop     ebp
.text:004074A7                 retn
.text:004074A8 ; ---------------------------------------------------------------------------
.text:004074A8
.text:004074A8 loc_4074A8:                             ; CODE XREF: sub_407360+E0↑j
.text:004074A8                                         ; sub_407360+169↓j
.text:004074A8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004074AC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:004074AF                 call    FindFirstFileA
.text:004074B4                 mov     ebx, eax
.text:004074B6                 sub     esp, 8
.text:004074B9                 cmp     ebx, 0FFFFFFFFh
.text:004074BC                 mov     eax, 2
.text:004074C1                 jnz     short loc_407450
.text:004074C3                 jmp     short loc_40749D
.text:004074C5 ; ---------------------------------------------------------------------------
.text:004074C5
.text:004074C5 loc_4074C5:                             ; CODE XREF: sub_407360+A3↑j
.text:004074C5                 lea     ebp, [esp+18Ch+FindFileData]
.text:004074C9                 jmp     short loc_4074A8
.text:004074CB ; ---------------------------------------------------------------------------
.text:004074CB
.text:004074CB loc_4074CB:                             ; CODE XREF: sub_407360+7F↑j
.text:004074CB                                         ; sub_407360+87↑j
.text:004074CB                 mov     byte ptr [ebx+esi-1], 0
.text:004074D0                 jmp     loc_4073ED
.text:004074D0 sub_407360      endp
.text:004074D0
.text:004074D0 ; ---------------------------------------------------------------------------
.text:004074D5                 align 10h
.text:004074E0
.text:004074E0 ; =============== S U B R O U T I N E =======================================
.text:004074E0
.text:004074E0
.text:004074E0 ; int __cdecl sub_4074E0(HANDLE hNamedPipe, int)
.text:004074E0 sub_4074E0      proc near               ; CODE XREF: sub_406160+2AF7↓p
.text:004074E0                                         ; sub_40C460+52↓j
.text:004074E0
.text:004074E0 hFile           = dword ptr -0ECh
.text:004074E0 lpFileInformation= dword ptr -0E8h
.text:004074E0 nBufferSize     = dword ptr -0E4h
.text:004074E0 lpBytesRead     = dword ptr -0E0h
.text:004074E0 lpTotalBytesAvail= dword ptr -0DCh
.text:004074E0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:004074E0 var_C4          = dword ptr -0C4h
.text:004074E0 var_C0          = dword ptr -0C0h
.text:004074E0 var_BC          = dword ptr -0BCh
.text:004074E0 var_B8          = dword ptr -0B8h
.text:004074E0 var_B4          = dword ptr -0B4h
.text:004074E0 var_B0          = dword ptr -0B0h
.text:004074E0 var_AC          = dword ptr -0ACh
.text:004074E0 var_A8          = dword ptr -0A8h
.text:004074E0 TotalBytesAvail = dword ptr -0A0h
.text:004074E0 var_9C          = dword ptr -9Ch
.text:004074E0 var_98          = dword ptr -98h
.text:004074E0 var_94          = dword ptr -94h
.text:004074E0 var_90          = dword ptr -90h
.text:004074E0 var_8C          = dword ptr -8Ch
.text:004074E0 var_88          = dword ptr -88h
.text:004074E0 var_84          = dword ptr -84h
.text:004074E0 var_80          = dword ptr -80h
.text:004074E0 var_7C          = dword ptr -7Ch
.text:004074E0 var_78          = dword ptr -78h
.text:004074E0 var_74          = dword ptr -74h
.text:004074E0 var_70          = dword ptr -70h
.text:004074E0 var_6C          = dword ptr -6Ch
.text:004074E0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:004074E0 hNamedPipe      = dword ptr  4
.text:004074E0 arg_4           = dword ptr  8
.text:004074E0
.text:004074E0                 push    ebp
.text:004074E1                 mov     eax, 0FFFFFFFFh
.text:004074E6                 push    edi
.text:004074E7                 push    esi
.text:004074E8                 push    ebx
.text:004074E9                 sub     esp, 0DCh
.text:004074EF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004074F6                 mov     ebp, [esp+0ECh+arg_4]
.text:004074FD                 cmp     esi, 0FFFFFFFFh
.text:00407500                 jz      loc_407881
.text:00407506                 cld
.text:00407507                 xor     eax, eax
.text:00407509                 lea     ebx, [esp+0ECh+FileInformation]
.text:00407510                 mov     ecx, 0Dh
.text:00407515                 mov     edi, ebx
.text:00407517                 rep stosd
.text:00407519                 mov     dword ptr [ebp+18h], 1
.text:00407520                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407523                 call    GetFileType
.text:00407528                 sub     esp, 4
.text:0040752B                 xor     edx, edx
.text:0040752D                 cmp     eax, 2
.text:00407530                 jz      loc_407960
.text:00407536                 cmp     eax, 3
.text:00407539                 jz      loc_407950
.text:0040753F
.text:0040753F loc_40753F:                             ; CODE XREF: sub_4074E0+475↓j
.text:0040753F                                         ; sub_4074E0+485↓j
.text:0040753F                 or      [ebp+0], edx
.text:00407542                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00407546                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407549                 call    GetFileInformationByHandle
.text:0040754E                 sub     esp, 8
.text:00407551                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00407558                 test    ecx, ecx
.text:0040755A                 jnz     short loc_407590
.text:0040755C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407563                 test    edx, edx
.text:00407565                 jnz     short loc_407590
.text:00407567                 mov     edx, [ebp+0]
.text:0040756A                 and     edx, 0F000h
.text:00407570                 cmp     edx, 1000h
.text:00407576                 jz      loc_4078E6
.text:0040757C
.text:0040757C loc_40757C:                             ; CODE XREF: sub_4074E0+459↓j
.text:0040757C                                         ; sub_4074E0+465↓j
.text:0040757C                 test    ecx, ecx
.text:0040757E                 jnz     short loc_407590
.text:00407580                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407587                 test    edx, edx
.text:00407589                 jz      loc_4078C4
.text:0040758F                 nop
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_4074E0+7A↑j
.text:00407590                                         ; sub_4074E0+85↑j ...
.text:00407590                 cld
.text:00407591                 mov     esi, ebx
.text:00407593                 mov     dword ptr [ebp+14h], 0
.text:0040759A                 lea     edi, [esp+0ECh+var_9C]
.text:0040759E                 mov     ecx, 0Dh
.text:004075A3                 rep movsd
.text:004075A5                 xor     ebx, ebx
.text:004075A7                 xor     edi, edi
.text:004075A9                 mov     edx, [esp+0ECh+var_6C]
.text:004075B0                 mov     esi, [esp+0ECh+var_70]
.text:004075B4                 or      edx, ebx
.text:004075B6                 mov     ebx, [esp+0ECh+var_9C]
.text:004075BA                 mov     [ebp+8], edx
.text:004075BD                 or      edi, esi
.text:004075BF                 xor     edx, edx
.text:004075C1                 mov     [ebp+0Ch], edi
.text:004075C4                 test    bl, 10h
.text:004075C7                 mov     esi, [esp+0ECh+var_80]
.text:004075CB                 setz    dl
.text:004075CE                 mov     [ebp+10h], esi
.text:004075D1                 dec     edx
.text:004075D2                 and     edx, 0FFFFC000h
.text:004075D8                 add     edx, 8000h
.text:004075DE                 or      edx, 124h
.text:004075E4                 test    bl, 1
.text:004075E7                 movzx   eax, dx
.text:004075EA                 jnz     short loc_4075F1
.text:004075EC                 or      eax, 92h
.text:004075F1
.text:004075F1 loc_4075F1:                             ; CODE XREF: sub_4074E0+10A↑j
.text:004075F1                 or      [ebp+0], eax
.text:004075F4                 xor     edx, edx
.text:004075F6                 mov     ebx, [esp+0ECh+var_7C]
.text:004075FA                 mov     ecx, [esp+0ECh+var_78]
.text:004075FE                 mov     eax, edx
.text:00407600                 xor     esi, esi
.text:00407602                 mov     edx, [esp+0ECh+var_8C]
.text:00407606                 mov     edi, ebx
.text:00407608                 or      eax, edi
.text:0040760A                 mov     [esp+0ECh+var_A8], eax
.text:0040760E                 mov     ebx, ecx
.text:00407610                 mov     edi, [esp+0ECh+var_74]
.text:00407614                 or      ebx, esi
.text:00407616                 mov     esi, [esp+0ECh+var_A8]
.text:0040761A                 mov     [esp+0ECh+var_AC], ebx
.text:0040761E                 xor     ebx, ebx
.text:00407620                 mov     ecx, [esp+0ECh+var_AC]
.text:00407624                 mov     [ebp+34h], esi
.text:00407627                 mov     esi, [esp+0ECh+var_90]
.text:0040762B                 mov     [ebp+18h], edi
.text:0040762E                 xor     edi, edi
.text:00407630                 or      esi, ebx
.text:00407632                 mov     [ebp+30h], ecx
.text:00407635                 or      edi, edx
.text:00407637                 mov     edx, esi
.text:00407639                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00407641                 sub     edx, 0D53E8000h
.text:00407647                 mov     ebx, edi
.text:00407649                 sbb     ebx, 19DB1DEh
.text:0040764F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00407653                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040765B                 mov     [esp+0ECh+hFile], edx
.text:0040765E                 call    sub_40EA70
.text:00407663                 mov     ecx, eax
.text:00407665                 shr     eax, 1Fh
.text:00407668                 dec     eax
.text:00407669                 and     ecx, eax
.text:0040766B                 mov     [ebp+38h], ecx
.text:0040766E                 mov     [esp+0ECh+hFile], esi
.text:00407671                 mov     [esp+0ECh+lpFileInformation], edi
.text:00407675                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040767D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00407685                 call    sub_40EB90
.text:0040768A                 lea     ebx, [eax+eax*4]
.text:0040768D                 xor     ecx, ecx
.text:0040768F                 lea     esi, [ebx+ebx*4]
.text:00407692                 shl     esi, 2
.text:00407695                 mov     edi, esi
.text:00407697                 shr     edi, 1Fh
.text:0040769A                 dec     edi
.text:0040769B                 and     edi, esi
.text:0040769D                 mov     [ebp+3Ch], edi
.text:004076A0                 mov     esi, [esp+0ECh+var_98]
.text:004076A4                 xor     edi, edi
.text:004076A6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004076AE                 mov     edx, [esp+0ECh+var_94]
.text:004076B2                 mov     [esp+0ECh+lpBytesRead], 0
.text:004076BA                 or      esi, ecx
.text:004076BC                 or      edi, edx
.text:004076BE                 mov     edx, esi
.text:004076C0                 mov     ecx, edi
.text:004076C2                 sub     edx, 0D53E8000h
.text:004076C8                 sbb     ecx, 19DB1DEh
.text:004076CE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004076D2                 mov     [esp+0ECh+hFile], edx
.text:004076D5                 call    sub_40EA70
.text:004076DA                 mov     ebx, eax
.text:004076DC                 shr     eax, 1Fh
.text:004076DF                 dec     eax
.text:004076E0                 and     ebx, eax
.text:004076E2                 mov     [ebp+48h], ebx
.text:004076E5                 xor     ebx, ebx
.text:004076E7                 mov     [esp+0ECh+hFile], esi
.text:004076EA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004076EE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004076F6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004076FE                 call    sub_40EB90
.text:00407703                 lea     ecx, [eax+eax*4]
.text:00407706                 lea     esi, [ecx+ecx*4]
.text:00407709                 shl     esi, 2
.text:0040770C                 mov     edi, esi
.text:0040770E                 shr     edi, 1Fh
.text:00407711                 dec     edi
.text:00407712                 and     edi, esi
.text:00407714                 mov     [ebp+4Ch], edi
.text:00407717                 mov     esi, [esp+0ECh+var_88]
.text:0040771B                 xor     edi, edi
.text:0040771D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00407725                 mov     edx, [esp+0ECh+var_84]
.text:00407729                 mov     [esp+0ECh+lpBytesRead], 0
.text:00407731                 or      esi, ebx
.text:00407733                 or      edi, edx
.text:00407735                 mov     edx, esi
.text:00407737                 mov     ebx, edi
.text:00407739                 sub     edx, 0D53E8000h
.text:0040773F                 sbb     ebx, 19DB1DEh
.text:00407745                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00407749                 mov     [esp+0ECh+hFile], edx
.text:0040774C                 call    sub_40EA70
.text:00407751                 mov     ecx, eax
.text:00407753                 shr     eax, 1Fh
.text:00407756                 dec     eax
.text:00407757                 and     ecx, eax
.text:00407759                 mov     [ebp+40h], ecx
.text:0040775C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00407760                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00407768                 mov     [esp+0ECh+lpBytesRead], 0
.text:00407770                 mov     [esp+0ECh+hFile], esi
.text:00407773                 call    sub_40EB90
.text:00407778                 mov     dword ptr [ebp+50h], 200h
.text:0040777F                 lea     ebx, [eax+eax*4]
.text:00407782                 mov     edi, [esp+0ECh+var_A8]
.text:00407786                 lea     edx, [ebx+ebx*4]
.text:00407789                 mov     eax, [esp+0ECh+var_AC]
.text:0040778D                 shl     edx, 2
.text:00407790                 mov     ecx, edx
.text:00407792                 shr     ecx, 1Fh
.text:00407795                 dec     ecx
.text:00407796                 and     ecx, edx
.text:00407798                 test    edi, edi
.text:0040779A                 mov     edx, [esp+0ECh+var_A8]
.text:0040779E                 mov     [ebp+44h], ecx
.text:004077A1                 js      loc_4078B7
.text:004077A7
.text:004077A7 loc_4077A7:                             ; CODE XREF: sub_4074E0+3DF↓j
.text:004077A7                 mov     edi, [esp+0ECh+var_AC]
.text:004077AB                 xor     esi, esi
.text:004077AD                 mov     ecx, eax
.text:004077AF                 shrd    ecx, edx, 9
.text:004077B3                 mov     ebx, edx
.text:004077B5                 mov     eax, esi
.text:004077B7                 and     edi, 1FFh
.text:004077BD                 sar     ebx, 9
.text:004077C0                 or      eax, edi
.text:004077C2                 jz      short loc_4077CA
.text:004077C4                 add     ecx, 1
.text:004077C7                 adc     ebx, 0
.text:004077CA
.text:004077CA loc_4077CA:                             ; CODE XREF: sub_4074E0+2E2↑j
.text:004077CA                 mov     [ebp+5Ch], ebx
.text:004077CD                 mov     esi, dword_4100A0
.text:004077D3                 xor     edi, edi
.text:004077D5                 mov     [ebp+58h], ecx
.text:004077D8                 mov     ebx, dword_4100A0
.text:004077DE                 mov     ecx, [esp+0ECh+var_A8]
.text:004077E2                 mov     edx, [esp+0ECh+var_AC]
.text:004077E6                 mov     [ebp+50h], ebx
.text:004077E9                 shr     ebx, 9
.text:004077EC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004077F0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004077F4                 mov     [esp+0ECh+nBufferSize], esi
.text:004077F8                 mov     [esp+0ECh+hFile], edx
.text:004077FB                 call    sub_40EA70
.text:00407800                 mov     [esp+0ECh+lpBytesRead], edi
.text:00407804                 mov     ecx, [esp+0ECh+var_AC]
.text:00407808                 mov     edi, [esp+0ECh+var_A8]
.text:0040780C                 mov     [esp+0ECh+var_BC], ebx
.text:00407810                 mov     [esp+0ECh+var_B4], eax
.text:00407814                 mov     [esp+0ECh+var_B0], edx
.text:00407818                 mov     [esp+0ECh+var_B8], 0
.text:00407820                 mov     [esp+0ECh+nBufferSize], esi
.text:00407824                 mov     [esp+0ECh+hFile], ecx
.text:00407827                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040782B                 call    sub_40EB90
.text:00407830                 mov     ebx, edx
.text:00407832                 or      ebx, eax
.text:00407834                 jz      short loc_407890
.text:00407836                 mov     edi, [esp+0ECh+var_B4]
.text:0040783A                 mov     esi, [esp+0ECh+var_B0]
.text:0040783E                 mov     eax, [esp+0ECh+var_BC]
.text:00407842                 mov     [esp+0ECh+var_C4], edi
.text:00407846                 mov     ecx, [esp+0ECh+var_B8]
.text:0040784A                 add     [esp+0ECh+var_C4], 1
.text:0040784F                 mov     [esp+0ECh+var_C0], esi
.text:00407853                 adc     [esp+0ECh+var_C0], 0
.text:00407858                 mul     [esp+0ECh+var_C4]
.text:0040785C                 mov     edi, [esp+0ECh+var_C0]
.text:00407860                 mov     ebx, edx
.text:00407862                 mov     edx, [esp+0ECh+var_C4]
.text:00407866                 mov     esi, eax
.text:00407868                 mov     eax, ebx
.text:0040786A                 imul    ecx, edx
.text:0040786D                 mov     edx, [esp+0ECh+var_BC]
.text:00407871                 imul    edx, edi
.text:00407874                 add     eax, ecx
.text:00407876                 lea     edi, [edx+eax]
.text:00407879
.text:00407879 loc_407879:                             ; CODE XREF: sub_4074E0+3D5↓j
.text:00407879                 mov     [ebp+58h], esi
.text:0040787C                 xor     eax, eax
.text:0040787E                 mov     [ebp+5Ch], edi
.text:00407881
.text:00407881 loc_407881:                             ; CODE XREF: sub_4074E0+20↑j
.text:00407881                 add     esp, 0DCh
.text:00407887                 pop     ebx
.text:00407888                 pop     esi
.text:00407889                 pop     edi
.text:0040788A                 pop     ebp
.text:0040788B                 retn
.text:0040788B ; ---------------------------------------------------------------------------
.text:0040788C                 align 10h
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_4074E0+354↑j
.text:00407890                 mov     eax, [esp+0ECh+var_B4]
.text:00407894                 mov     edi, [esp+0ECh+var_B8]
.text:00407898                 mov     ebx, [esp+0ECh+var_B4]
.text:0040789C                 mul     [esp+0ECh+var_BC]
.text:004078A0                 mov     ecx, [esp+0ECh+var_BC]
.text:004078A4                 imul    ebx, edi
.text:004078A7                 mov     esi, eax
.text:004078A9                 mov     eax, [esp+0ECh+var_B0]
.text:004078AD                 add     edx, ebx
.text:004078AF                 imul    ecx, eax
.text:004078B2                 lea     edi, [ecx+edx]
.text:004078B5                 jmp     short loc_407879
.text:004078B7 ; ---------------------------------------------------------------------------
.text:004078B7
.text:004078B7 loc_4078B7:                             ; CODE XREF: sub_4074E0+2C1↑j
.text:004078B7                 add     eax, 1FFh
.text:004078BC                 adc     edx, 0
.text:004078BF                 jmp     loc_4077A7
.text:004078C4 ; ---------------------------------------------------------------------------
.text:004078C4
.text:004078C4 loc_4078C4:                             ; CODE XREF: sub_4074E0+A9↑j
.text:004078C4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004078C7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004078CE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004078D2                 call    GetFileSize
.text:004078D7                 sub     esp, 8
.text:004078DA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004078E1                 jmp     loc_407590
.text:004078E6 ; ---------------------------------------------------------------------------
.text:004078E6
.text:004078E6 loc_4078E6:                             ; CODE XREF: sub_4074E0+96↑j
.text:004078E6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004078EE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004078F2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004078FA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004078FE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00407906                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040790E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00407916                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00407919                 call    PeekNamedPipe
.text:0040791E                 sub     esp, 18h
.text:00407921                 test    eax, eax
.text:00407923                 jz      short loc_40793E
.text:00407925                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00407929                 xor     eax, eax
.text:0040792B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00407932                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00407939                 jmp     loc_40757C
.text:0040793E ; ---------------------------------------------------------------------------
.text:0040793E
.text:0040793E loc_40793E:                             ; CODE XREF: sub_4074E0+443↑j
.text:0040793E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00407945                 jmp     loc_40757C
.text:00407945 ; ---------------------------------------------------------------------------
.text:0040794A                 align 10h
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: sub_4074E0+59↑j
.text:00407950                 mov     edx, 1000h
.text:00407955                 jmp     loc_40753F
.text:00407955 ; ---------------------------------------------------------------------------
.text:0040795A                 align 10h
.text:00407960
.text:00407960 loc_407960:                             ; CODE XREF: sub_4074E0+50↑j
.text:00407960                 mov     edx, 2000h
.text:00407965                 jmp     loc_40753F
.text:00407965 sub_4074E0      endp
.text:00407965
.text:00407965 ; ---------------------------------------------------------------------------
.text:0040796A aLnk_0          db '.lnk',0             ; DATA XREF: sub_4079B0+E0↓o
.text:0040796A                                         ; .text:0040805A↓o ...
.text:0040796F ; const CHAR aKernel32[]
.text:0040796F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4079B0+12D↓o
.text:0040796F                                         ; .text:0040870B↓o
.text:00407978 ; const CHAR aGetcompressedf[]
.text:00407978 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00407978                                         ; DATA XREF: sub_4079B0+13E↓o
.text:00407978                                         ; .text:0040871C↓o
.text:0040798F ; const CHAR aGetbinarytypea[]
.text:0040798F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4079B0+333↓o
.text:0040798F                                         ; .text:004080B6↓o ...
.text:0040799E ; const char aPathext[]
.text:0040799E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4079B0:loc_407D97↓o
.text:0040799E                                         ; .text:loc_408160↓o ...
.text:004079A6                 align 10h
.text:004079B0
.text:004079B0 ; =============== S U B R O U T I N E =======================================
.text:004079B0
.text:004079B0
.text:004079B0 ; int __cdecl sub_4079B0(char *String1, int)
.text:004079B0 sub_4079B0      proc near               ; CODE XREF: sub_408790+3CD↓p
.text:004079B0                                         ; sub_406160+2B15↓p
.text:004079B0
.text:004079B0 Str             = dword ptr -6Ch
.text:004079B0 lpProcName      = dword ptr -68h
.text:004079B0 var_64          = dword ptr -64h
.text:004079B0 var_60          = dword ptr -60h
.text:004079B0 var_5C          = dword ptr -5Ch
.text:004079B0 var_4C          = dword ptr -4Ch
.text:004079B0 var_48          = dword ptr -48h
.text:004079B0 var_44          = dword ptr -44h
.text:004079B0 var_40          = dword ptr -40h
.text:004079B0 var_3C          = dword ptr -3Ch
.text:004079B0 var_38          = dword ptr -38h
.text:004079B0 lpRootPathName  = dword ptr -30h
.text:004079B0 var_2C          = byte ptr -2Ch
.text:004079B0 var_28          = dword ptr -28h
.text:004079B0 var_24          = dword ptr -24h
.text:004079B0 var_20          = dword ptr -20h
.text:004079B0 var_1C          = dword ptr -1Ch
.text:004079B0 var_18          = byte ptr -18h
.text:004079B0 String1         = dword ptr  4
.text:004079B0 arg_4           = dword ptr  8
.text:004079B0
.text:004079B0                 push    ebp
.text:004079B1                 push    edi
.text:004079B2                 push    esi
.text:004079B3                 push    ebx
.text:004079B4                 sub     esp, 5Ch
.text:004079B7                 mov     edx, [esp+6Ch+String1]
.text:004079BB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004079BE                 call    sub_40A650
.text:004079C3                 mov     [esp+6Ch+Str], eax
.text:004079C6                 call    sub_406AE0
.text:004079CB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004079CF                 test    eax, eax
.text:004079D1                 jz      loc_407C03
.text:004079D7                 mov     [esp+6Ch+Str], eax ; Str
.text:004079DA                 call    strlen
.text:004079DF                 mov     edx, [esp+6Ch+arg_4]
.text:004079E3                 mov     ebx, eax
.text:004079E5                 mov     esi, [edx+0Ch]
.text:004079E8                 mov     edi, [edx+8]
.text:004079EB                 mov     eax, esi
.text:004079ED                 or      eax, edi
.text:004079EF                 jz      loc_407E10
.text:004079F5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004079F9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004079FC                 call    GetDriveTypeA
.text:00407A01                 sub     esp, 4
.text:00407A04                 cmp     eax, 4
.text:00407A07                 jz      loc_407E10
.text:00407A0D
.text:00407A0D loc_407A0D:                             ; CODE XREF: sub_4079B0+48A↓j
.text:00407A0D                                         ; sub_4079B0+4B2↓j
.text:00407A0D                 mov     edx, [esp+6Ch+arg_4]
.text:00407A11                 mov     esi, [edx+14h]
.text:00407A14                 mov     edi, [edx+10h]
.text:00407A17                 mov     ecx, esi
.text:00407A19                 or      ecx, edi
.text:00407A1B                 jnz     short loc_407A45
.text:00407A1D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00407A21                 xor     esi, esi
.text:00407A23                 xor     edi, edi
.text:00407A25                 test    ebp, ebp
.text:00407A27                 jz      short loc_407A37
.text:00407A29                 movzx   ebx, byte ptr [ebp+0]
.text:00407A2D                 test    bl, bl
.text:00407A2F                 mov     cl, bl
.text:00407A31                 jnz     loc_407DC1
.text:00407A37
.text:00407A37 loc_407A37:                             ; CODE XREF: sub_4079B0+77↑j
.text:00407A37                 xor     eax, eax
.text:00407A39                 xor     edx, edx
.text:00407A3B
.text:00407A3B loc_407A3B:                             ; CODE XREF: sub_4079B0+458↓j
.text:00407A3B                 mov     ebp, [esp+6Ch+arg_4]
.text:00407A3F                 mov     [ebp+10h], eax
.text:00407A42                 mov     [ebp+14h], edx
.text:00407A45
.text:00407A45 loc_407A45:                             ; CODE XREF: sub_4079B0+6B↑j
.text:00407A45                 mov     edi, [esp+6Ch+String1]
.text:00407A49                 xor     ebx, ebx
.text:00407A4B                 test    edi, edi
.text:00407A4D                 jz      loc_407CC3
.text:00407A53                 mov     esi, [esp+6Ch+String1]
.text:00407A57                 cmp     byte ptr [esi], 0
.text:00407A5A                 jnz     loc_407CD0
.text:00407A60
.text:00407A60 loc_407A60:                             ; CODE XREF: sub_4079B0+38C↓j
.text:00407A60                                         ; sub_4079B0+397↓j
.text:00407A60                 mov     ebp, [esp+6Ch+String1]
.text:00407A64                 test    ebp, ebp
.text:00407A66                 jz      loc_407CC3
.text:00407A6C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00407A74                 mov     edi, [esp+6Ch+String1]
.text:00407A78                 mov     [esp+6Ch+Str], edi ; Str
.text:00407A7B                 call    strrchr
.text:00407A80                 test    eax, eax
.text:00407A82                 jz      loc_407CC3
.text:00407A88                 cld
.text:00407A89                 mov     ecx, 5
.text:00407A8E                 mov     esi, eax
.text:00407A90                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00407A95                 repe cmpsb
.text:00407A97                 setz    cl
.text:00407A9A                 movzx   eax, cl
.text:00407A9D                 lea     esi, [esi+0]
.text:00407AA0
.text:00407AA0 loc_407AA0:                             ; CODE XREF: sub_4079B0+315↓j
.text:00407AA0                 test    eax, eax
.text:00407AA2                 jz      short loc_407AAA
.text:00407AA4                 or      ebx, 0A000h
.text:00407AAA
.text:00407AAA loc_407AAA:                             ; CODE XREF: sub_4079B0+F2↑j
.text:00407AAA                 mov     esi, [esp+6Ch+arg_4]
.text:00407AAE                 xor     ecx, ecx
.text:00407AB0                 mov     edi, ds:dword_411630
.text:00407AB6                 or      [esi], ebx
.text:00407AB8                 mov     ebx, [esi+14h]
.text:00407ABB                 mov     ebp, [esi+10h]
.text:00407ABE                 mov     eax, ebx
.text:00407AC0                 xor     eax, ecx
.text:00407AC2                 xor     ebp, edi
.text:00407AC4                 or      eax, ebp
.text:00407AC6                 jnz     loc_407C50
.text:00407ACC
.text:00407ACC loc_407ACC:                             ; CODE XREF: sub_4079B0+30E↓j
.text:00407ACC                 mov     ecx, dword_4100A0
.text:00407AD2                 xor     esi, esi
.text:00407AD4                 xor     edi, edi
.text:00407AD6                 mov     edx, [esp+6Ch+arg_4]
.text:00407ADA                 mov     [edx+50h], ecx
.text:00407ADD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00407AE4                 call    LoadLibraryA
.text:00407AE9                 sub     esp, 4
.text:00407AEC                 mov     ebp, eax
.text:00407AEE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00407AF6                 mov     [esp+6Ch+Str], eax ; hModule
.text:00407AF9                 call    GetProcAddress
.text:00407AFE                 sub     esp, 8
.text:00407B01                 test    eax, eax
.text:00407B03                 jz      short loc_407B38
.text:00407B05                 mov     ebx, [esp+6Ch+String1]
.text:00407B09                 lea     esi, [esp+6Ch+var_2C]
.text:00407B0D                 mov     [esp+6Ch+lpProcName], esi
.text:00407B11                 mov     [esp+6Ch+Str], ebx
.text:00407B14                 call    eax
.text:00407B16                 sub     esp, 8
.text:00407B19                 mov     ebx, eax
.text:00407B1B                 cmp     eax, 0FFFFFFFFh
.text:00407B1E                 jz      loc_407C39
.text:00407B24
.text:00407B24 loc_407B24:                             ; CODE XREF: sub_4079B0+29A↓j
.text:00407B24                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00407B28                 mov     ecx, ebx
.text:00407B2A                 xor     edi, edi
.text:00407B2C                 xor     ebx, ebx
.text:00407B2E                 mov     edx, esi
.text:00407B30                 mov     esi, ecx
.text:00407B32                 or      esi, edi
.text:00407B34                 mov     edi, ebx
.text:00407B36                 or      edi, edx
.text:00407B38
.text:00407B38 loc_407B38:                             ; CODE XREF: sub_4079B0+153↑j
.text:00407B38                                         ; sub_4079B0+294↓j
.text:00407B38                 test    ebp, ebp
.text:00407B3A                 jz      short loc_407B47
.text:00407B3C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00407B3F                 call    FreeLibrary
.text:00407B44                 sub     esp, 4
.text:00407B47
.text:00407B47 loc_407B47:                             ; CODE XREF: sub_4079B0+18A↑j
.text:00407B47                 mov     ebp, edi
.text:00407B49                 mov     edx, ebp
.text:00407B4B                 mov     edi, esi
.text:00407B4D                 or      edx, esi
.text:00407B4F                 jnz     short loc_407B5B
.text:00407B51                 mov     eax, [esp+6Ch+arg_4]
.text:00407B55                 mov     edi, [eax+30h]
.text:00407B58                 mov     ebp, [eax+34h]
.text:00407B5B
.text:00407B5B loc_407B5B:                             ; CODE XREF: sub_4079B0+19F↑j
.text:00407B5B                 mov     [esp+6Ch+lpProcName], ebp
.text:00407B5F                 mov     ebx, dword_4100A0
.text:00407B65                 xor     esi, esi
.text:00407B67                 mov     [esp+6Ch+var_60], esi
.text:00407B6B                 mov     [esp+6Ch+Str], edi
.text:00407B6E                 mov     [esp+6Ch+var_64], ebx
.text:00407B72                 call    sub_40EA70
.text:00407B77                 mov     [esp+6Ch+var_3C], eax
.text:00407B7B                 mov     ecx, dword_4100A0
.text:00407B81                 mov     [esp+6Ch+lpProcName], ebp
.text:00407B85                 mov     [esp+6Ch+var_38], edx
.text:00407B89                 shr     ecx, 9
.text:00407B8C                 mov     [esp+6Ch+var_44], ecx
.text:00407B90                 mov     [esp+6Ch+var_40], 0
.text:00407B98                 mov     [esp+6Ch+var_64], ebx
.text:00407B9C                 mov     [esp+6Ch+var_60], esi
.text:00407BA0                 mov     [esp+6Ch+Str], edi
.text:00407BA3                 call    sub_40EB90
.text:00407BA8                 mov     ebp, edx
.text:00407BAA                 or      ebp, eax
.text:00407BAC                 jz      short loc_407C10
.text:00407BAE                 mov     ebp, [esp+6Ch+var_3C]
.text:00407BB2                 mov     esi, [esp+6Ch+var_38]
.text:00407BB6                 mov     eax, [esp+6Ch+var_44]
.text:00407BBA                 mov     [esp+6Ch+var_4C], ebp
.text:00407BBE                 mov     ecx, [esp+6Ch+var_40]
.text:00407BC2                 mov     ebx, [esp+6Ch+var_44]
.text:00407BC6                 add     [esp+6Ch+var_4C], 1
.text:00407BCB                 mov     [esp+6Ch+var_48], esi
.text:00407BCF                 mov     edi, [esp+6Ch+var_4C]
.text:00407BD3                 adc     [esp+6Ch+var_48], 0
.text:00407BD8                 mul     [esp+6Ch+var_4C]
.text:00407BDC                 imul    ecx, edi
.text:00407BDF                 mov     esi, eax
.text:00407BE1                 mov     eax, [esp+6Ch+var_48]
.text:00407BE5                 add     edx, ecx
.text:00407BE7                 imul    ebx, eax
.text:00407BEA                 lea     edi, [ebx+edx]
.text:00407BED
.text:00407BED loc_407BED:                             ; CODE XREF: sub_4079B0+287↓j
.text:00407BED                 mov     ebx, [esp+6Ch+arg_4]
.text:00407BF1                 mov     [ebx+58h], esi
.text:00407BF4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00407BF8                 mov     [ebx+5Ch], edi
.text:00407BFB                 mov     [esp+6Ch+Str], esi ; Block
.text:00407BFE                 call    free
.text:00407C03
.text:00407C03 loc_407C03:                             ; CODE XREF: sub_4079B0+21↑j
.text:00407C03                 add     esp, 5Ch
.text:00407C06                 xor     eax, eax
.text:00407C08                 pop     ebx
.text:00407C09                 pop     esi
.text:00407C0A                 pop     edi
.text:00407C0B                 pop     ebp
.text:00407C0C                 retn
.text:00407C0C ; ---------------------------------------------------------------------------
.text:00407C0D                 align 10h
.text:00407C10
.text:00407C10 loc_407C10:                             ; CODE XREF: sub_4079B0+1FC↑j
.text:00407C10                 mov     eax, [esp+6Ch+var_3C]
.text:00407C14                 mov     edi, [esp+6Ch+var_40]
.text:00407C18                 mov     ecx, [esp+6Ch+var_3C]
.text:00407C1C                 mul     [esp+6Ch+var_44]
.text:00407C20                 mov     ebx, [esp+6Ch+var_44]
.text:00407C24                 imul    ecx, edi
.text:00407C27                 mov     ebp, edx
.text:00407C29                 mov     esi, eax
.text:00407C2B                 mov     edx, [esp+6Ch+var_38]
.text:00407C2F                 add     ebp, ecx
.text:00407C31                 imul    ebx, edx
.text:00407C34                 lea     edi, [ebx+ebp]
.text:00407C37                 jmp     short loc_407BED
.text:00407C39 ; ---------------------------------------------------------------------------
.text:00407C39
.text:00407C39 loc_407C39:                             ; CODE XREF: sub_4079B0+16E↑j
.text:00407C39                 call    GetLastError
.text:00407C3E                 xor     esi, esi
.text:00407C40                 xor     edi, edi
.text:00407C42                 test    eax, eax
.text:00407C44                 jnz     loc_407B38
.text:00407C4A                 jmp     loc_407B24
.text:00407C4A ; ---------------------------------------------------------------------------
.text:00407C4F                 align 10h
.text:00407C50
.text:00407C50 loc_407C50:                             ; CODE XREF: sub_4079B0+116↑j
.text:00407C50                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00407C54                 lea     ecx, [esp+6Ch+var_20]
.text:00407C58                 lea     ebx, [esp+6Ch+var_1C]
.text:00407C5C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00407C60                 lea     edi, [esp+6Ch+var_24]
.text:00407C64                 lea     ebp, [esp+6Ch+var_28]
.text:00407C68                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00407C6C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00407C70                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00407C74                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00407C77                 call    sub_40B070
.text:00407C7C                 test    eax, eax
.text:00407C7E                 jnz     short loc_407CA0
.text:00407C80                 mov     [esp+6Ch+var_28], 1
.text:00407C88                 mov     [esp+6Ch+var_24], 200h
.text:00407C90                 mov     [esp+6Ch+var_20], 0
.text:00407C98                 mov     [esp+6Ch+var_1C], 0
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: sub_4079B0+2CE↑j
.text:00407CA0                 mov     ebp, [esp+6Ch+var_24]
.text:00407CA4                 mov     edi, [esp+6Ch+var_28]
.text:00407CA8                 mov     eax, [esp+6Ch+arg_4]
.text:00407CAC                 imul    ebp, edi
.text:00407CAF                 mov     esi, [eax+10h]
.text:00407CB2                 mov     dword_4100A0, ebp
.text:00407CB8                 mov     ds:dword_411630, esi
.text:00407CBE                 jmp     loc_407ACC
.text:00407CC3 ; ---------------------------------------------------------------------------
.text:00407CC3
.text:00407CC3 loc_407CC3:                             ; CODE XREF: sub_4079B0+9D↑j
.text:00407CC3                                         ; sub_4079B0+B6↑j ...
.text:00407CC3                 xor     eax, eax
.text:00407CC5                 jmp     loc_407AA0
.text:00407CC5 ; ---------------------------------------------------------------------------
.text:00407CCA                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: sub_4079B0+AA↑j
.text:00407CD0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00407CD7                 xor     ebp, ebp
.text:00407CD9                 call    GetModuleHandleA
.text:00407CDE                 sub     esp, 4
.text:00407CE1                 mov     edi, eax
.text:00407CE3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00407CEB                 mov     [esp+6Ch+Str], eax ; hModule
.text:00407CEE                 call    GetProcAddress
.text:00407CF3                 sub     esp, 8
.text:00407CF6                 mov     edx, eax
.text:00407CF8                 test    eax, eax
.text:00407CFA                 jz      short loc_407D14
.text:00407CFC                 mov     eax, [esp+6Ch+String1]
.text:00407D00                 lea     ecx, [esp+6Ch+var_18]
.text:00407D04                 mov     [esp+6Ch+lpProcName], ecx
.text:00407D08                 mov     [esp+6Ch+Str], eax
.text:00407D0B                 call    edx
.text:00407D0D                 sub     esp, 8
.text:00407D10                 test    eax, eax
.text:00407D12                 jnz     short loc_407D78
.text:00407D14
.text:00407D14 loc_407D14:                             ; CODE XREF: sub_4079B0+34A↑j
.text:00407D14                 mov     edx, ds:Str
.text:00407D1A                 test    edx, edx
.text:00407D1C                 jz      short loc_407D97
.text:00407D1E
.text:00407D1E loc_407D1E:                             ; CODE XREF: sub_4079B0+3FA↓j
.text:00407D1E                                         ; sub_4079B0+40C↓j
.text:00407D1E                 mov     eax, [esp+6Ch+String1]
.text:00407D22                 test    eax, eax
.text:00407D24                 jz      short loc_407D2F
.text:00407D26                 mov     esi, [esp+6Ch+String1]
.text:00407D2A                 cmp     byte ptr [esi], 0
.text:00407D2D                 jnz     short loc_407D4C
.text:00407D2F
.text:00407D2F loc_407D2F:                             ; CODE XREF: sub_4079B0+374↑j
.text:00407D2F                                         ; sub_4079B0+3B0↓j ...
.text:00407D2F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00407D32                 call    FreeLibrary
.text:00407D37                 sub     esp, 4
.text:00407D3A                 test    ebp, ebp
.text:00407D3C                 jz      loc_407A60
.text:00407D42                 mov     ebx, 49h ; 'I'
.text:00407D47                 jmp     loc_407A60
.text:00407D4C ; ---------------------------------------------------------------------------
.text:00407D4C
.text:00407D4C loc_407D4C:                             ; CODE XREF: sub_4079B0+37D↑j
.text:00407D4C                 mov     [esp+6Ch+Str], esi ; Str
.text:00407D4F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00407D57                 call    strrchr
.text:00407D5C                 test    eax, eax
.text:00407D5E                 mov     esi, eax
.text:00407D60                 jz      short loc_407D2F
.text:00407D62                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00407D66                 mov     ecx, ds:Str
.text:00407D6C                 mov     [esp+6Ch+Str], ecx ; Str
.text:00407D6F                 call    strstr
.text:00407D74                 test    eax, eax
.text:00407D76                 jz      short loc_407D7F
.text:00407D78
.text:00407D78 loc_407D78:                             ; CODE XREF: sub_4079B0+362↑j
.text:00407D78                                         ; sub_4079B0+3E5↓j
.text:00407D78                 mov     ebp, 1
.text:00407D7D                 jmp     short loc_407D2F
.text:00407D7F ; ---------------------------------------------------------------------------
.text:00407D7F
.text:00407D7F loc_407D7F:                             ; CODE XREF: sub_4079B0+3C6↑j
.text:00407D7F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00407D83                 mov     edx, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:00407D89                 mov     [esp+6Ch+Str], edx ; Str
.text:00407D8C                 call    strstr
.text:00407D91                 test    eax, eax
.text:00407D93                 jz      short loc_407D2F
.text:00407D95                 jmp     short loc_407D78
.text:00407D97 ; ---------------------------------------------------------------------------
.text:00407D97
.text:00407D97 loc_407D97:                             ; CODE XREF: sub_4079B0+36C↑j
.text:00407D97                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:00407D9E                 call    getenv
.text:00407DA3                 mov     ds:Str, eax
.text:00407DA8                 test    eax, eax
.text:00407DAA                 jnz     loc_407D1E
.text:00407DB0                 mov     esi, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:00407DB6                 mov     ds:Str, esi
.text:00407DBC                 jmp     loc_407D1E
.text:00407DC1 ; ---------------------------------------------------------------------------
.text:00407DC1
.text:00407DC1 loc_407DC1:                             ; CODE XREF: sub_4079B0+81↑j
.text:00407DC1                                         ; sub_4079B0+452↓j
.text:00407DC1                 shld    edi, esi, 8
.text:00407DC5                 movsx   eax, cl
.text:00407DC8                 shl     esi, 8
.text:00407DCB                 cdq
.text:00407DCC                 add     esi, eax
.text:00407DCE                 adc     edi, edx
.text:00407DD0                 mov     edx, edi
.text:00407DD2                 xor     ebx, ebx
.text:00407DD4                 and     edx, 0FF000000h
.text:00407DDA                 mov     eax, edx
.text:00407DDC                 or      eax, ebx
.text:00407DDE                 jz      short loc_407DF9
.text:00407DE0                 mov     ecx, edx
.text:00407DE2                 xor     eax, eax
.text:00407DE4                 shr     ecx, 10h
.text:00407DE7                 mov     edx, esi
.text:00407DE9                 xor     edx, ecx
.text:00407DEB                 mov     ecx, edi
.text:00407DED                 xor     ecx, eax
.text:00407DEF                 mov     esi, edx
.text:00407DF1                 mov     edi, ecx
.text:00407DF3                 and     edi, 0FFFFFFh
.text:00407DF9
.text:00407DF9 loc_407DF9:                             ; CODE XREF: sub_4079B0+42E↑j
.text:00407DF9                 inc     ebp
.text:00407DFA                 movzx   ebx, byte ptr [ebp+0]
.text:00407DFE                 test    bl, bl
.text:00407E00                 mov     cl, bl
.text:00407E02                 jnz     short loc_407DC1
.text:00407E04                 mov     eax, esi
.text:00407E06                 mov     edx, edi
.text:00407E08                 jmp     loc_407A3B
.text:00407E08 ; ---------------------------------------------------------------------------
.text:00407E0D                 align 10h
.text:00407E10
.text:00407E10 loc_407E10:                             ; CODE XREF: sub_4079B0+3F↑j
.text:00407E10                                         ; sub_4079B0+57↑j
.text:00407E10                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00407E14                 mov     ebp, [esp+6Ch+String1]
.text:00407E18                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00407E1C                 mov     [esp+6Ch+Str], ebp ; String1
.text:00407E1F                 call    _stricmp
.text:00407E24                 test    eax, eax
.text:00407E26                 jnz     short loc_407E40
.text:00407E28                 mov     ebx, [esp+6Ch+arg_4]
.text:00407E2C                 mov     dword ptr [ebx+8], 5
.text:00407E33                 mov     dword ptr [ebx+0Ch], 50000h
.text:00407E3A                 jmp     loc_407A0D
.text:00407E3A ; ---------------------------------------------------------------------------
.text:00407E3F                 align 10h
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: sub_4079B0+476↑j
.text:00407E40                 mov     ebp, [esp+6Ch+String1]
.text:00407E44                 xor     esi, esi
.text:00407E46                 xor     edi, edi
.text:00407E48                 add     ebp, ebx
.text:00407E4A                 jz      short loc_407E54
.text:00407E4C                 movzx   ecx, byte ptr [ebp+0]
.text:00407E50                 test    cl, cl
.text:00407E52                 jnz     short loc_407E67
.text:00407E54
.text:00407E54 loc_407E54:                             ; CODE XREF: sub_4079B0+49A↑j
.text:00407E54                 xor     eax, eax
.text:00407E56                 xor     edx, edx
.text:00407E58
.text:00407E58 loc_407E58:                             ; CODE XREF: sub_4079B0+4FE↓j
.text:00407E58                 mov     ebp, [esp+6Ch+arg_4]
.text:00407E5C                 mov     [ebp+8], eax
.text:00407E5F                 mov     [ebp+0Ch], edx
.text:00407E62                 jmp     loc_407A0D
.text:00407E67 ; ---------------------------------------------------------------------------
.text:00407E67
.text:00407E67 loc_407E67:                             ; CODE XREF: sub_4079B0+4A2↑j
.text:00407E67                                         ; sub_4079B0+4F8↓j
.text:00407E67                 shld    edi, esi, 8
.text:00407E6B                 movsx   eax, cl
.text:00407E6E                 shl     esi, 8
.text:00407E71                 cdq
.text:00407E72                 add     esi, eax
.text:00407E74                 adc     edi, edx
.text:00407E76                 mov     edx, edi
.text:00407E78                 xor     ebx, ebx
.text:00407E7A                 and     edx, 0FF000000h
.text:00407E80                 mov     eax, edx
.text:00407E82                 or      eax, ebx
.text:00407E84                 jz      short loc_407E9F
.text:00407E86                 mov     ecx, edx
.text:00407E88                 xor     eax, eax
.text:00407E8A                 shr     ecx, 10h
.text:00407E8D                 mov     edx, esi
.text:00407E8F                 xor     edx, ecx
.text:00407E91                 mov     ecx, edi
.text:00407E93                 xor     ecx, eax
.text:00407E95                 mov     esi, edx
.text:00407E97                 mov     edi, ecx
.text:00407E99                 and     edi, 0FFFFFFh
.text:00407E9F
.text:00407E9F loc_407E9F:                             ; CODE XREF: sub_4079B0+4D4↑j
.text:00407E9F                 inc     ebp
.text:00407EA0                 movzx   ebx, byte ptr [ebp+0]
.text:00407EA4                 test    bl, bl
.text:00407EA6                 mov     cl, bl
.text:00407EA8                 jnz     short loc_407E67
.text:00407EAA                 mov     eax, esi
.text:00407EAC                 mov     edx, edi
.text:00407EAE                 jmp     short loc_407E58
.text:00407EAE sub_4079B0      endp
.text:00407EAE
.text:00407EB0
.text:00407EB0 ; =============== S U B R O U T I N E =======================================
.text:00407EB0
.text:00407EB0
.text:00407EB0 ; int __cdecl sub_407EB0(LPCSTR)
.text:00407EB0 sub_407EB0      proc near               ; CODE XREF: sub_40A770+CA↓p
.text:00407EB0
.text:00407EB0 lpRootPathName  = dword ptr -83Ch
.text:00407EB0 lpVolumeNameBuffer= dword ptr -838h
.text:00407EB0 nVolumeNameSize = dword ptr -834h
.text:00407EB0 lpVolumeSerialNumber= dword ptr -830h
.text:00407EB0 lpMaximumComponentLength= dword ptr -82Ch
.text:00407EB0 lpFileSystemFlags= dword ptr -828h
.text:00407EB0 lpFileSystemNameBuffer= dword ptr -824h
.text:00407EB0 nFileSystemNameSize= dword ptr -820h
.text:00407EB0 VolumeSerialNumber= dword ptr -818h
.text:00407EB0 MaximumComponentLength= dword ptr -814h
.text:00407EB0 FileSystemFlags = dword ptr -810h
.text:00407EB0 FileSystemNameBuffer= byte ptr -80Ch
.text:00407EB0 VolumeNameBuffer= byte ptr -40Ch
.text:00407EB0 var_4           = dword ptr -4
.text:00407EB0 arg_0           = dword ptr  4
.text:00407EB0
.text:00407EB0                 sub     esp, 83Ch
.text:00407EB6                 mov     [esp+83Ch+var_4], ebx
.text:00407EBD                 mov     ebx, [esp+83Ch+arg_0]
.text:00407EC4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00407EC7                 call    sub_40A650
.text:00407ECC                 mov     [esp+83Ch+lpRootPathName], eax
.text:00407ECF                 call    sub_406AE0
.text:00407ED4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00407ED7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00407EDB                 mov     ebx, eax
.text:00407EDD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00407EE1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00407EE5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00407EE9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00407EED                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00407EF1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00407EF5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00407EFC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00407F00                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00407F04                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00407F0C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407F14                 call    GetVolumeInformationA
.text:00407F19                 sub     esp, 20h
.text:00407F1C                 test    eax, eax
.text:00407F1E                 setz    cl
.text:00407F21                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00407F24                 movzx   edx, cl
.text:00407F27                 dec     edx
.text:00407F28                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00407F2C                 call    free
.text:00407F31                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00407F35                 mov     ebx, [esp+83Ch+var_4]
.text:00407F3C                 add     esp, 83Ch
.text:00407F42                 retn
.text:00407F42 sub_407EB0      endp
.text:00407F42
.text:00407F42 ; ---------------------------------------------------------------------------
.text:00407F43                 align 10h
.text:00407F50                 push    ebp
.text:00407F51                 push    edi
.text:00407F52                 xor     edi, edi
.text:00407F54                 push    esi
.text:00407F55                 xor     esi, esi
.text:00407F57                 push    ebx
.text:00407F58                 mov     ebp, [esp+14h]
.text:00407F5C                 test    ebp, ebp
.text:00407F5E                 jz      short loc_407F68
.text:00407F60                 movzx   ecx, byte ptr [ebp+0]
.text:00407F64                 test    cl, cl
.text:00407F66                 jnz     short loc_407F71
.text:00407F68
.text:00407F68 loc_407F68:                             ; CODE XREF: .text:00407F5E↑j
.text:00407F68                 xor     eax, eax
.text:00407F6A                 xor     edx, edx
.text:00407F6C
.text:00407F6C loc_407F6C:                             ; CODE XREF: .text:00407FB8↓j
.text:00407F6C                 pop     ebx
.text:00407F6D                 pop     esi
.text:00407F6E                 pop     edi
.text:00407F6F                 pop     ebp
.text:00407F70                 retn
.text:00407F71 ; ---------------------------------------------------------------------------
.text:00407F71
.text:00407F71 loc_407F71:                             ; CODE XREF: .text:00407F66↑j
.text:00407F71                                         ; .text:00407FB2↓j
.text:00407F71                 shld    edi, esi, 8
.text:00407F75                 movsx   eax, cl
.text:00407F78                 shl     esi, 8
.text:00407F7B                 cdq
.text:00407F7C                 add     esi, eax
.text:00407F7E                 adc     edi, edx
.text:00407F80                 mov     edx, edi
.text:00407F82                 xor     ebx, ebx
.text:00407F84                 and     edx, 0FF000000h
.text:00407F8A                 mov     eax, edx
.text:00407F8C                 or      eax, ebx
.text:00407F8E                 jz      short loc_407FA9
.text:00407F90                 mov     ecx, edx
.text:00407F92                 xor     eax, eax
.text:00407F94                 shr     ecx, 10h
.text:00407F97                 mov     edx, esi
.text:00407F99                 xor     edx, ecx
.text:00407F9B                 mov     ecx, edi
.text:00407F9D                 xor     ecx, eax
.text:00407F9F                 mov     esi, edx
.text:00407FA1                 mov     edi, ecx
.text:00407FA3                 and     edi, 0FFFFFFh
.text:00407FA9
.text:00407FA9 loc_407FA9:                             ; CODE XREF: .text:00407F8E↑j
.text:00407FA9                 inc     ebp
.text:00407FAA                 movzx   ebx, byte ptr [ebp+0]
.text:00407FAE                 test    bl, bl
.text:00407FB0                 mov     cl, bl
.text:00407FB2                 jnz     short loc_407F71
.text:00407FB4                 mov     eax, esi
.text:00407FB6                 mov     edx, edi
.text:00407FB8                 jmp     short loc_407F6C
.text:00407FB8 ; ---------------------------------------------------------------------------
.text:00407FBA                 align 10h
.text:00407FC0                 sub     esp, 2Ch
.text:00407FC3                 lea     edx, [esp+24h]
.text:00407FC7                 lea     ecx, [esp+28h]
.text:00407FCB                 mov     [esp+0Ch], edx
.text:00407FCF                 lea     edx, [esp+1Ch]
.text:00407FD3                 mov     [esp+4], edx
.text:00407FD7                 mov     edx, [esp+30h]
.text:00407FDB                 mov     [esp+10h], ecx
.text:00407FDF                 lea     ecx, [esp+20h]
.text:00407FE3                 mov     [esp+8], ecx
.text:00407FE7                 mov     [esp], edx
.text:00407FEA                 call    sub_40B070
.text:00407FEF                 test    eax, eax
.text:00407FF1                 jnz     short loc_408013
.text:00407FF3                 mov     dword ptr [esp+1Ch], 1
.text:00407FFB                 mov     dword ptr [esp+20h], 200h
.text:00408003                 mov     dword ptr [esp+24h], 0
.text:0040800B                 mov     dword ptr [esp+28h], 0
.text:00408013
.text:00408013 loc_408013:                             ; CODE XREF: .text:00407FF1↑j
.text:00408013                 mov     eax, [esp+20h]
.text:00408017                 mov     ecx, [esp+1Ch]
.text:0040801B                 add     esp, 2Ch
.text:0040801E                 imul    eax, ecx
.text:00408021                 retn
.text:00408021 ; ---------------------------------------------------------------------------
.text:00408022                 align 10h
.text:00408030                 sub     esp, 1Ch
.text:00408033                 mov     eax, [esp+20h]
.text:00408037                 mov     [esp+14h], esi
.text:0040803B                 mov     [esp+18h], edi
.text:0040803F                 test    eax, eax
.text:00408041                 jz      short loc_408080
.text:00408043                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040804B                 mov     [esp], eax
.text:0040804E                 call    strrchr
.text:00408053                 test    eax, eax
.text:00408055                 jz      short loc_408080
.text:00408057                 cld
.text:00408058                 mov     esi, eax
.text:0040805A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040805F                 mov     ecx, 5
.text:00408064                 repe cmpsb
.text:00408066                 setz    dl
.text:00408069                 movzx   eax, dl
.text:0040806C                 lea     esi, [esi+0]
.text:00408070
.text:00408070 loc_408070:                             ; CODE XREF: .text:00408082↓j
.text:00408070                 mov     esi, [esp+14h]
.text:00408074                 mov     edi, [esp+18h]
.text:00408078                 add     esp, 1Ch
.text:0040807B                 retn
.text:0040807B ; ---------------------------------------------------------------------------
.text:0040807C                 align 10h
.text:00408080
.text:00408080 loc_408080:                             ; CODE XREF: .text:00408041↑j
.text:00408080                                         ; .text:00408055↑j
.text:00408080                 xor     eax, eax
.text:00408082                 jmp     short loc_408070
.text:00408082 ; ---------------------------------------------------------------------------
.text:00408084                 align 10h
.text:00408090                 sub     esp, 1Ch
.text:00408093                 mov     [esp+10h], ebx
.text:00408097                 mov     ebx, [esp+20h]
.text:0040809B                 mov     [esp+14h], esi
.text:0040809F                 mov     [esp+18h], edi
.text:004080A3                 xor     edi, edi
.text:004080A5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004080AC                 call    GetModuleHandleA
.text:004080B1                 sub     esp, 4
.text:004080B4                 mov     esi, eax
.text:004080B6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004080BE                 mov     [esp], eax
.text:004080C1                 call    GetProcAddress
.text:004080C6                 sub     esp, 8
.text:004080C9                 test    eax, eax
.text:004080CB                 jz      short loc_4080E1
.text:004080CD                 mov     [esp], ebx
.text:004080D0                 lea     ecx, [esp+0Ch]
.text:004080D4                 mov     [esp+4], ecx
.text:004080D8                 call    eax
.text:004080DA                 sub     esp, 8
.text:004080DD                 test    eax, eax
.text:004080DF                 jnz     short loc_408140
.text:004080E1
.text:004080E1 loc_4080E1:                             ; CODE XREF: .text:004080CB↑j
.text:004080E1                 mov     eax, ds:Str
.text:004080E6                 test    eax, eax
.text:004080E8                 jz      short loc_408160
.text:004080EA
.text:004080EA loc_4080EA:                             ; CODE XREF: .text:00408173↓j
.text:004080EA                                         ; .text:00408185↓j
.text:004080EA                 test    ebx, ebx
.text:004080EC                 jz      short loc_4080F3
.text:004080EE                 cmp     byte ptr [ebx], 0
.text:004080F1                 jnz     short loc_408110
.text:004080F3
.text:004080F3 loc_4080F3:                             ; CODE XREF: .text:004080EC↑j
.text:004080F3                                         ; .text:00408124↓j ...
.text:004080F3                 mov     [esp], esi
.text:004080F6                 call    FreeLibrary
.text:004080FB                 sub     esp, 4
.text:004080FE                 mov     eax, edi
.text:00408100                 mov     ebx, [esp+10h]
.text:00408104                 mov     esi, [esp+14h]
.text:00408108                 mov     edi, [esp+18h]
.text:0040810C                 add     esp, 1Ch
.text:0040810F                 retn
.text:00408110 ; ---------------------------------------------------------------------------
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: .text:004080F1↑j
.text:00408110                 mov     [esp], ebx
.text:00408113                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040811B                 call    strrchr
.text:00408120                 test    eax, eax
.text:00408122                 mov     ebx, eax
.text:00408124                 jz      short loc_4080F3
.text:00408126                 mov     [esp+4], eax
.text:0040812A                 mov     ecx, ds:Str
.text:00408130                 mov     [esp], ecx
.text:00408133                 call    strstr
.text:00408138                 test    eax, eax
.text:0040813A                 jz      short loc_408147
.text:0040813C                 lea     esi, [esi+0]
.text:00408140
.text:00408140 loc_408140:                             ; CODE XREF: .text:004080DF↑j
.text:00408140                                         ; .text:0040815D↓j
.text:00408140                 mov     edi, 1
.text:00408145                 jmp     short loc_4080F3
.text:00408147 ; ---------------------------------------------------------------------------
.text:00408147
.text:00408147 loc_408147:                             ; CODE XREF: .text:0040813A↑j
.text:00408147                 mov     [esp+4], ebx
.text:0040814B                 mov     ebx, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:00408151                 mov     [esp], ebx
.text:00408154                 call    strstr
.text:00408159                 test    eax, eax
.text:0040815B                 jz      short loc_4080F3
.text:0040815D                 jmp     short loc_408140
.text:0040815D ; ---------------------------------------------------------------------------
.text:0040815F                 align 10h
.text:00408160
.text:00408160 loc_408160:                             ; CODE XREF: .text:004080E8↑j
.text:00408160                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408167                 call    getenv
.text:0040816C                 mov     ds:Str, eax
.text:00408171                 test    eax, eax
.text:00408173                 jnz     loc_4080EA
.text:00408179                 mov     edx, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:0040817F                 mov     ds:Str, edx
.text:00408185                 jmp     loc_4080EA
.text:00408185 ; ---------------------------------------------------------------------------
.text:0040818A                 align 10h
.text:00408190                 sub     esp, 0Ch
.text:00408193                 mov     edx, [esp+10h]
.text:00408197                 mov     [esp], edx
.text:0040819A                 call    GetFileType
.text:0040819F                 sub     esp, 4
.text:004081A2                 xor     edx, edx
.text:004081A4                 cmp     eax, 2
.text:004081A7                 jz      short loc_4081C0
.text:004081A9                 cmp     eax, 3
.text:004081AC                 jz      short loc_4081B4
.text:004081AE
.text:004081AE loc_4081AE:                             ; CODE XREF: .text:004081B9↓j
.text:004081AE                                         ; .text:004081C5↓j
.text:004081AE                 mov     eax, edx
.text:004081B0                 add     esp, 0Ch
.text:004081B3                 retn
.text:004081B4 ; ---------------------------------------------------------------------------
.text:004081B4
.text:004081B4 loc_4081B4:                             ; CODE XREF: .text:004081AC↑j
.text:004081B4                 mov     edx, 1000h
.text:004081B9                 jmp     short loc_4081AE
.text:004081B9 ; ---------------------------------------------------------------------------
.text:004081BB                 align 10h
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: .text:004081A7↑j
.text:004081C0                 mov     edx, 2000h
.text:004081C5                 jmp     short loc_4081AE
.text:004081C5 ; ---------------------------------------------------------------------------
.text:004081C7                 align 10h
.text:004081D0                 mov     ecx, [esp+4]
.text:004081D4                 xor     edx, edx
.text:004081D6                 test    cl, 10h
.text:004081D9                 setz    dl
.text:004081DC                 dec     edx
.text:004081DD                 and     edx, 0FFFFC000h
.text:004081E3                 add     edx, 8000h
.text:004081E9                 or      edx, 124h
.text:004081EF                 test    cl, 1
.text:004081F2                 movzx   eax, dx
.text:004081F5                 jnz     short locret_4081FC
.text:004081F7                 or      eax, 92h
.text:004081FC
.text:004081FC locret_4081FC:                          ; CODE XREF: .text:004081F5↑j
.text:004081FC                 retn
.text:004081FC ; ---------------------------------------------------------------------------
.text:004081FD                 align 10h
.text:00408200                 sub     esp, 2Ch
.text:00408203                 mov     [esp+20h], esi
.text:00408207                 mov     esi, [esp+30h]
.text:0040820B                 mov     [esp+1Ch], ebx
.text:0040820F                 xor     ebx, ebx
.text:00408211                 test    esi, esi
.text:00408213                 mov     [esp+24h], edi
.text:00408217                 mov     [esp+28h], ebp
.text:0040821B                 jz      short loc_408270
.text:0040821D                 cmp     byte ptr [esi], 0
.text:00408220                 jnz     short loc_408274
.text:00408222
.text:00408222 loc_408222:                             ; CODE XREF: .text:004082DC↓j
.text:00408222                                         ; .text:004082E7↓j
.text:00408222                 test    esi, esi
.text:00408224                 jz      short loc_408270
.text:00408226                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040822E                 mov     [esp], esi
.text:00408231                 call    strrchr
.text:00408236                 test    eax, eax
.text:00408238                 jz      short loc_408270
.text:0040823A                 cld
.text:0040823B                 mov     ecx, 5
.text:00408240                 mov     esi, eax
.text:00408242                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408247                 repe cmpsb
.text:00408249                 setz    cl
.text:0040824C                 movzx   eax, cl
.text:0040824F                 nop
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: .text:00408272↓j
.text:00408250                 test    eax, eax
.text:00408252                 jz      short loc_40825A
.text:00408254                 or      ebx, 0A000h
.text:0040825A
.text:0040825A loc_40825A:                             ; CODE XREF: .text:00408252↑j
.text:0040825A                 mov     eax, ebx
.text:0040825C                 mov     esi, [esp+20h]
.text:00408260                 mov     ebx, [esp+1Ch]
.text:00408264                 mov     edi, [esp+24h]
.text:00408268                 mov     ebp, [esp+28h]
.text:0040826C                 add     esp, 2Ch
.text:0040826F                 retn
.text:00408270 ; ---------------------------------------------------------------------------
.text:00408270
.text:00408270 loc_408270:                             ; CODE XREF: .text:0040821B↑j
.text:00408270                                         ; .text:00408224↑j ...
.text:00408270                 xor     eax, eax
.text:00408272                 jmp     short loc_408250
.text:00408274 ; ---------------------------------------------------------------------------
.text:00408274
.text:00408274 loc_408274:                             ; CODE XREF: .text:00408220↑j
.text:00408274                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040827B                 call    GetModuleHandleA
.text:00408280                 sub     esp, 4
.text:00408283                 mov     ebp, eax
.text:00408285                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040828D                 mov     [esp], eax
.text:00408290                 call    GetProcAddress
.text:00408295                 sub     esp, 8
.text:00408298                 test    eax, eax
.text:0040829A                 mov     dword ptr [esp+14h], 0
.text:004082A2                 jz      short loc_4082B8
.text:004082A4                 mov     [esp], esi
.text:004082A7                 lea     ecx, [esp+18h]
.text:004082AB                 mov     [esp+4], ecx
.text:004082AF                 call    eax
.text:004082B1                 sub     esp, 8
.text:004082B4                 test    eax, eax
.text:004082B6                 jnz     short loc_408318
.text:004082B8
.text:004082B8 loc_4082B8:                             ; CODE XREF: .text:004082A2↑j
.text:004082B8                 mov     edx, ds:Str
.text:004082BE                 test    edx, edx
.text:004082C0                 jz      short loc_408340
.text:004082C2
.text:004082C2 loc_4082C2:                             ; CODE XREF: .text:00408353↓j
.text:004082C2                                         ; .text:00408365↓j
.text:004082C2                 test    esi, esi
.text:004082C4                 jz      short loc_4082CB
.text:004082C6                 cmp     byte ptr [esi], 0
.text:004082C9                 jnz     short loc_4082EC
.text:004082CB
.text:004082CB loc_4082CB:                             ; CODE XREF: .text:004082C4↑j
.text:004082CB                                         ; .text:00408300↓j ...
.text:004082CB                 mov     [esp], ebp
.text:004082CE                 call    FreeLibrary
.text:004082D3                 sub     esp, 4
.text:004082D6                 mov     eax, [esp+14h]
.text:004082DA                 test    eax, eax
.text:004082DC                 jz      loc_408222
.text:004082E2                 mov     ebx, 49h ; 'I'
.text:004082E7                 jmp     loc_408222
.text:004082EC ; ---------------------------------------------------------------------------
.text:004082EC
.text:004082EC loc_4082EC:                             ; CODE XREF: .text:004082C9↑j
.text:004082EC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004082F4                 mov     [esp], esi
.text:004082F7                 call    strrchr
.text:004082FC                 test    eax, eax
.text:004082FE                 mov     edi, eax
.text:00408300                 jz      short loc_4082CB
.text:00408302                 mov     [esp+4], eax
.text:00408306                 mov     edx, ds:Str
.text:0040830C                 mov     [esp], edx
.text:0040830F                 call    strstr
.text:00408314                 test    eax, eax
.text:00408316                 jz      short loc_408322
.text:00408318
.text:00408318 loc_408318:                             ; CODE XREF: .text:004082B6↑j
.text:00408318                                         ; .text:00408338↓j
.text:00408318                 mov     dword ptr [esp+14h], 1
.text:00408320                 jmp     short loc_4082CB
.text:00408322 ; ---------------------------------------------------------------------------
.text:00408322
.text:00408322 loc_408322:                             ; CODE XREF: .text:00408316↑j
.text:00408322                 mov     [esp+4], edi
.text:00408326                 mov     edi, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:0040832C                 mov     [esp], edi
.text:0040832F                 call    strstr
.text:00408334                 test    eax, eax
.text:00408336                 jz      short loc_4082CB
.text:00408338                 jmp     short loc_408318
.text:00408338 ; ---------------------------------------------------------------------------
.text:0040833A                 align 10h
.text:00408340
.text:00408340 loc_408340:                             ; CODE XREF: .text:004082C0↑j
.text:00408340                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408347                 call    getenv
.text:0040834C                 mov     ds:Str, eax
.text:00408351                 test    eax, eax
.text:00408353                 jnz     loc_4082C2
.text:00408359                 mov     ecx, off_4100A4 ; ".com;.exe;.bat;.cmd"
.text:0040835F                 mov     ds:Str, ecx
.text:00408365                 jmp     loc_4082C2
.text:00408365 ; ---------------------------------------------------------------------------
.text:0040836A                 align 10h
.text:00408370                 push    esi
.text:00408371                 push    ebx
.text:00408372                 sub     esp, 864h
.text:00408378                 mov     ebx, [esp+870h]
.text:0040837F                 lea     edx, [esp+830h]
.text:00408386                 mov     esi, [esp+874h]
.text:0040838D                 mov     [esp+4], edx
.text:00408391                 mov     [esp], ebx
.text:00408394                 call    sub_4071F0
.text:00408399                 xor     edx, edx
.text:0040839B                 test    eax, eax
.text:0040839D                 jz      loc_408485
.text:004083A3                 mov     ecx, [esp+830h]
.text:004083AA                 test    cl, 10h
.text:004083AD                 mov     [esi], ecx
.text:004083AF                 mov     eax, [esp+834h]
.text:004083B6                 mov     edx, [esp+838h]
.text:004083BD                 mov     [esi+4], eax
.text:004083C0                 mov     [esi+8], edx
.text:004083C3                 mov     eax, [esp+83Ch]
.text:004083CA                 mov     edx, [esp+840h]
.text:004083D1                 mov     [esi+0Ch], eax
.text:004083D4                 mov     [esi+10h], edx
.text:004083D7                 mov     edx, [esp+848h]
.text:004083DE                 mov     eax, [esp+844h]
.text:004083E5                 mov     [esi+18h], edx
.text:004083E8                 mov     [esi+14h], eax
.text:004083EB                 mov     edx, [esp+84Ch]
.text:004083F2                 mov     [esi+20h], edx
.text:004083F5                 mov     edx, [esp+850h]
.text:004083FC                 mov     [esi+24h], edx
.text:004083FF                 jnz     loc_408490
.text:00408405                 mov     dword ptr [esi+28h], 1
.text:0040840C
.text:0040840C loc_40840C:                             ; CODE XREF: .text:0040849B↓j
.text:0040840C                 mov     [esp], ebx
.text:0040840F                 call    sub_40A650
.text:00408414                 mov     [esp], eax
.text:00408417                 call    sub_406AE0
.text:0040841C                 mov     [esp], eax
.text:0040841F                 lea     edx, [esp+30h]
.text:00408423                 mov     ebx, eax
.text:00408425                 mov     [esp+18h], edx
.text:00408429                 lea     ecx, [esp+2Ch]
.text:0040842D                 lea     edx, [esp+28h]
.text:00408431                 mov     [esp+14h], ecx
.text:00408435                 lea     ecx, [esp+24h]
.text:00408439                 mov     [esp+10h], edx
.text:0040843D                 lea     edx, [esp+430h]
.text:00408444                 mov     [esp+0Ch], ecx
.text:00408448                 mov     [esp+4], edx
.text:0040844C                 mov     dword ptr [esp+1Ch], 400h
.text:00408454                 mov     dword ptr [esp+8], 400h
.text:0040845C                 call    GetVolumeInformationA
.text:00408461                 sub     esp, 20h
.text:00408464                 test    eax, eax
.text:00408466                 setz    cl
.text:00408469                 mov     [esp], ebx
.text:0040846C                 movzx   edx, cl
.text:0040846F                 dec     edx
.text:00408470                 and     [esp+24h], edx
.text:00408474                 call    free
.text:00408479                 mov     ecx, [esp+24h]
.text:0040847D                 mov     edx, 1
.text:00408482                 mov     [esi+1Ch], ecx
.text:00408485
.text:00408485 loc_408485:                             ; CODE XREF: .text:0040839D↑j
.text:00408485                 add     esp, 864h
.text:0040848B                 mov     eax, edx
.text:0040848D                 pop     ebx
.text:0040848E                 pop     esi
.text:0040848F                 retn
.text:00408490 ; ---------------------------------------------------------------------------
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: .text:004083FF↑j
.text:00408490                 mov     [esp], ebx
.text:00408493                 call    sub_407360
.text:00408498                 mov     [esi+28h], eax
.text:0040849B                 jmp     loc_40840C
.text:004084A0 ; ---------------------------------------------------------------------------
.text:004084A0                 push    ebp
.text:004084A1                 xor     edx, edx
.text:004084A3                 push    edi
.text:004084A4                 push    esi
.text:004084A5                 xor     esi, esi
.text:004084A7                 push    ebx
.text:004084A8                 sub     esp, 1Ch
.text:004084AB                 mov     ebx, [esp+5Ch]
.text:004084AF                 mov     ecx, [esp+30h]
.text:004084B3                 mov     edi, [esp+60h]
.text:004084B7                 or      esi, ebx
.text:004084B9                 mov     eax, [esp+4Ch]
.text:004084BD                 or      edi, edx
.text:004084BF                 mov     ebx, [esp+64h]
.text:004084C3                 xor     edx, edx
.text:004084C5                 test    cl, 10h
.text:004084C8                 setz    dl
.text:004084CB                 mov     [ebx+10h], eax
.text:004084CE                 mov     [ebx+8], edi
.text:004084D1                 mov     [ebx+0Ch], esi
.text:004084D4                 dec     edx
.text:004084D5                 and     edx, 0FFFFC000h
.text:004084DB                 mov     dword ptr [ebx+14h], 0
.text:004084E2                 add     edx, 8000h
.text:004084E8                 or      edx, 124h
.text:004084EE                 test    cl, 1
.text:004084F1                 movzx   eax, dx
.text:004084F4                 jnz     short loc_4084FB
.text:004084F6                 or      eax, 92h
.text:004084FB
.text:004084FB loc_4084FB:                             ; CODE XREF: .text:004084F4↑j
.text:004084FB                 mov     ebx, [esp+54h]
.text:004084FF                 xor     edx, edx
.text:00408501                 xor     ebp, ebp
.text:00408503                 mov     edi, [esp+50h]
.text:00408507                 mov     ecx, [esp+64h]
.text:0040850B                 mov     esi, edi
.text:0040850D                 or      [ecx], eax
.text:0040850F                 mov     edi, ebx
.text:00408511                 or      edi, ebp
.text:00408513                 mov     ebp, edx
.text:00408515                 mov     ebx, [esp+64h]
.text:00408519                 or      ebp, esi
.text:0040851B                 mov     esi, [esp+58h]
.text:0040851F                 mov     edx, [esp+40h]
.text:00408523                 mov     [ebx+30h], edi
.text:00408526                 mov     [ebx+18h], esi
.text:00408529                 mov     ecx, edx
.text:0040852B                 xor     esi, esi
.text:0040852D                 mov     [ebx+34h], ebp
.text:00408530                 xor     edx, edx
.text:00408532                 or      esi, ecx
.text:00408534                 mov     dword ptr [esp+8], 989680h
.text:0040853C                 mov     ebx, [esp+3Ch]
.text:00408540                 mov     ecx, esi
.text:00408542                 mov     dword ptr [esp+0Ch], 0
.text:0040854A                 or      ebx, edx
.text:0040854C                 mov     edx, ebx
.text:0040854E                 sub     edx, 0D53E8000h
.text:00408554                 sbb     ecx, 19DB1DEh
.text:0040855A                 mov     [esp+4], ecx
.text:0040855E                 mov     [esp], edx
.text:00408561                 call    sub_40EA70
.text:00408566                 mov     edx, eax
.text:00408568                 mov     ecx, [esp+64h]
.text:0040856C                 shr     eax, 1Fh
.text:0040856F                 dec     eax
.text:00408570                 and     edx, eax
.text:00408572                 mov     [ecx+38h], edx
.text:00408575                 mov     [esp], ebx
.text:00408578                 mov     [esp+4], esi
.text:0040857C                 mov     dword ptr [esp+8], 989680h
.text:00408584                 mov     dword ptr [esp+0Ch], 0
.text:0040858C                 call    sub_40EB90
.text:00408591                 lea     ecx, [eax+eax*4]
.text:00408594                 lea     esi, [ecx+ecx*4]
.text:00408597                 mov     eax, [esp+64h]
.text:0040859B                 shl     esi, 2
.text:0040859E                 mov     ebx, esi
.text:004085A0                 shr     ebx, 1Fh
.text:004085A3                 dec     ebx
.text:004085A4                 and     ebx, esi
.text:004085A6                 xor     esi, esi
.text:004085A8                 mov     [eax+3Ch], ebx
.text:004085AB                 mov     edx, [esp+38h]
.text:004085AF                 mov     dword ptr [esp+8], 989680h
.text:004085B7                 mov     ebx, [esp+34h]
.text:004085BB                 mov     dword ptr [esp+0Ch], 0
.text:004085C3                 mov     ecx, edx
.text:004085C5                 xor     edx, edx
.text:004085C7                 or      ebx, edx
.text:004085C9                 or      esi, ecx
.text:004085CB                 mov     edx, ebx
.text:004085CD                 sub     edx, 0D53E8000h
.text:004085D3                 mov     ecx, esi
.text:004085D5                 sbb     ecx, 19DB1DEh
.text:004085DB                 mov     [esp+4], ecx
.text:004085DF                 mov     [esp], edx
.text:004085E2                 call    sub_40EA70
.text:004085E7                 mov     edx, eax
.text:004085E9                 mov     ecx, [esp+64h]
.text:004085ED                 shr     eax, 1Fh
.text:004085F0                 dec     eax
.text:004085F1                 and     edx, eax
.text:004085F3                 mov     [ecx+48h], edx
.text:004085F6                 mov     [esp], ebx
.text:004085F9                 mov     [esp+4], esi
.text:004085FD                 mov     dword ptr [esp+8], 989680h
.text:00408605                 mov     dword ptr [esp+0Ch], 0
.text:0040860D                 call    sub_40EB90
.text:00408612                 lea     edx, [eax+eax*4]
.text:00408615                 mov     ebx, [esp+64h]
.text:00408619                 lea     ecx, [edx+edx*4]
.text:0040861C                 shl     ecx, 2
.text:0040861F                 mov     esi, ecx
.text:00408621                 shr     esi, 1Fh
.text:00408624                 dec     esi
.text:00408625                 and     esi, ecx
.text:00408627                 mov     [ebx+4Ch], esi
.text:0040862A                 mov     edx, [esp+48h]
.text:0040862E                 xor     esi, esi
.text:00408630                 mov     dword ptr [esp+8], 989680h
.text:00408638                 mov     ebx, [esp+44h]
.text:0040863C                 mov     dword ptr [esp+0Ch], 0
.text:00408644                 mov     ecx, edx
.text:00408646                 xor     edx, edx
.text:00408648                 or      ebx, edx
.text:0040864A                 or      esi, ecx
.text:0040864C                 mov     edx, ebx
.text:0040864E                 sub     edx, 0D53E8000h
.text:00408654                 mov     ecx, esi
.text:00408656                 sbb     ecx, 19DB1DEh
.text:0040865C                 mov     [esp+4], ecx
.text:00408660                 mov     [esp], edx
.text:00408663                 call    sub_40EA70
.text:00408668                 mov     edx, eax
.text:0040866A                 mov     ecx, [esp+64h]
.text:0040866E                 shr     eax, 1Fh
.text:00408671                 dec     eax
.text:00408672                 and     edx, eax
.text:00408674                 mov     [ecx+40h], edx
.text:00408677                 mov     [esp+4], esi
.text:0040867B                 mov     dword ptr [esp+8], 989680h
.text:00408683                 mov     dword ptr [esp+0Ch], 0
.text:0040868B                 mov     [esp], ebx
.text:0040868E                 call    sub_40EB90
.text:00408693                 lea     edx, [eax+eax*4]
.text:00408696                 lea     esi, [edx+edx*4]
.text:00408699                 mov     eax, [esp+64h]
.text:0040869D                 shl     esi, 2
.text:004086A0                 mov     edx, ebp
.text:004086A2                 mov     ecx, esi
.text:004086A4                 mov     dword ptr [eax+50h], 200h
.text:004086AB                 shr     ecx, 1Fh
.text:004086AE                 dec     ecx
.text:004086AF                 and     ecx, esi
.text:004086B1                 test    ebp, ebp
.text:004086B3                 mov     [eax+44h], ecx
.text:004086B6                 mov     eax, edi
.text:004086B8                 js      short loc_4086F2
.text:004086BA
.text:004086BA loc_4086BA:                             ; CODE XREF: .text:004086FA↓j
.text:004086BA                 xor     esi, esi
.text:004086BC                 mov     ebp, edi
.text:004086BE                 mov     ecx, eax
.text:004086C0                 shrd    ecx, edx, 9
.text:004086C4                 mov     ebx, edx
.text:004086C6                 and     ebp, 1FFh
.text:004086CC                 mov     eax, esi
.text:004086CE                 sar     ebx, 9
.text:004086D1                 or      eax, ebp
.text:004086D3                 jz      short loc_4086DB
.text:004086D5                 add     ecx, 1
.text:004086D8                 adc     ebx, 0
.text:004086DB
.text:004086DB loc_4086DB:                             ; CODE XREF: .text:004086D3↑j
.text:004086DB                 mov     edx, [esp+64h]
.text:004086DF                 mov     eax, 1
.text:004086E4                 mov     [edx+58h], ecx
.text:004086E7                 mov     [edx+5Ch], ebx
.text:004086EA                 add     esp, 1Ch
.text:004086ED                 pop     ebx
.text:004086EE                 pop     esi
.text:004086EF                 pop     edi
.text:004086F0                 pop     ebp
.text:004086F1                 retn
.text:004086F2 ; ---------------------------------------------------------------------------
.text:004086F2
.text:004086F2 loc_4086F2:                             ; CODE XREF: .text:004086B8↑j
.text:004086F2                 add     eax, 1FFh
.text:004086F7                 adc     edx, 0
.text:004086FA                 jmp     short loc_4086BA
.text:004086FA ; ---------------------------------------------------------------------------
.text:004086FC                 align 10h
.text:00408700                 push    ebp
.text:00408701                 push    edi
.text:00408702                 xor     edi, edi
.text:00408704                 push    esi
.text:00408705                 xor     esi, esi
.text:00408707                 push    ebx
.text:00408708                 sub     esp, 0Ch
.text:0040870B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00408712                 call    LoadLibraryA
.text:00408717                 sub     esp, 4
.text:0040871A                 mov     ebp, eax
.text:0040871C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00408724                 mov     [esp], eax
.text:00408727                 call    GetProcAddress
.text:0040872C                 sub     esp, 8
.text:0040872F                 test    eax, eax
.text:00408731                 jz      short loc_408762
.text:00408733                 lea     ecx, [esp+8]
.text:00408737                 mov     [esp+4], ecx
.text:0040873B                 mov     ecx, [esp+20h]
.text:0040873F                 mov     [esp], ecx
.text:00408742                 call    eax
.text:00408744                 sub     esp, 8
.text:00408747                 mov     ebx, eax
.text:00408749                 cmp     eax, 0FFFFFFFFh
.text:0040874C                 jz      short loc_40877D
.text:0040874E
.text:0040874E loc_40874E:                             ; CODE XREF: .text:00408786↓j
.text:0040874E                 mov     esi, [esp+8]
.text:00408752                 mov     ecx, ebx
.text:00408754                 xor     edi, edi
.text:00408756                 xor     ebx, ebx
.text:00408758                 mov     edx, esi
.text:0040875A                 mov     esi, ecx
.text:0040875C                 or      esi, edi
.text:0040875E                 mov     edi, ebx
.text:00408760                 or      edi, edx
.text:00408762
.text:00408762 loc_408762:                             ; CODE XREF: .text:00408731↑j
.text:00408762                                         ; .text:00408784↓j
.text:00408762                 test    ebp, ebp
.text:00408764                 jz      short loc_408771
.text:00408766                 mov     [esp], ebp
.text:00408769                 call    FreeLibrary
.text:0040876E                 sub     esp, 4
.text:00408771
.text:00408771 loc_408771:                             ; CODE XREF: .text:00408764↑j
.text:00408771                 add     esp, 0Ch
.text:00408774                 mov     eax, esi
.text:00408776                 mov     edx, edi
.text:00408778                 pop     ebx
.text:00408779                 pop     esi
.text:0040877A                 pop     edi
.text:0040877B                 pop     ebp
.text:0040877C                 retn
.text:0040877D ; ---------------------------------------------------------------------------
.text:0040877D
.text:0040877D loc_40877D:                             ; CODE XREF: .text:0040874C↑j
.text:0040877D                 call    GetLastError
.text:00408782                 test    eax, eax
.text:00408784                 jnz     short loc_408762
.text:00408786                 jmp     short loc_40874E
.text:00408786 ; ---------------------------------------------------------------------------
.text:00408788                 align 10h
.text:00408790
.text:00408790 ; =============== S U B R O U T I N E =======================================
.text:00408790
.text:00408790
.text:00408790 ; int __cdecl sub_408790(LPCSTR lpFileName, int)
.text:00408790 sub_408790      proc near               ; CODE XREF: sub_406160+2B71↓p
.text:00408790
.text:00408790 lpRootPathName  = dword ptr -8FCh
.text:00408790 lpVolumeNameBuffer= dword ptr -8F8h
.text:00408790 nVolumeNameSize = dword ptr -8F4h
.text:00408790 lpVolumeSerialNumber= dword ptr -8F0h
.text:00408790 lpMaximumComponentLength= dword ptr -8ECh
.text:00408790 lpFileSystemFlags= dword ptr -8E8h
.text:00408790 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00408790 nFileSystemNameSize= dword ptr -8E0h
.text:00408790 VolumeSerialNumber= dword ptr -8D8h
.text:00408790 MaximumComponentLength= dword ptr -8D4h
.text:00408790 FileSystemFlags = dword ptr -8D0h
.text:00408790 var_8CC         = dword ptr -8CCh
.text:00408790 var_8C8         = dword ptr -8C8h
.text:00408790 var_8C4         = dword ptr -8C4h
.text:00408790 var_8C0         = dword ptr -8C0h
.text:00408790 var_8BC         = dword ptr -8BCh
.text:00408790 var_8B8         = dword ptr -8B8h
.text:00408790 var_8B4         = dword ptr -8B4h
.text:00408790 var_8B0         = dword ptr -8B0h
.text:00408790 var_8AC         = dword ptr -8ACh
.text:00408790 var_8A8         = dword ptr -8A8h
.text:00408790 var_8A4         = dword ptr -8A4h
.text:00408790 var_8A0         = dword ptr -8A0h
.text:00408790 var_89C         = dword ptr -89Ch
.text:00408790 FileSystemNameBuffer= byte ptr -88Ch
.text:00408790 VolumeNameBuffer= byte ptr -48Ch
.text:00408790 var_8C          = dword ptr -8Ch
.text:00408790 var_88          = dword ptr -88h
.text:00408790 var_84          = dword ptr -84h
.text:00408790 var_80          = dword ptr -80h
.text:00408790 var_7C          = dword ptr -7Ch
.text:00408790 var_78          = dword ptr -78h
.text:00408790 var_74          = dword ptr -74h
.text:00408790 var_70          = dword ptr -70h
.text:00408790 var_6C          = dword ptr -6Ch
.text:00408790 var_5C          = dword ptr -5Ch
.text:00408790 var_58          = dword ptr -58h
.text:00408790 var_54          = dword ptr -54h
.text:00408790 var_50          = dword ptr -50h
.text:00408790 var_4C          = dword ptr -4Ch
.text:00408790 var_48          = dword ptr -48h
.text:00408790 var_44          = dword ptr -44h
.text:00408790 var_3C          = dword ptr -3Ch
.text:00408790 var_38          = dword ptr -38h
.text:00408790 var_34          = dword ptr -34h
.text:00408790 lpFileName      = dword ptr  4
.text:00408790 arg_4           = dword ptr  8
.text:00408790
.text:00408790                 push    ebp
.text:00408791                 xor     eax, eax
.text:00408793                 mov     ecx, 0Dh
.text:00408798                 push    edi
.text:00408799                 push    esi
.text:0040879A                 push    ebx
.text:0040879B                 sub     esp, 8ECh
.text:004087A1                 lea     edi, [esp+8FCh+var_5C]
.text:004087A8                 cld
.text:004087A9                 lea     edx, [esp+8FCh+var_8C]
.text:004087B0                 rep stosd
.text:004087B2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:004087B6                 lea     esi, [esp+8FCh+var_5C]
.text:004087BD                 mov     edx, [esp+8FCh+lpFileName]
.text:004087C4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:004087C7                 call    sub_4071F0
.text:004087CC                 test    eax, eax
.text:004087CE                 mov     edx, 0FFFFFFFFh
.text:004087D3                 jz      loc_408B64
.text:004087D9                 mov     edx, [esp+8FCh+var_88]
.text:004087E0                 mov     ebp, [esp+8FCh+var_84]
.text:004087E7                 mov     edi, [esp+8FCh+var_80]
.text:004087EE                 mov     [esp+8FCh+var_58], edx
.text:004087F5                 mov     ecx, [esp+8FCh+var_7C]
.text:004087FC                 mov     ebx, [esp+8FCh+var_8C]
.text:00408803                 mov     [esp+8FCh+var_54], ebp
.text:0040880A                 mov     edx, [esp+8FCh+var_78]
.text:00408811                 mov     ebp, [esp+8FCh+var_74]
.text:00408818                 mov     [esp+8FCh+var_50], edi
.text:0040881F                 test    bl, 10h
.text:00408822                 mov     edi, [esp+8FCh+var_70]
.text:00408829                 mov     [esp+8FCh+var_4C], ecx
.text:00408830                 mov     ecx, [esp+8FCh+var_6C]
.text:00408837                 mov     [esp+8FCh+var_5C], ebx
.text:0040883E                 mov     [esp+8FCh+var_48], edx
.text:00408845                 mov     [esp+8FCh+var_44], ebp
.text:0040884C                 mov     [esp+8FCh+var_3C], edi
.text:00408853                 mov     [esp+8FCh+var_38], ecx
.text:0040885A                 jnz     loc_408B80
.text:00408860                 mov     ebx, 1
.text:00408865                 mov     [esp+8FCh+var_34], ebx
.text:0040886C
.text:0040886C loc_40886C:                             ; CODE XREF: sub_408790+406↓j
.text:0040886C                 mov     eax, [esp+8FCh+lpFileName]
.text:00408873                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00408877                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040887B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040887E                 call    sub_40A650
.text:00408883                 mov     [esp+8FCh+lpRootPathName], eax
.text:00408886                 call    sub_406AE0
.text:0040888B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040888F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00408893                 mov     ebp, eax
.text:00408895                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00408899                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040889D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004088A4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004088A8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004088AC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004088B0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004088B8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004088C0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004088C3                 call    GetVolumeInformationA
.text:004088C8                 sub     esp, 20h
.text:004088CB                 test    eax, eax
.text:004088CD                 lea     edi, [esp+8FCh+var_8CC]
.text:004088D1                 setz    bl
.text:004088D4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004088D7                 xor     ebp, ebp
.text:004088D9                 movzx   edx, bl
.text:004088DC                 dec     edx
.text:004088DD                 xor     ebx, ebx
.text:004088DF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004088E3                 call    free
.text:004088E8                 cld
.text:004088E9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004088ED                 mov     [esi+1Ch], ecx
.text:004088F0                 mov     ecx, 0Dh
.text:004088F5                 rep movsd
.text:004088F7                 mov     edi, [esp+8FCh+var_8A0]
.text:004088FB                 mov     edx, [esp+8FCh+var_89C]
.text:004088FF                 mov     ecx, [esp+8FCh+var_8CC]
.text:00408903                 or      ebp, edi
.text:00408905                 mov     esi, [esp+8FCh+var_8B0]
.text:00408909                 mov     edi, [esp+8FCh+arg_4]
.text:00408910                 or      edx, ebx
.text:00408912                 mov     [edi+8], edx
.text:00408915                 xor     edx, edx
.text:00408917                 test    cl, 10h
.text:0040891A                 setz    dl
.text:0040891D                 mov     [edi+0Ch], ebp
.text:00408920                 mov     [edi+10h], esi
.text:00408923                 mov     dword ptr [edi+14h], 0
.text:0040892A                 dec     edx
.text:0040892B                 and     edx, 0FFFFC000h
.text:00408931                 add     edx, 8000h
.text:00408937                 or      edx, 124h
.text:0040893D                 test    cl, 1
.text:00408940                 movzx   eax, dx
.text:00408943                 jnz     short loc_40894A
.text:00408945                 or      eax, 92h
.text:0040894A
.text:0040894A loc_40894A:                             ; CODE XREF: sub_408790+1B3↑j
.text:0040894A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040894E                 xor     edx, edx
.text:00408950                 xor     ebp, ebp
.text:00408952                 mov     edi, [esp+8FCh+var_8AC]
.text:00408956                 mov     ecx, [esp+8FCh+arg_4]
.text:0040895D                 mov     esi, edi
.text:0040895F                 or      [ecx], eax
.text:00408961                 mov     edi, ebx
.text:00408963                 or      edi, ebp
.text:00408965                 mov     ebp, edx
.text:00408967                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040896B                 or      ebp, esi
.text:0040896D                 mov     esi, [esp+8FCh+arg_4]
.text:00408974                 mov     edx, [esp+8FCh+var_8BC]
.text:00408978                 mov     [esi+18h], ebx
.text:0040897B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040897F                 mov     ecx, edx
.text:00408981                 mov     [esi+30h], edi
.text:00408984                 xor     edx, edx
.text:00408986                 mov     [esi+34h], ebp
.text:00408989                 or      ebx, edx
.text:0040898B                 xor     esi, esi
.text:0040898D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408995                 or      esi, ecx
.text:00408997                 mov     edx, ebx
.text:00408999                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004089A1                 sub     edx, 0D53E8000h
.text:004089A7                 mov     ecx, esi
.text:004089A9                 sbb     ecx, 19DB1DEh
.text:004089AF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004089B3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004089B6                 call    sub_40EA70
.text:004089BB                 mov     edx, eax
.text:004089BD                 mov     ecx, [esp+8FCh+arg_4]
.text:004089C4                 shr     eax, 1Fh
.text:004089C7                 dec     eax
.text:004089C8                 and     edx, eax
.text:004089CA                 mov     [ecx+38h], edx
.text:004089CD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004089D0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004089D4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004089DC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004089E4                 call    sub_40EB90
.text:004089E9                 lea     ecx, [eax+eax*4]
.text:004089EC                 lea     ebx, [ecx+ecx*4]
.text:004089EF                 mov     eax, [esp+8FCh+arg_4]
.text:004089F6                 shl     ebx, 2
.text:004089F9                 mov     esi, ebx
.text:004089FB                 shr     esi, 1Fh
.text:004089FE                 dec     esi
.text:004089FF                 and     esi, ebx
.text:00408A01                 mov     [eax+3Ch], esi
.text:00408A04                 mov     edx, [esp+8FCh+var_8C4]
.text:00408A08                 xor     esi, esi
.text:00408A0A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408A12                 mov     ebx, [esp+8FCh+var_8C8]
.text:00408A16                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408A1E                 mov     ecx, edx
.text:00408A20                 xor     edx, edx
.text:00408A22                 or      ebx, edx
.text:00408A24                 or      esi, ecx
.text:00408A26                 mov     edx, ebx
.text:00408A28                 sub     edx, 0D53E8000h
.text:00408A2E                 mov     ecx, esi
.text:00408A30                 sbb     ecx, 19DB1DEh
.text:00408A36                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00408A3A                 mov     [esp+8FCh+lpRootPathName], edx
.text:00408A3D                 call    sub_40EA70
.text:00408A42                 mov     edx, eax
.text:00408A44                 mov     ecx, [esp+8FCh+arg_4]
.text:00408A4B                 shr     eax, 1Fh
.text:00408A4E                 dec     eax
.text:00408A4F                 and     edx, eax
.text:00408A51                 mov     [ecx+48h], edx
.text:00408A54                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00408A57                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00408A5B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408A63                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408A6B                 call    sub_40EB90
.text:00408A70                 lea     ecx, [eax+eax*4]
.text:00408A73                 lea     ebx, [ecx+ecx*4]
.text:00408A76                 mov     eax, [esp+8FCh+arg_4]
.text:00408A7D                 shl     ebx, 2
.text:00408A80                 mov     esi, ebx
.text:00408A82                 shr     esi, 1Fh
.text:00408A85                 dec     esi
.text:00408A86                 and     esi, ebx
.text:00408A88                 mov     [eax+4Ch], esi
.text:00408A8B                 mov     edx, [esp+8FCh+var_8B4]
.text:00408A8F                 xor     esi, esi
.text:00408A91                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408A99                 mov     ebx, [esp+8FCh+var_8B8]
.text:00408A9D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408AA5                 mov     ecx, edx
.text:00408AA7                 xor     edx, edx
.text:00408AA9                 or      ebx, edx
.text:00408AAB                 or      esi, ecx
.text:00408AAD                 mov     edx, ebx
.text:00408AAF                 sub     edx, 0D53E8000h
.text:00408AB5                 mov     ecx, esi
.text:00408AB7                 sbb     ecx, 19DB1DEh
.text:00408ABD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00408AC1                 mov     [esp+8FCh+lpRootPathName], edx
.text:00408AC4                 call    sub_40EA70
.text:00408AC9                 mov     edx, eax
.text:00408ACB                 mov     ecx, [esp+8FCh+arg_4]
.text:00408AD2                 shr     eax, 1Fh
.text:00408AD5                 dec     eax
.text:00408AD6                 and     edx, eax
.text:00408AD8                 mov     [ecx+40h], edx
.text:00408ADB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00408ADE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00408AE2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408AEA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408AF2                 call    sub_40EB90
.text:00408AF7                 lea     ebx, [eax+eax*4]
.text:00408AFA                 mov     esi, [esp+8FCh+arg_4]
.text:00408B01                 lea     edx, [ebx+ebx*4]
.text:00408B04                 shl     edx, 2
.text:00408B07                 mov     eax, edi
.text:00408B09                 mov     ecx, edx
.text:00408B0B                 mov     dword ptr [esi+50h], 200h
.text:00408B12                 shr     ecx, 1Fh
.text:00408B15                 dec     ecx
.text:00408B16                 and     ecx, edx
.text:00408B18                 test    ebp, ebp
.text:00408B1A                 mov     edx, ebp
.text:00408B1C                 mov     [esi+44h], ecx
.text:00408B1F                 js      short loc_408B71
.text:00408B21
.text:00408B21 loc_408B21:                             ; CODE XREF: sub_408790+3E9↓j
.text:00408B21                 xor     esi, esi
.text:00408B23                 mov     ebp, edi
.text:00408B25                 mov     ecx, eax
.text:00408B27                 shrd    ecx, edx, 9
.text:00408B2B                 mov     ebx, edx
.text:00408B2D                 and     ebp, 1FFh
.text:00408B33                 mov     eax, esi
.text:00408B35                 sar     ebx, 9
.text:00408B38                 or      eax, ebp
.text:00408B3A                 jz      short loc_408B42
.text:00408B3C                 add     ecx, 1
.text:00408B3F                 adc     ebx, 0
.text:00408B42
.text:00408B42 loc_408B42:                             ; CODE XREF: sub_408790+3AA↑j
.text:00408B42                 mov     edx, [esp+8FCh+arg_4]
.text:00408B49                 mov     [edx+5Ch], ebx
.text:00408B4C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00408B53                 mov     [edx+58h], ecx
.text:00408B56                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00408B5A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00408B5D                 call    sub_4079B0
.text:00408B62                 xor     edx, edx
.text:00408B64
.text:00408B64 loc_408B64:                             ; CODE XREF: sub_408790+43↑j
.text:00408B64                 add     esp, 8ECh
.text:00408B6A                 mov     eax, edx
.text:00408B6C                 pop     ebx
.text:00408B6D                 pop     esi
.text:00408B6E                 pop     edi
.text:00408B6F                 pop     ebp
.text:00408B70                 retn
.text:00408B71 ; ---------------------------------------------------------------------------
.text:00408B71
.text:00408B71 loc_408B71:                             ; CODE XREF: sub_408790+38F↑j
.text:00408B71                 add     eax, 1FFh
.text:00408B76                 adc     edx, 0
.text:00408B79                 jmp     short loc_408B21
.text:00408B79 ; ---------------------------------------------------------------------------
.text:00408B7B                 align 10h
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: sub_408790+CA↑j
.text:00408B80                 mov     eax, [esp+8FCh+lpFileName]
.text:00408B87                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00408B8A                 call    sub_407360
.text:00408B8F                 mov     [esp+8FCh+var_34], eax
.text:00408B96                 jmp     loc_40886C
.text:00408B96 sub_408790      endp
.text:00408B96
.text:00408B96 ; ---------------------------------------------------------------------------
.text:00408B9B                 align 10h
.text:00408BA0 ; START OF FUNCTION CHUNK FOR sub_406160
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: sub_406160+26↑j
.text:00408BA0                 cld
.text:00408BA1                 sub     esp, 2Ch
.text:00408BA4                 xor     eax, eax
.text:00408BA6                 mov     [esp+2Ch+var_10], ebx
.text:00408BAA                 mov     ecx, 18h
.text:00408BAF                 mov     ebx, [esp+2Ch+arg_0]
.text:00408BB3                 mov     [esp+2Ch+var_C], esi
.text:00408BB7                 mov     esi, [esp+2Ch+arg_4]
.text:00408BBB                 test    ebx, ebx
.text:00408BBD                 mov     [esp+2Ch+var_8], edi
.text:00408BC1                 mov     edi, esi
.text:00408BC3                 mov     [esp+2Ch+var_4], ebp
.text:00408BC7                 rep stosd
.text:00408BC9                 jz      short loc_408BD0
.text:00408BCB                 cmp     byte ptr [ebx], 0
.text:00408BCE                 jnz     short loc_408BE8
.text:00408BD0
.text:00408BD0 loc_408BD0:                             ; CODE XREF: sub_406160+2A69↑j
.text:00408BD0                 xor     edx, edx
.text:00408BD2
.text:00408BD2 loc_408BD2:                             ; CODE XREF: sub_406160+2A9F↓j
.text:00408BD2                                         ; sub_406160+2B48↓j
.text:00408BD2                 mov     ebx, [esp+2Ch+var_10]
.text:00408BD6                 mov     eax, edx
.text:00408BD8                 mov     esi, [esp+2Ch+var_C]
.text:00408BDC                 mov     edi, [esp+2Ch+var_8]
.text:00408BE0                 mov     ebp, [esp+2Ch+var_4]
.text:00408BE4                 add     esp, 2Ch
.text:00408BE7                 retn
.text:00408BE8 ; ---------------------------------------------------------------------------
.text:00408BE8
.text:00408BE8 loc_408BE8:                             ; CODE XREF: sub_406160+2A6E↑j
.text:00408BE8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00408BF0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00408BF3                 call    sub_40A570
.text:00408BF8                 test    eax, eax
.text:00408BFA                 mov     edx, 0FFFFFFFFh
.text:00408BFF                 jnz     short loc_408BD2
.text:00408C01                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00408C04                 call    sub_40A420
.text:00408C09                 mov     [esp+2Ch+lpFileName], eax
.text:00408C0C                 call    sub_406AE0
.text:00408C11                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00408C14                 mov     ebp, eax
.text:00408C16                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00408C1E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00408C26                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00408C2E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00408C36                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00408C3E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00408C46                 call    CreateFileA
.text:00408C4B                 sub     esp, 1Ch
.text:00408C4E                 mov     ebx, eax
.text:00408C50                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00408C54                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00408C57                 call    sub_4074E0
.text:00408C5C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00408C5F                 mov     edi, eax
.text:00408C61                 call    CloseHandle
.text:00408C66                 sub     esp, 4
.text:00408C69                 cmp     edi, 0FFFFFFFFh
.text:00408C6C                 jz      short loc_408CCA
.text:00408C6E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00408C72                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00408C75                 call    sub_4079B0
.text:00408C7A
.text:00408C7A loc_408C7A:                             ; CODE XREF: sub_406160+2B78↓j
.text:00408C7A                 mov     edx, [esi]
.text:00408C7C                 and     edx, 0F000h
.text:00408C82                 cmp     edx, 4000h
.text:00408C88                 jz      short loc_408CBD
.text:00408C8A
.text:00408C8A loc_408C8A:                             ; CODE XREF: sub_406160+2B68↓j
.text:00408C8A                 cmp     edi, 0FFFFFFFFh
.text:00408C8D                 jz      short loc_408CAD
.text:00408C8F
.text:00408C8F loc_408C8F:                             ; CODE XREF: sub_406160+2B5B↓j
.text:00408C8F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00408C96                 call    SetErrorMode
.text:00408C9B                 sub     esp, 4
.text:00408C9E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00408CA1                 call    free
.text:00408CA6                 mov     edx, edi
.text:00408CA8                 jmp     loc_408BD2
.text:00408CAD ; ---------------------------------------------------------------------------
.text:00408CAD
.text:00408CAD loc_408CAD:                             ; CODE XREF: sub_406160+2B2D↑j
.text:00408CAD                 call    sub_407190
.text:00408CB2                 mov     esi, eax
.text:00408CB4                 call    _errno
.text:00408CB9                 mov     [eax], esi
.text:00408CBB                 jmp     short loc_408C8F
.text:00408CBD ; ---------------------------------------------------------------------------
.text:00408CBD
.text:00408CBD loc_408CBD:                             ; CODE XREF: sub_406160+2B28↑j
.text:00408CBD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00408CC0                 call    sub_407360
.text:00408CC5                 mov     [esi+18h], eax
.text:00408CC8                 jmp     short loc_408C8A
.text:00408CCA ; ---------------------------------------------------------------------------
.text:00408CCA
.text:00408CCA loc_408CCA:                             ; CODE XREF: sub_406160+2B0C↑j
.text:00408CCA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00408CCE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00408CD1                 call    sub_408790
.text:00408CD6                 mov     edi, eax
.text:00408CD8                 jmp     short loc_408C7A
.text:00408CD8 ; END OF FUNCTION CHUNK FOR sub_406160
.text:00408CD8 ; ---------------------------------------------------------------------------
.text:00408CDA                 align 10h
.text:00408CE0
.text:00408CE0 ; =============== S U B R O U T I N E =======================================
.text:00408CE0
.text:00408CE0
.text:00408CE0 sub_408CE0      proc near               ; CODE XREF: sub_4061D0+12E↑p
.text:00408CE0
.text:00408CE0 lpBuffer        = dword ptr -1Ch
.text:00408CE0 pcbBuffer       = dword ptr -18h
.text:00408CE0 var_8           = dword ptr -8
.text:00408CE0 var_4           = dword ptr -4
.text:00408CE0
.text:00408CE0                 sub     esp, 1Ch
.text:00408CE3                 lea     edx, [esp+1Ch+var_8]
.text:00408CE7                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:00408CEB                 mov     [esp+1Ch+var_4], ebx
.text:00408CEF                 mov     [esp+1Ch+var_8], 101h
.text:00408CF7                 mov     [esp+1Ch+lpBuffer], offset byte_411650 ; lpBuffer
.text:00408CFE                 call    GetUserNameA
.text:00408D03                 sub     esp, 8
.text:00408D06                 mov     edx, offset byte_411650
.text:00408D0B                 test    eax, eax
.text:00408D0D                 jz      short loc_408D19
.text:00408D0F
.text:00408D0F loc_408D0F:                             ; CODE XREF: sub_408CE0+49↓j
.text:00408D0F                 mov     ebx, [esp+1Ch+var_4]
.text:00408D13                 mov     eax, edx
.text:00408D15                 add     esp, 1Ch
.text:00408D18                 retn
.text:00408D19 ; ---------------------------------------------------------------------------
.text:00408D19
.text:00408D19 loc_408D19:                             ; CODE XREF: sub_408CE0+2D↑j
.text:00408D19                 call    sub_407190
.text:00408D1E                 mov     ebx, eax
.text:00408D20                 call    _errno
.text:00408D25                 mov     [eax], ebx
.text:00408D27                 xor     edx, edx
.text:00408D29                 jmp     short loc_408D0F
.text:00408D29 sub_408CE0      endp
.text:00408D29
.text:00408D29 ; ---------------------------------------------------------------------------
.text:00408D2B                 align 10h
.text:00408D30
.text:00408D30 ; =============== S U B R O U T I N E =======================================
.text:00408D30
.text:00408D30
.text:00408D30 sub_408D30      proc near               ; CODE XREF: sub_4061D0+8A↑p
.text:00408D30                                         ; .text:0040D0CB↓p
.text:00408D30                 xor     eax, eax
.text:00408D32                 retn
.text:00408D32 sub_408D30      endp
.text:00408D32
.text:00408D32 ; ---------------------------------------------------------------------------
.text:00408D33                 align 10h
.text:00408D40
.text:00408D40 ; =============== S U B R O U T I N E =======================================
.text:00408D40
.text:00408D40
.text:00408D40 sub_408D40      proc near               ; CODE XREF: sub_4061D0+7E↑p
.text:00408D40                                         ; .text:0040D0A4↓p
.text:00408D40                 xor     eax, eax
.text:00408D42                 retn
.text:00408D42 sub_408D40      endp
.text:00408D42
.text:00408D42 ; ---------------------------------------------------------------------------
.text:00408D43                 align 10h
.text:00408D50
.text:00408D50 ; =============== S U B R O U T I N E =======================================
.text:00408D50
.text:00408D50
.text:00408D50 sub_408D50      proc near               ; CODE XREF: sub_406430+3↑p
.text:00408D50                                         ; sub_406450+B↑p ...
.text:00408D50
.text:00408D50 FileHandle      = dword ptr -1Ch
.text:00408D50 Offset          = qword ptr -18h
.text:00408D50 Origin          = dword ptr -10h
.text:00408D50 var_4           = dword ptr -4
.text:00408D50
.text:00408D50                 sub     esp, 1Ch
.text:00408D53                 mov     eax, FileHandle
.text:00408D58                 mov     [esp+1Ch+var_4], ebx
.text:00408D5C                 test    eax, eax
.text:00408D5E                 js      short loc_408DB0
.text:00408D60
.text:00408D60 loc_408D60:                             ; CODE XREF: sub_408D50+C5↓j
.text:00408D60                 mov     [esp+1Ch+Origin], 0 ; Origin
.text:00408D68                 mov     ebx, 0FFFFFFFFh
.text:00408D6D                 mov     dword ptr [esp+1Ch+Offset], 0 ; Offset
.text:00408D75                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:00408D7D                 mov     [esp+1Ch+FileHandle], eax ; FileHandle
.text:00408D80                 call    _lseeki64
.text:00408D85                 mov     word ptr ds:dword_411770, bx
.text:00408D8C                 xor     edx, edx
.text:00408D8E                 xor     eax, eax
.text:00408D90                 mov     ds:dword_411760, edx
.text:00408D96                 mov     edx, 1
.text:00408D9B                 mov     ds:dword_411764, eax
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: sub_408D50+DA↓j
.text:00408DA0                                         ; sub_408D50+F9↓j
.text:00408DA0                 mov     ebx, [esp+1Ch+var_4]
.text:00408DA4                 mov     eax, edx
.text:00408DA6                 add     esp, 1Ch
.text:00408DA9                 retn
.text:00408DA9 ; ---------------------------------------------------------------------------
.text:00408DAA                 align 10h
.text:00408DB0
.text:00408DB0 loc_408DB0:                             ; CODE XREF: sub_408D50+E↑j
.text:00408DB0                 mov     dword ptr [esp+1Ch+Offset], 2 ; OpenFlag
.text:00408DB8                 mov     ebx, FileName
.text:00408DBE                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:00408DC1                 call    _open
.text:00408DC6                 mov     FileHandle, eax
.text:00408DCB                 inc     eax
.text:00408DCC                 jz      short loc_408E2F
.text:00408DCE
.text:00408DCE loc_408DCE:                             ; CODE XREF: sub_408D50+F7↓j
.text:00408DCE                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:00408DD6                 mov     edx, FileHandle
.text:00408DDC                 mov     dword ptr [esp+1Ch+Offset], 1
.text:00408DE4                 mov     [esp+1Ch+FileHandle], edx
.text:00408DE7                 call    sub_40B4E0
.text:00408DEC                 test    eax, eax
.text:00408DEE                 js      short loc_408E0D
.text:00408DF0                 mov     dword ptr [esp+1Ch+Offset], 2
.text:00408DF8                 mov     edx, FileHandle
.text:00408DFE                 or      eax, 1
.text:00408E01                 mov     dword ptr [esp+1Ch+Offset+4], eax
.text:00408E05                 mov     [esp+1Ch+FileHandle], edx
.text:00408E08                 call    sub_40B4E0
.text:00408E0D
.text:00408E0D loc_408E0D:                             ; CODE XREF: sub_408D50+9E↑j
.text:00408E0D                 inc     eax
.text:00408E0E                 jz      short loc_408E1A
.text:00408E10                 mov     eax, FileHandle
.text:00408E15                 jmp     loc_408D60
.text:00408E1A ; ---------------------------------------------------------------------------
.text:00408E1A
.text:00408E1A loc_408E1A:                             ; CODE XREF: sub_408D50+BE↑j
.text:00408E1A                 mov     ecx, FileHandle
.text:00408E20                 mov     [esp+1Ch+FileHandle], ecx ; FileHandle
.text:00408E23                 call    _close
.text:00408E28                 xor     edx, edx
.text:00408E2A                 jmp     loc_408DA0
.text:00408E2F ; ---------------------------------------------------------------------------
.text:00408E2F
.text:00408E2F loc_408E2F:                             ; CODE XREF: sub_408D50+7C↑j
.text:00408E2F                 mov     dword ptr [esp+1Ch+Offset], 0 ; OpenFlag
.text:00408E37                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:00408E3A                 call    _open
.text:00408E3F                 mov     FileHandle, eax
.text:00408E44                 xor     edx, edx
.text:00408E46                 inc     eax
.text:00408E47                 jnz     short loc_408DCE
.text:00408E49                 jmp     loc_408DA0
.text:00408E49 sub_408D50      endp
.text:00408E49
.text:00408E49 ; ---------------------------------------------------------------------------
.text:00408E4E                 align 10h
.text:00408E50 aLibc05SrcLogin db '../../libc-0.5-src/login/utmp_file.c',0
.text:00408E50                                         ; DATA XREF: sub_408E90+136↓o
.text:00408E50                                         ; sub_408FE0+196↓o ...
.text:00408E75 aFileFd0        db 'file_fd >= 0',0     ; DATA XREF: sub_408E90+13E↓o
.text:00408E75                                         ; sub_408FE0+19E↓o ...
.text:00408E82                 align 10h
.text:00408E90
.text:00408E90 ; =============== S U B R O U T I N E =======================================
.text:00408E90
.text:00408E90
.text:00408E90 sub_408E90      proc near               ; CODE XREF: sub_406450+2A↑p
.text:00408E90                                         ; DATA XREF: .data:off_4100B8↓o
.text:00408E90
.text:00408E90 FileHandle      = dword ptr -5Ch
.text:00408E90 DstBuf          = dword ptr -58h
.text:00408E90 MaxCharCount    = dword ptr -54h
.text:00408E90 var_2C          = word ptr -2Ch
.text:00408E90 var_2A          = word ptr -2Ah
.text:00408E90 arg_0           = dword ptr  4
.text:00408E90 arg_4           = dword ptr  8
.text:00408E90
.text:00408E90                 push    ebp
.text:00408E91                 push    edi
.text:00408E92                 push    esi
.text:00408E93                 push    ebx
.text:00408E94                 sub     esp, 4Ch
.text:00408E97                 mov     esi, FileHandle
.text:00408E9D                 mov     ebx, [esp+5Ch+arg_0]
.text:00408EA1                 mov     ebp, [esp+5Ch+arg_4]
.text:00408EA5                 test    esi, esi
.text:00408EA7                 js      loc_408FBE
.text:00408EAD                 mov     ecx, ds:dword_411760
.text:00408EB3                 mov     eax, ds:dword_411764
.text:00408EB8                 and     ecx, eax
.text:00408EBA                 inc     ecx
.text:00408EBB                 jz      loc_408FB0
.text:00408EC1                 cld
.text:00408EC2                 xor     eax, eax
.text:00408EC4                 lea     edi, [esp+5Ch+var_2C]
.text:00408EC8                 mov     ecx, 4
.text:00408ECD                 rep stosd
.text:00408ECF                 mov     [esp+5Ch+var_2C], 1
.text:00408ED6                 lea     edi, [esp+5Ch+var_2C]
.text:00408EDA                 mov     [esp+5Ch+var_2A], 0
.text:00408EE1                 mov     [esp+5Ch+MaxCharCount], edi
.text:00408EE5                 mov     [esp+5Ch+DstBuf], 9
.text:00408EED                 mov     [esp+5Ch+FileHandle], esi
.text:00408EF0                 call    sub_40B4E0
.text:00408EF5                 test    eax, eax
.text:00408EF7                 js      loc_408FB0
.text:00408EFD                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00408F05                 mov     ecx, FileHandle
.text:00408F0B                 mov     [esp+5Ch+DstBuf], offset dword_411770 ; DstBuf
.text:00408F13                 mov     [esp+5Ch+FileHandle], ecx ; FileHandle
.text:00408F16                 call    _read
.text:00408F1B                 mov     [esp+5Ch+var_2C], 3
.text:00408F22                 mov     edx, FileHandle
.text:00408F28                 mov     esi, eax
.text:00408F2A                 mov     [esp+5Ch+MaxCharCount], edi
.text:00408F2E                 mov     [esp+5Ch+DstBuf], 9
.text:00408F36                 mov     [esp+5Ch+FileHandle], edx
.text:00408F39                 call    sub_40B4E0
.text:00408F3E                 cmp     esi, 180h
.text:00408F44                 jnz     short loc_408F92
.text:00408F46                 add     ds:dword_411760, 180h
.text:00408F50                 mov     edi, ebx
.text:00408F52                 mov     esi, offset dword_411770
.text:00408F57                 mov     eax, 180h
.text:00408F5C                 adc     ds:dword_411764, 0
.text:00408F63                 test    bl, 4
.text:00408F66                 jz      short loc_408F7D
.text:00408F68                 mov     edi, ds:dword_411770
.text:00408F6E                 mov     esi, offset unk_411774
.text:00408F73                 mov     eax, 17Ch
.text:00408F78                 mov     [ebx], edi
.text:00408F7A                 lea     edi, [ebx+4]
.text:00408F7D
.text:00408F7D loc_408F7D:                             ; CODE XREF: sub_408E90+D6↑j
.text:00408F7D                 cld
.text:00408F7E                 mov     ecx, eax
.text:00408F80                 shr     ecx, 2
.text:00408F83                 rep movsd
.text:00408F85                 mov     [ebp+0], ebx
.text:00408F88                 xor     eax, eax
.text:00408F8A
.text:00408F8A loc_408F8A:                             ; CODE XREF: sub_408E90+12C↓j
.text:00408F8A                 add     esp, 4Ch
.text:00408F8D                 pop     ebx
.text:00408F8E                 pop     esi
.text:00408F8F                 pop     edi
.text:00408F90                 pop     ebp
.text:00408F91                 retn
.text:00408F92 ; ---------------------------------------------------------------------------
.text:00408F92
.text:00408F92 loc_408F92:                             ; CODE XREF: sub_408E90+B4↑j
.text:00408F92                 test    esi, esi
.text:00408F94                 jz      short loc_408FB0
.text:00408F96                 mov     ebx, 0FFFFFFFFh
.text:00408F9B                 mov     esi, 0FFFFFFFFh
.text:00408FA0                 mov     ds:dword_411760, ebx
.text:00408FA6                 mov     ds:dword_411764, esi
.text:00408FAC                 lea     esi, [esi+0]
.text:00408FB0
.text:00408FB0 loc_408FB0:                             ; CODE XREF: sub_408E90+2B↑j
.text:00408FB0                                         ; sub_408E90+67↑j ...
.text:00408FB0                 mov     dword ptr [ebp+0], 0
.text:00408FB7                 mov     eax, 0FFFFFFFFh
.text:00408FBC                 jmp     short loc_408F8A
.text:00408FBE ; ---------------------------------------------------------------------------
.text:00408FBE
.text:00408FBE loc_408FBE:                             ; CODE XREF: sub_408E90+17↑j
.text:00408FBE                 mov     [esp+5Ch+MaxCharCount], 0A3h ; '£'
.text:00408FC6                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00408FCE                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00408FD5                 call    _assert
.text:00408FD5 sub_408E90      endp
.text:00408FD5
.text:00408FD5 ; ---------------------------------------------------------------------------
.text:00408FDA                 align 10h
.text:00408FE0
.text:00408FE0 ; =============== S U B R O U T I N E =======================================
.text:00408FE0
.text:00408FE0
.text:00408FE0 sub_408FE0      proc near               ; CODE XREF: sub_4064F0+33↑p
.text:00408FE0                                         ; DATA XREF: .data:off_4100C0↓o
.text:00408FE0
.text:00408FE0 FileHandle      = dword ptr -5Ch
.text:00408FE0 DstBuf          = dword ptr -58h
.text:00408FE0 MaxCharCount    = dword ptr -54h
.text:00408FE0 var_2C          = word ptr -2Ch
.text:00408FE0 var_2A          = word ptr -2Ah
.text:00408FE0 arg_0           = dword ptr  4
.text:00408FE0 arg_4           = dword ptr  8
.text:00408FE0 arg_8           = dword ptr  0Ch
.text:00408FE0
.text:00408FE0                 push    ebp
.text:00408FE1                 push    edi
.text:00408FE2                 push    esi
.text:00408FE3                 push    ebx
.text:00408FE4                 sub     esp, 4Ch
.text:00408FE7                 mov     ebx, FileHandle
.text:00408FED                 mov     esi, [esp+5Ch+arg_0]
.text:00408FF1                 mov     ebp, [esp+5Ch+arg_8]
.text:00408FF5                 test    ebx, ebx
.text:00408FF7                 js      loc_40916E
.text:00408FFD                 mov     ecx, ds:dword_411760
.text:00409003                 mov     eax, ds:dword_411764
.text:00409008                 and     ecx, eax
.text:0040900A                 inc     ecx
.text:0040900B                 jz      loc_409160
.text:00409011                 cld
.text:00409012                 xor     eax, eax
.text:00409014                 lea     edi, [esp+5Ch+var_2C]
.text:00409018                 mov     ecx, 4
.text:0040901D                 lea     edx, [esp+5Ch+var_2C]
.text:00409021                 rep stosd
.text:00409023                 mov     [esp+5Ch+var_2C], 1
.text:0040902A                 mov     [esp+5Ch+var_2A], 0
.text:00409031                 mov     [esp+5Ch+MaxCharCount], edx
.text:00409035                 mov     [esp+5Ch+DstBuf], 9
.text:0040903D                 mov     [esp+5Ch+FileHandle], ebx
.text:00409040                 call    sub_40B4E0
.text:00409045                 test    eax, eax
.text:00409047                 js      loc_409157
.text:0040904D                 lea     esi, [esi+0]
.text:00409050
.text:00409050 loc_409050:                             ; CODE XREF: sub_408FE0+B8↓j
.text:00409050                                         ; sub_408FE0+D7↓j
.text:00409050                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00409058                 mov     edi, FileHandle
.text:0040905E                 mov     [esp+5Ch+DstBuf], offset dword_411770 ; DstBuf
.text:00409066                 mov     [esp+5Ch+FileHandle], edi ; FileHandle
.text:00409069                 call    _read
.text:0040906E                 cmp     eax, 180h
.text:00409073                 jnz     loc_40912D
.text:00409079                 movzx   edx, word ptr ds:dword_411770
.text:00409080                 add     ds:dword_411760, 180h
.text:0040908A                 adc     ds:dword_411764, 0
.text:00409091                 sub     edx, 6
.text:00409094                 cmp     dx, 1
.text:00409098                 ja      short loc_409050
.text:0040909A                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:004090A2                 lea     ecx, [esi+8]
.text:004090A5                 mov     [esp+5Ch+DstBuf], offset Str2 ; Str2
.text:004090AD                 mov     [esp+5Ch+FileHandle], ecx ; Str1
.text:004090B0                 call    strncmp
.text:004090B5                 test    eax, eax
.text:004090B7                 jnz     short loc_409050
.text:004090B9                 test    byte ptr [esp+5Ch+arg_4], 4
.text:004090BE                 mov     esi, offset dword_411770
.text:004090C3                 mov     edi, [esp+5Ch+arg_4]
.text:004090C7                 mov     eax, 180h
.text:004090CC                 jz      short loc_4090E7
.text:004090CE                 mov     esi, ds:dword_411770
.text:004090D4                 mov     eax, 17Ch
.text:004090D9                 mov     [edi], esi
.text:004090DB                 mov     edi, [esp+5Ch+arg_4]
.text:004090DF                 mov     esi, offset unk_411774
.text:004090E4                 add     edi, 4
.text:004090E7
.text:004090E7 loc_4090E7:                             ; CODE XREF: sub_408FE0+EC↑j
.text:004090E7                 cld
.text:004090E8                 mov     ecx, eax
.text:004090EA                 shr     ecx, 2
.text:004090ED                 rep movsd
.text:004090EF                 mov     eax, [esp+5Ch+arg_4]
.text:004090F3                 mov     [ebp+0], eax
.text:004090F6
.text:004090F6 loc_4090F6:                             ; CODE XREF: sub_408FE0+175↓j
.text:004090F6                 mov     [esp+5Ch+var_2C], 3
.text:004090FD                 mov     ebx, FileHandle
.text:00409103                 lea     edi, [esp+5Ch+var_2C]
.text:00409107                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040910B                 mov     [esp+5Ch+DstBuf], 9
.text:00409113                 mov     [esp+5Ch+FileHandle], ebx
.text:00409116                 call    sub_40B4E0
.text:0040911B
.text:0040911B loc_40911B:                             ; CODE XREF: sub_408FE0+17E↓j
.text:0040911B                 xor     eax, eax
.text:0040911D                 cmp     dword ptr [ebp+0], 0
.text:00409121                 setnz   al
.text:00409124                 dec     eax
.text:00409125
.text:00409125 loc_409125:                             ; CODE XREF: sub_408FE0+18C↓j
.text:00409125                 add     esp, 4Ch
.text:00409128                 pop     ebx
.text:00409129                 pop     esi
.text:0040912A                 pop     edi
.text:0040912B                 pop     ebp
.text:0040912C                 retn
.text:0040912D ; ---------------------------------------------------------------------------
.text:0040912D
.text:0040912D loc_40912D:                             ; CODE XREF: sub_408FE0+93↑j
.text:0040912D                 call    _errno
.text:00409132                 mov     dword ptr [eax], 3
.text:00409138                 mov     ebx, 0FFFFFFFFh
.text:0040913D                 mov     ecx, 0FFFFFFFFh
.text:00409142                 mov     ds:dword_411760, ebx
.text:00409148                 mov     ds:dword_411764, ecx
.text:0040914E                 mov     dword ptr [ebp+0], 0
.text:00409155                 jmp     short loc_4090F6
.text:00409157 ; ---------------------------------------------------------------------------
.text:00409157
.text:00409157 loc_409157:                             ; CODE XREF: sub_408FE0+67↑j
.text:00409157                 mov     dword ptr [ebp+0], 0
.text:0040915E                 jmp     short loc_40911B
.text:00409160 ; ---------------------------------------------------------------------------
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: sub_408FE0+2B↑j
.text:00409160                 mov     dword ptr [ebp+0], 0
.text:00409167                 mov     eax, 0FFFFFFFFh
.text:0040916C                 jmp     short loc_409125
.text:0040916E ; ---------------------------------------------------------------------------
.text:0040916E
.text:0040916E loc_40916E:                             ; CODE XREF: sub_408FE0+17↑j
.text:0040916E                 mov     [esp+5Ch+MaxCharCount], 129h
.text:00409176                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040917E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00409185                 call    _assert
.text:00409185 sub_408FE0      endp
.text:00409185
.text:00409185 ; ---------------------------------------------------------------------------
.text:0040918A                 align 10h
.text:00409190
.text:00409190 ; =============== S U B R O U T I N E =======================================
.text:00409190
.text:00409190
.text:00409190 ; int __cdecl sub_409190(void *Buf)
.text:00409190 sub_409190      proc near               ; CODE XREF: sub_406540+21↑p
.text:00409190                                         ; DATA XREF: .data:off_4100C4↓o
.text:00409190
.text:00409190 Str1            = dword ptr -1ECh
.text:00409190 Str2            = dword ptr -1E8h
.text:00409190 MaxCount        = dword ptr -1E4h
.text:00409190 Origin          = dword ptr -1E0h
.text:00409190 var_1D0         = dword ptr -1D0h
.text:00409190 var_1AC         = word ptr -1ACh
.text:00409190 var_1AA         = word ptr -1AAh
.text:00409190 var_19C         = byte ptr -19Ch
.text:00409190 Buf             = dword ptr  4
.text:00409190
.text:00409190                 push    ebp
.text:00409191                 push    edi
.text:00409192                 push    esi
.text:00409193                 push    ebx
.text:00409194                 sub     esp, 1DCh
.text:0040919A                 mov     ebx, FileHandle
.text:004091A0                 mov     ebp, [esp+1ECh+Buf]
.text:004091A7                 test    ebx, ebx
.text:004091A9                 js      loc_4094A0
.text:004091AF                 mov     edx, ds:dword_411764
.text:004091B5                 mov     eax, ds:dword_411760
.text:004091BA                 test    edx, edx
.text:004091BC                 js      loc_409430
.text:004091C2                 test    edx, edx
.text:004091C4                 jle     loc_409496
.text:004091CA
.text:004091CA loc_4091CA:                             ; CODE XREF: sub_409190+30B↓j
.text:004091CA                 movzx   ecx, word ptr ds:dword_411770
.text:004091D1                 mov     edx, [ebp+0]
.text:004091D4                 cmp     cx, dx
.text:004091D7                 jz      loc_409470
.text:004091DD
.text:004091DD loc_4091DD:                             ; CODE XREF: sub_409190+2FB↓j
.text:004091DD                 lea     ebx, [ecx-5]
.text:004091E0                 cmp     bx, 3
.text:004091E4                 ja      loc_409430
.text:004091EA                 lea     ecx, [edx-5]
.text:004091ED                 cmp     cx, 3
.text:004091F1                 ja      loc_409430
.text:004091F7                 cmp     ds:byte_411798, 0
.text:004091FE                 jz      short loc_40920A
.text:00409200                 cmp     byte ptr [ebp+28h], 0
.text:00409204                 jnz     loc_40944F
.text:0040920A
.text:0040920A loc_40920A:                             ; CODE XREF: sub_409190+6E↑j
.text:0040920A                 mov     [esp+1ECh+MaxCount], 20h ; ' ' ; MaxCount
.text:00409212                 lea     esi, [ebp+8]
.text:00409215                 mov     [esp+1ECh+Str2], esi ; Str2
.text:00409219                 mov     [esp+1ECh+Str1], offset Str2 ; Str1
.text:00409220
.text:00409220 loc_409220:                             ; CODE XREF: sub_409190+2D5↓j
.text:00409220                 call    strncmp
.text:00409225                 test    eax, eax
.text:00409227                 jnz     loc_409430
.text:0040922D                 mov     ebx, FileHandle
.text:00409233                 lea     esi, [esi+0]
.text:00409239                 lea     edi, [edi+0]
.text:00409240
.text:00409240 loc_409240:                             ; CODE XREF: sub_409190+2E7↓j
.text:00409240                                         ; sub_409190+2F1↓j ...
.text:00409240                 mov     [esp+1ECh+var_1D0], 1
.text:00409248                 nop
.text:00409249                 lea     esi, [esi+0]
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: sub_409190+2BA↓j
.text:00409250                 cld
.text:00409251                 xor     eax, eax
.text:00409253                 lea     edi, [esp+1ECh+var_1AC]
.text:00409257                 mov     ecx, 4
.text:0040925C                 rep stosd
.text:0040925E                 mov     [esp+1ECh+Str1], ebx
.text:00409261                 lea     edi, [esp+1ECh+var_1AC]
.text:00409265                 xor     ebx, ebx
.text:00409267                 mov     [esp+1ECh+var_1AC], 2
.text:0040926E                 mov     [esp+1ECh+var_1AA], 0
.text:00409275                 mov     [esp+1ECh+MaxCount], edi
.text:00409279                 mov     [esp+1ECh+Str2], 9
.text:00409281                 call    sub_40B4E0
.text:00409286                 test    eax, eax
.text:00409288                 js      loc_409325
.text:0040928E                 mov     ebx, [esp+1ECh+var_1D0]
.text:00409292                 test    ebx, ebx
.text:00409294                 js      loc_409370
.text:0040929A                 mov     [esp+1ECh+Origin], 0 ; Origin
.text:004092A2                 mov     ebx, ds:dword_411760
.text:004092A8                 mov     esi, ds:dword_411764
.text:004092AE                 mov     edx, FileHandle
.text:004092B4                 add     ebx, 0FFFFFE80h
.text:004092BA                 adc     esi, 0FFFFFFFFh
.text:004092BD                 mov     ds:dword_411760, ebx
.text:004092C3                 mov     ds:dword_411764, esi
.text:004092C9                 mov     [esp+1ECh+Str2], ebx ; Offset
.text:004092CD                 mov     [esp+1ECh+MaxCount], esi
.text:004092D1                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:004092D4                 call    _lseeki64
.text:004092D9
.text:004092D9 loc_4092D9:                             ; CODE XREF: sub_409190+238↓j
.text:004092D9                                         ; sub_409190+290↓j
.text:004092D9                 mov     [esp+1ECh+MaxCount], 180h ; MaxCharCount
.text:004092E1                 mov     ecx, FileHandle
.text:004092E7                 mov     [esp+1ECh+Str2], ebp ; Buf
.text:004092EB                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:004092EE                 call    _write
.text:004092F3                 cmp     eax, 180h
.text:004092F8                 jz      short loc_409356
.text:004092FA                 mov     ebp, [esp+1ECh+var_1D0]
.text:004092FE                 test    ebp, ebp
.text:00409300                 js      short loc_409332
.text:00409302
.text:00409302 loc_409302:                             ; CODE XREF: sub_409190+1C4↓j
.text:00409302                 xor     ebx, ebx
.text:00409304
.text:00409304 loc_409304:                             ; CODE XREF: sub_409190+1D9↓j
.text:00409304                                         ; sub_409190+296↓j
.text:00409304                 mov     [esp+1ECh+MaxCount], edi
.text:00409308                 mov     edi, FileHandle
.text:0040930E                 mov     [esp+1ECh+var_1AC], 3
.text:00409315                 mov     [esp+1ECh+Str2], 9
.text:0040931D                 mov     [esp+1ECh+Str1], edi
.text:00409320                 call    sub_40B4E0
.text:00409325
.text:00409325 loc_409325:                             ; CODE XREF: sub_409190+F8↑j
.text:00409325                 add     esp, 1DCh
.text:0040932B                 mov     eax, ebx
.text:0040932D                 pop     ebx
.text:0040932E                 pop     esi
.text:0040932F                 pop     edi
.text:00409330                 pop     ebp
.text:00409331                 retn
.text:00409332 ; ---------------------------------------------------------------------------
.text:00409332
.text:00409332 loc_409332:                             ; CODE XREF: sub_409190+170↑j
.text:00409332                 mov     ebx, ds:dword_411760
.text:00409338                 mov     esi, ds:dword_411764
.text:0040933E                 mov     edx, FileHandle
.text:00409344                 mov     [esp+1ECh+Str2], ebx
.text:00409348                 mov     [esp+1ECh+MaxCount], esi
.text:0040934C                 mov     [esp+1ECh+Str1], edx
.text:0040934F                 call    sub_40B310
.text:00409354                 jmp     short loc_409302
.text:00409356 ; ---------------------------------------------------------------------------
.text:00409356
.text:00409356 loc_409356:                             ; CODE XREF: sub_409190+168↑j
.text:00409356                 add     ds:dword_411760, 180h
.text:00409360                 mov     ebx, ebp
.text:00409362                 adc     ds:dword_411764, 0
.text:00409369                 jmp     short loc_409304
.text:00409369 ; ---------------------------------------------------------------------------
.text:0040936B                 align 10h
.text:00409370
.text:00409370 loc_409370:                             ; CODE XREF: sub_409190+104↑j
.text:00409370                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00409378                 mov     ecx, FileHandle
.text:0040937E                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00409386                 mov     [esp+1ECh+MaxCount], 0
.text:0040938E                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00409391                 call    _lseeki64
.text:00409396                 mov     ds:dword_411760, eax
.text:0040939B                 mov     esi, eax
.text:0040939D                 mov     ebx, eax
.text:0040939F                 mov     [esp+1ECh+MaxCount], 180h
.text:004093A7                 sar     esi, 1Fh
.text:004093AA                 mov     ds:dword_411764, esi
.text:004093B0                 mov     [esp+1ECh+Origin], 0
.text:004093B8                 mov     [esp+1ECh+Str1], eax
.text:004093BB                 mov     [esp+1ECh+Str2], esi
.text:004093BF                 call    sub_40E750
.text:004093C4                 mov     ecx, edx
.text:004093C6                 or      ecx, eax
.text:004093C8                 jz      loc_4092D9
.text:004093CE                 sub     ebx, eax
.text:004093D0                 mov     ecx, ebx
.text:004093D2                 sbb     esi, edx
.text:004093D4                 xor     ebx, ebx
.text:004093D6                 mov     ds:dword_411764, esi
.text:004093DC                 mov     [esp+1ECh+MaxCount], esi
.text:004093E0                 mov     esi, FileHandle
.text:004093E6                 mov     ds:dword_411760, ecx
.text:004093EC                 mov     [esp+1ECh+Str2], ecx
.text:004093F0                 mov     [esp+1ECh+Str1], esi
.text:004093F3                 call    sub_40B310
.text:004093F8                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00409400                 mov     edx, FileHandle
.text:00409406                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:0040940E                 mov     [esp+1ECh+MaxCount], 0
.text:00409416                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00409419                 call    _lseeki64
.text:0040941E                 test    eax, eax
.text:00409420                 jns     loc_4092D9
.text:00409426                 jmp     loc_409304
.text:00409426 ; ---------------------------------------------------------------------------
.text:0040942B                 align 10h
.text:00409430
.text:00409430 loc_409430:                             ; CODE XREF: sub_409190+2C↑j
.text:00409430                                         ; sub_409190+54↑j ...
.text:00409430                 mov     [esp+1ECh+Str1], ebp ; int
.text:00409433                 lea     edi, [esp+1ECh+var_19C]
.text:00409437                 mov     [esp+1ECh+Str2], edi ; void *
.text:0040943B                 call    sub_409720
.text:00409440                 mov     [esp+1ECh+var_1D0], eax
.text:00409444                 mov     ebx, FileHandle
.text:0040944A                 jmp     loc_409250
.text:0040944F ; ---------------------------------------------------------------------------
.text:0040944F
.text:0040944F loc_40944F:                             ; CODE XREF: sub_409190+74↑j
.text:0040944F                 mov     [esp+1ECh+MaxCount], 4
.text:00409457                 lea     edx, [ebp+28h]
.text:0040945A                 mov     [esp+1ECh+Str2], edx
.text:0040945E                 mov     [esp+1ECh+Str1], offset byte_411798
.text:00409465                 jmp     loc_409220
.text:00409465 ; ---------------------------------------------------------------------------
.text:0040946A                 align 10h
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_409190+47↑j
.text:00409470                 lea     esi, [edx-1]
.text:00409473                 cmp     si, 1
.text:00409477                 jbe     loc_409240
.text:0040947D                 cmp     dx, 4
.text:00409481                 jz      loc_409240
.text:00409487                 cmp     dx, 3
.text:0040948B                 jnz     loc_4091DD
.text:00409491                 jmp     loc_409240
.text:00409496 ; ---------------------------------------------------------------------------
.text:00409496
.text:00409496 loc_409496:                             ; CODE XREF: sub_409190+34↑j
.text:00409496                 cmp     eax, 0
.text:00409499                 jbe     short loc_409430
.text:0040949B                 jmp     loc_4091CA
.text:004094A0 ; ---------------------------------------------------------------------------
.text:004094A0
.text:004094A0 loc_4094A0:                             ; CODE XREF: sub_409190+19↑j
.text:004094A0                 mov     [esp+1ECh+MaxCount], 160h
.text:004094A8                 mov     [esp+1ECh+Str2], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:004094B0                 mov     [esp+1ECh+Str1], offset aFileFd0 ; "file_fd >= 0"
.text:004094B7                 call    _assert
.text:004094B7 sub_409190      endp
.text:004094B7
.text:004094B7 ; ---------------------------------------------------------------------------
.text:004094BC                 align 10h
.text:004094C0
.text:004094C0 ; =============== S U B R O U T I N E =======================================
.text:004094C0
.text:004094C0
.text:004094C0 ; int __cdecl sub_4094C0(char *, void *Buf)
.text:004094C0 sub_4094C0      proc near               ; DATA XREF: .data:004100CC↓o
.text:004094C0
.text:004094C0 FileName        = dword ptr -6Ch
.text:004094C0 OpenFlag        = dword ptr -68h
.text:004094C0 MaxCharCount    = dword ptr -64h
.text:004094C0 Origin          = dword ptr -60h
.text:004094C0 var_50          = dword ptr -50h
.text:004094C0 var_2C          = word ptr -2Ch
.text:004094C0 var_2A          = word ptr -2Ah
.text:004094C0 arg_0           = dword ptr  4
.text:004094C0 Buf             = dword ptr  8
.text:004094C0
.text:004094C0                 push    ebp
.text:004094C1                 push    edi
.text:004094C2                 push    esi
.text:004094C3                 push    ebx
.text:004094C4                 sub     esp, 5Ch
.text:004094C7                 mov     edx, [esp+6Ch+arg_0]
.text:004094CB                 mov     [esp+6Ch+var_50], 0FFFFFFFFh
.text:004094D3                 mov     [esp+6Ch+OpenFlag], 1 ; OpenFlag
.text:004094DB                 mov     [esp+6Ch+FileName], edx ; FileName
.text:004094DE                 call    _open
.text:004094E3                 mov     ebp, eax
.text:004094E5                 test    ebp, ebp
.text:004094E7                 mov     eax, 0FFFFFFFFh
.text:004094EC                 js      loc_4095FD
.text:004094F2                 cld
.text:004094F3                 xor     eax, eax
.text:004094F5                 lea     edi, [esp+6Ch+var_2C]
.text:004094F9                 mov     ecx, 4
.text:004094FE                 rep stosd
.text:00409500                 mov     [esp+6Ch+var_2C], 2
.text:00409507                 lea     edi, [esp+6Ch+var_2C]
.text:0040950B                 mov     [esp+6Ch+var_2A], 0
.text:00409512                 mov     [esp+6Ch+MaxCharCount], edi
.text:00409516                 mov     [esp+6Ch+OpenFlag], 9
.text:0040951E                 mov     [esp+6Ch+FileName], ebp
.text:00409521                 call    sub_40B4E0
.text:00409526                 test    eax, eax
.text:00409528                 js      loc_4095F1
.text:0040952E                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00409536                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:0040953E                 mov     [esp+6Ch+MaxCharCount], 0
.text:00409546                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00409549                 call    _lseeki64
.text:0040954E                 mov     [esp+6Ch+FileName], eax
.text:00409551                 mov     esi, eax
.text:00409553                 mov     ebx, eax
.text:00409555                 mov     [esp+6Ch+MaxCharCount], 180h
.text:0040955D                 sar     esi, 1Fh
.text:00409560                 mov     [esp+6Ch+Origin], 0
.text:00409568                 mov     [esp+6Ch+OpenFlag], esi
.text:0040956C                 call    sub_40E750
.text:00409571                 mov     ecx, edx
.text:00409573                 or      ecx, eax
.text:00409575                 jz      short loc_4095AF
.text:00409577                 mov     [esp+6Ch+FileName], ebp
.text:0040957A                 sub     ebx, eax
.text:0040957C                 sbb     esi, edx
.text:0040957E                 mov     [esp+6Ch+OpenFlag], ebx
.text:00409582                 mov     [esp+6Ch+MaxCharCount], esi
.text:00409586                 call    sub_40B310
.text:0040958B                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00409593                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:0040959B                 mov     [esp+6Ch+MaxCharCount], 0
.text:004095A3                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:004095A6                 call    _lseeki64
.text:004095AB                 test    eax, eax
.text:004095AD                 js      short loc_4095D6
.text:004095AF
.text:004095AF loc_4095AF:                             ; CODE XREF: sub_4094C0+B5↑j
.text:004095AF                 mov     [esp+6Ch+MaxCharCount], 180h ; MaxCharCount
.text:004095B7                 mov     edx, [esp+6Ch+Buf]
.text:004095BB                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:004095BE                 mov     [esp+6Ch+OpenFlag], edx ; Buf
.text:004095C2                 call    _write
.text:004095C7                 cmp     eax, 180h
.text:004095CC                 jnz     short loc_409605
.text:004095CE                 mov     [esp+6Ch+var_50], 0
.text:004095D6
.text:004095D6 loc_4095D6:                             ; CODE XREF: sub_4094C0+ED↑j
.text:004095D6                                         ; sub_4094C0+155↓j
.text:004095D6                 mov     [esp+6Ch+var_2C], 3
.text:004095DD                 mov     [esp+6Ch+MaxCharCount], edi
.text:004095E1                 mov     [esp+6Ch+OpenFlag], 9
.text:004095E9                 mov     [esp+6Ch+FileName], ebp
.text:004095EC                 call    sub_40B4E0
.text:004095F1
.text:004095F1 loc_4095F1:                             ; CODE XREF: sub_4094C0+68↑j
.text:004095F1                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:004095F4                 call    _close
.text:004095F9                 mov     eax, [esp+6Ch+var_50]
.text:004095FD
.text:004095FD loc_4095FD:                             ; CODE XREF: sub_4094C0+2C↑j
.text:004095FD                 add     esp, 5Ch
.text:00409600                 pop     ebx
.text:00409601                 pop     esi
.text:00409602                 pop     edi
.text:00409603                 pop     ebp
.text:00409604                 retn
.text:00409605 ; ---------------------------------------------------------------------------
.text:00409605
.text:00409605 loc_409605:                             ; CODE XREF: sub_4094C0+10C↑j
.text:00409605                 mov     [esp+6Ch+OpenFlag], ebx
.text:00409609                 mov     [esp+6Ch+MaxCharCount], esi
.text:0040960D                 mov     [esp+6Ch+FileName], ebp
.text:00409610                 call    sub_40B310
.text:00409615                 jmp     short loc_4095D6
.text:00409615 sub_4094C0      endp
.text:00409615
.text:00409615 ; ---------------------------------------------------------------------------
.text:00409617                 align 10h
.text:00409620
.text:00409620 ; =============== S U B R O U T I N E =======================================
.text:00409620
.text:00409620
.text:00409620 sub_409620      proc near               ; CODE XREF: sub_4064A0+33↑p
.text:00409620                                         ; DATA XREF: .data:off_4100BC↓o
.text:00409620
.text:00409620 var_1C          = dword ptr -1Ch
.text:00409620 var_18          = dword ptr -18h
.text:00409620 var_14          = dword ptr -14h
.text:00409620 var_10          = dword ptr -10h
.text:00409620 var_C           = dword ptr -0Ch
.text:00409620 var_8           = dword ptr -8
.text:00409620 var_4           = dword ptr -4
.text:00409620 arg_0           = dword ptr  4
.text:00409620 arg_4           = dword ptr  8
.text:00409620 arg_8           = dword ptr  0Ch
.text:00409620
.text:00409620                 sub     esp, 1Ch
.text:00409623                 mov     edx, FileHandle
.text:00409629                 mov     [esp+1Ch+var_10], ebx
.text:0040962D                 mov     ebx, [esp+1Ch+arg_4]
.text:00409631                 test    edx, edx
.text:00409633                 mov     [esp+1Ch+var_4], ebp
.text:00409637                 mov     ebp, [esp+1Ch+arg_8]
.text:0040963B                 mov     [esp+1Ch+var_C], esi
.text:0040963F                 mov     [esp+1Ch+var_8], edi
.text:00409643                 js      short loc_4096C2
.text:00409645                 mov     ecx, ds:dword_411760
.text:0040964B                 mov     eax, ds:dword_411764
.text:00409650                 and     ecx, eax
.text:00409652                 inc     ecx
.text:00409653                 jz      short loc_4096B4
.text:00409655                 mov     [esp+1Ch+var_18], offset dword_411770 ; void *
.text:0040965D                 mov     edx, [esp+1Ch+arg_0]
.text:00409661                 mov     [esp+1Ch+var_1C], edx ; int
.text:00409664                 call    sub_409720
.text:00409669                 test    eax, eax
.text:0040966B                 js      short loc_4096B4
.text:0040966D                 test    bl, 4
.text:00409670                 mov     edi, ebx
.text:00409672                 mov     esi, offset dword_411770
.text:00409677                 mov     eax, 180h
.text:0040967C                 jz      short loc_409693
.text:0040967E                 mov     esi, ds:dword_411770
.text:00409684                 lea     edi, [ebx+4]
.text:00409687                 mov     eax, 17Ch
.text:0040968C                 mov     [ebx], esi
.text:0040968E                 mov     esi, offset unk_411774
.text:00409693
.text:00409693 loc_409693:                             ; CODE XREF: sub_409620+5C↑j
.text:00409693                 cld
.text:00409694                 mov     ecx, eax
.text:00409696                 shr     ecx, 2
.text:00409699                 rep movsd
.text:0040969B                 mov     [ebp+0], ebx
.text:0040969E                 xor     eax, eax
.text:004096A0
.text:004096A0 loc_4096A0:                             ; CODE XREF: sub_409620+A0↓j
.text:004096A0                 mov     ebx, [esp+1Ch+var_10]
.text:004096A4                 mov     esi, [esp+1Ch+var_C]
.text:004096A8                 mov     edi, [esp+1Ch+var_8]
.text:004096AC                 mov     ebp, [esp+1Ch+var_4]
.text:004096B0                 add     esp, 1Ch
.text:004096B3                 retn
.text:004096B4 ; ---------------------------------------------------------------------------
.text:004096B4
.text:004096B4 loc_4096B4:                             ; CODE XREF: sub_409620+33↑j
.text:004096B4                                         ; sub_409620+4B↑j
.text:004096B4                 mov     dword ptr [ebp+0], 0
.text:004096BB                 mov     eax, 0FFFFFFFFh
.text:004096C0                 jmp     short loc_4096A0
.text:004096C2 ; ---------------------------------------------------------------------------
.text:004096C2
.text:004096C2 loc_4096C2:                             ; CODE XREF: sub_409620+23↑j
.text:004096C2                 mov     [esp+1Ch+var_14], 10Eh
.text:004096CA                 mov     [esp+1Ch+var_18], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:004096D2                 mov     [esp+1Ch+var_1C], offset aFileFd0 ; "file_fd >= 0"
.text:004096D9                 call    _assert
.text:004096D9 sub_409620      endp
.text:004096D9
.text:004096D9 ; ---------------------------------------------------------------------------
.text:004096DE                 align 10h
.text:004096E0
.text:004096E0 ; =============== S U B R O U T I N E =======================================
.text:004096E0
.text:004096E0
.text:004096E0 sub_4096E0      proc near               ; DATA XREF: .data:004100C8↓o
.text:004096E0
.text:004096E0 FileHandle      = dword ptr -0Ch
.text:004096E0 var_8           = dword ptr -8
.text:004096E0 var_4           = dword ptr -4
.text:004096E0
.text:004096E0                 sub     esp, 0Ch
.text:004096E3                 mov     eax, FileHandle
.text:004096E8                 test    eax, eax
.text:004096EA                 js      short loc_409703
.text:004096EC                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:004096EF                 call    _close
.text:004096F4                 mov     edx, 0FFFFFFFFh
.text:004096F9                 mov     FileHandle, edx
.text:004096FF                 add     esp, 0Ch
.text:00409702                 retn
.text:00409703 ; ---------------------------------------------------------------------------
.text:00409703
.text:00409703 loc_409703:                             ; CODE XREF: sub_4096E0+A↑j
.text:00409703                 mov     [esp+0Ch+var_4], 1A8h
.text:0040970B                 mov     [esp+0Ch+var_8], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00409713                 mov     [esp+0Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:0040971A                 call    _assert
.text:0040971A sub_4096E0      endp
.text:0040971A
.text:0040971A ; ---------------------------------------------------------------------------
.text:0040971F                 align 10h
.text:00409720
.text:00409720 ; =============== S U B R O U T I N E =======================================
.text:00409720
.text:00409720
.text:00409720 ; int __cdecl sub_409720(int, void *)
.text:00409720 sub_409720      proc near               ; CODE XREF: sub_409190+2AB↑p
.text:00409720                                         ; sub_409620+44↑p
.text:00409720
.text:00409720 FileHandle      = dword ptr -5Ch
.text:00409720 DstBuf          = dword ptr -58h
.text:00409720 MaxCharCount    = dword ptr -54h
.text:00409720 var_2C          = word ptr -2Ch
.text:00409720 var_2A          = word ptr -2Ah
.text:00409720 arg_0           = dword ptr  4
.text:00409720 arg_4           = dword ptr  8
.text:00409720
.text:00409720                 push    ebp
.text:00409721                 xor     eax, eax
.text:00409723                 mov     ecx, 4
.text:00409728                 push    edi
.text:00409729                 mov     ebp, 0FFFFFFFFh
.text:0040972E                 push    esi
.text:0040972F                 push    ebx
.text:00409730                 sub     esp, 4Ch
.text:00409733                 lea     edi, [esp+5Ch+var_2C]
.text:00409737                 cld
.text:00409738                 mov     esi, [esp+5Ch+arg_0]
.text:0040973C                 mov     ebx, [esp+5Ch+arg_4]
.text:00409740                 rep stosd
.text:00409742                 mov     [esp+5Ch+var_2C], 1
.text:00409749                 mov     edx, FileHandle
.text:0040974F                 lea     edi, [esp+5Ch+var_2C]
.text:00409753                 mov     [esp+5Ch+var_2A], 0
.text:0040975A                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040975E                 mov     [esp+5Ch+DstBuf], 9
.text:00409766                 mov     [esp+5Ch+FileHandle], edx
.text:00409769                 call    sub_40B4E0
.text:0040976E                 test    eax, eax
.text:00409770                 js      loc_40983B
.text:00409776                 movzx   edx, word ptr [esi]
.text:00409779                 lea     ecx, [edx-1]
.text:0040977C                 cmp     cx, 1
.text:00409780                 jbe     loc_409880
.text:00409786                 cmp     dx, 4
.text:0040978A                 jz      loc_409880
.text:00409790                 cmp     dx, 3
.text:00409794                 jz      loc_409880
.text:0040979A                 lea     esi, [esi+0]
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_409720+C0↓j
.text:004097A0                                         ; sub_409720+CC↓j ...
.text:004097A0                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:004097A8                 mov     edx, FileHandle
.text:004097AE                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:004097B2                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:004097B5                 call    _read
.text:004097BA                 cmp     eax, 180h
.text:004097BF                 jnz     loc_409859
.text:004097C5                 movzx   ecx, word ptr [ebx]
.text:004097C8                 add     ds:dword_411760, 180h
.text:004097D2                 adc     ds:dword_411764, 0
.text:004097D9                 sub     ecx, 5
.text:004097DC                 cmp     cx, 3
.text:004097E0                 ja      short loc_4097A0
.text:004097E2                 movzx   edx, word ptr [esi]
.text:004097E5                 sub     edx, 5
.text:004097E8                 cmp     dx, 3
.text:004097EC                 ja      short loc_4097A0
.text:004097EE                 cmp     byte ptr [ebx+28h], 0
.text:004097F2                 jz      short loc_4097FA
.text:004097F4                 cmp     byte ptr [esi+28h], 0
.text:004097F8                 jnz     short loc_409845
.text:004097FA
.text:004097FA loc_4097FA:                             ; CODE XREF: sub_409720+D2↑j
.text:004097FA                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00409802                 lea     edx, [esi+8]
.text:00409805                 lea     eax, [ebx+8]
.text:00409808                 mov     [esp+5Ch+DstBuf], edx ; Str2
.text:0040980C
.text:0040980C loc_40980C:                             ; CODE XREF: sub_409720+137↓j
.text:0040980C                 mov     [esp+5Ch+FileHandle], eax ; Str1
.text:0040980F                 call    strncmp
.text:00409814                 test    eax, eax
.text:00409816                 jnz     short loc_4097A0
.text:00409818
.text:00409818 loc_409818:                             ; CODE XREF: sub_409720+19A↓j
.text:00409818                 xor     ebp, ebp
.text:0040981A
.text:0040981A loc_40981A:                             ; CODE XREF: sub_409720+159↓j
.text:0040981A                 mov     [esp+5Ch+var_2C], 3
.text:00409821                 mov     esi, FileHandle
.text:00409827                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040982B                 mov     [esp+5Ch+DstBuf], 9
.text:00409833                 mov     [esp+5Ch+FileHandle], esi
.text:00409836                 call    sub_40B4E0
.text:0040983B
.text:0040983B loc_40983B:                             ; CODE XREF: sub_409720+50↑j
.text:0040983B                 add     esp, 4Ch
.text:0040983E                 mov     eax, ebp
.text:00409840                 pop     ebx
.text:00409841                 pop     esi
.text:00409842                 pop     edi
.text:00409843                 pop     ebp
.text:00409844                 retn
.text:00409845 ; ---------------------------------------------------------------------------
.text:00409845
.text:00409845 loc_409845:                             ; CODE XREF: sub_409720+D8↑j
.text:00409845                 mov     [esp+5Ch+MaxCharCount], 4
.text:0040984D                 lea     ecx, [esi+28h]
.text:00409850                 lea     eax, [ebx+28h]
.text:00409853                 mov     [esp+5Ch+DstBuf], ecx
.text:00409857                 jmp     short loc_40980C
.text:00409859 ; ---------------------------------------------------------------------------
.text:00409859
.text:00409859 loc_409859:                             ; CODE XREF: sub_409720+9F↑j
.text:00409859                                         ; sub_409720+17F↓j
.text:00409859                 call    _errno
.text:0040985E                 mov     dword ptr [eax], 3
.text:00409864                 mov     ebx, 0FFFFFFFFh
.text:00409869                 mov     eax, 0FFFFFFFFh
.text:0040986E                 mov     ds:dword_411760, eax
.text:00409873                 mov     ds:dword_411764, ebx
.text:00409879                 jmp     short loc_40981A
.text:00409879 ; ---------------------------------------------------------------------------
.text:0040987B                 align 10h
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: sub_409720+60↑j
.text:00409880                                         ; sub_409720+6A↑j ...
.text:00409880                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00409888                 mov     edx, FileHandle
.text:0040988E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:00409892                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:00409895                 call    _read
.text:0040989A                 cmp     eax, 180h
.text:0040989F                 jnz     short loc_409859
.text:004098A1                 add     ds:dword_411760, 180h
.text:004098AB                 movzx   ecx, word ptr [ebx]
.text:004098AE                 adc     ds:dword_411764, 0
.text:004098B5                 cmp     [esi], cx
.text:004098B8                 jnz     short loc_409880
.text:004098BA                 jmp     loc_409818
.text:004098BA sub_409720      endp
.text:004098BA
.text:004098BA ; ---------------------------------------------------------------------------
.text:004098BF                 db 11h dup(90h)
.text:004098D0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:00409AEF↓o
.text:004098DC aLu             db '%lu',0              ; DATA XREF: .text:00409AFF↓o
.text:004098E0 asc_4098E0      db ' ',0                ; DATA XREF: .text:loc_409BE8↓o
.text:004098E2                 align 10h
.text:004098F0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:004098F0                                         ; DATA XREF: .text:00409C1F↓o
.text:00409910 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_409C2D↓o
.text:0040991C aServer         db ' Server',0          ; DATA XREF: .text:00409C56↓o
.text:0040991C                                         ; .text:loc_409DCE↓o
.text:00409924 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_409C68↓o
.text:00409935 aDatacenterServ db ' Datacenter Server',0
.text:00409935                                         ; DATA XREF: .text:loc_409C72↓o
.text:00409948 aStandardEditio db ' Standard Edition',0
.text:00409948                                         ; DATA XREF: .text:00409C9A↓o
.text:0040995A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409CA4↓o
.text:00409967 aEnterpriseEdit db ' Enterprise Edition',0
.text:00409967                                         ; DATA XREF: .text:loc_409CAE↓o
.text:0040997B aDatacenterEdit db ' Datacenter Edition',0
.text:0040997B                                         ; DATA XREF: .text:loc_409CB8↓o
.text:0040998F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00409CCB↓o
.text:0040999D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409CD5↓o
.text:0040999D                                         ; .text:loc_409DE0↓o
.text:004099AB                 align 10h
.text:004099B0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:004099B0                                         ; DATA XREF: .text:00409D02↓o
.text:004099E0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00409D49↓o
.text:004099EC aWinnt          db 'WINNT',0            ; DATA XREF: .text:00409D84↓o
.text:004099F2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00409D9B↓o
.text:004099FB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409DB2↓o
.text:00409A04                 align 10h
.text:00409A10 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00409A10                                         ; DATA XREF: .text:00409F27↓o
.text:00409A33                 db 1Dh dup(90h)
.text:00409A50 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00409A50                                         ; DATA XREF: .text:00409F86↓o
.text:00409A76 ; ---------------------------------------------------------------------------
.text:00409A76
.text:00409A76 loc_409A76:                             ; DATA XREF: .text:loc_409FF1↓o
.text:00409A76                 and     [ebx+45h], dl
.text:00409A79                 add     [eax], ah
.text:00409A7B                 push    ebx
.text:00409A7C                 push    eax
.text:00409A7D                 xor     [eax], eax
.text:00409A7F
.text:00409A7F loc_409A7F:                             ; DATA XREF: .text:loc_40A06B↓o
.text:00409A7F                 and     [edi+53h], cl
.text:00409A82                 push    edx
.text:00409A83                 xor     al, [eax]
.text:00409A85                 lea     esi, [esi+0]
.text:00409A89                 lea     edi, [edi+0]
.text:00409A90                 push    edi
.text:00409A91                 push    esi
.text:00409A92                 push    ebx
.text:00409A93                 sub     esp, 130h
.text:00409A99                 mov     ebx, [esp+140h]
.text:00409AA0                 call    sub_40A1A0
.text:00409AA5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409AAA                 cmp     eax, 1
.text:00409AAD                 jz      loc_409F50
.text:00409AB3                 cmp     eax, 1
.text:00409AB6                 jb      loc_409F26
.text:00409ABC                 cmp     eax, 2
.text:00409ABF                 jz      loc_409B70
.text:00409AC5                 cmp     eax, 3
.text:00409AC8                 jz      short loc_409B2F
.text:00409ACA                 lea     esi, [esi+0]
.text:00409AD0
.text:00409AD0 loc_409AD0:                             ; CODE XREF: .text:00409B65↓j
.text:00409AD0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409AD6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409ADC
.text:00409ADC loc_409ADC:                             ; CODE XREF: .text:00409F6F↓j
.text:00409ADC                 mov     [esp+10h], edx
.text:00409AE0                 mov     ebx, [esp+144h]
.text:00409AE7                 mov     [esp+0Ch], ecx
.text:00409AEB                 mov     [esp+8], eax
.text:00409AEF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00409AF7                 mov     [esp], ebx
.text:00409AFA                 call    sprintf
.text:00409AFF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00409B07                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:00409B0D                 mov     ecx, [esp+148h]
.text:00409B14                 mov     [esp+8], edi
.text:00409B18                 mov     [esp], ecx
.text:00409B1B                 call    sprintf
.text:00409B20                 mov     eax, 1
.text:00409B25
.text:00409B25 loc_409B25:                             ; CODE XREF: .text:00409D1F↓j
.text:00409B25                                         ; .text:00409D6C↓j
.text:00409B25                 add     esp, 130h
.text:00409B2B                 pop     ebx
.text:00409B2C                 pop     esi
.text:00409B2D                 pop     edi
.text:00409B2E                 retn
.text:00409B2F ; ---------------------------------------------------------------------------
.text:00409B2F
.text:00409B2F loc_409B2F:                             ; CODE XREF: .text:00409AC8↑j
.text:00409B2F                 mov     dword ptr [ebx], 7263694Dh
.text:00409B35                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409B3C                 mov     dword ptr [ebx+8], 69572074h
.text:00409B43                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409B4A                 mov     dword ptr [ebx+10h], 45432073h
.text:00409B51                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00409B57                 mov     esi, esi
.text:00409B59                 lea     edi, [edi+0]
.text:00409B60
.text:00409B60 loc_409B60:                             ; CODE XREF: .text:00409C08↓j
.text:00409B60                                         ; .text:00409F49↓j ...
.text:00409B60                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409B65                 jmp     loc_409AD0
.text:00409B65 ; ---------------------------------------------------------------------------
.text:00409B6A                 align 10h
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: .text:00409ABF↑j
.text:00409B70                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00409B76                 cmp     edx, 3
.text:00409B79                 mov     eax, edx
.text:00409B7B                 jz      loc_409EE5
.text:00409B81
.text:00409B81 loc_409B81:                             ; CODE XREF: .text:00409EEC↓j
.text:00409B81                 cmp     eax, 4
.text:00409B84                 jz      loc_409EA5
.text:00409B8A
.text:00409B8A loc_409B8A:                             ; CODE XREF: .text:00409EAD↓j
.text:00409B8A                 cmp     eax, 4
.text:00409B8D                 ja      loc_409DF2
.text:00409B93                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409B99                 test    ecx, ecx
.text:00409B9B                 jnz     loc_409DF2
.text:00409BA1                 mov     dword ptr [ebx], 7263694Dh
.text:00409BA7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409BAE                 mov     dword ptr [ebx+8], 69572074h
.text:00409BB5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409BBC                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409BC3
.text:00409BC3 loc_409BC3:                             ; CODE XREF: .text:00409E65↓j
.text:00409BC3                 mov     byte ptr [ebx+14h], 0
.text:00409BC7
.text:00409BC7 loc_409BC7:                             ; CODE XREF: .text:00409DF5↓j
.text:00409BC7                                         ; .text:00409E0C↓j ...
.text:00409BC7                 mov     esi, dword_4100D0
.text:00409BCD                 test    esi, esi
.text:00409BCF                 jz      loc_409CE2
.text:00409BD5                 movzx   eax, ds:byte_41199A
.text:00409BDC                 cmp     al, 1
.text:00409BDE                 jz      loc_409CC2
.text:00409BE4                 cmp     al, 3
.text:00409BE6                 jz      short loc_409C0D
.text:00409BE8
.text:00409BE8 loc_409BE8:                             ; CODE XREF: .text:00409C2B↓j
.text:00409BE8                                         ; .text:00409C66↓j ...
.text:00409BE8                 mov     dword ptr [esp+4], offset asc_4098E0 ; " "
.text:00409BF0                 mov     [esp], ebx
.text:00409BF3                 call    strcat
.text:00409BF8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00409C00                 mov     [esp], ebx
.text:00409C03                 call    strcat
.text:00409C08                 jmp     loc_409B60
.text:00409C0D ; ---------------------------------------------------------------------------
.text:00409C0D
.text:00409C0D loc_409C0D:                             ; CODE XREF: .text:00409BE6↑j
.text:00409C0D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00409C14                 jz      short loc_409C36
.text:00409C16
.text:00409C16 loc_409C16:                             ; CODE XREF: .text:00409C42↓j
.text:00409C16                 test    byte ptr ds:word_411998, 2
.text:00409C1D                 jz      short loc_409C2D
.text:00409C1F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409C26
.text:00409C26 loc_409C26:                             ; CODE XREF: .text:00409C34↓j
.text:00409C26                 call    printf
.text:00409C2B                 jmp     short loc_409BE8
.text:00409C2D ; ---------------------------------------------------------------------------
.text:00409C2D
.text:00409C2D loc_409C2D:                             ; CODE XREF: .text:00409C1D↑j
.text:00409C2D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00409C34                 jmp     short loc_409C26
.text:00409C36 ; ---------------------------------------------------------------------------
.text:00409C36
.text:00409C36 loc_409C36:                             ; CODE XREF: .text:00409C14↑j
.text:00409C36                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409C3B                 cmp     eax, 2
.text:00409C3E                 jz      short loc_409C80
.text:00409C40                 test    eax, eax
.text:00409C42                 jnz     short loc_409C16
.text:00409C44                 cmp     byte ptr ds:word_411998, 0
.text:00409C4B                 js      short loc_409C72
.text:00409C4D                 test    byte ptr ds:word_411998, 2
.text:00409C54                 jnz     short loc_409C68
.text:00409C56                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409C5E
.text:00409C5E loc_409C5E:                             ; CODE XREF: .text:00409C70↓j
.text:00409C5E                                         ; .text:00409C7A↓j ...
.text:00409C5E                 mov     [esp], ebx
.text:00409C61                 call    strcat
.text:00409C66                 jmp     short loc_409BE8
.text:00409C68 ; ---------------------------------------------------------------------------
.text:00409C68
.text:00409C68 loc_409C68:                             ; CODE XREF: .text:00409C54↑j
.text:00409C68                                         ; .text:00409DC9↓j
.text:00409C68                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00409C70                 jmp     short loc_409C5E
.text:00409C72 ; ---------------------------------------------------------------------------
.text:00409C72
.text:00409C72 loc_409C72:                             ; CODE XREF: .text:00409C4B↑j
.text:00409C72                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00409C7A                 jmp     short loc_409C5E
.text:00409C7A ; ---------------------------------------------------------------------------
.text:00409C7C                 align 10h
.text:00409C80
.text:00409C80 loc_409C80:                             ; CODE XREF: .text:00409C3E↑j
.text:00409C80                 cmp     byte ptr ds:word_411998, 0
.text:00409C87                 js      short loc_409CB8
.text:00409C89                 movzx   eax, ds:word_411998
.text:00409C90                 test    al, 2
.text:00409C92                 jnz     short loc_409CAE
.text:00409C94                 cmp     ax, 400h
.text:00409C98                 jz      short loc_409CA4
.text:00409C9A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409CA2                 jmp     short loc_409C5E
.text:00409CA4 ; ---------------------------------------------------------------------------
.text:00409CA4
.text:00409CA4 loc_409CA4:                             ; CODE XREF: .text:00409C98↑j
.text:00409CA4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00409CAC                 jmp     short loc_409C5E
.text:00409CAE ; ---------------------------------------------------------------------------
.text:00409CAE
.text:00409CAE loc_409CAE:                             ; CODE XREF: .text:00409C92↑j
.text:00409CAE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409CB6                 jmp     short loc_409C5E
.text:00409CB8 ; ---------------------------------------------------------------------------
.text:00409CB8
.text:00409CB8 loc_409CB8:                             ; CODE XREF: .text:00409C87↑j
.text:00409CB8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409CC0                 jmp     short loc_409C5E
.text:00409CC2 ; ---------------------------------------------------------------------------
.text:00409CC2
.text:00409CC2 loc_409CC2:                             ; CODE XREF: .text:00409BDE↑j
.text:00409CC2                 test    byte ptr ds:word_411998+1, 2
.text:00409CC9                 jz      short loc_409CD5
.text:00409CCB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409CD3                 jmp     short loc_409C5E
.text:00409CD5 ; ---------------------------------------------------------------------------
.text:00409CD5
.text:00409CD5 loc_409CD5:                             ; CODE XREF: .text:00409CC9↑j
.text:00409CD5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409CDD                 jmp     loc_409C5E
.text:00409CE2 ; ---------------------------------------------------------------------------
.text:00409CE2
.text:00409CE2 loc_409CE2:                             ; CODE XREF: .text:00409BCF↑j
.text:00409CE2                 mov     dword ptr [esp+28h], 0FFh
.text:00409CEA                 lea     edx, [esp+2Ch]
.text:00409CEE                 mov     [esp+10h], edx
.text:00409CF2                 mov     dword ptr [esp+0Ch], 1
.text:00409CFA                 mov     dword ptr [esp+8], 0
.text:00409D02                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00409D0A                 mov     dword ptr [esp], 80000002h
.text:00409D11                 call    RegOpenKeyExA
.text:00409D16                 mov     edi, eax
.text:00409D18                 sub     esp, 14h
.text:00409D1B                 xor     eax, eax
.text:00409D1D                 test    edi, edi
.text:00409D1F                 jnz     loc_409B25
.text:00409D25                 mov     dword ptr [esp+0Ch], 0
.text:00409D2D                 mov     edi, [esp+2Ch]
.text:00409D31                 lea     esi, [esp+28h]
.text:00409D35                 mov     [esp+14h], esi
.text:00409D39                 lea     esi, [esp+30h]
.text:00409D3D                 mov     [esp+10h], esi
.text:00409D41                 mov     dword ptr [esp+8], 0
.text:00409D49                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00409D51                 mov     [esp], edi
.text:00409D54                 call    RegQueryValueExA
.text:00409D59                 sub     esp, 18h
.text:00409D5C                 test    eax, eax
.text:00409D5E                 jnz     short loc_409D6A
.text:00409D60                 cmp     dword ptr [esp+28h], 0FFh
.text:00409D68                 jbe     short loc_409D71
.text:00409D6A
.text:00409D6A loc_409D6A:                             ; CODE XREF: .text:00409D5E↑j
.text:00409D6A                 xor     eax, eax
.text:00409D6C                 jmp     loc_409B25
.text:00409D71 ; ---------------------------------------------------------------------------
.text:00409D71
.text:00409D71 loc_409D71:                             ; CODE XREF: .text:00409D68↑j
.text:00409D71                 mov     edx, [esp+2Ch]
.text:00409D75                 mov     [esp], edx
.text:00409D78                 call    RegCloseKey
.text:00409D7D                 sub     esp, 4
.text:00409D80                 mov     [esp+4], esi
.text:00409D84                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00409D8B                 call    lstrcmpiA
.text:00409D90                 sub     esp, 8
.text:00409D93                 test    eax, eax
.text:00409D95                 jz      short loc_409DE0
.text:00409D97
.text:00409D97 loc_409D97:                             ; CODE XREF: .text:00409DF0↓j
.text:00409D97                 mov     [esp+4], esi
.text:00409D9B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409DA2                 call    lstrcmpiA
.text:00409DA7                 sub     esp, 8
.text:00409DAA                 test    eax, eax
.text:00409DAC                 jz      short loc_409DCE
.text:00409DAE
.text:00409DAE loc_409DAE:                             ; CODE XREF: .text:00409DDE↓j
.text:00409DAE                 mov     [esp+4], esi
.text:00409DB2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409DB9                 call    lstrcmpiA
.text:00409DBE                 sub     esp, 8
.text:00409DC1                 test    eax, eax
.text:00409DC3                 jnz     loc_409BE8
.text:00409DC9                 jmp     loc_409C68
.text:00409DCE ; ---------------------------------------------------------------------------
.text:00409DCE
.text:00409DCE loc_409DCE:                             ; CODE XREF: .text:00409DAC↑j
.text:00409DCE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409DD6                 mov     [esp], ebx
.text:00409DD9                 call    strcat
.text:00409DDE                 jmp     short loc_409DAE
.text:00409DE0 ; ---------------------------------------------------------------------------
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: .text:00409D95↑j
.text:00409DE0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409DE8                 mov     [esp], ebx
.text:00409DEB                 call    strcat
.text:00409DF0                 jmp     short loc_409D97
.text:00409DF2 ; ---------------------------------------------------------------------------
.text:00409DF2
.text:00409DF2 loc_409DF2:                             ; CODE XREF: .text:00409B8D↑j
.text:00409DF2                                         ; .text:00409B9B↑j
.text:00409DF2                 cmp     eax, 5
.text:00409DF5                 jnz     loc_409BC7
.text:00409DFB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409E00                 cmp     eax, 2
.text:00409E03                 jz      short loc_409E6A
.text:00409E05                 cmp     eax, 1
.text:00409E08                 jz      short loc_409E43
.text:00409E0A                 test    eax, eax
.text:00409E0C                 jnz     loc_409BC7
.text:00409E12                 mov     dword ptr [ebx], 7263694Dh
.text:00409E18                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409E1F                 mov     dword ptr [ebx+8], 69572074h
.text:00409E26                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409E2D                 mov     dword ptr [ebx+10h], 30322073h
.text:00409E34                 mov     word ptr [ebx+14h], 3030h
.text:00409E3A                 mov     byte ptr [ebx+16h], 0
.text:00409E3E                 jmp     loc_409BC7
.text:00409E43 ; ---------------------------------------------------------------------------
.text:00409E43
.text:00409E43 loc_409E43:                             ; CODE XREF: .text:00409E08↑j
.text:00409E43                 mov     dword ptr [ebx], 7263694Dh
.text:00409E49                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409E50                 mov     dword ptr [ebx+8], 69572074h
.text:00409E57                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409E5E                 mov     dword ptr [ebx+10h], 50582073h
.text:00409E65                 jmp     loc_409BC3
.text:00409E6A ; ---------------------------------------------------------------------------
.text:00409E6A
.text:00409E6A loc_409E6A:                             ; CODE XREF: .text:00409E03↑j
.text:00409E6A                 mov     dword ptr [ebx], 7263694Dh
.text:00409E70                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409E77                 mov     dword ptr [ebx+8], 69572074h
.text:00409E7E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409E85                 mov     dword ptr [ebx+10h], 65532073h
.text:00409E8C                 mov     dword ptr [ebx+14h], 72657672h
.text:00409E93                 mov     dword ptr [ebx+18h], 30303220h
.text:00409E9A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409EA0                 jmp     loc_409BC7
.text:00409EA5 ; ---------------------------------------------------------------------------
.text:00409EA5
.text:00409EA5 loc_409EA5:                             ; CODE XREF: .text:00409B84↑j
.text:00409EA5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409EAB                 test    edx, edx
.text:00409EAD                 jnz     loc_409B8A
.text:00409EB3                 mov     dword ptr [ebx], 7263694Dh
.text:00409EB9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409EC0                 mov     dword ptr [ebx+8], 69572074h
.text:00409EC7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409ECE                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409ED5                 mov     dword ptr [ebx+14h], 302E3420h
.text:00409EDC                 mov     byte ptr [ebx+18h], 0
.text:00409EE0                 jmp     loc_409BC7
.text:00409EE5 ; ---------------------------------------------------------------------------
.text:00409EE5
.text:00409EE5 loc_409EE5:                             ; CODE XREF: .text:00409B7B↑j
.text:00409EE5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00409EEC                 jnz     loc_409B81
.text:00409EF2                 mov     dword ptr [ebx], 7263694Dh
.text:00409EF8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409EFF                 mov     dword ptr [ebx+8], 69572074h
.text:00409F06                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409F0D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409F14                 mov     dword ptr [ebx+14h], 352E3320h
.text:00409F1B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409F21                 jmp     loc_409BC7
.text:00409F26 ; ---------------------------------------------------------------------------
.text:00409F26
.text:00409F26 loc_409F26:                             ; CODE XREF: .text:00409AB6↑j
.text:00409F26                 cld
.text:00409F27                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00409F2C                 mov     ecx, 8
.text:00409F31                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00409F38                 mov     edi, ebx
.text:00409F3A                 rep movsd
.text:00409F3C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00409F43                 mov     [edi+2], dl
.text:00409F46                 mov     [edi], si
.text:00409F49                 jmp     loc_409B60
.text:00409F49 ; ---------------------------------------------------------------------------
.text:00409F4E                 align 10h
.text:00409F50
.text:00409F50 loc_409F50:                             ; CODE XREF: .text:00409AAD↑j
.text:00409F50                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409F56                 cmp     ecx, 4
.text:00409F59                 jz      loc_40A010
.text:00409F5F
.text:00409F5F loc_409F5F:                             ; CODE XREF: .text:0040A066↓j
.text:00409F5F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409F65
.text:00409F65 loc_409F65:                             ; CODE XREF: .text:0040A018↓j
.text:00409F65                 cmp     ecx, 4
.text:00409F68                 jz      short loc_409F74
.text:00409F6A
.text:00409F6A loc_409F6A:                             ; CODE XREF: .text:00409F7C↓j
.text:00409F6A                                         ; .text:00409F81↓j
.text:00409F6A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409F6F                 jmp     loc_409ADC
.text:00409F74 ; ---------------------------------------------------------------------------
.text:00409F74
.text:00409F74 loc_409F74:                             ; CODE XREF: .text:00409F68↑j
.text:00409F74                 cmp     edx, 0Ah
.text:00409F77                 jz      short loc_409FA1
.text:00409F79
.text:00409F79 loc_409F79:                             ; CODE XREF: .text:00409FEF↓j
.text:00409F79                 cmp     ecx, 4
.text:00409F7C                 jnz     short loc_409F6A
.text:00409F7E                 cmp     edx, 5Ah ; 'Z'
.text:00409F81                 jnz     short loc_409F6A
.text:00409F83                 cld
.text:00409F84                 mov     edi, ebx
.text:00409F86                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00409F8B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409F92                 mov     ecx, 9
.text:00409F97                 rep movsd
.text:00409F99                 mov     [edi], bx
.text:00409F9C                 jmp     loc_409B60
.text:00409FA1 ; ---------------------------------------------------------------------------
.text:00409FA1
.text:00409FA1 loc_409FA1:                             ; CODE XREF: .text:00409F77↑j
.text:00409FA1                 mov     dword ptr [ebx], 7263694Dh
.text:00409FA7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409FAE                 mov     dword ptr [ebx+8], 69572074h
.text:00409FB5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409FBC                 mov     dword ptr [ebx+10h], 38392073h
.text:00409FC3                 mov     byte ptr [ebx+14h], 0
.text:00409FC7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409FCD                 lea     edi, [edx-7CFh]
.text:00409FD3                 cmp     edi, 0B7h ; '·'
.text:00409FD9                 jbe     short loc_40A003
.text:00409FDB                 cmp     edx, 886h
.text:00409FE1                 ja      short loc_409FF1
.text:00409FE3
.text:00409FE3 loc_409FE3:                             ; CODE XREF: .text:0040A001↓j
.text:00409FE3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409FE9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409FEF                 jmp     short loc_409F79
.text:00409FF1 ; ---------------------------------------------------------------------------
.text:00409FF1
.text:00409FF1 loc_409FF1:                             ; CODE XREF: .text:00409FE1↑j
.text:00409FF1                 mov     dword ptr [esp+4], offset loc_409A76
.text:00409FF9
.text:00409FF9 loc_409FF9:                             ; CODE XREF: .text:0040A00B↓j
.text:00409FF9                 mov     [esp], ebx
.text:00409FFC                 call    strcat
.text:0040A001                 jmp     short loc_409FE3
.text:0040A003 ; ---------------------------------------------------------------------------
.text:0040A003
.text:0040A003 loc_40A003:                             ; CODE XREF: .text:00409FD9↑j
.text:0040A003                 mov     dword ptr [esp+4], 409A7Ah
.text:0040A00B                 jmp     short loc_409FF9
.text:0040A00B ; ---------------------------------------------------------------------------
.text:0040A00D                 align 10h
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: .text:00409F59↑j
.text:0040A010                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A016                 test    edx, edx
.text:0040A018                 jnz     loc_409F65
.text:0040A01E                 mov     dword ptr [ebx], 7263694Dh
.text:0040A024                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A02B                 mov     dword ptr [ebx+8], 69572074h
.text:0040A032                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A039                 mov     dword ptr [ebx+10h], 35392073h
.text:0040A040                 mov     byte ptr [ebx+14h], 0
.text:0040A044                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A04A                 lea     ecx, [edx-3B7h]
.text:0040A050                 cmp     ecx, 81h
.text:0040A056                 jbe     short loc_40A07D
.text:0040A058                 cmp     edx, 438h
.text:0040A05E                 ja      short loc_40A06B
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: .text:0040A07B↓j
.text:0040A060                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A066                 jmp     loc_409F5F
.text:0040A06B ; ---------------------------------------------------------------------------
.text:0040A06B
.text:0040A06B loc_40A06B:                             ; CODE XREF: .text:0040A05E↑j
.text:0040A06B                 mov     dword ptr [esp+4], offset loc_409A7F
.text:0040A073
.text:0040A073 loc_40A073:                             ; CODE XREF: .text:0040A085↓j
.text:0040A073                 mov     [esp], ebx
.text:0040A076                 call    strcat
.text:0040A07B                 jmp     short loc_40A060
.text:0040A07D ; ---------------------------------------------------------------------------
.text:0040A07D
.text:0040A07D loc_40A07D:                             ; CODE XREF: .text:0040A056↑j
.text:0040A07D                 mov     dword ptr [esp+4], 409A7Ah
.text:0040A085                 jmp     short loc_40A073
.text:0040A085 ; ---------------------------------------------------------------------------
.text:0040A087                 align 10h
.text:0040A090
.text:0040A090 ; =============== S U B R O U T I N E =======================================
.text:0040A090
.text:0040A090
.text:0040A090 sub_40A090      proc near               ; CODE XREF: .text:0040ABEE↓p
.text:0040A090                                         ; sub_40B070+12A↓p
.text:0040A090                 sub     esp, 0Ch
.text:0040A093                 call    sub_40A1A0
.text:0040A098                 mov     eax, ds:dword_4118F0
.text:0040A09D                 add     esp, 0Ch
.text:0040A0A0                 retn
.text:0040A0A0 sub_40A090      endp
.text:0040A0A0
.text:0040A0A1 ; ---------------------------------------------------------------------------
.text:0040A0A1                 jmp     short loc_40A0B0
.text:0040A0A1 ; ---------------------------------------------------------------------------
.text:0040A0A3                 align 10h
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: .text:0040A0A1↑j
.text:0040A0B0                 sub     esp, 0Ch
.text:0040A0B3                 call    sub_40A1A0
.text:0040A0B8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A0BD                 add     esp, 0Ch
.text:0040A0C0                 retn
.text:0040A0C1 ; ---------------------------------------------------------------------------
.text:0040A0C1                 jmp     short loc_40A0D0
.text:0040A0C1 ; ---------------------------------------------------------------------------
.text:0040A0C3                 align 10h
.text:0040A0D0
.text:0040A0D0 loc_40A0D0:                             ; CODE XREF: .text:0040A0C1↑j
.text:0040A0D0                 sub     esp, 0Ch
.text:0040A0D3                 call    sub_40A1A0
.text:0040A0D8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040A0DD                 add     esp, 0Ch
.text:0040A0E0                 retn
.text:0040A0E1 ; ---------------------------------------------------------------------------
.text:0040A0E1                 jmp     short loc_40A0F0
.text:0040A0E1 ; ---------------------------------------------------------------------------
.text:0040A0E3                 align 10h
.text:0040A0F0
.text:0040A0F0 loc_40A0F0:                             ; CODE XREF: .text:0040A0E1↑j
.text:0040A0F0                 sub     esp, 0Ch
.text:0040A0F3                 call    sub_40A1A0
.text:0040A0F8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A0FD                 add     esp, 0Ch
.text:0040A100                 retn
.text:0040A101 ; ---------------------------------------------------------------------------
.text:0040A101                 jmp     short loc_40A110
.text:0040A101 ; ---------------------------------------------------------------------------
.text:0040A103                 align 10h
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: .text:0040A101↑j
.text:0040A110                 sub     esp, 0Ch
.text:0040A113                 call    GetVersion
.text:0040A118                 shr     eax, 10h
.text:0040A11B                 add     esp, 0Ch
.text:0040A11E                 retn
.text:0040A11E ; ---------------------------------------------------------------------------
.text:0040A11F                 align 10h
.text:0040A120                 sub     esp, 0Ch
.text:0040A123                 call    sub_40A1A0
.text:0040A128                 xor     eax, eax
.text:0040A12A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040A131                 setz    al
.text:0040A134                 add     esp, 0Ch
.text:0040A137                 retn
.text:0040A137 ; ---------------------------------------------------------------------------
.text:0040A138                 align 10h
.text:0040A140
.text:0040A140 ; =============== S U B R O U T I N E =======================================
.text:0040A140
.text:0040A140
.text:0040A140 sub_40A140      proc near               ; CODE XREF: .text:loc_406E40↑p
.text:0040A140                                         ; .text:loc_40ABD4↓p ...
.text:0040A140                 sub     esp, 0Ch
.text:0040A143                 call    sub_40A1A0
.text:0040A148                 xor     eax, eax
.text:0040A14A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040A151                 setz    al
.text:0040A154                 add     esp, 0Ch
.text:0040A157                 retn
.text:0040A157 sub_40A140      endp
.text:0040A157
.text:0040A157 ; ---------------------------------------------------------------------------
.text:0040A158                 align 10h
.text:0040A160                 sub     esp, 0Ch
.text:0040A163                 call    sub_40A1A0
.text:0040A168                 xor     eax, eax
.text:0040A16A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040A171                 setz    al
.text:0040A174                 add     esp, 0Ch
.text:0040A177                 retn
.text:0040A177 ; ---------------------------------------------------------------------------
.text:0040A178                 align 10h
.text:0040A180                 sub     esp, 0Ch
.text:0040A183                 call    sub_40A1A0
.text:0040A188                 xor     eax, eax
.text:0040A18A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040A191                 setz    al
.text:0040A194                 add     esp, 0Ch
.text:0040A197                 retn
.text:0040A197 ; ---------------------------------------------------------------------------
.text:0040A198                 align 10h
.text:0040A1A0
.text:0040A1A0 ; =============== S U B R O U T I N E =======================================
.text:0040A1A0
.text:0040A1A0
.text:0040A1A0 sub_40A1A0      proc near               ; CODE XREF: .text:00409AA0↑p
.text:0040A1A0                                         ; sub_40A090+3↑p ...
.text:0040A1A0
.text:0040A1A0 lpVersionInformation= dword ptr -0BCh
.text:0040A1A0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040A1A0
.text:0040A1A0                 sub     esp, 0BCh
.text:0040A1A6                 mov     edx, ds:dword_4119A0
.text:0040A1AC                 test    edx, edx
.text:0040A1AE                 jz      short loc_40A1C0
.text:0040A1B0
.text:0040A1B0 loc_40A1B0:                             ; CODE XREF: sub_40A1A0+7B↓j
.text:0040A1B0                 mov     edx, 1
.text:0040A1B5
.text:0040A1B5 loc_40A1B5:                             ; CODE XREF: sub_40A1A0+217↓j
.text:0040A1B5                 mov     eax, edx
.text:0040A1B7                 add     esp, 0BCh
.text:0040A1BD                 retn
.text:0040A1BD ; ---------------------------------------------------------------------------
.text:0040A1BE                 align 10h
.text:0040A1C0
.text:0040A1C0 loc_40A1C0:                             ; CODE XREF: sub_40A1A0+E↑j
.text:0040A1C0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040A1C7                 mov     edx, 9Ch ; 'œ'
.text:0040A1CC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040A1D2                 call    GetVersionExA
.text:0040A1D7                 sub     esp, 4
.text:0040A1DA                 test    eax, eax
.text:0040A1DC                 jz      loc_40A394
.text:0040A1E2
.text:0040A1E2 loc_40A1E2:                             ; CODE XREF: sub_40A1A0+245↓j
.text:0040A1E2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040A1E9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A1EE                 cmp     eax, 1
.text:0040A1F1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040A1F7                 jz      loc_40A2E0
.text:0040A1FD                 cmp     eax, 1
.text:0040A200                 jb      loc_40A2D0
.text:0040A206                 cmp     eax, 2
.text:0040A209                 jz      short loc_40A22A
.text:0040A20B                 cmp     eax, 3
.text:0040A20E                 jz      short loc_40A21D
.text:0040A210
.text:0040A210 loc_40A210:                             ; CODE XREF: sub_40A1A0+88↓j
.text:0040A210                                         ; sub_40A1A0+C0↓j ...
.text:0040A210                 mov     edx, 1
.text:0040A215                 mov     ds:dword_4119A0, edx
.text:0040A21B                 jmp     short loc_40A1B0
.text:0040A21D ; ---------------------------------------------------------------------------
.text:0040A21D
.text:0040A21D loc_40A21D:                             ; CODE XREF: sub_40A1A0+6E↑j
.text:0040A21D                 mov     ecx, 17h
.text:0040A222
.text:0040A222 loc_40A222:                             ; CODE XREF: sub_40A1A0+1A7↓j
.text:0040A222                 mov     ds:dword_4118F0, ecx
.text:0040A228                 jmp     short loc_40A210
.text:0040A22A ; ---------------------------------------------------------------------------
.text:0040A22A
.text:0040A22A loc_40A22A:                             ; CODE XREF: sub_40A1A0+69↑j
.text:0040A22A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040A22F                 cmp     eax, 3
.text:0040A232                 jz      short loc_40A2AB
.text:0040A234                 cmp     eax, 4
.text:0040A237                 jz      short loc_40A29A
.text:0040A239
.text:0040A239 loc_40A239:                             ; CODE XREF: sub_40A1A0+102↓j
.text:0040A239                 cmp     eax, 4
.text:0040A23C                 ja      short loc_40A262
.text:0040A23E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A244                 test    ecx, ecx
.text:0040A246                 jnz     short loc_40A262
.text:0040A248                 mov     edx, 1Eh
.text:0040A24D
.text:0040A24D loc_40A24D:                             ; CODE XREF: sub_40A1A0+DF↓j
.text:0040A24D                 mov     ds:dword_4118F0, edx
.text:0040A253
.text:0040A253 loc_40A253:                             ; CODE XREF: sub_40A1A0+C5↓j
.text:0040A253                                         ; sub_40A1A0+D8↓j ...
.text:0040A253                 movzx   ecx, ds:word_411994
.text:0040A25A                 add     ds:dword_4118F0, ecx
.text:0040A260                 jmp     short loc_40A210
.text:0040A262 ; ---------------------------------------------------------------------------
.text:0040A262
.text:0040A262 loc_40A262:                             ; CODE XREF: sub_40A1A0+9C↑j
.text:0040A262                                         ; sub_40A1A0+A6↑j
.text:0040A262                 cmp     eax, 5
.text:0040A265                 jnz     short loc_40A253
.text:0040A267                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A26C                 cmp     eax, 2
.text:0040A26F                 jz      short loc_40A28E
.text:0040A271                 cmp     eax, 1
.text:0040A274                 jz      short loc_40A281
.text:0040A276                 test    eax, eax
.text:0040A278                 jnz     short loc_40A253
.text:0040A27A                 mov     edx, 32h ; '2'
.text:0040A27F                 jmp     short loc_40A24D
.text:0040A281 ; ---------------------------------------------------------------------------
.text:0040A281
.text:0040A281 loc_40A281:                             ; CODE XREF: sub_40A1A0+D4↑j
.text:0040A281                 mov     ecx, 3Ch ; '<'
.text:0040A286
.text:0040A286 loc_40A286:                             ; CODE XREF: sub_40A1A0+122↓j
.text:0040A286                 mov     ds:dword_4118F0, ecx
.text:0040A28C                 jmp     short loc_40A253
.text:0040A28E ; ---------------------------------------------------------------------------
.text:0040A28E
.text:0040A28E loc_40A28E:                             ; CODE XREF: sub_40A1A0+CF↑j
.text:0040A28E                 mov     eax, 46h ; 'F'
.text:0040A293
.text:0040A293 loc_40A293:                             ; CODE XREF: sub_40A1A0+109↓j
.text:0040A293                                         ; sub_40A1A0+129↓j
.text:0040A293                 mov     ds:dword_4118F0, eax
.text:0040A298                 jmp     short loc_40A253
.text:0040A29A ; ---------------------------------------------------------------------------
.text:0040A29A
.text:0040A29A loc_40A29A:                             ; CODE XREF: sub_40A1A0+97↑j
.text:0040A29A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A2A0                 test    ecx, ecx
.text:0040A2A2                 jnz     short loc_40A239
.text:0040A2A4                 mov     eax, 28h ; '('
.text:0040A2A9                 jmp     short loc_40A293
.text:0040A2AB ; ---------------------------------------------------------------------------
.text:0040A2AB
.text:0040A2AB loc_40A2AB:                             ; CODE XREF: sub_40A1A0+92↑j
.text:0040A2AB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A2B0                 cmp     eax, 33h ; '3'
.text:0040A2B3                 jz      short loc_40A2C4
.text:0040A2B5                 cmp     eax, 5
.text:0040A2B8                 setz    cl
.text:0040A2BB                 movzx   edx, cl
.text:0040A2BE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040A2C2                 jmp     short loc_40A286
.text:0040A2C4 ; ---------------------------------------------------------------------------
.text:0040A2C4
.text:0040A2C4 loc_40A2C4:                             ; CODE XREF: sub_40A1A0+113↑j
.text:0040A2C4                 mov     eax, 24h ; '$'
.text:0040A2C9                 jmp     short loc_40A293
.text:0040A2C9 ; ---------------------------------------------------------------------------
.text:0040A2CB                 align 10h
.text:0040A2D0
.text:0040A2D0 loc_40A2D0:                             ; CODE XREF: sub_40A1A0+60↑j
.text:0040A2D0                 mov     edx, 2
.text:0040A2D5                 mov     ds:dword_4118F0, edx
.text:0040A2DB                 jmp     loc_40A210
.text:0040A2E0 ; ---------------------------------------------------------------------------
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: sub_40A1A0+57↑j
.text:0040A2E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A2E6                 cmp     ecx, 4
.text:0040A2E9                 jnz     loc_40A210
.text:0040A2EF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A2F4                 test    eax, eax
.text:0040A2F6                 jnz     short loc_40A31A
.text:0040A2F8                 mov     eax, 0Ah
.text:0040A2FD                 mov     ds:dword_4118F0, eax
.text:0040A302                 lea     eax, [edx-3B7h]
.text:0040A308                 cmp     eax, 81h
.text:0040A30D                 ja      short loc_40A385
.text:0040A30F                 mov     edx, 0Bh
.text:0040A314
.text:0040A314 loc_40A314:                             ; CODE XREF: sub_40A1A0+1F2↓j
.text:0040A314                 mov     ds:dword_4118F0, edx
.text:0040A31A
.text:0040A31A loc_40A31A:                             ; CODE XREF: sub_40A1A0+156↑j
.text:0040A31A                                         ; sub_40A1A0+1EB↓j
.text:0040A31A                 cmp     ecx, 4
.text:0040A31D                 jnz     loc_40A210
.text:0040A323                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040A32A                 jz      short loc_40A34C
.text:0040A32C
.text:0040A32C loc_40A32C:                             ; CODE XREF: sub_40A1A0+1D4↓j
.text:0040A32C                                         ; sub_40A1A0+1DC↓j
.text:0040A32C                 cmp     ecx, 4
.text:0040A32F                 jnz     loc_40A210
.text:0040A335                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040A33C                 jnz     loc_40A210
.text:0040A342                 mov     ecx, 12h
.text:0040A347                 jmp     loc_40A222
.text:0040A34C ; ---------------------------------------------------------------------------
.text:0040A34C
.text:0040A34C loc_40A34C:                             ; CODE XREF: sub_40A1A0+18A↑j
.text:0040A34C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040A352                 mov     eax, 0Eh
.text:0040A357                 mov     ds:dword_4118F0, eax
.text:0040A35C                 lea     eax, [edx-7CFh]
.text:0040A362                 cmp     eax, 0B7h ; '·'
.text:0040A367                 ja      short loc_40A376
.text:0040A369                 mov     edx, 0Fh
.text:0040A36E
.text:0040A36E loc_40A36E:                             ; CODE XREF: sub_40A1A0+1E3↓j
.text:0040A36E                 mov     ds:dword_4118F0, edx
.text:0040A374                 jmp     short loc_40A32C
.text:0040A376 ; ---------------------------------------------------------------------------
.text:0040A376
.text:0040A376 loc_40A376:                             ; CODE XREF: sub_40A1A0+1C7↑j
.text:0040A376                 cmp     edx, 886h
.text:0040A37C                 jbe     short loc_40A32C
.text:0040A37E                 mov     edx, 10h
.text:0040A383                 jmp     short loc_40A36E
.text:0040A385 ; ---------------------------------------------------------------------------
.text:0040A385
.text:0040A385 loc_40A385:                             ; CODE XREF: sub_40A1A0+16D↑j
.text:0040A385                 cmp     edx, 438h
.text:0040A38B                 jbe     short loc_40A31A
.text:0040A38D                 mov     edx, 0Ch
.text:0040A392                 jmp     short loc_40A314
.text:0040A394 ; ---------------------------------------------------------------------------
.text:0040A394
.text:0040A394 loc_40A394:                             ; CODE XREF: sub_40A1A0+3C↑j
.text:0040A394                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040A39C                 xor     edx, edx
.text:0040A39E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040A3A2                 mov     dword_4100D0, edx
.text:0040A3A8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040A3AB                 call    GetVersionExA
.text:0040A3B0                 sub     esp, 4
.text:0040A3B3                 xor     edx, edx
.text:0040A3B5                 test    eax, eax
.text:0040A3B7                 jz      loc_40A1B5
.text:0040A3BD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040A3C1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040A3C5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040A3CB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040A3CF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040A3D5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040A3D9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040A3DF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040A3E5                 jmp     loc_40A1E2
.text:0040A3E5 sub_40A1A0      endp
.text:0040A3E5
.text:0040A3E5 ; ---------------------------------------------------------------------------
.text:0040A3EA                 align 10h
.text:0040A3F0
.text:0040A3F0 ; =============== S U B R O U T I N E =======================================
.text:0040A3F0
.text:0040A3F0
.text:0040A3F0 sub_40A3F0      proc near               ; CODE XREF: .text:00406B73↑p
.text:0040A3F0                                         ; .text:00406BC3↑p
.text:0040A3F0
.text:0040A3F0 arg_4           = dword ptr  8
.text:0040A3F0
.text:0040A3F0                 sub     esp, 0Ch
.text:0040A3F3                 mov     edx, [esp+0Ch+arg_4]
.text:0040A3F7                 test    edx, edx
.text:0040A3F9                 jz      short loc_40A400
.text:0040A3FB                 add     esp, 0Ch
.text:0040A3FE                 jmp     short sub_40A440
.text:0040A400 ; ---------------------------------------------------------------------------
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: sub_40A3F0+9↑j
.text:0040A400                 call    _errno
.text:0040A405                 mov     dword ptr [eax], 16h
.text:0040A40B                 xor     eax, eax
.text:0040A40D                 add     esp, 0Ch
.text:0040A410                 retn
.text:0040A410 sub_40A3F0      endp
.text:0040A410
.text:0040A411 ; ---------------------------------------------------------------------------
.text:0040A411                 jmp     short sub_40A420
.text:0040A411 ; ---------------------------------------------------------------------------
.text:0040A413                 align 10h
.text:0040A420
.text:0040A420 ; =============== S U B R O U T I N E =======================================
.text:0040A420
.text:0040A420
.text:0040A420 ; int __cdecl sub_40A420(LPCSTR)
.text:0040A420 sub_40A420      proc near               ; CODE XREF: .text:00406D68↑p
.text:0040A420                                         ; .text:00406D76↑p ...
.text:0040A420
.text:0040A420 lpFileName      = dword ptr -0Ch
.text:0040A420 Destination     = dword ptr -8
.text:0040A420 arg_0           = dword ptr  4
.text:0040A420
.text:0040A420                 sub     esp, 0Ch
.text:0040A423                 mov     edx, [esp+0Ch+arg_0]
.text:0040A427                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040A42F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040A432                 call    sub_40A440
.text:0040A437                 add     esp, 0Ch
.text:0040A43A                 retn
.text:0040A43A sub_40A420      endp
.text:0040A43A
.text:0040A43A ; ---------------------------------------------------------------------------
.text:0040A43B                 align 10h
.text:0040A440
.text:0040A440 ; =============== S U B R O U T I N E =======================================
.text:0040A440
.text:0040A440
.text:0040A440 ; int __cdecl sub_40A440(LPCSTR lpFileName, char *Destination)
.text:0040A440 sub_40A440      proc near               ; CODE XREF: sub_40A3F0+E↑j
.text:0040A440                                         ; sub_40A420+12↑p
.text:0040A440
.text:0040A440 Size            = dword ptr -2Ch
.text:0040A440 nBufferLength   = dword ptr -28h
.text:0040A440 lpBuffer        = dword ptr -24h
.text:0040A440 lpFilePart      = dword ptr -20h
.text:0040A440 FilePart        = dword ptr -14h
.text:0040A440 lpFileName      = dword ptr  4
.text:0040A440 Destination     = dword ptr  8
.text:0040A440
.text:0040A440                 push    ebp
.text:0040A441                 push    edi
.text:0040A442                 push    esi
.text:0040A443                 push    ebx
.text:0040A444                 sub     esp, 1Ch
.text:0040A447                 mov     edi, [esp+2Ch+lpFileName]
.text:0040A44B                 mov     ebp, [esp+2Ch+Destination]
.text:0040A44F                 test    edi, edi
.text:0040A451                 jz      loc_40A559
.text:0040A457                 cmp     byte ptr [edi], 0
.text:0040A45A                 jz      loc_40A54C
.text:0040A460                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040A467                 call    malloc
.text:0040A46C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040A470                 lea     edx, [esp+2Ch+FilePart]
.text:0040A474                 mov     ebx, eax
.text:0040A476                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040A47A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040A482                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040A485                 call    GetFullPathNameA
.text:0040A48A                 sub     esp, 10h
.text:0040A48D                 mov     esi, eax
.text:0040A48F                 test    eax, eax
.text:0040A491                 jz      loc_40A53A
.text:0040A497                 cmp     eax, 104h
.text:0040A49C                 jle     short loc_40A4AD
.text:0040A49E                 test    ebp, ebp
.text:0040A4A0                 jz      short loc_40A509
.text:0040A4A2                 call    _errno
.text:0040A4A7                 mov     dword ptr [eax], 26h ; '&'
.text:0040A4AD
.text:0040A4AD loc_40A4AD:                             ; CODE XREF: sub_40A440+5C↑j
.text:0040A4AD                                         ; sub_40A440+F5↓j
.text:0040A4AD                 call    _errno
.text:0040A4B2                 mov     edi, [eax]
.text:0040A4B4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040A4BC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040A4BF                 call    sub_40A570
.text:0040A4C4                 test    eax, eax
.text:0040A4C6                 jnz     short loc_40A4E0
.text:0040A4C8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040A4CD                 cmp     al, 2Fh ; '/'
.text:0040A4CF                 jz      short loc_40A4E0
.text:0040A4D1                 cmp     al, 5Ch ; '\'
.text:0040A4D3                 jz      short loc_40A4E0
.text:0040A4D5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040A4D9                 mov     byte ptr [esi+ebx+1], 0
.text:0040A4DE                 mov     esi, esi
.text:0040A4E0
.text:0040A4E0 loc_40A4E0:                             ; CODE XREF: sub_40A440+86↑j
.text:0040A4E0                                         ; sub_40A440+8F↑j ...
.text:0040A4E0                 call    _errno
.text:0040A4E5                 mov     [eax], edi
.text:0040A4E7                 mov     [esp+2Ch+Size], ebx
.text:0040A4EA                 call    sub_406A60
.text:0040A4EF                 test    ebp, ebp
.text:0040A4F1                 mov     eax, ebx
.text:0040A4F3                 jz      short loc_40A501
.text:0040A4F5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040A4F9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040A4FC                 call    strcpy
.text:0040A501
.text:0040A501 loc_40A501:                             ; CODE XREF: sub_40A440+B3↑j
.text:0040A501                                         ; sub_40A440+10A↓j
.text:0040A501                 add     esp, 1Ch
.text:0040A504                 pop     ebx
.text:0040A505                 pop     esi
.text:0040A506                 pop     edi
.text:0040A507                 pop     ebp
.text:0040A508                 retn
.text:0040A509 ; ---------------------------------------------------------------------------
.text:0040A509
.text:0040A509 loc_40A509:                             ; CODE XREF: sub_40A440+60↑j
.text:0040A509                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040A50C                 lea     ecx, [eax+2]
.text:0040A50F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040A513                 call    realloc
.text:0040A518                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040A51C                 lea     edx, [esp+2Ch+FilePart]
.text:0040A520                 mov     ebx, eax
.text:0040A522                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040A526                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040A52A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040A52D                 call    GetFullPathNameA
.text:0040A532                 sub     esp, 10h
.text:0040A535                 jmp     loc_40A4AD
.text:0040A53A ; ---------------------------------------------------------------------------
.text:0040A53A
.text:0040A53A loc_40A53A:                             ; CODE XREF: sub_40A440+51↑j
.text:0040A53A                 call    sub_407190
.text:0040A53F                 mov     esi, eax
.text:0040A541                 call    _errno
.text:0040A546                 mov     [eax], esi
.text:0040A548
.text:0040A548 loc_40A548:                             ; CODE XREF: sub_40A440+117↓j
.text:0040A548                                         ; sub_40A440+124↓j
.text:0040A548                 xor     eax, eax
.text:0040A54A                 jmp     short loc_40A501
.text:0040A54C ; ---------------------------------------------------------------------------
.text:0040A54C
.text:0040A54C loc_40A54C:                             ; CODE XREF: sub_40A440+1A↑j
.text:0040A54C                 call    _errno
.text:0040A551                 mov     dword ptr [eax], 2
.text:0040A557                 jmp     short loc_40A548
.text:0040A559 ; ---------------------------------------------------------------------------
.text:0040A559
.text:0040A559 loc_40A559:                             ; CODE XREF: sub_40A440+11↑j
.text:0040A559                 call    _errno
.text:0040A55E                 mov     dword ptr [eax], 16h
.text:0040A564                 jmp     short loc_40A548
.text:0040A564 sub_40A440      endp
.text:0040A564
.text:0040A564 ; ---------------------------------------------------------------------------
.text:0040A566                 align 10h
.text:0040A570
.text:0040A570 ; =============== S U B R O U T I N E =======================================
.text:0040A570
.text:0040A570
.text:0040A570 ; int __cdecl sub_40A570(LPCSTR lpFileName, int)
.text:0040A570 sub_40A570      proc near               ; CODE XREF: .text:00406A42↑p
.text:0040A570                                         ; sub_406160+2A93↑p ...
.text:0040A570
.text:0040A570 uMode           = dword ptr -1Ch
.text:0040A570 var_10          = dword ptr -10h
.text:0040A570 var_C           = dword ptr -0Ch
.text:0040A570 var_8           = dword ptr -8
.text:0040A570 var_4           = dword ptr -4
.text:0040A570 lpFileName      = dword ptr  4
.text:0040A570 arg_4           = dword ptr  8
.text:0040A570
.text:0040A570                 sub     esp, 1Ch
.text:0040A573                 mov     [esp+1Ch+var_10], ebx
.text:0040A577                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040A57B                 mov     [esp+1Ch+var_4], ebp
.text:0040A57F                 xor     ebp, ebp
.text:0040A581                 test    ebx, ebx
.text:0040A583                 mov     [esp+1Ch+var_C], esi
.text:0040A587                 mov     esi, [esp+1Ch+arg_4]
.text:0040A58B                 mov     [esp+1Ch+var_8], edi
.text:0040A58F                 jz      short loc_40A599
.text:0040A591                 test    esi, 0FFFFFFE8h
.text:0040A597                 jz      short loc_40A5C0
.text:0040A599
.text:0040A599 loc_40A599:                             ; CODE XREF: sub_40A570+1F↑j
.text:0040A599                 call    _errno
.text:0040A59E                 mov     dword ptr [eax], 16h
.text:0040A5A4
.text:0040A5A4 loc_40A5A4:                             ; CODE XREF: sub_40A570+B1↓j
.text:0040A5A4                 mov     eax, 0FFFFFFFFh
.text:0040A5A9
.text:0040A5A9 loc_40A5A9:                             ; CODE XREF: sub_40A570+86↓j
.text:0040A5A9                                         ; sub_40A570+A4↓j
.text:0040A5A9                 mov     ebx, [esp+1Ch+var_10]
.text:0040A5AD                 mov     esi, [esp+1Ch+var_C]
.text:0040A5B1                 mov     edi, [esp+1Ch+var_8]
.text:0040A5B5                 mov     ebp, [esp+1Ch+var_4]
.text:0040A5B9                 add     esp, 1Ch
.text:0040A5BC                 retn
.text:0040A5BC ; ---------------------------------------------------------------------------
.text:0040A5BD                 align 10h
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: sub_40A570+27↑j
.text:0040A5C0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040A5C7                 call    SetErrorMode
.text:0040A5CC                 sub     esp, 4
.text:0040A5CF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040A5D2                 call    GetFileAttributesA
.text:0040A5D7                 sub     esp, 4
.text:0040A5DA                 mov     edi, eax
.text:0040A5DC                 cmp     eax, 0FFFFFFFFh
.text:0040A5DF                 jz      short loc_40A623
.text:0040A5E1
.text:0040A5E1 loc_40A5E1:                             ; CODE XREF: sub_40A570+C6↓j
.text:0040A5E1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040A5E8                 call    SetErrorMode
.text:0040A5ED                 sub     esp, 4
.text:0040A5F0                 mov     eax, 0FFFFFFFFh
.text:0040A5F5                 inc     ebp
.text:0040A5F6                 jz      short loc_40A5A9
.text:0040A5F8                 test    esi, 10h
.text:0040A5FE                 jz      short loc_40A608
.text:0040A600                 test    edi, 10h
.text:0040A606                 jz      short loc_40A616
.text:0040A608
.text:0040A608 loc_40A608:                             ; CODE XREF: sub_40A570+8E↑j
.text:0040A608                 and     esi, 2
.text:0040A60B                 jz      short loc_40A612
.text:0040A60D                 and     edi, 1
.text:0040A610                 jnz     short loc_40A616
.text:0040A612
.text:0040A612 loc_40A612:                             ; CODE XREF: sub_40A570+9B↑j
.text:0040A612                 xor     eax, eax
.text:0040A614                 jmp     short loc_40A5A9
.text:0040A616 ; ---------------------------------------------------------------------------
.text:0040A616
.text:0040A616 loc_40A616:                             ; CODE XREF: sub_40A570+96↑j
.text:0040A616                                         ; sub_40A570+A0↑j
.text:0040A616                 call    _errno
.text:0040A61B                 mov     dword ptr [eax], 0Dh
.text:0040A621                 jmp     short loc_40A5A4
.text:0040A623 ; ---------------------------------------------------------------------------
.text:0040A623
.text:0040A623 loc_40A623:                             ; CODE XREF: sub_40A570+6F↑j
.text:0040A623                 call    sub_407190
.text:0040A628                 mov     ebp, eax
.text:0040A62A                 call    _errno
.text:0040A62F                 mov     [eax], ebp
.text:0040A631                 mov     ebp, 0FFFFFFFFh
.text:0040A636                 jmp     short loc_40A5E1
.text:0040A636 sub_40A570      endp
.text:0040A636
.text:0040A636 ; ---------------------------------------------------------------------------
.text:0040A638                 align 10h
.text:0040A640 ; const char String[4]
.text:0040A640 String          db ' :/',0              ; DATA XREF: sub_40A650+FA↓o
.text:0040A644                 align 10h
.text:0040A650
.text:0040A650 ; =============== S U B R O U T I N E =======================================
.text:0040A650
.text:0040A650
.text:0040A650 ; int __cdecl sub_40A650(LPCSTR)
.text:0040A650 sub_40A650      proc near               ; CODE XREF: sub_4079B0+E↑p
.text:0040A650                                         ; sub_407EB0+17↑p ...
.text:0040A650
.text:0040A650 Str             = dword ptr -1Ch
.text:0040A650 Val             = dword ptr -18h
.text:0040A650 Count           = dword ptr -14h
.text:0040A650 var_10          = dword ptr -10h
.text:0040A650 var_C           = dword ptr -0Ch
.text:0040A650 var_8           = dword ptr -8
.text:0040A650 var_4           = dword ptr -4
.text:0040A650 arg_0           = dword ptr  4
.text:0040A650
.text:0040A650                 sub     esp, 1Ch
.text:0040A653                 mov     edx, [esp+1Ch+arg_0]
.text:0040A657                 mov     [esp+1Ch+var_8], edi
.text:0040A65B                 mov     [esp+1Ch+var_10], ebx
.text:0040A65F                 mov     [esp+1Ch+var_C], esi
.text:0040A663                 mov     [esp+1Ch+var_4], ebp
.text:0040A667                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040A66A                 call    sub_40A420
.text:0040A66F                 test    eax, eax
.text:0040A671                 mov     edi, eax
.text:0040A673                 jz      short loc_40A6B0
.text:0040A675                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A678                 call    strlen
.text:0040A67D                 cmp     eax, 2
.text:0040A680                 jbe     short loc_40A68C
.text:0040A682                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A686                 jz      loc_40A740
.text:0040A68C
.text:0040A68C loc_40A68C:                             ; CODE XREF: sub_40A650+30↑j
.text:0040A68C                                         ; sub_40A650+F4↓j
.text:0040A68C                 test    edi, edi
.text:0040A68E                 jz      short loc_40A6B0
.text:0040A690                 mov     [esp+1Ch+Str], edi ; Str
.text:0040A693                 call    strlen
.text:0040A698                 cmp     eax, 4
.text:0040A69B                 mov     ebp, eax
.text:0040A69D                 jle     short loc_40A6B0
.text:0040A69F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040A6A2                 jz      short loc_40A6D0
.text:0040A6A4                 lea     esi, [esi+0]
.text:0040A6AA                 lea     edi, [edi+0]
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: sub_40A650+23↑j
.text:0040A6B0                                         ; sub_40A650+3E↑j ...
.text:0040A6B0                 xor     esi, esi
.text:0040A6B2
.text:0040A6B2 loc_40A6B2:                             ; CODE XREF: sub_40A650+CD↓j
.text:0040A6B2                                         ; sub_40A650+115↓j
.text:0040A6B2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040A6B5                 call    free
.text:0040A6BA                 mov     eax, esi
.text:0040A6BC                 mov     ebx, [esp+1Ch+var_10]
.text:0040A6C0                 mov     esi, [esp+1Ch+var_C]
.text:0040A6C4                 mov     edi, [esp+1Ch+var_8]
.text:0040A6C8                 mov     ebp, [esp+1Ch+var_4]
.text:0040A6CC                 add     esp, 1Ch
.text:0040A6CF                 retn
.text:0040A6D0 ; ---------------------------------------------------------------------------
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: sub_40A650+52↑j
.text:0040A6D0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040A6D4                 jnz     short loc_40A6B0
.text:0040A6D6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A6DE                 lea     ecx, [edi+2]
.text:0040A6E1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040A6E4                 call    strchr
.text:0040A6E9                 test    eax, eax
.text:0040A6EB                 jnz     short loc_40A71F
.text:0040A6ED
.text:0040A6ED loc_40A6ED:                             ; CODE XREF: sub_40A650+E2↓j
.text:0040A6ED                 inc     ebp
.text:0040A6EE
.text:0040A6EE loc_40A6EE:                             ; CODE XREF: sub_40A650+E9↓j
.text:0040A6EE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040A6F6                 lea     ebx, [ebp+1]
.text:0040A6F9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040A6FC                 call    calloc
.text:0040A701                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040A704                 mov     esi, eax
.text:0040A706                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040A70A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040A70E                 call    strncpy
.text:0040A713                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040A718                 mov     byte ptr [ebp+esi+0], 0
.text:0040A71D                 jmp     short loc_40A6B2
.text:0040A71F ; ---------------------------------------------------------------------------
.text:0040A71F
.text:0040A71F loc_40A71F:                             ; CODE XREF: sub_40A650+9B↑j
.text:0040A71F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A727                 inc     eax
.text:0040A728                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A72B                 call    strchr
.text:0040A730                 test    eax, eax
.text:0040A732                 jz      short loc_40A6ED
.text:0040A734                 sub     eax, edi
.text:0040A736                 lea     ebp, [eax+1]
.text:0040A739                 jmp     short loc_40A6EE
.text:0040A739 ; ---------------------------------------------------------------------------
.text:0040A73B                 align 10h
.text:0040A740
.text:0040A740 loc_40A740:                             ; CODE XREF: sub_40A650+36↑j
.text:0040A740                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040A744                 jnz     loc_40A68C
.text:0040A74A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040A751                 call    _strdup
.text:0040A756                 movsx   edx, byte ptr [edi]
.text:0040A759                 mov     esi, eax
.text:0040A75B                 mov     [esp+1Ch+Str], edx ; C
.text:0040A75E                 call    toupper
.text:0040A763                 mov     [esi], al
.text:0040A765                 jmp     loc_40A6B2
.text:0040A765 sub_40A650      endp
.text:0040A765
.text:0040A765 ; ---------------------------------------------------------------------------
.text:0040A76A                 align 10h
.text:0040A770
.text:0040A770 ; =============== S U B R O U T I N E =======================================
.text:0040A770
.text:0040A770
.text:0040A770 sub_40A770      proc near               ; CODE XREF: .text:0040A8C4↓p
.text:0040A770                                         ; .text:0040A9A8↓p
.text:0040A770
.text:0040A770 Str             = dword ptr -2Ch
.text:0040A770 Val             = dword ptr -28h
.text:0040A770 var_18          = dword ptr -18h
.text:0040A770 var_11          = byte ptr -11h
.text:0040A770 arg_0           = dword ptr  4
.text:0040A770
.text:0040A770                 push    ebp
.text:0040A771                 push    edi
.text:0040A772                 push    esi
.text:0040A773                 push    ebx
.text:0040A774                 sub     esp, 1Ch
.text:0040A777                 mov     edx, [esp+2Ch+arg_0]
.text:0040A77B                 cmp     edx, ds:dword_4119C0
.text:0040A781                 mov     [esp+2Ch+var_11], 0
.text:0040A786                 jz      loc_40A884
.text:0040A78C                 mov     ebx, ds:dword_4119B0
.text:0040A792                 test    ebx, ebx
.text:0040A794                 jz      short loc_40A802
.text:0040A796
.text:0040A796 loc_40A796:                             ; CODE XREF: sub_40A770+10F↓j
.text:0040A796                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A79A                 xor     edi, edi
.text:0040A79C                 xor     esi, esi
.text:0040A79E                 mov     ebp, offset dword_4119D8
.text:0040A7A3                 lea     esi, [esi+0]
.text:0040A7A9                 lea     edi, [edi+0]
.text:0040A7B0
.text:0040A7B0 loc_40A7B0:                             ; CODE XREF: sub_40A770+60↓j
.text:0040A7B0                 mov     edx, [ebp+4]
.text:0040A7B3                 mov     ecx, edi
.text:0040A7B5                 mov     eax, [ebp+0]
.text:0040A7B8                 shl     ecx, 4
.text:0040A7BB                 mov     [esp+2Ch+var_18], ecx
.text:0040A7BF                 mov     ecx, edx
.text:0040A7C1                 xor     eax, ebx
.text:0040A7C3                 xor     ecx, esi
.text:0040A7C5                 or      ecx, eax
.text:0040A7C7                 jz      short loc_40A7F1
.text:0040A7C9                 inc     edi
.text:0040A7CA                 add     ebp, 10h
.text:0040A7CD                 cmp     edi, 20h ; ' '
.text:0040A7D0                 jle     short loc_40A7B0
.text:0040A7D2
.text:0040A7D2 loc_40A7D2:                             ; CODE XREF: sub_40A770+90↓j
.text:0040A7D2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040A7D7                 mov     eax, [esp+2Ch+arg_0]
.text:0040A7DB                 mov     byte_4100E0, bl
.text:0040A7E1                 mov     ds:dword_4119C0, eax
.text:0040A7E6                 movsx   eax, bl
.text:0040A7E9
.text:0040A7E9 loc_40A7E9:                             ; CODE XREF: sub_40A770+11B↓j
.text:0040A7E9                 add     esp, 1Ch
.text:0040A7EC                 pop     ebx
.text:0040A7ED                 pop     esi
.text:0040A7EE                 pop     edi
.text:0040A7EF                 pop     ebp
.text:0040A7F0                 retn
.text:0040A7F1 ; ---------------------------------------------------------------------------
.text:0040A7F1
.text:0040A7F1 loc_40A7F1:                             ; CODE XREF: sub_40A770+57↑j
.text:0040A7F1                 mov     edx, [esp+2Ch+var_18]
.text:0040A7F5                 movzx   eax, byte ptr ds:dword_4119D0[edx]
.text:0040A7FC                 mov     [esp+2Ch+var_11], al
.text:0040A800                 jmp     short loc_40A7D2
.text:0040A802 ; ---------------------------------------------------------------------------
.text:0040A802
.text:0040A802 loc_40A802:                             ; CODE XREF: sub_40A770+24↑j
.text:0040A802                 mov     [esp+2Ch+Str], 0
.text:0040A809                 call    sub_40C250
.text:0040A80E                 test    eax, eax
.text:0040A810                 mov     ebx, eax
.text:0040A812                 jz      short loc_40A86C
.text:0040A814                 movzx   ecx, byte ptr [eax]
.text:0040A817                 mov     esi, 0FFFFFFF0h
.text:0040A81C                 test    cl, cl
.text:0040A81E                 jz      short loc_40A86C
.text:0040A820
.text:0040A820 loc_40A820:                             ; CODE XREF: sub_40A770+FA↓j
.text:0040A820                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040A823                 movsx   ebp, cl
.text:0040A826                 add     esi, 10h
.text:0040A829                 mov     ds:dword_4119D0[esi], ebp
.text:0040A82F                 mov     edi, ebp
.text:0040A831                 sar     edi, 1Fh
.text:0040A834                 mov     ds:dword_4119D4[esi], edi
.text:0040A83A                 call    sub_407EB0
.text:0040A83F                 mov     ds:dword_4119D8[esi], eax
.text:0040A845                 xor     ecx, ecx
.text:0040A847                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040A84A                 mov     ds:dword_4119DC[esi], ecx
.text:0040A850                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040A858                 call    strchr
.text:0040A85D                 mov     ebx, eax
.text:0040A85F                 inc     ebx
.text:0040A860                 jz      short loc_40A86C
.text:0040A862                 movzx   edx, byte ptr [eax+1]
.text:0040A866                 test    dl, dl
.text:0040A868                 mov     cl, dl
.text:0040A86A                 jnz     short loc_40A820
.text:0040A86C
.text:0040A86C loc_40A86C:                             ; CODE XREF: sub_40A770+A2↑j
.text:0040A86C                                         ; sub_40A770+AE↑j ...
.text:0040A86C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040A86F                 mov     esi, 1
.text:0040A874                 mov     ds:dword_4119B0, esi
.text:0040A87A                 call    free
.text:0040A87F                 jmp     loc_40A796
.text:0040A884 ; ---------------------------------------------------------------------------
.text:0040A884
.text:0040A884 loc_40A884:                             ; CODE XREF: sub_40A770+16↑j
.text:0040A884                 movsx   eax, byte_4100E0
.text:0040A88B                 jmp     loc_40A7E9
.text:0040A88B sub_40A770      endp
.text:0040A88B
.text:0040A88B ; ---------------------------------------------------------------------------
.text:0040A890 dword_40A890    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040A890                                         ; DATA XREF: .text:0040A8B3↓o
.text:0040A890                                         ; .text:0040A993↓o
.text:0040A8A0 ; ---------------------------------------------------------------------------
.text:0040A8A0                 sub     esp, 1Ch
.text:0040A8A3                 mov     [esp+14h], esi
.text:0040A8A7                 mov     esi, [esp+20h]
.text:0040A8AB                 mov     [esp+18h], edi
.text:0040A8AF                 mov     [esp+10h], ebx
.text:0040A8B3                 mov     dword ptr [esp], offset dword_40A890
.text:0040A8BA                 call    _strdup
.text:0040A8BF                 mov     [esp], esi
.text:0040A8C2                 mov     edi, eax
.text:0040A8C4                 call    sub_40A770
.text:0040A8C9                 mov     [edi], al
.text:0040A8CB                 test    al, al
.text:0040A8CD                 jz      short loc_40A8E1
.text:0040A8CF                 mov     eax, edi
.text:0040A8D1                 mov     ebx, [esp+10h]
.text:0040A8D5                 mov     esi, [esp+14h]
.text:0040A8D9                 mov     edi, [esp+18h]
.text:0040A8DD                 add     esp, 1Ch
.text:0040A8E0                 retn
.text:0040A8E1 ; ---------------------------------------------------------------------------
.text:0040A8E1
.text:0040A8E1 loc_40A8E1:                             ; CODE XREF: .text:0040A8CD↑j
.text:0040A8E1                 mov     [esp], edi
.text:0040A8E4                 call    free
.text:0040A8E9                 mov     dword ptr [esp+4], 0
.text:0040A8F1                 mov     dword ptr [esp], 0
.text:0040A8F8                 call    GetCurrentDirectoryA
.text:0040A8FD                 sub     esp, 8
.text:0040A900                 lea     esi, [eax+1]
.text:0040A903                 mov     [esp], esi
.text:0040A906                 call    malloc
.text:0040A90B                 mov     [esp+4], eax
.text:0040A90F                 mov     edi, eax
.text:0040A911                 mov     [esp], esi
.text:0040A914                 call    GetCurrentDirectoryA
.text:0040A919                 sub     esp, 8
.text:0040A91C                 test    eax, eax
.text:0040A91E                 jnz     short loc_40A940
.text:0040A920                 mov     dword ptr [esp+20h], 40A894h
.text:0040A928                 mov     ebx, [esp+10h]
.text:0040A92C                 mov     esi, [esp+14h]
.text:0040A930                 mov     edi, [esp+18h]
.text:0040A934                 add     esp, 1Ch
.text:0040A937                 jmp     _strdup
.text:0040A937 ; ---------------------------------------------------------------------------
.text:0040A93C                 align 10h
.text:0040A940
.text:0040A940 loc_40A940:                             ; CODE XREF: .text:0040A91E↑j
.text:0040A940                 mov     [esp+20h], edi
.text:0040A944                 mov     ebx, [esp+10h]
.text:0040A948                 mov     esi, [esp+14h]
.text:0040A94C                 mov     edi, [esp+18h]
.text:0040A950                 add     esp, 1Ch
.text:0040A953                 jmp     sub_40A650
.text:0040A953 ; ---------------------------------------------------------------------------
.text:0040A958                 align 10h
.text:0040A960                 sub     esp, 7Ch
.text:0040A963                 lea     edx, [esp+10h]
.text:0040A967                 mov     [esp+8], edx
.text:0040A96B                 mov     edx, [esp+80h]
.text:0040A972                 mov     [esp+70h], ebx
.text:0040A976                 mov     [esp+74h], esi
.text:0040A97A                 mov     [esp+4], edx
.text:0040A97E                 mov     [esp+78h], edi
.text:0040A982                 mov     dword ptr [esp], 0
.text:0040A989                 call    sub_40C460
.text:0040A98E                 xor     edx, edx
.text:0040A990                 inc     eax
.text:0040A991                 jz      short loc_40A9B5
.text:0040A993                 mov     dword ptr [esp], offset dword_40A890
.text:0040A99A                 mov     esi, [esp+20h]
.text:0040A99E                 call    _strdup
.text:0040A9A3                 mov     edi, eax
.text:0040A9A5                 mov     [esp], esi
.text:0040A9A8                 call    sub_40A770
.text:0040A9AD                 mov     [edi], al
.text:0040A9AF                 test    al, al
.text:0040A9B1                 mov     edx, edi
.text:0040A9B3                 jz      short loc_40A9C7
.text:0040A9B5
.text:0040A9B5 loc_40A9B5:                             ; CODE XREF: .text:0040A991↑j
.text:0040A9B5                                         ; .text:0040AA14↓j
.text:0040A9B5                 mov     ebx, [esp+70h]
.text:0040A9B9                 mov     eax, edx
.text:0040A9BB                 mov     esi, [esp+74h]
.text:0040A9BF                 mov     edi, [esp+78h]
.text:0040A9C3                 add     esp, 7Ch
.text:0040A9C6                 retn
.text:0040A9C7 ; ---------------------------------------------------------------------------
.text:0040A9C7
.text:0040A9C7 loc_40A9C7:                             ; CODE XREF: .text:0040A9B3↑j
.text:0040A9C7                 mov     [esp], edi
.text:0040A9CA                 call    free
.text:0040A9CF                 mov     dword ptr [esp+4], 0
.text:0040A9D7                 mov     dword ptr [esp], 0
.text:0040A9DE                 call    GetCurrentDirectoryA
.text:0040A9E3                 sub     esp, 8
.text:0040A9E6                 lea     esi, [eax+1]
.text:0040A9E9                 mov     [esp], esi
.text:0040A9EC                 call    malloc
.text:0040A9F1                 mov     [esp+4], eax
.text:0040A9F5                 mov     edi, eax
.text:0040A9F7                 mov     [esp], esi
.text:0040A9FA                 call    GetCurrentDirectoryA
.text:0040A9FF                 sub     esp, 8
.text:0040AA02                 test    eax, eax
.text:0040AA04                 jnz     short loc_40AA16
.text:0040AA06                 mov     dword ptr [esp], 40A894h
.text:0040AA0D                 call    _strdup
.text:0040AA12
.text:0040AA12 loc_40AA12:                             ; CODE XREF: .text:0040AA1E↓j
.text:0040AA12                 mov     edx, eax
.text:0040AA14                 jmp     short loc_40A9B5
.text:0040AA16 ; ---------------------------------------------------------------------------
.text:0040AA16
.text:0040AA16 loc_40AA16:                             ; CODE XREF: .text:0040AA04↑j
.text:0040AA16                 mov     [esp], edi
.text:0040AA19                 call    sub_40A650
.text:0040AA1E                 jmp     short loc_40AA12
.text:0040AA20
.text:0040AA20 ; =============== S U B R O U T I N E =======================================
.text:0040AA20
.text:0040AA20
.text:0040AA20 ; int __cdecl sub_40AA20(LPCSTR)
.text:0040AA20 sub_40AA20      proc near               ; CODE XREF: sub_407360+12F↑p
.text:0040AA20
.text:0040AA20 String1         = dword ptr -1Ch
.text:0040AA20 String2         = dword ptr -18h
.text:0040AA20 var_C           = dword ptr -0Ch
.text:0040AA20 var_8           = dword ptr -8
.text:0040AA20 var_4           = dword ptr -4
.text:0040AA20 arg_0           = dword ptr  4
.text:0040AA20
.text:0040AA20                 sub     esp, 1Ch
.text:0040AA23                 mov     [esp+1Ch+var_4], edi
.text:0040AA27                 mov     edi, [esp+1Ch+arg_0]
.text:0040AA2B                 mov     [esp+1Ch+var_C], ebx
.text:0040AA2F                 mov     [esp+1Ch+var_8], esi
.text:0040AA33                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040AA36                 call    sub_40A420
.text:0040AA3B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040AA3E                 mov     esi, eax
.text:0040AA40                 call    sub_40A650
.text:0040AA45                 mov     [esp+1Ch+String2], eax ; String2
.text:0040AA49                 mov     ebx, eax
.text:0040AA4B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040AA4E                 call    _stricmp
.text:0040AA53                 test    eax, eax
.text:0040AA55                 setz    dl
.text:0040AA58                 test    esi, esi
.text:0040AA5A                 movzx   edi, dl
.text:0040AA5D                 jz      short loc_40AA67
.text:0040AA5F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040AA62                 call    free
.text:0040AA67
.text:0040AA67 loc_40AA67:                             ; CODE XREF: sub_40AA20+3D↑j
.text:0040AA67                 test    ebx, ebx
.text:0040AA69                 jz      short loc_40AA73
.text:0040AA6B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040AA6E                 call    free
.text:0040AA73
.text:0040AA73 loc_40AA73:                             ; CODE XREF: sub_40AA20+49↑j
.text:0040AA73                 mov     eax, edi
.text:0040AA75                 mov     ebx, [esp+1Ch+var_C]
.text:0040AA79                 mov     esi, [esp+1Ch+var_8]
.text:0040AA7D                 mov     edi, [esp+1Ch+var_4]
.text:0040AA81                 add     esp, 1Ch
.text:0040AA84                 retn
.text:0040AA84 sub_40AA20      endp
.text:0040AA84
.text:0040AA84 ; ---------------------------------------------------------------------------
.text:0040AA85                 align 10h
.text:0040AA90 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040AAE1↓o
.text:0040AA99 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040AA99                                         ; DATA XREF: .text:0040AAF2↓o
.text:0040AAAD ; const CHAR aVwin32[]
.text:0040AAAD aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040AC3C↓o
.text:0040AAAD                                         ; sub_40B070+17C↓o
.text:0040AAB8 ; ---------------------------------------------------------------------------
.text:0040AAB8
.text:0040AAB8 loc_40AAB8:                             ; DATA XREF: .text:0040AD52↓o
.text:0040AAB8                 dec     esi
.text:0040AAB9                 push    esp
.text:0040AABA                 inc     esi
.text:0040AABB                 push    ebx
.text:0040AABC                 add     [esi+41h], al
.text:0040AABF                 push    esp
.text:0040AAC0                 xor     esi, [edx]
.text:0040AAC2                 add     [esi+41h], al
.text:0040AAC5                 push    esp
.text:0040AAC6                 add     [ebx+44h], al
.text:0040AAC9                 inc     esi
.text:0040AACA                 push    ebx
.text:0040AACB
.text:0040AACB loc_40AACB:                             ; CODE XREF: sub_40B070+101↓p
.text:0040AACB                 add     [ebp+55002674h], cl
.text:0040AAD1                 push    edi
.text:0040AAD2                 push    esi
.text:0040AAD3                 push    ebx
.text:0040AAD4                 sub     esp, 8BCh
.text:0040AADA                 mov     ebp, [esp+8D0h]
.text:0040AAE1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040AAE8                 call    LoadLibraryA
.text:0040AAED                 sub     esp, 4
.text:0040AAF0                 mov     edi, eax
.text:0040AAF2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040AAFA                 mov     [esp], eax
.text:0040AAFD                 call    GetProcAddress
.text:0040AB02                 sub     esp, 8
.text:0040AB05                 mov     esi, eax
.text:0040AB07                 test    ebp, ebp
.text:0040AB09                 mov     dword ptr [esp+20h], 0
.text:0040AB11                 jz      loc_40B051
.text:0040AB17                 mov     [esp], ebp
.text:0040AB1A                 call    sub_406AE0
.text:0040AB1F                 mov     [esp], eax
.text:0040AB22                 mov     ebp, eax
.text:0040AB24                 call    strlen
.text:0040AB29                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040AB2E                 mov     ebx, eax
.text:0040AB30                 jz      short loc_40AB4C
.text:0040AB32                 mov     [esp], ebp
.text:0040AB35                 lea     edx, [eax+1]
.text:0040AB38                 mov     [esp+4], edx
.text:0040AB3C                 call    realloc
.text:0040AB41                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040AB45                 mov     ebp, eax
.text:0040AB47                 mov     byte ptr [ebx+eax+1], 0
.text:0040AB4C
.text:0040AB4C loc_40AB4C:                             ; CODE XREF: .text:0040AB30↑j
.text:0040AB4C                 mov     dword ptr [esp+1Ch], 400h
.text:0040AB54                 lea     edx, [esp+0B0h]
.text:0040AB5B                 lea     ebx, [esp+5Ch]
.text:0040AB5F                 mov     [esp+18h], edx
.text:0040AB63                 lea     ecx, [esp+58h]
.text:0040AB67                 lea     edx, [esp+54h]
.text:0040AB6B                 mov     [esp+14h], ebx
.text:0040AB6F                 lea     eax, [esp+4B0h]
.text:0040AB76                 mov     [esp+10h], ecx
.text:0040AB7A                 mov     [esp+0Ch], edx
.text:0040AB7E                 mov     dword ptr [esp+8], 400h
.text:0040AB86                 mov     [esp+4], eax
.text:0040AB8A                 mov     [esp], ebp
.text:0040AB8D                 call    GetVolumeInformationA
.text:0040AB92                 sub     esp, 20h
.text:0040AB95                 test    eax, eax
.text:0040AB97                 jz      loc_40B02E
.text:0040AB9D                 test    esi, esi
.text:0040AB9F                 jz      short loc_40ABC5
.text:0040ABA1                 mov     [esp], ebp
.text:0040ABA4                 lea     edx, [esp+48h]
.text:0040ABA8                 lea     ebx, [esp+40h]
.text:0040ABAC                 mov     [esp+0Ch], edx
.text:0040ABB0                 lea     ecx, [esp+38h]
.text:0040ABB4                 mov     [esp+8], ebx
.text:0040ABB8                 mov     [esp+4], ecx
.text:0040ABBC                 call    esi
.text:0040ABBE                 sub     esp, 10h
.text:0040ABC1                 mov     [esp+20h], eax
.text:0040ABC5
.text:0040ABC5 loc_40ABC5:                             ; CODE XREF: .text:0040AB9F↑j
.text:0040ABC5                 test    edi, edi
.text:0040ABC7                 jz      short loc_40ABD4
.text:0040ABC9                 mov     [esp], edi
.text:0040ABCC                 call    FreeLibrary
.text:0040ABD1                 sub     esp, 4
.text:0040ABD4
.text:0040ABD4 loc_40ABD4:                             ; CODE XREF: .text:0040ABC7↑j
.text:0040ABD4                 call    sub_40A140
.text:0040ABD9                 test    eax, eax
.text:0040ABDB                 lea     esi, [esp+28h]
.text:0040ABDF                 jz      loc_40B010
.text:0040ABE5                 call    sub_40A140
.text:0040ABEA                 test    eax, eax
.text:0040ABEC                 jz      short loc_40ABFC
.text:0040ABEE                 call    sub_40A090
.text:0040ABF3                 cmp     eax, 0Bh
.text:0040ABF6                 jle     loc_40AFE4
.text:0040ABFC
.text:0040ABFC loc_40ABFC:                             ; CODE XREF: .text:0040ABEC↑j
.text:0040ABFC                 cld
.text:0040ABFD                 xor     eax, eax
.text:0040ABFF                 lea     ebx, [esp+60h]
.text:0040AC03                 mov     ecx, 7
.text:0040AC08                 mov     edi, ebx
.text:0040AC0A                 rep stosd
.text:0040AC0C                 mov     dword ptr [esp+18h], 0
.text:0040AC14                 mov     dword ptr [esp+14h], 4000000h
.text:0040AC1C                 mov     dword ptr [esp+10h], 0
.text:0040AC24                 mov     dword ptr [esp+0Ch], 0
.text:0040AC2C                 mov     dword ptr [esp+8], 0
.text:0040AC34                 mov     dword ptr [esp+4], 0
.text:0040AC3C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040AC43                 call    CreateFileA
.text:0040AC48                 sub     esp, 1Ch
.text:0040AC4B                 mov     edi, eax
.text:0040AC4D                 cmp     eax, 0FFFFFFFFh
.text:0040AC50                 jz      short loc_40ACD0
.text:0040AC52                 mov     [esp+10h], ebx
.text:0040AC56                 lea     edx, [esp+80h]
.text:0040AC5D                 lea     ecx, [esp+24h]
.text:0040AC61                 mov     [esp+70h], edx
.text:0040AC65                 mov     [esp+18h], ecx
.text:0040AC69                 mov     [esp+8], ebx
.text:0040AC6D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040AC75                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040AC7D                 mov     [esp+64h], ebp
.text:0040AC81                 mov     dword ptr [esp+78h], 1
.text:0040AC89                 mov     dword ptr [esp+1Ch], 0
.text:0040AC91                 mov     dword ptr [esp+14h], 1Ch
.text:0040AC99                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040ACA1                 mov     dword ptr [esp+4], 6
.text:0040ACA9                 mov     [esp], eax
.text:0040ACAC                 call    DeviceIoControl
.text:0040ACB1                 sub     esp, 20h
.text:0040ACB4                 mov     ebx, eax
.text:0040ACB6                 mov     [esp], edi
.text:0040ACB9                 call    CloseHandle
.text:0040ACBE                 sub     esp, 4
.text:0040ACC1                 test    ebx, ebx
.text:0040ACC3                 jz      short loc_40ACD0
.text:0040ACC5                 test    byte ptr [esp+78h], 1
.text:0040ACCA                 jz      loc_40AFB0
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: .text:0040AC50↑j
.text:0040ACD0                                         ; .text:0040ACC3↑j
.text:0040ACD0                 call    sub_407190
.text:0040ACD5                 mov     edi, eax
.text:0040ACD7                 call    _errno
.text:0040ACDC                 mov     [eax], edi
.text:0040ACDE                 xor     eax, eax
.text:0040ACE0
.text:0040ACE0 loc_40ACE0:                             ; CODE XREF: .text:0040AFDF↓j
.text:0040ACE0                                         ; .text:0040B00B↓j
.text:0040ACE0                 test    eax, eax
.text:0040ACE2                 jnz     short loc_40AD04
.text:0040ACE4                 mov     dword ptr [esp+34h], 1
.text:0040ACEC                 mov     dword ptr [esp+30h], 200h
.text:0040ACF4                 mov     dword ptr [esp+2Ch], 0
.text:0040ACFC                 mov     dword ptr [esp+28h], 0
.text:0040AD04
.text:0040AD04 loc_40AD04:                             ; CODE XREF: .text:0040ACE2↑j
.text:0040AD04                 mov     edx, [esp+30h]
.text:0040AD08                 mov     edi, [esp+34h]
.text:0040AD0C                 mov     ecx, [esp+20h]
.text:0040AD10                 imul    edi, edx
.text:0040AD13                 test    ecx, ecx
.text:0040AD15                 jnz     short loc_40AD3D
.text:0040AD17                 mov     eax, [esp+28h]
.text:0040AD1B                 mul     edi
.text:0040AD1D                 mov     esi, eax
.text:0040AD1F                 mov     eax, [esp+2Ch]
.text:0040AD23                 mov     [esp+44h], edx
.text:0040AD27                 mov     [esp+40h], esi
.text:0040AD2B                 mul     edi
.text:0040AD2D                 mov     [esp+48h], eax
.text:0040AD31                 mov     [esp+4Ch], edx
.text:0040AD35                 mov     [esp+38h], eax
.text:0040AD39                 mov     [esp+3Ch], edx
.text:0040AD3D
.text:0040AD3D loc_40AD3D:                             ; CODE XREF: .text:0040AD15↑j
.text:0040AD3D                 mov     ebx, [esp+5Ch]
.text:0040AD41                 lea     edx, [esp+0B0h]
.text:0040AD48                 mov     ecx, [esp+8D4h]
.text:0040AD4F                 mov     [ecx+48h], ebx
.text:0040AD52                 mov     dword ptr [esp+4], offset loc_40AAB8
.text:0040AD5A                 mov     [esp], edx
.text:0040AD5D                 call    _stricmp
.text:0040AD62                 test    eax, eax
.text:0040AD64                 jnz     loc_40AF20
.text:0040AD6A                 mov     esi, [esp+8D4h]
.text:0040AD71                 mov     dword ptr [esi], 5346544Eh
.text:0040AD77
.text:0040AD77 loc_40AD77:                             ; CODE XREF: .text:0040AF48↓j
.text:0040AD77                                         ; .text:0040AF75↓j ...
.text:0040AD77                 mov     ebx, [esp+30h]
.text:0040AD7B                 mov     esi, [esp+8D4h]
.text:0040AD82                 mov     [esi+4], ebx
.text:0040AD85                 mov     [esi+8], ebx
.text:0040AD88                 mov     ebx, [esi+8]
.text:0040AD8B                 mov     [esi+0Ch], edi
.text:0040AD8E                 mov     ecx, [esp+44h]
.text:0040AD92                 xor     esi, esi
.text:0040AD94                 mov     [esp+8], ebx
.text:0040AD98                 mov     edx, [esp+40h]
.text:0040AD9C                 mov     [esp+0Ch], esi
.text:0040ADA0                 mov     [esp+4], ecx
.text:0040ADA4                 mov     [esp], edx
.text:0040ADA7                 call    sub_40EA70
.text:0040ADAC                 mov     ecx, [esp+8D4h]
.text:0040ADB3                 mov     [ecx+10h], eax
.text:0040ADB6                 mov     [ecx+14h], edx
.text:0040ADB9                 mov     ecx, [esp+4Ch]
.text:0040ADBD                 mov     [esp+8], ebx
.text:0040ADC1                 mov     edx, [esp+48h]
.text:0040ADC5                 mov     [esp+0Ch], esi
.text:0040ADC9                 mov     [esp+4], ecx
.text:0040ADCD                 mov     [esp], edx
.text:0040ADD0                 call    sub_40EA70
.text:0040ADD5                 mov     ecx, [esp+8D4h]
.text:0040ADDC                 mov     [ecx+18h], eax
.text:0040ADDF                 mov     [ecx+1Ch], edx
.text:0040ADE2                 mov     ecx, [esp+38h]
.text:0040ADE6                 mov     [esp+8], ebx
.text:0040ADEA                 mov     ebx, [esp+3Ch]
.text:0040ADEE                 mov     [esp+0Ch], esi
.text:0040ADF2                 mov     [esp], ecx
.text:0040ADF5                 mov     [esp+4], ebx
.text:0040ADF9                 call    sub_40EA70
.text:0040ADFE                 mov     esi, [esp+8D4h]
.text:0040AE05                 mov     [esi+20h], eax
.text:0040AE08                 mov     [esi+24h], edx
.text:0040AE0B                 mov     ecx, [esp+44h]
.text:0040AE0F                 mov     esi, edi
.text:0040AE11                 mov     [esp+8], esi
.text:0040AE15                 mov     edx, [esp+40h]
.text:0040AE19                 xor     edi, edi
.text:0040AE1B                 mov     [esp+0Ch], edi
.text:0040AE1F                 mov     [esp+4], ecx
.text:0040AE23                 mov     [esp], edx
.text:0040AE26                 call    sub_40EA70
.text:0040AE2B                 mov     ebx, [esp+8D4h]
.text:0040AE32                 mov     [ebx+28h], eax
.text:0040AE35                 mov     [ebx+2Ch], edx
.text:0040AE38                 mov     ecx, [esp+4Ch]
.text:0040AE3C                 mov     [esp+8], esi
.text:0040AE40                 mov     edx, [esp+48h]
.text:0040AE44                 mov     [esp+0Ch], edi
.text:0040AE48                 mov     [esp+4], ecx
.text:0040AE4C                 mov     [esp], edx
.text:0040AE4F                 call    sub_40EA70
.text:0040AE54                 mov     ebx, [esp+8D4h]
.text:0040AE5B                 mov     [ebx+30h], eax
.text:0040AE5E                 mov     [ebx+34h], edx
.text:0040AE61                 mov     ecx, [esp+3Ch]
.text:0040AE65                 mov     [esp+8], esi
.text:0040AE69                 mov     edx, [esp+38h]
.text:0040AE6D                 mov     [esp+0Ch], edi
.text:0040AE71                 mov     [esp+4], ecx
.text:0040AE75                 mov     [esp], edx
.text:0040AE78                 call    sub_40EA70
.text:0040AE7D                 mov     edx, [esp+8D4h]
.text:0040AE84                 lea     ecx, [esp+0B0h]
.text:0040AE8B                 mov     [edx+38h], eax
.text:0040AE8E                 mov     esi, [esp+58h]
.text:0040AE92                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040AE99                 mov     [edx+110h], esi
.text:0040AE9F                 mov     esi, edx
.text:0040AEA1                 add     esi, 4Ch ; 'L'
.text:0040AEA4                 movzx   ebx, word ptr [esp+56h]
.text:0040AEA9                 movzx   edi, word ptr [esp+54h]
.text:0040AEAE                 mov     [edx+3Ch], ebx
.text:0040AEB1                 lea     ebx, [esp+4B0h]
.text:0040AEB8                 mov     [edx+40h], edi
.text:0040AEBB                 mov     [esp+4], ecx
.text:0040AEBF                 mov     dword ptr [esp+8], 10h
.text:0040AEC7                 mov     [esp], esi
.text:0040AECA                 call    strncpy
.text:0040AECF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040AED7                 mov     edi, [esp+8D4h]
.text:0040AEDE                 mov     [esp+4], ebx
.text:0040AEE2                 add     edi, 5Ch ; '\'
.text:0040AEE5                 mov     [esp], edi
.text:0040AEE8                 call    strncpy
.text:0040AEED                 mov     [esp+4], ebp
.text:0040AEF1                 mov     ebp, [esp+8D4h]
.text:0040AEF8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040AF00                 add     ebp, 0B6h ; '¶'
.text:0040AF06                 mov     [esp], ebp
.text:0040AF09                 call    strncpy
.text:0040AF0E                 xor     eax, eax
.text:0040AF10
.text:0040AF10 loc_40AF10:                             ; CODE XREF: .text:0040B04C↓j
.text:0040AF10                 add     esp, 8BCh
.text:0040AF16                 pop     ebx
.text:0040AF17                 pop     esi
.text:0040AF18                 pop     edi
.text:0040AF19                 pop     ebp
.text:0040AF1A                 retn
.text:0040AF1A ; ---------------------------------------------------------------------------
.text:0040AF1B                 align 10h
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: .text:0040AD64↑j
.text:0040AF20                 mov     dword ptr [esp+4], 40AABDh
.text:0040AF28                 lea     eax, [esp+0B0h]
.text:0040AF2F                 mov     [esp], eax
.text:0040AF32                 call    _stricmp
.text:0040AF37                 test    eax, eax
.text:0040AF39                 jnz     short loc_40AF4D
.text:0040AF3B                 mov     edx, [esp+8D4h]
.text:0040AF42                 mov     dword ptr [edx], 4008h
.text:0040AF48                 jmp     loc_40AD77
.text:0040AF4D ; ---------------------------------------------------------------------------
.text:0040AF4D
.text:0040AF4D loc_40AF4D:                             ; CODE XREF: .text:0040AF39↑j
.text:0040AF4D                 mov     dword ptr [esp+4], 40AAC3h
.text:0040AF55                 lea     ecx, [esp+0B0h]
.text:0040AF5C                 mov     [esp], ecx
.text:0040AF5F                 call    _stricmp
.text:0040AF64                 test    eax, eax
.text:0040AF66                 jnz     short loc_40AF7A
.text:0040AF68                 mov     ebx, [esp+8D4h]
.text:0040AF6F                 mov     dword ptr [ebx], 4006h
.text:0040AF75                 jmp     loc_40AD77
.text:0040AF7A ; ---------------------------------------------------------------------------
.text:0040AF7A
.text:0040AF7A loc_40AF7A:                             ; CODE XREF: .text:0040AF66↑j
.text:0040AF7A                 mov     dword ptr [esp+4], 40AAC7h
.text:0040AF82                 lea     eax, [esp+0B0h]
.text:0040AF89                 mov     [esp], eax
.text:0040AF8C                 call    _stricmp
.text:0040AF91                 test    eax, eax
.text:0040AF93                 mov     esi, [esp+8D4h]
.text:0040AF9A                 setnz   cl
.text:0040AF9D                 movzx   edx, cl
.text:0040AFA0                 dec     edx
.text:0040AFA1                 and     edx, 4000h
.text:0040AFA7                 mov     [esi], edx
.text:0040AFA9                 jmp     loc_40AD77
.text:0040AFA9 ; ---------------------------------------------------------------------------
.text:0040AFAE                 align 10h
.text:0040AFB0
.text:0040AFB0 loc_40AFB0:                             ; CODE XREF: .text:0040ACCA↑j
.text:0040AFB0                 mov     edi, [esp+84h]
.text:0040AFB7                 mov     eax, 1
.text:0040AFBC                 mov     edx, [esp+88h]
.text:0040AFC3                 mov     ecx, [esp+8Ch]
.text:0040AFCA                 mov     ebx, [esp+90h]
.text:0040AFD1                 mov     [esp+34h], edi
.text:0040AFD5                 mov     [esp+30h], edx
.text:0040AFD9                 mov     [esp+2Ch], ecx
.text:0040AFDD                 mov     [esi], ebx
.text:0040AFDF                 jmp     loc_40ACE0
.text:0040AFE4 ; ---------------------------------------------------------------------------
.text:0040AFE4
.text:0040AFE4 loc_40AFE4:                             ; CODE XREF: .text:0040ABF6↑j
.text:0040AFE4                 mov     [esp+10h], esi
.text:0040AFE8                 lea     eax, [esp+2Ch]
.text:0040AFEC                 lea     esi, [esp+30h]
.text:0040AFF0                 mov     [esp+0Ch], eax
.text:0040AFF4                 lea     edi, [esp+34h]
.text:0040AFF8                 mov     [esp+8], esi
.text:0040AFFC                 mov     [esp+4], edi
.text:0040B000
.text:0040B000 loc_40B000:                             ; CODE XREF: .text:0040B02C↓j
.text:0040B000                 mov     [esp], ebp
.text:0040B003                 call    GetDiskFreeSpaceA
.text:0040B008                 sub     esp, 14h
.text:0040B00B                 jmp     loc_40ACE0
.text:0040B010 ; ---------------------------------------------------------------------------
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: .text:0040ABDF↑j
.text:0040B010                 mov     [esp+10h], esi
.text:0040B014                 lea     ebx, [esp+2Ch]
.text:0040B018                 lea     eax, [esp+30h]
.text:0040B01C                 mov     [esp+0Ch], ebx
.text:0040B020                 lea     esi, [esp+34h]
.text:0040B024                 mov     [esp+8], eax
.text:0040B028                 mov     [esp+4], esi
.text:0040B02C                 jmp     short loc_40B000
.text:0040B02E ; ---------------------------------------------------------------------------
.text:0040B02E
.text:0040B02E loc_40B02E:                             ; CODE XREF: .text:0040AB97↑j
.text:0040B02E                 mov     [esp], edi
.text:0040B031                 call    FreeLibrary
.text:0040B036                 sub     esp, 4
.text:0040B039                 call    sub_407190
.text:0040B03E                 mov     esi, eax
.text:0040B040                 call    _errno
.text:0040B045                 mov     [eax], esi
.text:0040B047
.text:0040B047 loc_40B047:                             ; CODE XREF: .text:0040B067↓j
.text:0040B047                 mov     eax, 0FFFFFFFFh
.text:0040B04C                 jmp     loc_40AF10
.text:0040B051 ; ---------------------------------------------------------------------------
.text:0040B051
.text:0040B051 loc_40B051:                             ; CODE XREF: .text:0040AB11↑j
.text:0040B051                 mov     [esp], edi
.text:0040B054                 call    FreeLibrary
.text:0040B059                 sub     esp, 4
.text:0040B05C                 call    _errno
.text:0040B061                 mov     dword ptr [eax], 2
.text:0040B067                 jmp     short loc_40B047
.text:0040B067 ; ---------------------------------------------------------------------------
.text:0040B069                 align 10h
.text:0040B070
.text:0040B070 ; =============== S U B R O U T I N E =======================================
.text:0040B070
.text:0040B070
.text:0040B070 ; int __cdecl sub_40B070(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040B070 sub_40B070      proc near               ; CODE XREF: sub_4079B0+2C7↑p
.text:0040B070                                         ; .text:00407FEA↑p
.text:0040B070
.text:0040B070 lpFileName      = dword ptr -9Ch
.text:0040B070 dwDesiredAccess = dword ptr -98h
.text:0040B070 dwShareMode     = dword ptr -94h
.text:0040B070 lpSecurityAttributes= dword ptr -90h
.text:0040B070 dwCreationDisposition= dword ptr -8Ch
.text:0040B070 dwFlagsAndAttributes= dword ptr -88h
.text:0040B070 hTemplateFile   = dword ptr -84h
.text:0040B070 lpOverlapped    = dword ptr -80h
.text:0040B070 BytesReturned   = dword ptr -70h
.text:0040B070 InBuffer        = byte ptr -6Ch
.text:0040B070 var_68          = dword ptr -68h
.text:0040B070 var_64          = dword ptr -64h
.text:0040B070 var_60          = dword ptr -60h
.text:0040B070 var_5C          = dword ptr -5Ch
.text:0040B070 var_54          = dword ptr -54h
.text:0040B070 var_4C          = byte ptr -4Ch
.text:0040B070 var_48          = dword ptr -48h
.text:0040B070 var_44          = dword ptr -44h
.text:0040B070 var_40          = dword ptr -40h
.text:0040B070 var_3C          = dword ptr -3Ch
.text:0040B070 lpRootPathName  = dword ptr -2Ch
.text:0040B070 lpSectorsPerCluster= dword ptr -28h
.text:0040B070 lpBytesPerSector= dword ptr -24h
.text:0040B070 lpNumberOfFreeClusters= dword ptr -20h
.text:0040B070 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040B070 var_18          = dword ptr -18h
.text:0040B070 var_14          = dword ptr -14h
.text:0040B070 var_10          = dword ptr -10h
.text:0040B070 var_C           = dword ptr -0Ch
.text:0040B070 var_8           = dword ptr -8
.text:0040B070 var_4           = dword ptr -4
.text:0040B070 arg_0           = dword ptr  4
.text:0040B070 arg_4           = dword ptr  8
.text:0040B070 arg_8           = dword ptr  0Ch
.text:0040B070 arg_C           = dword ptr  10h
.text:0040B070 arg_10          = dword ptr  14h
.text:0040B070
.text:0040B070                 sub     esp, 2Ch
.text:0040B073                 mov     edx, [esp+2Ch+arg_0]
.text:0040B077                 mov     [esp+2Ch+var_10], ebx
.text:0040B07B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040B07F                 mov     [esp+2Ch+var_C], esi
.text:0040B083                 mov     esi, [esp+2Ch+arg_C]
.text:0040B087                 mov     [esp+2Ch+var_8], edi
.text:0040B08B                 mov     edi, [esp+2Ch+arg_8]
.text:0040B08F                 mov     [esp+2Ch+var_4], ebp
.text:0040B093                 mov     ebp, [esp+2Ch+arg_4]
.text:0040B097                 mov     [esp+2Ch+var_14], edx
.text:0040B09B                 call    sub_40A140
.text:0040B0A0                 test    eax, eax
.text:0040B0A2                 jz      short loc_40B0D4
.text:0040B0A4                 mov     [esp+2Ch+arg_10], ebx
.text:0040B0A8                 mov     edx, [esp+2Ch+var_14]
.text:0040B0AC                 mov     ebx, [esp+2Ch+var_10]
.text:0040B0B0                 mov     [esp+2Ch+arg_C], esi
.text:0040B0B4                 mov     esi, [esp+2Ch+var_C]
.text:0040B0B8                 mov     [esp+2Ch+arg_8], edi
.text:0040B0BC                 mov     edi, [esp+2Ch+var_8]
.text:0040B0C0                 mov     [esp+2Ch+arg_4], ebp
.text:0040B0C4                 mov     ebp, [esp+2Ch+var_4]
.text:0040B0C8                 mov     [esp+2Ch+arg_0], edx
.text:0040B0CC                 add     esp, 2Ch
.text:0040B0CF                 jmp     loc_40B180
.text:0040B0D4 ; ---------------------------------------------------------------------------
.text:0040B0D4
.text:0040B0D4 loc_40B0D4:                             ; CODE XREF: sub_40B070+32↑j
.text:0040B0D4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040B0D8                 mov     ecx, [esp+2Ch+var_14]
.text:0040B0DC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040B0E0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040B0E4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040B0E8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040B0EB                 call    GetDiskFreeSpaceA
.text:0040B0F0                 sub     esp, 14h
.text:0040B0F3                 mov     ebx, [esp+2Ch+var_10]
.text:0040B0F7                 mov     esi, [esp+2Ch+var_C]
.text:0040B0FB                 mov     edi, [esp+2Ch+var_8]
.text:0040B0FF                 mov     ebp, [esp+2Ch+var_4]
.text:0040B103                 add     esp, 2Ch
.text:0040B106                 retn
.text:0040B106 ; ---------------------------------------------------------------------------
.text:0040B107                 align 10h
.text:0040B110
.text:0040B110 loc_40B110:                             ; CODE XREF: .text:0040B78D↓p
.text:0040B110                 sub     esp, 1Ch
.text:0040B113                 mov     [esp+1Ch+var_4], esi
.text:0040B117                 mov     esi, [esp+1Ch+arg_0]
.text:0040B11B                 mov     [esp+1Ch+var_8], ebx
.text:0040B11F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040B122                 call    sub_40A650
.text:0040B127                 test    eax, eax
.text:0040B129                 mov     ebx, eax
.text:0040B12B                 jz      short loc_40B140
.text:0040B12D                 cmp     byte ptr [eax], 0
.text:0040B130                 jz      short loc_40B140
.text:0040B132                 test    esi, esi
.text:0040B134                 jz      short loc_40B140
.text:0040B136                 cmp     byte ptr [esi], 0
.text:0040B139                 jnz     short loc_40B166
.text:0040B13B                 nop
.text:0040B13C                 lea     esi, [esi+0]
.text:0040B140
.text:0040B140 loc_40B140:                             ; CODE XREF: sub_40B070+BB↑j
.text:0040B140                                         ; sub_40B070+C0↑j ...
.text:0040B140                 call    _errno
.text:0040B145                 mov     dword ptr [eax], 2
.text:0040B14B                 mov     esi, 0FFFFFFFFh
.text:0040B150
.text:0040B150 loc_40B150:                             ; CODE XREF: sub_40B070+108↓j
.text:0040B150                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040B153                 call    free
.text:0040B158                 mov     eax, esi
.text:0040B15A                 mov     ebx, [esp+1Ch+var_8]
.text:0040B15E                 mov     esi, [esp+1Ch+var_4]
.text:0040B162                 add     esp, 1Ch
.text:0040B165                 retn
.text:0040B166 ; ---------------------------------------------------------------------------
.text:0040B166
.text:0040B166 loc_40B166:                             ; CODE XREF: sub_40B070+C9↑j
.text:0040B166                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040B169                 mov     edx, [esp+1Ch+arg_4]
.text:0040B16D                 mov     [esp+1Ch+var_18], edx
.text:0040B171                 call    near ptr loc_40AACB+5
.text:0040B176                 mov     esi, eax
.text:0040B178                 jmp     short loc_40B150
.text:0040B178 ; ---------------------------------------------------------------------------
.text:0040B17A                 align 10h
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: sub_40B070+5F↑j
.text:0040B180                 push    ebp
.text:0040B181                 push    edi
.text:0040B182                 push    esi
.text:0040B183                 push    ebx
.text:0040B184                 sub     esp, 8Ch
.text:0040B18A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040B191                 call    sub_40A140
.text:0040B196                 test    eax, eax
.text:0040B198                 jz      short loc_40B1A8
.text:0040B19A                 call    sub_40A090
.text:0040B19F                 cmp     eax, 0Bh
.text:0040B1A2                 jle     loc_40B2D0
.text:0040B1A8
.text:0040B1A8 loc_40B1A8:                             ; CODE XREF: sub_40B070+128↑j
.text:0040B1A8                 cld
.text:0040B1A9                 xor     eax, eax
.text:0040B1AB                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040B1AF                 mov     ecx, 7
.text:0040B1B4                 mov     edi, ebx
.text:0040B1B6                 lea     esi, [esp+9Ch+var_4C]
.text:0040B1BA                 rep stosd
.text:0040B1BC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040B1C4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040B1CC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040B1D4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B1DC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040B1E4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040B1EC                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040B1F3                 call    CreateFileA
.text:0040B1F8                 sub     esp, 1Ch
.text:0040B1FB                 mov     edi, eax
.text:0040B1FD                 cmp     eax, 0FFFFFFFFh
.text:0040B200                 jz      short loc_40B275
.text:0040B202                 mov     [esp+9Ch+var_68], ebp
.text:0040B206                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040B20A                 mov     [esp+9Ch+var_5C], esi
.text:0040B20E                 mov     [esp+9Ch+var_60], 7303h
.text:0040B216                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040B21E                 mov     [esp+9Ch+var_54], 1
.text:0040B226                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040B22E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040B232                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040B23A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040B23E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040B246                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040B24A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040B252                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040B255                 call    DeviceIoControl
.text:0040B25A                 sub     esp, 20h
.text:0040B25D                 mov     esi, eax
.text:0040B25F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040B262                 call    CloseHandle
.text:0040B267                 sub     esp, 4
.text:0040B26A                 test    esi, esi
.text:0040B26C                 jz      short loc_40B275
.text:0040B26E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040B273                 jz      short loc_40B290
.text:0040B275
.text:0040B275 loc_40B275:                             ; CODE XREF: sub_40B070+190↑j
.text:0040B275                                         ; sub_40B070+1FC↑j
.text:0040B275                 call    sub_407190
.text:0040B27A                 mov     edi, eax
.text:0040B27C                 call    _errno
.text:0040B281                 mov     [eax], edi
.text:0040B283                 xor     eax, eax
.text:0040B285
.text:0040B285 loc_40B285:                             ; CODE XREF: sub_40B070+25A↓j
.text:0040B285                                         ; sub_40B070+297↓j
.text:0040B285                 add     esp, 8Ch
.text:0040B28B                 pop     ebx
.text:0040B28C                 pop     esi
.text:0040B28D                 pop     edi
.text:0040B28E                 pop     ebp
.text:0040B28F                 retn
.text:0040B290 ; ---------------------------------------------------------------------------
.text:0040B290
.text:0040B290 loc_40B290:                             ; CODE XREF: sub_40B070+203↑j
.text:0040B290                 mov     edx, [esp+9Ch+var_48]
.text:0040B294                 mov     eax, 1
.text:0040B299                 mov     ebx, [esp+9Ch+arg_4]
.text:0040B2A0                 mov     ebp, [esp+9Ch+arg_8]
.text:0040B2A7                 mov     ecx, [esp+9Ch+arg_C]
.text:0040B2AE                 mov     [ebx], edx
.text:0040B2B0                 mov     edi, [esp+9Ch+var_44]
.text:0040B2B4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040B2BB                 mov     [ebp+0], edi
.text:0040B2BE                 mov     esi, [esp+9Ch+var_40]
.text:0040B2C2                 mov     [ecx], esi
.text:0040B2C4                 mov     edx, [esp+9Ch+var_3C]
.text:0040B2C8                 mov     [ebx], edx
.text:0040B2CA                 jmp     short loc_40B285
.text:0040B2CA ; ---------------------------------------------------------------------------
.text:0040B2CC                 align 10h
.text:0040B2D0
.text:0040B2D0 loc_40B2D0:                             ; CODE XREF: sub_40B070+132↑j
.text:0040B2D0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040B2D3                 mov     eax, [esp+9Ch+arg_C]
.text:0040B2DA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040B2E1                 mov     edx, [esp+9Ch+arg_8]
.text:0040B2E8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040B2EC                 mov     eax, [esp+9Ch+arg_4]
.text:0040B2F3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040B2F7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040B2FB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040B2FF                 call    GetDiskFreeSpaceA
.text:0040B304                 sub     esp, 14h
.text:0040B307                 jmp     loc_40B285
.text:0040B307 sub_40B070      endp ; sp-analysis failed
.text:0040B307
.text:0040B307 ; ---------------------------------------------------------------------------
.text:0040B30C                 align 10h
.text:0040B310
.text:0040B310 ; =============== S U B R O U T I N E =======================================
.text:0040B310
.text:0040B310
.text:0040B310 sub_40B310      proc near               ; CODE XREF: sub_409190+1BF↑p
.text:0040B310                                         ; sub_409190+263↑p ...
.text:0040B310
.text:0040B310 FileHandle      = dword ptr -2Ch
.text:0040B310 Offset          = qword ptr -28h
.text:0040B310 Origin          = dword ptr -20h
.text:0040B310 var_10          = dword ptr -10h
.text:0040B310 var_C           = dword ptr -0Ch
.text:0040B310 var_8           = dword ptr -8
.text:0040B310 var_4           = dword ptr -4
.text:0040B310 arg_0           = dword ptr  4
.text:0040B310 arg_4           = qword ptr  8
.text:0040B310
.text:0040B310                 sub     esp, 2Ch
.text:0040B313                 mov     [esp+2Ch+var_4], ebp
.text:0040B317                 mov     ebp, [esp+2Ch+arg_0]
.text:0040B31B                 mov     [esp+2Ch+var_10], ebx
.text:0040B31F                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:0040B323                 mov     [esp+2Ch+var_C], esi
.text:0040B327                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0040B32B                 mov     [esp+2Ch+var_8], edi
.text:0040B32F                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040B332                 call    _get_osfhandle
.text:0040B337                 cmp     eax, 0FFFFFFFFh
.text:0040B33A                 mov     edi, eax
.text:0040B33C                 jz      short loc_40B3A6
.text:0040B33E                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040B341                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:0040B349                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:0040B34D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:0040B351                 call    _lseeki64
.text:0040B356                 mov     ebp, edx
.text:0040B358                 xor     eax, ebx
.text:0040B35A                 xor     ebp, esi
.text:0040B35C                 or      ebp, eax
.text:0040B35E                 jnz     short loc_40B399
.text:0040B360                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:0040B363                 call    SetEndOfFile
.text:0040B368                 sub     esp, 4
.text:0040B36B                 xor     edx, edx
.text:0040B36D                 test    eax, eax
.text:0040B36F                 jz      short loc_40B387
.text:0040B371
.text:0040B371 loc_40B371:                             ; CODE XREF: sub_40B310+87↓j
.text:0040B371                 mov     ebx, [esp+2Ch+var_10]
.text:0040B375                 mov     eax, edx
.text:0040B377                 mov     esi, [esp+2Ch+var_C]
.text:0040B37B                 mov     edi, [esp+2Ch+var_8]
.text:0040B37F                 mov     ebp, [esp+2Ch+var_4]
.text:0040B383                 add     esp, 2Ch
.text:0040B386                 retn
.text:0040B387 ; ---------------------------------------------------------------------------
.text:0040B387
.text:0040B387 loc_40B387:                             ; CODE XREF: sub_40B310+5F↑j
.text:0040B387                 call    _errno
.text:0040B38C                 mov     dword ptr [eax], offset sub_407190
.text:0040B392
.text:0040B392 loc_40B392:                             ; CODE XREF: sub_40B310+94↓j
.text:0040B392                                         ; sub_40B310+A1↓j
.text:0040B392                 mov     edx, 0FFFFFFFFh
.text:0040B397                 jmp     short loc_40B371
.text:0040B399 ; ---------------------------------------------------------------------------
.text:0040B399
.text:0040B399 loc_40B399:                             ; CODE XREF: sub_40B310+4E↑j
.text:0040B399                 call    _errno
.text:0040B39E                 mov     dword ptr [eax], 16h
.text:0040B3A4                 jmp     short loc_40B392
.text:0040B3A6 ; ---------------------------------------------------------------------------
.text:0040B3A6
.text:0040B3A6 loc_40B3A6:                             ; CODE XREF: sub_40B310+2C↑j
.text:0040B3A6                 call    _errno
.text:0040B3AB                 mov     dword ptr [eax], 9
.text:0040B3B1                 jmp     short loc_40B392
.text:0040B3B1 sub_40B310      endp
.text:0040B3B1
.text:0040B3B1 ; ---------------------------------------------------------------------------
.text:0040B3B3                 align 10h
.text:0040B3C0
.text:0040B3C0 ; =============== S U B R O U T I N E =======================================
.text:0040B3C0
.text:0040B3C0
.text:0040B3C0 sub_40B3C0      proc near               ; CODE XREF: sub_40B4E0+152↓p
.text:0040B3C0                                         ; .text:0040B6AB↓p
.text:0040B3C0
.text:0040B3C0 FileHandle      = dword ptr -2Ch
.text:0040B3C0 Offset          = qword ptr -28h
.text:0040B3C0 Origin          = dword ptr -20h
.text:0040B3C0 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:0040B3C0 hFile           = dword ptr -14h
.text:0040B3C0 arg_0           = dword ptr  4
.text:0040B3C0 arg_4           = dword ptr  8
.text:0040B3C0 arg_8           = dword ptr  0Ch
.text:0040B3C0
.text:0040B3C0                 push    ebp
.text:0040B3C1                 push    edi
.text:0040B3C2                 push    esi
.text:0040B3C3                 push    ebx
.text:0040B3C4                 sub     esp, 1Ch
.text:0040B3C7                 mov     ebp, [esp+2Ch+arg_8]
.text:0040B3CB                 mov     edi, [esp+2Ch+arg_0]
.text:0040B3CF                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040B3D2                 call    _get_osfhandle
.text:0040B3D7                 movsx   edx, word ptr [ebp+2]
.text:0040B3DB                 mov     [esp+2Ch+hFile], eax
.text:0040B3DF                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:0040B3E7                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040B3EF                 mov     [esp+2Ch+Origin], edx ; Origin
.text:0040B3F3                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040B3F6                 call    _lseeki64
.text:0040B3FB                 mov     ebx, eax
.text:0040B3FD                 mov     esi, edx
.text:0040B3FF                 mov     edx, [ebp+14h]
.text:0040B402                 add     ebx, [ebp+8]
.text:0040B405                 mov     eax, [ebp+10h]
.text:0040B408                 mov     ecx, edx
.text:0040B40A                 adc     esi, [ebp+0Ch]
.text:0040B40D                 or      ecx, eax
.text:0040B40F                 jz      loc_40B4D0
.text:0040B415                 add     eax, ebx
.text:0040B417                 adc     edx, esi
.text:0040B419
.text:0040B419 loc_40B419:                             ; CODE XREF: sub_40B3C0+118↓j
.text:0040B419                 cmp     [esp+2Ch+arg_4], 7
.text:0040B41E                 jz      loc_40B4BE
.text:0040B424                 cmp     [esp+2Ch+arg_4], 7
.text:0040B429                 jl      short loc_40B445
.text:0040B42B                 cmp     [esp+2Ch+arg_4], 9
.text:0040B430                 jg      short loc_40B445
.text:0040B432                 movsx   ecx, word ptr [ebp+0]
.text:0040B436                 cmp     ecx, 1
.text:0040B439                 jl      short loc_40B445
.text:0040B43B                 cmp     ecx, 2
.text:0040B43E                 jle     short loc_40B4A0
.text:0040B440                 cmp     ecx, 3
.text:0040B443                 jz      short loc_40B45D
.text:0040B445
.text:0040B445 loc_40B445:                             ; CODE XREF: sub_40B3C0+69↑j
.text:0040B445                                         ; sub_40B3C0+70↑j ...
.text:0040B445                 call    _errno
.text:0040B44A                 mov     dword ptr [eax], 16h
.text:0040B450
.text:0040B450 loc_40B450:                             ; CODE XREF: sub_40B3C0+D9↓j
.text:0040B450                                         ; sub_40B3C0+109↓j
.text:0040B450                 mov     eax, 0FFFFFFFFh
.text:0040B455
.text:0040B455 loc_40B455:                             ; CODE XREF: sub_40B3C0+C9↓j
.text:0040B455                 add     esp, 1Ch
.text:0040B458                 pop     ebx
.text:0040B459                 pop     esi
.text:0040B45A                 pop     edi
.text:0040B45B                 pop     ebp
.text:0040B45C                 retn
.text:0040B45D ; ---------------------------------------------------------------------------
.text:0040B45D
.text:0040B45D loc_40B45D:                             ; CODE XREF: sub_40B3C0+83↑j
.text:0040B45D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:0040B461                 mov     eax, [esp+2Ch+hFile]
.text:0040B465                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040B469                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040B46D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040B471                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:0040B474                 call    UnlockFile
.text:0040B479                 lea     esi, [esi+0]
.text:0040B480
.text:0040B480 loc_40B480:                             ; CODE XREF: sub_40B3C0+FC↓j
.text:0040B480                 mov     ecx, eax
.text:0040B482                 sub     esp, 14h
.text:0040B485                 xor     eax, eax
.text:0040B487                 test    ecx, ecx
.text:0040B489                 jnz     short loc_40B455
.text:0040B48B                 call    sub_407190
.text:0040B490                 mov     esi, eax
.text:0040B492                 call    _errno
.text:0040B497                 mov     [eax], esi
.text:0040B499                 jmp     short loc_40B450
.text:0040B499 ; ---------------------------------------------------------------------------
.text:0040B49B                 align 10h
.text:0040B4A0
.text:0040B4A0 loc_40B4A0:                             ; CODE XREF: sub_40B3C0+7E↑j
.text:0040B4A0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:0040B4A4                 mov     edx, [esp+2Ch+hFile]
.text:0040B4A8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040B4AC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040B4B0                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:0040B4B3                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:0040B4B7                 call    LockFile
.text:0040B4BC                 jmp     short loc_40B480
.text:0040B4BE ; ---------------------------------------------------------------------------
.text:0040B4BE
.text:0040B4BE loc_40B4BE:                             ; CODE XREF: sub_40B3C0+5E↑j
.text:0040B4BE                 call    _errno
.text:0040B4C3                 mov     dword ptr [eax], 28h ; '('
.text:0040B4C9                 jmp     short loc_40B450
.text:0040B4C9 ; ---------------------------------------------------------------------------
.text:0040B4CB                 align 10h
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: sub_40B3C0+4F↑j
.text:0040B4D0                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040B4D3                 call    _filelengthi64
.text:0040B4D8                 jmp     loc_40B419
.text:0040B4D8 sub_40B3C0      endp
.text:0040B4D8
.text:0040B4D8 ; ---------------------------------------------------------------------------
.text:0040B4DD                 align 10h
.text:0040B4E0
.text:0040B4E0 ; =============== S U B R O U T I N E =======================================
.text:0040B4E0
.text:0040B4E0
.text:0040B4E0 sub_40B4E0      proc near               ; CODE XREF: sub_408D50+97↑p
.text:0040B4E0                                         ; sub_408D50+B8↑p ...
.text:0040B4E0
.text:0040B4E0 FileHandle      = dword ptr -1Ch
.text:0040B4E0 var_18          = dword ptr -18h
.text:0040B4E0 var_14          = dword ptr -14h
.text:0040B4E0 var_4           = dword ptr -4
.text:0040B4E0 arg_0           = dword ptr  4
.text:0040B4E0 arg_4           = dword ptr  8
.text:0040B4E0 arg_8           = byte ptr  0Ch
.text:0040B4E0
.text:0040B4E0                 sub     esp, 1Ch
.text:0040B4E3                 mov     ecx, [esp+1Ch+arg_0]
.text:0040B4E7                 mov     [esp+1Ch+var_4], ebx
.text:0040B4EB                 mov     edx, [esp+1Ch+arg_4]
.text:0040B4EF                 test    ecx, ecx
.text:0040B4F1                 js      loc_40B649
.text:0040B4F7                 cmp     edx, 9          ; switch 10 cases
.text:0040B4FA                 lea     eax, [esp+1Ch+arg_8]
.text:0040B4FE                 ja      def_40B504      ; jumptable 0040B504 default case
.text:0040B504                 jmp     ds:jpt_40B504[edx*4] ; switch jump
.text:0040B504 ; ---------------------------------------------------------------------------
.text:0040B50B                 align 4
.text:0040B50C jpt_40B504      dd offset loc_40B534    ; DATA XREF: sub_40B4E0+24↑r
.text:0040B50C                 dd offset loc_40B548    ; jump table for switch statement
.text:0040B50C                 dd offset loc_40B568
.text:0040B50C                 dd offset loc_40B590
.text:0040B50C                 dd offset loc_40B5D8
.text:0040B50C                 dd offset loc_40B610
.text:0040B50C                 dd offset loc_40B610
.text:0040B50C                 dd offset loc_40B610
.text:0040B50C                 dd offset loc_40B625
.text:0040B50C                 dd offset loc_40B625
.text:0040B534 ; ---------------------------------------------------------------------------
.text:0040B534
.text:0040B534 loc_40B534:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B534                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B534                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 0040B504 case 0
.text:0040B537                 call    _dup
.text:0040B53C                 lea     esi, [esi+0]
.text:0040B540
.text:0040B540 loc_40B540:                             ; CODE XREF: sub_40B4E0+86↓j
.text:0040B540                                         ; sub_40B4E0+AC↓j ...
.text:0040B540                 mov     ebx, [esp+1Ch+var_4]
.text:0040B544                 add     esp, 1Ch
.text:0040B547                 retn
.text:0040B548 ; ---------------------------------------------------------------------------
.text:0040B548
.text:0040B548 loc_40B548:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B548                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B548                 mov     eax, ds:__pioinfo ; jumptable 0040B504 case 1
.text:0040B54D                 mov     edx, ecx
.text:0040B54F                 sar     edx, 5
.text:0040B552                 and     ecx, 1Fh
.text:0040B555                 mov     ebx, [eax+edx*4]
.text:0040B558                 lea     eax, [ecx+ecx*8]
.text:0040B55B                 test    byte ptr [ebx+eax*4+4], 10h
.text:0040B560                 setnz   dl
.text:0040B563                 movzx   eax, dl
.text:0040B566                 jmp     short loc_40B540
.text:0040B568 ; ---------------------------------------------------------------------------
.text:0040B568
.text:0040B568 loc_40B568:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B568                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B568                 test    bl, 1           ; jumptable 0040B504 case 2
.text:0040B56B                 jz      short loc_40B573
.text:0040B56D                 and     ebx, 0FFFFFFFEh
.text:0040B570                 or      ebx, 10h
.text:0040B573
.text:0040B573 loc_40B573:                             ; CODE XREF: sub_40B4E0+8B↑j
.text:0040B573                 mov     eax, ds:__pioinfo
.text:0040B578                 mov     edx, ecx
.text:0040B57A                 sar     edx, 5
.text:0040B57D                 and     ecx, 1Fh
.text:0040B580                 mov     edx, [eax+edx*4]
.text:0040B583                 lea     eax, [ecx+ecx*8]
.text:0040B586                 mov     [edx+eax*4+4], bl
.text:0040B58A
.text:0040B58A loc_40B58A:                             ; CODE XREF: sub_40B4E0+121↓j
.text:0040B58A                 xor     eax, eax
.text:0040B58C                 jmp     short loc_40B540
.text:0040B58C ; ---------------------------------------------------------------------------
.text:0040B58E                 align 10h
.text:0040B590
.text:0040B590 loc_40B590:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B590                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B590                 mov     eax, ds:__pioinfo ; jumptable 0040B504 case 3
.text:0040B595                 mov     ebx, ecx
.text:0040B597                 sar     ebx, 5
.text:0040B59A                 and     ecx, 1Fh
.text:0040B59D                 mov     edx, [eax+ebx*4]
.text:0040B5A0                 lea     ebx, [ecx+ecx*8]
.text:0040B5A3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:0040B5A8                 xor     edx, edx
.text:0040B5AA                 test    al, 1
.text:0040B5AC                 jz      short loc_40B5B7
.text:0040B5AE                 mov     edx, 2
.text:0040B5B3
.text:0040B5B3 loc_40B5B3:                             ; CODE XREF: sub_40B4E0+E0↓j
.text:0040B5B3                                         ; sub_40B4E0+EB↓j ...
.text:0040B5B3                 mov     eax, edx
.text:0040B5B5                 jmp     short loc_40B540
.text:0040B5B7 ; ---------------------------------------------------------------------------
.text:0040B5B7
.text:0040B5B7 loc_40B5B7:                             ; CODE XREF: sub_40B4E0+CC↑j
.text:0040B5B7                 test    al, 20h
.text:0040B5B9                 jz      short loc_40B5C2
.text:0040B5BB                 mov     edx, 8
.text:0040B5C0                 jmp     short loc_40B5B3
.text:0040B5C2 ; ---------------------------------------------------------------------------
.text:0040B5C2
.text:0040B5C2 loc_40B5C2:                             ; CODE XREF: sub_40B4E0+D9↑j
.text:0040B5C2                 test    al, 10h
.text:0040B5C4                 jz      short loc_40B5CD
.text:0040B5C6                 mov     edx, 80h ; '€'
.text:0040B5CB                 jmp     short loc_40B5B3
.text:0040B5CD ; ---------------------------------------------------------------------------
.text:0040B5CD
.text:0040B5CD loc_40B5CD:                             ; CODE XREF: sub_40B4E0+E4↑j
.text:0040B5CD                 test    al, al
.text:0040B5CF                 jns     short loc_40B5B3
.text:0040B5D1                 mov     edx, 4000h
.text:0040B5D6                 jmp     short loc_40B5B3
.text:0040B5D8 ; ---------------------------------------------------------------------------
.text:0040B5D8
.text:0040B5D8 loc_40B5D8:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B5D8                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B5D8                 mov     edx, ds:__pioinfo ; jumptable 0040B504 case 4
.text:0040B5DE                 mov     ebx, [eax]
.text:0040B5E0                 mov     eax, ecx
.text:0040B5E2                 sar     eax, 5
.text:0040B5E5                 and     ecx, 1Fh
.text:0040B5E8                 mov     edx, [edx+eax*4]
.text:0040B5EB                 lea     eax, [ecx+ecx*8]
.text:0040B5EE                 shl     eax, 2
.text:0040B5F1                 xor     ecx, ecx
.text:0040B5F3                 test    bl, 8
.text:0040B5F6                 jz      short loc_40B603
.text:0040B5F8                 mov     ecx, 20h ; ' '
.text:0040B5FD
.text:0040B5FD loc_40B5FD:                             ; CODE XREF: sub_40B4E0+126↓j
.text:0040B5FD                                         ; sub_40B4E0+12D↓j
.text:0040B5FD                 mov     [edx+eax+4], cl
.text:0040B601                 jmp     short loc_40B58A
.text:0040B603 ; ---------------------------------------------------------------------------
.text:0040B603
.text:0040B603 loc_40B603:                             ; CODE XREF: sub_40B4E0+116↑j
.text:0040B603                 test    bh, 40h
.text:0040B606                 jz      short loc_40B5FD
.text:0040B608                 mov     ecx, 80h ; '€'
.text:0040B60D                 jmp     short loc_40B5FD
.text:0040B60D ; ---------------------------------------------------------------------------
.text:0040B60F                 align 10h
.text:0040B610
.text:0040B610 loc_40B610:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B610                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B610                 call    _errno          ; jumptable 0040B504 cases 5-7
.text:0040B615                 mov     dword ptr [eax], 28h ; '('
.text:0040B61B
.text:0040B61B loc_40B61B:                             ; CODE XREF: sub_40B4E0+167↓j
.text:0040B61B                                         ; sub_40B4E0+174↓j
.text:0040B61B                 mov     eax, 0FFFFFFFFh
.text:0040B620                 jmp     loc_40B540
.text:0040B625 ; ---------------------------------------------------------------------------
.text:0040B625
.text:0040B625 loc_40B625:                             ; CODE XREF: sub_40B4E0+24↑j
.text:0040B625                                         ; DATA XREF: sub_40B4E0:jpt_40B504↑o
.text:0040B625                 mov     ebx, [eax]      ; jumptable 0040B504 cases 8,9
.text:0040B627                 mov     [esp+1Ch+var_18], edx
.text:0040B62B                 mov     [esp+1Ch+FileHandle], ecx
.text:0040B62E                 mov     [esp+1Ch+var_14], ebx
.text:0040B632                 call    sub_40B3C0
.text:0040B637                 jmp     loc_40B540
.text:0040B63C ; ---------------------------------------------------------------------------
.text:0040B63C
.text:0040B63C def_40B504:                             ; CODE XREF: sub_40B4E0+1E↑j
.text:0040B63C                 call    _errno          ; jumptable 0040B504 default case
.text:0040B641                 mov     dword ptr [eax], 16h
.text:0040B647                 jmp     short loc_40B61B
.text:0040B649 ; ---------------------------------------------------------------------------
.text:0040B649
.text:0040B649 loc_40B649:                             ; CODE XREF: sub_40B4E0+11↑j
.text:0040B649                 call    _errno
.text:0040B64E                 mov     dword ptr [eax], 9
.text:0040B654                 jmp     short loc_40B61B
.text:0040B654 sub_40B4E0      endp
.text:0040B654
.text:0040B654 ; ---------------------------------------------------------------------------
.text:0040B656                 align 10h
.text:0040B660                 sub     esp, 3Ch
.text:0040B663                 mov     edx, [esp+48h]
.text:0040B667                 mov     eax, [edx+4]
.text:0040B66A                 movzx   ecx, word ptr [edx]
.text:0040B66D                 mov     [esp+18h], eax
.text:0040B671                 mov     [esp+10h], cx
.text:0040B676                 movzx   ecx, word ptr [edx+2]
.text:0040B67A                 mov     [esp+12h], cx
.text:0040B67F                 mov     ecx, eax
.text:0040B681                 mov     eax, [edx+8]
.text:0040B684                 sar     ecx, 1Fh
.text:0040B687                 mov     [esp+1Ch], ecx
.text:0040B68B                 cdq
.text:0040B68C                 lea     ecx, [esp+10h]
.text:0040B690                 mov     [esp+24h], edx
.text:0040B694                 mov     edx, [esp+44h]
.text:0040B698                 mov     [esp+20h], eax
.text:0040B69C                 mov     [esp+8], ecx
.text:0040B6A0                 mov     [esp+4], edx
.text:0040B6A4                 mov     edx, [esp+40h]
.text:0040B6A8                 mov     [esp], edx
.text:0040B6AB                 call    sub_40B3C0
.text:0040B6B0                 add     esp, 3Ch
.text:0040B6B3                 retn
.text:0040B6B3 ; ---------------------------------------------------------------------------
.text:0040B6B4                 align 10h
.text:0040B6C0                 mov     edx, [esp+4]
.text:0040B6C4                 xor     eax, eax
.text:0040B6C6                 test    dl, 1
.text:0040B6C9                 jz      short loc_40B6D1
.text:0040B6CB                 mov     eax, 2
.text:0040B6D0                 retn
.text:0040B6D1 ; ---------------------------------------------------------------------------
.text:0040B6D1
.text:0040B6D1 loc_40B6D1:                             ; CODE XREF: .text:0040B6C9↑j
.text:0040B6D1                 test    dl, 20h
.text:0040B6D4                 jz      short loc_40B6E0
.text:0040B6D6                 mov     eax, 8
.text:0040B6DB                 retn
.text:0040B6DB ; ---------------------------------------------------------------------------
.text:0040B6DC                 align 10h
.text:0040B6E0
.text:0040B6E0 loc_40B6E0:                             ; CODE XREF: .text:0040B6D4↑j
.text:0040B6E0                 test    dl, 10h
.text:0040B6E3                 jz      short loc_40B6F0
.text:0040B6E5                 mov     eax, 80h ; '€'
.text:0040B6EA                 retn
.text:0040B6EA ; ---------------------------------------------------------------------------
.text:0040B6EB                 align 10h
.text:0040B6F0
.text:0040B6F0 loc_40B6F0:                             ; CODE XREF: .text:0040B6E3↑j
.text:0040B6F0                 test    dl, dl
.text:0040B6F2                 jns     short locret_40B6F9
.text:0040B6F4                 mov     eax, 4000h
.text:0040B6F9
.text:0040B6F9 locret_40B6F9:                          ; CODE XREF: .text:0040B6F2↑j
.text:0040B6F9                 retn
.text:0040B6F9 ; ---------------------------------------------------------------------------
.text:0040B6FA                 align 10h
.text:0040B700                 mov     edx, [esp+4]
.text:0040B704                 xor     eax, eax
.text:0040B706                 test    dl, 8
.text:0040B709                 jz      short loc_40B711
.text:0040B70B                 mov     eax, 20h ; ' '
.text:0040B710                 retn
.text:0040B711 ; ---------------------------------------------------------------------------
.text:0040B711
.text:0040B711 loc_40B711:                             ; CODE XREF: .text:0040B709↑j
.text:0040B711                 test    dh, 40h
.text:0040B714                 jz      short locret_40B71B
.text:0040B716                 mov     eax, 80h ; '€'
.text:0040B71B
.text:0040B71B locret_40B71B:                          ; CODE XREF: .text:0040B714↑j
.text:0040B71B                 retn
.text:0040B71B ; ---------------------------------------------------------------------------
.text:0040B71C                 align 10h
.text:0040B720 aNotset         db 'notset',0           ; DATA XREF: .data:off_4100F0↓o
.text:0040B720                                         ; .data:off_4100F4↓o
.text:0040B727 ; ---------------------------------------------------------------------------
.text:0040B727
.text:0040B727 loc_40B727:                             ; DATA XREF: .text:loc_40B7C5↓o
.text:0040B727                 jb      short loc_40B7A0
.text:0040B729                 add     [eax], ah
.text:0040B72B                 or      [eax], eax
.text:0040B72D
.text:0040B72D loc_40B72D:                             ; DATA XREF: .text:0040B818↓o
.text:0040B72D                                         ; .text:0040B87E↓o ...
.text:0040B72D                 add     [eax], ah
.text:0040B72F                 and     eax, 64252064h
.text:0040B734                 and     [eax], al
.text:0040B736                 lea     esi, [esi+0]
.text:0040B739                 lea     edi, [edi+0]
.text:0040B740                 push    ebp
.text:0040B741                 push    edi
.text:0040B742                 push    esi
.text:0040B743                 push    ebx
.text:0040B744                 sub     esp, 14Ch
.text:0040B74A                 mov     edx, off_4100F0 ; "notset"
.text:0040B750                 mov     edi, [esp+164h]
.text:0040B757                 mov     ebp, [esp+168h]
.text:0040B75E                 mov     [esp+4], edx
.text:0040B762                 mov     edx, off_4100F4 ; "notset"
.text:0040B768                 mov     [esp], edx
.text:0040B76B                 call    strcmp
.text:0040B770                 test    eax, eax
.text:0040B772                 jz      loc_40BB60
.text:0040B778
.text:0040B778 loc_40B778:                             ; CODE XREF: .text:0040BBAC↓j
.text:0040B778                 lea     ebx, [esp+20h]
.text:0040B77C                 lea     esi, [esi+0]
.text:0040B780
.text:0040B780 loc_40B780:                             ; CODE XREF: .text:0040B7B6↓j
.text:0040B780                 mov     [esp+4], ebx
.text:0040B784                 mov     ecx, off_4100F4 ; "notset"
.text:0040B78A                 mov     [esp], ecx
.text:0040B78D                 call    loc_40B110
.text:0040B792                 test    eax, eax
.text:0040B794                 jns     short loc_40B7C5
.text:0040B796                 mov     eax, off_4100F4 ; "notset"
.text:0040B79B                 cmp     byte ptr [eax], 0
.text:0040B79E                 jz      short loc_40B7B8
.text:0040B7A0
.text:0040B7A0 loc_40B7A0:                             ; CODE XREF: .text:loc_40B727↑j
.text:0040B7A0                 mov     dword ptr [esp+4], 0
.text:0040B7A8                 mov     [esp], eax
.text:0040B7AB                 call    strchr
.text:0040B7B0                 inc     eax
.text:0040B7B1                 mov     off_4100F4, eax ; "notset"
.text:0040B7B6                 jmp     short loc_40B780
.text:0040B7B8 ; ---------------------------------------------------------------------------
.text:0040B7B8
.text:0040B7B8 loc_40B7B8:                             ; CODE XREF: .text:0040B79E↑j
.text:0040B7B8                 xor     eax, eax
.text:0040B7BA
.text:0040B7BA loc_40B7BA:                             ; CODE XREF: .text:0040B97C↓j
.text:0040B7BA                 add     esp, 14Ch
.text:0040B7C0                 pop     ebx
.text:0040B7C1                 pop     esi
.text:0040B7C2                 pop     edi
.text:0040B7C3                 pop     ebp
.text:0040B7C4                 retn
.text:0040B7C5 ; ---------------------------------------------------------------------------
.text:0040B7C5
.text:0040B7C5 loc_40B7C5:                             ; CODE XREF: .text:0040B794↑j
.text:0040B7C5                 mov     dword ptr [edi+0Ch], offset loc_40B727
.text:0040B7CC                 lea     ecx, [esp+0D6h]
.text:0040B7D3                 lea     edx, [esp+6Ch]
.text:0040B7D7                 mov     [edi+4], ecx
.text:0040B7DA                 lea     ebx, [esp+7Ch]
.text:0040B7DE                 mov     [edi+8], edx
.text:0040B7E1                 mov     [edi], ebx
.text:0040B7E3                 mov     [esp], ebp
.text:0040B7E6                 mov     [esp+4], edi
.text:0040B7EA                 call    ___addmntentstr
.text:0040B7EF                 mov     [esp], ebp
.text:0040B7F2                 mov     dword ptr [esp+4], 40B72Ah
.text:0040B7FA                 call    strspn
.text:0040B7FF                 mov     dword ptr [esp+4], 0
.text:0040B807                 mov     ebx, off_4100F4 ; "notset"
.text:0040B80D                 lea     esi, [eax+ebp]
.text:0040B810                 mov     [esp+1Ch], esi
.text:0040B814                 lea     ebp, [esp+1Ch]
.text:0040B818                 mov     esi, offset loc_40B72D
.text:0040B81D                 mov     [esp], ebx
.text:0040B820                 call    strchr
.text:0040B825                 mov     dword ptr [esp+4], 40B72Ah
.text:0040B82D                 inc     eax
.text:0040B82E                 mov     off_4100F4, eax ; "notset"
.text:0040B833                 mov     [esp], ebp
.text:0040B836                 call    sub_40C580
.text:0040B83B                 test    eax, eax
.text:0040B83D                 mov     ebx, eax
.text:0040B83F                 jz      short loc_40B868
.text:0040B841                 mov     edx, eax
.text:0040B843                 mov     ecx, eax
.text:0040B845                 lea     esi, [esi+0]
.text:0040B849                 lea     edi, [edi+0]
.text:0040B850
.text:0040B850 loc_40B850:                             ; CODE XREF: .text:0040B866↓j
.text:0040B850                 movzx   eax, byte ptr [edx]
.text:0040B853                 cmp     al, 5Ch ; '\'
.text:0040B855                 jz      loc_40BB04
.text:0040B85B
.text:0040B85B loc_40B85B:                             ; CODE XREF: .text:0040BB0C↓j
.text:0040B85B                                         ; .text:0040BB1A↓j ...
.text:0040B85B                 mov     [ecx], al
.text:0040B85D
.text:0040B85D loc_40B85D:                             ; CODE XREF: .text:0040BB2E↓j
.text:0040B85D                 inc     ecx
.text:0040B85E
.text:0040B85E loc_40B85E:                             ; CODE XREF: .text:0040BB46↓j
.text:0040B85E                 movzx   eax, byte ptr [edx]
.text:0040B861                 mov     esi, ebx
.text:0040B863                 inc     edx
.text:0040B864                 test    al, al
.text:0040B866                 jnz     short loc_40B850
.text:0040B868
.text:0040B868 loc_40B868:                             ; CODE XREF: .text:0040B83F↑j
.text:0040B868                 mov     [edi], esi
.text:0040B86A                 mov     eax, [esp+1Ch]
.text:0040B86E                 test    eax, eax
.text:0040B870                 jnz     loc_40BAEB
.text:0040B876
.text:0040B876 loc_40B876:                             ; CODE XREF: .text:0040BAFF↓j
.text:0040B876                 mov     dword ptr [esp+4], 40B72Ah
.text:0040B87E                 mov     esi, offset loc_40B72D
.text:0040B883                 mov     [esp], ebp
.text:0040B886                 call    sub_40C580
.text:0040B88B                 test    eax, eax
.text:0040B88D                 mov     ebx, eax
.text:0040B88F                 jz      short loc_40B8B8
.text:0040B891                 mov     edx, eax
.text:0040B893                 mov     ecx, eax
.text:0040B895                 lea     esi, [esi+0]
.text:0040B899                 lea     edi, [edi+0]
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: .text:0040B8B6↓j
.text:0040B8A0                 movzx   eax, byte ptr [edx]
.text:0040B8A3                 cmp     al, 5Ch ; '\'
.text:0040B8A5                 jz      loc_40BA93
.text:0040B8AB
.text:0040B8AB loc_40B8AB:                             ; CODE XREF: .text:0040BA9B↓j
.text:0040B8AB                                         ; .text:0040BAA9↓j ...
.text:0040B8AB                 mov     [ecx], al
.text:0040B8AD
.text:0040B8AD loc_40B8AD:                             ; CODE XREF: .text:0040BABD↓j
.text:0040B8AD                 inc     ecx
.text:0040B8AE
.text:0040B8AE loc_40B8AE:                             ; CODE XREF: .text:0040BAD5↓j
.text:0040B8AE                 movzx   eax, byte ptr [edx]
.text:0040B8B1                 mov     esi, ebx
.text:0040B8B3                 inc     edx
.text:0040B8B4                 test    al, al
.text:0040B8B6                 jnz     short loc_40B8A0
.text:0040B8B8
.text:0040B8B8 loc_40B8B8:                             ; CODE XREF: .text:0040B88F↑j
.text:0040B8B8                 mov     [edi+4], esi
.text:0040B8BB                 mov     eax, [esp+1Ch]
.text:0040B8BF                 test    eax, eax
.text:0040B8C1                 jnz     loc_40BA7A
.text:0040B8C7
.text:0040B8C7 loc_40B8C7:                             ; CODE XREF: .text:0040BA8E↓j
.text:0040B8C7                 mov     dword ptr [esp+4], 40B72Ah
.text:0040B8CF                 mov     esi, offset loc_40B72D
.text:0040B8D4                 mov     [esp], ebp
.text:0040B8D7                 call    sub_40C580
.text:0040B8DC                 test    eax, eax
.text:0040B8DE                 mov     ebx, eax
.text:0040B8E0                 jz      short loc_40B908
.text:0040B8E2                 mov     edx, eax
.text:0040B8E4                 mov     ecx, eax
.text:0040B8E6                 lea     esi, [esi+0]
.text:0040B8E9                 lea     edi, [edi+0]
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: .text:0040B906↓j
.text:0040B8F0                 movzx   eax, byte ptr [edx]
.text:0040B8F3                 cmp     al, 5Ch ; '\'
.text:0040B8F5                 jz      loc_40BA22
.text:0040B8FB
.text:0040B8FB loc_40B8FB:                             ; CODE XREF: .text:0040BA2A↓j
.text:0040B8FB                                         ; .text:0040BA38↓j ...
.text:0040B8FB                 mov     [ecx], al
.text:0040B8FD
.text:0040B8FD loc_40B8FD:                             ; CODE XREF: .text:0040BA4C↓j
.text:0040B8FD                 inc     ecx
.text:0040B8FE
.text:0040B8FE loc_40B8FE:                             ; CODE XREF: .text:0040BA64↓j
.text:0040B8FE                 movzx   eax, byte ptr [edx]
.text:0040B901                 mov     esi, ebx
.text:0040B903                 inc     edx
.text:0040B904                 test    al, al
.text:0040B906                 jnz     short loc_40B8F0
.text:0040B908
.text:0040B908 loc_40B908:                             ; CODE XREF: .text:0040B8E0↑j
.text:0040B908                 mov     [edi+8], esi
.text:0040B90B                 mov     eax, [esp+1Ch]
.text:0040B90F                 test    eax, eax
.text:0040B911                 jnz     loc_40BA09
.text:0040B917
.text:0040B917 loc_40B917:                             ; CODE XREF: .text:0040BA1D↓j
.text:0040B917                 mov     dword ptr [esp+4], 40B72Ah
.text:0040B91F                 mov     esi, offset loc_40B72D
.text:0040B924                 mov     [esp], ebp
.text:0040B927                 call    sub_40C580
.text:0040B92C                 test    eax, eax
.text:0040B92E                 mov     ebx, eax
.text:0040B930                 jz      short loc_40B954
.text:0040B932                 mov     edx, eax
.text:0040B934                 mov     ecx, eax
.text:0040B936                 lea     esi, [esi+0]
.text:0040B939                 lea     edi, [edi+0]
.text:0040B940
.text:0040B940 loc_40B940:                             ; CODE XREF: .text:0040B952↓j
.text:0040B940                 movzx   eax, byte ptr [edx]
.text:0040B943                 cmp     al, 5Ch ; '\'
.text:0040B945                 jz      short loc_40B9B5
.text:0040B947
.text:0040B947 loc_40B947:                             ; CODE XREF: .text:0040B9BD↓j
.text:0040B947                                         ; .text:0040B9C7↓j ...
.text:0040B947                 mov     [ecx], al
.text:0040B949
.text:0040B949 loc_40B949:                             ; CODE XREF: .text:0040B9DB↓j
.text:0040B949                 inc     ecx
.text:0040B94A
.text:0040B94A loc_40B94A:                             ; CODE XREF: .text:0040B9F3↓j
.text:0040B94A                 movzx   eax, byte ptr [edx]
.text:0040B94D                 mov     esi, ebx
.text:0040B94F                 inc     edx
.text:0040B950                 test    al, al
.text:0040B952                 jnz     short loc_40B940
.text:0040B954
.text:0040B954 loc_40B954:                             ; CODE XREF: .text:0040B930↑j
.text:0040B954                 mov     [edi+0Ch], esi
.text:0040B957                 xor     eax, eax
.text:0040B959                 mov     edx, [esp+1Ch]
.text:0040B95D                 test    edx, edx
.text:0040B95F                 jnz     short loc_40B995
.text:0040B961
.text:0040B961 loc_40B961:                             ; CODE XREF: .text:0040B9B3↓j
.text:0040B961                 cmp     eax, 1
.text:0040B964                 jz      short loc_40B98C
.text:0040B966                 cmp     eax, 1
.text:0040B969                 jle     short loc_40B981
.text:0040B96B
.text:0040B96B loc_40B96B:                             ; CODE XREF: .text:0040B983↓j
.text:0040B96B                                         ; .text:0040B993↓j
.text:0040B96B                 mov     edx, [esp+160h]
.text:0040B972                 mov     [esp], edx
.text:0040B975                 call    sub_40C520
.text:0040B97A                 mov     eax, edi
.text:0040B97C                 jmp     loc_40B7BA
.text:0040B981 ; ---------------------------------------------------------------------------
.text:0040B981
.text:0040B981 loc_40B981:                             ; CODE XREF: .text:0040B969↑j
.text:0040B981                 test    eax, eax
.text:0040B983                 jnz     short loc_40B96B
.text:0040B985                 mov     dword ptr [edi+10h], 0
.text:0040B98C
.text:0040B98C loc_40B98C:                             ; CODE XREF: .text:0040B964↑j
.text:0040B98C                 mov     dword ptr [edi+14h], 0
.text:0040B993                 jmp     short loc_40B96B
.text:0040B995 ; ---------------------------------------------------------------------------
.text:0040B995
.text:0040B995 loc_40B995:                             ; CODE XREF: .text:0040B95F↑j
.text:0040B995                 mov     dword ptr [esp+4], 40B72Eh
.text:0040B99D                 lea     esi, [edi+14h]
.text:0040B9A0                 lea     ebp, [edi+10h]
.text:0040B9A3                 mov     [esp+0Ch], esi
.text:0040B9A7                 mov     [esp+8], ebp
.text:0040B9AB                 mov     [esp], edx
.text:0040B9AE                 call    sscanf
.text:0040B9B3                 jmp     short loc_40B961
.text:0040B9B5 ; ---------------------------------------------------------------------------
.text:0040B9B5
.text:0040B9B5 loc_40B9B5:                             ; CODE XREF: .text:0040B945↑j
.text:0040B9B5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B9B9                 jz      short loc_40B9F8
.text:0040B9BB
.text:0040B9BB loc_40B9BB:                             ; CODE XREF: .text:0040B9FC↓j
.text:0040B9BB                                         ; .text:0040BA02↓j
.text:0040B9BB                 cmp     al, 5Ch ; '\'
.text:0040B9BD                 jnz     short loc_40B947
.text:0040B9BF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B9C3                 jz      short loc_40B9E0
.text:0040B9C5
.text:0040B9C5 loc_40B9C5:                             ; CODE XREF: .text:0040B9E4↓j
.text:0040B9C5                                         ; .text:0040B9EA↓j
.text:0040B9C5                 cmp     al, 5Ch ; '\'
.text:0040B9C7                 jnz     loc_40B947
.text:0040B9CD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B9D1                 jnz     loc_40B947
.text:0040B9D7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B9DA                 inc     edx
.text:0040B9DB                 jmp     loc_40B949
.text:0040B9E0 ; ---------------------------------------------------------------------------
.text:0040B9E0
.text:0040B9E0 loc_40B9E0:                             ; CODE XREF: .text:0040B9C3↑j
.text:0040B9E0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B9E4                 jnz     short loc_40B9C5
.text:0040B9E6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B9EA                 jnz     short loc_40B9C5
.text:0040B9EC                 mov     byte ptr [ecx], 9
.text:0040B9EF
.text:0040B9EF loc_40B9EF:                             ; CODE XREF: .text:0040BA07↓j
.text:0040B9EF                 inc     ecx
.text:0040B9F0                 add     edx, 3
.text:0040B9F3                 jmp     loc_40B94A
.text:0040B9F8 ; ---------------------------------------------------------------------------
.text:0040B9F8
.text:0040B9F8 loc_40B9F8:                             ; CODE XREF: .text:0040B9B9↑j
.text:0040B9F8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B9FC                 jnz     short loc_40B9BB
.text:0040B9FE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BA02                 jnz     short loc_40B9BB
.text:0040BA04                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BA07                 jmp     short loc_40B9EF
.text:0040BA09 ; ---------------------------------------------------------------------------
.text:0040BA09
.text:0040BA09 loc_40BA09:                             ; CODE XREF: .text:0040B911↑j
.text:0040BA09                 mov     dword ptr [esp+4], 40B72Ah
.text:0040BA11                 mov     [esp], eax
.text:0040BA14                 call    strspn
.text:0040BA19                 add     [esp+1Ch], eax
.text:0040BA1D                 jmp     loc_40B917
.text:0040BA22 ; ---------------------------------------------------------------------------
.text:0040BA22
.text:0040BA22 loc_40BA22:                             ; CODE XREF: .text:0040B8F5↑j
.text:0040BA22                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BA26                 jz      short loc_40BA69
.text:0040BA28
.text:0040BA28 loc_40BA28:                             ; CODE XREF: .text:0040BA6D↓j
.text:0040BA28                                         ; .text:0040BA73↓j
.text:0040BA28                 cmp     al, 5Ch ; '\'
.text:0040BA2A                 jnz     loc_40B8FB
.text:0040BA30                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BA34                 jz      short loc_40BA51
.text:0040BA36
.text:0040BA36 loc_40BA36:                             ; CODE XREF: .text:0040BA55↓j
.text:0040BA36                                         ; .text:0040BA5B↓j
.text:0040BA36                 cmp     al, 5Ch ; '\'
.text:0040BA38                 jnz     loc_40B8FB
.text:0040BA3E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BA42                 jnz     loc_40B8FB
.text:0040BA48                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BA4B                 inc     edx
.text:0040BA4C                 jmp     loc_40B8FD
.text:0040BA51 ; ---------------------------------------------------------------------------
.text:0040BA51
.text:0040BA51 loc_40BA51:                             ; CODE XREF: .text:0040BA34↑j
.text:0040BA51                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BA55                 jnz     short loc_40BA36
.text:0040BA57                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BA5B                 jnz     short loc_40BA36
.text:0040BA5D                 mov     byte ptr [ecx], 9
.text:0040BA60
.text:0040BA60 loc_40BA60:                             ; CODE XREF: .text:0040BA78↓j
.text:0040BA60                 inc     ecx
.text:0040BA61                 add     edx, 3
.text:0040BA64                 jmp     loc_40B8FE
.text:0040BA69 ; ---------------------------------------------------------------------------
.text:0040BA69
.text:0040BA69 loc_40BA69:                             ; CODE XREF: .text:0040BA26↑j
.text:0040BA69                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BA6D                 jnz     short loc_40BA28
.text:0040BA6F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BA73                 jnz     short loc_40BA28
.text:0040BA75                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BA78                 jmp     short loc_40BA60
.text:0040BA7A ; ---------------------------------------------------------------------------
.text:0040BA7A
.text:0040BA7A loc_40BA7A:                             ; CODE XREF: .text:0040B8C1↑j
.text:0040BA7A                 mov     dword ptr [esp+4], 40B72Ah
.text:0040BA82                 mov     [esp], eax
.text:0040BA85                 call    strspn
.text:0040BA8A                 add     [esp+1Ch], eax
.text:0040BA8E                 jmp     loc_40B8C7
.text:0040BA93 ; ---------------------------------------------------------------------------
.text:0040BA93
.text:0040BA93 loc_40BA93:                             ; CODE XREF: .text:0040B8A5↑j
.text:0040BA93                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BA97                 jz      short loc_40BADA
.text:0040BA99
.text:0040BA99 loc_40BA99:                             ; CODE XREF: .text:0040BADE↓j
.text:0040BA99                                         ; .text:0040BAE4↓j
.text:0040BA99                 cmp     al, 5Ch ; '\'
.text:0040BA9B                 jnz     loc_40B8AB
.text:0040BAA1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BAA5                 jz      short loc_40BAC2
.text:0040BAA7
.text:0040BAA7 loc_40BAA7:                             ; CODE XREF: .text:0040BAC6↓j
.text:0040BAA7                                         ; .text:0040BACC↓j
.text:0040BAA7                 cmp     al, 5Ch ; '\'
.text:0040BAA9                 jnz     loc_40B8AB
.text:0040BAAF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BAB3                 jnz     loc_40B8AB
.text:0040BAB9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BABC                 inc     edx
.text:0040BABD                 jmp     loc_40B8AD
.text:0040BAC2 ; ---------------------------------------------------------------------------
.text:0040BAC2
.text:0040BAC2 loc_40BAC2:                             ; CODE XREF: .text:0040BAA5↑j
.text:0040BAC2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BAC6                 jnz     short loc_40BAA7
.text:0040BAC8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BACC                 jnz     short loc_40BAA7
.text:0040BACE                 mov     byte ptr [ecx], 9
.text:0040BAD1
.text:0040BAD1 loc_40BAD1:                             ; CODE XREF: .text:0040BAE9↓j
.text:0040BAD1                 inc     ecx
.text:0040BAD2                 add     edx, 3
.text:0040BAD5                 jmp     loc_40B8AE
.text:0040BADA ; ---------------------------------------------------------------------------
.text:0040BADA
.text:0040BADA loc_40BADA:                             ; CODE XREF: .text:0040BA97↑j
.text:0040BADA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BADE                 jnz     short loc_40BA99
.text:0040BAE0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BAE4                 jnz     short loc_40BA99
.text:0040BAE6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BAE9                 jmp     short loc_40BAD1
.text:0040BAEB ; ---------------------------------------------------------------------------
.text:0040BAEB
.text:0040BAEB loc_40BAEB:                             ; CODE XREF: .text:0040B870↑j
.text:0040BAEB                 mov     dword ptr [esp+4], 40B72Ah
.text:0040BAF3                 mov     [esp], eax
.text:0040BAF6                 call    strspn
.text:0040BAFB                 add     [esp+1Ch], eax
.text:0040BAFF                 jmp     loc_40B876
.text:0040BB04 ; ---------------------------------------------------------------------------
.text:0040BB04
.text:0040BB04 loc_40BB04:                             ; CODE XREF: .text:0040B855↑j
.text:0040BB04                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BB08                 jz      short loc_40BB4B
.text:0040BB0A
.text:0040BB0A loc_40BB0A:                             ; CODE XREF: .text:0040BB4F↓j
.text:0040BB0A                                         ; .text:0040BB55↓j
.text:0040BB0A                 cmp     al, 5Ch ; '\'
.text:0040BB0C                 jnz     loc_40B85B
.text:0040BB12                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040BB16                 jz      short loc_40BB33
.text:0040BB18
.text:0040BB18 loc_40BB18:                             ; CODE XREF: .text:0040BB37↓j
.text:0040BB18                                         ; .text:0040BB3D↓j
.text:0040BB18                 cmp     al, 5Ch ; '\'
.text:0040BB1A                 jnz     loc_40B85B
.text:0040BB20                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040BB24                 jnz     loc_40B85B
.text:0040BB2A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040BB2D                 inc     edx
.text:0040BB2E                 jmp     loc_40B85D
.text:0040BB33 ; ---------------------------------------------------------------------------
.text:0040BB33
.text:0040BB33 loc_40BB33:                             ; CODE XREF: .text:0040BB16↑j
.text:0040BB33                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040BB37                 jnz     short loc_40BB18
.text:0040BB39                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040BB3D                 jnz     short loc_40BB18
.text:0040BB3F                 mov     byte ptr [ecx], 9
.text:0040BB42
.text:0040BB42 loc_40BB42:                             ; CODE XREF: .text:0040BB5A↓j
.text:0040BB42                 inc     ecx
.text:0040BB43                 add     edx, 3
.text:0040BB46                 jmp     loc_40B85E
.text:0040BB4B ; ---------------------------------------------------------------------------
.text:0040BB4B
.text:0040BB4B loc_40BB4B:                             ; CODE XREF: .text:0040BB08↑j
.text:0040BB4B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040BB4F                 jnz     short loc_40BB0A
.text:0040BB51                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040BB55                 jnz     short loc_40BB0A
.text:0040BB57                 mov     byte ptr [ecx], 20h ; ' '
.text:0040BB5A                 jmp     short loc_40BB42
.text:0040BB5A ; ---------------------------------------------------------------------------
.text:0040BB5C                 align 10h
.text:0040BB60
.text:0040BB60 loc_40BB60:                             ; CODE XREF: .text:0040B772↑j
.text:0040BB60                 mov     dword ptr [esp+4], 0
.text:0040BB68                 mov     dword ptr [esp], 0
.text:0040BB6F                 call    GetLogicalDriveStringsA
.text:0040BB74                 sub     esp, 8
.text:0040BB77                 mov     ebx, eax
.text:0040BB79                 call    GetProcessHeap
.text:0040BB7E                 mov     [esp], eax
.text:0040BB81                 mov     [esp+8], ebx
.text:0040BB85                 mov     dword ptr [esp+4], 0
.text:0040BB8D                 call    HeapAlloc
.text:0040BB92                 sub     esp, 0Ch
.text:0040BB95                 mov     esi, eax
.text:0040BB97                 mov     [esp+4], eax
.text:0040BB9B                 mov     [esp], ebx
.text:0040BB9E                 call    GetLogicalDriveStringsA
.text:0040BBA3                 mov     off_4100F4, esi ; "notset"
.text:0040BBA9                 sub     esp, 8
.text:0040BBAC                 jmp     loc_40B778
.text:0040BBAC ; ---------------------------------------------------------------------------
.text:0040BBB1 ; const char aSSSSDD[]
.text:0040BBB1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040BBB1                                         ; DATA XREF: .text:0040BCF0↓o
.text:0040BBB1                                         ; ___addmntentstr+F0↓o
.text:0040BBC4                 align 10h
.text:0040BBD0                 push    esi
.text:0040BBD1                 push    ebx
.text:0040BBD2                 sub     esp, 44h
.text:0040BBD5                 mov     ebx, [esp+54h]
.text:0040BBD9                 mov     esi, [esp+50h]
.text:0040BBDD                 mov     edx, [ebx]
.text:0040BBDF                 mov     [esp+20h], edx
.text:0040BBE3                 mov     ecx, [ebx+4]
.text:0040BBE6                 mov     [esp+24h], ecx
.text:0040BBEA                 mov     edx, [ebx+8]
.text:0040BBED                 mov     [esp+28h], edx
.text:0040BBF1                 mov     ecx, [ebx+0Ch]
.text:0040BBF4                 mov     [esp+2Ch], ecx
.text:0040BBF8                 mov     edx, [ebx+10h]
.text:0040BBFB                 mov     [esp+30h], edx
.text:0040BBFF                 mov     ecx, [ebx+14h]
.text:0040BC02                 mov     dword ptr [esp+8], 2
.text:0040BC0A                 mov     dword ptr [esp+4], 0
.text:0040BC12                 mov     [esp+34h], ecx
.text:0040BC16                 mov     [esp], esi
.text:0040BC19                 call    sub_40C510
.text:0040BC1E ; ---------------------------------------------------------------------------
.text:0040BC1E                 test    eax, eax
.text:0040BC20                 mov     edx, 1
.text:0040BC25                 jnz     loc_40BD25
.text:0040BC2B                 mov     ebx, [esp+20h]
.text:0040BC2F                 mov     edx, ebx
.text:0040BC31                 movzx   eax, byte ptr [ebx]
.text:0040BC34                 test    al, al
.text:0040BC36                 jz      short loc_40BC60
.text:0040BC38                 nop
.text:0040BC39                 lea     esi, [esi+0]
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: .text:0040BC5E↓j
.text:0040BC40                 cmp     al, 20h ; ' '
.text:0040BC42                 jz      loc_40BE9A
.text:0040BC48                 cmp     al, 9
.text:0040BC4A                 jz      loc_40BE9A
.text:0040BC50                 cmp     al, 5Ch ; '\'
.text:0040BC52                 jz      loc_40BE9A
.text:0040BC58                 inc     ebx
.text:0040BC59                 movzx   eax, byte ptr [ebx]
.text:0040BC5C                 test    al, al
.text:0040BC5E                 jnz     short loc_40BC40
.text:0040BC60
.text:0040BC60 loc_40BC60:                             ; CODE XREF: .text:0040BC36↑j
.text:0040BC60                                         ; .text:0040BE9C↓j ...
.text:0040BC60                 mov     ebx, [esp+24h]
.text:0040BC64                 mov     edx, ebx
.text:0040BC66                 movzx   eax, byte ptr [ebx]
.text:0040BC69                 test    al, al
.text:0040BC6B                 jz      short loc_40BC90
.text:0040BC6D                 lea     esi, [esi+0]
.text:0040BC70
.text:0040BC70 loc_40BC70:                             ; CODE XREF: .text:0040BC8E↓j
.text:0040BC70                 cmp     al, 20h ; ' '
.text:0040BC72                 jz      loc_40BE1A
.text:0040BC78                 cmp     al, 9
.text:0040BC7A                 jz      loc_40BE1A
.text:0040BC80                 cmp     al, 5Ch ; '\'
.text:0040BC82                 jz      loc_40BE1A
.text:0040BC88                 inc     ebx
.text:0040BC89                 movzx   eax, byte ptr [ebx]
.text:0040BC8C                 test    al, al
.text:0040BC8E                 jnz     short loc_40BC70
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: .text:0040BC6B↑j
.text:0040BC90                                         ; .text:0040BE1C↓j ...
.text:0040BC90                 mov     ebx, [esp+28h]
.text:0040BC94                 mov     edx, ebx
.text:0040BC96                 movzx   eax, byte ptr [ebx]
.text:0040BC99                 test    al, al
.text:0040BC9B                 jz      short loc_40BCC0
.text:0040BC9D                 lea     esi, [esi+0]
.text:0040BCA0
.text:0040BCA0 loc_40BCA0:                             ; CODE XREF: .text:0040BCBE↓j
.text:0040BCA0                 cmp     al, 20h ; ' '
.text:0040BCA2                 jz      loc_40BD9E
.text:0040BCA8                 cmp     al, 9
.text:0040BCAA                 jz      loc_40BD9E
.text:0040BCB0                 cmp     al, 5Ch ; '\'
.text:0040BCB2                 jz      loc_40BD9E
.text:0040BCB8                 inc     ebx
.text:0040BCB9                 movzx   eax, byte ptr [ebx]
.text:0040BCBC                 test    al, al
.text:0040BCBE                 jnz     short loc_40BCA0
.text:0040BCC0
.text:0040BCC0 loc_40BCC0:                             ; CODE XREF: .text:0040BC9B↑j
.text:0040BCC0                                         ; .text:0040BDA0↓j ...
.text:0040BCC0                 mov     edx, [esp+2Ch]
.text:0040BCC4                 mov     ebx, edx
.text:0040BCC6                 movzx   eax, byte ptr [edx]
.text:0040BCC9                 test    al, al
.text:0040BCCB                 jz      short loc_40BCE4
.text:0040BCCD                 lea     esi, [esi+0]
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: .text:0040BCE2↓j
.text:0040BCD0                 cmp     al, 20h ; ' '
.text:0040BCD2                 jz      short loc_40BD2D
.text:0040BCD4                 cmp     al, 9
.text:0040BCD6                 jz      short loc_40BD2D
.text:0040BCD8                 cmp     al, 5Ch ; '\'
.text:0040BCDA                 jz      short loc_40BD2D
.text:0040BCDC                 inc     ebx
.text:0040BCDD                 movzx   eax, byte ptr [ebx]
.text:0040BCE0                 test    al, al
.text:0040BCE2                 jnz     short loc_40BCD0
.text:0040BCE4
.text:0040BCE4 loc_40BCE4:                             ; CODE XREF: .text:0040BCCB↑j
.text:0040BCE4                                         ; .text:0040BD2F↓j ...
.text:0040BCE4                 mov     [esp+14h], edx
.text:0040BCE8                 mov     ecx, [esp+34h]
.text:0040BCEC                 mov     ebx, [esp+30h]
.text:0040BCF0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040BCF8                 mov     edx, [esp+24h]
.text:0040BCFC                 mov     [esp+1Ch], ecx
.text:0040BD00                 mov     ecx, [esp+28h]
.text:0040BD04                 mov     [esp+18h], ebx
.text:0040BD08                 mov     ebx, [esp+20h]
.text:0040BD0C                 mov     [esp+0Ch], edx
.text:0040BD10                 mov     [esp+10h], ecx
.text:0040BD14                 mov     [esp+8], ebx
.text:0040BD18                 mov     [esp], esi
.text:0040BD1B                 call    fprintf
.text:0040BD20                 mov     edx, eax
.text:0040BD22                 shr     edx, 1Fh
.text:0040BD25
.text:0040BD25 loc_40BD25:                             ; CODE XREF: .text:0040BC25↑j
.text:0040BD25                 add     esp, 44h
.text:0040BD28                 mov     eax, edx
.text:0040BD2A                 pop     ebx
.text:0040BD2B                 pop     esi
.text:0040BD2C                 retn
.text:0040BD2D ; ---------------------------------------------------------------------------
.text:0040BD2D
.text:0040BD2D loc_40BD2D:                             ; CODE XREF: .text:0040BCD2↑j
.text:0040BD2D                                         ; .text:0040BCD6↑j ...
.text:0040BD2D                 test    al, al
.text:0040BD2F                 jz      short loc_40BCE4
.text:0040BD31                 mov     [esp], edx
.text:0040BD34                 mov     ebx, edx
.text:0040BD36                 call    strlen
.text:0040BD3B                 lea     edx, ds:1[eax*4]
.text:0040BD42                 mov     [esp], edx
.text:0040BD45                 call    malloc
.text:0040BD4A                 mov     [esp+2Ch], eax
.text:0040BD4E                 mov     edx, eax
.text:0040BD50
.text:0040BD50 loc_40BD50:                             ; CODE XREF: .text:0040BD68↓j
.text:0040BD50                 movzx   eax, byte ptr [ebx]
.text:0040BD53                 cmp     al, 20h ; ' '
.text:0040BD55                 jz      short loc_40BD8D
.text:0040BD57                 cmp     al, 9
.text:0040BD59                 jz      short loc_40BD7C
.text:0040BD5B                 cmp     al, 5Ch ; '\'
.text:0040BD5D                 jz      short loc_40BD73
.text:0040BD5F                 mov     [edx], al
.text:0040BD61
.text:0040BD61 loc_40BD61:                             ; CODE XREF: .text:0040BD7A↓j
.text:0040BD61                                         ; .text:0040BD8B↓j ...
.text:0040BD61                 movzx   ecx, byte ptr [ebx]
.text:0040BD64                 inc     edx
.text:0040BD65                 inc     ebx
.text:0040BD66                 test    cl, cl
.text:0040BD68                 jnz     short loc_40BD50
.text:0040BD6A                 mov     edx, [esp+2Ch]
.text:0040BD6E                 jmp     loc_40BCE4
.text:0040BD73 ; ---------------------------------------------------------------------------
.text:0040BD73
.text:0040BD73 loc_40BD73:                             ; CODE XREF: .text:0040BD5D↑j
.text:0040BD73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD76                 inc     edx
.text:0040BD77                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD7A                 jmp     short loc_40BD61
.text:0040BD7C ; ---------------------------------------------------------------------------
.text:0040BD7C
.text:0040BD7C loc_40BD7C:                             ; CODE XREF: .text:0040BD59↑j
.text:0040BD7C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD7F                 inc     edx
.text:0040BD80                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD83                 inc     edx
.text:0040BD84                 mov     byte ptr [edx], 31h ; '1'
.text:0040BD87                 inc     edx
.text:0040BD88                 mov     byte ptr [edx], 32h ; '2'
.text:0040BD8B                 jmp     short loc_40BD61
.text:0040BD8D ; ---------------------------------------------------------------------------
.text:0040BD8D
.text:0040BD8D loc_40BD8D:                             ; CODE XREF: .text:0040BD55↑j
.text:0040BD8D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD90                 inc     edx
.text:0040BD91                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD94                 inc     edx
.text:0040BD95                 mov     byte ptr [edx], 34h ; '4'
.text:0040BD98                 inc     edx
.text:0040BD99                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD9C                 jmp     short loc_40BD61
.text:0040BD9E ; ---------------------------------------------------------------------------
.text:0040BD9E
.text:0040BD9E loc_40BD9E:                             ; CODE XREF: .text:0040BCA2↑j
.text:0040BD9E                                         ; .text:0040BCAA↑j ...
.text:0040BD9E                 test    al, al
.text:0040BDA0                 jz      loc_40BCC0
.text:0040BDA6                 mov     [esp], edx
.text:0040BDA9                 mov     ebx, edx
.text:0040BDAB                 call    strlen
.text:0040BDB0                 lea     edx, ds:1[eax*4]
.text:0040BDB7                 mov     [esp], edx
.text:0040BDBA                 call    malloc
.text:0040BDBF                 mov     [esp+28h], eax
.text:0040BDC3                 mov     edx, eax
.text:0040BDC5                 lea     esi, [esi+0]
.text:0040BDC9                 lea     edi, [edi+0]
.text:0040BDD0
.text:0040BDD0 loc_40BDD0:                             ; CODE XREF: .text:0040BDE8↓j
.text:0040BDD0                 movzx   eax, byte ptr [ebx]
.text:0040BDD3                 cmp     al, 20h ; ' '
.text:0040BDD5                 jz      short loc_40BE09
.text:0040BDD7                 cmp     al, 9
.text:0040BDD9                 jz      short loc_40BDF8
.text:0040BDDB                 cmp     al, 5Ch ; '\'
.text:0040BDDD                 jz      short loc_40BDEF
.text:0040BDDF                 mov     [edx], al
.text:0040BDE1
.text:0040BDE1 loc_40BDE1:                             ; CODE XREF: .text:0040BDF6↓j
.text:0040BDE1                                         ; .text:0040BE07↓j ...
.text:0040BDE1                 movzx   ecx, byte ptr [ebx]
.text:0040BDE4                 inc     edx
.text:0040BDE5                 inc     ebx
.text:0040BDE6                 test    cl, cl
.text:0040BDE8                 jnz     short loc_40BDD0
.text:0040BDEA                 jmp     loc_40BCC0
.text:0040BDEF ; ---------------------------------------------------------------------------
.text:0040BDEF
.text:0040BDEF loc_40BDEF:                             ; CODE XREF: .text:0040BDDD↑j
.text:0040BDEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BDF2                 inc     edx
.text:0040BDF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BDF6                 jmp     short loc_40BDE1
.text:0040BDF8 ; ---------------------------------------------------------------------------
.text:0040BDF8
.text:0040BDF8 loc_40BDF8:                             ; CODE XREF: .text:0040BDD9↑j
.text:0040BDF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BDFB                 inc     edx
.text:0040BDFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040BDFF                 inc     edx
.text:0040BE00                 mov     byte ptr [edx], 31h ; '1'
.text:0040BE03                 inc     edx
.text:0040BE04                 mov     byte ptr [edx], 32h ; '2'
.text:0040BE07                 jmp     short loc_40BDE1
.text:0040BE09 ; ---------------------------------------------------------------------------
.text:0040BE09
.text:0040BE09 loc_40BE09:                             ; CODE XREF: .text:0040BDD5↑j
.text:0040BE09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BE0C                 inc     edx
.text:0040BE0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BE10                 inc     edx
.text:0040BE11                 mov     byte ptr [edx], 34h ; '4'
.text:0040BE14                 inc     edx
.text:0040BE15                 mov     byte ptr [edx], 30h ; '0'
.text:0040BE18                 jmp     short loc_40BDE1
.text:0040BE1A ; ---------------------------------------------------------------------------
.text:0040BE1A
.text:0040BE1A loc_40BE1A:                             ; CODE XREF: .text:0040BC72↑j
.text:0040BE1A                                         ; .text:0040BC7A↑j ...
.text:0040BE1A                 test    al, al
.text:0040BE1C                 jz      loc_40BC90
.text:0040BE22                 mov     [esp], edx
.text:0040BE25                 mov     ebx, edx
.text:0040BE27                 call    strlen
.text:0040BE2C                 lea     edx, ds:1[eax*4]
.text:0040BE33                 mov     [esp], edx
.text:0040BE36                 call    malloc
.text:0040BE3B                 mov     [esp+24h], eax
.text:0040BE3F                 mov     edx, eax
.text:0040BE41                 jmp     short loc_40BE50
.text:0040BE41 ; ---------------------------------------------------------------------------
.text:0040BE43                 align 10h
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: .text:0040BE41↑j
.text:0040BE50                                         ; .text:0040BE68↓j
.text:0040BE50                 movzx   eax, byte ptr [ebx]
.text:0040BE53                 cmp     al, 20h ; ' '
.text:0040BE55                 jz      short loc_40BE89
.text:0040BE57                 cmp     al, 9
.text:0040BE59                 jz      short loc_40BE78
.text:0040BE5B                 cmp     al, 5Ch ; '\'
.text:0040BE5D                 jz      short loc_40BE6F
.text:0040BE5F                 mov     [edx], al
.text:0040BE61
.text:0040BE61 loc_40BE61:                             ; CODE XREF: .text:0040BE76↓j
.text:0040BE61                                         ; .text:0040BE87↓j ...
.text:0040BE61                 movzx   ecx, byte ptr [ebx]
.text:0040BE64                 inc     edx
.text:0040BE65                 inc     ebx
.text:0040BE66                 test    cl, cl
.text:0040BE68                 jnz     short loc_40BE50
.text:0040BE6A                 jmp     loc_40BC90
.text:0040BE6F ; ---------------------------------------------------------------------------
.text:0040BE6F
.text:0040BE6F loc_40BE6F:                             ; CODE XREF: .text:0040BE5D↑j
.text:0040BE6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BE72                 inc     edx
.text:0040BE73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BE76                 jmp     short loc_40BE61
.text:0040BE78 ; ---------------------------------------------------------------------------
.text:0040BE78
.text:0040BE78 loc_40BE78:                             ; CODE XREF: .text:0040BE59↑j
.text:0040BE78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BE7B                 inc     edx
.text:0040BE7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BE7F                 inc     edx
.text:0040BE80                 mov     byte ptr [edx], 31h ; '1'
.text:0040BE83                 inc     edx
.text:0040BE84                 mov     byte ptr [edx], 32h ; '2'
.text:0040BE87                 jmp     short loc_40BE61
.text:0040BE89 ; ---------------------------------------------------------------------------
.text:0040BE89
.text:0040BE89 loc_40BE89:                             ; CODE XREF: .text:0040BE55↑j
.text:0040BE89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BE8C                 inc     edx
.text:0040BE8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BE90                 inc     edx
.text:0040BE91                 mov     byte ptr [edx], 34h ; '4'
.text:0040BE94                 inc     edx
.text:0040BE95                 mov     byte ptr [edx], 30h ; '0'
.text:0040BE98                 jmp     short loc_40BE61
.text:0040BE9A ; ---------------------------------------------------------------------------
.text:0040BE9A
.text:0040BE9A loc_40BE9A:                             ; CODE XREF: .text:0040BC42↑j
.text:0040BE9A                                         ; .text:0040BC4A↑j ...
.text:0040BE9A                 test    al, al
.text:0040BE9C                 jz      loc_40BC60
.text:0040BEA2                 mov     [esp], edx
.text:0040BEA5                 mov     ebx, edx
.text:0040BEA7                 call    strlen
.text:0040BEAC                 lea     ecx, ds:1[eax*4]
.text:0040BEB3                 mov     [esp], ecx
.text:0040BEB6                 call    malloc
.text:0040BEBB                 mov     [esp+20h], eax
.text:0040BEBF                 mov     edx, eax
.text:0040BEC1                 jmp     short loc_40BED0
.text:0040BEC1 ; ---------------------------------------------------------------------------
.text:0040BEC3                 align 10h
.text:0040BED0
.text:0040BED0 loc_40BED0:                             ; CODE XREF: .text:0040BEC1↑j
.text:0040BED0                                         ; .text:0040BEE8↓j
.text:0040BED0                 movzx   eax, byte ptr [ebx]
.text:0040BED3                 cmp     al, 20h ; ' '
.text:0040BED5                 jz      short loc_40BF09
.text:0040BED7                 cmp     al, 9
.text:0040BED9                 jz      short loc_40BEF8
.text:0040BEDB                 cmp     al, 5Ch ; '\'
.text:0040BEDD                 jz      short loc_40BEEF
.text:0040BEDF                 mov     [edx], al
.text:0040BEE1
.text:0040BEE1 loc_40BEE1:                             ; CODE XREF: .text:0040BEF6↓j
.text:0040BEE1                                         ; .text:0040BF07↓j ...
.text:0040BEE1                 movzx   ecx, byte ptr [ebx]
.text:0040BEE4                 inc     edx
.text:0040BEE5                 inc     ebx
.text:0040BEE6                 test    cl, cl
.text:0040BEE8                 jnz     short loc_40BED0
.text:0040BEEA                 jmp     loc_40BC60
.text:0040BEEF ; ---------------------------------------------------------------------------
.text:0040BEEF
.text:0040BEEF loc_40BEEF:                             ; CODE XREF: .text:0040BEDD↑j
.text:0040BEEF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BEF2                 inc     edx
.text:0040BEF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BEF6                 jmp     short loc_40BEE1
.text:0040BEF8 ; ---------------------------------------------------------------------------
.text:0040BEF8
.text:0040BEF8 loc_40BEF8:                             ; CODE XREF: .text:0040BED9↑j
.text:0040BEF8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BEFB                 inc     edx
.text:0040BEFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040BEFF                 inc     edx
.text:0040BF00                 mov     byte ptr [edx], 31h ; '1'
.text:0040BF03                 inc     edx
.text:0040BF04                 mov     byte ptr [edx], 32h ; '2'
.text:0040BF07                 jmp     short loc_40BEE1
.text:0040BF09 ; ---------------------------------------------------------------------------
.text:0040BF09
.text:0040BF09 loc_40BF09:                             ; CODE XREF: .text:0040BED5↑j
.text:0040BF09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BF0C                 inc     edx
.text:0040BF0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BF10                 inc     edx
.text:0040BF11                 mov     byte ptr [edx], 34h ; '4'
.text:0040BF14                 inc     edx
.text:0040BF15                 mov     byte ptr [edx], 30h ; '0'
.text:0040BF18                 jmp     short loc_40BEE1
.text:0040BF18 ; ---------------------------------------------------------------------------
.text:0040BF1A                 align 10h
.text:0040BF20
.text:0040BF20 ; =============== S U B R O U T I N E =======================================
.text:0040BF20
.text:0040BF20 ; Attributes: info_from_lumina
.text:0040BF20
.text:0040BF20 ; int __cdecl __addmntentstr(char *, int)
.text:0040BF20 ___addmntentstr proc near               ; CODE XREF: .text:0040B7EA↑p
.text:0040BF20
.text:0040BF20 Buffer          = dword ptr -4Ch
.text:0040BF20 Format          = dword ptr -48h
.text:0040BF20 var_44          = dword ptr -44h
.text:0040BF20 var_40          = dword ptr -40h
.text:0040BF20 var_3C          = dword ptr -3Ch
.text:0040BF20 var_38          = dword ptr -38h
.text:0040BF20 var_34          = dword ptr -34h
.text:0040BF20 var_30          = dword ptr -30h
.text:0040BF20 var_2C          = dword ptr -2Ch
.text:0040BF20 var_28          = dword ptr -28h
.text:0040BF20 var_24          = dword ptr -24h
.text:0040BF20 Str             = dword ptr -20h
.text:0040BF20 var_1C          = dword ptr -1Ch
.text:0040BF20 var_18          = dword ptr -18h
.text:0040BF20 arg_0           = dword ptr  4
.text:0040BF20 arg_4           = dword ptr  8
.text:0040BF20
.text:0040BF20                 push    ebx
.text:0040BF21                 sub     esp, 48h
.text:0040BF24                 mov     edx, [esp+4Ch+arg_4]
.text:0040BF28                 mov     ecx, [edx]
.text:0040BF2A                 mov     [esp+4Ch+var_2C], ecx
.text:0040BF2E                 mov     ebx, [edx+4]
.text:0040BF31                 mov     [esp+4Ch+var_28], ebx
.text:0040BF35                 mov     ebx, [edx+8]
.text:0040BF38                 mov     [esp+4Ch+var_24], ebx
.text:0040BF3C                 mov     ebx, [edx+0Ch]
.text:0040BF3F                 mov     [esp+4Ch+Str], ebx
.text:0040BF43                 mov     ebx, [edx+10h]
.text:0040BF46                 mov     [esp+4Ch+var_1C], ebx
.text:0040BF4A                 mov     ebx, [edx+14h]
.text:0040BF4D                 mov     [esp+4Ch+var_18], ebx
.text:0040BF51                 mov     ebx, ecx
.text:0040BF53                 movzx   eax, byte ptr [ecx]
.text:0040BF56                 test    al, al
.text:0040BF58                 jz      loc_40C241
.text:0040BF5E                 mov     esi, esi
.text:0040BF60
.text:0040BF60 loc_40BF60:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040BF60                 cmp     al, 20h ; ' '
.text:0040BF62                 jz      loc_40C1C0
.text:0040BF68                 cmp     al, 9
.text:0040BF6A                 jz      loc_40C1C0
.text:0040BF70                 cmp     al, 5Ch ; '\'
.text:0040BF72                 jz      loc_40C1C0
.text:0040BF78                 inc     ebx
.text:0040BF79                 movzx   eax, byte ptr [ebx]
.text:0040BF7C                 test    al, al
.text:0040BF7E                 jnz     short loc_40BF60
.text:0040BF80
.text:0040BF80 loc_40BF80:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040BF80                                         ; ___addmntentstr+2EA↓j
.text:0040BF80                 mov     ebx, [esp+4Ch+var_28]
.text:0040BF84                 mov     edx, ebx
.text:0040BF86                 movzx   eax, byte ptr [ebx]
.text:0040BF89                 test    al, al
.text:0040BF8B                 jz      short loc_40BFB0
.text:0040BF8D                 lea     esi, [esi+0]
.text:0040BF90
.text:0040BF90 loc_40BF90:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040BF90                 cmp     al, 20h ; ' '
.text:0040BF92                 jz      loc_40C13A
.text:0040BF98                 cmp     al, 9
.text:0040BF9A                 jz      loc_40C13A
.text:0040BFA0                 cmp     al, 5Ch ; '\'
.text:0040BFA2                 jz      loc_40C13A
.text:0040BFA8                 inc     ebx
.text:0040BFA9                 movzx   eax, byte ptr [ebx]
.text:0040BFAC                 test    al, al
.text:0040BFAE                 jnz     short loc_40BF90
.text:0040BFB0
.text:0040BFB0 loc_40BFB0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040BFB0                                         ; ___addmntentstr+21C↓j ...
.text:0040BFB0                 mov     ebx, [esp+4Ch+var_24]
.text:0040BFB4                 mov     edx, ebx
.text:0040BFB6                 movzx   eax, byte ptr [ebx]
.text:0040BFB9                 test    al, al
.text:0040BFBB                 jz      short loc_40BFE0
.text:0040BFBD                 lea     esi, [esi+0]
.text:0040BFC0
.text:0040BFC0 loc_40BFC0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040BFC0                 cmp     al, 20h ; ' '
.text:0040BFC2                 jz      loc_40C0BE
.text:0040BFC8                 cmp     al, 9
.text:0040BFCA                 jz      loc_40C0BE
.text:0040BFD0                 cmp     al, 5Ch ; '\'
.text:0040BFD2                 jz      loc_40C0BE
.text:0040BFD8                 inc     ebx
.text:0040BFD9                 movzx   eax, byte ptr [ebx]
.text:0040BFDC                 test    al, al
.text:0040BFDE                 jnz     short loc_40BFC0
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040BFE0                                         ; ___addmntentstr+1A0↓j ...
.text:0040BFE0                 mov     edx, [esp+4Ch+Str]
.text:0040BFE4                 mov     ebx, edx
.text:0040BFE6                 movzx   eax, byte ptr [edx]
.text:0040BFE9                 test    al, al
.text:0040BFEB                 jz      short loc_40C004
.text:0040BFED                 lea     esi, [esi+0]
.text:0040BFF0
.text:0040BFF0 loc_40BFF0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040BFF0                 cmp     al, 20h ; ' '
.text:0040BFF2                 jz      short loc_40C04C
.text:0040BFF4                 cmp     al, 9
.text:0040BFF6                 jz      short loc_40C04C
.text:0040BFF8                 cmp     al, 5Ch ; '\'
.text:0040BFFA                 jz      short loc_40C04C
.text:0040BFFC                 inc     ebx
.text:0040BFFD                 movzx   eax, byte ptr [ebx]
.text:0040C000                 test    al, al
.text:0040C002                 jnz     short loc_40BFF0
.text:0040C004
.text:0040C004 loc_40C004:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040C004                                         ; ___addmntentstr+12E↓j ...
.text:0040C004                 mov     [esp+4Ch+var_38], edx
.text:0040C008                 mov     ebx, [esp+4Ch+var_18]
.text:0040C00C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040C010                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C018                 mov     edx, [esp+4Ch+var_2C]
.text:0040C01C                 mov     [esp+4Ch+var_30], ebx
.text:0040C020                 mov     ebx, [esp+4Ch+var_24]
.text:0040C024                 mov     [esp+4Ch+var_34], ecx
.text:0040C028                 mov     ecx, [esp+4Ch+var_28]
.text:0040C02C                 mov     [esp+4Ch+var_3C], ebx
.text:0040C030                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C034                 mov     [esp+4Ch+var_40], ecx
.text:0040C038                 mov     [esp+4Ch+var_44], edx
.text:0040C03C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040C03F                 call    sprintf
.text:0040C044                 add     esp, 48h
.text:0040C047                 shr     eax, 1Fh
.text:0040C04A                 pop     ebx
.text:0040C04B                 retn
.text:0040C04C ; ---------------------------------------------------------------------------
.text:0040C04C
.text:0040C04C loc_40C04C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040C04C                                         ; ___addmntentstr+D6↑j ...
.text:0040C04C                 test    al, al
.text:0040C04E                 jz      short loc_40C004
.text:0040C050                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C053                 mov     ebx, edx
.text:0040C055                 call    strlen
.text:0040C05A                 lea     edx, ds:1[eax*4]
.text:0040C061                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C064                 call    malloc
.text:0040C069                 mov     [esp+4Ch+Str], eax
.text:0040C06D                 mov     edx, eax
.text:0040C06F                 nop
.text:0040C070
.text:0040C070 loc_40C070:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040C070                 movzx   eax, byte ptr [ebx]
.text:0040C073                 cmp     al, 20h ; ' '
.text:0040C075                 jz      short loc_40C0AD
.text:0040C077                 cmp     al, 9
.text:0040C079                 jz      short loc_40C09C
.text:0040C07B                 cmp     al, 5Ch ; '\'
.text:0040C07D                 jz      short loc_40C093
.text:0040C07F                 mov     [edx], al
.text:0040C081
.text:0040C081 loc_40C081:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040C081                                         ; ___addmntentstr+18B↓j ...
.text:0040C081                 movzx   ecx, byte ptr [ebx]
.text:0040C084                 inc     edx
.text:0040C085                 inc     ebx
.text:0040C086                 test    cl, cl
.text:0040C088                 jnz     short loc_40C070
.text:0040C08A                 mov     edx, [esp+4Ch+Str]
.text:0040C08E                 jmp     loc_40C004
.text:0040C093 ; ---------------------------------------------------------------------------
.text:0040C093
.text:0040C093 loc_40C093:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040C093                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C096                 inc     edx
.text:0040C097                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C09A                 jmp     short loc_40C081
.text:0040C09C ; ---------------------------------------------------------------------------
.text:0040C09C
.text:0040C09C loc_40C09C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040C09C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C09F                 inc     edx
.text:0040C0A0                 mov     byte ptr [edx], 30h ; '0'
.text:0040C0A3                 inc     edx
.text:0040C0A4                 mov     byte ptr [edx], 31h ; '1'
.text:0040C0A7                 inc     edx
.text:0040C0A8                 mov     byte ptr [edx], 32h ; '2'
.text:0040C0AB                 jmp     short loc_40C081
.text:0040C0AD ; ---------------------------------------------------------------------------
.text:0040C0AD
.text:0040C0AD loc_40C0AD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040C0AD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C0B0                 inc     edx
.text:0040C0B1                 mov     byte ptr [edx], 30h ; '0'
.text:0040C0B4                 inc     edx
.text:0040C0B5                 mov     byte ptr [edx], 34h ; '4'
.text:0040C0B8                 inc     edx
.text:0040C0B9                 mov     byte ptr [edx], 30h ; '0'
.text:0040C0BC                 jmp     short loc_40C081
.text:0040C0BE ; ---------------------------------------------------------------------------
.text:0040C0BE
.text:0040C0BE loc_40C0BE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040C0BE                                         ; ___addmntentstr+AA↑j ...
.text:0040C0BE                 test    al, al
.text:0040C0C0                 jz      loc_40BFE0
.text:0040C0C6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C0C9                 mov     ebx, edx
.text:0040C0CB                 call    strlen
.text:0040C0D0                 lea     edx, ds:1[eax*4]
.text:0040C0D7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C0DA                 call    malloc
.text:0040C0DF                 mov     [esp+4Ch+var_24], eax
.text:0040C0E3                 mov     edx, eax
.text:0040C0E5                 lea     esi, [esi+0]
.text:0040C0E9                 lea     edi, [edi+0]
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040C0F0                 movzx   eax, byte ptr [ebx]
.text:0040C0F3                 cmp     al, 20h ; ' '
.text:0040C0F5                 jz      short loc_40C129
.text:0040C0F7                 cmp     al, 9
.text:0040C0F9                 jz      short loc_40C118
.text:0040C0FB                 cmp     al, 5Ch ; '\'
.text:0040C0FD                 jz      short loc_40C10F
.text:0040C0FF                 mov     [edx], al
.text:0040C101
.text:0040C101 loc_40C101:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040C101                                         ; ___addmntentstr+207↓j ...
.text:0040C101                 movzx   ecx, byte ptr [ebx]
.text:0040C104                 inc     edx
.text:0040C105                 inc     ebx
.text:0040C106                 test    cl, cl
.text:0040C108                 jnz     short loc_40C0F0
.text:0040C10A                 jmp     loc_40BFE0
.text:0040C10F ; ---------------------------------------------------------------------------
.text:0040C10F
.text:0040C10F loc_40C10F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040C10F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C112                 inc     edx
.text:0040C113                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C116                 jmp     short loc_40C101
.text:0040C118 ; ---------------------------------------------------------------------------
.text:0040C118
.text:0040C118 loc_40C118:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040C118                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C11B                 inc     edx
.text:0040C11C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C11F                 inc     edx
.text:0040C120                 mov     byte ptr [edx], 31h ; '1'
.text:0040C123                 inc     edx
.text:0040C124                 mov     byte ptr [edx], 32h ; '2'
.text:0040C127                 jmp     short loc_40C101
.text:0040C129 ; ---------------------------------------------------------------------------
.text:0040C129
.text:0040C129 loc_40C129:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040C129                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C12C                 inc     edx
.text:0040C12D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C130                 inc     edx
.text:0040C131                 mov     byte ptr [edx], 34h ; '4'
.text:0040C134                 inc     edx
.text:0040C135                 mov     byte ptr [edx], 30h ; '0'
.text:0040C138                 jmp     short loc_40C101
.text:0040C13A ; ---------------------------------------------------------------------------
.text:0040C13A
.text:0040C13A loc_40C13A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040C13A                                         ; ___addmntentstr+7A↑j ...
.text:0040C13A                 test    al, al
.text:0040C13C                 jz      loc_40BFB0
.text:0040C142                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C145                 mov     ebx, edx
.text:0040C147                 call    strlen
.text:0040C14C                 lea     edx, ds:1[eax*4]
.text:0040C153                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C156                 call    malloc
.text:0040C15B                 mov     [esp+4Ch+var_28], eax
.text:0040C15F                 mov     edx, eax
.text:0040C161                 jmp     short loc_40C170
.text:0040C161 ; ---------------------------------------------------------------------------
.text:0040C163                 align 10h
.text:0040C170
.text:0040C170 loc_40C170:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040C170                                         ; ___addmntentstr+268↓j
.text:0040C170                 movzx   eax, byte ptr [ebx]
.text:0040C173                 cmp     al, 20h ; ' '
.text:0040C175                 jz      short loc_40C1A9
.text:0040C177                 cmp     al, 9
.text:0040C179                 jz      short loc_40C198
.text:0040C17B                 cmp     al, 5Ch ; '\'
.text:0040C17D                 jz      short loc_40C18F
.text:0040C17F                 mov     [edx], al
.text:0040C181
.text:0040C181 loc_40C181:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040C181                                         ; ___addmntentstr+287↓j ...
.text:0040C181                 movzx   ecx, byte ptr [ebx]
.text:0040C184                 inc     edx
.text:0040C185                 inc     ebx
.text:0040C186                 test    cl, cl
.text:0040C188                 jnz     short loc_40C170
.text:0040C18A                 jmp     loc_40BFB0
.text:0040C18F ; ---------------------------------------------------------------------------
.text:0040C18F
.text:0040C18F loc_40C18F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040C18F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C192                 inc     edx
.text:0040C193                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C196                 jmp     short loc_40C181
.text:0040C198 ; ---------------------------------------------------------------------------
.text:0040C198
.text:0040C198 loc_40C198:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040C198                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C19B                 inc     edx
.text:0040C19C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C19F                 inc     edx
.text:0040C1A0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C1A3                 inc     edx
.text:0040C1A4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C1A7                 jmp     short loc_40C181
.text:0040C1A9 ; ---------------------------------------------------------------------------
.text:0040C1A9
.text:0040C1A9 loc_40C1A9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040C1A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C1AC                 inc     edx
.text:0040C1AD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C1B0                 inc     edx
.text:0040C1B1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C1B4                 inc     edx
.text:0040C1B5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C1B8                 jmp     short loc_40C181
.text:0040C1B8 ; ---------------------------------------------------------------------------
.text:0040C1BA                 align 10h
.text:0040C1C0
.text:0040C1C0 loc_40C1C0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040C1C0                                         ; ___addmntentstr+4A↑j ...
.text:0040C1C0                 test    al, al
.text:0040C1C2                 jz      loc_40BF80
.text:0040C1C8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040C1CC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040C1CF                 call    strlen
.text:0040C1D4                 lea     edx, ds:1[eax*4]
.text:0040C1DB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C1DE                 call    malloc
.text:0040C1E3                 mov     [esp+4Ch+var_2C], eax
.text:0040C1E7                 mov     edx, eax
.text:0040C1E9                 lea     esi, [esi+0]
.text:0040C1F0
.text:0040C1F0 loc_40C1F0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040C1F0                 movzx   eax, byte ptr [ebx]
.text:0040C1F3                 cmp     al, 20h ; ' '
.text:0040C1F5                 jz      short loc_40C230
.text:0040C1F7                 cmp     al, 9
.text:0040C1F9                 jz      short loc_40C218
.text:0040C1FB                 cmp     al, 5Ch ; '\'
.text:0040C1FD                 jz      short loc_40C20F
.text:0040C1FF                 mov     [edx], al
.text:0040C201
.text:0040C201 loc_40C201:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040C201                                         ; ___addmntentstr+307↓j ...
.text:0040C201                 movzx   ecx, byte ptr [ebx]
.text:0040C204                 inc     edx
.text:0040C205                 inc     ebx
.text:0040C206                 test    cl, cl
.text:0040C208                 jnz     short loc_40C1F0
.text:0040C20A                 jmp     loc_40BF80
.text:0040C20F ; ---------------------------------------------------------------------------
.text:0040C20F
.text:0040C20F loc_40C20F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040C20F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C212                 inc     edx
.text:0040C213                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C216                 jmp     short loc_40C201
.text:0040C218 ; ---------------------------------------------------------------------------
.text:0040C218
.text:0040C218 loc_40C218:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040C218                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C21B                 inc     edx
.text:0040C21C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C21F                 inc     edx
.text:0040C220                 mov     byte ptr [edx], 31h ; '1'
.text:0040C223                 inc     edx
.text:0040C224                 mov     byte ptr [edx], 32h ; '2'
.text:0040C227                 jmp     short loc_40C201
.text:0040C227 ; ---------------------------------------------------------------------------
.text:0040C229                 align 10h
.text:0040C230
.text:0040C230 loc_40C230:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040C230                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C233                 inc     edx
.text:0040C234                 mov     byte ptr [edx], 30h ; '0'
.text:0040C237                 inc     edx
.text:0040C238                 mov     byte ptr [edx], 34h ; '4'
.text:0040C23B                 inc     edx
.text:0040C23C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C23F                 jmp     short loc_40C201
.text:0040C241 ; ---------------------------------------------------------------------------
.text:0040C241
.text:0040C241 loc_40C241:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040C241                 movzx   eax, byte ptr [ecx]
.text:0040C244                 jmp     loc_40C1C0
.text:0040C244 ___addmntentstr endp
.text:0040C244
.text:0040C244 ; ---------------------------------------------------------------------------
.text:0040C249                 align 10h
.text:0040C250
.text:0040C250 ; =============== S U B R O U T I N E =======================================
.text:0040C250
.text:0040C250
.text:0040C250 sub_40C250      proc near               ; CODE XREF: sub_40A770+99↑p
.text:0040C250
.text:0040C250 nBufferLength   = dword ptr -1Ch
.text:0040C250 lpBuffer        = dword ptr -18h
.text:0040C250 dwBytes         = dword ptr -14h
.text:0040C250 var_8           = dword ptr -8
.text:0040C250 var_4           = dword ptr -4
.text:0040C250
.text:0040C250                 sub     esp, 1Ch
.text:0040C253                 mov     [esp+1Ch+var_8], ebx
.text:0040C257                 mov     [esp+1Ch+var_4], esi
.text:0040C25B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040C263                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040C26A                 call    GetLogicalDriveStringsA
.text:0040C26F                 sub     esp, 8
.text:0040C272                 mov     ebx, eax
.text:0040C274                 call    GetProcessHeap
.text:0040C279                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040C27C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040C280                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040C288                 call    HeapAlloc
.text:0040C28D                 sub     esp, 0Ch
.text:0040C290                 mov     esi, eax
.text:0040C292                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040C295                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040C299                 call    GetLogicalDriveStringsA
.text:0040C29E                 sub     esp, 8
.text:0040C2A1                 mov     eax, esi
.text:0040C2A3                 mov     ebx, [esp+1Ch+var_8]
.text:0040C2A7                 mov     esi, [esp+1Ch+var_4]
.text:0040C2AB                 add     esp, 1Ch
.text:0040C2AE                 retn
.text:0040C2AE sub_40C250      endp
.text:0040C2AE
.text:0040C2AF
.text:0040C2AF ; =============== S U B R O U T I N E =======================================
.text:0040C2AF
.text:0040C2AF
.text:0040C2AF ; int __cdecl sub_40C2AF(char *, char *)
.text:0040C2AF sub_40C2AF      proc near               ; DATA XREF: sub_40C2AF:loc_40C33D↓o
.text:0040C2AF
.text:0040C2AF FileName        = dword ptr -1Ch
.text:0040C2AF Mode            = dword ptr -18h
.text:0040C2AF dwBytes         = dword ptr -14h
.text:0040C2AF arg_0           = dword ptr  4
.text:0040C2AF arg_4           = dword ptr  8
.text:0040C2AF
.text:0040C2AF                 ja      short $+2
.text:0040C2B1
.text:0040C2B1 loc_40C2B1:                             ; CODE XREF: sub_40C2AF↑j
.text:0040C2B1                 jmp     short loc_40C2C0
.text:0040C2B1 ; ---------------------------------------------------------------------------
.text:0040C2B3                 align 10h
.text:0040C2C0
.text:0040C2C0 loc_40C2C0:                             ; CODE XREF: sub_40C2AF:loc_40C2B1↑j
.text:0040C2C0                 push    edi
.text:0040C2C1                 push    esi
.text:0040C2C2                 push    ebx
.text:0040C2C3                 sub     esp, 10h
.text:0040C2C6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C2CA                 mov     edx, [esp+1Ch+arg_4]
.text:0040C2CE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040C2D1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040C2D5                 call    fopen
.text:0040C2DA                 test    eax, eax
.text:0040C2DC                 mov     edi, eax
.text:0040C2DE                 jz      short loc_40C33D
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: sub_40C2AF+A2↓j
.text:0040C2E0                                         ; sub_40C2AF+AB↓j
.text:0040C2E0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040C2E8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040C2EF                 call    GetLogicalDriveStringsA
.text:0040C2F4                 sub     esp, 8
.text:0040C2F7                 mov     esi, eax
.text:0040C2F9                 call    GetProcessHeap
.text:0040C2FE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040C301                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040C305                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040C30D                 call    HeapAlloc
.text:0040C312                 sub     esp, 0Ch
.text:0040C315                 mov     ebx, eax
.text:0040C317                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040C31A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040C31E                 call    GetLogicalDriveStringsA
.text:0040C323                 mov     off_4100F4, ebx ; "notset"
.text:0040C329                 sub     esp, 8
.text:0040C32C                 xor     eax, eax
.text:0040C32E                 test    ebx, ebx
.text:0040C330                 setz    al
.text:0040C333                 add     esp, 10h
.text:0040C336                 pop     ebx
.text:0040C337                 dec     eax
.text:0040C338                 and     eax, edi
.text:0040C33A                 pop     esi
.text:0040C33B                 pop     edi
.text:0040C33C                 retn
.text:0040C33D ; ---------------------------------------------------------------------------
.text:0040C33D
.text:0040C33D loc_40C33D:                             ; CODE XREF: sub_40C2AF+2F↑j
.text:0040C33D                 mov     [esp+1Ch+Mode], offset sub_40C2AF ; Mode
.text:0040C345                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040C348                 call    fopen
.text:0040C34D                 test    eax, eax
.text:0040C34F                 mov     edi, eax
.text:0040C351                 jnz     short loc_40C2E0
.text:0040C353                 call    sub_40C620
.text:0040C358                 mov     edi, eax
.text:0040C35A                 jmp     short loc_40C2E0
.text:0040C35A sub_40C2AF      endp
.text:0040C35A
.text:0040C35A ; ---------------------------------------------------------------------------
.text:0040C35C                 align 10h
.text:0040C360                 sub     esp, 0Ch
.text:0040C363                 mov     eax, [esp+10h]
.text:0040C367                 test    eax, eax
.text:0040C369                 jz      short loc_40C373
.text:0040C36B                 mov     [esp], eax
.text:0040C36E                 call    fclose
.text:0040C373
.text:0040C373 loc_40C373:                             ; CODE XREF: .text:0040C369↑j
.text:0040C373                 call    GetProcessHeap
.text:0040C378                 mov     [esp], eax
.text:0040C37B                 mov     ecx, off_4100F4 ; "notset"
.text:0040C381                 mov     dword ptr [esp+4], 0
.text:0040C389                 mov     [esp+8], ecx
.text:0040C38D                 call    HeapFree
.text:0040C392                 mov     edx, off_4100F0 ; "notset"
.text:0040C398                 sub     esp, 0Ch
.text:0040C39B                 mov     eax, 1
.text:0040C3A0                 mov     off_4100F4, edx ; "notset"
.text:0040C3A6                 add     esp, 0Ch
.text:0040C3A9                 retn
.text:0040C3A9 ; ---------------------------------------------------------------------------
.text:0040C3AA                 align 10h
.text:0040C3B0                 push    edi
.text:0040C3B1                 push    esi
.text:0040C3B2                 push    ebx
.text:0040C3B3                 sub     esp, 10h
.text:0040C3B6                 mov     edi, [esp+24h]
.text:0040C3BA                 mov     [esp], edi
.text:0040C3BD                 call    strlen
.text:0040C3C2                 mov     edx, [esp+20h]
.text:0040C3C6                 mov     esi, eax
.text:0040C3C8                 mov     ebx, [edx+0Ch]
.text:0040C3CB                 nop
.text:0040C3CC                 lea     esi, [esi+0]
.text:0040C3D0
.text:0040C3D0 loc_40C3D0:                             ; CODE XREF: .text:0040C401↓j
.text:0040C3D0                 mov     [esp+4], edi
.text:0040C3D4                 mov     [esp], ebx
.text:0040C3D7                 call    strstr
.text:0040C3DC                 test    eax, eax
.text:0040C3DE                 jz      short loc_40C403
.text:0040C3E0                 cmp     eax, ebx
.text:0040C3E2                 jz      short loc_40C405
.text:0040C3E4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040C3E8                 jz      short loc_40C410
.text:0040C3EA
.text:0040C3EA loc_40C3EA:                             ; CODE XREF: .text:0040C420↓j
.text:0040C3EA                 mov     [esp], ebx
.text:0040C3ED                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040C3F5                 call    strchr
.text:0040C3FA                 test    eax, eax
.text:0040C3FC                 mov     ebx, eax
.text:0040C3FE                 jz      short loc_40C403
.text:0040C400                 inc     ebx
.text:0040C401                 jmp     short loc_40C3D0
.text:0040C403 ; ---------------------------------------------------------------------------
.text:0040C403
.text:0040C403 loc_40C403:                             ; CODE XREF: .text:0040C3DE↑j
.text:0040C403                                         ; .text:0040C3FE↑j
.text:0040C403                 xor     eax, eax
.text:0040C405
.text:0040C405 loc_40C405:                             ; CODE XREF: .text:0040C3E2↑j
.text:0040C405                                         ; .text:0040C416↓j ...
.text:0040C405                 add     esp, 10h
.text:0040C408                 pop     ebx
.text:0040C409                 pop     esi
.text:0040C40A                 pop     edi
.text:0040C40B                 retn
.text:0040C40B ; ---------------------------------------------------------------------------
.text:0040C40C                 align 10h
.text:0040C410
.text:0040C410 loc_40C410:                             ; CODE XREF: .text:0040C3E8↑j
.text:0040C410                 movzx   edx, byte ptr [esi+eax]
.text:0040C414                 test    dl, dl
.text:0040C416                 jz      short loc_40C405
.text:0040C418                 cmp     dl, 3Dh ; '='
.text:0040C41B                 jz      short loc_40C405
.text:0040C41D                 cmp     dl, 2Ch ; ','
.text:0040C420                 jnz     short loc_40C3EA
.text:0040C422                 jmp     short loc_40C405
.text:0040C422 ; ---------------------------------------------------------------------------
.text:0040C424                 align 10h
.text:0040C430 ; const char aFxstat64BadFil[]
.text:0040C430 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040C430                                         ; DATA XREF: sub_40C460+7B↓o
.text:0040C454                 align 10h
.text:0040C460
.text:0040C460 ; =============== S U B R O U T I N E =======================================
.text:0040C460
.text:0040C460
.text:0040C460 ; int __cdecl sub_40C460(HANDLE hNamedPipe, int, int)
.text:0040C460 sub_40C460      proc near               ; CODE XREF: .text:0040A989↑p
.text:0040C460
.text:0040C460 FileHandle      = dword ptr -1Ch
.text:0040C460 var_18          = dword ptr -18h
.text:0040C460 var_C           = dword ptr -0Ch
.text:0040C460 var_8           = dword ptr -8
.text:0040C460 var_4           = dword ptr -4
.text:0040C460 hNamedPipe      = dword ptr  4
.text:0040C460 arg_4           = dword ptr  8
.text:0040C460 arg_8           = dword ptr  0Ch
.text:0040C460
.text:0040C460                 sub     esp, 1Ch
.text:0040C463                 mov     edx, [esp+1Ch+arg_4]
.text:0040C467                 mov     [esp+1Ch+var_C], ebx
.text:0040C46B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040C46F                 mov     [esp+1Ch+var_8], esi
.text:0040C473                 mov     esi, [esp+1Ch+arg_8]
.text:0040C477                 test    ebx, ebx
.text:0040C479                 mov     [esp+1Ch+var_4], edi
.text:0040C47D                 jnz     short loc_40C4B7
.text:0040C47F                 test    edx, edx
.text:0040C481                 js      short loc_40C4D7
.text:0040C483                 test    esi, esi
.text:0040C485                 jz      short loc_40C4B7
.text:0040C487                 cld
.text:0040C488                 mov     eax, ebx
.text:0040C48A                 mov     edi, esi
.text:0040C48C                 mov     ecx, 18h
.text:0040C491                 rep stosd
.text:0040C493                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040C497                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040C49A                 call    _get_osfhandle
.text:0040C49F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040C4A3                 mov     ebx, [esp+1Ch+var_C]
.text:0040C4A7                 mov     esi, [esp+1Ch+var_8]
.text:0040C4AB                 mov     edi, [esp+1Ch+var_4]
.text:0040C4AF                 add     esp, 1Ch
.text:0040C4B2                 jmp     sub_4074E0
.text:0040C4B7 ; ---------------------------------------------------------------------------
.text:0040C4B7
.text:0040C4B7 loc_40C4B7:                             ; CODE XREF: sub_40C460+1D↑j
.text:0040C4B7                                         ; sub_40C460+25↑j
.text:0040C4B7                 call    _errno
.text:0040C4BC                 mov     dword ptr [eax], 16h
.text:0040C4C2
.text:0040C4C2 loc_40C4C2:                             ; CODE XREF: sub_40C460+92↓j
.text:0040C4C2                 mov     ebx, [esp+1Ch+var_C]
.text:0040C4C6                 mov     eax, 0FFFFFFFFh
.text:0040C4CB                 mov     esi, [esp+1Ch+var_8]
.text:0040C4CF                 mov     edi, [esp+1Ch+var_4]
.text:0040C4D3                 add     esp, 1Ch
.text:0040C4D6                 retn
.text:0040C4D7 ; ---------------------------------------------------------------------------
.text:0040C4D7
.text:0040C4D7 loc_40C4D7:                             ; CODE XREF: sub_40C460+21↑j
.text:0040C4D7                 mov     [esp+1Ch+var_18], edx
.text:0040C4DB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040C4E2                 call    printf
.text:0040C4E7                 call    _errno
.text:0040C4EC                 mov     dword ptr [eax], 9
.text:0040C4F2                 jmp     short loc_40C4C2
.text:0040C4F2 sub_40C460      endp
.text:0040C4F2
.text:0040C4F2 ; ---------------------------------------------------------------------------
.text:0040C4F4                 db 1Ch dup(90h)
.text:0040C510
.text:0040C510 ; =============== S U B R O U T I N E =======================================
.text:0040C510
.text:0040C510 ; Attributes: noreturn
.text:0040C510
.text:0040C510 sub_40C510      proc near               ; CODE XREF: .text:0040BC19↑p
.text:0040C510                                         ; sub_40C510↓j
.text:0040C510                 jmp     short sub_40C510
.text:0040C510 sub_40C510      endp
.text:0040C510
.text:0040C510 ; ---------------------------------------------------------------------------
.text:0040C512                 align 10h
.text:0040C520
.text:0040C520 ; =============== S U B R O U T I N E =======================================
.text:0040C520
.text:0040C520
.text:0040C520 sub_40C520      proc near               ; CODE XREF: .text:0040B975↑p
.text:0040C520
.text:0040C520 FileHandle      = dword ptr -1Ch
.text:0040C520 dwFileOffsetLow = dword ptr -18h
.text:0040C520 dwFileOffsetHigh= dword ptr -14h
.text:0040C520 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040C520 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040C520 var_8           = dword ptr -8
.text:0040C520 var_4           = dword ptr -4
.text:0040C520 arg_0           = dword ptr  4
.text:0040C520
.text:0040C520                 sub     esp, 1Ch
.text:0040C523                 mov     edx, [esp+1Ch+arg_0]
.text:0040C527                 mov     [esp+1Ch+var_4], esi
.text:0040C52B                 mov     [esp+1Ch+var_8], ebx
.text:0040C52F                 mov     ebx, [edx+10h]
.text:0040C532                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040C535                 call    _get_osfhandle
.text:0040C53A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040C53D                 mov     esi, eax
.text:0040C53F                 call    _filelengthi64
.text:0040C544                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040C548                 cdq
.text:0040C549                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040C54C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040C550                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040C558                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040C560                 call    UnlockFile
.text:0040C565                 sub     esp, 14h
.text:0040C568                 mov     ebx, [esp+1Ch+var_8]
.text:0040C56C                 mov     esi, [esp+1Ch+var_4]
.text:0040C570                 add     esp, 1Ch
.text:0040C573                 retn
.text:0040C573 sub_40C520      endp
.text:0040C573
.text:0040C573 ; ---------------------------------------------------------------------------
.text:0040C574                 align 10h
.text:0040C580
.text:0040C580 ; =============== S U B R O U T I N E =======================================
.text:0040C580
.text:0040C580
.text:0040C580 ; int __cdecl sub_40C580(int, char *Control)
.text:0040C580 sub_40C580      proc near               ; CODE XREF: .text:0040B836↑p
.text:0040C580                                         ; .text:0040B886↑p ...
.text:0040C580
.text:0040C580 Str             = dword ptr -1Ch
.text:0040C580 Val             = dword ptr -18h
.text:0040C580 var_8           = dword ptr -8
.text:0040C580 var_4           = dword ptr -4
.text:0040C580 arg_0           = dword ptr  4
.text:0040C580 Control         = dword ptr  8
.text:0040C580
.text:0040C580                 sub     esp, 1Ch
.text:0040C583                 xor     eax, eax
.text:0040C585                 mov     edx, [esp+1Ch+Control]
.text:0040C589                 mov     [esp+1Ch+var_4], esi
.text:0040C58D                 mov     esi, [esp+1Ch+arg_0]
.text:0040C591                 mov     [esp+1Ch+var_8], ebx
.text:0040C595                 mov     ebx, [esi]
.text:0040C597                 test    ebx, ebx
.text:0040C599                 jz      short loc_40C5C8
.text:0040C59B                 movzx   eax, byte ptr [edx]
.text:0040C59E                 test    al, al
.text:0040C5A0                 jz      short loc_40C5C0
.text:0040C5A2                 cmp     byte ptr [edx+1], 0
.text:0040C5A6                 jnz     short loc_40C600
.text:0040C5A8                 movzx   ecx, byte ptr [ebx]
.text:0040C5AB                 mov     edx, ebx
.text:0040C5AD                 cmp     cl, al
.text:0040C5AF                 jz      short loc_40C5F2
.text:0040C5B1                 test    cl, cl
.text:0040C5B3                 jnz     short loc_40C5D4
.text:0040C5B5                 lea     esi, [esi+0]
.text:0040C5B9                 lea     edi, [edi+0]
.text:0040C5C0
.text:0040C5C0 loc_40C5C0:                             ; CODE XREF: sub_40C580+20↑j
.text:0040C5C0                                         ; sub_40C580+74↓j
.text:0040C5C0                 mov     dword ptr [esi], 0
.text:0040C5C6
.text:0040C5C6 loc_40C5C6:                             ; CODE XREF: sub_40C580+7C↓j
.text:0040C5C6                 mov     eax, ebx
.text:0040C5C8
.text:0040C5C8 loc_40C5C8:                             ; CODE XREF: sub_40C580+19↑j
.text:0040C5C8                 mov     ebx, [esp+1Ch+var_8]
.text:0040C5CC                 mov     esi, [esp+1Ch+var_4]
.text:0040C5D0                 add     esp, 1Ch
.text:0040C5D3                 retn
.text:0040C5D4 ; ---------------------------------------------------------------------------
.text:0040C5D4
.text:0040C5D4 loc_40C5D4:                             ; CODE XREF: sub_40C580+33↑j
.text:0040C5D4                 movsx   edx, al
.text:0040C5D7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040C5DB                 lea     edx, [ebx+1]
.text:0040C5DE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040C5E1                 call    strchr
.text:0040C5E6                 lea     esi, [esi+0]
.text:0040C5E9                 lea     edi, [edi+0]
.text:0040C5F0
.text:0040C5F0 loc_40C5F0:                             ; CODE XREF: sub_40C580+8C↓j
.text:0040C5F0                 mov     edx, eax
.text:0040C5F2
.text:0040C5F2 loc_40C5F2:                             ; CODE XREF: sub_40C580+2F↑j
.text:0040C5F2                 test    edx, edx
.text:0040C5F4                 jz      short loc_40C5C0
.text:0040C5F6                 mov     byte ptr [edx], 0
.text:0040C5F9                 inc     edx
.text:0040C5FA                 mov     [esi], edx
.text:0040C5FC                 jmp     short loc_40C5C6
.text:0040C5FC ; ---------------------------------------------------------------------------
.text:0040C5FE                 align 10h
.text:0040C600
.text:0040C600 loc_40C600:                             ; CODE XREF: sub_40C580+26↑j
.text:0040C600                 mov     [esp+1Ch+Val], edx ; Control
.text:0040C604                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C607                 call    strpbrk
.text:0040C60C                 jmp     short loc_40C5F0
.text:0040C60C sub_40C580      endp
.text:0040C60C
.text:0040C60C ; ---------------------------------------------------------------------------
.text:0040C60E                 align 10h
.text:0040C610 ; const char aTmpf[]
.text:0040C610 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40C620+20↓o
.text:0040C615 ; const char aWBd[]
.text:0040C615 aWBd            db 'w+bD',0             ; DATA XREF: sub_40C620+5E↓o
.text:0040C61A                 align 10h
.text:0040C620
.text:0040C620 ; =============== S U B R O U T I N E =======================================
.text:0040C620
.text:0040C620
.text:0040C620 sub_40C620      proc near               ; CODE XREF: sub_40C2AF+A4↑p
.text:0040C620
.text:0040C620 FileHandle      = dword ptr -13Ch
.text:0040C620 Format          = dword ptr -138h
.text:0040C620 var_134         = dword ptr -134h
.text:0040C620 var_130         = dword ptr -130h
.text:0040C620 var_12C         = dword ptr -12Ch
.text:0040C620 FileName        = byte ptr -11Ch
.text:0040C620 var_8           = dword ptr -8
.text:0040C620 var_4           = dword ptr -4
.text:0040C620
.text:0040C620                 sub     esp, 13Ch
.text:0040C626                 mov     [esp+13Ch+var_8], ebx
.text:0040C62D                 lea     ebx, [esp+13Ch+FileName]
.text:0040C631                 mov     [esp+13Ch+var_4], esi
.text:0040C638                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040C640                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040C648                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040C650                 mov     [esp+13Ch+Format], 104h ; int
.text:0040C658                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040C65B                 call    sub_40C6F0
.text:0040C660                 xor     edx, edx
.text:0040C662                 test    eax, eax
.text:0040C664                 jnz     short loc_40C696
.text:0040C666                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040C669                 mov     [esp+13Ch+Format], 0 ; int
.text:0040C671                 call    sub_40CA70
.text:0040C676                 xor     edx, edx
.text:0040C678                 mov     ebx, eax
.text:0040C67A                 test    eax, eax
.text:0040C67C                 js      short loc_40C696
.text:0040C67E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040C686                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040C689                 call    _fdopen
.text:0040C68E                 test    eax, eax
.text:0040C690                 mov     esi, eax
.text:0040C692                 jz      short loc_40C6AD
.text:0040C694
.text:0040C694 loc_40C694:                             ; CODE XREF: sub_40C620+95↓j
.text:0040C694                 mov     edx, esi
.text:0040C696
.text:0040C696 loc_40C696:                             ; CODE XREF: sub_40C620+44↑j
.text:0040C696                                         ; sub_40C620+5C↑j
.text:0040C696                 mov     ebx, [esp+13Ch+var_8]
.text:0040C69D                 mov     eax, edx
.text:0040C69F                 mov     esi, [esp+13Ch+var_4]
.text:0040C6A6                 add     esp, 13Ch
.text:0040C6AC                 retn
.text:0040C6AD ; ---------------------------------------------------------------------------
.text:0040C6AD
.text:0040C6AD loc_40C6AD:                             ; CODE XREF: sub_40C620+72↑j
.text:0040C6AD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040C6B0                 call    _close
.text:0040C6B5                 jmp     short loc_40C694
.text:0040C6B5 sub_40C620      endp
.text:0040C6B5
.text:0040C6B5 ; ---------------------------------------------------------------------------
.text:0040C6B7                 align 10h
.text:0040C6C0 aFile           db 'file',0             ; DATA XREF: sub_40C6F0:loc_40C71C↓o
.text:0040C6C5 ; const char aSSxxxxxx[]
.text:0040C6C5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40C6F0+9B↓o
.text:0040C6D5 ; const char aTemp[]
.text:0040C6D5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40C6F0:loc_40C7D2↓o
.text:0040C6D5                                         ; sub_40C6F0:loc_40C812↓o ...
.text:0040C6DA ; const char aTmp[]
.text:0040C6DA aTmp            db '/tmp',0             ; DATA XREF: sub_40C6F0+12F↓o
.text:0040C6DA                                         ; sub_40C6F0+141↓o ...
.text:0040C6DF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40C6F0:loc_40C890↓o
.text:0040C6E6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40C6F0:loc_40C920↓o
.text:0040C6EA                 align 10h
.text:0040C6F0
.text:0040C6F0 ; =============== S U B R O U T I N E =======================================
.text:0040C6F0
.text:0040C6F0
.text:0040C6F0 ; int __cdecl sub_40C6F0(char *Buffer, int, char *, char *, int)
.text:0040C6F0 sub_40C6F0      proc near               ; CODE XREF: sub_40C620+3B↑p
.text:0040C6F0
.text:0040C6F0 Str             = dword ptr -1BCh
.text:0040C6F0 Format          = dword ptr -1B8h
.text:0040C6F0 var_1B4         = dword ptr -1B4h
.text:0040C6F0 var_1B0         = dword ptr -1B0h
.text:0040C6F0 var_1AC         = dword ptr -1ACh
.text:0040C6F0 var_1A8         = dword ptr -1A8h
.text:0040C6F0 var_19C         = dword ptr -19Ch
.text:0040C6F0 var_13C         = dword ptr -13Ch
.text:0040C6F0 var_DC          = dword ptr -0DCh
.text:0040C6F0 var_7C          = dword ptr -7Ch
.text:0040C6F0 Buffer          = dword ptr  4
.text:0040C6F0 arg_4           = dword ptr  8
.text:0040C6F0 arg_8           = dword ptr  0Ch
.text:0040C6F0 arg_C           = dword ptr  10h
.text:0040C6F0 arg_10          = dword ptr  14h
.text:0040C6F0
.text:0040C6F0                 push    ebp
.text:0040C6F1                 push    edi
.text:0040C6F2                 push    esi
.text:0040C6F3                 push    ebx
.text:0040C6F4                 sub     esp, 1ACh
.text:0040C6FA                 mov     eax, [esp+1BCh+arg_C]
.text:0040C701                 mov     esi, [esp+1BCh+arg_8]
.text:0040C708                 test    eax, eax
.text:0040C70A                 jz      short loc_40C71C
.text:0040C70C                 mov     edx, [esp+1BCh+arg_C]
.text:0040C713                 cmp     byte ptr [edx], 0
.text:0040C716                 jnz     loc_40C950
.text:0040C71C
.text:0040C71C loc_40C71C:                             ; CODE XREF: sub_40C6F0+1A↑j
.text:0040C71C                 mov     eax, offset aFile ; "file"
.text:0040C721                 mov     ebp, 4
.text:0040C726                 mov     [esp+1BCh+arg_C], eax
.text:0040C72D
.text:0040C72D loc_40C72D:                             ; CODE XREF: sub_40C6F0+274↓j
.text:0040C72D                                         ; sub_40C6F0+27F↓j
.text:0040C72D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040C734                 test    ebx, ebx
.text:0040C736                 jnz     loc_40C890
.text:0040C73C
.text:0040C73C loc_40C73C:                             ; CODE XREF: sub_40C6F0+21C↓j
.text:0040C73C                                         ; sub_40C6F0+224↓j ...
.text:0040C73C                 test    esi, esi
.text:0040C73E                 jz      loc_40C7D2
.text:0040C744
.text:0040C744 loc_40C744:                             ; CODE XREF: sub_40C6F0+176↓j
.text:0040C744                                         ; sub_40C6F0+19A↓j
.text:0040C744                 mov     [esp+1BCh+Str], esi ; Str
.text:0040C747                 call    strlen
.text:0040C74C                 test    eax, eax
.text:0040C74E                 mov     edx, eax
.text:0040C750                 jz      short loc_40C760
.text:0040C752                 movzx   eax, byte ptr [eax+esi-1]
.text:0040C757                 cmp     al, 2Fh ; '/'
.text:0040C759                 jz      short loc_40C7C0
.text:0040C75B                 cmp     al, 5Ch ; '\'
.text:0040C75D                 jz      short loc_40C7C0
.text:0040C75F                 nop
.text:0040C760
.text:0040C760 loc_40C760:                             ; CODE XREF: sub_40C6F0+60↑j
.text:0040C760                                         ; sub_40C6F0+D1↓j ...
.text:0040C760                 lea     edi, [ebp+edx+8]
.text:0040C764                 cmp     [esp+1BCh+arg_4], edi
.text:0040C76B                 jb      short loc_40C7A8
.text:0040C76D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040C771                 mov     ecx, [esp+1BCh+arg_C]
.text:0040C778                 mov     ebp, [esp+1BCh+Buffer]
.text:0040C77F                 mov     [esp+1BCh+var_1B0], esi
.text:0040C783                 mov     [esp+1BCh+var_1A8], ecx
.text:0040C787                 mov     [esp+1BCh+var_1B4], edx
.text:0040C78B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040C793                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040C796                 call    sprintf
.text:0040C79B                 xor     eax, eax
.text:0040C79D
.text:0040C79D loc_40C79D:                             ; CODE XREF: sub_40C6F0+C8↓j
.text:0040C79D                 add     esp, 1ACh
.text:0040C7A3                 pop     ebx
.text:0040C7A4                 pop     esi
.text:0040C7A5                 pop     edi
.text:0040C7A6                 pop     ebp
.text:0040C7A7                 retn
.text:0040C7A8 ; ---------------------------------------------------------------------------
.text:0040C7A8
.text:0040C7A8 loc_40C7A8:                             ; CODE XREF: sub_40C6F0+7B↑j
.text:0040C7A8                 call    _errno
.text:0040C7AD                 mov     dword ptr [eax], 16h
.text:0040C7B3
.text:0040C7B3 loc_40C7B3:                             ; CODE XREF: sub_40C6F0+187↓j
.text:0040C7B3                 mov     eax, 0FFFFFFFFh
.text:0040C7B8                 jmp     short loc_40C79D
.text:0040C7B8 ; ---------------------------------------------------------------------------
.text:0040C7BA                 align 10h
.text:0040C7C0
.text:0040C7C0 loc_40C7C0:                             ; CODE XREF: sub_40C6F0+69↑j
.text:0040C7C0                                         ; sub_40C6F0+6D↑j ...
.text:0040C7C0                 dec     edx
.text:0040C7C1                 jz      short loc_40C760
.text:0040C7C3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040C7C8                 cmp     al, 2Fh ; '/'
.text:0040C7CA                 jz      short loc_40C7C0
.text:0040C7CC                 cmp     al, 5Ch ; '\'
.text:0040C7CE                 jz      short loc_40C7C0
.text:0040C7D0                 jmp     short loc_40C760
.text:0040C7D2 ; ---------------------------------------------------------------------------
.text:0040C7D2
.text:0040C7D2 loc_40C7D2:                             ; CODE XREF: sub_40C6F0+4E↑j
.text:0040C7D2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C7D9                 lea     esi, [esp+1BCh+var_13C]
.text:0040C7E0                 call    getenv
.text:0040C7E5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040C7E9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040C7ED                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C7F4                 call    sub_405DB0
.text:0040C7F9                 test    eax, eax
.text:0040C7FB                 jnz     short loc_40C812
.text:0040C7FD                 mov     edi, [esp+1BCh+var_13C]
.text:0040C804                 and     edi, 0F000h
.text:0040C80A                 cmp     edi, 4000h
.text:0040C810                 jz      short loc_40C87C
.text:0040C812
.text:0040C812 loc_40C812:                             ; CODE XREF: sub_40C6F0+10B↑j
.text:0040C812                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C819                 call    getenv
.text:0040C81E                 cld
.text:0040C81F                 mov     edx, offset aTmp ; "/tmp"
.text:0040C824                 mov     esi, eax
.text:0040C826                 mov     ecx, 5
.text:0040C82B                 mov     edi, edx
.text:0040C82D                 repe cmpsb
.text:0040C82F                 jz      short loc_40C86C
.text:0040C831                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040C839                 lea     ecx, [esp+1BCh+var_19C]
.text:0040C83D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040C841                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C848                 call    sub_405DB0
.text:0040C84D                 test    eax, eax
.text:0040C84F                 jnz     short loc_40C86C
.text:0040C851                 mov     ebx, [esp+1BCh+var_19C]
.text:0040C855                 mov     esi, offset aTmp ; "/tmp"
.text:0040C85A                 and     ebx, 0F000h
.text:0040C860                 cmp     ebx, 4000h
.text:0040C866                 jz      loc_40C744
.text:0040C86C
.text:0040C86C loc_40C86C:                             ; CODE XREF: sub_40C6F0+13F↑j
.text:0040C86C                                         ; sub_40C6F0+15F↑j
.text:0040C86C                 call    _errno
.text:0040C871                 mov     dword ptr [eax], 2
.text:0040C877                 jmp     loc_40C7B3
.text:0040C87C ; ---------------------------------------------------------------------------
.text:0040C87C
.text:0040C87C loc_40C87C:                             ; CODE XREF: sub_40C6F0+120↑j
.text:0040C87C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C883                 call    getenv
.text:0040C888                 mov     esi, eax
.text:0040C88A                 jmp     loc_40C744
.text:0040C88A ; ---------------------------------------------------------------------------
.text:0040C88F                 align 10h
.text:0040C890
.text:0040C890 loc_40C890:                             ; CODE XREF: sub_40C6F0+46↑j
.text:0040C890                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040C897                 call    sub_40CF80
.text:0040C89C                 test    eax, eax
.text:0040C89E                 mov     ebx, eax
.text:0040C8A0                 jz      short loc_40C920
.text:0040C8A2
.text:0040C8A2 loc_40C8A2:                             ; CODE XREF: sub_40C6F0+240↓j
.text:0040C8A2                                         ; sub_40C6F0+256↓j
.text:0040C8A2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040C8A6                 lea     edi, [esp+1BCh+var_7C]
.text:0040C8AD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040C8B1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C8B8                 call    sub_405DB0
.text:0040C8BD                 test    eax, eax
.text:0040C8BF                 jnz     short loc_40C8D6
.text:0040C8C1                 mov     edx, [esp+1BCh+var_7C]
.text:0040C8C8                 and     edx, 0F000h
.text:0040C8CE                 cmp     edx, 4000h
.text:0040C8D4                 jz      short loc_40C919
.text:0040C8D6
.text:0040C8D6 loc_40C8D6:                             ; CODE XREF: sub_40C6F0+1CF↑j
.text:0040C8D6                                         ; sub_40C6F0+25C↓j
.text:0040C8D6                 test    esi, esi
.text:0040C8D8                 jz      short loc_40C912
.text:0040C8DA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040C8DE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040C8E5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040C8E9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040C8F0                 call    sub_405DB0
.text:0040C8F5                 test    eax, eax
.text:0040C8F7                 jnz     short loc_40C912
.text:0040C8F9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040C900                 and     ebx, 0F000h
.text:0040C906                 cmp     ebx, 4000h
.text:0040C90C                 jz      loc_40C73C
.text:0040C912
.text:0040C912 loc_40C912:                             ; CODE XREF: sub_40C6F0+1E8↑j
.text:0040C912                                         ; sub_40C6F0+207↑j
.text:0040C912                 xor     esi, esi
.text:0040C914                 jmp     loc_40C73C
.text:0040C919 ; ---------------------------------------------------------------------------
.text:0040C919
.text:0040C919 loc_40C919:                             ; CODE XREF: sub_40C6F0+1E4↑j
.text:0040C919                 mov     esi, ebx
.text:0040C91B                 jmp     loc_40C73C
.text:0040C920 ; ---------------------------------------------------------------------------
.text:0040C920
.text:0040C920 loc_40C920:                             ; CODE XREF: sub_40C6F0+1B0↑j
.text:0040C920                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040C927                 call    sub_40CF80
.text:0040C92C                 test    eax, eax
.text:0040C92E                 mov     ebx, eax
.text:0040C930                 jnz     loc_40C8A2
.text:0040C936                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040C93D                 call    sub_40CF80
.text:0040C942                 test    eax, eax
.text:0040C944                 mov     ebx, eax
.text:0040C946                 jnz     loc_40C8A2
.text:0040C94C                 jmp     short loc_40C8D6
.text:0040C94C ; ---------------------------------------------------------------------------
.text:0040C94E                 align 10h
.text:0040C950
.text:0040C950 loc_40C950:                             ; CODE XREF: sub_40C6F0+26↑j
.text:0040C950                 mov     ecx, [esp+1BCh+arg_C]
.text:0040C957                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040C95A                 call    strlen
.text:0040C95F                 cmp     eax, 5
.text:0040C962                 mov     ebp, eax
.text:0040C964                 jbe     loc_40C72D
.text:0040C96A                 mov     ebp, 5
.text:0040C96F                 jmp     loc_40C72D
.text:0040C96F sub_40C6F0      endp
.text:0040C96F
.text:0040C96F ; ---------------------------------------------------------------------------
.text:0040C974                 align 10h
.text:0040C980 byte_40C980     db 61h                  ; DATA XREF: sub_40CA70+DC↓r
.text:0040C980                                         ; sub_40CA70+122↓r ...
.text:0040C981 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040C9BF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40CA70+39↓o
.text:0040C9C6                 align 20h
.text:0040C9E0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040C9E0                                         ; DATA XREF: sub_40CA70:loc_40CCE8↓o
.text:0040C9FF                 align 10h
.text:0040CA00 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040CA00                                         ; DATA XREF: sub_40CA70+405↓o
.text:0040CA2B                 align 20h
.text:0040CA40 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040CA40                                         ; DATA XREF: sub_40CA70+40D↓o
.text:0040CA63                 align 10h
.text:0040CA70
.text:0040CA70 ; =============== S U B R O U T I N E =======================================
.text:0040CA70
.text:0040CA70
.text:0040CA70 ; int __cdecl sub_40CA70(char *FileName, int)
.text:0040CA70 sub_40CA70      proc near               ; CODE XREF: sub_40C620+51↑p
.text:0040CA70
.text:0040CA70 Str             = dword ptr -9Ch
.text:0040CA70 OpenFlag        = dword ptr -98h
.text:0040CA70 var_94          = dword ptr -94h
.text:0040CA70 var_90          = dword ptr -90h
.text:0040CA70 var_8C          = dword ptr -8Ch
.text:0040CA70 var_88          = dword ptr -88h
.text:0040CA70 var_84          = dword ptr -84h
.text:0040CA70 var_80          = dword ptr -80h
.text:0040CA70 var_7C          = dword ptr -7Ch
.text:0040CA70 FileName        = dword ptr  4
.text:0040CA70 arg_4           = dword ptr  8
.text:0040CA70
.text:0040CA70                 push    ebp
.text:0040CA71                 push    edi
.text:0040CA72                 push    esi
.text:0040CA73                 push    ebx
.text:0040CA74                 sub     esp, 8Ch
.text:0040CA7A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040CA82                 call    _errno
.text:0040CA87                 mov     edx, [eax]
.text:0040CA89                 mov     [esp+9Ch+var_8C], edx
.text:0040CA8D                 mov     edx, [esp+9Ch+FileName]
.text:0040CA94                 mov     [esp+9Ch+Str], edx ; Str
.text:0040CA97                 call    strlen
.text:0040CA9C                 cmp     eax, 5
.text:0040CA9F                 jle     short loc_40CABD
.text:0040CAA1                 cld
.text:0040CAA2                 mov     ecx, [esp+9Ch+FileName]
.text:0040CAA9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040CAAE                 lea     esi, [eax+ecx-6]
.text:0040CAB2                 mov     ecx, 7
.text:0040CAB7                 mov     ebp, esi
.text:0040CAB9                 repe cmpsb
.text:0040CABB                 jz      short loc_40CAD8
.text:0040CABD
.text:0040CABD loc_40CABD:                             ; CODE XREF: sub_40CA70+2F↑j
.text:0040CABD                 call    _errno
.text:0040CAC2                 mov     dword ptr [eax], 16h
.text:0040CAC8
.text:0040CAC8 loc_40CAC8:                             ; CODE XREF: sub_40CA70+295↓j
.text:0040CAC8                                         ; sub_40CA70+2D8↓j ...
.text:0040CAC8                 mov     eax, 0FFFFFFFFh
.text:0040CACD
.text:0040CACD loc_40CACD:                             ; CODE XREF: sub_40CA70+2EF↓j
.text:0040CACD                                         ; sub_40CA70+332↓j
.text:0040CACD                 add     esp, 8Ch
.text:0040CAD3                 pop     ebx
.text:0040CAD4                 pop     esi
.text:0040CAD5                 pop     edi
.text:0040CAD6                 pop     ebp
.text:0040CAD7                 retn
.text:0040CAD8 ; ---------------------------------------------------------------------------
.text:0040CAD8
.text:0040CAD8 loc_40CAD8:                             ; CODE XREF: sub_40CA70+4B↑j
.text:0040CAD8                 mov     ecx, ds:dword_411BD4
.text:0040CADE                 mov     edi, ds:dword_411BD0
.text:0040CAE4                 mov     eax, ecx
.text:0040CAE6                 or      eax, edi
.text:0040CAE8                 jz      loc_40CE23
.text:0040CAEE
.text:0040CAEE loc_40CAEE:                             ; CODE XREF: sub_40CA70+3F8↓j
.text:0040CAEE                 rdtsc
.text:0040CAF0                 mov     edi, edx
.text:0040CAF2                 mov     esi, eax
.text:0040CAF4                 call    _getpid
.text:0040CAF9                 mov     ebx, eax
.text:0040CAFB                 mov     edx, esi
.text:0040CAFD                 sar     ebx, 1Fh
.text:0040CB00                 xor     edx, eax
.text:0040CB02                 mov     ecx, edi
.text:0040CB04                 xor     ecx, ebx
.text:0040CB06                 mov     ebx, edx
.text:0040CB08                 mov     esi, ecx
.text:0040CB0A                 add     ebx, ds:dword_411BD0
.text:0040CB10                 adc     esi, ds:dword_411BD4
.text:0040CB16                 xor     edi, edi
.text:0040CB18                 mov     ds:dword_411BD0, ebx
.text:0040CB1E                 mov     ds:dword_411BD4, esi
.text:0040CB24                 lea     esi, [esi+0]
.text:0040CB2A                 lea     edi, [edi+0]
.text:0040CB30
.text:0040CB30 loc_40CB30:                             ; CODE XREF: sub_40CA70+2C7↓j
.text:0040CB30                 mov     [esp+9Ch+Str], ebx
.text:0040CB33                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CB37                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CB3F                 mov     [esp+9Ch+var_90], 0
.text:0040CB47                 call    sub_40EB90
.text:0040CB4C                 movzx   ecx, ds:byte_40C980[eax]
.text:0040CB53                 mov     [ebp+0], cl
.text:0040CB56                 mov     [esp+9Ch+Str], ebx
.text:0040CB59                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CB5D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CB65                 mov     [esp+9Ch+var_90], 0
.text:0040CB6D                 call    sub_40EA70
.text:0040CB72                 mov     [esp+9Ch+Str], eax
.text:0040CB75                 mov     ebx, eax
.text:0040CB77                 mov     esi, edx
.text:0040CB79                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CB81                 mov     [esp+9Ch+var_90], 0
.text:0040CB89                 mov     [esp+9Ch+OpenFlag], edx
.text:0040CB8D                 call    sub_40EB90
.text:0040CB92                 movzx   edx, ds:byte_40C980[eax]
.text:0040CB99                 mov     [ebp+1], dl
.text:0040CB9C                 mov     [esp+9Ch+Str], ebx
.text:0040CB9F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CBA3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CBAB                 mov     [esp+9Ch+var_90], 0
.text:0040CBB3                 call    sub_40EA70
.text:0040CBB8                 mov     [esp+9Ch+Str], eax
.text:0040CBBB                 mov     ebx, eax
.text:0040CBBD                 mov     esi, edx
.text:0040CBBF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CBC7                 mov     [esp+9Ch+var_90], 0
.text:0040CBCF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040CBD3                 call    sub_40EB90
.text:0040CBD8                 movzx   ecx, ds:byte_40C980[eax]
.text:0040CBDF                 mov     [ebp+2], cl
.text:0040CBE2                 mov     [esp+9Ch+Str], ebx
.text:0040CBE5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CBE9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CBF1                 mov     [esp+9Ch+var_90], 0
.text:0040CBF9                 call    sub_40EA70
.text:0040CBFE                 mov     [esp+9Ch+Str], eax
.text:0040CC01                 mov     ebx, eax
.text:0040CC03                 mov     esi, edx
.text:0040CC05                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CC0D                 mov     [esp+9Ch+var_90], 0
.text:0040CC15                 mov     [esp+9Ch+OpenFlag], edx
.text:0040CC19                 call    sub_40EB90
.text:0040CC1E                 movzx   edx, ds:byte_40C980[eax]
.text:0040CC25                 mov     [ebp+3], dl
.text:0040CC28                 mov     [esp+9Ch+Str], ebx
.text:0040CC2B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CC2F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CC37                 mov     [esp+9Ch+var_90], 0
.text:0040CC3F                 call    sub_40EA70
.text:0040CC44                 mov     [esp+9Ch+Str], eax
.text:0040CC47                 mov     ebx, eax
.text:0040CC49                 mov     esi, edx
.text:0040CC4B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CC53                 mov     [esp+9Ch+var_90], 0
.text:0040CC5B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040CC5F                 call    sub_40EB90
.text:0040CC64                 movzx   ecx, ds:byte_40C980[eax]
.text:0040CC6B                 mov     [ebp+4], cl
.text:0040CC6E                 mov     [esp+9Ch+Str], ebx
.text:0040CC71                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CC79                 mov     [esp+9Ch+var_90], 0
.text:0040CC81                 mov     [esp+9Ch+OpenFlag], esi
.text:0040CC85                 call    sub_40EA70
.text:0040CC8A                 mov     [esp+9Ch+Str], eax
.text:0040CC8D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040CC95                 mov     [esp+9Ch+var_90], 0
.text:0040CC9D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040CCA1                 call    sub_40EB90
.text:0040CCA6                 movzx   ebx, ds:byte_40C980[eax]
.text:0040CCAD                 mov     [ebp+5], bl
.text:0040CCB0                 cmp     [esp+9Ch+arg_4], 1
.text:0040CCB8                 jz      loc_40CE07
.text:0040CCBE                 cmp     [esp+9Ch+arg_4], 1
.text:0040CCC6                 jle     loc_40CDD0
.text:0040CCCC                 cmp     [esp+9Ch+arg_4], 2
.text:0040CCD4                 jz      loc_40CDA7
.text:0040CCDA                 cmp     [esp+9Ch+arg_4], 3
.text:0040CCE2                 jz      loc_40CD64
.text:0040CCE8
.text:0040CCE8 loc_40CCE8:                             ; CODE XREF: sub_40CA70+369↓j
.text:0040CCE8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040CCED                 test    ebx, ebx
.text:0040CCEF                 jnz     loc_40CE6D
.text:0040CCF5
.text:0040CCF5 loc_40CCF5:                             ; CODE XREF: sub_40CA70+354↓j
.text:0040CCF5                 mov     eax, [esp+9Ch+var_88]
.text:0040CCF9                 test    eax, eax
.text:0040CCFB                 jns     short loc_40CD50
.text:0040CCFD                 call    _errno
.text:0040CD02                 cmp     dword ptr [eax], 11h
.text:0040CD05                 jnz     loc_40CAC8
.text:0040CD0B
.text:0040CD0B loc_40CD0B:                             ; CODE XREF: sub_40CA70+315↓j
.text:0040CD0B                 mov     edx, ds:dword_411BD0
.text:0040CD11                 mov     ecx, ds:dword_411BD4
.text:0040CD17                 add     edx, 1E61h
.text:0040CD1D                 adc     ecx, 0
.text:0040CD20                 mov     ebx, edx
.text:0040CD22                 inc     edi
.text:0040CD23                 mov     ds:dword_411BD0, edx
.text:0040CD29                 cmp     edi, 3A2F8h
.text:0040CD2F                 mov     esi, ecx
.text:0040CD31                 mov     ds:dword_411BD4, ecx
.text:0040CD37                 jb      loc_40CB30
.text:0040CD3D                 call    _errno
.text:0040CD42                 mov     dword ptr [eax], 11h
.text:0040CD48                 jmp     loc_40CAC8
.text:0040CD48 ; ---------------------------------------------------------------------------
.text:0040CD4D                 align 10h
.text:0040CD50
.text:0040CD50 loc_40CD50:                             ; CODE XREF: sub_40CA70+28B↑j
.text:0040CD50                 call    _errno
.text:0040CD55                 mov     esi, [esp+9Ch+var_8C]
.text:0040CD59                 mov     [eax], esi
.text:0040CD5B                 mov     eax, [esp+9Ch+var_88]
.text:0040CD5F                 jmp     loc_40CACD
.text:0040CD64 ; ---------------------------------------------------------------------------
.text:0040CD64
.text:0040CD64 loc_40CD64:                             ; CODE XREF: sub_40CA70+272↑j
.text:0040CD64                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040CD6B                 mov     ecx, [esp+9Ch+FileName]
.text:0040CD72                 lea     esi, [esp+9Ch+var_7C]
.text:0040CD76                 mov     [esp+9Ch+var_94], esi ; int
.text:0040CD7A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040CD7E                 call    sub_406160
.text:0040CD83                 test    eax, eax
.text:0040CD85                 jns     short loc_40CD0B
.text:0040CD87                 call    _errno
.text:0040CD8C                 cmp     dword ptr [eax], 2
.text:0040CD8F                 jnz     loc_40CAC8
.text:0040CD95                 call    _errno
.text:0040CD9A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040CD9E                 mov     [eax], ebx
.text:0040CDA0                 xor     eax, eax
.text:0040CDA2                 jmp     loc_40CACD
.text:0040CDA7 ; ---------------------------------------------------------------------------
.text:0040CDA7
.text:0040CDA7 loc_40CDA7:                             ; CODE XREF: sub_40CA70+264↑j
.text:0040CDA7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040CDAF                 mov     edx, [esp+9Ch+FileName]
.text:0040CDB6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040CDB9                 call    sub_40CEA0
.text:0040CDBE                 mov     esi, esi
.text:0040CDC0
.text:0040CDC0 loc_40CDC0:                             ; CODE XREF: sub_40CA70+395↓j
.text:0040CDC0                 mov     [esp+9Ch+var_88], eax
.text:0040CDC4                 jmp     loc_40CCF5
.text:0040CDC4 ; ---------------------------------------------------------------------------
.text:0040CDC9                 align 10h
.text:0040CDD0
.text:0040CDD0 loc_40CDD0:                             ; CODE XREF: sub_40CA70+256↑j
.text:0040CDD0                 mov     eax, [esp+9Ch+arg_4]
.text:0040CDD7                 test    eax, eax
.text:0040CDD9                 jnz     loc_40CCE8
.text:0040CDDF                 mov     [esp+9Ch+var_94], 180h
.text:0040CDE7                 mov     esi, [esp+9Ch+FileName]
.text:0040CDEE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040CDF6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040CDF9                 lea     esi, [esi+0]
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40CA70+3B1↓j
.text:0040CE00                 call    _open
.text:0040CE05                 jmp     short loc_40CDC0
.text:0040CE07 ; ---------------------------------------------------------------------------
.text:0040CE07
.text:0040CE07 loc_40CE07:                             ; CODE XREF: sub_40CA70+248↑j
.text:0040CE07                 mov     [esp+9Ch+var_94], 180h
.text:0040CE0F                 mov     ebx, [esp+9Ch+FileName]
.text:0040CE16                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040CE1E                 mov     [esp+9Ch+Str], ebx
.text:0040CE21                 jmp     short loc_40CE00
.text:0040CE23 ; ---------------------------------------------------------------------------
.text:0040CE23
.text:0040CE23 loc_40CE23:                             ; CODE XREF: sub_40CA70+78↑j
.text:0040CE23                 mov     [esp+9Ch+OpenFlag], 0
.text:0040CE2B                 lea     ebx, [esp+9Ch+var_84]
.text:0040CE2F                 mov     [esp+9Ch+Str], ebx
.text:0040CE32                 call    sub_40CF20
.text:0040CE37                 mov     edi, [esp+9Ch+var_80]
.text:0040CE3B                 mov     edx, [esp+9Ch+var_84]
.text:0040CE3F                 mov     ecx, edi
.text:0040CE41                 mov     ebx, edi
.text:0040CE43                 shl     ecx, 10h
.text:0040CE46                 sar     ebx, 1Fh
.text:0040CE49                 shld    ebx, edi, 10h
.text:0040CE4D                 mov     esi, edx
.text:0040CE4F                 mov     edi, edx
.text:0040CE51                 mov     edx, ecx
.text:0040CE53                 sar     edi, 1Fh
.text:0040CE56                 xor     edx, esi
.text:0040CE58                 mov     ds:dword_411BD0, edx
.text:0040CE5E                 mov     esi, ebx
.text:0040CE60                 xor     esi, edi
.text:0040CE62                 mov     ds:dword_411BD4, esi
.text:0040CE68                 jmp     loc_40CAEE
.text:0040CE6D ; ---------------------------------------------------------------------------
.text:0040CE6D
.text:0040CE6D loc_40CE6D:                             ; CODE XREF: sub_40CA70+27F↑j
.text:0040CE6D                 mov     [esp+9Ch+var_94], 151h
.text:0040CE75                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040CE7D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040CE84                 call    _assert
.text:0040CE84 sub_40CA70      endp
.text:0040CE84
.text:0040CE84 ; ---------------------------------------------------------------------------
.text:0040CE89                 align 20h
.text:0040CEA0
.text:0040CEA0 ; =============== S U B R O U T I N E =======================================
.text:0040CEA0
.text:0040CEA0
.text:0040CEA0 ; int __cdecl sub_40CEA0(LPCSTR, int AccessMode)
.text:0040CEA0 sub_40CEA0      proc near               ; CODE XREF: sub_40CA70+349↑p
.text:0040CEA0
.text:0040CEA0 lpPathName      = dword ptr -1Ch
.text:0040CEA0 lpSecurityAttributes= dword ptr -18h
.text:0040CEA0 var_8           = dword ptr -8
.text:0040CEA0 var_4           = dword ptr -4
.text:0040CEA0 arg_0           = dword ptr  4
.text:0040CEA0 AccessMode      = dword ptr  8
.text:0040CEA0
.text:0040CEA0                 sub     esp, 1Ch
.text:0040CEA3                 mov     [esp+1Ch+var_8], ebx
.text:0040CEA7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CEAB                 mov     [esp+1Ch+var_4], esi
.text:0040CEAF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040CEB3                 test    ebx, ebx
.text:0040CEB5                 jz      short loc_40CF05
.text:0040CEB7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CEBF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040CEC2                 call    CreateDirectoryA
.text:0040CEC7                 sub     esp, 8
.text:0040CECA                 test    eax, eax
.text:0040CECC                 jz      short loc_40CEE6
.text:0040CECE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040CED2                 mov     esi, [esp+1Ch+var_4]
.text:0040CED6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040CEDA                 mov     ebx, [esp+1Ch+var_8]
.text:0040CEDE                 add     esp, 1Ch
.text:0040CEE1                 jmp     _chmod
.text:0040CEE6 ; ---------------------------------------------------------------------------
.text:0040CEE6
.text:0040CEE6 loc_40CEE6:                             ; CODE XREF: sub_40CEA0+2C↑j
.text:0040CEE6                 call    sub_407190
.text:0040CEEB                 mov     esi, eax
.text:0040CEED                 call    _errno
.text:0040CEF2                 mov     [eax], esi
.text:0040CEF4
.text:0040CEF4 loc_40CEF4:                             ; CODE XREF: sub_40CEA0+70↓j
.text:0040CEF4                 mov     ebx, [esp+1Ch+var_8]
.text:0040CEF8                 mov     eax, 0FFFFFFFFh
.text:0040CEFD                 mov     esi, [esp+1Ch+var_4]
.text:0040CF01                 add     esp, 1Ch
.text:0040CF04                 retn
.text:0040CF05 ; ---------------------------------------------------------------------------
.text:0040CF05
.text:0040CF05 loc_40CF05:                             ; CODE XREF: sub_40CEA0+15↑j
.text:0040CF05                 call    _errno
.text:0040CF0A                 mov     dword ptr [eax], 16h
.text:0040CF10                 jmp     short loc_40CEF4
.text:0040CF10 sub_40CEA0      endp
.text:0040CF10
.text:0040CF10 ; ---------------------------------------------------------------------------
.text:0040CF12                 align 10h
.text:0040CF20
.text:0040CF20 ; =============== S U B R O U T I N E =======================================
.text:0040CF20
.text:0040CF20
.text:0040CF20 sub_40CF20      proc near               ; CODE XREF: sub_40CA70+3C2↑p
.text:0040CF20
.text:0040CF20 var_1C          = dword ptr -1Ch
.text:0040CF20 var_18          = dword ptr -18h
.text:0040CF20 var_C           = dword ptr -0Ch
.text:0040CF20 var_8           = dword ptr -8
.text:0040CF20 var_4           = dword ptr -4
.text:0040CF20 arg_0           = dword ptr  4
.text:0040CF20 arg_4           = dword ptr  8
.text:0040CF20
.text:0040CF20                 sub     esp, 1Ch
.text:0040CF23                 mov     edx, [esp+1Ch+arg_4]
.text:0040CF27                 mov     [esp+1Ch+var_4], ebx
.text:0040CF2B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CF2F                 mov     [esp+1Ch+var_18], edx
.text:0040CF33                 lea     edx, [esp+1Ch+var_C]
.text:0040CF37                 mov     [esp+1Ch+var_1C], edx
.text:0040CF3A                 call    sub_40CFA0
.text:0040CF3F                 test    eax, eax
.text:0040CF41                 mov     edx, 0FFFFFFFFh
.text:0040CF46                 jnz     short loc_40CF6A
.text:0040CF48                 mov     ecx, [esp+1Ch+var_C]
.text:0040CF4C                 mov     edx, 10624DD3h
.text:0040CF51                 mov     [ebx], ecx
.text:0040CF53                 mov     ecx, [esp+1Ch+var_8]
.text:0040CF57                 mov     eax, ecx
.text:0040CF59                 imul    edx
.text:0040CF5B                 mov     eax, ecx
.text:0040CF5D                 sar     eax, 1Fh
.text:0040CF60                 sar     edx, 6
.text:0040CF63                 sub     edx, eax
.text:0040CF65                 mov     [ebx+4], edx
.text:0040CF68                 xor     edx, edx
.text:0040CF6A
.text:0040CF6A loc_40CF6A:                             ; CODE XREF: sub_40CF20+26↑j
.text:0040CF6A                 mov     ebx, [esp+1Ch+var_4]
.text:0040CF6E                 mov     eax, edx
.text:0040CF70                 add     esp, 1Ch
.text:0040CF73                 retn
.text:0040CF73 sub_40CF20      endp
.text:0040CF73
.text:0040CF73 ; ---------------------------------------------------------------------------
.text:0040CF74                 align 10h
.text:0040CF80
.text:0040CF80 ; =============== S U B R O U T I N E =======================================
.text:0040CF80
.text:0040CF80
.text:0040CF80 sub_40CF80      proc near               ; CODE XREF: sub_40C6F0+1A7↑p
.text:0040CF80                                         ; sub_40C6F0+237↑p ...
.text:0040CF80                 mov     edx, ds:dword_411BE0
.text:0040CF86                 test    edx, edx
.text:0040CF88                 jnz     short loc_40CF90
.text:0040CF8A                 jmp     getenv
.text:0040CF8A ; ---------------------------------------------------------------------------
.text:0040CF8F                 align 10h
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: sub_40CF80+8↑j
.text:0040CF90                 xor     eax, eax
.text:0040CF92                 retn
.text:0040CF92 sub_40CF80      endp
.text:0040CF92
.text:0040CF92 ; ---------------------------------------------------------------------------
.text:0040CF93                 align 10h
.text:0040CFA0
.text:0040CFA0 ; =============== S U B R O U T I N E =======================================
.text:0040CFA0
.text:0040CFA0
.text:0040CFA0 sub_40CFA0      proc near               ; CODE XREF: sub_40CF20+1A↑p
.text:0040CFA0
.text:0040CFA0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040CFA0 var_D8          = dword ptr -0D8h
.text:0040CFA0 var_D4          = dword ptr -0D4h
.text:0040CFA0 var_D0          = dword ptr -0D0h
.text:0040CFA0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040CFA0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040CFA0 arg_0           = dword ptr  4
.text:0040CFA0 arg_4           = dword ptr  8
.text:0040CFA0
.text:0040CFA0                 push    edi
.text:0040CFA1                 push    esi
.text:0040CFA2                 push    ebx
.text:0040CFA3                 sub     esp, 0D0h
.text:0040CFA9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040CFB0                 mov     edi, [esp+0DCh+arg_0]
.text:0040CFB7                 test    ebx, ebx
.text:0040CFB9                 jz      short loc_40CFE4
.text:0040CFBB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040CFBF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040CFC2                 call    GetTimeZoneInformation
.text:0040CFC7                 sub     esp, 4
.text:0040CFCA                 cmp     eax, 0FFFFFFFFh
.text:0040CFCD                 jz      loc_40D065
.text:0040CFD3                 xor     ecx, ecx
.text:0040CFD5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040CFD9                 cmp     eax, 2
.text:0040CFDC                 setz    cl
.text:0040CFDF                 mov     [ebx], esi
.text:0040CFE1                 mov     [ebx+4], ecx
.text:0040CFE4
.text:0040CFE4 loc_40CFE4:                             ; CODE XREF: sub_40CFA0+19↑j
.text:0040CFE4                                         ; sub_40CFA0+E0↓j
.text:0040CFE4                 test    edi, edi
.text:0040CFE6                 jz      short loc_40D059
.text:0040CFE8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040CFEC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040CFEF                 call    GetSystemTimeAsFileTime
.text:0040CFF4                 sub     esp, 4
.text:0040CFF7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040CFFB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D003                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040D007                 mov     [esp+0DCh+var_D0], 0
.text:0040D00F                 add     ebx, 2AC18000h
.text:0040D015                 adc     esi, 0FE624E21h
.text:0040D01B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040D01F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D022                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040D026                 mov     [esp+0DCh+var_D8], esi
.text:0040D02A                 call    sub_40EA70
.text:0040D02F                 mov     [edi], eax
.text:0040D031                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D034                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D03C                 mov     [esp+0DCh+var_D0], 0
.text:0040D044                 mov     [esp+0DCh+var_D8], esi
.text:0040D048                 call    sub_40EB90
.text:0040D04D                 lea     ebx, [eax+eax*4]
.text:0040D050                 lea     edx, [ebx+ebx*4]
.text:0040D053                 shl     edx, 2
.text:0040D056                 mov     [edi+4], edx
.text:0040D059
.text:0040D059 loc_40D059:                             ; CODE XREF: sub_40CFA0+46↑j
.text:0040D059                 add     esp, 0D0h
.text:0040D05F                 xor     eax, eax
.text:0040D061                 pop     ebx
.text:0040D062                 pop     esi
.text:0040D063                 pop     edi
.text:0040D064                 retn
.text:0040D065 ; ---------------------------------------------------------------------------
.text:0040D065
.text:0040D065 loc_40D065:                             ; CODE XREF: sub_40CFA0+2D↑j
.text:0040D065                 mov     dword ptr [ebx], 0
.text:0040D06B                 mov     dword ptr [ebx+4], 0
.text:0040D072                 call    sub_407190
.text:0040D077                 mov     esi, eax
.text:0040D079                 call    _errno
.text:0040D07E                 mov     [eax], esi
.text:0040D080                 jmp     loc_40CFE4
.text:0040D080 sub_40CFA0      endp
.text:0040D080
.text:0040D080 ; ---------------------------------------------------------------------------
.text:0040D085                 align 10h
.text:0040D090                 sub     esp, 0Ch
.text:0040D093                 mov     [esp+4], ebx
.text:0040D097                 mov     [esp+8], esi
.text:0040D09B                 xor     esi, esi
.text:0040D09D                 call    sub_40D0F0
.text:0040D0A2                 mov     ebx, eax
.text:0040D0A4                 call    sub_408D40
.text:0040D0A9                 cmp     ebx, eax
.text:0040D0AB                 jz      short loc_40D0C4
.text:0040D0AD
.text:0040D0AD loc_40D0AD:                             ; CODE XREF: .text:0040D0D2↓j
.text:0040D0AD                 mov     esi, 1
.text:0040D0B2
.text:0040D0B2 loc_40D0B2:                             ; CODE XREF: .text:0040D0D4↓j
.text:0040D0B2                 mov     ds:dword_411BE0, esi
.text:0040D0B8                 mov     ebx, [esp+4]
.text:0040D0BC                 mov     esi, [esp+8]
.text:0040D0C0                 add     esp, 0Ch
.text:0040D0C3                 retn
.text:0040D0C4 ; ---------------------------------------------------------------------------
.text:0040D0C4
.text:0040D0C4 loc_40D0C4:                             ; CODE XREF: .text:0040D0AB↑j
.text:0040D0C4                 call    sub_40D0E0
.text:0040D0C9                 mov     ebx, eax
.text:0040D0CB                 call    sub_408D30
.text:0040D0D0                 cmp     ebx, eax
.text:0040D0D2                 jnz     short loc_40D0AD
.text:0040D0D4                 jmp     short loc_40D0B2
.text:0040D0D4 ; ---------------------------------------------------------------------------
.text:0040D0D6                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0
.text:0040D0E0 sub_40D0E0      proc near               ; CODE XREF: .text:loc_40D0C4↑p
.text:0040D0E0                 xor     eax, eax
.text:0040D0E2                 retn
.text:0040D0E2 sub_40D0E0      endp
.text:0040D0E2
.text:0040D0E2 ; ---------------------------------------------------------------------------
.text:0040D0E3                 align 10h
.text:0040D0F0
.text:0040D0F0 ; =============== S U B R O U T I N E =======================================
.text:0040D0F0
.text:0040D0F0
.text:0040D0F0 sub_40D0F0      proc near               ; CODE XREF: .text:0040D09D↑p
.text:0040D0F0                 xor     eax, eax
.text:0040D0F2                 retn
.text:0040D0F2 sub_40D0F0      endp
.text:0040D0F2
.text:0040D0F2 ; ---------------------------------------------------------------------------
.text:0040D0F3                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100 ; Attributes: thunk
.text:0040D100
.text:0040D100 ; struct hostent *__stdcall gethostbyname(const char *name)
.text:0040D100 gethostbyname   proc near               ; CODE XREF: sub_404230+14↑p
.text:0040D100
.text:0040D100 name            = dword ptr  4
.text:0040D100
.text:0040D100                 jmp     ds:__imp_gethostbyname
.text:0040D100 gethostbyname   endp
.text:0040D100
.text:0040D100 ; ---------------------------------------------------------------------------
.text:0040D106                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110 ; Attributes: thunk
.text:0040D110
.text:0040D110 ; char *__stdcall inet_ntoa(struct in_addr in)
.text:0040D110 inet_ntoa       proc near               ; CODE XREF: sub_404230+51↑p
.text:0040D110
.text:0040D110 in              = in_addr ptr  4
.text:0040D110
.text:0040D110                 jmp     ds:__imp_inet_ntoa
.text:0040D110 inet_ntoa       endp
.text:0040D110
.text:0040D110 ; ---------------------------------------------------------------------------
.text:0040D116                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120 ; Attributes: thunk
.text:0040D120
.text:0040D120 ; struct hostent *__stdcall gethostbyaddr(const char *addr, int len, int type)
.text:0040D120 gethostbyaddr   proc near               ; CODE XREF: sub_404230+AD↑p
.text:0040D120
.text:0040D120 addr            = dword ptr  4
.text:0040D120 len             = dword ptr  8
.text:0040D120 type            = dword ptr  0Ch
.text:0040D120
.text:0040D120                 jmp     ds:__imp_gethostbyaddr
.text:0040D120 gethostbyaddr   endp
.text:0040D120
.text:0040D120 ; ---------------------------------------------------------------------------
.text:0040D126                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130 ; Attributes: thunk
.text:0040D130
.text:0040D130 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040D130 OleInitialize   proc near               ; CODE XREF: sub_405F00+1A↑p
.text:0040D130
.text:0040D130 pvReserved      = dword ptr  4
.text:0040D130
.text:0040D130                 jmp     ds:__imp_OleInitialize
.text:0040D130 OleInitialize   endp
.text:0040D130
.text:0040D130 ; ---------------------------------------------------------------------------
.text:0040D136                 align 10h
.text:0040D140
.text:0040D140 ; =============== S U B R O U T I N E =======================================
.text:0040D140
.text:0040D140 ; Attributes: thunk
.text:0040D140
.text:0040D140 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040D140 CoCreateInstance proc near              ; CODE XREF: sub_405F00+52↑p
.text:0040D140
.text:0040D140 rclsid          = dword ptr  4
.text:0040D140 pUnkOuter       = dword ptr  8
.text:0040D140 dwClsContext    = dword ptr  0Ch
.text:0040D140 riid            = dword ptr  10h
.text:0040D140 ppv             = dword ptr  14h
.text:0040D140
.text:0040D140                 jmp     ds:__imp_CoCreateInstance
.text:0040D140 CoCreateInstance endp
.text:0040D140
.text:0040D140 ; ---------------------------------------------------------------------------
.text:0040D146                 align 10h
.text:0040D150
.text:0040D150 ; =============== S U B R O U T I N E =======================================
.text:0040D150
.text:0040D150 ; Attributes: thunk
.text:0040D150
.text:0040D150 ; void __stdcall CoUninitialize()
.text:0040D150 CoUninitialize  proc near               ; CODE XREF: sub_405F00+14E↑p
.text:0040D150                                         ; sub_405F00+16D↑p
.text:0040D150                 jmp     ds:__imp_CoUninitialize
.text:0040D150 CoUninitialize  endp
.text:0040D150
.text:0040D150 ; ---------------------------------------------------------------------------
.text:0040D156                 align 10h
.text:0040D160                 add     al, 0BAh ; 'º'
.text:0040D162                 retf
.text:0040D162 ; ---------------------------------------------------------------------------
.text:0040D163                 db 7Eh
.text:0040D164                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040D164                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040D164                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040D164                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040D164                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040D164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040D164                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040D164                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040D164                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040D164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040D164                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040D164                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040D164                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040D164                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040D164                 dd 0C4426C00h, 330h, 0
.text:0040D298                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D298                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040D298                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040D298                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040D2E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D2E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040D2E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040D2E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040D2E8                 dd 0BA94B00h, 1Bh, 0
.text:0040D348                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040D358                 dd 0C0h, 46000000h, 331h, 0
.text:0040D368                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D368                 dd 312h, 0
.text:0040D388                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040D398                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040D3A8                 dd 0C0h, 46000000h, 311h, 0
.text:0040D3B8                 dd 0C0h, 46000000h, 313h, 0
.text:0040D3C8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040D3D8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040D3E8                 dd 0C0h, 46000000h, 310h, 0
.text:0040D3F8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D3F8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040D428                 dd 0C0h, 46000000h, 319h, 0
.text:0040D438                 dd 0C0h, 46000000h, 315h, 0
.text:0040D448                 dd 0C0h, 46000000h, 316h, 0
.text:0040D458                 dd 0C0h, 46000000h, 315h, 0
.text:0040D468                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040D478                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D478                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040D478                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040D4B8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D4B8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040D4B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040D4B8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040D4B8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040D4B8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040D4B8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040D4B8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040D4B8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040D4B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040D4B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040D4B8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D4B8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040D4B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040D4B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040D4B8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D4B8                 dd 2DE81h, 0
.text:0040D608                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040D620                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040D620                 dd 0
.text:0040D638                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D638                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040D638                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040D638                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040D638                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040D638                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040D638                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040D638                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040D638                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040D638                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040D638                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040D638                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040D638                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040D638                 dd 10Fh, 0
.text:0040D748                 dd 0C0h, 46000000h, 125h, 0
.text:0040D758                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040D758                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040D758                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040D798                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040D798                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D798                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040D798                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040D798                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040D7F8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040D808                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040D808                 dd 140h, 0
.text:0040D828                 dd 0C0h, 46000000h, 1, 0
.text:0040D838                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040D838                 dd 71D3400h, 13Dh, 0
.text:0040D858                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040D858                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040D858                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040D858                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040D8A8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040D8A8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040D8A8                 dd 20405h, 0
.text:0040D8D8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040D8E8                 dd 0C0h, 46000000h, 20406h, 0
.text:0040D8F8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040D908                 dd 0C0h, 46000000h, 110h, 0
.text:0040D918                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040D928                 dd 0C0h, 46000000h, 123h, 0
.text:0040D938                 dd 0C0h, 46000000h, 124h, 0
.text:0040D948                 dd 0C0h, 46000000h, 13h, 0
.text:0040D958                 dd 0C0h, 46000000h, 14h, 0
.text:0040D968                 dd 0C0h, 46000000h, 15h, 0
.text:0040D978                 dd 0C0h, 46000000h, 20400h, 0
.text:0040D988                 dd 0C0h, 46000000h, 121h, 0
.text:0040D998                 dd 0C0h, 46000000h, 122h, 0
.text:0040D9A8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040D9B8                 dd 0C0h, 46000000h, 108h, 0
.text:0040D9C8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040D9C8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040D9C8                 dd 103h, 0
.text:0040D9F8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040DA08                 dd 0C0h, 46000000h, 106h, 0
.text:0040DA18                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DA18                 dd 107h, 0
.text:0040DA38                 dd 0C0h, 46000000h, 102h, 0
.text:0040DA48                 dd 0C0h, 46000000h, 104h, 0
.text:0040DA58                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040DA58                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040DA58                 dd 105h, 0
.text:0040DA88                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040DA98                 dd 0C0h, 46000000h, 139h, 0
.text:0040DAA8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040DAB8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040DAB8                 dd 101h, 0
.text:0040DAD8                 dd 0C0h, 46000000h, 100h, 0
.text:0040DAE8                 dd 0C0h, 46000000h, 20404h, 0
.text:0040DAF8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040DAF8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040DB28                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040DB28                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040DB28                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040DB28                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040DB78                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DB78                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040DB78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040DB78                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040DB78                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DB78                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040DBF8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040DBF8                 dd 0Ah, 0
.text:0040DC18                 dd 0C0h, 46000000h, 2, 0
.text:0040DC28                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040DC38                 dd 0C0h, 46000000h, 3, 0
.text:0040DC48                 dd 0C0h, 46000000h, 16h, 0
.text:0040DC58                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040DC58                 dd 1608D74Fh, 0Fh, 0
.text:0040DC78                 dd 0C0h, 46000000h, 20h, 0
.text:0040DC88                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040DC88                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040DC88                 dd 0
.text:0040DCB8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040DCC8                 dd 0C0h, 46000000h, 128h, 0
.text:0040DCD8                 dd 0C0h, 46000000h, 129h, 0
.text:0040DCE8                 dd 0C0h, 46000000h, 118h, 0
.text:0040DCF8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040DCF8                 dd 70474000h, 11Bh, 0
.text:0040DD18                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040DD18                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040DD18                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040DD18                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040DD18                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040DD78                 dd 0C0h, 46000000h, 116h, 0
.text:0040DD88                 dd 0C0h, 46000000h, 113h, 0
.text:0040DD98                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040DD98                 dd 119h, 0
.text:0040DDB8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040DDB8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040DDB8                 dd 0
.text:0040DDE8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040DE08                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040DE18                 dd 0C0h, 46000000h, 112h, 0
.text:0040DE28                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040DE28                 dd 18E6000h, 120h, 0
.text:0040DE48                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040DE48                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040DE48                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040DE88                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040DE88                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040DEB8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DEB8                 dd 11Ah, 0
.text:0040DED8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040DED8                 dd 10Ch, 0
.text:0040DEF8                 dd 0C0h, 46000000h
.text:0040DF00 dword_40DF00    dd 10Bh, 0              ; DATA XREF: sub_405F00+75↑o
.text:0040DF08                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040DF08                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040DF08                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040DF08                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040DF58                 dd 0C0h, 46000000h, 109h, 0
.text:0040DF68                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040DF68                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040DF68                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040DF68                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040DF68                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040DF68                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040DF68                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040DF68                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040DF68                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040DF68                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040DF68                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040E048                 dd 0C0h, 46000000h, 138h, 0
.text:0040E058                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040E058                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040E058                 dd 27h, 0
.text:0040E088                 dd 0C0h, 46000000h, 8, 0
.text:0040E098                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040E098                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040E098                 dd 20D00h, 0
.text:0040E0C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040E0D8                 dd 0C0h, 46000000h, 12h, 0
.text:0040E0E8                 dd 0C0h, 46000000h, 4, 0
.text:0040E0F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E0F8                 dd 7, 0
.text:0040E118                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E118                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040E148                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E148                 dd 126h, 0
.text:0040E168                 dd 0C0h, 46000000h, 10h, 0
.text:0040E178                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040E178                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040E1A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040E1A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040E1A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040E1E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040E1F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040E208                 dd 0C0h, 46000000h, 26h, 0
.text:0040E218                 dd 0C0h, 46000000h, 6, 0
.text:0040E228                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040E228                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040E228                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040E268                 dd 0C0h, 46000000h, 20403h, 0
.text:0040E278                 dd 0C0h, 46000000h, 20401h, 0
.text:0040E288                 dd 0C0h, 46000000h, 20412h, 0
.text:0040E298                 dd 0C0h, 46000000h, 20402h, 0
.text:0040E2A8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040E2B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040E2C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E2C8                 dd 10Dh, 0
.text:0040E2E8                 dd 0C0h, 46000000h, 127h, 0
.text:0040E2F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E2F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040E2F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040E338                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040E338                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040E338                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040E378                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040E388                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040E398                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040E3A8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040E3B8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040E3C8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040E3D8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040E3E8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040E3F8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040E408                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040E418                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040E428                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040E438                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040E448                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040E458                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040E468                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040E478                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040E488                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040E498                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040E4A8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040E4B8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040E4C8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040E4D8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040E4E8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040E4F8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040E508                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040E518                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040E528                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040E538                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040E548                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040E558                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040E568                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040E578                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040E588                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040E598                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040E5A8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040E5A8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040E5D0
.text:0040E5D0 ; =============== S U B R O U T I N E =======================================
.text:0040E5D0
.text:0040E5D0 ; Attributes: thunk
.text:0040E5D0
.text:0040E5D0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040E5D0 mbrtowc         proc near               ; CODE XREF: sub_404780+757↑p
.text:0040E5D0
.text:0040E5D0 DstCh           = dword ptr  4
.text:0040E5D0 SrcCh           = dword ptr  8
.text:0040E5D0 SizeInBytes     = dword ptr  0Ch
.text:0040E5D0 State           = dword ptr  10h
.text:0040E5D0
.text:0040E5D0                 jmp     ds:__imp_mbrtowc
.text:0040E5D0 mbrtowc         endp
.text:0040E5D0
.text:0040E5D0 ; ---------------------------------------------------------------------------
.text:0040E5D6                 align 10h
.text:0040E5E0
.text:0040E5E0 ; =============== S U B R O U T I N E =======================================
.text:0040E5E0
.text:0040E5E0 ; Attributes: bp-based frame
.text:0040E5E0
.text:0040E5E0 sub_40E5E0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040E5E0                 push    ebp
.text:0040E5E1                 mov     ecx, offset Time
.text:0040E5E6                 cmp     ecx, offset Time
.text:0040E5EC                 mov     ebp, esp
.text:0040E5EE                 jnb     short loc_40E606
.text:0040E5F0
.text:0040E5F0 loc_40E5F0:                             ; CODE XREF: sub_40E5E0+24↓j
.text:0040E5F0                 mov     edx, [ecx+4]
.text:0040E5F3                 mov     eax, [ecx]
.text:0040E5F5                 add     ecx, 8
.text:0040E5F8                 add     [edx+400000h], eax
.text:0040E5FE                 cmp     ecx, offset Time
.text:0040E604                 jb      short loc_40E5F0
.text:0040E606
.text:0040E606 loc_40E606:                             ; CODE XREF: sub_40E5E0+E↑j
.text:0040E606                 pop     ebp
.text:0040E607                 retn
.text:0040E607 sub_40E5E0      endp
.text:0040E607
.text:0040E607 ; ---------------------------------------------------------------------------
.text:0040E608                 align 10h
.text:0040E610
.text:0040E610 ; =============== S U B R O U T I N E =======================================
.text:0040E610
.text:0040E610 ; Attributes: bp-based frame
.text:0040E610
.text:0040E610 sub_40E610      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040E610                                         ; TopLevelExceptionFilter+D7↑p
.text:0040E610                 push    ebp
.text:0040E611                 mov     ebp, esp
.text:0040E613                 fninit
.text:0040E615                 pop     ebp
.text:0040E616                 retn
.text:0040E616 sub_40E610      endp
.text:0040E616
.text:0040E616 ; ---------------------------------------------------------------------------
.text:0040E617                 align 10h
.text:0040E620
.text:0040E620 ; =============== S U B R O U T I N E =======================================
.text:0040E620
.text:0040E620 ; Attributes: bp-based frame
.text:0040E620
.text:0040E620 ; void __cdecl sub_40E620()
.text:0040E620 sub_40E620      proc near               ; DATA XREF: .text:loc_40E669↓o
.text:0040E620                                         ; sub_40E6B0:loc_40E6DE↓o
.text:0040E620                 push    ebp
.text:0040E621                 mov     ebp, esp
.text:0040E623                 sub     esp, 8
.text:0040E626                 mov     eax, off_410134
.text:0040E62B                 mov     edx, [eax]
.text:0040E62D                 test    edx, edx
.text:0040E62F                 jnz     short loc_40E635
.text:0040E631
.text:0040E631 loc_40E631:                             ; CODE XREF: sub_40E620+2C↓j
.text:0040E631                 mov     esp, ebp
.text:0040E633                 pop     ebp
.text:0040E634                 retn
.text:0040E635 ; ---------------------------------------------------------------------------
.text:0040E635
.text:0040E635 loc_40E635:                             ; CODE XREF: sub_40E620+F↑j
.text:0040E635                                         ; sub_40E620+2A↓j
.text:0040E635                 call    dword ptr [eax]
.text:0040E637                 mov     edx, off_410134
.text:0040E63D                 mov     ecx, [edx+4]
.text:0040E640                 lea     eax, [edx+4]
.text:0040E643                 mov     off_410134, eax
.text:0040E648                 test    ecx, ecx
.text:0040E64A                 jnz     short loc_40E635
.text:0040E64C                 jmp     short loc_40E631
.text:0040E64C sub_40E620      endp
.text:0040E64C
.text:0040E64C ; ---------------------------------------------------------------------------
.text:0040E64E                 align 10h
.text:0040E650                 push    ebp
.text:0040E651                 mov     ebp, esp
.text:0040E653                 sub     esp, 8
.text:0040E656                 mov     [ebp-4], ebx
.text:0040E659                 mov     eax, ds:dword_40F7A0
.text:0040E65E                 cmp     eax, 0FFFFFFFFh
.text:0040E661                 jz      short loc_40E68C
.text:0040E663
.text:0040E663 loc_40E663:                             ; CODE XREF: .text:0040E696↓j
.text:0040E663                                         ; .text:0040E6A9↓j
.text:0040E663                 test    eax, eax
.text:0040E665                 mov     ebx, eax
.text:0040E667                 jnz     short loc_40E680
.text:0040E669
.text:0040E669 loc_40E669:                             ; CODE XREF: .text:0040E68A↓j
.text:0040E669                 mov     dword ptr [esp], offset sub_40E620
.text:0040E670                 call    sub_401040
.text:0040E675                 mov     ebx, [ebp-4]
.text:0040E678                 mov     esp, ebp
.text:0040E67A                 pop     ebp
.text:0040E67B                 retn
.text:0040E67B ; ---------------------------------------------------------------------------
.text:0040E67C                 align 10h
.text:0040E680
.text:0040E680 loc_40E680:                             ; CODE XREF: .text:0040E667↑j
.text:0040E680                                         ; .text:0040E688↓j
.text:0040E680                 call    ds:dword_40F7A0[ebx*4]
.text:0040E687                 dec     ebx
.text:0040E688                 jnz     short loc_40E680
.text:0040E68A                 jmp     short loc_40E669
.text:0040E68C ; ---------------------------------------------------------------------------
.text:0040E68C
.text:0040E68C loc_40E68C:                             ; CODE XREF: .text:0040E661↑j
.text:0040E68C                 mov     ecx, ds:dword_40F7A4
.text:0040E692                 xor     eax, eax
.text:0040E694                 test    ecx, ecx
.text:0040E696                 jz      short loc_40E663
.text:0040E698                 mov     edx, offset dword_40F7A0
.text:0040E69D                 lea     esi, [esi+0]
.text:0040E6A0
.text:0040E6A0 loc_40E6A0:                             ; CODE XREF: .text:0040E6A7↓j
.text:0040E6A0                 inc     eax
.text:0040E6A1                 mov     ecx, [edx+eax*4+4]
.text:0040E6A5                 test    ecx, ecx
.text:0040E6A7                 jnz     short loc_40E6A0
.text:0040E6A9                 jmp     short loc_40E663
.text:0040E6A9 ; ---------------------------------------------------------------------------
.text:0040E6AB                 align 10h
.text:0040E6B0
.text:0040E6B0 ; =============== S U B R O U T I N E =======================================
.text:0040E6B0
.text:0040E6B0 ; Attributes: bp-based frame
.text:0040E6B0
.text:0040E6B0 sub_40E6B0      proc near               ; CODE XREF: sub_4017F0+19↑p
.text:0040E6B0
.text:0040E6B0 var_8           = dword ptr -8
.text:0040E6B0 var_4           = dword ptr -4
.text:0040E6B0
.text:0040E6B0                 push    ebp
.text:0040E6B1                 mov     ebp, esp
.text:0040E6B3                 sub     esp, 8
.text:0040E6B6                 mov     [ebp+var_4], ebx
.text:0040E6B9                 mov     edx, dword_410130
.text:0040E6BF                 test    edx, edx
.text:0040E6C1                 jnz     short loc_40E6EA
.text:0040E6C3                 mov     eax, ds:dword_40F7A0
.text:0040E6C8                 mov     edx, 1
.text:0040E6CD                 mov     dword_410130, edx
.text:0040E6D3                 cmp     eax, 0FFFFFFFFh
.text:0040E6D6                 jz      short loc_40E6FD
.text:0040E6D8
.text:0040E6D8 loc_40E6D8:                             ; CODE XREF: sub_40E6B0+57↓j
.text:0040E6D8                                         ; sub_40E6B0+69↓j
.text:0040E6D8                 test    eax, eax
.text:0040E6DA                 mov     ebx, eax
.text:0040E6DC                 jnz     short loc_40E6F1
.text:0040E6DE
.text:0040E6DE loc_40E6DE:                             ; CODE XREF: sub_40E6B0+4B↓j
.text:0040E6DE                 mov     [esp+8+var_8], offset sub_40E620 ; void (__cdecl *)()
.text:0040E6E5                 call    sub_401040
.text:0040E6EA
.text:0040E6EA loc_40E6EA:                             ; CODE XREF: sub_40E6B0+11↑j
.text:0040E6EA                 mov     ebx, [ebp+var_4]
.text:0040E6ED                 mov     esp, ebp
.text:0040E6EF                 pop     ebp
.text:0040E6F0                 retn
.text:0040E6F1 ; ---------------------------------------------------------------------------
.text:0040E6F1
.text:0040E6F1 loc_40E6F1:                             ; CODE XREF: sub_40E6B0+2C↑j
.text:0040E6F1                                         ; sub_40E6B0+49↓j
.text:0040E6F1                 call    ds:dword_40F7A0[ebx*4]
.text:0040E6F8                 dec     ebx
.text:0040E6F9                 jnz     short loc_40E6F1
.text:0040E6FB                 jmp     short loc_40E6DE
.text:0040E6FD ; ---------------------------------------------------------------------------
.text:0040E6FD
.text:0040E6FD loc_40E6FD:                             ; CODE XREF: sub_40E6B0+26↑j
.text:0040E6FD                 mov     ecx, ds:dword_40F7A4
.text:0040E703                 xor     eax, eax
.text:0040E705                 test    ecx, ecx
.text:0040E707                 jz      short loc_40E6D8
.text:0040E709                 mov     edx, offset dword_40F7A0
.text:0040E70E                 mov     esi, esi
.text:0040E710
.text:0040E710 loc_40E710:                             ; CODE XREF: sub_40E6B0+67↓j
.text:0040E710                 inc     eax
.text:0040E711                 mov     ebx, [edx+eax*4+4]
.text:0040E715                 test    ebx, ebx
.text:0040E717                 jnz     short loc_40E710
.text:0040E719                 jmp     short loc_40E6D8
.text:0040E719 sub_40E6B0      endp
.text:0040E719
.text:0040E719 ; ---------------------------------------------------------------------------
.text:0040E71B                 align 10h
.text:0040E720
.text:0040E720 ; =============== S U B R O U T I N E =======================================
.text:0040E720
.text:0040E720 ; Attributes: info_from_lumina
.text:0040E720
.text:0040E720 ; void *__cdecl _alloca(size_t Size)
.text:0040E720 __alloca        proc near               ; CODE XREF: sub_4017F0+14↑p
.text:0040E720                 push    ecx
.text:0040E721                 mov     ecx, esp
.text:0040E723                 add     ecx, 8
.text:0040E726
.text:0040E726 loc_40E726:                             ; CODE XREF: __alloca+1B↓j
.text:0040E726                 cmp     eax, 1000h
.text:0040E72B                 jb      short loc_40E73D
.text:0040E72D                 sub     ecx, 1000h
.text:0040E733                 or      dword ptr [ecx], 0
.text:0040E736                 sub     eax, 1000h
.text:0040E73B                 jmp     short loc_40E726
.text:0040E73D ; ---------------------------------------------------------------------------
.text:0040E73D
.text:0040E73D loc_40E73D:                             ; CODE XREF: __alloca+B↑j
.text:0040E73D                 sub     ecx, eax
.text:0040E73F                 or      dword ptr [ecx], 0
.text:0040E742                 mov     eax, esp
.text:0040E744                 mov     esp, ecx
.text:0040E746                 mov     ecx, [eax]
.text:0040E748                 mov     eax, [eax+4]
.text:0040E74B                 jmp     eax
.text:0040E74B __alloca        endp
.text:0040E74B
.text:0040E74B ; ---------------------------------------------------------------------------
.text:0040E74D                 align 10h
.text:0040E750
.text:0040E750 ; =============== S U B R O U T I N E =======================================
.text:0040E750
.text:0040E750 ; Attributes: bp-based frame
.text:0040E750
.text:0040E750 sub_40E750      proc near               ; CODE XREF: sub_404300+38↑p
.text:0040E750                                         ; sub_404300+88↑p ...
.text:0040E750
.text:0040E750 var_3C          = dword ptr -3Ch
.text:0040E750 var_34          = dword ptr -34h
.text:0040E750 var_30          = dword ptr -30h
.text:0040E750 var_2C          = dword ptr -2Ch
.text:0040E750 var_28          = dword ptr -28h
.text:0040E750 var_24          = dword ptr -24h
.text:0040E750 var_1C          = dword ptr -1Ch
.text:0040E750 var_18          = dword ptr -18h
.text:0040E750 var_14          = dword ptr -14h
.text:0040E750 arg_0           = dword ptr  8
.text:0040E750 arg_4           = dword ptr  0Ch
.text:0040E750 arg_8           = dword ptr  10h
.text:0040E750 arg_C           = dword ptr  14h
.text:0040E750
.text:0040E750                 push    ebp
.text:0040E751                 mov     ebp, esp
.text:0040E753                 push    edi
.text:0040E754                 push    esi
.text:0040E755                 push    ebx
.text:0040E756                 sub     esp, 34h
.text:0040E759                 mov     ebx, [ebp+arg_4]
.text:0040E75C                 mov     [ebp+var_28], 0
.text:0040E763                 mov     ecx, [ebp+arg_0]
.text:0040E766                 mov     eax, [ebp+arg_8]
.text:0040E769                 mov     [ebp+var_24], 0
.text:0040E770                 test    ebx, ebx
.text:0040E772                 mov     edx, [ebp+arg_C]
.text:0040E775                 mov     [ebp+var_1C], 0
.text:0040E77C                 js      loc_40E8F4
.text:0040E782
.text:0040E782 loc_40E782:                             ; CODE XREF: sub_40E750+1B2↓j
.text:0040E782                 test    edx, edx
.text:0040E784                 js      loc_40E8E8
.text:0040E78A
.text:0040E78A loc_40E78A:                             ; CODE XREF: sub_40E750+19F↓j
.text:0040E78A                 mov     [ebp+var_2C], edx
.text:0040E78D                 test    edx, edx
.text:0040E78F                 mov     esi, eax
.text:0040E791                 mov     [ebp+var_30], ecx
.text:0040E794                 mov     edi, ebx
.text:0040E796                 jnz     short loc_40E801
.text:0040E798                 cmp     eax, ebx
.text:0040E79A                 jbe     short loc_40E7E4
.text:0040E79C                 mov     eax, ecx
.text:0040E79E                 mov     edx, ebx
.text:0040E7A0                 div     esi
.text:0040E7A2
.text:0040E7A2 loc_40E7A2:                             ; CODE XREF: sub_40E750+AF↓j
.text:0040E7A2                 mov     [ebp+var_30], edx
.text:0040E7A5                 lea     ecx, [ebp+var_18]
.text:0040E7A8                 test    ecx, ecx
.text:0040E7AA                 jz      short loc_40E7C5
.text:0040E7AC                 mov     [ebp+var_24], 0
.text:0040E7B3
.text:0040E7B3 loc_40E7B3:                             ; CODE XREF: sub_40E750+FE↓j
.text:0040E7B3                 mov     eax, [ebp+var_30]
.text:0040E7B6                 mov     [ebp+var_28], eax
.text:0040E7B9                 mov     edx, [ebp+var_28]
.text:0040E7BC                 mov     ecx, [ebp+var_24]
.text:0040E7BF                 mov     [ebp+var_18], edx
.text:0040E7C2                 mov     [ebp+var_14], ecx
.text:0040E7C5
.text:0040E7C5 loc_40E7C5:                             ; CODE XREF: sub_40E750+5A↑j
.text:0040E7C5                                         ; sub_40E750+C8↓j ...
.text:0040E7C5                 mov     eax, [ebp+var_1C]
.text:0040E7C8                 test    eax, eax
.text:0040E7CA                 jz      short loc_40E7D6
.text:0040E7CC                 neg     [ebp+var_18]
.text:0040E7CF                 adc     [ebp+var_14], 0
.text:0040E7D3                 neg     [ebp+var_14]
.text:0040E7D6
.text:0040E7D6 loc_40E7D6:                             ; CODE XREF: sub_40E750+7A↑j
.text:0040E7D6                 mov     eax, [ebp+var_18]
.text:0040E7D9                 mov     edx, [ebp+var_14]
.text:0040E7DC                 add     esp, 34h
.text:0040E7DF                 pop     ebx
.text:0040E7E0                 pop     esi
.text:0040E7E1                 pop     edi
.text:0040E7E2                 pop     ebp
.text:0040E7E3                 retn
.text:0040E7E4 ; ---------------------------------------------------------------------------
.text:0040E7E4
.text:0040E7E4 loc_40E7E4:                             ; CODE XREF: sub_40E750+4A↑j
.text:0040E7E4                 test    eax, eax
.text:0040E7E6                 jnz     short loc_40E7F3
.text:0040E7E8                 mov     eax, 1
.text:0040E7ED                 xor     edx, edx
.text:0040E7EF                 div     esi
.text:0040E7F1                 mov     esi, eax
.text:0040E7F3
.text:0040E7F3 loc_40E7F3:                             ; CODE XREF: sub_40E750+96↑j
.text:0040E7F3                 mov     eax, edi
.text:0040E7F5                 mov     edx, [ebp+var_2C]
.text:0040E7F8                 div     esi
.text:0040E7FA                 mov     eax, [ebp+var_30]
.text:0040E7FD                 div     esi
.text:0040E7FF                 jmp     short loc_40E7A2
.text:0040E801 ; ---------------------------------------------------------------------------
.text:0040E801
.text:0040E801 loc_40E801:                             ; CODE XREF: sub_40E750+46↑j
.text:0040E801                 cmp     [ebp+var_2C], ebx
.text:0040E804                 jbe     short loc_40E820
.text:0040E806                 mov     [ebp+var_28], ecx
.text:0040E809
.text:0040E809 loc_40E809:                             ; CODE XREF: sub_40E750+17E↓j
.text:0040E809                 mov     [ebp+var_24], edi
.text:0040E80C                 mov     eax, [ebp+var_28]
.text:0040E80F                 mov     edx, [ebp+var_24]
.text:0040E812                 mov     [ebp+var_18], eax
.text:0040E815                 mov     [ebp+var_14], edx
.text:0040E818                 jmp     short loc_40E7C5
.text:0040E818 ; ---------------------------------------------------------------------------
.text:0040E81A                 align 10h
.text:0040E820
.text:0040E820 loc_40E820:                             ; CODE XREF: sub_40E750+B4↑j
.text:0040E820                 bsr     eax, [ebp+var_2C]
.text:0040E824                 mov     ebx, eax
.text:0040E826                 xor     ebx, 1Fh
.text:0040E829                 jnz     short loc_40E853
.text:0040E82B                 cmp     edi, [ebp+var_2C]
.text:0040E82E                 ja      short loc_40E835
.text:0040E830                 cmp     [ebp+var_30], esi
.text:0040E833                 jb      short loc_40E840
.text:0040E835
.text:0040E835 loc_40E835:                             ; CODE XREF: sub_40E750+DE↑j
.text:0040E835                 mov     edx, [ebp+var_30]
.text:0040E838                 sub     edx, esi
.text:0040E83A                 sbb     edi, [ebp+var_2C]
.text:0040E83D                 mov     [ebp+var_30], edx
.text:0040E840
.text:0040E840 loc_40E840:                             ; CODE XREF: sub_40E750+E3↑j
.text:0040E840                 lea     ecx, [ebp+var_18]
.text:0040E843                 test    ecx, ecx
.text:0040E845                 jz      loc_40E7C5
.text:0040E84B                 mov     [ebp+var_24], edi
.text:0040E84E                 jmp     loc_40E7B3
.text:0040E853 ; ---------------------------------------------------------------------------
.text:0040E853
.text:0040E853 loc_40E853:                             ; CODE XREF: sub_40E750+D9↑j
.text:0040E853                 mov     edx, [ebp+var_2C]
.text:0040E856                 mov     eax, 20h ; ' '
.text:0040E85B                 mov     cl, bl
.text:0040E85D                 sub     eax, ebx
.text:0040E85F                 mov     [ebp+var_34], eax
.text:0040E862                 shl     edx, cl
.text:0040E864                 mov     eax, esi
.text:0040E866                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E86A                 shr     eax, cl
.text:0040E86C                 mov     cl, bl
.text:0040E86E                 shl     esi, cl
.text:0040E870                 or      edx, eax
.text:0040E872                 mov     eax, [ebp+var_30]
.text:0040E875                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E879                 mov     [ebp+var_2C], edx
.text:0040E87C                 mov     edx, edi
.text:0040E87E                 shr     edx, cl
.text:0040E880                 mov     cl, bl
.text:0040E882                 shl     edi, cl
.text:0040E884                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E888                 shr     eax, cl
.text:0040E88A                 or      edi, eax
.text:0040E88C                 mov     eax, edi
.text:0040E88E                 mov     cl, bl
.text:0040E890                 div     [ebp+var_2C]
.text:0040E893                 shl     [ebp+var_30], cl
.text:0040E896                 mov     edi, edx
.text:0040E898                 mul     esi
.text:0040E89A                 mov     [ebp+var_3C], eax
.text:0040E89D                 cmp     edx, edi
.text:0040E89F                 ja      short loc_40E8DB
.text:0040E8A1                 cmp     edx, edi
.text:0040E8A3                 jz      short loc_40E8D3
.text:0040E8A5
.text:0040E8A5 loc_40E8A5:                             ; CODE XREF: sub_40E750+189↓j
.text:0040E8A5                                         ; sub_40E750+196↓j
.text:0040E8A5                 lea     eax, [ebp+var_18]
.text:0040E8A8                 test    eax, eax
.text:0040E8AA                 jz      loc_40E7C5
.text:0040E8B0                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040E8B4                 mov     eax, [ebp+var_30]
.text:0040E8B7                 sub     eax, [ebp+var_3C]
.text:0040E8BA                 sbb     edi, edx
.text:0040E8BC                 mov     [ebp+var_30], eax
.text:0040E8BF                 mov     edx, edi
.text:0040E8C1                 shl     edx, cl
.text:0040E8C3                 mov     cl, bl
.text:0040E8C5                 shr     eax, cl
.text:0040E8C7                 or      edx, eax
.text:0040E8C9                 mov     [ebp+var_28], edx
.text:0040E8CC                 shr     edi, cl
.text:0040E8CE                 jmp     loc_40E809
.text:0040E8D3 ; ---------------------------------------------------------------------------
.text:0040E8D3
.text:0040E8D3 loc_40E8D3:                             ; CODE XREF: sub_40E750+153↑j
.text:0040E8D3                 mov     eax, [ebp+var_30]
.text:0040E8D6                 cmp     [ebp+var_3C], eax
.text:0040E8D9                 jbe     short loc_40E8A5
.text:0040E8DB
.text:0040E8DB loc_40E8DB:                             ; CODE XREF: sub_40E750+14F↑j
.text:0040E8DB                 mov     ecx, [ebp+var_3C]
.text:0040E8DE                 sub     ecx, esi
.text:0040E8E0                 sbb     edx, [ebp+var_2C]
.text:0040E8E3                 mov     [ebp+var_3C], ecx
.text:0040E8E6                 jmp     short loc_40E8A5
.text:0040E8E8 ; ---------------------------------------------------------------------------
.text:0040E8E8
.text:0040E8E8 loc_40E8E8:                             ; CODE XREF: sub_40E750+34↑j
.text:0040E8E8                 neg     eax
.text:0040E8EA                 adc     edx, 0
.text:0040E8ED                 neg     edx
.text:0040E8EF                 jmp     loc_40E78A
.text:0040E8F4 ; ---------------------------------------------------------------------------
.text:0040E8F4
.text:0040E8F4 loc_40E8F4:                             ; CODE XREF: sub_40E750+2C↑j
.text:0040E8F4                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0040E8FB                 neg     ecx
.text:0040E8FD                 adc     ebx, 0
.text:0040E900                 neg     ebx
.text:0040E902                 jmp     loc_40E782
.text:0040E902 sub_40E750      endp
.text:0040E902
.text:0040E902 ; ---------------------------------------------------------------------------
.text:0040E907                 align 10h
.text:0040E910
.text:0040E910 ; =============== S U B R O U T I N E =======================================
.text:0040E910
.text:0040E910 ; Attributes: bp-based frame
.text:0040E910
.text:0040E910 sub_40E910      proc near               ; CODE XREF: sub_404300+58↑p
.text:0040E910                                         ; sub_404300+AA↑p
.text:0040E910
.text:0040E910 var_2C          = dword ptr -2Ch
.text:0040E910 var_28          = dword ptr -28h
.text:0040E910 var_24          = dword ptr -24h
.text:0040E910 var_20          = dword ptr -20h
.text:0040E910 var_1C          = dword ptr -1Ch
.text:0040E910 var_14          = dword ptr -14h
.text:0040E910 arg_0           = dword ptr  8
.text:0040E910 arg_4           = dword ptr  0Ch
.text:0040E910 arg_8           = dword ptr  10h
.text:0040E910 arg_C           = dword ptr  14h
.text:0040E910
.text:0040E910                 push    ebp
.text:0040E911                 mov     ebp, esp
.text:0040E913                 push    edi
.text:0040E914                 push    esi
.text:0040E915                 push    ebx
.text:0040E916                 sub     esp, 24h
.text:0040E919                 mov     ebx, [ebp+arg_4]
.text:0040E91C                 mov     [ebp+var_20], 0
.text:0040E923                 mov     ecx, [ebp+arg_0]
.text:0040E926                 mov     eax, [ebp+arg_8]
.text:0040E929                 mov     [ebp+var_1C], 0
.text:0040E930                 test    ebx, ebx
.text:0040E932                 mov     edx, [ebp+arg_C]
.text:0040E935                 mov     [ebp+var_14], 0
.text:0040E93C                 js      loc_40EA50
.text:0040E942
.text:0040E942 loc_40E942:                             ; CODE XREF: sub_40E910+14E↓j
.text:0040E942                 test    edx, edx
.text:0040E944                 js      loc_40EA40
.text:0040E94A
.text:0040E94A loc_40E94A:                             ; CODE XREF: sub_40E910+13A↓j
.text:0040E94A                 mov     [ebp+var_24], ecx
.text:0040E94D                 test    edx, edx
.text:0040E94F                 mov     esi, eax
.text:0040E951                 jnz     short loc_40E9A6
.text:0040E953                 cmp     eax, ebx
.text:0040E955                 jbe     short loc_40E984
.text:0040E957                 mov     eax, ecx
.text:0040E959                 mov     edx, ebx
.text:0040E95B                 div     esi
.text:0040E95D                 mov     edi, eax
.text:0040E95F                 nop
.text:0040E960
.text:0040E960 loc_40E960:                             ; CODE XREF: sub_40E910+9C↓j
.text:0040E960                                         ; sub_40E910+B4↓j ...
.text:0040E960                 xor     ecx, ecx
.text:0040E962
.text:0040E962 loc_40E962:                             ; CODE XREF: sub_40E910+94↓j
.text:0040E962                 mov     [ebp+var_1C], ecx
.text:0040E965                 mov     ecx, [ebp+var_14]
.text:0040E968                 mov     [ebp+var_20], edi
.text:0040E96B                 mov     eax, [ebp+var_20]
.text:0040E96E                 mov     edx, [ebp+var_1C]
.text:0040E971                 test    ecx, ecx
.text:0040E973                 jz      short loc_40E97C
.text:0040E975                 neg     eax
.text:0040E977                 adc     edx, 0
.text:0040E97A                 neg     edx
.text:0040E97C
.text:0040E97C loc_40E97C:                             ; CODE XREF: sub_40E910+63↑j
.text:0040E97C                 add     esp, 24h
.text:0040E97F                 pop     ebx
.text:0040E980                 pop     esi
.text:0040E981                 pop     edi
.text:0040E982                 pop     ebp
.text:0040E983                 retn
.text:0040E984 ; ---------------------------------------------------------------------------
.text:0040E984
.text:0040E984 loc_40E984:                             ; CODE XREF: sub_40E910+45↑j
.text:0040E984                 test    eax, eax
.text:0040E986                 jnz     short loc_40E995
.text:0040E988                 mov     eax, 1
.text:0040E98D                 xor     ecx, ecx
.text:0040E98F                 xor     edx, edx
.text:0040E991                 div     ecx
.text:0040E993                 mov     esi, eax
.text:0040E995
.text:0040E995 loc_40E995:                             ; CODE XREF: sub_40E910+76↑j
.text:0040E995                 mov     eax, ebx
.text:0040E997                 xor     edx, edx
.text:0040E999                 div     esi
.text:0040E99B                 mov     ecx, eax
.text:0040E99D                 mov     eax, [ebp+var_24]
.text:0040E9A0                 div     esi
.text:0040E9A2                 mov     edi, eax
.text:0040E9A4                 jmp     short loc_40E962
.text:0040E9A6 ; ---------------------------------------------------------------------------
.text:0040E9A6
.text:0040E9A6 loc_40E9A6:                             ; CODE XREF: sub_40E910+41↑j
.text:0040E9A6                 cmp     edx, ebx
.text:0040E9A8                 jbe     short loc_40E9B0
.text:0040E9AA                 xor     edi, edi
.text:0040E9AC                 jmp     short loc_40E960
.text:0040E9AC ; ---------------------------------------------------------------------------
.text:0040E9AE                 align 10h
.text:0040E9B0
.text:0040E9B0 loc_40E9B0:                             ; CODE XREF: sub_40E910+98↑j
.text:0040E9B0                 bsr     eax, edx
.text:0040E9B3                 xor     eax, 1Fh
.text:0040E9B6                 mov     [ebp+var_28], eax
.text:0040E9B9                 jnz     short loc_40E9D0
.text:0040E9BB                 cmp     ebx, edx
.text:0040E9BD                 ja      short loc_40E9C6
.text:0040E9BF                 xor     edi, edi
.text:0040E9C1                 cmp     [ebp+var_24], esi
.text:0040E9C4                 jb      short loc_40E960
.text:0040E9C6
.text:0040E9C6 loc_40E9C6:                             ; CODE XREF: sub_40E910+AD↑j
.text:0040E9C6                 mov     edi, 1
.text:0040E9CB                 jmp     short loc_40E960
.text:0040E9CB ; ---------------------------------------------------------------------------
.text:0040E9CD                 align 10h
.text:0040E9D0
.text:0040E9D0 loc_40E9D0:                             ; CODE XREF: sub_40E910+A9↑j
.text:0040E9D0                 mov     eax, [ebp+var_28]
.text:0040E9D3                 mov     ecx, 20h ; ' '
.text:0040E9D8                 sub     ecx, eax
.text:0040E9DA                 mov     [ebp+var_2C], ecx
.text:0040E9DD                 mov     eax, esi
.text:0040E9DF                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E9E3                 shl     edx, cl
.text:0040E9E5                 mov     edi, edx
.text:0040E9E7                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E9EB                 mov     edx, ebx
.text:0040E9ED                 shr     eax, cl
.text:0040E9EF                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040E9F3                 or      edi, eax
.text:0040E9F5                 mov     eax, [ebp+var_24]
.text:0040E9F8                 shl     esi, cl
.text:0040E9FA                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040E9FE                 shr     edx, cl
.text:0040EA00                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040EA04                 shl     ebx, cl
.text:0040EA06                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EA0A                 shr     eax, cl
.text:0040EA0C                 or      ebx, eax
.text:0040EA0E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040EA12                 mov     eax, ebx
.text:0040EA14                 div     edi
.text:0040EA16                 mov     ebx, edx
.text:0040EA18                 mov     edi, eax
.text:0040EA1A                 shl     [ebp+var_24], cl
.text:0040EA1D                 mul     esi
.text:0040EA1F                 cmp     edx, ebx
.text:0040EA21                 ja      short loc_40EA34
.text:0040EA23                 cmp     edx, ebx
.text:0040EA25                 jnz     loc_40E960
.text:0040EA2B                 cmp     eax, [ebp+var_24]
.text:0040EA2E                 jbe     loc_40E960
.text:0040EA34
.text:0040EA34 loc_40EA34:                             ; CODE XREF: sub_40E910+111↑j
.text:0040EA34                 dec     edi
.text:0040EA35                 jmp     loc_40E960
.text:0040EA35 ; ---------------------------------------------------------------------------
.text:0040EA3A                 align 10h
.text:0040EA40
.text:0040EA40 loc_40EA40:                             ; CODE XREF: sub_40E910+34↑j
.text:0040EA40                 not     [ebp+var_14]
.text:0040EA43                 neg     eax
.text:0040EA45                 adc     edx, 0
.text:0040EA48                 neg     edx
.text:0040EA4A                 jmp     loc_40E94A
.text:0040EA4A ; ---------------------------------------------------------------------------
.text:0040EA4F                 align 10h
.text:0040EA50
.text:0040EA50 loc_40EA50:                             ; CODE XREF: sub_40E910+2C↑j
.text:0040EA50                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0040EA57                 neg     ecx
.text:0040EA59                 adc     ebx, 0
.text:0040EA5C                 neg     ebx
.text:0040EA5E                 jmp     loc_40E942
.text:0040EA5E sub_40E910      endp
.text:0040EA5E
.text:0040EA5E ; ---------------------------------------------------------------------------
.text:0040EA63                 align 10h
.text:0040EA70
.text:0040EA70 ; =============== S U B R O U T I N E =======================================
.text:0040EA70
.text:0040EA70 ; Attributes: bp-based frame
.text:0040EA70
.text:0040EA70 sub_40EA70      proc near               ; CODE XREF: sub_4074E0+17E↑p
.text:0040EA70                                         ; sub_4074E0+1F5↑p ...
.text:0040EA70
.text:0040EA70 var_24          = dword ptr -24h
.text:0040EA70 var_20          = dword ptr -20h
.text:0040EA70 var_1C          = dword ptr -1Ch
.text:0040EA70 var_18          = dword ptr -18h
.text:0040EA70 var_14          = dword ptr -14h
.text:0040EA70 var_C           = dword ptr -0Ch
.text:0040EA70 var_8           = dword ptr -8
.text:0040EA70 var_4           = dword ptr -4
.text:0040EA70 arg_0           = dword ptr  8
.text:0040EA70 arg_4           = dword ptr  0Ch
.text:0040EA70 arg_8           = dword ptr  10h
.text:0040EA70 arg_C           = dword ptr  14h
.text:0040EA70
.text:0040EA70                 push    ebp
.text:0040EA71                 mov     ebp, esp
.text:0040EA73                 sub     esp, 28h
.text:0040EA76                 mov     [ebp+var_C], ebx
.text:0040EA79                 mov     edx, [ebp+arg_C]
.text:0040EA7C                 mov     ecx, [ebp+arg_0]
.text:0040EA7F                 mov     [ebp+var_8], esi
.text:0040EA82                 mov     eax, [ebp+arg_8]
.text:0040EA85                 test    edx, edx
.text:0040EA87                 mov     [ebp+var_4], edi
.text:0040EA8A                 mov     ebx, [ebp+arg_4]
.text:0040EA8D                 mov     esi, eax
.text:0040EA8F                 mov     [ebp+var_18], 0
.text:0040EA96                 mov     [ebp+var_14], 0
.text:0040EA9D                 mov     [ebp+var_1C], ecx
.text:0040EAA0                 jnz     short loc_40EAF2
.text:0040EAA2                 cmp     eax, ebx
.text:0040EAA4                 jbe     short loc_40EAD0
.text:0040EAA6                 mov     eax, ecx
.text:0040EAA8                 mov     edx, ebx
.text:0040EAAA                 div     esi
.text:0040EAAC                 mov     edi, eax
.text:0040EAAE                 mov     esi, esi
.text:0040EAB0
.text:0040EAB0 loc_40EAB0:                             ; CODE XREF: sub_40EA70+88↓j
.text:0040EAB0                                         ; sub_40EA70+A4↓j ...
.text:0040EAB0                 xor     ecx, ecx
.text:0040EAB2
.text:0040EAB2 loc_40EAB2:                             ; CODE XREF: sub_40EA70+80↓j
.text:0040EAB2                 mov     [ebp+var_18], edi
.text:0040EAB5                 mov     ebx, [ebp+var_C]
.text:0040EAB8                 mov     eax, [ebp+var_18]
.text:0040EABB                 mov     [ebp+var_14], ecx
.text:0040EABE                 mov     esi, [ebp+var_8]
.text:0040EAC1                 mov     edx, [ebp+var_14]
.text:0040EAC4                 mov     edi, [ebp+var_4]
.text:0040EAC7                 mov     esp, ebp
.text:0040EAC9                 pop     ebp
.text:0040EACA                 retn
.text:0040EACA ; ---------------------------------------------------------------------------
.text:0040EACB                 align 10h
.text:0040EAD0
.text:0040EAD0 loc_40EAD0:                             ; CODE XREF: sub_40EA70+34↑j
.text:0040EAD0                 test    eax, eax
.text:0040EAD2                 jnz     short loc_40EAE1
.text:0040EAD4                 mov     eax, 1
.text:0040EAD9                 xor     ecx, ecx
.text:0040EADB                 xor     edx, edx
.text:0040EADD                 div     ecx
.text:0040EADF                 mov     esi, eax
.text:0040EAE1
.text:0040EAE1 loc_40EAE1:                             ; CODE XREF: sub_40EA70+62↑j
.text:0040EAE1                 mov     eax, ebx
.text:0040EAE3                 xor     edx, edx
.text:0040EAE5                 div     esi
.text:0040EAE7                 mov     ecx, eax
.text:0040EAE9                 mov     eax, [ebp+var_1C]
.text:0040EAEC                 div     esi
.text:0040EAEE                 mov     edi, eax
.text:0040EAF0                 jmp     short loc_40EAB2
.text:0040EAF2 ; ---------------------------------------------------------------------------
.text:0040EAF2
.text:0040EAF2 loc_40EAF2:                             ; CODE XREF: sub_40EA70+30↑j
.text:0040EAF2                 cmp     edx, ebx
.text:0040EAF4                 jbe     short loc_40EB00
.text:0040EAF6                 xor     edi, edi
.text:0040EAF8                 jmp     short loc_40EAB0
.text:0040EAF8 ; ---------------------------------------------------------------------------
.text:0040EAFA                 align 10h
.text:0040EB00
.text:0040EB00 loc_40EB00:                             ; CODE XREF: sub_40EA70+84↑j
.text:0040EB00                 bsr     eax, edx
.text:0040EB03                 xor     eax, 1Fh
.text:0040EB06                 mov     [ebp+var_20], eax
.text:0040EB09                 jnz     short loc_40EB20
.text:0040EB0B                 cmp     ebx, edx
.text:0040EB0D                 ja      short loc_40EB16
.text:0040EB0F                 xor     edi, edi
.text:0040EB11                 cmp     [ebp+var_1C], esi
.text:0040EB14                 jb      short loc_40EAB0
.text:0040EB16
.text:0040EB16 loc_40EB16:                             ; CODE XREF: sub_40EA70+9D↑j
.text:0040EB16                 mov     edi, 1
.text:0040EB1B                 jmp     short loc_40EAB0
.text:0040EB1B ; ---------------------------------------------------------------------------
.text:0040EB1D                 align 10h
.text:0040EB20
.text:0040EB20 loc_40EB20:                             ; CODE XREF: sub_40EA70+99↑j
.text:0040EB20                 mov     eax, [ebp+var_20]
.text:0040EB23                 mov     ecx, 20h ; ' '
.text:0040EB28                 sub     ecx, eax
.text:0040EB2A                 mov     [ebp+var_24], ecx
.text:0040EB2D                 mov     eax, esi
.text:0040EB2F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EB33                 shl     edx, cl
.text:0040EB35                 mov     edi, edx
.text:0040EB37                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EB3B                 mov     edx, ebx
.text:0040EB3D                 shr     eax, cl
.text:0040EB3F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EB43                 or      edi, eax
.text:0040EB45                 mov     eax, [ebp+var_1C]
.text:0040EB48                 shl     esi, cl
.text:0040EB4A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EB4E                 shr     edx, cl
.text:0040EB50                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EB54                 shl     ebx, cl
.text:0040EB56                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EB5A                 shr     eax, cl
.text:0040EB5C                 or      ebx, eax
.text:0040EB5E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EB62                 mov     eax, ebx
.text:0040EB64                 div     edi
.text:0040EB66                 mov     ebx, edx
.text:0040EB68                 mov     edi, eax
.text:0040EB6A                 shl     [ebp+var_1C], cl
.text:0040EB6D                 mul     esi
.text:0040EB6F                 cmp     edx, ebx
.text:0040EB71                 ja      short loc_40EB84
.text:0040EB73                 cmp     edx, ebx
.text:0040EB75                 jnz     loc_40EAB0
.text:0040EB7B                 cmp     eax, [ebp+var_1C]
.text:0040EB7E                 jbe     loc_40EAB0
.text:0040EB84
.text:0040EB84 loc_40EB84:                             ; CODE XREF: sub_40EA70+101↑j
.text:0040EB84                 dec     edi
.text:0040EB85                 jmp     loc_40EAB0
.text:0040EB85 sub_40EA70      endp
.text:0040EB85
.text:0040EB85 ; ---------------------------------------------------------------------------
.text:0040EB8A                 align 10h
.text:0040EB90
.text:0040EB90 ; =============== S U B R O U T I N E =======================================
.text:0040EB90
.text:0040EB90 ; Attributes: bp-based frame
.text:0040EB90
.text:0040EB90 sub_40EB90      proc near               ; CODE XREF: sub_4074E0+1A5↑p
.text:0040EB90                                         ; sub_4074E0+21E↑p ...
.text:0040EB90
.text:0040EB90 var_34          = dword ptr -34h
.text:0040EB90 var_2C          = dword ptr -2Ch
.text:0040EB90 var_28          = dword ptr -28h
.text:0040EB90 var_24          = dword ptr -24h
.text:0040EB90 var_20          = dword ptr -20h
.text:0040EB90 var_1C          = dword ptr -1Ch
.text:0040EB90 var_18          = dword ptr -18h
.text:0040EB90 var_14          = dword ptr -14h
.text:0040EB90 arg_0           = dword ptr  8
.text:0040EB90 arg_4           = dword ptr  0Ch
.text:0040EB90 arg_8           = dword ptr  10h
.text:0040EB90 arg_C           = dword ptr  14h
.text:0040EB90
.text:0040EB90                 push    ebp
.text:0040EB91                 mov     ebp, esp
.text:0040EB93                 push    edi
.text:0040EB94                 push    esi
.text:0040EB95                 push    ebx
.text:0040EB96                 sub     esp, 2Ch
.text:0040EB99                 mov     edx, [ebp+arg_C]
.text:0040EB9C                 mov     [ebp+var_20], 0
.text:0040EBA3                 mov     ecx, [ebp+arg_0]
.text:0040EBA6                 mov     ebx, [ebp+arg_4]
.text:0040EBA9                 mov     [ebp+var_1C], 0
.text:0040EBB0                 mov     eax, [ebp+arg_8]
.text:0040EBB3                 test    edx, edx
.text:0040EBB5                 mov     [ebp+var_24], edx
.text:0040EBB8                 mov     edi, ebx
.text:0040EBBA                 mov     esi, eax
.text:0040EBBC                 mov     [ebp+var_28], ecx
.text:0040EBBF                 jnz     short loc_40EC20
.text:0040EBC1                 cmp     eax, ebx
.text:0040EBC3                 jbe     short loc_40EC00
.text:0040EBC5                 mov     eax, ecx
.text:0040EBC7                 mov     edx, ebx
.text:0040EBC9                 div     esi
.text:0040EBCB
.text:0040EBCB loc_40EBCB:                             ; CODE XREF: sub_40EB90+8B↓j
.text:0040EBCB                 mov     [ebp+var_28], edx
.text:0040EBCE                 lea     ecx, [ebp+var_18]
.text:0040EBD1                 test    ecx, ecx
.text:0040EBD3                 jz      short loc_40EBEE
.text:0040EBD5                 mov     [ebp+var_1C], 0
.text:0040EBDC
.text:0040EBDC loc_40EBDC:                             ; CODE XREF: sub_40EB90+DA↓j
.text:0040EBDC                 mov     eax, [ebp+var_28]
.text:0040EBDF                 mov     [ebp+var_20], eax
.text:0040EBE2                 mov     edx, [ebp+var_20]
.text:0040EBE5                 mov     ecx, [ebp+var_1C]
.text:0040EBE8                 mov     [ebp+var_18], edx
.text:0040EBEB                 mov     [ebp+var_14], ecx
.text:0040EBEE
.text:0040EBEE loc_40EBEE:                             ; CODE XREF: sub_40EB90+43↑j
.text:0040EBEE                                         ; sub_40EB90+A7↓j ...
.text:0040EBEE                 mov     eax, [ebp+var_18]
.text:0040EBF1                 mov     edx, [ebp+var_14]
.text:0040EBF4                 add     esp, 2Ch
.text:0040EBF7                 pop     ebx
.text:0040EBF8                 pop     esi
.text:0040EBF9                 pop     edi
.text:0040EBFA                 pop     ebp
.text:0040EBFB                 retn
.text:0040EBFB ; ---------------------------------------------------------------------------
.text:0040EBFC                 align 10h
.text:0040EC00
.text:0040EC00 loc_40EC00:                             ; CODE XREF: sub_40EB90+33↑j
.text:0040EC00                 test    eax, eax
.text:0040EC02                 jnz     short loc_40EC0F
.text:0040EC04                 mov     eax, 1
.text:0040EC09                 xor     edx, edx
.text:0040EC0B                 div     esi
.text:0040EC0D                 mov     esi, eax
.text:0040EC0F
.text:0040EC0F loc_40EC0F:                             ; CODE XREF: sub_40EB90+72↑j
.text:0040EC0F                 mov     eax, edi
.text:0040EC11                 mov     edx, [ebp+var_24]
.text:0040EC14                 div     esi
.text:0040EC16                 mov     eax, [ebp+var_28]
.text:0040EC19                 div     esi
.text:0040EC1B                 jmp     short loc_40EBCB
.text:0040EC1B ; ---------------------------------------------------------------------------
.text:0040EC1D                 align 10h
.text:0040EC20
.text:0040EC20 loc_40EC20:                             ; CODE XREF: sub_40EB90+2F↑j
.text:0040EC20                 cmp     [ebp+var_24], ebx
.text:0040EC23                 jbe     short loc_40EC40
.text:0040EC25                 mov     [ebp+var_20], ecx
.text:0040EC28
.text:0040EC28 loc_40EC28:                             ; CODE XREF: sub_40EB90+15B↓j
.text:0040EC28                 mov     [ebp+var_1C], edi
.text:0040EC2B                 mov     eax, [ebp+var_20]
.text:0040EC2E                 mov     edx, [ebp+var_1C]
.text:0040EC31                 mov     [ebp+var_18], eax
.text:0040EC34                 mov     [ebp+var_14], edx
.text:0040EC37                 jmp     short loc_40EBEE
.text:0040EC37 ; ---------------------------------------------------------------------------
.text:0040EC39                 align 10h
.text:0040EC40
.text:0040EC40 loc_40EC40:                             ; CODE XREF: sub_40EB90+93↑j
.text:0040EC40                 bsr     eax, [ebp+var_24]
.text:0040EC44                 mov     ebx, eax
.text:0040EC46                 xor     ebx, 1Fh
.text:0040EC49                 jnz     short loc_40EC70
.text:0040EC4B                 cmp     edi, [ebp+var_24]
.text:0040EC4E                 ja      short loc_40EC55
.text:0040EC50                 cmp     [ebp+var_28], esi
.text:0040EC53                 jb      short loc_40EC60
.text:0040EC55
.text:0040EC55 loc_40EC55:                             ; CODE XREF: sub_40EB90+BE↑j
.text:0040EC55                 mov     edx, [ebp+var_28]
.text:0040EC58                 sub     edx, esi
.text:0040EC5A                 sbb     edi, [ebp+var_24]
.text:0040EC5D                 mov     [ebp+var_28], edx
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; CODE XREF: sub_40EB90+C3↑j
.text:0040EC60                 lea     ecx, [ebp+var_18]
.text:0040EC63                 test    ecx, ecx
.text:0040EC65                 jz      short loc_40EBEE
.text:0040EC67                 mov     [ebp+var_1C], edi
.text:0040EC6A                 jmp     loc_40EBDC
.text:0040EC6A ; ---------------------------------------------------------------------------
.text:0040EC6F                 align 10h
.text:0040EC70
.text:0040EC70 loc_40EC70:                             ; CODE XREF: sub_40EB90+B9↑j
.text:0040EC70                 mov     edx, [ebp+var_24]
.text:0040EC73                 mov     eax, 20h ; ' '
.text:0040EC78                 mov     cl, bl
.text:0040EC7A                 sub     eax, ebx
.text:0040EC7C                 mov     [ebp+var_2C], eax
.text:0040EC7F                 shl     edx, cl
.text:0040EC81                 mov     eax, esi
.text:0040EC83                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EC87                 shr     eax, cl
.text:0040EC89                 mov     cl, bl
.text:0040EC8B                 shl     esi, cl
.text:0040EC8D                 or      edx, eax
.text:0040EC8F                 mov     eax, [ebp+var_28]
.text:0040EC92                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EC96                 mov     [ebp+var_24], edx
.text:0040EC99                 mov     edx, edi
.text:0040EC9B                 shr     edx, cl
.text:0040EC9D                 mov     cl, bl
.text:0040EC9F                 shl     edi, cl
.text:0040ECA1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040ECA5                 shr     eax, cl
.text:0040ECA7                 or      edi, eax
.text:0040ECA9                 mov     eax, edi
.text:0040ECAB                 mov     cl, bl
.text:0040ECAD                 div     [ebp+var_24]
.text:0040ECB0                 shl     [ebp+var_28], cl
.text:0040ECB3                 mov     edi, edx
.text:0040ECB5                 mul     esi
.text:0040ECB7                 mov     [ebp+var_34], eax
.text:0040ECBA                 cmp     edx, edi
.text:0040ECBC                 ja      short loc_40ECF8
.text:0040ECBE                 cmp     edx, edi
.text:0040ECC0                 jz      short loc_40ECF0
.text:0040ECC2
.text:0040ECC2 loc_40ECC2:                             ; CODE XREF: sub_40EB90+166↓j
.text:0040ECC2                                         ; sub_40EB90+173↓j
.text:0040ECC2                 lea     eax, [ebp+var_18]
.text:0040ECC5                 test    eax, eax
.text:0040ECC7                 jz      loc_40EBEE
.text:0040ECCD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040ECD1                 mov     eax, [ebp+var_28]
.text:0040ECD4                 sub     eax, [ebp+var_34]
.text:0040ECD7                 sbb     edi, edx
.text:0040ECD9                 mov     [ebp+var_28], eax
.text:0040ECDC                 mov     edx, edi
.text:0040ECDE                 shl     edx, cl
.text:0040ECE0                 mov     cl, bl
.text:0040ECE2                 shr     eax, cl
.text:0040ECE4                 or      edx, eax
.text:0040ECE6                 mov     [ebp+var_20], edx
.text:0040ECE9                 shr     edi, cl
.text:0040ECEB                 jmp     loc_40EC28
.text:0040ECF0 ; ---------------------------------------------------------------------------
.text:0040ECF0
.text:0040ECF0 loc_40ECF0:                             ; CODE XREF: sub_40EB90+130↑j
.text:0040ECF0                 mov     eax, [ebp+var_28]
.text:0040ECF3                 cmp     [ebp+var_34], eax
.text:0040ECF6                 jbe     short loc_40ECC2
.text:0040ECF8
.text:0040ECF8 loc_40ECF8:                             ; CODE XREF: sub_40EB90+12C↑j
.text:0040ECF8                 mov     ecx, [ebp+var_34]
.text:0040ECFB                 sub     ecx, esi
.text:0040ECFD                 sbb     edx, [ebp+var_24]
.text:0040ED00                 mov     [ebp+var_34], ecx
.text:0040ED03                 jmp     short loc_40ECC2
.text:0040ED03 sub_40EB90      endp
.text:0040ED03
.text:0040ED03 ; ---------------------------------------------------------------------------
.text:0040ED05                 align 10h
.text:0040ED10
.text:0040ED10 ; =============== S U B R O U T I N E =======================================
.text:0040ED10
.text:0040ED10 ; Attributes: thunk
.text:0040ED10
.text:0040ED10 ; char *__cdecl strdup(const char *String)
.text:0040ED10 _strdup         proc near               ; CODE XREF: sub_404230+32↑p
.text:0040ED10                                         ; sub_40A650+101↑p ...
.text:0040ED10
.text:0040ED10 String          = dword ptr  4
.text:0040ED10
.text:0040ED10                 jmp     ds:__imp__strdup
.text:0040ED10 _strdup         endp
.text:0040ED10
.text:0040ED10 ; ---------------------------------------------------------------------------
.text:0040ED16                 align 10h
.text:0040ED20
.text:0040ED20 ; =============== S U B R O U T I N E =======================================
.text:0040ED20
.text:0040ED20 ; Attributes: thunk
.text:0040ED20
.text:0040ED20 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040ED20 _stricmp        proc near               ; CODE XREF: sub_4079B0+46F↑p
.text:0040ED20                                         ; sub_40AA20+2E↑p ...
.text:0040ED20
.text:0040ED20 String1         = dword ptr  4
.text:0040ED20 String2         = dword ptr  8
.text:0040ED20
.text:0040ED20                 jmp     ds:__imp__stricmp
.text:0040ED20 _stricmp        endp
.text:0040ED20
.text:0040ED20 ; ---------------------------------------------------------------------------
.text:0040ED26                 align 10h
.text:0040ED30
.text:0040ED30 ; =============== S U B R O U T I N E =======================================
.text:0040ED30
.text:0040ED30 ; Attributes: thunk
.text:0040ED30
.text:0040ED30 ; int __cdecl dup(int FileHandle)
.text:0040ED30 _dup            proc near               ; CODE XREF: sub_40B4E0+57↑p
.text:0040ED30
.text:0040ED30 FileHandle      = dword ptr  4
.text:0040ED30
.text:0040ED30                 jmp     ds:__imp__dup
.text:0040ED30 _dup            endp
.text:0040ED30
.text:0040ED30 ; ---------------------------------------------------------------------------
.text:0040ED36                 align 10h
.text:0040ED40
.text:0040ED40 ; =============== S U B R O U T I N E =======================================
.text:0040ED40
.text:0040ED40 ; Attributes: thunk
.text:0040ED40
.text:0040ED40 ; int __cdecl getpid()
.text:0040ED40 _getpid         proc near               ; CODE XREF: sub_40CA70+84↑p
.text:0040ED40                 jmp     ds:__imp__getpid
.text:0040ED40 _getpid         endp
.text:0040ED40
.text:0040ED40 ; ---------------------------------------------------------------------------
.text:0040ED46                 align 10h
.text:0040ED50
.text:0040ED50 ; =============== S U B R O U T I N E =======================================
.text:0040ED50
.text:0040ED50 ; Attributes: thunk
.text:0040ED50
.text:0040ED50 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040ED50 _chmod          proc near               ; CODE XREF: sub_40CEA0+41↑j
.text:0040ED50
.text:0040ED50 FileName        = dword ptr  4
.text:0040ED50 AccessMode      = dword ptr  8
.text:0040ED50
.text:0040ED50                 jmp     ds:__imp__chmod
.text:0040ED50 _chmod          endp
.text:0040ED50
.text:0040ED50 ; ---------------------------------------------------------------------------
.text:0040ED56                 align 10h
.text:0040ED60                 jmp     ds:__set_app_type
.text:0040ED60 ; ---------------------------------------------------------------------------
.text:0040ED66                 align 10h
.text:0040ED70
.text:0040ED70 ; =============== S U B R O U T I N E =======================================
.text:0040ED70
.text:0040ED70 ; Attributes: thunk
.text:0040ED70
.text:0040ED70 ; void __cdecl cexit()
.text:0040ED70 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040ED70                 jmp     ds:__imp__cexit
.text:0040ED70 _cexit          endp
.text:0040ED70
.text:0040ED70 ; ---------------------------------------------------------------------------
.text:0040ED76                 align 10h
.text:0040ED80
.text:0040ED80 ; =============== S U B R O U T I N E =======================================
.text:0040ED80
.text:0040ED80 ; Attributes: thunk
.text:0040ED80
.text:0040ED80 ; char ***__cdecl _p__environ()
.text:0040ED80 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040ED80                 jmp     ds:__imp___p__environ
.text:0040ED80 __p__environ    endp
.text:0040ED80
.text:0040ED80 ; ---------------------------------------------------------------------------
.text:0040ED86                 align 10h
.text:0040ED90
.text:0040ED90 ; =============== S U B R O U T I N E =======================================
.text:0040ED90
.text:0040ED90 ; Attributes: thunk
.text:0040ED90
.text:0040ED90 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040ED90 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040ED90                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040ED90
.text:0040ED90 Signal          = dword ptr  4
.text:0040ED90 Function        = dword ptr  8
.text:0040ED90
.text:0040ED90                 jmp     ds:__imp_signal
.text:0040ED90 signal          endp
.text:0040ED90
.text:0040ED90 ; ---------------------------------------------------------------------------
.text:0040ED96                 align 10h
.text:0040EDA0
.text:0040EDA0 ; =============== S U B R O U T I N E =======================================
.text:0040EDA0
.text:0040EDA0 ; Attributes: thunk
.text:0040EDA0
.text:0040EDA0 ; int *__cdecl _p__fmode()
.text:0040EDA0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040EDA0                 jmp     ds:__imp___p__fmode
.text:0040EDA0 __p__fmode      endp
.text:0040EDA0
.text:0040EDA0 ; ---------------------------------------------------------------------------
.text:0040EDA6                 align 10h
.text:0040EDB0
.text:0040EDB0 ; =============== S U B R O U T I N E =======================================
.text:0040EDB0
.text:0040EDB0 ; Attributes: thunk
.text:0040EDB0
.text:0040EDB0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040EDB0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040EDB0                                         ; sub_401080+90↑p ...
.text:0040EDB0
.text:0040EDB0 FileHandle      = dword ptr  4
.text:0040EDB0 Mode            = dword ptr  8
.text:0040EDB0
.text:0040EDB0                 jmp     ds:__imp__setmode
.text:0040EDB0 _setmode        endp
.text:0040EDB0
.text:0040EDB0 ; ---------------------------------------------------------------------------
.text:0040EDB6                 align 10h
.text:0040EDC0
.text:0040EDC0 ; =============== S U B R O U T I N E =======================================
.text:0040EDC0
.text:0040EDC0 ; Attributes: thunk
.text:0040EDC0
.text:0040EDC0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040EDC0                 jmp     ds:__imp___getmainargs
.text:0040EDC0 __getmainargs   endp
.text:0040EDC0
.text:0040EDC0 ; ---------------------------------------------------------------------------
.text:0040EDC6                 align 10h
.text:0040EDD0
.text:0040EDD0 ; =============== S U B R O U T I N E =======================================
.text:0040EDD0
.text:0040EDD0 ; Attributes: thunk
.text:0040EDD0
.text:0040EDD0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040EDD0 setlocale       proc near               ; CODE XREF: sub_4017F0+35↑p
.text:0040EDD0                                         ; sub_4041C0+24↑p
.text:0040EDD0
.text:0040EDD0 Category        = dword ptr  4
.text:0040EDD0 Locale          = dword ptr  8
.text:0040EDD0
.text:0040EDD0                 jmp     ds:__imp_setlocale
.text:0040EDD0 setlocale       endp
.text:0040EDD0
.text:0040EDD0 ; ---------------------------------------------------------------------------
.text:0040EDD6                 align 10h
.text:0040EDE0
.text:0040EDE0 ; =============== S U B R O U T I N E =======================================
.text:0040EDE0
.text:0040EDE0 ; Attributes: noreturn thunk
.text:0040EDE0
.text:0040EDE0 ; void __cdecl __noreturn exit(int Code)
.text:0040EDE0 exit            proc near               ; CODE XREF: sub_4017F0:loc_4018F3↑p
.text:0040EDE0                                         ; .text:00401BEB↑p ...
.text:0040EDE0
.text:0040EDE0 Code            = dword ptr  4
.text:0040EDE0
.text:0040EDE0                 jmp     ds:__imp_exit
.text:0040EDE0 exit            endp
.text:0040EDE0
.text:0040EDE0 ; ---------------------------------------------------------------------------
.text:0040EDE6                 align 10h
.text:0040EDF0
.text:0040EDF0 ; =============== S U B R O U T I N E =======================================
.text:0040EDF0
.text:0040EDF0 ; Attributes: thunk
.text:0040EDF0
.text:0040EDF0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040EDF0 fputs           proc near               ; CODE XREF: sub_4017F0+162↑p
.text:0040EDF0                                         ; sub_4017F0+184↑p ...
.text:0040EDF0
.text:0040EDF0 Buffer          = dword ptr  4
.text:0040EDF0 Stream          = dword ptr  8
.text:0040EDF0
.text:0040EDF0                 jmp     ds:__imp_fputs
.text:0040EDF0 fputs           endp
.text:0040EDF0
.text:0040EDF0 ; ---------------------------------------------------------------------------
.text:0040EDF6                 align 10h
.text:0040EE00
.text:0040EE00 ; =============== S U B R O U T I N E =======================================
.text:0040EE00
.text:0040EE00 ; Attributes: thunk
.text:0040EE00
.text:0040EE00 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040EE00 fprintf         proc near               ; CODE XREF: sub_4017F0+F7↑p
.text:0040EE00                                         ; .text:00401BE3↑p ...
.text:0040EE00
.text:0040EE00 Stream          = dword ptr  4
.text:0040EE00 Format          = dword ptr  8
.text:0040EE00
.text:0040EE00                 jmp     ds:__imp_fprintf
.text:0040EE00 fprintf         endp
.text:0040EE00
.text:0040EE00 ; ---------------------------------------------------------------------------
.text:0040EE06                 align 10h
.text:0040EE10
.text:0040EE10 ; =============== S U B R O U T I N E =======================================
.text:0040EE10
.text:0040EE10 ; Attributes: thunk
.text:0040EE10
.text:0040EE10 ; int *__cdecl errno()
.text:0040EE10 _errno          proc near               ; CODE XREF: sub_4017F0:loc_401B83↑p
.text:0040EE10                                         ; sub_4040D0:loc_40410D↑p ...
.text:0040EE10                 jmp     ds:__imp__errno
.text:0040EE10 _errno          endp
.text:0040EE10
.text:0040EE10 ; ---------------------------------------------------------------------------
.text:0040EE16                 align 10h
.text:0040EE20
.text:0040EE20 ; =============== S U B R O U T I N E =======================================
.text:0040EE20
.text:0040EE20 ; Attributes: thunk
.text:0040EE20
.text:0040EE20 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040EE20 strncmp         proc near               ; CODE XREF: sub_402140+96↑p
.text:0040EE20                                         ; sub_402C90+23F↑p ...
.text:0040EE20
.text:0040EE20 Str1            = dword ptr  4
.text:0040EE20 Str2            = dword ptr  8
.text:0040EE20 MaxCount        = dword ptr  0Ch
.text:0040EE20
.text:0040EE20                 jmp     ds:__imp_strncmp
.text:0040EE20 strncmp         endp
.text:0040EE20
.text:0040EE20 ; ---------------------------------------------------------------------------
.text:0040EE26                 align 10h
.text:0040EE30
.text:0040EE30 ; =============== S U B R O U T I N E =======================================
.text:0040EE30
.text:0040EE30 ; Attributes: thunk
.text:0040EE30
.text:0040EE30 ; int __cdecl fclose(FILE *Stream)
.text:0040EE30 fclose          proc near               ; CODE XREF: sub_401D40+1E8↑p
.text:0040EE30                                         ; sub_401D40+2B8↑p ...
.text:0040EE30
.text:0040EE30 Stream          = dword ptr  4
.text:0040EE30
.text:0040EE30                 jmp     ds:__imp_fclose
.text:0040EE30 fclose          endp
.text:0040EE30
.text:0040EE30 ; ---------------------------------------------------------------------------
.text:0040EE36                 align 10h
.text:0040EE40
.text:0040EE40 ; =============== S U B R O U T I N E =======================================
.text:0040EE40
.text:0040EE40 ; Attributes: thunk
.text:0040EE40
.text:0040EE40 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:0040EE40 fwrite          proc near               ; CODE XREF: sub_401D40+1DE↑p
.text:0040EE40                                         ; sub_401D40+2AE↑p
.text:0040EE40
.text:0040EE40 Buffer          = dword ptr  4
.text:0040EE40 ElementSize     = dword ptr  8
.text:0040EE40 ElementCount    = dword ptr  0Ch
.text:0040EE40 Stream          = dword ptr  10h
.text:0040EE40
.text:0040EE40                 jmp     ds:__imp_fwrite
.text:0040EE40 fwrite          endp
.text:0040EE40
.text:0040EE40 ; ---------------------------------------------------------------------------
.text:0040EE46                 align 10h
.text:0040EE50
.text:0040EE50 ; =============== S U B R O U T I N E =======================================
.text:0040EE50
.text:0040EE50 ; Attributes: thunk
.text:0040EE50
.text:0040EE50 ; size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:0040EE50 fread           proc near               ; CODE XREF: sub_401D40+1B7↑p
.text:0040EE50                                         ; sub_401D40+287↑p
.text:0040EE50
.text:0040EE50 Buffer          = dword ptr  4
.text:0040EE50 ElementSize     = dword ptr  8
.text:0040EE50 ElementCount    = dword ptr  0Ch
.text:0040EE50 Stream          = dword ptr  10h
.text:0040EE50
.text:0040EE50                 jmp     ds:__imp_fread
.text:0040EE50 fread           endp
.text:0040EE50
.text:0040EE50 ; ---------------------------------------------------------------------------
.text:0040EE56                 align 10h
.text:0040EE60
.text:0040EE60 ; =============== S U B R O U T I N E =======================================
.text:0040EE60
.text:0040EE60 ; Attributes: thunk
.text:0040EE60
.text:0040EE60 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040EE60 strcat          proc near               ; CODE XREF: sub_401D40+162↑p
.text:0040EE60                                         ; sub_401D40+232↑p ...
.text:0040EE60
.text:0040EE60 Destination     = dword ptr  4
.text:0040EE60 Source          = dword ptr  8
.text:0040EE60
.text:0040EE60                 jmp     ds:__imp_strcat
.text:0040EE60 strcat          endp
.text:0040EE60
.text:0040EE60 ; ---------------------------------------------------------------------------
.text:0040EE66                 align 10h
.text:0040EE70
.text:0040EE70 ; =============== S U B R O U T I N E =======================================
.text:0040EE70
.text:0040EE70 ; Attributes: thunk
.text:0040EE70
.text:0040EE70 ; void __cdecl free(void *Block)
.text:0040EE70 free            proc near               ; CODE XREF: sub_401D40+9D↑p
.text:0040EE70                                         ; sub_401D40+1F0↑p ...
.text:0040EE70
.text:0040EE70 Block           = dword ptr  4
.text:0040EE70
.text:0040EE70                 jmp     ds:__imp_free
.text:0040EE70 free            endp
.text:0040EE70
.text:0040EE70 ; ---------------------------------------------------------------------------
.text:0040EE76                 align 10h
.text:0040EE80
.text:0040EE80 ; =============== S U B R O U T I N E =======================================
.text:0040EE80
.text:0040EE80 ; Attributes: thunk
.text:0040EE80
.text:0040EE80 ; int printf(const char *const Format, ...)
.text:0040EE80 printf          proc near               ; CODE XREF: sub_4017F0+140↑p
.text:0040EE80                                         ; sub_4017F0+1E5↑p ...
.text:0040EE80
.text:0040EE80 Format          = dword ptr  4
.text:0040EE80
.text:0040EE80                 jmp     ds:__imp_printf
.text:0040EE80 printf          endp
.text:0040EE80
.text:0040EE80 ; ---------------------------------------------------------------------------
.text:0040EE86                 align 10h
.text:0040EE90
.text:0040EE90 ; =============== S U B R O U T I N E =======================================
.text:0040EE90
.text:0040EE90 ; Attributes: thunk
.text:0040EE90
.text:0040EE90 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040EE90 strcpy          proc near               ; CODE XREF: sub_401D40+152↑p
.text:0040EE90                                         ; sub_401D40+222↑p ...
.text:0040EE90
.text:0040EE90 Destination     = dword ptr  4
.text:0040EE90 Source          = dword ptr  8
.text:0040EE90
.text:0040EE90                 jmp     ds:__imp_strcpy
.text:0040EE90 strcpy          endp
.text:0040EE90
.text:0040EE90 ; ---------------------------------------------------------------------------
.text:0040EE96                 align 10h
.text:0040EEA0
.text:0040EEA0 ; =============== S U B R O U T I N E =======================================
.text:0040EEA0
.text:0040EEA0 ; Attributes: thunk
.text:0040EEA0
.text:0040EEA0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040EEA0 strncpy         proc near               ; CODE XREF: sub_4024B0+54↑p
.text:0040EEA0                                         ; sub_4024B0+246↑p ...
.text:0040EEA0
.text:0040EEA0 Destination     = dword ptr  4
.text:0040EEA0 Source          = dword ptr  8
.text:0040EEA0 Count           = dword ptr  0Ch
.text:0040EEA0
.text:0040EEA0                 jmp     ds:__imp_strncpy
.text:0040EEA0 strncpy         endp
.text:0040EEA0
.text:0040EEA0 ; ---------------------------------------------------------------------------
.text:0040EEA6                 align 10h
.text:0040EEB0
.text:0040EEB0 ; =============== S U B R O U T I N E =======================================
.text:0040EEB0
.text:0040EEB0 ; Attributes: thunk
.text:0040EEB0
.text:0040EEB0 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:0040EEB0 strftime        proc near               ; CODE XREF: sub_4024B0+1BA↑p
.text:0040EEB0
.text:0040EEB0 Buffer          = dword ptr  4
.text:0040EEB0 SizeInBytes     = dword ptr  8
.text:0040EEB0 Format          = dword ptr  0Ch
.text:0040EEB0 Tm              = dword ptr  10h
.text:0040EEB0
.text:0040EEB0                 jmp     ds:__imp_strftime
.text:0040EEB0 strftime        endp
.text:0040EEB0
.text:0040EEB0 ; ---------------------------------------------------------------------------
.text:0040EEB6                 align 10h
.text:0040EEC0
.text:0040EEC0 ; =============== S U B R O U T I N E =======================================
.text:0040EEC0
.text:0040EEC0 ; Attributes: thunk
.text:0040EEC0
.text:0040EEC0 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:0040EEC0 localtime       proc near               ; CODE XREF: sub_4024B0+190↑p
.text:0040EEC0
.text:0040EEC0 Time            = dword ptr  4
.text:0040EEC0
.text:0040EEC0                 jmp     ds:__imp_localtime
.text:0040EEC0 localtime       endp
.text:0040EEC0
.text:0040EEC0 ; ---------------------------------------------------------------------------
.text:0040EEC6                 align 10h
.text:0040EED0
.text:0040EED0 ; =============== S U B R O U T I N E =======================================
.text:0040EED0
.text:0040EED0 ; Attributes: thunk
.text:0040EED0
.text:0040EED0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040EED0 sprintf         proc near               ; CODE XREF: sub_4024B0+165↑p
.text:0040EED0                                         ; sub_4024B0+30B↑p ...
.text:0040EED0
.text:0040EED0 Buffer          = dword ptr  4
.text:0040EED0 Format          = dword ptr  8
.text:0040EED0
.text:0040EED0                 jmp     ds:__imp_sprintf
.text:0040EED0 sprintf         endp
.text:0040EED0
.text:0040EED0 ; ---------------------------------------------------------------------------
.text:0040EED6                 align 10h
.text:0040EEE0
.text:0040EEE0 ; =============== S U B R O U T I N E =======================================
.text:0040EEE0
.text:0040EEE0 ; Attributes: thunk
.text:0040EEE0
.text:0040EEE0 ; __time32_t __cdecl time(__time32_t *const Time)
.text:0040EEE0 time            proc near               ; CODE XREF: sub_4024B0+31C↑p
.text:0040EEE0
.text:0040EEE0 Time            = dword ptr  4
.text:0040EEE0
.text:0040EEE0                 jmp     ds:__imp_time
.text:0040EEE0 time            endp
.text:0040EEE0
.text:0040EEE0 ; ---------------------------------------------------------------------------
.text:0040EEE6                 align 10h
.text:0040EEF0
.text:0040EEF0 ; =============== S U B R O U T I N E =======================================
.text:0040EEF0
.text:0040EEF0 ; Attributes: thunk
.text:0040EEF0
.text:0040EEF0 ; int __cdecl toupper(int C)
.text:0040EEF0 toupper         proc near               ; CODE XREF: sub_402350+E3↑p
.text:0040EEF0                                         ; sub_40A650+10E↑p
.text:0040EEF0
.text:0040EEF0 C               = dword ptr  4
.text:0040EEF0
.text:0040EEF0                 jmp     ds:__imp_toupper
.text:0040EEF0 toupper         endp
.text:0040EEF0
.text:0040EEF0 ; ---------------------------------------------------------------------------
.text:0040EEF6                 align 10h
.text:0040EF00
.text:0040EF00 ; =============== S U B R O U T I N E =======================================
.text:0040EF00
.text:0040EF00 ; Attributes: thunk
.text:0040EF00
.text:0040EF00 ; size_t __cdecl strlen(const char *Str)
.text:0040EF00 strlen          proc near               ; CODE XREF: sub_401D40+136↑p
.text:0040EF00                                         ; sub_401D40+206↑p ...
.text:0040EF00
.text:0040EF00 Str             = dword ptr  4
.text:0040EF00
.text:0040EF00                 jmp     ds:__imp_strlen
.text:0040EF00 strlen          endp
.text:0040EF00
.text:0040EF00 ; ---------------------------------------------------------------------------
.text:0040EF06                 align 10h
.text:0040EF10
.text:0040EF10 ; =============== S U B R O U T I N E =======================================
.text:0040EF10
.text:0040EF10 ; Attributes: thunk
.text:0040EF10
.text:0040EF10 ; int __cdecl isctype(int C, int Type)
.text:0040EF10 _isctype        proc near               ; CODE XREF: sub_402350+BC↑p
.text:0040EF10                                         ; sub_404780+610↑p
.text:0040EF10
.text:0040EF10 C               = dword ptr  4
.text:0040EF10 Type            = dword ptr  8
.text:0040EF10
.text:0040EF10                 jmp     ds:__imp__isctype
.text:0040EF10 _isctype        endp
.text:0040EF10
.text:0040EF10 ; ---------------------------------------------------------------------------
.text:0040EF16                 align 10h
.text:0040EF20
.text:0040EF20 ; =============== S U B R O U T I N E =======================================
.text:0040EF20
.text:0040EF20 ; Attributes: thunk
.text:0040EF20
.text:0040EF20 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040EF20 strchr          proc near               ; CODE XREF: sub_401D40+6B↑p
.text:0040EF20                                         ; sub_4024B0+25E↑p ...
.text:0040EF20
.text:0040EF20 Str             = dword ptr  4
.text:0040EF20 Val             = dword ptr  8
.text:0040EF20
.text:0040EF20                 jmp     ds:__imp_strchr
.text:0040EF20 strchr          endp
.text:0040EF20
.text:0040EF20 ; ---------------------------------------------------------------------------
.text:0040EF26                 align 10h
.text:0040EF30
.text:0040EF30 ; =============== S U B R O U T I N E =======================================
.text:0040EF30
.text:0040EF30 ; Attributes: thunk
.text:0040EF30
.text:0040EF30 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040EF30 fopen           proc near               ; CODE XREF: sub_401D40+172↑p
.text:0040EF30                                         ; sub_401D40+242↑p ...
.text:0040EF30
.text:0040EF30 FileName        = dword ptr  4
.text:0040EF30 Mode            = dword ptr  8
.text:0040EF30
.text:0040EF30                 jmp     ds:__imp_fopen
.text:0040EF30 fopen           endp
.text:0040EF30
.text:0040EF30 ; ---------------------------------------------------------------------------
.text:0040EF36                 align 10h
.text:0040EF40
.text:0040EF40 ; =============== S U B R O U T I N E =======================================
.text:0040EF40
.text:0040EF40 ; Attributes: thunk
.text:0040EF40
.text:0040EF40 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040EF40 _flsbuf         proc near               ; CODE XREF: sub_401D40+128↑p
.text:0040EF40                                         ; sub_401D40+359↑p ...
.text:0040EF40
.text:0040EF40 File            = dword ptr  8
.text:0040EF40
.text:0040EF40                 jmp     ds:__imp__flsbuf
.text:0040EF40 _flsbuf         endp
.text:0040EF40
.text:0040EF40 ; ---------------------------------------------------------------------------
.text:0040EF46                 align 10h
.text:0040EF50
.text:0040EF50 ; =============== S U B R O U T I N E =======================================
.text:0040EF50
.text:0040EF50 ; Attributes: thunk
.text:0040EF50
.text:0040EF50 ; char *__cdecl getenv(const char *VarName)
.text:0040EF50 getenv          proc near               ; CODE XREF: sub_402C90+B57↑p
.text:0040EF50                                         ; sub_4061D0+9D↑p ...
.text:0040EF50
.text:0040EF50 VarName         = dword ptr  4
.text:0040EF50
.text:0040EF50                 jmp     ds:__imp_getenv
.text:0040EF50 getenv          endp
.text:0040EF50
.text:0040EF50 ; ---------------------------------------------------------------------------
.text:0040EF56                 align 10h
.text:0040EF60
.text:0040EF60 ; =============== S U B R O U T I N E =======================================
.text:0040EF60
.text:0040EF60 ; Attributes: thunk
.text:0040EF60
.text:0040EF60 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040EF60 vfprintf        proc near               ; CODE XREF: sub_403D50+C1↑p
.text:0040EF60                                         ; sub_405AE0+49↑p ...
.text:0040EF60
.text:0040EF60 Stream          = dword ptr  4
.text:0040EF60 Format          = dword ptr  8
.text:0040EF60 ArgList         = dword ptr  0Ch
.text:0040EF60
.text:0040EF60                 jmp     ds:__imp_vfprintf
.text:0040EF60 vfprintf        endp
.text:0040EF60
.text:0040EF60 ; ---------------------------------------------------------------------------
.text:0040EF66                 align 10h
.text:0040EF70
.text:0040EF70 ; =============== S U B R O U T I N E =======================================
.text:0040EF70
.text:0040EF70 ; Attributes: noreturn thunk
.text:0040EF70
.text:0040EF70 ; void __cdecl __noreturn abort()
.text:0040EF70 abort           proc near               ; CODE XREF: sub_403D50:loc_403DEC↑p
.text:0040EF70                                         ; sub_4046B0+32↑p ...
.text:0040EF70                 jmp     ds:__imp_abort
.text:0040EF70 abort           endp
.text:0040EF70
.text:0040EF70 ; ---------------------------------------------------------------------------
.text:0040EF76                 align 10h
.text:0040EF80
.text:0040EF80 ; =============== S U B R O U T I N E =======================================
.text:0040EF80
.text:0040EF80 ; Attributes: thunk
.text:0040EF80
.text:0040EF80 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040EF80 memcpy          proc near               ; CODE XREF: sub_404230+95↑p
.text:0040EF80                                         ; .text:004045A8↑p ...
.text:0040EF80
.text:0040EF80 Src             = dword ptr  8
.text:0040EF80 Size            = dword ptr  0Ch
.text:0040EF80
.text:0040EF80                 jmp     ds:__imp_memcpy
.text:0040EF80 memcpy          endp
.text:0040EF80
.text:0040EF80 ; ---------------------------------------------------------------------------
.text:0040EF86                 align 10h
.text:0040EF90
.text:0040EF90 ; =============== S U B R O U T I N E =======================================
.text:0040EF90
.text:0040EF90 ; Attributes: thunk
.text:0040EF90
.text:0040EF90 ; void *__cdecl malloc(size_t Size)
.text:0040EF90 malloc          proc near               ; CODE XREF: sub_404230+76↑p
.text:0040EF90                                         ; .text:004043E4↑p ...
.text:0040EF90
.text:0040EF90 Size            = dword ptr  4
.text:0040EF90
.text:0040EF90                 jmp     ds:__imp_malloc
.text:0040EF90 malloc          endp
.text:0040EF90
.text:0040EF90 ; ---------------------------------------------------------------------------
.text:0040EF96                 align 10h
.text:0040EFA0
.text:0040EFA0 ; =============== S U B R O U T I N E =======================================
.text:0040EFA0
.text:0040EFA0 ; Attributes: thunk
.text:0040EFA0
.text:0040EFA0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040EFA0 strcmp          proc near               ; CODE XREF: sub_404230+66↑p
.text:0040EFA0                                         ; sub_405BE4+180↑p ...
.text:0040EFA0
.text:0040EFA0 Str1            = dword ptr  4
.text:0040EFA0 Str2            = dword ptr  8
.text:0040EFA0
.text:0040EFA0                 jmp     ds:__imp_strcmp
.text:0040EFA0 strcmp          endp
.text:0040EFA0
.text:0040EFA0 ; ---------------------------------------------------------------------------
.text:0040EFA6                 align 10h
.text:0040EFB0
.text:0040EFB0 ; =============== S U B R O U T I N E =======================================
.text:0040EFB0
.text:0040EFB0 ; Attributes: thunk
.text:0040EFB0
.text:0040EFB0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040EFB0 memset          proc near               ; CODE XREF: .text:00404526↑p
.text:0040EFB0
.text:0040EFB0 Val             = dword ptr  8
.text:0040EFB0 Size            = dword ptr  0Ch
.text:0040EFB0
.text:0040EFB0                 jmp     ds:__imp_memset
.text:0040EFB0 memset          endp
.text:0040EFB0
.text:0040EFB0 ; ---------------------------------------------------------------------------
.text:0040EFB6                 align 10h
.text:0040EFC0
.text:0040EFC0 ; =============== S U B R O U T I N E =======================================
.text:0040EFC0
.text:0040EFC0 ; Attributes: thunk
.text:0040EFC0
.text:0040EFC0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040EFC0 calloc          proc near               ; CODE XREF: .text:00404563↑p
.text:0040EFC0                                         ; sub_40A650+AC↑p
.text:0040EFC0
.text:0040EFC0 Count           = dword ptr  4
.text:0040EFC0 Size            = dword ptr  8
.text:0040EFC0
.text:0040EFC0                 jmp     ds:__imp_calloc
.text:0040EFC0 calloc          endp
.text:0040EFC0
.text:0040EFC0 ; ---------------------------------------------------------------------------
.text:0040EFC6                 align 10h
.text:0040EFD0
.text:0040EFD0 ; =============== S U B R O U T I N E =======================================
.text:0040EFD0
.text:0040EFD0 ; Attributes: thunk
.text:0040EFD0
.text:0040EFD0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040EFD0 realloc         proc near               ; CODE XREF: sub_404430+30↑p
.text:0040EFD0                                         ; sub_404490+16↑p ...
.text:0040EFD0
.text:0040EFD0 Block           = dword ptr  4
.text:0040EFD0 Size            = dword ptr  8
.text:0040EFD0
.text:0040EFD0                 jmp     ds:__imp_realloc
.text:0040EFD0 realloc         endp
.text:0040EFD0
.text:0040EFD0 ; ---------------------------------------------------------------------------
.text:0040EFD6                 align 10h
.text:0040EFE0
.text:0040EFE0 ; =============== S U B R O U T I N E =======================================
.text:0040EFE0
.text:0040EFE0 ; Attributes: thunk
.text:0040EFE0
.text:0040EFE0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040EFE0 iswctype        proc near               ; CODE XREF: sub_404780+78B↑p
.text:0040EFE0
.text:0040EFE0 C               = word ptr  4
.text:0040EFE0 Type            = word ptr  8
.text:0040EFE0
.text:0040EFE0                 jmp     ds:__imp_iswctype
.text:0040EFE0 iswctype        endp
.text:0040EFE0
.text:0040EFE0 ; ---------------------------------------------------------------------------
.text:0040EFE6                 align 10h
.text:0040EFF0
.text:0040EFF0 ; =============== S U B R O U T I N E =======================================
.text:0040EFF0
.text:0040EFF0 ; Attributes: thunk
.text:0040EFF0
.text:0040EFF0 ; int __cdecl fflush(FILE *Stream)
.text:0040EFF0 fflush          proc near               ; CODE XREF: sub_405AE0+19↑p
.text:0040EFF0                                         ; sub_405AE0+81↑p ...
.text:0040EFF0
.text:0040EFF0 Stream          = dword ptr  4
.text:0040EFF0
.text:0040EFF0                 jmp     ds:__imp_fflush
.text:0040EFF0 fflush          endp
.text:0040EFF0
.text:0040EFF0 ; ---------------------------------------------------------------------------
.text:0040EFF6                 align 10h
.text:0040F000
.text:0040F000 ; =============== S U B R O U T I N E =======================================
.text:0040F000
.text:0040F000 ; Attributes: thunk
.text:0040F000
.text:0040F000 ; char *__cdecl strerror(int ErrorMessage)
.text:0040F000 strerror        proc near               ; CODE XREF: sub_405AE0+A5↑p
.text:0040F000                                         ; sub_405BE4+10F↑p
.text:0040F000
.text:0040F000 ErrorMessage    = dword ptr  4
.text:0040F000
.text:0040F000                 jmp     ds:__imp_strerror
.text:0040F000 strerror        endp
.text:0040F000
.text:0040F000 ; ---------------------------------------------------------------------------
.text:0040F006                 align 10h
.text:0040F010
.text:0040F010 ; =============== S U B R O U T I N E =======================================
.text:0040F010
.text:0040F010 ; Attributes: thunk
.text:0040F010
.text:0040F010 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040F010 strrchr         proc near               ; CODE XREF: sub_406080+49↑p
.text:0040F010                                         ; .text:00406C9E↑p ...
.text:0040F010
.text:0040F010 Str             = dword ptr  4
.text:0040F010
.text:0040F010                 jmp     ds:__imp_strrchr
.text:0040F010 strrchr         endp
.text:0040F010
.text:0040F010 ; ---------------------------------------------------------------------------
.text:0040F016                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020 ; Attributes: thunk
.text:0040F020
.text:0040F020 ; char *__cdecl strdup_0(const char *String)
.text:0040F020 _strdup_0       proc near               ; CODE XREF: sub_4065E0+88↑p
.text:0040F020
.text:0040F020 String          = dword ptr  4
.text:0040F020
.text:0040F020                 jmp     ds:__imp__strdup_0
.text:0040F020 _strdup_0       endp
.text:0040F020
.text:0040F020 ; ---------------------------------------------------------------------------
.text:0040F026                 align 10h
.text:0040F030
.text:0040F030 ; =============== S U B R O U T I N E =======================================
.text:0040F030
.text:0040F030 ; Attributes: thunk
.text:0040F030
.text:0040F030 ; int __cdecl isalpha(int C)
.text:0040F030 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040F030
.text:0040F030 C               = dword ptr  4
.text:0040F030
.text:0040F030                 jmp     ds:__imp_isalpha
.text:0040F030 isalpha         endp
.text:0040F030
.text:0040F030 ; ---------------------------------------------------------------------------
.text:0040F036                 align 10h
.text:0040F040
.text:0040F040 ; =============== S U B R O U T I N E =======================================
.text:0040F040
.text:0040F040 ; Attributes: thunk
.text:0040F040
.text:0040F040 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040F040 _stricmp_0      proc near               ; CODE XREF: .text:00406D84↑p
.text:0040F040
.text:0040F040 String1         = dword ptr  4
.text:0040F040 String2         = dword ptr  8
.text:0040F040
.text:0040F040                 jmp     ds:__imp__stricmp_0
.text:0040F040 _stricmp_0      endp
.text:0040F040
.text:0040F040 ; ---------------------------------------------------------------------------
.text:0040F046                 align 10h
.text:0040F050
.text:0040F050 ; =============== S U B R O U T I N E =======================================
.text:0040F050
.text:0040F050 ; Attributes: thunk
.text:0040F050
.text:0040F050 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040F050 strstr          proc near               ; CODE XREF: sub_4079B0+3BF↑p
.text:0040F050                                         ; sub_4079B0+3DC↑p ...
.text:0040F050
.text:0040F050 Str             = dword ptr  4
.text:0040F050 SubStr          = dword ptr  8
.text:0040F050
.text:0040F050                 jmp     ds:__imp_strstr
.text:0040F050 strstr          endp
.text:0040F050
.text:0040F050 ; ---------------------------------------------------------------------------
.text:0040F056                 align 10h
.text:0040F060
.text:0040F060 ; =============== S U B R O U T I N E =======================================
.text:0040F060
.text:0040F060 ; Attributes: thunk
.text:0040F060
.text:0040F060 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0040F060 _lseeki64       proc near               ; CODE XREF: sub_408D50+30↑p
.text:0040F060                                         ; sub_409190+144↑p ...
.text:0040F060
.text:0040F060 FileHandle      = dword ptr  4
.text:0040F060 Offset          = qword ptr  8
.text:0040F060 Origin          = dword ptr  10h
.text:0040F060
.text:0040F060                 jmp     ds:__imp__lseeki64
.text:0040F060 _lseeki64       endp
.text:0040F060
.text:0040F060 ; ---------------------------------------------------------------------------
.text:0040F066                 align 10h
.text:0040F070
.text:0040F070 ; =============== S U B R O U T I N E =======================================
.text:0040F070
.text:0040F070 ; Attributes: thunk
.text:0040F070
.text:0040F070 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040F070 _open           proc near               ; CODE XREF: sub_408D50+71↑p
.text:0040F070                                         ; sub_408D50+EA↑p ...
.text:0040F070
.text:0040F070 FileName        = dword ptr  4
.text:0040F070 OpenFlag        = dword ptr  8
.text:0040F070
.text:0040F070                 jmp     ds:__imp__open
.text:0040F070 _open           endp
.text:0040F070
.text:0040F070 ; ---------------------------------------------------------------------------
.text:0040F076                 align 10h
.text:0040F080
.text:0040F080 ; =============== S U B R O U T I N E =======================================
.text:0040F080
.text:0040F080 ; Attributes: thunk
.text:0040F080
.text:0040F080 ; int __cdecl close(int FileHandle)
.text:0040F080 _close          proc near               ; CODE XREF: sub_408D50+D3↑p
.text:0040F080                                         ; sub_4094C0+134↑p ...
.text:0040F080
.text:0040F080 FileHandle      = dword ptr  4
.text:0040F080
.text:0040F080                 jmp     ds:__imp__close
.text:0040F080 _close          endp
.text:0040F080
.text:0040F080 ; ---------------------------------------------------------------------------
.text:0040F086                 align 10h
.text:0040F090
.text:0040F090 ; =============== S U B R O U T I N E =======================================
.text:0040F090
.text:0040F090 ; Attributes: thunk
.text:0040F090
.text:0040F090 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0040F090 _write          proc near               ; CODE XREF: sub_409190+15E↑p
.text:0040F090                                         ; sub_4094C0+102↑p
.text:0040F090
.text:0040F090 FileHandle      = dword ptr  4
.text:0040F090 Buf             = dword ptr  8
.text:0040F090 MaxCharCount    = dword ptr  0Ch
.text:0040F090
.text:0040F090                 jmp     ds:__imp__write
.text:0040F090 _write          endp
.text:0040F090
.text:0040F090 ; ---------------------------------------------------------------------------
.text:0040F096                 align 10h
.text:0040F0A0
.text:0040F0A0 ; =============== S U B R O U T I N E =======================================
.text:0040F0A0
.text:0040F0A0 ; Attributes: noreturn thunk
.text:0040F0A0
.text:0040F0A0 _assert         proc near               ; CODE XREF: sub_408E90+145↑p
.text:0040F0A0                                         ; sub_408FE0+1A5↑p ...
.text:0040F0A0                 jmp     ds:__imp__assert
.text:0040F0A0 _assert         endp
.text:0040F0A0
.text:0040F0A0 ; ---------------------------------------------------------------------------
.text:0040F0A6                 align 10h
.text:0040F0B0
.text:0040F0B0 ; =============== S U B R O U T I N E =======================================
.text:0040F0B0
.text:0040F0B0 ; Attributes: thunk
.text:0040F0B0
.text:0040F0B0 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0040F0B0 _read           proc near               ; CODE XREF: sub_408E90+86↑p
.text:0040F0B0                                         ; sub_408FE0+89↑p ...
.text:0040F0B0
.text:0040F0B0 FileHandle      = dword ptr  4
.text:0040F0B0 DstBuf          = dword ptr  8
.text:0040F0B0 MaxCharCount    = dword ptr  0Ch
.text:0040F0B0
.text:0040F0B0                 jmp     ds:__imp__read
.text:0040F0B0 _read           endp
.text:0040F0B0
.text:0040F0B0 ; ---------------------------------------------------------------------------
.text:0040F0B6                 align 10h
.text:0040F0C0
.text:0040F0C0 ; =============== S U B R O U T I N E =======================================
.text:0040F0C0
.text:0040F0C0 ; Attributes: thunk
.text:0040F0C0
.text:0040F0C0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040F0C0 _get_osfhandle  proc near               ; CODE XREF: sub_40B310+22↑p
.text:0040F0C0                                         ; sub_40B3C0+12↑p ...
.text:0040F0C0
.text:0040F0C0 FileHandle      = dword ptr  4
.text:0040F0C0
.text:0040F0C0                 jmp     ds:__imp__get_osfhandle
.text:0040F0C0 _get_osfhandle  endp
.text:0040F0C0
.text:0040F0C0 ; ---------------------------------------------------------------------------
.text:0040F0C6                 align 10h
.text:0040F0D0
.text:0040F0D0 ; =============== S U B R O U T I N E =======================================
.text:0040F0D0
.text:0040F0D0 ; Attributes: thunk
.text:0040F0D0
.text:0040F0D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040F0D0 _filelengthi64  proc near               ; CODE XREF: sub_40B3C0+113↑p
.text:0040F0D0                                         ; sub_40C520+1F↑p
.text:0040F0D0
.text:0040F0D0 FileHandle      = dword ptr  4
.text:0040F0D0
.text:0040F0D0                 jmp     ds:__imp__filelengthi64
.text:0040F0D0 _filelengthi64  endp
.text:0040F0D0
.text:0040F0D0 ; ---------------------------------------------------------------------------
.text:0040F0D6                 align 10h
.text:0040F0E0
.text:0040F0E0 ; =============== S U B R O U T I N E =======================================
.text:0040F0E0
.text:0040F0E0 ; Attributes: thunk
.text:0040F0E0
.text:0040F0E0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040F0E0 sscanf          proc near               ; CODE XREF: .text:0040B9AE↑p
.text:0040F0E0
.text:0040F0E0 Buffer          = dword ptr  4
.text:0040F0E0 Format          = dword ptr  8
.text:0040F0E0
.text:0040F0E0                 jmp     ds:__imp_sscanf
.text:0040F0E0 sscanf          endp
.text:0040F0E0
.text:0040F0E0 ; ---------------------------------------------------------------------------
.text:0040F0E6                 align 10h
.text:0040F0F0
.text:0040F0F0 ; =============== S U B R O U T I N E =======================================
.text:0040F0F0
.text:0040F0F0 ; Attributes: thunk
.text:0040F0F0
.text:0040F0F0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040F0F0 strspn          proc near               ; CODE XREF: .text:0040B7FA↑p
.text:0040F0F0                                         ; .text:0040BA14↑p ...
.text:0040F0F0
.text:0040F0F0 Str             = dword ptr  4
.text:0040F0F0 Control         = dword ptr  8
.text:0040F0F0
.text:0040F0F0                 jmp     ds:__imp_strspn
.text:0040F0F0 strspn          endp
.text:0040F0F0
.text:0040F0F0 ; ---------------------------------------------------------------------------
.text:0040F0F6                 align 10h
.text:0040F100
.text:0040F100 ; =============== S U B R O U T I N E =======================================
.text:0040F100
.text:0040F100 ; Attributes: thunk
.text:0040F100
.text:0040F100 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040F100 strpbrk         proc near               ; CODE XREF: sub_40C580+87↑p
.text:0040F100
.text:0040F100 Str             = dword ptr  4
.text:0040F100 Control         = dword ptr  8
.text:0040F100
.text:0040F100                 jmp     ds:__imp_strpbrk
.text:0040F100 strpbrk         endp
.text:0040F100
.text:0040F100 ; ---------------------------------------------------------------------------
.text:0040F106                 align 10h
.text:0040F110
.text:0040F110 ; =============== S U B R O U T I N E =======================================
.text:0040F110
.text:0040F110 ; Attributes: thunk
.text:0040F110
.text:0040F110 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040F110 _fdopen         proc near               ; CODE XREF: sub_40C620+69↑p
.text:0040F110
.text:0040F110 FileHandle      = dword ptr  4
.text:0040F110 Format          = dword ptr  8
.text:0040F110
.text:0040F110                 jmp     ds:__imp__fdopen
.text:0040F110 _fdopen         endp
.text:0040F110
.text:0040F110 ; ---------------------------------------------------------------------------
.text:0040F116                 align 10h
.text:0040F120
.text:0040F120 ; =============== S U B R O U T I N E =======================================
.text:0040F120
.text:0040F120 ; Attributes: thunk
.text:0040F120
.text:0040F120 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040F120 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040F120
.text:0040F120 lpTopLevelExceptionFilter= dword ptr  4
.text:0040F120
.text:0040F120                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040F120 SetUnhandledExceptionFilter endp
.text:0040F120
.text:0040F120 ; ---------------------------------------------------------------------------
.text:0040F126                 align 10h
.text:0040F130
.text:0040F130 ; =============== S U B R O U T I N E =======================================
.text:0040F130
.text:0040F130 ; Attributes: noreturn thunk
.text:0040F130
.text:0040F130 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040F130 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040F130
.text:0040F130 uExitCode       = dword ptr  4
.text:0040F130
.text:0040F130                 jmp     ds:__imp_ExitProcess
.text:0040F130 ExitProcess     endp
.text:0040F130
.text:0040F130 ; ---------------------------------------------------------------------------
.text:0040F136                 align 10h
.text:0040F140
.text:0040F140 ; =============== S U B R O U T I N E =======================================
.text:0040F140
.text:0040F140 ; Attributes: thunk
.text:0040F140
.text:0040F140 ; BOOL __stdcall AreFileApisANSI()
.text:0040F140 AreFileApisANSI proc near               ; CODE XREF: sub_405F00+89↑p
.text:0040F140                 jmp     ds:__imp_AreFileApisANSI
.text:0040F140 AreFileApisANSI endp
.text:0040F140
.text:0040F140 ; ---------------------------------------------------------------------------
.text:0040F146                 align 10h
.text:0040F150
.text:0040F150 ; =============== S U B R O U T I N E =======================================
.text:0040F150
.text:0040F150 ; Attributes: thunk
.text:0040F150
.text:0040F150 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040F150 MultiByteToWideChar proc near           ; CODE XREF: sub_405F00+BD↑p
.text:0040F150
.text:0040F150 CodePage        = dword ptr  4
.text:0040F150 dwFlags         = dword ptr  8
.text:0040F150 lpMultiByteStr  = dword ptr  0Ch
.text:0040F150 cbMultiByte     = dword ptr  10h
.text:0040F150 lpWideCharStr   = dword ptr  14h
.text:0040F150 cchWideChar     = dword ptr  18h
.text:0040F150
.text:0040F150                 jmp     ds:__imp_MultiByteToWideChar
.text:0040F150 MultiByteToWideChar endp
.text:0040F150
.text:0040F150 ; ---------------------------------------------------------------------------
.text:0040F156                 align 10h
.text:0040F160
.text:0040F160 ; =============== S U B R O U T I N E =======================================
.text:0040F160
.text:0040F160 ; Attributes: thunk
.text:0040F160
.text:0040F160 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040F160 lstrcpyA        proc near               ; CODE XREF: sub_405F00+128↑p
.text:0040F160
.text:0040F160 lpString1       = dword ptr  4
.text:0040F160 lpString2       = dword ptr  8
.text:0040F160
.text:0040F160                 jmp     ds:__imp_lstrcpyA
.text:0040F160 lstrcpyA        endp
.text:0040F160
.text:0040F160 ; ---------------------------------------------------------------------------
.text:0040F166                 align 10h
.text:0040F170
.text:0040F170 ; =============== S U B R O U T I N E =======================================
.text:0040F170
.text:0040F170 ; Attributes: thunk
.text:0040F170
.text:0040F170 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040F170 SetErrorMode    proc near               ; CODE XREF: sub_406080+80↑p
.text:0040F170                                         ; sub_406080+A9↑p ...
.text:0040F170
.text:0040F170 uMode           = dword ptr  4
.text:0040F170
.text:0040F170                 jmp     ds:__imp_SetErrorMode
.text:0040F170 SetErrorMode    endp
.text:0040F170
.text:0040F170 ; ---------------------------------------------------------------------------
.text:0040F176                 align 10h
.text:0040F180
.text:0040F180 ; =============== S U B R O U T I N E =======================================
.text:0040F180
.text:0040F180 ; Attributes: thunk
.text:0040F180
.text:0040F180 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F180 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:0040F180                                         ; sub_4071F0+CE↑p ...
.text:0040F180
.text:0040F180 lpFileName      = dword ptr  4
.text:0040F180 lpFindFileData  = dword ptr  8
.text:0040F180
.text:0040F180                 jmp     ds:__imp_FindFirstFileA
.text:0040F180 FindFirstFileA  endp
.text:0040F180
.text:0040F180 ; ---------------------------------------------------------------------------
.text:0040F186                 align 10h
.text:0040F190
.text:0040F190 ; =============== S U B R O U T I N E =======================================
.text:0040F190
.text:0040F190 ; Attributes: thunk
.text:0040F190
.text:0040F190 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040F190 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:0040F190                                         ; _win32_longpath+185↑p ...
.text:0040F190
.text:0040F190 hFindFile       = dword ptr  4
.text:0040F190
.text:0040F190                 jmp     ds:__imp_FindClose
.text:0040F190 FindClose       endp
.text:0040F190
.text:0040F190 ; ---------------------------------------------------------------------------
.text:0040F196                 align 10h
.text:0040F1A0
.text:0040F1A0 ; =============== S U B R O U T I N E =======================================
.text:0040F1A0
.text:0040F1A0 ; Attributes: thunk
.text:0040F1A0
.text:0040F1A0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040F1A0 GetModuleFileNameA proc near            ; CODE XREF: sub_406C00+1C↑p
.text:0040F1A0
.text:0040F1A0 hModule         = dword ptr  4
.text:0040F1A0 lpFilename      = dword ptr  8
.text:0040F1A0 nSize           = dword ptr  0Ch
.text:0040F1A0
.text:0040F1A0                 jmp     ds:__imp_GetModuleFileNameA
.text:0040F1A0 GetModuleFileNameA endp
.text:0040F1A0
.text:0040F1A0 ; ---------------------------------------------------------------------------
.text:0040F1A6                 align 10h
.text:0040F1B0
.text:0040F1B0 ; =============== S U B R O U T I N E =======================================
.text:0040F1B0
.text:0040F1B0 ; Attributes: thunk
.text:0040F1B0
.text:0040F1B0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040F1B0 GetModuleHandleA proc near              ; CODE XREF: .text:00406DEE↑p
.text:0040F1B0                                         ; sub_4071F0+18↑p ...
.text:0040F1B0
.text:0040F1B0 lpModuleName    = dword ptr  4
.text:0040F1B0
.text:0040F1B0                 jmp     ds:__imp_GetModuleHandleA
.text:0040F1B0 GetModuleHandleA endp
.text:0040F1B0
.text:0040F1B0 ; ---------------------------------------------------------------------------
.text:0040F1B6                 align 10h
.text:0040F1C0
.text:0040F1C0 ; =============== S U B R O U T I N E =======================================
.text:0040F1C0
.text:0040F1C0 ; Attributes: thunk
.text:0040F1C0
.text:0040F1C0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040F1C0 GetProcAddress  proc near               ; CODE XREF: .text:00406E01↑p
.text:0040F1C0                                         ; sub_4071F0+33↑p ...
.text:0040F1C0
.text:0040F1C0 hModule         = dword ptr  4
.text:0040F1C0 lpProcName      = dword ptr  8
.text:0040F1C0
.text:0040F1C0                 jmp     ds:__imp_GetProcAddress
.text:0040F1C0 GetProcAddress  endp
.text:0040F1C0
.text:0040F1C0 ; ---------------------------------------------------------------------------
.text:0040F1C6                 align 10h
.text:0040F1D0
.text:0040F1D0 ; =============== S U B R O U T I N E =======================================
.text:0040F1D0
.text:0040F1D0 ; Attributes: thunk
.text:0040F1D0
.text:0040F1D0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040F1D0 GetShortPathNameA proc near             ; CODE XREF: .text:00406E86↑p
.text:0040F1D0                                         ; .text:00406EB0↑p
.text:0040F1D0
.text:0040F1D0 lpszLongPath    = dword ptr  4
.text:0040F1D0 lpszShortPath   = dword ptr  8
.text:0040F1D0 cchBuffer       = dword ptr  0Ch
.text:0040F1D0
.text:0040F1D0                 jmp     ds:__imp_GetShortPathNameA
.text:0040F1D0 GetShortPathNameA endp
.text:0040F1D0
.text:0040F1D0 ; ---------------------------------------------------------------------------
.text:0040F1D6                 align 10h
.text:0040F1E0
.text:0040F1E0 ; =============== S U B R O U T I N E =======================================
.text:0040F1E0
.text:0040F1E0 ; Attributes: thunk
.text:0040F1E0
.text:0040F1E0 ; DWORD __stdcall GetLastError()
.text:0040F1E0 GetLastError    proc near               ; CODE XREF: sub_407190+3↑p
.text:0040F1E0                                         ; sub_4079B0:loc_407C39↑p ...
.text:0040F1E0                 jmp     ds:__imp_GetLastError
.text:0040F1E0 GetLastError    endp
.text:0040F1E0
.text:0040F1E0 ; ---------------------------------------------------------------------------
.text:0040F1E6                 align 10h
.text:0040F1F0
.text:0040F1F0 ; =============== S U B R O U T I N E =======================================
.text:0040F1F0
.text:0040F1F0 ; Attributes: thunk
.text:0040F1F0
.text:0040F1F0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040F1F0 GetFileAttributesA proc near            ; CODE XREF: sub_4071F0+47↑p
.text:0040F1F0                                         ; sub_40A570+62↑p
.text:0040F1F0
.text:0040F1F0 lpFileName      = dword ptr  4
.text:0040F1F0
.text:0040F1F0                 jmp     ds:__imp_GetFileAttributesA
.text:0040F1F0 GetFileAttributesA endp
.text:0040F1F0
.text:0040F1F0 ; ---------------------------------------------------------------------------
.text:0040F1F6                 align 10h
.text:0040F200
.text:0040F200 ; =============== S U B R O U T I N E =======================================
.text:0040F200
.text:0040F200 ; Attributes: thunk
.text:0040F200
.text:0040F200 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040F200 FreeLibrary     proc near               ; CODE XREF: sub_4071F0+A4↑p
.text:0040F200                                         ; sub_407360+11D↑p ...
.text:0040F200
.text:0040F200 hLibModule      = dword ptr  4
.text:0040F200
.text:0040F200                 jmp     ds:__imp_FreeLibrary
.text:0040F200 FreeLibrary     endp
.text:0040F200
.text:0040F200 ; ---------------------------------------------------------------------------
.text:0040F206                 align 10h
.text:0040F210
.text:0040F210 ; =============== S U B R O U T I N E =======================================
.text:0040F210
.text:0040F210 ; Attributes: thunk
.text:0040F210
.text:0040F210 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040F210 LoadLibraryA    proc near               ; CODE XREF: sub_407360+13↑p
.text:0040F210                                         ; sub_4079B0+134↑p ...
.text:0040F210
.text:0040F210 lpLibFileName   = dword ptr  4
.text:0040F210
.text:0040F210                 jmp     ds:__imp_LoadLibraryA
.text:0040F210 LoadLibraryA    endp
.text:0040F210
.text:0040F210 ; ---------------------------------------------------------------------------
.text:0040F216                 align 10h
.text:0040F220
.text:0040F220 ; =============== S U B R O U T I N E =======================================
.text:0040F220
.text:0040F220 ; Attributes: thunk
.text:0040F220
.text:0040F220 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F220 FindNextFileA   proc near               ; CODE XREF: sub_407360+FF↑p
.text:0040F220
.text:0040F220 hFindFile       = dword ptr  4
.text:0040F220 lpFindFileData  = dword ptr  8
.text:0040F220
.text:0040F220                 jmp     ds:__imp_FindNextFileA
.text:0040F220 FindNextFileA   endp
.text:0040F220
.text:0040F220 ; ---------------------------------------------------------------------------
.text:0040F226                 align 10h
.text:0040F230
.text:0040F230 ; =============== S U B R O U T I N E =======================================
.text:0040F230
.text:0040F230 ; Attributes: thunk
.text:0040F230
.text:0040F230 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040F230 GetFileType     proc near               ; CODE XREF: sub_4074E0+43↑p
.text:0040F230                                         ; .text:0040819A↑p
.text:0040F230
.text:0040F230 hFile           = dword ptr  4
.text:0040F230
.text:0040F230                 jmp     ds:__imp_GetFileType
.text:0040F230 GetFileType     endp
.text:0040F230
.text:0040F230 ; ---------------------------------------------------------------------------
.text:0040F236                 align 10h
.text:0040F240
.text:0040F240 ; =============== S U B R O U T I N E =======================================
.text:0040F240
.text:0040F240 ; Attributes: thunk
.text:0040F240
.text:0040F240 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040F240 GetFileInformationByHandle proc near    ; CODE XREF: sub_4074E0+69↑p
.text:0040F240
.text:0040F240 hFile           = dword ptr  4
.text:0040F240 lpFileInformation= dword ptr  8
.text:0040F240
.text:0040F240                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040F240 GetFileInformationByHandle endp
.text:0040F240
.text:0040F240 ; ---------------------------------------------------------------------------
.text:0040F246                 align 10h
.text:0040F250
.text:0040F250 ; =============== S U B R O U T I N E =======================================
.text:0040F250
.text:0040F250 ; Attributes: thunk
.text:0040F250
.text:0040F250 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040F250 GetFileSize     proc near               ; CODE XREF: sub_4074E0+3F2↑p
.text:0040F250
.text:0040F250 hFile           = dword ptr  4
.text:0040F250 lpFileSizeHigh  = dword ptr  8
.text:0040F250
.text:0040F250                 jmp     ds:__imp_GetFileSize
.text:0040F250 GetFileSize     endp
.text:0040F250
.text:0040F250 ; ---------------------------------------------------------------------------
.text:0040F256                 align 10h
.text:0040F260
.text:0040F260 ; =============== S U B R O U T I N E =======================================
.text:0040F260
.text:0040F260 ; Attributes: thunk
.text:0040F260
.text:0040F260 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040F260 PeekNamedPipe   proc near               ; CODE XREF: sub_4074E0+439↑p
.text:0040F260
.text:0040F260 hNamedPipe      = dword ptr  4
.text:0040F260 lpBuffer        = dword ptr  8
.text:0040F260 nBufferSize     = dword ptr  0Ch
.text:0040F260 lpBytesRead     = dword ptr  10h
.text:0040F260 lpTotalBytesAvail= dword ptr  14h
.text:0040F260 lpBytesLeftThisMessage= dword ptr  18h
.text:0040F260
.text:0040F260                 jmp     ds:__imp_PeekNamedPipe
.text:0040F260 PeekNamedPipe   endp
.text:0040F260
.text:0040F260 ; ---------------------------------------------------------------------------
.text:0040F266                 align 10h
.text:0040F270
.text:0040F270 ; =============== S U B R O U T I N E =======================================
.text:0040F270
.text:0040F270 ; Attributes: thunk
.text:0040F270
.text:0040F270 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040F270 GetDriveTypeA   proc near               ; CODE XREF: sub_4079B0+4C↑p
.text:0040F270
.text:0040F270 lpRootPathName  = dword ptr  4
.text:0040F270
.text:0040F270                 jmp     ds:__imp_GetDriveTypeA
.text:0040F270 GetDriveTypeA   endp
.text:0040F270
.text:0040F270 ; ---------------------------------------------------------------------------
.text:0040F276                 align 10h
.text:0040F280
.text:0040F280 ; =============== S U B R O U T I N E =======================================
.text:0040F280
.text:0040F280 ; Attributes: thunk
.text:0040F280
.text:0040F280 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040F280 GetVolumeInformationA proc near         ; CODE XREF: sub_407EB0+64↑p
.text:0040F280                                         ; .text:0040845C↑p ...
.text:0040F280
.text:0040F280 lpRootPathName  = dword ptr  4
.text:0040F280 lpVolumeNameBuffer= dword ptr  8
.text:0040F280 nVolumeNameSize = dword ptr  0Ch
.text:0040F280 lpVolumeSerialNumber= dword ptr  10h
.text:0040F280 lpMaximumComponentLength= dword ptr  14h
.text:0040F280 lpFileSystemFlags= dword ptr  18h
.text:0040F280 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040F280 nFileSystemNameSize= dword ptr  20h
.text:0040F280
.text:0040F280                 jmp     ds:__imp_GetVolumeInformationA
.text:0040F280 GetVolumeInformationA endp
.text:0040F280
.text:0040F280 ; ---------------------------------------------------------------------------
.text:0040F286                 align 10h
.text:0040F290
.text:0040F290 ; =============== S U B R O U T I N E =======================================
.text:0040F290
.text:0040F290 ; Attributes: thunk
.text:0040F290
.text:0040F290 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040F290 CreateFileA     proc near               ; CODE XREF: sub_406160+2AE6↑p
.text:0040F290                                         ; .text:0040AC43↑p ...
.text:0040F290
.text:0040F290 lpFileName      = dword ptr  4
.text:0040F290 dwDesiredAccess = dword ptr  8
.text:0040F290 dwShareMode     = dword ptr  0Ch
.text:0040F290 lpSecurityAttributes= dword ptr  10h
.text:0040F290 dwCreationDisposition= dword ptr  14h
.text:0040F290 dwFlagsAndAttributes= dword ptr  18h
.text:0040F290 hTemplateFile   = dword ptr  1Ch
.text:0040F290
.text:0040F290                 jmp     ds:__imp_CreateFileA
.text:0040F290 CreateFileA     endp
.text:0040F290
.text:0040F290 ; ---------------------------------------------------------------------------
.text:0040F296                 align 10h
.text:0040F2A0
.text:0040F2A0 ; =============== S U B R O U T I N E =======================================
.text:0040F2A0
.text:0040F2A0 ; Attributes: thunk
.text:0040F2A0
.text:0040F2A0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040F2A0 CloseHandle     proc near               ; CODE XREF: sub_406160+2B01↑p
.text:0040F2A0                                         ; .text:0040ACB9↑p ...
.text:0040F2A0
.text:0040F2A0 hObject         = dword ptr  4
.text:0040F2A0
.text:0040F2A0                 jmp     ds:__imp_CloseHandle
.text:0040F2A0 CloseHandle     endp
.text:0040F2A0
.text:0040F2A0 ; ---------------------------------------------------------------------------
.text:0040F2A6                 align 10h
.text:0040F2B0
.text:0040F2B0 ; =============== S U B R O U T I N E =======================================
.text:0040F2B0
.text:0040F2B0 ; Attributes: thunk
.text:0040F2B0
.text:0040F2B0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040F2B0 lstrcmpiA       proc near               ; CODE XREF: .text:00409D8B↑p
.text:0040F2B0                                         ; .text:00409DA2↑p ...
.text:0040F2B0
.text:0040F2B0 lpString1       = dword ptr  4
.text:0040F2B0 lpString2       = dword ptr  8
.text:0040F2B0
.text:0040F2B0                 jmp     ds:__imp_lstrcmpiA
.text:0040F2B0 lstrcmpiA       endp
.text:0040F2B0
.text:0040F2B0 ; ---------------------------------------------------------------------------
.text:0040F2B6                 align 10h
.text:0040F2C0
.text:0040F2C0 ; =============== S U B R O U T I N E =======================================
.text:0040F2C0
.text:0040F2C0 ; Attributes: thunk
.text:0040F2C0
.text:0040F2C0 ; DWORD __stdcall GetVersion()
.text:0040F2C0 GetVersion      proc near               ; CODE XREF: .text:0040A113↑p
.text:0040F2C0                 jmp     ds:__imp_GetVersion
.text:0040F2C0 GetVersion      endp
.text:0040F2C0
.text:0040F2C0 ; ---------------------------------------------------------------------------
.text:0040F2C6                 align 10h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0 ; Attributes: thunk
.text:0040F2D0
.text:0040F2D0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040F2D0 GetVersionExA   proc near               ; CODE XREF: sub_40A1A0+32↑p
.text:0040F2D0                                         ; sub_40A1A0+20B↑p
.text:0040F2D0
.text:0040F2D0 lpVersionInformation= dword ptr  4
.text:0040F2D0
.text:0040F2D0                 jmp     ds:__imp_GetVersionExA
.text:0040F2D0 GetVersionExA   endp
.text:0040F2D0
.text:0040F2D0 ; ---------------------------------------------------------------------------
.text:0040F2D6                 align 10h
.text:0040F2E0
.text:0040F2E0 ; =============== S U B R O U T I N E =======================================
.text:0040F2E0
.text:0040F2E0 ; Attributes: thunk
.text:0040F2E0
.text:0040F2E0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040F2E0 GetFullPathNameA proc near              ; CODE XREF: sub_40A440+45↑p
.text:0040F2E0                                         ; sub_40A440+ED↑p
.text:0040F2E0
.text:0040F2E0 lpFileName      = dword ptr  4
.text:0040F2E0 nBufferLength   = dword ptr  8
.text:0040F2E0 lpBuffer        = dword ptr  0Ch
.text:0040F2E0 lpFilePart      = dword ptr  10h
.text:0040F2E0
.text:0040F2E0                 jmp     ds:__imp_GetFullPathNameA
.text:0040F2E0 GetFullPathNameA endp
.text:0040F2E0
.text:0040F2E0 ; ---------------------------------------------------------------------------
.text:0040F2E6                 align 10h
.text:0040F2F0
.text:0040F2F0 ; =============== S U B R O U T I N E =======================================
.text:0040F2F0
.text:0040F2F0 ; Attributes: thunk
.text:0040F2F0
.text:0040F2F0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F2F0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040A8F8↑p
.text:0040F2F0                                         ; .text:0040A914↑p ...
.text:0040F2F0
.text:0040F2F0 nBufferLength   = dword ptr  4
.text:0040F2F0 lpBuffer        = dword ptr  8
.text:0040F2F0
.text:0040F2F0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040F2F0 GetCurrentDirectoryA endp
.text:0040F2F0
.text:0040F2F0 ; ---------------------------------------------------------------------------
.text:0040F2F6                 align 10h
.text:0040F300
.text:0040F300 ; =============== S U B R O U T I N E =======================================
.text:0040F300
.text:0040F300 ; Attributes: thunk
.text:0040F300
.text:0040F300 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040F300 DeviceIoControl proc near               ; CODE XREF: .text:0040ACAC↑p
.text:0040F300                                         ; sub_40B070+1E5↑p
.text:0040F300
.text:0040F300 hDevice         = dword ptr  4
.text:0040F300 dwIoControlCode = dword ptr  8
.text:0040F300 lpInBuffer      = dword ptr  0Ch
.text:0040F300 nInBufferSize   = dword ptr  10h
.text:0040F300 lpOutBuffer     = dword ptr  14h
.text:0040F300 nOutBufferSize  = dword ptr  18h
.text:0040F300 lpBytesReturned = dword ptr  1Ch
.text:0040F300 lpOverlapped    = dword ptr  20h
.text:0040F300
.text:0040F300                 jmp     ds:__imp_DeviceIoControl
.text:0040F300 DeviceIoControl endp
.text:0040F300
.text:0040F300 ; ---------------------------------------------------------------------------
.text:0040F306                 align 10h
.text:0040F310
.text:0040F310 ; =============== S U B R O U T I N E =======================================
.text:0040F310
.text:0040F310 ; Attributes: thunk
.text:0040F310
.text:0040F310 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040F310 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040B003↑p
.text:0040F310                                         ; sub_40B070+7B↑p ...
.text:0040F310
.text:0040F310 lpRootPathName  = dword ptr  4
.text:0040F310 lpSectorsPerCluster= dword ptr  8
.text:0040F310 lpBytesPerSector= dword ptr  0Ch
.text:0040F310 lpNumberOfFreeClusters= dword ptr  10h
.text:0040F310 lpTotalNumberOfClusters= dword ptr  14h
.text:0040F310
.text:0040F310                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040F310 GetDiskFreeSpaceA endp
.text:0040F310
.text:0040F310 ; ---------------------------------------------------------------------------
.text:0040F316                 align 10h
.text:0040F320
.text:0040F320 ; =============== S U B R O U T I N E =======================================
.text:0040F320
.text:0040F320 ; Attributes: thunk
.text:0040F320
.text:0040F320 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:0040F320 SetEndOfFile    proc near               ; CODE XREF: sub_40B310+53↑p
.text:0040F320
.text:0040F320 hFile           = dword ptr  4
.text:0040F320
.text:0040F320                 jmp     ds:__imp_SetEndOfFile
.text:0040F320 SetEndOfFile    endp
.text:0040F320
.text:0040F320 ; ---------------------------------------------------------------------------
.text:0040F326                 align 10h
.text:0040F330
.text:0040F330 ; =============== S U B R O U T I N E =======================================
.text:0040F330
.text:0040F330 ; Attributes: thunk
.text:0040F330
.text:0040F330 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040F330 UnlockFile      proc near               ; CODE XREF: sub_40B3C0+B4↑p
.text:0040F330                                         ; sub_40C520+40↑p
.text:0040F330
.text:0040F330 hFile           = dword ptr  4
.text:0040F330 dwFileOffsetLow = dword ptr  8
.text:0040F330 dwFileOffsetHigh= dword ptr  0Ch
.text:0040F330 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040F330 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040F330
.text:0040F330                 jmp     ds:__imp_UnlockFile
.text:0040F330 UnlockFile      endp
.text:0040F330
.text:0040F330 ; ---------------------------------------------------------------------------
.text:0040F336                 align 10h
.text:0040F340
.text:0040F340 ; =============== S U B R O U T I N E =======================================
.text:0040F340
.text:0040F340 ; Attributes: thunk
.text:0040F340
.text:0040F340 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:0040F340 LockFile        proc near               ; CODE XREF: sub_40B3C0+F7↑p
.text:0040F340
.text:0040F340 hFile           = dword ptr  4
.text:0040F340 dwFileOffsetLow = dword ptr  8
.text:0040F340 dwFileOffsetHigh= dword ptr  0Ch
.text:0040F340 nNumberOfBytesToLockLow= dword ptr  10h
.text:0040F340 nNumberOfBytesToLockHigh= dword ptr  14h
.text:0040F340
.text:0040F340                 jmp     ds:__imp_LockFile
.text:0040F340 LockFile        endp
.text:0040F340
.text:0040F340 ; ---------------------------------------------------------------------------
.text:0040F346                 align 10h
.text:0040F350
.text:0040F350 ; =============== S U B R O U T I N E =======================================
.text:0040F350
.text:0040F350 ; Attributes: thunk
.text:0040F350
.text:0040F350 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F350 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040BB6F↑p
.text:0040F350                                         ; .text:0040BB9E↑p ...
.text:0040F350
.text:0040F350 nBufferLength   = dword ptr  4
.text:0040F350 lpBuffer        = dword ptr  8
.text:0040F350
.text:0040F350                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040F350 GetLogicalDriveStringsA endp
.text:0040F350
.text:0040F350 ; ---------------------------------------------------------------------------
.text:0040F356                 align 10h
.text:0040F360
.text:0040F360 ; =============== S U B R O U T I N E =======================================
.text:0040F360
.text:0040F360 ; Attributes: thunk
.text:0040F360
.text:0040F360 ; HANDLE __stdcall GetProcessHeap()
.text:0040F360 GetProcessHeap  proc near               ; CODE XREF: .text:0040BB79↑p
.text:0040F360                                         ; sub_40C250+24↑p ...
.text:0040F360                 jmp     ds:__imp_GetProcessHeap
.text:0040F360 GetProcessHeap  endp
.text:0040F360
.text:0040F360 ; ---------------------------------------------------------------------------
.text:0040F366                 align 10h
.text:0040F370
.text:0040F370 ; =============== S U B R O U T I N E =======================================
.text:0040F370
.text:0040F370 ; Attributes: thunk
.text:0040F370
.text:0040F370 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040F370 HeapAlloc       proc near               ; CODE XREF: .text:0040BB8D↑p
.text:0040F370                                         ; sub_40C250+38↑p ...
.text:0040F370
.text:0040F370 hHeap           = dword ptr  4
.text:0040F370 dwFlags         = dword ptr  8
.text:0040F370 dwBytes         = dword ptr  0Ch
.text:0040F370
.text:0040F370                 jmp     ds:__imp_HeapAlloc
.text:0040F370 HeapAlloc       endp
.text:0040F370
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F376                 align 10h
.text:0040F380
.text:0040F380 ; =============== S U B R O U T I N E =======================================
.text:0040F380
.text:0040F380 ; Attributes: thunk
.text:0040F380
.text:0040F380 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040F380 HeapFree        proc near               ; CODE XREF: .text:0040C38D↑p
.text:0040F380
.text:0040F380 hHeap           = dword ptr  4
.text:0040F380 dwFlags         = dword ptr  8
.text:0040F380 lpMem           = dword ptr  0Ch
.text:0040F380
.text:0040F380                 jmp     ds:__imp_HeapFree
.text:0040F380 HeapFree        endp
.text:0040F380
.text:0040F380 ; ---------------------------------------------------------------------------
.text:0040F386                 align 10h
.text:0040F390
.text:0040F390 ; =============== S U B R O U T I N E =======================================
.text:0040F390
.text:0040F390 ; Attributes: thunk
.text:0040F390
.text:0040F390 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040F390 CreateDirectoryA proc near              ; CODE XREF: sub_40CEA0+22↑p
.text:0040F390
.text:0040F390 lpPathName      = dword ptr  4
.text:0040F390 lpSecurityAttributes= dword ptr  8
.text:0040F390
.text:0040F390                 jmp     ds:__imp_CreateDirectoryA
.text:0040F390 CreateDirectoryA endp
.text:0040F390
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F396                 align 10h
.text:0040F3A0
.text:0040F3A0 ; =============== S U B R O U T I N E =======================================
.text:0040F3A0
.text:0040F3A0 ; Attributes: thunk
.text:0040F3A0
.text:0040F3A0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040F3A0 GetTimeZoneInformation proc near        ; CODE XREF: sub_40CFA0+22↑p
.text:0040F3A0
.text:0040F3A0 lpTimeZoneInformation= dword ptr  4
.text:0040F3A0
.text:0040F3A0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040F3A0 GetTimeZoneInformation endp
.text:0040F3A0
.text:0040F3A0 ; ---------------------------------------------------------------------------
.text:0040F3A6                 align 10h
.text:0040F3B0
.text:0040F3B0 ; =============== S U B R O U T I N E =======================================
.text:0040F3B0
.text:0040F3B0 ; Attributes: thunk
.text:0040F3B0
.text:0040F3B0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040F3B0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40CFA0+4F↑p
.text:0040F3B0
.text:0040F3B0 lpSystemTimeAsFileTime= dword ptr  4
.text:0040F3B0
.text:0040F3B0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040F3B0 GetSystemTimeAsFileTime endp
.text:0040F3B0
.text:0040F3B0 ; ---------------------------------------------------------------------------
.text:0040F3B6                 align 10h
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0 ; Attributes: thunk
.text:0040F3C0
.text:0040F3C0 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:0040F3C0 GetUserNameA    proc near               ; CODE XREF: sub_408CE0+1E↑p
.text:0040F3C0
.text:0040F3C0 lpBuffer        = dword ptr  4
.text:0040F3C0 pcbBuffer       = dword ptr  8
.text:0040F3C0
.text:0040F3C0                 jmp     ds:__imp_GetUserNameA
.text:0040F3C0 GetUserNameA    endp
.text:0040F3C0
.text:0040F3C0 ; ---------------------------------------------------------------------------
.text:0040F3C6                 align 10h
.text:0040F3D0
.text:0040F3D0 ; =============== S U B R O U T I N E =======================================
.text:0040F3D0
.text:0040F3D0 ; Attributes: thunk
.text:0040F3D0
.text:0040F3D0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040F3D0 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409D11↑p
.text:0040F3D0
.text:0040F3D0 hKey            = dword ptr  4
.text:0040F3D0 lpSubKey        = dword ptr  8
.text:0040F3D0 ulOptions       = dword ptr  0Ch
.text:0040F3D0 samDesired      = dword ptr  10h
.text:0040F3D0 phkResult       = dword ptr  14h
.text:0040F3D0
.text:0040F3D0                 jmp     ds:__imp_RegOpenKeyExA
.text:0040F3D0 RegOpenKeyExA   endp
.text:0040F3D0
.text:0040F3D0 ; ---------------------------------------------------------------------------
.text:0040F3D6                 align 10h
.text:0040F3E0
.text:0040F3E0 ; =============== S U B R O U T I N E =======================================
.text:0040F3E0
.text:0040F3E0 ; Attributes: thunk
.text:0040F3E0
.text:0040F3E0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040F3E0 RegQueryValueExA proc near              ; CODE XREF: .text:00409D54↑p
.text:0040F3E0
.text:0040F3E0 hKey            = dword ptr  4
.text:0040F3E0 lpValueName     = dword ptr  8
.text:0040F3E0 lpReserved      = dword ptr  0Ch
.text:0040F3E0 lpType          = dword ptr  10h
.text:0040F3E0 lpData          = dword ptr  14h
.text:0040F3E0 lpcbData        = dword ptr  18h
.text:0040F3E0
.text:0040F3E0                 jmp     ds:__imp_RegQueryValueExA
.text:0040F3E0 RegQueryValueExA endp
.text:0040F3E0
.text:0040F3E0 ; ---------------------------------------------------------------------------
.text:0040F3E6                 align 10h
.text:0040F3F0
.text:0040F3F0 ; =============== S U B R O U T I N E =======================================
.text:0040F3F0
.text:0040F3F0 ; Attributes: thunk
.text:0040F3F0
.text:0040F3F0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040F3F0 RegCloseKey     proc near               ; CODE XREF: .text:00409D78↑p
.text:0040F3F0
.text:0040F3F0 hKey            = dword ptr  4
.text:0040F3F0
.text:0040F3F0                 jmp     ds:__imp_RegCloseKey
.text:0040F3F0 RegCloseKey     endp
.text:0040F3F0
.text:0040F3F0 ; ---------------------------------------------------------------------------
.text:0040F3F6                 db 2 dup(90h)
.text:0040F3F8                 dd 2 dup(0)
.text:0040F400                 dd 21400h, 0
.text:0040F408                 dd 0C0h, 46000000h
.text:0040F410 ; const IID rclsid
.text:0040F410 rclsid          dd 21401h               ; Data1
.text:0040F410                                         ; DATA XREF: sub_405F00+4B↑o
.text:0040F410                 dw 0                    ; Data2
.text:0040F410                 dw 0                    ; Data3
.text:0040F410                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F420                 dd 214A0h, 0
.text:0040F428                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040F438                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040F448                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040F458                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040F468                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040F478                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040F488                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040F498                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040F4A8                 dd 0C0h, 46000000h, 21500h, 0
.text:0040F4B8                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040F4C8                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040F4D8                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040F4E8                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040F4F8                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040F508                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040F518                 dd 0C0h, 46000000h
.text:0040F520 ; const IID riid
.text:0040F520 riid            dd 214EEh               ; Data1
.text:0040F520                                         ; DATA XREF: sub_405F00+2B↑o
.text:0040F520                 dw 0                    ; Data2
.text:0040F520                 dw 0                    ; Data3
.text:0040F520                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F530                 dd 214EFh, 0
.text:0040F538                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040F548                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040F558                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040F568                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040F578                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040F588                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040F598                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040F5A8                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040F5B8                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040F5C8                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040F5D8                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040F5E8                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040F5F8                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040F608                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040F608                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040F608                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040F608                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040F608                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F608                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040F608                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040F608                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F608                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040F608                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040F6D8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040F6E8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040F6F8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040F708                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040F718                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040F718                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040F718                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040F718                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040F718                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040F718                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040F718                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040F7A0 dword_40F7A0    dd 0FFFFFFFFh           ; DATA XREF: .text:0040E659↑r
.text:0040F7A0                                         ; .text:loc_40E680↑r ...
.text:0040F7A4 dword_40F7A4    dd 0                    ; DATA XREF: .text:loc_40E68C↑r
.text:0040F7A4                                         ; sub_40E6B0:loc_40E6FD↑r
.text:0040F7A8                 dd 0FFFFFFFFh
.text:0040F7AC dword_40F7AC    dd 15h dup(0)           ; DATA XREF: .data:off_410134↓o
.text:0040F800                 dd 200h dup(?)
.text:0040F800 _text           ends
.text:0040F800
.data:00410000 ; Section 2. (virtual address 00010000)
.data:00410000 ; Virtual size                  : 00000150 (    336.)
.data:00410000 ; Section size in file          : 00000200 (    512.)
.data:00410000 ; Offset to raw data for section: 0000EC00
.data:00410000 ; Flags C0000040: Data Readable Writable
.data:00410000 ; Alignment     : default
.data:00410000 ; ===========================================================================
.data:00410000
.data:00410000 ; Segment type: Pure data
.data:00410000 ; Segment permissions: Read/Write
.data:00410000 _data           segment para public 'DATA' use32
.data:00410000                 assume cs:_data
.data:00410000                 ;org 410000h
.data:00410000 dword_410000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00410000                                         ; sub_401080+CC↑r
.data:00410004 dword_410004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00410004                                         ; sub_401080+D4↑r
.data:00410008                 align 10h
.data:00410010 byte_410010     db 1                    ; DATA XREF: sub_4017F0+2D4↑w
.data:00410010                                         ; sub_402140+107↑r ...
.data:00410011 byte_410011     db 1                    ; DATA XREF: sub_4017F0:loc_4018F8↑w
.data:00410011                                         ; sub_402140:loc_402177↑r
.data:00410012 byte_410012     db 1                    ; DATA XREF: sub_4017F0+2AE↑w
.data:00410012                                         ; sub_4017F0:loc_401AB6↑w ...
.data:00410013 byte_410013     db 1                    ; DATA XREF: sub_4017F0+C7↑w
.data:00410013                                         ; sub_401D40:loc_401E13↑r
.data:00410014 byte_410014     db 1                    ; DATA XREF: sub_4017F0+288↑w
.data:00410014                                         ; sub_401D40:loc_401E20↑r
.data:00410015 byte_410015     db 1                    ; DATA XREF: sub_4017F0:loc_401A50↑w
.data:00410015                                         ; sub_401D40:loc_401E06↑r
.data:00410016 byte_410016     db 1                    ; DATA XREF: sub_4017F0:loc_401A84↑w
.data:00410016                                         ; sub_4017F0:loc_401AAA↑w ...
.data:00410017 byte_410017     db 1                    ; DATA XREF: sub_4017F0+2CD↑w
.data:00410017                                         ; sub_4017F0+2E7↑w ...
.data:00410018                 align 10h
.data:00410020 dword_410020    dd 1                    ; DATA XREF: sub_4017F0:loc_401AE3↑r
.data:00410020                                         ; sub_403820+3↑r ...
.data:00410024 dword_410024    dd 1                    ; DATA XREF: sub_403820+11↑r
.data:00410024                                         ; .text:004038C1↑r
.data:00410028 dword_410028    dd 3Fh                  ; DATA XREF: sub_403820+7D↑w
.data:00410028                                         ; .text:0040392D↑w
.data:0041002C                 align 10h
.data:00410030 ; char *off_410030
.data:00410030 off_410030      dd offset aCopyrightC2005
.data:00410030                                         ; DATA XREF: sub_403D50+DC↑r
.data:00410030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00410034                 align 10h
.data:00410040 ; int Code
.data:00410040 Code            dd 1                    ; DATA XREF: sub_4040D0+6D↑r
.data:00410040                                         ; sub_4040D0+9A↑r ...
.data:00410044                 align 10h
.data:00410050 dword_410050    dd 1                    ; DATA XREF: sub_4058C0+22↑r
.data:00410050                                         ; sub_4058C0+65↑r ...
.data:00410054 dword_410054    dd 100h                 ; DATA XREF: sub_4058C0+3F↑o
.data:00410054                                         ; sub_4058C0+1A2↑r ...
.data:00410058 off_410058      dd offset unk_4110B0    ; DATA XREF: sub_4058C0+1AA↑r
.data:0041005C ; void *off_41005C
.data:0041005C off_41005C      dd offset dword_410054  ; DATA XREF: sub_4058C0+39↑r
.data:0041005C                                         ; sub_4058C0+60↑w ...
.data:00410060 ; char *Src
.data:00410060 Src             dd offset byte_4061B0   ; DATA XREF: sub_4061D0+168↑r
.data:00410064 off_410064      dd offset byte_4061B1   ; DATA XREF: sub_4061D0+1DA↑r
.data:00410068                 align 10h
.data:00410070 off_410070      dd offset sub_406430    ; DATA XREF: sub_406410+C↑o
.data:00410070                                         ; sub_4065E0+26↑o ...
.data:00410074                 dd offset sub_406450
.data:00410078                 dd offset sub_4064A0
.data:0041007C                 dd offset sub_4064F0
.data:00410080                 dd offset sub_406540
.data:00410084                 dd offset nullsub_1
.data:00410088                 db    0
.data:00410089                 db    0
.data:0041008A                 db    0
.data:0041008B                 db    0
.data:0041008C off_41008C      dd offset off_410070    ; DATA XREF: sub_4063C0+3↑r
.data:0041008C                                         ; sub_4063D0+7↑r ...
.data:00410090 ; char *FileName
.data:00410090 FileName        dd offset aVarRunUtmp_0 ; DATA XREF: sub_4065E0+20↑r
.data:00410090                                         ; sub_4065E0+64↑r ...
.data:00410090                                         ; "/var/run/utmp"
.data:00410094                 align 10h
.data:004100A0 dword_4100A0    dd 200h                 ; DATA XREF: sub_4074E0+2ED↑r
.data:004100A0                                         ; sub_4074E0+2F8↑r ...
.data:004100A4 ; char *off_4100A4
.data:004100A4 off_4100A4      dd offset aComExeBatCmd ; DATA XREF: sub_4079B0+3D3↑r
.data:004100A4                                         ; sub_4079B0+400↑r ...
.data:004100A4                                         ; ".com;.exe;.bat;.cmd"
.data:004100A8                 align 10h
.data:004100B0 ; int FileHandle
.data:004100B0 FileHandle      dd 0FFFFFFFFh           ; DATA XREF: sub_408D50+3↑r
.data:004100B0                                         ; sub_408D50+76↑w ...
.data:004100B4 off_4100B4      dd offset sub_408D50    ; DATA XREF: sub_406430+3↑r
.data:004100B4                                         ; sub_406430+D↑o ...
.data:004100B8 off_4100B8      dd offset sub_408E90    ; DATA XREF: sub_406450+2A↑r
.data:004100BC off_4100BC      dd offset sub_409620    ; DATA XREF: sub_4064A0+33↑r
.data:004100C0 off_4100C0      dd offset sub_408FE0    ; DATA XREF: sub_4064F0+33↑r
.data:004100C4 off_4100C4      dd offset sub_409190    ; DATA XREF: sub_406540+21↑r
.data:004100C8                 dd offset sub_4096E0
.data:004100CC                 dd offset sub_4094C0
.data:004100D0 dword_4100D0    dd 1                    ; DATA XREF: .text:loc_409BC7↑r
.data:004100D0                                         ; sub_40A1A0+202↑w
.data:004100D4                 align 10h
.data:004100E0 byte_4100E0     db 41h                  ; DATA XREF: sub_40A770+6B↑w
.data:004100E0                                         ; sub_40A770:loc_40A884↑r
.data:004100E1                 align 10h
.data:004100F0 off_4100F0      dd offset aNotset       ; DATA XREF: .text:0040B74A↑r
.data:004100F0                                         ; .text:0040C392↑r
.data:004100F0                                         ; "notset"
.data:004100F4 off_4100F4      dd offset aNotset       ; DATA XREF: .text:0040B762↑r
.data:004100F4                                         ; .text:0040B784↑r ...
.data:004100F4                                         ; "notset"
.data:004100F8                 align 10h
.data:00410100 dword_410100    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00410104                 align 10h
.data:00410110 ; int Mode
.data:00410110 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00410110                                         ; sub_401080+80↑r ...
.data:00410114                 align 10h
.data:00410120 dword_410120    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00410120                                         ; sub_401080+BA↑r
.data:00410124                 align 10h
.data:00410130 dword_410130    dd 0                    ; DATA XREF: sub_40E6B0+9↑r
.data:00410130                                         ; sub_40E6B0+1D↑w
.data:00410134 off_410134      dd offset dword_40F7AC  ; DATA XREF: sub_40E620+6↑r
.data:00410134                                         ; sub_40E620+17↑r ...
.data:00410138                 align 1000h
.data:00410138 _data           ends
.data:00410138
.bss:00411000 ; Section 3. (virtual address 00011000)
.bss:00411000 ; Virtual size                  : 00000C90 (   3216.)
.bss:00411000 ; Section size in file          : 00000000 (      0.)
.bss:00411000 ; Offset to raw data for section: 00000000
.bss:00411000 ; Flags C0000080: Bss Readable Writable
.bss:00411000 ; Alignment     : default
.bss:00411000 ; ===========================================================================
.bss:00411000
.bss:00411000 ; Segment type: Uninitialized
.bss:00411000 ; Segment permissions: Read/Write
.bss:00411000 _bss            segment para public 'BSS' use32
.bss:00411000                 assume cs:_bss
.bss:00411000                 ;org 411000h
.bss:00411000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00411000 ; __time32_t Time
.bss:00411000 Time            dd ?                    ; DATA XREF: sub_4024B0+F4↑r
.bss:00411000                                         ; sub_4024B0:loc_4027C5↑o ...
.bss:00411004                 align 10h
.bss:00411010 ; char Buffer[16]
.bss:00411010 Buffer          db 10h dup(?)           ; DATA XREF: sub_4024B0+131↑o
.bss:00411010                                         ; sub_4024B0:loc_40261A↑o ...
.bss:00411020 ; char byte_411020[48]
.bss:00411020 byte_411020     db 30h dup(?)           ; DATA XREF: sub_4024B0+1AF↑o
.bss:00411020                                         ; sub_4024B0+1BF↑o ...
.bss:00411050 ; char *dword_411050
.bss:00411050 dword_411050    dd ?                    ; DATA XREF: sub_402140+28↑w
.bss:00411050                                         ; sub_402140+1FA↑w ...
.bss:00411054                 align 10h
.bss:00411060 dword_411060    dd ?                    ; DATA XREF: sub_402140+32↑w
.bss:00411060                                         ; sub_402140+128↑r ...
.bss:00411064                 align 10h
.bss:00411070 dword_411070    dd ?                    ; DATA XREF: sub_403820+9↑o
.bss:00411070                                         ; sub_403820+17↑w ...
.bss:00411074 dword_411074    dd ?                    ; DATA XREF: sub_403820+21↑w
.bss:00411074                                         ; .text:004038D9↑w
.bss:00411078 dword_411078    dd ?                    ; DATA XREF: sub_403820+77↑r
.bss:00411078                                         ; .text:00403927↑r
.bss:0041107C dword_41107C    dd ?                    ; DATA XREF: sub_403820+6B↑r
.bss:0041107C                                         ; .text:0040391B↑r
.bss:00411080                 db    ? ;
.bss:00411081                 db    ? ;
.bss:00411082                 db    ? ;
.bss:00411083                 db    ? ;
.bss:00411084                 db    ? ;
.bss:00411085                 db    ? ;
.bss:00411086                 db    ? ;
.bss:00411087                 db    ? ;
.bss:00411088                 db    ? ;
.bss:00411089                 db    ? ;
.bss:0041108A                 db    ? ;
.bss:0041108B                 db    ? ;
.bss:0041108C                 db    ? ;
.bss:0041108D                 db    ? ;
.bss:0041108E                 db    ? ;
.bss:0041108F                 db    ? ;
.bss:00411090                 db    ? ;
.bss:00411091                 db    ? ;
.bss:00411092                 db    ? ;
.bss:00411093                 db    ? ;
.bss:00411094                 db    ? ;
.bss:00411095                 db    ? ;
.bss:00411096                 db    ? ;
.bss:00411097                 db    ? ;
.bss:00411098                 db    ? ;
.bss:00411099                 db    ? ;
.bss:0041109A                 db    ? ;
.bss:0041109B                 db    ? ;
.bss:0041109C                 db    ? ;
.bss:0041109D                 db    ? ;
.bss:0041109E                 db    ? ;
.bss:0041109F                 db    ? ;
.bss:004110A0 ; char *dword_4110A0
.bss:004110A0 dword_4110A0    dd ?                    ; DATA XREF: .text:004040A4↑w
.bss:004110A0                                         ; sub_4040D0+58↑r
.bss:004110A4                 align 10h
.bss:004110B0 unk_4110B0      db    ? ;               ; DATA XREF: sub_4058C0+100↑o
.bss:004110B0                                         ; .data:off_410058↑o
.bss:004110B1                 db    ? ;
.bss:004110B2                 db    ? ;
.bss:004110B3                 db    ? ;
.bss:004110B4                 db    ? ;
.bss:004110B5                 db    ? ;
.bss:004110B6                 db    ? ;
.bss:004110B7                 db    ? ;
.bss:004110B8                 db    ? ;
.bss:004110B9                 db    ? ;
.bss:004110BA                 db    ? ;
.bss:004110BB                 db    ? ;
.bss:004110BC                 db    ? ;
.bss:004110BD                 db    ? ;
.bss:004110BE                 db    ? ;
.bss:004110BF                 db    ? ;
.bss:004110C0                 db    ? ;
.bss:004110C1                 db    ? ;
.bss:004110C2                 db    ? ;
.bss:004110C3                 db    ? ;
.bss:004110C4                 db    ? ;
.bss:004110C5                 db    ? ;
.bss:004110C6                 db    ? ;
.bss:004110C7                 db    ? ;
.bss:004110C8                 db    ? ;
.bss:004110C9                 db    ? ;
.bss:004110CA                 db    ? ;
.bss:004110CB                 db    ? ;
.bss:004110CC                 db    ? ;
.bss:004110CD                 db    ? ;
.bss:004110CE                 db    ? ;
.bss:004110CF                 db    ? ;
.bss:004110D0                 db    ? ;
.bss:004110D1                 db    ? ;
.bss:004110D2                 db    ? ;
.bss:004110D3                 db    ? ;
.bss:004110D4                 db    ? ;
.bss:004110D5                 db    ? ;
.bss:004110D6                 db    ? ;
.bss:004110D7                 db    ? ;
.bss:004110D8                 db    ? ;
.bss:004110D9                 db    ? ;
.bss:004110DA                 db    ? ;
.bss:004110DB                 db    ? ;
.bss:004110DC                 db    ? ;
.bss:004110DD                 db    ? ;
.bss:004110DE                 db    ? ;
.bss:004110DF                 db    ? ;
.bss:004110E0                 db    ? ;
.bss:004110E1                 db    ? ;
.bss:004110E2                 db    ? ;
.bss:004110E3                 db    ? ;
.bss:004110E4                 db    ? ;
.bss:004110E5                 db    ? ;
.bss:004110E6                 db    ? ;
.bss:004110E7                 db    ? ;
.bss:004110E8                 db    ? ;
.bss:004110E9                 db    ? ;
.bss:004110EA                 db    ? ;
.bss:004110EB                 db    ? ;
.bss:004110EC                 db    ? ;
.bss:004110ED                 db    ? ;
.bss:004110EE                 db    ? ;
.bss:004110EF                 db    ? ;
.bss:004110F0                 db    ? ;
.bss:004110F1                 db    ? ;
.bss:004110F2                 db    ? ;
.bss:004110F3                 db    ? ;
.bss:004110F4                 db    ? ;
.bss:004110F5                 db    ? ;
.bss:004110F6                 db    ? ;
.bss:004110F7                 db    ? ;
.bss:004110F8                 db    ? ;
.bss:004110F9                 db    ? ;
.bss:004110FA                 db    ? ;
.bss:004110FB                 db    ? ;
.bss:004110FC                 db    ? ;
.bss:004110FD                 db    ? ;
.bss:004110FE                 db    ? ;
.bss:004110FF                 db    ? ;
.bss:00411100                 db    ? ;
.bss:00411101                 db    ? ;
.bss:00411102                 db    ? ;
.bss:00411103                 db    ? ;
.bss:00411104                 db    ? ;
.bss:00411105                 db    ? ;
.bss:00411106                 db    ? ;
.bss:00411107                 db    ? ;
.bss:00411108                 db    ? ;
.bss:00411109                 db    ? ;
.bss:0041110A                 db    ? ;
.bss:0041110B                 db    ? ;
.bss:0041110C                 db    ? ;
.bss:0041110D                 db    ? ;
.bss:0041110E                 db    ? ;
.bss:0041110F                 db    ? ;
.bss:00411110                 db    ? ;
.bss:00411111                 db    ? ;
.bss:00411112                 db    ? ;
.bss:00411113                 db    ? ;
.bss:00411114                 db    ? ;
.bss:00411115                 db    ? ;
.bss:00411116                 db    ? ;
.bss:00411117                 db    ? ;
.bss:00411118                 db    ? ;
.bss:00411119                 db    ? ;
.bss:0041111A                 db    ? ;
.bss:0041111B                 db    ? ;
.bss:0041111C                 db    ? ;
.bss:0041111D                 db    ? ;
.bss:0041111E                 db    ? ;
.bss:0041111F                 db    ? ;
.bss:00411120                 db    ? ;
.bss:00411121                 db    ? ;
.bss:00411122                 db    ? ;
.bss:00411123                 db    ? ;
.bss:00411124                 db    ? ;
.bss:00411125                 db    ? ;
.bss:00411126                 db    ? ;
.bss:00411127                 db    ? ;
.bss:00411128                 db    ? ;
.bss:00411129                 db    ? ;
.bss:0041112A                 db    ? ;
.bss:0041112B                 db    ? ;
.bss:0041112C                 db    ? ;
.bss:0041112D                 db    ? ;
.bss:0041112E                 db    ? ;
.bss:0041112F                 db    ? ;
.bss:00411130                 db    ? ;
.bss:00411131                 db    ? ;
.bss:00411132                 db    ? ;
.bss:00411133                 db    ? ;
.bss:00411134                 db    ? ;
.bss:00411135                 db    ? ;
.bss:00411136                 db    ? ;
.bss:00411137                 db    ? ;
.bss:00411138                 db    ? ;
.bss:00411139                 db    ? ;
.bss:0041113A                 db    ? ;
.bss:0041113B                 db    ? ;
.bss:0041113C                 db    ? ;
.bss:0041113D                 db    ? ;
.bss:0041113E                 db    ? ;
.bss:0041113F                 db    ? ;
.bss:00411140                 db    ? ;
.bss:00411141                 db    ? ;
.bss:00411142                 db    ? ;
.bss:00411143                 db    ? ;
.bss:00411144                 db    ? ;
.bss:00411145                 db    ? ;
.bss:00411146                 db    ? ;
.bss:00411147                 db    ? ;
.bss:00411148                 db    ? ;
.bss:00411149                 db    ? ;
.bss:0041114A                 db    ? ;
.bss:0041114B                 db    ? ;
.bss:0041114C                 db    ? ;
.bss:0041114D                 db    ? ;
.bss:0041114E                 db    ? ;
.bss:0041114F                 db    ? ;
.bss:00411150                 db    ? ;
.bss:00411151                 db    ? ;
.bss:00411152                 db    ? ;
.bss:00411153                 db    ? ;
.bss:00411154                 db    ? ;
.bss:00411155                 db    ? ;
.bss:00411156                 db    ? ;
.bss:00411157                 db    ? ;
.bss:00411158                 db    ? ;
.bss:00411159                 db    ? ;
.bss:0041115A                 db    ? ;
.bss:0041115B                 db    ? ;
.bss:0041115C                 db    ? ;
.bss:0041115D                 db    ? ;
.bss:0041115E                 db    ? ;
.bss:0041115F                 db    ? ;
.bss:00411160                 db    ? ;
.bss:00411161                 db    ? ;
.bss:00411162                 db    ? ;
.bss:00411163                 db    ? ;
.bss:00411164                 db    ? ;
.bss:00411165                 db    ? ;
.bss:00411166                 db    ? ;
.bss:00411167                 db    ? ;
.bss:00411168                 db    ? ;
.bss:00411169                 db    ? ;
.bss:0041116A                 db    ? ;
.bss:0041116B                 db    ? ;
.bss:0041116C                 db    ? ;
.bss:0041116D                 db    ? ;
.bss:0041116E                 db    ? ;
.bss:0041116F                 db    ? ;
.bss:00411170                 db    ? ;
.bss:00411171                 db    ? ;
.bss:00411172                 db    ? ;
.bss:00411173                 db    ? ;
.bss:00411174                 db    ? ;
.bss:00411175                 db    ? ;
.bss:00411176                 db    ? ;
.bss:00411177                 db    ? ;
.bss:00411178                 db    ? ;
.bss:00411179                 db    ? ;
.bss:0041117A                 db    ? ;
.bss:0041117B                 db    ? ;
.bss:0041117C                 db    ? ;
.bss:0041117D                 db    ? ;
.bss:0041117E                 db    ? ;
.bss:0041117F                 db    ? ;
.bss:00411180                 db    ? ;
.bss:00411181                 db    ? ;
.bss:00411182                 db    ? ;
.bss:00411183                 db    ? ;
.bss:00411184                 db    ? ;
.bss:00411185                 db    ? ;
.bss:00411186                 db    ? ;
.bss:00411187                 db    ? ;
.bss:00411188                 db    ? ;
.bss:00411189                 db    ? ;
.bss:0041118A                 db    ? ;
.bss:0041118B                 db    ? ;
.bss:0041118C                 db    ? ;
.bss:0041118D                 db    ? ;
.bss:0041118E                 db    ? ;
.bss:0041118F                 db    ? ;
.bss:00411190                 db    ? ;
.bss:00411191                 db    ? ;
.bss:00411192                 db    ? ;
.bss:00411193                 db    ? ;
.bss:00411194                 db    ? ;
.bss:00411195                 db    ? ;
.bss:00411196                 db    ? ;
.bss:00411197                 db    ? ;
.bss:00411198                 db    ? ;
.bss:00411199                 db    ? ;
.bss:0041119A                 db    ? ;
.bss:0041119B                 db    ? ;
.bss:0041119C                 db    ? ;
.bss:0041119D                 db    ? ;
.bss:0041119E                 db    ? ;
.bss:0041119F                 db    ? ;
.bss:004111A0                 db    ? ;
.bss:004111A1                 db    ? ;
.bss:004111A2                 db    ? ;
.bss:004111A3                 db    ? ;
.bss:004111A4                 db    ? ;
.bss:004111A5                 db    ? ;
.bss:004111A6                 db    ? ;
.bss:004111A7                 db    ? ;
.bss:004111A8                 db    ? ;
.bss:004111A9                 db    ? ;
.bss:004111AA                 db    ? ;
.bss:004111AB                 db    ? ;
.bss:004111AC                 db    ? ;
.bss:004111AD                 db    ? ;
.bss:004111AE                 db    ? ;
.bss:004111AF                 db    ? ;
.bss:004111B0 dword_4111B0    dd ?                    ; DATA XREF: .text:loc_405251↑o
.bss:004111B0                                         ; .text:loc_405270↑o ...
.bss:004111B4 dword_4111B4    dd ?                    ; DATA XREF: .text:loc_4052F0↑o
.bss:004111B4                                         ; .text:00405778↑r ...
.bss:004111B8 dword_4111B8    dd ?                    ; DATA XREF: .text:00405772↑r
.bss:004111B8                                         ; sub_405820+2C↑r
.bss:004111BC dword_4111BC    dd ?                    ; DATA XREF: .text:00405766↑r
.bss:004111BC                                         ; sub_405820+22↑r
.bss:004111C0 dword_4111C0    dd ?                    ; DATA XREF: .text:00405782↑r
.bss:004111C0                                         ; sub_405820+36↑r
.bss:004111C4 dword_4111C4    dd ?                    ; DATA XREF: .text:00405792↑r
.bss:004111C4                                         ; sub_405820+4E↑r
.bss:004111C8 dword_4111C8    dd ?                    ; DATA XREF: .text:004057AF↑r
.bss:004111C8                                         ; sub_405820+62↑r
.bss:004111CC dword_4111CC    dd ?                    ; DATA XREF: .text:004057A5↑r
.bss:004111CC                                         ; sub_405820+70↑r
.bss:004111D0 dword_4111D0    dd ?                    ; DATA XREF: .text:00405788↑r
.bss:004111D0                                         ; sub_405820+7A↑r
.bss:004111D4                 align 10h
.bss:004111E0 ; char *Str1
.bss:004111E0 Str1            dd ?                    ; DATA XREF: sub_405BE4:loc_405C1D↑w
.bss:004111E0                                         ; sub_405BE4:loc_405D50↑r
.bss:004111E4                 align 10h
.bss:004111F0 dword_4111F0    dd ?                    ; DATA XREF: sub_405BE4+2D↑r
.bss:004111F0                                         ; sub_405BE4+3F↑w
.bss:004111F4                 align 10h
.bss:00411200 unk_411200      db    ? ;               ; DATA XREF: sub_405E70+22↑o
.bss:00411201                 db    ? ;
.bss:00411202                 db    ? ;
.bss:00411203                 db    ? ;
.bss:00411204                 db    ? ;
.bss:00411205                 db    ? ;
.bss:00411206                 db    ? ;
.bss:00411207                 db    ? ;
.bss:00411208                 db    ? ;
.bss:00411209                 db    ? ;
.bss:0041120A                 db    ? ;
.bss:0041120B                 db    ? ;
.bss:0041120C                 db    ? ;
.bss:0041120D                 db    ? ;
.bss:0041120E                 db    ? ;
.bss:0041120F                 db    ? ;
.bss:00411210                 db    ? ;
.bss:00411211                 db    ? ;
.bss:00411212                 db    ? ;
.bss:00411213                 db    ? ;
.bss:00411214                 db    ? ;
.bss:00411215                 db    ? ;
.bss:00411216                 db    ? ;
.bss:00411217                 db    ? ;
.bss:00411218                 db    ? ;
.bss:00411219                 db    ? ;
.bss:0041121A                 db    ? ;
.bss:0041121B                 db    ? ;
.bss:0041121C                 db    ? ;
.bss:0041121D                 db    ? ;
.bss:0041121E                 db    ? ;
.bss:0041121F                 db    ? ;
.bss:00411220 ; char byte_411220[1024]
.bss:00411220 byte_411220     db 400h dup(?)          ; DATA XREF: sub_405E70+1A↑o
.bss:00411620 dword_411620    dd ?                    ; DATA XREF: sub_406580+3↑r
.bss:00411620                                         ; sub_406580+19↑w
.bss:00411624                 align 10h
.bss:00411630 dword_411630    dd ?                    ; DATA XREF: sub_4079B0+100↑r
.bss:00411630                                         ; sub_4079B0+308↑w
.bss:00411634                 align 10h
.bss:00411640 ; char *Str
.bss:00411640 Str             dd ?                    ; DATA XREF: sub_4079B0:loc_407D14↑r
.bss:00411640                                         ; sub_4079B0+3B6↑r ...
.bss:00411644                 align 10h
.bss:00411650 ; CHAR byte_411650[272]
.bss:00411650 byte_411650     db 110h dup(?)          ; DATA XREF: sub_408CE0+17↑o
.bss:00411650                                         ; sub_408CE0+26↑o
.bss:00411760 dword_411760    dd ?                    ; DATA XREF: sub_408D50+40↑w
.bss:00411760                                         ; sub_408E90+1D↑r ...
.bss:00411764 dword_411764    dd ?                    ; DATA XREF: sub_408D50+4B↑w
.bss:00411764                                         ; sub_408E90+23↑r ...
.bss:00411768                 align 10h
.bss:00411770 dword_411770    dd ?                    ; DATA XREF: sub_408D50+35↑w
.bss:00411770                                         ; sub_408E90+7B↑o ...
.bss:00411774 unk_411774      db    ? ;               ; DATA XREF: sub_408E90+DE↑o
.bss:00411774                                         ; sub_408FE0+FF↑o ...
.bss:00411775                 db    ? ;
.bss:00411776                 db    ? ;
.bss:00411777                 db    ? ;
.bss:00411778 ; char Str2[32]
.bss:00411778 Str2            db 20h dup(?)           ; DATA XREF: sub_408FE0+C5↑o
.bss:00411778                                         ; sub_409190+89↑o
.bss:00411798 byte_411798     db ?                    ; DATA XREF: sub_409190+67↑r
.bss:00411798                                         ; sub_409190+2CE↑o
.bss:00411799                 db    ? ;
.bss:0041179A                 db    ? ;
.bss:0041179B                 db    ? ;
.bss:0041179C                 db    ? ;
.bss:0041179D                 db    ? ;
.bss:0041179E                 db    ? ;
.bss:0041179F                 db    ? ;
.bss:004117A0                 db    ? ;
.bss:004117A1                 db    ? ;
.bss:004117A2                 db    ? ;
.bss:004117A3                 db    ? ;
.bss:004117A4                 db    ? ;
.bss:004117A5                 db    ? ;
.bss:004117A6                 db    ? ;
.bss:004117A7                 db    ? ;
.bss:004117A8                 db    ? ;
.bss:004117A9                 db    ? ;
.bss:004117AA                 db    ? ;
.bss:004117AB                 db    ? ;
.bss:004117AC                 db    ? ;
.bss:004117AD                 db    ? ;
.bss:004117AE                 db    ? ;
.bss:004117AF                 db    ? ;
.bss:004117B0                 db    ? ;
.bss:004117B1                 db    ? ;
.bss:004117B2                 db    ? ;
.bss:004117B3                 db    ? ;
.bss:004117B4                 db    ? ;
.bss:004117B5                 db    ? ;
.bss:004117B6                 db    ? ;
.bss:004117B7                 db    ? ;
.bss:004117B8                 db    ? ;
.bss:004117B9                 db    ? ;
.bss:004117BA                 db    ? ;
.bss:004117BB                 db    ? ;
.bss:004117BC                 db    ? ;
.bss:004117BD                 db    ? ;
.bss:004117BE                 db    ? ;
.bss:004117BF                 db    ? ;
.bss:004117C0                 db    ? ;
.bss:004117C1                 db    ? ;
.bss:004117C2                 db    ? ;
.bss:004117C3                 db    ? ;
.bss:004117C4                 db    ? ;
.bss:004117C5                 db    ? ;
.bss:004117C6                 db    ? ;
.bss:004117C7                 db    ? ;
.bss:004117C8                 db    ? ;
.bss:004117C9                 db    ? ;
.bss:004117CA                 db    ? ;
.bss:004117CB                 db    ? ;
.bss:004117CC                 db    ? ;
.bss:004117CD                 db    ? ;
.bss:004117CE                 db    ? ;
.bss:004117CF                 db    ? ;
.bss:004117D0                 db    ? ;
.bss:004117D1                 db    ? ;
.bss:004117D2                 db    ? ;
.bss:004117D3                 db    ? ;
.bss:004117D4                 db    ? ;
.bss:004117D5                 db    ? ;
.bss:004117D6                 db    ? ;
.bss:004117D7                 db    ? ;
.bss:004117D8                 db    ? ;
.bss:004117D9                 db    ? ;
.bss:004117DA                 db    ? ;
.bss:004117DB                 db    ? ;
.bss:004117DC                 db    ? ;
.bss:004117DD                 db    ? ;
.bss:004117DE                 db    ? ;
.bss:004117DF                 db    ? ;
.bss:004117E0                 db    ? ;
.bss:004117E1                 db    ? ;
.bss:004117E2                 db    ? ;
.bss:004117E3                 db    ? ;
.bss:004117E4                 db    ? ;
.bss:004117E5                 db    ? ;
.bss:004117E6                 db    ? ;
.bss:004117E7                 db    ? ;
.bss:004117E8                 db    ? ;
.bss:004117E9                 db    ? ;
.bss:004117EA                 db    ? ;
.bss:004117EB                 db    ? ;
.bss:004117EC                 db    ? ;
.bss:004117ED                 db    ? ;
.bss:004117EE                 db    ? ;
.bss:004117EF                 db    ? ;
.bss:004117F0                 db    ? ;
.bss:004117F1                 db    ? ;
.bss:004117F2                 db    ? ;
.bss:004117F3                 db    ? ;
.bss:004117F4                 db    ? ;
.bss:004117F5                 db    ? ;
.bss:004117F6                 db    ? ;
.bss:004117F7                 db    ? ;
.bss:004117F8                 db    ? ;
.bss:004117F9                 db    ? ;
.bss:004117FA                 db    ? ;
.bss:004117FB                 db    ? ;
.bss:004117FC                 db    ? ;
.bss:004117FD                 db    ? ;
.bss:004117FE                 db    ? ;
.bss:004117FF                 db    ? ;
.bss:00411800                 db    ? ;
.bss:00411801                 db    ? ;
.bss:00411802                 db    ? ;
.bss:00411803                 db    ? ;
.bss:00411804                 db    ? ;
.bss:00411805                 db    ? ;
.bss:00411806                 db    ? ;
.bss:00411807                 db    ? ;
.bss:00411808                 db    ? ;
.bss:00411809                 db    ? ;
.bss:0041180A                 db    ? ;
.bss:0041180B                 db    ? ;
.bss:0041180C                 db    ? ;
.bss:0041180D                 db    ? ;
.bss:0041180E                 db    ? ;
.bss:0041180F                 db    ? ;
.bss:00411810                 db    ? ;
.bss:00411811                 db    ? ;
.bss:00411812                 db    ? ;
.bss:00411813                 db    ? ;
.bss:00411814                 db    ? ;
.bss:00411815                 db    ? ;
.bss:00411816                 db    ? ;
.bss:00411817                 db    ? ;
.bss:00411818                 db    ? ;
.bss:00411819                 db    ? ;
.bss:0041181A                 db    ? ;
.bss:0041181B                 db    ? ;
.bss:0041181C                 db    ? ;
.bss:0041181D                 db    ? ;
.bss:0041181E                 db    ? ;
.bss:0041181F                 db    ? ;
.bss:00411820                 db    ? ;
.bss:00411821                 db    ? ;
.bss:00411822                 db    ? ;
.bss:00411823                 db    ? ;
.bss:00411824                 db    ? ;
.bss:00411825                 db    ? ;
.bss:00411826                 db    ? ;
.bss:00411827                 db    ? ;
.bss:00411828                 db    ? ;
.bss:00411829                 db    ? ;
.bss:0041182A                 db    ? ;
.bss:0041182B                 db    ? ;
.bss:0041182C                 db    ? ;
.bss:0041182D                 db    ? ;
.bss:0041182E                 db    ? ;
.bss:0041182F                 db    ? ;
.bss:00411830                 db    ? ;
.bss:00411831                 db    ? ;
.bss:00411832                 db    ? ;
.bss:00411833                 db    ? ;
.bss:00411834                 db    ? ;
.bss:00411835                 db    ? ;
.bss:00411836                 db    ? ;
.bss:00411837                 db    ? ;
.bss:00411838                 db    ? ;
.bss:00411839                 db    ? ;
.bss:0041183A                 db    ? ;
.bss:0041183B                 db    ? ;
.bss:0041183C                 db    ? ;
.bss:0041183D                 db    ? ;
.bss:0041183E                 db    ? ;
.bss:0041183F                 db    ? ;
.bss:00411840                 db    ? ;
.bss:00411841                 db    ? ;
.bss:00411842                 db    ? ;
.bss:00411843                 db    ? ;
.bss:00411844                 db    ? ;
.bss:00411845                 db    ? ;
.bss:00411846                 db    ? ;
.bss:00411847                 db    ? ;
.bss:00411848                 db    ? ;
.bss:00411849                 db    ? ;
.bss:0041184A                 db    ? ;
.bss:0041184B                 db    ? ;
.bss:0041184C                 db    ? ;
.bss:0041184D                 db    ? ;
.bss:0041184E                 db    ? ;
.bss:0041184F                 db    ? ;
.bss:00411850                 db    ? ;
.bss:00411851                 db    ? ;
.bss:00411852                 db    ? ;
.bss:00411853                 db    ? ;
.bss:00411854                 db    ? ;
.bss:00411855                 db    ? ;
.bss:00411856                 db    ? ;
.bss:00411857                 db    ? ;
.bss:00411858                 db    ? ;
.bss:00411859                 db    ? ;
.bss:0041185A                 db    ? ;
.bss:0041185B                 db    ? ;
.bss:0041185C                 db    ? ;
.bss:0041185D                 db    ? ;
.bss:0041185E                 db    ? ;
.bss:0041185F                 db    ? ;
.bss:00411860                 db    ? ;
.bss:00411861                 db    ? ;
.bss:00411862                 db    ? ;
.bss:00411863                 db    ? ;
.bss:00411864                 db    ? ;
.bss:00411865                 db    ? ;
.bss:00411866                 db    ? ;
.bss:00411867                 db    ? ;
.bss:00411868                 db    ? ;
.bss:00411869                 db    ? ;
.bss:0041186A                 db    ? ;
.bss:0041186B                 db    ? ;
.bss:0041186C                 db    ? ;
.bss:0041186D                 db    ? ;
.bss:0041186E                 db    ? ;
.bss:0041186F                 db    ? ;
.bss:00411870                 db    ? ;
.bss:00411871                 db    ? ;
.bss:00411872                 db    ? ;
.bss:00411873                 db    ? ;
.bss:00411874                 db    ? ;
.bss:00411875                 db    ? ;
.bss:00411876                 db    ? ;
.bss:00411877                 db    ? ;
.bss:00411878                 db    ? ;
.bss:00411879                 db    ? ;
.bss:0041187A                 db    ? ;
.bss:0041187B                 db    ? ;
.bss:0041187C                 db    ? ;
.bss:0041187D                 db    ? ;
.bss:0041187E                 db    ? ;
.bss:0041187F                 db    ? ;
.bss:00411880                 db    ? ;
.bss:00411881                 db    ? ;
.bss:00411882                 db    ? ;
.bss:00411883                 db    ? ;
.bss:00411884                 db    ? ;
.bss:00411885                 db    ? ;
.bss:00411886                 db    ? ;
.bss:00411887                 db    ? ;
.bss:00411888                 db    ? ;
.bss:00411889                 db    ? ;
.bss:0041188A                 db    ? ;
.bss:0041188B                 db    ? ;
.bss:0041188C                 db    ? ;
.bss:0041188D                 db    ? ;
.bss:0041188E                 db    ? ;
.bss:0041188F                 db    ? ;
.bss:00411890                 db    ? ;
.bss:00411891                 db    ? ;
.bss:00411892                 db    ? ;
.bss:00411893                 db    ? ;
.bss:00411894                 db    ? ;
.bss:00411895                 db    ? ;
.bss:00411896                 db    ? ;
.bss:00411897                 db    ? ;
.bss:00411898                 db    ? ;
.bss:00411899                 db    ? ;
.bss:0041189A                 db    ? ;
.bss:0041189B                 db    ? ;
.bss:0041189C                 db    ? ;
.bss:0041189D                 db    ? ;
.bss:0041189E                 db    ? ;
.bss:0041189F                 db    ? ;
.bss:004118A0                 db    ? ;
.bss:004118A1                 db    ? ;
.bss:004118A2                 db    ? ;
.bss:004118A3                 db    ? ;
.bss:004118A4                 db    ? ;
.bss:004118A5                 db    ? ;
.bss:004118A6                 db    ? ;
.bss:004118A7                 db    ? ;
.bss:004118A8                 db    ? ;
.bss:004118A9                 db    ? ;
.bss:004118AA                 db    ? ;
.bss:004118AB                 db    ? ;
.bss:004118AC                 db    ? ;
.bss:004118AD                 db    ? ;
.bss:004118AE                 db    ? ;
.bss:004118AF                 db    ? ;
.bss:004118B0                 db    ? ;
.bss:004118B1                 db    ? ;
.bss:004118B2                 db    ? ;
.bss:004118B3                 db    ? ;
.bss:004118B4                 db    ? ;
.bss:004118B5                 db    ? ;
.bss:004118B6                 db    ? ;
.bss:004118B7                 db    ? ;
.bss:004118B8                 db    ? ;
.bss:004118B9                 db    ? ;
.bss:004118BA                 db    ? ;
.bss:004118BB                 db    ? ;
.bss:004118BC                 db    ? ;
.bss:004118BD                 db    ? ;
.bss:004118BE                 db    ? ;
.bss:004118BF                 db    ? ;
.bss:004118C0                 db    ? ;
.bss:004118C1                 db    ? ;
.bss:004118C2                 db    ? ;
.bss:004118C3                 db    ? ;
.bss:004118C4                 db    ? ;
.bss:004118C5                 db    ? ;
.bss:004118C6                 db    ? ;
.bss:004118C7                 db    ? ;
.bss:004118C8                 db    ? ;
.bss:004118C9                 db    ? ;
.bss:004118CA                 db    ? ;
.bss:004118CB                 db    ? ;
.bss:004118CC                 db    ? ;
.bss:004118CD                 db    ? ;
.bss:004118CE                 db    ? ;
.bss:004118CF                 db    ? ;
.bss:004118D0                 db    ? ;
.bss:004118D1                 db    ? ;
.bss:004118D2                 db    ? ;
.bss:004118D3                 db    ? ;
.bss:004118D4                 db    ? ;
.bss:004118D5                 db    ? ;
.bss:004118D6                 db    ? ;
.bss:004118D7                 db    ? ;
.bss:004118D8                 db    ? ;
.bss:004118D9                 db    ? ;
.bss:004118DA                 db    ? ;
.bss:004118DB                 db    ? ;
.bss:004118DC                 db    ? ;
.bss:004118DD                 db    ? ;
.bss:004118DE                 db    ? ;
.bss:004118DF                 db    ? ;
.bss:004118E0                 db    ? ;
.bss:004118E1                 db    ? ;
.bss:004118E2                 db    ? ;
.bss:004118E3                 db    ? ;
.bss:004118E4                 db    ? ;
.bss:004118E5                 db    ? ;
.bss:004118E6                 db    ? ;
.bss:004118E7                 db    ? ;
.bss:004118E8                 db    ? ;
.bss:004118E9                 db    ? ;
.bss:004118EA                 db    ? ;
.bss:004118EB                 db    ? ;
.bss:004118EC                 db    ? ;
.bss:004118ED                 db    ? ;
.bss:004118EE                 db    ? ;
.bss:004118EF                 db    ? ;
.bss:004118F0 dword_4118F0    dd ?                    ; DATA XREF: sub_40A090+8↑r
.bss:004118F0                                         ; sub_40A1A0:loc_40A222↑w ...
.bss:004118F4                 align 10h
.bss:00411900 ; struct _OSVERSIONINFOA VersionInformation
.bss:00411900 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40A1A0:loc_40A1C0↑o
.bss:00411900                                         ; sub_40A1A0+2C↑w ...
.bss:00411994 word_411994     dw ?                    ; DATA XREF: sub_40A1A0:loc_40A253↑r
.bss:00411996                 align 4
.bss:00411998 word_411998     dw ?                    ; DATA XREF: .text:loc_409C16↑r
.bss:00411998                                         ; .text:00409C44↑r ...
.bss:0041199A byte_41199A     db ?                    ; DATA XREF: .text:00409BD5↑r
.bss:0041199B                 align 10h
.bss:004119A0 dword_4119A0    dd ?                    ; DATA XREF: sub_40A1A0+6↑r
.bss:004119A0                                         ; sub_40A1A0+75↑w
.bss:004119A4                 align 10h
.bss:004119B0 dword_4119B0    dd ?                    ; DATA XREF: sub_40A770+1C↑r
.bss:004119B0                                         ; sub_40A770+104↑w
.bss:004119B4                 align 10h
.bss:004119C0 dword_4119C0    dd ?                    ; DATA XREF: sub_40A770+B↑r
.bss:004119C0                                         ; sub_40A770+71↑w
.bss:004119C4                 align 10h
.bss:004119D0 dword_4119D0    dd ?                    ; DATA XREF: sub_40A770+85↑r
.bss:004119D0                                         ; sub_40A770+B9↑w
.bss:004119D4 dword_4119D4    dd ?                    ; DATA XREF: sub_40A770+C4↑w
.bss:004119D8 dword_4119D8    dd ?                    ; DATA XREF: sub_40A770+2E↑o
.bss:004119D8                                         ; sub_40A770+CF↑w
.bss:004119DC dword_4119DC    dd ?                    ; DATA XREF: sub_40A770+DA↑w
.bss:004119E0                 db    ? ;
.bss:004119E1                 db    ? ;
.bss:004119E2                 db    ? ;
.bss:004119E3                 db    ? ;
.bss:004119E4                 db    ? ;
.bss:004119E5                 db    ? ;
.bss:004119E6                 db    ? ;
.bss:004119E7                 db    ? ;
.bss:004119E8                 db    ? ;
.bss:004119E9                 db    ? ;
.bss:004119EA                 db    ? ;
.bss:004119EB                 db    ? ;
.bss:004119EC                 db    ? ;
.bss:004119ED                 db    ? ;
.bss:004119EE                 db    ? ;
.bss:004119EF                 db    ? ;
.bss:004119F0                 db    ? ;
.bss:004119F1                 db    ? ;
.bss:004119F2                 db    ? ;
.bss:004119F3                 db    ? ;
.bss:004119F4                 db    ? ;
.bss:004119F5                 db    ? ;
.bss:004119F6                 db    ? ;
.bss:004119F7                 db    ? ;
.bss:004119F8                 db    ? ;
.bss:004119F9                 db    ? ;
.bss:004119FA                 db    ? ;
.bss:004119FB                 db    ? ;
.bss:004119FC                 db    ? ;
.bss:004119FD                 db    ? ;
.bss:004119FE                 db    ? ;
.bss:004119FF                 db    ? ;
.bss:00411A00                 db    ? ;
.bss:00411A01                 db    ? ;
.bss:00411A02                 db    ? ;
.bss:00411A03                 db    ? ;
.bss:00411A04                 db    ? ;
.bss:00411A05                 db    ? ;
.bss:00411A06                 db    ? ;
.bss:00411A07                 db    ? ;
.bss:00411A08                 db    ? ;
.bss:00411A09                 db    ? ;
.bss:00411A0A                 db    ? ;
.bss:00411A0B                 db    ? ;
.bss:00411A0C                 db    ? ;
.bss:00411A0D                 db    ? ;
.bss:00411A0E                 db    ? ;
.bss:00411A0F                 db    ? ;
.bss:00411A10                 db    ? ;
.bss:00411A11                 db    ? ;
.bss:00411A12                 db    ? ;
.bss:00411A13                 db    ? ;
.bss:00411A14                 db    ? ;
.bss:00411A15                 db    ? ;
.bss:00411A16                 db    ? ;
.bss:00411A17                 db    ? ;
.bss:00411A18                 db    ? ;
.bss:00411A19                 db    ? ;
.bss:00411A1A                 db    ? ;
.bss:00411A1B                 db    ? ;
.bss:00411A1C                 db    ? ;
.bss:00411A1D                 db    ? ;
.bss:00411A1E                 db    ? ;
.bss:00411A1F                 db    ? ;
.bss:00411A20                 db    ? ;
.bss:00411A21                 db    ? ;
.bss:00411A22                 db    ? ;
.bss:00411A23                 db    ? ;
.bss:00411A24                 db    ? ;
.bss:00411A25                 db    ? ;
.bss:00411A26                 db    ? ;
.bss:00411A27                 db    ? ;
.bss:00411A28                 db    ? ;
.bss:00411A29                 db    ? ;
.bss:00411A2A                 db    ? ;
.bss:00411A2B                 db    ? ;
.bss:00411A2C                 db    ? ;
.bss:00411A2D                 db    ? ;
.bss:00411A2E                 db    ? ;
.bss:00411A2F                 db    ? ;
.bss:00411A30                 db    ? ;
.bss:00411A31                 db    ? ;
.bss:00411A32                 db    ? ;
.bss:00411A33                 db    ? ;
.bss:00411A34                 db    ? ;
.bss:00411A35                 db    ? ;
.bss:00411A36                 db    ? ;
.bss:00411A37                 db    ? ;
.bss:00411A38                 db    ? ;
.bss:00411A39                 db    ? ;
.bss:00411A3A                 db    ? ;
.bss:00411A3B                 db    ? ;
.bss:00411A3C                 db    ? ;
.bss:00411A3D                 db    ? ;
.bss:00411A3E                 db    ? ;
.bss:00411A3F                 db    ? ;
.bss:00411A40                 db    ? ;
.bss:00411A41                 db    ? ;
.bss:00411A42                 db    ? ;
.bss:00411A43                 db    ? ;
.bss:00411A44                 db    ? ;
.bss:00411A45                 db    ? ;
.bss:00411A46                 db    ? ;
.bss:00411A47                 db    ? ;
.bss:00411A48                 db    ? ;
.bss:00411A49                 db    ? ;
.bss:00411A4A                 db    ? ;
.bss:00411A4B                 db    ? ;
.bss:00411A4C                 db    ? ;
.bss:00411A4D                 db    ? ;
.bss:00411A4E                 db    ? ;
.bss:00411A4F                 db    ? ;
.bss:00411A50                 db    ? ;
.bss:00411A51                 db    ? ;
.bss:00411A52                 db    ? ;
.bss:00411A53                 db    ? ;
.bss:00411A54                 db    ? ;
.bss:00411A55                 db    ? ;
.bss:00411A56                 db    ? ;
.bss:00411A57                 db    ? ;
.bss:00411A58                 db    ? ;
.bss:00411A59                 db    ? ;
.bss:00411A5A                 db    ? ;
.bss:00411A5B                 db    ? ;
.bss:00411A5C                 db    ? ;
.bss:00411A5D                 db    ? ;
.bss:00411A5E                 db    ? ;
.bss:00411A5F                 db    ? ;
.bss:00411A60                 db    ? ;
.bss:00411A61                 db    ? ;
.bss:00411A62                 db    ? ;
.bss:00411A63                 db    ? ;
.bss:00411A64                 db    ? ;
.bss:00411A65                 db    ? ;
.bss:00411A66                 db    ? ;
.bss:00411A67                 db    ? ;
.bss:00411A68                 db    ? ;
.bss:00411A69                 db    ? ;
.bss:00411A6A                 db    ? ;
.bss:00411A6B                 db    ? ;
.bss:00411A6C                 db    ? ;
.bss:00411A6D                 db    ? ;
.bss:00411A6E                 db    ? ;
.bss:00411A6F                 db    ? ;
.bss:00411A70                 db    ? ;
.bss:00411A71                 db    ? ;
.bss:00411A72                 db    ? ;
.bss:00411A73                 db    ? ;
.bss:00411A74                 db    ? ;
.bss:00411A75                 db    ? ;
.bss:00411A76                 db    ? ;
.bss:00411A77                 db    ? ;
.bss:00411A78                 db    ? ;
.bss:00411A79                 db    ? ;
.bss:00411A7A                 db    ? ;
.bss:00411A7B                 db    ? ;
.bss:00411A7C                 db    ? ;
.bss:00411A7D                 db    ? ;
.bss:00411A7E                 db    ? ;
.bss:00411A7F                 db    ? ;
.bss:00411A80                 db    ? ;
.bss:00411A81                 db    ? ;
.bss:00411A82                 db    ? ;
.bss:00411A83                 db    ? ;
.bss:00411A84                 db    ? ;
.bss:00411A85                 db    ? ;
.bss:00411A86                 db    ? ;
.bss:00411A87                 db    ? ;
.bss:00411A88                 db    ? ;
.bss:00411A89                 db    ? ;
.bss:00411A8A                 db    ? ;
.bss:00411A8B                 db    ? ;
.bss:00411A8C                 db    ? ;
.bss:00411A8D                 db    ? ;
.bss:00411A8E                 db    ? ;
.bss:00411A8F                 db    ? ;
.bss:00411A90                 db    ? ;
.bss:00411A91                 db    ? ;
.bss:00411A92                 db    ? ;
.bss:00411A93                 db    ? ;
.bss:00411A94                 db    ? ;
.bss:00411A95                 db    ? ;
.bss:00411A96                 db    ? ;
.bss:00411A97                 db    ? ;
.bss:00411A98                 db    ? ;
.bss:00411A99                 db    ? ;
.bss:00411A9A                 db    ? ;
.bss:00411A9B                 db    ? ;
.bss:00411A9C                 db    ? ;
.bss:00411A9D                 db    ? ;
.bss:00411A9E                 db    ? ;
.bss:00411A9F                 db    ? ;
.bss:00411AA0                 db    ? ;
.bss:00411AA1                 db    ? ;
.bss:00411AA2                 db    ? ;
.bss:00411AA3                 db    ? ;
.bss:00411AA4                 db    ? ;
.bss:00411AA5                 db    ? ;
.bss:00411AA6                 db    ? ;
.bss:00411AA7                 db    ? ;
.bss:00411AA8                 db    ? ;
.bss:00411AA9                 db    ? ;
.bss:00411AAA                 db    ? ;
.bss:00411AAB                 db    ? ;
.bss:00411AAC                 db    ? ;
.bss:00411AAD                 db    ? ;
.bss:00411AAE                 db    ? ;
.bss:00411AAF                 db    ? ;
.bss:00411AB0                 db    ? ;
.bss:00411AB1                 db    ? ;
.bss:00411AB2                 db    ? ;
.bss:00411AB3                 db    ? ;
.bss:00411AB4                 db    ? ;
.bss:00411AB5                 db    ? ;
.bss:00411AB6                 db    ? ;
.bss:00411AB7                 db    ? ;
.bss:00411AB8                 db    ? ;
.bss:00411AB9                 db    ? ;
.bss:00411ABA                 db    ? ;
.bss:00411ABB                 db    ? ;
.bss:00411ABC                 db    ? ;
.bss:00411ABD                 db    ? ;
.bss:00411ABE                 db    ? ;
.bss:00411ABF                 db    ? ;
.bss:00411AC0                 db    ? ;
.bss:00411AC1                 db    ? ;
.bss:00411AC2                 db    ? ;
.bss:00411AC3                 db    ? ;
.bss:00411AC4                 db    ? ;
.bss:00411AC5                 db    ? ;
.bss:00411AC6                 db    ? ;
.bss:00411AC7                 db    ? ;
.bss:00411AC8                 db    ? ;
.bss:00411AC9                 db    ? ;
.bss:00411ACA                 db    ? ;
.bss:00411ACB                 db    ? ;
.bss:00411ACC                 db    ? ;
.bss:00411ACD                 db    ? ;
.bss:00411ACE                 db    ? ;
.bss:00411ACF                 db    ? ;
.bss:00411AD0                 db    ? ;
.bss:00411AD1                 db    ? ;
.bss:00411AD2                 db    ? ;
.bss:00411AD3                 db    ? ;
.bss:00411AD4                 db    ? ;
.bss:00411AD5                 db    ? ;
.bss:00411AD6                 db    ? ;
.bss:00411AD7                 db    ? ;
.bss:00411AD8                 db    ? ;
.bss:00411AD9                 db    ? ;
.bss:00411ADA                 db    ? ;
.bss:00411ADB                 db    ? ;
.bss:00411ADC                 db    ? ;
.bss:00411ADD                 db    ? ;
.bss:00411ADE                 db    ? ;
.bss:00411ADF                 db    ? ;
.bss:00411AE0                 db    ? ;
.bss:00411AE1                 db    ? ;
.bss:00411AE2                 db    ? ;
.bss:00411AE3                 db    ? ;
.bss:00411AE4                 db    ? ;
.bss:00411AE5                 db    ? ;
.bss:00411AE6                 db    ? ;
.bss:00411AE7                 db    ? ;
.bss:00411AE8                 db    ? ;
.bss:00411AE9                 db    ? ;
.bss:00411AEA                 db    ? ;
.bss:00411AEB                 db    ? ;
.bss:00411AEC                 db    ? ;
.bss:00411AED                 db    ? ;
.bss:00411AEE                 db    ? ;
.bss:00411AEF                 db    ? ;
.bss:00411AF0                 db    ? ;
.bss:00411AF1                 db    ? ;
.bss:00411AF2                 db    ? ;
.bss:00411AF3                 db    ? ;
.bss:00411AF4                 db    ? ;
.bss:00411AF5                 db    ? ;
.bss:00411AF6                 db    ? ;
.bss:00411AF7                 db    ? ;
.bss:00411AF8                 db    ? ;
.bss:00411AF9                 db    ? ;
.bss:00411AFA                 db    ? ;
.bss:00411AFB                 db    ? ;
.bss:00411AFC                 db    ? ;
.bss:00411AFD                 db    ? ;
.bss:00411AFE                 db    ? ;
.bss:00411AFF                 db    ? ;
.bss:00411B00                 db    ? ;
.bss:00411B01                 db    ? ;
.bss:00411B02                 db    ? ;
.bss:00411B03                 db    ? ;
.bss:00411B04                 db    ? ;
.bss:00411B05                 db    ? ;
.bss:00411B06                 db    ? ;
.bss:00411B07                 db    ? ;
.bss:00411B08                 db    ? ;
.bss:00411B09                 db    ? ;
.bss:00411B0A                 db    ? ;
.bss:00411B0B                 db    ? ;
.bss:00411B0C                 db    ? ;
.bss:00411B0D                 db    ? ;
.bss:00411B0E                 db    ? ;
.bss:00411B0F                 db    ? ;
.bss:00411B10                 db    ? ;
.bss:00411B11                 db    ? ;
.bss:00411B12                 db    ? ;
.bss:00411B13                 db    ? ;
.bss:00411B14                 db    ? ;
.bss:00411B15                 db    ? ;
.bss:00411B16                 db    ? ;
.bss:00411B17                 db    ? ;
.bss:00411B18                 db    ? ;
.bss:00411B19                 db    ? ;
.bss:00411B1A                 db    ? ;
.bss:00411B1B                 db    ? ;
.bss:00411B1C                 db    ? ;
.bss:00411B1D                 db    ? ;
.bss:00411B1E                 db    ? ;
.bss:00411B1F                 db    ? ;
.bss:00411B20                 db    ? ;
.bss:00411B21                 db    ? ;
.bss:00411B22                 db    ? ;
.bss:00411B23                 db    ? ;
.bss:00411B24                 db    ? ;
.bss:00411B25                 db    ? ;
.bss:00411B26                 db    ? ;
.bss:00411B27                 db    ? ;
.bss:00411B28                 db    ? ;
.bss:00411B29                 db    ? ;
.bss:00411B2A                 db    ? ;
.bss:00411B2B                 db    ? ;
.bss:00411B2C                 db    ? ;
.bss:00411B2D                 db    ? ;
.bss:00411B2E                 db    ? ;
.bss:00411B2F                 db    ? ;
.bss:00411B30                 db    ? ;
.bss:00411B31                 db    ? ;
.bss:00411B32                 db    ? ;
.bss:00411B33                 db    ? ;
.bss:00411B34                 db    ? ;
.bss:00411B35                 db    ? ;
.bss:00411B36                 db    ? ;
.bss:00411B37                 db    ? ;
.bss:00411B38                 db    ? ;
.bss:00411B39                 db    ? ;
.bss:00411B3A                 db    ? ;
.bss:00411B3B                 db    ? ;
.bss:00411B3C                 db    ? ;
.bss:00411B3D                 db    ? ;
.bss:00411B3E                 db    ? ;
.bss:00411B3F                 db    ? ;
.bss:00411B40                 db    ? ;
.bss:00411B41                 db    ? ;
.bss:00411B42                 db    ? ;
.bss:00411B43                 db    ? ;
.bss:00411B44                 db    ? ;
.bss:00411B45                 db    ? ;
.bss:00411B46                 db    ? ;
.bss:00411B47                 db    ? ;
.bss:00411B48                 db    ? ;
.bss:00411B49                 db    ? ;
.bss:00411B4A                 db    ? ;
.bss:00411B4B                 db    ? ;
.bss:00411B4C                 db    ? ;
.bss:00411B4D                 db    ? ;
.bss:00411B4E                 db    ? ;
.bss:00411B4F                 db    ? ;
.bss:00411B50                 db    ? ;
.bss:00411B51                 db    ? ;
.bss:00411B52                 db    ? ;
.bss:00411B53                 db    ? ;
.bss:00411B54                 db    ? ;
.bss:00411B55                 db    ? ;
.bss:00411B56                 db    ? ;
.bss:00411B57                 db    ? ;
.bss:00411B58                 db    ? ;
.bss:00411B59                 db    ? ;
.bss:00411B5A                 db    ? ;
.bss:00411B5B                 db    ? ;
.bss:00411B5C                 db    ? ;
.bss:00411B5D                 db    ? ;
.bss:00411B5E                 db    ? ;
.bss:00411B5F                 db    ? ;
.bss:00411B60                 db    ? ;
.bss:00411B61                 db    ? ;
.bss:00411B62                 db    ? ;
.bss:00411B63                 db    ? ;
.bss:00411B64                 db    ? ;
.bss:00411B65                 db    ? ;
.bss:00411B66                 db    ? ;
.bss:00411B67                 db    ? ;
.bss:00411B68                 db    ? ;
.bss:00411B69                 db    ? ;
.bss:00411B6A                 db    ? ;
.bss:00411B6B                 db    ? ;
.bss:00411B6C                 db    ? ;
.bss:00411B6D                 db    ? ;
.bss:00411B6E                 db    ? ;
.bss:00411B6F                 db    ? ;
.bss:00411B70                 db    ? ;
.bss:00411B71                 db    ? ;
.bss:00411B72                 db    ? ;
.bss:00411B73                 db    ? ;
.bss:00411B74                 db    ? ;
.bss:00411B75                 db    ? ;
.bss:00411B76                 db    ? ;
.bss:00411B77                 db    ? ;
.bss:00411B78                 db    ? ;
.bss:00411B79                 db    ? ;
.bss:00411B7A                 db    ? ;
.bss:00411B7B                 db    ? ;
.bss:00411B7C                 db    ? ;
.bss:00411B7D                 db    ? ;
.bss:00411B7E                 db    ? ;
.bss:00411B7F                 db    ? ;
.bss:00411B80                 db    ? ;
.bss:00411B81                 db    ? ;
.bss:00411B82                 db    ? ;
.bss:00411B83                 db    ? ;
.bss:00411B84                 db    ? ;
.bss:00411B85                 db    ? ;
.bss:00411B86                 db    ? ;
.bss:00411B87                 db    ? ;
.bss:00411B88                 db    ? ;
.bss:00411B89                 db    ? ;
.bss:00411B8A                 db    ? ;
.bss:00411B8B                 db    ? ;
.bss:00411B8C                 db    ? ;
.bss:00411B8D                 db    ? ;
.bss:00411B8E                 db    ? ;
.bss:00411B8F                 db    ? ;
.bss:00411B90                 db    ? ;
.bss:00411B91                 db    ? ;
.bss:00411B92                 db    ? ;
.bss:00411B93                 db    ? ;
.bss:00411B94                 db    ? ;
.bss:00411B95                 db    ? ;
.bss:00411B96                 db    ? ;
.bss:00411B97                 db    ? ;
.bss:00411B98                 db    ? ;
.bss:00411B99                 db    ? ;
.bss:00411B9A                 db    ? ;
.bss:00411B9B                 db    ? ;
.bss:00411B9C                 db    ? ;
.bss:00411B9D                 db    ? ;
.bss:00411B9E                 db    ? ;
.bss:00411B9F                 db    ? ;
.bss:00411BA0                 db    ? ;
.bss:00411BA1                 db    ? ;
.bss:00411BA2                 db    ? ;
.bss:00411BA3                 db    ? ;
.bss:00411BA4                 db    ? ;
.bss:00411BA5                 db    ? ;
.bss:00411BA6                 db    ? ;
.bss:00411BA7                 db    ? ;
.bss:00411BA8                 db    ? ;
.bss:00411BA9                 db    ? ;
.bss:00411BAA                 db    ? ;
.bss:00411BAB                 db    ? ;
.bss:00411BAC                 db    ? ;
.bss:00411BAD                 db    ? ;
.bss:00411BAE                 db    ? ;
.bss:00411BAF                 db    ? ;
.bss:00411BB0                 db    ? ;
.bss:00411BB1                 db    ? ;
.bss:00411BB2                 db    ? ;
.bss:00411BB3                 db    ? ;
.bss:00411BB4                 db    ? ;
.bss:00411BB5                 db    ? ;
.bss:00411BB6                 db    ? ;
.bss:00411BB7                 db    ? ;
.bss:00411BB8                 db    ? ;
.bss:00411BB9                 db    ? ;
.bss:00411BBA                 db    ? ;
.bss:00411BBB                 db    ? ;
.bss:00411BBC                 db    ? ;
.bss:00411BBD                 db    ? ;
.bss:00411BBE                 db    ? ;
.bss:00411BBF                 db    ? ;
.bss:00411BC0                 db    ? ;
.bss:00411BC1                 db    ? ;
.bss:00411BC2                 db    ? ;
.bss:00411BC3                 db    ? ;
.bss:00411BC4                 db    ? ;
.bss:00411BC5                 db    ? ;
.bss:00411BC6                 db    ? ;
.bss:00411BC7                 db    ? ;
.bss:00411BC8                 db    ? ;
.bss:00411BC9                 db    ? ;
.bss:00411BCA                 db    ? ;
.bss:00411BCB                 db    ? ;
.bss:00411BCC                 db    ? ;
.bss:00411BCD                 db    ? ;
.bss:00411BCE                 db    ? ;
.bss:00411BCF                 db    ? ;
.bss:00411BD0 dword_411BD0    dd ?                    ; DATA XREF: sub_40CA70+6E↑r
.bss:00411BD0                                         ; sub_40CA70+9A↑r ...
.bss:00411BD4 dword_411BD4    dd ?                    ; DATA XREF: sub_40CA70:loc_40CAD8↑r
.bss:00411BD4                                         ; sub_40CA70+A0↑r ...
.bss:00411BD8                 align 10h
.bss:00411BE0 dword_411BE0    dd ?                    ; DATA XREF: sub_40CF80↑r
.bss:00411BE0                                         ; .text:loc_40D0B2↑w
.bss:00411BE4                 align 10h
.bss:00411BF0 dword_411BF0    dd ?                    ; DATA XREF: sub_4017F0+2F↑w
.bss:00411BF0                                         ; sub_4017F0+E3↑r ...
.bss:00411BF4                 db    ? ;
.bss:00411BF5                 db    ? ;
.bss:00411BF6                 db    ? ;
.bss:00411BF7                 db    ? ;
.bss:00411BF8                 db    ? ;
.bss:00411BF9                 db    ? ;
.bss:00411BFA                 db    ? ;
.bss:00411BFB                 db    ? ;
.bss:00411BFC                 db    ? ;
.bss:00411BFD                 db    ? ;
.bss:00411BFE                 db    ? ;
.bss:00411BFF                 db    ? ;
.bss:00411C00                 db    ? ;
.bss:00411C01                 db    ? ;
.bss:00411C02                 db    ? ;
.bss:00411C03                 db    ? ;
.bss:00411C04                 db    ? ;
.bss:00411C05                 db    ? ;
.bss:00411C06                 db    ? ;
.bss:00411C07                 db    ? ;
.bss:00411C08                 db    ? ;
.bss:00411C09                 db    ? ;
.bss:00411C0A                 db    ? ;
.bss:00411C0B                 db    ? ;
.bss:00411C0C                 db    ? ;
.bss:00411C0D                 db    ? ;
.bss:00411C0E                 db    ? ;
.bss:00411C0F                 db    ? ;
.bss:00411C10 dword_411C10    dd ?                    ; DATA XREF: sub_403820+71↑w
.bss:00411C10                                         ; .text:00403921↑w
.bss:00411C14                 align 10h
.bss:00411C20 dword_411C20    dd ?                    ; CODE XREF: sub_405BE4+63↑p
.bss:00411C20                                         ; DATA XREF: sub_405AE0+1E↑r ...
.bss:00411C24                 align 10h
.bss:00411C30 dword_411C30    dd ?                    ; DATA XREF: sub_405AE0+4E↑w
.bss:00411C30                                         ; sub_405BE4+AB↑w
.bss:00411C34                 db    ? ;
.bss:00411C35                 db    ? ;
.bss:00411C36                 db    ? ;
.bss:00411C37                 db    ? ;
.bss:00411C38                 db    ? ;
.bss:00411C39                 db    ? ;
.bss:00411C3A                 db    ? ;
.bss:00411C3B                 db    ? ;
.bss:00411C3C                 db    ? ;
.bss:00411C3D                 db    ? ;
.bss:00411C3E                 db    ? ;
.bss:00411C3F                 db    ? ;
.bss:00411C40                 db    ? ;
.bss:00411C41                 db    ? ;
.bss:00411C42                 db    ? ;
.bss:00411C43                 db    ? ;
.bss:00411C44                 db    ? ;
.bss:00411C45                 db    ? ;
.bss:00411C46                 db    ? ;
.bss:00411C47                 db    ? ;
.bss:00411C48                 db    ? ;
.bss:00411C49                 db    ? ;
.bss:00411C4A                 db    ? ;
.bss:00411C4B                 db    ? ;
.bss:00411C4C                 db    ? ;
.bss:00411C4D                 db    ? ;
.bss:00411C4E                 db    ? ;
.bss:00411C4F                 db    ? ;
.bss:00411C50                 db    ? ;
.bss:00411C51                 db    ? ;
.bss:00411C52                 db    ? ;
.bss:00411C53                 db    ? ;
.bss:00411C54                 db    ? ;
.bss:00411C55                 db    ? ;
.bss:00411C56                 db    ? ;
.bss:00411C57                 db    ? ;
.bss:00411C58                 db    ? ;
.bss:00411C59                 db    ? ;
.bss:00411C5A                 db    ? ;
.bss:00411C5B                 db    ? ;
.bss:00411C5C                 db    ? ;
.bss:00411C5D                 db    ? ;
.bss:00411C5E                 db    ? ;
.bss:00411C5F                 db    ? ;
.bss:00411C60 dword_411C60    dd ?                    ; DATA XREF: sub_405BE4+13↑r
.bss:00411C64                 align 400h
.bss:00411C64 _bss            ends
.bss:00411C64
.idata:00412000 ; Section 4. (virtual address 00012000)
.idata:00412000 ; Virtual size                  : 00000EFC (   3836.)
.idata:00412000 ; Section size in file          : 00001000 (   4096.)
.idata:00412000 ; Offset to raw data for section: 0000EE00
.idata:00412000 ; Flags C0000040: Data Readable Writable
.idata:00412000 ; Alignment     : default
.idata:00412000 ; ===========================================================================
.idata:00412000
.idata:00412000 ; Segment type: Externs
.idata:00412000 ; _idata
.idata:00412000
.idata:00412001
.idata:004122F4 ;
.idata:004122F4 ; Imports from libintl3.dll
.idata:004122F4 ;
.idata:004122F4                 extrn __imp_libintl_bindtextdomain:dword
.idata:004122F4                                         ; CODE XREF: sub_4017F0+49↑p
.idata:004122F4                                         ; DATA XREF: sub_4017F0+49↑r ...
.idata:004122F8                 extrn libintl_gettext:dword
.idata:004122F8                                         ; CODE XREF: sub_4017F0+D7↑p
.idata:004122F8                                         ; sub_4017F0+12D↑p ...
.idata:004122FC                 extrn libintl_textdomain:dword
.idata:004122FC                                         ; CODE XREF: sub_4017F0+56↑p
.idata:004122FC                                         ; DATA XREF: sub_4017F0+56↑r ...
.idata:00412300
.idata:00412308 ;
.idata:00412308 ; Imports from ADVAPI32.DLL
.idata:00412308 ;
.idata:00412308 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:00412308                 extrn __imp_GetUserNameA:dword
.idata:00412308                                         ; DATA XREF: GetUserNameA↑r
.idata:0041230C ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041230C                 extrn __imp_RegCloseKey:dword
.idata:0041230C                                         ; DATA XREF: RegCloseKey↑r
.idata:00412310 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00412310                 extrn __imp_RegOpenKeyExA:dword
.idata:00412310                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00412314 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00412314                 extrn __imp_RegQueryValueExA:dword
.idata:00412314                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00412318
.idata:00412320 ;
.idata:00412320 ; Imports from KERNEL32.dll
.idata:00412320 ;
.idata:00412320 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00412320                 extrn __imp_AreFileApisANSI:dword
.idata:00412320                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00412324 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00412324                 extrn __imp_CloseHandle:dword
.idata:00412324                                         ; DATA XREF: CloseHandle↑r
.idata:00412328 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00412328                 extrn __imp_CreateDirectoryA:dword
.idata:00412328                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041232C ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041232C                 extrn __imp_CreateFileA:dword
.idata:0041232C                                         ; DATA XREF: CreateFileA↑r
.idata:00412330 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00412330                 extrn __imp_DeviceIoControl:dword
.idata:00412330                                         ; DATA XREF: DeviceIoControl↑r
.idata:00412334 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00412334                 extrn __imp_ExitProcess:dword
.idata:00412334                                         ; DATA XREF: ExitProcess↑r
.idata:00412338 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00412338                 extrn __imp_FindClose:dword
.idata:00412338                                         ; DATA XREF: FindClose↑r
.idata:0041233C ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041233C                 extrn __imp_FindFirstFileA:dword
.idata:0041233C                                         ; DATA XREF: FindFirstFileA↑r
.idata:00412340 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00412340                 extrn __imp_FindNextFileA:dword
.idata:00412340                                         ; DATA XREF: FindNextFileA↑r
.idata:00412344 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00412344                 extrn __imp_FreeLibrary:dword
.idata:00412344                                         ; DATA XREF: FreeLibrary↑r
.idata:00412348 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00412348                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00412348                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041234C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041234C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041234C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00412350 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00412350                 extrn __imp_GetDriveTypeA:dword
.idata:00412350                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00412354 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00412354                 extrn __imp_GetFileAttributesA:dword
.idata:00412354                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00412358 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00412358                 extrn __imp_GetFileInformationByHandle:dword
.idata:00412358                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041235C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041235C                 extrn __imp_GetFileSize:dword
.idata:0041235C                                         ; DATA XREF: GetFileSize↑r
.idata:00412360 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00412360                 extrn __imp_GetFileType:dword
.idata:00412360                                         ; DATA XREF: GetFileType↑r
.idata:00412364 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00412364                 extrn __imp_GetFullPathNameA:dword
.idata:00412364                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00412368 ; DWORD (__stdcall *GetLastError)()
.idata:00412368                 extrn __imp_GetLastError:dword
.idata:00412368                                         ; DATA XREF: GetLastError↑r
.idata:0041236C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041236C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041236C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00412370 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00412370                 extrn __imp_GetModuleFileNameA:dword
.idata:00412370                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00412374 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00412374                 extrn __imp_GetModuleHandleA:dword
.idata:00412374                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00412378 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00412378                 extrn __imp_GetProcAddress:dword
.idata:00412378                                         ; DATA XREF: GetProcAddress↑r
.idata:0041237C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041237C                 extrn __imp_GetProcessHeap:dword
.idata:0041237C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00412380 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00412380                 extrn __imp_GetShortPathNameA:dword
.idata:00412380                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00412384 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00412384                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00412384                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00412388 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00412388                 extrn __imp_GetTimeZoneInformation:dword
.idata:00412388                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041238C ; DWORD (__stdcall *GetVersion)()
.idata:0041238C                 extrn __imp_GetVersion:dword
.idata:0041238C                                         ; DATA XREF: GetVersion↑r
.idata:00412390 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00412390                 extrn __imp_GetVersionExA:dword
.idata:00412390                                         ; DATA XREF: GetVersionExA↑r
.idata:00412394 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00412394                 extrn __imp_GetVolumeInformationA:dword
.idata:00412394                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00412398 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00412398                 extrn __imp_HeapAlloc:dword
.idata:00412398                                         ; DATA XREF: HeapAlloc↑r
.idata:0041239C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041239C                 extrn __imp_HeapFree:dword
.idata:0041239C                                         ; DATA XREF: HeapFree↑r
.idata:004123A0 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004123A0                 extrn __imp_LoadLibraryA:dword
.idata:004123A0                                         ; DATA XREF: LoadLibraryA↑r
.idata:004123A4 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:004123A4                 extrn __imp_LockFile:dword
.idata:004123A4                                         ; DATA XREF: LockFile↑r
.idata:004123A8 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004123A8                 extrn __imp_MultiByteToWideChar:dword
.idata:004123A8                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004123AC ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004123AC                 extrn __imp_PeekNamedPipe:dword
.idata:004123AC                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004123B0 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004123B0                 extrn __imp_SetEndOfFile:dword
.idata:004123B0                                         ; DATA XREF: SetEndOfFile↑r
.idata:004123B4 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004123B4                 extrn __imp_SetErrorMode:dword
.idata:004123B4                                         ; DATA XREF: SetErrorMode↑r
.idata:004123B8 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004123B8                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004123B8                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004123BC ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004123BC                 extrn __imp_UnlockFile:dword
.idata:004123BC                                         ; DATA XREF: UnlockFile↑r
.idata:004123C0 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004123C0                 extrn __imp_lstrcmpiA:dword
.idata:004123C0                                         ; DATA XREF: lstrcmpiA↑r
.idata:004123C4 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004123C4                 extrn __imp_lstrcpyA:dword
.idata:004123C4                                         ; DATA XREF: lstrcpyA↑r
.idata:004123C8
.idata:004123D0 ;
.idata:004123D0 ; Imports from msvcrt.dll
.idata:004123D0 ;
.idata:004123D0 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004123D0                 extrn __imp__chmod:dword
.idata:004123D0                                         ; DATA XREF: _chmod↑r
.idata:004123D4 ; int (__cdecl *_dup)(int FileHandle)
.idata:004123D4                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004123D8 ; int (__cdecl *_getpid)()
.idata:004123D8                 extrn __imp__getpid:dword
.idata:004123D8                                         ; DATA XREF: _getpid↑r
.idata:004123DC ; char *(__cdecl *_strdup)(const char *String)
.idata:004123DC                 extrn __imp__strdup:dword
.idata:004123DC                                         ; DATA XREF: _strdup↑r
.idata:004123E0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004123E0                 extrn __imp__stricmp:dword
.idata:004123E0                                         ; DATA XREF: _stricmp↑r
.idata:004123E4
.idata:004123EC ;
.idata:004123EC ; Imports from MSVCP60.DLL
.idata:004123EC ;
.idata:004123EC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004123EC                 extrn __imp_mbrtowc:dword
.idata:004123EC                                         ; DATA XREF: mbrtowc↑r
.idata:004123F0
.idata:004123F8 ;
.idata:004123F8 ; Imports from msvcrt.dll
.idata:004123F8 ;
.idata:004123F8                 extrn __imp___getmainargs:dword
.idata:004123F8                                         ; DATA XREF: __getmainargs↑r
.idata:004123FC ; int _mb_cur_max
.idata:004123FC                 extrn __mb_cur_max:dword
.idata:004123FC                                         ; DATA XREF: sub_402350:loc_4023EE↑r
.idata:004123FC                                         ; sub_404780+7↑r ...
.idata:00412400 ; char ***(__cdecl *__p__environ)()
.idata:00412400                 extrn __imp___p__environ:dword
.idata:00412400                                         ; DATA XREF: __p__environ↑r
.idata:00412404 ; int *(__cdecl *__p__fmode)()
.idata:00412404                 extrn __imp___p__fmode:dword
.idata:00412404                                         ; DATA XREF: __p__fmode↑r
.idata:00412408                 extrn __pioinfo:dword   ; DATA XREF: sub_40B4E0:loc_40B548↑r
.idata:00412408                                         ; sub_40B4E0:loc_40B573↑r ...
.idata:0041240C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041240C                 extrn __set_app_type:dword
.idata:0041240C                                         ; CODE XREF: start+D↑p
.idata:0041240C                                         ; .text:0040102D↑p
.idata:0041240C                                         ; DATA XREF: ...
.idata:00412410                 extrn __imp__assert:dword
.idata:00412410                                         ; DATA XREF: _assert↑r
.idata:00412414 ; void (__cdecl *_cexit)()
.idata:00412414                 extrn __imp__cexit:dword
.idata:00412414                                         ; DATA XREF: _cexit↑r
.idata:00412418 ; int (__cdecl *_close)(int FileHandle)
.idata:00412418                 extrn __imp__close:dword
.idata:00412418                                         ; DATA XREF: _close↑r
.idata:0041241C ; int *(__cdecl *_errno)()
.idata:0041241C                 extrn __imp__errno:dword
.idata:0041241C                                         ; DATA XREF: _errno↑r
.idata:00412420 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00412420                 extrn __imp__fdopen:dword
.idata:00412420                                         ; DATA XREF: _fdopen↑r
.idata:00412424 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00412424                 extrn __imp__filelengthi64:dword
.idata:00412424                                         ; DATA XREF: _filelengthi64↑r
.idata:00412428 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00412428                 extrn __imp__flsbuf:dword
.idata:00412428                                         ; DATA XREF: _flsbuf↑r
.idata:0041242C ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041242C                 extrn __imp__get_osfhandle:dword
.idata:0041242C                                         ; DATA XREF: _get_osfhandle↑r
.idata:00412430 ; FILE iob[]
.idata:00412430                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00412430                                         ; sub_401080+75↑r ...
.idata:00412434 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00412434                 extrn __imp__isctype:dword
.idata:00412434                                         ; DATA XREF: _isctype↑r
.idata:00412438 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00412438                 extrn __imp__lseeki64:dword
.idata:00412438                                         ; DATA XREF: _lseeki64↑r
.idata:0041243C ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041243C                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041243C                                         ; DATA XREF: .text:0040106C↑r
.idata:00412440 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00412440                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00412444 ; const unsigned __int16 *pctype
.idata:00412444                 extrn _pctype:dword     ; DATA XREF: sub_402350:loc_402444↑r
.idata:00412444                                         ; sub_404780:loc_404E74↑r
.idata:00412448 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00412448                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0041244C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041244C                 extrn __imp__setmode:dword
.idata:0041244C                                         ; DATA XREF: _setmode↑r
.idata:00412450 ; char *(__cdecl *_strdup_0)(const char *String)
.idata:00412450                 extrn __imp__strdup_0:dword
.idata:00412450                                         ; DATA XREF: _strdup_0↑r
.idata:00412454 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00412454                 extrn __imp__stricmp_0:dword
.idata:00412454                                         ; DATA XREF: _stricmp_0↑r
.idata:00412458 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:00412458                 extrn __imp__write:dword
.idata:00412458                                         ; DATA XREF: _write↑r
.idata:0041245C ; void (__cdecl __noreturn *abort)()
.idata:0041245C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00412460 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00412460                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00412460                                         ; DATA XREF: sub_401040+C↑r
.idata:00412464 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00412464                 extrn __imp_calloc:dword
.idata:00412464                                         ; DATA XREF: calloc↑r
.idata:00412468 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00412468                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041246C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041246C                 extrn __imp_fclose:dword
.idata:0041246C                                         ; DATA XREF: fclose↑r
.idata:00412470 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00412470                 extrn __imp_fflush:dword
.idata:00412470                                         ; DATA XREF: fflush↑r
.idata:00412474 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00412474                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00412478 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00412478                 extrn __imp_fprintf:dword
.idata:00412478                                         ; DATA XREF: fprintf↑r
.idata:0041247C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041247C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00412480 ; size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00412480                 extrn __imp_fread:dword ; DATA XREF: fread↑r
.idata:00412484 ; void (__cdecl *free)(void *Block)
.idata:00412484                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00412488 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00412488                 extrn __imp_fwrite:dword
.idata:00412488                                         ; DATA XREF: fwrite↑r
.idata:0041248C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041248C                 extrn __imp_getenv:dword
.idata:0041248C                                         ; DATA XREF: getenv↑r
.idata:00412490 ; int (__cdecl *isalpha)(int C)
.idata:00412490                 extrn __imp_isalpha:dword
.idata:00412490                                         ; DATA XREF: isalpha↑r
.idata:00412494 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00412494                 extrn __imp_iswctype:dword
.idata:00412494                                         ; DATA XREF: iswctype↑r
.idata:00412498 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:00412498                 extrn __imp_localtime:dword
.idata:00412498                                         ; DATA XREF: localtime↑r
.idata:0041249C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041249C                 extrn __imp_malloc:dword
.idata:0041249C                                         ; DATA XREF: malloc↑r
.idata:004124A0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004124A0                 extrn __imp_memcpy:dword
.idata:004124A0                                         ; DATA XREF: memcpy↑r
.idata:004124A4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004124A4                 extrn __imp_memset:dword
.idata:004124A4                                         ; DATA XREF: memset↑r
.idata:004124A8 ; int (*printf)(const char *const Format, ...)
.idata:004124A8                 extrn __imp_printf:dword
.idata:004124A8                                         ; DATA XREF: printf↑r
.idata:004124AC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004124AC                 extrn __imp_realloc:dword
.idata:004124AC                                         ; DATA XREF: realloc↑r
.idata:004124B0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004124B0                 extrn __imp_setlocale:dword
.idata:004124B0                                         ; DATA XREF: setlocale↑r
.idata:004124B4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004124B4                 extrn __imp_signal:dword
.idata:004124B4                                         ; DATA XREF: signal↑r
.idata:004124B8 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004124B8                 extrn __imp_sprintf:dword
.idata:004124B8                                         ; DATA XREF: sprintf↑r
.idata:004124BC ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004124BC                 extrn __imp_sscanf:dword
.idata:004124BC                                         ; DATA XREF: sscanf↑r
.idata:004124C0 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004124C0                 extrn __imp_strcat:dword
.idata:004124C0                                         ; DATA XREF: strcat↑r
.idata:004124C4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004124C4                 extrn __imp_strchr:dword
.idata:004124C4                                         ; DATA XREF: strchr↑r
.idata:004124C8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004124C8                 extrn __imp_strcmp:dword
.idata:004124C8                                         ; DATA XREF: strcmp↑r
.idata:004124CC ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004124CC                 extrn __imp_strcpy:dword
.idata:004124CC                                         ; DATA XREF: strcpy↑r
.idata:004124D0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004124D0                 extrn __imp_strerror:dword
.idata:004124D0                                         ; DATA XREF: strerror↑r
.idata:004124D4 ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:004124D4                 extrn __imp_strftime:dword
.idata:004124D4                                         ; DATA XREF: strftime↑r
.idata:004124D8 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004124D8                 extrn __imp_strlen:dword
.idata:004124D8                                         ; DATA XREF: strlen↑r
.idata:004124DC ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004124DC                 extrn __imp_strncmp:dword
.idata:004124DC                                         ; DATA XREF: strncmp↑r
.idata:004124E0 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004124E0                 extrn __imp_strncpy:dword
.idata:004124E0                                         ; DATA XREF: strncpy↑r
.idata:004124E4 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004124E4                 extrn __imp_strpbrk:dword
.idata:004124E4                                         ; DATA XREF: strpbrk↑r
.idata:004124E8 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004124E8                 extrn __imp_strrchr:dword
.idata:004124E8                                         ; DATA XREF: strrchr↑r
.idata:004124EC ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004124EC                 extrn __imp_strspn:dword
.idata:004124EC                                         ; DATA XREF: strspn↑r
.idata:004124F0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004124F0                 extrn __imp_strstr:dword
.idata:004124F0                                         ; DATA XREF: strstr↑r
.idata:004124F4 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004124F4                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004124F8 ; int (__cdecl *toupper)(int C)
.idata:004124F8                 extrn __imp_toupper:dword
.idata:004124F8                                         ; DATA XREF: toupper↑r
.idata:004124FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004124FC                 extrn __imp_vfprintf:dword
.idata:004124FC                                         ; DATA XREF: vfprintf↑r
.idata:00412500
.idata:00412508 ;
.idata:00412508 ; Imports from OLE32.dll
.idata:00412508 ;
.idata:00412508 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00412508                 extrn __imp_CoCreateInstance:dword
.idata:00412508                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041250C ; void (__stdcall *CoUninitialize)()
.idata:0041250C                 extrn __imp_CoUninitialize:dword
.idata:0041250C                                         ; DATA XREF: CoUninitialize↑r
.idata:00412510 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00412510                 extrn __imp_OleInitialize:dword
.idata:00412510                                         ; DATA XREF: OleInitialize↑r
.idata:00412514
.idata:0041251C ;
.idata:0041251C ; Imports from WSOCK32.DLL
.idata:0041251C ;
.idata:0041251C ; struct hostent *(__stdcall *gethostbyaddr)(const char *addr, int len, int type)
.idata:0041251C                 extrn __imp_gethostbyaddr:dword
.idata:0041251C                                         ; DATA XREF: gethostbyaddr↑r
.idata:00412520 ; struct hostent *(__stdcall *gethostbyname)(const char *name)
.idata:00412520                 extrn __imp_gethostbyname:dword
.idata:00412520                                         ; DATA XREF: gethostbyname↑r
.idata:00412524 ; char *(__stdcall *inet_ntoa)(struct in_addr in)
.idata:00412524                 extrn __imp_inet_ntoa:dword
.idata:00412524                                         ; DATA XREF: inet_ntoa↑r
.idata:00412528
.idata:00412528
.idata:00412528
.idata:00412528                 end start
