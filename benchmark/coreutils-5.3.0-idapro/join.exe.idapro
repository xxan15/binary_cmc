.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 6713010E9B2AF2E53A9ACC93085FCFEA402F6C0B6D9F2BA80400E26DE18D33D0
.text:00401000 ; Input MD5    : 3D8A789A7A7A3EE60AC904C6E43FEC49
.text:00401000 ; Input CRC32  : F19D921F
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/join.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A258 (Wed Apr 20 18:41:28 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000080B0 (  32944.)
.text:00401000 ; Section size in file          : 00008200 (  33280.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401C00+89↓p
.text:00401040                                         ; .text:004087A0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_408740
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40A000
.text:004010A2                 mov     edx, dword_40A060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40A080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40A080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_408710
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401C00
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_408740
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 316A006Ah, 326A00h   ; DATA XREF: .text:off_4012C0↓o
.text:00401288 aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .text:off_4012F0↓o
.text:00401294 aHelp           db 'help',0             ; DATA XREF: .text:00401300↓o
.text:00401299 aVersion        db 'version',0          ; DATA XREF: .text:00401310↓o
.text:004012A1                 align 20h
.text:004012C0 off_4012C0      dd offset dword_401280  ; DATA XREF: sub_401C00+BB↓o
.text:004012C4                 dd 1, 0
.text:004012CC                 dd 6Ah, 401282h, 1, 0
.text:004012DC                 dd 31h, 401285h, 1, 0
.text:004012EC                 dd 32h
.text:004012F0 off_4012F0      dd offset aIgnoreCase   ; DATA XREF: sub_401C00+AC6↓o
.text:004012F0                                         ; "ignore-case"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 69h
.text:00401300                 dd offset aHelp         ; "help"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Eh
.text:00401310                 dd offset aVersion      ; "version"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401330 ; const char Locale
.text:00401330 Locale          db 0                    ; DATA XREF: sub_401C00+24↓o
.text:00401330                                         ; sub_401C00+130↓o ...
.text:00401331                 db 0EBh, 0Dh, 90h
.text:00401334                 align 10h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_401C00+3E↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401C00+46↓o
.text:00401363                                         ; sub_401C00+53↓o
.text:0040136D ; const char aAEI12OTV[]
.text:0040136D aAEI12OTV       db '-a:e:i1:2:o:t:v:',0 ; DATA XREF: sub_401C00+C3↓o
.text:0040137E                 align 10h
.text:00401380 aInvalidFieldNu db 'invalid field number for file 2: `%s',27h,0
.text:00401380                                         ; DATA XREF: sub_401C00+118↓o
.text:004013A6                 align 20h
.text:004013C0 aValueSIsSoLarg db 'value %s is so large that it is not representable',0
.text:004013C0                                         ; DATA XREF: sub_401C00+177↓o
.text:004013C0                                         ; sub_401C00+2A0↓o ...
.text:004013F2                 align 10h
.text:00401400 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401400                                         ; DATA XREF: sub_401C00:loc_401E08↓o
.text:00401400                                         ; .text:004026FC↓o
.text:00401427                 align 20h
.text:00401440 aInvalidFieldNu_2 db 'invalid field number for file 1: `%s',27h,0
.text:00401440                                         ; DATA XREF: sub_401C00:loc_401E40↓o
.text:00401466                 align 20h
.text:00401480 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE1 FILE2',0Ah,0
.text:00401480                                         ; DATA XREF: sub_401C00+32B↓o
.text:00401480                                         ; .text:loc_402730↓o
.text:004014A3                 align 20h
.text:004014C0 aForEachPairOfI db 'For each pair of input lines with identical join fields, write a '
.text:004014C0                                         ; DATA XREF: sub_401C00+34A↓o
.text:004014C0                                         ; .text:0040274F↓o
.text:004014C0                 db 'line to',0Ah
.text:004014C0                 db 'standard output.  The default join field is the first, delimited',0Ah
.text:004014C0                 db 'by whitespace.  When FILE1 or FILE2 (not both) is -, read standar'
.text:004014C0                 db 'd input.',0Ah
.text:004014C0                 db 0Ah
.text:004014C0                 db '  -a FILENUM        print unpairable lines coming from file FILEN'
.text:004014C0                 db 'UM, where',0Ah
.text:004014C0                 db '                      FILENUM is 1 or 2, corresponding to FILE1 o'
.text:004014C0                 db 'r FILE2',0Ah
.text:004014C0                 db '  -e EMPTY          replace missing input fields with EMPTY',0Ah,0
.text:00401666                 align 20h
.text:00401680 aIIgnoreCaseIgn db '  -i, --ignore-case ignore differences in case when comparing fie'
.text:00401680                                         ; DATA XREF: sub_401C00+36C↓o
.text:00401680                                         ; .text:00402771↓o
.text:00401680                 db 'lds',0Ah
.text:00401680                 db '  -j FIELD          equivalent to `-1 FIELD -2 FIELD',27h,0Ah
.text:00401680                 db '  -o FORMAT         obey FORMAT while constructing output line',0Ah
.text:00401680                 db '  -t CHAR           use CHAR as input and output field separator',0Ah
.text:00401680                 db 0
.text:0040177C                 align 10h
.text:00401780 aVFilenumLikeAF db '  -v FILENUM        like -a FILENUM, but suppress joined output l'
.text:00401780                                         ; DATA XREF: sub_401C00+38E↓o
.text:00401780                                         ; .text:00402793↓o
.text:00401780                 db 'ines',0Ah
.text:00401780                 db '  -1 FIELD          join on this FIELD of file 1',0Ah
.text:00401780                 db '  -2 FIELD          join on this FIELD of file 2',0Ah,0
.text:00401829                 align 20h
.text:00401840 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401840                                         ; DATA XREF: sub_401C00+3B0↓o
.text:00401840                                         ; .text:004027B5↓o
.text:0040186D                 align 20h
.text:00401880 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401880                                         ; DATA XREF: sub_401C00+3D2↓o
.text:00401880                                         ; .text:004027D7↓o
.text:004018B6                 align 10h
.text:004018C0 aUnlessTCharIsG db 0Ah                  ; DATA XREF: sub_401C00+3F4↓o
.text:004018C0                                         ; .text:004027F9↓o
.text:004018C0                 db 'Unless -t CHAR is given, leading blanks separate fields and are i'
.text:004018C0                 db 'gnored,',0Ah
.text:004018C0                 db 'else fields are separated by CHAR.  Any FIELD is a field number c'
.text:004018C0                 db 'ounted',0Ah
.text:004018C0                 db 'from 1.  FORMAT is one or more comma or blank separated specifica'
.text:004018C0                 db 'tions,',0Ah
.text:004018C0                 db 'each being `FILENUM.FIELD',27h,' or `0',27h,'.  Default FORMAT ou'
.text:004018C0                 db 'tputs the join field,',0Ah
.text:004018C0                 db 'the remaining fields from FILE1, the remaining fields from FILE2,'
.text:004018C0                 db ' all',0Ah
.text:004018C0                 db 'separated by CHAR.',0Ah
.text:004018C0                 db 0Ah
.text:004018C0                 db 'Important: FILE1 and FILE2 must be sorted on the join fields.',0Ah
.text:004018C0                 db 0
.text:00401A7E aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401C00+416↓o
.text:00401A7E                                         ; .text:0040281B↓o
.text:00401A7E                 db 'Report bugs to <%s>.',0Ah,0
.text:00401A95 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401A95                                         ; DATA XREF: sub_401C00+423↓o
.text:00401A95                                         ; .text:00402828↓o
.text:00401AAB aMikeHaertel    db 'Mike Haertel',0     ; DATA XREF: sub_401C00+44D↓o
.text:00401AB8 a530            db '5.3.0',0            ; DATA XREF: sub_401C00+455↓o
.text:00401ABE aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401C00+460↓o
.text:00401ACC ; const FILE stru_401ACC
.text:00401ACC stru_401ACC     FILE <6E696F6Ah, 74786500h, 6F206172h, 61726570h, 2520646Eh, \
.text:00401ACC                                         ; DATA XREF: sub_401C00+468↓o
.text:00401ACC                                         ; sub_401C00+4AB↓o
.text:00401ACC                       202C0073h, 90900009h, 90909090h>
.text:00401AEC                 db  90h
.text:00401AED                 db  90h
.text:00401AEE                 db  90h
.text:00401AEF                 db  90h
.text:00401AF0                 db  90h
.text:00401AF1                 db  90h
.text:00401AF2                 db  90h
.text:00401AF3                 db  90h
.text:00401AF4                 db  90h
.text:00401AF5                 db  90h
.text:00401AF6                 db  90h
.text:00401AF7                 db  90h
.text:00401AF8                 db  90h
.text:00401AF9                 db  90h
.text:00401AFA                 db  90h
.text:00401AFB                 db  90h
.text:00401AFC                 db  90h
.text:00401AFD                 db  90h
.text:00401AFE                 db  90h
.text:00401AFF                 db  90h
.text:00401B00 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/join.c',0
.text:00401B00                                         ; DATA XREF: sub_401C00+574↓o
.text:00401B00                                         ; sub_401C00+590↓o
.text:00401B25 aFile0Field0    db 'file != 0 || field == 0',0
.text:00401B25                                         ; DATA XREF: sub_401C00+57C↓o
.text:00401B3D                 align 10h
.text:00401B40 aFile0File1File db 'file == 0 || file == 1 || file == 2',0
.text:00401B40                                         ; DATA XREF: sub_401C00+598↓o
.text:00401B64 aInvalidFieldNu_0 db 'invalid field number: `%s',27h,0
.text:00401B64                                         ; DATA XREF: sub_401C00:loc_4022FC↓o
.text:00401B64                                         ; sub_401C00:loc_40235D↓o
.text:00401B7F aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401C00+87F↓o
.text:00401B8F aMissingOperand_0 db 'missing operand after %s',0
.text:00401B8F                                         ; DATA XREF: sub_401C00+8BB↓o
.text:00401BA8 ; const char asc_401BA8[]
.text:00401BA8 asc_401BA8      db '-',0                ; DATA XREF: sub_401C00+8CB↓o
.text:00401BA8                                         ; sub_401C00+8FC↓o ...
.text:00401BAA ; const char aS[]
.text:00401BAA aS              db '%s',0               ; DATA XREF: sub_401C00+9AB↓o
.text:00401BAA                                         ; sub_401C00+9D3↓o ...
.text:00401BAD                 align 20h
.text:00401BC0 aBothFilesCanno db 'both files cannot be standard input',0
.text:00401BC0                                         ; DATA XREF: sub_401C00:loc_4025F9↓o
.text:00401BE4 ; const char aR[]
.text:00401BE4 aR              db 'r',0                ; DATA XREF: sub_401C00:loc_402653↓o
.text:00401BE4                                         ; sub_401C00:loc_402695↓o
.text:00401BE6 ; const char aAEIj12OTV[]
.text:00401BE6 aAEIj12OTV      db 'a:e:ij:1:2:o:t:v:',0
.text:00401BE6                                         ; DATA XREF: sub_401C00+ACE↓o
.text:00401BF8                 align 10h
.text:00401C00
.text:00401C00 ; =============== S U B R O U T I N E =======================================
.text:00401C00
.text:00401C00 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401C00
.text:00401C00 sub_401C00      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401C00
.text:00401C00 Category        = dword ptr -88h
.text:00401C00 Locale          = dword ptr -84h
.text:00401C00 var_80          = dword ptr -80h
.text:00401C00 var_7C          = byte ptr -7Ch
.text:00401C00 Str             = dword ptr -78h
.text:00401C00 var_74          = dword ptr -74h
.text:00401C00 var_70          = dword ptr -70h
.text:00401C00 var_6C          = dword ptr -6Ch
.text:00401C00 var_68          = dword ptr -68h
.text:00401C00 var_64          = dword ptr -64h
.text:00401C00 var_60          = dword ptr -60h
.text:00401C00 var_5C          = dword ptr -5Ch
.text:00401C00 var_58          = dword ptr -58h
.text:00401C00 var_54          = dword ptr -54h
.text:00401C00 var_50          = dword ptr -50h
.text:00401C00 Stream          = dword ptr -4Ch
.text:00401C00 var_48          = dword ptr -48h
.text:00401C00 FileName        = dword ptr -44h
.text:00401C00 var_40          = dword ptr -40h
.text:00401C00 var_3C          = dword ptr -3Ch
.text:00401C00 var_38          = dword ptr -38h
.text:00401C00 var_34          = dword ptr -34h
.text:00401C00 var_30          = dword ptr -30h
.text:00401C00 var_2C          = dword ptr -2Ch
.text:00401C00 var_28          = dword ptr -28h
.text:00401C00 var_24          = dword ptr -24h
.text:00401C00 var_20          = dword ptr -20h
.text:00401C00 var_1C          = dword ptr -1Ch
.text:00401C00 var_14          = dword ptr -14h
.text:00401C00 arg_0           = dword ptr  8
.text:00401C00 arg_4           = dword ptr  0Ch
.text:00401C00
.text:00401C00                 push    ebp
.text:00401C01                 xor     eax, eax
.text:00401C03                 mov     ebp, esp
.text:00401C05                 push    edi
.text:00401C06                 push    esi
.text:00401C07                 push    ebx
.text:00401C08                 sub     esp, 7Ch
.text:00401C0B                 and     esp, 0FFFFFFF0h
.text:00401C0E                 call    __alloca
.text:00401C13                 call    sub_4087E0
.text:00401C18                 mov     [ebp+var_50], 0
.text:00401C1F                 mov     eax, [ebp+arg_4]
.text:00401C22                 mov     ecx, [eax]
.text:00401C24                 mov     [esp+88h+Locale], offset Locale ; Locale
.text:00401C2C                 mov     [esp+88h+Category], 0 ; Category
.text:00401C33                 mov     ds:dword_40B260, ecx
.text:00401C39                 call    setlocale
.text:00401C3E                 mov     [esp+88h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401C46                 mov     [esp+88h+Category], offset aCoreutils ; "coreutils"
.text:00401C4D                 call    ds:libintl_bindtextdomain
.text:00401C53                 mov     [esp+88h+Category], offset aCoreutils ; "coreutils"
.text:00401C5A                 call    ds:libintl_textdomain
.text:00401C60                 mov     [esp+88h+Category], 1
.text:00401C67                 call    sub_405A50
.text:00401C6C                 mov     ds:byte_40B000, al
.text:00401C71                 call    sub_4059E0
.text:00401C76                 mov     [esp+88h+Category], offset sub_4058F0 ; void (__cdecl *)()
.text:00401C7D                 cmp     eax, 30DAFh
.text:00401C82                 setle   ds:byte_40B010
.text:00401C89                 call    sub_401040
.text:00401C8E                 mov     [ebp+var_54], 0
.text:00401C95                 mov     ds:byte_40B040, 1
.text:00401C9C                 lea     esi, [esi+0]
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_401C00+203↓j
.text:00401CA0                                         ; sub_401C00+567↓j
.text:00401CA0                 cmp     ds:byte_40B010, 0
.text:00401CA7                 jz      loc_4026B8
.text:00401CAD                 mov     [esp+88h+Str], 0 ; int
.text:00401CB5                 mov     ebx, [ebp+arg_4]
.text:00401CB8                 mov     eax, [ebp+arg_0]
.text:00401CBB                 mov     dword ptr [esp+88h+var_7C], offset off_4012C0 ; char
.text:00401CC3                 mov     [esp+88h+var_80], offset aAEI12OTV ; "-a:e:i1:2:o:t:v:"
.text:00401CCB                 mov     [esp+88h+Locale], ebx ; int
.text:00401CCF                 mov     [esp+88h+Category], eax ; int
.text:00401CD2                 call    sub_406EA0
.text:00401CD7
.text:00401CD7 loc_401CD7:                             ; CODE XREF: sub_401C00+AE2↓j
.text:00401CD7                 cmp     eax, 0FFFFFFFFh
.text:00401CDA                 mov     edi, eax
.text:00401CDC                 jz      loc_40242F
.text:00401CE2                 cmp     edi, 61h ; 'a'
.text:00401CE5                 jz      loc_4022C0
.text:00401CEB                 cmp     edi, 61h ; 'a'
.text:00401CEE                 jg      loc_4021A1
.text:00401CF4                 cmp     edi, 1
.text:00401CF7                 jz      loc_402080
.text:00401CFD                 cmp     edi, 1
.text:00401D00                 jle     loc_401F13
.text:00401D06                 cmp     edi, 31h ; '1'
.text:00401D09                 jz      loc_401E40
.text:00401D0F                 cmp     edi, 32h ; '2'
.text:00401D12                 jnz     loc_401E08
.text:00401D18                 mov     [esp+88h+Category], offset aInvalidFieldNu ; "invalid field number for file 2: `%s'"
.text:00401D1F                 mov     eax, ds:Str
.text:00401D24                 lea     ebx, [ebp+var_28]
.text:00401D27                 mov     [ebp+var_60], eax
.text:00401D2A                 call    ds:libintl_gettext
.text:00401D30                 mov     [esp+88h+Str], offset Locale ; Str
.text:00401D38                 mov     esi, [ebp+var_60]
.text:00401D3B                 mov     dword ptr [esp+88h+var_7C], ebx ; int
.text:00401D3F                 mov     [esp+88h+var_80], 0Ah ; int
.text:00401D47                 mov     [esp+88h+Category], esi ; int
.text:00401D4A                 mov     [ebp+var_64], eax
.text:00401D4D                 mov     [esp+88h+Locale], 0 ; int
.text:00401D55                 call    sub_405B90
.text:00401D5A                 cmp     eax, 1
.text:00401D5D                 mov     esi, eax
.text:00401D5F                 jz      short loc_401D6C
.text:00401D61                 test    eax, eax
.text:00401D63                 jnz     short loc_401DC0
.text:00401D65                 mov     edx, [ebp+var_24]
.text:00401D68                 test    edx, edx
.text:00401D6A                 jz      short loc_401DA2
.text:00401D6C
.text:00401D6C loc_401D6C:                             ; CODE XREF: sub_401C00+15F↑j
.text:00401D6C                 mov     ecx, [ebp+var_60]
.text:00401D6F                 mov     [esp+88h+Category], ecx ; char *
.text:00401D72                 call    sub_405AF0
.text:00401D77                 mov     [esp+88h+Category], offset aValueSIsSoLarg ; "value %s is so large that it is not rep"...
.text:00401D7E                 mov     ebx, eax
.text:00401D80                 call    ds:libintl_gettext
.text:00401D86                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:00401D8A                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00401D92                 mov     [esp+88h+Category], 1 ; Code
.text:00401D99                 mov     [esp+88h+var_80], eax ; char *
.text:00401D9D                 call    sub_408460
.text:00401DA2
.text:00401DA2 loc_401DA2:                             ; CODE XREF: sub_401C00+16A↑j
.text:00401DA2                 test    esi, esi
.text:00401DA4                 jnz     short loc_401DC0
.text:00401DA6                 mov     eax, [ebp+var_24]
.text:00401DA9                 mov     esi, [ebp+var_28]
.text:00401DAC                 mov     ebx, eax
.text:00401DAE                 or      ebx, esi
.text:00401DB0                 jnz     short loc_401DEA
.text:00401DB2                 lea     esi, [esi+0]
.text:00401DB9                 lea     edi, [edi+0]
.text:00401DC0
.text:00401DC0 loc_401DC0:                             ; CODE XREF: sub_401C00+163↑j
.text:00401DC0                                         ; sub_401C00+1A4↑j
.text:00401DC0                 mov     ecx, [ebp+var_60]
.text:00401DC3                 mov     [esp+88h+Category], ecx ; char *
.text:00401DC6                 call    sub_405AF0
.text:00401DCB                 mov     dword ptr [esp+88h+var_7C], eax ; char
.text:00401DCF                 mov     edx, [ebp+var_64]
.text:00401DD2                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00401DDA                 mov     [esp+88h+Category], 1 ; Code
.text:00401DE1                 mov     [esp+88h+var_80], edx ; char *
.text:00401DE5                 call    sub_408460
.text:00401DEA
.text:00401DEA loc_401DEA:                             ; CODE XREF: sub_401C00+1B0↑j
.text:00401DEA                 mov     esi, [ebp+var_28]
.text:00401DED                 dec     esi
.text:00401DEE                 mov     ds:dword_40B070, esi
.text:00401DF4                 lea     esi, [esi+0]
.text:00401DFA                 lea     edi, [edi+0]
.text:00401E00
.text:00401E00 loc_401E00:                             ; CODE XREF: sub_401C00+30E↓j
.text:00401E00                                         ; sub_401C00+49E↓j ...
.text:00401E00                 mov     [ebp+var_50], edi
.text:00401E03                 jmp     loc_401CA0
.text:00401E08 ; ---------------------------------------------------------------------------
.text:00401E08
.text:00401E08 loc_401E08:                             ; CODE XREF: sub_401C00+112↑j
.text:00401E08                                         ; sub_401C00+325↓j ...
.text:00401E08                 mov     [esp+88h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401E0F                 call    ds:libintl_gettext
.text:00401E15                 mov     edx, ds:_iob
.text:00401E1B                 mov     esi, ds:dword_40B260
.text:00401E21                 add     edx, 40h ; '@'
.text:00401E24                 mov     [esp+88h+var_80], esi
.text:00401E28                 mov     [esp+88h+Locale], eax ; Format
.text:00401E2C                 mov     [esp+88h+Category], edx ; Stream
.text:00401E2F                 call    fprintf
.text:00401E34
.text:00401E34 loc_401E34:                             ; CODE XREF: sub_401C00+524↓j
.text:00401E34                                         ; sub_401C00+644↓j
.text:00401E34                 mov     [esp+88h+Category], 1 ; Code
.text:00401E3B
.text:00401E3B loc_401E3B:                             ; CODE XREF: sub_401C00+43A↓j
.text:00401E3B                 call    exit
.text:00401E40 ; ---------------------------------------------------------------------------
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401C00+109↑j
.text:00401E40                 mov     [esp+88h+Category], offset aInvalidFieldNu_2 ; "invalid field number for file 1: `%s'"
.text:00401E47                 mov     ebx, ds:Str
.text:00401E4D                 mov     [ebp+var_58], ebx
.text:00401E50                 call    ds:libintl_gettext
.text:00401E56                 mov     [esp+88h+Str], offset Locale ; Str
.text:00401E5E                 lea     ecx, [ebp+var_20]
.text:00401E61                 mov     dword ptr [esp+88h+var_7C], ecx ; int
.text:00401E65                 mov     [esp+88h+var_80], 0Ah ; int
.text:00401E6D                 mov     [ebp+var_5C], eax
.text:00401E70                 mov     eax, [ebp+var_58]
.text:00401E73                 mov     [esp+88h+Locale], 0 ; int
.text:00401E7B                 mov     [esp+88h+Category], eax ; int
.text:00401E7E                 call    sub_405B90
.text:00401E83                 cmp     eax, 1
.text:00401E86                 mov     esi, eax
.text:00401E88                 jz      short loc_401E95
.text:00401E8A                 test    eax, eax
.text:00401E8C                 jnz     short loc_401EDB
.text:00401E8E                 mov     edx, [ebp+var_1C]
.text:00401E91                 test    edx, edx
.text:00401E93                 jz      short loc_401ECB
.text:00401E95
.text:00401E95 loc_401E95:                             ; CODE XREF: sub_401C00+288↑j
.text:00401E95                 mov     ecx, [ebp+var_58]
.text:00401E98                 mov     [esp+88h+Category], ecx ; char *
.text:00401E9B                 call    sub_405AF0
.text:00401EA0                 mov     [esp+88h+Category], offset aValueSIsSoLarg ; "value %s is so large that it is not rep"...
.text:00401EA7                 mov     ebx, eax
.text:00401EA9                 call    ds:libintl_gettext
.text:00401EAF                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:00401EB3                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00401EBB                 mov     [esp+88h+Category], 1 ; Code
.text:00401EC2                 mov     [esp+88h+var_80], eax ; char *
.text:00401EC6                 call    sub_408460
.text:00401ECB
.text:00401ECB loc_401ECB:                             ; CODE XREF: sub_401C00+293↑j
.text:00401ECB                 test    esi, esi
.text:00401ECD                 jnz     short loc_401EDB
.text:00401ECF                 mov     ebx, [ebp+var_1C]
.text:00401ED2                 mov     esi, [ebp+var_20]
.text:00401ED5                 mov     eax, ebx
.text:00401ED7                 or      eax, esi
.text:00401ED9                 jnz     short loc_401F05
.text:00401EDB
.text:00401EDB loc_401EDB:                             ; CODE XREF: sub_401C00+28C↑j
.text:00401EDB                                         ; sub_401C00+2CD↑j
.text:00401EDB                 mov     ecx, [ebp+var_58]
.text:00401EDE                 mov     [esp+88h+Category], ecx ; char *
.text:00401EE1                 call    sub_405AF0
.text:00401EE6                 mov     dword ptr [esp+88h+var_7C], eax ; char
.text:00401EEA                 mov     edx, [ebp+var_5C]
.text:00401EED                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00401EF5                 mov     [esp+88h+Category], 1 ; Code
.text:00401EFC                 mov     [esp+88h+var_80], edx ; char *
.text:00401F00                 call    sub_408460
.text:00401F05
.text:00401F05 loc_401F05:                             ; CODE XREF: sub_401C00+2D9↑j
.text:00401F05                 mov     eax, [ebp+var_20]
.text:00401F08                 dec     eax
.text:00401F09
.text:00401F09 loc_401F09:                             ; CODE XREF: sub_401C00+82A↓j
.text:00401F09                 mov     ds:dword_40B060, eax
.text:00401F0E                 jmp     loc_401E00
.text:00401F13 ; ---------------------------------------------------------------------------
.text:00401F13
.text:00401F13 loc_401F13:                             ; CODE XREF: sub_401C00+100↑j
.text:00401F13                 cmp     edi, 0FFFFFF7Dh
.text:00401F19                 jz      loc_40203F
.text:00401F1F                 cmp     edi, 0FFFFFF7Eh
.text:00401F25                 jnz     loc_401E08
.text:00401F2B                 mov     [esp+88h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:00401F32                 call    ds:libintl_gettext
.text:00401F38                 mov     esi, ds:dword_40B260
.text:00401F3E                 mov     [esp+88h+Category], eax ; Format
.text:00401F41                 mov     [esp+88h+Locale], esi
.text:00401F45                 call    printf
.text:00401F4A                 mov     [esp+88h+Category], offset aForEachPairOfI ; "For each pair of input lines with ident"...
.text:00401F51                 call    ds:libintl_gettext
.text:00401F57                 mov     ecx, ds:_iob
.text:00401F5D                 add     ecx, 20h ; ' '
.text:00401F60                 mov     [esp+88h+Locale], ecx ; Stream
.text:00401F64                 mov     [esp+88h+Category], eax ; Buffer
.text:00401F67                 call    fputs
.text:00401F6C                 mov     [esp+88h+Category], offset aIIgnoreCaseIgn ; "  -i, --ignore-case ignore differences "...
.text:00401F73                 call    ds:libintl_gettext
.text:00401F79                 mov     edi, ds:_iob
.text:00401F7F                 add     edi, 20h ; ' '
.text:00401F82                 mov     [esp+88h+Locale], edi ; Stream
.text:00401F86                 mov     [esp+88h+Category], eax ; Buffer
.text:00401F89                 call    fputs
.text:00401F8E                 mov     [esp+88h+Category], offset aVFilenumLikeAF ; "  -v FILENUM        like -a FILENUM, bu"...
.text:00401F95                 call    ds:libintl_gettext
.text:00401F9B                 mov     ebx, ds:_iob
.text:00401FA1                 add     ebx, 20h ; ' '
.text:00401FA4                 mov     [esp+88h+Locale], ebx ; Stream
.text:00401FA8                 mov     [esp+88h+Category], eax ; Buffer
.text:00401FAB                 call    fputs
.text:00401FB0                 mov     [esp+88h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401FB7                 call    ds:libintl_gettext
.text:00401FBD                 mov     esi, ds:_iob
.text:00401FC3                 add     esi, 20h ; ' '
.text:00401FC6                 mov     [esp+88h+Locale], esi ; Stream
.text:00401FCA                 mov     [esp+88h+Category], eax ; Buffer
.text:00401FCD                 call    fputs
.text:00401FD2                 mov     [esp+88h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401FD9                 call    ds:libintl_gettext
.text:00401FDF                 mov     ecx, ds:_iob
.text:00401FE5                 add     ecx, 20h ; ' '
.text:00401FE8                 mov     [esp+88h+Locale], ecx ; Stream
.text:00401FEC                 mov     [esp+88h+Category], eax ; Buffer
.text:00401FEF                 call    fputs
.text:00401FF4                 mov     [esp+88h+Category], offset aUnlessTCharIsG ; "\nUnless -t CHAR is given, leading blan"...
.text:00401FFB                 call    ds:libintl_gettext
.text:00402001                 mov     edi, ds:_iob
.text:00402007                 add     edi, 20h ; ' '
.text:0040200A                 mov     [esp+88h+Locale], edi ; Stream
.text:0040200E                 mov     [esp+88h+Category], eax ; Buffer
.text:00402011                 call    fputs
.text:00402016                 mov     [esp+88h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040201D                 call    ds:libintl_gettext
.text:00402023                 mov     [esp+88h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040202B                 mov     [esp+88h+Category], eax ; Format
.text:0040202E                 call    printf
.text:00402033
.text:00402033 loc_402033:                             ; CODE XREF: sub_401C00+478↓j
.text:00402033                                         ; sub_401C00+96D↓j ...
.text:00402033                 mov     [esp+88h+Category], 0
.text:0040203A                 jmp     loc_401E3B
.text:0040203F ; ---------------------------------------------------------------------------
.text:0040203F
.text:0040203F loc_40203F:                             ; CODE XREF: sub_401C00+319↑j
.text:0040203F                 mov     [esp+88h+var_74], 0
.text:00402047                 mov     edx, ds:_iob
.text:0040204D                 mov     [esp+88h+Str], offset aMikeHaertel ; "Mike Haertel"
.text:00402055                 mov     dword ptr [esp+88h+var_7C], offset a530 ; "5.3.0"
.text:0040205D                 add     edx, 20h ; ' '
.text:00402060                 mov     [esp+88h+var_80], offset aGnuCoreutils ; "GNU coreutils"
.text:00402068                 mov     [esp+88h+Locale], offset stru_401ACC ; FILE *
.text:00402070                 mov     [esp+88h+Category], edx ; FILE *
.text:00402073                 call    sub_4051A0
.text:00402078                 jmp     short loc_402033
.text:00402078 ; ---------------------------------------------------------------------------
.text:0040207A                 align 10h
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401C00+F7↑j
.text:00402080                 cmp     [ebp+var_50], 6Fh ; 'o'
.text:00402084                 jz      short loc_4020DB
.text:00402086
.text:00402086 loc_402086:                             ; CODE XREF: sub_401C00+4E7↓j
.text:00402086                 cmp     [ebp+var_54], 2
.text:0040208A                 lea     ecx, [ebp+var_48]
.text:0040208D                 mov     eax, ds:Str
.text:00402092                 jz      short loc_4020A3
.text:00402094                 mov     ebx, [ebp+var_54]
.text:00402097                 mov     [ecx+ebx*4], eax
.text:0040209A                 inc     ebx
.text:0040209B                 mov     [ebp+var_54], ebx
.text:0040209E                 jmp     loc_401E00
.text:004020A3 ; ---------------------------------------------------------------------------
.text:004020A3
.text:004020A3 loc_4020A3:                             ; CODE XREF: sub_401C00+492↑j
.text:004020A3                 mov     [esp+88h+Category], eax ; char *
.text:004020A6
.text:004020A6 loc_4020A6:                             ; CODE XREF: sub_401C00+AB3↓j
.text:004020A6                 call    sub_405AF0
.text:004020AB                 mov     [esp+88h+Category], (offset stru_401ACC._cnt+1)
.text:004020B2
.text:004020B2 loc_4020B2:                             ; CODE XREF: sub_401C00+8C2↓j
.text:004020B2                 mov     ebx, eax
.text:004020B4                 call    ds:libintl_gettext
.text:004020BA                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:004020BE                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:004020C6                 mov     [esp+88h+Category], 0 ; Code
.text:004020CD                 mov     [esp+88h+var_80], eax ; char *
.text:004020D1                 call    sub_408460
.text:004020D6                 jmp     loc_401E08
.text:004020DB ; ---------------------------------------------------------------------------
.text:004020DB
.text:004020DB loc_4020DB:                             ; CODE XREF: sub_401C00+484↑j
.text:004020DB                 mov     ebx, [ebp+arg_0]
.text:004020DE                 sub     ebx, 2
.text:004020E1                 cmp     dword_40A020, ebx
.text:004020E7                 jg      short loc_402086
.text:004020E9                 mov     esi, ds:Str
.text:004020EF                 nop
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401C00+565↓j
.text:004020F0                 mov     [esp+88h+Category], esi ; Str
.text:004020F3                 mov     ebx, esi
.text:004020F5                 mov     [esp+88h+Locale], (offset stru_401ACC._charbuf+2) ; Control
.text:004020FD                 call    strpbrk
.text:00402102                 test    eax, eax
.text:00402104                 mov     esi, eax
.text:00402106                 jz      short loc_40210C
.text:00402108                 mov     byte ptr [eax], 0
.text:0040210B                 inc     esi
.text:0040210C
.text:0040210C loc_40210C:                             ; CODE XREF: sub_401C00+506↑j
.text:0040210C                 mov     [esp+88h+Category], ebx
.text:0040210F                 lea     eax, [ebp+var_3C]
.text:00402112                 lea     edi, [ebp+var_40]
.text:00402115                 mov     [esp+88h+var_80], eax
.text:00402119                 mov     [esp+88h+Locale], edi
.text:0040211D                 call    sub_4032D0
.text:00402122                 test    al, al
.text:00402124                 jz      loc_401E34
.text:0040212A                 mov     ebx, [ebp+var_40]
.text:0040212D                 mov     edi, [ebp+var_3C]
.text:00402130                 cmp     ebx, 2
.text:00402133                 ja      short loc_402188
.text:00402135                 test    ebx, ebx
.text:00402137                 jnz     short loc_40213D
.text:00402139                 test    edi, edi
.text:0040213B                 jnz     short loc_40216C
.text:0040213D
.text:0040213D loc_40213D:                             ; CODE XREF: sub_401C00+537↑j
.text:0040213D                 mov     [esp+88h+Category], 0Ch ; size_t
.text:00402144                 call    sub_406860
.text:00402149                 mov     dword ptr [eax+8], 0
.text:00402150                 mov     ecx, off_40A010
.text:00402156                 test    esi, esi
.text:00402158                 mov     [eax], ebx
.text:0040215A                 mov     [eax+4], edi
.text:0040215D                 mov     [ecx+8], eax
.text:00402160                 mov     off_40A010, eax
.text:00402165                 jnz     short loc_4020F0
.text:00402167                 jmp     loc_401CA0
.text:0040216C ; ---------------------------------------------------------------------------
.text:0040216C
.text:0040216C loc_40216C:                             ; CODE XREF: sub_401C00+53B↑j
.text:0040216C                                         ; sub_401C00+665↓j
.text:0040216C                 mov     [esp+88h+var_80], 26Dh
.text:00402174                 mov     [esp+88h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/join.c"
.text:0040217C                 mov     [esp+88h+Category], offset aFile0Field0 ; "file != 0 || field == 0"
.text:00402183
.text:00402183 loc_402183:                             ; CODE XREF: sub_401C00+59F↓j
.text:00402183                 call    _assert
.text:00402188 ; ---------------------------------------------------------------------------
.text:00402188
.text:00402188 loc_402188:                             ; CODE XREF: sub_401C00+533↑j
.text:00402188                                         ; sub_401C00+656↓j
.text:00402188                 mov     [esp+88h+var_80], 26Ch
.text:00402190                 mov     [esp+88h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/join.c"
.text:00402198                 mov     [esp+88h+Category], offset aFile0File1File ; "file == 0 || file == 1 || file == 2"
.text:0040219F                 jmp     short loc_402183
.text:004021A1 ; ---------------------------------------------------------------------------
.text:004021A1
.text:004021A1 loc_4021A1:                             ; CODE XREF: sub_401C00+EE↑j
.text:004021A1                 cmp     edi, 6Ah ; 'j'
.text:004021A4                 jz      loc_40235D
.text:004021AA                 cmp     edi, 6Ah ; 'j'
.text:004021AD                 jg      short loc_4021E0
.text:004021AF                 cmp     edi, 65h ; 'e'
.text:004021B2                 jz      short loc_4021C9
.text:004021B4                 cmp     edi, 69h ; 'i'
.text:004021B7                 jnz     loc_401E08
.text:004021BD                 mov     ds:byte_40B0C0, 1
.text:004021C4                 jmp     loc_401E00
.text:004021C9 ; ---------------------------------------------------------------------------
.text:004021C9
.text:004021C9 loc_4021C9:                             ; CODE XREF: sub_401C00+5B2↑j
.text:004021C9                 mov     edx, ds:Str
.text:004021CF                 mov     ds:Buffer, edx
.text:004021D5                 jmp     loc_401E00
.text:004021D5 ; ---------------------------------------------------------------------------
.text:004021DA                 align 10h
.text:004021E0
.text:004021E0 loc_4021E0:                             ; CODE XREF: sub_401C00+5AD↑j
.text:004021E0                 cmp     edi, 74h ; 't'
.text:004021E3                 jz      loc_402349
.text:004021E9                 cmp     edi, 74h ; 't'
.text:004021EC                 jg      loc_4022A1
.text:004021F2                 cmp     edi, 6Fh ; 'o'
.text:004021F5                 jnz     loc_401E08
.text:004021FB                 mov     esi, ds:Str
.text:00402201                 jmp     short loc_402210
.text:00402201 ; ---------------------------------------------------------------------------
.text:00402203                 align 10h
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401C00+601↑j
.text:00402210                                         ; sub_401C00+696↓j
.text:00402210                 mov     [esp+88h+Category], esi ; Str
.text:00402213                 mov     ebx, esi
.text:00402215                 mov     [esp+88h+Locale], (offset stru_401ACC._charbuf+2) ; Control
.text:0040221D                 call    strpbrk
.text:00402222                 test    eax, eax
.text:00402224                 mov     esi, eax
.text:00402226                 jz      short loc_40222C
.text:00402228                 mov     byte ptr [eax], 0
.text:0040222B                 inc     esi
.text:0040222C
.text:0040222C loc_40222C:                             ; CODE XREF: sub_401C00+626↑j
.text:0040222C                 mov     [esp+88h+Category], ebx
.text:0040222F                 lea     ecx, [ebp+var_34]
.text:00402232                 lea     eax, [ebp+var_38]
.text:00402235                 mov     [esp+88h+var_80], ecx
.text:00402239                 mov     [esp+88h+Locale], eax
.text:0040223D                 call    sub_4032D0
.text:00402242                 test    al, al
.text:00402244                 jz      loc_401E34
.text:0040224A                 mov     ebx, [ebp+var_38]
.text:0040224D                 mov     edx, [ebp+var_34]
.text:00402250                 cmp     ebx, 2
.text:00402253                 mov     [ebp+var_70], edx
.text:00402256                 ja      loc_402188
.text:0040225C                 test    ebx, ebx
.text:0040225E                 jnz     short loc_40226B
.text:00402260                 mov     eax, [ebp+var_70]
.text:00402263                 test    eax, eax
.text:00402265                 jnz     loc_40216C
.text:0040226B
.text:0040226B loc_40226B:                             ; CODE XREF: sub_401C00+65E↑j
.text:0040226B                 mov     [esp+88h+Category], 0Ch ; size_t
.text:00402272                 call    sub_406860
.text:00402277                 mov     [eax], ebx
.text:00402279                 mov     ecx, [ebp+var_70]
.text:0040227C                 test    esi, esi
.text:0040227E                 mov     dword ptr [eax+8], 0
.text:00402285                 mov     ebx, off_40A010
.text:0040228B                 mov     [eax+4], ecx
.text:0040228E                 mov     [ebx+8], eax
.text:00402291                 mov     off_40A010, eax
.text:00402296                 jnz     loc_402210
.text:0040229C                 jmp     loc_401E00
.text:004022A1 ; ---------------------------------------------------------------------------
.text:004022A1
.text:004022A1 loc_4022A1:                             ; CODE XREF: sub_401C00+5EC↑j
.text:004022A1                 cmp     edi, 76h ; 'v'
.text:004022A4                 jnz     loc_401E08
.text:004022AA                 mov     ds:byte_40B040, 0
.text:004022B1                 jmp     short loc_4022C0
.text:004022B1 ; ---------------------------------------------------------------------------
.text:004022B3                 align 10h
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_401C00+E5↑j
.text:004022C0                                         ; sub_401C00+6B1↑j
.text:004022C0                 mov     [esp+88h+Str], offset Locale ; Str
.text:004022C8                 mov     edx, ds:Str
.text:004022CE                 lea     ecx, [ebp+var_14]
.text:004022D1                 mov     dword ptr [esp+88h+var_7C], ecx ; int
.text:004022D5                 mov     [esp+88h+var_80], 0Ah ; int
.text:004022DD                 mov     [esp+88h+Locale], 0 ; char **
.text:004022E5                 mov     [esp+88h+Category], edx ; char *
.text:004022E8                 call    sub_405250
.text:004022ED                 test    eax, eax
.text:004022EF                 jnz     short loc_4022FC
.text:004022F1                 mov     edx, [ebp+var_14]
.text:004022F4                 lea     ebx, [edx-1]
.text:004022F7                 cmp     ebx, 1
.text:004022FA                 jbe     short loc_40232E
.text:004022FC
.text:004022FC loc_4022FC:                             ; CODE XREF: sub_401C00+6EF↑j
.text:004022FC                 mov     [esp+88h+Category], offset aInvalidFieldNu_0 ; "invalid field number: `%s'"
.text:00402303                 call    ds:libintl_gettext
.text:00402309                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00402311                 mov     esi, ds:Str
.text:00402317                 mov     [esp+88h+Category], 1 ; Code
.text:0040231E                 mov     dword ptr [esp+88h+var_7C], esi ; char
.text:00402322                 mov     [esp+88h+var_80], eax ; char *
.text:00402326                 call    sub_408460
.text:0040232B                 mov     edx, [ebp+var_14]
.text:0040232E
.text:0040232E loc_40232E:                             ; CODE XREF: sub_401C00+6FA↑j
.text:0040232E                 dec     edx
.text:0040232F                 jz      short loc_40233D
.text:00402331                 mov     ds:byte_40B030, 1
.text:00402338                 jmp     loc_401E00
.text:0040233D ; ---------------------------------------------------------------------------
.text:0040233D
.text:0040233D loc_40233D:                             ; CODE XREF: sub_401C00+72F↑j
.text:0040233D                 mov     ds:byte_40B020, 1
.text:00402344                 jmp     loc_401E00
.text:00402349 ; ---------------------------------------------------------------------------
.text:00402349
.text:00402349 loc_402349:                             ; CODE XREF: sub_401C00+5E3↑j
.text:00402349                 mov     esi, ds:Str
.text:0040234F                 movzx   edx, byte ptr [esi]
.text:00402352                 mov     ds:byte_40B090, dl
.text:00402358                 jmp     loc_401E00
.text:0040235D ; ---------------------------------------------------------------------------
.text:0040235D
.text:0040235D loc_40235D:                             ; CODE XREF: sub_401C00+5A4↑j
.text:0040235D                 mov     [esp+88h+Category], offset aInvalidFieldNu_0 ; "invalid field number: `%s'"
.text:00402364                 mov     eax, ds:Str
.text:00402369                 mov     [ebp+var_68], eax
.text:0040236C                 call    ds:libintl_gettext
.text:00402372                 mov     [esp+88h+Str], offset Locale ; Str
.text:0040237A                 mov     ebx, [ebp+var_68]
.text:0040237D                 lea     edx, [ebp+var_30]
.text:00402380                 mov     dword ptr [esp+88h+var_7C], edx ; int
.text:00402384                 mov     [esp+88h+var_80], 0Ah ; int
.text:0040238C                 mov     [ebp+var_6C], eax
.text:0040238F                 mov     [esp+88h+Locale], 0 ; int
.text:00402397                 mov     [esp+88h+Category], ebx ; int
.text:0040239A                 call    sub_405B90
.text:0040239F                 cmp     eax, 1
.text:004023A2                 mov     esi, eax
.text:004023A4                 jz      short loc_4023B1
.text:004023A6                 test    eax, eax
.text:004023A8                 jnz     short loc_4023F7
.text:004023AA                 mov     ecx, [ebp+var_2C]
.text:004023AD                 test    ecx, ecx
.text:004023AF                 jz      short loc_4023E7
.text:004023B1
.text:004023B1 loc_4023B1:                             ; CODE XREF: sub_401C00+7A4↑j
.text:004023B1                 mov     ebx, [ebp+var_68]
.text:004023B4                 mov     [esp+88h+Category], ebx ; char *
.text:004023B7                 call    sub_405AF0
.text:004023BC                 mov     [esp+88h+Category], offset aValueSIsSoLarg ; "value %s is so large that it is not rep"...
.text:004023C3                 mov     ebx, eax
.text:004023C5                 call    ds:libintl_gettext
.text:004023CB                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:004023CF                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:004023D7                 mov     [esp+88h+Category], 1 ; Code
.text:004023DE                 mov     [esp+88h+var_80], eax ; char *
.text:004023E2                 call    sub_408460
.text:004023E7
.text:004023E7 loc_4023E7:                             ; CODE XREF: sub_401C00+7AF↑j
.text:004023E7                 test    esi, esi
.text:004023E9                 jnz     short loc_4023F7
.text:004023EB                 mov     ecx, [ebp+var_2C]
.text:004023EE                 mov     esi, [ebp+var_30]
.text:004023F1                 mov     eax, ecx
.text:004023F3                 or      eax, esi
.text:004023F5                 jnz     short loc_402421
.text:004023F7
.text:004023F7 loc_4023F7:                             ; CODE XREF: sub_401C00+7A8↑j
.text:004023F7                                         ; sub_401C00+7E9↑j
.text:004023F7                 mov     ebx, [ebp+var_68]
.text:004023FA                 mov     [esp+88h+Category], ebx ; char *
.text:004023FD                 call    sub_405AF0
.text:00402402                 mov     dword ptr [esp+88h+var_7C], eax ; char
.text:00402406                 mov     edx, [ebp+var_6C]
.text:00402409                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00402411                 mov     [esp+88h+Category], 1 ; Code
.text:00402418                 mov     [esp+88h+var_80], edx ; char *
.text:0040241C                 call    sub_408460
.text:00402421
.text:00402421 loc_402421:                             ; CODE XREF: sub_401C00+7F5↑j
.text:00402421                 mov     eax, [ebp+var_30]
.text:00402424                 dec     eax
.text:00402425                 mov     ds:dword_40B070, eax
.text:0040242A                 jmp     loc_401F09
.text:0040242F ; ---------------------------------------------------------------------------
.text:0040242F
.text:0040242F loc_40242F:                             ; CODE XREF: sub_401C00+DC↑j
.text:0040242F                 cmp     ds:byte_40B010, 0
.text:00402436                 jnz     short loc_402472
.text:00402438                 mov     eax, dword_40A020
.text:0040243D                 cmp     eax, [ebp+arg_0]
.text:00402440                 jge     short loc_402472
.text:00402442                 lea     ecx, [ebp+var_48]
.text:00402445                 lea     edx, [eax+1]
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_401C00+870↓j
.text:00402448                 cmp     [ebp+var_54], 2
.text:0040244C                 mov     eax, [ebp+arg_4]
.text:0040244F                 mov     ebx, [eax+edx*4-4]
.text:00402453                 mov     eax, edx
.text:00402455                 lea     edx, [edx+1]
.text:00402458                 mov     dword_40A020, eax
.text:0040245D                 jz      loc_4026B0
.text:00402463                 mov     edi, [ebp+var_54]
.text:00402466                 mov     [ecx+edi*4], ebx
.text:00402469                 inc     edi
.text:0040246A                 cmp     eax, [ebp+arg_0]
.text:0040246D                 mov     [ebp+var_54], edi
.text:00402470                 jl      short loc_402448
.text:00402472
.text:00402472 loc_402472:                             ; CODE XREF: sub_401C00+836↑j
.text:00402472                                         ; sub_401C00+840↑j
.text:00402472                 cmp     [ebp+var_54], 2
.text:00402476                 jz      short loc_4024C7
.text:00402478                 mov     esi, [ebp+var_54]
.text:0040247B                 test    esi, esi
.text:0040247D                 jnz     short loc_4024A9
.text:0040247F                 mov     [esp+88h+Category], offset aMissingOperand ; "missing operand"
.text:00402486                 call    ds:libintl_gettext
.text:0040248C                 mov     [esp+88h+Locale], 0 ; ErrorMessage
.text:00402494                 mov     [esp+88h+Category], 0 ; Code
.text:0040249B                 mov     [esp+88h+var_80], eax ; char *
.text:0040249F                 call    sub_408460
.text:004024A4                 jmp     loc_401E08
.text:004024A9 ; ---------------------------------------------------------------------------
.text:004024A9
.text:004024A9 loc_4024A9:                             ; CODE XREF: sub_401C00+87D↑j
.text:004024A9                 mov     ecx, [ebp+arg_0]
.text:004024AC                 mov     eax, [ebp+arg_4]
.text:004024AF                 mov     ebx, [eax+ecx*4-4]
.text:004024B3                 mov     [esp+88h+Category], ebx ; char *
.text:004024B6                 call    sub_405AF0
.text:004024BB                 mov     [esp+88h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:004024C2                 jmp     loc_4020B2
.text:004024C7 ; ---------------------------------------------------------------------------
.text:004024C7
.text:004024C7 loc_4024C7:                             ; CODE XREF: sub_401C00+876↑j
.text:004024C7                 cld
.text:004024C8                 mov     ebx, [ebp+var_48]
.text:004024CB                 mov     edi, offset asc_401BA8 ; "-"
.text:004024D0                 mov     ecx, 2
.text:004024D5                 mov     esi, ebx
.text:004024D7                 repe cmpsb
.text:004024D9                 jnz     loc_402695
.text:004024DF                 mov     edx, ds:_iob
.text:004024E5                 mov     [ebp+Stream], edx
.text:004024E8
.text:004024E8 loc_4024E8:                             ; CODE XREF: sub_401C00+AA8↓j
.text:004024E8                 mov     edi, [ebp+Stream]
.text:004024EB                 test    edi, edi
.text:004024ED                 jz      loc_40266A
.text:004024F3
.text:004024F3 loc_4024F3:                             ; CODE XREF: sub_401C00+A90↓j
.text:004024F3                 cld
.text:004024F4                 mov     ebx, [ebp+FileName]
.text:004024F7                 mov     ecx, 2
.text:004024FC                 mov     edi, offset asc_401BA8 ; "-"
.text:00402501                 mov     esi, ebx
.text:00402503                 repe cmpsb
.text:00402505                 jnz     loc_402653
.text:0040250B                 mov     esi, ds:_iob
.text:00402511
.text:00402511 loc_402511:                             ; CODE XREF: sub_401C00+A65↓j
.text:00402511                 test    esi, esi
.text:00402513                 jz      loc_402628
.text:00402519
.text:00402519 loc_402519:                             ; CODE XREF: sub_401C00+A4E↓j
.text:00402519                 cmp     [ebp+Stream], esi
.text:0040251C                 jz      loc_4025F9
.text:00402522
.text:00402522 loc_402522:                             ; CODE XREF: sub_401C00+A23↓j
.text:00402522                 mov     [esp+88h+Locale], esi
.text:00402526                 mov     ebx, [ebp+Stream]
.text:00402529                 mov     [esp+88h+Category], ebx
.text:0040252C                 call    sub_402850
.text:00402531                 mov     eax, ds:_iob
.text:00402536                 cmp     [ebp+Stream], eax
.text:00402539                 jz      short loc_402552
.text:0040253B                 mov     eax, [ebp+Stream]
.text:0040253E                 mov     [esp+88h+Category], eax ; Stream
.text:00402541                 call    fclose
.text:00402546                 inc     eax
.text:00402547                 jz      loc_4025CE
.text:0040254D
.text:0040254D loc_40254D:                             ; CODE XREF: sub_401C00+9F4↓j
.text:0040254D                 mov     eax, ds:_iob
.text:00402552
.text:00402552 loc_402552:                             ; CODE XREF: sub_401C00+939↑j
.text:00402552                 cmp     esi, eax
.text:00402554                 jz      short loc_402566
.text:00402556                 mov     [esp+88h+Category], esi ; Stream
.text:00402559                 call    fclose
.text:0040255E                 inc     eax
.text:0040255F                 jz      short loc_4025A6
.text:00402561
.text:00402561 loc_402561:                             ; CODE XREF: sub_401C00+9CC↓j
.text:00402561                 mov     eax, ds:_iob
.text:00402566
.text:00402566 loc_402566:                             ; CODE XREF: sub_401C00+954↑j
.text:00402566                 cmp     [ebp+Stream], eax
.text:00402569                 jz      short loc_402573
.text:0040256B                 cmp     esi, eax
.text:0040256D                 jnz     loc_402033
.text:00402573
.text:00402573 loc_402573:                             ; CODE XREF: sub_401C00+969↑j
.text:00402573                 mov     [esp+88h+Category], eax ; Stream
.text:00402576                 call    fclose
.text:0040257B                 inc     eax
.text:0040257C                 jnz     loc_402033
.text:00402582                 call    _errno
.text:00402587                 mov     [esp+88h+var_80], offset asc_401BA8 ; "-"
.text:0040258F                 mov     esi, [eax]
.text:00402591                 mov     [esp+88h+Category], 1 ; Code
.text:00402598                 mov     [esp+88h+Locale], esi ; ErrorMessage
.text:0040259C                 call    sub_408460
.text:004025A1                 jmp     loc_402033
.text:004025A6 ; ---------------------------------------------------------------------------
.text:004025A6
.text:004025A6 loc_4025A6:                             ; CODE XREF: sub_401C00+95F↑j
.text:004025A6                 call    _errno
.text:004025AB                 mov     [esp+88h+var_80], offset aS ; "%s"
.text:004025B3                 mov     ebx, [ebp+FileName]
.text:004025B6                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:004025BA                 mov     edx, [eax]
.text:004025BC                 mov     [esp+88h+Category], 1 ; Code
.text:004025C3                 mov     [esp+88h+Locale], edx ; ErrorMessage
.text:004025C7                 call    sub_408460
.text:004025CC                 jmp     short loc_402561
.text:004025CE ; ---------------------------------------------------------------------------
.text:004025CE
.text:004025CE loc_4025CE:                             ; CODE XREF: sub_401C00+947↑j
.text:004025CE                 call    _errno
.text:004025D3                 mov     [esp+88h+var_80], offset aS ; "%s"
.text:004025DB                 mov     edi, [ebp+var_48]
.text:004025DE                 mov     dword ptr [esp+88h+var_7C], edi ; char
.text:004025E2                 mov     ecx, [eax]
.text:004025E4                 mov     [esp+88h+Category], 1 ; Code
.text:004025EB                 mov     [esp+88h+Locale], ecx ; ErrorMessage
.text:004025EF                 call    sub_408460
.text:004025F4                 jmp     loc_40254D
.text:004025F9 ; ---------------------------------------------------------------------------
.text:004025F9
.text:004025F9 loc_4025F9:                             ; CODE XREF: sub_401C00+91C↑j
.text:004025F9                 mov     [esp+88h+Category], offset aBothFilesCanno ; "both files cannot be standard input"
.text:00402600                 call    ds:libintl_gettext
.text:00402606                 mov     edi, eax
.text:00402608                 call    _errno
.text:0040260D                 mov     [esp+88h+var_80], edi ; char *
.text:00402611                 mov     edx, [eax]
.text:00402613                 mov     [esp+88h+Category], 1 ; Code
.text:0040261A                 mov     [esp+88h+Locale], edx ; ErrorMessage
.text:0040261E                 call    sub_408460
.text:00402623                 jmp     loc_402522
.text:00402628 ; ---------------------------------------------------------------------------
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: sub_401C00+913↑j
.text:00402628                 call    _errno
.text:0040262D                 mov     [esp+88h+var_80], offset aS ; "%s"
.text:00402635                 mov     edi, [ebp+FileName]
.text:00402638                 mov     dword ptr [esp+88h+var_7C], edi ; char
.text:0040263C                 mov     ecx, [eax]
.text:0040263E                 mov     [esp+88h+Category], 1 ; Code
.text:00402645                 mov     [esp+88h+Locale], ecx ; ErrorMessage
.text:00402649                 call    sub_408460
.text:0040264E                 jmp     loc_402519
.text:00402653 ; ---------------------------------------------------------------------------
.text:00402653
.text:00402653 loc_402653:                             ; CODE XREF: sub_401C00+905↑j
.text:00402653                 mov     [esp+88h+Locale], offset aR ; "r"
.text:0040265B                 mov     [esp+88h+Category], ebx ; FileName
.text:0040265E                 call    fopen
.text:00402663                 mov     esi, eax
.text:00402665                 jmp     loc_402511
.text:0040266A ; ---------------------------------------------------------------------------
.text:0040266A
.text:0040266A loc_40266A:                             ; CODE XREF: sub_401C00+8ED↑j
.text:0040266A                 call    _errno
.text:0040266F                 mov     [esp+88h+var_80], offset aS ; "%s"
.text:00402677                 mov     ebx, [ebp+var_48]
.text:0040267A                 mov     dword ptr [esp+88h+var_7C], ebx ; char
.text:0040267E                 mov     esi, [eax]
.text:00402680                 mov     [esp+88h+Category], 1 ; Code
.text:00402687                 mov     [esp+88h+Locale], esi ; ErrorMessage
.text:0040268B                 call    sub_408460
.text:00402690                 jmp     loc_4024F3
.text:00402695 ; ---------------------------------------------------------------------------
.text:00402695
.text:00402695 loc_402695:                             ; CODE XREF: sub_401C00+8D9↑j
.text:00402695                 mov     [esp+88h+Locale], offset aR ; "r"
.text:0040269D                 mov     [esp+88h+Category], ebx ; FileName
.text:004026A0                 call    fopen
.text:004026A5                 mov     [ebp+Stream], eax
.text:004026A8                 jmp     loc_4024E8
.text:004026A8 ; ---------------------------------------------------------------------------
.text:004026AD                 align 10h
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_401C00+85D↑j
.text:004026B0                 mov     [esp+88h+Category], ebx
.text:004026B3                 jmp     loc_4020A6
.text:004026B8 ; ---------------------------------------------------------------------------
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_401C00+A7↑j
.text:004026B8                 mov     [esp+88h+Str], 0 ; int
.text:004026C0                 mov     ecx, [ebp+arg_4]
.text:004026C3                 mov     edi, [ebp+arg_0]
.text:004026C6                 mov     dword ptr [esp+88h+var_7C], offset off_4012F0 ; int
.text:004026CE                 mov     [esp+88h+var_80], offset aAEIj12OTV ; "a:e:ij:1:2:o:t:v:"
.text:004026D6                 mov     [esp+88h+Locale], ecx ; int
.text:004026DA                 mov     [esp+88h+Category], edi ; int
.text:004026DD                 call    sub_406E00
.text:004026E2                 jmp     loc_401CD7
.text:004026E2 sub_401C00      endp
.text:004026E2
.text:004026E2 ; ---------------------------------------------------------------------------
.text:004026E7                 align 10h
.text:004026F0                 push    ebx
.text:004026F1                 sub     esp, 18h
.text:004026F4                 mov     ebx, [esp+20h]
.text:004026F8                 test    ebx, ebx
.text:004026FA                 jz      short loc_402730
.text:004026FC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402703                 call    ds:libintl_gettext
.text:00402709                 mov     edx, ds:_iob
.text:0040270F                 mov     ecx, ds:dword_40B260
.text:00402715                 add     edx, 40h ; '@'
.text:00402718                 mov     [esp+8], ecx
.text:0040271C                 mov     [esp+4], eax
.text:00402720                 mov     [esp], edx
.text:00402723                 call    fprintf
.text:00402728
.text:00402728 loc_402728:                             ; CODE XREF: .text:00402838↓j
.text:00402728                 mov     [esp], ebx
.text:0040272B                 call    exit
.text:00402730 ; ---------------------------------------------------------------------------
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: .text:004026FA↑j
.text:00402730                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:00402737                 call    ds:libintl_gettext
.text:0040273D                 mov     ecx, ds:dword_40B260
.text:00402743                 mov     [esp], eax
.text:00402746                 mov     [esp+4], ecx
.text:0040274A                 call    printf
.text:0040274F                 mov     dword ptr [esp], offset aForEachPairOfI ; "For each pair of input lines with ident"...
.text:00402756                 call    ds:libintl_gettext
.text:0040275C                 mov     ecx, ds:_iob
.text:00402762                 add     ecx, 20h ; ' '
.text:00402765                 mov     [esp+4], ecx
.text:00402769                 mov     [esp], eax
.text:0040276C                 call    fputs
.text:00402771                 mov     dword ptr [esp], offset aIIgnoreCaseIgn ; "  -i, --ignore-case ignore differences "...
.text:00402778                 call    ds:libintl_gettext
.text:0040277E                 mov     ecx, ds:_iob
.text:00402784                 add     ecx, 20h ; ' '
.text:00402787                 mov     [esp+4], ecx
.text:0040278B                 mov     [esp], eax
.text:0040278E                 call    fputs
.text:00402793                 mov     dword ptr [esp], offset aVFilenumLikeAF ; "  -v FILENUM        like -a FILENUM, bu"...
.text:0040279A                 call    ds:libintl_gettext
.text:004027A0                 mov     ecx, ds:_iob
.text:004027A6                 add     ecx, 20h ; ' '
.text:004027A9                 mov     [esp+4], ecx
.text:004027AD                 mov     [esp], eax
.text:004027B0                 call    fputs
.text:004027B5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004027BC                 call    ds:libintl_gettext
.text:004027C2                 mov     ecx, ds:_iob
.text:004027C8                 add     ecx, 20h ; ' '
.text:004027CB                 mov     [esp+4], ecx
.text:004027CF                 mov     [esp], eax
.text:004027D2                 call    fputs
.text:004027D7                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004027DE                 call    ds:libintl_gettext
.text:004027E4                 mov     ecx, ds:_iob
.text:004027EA                 add     ecx, 20h ; ' '
.text:004027ED                 mov     [esp+4], ecx
.text:004027F1                 mov     [esp], eax
.text:004027F4                 call    fputs
.text:004027F9                 mov     dword ptr [esp], offset aUnlessTCharIsG ; "\nUnless -t CHAR is given, leading blan"...
.text:00402800                 call    ds:libintl_gettext
.text:00402806                 mov     ecx, ds:_iob
.text:0040280C                 add     ecx, 20h ; ' '
.text:0040280F                 mov     [esp+4], ecx
.text:00402813                 mov     [esp], eax
.text:00402816                 call    fputs
.text:0040281B                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402822                 call    ds:libintl_gettext
.text:00402828                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402830                 mov     [esp], eax
.text:00402833                 call    printf
.text:00402838                 jmp     loc_402728
.text:00402838 ; ---------------------------------------------------------------------------
.text:0040283D aReadError      db 'read error',0       ; DATA XREF: sub_402850:loc_402D14↓o
.text:0040283D                                         ; sub_402850:loc_402D96↓o ...
.text:00402848                 align 10h
.text:00402850
.text:00402850 ; =============== S U B R O U T I N E =======================================
.text:00402850
.text:00402850
.text:00402850 sub_402850      proc near               ; CODE XREF: sub_401C00+92C↑p
.text:00402850
.text:00402850 Block           = dword ptr -7Ch
.text:00402850 var_78          = dword ptr -78h
.text:00402850 var_74          = dword ptr -74h
.text:00402850 var_68          = dword ptr -68h
.text:00402850 var_64          = dword ptr -64h
.text:00402850 var_5E          = byte ptr -5Eh
.text:00402850 var_5D          = byte ptr -5Dh
.text:00402850 var_5C          = FILE ptr -5Ch
.text:00402850 var_3C          = dword ptr -3Ch
.text:00402850 var_38          = dword ptr -38h
.text:00402850 var_34          = dword ptr -34h
.text:00402850 var_2C          = dword ptr -2Ch
.text:00402850 var_28          = dword ptr -28h
.text:00402850 var_24          = dword ptr -24h
.text:00402850 arg_0           = dword ptr  4
.text:00402850 arg_4           = dword ptr  8
.text:00402850
.text:00402850                 push    ebp
.text:00402851                 push    edi
.text:00402852                 push    esi
.text:00402853                 push    ebx
.text:00402854                 sub     esp, 6Ch
.text:00402857                 lea     edx, [esp+7Ch+var_28]
.text:0040285B                 mov     [esp+7Ch+var_78], edx ; int
.text:0040285F                 mov     [esp+7Ch+var_2C], 0
.text:00402867                 mov     [esp+7Ch+var_28], 0
.text:0040286F                 mov     [esp+7Ch+var_24], 0
.text:00402877                 mov     [esp+7Ch+var_74], 18h ; int
.text:0040287F                 mov     [esp+7Ch+Block], 0 ; void *
.text:00402886                 call    sub_406920
.text:0040288B                 mov     [esp+7Ch+var_24], eax
.text:0040288F                 mov     ebx, [esp+7Ch+var_2C]
.text:00402893                 lea     ecx, [ebx+ebx*2]
.text:00402896                 lea     esi, [eax+ecx*8]
.text:00402899                 mov     [esp+7Ch+Block], esi
.text:0040289C                 call    sub_406DD0
.text:004028A1                 mov     [esp+7Ch+Block], esi
.text:004028A4                 mov     edx, [esp+7Ch+arg_0]
.text:004028AB                 mov     [esp+7Ch+var_78], edx
.text:004028AF                 call    sub_406D10
.text:004028B4                 test    eax, eax
.text:004028B6                 jnz     loc_403237
.text:004028BC                 mov     edi, [esp+7Ch+arg_0]
.text:004028C3                 test    byte ptr [edi+0Ch], 20h
.text:004028C7                 jnz     loc_403208
.text:004028CD
.text:004028CD loc_4028CD:                             ; CODE XREF: sub_402850+9E2↓j
.text:004028CD                 mov     ecx, [esi+8]
.text:004028D0                 mov     [esp+7Ch+Block], ecx ; Block
.text:004028D3                 call    free
.text:004028D8                 mov     dword ptr [esi+8], 0
.text:004028DF
.text:004028DF loc_4028DF:                             ; CODE XREF: sub_402850+A08↓j
.text:004028DF                 mov     [esp+7Ch+var_3C], 0
.text:004028E7                 lea     edx, [esp+7Ch+var_38]
.text:004028EB                 mov     [esp+7Ch+var_38], 0
.text:004028F3                 mov     [esp+7Ch+var_34], 0
.text:004028FB                 mov     [esp+7Ch+var_74], 18h ; int
.text:00402903                 mov     [esp+7Ch+var_78], edx ; int
.text:00402907                 mov     [esp+7Ch+Block], 0 ; void *
.text:0040290E                 call    sub_406920
.text:00402913                 mov     [esp+7Ch+var_34], eax
.text:00402917                 mov     esi, [esp+7Ch+var_3C]
.text:0040291B                 lea     ebx, [esi+esi*2]
.text:0040291E                 lea     esi, [eax+ebx*8]
.text:00402921
.text:00402921 loc_402921:                             ; CODE XREF: sub_402850+19B↓j
.text:00402921                 mov     [esp+7Ch+Block], esi
.text:00402924                 call    sub_406DD0
.text:00402929                 mov     [esp+7Ch+Block], esi
.text:0040292C                 mov     ebx, [esp+7Ch+arg_4]
.text:00402933                 mov     [esp+7Ch+var_78], ebx
.text:00402937                 call    sub_406D10
.text:0040293C                 test    eax, eax
.text:0040293E                 jnz     loc_4031E2
.text:00402944                 mov     eax, [esp+7Ch+arg_4]
.text:0040294B
.text:0040294B loc_40294B:                             ; CODE XREF: sub_402850+60E↓j
.text:0040294B                 test    byte ptr [eax+0Ch], 20h
.text:0040294F                 jnz     loc_4031B3
.text:00402955
.text:00402955 loc_402955:                             ; CODE XREF: sub_402850+98D↓j
.text:00402955                 mov     ebp, [esi+8]
.text:00402958                 mov     [esp+7Ch+Block], ebp ; Block
.text:0040295B                 call    free
.text:00402960                 mov     dword ptr [esi+8], 0
.text:00402967
.text:00402967 loc_402967:                             ; CODE XREF: sub_402850+46F↓j
.text:00402967                                         ; sub_402850+47C↓j ...
.text:00402967                 mov     ecx, [esp+7Ch+var_2C]
.text:0040296B                 test    ecx, ecx
.text:0040296D                 jz      loc_402EC7
.text:00402973                 mov     eax, [esp+7Ch+var_3C]
.text:00402977                 test    eax, eax
.text:00402979                 jz      loc_402EC7
.text:0040297F                 mov     edi, [esp+7Ch+var_34]
.text:00402983                 mov     ebp, [esp+7Ch+var_24]
.text:00402987                 mov     [esp+7Ch+var_78], edi
.text:0040298B                 mov     [esp+7Ch+Block], ebp
.text:0040298E                 call    sub_403650
.text:00402993                 test    eax, eax
.text:00402995                 js      loc_402DEB
.text:0040299B                 test    eax, eax
.text:0040299D                 jle     loc_402A28
.text:004029A3                 cmp     ds:byte_40B030, 0
.text:004029AA                 jnz     short loc_402A12
.text:004029AC
.text:004029AC loc_4029AC:                             ; CODE XREF: sub_402850+1D6↓j
.text:004029AC                 mov     ebp, [esp+7Ch+var_34]
.text:004029B0                 mov     ebx, [ebp+14h]
.text:004029B3                 mov     [esp+7Ch+Block], ebx ; Block
.text:004029B6                 call    free
.text:004029BB                 mov     ecx, [ebp+8]
.text:004029BE                 mov     [esp+7Ch+Block], ecx ; Block
.text:004029C1                 call    free
.text:004029C6                 mov     dword ptr [ebp+8], 0
.text:004029CD                 mov     eax, [esp+7Ch+var_38]
.text:004029D1                 mov     [esp+7Ch+var_3C], 0
.text:004029D9                 test    eax, eax
.text:004029DB                 jz      short loc_4029F0
.text:004029DD
.text:004029DD loc_4029DD:                             ; CODE XREF: sub_402850+1C0↓j
.text:004029DD                 mov     ecx, [esp+7Ch+var_3C]
.text:004029E1                 mov     edi, [esp+7Ch+var_34]
.text:004029E5                 lea     ebp, [ecx+ecx*2]
.text:004029E8                 lea     esi, [edi+ebp*8]
.text:004029EB                 jmp     loc_402921
.text:004029F0 ; ---------------------------------------------------------------------------
.text:004029F0
.text:004029F0 loc_4029F0:                             ; CODE XREF: sub_402850+18B↑j
.text:004029F0                 mov     [esp+7Ch+var_74], 18h ; int
.text:004029F8                 mov     edx, [esp+7Ch+var_34]
.text:004029FC                 lea     esi, [esp+7Ch+var_38]
.text:00402A00                 mov     [esp+7Ch+var_78], esi ; int
.text:00402A04                 mov     [esp+7Ch+Block], edx ; void *
.text:00402A07                 call    sub_406920
.text:00402A0C                 mov     [esp+7Ch+var_34], eax
.text:00402A10                 jmp     short loc_4029DD
.text:00402A12 ; ---------------------------------------------------------------------------
.text:00402A12
.text:00402A12 loc_402A12:                             ; CODE XREF: sub_402850+15A↑j
.text:00402A12                 mov     [esp+7Ch+Block], offset stru_40B0A0 ; int
.text:00402A19                 mov     edi, [esp+7Ch+var_34]
.text:00402A1D                 mov     [esp+7Ch+var_78], edi ; FILE *
.text:00402A21                 call    sub_403780
.text:00402A26                 jmp     short loc_4029AC
.text:00402A28 ; ---------------------------------------------------------------------------
.text:00402A28
.text:00402A28 loc_402A28:                             ; CODE XREF: sub_402850+14D↑j
.text:00402A28                 mov     [esp+7Ch+var_5D], 0
.text:00402A2D
.text:00402A2D loc_402A2D:                             ; CODE XREF: sub_402850+25A↓j
.text:00402A2D                 mov     ecx, [esp+7Ch+var_2C]
.text:00402A31                 cmp     ecx, [esp+7Ch+var_28]
.text:00402A35                 jz      loc_402DC2
.text:00402A3B
.text:00402A3B loc_402A3B:                             ; CODE XREF: sub_402850+596↓j
.text:00402A3B                 mov     edi, [esp+7Ch+var_24]
.text:00402A3F                 lea     edx, [ecx+ecx*2]
.text:00402A42                 lea     esi, [edi+edx*8]
.text:00402A45                 mov     [esp+7Ch+Block], esi
.text:00402A48                 call    sub_406DD0
.text:00402A4D                 mov     [esp+7Ch+Block], esi
.text:00402A50                 mov     ebx, [esp+7Ch+arg_0]
.text:00402A57                 mov     [esp+7Ch+var_78], ebx
.text:00402A5B                 call    sub_406D10
.text:00402A60                 test    eax, eax
.text:00402A62                 jz      loc_402D69
.text:00402A68                 mov     dword ptr [esi+10h], 0
.text:00402A6F                 mov     dword ptr [esi+0Ch], 0
.text:00402A76                 mov     dword ptr [esi+14h], 0
.text:00402A7D                 mov     [esp+7Ch+Block], esi
.text:00402A80                 call    sub_403480
.text:00402A85                 inc     [esp+7Ch+var_2C]
.text:00402A89                 mov     ecx, [esp+7Ch+var_24]
.text:00402A8D                 mov     edi, [esp+7Ch+var_34]
.text:00402A91                 mov     edx, [esp+7Ch+var_2C]
.text:00402A95                 mov     [esp+7Ch+var_78], edi
.text:00402A99                 lea     ebp, [edx+edx*2]
.text:00402A9C                 lea     esi, [ecx+ebp*8-18h]
.text:00402AA0                 mov     [esp+7Ch+Block], esi
.text:00402AA3                 call    sub_403650
.text:00402AA8                 test    eax, eax
.text:00402AAA                 jz      short loc_402A2D
.text:00402AAC
.text:00402AAC loc_402AAC:                             ; CODE XREF: sub_402850+541↓j
.text:00402AAC                 mov     [esp+7Ch+var_5E], 0
.text:00402AB1
.text:00402AB1 loc_402AB1:                             ; CODE XREF: sub_402850+2DE↓j
.text:00402AB1                 mov     ebx, [esp+7Ch+var_3C]
.text:00402AB5                 cmp     ebx, [esp+7Ch+var_38]
.text:00402AB9                 jz      loc_402D40
.text:00402ABF
.text:00402ABF loc_402ABF:                             ; CODE XREF: sub_402850+514↓j
.text:00402ABF                 mov     ecx, [esp+7Ch+var_34]
.text:00402AC3                 lea     edx, [ebx+ebx*2]
.text:00402AC6                 lea     esi, [ecx+edx*8]
.text:00402AC9                 mov     [esp+7Ch+Block], esi
.text:00402ACC                 call    sub_406DD0
.text:00402AD1                 mov     [esp+7Ch+Block], esi
.text:00402AD4                 mov     ebp, [esp+7Ch+arg_4]
.text:00402ADB                 mov     [esp+7Ch+var_78], ebp
.text:00402ADF                 call    sub_406D10
.text:00402AE4                 test    eax, eax
.text:00402AE6                 jz      loc_402CE7
.text:00402AEC                 mov     dword ptr [esi+10h], 0
.text:00402AF3                 mov     dword ptr [esi+0Ch], 0
.text:00402AFA                 mov     dword ptr [esi+14h], 0
.text:00402B01                 mov     [esp+7Ch+Block], esi
.text:00402B04                 call    sub_403480
.text:00402B09                 inc     [esp+7Ch+var_3C]
.text:00402B0D                 mov     ebp, [esp+7Ch+var_34]
.text:00402B11                 mov     esi, [esp+7Ch+var_24]
.text:00402B15                 mov     edx, [esp+7Ch+var_3C]
.text:00402B19                 mov     [esp+7Ch+Block], esi
.text:00402B1C                 lea     ebx, [edx+edx*2]
.text:00402B1F                 lea     edi, [ebp+ebx*8-18h]
.text:00402B23                 mov     [esp+7Ch+var_78], edi
.text:00402B27                 call    sub_403650
.text:00402B2C                 test    eax, eax
.text:00402B2E                 jz      short loc_402AB1
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_402850+4BF↓j
.text:00402B30                 cmp     ds:byte_40B040, 0
.text:00402B37                 jz      loc_402CDE
.text:00402B3D                 mov     [esp+7Ch+var_64], 0
.text:00402B45                 mov     ecx, [esp+7Ch+var_2C]
.text:00402B49                 cmp     ecx, 1
.text:00402B4C                 jz      short loc_402BAD
.text:00402B4E                 mov     [esp+7Ch+var_68], 0
.text:00402B56                 mov     ebx, [esp+7Ch+var_3C]
.text:00402B5A
.text:00402B5A loc_402B5A:                             ; CODE XREF: sub_402850+35B↓j
.text:00402B5A                 xor     edi, edi
.text:00402B5C                 cmp     ebx, 1
.text:00402B5F                 jz      short loc_402B9B
.text:00402B61                 mov     ebp, [esp+7Ch+var_68]
.text:00402B65                 xor     esi, esi
.text:00402B67                 mov     esi, esi
.text:00402B69                 lea     edi, [edi+0]
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_402850+345↓j
.text:00402B70                 mov     edx, [esp+7Ch+var_34]
.text:00402B74                 inc     edi
.text:00402B75                 mov     ebx, [esp+7Ch+var_24]
.text:00402B79                 add     edx, esi
.text:00402B7B                 add     ebx, ebp
.text:00402B7D                 add     esi, 18h
.text:00402B80                 mov     [esp+7Ch+Block], ebx ; int
.text:00402B83                 mov     [esp+7Ch+var_78], edx ; FILE *
.text:00402B87                 call    sub_403780
.text:00402B8C                 mov     ebx, [esp+7Ch+var_3C]
.text:00402B90                 lea     ecx, [ebx-1]
.text:00402B93                 cmp     edi, ecx
.text:00402B95                 jb      short loc_402B70
.text:00402B97                 mov     ecx, [esp+7Ch+var_2C]
.text:00402B9B
.text:00402B9B loc_402B9B:                             ; CODE XREF: sub_402850+30F↑j
.text:00402B9B                 inc     [esp+7Ch+var_64]
.text:00402B9F                 lea     esi, [ecx-1]
.text:00402BA2                 add     [esp+7Ch+var_68], 18h
.text:00402BA7                 cmp     [esp+7Ch+var_64], esi
.text:00402BAB                 jb      short loc_402B5A
.text:00402BAD
.text:00402BAD loc_402BAD:                             ; CODE XREF: sub_402850+2FC↑j
.text:00402BAD                                         ; sub_402850+492↓j
.text:00402BAD                 mov     [esp+7Ch+var_64], 0
.text:00402BB5                 cmp     ecx, 1
.text:00402BB8                 jz      short loc_402BF3
.text:00402BBA                 xor     esi, esi
.text:00402BBC
.text:00402BBC loc_402BBC:                             ; CODE XREF: sub_402850+3A1↓j
.text:00402BBC                 mov     ebp, [esp+7Ch+var_24]
.text:00402BC0                 add     ebp, esi
.text:00402BC2                 mov     ebx, [ebp+14h]
.text:00402BC5                 add     esi, 18h
.text:00402BC8                 mov     [esp+7Ch+Block], ebx ; Block
.text:00402BCB                 call    free
.text:00402BD0                 mov     ecx, [ebp+8]
.text:00402BD3                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402BD6                 call    free
.text:00402BDB                 inc     [esp+7Ch+var_64]
.text:00402BDF                 mov     ecx, [esp+7Ch+var_2C]
.text:00402BE3                 mov     dword ptr [ebp+8], 0
.text:00402BEA                 lea     edi, [ecx-1]
.text:00402BED                 cmp     [esp+7Ch+var_64], edi
.text:00402BF1                 jb      short loc_402BBC
.text:00402BF3
.text:00402BF3 loc_402BF3:                             ; CODE XREF: sub_402850+368↑j
.text:00402BF3                 cmp     [esp+7Ch+var_5D], 0
.text:00402BF8                 jnz     loc_402CD1
.text:00402BFE                 mov     esi, [esp+7Ch+var_24]
.text:00402C02                 lea     edi, [ecx+ecx*2]
.text:00402C05                 lea     ecx, [esi+edi*8]
.text:00402C08                 mov     ebp, [ecx-18h]
.text:00402C0B                 lea     edi, [ecx-18h]
.text:00402C0E                 mov     [esi], ebp
.text:00402C10                 mov     edx, [edi+4]
.text:00402C13                 mov     [esi+4], edx
.text:00402C16                 mov     ebx, [edi+8]
.text:00402C19                 mov     [esi+8], ebx
.text:00402C1C                 mov     ecx, [edi+0Ch]
.text:00402C1F                 mov     [esi+0Ch], ecx
.text:00402C22                 mov     ebp, [edi+10h]
.text:00402C25                 mov     [esi+10h], ebp
.text:00402C28                 mov     edx, [edi+14h]
.text:00402C2B                 mov     [esi+14h], edx
.text:00402C2E                 mov     [esp+7Ch+var_2C], 1
.text:00402C36
.text:00402C36 loc_402C36:                             ; CODE XREF: sub_402850+489↓j
.text:00402C36                 mov     [esp+7Ch+var_64], 0
.text:00402C3E                 mov     ebx, [esp+7Ch+var_3C]
.text:00402C42                 cmp     ebx, 1
.text:00402C45                 jz      short loc_402C80
.text:00402C47                 xor     esi, esi
.text:00402C49
.text:00402C49 loc_402C49:                             ; CODE XREF: sub_402850+42E↓j
.text:00402C49                 mov     ebp, [esp+7Ch+var_34]
.text:00402C4D                 add     ebp, esi
.text:00402C4F                 mov     ecx, [ebp+14h]
.text:00402C52                 add     esi, 18h
.text:00402C55                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402C58                 call    free
.text:00402C5D                 mov     ebx, [ebp+8]
.text:00402C60                 mov     [esp+7Ch+Block], ebx ; Block
.text:00402C63                 call    free
.text:00402C68                 inc     [esp+7Ch+var_64]
.text:00402C6C                 mov     ebx, [esp+7Ch+var_3C]
.text:00402C70                 mov     dword ptr [ebp+8], 0
.text:00402C77                 lea     edx, [ebx-1]
.text:00402C7A                 cmp     [esp+7Ch+var_64], edx
.text:00402C7E                 jb      short loc_402C49
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_402850+3F5↑j
.text:00402C80                 cmp     [esp+7Ch+var_5E], 0
.text:00402C85                 jnz     short loc_402CC4
.text:00402C87                 mov     esi, [esp+7Ch+var_34]
.text:00402C8B                 lea     edx, [ebx+ebx*2]
.text:00402C8E                 lea     ebx, [esi+edx*8]
.text:00402C91                 mov     ebp, [ebx-18h]
.text:00402C94                 lea     edx, [ebx-18h]
.text:00402C97                 mov     [esi], ebp
.text:00402C99                 mov     edi, [edx+4]
.text:00402C9C                 mov     [esi+4], edi
.text:00402C9F                 mov     ecx, [edx+8]
.text:00402CA2                 mov     [esi+8], ecx
.text:00402CA5                 mov     ebx, [edx+0Ch]
.text:00402CA8                 mov     [esi+0Ch], ebx
.text:00402CAB                 mov     ebp, [edx+10h]
.text:00402CAE                 mov     [esi+10h], ebp
.text:00402CB1                 mov     edi, [edx+14h]
.text:00402CB4                 mov     [esi+14h], edi
.text:00402CB7                 mov     [esp+7Ch+var_3C], 1
.text:00402CBF                 jmp     loc_402967
.text:00402CC4 ; ---------------------------------------------------------------------------
.text:00402CC4
.text:00402CC4 loc_402CC4:                             ; CODE XREF: sub_402850+435↑j
.text:00402CC4                 mov     [esp+7Ch+var_3C], 0
.text:00402CCC                 jmp     loc_402967
.text:00402CD1 ; ---------------------------------------------------------------------------
.text:00402CD1
.text:00402CD1 loc_402CD1:                             ; CODE XREF: sub_402850+3A8↑j
.text:00402CD1                 mov     [esp+7Ch+var_2C], 0
.text:00402CD9                 jmp     loc_402C36
.text:00402CDE ; ---------------------------------------------------------------------------
.text:00402CDE
.text:00402CDE loc_402CDE:                             ; CODE XREF: sub_402850+2E7↑j
.text:00402CDE                 mov     ecx, [esp+7Ch+var_2C]
.text:00402CE2                 jmp     loc_402BAD
.text:00402CE7 ; ---------------------------------------------------------------------------
.text:00402CE7
.text:00402CE7 loc_402CE7:                             ; CODE XREF: sub_402850+296↑j
.text:00402CE7                 mov     edi, [esp+7Ch+arg_4]
.text:00402CEE                 test    byte ptr [edi+0Ch], 20h
.text:00402CF2                 jnz     short loc_402D14
.text:00402CF4
.text:00402CF4 loc_402CF4:                             ; CODE XREF: sub_402850+4EE↓j
.text:00402CF4                 mov     ecx, [esi+8]
.text:00402CF7                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402CFA                 call    free
.text:00402CFF                 inc     [esp+7Ch+var_3C]
.text:00402D03                 mov     dword ptr [esi+8], 0
.text:00402D0A                 mov     [esp+7Ch+var_5E], 1
.text:00402D0F                 jmp     loc_402B30
.text:00402D14 ; ---------------------------------------------------------------------------
.text:00402D14
.text:00402D14 loc_402D14:                             ; CODE XREF: sub_402850+4A2↑j
.text:00402D14                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:00402D1B                 call    ds:libintl_gettext
.text:00402D21                 mov     ebp, eax
.text:00402D23                 call    _errno
.text:00402D28                 mov     [esp+7Ch+var_74], ebp ; char *
.text:00402D2C                 mov     ebx, [eax]
.text:00402D2E                 mov     [esp+7Ch+Block], 1 ; Code
.text:00402D35                 mov     [esp+7Ch+var_78], ebx ; ErrorMessage
.text:00402D39                 call    sub_408460
.text:00402D3E                 jmp     short loc_402CF4
.text:00402D40 ; ---------------------------------------------------------------------------
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_402850+269↑j
.text:00402D40                 mov     [esp+7Ch+var_74], 18h ; int
.text:00402D48                 mov     ebx, [esp+7Ch+var_34]
.text:00402D4C                 lea     esi, [esp+7Ch+var_38]
.text:00402D50                 mov     [esp+7Ch+var_78], esi ; int
.text:00402D54                 mov     [esp+7Ch+Block], ebx ; void *
.text:00402D57                 call    sub_406920
.text:00402D5C                 mov     [esp+7Ch+var_34], eax
.text:00402D60                 mov     ebx, [esp+7Ch+var_3C]
.text:00402D64                 jmp     loc_402ABF
.text:00402D69 ; ---------------------------------------------------------------------------
.text:00402D69
.text:00402D69 loc_402D69:                             ; CODE XREF: sub_402850+212↑j
.text:00402D69                 mov     ebp, [esp+7Ch+arg_0]
.text:00402D70                 test    byte ptr [ebp+0Ch], 20h
.text:00402D74                 jnz     short loc_402D96
.text:00402D76
.text:00402D76 loc_402D76:                             ; CODE XREF: sub_402850+570↓j
.text:00402D76                 mov     ebx, [esi+8]
.text:00402D79                 mov     [esp+7Ch+Block], ebx ; Block
.text:00402D7C                 call    free
.text:00402D81                 inc     [esp+7Ch+var_2C]
.text:00402D85                 mov     dword ptr [esi+8], 0
.text:00402D8C                 mov     [esp+7Ch+var_5D], 1
.text:00402D91                 jmp     loc_402AAC
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D96
.text:00402D96 loc_402D96:                             ; CODE XREF: sub_402850+524↑j
.text:00402D96                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:00402D9D                 call    ds:libintl_gettext
.text:00402DA3                 mov     edi, eax
.text:00402DA5                 call    _errno
.text:00402DAA                 mov     [esp+7Ch+var_74], edi ; char *
.text:00402DAE                 mov     ecx, [eax]
.text:00402DB0                 mov     [esp+7Ch+Block], 1 ; Code
.text:00402DB7                 mov     [esp+7Ch+var_78], ecx ; ErrorMessage
.text:00402DBB                 call    sub_408460
.text:00402DC0                 jmp     short loc_402D76
.text:00402DC2 ; ---------------------------------------------------------------------------
.text:00402DC2
.text:00402DC2 loc_402DC2:                             ; CODE XREF: sub_402850+1E5↑j
.text:00402DC2                 mov     [esp+7Ch+var_74], 18h ; int
.text:00402DCA                 mov     esi, [esp+7Ch+var_24]
.text:00402DCE                 lea     ecx, [esp+7Ch+var_28]
.text:00402DD2                 mov     [esp+7Ch+var_78], ecx ; int
.text:00402DD6                 mov     [esp+7Ch+Block], esi ; void *
.text:00402DD9                 call    sub_406920
.text:00402DDE                 mov     [esp+7Ch+var_24], eax
.text:00402DE2                 mov     ecx, [esp+7Ch+var_2C]
.text:00402DE6                 jmp     loc_402A3B
.text:00402DEB ; ---------------------------------------------------------------------------
.text:00402DEB
.text:00402DEB loc_402DEB:                             ; CODE XREF: sub_402850+145↑j
.text:00402DEB                 cmp     ds:byte_40B020, 0
.text:00402DF2                 jnz     loc_402EAE
.text:00402DF8
.text:00402DF8 loc_402DF8:                             ; CODE XREF: sub_402850+672↓j
.text:00402DF8                 mov     esi, [esp+7Ch+var_24]
.text:00402DFC                 mov     ebp, [esi+14h]
.text:00402DFF                 mov     [esp+7Ch+Block], ebp ; Block
.text:00402E02                 call    free
.text:00402E07                 mov     edx, [esi+8]
.text:00402E0A                 mov     [esp+7Ch+Block], edx ; Block
.text:00402E0D                 call    free
.text:00402E12                 mov     dword ptr [esi+8], 0
.text:00402E19                 mov     ebx, [esp+7Ch+var_28]
.text:00402E1D                 mov     [esp+7Ch+var_2C], 0
.text:00402E25                 test    ebx, ebx
.text:00402E27                 jz      short loc_402E89
.text:00402E29
.text:00402E29 loc_402E29:                             ; CODE XREF: sub_402850+659↓j
.text:00402E29                 mov     esi, [esp+7Ch+var_2C]
.text:00402E2D                 mov     ebp, [esp+7Ch+var_24]
.text:00402E31                 lea     edx, [esi+esi*2]
.text:00402E34                 lea     esi, [ebp+edx*8+0]
.text:00402E38                 mov     [esp+7Ch+Block], esi
.text:00402E3B                 call    sub_406DD0
.text:00402E40                 mov     [esp+7Ch+Block], esi
.text:00402E43                 mov     ebx, [esp+7Ch+arg_0]
.text:00402E4A                 mov     [esp+7Ch+var_78], ebx
.text:00402E4E                 call    sub_406D10
.text:00402E53                 test    eax, eax
.text:00402E55                 jnz     short loc_402E63
.text:00402E57                 mov     eax, [esp+7Ch+arg_0]
.text:00402E5E                 jmp     loc_40294B
.text:00402E63 ; ---------------------------------------------------------------------------
.text:00402E63
.text:00402E63 loc_402E63:                             ; CODE XREF: sub_402850+605↑j
.text:00402E63                 mov     dword ptr [esi+10h], 0
.text:00402E6A                 mov     dword ptr [esi+0Ch], 0
.text:00402E71                 mov     dword ptr [esi+14h], 0
.text:00402E78                 mov     [esp+7Ch+Block], esi
.text:00402E7B                 call    sub_403480
.text:00402E80                 inc     [esp+7Ch+var_2C]
.text:00402E84                 jmp     loc_402967
.text:00402E89 ; ---------------------------------------------------------------------------
.text:00402E89
.text:00402E89 loc_402E89:                             ; CODE XREF: sub_402850+5D7↑j
.text:00402E89                 mov     [esp+7Ch+var_74], 18h ; int
.text:00402E91                 mov     edi, [esp+7Ch+var_24]
.text:00402E95                 lea     ecx, [esp+7Ch+var_28]
.text:00402E99                 mov     [esp+7Ch+var_78], ecx ; int
.text:00402E9D                 mov     [esp+7Ch+Block], edi ; void *
.text:00402EA0                 call    sub_406920
.text:00402EA5                 mov     [esp+7Ch+var_24], eax
.text:00402EA9                 jmp     loc_402E29
.text:00402EAE ; ---------------------------------------------------------------------------
.text:00402EAE
.text:00402EAE loc_402EAE:                             ; CODE XREF: sub_402850+5A2↑j
.text:00402EAE                 mov     [esp+7Ch+var_78], offset stru_40B0A0 ; FILE *
.text:00402EB6                 mov     ecx, [esp+7Ch+var_24]
.text:00402EBA                 mov     [esp+7Ch+Block], ecx ; int
.text:00402EBD                 call    sub_403780
.text:00402EC2                 jmp     loc_402DF8
.text:00402EC7 ; ---------------------------------------------------------------------------
.text:00402EC7
.text:00402EC7 loc_402EC7:                             ; CODE XREF: sub_402850+11D↑j
.text:00402EC7                                         ; sub_402850+129↑j
.text:00402EC7                 cmp     ds:byte_40B020, 0
.text:00402ECE                 jz      short loc_402ED8
.text:00402ED0                 test    ecx, ecx
.text:00402ED2                 jnz     loc_4030B3
.text:00402ED8
.text:00402ED8 loc_402ED8:                             ; CODE XREF: sub_402850+67E↑j
.text:00402ED8                                         ; sub_402850+932↓j
.text:00402ED8                 cmp     ds:byte_40B030, 0
.text:00402EDF                 jz      short loc_402EED
.text:00402EE1                 mov     eax, [esp+7Ch+var_3C]
.text:00402EE5                 test    eax, eax
.text:00402EE7                 jnz     loc_402FB2
.text:00402EED
.text:00402EED loc_402EED:                             ; CODE XREF: sub_402850+68F↑j
.text:00402EED                                         ; sub_402850+832↓j
.text:00402EED                 xor     edi, edi
.text:00402EEF                 cmp     edi, [esp+7Ch+var_2C]
.text:00402EF3                 jnb     loc_402FA9
.text:00402EF9                 mov     eax, [esp+7Ch+var_24]
.text:00402EFD                 xor     esi, esi
.text:00402EFF                 nop
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402850+6C0↓j
.text:00402F00                 mov     edx, [eax+esi+8]
.text:00402F04                 test    edx, edx
.text:00402F06                 jnz     short loc_402F80
.text:00402F08
.text:00402F08 loc_402F08:                             ; CODE XREF: sub_402850+754↓j
.text:00402F08                 inc     edi
.text:00402F09                 add     esi, 18h
.text:00402F0C                 cmp     edi, [esp+7Ch+var_2C]
.text:00402F10                 jb      short loc_402F00
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_402850+75D↓j
.text:00402F12                 mov     [esp+7Ch+Block], eax ; Block
.text:00402F15                 xor     edi, edi
.text:00402F17                 call    free
.text:00402F1C                 cmp     edi, [esp+7Ch+var_3C]
.text:00402F20                 jnb     short loc_402F78
.text:00402F22                 mov     eax, [esp+7Ch+var_34]
.text:00402F26                 xor     esi, esi
.text:00402F28                 nop
.text:00402F29                 lea     esi, [esi+0]
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402850+6F0↓j
.text:00402F30                 mov     ebp, [eax+esi+8]
.text:00402F34                 test    ebp, ebp
.text:00402F36                 jnz     short loc_402F52
.text:00402F38
.text:00402F38 loc_402F38:                             ; CODE XREF: sub_402850+726↓j
.text:00402F38                 inc     edi
.text:00402F39                 add     esi, 18h
.text:00402F3C                 cmp     edi, [esp+7Ch+var_3C]
.text:00402F40                 jb      short loc_402F30
.text:00402F42
.text:00402F42 loc_402F42:                             ; CODE XREF: sub_402850+72C↓j
.text:00402F42                 mov     [esp+7Ch+Block], eax ; Block
.text:00402F45                 call    free
.text:00402F4A                 add     esp, 6Ch
.text:00402F4D                 pop     ebx
.text:00402F4E                 pop     esi
.text:00402F4F                 pop     edi
.text:00402F50                 pop     ebp
.text:00402F51                 retn
.text:00402F52 ; ---------------------------------------------------------------------------
.text:00402F52
.text:00402F52 loc_402F52:                             ; CODE XREF: sub_402850+6E6↑j
.text:00402F52                 lea     ebp, [esi+eax]
.text:00402F55                 mov     ecx, [ebp+14h]
.text:00402F58                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402F5B                 call    free
.text:00402F60                 mov     edx, [ebp+8]
.text:00402F63                 mov     [esp+7Ch+Block], edx ; Block
.text:00402F66                 call    free
.text:00402F6B                 mov     dword ptr [ebp+8], 0
.text:00402F72                 mov     eax, [esp+7Ch+var_34]
.text:00402F76                 jmp     short loc_402F38
.text:00402F78 ; ---------------------------------------------------------------------------
.text:00402F78
.text:00402F78 loc_402F78:                             ; CODE XREF: sub_402850+6D0↑j
.text:00402F78                 mov     eax, [esp+7Ch+var_34]
.text:00402F7C                 jmp     short loc_402F42
.text:00402F7C ; ---------------------------------------------------------------------------
.text:00402F7E                 align 10h
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402850+6B6↑j
.text:00402F80                 lea     ebp, [esi+eax]
.text:00402F83                 mov     ebx, [ebp+14h]
.text:00402F86                 mov     [esp+7Ch+Block], ebx ; Block
.text:00402F89                 call    free
.text:00402F8E                 mov     ecx, [ebp+8]
.text:00402F91                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402F94                 call    free
.text:00402F99                 mov     dword ptr [ebp+8], 0
.text:00402FA0                 mov     eax, [esp+7Ch+var_24]
.text:00402FA4                 jmp     loc_402F08
.text:00402FA9 ; ---------------------------------------------------------------------------
.text:00402FA9
.text:00402FA9 loc_402FA9:                             ; CODE XREF: sub_402850+6A3↑j
.text:00402FA9                 mov     eax, [esp+7Ch+var_24]
.text:00402FAD                 jmp     loc_402F12
.text:00402FB2 ; ---------------------------------------------------------------------------
.text:00402FB2
.text:00402FB2 loc_402FB2:                             ; CODE XREF: sub_402850+697↑j
.text:00402FB2                 mov     [esp+7Ch+Block], offset stru_40B0A0 ; int
.text:00402FB9                 mov     edi, [esp+7Ch+var_34]
.text:00402FBD                 mov     [esp+7Ch+var_78], edi ; FILE *
.text:00402FC1                 call    sub_403780
.text:00402FC6                 mov     esi, [esp+7Ch+var_34]
.text:00402FCA                 mov     ebx, [esi+14h]
.text:00402FCD                 mov     [esp+7Ch+Block], ebx ; Block
.text:00402FD0                 lea     ebx, [esp+7Ch+var_5C]
.text:00402FD4                 call    free
.text:00402FD9                 mov     ecx, [esi+8]
.text:00402FDC                 mov     [esp+7Ch+Block], ecx ; Block
.text:00402FDF                 call    free
.text:00402FE4                 mov     dword ptr [esi+8], 0
.text:00402FEB                 nop
.text:00402FEC                 lea     esi, [esi+0]
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402850+80F↓j
.text:00402FF0                 mov     [esp+7Ch+Block], ebx
.text:00402FF3                 call    sub_406DD0
.text:00402FF8                 mov     [esp+7Ch+Block], ebx
.text:00402FFB                 mov     esi, [esp+7Ch+arg_4]
.text:00403002                 mov     [esp+7Ch+var_78], esi
.text:00403006                 call    sub_406D10
.text:0040300B                 test    eax, eax
.text:0040300D                 jz      short loc_403061
.text:0040300F                 mov     [esp+7Ch+var_5C._file], 0
.text:00403017                 mov     [esp+7Ch+var_5C._flag], 0
.text:0040301F                 mov     [esp+7Ch+var_5C._charbuf], 0
.text:00403027                 mov     [esp+7Ch+Block], ebx
.text:0040302A                 call    sub_403480
.text:0040302F                 mov     [esp+7Ch+var_78], ebx ; FILE *
.text:00403033                 mov     [esp+7Ch+Block], offset stru_40B0A0 ; int
.text:0040303A                 call    sub_403780
.text:0040303F                 mov     edx, [esp+7Ch+var_5C._charbuf]
.text:00403043                 mov     [esp+7Ch+Block], edx ; Block
.text:00403046                 call    free
.text:0040304B                 mov     ebp, [esp+7Ch+var_5C._base]
.text:0040304F                 mov     [esp+7Ch+Block], ebp ; Block
.text:00403052                 call    free
.text:00403057                 mov     [esp+7Ch+var_5C._base], 0
.text:0040305F                 jmp     short loc_402FF0
.text:00403061 ; ---------------------------------------------------------------------------
.text:00403061
.text:00403061 loc_403061:                             ; CODE XREF: sub_402850+7BD↑j
.text:00403061                 mov     ecx, [esp+7Ch+arg_4]
.text:00403068                 test    byte ptr [ecx+0Ch], 20h
.text:0040306C                 jnz     short loc_403087
.text:0040306E
.text:0040306E loc_40306E:                             ; CODE XREF: sub_402850+861↓j
.text:0040306E                 mov     ebp, [esp+7Ch+var_5C._base]
.text:00403072                 mov     [esp+7Ch+Block], ebp ; Block
.text:00403075                 call    free
.text:0040307A                 mov     [esp+7Ch+var_5C._base], 0
.text:00403082                 jmp     loc_402EED
.text:00403087 ; ---------------------------------------------------------------------------
.text:00403087
.text:00403087 loc_403087:                             ; CODE XREF: sub_402850+81C↑j
.text:00403087                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:0040308E                 call    ds:libintl_gettext
.text:00403094                 mov     edi, eax
.text:00403096                 call    _errno
.text:0040309B                 mov     [esp+7Ch+var_74], edi ; char *
.text:0040309F                 mov     ebx, [eax]
.text:004030A1                 mov     [esp+7Ch+Block], 1 ; Code
.text:004030A8                 mov     [esp+7Ch+var_78], ebx ; ErrorMessage
.text:004030AC                 call    sub_408460
.text:004030B1                 jmp     short loc_40306E
.text:004030B3 ; ---------------------------------------------------------------------------
.text:004030B3
.text:004030B3 loc_4030B3:                             ; CODE XREF: sub_402850+682↑j
.text:004030B3                 mov     [esp+7Ch+var_78], offset stru_40B0A0 ; FILE *
.text:004030BB                 mov     ebp, [esp+7Ch+var_24]
.text:004030BF                 lea     ebx, [esp+7Ch+var_5C]
.text:004030C3                 mov     [esp+7Ch+Block], ebp ; int
.text:004030C6                 call    sub_403780
.text:004030CB                 mov     esi, [esp+7Ch+var_24]
.text:004030CF                 mov     edi, [esi+14h]
.text:004030D2                 mov     [esp+7Ch+Block], edi ; Block
.text:004030D5                 call    free
.text:004030DA                 mov     ecx, [esi+8]
.text:004030DD                 mov     [esp+7Ch+Block], ecx ; Block
.text:004030E0                 call    free
.text:004030E5                 mov     dword ptr [esi+8], 0
.text:004030EC                 lea     esi, [esi+0]
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_402850+90F↓j
.text:004030F0                 mov     [esp+7Ch+Block], ebx
.text:004030F3                 call    sub_406DD0
.text:004030F8                 mov     [esp+7Ch+Block], ebx
.text:004030FB                 mov     ecx, [esp+7Ch+arg_0]
.text:00403102                 mov     [esp+7Ch+var_78], ecx
.text:00403106                 call    sub_406D10
.text:0040310B                 test    eax, eax
.text:0040310D                 jz      short loc_403161
.text:0040310F                 mov     [esp+7Ch+var_5C._file], 0
.text:00403117                 mov     [esp+7Ch+var_5C._flag], 0
.text:0040311F                 mov     [esp+7Ch+var_5C._charbuf], 0
.text:00403127                 mov     [esp+7Ch+Block], ebx
.text:0040312A                 call    sub_403480
.text:0040312F                 mov     [esp+7Ch+var_78], offset stru_40B0A0 ; FILE *
.text:00403137                 mov     [esp+7Ch+Block], ebx ; int
.text:0040313A                 call    sub_403780
.text:0040313F                 mov     esi, [esp+7Ch+var_5C._charbuf]
.text:00403143                 mov     [esp+7Ch+Block], esi ; Block
.text:00403146                 call    free
.text:0040314B                 mov     edx, [esp+7Ch+var_5C._base]
.text:0040314F                 mov     [esp+7Ch+Block], edx ; Block
.text:00403152                 call    free
.text:00403157                 mov     [esp+7Ch+var_5C._base], 0
.text:0040315F                 jmp     short loc_4030F0
.text:00403161 ; ---------------------------------------------------------------------------
.text:00403161
.text:00403161 loc_403161:                             ; CODE XREF: sub_402850+8BD↑j
.text:00403161                 mov     ebx, [esp+7Ch+arg_0]
.text:00403168                 test    byte ptr [ebx+0Ch], 20h
.text:0040316C                 jnz     short loc_403187
.text:0040316E
.text:0040316E loc_40316E:                             ; CODE XREF: sub_402850+961↓j
.text:0040316E                 mov     edx, [esp+7Ch+var_5C._base]
.text:00403172                 mov     [esp+7Ch+Block], edx ; Block
.text:00403175                 call    free
.text:0040317A                 mov     [esp+7Ch+var_5C._base], 0
.text:00403182                 jmp     loc_402ED8
.text:00403187 ; ---------------------------------------------------------------------------
.text:00403187
.text:00403187 loc_403187:                             ; CODE XREF: sub_402850+91C↑j
.text:00403187                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:0040318E                 call    ds:libintl_gettext
.text:00403194                 mov     ebp, eax
.text:00403196                 call    _errno
.text:0040319B                 mov     [esp+7Ch+var_74], ebp ; char *
.text:0040319F                 mov     edi, [eax]
.text:004031A1                 mov     [esp+7Ch+Block], 1 ; Code
.text:004031A8                 mov     [esp+7Ch+var_78], edi ; ErrorMessage
.text:004031AC                 call    sub_408460
.text:004031B1                 jmp     short loc_40316E
.text:004031B3 ; ---------------------------------------------------------------------------
.text:004031B3
.text:004031B3 loc_4031B3:                             ; CODE XREF: sub_402850+FF↑j
.text:004031B3                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:004031BA                 call    ds:libintl_gettext
.text:004031C0                 mov     edi, eax
.text:004031C2                 call    _errno
.text:004031C7                 mov     [esp+7Ch+var_74], edi ; char *
.text:004031CB                 mov     edx, [eax]
.text:004031CD                 mov     [esp+7Ch+Block], 1 ; Code
.text:004031D4                 mov     [esp+7Ch+var_78], edx ; ErrorMessage
.text:004031D8                 call    sub_408460
.text:004031DD                 jmp     loc_402955
.text:004031E2 ; ---------------------------------------------------------------------------
.text:004031E2
.text:004031E2 loc_4031E2:                             ; CODE XREF: sub_402850+EE↑j
.text:004031E2                 mov     dword ptr [esi+10h], 0
.text:004031E9                 mov     dword ptr [esi+0Ch], 0
.text:004031F0                 mov     dword ptr [esi+14h], 0
.text:004031F7                 mov     [esp+7Ch+Block], esi
.text:004031FA                 call    sub_403480
.text:004031FF                 inc     [esp+7Ch+var_3C]
.text:00403203                 jmp     loc_402967
.text:00403208 ; ---------------------------------------------------------------------------
.text:00403208
.text:00403208 loc_403208:                             ; CODE XREF: sub_402850+77↑j
.text:00403208                 mov     [esp+7Ch+Block], offset aReadError ; "read error"
.text:0040320F                 call    ds:libintl_gettext
.text:00403215                 mov     edi, eax
.text:00403217                 call    _errno
.text:0040321C                 mov     [esp+7Ch+var_74], edi ; char *
.text:00403220                 mov     ebp, [eax]
.text:00403222                 mov     [esp+7Ch+Block], 1 ; Code
.text:00403229                 mov     [esp+7Ch+var_78], ebp ; ErrorMessage
.text:0040322D                 call    sub_408460
.text:00403232                 jmp     loc_4028CD
.text:00403237 ; ---------------------------------------------------------------------------
.text:00403237
.text:00403237 loc_403237:                             ; CODE XREF: sub_402850+66↑j
.text:00403237                 mov     dword ptr [esi+10h], 0
.text:0040323E                 mov     dword ptr [esi+0Ch], 0
.text:00403245                 mov     dword ptr [esi+14h], 0
.text:0040324C                 mov     [esp+7Ch+Block], esi
.text:0040324F                 call    sub_403480
.text:00403254                 inc     [esp+7Ch+var_2C]
.text:00403258                 jmp     loc_4028DF
.text:00403258 sub_402850      endp
.text:00403258
.text:00403258 ; ---------------------------------------------------------------------------
.text:0040325D aInvalidFieldNu_1 db 'invalid field number: %s',0
.text:0040325D                                         ; DATA XREF: sub_4032D0+6D↓o
.text:00403276                 align 10h
.text:00403280 aInvalidFileNum db 'invalid file number in field spec: `%s',27h,0
.text:00403280                                         ; DATA XREF: sub_4032D0:loc_403427↓o
.text:004032A8 aInvalidFieldSp db 'invalid field specifier: `%s',27h,0
.text:004032A8                                         ; DATA XREF: sub_4032D0:loc_40346A↓o
.text:004032C6                 align 10h
.text:004032D0
.text:004032D0 ; =============== S U B R O U T I N E =======================================
.text:004032D0
.text:004032D0
.text:004032D0 sub_4032D0      proc near               ; CODE XREF: sub_401C00+51D↑p
.text:004032D0                                         ; sub_401C00+63D↑p
.text:004032D0
.text:004032D0 Code            = dword ptr -4Ch
.text:004032D0 ErrorMessage    = dword ptr -48h
.text:004032D0 var_44          = dword ptr -44h
.text:004032D0 var_40          = byte ptr -40h
.text:004032D0 Str             = dword ptr -3Ch
.text:004032D0 var_28          = dword ptr -28h
.text:004032D0 var_24          = dword ptr -24h
.text:004032D0 var_20          = dword ptr -20h
.text:004032D0 var_1C          = dword ptr -1Ch
.text:004032D0 var_18          = dword ptr -18h
.text:004032D0 var_10          = dword ptr -10h
.text:004032D0 var_C           = dword ptr -0Ch
.text:004032D0 var_8           = dword ptr -8
.text:004032D0 var_4           = dword ptr -4
.text:004032D0 arg_0           = byte ptr  4
.text:004032D0 arg_4           = dword ptr  8
.text:004032D0 arg_8           = dword ptr  0Ch
.text:004032D0
.text:004032D0                 sub     esp, 4Ch
.text:004032D3                 mov     [esp+4Ch+var_C], esi
.text:004032D7                 mov     esi, dword ptr [esp+4Ch+arg_0]
.text:004032DB                 mov     [esp+4Ch+var_10], ebx
.text:004032DF                 xor     ebx, ebx
.text:004032E1                 mov     [esp+4Ch+var_8], edi
.text:004032E5                 mov     edi, [esp+4Ch+arg_8]
.text:004032E9                 mov     [esp+4Ch+var_4], ebp
.text:004032ED                 mov     ebp, [esp+4Ch+arg_4]
.text:004032F1                 movsx   eax, byte ptr [esi]
.text:004032F4                 cmp     eax, 30h ; '0'
.text:004032F7                 jz      loc_403455
.text:004032FD                 cmp     eax, 30h ; '0'
.text:00403300                 jl      loc_403427
.text:00403306                 cmp     eax, 32h ; '2'
.text:00403309                 jg      loc_403427
.text:0040330F                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:00403313                 jz      short loc_403337
.text:00403315                 lea     esi, [esi+0]
.text:00403319                 lea     edi, [edi+0]
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_4032D0+6B↓j
.text:00403320                                         ; sub_4032D0+152↓j ...
.text:00403320                 movzx   eax, bl
.text:00403323                 mov     esi, [esp+4Ch+var_C]
.text:00403327                 mov     ebx, [esp+4Ch+var_10]
.text:0040332B                 mov     edi, [esp+4Ch+var_8]
.text:0040332F                 mov     ebp, [esp+4Ch+var_4]
.text:00403333                 add     esp, 4Ch
.text:00403336                 retn
.text:00403337 ; ---------------------------------------------------------------------------
.text:00403337
.text:00403337 loc_403337:                             ; CODE XREF: sub_4032D0+43↑j
.text:00403337                 cmp     byte ptr [esi+2], 0
.text:0040333B                 jz      short loc_403320
.text:0040333D                 mov     [esp+4Ch+Code], offset aInvalidFieldNu_1 ; "invalid field number: %s"
.text:00403344                 lea     ecx, [esi+2]
.text:00403347                 mov     [esp+4Ch+var_20], ecx
.text:0040334B                 call    ds:libintl_gettext
.text:00403351                 mov     [esp+4Ch+Str], offset Locale ; Str
.text:00403359                 lea     edx, [esp+4Ch+var_1C]
.text:0040335D                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00403361                 mov     [esp+4Ch+var_44], 0Ah ; int
.text:00403369                 mov     [esp+4Ch+var_24], eax
.text:0040336D                 mov     eax, [esp+4Ch+var_20]
.text:00403371                 mov     [esp+4Ch+ErrorMessage], 0 ; int
.text:00403379                 mov     [esp+4Ch+Code], eax ; int
.text:0040337C                 call    sub_405B90
.text:00403381                 mov     [esp+4Ch+var_28], eax
.text:00403385                 cmp     eax, 1
.text:00403388                 jz      short loc_403396
.text:0040338A                 test    eax, eax
.text:0040338C                 jnz     short loc_4033E3
.text:0040338E                 mov     ebx, [esp+4Ch+var_18]
.text:00403392                 test    ebx, ebx
.text:00403394                 jz      short loc_4033CD
.text:00403396
.text:00403396 loc_403396:                             ; CODE XREF: sub_4032D0+B8↑j
.text:00403396                 mov     edx, [esp+4Ch+var_20]
.text:0040339A                 mov     [esp+4Ch+Code], edx ; char *
.text:0040339D                 call    sub_405AF0
.text:004033A2                 mov     [esp+4Ch+Code], offset aValueSIsSoLarg ; "value %s is so large that it is not rep"...
.text:004033A9                 mov     ebx, eax
.text:004033AB                 call    ds:libintl_gettext
.text:004033B1                 mov     dword ptr [esp+4Ch+var_40], ebx ; char
.text:004033B5                 mov     [esp+4Ch+ErrorMessage], 0 ; ErrorMessage
.text:004033BD                 mov     [esp+4Ch+Code], 1 ; Code
.text:004033C4                 mov     [esp+4Ch+var_44], eax ; char *
.text:004033C8                 call    sub_408460
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_4032D0+C4↑j
.text:004033CD                 mov     ecx, [esp+4Ch+var_28]
.text:004033D1                 test    ecx, ecx
.text:004033D3                 jnz     short loc_4033E3
.text:004033D5                 mov     ecx, [esp+4Ch+var_18]
.text:004033D9                 mov     ebx, [esp+4Ch+var_1C]
.text:004033DD                 mov     eax, ecx
.text:004033DF                 or      eax, ebx
.text:004033E1                 jnz     short loc_40340F
.text:004033E3
.text:004033E3 loc_4033E3:                             ; CODE XREF: sub_4032D0+BC↑j
.text:004033E3                                         ; sub_4032D0+103↑j
.text:004033E3                 mov     ebx, [esp+4Ch+var_20]
.text:004033E7                 mov     [esp+4Ch+Code], ebx ; char *
.text:004033EA                 call    sub_405AF0
.text:004033EF                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:004033F3                 mov     edx, [esp+4Ch+var_24]
.text:004033F7                 mov     [esp+4Ch+ErrorMessage], 0 ; ErrorMessage
.text:004033FF                 mov     [esp+4Ch+Code], 1 ; Code
.text:00403406                 mov     [esp+4Ch+var_44], edx ; char *
.text:0040340A                 call    sub_408460
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_4032D0+111↑j
.text:0040340F                 mov     ecx, [esp+4Ch+var_1C]
.text:00403413                 dec     ecx
.text:00403414                 mov     [edi], ecx
.text:00403416                 movsx   edi, byte ptr [esi]
.text:00403419                 sub     edi, 30h ; '0'
.text:0040341C                 mov     [ebp+0], edi
.text:0040341F                 nop
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_4032D0+198↓j
.text:00403420                 mov     bl, 1
.text:00403422                 jmp     loc_403320
.text:00403427 ; ---------------------------------------------------------------------------
.text:00403427
.text:00403427 loc_403427:                             ; CODE XREF: sub_4032D0+30↑j
.text:00403427                                         ; sub_4032D0+39↑j
.text:00403427                 mov     [esp+4Ch+Code], offset aInvalidFileNum ; "invalid file number in field spec: `%s'"
.text:0040342E
.text:0040342E loc_40342E:                             ; CODE XREF: sub_4032D0+1A1↓j
.text:0040342E                 call    ds:libintl_gettext
.text:00403434                 mov     dword ptr [esp+4Ch+var_40], esi ; char
.text:00403438                 mov     [esp+4Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403440                 mov     [esp+4Ch+Code], 0 ; Code
.text:00403447                 mov     [esp+4Ch+var_44], eax ; char *
.text:0040344B                 call    sub_408460
.text:00403450                 jmp     loc_403320
.text:00403455 ; ---------------------------------------------------------------------------
.text:00403455
.text:00403455 loc_403455:                             ; CODE XREF: sub_4032D0+27↑j
.text:00403455                 cmp     byte ptr [esi+1], 0
.text:00403459                 jnz     short loc_40346A
.text:0040345B                 mov     dword ptr [ebp+0], 0
.text:00403462                 mov     dword ptr [edi], 0
.text:00403468                 jmp     short loc_403420
.text:0040346A ; ---------------------------------------------------------------------------
.text:0040346A
.text:0040346A loc_40346A:                             ; CODE XREF: sub_4032D0+189↑j
.text:0040346A                 mov     [esp+4Ch+Code], offset aInvalidFieldSp ; "invalid field specifier: `%s'"
.text:00403471                 jmp     short loc_40342E
.text:00403471 sub_4032D0      endp
.text:00403471
.text:00403471 ; ---------------------------------------------------------------------------
.text:00403473                 align 10h
.text:00403480
.text:00403480 ; =============== S U B R O U T I N E =======================================
.text:00403480
.text:00403480
.text:00403480 sub_403480      proc near               ; CODE XREF: sub_402850+230↑p
.text:00403480                                         ; sub_402850+2B4↑p ...
.text:00403480
.text:00403480 Buf             = dword ptr -2Ch
.text:00403480 Val             = dword ptr -28h
.text:00403480 MaxCount        = dword ptr -24h
.text:00403480 var_15          = byte ptr -15h
.text:00403480 var_14          = dword ptr -14h
.text:00403480 arg_0           = dword ptr  4
.text:00403480
.text:00403480                 push    ebp
.text:00403481                 push    edi
.text:00403482                 push    esi
.text:00403483                 push    ebx
.text:00403484                 sub     esp, 1Ch
.text:00403487                 mov     edi, [esp+2Ch+arg_0]
.text:0040348B                 mov     esi, [edi+8]
.text:0040348E                 mov     eax, [edi+4]
.text:00403491                 mov     ecx, esi
.text:00403493                 add     ecx, eax
.text:00403495                 dec     ecx
.text:00403496                 cmp     esi, ecx
.text:00403498                 mov     [esp+2Ch+var_14], ecx
.text:0040349C                 jz      loc_40353D
.text:004034A2                 movzx   edx, ds:byte_40B090
.text:004034A9                 test    dl, dl
.text:004034AB                 mov     [esp+2Ch+var_15], dl
.text:004034AF                 jz      loc_403566
.text:004034B5                 lea     esi, [esi+0]
.text:004034B9                 lea     edi, [edi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403480+7D↓j
.text:004034C0                 movzx   ebx, [esp+2Ch+var_15]
.text:004034C5                 mov     [esp+2Ch+Buf], esi ; Buf
.text:004034C8                 mov     ebp, [esp+2Ch+var_14]
.text:004034CC                 sub     ebp, esi
.text:004034CE                 mov     [esp+2Ch+Val], ebx ; Val
.text:004034D2                 mov     [esp+2Ch+MaxCount], ebp ; MaxCount
.text:004034D6                 call    memchr
.text:004034DB                 test    eax, eax
.text:004034DD                 mov     ebx, eax
.text:004034DF                 jz      short loc_403522
.text:004034E1                 mov     ebp, ebx
.text:004034E3                 mov     edx, [edi+0Ch]
.text:004034E6                 sub     ebp, esi
.text:004034E8                 cmp     edx, [edi+10h]
.text:004034EB                 jnb     short loc_403500
.text:004034ED
.text:004034ED loc_4034ED:                             ; CODE XREF: sub_403480+A0↓j
.text:004034ED                 mov     ecx, [edi+14h]
.text:004034F0                 mov     [ecx+edx*8+4], ebp
.text:004034F4                 inc     dword ptr [edi+0Ch]
.text:004034F7                 mov     [ecx+edx*8], esi
.text:004034FA                 lea     esi, [ebx+1]
.text:004034FD                 jmp     short loc_4034C0
.text:004034FD ; ---------------------------------------------------------------------------
.text:004034FF                 align 10h
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_403480+6B↑j
.text:00403500                 mov     [esp+2Ch+MaxCount], 8 ; int
.text:00403508                 lea     edx, [edi+10h]
.text:0040350B                 mov     [esp+2Ch+Val], edx ; int
.text:0040350F                 mov     ecx, [edi+14h]
.text:00403512                 mov     [esp+2Ch+Buf], ecx ; void *
.text:00403515                 call    sub_406920
.text:0040351A                 mov     [edi+14h], eax
.text:0040351D                 mov     edx, [edi+0Ch]
.text:00403520                 jmp     short loc_4034ED
.text:00403522 ; ---------------------------------------------------------------------------
.text:00403522
.text:00403522 loc_403522:                             ; CODE XREF: sub_403480+5F↑j
.text:00403522                 mov     ecx, [edi+14h]
.text:00403525
.text:00403525 loc_403525:                             ; CODE XREF: sub_403480+15C↓j
.text:00403525                                         ; sub_403480+17C↓j
.text:00403525                 mov     ebx, [esp+2Ch+var_14]
.text:00403529                 mov     edx, [edi+0Ch]
.text:0040352C                 sub     ebx, esi
.text:0040352E                 cmp     edx, [edi+10h]
.text:00403531                 jnb     short loc_403545
.text:00403533
.text:00403533 loc_403533:                             ; CODE XREF: sub_403480+E4↓j
.text:00403533                 mov     [ecx+edx*8+4], ebx
.text:00403537                 inc     dword ptr [edi+0Ch]
.text:0040353A                 mov     [ecx+edx*8], esi
.text:0040353D
.text:0040353D loc_40353D:                             ; CODE XREF: sub_403480+1C↑j
.text:0040353D                                         ; sub_403480+106↓j ...
.text:0040353D                 add     esp, 1Ch
.text:00403540                 pop     ebx
.text:00403541                 pop     esi
.text:00403542                 pop     edi
.text:00403543                 pop     ebp
.text:00403544                 retn
.text:00403545 ; ---------------------------------------------------------------------------
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_403480+B1↑j
.text:00403545                 mov     [esp+2Ch+Buf], ecx ; void *
.text:00403548                 lea     ebp, [edi+10h]
.text:0040354B                 mov     [esp+2Ch+MaxCount], 8 ; int
.text:00403553                 mov     [esp+2Ch+Val], ebp ; int
.text:00403557                 call    sub_406920
.text:0040355C                 mov     [edi+14h], eax
.text:0040355F                 mov     edx, [edi+0Ch]
.text:00403562                 mov     ecx, eax
.text:00403564                 jmp     short loc_403533
.text:00403566 ; ---------------------------------------------------------------------------
.text:00403566
.text:00403566 loc_403566:                             ; CODE XREF: sub_403480+2F↑j
.text:00403566                                         ; sub_403480+104↓j
.text:00403566                 movzx   eax, byte ptr [esi]
.text:00403569                 xor     edx, edx
.text:0040356B                 cmp     al, 20h ; ' '
.text:0040356D                 jz      loc_403640
.text:00403573                 cmp     al, 9
.text:00403575                 jz      loc_403640
.text:0040357B
.text:0040357B loc_40357B:                             ; CODE XREF: sub_403480+1C5↓j
.text:0040357B                 test    edx, edx
.text:0040357D                 jz      short loc_403588
.text:0040357F                 inc     esi
.text:00403580                 cmp     esi, [esp+2Ch+var_14]
.text:00403584                 jnz     short loc_403566
.text:00403586                 jmp     short loc_40353D
.text:00403588 ; ---------------------------------------------------------------------------
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: sub_403480+FD↑j
.text:00403588                 mov     ecx, [edi+14h]
.text:0040358B                 nop
.text:0040358C                 lea     esi, [esi+0]
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_403480+17A↓j
.text:00403590                 lea     ebx, [esi+1]
.text:00403593
.text:00403593 loc_403593:                             ; CODE XREF: sub_403480+133↓j
.text:00403593                 cmp     ebx, [esp+2Ch+var_14]
.text:00403597                 jz      short loc_4035B5
.text:00403599                 movzx   eax, byte ptr [ebx]
.text:0040359C                 xor     edx, edx
.text:0040359E                 cmp     al, 20h ; ' '
.text:004035A0                 jz      loc_403630
.text:004035A6                 cmp     al, 9
.text:004035A8                 jz      loc_403630
.text:004035AE
.text:004035AE loc_4035AE:                             ; CODE XREF: sub_403480+1B5↓j
.text:004035AE                 test    edx, edx
.text:004035B0                 jnz     short loc_4035B5
.text:004035B2                 inc     ebx
.text:004035B3                 jmp     short loc_403593
.text:004035B5 ; ---------------------------------------------------------------------------
.text:004035B5
.text:004035B5 loc_4035B5:                             ; CODE XREF: sub_403480+117↑j
.text:004035B5                                         ; sub_403480+130↑j
.text:004035B5                 mov     ebp, ebx
.text:004035B7                 mov     edx, [edi+0Ch]
.text:004035BA                 sub     ebp, esi
.text:004035BC                 cmp     edx, [edi+10h]
.text:004035BF                 jnb     short loc_403608
.text:004035C1
.text:004035C1 loc_4035C1:                             ; CODE XREF: sub_403480+1A7↓j
.text:004035C1                 mov     [ecx+edx*8+4], ebp
.text:004035C5                 inc     dword ptr [edi+0Ch]
.text:004035C8                 cmp     ebx, [esp+2Ch+var_14]
.text:004035CC                 mov     [ecx+edx*8], esi
.text:004035CF                 jz      loc_40353D
.text:004035D5                 lea     esi, [ebx+1]
.text:004035D8
.text:004035D8 loc_4035D8:                             ; CODE XREF: sub_403480+174↓j
.text:004035D8                 cmp     esi, [esp+2Ch+var_14]
.text:004035DC                 jz      loc_403525
.text:004035E2                 movzx   eax, byte ptr [esi]
.text:004035E5                 xor     edx, edx
.text:004035E7                 cmp     al, 20h ; ' '
.text:004035E9                 jz      short loc_403601
.text:004035EB                 cmp     al, 9
.text:004035ED                 jz      short loc_403601
.text:004035EF
.text:004035EF loc_4035EF:                             ; CODE XREF: sub_403480+186↓j
.text:004035EF                 test    edx, edx
.text:004035F1                 jz      short loc_4035F6
.text:004035F3                 inc     esi
.text:004035F4                 jmp     short loc_4035D8
.text:004035F6 ; ---------------------------------------------------------------------------
.text:004035F6
.text:004035F6 loc_4035F6:                             ; CODE XREF: sub_403480+171↑j
.text:004035F6                 cmp     esi, [esp+2Ch+var_14]
.text:004035FA                 jnz     short loc_403590
.text:004035FC                 jmp     loc_403525
.text:00403601 ; ---------------------------------------------------------------------------
.text:00403601
.text:00403601 loc_403601:                             ; CODE XREF: sub_403480+169↑j
.text:00403601                                         ; sub_403480+16D↑j
.text:00403601                 mov     edx, 1
.text:00403606                 jmp     short loc_4035EF
.text:00403608 ; ---------------------------------------------------------------------------
.text:00403608
.text:00403608 loc_403608:                             ; CODE XREF: sub_403480+13F↑j
.text:00403608                 mov     [esp+2Ch+Buf], ecx ; void *
.text:0040360B                 lea     edx, [edi+10h]
.text:0040360E                 mov     [esp+2Ch+Val], edx ; int
.text:00403612                 mov     [esp+2Ch+MaxCount], 8 ; int
.text:0040361A                 call    sub_406920
.text:0040361F                 mov     [edi+14h], eax
.text:00403622                 mov     edx, [edi+0Ch]
.text:00403625                 mov     ecx, eax
.text:00403627                 jmp     short loc_4035C1
.text:00403627 ; ---------------------------------------------------------------------------
.text:00403629                 align 10h
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403480+120↑j
.text:00403630                                         ; sub_403480+128↑j
.text:00403630                 mov     edx, 1
.text:00403635                 jmp     loc_4035AE
.text:00403635 ; ---------------------------------------------------------------------------
.text:0040363A                 align 10h
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_403480+ED↑j
.text:00403640                                         ; sub_403480+F5↑j
.text:00403640                 mov     edx, 1
.text:00403645                 jmp     loc_40357B
.text:00403645 sub_403480      endp
.text:00403645
.text:00403645 ; ---------------------------------------------------------------------------
.text:0040364A                 align 10h
.text:00403650
.text:00403650 ; =============== S U B R O U T I N E =======================================
.text:00403650
.text:00403650
.text:00403650 sub_403650      proc near               ; CODE XREF: sub_402850+13E↑p
.text:00403650                                         ; sub_402850+253↑p ...
.text:00403650
.text:00403650 var_2C          = dword ptr -2Ch
.text:00403650 var_28          = dword ptr -28h
.text:00403650 var_24          = dword ptr -24h
.text:00403650 var_20          = byte ptr -20h
.text:00403650 var_18          = dword ptr -18h
.text:00403650 var_14          = dword ptr -14h
.text:00403650 var_10          = dword ptr -10h
.text:00403650 var_C           = dword ptr -0Ch
.text:00403650 var_8           = dword ptr -8
.text:00403650 var_4           = dword ptr -4
.text:00403650 arg_0           = dword ptr  4
.text:00403650 arg_4           = dword ptr  8
.text:00403650
.text:00403650                 sub     esp, 2Ch
.text:00403653                 mov     eax, [esp+2Ch+arg_0]
.text:00403657                 mov     [esp+2Ch+var_10], ebx
.text:0040365B                 mov     edx, ds:dword_40B060
.text:00403661                 mov     [esp+2Ch+var_C], esi
.text:00403665                 mov     ecx, [esp+2Ch+arg_4]
.text:00403669                 mov     [esp+2Ch+var_8], edi
.text:0040366D                 mov     [esp+2Ch+var_4], ebp
.text:00403671                 cmp     edx, [eax+0Ch]
.text:00403674                 jnb     loc_403770
.text:0040367A                 mov     esi, [eax+14h]
.text:0040367D                 mov     edi, [esi+edx*8]
.text:00403680                 mov     ebp, [esi+edx*8+4]
.text:00403684                 mov     [esp+2Ch+var_14], edi
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: sub_403650+12A↓j
.text:00403688                 mov     edx, ds:dword_40B070
.text:0040368E                 cmp     edx, [ecx+0Ch]
.text:00403691                 jnb     loc_403760
.text:00403697                 mov     esi, [ecx+14h]
.text:0040369A                 mov     eax, [esi+edx*8]
.text:0040369D                 mov     ebx, [esi+edx*8+4]
.text:004036A1                 mov     [esp+2Ch+var_18], eax
.text:004036A5
.text:004036A5 loc_4036A5:                             ; CODE XREF: sub_403650+11A↓j
.text:004036A5                 test    ebp, ebp
.text:004036A7                 jnz     short loc_4036C5
.text:004036A9                 xor     eax, eax
.text:004036AB                 test    ebx, ebx
.text:004036AD                 setz    al
.text:004036B0                 dec     eax
.text:004036B1
.text:004036B1 loc_4036B1:                             ; CODE XREF: sub_403650+7C↓j
.text:004036B1                                         ; sub_403650+A9↓j ...
.text:004036B1                 mov     ebx, [esp+2Ch+var_10]
.text:004036B5                 mov     esi, [esp+2Ch+var_C]
.text:004036B9                 mov     edi, [esp+2Ch+var_8]
.text:004036BD                 mov     ebp, [esp+2Ch+var_4]
.text:004036C1                 add     esp, 2Ch
.text:004036C4                 retn
.text:004036C5 ; ---------------------------------------------------------------------------
.text:004036C5
.text:004036C5 loc_4036C5:                             ; CODE XREF: sub_403650+57↑j
.text:004036C5                 test    ebx, ebx
.text:004036C7                 mov     eax, 1
.text:004036CC                 jz      short loc_4036B1
.text:004036CE                 cmp     ds:byte_40B0C0, 0
.text:004036D5                 jz      short loc_403710
.text:004036D7                 cmp     ebx, ebp
.text:004036D9                 mov     eax, ebx
.text:004036DB                 jbe     short loc_4036DF
.text:004036DD                 mov     eax, ebp
.text:004036DF
.text:004036DF loc_4036DF:                             ; CODE XREF: sub_403650+8B↑j
.text:004036DF                 mov     [esp+2Ch+var_24], eax
.text:004036E3                 mov     ecx, [esp+2Ch+var_18]
.text:004036E7                 mov     edx, [esp+2Ch+var_14]
.text:004036EB                 mov     [esp+2Ch+var_28], ecx
.text:004036EF                 mov     [esp+2Ch+var_2C], edx
.text:004036F2                 call    sub_406CB0
.text:004036F7
.text:004036F7 loc_4036F7:                             ; CODE XREF: sub_403650+EB↓j
.text:004036F7                 test    eax, eax
.text:004036F9                 jnz     short loc_4036B1
.text:004036FB                 cmp     ebp, ebx
.text:004036FD                 mov     eax, 0FFFFFFFFh
.text:00403702                 jb      short loc_4036B1
.text:00403704                 xor     eax, eax
.text:00403706                 cmp     ebp, ebx
.text:00403708                 setnz   al
.text:0040370B                 jmp     short loc_4036B1
.text:0040370B ; ---------------------------------------------------------------------------
.text:0040370D                 align 10h
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_403650+85↑j
.text:00403710                 cmp     ds:byte_40B000, 0
.text:00403717                 jnz     short loc_40373D
.text:00403719                 cmp     ebx, ebp
.text:0040371B                 mov     eax, ebx
.text:0040371D                 jbe     short loc_403721
.text:0040371F                 mov     eax, ebp
.text:00403721
.text:00403721 loc_403721:                             ; CODE XREF: sub_403650+CD↑j
.text:00403721                 cld
.text:00403722                 mov     esi, [esp+2Ch+var_14]
.text:00403726                 mov     ecx, eax
.text:00403728                 mov     edi, [esp+2Ch+var_18]
.text:0040372C                 cmp     eax, eax
.text:0040372E                 repe cmpsb
.text:00403730                 setnbe  dl
.text:00403733                 setb    cl
.text:00403736                 sub     dl, cl
.text:00403738                 movsx   eax, dl
.text:0040373B                 jmp     short loc_4036F7
.text:0040373D ; ---------------------------------------------------------------------------
.text:0040373D
.text:0040373D loc_40373D:                             ; CODE XREF: sub_403650+C7↑j
.text:0040373D                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403741                 mov     edi, [esp+2Ch+var_18]
.text:00403745                 mov     ebx, [esp+2Ch+var_14]
.text:00403749                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040374D                 mov     [esp+2Ch+var_24], edi ; char *
.text:00403751                 mov     [esp+2Ch+var_2C], ebx ; char *
.text:00403754                 call    sub_406B80
.text:00403759                 jmp     loc_4036B1
.text:00403759 ; ---------------------------------------------------------------------------
.text:0040375E                 align 10h
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_403650+41↑j
.text:00403760                 mov     [esp+2Ch+var_18], 0
.text:00403768                 xor     ebx, ebx
.text:0040376A                 jmp     loc_4036A5
.text:0040376A ; ---------------------------------------------------------------------------
.text:0040376F                 align 10h
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403650+24↑j
.text:00403770                 mov     [esp+2Ch+var_14], 0
.text:00403778                 xor     ebp, ebp
.text:0040377A                 jmp     loc_403688
.text:0040377A sub_403650      endp
.text:0040377A
.text:0040377A ; ---------------------------------------------------------------------------
.text:0040377F                 align 10h
.text:00403780
.text:00403780 ; =============== S U B R O U T I N E =======================================
.text:00403780
.text:00403780
.text:00403780 ; int __cdecl sub_403780(int, FILE *)
.text:00403780 sub_403780      proc near               ; CODE XREF: sub_402850+1D1↑p
.text:00403780                                         ; sub_402850+337↑p ...
.text:00403780
.text:00403780 Buffer          = dword ptr -2Ch
.text:00403780 File            = dword ptr -28h
.text:00403780 ElementCount    = dword ptr -24h
.text:00403780 Stream          = dword ptr -20h
.text:00403780 var_11          = byte ptr -11h
.text:00403780 arg_0           = dword ptr  4
.text:00403780 arg_4           = dword ptr  8
.text:00403780
.text:00403780                 push    ebp
.text:00403781                 push    edi
.text:00403782                 push    esi
.text:00403783                 push    ebx
.text:00403784                 sub     esp, 1Ch
.text:00403787                 mov     edi, [esp+2Ch+arg_0]
.text:0040378B                 movzx   edx, ds:byte_40B090
.text:00403792                 mov     ebp, [esp+2Ch+arg_4]
.text:00403796                 test    dl, dl
.text:00403798                 mov     [esp+2Ch+var_11], dl
.text:0040379C                 jnz     short loc_4037A3
.text:0040379E                 mov     [esp+2Ch+var_11], 20h ; ' '
.text:004037A3
.text:004037A3 loc_4037A3:                             ; CODE XREF: sub_403780+1C↑j
.text:004037A3                 mov     eax, ds:dword_40B088
.text:004037A8                 test    eax, eax
.text:004037AA                 jz      loc_403907
.text:004037B0                 mov     esi, eax
.text:004037B2                 lea     esi, [esi+0]
.text:004037B9                 lea     edi, [edi+0]
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_403780+AB↓j
.text:004037C0                                         ; sub_403780+C7↓j
.text:004037C0                 mov     eax, [esi]
.text:004037C2                 test    eax, eax
.text:004037C4                 jnz     loc_4038F8
.text:004037CA                 cmp     edi, offset stru_40B0A0
.text:004037D0                 jz      loc_4038EB
.text:004037D6                 mov     edx, ds:dword_40B060
.text:004037DC                 mov     ecx, edi
.text:004037DE
.text:004037DE loc_4037DE:                             ; CODE XREF: sub_403780+173↓j
.text:004037DE                                         ; sub_403780+182↓j
.text:004037DE                 cmp     edx, [ecx+0Ch]
.text:004037E1                 jnb     short loc_4037F2
.text:004037E3                 mov     eax, [ecx+14h]
.text:004037E6                 mov     ebx, [eax+edx*8+4]
.text:004037EA                 test    ebx, ebx
.text:004037EC                 jnz     loc_4038C0
.text:004037F2
.text:004037F2 loc_4037F2:                             ; CODE XREF: sub_403780+61↑j
.text:004037F2                 mov     edx, ds:Buffer
.text:004037F8                 test    edx, edx
.text:004037FA                 jnz     loc_4038A0
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_403780+135↓j
.text:00403800                                         ; sub_403780+166↓j
.text:00403800                 mov     esi, [esi+8]
.text:00403803                 test    esi, esi
.text:00403805                 jz      short loc_403850
.text:00403807                 mov     edx, ds:_iob
.text:0040380D                 mov     ebx, [edx+24h]
.text:00403810                 dec     ebx
.text:00403811                 mov     [edx+24h], ebx
.text:00403814                 test    ebx, ebx
.text:00403816                 js      short loc_40382D
.text:00403818                 movzx   edx, [esp+2Ch+var_11]
.text:0040381D                 mov     ebx, ds:_iob
.text:00403823                 mov     eax, [ebx+20h]
.text:00403826                 mov     [eax], dl
.text:00403828                 inc     dword ptr [ebx+20h]
.text:0040382B                 jmp     short loc_4037C0
.text:0040382D ; ---------------------------------------------------------------------------
.text:0040382D
.text:0040382D loc_40382D:                             ; CODE XREF: sub_403780+96↑j
.text:0040382D                 movsx   ecx, [esp+2Ch+var_11]
.text:00403832                 mov     ebx, ds:_iob
.text:00403838                 add     ebx, 20h ; ' '
.text:0040383B                 mov     [esp+2Ch+File], ebx ; File
.text:0040383F                 mov     [esp+2Ch+Buffer], ecx ; Ch
.text:00403842                 call    _flsbuf
.text:00403847                 jmp     loc_4037C0
.text:00403847 ; ---------------------------------------------------------------------------
.text:0040384C                 align 10h
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403780+85↑j
.text:00403850                                         ; sub_403780+2F6↓j ...
.text:00403850                 mov     ebx, ds:_iob
.text:00403856                 mov     ebp, [ebx+24h]
.text:00403859                 dec     ebp
.text:0040385A                 mov     [ebx+24h], ebp
.text:0040385D                 test    ebp, ebp
.text:0040385F                 js      short loc_403878
.text:00403861                 mov     ecx, ds:_iob
.text:00403867                 mov     eax, [ecx+20h]
.text:0040386A                 mov     byte ptr [eax], 0Ah
.text:0040386D                 inc     dword ptr [ecx+20h]
.text:00403870                 add     esp, 1Ch
.text:00403873                 pop     ebx
.text:00403874                 pop     esi
.text:00403875                 pop     edi
.text:00403876                 pop     ebp
.text:00403877                 retn
.text:00403878 ; ---------------------------------------------------------------------------
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_403780+DF↑j
.text:00403878                 mov     [esp+2Ch+arg_0], 0Ah ; Ch
.text:00403880                 mov     edx, ds:_iob
.text:00403886                 add     edx, 20h ; ' '
.text:00403889                 mov     [esp+2Ch+arg_4], edx ; File
.text:0040388D                 add     esp, 1Ch
.text:00403890                 pop     ebx
.text:00403891                 pop     esi
.text:00403892                 pop     edi
.text:00403893                 pop     ebp
.text:00403894                 jmp     _flsbuf
.text:00403894 ; ---------------------------------------------------------------------------
.text:00403899                 align 10h
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403780+7A↑j
.text:004038A0                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:004038A3                 mov     ecx, ds:_iob
.text:004038A9                 add     ecx, 20h ; ' '
.text:004038AC                 mov     [esp+2Ch+File], ecx ; Stream
.text:004038B0                 call    fputs
.text:004038B5                 jmp     loc_403800
.text:004038B5 ; ---------------------------------------------------------------------------
.text:004038BA                 align 10h
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_403780+6C↑j
.text:004038C0                 mov     [esp+2Ch+ElementCount], ebx ; ElementCount
.text:004038C4                 mov     eax, ds:_iob
.text:004038C9                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:004038D1                 add     eax, 20h ; ' '
.text:004038D4                 mov     [esp+2Ch+Stream], eax ; Stream
.text:004038D8                 mov     ebx, [ecx+14h]
.text:004038DB                 mov     ecx, [ebx+edx*8]
.text:004038DE                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:004038E1                 call    fwrite
.text:004038E6                 jmp     loc_403800
.text:004038EB ; ---------------------------------------------------------------------------
.text:004038EB
.text:004038EB loc_4038EB:                             ; CODE XREF: sub_403780+50↑j
.text:004038EB                 mov     edx, ds:dword_40B070
.text:004038F1                 mov     ecx, ebp
.text:004038F3                 jmp     loc_4037DE
.text:004038F8 ; ---------------------------------------------------------------------------
.text:004038F8
.text:004038F8 loc_4038F8:                             ; CODE XREF: sub_403780+44↑j
.text:004038F8                 dec     eax
.text:004038F9                 mov     ecx, edi
.text:004038FB                 jz      short loc_4038FF
.text:004038FD                 mov     ecx, ebp
.text:004038FF
.text:004038FF loc_4038FF:                             ; CODE XREF: sub_403780+17B↑j
.text:004038FF                 mov     edx, [esi+4]
.text:00403902                 jmp     loc_4037DE
.text:00403907 ; ---------------------------------------------------------------------------
.text:00403907
.text:00403907 loc_403907:                             ; CODE XREF: sub_403780+2A↑j
.text:00403907                 cmp     edi, offset stru_40B0A0
.text:0040390D                 jz      loc_403CAF
.text:00403913
.text:00403913 loc_403913:                             ; CODE XREF: sub_403780+536↓j
.text:00403913                 mov     ecx, ds:dword_40B060
.text:00403919                 mov     edx, [edi+0Ch]
.text:0040391C                 cmp     ecx, edx
.text:0040391E                 jnb     short loc_40392F
.text:00403920                 mov     esi, [edi+14h]
.text:00403923                 mov     ebx, [esi+ecx*8+4]
.text:00403927                 test    ebx, ebx
.text:00403929                 jnz     loc_403C86
.text:0040392F
.text:0040392F loc_40392F:                             ; CODE XREF: sub_403780+19E↑j
.text:0040392F                 mov     ebx, ds:Buffer
.text:00403935                 test    ebx, ebx
.text:00403937                 jnz     loc_403C63
.text:0040393D
.text:0040393D loc_40393D:                             ; CODE XREF: sub_403780+501↓j
.text:0040393D                 xor     ebx, ebx
.text:0040393F                 cmp     ebx, ecx
.text:00403941                 jnb     short loc_4039A2
.text:00403943                 cmp     ebx, edx
.text:00403945                 jnb     short loc_4039A2
.text:00403947
.text:00403947 loc_403947:                             ; CODE XREF: sub_403780+220↓j
.text:00403947                 mov     edx, ds:_iob
.text:0040394D                 mov     esi, [edx+24h]
.text:00403950                 dec     esi
.text:00403951                 mov     [edx+24h], esi
.text:00403954                 test    esi, esi
.text:00403956                 js      loc_403C44
.text:0040395C                 movzx   edx, [esp+2Ch+var_11]
.text:00403961                 mov     esi, ds:_iob
.text:00403967                 mov     eax, [esi+20h]
.text:0040396A                 mov     [eax], dl
.text:0040396C                 inc     dword ptr [esi+20h]
.text:0040396F
.text:0040396F loc_40396F:                             ; CODE XREF: sub_403780+4DE↓j
.text:0040396F                 mov     edx, [edi+0Ch]
.text:00403972                 cmp     ebx, edx
.text:00403974                 jnb     short loc_403985
.text:00403976                 mov     esi, [edi+14h]
.text:00403979                 mov     ecx, [esi+ebx*8+4]
.text:0040397D                 test    ecx, ecx
.text:0040397F                 jnz     loc_403C1B
.text:00403985
.text:00403985 loc_403985:                             ; CODE XREF: sub_403780+1F4↑j
.text:00403985                 mov     ecx, ds:Buffer
.text:0040398B                 test    ecx, ecx
.text:0040398D                 jnz     loc_403BFE
.text:00403993
.text:00403993 loc_403993:                             ; CODE XREF: sub_403780+496↓j
.text:00403993                 mov     ecx, ds:dword_40B060
.text:00403999                 inc     ebx
.text:0040399A                 cmp     ebx, ecx
.text:0040399C                 jnb     short loc_4039A2
.text:0040399E                 cmp     ebx, edx
.text:004039A0                 jb      short loc_403947
.text:004039A2
.text:004039A2 loc_4039A2:                             ; CODE XREF: sub_403780+1C1↑j
.text:004039A2                                         ; sub_403780+1C5↑j ...
.text:004039A2                 lea     ebx, [ecx+1]
.text:004039A5                 cmp     ebx, edx
.text:004039A7                 jnb     short loc_403A01
.text:004039A9                 lea     esi, [esi+0]
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403780+27F↓j
.text:004039B0                 mov     esi, ds:_iob
.text:004039B6                 mov     ecx, [esi+24h]
.text:004039B9                 dec     ecx
.text:004039BA                 mov     [esi+24h], ecx
.text:004039BD                 test    ecx, ecx
.text:004039BF                 js      loc_403BDF
.text:004039C5                 movzx   edx, [esp+2Ch+var_11]
.text:004039CA                 mov     esi, ds:_iob
.text:004039D0                 mov     eax, [esi+20h]
.text:004039D3                 mov     [eax], dl
.text:004039D5                 inc     dword ptr [esi+20h]
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_403780+479↓j
.text:004039D8                 mov     edx, [edi+0Ch]
.text:004039DB                 cmp     ebx, edx
.text:004039DD                 jnb     short loc_4039EE
.text:004039DF                 mov     esi, [edi+14h]
.text:004039E2                 mov     ecx, [esi+ebx*8+4]
.text:004039E6                 test    ecx, ecx
.text:004039E8                 jnz     loc_403BB6
.text:004039EE
.text:004039EE loc_4039EE:                             ; CODE XREF: sub_403780+25D↑j
.text:004039EE                 mov     ecx, ds:Buffer
.text:004039F4                 test    ecx, ecx
.text:004039F6                 jnz     loc_403B99
.text:004039FC
.text:004039FC loc_4039FC:                             ; CODE XREF: sub_403780+431↓j
.text:004039FC                 inc     ebx
.text:004039FD                 cmp     ebx, edx
.text:004039FF                 jb      short loc_4039B0
.text:00403A01
.text:00403A01 loc_403A01:                             ; CODE XREF: sub_403780+227↑j
.text:00403A01                 mov     eax, ds:dword_40B070
.text:00403A06                 xor     ebx, ebx
.text:00403A08                 cmp     ebx, eax
.text:00403A0A                 jnb     loc_403B91
.text:00403A10                 mov     edx, [ebp+0Ch]
.text:00403A13                 cmp     ebx, edx
.text:00403A15                 jnb     short loc_403A71
.text:00403A17
.text:00403A17 loc_403A17:                             ; CODE XREF: sub_403780+2EF↓j
.text:00403A17                 mov     ecx, ds:_iob
.text:00403A1D                 mov     edi, [ecx+24h]
.text:00403A20                 dec     edi
.text:00403A21                 mov     [ecx+24h], edi
.text:00403A24                 test    edi, edi
.text:00403A26                 js      loc_403B72
.text:00403A2C                 movzx   edx, [esp+2Ch+var_11]
.text:00403A31                 mov     esi, ds:_iob
.text:00403A37                 mov     eax, [esi+20h]
.text:00403A3A                 mov     [eax], dl
.text:00403A3C                 inc     dword ptr [esi+20h]
.text:00403A3F
.text:00403A3F loc_403A3F:                             ; CODE XREF: sub_403780+40C↓j
.text:00403A3F                 mov     edx, [ebp+0Ch]
.text:00403A42                 cmp     ebx, edx
.text:00403A44                 jnb     short loc_403A55
.text:00403A46                 mov     esi, [ebp+14h]
.text:00403A49                 mov     ecx, [esi+ebx*8+4]
.text:00403A4D                 test    ecx, ecx
.text:00403A4F                 jnz     loc_403B49
.text:00403A55
.text:00403A55 loc_403A55:                             ; CODE XREF: sub_403780+2C4↑j
.text:00403A55                 mov     ecx, ds:Buffer
.text:00403A5B                 test    ecx, ecx
.text:00403A5D                 jnz     loc_403B2C
.text:00403A63
.text:00403A63 loc_403A63:                             ; CODE XREF: sub_403780+3C4↓j
.text:00403A63                 mov     eax, ds:dword_40B070
.text:00403A68                 inc     ebx
.text:00403A69                 cmp     ebx, eax
.text:00403A6B                 jnb     short loc_403A71
.text:00403A6D                 cmp     ebx, edx
.text:00403A6F                 jb      short loc_403A17
.text:00403A71
.text:00403A71 loc_403A71:                             ; CODE XREF: sub_403780+295↑j
.text:00403A71                                         ; sub_403780+2EB↑j ...
.text:00403A71                 lea     ebx, [eax+1]
.text:00403A74                 cmp     ebx, edx
.text:00403A76                 jnb     loc_403850
.text:00403A7C                 lea     esi, [esi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403780+343↓j
.text:00403A80                 mov     edi, ds:_iob
.text:00403A86                 mov     ecx, [edi+24h]
.text:00403A89                 dec     ecx
.text:00403A8A                 mov     [edi+24h], ecx
.text:00403A8D                 test    ecx, ecx
.text:00403A8F                 js      short loc_403B0D
.text:00403A91                 movzx   edx, [esp+2Ch+var_11]
.text:00403A96                 mov     esi, ds:_iob
.text:00403A9C                 mov     eax, [esi+20h]
.text:00403A9F                 mov     [eax], dl
.text:00403AA1                 inc     dword ptr [esi+20h]
.text:00403AA4
.text:00403AA4 loc_403AA4:                             ; CODE XREF: sub_403780+3A7↓j
.text:00403AA4                 mov     edx, [ebp+0Ch]
.text:00403AA7                 cmp     ebx, edx
.text:00403AA9                 jnb     short loc_403AB6
.text:00403AAB                 mov     esi, [ebp+14h]
.text:00403AAE                 mov     ecx, [esi+ebx*8+4]
.text:00403AB2                 test    ecx, ecx
.text:00403AB4                 jnz     short loc_403AE4
.text:00403AB6
.text:00403AB6 loc_403AB6:                             ; CODE XREF: sub_403780+329↑j
.text:00403AB6                 mov     ecx, ds:Buffer
.text:00403ABC                 test    ecx, ecx
.text:00403ABE                 jnz     short loc_403ACA
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403780+362↓j
.text:00403AC0                 inc     ebx
.text:00403AC1                 cmp     ebx, edx
.text:00403AC3                 jb      short loc_403A80
.text:00403AC5                 jmp     loc_403850
.text:00403ACA ; ---------------------------------------------------------------------------
.text:00403ACA
.text:00403ACA loc_403ACA:                             ; CODE XREF: sub_403780+33E↑j
.text:00403ACA                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00403ACD                 mov     esi, ds:_iob
.text:00403AD3                 add     esi, 20h ; ' '
.text:00403AD6                 mov     [esp+2Ch+File], esi ; Stream
.text:00403ADA                 call    fputs
.text:00403ADF
.text:00403ADF loc_403ADF:                             ; CODE XREF: sub_403780+38B↓j
.text:00403ADF                 mov     edx, [ebp+0Ch]
.text:00403AE2                 jmp     short loc_403AC0
.text:00403AE4 ; ---------------------------------------------------------------------------
.text:00403AE4
.text:00403AE4 loc_403AE4:                             ; CODE XREF: sub_403780+334↑j
.text:00403AE4                 mov     [esp+2Ch+ElementCount], ecx ; ElementCount
.text:00403AE8                 mov     edi, ds:_iob
.text:00403AEE                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00403AF6                 add     edi, 20h ; ' '
.text:00403AF9                 mov     [esp+2Ch+Stream], edi ; Stream
.text:00403AFD                 mov     ecx, [ebp+14h]
.text:00403B00                 mov     edx, [ecx+ebx*8]
.text:00403B03                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00403B06                 call    fwrite
.text:00403B0B                 jmp     short loc_403ADF
.text:00403B0D ; ---------------------------------------------------------------------------
.text:00403B0D
.text:00403B0D loc_403B0D:                             ; CODE XREF: sub_403780+30F↑j
.text:00403B0D                 movsx   ecx, [esp+2Ch+var_11]
.text:00403B12                 mov     edi, ds:_iob
.text:00403B18                 add     edi, 20h ; ' '
.text:00403B1B                 mov     [esp+2Ch+File], edi ; File
.text:00403B1F                 mov     [esp+2Ch+Buffer], ecx ; Ch
.text:00403B22                 call    _flsbuf
.text:00403B27                 jmp     loc_403AA4
.text:00403B2C ; ---------------------------------------------------------------------------
.text:00403B2C
.text:00403B2C loc_403B2C:                             ; CODE XREF: sub_403780+2DD↑j
.text:00403B2C                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00403B2F                 mov     edx, ds:_iob
.text:00403B35                 add     edx, 20h ; ' '
.text:00403B38                 mov     [esp+2Ch+File], edx ; Stream
.text:00403B3C                 call    fputs
.text:00403B41
.text:00403B41 loc_403B41:                             ; CODE XREF: sub_403780+3F0↓j
.text:00403B41                 mov     edx, [ebp+0Ch]
.text:00403B44                 jmp     loc_403A63
.text:00403B49 ; ---------------------------------------------------------------------------
.text:00403B49
.text:00403B49 loc_403B49:                             ; CODE XREF: sub_403780+2CF↑j
.text:00403B49                 mov     [esp+2Ch+ElementCount], ecx ; ElementCount
.text:00403B4D                 mov     esi, ds:_iob
.text:00403B53                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00403B5B                 add     esi, 20h ; ' '
.text:00403B5E                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B62                 mov     edi, [ebp+14h]
.text:00403B65                 mov     edx, [edi+ebx*8]
.text:00403B68                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00403B6B                 call    fwrite
.text:00403B70                 jmp     short loc_403B41
.text:00403B72 ; ---------------------------------------------------------------------------
.text:00403B72
.text:00403B72 loc_403B72:                             ; CODE XREF: sub_403780+2A6↑j
.text:00403B72                 movsx   edi, [esp+2Ch+var_11]
.text:00403B77                 mov     ecx, ds:_iob
.text:00403B7D                 add     ecx, 20h ; ' '
.text:00403B80                 mov     [esp+2Ch+File], ecx ; File
.text:00403B84                 mov     [esp+2Ch+Buffer], edi ; Ch
.text:00403B87                 call    _flsbuf
.text:00403B8C                 jmp     loc_403A3F
.text:00403B91 ; ---------------------------------------------------------------------------
.text:00403B91
.text:00403B91 loc_403B91:                             ; CODE XREF: sub_403780+28A↑j
.text:00403B91                 mov     edx, [ebp+0Ch]
.text:00403B94                 jmp     loc_403A71
.text:00403B99 ; ---------------------------------------------------------------------------
.text:00403B99
.text:00403B99 loc_403B99:                             ; CODE XREF: sub_403780+276↑j
.text:00403B99                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00403B9C                 mov     edx, ds:_iob
.text:00403BA2                 add     edx, 20h ; ' '
.text:00403BA5                 mov     [esp+2Ch+File], edx ; Stream
.text:00403BA9                 call    fputs
.text:00403BAE
.text:00403BAE loc_403BAE:                             ; CODE XREF: sub_403780+45D↓j
.text:00403BAE                 mov     edx, [edi+0Ch]
.text:00403BB1                 jmp     loc_4039FC
.text:00403BB6 ; ---------------------------------------------------------------------------
.text:00403BB6
.text:00403BB6 loc_403BB6:                             ; CODE XREF: sub_403780+268↑j
.text:00403BB6                 mov     [esp+2Ch+ElementCount], ecx ; ElementCount
.text:00403BBA                 mov     esi, ds:_iob
.text:00403BC0                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00403BC8                 add     esi, 20h ; ' '
.text:00403BCB                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403BCF                 mov     ecx, [edi+14h]
.text:00403BD2                 mov     edx, [ecx+ebx*8]
.text:00403BD5                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00403BD8                 call    fwrite
.text:00403BDD                 jmp     short loc_403BAE
.text:00403BDF ; ---------------------------------------------------------------------------
.text:00403BDF
.text:00403BDF loc_403BDF:                             ; CODE XREF: sub_403780+23F↑j
.text:00403BDF                 movsx   ecx, [esp+2Ch+var_11]
.text:00403BE4                 mov     esi, ds:_iob
.text:00403BEA                 add     esi, 20h ; ' '
.text:00403BED                 mov     [esp+2Ch+File], esi ; File
.text:00403BF1                 mov     [esp+2Ch+Buffer], ecx ; Ch
.text:00403BF4                 call    _flsbuf
.text:00403BF9                 jmp     loc_4039D8
.text:00403BFE ; ---------------------------------------------------------------------------
.text:00403BFE
.text:00403BFE loc_403BFE:                             ; CODE XREF: sub_403780+20D↑j
.text:00403BFE                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00403C01                 mov     edx, ds:_iob
.text:00403C07                 add     edx, 20h ; ' '
.text:00403C0A                 mov     [esp+2Ch+File], edx ; Stream
.text:00403C0E                 call    fputs
.text:00403C13
.text:00403C13 loc_403C13:                             ; CODE XREF: sub_403780+4C2↓j
.text:00403C13                 mov     edx, [edi+0Ch]
.text:00403C16                 jmp     loc_403993
.text:00403C1B ; ---------------------------------------------------------------------------
.text:00403C1B
.text:00403C1B loc_403C1B:                             ; CODE XREF: sub_403780+1FF↑j
.text:00403C1B                 mov     [esp+2Ch+ElementCount], ecx ; ElementCount
.text:00403C1F                 mov     esi, ds:_iob
.text:00403C25                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00403C2D                 add     esi, 20h ; ' '
.text:00403C30                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403C34                 mov     ecx, [edi+14h]
.text:00403C37                 mov     edx, [ecx+ebx*8]
.text:00403C3A                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00403C3D                 call    fwrite
.text:00403C42                 jmp     short loc_403C13
.text:00403C44 ; ---------------------------------------------------------------------------
.text:00403C44
.text:00403C44 loc_403C44:                             ; CODE XREF: sub_403780+1D6↑j
.text:00403C44                 movsx   ecx, [esp+2Ch+var_11]
.text:00403C49                 mov     esi, ds:_iob
.text:00403C4F                 add     esi, 20h ; ' '
.text:00403C52                 mov     [esp+2Ch+File], esi ; File
.text:00403C56                 mov     [esp+2Ch+Buffer], ecx ; Ch
.text:00403C59                 call    _flsbuf
.text:00403C5E                 jmp     loc_40396F
.text:00403C63 ; ---------------------------------------------------------------------------
.text:00403C63
.text:00403C63 loc_403C63:                             ; CODE XREF: sub_403780+1B7↑j
.text:00403C63                 mov     [esp+2Ch+Buffer], ebx ; Buffer
.text:00403C66                 mov     ecx, ds:_iob
.text:00403C6C                 add     ecx, 20h ; ' '
.text:00403C6F                 mov     [esp+2Ch+File], ecx ; Stream
.text:00403C73                 call    fputs
.text:00403C78
.text:00403C78 loc_403C78:                             ; CODE XREF: sub_403780+52D↓j
.text:00403C78                 mov     ecx, ds:dword_40B060
.text:00403C7E                 mov     edx, [edi+0Ch]
.text:00403C81                 jmp     loc_40393D
.text:00403C86 ; ---------------------------------------------------------------------------
.text:00403C86
.text:00403C86 loc_403C86:                             ; CODE XREF: sub_403780+1A9↑j
.text:00403C86                 mov     [esp+2Ch+ElementCount], ebx ; ElementCount
.text:00403C8A                 mov     esi, ds:_iob
.text:00403C90                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00403C98                 add     esi, 20h ; ' '
.text:00403C9B                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403C9F                 mov     ebx, [edi+14h]
.text:00403CA2                 mov     edx, [ebx+ecx*8]
.text:00403CA5                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00403CA8                 call    fwrite
.text:00403CAD                 jmp     short loc_403C78
.text:00403CAF ; ---------------------------------------------------------------------------
.text:00403CAF
.text:00403CAF loc_403CAF:                             ; CODE XREF: sub_403780+18D↑j
.text:00403CAF                 mov     edi, ebp
.text:00403CB1                 mov     ebp, offset stru_40B0A0
.text:00403CB6                 jmp     loc_403913
.text:00403CB6 sub_403780      endp
.text:00403CB6
.text:00403CB6 ; ---------------------------------------------------------------------------
.text:00403CBB                 align 10h
.text:00403CC0 dword_403CC0    dd 90002D2Dh, 7 dup(90909090h)
.text:00403CC0                                         ; DATA XREF: sub_403F10+E4↓o
.text:00403CE0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403CE0                                         ; DATA XREF: sub_403F10+2FC↓o
.text:00403D0D                 align 20h
.text:00403D20 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403D20                                         ; DATA XREF: sub_403F10:loc_404272↓o
.text:00403D4D                 align 20h
.text:00403D60 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00403D60                                         ; DATA XREF: sub_403F10:loc_404310↓o
.text:00403D60                                         ; sub_403F10:loc_4046D7↓o
.text:00403D86                 align 20h
.text:00403DA0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403DA0                                         ; DATA XREF: sub_403F10+48E↓o
.text:00403DC0 dword_403DC0    dd 90909000h, 7 dup(90909090h)
.text:00403DC0                                         ; DATA XREF: sub_403F10:loc_4043E1↓o
.text:00403DE0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403DE0                                         ; DATA XREF: sub_403F10:loc_4043FA↓o
.text:00403E00 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403E00                                         ; DATA XREF: sub_403F10:loc_4044DF↓o
.text:00403E00                                         ; sub_403F10:loc_40480C↓o
.text:00403E27                 align 20h
.text:00403E40 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403E40                                         ; DATA XREF: sub_403F10:loc_404653↓o
.text:00403E6E                 align 20h
.text:00403E80 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00403E80                                         ; DATA XREF: sub_403F10:loc_40473F↓o
.text:00403EA1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403EA1                                         ; DATA XREF: sub_403F10+93F↓o
.text:00403EBB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00403EBB                                         ; DATA XREF: sub_403F10:loc_404887↓o
.text:00403ED5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403ED5                                         ; DATA XREF: sub_403F10:loc_4048AE↓o
.text:00403EF3 ; const char VarName[]
.text:00403EF3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403F10:loc_404A60↓o
.text:00403F03                 align 10h
.text:00403F10
.text:00403F10 ; =============== S U B R O U T I N E =======================================
.text:00403F10
.text:00403F10
.text:00403F10 ; int __cdecl sub_403F10(int, int, char *Str, int, int, int, int, int)
.text:00403F10 sub_403F10      proc near               ; CODE XREF: sub_404AA0+5A↓p
.text:00403F10                                         ; .text:00404B8A↓p ...
.text:00403F10
.text:00403F10 Str1            = dword ptr -5Ch
.text:00403F10 Str2            = dword ptr -58h
.text:00403F10 MaxCount        = dword ptr -54h
.text:00403F10 var_50          = dword ptr -50h
.text:00403F10 var_4C          = dword ptr -4Ch
.text:00403F10 var_3C          = dword ptr -3Ch
.text:00403F10 var_38          = dword ptr -38h
.text:00403F10 var_34          = dword ptr -34h
.text:00403F10 var_30          = dword ptr -30h
.text:00403F10 var_2C          = dword ptr -2Ch
.text:00403F10 var_28          = dword ptr -28h
.text:00403F10 var_24          = dword ptr -24h
.text:00403F10 var_20          = dword ptr -20h
.text:00403F10 var_1C          = dword ptr -1Ch
.text:00403F10 var_18          = dword ptr -18h
.text:00403F10 var_14          = dword ptr -14h
.text:00403F10 arg_0           = dword ptr  4
.text:00403F10 arg_4           = dword ptr  8
.text:00403F10 Str             = dword ptr  0Ch
.text:00403F10 arg_C           = dword ptr  10h
.text:00403F10 arg_10          = dword ptr  14h
.text:00403F10 arg_14          = dword ptr  18h
.text:00403F10 arg_18          = dword ptr  1Ch
.text:00403F10 arg_1C          = dword ptr  20h
.text:00403F10
.text:00403F10                 push    ebp
.text:00403F11                 mov     eax, 0FFFFFFFFh
.text:00403F16                 push    edi
.text:00403F17                 push    esi
.text:00403F18                 push    ebx
.text:00403F19                 sub     esp, 4Ch
.text:00403F1C                 mov     esi, [esp+5Ch+Str]
.text:00403F20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403F24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403F27                 mov     ebx, [ebp+4]
.text:00403F2A                 setz    dl
.text:00403F2D                 movzx   ecx, dl
.text:00403F30                 dec     ecx
.text:00403F31                 and     ecx, ebx
.text:00403F33                 mov     [esp+5Ch+var_14], ecx
.text:00403F37                 mov     ecx, [esp+5Ch+arg_0]
.text:00403F3B                 test    ecx, ecx
.text:00403F3D                 jle     loc_404067
.text:00403F43                 mov     dword ptr [ebp+0Ch], 0
.text:00403F4A                 mov     ebx, [ebp+0]
.text:00403F4D                 test    ebx, ebx
.text:00403F4F                 jz      loc_404A80
.text:00403F55                 mov     edi, [ebp+10h]
.text:00403F58                 test    edi, edi
.text:00403F5A                 jnz     short loc_403FB3
.text:00403F5C                 lea     esi, [esi+0]
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: sub_403F10+B7C↓j
.text:00403F60                 mov     [ebp+24h], ebx
.text:00403F63                 mov     esi, [esp+5Ch+Str]
.text:00403F67                 mov     [ebp+20h], ebx
.text:00403F6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00403F6E                 xor     ebx, ebx
.text:00403F70                 mov     dword ptr [ebp+14h], 0
.text:00403F77                 test    ecx, ecx
.text:00403F79                 jz      loc_404A60
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403F10+B64↓j
.text:00403F7F                 mov     ebx, 1
.text:00403F84
.text:00403F84 loc_403F84:                             ; CODE XREF: sub_403F10+B5E↓j
.text:00403F84                 mov     [ebp+1Ch], ebx
.text:00403F87                 mov     ecx, [esp+5Ch+Str]
.text:00403F8B                 movzx   eax, byte ptr [ecx]
.text:00403F8E                 cmp     al, 2Dh ; '-'
.text:00403F90                 jz      loc_404A50
.text:00403F96                 cmp     al, 2Bh ; '+'
.text:00403F98                 jz      loc_404A39
.text:00403F9E                 xor     edx, edx
.text:00403FA0                 test    ebx, ebx
.text:00403FA2                 setz    dl
.text:00403FA5                 mov     [ebp+18h], edx
.text:00403FA8
.text:00403FA8 loc_403FA8:                             ; CODE XREF: sub_403F10+B35↓j
.text:00403FA8                 mov     [esp+5Ch+Str], esi
.text:00403FAC                 mov     dword ptr [ebp+10h], 1
.text:00403FB3
.text:00403FB3 loc_403FB3:                             ; CODE XREF: sub_403F10+4A↑j
.text:00403FB3                 mov     eax, [ebp+14h]
.text:00403FB6                 test    eax, eax
.text:00403FB8                 jz      short loc_403FC3
.text:00403FBA                 cmp     byte ptr [eax], 0
.text:00403FBD                 jnz     loc_4040A0
.text:00403FC3
.text:00403FC3 loc_403FC3:                             ; CODE XREF: sub_403F10+A8↑j
.text:00403FC3                 mov     ebx, [ebp+0]
.text:00403FC6                 cmp     [ebp+24h], ebx
.text:00403FC9                 jle     short loc_403FCE
.text:00403FCB                 mov     [ebp+24h], ebx
.text:00403FCE
.text:00403FCE loc_403FCE:                             ; CODE XREF: sub_403F10+B9↑j
.text:00403FCE                 cmp     [ebp+20h], ebx
.text:00403FD1                 jle     short loc_403FD6
.text:00403FD3                 mov     [ebp+20h], ebx
.text:00403FD6
.text:00403FD6 loc_403FD6:                             ; CODE XREF: sub_403F10+C1↑j
.text:00403FD6                 cmp     dword ptr [ebp+18h], 1
.text:00403FDA                 jz      loc_4049B0
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403F10+B13↓j
.text:00403FE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403FE4                 jz      loc_404994
.text:00403FEA                 cld
.text:00403FEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00403FEF                 mov     edx, 3
.text:00403FF4                 mov     edi, offset dword_403CC0
.text:00403FF9                 mov     esi, [ecx+ebx*4]
.text:00403FFC                 mov     ecx, edx
.text:00403FFE                 repe cmpsb
.text:00404000                 jnz     short loc_40403C
.text:00404002                 mov     edx, [ebp+24h]
.text:00404005                 lea     eax, [ebx+1]
.text:00404008                 cmp     [ebp+20h], edx
.text:0040400B                 mov     [ebp+0], eax
.text:0040400E                 jz      loc_4049A8
.text:00404014                 cmp     edx, eax
.text:00404016                 jz      short loc_404030
.text:00404018                 mov     [esp+5Ch+Str2], ebp
.text:0040401C                 mov     ebx, [esp+5Ch+arg_4]
.text:00404020                 mov     [esp+5Ch+Str1], ebx
.text:00404023                 call    sub_404BC0
.text:00404028                 nop
.text:00404029                 lea     esi, [esi+0]
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_403F10+106↑j
.text:00404030                                         ; sub_403F10+A9B↓j
.text:00404030                 mov     eax, [esp+5Ch+arg_0]
.text:00404034                 mov     ebx, eax
.text:00404036                 mov     [ebp+24h], eax
.text:00404039                 mov     [ebp+0], eax
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403F10+F0↑j
.text:0040403C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404040                 jz      loc_404994
.text:00404046                 mov     esi, [esp+5Ch+arg_4]
.text:0040404A                 mov     eax, [esi+ebx*4]
.text:0040404D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404050                 jz      short loc_404077
.text:00404052
.text:00404052 loc_404052:                             ; CODE XREF: sub_403F10+16D↓j
.text:00404052                 mov     edx, [ebp+18h]
.text:00404055                 test    edx, edx
.text:00404057                 jz      short loc_404070
.text:00404059                 mov     [ebp+0Ch], eax
.text:0040405C                 lea     edi, [ebx+1]
.text:0040405F                 mov     eax, 1
.text:00404064                 mov     [ebp+0], edi
.text:00404067
.text:00404067 loc_404067:                             ; CODE XREF: sub_403F10+2D↑j
.text:00404067                                         ; sub_403F10+165↓j ...
.text:00404067                 add     esp, 4Ch
.text:0040406A                 pop     ebx
.text:0040406B                 pop     esi
.text:0040406C                 pop     edi
.text:0040406D                 pop     ebp
.text:0040406E                 retn
.text:0040406E ; ---------------------------------------------------------------------------
.text:0040406F                 align 10h
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403F10+147↑j
.text:00404070                                         ; sub_403F10+A8A↓j ...
.text:00404070                 mov     eax, 0FFFFFFFFh
.text:00404075                 jmp     short loc_404067
.text:00404077 ; ---------------------------------------------------------------------------
.text:00404077
.text:00404077 loc_404077:                             ; CODE XREF: sub_403F10+140↑j
.text:00404077                 movzx   edx, byte ptr [eax+1]
.text:0040407B                 test    dl, dl
.text:0040407D                 jz      short loc_404052
.text:0040407F                 mov     ebx, [esp+5Ch+arg_C]
.text:00404083                 xor     ecx, ecx
.text:00404085                 test    ebx, ebx
.text:00404087                 jz      short loc_404092
.text:00404089                 cmp     dl, 2Dh ; '-'
.text:0040408C                 jz      loc_40498A
.text:00404092
.text:00404092 loc_404092:                             ; CODE XREF: sub_403F10+177↑j
.text:00404092                                         ; sub_403F10+A7F↓j
.text:00404092                 lea     esi, [ecx+eax+1]
.text:00404096                 mov     [ebp+14h], esi
.text:00404099                 lea     esi, [esi+0]
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_403F10+AD↑j
.text:004040A0                 mov     ecx, [esp+5Ch+arg_C]
.text:004040A4                 test    ecx, ecx
.text:004040A6                 jz      loc_404430
.text:004040AC                 mov     edx, [ebp+0]
.text:004040AF                 mov     edi, [esp+5Ch+arg_4]
.text:004040B3                 mov     eax, [edi+edx*4]
.text:004040B6                 movzx   edx, byte ptr [eax+1]
.text:004040BA                 cmp     dl, 2Dh ; '-'
.text:004040BD                 jz      short loc_4040D5
.text:004040BF                 mov     ebx, [esp+5Ch+arg_14]
.text:004040C3                 test    ebx, ebx
.text:004040C5                 jz      loc_404430
.text:004040CB                 cmp     byte ptr [eax+2], 0
.text:004040CF                 jz      loc_40496A
.text:004040D5
.text:004040D5 loc_4040D5:                             ; CODE XREF: sub_403F10+1AD↑j
.text:004040D5                                         ; sub_403F10+A75↓j
.text:004040D5                 mov     [esp+5Ch+var_18], 0
.text:004040DD                 mov     ecx, [ebp+14h]
.text:004040E0                 mov     [esp+5Ch+var_1C], 0
.text:004040E8                 mov     [esp+5Ch+var_20], 0
.text:004040F0                 mov     edi, ecx
.text:004040F2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004040FA                 movzx   eax, byte ptr [ecx]
.text:004040FD                 test    al, al
.text:004040FF                 jz      short loc_40411C
.text:00404101                 cmp     al, 3Dh ; '='
.text:00404103                 jz      short loc_40411C
.text:00404105                 lea     esi, [esi+0]
.text:00404109                 lea     edi, [edi+0]
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_403F10+20A↓j
.text:00404110                 inc     edi
.text:00404111                 movzx   eax, byte ptr [edi]
.text:00404114                 test    al, al
.text:00404116                 jz      short loc_40411C
.text:00404118                 cmp     al, 3Dh ; '='
.text:0040411A                 jnz     short loc_404110
.text:0040411C
.text:0040411C loc_40411C:                             ; CODE XREF: sub_403F10+1EF↑j
.text:0040411C                                         ; sub_403F10+1F3↑j ...
.text:0040411C                 mov     [esp+5Ch+var_28], 0
.text:00404124                 mov     esi, [esp+5Ch+arg_C]
.text:00404128                 mov     ebx, [esi]
.text:0040412A                 test    ebx, ebx
.text:0040412C                 mov     edx, ebx
.text:0040412E                 jz      loc_404350
.text:00404134                 lea     esi, [esi+0]
.text:0040413A                 lea     edi, [edi+0]
.text:00404140
.text:00404140 loc_404140:                             ; CODE XREF: sub_403F10+25E↓j
.text:00404140                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00404144                 mov     ebx, edi
.text:00404146                 sub     ebx, ecx
.text:00404148                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040414C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040414F                 call    strncmp
.text:00404154                 test    eax, eax
.text:00404156                 jz      loc_4048E6
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_403F10+A0F↓j
.text:0040415C                                         ; sub_403F10+A24↓j ...
.text:0040415C                 inc     [esp+5Ch+var_28]
.text:00404160                 add     esi, 10h
.text:00404163                 mov     ecx, [esi]
.text:00404165                 test    ecx, ecx
.text:00404167                 mov     edx, ecx
.text:00404169                 jz      short loc_404170
.text:0040416B                 mov     ecx, [ebp+14h]
.text:0040416E                 jmp     short loc_404140
.text:00404170 ; ---------------------------------------------------------------------------
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_403F10+259↑j
.text:00404170                                         ; sub_403F10+A55↓j
.text:00404170                 mov     esi, [esp+5Ch+var_20]
.text:00404174                 test    esi, esi
.text:00404176                 jz      short loc_404184
.text:00404178                 mov     edx, [esp+5Ch+var_1C]
.text:0040417C                 test    edx, edx
.text:0040417E                 jz      loc_404890
.text:00404184
.text:00404184 loc_404184:                             ; CODE XREF: sub_403F10+266↑j
.text:00404184                 mov     eax, [esp+5Ch+var_18]
.text:00404188                 test    eax, eax
.text:0040418A                 jz      loc_404350
.text:00404190                 mov     ecx, [ebp+0]
.text:00404193                 lea     eax, [ecx+1]
.text:00404196                 mov     [ebp+0], eax
.text:00404199                 cmp     byte ptr [edi], 0
.text:0040419C                 jz      loc_4042B0
.text:004041A2                 mov     ecx, [esp+5Ch+var_18]
.text:004041A6                 mov     esi, [ecx+4]
.text:004041A9                 test    esi, esi
.text:004041AB                 jz      short loc_4041F6
.text:004041AD                 lea     ebx, [edi+1]
.text:004041B0                 mov     [ebp+0Ch], ebx
.text:004041B3
.text:004041B3 loc_4041B3:                             ; CODE XREF: sub_403F10+3A8↓j
.text:004041B3                                         ; sub_403F10+3C4↓j
.text:004041B3                 mov     ebx, [ebp+14h]
.text:004041B6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004041B9                 call    strlen
.text:004041BE                 add     [ebp+14h], eax
.text:004041C1                 mov     esi, [esp+5Ch+arg_10]
.text:004041C5                 test    esi, esi
.text:004041C7                 jz      short loc_4041D3
.text:004041C9                 mov     ebp, [esp+5Ch+var_24]
.text:004041CD                 mov     ecx, [esp+5Ch+arg_10]
.text:004041D1                 mov     [ecx], ebp
.text:004041D3
.text:004041D3 loc_4041D3:                             ; CODE XREF: sub_403F10+2B7↑j
.text:004041D3                 mov     eax, [esp+5Ch+var_18]
.text:004041D7                 mov     ecx, [eax+8]
.text:004041DA                 test    ecx, ecx
.text:004041DC                 jnz     short loc_4041EA
.text:004041DE                 mov     ecx, [esp+5Ch+var_18]
.text:004041E2
.text:004041E2 loc_4041E2:                             ; CODE XREF: sub_403F10+723↓j
.text:004041E2                 mov     eax, [ecx+0Ch]
.text:004041E5                 jmp     loc_404067
.text:004041EA ; ---------------------------------------------------------------------------
.text:004041EA
.text:004041EA loc_4041EA:                             ; CODE XREF: sub_403F10+2CC↑j
.text:004041EA                                         ; sub_403F10+719↓j
.text:004041EA                 mov     esi, [eax+0Ch]
.text:004041ED                 xor     eax, eax
.text:004041EF                 mov     [ecx], esi
.text:004041F1                 jmp     loc_404067
.text:004041F6 ; ---------------------------------------------------------------------------
.text:004041F6
.text:004041F6 loc_4041F6:                             ; CODE XREF: sub_403F10+29B↑j
.text:004041F6                 mov     edi, [esp+5Ch+var_14]
.text:004041FA                 test    edi, edi
.text:004041FC                 jz      short loc_404250
.text:004041FE                 mov     esi, [esp+5Ch+arg_4]
.text:00404202                 mov     edx, [esi+eax*4-4]
.text:00404206                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040420A                 jz      short loc_404272
.text:0040420C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00404213                 call    ds:libintl_gettext
.text:00404219                 mov     edx, [esp+5Ch+var_18]
.text:0040421D                 mov     edi, [edx]
.text:0040421F                 mov     [esp+5Ch+var_4C], edi
.text:00404223                 mov     ebx, [ebp+0]
.text:00404226                 mov     edi, [esp+5Ch+arg_4]
.text:0040422A                 mov     ecx, [edi+ebx*4-4]
.text:0040422E                 movsx   esi, byte ptr [ecx]
.text:00404231                 mov     ecx, ds:_iob
.text:00404237                 add     ecx, 40h ; '@'
.text:0040423A                 mov     [esp+5Ch+var_50], esi
.text:0040423E                 mov     ebx, [edi]
.text:00404240                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404244                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404247                 mov     [esp+5Ch+MaxCount], ebx
.text:0040424B                 call    fprintf
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_403F10+2EC↑j
.text:00404250                                         ; sub_403F10+398↓j
.text:00404250                 mov     ecx, [ebp+14h]
.text:00404253                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404256                 call    strlen
.text:0040425B                 add     [ebp+14h], eax
.text:0040425E                 mov     eax, [esp+5Ch+var_18]
.text:00404262                 mov     esi, [eax+0Ch]
.text:00404265                 mov     [ebp+8], esi
.text:00404268
.text:00404268 loc_404268:                             ; CODE XREF: sub_403F10+4E5↓j
.text:00404268                                         ; sub_403F10+73E↓j ...
.text:00404268                 mov     eax, 3Fh ; '?'
.text:0040426D                 jmp     loc_404067
.text:00404272 ; ---------------------------------------------------------------------------
.text:00404272
.text:00404272 loc_404272:                             ; CODE XREF: sub_403F10+2FA↑j
.text:00404272                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00404279                 call    ds:libintl_gettext
.text:0040427F                 mov     edx, [esp+5Ch+var_18]
.text:00404283                 mov     edi, [esp+5Ch+arg_4]
.text:00404287                 mov     ecx, ds:_iob
.text:0040428D                 mov     esi, [edx]
.text:0040428F                 add     ecx, 40h ; '@'
.text:00404292                 mov     [esp+5Ch+var_50], esi
.text:00404296                 mov     ebx, [edi]
.text:00404298                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040429C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040429F                 mov     [esp+5Ch+MaxCount], ebx
.text:004042A3                 call    fprintf
.text:004042A8                 jmp     short loc_404250
.text:004042A8 ; ---------------------------------------------------------------------------
.text:004042AA                 align 10h
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_403F10+28C↑j
.text:004042B0                 mov     ebx, [esp+5Ch+var_18]
.text:004042B4                 cmp     dword ptr [ebx+4], 1
.text:004042B8                 jnz     loc_4041B3
.text:004042BE                 cmp     eax, [esp+5Ch+arg_0]
.text:004042C2                 jge     short loc_4042D9
.text:004042C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004042C8                 lea     edi, [ecx+2]
.text:004042CB                 mov     [ebp+0], edi
.text:004042CE                 mov     esi, [ebx+eax*4]
.text:004042D1                 mov     [ebp+0Ch], esi
.text:004042D4                 jmp     loc_4041B3
.text:004042D9 ; ---------------------------------------------------------------------------
.text:004042D9
.text:004042D9 loc_4042D9:                             ; CODE XREF: sub_403F10+3B2↑j
.text:004042D9                 mov     edx, [esp+5Ch+var_14]
.text:004042DD                 test    edx, edx
.text:004042DF                 jnz     short loc_404310
.text:004042E1
.text:004042E1 loc_4042E1:                             ; CODE XREF: sub_403F10+437↓j
.text:004042E1                 mov     edx, [ebp+14h]
.text:004042E4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004042E7                 call    strlen
.text:004042EC                 add     [ebp+14h], eax
.text:004042EF                 mov     eax, [esp+5Ch+var_18]
.text:004042F3                 mov     edi, [eax+0Ch]
.text:004042F6                 mov     [ebp+8], edi
.text:004042F9
.text:004042F9 loc_4042F9:                             ; CODE XREF: sub_403F10+7C2↓j
.text:004042F9                 mov     ebp, [esp+5Ch+Str]
.text:004042FD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00404301                 setnz   bl
.text:00404304                 movzx   esi, bl
.text:00404307                 lea     eax, [esi+esi*4+3Ah]
.text:0040430B                 jmp     loc_404067
.text:00404310 ; ---------------------------------------------------------------------------
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403F10+3CF↑j
.text:00404310                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00404317                 call    ds:libintl_gettext
.text:0040431D                 mov     ecx, [ebp+0]
.text:00404320                 mov     esi, [esp+5Ch+arg_4]
.text:00404324                 mov     ebx, [esi+ecx*4-4]
.text:00404328                 mov     ecx, ds:_iob
.text:0040432E                 mov     [esp+5Ch+var_50], ebx
.text:00404332                 mov     edi, [esi]
.text:00404334                 add     ecx, 40h ; '@'
.text:00404337                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040433B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040433E                 mov     [esp+5Ch+MaxCount], edi
.text:00404342                 call    fprintf
.text:00404347                 jmp     short loc_4042E1
.text:00404347 ; ---------------------------------------------------------------------------
.text:00404349                 align 10h
.text:00404350
.text:00404350 loc_404350:                             ; CODE XREF: sub_403F10+21E↑j
.text:00404350                                         ; sub_403F10+27A↑j
.text:00404350                 mov     eax, [esp+5Ch+arg_14]
.text:00404354                 test    eax, eax
.text:00404356                 jz      short loc_404386
.text:00404358                 mov     ebx, [ebp+0]
.text:0040435B                 mov     esi, [esp+5Ch+arg_4]
.text:0040435F                 mov     edi, [esi+ebx*4]
.text:00404362                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404366                 jz      short loc_404389
.text:00404368                 mov     ecx, [ebp+14h]
.text:0040436B                 mov     edx, [esp+5Ch+Str]
.text:0040436F                 movsx   ebx, byte ptr [ecx]
.text:00404372                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404375                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00404379                 call    strchr
.text:0040437E                 test    eax, eax
.text:00404380                 jnz     loc_404430
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: sub_403F10+446↑j
.text:00404386                 mov     ebx, [ebp+0]
.text:00404389
.text:00404389 loc_404389:                             ; CODE XREF: sub_403F10+456↑j
.text:00404389                 mov     eax, [esp+5Ch+var_14]
.text:0040438D                 test    eax, eax
.text:0040438F                 jz      short loc_4043E1
.text:00404391                 mov     esi, [esp+5Ch+arg_4]
.text:00404395                 mov     edi, [esi+ebx*4]
.text:00404398                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040439C                 jz      short loc_4043FA
.text:0040439E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004043A5                 call    ds:libintl_gettext
.text:004043AB                 mov     edi, [ebp+14h]
.text:004043AE                 mov     [esp+5Ch+var_4C], edi
.text:004043B2                 mov     ebx, [ebp+0]
.text:004043B5                 mov     edi, [esp+5Ch+arg_4]
.text:004043B9                 mov     esi, [edi+ebx*4]
.text:004043BC                 movsx   ecx, byte ptr [esi]
.text:004043BF                 mov     esi, ds:_iob
.text:004043C5                 add     esi, 40h ; '@'
.text:004043C8                 mov     [esp+5Ch+var_50], ecx
.text:004043CC                 mov     ebx, [edi]
.text:004043CE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004043D2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004043D5                 mov     [esp+5Ch+MaxCount], ebx
.text:004043D9                 call    fprintf
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403F10+51D↓j
.text:004043DE                 mov     ebx, [ebp+0]
.text:004043E1
.text:004043E1 loc_4043E1:                             ; CODE XREF: sub_403F10+47F↑j
.text:004043E1                 mov     dword ptr [ebp+14h], offset dword_403DC0
.text:004043E8                 lea     edx, [ebx+1]
.text:004043EB                 mov     [ebp+0], edx
.text:004043EE
.text:004043EE loc_4043EE:                             ; CODE XREF: sub_403F10+999↓j
.text:004043EE                 mov     dword ptr [ebp+8], 0
.text:004043F5                 jmp     loc_404268
.text:004043FA ; ---------------------------------------------------------------------------
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_403F10+48C↑j
.text:004043FA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00404401                 call    ds:libintl_gettext
.text:00404407                 mov     ecx, [ebp+14h]
.text:0040440A                 mov     edi, [esp+5Ch+arg_4]
.text:0040440E                 mov     edx, ds:_iob
.text:00404414                 mov     [esp+5Ch+var_50], ecx
.text:00404418                 mov     ebx, [edi]
.text:0040441A                 add     edx, 40h ; '@'
.text:0040441D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404421                 mov     [esp+5Ch+MaxCount], ebx
.text:00404425                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404428                 call    fprintf
.text:0040442D                 jmp     short loc_4043DE
.text:0040442D ; ---------------------------------------------------------------------------
.text:0040442F                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_403F10+196↑j
.text:00404430                                         ; sub_403F10+1B5↑j ...
.text:00404430                 mov     esi, [ebp+14h]
.text:00404433                 movzx   ebx, byte ptr [esi]
.text:00404436                 inc     esi
.text:00404437                 mov     [ebp+14h], esi
.text:0040443A                 mov     ecx, [esp+5Ch+Str]
.text:0040443E                 movsx   esi, bl
.text:00404441                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404445                 mov     edi, esi
.text:00404447                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040444A                 call    strchr
.text:0040444F                 mov     ecx, [ebp+14h]
.text:00404452                 cmp     byte ptr [ecx], 0
.text:00404455                 jnz     short loc_40445A
.text:00404457                 inc     dword ptr [ebp+0]
.text:0040445A
.text:0040445A loc_40445A:                             ; CODE XREF: sub_403F10+545↑j
.text:0040445A                 test    eax, eax
.text:0040445C                 jz      loc_404840
.text:00404462                 cmp     bl, 3Ah ; ':'
.text:00404465                 jz      loc_404840
.text:0040446B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040446E                 jz      loc_404526
.text:00404474                 movzx   edx, byte ptr [eax+1]
.text:00404478
.text:00404478 loc_404478:                             ; CODE XREF: sub_403F10+61D↓j
.text:00404478                 cmp     dl, 3Ah ; ':'
.text:0040447B                 jz      short loc_404484
.text:0040447D
.text:0040447D loc_40447D:                             ; CODE XREF: sub_403F10+590↓j
.text:0040447D                 mov     eax, esi
.text:0040447F                 jmp     loc_404067
.text:00404484 ; ---------------------------------------------------------------------------
.text:00404484
.text:00404484 loc_404484:                             ; CODE XREF: sub_403F10+56B↑j
.text:00404484                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00404488                 jz      loc_404511
.text:0040448E                 cmp     byte ptr [ecx], 0
.text:00404491                 jz      short loc_4044A2
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_403F10+604↓j
.text:00404493                 inc     dword ptr [ebp+0]
.text:00404496                 mov     [ebp+0Ch], ecx
.text:00404499
.text:00404499 loc_404499:                             ; CODE XREF: sub_403F10+5AB↓j
.text:00404499                                         ; sub_403F10+5C6↓j ...
.text:00404499                 mov     dword ptr [ebp+14h], 0
.text:004044A0                 jmp     short loc_40447D
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A2
.text:004044A2 loc_4044A2:                             ; CODE XREF: sub_403F10+581↑j
.text:004044A2                 mov     ecx, [ebp+0]
.text:004044A5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004044A9                 jz      short loc_4044BD
.text:004044AB                 mov     eax, [esp+5Ch+arg_4]
.text:004044AF                 lea     edx, [ecx+1]
.text:004044B2                 mov     [ebp+0], edx
.text:004044B5                 mov     ebx, [eax+ecx*4]
.text:004044B8                 mov     [ebp+0Ch], ebx
.text:004044BB                 jmp     short loc_404499
.text:004044BD ; ---------------------------------------------------------------------------
.text:004044BD
.text:004044BD loc_4044BD:                             ; CODE XREF: sub_403F10+599↑j
.text:004044BD                 mov     ecx, [esp+5Ch+var_14]
.text:004044C1                 test    ecx, ecx
.text:004044C3                 jnz     short loc_4044DF
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_403F10+5FF↓j
.text:004044C5                 mov     [ebp+8], edi
.text:004044C8                 mov     edi, [esp+5Ch+Str]
.text:004044CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004044CF                 jz      short loc_4044D8
.text:004044D1                 mov     esi, 3Fh ; '?'
.text:004044D6                 jmp     short loc_404499
.text:004044D8 ; ---------------------------------------------------------------------------
.text:004044D8
.text:004044D8 loc_4044D8:                             ; CODE XREF: sub_403F10+5BF↑j
.text:004044D8                 mov     esi, 3Ah ; ':'
.text:004044DD                 jmp     short loc_404499
.text:004044DF ; ---------------------------------------------------------------------------
.text:004044DF
.text:004044DF loc_4044DF:                             ; CODE XREF: sub_403F10+5B3↑j
.text:004044DF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004044E6                 call    ds:libintl_gettext
.text:004044EC                 mov     [esp+5Ch+var_50], edi
.text:004044F0                 mov     ebx, [esp+5Ch+arg_4]
.text:004044F4                 mov     edx, ds:_iob
.text:004044FA                 mov     esi, [ebx]
.text:004044FC                 add     edx, 40h ; '@'
.text:004044FF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404503                 mov     [esp+5Ch+MaxCount], esi
.text:00404507                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040450A                 call    fprintf
.text:0040450F                 jmp     short loc_4044C5
.text:00404511 ; ---------------------------------------------------------------------------
.text:00404511
.text:00404511 loc_404511:                             ; CODE XREF: sub_403F10+578↑j
.text:00404511                 cmp     byte ptr [ecx], 0
.text:00404514                 jnz     loc_404493
.text:0040451A                 mov     dword ptr [ebp+0Ch], 0
.text:00404521                 jmp     loc_404499
.text:00404526 ; ---------------------------------------------------------------------------
.text:00404526
.text:00404526 loc_404526:                             ; CODE XREF: sub_403F10+55E↑j
.text:00404526                 movzx   edx, byte ptr [eax+1]
.text:0040452A                 cmp     dl, 3Bh ; ';'
.text:0040452D                 jnz     loc_404478
.text:00404533                 mov     [esp+5Ch+var_2C], 0
.text:0040453B                 mov     [esp+5Ch+var_30], 0
.text:00404543                 mov     [esp+5Ch+var_34], 0
.text:0040454B                 mov     [esp+5Ch+var_38], 0
.text:00404553                 cmp     byte ptr [ecx], 0
.text:00404556                 jz      loc_4047CB
.text:0040455C                 inc     dword ptr [ebp+0]
.text:0040455F                 mov     [ebp+0Ch], ecx
.text:00404562
.text:00404562 loc_404562:                             ; CODE XREF: sub_403F10+8D4↓j
.text:00404562                 mov     edi, [ebp+0Ch]
.text:00404565                 mov     [ebp+14h], edi
.text:00404568                 movzx   eax, byte ptr [edi]
.text:0040456B                 test    al, al
.text:0040456D                 jz      short loc_40457F
.text:0040456F                 cmp     al, 3Dh ; '='
.text:00404571                 jz      short loc_40457F
.text:00404573
.text:00404573 loc_404573:                             ; CODE XREF: sub_403F10+66D↓j
.text:00404573                 inc     edi
.text:00404574                 movzx   eax, byte ptr [edi]
.text:00404577                 test    al, al
.text:00404579                 jz      short loc_40457F
.text:0040457B                 cmp     al, 3Dh ; '='
.text:0040457D                 jnz     short loc_404573
.text:0040457F
.text:0040457F loc_40457F:                             ; CODE XREF: sub_403F10+65D↑j
.text:0040457F                                         ; sub_403F10+661↑j ...
.text:0040457F                 mov     [esp+5Ch+var_3C], 0
.text:00404587                 mov     esi, [esp+5Ch+arg_C]
.text:0040458B                 mov     eax, [esi]
.text:0040458D                 test    eax, eax
.text:0040458F                 jz      loc_404710
.text:00404595                 mov     ecx, eax
.text:00404597
.text:00404597 loc_404597:                             ; CODE XREF: sub_403F10+6B3↓j
.text:00404597                 mov     ebx, [ebp+14h]
.text:0040459A                 mov     eax, edi
.text:0040459C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040459F                 sub     eax, ebx
.text:004045A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004045A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004045A9                 call    strncmp
.text:004045AE                 test    eax, eax
.text:004045B0                 jz      loc_404777
.text:004045B6
.text:004045B6 loc_4045B6:                             ; CODE XREF: sub_403F10+88C↓j
.text:004045B6                                         ; sub_403F10+89D↓j
.text:004045B6                 inc     [esp+5Ch+var_3C]
.text:004045BA                 add     esi, 10h
.text:004045BD                 mov     edx, [esi]
.text:004045BF                 test    edx, edx
.text:004045C1                 mov     ecx, edx
.text:004045C3                 jnz     short loc_404597
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: sub_403F10+8B6↓j
.text:004045C5                 mov     esi, [esp+5Ch+var_34]
.text:004045C9                 test    esi, esi
.text:004045CB                 jz      short loc_4045D9
.text:004045CD                 mov     ebx, [esp+5Ch+var_30]
.text:004045D1                 test    ebx, ebx
.text:004045D3                 jz      loc_404721
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: sub_403F10+6BB↑j
.text:004045D9                 mov     esi, [esp+5Ch+var_2C]
.text:004045DD                 test    esi, esi
.text:004045DF                 jz      loc_404710
.text:004045E5                 cmp     byte ptr [edi], 0
.text:004045E8                 jz      loc_404690
.text:004045EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004045F2                 mov     ebx, [ecx+4]
.text:004045F5                 test    ebx, ebx
.text:004045F7                 jz      short loc_404638
.text:004045F9                 lea     edx, [edi+1]
.text:004045FC                 mov     [ebp+0Ch], edx
.text:004045FF
.text:004045FF loc_4045FF:                             ; CODE XREF: sub_403F10+788↓j
.text:004045FF                                         ; sub_403F10+7A7↓j
.text:004045FF                 mov     edi, [ebp+14h]
.text:00404602                 mov     [esp+5Ch+Str1], edi ; Str
.text:00404605                 call    strlen
.text:0040460A                 add     [ebp+14h], eax
.text:0040460D                 mov     eax, [esp+5Ch+arg_10]
.text:00404611                 test    eax, eax
.text:00404613                 jz      short loc_404620
.text:00404615                 mov     edx, [esp+5Ch+var_38]
.text:00404619                 mov     ebp, [esp+5Ch+arg_10]
.text:0040461D                 mov     [ebp+0], edx
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_403F10+703↑j
.text:00404620                 mov     eax, [esp+5Ch+var_2C]
.text:00404624                 mov     ecx, [eax+8]
.text:00404627                 test    ecx, ecx
.text:00404629                 jnz     loc_4041EA
.text:0040462F                 mov     ecx, [esp+5Ch+var_2C]
.text:00404633                 jmp     loc_4041E2
.text:00404638 ; ---------------------------------------------------------------------------
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_403F10+6E7↑j
.text:00404638                 mov     eax, [esp+5Ch+var_14]
.text:0040463C                 test    eax, eax
.text:0040463E                 jnz     short loc_404653
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_403F10+779↓j
.text:00404640                 mov     ecx, [ebp+14h]
.text:00404643                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404646                 call    strlen
.text:0040464B                 add     [ebp+14h], eax
.text:0040464E                 jmp     loc_404268
.text:00404653 ; ---------------------------------------------------------------------------
.text:00404653
.text:00404653 loc_404653:                             ; CODE XREF: sub_403F10+72E↑j
.text:00404653                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040465A                 call    ds:libintl_gettext
.text:00404660                 mov     edx, [esp+5Ch+var_2C]
.text:00404664                 mov     ebx, [esp+5Ch+arg_4]
.text:00404668                 mov     edi, [edx]
.text:0040466A                 mov     [esp+5Ch+var_50], edi
.text:0040466E                 mov     edi, ds:_iob
.text:00404674                 mov     esi, [ebx]
.text:00404676                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040467A                 add     edi, 40h ; '@'
.text:0040467D                 mov     [esp+5Ch+MaxCount], esi
.text:00404681                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00404684                 call    fprintf
.text:00404689                 jmp     short loc_404640
.text:00404689 ; ---------------------------------------------------------------------------
.text:0040468B                 align 10h
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_403F10+6D8↑j
.text:00404690                 mov     esi, [esp+5Ch+var_2C]
.text:00404694                 cmp     dword ptr [esi+4], 1
.text:00404698                 jnz     loc_4045FF
.text:0040469E                 mov     ecx, [ebp+0]
.text:004046A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004046A5                 jge     short loc_4046BC
.text:004046A7                 mov     eax, [esp+5Ch+arg_4]
.text:004046AB                 lea     ebx, [ecx+1]
.text:004046AE                 mov     [ebp+0], ebx
.text:004046B1                 mov     edi, [eax+ecx*4]
.text:004046B4                 mov     [ebp+0Ch], edi
.text:004046B7                 jmp     loc_4045FF
.text:004046BC ; ---------------------------------------------------------------------------
.text:004046BC
.text:004046BC loc_4046BC:                             ; CODE XREF: sub_403F10+795↑j
.text:004046BC                 mov     edx, [esp+5Ch+var_14]
.text:004046C0                 test    edx, edx
.text:004046C2                 jnz     short loc_4046D7
.text:004046C4
.text:004046C4 loc_4046C4:                             ; CODE XREF: sub_403F10+7FE↓j
.text:004046C4                 mov     edx, [ebp+14h]
.text:004046C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004046CA                 call    strlen
.text:004046CF                 add     [ebp+14h], eax
.text:004046D2                 jmp     loc_4042F9
.text:004046D7 ; ---------------------------------------------------------------------------
.text:004046D7
.text:004046D7 loc_4046D7:                             ; CODE XREF: sub_403F10+7B2↑j
.text:004046D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004046DE                 call    ds:libintl_gettext
.text:004046E4                 mov     ecx, [ebp+0]
.text:004046E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004046EB                 mov     edi, [ebx+ecx*4-4]
.text:004046EF                 mov     ecx, ds:_iob
.text:004046F5                 mov     [esp+5Ch+var_50], edi
.text:004046F9                 mov     esi, [ebx]
.text:004046FB                 add     ecx, 40h ; '@'
.text:004046FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404702                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404705                 mov     [esp+5Ch+MaxCount], esi
.text:00404709                 call    fprintf
.text:0040470E                 jmp     short loc_4046C4
.text:00404710 ; ---------------------------------------------------------------------------
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_403F10+67F↑j
.text:00404710                                         ; sub_403F10+6CF↑j
.text:00404710                 mov     dword ptr [ebp+14h], 0
.text:00404717                 mov     eax, 57h ; 'W'
.text:0040471C                 jmp     loc_404067
.text:00404721 ; ---------------------------------------------------------------------------
.text:00404721
.text:00404721 loc_404721:                             ; CODE XREF: sub_403F10+6C3↑j
.text:00404721                 mov     edi, [esp+5Ch+var_14]
.text:00404725                 test    edi, edi
.text:00404727                 jnz     short loc_40473F
.text:00404729
.text:00404729 loc_404729:                             ; CODE XREF: sub_403F10+865↓j
.text:00404729                 mov     edx, [ebp+14h]
.text:0040472C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040472F                 call    strlen
.text:00404734                 add     [ebp+14h], eax
.text:00404737                 inc     dword ptr [ebp+0]
.text:0040473A                 jmp     loc_404268
.text:0040473F ; ---------------------------------------------------------------------------
.text:0040473F
.text:0040473F loc_40473F:                             ; CODE XREF: sub_403F10+817↑j
.text:0040473F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00404746                 call    ds:libintl_gettext
.text:0040474C                 mov     ecx, [ebp+0]
.text:0040474F                 mov     ebx, [esp+5Ch+arg_4]
.text:00404753                 mov     edi, [ebx+ecx*4]
.text:00404756                 mov     ecx, ds:_iob
.text:0040475C                 mov     [esp+5Ch+var_50], edi
.text:00404760                 mov     esi, [ebx]
.text:00404762                 add     ecx, 40h ; '@'
.text:00404765                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404769                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040476C                 mov     [esp+5Ch+MaxCount], esi
.text:00404770                 call    fprintf
.text:00404775                 jmp     short loc_404729
.text:00404777 ; ---------------------------------------------------------------------------
.text:00404777
.text:00404777 loc_404777:                             ; CODE XREF: sub_403F10+6A0↑j
.text:00404777                 mov     edx, [ebp+14h]
.text:0040477A                 mov     ebx, edi
.text:0040477C                 mov     ecx, [esi]
.text:0040477E                 sub     ebx, edx
.text:00404780                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404783                 call    strlen
.text:00404788                 cmp     ebx, eax
.text:0040478A                 jz      short loc_4047B2
.text:0040478C                 mov     ebx, [esp+5Ch+var_2C]
.text:00404790                 test    ebx, ebx
.text:00404792                 jz      short loc_4047A1
.text:00404794                 mov     [esp+5Ch+var_34], 1
.text:0040479C                 jmp     loc_4045B6
.text:004047A1 ; ---------------------------------------------------------------------------
.text:004047A1
.text:004047A1 loc_4047A1:                             ; CODE XREF: sub_403F10+882↑j
.text:004047A1                 mov     [esp+5Ch+var_2C], esi
.text:004047A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004047A9                 mov     [esp+5Ch+var_38], ecx
.text:004047AD                 jmp     loc_4045B6
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B2
.text:004047B2 loc_4047B2:                             ; CODE XREF: sub_403F10+87A↑j
.text:004047B2                 mov     [esp+5Ch+var_2C], esi
.text:004047B6                 mov     eax, [esp+5Ch+var_3C]
.text:004047BA                 mov     [esp+5Ch+var_30], 1
.text:004047C2                 mov     [esp+5Ch+var_38], eax
.text:004047C6                 jmp     loc_4045C5
.text:004047CB ; ---------------------------------------------------------------------------
.text:004047CB
.text:004047CB loc_4047CB:                             ; CODE XREF: sub_403F10+646↑j
.text:004047CB                 mov     edx, [ebp+0]
.text:004047CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004047D2                 jz      short loc_4047E9
.text:004047D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004047D8                 lea     esi, [edx+1]
.text:004047DB                 mov     [ebp+0], esi
.text:004047DE                 mov     edi, [ebx+edx*4]
.text:004047E1                 mov     [ebp+0Ch], edi
.text:004047E4                 jmp     loc_404562
.text:004047E9 ; ---------------------------------------------------------------------------
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_403F10+8C2↑j
.text:004047E9                 mov     edi, [esp+5Ch+var_14]
.text:004047ED                 test    edi, edi
.text:004047EF                 jnz     short loc_40480C
.text:004047F1
.text:004047F1 loc_4047F1:                             ; CODE XREF: sub_403F10+92C↓j
.text:004047F1                 mov     [ebp+8], esi
.text:004047F4                 mov     ebp, [esp+5Ch+Str]
.text:004047F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004047FC                 jz      short loc_404808
.text:004047FE                 mov     bl, 3Fh ; '?'
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_403F10+8FA↓j
.text:00404800                 movsx   eax, bl
.text:00404803                 jmp     loc_404067
.text:00404808 ; ---------------------------------------------------------------------------
.text:00404808
.text:00404808 loc_404808:                             ; CODE XREF: sub_403F10+8EC↑j
.text:00404808                 mov     bl, 3Ah ; ':'
.text:0040480A                 jmp     short loc_404800
.text:0040480C ; ---------------------------------------------------------------------------
.text:0040480C
.text:0040480C loc_40480C:                             ; CODE XREF: sub_403F10+8DF↑j
.text:0040480C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404813                 call    ds:libintl_gettext
.text:00404819                 mov     [esp+5Ch+var_50], esi
.text:0040481D                 mov     edx, [esp+5Ch+arg_4]
.text:00404821                 mov     ecx, ds:_iob
.text:00404827                 mov     ebx, [edx]
.text:00404829                 add     ecx, 40h ; '@'
.text:0040482C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404830                 mov     [esp+5Ch+MaxCount], ebx
.text:00404834                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404837                 call    fprintf
.text:0040483C                 jmp     short loc_4047F1
.text:0040483C ; ---------------------------------------------------------------------------
.text:0040483E                 align 10h
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_403F10+54C↑j
.text:00404840                                         ; sub_403F10+555↑j
.text:00404840                 mov     eax, [esp+5Ch+var_14]
.text:00404844                 test    eax, eax
.text:00404846                 jz      short loc_40487F
.text:00404848                 mov     ebx, [ebp+1Ch]
.text:0040484B                 test    ebx, ebx
.text:0040484D                 jz      short loc_404887
.text:0040484F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00404856
.text:00404856 loc_404856:                             ; CODE XREF: sub_403F10+97E↓j
.text:00404856                 call    ds:libintl_gettext
.text:0040485C                 mov     [esp+5Ch+var_50], esi
.text:00404860                 mov     ebx, [esp+5Ch+arg_4]
.text:00404864                 mov     edx, ds:_iob
.text:0040486A                 mov     esi, [ebx]
.text:0040486C                 add     edx, 40h ; '@'
.text:0040486F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404873                 mov     [esp+5Ch+MaxCount], esi
.text:00404877                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040487A                 call    fprintf
.text:0040487F
.text:0040487F loc_40487F:                             ; CODE XREF: sub_403F10+936↑j
.text:0040487F                 mov     [ebp+8], edi
.text:00404882                 jmp     loc_404268
.text:00404887 ; ---------------------------------------------------------------------------
.text:00404887
.text:00404887 loc_404887:                             ; CODE XREF: sub_403F10+93D↑j
.text:00404887                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040488E                 jmp     short loc_404856
.text:00404890 ; ---------------------------------------------------------------------------
.text:00404890
.text:00404890 loc_404890:                             ; CODE XREF: sub_403F10+26E↑j
.text:00404890                 mov     edi, [esp+5Ch+var_14]
.text:00404894                 test    edi, edi
.text:00404896                 jnz     short loc_4048AE
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_403F10+9D4↓j
.text:00404898                 mov     edx, [ebp+14h]
.text:0040489B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040489E                 call    strlen
.text:004048A3                 add     [ebp+14h], eax
.text:004048A6                 inc     dword ptr [ebp+0]
.text:004048A9                 jmp     loc_4043EE
.text:004048AE ; ---------------------------------------------------------------------------
.text:004048AE
.text:004048AE loc_4048AE:                             ; CODE XREF: sub_403F10+986↑j
.text:004048AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004048B5                 call    ds:libintl_gettext
.text:004048BB                 mov     ebx, [ebp+0]
.text:004048BE                 mov     edi, [esp+5Ch+arg_4]
.text:004048C2                 mov     ecx, [edi+ebx*4]
.text:004048C5                 mov     ebx, ds:_iob
.text:004048CB                 mov     [esp+5Ch+var_50], ecx
.text:004048CF                 mov     esi, [edi]
.text:004048D1                 add     ebx, 40h ; '@'
.text:004048D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004048D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004048DB                 mov     [esp+5Ch+MaxCount], esi
.text:004048DF                 call    fprintf
.text:004048E4                 jmp     short loc_404898
.text:004048E6 ; ---------------------------------------------------------------------------
.text:004048E6
.text:004048E6 loc_4048E6:                             ; CODE XREF: sub_403F10+246↑j
.text:004048E6                 mov     ecx, [ebp+14h]
.text:004048E9                 mov     ebx, edi
.text:004048EB                 mov     edx, [esi]
.text:004048ED                 sub     ebx, ecx
.text:004048EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004048F2                 call    strlen
.text:004048F7                 cmp     ebx, eax
.text:004048F9                 jz      short loc_404951
.text:004048FB                 mov     ebx, [esp+5Ch+var_18]
.text:004048FF                 test    ebx, ebx
.text:00404901                 jz      short loc_404940
.text:00404903                 mov     edx, [esp+5Ch+arg_14]
.text:00404907                 test    edx, edx
.text:00404909                 jnz     short loc_404917
.text:0040490B                 mov     ecx, [esp+5Ch+var_18]
.text:0040490F                 mov     ebx, [esi+4]
.text:00404912                 cmp     [ecx+4], ebx
.text:00404915                 jz      short loc_404924
.text:00404917
.text:00404917 loc_404917:                             ; CODE XREF: sub_403F10+9F9↑j
.text:00404917                                         ; sub_403F10+A1A↓j ...
.text:00404917                 mov     [esp+5Ch+var_20], 1
.text:0040491F                 jmp     loc_40415C
.text:00404924 ; ---------------------------------------------------------------------------
.text:00404924
.text:00404924 loc_404924:                             ; CODE XREF: sub_403F10+A05↑j
.text:00404924                 mov     edx, [esi+8]
.text:00404927                 cmp     [ecx+8], edx
.text:0040492A                 jnz     short loc_404917
.text:0040492C                 mov     ebx, [esi+0Ch]
.text:0040492F                 cmp     [ecx+0Ch], ebx
.text:00404932                 jnz     short loc_404917
.text:00404934                 jmp     loc_40415C
.text:00404934 ; ---------------------------------------------------------------------------
.text:00404939                 align 10h
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_403F10+9F1↑j
.text:00404940                 mov     [esp+5Ch+var_18], esi
.text:00404944                 mov     eax, [esp+5Ch+var_28]
.text:00404948                 mov     [esp+5Ch+var_24], eax
.text:0040494C                 jmp     loc_40415C
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: sub_403F10+9E9↑j
.text:00404951                 mov     [esp+5Ch+var_18], esi
.text:00404955                 mov     ecx, [esp+5Ch+var_28]
.text:00404959                 mov     [esp+5Ch+var_1C], 1
.text:00404961                 mov     [esp+5Ch+var_24], ecx
.text:00404965                 jmp     loc_404170
.text:0040496A ; ---------------------------------------------------------------------------
.text:0040496A
.text:0040496A loc_40496A:                             ; CODE XREF: sub_403F10+1BF↑j
.text:0040496A                 mov     eax, [esp+5Ch+Str]
.text:0040496E                 movsx   esi, dl
.text:00404971                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404975                 mov     [esp+5Ch+Str1], eax ; Str
.text:00404978                 call    strchr
.text:0040497D                 test    eax, eax
.text:0040497F                 jnz     loc_404430
.text:00404985                 jmp     loc_4040D5
.text:0040498A ; ---------------------------------------------------------------------------
.text:0040498A
.text:0040498A loc_40498A:                             ; CODE XREF: sub_403F10+17C↑j
.text:0040498A                 mov     ecx, 1
.text:0040498F                 jmp     loc_404092
.text:00404994 ; ---------------------------------------------------------------------------
.text:00404994
.text:00404994 loc_404994:                             ; CODE XREF: sub_403F10+D4↑j
.text:00404994                                         ; sub_403F10+130↑j
.text:00404994                 mov     eax, [ebp+20h]
.text:00404997                 cmp     eax, [ebp+24h]
.text:0040499A                 jz      loc_404070
.text:004049A0                 mov     [ebp+0], eax
.text:004049A3                 jmp     loc_404070
.text:004049A8 ; ---------------------------------------------------------------------------
.text:004049A8
.text:004049A8 loc_4049A8:                             ; CODE XREF: sub_403F10+FE↑j
.text:004049A8                 mov     [ebp+20h], eax
.text:004049AB                 jmp     loc_404030
.text:004049B0 ; ---------------------------------------------------------------------------
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_403F10+CA↑j
.text:004049B0                 mov     edx, [ebp+20h]
.text:004049B3                 mov     eax, [ebp+24h]
.text:004049B6                 cmp     edx, eax
.text:004049B8                 jz      short loc_404A30
.text:004049BA                 cmp     eax, ebx
.text:004049BC                 jz      short loc_4049D1
.text:004049BE                 mov     [esp+5Ch+Str2], ebp
.text:004049C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004049C6                 mov     [esp+5Ch+Str1], ebx
.text:004049C9                 call    sub_404BC0
.text:004049CE                 mov     ebx, [ebp+0]
.text:004049D1
.text:004049D1 loc_4049D1:                             ; CODE XREF: sub_403F10+AAC↑j
.text:004049D1                                         ; sub_403F10+B22↓j ...
.text:004049D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004049D5                 jge     short loc_404A20
.text:004049D7                 mov     esi, [esp+5Ch+arg_4]
.text:004049DB                 mov     eax, [esi+ebx*4]
.text:004049DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004049E1                 jz      short loc_404A28
.text:004049E3                 lea     esi, [esi+0]
.text:004049E9                 lea     edi, [edi+0]
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_403F10+AFC↓j
.text:004049F0                                         ; sub_403F10+B1C↓j
.text:004049F0                 lea     eax, [ebx+1]
.text:004049F3                 mov     ebx, eax
.text:004049F5                 mov     [ebp+0], eax
.text:004049F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004049FC                 jge     short loc_404A20
.text:004049FE                 mov     edi, [esp+5Ch+arg_4]
.text:00404A02                 mov     edx, [edi+eax*4]
.text:00404A05                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00404A08                 jz      short loc_404A10
.text:00404A0A
.text:00404A0A loc_404A0A:                             ; CODE XREF: sub_403F10+B04↓j
.text:00404A0A                 mov     ebx, eax
.text:00404A0C                 jmp     short loc_4049F0
.text:00404A0C ; ---------------------------------------------------------------------------
.text:00404A0E                 align 10h
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: sub_403F10+AF8↑j
.text:00404A10                 cmp     byte ptr [edx+1], 0
.text:00404A14                 jz      short loc_404A0A
.text:00404A16                 lea     esi, [esi+0]
.text:00404A19                 lea     edi, [edi+0]
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_403F10+AC5↑j
.text:00404A20                                         ; sub_403F10+AEC↑j ...
.text:00404A20                 mov     [ebp+24h], ebx
.text:00404A23                 jmp     loc_403FE0
.text:00404A28 ; ---------------------------------------------------------------------------
.text:00404A28
.text:00404A28 loc_404A28:                             ; CODE XREF: sub_403F10+AD1↑j
.text:00404A28                 cmp     byte ptr [eax+1], 0
.text:00404A2C                 jz      short loc_4049F0
.text:00404A2E                 jmp     short loc_404A20
.text:00404A30 ; ---------------------------------------------------------------------------
.text:00404A30
.text:00404A30 loc_404A30:                             ; CODE XREF: sub_403F10+AA8↑j
.text:00404A30                 cmp     edx, ebx
.text:00404A32                 jz      short loc_4049D1
.text:00404A34                 mov     [ebp+20h], ebx
.text:00404A37                 jmp     short loc_4049D1
.text:00404A39 ; ---------------------------------------------------------------------------
.text:00404A39
.text:00404A39 loc_404A39:                             ; CODE XREF: sub_403F10+88↑j
.text:00404A39                 mov     dword ptr [ebp+18h], 0
.text:00404A40                 mov     esi, [esp+5Ch+Str]
.text:00404A44
.text:00404A44 loc_404A44:                             ; CODE XREF: sub_403F10+B49↓j
.text:00404A44                 inc     esi
.text:00404A45                 jmp     loc_403FA8
.text:00404A45 ; ---------------------------------------------------------------------------
.text:00404A4A                 align 10h
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_403F10+80↑j
.text:00404A50                 mov     dword ptr [ebp+18h], 2
.text:00404A57                 mov     esi, ecx
.text:00404A59                 jmp     short loc_404A44
.text:00404A59 ; ---------------------------------------------------------------------------
.text:00404A5B                 align 10h
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_403F10+69↑j
.text:00404A60                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00404A67                 call    getenv
.text:00404A6C                 test    eax, eax
.text:00404A6E                 jz      loc_403F84
.text:00404A74                 jmp     loc_403F7F
.text:00404A74 ; ---------------------------------------------------------------------------
.text:00404A79                 align 10h
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_403F10+3F↑j
.text:00404A80                 mov     dword ptr [ebp+0], 1
.text:00404A87                 mov     ebx, 1
.text:00404A8C                 jmp     loc_403F60
.text:00404A8C sub_403F10      endp
.text:00404A8C
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A91                 jmp     short sub_404AA0
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A93                 align 10h
.text:00404AA0
.text:00404AA0 ; =============== S U B R O U T I N E =======================================
.text:00404AA0
.text:00404AA0
.text:00404AA0 ; int __cdecl sub_404AA0(int, int, char *, int, int, int, int)
.text:00404AA0 sub_404AA0      proc near               ; CODE XREF: .text:00404A91↑j
.text:00404AA0                                         ; sub_406E00+3A↓p ...
.text:00404AA0
.text:00404AA0 var_2C          = dword ptr -2Ch
.text:00404AA0 var_28          = dword ptr -28h
.text:00404AA0 Str             = dword ptr -24h
.text:00404AA0 var_20          = dword ptr -20h
.text:00404AA0 var_1C          = dword ptr -1Ch
.text:00404AA0 var_18          = dword ptr -18h
.text:00404AA0 var_14          = dword ptr -14h
.text:00404AA0 var_10          = dword ptr -10h
.text:00404AA0 arg_0           = dword ptr  4
.text:00404AA0 arg_4           = dword ptr  8
.text:00404AA0 arg_8           = dword ptr  0Ch
.text:00404AA0 arg_C           = dword ptr  10h
.text:00404AA0 arg_10          = dword ptr  14h
.text:00404AA0 arg_14          = dword ptr  18h
.text:00404AA0 arg_18          = dword ptr  1Ch
.text:00404AA0
.text:00404AA0                 sub     esp, 2Ch
.text:00404AA3                 mov     edx, dword_40A020
.text:00404AA9                 mov     [esp+2Ch+var_10], offset dword_40B0D0 ; int
.text:00404AB1                 mov     ecx, dword_40A024
.text:00404AB7                 mov     ds:dword_40B0D0, edx
.text:00404ABD                 mov     edx, [esp+2Ch+arg_18]
.text:00404AC1                 mov     ds:dword_40B0D4, ecx
.text:00404AC7                 mov     ecx, [esp+2Ch+arg_14]
.text:00404ACB                 mov     [esp+2Ch+var_14], edx ; int
.text:00404ACF                 mov     edx, [esp+2Ch+arg_10]
.text:00404AD3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404AD7                 mov     ecx, [esp+2Ch+arg_C]
.text:00404ADB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00404ADF                 mov     edx, [esp+2Ch+arg_8]
.text:00404AE3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404AE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404AEB                 mov     [esp+2Ch+Str], edx ; Str
.text:00404AEF                 mov     edx, [esp+2Ch+arg_0]
.text:00404AF3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404AF7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00404AFA                 call    sub_403F10
.text:00404AFF                 mov     ecx, ds:dword_40B0D0
.text:00404B05                 mov     dword_40A020, ecx
.text:00404B0B                 mov     ecx, ds:dword_40B0DC
.text:00404B11                 mov     ds:Str, ecx
.text:00404B17                 mov     ecx, ds:dword_40B0D8
.text:00404B1D                 mov     dword_40A028, ecx
.text:00404B23                 add     esp, 2Ch
.text:00404B26                 retn
.text:00404B26 sub_404AA0      endp
.text:00404B26
.text:00404B26 ; ---------------------------------------------------------------------------
.text:00404B27                 align 10h
.text:00404B30                 sub     esp, 2Ch
.text:00404B33                 mov     edx, dword_40A020
.text:00404B39                 mov     dword ptr [esp+1Ch], offset dword_40B0D0
.text:00404B41                 mov     ecx, dword_40A024
.text:00404B47                 mov     dword ptr [esp+18h], 1
.text:00404B4F                 mov     ds:dword_40B0D0, edx
.text:00404B55                 mov     edx, [esp+38h]
.text:00404B59                 mov     ds:dword_40B0D4, ecx
.text:00404B5F                 mov     ecx, [esp+34h]
.text:00404B63                 mov     [esp+8], edx
.text:00404B67                 mov     edx, [esp+30h]
.text:00404B6B                 mov     [esp+4], ecx
.text:00404B6F                 mov     dword ptr [esp+14h], 0
.text:00404B77                 mov     dword ptr [esp+10h], 0
.text:00404B7F                 mov     dword ptr [esp+0Ch], 0
.text:00404B87                 mov     [esp], edx
.text:00404B8A                 call    sub_403F10
.text:00404B8F                 mov     ecx, ds:dword_40B0D0
.text:00404B95                 mov     dword_40A020, ecx
.text:00404B9B                 mov     ecx, ds:dword_40B0DC
.text:00404BA1                 mov     ds:Str, ecx
.text:00404BA7                 mov     ecx, ds:dword_40B0D8
.text:00404BAD                 mov     dword_40A028, ecx
.text:00404BB3                 add     esp, 2Ch
.text:00404BB6                 retn
.text:00404BB6 ; ---------------------------------------------------------------------------
.text:00404BB7                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0
.text:00404BC0 sub_404BC0      proc near               ; CODE XREF: sub_403F10+113↑p
.text:00404BC0                                         ; sub_403F10+AB9↑p
.text:00404BC0
.text:00404BC0 var_2C          = dword ptr -2Ch
.text:00404BC0 var_28          = dword ptr -28h
.text:00404BC0 var_24          = dword ptr -24h
.text:00404BC0 var_20          = dword ptr -20h
.text:00404BC0 var_1C          = dword ptr -1Ch
.text:00404BC0 var_18          = dword ptr -18h
.text:00404BC0 var_14          = dword ptr -14h
.text:00404BC0 arg_0           = dword ptr  4
.text:00404BC0 arg_4           = dword ptr  8
.text:00404BC0
.text:00404BC0                 push    ebp
.text:00404BC1                 push    edi
.text:00404BC2                 push    esi
.text:00404BC3                 push    ebx
.text:00404BC4                 sub     esp, 1Ch
.text:00404BC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404BCB                 mov     eax, [esp+2Ch+arg_4]
.text:00404BCF                 mov     ebx, [esp+2Ch+arg_4]
.text:00404BD3                 mov     edx, [ecx+20h]
.text:00404BD6                 mov     edi, [esp+2Ch+arg_0]
.text:00404BDA                 mov     ecx, [ebx]
.text:00404BDC                 mov     [esp+2Ch+var_2C], edx
.text:00404BDF                 mov     [esp+2Ch+var_14], edx
.text:00404BE3                 mov     edx, [eax+24h]
.text:00404BE6                 mov     [esp+2Ch+var_28], ecx
.text:00404BEA                 mov     [esp+2Ch+var_1C], ecx
.text:00404BEE                 cmp     ecx, edx
.text:00404BF0                 mov     [esp+2Ch+var_18], edx
.text:00404BF4                 jle     short loc_404C70
.text:00404BF6                 mov     esi, [esp+2Ch+var_2C]
.text:00404BF9                 cmp     edx, esi
.text:00404BFB                 jle     short loc_404C70
.text:00404BFD                 lea     esi, [esi+0]
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404BC0+A1↓j
.text:00404C00                 mov     ebx, [esp+2Ch+var_1C]
.text:00404C04                 mov     edx, [esp+2Ch+var_18]
.text:00404C08                 mov     ebp, [esp+2Ch+var_18]
.text:00404C0C                 mov     eax, [esp+2Ch+var_14]
.text:00404C10                 sub     ebx, edx
.text:00404C12                 mov     [esp+2Ch+var_20], ebx
.text:00404C16                 sub     ebp, eax
.text:00404C18                 cmp     ebx, ebp
.text:00404C1A                 jle     short loc_404C95
.text:00404C1C                 xor     esi, esi
.text:00404C1E                 cmp     esi, ebp
.text:00404C20                 jge     short loc_404C4D
.text:00404C22                 mov     ecx, [esp+2Ch+var_1C]
.text:00404C26                 sub     ecx, ebp
.text:00404C28                 mov     [esp+2Ch+var_24], ecx
.text:00404C2C                 lea     esi, [esi+0]
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404BC0+8B↓j
.text:00404C30                 mov     ecx, [esp+2Ch+var_14]
.text:00404C34                 mov     edx, [esp+2Ch+var_24]
.text:00404C38                 add     ecx, esi
.text:00404C3A                 add     edx, esi
.text:00404C3C                 mov     ebx, [edi+ecx*4]
.text:00404C3F                 mov     eax, [edi+edx*4]
.text:00404C42                 inc     esi
.text:00404C43                 cmp     esi, ebp
.text:00404C45                 mov     [edi+ecx*4], eax
.text:00404C48                 mov     [edi+edx*4], ebx
.text:00404C4B                 jl      short loc_404C30
.text:00404C4D
.text:00404C4D loc_404C4D:                             ; CODE XREF: sub_404BC0+60↑j
.text:00404C4D                 sub     [esp+2Ch+var_1C], ebp
.text:00404C51
.text:00404C51 loc_404C51:                             ; CODE XREF: sub_404BC0+107↓j
.text:00404C51                 mov     eax, [esp+2Ch+var_18]
.text:00404C55                 cmp     [esp+2Ch+var_1C], eax
.text:00404C59                 jle     short loc_404C70
.text:00404C5B                 mov     ebp, [esp+2Ch+var_14]
.text:00404C5F                 cmp     eax, ebp
.text:00404C61                 jg      short loc_404C00
.text:00404C63                 lea     esi, [esi+0]
.text:00404C69                 lea     edi, [edi+0]
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_404BC0+34↑j
.text:00404C70                                         ; sub_404BC0+3B↑j ...
.text:00404C70                 mov     esi, [esp+2Ch+var_28]
.text:00404C74                 mov     ecx, [esp+2Ch+var_18]
.text:00404C78                 mov     eax, [esp+2Ch+var_2C]
.text:00404C7B                 mov     edi, [esp+2Ch+arg_4]
.text:00404C7F                 mov     edx, [esp+2Ch+var_28]
.text:00404C83                 sub     esi, ecx
.text:00404C85                 add     esi, eax
.text:00404C87                 mov     [edi+20h], esi
.text:00404C8A                 mov     [edi+24h], edx
.text:00404C8D                 add     esp, 1Ch
.text:00404C90                 pop     ebx
.text:00404C91                 pop     esi
.text:00404C92                 pop     edi
.text:00404C93                 pop     ebp
.text:00404C94                 retn
.text:00404C95 ; ---------------------------------------------------------------------------
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_404BC0+5A↑j
.text:00404C95                 xor     esi, esi
.text:00404C97                 cmp     esi, [esp+2Ch+var_20]
.text:00404C9B                 jge     short loc_404CBF
.text:00404C9D                 lea     esi, [esi+0]
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_404BC0+FD↓j
.text:00404CA0                 mov     ebx, [esp+2Ch+var_14]
.text:00404CA4                 mov     ebp, [esp+2Ch+var_18]
.text:00404CA8                 add     ebx, esi
.text:00404CAA                 add     ebp, esi
.text:00404CAC                 mov     edx, [edi+ebx*4]
.text:00404CAF                 inc     esi
.text:00404CB0                 cmp     esi, [esp+2Ch+var_20]
.text:00404CB4                 mov     ecx, [edi+ebp*4]
.text:00404CB7                 mov     [edi+ebx*4], ecx
.text:00404CBA                 mov     [edi+ebp*4], edx
.text:00404CBD                 jl      short loc_404CA0
.text:00404CBF
.text:00404CBF loc_404CBF:                             ; CODE XREF: sub_404BC0+DB↑j
.text:00404CBF                 mov     esi, [esp+2Ch+var_20]
.text:00404CC3                 add     [esp+2Ch+var_14], esi
.text:00404CC7                 jmp     short loc_404C51
.text:00404CC7 sub_404BC0      endp
.text:00404CC7
.text:00404CC7 ; ---------------------------------------------------------------------------
.text:00404CC9                 align 20h
.text:00404CE0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404CE0                                         ; DATA XREF: .data:off_40A030↓o
.text:00404D12 ; const char Format[]
.text:00404D12 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404FD0+50↓o
.text:00404D1E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404D1E                                         ; DATA XREF: sub_404FD0:loc_405071↓o
.text:00404D2E                 align 20h
.text:00404D40 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404D40                                         ; DATA XREF: sub_404FD0+100↓o
.text:00404D40                 db 'ere is NO',0Ah
.text:00404D40                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404D40                 db 'R PURPOSE.',0Ah,0
.text:00404DD8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404DD8                                         ; DATA XREF: sub_404FD0:loc_405111↓o
.text:00404DEF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00404DEF                                         ; DATA XREF: sub_404FD0:loc_40511D↓o
.text:00404E0B                 align 20h
.text:00404E20 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404E20                                         ; DATA XREF: sub_404FD0:loc_405129↓o
.text:00404E20                 db 'and %s.',0Ah,0
.text:00404E40 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404E40                                         ; DATA XREF: sub_404FD0:loc_405135↓o
.text:00404E40                 db '%s, and %s.',0Ah,0
.text:00404E64                 align 20h
.text:00404E80 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404E80                                         ; DATA XREF: sub_404FD0:loc_405141↓o
.text:00404E80                 db '%s, %s, and %s.',0Ah,0
.text:00404EA8                 align 20h
.text:00404EC0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404EC0                                         ; DATA XREF: sub_404FD0:loc_40514D↓o
.text:00404EC0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00404EEC                 align 20h
.text:00404F00 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404F00                                         ; DATA XREF: sub_404FD0:loc_405159↓o
.text:00404F00                 db '%s, %s, %s, %s,',0Ah
.text:00404F00                 db 'and %s.',0Ah,0
.text:00404F30                 align 20h
.text:00404F40 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404F40                                         ; DATA XREF: sub_404FD0:loc_405165↓o
.text:00404F40                 db '%s, %s, %s, %s,',0Ah
.text:00404F40                 db '%s, and %s.',0Ah,0
.text:00404F74                 align 10h
.text:00404F80 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404F80                                         ; DATA XREF: sub_404FD0:def_40503D↓o
.text:00404F80                 db '%s, %s, %s, %s,',0Ah
.text:00404F80                 db '%s, %s, and others.',0Ah,0
.text:00404FBC ; const char aSS[]
.text:00404FBC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404FD0+1B5↓o
.text:00404FC3                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0
.text:00404FD0 ; int __cdecl sub_404FD0(FILE *, FILE *, int, int, va_list)
.text:00404FD0 sub_404FD0      proc near               ; CODE XREF: sub_4051A0+2A↓p
.text:00404FD0
.text:00404FD0 Stream          = dword ptr -2Ch
.text:00404FD0 Format          = dword ptr -28h
.text:00404FD0 ArgList         = dword ptr -24h
.text:00404FD0 var_20          = dword ptr -20h
.text:00404FD0 var_1C          = dword ptr -1Ch
.text:00404FD0 var_14          = dword ptr -14h
.text:00404FD0 arg_0           = dword ptr  4
.text:00404FD0 arg_4           = dword ptr  8
.text:00404FD0 arg_8           = dword ptr  0Ch
.text:00404FD0 arg_C           = dword ptr  10h
.text:00404FD0 arg_10          = dword ptr  14h
.text:00404FD0
.text:00404FD0                 push    ebp
.text:00404FD1                 push    edi
.text:00404FD2                 push    esi
.text:00404FD3                 push    ebx
.text:00404FD4                 sub     esp, 1Ch
.text:00404FD7                 xor     ebx, ebx
.text:00404FD9                 mov     edi, [esp+2Ch+arg_10]
.text:00404FDD                 mov     edx, [esp+2Ch+arg_8]
.text:00404FE1                 mov     esi, [esp+2Ch+arg_0]
.text:00404FE5                 mov     eax, [edi]
.text:00404FE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404FEB                 mov     [esp+2Ch+var_14], edx
.text:00404FEF                 mov     ebp, [esp+2Ch+arg_C]
.text:00404FF3                 lea     edx, [edi+4]
.text:00404FF6                 test    eax, eax
.text:00404FF8                 jz      short loc_40500C
.text:00404FFA                 lea     esi, [esi+0]
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: sub_404FD0+3A↓j
.text:00405000                 mov     eax, edx
.text:00405002                 inc     ebx
.text:00405003                 mov     eax, [eax]
.text:00405005                 add     edx, 4
.text:00405008                 test    eax, eax
.text:0040500A                 jnz     short loc_405000
.text:0040500C
.text:0040500C loc_40500C:                             ; CODE XREF: sub_404FD0+28↑j
.text:0040500C                 test    ecx, ecx
.text:0040500E                 jz      loc_40517D
.text:00405014                 mov     [esp+2Ch+var_1C], ebp
.text:00405018                 mov     edx, [esp+2Ch+var_14]
.text:0040501C                 mov     [esp+2Ch+ArgList], ecx
.text:00405020                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00405028                 mov     [esp+2Ch+var_20], edx
.text:0040502C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040502F                 call    fprintf
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: sub_404FD0+1C9↓j
.text:00405034                 cmp     ebx, 9          ; switch 10 cases
.text:00405037                 ja      def_40503D      ; jumptable 0040503D default case
.text:0040503D                 jmp     ds:jpt_40503D[ebx*4] ; switch jump
.text:0040503D ; ---------------------------------------------------------------------------
.text:00405044 jpt_40503D      dd offset loc_40506C    ; DATA XREF: sub_404FD0+6D↑r
.text:00405044                 dd offset loc_405071    ; jump table for switch statement
.text:00405044                 dd offset loc_405111
.text:00405044                 dd offset loc_40511D
.text:00405044                 dd offset loc_405129
.text:00405044                 dd offset loc_405135
.text:00405044                 dd offset loc_405141
.text:00405044                 dd offset loc_40514D
.text:00405044                 dd offset loc_405159
.text:00405044                 dd offset loc_405165
.text:0040506C ; ---------------------------------------------------------------------------
.text:0040506C
.text:0040506C loc_40506C:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040506C                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040506C                 call    abort           ; jumptable 0040503D case 0
.text:00405071 ; ---------------------------------------------------------------------------
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405071                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405071                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040503D case 1
.text:00405078                 nop
.text:00405079                 lea     esi, [esi+0]
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: sub_404FD0+148↓j
.text:00405080                                         ; sub_404FD0+154↓j ...
.text:00405080                 call    ds:libintl_gettext
.text:00405086                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040508A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040508D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405091                 call    vfprintf
.text:00405096                 mov     ebx, [esi+4]
.text:00405099                 dec     ebx
.text:0040509A                 test    ebx, ebx
.text:0040509C                 mov     [esi+4], ebx
.text:0040509F                 js      short loc_4050FF
.text:004050A1                 mov     edi, [esi]
.text:004050A3                 mov     byte ptr [edi], 0Ah
.text:004050A6                 inc     dword ptr [esi]
.text:004050A8
.text:004050A8 loc_4050A8:                             ; CODE XREF: sub_404FD0+13F↓j
.text:004050A8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004050AC                 mov     edx, off_40A030 ; "Copyright (C) 2005 Free Software Founda"...
.text:004050B2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004050B5                 call    fputs
.text:004050BA                 mov     ebp, [esi+4]
.text:004050BD                 dec     ebp
.text:004050BE                 test    ebp, ebp
.text:004050C0                 mov     [esi+4], ebp
.text:004050C3                 js      short loc_4050ED
.text:004050C5                 mov     ecx, [esi]
.text:004050C7                 mov     byte ptr [ecx], 0Ah
.text:004050CA                 inc     dword ptr [esi]
.text:004050CC
.text:004050CC loc_4050CC:                             ; CODE XREF: sub_404FD0+12D↓j
.text:004050CC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004050D0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004050D7                 call    ds:libintl_gettext
.text:004050DD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004050E1                 add     esp, 1Ch
.text:004050E4                 pop     ebx
.text:004050E5                 pop     esi
.text:004050E6                 pop     edi
.text:004050E7                 pop     ebp
.text:004050E8                 jmp     fputs
.text:004050ED ; ---------------------------------------------------------------------------
.text:004050ED
.text:004050ED loc_4050ED:                             ; CODE XREF: sub_404FD0+F3↑j
.text:004050ED                 mov     [esp+2Ch+Format], esi ; File
.text:004050F1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004050F8                 call    _flsbuf
.text:004050FD                 jmp     short loc_4050CC
.text:004050FF ; ---------------------------------------------------------------------------
.text:004050FF
.text:004050FF loc_4050FF:                             ; CODE XREF: sub_404FD0+CF↑j
.text:004050FF                 mov     [esp+2Ch+Format], esi ; File
.text:00405103                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040510A                 call    _flsbuf
.text:0040510F                 jmp     short loc_4050A8
.text:00405111 ; ---------------------------------------------------------------------------
.text:00405111
.text:00405111 loc_405111:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405111                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405111                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040503D case 2
.text:00405118                 jmp     loc_405080
.text:0040511D ; ---------------------------------------------------------------------------
.text:0040511D
.text:0040511D loc_40511D:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040511D                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040511D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040503D case 3
.text:00405124                 jmp     loc_405080
.text:00405129 ; ---------------------------------------------------------------------------
.text:00405129
.text:00405129 loc_405129:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405129                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405129                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040503D case 4
.text:00405130                 jmp     loc_405080
.text:00405135 ; ---------------------------------------------------------------------------
.text:00405135
.text:00405135 loc_405135:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405135                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405135                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040503D case 5
.text:0040513C                 jmp     loc_405080
.text:00405141 ; ---------------------------------------------------------------------------
.text:00405141
.text:00405141 loc_405141:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405141                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405141                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040503D case 6
.text:00405148                 jmp     loc_405080
.text:0040514D ; ---------------------------------------------------------------------------
.text:0040514D
.text:0040514D loc_40514D:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040514D                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040514D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040503D case 7
.text:00405154                 jmp     loc_405080
.text:00405159 ; ---------------------------------------------------------------------------
.text:00405159
.text:00405159 loc_405159:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405159                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405159                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040503D case 8
.text:00405160                 jmp     loc_405080
.text:00405165 ; ---------------------------------------------------------------------------
.text:00405165
.text:00405165 loc_405165:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405165                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405165                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040503D case 9
.text:0040516C                 jmp     loc_405080
.text:00405171 ; ---------------------------------------------------------------------------
.text:00405171
.text:00405171 def_40503D:                             ; CODE XREF: sub_404FD0+67↑j
.text:00405171                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040503D default case
.text:00405178                 jmp     loc_405080
.text:0040517D ; ---------------------------------------------------------------------------
.text:0040517D
.text:0040517D loc_40517D:                             ; CODE XREF: sub_404FD0+3E↑j
.text:0040517D                 mov     [esp+2Ch+var_20], ebp
.text:00405181                 mov     ecx, [esp+2Ch+var_14]
.text:00405185                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040518D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405190                 mov     [esp+2Ch+ArgList], ecx
.text:00405194                 call    fprintf
.text:00405199                 jmp     loc_405034
.text:00405199 sub_404FD0      endp
.text:00405199
.text:00405199 ; ---------------------------------------------------------------------------
.text:0040519E                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0
.text:004051A0 ; int __cdecl sub_4051A0(FILE *, FILE *, int, int, char)
.text:004051A0 sub_4051A0      proc near               ; CODE XREF: sub_401C00+473↑p
.text:004051A0
.text:004051A0 var_1C          = dword ptr -1Ch
.text:004051A0 var_18          = dword ptr -18h
.text:004051A0 var_14          = dword ptr -14h
.text:004051A0 var_10          = dword ptr -10h
.text:004051A0 var_C           = dword ptr -0Ch
.text:004051A0 arg_0           = dword ptr  4
.text:004051A0 arg_4           = dword ptr  8
.text:004051A0 arg_8           = dword ptr  0Ch
.text:004051A0 arg_C           = dword ptr  10h
.text:004051A0 arg_10          = byte ptr  14h
.text:004051A0
.text:004051A0                 sub     esp, 1Ch
.text:004051A3                 mov     edx, [esp+1Ch+arg_C]
.text:004051A7                 lea     ecx, [esp+1Ch+arg_10]
.text:004051AB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:004051AF                 mov     ecx, [esp+1Ch+arg_8]
.text:004051B3                 mov     [esp+1Ch+var_10], edx ; int
.text:004051B7                 mov     edx, [esp+1Ch+arg_4]
.text:004051BB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004051BF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004051C3                 mov     edx, [esp+1Ch+arg_0]
.text:004051C7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004051CA                 call    sub_404FD0
.text:004051CF                 add     esp, 1Ch
.text:004051D2                 retn
.text:004051D2 sub_4051A0      endp
.text:004051D2
.text:004051D2 ; ---------------------------------------------------------------------------
.text:004051D3                 align 10h
.text:004051E0 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:004051E0                                         ; DATA XREF: sub_405250+651↓o
.text:00405208                 align 20h
.text:00405220 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00405220                                         ; DATA XREF: sub_405250+659↓o
.text:00405246                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250
.text:00405250 ; int __cdecl sub_405250(char *, char **, int, int, char *Str)
.text:00405250 sub_405250      proc near               ; CODE XREF: sub_401C00+6E8↑p
.text:00405250
.text:00405250 String          = dword ptr -3Ch
.text:00405250 EndPtr          = dword ptr -38h
.text:00405250 Radix           = dword ptr -34h
.text:00405250 var_28          = dword ptr -28h
.text:00405250 var_24          = dword ptr -24h
.text:00405250 var_20          = dword ptr -20h
.text:00405250 var_1C          = dword ptr -1Ch
.text:00405250 var_18          = dword ptr -18h
.text:00405250 var_14          = byte ptr -14h
.text:00405250 arg_0           = dword ptr  4
.text:00405250 arg_4           = dword ptr  8
.text:00405250 arg_8           = dword ptr  0Ch
.text:00405250 arg_C           = dword ptr  10h
.text:00405250 Str             = dword ptr  14h
.text:00405250
.text:00405250                 push    ebp
.text:00405251                 push    edi
.text:00405252                 push    esi
.text:00405253                 push    ebx
.text:00405254                 sub     esp, 2Ch
.text:00405257                 mov     ebx, [esp+3Ch+arg_8]
.text:0040525B                 mov     [esp+3Ch+var_1C], 0
.text:00405263                 mov     esi, [esp+3Ch+arg_0]
.text:00405267                 mov     ebp, [esp+3Ch+Str]
.text:0040526B                 cmp     ebx, 24h ; '$'
.text:0040526E                 ja      loc_405899
.text:00405274                 mov     edi, [esp+3Ch+arg_4]
.text:00405278                 test    edi, edi
.text:0040527A                 jz      loc_405890
.text:00405280
.text:00405280 loc_405280:                             ; CODE XREF: sub_405250+644↓j
.text:00405280                 call    _errno
.text:00405285                 mov     dword ptr [eax], 0
.text:0040528B                 mov     [esp+3Ch+Radix], ebx ; Radix
.text:0040528F                 mov     [esp+3Ch+EndPtr], edi ; EndPtr
.text:00405293                 mov     [esp+3Ch+String], esi ; String
.text:00405296                 call    strtol
.text:0040529B                 mov     [esp+3Ch+var_18], eax
.text:0040529F                 mov     eax, [edi]
.text:004052A1                 cmp     eax, esi
.text:004052A3                 jz      loc_405860
.text:004052A9                 call    _errno
.text:004052AE                 mov     edx, [eax]
.text:004052B0                 test    edx, edx
.text:004052B2                 jnz     loc_405832
.text:004052B8
.text:004052B8 loc_4052B8:                             ; CODE XREF: sub_405250+5F4↓j
.text:004052B8                                         ; sub_405250+636↓j
.text:004052B8                 test    ebp, ebp
.text:004052BA                 jz      loc_405823
.text:004052C0                 mov     esi, [edi]
.text:004052C2                 movzx   eax, byte ptr [esi]
.text:004052C5                 test    al, al
.text:004052C7                 jnz     short loc_4052E0
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: sub_405250+230↓j
.text:004052C9                                         ; sub_405250+23B↓j
.text:004052C9                 mov     esi, [esp+3Ch+var_18]
.text:004052CD                 mov     edx, [esp+3Ch+arg_C]
.text:004052D1                 mov     [edx], esi
.text:004052D3
.text:004052D3 loc_4052D3:                             ; CODE XREF: sub_405250+5DD↓j
.text:004052D3                 mov     eax, [esp+3Ch+var_1C]
.text:004052D7
.text:004052D7 loc_4052D7:                             ; CODE XREF: sub_405250+C1↓j
.text:004052D7                                         ; sub_405250+605↓j
.text:004052D7                 add     esp, 2Ch
.text:004052DA                 pop     ebx
.text:004052DB                 pop     esi
.text:004052DC                 pop     edi
.text:004052DD                 pop     ebp
.text:004052DE                 retn
.text:004052DE ; ---------------------------------------------------------------------------
.text:004052DF                 align 10h
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: sub_405250+77↑j
.text:004052E0                 mov     [esp+3Ch+var_20], 1
.text:004052E8                 movsx   edx, al
.text:004052EB                 mov     ebx, 400h
.text:004052F0                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:004052F4                 mov     [esp+3Ch+String], ebp ; Str
.text:004052F7                 call    strchr
.text:004052FC                 test    eax, eax
.text:004052FE                 jnz     short loc_405313
.text:00405300                 mov     ebp, [esp+3Ch+var_18]
.text:00405304                 mov     edi, [esp+3Ch+arg_C]
.text:00405308                 mov     [edi], ebp
.text:0040530A
.text:0040530A loc_40530A:                             ; CODE XREF: sub_405250+55A↓j
.text:0040530A                 mov     eax, [esp+3Ch+var_1C]
.text:0040530E                 or      eax, 2
.text:00405311                 jmp     short loc_4052D7
.text:00405313 ; ---------------------------------------------------------------------------
.text:00405313
.text:00405313 loc_405313:                             ; CODE XREF: sub_405250+AE↑j
.text:00405313                 mov     [esp+3Ch+EndPtr], 30h ; '0' ; Val
.text:0040531B                 mov     [esp+3Ch+String], ebp ; Str
.text:0040531E                 call    strchr
.text:00405323                 test    eax, eax
.text:00405325                 jz      loc_405818
.text:0040532B                 mov     ecx, [edi]
.text:0040532D                 mov     [esp+3Ch+var_24], ecx
.text:00405331                 movsx   eax, byte ptr [ecx+1]
.text:00405335                 cmp     eax, 44h ; 'D'
.text:00405338                 jz      loc_4057E2
.text:0040533E                 cmp     eax, 44h ; 'D'
.text:00405341                 jg      loc_4057F4
.text:00405347                 cmp     eax, 42h ; 'B'
.text:0040534A                 jz      loc_4057E2
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: sub_405250+59F↓j
.text:00405350                                         ; sub_405250+5A7↓j ...
.text:00405350                 mov     ebp, [esp+3Ch+var_24]
.text:00405354                 movsx   eax, byte ptr [ebp+0]
.text:00405358                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040535B                 cmp     eax, 35h
.text:0040535E                 ja      def_405364      ; jumptable 00405364 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405364                 jmp     ds:jpt_405364[eax*4] ; switch jump
.text:00405364 ; ---------------------------------------------------------------------------
.text:0040536B                 align 4
.text:0040536C jpt_405364      dd offset loc_4054A9, offset def_405364, offset def_405364
.text:0040536C                                         ; DATA XREF: sub_405250+114↑r
.text:0040536C                 dd offset loc_4054CD, offset def_405364, offset loc_40563D ; jump table for switch statement
.text:0040536C                 dd offset def_405364, offset def_405364, offset def_405364
.text:0040536C                 dd offset loc_405699, offset def_405364, offset loc_4056E4
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_405529
.text:0040536C                 dd offset def_405364, offset def_405364, offset def_405364
.text:0040536C                 dd offset loc_405741, offset def_405364, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_405585
.text:0040536C                 dd offset loc_4055E1, offset def_405364, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_405444
.text:0040536C                 dd offset loc_40546A, offset def_405364, offset def_405364
.text:0040536C                 dd offset def_405364, offset loc_40563D, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_405699
.text:0040536C                 dd offset def_405364, offset loc_4056E4, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset def_405364
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_405741
.text:0040536C                 dd offset def_405364, offset def_405364, offset loc_4057AF
.text:00405444 ; ---------------------------------------------------------------------------
.text:00405444
.text:00405444 loc_405444:                             ; CODE XREF: sub_405250+114↑j
.text:00405444                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:00405444                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00405364 case 98
.text:00405448                 mov     edx, 200h
.text:0040544D                 cmp     ecx, 0FFC00000h
.text:00405453                 jl      short loc_40549F
.text:00405455                 mov     eax, 7FFFFFFFh
.text:0040545A                 mov     esi, edx
.text:0040545C                 cdq
.text:0040545D                 idiv    esi
.text:0040545F                 cmp     eax, ecx
.text:00405461                 jl      short loc_405490
.text:00405463                 shl     ecx, 9
.text:00405466
.text:00405466 loc_405466:                             ; CODE XREF: sub_405250+27B↓j
.text:00405466                 mov     [esp+3Ch+var_18], ecx
.text:0040546A
.text:0040546A loc_40546A:                             ; CODE XREF: sub_405250+114↑j
.text:0040546A                                         ; sub_405250+58D↓j
.text:0040546A                                         ; DATA XREF: ...
.text:0040546A                 xor     eax, eax        ; jumptable 00405364 case 99
.text:0040546C
.text:0040546C loc_40546C:                             ; CODE XREF: sub_405250+24D↓j
.text:0040546C                                         ; sub_405250+2AF↓j ...
.text:0040546C                 or      [esp+3Ch+var_1C], eax
.text:00405470                 mov     ebp, [esp+3Ch+var_24]
.text:00405474                 mov     eax, [esp+3Ch+var_20]
.text:00405478                 add     ebp, eax
.text:0040547A                 mov     [edi], ebp
.text:0040547C                 cmp     byte ptr [ebp+0], 0
.text:00405480                 jz      loc_4052C9
.text:00405486                 or      [esp+3Ch+var_1C], 2
.text:0040548B                 jmp     loc_4052C9
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_405250+211↑j
.text:00405490                                         ; sub_405250+276↓j ...
.text:00405490                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405498
.text:00405498 loc_405498:                             ; CODE XREF: sub_405250+257↓j
.text:00405498                 mov     eax, 1
.text:0040549D                 jmp     short loc_40546C
.text:0040549F ; ---------------------------------------------------------------------------
.text:0040549F
.text:0040549F loc_40549F:                             ; CODE XREF: sub_405250+203↑j
.text:0040549F                                         ; sub_405250+268↓j ...
.text:0040549F                 mov     [esp+3Ch+var_18], 80000000h
.text:004054A7                 jmp     short loc_405498
.text:004054A9 ; ---------------------------------------------------------------------------
.text:004054A9
.text:004054A9 loc_4054A9:                             ; CODE XREF: sub_405250+114↑j
.text:004054A9                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:004054A9                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00405364 case 66
.text:004054AD                 mov     edx, 400h
.text:004054B2                 cmp     ecx, 0FFE00000h
.text:004054B8                 jl      short loc_40549F
.text:004054BA                 mov     eax, 7FFFFFFFh
.text:004054BF                 mov     ebp, edx
.text:004054C1                 cdq
.text:004054C2                 idiv    ebp
.text:004054C4                 cmp     eax, ecx
.text:004054C6                 jl      short loc_405490
.text:004054C8                 shl     ecx, 0Ah
.text:004054CB                 jmp     short loc_405466
.text:004054CD ; ---------------------------------------------------------------------------
.text:004054CD
.text:004054CD loc_4054CD:                             ; CODE XREF: sub_405250+114↑j
.text:004054CD                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:004054CD                 xor     ebp, ebp        ; jumptable 00405364 case 69
.text:004054CF                 mov     esi, 5
.text:004054D4
.text:004054D4 loc_4054D4:                             ; CODE XREF: sub_405250+2AD↓j
.text:004054D4                 mov     eax, 80000000h
.text:004054D9                 mov     ecx, [esp+3Ch+var_18]
.text:004054DD                 cdq
.text:004054DE                 idiv    ebx
.text:004054E0                 cmp     ecx, eax
.text:004054E2                 mov     [esp+3Ch+var_28], eax
.text:004054E6                 jge     short loc_405504
.text:004054E8                 mov     [esp+3Ch+var_18], 80000000h
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_405250+2CC↓j
.text:004054F0                 mov     eax, 1
.text:004054F5
.text:004054F5 loc_4054F5:                             ; CODE XREF: sub_405250+2D7↓j
.text:004054F5                 dec     esi
.text:004054F6                 or      ebp, eax
.text:004054F8                 cmp     esi, 0FFFFFFFFh
.text:004054FB                 mov     eax, ebp
.text:004054FD                 jnz     short loc_4054D4
.text:004054FF                 jmp     loc_40546C
.text:00405504 ; ---------------------------------------------------------------------------
.text:00405504
.text:00405504 loc_405504:                             ; CODE XREF: sub_405250+296↑j
.text:00405504                 mov     eax, 7FFFFFFFh
.text:00405509                 cdq
.text:0040550A                 idiv    ebx
.text:0040550C                 cmp     eax, ecx
.text:0040550E                 mov     [esp+3Ch+var_28], eax
.text:00405512                 jge     short loc_40551E
.text:00405514                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:0040551C                 jmp     short loc_4054F0
.text:0040551E ; ---------------------------------------------------------------------------
.text:0040551E
.text:0040551E loc_40551E:                             ; CODE XREF: sub_405250+2C2↑j
.text:0040551E                 imul    ecx, ebx
.text:00405521                 xor     eax, eax
.text:00405523                 mov     [esp+3Ch+var_18], ecx
.text:00405527                 jmp     short loc_4054F5
.text:00405529 ; ---------------------------------------------------------------------------
.text:00405529
.text:00405529 loc_405529:                             ; CODE XREF: sub_405250+114↑j
.text:00405529                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:00405529                 xor     ebp, ebp        ; jumptable 00405364 case 80
.text:0040552B                 mov     esi, 4
.text:00405530
.text:00405530 loc_405530:                             ; CODE XREF: sub_405250+309↓j
.text:00405530                 mov     eax, 80000000h
.text:00405535                 mov     ecx, [esp+3Ch+var_18]
.text:00405539                 cdq
.text:0040553A                 idiv    ebx
.text:0040553C                 cmp     ecx, eax
.text:0040553E                 mov     [esp+3Ch+var_28], eax
.text:00405542                 jge     short loc_405560
.text:00405544                 mov     [esp+3Ch+var_18], 80000000h
.text:0040554C
.text:0040554C loc_40554C:                             ; CODE XREF: sub_405250+328↓j
.text:0040554C                 mov     eax, 1
.text:00405551
.text:00405551 loc_405551:                             ; CODE XREF: sub_405250+333↓j
.text:00405551                 dec     esi
.text:00405552                 or      ebp, eax
.text:00405554                 cmp     esi, 0FFFFFFFFh
.text:00405557                 mov     eax, ebp
.text:00405559                 jnz     short loc_405530
.text:0040555B                 jmp     loc_40546C
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405560
.text:00405560 loc_405560:                             ; CODE XREF: sub_405250+2F2↑j
.text:00405560                 mov     eax, 7FFFFFFFh
.text:00405565                 cdq
.text:00405566                 idiv    ebx
.text:00405568                 cmp     eax, ecx
.text:0040556A                 mov     [esp+3Ch+var_28], eax
.text:0040556E                 jge     short loc_40557A
.text:00405570                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405578                 jmp     short loc_40554C
.text:0040557A ; ---------------------------------------------------------------------------
.text:0040557A
.text:0040557A loc_40557A:                             ; CODE XREF: sub_405250+31E↑j
.text:0040557A                 imul    ecx, ebx
.text:0040557D                 xor     eax, eax
.text:0040557F                 mov     [esp+3Ch+var_18], ecx
.text:00405583                 jmp     short loc_405551
.text:00405585 ; ---------------------------------------------------------------------------
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_405250+114↑j
.text:00405585                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:00405585                 xor     ebp, ebp        ; jumptable 00405364 case 89
.text:00405587                 mov     esi, 7
.text:0040558C
.text:0040558C loc_40558C:                             ; CODE XREF: sub_405250+365↓j
.text:0040558C                 mov     eax, 80000000h
.text:00405591                 mov     ecx, [esp+3Ch+var_18]
.text:00405595                 cdq
.text:00405596                 idiv    ebx
.text:00405598                 cmp     ecx, eax
.text:0040559A                 mov     [esp+3Ch+var_28], eax
.text:0040559E                 jge     short loc_4055BC
.text:004055A0                 mov     [esp+3Ch+var_18], 80000000h
.text:004055A8
.text:004055A8 loc_4055A8:                             ; CODE XREF: sub_405250+384↓j
.text:004055A8                 mov     eax, 1
.text:004055AD
.text:004055AD loc_4055AD:                             ; CODE XREF: sub_405250+38F↓j
.text:004055AD                 dec     esi
.text:004055AE                 or      ebp, eax
.text:004055B0                 cmp     esi, 0FFFFFFFFh
.text:004055B3                 mov     eax, ebp
.text:004055B5                 jnz     short loc_40558C
.text:004055B7                 jmp     loc_40546C
.text:004055BC ; ---------------------------------------------------------------------------
.text:004055BC
.text:004055BC loc_4055BC:                             ; CODE XREF: sub_405250+34E↑j
.text:004055BC                 mov     eax, 7FFFFFFFh
.text:004055C1                 cdq
.text:004055C2                 idiv    ebx
.text:004055C4                 cmp     eax, ecx
.text:004055C6                 mov     [esp+3Ch+var_28], eax
.text:004055CA                 jge     short loc_4055D6
.text:004055CC                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004055D4                 jmp     short loc_4055A8
.text:004055D6 ; ---------------------------------------------------------------------------
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: sub_405250+37A↑j
.text:004055D6                 imul    ecx, ebx
.text:004055D9                 xor     eax, eax
.text:004055DB                 mov     [esp+3Ch+var_18], ecx
.text:004055DF                 jmp     short loc_4055AD
.text:004055E1 ; ---------------------------------------------------------------------------
.text:004055E1
.text:004055E1 loc_4055E1:                             ; CODE XREF: sub_405250+114↑j
.text:004055E1                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:004055E1                 xor     ebp, ebp        ; jumptable 00405364 case 90
.text:004055E3                 mov     esi, 6
.text:004055E8
.text:004055E8 loc_4055E8:                             ; CODE XREF: sub_405250+3C1↓j
.text:004055E8                 mov     eax, 80000000h
.text:004055ED                 mov     ecx, [esp+3Ch+var_18]
.text:004055F1                 cdq
.text:004055F2                 idiv    ebx
.text:004055F4                 cmp     ecx, eax
.text:004055F6                 mov     [esp+3Ch+var_28], eax
.text:004055FA                 jge     short loc_405618
.text:004055FC                 mov     [esp+3Ch+var_18], 80000000h
.text:00405604
.text:00405604 loc_405604:                             ; CODE XREF: sub_405250+3E0↓j
.text:00405604                 mov     eax, 1
.text:00405609
.text:00405609 loc_405609:                             ; CODE XREF: sub_405250+3EB↓j
.text:00405609                 dec     esi
.text:0040560A                 or      ebp, eax
.text:0040560C                 cmp     esi, 0FFFFFFFFh
.text:0040560F                 mov     eax, ebp
.text:00405611                 jnz     short loc_4055E8
.text:00405613                 jmp     loc_40546C
.text:00405618 ; ---------------------------------------------------------------------------
.text:00405618
.text:00405618 loc_405618:                             ; CODE XREF: sub_405250+3AA↑j
.text:00405618                 mov     eax, 7FFFFFFFh
.text:0040561D                 cdq
.text:0040561E                 idiv    ebx
.text:00405620                 cmp     eax, ecx
.text:00405622                 mov     [esp+3Ch+var_28], eax
.text:00405626                 jge     short loc_405632
.text:00405628                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405630                 jmp     short loc_405604
.text:00405632 ; ---------------------------------------------------------------------------
.text:00405632
.text:00405632 loc_405632:                             ; CODE XREF: sub_405250+3D6↑j
.text:00405632                 imul    ecx, ebx
.text:00405635                 xor     eax, eax
.text:00405637                 mov     [esp+3Ch+var_18], ecx
.text:0040563B                 jmp     short loc_405609
.text:0040563D ; ---------------------------------------------------------------------------
.text:0040563D
.text:0040563D loc_40563D:                             ; CODE XREF: sub_405250+114↑j
.text:0040563D                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:0040563D                 xor     ebp, ebp        ; jumptable 00405364 cases 71,103
.text:0040563F                 mov     esi, 2
.text:00405644
.text:00405644 loc_405644:                             ; CODE XREF: sub_405250+41D↓j
.text:00405644                 mov     eax, 80000000h
.text:00405649                 mov     ecx, [esp+3Ch+var_18]
.text:0040564D                 cdq
.text:0040564E                 idiv    ebx
.text:00405650                 cmp     ecx, eax
.text:00405652                 mov     [esp+3Ch+var_28], eax
.text:00405656                 jge     short loc_405674
.text:00405658                 mov     [esp+3Ch+var_18], 80000000h
.text:00405660
.text:00405660 loc_405660:                             ; CODE XREF: sub_405250+43C↓j
.text:00405660                 mov     eax, 1
.text:00405665
.text:00405665 loc_405665:                             ; CODE XREF: sub_405250+447↓j
.text:00405665                 dec     esi
.text:00405666                 or      ebp, eax
.text:00405668                 cmp     esi, 0FFFFFFFFh
.text:0040566B                 mov     eax, ebp
.text:0040566D                 jnz     short loc_405644
.text:0040566F                 jmp     loc_40546C
.text:00405674 ; ---------------------------------------------------------------------------
.text:00405674
.text:00405674 loc_405674:                             ; CODE XREF: sub_405250+406↑j
.text:00405674                 mov     eax, 7FFFFFFFh
.text:00405679                 cdq
.text:0040567A                 idiv    ebx
.text:0040567C                 cmp     eax, ecx
.text:0040567E                 mov     [esp+3Ch+var_28], eax
.text:00405682                 jge     short loc_40568E
.text:00405684                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:0040568C                 jmp     short loc_405660
.text:0040568E ; ---------------------------------------------------------------------------
.text:0040568E
.text:0040568E loc_40568E:                             ; CODE XREF: sub_405250+432↑j
.text:0040568E                 imul    ecx, ebx
.text:00405691                 xor     eax, eax
.text:00405693                 mov     [esp+3Ch+var_18], ecx
.text:00405697                 jmp     short loc_405665
.text:00405699 ; ---------------------------------------------------------------------------
.text:00405699
.text:00405699 loc_405699:                             ; CODE XREF: sub_405250+114↑j
.text:00405699                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:00405699                 mov     eax, 80000000h  ; jumptable 00405364 cases 75,107
.text:0040569E                 mov     ecx, [esp+3Ch+var_18]
.text:004056A2                 lea     ebp, [esp+3Ch+var_18]
.text:004056A6                 cdq
.text:004056A7                 mov     esi, 7FFFFFFFh
.text:004056AC                 idiv    ebx
.text:004056AE                 cmp     ecx, eax
.text:004056B0                 jge     short loc_4056C8
.text:004056B2                 mov     [esp+3Ch+var_18], 80000000h
.text:004056BA
.text:004056BA loc_4056BA:                             ; CODE XREF: sub_405250+488↓j
.text:004056BA                 mov     edx, 1
.text:004056BF
.text:004056BF loc_4056BF:                             ; CODE XREF: sub_405250+492↓j
.text:004056BF                 xor     eax, eax
.text:004056C1                 or      eax, edx
.text:004056C3                 jmp     loc_40546C
.text:004056C8 ; ---------------------------------------------------------------------------
.text:004056C8
.text:004056C8 loc_4056C8:                             ; CODE XREF: sub_405250+460↑j
.text:004056C8                 mov     eax, esi
.text:004056CA                 cdq
.text:004056CB                 idiv    ebx
.text:004056CD                 cmp     eax, ecx
.text:004056CF                 jge     short loc_4056DA
.text:004056D1                 mov     dword ptr [ebp+0], 7FFFFFFFh
.text:004056D8                 jmp     short loc_4056BA
.text:004056DA ; ---------------------------------------------------------------------------
.text:004056DA
.text:004056DA loc_4056DA:                             ; CODE XREF: sub_405250+47F↑j
.text:004056DA                 imul    ecx, ebx
.text:004056DD                 xor     edx, edx
.text:004056DF                 mov     [ebp+0], ecx
.text:004056E2                 jmp     short loc_4056BF
.text:004056E4 ; ---------------------------------------------------------------------------
.text:004056E4
.text:004056E4 loc_4056E4:                             ; CODE XREF: sub_405250+114↑j
.text:004056E4                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:004056E4                 xor     ebp, ebp        ; jumptable 00405364 cases 77,109
.text:004056E6                 mov     esi, 1
.text:004056EB
.text:004056EB loc_4056EB:                             ; CODE XREF: sub_405250+4CA↓j
.text:004056EB                 mov     eax, 80000000h
.text:004056F0                 mov     ecx, [esp+3Ch+var_18]
.text:004056F4                 cdq
.text:004056F5                 idiv    ebx
.text:004056F7                 cmp     ecx, eax
.text:004056F9                 mov     [esp+3Ch+var_28], eax
.text:004056FD                 jge     short loc_40571C
.text:004056FF                 mov     [esp+3Ch+var_18], 80000000h
.text:00405707
.text:00405707 loc_405707:                             ; CODE XREF: sub_405250+4E4↓j
.text:00405707                 mov     eax, 1
.text:0040570C
.text:0040570C loc_40570C:                             ; CODE XREF: sub_405250+4EF↓j
.text:0040570C                 dec     esi
.text:0040570D                 or      ebp, eax
.text:0040570F                 cmp     esi, 0FFFFFFFFh
.text:00405712                 mov     eax, ebp
.text:00405714                 jz      loc_40546C
.text:0040571A                 jmp     short loc_4056EB
.text:0040571C ; ---------------------------------------------------------------------------
.text:0040571C
.text:0040571C loc_40571C:                             ; CODE XREF: sub_405250+4AD↑j
.text:0040571C                 mov     eax, 7FFFFFFFh
.text:00405721                 cdq
.text:00405722                 idiv    ebx
.text:00405724                 cmp     eax, ecx
.text:00405726                 mov     [esp+3Ch+var_28], eax
.text:0040572A                 jge     short loc_405736
.text:0040572C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405734                 jmp     short loc_405707
.text:00405736 ; ---------------------------------------------------------------------------
.text:00405736
.text:00405736 loc_405736:                             ; CODE XREF: sub_405250+4DA↑j
.text:00405736                 imul    ecx, ebx
.text:00405739                 xor     eax, eax
.text:0040573B                 mov     [esp+3Ch+var_18], ecx
.text:0040573F                 jmp     short loc_40570C
.text:00405741 ; ---------------------------------------------------------------------------
.text:00405741
.text:00405741 loc_405741:                             ; CODE XREF: sub_405250+114↑j
.text:00405741                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:00405741                 xor     ebp, ebp        ; jumptable 00405364 cases 84,116
.text:00405743                 mov     esi, 3
.text:00405748
.text:00405748 loc_405748:                             ; CODE XREF: sub_405250+521↓j
.text:00405748                 mov     eax, 80000000h
.text:0040574D                 mov     ecx, [esp+3Ch+var_18]
.text:00405751                 cdq
.text:00405752                 idiv    ebx
.text:00405754                 cmp     ecx, eax
.text:00405756                 mov     [esp+3Ch+var_28], eax
.text:0040575A                 jge     short loc_405778
.text:0040575C                 mov     [esp+3Ch+var_18], 80000000h
.text:00405764
.text:00405764 loc_405764:                             ; CODE XREF: sub_405250+540↓j
.text:00405764                 mov     eax, 1
.text:00405769
.text:00405769 loc_405769:                             ; CODE XREF: sub_405250+54B↓j
.text:00405769                 dec     esi
.text:0040576A                 or      ebp, eax
.text:0040576C                 cmp     esi, 0FFFFFFFFh
.text:0040576F                 mov     eax, ebp
.text:00405771                 jnz     short loc_405748
.text:00405773                 jmp     loc_40546C
.text:00405778 ; ---------------------------------------------------------------------------
.text:00405778
.text:00405778 loc_405778:                             ; CODE XREF: sub_405250+50A↑j
.text:00405778                 mov     eax, 7FFFFFFFh
.text:0040577D                 cdq
.text:0040577E                 idiv    ebx
.text:00405780                 cmp     eax, ecx
.text:00405782                 mov     [esp+3Ch+var_28], eax
.text:00405786                 jge     short loc_405792
.text:00405788                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00405790                 jmp     short loc_405764
.text:00405792 ; ---------------------------------------------------------------------------
.text:00405792
.text:00405792 loc_405792:                             ; CODE XREF: sub_405250+536↑j
.text:00405792                 imul    ecx, ebx
.text:00405795                 xor     eax, eax
.text:00405797                 mov     [esp+3Ch+var_18], ecx
.text:0040579B                 jmp     short loc_405769
.text:0040579B ; ---------------------------------------------------------------------------
.text:0040579D                 align 10h
.text:004057A0
.text:004057A0 def_405364:                             ; CODE XREF: sub_405250+10E↑j
.text:004057A0                                         ; sub_405250+114↑j
.text:004057A0                                         ; DATA XREF: ...
.text:004057A0                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00405364 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004057A4                 mov     edi, [esp+3Ch+arg_C]
.text:004057A8                 mov     [edi], ecx
.text:004057AA                 jmp     loc_40530A
.text:004057AF ; ---------------------------------------------------------------------------
.text:004057AF
.text:004057AF loc_4057AF:                             ; CODE XREF: sub_405250+114↑j
.text:004057AF                                         ; DATA XREF: sub_405250:jpt_405364↑o
.text:004057AF                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00405364 case 119
.text:004057B3                 mov     edx, 2
.text:004057B8                 cmp     ecx, 0C0000000h
.text:004057BE                 jl      loc_40549F
.text:004057C4                 mov     eax, 7FFFFFFFh
.text:004057C9                 mov     esi, edx
.text:004057CB                 cdq
.text:004057CC                 idiv    esi
.text:004057CE                 cmp     eax, ecx
.text:004057D0                 jl      loc_405490
.text:004057D6                 lea     ebx, [ecx+ecx]
.text:004057D9                 mov     [esp+3Ch+var_18], ebx
.text:004057DD                 jmp     loc_40546A      ; jumptable 00405364 case 99
.text:004057E2 ; ---------------------------------------------------------------------------
.text:004057E2
.text:004057E2 loc_4057E2:                             ; CODE XREF: sub_405250+E8↑j
.text:004057E2                                         ; sub_405250+FA↑j
.text:004057E2                 mov     [esp+3Ch+var_20], 2
.text:004057EA                 mov     ebx, 3E8h
.text:004057EF                 jmp     loc_405350
.text:004057F4 ; ---------------------------------------------------------------------------
.text:004057F4
.text:004057F4 loc_4057F4:                             ; CODE XREF: sub_405250+F1↑j
.text:004057F4                 cmp     eax, 69h ; 'i'
.text:004057F7                 jnz     loc_405350
.text:004057FD                 mov     eax, [esp+3Ch+var_24]
.text:00405801                 cmp     byte ptr [eax+2], 42h ; 'B'
.text:00405805                 jnz     loc_405350
.text:0040580B                 mov     [esp+3Ch+var_20], 3
.text:00405813                 jmp     loc_405350
.text:00405818 ; ---------------------------------------------------------------------------
.text:00405818
.text:00405818 loc_405818:                             ; CODE XREF: sub_405250+D5↑j
.text:00405818                 mov     esi, [edi]
.text:0040581A                 mov     [esp+3Ch+var_24], esi
.text:0040581E                 jmp     loc_405350
.text:00405823 ; ---------------------------------------------------------------------------
.text:00405823
.text:00405823 loc_405823:                             ; CODE XREF: sub_405250+6A↑j
.text:00405823                 mov     ebx, [esp+3Ch+var_18]
.text:00405827                 mov     ecx, [esp+3Ch+arg_C]
.text:0040582B                 mov     [ecx], ebx
.text:0040582D                 jmp     loc_4052D3
.text:00405832 ; ---------------------------------------------------------------------------
.text:00405832
.text:00405832 loc_405832:                             ; CODE XREF: sub_405250+62↑j
.text:00405832                 call    _errno
.text:00405837                 cmp     dword ptr [eax], 22h ; '"'
.text:0040583A                 jnz     short loc_405850
.text:0040583C                 mov     [esp+3Ch+var_1C], 1
.text:00405844                 jmp     loc_4052B8
.text:00405844 ; ---------------------------------------------------------------------------
.text:00405849                 align 10h
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_405250+5EA↑j
.text:00405850                                         ; sub_405250+612↓j ...
.text:00405850                 mov     eax, 4
.text:00405855                 jmp     loc_4052D7
.text:00405855 ; ---------------------------------------------------------------------------
.text:0040585A                 align 10h
.text:00405860
.text:00405860 loc_405860:                             ; CODE XREF: sub_405250+53↑j
.text:00405860                 test    ebp, ebp
.text:00405862                 jz      short loc_405850
.text:00405864                 movzx   eax, byte ptr [eax]
.text:00405867                 test    al, al
.text:00405869                 jz      short loc_405850
.text:0040586B                 mov     [esp+3Ch+String], ebp ; Str
.text:0040586E                 movsx   edx, al
.text:00405871                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:00405875                 call    strchr
.text:0040587A                 test    eax, eax
.text:0040587C                 jz      short loc_405850
.text:0040587E                 mov     [esp+3Ch+var_18], 1
.text:00405886                 jmp     loc_4052B8
.text:00405886 ; ---------------------------------------------------------------------------
.text:0040588B                 align 10h
.text:00405890
.text:00405890 loc_405890:                             ; CODE XREF: sub_405250+2A↑j
.text:00405890                 lea     edi, [esp+3Ch+var_14]
.text:00405894                 jmp     loc_405280
.text:00405899 ; ---------------------------------------------------------------------------
.text:00405899
.text:00405899 loc_405899:                             ; CODE XREF: sub_405250+1E↑j
.text:00405899                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004058A1                 mov     [esp+3Ch+EndPtr], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004058A9                 mov     [esp+3Ch+String], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004058B0                 call    _assert
.text:004058B0 sub_405250      endp
.text:004058B0
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B5                 align 10h
.text:004058C0                 mov     edx, [esp+4]
.text:004058C4                 mov     ds:dword_40B100, edx
.text:004058CA                 retn
.text:004058CA ; ---------------------------------------------------------------------------
.text:004058CB aWriteError     db 'write error',0      ; DATA XREF: sub_4058F0:loc_405939↓o
.text:004058D7 ; const char aSS_0[]
.text:004058D7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4058F0+77↓o
.text:004058DE ; const char aS_2[]
.text:004058DE aS_2            db '%s',0               ; DATA XREF: sub_4058F0+A0↓o
.text:004058E1 ; ---------------------------------------------------------------------------
.text:004058E1                 jmp     short sub_4058F0
.text:004058E1 ; ---------------------------------------------------------------------------
.text:004058E3                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0
.text:004058F0 ; void __cdecl sub_4058F0()
.text:004058F0 sub_4058F0      proc near               ; CODE XREF: .text:004058E1↑j
.text:004058F0                                         ; DATA XREF: sub_401C00+76↑o
.text:004058F0
.text:004058F0 Stream          = dword ptr -2Ch
.text:004058F0 ErrorMessage    = dword ptr -28h
.text:004058F0 var_24          = dword ptr -24h
.text:004058F0 var_20          = byte ptr -20h
.text:004058F0 var_1C          = dword ptr -1Ch
.text:004058F0 var_9           = byte ptr -9
.text:004058F0
.text:004058F0                 push    esi
.text:004058F1                 push    ebx
.text:004058F2                 sub     esp, 24h
.text:004058F5                 mov     edx, ds:_iob
.text:004058FB                 mov     ecx, [edx+2Ch]
.text:004058FE                 lea     esi, [edx+20h]
.text:00405901                 shr     ecx, 5
.text:00405904                 mov     bl, cl
.text:00405906                 mov     ecx, [edx+20h]
.text:00405909                 and     bl, 1
.text:0040590C                 cmp     ecx, [esi+8]
.text:0040590F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405912                 setz    [esp+2Ch+var_9]
.text:00405917                 call    fclose
.text:0040591C                 test    eax, eax
.text:0040591E                 setnz   al
.text:00405921                 test    bl, bl
.text:00405923                 jnz     loc_4059B3
.text:00405929                 test    al, al
.text:0040592B                 jz      short loc_405980
.text:0040592D
.text:0040592D loc_40592D:                             ; CODE XREF: sub_4058F0+CD↓j
.text:0040592D                 call    _errno
.text:00405932                 mov     esi, [eax]
.text:00405934
.text:00405934 loc_405934:                             ; CODE XREF: sub_4058F0+C7↓j
.text:00405934                 cmp     esi, 9
.text:00405937                 jz      short loc_4059A6
.text:00405939
.text:00405939 loc_405939:                             ; CODE XREF: sub_4058F0+B8↓j
.text:00405939                                         ; sub_4058F0+C1↓j
.text:00405939                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00405940                 call    ds:libintl_gettext
.text:00405946                 mov     ebx, eax
.text:00405948                 mov     eax, ds:dword_40B100
.text:0040594D                 test    eax, eax
.text:0040594F                 jz      short loc_405986
.text:00405951                 mov     [esp+2Ch+Stream], eax ; char *
.text:00405954                 call    sub_408070
.text:00405959                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040595D                 mov     edx, Code
.text:00405963                 mov     [esp+2Ch+var_1C], ebx
.text:00405967                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040596F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405973                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405976                 call    sub_408460
.text:0040597B                 nop
.text:0040597C                 lea     esi, [esi+0]
.text:00405980
.text:00405980 loc_405980:                             ; CODE XREF: sub_4058F0+3B↑j
.text:00405980                                         ; sub_4058F0+B4↓j ...
.text:00405980                 add     esp, 24h
.text:00405983                 pop     ebx
.text:00405984                 pop     esi
.text:00405985                 retn
.text:00405986 ; ---------------------------------------------------------------------------
.text:00405986
.text:00405986 loc_405986:                             ; CODE XREF: sub_4058F0+5F↑j
.text:00405986                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040598A                 mov     ebx, Code
.text:00405990                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00405998                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040599C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040599F                 call    sub_408460
.text:004059A4                 jmp     short loc_405980
.text:004059A6 ; ---------------------------------------------------------------------------
.text:004059A6
.text:004059A6 loc_4059A6:                             ; CODE XREF: sub_4058F0+47↑j
.text:004059A6                 test    bl, bl
.text:004059A8                 jnz     short loc_405939
.text:004059AA                 cmp     [esp+2Ch+var_9], 0
.text:004059AF                 jnz     short loc_405980
.text:004059B1                 jmp     short loc_405939
.text:004059B3 ; ---------------------------------------------------------------------------
.text:004059B3
.text:004059B3 loc_4059B3:                             ; CODE XREF: sub_4058F0+33↑j
.text:004059B3                 xor     esi, esi
.text:004059B5                 test    al, al
.text:004059B7                 jz      loc_405934
.text:004059BD                 jmp     loc_40592D
.text:004059BD sub_4058F0      endp
.text:004059BD
.text:004059BD ; ---------------------------------------------------------------------------
.text:004059C2                 align 10h
.text:004059D0 ; const char aPosix2Version[]
.text:004059D0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_4059E0+C↓o
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0
.text:004059E0 sub_4059E0      proc near               ; CODE XREF: sub_401C00+71↑p
.text:004059E0
.text:004059E0 VarName         = dword ptr -1Ch
.text:004059E0 EndPtr          = dword ptr -18h
.text:004059E0 Radix           = dword ptr -14h
.text:004059E0 var_8           = dword ptr -8
.text:004059E0 var_4           = dword ptr -4
.text:004059E0
.text:004059E0                 sub     esp, 1Ch
.text:004059E3                 mov     [esp+1Ch+var_4], ebx
.text:004059E7                 mov     ebx, 30A29h
.text:004059EC                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:004059F3                 call    getenv
.text:004059F8                 test    eax, eax
.text:004059FA                 jz      short loc_405A01
.text:004059FC                 cmp     byte ptr [eax], 0
.text:004059FF                 jnz     short loc_405A10
.text:00405A01
.text:00405A01 loc_405A01:                             ; CODE XREF: sub_4059E0+1A↑j
.text:00405A01                                         ; sub_4059E0+4F↓j ...
.text:00405A01                 mov     eax, ebx
.text:00405A03                 mov     ebx, [esp+1Ch+var_4]
.text:00405A07                 add     esp, 1Ch
.text:00405A0A                 retn
.text:00405A0A ; ---------------------------------------------------------------------------
.text:00405A0B                 align 10h
.text:00405A10
.text:00405A10 loc_405A10:                             ; CODE XREF: sub_4059E0+1F↑j
.text:00405A10                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00405A18                 lea     ecx, [esp+1Ch+var_8]
.text:00405A1C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00405A20                 mov     [esp+1Ch+VarName], eax ; String
.text:00405A23                 call    strtol
.text:00405A28                 mov     ecx, [esp+1Ch+var_8]
.text:00405A2C                 cmp     byte ptr [ecx], 0
.text:00405A2F                 jnz     short loc_405A01
.text:00405A31                 mov     ebx, eax
.text:00405A33                 jmp     short loc_405A01
.text:00405A33 sub_4059E0      endp
.text:00405A33
.text:00405A33 ; ---------------------------------------------------------------------------
.text:00405A35                 align 10h
.text:00405A40 byte_405A40     db 43h, 0               ; DATA XREF: sub_405A50+33↓o
.text:00405A42 aPosix          db 'POSIX',0            ; DATA XREF: sub_405A50+45↓o
.text:00405A48                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50
.text:00405A50 sub_405A50      proc near               ; CODE XREF: sub_401C00+67↑p
.text:00405A50
.text:00405A50 Category        = dword ptr -1Ch
.text:00405A50 Locale          = dword ptr -18h
.text:00405A50 var_10          = dword ptr -10h
.text:00405A50 var_C           = dword ptr -0Ch
.text:00405A50 var_8           = dword ptr -8
.text:00405A50 var_4           = dword ptr -4
.text:00405A50 arg_0           = dword ptr  4
.text:00405A50
.text:00405A50                 sub     esp, 1Ch
.text:00405A53                 mov     edx, [esp+1Ch+arg_0]
.text:00405A57                 mov     [esp+1Ch+var_10], ebx
.text:00405A5B                 mov     bl, 1
.text:00405A5D                 mov     [esp+1Ch+var_C], esi
.text:00405A61                 mov     [esp+1Ch+var_8], edi
.text:00405A65                 mov     [esp+1Ch+var_4], ebp
.text:00405A69                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00405A71                 mov     [esp+1Ch+Category], edx ; Category
.text:00405A74                 call    setlocale
.text:00405A79                 test    eax, eax
.text:00405A7B                 jz      short loc_405AA4
.text:00405A7D                 cld
.text:00405A7E                 mov     edx, 2
.text:00405A83                 mov     edi, offset byte_405A40
.text:00405A88                 mov     esi, eax
.text:00405A8A                 mov     ecx, edx
.text:00405A8C                 repe cmpsb
.text:00405A8E                 jz      short loc_405AA2
.text:00405A90                 mov     edx, 6
.text:00405A95                 mov     edi, offset aPosix ; "POSIX"
.text:00405A9A                 mov     esi, eax
.text:00405A9C                 mov     ecx, edx
.text:00405A9E                 repe cmpsb
.text:00405AA0                 jnz     short loc_405AA4
.text:00405AA2
.text:00405AA2 loc_405AA2:                             ; CODE XREF: sub_405A50+3E↑j
.text:00405AA2                 xor     ebx, ebx
.text:00405AA4
.text:00405AA4 loc_405AA4:                             ; CODE XREF: sub_405A50+2B↑j
.text:00405AA4                                         ; sub_405A50+50↑j
.text:00405AA4                 movzx   eax, bl
.text:00405AA7                 mov     esi, [esp+1Ch+var_C]
.text:00405AAB                 mov     ebx, [esp+1Ch+var_10]
.text:00405AAF                 mov     edi, [esp+1Ch+var_8]
.text:00405AB3                 mov     ebp, [esp+1Ch+var_4]
.text:00405AB7                 add     esp, 1Ch
.text:00405ABA                 retn
.text:00405ABA sub_405A50      endp
.text:00405ABA
.text:00405ABA ; ---------------------------------------------------------------------------
.text:00405ABB                 align 10h
.text:00405AC0                 sub     esp, 0Ch
.text:00405AC3                 mov     edx, [esp+14h]
.text:00405AC7                 mov     dword ptr [esp+4], 5
.text:00405ACF                 mov     [esp+8], edx
.text:00405AD3                 mov     edx, [esp+10h]
.text:00405AD7                 mov     [esp], edx
.text:00405ADA                 call    sub_407D00
.text:00405ADF                 add     esp, 0Ch
.text:00405AE2                 retn
.text:00405AE2 ; ---------------------------------------------------------------------------
.text:00405AE3                 align 10h
.text:00405AF0
.text:00405AF0 ; =============== S U B R O U T I N E =======================================
.text:00405AF0
.text:00405AF0
.text:00405AF0 ; int __cdecl sub_405AF0(char *)
.text:00405AF0 sub_405AF0      proc near               ; CODE XREF: sub_401C00+172↑p
.text:00405AF0                                         ; sub_401C00+1C6↑p ...
.text:00405AF0
.text:00405AF0 var_C           = dword ptr -0Ch
.text:00405AF0 var_8           = dword ptr -8
.text:00405AF0 var_4           = dword ptr -4
.text:00405AF0 arg_0           = dword ptr  4
.text:00405AF0
.text:00405AF0                 sub     esp, 0Ch
.text:00405AF3                 mov     edx, [esp+0Ch+arg_0]
.text:00405AF7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00405AFF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00405B06                 mov     [esp+0Ch+var_4], edx ; char *
.text:00405B0A                 call    sub_407D00
.text:00405B0F                 add     esp, 0Ch
.text:00405B12                 retn
.text:00405B12 sub_405AF0      endp
.text:00405B12
.text:00405B12 ; ---------------------------------------------------------------------------
.text:00405B13                 align 10h
.text:00405B20 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00405B20                                         ; DATA XREF: sub_405B90+C79↓o
.text:00405B48                 align 20h
.text:00405B60 a0StrtolBaseStr_0 db '0 <= strtol_base && strtol_base <= 36',0
.text:00405B60                                         ; DATA XREF: sub_405B90+C81↓o
.text:00405B86                 align 10h
.text:00405B90
.text:00405B90 ; =============== S U B R O U T I N E =======================================
.text:00405B90
.text:00405B90
.text:00405B90 ; int __cdecl sub_405B90(int, int, int, int, char *Str)
.text:00405B90 sub_405B90      proc near               ; CODE XREF: sub_401C00+155↑p
.text:00405B90                                         ; sub_401C00+27E↑p ...
.text:00405B90
.text:00405B90 C               = dword ptr -13Ch
.text:00405B90 Type            = dword ptr -138h
.text:00405B90 Radix           = dword ptr -134h
.text:00405B90 var_130         = dword ptr -130h
.text:00405B90 var_124         = dword ptr -124h
.text:00405B90 var_120         = dword ptr -120h
.text:00405B90 var_11C         = dword ptr -11Ch
.text:00405B90 var_118         = dword ptr -118h
.text:00405B90 var_114         = dword ptr -114h
.text:00405B90 var_110         = dword ptr -110h
.text:00405B90 var_10C         = dword ptr -10Ch
.text:00405B90 var_108         = dword ptr -108h
.text:00405B90 var_104         = dword ptr -104h
.text:00405B90 var_100         = dword ptr -100h
.text:00405B90 var_F8          = dword ptr -0F8h
.text:00405B90 var_F4          = dword ptr -0F4h
.text:00405B90 var_F0          = dword ptr -0F0h
.text:00405B90 var_EC          = dword ptr -0ECh
.text:00405B90 var_E8          = dword ptr -0E8h
.text:00405B90 var_E4          = dword ptr -0E4h
.text:00405B90 var_E0          = dword ptr -0E0h
.text:00405B90 var_D8          = dword ptr -0D8h
.text:00405B90 var_D4          = dword ptr -0D4h
.text:00405B90 var_D0          = dword ptr -0D0h
.text:00405B90 var_CC          = dword ptr -0CCh
.text:00405B90 var_C8          = dword ptr -0C8h
.text:00405B90 var_C4          = dword ptr -0C4h
.text:00405B90 var_C0          = dword ptr -0C0h
.text:00405B90 var_B8          = dword ptr -0B8h
.text:00405B90 var_B4          = dword ptr -0B4h
.text:00405B90 var_B0          = dword ptr -0B0h
.text:00405B90 var_AC          = dword ptr -0ACh
.text:00405B90 var_A8          = dword ptr -0A8h
.text:00405B90 var_A4          = dword ptr -0A4h
.text:00405B90 var_A0          = dword ptr -0A0h
.text:00405B90 var_98          = dword ptr -98h
.text:00405B90 var_94          = dword ptr -94h
.text:00405B90 var_90          = dword ptr -90h
.text:00405B90 var_8C          = dword ptr -8Ch
.text:00405B90 var_88          = dword ptr -88h
.text:00405B90 var_84          = dword ptr -84h
.text:00405B90 var_80          = dword ptr -80h
.text:00405B90 var_78          = dword ptr -78h
.text:00405B90 var_74          = dword ptr -74h
.text:00405B90 var_70          = dword ptr -70h
.text:00405B90 var_6C          = dword ptr -6Ch
.text:00405B90 var_68          = dword ptr -68h
.text:00405B90 var_64          = dword ptr -64h
.text:00405B90 var_60          = dword ptr -60h
.text:00405B90 var_5C          = dword ptr -5Ch
.text:00405B90 var_58          = dword ptr -58h
.text:00405B90 var_50          = dword ptr -50h
.text:00405B90 var_4C          = dword ptr -4Ch
.text:00405B90 var_48          = dword ptr -48h
.text:00405B90 var_44          = dword ptr -44h
.text:00405B90 var_40          = dword ptr -40h
.text:00405B90 var_3C          = dword ptr -3Ch
.text:00405B90 var_38          = dword ptr -38h
.text:00405B90 var_34          = dword ptr -34h
.text:00405B90 var_30          = dword ptr -30h
.text:00405B90 var_29          = byte ptr -29h
.text:00405B90 var_28          = dword ptr -28h
.text:00405B90 var_24          = dword ptr -24h
.text:00405B90 var_20          = dword ptr -20h
.text:00405B90 var_18          = byte ptr -18h
.text:00405B90 arg_0           = dword ptr  4
.text:00405B90 arg_4           = dword ptr  8
.text:00405B90 arg_8           = dword ptr  0Ch
.text:00405B90 arg_C           = dword ptr  10h
.text:00405B90 Str             = dword ptr  14h
.text:00405B90
.text:00405B90                 push    ebp
.text:00405B91                 xor     eax, eax
.text:00405B93                 push    edi
.text:00405B94                 push    esi
.text:00405B95                 push    ebx
.text:00405B96                 sub     esp, 12Ch
.text:00405B9C                 mov     ebp, [esp+13Ch+arg_8]
.text:00405BA3                 mov     [esp+13Ch+var_28], eax
.text:00405BAA                 mov     esi, [esp+13Ch+arg_0]
.text:00405BB1                 cmp     ebp, 24h ; '$'
.text:00405BB4                 ja      loc_406801
.text:00405BBA                 mov     edi, [esp+13Ch+arg_4]
.text:00405BC1                 test    edi, edi
.text:00405BC3                 jz      loc_4067F5
.text:00405BC9
.text:00405BC9 loc_405BC9:                             ; CODE XREF: sub_405B90+C6C↓j
.text:00405BC9                 movzx   edx, byte ptr [esi]
.text:00405BCC                 mov     ebx, esi
.text:00405BCE                 mov     [esp+13Ch+var_29], dl
.text:00405BD5                 lea     esi, [esi+0]
.text:00405BD9                 lea     edi, [edi+0]
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: sub_405B90+86↓j
.text:00405BE0                 movzx   edx, [esp+13Ch+var_29]
.text:00405BE8                 mov     ecx, ds:__mb_cur_max
.text:00405BEE                 cmp     dword ptr [ecx], 1
.text:00405BF1                 jz      loc_4067E2
.text:00405BF7                 mov     [esp+13Ch+Type], 8 ; Type
.text:00405BFF                 mov     [esp+13Ch+C], edx ; C
.text:00405C02                 call    _isctype
.text:00405C07
.text:00405C07 loc_405C07:                             ; CODE XREF: sub_405B90+C60↓j
.text:00405C07                 test    eax, eax
.text:00405C09                 jz      short loc_405C18
.text:00405C0B                 inc     ebx
.text:00405C0C                 movzx   eax, byte ptr [ebx]
.text:00405C0F                 mov     [esp+13Ch+var_29], al
.text:00405C16                 jmp     short loc_405BE0
.text:00405C18 ; ---------------------------------------------------------------------------
.text:00405C18
.text:00405C18 loc_405C18:                             ; CODE XREF: sub_405B90+79↑j
.text:00405C18                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00405C20                 mov     eax, 4
.text:00405C25                 jz      short loc_405CA2
.text:00405C27                 call    _errno
.text:00405C2C                 mov     dword ptr [eax], 0
.text:00405C32                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00405C36                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00405C3A                 mov     [esp+13Ch+C], esi ; String
.text:00405C3D                 call    _strtoull
.text:00405C42                 mov     [esp+13Ch+var_24], eax
.text:00405C49                 mov     eax, [edi]
.text:00405C4B                 mov     [esp+13Ch+var_20], edx
.text:00405C52                 cmp     eax, esi
.text:00405C54                 jz      loc_40679C
.text:00405C5A                 call    _errno
.text:00405C5F                 mov     ebx, [eax]
.text:00405C61                 test    ebx, ebx
.text:00405C63                 jnz     loc_406777
.text:00405C69
.text:00405C69 loc_405C69:                             ; CODE XREF: sub_405B90+BFD↓j
.text:00405C69                                         ; sub_405B90+C4D↓j
.text:00405C69                 mov     ebp, [esp+13Ch+Str]
.text:00405C70                 test    ebp, ebp
.text:00405C72                 jz      loc_406758
.text:00405C78                 mov     ebx, [edi]
.text:00405C7A                 movzx   eax, byte ptr [ebx]
.text:00405C7D                 test    al, al
.text:00405C7F                 jnz     short loc_405CAD
.text:00405C81
.text:00405C81 loc_405C81:                             ; CODE XREF: sub_405B90+312↓j
.text:00405C81                                         ; sub_405B90+320↓j
.text:00405C81                 mov     edx, [esp+13Ch+var_24]
.text:00405C88                 mov     edi, [esp+13Ch+var_20]
.text:00405C8F                 mov     ebx, [esp+13Ch+arg_C]
.text:00405C96                 mov     [ebx], edx
.text:00405C98                 mov     [ebx+4], edi
.text:00405C9B
.text:00405C9B loc_405C9B:                             ; CODE XREF: sub_405B90+BE2↓j
.text:00405C9B                 mov     eax, [esp+13Ch+var_28]
.text:00405CA2
.text:00405CA2 loc_405CA2:                             ; CODE XREF: sub_405B90+95↑j
.text:00405CA2                                         ; sub_405B90+16C↓j ...
.text:00405CA2                 add     esp, 12Ch
.text:00405CA8                 pop     ebx
.text:00405CA9                 pop     esi
.text:00405CAA                 pop     edi
.text:00405CAB                 pop     ebp
.text:00405CAC                 retn
.text:00405CAD ; ---------------------------------------------------------------------------
.text:00405CAD
.text:00405CAD loc_405CAD:                             ; CODE XREF: sub_405B90+EF↑j
.text:00405CAD                 mov     esi, [esp+13Ch+Str]
.text:00405CB4                 mov     ecx, 1
.text:00405CB9                 movsx   ebp, al
.text:00405CBC                 mov     [esp+13Ch+var_30], ecx
.text:00405CC3                 mov     ebx, 400h
.text:00405CC8                 mov     [esp+13Ch+Type], ebp ; Val
.text:00405CCC                 mov     [esp+13Ch+C], esi ; Str
.text:00405CCF                 call    strchr
.text:00405CD4                 test    eax, eax
.text:00405CD6                 jnz     short loc_405CFE
.text:00405CD8
.text:00405CD8 def_405D49:                             ; CODE XREF: sub_405B90+1B7↓j
.text:00405CD8                                         ; sub_405B90+1B9↓j
.text:00405CD8                                         ; DATA XREF: ...
.text:00405CD8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00405D49 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405CDF                 mov     esi, [esp+13Ch+var_24]
.text:00405CE6                 mov     ebp, [esp+13Ch+var_20]
.text:00405CED                 mov     edi, [esp+13Ch+arg_C]
.text:00405CF4                 or      eax, 2
.text:00405CF7                 mov     [edi], esi
.text:00405CF9                 mov     [edi+4], ebp
.text:00405CFC                 jmp     short loc_405CA2
.text:00405CFE ; ---------------------------------------------------------------------------
.text:00405CFE
.text:00405CFE loc_405CFE:                             ; CODE XREF: sub_405B90+146↑j
.text:00405CFE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00405D06                 mov     edx, [esp+13Ch+Str]
.text:00405D0D                 mov     [esp+13Ch+C], edx ; Str
.text:00405D10                 call    strchr
.text:00405D15                 test    eax, eax
.text:00405D17                 jz      loc_406751
.text:00405D1D                 mov     edx, [edi]
.text:00405D1F                 movsx   eax, byte ptr [edx+1]
.text:00405D23                 cmp     eax, 44h ; 'D'
.text:00405D26                 jz      loc_406717
.text:00405D2C                 cmp     eax, 44h ; 'D'
.text:00405D2F                 jg      loc_40672D
.text:00405D35                 cmp     eax, 42h ; 'B'
.text:00405D38                 jz      loc_406717
.text:00405D3E
.text:00405D3E loc_405D3E:                             ; CODE XREF: sub_405B90+B98↓j
.text:00405D3E                                         ; sub_405B90+BA0↓j ...
.text:00405D3E                 movsx   eax, byte ptr [edx]
.text:00405D41                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00405D44                 cmp     eax, 35h
.text:00405D47                 ja      short def_405D49 ; jumptable 00405D49 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405D49                 jmp     ds:jpt_405D49[eax*4] ; switch jump
.text:00405D49 ; ---------------------------------------------------------------------------
.text:00405D50 jpt_405D49      dd offset loc_405ED4, offset def_405D49, offset def_405D49
.text:00405D50                                         ; DATA XREF: sub_405B90+1B9↑r
.text:00405D50                 dd offset loc_405F2E, offset def_405D49, offset loc_4062F7 ; jump table for switch statement
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset loc_406406, offset def_405D49, offset loc_4064CF
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_40603D
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset loc_4065DE, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_40614C
.text:00405D50                 dd offset loc_40621E, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_405E28
.text:00405D50                 dd offset loc_4062F0, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset loc_4062F7, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_406406
.text:00405D50                 dd offset def_405D49, offset loc_4064CF, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset def_405D49
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_4065DE
.text:00405D50                 dd offset def_405D49, offset def_405D49, offset loc_4066B7
.text:00405E28 ; ---------------------------------------------------------------------------
.text:00405E28
.text:00405E28 loc_405E28:                             ; CODE XREF: sub_405B90+1B9↑j
.text:00405E28                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:00405E28                 mov     [esp+13Ch+Radix], 200h ; jumptable 00405D49 case 98
.text:00405E30                 lea     ebp, [esp+13Ch+var_24]
.text:00405E37                 mov     [esp+13Ch+var_130], 0
.text:00405E3F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405E46                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405E4E                 call    sub_408880
.text:00405E53                 mov     esi, [esp+13Ch+var_20]
.text:00405E5A                 mov     ecx, [esp+13Ch+var_24]
.text:00405E61                 cmp     edx, esi
.text:00405E63                 ja      short loc_405E6B
.text:00405E65                 jb      short loc_405EB5
.text:00405E67                 cmp     eax, ecx
.text:00405E69                 jb      short loc_405EB5
.text:00405E6B
.text:00405E6B loc_405E6B:                             ; CODE XREF: sub_405B90+2D3↑j
.text:00405E6B                 mov     esi, [ebp+0]
.text:00405E6E                 mov     eax, 200h
.text:00405E73                 mov     ebx, [ebp+4]
.text:00405E76                 mul     esi
.text:00405E78                 mov     ecx, ebx
.text:00405E7A                 shl     ecx, 9
.text:00405E7D
.text:00405E7D loc_405E7D:                             ; CODE XREF: sub_405B90+399↓j
.text:00405E7D                 mov     esi, edx
.text:00405E7F                 lea     edx, [ecx+esi]
.text:00405E82
.text:00405E82 loc_405E82:                             ; CODE XREF: sub_405B90+B82↓j
.text:00405E82                 mov     [ebp+0], eax
.text:00405E85                 xor     eax, eax
.text:00405E87                 mov     [ebp+4], edx
.text:00405E8A
.text:00405E8A loc_405E8A:                             ; CODE XREF: sub_405B90+342↓j
.text:00405E8A                                         ; sub_405B90+459↓j ...
.text:00405E8A                 mov     edx, [edi]
.text:00405E8C
.text:00405E8C loc_405E8C:                             ; CODE XREF: sub_405B90+762↓j
.text:00405E8C                 or      [esp+13Ch+var_28], eax
.text:00405E93                 mov     eax, [esp+13Ch+var_30]
.text:00405E9A                 lea     ecx, [eax+edx]
.text:00405E9D                 mov     [edi], ecx
.text:00405E9F                 cmp     byte ptr [ecx], 0
.text:00405EA2                 jz      loc_405C81
.text:00405EA8                 or      [esp+13Ch+var_28], 2
.text:00405EB0                 jmp     loc_405C81
.text:00405EB5 ; ---------------------------------------------------------------------------
.text:00405EB5
.text:00405EB5 loc_405EB5:                             ; CODE XREF: sub_405B90+2D5↑j
.text:00405EB5                                         ; sub_405B90+2D9↑j ...
.text:00405EB5                 mov     edx, 0FFFFFFFFh
.text:00405EBA                 mov     ebp, 0FFFFFFFFh
.text:00405EBF                 mov     eax, 1
.text:00405EC4                 mov     [esp+13Ch+var_24], edx
.text:00405ECB                 mov     [esp+13Ch+var_20], ebp
.text:00405ED2                 jmp     short loc_405E8A
.text:00405ED4 ; ---------------------------------------------------------------------------
.text:00405ED4
.text:00405ED4 loc_405ED4:                             ; CODE XREF: sub_405B90+1B9↑j
.text:00405ED4                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:00405ED4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00405D49 case 66
.text:00405EDC                 lea     ebp, [esp+13Ch+var_24]
.text:00405EE3                 mov     [esp+13Ch+var_130], 0
.text:00405EEB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405EF2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405EFA                 call    sub_408880
.text:00405EFF                 mov     esi, [esp+13Ch+var_20]
.text:00405F06                 mov     ecx, [esp+13Ch+var_24]
.text:00405F0D                 cmp     edx, esi
.text:00405F0F                 ja      short loc_405F17
.text:00405F11                 jb      short loc_405EB5
.text:00405F13                 cmp     eax, ecx
.text:00405F15                 jb      short loc_405EB5
.text:00405F17
.text:00405F17 loc_405F17:                             ; CODE XREF: sub_405B90+37F↑j
.text:00405F17                 mov     esi, [ebp+0]
.text:00405F1A                 mov     eax, 400h
.text:00405F1F                 mov     ebx, [ebp+4]
.text:00405F22                 mul     esi
.text:00405F24                 mov     ecx, ebx
.text:00405F26                 shl     ecx, 0Ah
.text:00405F29                 jmp     loc_405E7D
.text:00405F2E ; ---------------------------------------------------------------------------
.text:00405F2E
.text:00405F2E loc_405F2E:                             ; CODE XREF: sub_405B90+1B9↑j
.text:00405F2E                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:00405F2E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00405D49 case 69
.text:00405F35                 mov     ecx, ebx
.text:00405F37                 xor     ebp, ebp
.text:00405F39                 mov     [esp+13Ch+var_34], ebp
.text:00405F40                 sar     ecx, 1Fh
.text:00405F43                 mov     ebx, [esp+13Ch+var_3C]
.text:00405F4A                 mov     [esp+13Ch+var_38], ecx
.text:00405F51                 lea     esi, [esp+13Ch+var_24]
.text:00405F58                 mov     ebp, 5
.text:00405F5D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405F64                 mov     edx, [esp+13Ch+var_38]
.text:00405F6B                 mov     [esp+13Ch+Radix], ebx
.text:00405F6F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405F77                 mov     [esp+13Ch+var_130], edx
.text:00405F7B                 call    sub_408880
.text:00405F80                 mov     [esp+13Ch+var_44], eax
.text:00405F87                 mov     [esp+13Ch+var_40], edx
.text:00405F8E
.text:00405F8E loc_405F8E:                             ; CODE XREF: sub_405B90+450↓j
.text:00405F8E                 mov     ebx, [esi+4]
.text:00405F91                 mov     eax, [esi]
.text:00405F93                 cmp     [esp+13Ch+var_40], ebx
.text:00405F9A                 mov     [esp+13Ch+var_48], ebx
.text:00405FA1                 mov     [esp+13Ch+var_4C], eax
.text:00405FA8                 ja      short loc_405FEE
.text:00405FAA                 mov     ecx, [esp+13Ch+var_48]
.text:00405FB1                 cmp     [esp+13Ch+var_40], ecx
.text:00405FB8                 jb      short loc_405FC3
.text:00405FBA                 cmp     [esp+13Ch+var_44], eax
.text:00405FC1                 jnb     short loc_405FEE
.text:00405FC3
.text:00405FC3 loc_405FC3:                             ; CODE XREF: sub_405B90+428↑j
.text:00405FC3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405FC9                 mov     eax, 1
.text:00405FCE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405FD5
.text:00405FD5 loc_405FD5:                             ; CODE XREF: sub_405B90+4AB↓j
.text:00405FD5                 or      [esp+13Ch+var_34], eax
.text:00405FDC                 dec     ebp
.text:00405FDD                 cmp     ebp, 0FFFFFFFFh
.text:00405FE0                 jnz     short loc_405F8E
.text:00405FE2                 mov     eax, [esp+13Ch+var_34]
.text:00405FE9                 jmp     loc_405E8A
.text:00405FEE ; ---------------------------------------------------------------------------
.text:00405FEE
.text:00405FEE loc_405FEE:                             ; CODE XREF: sub_405B90+418↑j
.text:00405FEE                                         ; sub_405B90+431↑j
.text:00405FEE                 mov     ecx, [esp+13Ch+var_38]
.text:00405FF5                 mov     eax, [esp+13Ch+var_4C]
.text:00405FFC                 mov     ebx, [esp+13Ch+var_4C]
.text:00406003                 mul     [esp+13Ch+var_3C]
.text:0040600A                 imul    ebx, ecx
.text:0040600D                 mov     ecx, edx
.text:0040600F                 mov     [esp+13Ch+var_124], eax
.text:00406013                 add     ecx, ebx
.text:00406015                 mov     edx, [esp+13Ch+var_3C]
.text:0040601C                 mov     ebx, [esp+13Ch+var_48]
.text:00406023                 imul    edx, ebx
.text:00406026                 mov     ebx, [esp+13Ch+var_124]
.text:0040602A                 mov     [esi], ebx
.text:0040602C                 add     ecx, edx
.text:0040602E                 mov     [esp+13Ch+var_120], ecx
.text:00406032                 mov     eax, [esp+13Ch+var_120]
.text:00406036                 mov     [esi+4], eax
.text:00406039                 xor     eax, eax
.text:0040603B                 jmp     short loc_405FD5
.text:0040603D ; ---------------------------------------------------------------------------
.text:0040603D
.text:0040603D loc_40603D:                             ; CODE XREF: sub_405B90+1B9↑j
.text:0040603D                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:0040603D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00405D49 case 80
.text:00406044                 mov     eax, ebx
.text:00406046                 xor     ebp, ebp
.text:00406048                 mov     [esp+13Ch+var_98], ebp
.text:0040604F                 sar     eax, 1Fh
.text:00406052                 mov     edx, [esp+13Ch+var_A4]
.text:00406059                 mov     [esp+13Ch+var_A0], eax
.text:00406060                 lea     esi, [esp+13Ch+var_24]
.text:00406067                 mov     ebp, 4
.text:0040606C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406073                 mov     ebx, [esp+13Ch+var_A0]
.text:0040607A                 mov     [esp+13Ch+Radix], edx
.text:0040607E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406086                 mov     [esp+13Ch+var_130], ebx
.text:0040608A                 call    sub_408880
.text:0040608F                 mov     [esp+13Ch+var_AC], eax
.text:00406096                 mov     [esp+13Ch+var_A8], edx
.text:0040609D
.text:0040609D loc_40609D:                             ; CODE XREF: sub_405B90+55F↓j
.text:0040609D                 mov     ebx, [esi+4]
.text:004060A0                 mov     edx, [esi]
.text:004060A2                 cmp     [esp+13Ch+var_A8], ebx
.text:004060A9                 mov     [esp+13Ch+var_B0], ebx
.text:004060B0                 mov     [esp+13Ch+var_B4], edx
.text:004060B7                 ja      short loc_4060FD
.text:004060B9                 mov     eax, [esp+13Ch+var_B0]
.text:004060C0                 cmp     [esp+13Ch+var_A8], eax
.text:004060C7                 jb      short loc_4060D2
.text:004060C9                 cmp     [esp+13Ch+var_AC], edx
.text:004060D0                 jnb     short loc_4060FD
.text:004060D2
.text:004060D2 loc_4060D2:                             ; CODE XREF: sub_405B90+537↑j
.text:004060D2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004060D8                 mov     eax, 1
.text:004060DD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004060E4
.text:004060E4 loc_4060E4:                             ; CODE XREF: sub_405B90+5BA↓j
.text:004060E4                 or      [esp+13Ch+var_98], eax
.text:004060EB                 dec     ebp
.text:004060EC                 cmp     ebp, 0FFFFFFFFh
.text:004060EF                 jnz     short loc_40609D
.text:004060F1                 mov     eax, [esp+13Ch+var_98]
.text:004060F8                 jmp     loc_405E8A
.text:004060FD ; ---------------------------------------------------------------------------
.text:004060FD
.text:004060FD loc_4060FD:                             ; CODE XREF: sub_405B90+527↑j
.text:004060FD                                         ; sub_405B90+540↑j
.text:004060FD                 mov     ecx, [esp+13Ch+var_A0]
.text:00406104                 mov     eax, [esp+13Ch+var_B4]
.text:0040610B                 mov     ebx, [esp+13Ch+var_B4]
.text:00406112                 mul     [esp+13Ch+var_A4]
.text:00406119                 imul    ebx, ecx
.text:0040611C                 mov     ecx, edx
.text:0040611E                 mov     [esp+13Ch+var_124], eax
.text:00406122                 add     ecx, ebx
.text:00406124                 mov     edx, [esp+13Ch+var_A4]
.text:0040612B                 mov     ebx, [esp+13Ch+var_B0]
.text:00406132                 xor     eax, eax
.text:00406134                 imul    edx, ebx
.text:00406137                 add     ecx, edx
.text:00406139                 mov     [esp+13Ch+var_120], ecx
.text:0040613D                 mov     ebx, [esp+13Ch+var_120]
.text:00406141                 mov     ecx, [esp+13Ch+var_124]
.text:00406145                 mov     [esi+4], ebx
.text:00406148                 mov     [esi], ecx
.text:0040614A                 jmp     short loc_4060E4
.text:0040614C ; ---------------------------------------------------------------------------
.text:0040614C
.text:0040614C loc_40614C:                             ; CODE XREF: sub_405B90+1B9↑j
.text:0040614C                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:0040614C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00405D49 case 89
.text:00406150                 mov     eax, ebx
.text:00406152                 lea     esi, [esp+13Ch+var_24]
.text:00406159                 mov     [esp+13Ch+var_D8], 0
.text:00406161                 sar     eax, 1Fh
.text:00406164                 mov     edx, [esp+13Ch+var_E4]
.text:00406168                 mov     [esp+13Ch+var_E0], eax
.text:0040616C                 mov     ebp, 7
.text:00406171                 mov     ebx, [esp+13Ch+var_E0]
.text:00406175                 mov     [esp+13Ch+Radix], edx
.text:00406179                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406180                 mov     [esp+13Ch+var_130], ebx
.text:00406184                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040618C                 call    sub_408880
.text:00406191                 mov     [esp+13Ch+var_EC], eax
.text:00406195                 mov     [esp+13Ch+var_E8], edx
.text:00406199
.text:00406199 loc_406199:                             ; CODE XREF: sub_405B90+646↓j
.text:00406199                 mov     ebx, [esi+4]
.text:0040619C                 mov     edx, [esi]
.text:0040619E                 cmp     [esp+13Ch+var_E8], ebx
.text:004061A2                 mov     [esp+13Ch+var_F0], ebx
.text:004061A6                 mov     [esp+13Ch+var_F4], edx
.text:004061AA                 ja      short loc_4061E1
.text:004061AC                 mov     eax, [esp+13Ch+var_F0]
.text:004061B0                 cmp     [esp+13Ch+var_E8], eax
.text:004061B4                 jb      short loc_4061BC
.text:004061B6                 cmp     [esp+13Ch+var_EC], edx
.text:004061BA                 jnb     short loc_4061E1
.text:004061BC
.text:004061BC loc_4061BC:                             ; CODE XREF: sub_405B90+624↑j
.text:004061BC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004061C2                 mov     eax, 1
.text:004061C7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004061CE
.text:004061CE loc_4061CE:                             ; CODE XREF: sub_405B90+68C↓j
.text:004061CE                 or      [esp+13Ch+var_D8], eax
.text:004061D2                 dec     ebp
.text:004061D3                 cmp     ebp, 0FFFFFFFFh
.text:004061D6                 jnz     short loc_406199
.text:004061D8                 mov     eax, [esp+13Ch+var_D8]
.text:004061DC                 jmp     loc_405E8A
.text:004061E1 ; ---------------------------------------------------------------------------
.text:004061E1
.text:004061E1 loc_4061E1:                             ; CODE XREF: sub_405B90+61A↑j
.text:004061E1                                         ; sub_405B90+62A↑j
.text:004061E1                 mov     ecx, [esp+13Ch+var_E0]
.text:004061E5                 mov     eax, [esp+13Ch+var_F4]
.text:004061E9                 mov     ebx, [esp+13Ch+var_F4]
.text:004061ED                 mul     [esp+13Ch+var_E4]
.text:004061F1                 imul    ebx, ecx
.text:004061F4                 mov     ecx, edx
.text:004061F6                 mov     [esp+13Ch+var_124], eax
.text:004061FA                 add     ecx, ebx
.text:004061FC                 mov     edx, [esp+13Ch+var_E4]
.text:00406200                 mov     ebx, [esp+13Ch+var_F0]
.text:00406204                 xor     eax, eax
.text:00406206                 imul    edx, ebx
.text:00406209                 add     ecx, edx
.text:0040620B                 mov     [esp+13Ch+var_120], ecx
.text:0040620F                 mov     ebx, [esp+13Ch+var_120]
.text:00406213                 mov     ecx, [esp+13Ch+var_124]
.text:00406217                 mov     [esi+4], ebx
.text:0040621A                 mov     [esi], ecx
.text:0040621C                 jmp     short loc_4061CE
.text:0040621E ; ---------------------------------------------------------------------------
.text:0040621E
.text:0040621E loc_40621E:                             ; CODE XREF: sub_405B90+1B9↑j
.text:0040621E                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:0040621E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00405D49 case 90
.text:00406222                 mov     eax, ebx
.text:00406224                 lea     esi, [esp+13Ch+var_24]
.text:0040622B                 mov     [esp+13Ch+var_F8], 0
.text:00406233                 sar     eax, 1Fh
.text:00406236                 mov     edx, [esp+13Ch+var_104]
.text:0040623A                 mov     [esp+13Ch+var_100], eax
.text:0040623E                 mov     ebp, 6
.text:00406243                 mov     ebx, [esp+13Ch+var_100]
.text:00406247                 mov     [esp+13Ch+Radix], edx
.text:0040624B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406252                 mov     [esp+13Ch+var_130], ebx
.text:00406256                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040625E                 call    sub_408880
.text:00406263                 mov     [esp+13Ch+var_10C], eax
.text:00406267                 mov     [esp+13Ch+var_108], edx
.text:0040626B
.text:0040626B loc_40626B:                             ; CODE XREF: sub_405B90+718↓j
.text:0040626B                 mov     ebx, [esi+4]
.text:0040626E                 mov     edx, [esi]
.text:00406270                 cmp     [esp+13Ch+var_108], ebx
.text:00406274                 mov     [esp+13Ch+var_110], ebx
.text:00406278                 mov     [esp+13Ch+var_114], edx
.text:0040627C                 ja      short loc_4062B3
.text:0040627E                 mov     eax, [esp+13Ch+var_110]
.text:00406282                 cmp     [esp+13Ch+var_108], eax
.text:00406286                 jb      short loc_40628E
.text:00406288                 cmp     [esp+13Ch+var_10C], edx
.text:0040628C                 jnb     short loc_4062B3
.text:0040628E
.text:0040628E loc_40628E:                             ; CODE XREF: sub_405B90+6F6↑j
.text:0040628E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406294                 mov     eax, 1
.text:00406299                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004062A0
.text:004062A0 loc_4062A0:                             ; CODE XREF: sub_405B90+75E↓j
.text:004062A0                 or      [esp+13Ch+var_F8], eax
.text:004062A4                 dec     ebp
.text:004062A5                 cmp     ebp, 0FFFFFFFFh
.text:004062A8                 jnz     short loc_40626B
.text:004062AA                 mov     eax, [esp+13Ch+var_F8]
.text:004062AE                 jmp     loc_405E8A
.text:004062B3 ; ---------------------------------------------------------------------------
.text:004062B3
.text:004062B3 loc_4062B3:                             ; CODE XREF: sub_405B90+6EC↑j
.text:004062B3                                         ; sub_405B90+6FC↑j
.text:004062B3                 mov     eax, [esp+13Ch+var_114]
.text:004062B7                 mov     ebx, [esp+13Ch+var_100]
.text:004062BB                 mul     [esp+13Ch+var_104]
.text:004062BF                 mov     ecx, edx
.text:004062C1                 mov     edx, [esp+13Ch+var_104]
.text:004062C5                 mov     [esp+13Ch+var_124], eax
.text:004062C9                 mov     eax, [esp+13Ch+var_114]
.text:004062CD                 imul    eax, ebx
.text:004062D0                 mov     ebx, [esp+13Ch+var_110]
.text:004062D4                 imul    edx, ebx
.text:004062D7                 add     ecx, eax
.text:004062D9                 xor     eax, eax
.text:004062DB                 add     ecx, edx
.text:004062DD                 mov     [esp+13Ch+var_120], ecx
.text:004062E1                 mov     ebx, [esp+13Ch+var_120]
.text:004062E5                 mov     ecx, [esp+13Ch+var_124]
.text:004062E9                 mov     [esi+4], ebx
.text:004062EC                 mov     [esi], ecx
.text:004062EE                 jmp     short loc_4062A0
.text:004062F0 ; ---------------------------------------------------------------------------
.text:004062F0
.text:004062F0 loc_4062F0:                             ; CODE XREF: sub_405B90+1B9↑j
.text:004062F0                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:004062F0                 xor     eax, eax        ; jumptable 00405D49 case 99
.text:004062F2                 jmp     loc_405E8C
.text:004062F7 ; ---------------------------------------------------------------------------
.text:004062F7
.text:004062F7 loc_4062F7:                             ; CODE XREF: sub_405B90+1B9↑j
.text:004062F7                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:004062F7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00405D49 cases 71,103
.text:004062FE                 mov     eax, ebx
.text:00406300                 xor     ebp, ebp
.text:00406302                 mov     [esp+13Ch+var_50], ebp
.text:00406309                 sar     eax, 1Fh
.text:0040630C                 mov     edx, [esp+13Ch+var_5C]
.text:00406313                 mov     [esp+13Ch+var_58], eax
.text:0040631A                 lea     esi, [esp+13Ch+var_24]
.text:00406321                 mov     ebp, 2
.text:00406326                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040632D                 mov     ebx, [esp+13Ch+var_58]
.text:00406334                 mov     [esp+13Ch+Radix], edx
.text:00406338                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406340                 mov     [esp+13Ch+var_130], ebx
.text:00406344                 call    sub_408880
.text:00406349                 mov     [esp+13Ch+var_64], eax
.text:00406350                 mov     [esp+13Ch+var_60], edx
.text:00406357
.text:00406357 loc_406357:                             ; CODE XREF: sub_405B90+819↓j
.text:00406357                 mov     ebx, [esi+4]
.text:0040635A                 mov     edx, [esi]
.text:0040635C                 cmp     [esp+13Ch+var_60], ebx
.text:00406363                 mov     [esp+13Ch+var_68], ebx
.text:0040636A                 mov     [esp+13Ch+var_6C], edx
.text:00406371                 ja      short loc_4063B7
.text:00406373                 mov     eax, [esp+13Ch+var_68]
.text:0040637A                 cmp     [esp+13Ch+var_60], eax
.text:00406381                 jb      short loc_40638C
.text:00406383                 cmp     [esp+13Ch+var_64], edx
.text:0040638A                 jnb     short loc_4063B7
.text:0040638C
.text:0040638C loc_40638C:                             ; CODE XREF: sub_405B90+7F1↑j
.text:0040638C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406392                 mov     eax, 1
.text:00406397                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040639E
.text:0040639E loc_40639E:                             ; CODE XREF: sub_405B90+874↓j
.text:0040639E                 or      [esp+13Ch+var_50], eax
.text:004063A5                 dec     ebp
.text:004063A6                 cmp     ebp, 0FFFFFFFFh
.text:004063A9                 jnz     short loc_406357
.text:004063AB                 mov     eax, [esp+13Ch+var_50]
.text:004063B2                 jmp     loc_405E8A
.text:004063B7 ; ---------------------------------------------------------------------------
.text:004063B7
.text:004063B7 loc_4063B7:                             ; CODE XREF: sub_405B90+7E1↑j
.text:004063B7                                         ; sub_405B90+7FA↑j
.text:004063B7                 mov     ecx, [esp+13Ch+var_58]
.text:004063BE                 mov     eax, [esp+13Ch+var_6C]
.text:004063C5                 mov     ebx, [esp+13Ch+var_6C]
.text:004063CC                 mul     [esp+13Ch+var_5C]
.text:004063D3                 imul    ebx, ecx
.text:004063D6                 mov     ecx, edx
.text:004063D8                 mov     [esp+13Ch+var_124], eax
.text:004063DC                 add     ecx, ebx
.text:004063DE                 mov     edx, [esp+13Ch+var_5C]
.text:004063E5                 mov     ebx, [esp+13Ch+var_68]
.text:004063EC                 xor     eax, eax
.text:004063EE                 imul    edx, ebx
.text:004063F1                 add     ecx, edx
.text:004063F3                 mov     [esp+13Ch+var_120], ecx
.text:004063F7                 mov     ebx, [esp+13Ch+var_120]
.text:004063FB                 mov     ecx, [esp+13Ch+var_124]
.text:004063FF                 mov     [esi+4], ebx
.text:00406402                 mov     [esi], ecx
.text:00406404                 jmp     short loc_40639E
.text:00406406 ; ---------------------------------------------------------------------------
.text:00406406
.text:00406406 loc_406406:                             ; CODE XREF: sub_405B90+1B9↑j
.text:00406406                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:00406406                 mov     [esp+13Ch+var_74], ebx ; jumptable 00405D49 cases 75,107
.text:0040640D                 mov     eax, ebx
.text:0040640F                 lea     esi, [esp+13Ch+var_24]
.text:00406416                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040641D                 sar     eax, 1Fh
.text:00406420                 mov     edx, [esp+13Ch+var_74]
.text:00406427                 mov     [esp+13Ch+var_70], eax
.text:0040642E                 mov     ebx, [esp+13Ch+var_70]
.text:00406435                 mov     [esp+13Ch+Radix], edx
.text:00406439                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406441                 mov     [esp+13Ch+var_130], ebx
.text:00406445                 call    sub_408880
.text:0040644A                 mov     ebp, [esp+13Ch+var_20]
.text:00406451                 mov     ecx, [esp+13Ch+var_24]
.text:00406458                 cmp     edx, ebp
.text:0040645A                 mov     [esp+13Ch+var_11C], ecx
.text:0040645E                 mov     [esp+13Ch+var_118], ebp
.text:00406462                 ja      short loc_406489
.text:00406464                 cmp     edx, [esp+13Ch+var_118]
.text:00406468                 jb      short loc_40646E
.text:0040646A                 cmp     eax, ecx
.text:0040646C                 jnb     short loc_406489
.text:0040646E
.text:0040646E loc_40646E:                             ; CODE XREF: sub_405B90+8D8↑j
.text:0040646E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406474                 mov     edx, 1
.text:00406479                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_405B90+93D↓j
.text:00406480                 xor     eax, eax
.text:00406482                 or      eax, edx
.text:00406484                 jmp     loc_405E8A
.text:00406489 ; ---------------------------------------------------------------------------
.text:00406489
.text:00406489 loc_406489:                             ; CODE XREF: sub_405B90+8D2↑j
.text:00406489                                         ; sub_405B90+8DC↑j
.text:00406489                 mov     eax, [esp+13Ch+var_11C]
.text:0040648D                 mov     ebp, [esp+13Ch+var_11C]
.text:00406491                 mov     ebx, [esp+13Ch+var_118]
.text:00406495                 mul     [esp+13Ch+var_74]
.text:0040649C                 mov     [esp+13Ch+var_124], eax
.text:004064A0                 mov     eax, [esp+13Ch+var_70]
.text:004064A7                 mov     ecx, [esp+13Ch+var_124]
.text:004064AB                 imul    ebp, eax
.text:004064AE                 mov     eax, edx
.text:004064B0                 xor     edx, edx
.text:004064B2                 mov     [esi], ecx
.text:004064B4                 add     eax, ebp
.text:004064B6                 mov     ebp, [esp+13Ch+var_74]
.text:004064BD                 imul    ebp, ebx
.text:004064C0                 add     eax, ebp
.text:004064C2                 mov     [esp+13Ch+var_120], eax
.text:004064C6                 mov     ebp, [esp+13Ch+var_120]
.text:004064CA                 mov     [esi+4], ebp
.text:004064CD                 jmp     short loc_406480
.text:004064CF ; ---------------------------------------------------------------------------
.text:004064CF
.text:004064CF loc_4064CF:                             ; CODE XREF: sub_405B90+1B9↑j
.text:004064CF                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:004064CF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00405D49 cases 77,109
.text:004064D6                 mov     eax, ebx
.text:004064D8                 xor     ebp, ebp
.text:004064DA                 mov     [esp+13Ch+var_78], ebp
.text:004064E1                 sar     eax, 1Fh
.text:004064E4                 mov     edx, [esp+13Ch+var_84]
.text:004064EB                 mov     [esp+13Ch+var_80], eax
.text:004064F2                 lea     esi, [esp+13Ch+var_24]
.text:004064F9                 mov     ebp, 1
.text:004064FE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406505                 mov     ecx, [esp+13Ch+var_80]
.text:0040650C                 mov     [esp+13Ch+Radix], edx
.text:00406510                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406518                 mov     [esp+13Ch+var_130], ecx
.text:0040651C                 call    sub_408880
.text:00406521                 mov     [esp+13Ch+var_8C], eax
.text:00406528                 mov     [esp+13Ch+var_88], edx
.text:0040652F
.text:0040652F loc_40652F:                             ; CODE XREF: sub_405B90+9F1↓j
.text:0040652F                 mov     ebx, [esi+4]
.text:00406532                 mov     edx, [esi]
.text:00406534                 cmp     [esp+13Ch+var_88], ebx
.text:0040653B                 mov     [esp+13Ch+var_90], ebx
.text:00406542                 mov     [esp+13Ch+var_94], edx
.text:00406549                 ja      short loc_40658F
.text:0040654B                 mov     eax, [esp+13Ch+var_90]
.text:00406552                 cmp     [esp+13Ch+var_88], eax
.text:00406559                 jb      short loc_406564
.text:0040655B                 cmp     [esp+13Ch+var_8C], edx
.text:00406562                 jnb     short loc_40658F
.text:00406564
.text:00406564 loc_406564:                             ; CODE XREF: sub_405B90+9C9↑j
.text:00406564                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040656A                 mov     eax, 1
.text:0040656F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406576
.text:00406576 loc_406576:                             ; CODE XREF: sub_405B90+A4C↓j
.text:00406576                 or      [esp+13Ch+var_78], eax
.text:0040657D                 dec     ebp
.text:0040657E                 cmp     ebp, 0FFFFFFFFh
.text:00406581                 jnz     short loc_40652F
.text:00406583                 mov     eax, [esp+13Ch+var_78]
.text:0040658A                 jmp     loc_405E8A
.text:0040658F ; ---------------------------------------------------------------------------
.text:0040658F
.text:0040658F loc_40658F:                             ; CODE XREF: sub_405B90+9B9↑j
.text:0040658F                                         ; sub_405B90+9D2↑j
.text:0040658F                 mov     ecx, [esp+13Ch+var_80]
.text:00406596                 mov     eax, [esp+13Ch+var_94]
.text:0040659D                 mov     ebx, [esp+13Ch+var_94]
.text:004065A4                 mul     [esp+13Ch+var_84]
.text:004065AB                 imul    ebx, ecx
.text:004065AE                 mov     ecx, edx
.text:004065B0                 mov     [esp+13Ch+var_124], eax
.text:004065B4                 add     ecx, ebx
.text:004065B6                 mov     edx, [esp+13Ch+var_84]
.text:004065BD                 mov     ebx, [esp+13Ch+var_90]
.text:004065C4                 xor     eax, eax
.text:004065C6                 imul    edx, ebx
.text:004065C9                 add     ecx, edx
.text:004065CB                 mov     [esp+13Ch+var_120], ecx
.text:004065CF                 mov     ebx, [esp+13Ch+var_120]
.text:004065D3                 mov     ecx, [esp+13Ch+var_124]
.text:004065D7                 mov     [esi+4], ebx
.text:004065DA                 mov     [esi], ecx
.text:004065DC                 jmp     short loc_406576
.text:004065DE ; ---------------------------------------------------------------------------
.text:004065DE
.text:004065DE loc_4065DE:                             ; CODE XREF: sub_405B90+1B9↑j
.text:004065DE                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:004065DE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00405D49 cases 84,116
.text:004065E2                 mov     eax, ebx
.text:004065E4                 xor     ebp, ebp
.text:004065E6                 mov     [esp+13Ch+var_B8], ebp
.text:004065ED                 sar     eax, 1Fh
.text:004065F0                 mov     edx, [esp+13Ch+var_C4]
.text:004065F4                 mov     [esp+13Ch+var_C0], eax
.text:004065F8                 lea     esi, [esp+13Ch+var_24]
.text:004065FF                 mov     ebp, 3
.text:00406604                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040660B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040660F                 mov     [esp+13Ch+Radix], edx
.text:00406613                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040661B                 mov     [esp+13Ch+var_130], ebx
.text:0040661F                 call    sub_408880
.text:00406624                 mov     [esp+13Ch+var_CC], eax
.text:00406628                 mov     [esp+13Ch+var_C8], edx
.text:0040662C
.text:0040662C loc_40662C:                             ; CODE XREF: sub_405B90+ADC↓j
.text:0040662C                 mov     ebx, [esi+4]
.text:0040662F                 mov     edx, [esi]
.text:00406631                 cmp     [esp+13Ch+var_C8], ebx
.text:00406635                 mov     [esp+13Ch+var_D0], ebx
.text:00406639                 mov     [esp+13Ch+var_D4], edx
.text:0040663D                 ja      short loc_40667A
.text:0040663F                 mov     eax, [esp+13Ch+var_D0]
.text:00406643                 cmp     [esp+13Ch+var_C8], eax
.text:00406647                 jb      short loc_40664F
.text:00406649                 cmp     [esp+13Ch+var_CC], edx
.text:0040664D                 jnb     short loc_40667A
.text:0040664F
.text:0040664F loc_40664F:                             ; CODE XREF: sub_405B90+AB7↑j
.text:0040664F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406655                 mov     eax, 1
.text:0040665A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406661
.text:00406661 loc_406661:                             ; CODE XREF: sub_405B90+B25↓j
.text:00406661                 or      [esp+13Ch+var_B8], eax
.text:00406668                 dec     ebp
.text:00406669                 cmp     ebp, 0FFFFFFFFh
.text:0040666C                 jnz     short loc_40662C
.text:0040666E                 mov     eax, [esp+13Ch+var_B8]
.text:00406675                 jmp     loc_405E8A
.text:0040667A ; ---------------------------------------------------------------------------
.text:0040667A
.text:0040667A loc_40667A:                             ; CODE XREF: sub_405B90+AAD↑j
.text:0040667A                                         ; sub_405B90+ABD↑j
.text:0040667A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040667E                 mov     eax, [esp+13Ch+var_D4]
.text:00406682                 mov     ebx, [esp+13Ch+var_D4]
.text:00406686                 mul     [esp+13Ch+var_C4]
.text:0040668A                 imul    ebx, ecx
.text:0040668D                 mov     ecx, edx
.text:0040668F                 mov     [esp+13Ch+var_124], eax
.text:00406693                 add     ecx, ebx
.text:00406695                 mov     edx, [esp+13Ch+var_C4]
.text:00406699                 mov     ebx, [esp+13Ch+var_D0]
.text:0040669D                 xor     eax, eax
.text:0040669F                 imul    edx, ebx
.text:004066A2                 add     ecx, edx
.text:004066A4                 mov     [esp+13Ch+var_120], ecx
.text:004066A8                 mov     ebx, [esp+13Ch+var_120]
.text:004066AC                 mov     ecx, [esp+13Ch+var_124]
.text:004066B0                 mov     [esi+4], ebx
.text:004066B3                 mov     [esi], ecx
.text:004066B5                 jmp     short loc_406661
.text:004066B7 ; ---------------------------------------------------------------------------
.text:004066B7
.text:004066B7 loc_4066B7:                             ; CODE XREF: sub_405B90+1B9↑j
.text:004066B7                                         ; DATA XREF: sub_405B90:jpt_405D49↑o
.text:004066B7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00405D49 case 119
.text:004066BF                 lea     ebp, [esp+13Ch+var_24]
.text:004066C6                 mov     [esp+13Ch+var_130], 0
.text:004066CE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004066D5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004066DD                 call    sub_408880
.text:004066E2                 mov     esi, [esp+13Ch+var_20]
.text:004066E9                 mov     ecx, [esp+13Ch+var_24]
.text:004066F0                 cmp     edx, esi
.text:004066F2                 ja      short loc_406702
.text:004066F4                 jb      loc_405EB5
.text:004066FA                 cmp     eax, ecx
.text:004066FC                 jb      loc_405EB5
.text:00406702
.text:00406702 loc_406702:                             ; CODE XREF: sub_405B90+B62↑j
.text:00406702                 mov     esi, [ebp+0]
.text:00406705                 mov     eax, 2
.text:0040670A                 mov     ecx, [ebp+4]
.text:0040670D                 mul     esi
.text:0040670F                 lea     edx, [edx+ecx*2]
.text:00406712                 jmp     loc_405E82
.text:00406717 ; ---------------------------------------------------------------------------
.text:00406717
.text:00406717 loc_406717:                             ; CODE XREF: sub_405B90+196↑j
.text:00406717                                         ; sub_405B90+1A8↑j
.text:00406717                 mov     esi, 2
.text:0040671C                 mov     ebx, 3E8h
.text:00406721                 mov     [esp+13Ch+var_30], esi
.text:00406728                 jmp     loc_405D3E
.text:0040672D ; ---------------------------------------------------------------------------
.text:0040672D
.text:0040672D loc_40672D:                             ; CODE XREF: sub_405B90+19F↑j
.text:0040672D                 cmp     eax, 69h ; 'i'
.text:00406730                 jnz     loc_405D3E
.text:00406736                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040673A                 jnz     loc_405D3E
.text:00406740                 mov     eax, 3
.text:00406745                 mov     [esp+13Ch+var_30], eax
.text:0040674C                 jmp     loc_405D3E
.text:00406751 ; ---------------------------------------------------------------------------
.text:00406751
.text:00406751 loc_406751:                             ; CODE XREF: sub_405B90+187↑j
.text:00406751                 mov     edx, [edi]
.text:00406753                 jmp     loc_405D3E
.text:00406758 ; ---------------------------------------------------------------------------
.text:00406758
.text:00406758 loc_406758:                             ; CODE XREF: sub_405B90+E2↑j
.text:00406758                 mov     edx, [esp+13Ch+var_24]
.text:0040675F                 mov     ecx, [esp+13Ch+var_20]
.text:00406766                 mov     edi, [esp+13Ch+arg_C]
.text:0040676D                 mov     [edi], edx
.text:0040676F                 mov     [edi+4], ecx
.text:00406772                 jmp     loc_405C9B
.text:00406777 ; ---------------------------------------------------------------------------
.text:00406777
.text:00406777 loc_406777:                             ; CODE XREF: sub_405B90+D3↑j
.text:00406777                 call    _errno
.text:0040677C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040677F                 jnz     short loc_406792
.text:00406781                 mov     esi, 1
.text:00406786                 mov     [esp+13Ch+var_28], esi
.text:0040678D                 jmp     loc_405C69
.text:00406792 ; ---------------------------------------------------------------------------
.text:00406792
.text:00406792 loc_406792:                             ; CODE XREF: sub_405B90+BEF↑j
.text:00406792                                         ; sub_405B90+C15↓j ...
.text:00406792                 mov     eax, 4
.text:00406797                 jmp     loc_405CA2
.text:0040679C ; ---------------------------------------------------------------------------
.text:0040679C
.text:0040679C loc_40679C:                             ; CODE XREF: sub_405B90+C4↑j
.text:0040679C                 mov     ebx, [esp+13Ch+Str]
.text:004067A3                 test    ebx, ebx
.text:004067A5                 jz      short loc_406792
.text:004067A7                 movzx   eax, byte ptr [eax]
.text:004067AA                 test    al, al
.text:004067AC                 jz      short loc_406792
.text:004067AE                 mov     esi, [esp+13Ch+Str]
.text:004067B5                 movsx   ebp, al
.text:004067B8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004067BC                 mov     [esp+13Ch+C], esi ; Str
.text:004067BF                 call    strchr
.text:004067C4                 test    eax, eax
.text:004067C6                 jz      short loc_406792
.text:004067C8                 mov     ecx, 1
.text:004067CD                 xor     edx, edx
.text:004067CF                 mov     [esp+13Ch+var_24], ecx
.text:004067D6                 mov     [esp+13Ch+var_20], edx
.text:004067DD                 jmp     loc_405C69
.text:004067E2 ; ---------------------------------------------------------------------------
.text:004067E2
.text:004067E2 loc_4067E2:                             ; CODE XREF: sub_405B90+61↑j
.text:004067E2                 mov     eax, ds:_pctype
.text:004067E7                 mov     ecx, [eax]
.text:004067E9                 movzx   eax, word ptr [ecx+edx*2]
.text:004067ED                 and     eax, 8
.text:004067F0                 jmp     loc_405C07
.text:004067F5 ; ---------------------------------------------------------------------------
.text:004067F5
.text:004067F5 loc_4067F5:                             ; CODE XREF: sub_405B90+33↑j
.text:004067F5                 lea     edi, [esp+13Ch+var_18]
.text:004067FC                 jmp     loc_405BC9
.text:00406801 ; ---------------------------------------------------------------------------
.text:00406801
.text:00406801 loc_406801:                             ; CODE XREF: sub_405B90+24↑j
.text:00406801                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00406809                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00406811                 mov     [esp+13Ch+C], offset a0StrtolBaseStr_0 ; "0 <= strtol_base && strtol_base <= 36"
.text:00406818                 call    _assert
.text:00406818 sub_405B90      endp
.text:00406818
.text:00406818 ; ---------------------------------------------------------------------------
.text:0040681D                 align 10h
.text:00406820                 sub     esp, 0Ch
.text:00406823                 xor     edx, edx
.text:00406825                 mov     ecx, [esp+14h]
.text:00406829                 mov     [esp+8], ebx
.text:0040682D                 mov     eax, 0FFFFFFFFh
.text:00406832                 mov     ebx, [esp+10h]
.text:00406836                 div     ecx
.text:00406838                 cmp     eax, ebx
.text:0040683A                 jb      short loc_406859
.text:0040683C                 mov     edx, ebx
.text:0040683E                 imul    edx, ecx
.text:00406841                 mov     [esp], edx
.text:00406844                 call    malloc
.text:00406849                 test    eax, eax
.text:0040684B                 jz      short loc_406855
.text:0040684D
.text:0040684D loc_40684D:                             ; CODE XREF: .text:00406857↓j
.text:0040684D                 mov     ebx, [esp+8]
.text:00406851                 add     esp, 0Ch
.text:00406854                 retn
.text:00406855 ; ---------------------------------------------------------------------------
.text:00406855
.text:00406855 loc_406855:                             ; CODE XREF: .text:0040684B↑j
.text:00406855                 test    ebx, ebx
.text:00406857                 jz      short loc_40684D
.text:00406859
.text:00406859 loc_406859:                             ; CODE XREF: .text:0040683A↑j
.text:00406859                 call    sub_408300
.text:00406859 ; ---------------------------------------------------------------------------
.text:0040685E                 align 10h
.text:00406860
.text:00406860 ; =============== S U B R O U T I N E =======================================
.text:00406860
.text:00406860
.text:00406860 ; int __cdecl sub_406860(size_t)
.text:00406860 sub_406860      proc near               ; CODE XREF: sub_401C00+544↑p
.text:00406860                                         ; sub_401C00+672↑p ...
.text:00406860
.text:00406860 Size            = dword ptr -0Ch
.text:00406860 var_4           = dword ptr -4
.text:00406860 arg_0           = dword ptr  4
.text:00406860
.text:00406860                 sub     esp, 0Ch
.text:00406863                 mov     [esp+0Ch+var_4], ebx
.text:00406867                 mov     ebx, [esp+0Ch+arg_0]
.text:0040686B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040686E                 call    malloc
.text:00406873                 test    eax, eax
.text:00406875                 jz      short loc_406880
.text:00406877
.text:00406877 loc_406877:                             ; CODE XREF: sub_406860+22↓j
.text:00406877                 mov     ebx, [esp+0Ch+var_4]
.text:0040687B                 add     esp, 0Ch
.text:0040687E                 retn
.text:0040687E ; ---------------------------------------------------------------------------
.text:0040687F                 align 10h
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: sub_406860+15↑j
.text:00406880                 test    ebx, ebx
.text:00406882                 jz      short loc_406877
.text:00406884                 call    sub_408300
.text:00406884 sub_406860      endp
.text:00406884
.text:00406884 ; ---------------------------------------------------------------------------
.text:00406889                 align 10h
.text:00406890                 sub     esp, 1Ch
.text:00406893                 xor     edx, edx
.text:00406895                 mov     eax, 0FFFFFFFFh
.text:0040689A                 mov     [esp+14h], ebx
.text:0040689E                 mov     ecx, [esp+20h]
.text:004068A2                 mov     ebx, [esp+28h]
.text:004068A6                 mov     [esp+18h], esi
.text:004068AA                 mov     esi, [esp+24h]
.text:004068AE                 div     ebx
.text:004068B0                 cmp     eax, esi
.text:004068B2                 jb      short loc_4068E4
.text:004068B4                 mov     [esp], ecx
.text:004068B7                 mov     edx, esi
.text:004068B9                 imul    edx, ebx
.text:004068BC                 mov     [esp+4], edx
.text:004068C0                 call    realloc
.text:004068C5                 test    eax, eax
.text:004068C7                 mov     ecx, eax
.text:004068C9                 jz      short loc_4068E0
.text:004068CB
.text:004068CB loc_4068CB:                             ; CODE XREF: .text:004068E2↓j
.text:004068CB                 mov     ebx, [esp+14h]
.text:004068CF                 mov     eax, ecx
.text:004068D1                 mov     esi, [esp+18h]
.text:004068D5                 add     esp, 1Ch
.text:004068D8                 retn
.text:004068D8 ; ---------------------------------------------------------------------------
.text:004068D9                 align 10h
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: .text:004068C9↑j
.text:004068E0                 test    esi, esi
.text:004068E2                 jz      short loc_4068CB
.text:004068E4
.text:004068E4 loc_4068E4:                             ; CODE XREF: .text:004068B2↑j
.text:004068E4                 call    sub_408300
.text:004068E4 ; ---------------------------------------------------------------------------
.text:004068E9                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0
.text:004068F0 ; int __cdecl sub_4068F0(void *, size_t)
.text:004068F0 sub_4068F0      proc near               ; CODE XREF: sub_408110+5B↓p
.text:004068F0
.text:004068F0 Block           = dword ptr -0Ch
.text:004068F0 Size            = dword ptr -8
.text:004068F0 var_4           = dword ptr -4
.text:004068F0 arg_0           = dword ptr  4
.text:004068F0 arg_4           = dword ptr  8
.text:004068F0
.text:004068F0                 sub     esp, 0Ch
.text:004068F3                 mov     edx, [esp+0Ch+arg_0]
.text:004068F7                 mov     [esp+0Ch+var_4], ebx
.text:004068FB                 mov     ebx, [esp+0Ch+arg_4]
.text:004068FF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406902                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406906                 call    realloc
.text:0040690B                 test    eax, eax
.text:0040690D                 jz      short loc_406917
.text:0040690F
.text:0040690F loc_40690F:                             ; CODE XREF: sub_4068F0+29↓j
.text:0040690F                 mov     ebx, [esp+0Ch+var_4]
.text:00406913                 add     esp, 0Ch
.text:00406916                 retn
.text:00406917 ; ---------------------------------------------------------------------------
.text:00406917
.text:00406917 loc_406917:                             ; CODE XREF: sub_4068F0+1D↑j
.text:00406917                 test    ebx, ebx
.text:00406919                 jz      short loc_40690F
.text:0040691B                 call    sub_408300
.text:0040691B sub_4068F0      endp
.text:0040691B
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920 ; Attributes: thunk
.text:00406920
.text:00406920 ; int __cdecl sub_406920(void *, int, int)
.text:00406920 sub_406920      proc near               ; CODE XREF: sub_402850+36↑p
.text:00406920                                         ; sub_402850+BE↑p ...
.text:00406920                 jmp     sub_406A70
.text:00406920 sub_406920      endp
.text:00406920
.text:00406920 ; ---------------------------------------------------------------------------
.text:00406925                 align 10h
.text:00406930
.text:00406930 ; =============== S U B R O U T I N E =======================================
.text:00406930
.text:00406930
.text:00406930 ; int __cdecl sub_406930(void *, int)
.text:00406930 sub_406930      proc near               ; CODE XREF: sub_406D10+76↓p
.text:00406930
.text:00406930 var_C           = dword ptr -0Ch
.text:00406930 var_8           = dword ptr -8
.text:00406930 var_4           = dword ptr -4
.text:00406930 arg_0           = dword ptr  4
.text:00406930 arg_4           = dword ptr  8
.text:00406930
.text:00406930                 sub     esp, 0Ch
.text:00406933                 mov     edx, [esp+0Ch+arg_4]
.text:00406937                 mov     [esp+0Ch+var_4], 1 ; int
.text:0040693F                 mov     [esp+0Ch+var_8], edx ; int
.text:00406943                 mov     edx, [esp+0Ch+arg_0]
.text:00406947                 mov     [esp+0Ch+var_C], edx ; void *
.text:0040694A                 call    sub_406A70
.text:0040694F                 add     esp, 0Ch
.text:00406952                 retn
.text:00406952 sub_406930      endp
.text:00406952
.text:00406952 ; ---------------------------------------------------------------------------
.text:00406953                 align 10h
.text:00406960                 sub     esp, 1Ch
.text:00406963                 mov     [esp+18h], ebx
.text:00406967                 mov     ebx, [esp+20h]
.text:0040696B                 mov     [esp], ebx
.text:0040696E                 call    malloc
.text:00406973                 test    eax, eax
.text:00406975                 jz      short loc_406993
.text:00406977
.text:00406977 loc_406977:                             ; CODE XREF: .text:00406995↓j
.text:00406977                 mov     [esp+8], ebx
.text:0040697B                 mov     dword ptr [esp+4], 0
.text:00406983                 mov     [esp], eax
.text:00406986                 call    memset
.text:0040698B                 mov     ebx, [esp+18h]
.text:0040698F                 add     esp, 1Ch
.text:00406992                 retn
.text:00406993 ; ---------------------------------------------------------------------------
.text:00406993
.text:00406993 loc_406993:                             ; CODE XREF: .text:00406975↑j
.text:00406993                 test    ebx, ebx
.text:00406995                 jz      short loc_406977
.text:00406997                 call    sub_408300
.text:00406997 ; ---------------------------------------------------------------------------
.text:0040699C                 align 10h
.text:004069A0                 sub     esp, 0Ch
.text:004069A3                 xor     edx, edx
.text:004069A5                 mov     ecx, [esp+14h]
.text:004069A9                 mov     [esp+8], ebx
.text:004069AD                 mov     eax, 0FFFFFFFFh
.text:004069B2                 mov     ebx, [esp+10h]
.text:004069B6                 div     ecx
.text:004069B8                 cmp     eax, ebx
.text:004069BA                 jb      short loc_4069D8
.text:004069BC                 mov     [esp+4], ecx
.text:004069C0                 mov     [esp], ebx
.text:004069C3                 call    calloc
.text:004069C8                 test    eax, eax
.text:004069CA                 jz      short loc_4069D4
.text:004069CC
.text:004069CC loc_4069CC:                             ; CODE XREF: .text:004069D6↓j
.text:004069CC                 mov     ebx, [esp+8]
.text:004069D0                 add     esp, 0Ch
.text:004069D3                 retn
.text:004069D4 ; ---------------------------------------------------------------------------
.text:004069D4
.text:004069D4 loc_4069D4:                             ; CODE XREF: .text:004069CA↑j
.text:004069D4                 test    ebx, ebx
.text:004069D6                 jz      short loc_4069CC
.text:004069D8
.text:004069D8 loc_4069D8:                             ; CODE XREF: .text:004069BA↑j
.text:004069D8                 call    sub_408300
.text:004069D8 ; ---------------------------------------------------------------------------
.text:004069DD                 align 10h
.text:004069E0                 sub     esp, 1Ch
.text:004069E3                 mov     [esp+18h], ebx
.text:004069E7                 mov     ebx, [esp+24h]
.text:004069EB                 mov     [esp], ebx
.text:004069EE                 call    malloc
.text:004069F3                 test    eax, eax
.text:004069F5                 mov     edx, eax
.text:004069F7                 jz      short loc_406A15
.text:004069F9
.text:004069F9 loc_4069F9:                             ; CODE XREF: .text:00406A17↓j
.text:004069F9                 mov     [esp+8], ebx
.text:004069FD                 mov     ecx, [esp+20h]
.text:00406A01                 mov     [esp], edx
.text:00406A04                 mov     [esp+4], ecx
.text:00406A08                 call    memcpy
.text:00406A0D                 mov     ebx, [esp+18h]
.text:00406A11                 add     esp, 1Ch
.text:00406A14                 retn
.text:00406A15 ; ---------------------------------------------------------------------------
.text:00406A15
.text:00406A15 loc_406A15:                             ; CODE XREF: .text:004069F7↑j
.text:00406A15                 test    ebx, ebx
.text:00406A17                 jz      short loc_4069F9
.text:00406A19                 call    sub_408300
.text:00406A19 ; ---------------------------------------------------------------------------
.text:00406A1E                 align 10h
.text:00406A20                 sub     esp, 1Ch
.text:00406A23                 mov     [esp+18h], esi
.text:00406A27                 mov     esi, [esp+20h]
.text:00406A2B                 mov     [esp+14h], ebx
.text:00406A2F                 mov     [esp], esi
.text:00406A32                 call    strlen
.text:00406A37                 lea     ebx, [eax+1]
.text:00406A3A                 mov     [esp], ebx
.text:00406A3D                 call    malloc
.text:00406A42                 test    eax, eax
.text:00406A44                 jz      short loc_406A62
.text:00406A46
.text:00406A46 loc_406A46:                             ; CODE XREF: .text:00406A64↓j
.text:00406A46                 mov     [esp+8], ebx
.text:00406A4A                 mov     [esp+4], esi
.text:00406A4E                 mov     [esp], eax
.text:00406A51                 call    memcpy
.text:00406A56                 mov     ebx, [esp+14h]
.text:00406A5A                 mov     esi, [esp+18h]
.text:00406A5E                 add     esp, 1Ch
.text:00406A61                 retn
.text:00406A62 ; ---------------------------------------------------------------------------
.text:00406A62
.text:00406A62 loc_406A62:                             ; CODE XREF: .text:00406A44↑j
.text:00406A62                 test    ebx, ebx
.text:00406A64                 jz      short loc_406A46
.text:00406A66                 call    sub_408300
.text:00406A66 ; ---------------------------------------------------------------------------
.text:00406A6B                 align 10h
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70
.text:00406A70 ; int __cdecl sub_406A70(void *, int, int)
.text:00406A70 sub_406A70      proc near               ; CODE XREF: sub_406920↑j
.text:00406A70                                         ; sub_406930+1A↑p
.text:00406A70
.text:00406A70 Block           = dword ptr -1Ch
.text:00406A70 Size            = dword ptr -18h
.text:00406A70 var_C           = dword ptr -0Ch
.text:00406A70 var_8           = dword ptr -8
.text:00406A70 var_4           = dword ptr -4
.text:00406A70 arg_0           = dword ptr  4
.text:00406A70 arg_4           = dword ptr  8
.text:00406A70 arg_8           = dword ptr  0Ch
.text:00406A70
.text:00406A70                 sub     esp, 1Ch
.text:00406A73                 mov     [esp+1Ch+var_8], esi
.text:00406A77                 mov     esi, [esp+1Ch+arg_0]
.text:00406A7B                 mov     [esp+1Ch+var_4], edi
.text:00406A7F                 mov     edi, [esp+1Ch+arg_4]
.text:00406A83                 test    esi, esi
.text:00406A85                 mov     [esp+1Ch+var_C], ebx
.text:00406A89                 mov     ecx, [edi]
.text:00406A8B                 mov     ebx, [esp+1Ch+arg_8]
.text:00406A8F                 jz      short loc_406AD0
.text:00406A91                 xor     edx, edx
.text:00406A93                 mov     eax, 7FFFFFFFh
.text:00406A98                 div     ebx
.text:00406A9A                 cmp     eax, ecx
.text:00406A9C                 jb      short loc_406AC9
.text:00406A9E                 add     ecx, ecx
.text:00406AA0
.text:00406AA0 loc_406AA0:                             ; CODE XREF: sub_406A70+62↓j
.text:00406AA0                                         ; sub_406A70+71↓j ...
.text:00406AA0                 mov     [edi], ecx
.text:00406AA2                 imul    ebx, ecx
.text:00406AA5                 mov     [esp+1Ch+Block], esi ; Block
.text:00406AA8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406AAC                 call    realloc
.text:00406AB1                 test    eax, eax
.text:00406AB3                 jz      short loc_406AC5
.text:00406AB5
.text:00406AB5 loc_406AB5:                             ; CODE XREF: sub_406A70+57↓j
.text:00406AB5                 mov     ebx, [esp+1Ch+var_C]
.text:00406AB9                 mov     esi, [esp+1Ch+var_8]
.text:00406ABD                 mov     edi, [esp+1Ch+var_4]
.text:00406AC1                 add     esp, 1Ch
.text:00406AC4                 retn
.text:00406AC5 ; ---------------------------------------------------------------------------
.text:00406AC5
.text:00406AC5 loc_406AC5:                             ; CODE XREF: sub_406A70+43↑j
.text:00406AC5                 test    ebx, ebx
.text:00406AC7                 jz      short loc_406AB5
.text:00406AC9
.text:00406AC9 loc_406AC9:                             ; CODE XREF: sub_406A70+2C↑j
.text:00406AC9                 call    sub_408300
.text:00406AC9 ; ---------------------------------------------------------------------------
.text:00406ACE                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; CODE XREF: sub_406A70+1F↑j
.text:00406AD0                 test    ecx, ecx
.text:00406AD2                 jnz     short loc_406AA0
.text:00406AD4                 xor     edx, edx
.text:00406AD6                 mov     eax, 40h ; '@'
.text:00406ADB                 div     ebx
.text:00406ADD                 test    eax, eax
.text:00406ADF                 mov     ecx, eax
.text:00406AE1                 jnz     short loc_406AA0
.text:00406AE3                 mov     ecx, 1
.text:00406AE8                 jmp     short loc_406AA0
.text:00406AE8 sub_406A70      endp
.text:00406AE8
.text:00406AE8 ; ---------------------------------------------------------------------------
.text:00406AEA                 align 10h
.text:00406AF0 aStringComparis db 'string comparison failed',0
.text:00406AF0                                         ; DATA XREF: sub_406B80:loc_406BE0↓o
.text:00406B09                 align 10h
.text:00406B10 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.text:00406B10                                         ; DATA XREF: sub_406B80+81↓o
.text:00406B3B                 db 15h dup(90h)
.text:00406B50 aTheStringsComp db 'The strings compared were %s and %s.',0
.text:00406B50                                         ; DATA XREF: sub_406B80+E8↓o
.text:00406B75                 align 10h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80
.text:00406B80 ; int __cdecl sub_406B80(char *, int, char *, char)
.text:00406B80 sub_406B80      proc near               ; CODE XREF: sub_403650+104↑p
.text:00406B80
.text:00406B80 Str             = dword ptr -2Ch
.text:00406B80 ErrorMessage    = dword ptr -28h
.text:00406B80 var_24          = dword ptr -24h
.text:00406B80 var_20          = byte ptr -20h
.text:00406B80 var_1C          = dword ptr -1Ch
.text:00406B80 var_10          = dword ptr -10h
.text:00406B80 var_C           = dword ptr -0Ch
.text:00406B80 var_8           = dword ptr -8
.text:00406B80 var_4           = dword ptr -4
.text:00406B80 arg_0           = dword ptr  4
.text:00406B80 arg_4           = dword ptr  8
.text:00406B80 arg_8           = dword ptr  0Ch
.text:00406B80 arg_C           = byte ptr  10h
.text:00406B80
.text:00406B80                 sub     esp, 2Ch
.text:00406B83                 mov     edx, [esp+2Ch+arg_4]
.text:00406B87                 mov     [esp+2Ch+var_C], esi
.text:00406B8B                 mov     esi, dword ptr [esp+2Ch+arg_C]
.text:00406B8F                 mov     [esp+2Ch+var_4], ebp
.text:00406B93                 mov     ebp, [esp+2Ch+arg_8]
.text:00406B97                 mov     [esp+2Ch+ErrorMessage], edx ; int
.text:00406B9B                 mov     edx, [esp+2Ch+arg_0]
.text:00406B9F                 mov     [esp+2Ch+var_10], ebx
.text:00406BA3                 mov     [esp+2Ch+var_8], edi
.text:00406BA7                 mov     [esp+2Ch+Str], edx ; Str
.text:00406BAA                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00406BAE                 mov     [esp+2Ch+var_24], ebp ; int
.text:00406BB2                 call    sub_408340
.text:00406BB7                 mov     edi, eax
.text:00406BB9                 call    _errno
.text:00406BBE                 mov     ebx, [eax]
.text:00406BC0                 test    ebx, ebx
.text:00406BC2                 jnz     short loc_406BE0
.text:00406BC4
.text:00406BC4 loc_406BC4:                             ; CODE XREF: sub_406B80+119↓j
.text:00406BC4                 mov     eax, edi
.text:00406BC6                 mov     ebx, [esp+2Ch+var_10]
.text:00406BCA                 mov     esi, [esp+2Ch+var_C]
.text:00406BCE                 mov     edi, [esp+2Ch+var_8]
.text:00406BD2                 mov     ebp, [esp+2Ch+var_4]
.text:00406BD6                 add     esp, 2Ch
.text:00406BD9                 retn
.text:00406BD9 ; ---------------------------------------------------------------------------
.text:00406BDA                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406B80+42↑j
.text:00406BE0                 mov     [esp+2Ch+Str], offset aStringComparis ; "string comparison failed"
.text:00406BE7                 call    ds:libintl_gettext
.text:00406BED                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00406BF1                 mov     [esp+2Ch+Str], 0 ; Code
.text:00406BF8                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406BFC                 call    sub_408460
.text:00406C01                 mov     [esp+2Ch+Str], offset aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:00406C08                 call    ds:libintl_gettext
.text:00406C0E                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406C16                 mov     [esp+2Ch+Str], 0 ; Code
.text:00406C1D                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406C21                 call    sub_408460
.text:00406C26                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:00406C2A                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00406C2E                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:00406C36                 mov     [esp+2Ch+Str], 1 ; int
.text:00406C3D                 call    sub_407DE0
.text:00406C42                 mov     [esp+2Ch+ErrorMessage], 5 ; int
.text:00406C4A                 mov     edx, [esp+2Ch+arg_4]
.text:00406C4E                 mov     ebx, eax
.text:00406C50                 mov     [esp+2Ch+Str], 0 ; int
.text:00406C57                 mov     esi, [esp+2Ch+arg_0]
.text:00406C5B                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:00406C5F                 mov     [esp+2Ch+var_24], esi ; char *
.text:00406C63                 call    sub_407DE0
.text:00406C68                 mov     [esp+2Ch+Str], offset aTheStringsComp ; "The strings compared were %s and %s."
.text:00406C6F                 mov     ebp, eax
.text:00406C71                 call    ds:libintl_gettext
.text:00406C77                 mov     [esp+2Ch+var_1C], ebx
.text:00406C7B                 mov     ecx, Code
.text:00406C81                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00406C85                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406C8D                 mov     [esp+2Ch+var_24], eax ; char *
.text:00406C91                 mov     [esp+2Ch+Str], ecx ; Code
.text:00406C94                 call    sub_408460
.text:00406C99                 jmp     loc_406BC4
.text:00406C99 sub_406B80      endp
.text:00406C99
.text:00406C99 ; ---------------------------------------------------------------------------
.text:00406C9E                 db 12h dup(90h)
.text:00406CB0
.text:00406CB0 ; =============== S U B R O U T I N E =======================================
.text:00406CB0
.text:00406CB0
.text:00406CB0 sub_406CB0      proc near               ; CODE XREF: sub_403650+A2↑p
.text:00406CB0
.text:00406CB0 C               = dword ptr -1Ch
.text:00406CB0 var_11          = byte ptr -11h
.text:00406CB0 arg_0           = dword ptr  4
.text:00406CB0 arg_4           = dword ptr  8
.text:00406CB0 arg_8           = dword ptr  0Ch
.text:00406CB0
.text:00406CB0                 push    ebp
.text:00406CB1                 push    edi
.text:00406CB2                 push    esi
.text:00406CB3                 xor     esi, esi
.text:00406CB5                 push    ebx
.text:00406CB6                 sub     esp, 0Ch
.text:00406CB9                 mov     edi, [esp+1Ch+arg_8]
.text:00406CBD                 mov     ebp, [esp+1Ch+arg_4]
.text:00406CC1                 cmp     esi, edi
.text:00406CC3                 jb      short loc_406CD0
.text:00406CC5
.text:00406CC5 loc_406CC5:                             ; CODE XREF: sub_406CB0+52↓j
.text:00406CC5                 xor     eax, eax
.text:00406CC7
.text:00406CC7 loc_406CC7:                             ; CODE XREF: sub_406CB0+4B↓j
.text:00406CC7                 add     esp, 0Ch
.text:00406CCA                 pop     ebx
.text:00406CCB                 pop     esi
.text:00406CCC                 pop     edi
.text:00406CCD                 pop     ebp
.text:00406CCE                 retn
.text:00406CCE ; ---------------------------------------------------------------------------
.text:00406CCF                 align 10h
.text:00406CD0
.text:00406CD0 loc_406CD0:                             ; CODE XREF: sub_406CB0+13↑j
.text:00406CD0                                         ; sub_406CB0+50↓j
.text:00406CD0                 movzx   edx, byte ptr [esi+ebp]
.text:00406CD4                 mov     eax, [esp+1Ch+arg_0]
.text:00406CD8                 mov     [esp+1Ch+var_11], dl
.text:00406CDC                 movzx   ecx, byte ptr [esi+eax]
.text:00406CE0                 mov     [esp+1Ch+C], ecx ; C
.text:00406CE3                 call    toupper
.text:00406CE8                 movzx   edx, [esp+1Ch+var_11]
.text:00406CED                 mov     ebx, eax
.text:00406CEF                 mov     [esp+1Ch+C], edx ; C
.text:00406CF2                 call    toupper
.text:00406CF7                 sub     ebx, eax
.text:00406CF9                 mov     eax, ebx
.text:00406CFB                 jnz     short loc_406CC7
.text:00406CFD                 inc     esi
.text:00406CFE                 cmp     esi, edi
.text:00406D00                 jb      short loc_406CD0
.text:00406D02                 jmp     short loc_406CC5
.text:00406D02 sub_406CB0      endp
.text:00406D02
.text:00406D02 ; ---------------------------------------------------------------------------
.text:00406D04                 align 10h
.text:00406D10
.text:00406D10 ; =============== S U B R O U T I N E =======================================
.text:00406D10
.text:00406D10
.text:00406D10 sub_406D10      proc near               ; CODE XREF: sub_402850+5F↑p
.text:00406D10                                         ; sub_402850+E7↑p ...
.text:00406D10
.text:00406D10 File            = dword ptr -1Ch
.text:00406D10 var_18          = dword ptr -18h
.text:00406D10 var_14          = dword ptr -14h
.text:00406D10 arg_0           = dword ptr  4
.text:00406D10 arg_4           = dword ptr  8
.text:00406D10
.text:00406D10                 push    ebp
.text:00406D11                 push    edi
.text:00406D12                 push    esi
.text:00406D13                 push    ebx
.text:00406D14                 sub     esp, 0Ch
.text:00406D17                 mov     edx, [esp+1Ch+arg_0]
.text:00406D1B                 mov     edi, [esp+1Ch+arg_4]
.text:00406D1F                 mov     ebp, [edx+8]
.text:00406D22                 mov     ecx, [edx]
.text:00406D24                 mov     ebx, ebp
.text:00406D26                 add     ecx, ebp
.text:00406D28                 test    byte ptr [edi+0Ch], 10h
.text:00406D2C                 mov     [esp+1Ch+var_14], ecx
.text:00406D30                 jnz     loc_406DB8
.text:00406D36                 lea     esi, [esi+0]
.text:00406D39                 lea     edi, [edi+0]
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: sub_406D10+56↓j
.text:00406D40                 mov     ecx, [edi+4]
.text:00406D43                 dec     ecx
.text:00406D44                 test    ecx, ecx
.text:00406D46                 mov     [edi+4], ecx
.text:00406D49                 js      short loc_406DC0
.text:00406D4B                 mov     edx, [edi]
.text:00406D4D                 movzx   esi, byte ptr [edx]
.text:00406D50                 inc     edx
.text:00406D51                 mov     [edi], edx
.text:00406D53
.text:00406D53 loc_406D53:                             ; CODE XREF: sub_406D10+BA↓j
.text:00406D53                 cmp     esi, 0FFFFFFFFh
.text:00406D56                 jz      short loc_406DA1
.text:00406D58
.text:00406D58 loc_406D58:                             ; CODE XREF: sub_406D10+A6↓j
.text:00406D58                 cmp     ebx, [esp+1Ch+var_14]
.text:00406D5C                 jz      short loc_406D79
.text:00406D5E
.text:00406D5E loc_406D5E:                             ; CODE XREF: sub_406D10+8F↓j
.text:00406D5E                 mov     ecx, esi
.text:00406D60                 mov     [ebx], cl
.text:00406D62                 inc     ebx
.text:00406D63                 cmp     esi, 0Ah
.text:00406D66                 jnz     short loc_406D40
.text:00406D68
.text:00406D68 loc_406D68:                             ; CODE XREF: sub_406D10+9F↓j
.text:00406D68                 mov     eax, [esp+1Ch+arg_0]
.text:00406D6C                 sub     ebx, ebp
.text:00406D6E                 mov     [eax+4], ebx
.text:00406D71
.text:00406D71 loc_406D71:                             ; CODE XREF: sub_406D10+AA↓j
.text:00406D71                 add     esp, 0Ch
.text:00406D74                 pop     ebx
.text:00406D75                 pop     esi
.text:00406D76                 pop     edi
.text:00406D77                 pop     ebp
.text:00406D78                 retn
.text:00406D79 ; ---------------------------------------------------------------------------
.text:00406D79
.text:00406D79 loc_406D79:                             ; CODE XREF: sub_406D10+4C↑j
.text:00406D79                 mov     edx, [esp+1Ch+arg_0]
.text:00406D7D                 mov     ebx, [edx]
.text:00406D7F                 mov     [esp+1Ch+File], ebp ; void *
.text:00406D82                 mov     [esp+1Ch+var_18], edx ; int
.text:00406D86                 call    sub_406930
.text:00406D8B                 mov     ebp, eax
.text:00406D8D                 lea     ebx, [ebx+eax]
.text:00406D90                 mov     eax, [esp+1Ch+arg_0]
.text:00406D94                 mov     [eax+8], ebp
.text:00406D97                 mov     ecx, [eax]
.text:00406D99                 add     ecx, ebp
.text:00406D9B                 mov     [esp+1Ch+var_14], ecx
.text:00406D9F                 jmp     short loc_406D5E
.text:00406DA1 ; ---------------------------------------------------------------------------
.text:00406DA1
.text:00406DA1 loc_406DA1:                             ; CODE XREF: sub_406D10+46↑j
.text:00406DA1                 cmp     ebx, ebp
.text:00406DA3                 jz      short loc_406DB8
.text:00406DA5                 test    byte ptr [edi+0Ch], 20h
.text:00406DA9                 jnz     short loc_406DB8
.text:00406DAB                 cmp     byte ptr [ebx-1], 0Ah
.text:00406DAF                 jz      short loc_406D68
.text:00406DB1                 mov     esi, 0Ah
.text:00406DB6                 jmp     short loc_406D58
.text:00406DB8 ; ---------------------------------------------------------------------------
.text:00406DB8
.text:00406DB8 loc_406DB8:                             ; CODE XREF: sub_406D10+20↑j
.text:00406DB8                                         ; sub_406D10+93↑j ...
.text:00406DB8                 xor     eax, eax
.text:00406DBA                 jmp     short loc_406D71
.text:00406DBA ; ---------------------------------------------------------------------------
.text:00406DBC                 align 10h
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: sub_406D10+39↑j
.text:00406DC0                 mov     [esp+1Ch+File], edi ; File
.text:00406DC3                 call    _filbuf
.text:00406DC8                 mov     esi, eax
.text:00406DCA                 jmp     short loc_406D53
.text:00406DCA sub_406D10      endp
.text:00406DCA
.text:00406DCA ; ---------------------------------------------------------------------------
.text:00406DCC                 align 10h
.text:00406DD0
.text:00406DD0 ; =============== S U B R O U T I N E =======================================
.text:00406DD0
.text:00406DD0
.text:00406DD0 sub_406DD0      proc near               ; CODE XREF: sub_402850+4C↑p
.text:00406DD0                                         ; sub_402850+D4↑p ...
.text:00406DD0
.text:00406DD0 arg_0           = dword ptr  4
.text:00406DD0
.text:00406DD0                 push    edi
.text:00406DD1                 mov     ecx, 3
.text:00406DD6                 mov     edi, [esp+4+arg_0]
.text:00406DDA                 cld
.text:00406DDB                 xor     eax, eax
.text:00406DDD                 rep stosd
.text:00406DDF                 pop     edi
.text:00406DE0                 retn
.text:00406DE0 sub_406DD0      endp
.text:00406DE0
.text:00406DE1 ; ---------------------------------------------------------------------------
.text:00406DE1                 jmp     short loc_406DF0
.text:00406DE1 ; ---------------------------------------------------------------------------
.text:00406DE3                 align 10h
.text:00406DF0
.text:00406DF0 loc_406DF0:                             ; CODE XREF: .text:00406DE1↑j
.text:00406DF0                 mov     ecx, [esp+4]
.text:00406DF4                 mov     edx, [ecx+8]
.text:00406DF7                 mov     [esp+4], edx
.text:00406DFB                 jmp     free
.text:00406E00
.text:00406E00 ; =============== S U B R O U T I N E =======================================
.text:00406E00
.text:00406E00
.text:00406E00 ; int __cdecl sub_406E00(int, int, char *, int, int)
.text:00406E00 sub_406E00      proc near               ; CODE XREF: sub_401C00+ADD↑p
.text:00406E00
.text:00406E00 var_1C          = dword ptr -1Ch
.text:00406E00 var_18          = dword ptr -18h
.text:00406E00 var_14          = dword ptr -14h
.text:00406E00 var_10          = dword ptr -10h
.text:00406E00 var_C           = dword ptr -0Ch
.text:00406E00 var_8           = dword ptr -8
.text:00406E00 var_4           = dword ptr -4
.text:00406E00 arg_0           = dword ptr  4
.text:00406E00 arg_4           = dword ptr  8
.text:00406E00 arg_8           = dword ptr  0Ch
.text:00406E00 arg_C           = dword ptr  10h
.text:00406E00 arg_10          = dword ptr  14h
.text:00406E00
.text:00406E00                 sub     esp, 1Ch
.text:00406E03                 mov     edx, [esp+1Ch+arg_C]
.text:00406E07                 mov     [esp+1Ch+var_4], 0 ; int
.text:00406E0F                 mov     ecx, [esp+1Ch+arg_10]
.text:00406E13                 mov     [esp+1Ch+var_8], 0 ; int
.text:00406E1B                 mov     [esp+1Ch+var_10], edx ; int
.text:00406E1F                 mov     edx, [esp+1Ch+arg_4]
.text:00406E23                 mov     [esp+1Ch+var_C], ecx ; int
.text:00406E27                 mov     ecx, [esp+1Ch+arg_8]
.text:00406E2B                 mov     [esp+1Ch+var_18], edx ; int
.text:00406E2F                 mov     edx, [esp+1Ch+arg_0]
.text:00406E33                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00406E37                 mov     [esp+1Ch+var_1C], edx ; int
.text:00406E3A                 call    sub_404AA0
.text:00406E3F                 add     esp, 1Ch
.text:00406E42                 retn
.text:00406E42 sub_406E00      endp
.text:00406E42
.text:00406E42 ; ---------------------------------------------------------------------------
.text:00406E43                 align 10h
.text:00406E50                 sub     esp, 2Ch
.text:00406E53                 mov     edx, [esp+44h]
.text:00406E57                 mov     dword ptr [esp+18h], 0
.text:00406E5F                 mov     ecx, [esp+40h]
.text:00406E63                 mov     dword ptr [esp+14h], 0
.text:00406E6B                 mov     [esp+1Ch], edx
.text:00406E6F                 mov     edx, [esp+3Ch]
.text:00406E73                 mov     [esp+10h], ecx
.text:00406E77                 mov     ecx, [esp+38h]
.text:00406E7B                 mov     [esp+0Ch], edx
.text:00406E7F                 mov     edx, [esp+34h]
.text:00406E83                 mov     [esp+8], ecx
.text:00406E87                 mov     [esp+4], edx
.text:00406E8B                 mov     edx, [esp+30h]
.text:00406E8F                 mov     [esp], edx
.text:00406E92                 call    sub_403F10
.text:00406E97                 add     esp, 2Ch
.text:00406E9A                 retn
.text:00406E9A ; ---------------------------------------------------------------------------
.text:00406E9B                 align 10h
.text:00406EA0
.text:00406EA0 ; =============== S U B R O U T I N E =======================================
.text:00406EA0
.text:00406EA0
.text:00406EA0 ; int __cdecl sub_406EA0(int, int, char *, int, int)
.text:00406EA0 sub_406EA0      proc near               ; CODE XREF: sub_401C00+D2↑p
.text:00406EA0
.text:00406EA0 var_1C          = dword ptr -1Ch
.text:00406EA0 var_18          = dword ptr -18h
.text:00406EA0 var_14          = dword ptr -14h
.text:00406EA0 var_10          = dword ptr -10h
.text:00406EA0 var_C           = dword ptr -0Ch
.text:00406EA0 var_8           = dword ptr -8
.text:00406EA0 var_4           = dword ptr -4
.text:00406EA0 arg_0           = dword ptr  4
.text:00406EA0 arg_4           = dword ptr  8
.text:00406EA0 arg_8           = dword ptr  0Ch
.text:00406EA0 arg_C           = dword ptr  10h
.text:00406EA0 arg_10          = dword ptr  14h
.text:00406EA0
.text:00406EA0                 sub     esp, 1Ch
.text:00406EA3                 mov     edx, [esp+1Ch+arg_C]
.text:00406EA7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00406EAF                 mov     ecx, [esp+1Ch+arg_10]
.text:00406EB3                 mov     [esp+1Ch+var_8], 1 ; int
.text:00406EBB                 mov     [esp+1Ch+var_10], edx ; int
.text:00406EBF                 mov     edx, [esp+1Ch+arg_4]
.text:00406EC3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00406EC7                 mov     ecx, [esp+1Ch+arg_8]
.text:00406ECB                 mov     [esp+1Ch+var_18], edx ; int
.text:00406ECF                 mov     edx, [esp+1Ch+arg_0]
.text:00406ED3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00406ED7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00406EDA                 call    sub_404AA0
.text:00406EDF                 add     esp, 1Ch
.text:00406EE2                 retn
.text:00406EE2 sub_406EA0      endp
.text:00406EE2
.text:00406EE2 ; ---------------------------------------------------------------------------
.text:00406EE3                 align 10h
.text:00406EF0                 sub     esp, 2Ch
.text:00406EF3                 mov     edx, [esp+44h]
.text:00406EF7                 mov     dword ptr [esp+18h], 0
.text:00406EFF                 mov     ecx, [esp+40h]
.text:00406F03                 mov     dword ptr [esp+14h], 1
.text:00406F0B                 mov     [esp+1Ch], edx
.text:00406F0F                 mov     edx, [esp+3Ch]
.text:00406F13                 mov     [esp+10h], ecx
.text:00406F17                 mov     ecx, [esp+38h]
.text:00406F1B                 mov     [esp+0Ch], edx
.text:00406F1F                 mov     edx, [esp+34h]
.text:00406F23                 mov     [esp+8], ecx
.text:00406F27                 mov     [esp+4], edx
.text:00406F2B                 mov     edx, [esp+30h]
.text:00406F2F                 mov     [esp], edx
.text:00406F32                 call    sub_403F10
.text:00406F37                 add     esp, 2Ch
.text:00406F3A                 retn
.text:00406F3A ; ---------------------------------------------------------------------------
.text:00406F3B                 align 10h
.text:00406F40 aLiteral        db 'literal',0          ; DATA XREF: .text:00406F80↓o
.text:00406F48 aShell          db 'shell',0            ; DATA XREF: .text:00406F84↓o
.text:00406F4E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00406F88↓o
.text:00406F5B aC              db 'c',0                ; DATA XREF: .text:00406F8C↓o
.text:00406F5D aEscape         db 'escape',0           ; DATA XREF: .text:00406F90↓o
.text:00406F64 aLocale         db 'locale',0           ; DATA XREF: .text:00406F94↓o
.text:00406F6B aClocale        db 'clocale',0          ; DATA XREF: .text:00406F98↓o
.text:00406F73                 align 10h
.text:00406F80                 dd offset aLiteral      ; "literal"
.text:00406F84                 dd offset aShell        ; "shell"
.text:00406F88                 dd offset aShellAlways  ; "shell-always"
.text:00406F8C                 dd offset aC            ; "c"
.text:00406F90                 dd offset aEscape       ; "escape"
.text:00406F94                 dd offset aLocale       ; "locale"
.text:00406F98                 dd offset aClocale      ; "clocale"
.text:00406F9C                 dd 2 dup(0)
.text:00406FA4                 dd 1, 2, 3, 4, 5, 6
.text:00406FBC asc_406FBC:                             ; DATA XREF: sub_406FD0+7E↓o
.text:00406FBC                                         ; sub_406FD0+A39↓o ...
.text:00406FBC                 text "UTF-16LE", '"',27h,'`'
.text:00406FC2                 align 10h
.text:00406FD0
.text:00406FD0 ; =============== S U B R O U T I N E =======================================
.text:00406FD0
.text:00406FD0
.text:00406FD0 ; int __cdecl sub_406FD0(int, int, char *Str, int, int, int)
.text:00406FD0 sub_406FD0      proc near               ; CODE XREF: sub_406FD0+43A↓p
.text:00406FD0                                         ; .text:00407B93↓p ...
.text:00406FD0
.text:00406FD0 C               = dword ptr -4Ch
.text:00406FD0 Type            = dword ptr -48h
.text:00406FD0 SizeInBytes     = dword ptr -44h
.text:00406FD0 State           = dword ptr -40h
.text:00406FD0 var_3C          = dword ptr -3Ch
.text:00406FD0 var_38          = dword ptr -38h
.text:00406FD0 var_34          = dword ptr -34h
.text:00406FD0 var_30          = dword ptr -30h
.text:00406FD0 var_29          = byte ptr -29h
.text:00406FD0 var_28          = dword ptr -28h
.text:00406FD0 var_22          = byte ptr -22h
.text:00406FD0 var_21          = byte ptr -21h
.text:00406FD0 var_20          = dword ptr -20h
.text:00406FD0 var_1C          = dword ptr -1Ch
.text:00406FD0 var_18          = mbstate_t ptr -18h
.text:00406FD0 arg_0           = dword ptr  4
.text:00406FD0 arg_4           = dword ptr  8
.text:00406FD0 Str             = dword ptr  0Ch
.text:00406FD0 arg_C           = dword ptr  10h
.text:00406FD0 arg_10          = dword ptr  14h
.text:00406FD0 arg_14          = dword ptr  18h
.text:00406FD0
.text:00406FD0                 push    ebp
.text:00406FD1                 push    edi
.text:00406FD2                 push    esi
.text:00406FD3                 push    ebx
.text:00406FD4                 sub     esp, 3Ch
.text:00406FD7                 mov     edx, ds:__mb_cur_max
.text:00406FDD                 mov     [esp+4Ch+var_34], 0
.text:00406FE5                 mov     [esp+4Ch+var_1C], 0
.text:00406FED                 cmp     dword ptr [edx], 1
.text:00406FF0                 mov     [esp+4Ch+var_20], 0
.text:00406FF8                 mov     [esp+4Ch+var_21], 0
.text:00406FFD                 setz    [esp+4Ch+var_22]
.text:00407002                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407007                 ja      short def_40700D ; jumptable 0040700D default case, cases 0,1
.text:00407009                 mov     edx, [esp+4Ch+arg_10]
.text:0040700D                 jmp     ds:jpt_40700D[edx*4] ; switch jump
.text:0040700D ; ---------------------------------------------------------------------------
.text:00407014 jpt_40700D      dd offset def_40700D    ; DATA XREF: sub_406FD0+3D↑r
.text:00407014                 dd offset def_40700D    ; jump table for switch statement
.text:00407014                 dd offset loc_407955
.text:00407014                 dd offset loc_407030
.text:00407014                 dd offset loc_40797B
.text:00407014                 dd offset loc_407985
.text:00407014                 dd offset loc_407985
.text:00407030 ; ---------------------------------------------------------------------------
.text:00407030
.text:00407030 loc_407030:                             ; CODE XREF: sub_406FD0+3D↑j
.text:00407030                                         ; DATA XREF: sub_406FD0:jpt_40700D↑o
.text:00407030                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040700D case 3
.text:00407034                 cmp     [esp+4Ch+var_34], eax
.text:00407038                 jnb     short loc_407041
.text:0040703A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040703E                 mov     byte ptr [ebx], 22h ; '"'
.text:00407041
.text:00407041 loc_407041:                             ; CODE XREF: sub_406FD0+68↑j
.text:00407041                 mov     [esp+4Ch+var_34], 1
.text:00407049                 mov     [esp+4Ch+var_21], 1
.text:0040704E                 mov     [esp+4Ch+var_1C], offset asc_406FBC ; "\"'`"
.text:00407056
.text:00407056 loc_407056:                             ; CODE XREF: sub_406FD0+9A6↓j
.text:00407056                 mov     [esp+4Ch+var_20], 1
.text:0040705E
.text:0040705E def_40700D:                             ; CODE XREF: sub_406FD0+37↑j
.text:0040705E                                         ; sub_406FD0+3D↑j ...
.text:0040705E                 xor     ebp, ebp        ; jumptable 0040700D default case, cases 0,1
.text:00407060
.text:00407060 loc_407060:                             ; CODE XREF: sub_406FD0+3DB↓j
.text:00407060                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407065                 jz      loc_407947
.text:0040706B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040706F
.text:0040706F loc_40706F:                             ; CODE XREF: sub_406FD0+980↓j
.text:0040706F                 jz      loc_4078DE
.text:00407075                 cmp     [esp+4Ch+var_21], 0
.text:0040707A                 jz      short loc_4070C0
.text:0040707C                 mov     esi, [esp+4Ch+var_20]
.text:00407080                 test    esi, esi
.text:00407082                 jz      short loc_4070C0
.text:00407084                 mov     ecx, [esp+4Ch+var_20]
.text:00407088                 lea     edi, [ecx+ebp]
.text:0040708B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040708F                 ja      short loc_4070C0
.text:00407091                 cld
.text:00407092                 mov     ebx, [esp+4Ch+Str]
.text:00407096                 mov     edi, [esp+4Ch+var_1C]
.text:0040709A                 add     ebx, ebp
.text:0040709C                 mov     esi, ebx
.text:0040709E                 cmp     ecx, ecx
.text:004070A0                 repe cmpsb
.text:004070A2                 jnz     short loc_4070C0
.text:004070A4                 mov     edx, [esp+4Ch+arg_4]
.text:004070A8                 cmp     [esp+4Ch+var_34], edx
.text:004070AC                 jnb     short loc_4070BA
.text:004070AE                 mov     ecx, [esp+4Ch+arg_0]
.text:004070B2                 mov     eax, [esp+4Ch+var_34]
.text:004070B6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004070BA
.text:004070BA loc_4070BA:                             ; CODE XREF: sub_406FD0+DC↑j
.text:004070BA                 inc     [esp+4Ch+var_34]
.text:004070BE                 mov     esi, esi
.text:004070C0
.text:004070C0 loc_4070C0:                             ; CODE XREF: sub_406FD0+AA↑j
.text:004070C0                                         ; sub_406FD0+B2↑j ...
.text:004070C0                 mov     edi, [esp+4Ch+Str]
.text:004070C4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004070C9                 movzx   eax, bl
.text:004070CC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004070CF                 ja      def_4070D5      ; jumptable 004070D5 default case, cases 1-6,14-31,64
.text:004070D5                 jmp     ds:jpt_4070D5[eax*4] ; switch jump
.text:004070D5 ; ---------------------------------------------------------------------------
.text:004070DC jpt_4070D5      dd offset loc_4072D8, offset def_4070D5, offset def_4070D5
.text:004070DC                                         ; DATA XREF: sub_406FD0+105↑r
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5 ; jump table for switch statement
.text:004070DC                 dd offset def_4070D5, offset loc_4073B0, offset loc_4073CE
.text:004070DC                 dd offset loc_4073D2, offset loc_407417, offset loc_40741B
.text:004070DC                 dd offset loc_40741F, offset loc_407423, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset def_4070D5
.text:004070DC                 dd offset def_4070D5, offset def_4070D5, offset loc_4078A8
.text:004070DC                 dd offset loc_4078A8, offset loc_4078A8, offset loc_4078CA
.text:004070DC                 dd offset loc_4078A8, offset def_4074D2, offset loc_4078A8
.text:004070DC                 dd offset loc_407427, offset loc_4078A8, offset loc_4078A8
.text:004070DC                 dd offset loc_4078A8, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset loc_4078A8
.text:004070DC                 dd offset loc_4078A8, offset loc_4078A8, offset loc_4078A8
.text:004070DC                 dd offset loc_40748C, offset def_4070D5, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset loc_4078A8, offset loc_4078A1
.text:004070DC                 dd offset def_4074D2, offset loc_4078A8, offset def_4074D2
.text:004070DC                 dd offset loc_4078A8, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset def_4074D2, offset def_4074D2, offset def_4074D2
.text:004070DC                 dd offset loc_4078B8, offset loc_4078A8, offset loc_4078B8
.text:004070DC                 dd offset loc_4078CA
.text:004072D8 ; ---------------------------------------------------------------------------
.text:004072D8
.text:004072D8 loc_4072D8:                             ; CODE XREF: sub_406FD0+105↑j
.text:004072D8                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004072D8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004070D5 case 0
.text:004072DD                 lea     eax, [ebp+1]
.text:004072E0                 jz      loc_407390
.text:004072E6                 mov     esi, [esp+4Ch+arg_4]
.text:004072EA                 cmp     [esp+4Ch+var_34], esi
.text:004072EE                 jnb     short loc_4072FC
.text:004072F0                 mov     eax, [esp+4Ch+arg_0]
.text:004072F4                 mov     ebx, [esp+4Ch+var_34]
.text:004072F8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004072FC
.text:004072FC loc_4072FC:                             ; CODE XREF: sub_406FD0+31E↑j
.text:004072FC                 inc     [esp+4Ch+var_34]
.text:00407300                 mov     edx, [esp+4Ch+arg_4]
.text:00407304                 cmp     [esp+4Ch+var_34], edx
.text:00407308                 jnb     short loc_407316
.text:0040730A                 mov     edi, [esp+4Ch+arg_0]
.text:0040730E                 mov     ecx, [esp+4Ch+var_34]
.text:00407312                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407316
.text:00407316 loc_407316:                             ; CODE XREF: sub_406FD0+338↑j
.text:00407316                 inc     [esp+4Ch+var_34]
.text:0040731A                 mov     esi, [esp+4Ch+arg_4]
.text:0040731E                 cmp     [esp+4Ch+var_34], esi
.text:00407322                 jnb     short loc_407330
.text:00407324                 mov     ebx, [esp+4Ch+arg_0]
.text:00407328                 mov     eax, [esp+4Ch+var_34]
.text:0040732C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407330
.text:00407330 loc_407330:                             ; CODE XREF: sub_406FD0+352↑j
.text:00407330                 inc     [esp+4Ch+var_34]
.text:00407334                 mov     bl, 30h ; '0'
.text:00407336                 lea     esi, [esi+0]
.text:00407339                 lea     edi, [edi+0]
.text:00407340
.text:00407340 def_4074D2:                             ; CODE XREF: sub_406FD0+105↑j
.text:00407340                                         ; sub_406FD0+463↓j ...
.text:00407340                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:00407340                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:00407345                 lea     eax, [ebp+1]
.text:00407348                 jz      short loc_407390
.text:0040734A                 mov     cl, bl
.text:0040734C                 mov     edi, [esp+4Ch+arg_14]
.text:00407350                 mov     esi, 1
.text:00407355                 shr     cl, 5
.text:00407358                 movzx   edx, cl
.text:0040735B                 mov     ecx, ebx
.text:0040735D                 and     ecx, 1Fh
.text:00407360                 shl     esi, cl
.text:00407362                 test    [edi+edx*4+4], esi
.text:00407366                 jz      short loc_407382
.text:00407368
.text:00407368 loc_407368:                             ; CODE XREF: sub_406FD0+3FC↓j
.text:00407368                 mov     edx, [esp+4Ch+arg_4]
.text:0040736C                 cmp     [esp+4Ch+var_34], edx
.text:00407370                 jnb     short loc_40737E
.text:00407372                 mov     edi, [esp+4Ch+arg_0]
.text:00407376                 mov     esi, [esp+4Ch+var_34]
.text:0040737A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040737E
.text:0040737E loc_40737E:                             ; CODE XREF: sub_406FD0+3A0↑j
.text:0040737E                 inc     [esp+4Ch+var_34]
.text:00407382
.text:00407382 loc_407382:                             ; CODE XREF: sub_406FD0+396↑j
.text:00407382                 lea     eax, [ebp+1]
.text:00407385                 lea     esi, [esi+0]
.text:00407389                 lea     edi, [edi+0]
.text:00407390
.text:00407390 loc_407390:                             ; CODE XREF: sub_406FD0+310↑j
.text:00407390                                         ; sub_406FD0+378↑j ...
.text:00407390                 mov     ebp, [esp+4Ch+arg_4]
.text:00407394                 cmp     [esp+4Ch+var_34], ebp
.text:00407398                 jnb     short loc_4073A5
.text:0040739A                 mov     edx, [esp+4Ch+arg_0]
.text:0040739E                 mov     ecx, [esp+4Ch+var_34]
.text:004073A2                 mov     [ecx+edx], bl
.text:004073A5
.text:004073A5 loc_4073A5:                             ; CODE XREF: sub_406FD0+3C8↑j
.text:004073A5                 inc     [esp+4Ch+var_34]
.text:004073A9                 mov     ebp, eax
.text:004073AB                 jmp     loc_407060
.text:004073B0 ; ---------------------------------------------------------------------------
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_406FD0+105↑j
.text:004073B0                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004073B0                 mov     dl, 61h ; 'a'   ; jumptable 004070D5 case 7
.text:004073B2                 lea     esi, [esi+0]
.text:004073B9                 lea     edi, [edi+0]
.text:004073C0
.text:004073C0 loc_4073C0:                             ; CODE XREF: sub_406FD0+400↓j
.text:004073C0                                         ; sub_406FD0+409↓j ...
.text:004073C0                 cmp     [esp+4Ch+var_21], 0
.text:004073C5                 lea     eax, [ebp+1]
.text:004073C8                 jz      short loc_407390
.text:004073CA                 mov     bl, dl
.text:004073CC                 jmp     short loc_407368
.text:004073CE ; ---------------------------------------------------------------------------
.text:004073CE
.text:004073CE loc_4073CE:                             ; CODE XREF: sub_406FD0+105↑j
.text:004073CE                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004073CE                 mov     dl, 62h ; 'b'   ; jumptable 004070D5 case 8
.text:004073D0                 jmp     short loc_4073C0
.text:004073D2 ; ---------------------------------------------------------------------------
.text:004073D2
.text:004073D2 loc_4073D2:                             ; CODE XREF: sub_406FD0+105↑j
.text:004073D2                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004073D2                 mov     dl, 74h ; 't'   ; jumptable 004070D5 case 9
.text:004073D4
.text:004073D4 loc_4073D4:                             ; CODE XREF: sub_406FD0+449↓j
.text:004073D4                                         ; sub_406FD0+455↓j ...
.text:004073D4                 cmp     [esp+4Ch+arg_10], 1
.text:004073D9                 jnz     short loc_4073C0
.text:004073DB
.text:004073DB loc_4073DB:                             ; CODE XREF: sub_406FD0+45C↓j
.text:004073DB                                         ; sub_406FD0+4C1↓j ...
.text:004073DB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004077A2 cases 91,92,94,96,124
.text:004073E3                 mov     eax, [esp+4Ch+arg_14]
.text:004073E7                 mov     edx, [esp+4Ch+arg_C]
.text:004073EB                 mov     ecx, [esp+4Ch+Str]
.text:004073EF                 mov     ebx, [esp+4Ch+arg_4]
.text:004073F3                 mov     [esp+4Ch+var_38], eax ; int
.text:004073F7                 mov     ebp, [esp+4Ch+arg_0]
.text:004073FB                 mov     [esp+4Ch+State], edx ; int
.text:004073FF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407403                 mov     [esp+4Ch+Type], ebx ; int
.text:00407407                 mov     [esp+4Ch+C], ebp ; int
.text:0040740A                 call    sub_406FD0
.text:0040740F
.text:0040740F loc_40740F:                             ; CODE XREF: sub_406FD0+972↓j
.text:0040740F                 add     esp, 3Ch
.text:00407412                 pop     ebx
.text:00407413                 pop     esi
.text:00407414                 pop     edi
.text:00407415                 pop     ebp
.text:00407416                 retn
.text:00407417 ; ---------------------------------------------------------------------------
.text:00407417
.text:00407417 loc_407417:                             ; CODE XREF: sub_406FD0+105↑j
.text:00407417                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:00407417                 mov     dl, 6Eh ; 'n'   ; jumptable 004070D5 case 10
.text:00407419                 jmp     short loc_4073D4
.text:0040741B ; ---------------------------------------------------------------------------
.text:0040741B
.text:0040741B loc_40741B:                             ; CODE XREF: sub_406FD0+105↑j
.text:0040741B                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:0040741B                 mov     dl, 76h ; 'v'   ; jumptable 004070D5 case 11
.text:0040741D                 jmp     short loc_4073C0
.text:0040741F ; ---------------------------------------------------------------------------
.text:0040741F
.text:0040741F loc_40741F:                             ; CODE XREF: sub_406FD0+105↑j
.text:0040741F                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:0040741F                 mov     dl, 66h ; 'f'   ; jumptable 004070D5 case 12
.text:00407421                 jmp     short loc_4073C0
.text:00407423 ; ---------------------------------------------------------------------------
.text:00407423
.text:00407423 loc_407423:                             ; CODE XREF: sub_406FD0+105↑j
.text:00407423                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:00407423                 mov     dl, 72h ; 'r'   ; jumptable 004070D5 case 13
.text:00407425                 jmp     short loc_4073D4
.text:00407427 ; ---------------------------------------------------------------------------
.text:00407427
.text:00407427 loc_407427:                             ; CODE XREF: sub_406FD0+105↑j
.text:00407427                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:00407427                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004070D5 case 39
.text:0040742C                 jz      short loc_4073DB ; jumptable 004077A2 cases 91,92,94,96,124
.text:0040742E                 cmp     [esp+4Ch+arg_10], 2
.text:00407433                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:00407433                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:00407439                 mov     edx, [esp+4Ch+arg_4]
.text:0040743D                 cmp     [esp+4Ch+var_34], edx
.text:00407441                 jnb     short loc_40744F
.text:00407443                 mov     ecx, [esp+4Ch+arg_0]
.text:00407447                 mov     edi, [esp+4Ch+var_34]
.text:0040744B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040744F
.text:0040744F loc_40744F:                             ; CODE XREF: sub_406FD0+471↑j
.text:0040744F                 inc     [esp+4Ch+var_34]
.text:00407453                 mov     eax, [esp+4Ch+arg_4]
.text:00407457                 cmp     [esp+4Ch+var_34], eax
.text:0040745B                 jnb     short loc_407469
.text:0040745D                 mov     esi, [esp+4Ch+arg_0]
.text:00407461                 mov     edx, [esp+4Ch+var_34]
.text:00407465                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00407469
.text:00407469 loc_407469:                             ; CODE XREF: sub_406FD0+48B↑j
.text:00407469                 inc     [esp+4Ch+var_34]
.text:0040746D                 mov     edi, [esp+4Ch+arg_4]
.text:00407471                 cmp     [esp+4Ch+var_34], edi
.text:00407475                 jnb     short loc_407483
.text:00407477                 mov     ecx, [esp+4Ch+arg_0]
.text:0040747B                 mov     eax, [esp+4Ch+var_34]
.text:0040747F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00407483
.text:00407483 loc_407483:                             ; CODE XREF: sub_406FD0+4A5↑j
.text:00407483                                         ; sub_406FD0+5C4↓j ...
.text:00407483                 inc     [esp+4Ch+var_34]
.text:00407487                 jmp     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:00407487                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:0040748C ; ---------------------------------------------------------------------------
.text:0040748C
.text:0040748C loc_40748C:                             ; CODE XREF: sub_406FD0+105↑j
.text:0040748C                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:0040748C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004070D5 case 63
.text:00407491                 jz      loc_4073DB      ; jumptable 004077A2 cases 91,92,94,96,124
.text:00407497                 cmp     [esp+4Ch+arg_10], 3
.text:0040749C                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:0040749C                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004074A2                 lea     edx, [ebp+2]
.text:004074A5                 cmp     edx, [esp+4Ch+arg_C]
.text:004074A9                 jnb     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004074A9                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004074AF                 mov     esi, [esp+4Ch+Str]
.text:004074B3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004074B8                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004074B8                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004074BE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004074C3                 movsx   eax, cl
.text:004074C6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004074C9                 cmp     eax, 1Dh
.text:004074CC                 ja      def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004074CC                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004074D2                 jmp     ds:jpt_4074D2[eax*4] ; switch jump
.text:004074D2 ; ---------------------------------------------------------------------------
.text:004074D9                 align 4
.text:004074DC jpt_4074D2      dd offset loc_407554    ; DATA XREF: sub_406FD0+502↑r
.text:004074DC                 dd offset def_4074D2    ; jump table for switch statement
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset def_4074D2
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset loc_407554
.text:004074DC                 dd offset loc_407554
.text:00407554 ; ---------------------------------------------------------------------------
.text:00407554
.text:00407554 loc_407554:                             ; CODE XREF: sub_406FD0+502↑j
.text:00407554                                         ; DATA XREF: sub_406FD0:jpt_4074D2↑o
.text:00407554                 mov     ebp, edx        ; jumptable 004074D2 cases 33,39-41,45,47,60-62
.text:00407556                 mov     bl, cl
.text:00407558                 mov     edx, [esp+4Ch+arg_4]
.text:0040755C                 cmp     [esp+4Ch+var_34], edx
.text:00407560                 jnb     short loc_40756E
.text:00407562                 mov     ecx, [esp+4Ch+arg_0]
.text:00407566                 mov     edi, [esp+4Ch+var_34]
.text:0040756A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040756E
.text:0040756E loc_40756E:                             ; CODE XREF: sub_406FD0+590↑j
.text:0040756E                 inc     [esp+4Ch+var_34]
.text:00407572                 mov     eax, [esp+4Ch+arg_4]
.text:00407576                 cmp     [esp+4Ch+var_34], eax
.text:0040757A                 jnb     short loc_407588
.text:0040757C                 mov     edx, [esp+4Ch+arg_0]
.text:00407580                 mov     esi, [esp+4Ch+var_34]
.text:00407584                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00407588
.text:00407588 loc_407588:                             ; CODE XREF: sub_406FD0+5AA↑j
.text:00407588                 inc     [esp+4Ch+var_34]
.text:0040758C                 mov     edi, [esp+4Ch+arg_4]
.text:00407590                 cmp     [esp+4Ch+var_34], edi
.text:00407594                 jnb     loc_407483
.text:0040759A                 mov     eax, [esp+4Ch+arg_0]
.text:0040759E                 mov     ecx, [esp+4Ch+var_34]
.text:004075A2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004075A6                 jmp     loc_407483
.text:004075A6 ; ---------------------------------------------------------------------------
.text:004075AB                 align 10h
.text:004075B0
.text:004075B0 def_4070D5:                             ; CODE XREF: sub_406FD0+FF↑j
.text:004075B0                                         ; sub_406FD0+105↑j
.text:004075B0                                         ; DATA XREF: ...
.text:004075B0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004070D5 default case, cases 1-6,14-31,64
.text:004075B5                 jz      loc_4076E0
.text:004075BB                 mov     [esp+4Ch+var_28], 1
.text:004075C3                 mov     esi, ds:__mb_cur_max
.text:004075C9                 movzx   edx, bl
.text:004075CC                 cmp     dword ptr [esi], 1
.text:004075CF                 jz      loc_4076C4
.text:004075D5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004075DD                 mov     [esp+4Ch+C], edx ; C
.text:004075E0                 call    _isctype
.text:004075E5
.text:004075E5 loc_4075E5:                             ; CODE XREF: sub_406FD0+705↓j
.text:004075E5                 test    eax, eax
.text:004075E7                 setnz   [esp+4Ch+var_29]
.text:004075EC
.text:004075EC loc_4075EC:                             ; CODE XREF: sub_406FD0+7A5↓j
.text:004075EC                 cmp     [esp+4Ch+var_21], 0
.text:004075F1                 lea     eax, [ebp+1]
.text:004075F4                 jz      loc_407390
.text:004075FA                 cmp     [esp+4Ch+var_29], 0
.text:004075FF                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004075FF                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:00407605
.text:00407605 loc_407605:                             ; CODE XREF: sub_406FD0+7AB↓j
.text:00407605                 mov     eax, [esp+4Ch+var_28]
.text:00407609                 lea     edx, [eax+ebp]
.text:0040760C                 lea     esi, [esi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_406FD0+6EF↓j
.text:00407610                 cmp     [esp+4Ch+var_21], 0
.text:00407615                 jz      short loc_407690
.text:00407617                 cmp     [esp+4Ch+var_29], 0
.text:0040761C                 jnz     short loc_407690
.text:0040761E                 mov     edi, [esp+4Ch+arg_4]
.text:00407622                 cmp     [esp+4Ch+var_34], edi
.text:00407626                 jnb     short loc_407634
.text:00407628                 mov     esi, [esp+4Ch+arg_0]
.text:0040762C                 mov     eax, [esp+4Ch+var_34]
.text:00407630                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407634
.text:00407634 loc_407634:                             ; CODE XREF: sub_406FD0+656↑j
.text:00407634                 inc     [esp+4Ch+var_34]
.text:00407638                 mov     ecx, [esp+4Ch+arg_4]
.text:0040763C                 cmp     [esp+4Ch+var_34], ecx
.text:00407640                 jnb     short loc_407655
.text:00407642                 mov     cl, bl
.text:00407644                 mov     esi, [esp+4Ch+arg_0]
.text:00407648                 mov     edi, [esp+4Ch+var_34]
.text:0040764C                 shr     cl, 6
.text:0040764F                 add     cl, 30h ; '0'
.text:00407652                 mov     [edi+esi], cl
.text:00407655
.text:00407655 loc_407655:                             ; CODE XREF: sub_406FD0+670↑j
.text:00407655                 inc     [esp+4Ch+var_34]
.text:00407659                 mov     edi, [esp+4Ch+arg_4]
.text:0040765D                 cmp     [esp+4Ch+var_34], edi
.text:00407661                 jnb     short loc_407679
.text:00407663                 mov     cl, bl
.text:00407665                 mov     esi, [esp+4Ch+arg_0]
.text:00407669                 shr     cl, 3
.text:0040766C                 mov     edi, [esp+4Ch+var_34]
.text:00407670                 and     cl, 7
.text:00407673                 add     cl, 30h ; '0'
.text:00407676                 mov     [edi+esi], cl
.text:00407679
.text:00407679 loc_407679:                             ; CODE XREF: sub_406FD0+691↑j
.text:00407679                 inc     [esp+4Ch+var_34]
.text:0040767D                 and     bl, 7
.text:00407680                 add     bl, 30h ; '0'
.text:00407683                 lea     esi, [esi+0]
.text:00407689                 lea     edi, [edi+0]
.text:00407690
.text:00407690 loc_407690:                             ; CODE XREF: sub_406FD0+645↑j
.text:00407690                                         ; sub_406FD0+64C↑j
.text:00407690                 lea     eax, [ebp+1]
.text:00407693                 cmp     edx, eax
.text:00407695                 jbe     loc_407390
.text:0040769B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040769F                 cmp     [esp+4Ch+var_34], ebp
.text:004076A3                 jnb     short loc_4076B0
.text:004076A5                 mov     ecx, [esp+4Ch+arg_0]
.text:004076A9                 mov     edi, [esp+4Ch+var_34]
.text:004076AD                 mov     [edi+ecx], bl
.text:004076B0
.text:004076B0 loc_4076B0:                             ; CODE XREF: sub_406FD0+6D3↑j
.text:004076B0                 inc     [esp+4Ch+var_34]
.text:004076B4                 mov     ebp, eax
.text:004076B6                 mov     eax, [esp+4Ch+Str]
.text:004076BA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004076BF                 jmp     loc_407610
.text:004076C4 ; ---------------------------------------------------------------------------
.text:004076C4
.text:004076C4 loc_4076C4:                             ; CODE XREF: sub_406FD0+5FF↑j
.text:004076C4                 mov     ecx, ds:_pctype
.text:004076CA                 mov     edi, [ecx]
.text:004076CC                 movzx   eax, word ptr [edi+edx*2]
.text:004076D0                 and     eax, 157h
.text:004076D5                 jmp     loc_4075E5
.text:004076D5 ; ---------------------------------------------------------------------------
.text:004076DA                 align 10h
.text:004076E0
.text:004076E0 loc_4076E0:                             ; CODE XREF: sub_406FD0+5E5↑j
.text:004076E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004076E5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004076ED                 mov     [esp+4Ch+var_28], 0
.text:004076F5                 mov     [esp+4Ch+var_29], 1
.text:004076FA                 jz      loc_40788C
.text:00407700
.text:00407700 loc_407700:                             ; CODE XREF: sub_406FD0+8CC↓j
.text:00407700                 mov     ecx, [esp+4Ch+arg_C]
.text:00407704                 lea     edx, [esp+4Ch+var_18]
.text:00407708                 mov     edi, [esp+4Ch+Str]
.text:0040770C                 mov     [esp+4Ch+State], edx ; State
.text:00407710                 lea     esi, [esp+4Ch+var_18._State]
.text:00407714                 sub     ecx, ebp
.text:00407716                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040771A                 add     edi, ebp
.text:0040771C                 mov     [esp+4Ch+var_30], edi
.text:00407720                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00407724                 mov     [esp+4Ch+C], esi ; DstCh
.text:00407727                 call    mbrtowc
.text:0040772C                 test    eax, eax
.text:0040772E                 mov     edi, eax
.text:00407730                 jz      short loc_407770
.text:00407732                 cmp     eax, 0FFFFFFFFh
.text:00407735                 jz      loc_407882
.text:0040773B                 cmp     eax, 0FFFFFFFEh
.text:0040773E                 jz      loc_407842
.text:00407744                 cmp     [esp+4Ch+arg_10], 1
.text:00407749                 jz      short loc_407780
.text:0040774B
.text:0040774B loc_40774B:                             ; CODE XREF: sub_406FD0+7B9↓j
.text:0040774B                                         ; sub_406FD0+86D↓j
.text:0040774B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00407750                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407758                 mov     [esp+4Ch+C], ecx ; C
.text:0040775B                 call    iswctype
.text:00407760                 test    eax, eax
.text:00407762                 jnz     short loc_407769
.text:00407764                 mov     [esp+4Ch+var_29], 0
.text:00407769
.text:00407769 loc_407769:                             ; CODE XREF: sub_406FD0+792↑j
.text:00407769                 mov     [esp+4Ch+var_28], edi
.text:0040776D                 lea     esi, [esi+0]
.text:00407770
.text:00407770 loc_407770:                             ; CODE XREF: sub_406FD0+760↑j
.text:00407770                                         ; sub_406FD0+87B↓j ...
.text:00407770                 cmp     [esp+4Ch+var_28], 1
.text:00407775                 jbe     loc_4075EC
.text:0040777B                 jmp     loc_407605
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: sub_406FD0+779↑j
.text:00407780                 cmp     [esp+4Ch+arg_10], eax
.text:00407784                 mov     edx, 1
.text:00407789                 jnb     short loc_40774B
.text:0040778B
.text:0040778B loc_40778B:                             ; CODE XREF: sub_406FD0+867↓j
.text:0040778B                 mov     ecx, [esp+4Ch+Str]
.text:0040778F                 lea     esi, [edx+ebp]
.text:00407792                 movsx   eax, byte ptr [esi+ecx]
.text:00407796                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00407799                 cmp     eax, 21h
.text:0040779C                 ja      def_4077A2      ; jumptable 004077A2 default case, cases 93,95,97-123
.text:004077A2                 jmp     ds:jpt_4077A2[eax*4] ; switch jump
.text:004077A2 ; ---------------------------------------------------------------------------
.text:004077A9                 align 4
.text:004077AC jpt_4077A2      dd offset loc_4073DB    ; DATA XREF: sub_406FD0+7D2↑r
.text:004077AC                 dd offset loc_4073DB    ; jump table for switch statement
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset loc_4073DB
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset loc_4073DB
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset def_4077A2
.text:004077AC                 dd offset loc_4073DB
.text:00407834 ; ---------------------------------------------------------------------------
.text:00407834
.text:00407834 def_4077A2:                             ; CODE XREF: sub_406FD0+7CC↑j
.text:00407834                                         ; sub_406FD0+7D2↑j
.text:00407834                                         ; DATA XREF: ...
.text:00407834                 inc     edx             ; jumptable 004077A2 default case, cases 93,95,97-123
.text:00407835                 cmp     edx, edi
.text:00407837                 jb      loc_40778B
.text:0040783D                 jmp     loc_40774B
.text:00407842 ; ---------------------------------------------------------------------------
.text:00407842
.text:00407842 loc_407842:                             ; CODE XREF: sub_406FD0+76E↑j
.text:00407842                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407846                 mov     [esp+4Ch+var_29], 0
.text:0040784B                 jnb     loc_407770
.text:00407851                 mov     eax, [esp+4Ch+var_30]
.text:00407855                 cmp     byte ptr [eax], 0
.text:00407858                 jz      loc_407770
.text:0040785E
.text:0040785E loc_40785E:                             ; CODE XREF: sub_406FD0+8AB↓j
.text:0040785E                 inc     [esp+4Ch+var_28]
.text:00407862                 mov     esi, [esp+4Ch+var_28]
.text:00407866                 lea     eax, [esi+ebp]
.text:00407869                 cmp     eax, [esp+4Ch+arg_C]
.text:0040786D                 jnb     loc_407770
.text:00407873                 mov     edi, [esp+4Ch+Str]
.text:00407877                 cmp     byte ptr [eax+edi], 0
.text:0040787B                 jnz     short loc_40785E
.text:0040787D                 jmp     loc_407770
.text:00407882 ; ---------------------------------------------------------------------------
.text:00407882
.text:00407882 loc_407882:                             ; CODE XREF: sub_406FD0+765↑j
.text:00407882                 mov     [esp+4Ch+var_29], 0
.text:00407887                 jmp     loc_407770
.text:0040788C ; ---------------------------------------------------------------------------
.text:0040788C
.text:0040788C loc_40788C:                             ; CODE XREF: sub_406FD0+72A↑j
.text:0040788C                 mov     edx, [esp+4Ch+Str]
.text:00407890                 mov     [esp+4Ch+C], edx ; Str
.text:00407893                 call    strlen
.text:00407898                 mov     [esp+4Ch+arg_C], eax
.text:0040789C                 jmp     loc_407700
.text:004078A1 ; ---------------------------------------------------------------------------
.text:004078A1
.text:004078A1 loc_4078A1:                             ; CODE XREF: sub_406FD0+105↑j
.text:004078A1                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004078A1                 mov     dl, bl          ; jumptable 004070D5 case 92
.text:004078A3                 jmp     loc_4073D4
.text:004078A8 ; ---------------------------------------------------------------------------
.text:004078A8
.text:004078A8 loc_4078A8:                             ; CODE XREF: sub_406FD0+105↑j
.text:004078A8                                         ; sub_406FD0+902↓j
.text:004078A8                                         ; DATA XREF: ...
.text:004078A8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004070D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004078AD                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004078AD                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004078B3                 jmp     loc_4073DB      ; jumptable 004077A2 cases 91,92,94,96,124
.text:004078B8 ; ---------------------------------------------------------------------------
.text:004078B8
.text:004078B8 loc_4078B8:                             ; CODE XREF: sub_406FD0+105↑j
.text:004078B8                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004078B8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004070D5 cases 123,125
.text:004078BD                 jz      short loc_4078D4
.text:004078BF                 cmp     [esp+4Ch+arg_C], 1
.text:004078C4
.text:004078C4 loc_4078C4:                             ; CODE XREF: sub_406FD0+90C↓j
.text:004078C4                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004078C4                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004078CA
.text:004078CA loc_4078CA:                             ; CODE XREF: sub_406FD0+105↑j
.text:004078CA                                         ; DATA XREF: sub_406FD0:jpt_4070D5↑o
.text:004078CA                 test    ebp, ebp        ; jumptable 004070D5 cases 35,126
.text:004078CC                 jnz     def_4074D2      ; jumptable 004070D5 cases 37,43-58,65-90,93,95,97-122
.text:004078CC                                         ; jumptable 004074D2 default case, cases 34-38,42-44,46,48-59
.text:004078D2                 jmp     short loc_4078A8 ; jumptable 004070D5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004078D4 ; ---------------------------------------------------------------------------
.text:004078D4
.text:004078D4 loc_4078D4:                             ; CODE XREF: sub_406FD0+8ED↑j
.text:004078D4                 mov     esi, [esp+4Ch+Str]
.text:004078D8                 cmp     byte ptr [esi+1], 0
.text:004078DC                 jmp     short loc_4078C4
.text:004078DE ; ---------------------------------------------------------------------------
.text:004078DE
.text:004078DE loc_4078DE:                             ; CODE XREF: sub_406FD0:loc_40706F↑j
.text:004078DE                 test    ebp, ebp
.text:004078E0                 jnz     short loc_4078ED
.text:004078E2                 cmp     [esp+4Ch+arg_10], 1
.text:004078E7                 jz      loc_4073DB      ; jumptable 004077A2 cases 91,92,94,96,124
.text:004078ED
.text:004078ED loc_4078ED:                             ; CODE XREF: sub_406FD0+910↑j
.text:004078ED                 mov     esi, [esp+4Ch+var_1C]
.text:004078F1                 test    esi, esi
.text:004078F3                 jz      short loc_407928
.text:004078F5                 mov     edi, [esp+4Ch+var_1C]
.text:004078F9                 movzx   eax, byte ptr [edi]
.text:004078FC                 test    al, al
.text:004078FE                 jz      short loc_407928
.text:00407900
.text:00407900 loc_407900:                             ; CODE XREF: sub_406FD0+956↓j
.text:00407900                 mov     ebp, [esp+4Ch+arg_4]
.text:00407904                 cmp     [esp+4Ch+var_34], ebp
.text:00407908                 jnb     short loc_407915
.text:0040790A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040790E                 mov     ebx, [esp+4Ch+var_34]
.text:00407912                 mov     [ebx+ecx], al
.text:00407915
.text:00407915 loc_407915:                             ; CODE XREF: sub_406FD0+938↑j
.text:00407915                 inc     [esp+4Ch+var_1C]
.text:00407919                 inc     [esp+4Ch+var_34]
.text:0040791D                 mov     edx, [esp+4Ch+var_1C]
.text:00407921                 movzx   eax, byte ptr [edx]
.text:00407924                 test    al, al
.text:00407926                 jnz     short loc_407900
.text:00407928
.text:00407928 loc_407928:                             ; CODE XREF: sub_406FD0+923↑j
.text:00407928                                         ; sub_406FD0+92E↑j
.text:00407928                 mov     eax, [esp+4Ch+arg_4]
.text:0040792C                 cmp     [esp+4Ch+var_34], eax
.text:00407930                 jnb     short loc_40793E
.text:00407932                 mov     edi, [esp+4Ch+arg_0]
.text:00407936                 mov     esi, [esp+4Ch+var_34]
.text:0040793A                 mov     byte ptr [esi+edi], 0
.text:0040793E
.text:0040793E loc_40793E:                             ; CODE XREF: sub_406FD0+960↑j
.text:0040793E                 mov     eax, [esp+4Ch+var_34]
.text:00407942                 jmp     loc_40740F
.text:00407947 ; ---------------------------------------------------------------------------
.text:00407947
.text:00407947 loc_407947:                             ; CODE XREF: sub_406FD0+95↑j
.text:00407947                 mov     ebx, [esp+4Ch+Str]
.text:0040794B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00407950                 jmp     loc_40706F
.text:00407955 ; ---------------------------------------------------------------------------
.text:00407955
.text:00407955 loc_407955:                             ; CODE XREF: sub_406FD0+3D↑j
.text:00407955                                         ; DATA XREF: sub_406FD0:jpt_40700D↑o
.text:00407955                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040700D case 2
.text:00407959                 cmp     [esp+4Ch+var_34], edx
.text:0040795D                 jnb     short loc_407966
.text:0040795F                 mov     ecx, [esp+4Ch+arg_0]
.text:00407963                 mov     byte ptr [ecx], 27h ; '''
.text:00407966
.text:00407966 loc_407966:                             ; CODE XREF: sub_406FD0+98D↑j
.text:00407966                 mov     [esp+4Ch+var_34], 1
.text:0040796E                 mov     [esp+4Ch+var_1C], 406FBEh
.text:00407976                 jmp     loc_407056
.text:0040797B ; ---------------------------------------------------------------------------
.text:0040797B
.text:0040797B loc_40797B:                             ; CODE XREF: sub_406FD0+3D↑j
.text:0040797B                                         ; DATA XREF: sub_406FD0:jpt_40700D↑o
.text:0040797B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040700D case 4
.text:00407980                 jmp     def_40700D      ; jumptable 0040700D default case, cases 0,1
.text:00407985 ; ---------------------------------------------------------------------------
.text:00407985
.text:00407985 loc_407985:                             ; CODE XREF: sub_406FD0+3D↑j
.text:00407985                                         ; DATA XREF: sub_406FD0:jpt_40700D↑o
.text:00407985                 mov     [esp+4Ch+C], 406FC0h ; jumptable 0040700D cases 5,6
.text:0040798C                 call    ds:libintl_gettext
.text:00407992                 cmp     eax, 406FC0h
.text:00407997                 mov     edi, eax
.text:00407999                 jz      short loc_407A10
.text:0040799B
.text:0040799B loc_40799B:                             ; CODE XREF: sub_406FD0+A45↓j
.text:0040799B                                         ; sub_406FD0+A4C↓j
.text:0040799B                 mov     [esp+4Ch+C], 406FBEh
.text:004079A2                 call    ds:libintl_gettext
.text:004079A8                 cmp     eax, 406FBEh
.text:004079AD                 mov     edx, eax
.text:004079AF                 jz      short loc_407A02
.text:004079B1
.text:004079B1 loc_4079B1:                             ; CODE XREF: sub_406FD0+A37↓j
.text:004079B1                                         ; sub_406FD0+A3E↓j
.text:004079B1                 mov     [esp+4Ch+var_1C], edi
.text:004079B5                 cmp     byte ptr [edi], 0
.text:004079B8                 jz      short loc_4079E8
.text:004079BA
.text:004079BA loc_4079BA:                             ; CODE XREF: sub_406FD0+A16↓j
.text:004079BA                 mov     ecx, [esp+4Ch+arg_4]
.text:004079BE                 cmp     [esp+4Ch+var_34], ecx
.text:004079C2                 jnb     short loc_4079D7
.text:004079C4                 mov     ebp, [esp+4Ch+var_1C]
.text:004079C8                 mov     edi, [esp+4Ch+arg_0]
.text:004079CC                 mov     esi, [esp+4Ch+var_34]
.text:004079D0                 movzx   ebx, byte ptr [ebp+0]
.text:004079D4                 mov     [esi+edi], bl
.text:004079D7
.text:004079D7 loc_4079D7:                             ; CODE XREF: sub_406FD0+9F2↑j
.text:004079D7                 inc     [esp+4Ch+var_1C]
.text:004079DB                 inc     [esp+4Ch+var_34]
.text:004079DF                 mov     eax, [esp+4Ch+var_1C]
.text:004079E3                 cmp     byte ptr [eax], 0
.text:004079E6                 jnz     short loc_4079BA
.text:004079E8
.text:004079E8 loc_4079E8:                             ; CODE XREF: sub_406FD0+9E8↑j
.text:004079E8                 mov     [esp+4Ch+var_21], 1
.text:004079ED                 mov     [esp+4Ch+var_1C], edx
.text:004079F1                 mov     [esp+4Ch+C], edx ; Str
.text:004079F4                 call    strlen
.text:004079F9                 mov     [esp+4Ch+var_20], eax
.text:004079FD                 jmp     def_40700D      ; jumptable 0040700D default case, cases 0,1
.text:00407A02 ; ---------------------------------------------------------------------------
.text:00407A02
.text:00407A02 loc_407A02:                             ; CODE XREF: sub_406FD0+9DF↑j
.text:00407A02                 cmp     [esp+4Ch+arg_10], 6
.text:00407A07                 jnz     short loc_4079B1
.text:00407A09                 mov     edx, offset asc_406FBC ; "\"'`"
.text:00407A0E                 jmp     short loc_4079B1
.text:00407A10 ; ---------------------------------------------------------------------------
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: sub_406FD0+9C9↑j
.text:00407A10                 cmp     [esp+4Ch+arg_10], 6
.text:00407A15                 jnz     short loc_40799B
.text:00407A17                 mov     edi, offset asc_406FBC ; "\"'`"
.text:00407A1C                 jmp     loc_40799B
.text:00407A1C sub_406FD0      endp
.text:00407A1C
.text:00407A21 ; ---------------------------------------------------------------------------
.text:00407A21                 jmp     short loc_407A30
.text:00407A21 ; ---------------------------------------------------------------------------
.text:00407A23                 align 10h
.text:00407A30
.text:00407A30 loc_407A30:                             ; CODE XREF: .text:00407A21↑j
.text:00407A30                 sub     esp, 0Ch
.text:00407A33                 mov     [esp+4], ebx
.text:00407A37                 mov     [esp+8], esi
.text:00407A3B                 call    _errno
.text:00407A40                 mov     esi, [eax]
.text:00407A42                 mov     dword ptr [esp], 24h ; '$'
.text:00407A49                 call    sub_406860
.text:00407A4E                 mov     edx, [esp+10h]
.text:00407A52                 mov     ebx, eax
.text:00407A54                 test    edx, edx
.text:00407A56                 jz      short loc_407AA1
.text:00407A58
.text:00407A58 loc_407A58:                             ; CODE XREF: .text:00407AA6↓j
.text:00407A58                 mov     ecx, [edx]
.text:00407A5A                 mov     [ebx], ecx
.text:00407A5C                 mov     ecx, [edx+4]
.text:00407A5F                 mov     [ebx+4], ecx
.text:00407A62                 mov     ecx, [edx+8]
.text:00407A65                 mov     [ebx+8], ecx
.text:00407A68                 mov     ecx, [edx+0Ch]
.text:00407A6B                 mov     [ebx+0Ch], ecx
.text:00407A6E                 mov     ecx, [edx+10h]
.text:00407A71                 mov     [ebx+10h], ecx
.text:00407A74                 mov     ecx, [edx+14h]
.text:00407A77                 mov     [ebx+14h], ecx
.text:00407A7A                 mov     ecx, [edx+18h]
.text:00407A7D                 mov     [ebx+18h], ecx
.text:00407A80                 mov     ecx, [edx+1Ch]
.text:00407A83                 mov     [ebx+1Ch], ecx
.text:00407A86                 mov     ecx, [edx+20h]
.text:00407A89                 mov     [ebx+20h], ecx
.text:00407A8C                 call    _errno
.text:00407A91                 mov     [eax], esi
.text:00407A93                 mov     esi, [esp+8]
.text:00407A97                 mov     eax, ebx
.text:00407A99                 mov     ebx, [esp+4]
.text:00407A9D                 add     esp, 0Ch
.text:00407AA0                 retn
.text:00407AA1 ; ---------------------------------------------------------------------------
.text:00407AA1
.text:00407AA1 loc_407AA1:                             ; CODE XREF: .text:00407A56↑j
.text:00407AA1                 mov     edx, offset dword_40B210
.text:00407AA6                 jmp     short loc_407A58
.text:00407AA6 ; ---------------------------------------------------------------------------
.text:00407AA8                 align 10h
.text:00407AB0                 mov     eax, [esp+4]
.text:00407AB4                 test    eax, eax
.text:00407AB6                 jz      short loc_407AC0
.text:00407AB8
.text:00407AB8 loc_407AB8:                             ; CODE XREF: .text:00407AC5↓j
.text:00407AB8                 mov     eax, [eax]
.text:00407ABA                 retn
.text:00407ABA ; ---------------------------------------------------------------------------
.text:00407ABB                 align 10h
.text:00407AC0
.text:00407AC0 loc_407AC0:                             ; CODE XREF: .text:00407AB6↑j
.text:00407AC0                 mov     eax, offset dword_40B210
.text:00407AC5                 jmp     short loc_407AB8
.text:00407AC5 ; ---------------------------------------------------------------------------
.text:00407AC7                 align 10h
.text:00407AD0                 mov     edx, [esp+4]
.text:00407AD4                 test    edx, edx
.text:00407AD6                 jz      short loc_407AE0
.text:00407AD8
.text:00407AD8 loc_407AD8:                             ; CODE XREF: .text:00407AE5↓j
.text:00407AD8                 mov     ecx, [esp+8]
.text:00407ADC                 mov     [edx], ecx
.text:00407ADE                 retn
.text:00407ADE ; ---------------------------------------------------------------------------
.text:00407ADF                 align 10h
.text:00407AE0
.text:00407AE0 loc_407AE0:                             ; CODE XREF: .text:00407AD6↑j
.text:00407AE0                 mov     edx, offset dword_40B210
.text:00407AE5                 jmp     short loc_407AD8
.text:00407AE5 ; ---------------------------------------------------------------------------
.text:00407AE7                 align 10h
.text:00407AF0                 sub     esp, 8
.text:00407AF3                 mov     eax, [esp+0Ch]
.text:00407AF7                 movzx   ecx, byte ptr [esp+10h]
.text:00407AFC                 mov     [esp], ebx
.text:00407AFF                 mov     ebx, [esp+14h]
.text:00407B03                 mov     [esp+4], esi
.text:00407B07                 mov     dl, cl
.text:00407B09                 shr     dl, 5
.text:00407B0C                 movzx   edx, dl
.text:00407B0F                 shl     edx, 2
.text:00407B12                 test    eax, eax
.text:00407B14                 lea     esi, [edx+eax+4]
.text:00407B18                 jz      short loc_407B40
.text:00407B1A
.text:00407B1A loc_407B1A:                             ; CODE XREF: .text:00407B46↓j
.text:00407B1A                 mov     edx, [esi]
.text:00407B1C                 and     ecx, 1Fh
.text:00407B1F                 and     ebx, 1
.text:00407B22                 mov     eax, edx
.text:00407B24                 shr     eax, cl
.text:00407B26                 and     eax, 1
.text:00407B29                 xor     ebx, eax
.text:00407B2B                 shl     ebx, cl
.text:00407B2D                 xor     edx, ebx
.text:00407B2F                 mov     [esi], edx
.text:00407B31                 mov     ebx, [esp]
.text:00407B34                 mov     esi, [esp+4]
.text:00407B38                 add     esp, 8
.text:00407B3B                 retn
.text:00407B3B ; ---------------------------------------------------------------------------
.text:00407B3C                 align 10h
.text:00407B40
.text:00407B40 loc_407B40:                             ; CODE XREF: .text:00407B18↑j
.text:00407B40                 lea     esi, dword_40B214[edx]
.text:00407B46                 jmp     short loc_407B1A
.text:00407B46 ; ---------------------------------------------------------------------------
.text:00407B48                 align 10h
.text:00407B50                 sub     esp, 2Ch
.text:00407B53                 mov     [esp+24h], ebx
.text:00407B57                 mov     ebx, [esp+40h]
.text:00407B5B                 mov     [esp+28h], esi
.text:00407B5F                 test    ebx, ebx
.text:00407B61                 jz      short loc_407BB0
.text:00407B63
.text:00407B63 loc_407B63:                             ; CODE XREF: .text:00407BB5↓j
.text:00407B63                 call    _errno
.text:00407B68                 mov     esi, [eax]
.text:00407B6A                 mov     [esp+14h], ebx
.text:00407B6E                 mov     edx, [ebx]
.text:00407B70                 mov     ecx, [esp+38h]
.text:00407B74                 mov     ebx, [esp+3Ch]
.text:00407B78                 mov     [esp+10h], edx
.text:00407B7C                 mov     edx, [esp+34h]
.text:00407B80                 mov     [esp+0Ch], ebx
.text:00407B84                 mov     [esp+8], ecx
.text:00407B88                 mov     [esp+4], edx
.text:00407B8C                 mov     edx, [esp+30h]
.text:00407B90                 mov     [esp], edx
.text:00407B93                 call    sub_406FD0
.text:00407B98                 mov     ebx, eax
.text:00407B9A                 call    _errno
.text:00407B9F                 mov     [eax], esi
.text:00407BA1                 mov     esi, [esp+28h]
.text:00407BA5                 mov     eax, ebx
.text:00407BA7                 mov     ebx, [esp+24h]
.text:00407BAB                 add     esp, 2Ch
.text:00407BAE                 retn
.text:00407BAE ; ---------------------------------------------------------------------------
.text:00407BAF                 align 10h
.text:00407BB0
.text:00407BB0 loc_407BB0:                             ; CODE XREF: .text:00407B61↑j
.text:00407BB0                 mov     ebx, offset dword_40B210
.text:00407BB5                 jmp     short loc_407B63
.text:00407BB5 ; ---------------------------------------------------------------------------
.text:00407BB7                 align 10h
.text:00407BC0                 push    ebp
.text:00407BC1                 push    edi
.text:00407BC2                 push    esi
.text:00407BC3                 push    ebx
.text:00407BC4                 sub     esp, 2Ch
.text:00407BC7                 mov     ebp, [esp+48h]
.text:00407BCB                 call    _errno
.text:00407BD0                 mov     edx, [eax]
.text:00407BD2                 test    ebp, ebp
.text:00407BD4                 mov     ebx, ebp
.text:00407BD6                 mov     [esp+28h], edx
.text:00407BDA                 jz      loc_407C90
.text:00407BE0
.text:00407BE0 loc_407BE0:                             ; CODE XREF: .text:00407C95↓j
.text:00407BE0                 call    _errno
.text:00407BE5                 mov     edi, [eax]
.text:00407BE7                 mov     esi, ebp
.text:00407BE9                 mov     [esp+14h], ebx
.text:00407BED                 mov     ecx, [ebx]
.text:00407BEF                 mov     dword ptr [esp], 0
.text:00407BF6                 mov     edx, [esp+44h]
.text:00407BFA                 mov     dword ptr [esp+4], 0
.text:00407C02                 mov     eax, [esp+40h]
.text:00407C06                 mov     [esp+10h], ecx
.text:00407C0A                 mov     [esp+0Ch], edx
.text:00407C0E                 mov     [esp+8], eax
.text:00407C12                 call    sub_406FD0
.text:00407C17                 mov     ebx, eax
.text:00407C19                 call    _errno
.text:00407C1E                 mov     [eax], edi
.text:00407C20                 lea     edi, [ebx+1]
.text:00407C23                 mov     [esp], edi
.text:00407C26                 call    sub_406860
.text:00407C2B                 mov     [esp+24h], eax
.text:00407C2F                 test    ebp, ebp
.text:00407C31                 jz      short loc_407C82
.text:00407C33
.text:00407C33 loc_407C33:                             ; CODE XREF: .text:00407C87↓j
.text:00407C33                 call    _errno
.text:00407C38                 mov     ebp, [eax]
.text:00407C3A                 mov     [esp+14h], esi
.text:00407C3E                 mov     ecx, [esi]
.text:00407C40                 mov     [esp+4], edi
.text:00407C44                 mov     edx, [esp+44h]
.text:00407C48                 mov     esi, [esp+24h]
.text:00407C4C                 mov     [esp+10h], ecx
.text:00407C50                 mov     eax, [esp+40h]
.text:00407C54                 mov     [esp+0Ch], edx
.text:00407C58                 mov     [esp], esi
.text:00407C5B                 mov     [esp+8], eax
.text:00407C5F                 call    sub_406FD0
.text:00407C64                 call    _errno
.text:00407C69                 mov     [eax], ebp
.text:00407C6B                 call    _errno
.text:00407C70                 mov     ebx, [esp+28h]
.text:00407C74                 mov     [eax], ebx
.text:00407C76                 mov     eax, [esp+24h]
.text:00407C7A                 add     esp, 2Ch
.text:00407C7D                 pop     ebx
.text:00407C7E                 pop     esi
.text:00407C7F                 pop     edi
.text:00407C80                 pop     ebp
.text:00407C81                 retn
.text:00407C82 ; ---------------------------------------------------------------------------
.text:00407C82
.text:00407C82 loc_407C82:                             ; CODE XREF: .text:00407C31↑j
.text:00407C82                 mov     esi, offset dword_40B210
.text:00407C87                 jmp     short loc_407C33
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C89                 align 10h
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: .text:00407BDA↑j
.text:00407C90                 mov     ebx, offset dword_40B210
.text:00407C95                 jmp     loc_407BE0
.text:00407C95 ; ---------------------------------------------------------------------------
.text:00407C9A                 align 10h
.text:00407CA0                 sub     esp, 1Ch
.text:00407CA3                 mov     edx, [esp+24h]
.text:00407CA7                 mov     dword ptr [esp+0Ch], offset dword_40B210
.text:00407CAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407CB7                 mov     [esp+4], edx
.text:00407CBB                 mov     edx, [esp+20h]
.text:00407CBF                 mov     [esp], edx
.text:00407CC2                 call    sub_408110
.text:00407CC7                 add     esp, 1Ch
.text:00407CCA                 retn
.text:00407CCA ; ---------------------------------------------------------------------------
.text:00407CCB                 align 10h
.text:00407CD0                 sub     esp, 1Ch
.text:00407CD3                 mov     edx, [esp+20h]
.text:00407CD7                 mov     dword ptr [esp+0Ch], offset dword_40B210
.text:00407CDF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407CE7                 mov     [esp+4], edx
.text:00407CEB                 mov     dword ptr [esp], 0
.text:00407CF2                 call    sub_408110
.text:00407CF7                 add     esp, 1Ch
.text:00407CFA                 retn
.text:00407CFA ; ---------------------------------------------------------------------------
.text:00407CFB                 align 10h
.text:00407D00
.text:00407D00 ; =============== S U B R O U T I N E =======================================
.text:00407D00
.text:00407D00
.text:00407D00 ; int __cdecl sub_407D00(int, int, char *)
.text:00407D00 sub_407D00      proc near               ; CODE XREF: .text:00405ADA↑p
.text:00407D00                                         ; sub_405AF0+1A↑p
.text:00407D00
.text:00407D00 var_BC          = dword ptr -0BCh
.text:00407D00 var_B8          = dword ptr -0B8h
.text:00407D00 var_B4          = dword ptr -0B4h
.text:00407D00 var_B0          = dword ptr -0B0h
.text:00407D00 var_AC          = dword ptr -0ACh
.text:00407D00 var_A8          = dword ptr -0A8h
.text:00407D00 var_A4          = dword ptr -0A4h
.text:00407D00 var_A0          = dword ptr -0A0h
.text:00407D00 var_9C          = dword ptr -9Ch
.text:00407D00 var_98          = dword ptr -98h
.text:00407D00 var_94          = dword ptr -94h
.text:00407D00 var_90          = dword ptr -90h
.text:00407D00 var_8C          = dword ptr -8Ch
.text:00407D00 var_7C          = dword ptr -7Ch
.text:00407D00 var_78          = dword ptr -78h
.text:00407D00 var_74          = dword ptr -74h
.text:00407D00 var_70          = dword ptr -70h
.text:00407D00 var_6C          = dword ptr -6Ch
.text:00407D00 var_68          = dword ptr -68h
.text:00407D00 var_64          = dword ptr -64h
.text:00407D00 var_60          = dword ptr -60h
.text:00407D00 var_5C          = dword ptr -5Ch
.text:00407D00 var_4C          = dword ptr -4Ch
.text:00407D00 var_48          = dword ptr -48h
.text:00407D00 var_44          = dword ptr -44h
.text:00407D00 var_40          = dword ptr -40h
.text:00407D00 var_3C          = dword ptr -3Ch
.text:00407D00 var_38          = dword ptr -38h
.text:00407D00 var_34          = dword ptr -34h
.text:00407D00 var_30          = dword ptr -30h
.text:00407D00 var_2C          = dword ptr -2Ch
.text:00407D00 arg_0           = dword ptr  4
.text:00407D00 arg_4           = dword ptr  8
.text:00407D00 arg_8           = dword ptr  0Ch
.text:00407D00
.text:00407D00                 push    ebp
.text:00407D01                 xor     eax, eax
.text:00407D03                 mov     ecx, 8
.text:00407D08                 push    edi
.text:00407D09                 push    esi
.text:00407D0A                 push    ebx
.text:00407D0B                 sub     esp, 0ACh
.text:00407D11                 mov     ebp, [esp+0BCh+arg_4]
.text:00407D18                 cld
.text:00407D19                 lea     edi, [esp+0BCh+var_A8]
.text:00407D1D                 mov     [esp+0BCh+var_AC], ebp
.text:00407D21                 rep stosd
.text:00407D23                 mov     eax, [esp+0BCh+var_8C]
.text:00407D27                 mov     edi, [esp+0BCh+var_AC]
.text:00407D2B                 mov     esi, [esp+0BCh+var_A8]
.text:00407D2F                 mov     [esp+0BCh+var_5C], eax
.text:00407D33                 mov     ebp, [esp+0BCh+var_A4]
.text:00407D37                 mov     eax, [esp+0BCh+var_AC]
.text:00407D3B                 mov     [esp+0BCh+var_7C], edi
.text:00407D3F                 mov     ecx, [esp+0BCh+var_94]
.text:00407D43                 mov     edi, [esp+0BCh+var_A0]
.text:00407D47                 mov     [esp+0BCh+var_78], esi
.text:00407D4B                 mov     edx, [esp+0BCh+var_90]
.text:00407D4F                 mov     esi, [esp+0BCh+var_9C]
.text:00407D53                 mov     [esp+0BCh+var_4C], eax
.text:00407D57                 mov     ebx, [esp+0BCh+var_98]
.text:00407D5B                 mov     eax, [esp+0BCh+var_A8]
.text:00407D5F                 mov     [esp+0BCh+var_74], ebp
.text:00407D63                 mov     [esp+0BCh+var_70], edi
.text:00407D67                 mov     [esp+0BCh+var_6C], esi
.text:00407D6B                 mov     [esp+0BCh+var_68], ebx
.text:00407D6F                 mov     [esp+0BCh+var_64], ecx
.text:00407D73                 mov     [esp+0BCh+var_60], edx
.text:00407D77                 mov     [esp+0BCh+var_48], eax
.text:00407D7B                 mov     [esp+0BCh+var_44], ebp
.text:00407D7F                 mov     [esp+0BCh+var_40], edi
.text:00407D83                 mov     [esp+0BCh+var_3C], esi
.text:00407D8A                 mov     [esp+0BCh+var_38], ebx
.text:00407D91                 mov     ebx, [esp+0BCh+var_8C]
.text:00407D95                 mov     [esp+0BCh+var_30], edx
.text:00407D9C                 mov     edx, [esp+0BCh+arg_8]
.text:00407DA3                 mov     [esp+0BCh+var_34], ecx
.text:00407DAA                 lea     ecx, [esp+0BCh+var_4C]
.text:00407DAE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00407DB2                 mov     edx, [esp+0BCh+arg_0]
.text:00407DB9                 mov     [esp+0BCh+var_2C], ebx
.text:00407DC0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00407DC4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00407DCC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00407DCF                 call    sub_408110
.text:00407DD4                 add     esp, 0ACh
.text:00407DDA                 pop     ebx
.text:00407DDB                 pop     esi
.text:00407DDC                 pop     edi
.text:00407DDD                 pop     ebp
.text:00407DDE                 retn
.text:00407DDE sub_407D00      endp
.text:00407DDE
.text:00407DDE ; ---------------------------------------------------------------------------
.text:00407DDF                 align 10h
.text:00407DE0
.text:00407DE0 ; =============== S U B R O U T I N E =======================================
.text:00407DE0
.text:00407DE0
.text:00407DE0 ; int __cdecl sub_407DE0(int, int, char *, int)
.text:00407DE0 sub_407DE0      proc near               ; CODE XREF: sub_406B80+BD↑p
.text:00407DE0                                         ; sub_406B80+E3↑p
.text:00407DE0
.text:00407DE0 var_BC          = dword ptr -0BCh
.text:00407DE0 var_B8          = dword ptr -0B8h
.text:00407DE0 var_B4          = dword ptr -0B4h
.text:00407DE0 var_B0          = dword ptr -0B0h
.text:00407DE0 var_AC          = dword ptr -0ACh
.text:00407DE0 var_A8          = dword ptr -0A8h
.text:00407DE0 var_A4          = dword ptr -0A4h
.text:00407DE0 var_A0          = dword ptr -0A0h
.text:00407DE0 var_9C          = dword ptr -9Ch
.text:00407DE0 var_98          = dword ptr -98h
.text:00407DE0 var_94          = dword ptr -94h
.text:00407DE0 var_90          = dword ptr -90h
.text:00407DE0 var_8C          = dword ptr -8Ch
.text:00407DE0 var_7C          = dword ptr -7Ch
.text:00407DE0 var_78          = dword ptr -78h
.text:00407DE0 var_74          = dword ptr -74h
.text:00407DE0 var_70          = dword ptr -70h
.text:00407DE0 var_6C          = dword ptr -6Ch
.text:00407DE0 var_68          = dword ptr -68h
.text:00407DE0 var_64          = dword ptr -64h
.text:00407DE0 var_60          = dword ptr -60h
.text:00407DE0 var_5C          = dword ptr -5Ch
.text:00407DE0 var_4C          = dword ptr -4Ch
.text:00407DE0 var_48          = dword ptr -48h
.text:00407DE0 var_44          = dword ptr -44h
.text:00407DE0 var_40          = dword ptr -40h
.text:00407DE0 var_3C          = dword ptr -3Ch
.text:00407DE0 var_38          = dword ptr -38h
.text:00407DE0 var_34          = dword ptr -34h
.text:00407DE0 var_30          = dword ptr -30h
.text:00407DE0 var_2C          = dword ptr -2Ch
.text:00407DE0 arg_0           = dword ptr  4
.text:00407DE0 arg_4           = dword ptr  8
.text:00407DE0 arg_8           = dword ptr  0Ch
.text:00407DE0 arg_C           = dword ptr  10h
.text:00407DE0
.text:00407DE0                 push    ebp
.text:00407DE1                 xor     eax, eax
.text:00407DE3                 mov     ecx, 8
.text:00407DE8                 push    edi
.text:00407DE9                 push    esi
.text:00407DEA                 push    ebx
.text:00407DEB                 sub     esp, 0ACh
.text:00407DF1                 mov     edx, [esp+0BCh+arg_4]
.text:00407DF8                 cld
.text:00407DF9                 lea     edi, [esp+0BCh+var_A8]
.text:00407DFD                 mov     [esp+0BCh+var_AC], edx
.text:00407E01                 rep stosd
.text:00407E03                 mov     eax, [esp+0BCh+var_8C]
.text:00407E07                 mov     ebp, [esp+0BCh+var_AC]
.text:00407E0B                 mov     edi, [esp+0BCh+var_A8]
.text:00407E0F                 mov     [esp+0BCh+var_5C], eax
.text:00407E13                 mov     esi, [esp+0BCh+var_9C]
.text:00407E17                 mov     eax, [esp+0BCh+var_AC]
.text:00407E1B                 mov     [esp+0BCh+var_7C], ebp
.text:00407E1F                 mov     ecx, [esp+0BCh+var_94]
.text:00407E23                 mov     ebp, [esp+0BCh+var_A4]
.text:00407E27                 mov     [esp+0BCh+var_78], edi
.text:00407E2B                 mov     edx, [esp+0BCh+var_90]
.text:00407E2F                 mov     edi, [esp+0BCh+var_A0]
.text:00407E33                 mov     [esp+0BCh+var_4C], eax
.text:00407E37                 mov     ebx, [esp+0BCh+var_98]
.text:00407E3B                 mov     eax, [esp+0BCh+var_A8]
.text:00407E3F                 mov     [esp+0BCh+var_74], ebp
.text:00407E43                 mov     [esp+0BCh+var_70], edi
.text:00407E47                 mov     [esp+0BCh+var_6C], esi
.text:00407E4B                 mov     [esp+0BCh+var_68], ebx
.text:00407E4F                 mov     [esp+0BCh+var_64], ecx
.text:00407E53                 mov     [esp+0BCh+var_60], edx
.text:00407E57                 mov     [esp+0BCh+var_48], eax
.text:00407E5B                 mov     [esp+0BCh+var_44], ebp
.text:00407E5F                 mov     [esp+0BCh+var_40], edi
.text:00407E63                 mov     [esp+0BCh+var_3C], esi
.text:00407E6A                 mov     [esp+0BCh+var_38], ebx
.text:00407E71                 mov     esi, [esp+0BCh+var_8C]
.text:00407E75                 lea     ebx, [esp+0BCh+var_4C]
.text:00407E79                 mov     [esp+0BCh+var_30], edx
.text:00407E80                 mov     edx, [esp+0BCh+arg_8]
.text:00407E87                 mov     [esp+0BCh+var_34], ecx
.text:00407E8E                 mov     ecx, [esp+0BCh+arg_C]
.text:00407E95                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00407E99                 mov     edx, [esp+0BCh+arg_0]
.text:00407EA0                 mov     [esp+0BCh+var_2C], esi
.text:00407EA7                 mov     [esp+0BCh+var_B0], ebx ; int
.text:00407EAB                 mov     [esp+0BCh+var_B4], ecx ; int
.text:00407EAF                 mov     [esp+0BCh+var_BC], edx ; int
.text:00407EB2                 call    sub_408110
.text:00407EB7                 add     esp, 0ACh
.text:00407EBD                 pop     ebx
.text:00407EBE                 pop     esi
.text:00407EBF                 pop     edi
.text:00407EC0                 pop     ebp
.text:00407EC1                 retn
.text:00407EC1 sub_407DE0      endp
.text:00407EC1
.text:00407EC1 ; ---------------------------------------------------------------------------
.text:00407EC2                 align 10h
.text:00407ED0                 push    ebp
.text:00407ED1                 xor     eax, eax
.text:00407ED3                 mov     ecx, 8
.text:00407ED8                 push    edi
.text:00407ED9                 push    esi
.text:00407EDA                 push    ebx
.text:00407EDB                 sub     esp, 0ACh
.text:00407EE1                 mov     edi, [esp+0C0h]
.text:00407EE8                 cld
.text:00407EE9                 mov     [esp+10h], edi
.text:00407EED                 lea     edi, [esp+14h]
.text:00407EF1                 rep stosd
.text:00407EF3                 mov     eax, [esp+30h]
.text:00407EF7                 mov     esi, [esp+10h]
.text:00407EFB                 mov     ebx, [esp+14h]
.text:00407EFF                 mov     [esp+60h], eax
.text:00407F03                 mov     ebp, [esp+18h]
.text:00407F07                 mov     eax, [esp+10h]
.text:00407F0B                 mov     [esp+40h], esi
.text:00407F0F                 mov     edi, [esp+1Ch]
.text:00407F13                 mov     esi, [esp+20h]
.text:00407F17                 mov     [esp+44h], ebx
.text:00407F1B                 mov     ecx, [esp+28h]
.text:00407F1F                 mov     edx, [esp+2Ch]
.text:00407F23                 mov     [esp+70h], eax
.text:00407F27                 mov     ebx, [esp+24h]
.text:00407F2B                 mov     eax, [esp+14h]
.text:00407F2F                 mov     [esp+48h], ebp
.text:00407F33                 mov     [esp+4Ch], edi
.text:00407F37                 mov     [esp+50h], esi
.text:00407F3B                 mov     [esp+54h], ebx
.text:00407F3F                 mov     [esp+58h], ecx
.text:00407F43                 mov     [esp+5Ch], edx
.text:00407F47                 mov     [esp+74h], eax
.text:00407F4B                 mov     [esp+78h], ebp
.text:00407F4F                 mov     [esp+7Ch], edi
.text:00407F53                 mov     [esp+80h], esi
.text:00407F5A                 mov     [esp+84h], ebx
.text:00407F61                 mov     [esp+8Ch], edx
.text:00407F68                 lea     edx, [esp+70h]
.text:00407F6C                 mov     [esp+88h], ecx
.text:00407F73                 mov     ecx, [esp+30h]
.text:00407F77                 mov     [esp+0Ch], edx
.text:00407F7B                 mov     edx, [esp+0C4h]
.text:00407F82                 mov     [esp+90h], ecx
.text:00407F89                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407F91                 mov     [esp+4], edx
.text:00407F95                 mov     dword ptr [esp], 0
.text:00407F9C                 call    sub_408110
.text:00407FA1                 add     esp, 0ACh
.text:00407FA7                 pop     ebx
.text:00407FA8                 pop     esi
.text:00407FA9                 pop     edi
.text:00407FAA                 pop     ebp
.text:00407FAB                 retn
.text:00407FAB ; ---------------------------------------------------------------------------
.text:00407FAC                 align 10h
.text:00407FB0                 push    edi
.text:00407FB1                 push    esi
.text:00407FB2                 push    ebx
.text:00407FB3                 sub     esp, 40h
.text:00407FB6                 mov     edx, ds:dword_40B21C
.text:00407FBC                 mov     ebx, ds:dword_40B210
.text:00407FC2                 mov     esi, ds:dword_40B218
.text:00407FC8                 mov     edi, ds:dword_40B214
.text:00407FCE                 mov     [esp+1Ch], edx
.text:00407FD2                 mov     ecx, ds:dword_40B220
.text:00407FD8                 mov     edx, ds:dword_40B230
.text:00407FDE                 mov     [esp+10h], ebx
.text:00407FE2                 mov     ebx, ds:dword_40B224
.text:00407FE8                 mov     [esp+30h], edx
.text:00407FEC                 movzx   edx, byte ptr [esp+54h]
.text:00407FF1                 mov     [esp+18h], esi
.text:00407FF5                 mov     esi, ds:dword_40B22C
.text:00407FFB                 mov     [esp+14h], edi
.text:00407FFF                 mov     edi, ds:dword_40B228
.text:00408005                 mov     [esp+20h], ecx
.text:00408009                 mov     cl, dl
.text:0040800B                 shr     cl, 5
.text:0040800E                 mov     [esp+24h], ebx
.text:00408012                 movzx   ebx, cl
.text:00408015                 mov     [esp+2Ch], esi
.text:00408019                 lea     esi, [esp+10h]
.text:0040801D                 mov     [esp+28h], edi
.text:00408021                 lea     edi, [esi+ebx*4]
.text:00408024                 mov     ebx, edx
.text:00408026                 mov     edx, [edi+4]
.text:00408029                 and     ebx, 1Fh
.text:0040802C                 mov     cl, bl
.text:0040802E                 mov     eax, edx
.text:00408030                 shr     eax, cl
.text:00408032                 and     eax, 1
.text:00408035                 xor     eax, 1
.text:00408038                 shl     eax, cl
.text:0040803A                 xor     edx, eax
.text:0040803C                 mov     [edi+4], edx
.text:0040803F                 mov     edx, [esp+50h]
.text:00408043                 mov     [esp+0Ch], esi
.text:00408047                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040804F                 mov     [esp+4], edx
.text:00408053                 mov     dword ptr [esp], 0
.text:0040805A                 call    sub_408110
.text:0040805F                 add     esp, 40h
.text:00408062                 pop     ebx
.text:00408063                 pop     esi
.text:00408064                 pop     edi
.text:00408065                 retn
.text:00408065 ; ---------------------------------------------------------------------------
.text:00408066                 align 10h
.text:00408070
.text:00408070 ; =============== S U B R O U T I N E =======================================
.text:00408070
.text:00408070
.text:00408070 ; int __cdecl sub_408070(char *)
.text:00408070 sub_408070      proc near               ; CODE XREF: sub_4058F0+64↑p
.text:00408070
.text:00408070 var_4C          = dword ptr -4Ch
.text:00408070 var_48          = dword ptr -48h
.text:00408070 var_44          = dword ptr -44h
.text:00408070 var_40          = dword ptr -40h
.text:00408070 var_3C          = dword ptr -3Ch
.text:00408070 var_38          = dword ptr -38h
.text:00408070 var_34          = dword ptr -34h
.text:00408070 var_30          = dword ptr -30h
.text:00408070 var_2C          = dword ptr -2Ch
.text:00408070 var_28          = dword ptr -28h
.text:00408070 var_24          = dword ptr -24h
.text:00408070 var_20          = dword ptr -20h
.text:00408070 var_1C          = dword ptr -1Ch
.text:00408070 arg_0           = dword ptr  4
.text:00408070
.text:00408070                 sub     esp, 4Ch
.text:00408073                 mov     ecx, ds:dword_40B210
.text:00408079                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408081                 mov     edx, ds:dword_40B214
.text:00408087                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040808E                 mov     [esp+4Ch+var_3C], ecx
.text:00408092                 mov     ecx, ds:dword_40B21C
.text:00408098                 mov     [esp+4Ch+var_38], edx
.text:0040809C                 mov     edx, ds:dword_40B218
.text:004080A2                 mov     [esp+4Ch+var_30], ecx
.text:004080A6                 mov     ecx, ds:dword_40B220
.text:004080AC                 mov     eax, edx
.text:004080AE                 shr     eax, 1Ah
.text:004080B1                 and     eax, 1
.text:004080B4                 xor     eax, 1
.text:004080B7                 mov     [esp+4Ch+var_2C], ecx
.text:004080BB                 shl     eax, 1Ah
.text:004080BE                 mov     ecx, ds:dword_40B224
.text:004080C4                 xor     edx, eax
.text:004080C6                 mov     [esp+4Ch+var_34], edx
.text:004080CA                 mov     edx, [esp+4Ch+arg_0]
.text:004080CE                 mov     [esp+4Ch+var_28], ecx
.text:004080D2                 mov     ecx, ds:dword_40B228
.text:004080D8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004080DC                 mov     [esp+4Ch+var_24], ecx
.text:004080E0                 mov     ecx, ds:dword_40B22C
.text:004080E6                 mov     [esp+4Ch+var_20], ecx
.text:004080EA                 mov     ecx, ds:dword_40B230
.text:004080F0                 mov     [esp+4Ch+var_1C], ecx
.text:004080F4                 lea     ecx, [esp+4Ch+var_3C]
.text:004080F8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004080FC                 call    sub_408110
.text:00408101                 add     esp, 4Ch
.text:00408104                 retn
.text:00408104 sub_408070      endp
.text:00408104
.text:00408104 ; ---------------------------------------------------------------------------
.text:00408105                 align 10h
.text:00408110
.text:00408110 ; =============== S U B R O U T I N E =======================================
.text:00408110
.text:00408110
.text:00408110 ; int __cdecl sub_408110(int, char *, int, int)
.text:00408110 sub_408110      proc near               ; CODE XREF: .text:00407CC2↑p
.text:00408110                                         ; .text:00407CF2↑p ...
.text:00408110
.text:00408110 Block           = dword ptr -2Ch
.text:00408110 var_28          = dword ptr -28h
.text:00408110 Str             = dword ptr -24h
.text:00408110 var_20          = dword ptr -20h
.text:00408110 var_1C          = dword ptr -1Ch
.text:00408110 var_18          = dword ptr -18h
.text:00408110 var_14          = dword ptr -14h
.text:00408110 arg_0           = dword ptr  4
.text:00408110 arg_4           = dword ptr  8
.text:00408110 arg_8           = dword ptr  0Ch
.text:00408110 arg_C           = dword ptr  10h
.text:00408110
.text:00408110                 push    ebp
.text:00408111                 push    edi
.text:00408112                 push    esi
.text:00408113                 push    ebx
.text:00408114                 sub     esp, 1Ch
.text:00408117                 call    _errno
.text:0040811C                 mov     edx, [eax]
.text:0040811E                 mov     eax, [esp+2Ch+arg_0]
.text:00408122                 mov     [esp+2Ch+var_14], edx
.text:00408126                 test    eax, eax
.text:00408128                 js      loc_4082CA
.text:0040812E                 mov     eax, [esp+2Ch+arg_0]
.text:00408132                 cmp     dword_40A050, eax
.text:00408138                 ja      short loc_4081B0
.text:0040813A                 mov     esi, eax
.text:0040813C                 inc     esi
.text:0040813D                 cmp     esi, 1FFFFFFFh
.text:00408143                 ja      loc_4082CF
.text:00408149                 mov     ebx, off_40A05C
.text:0040814F                 cmp     ebx, offset dword_40A054
.text:00408155                 jz      loc_4082A1
.text:0040815B
.text:0040815B loc_40815B:                             ; CODE XREF: sub_408110+1B5↓j
.text:0040815B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040815E                 lea     ecx, ds:0[esi*8]
.text:00408165                 mov     ebp, esi
.text:00408167                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040816B                 call    sub_4068F0
.text:00408170                 mov     off_40A05C, eax
.text:00408175                 mov     ebx, dword_40A050
.text:0040817B                 sub     ebp, ebx
.text:0040817D                 lea     edi, [eax+ebx*8]
.text:00408180                 lea     eax, ds:0[ebp*8]
.text:00408187                 cmp     eax, 7
.text:0040818A                 jbe     short loc_4081A0
.text:0040818C                 test    edi, 4
.text:00408192                 jz      short loc_4081A0
.text:00408194                 mov     dword ptr [edi], 0
.text:0040819A                 sub     eax, 4
.text:0040819D                 add     edi, 4
.text:004081A0
.text:004081A0 loc_4081A0:                             ; CODE XREF: sub_408110+7A↑j
.text:004081A0                                         ; sub_408110+82↑j
.text:004081A0                 cld
.text:004081A1                 mov     ecx, eax
.text:004081A3                 shr     ecx, 2
.text:004081A6                 xor     eax, eax
.text:004081A8                 rep stosd
.text:004081AA                 mov     dword_40A050, esi
.text:004081B0
.text:004081B0 loc_4081B0:                             ; CODE XREF: sub_408110+28↑j
.text:004081B0                 mov     esi, off_40A05C
.text:004081B6                 mov     eax, [esp+2Ch+arg_0]
.text:004081BA                 mov     ebp, [esi+eax*8]
.text:004081BD                 mov     edi, [esi+eax*8+4]
.text:004081C1                 mov     esi, [esp+2Ch+arg_C]
.text:004081C5                 test    esi, esi
.text:004081C7                 jz      loc_408297
.text:004081CD
.text:004081CD loc_4081CD:                             ; CODE XREF: sub_408110+18C↓j
.text:004081CD                 call    _errno
.text:004081D2                 mov     ebx, [eax]
.text:004081D4                 mov     [esp+2Ch+var_18], esi ; int
.text:004081D8                 mov     ecx, [esi]
.text:004081DA                 mov     [esp+2Ch+Block], edi ; int
.text:004081DD                 mov     edx, [esp+2Ch+arg_8]
.text:004081E1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004081E5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004081E9                 mov     ecx, [esp+2Ch+arg_4]
.text:004081ED                 mov     [esp+2Ch+var_20], edx ; int
.text:004081F1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004081F5                 call    sub_406FD0
.text:004081FA                 mov     esi, eax
.text:004081FC                 call    _errno
.text:00408201                 mov     [eax], ebx
.text:00408203                 cmp     ebp, esi
.text:00408205                 ja      short loc_40827B
.text:00408207                 lea     ebp, [esi+1]
.text:0040820A                 mov     ebx, off_40A05C
.text:00408210                 cmp     edi, offset unk_40B110
.text:00408216                 mov     esi, [esp+2Ch+arg_0]
.text:0040821A                 mov     [ebx+esi*8], ebp
.text:0040821D                 jz      short loc_40822D
.text:0040821F                 mov     [esp+2Ch+Block], edi ; Block
.text:00408222                 call    free
.text:00408227                 mov     ebx, off_40A05C
.text:0040822D
.text:0040822D loc_40822D:                             ; CODE XREF: sub_408110+10D↑j
.text:0040822D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408230                 call    sub_406860
.text:00408235                 mov     esi, [esp+2Ch+arg_C]
.text:00408239                 mov     edi, eax
.text:0040823B                 mov     eax, [esp+2Ch+arg_0]
.text:0040823F                 test    esi, esi
.text:00408241                 mov     [ebx+eax*8+4], edi
.text:00408245                 jz      short loc_408290
.text:00408247
.text:00408247 loc_408247:                             ; CODE XREF: sub_408110+185↓j
.text:00408247                 call    _errno
.text:0040824C                 mov     ebx, [eax]
.text:0040824E                 mov     [esp+2Ch+var_18], esi ; int
.text:00408252                 mov     ecx, [esi]
.text:00408254                 mov     [esp+2Ch+Block], edi ; int
.text:00408257                 mov     edx, [esp+2Ch+arg_8]
.text:0040825B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040825F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408263                 mov     ecx, [esp+2Ch+arg_4]
.text:00408267                 mov     [esp+2Ch+var_20], edx ; int
.text:0040826B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040826F                 call    sub_406FD0
.text:00408274                 call    _errno
.text:00408279                 mov     [eax], ebx
.text:0040827B
.text:0040827B loc_40827B:                             ; CODE XREF: sub_408110+F5↑j
.text:0040827B                 call    _errno
.text:00408280                 mov     ebp, [esp+2Ch+var_14]
.text:00408284                 mov     [eax], ebp
.text:00408286                 add     esp, 1Ch
.text:00408289                 mov     eax, edi
.text:0040828B                 pop     ebx
.text:0040828C                 pop     esi
.text:0040828D                 pop     edi
.text:0040828E                 pop     ebp
.text:0040828F                 retn
.text:00408290 ; ---------------------------------------------------------------------------
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: sub_408110+135↑j
.text:00408290                 mov     esi, offset dword_40B210
.text:00408295                 jmp     short loc_408247
.text:00408297 ; ---------------------------------------------------------------------------
.text:00408297
.text:00408297 loc_408297:                             ; CODE XREF: sub_408110+B7↑j
.text:00408297                 mov     esi, offset dword_40B210
.text:0040829C                 jmp     loc_4081CD
.text:004082A1 ; ---------------------------------------------------------------------------
.text:004082A1
.text:004082A1 loc_4082A1:                             ; CODE XREF: sub_408110+45↑j
.text:004082A1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004082A8                 call    sub_406860
.text:004082AD                 mov     off_40A05C, eax
.text:004082B2                 mov     edi, dword_40A054
.text:004082B8                 mov     ebx, eax
.text:004082BA                 mov     ecx, off_40A058
.text:004082C0                 mov     [eax], edi
.text:004082C2                 mov     [eax+4], ecx
.text:004082C5                 jmp     loc_40815B
.text:004082CA ; ---------------------------------------------------------------------------
.text:004082CA
.text:004082CA loc_4082CA:                             ; CODE XREF: sub_408110+18↑j
.text:004082CA                 call    abort
.text:004082CF ; ---------------------------------------------------------------------------
.text:004082CF
.text:004082CF loc_4082CF:                             ; CODE XREF: sub_408110+33↑j
.text:004082CF                 call    sub_408300
.text:004082CF sub_408110      endp
.text:004082CF
.text:004082CF ; ---------------------------------------------------------------------------
.text:004082D4                 align 10h
.text:004082E0
.text:004082E0 loc_4082E0:                             ; DATA XREF: sub_408300+3↓o
.text:004082E0                 insd
.text:004082E1                 db      65h
.text:004082E1                 insd
.text:004082E3                 outsd
.text:004082E4                 jb      short loc_40835F
.text:004082E6                 and     [ebp+78h], ah
.text:004082E9                 push    74737561h
.text:004082EE
.text:004082EE loc_4082EE:                             ; DATA XREF: sub_408300+10↓o
.text:004082EE                 db      65h
.text:004082EE                 add     fs:0B68D0073h, ah
.text:004082EE ; ---------------------------------------------------------------------------
.text:004082F6                 dw 0
.text:004082F8                 align 10h
.text:00408300
.text:00408300 ; =============== S U B R O U T I N E =======================================
.text:00408300
.text:00408300 ; Attributes: noreturn
.text:00408300
.text:00408300 sub_408300      proc near               ; CODE XREF: .text:loc_406859↑p
.text:00408300                                         ; sub_406860+24↑p ...
.text:00408300
.text:00408300 Code            = dword ptr -1Ch
.text:00408300 ErrorMessage    = dword ptr -18h
.text:00408300 var_14          = dword ptr -14h
.text:00408300 var_10          = byte ptr -10h
.text:00408300
.text:00408300                 sub     esp, 1Ch
.text:00408303                 mov     [esp+1Ch+Code], offset loc_4082E0
.text:0040830A                 call    ds:libintl_gettext
.text:00408310                 mov     [esp+1Ch+var_14], (offset loc_4082EE+3) ; char *
.text:00408318                 mov     edx, Code
.text:0040831E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408326                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040832A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040832D                 call    sub_408460
.text:00408332                 call    abort
.text:00408332 sub_408300      endp
.text:00408332
.text:00408332 ; ---------------------------------------------------------------------------
.text:00408337                 align 10h
.text:00408340
.text:00408340 ; =============== S U B R O U T I N E =======================================
.text:00408340
.text:00408340
.text:00408340 ; int __cdecl sub_408340(char *Str, int, int, int)
.text:00408340 sub_408340      proc near               ; CODE XREF: sub_406B80+32↑p
.text:00408340
.text:00408340 String1         = dword ptr -2Ch
.text:00408340 String2         = dword ptr -28h
.text:00408340 var_16          = byte ptr -16h
.text:00408340 var_15          = byte ptr -15h
.text:00408340 var_14          = dword ptr -14h
.text:00408340 Str             = dword ptr  4
.text:00408340 arg_4           = dword ptr  8
.text:00408340 arg_8           = dword ptr  0Ch
.text:00408340 arg_C           = dword ptr  10h
.text:00408340
.text:00408340                 push    ebp
.text:00408341                 push    edi
.text:00408342                 push    esi
.text:00408343                 push    ebx
.text:00408344                 sub     esp, 1Ch
.text:00408347                 mov     ecx, [esp+2Ch+arg_4]
.text:0040834B                 mov     edi, [esp+2Ch+Str]
.text:0040834F                 mov     ebp, [esp+2Ch+arg_C]
.text:00408353                 mov     esi, [esp+2Ch+arg_8]
.text:00408357                 movzx   edx, byte ptr [ecx+edi]
.text:0040835B                 mov     [esp+2Ch+var_15], dl
.text:0040835F
.text:0040835F loc_40835F:                             ; CODE XREF: .text:004082E4↑j
.text:0040835F                 mov     edx, [esp+2Ch+arg_4]
.text:00408363                 movzx   eax, byte ptr [ebp+esi+0]
.text:00408368                 mov     [esp+2Ch+var_16], al
.text:0040836C                 mov     byte ptr [edx+edi], 0
.text:00408370                 inc     edx
.text:00408371                 mov     [esp+2Ch+arg_4], edx
.text:00408375                 mov     byte ptr [ebp+esi+0], 0
.text:0040837A                 inc     ebp
.text:0040837B                 nop
.text:0040837C                 lea     esi, [esi+0]
.text:00408380
.text:00408380 loc_408380:                             ; CODE XREF: sub_408340+94↓j
.text:00408380                 call    _errno
.text:00408385                 mov     dword ptr [eax], 0
.text:0040838B                 mov     [esp+2Ch+String2], esi ; String2
.text:0040838F                 mov     [esp+2Ch+String1], edi ; String1
.text:00408392                 call    strcoll
.text:00408397                 mov     [esp+2Ch+var_14], eax
.text:0040839B                 test    eax, eax
.text:0040839D                 jnz     short loc_4083D6
.text:0040839F                 call    _errno
.text:004083A4                 mov     ebx, [eax]
.text:004083A6                 test    ebx, ebx
.text:004083A8                 jnz     short loc_4083D6
.text:004083AA                 mov     [esp+2Ch+String1], edi ; Str
.text:004083AD                 call    strlen
.text:004083B2                 mov     [esp+2Ch+String1], esi ; Str
.text:004083B5                 lea     ebx, [eax+1]
.text:004083B8                 add     edi, ebx
.text:004083BA                 call    strlen
.text:004083BF                 inc     eax
.text:004083C0                 add     esi, eax
.text:004083C2                 sub     ebp, eax
.text:004083C4                 sub     [esp+2Ch+arg_4], ebx
.text:004083C8                 jz      short loc_4083F8
.text:004083CA                 mov     [esp+2Ch+var_14], 1
.text:004083D2                 test    ebp, ebp
.text:004083D4                 jnz     short loc_408380
.text:004083D6
.text:004083D6 loc_4083D6:                             ; CODE XREF: sub_408340+5D↑j
.text:004083D6                                         ; sub_408340+68↑j ...
.text:004083D6                 movzx   ebx, [esp+2Ch+var_15]
.text:004083DB                 mov     ecx, [esp+2Ch+arg_4]
.text:004083DF                 mov     [ecx+edi-1], bl
.text:004083E3                 movzx   eax, [esp+2Ch+var_16]
.text:004083E8                 mov     [ebp+esi-1], al
.text:004083EC                 mov     eax, [esp+2Ch+var_14]
.text:004083F0                 add     esp, 1Ch
.text:004083F3                 pop     ebx
.text:004083F4                 pop     esi
.text:004083F5                 pop     edi
.text:004083F6                 pop     ebp
.text:004083F7                 retn
.text:004083F8 ; ---------------------------------------------------------------------------
.text:004083F8
.text:004083F8 loc_4083F8:                             ; CODE XREF: sub_408340+88↑j
.text:004083F8                 test    ebp, ebp
.text:004083FA                 jz      short loc_4083D6
.text:004083FC                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:00408404                 jmp     short loc_4083D6
.text:00408404 sub_408340      endp
.text:00408404
.text:00408404 ; ---------------------------------------------------------------------------
.text:00408406                 align 10h
.text:00408410                 jmp     ds:libintl_bindtextdomain
.text:00408410 ; ---------------------------------------------------------------------------
.text:00408416                 align 10h
.text:00408420                 jmp     ds:libintl_textdomain
.text:00408420 ; ---------------------------------------------------------------------------
.text:00408426                 align 10h
.text:00408430                 jmp     ds:libintl_gettext
.text:00408430 ; ---------------------------------------------------------------------------
.text:00408436                 align 10h
.text:00408440 ; const char aS_0[]
.text:00408440 aS_0            db ': %s',0             ; DATA XREF: sub_408460+B8↓o
.text:00408440                                         ; sub_408564+122↓o
.text:00408445 aUnknownSystemE db 'Unknown system error',0
.text:00408445                                         ; DATA XREF: sub_408460:loc_40852D↓o
.text:00408445                                         ; sub_408564:loc_40869E↓o
.text:0040845A ; const char aS_1[]
.text:0040845A aS_1            db '%s: ',0             ; DATA XREF: sub_408460:loc_408534↓o
.text:0040845F                 align 10h
.text:00408460
.text:00408460 ; =============== S U B R O U T I N E =======================================
.text:00408460
.text:00408460
.text:00408460 ; int __cdecl sub_408460(int Code, int ErrorMessage, char *, char)
.text:00408460 sub_408460      proc near               ; CODE XREF: sub_401C00+19D↑p
.text:00408460                                         ; sub_401C00+1E5↑p ...
.text:00408460
.text:00408460 Stream          = dword ptr -1Ch
.text:00408460 Format          = dword ptr -18h
.text:00408460 ArgList         = dword ptr -14h
.text:00408460 Code            = dword ptr  4
.text:00408460 ErrorMessage    = dword ptr  8
.text:00408460 arg_8           = dword ptr  0Ch
.text:00408460 arg_C           = byte ptr  10h
.text:00408460
.text:00408460                 push    esi
.text:00408461                 push    ebx
.text:00408462                 sub     esp, 14h
.text:00408465                 mov     edx, ds:_iob
.text:0040846B                 mov     esi, [esp+1Ch+Code]
.text:0040846F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00408473                 add     edx, 20h ; ' '
.text:00408476                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408479                 call    fflush
.text:0040847E                 mov     eax, ds:dword_40B290
.text:00408483                 test    eax, eax
.text:00408485                 jz      loc_408534
.text:0040848B                 call    eax ; dword_40B290
.text:0040848D
.text:0040848D loc_40848D:                             ; CODE XREF: sub_408460+F7↓j
.text:0040848D                 lea     edx, [esp+1Ch+arg_C]
.text:00408491                 mov     ecx, [esp+1Ch+arg_8]
.text:00408495                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00408499                 mov     edx, ds:_iob
.text:0040849F                 mov     [esp+1Ch+Format], ecx ; Format
.text:004084A3                 add     edx, 40h ; '@'
.text:004084A6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004084A9                 call    vfprintf
.text:004084AE                 inc     ds:dword_40B2A0
.text:004084B4                 test    ebx, ebx
.text:004084B6                 jnz     short loc_408502
.text:004084B8
.text:004084B8 loc_4084B8:                             ; CODE XREF: sub_408460+CB↓j
.text:004084B8                 mov     edx, ds:_iob
.text:004084BE                 lea     ecx, [edx+40h]
.text:004084C1                 mov     ebx, [ecx+4]
.text:004084C4                 dec     ebx
.text:004084C5                 test    ebx, ebx
.text:004084C7                 mov     [ecx+4], ebx
.text:004084CA                 js      short loc_4084F0
.text:004084CC                 mov     ecx, [edx+40h]
.text:004084CF                 mov     byte ptr [ecx], 0Ah
.text:004084D2                 inc     dword ptr [edx+40h]
.text:004084D5
.text:004084D5 loc_4084D5:                             ; CODE XREF: sub_408460+A0↓j
.text:004084D5                 mov     edx, ds:_iob
.text:004084DB                 add     edx, 40h ; '@'
.text:004084DE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004084E1                 call    fflush
.text:004084E6                 test    esi, esi
.text:004084E8                 jnz     short loc_40855C
.text:004084EA                 add     esp, 14h
.text:004084ED                 pop     ebx
.text:004084EE                 pop     esi
.text:004084EF                 retn
.text:004084F0 ; ---------------------------------------------------------------------------
.text:004084F0
.text:004084F0 loc_4084F0:                             ; CODE XREF: sub_408460+6A↑j
.text:004084F0                 mov     [esp+1Ch+Format], ecx ; File
.text:004084F4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004084FB                 call    _flsbuf
.text:00408500                 jmp     short loc_4084D5
.text:00408502 ; ---------------------------------------------------------------------------
.text:00408502
.text:00408502 loc_408502:                             ; CODE XREF: sub_408460+56↑j
.text:00408502                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00408505                 call    strerror
.text:0040850A                 test    eax, eax
.text:0040850C                 jz      short loc_40852D
.text:0040850E
.text:0040850E loc_40850E:                             ; CODE XREF: sub_408460+D2↓j
.text:0040850E                 mov     [esp+1Ch+ArgList], eax
.text:00408512                 mov     ebx, ds:_iob
.text:00408518                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00408520                 add     ebx, 40h ; '@'
.text:00408523                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00408526                 call    fprintf
.text:0040852B                 jmp     short loc_4084B8
.text:0040852D ; ---------------------------------------------------------------------------
.text:0040852D
.text:0040852D loc_40852D:                             ; CODE XREF: sub_408460+AC↑j
.text:0040852D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00408532                 jmp     short loc_40850E
.text:00408534 ; ---------------------------------------------------------------------------
.text:00408534
.text:00408534 loc_408534:                             ; CODE XREF: sub_408460+25↑j
.text:00408534                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040853C                 mov     edx, ds:_iob
.text:00408542                 mov     ecx, ds:dword_40B260
.text:00408548                 add     edx, 40h ; '@'
.text:0040854B                 mov     [esp+1Ch+ArgList], ecx
.text:0040854F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408552                 call    fprintf
.text:00408557                 jmp     loc_40848D
.text:0040855C ; ---------------------------------------------------------------------------
.text:0040855C
.text:0040855C loc_40855C:                             ; CODE XREF: sub_408460+88↑j
.text:0040855C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040855F                 call    exit
.text:0040855F sub_408460      endp
.text:0040855F
.text:00408564
.text:00408564 ; =============== S U B R O U T I N E =======================================
.text:00408564
.text:00408564
.text:00408564 ; int __cdecl sub_408564(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00408564 sub_408564      proc near               ; DATA XREF: sub_408564+77↓o
.text:00408564
.text:00408564 Stream          = dword ptr -28h
.text:00408564 Format          = dword ptr -24h
.text:00408564 ArgList         = dword ptr -20h
.text:00408564 var_1C          = dword ptr -1Ch
.text:00408564 Code            = dword ptr  8
.text:00408564 ErrorMessage    = dword ptr  0Ch
.text:00408564 Str2            = dword ptr  10h
.text:00408564 arg_10          = dword ptr  14h
.text:00408564 arg_14          = dword ptr  18h
.text:00408564 arg_18          = byte ptr  1Ch
.text:00408564
.text:00408564                 and     eax, 64253A73h
.text:00408569                 cmp     ah, [eax]
.text:0040856B
.text:0040856B loc_40856B:                             ; DATA XREF: sub_408564:loc_4086A5↓o
.text:0040856B                 add     ds:55003A73h, ah
.text:00408571                 push    edi
.text:00408572                 push    esi
.text:00408573                 push    ebx
.text:00408574                 sub     esp, 1Ch
.text:00408577                 mov     edx, ds:dword_40B2D0
.text:0040857D                 mov     ebp, [esp+28h+Code]
.text:00408581                 mov     edi, [esp+28h+ErrorMessage]
.text:00408585                 test    edx, edx
.text:00408587                 mov     ebx, [esp+28h+Str2]
.text:0040858B                 mov     esi, [esp+28h+arg_10]
.text:0040858F                 jz      short loc_4085A9
.text:00408591                 cmp     ds:dword_40B250, esi
.text:00408597                 jz      loc_4086D0
.text:0040859D
.text:0040859D loc_40859D:                             ; CODE XREF: sub_408564+18D↓j
.text:0040859D                 mov     ds:Str1, ebx
.text:004085A3                 mov     ds:dword_40B250, esi
.text:004085A9
.text:004085A9 loc_4085A9:                             ; CODE XREF: sub_408564+2B↑j
.text:004085A9                 mov     edx, ds:_iob
.text:004085AF                 add     edx, 20h ; ' '
.text:004085B2                 mov     [esp+28h+Stream], edx ; Stream
.text:004085B5                 call    fflush
.text:004085BA                 mov     eax, ds:dword_40B290
.text:004085BF                 test    eax, eax
.text:004085C1                 jz      loc_4086A5
.text:004085C7                 call    eax ; dword_40B290
.text:004085C9
.text:004085C9 loc_4085C9:                             ; CODE XREF: sub_408564+164↓j
.text:004085C9                 test    ebx, ebx
.text:004085CB                 jz      short loc_4085EE
.text:004085CD                 mov     [esp+28h+ArgList], ebx
.text:004085D1                 mov     ebx, ds:_iob
.text:004085D7                 mov     [esp+28h+var_1C], esi
.text:004085DB                 mov     [esp+28h+Format], offset sub_408564 ; Format
.text:004085E3                 add     ebx, 40h ; '@'
.text:004085E6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004085E9                 call    fprintf
.text:004085EE
.text:004085EE loc_4085EE:                             ; CODE XREF: sub_408564+67↑j
.text:004085EE                 mov     esi, ds:_iob
.text:004085F4                 lea     edx, [esp+28h+arg_18]
.text:004085F8                 mov     ecx, [esp+28h+arg_14]
.text:004085FC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00408600                 add     esi, 40h ; '@'
.text:00408603                 mov     [esp+28h+Format], ecx ; Format
.text:00408607                 mov     [esp+28h+Stream], esi ; Stream
.text:0040860A                 call    vfprintf
.text:0040860F                 inc     ds:dword_40B2A0
.text:00408615                 test    edi, edi
.text:00408617                 jnz     short loc_408670
.text:00408619
.text:00408619 loc_408619:                             ; CODE XREF: sub_408564+135↓j
.text:00408619                 mov     edx, ds:_iob
.text:0040861F                 lea     ecx, [edx+40h]
.text:00408622                 mov     ebx, [ecx+4]
.text:00408625                 dec     ebx
.text:00408626                 test    ebx, ebx
.text:00408628                 mov     [ecx+4], ebx
.text:0040862B                 js      short loc_408657
.text:0040862D                 mov     esi, [edx+40h]
.text:00408630                 mov     byte ptr [esi], 0Ah
.text:00408633                 inc     dword ptr [edx+40h]
.text:00408636
.text:00408636 loc_408636:                             ; CODE XREF: sub_408564+103↓j
.text:00408636                 mov     ecx, ds:_iob
.text:0040863C                 add     ecx, 40h ; '@'
.text:0040863F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00408642                 call    fflush
.text:00408647                 test    ebp, ebp
.text:00408649                 jnz     loc_4086F6
.text:0040864F
.text:0040864F loc_40864F:                             ; CODE XREF: sub_408564+173↓j
.text:0040864F                                         ; sub_408564+187↓j
.text:0040864F                 add     esp, 1Ch
.text:00408652                 pop     ebx
.text:00408653                 pop     esi
.text:00408654                 pop     edi
.text:00408655                 pop     ebp
.text:00408656                 retn
.text:00408657 ; ---------------------------------------------------------------------------
.text:00408657
.text:00408657 loc_408657:                             ; CODE XREF: sub_408564+C7↑j
.text:00408657                 mov     [esp+28h+Format], ecx ; File
.text:0040865B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00408662                 call    _flsbuf
.text:00408667                 jmp     short loc_408636
.text:00408667 ; ---------------------------------------------------------------------------
.text:00408669                 align 10h
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_408564+B3↑j
.text:00408670                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00408673                 call    strerror
.text:00408678                 test    eax, eax
.text:0040867A                 jz      short loc_40869E
.text:0040867C
.text:0040867C loc_40867C:                             ; CODE XREF: sub_408564+13F↓j
.text:0040867C                 mov     [esp+28h+ArgList], eax
.text:00408680                 mov     edi, ds:_iob
.text:00408686                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040868E                 add     edi, 40h ; '@'
.text:00408691                 mov     [esp+28h+Stream], edi ; Stream
.text:00408694                 call    fprintf
.text:00408699                 jmp     loc_408619
.text:0040869E ; ---------------------------------------------------------------------------
.text:0040869E
.text:0040869E loc_40869E:                             ; CODE XREF: sub_408564+116↑j
.text:0040869E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004086A3                 jmp     short loc_40867C
.text:004086A5 ; ---------------------------------------------------------------------------
.text:004086A5
.text:004086A5 loc_4086A5:                             ; CODE XREF: sub_408564+5D↑j
.text:004086A5                 mov     [esp+28h+Format], (offset loc_40856B+1) ; Format
.text:004086AD                 mov     ecx, ds:_iob
.text:004086B3                 mov     edx, ds:dword_40B260
.text:004086B9                 add     ecx, 40h ; '@'
.text:004086BC                 mov     [esp+28h+ArgList], edx
.text:004086C0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004086C3                 call    fprintf
.text:004086C8                 jmp     loc_4085C9
.text:004086C8 ; ---------------------------------------------------------------------------
.text:004086CD                 align 10h
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_408564+33↑j
.text:004086D0                 mov     eax, ds:Str1
.text:004086D5                 cmp     ebx, eax
.text:004086D7                 jz      loc_40864F
.text:004086DD                 mov     [esp+28h+Format], ebx ; Str2
.text:004086E1                 mov     [esp+28h+Stream], eax ; Str1
.text:004086E4                 call    strcmp
.text:004086E9                 test    eax, eax
.text:004086EB                 jz      loc_40864F
.text:004086F1                 jmp     loc_40859D
.text:004086F6 ; ---------------------------------------------------------------------------
.text:004086F6
.text:004086F6 loc_4086F6:                             ; CODE XREF: sub_408564+E5↑j
.text:004086F6                 mov     [esp+28h+Stream], ebp ; Code
.text:004086F9                 call    exit
.text:004086F9 sub_408564      endp ; sp-analysis failed
.text:004086F9
.text:004086F9 ; ---------------------------------------------------------------------------
.text:004086FE                 align 10h
.text:00408700
.text:00408700 ; =============== S U B R O U T I N E =======================================
.text:00408700
.text:00408700 ; Attributes: thunk
.text:00408700
.text:00408700 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00408700 mbrtowc         proc near               ; CODE XREF: sub_406FD0+757↑p
.text:00408700                 jmp     ds:__imp_mbrtowc
.text:00408700 mbrtowc         endp
.text:00408700
.text:00408700 ; ---------------------------------------------------------------------------
.text:00408706                 align 10h
.text:00408710
.text:00408710 ; =============== S U B R O U T I N E =======================================
.text:00408710
.text:00408710 ; Attributes: bp-based frame
.text:00408710
.text:00408710 sub_408710      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00408710                 push    ebp
.text:00408711                 mov     ecx, offset byte_40B000
.text:00408716                 cmp     ecx, offset byte_40B000
.text:0040871C                 mov     ebp, esp
.text:0040871E                 jnb     short loc_408736
.text:00408720
.text:00408720 loc_408720:                             ; CODE XREF: sub_408710+24↓j
.text:00408720                 mov     edx, [ecx+4]
.text:00408723                 mov     eax, [ecx]
.text:00408725                 add     ecx, 8
.text:00408728                 add     [edx+400000h], eax
.text:0040872E                 cmp     ecx, offset byte_40B000
.text:00408734                 jb      short loc_408720
.text:00408736
.text:00408736 loc_408736:                             ; CODE XREF: sub_408710+E↑j
.text:00408736                 pop     ebp
.text:00408737                 retn
.text:00408737 sub_408710      endp
.text:00408737
.text:00408737 ; ---------------------------------------------------------------------------
.text:00408738                 align 10h
.text:00408740
.text:00408740 ; =============== S U B R O U T I N E =======================================
.text:00408740
.text:00408740 ; Attributes: bp-based frame
.text:00408740
.text:00408740 sub_408740      proc near               ; CODE XREF: sub_401080+16↑p
.text:00408740                                         ; TopLevelExceptionFilter+D7↑p
.text:00408740                 push    ebp
.text:00408741                 mov     ebp, esp
.text:00408743                 fninit
.text:00408745                 pop     ebp
.text:00408746                 retn
.text:00408746 sub_408740      endp
.text:00408746
.text:00408746 ; ---------------------------------------------------------------------------
.text:00408747                 align 10h
.text:00408750
.text:00408750 ; =============== S U B R O U T I N E =======================================
.text:00408750
.text:00408750 ; Attributes: bp-based frame
.text:00408750
.text:00408750 ; void __cdecl sub_408750()
.text:00408750 sub_408750      proc near               ; DATA XREF: .text:loc_408799↓o
.text:00408750                                         ; sub_4087E0:loc_40880E↓o
.text:00408750                 push    ebp
.text:00408751                 mov     ebp, esp
.text:00408753                 sub     esp, 8
.text:00408756                 mov     eax, off_40A094
.text:0040875B                 mov     edx, [eax]
.text:0040875D                 test    edx, edx
.text:0040875F                 jnz     short loc_408765
.text:00408761
.text:00408761 loc_408761:                             ; CODE XREF: sub_408750+2C↓j
.text:00408761                 mov     esp, ebp
.text:00408763                 pop     ebp
.text:00408764                 retn
.text:00408765 ; ---------------------------------------------------------------------------
.text:00408765
.text:00408765 loc_408765:                             ; CODE XREF: sub_408750+F↑j
.text:00408765                                         ; sub_408750+2A↓j
.text:00408765                 call    dword ptr [eax]
.text:00408767                 mov     edx, off_40A094
.text:0040876D                 mov     ecx, [edx+4]
.text:00408770                 lea     eax, [edx+4]
.text:00408773                 mov     off_40A094, eax
.text:00408778                 test    ecx, ecx
.text:0040877A                 jnz     short loc_408765
.text:0040877C                 jmp     short loc_408761
.text:0040877C sub_408750      endp
.text:0040877C
.text:0040877C ; ---------------------------------------------------------------------------
.text:0040877E                 align 10h
.text:00408780                 push    ebp
.text:00408781                 mov     ebp, esp
.text:00408783                 sub     esp, 8
.text:00408786                 mov     [ebp-4], ebx
.text:00408789                 mov     eax, ds:dword_4090A0
.text:0040878E                 cmp     eax, 0FFFFFFFFh
.text:00408791                 jz      short loc_4087BC
.text:00408793
.text:00408793 loc_408793:                             ; CODE XREF: .text:004087C6↓j
.text:00408793                                         ; .text:004087D9↓j
.text:00408793                 test    eax, eax
.text:00408795                 mov     ebx, eax
.text:00408797                 jnz     short loc_4087B0
.text:00408799
.text:00408799 loc_408799:                             ; CODE XREF: .text:004087BA↓j
.text:00408799                 mov     dword ptr [esp], offset sub_408750
.text:004087A0                 call    sub_401040
.text:004087A5                 mov     ebx, [ebp-4]
.text:004087A8                 mov     esp, ebp
.text:004087AA                 pop     ebp
.text:004087AB                 retn
.text:004087AB ; ---------------------------------------------------------------------------
.text:004087AC                 align 10h
.text:004087B0
.text:004087B0 loc_4087B0:                             ; CODE XREF: .text:00408797↑j
.text:004087B0                                         ; .text:004087B8↓j
.text:004087B0                 call    ds:dword_4090A0[ebx*4]
.text:004087B7                 dec     ebx
.text:004087B8                 jnz     short loc_4087B0
.text:004087BA                 jmp     short loc_408799
.text:004087BC ; ---------------------------------------------------------------------------
.text:004087BC
.text:004087BC loc_4087BC:                             ; CODE XREF: .text:00408791↑j
.text:004087BC                 mov     ecx, ds:dword_4090A4
.text:004087C2                 xor     eax, eax
.text:004087C4                 test    ecx, ecx
.text:004087C6                 jz      short loc_408793
.text:004087C8                 mov     edx, offset dword_4090A0
.text:004087CD                 lea     esi, [esi+0]
.text:004087D0
.text:004087D0 loc_4087D0:                             ; CODE XREF: .text:004087D7↓j
.text:004087D0                 inc     eax
.text:004087D1                 mov     ecx, [edx+eax*4+4]
.text:004087D5                 test    ecx, ecx
.text:004087D7                 jnz     short loc_4087D0
.text:004087D9                 jmp     short loc_408793
.text:004087D9 ; ---------------------------------------------------------------------------
.text:004087DB                 align 10h
.text:004087E0
.text:004087E0 ; =============== S U B R O U T I N E =======================================
.text:004087E0
.text:004087E0 ; Attributes: bp-based frame
.text:004087E0
.text:004087E0 sub_4087E0      proc near               ; CODE XREF: sub_401C00+13↑p
.text:004087E0
.text:004087E0 var_8           = dword ptr -8
.text:004087E0 var_4           = dword ptr -4
.text:004087E0
.text:004087E0                 push    ebp
.text:004087E1                 mov     ebp, esp
.text:004087E3                 sub     esp, 8
.text:004087E6                 mov     [ebp+var_4], ebx
.text:004087E9                 mov     edx, dword_40A090
.text:004087EF                 test    edx, edx
.text:004087F1                 jnz     short loc_40881A
.text:004087F3                 mov     eax, ds:dword_4090A0
.text:004087F8                 mov     edx, 1
.text:004087FD                 mov     dword_40A090, edx
.text:00408803                 cmp     eax, 0FFFFFFFFh
.text:00408806                 jz      short loc_40882D
.text:00408808
.text:00408808 loc_408808:                             ; CODE XREF: sub_4087E0+57↓j
.text:00408808                                         ; sub_4087E0+69↓j
.text:00408808                 test    eax, eax
.text:0040880A                 mov     ebx, eax
.text:0040880C                 jnz     short loc_408821
.text:0040880E
.text:0040880E loc_40880E:                             ; CODE XREF: sub_4087E0+4B↓j
.text:0040880E                 mov     [esp+8+var_8], offset sub_408750 ; void (__cdecl *)()
.text:00408815                 call    sub_401040
.text:0040881A
.text:0040881A loc_40881A:                             ; CODE XREF: sub_4087E0+11↑j
.text:0040881A                 mov     ebx, [ebp+var_4]
.text:0040881D                 mov     esp, ebp
.text:0040881F                 pop     ebp
.text:00408820                 retn
.text:00408821 ; ---------------------------------------------------------------------------
.text:00408821
.text:00408821 loc_408821:                             ; CODE XREF: sub_4087E0+2C↑j
.text:00408821                                         ; sub_4087E0+49↓j
.text:00408821                 call    ds:dword_4090A0[ebx*4]
.text:00408828                 dec     ebx
.text:00408829                 jnz     short loc_408821
.text:0040882B                 jmp     short loc_40880E
.text:0040882D ; ---------------------------------------------------------------------------
.text:0040882D
.text:0040882D loc_40882D:                             ; CODE XREF: sub_4087E0+26↑j
.text:0040882D                 mov     ecx, ds:dword_4090A4
.text:00408833                 xor     eax, eax
.text:00408835                 test    ecx, ecx
.text:00408837                 jz      short loc_408808
.text:00408839                 mov     edx, offset dword_4090A0
.text:0040883E                 mov     esi, esi
.text:00408840
.text:00408840 loc_408840:                             ; CODE XREF: sub_4087E0+67↓j
.text:00408840                 inc     eax
.text:00408841                 mov     ebx, [edx+eax*4+4]
.text:00408845                 test    ebx, ebx
.text:00408847                 jnz     short loc_408840
.text:00408849                 jmp     short loc_408808
.text:00408849 sub_4087E0      endp
.text:00408849
.text:00408849 ; ---------------------------------------------------------------------------
.text:0040884B                 align 10h
.text:00408850
.text:00408850 ; =============== S U B R O U T I N E =======================================
.text:00408850
.text:00408850 ; Attributes: info_from_lumina
.text:00408850
.text:00408850 ; void *__cdecl _alloca(size_t Size)
.text:00408850 __alloca        proc near               ; CODE XREF: sub_401C00+E↑p
.text:00408850                 push    ecx
.text:00408851                 mov     ecx, esp
.text:00408853                 add     ecx, 8
.text:00408856
.text:00408856 loc_408856:                             ; CODE XREF: __alloca+1B↓j
.text:00408856                 cmp     eax, 1000h
.text:0040885B                 jb      short loc_40886D
.text:0040885D                 sub     ecx, 1000h
.text:00408863                 or      dword ptr [ecx], 0
.text:00408866                 sub     eax, 1000h
.text:0040886B                 jmp     short loc_408856
.text:0040886D ; ---------------------------------------------------------------------------
.text:0040886D
.text:0040886D loc_40886D:                             ; CODE XREF: __alloca+B↑j
.text:0040886D                 sub     ecx, eax
.text:0040886F                 or      dword ptr [ecx], 0
.text:00408872                 mov     eax, esp
.text:00408874                 mov     esp, ecx
.text:00408876                 mov     ecx, [eax]
.text:00408878                 mov     eax, [eax+4]
.text:0040887B                 jmp     eax
.text:0040887B __alloca        endp
.text:0040887B
.text:0040887B ; ---------------------------------------------------------------------------
.text:0040887D                 align 10h
.text:00408880
.text:00408880 ; =============== S U B R O U T I N E =======================================
.text:00408880
.text:00408880 ; Attributes: bp-based frame
.text:00408880
.text:00408880 sub_408880      proc near               ; CODE XREF: sub_405B90+2BE↑p
.text:00408880                                         ; sub_405B90+36A↑p ...
.text:00408880
.text:00408880 var_24          = dword ptr -24h
.text:00408880 var_20          = dword ptr -20h
.text:00408880 var_1C          = dword ptr -1Ch
.text:00408880 var_18          = dword ptr -18h
.text:00408880 var_14          = dword ptr -14h
.text:00408880 var_C           = dword ptr -0Ch
.text:00408880 var_8           = dword ptr -8
.text:00408880 var_4           = dword ptr -4
.text:00408880 arg_0           = dword ptr  8
.text:00408880 arg_4           = dword ptr  0Ch
.text:00408880 arg_8           = dword ptr  10h
.text:00408880 arg_C           = dword ptr  14h
.text:00408880
.text:00408880                 push    ebp
.text:00408881                 mov     ebp, esp
.text:00408883                 sub     esp, 28h
.text:00408886                 mov     [ebp+var_C], ebx
.text:00408889                 mov     edx, [ebp+arg_C]
.text:0040888C                 mov     ecx, [ebp+arg_0]
.text:0040888F                 mov     [ebp+var_8], esi
.text:00408892                 mov     eax, [ebp+arg_8]
.text:00408895                 test    edx, edx
.text:00408897                 mov     [ebp+var_4], edi
.text:0040889A                 mov     ebx, [ebp+arg_4]
.text:0040889D                 mov     esi, eax
.text:0040889F                 mov     [ebp+var_18], 0
.text:004088A6                 mov     [ebp+var_14], 0
.text:004088AD                 mov     [ebp+var_1C], ecx
.text:004088B0                 jnz     short loc_408902
.text:004088B2                 cmp     eax, ebx
.text:004088B4                 jbe     short loc_4088E0
.text:004088B6                 mov     eax, ecx
.text:004088B8                 mov     edx, ebx
.text:004088BA                 div     esi
.text:004088BC                 mov     edi, eax
.text:004088BE                 mov     esi, esi
.text:004088C0
.text:004088C0 loc_4088C0:                             ; CODE XREF: sub_408880+88↓j
.text:004088C0                                         ; sub_408880+A4↓j ...
.text:004088C0                 xor     ecx, ecx
.text:004088C2
.text:004088C2 loc_4088C2:                             ; CODE XREF: sub_408880+80↓j
.text:004088C2                 mov     [ebp+var_18], edi
.text:004088C5                 mov     ebx, [ebp+var_C]
.text:004088C8                 mov     eax, [ebp+var_18]
.text:004088CB                 mov     [ebp+var_14], ecx
.text:004088CE                 mov     esi, [ebp+var_8]
.text:004088D1                 mov     edx, [ebp+var_14]
.text:004088D4                 mov     edi, [ebp+var_4]
.text:004088D7                 mov     esp, ebp
.text:004088D9                 pop     ebp
.text:004088DA                 retn
.text:004088DA ; ---------------------------------------------------------------------------
.text:004088DB                 align 10h
.text:004088E0
.text:004088E0 loc_4088E0:                             ; CODE XREF: sub_408880+34↑j
.text:004088E0                 test    eax, eax
.text:004088E2                 jnz     short loc_4088F1
.text:004088E4                 mov     eax, 1
.text:004088E9                 xor     ecx, ecx
.text:004088EB                 xor     edx, edx
.text:004088ED                 div     ecx
.text:004088EF                 mov     esi, eax
.text:004088F1
.text:004088F1 loc_4088F1:                             ; CODE XREF: sub_408880+62↑j
.text:004088F1                 mov     eax, ebx
.text:004088F3                 xor     edx, edx
.text:004088F5                 div     esi
.text:004088F7                 mov     ecx, eax
.text:004088F9                 mov     eax, [ebp+var_1C]
.text:004088FC                 div     esi
.text:004088FE                 mov     edi, eax
.text:00408900                 jmp     short loc_4088C2
.text:00408902 ; ---------------------------------------------------------------------------
.text:00408902
.text:00408902 loc_408902:                             ; CODE XREF: sub_408880+30↑j
.text:00408902                 cmp     edx, ebx
.text:00408904                 jbe     short loc_408910
.text:00408906                 xor     edi, edi
.text:00408908                 jmp     short loc_4088C0
.text:00408908 ; ---------------------------------------------------------------------------
.text:0040890A                 align 10h
.text:00408910
.text:00408910 loc_408910:                             ; CODE XREF: sub_408880+84↑j
.text:00408910                 bsr     eax, edx
.text:00408913                 xor     eax, 1Fh
.text:00408916                 mov     [ebp+var_20], eax
.text:00408919                 jnz     short loc_408930
.text:0040891B                 cmp     ebx, edx
.text:0040891D                 ja      short loc_408926
.text:0040891F                 xor     edi, edi
.text:00408921                 cmp     [ebp+var_1C], esi
.text:00408924                 jb      short loc_4088C0
.text:00408926
.text:00408926 loc_408926:                             ; CODE XREF: sub_408880+9D↑j
.text:00408926                 mov     edi, 1
.text:0040892B                 jmp     short loc_4088C0
.text:0040892B ; ---------------------------------------------------------------------------
.text:0040892D                 align 10h
.text:00408930
.text:00408930 loc_408930:                             ; CODE XREF: sub_408880+99↑j
.text:00408930                 mov     eax, [ebp+var_20]
.text:00408933                 mov     ecx, 20h ; ' '
.text:00408938                 sub     ecx, eax
.text:0040893A                 mov     [ebp+var_24], ecx
.text:0040893D                 mov     eax, esi
.text:0040893F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00408943                 shl     edx, cl
.text:00408945                 mov     edi, edx
.text:00408947                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040894B                 mov     edx, ebx
.text:0040894D                 shr     eax, cl
.text:0040894F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00408953                 or      edi, eax
.text:00408955                 mov     eax, [ebp+var_1C]
.text:00408958                 shl     esi, cl
.text:0040895A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040895E                 shr     edx, cl
.text:00408960                 movzx   ecx, byte ptr [ebp+var_20]
.text:00408964                 shl     ebx, cl
.text:00408966                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040896A                 shr     eax, cl
.text:0040896C                 or      ebx, eax
.text:0040896E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00408972                 mov     eax, ebx
.text:00408974                 div     edi
.text:00408976                 mov     ebx, edx
.text:00408978                 mov     edi, eax
.text:0040897A                 shl     [ebp+var_1C], cl
.text:0040897D                 mul     esi
.text:0040897F                 cmp     edx, ebx
.text:00408981                 ja      short loc_408994
.text:00408983                 cmp     edx, ebx
.text:00408985                 jnz     loc_4088C0
.text:0040898B                 cmp     eax, [ebp+var_1C]
.text:0040898E                 jbe     loc_4088C0
.text:00408994
.text:00408994 loc_408994:                             ; CODE XREF: sub_408880+101↑j
.text:00408994                 dec     edi
.text:00408995                 jmp     loc_4088C0
.text:00408995 sub_408880      endp
.text:00408995
.text:00408995 ; ---------------------------------------------------------------------------
.text:0040899A                 align 10h
.text:004089A0
.text:004089A0 ; =============== S U B R O U T I N E =======================================
.text:004089A0
.text:004089A0 ; Attributes: info_from_lumina
.text:004089A0
.text:004089A0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:004089A0 _strtoull       proc near               ; CODE XREF: sub_405B90+AD↑p
.text:004089A0
.text:004089A0 C               = dword ptr -3Ch
.text:004089A0 Type            = dword ptr -38h
.text:004089A0 var_34          = dword ptr -34h
.text:004089A0 var_30          = dword ptr -30h
.text:004089A0 var_2C          = dword ptr -2Ch
.text:004089A0 var_28          = dword ptr -28h
.text:004089A0 var_24          = dword ptr -24h
.text:004089A0 var_20          = dword ptr -20h
.text:004089A0 var_1C          = dword ptr -1Ch
.text:004089A0 var_18          = dword ptr -18h
.text:004089A0 String          = dword ptr  4
.text:004089A0 EndPtr          = dword ptr  8
.text:004089A0 Radix           = dword ptr  0Ch
.text:004089A0
.text:004089A0                 push    ebp
.text:004089A1                 push    edi
.text:004089A2                 push    esi
.text:004089A3                 push    ebx
.text:004089A4                 sub     esp, 2Ch
.text:004089A7                 mov     edx, [esp+3Ch+EndPtr]
.text:004089AB                 test    edx, edx
.text:004089AD                 jz      short loc_4089B9
.text:004089AF                 mov     eax, [esp+3Ch+String]
.text:004089B3                 mov     ecx, [esp+3Ch+EndPtr]
.text:004089B7                 mov     [ecx], eax
.text:004089B9
.text:004089B9 loc_4089B9:                             ; CODE XREF: _strtoull+D↑j
.text:004089B9                 mov     edx, [esp+3Ch+Radix]
.text:004089BD                 test    edx, edx
.text:004089BF                 js      short loc_4089CF
.text:004089C1                 cmp     [esp+3Ch+Radix], 1
.text:004089C6                 jz      short loc_4089CF
.text:004089C8                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:004089CD                 jle     short loc_4089E6
.text:004089CF
.text:004089CF loc_4089CF:                             ; CODE XREF: _strtoull+1F↑j
.text:004089CF                                         ; _strtoull+26↑j
.text:004089CF                 call    _errno
.text:004089D4                 mov     dword ptr [eax], 21h ; '!'
.text:004089DA
.text:004089DA loc_4089DA:                             ; CODE XREF: _strtoull+FF↓j
.text:004089DA                                         ; _strtoull+109↓j
.text:004089DA                 xor     eax, eax
.text:004089DC                 xor     edx, edx
.text:004089DE
.text:004089DE loc_4089DE:                             ; CODE XREF: _strtoull+244↓j
.text:004089DE                                         ; _strtoull+251↓j ...
.text:004089DE                 add     esp, 2Ch
.text:004089E1                 pop     ebx
.text:004089E2                 pop     esi
.text:004089E3                 pop     edi
.text:004089E4                 pop     ebp
.text:004089E5                 retn
.text:004089E6 ; ---------------------------------------------------------------------------
.text:004089E6
.text:004089E6 loc_4089E6:                             ; CODE XREF: _strtoull+2D↑j
.text:004089E6                 mov     ecx, ds:__mb_cur_max
.text:004089EC                 lea     esi, [esi+0]
.text:004089F0
.text:004089F0 loc_4089F0:                             ; CODE XREF: _strtoull+7E↓j
.text:004089F0                 cmp     dword ptr [ecx], 1
.text:004089F3                 mov     esi, [esp+3Ch+String]
.text:004089F7                 movsx   edx, byte ptr [esi]
.text:004089FA                 jz      loc_408DD2
.text:00408A00                 mov     [esp+3Ch+Type], 8 ; Type
.text:00408A08                 mov     [esp+3Ch+C], edx ; C
.text:00408A0B                 call    _isctype
.text:00408A10                 mov     ecx, ds:__mb_cur_max
.text:00408A16
.text:00408A16 loc_408A16:                             ; CODE XREF: _strtoull+445↓j
.text:00408A16                 test    eax, eax
.text:00408A18                 jz      short loc_408A20
.text:00408A1A                 inc     [esp+3Ch+String]
.text:00408A1E                 jmp     short loc_4089F0
.text:00408A20 ; ---------------------------------------------------------------------------
.text:00408A20
.text:00408A20 loc_408A20:                             ; CODE XREF: _strtoull+78↑j
.text:00408A20                 mov     esi, [esp+3Ch+String]
.text:00408A24                 xor     ebx, ebx
.text:00408A26                 movzx   edx, byte ptr [esi]
.text:00408A29                 cmp     dl, 2Dh ; '-'
.text:00408A2C                 setz    bl
.text:00408A2F                 test    ebx, ebx
.text:00408A31                 mov     [esp+3Ch+var_20], ebx
.text:00408A35                 jnz     loc_408DC2
.text:00408A3B                 cmp     dl, 2Bh ; '+'
.text:00408A3E                 jz      loc_408DC2
.text:00408A44
.text:00408A44 loc_408A44:                             ; CODE XREF: _strtoull+42D↓j
.text:00408A44                 mov     ebp, [esp+3Ch+Radix]
.text:00408A48                 test    ebp, ebp
.text:00408A4A                 jnz     short loc_408A5D
.text:00408A4C                 cmp     dl, 30h ; '0'
.text:00408A4F                 jz      loc_408D99
.text:00408A55                 mov     [esp+3Ch+Radix], 0Ah
.text:00408A5D
.text:00408A5D loc_408A5D:                             ; CODE XREF: _strtoull+AA↑j
.text:00408A5D                                         ; _strtoull+40F↓j ...
.text:00408A5D                 cmp     [esp+3Ch+Radix], 10h
.text:00408A62                 jz      loc_408D6B
.text:00408A68
.text:00408A68 loc_408A68:                             ; CODE XREF: _strtoull+3CE↓j
.text:00408A68                                         ; _strtoull+3E2↓j ...
.text:00408A68                 cmp     dword ptr [ecx], 1
.text:00408A6B                 movsx   ebx, dl
.text:00408A6E                 jz      loc_408D53
.text:00408A74                 mov     [esp+3Ch+Type], 4 ; Type
.text:00408A7C                 mov     [esp+3Ch+C], ebx ; C
.text:00408A7F                 call    _isctype
.text:00408A84                 mov     esi, [esp+3Ch+String]
.text:00408A88                 movzx   edx, byte ptr [esi]
.text:00408A8B
.text:00408A8B loc_408A8B:                             ; CODE XREF: _strtoull+3C6↓j
.text:00408A8B                 test    eax, eax
.text:00408A8D                 jz      loc_408CBC
.text:00408A93                 movsx   eax, dl
.text:00408A96                 sub     eax, 30h ; '0'
.text:00408A99
.text:00408A99 loc_408A99:                             ; CODE XREF: _strtoull+34B↓j
.text:00408A99                                         ; _strtoull+37C↓j ...
.text:00408A99                 inc     [esp+3Ch+String]
.text:00408A9D                 test    eax, eax
.text:00408A9F                 js      loc_4089DA
.text:00408AA5                 cmp     eax, [esp+3Ch+Radix]
.text:00408AA9                 jge     loc_4089DA
.text:00408AAF                 mov     [esp+3Ch+var_1C], eax
.text:00408AB3                 mov     edx, eax
.text:00408AB5                 sar     edx, 1Fh
.text:00408AB8                 mov     [esp+3Ch+var_18], edx
.text:00408ABC                 mov     [esp+3Ch+var_24], 0
.text:00408AC4                 lea     esi, [esi+0]
.text:00408ACA                 lea     edi, [edi+0]
.text:00408AD0
.text:00408AD0 loc_408AD0:                             ; CODE XREF: _strtoull+20C↓j
.text:00408AD0                 mov     ebp, [esp+3Ch+String]
.text:00408AD4                 mov     ebx, ds:__mb_cur_max
.text:00408ADA                 movzx   edx, byte ptr [ebp+0]
.text:00408ADE                 cmp     dword ptr [ebx], 1
.text:00408AE1                 movsx   ecx, dl
.text:00408AE4                 jz      loc_408CA5
.text:00408AEA                 mov     [esp+3Ch+C], ecx ; C
.text:00408AED                 mov     [esp+3Ch+Type], 4 ; Type
.text:00408AF5                 call    _isctype
.text:00408AFA                 mov     ecx, [esp+3Ch+String]
.text:00408AFE                 movzx   edx, byte ptr [ecx]
.text:00408B01
.text:00408B01 loc_408B01:                             ; CODE XREF: _strtoull+317↓j
.text:00408B01                 test    eax, eax
.text:00408B03                 jz      loc_408C10
.text:00408B09                 movsx   edi, dl
.text:00408B0C                 lea     ebp, [edi-30h]
.text:00408B0F
.text:00408B0F loc_408B0F:                             ; CODE XREF: _strtoull+2A3↓j
.text:00408B0F                 test    ebp, ebp
.text:00408B11                 js      loc_408BBB
.text:00408B17                 cmp     ebp, [esp+3Ch+Radix]
.text:00408B1B                 jge     loc_408BBB
.text:00408B21                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00408B28                 mov     eax, [esp+3Ch+Radix]
.text:00408B2C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00408B34                 cdq
.text:00408B35                 mov     esi, eax
.text:00408B37                 mov     [esp+3Ch+var_34], eax
.text:00408B3B                 mov     edi, edx
.text:00408B3D                 mov     [esp+3Ch+var_30], edx
.text:00408B41                 call    sub_408880
.text:00408B46                 add     eax, 1
.text:00408B49                 adc     edx, 0
.text:00408B4C                 cmp     [esp+3Ch+var_18], edx
.text:00408B50                 ja      short loc_408BA0
.text:00408B52                 jb      short loc_408B5A
.text:00408B54                 cmp     [esp+3Ch+var_1C], eax
.text:00408B58                 ja      short loc_408BA0
.text:00408B5A
.text:00408B5A loc_408B5A:                             ; CODE XREF: _strtoull+1B2↑j
.text:00408B5A                 mov     eax, [esp+3Ch+var_1C]
.text:00408B5E                 mov     ebx, ebp
.text:00408B60                 mul     esi
.text:00408B62                 mov     ecx, edx
.text:00408B64                 mov     [esp+3Ch+var_2C], eax
.text:00408B68                 mov     eax, [esp+3Ch+var_18]
.text:00408B6C                 mov     [esp+3Ch+var_28], edx
.text:00408B70                 imul    eax, esi
.text:00408B73                 mov     esi, [esp+3Ch+var_1C]
.text:00408B77                 imul    esi, edi
.text:00408B7A                 add     ecx, eax
.text:00408B7C                 lea     edi, [esi+ecx]
.text:00408B7F                 mov     esi, ebp
.text:00408B81                 sar     esi, 1Fh
.text:00408B84                 add     ebx, [esp+3Ch+var_2C]
.text:00408B88                 mov     [esp+3Ch+var_28], edi
.text:00408B8C                 adc     esi, [esp+3Ch+var_28]
.text:00408B90                 cmp     esi, [esp+3Ch+var_18]
.text:00408B94                 jb      short loc_408BA0
.text:00408B96                 ja      short loc_408BB1
.text:00408B98                 cmp     ebx, [esp+3Ch+var_1C]
.text:00408B9C                 jnb     short loc_408BB1
.text:00408B9E                 mov     esi, esi
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: _strtoull+1B0↑j
.text:00408BA0                                         ; _strtoull+1B8↑j ...
.text:00408BA0                 mov     [esp+3Ch+var_24], 1
.text:00408BA8
.text:00408BA8 loc_408BA8:                             ; CODE XREF: _strtoull+219↓j
.text:00408BA8                 inc     [esp+3Ch+String]
.text:00408BAC                 jmp     loc_408AD0
.text:00408BB1 ; ---------------------------------------------------------------------------
.text:00408BB1
.text:00408BB1 loc_408BB1:                             ; CODE XREF: _strtoull+1F6↑j
.text:00408BB1                                         ; _strtoull+1FC↑j
.text:00408BB1                 mov     [esp+3Ch+var_1C], ebx
.text:00408BB5                 mov     [esp+3Ch+var_18], esi
.text:00408BB9                 jmp     short loc_408BA8
.text:00408BBB ; ---------------------------------------------------------------------------
.text:00408BBB
.text:00408BBB loc_408BBB:                             ; CODE XREF: _strtoull+171↑j
.text:00408BBB                                         ; _strtoull+17B↑j
.text:00408BBB                 mov     eax, [esp+3Ch+EndPtr]
.text:00408BBF                 test    eax, eax
.text:00408BC1                 jz      short loc_408BCE
.text:00408BC3                 mov     ecx, [esp+3Ch+String]
.text:00408BC7                 mov     ebp, [esp+3Ch+EndPtr]
.text:00408BCB                 mov     [ebp+0], ecx
.text:00408BCE
.text:00408BCE loc_408BCE:                             ; CODE XREF: _strtoull+221↑j
.text:00408BCE                 mov     esi, [esp+3Ch+var_24]
.text:00408BD2                 test    esi, esi
.text:00408BD4                 jnz     short loc_408BF6
.text:00408BD6                 mov     ebx, [esp+3Ch+var_20]
.text:00408BDA                 mov     eax, [esp+3Ch+var_1C]
.text:00408BDE                 mov     edx, [esp+3Ch+var_18]
.text:00408BE2                 test    ebx, ebx
.text:00408BE4                 jz      loc_4089DE
.text:00408BEA                 neg     eax
.text:00408BEC                 adc     edx, 0
.text:00408BEF                 neg     edx
.text:00408BF1                 jmp     loc_4089DE
.text:00408BF6 ; ---------------------------------------------------------------------------
.text:00408BF6
.text:00408BF6 loc_408BF6:                             ; CODE XREF: _strtoull+234↑j
.text:00408BF6                 call    _errno
.text:00408BFB                 mov     edx, 0FFFFFFFFh
.text:00408C00                 mov     dword ptr [eax], 22h ; '"'
.text:00408C06                 mov     eax, 0FFFFFFFFh
.text:00408C0B                 jmp     loc_4089DE
.text:00408C10 ; ---------------------------------------------------------------------------
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: _strtoull+163↑j
.text:00408C10                 mov     ebp, ds:__mb_cur_max
.text:00408C16                 movsx   ecx, dl
.text:00408C19                 cmp     dword ptr [ebp+0], 1
.text:00408C1D                 jz      short loc_408C91
.text:00408C1F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00408C27                 mov     [esp+3Ch+C], ecx ; C
.text:00408C2A                 call    _isctype
.text:00408C2F                 mov     ebp, [esp+3Ch+String]
.text:00408C33                 movzx   edx, byte ptr [ebp+0]
.text:00408C37
.text:00408C37 loc_408C37:                             ; CODE XREF: _strtoull+303↓j
.text:00408C37                 test    eax, eax
.text:00408C39                 jz      short loc_408C48
.text:00408C3B                 movsx   eax, dl
.text:00408C3E                 sub     eax, 37h ; '7'
.text:00408C41
.text:00408C41 loc_408C41:                             ; CODE XREF: _strtoull+2D4↓j
.text:00408C41                                         ; _strtoull+2DB↓j
.text:00408C41                 mov     ebp, eax
.text:00408C43                 jmp     loc_408B0F
.text:00408C48 ; ---------------------------------------------------------------------------
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: _strtoull+299↑j
.text:00408C48                 mov     ecx, ds:__mb_cur_max
.text:00408C4E                 movsx   edx, dl
.text:00408C51                 cmp     dword ptr [ecx], 1
.text:00408C54                 jz      short loc_408C7D
.text:00408C56                 mov     [esp+3Ch+Type], 2 ; Type
.text:00408C5E                 mov     [esp+3Ch+C], edx ; C
.text:00408C61                 call    _isctype
.text:00408C66
.text:00408C66 loc_408C66:                             ; CODE XREF: _strtoull+2EF↓j
.text:00408C66                 test    eax, eax
.text:00408C68                 jz      short loc_408C76
.text:00408C6A                 mov     edx, [esp+3Ch+String]
.text:00408C6E                 movsx   eax, byte ptr [edx]
.text:00408C71                 sub     eax, 57h ; 'W'
.text:00408C74                 jmp     short loc_408C41
.text:00408C76 ; ---------------------------------------------------------------------------
.text:00408C76
.text:00408C76 loc_408C76:                             ; CODE XREF: _strtoull+2C8↑j
.text:00408C76                 mov     eax, 0FFFFFFFFh
.text:00408C7B                 jmp     short loc_408C41
.text:00408C7D ; ---------------------------------------------------------------------------
.text:00408C7D
.text:00408C7D loc_408C7D:                             ; CODE XREF: _strtoull+2B4↑j
.text:00408C7D                 mov     edi, ds:_pctype
.text:00408C83                 mov     ebx, [edi]
.text:00408C85                 movzx   esi, word ptr [ebx+edx*2]
.text:00408C89                 and     esi, 2
.text:00408C8C                 movzx   eax, si
.text:00408C8F                 jmp     short loc_408C66
.text:00408C91 ; ---------------------------------------------------------------------------
.text:00408C91
.text:00408C91 loc_408C91:                             ; CODE XREF: _strtoull+27D↑j
.text:00408C91                 mov     edi, ds:_pctype
.text:00408C97                 mov     ebx, [edi]
.text:00408C99                 movzx   esi, word ptr [ebx+ecx*2]
.text:00408C9D                 and     esi, 1
.text:00408CA0                 movzx   eax, si
.text:00408CA3                 jmp     short loc_408C37
.text:00408CA5 ; ---------------------------------------------------------------------------
.text:00408CA5
.text:00408CA5 loc_408CA5:                             ; CODE XREF: _strtoull+144↑j
.text:00408CA5                 mov     ebx, ds:_pctype
.text:00408CAB                 mov     esi, [ebx]
.text:00408CAD                 movzx   edi, word ptr [esi+ecx*2]
.text:00408CB1                 and     edi, 4
.text:00408CB4                 movzx   eax, di
.text:00408CB7                 jmp     loc_408B01
.text:00408CBC ; ---------------------------------------------------------------------------
.text:00408CBC
.text:00408CBC loc_408CBC:                             ; CODE XREF: _strtoull+ED↑j
.text:00408CBC                 mov     ebx, ds:__mb_cur_max
.text:00408CC2                 movsx   ecx, dl
.text:00408CC5                 cmp     dword ptr [ebx], 1
.text:00408CC8                 jz      short loc_408D3F
.text:00408CCA                 mov     [esp+3Ch+C], ecx ; C
.text:00408CCD                 mov     [esp+3Ch+Type], 1 ; Type
.text:00408CD5                 call    _isctype
.text:00408CDA                 mov     ecx, [esp+3Ch+String]
.text:00408CDE                 movzx   edx, byte ptr [ecx]
.text:00408CE1
.text:00408CE1 loc_408CE1:                             ; CODE XREF: _strtoull+3B1↓j
.text:00408CE1                 test    eax, eax
.text:00408CE3                 jz      short loc_408CF0
.text:00408CE5                 movsx   eax, dl
.text:00408CE8                 sub     eax, 37h ; '7'
.text:00408CEB                 jmp     loc_408A99
.text:00408CF0 ; ---------------------------------------------------------------------------
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: _strtoull+343↑j
.text:00408CF0                 mov     ebx, ds:__mb_cur_max
.text:00408CF6                 movsx   edx, dl
.text:00408CF9                 cmp     dword ptr [ebx], 1
.text:00408CFC                 jz      short loc_408D2B
.text:00408CFE                 mov     [esp+3Ch+Type], 2 ; Type
.text:00408D06                 mov     [esp+3Ch+C], edx ; C
.text:00408D09                 call    _isctype
.text:00408D0E
.text:00408D0E loc_408D0E:                             ; CODE XREF: _strtoull+39D↓j
.text:00408D0E                 test    eax, eax
.text:00408D10                 jz      short loc_408D21
.text:00408D12                 mov     ecx, [esp+3Ch+String]
.text:00408D16                 movsx   eax, byte ptr [ecx]
.text:00408D19                 sub     eax, 57h ; 'W'
.text:00408D1C                 jmp     loc_408A99
.text:00408D21 ; ---------------------------------------------------------------------------
.text:00408D21
.text:00408D21 loc_408D21:                             ; CODE XREF: _strtoull+370↑j
.text:00408D21                 mov     eax, 0FFFFFFFFh
.text:00408D26                 jmp     loc_408A99
.text:00408D2B ; ---------------------------------------------------------------------------
.text:00408D2B
.text:00408D2B loc_408D2B:                             ; CODE XREF: _strtoull+35C↑j
.text:00408D2B                 mov     esi, ds:_pctype
.text:00408D31                 mov     edi, [esi]
.text:00408D33                 movzx   ebp, word ptr [edi+edx*2]
.text:00408D37                 and     ebp, 2
.text:00408D3A                 movzx   eax, bp
.text:00408D3D                 jmp     short loc_408D0E
.text:00408D3F ; ---------------------------------------------------------------------------
.text:00408D3F
.text:00408D3F loc_408D3F:                             ; CODE XREF: _strtoull+328↑j
.text:00408D3F                 mov     esi, ds:_pctype
.text:00408D45                 mov     edi, [esi]
.text:00408D47                 movzx   ebp, word ptr [edi+ecx*2]
.text:00408D4B                 and     ebp, 1
.text:00408D4E                 movzx   eax, bp
.text:00408D51                 jmp     short loc_408CE1
.text:00408D53 ; ---------------------------------------------------------------------------
.text:00408D53
.text:00408D53 loc_408D53:                             ; CODE XREF: _strtoull+CE↑j
.text:00408D53                 mov     edi, ds:_pctype
.text:00408D59                 mov     ebp, [edi]
.text:00408D5B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00408D60                 and     ecx, 4
.text:00408D63                 movzx   eax, cx
.text:00408D66                 jmp     loc_408A8B
.text:00408D6B ; ---------------------------------------------------------------------------
.text:00408D6B
.text:00408D6B loc_408D6B:                             ; CODE XREF: _strtoull+C2↑j
.text:00408D6B                 cmp     dl, 30h ; '0'
.text:00408D6E                 jnz     loc_408A68
.text:00408D74                 mov     esi, [esp+3Ch+String]
.text:00408D78                 movzx   eax, byte ptr [esi+1]
.text:00408D7C                 cmp     al, 58h ; 'X'
.text:00408D7E                 jz      short loc_408D88
.text:00408D80                 cmp     al, 78h ; 'x'
.text:00408D82                 jnz     loc_408A68
.text:00408D88
.text:00408D88 loc_408D88:                             ; CODE XREF: _strtoull+3DE↑j
.text:00408D88                 add     [esp+3Ch+String], 2
.text:00408D8D                 mov     ebx, [esp+3Ch+String]
.text:00408D91                 movzx   edx, byte ptr [ebx]
.text:00408D94                 jmp     loc_408A68
.text:00408D99 ; ---------------------------------------------------------------------------
.text:00408D99
.text:00408D99 loc_408D99:                             ; CODE XREF: _strtoull+AF↑j
.text:00408D99                 mov     edi, [esp+3Ch+String]
.text:00408D9D                 movzx   eax, byte ptr [edi+1]
.text:00408DA1                 cmp     al, 58h ; 'X'
.text:00408DA3                 jz      short loc_408DB5
.text:00408DA5                 mov     [esp+3Ch+Radix], 8
.text:00408DAD                 cmp     al, 78h ; 'x'
.text:00408DAF                 jnz     loc_408A5D
.text:00408DB5
.text:00408DB5 loc_408DB5:                             ; CODE XREF: _strtoull+403↑j
.text:00408DB5                 mov     [esp+3Ch+Radix], 10h
.text:00408DBD                 jmp     loc_408A5D
.text:00408DC2 ; ---------------------------------------------------------------------------
.text:00408DC2
.text:00408DC2 loc_408DC2:                             ; CODE XREF: _strtoull+95↑j
.text:00408DC2                                         ; _strtoull+9E↑j
.text:00408DC2                 inc     [esp+3Ch+String]
.text:00408DC6                 mov     eax, [esp+3Ch+String]
.text:00408DCA                 movzx   edx, byte ptr [eax]
.text:00408DCD                 jmp     loc_408A44
.text:00408DD2 ; ---------------------------------------------------------------------------
.text:00408DD2
.text:00408DD2 loc_408DD2:                             ; CODE XREF: _strtoull+5A↑j
.text:00408DD2                 mov     ebp, ds:_pctype
.text:00408DD8                 mov     edi, [ebp+0]
.text:00408DDB                 movzx   ebx, word ptr [edi+edx*2]
.text:00408DDF                 and     ebx, 8
.text:00408DE2                 movzx   eax, bx
.text:00408DE5                 jmp     loc_408A16
.text:00408DE5 _strtoull       endp
.text:00408DE5
.text:00408DE5 ; ---------------------------------------------------------------------------
.text:00408DEA                 align 10h
.text:00408DF0                 jmp     ds:__set_app_type
.text:00408DF0 ; ---------------------------------------------------------------------------
.text:00408DF6                 align 10h
.text:00408E00
.text:00408E00 ; =============== S U B R O U T I N E =======================================
.text:00408E00
.text:00408E00 ; Attributes: thunk
.text:00408E00
.text:00408E00 ; void __cdecl cexit()
.text:00408E00 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00408E00                 jmp     ds:__imp__cexit
.text:00408E00 _cexit          endp
.text:00408E00
.text:00408E00 ; ---------------------------------------------------------------------------
.text:00408E06                 align 10h
.text:00408E10
.text:00408E10 ; =============== S U B R O U T I N E =======================================
.text:00408E10
.text:00408E10 ; Attributes: thunk
.text:00408E10
.text:00408E10 ; char ***__cdecl _p__environ()
.text:00408E10 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00408E10                 jmp     ds:__imp___p__environ
.text:00408E10 __p__environ    endp
.text:00408E10
.text:00408E10 ; ---------------------------------------------------------------------------
.text:00408E16                 align 10h
.text:00408E20
.text:00408E20 ; =============== S U B R O U T I N E =======================================
.text:00408E20
.text:00408E20 ; Attributes: thunk
.text:00408E20
.text:00408E20 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00408E20 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00408E20                                         ; TopLevelExceptionFilter+88↑p ...
.text:00408E20
.text:00408E20 Signal          = dword ptr  4
.text:00408E20 Function        = dword ptr  8
.text:00408E20
.text:00408E20                 jmp     ds:__imp_signal
.text:00408E20 signal          endp
.text:00408E20
.text:00408E20 ; ---------------------------------------------------------------------------
.text:00408E26                 align 10h
.text:00408E30
.text:00408E30 ; =============== S U B R O U T I N E =======================================
.text:00408E30
.text:00408E30 ; Attributes: thunk
.text:00408E30
.text:00408E30 ; int *__cdecl _p__fmode()
.text:00408E30 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00408E30                 jmp     ds:__imp___p__fmode
.text:00408E30 __p__fmode      endp
.text:00408E30
.text:00408E30 ; ---------------------------------------------------------------------------
.text:00408E36                 align 10h
.text:00408E40
.text:00408E40 ; =============== S U B R O U T I N E =======================================
.text:00408E40
.text:00408E40 ; Attributes: thunk
.text:00408E40
.text:00408E40 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00408E40 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00408E40                                         ; sub_401080+90↑p ...
.text:00408E40
.text:00408E40 FileHandle      = dword ptr  4
.text:00408E40 Mode            = dword ptr  8
.text:00408E40
.text:00408E40                 jmp     ds:__imp__setmode
.text:00408E40 _setmode        endp
.text:00408E40
.text:00408E40 ; ---------------------------------------------------------------------------
.text:00408E46                 align 10h
.text:00408E50
.text:00408E50 ; =============== S U B R O U T I N E =======================================
.text:00408E50
.text:00408E50 ; Attributes: thunk
.text:00408E50
.text:00408E50 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00408E50                 jmp     ds:__imp___getmainargs
.text:00408E50 __getmainargs   endp
.text:00408E50
.text:00408E50 ; ---------------------------------------------------------------------------
.text:00408E56                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60 ; Attributes: thunk
.text:00408E60
.text:00408E60 ; int __cdecl fclose(FILE *Stream)
.text:00408E60 fclose          proc near               ; CODE XREF: sub_401C00+941↑p
.text:00408E60                                         ; sub_401C00+959↑p ...
.text:00408E60
.text:00408E60 Stream          = dword ptr  4
.text:00408E60
.text:00408E60                 jmp     ds:__imp_fclose
.text:00408E60 fclose          endp
.text:00408E60
.text:00408E60 ; ---------------------------------------------------------------------------
.text:00408E66                 align 10h
.text:00408E70
.text:00408E70 ; =============== S U B R O U T I N E =======================================
.text:00408E70
.text:00408E70 ; Attributes: thunk
.text:00408E70
.text:00408E70 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00408E70 setlocale       proc near               ; CODE XREF: sub_401C00+39↑p
.text:00408E70                                         ; sub_405A50+24↑p
.text:00408E70
.text:00408E70 Category        = dword ptr  4
.text:00408E70 Locale          = dword ptr  8
.text:00408E70
.text:00408E70                 jmp     ds:__imp_setlocale
.text:00408E70 setlocale       endp
.text:00408E70
.text:00408E70 ; ---------------------------------------------------------------------------
.text:00408E76                 align 10h
.text:00408E80
.text:00408E80 ; =============== S U B R O U T I N E =======================================
.text:00408E80
.text:00408E80 ; Attributes: thunk
.text:00408E80
.text:00408E80 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00408E80 strpbrk         proc near               ; CODE XREF: sub_401C00+4FD↑p
.text:00408E80                                         ; sub_401C00+61D↑p
.text:00408E80
.text:00408E80 Str             = dword ptr  4
.text:00408E80 Control         = dword ptr  8
.text:00408E80
.text:00408E80                 jmp     ds:__imp_strpbrk
.text:00408E80 strpbrk         endp
.text:00408E80
.text:00408E80 ; ---------------------------------------------------------------------------
.text:00408E86                 align 10h
.text:00408E90
.text:00408E90 ; =============== S U B R O U T I N E =======================================
.text:00408E90
.text:00408E90 ; Attributes: noreturn thunk
.text:00408E90
.text:00408E90 _assert         proc near               ; CODE XREF: sub_401C00:loc_402183↑p
.text:00408E90                                         ; sub_405250+660↑p ...
.text:00408E90                 jmp     ds:__imp__assert
.text:00408E90 _assert         endp
.text:00408E90
.text:00408E90 ; ---------------------------------------------------------------------------
.text:00408E96                 align 10h
.text:00408EA0
.text:00408EA0 ; =============== S U B R O U T I N E =======================================
.text:00408EA0
.text:00408EA0 ; Attributes: thunk
.text:00408EA0
.text:00408EA0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00408EA0 fwrite          proc near               ; CODE XREF: sub_403780+161↑p
.text:00408EA0                                         ; sub_403780+386↑p ...
.text:00408EA0
.text:00408EA0 Buffer          = dword ptr  4
.text:00408EA0 ElementSize     = dword ptr  8
.text:00408EA0 ElementCount    = dword ptr  0Ch
.text:00408EA0 Stream          = dword ptr  10h
.text:00408EA0
.text:00408EA0                 jmp     ds:__imp_fwrite
.text:00408EA0 fwrite          endp
.text:00408EA0
.text:00408EA0 ; ---------------------------------------------------------------------------
.text:00408EA6                 align 10h
.text:00408EB0
.text:00408EB0 ; =============== S U B R O U T I N E =======================================
.text:00408EB0
.text:00408EB0 ; Attributes: thunk
.text:00408EB0
.text:00408EB0 ; void __cdecl free(void *Block)
.text:00408EB0 free            proc near               ; CODE XREF: sub_402850+83↑p
.text:00408EB0                                         ; sub_402850+10B↑p ...
.text:00408EB0
.text:00408EB0 Block           = dword ptr  4
.text:00408EB0
.text:00408EB0                 jmp     ds:__imp_free
.text:00408EB0 free            endp
.text:00408EB0
.text:00408EB0 ; ---------------------------------------------------------------------------
.text:00408EB6                 align 10h
.text:00408EC0
.text:00408EC0 ; =============== S U B R O U T I N E =======================================
.text:00408EC0
.text:00408EC0 ; Attributes: thunk
.text:00408EC0
.text:00408EC0 ; int *__cdecl errno()
.text:00408EC0 _errno          proc near               ; CODE XREF: sub_401C00+982↑p
.text:00408EC0                                         ; sub_401C00:loc_4025A6↑p ...
.text:00408EC0                 jmp     ds:__imp__errno
.text:00408EC0 _errno          endp
.text:00408EC0
.text:00408EC0 ; ---------------------------------------------------------------------------
.text:00408EC6                 align 10h
.text:00408ED0
.text:00408ED0 ; =============== S U B R O U T I N E =======================================
.text:00408ED0
.text:00408ED0 ; Attributes: thunk
.text:00408ED0
.text:00408ED0 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00408ED0 memchr          proc near               ; CODE XREF: sub_403480+56↑p
.text:00408ED0
.text:00408ED0 Buf             = dword ptr  4
.text:00408ED0 Val             = dword ptr  8
.text:00408ED0 MaxCount        = dword ptr  0Ch
.text:00408ED0
.text:00408ED0                 jmp     ds:__imp_memchr
.text:00408ED0 memchr          endp
.text:00408ED0
.text:00408ED0 ; ---------------------------------------------------------------------------
.text:00408ED6                 align 10h
.text:00408EE0
.text:00408EE0 ; =============== S U B R O U T I N E =======================================
.text:00408EE0
.text:00408EE0 ; Attributes: noreturn thunk
.text:00408EE0
.text:00408EE0 ; void __cdecl __noreturn exit(int Code)
.text:00408EE0 exit            proc near               ; CODE XREF: sub_401C00:loc_401E3B↑p
.text:00408EE0                                         ; .text:0040272B↑p ...
.text:00408EE0
.text:00408EE0 Code            = dword ptr  4
.text:00408EE0
.text:00408EE0                 jmp     ds:__imp_exit
.text:00408EE0 exit            endp
.text:00408EE0
.text:00408EE0 ; ---------------------------------------------------------------------------
.text:00408EE6                 align 10h
.text:00408EF0
.text:00408EF0 ; =============== S U B R O U T I N E =======================================
.text:00408EF0
.text:00408EF0 ; Attributes: thunk
.text:00408EF0
.text:00408EF0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00408EF0 fputs           proc near               ; CODE XREF: sub_401C00+367↑p
.text:00408EF0                                         ; sub_401C00+389↑p ...
.text:00408EF0
.text:00408EF0 Buffer          = dword ptr  4
.text:00408EF0 Stream          = dword ptr  8
.text:00408EF0
.text:00408EF0                 jmp     ds:__imp_fputs
.text:00408EF0 fputs           endp
.text:00408EF0
.text:00408EF0 ; ---------------------------------------------------------------------------
.text:00408EF6                 align 10h
.text:00408F00
.text:00408F00 ; =============== S U B R O U T I N E =======================================
.text:00408F00
.text:00408F00 ; Attributes: thunk
.text:00408F00
.text:00408F00 ; int printf(const char *const Format, ...)
.text:00408F00 printf          proc near               ; CODE XREF: sub_401C00+345↑p
.text:00408F00                                         ; sub_401C00+42E↑p ...
.text:00408F00
.text:00408F00 Format          = dword ptr  4
.text:00408F00
.text:00408F00                 jmp     ds:__imp_printf
.text:00408F00 printf          endp
.text:00408F00
.text:00408F00 ; ---------------------------------------------------------------------------
.text:00408F06                 align 10h
.text:00408F10
.text:00408F10 ; =============== S U B R O U T I N E =======================================
.text:00408F10
.text:00408F10 ; Attributes: thunk
.text:00408F10
.text:00408F10 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00408F10 fprintf         proc near               ; CODE XREF: sub_401C00+22F↑p
.text:00408F10                                         ; .text:00402723↑p ...
.text:00408F10
.text:00408F10 Stream          = dword ptr  4
.text:00408F10 Format          = dword ptr  8
.text:00408F10
.text:00408F10                 jmp     ds:__imp_fprintf
.text:00408F10 fprintf         endp
.text:00408F10
.text:00408F10 ; ---------------------------------------------------------------------------
.text:00408F16                 align 10h
.text:00408F20
.text:00408F20 ; =============== S U B R O U T I N E =======================================
.text:00408F20
.text:00408F20 ; Attributes: thunk
.text:00408F20
.text:00408F20 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00408F20 fopen           proc near               ; CODE XREF: sub_401C00+A5E↑p
.text:00408F20                                         ; sub_401C00+AA0↑p
.text:00408F20
.text:00408F20 FileName        = dword ptr  4
.text:00408F20 Mode            = dword ptr  8
.text:00408F20
.text:00408F20                 jmp     ds:__imp_fopen
.text:00408F20 fopen           endp
.text:00408F20
.text:00408F20 ; ---------------------------------------------------------------------------
.text:00408F26                 align 10h
.text:00408F30
.text:00408F30 ; =============== S U B R O U T I N E =======================================
.text:00408F30
.text:00408F30 ; Attributes: thunk
.text:00408F30
.text:00408F30 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00408F30 _flsbuf         proc near               ; CODE XREF: sub_403780+C2↑p
.text:00408F30                                         ; sub_403780+114↑j ...
.text:00408F30
.text:00408F30 File            = dword ptr  8
.text:00408F30
.text:00408F30                 jmp     ds:__imp__flsbuf
.text:00408F30 _flsbuf         endp
.text:00408F30
.text:00408F30 ; ---------------------------------------------------------------------------
.text:00408F36                 align 10h
.text:00408F40
.text:00408F40 ; =============== S U B R O U T I N E =======================================
.text:00408F40
.text:00408F40 ; Attributes: thunk
.text:00408F40
.text:00408F40 ; size_t __cdecl strlen(const char *Str)
.text:00408F40 strlen          proc near               ; CODE XREF: sub_403F10+2A9↑p
.text:00408F40                                         ; sub_403F10+346↑p ...
.text:00408F40
.text:00408F40 Str             = dword ptr  4
.text:00408F40
.text:00408F40                 jmp     ds:__imp_strlen
.text:00408F40 strlen          endp
.text:00408F40
.text:00408F40 ; ---------------------------------------------------------------------------
.text:00408F46                 align 10h
.text:00408F50
.text:00408F50 ; =============== S U B R O U T I N E =======================================
.text:00408F50
.text:00408F50 ; Attributes: thunk
.text:00408F50
.text:00408F50 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00408F50 strncmp         proc near               ; CODE XREF: sub_403F10+23F↑p
.text:00408F50                                         ; sub_403F10+699↑p
.text:00408F50
.text:00408F50 Str1            = dword ptr  4
.text:00408F50 Str2            = dword ptr  8
.text:00408F50 MaxCount        = dword ptr  0Ch
.text:00408F50
.text:00408F50                 jmp     ds:__imp_strncmp
.text:00408F50 strncmp         endp
.text:00408F50
.text:00408F50 ; ---------------------------------------------------------------------------
.text:00408F56                 align 10h
.text:00408F60
.text:00408F60 ; =============== S U B R O U T I N E =======================================
.text:00408F60
.text:00408F60 ; Attributes: thunk
.text:00408F60
.text:00408F60 ; char *__cdecl getenv(const char *VarName)
.text:00408F60 getenv          proc near               ; CODE XREF: sub_403F10+B57↑p
.text:00408F60                                         ; sub_4059E0+13↑p
.text:00408F60
.text:00408F60 VarName         = dword ptr  4
.text:00408F60
.text:00408F60                 jmp     ds:__imp_getenv
.text:00408F60 getenv          endp
.text:00408F60
.text:00408F60 ; ---------------------------------------------------------------------------
.text:00408F66                 align 10h
.text:00408F70
.text:00408F70 ; =============== S U B R O U T I N E =======================================
.text:00408F70
.text:00408F70 ; Attributes: thunk
.text:00408F70
.text:00408F70 ; char *__cdecl strchr(const char *Str, int Val)
.text:00408F70 strchr          proc near               ; CODE XREF: sub_403F10+469↑p
.text:00408F70                                         ; sub_403F10+53A↑p ...
.text:00408F70
.text:00408F70 Str             = dword ptr  4
.text:00408F70 Val             = dword ptr  8
.text:00408F70
.text:00408F70                 jmp     ds:__imp_strchr
.text:00408F70 strchr          endp
.text:00408F70
.text:00408F70 ; ---------------------------------------------------------------------------
.text:00408F76                 align 10h
.text:00408F80
.text:00408F80 ; =============== S U B R O U T I N E =======================================
.text:00408F80
.text:00408F80 ; Attributes: thunk
.text:00408F80
.text:00408F80 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00408F80 vfprintf        proc near               ; CODE XREF: sub_404FD0+C1↑p
.text:00408F80                                         ; sub_408460+49↑p ...
.text:00408F80
.text:00408F80 Stream          = dword ptr  4
.text:00408F80 Format          = dword ptr  8
.text:00408F80 ArgList         = dword ptr  0Ch
.text:00408F80
.text:00408F80                 jmp     ds:__imp_vfprintf
.text:00408F80 vfprintf        endp
.text:00408F80
.text:00408F80 ; ---------------------------------------------------------------------------
.text:00408F86                 align 10h
.text:00408F90
.text:00408F90 ; =============== S U B R O U T I N E =======================================
.text:00408F90
.text:00408F90 ; Attributes: noreturn thunk
.text:00408F90
.text:00408F90 ; void __cdecl __noreturn abort()
.text:00408F90 abort           proc near               ; CODE XREF: sub_404FD0:loc_40506C↑p
.text:00408F90                                         ; sub_408110:loc_4082CA↑p ...
.text:00408F90                 jmp     ds:__imp_abort
.text:00408F90 abort           endp
.text:00408F90
.text:00408F90 ; ---------------------------------------------------------------------------
.text:00408F96                 align 10h
.text:00408FA0
.text:00408FA0 ; =============== S U B R O U T I N E =======================================
.text:00408FA0
.text:00408FA0 ; Attributes: thunk
.text:00408FA0
.text:00408FA0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00408FA0 strtol          proc near               ; CODE XREF: sub_405250+46↑p
.text:00408FA0                                         ; sub_4059E0+43↑p
.text:00408FA0
.text:00408FA0 String          = dword ptr  4
.text:00408FA0 EndPtr          = dword ptr  8
.text:00408FA0 Radix           = dword ptr  0Ch
.text:00408FA0
.text:00408FA0                 jmp     ds:__imp_strtol
.text:00408FA0 strtol          endp
.text:00408FA0
.text:00408FA0 ; ---------------------------------------------------------------------------
.text:00408FA6                 align 10h
.text:00408FB0
.text:00408FB0 ; =============== S U B R O U T I N E =======================================
.text:00408FB0
.text:00408FB0 ; Attributes: thunk
.text:00408FB0
.text:00408FB0 ; int __cdecl isctype(int C, int Type)
.text:00408FB0 _isctype        proc near               ; CODE XREF: sub_405B90+72↑p
.text:00408FB0                                         ; sub_406FD0+610↑p ...
.text:00408FB0
.text:00408FB0 C               = dword ptr  4
.text:00408FB0 Type            = dword ptr  8
.text:00408FB0
.text:00408FB0                 jmp     ds:__imp__isctype
.text:00408FB0 _isctype        endp
.text:00408FB0
.text:00408FB0 ; ---------------------------------------------------------------------------
.text:00408FB6                 align 10h
.text:00408FC0
.text:00408FC0 ; =============== S U B R O U T I N E =======================================
.text:00408FC0
.text:00408FC0 ; Attributes: thunk
.text:00408FC0
.text:00408FC0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00408FC0 memcpy          proc near               ; CODE XREF: .text:00406A08↑p
.text:00408FC0                                         ; .text:00406A51↑p
.text:00408FC0
.text:00408FC0 Src             = dword ptr  8
.text:00408FC0 Size            = dword ptr  0Ch
.text:00408FC0
.text:00408FC0                 jmp     ds:__imp_memcpy
.text:00408FC0 memcpy          endp
.text:00408FC0
.text:00408FC0 ; ---------------------------------------------------------------------------
.text:00408FC6                 align 10h
.text:00408FD0
.text:00408FD0 ; =============== S U B R O U T I N E =======================================
.text:00408FD0
.text:00408FD0 ; Attributes: thunk
.text:00408FD0
.text:00408FD0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00408FD0 memset          proc near               ; CODE XREF: .text:00406986↑p
.text:00408FD0
.text:00408FD0 Val             = dword ptr  8
.text:00408FD0 Size            = dword ptr  0Ch
.text:00408FD0
.text:00408FD0                 jmp     ds:__imp_memset
.text:00408FD0 memset          endp
.text:00408FD0
.text:00408FD0 ; ---------------------------------------------------------------------------
.text:00408FD6                 align 10h
.text:00408FE0
.text:00408FE0 ; =============== S U B R O U T I N E =======================================
.text:00408FE0
.text:00408FE0 ; Attributes: thunk
.text:00408FE0
.text:00408FE0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00408FE0 calloc          proc near               ; CODE XREF: .text:004069C3↑p
.text:00408FE0
.text:00408FE0 Count           = dword ptr  4
.text:00408FE0 Size            = dword ptr  8
.text:00408FE0
.text:00408FE0                 jmp     ds:__imp_calloc
.text:00408FE0 calloc          endp
.text:00408FE0
.text:00408FE0 ; ---------------------------------------------------------------------------
.text:00408FE6                 align 10h
.text:00408FF0
.text:00408FF0 ; =============== S U B R O U T I N E =======================================
.text:00408FF0
.text:00408FF0 ; Attributes: thunk
.text:00408FF0
.text:00408FF0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00408FF0 realloc         proc near               ; CODE XREF: .text:004068C0↑p
.text:00408FF0                                         ; sub_4068F0+16↑p ...
.text:00408FF0
.text:00408FF0 Block           = dword ptr  4
.text:00408FF0 Size            = dword ptr  8
.text:00408FF0
.text:00408FF0                 jmp     ds:__imp_realloc
.text:00408FF0 realloc         endp
.text:00408FF0
.text:00408FF0 ; ---------------------------------------------------------------------------
.text:00408FF6                 align 10h
.text:00409000
.text:00409000 ; =============== S U B R O U T I N E =======================================
.text:00409000
.text:00409000 ; Attributes: thunk
.text:00409000
.text:00409000 ; void *__cdecl malloc(size_t Size)
.text:00409000 malloc          proc near               ; CODE XREF: .text:00406844↑p
.text:00409000                                         ; sub_406860+E↑p ...
.text:00409000
.text:00409000 Size            = dword ptr  4
.text:00409000
.text:00409000                 jmp     ds:__imp_malloc
.text:00409000 malloc          endp
.text:00409000
.text:00409000 ; ---------------------------------------------------------------------------
.text:00409006                 align 10h
.text:00409010
.text:00409010 ; =============== S U B R O U T I N E =======================================
.text:00409010
.text:00409010 ; Attributes: thunk
.text:00409010
.text:00409010 ; int __cdecl toupper(int C)
.text:00409010 toupper         proc near               ; CODE XREF: sub_406CB0+33↑p
.text:00409010                                         ; sub_406CB0+42↑p
.text:00409010
.text:00409010 C               = dword ptr  4
.text:00409010
.text:00409010                 jmp     ds:__imp_toupper
.text:00409010 toupper         endp
.text:00409010
.text:00409010 ; ---------------------------------------------------------------------------
.text:00409016                 align 10h
.text:00409020
.text:00409020 ; =============== S U B R O U T I N E =======================================
.text:00409020
.text:00409020 ; Attributes: thunk
.text:00409020
.text:00409020 ; int __cdecl filbuf(FILE *File)
.text:00409020 _filbuf         proc near               ; CODE XREF: sub_406D10+B3↑p
.text:00409020
.text:00409020 File            = dword ptr  4
.text:00409020
.text:00409020                 jmp     ds:__imp__filbuf
.text:00409020 _filbuf         endp
.text:00409020
.text:00409020 ; ---------------------------------------------------------------------------
.text:00409026                 align 10h
.text:00409030
.text:00409030 ; =============== S U B R O U T I N E =======================================
.text:00409030
.text:00409030 ; Attributes: thunk
.text:00409030
.text:00409030 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00409030 iswctype        proc near               ; CODE XREF: sub_406FD0+78B↑p
.text:00409030
.text:00409030 C               = word ptr  4
.text:00409030 Type            = word ptr  8
.text:00409030
.text:00409030                 jmp     ds:__imp_iswctype
.text:00409030 iswctype        endp
.text:00409030
.text:00409030 ; ---------------------------------------------------------------------------
.text:00409036                 align 10h
.text:00409040
.text:00409040 ; =============== S U B R O U T I N E =======================================
.text:00409040
.text:00409040 ; Attributes: thunk
.text:00409040
.text:00409040 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:00409040 strcoll         proc near               ; CODE XREF: sub_408340+52↑p
.text:00409040
.text:00409040 String1         = dword ptr  4
.text:00409040 String2         = dword ptr  8
.text:00409040
.text:00409040                 jmp     ds:__imp_strcoll
.text:00409040 strcoll         endp
.text:00409040
.text:00409040 ; ---------------------------------------------------------------------------
.text:00409046                 align 10h
.text:00409050
.text:00409050 ; =============== S U B R O U T I N E =======================================
.text:00409050
.text:00409050 ; Attributes: thunk
.text:00409050
.text:00409050 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00409050 strcmp          proc near               ; CODE XREF: sub_408564+180↑p
.text:00409050
.text:00409050 Str1            = dword ptr  4
.text:00409050 Str2            = dword ptr  8
.text:00409050
.text:00409050                 jmp     ds:__imp_strcmp
.text:00409050 strcmp          endp
.text:00409050
.text:00409050 ; ---------------------------------------------------------------------------
.text:00409056                 align 10h
.text:00409060
.text:00409060 ; =============== S U B R O U T I N E =======================================
.text:00409060
.text:00409060 ; Attributes: thunk
.text:00409060
.text:00409060 ; int __cdecl fflush(FILE *Stream)
.text:00409060 fflush          proc near               ; CODE XREF: sub_408460+19↑p
.text:00409060                                         ; sub_408460+81↑p ...
.text:00409060
.text:00409060 Stream          = dword ptr  4
.text:00409060
.text:00409060                 jmp     ds:__imp_fflush
.text:00409060 fflush          endp
.text:00409060
.text:00409060 ; ---------------------------------------------------------------------------
.text:00409066                 align 10h
.text:00409070
.text:00409070 ; =============== S U B R O U T I N E =======================================
.text:00409070
.text:00409070 ; Attributes: thunk
.text:00409070
.text:00409070 ; char *__cdecl strerror(int ErrorMessage)
.text:00409070 strerror        proc near               ; CODE XREF: sub_408460+A5↑p
.text:00409070                                         ; sub_408564+10F↑p
.text:00409070
.text:00409070 ErrorMessage    = dword ptr  4
.text:00409070
.text:00409070                 jmp     ds:__imp_strerror
.text:00409070 strerror        endp
.text:00409070
.text:00409070 ; ---------------------------------------------------------------------------
.text:00409076                 align 10h
.text:00409080
.text:00409080 ; =============== S U B R O U T I N E =======================================
.text:00409080
.text:00409080 ; Attributes: thunk
.text:00409080
.text:00409080 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00409080 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00409080
.text:00409080 lpTopLevelExceptionFilter= dword ptr  4
.text:00409080
.text:00409080                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00409080 SetUnhandledExceptionFilter endp
.text:00409080
.text:00409080 ; ---------------------------------------------------------------------------
.text:00409086                 align 10h
.text:00409090
.text:00409090 ; =============== S U B R O U T I N E =======================================
.text:00409090
.text:00409090 ; Attributes: noreturn thunk
.text:00409090
.text:00409090 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00409090 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00409090
.text:00409090 uExitCode       = dword ptr  4
.text:00409090
.text:00409090                 jmp     ds:__imp_ExitProcess
.text:00409090 ExitProcess     endp
.text:00409090
.text:00409090 ; ---------------------------------------------------------------------------
.text:00409096                 align 10h
.text:004090A0 dword_4090A0    dd 0FFFFFFFFh           ; DATA XREF: .text:00408789↑r
.text:004090A0                                         ; .text:loc_4087B0↑r ...
.text:004090A4 dword_4090A4    dd 0                    ; DATA XREF: .text:loc_4087BC↑r
.text:004090A4                                         ; sub_4087E0:loc_40882D↑r
.text:004090A8                 dd 0FFFFFFFFh
.text:004090AC dword_4090AC    dd 55h dup(0)           ; DATA XREF: .data:off_40A094↓o
.text:00409200                 dd 380h dup(?)
.text:00409200 _text           ends
.text:00409200
.data:0040A000 ; Section 2. (virtual address 0000A000)
.data:0040A000 ; Virtual size                  : 000000B0 (    176.)
.data:0040A000 ; Section size in file          : 00000200 (    512.)
.data:0040A000 ; Offset to raw data for section: 00008600
.data:0040A000 ; Flags C0000040: Data Readable Writable
.data:0040A000 ; Alignment     : default
.data:0040A000 ; ===========================================================================
.data:0040A000
.data:0040A000 ; Segment type: Pure data
.data:0040A000 ; Segment permissions: Read/Write
.data:0040A000 _data           segment para public 'DATA' use32
.data:0040A000                 assume cs:_data
.data:0040A000                 ;org 40A000h
.data:0040A000 dword_40A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040A000                                         ; sub_401080+CC↑r
.data:0040A004 dword_40A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040A004                                         ; sub_401080+D4↑r
.data:0040A008                 align 10h
.data:0040A010 off_40A010      dd offset unk_40B080    ; DATA XREF: sub_401C00+550↑r
.data:0040A010                                         ; sub_401C00+560↑w ...
.data:0040A014                 align 10h
.data:0040A020 dword_40A020    dd 1                    ; DATA XREF: sub_401C00+4E1↑r
.data:0040A020                                         ; sub_401C00+838↑r ...
.data:0040A024 dword_40A024    dd 1                    ; DATA XREF: sub_404AA0+11↑r
.data:0040A024                                         ; .text:00404B41↑r
.data:0040A028 dword_40A028    dd 3Fh                  ; DATA XREF: sub_404AA0+7D↑w
.data:0040A028                                         ; .text:00404BAD↑w
.data:0040A02C                 align 10h
.data:0040A030 ; char *off_40A030
.data:0040A030 off_40A030      dd offset aCopyrightC2005
.data:0040A030                                         ; DATA XREF: sub_404FD0+DC↑r
.data:0040A030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040A034                 align 10h
.data:0040A040 ; int Code
.data:0040A040 Code            dd 1                    ; DATA XREF: sub_4058F0+6D↑r
.data:0040A040                                         ; sub_4058F0+9A↑r ...
.data:0040A044                 align 10h
.data:0040A050 dword_40A050    dd 1                    ; DATA XREF: sub_408110+22↑r
.data:0040A050                                         ; sub_408110+65↑r ...
.data:0040A054 dword_40A054    dd 100h                 ; DATA XREF: sub_408110+3F↑o
.data:0040A054                                         ; sub_408110+1A2↑r ...
.data:0040A058 off_40A058      dd offset unk_40B110    ; DATA XREF: sub_408110+1AA↑r
.data:0040A05C ; void *off_40A05C
.data:0040A05C off_40A05C      dd offset dword_40A054  ; DATA XREF: sub_408110+39↑r
.data:0040A05C                                         ; sub_408110+60↑w ...
.data:0040A060 dword_40A060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040A064                 align 10h
.data:0040A070 ; int Mode
.data:0040A070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040A070                                         ; sub_401080+80↑r ...
.data:0040A074                 align 10h
.data:0040A080 dword_40A080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040A080                                         ; sub_401080+BA↑r
.data:0040A084                 align 10h
.data:0040A090 dword_40A090    dd 0                    ; DATA XREF: sub_4087E0+9↑r
.data:0040A090                                         ; sub_4087E0+1D↑w
.data:0040A094 off_40A094      dd offset dword_4090AC  ; DATA XREF: sub_408750+6↑r
.data:0040A094                                         ; sub_408750+17↑r ...
.data:0040A098                 align 1000h
.data:0040A098 _data           ends
.data:0040A098
.bss:0040B000 ; Section 3. (virtual address 0000B000)
.bss:0040B000 ; Virtual size                  : 00000300 (    768.)
.bss:0040B000 ; Section size in file          : 00000000 (      0.)
.bss:0040B000 ; Offset to raw data for section: 00000000
.bss:0040B000 ; Flags C0000080: Bss Readable Writable
.bss:0040B000 ; Alignment     : default
.bss:0040B000 ; ===========================================================================
.bss:0040B000
.bss:0040B000 ; Segment type: Uninitialized
.bss:0040B000 ; Segment permissions: Read/Write
.bss:0040B000 _bss            segment para public 'BSS' use32
.bss:0040B000                 assume cs:_bss
.bss:0040B000                 ;org 40B000h
.bss:0040B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040B000 byte_40B000     db ?                    ; DATA XREF: sub_401C00+6C↑w
.bss:0040B000                                         ; sub_403650:loc_403710↑r ...
.bss:0040B001                 align 10h
.bss:0040B010 byte_40B010     db ?                    ; DATA XREF: sub_401C00+82↑w
.bss:0040B010                                         ; sub_401C00:loc_401CA0↑r ...
.bss:0040B011                 align 10h
.bss:0040B020 byte_40B020     db ?                    ; DATA XREF: sub_401C00:loc_40233D↑w
.bss:0040B020                                         ; sub_402850:loc_402DEB↑r ...
.bss:0040B021                 align 10h
.bss:0040B030 byte_40B030     db ?                    ; DATA XREF: sub_401C00+731↑w
.bss:0040B030                                         ; sub_402850+153↑r ...
.bss:0040B031                 align 10h
.bss:0040B040 byte_40B040     db ?                    ; DATA XREF: sub_401C00+95↑w
.bss:0040B040                                         ; sub_401C00+6AA↑w ...
.bss:0040B041                 align 10h
.bss:0040B050 ; char *Buffer
.bss:0040B050 Buffer          dd ?                    ; DATA XREF: sub_401C00+5CF↑w
.bss:0040B050                                         ; sub_403780:loc_4037F2↑r ...
.bss:0040B054                 align 10h
.bss:0040B060 dword_40B060    dd ?                    ; DATA XREF: sub_401C00:loc_401F09↑w
.bss:0040B060                                         ; sub_403650+B↑r ...
.bss:0040B064                 align 10h
.bss:0040B070 dword_40B070    dd ?                    ; DATA XREF: sub_401C00+1EE↑w
.bss:0040B070                                         ; sub_401C00+825↑w ...
.bss:0040B074                 align 10h
.bss:0040B080 unk_40B080      db    ? ;               ; DATA XREF: .data:off_40A010↑o
.bss:0040B081                 db    ? ;
.bss:0040B082                 db    ? ;
.bss:0040B083                 db    ? ;
.bss:0040B084                 db    ? ;
.bss:0040B085                 db    ? ;
.bss:0040B086                 db    ? ;
.bss:0040B087                 db    ? ;
.bss:0040B088 dword_40B088    dd ?                    ; DATA XREF: sub_403780:loc_4037A3↑r
.bss:0040B08C                 align 10h
.bss:0040B090 byte_40B090     db ?                    ; DATA XREF: sub_401C00+752↑w
.bss:0040B090                                         ; sub_403480+22↑r ...
.bss:0040B091                 align 10h
.bss:0040B0A0 ; FILE stru_40B0A0
.bss:0040B0A0 stru_40B0A0     FILE <?>                ; DATA XREF: sub_402850:loc_402A12↑o
.bss:0040B0A0                                         ; sub_402850:loc_402EAE↑o ...
.bss:0040B0C0 byte_40B0C0     db ?                    ; DATA XREF: sub_401C00+5BD↑w
.bss:0040B0C0                                         ; sub_403650+7E↑r
.bss:0040B0C1                 align 10h
.bss:0040B0D0 dword_40B0D0    dd ?                    ; DATA XREF: sub_404AA0+9↑o
.bss:0040B0D0                                         ; sub_404AA0+17↑w ...
.bss:0040B0D4 dword_40B0D4    dd ?                    ; DATA XREF: sub_404AA0+21↑w
.bss:0040B0D4                                         ; .text:00404B59↑w
.bss:0040B0D8 dword_40B0D8    dd ?                    ; DATA XREF: sub_404AA0+77↑r
.bss:0040B0D8                                         ; .text:00404BA7↑r
.bss:0040B0DC dword_40B0DC    dd ?                    ; DATA XREF: sub_404AA0+6B↑r
.bss:0040B0DC                                         ; .text:00404B9B↑r
.bss:0040B0E0                 align 40h
.bss:0040B100 ; char *dword_40B100
.bss:0040B100 dword_40B100    dd ?                    ; DATA XREF: .text:004058C4↑w
.bss:0040B100                                         ; sub_4058F0+58↑r
.bss:0040B104                 align 10h
.bss:0040B110 unk_40B110      db    ? ;               ; DATA XREF: sub_408110+100↑o
.bss:0040B110                                         ; .data:off_40A058↑o
.bss:0040B111                 db    ? ;
.bss:0040B112                 db    ? ;
.bss:0040B113                 db    ? ;
.bss:0040B114                 db    ? ;
.bss:0040B115                 db    ? ;
.bss:0040B116                 db    ? ;
.bss:0040B117                 db    ? ;
.bss:0040B118                 db    ? ;
.bss:0040B119                 db    ? ;
.bss:0040B11A                 db    ? ;
.bss:0040B11B                 db    ? ;
.bss:0040B11C                 db    ? ;
.bss:0040B11D                 db    ? ;
.bss:0040B11E                 db    ? ;
.bss:0040B11F                 db    ? ;
.bss:0040B120                 db    ? ;
.bss:0040B121                 db    ? ;
.bss:0040B122                 db    ? ;
.bss:0040B123                 db    ? ;
.bss:0040B124                 db    ? ;
.bss:0040B125                 db    ? ;
.bss:0040B126                 db    ? ;
.bss:0040B127                 db    ? ;
.bss:0040B128                 db    ? ;
.bss:0040B129                 db    ? ;
.bss:0040B12A                 db    ? ;
.bss:0040B12B                 db    ? ;
.bss:0040B12C                 db    ? ;
.bss:0040B12D                 db    ? ;
.bss:0040B12E                 db    ? ;
.bss:0040B12F                 db    ? ;
.bss:0040B130                 db    ? ;
.bss:0040B131                 db    ? ;
.bss:0040B132                 db    ? ;
.bss:0040B133                 db    ? ;
.bss:0040B134                 db    ? ;
.bss:0040B135                 db    ? ;
.bss:0040B136                 db    ? ;
.bss:0040B137                 db    ? ;
.bss:0040B138                 db    ? ;
.bss:0040B139                 db    ? ;
.bss:0040B13A                 db    ? ;
.bss:0040B13B                 db    ? ;
.bss:0040B13C                 db    ? ;
.bss:0040B13D                 db    ? ;
.bss:0040B13E                 db    ? ;
.bss:0040B13F                 db    ? ;
.bss:0040B140                 db    ? ;
.bss:0040B141                 db    ? ;
.bss:0040B142                 db    ? ;
.bss:0040B143                 db    ? ;
.bss:0040B144                 db    ? ;
.bss:0040B145                 db    ? ;
.bss:0040B146                 db    ? ;
.bss:0040B147                 db    ? ;
.bss:0040B148                 db    ? ;
.bss:0040B149                 db    ? ;
.bss:0040B14A                 db    ? ;
.bss:0040B14B                 db    ? ;
.bss:0040B14C                 db    ? ;
.bss:0040B14D                 db    ? ;
.bss:0040B14E                 db    ? ;
.bss:0040B14F                 db    ? ;
.bss:0040B150                 db    ? ;
.bss:0040B151                 db    ? ;
.bss:0040B152                 db    ? ;
.bss:0040B153                 db    ? ;
.bss:0040B154                 db    ? ;
.bss:0040B155                 db    ? ;
.bss:0040B156                 db    ? ;
.bss:0040B157                 db    ? ;
.bss:0040B158                 db    ? ;
.bss:0040B159                 db    ? ;
.bss:0040B15A                 db    ? ;
.bss:0040B15B                 db    ? ;
.bss:0040B15C                 db    ? ;
.bss:0040B15D                 db    ? ;
.bss:0040B15E                 db    ? ;
.bss:0040B15F                 db    ? ;
.bss:0040B160                 db    ? ;
.bss:0040B161                 db    ? ;
.bss:0040B162                 db    ? ;
.bss:0040B163                 db    ? ;
.bss:0040B164                 db    ? ;
.bss:0040B165                 db    ? ;
.bss:0040B166                 db    ? ;
.bss:0040B167                 db    ? ;
.bss:0040B168                 db    ? ;
.bss:0040B169                 db    ? ;
.bss:0040B16A                 db    ? ;
.bss:0040B16B                 db    ? ;
.bss:0040B16C                 db    ? ;
.bss:0040B16D                 db    ? ;
.bss:0040B16E                 db    ? ;
.bss:0040B16F                 db    ? ;
.bss:0040B170                 db    ? ;
.bss:0040B171                 db    ? ;
.bss:0040B172                 db    ? ;
.bss:0040B173                 db    ? ;
.bss:0040B174                 db    ? ;
.bss:0040B175                 db    ? ;
.bss:0040B176                 db    ? ;
.bss:0040B177                 db    ? ;
.bss:0040B178                 db    ? ;
.bss:0040B179                 db    ? ;
.bss:0040B17A                 db    ? ;
.bss:0040B17B                 db    ? ;
.bss:0040B17C                 db    ? ;
.bss:0040B17D                 db    ? ;
.bss:0040B17E                 db    ? ;
.bss:0040B17F                 db    ? ;
.bss:0040B180                 db    ? ;
.bss:0040B181                 db    ? ;
.bss:0040B182                 db    ? ;
.bss:0040B183                 db    ? ;
.bss:0040B184                 db    ? ;
.bss:0040B185                 db    ? ;
.bss:0040B186                 db    ? ;
.bss:0040B187                 db    ? ;
.bss:0040B188                 db    ? ;
.bss:0040B189                 db    ? ;
.bss:0040B18A                 db    ? ;
.bss:0040B18B                 db    ? ;
.bss:0040B18C                 db    ? ;
.bss:0040B18D                 db    ? ;
.bss:0040B18E                 db    ? ;
.bss:0040B18F                 db    ? ;
.bss:0040B190                 db    ? ;
.bss:0040B191                 db    ? ;
.bss:0040B192                 db    ? ;
.bss:0040B193                 db    ? ;
.bss:0040B194                 db    ? ;
.bss:0040B195                 db    ? ;
.bss:0040B196                 db    ? ;
.bss:0040B197                 db    ? ;
.bss:0040B198                 db    ? ;
.bss:0040B199                 db    ? ;
.bss:0040B19A                 db    ? ;
.bss:0040B19B                 db    ? ;
.bss:0040B19C                 db    ? ;
.bss:0040B19D                 db    ? ;
.bss:0040B19E                 db    ? ;
.bss:0040B19F                 db    ? ;
.bss:0040B1A0                 db    ? ;
.bss:0040B1A1                 db    ? ;
.bss:0040B1A2                 db    ? ;
.bss:0040B1A3                 db    ? ;
.bss:0040B1A4                 db    ? ;
.bss:0040B1A5                 db    ? ;
.bss:0040B1A6                 db    ? ;
.bss:0040B1A7                 db    ? ;
.bss:0040B1A8                 db    ? ;
.bss:0040B1A9                 db    ? ;
.bss:0040B1AA                 db    ? ;
.bss:0040B1AB                 db    ? ;
.bss:0040B1AC                 db    ? ;
.bss:0040B1AD                 db    ? ;
.bss:0040B1AE                 db    ? ;
.bss:0040B1AF                 db    ? ;
.bss:0040B1B0                 db    ? ;
.bss:0040B1B1                 db    ? ;
.bss:0040B1B2                 db    ? ;
.bss:0040B1B3                 db    ? ;
.bss:0040B1B4                 db    ? ;
.bss:0040B1B5                 db    ? ;
.bss:0040B1B6                 db    ? ;
.bss:0040B1B7                 db    ? ;
.bss:0040B1B8                 db    ? ;
.bss:0040B1B9                 db    ? ;
.bss:0040B1BA                 db    ? ;
.bss:0040B1BB                 db    ? ;
.bss:0040B1BC                 db    ? ;
.bss:0040B1BD                 db    ? ;
.bss:0040B1BE                 db    ? ;
.bss:0040B1BF                 db    ? ;
.bss:0040B1C0                 db    ? ;
.bss:0040B1C1                 db    ? ;
.bss:0040B1C2                 db    ? ;
.bss:0040B1C3                 db    ? ;
.bss:0040B1C4                 db    ? ;
.bss:0040B1C5                 db    ? ;
.bss:0040B1C6                 db    ? ;
.bss:0040B1C7                 db    ? ;
.bss:0040B1C8                 db    ? ;
.bss:0040B1C9                 db    ? ;
.bss:0040B1CA                 db    ? ;
.bss:0040B1CB                 db    ? ;
.bss:0040B1CC                 db    ? ;
.bss:0040B1CD                 db    ? ;
.bss:0040B1CE                 db    ? ;
.bss:0040B1CF                 db    ? ;
.bss:0040B1D0                 db    ? ;
.bss:0040B1D1                 db    ? ;
.bss:0040B1D2                 db    ? ;
.bss:0040B1D3                 db    ? ;
.bss:0040B1D4                 db    ? ;
.bss:0040B1D5                 db    ? ;
.bss:0040B1D6                 db    ? ;
.bss:0040B1D7                 db    ? ;
.bss:0040B1D8                 db    ? ;
.bss:0040B1D9                 db    ? ;
.bss:0040B1DA                 db    ? ;
.bss:0040B1DB                 db    ? ;
.bss:0040B1DC                 db    ? ;
.bss:0040B1DD                 db    ? ;
.bss:0040B1DE                 db    ? ;
.bss:0040B1DF                 db    ? ;
.bss:0040B1E0                 db    ? ;
.bss:0040B1E1                 db    ? ;
.bss:0040B1E2                 db    ? ;
.bss:0040B1E3                 db    ? ;
.bss:0040B1E4                 db    ? ;
.bss:0040B1E5                 db    ? ;
.bss:0040B1E6                 db    ? ;
.bss:0040B1E7                 db    ? ;
.bss:0040B1E8                 db    ? ;
.bss:0040B1E9                 db    ? ;
.bss:0040B1EA                 db    ? ;
.bss:0040B1EB                 db    ? ;
.bss:0040B1EC                 db    ? ;
.bss:0040B1ED                 db    ? ;
.bss:0040B1EE                 db    ? ;
.bss:0040B1EF                 db    ? ;
.bss:0040B1F0                 db    ? ;
.bss:0040B1F1                 db    ? ;
.bss:0040B1F2                 db    ? ;
.bss:0040B1F3                 db    ? ;
.bss:0040B1F4                 db    ? ;
.bss:0040B1F5                 db    ? ;
.bss:0040B1F6                 db    ? ;
.bss:0040B1F7                 db    ? ;
.bss:0040B1F8                 db    ? ;
.bss:0040B1F9                 db    ? ;
.bss:0040B1FA                 db    ? ;
.bss:0040B1FB                 db    ? ;
.bss:0040B1FC                 db    ? ;
.bss:0040B1FD                 db    ? ;
.bss:0040B1FE                 db    ? ;
.bss:0040B1FF                 db    ? ;
.bss:0040B200                 db    ? ;
.bss:0040B201                 db    ? ;
.bss:0040B202                 db    ? ;
.bss:0040B203                 db    ? ;
.bss:0040B204                 db    ? ;
.bss:0040B205                 db    ? ;
.bss:0040B206                 db    ? ;
.bss:0040B207                 db    ? ;
.bss:0040B208                 db    ? ;
.bss:0040B209                 db    ? ;
.bss:0040B20A                 db    ? ;
.bss:0040B20B                 db    ? ;
.bss:0040B20C                 db    ? ;
.bss:0040B20D                 db    ? ;
.bss:0040B20E                 db    ? ;
.bss:0040B20F                 db    ? ;
.bss:0040B210 dword_40B210    dd ?                    ; DATA XREF: .text:loc_407AA1↑o
.bss:0040B210                                         ; .text:loc_407AC0↑o ...
.bss:0040B214 dword_40B214    dd ?                    ; DATA XREF: .text:loc_407B40↑o
.bss:0040B214                                         ; .text:00407FC8↑r ...
.bss:0040B218 dword_40B218    dd ?                    ; DATA XREF: .text:00407FC2↑r
.bss:0040B218                                         ; sub_408070+2C↑r
.bss:0040B21C dword_40B21C    dd ?                    ; DATA XREF: .text:00407FB6↑r
.bss:0040B21C                                         ; sub_408070+22↑r
.bss:0040B220 dword_40B220    dd ?                    ; DATA XREF: .text:00407FD2↑r
.bss:0040B220                                         ; sub_408070+36↑r
.bss:0040B224 dword_40B224    dd ?                    ; DATA XREF: .text:00407FE2↑r
.bss:0040B224                                         ; sub_408070+4E↑r
.bss:0040B228 dword_40B228    dd ?                    ; DATA XREF: .text:00407FFF↑r
.bss:0040B228                                         ; sub_408070+62↑r
.bss:0040B22C dword_40B22C    dd ?                    ; DATA XREF: .text:00407FF5↑r
.bss:0040B22C                                         ; sub_408070+70↑r
.bss:0040B230 dword_40B230    dd ?                    ; DATA XREF: .text:00407FD8↑r
.bss:0040B230                                         ; sub_408070+7A↑r
.bss:0040B234                 align 10h
.bss:0040B240 ; char *Str1
.bss:0040B240 Str1            dd ?                    ; DATA XREF: sub_408564:loc_40859D↑w
.bss:0040B240                                         ; sub_408564:loc_4086D0↑r
.bss:0040B244                 align 10h
.bss:0040B250 dword_40B250    dd ?                    ; DATA XREF: sub_408564+2D↑r
.bss:0040B250                                         ; sub_408564+3F↑w
.bss:0040B254                 align 10h
.bss:0040B260 dword_40B260    dd ?                    ; DATA XREF: sub_401C00+33↑w
.bss:0040B260                                         ; sub_401C00+21B↑r ...
.bss:0040B264                 align 20h
.bss:0040B280 ; char *Str
.bss:0040B280 Str             dd ?                    ; DATA XREF: sub_401C00+11F↑r
.bss:0040B280                                         ; sub_401C00+247↑r ...
.bss:0040B284                 align 10h
.bss:0040B290 dword_40B290    dd ?                    ; CODE XREF: sub_408564+63↑p
.bss:0040B290                                         ; DATA XREF: sub_408460+1E↑r ...
.bss:0040B294                 align 10h
.bss:0040B2A0 dword_40B2A0    dd ?                    ; DATA XREF: sub_408460+4E↑w
.bss:0040B2A0                                         ; sub_408564+AB↑w
.bss:0040B2A4                 db    ? ;
.bss:0040B2A5                 db    ? ;
.bss:0040B2A6                 db    ? ;
.bss:0040B2A7                 db    ? ;
.bss:0040B2A8                 db    ? ;
.bss:0040B2A9                 db    ? ;
.bss:0040B2AA                 db    ? ;
.bss:0040B2AB                 db    ? ;
.bss:0040B2AC                 db    ? ;
.bss:0040B2AD                 db    ? ;
.bss:0040B2AE                 db    ? ;
.bss:0040B2AF                 db    ? ;
.bss:0040B2B0                 db    ? ;
.bss:0040B2B1                 db    ? ;
.bss:0040B2B2                 db    ? ;
.bss:0040B2B3                 db    ? ;
.bss:0040B2B4                 db    ? ;
.bss:0040B2B5                 db    ? ;
.bss:0040B2B6                 db    ? ;
.bss:0040B2B7                 db    ? ;
.bss:0040B2B8                 db    ? ;
.bss:0040B2B9                 db    ? ;
.bss:0040B2BA                 db    ? ;
.bss:0040B2BB                 db    ? ;
.bss:0040B2BC                 db    ? ;
.bss:0040B2BD                 db    ? ;
.bss:0040B2BE                 db    ? ;
.bss:0040B2BF                 db    ? ;
.bss:0040B2C0                 db    ? ;
.bss:0040B2C1                 db    ? ;
.bss:0040B2C2                 db    ? ;
.bss:0040B2C3                 db    ? ;
.bss:0040B2C4                 db    ? ;
.bss:0040B2C5                 db    ? ;
.bss:0040B2C6                 db    ? ;
.bss:0040B2C7                 db    ? ;
.bss:0040B2C8                 db    ? ;
.bss:0040B2C9                 db    ? ;
.bss:0040B2CA                 db    ? ;
.bss:0040B2CB                 db    ? ;
.bss:0040B2CC                 db    ? ;
.bss:0040B2CD                 db    ? ;
.bss:0040B2CE                 db    ? ;
.bss:0040B2CF                 db    ? ;
.bss:0040B2D0 dword_40B2D0    dd ?                    ; DATA XREF: sub_408564+13↑r
.bss:0040B2D4                 align 1000h
.bss:0040B2D4 _bss            ends
.bss:0040B2D4
.idata:0040C000 ; Section 4. (virtual address 0000C000)
.idata:0040C000 ; Virtual size                  : 000005F8 (   1528.)
.idata:0040C000 ; Section size in file          : 00000600 (   1536.)
.idata:0040C000 ; Offset to raw data for section: 00008800
.idata:0040C000 ; Flags C0000040: Data Readable Writable
.idata:0040C000 ; Alignment     : default
.idata:0040C000 ; ===========================================================================
.idata:0040C000
.idata:0040C000 ; Segment type: Externs
.idata:0040C000 ; _idata
.idata:0040C000
.idata:0040C001
.idata:0040C158 ;
.idata:0040C158 ; Imports from libintl3.dll
.idata:0040C158 ;
.idata:0040C158                 extrn libintl_bindtextdomain:dword
.idata:0040C158                                         ; CODE XREF: sub_401C00+4D↑p
.idata:0040C158                                         ; DATA XREF: sub_401C00+4D↑r ...
.idata:0040C15C                 extrn libintl_gettext:dword
.idata:0040C15C                                         ; CODE XREF: sub_401C00+12A↑p
.idata:0040C15C                                         ; sub_401C00+180↑p ...
.idata:0040C160                 extrn libintl_textdomain:dword
.idata:0040C160                                         ; CODE XREF: sub_401C00+5A↑p
.idata:0040C160                                         ; DATA XREF: sub_401C00+5A↑r ...
.idata:0040C164
.idata:0040C16C ;
.idata:0040C16C ; Imports from KERNEL32.dll
.idata:0040C16C ;
.idata:0040C16C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040C16C                 extrn __imp_ExitProcess:dword
.idata:0040C16C                                         ; DATA XREF: ExitProcess↑r
.idata:0040C170 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040C170                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040C170                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040C174
.idata:0040C17C ;
.idata:0040C17C ; Imports from MSVCP60.DLL
.idata:0040C17C ;
.idata:0040C17C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040C17C                 extrn __imp_mbrtowc:dword
.idata:0040C17C                                         ; DATA XREF: mbrtowc↑r
.idata:0040C180
.idata:0040C188 ;
.idata:0040C188 ; Imports from msvcrt.dll
.idata:0040C188 ;
.idata:0040C188                 extrn __imp___getmainargs:dword
.idata:0040C188                                         ; DATA XREF: __getmainargs↑r
.idata:0040C18C ; int _mb_cur_max
.idata:0040C18C                 extrn __mb_cur_max:dword
.idata:0040C18C                                         ; DATA XREF: sub_405B90+58↑r
.idata:0040C18C                                         ; sub_406FD0+7↑r ...
.idata:0040C190 ; char ***(__cdecl *__p__environ)()
.idata:0040C190                 extrn __imp___p__environ:dword
.idata:0040C190                                         ; DATA XREF: __p__environ↑r
.idata:0040C194 ; int *(__cdecl *__p__fmode)()
.idata:0040C194                 extrn __imp___p__fmode:dword
.idata:0040C194                                         ; DATA XREF: __p__fmode↑r
.idata:0040C198 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040C198                 extrn __set_app_type:dword
.idata:0040C198                                         ; CODE XREF: start+D↑p
.idata:0040C198                                         ; .text:0040102D↑p
.idata:0040C198                                         ; DATA XREF: ...
.idata:0040C19C                 extrn __imp__assert:dword
.idata:0040C19C                                         ; DATA XREF: _assert↑r
.idata:0040C1A0 ; void (__cdecl *_cexit)()
.idata:0040C1A0                 extrn __imp__cexit:dword
.idata:0040C1A0                                         ; DATA XREF: _cexit↑r
.idata:0040C1A4 ; int *(__cdecl *_errno)()
.idata:0040C1A4                 extrn __imp__errno:dword
.idata:0040C1A4                                         ; DATA XREF: _errno↑r
.idata:0040C1A8 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040C1A8                 extrn __imp__filbuf:dword
.idata:0040C1A8                                         ; DATA XREF: _filbuf↑r
.idata:0040C1AC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040C1AC                 extrn __imp__flsbuf:dword
.idata:0040C1AC                                         ; DATA XREF: _flsbuf↑r
.idata:0040C1B0 ; FILE iob[]
.idata:0040C1B0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040C1B0                                         ; sub_401080+75↑r ...
.idata:0040C1B4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040C1B4                 extrn __imp__isctype:dword
.idata:0040C1B4                                         ; DATA XREF: _isctype↑r
.idata:0040C1B8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040C1B8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040C1B8                                         ; DATA XREF: .text:0040106C↑r
.idata:0040C1BC ; const unsigned __int16 *pctype
.idata:0040C1BC                 extrn _pctype:dword     ; DATA XREF: sub_405B90:loc_4067E2↑r
.idata:0040C1BC                                         ; sub_406FD0:loc_4076C4↑r ...
.idata:0040C1C0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040C1C0                 extrn __imp__setmode:dword
.idata:0040C1C0                                         ; DATA XREF: _setmode↑r
.idata:0040C1C4 ; void (__cdecl __noreturn *abort)()
.idata:0040C1C4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040C1C8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040C1C8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040C1C8                                         ; DATA XREF: sub_401040+C↑r
.idata:0040C1CC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040C1CC                 extrn __imp_calloc:dword
.idata:0040C1CC                                         ; DATA XREF: calloc↑r
.idata:0040C1D0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040C1D0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040C1D4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040C1D4                 extrn __imp_fclose:dword
.idata:0040C1D4                                         ; DATA XREF: fclose↑r
.idata:0040C1D8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040C1D8                 extrn __imp_fflush:dword
.idata:0040C1D8                                         ; DATA XREF: fflush↑r
.idata:0040C1DC ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0040C1DC                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0040C1E0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040C1E0                 extrn __imp_fprintf:dword
.idata:0040C1E0                                         ; DATA XREF: fprintf↑r
.idata:0040C1E4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040C1E4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040C1E8 ; void (__cdecl *free)(void *Block)
.idata:0040C1E8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040C1EC ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040C1EC                 extrn __imp_fwrite:dword
.idata:0040C1EC                                         ; DATA XREF: fwrite↑r
.idata:0040C1F0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040C1F0                 extrn __imp_getenv:dword
.idata:0040C1F0                                         ; DATA XREF: getenv↑r
.idata:0040C1F4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040C1F4                 extrn __imp_iswctype:dword
.idata:0040C1F4                                         ; DATA XREF: iswctype↑r
.idata:0040C1F8 ; void *(__cdecl *malloc)(size_t Size)
.idata:0040C1F8                 extrn __imp_malloc:dword
.idata:0040C1F8                                         ; DATA XREF: malloc↑r
.idata:0040C1FC ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:0040C1FC                 extrn __imp_memchr:dword
.idata:0040C1FC                                         ; DATA XREF: memchr↑r
.idata:0040C200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040C200                 extrn __imp_memcpy:dword
.idata:0040C200                                         ; DATA XREF: memcpy↑r
.idata:0040C204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040C204                 extrn __imp_memset:dword
.idata:0040C204                                         ; DATA XREF: memset↑r
.idata:0040C208 ; int (*printf)(const char *const Format, ...)
.idata:0040C208                 extrn __imp_printf:dword
.idata:0040C208                                         ; DATA XREF: printf↑r
.idata:0040C20C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040C20C                 extrn __imp_realloc:dword
.idata:0040C20C                                         ; DATA XREF: realloc↑r
.idata:0040C210 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040C210                 extrn __imp_setlocale:dword
.idata:0040C210                                         ; DATA XREF: setlocale↑r
.idata:0040C214 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040C214                 extrn __imp_signal:dword
.idata:0040C214                                         ; DATA XREF: signal↑r
.idata:0040C218 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040C218                 extrn __imp_strchr:dword
.idata:0040C218                                         ; DATA XREF: strchr↑r
.idata:0040C21C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040C21C                 extrn __imp_strcmp:dword
.idata:0040C21C                                         ; DATA XREF: strcmp↑r
.idata:0040C220 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:0040C220                 extrn __imp_strcoll:dword
.idata:0040C220                                         ; DATA XREF: strcoll↑r
.idata:0040C224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040C224                 extrn __imp_strerror:dword
.idata:0040C224                                         ; DATA XREF: strerror↑r
.idata:0040C228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040C228                 extrn __imp_strlen:dword
.idata:0040C228                                         ; DATA XREF: strlen↑r
.idata:0040C22C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040C22C                 extrn __imp_strncmp:dword
.idata:0040C22C                                         ; DATA XREF: strncmp↑r
.idata:0040C230 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0040C230                 extrn __imp_strpbrk:dword
.idata:0040C230                                         ; DATA XREF: strpbrk↑r
.idata:0040C234 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0040C234                 extrn __imp_strtol:dword
.idata:0040C234                                         ; DATA XREF: strtol↑r
.idata:0040C238 ; int (__cdecl *toupper)(int C)
.idata:0040C238                 extrn __imp_toupper:dword
.idata:0040C238                                         ; DATA XREF: toupper↑r
.idata:0040C23C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040C23C                 extrn __imp_vfprintf:dword
.idata:0040C23C                                         ; DATA XREF: vfprintf↑r
.idata:0040C240
.idata:0040C240
.idata:0040C240
.idata:0040C240                 end start
